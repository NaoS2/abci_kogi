線グラフをオレンジ色を用いて描画する	plt.plot(データ列x, データ列y, color='orange')
option: マーカーの色をティールにする	markerfacecolor = 'teal'
データフレームの選択したカラムの中に文字列と文字列が存在する	df[['列A', '列B']].isin([value, value2])
データ列の推移を半透明の一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
option: ミディアムターコイズにフォントの色を設定する	color = 'mediumturquoise'
フローラルホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
折れ線グラフをダークスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
棒グラフをダークターコイズ色として描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
リストを昇順にソートする	sorted(aList, reverse=False)
スピアマンの相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X')
データフレームの中の列を等量で分割数nでビン分割する	pd.qcut(df[col], n)
オブジェクトが集合	isinstance(obj, set)
ライトスチールブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
表データのあるカラムの秒	df['列A'].dt.second
実数とyのノルム	math.hypot(x, y)
縦棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
マッピングからカウンタを作る	collections.Counter(aDict)
リストを下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
散布図をダークオレンジ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkorange')
等量でn個に配列をビン分割する	pd.qcut(aArray, n)
散布図の左三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
箱髭図としてデータ列を図示する	plt.boxplot(データ列)
ヒストグラムの色をパールゴールデンロッドに変更する	plt.hist(データ列, color='palegoldenrod')
option: 色をトマトにセットする	color = 'tomato'
option: 色をライトシアンに設定する	color = 'lightcyan'
空の集合を見る	set()
データフレームのインデックスがnの行を取り出す	df.loc[n]
散布図の星マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
option: 青緑にグラフの色を設定する	color = 'teal'
データフレームの選択したカラムの中にいくつNaNがあるか数える	df[['列A', '列B']].isna().sum()
あるカラムの文字列が部分文字列で終わる行を取り出す	df[df['列A'].str.endswith(部分文字列)]
ヒストグラムをミッドナイトブルー色として描画する	plt.hist(データ列, color='midnightblue')
パラメータについて数値の微分を行う	sympy.diff(e, z)
イテラブルをy軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
nとn2の積を求める	n * n2
正規分布による累積分布関数の逆関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
棒グラフをマゼンタ色を使って描画する	plt.bar(データ列x, データ列y, color='magenta')
線形回帰モデルの回帰変数	model.coef_
指定したカラムの文字列をNaNに変換する	df['列A'].replace(値, np.nan)
最後の部分文字列で文字列を分けた場合の最初の文字列を取り出す	s.rpartition(sub)[0]
nを十六進表現に変換する	hex(n)
辞書をカウンタにする	collections.Counter(aDict)
線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
正接の逆数	math.atan(x)
option: フォントの色を白に設定する	color = 'white'
ミディアムターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
データフレームのカラムの中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
２つのデータフレームを連結する	pd.concat([df, df2])
データフレームのポイントプロットをプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ある列の最小値	df.groupby('列A').min()
折れ線グラフの色をアクアに指定する	plt.plot(データ列x, データ列y, color='aqua')
横棒グラフをスノー色として描画する	plt.barh(データ列x, データ列y, color='snow')
x軸の目盛りを対数に変更する	plt.xscale('log')
日付時刻データにn日を加算する	aDatetime + datetime.timedelta(days=n)
横棒グラフをホワイト色で描画する	plt.barh(データ列x, データ列y, color='white')
指定した列の値で集計し、各平均値を計算する	df.groupby('列A').mean()
option: グラフの色をブラウンに変更する	color = 'brown'
文字列のサフィックスが部分文字列か調べる	s.endswith(sub)
グラフにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
タプル内の要素が全て真かどうか	all(aTuple)
色を全般的に色差別なくする	sns.set(pallete='colorblind')
配列とリストの散布図をプロットしてマーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
数値を両端キューの末尾に追加する	deq.append(element)
10行をデータフレームからランダムに抽出する	df.sample(10)
カウンタからゼロ回数を取り除く	+aCounter
文字列の開始位置からと終了位置までの範囲に部分文字列が含まれない	s.find(sub, start, end) == -1
predicateFuncがTrueとなるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
ライトスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームを表示するとき表示可能な最大行数をnに減らす	pd.set_option('display.max_rows', n)
文字列中に漢字が使われているか調べる	re.search('[\u4E00-\u9FD0]', s)
option: 淡い茶色色を使う	color = 'tan'
ヒストグラムをホワイト色で描画する	plt.hist(データ列, color='white')
ヒートマップでクラス分類の予測精度を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
タイムスタンプデータにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
配列とリストの散布図をプロットして、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
イテラブルを集合にする	set(iterable)
線グラフをパウダーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='powderblue')
カラム名を指定して2つのデータフレームを内部結合する	pd.merge(df, df2, on='列A', how='inner')
セットから要素を取り除く	aSet.remove(element)
ミディアムターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
マッピングをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
文字列の中でASCII限定としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
双方向キューを空にする	deq.clear()
n個にリストを等しい量になるようにビン分割する	pd.qcut(aList, n)
配列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
折れ線グラフの色をゴールドに指定する	plt.plot(データ列x, データ列y, color='gold')
線形のクラス分類を行う	model = sklearn.linear_model.LogisticRegression()
指定した列の第一四分位数を求める	df['列A'].quantile(0.25)
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
タプルの先頭を求める	aTuple[0]
データフレームの選択したカラムの中にいくつ日付データがあるか数える	df[['列A', '列B']].isin([value]).sum()
option: ブランチドアーモンド色を使用する	color = 'blanchedalmond'
predicateFuncがTrueとならないタプルの要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgrey')
ヒストグラムをピンク色として描画する	plt.hist(データ列, color='pink')
折れ線グラフをレモンシフォン色として描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
上限から下限までの範囲でヒストグラムを描く	plt.hist(データ列, range=(start, end))
option: 三二ビット整数型を使用する	dtype = np.int16
一点鎖線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
リストと配列について散布図をプロットして丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
プロットのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
データフレームの一部のカラムの中にある文字列の数をカウントする	df[['列A', '列B']].isin([value]).sum()
分類結果の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
文字列の中の複数行対応としてパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
エクセルファイルをSJISで読む	pd.read_csv('file.csv', encoding='shift_jis')
半透明の実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
点線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dotted')
箱髭図を２つ並べて描く	plt.boxplot([データ列, データ列])
実数の床数を求める	math.floor(x)
折れ線グラフのマーカーを三角印にする	plt.plot(データ列x, データ列y, marker='^')
2つの変数をスラッシュで区切ってプリントする	print(value, value2, sep='/')
四角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
実数の双曲線正弦を計算する	math.sinh(x)
UNIX時間のカラムからPandasの日付型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
スチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
セットから別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
降順にデータフレームをある列によって破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
JSON形式の文字列をデータにする	json.loads(b.decode('unicode-escape'))
印字できる文字を全部使う	string.printable
茶色色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
黒い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
黒いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
xの小数点以下'3'桁までの文字列にする	':.3f'.format(x)
文字列を区切りで分割する	s.split(sub)
散布図に△印を用いる	plt.scatter(データ列x, データ列y, marker='^')
整数を千の位で四捨五入する	round(x, -3)
横方向に２つのデータフレームを合体させる	pd.concat([df, df2], axis=1)
表データのあるカラムが何分か知る	df['列A'].dt.minute
データシリーズの中にいくつ日付データがあるか調べる	ds.isin([value]).sum()
データフレームの欠損値を直後の値で補完する	df.fillna(method='bfill')
赤いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
散布図を紺色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkblue')
双方向キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
リストとイテラブルについての散布図にrgbの▽マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: グラフの色を黄緑に設定する	color = 'chartreuse'
ふたつのカラムからグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
折れ線グラフをプラム色を用いて描画する	plt.plot(データ列x, データ列y, color='plum')
ある列の値がx以上y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
グラフの色を濃くする	sns.set(pallete='deep')
縦棒グラフをグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='gray')
平均値でデータフレームの一部のカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
マゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='magenta')
文字列を両端キューの先頭につけ加える	deq.appendleft(element)
混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
本日のタイムスタンプ	datetime.datetime.today()
リストとイテラブルについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
あらかじめ正規表現をコンパイルする	re.compile(pattern)
行列の行ごとの最大を求める	np.max(aArray, axis=1)
数値を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
データフレームのカラムの尖り	df['列A'].skew()
回帰分析を部分的最小二乗法で行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データ列を閾値として二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
option: フローラルホワイトを使用する	color = 'floralwhite'
線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategrey')
ロードされたモジュールのリスト	sys.modules
現在の秒数を使う	datetime.date.today().second
項目名が辞書上で定義されているか調べる	key in aDict
データフレームを散布図で可視化し、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データ列の折れ線グラフを丸印で描画する	plt.plot(データ列x, データ列y, marker='o')
option: 色をコーラルに設定する	color = 'coral'
option: 濃いシアンを使う	color = 'darkcyan'
文字列がアスキー文字か	s.isascii()
空のリストを得る	[]
横棒グラフをフローラルホワイト色を使って描画する	plt.barh(データ列x, データ列y, color='floralwhite')
option: 右三角印を用いる	marker = '>'
データ列を分割する	pd.cut(ds, aList)
黒い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームのn行以降を取り出す	df[n:]
横軸の目盛を表示しない	plt.xticks([])
散布図をオリーブ色として描画する	plt.scatter(データ列x, データ列y, color='olive')
文字列を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
度数分布図を描画して、ビン数を変更する	plt.hist(データ列, bins=区関数)
配列の偏差値を計算する	50 + 10 * scipy.stats.zscore(配列)
option: △マーカーを描画する	marker = '^'
ダークバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ヒストグラムの色をダークグリーンにセットする	plt.hist(データ列, color='darkgreen')
パラメータについて数式の積分を求める	sympy.integrate(e, z)
数値を部分分数として展開する	sympy.apart(e)
列名を指定してデータフレームを内部結合する	pd.merge(df, df2, on='列A', how='inner')
線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
リストとリストについての散布図に黒いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
ダークブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
現在の再帰の最大回数を知る	sys.getrecursionlimit()
カーキ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
プログラムのファイルの名前を知る	sys.argv[0]
高頻出方からカウンタを列挙する	aCounter.most_common()
ミスティローズにヒストグラムの色を変更する	plt.hist(データ列, color='mistyrose')
やわらかい青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
行列の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
文字列が全て小文字かどうか調べる	s.islower()
データ列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
赤色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
日付時刻データが日付時刻データより前かどうか調べる	aDatetime < aDatetime2
表データのn行目を破壊的にドロップする	df.drop(n, axis=0, inplace=True)
双方向キューの最初に要素を追加する	deq.appendleft(element)
フローラルホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
散布図を右三角印を使い、描画する	plt.scatter(データ列x, データ列y, marker='>')
タプル内の要素は全て真か調べる	all(aTuple)
リストとリストについて散布図を描画し、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
無限に文字列が続く列	itertools.repeat(element)
xを整数にする	int(x)
整数nは集合のいづれかか調べる	n in aSet
線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
データフレームの指定の列に重複があればドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
折れ線グラフの色をダーク・スラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategrey')
シャルトリューズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ヒストグラムの色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
オーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
データフレームのカラムのトリム分散を計算する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
散布図をスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ストリームをクローズする	f.close()
最後の部分文字列によって文字列を二分する	s.rpartition(sub)
整数nの8進数リテラル	oct(n)
option: グラフの色をブラウンに設定する	color = 'brown'
数列のスピアマンの順位相関係数を計算する	scipy.stats.spearmanr(数列, 数列2)
ファイルからの入力ストリームを求める	open(filepath)
データフレームのあるカラムの中に文字列と文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
カウンタを少ない順番に列挙する	aCounter.most_common()[::-1]
option: 青紫に色を変更する	color = 'violet'
カウンタの文字列のカウント	aCounter[element]
データフレームの選択した列の欠損値をxで埋める	df[['列A', '列B']].fillna(x)
n行をデータフレームからランダムに取り出す	df.sample(n)
リストをベクトルに変換する	np.array(aList)
option: リネンにグラフの色を指定する	color = 'linen'
横棒グラフを描画し、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
実数の小数部を求める	math.modf(x)[0]
折れ線グラフをライム色として描画する	plt.plot(データ列x, データ列y, color='lime')
散布図の色を黄緑にする	plt.scatter(データ列x, データ列y, color='chartreuse')
最大長nのスタックを生成する	collections.deque(maxlen=n)
棒グラフをレベッカパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
カウンタを多い順にリストとして得る	aCounter.most_common()
散布図をカデットブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
リストとリストの散布図を描き、、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ロージーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データフレームの一部の列のNaNを平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
クラス分類の正解率を算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
option: 読み込み用に設定する	mode = 'r'
nがn2未満、それかn3以上	n < n2 or n >= n3
青い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
ヒストグラムにカラーマップを用いる	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
組のn番目の	aTuple[n]
ダークシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
散布図をアンティークホワイト色を使って描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
n足すn2を求める	n + n2
イテラブルをダミー変数にする	pd.get_dummies(iterable)
ロバストな単回帰モデルを新規作成する	model = sklearn.linear_model.HuberRegressor()
ヒストグラムを描画して、ビン数を変更する	plt.hist(データ列, bins=区関数)
散布図の左三角印を黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフをグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='green')
カウンタのキーの出現回数	aCounter[element]
折れ線グラフの色をベージュにする	plt.plot(データ列x, データ列y, color='beige')
分子n分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
データフレームのNaNを最大値に設定する	df.fillna(df.max())
辞書のキーを要素に変更する	aDict[key] = element
ファイルからストリームをオープンして]fileとする	file = open(filepath)
option: カデットブルーを用いる	color = 'cadetblue'
ティール色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
データフレームのひとつのカラムだけ説明変数にする	説明変数 = df[['列名']]
平均値付き箱ヒゲ図をプロットする	plt.boxplot(データ列, showmeans=True)
数字を求める	string.digits
データフレームをグループ化しそれぞれの分散を計算する	df.groupby('列A').var()
確率的勾配降下としてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
イテラブルの各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
双方向キューの要素をn個分ローテンションする	deq.rotate(n)
関数の値で表データをグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
棒グラフをインディゴ色として描画する	plt.bar(データ列x, データ列y, color='indigo')
クラス分類をガウス過程でする	model = sklearn.gaussian_process.GaussianProcessClassifier()
縦棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
二つの数値を文字列で区切ってプリントする	print(value, value2, sep=s)
データフレームを百の位で四捨五入して整数型にする	df.round(-2).astype(int)
データフレームの選択したカラムの中の欠損値の数を数える	df[['列A', '列B']].isna().sum()
JSONファイルファイル名が	filename.endswith('.json')
バリーウッド色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
散布図をゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
小数点数が無限大か調べる	math.isinf(x)
値を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
線グラフの色をダークシアグリーンに指定する	plt.plot(データ列x, データ列y, color='darkseagreen')
日付データにn週間分、足す	aDate + datetime.timedelta(weeks=n)
オーキッド色でヒストグラムを描画する	plt.hist(データ列, color='orchid')
線グラフの色をラベンダーに指定する	plt.plot(データ列x, データ列y, color='lavender')
折れ線グラフをピーチパフ色を用いて描画する	plt.plot(データ列x, データ列y, color='peachpuff')
整数nをn2分の1にする	n //= n2
option: フォントの色をスプリンググリーンに変更する	color = 'springgreen'
乱数の配列を作る	np.random.random(N)
散布図に黒い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ベクトルの個数	aArray.size
オプションで標準出力を出力にする	file = sys.stdout
等間隔の行列	np.arange(開始値, 終了値, 等差)
折れ線グラフの色をレモンシフォンにする	plt.plot(データ列x, データ列y, color='lemonchiffon')
散布図を黒い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
半透明の点線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
一点鎖線としてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
グラフの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
太字で数値をプリントする	print(f'\033[1m{value}\033[0m')
正規化された柱状図をプロットする	plt.hist(データ列, density=True)
区間数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
スプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
ホールドアウトを使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
横棒グラフをオレンジ色として描画する	plt.barh(データ列x, データ列y, color='orange')
option: ダークターコイズを用いる	color = 'darkturquoise'
グラフを論文用に変更する	sns.set(context='paper')
散布図を黒い丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
nはn2と等しい	n == n2
ユークリッド距離を求める	math.dist(point, point2)
小数点数の逆双曲線余弦	math.acosh(x)
折れ線グラフの色をアリスブルーにセットする	plt.plot(データ列x, データ列y, color='aliceblue')
option: フォントの色をブラックに設定する	color = 'black'
データシリーズの欠損値をxで補完する	ds.fillna(x)
ミディアムオーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='mediumorchid')
ファイルパスを追加できるようにオープンする]	open(filepath, mode='a')
option: スレートブルー色を用いる	color = 'slateblue'
折れ線グラフを実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
option: シャルトリューズに色を設定する	color = 'chartreuse'
ヒストグラムをライトスカイブルー色を使って描画する	plt.hist(データ列, color='lightskyblue')
実行を正しく終了する	sys.exit(0)
option: 青緑色を用いる	color = 'teal'
多次元データをt-SNEで淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
タイムスタンプデータからn分減算する	aDatetime - datetime.timedelta(minutes=n)
折れ線グラフの下三角印の色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
散布図をバツ印を用いる描画する	plt.scatter(データ列x, データ列y, marker='x')
正接	math.tan(x)
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
文字列リストにイテラブルを変換して、空白を使って一つにする	' '.join(map(str, iterable))
ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフの色を淡い茶色に変更する	plt.plot(データ列x, データ列y, color='tan')
黒い左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
オリベドラブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: オリーブにグラフの色を設定する	color = 'olive'
option: ディープスカイブルーを使う	color = 'deepskyblue'
データフレームのカラムの偏差値を使う	50 + 10 * scipy.stats.zscore(df['列A'])
線グラフの色を淡いピンク色に指定する	plt.plot(データ列x, データ列y, color='lightpink')
文字列をカンマで分割して、文字列リストにする	s.split(',')
文字列が組の要素でないか調べる	element not in aTuple
折れ線グラフをブルーバイオレット色として描画する	plt.plot(データ列x, データ列y, color='blueviolet')
青い上三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの選択したカラムの中にある文字列の合計を求める	df[['列A', '列B']].isin([value]).sum()
貝殻色を用いてヒストグラムを描画する	plt.hist(データ列, color='seashell')
縦棒グラフをチョコレート色として描画する	plt.bar(データ列x, データ列y, color='chocolate')
データフレームの行を条件で取り除く	df[(df['列A'] == x) & (df['列B'] == y)]
事前にパターンをコンパイルする	re.compile(pattern)
マッピングからキーの値	aDict.get(key)
指定した列のカテゴリで集計し最大値を計算する	df.groupby('列A').max()
データシリーズの欠損値を前の値で置き換える	ds.fillna(method='ffill')
変数について数式の微分を求める	sympy.diff(e, z)
文字列はリストに含まれないか調べる	element not in aList
数列と配列の散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列がタプルの要素	element in aTuple
データフレームをある列ごとにグループ分けしてグループ名を列挙する	[name for name, _ in df.groupby('列A')]
option: 黄緑を使う	color = 'chartreuse'
線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームの選択した列を10の位で四捨五入する	df[['列A', '列B']].round(-1)
横軸の目盛りに文字列を設定する	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
option: サドルブラウンを使う	color = 'saddlebrown'
印字可能な文字を使う	string.printable
日付データにn週間分、加える	aDate + datetime.timedelta(weeks=n)
行列の要素数	aArray.size
ひとつでも非アルファベットが文字列中に含まれるか	any(not c.isalpha() for c in s)
タイムスタンプデータが月曜日	aDatetime.weekday() == 0
ピンク色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
線グラフをバイオレット色として描画する	plt.plot(データ列x, データ列y, color='violet')
option: マルーンにグラフの色を指定する	color = 'maroon'
データ列のUNIX時間を日付データにする	pd.to_datetime(ds, unit='s', utc=True)
predicateFuncがTrueになるイテラブルの要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
ミディアムアクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
コーラルにヒストグラムの色を設定する	plt.hist(データ列, color='coral')
スタックを全て取り除く	deq.clear()
日付データからn時間を引く	aDate - datetime.timedelta(hours=n)
プロットの使途を画面に指定する	sns.set(context='notebook')
option: ディムグレーを使用する	color = 'dimgray'
部分文字列で文字列を分けたときの後半の文字列	s.partition(sub)[-1]
データフレームの列の名前を変更する	df.rename(columns={'列A': '列a', '列B': '列b'})
行列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
option: フォントの色をブルーバイオレットにセットする	color = 'blueviolet'
クラス名が名前付きタプルかどうか調べる	issubclass(C, tuple)
バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x')
散布図に黒い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='k')
option: グラフの色をホットピンクに指定する	color = 'hotpink'
データフレームにおいてどの値が頻出か確認する	df.mode()
データフレームのカラムをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
散布図をrgbのバツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ある列の文字列に部分文字列が含まれない行を取り出す	df[~df['列A'].str.contains(部分文字列)]
数式を部分分数として展開する	sympy.apart(e)
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
ヒストグラムベースの勾配ブースティング分類木を作成する	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームを昇順に二つの列によって並べ直す	df.sort_values(by=['列A', '列B'], ascending=True)
ヒストグラムの色をピーチパフに変更する	plt.hist(データ列, color='peachpuff')
データシリーズを丸めて整数にする	ds.round().astype(int)
option: ロイヤルブルー色を用いる	color = 'royalblue'
option: フォントの色をフォレストグリーンに指定する	color = 'forestgreen'
赤い大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ミスティローズにヒストグラムの色を設定する	plt.hist(データ列, color='mistyrose')
小数点数の天井	math.ceil(x)
文字列の開始位置から終了位置の範囲で部分文字列の出現回数	s.count(sub, start, end)
パールゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
データフレームを千の位で丸めて整数にする	df.round(-3).astype(int)
散布図の下三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
淡い茶色色のヒストグラムを描画する	plt.hist(データ列, color='tan')
文字列が全て識別子名か調べる	s.isidentifier()
nが1もしくは2か調べる	n == 1 or n == 2
ヒストグラムをマゼンタ色を使って描画する	plt.hist(データ列, color='magenta')
option: ダークグリーンを使う	color = 'darkgreen'
日付時刻データが日曜日かどうか調べる	aDatetime.weekday() == 6
横棒グラフを淡い茶色色を用いて描画する	plt.barh(データ列x, データ列y, color='tan')
ファイルを文字コードtextを使ってオープンする]	open(filepath, encoding=text)
散布図をライトゴールドロディイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
リストと配列についての散布図に赤いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームを二つのカラムによって小さい順に破壊的に並べる	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ランダムにn行を重複ありでデータフレームからサンプリングする	df.sample(n, replace=True)
複数行対応としてパターンで文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
縦棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
ダークマゼンタ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
イテラブルを文字列に変換して、'改行で連結する	'\n'.join(map(str, iterable))
option: ピーチパフ色を用いる	color = 'peachpuff'
標準正規分布の確率密度関数を用いる	scipy.stats.norm.pdf(x)
ユニークな要素ごとの頻度を見る	np.unique(aArray, return_counts=True)
エラーなく文字列のプレフィックスから部分文字列を取り除く	s.removeprefix(sub)
データフレームの指定した三つの列を取り出す	df[['列A', '列B', '列C']]
データフレームの文字列を未入力値に変換する	df.replace(値, np.nan)
option: 色をディムグレーに設定する	color = 'dimgray'
文字列はタプルの要素	element in aTuple
文字列をASCII限定として正規表現で区切る	re.split(pattern, s, flags=re.ASCI)
option: フローラルホワイトを使う	color = 'floralwhite'
チョコレートにヒストグラムの色を設定する	plt.hist(データ列, color='chocolate')
option: n番目の列をインデックスに増やす	index_col = n
データフレームを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
正規分布にしたがって配列の値が発生する確率を求める	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
配列のSkewnessを求める	scipy.stats.skew(配列, bias=False)
ふたつの集合が互いに素かどうか調べる	aSet.isdisjoint(aSet2)
散布図のクロスマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームの平均と信頼区間を描く	sns.pairplot(hue='カテゴリ列', data=df)
散布図をコーンズシルク色を使って描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
日付データが火曜日	aDate.weekday() == 1
標準入力から1行だけ読み込む	sys.stdin.readline()
ミントクリーム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
option: UTF8を使用する	encoding = 'utf-8'
データフレームの指定したカラムの中にいくつNaNが存在するか調べる	df['列A'].isna().sum()
データフレームの中にいくつがあるか数える	df.isin([value]).sum()
ゼロ埋めされた複素数型のベクトル	np.zeros(要素数, dtype=bool)
線グラフの色をマゼンタに変更する	plt.plot(データ列x, データ列y, color='magenta')
スチールブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
折れ線グラフをホワイトスモーク色を用いて描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
文字をユニコードにする	ord(ch)
黒い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='k')
option: 色を小麦色に設定する	color = 'wheat'
文字列の末尾は部分文字列か調べる	s.endswith(sub)
縦棒グラフをレベッカパープル色として描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
散布図をコーンフラワーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
色付きの実線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
数値の部分分数化を行う	sympy.apart(e)
単回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
イテラブルとリストについての散布図を大きさnでプロットする	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムの色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
option: 菱形マーカーを描画する	marker = 'D'
散布図の右三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
整数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int)
データフレームの中の列を分割数nでビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: グラフの色をダーク・スラテグレーに変更する	color = 'darkslategrey'
右に両端キューの値をn個分回転させる	deq.rotate(n)
ガンマ関数を使う	math.gamma(x)
横棒グラフをリネン色として描画する	plt.barh(データ列x, データ列y, color='linen')
分類モデル教師データでを学習する	model.fit(説明変数, 目的変数)
折れ線グラフの星マーカーの色を変える	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
折れ線グラフの色をミディアムアクアマリンに指定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフを黄色色として描画する	plt.plot(データ列x, データ列y, color='yellow')
データシリーズの歪み	ds.kurt()
グラフを描く準備をする	import matplotlib.pyplot as plt
データフレームのインデックスリスト	df.index
ミッドナイトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
y軸だけ目盛線	plt.grid(axis='y')
ひとつでも非空白が文字列中に含まれる	any(not c.isspace() for c in s)
散布図に星マーカーを使用する	plt.scatter(データ列x, データ列y, marker='*')
タプルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
データシリーズの秒を使う	ds.dt.second
データ列の変化を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
オレンジレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
文字列の先頭からタブを取り除く	s.lstrip('\t')
JSON形式のバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
散布図をレベッカパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
文字列リストをつなげる	''.join(aStringList)
要素∈セット	element in aSet
浮動小数点数を二乗する	x ** 2
ミディアムパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームの指定したカラムの平均	df['列A'].mean()
線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
文字列の終了位置より前に部分文字列があるか調べる	s.find(sub, 0, end) != -1
折れ線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
オブジェクトがタプル	isinstance(obj, tuple)
データ列を使用する	import pandas as pd
折れ線グラフの右三角印を赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
空白を使う	' '
赤い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
表計算ファイルからCSVを文字化けしないように読み込む	pd.read_csv('file.csv', encoding='shift_jis')
散布図を三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='^')
JSONファイルの入力を読み込んで、dataとする	data = json.load(fin)
折れ線グラフの色をコーンフラワーブルーに指定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
リネン色としてヒストグラムを描画する	plt.hist(データ列, color='linen')
オプションで標準エラーを出力先にする	file = sys.stderr
折れ線グラフを点線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
横棒グラフをブラック色を用いて描画する	plt.barh(データ列x, データ列y, color='black')
sepを区切りとして文字列リストを結合する	sep.join(aStringList)
option: ダークシアグリーンにフォントの色を指定する	color = 'darkseagreen'
線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
最後の部分文字列で文字列を二分し、最初の文字列を求める	s.rpartition(sub)[0]
棒グラフをライトブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightblue')
折れ線グラフを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
スクリプト名を知る	sys.argv[0]
データ列と配列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
時計回りに円グラフを描画する	plt.pie(データ列, startangle=90, counterclock=False)
データフレームの先頭5行を確認する	df.head(5)
散布図にrgbの下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
nが3で割り切れる	n % 3 == 0
今日が何日か知る	datetime.datetime.today().day
データフレームのあるカラムのタイムゾーンを日本に変更する	df['列A'].tz_convert('Asia/Tokyo')
書式でデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
イエローグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
散布図に右三角印を加える	plt.scatter(データ列x, データ列y, marker='>')
ファイルを一行ずつ読む	f.readline()
散布図をダークスラテグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
折れ線グラフを青い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ヒストグラムでカラーマップを用いる	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
データを最大最小で正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ランダムに重複ありで100行をデータフレームからサンプリングする	df.sample(100, replace=True)
散布図のバツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
クラス分類をスタッキングを使って行う	sklearn.ensemble.StackingClassifier()
サンディーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='sandybrown')
青い実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームのNaNをメディアンに指定する	df.fillna(df.median())
スピアマンの相関係数を算出する	scipy.stats.spearmanr(数列, 数列2)
ホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
縦棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
option: 行を自動的な連番に設定する	index_col = None
整数nを十六進数文字列に変換する	hex(n)[2:]
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='turquoise')
文字列の開始位置番目と終了位置番目の間に部分文字列がないか確認する	s.find(sub, start, end) == -1
ロバスト分類器を作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
数値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(x)
破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームのカラム間の相関行列を求める	df.corr()
データフレームのカラムをグループ化して、ヒストグラムで見る	sns.histplot(df, x='列名', hue='カテゴリ名')
横棒グラフを黄色色として描画する	plt.barh(データ列x, データ列y, color='yellow')
データフレームの列の欠損値を直前の値に設定する	df['列A'].fillna(method='ffill')
リスト中の要素は全て真かどうか	all(aList)
サンディーブラウン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
データ列をフォーマットを用いて日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
散布図の印を黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
イテラブルとデータ列について散布図を描いて、▽マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
バイナリ書き込みモードでファイルをオープンして]fとする	f = open(filepath, mode='wb')
オブジェクトからフィールドを削除する	delattr(obj, プロパティ名)
ヒストグラムをダークオレンジ色として描画する	plt.hist(データ列, color='darkorange')
ヒストグラムをライトグレー色を使って描画する	plt.hist(データ列, color='lightgrey')
ふたつの列でグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
変数が無限大に近づくときの数値の極限値を算出する	sympy.limit(e, z, oo)
表をソートして、上位を取り出す	df.sort_values('キーとなる列').head(n)
横棒グラフをダークカーキ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
データ列の変遷を半透明の一点鎖線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
変数名をキーとして、辞書を作る	dict(name=element)
空のロジスティック回帰モデルを用意する	model = sklearn.linear_model.LogisticRegression()
グラフの横軸にキャプションを設定する	plt.xlabel('x軸ラベル')
2つの数値を順に表示する	print(value, value2)
ヒストグラムを破線で描く	plt.hist(データ列, linestyle='dashed')
データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
横棒グラフをグリーン色として描画する	plt.barh(データ列x, データ列y, color='green')
rgbの大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
パールゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームの文字列をNaNに変換する	df.replace(値, np.nan)
折れ線グラフの四角印の大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
横棒グラフをミディアムシアグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
リストと数列の散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
オブジェクトをイテラブルにする	iter(obj)
データフレームとデータフレームの列を合体させる	pd.concat([df, ds], axis=1)
折れ線グラフの右三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
こんにちは世界と表示する	print('Hello World')
タプルと組を連結する	aTuple + aTuple2
カラムの歪度を計算する	scipy.stats.skew(df['列A'], bias=False)
文字列はタイトルケースか	s.istitle()
データフレームのひとつの列を説明変数にする	説明変数 = df[['列名']]
配列をビン数nでビンニングし、namesのラベルをつける	pd.cut(aArray, n, labels=names)
SJISでファイルをオープンする]	open(filepath, encoding='shift_jis')
線グラフの色をホットピンクに指定する	plt.plot(データ列x, データ列y, color='hotpink')
縦棒プロットを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
option: グラフの色を茶色に指定する	color = 'brown'
データフレームから重複を認めてランダムにn行をサンプリングする	df.sample(n, replace=True)
異なる列をキーにしてデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
折れ線グラフの色を黄緑にセットする	plt.plot(データ列x, データ列y, color='chartreuse')
インディゴ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
datetime64型のデータフレームのあるカラムをインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
分類モデルの決定係数を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
線形モデルのバイアスを求める	model.intercept_
ヒストグラムをラベンダーブラッシュ色として描画する	plt.hist(データ列, color='lavenderblush')
ライトグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
option: タンにフォントの色を設定する	color = 'tan'
データフレームのある列を最初のカテゴリーを除外してダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
option: ゴールドにグラフの色を変更する	color = 'gold'
散布図を黒いポイントマーカーとして描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
配列とリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
nをn2で割った余りを求める	n % n2
option: 耐火レンガに色を変更する	color = 'firebrick'
ヒストグラムの色をシーグリーンに変更する	plt.hist(データ列, color='seagreen')
プロットをスライド用に変更する	sns.set(context='talk')
印字可能な文字を全部見る	string.printable
option: グラフの色をグリーンに指定する	color = 'green'
複数のシートを指定してエクセルから読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
データフレームとしてエクセルファイルを読む	pd.read_excel('file.xlsx')
線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
データフレームのあるカラムの統計量をまとめて見る	df['列A'].describe()
xの小数点以下'3'桁までを出力する	print(':.3f'.format(x))
折れ線グラフに簡単な説明を付ける	plt.plot(データ列x, データ列y, label='ラベル')
タブを求める	'\t'
シエナ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
ベージュ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
ファイルから1文字読み込む	f.read(1)
線グラフの色をパープルに変更する	plt.plot(データ列x, データ列y, color='purple')
折れ線グラフに黒い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
折れ線グラフに青い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
文字列を区切りで区切って、列挙する	s.split(sep)
縦棒グラフをピーチパフ色を使って描画する	plt.bar(データ列x, データ列y, color='peachpuff')
ダークカーキにヒストグラムの色を指定する	plt.hist(データ列, color='darkkhaki')
リストと配列の散布図を描画して星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
八進文字列を整数にする	int(s, 8)
多次元データをt分布型確率的近傍埋め込み法を使ってパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームから重複を残さず重複を除く	df.drop_duplicates(keep=False)
文字列の終了位置より前に部分文字列が含まれないかどうか	s.find(sub, 0, end) == -1
項目名が辞書上で未定義かテストする	key not in aDict
option: 色をディムグレーに設定する	color = 'dimgrey'
option: フォントの色をライトブルーに変更する	color = 'lightblue'
データフレームの選択した列のNaNを直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
ビスク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
ゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
浮動小数点数を切り上げて整数にする	math.ceil(x)
ヒストグラムをダークターコイズ色を用いて描画する	plt.hist(データ列, color='darkturquoise')
折れ線グラフに青い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
四分位点でデータを標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ふたつの列からグループ化し最大値を算出する	df.groupby(['列A', '列B'], as_index=False).max()
データフレームから型リストデータ型のカラムを抽出する	df.select_dtypes(include=typeList)
ある列の文字列が部分文字列で始まらない行を取り出す	df[~ df['列A'].str.startswith(部分文字列)]
折れ線グラフに大バツ印を使う	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムの色をオーキッドに変更する	plt.hist(データ列, color='orchid')
オーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
option: グラフの色をピーチパフに指定する	color = 'peachpuff'
ローングリーン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
散布図の印の線幅を指定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
データフレームの指定した列の標本標準偏差	df['列A'].std(ddof=1)
散布図をゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
折れ線グラフの色をフォレストグリーンに指定する	plt.plot(データ列x, データ列y, color='forestgreen')
データフレームのカラムをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
オレンジレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
option: ラベンダーブラッシュを使用する	color = 'lavenderblush'
折れ線グラフのポイント印を黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
分類モデルのF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
ライトスレイグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
貝殻色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
データフレームの欠損値を最頻値に増やす	df.fillna(df.mode().iloc[0])
データシリーズの上位25％を求める	ds.quantile(0.25)
散布図の下三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
現在の月	datetime.datetime.today().month
折れ線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
x軸だけ目盛り線	plt.grid(axis='x')
ライトグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
実行結果を白色にする	f'\033[37m{value}\033[0m'
散布図に左三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='<')
文字列が全て英数字	s.isalnum()
フォレストグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgrey')
3つの実行結果を順にプリントする	print(value, value2, value3)
ヒストグラムをカーキ色を用いて描画する	plt.hist(データ列, color='khaki')
バイナリ書き込みモードでファイルをオープンする]	open(filepath, mode='wb')
実数の指数を求める	math.frexp(x)[1]
箱ひげ図をプロットして、平均値を追加する	plt.boxplot(データ列, showmeans=True)
線グラフをスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='slateblue')
ライトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
ヒストグラムの色をフクシアに変更する	plt.hist(データ列, color='fuchsia')
線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
ヒストグラムをシアン色を用いて描画する	plt.hist(データ列, color='cyan')
文字列の開始位置より後に部分文字列が存在しないかどうか調べる	s.find(sub, start) == -1
スノー色を用いてヒストグラムを描画する	plt.hist(データ列, color='snow')
リストの出現頻度を描画する	plt.hist(データ列)
セットの全ての要素が別の集合に含まれる	aSet.issubset(aSet2)
等量でn個に配列を分割する	pd.qcut(aArray, n)
散布図の左三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
点線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
option: カラムの名前を連番に設定する	header = None
レモンシフォン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
ダークスラテグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
黄色で文字列をプリントする	print(f'\033[33m{value}\033[0m')
データ列のヒストグラムをプロットする	plt.hist(データ列)
option: アクアにフォントの色を変更する	color = 'aqua'
データフレームの列からユニークな値を抽出しリスト化する	df[col].unique().tolist()
赤い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
データ列間の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
横向きにデータフレームを結合する	pd.concat([df, df2], axis=1)
nからstep間隔で無限に数え上げるする	itertools.count(start=n, step=step)
ヒストグラムをやわらかい青色で描画する	plt.hist(データ列, color='cornflowerblue')
いつまでもnからカウントダウンする	itertools.count(start=n, step=-1)
折れ線グラフのクロスマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
リストとリストについて散布図を描いて、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
文字列の先頭でケースを無視してパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
散布図の右三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ミディアムスプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
配列のSkewnessを算出する	scipy.stats.skew(配列, bias=False)
赤い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ファイルをSJISを用いてオープンする]	open(filepath, encoding='shift_jis')
ヒストグラムの色をダークバイオレットにする	plt.hist(データ列, color='darkviolet')
折れ線グラフに▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
散布図に▽マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
棒グラフを青色として描画する	plt.bar(データ列x, データ列y, color='blue')
option: 色をクリムゾンに設定する	color = 'crimson'
スレートブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
データシリーズの文字列をNaNに変換する	ds.replace(値, np.nan)
グラフをスライドに設定する	sns.set(context='talk')
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
option: データ型として三二ビット整数型を使用する	dtype = np.int16
ヒストグラムの色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
文字コードtextで追加できるようにファイルをオープンする]	open(filepath, mode='a', encoding=text)
折れ線グラフにラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
rgbの四角マーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
縦棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
日付時刻データは日付時刻データと同時	aDatetime == aDatetime2
スクリプトファイルのディレクトリパス	os.path.dirname(os.path.abspath(__file__))
option: ゴーストホワイトに色を変更する	color = 'ghostwhite'
黒い大バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='k')
色付きの実線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
横棒グラフをライトスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
双方向キューの末尾の値	deq[-1]
rgbの星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフをミディアムシアグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
KNNで回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
データフレームをあるカラムの値によってグループ分けする	df.groupby('列A')
作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
青い左三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームを関数によってグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
nからn2までのひとつ飛ばしの整数リスト	list(range(n, n2+1, 2))
折れ線グラフにポイント印を使う	plt.plot(データ列x, データ列y, marker='.')
CSVをヘッダを指定せずロードする	pd.read_csv('file.csv', header=None)
ヒストグラムの色をライトスチールブルーに指定する	plt.hist(データ列, color='lightsteelblue')
棒グラフをディープスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームの一部のカラムの尖度を求める	df[['列A', '列B']].skew()
全要素を初期値で初期化した行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
グラフの描画でパステル調にカラーパレットを使用する	sns.set(pallete='pastel')
線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの列のユニークな値の個数を調べる	df[col].nunique()
降順にデータフレームを2つの列を用いて並べる	df.sort_values(by=['列A', '列B'], ascending=False)
プロットの中に枠なしの凡例を入れる	plt.legend(frameon=False)
折れ線グラフを白色として描画する	plt.plot(データ列x, データ列y, color='white')
後ろから空白で文字列を区切る	s.rsplit()
線グラフをオレンジ色として描画する	plt.plot(データ列x, データ列y, color='orange')
線グラフの色をカデットブルーに指定する	plt.plot(データ列x, データ列y, color='cadetblue')
横向きに二つのデータフレームを連結する	pd.concat([df, df2], axis=1)
option: グラフを一点鎖線に設定する	linestyle = 'dashbot'
リストを縦棒グラフにする	plt.bar(ラベル列, データ列)
option: フォントの色をペルーに変更する	color = 'peru'
ダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D')
インディアンレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
データフレームの指定したカラムの未入力値を最頻値に指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
多次元データをMSDでパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
散布図をライトイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
グラフに水平方向の実線を設定する	plt.axhline(y=0, linestyle='solid')
線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
トマト色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
タプル中の要素が全て真か調べる	all(aTuple)
option: データ型としてブール型を使用する	dtype = np.int32
option: ディムグレーにグラフの色を設定する	color = 'dimgray'
ヒストグラムの色をパールゴールデンロッドにセットする	plt.hist(データ列, color='palegoldenrod')
散布図の丸マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
Pythonパスにディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
赤い点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
縦棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
リストの各値を関数に適用した結果でソートする	sorted(aList, key=func)
スピアマンの相関係数	scipy.stats.spearmanr(df['列A'], df['列B'])
option: ゴーストホワイト色を用いる	color = 'ghostwhite'
散布図のマーカーを星印にする	plt.scatter(データ列x, データ列y, marker='*')
データフレームから同じ内容の行を破壊的にドロップする	df.drop_duplicates(inplace=True)
整数nを符号付きでバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightgreen')
散布図のマーカーを丸印にする	plt.scatter(データ列x, データ列y, marker='o')
プラム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
option: オリベドラブ色を使用する	color = 'olivedrab'
option: ディープスカイブルーにフォントの色を設定する	color = 'deepskyblue'
タイムスタンプのデータフレームのあるカラムを表データのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
ファイルパスをバイナリ書き込みモードで開いて]fとする	f = open(filepath, mode='wb')
文字列の中で大文字・小文字を無視して正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
ヒストグラムをミッドナイトブルー色を用いて描画する	plt.hist(データ列, color='midnightblue')
データフレームの列概要	df.info()
SVDを用いて淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
横棒グラフを描画してバーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
日付時刻データがタイムスタンプデータと同時か確認する	aDatetime == aDatetime2
イテラブルを文字列に変換して、カンマで連結する	','.join(map(str, iterable))
実数のハイパボリック・サイン	math.sinh(x)
散布図の印を青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
折れ線グラフの四角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
プラムにヒストグラムの色を設定する	plt.hist(データ列, color='plum')
日付データからn秒を減算する	aDate - datetime.timedelta(seconds=n)
横棒グラフをイエローグリーン色として描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
マッピングからキーの値を得る	aDict.get(key)
データフレームをインポートする	import pandas as pd
タプルの値だけプリントする	print(*aTuple)
ある列の値によってデータフレームを集約する	df.groupby('列A')
ダークレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
リストとデータ列の散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
赤い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームのひとつのカラムのみ説明変数にする	説明変数 = df[['列名']]
year年month月day日hour時minute分のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
クラス分類をK最近傍法で行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
日付時刻データにn時間分、加える	aDatetime + datetime.timedelta(hours=n)
オプションでファイルを使う	file = sys.open(filename, 'w')
xが1、もしくは2、もしくは3に等しいか確認する	x == 1 or x == 2 or x == 3
縦棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
配列の列ごとの最大値	np.max(aArray, axis=0)
データフレームを二つの列によってソートし、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
折れ線グラフの四角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
折れ線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
データから名前付きタプルをインスタンス化する	C._make(パラメータ)
行列の差	aArray - aArray2
リストを円プロットにする	plt.pie(データ列, startangle=90)
組の文字列が最初に見つかるインデックス	aTuple.index(element)
ヒストグラムの色をトマトに変更する	plt.hist(データ列, color='tomato')
アルファベットを使う	string.ascii_letters
異なる列をキーとしてデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
散布図に右三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='>')
データフレームをグループ化し、それぞれの最小値を算出する	df.groupby('列A').min()
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
横棒グラフをコーンズシルク色を使って描画する	plt.barh(データ列x, データ列y, color='cornsilk')
option: フォントの色をスラグレーに指定する	color = 'slategray'
ディープスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
文字列は漢字	('\u4E00' <= ch <= '\u9FD0')
グラフ描画でカーネル密度推定を用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
下三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームから型型の列のみ取り出す	df.select_dtypes(ty)
データシリーズの平均値を求める	ds.mean()
折れ線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームのあるカラムの分を使う	df['列A'].dt.minute
option: ミディアムブルー色を使用する	color = 'mediumblue'
ファイルを書き込みできるように文字列の示すエンコーディングでオープンする]	open(filepath, mode='w', encoding=s)
データシリーズをPandasの日付型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
option: バイナリ用に変更する	mode = 'rb'
折れ線グラフの上三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
一点鎖線を使ってリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
大量のデータが正規分布か仮説検定する	scipy.stats.kstest(配列, 'norm')
データフレームをグループ化し、ある列の記述統計量を求める	df.groupby('列A').describe()['列B']
配列とリストについての散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームを行を付けず出力する	df.to_csv('file.csv', index=None)
エクセルファイルからカンマ区切りのファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
option: 分割記号をタブにする	sep = '\t'
各グループごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
最大最小から配列を初期化する	np.linspace(最小値, 最大値, 要素数)
二数の最小値	min(x, y)
ミディアムバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
部分文字列が文字列の開始位置以降に含まれるか調べる	s.find(sub, start) != -1
データフレームの列を折れ線グラフとして可視化する	plt.plot(df[column], df[column])
ライトスチールブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
n×n2の二次元リストを得る	[[0] * n for _ in range(n2)]
データフレームを関数の値に集約し、、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
ヒストグラムの色をパールゴールデンロッドに指定する	plt.hist(データ列, color='palegoldenrod')
ミントクリームにヒストグラムの色を設定する	plt.hist(データ列, color='mintcream')
散布図をパープル色として描画する	plt.scatter(データ列x, データ列y, color='purple')
両端キュー中の要素を数える	deq.count(element)
縦棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
横棒グラフをダークマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
円プロットを用いてデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
配列の相関係数を算出する	scipy.stats.pearsonr(配列, 配列2)
折れ線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
コマンド引数をリストとして	sys.argv[1:]
option: フォントの色をライトゴールドロディイエローに指定する	color = 'lightgoldenrodyellow'
2つの変数を同じ値にする	x = y = n
無限の数列	itertools.count()
棒グラフをアリスブルー色を使って描画する	plt.bar(データ列x, データ列y, color='aliceblue')
スノー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
目盛り線	plt.grid(alpha=0.5)
散布図の右三角印の線幅を変える	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
グラフで使用するx軸にラベルをつける	plt.xlabel('x軸ラベル')
データフレームを二つの列によって整列する	df.sort_values(by=['列A', '列B'])
リストを両端キューに変換する	collections.deque(iterable)
両端キューのサイズ	len(deq)
データフレームの選択した列の平均値	df[['列A', '列B']].mean()
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightseagreen')
線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
option: ライトゴールドロディイエローを用いる	color = 'lightgoldenrodyellow'
回帰木をグラフ化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
データシリーズのどの値が頻出か調べる	ds.mode()
外れ値を除いたデータフレームのカラムの算術平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
セットから値を取り除く	aSet.remove(element)
リストとリストについての散布図に文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
半透明の実線でイテラブルの移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
Pandasのバージョンを調べる	print(pd.__version__)
1からnまでの整数列を使う	list(range(1, n+1))
データフレームの末尾5行を取り出す	df.tail(5)
ティール色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
等間隔で列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
変数名をキーとして、辞書を生成する	dict(name=element)
オリーブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
シーケンスから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
option: コロンを分割記号で用いる	sep = ':'
データフレームを複数のカラムによって降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
黒い星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*', c='k')
option: ダークオレンジに色を設定する	color = 'darkorange'
青い点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
オブジェクトがタプルの要素かどうか	element in aTuple
データフレームの文字列をNaNに変換する	df.replace(値, np.nan)
散布図の菱形印の色を設定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
プロットに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
シエナ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
指定したカラムを四捨五入する	df['列A'].round()
データフレームの選択した列の欠損値をモードにセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
option: ▽マーカーを使用する	marker = 'v'
y軸の目盛を表示しない	plt.yticks([])
散布図の色を濃い青にする	plt.scatter(データ列x, データ列y, color='darkblue')
横棒プロットをプロットする	plt.barh(ラベル列, データ列)
キューの中に値が含まれてるか調べる	element in deq
縦棒グラフを描いて、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
線グラフの色をダークスラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategray')
折れ線グラフの色をダークレッドに設定する	plt.plot(データ列x, データ列y, color='darkred')
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
二つの列によってデータフレームをまとめた表	df.groupby(['列A', '列B'])
第2引数のファイル名	sys.argv[1]
データフレームの選択したカラムの標本分散を計算する	df[['列A', '列B']].var(ddof=0)
破線に折れ線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
カウンタをシーケンスを使って更新する	aCounter.update(iterable)
option: グラフの色をダークレッドに設定する	color = 'darkred'
データフレームのカラムを整数に丸める	df['列A'].round()
オリーブ色でヒストグラムを描画する	plt.hist(データ列, color='olive')
散布図のクロス印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
ベクトルを転置する	aArray.T
グラフのx軸のラベルを設定する	plt.xlabel('x軸ラベル')
リストから行列を作成する	np.array(aList)
折れ線グラフのダイアモンドマーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ファイルを読み込みモードを使って開いて]、fとする	f = open(filepath, mode='r')
横棒グラフの色をやわらかい青にする	plt.barh(データ列x, データ列y, color='cornflowerblue')
ペルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
データフレームの選択したカラムの最頻値を求める	df[['列A', '列B']].mode()
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データフレームの指定した列がどの程度、分散しているか見る	df['列A'].var()
両端キューに値をenqueueする	deq.appendleft(element)
データフレームを関数によってグループ化し、要約統計量を算出する	df.groupby(関数).describe()
option: グラフの色をスラグレーにする	color = 'slategray'
ポイント印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
二つのオブジェクトが等しいか確認する	obj == obj2
折れ線グラフのポイント印の大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
option: プラム色を使用する	color = 'plum'
データフレームのある列をリストとして選択する	df['列A'].values.tolist()
アクア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
データフレームのカラムを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
レモンシフォン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
option: ミディアムスプリンググリーンを用いる	color = 'mediumspringgreen'
紺色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
セットの補集合	aSet.difference(aSet2)
散布図に黒い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
棒グラフをライトイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightyellow')
散布図をスラグレー色として描画する	plt.scatter(データ列x, データ列y, color='slategrey')
箱ひげ図をプロットして、平均値を加える	plt.boxplot(データ列, showmeans=True)
ある列の値がx以上y以下の行を抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
指定した列のカテゴリで集計し、合計を求める	df.groupby('列A').sum()
データフレームのn行目をドロップし、みる	df.drop(n, axis=0)
nとn2のビット和	n | n2
nの無限数列を得る	itertools.repeat(n)
データフレームの最初100行を取り出す	df.head(100)
データフレームからカテゴリデータのカラム名を列挙する	df.select_dtypes('object').columns
ヒストグラムと勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
データをスケーリングする	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ある列の値ごとの最小値	df.groupby('列A').min()
折れ線グラフの左三角印を赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
データフレームを表示するとき表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
積み上げ棒グラフをプロットする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
散布図の▼マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
nの無限リスト	itertools.repeat(n)
データ列をビン数nとして分割する	pd.cut(ds, n)
データフレーム全体を行によって並べる	df.sort_index()
散布図の▽印を青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
リストを分割数nとして分割する	pd.cut(aList, n)
nがn2未満、もしくはn3以上か調べる	n < n2 or n >= n3
リストと配列について散布図を描いて、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
数列と数列について散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
数値を赤色で表示する	print(f'\033[31m{value}\033[0m')
集合を変更不能な集合に変換する	frozenset(aSet)
数式のn階微分を求める	sympy.diff(e, z, n)
データフレームのカラムを型に変換する	df[col] = df[col].astype(ty)
ライトシアン色を使ってヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
ヒストグラムをアンティークホワイト色として描画する	plt.hist(データ列, color='antiquewhite')
データフレームの欠損値を最小値に変更する	df.fillna(df.min())
データフレームの指定したカラムの平均値を求める	df['列A'].mean()
折れ線グラフの星印を黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
option: ゴールドを使う	color = 'gold'
散布図をパレットトルコイズ色として描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
配列とリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
目盛り線	plt.grid(linestyle='--')
標準入力から1行分読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
ファイルパスをバイナリできるように開く]	open(filepath, mode='rb')
指定した列においてどの値が頻出か確認する	df['列A'].mode()
グラフから格子線を消す	plt.grid(False)
八進文字列をbytesizeバイトのバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
２つの文字列を出力する	print(value, value2)
リストと配列について散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをシーグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='seagreen')
イテラブルとリストについて散布図をプロットして、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
ある列の文字列が正規表現文字列にマッチしないデータを選択する	df[~df['列A'].str.match(正規表現)]
ブラック色で散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
一度に正規表現patternで指定した列の値を置換する	df['列A'].replace(pattern, repl, regex=True)
ゼロ埋めされた配列を作る	np.zeros(要素数)
ミッドナイトブルーにヒストグラムの色を変更する	plt.hist(データ列, color='midnightblue')
ダークカーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
回帰分析をブースティングとしてする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
データフレームから指定したデータ型の列名一覧	df.select_dtypes(型).columns
回帰モデルの正確さを求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
インデックスにしてCSVファイルのn行目を読み込む	pd.read_csv('file.csv', index_col=n)
棒グラフをペルー色を用いて描画する	plt.bar(データ列x, データ列y, color='peru')
文字列の中で複数行対応として正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
2つのカラムを組み合わせてグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
ヒストグラムの色をカーキにする	plt.hist(データ列, color='khaki')
文字列は文字列より辞書順で前か調べる	s < s2
データフレームの欠損値を平均値で補完する	df.fillna(df.mean())
option: ダークオリーブグリーンに色を設定する	color = 'darkolivegreen'
切り上げて整数に変換する	math.ceil(x)
10を底とする対数を計算する	math.log10(x)
オブジェクトがリストかタプル	isinstance(obj, (list)
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
線グラフをアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='aquamarine')
表データの相関行列	df.corr()
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しないか調べる	s.find(sub, start, end) == -1
数列とリストについて散布図を描画し、、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列の中の正規表現による全マッチを求める	re.findall(pattern, s)
option: グラフの色を青に変更する	color = 'blue'
黄緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データフレームの欠損値を平均値で補う	df.fillna(df.mean())
折れ線グラフをミッドナイトブルー色を使って描画する	plt.plot(データ列x, データ列y, color='midnightblue')
折れ線グラフを真紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
黄色色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
ゴーストホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
UNIX秒のカラムからタイムスタンプ型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
配列と数列についてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
文字列の先頭でパターンにASCII限定としてマッチするか調べる	re.match(pattern, s, flags=re.ASCI)
ライトサーモン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
数式のパラメータに数値を代入する	e.subs(z, e2)
自然数個からk個取り出した場合の順列の総数を算出する	math.perm(n, k)
ラインを色付きの点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
列をカテゴリデータに変換する	ds.astype(object)
空のガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
試しに何か動かしてみる	print('Hello World')
データフレームの複数の列を並べて箱ひげ図として作図する	plt.boxplot([df['カラム'], df['カラム']])
ベクトルのユニークな要素	np.unique(aArray)
線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データフレームの一部のカラムの母標準偏差	df[['列A', '列B']].std(ddof=0)
散布図を黒いクロスマーカーとして描く	plt.plot(データ列x, データ列y, marker='x', c='k')
逆余弦	math.acos(x)
その最小値でデータシリーズの欠損値を埋める	ds.fillna(ds.min())
データ列を二つ並べて柱状図にする	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームの選択したカラムのパーセンタイルを求める	df[['列A', '列B']].quantile(パーセント/100)
日付データは何曜日か知る	aDate.weekday()
黒い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
ダークマゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
ヒストグラムの色をミディアムブルーにする	plt.hist(データ列, color='mediumblue')
nがn2より大きい	n > n2
要素が全て1のベクトル	np.ones(要素数, dtype=np.int)
ダークグリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
日付データは何日か知る	aDate.day
マッピングを階層化する	collections.ChainMap(aDict)
データシリーズの未入力値を平均に設定する	ds.fillna(ds.mean())
チョコレート色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
option: グラフの色をダークオーキッドにセットする	color = 'darkorchid'
コロンによって文字列を分割して、列挙する	s.split(':')
日付データが日曜日かどうか	aDate.weekday() == 6
両端キューを要素を出す	deq.popleft()
option: 印を四角に変更する	marker = 's'
データフレームの一部のカラムを千の位で丸める	df[['列A', '列B']].round(-3)
整数nを符号なしでバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big')
列を累加した列	itertools.accumulate(iterable)
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
折れ線グラフの色をハニーデューに変更する	plt.plot(データ列x, データ列y, color='honeydew')
線グラフの色をスノーに指定する	plt.plot(データ列x, データ列y, color='snow')
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
JSONフォーマットの文字列をデータに変換する	json.loads(jsonString)
option: フクシアに色を指定する	color = 'fuchsia'
全要素を０で初期化した行列を初期化する	np.zeros(行数, 列数)
要素を両端キューの末尾に追加する	deq.append(element)
nが5の倍数かどうか確認する	n % 5 == 0
データフレームの一部の列のパーセンタイルを計算する	df[['列A', '列B']].quantile(パーセント/100)
option: ローングリーンにグラフの色を設定する	color = 'lawngreen'
文字列をタイムスタンプ型にする	pd.to_datetime(日付を表現した文字列)
プロットを論文用にする	sns.set(context='paper')
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgray')
ミディアムブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
option: ゴールド色を用いる	color = 'gold'
JSONファイルの入力を辞書にする	json.load(fin)
配列の歪み	scipy.stats.skew(配列, bias=False)
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategray')
option: データ型として複素数型を使う	dtype = bool
option: グラフを破線に設定する	linestyle = 'dashed'
分子n分母mの分数を作る	fractions.Fraction(numerator=n, denominator=m)
ファイルからストリームを開き]fileとする	file = open(filepath)
整数nを8進文字列にする	oct(n)[2:]
JSON形式の文字列を辞書にする	json.loads(jsonString)
ヒストグラムをカデットブルー色を用いて描画する	plt.hist(データ列, color='cadetblue')
折れ線グラフの色をターコイズに指定する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームのヒストグラムを横に並べて、図示する	sns.displot(df, x='列名', col='カテゴリ名')
整数nの16進文字列	hex(n)[2:]
文字列リストをひとつの文字列にする	''.join(aStringList)
双曲線余弦の逆数	math.acosh(x)
現在の時刻	datetime.date.today().hour
xを浮動小数点数にする	float(x)
文字列のn番目の文字を使う	s[n]
データフレームとしてエクセルファイルのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
配列とリストの散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ヒストグラムをゴーストホワイト色を用いて描画する	plt.hist(データ列, color='ghostwhite')
ダークスラテグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
ネイビー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
option: 線の種類を実線にセットする	linestyle = 'solid'
ヒストグラムの色をロージーブラウンにする	plt.hist(データ列, color='rosybrown')
現在をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
折れ線グラフの四角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
凡例を加える	plt.legend(['凡例A', '凡例B'])
線グラフの色をペールグリーンに指定する	plt.plot(データ列x, データ列y, color='palegreen')
整数nの8進表現を使う	oct(n)
ヒストグラムをプラム色として描画する	plt.hist(データ列, color='plum')
文字列の終了位置以前に部分文字列が含まれないかどうか	s.find(sub, 0, end) == -1
タイムスタンプデータが火曜日か	aDatetime.weekday() == 1
モカシン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
リストにリストを展開する	aList.extend(aList2)
フォーマットでカラムをdatetime64型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
データフレームのNaNを中央値に設定する	df.fillna(df.median())
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
データフレームの一部のカラムを1000の位で丸めて整数型にする	df[['列A', '列B']].round(-3).astype(int)
横棒グラフをシエナ色として描画する	plt.barh(データ列x, データ列y, color='sienna')
データフレームのカラムを散布図で描く	sns.scatterplot(data=df, x='列名', y='列名')
タプルの全エントリをクリアする	aDict.clear()
青い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
リストとリストについて散布図をプロットし、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
文字列の最初から部分文字列を消す	s.lstrip(sub)
タイムスタンプデータが何分か知る	aDatetime.minute
一度にデータフレームの選択したカラムの値を正規表現patternでreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
縦棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategray')
シート名を指定してデータフレームをエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
option: ライトサーモンにグラフの色を変更する	color = 'lightsalmon'
n番目のカラムを除いたデータフレームを使う	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
ある列の値がxに等しく、かつ別のカラムの値がyに等しい行を取り出す	df[(df['列A'] == x) & (df['列B'] == y)]
リストを分割数nでビン分割する	pd.cut(aList, n)
option: ライム色を使用する	color = 'lime'
箱ひげ図でリストを描画する	plt.boxplot(データ列)
ファイルをオープンして]、読み込みストリームを見る	open(filepath, mode='r')
横棒グラフを描画して、棒の幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
option: フォレストグリーンにフォントの色を設定する	color = 'forestgreen'
散布図に赤い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
折れ線グラフの色をスカイブルーに変更する	plt.plot(データ列x, データ列y, color='skyblue')
散布図にポイント印を加える	plt.scatter(データ列x, データ列y, marker='.')
タプルの最後を除く	aTuple[:-1]
データフレームの指定した列の分散	df['列A'].var()
乱数生成系列を初期化する	random.seed()
ドジャーブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
文字列の中で正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s)
縦棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
option: 更新する	inplace = True
nがn2と等しいかどうか	n == n2
３整数の最小公倍数	math.lcm(n, n2, n3)
リストが全て真か調べる	all(aList)
データフレームの指定したカラムの分位数	df['列A'].quantile(パーセント/100)
最大値・最小値を用いて乱数を生成する	random.randint(最小値, 最大値)
option: スレートブルーを使う	color = 'slateblue'
折れ線グラフをミディアムオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
文字列の左側から部分文字列を除く	s.lstrip(sub)
文字列から部分文字列を全て除く	s.replace(sub, '')
ヒストグラムをライトコーラル色を用いて描画する	plt.hist(データ列, color='lightcoral')
列から重複を取り除く	set(iterable)
部分文字列が文字列の開始位置からと終了位置の間に含まれるか	s.find(sub, start, end) != -1
線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
列を累積したイテラブル	itertools.accumulate(iterable, operator.mul)
日付データが木曜日かどうか調べる	aDate.weekday() == 3
散布図をスプリンググリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='springgreen')
整数乱数の行列	np.random.randint(開始値, 終了値, (行数, 列数))
ファイルを文字コードtextとしてオープンする]	open(filepath, encoding=text)
ホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
散布図の丸マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
文字列を別の文字列によって全部置き換える	s.replace(sub, newsub)
option: オールドレース色を用いる	color = 'oldlace'
線グラフの色をナバホホワイトにセットする	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームのある列を1000の位で四捨五入して、整数型にする	df['列A'].round(-3).astype(int)
ある列の文字列に部分文字列が含まれる行を取り出す	df[df['列A'].str.contains(部分文字列)]
散布図を丸印で描画する	plt.scatter(データ列x, データ列y, marker='o')
キーがマッピング上で定義済み	key in aDict
nがn2よりも小さいか	n < n2
ヒストグラムの色をパールバイオレットレッドに変更する	plt.hist(データ列, color='palevioletred')
散布図の右三角印を黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
データシリーズのNaNを最大値に増やす	ds.fillna(ds.max())
行列を変形する	aArray.reshape(行数, 列数)
option: ライトイエローを使う	color = 'lightyellow'
エクセルファイルファイルを文字化けしないように読み込む	pd.read_csv('file.csv', encoding='shift_jis')
線グラフの色をオリベドラブに指定する	plt.plot(データ列x, データ列y, color='olivedrab')
イテラブルを関数でフィルタする	filter(func, iterable)
クラス分類をバギングとしてする	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgray')
平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
ホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
正則化付き単回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
データフレームの指定したカラムのNaNを平均値に設定する	df['列A'].fillna(df['列A'].mean())
リストとリストについて散布図を描画して、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
マップのキーの一覧	aDict.keys()
リストの文字列が最初に見つかるインデックスを探す	aList.index(element)
データフレームを二つの列の値によってまとめたグループ	df.groupby(['列A', '列B'])
小文字を見る	string.ascii_lowercase
列を等量でn個にビン分割する	pd.qcut(ds, n)
オリーブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
データフレームの指定した列の中に存在する文字列と文字列の合計を数える	df['列A'].isin([value, value2]).sum()
部分文字列で文字列を区切る	s.split(sub)
セパレータで文字列を分割して文字列リストに変換する	s.split(sep)
option: ダークグレーにフォントの色を設定する	color = 'darkgray'
グラフの見た目を綺麗にする	import seaborn as sns
ファイルを追加できるようにBOM付きとして開く]	open(filepath, mode='a', encoding='utf_8_sig')
日付データをタプルにする	aDate.timetuple()
リストにリストを追加し、拡張する	aList.extend(aList2)
二つの列からグループ化し個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
プロットにx=0の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
データフレームのインデックスのリスト	df.index
逆順の双方向キュー	reversed(deq)
実数のn乗の数剰余	pow(x, n, y)
折れ線グラフの印を三角にする	plt.plot(データ列x, データ列y, marker='^')
データ列とデータ列について散布図を描画し、、マーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
データフレームの中に日付データと文字列がいくつあるか数える	df.isin([value, value2]).sum()
データフレームの選択したカラムを百の位で丸めて、整数にする	df[['列A', '列B']].round(-2).astype(int)
棒プロットの色をrgbに指定する	plt.bar(ラベル列, データ列, color=rgb)
ヒストグラムの色をブルーバイオレットにする	plt.hist(データ列, color='blueviolet')
部分文字列を文字列の開始位置から探す	s.find(sub, start)
折れ線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
日付データにn日分、加える	aDate + datetime.timedelta(days=n)
ディープスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: フォントの色をハニーデューに変更する	color = 'honeydew'
文字列の無限列を求める	itertools.repeat(element)
棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
整数nを8進表記に変換する	oct(n)
JSON文字列を読み込む	json.loads(jsonString)
option: ダークオーキッド色を使用する	color = 'darkorchid'
棒グラフをやわらかい青色を用いて描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
赤いポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='r')
青い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
ファイルを文字列の示すエンコーディングとしてオープンする]	open(filepath, encoding=s)
折れ線グラフをライトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームの中の欠損値の合計をカウントする	df.isna().sum()
ファイルからベースファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
現在を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
値を赤色でプリントする	print(f'\033[31m{value}\033[0m')
rgbの右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
棒グラフをダークグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkgreen')
バイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='violet')
nとn2が等しいか確認する	n == n2
中央値でデータフレームの未入力値を埋める	df.fillna(df.median())
マッピングのキーの値	aDict[key]
スクリプトファイルと同じディレクトリのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
ヒストグラムの色をナバホホワイトにセットする	plt.hist(データ列, color='navajowhite')
データ列の折れ線グラフを左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<')
リストの全値を取り除く	aList.clear()
線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
イテラブルとイテラブルについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
縦棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
ダークグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
option: ミディアムバイオレットレッド色を用いる	color = 'mediumvioletred'
ライムグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
タプルのn番目以降の部分を得る	aTuple[n:]
JSONファイルのfをデータにする	json.load(fin)
year年month月を日付にする	datetime.date(year=year, month=month, day=1)
度数分布図を上限から下限の範囲で描画する	plt.hist(データ列, range=(start, end))
option: 珊瑚色を用いる	color = 'coral'
折れ線グラフの右三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
レベッカパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
ダークシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
折れ線グラフの丸マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
指定したカラムの欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
option: カデットブルーにフォントの色を設定する	color = 'cadetblue'
option: シート名を設定する	sheet_name = ['A', 'B']
ロバストな線形分類器を用意する	model = sklearn.linear_model.HuberClassifier()
貝殻色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
二つのオブジェクトが同一参照かどうか調べる	obj is obj2
ライトサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='lightsalmon')
実数のハイパボリック・コサインを計算する	math.cosh(x)
配列を等間隔でn個に分割する	pd.cut(aArray, n)
イテラブルの重複組み合せを求める	itertools.combinations_with_replacement(iterable, n)
散布図の三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図の四角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
option: 紺碧色を用いる	color = 'azure'
カデットブルーにヒストグラムの色を変更する	plt.hist(データ列, color='cadetblue')
データフレームの一部の列のNaNをxに設定する	df[['列A', '列B']].fillna(x)
今日の日付を使う	datetime.date.today()
データフレームの指定したカラムの標準偏差を求める	df['列A'].std()
option: シルバーを使う	color = 'silver'
ファイルパスをオープンして]バイナリストリームを求める	open(filepath, mode='rb')
option: 三角マーカーを使用する	marker = '^'
データフレームを関数によって分類する	df.groupby(関数)
データフレームをグループ化してヒストグラムとして可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
nxn2の２次元リスト	[[0] * n for _ in range(n2)]
バイオリン図を描く	sns.violinplot(x='カテゴリ列', y='列', data=df)
線グラフをオリーブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olive')
データフレームをCSVファイルに小数点以下3桁まで書き出す	df.to_csv('file.csv', float_format='%.3f')
シアン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
nからn2までの一つ置きの整数列を作る	list(range(n, n2+1, 2))
データフレームの選択した列の第三四分位数	df[['列A', '列B']].quantile(0.75)
折れ線グラフの色をフクシアに指定する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームの指定した列の中央値	df['列A'].median()
データフレームの選択したカラムの不偏標準偏差を求める	df[['列A', '列B']].std()
データフレームをある列として集計して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
縦棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
データシリーズの中にいくつがあるかカウントする	ds.isin([value]).sum()
データシリーズの分を使う	ds.dt.minute
点線にヒストグラムの線の種類を変更する	plt.hist(データ列, linestyle='dotted')
格子をグラフから消す	plt.grid(False)
縦棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
option: 色をオレンジに変更する	color = 'orange'
アリスブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
二進文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
文字列中からパターンに大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
今日が何曜日か知る	datetime.datetime.today().weekday()
xが-9以上、9以下	-9 <= x <= 9
逆順のキュー	reversed(deq)
指定した列で集計し、それぞれの最大値を求める	df.groupby('列A').max()
線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
ヒストグラムをグリーン色として描画する	plt.hist(データ列, color='green')
ふたつの列を組み合わせてグループ化し、最大値を算出する	df.groupby(['列A', '列B'], as_index=False).max()
数値を太字にする	f'\033[1m{value}\033[0m'
データフレームの中にある文字列と日付データの合計を数える	df.isin([value, value2]).sum()
等量でn個にリストをビン分割する	pd.qcut(aList, n)
カデットブルー色でヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
追加できるようにEUCで既存のファイルを開く]	open(filepath, mode='a', encoding='euc_jp')
ダークスレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
散布図をオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='orchid')
縦棒グラフをシーグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='seagreen')
青色で数値をプリントする	print(f'\033[34m{value}\033[0m')
赤い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
文字列の左側から空白を除く	s.lstrip()
カテゴリでグループ化して、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
破線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
双方向キューが空であるか調べる	len(deq) == 0
赤いダイアモンドマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
スカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='skyblue')
下三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='v')
日付データをn日前にする	aDate - datetime.timedelta(days=n)
nで乱数シードを初期化する	random.seed(n)
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
アクアマリン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
リストとリストの散布図を描画し、、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
データフレームをグループ化し、あるカラムに対し分散を計算する	df.groupby('列A')['列B'].var()
線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
ミディアムバイオレットレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
5行をランダムにデータフレームから取り出す	df.sample(5)
option: ライトサーモンにフォントの色を設定する	color = 'lightsalmon'
深紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
カテゴリで色分けして、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
データ列の変遷を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
オールドレース色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
ホットピンクにヒストグラムの色を変更する	plt.hist(データ列, color='hotpink')
青い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
日付データは日付データと同時か調べる	aDate == aDate2
イテラブルの集合を使う	set(iterable)
文字列をn回だけ置き換える	s.replace(sub, newsub, n)
リストをソートする	sorted(aList)
y軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
２つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
散布図をミディアムパープル色として描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
あるカラムは正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
横棒グラフを耐火レンガ色を用いて描画する	plt.barh(データ列x, データ列y, color='firebrick')
折れ線グラフの上三角印を黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: マルーンにグラフの色を設定する	color = 'maroon'
option: ライトスチールブルーにフォントの色を指定する	color = 'lightsteelblue'
文字列を改行を用いて区切る	s.splitlines()
データフレームの選択したカラムの平均	df[['列A', '列B']].mean()
プロットの用途をポスターに設定する	sns.set(context='poster')
線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
既存の行列を元にして全要素が初期値のベクトル	np.full_like(aArray, 初期値)
アイリスのデータセットをデータフレームとしてロードする	df = sns.load_dataset('iris')
標準エラーを用いる	sys.stderr
option: 珊瑚色を使用する	color = 'coral'
実線に折れ線グラフの線種を設定する	plt.plot(データ列x, データ列y, linestyle='solid')
線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームのある列の中に存在すると文字列の合計を数える	df['列A'].isin([value, value2]).sum()
ゴールド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
日付時刻データが日付時刻データより先	aDatetime < aDatetime2
データフレームの一部のカラムを万の位で丸める	df[['列A', '列B']].round(-4)
縦棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
option: 菱形マーカーを使う	marker = 'D'
イテラブルと配列についての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームをソートし、、新しい行を加える	df.sort_values('キーとなる列').reset_index()
データフレームのあるカラムが正規分布からどの程度、尖っているか確認する	df['列A'].skew()
ライトブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
非数値データ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データフレームを表示するとき、表示可能な列数の最大値をnにセットする	pd.set_option('display.max_columns', n)
ある列の文字列に部分文字列が含まれない行を選ぶ	df[~df['列A'].str.contains(部分文字列)]
線グラフの色をアイボリーにする	plt.plot(データ列x, データ列y, color='ivory')
上限指定をした配列の分散を算出する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
文字列はリストの要素か	element in aList
整数nは配列のどれかか調べる	n in aArray
折れ線グラフのマーカーをクロス印にする	plt.plot(データ列x, データ列y, marker='x')
グレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
散布図の下三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームのあるカラムが何月か知る	df['列A'].dt.month
ASCII限定として前もってパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
nが2で割り切れないか判定する	n % 2 == 1
サイコロを振る	random.randint(1, 6)
列の名前を列挙する	df.columns
文字列中に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
グラフの中に枠なしの簡単な説明を入れる	plt.legend(frameon=False)
nがn2より大きいかどうか確認する	n > n2
ミディアムバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
リストをn個に等間隔でビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
棒グラフをスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='skyblue')
配列とデータ列についての散布図に黒い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
空のリストを作る	[]
データフレームをある列のカテゴリを用いて集約して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
option: ライトゴールドロディイエローにグラフの色を設定する	color = 'lightgoldenrodyellow'
シーケンスをカウンタに変換する	collections.Counter(iterable)
データフレームの指定した列を万の位で丸める	df['列A'].round(-4)
ひとつでも非アスキー文字が文字列中に含まれる	any(not c.isascii() for c in s)
イテラブルとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームをグループ化し、それぞれの平均値を算出する	df.groupby('列A').mean()
ヒストグラムの色をマルーンにセットする	plt.hist(データ列, color='maroon')
二つのデータフレームを縦方向に合体させる	pd.concat([df, df2], axis=0)
折れ線グラフのバツ印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
データシリーズを全部正規表現patternで置き換える	ds.replace(pattern, repl, regex=True)
データシリーズの欠損値を前の値で埋める	ds.fillna(method='ffill')
英字の大文字を全て使う	string.ascii_uppercase
xが1、もしくは2、もしくは3に等しいか	x == 1 or x == 2 or x == 3
ヒストグラムの色をサーモンに指定する	plt.hist(データ列, color='salmon')
option: ピンクを使う	color = 'pink'
nがn2	n == n2
文字列を青色で出力する	print(f'\033[34m{value}\033[0m')
ダークレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
rgbの四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
横棒グラフをローングリーン色を使って描画する	plt.barh(データ列x, データ列y, color='lawngreen')
データシリーズの中にいくつ文字列があるか求める	ds.isin([value]).sum()
折れ線グラフの色をミディアムスレートブルーに変更する	plt.plot(データ列x, データ列y, color='mediumslateblue')
現在が何曜日か知る	datetime.datetime.today().weekday()
ある列の値がx以上y以下の行を取り出す	df[(x <= df['列A']) & (df['列A'] <= y)]
二つの列をキーにして表データを整列する	df.sort_values(by=['列A', '列B'])
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategrey')
ふたつの関係が上位集合か調べる	aSet.issuperset(aSet2)
ミディアムアクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ライトスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightskyblue')
ファイルパスをベース名と拡張子に分割する	os.path.splitext(filepath)
行列の行ごとの標準偏差を求める	np.std(aArray, axis=1)
リストの要素を小さい順に並べ直す	sorted(aList, reverse=False)
赤いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
グラフのy軸の軸名をuntitledに設定する	plt.ylabel('y軸ラベル')
データフレームの下位25％	df.quantile(0.75)
ヒストグラムの色を貝殻に変更する	plt.hist(データ列, color='seashell')
黒い星マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
option: グリーンにフォントの色を変更する	color = 'green'
文字列中に非小文字が含まれるかどうか	any(not c.islower() for c in s)
赤いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
データシリーズの曜日名	ds.dt.weekday_name
空列を作る	[]
文字列をASCII限定としてパターンで分ける	re.split(pattern, s, flags=re.ASCI)
十六進文字列を整数にする	int(s, 16)
ベージュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
データフレームのn番目の行を抽出する	df.loc[n]
横棒グラフをペルー色として描画する	plt.barh(データ列x, データ列y, color='peru')
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
タプルの要素を並べ変える	sorted(aTuple)
データフレームの数値を全て四捨五入する	df.round()
行列の形を求める	aArray.shape
折れ線グラフを実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
半透明の実線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームの一部のカラムの中にある日付データと文字列の合計を調べる	df[['列A', '列B']].isin([value, value2]).sum()
バリーウッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
縦棒グラフをダーク・スラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
オブジェクトにプロパティがある	hasattr(obj, プロパティ名)
データフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr()
ヒストグラムの色をミディアムオーキッドにセットする	plt.hist(データ列, color='mediumorchid')
赤い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
リストと配列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しないか確認する	s.find(sub, start, end) == -1
データシリーズの曜日数を使う	ds.dt.dayofweek
配列の内積を求める	np.dot(aArray, aArray2)
ベクトルの形状	aArray.shape
半透明の点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
２つのデータフレームをジョインする	pd.merge(df, df2)
貝殻色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
ブルーバイオレット色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightgreen')
リストとリストについて散布図を描画し、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
option: エラーがあるとき例外を発生させるように設定する	errors = 'strict'
option: ダークサーモンを使う	color = 'darksalmon'
二つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
ベクトルの次元数を計算する	aArray.ndim
配列をn個にビン分割する	pd.cut(aArray, n)
散布図をハニーデュー色として描画する	plt.scatter(データ列x, データ列y, color='honeydew')
データフレームのNaNを直前の値に設定する	df.fillna(method='ffill')
横棒グラフをミスティローズ色を用いて描画する	plt.barh(データ列x, データ列y, color='mistyrose')
正規表現に文字列全体を複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
パールゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
正規分布にしたがって配列の値が発生する累積確率を求める	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
文字列中の正規表現を新しい文字列として置き換える	re.sub(pattern, newsub, s)
積み上げ横棒プロットを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
環境がウィンドウズか調べる	sys.platform.startswith('win32')
タプルの末尾を見る	aTuple[-1]
浮動小数点数を浮動小数点数で除算して、切り捨てる	x // y
ある列の文字列が正規表現にマッチするデータを抽出する	df[df['列A'].str.match(正規表現)]
xが1、もしくは2、もしくは3に等しいかどうか調べる	x == 1 or x == 2 or x == 3
最初のカテゴリーを除いてデータフレームのある列をワンホット・ベクトルに変換する	pd.get_dummies(df['列A'], drop_first=True)
空の双方向キュー	collections.deque()
赤い右三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
折れ線グラフの色をサンディーブラウンに変更する	plt.plot(データ列x, データ列y, color='sandybrown')
淡い茶色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
範囲から配列を作成する	np.linspace(最小値, 最大値, 要素数)
option: 色をモカシンに指定する	color = 'moccasin'
空のマップを生成する	{}
データを最大値と最小値を用いて正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレームをグループ化しある列に対し分散を求める	df.groupby('列A')['列B'].var()
ベージュにヒストグラムの色を指定する	plt.hist(データ列, color='beige')
データシリーズの欠損値を平均に設定する	ds.fillna(ds.mean())
全要素を０で初期化した８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int8)
耐火レンガ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
タプルのキー一覧	list(aDict)
カウンタを少ない方から列挙する	aCounter.most_common()[::-1]
ふたつの集合の∪	aSet.union(aSet2)
実行結果を紫色でプリントする	print(f'\033[35m{value}\033[0m')
データフレームのn行目を消してみる	df.drop(n, axis=0)
サドルブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
句読点文字を全て見る	string.punctuation
カウンタの項目数を求める	len(aCounter)
y座標の目盛を整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
青いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データを最大値と最小値で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データフレームの空文字を未入力値に変換し、ドロップする	df.replace('', np.nan).dropna()
データフレームの指定した列のNaNをxに設定する	df['列A'].fillna(x)
ブール型のゼロ埋めした配列	np.zeros(要素数, dtype=np.int32)
相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
データフレームをTSVファイルで出力する	df.to_csv('file.tsv', sep='\t')
option: フォントの色をパレットトルコイズに変更する	color = 'paleturquoise'
線形回帰モデルのR2を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
折れ線グラフの色をダークスレートブルーにセットする	plt.plot(データ列x, データ列y, color='darkslateblue')
ターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
データフレームから指定した三つの列を選択する	df[['列A', '列B', '列C']]
実数の双曲線余弦の逆数を求める	math.acosh(x)
色付きの実線で数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ホワイトスモーク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
複数のカラムを用いて昇順にデータフレームを整列する	df.sort_values(by=['列A', '列B'], ascending=True)
第2引数で指定されたファイル名	sys.argv[1]
option: 改行コードを動作環境依存に指定する	newline = None
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
よりランダムなランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
リストと数列の散布図にクロスマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x')
値∈集合	element in aSet
折れ線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='gray')
リストと配列についての散布図に黒いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
自然数個のものからk個取り出した時の並べ方の総数	math.perm(n, k)
タイムスタンプデータの日	aDatetime.day
オールドレース色を用いてヒストグラムを描画する	plt.hist(データ列, color='oldlace')
赤い▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
カウンタの積集合演算する	aCounter & aCounter2
青にヒストグラムの色を設定する	plt.hist(データ列, color='blue')
データフレームの一部のカラムの標本分散	df[['列A', '列B']].var(ddof=0)
ヒストグラムを2つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
ダークグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkgreen')
オブジェクトのプロパティの値を値に指定する	setattr(obj, プロパティ名, 値)
四角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
データフレームの上位25パーセント	df.quantile(0.25)
本日が土曜日かどうか調べる	datetime.datetime.today().weekday() == 5
線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
nを符号なしでバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
イエローグリーン色でヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
線グラフの色をフローラルホワイトに指定する	plt.plot(データ列x, データ列y, color='floralwhite')
二つの集合に共通する要素からなる集合	aSet.intersection(aSet2)
ファイルパスをバイナリできるようにオープンする]	open(filepath, mode='rb')
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
縦棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
ヒストグラムをパープル色を用いて描画する	plt.hist(データ列, color='purple')
データフレームのあるカラムを配列に変換する	df['列A'].values
行列は何次元か調べる	aArray.ndim
データフレームの選択したカラムが正規分布からどの程度、歪んでいるか確認する	df[['列A', '列B']].kurt()
リストとリストについて散布図を描画し、、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
オブジェクトのフィールドを取り除く	delattr(obj, プロパティ名)
部分文字列が部分文字列で開始するか確認する	s.startswith(sub)
nがn2以上かどうか	n >= n2
入力ストリームから1文字、読み込む	f.read(1)
文字列を走査し、正規表現にマッチするか調べる	re.search(pattern, s)
サンディーブラウン色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
乱数で要素を埋めた配列を作る	np.random.random(N)
円プロットを真円にする	plt.axis('equals')
表データのあるカラムの月を使う	df['列A'].dt.month
文字列はリストに含まれないかどうか調べる	element not in aList
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
数を小数点以下で丸める	round(x, n)
option: スラッシュを区切り記号で使う	sep = '/'
浮動小数点数に変換する	float(x)
データフレームの最初5行	df.head(5)
データフレームの中の未入力値の数を数える	df.isna().sum()
最小値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
縦棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
カウンタのKトップを列挙する	aCounter.most_common(k)
ヒストグラムの色をシエナに指定する	plt.hist(データ列, color='sienna')
ファイルから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
データ列の文字列長を列として見る	ds.str.len()
n個に等量でデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
データ列とリストについての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
箱ひげ図を横向きにする	plt.boxplot(データ列, vert=False)
空の階層化マップ	collections.ChainMap()
配列の値が正規分布にしたがって発生する確率を算出する	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
散布図の印を星印にする	plt.scatter(データ列x, データ列y, marker='*')
プログラムの実行を正しく止める	sys.exit(0)
プロットを使う準備をする	import matplotlib.pyplot as plt
２次元組をフラット化する	sum(aTuple)
RANSACでクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
折れ線グラフを珊瑚色で描画する	plt.plot(データ列x, データ列y, color='coral')
リストとイテラブルについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
option: 書き込みモードを使用する	mode = 'w'
二つ並べてデータ列を箱ヒゲ図にする	plt.boxplot([データ列, データ列])
文字列を置換する	s.replace(sub, newsub)
データフレーム全体を小さい順にインデックスを用いてソートする	df.sort_index(ascending=True)
クラス分類を勾配ブースティングとして行う	model = sklearn.ensemble.GradientBoostingClassifier()
リストと数列について散布図を描画して、左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームの標本標準偏差を求める	df.std(ddof=1)
データフレームを二つのカラムによってソートして、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
ヒストグラムの色をイエローグリーンに指定する	plt.hist(データ列, color='yellowgreen')
オブジェクトにプロパティが存在するかどうかテストする	hasattr(obj, プロパティ名)
nまでの奇整数列を作る	list(range(1, n, 2))
二つのリストの共通りスト	list(set(aList) & set(aList2))
nがn2よりも小さいかどうか判定する	n < n2
横棒グラフを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
option: ミディアムターコイズ色を使用する	color = 'mediumturquoise'
グラフの描画で明るく色を使う	sns.set(pallete='bright')
ロバストな単クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
option: ペルーを使う	color = 'peru'
option: 文字コードを文字列の示す文字コードに指定する	encoding = s
データ列間の平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
角度のラジアンを計算する	math.radians(degree)
データ列を箱髭図として描画する	plt.boxplot(データ列)
ダークバイオレット色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
データフレームのあるカラムの不偏分散	df['列A'].var(ddof=1)
option: フォントの色をゴーストホワイトに指定する	color = 'ghostwhite'
折れ線グラフをパレットトルコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
三数の最も小さい値	min(x, y, z)
オブジェクトが関数	callable(obj)
データフレームの指定した列を千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
ダークオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
データフレームをグループ化し、ある列に対し最小値を計算する	df.groupby('列A')['列B'].min()
折れ線グラフをピンク色として描画する	plt.plot(データ列x, データ列y, color='pink')
パウダーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
配列をリストを境界値として分割する	pd.cut(aArray, aList)
決定木の重要度をグラフ化する	plt.barh(X.columns, model.feature_importances_)
ラベンダー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
データフレームのあるカラムを千の位で丸める	df['列A'].round(-3)
折れ線グラフをライトスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
ライトスレイグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
２変数の最小値	min(x, y)
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
実線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームから列を１つのみ選択する	df[['列A']]
回帰分析を勾配ブースティングを用いて行う	model = sklearn.ensemble.GradientBoostingRegressor()
プラットホームがMacOS	sys.platform.startswith('darwin')
データシリーズを十の位で丸める	ds.round(-1)
数列と配列について散布図を描画してバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ダークオリーブグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
ある列の値毎の分散	df.groupby('列A').var()
散布図のマーカーを▽印にする	plt.scatter(データ列x, データ列y, marker='v')
スカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
データシリーズの中にある日付データの合計を求める	ds.isin([value]).sum()
データフレームの指定した列の未入力値を最小値で埋める	df['列A'].fillna(df['列A'].min())
改行を使う	'\n'
データフレームを表示するときヘッダー行を左寄せにセットする	pd.set_option('colheader_justify', 'left')
ヒストグラムをコーンフラワーブルー色として描画する	plt.hist(データ列, color='cornflowerblue')
折れ線グラフの三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
オールドレース色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
折れ線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列x, データ列y, color='lavenderblush')
グラフの色使いを暗くする	sns.set(pallete='dark')
点線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: ライトブルー色を使用する	color = 'lightblue'
option: フォントの色をホットピンクに設定する	color = 'hotpink'
スクリプトファイルと同じフォルダのファイルパスのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
組のn番目からn2番目までの部分を取り出す	aTuple[n:n2]
コマンド引数を一覧として得る	sys.argv[1:]
散布図に四角マーカーを加える	plt.scatter(データ列x, データ列y, marker='s')
nが-9以上、9以下	-9 <= n <= 9
ベクトルを平坦にする	aArray.flatten()
パラメータについて数式を積分する	sympy.integrate(e, z)
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
xの小数点以下'1'桁までの文字列にする	':.1f'.format(x)
丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o')
文字列中にひとつでも非英数字が含まれる	any(not c.isalnum() for c in s)
高頻度方からカウンタを列挙する	aCounter.most_common()
タプル内の要素が少なくとも一つ真かどうか調べる	any(aTuple)
データシリーズが何時か知る	ds.dt.hour
要素を両端キューの最後に追加する	deq.append(element)
散布図をライム色を用いて描画する	plt.scatter(データ列x, データ列y, color='lime')
データフレームの一部のカラムの欠損値を平均値で補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
箱ひげ図としてデータ列を描画する	plt.boxplot(データ列)
データシリーズの中に文字列があるかどうか調べる	ds.isin([value])
縦棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
整数を万の位で四捨五入する	round(x, -4)
ナバホホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
文字列の中で大文字・小文字を無視して正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
option: 丸マーカーを加える	marker = 'o'
カウンタを集合にする	set(aCounter)
行列の累積積を見る	np.cumprod(aArray)
追加モードとしてファイルを開いて]、fとする	f = open(filepath, mode='a')
度数分布図の描画して、正規化する	plt.hist(データ列, density=True)
ダークグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
データフレームを列名を指定して全ジョインする	pd.merge(df, df2, on='列A', how='outer')
エンコーディングを使って文字列をバイト列にする	s.encode(encoding=encoding)
表のあるカラムを配列に変換する	df['列A'].values
nの各桁の和を計算する	sum(map(int, str(n)))
タプルから項目名の値をエラーなく得る	aDict.get(key, None)
データフレームの指定したカラムが正規分布からどの程度歪んでいるか見る	df['列A'].kurt()
指定したカラムの不偏分散	df['列A'].var(ddof=1)
option: バッファのサイズを大きくする	buffering = 4096
折れ線グラフの色をライムグリーンに変更する	plt.plot(データ列x, データ列y, color='limegreen')
散布図を赤いダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
文字列はひらがなかどうか調べる	('ぁ' <= ch <= 'ん')
ライトスチールブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
文字列全体がパターンにASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
ヒストグラムの描き、正規化する	plt.hist(データ列, density=True)
文字列の大文字小文字を入れ替える	s.swapcase()
カテゴリでグループ化して、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
シーグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
option: ローングリーン色を使用する	color = 'lawngreen'
アルファベットを全て使う	string.ascii_letters
直前の値でデータフレームの選択した列の欠損値を補う	df[['列A', '列B']].fillna(method='ffill')
option: オレンジレッドにフォントの色を設定する	color = 'orangered'
option: ライトグレー色を使用する	color = 'lightgrey'
文字列を記号にして変数にする	z = sympy.Symbol(s)
文字列の先頭から空白を除く	s.lstrip(' ')
グリーンイエローにヒストグラムの色をセットする	plt.hist(データ列, color='greenyellow')
rgbの下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームのあるカラムの値がxに等しい行を抽出する	df[df['列A'] == x]
全要素を0で初期化したベクトル	np.zeros(要素数)
ブランチドアーモンド色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
2つの文字列は等しいか確認する	s == s2
データフレームの一部のカラムの欠損値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
実行時の標準出力の出力先がターミナルかどうか調べる	sys.stdout.isatty()
option: 色をダークレッドに設定する	color = 'darkred'
タプルの値を列挙する	aDict.values()
折れ線グラフをライトイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightyellow')
文字列を空白で区切って、文字列リストにする	s.split()
文字列全体が正規表現に複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
データシリーズを10の位で四捨五入して整数にする	ds.round(-1).astype(int)
変数を黄色にする	f'\033[33m{value}\033[0m'
正規表現patternでreplにまとめてデータフレームの選択したカラムの値を変更する	df[['列A', '列B']].replace(pattern, repl, regex=True)
データシリーズの平均	ds.mean()
第一引数で指定したファイルの名前	sys.argv[1]
データフレームの重複していない行のみを選択する	df[~ df.duplicated(keep=False)]
散布図に黒い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフの色を茶色に変更する	plt.plot(データ列x, データ列y, color='brown')
整数乱数で要素を埋めた行列を作る	np.random.randint(開始値, 終了値, (行数, 列数))
両端キューは空か確認する	len(deq) == 0
ふたつの集合の共通要素のみにする	aSet.intersection_update(aSet2)
リストと配列についての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
符号付きでnを長さn2のバイナリにする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
インディアンレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
最大最小でデータを正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
option: フローラルホワイトにグラフの色を設定する	color = 'floralwhite'
散布図に赤い菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='r')
ディープスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: リネンを用いる	color = 'linen'
ムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
双方向キューの大きさを求める	len(deq)
option: グラフの色をディープスカイブルーに変更する	color = 'deepskyblue'
濃いシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ファイルパスからストリームをオープンして]、fileとする	file = open(filepath)
集合の全要素が別のセットに含まれる	aSet.issubset(aSet2)
データフレームのカラムの平均の標準誤差を求める	scipy.stats.sem(df['列A'])
配列とリストの散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
横軸の目盛りを整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
numpyを入れる	import numpy as np
名前付きタプルをデータからインスタンス化する	C._make(パラメータ)
ヒストグラムをゲインズボロ色として描画する	plt.hist(データ列, color='gainsboro')
赤い▼マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: エクセルシートの名前を設定する	sheet_name = ['A', 'B']
データフレームを指定した列を用いて昇順に並べて更新する	df.sort_values(by='列A', ascending=True, inplace=True)
データシリーズの文字列を欠損値にする	ds.replace(値, np.nan)
縦棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ミディアムスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
図のサイズを指定する	plt.figure(figsize=(横幅, 高さ))
option: ライトスチールブルー色を用いる	color = 'lightsteelblue'
オブジェクトは辞書型か調べる	isinstance(obj, dict)
文字列中の部分文字列の登場回数をカウントする	s.count(sub)
π	math.pi
データフレームからカテゴリデータだけ選択する	df.select_dtypes('object')
カウンタの最も頻出の要素	aCounter.most_common()[0]
真下位集合か調べる	aSet < aSet2
集合を組に変換する	tuple(aSet)
データ列とリストの散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームから１つの列を選択する	df[['列A']]
リストを等しい量になるようにビン数nとして分割する	pd.qcut(aList, n)
線グラフを色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ファイル全体をリストとして読み込む	f.readlines()
多次元尺度構成法で多次元データを淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームの標本分散を算出する	df.var(ddof=0)
枠なしのデータラベルを表示する	plt.legend(frameon=False)
option: ラベンダーブラッシュにグラフの色を設定する	color = 'lavenderblush'
データフレームの未入力値が含まれる部分を色付けする	df.style.highlight_null()
データフレームの指定したカラムの欠損値を直前の値にする	df['列A'].fillna(method='ffill')
データシリーズを千の位で丸めて、整数にする	ds.round(-3).astype(int)
散布図をダークオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='darkorange')
赤色として散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
双方向キューの先頭の要素	deq[0]
ペルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
ヒストグラムを複数並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
組の中の最大値	max(aTuple)
nかけるn2を求める	n * n2
UNIX秒のカラムから日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
データフレームが重複しているかどうか調べる	df.duplicated()
二つの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
実数を2乗する	x ** 2
データフレームのstart行目からend行目までを抽出する	df[start:end]
ヒストグラムをティール色を使って描画する	plt.hist(データ列, color='teal')
option: 色をドジャーブルーに設定する	color = 'dodgerblue'
配列間のケンドールの相関係数	scipy.stats.kendalltau(配列, 配列2)
現在が土曜日か	datetime.datetime.today().weekday() == 5
部分的最小二乗法を用いて回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
組を引数として展開して表示する	print(*aTuple, sep=',')
データフレームの選択した列の欠損値をその最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
nが偶数	n % 2 == 0
実数の逆双曲線正弦を計算する	math.asinh(x)
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgrey')
option: グラフの色をライトグレーに変更する	color = 'lightgray'
リストとリストの散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
xの絶対値を求める	abs(x)
option: フォントの色をペルーに指定する	color = 'peru'
オブジェクトを文字列にする	str(obj)
option: ラベンダーを使う	color = 'lavender'
データフレームの未入力値を中央値に設定する	df.fillna(df.median())
縦棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
グラフの色を暗くする	sns.set(pallete='dark')
出力するCSVファイルの小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
ミントクリーム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
エポック秒を日付時刻にする	datetime.datetime.fromtimestamp(timestamp)
データフレームのカラムのKurtosisを求める	scipy.stats.kurtosis(df['列A'], bias=False)
散布図をスノー色を使って描画する	plt.scatter(データ列x, データ列y, color='snow')
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: 小麦色を使う	color = 'wheat'
ヒストグラムの色をダークオレンジに指定する	plt.hist(データ列, color='darkorange')
numpyをインポートする	import numpy as np
改行を取り除いて1行だけ標準入力から読み込む	sys.stdin.readline().rstrip()
データフレームを二つの列の値で集約して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
マゼンタ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
オーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
赤い▽マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームの欠損値を平均で補う	df.fillna(df.mean())
ヒストグラムをイエローグリーン色として描画する	plt.hist(データ列, color='yellowgreen')
アリスブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
折れ線グラフの色を耐火レンガに変更する	plt.plot(データ列x, データ列y, color='firebrick')
青い破線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームの指定した列の欠損値をxで置換する	df['列A'].fillna(x)
縦棒グラフを描いて、左寄せする	plt.bar(ラベル列, データ列, align='edge')
リストの折れ線グラフを描画し、、色をカラーコードで変更する	plt.plot(データ列x, データ列y, color='#800080')
ファイル名がCSVファイルか	filename.endswith('.csv')
ふたつの集合はセットと交わりを持たないか調べる	aSet.isdisjoint(aSet2)
数列とリストについて散布図を描いて、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データシリーズのNaNを直後の値に変更する	ds.fillna(method='bfill')
棒グラフをビスク色を使って描画する	plt.bar(データ列x, データ列y, color='bisque')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか存在するか数える	s.count(sub, start, end)
ダークブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
データシリーズの欠損値をその平均値で埋める	ds.fillna(ds.mean())
データシリーズの中にいくつ文字列があるかカウントする	ds.isin([value]).sum()
縦棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
N未満までの配列	np.arange(N)
日付時刻データが日付時刻データより後ろかどうか	aDatetime > aDatetime2
option: パールゴールデンロッド色を用いる	color = 'palegoldenrod'
プロットの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
散布図をトマト色として描画する	plt.scatter(データ列x, データ列y, color='tomato')
リストをひとつ置きに得る	aList[::2]
指定した列のカテゴリで集計し、最小値を計算する	df.groupby('列A').min()
option: 印をポイントに変更する	marker = '.'
実数を万の位で四捨五入する	round(x, -4)
型が名前付きタプルか調べる	issubclass(C, tuple)
n足すn2	n + n2
紺碧色でヒストグラムを描画する	plt.hist(データ列, color='azure')
文字列の接尾辞が部分文字列かどうか調べる	s.endswith(sub)
option: インディゴに色を設定する	color = 'indigo'
空のヒストグラムベースの勾配ブースティング回帰木を準備する	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: シーグリーンにグラフの色を変更する	color = 'seagreen'
データフレームをCSVファイルからロードする	pd.read_csv('file.csv', sep=',')
データフレームから型リストで指定したデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
折れ線グラフの下三角印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ある列のカテゴリ毎の個数	df.groupby('列A').count()
データフレームから重複を残さず重複を取り除く	df.drop_duplicates(keep=False)
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームの値を正規表現patternでまとめて置き換える	df.replace(pattern, repl, regex=True)
指定したカラムを丸める	df['列A'].round()
複数行対応としてあらかじめ正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
タプルをn回、加える	aTuple * n
x軸の目盛りを表示しない	plt.xticks([])
破線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
データシリーズの未入力値を最大値で埋める	ds.fillna(ds.max())
option: フォントの色をマゼンタに指定する	color = 'magenta'
データフレームのあるカラムの尖度	df['列A'].skew()
赤いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='r')
option: ライムグリーンにグラフの色を設定する	color = 'limegreen'
正規分布として疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
縦棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
option: 色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
シエナ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
option: 星マーカーを加える	marker = '*'
組の中の最小値を求める	min(aTuple)
ファイルからファイル名を求める	os.path.basename(filepath)
折れ線グラフに赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
日付データは日付データと同時	aDate == aDate2
縦棒グラフをロージーブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='rosybrown')
行列の列ごとの分散を使う	np.var(aArray, axis=0)
スライド用にグラフを指定する	sns.set(context='talk')
データフレームを関数によってまとめた表	df.groupby(関数)
散布図にrgbの左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
辞書の項目名を要素に変更する	aDict[key] = element
外れ値に強い線形回帰モデルを新規作成する	model = sklearn.linear_model.HuberRegressor()
既存の配列を元に全要素が1のベクトル	np.ones_like(aArray)
オブジェクトのフィールドの値	getattr(obj, プロパティ名)
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
データシリーズが何分か調べる	ds.dt.minute
横棒グラフをラベンダーブラッシュ色として描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
データフレームを複数のカラムによって昇順にソートし、、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
集合が空でない	len(aSet) != 0
option: オレンジ色を用いる	color = 'orange'
データフレームの指定したカラムの75パーセンタイル	df['列A'].quantile(0.75)
データフレームが重複しているかどうか調べる	df.duplicated()
リストを境界値として配列をビン分割する	pd.cut(aArray, aList)
イテラブルを文字列リストに変換して空白でつなげる	' '.join(map(str, iterable))
標準入力	sys.stdin
異なる列をキーとしてデータフレームを右結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
option: グラフの種類を実線にセットする	linestyle = 'solid'
ライトスカイブルーにヒストグラムの色を変更する	plt.hist(データ列, color='lightskyblue')
整数nがセットのどれかかどうか調べる	n in aSet
データフレームの累積分布を描く	sns.ecdfplot(x='列名', data=df)
nがn2で割り切れないかどうか	n % n2 != 0
辞書から項目名の値か、もしくは要素を得る	aDict.get(key, element)
オブジェクトがリストに含まれるか調べる	element in aList
プラットホームがMacOSかどうか調べる	sys.platform.startswith('darwin')
データフレームのカーネル密度分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
カテゴリデータ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
散布図をタン色を用いて描画する	plt.scatter(データ列x, データ列y, color='tan')
リストとリストの散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ファイルをBOM付きとしてオープンする]	open(filepath, encoding='utf_8_sig')
データフレームの選択したカラムの中に文字列と文字列が含まれるか調べる	df[['列A', '列B']].isin([value, value2])
option: クロスマーカーを使用する	marker = 'x'
日付データが月曜日か	aDate.weekday() == 0
ビスク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
赤い実線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ダークサーモンにヒストグラムの色を指定する	plt.hist(データ列, color='darksalmon')
データ列を四分位数でビン分割する	pd.qcut(ds, 4)
文字列はタイトル大文字小文字かどうか確認する	s.istitle()
散布図の△マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
縦棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ケースを無視して正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームから指定した列名一覧の列のみ選ぶ	df[columns]
データフレームの最初10行	df.head(10)
option: グラフの色をダークスラテグレーに指定する	color = 'darkslategray'
データフレームのあるカラムは何分か知る	df['列A'].dt.minute
散布図のバツ印の色を設定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
最大値・最小値で整数乱数を算出する	random.randint(最小値, 最大値)
散布図の▽マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
ターコイズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
リストと配列について散布図を描いて、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
データフレームのあるカラムの日を使う	df['列A'].dt.day
文字列内に空白があるかどうか確認する	any(c.isspace() for c in s)
データシリーズのNaNを直前の値に指定する	ds.fillna(method='ffill')
指定した列のカテゴリで集計し、それぞれの合計を計算する	df.groupby('列A').sum()
モデルの残差を計算する	目的変数 - model.predict(説明変数)
文字列中にひとつでも非小文字が含まれるか	any(not c.islower() for c in s)
ふたつのマップを合体する	aDict | aDict2
文字列内にひとつでも空白が含まれるかどうか調べる	any(c.isspace() for c in s)
バリーウッドにヒストグラムの色をする	plt.hist(データ列, color='burlywood')
データフレームの中の列を等しい量になるようにビン数nでビニングする	pd.qcut(df[col], n)
フクシア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
カウンタのそれぞれの項目をそのカウントだけ列挙する	aCounter.elements()
文字列の開始位置と終了位置の間に部分文字列が含まれるかどうか	s.find(sub, start, end) != -1
箱髭図を二つ並べて描画する	plt.boxplot([データ列, データ列])
データフレームのあるカラムの中に存在すると文字列の合計を調べる	df['列A'].isin([value, value2]).sum()
集合から別のセットの要素を全て除く	aSet.difference_update(aSet2)
横棒グラフを青緑色を用いて描画する	plt.barh(データ列x, データ列y, color='teal')
白色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
線グラフの色をアクアに変更する	plt.plot(データ列x, データ列y, color='aqua')
ヒストグラムの色をミディアムアクアマリンに指定する	plt.hist(データ列, color='mediumaquamarine')
線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
折れ線グラフをグレー色を使って描画する	plt.plot(データ列x, データ列y, color='grey')
グレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
横棒グラフをマルーン色を用いて描画する	plt.barh(データ列x, データ列y, color='maroon')
散布図の星マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
文字列中から正規表現にASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
大バツ印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
散布図をrgbのバツマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
グリッドの線種を点線に変更する	plt.grid(linestyle='dotted')
ピーチパフ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
日付時刻データの時間数を使う	aDatetime.hour
文字列をASCIIコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
グラフの色テーマを全般的に濃くする	sns.set(pallete='deep')
棒グラフをゴールド色を用いて描画する	plt.bar(データ列x, データ列y, color='gold')
折れ線グラフの色をダークサーモンに指定する	plt.plot(データ列x, データ列y, color='darksalmon')
option: スプリンググリーン色を用いる	color = 'springgreen'
文字列をカンマで分割して列挙する	s.split(',')
option: マーカーを星に変える	marker = '*'
レモンシフォン色でヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
プロットを濃くする	sns.set(pallete='deep')
option: ミディアムアクアマリン色を使用する	color = 'mediumaquamarine'
option: オレンジレッド色を用いる	color = 'orangered'
表計算ファイルを読み込む	pd.read_excel('file.xlsx')
スペクトル分解を行う	model = sklearn.decomposition.PCA(n_components=n)
数値を緑色でプリントする	print(f'\033[32m{value}\033[0m')
データフレームの内容を調べる	df.head()
データ列をヒストグラムで描画する	plt.hist(データ列)
棒プロットの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
直後の値でデータフレームの一部のカラムの欠損値を置換する	df[['列A', '列B']].fillna(method='bfill')
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
エクセルファイルのシートをデータフレームとして読む	pd.read_excel('file.xlsx', sheet_name=シート名)
ヒストグラムの線種を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
横棒グラフをターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='turquoise')
散布図を赤い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
としてデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
データフレームの指定したカラムのNaNを最小値で置換する	df['列A'].fillna(df['列A'].min())
横棒グラフをライトシアン色として描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ピーチパフ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
nを十六進数表現に変換する	hex(n)
両端キュー中の値の数をカウントする	deq.count(element)
日付時刻データが火曜日	aDatetime.weekday() == 1
否定する	not n
ダークグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
スクリプトファイルのフォルダ名を使う	os.path.dirname(os.path.abspath(__file__))
データフレームの指定した列の母標準偏差	df['列A'].std(ddof=0)
カウンタのキーとカウントをリストとして得る	aCounter.items()
浮動小数点数を実数で割って小数点以下を切り捨てる	x // y
列名を指定せずCSVファイルを読み込む	pd.read_csv('file.csv', header=None)
半透明の点線としてデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
出力ストリームを一行ずつ読む	f.readline()
横棒グラフをライトスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
データ列を中央値で分割する	pd.qcut(ds, 2)
グリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='green')
紺色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
空白文字を全て使う	string.whitespace
下線付きで文字列を表示する	print(f'\033[4m{value}\033[0m')
option: 読む行番号をnamesで指定する	usecols = names
パパイヤウィップ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
モジュールを検索するパスを列挙する	sys.path
データフレームのn行目を除く	df.drop(n, axis=0, inplace=True)
縦棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
整数nを2進表現に変換する	bin(n)
データフレームの指定した列の記述統計量を全部見る	df['列A'].describe()
文字列の示すエンコーディングでファイルパスをオープンする]	open(filepath, encoding=s)
棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームのNaNを直後の値に設定する	df.fillna(method='bfill')
折れ線グラフをダークサーモン色として描画する	plt.plot(データ列x, データ列y, color='darksalmon')
option: 印を▼に変更する	marker = 'v'
表計算ファイルのシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
縦棒グラフをミディアムアクアマリン色を使って描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategray')
データフレームのヒストグラム付き散布図をプロットする	sns.jointplot(x='列名', y='列名', data=df)
散布図をオリーブ色を用いて描画する	plt.scatter(データ列x, データ列y, color='olive')
折れ線グラフに青い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
エポック秒から日付時刻にする	datetime.datetime.fromtimestamp(timestamp)
文字列全体が正規表現に大文字・小文字を無視してマッチするか調べる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
nullに等しい識別子	None
データフレームのあるカラムを百の位で丸めて整数型にする	df['列A'].round(-2).astype(int)
シーケンスから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
カウンタのキーをひとつ増やす	aCounter[element] += 1
データシリーズの値がNaNか判定する	ds.isna()
集合から何でもいいからひとつ除く	aSet.pop()
デピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
option: グラフの色をロイヤルブルーに指定する	color = 'royalblue'
列のユニークな値の個数	df[col].nunique()
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
折れ線グラフの▽印の大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
二つのデータフレームを列名を指定して外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
データフレームの列をに箱ひげ図でプロット化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
指定した列のカテゴリで集計し標準偏差を求める	df.groupby('列A').std()
nが負の数	n < 0
ファイルパスのセパレータ記号を使う	os.sep
青緑色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
散布図に青い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
リストを境界値としてリストをビン分割する	pd.cut(aList, aList)
三つ並べてヒストグラムを描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームのある列の値がxより小さいデータを抽出する	df[df['列A'] < x]
データフレームの指定したカラムを十の位で四捨五入して、整数型にする	df['列A'].round(-1).astype(int)
線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
リストとリストについて散布図を描画してポイントマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図のマーカーを青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
データフレームのある列の値がxに等しいデータを取り出す	df[df['列A'] == x]
両端キューの最初	deq[0]
データフレームの中にあるの数を数える	df.isin([value]).sum()
カラムのSkewnessを求める	scipy.stats.skew(df['列A'], bias=False)
棒グラフを青色を使って描画する	plt.bar(データ列x, データ列y, color='blue')
ヒストグラムをグレー色を使って描画する	plt.hist(データ列, color='grey')
バリーウッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
option: ライトイエローに色を設定する	color = 'lightyellow'
プラットホームのバイトオーダを知る	sys.byteorder
行列の行ごとの最小	np.min(aArray, axis=1)
データフレームから重複したデータを残さず除く	df.drop_duplicates(keep=False)
ブルーバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
多次元データを特異値分解としてパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
３つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
下三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
CSVファイルにデータフレームをインデックスを付けず保存する	df.to_csv('file.csv', index=None)
散布図に赤い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
option: 色をブランチドアーモンドに設定する	color = 'blanchedalmond'
option: ベージュを用いる	color = 'beige'
データフレームの指定したカラムのSkewness	df['列A'].skew()
option: シルバーにグラフの色を設定する	color = 'silver'
散布図を▲マーカーで描画する	plt.scatter(データ列x, データ列y, marker='^')
二つのデータフレームを横方向に一つにする	pd.concat([df, df2], axis=1)
xが一桁の正の整数かどうか調べる	0 <= x <= 9
散布図を赤い▲マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
カウンタ間で積集合を算出する	aCounter & aCounter2
赤い丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
正規表現を大文字・小文字を無視してあらかじめコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
option: マーカーを▲に変える	marker = '^'
リストの要素を入れ替える	aList[i], aList[j] = aList[j], aList[i]
折れ線グラフの色をサーモンにする	plt.plot(データ列x, データ列y, color='salmon')
シアンにヒストグラムの色を指定する	plt.hist(データ列, color='cyan')
コーンズシルク色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s')
キーが辞書に存在するかどうか確認する	key not in aDict
option: 色をパールバイオレットレッドに変更する	color = 'palevioletred'
JSONファイルの入力を辞書に変換する	json.load(fin)
カラムの各データ値の出現数	df[col].value_counts()
折れ線グラフの左三角印の色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
文字列の終了位置より前に部分文字列がある	s.find(sub, 0, end) != -1
散布図に赤いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
黄色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
散布図に黒い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
辞書順で文字列は文字列より前かどうか調べる	s < s2
ゲインズボロ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
配列とデータ列についての散布図に黒い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
ファイルが存在しない	not os.path.exists(filepath)
ミディアムバイオレットレッド色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データフレームの指定した列の中にある日付データの合計を求める	df['列A'].isin([value]).sum()
横棒グラフをペールグリーン色として描画する	plt.barh(データ列x, データ列y, color='palegreen')
データフレームの選択したカラムが正規分布からどの程度歪んでいるか見る	df[['列A', '列B']].kurt()
データシリーズの値が欠損値かどうか調べる	ds.isna()
散布図に大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
リストが全て真かどうか調べる	all(aList)
二つの整数の最大公約数	math.gcd(n, n2)
文字列は文字列より辞書順で後か	s > s2
キューに文字列をenqueueする	deq.appendleft(element)
rgbの左三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ヒストグラムを用いて数列を可視化する	plt.hist(データ列)
option: ミディアムアクアマリンにグラフの色を変更する	color = 'mediumaquamarine'
相関係数でデータフレームの相関行列を計算する	df.corr(method='pearson')
タプルからキーの値を得る	aDict.get(key)
option: タブをセパレータで用いる	sep = '\t'
組の各要素を関数に適用した結果で並べ直す	sorted(aTuple, key=func)
折れ線グラフをクリムゾン色を使って描画する	plt.plot(データ列x, データ列y, color='crimson')
マップの項目名の値	aDict[key]
ミディアムパープル色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
n個に等間隔でデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
nが1、もしくは2もしくは3に等しいかどうか調べる	n == 1 or n == 2 or n == 3
ヒストグラムをビスク色として描画する	plt.hist(データ列, color='bisque')
変数を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
グラフを画面用にする	sns.set(context='notebook')
縦棒プロットを描いて、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
rgbに棒プロットの色をセットする	plt.bar(ラベル列, データ列, color=rgb)
option: フォントの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
指定した列で集計し、各分散を求める	df.groupby('列A').var()
文字列をSJISでバイト列にする	s.encode(encoding='sjis', errors='ignore')
データフレームの選択した列はどの程度、分散しているか見る	df[['列A', '列B']].var()
天井を求める	math.ceil(x)
表計算から全てのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
文字列を区切りで分割して文字列リストに変換する	s.split(sep)
CSVファイルのn行目をインデックスにして読み込む	pd.read_csv('file.csv', index_col=n)
データシリーズの分を見る	ds.dt.minute
ミッドナイトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
ブランチドアーモンド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
折れ線グラフのアルファを設定する	plt.plot(データ列x, データ列y, alpha=0.5)
option: ダーク・スラテグレーを使う	color = 'darkslategrey'
option: フォントの色をネイビーに指定する	color = 'navy'
色付きの一点鎖線を用いてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームの一部のカラムのNaNを中央値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
リストと数列について散布図を描き、、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
漢字が文字列にあるか調べる	re.search('[\u4E00-\u9FD0]', s)
データフレームを指定した列によってソートして、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
データフレームの一部のカラムの空文字を欠損値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
データフレームを表示するとき、表示できる最大行数をnに設定する	pd.set_option('display.max_rows', n)
option: フローラルホワイトにグラフの色を指定する	color = 'floralwhite'
散布図の大バツ印を赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
線グラフの色をアクアマリンに変更する	plt.plot(データ列x, データ列y, color='aquamarine')
シャルトリューズ色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
データシリーズの中にいくつ欠損値が存在するか求める	ds.isna().sum()
日付と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
点線でヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
option: ラベンダーにグラフの色を設定する	color = 'lavender'
データフレームの指定したカラムの空文字をNaNに変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
ミッドナイトブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
日付時刻データからn週間を減算する	aDatetime - datetime.timedelta(weeks=n)
折れ線グラフにバツマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
あるカラムの値がx以上y以下のデータを抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
シアン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
SJISでCSVファイルにデータフレームを保存する	df.to_csv('file.csv', encoding='shift_jis')
散布図に黒い▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
データ列をn個にビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: 行列のデータ型を指定する	dtype = bool
折れ線グラフのバツマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
プログラムを即座に止める	sys.exit()
未初期化の行列	np.empty(要素数, dtype=np.int)
表をグループ化し、ある列の記述統計量を算出する	df.groupby('列A').describe()['列B']
グラフに水平方向の破線を付ける	plt.axhline(y=0, linestyle='dashed')
ファイルを文字コードtextとして書き込み用に開く]	open(filepath, mode='w', encoding=text)
データフレームから100行、ランダムサンプリングする	df.sample(100)
実数のコサインの逆数	math.acos(x)
文字列の先頭で複数行対応としてパターンにマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
散布図をスラグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='slategrey')
イテラブルを集合に追加する	aSet.update(iterable)
n個にリストを等間隔でビン分割する	pd.cut(aList, n)
折れ線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
赤い点線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフの色をアイボリーにセットする	plt.plot(データ列x, データ列y, color='ivory')
年月日と時刻からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
散布図に左三角印を加える	plt.scatter(データ列x, データ列y, marker='<')
赤い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
option: シーグリーンを使う	color = 'seagreen'
配列とリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ゴールド色を用いてヒストグラムを描画する	plt.hist(データ列, color='gold')
横棒グラフをホワイトスモーク色を用いて描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
データフレームのあるカラムが何年か知る	df['列A'].dt.year
ヒストグラムを紺色として描画する	plt.hist(データ列, color='darkblue')
一番右側の列を除いたデータフレーム	df[df.columns[:-1]]
ヒストグラムをライトイエロー色を用いて描画する	plt.hist(データ列, color='lightyellow')
option: スラグレーにグラフの色を変更する	color = 'slategray'
ある列のカテゴリごとの標準偏差を計算する	df.groupby('列A').std()
タプルをカンマ区切りで表示する	print(*aTuple, sep=',')
データフレームのあるカラムの欠損値をモードに指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
option: スレートブルー色を使用する	color = 'slateblue'
バイナリできるようにファイルをオープンする]	open(filepath, mode='rb')
クラスのサブ型	issubclass(サブクラス, クラス)
回帰分析をバギングとして行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
日付データを文字列としてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
option: サーモンを使用する	color = 'salmon'
データフレームから指定したデータ型の列名リスト	df.select_dtypes(型).columns
散布図をライトシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
オプションで、標準エラーを用いる	file = sys.stderr
option: 線幅を設定する	linewidth = 3.0
predicateFuncがTrueとなるイテラブルの部分を取り出す	itertools.takewhile(predicateFunc, iterable)
配列の尖りを計算する	scipy.stats.kurtosis(配列, bias=False)
シーケンスを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
タプルにタプルの項目を追加する	aDict.update(aDict2)
ファイルをバイナリモードでオープンして]fとする	f = open(filepath, mode='rb')
折れ線グラフをシエナ色を用いて描画する	plt.plot(データ列x, データ列y, color='sienna')
数式の平方根を算出する	sympy.sqrt(e)
小数点数がNaNかどうか調べる	math.isnan(x)
二つの実行結果をカンマで区切ってプリントする	print(value, value2, sep=',')
リストとイテラブルについて散布図を描いて、マーカーを菱形に指定する	plt.plot(データ列x, データ列y, marker='D')
保存するCSVファイルの小数点以下の桁数を変更する	df.to_csv('file.csv', float_format='%.3f')
棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
データフレームのカラム概要	df.info()
赤い下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ライトサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
オブジェクトはリストか調べる	isinstance(obj, list)
無限リストを求める	itertools.count()
ライトシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
ダークグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
データフレームの欠損値をその最頻値で埋める	df.fillna(df.mode().iloc[0])
ヒストグラムをライトサーモン色として描画する	plt.hist(データ列, color='lightsalmon')
双方向キューに要素をenqueueする	deq.appendleft(element)
データシリーズの中にある日付データの合計を調べる	ds.isin([value]).sum()
折れ線グラフに青い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
あるカラムはどの程度分散しているか確認する	df['列A'].var()
文字列リストにイテラブルを変換して、空白で連結する	' '.join(map(str, iterable))
データシリーズの未入力値をメディアンにする	ds.fillna(ds.median())
下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムの色をミディアムパープルにセットする	plt.hist(データ列, color='mediumpurple')
データシリーズが何分か知る	ds.dt.minute
要素がタプルの値に含まれていないか調べる	element not in aDict.values()
option: 青紫を用いる	color = 'violet'
赤い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
文字列の開始位置より後に部分文字列が含まれるか調べる	s.find(sub, start) != -1
ケンドールの相関係数	scipy.stats.kendalltau(数列, 数列2)
option: オリーブを用いる	color = 'olive'
ランダムにデータフレームから100行を抽出する	df.sample(100)
散布図をミディアムスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
三整数のLCM	math.lcm(n, n2, n3)
文字列全体がパターンにマッチするか見る	re.fullmatch(pattern, s)
option: グラフの色をダークグレーに変更する	color = 'darkgrey'
ある列の値がx以上、y未満のデータを取り出す	df[(x <= df['列A']) & (df['列A'] < y)]
option: アリスブルー色を用いる	color = 'aliceblue'
タン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
タプルの末尾の要素を使う	aTuple[-1]
セパレータで文字列を区切って、列挙する	s.split(sep)
散布図にバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
ゼロ埋めされた８ビット整数型の行列	np.zeros(要素数, dtype=np.int8)
実数のハイパボリック・サインの逆数	math.asinh(x)
パープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
黒い菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
横棒グラフをダークオレンジ色として描画する	plt.barh(データ列x, データ列y, color='darkorange')
オリベドラブにヒストグラムの色をセットする	plt.hist(データ列, color='olivedrab')
オレンジレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
アクア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
データフレームの重複する行をマスクする	df.duplicated()
横棒グラフを淡いピンク色色として描画する	plt.barh(データ列x, データ列y, color='lightpink')
カラムの相乗平均を求める	scipy.stats.gmean(df['列A'])
折れ線グラフをコーンズシルク色を用いて描画する	plt.plot(データ列x, データ列y, color='cornsilk')
ヒストグラムを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
散布図に四角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='s')
スクリプトファイルと同じディレクトリのファイルのパスを求める	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
K最近傍法として回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
rgbの右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
イテラブルを配列にする	np.array(iterable)
リストとリストの散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
カラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategray')
ティール色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
線グラフの色をパレットトルコイズにする	plt.plot(データ列x, データ列y, color='paleturquoise')
棒グラフをライトサーモン色を使って描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
グリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
黄色い線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか存在するか調べる	s.count(sub, start, end)
リストとリストについて散布図を描いて、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
データシリーズの中に文字列と文字列がいくつあるか調べる	ds.isin([value, value2]).sum()
グラフに短い説明を追記する	plt.legend(['凡例A', '凡例B'])
散布図を大バツ印で描画する	plt.scatter(データ列x, データ列y, marker='X')
文字列が全てアルファベット	s.isalpha()
横棒グラフをフクシア色を用いて描画する	plt.barh(データ列x, データ列y, color='fuchsia')
option: バリーウッドを用いる	color = 'burlywood'
改行付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: ブルーバイオレットに色を設定する	color = 'blueviolet'
双方向キューが空か調べる	len(deq) == 0
option: グラフのラインスタイルを実線に設定する	linestyle = 'solid'
多次元データを特異値分解で淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
ダークオリーブグリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
折れ線グラフのマーカーを大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
浮動小数点数を整数にする	int(x)
データフレームの一部のカラムにおいてどの値が最も出現するか見る	df[['列A', '列B']].mode()
TSVファイルでデータフレームを出力する	df.to_csv('file.tsv', sep='\t')
耐火レンガ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
データフレームのあるカラムの不偏標準偏差	df['列A'].std()
スカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
rgbの星マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図をシスル色として描画する	plt.scatter(データ列x, データ列y, color='thistle')
部分文字列で文字列を二分し、先頭の文字列を使う	s.partition(sub)[0]
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるかカウントする	s.count(sub, start, end)
二つの変数をスラッシュで区切ってプリントする	print(value, value2, sep='/')
ヒストグラムの色をアイボリーに変更する	plt.hist(データ列, color='ivory')
シーケンスを文字列に変換して、タブで連結する	'\t'.join(map(str, iterable))
ミッドナイトブルー色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
半透明の点線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
文字列はリストの要素でないか調べる	element not in aList
データフレームの中の列をビン数nとしてビニングする	pd.cut(df[col], n)
数値をマゼンタで表示できる文字列に変換する	f'\033[35m{value}\033[0m'
option: ピーチパフを使用する	color = 'peachpuff'
回帰分析をロバスト推定でする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
列をビン数nで分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
列からひとつランダムに選ぶ	random.choice(iterable)
自然数個のものからk個取り出した場合の並べ方の総数を求める	math.perm(n, k)
上三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
数列とリストの散布図に▼マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
パープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
正規表現で文字列を分ける	re.split(pattern, s)
棒グラフをライトグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
データシリーズの空文字を未入力値に変換し、ドロップする	ds.replace('', np.nan).dropna()
一度にデータフレームの列の名前を置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
淡いピンク色色でヒストグラムを描画する	plt.hist(データ列, color='lightpink')
点線にヒストグラムの線の種類をセットする	plt.hist(データ列, linestyle='dotted')
シーケンスと列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
折れ線グラフの色を黄緑に設定する	plt.plot(データ列x, データ列y, color='chartreuse')
文字列内にひとつでも空白があるかどうか調べる	any(c.isspace() for c in s)
日付時刻データにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
データフレームのカラムの第一四分位数	df['列A'].quantile(0.25)
実数の双曲線正弦の逆数を求める	math.asinh(x)
文字列に列を変換して、カンマで連結する	','.join(map(str, iterable))
有理数モジュールをインポートする	import fractions
カウンタ同士で和集合	aCounter | aCounter2
全要素が初期値の行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
左三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
xの小数点以下'1'桁までプリントする	print(':.1f'.format(x))
option: フォントの色を暗い赤に設定する	color = 'darkred'
タプルを昇順にソートする	sorted(aTuple, reverse=True)
データフレームのある列をValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
リストのオブジェクトが最初に見つかる位置を使う	aList.index(element)
ふたつのカラムを組み合わせてグループ化し、最小値を計算する	df.groupby(['列A', '列B'], as_index=False).min()
平均値でデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(df['列A'].mean())
ヒストグラムの色をダークオレンジに変更する	plt.hist(データ列, color='darkorange')
データフレームの中に文字列と日付データがあるかどうかテストする	df.isin([value, value2])
真紅色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
データフレームをダミー変数に変換する	pd.get_dummies(df)
文字列がカタカナ	('ァ' <= ch <= 'ン')
option: 先頭の行をヘッダに減らす	header = 0
綺麗なグラフを使う	import seaborn as sns
option: フォントの色をグリーンイエローに設定する	color = 'greenyellow'
イエローグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='yellowgreen')
配列をビニングする	pd.cut(aArray, aList)
ヒストグラムの線種を点線に設定する	plt.hist(データ列, linestyle='dotted')
ダークゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
折れ線グラフの四角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
文字列をユニコード列に変換する	[ord(ch) for ch in s]
小数点数以下の最大の整数	math.floor(x)
イエローグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
最後の部分文字列で文字列を二つに区切って、前半の文字列を使う	s.rpartition(sub)[0]
散布図の印を左三角にする	plt.scatter(データ列x, データ列y, marker='<')
黒い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='k')
実線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
二つの列によってデータフレームをグループ分けしてグループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
行列の標準偏差	np.std(aArray)
option: グラフの色をオリーブに変更する	color = 'olive'
option: 耐火レンガ色を使用する	color = 'firebrick'
リストとリストの散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの色をレベッカパープルに指定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
縦棒グラフをアイボリー色として描画する	plt.bar(データ列x, データ列y, color='ivory')
リストとリストについて散布図を描画して文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
ベクトルの要素ごとの最大公約数	np.gcd(aArray, aArray2)
option: どの行もカラムの名前に設定しない	header = None
全ての句点文字	string.punctuation
ファイルをSJISとして書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
イテラブルに列を続けたイテラブル	itertools.chain(iterable, iterable2)
データフレームの最後5行を取り出す	df.tail(5)
配列の列ごとの平均値を求める	np.mean(aArray, axis=0)
option: パパイヤウィップ色を用いる	color = 'papayawhip'
折れ線グラフのバツ印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームのあるカラムの統計量	df['列A'].describe()
配列を中央値で分割する	pd.qcut(aArray, 2)
データフレームの指定した列の中に文字列と文字列がある	df['列A'].isin([value, value2])
散布図をライトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightblue')
折れ線グラフに赤い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
スプリンググリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
縦棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
縦棒グラフをプロットして、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
データシリーズの中に含まれると文字列の合計を求める	ds.isin([value, value2]).sum()
左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<')
データフレームを縦に結合する	pd.concat([df, df2], axis=0)
散布図をダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D')
回帰分析をランダムフォレストで行う	model = sklearn.ensemble.RandomForestRegressor()
データフレームの指定したカラムの中にいくつ文字列が存在するか数える	df['列A'].isin([value]).sum()
データフレームのヒストグラムを縦横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
option: ダークターコイズ色を用いる	color = 'darkturquoise'
ベクトル間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
データフレームを小数点以下n桁で四捨五入する	df.round(n)
アンティークホワイト色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
year年month月day日hour時minute分をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
行列の行ごとの合計値	np.sum(aArray, axis=1)
配列の変遷を赤い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
リストとリストについて散布図を描画し、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
n個に列を分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
ファイルを読み込みモードで開く]	open(filepath, mode='r')
文字列がタプルの要素でないかどうか	element not in aTuple
データフレームの選択したカラムを10の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-1).astype(int)
平方根を求める	math.sqrt(x)
option: フォントの色をオリベドラブに設定する	color = 'olivedrab'
イテラブルを折れ線グラフとして可視化する	plt.plot(データ列x, データ列y)
データフレームの最初5行	df.head(5)
データフレームが重複している	df.duplicated()
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
配列と配列についての散布図にrgbの星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
グラフのグリッドを暗くする	sns.set(style='darkgrid')
文字コードを文字にする	chr(unicode)
横棒グラフの色を深紅にする	plt.barh(データ列x, データ列y, color='crimson')
データ列を折れ線グラフで描画する	plt.plot(データ列x, データ列y)
折れ線グラフの下三角印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの選択したカラムの標本標準偏差を算出する	df[['列A', '列B']].std(ddof=1)
イテラブルのイミュータブルな集合を使う	frozenset(iterable)
データフレームのn行以降を抽出する	df[n:]
ヒストグラムを黄緑色を用いて描画する	plt.hist(データ列, color='chartreuse')
データフレームの一部の列の値をValueMapで一度に置き換える	df[['列A', '列B']].replace(ValueMap)
縦棒グラフをブランチドアーモンド色を用いて描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
ブルーバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
データフレームの選択したカラムの欠損値を最小値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
2つの配列を箱ひげ図にする	plt.boxplot([データ列, データ列])
行列の行ごとの分散を計算する	np.var(aArray, axis=1)
本日は何曜日か知る	datetime.datetime.today().weekday()
データシリーズを百の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
赤い▽マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームの欠損値を前の行の値に指定する	df.fillna(method='ffill')
データシリーズを整数に丸める	ds.round()
文字列内にアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
データフレームの一部の列の欠損値を最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
データシリーズの中の未入力値の合計を求める	ds.isna().sum()
option: 赤を使用する	color = 'red'
複数行対応として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
サーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
3つの文字列を順に出力する	print(value, value2, value3)
文字列の左端を使う	s[0]
ホットピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
横棒グラフをライトゴールドロディイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
二変数の最小値を求める	min(x, y)
折れ線グラフの印をバツにする	plt.plot(データ列x, データ列y, marker='x')
集合から別の集合との共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
option: オールドレースを用いる	color = 'oldlace'
データフレームをグループ化し、ある列に対し個数を計算する	df.groupby('列A')['列B'].count()
マッピングをカウンタにする	collections.Counter(aDict)
ビスク色を用いてヒストグラムを描画する	plt.hist(データ列, color='bisque')
コマンドライン引数を列挙する	sys.argv
棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
二つの列を組み合わせてグループ化し、合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
データフレームの選択した列の分位数	df[['列A', '列B']].quantile(パーセント/100)
度数分布図を描画し合計を1にする	plt.hist(データ列, density=True)
水色で文字列をプリントする	print(f'\033[36m{value}\033[0m')
横棒グラフを紺碧色を用いて描画する	plt.barh(データ列x, データ列y, color='azure')
明日の日付を使う	datetime.date.today() + datetime.timedelta(days=1)
データフレームの複数のカラムをドロップし、みる	df.drop(['列A', '列B'], axis=1)
データフレームの２つの列を並べてボックスチャートで図示する	plt.boxplot([df['カラム'], df['カラム']])
棒グラフをカーキ色として描画する	plt.bar(データ列x, データ列y, color='khaki')
ふたつの集合の交わり	aSet.intersection(aSet2)
ヒストグラムをリネン色を使って描画する	plt.hist(データ列, color='linen')
データ列の各値の出現回数	ds.value_counts()
データフレームの列を折れ線グラフで作図する	plt.plot(df[column], df[column])
ファイルを開いて]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
文字列がタプルの要素でない	element not in aTuple
文字化けしないようにエクセルファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
乱数の配列	np.random.random(N)
バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
散布図を丸マーカーでプロットする	plt.plot(データ列x, データ列y, marker='o')
データフレームの一部の列の平均	df[['列A', '列B']].mean()
option: タブを分割記号で用いる	sep = '\t'
データフレームの最初10行を抽出する	df.head(10)
半透明の点線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ペールグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='palegreen')
文字列をシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
黒い下三角マーカーをイテラブルとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
青い一点鎖線を用いてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
二つの変数を文字列で区切ってプリントする	print(value, value2, sep=s)
ヒストグラムを真紅色で描画する	plt.hist(データ列, color='crimson')
データ列を書式としてタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
日付データが日付データより前	aDate < aDate2
折れ線グラフの色をスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='springgreen')
指定したカラムがどの程度、分散しているか見る	df['列A'].var()
折れ線グラフを黄色色を用いて描画する	plt.plot(データ列x, データ列y, color='yellow')
散布図をサンディーブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
ティール色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
折れ線グラフの色をミディアムパープルに変更する	plt.plot(データ列x, データ列y, color='mediumpurple')
option: 論理値型を使う	dtype = np.int32
散布図の右三角印を青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
リストを出力する	print(value)
option: フォレストグリーンを使用する	color = 'forestgreen'
色差別なく色テーマをグラフの描画で使う	sns.set(pallete='colorblind')
データフレームの選択した列の欠損値を前の行の値で置換する	df[['列A', '列B']].fillna(method='ffill')
option: グラフの色をスラグレーに指定する	color = 'slategray'
option: 線のスタイルを実線に指定する	linestyle = 'solid'
散布図をゲインズボロ色を用いて描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
ファイルパスを書き込みモードで開く]	open(filepath, mode='w')
配列の尖度	scipy.stats.kurtosis(配列, bias=False)
ピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
折れ線グラフの下三角印の色を設定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
折れ線グラフをアンティークホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
横棒グラフをミディアムパープル色として描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
トマト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
データフレームから指定した名前リストの列を抽出する	df[columns]
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()
横棒グラフをミディアムアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
マッピングをチェーンマップに変換する	collections.ChainMap(aDict)
カウンタからゼロカウントを取り出す	+aCounter
リストをn回連結する	aList * n
データフレームのあるカラムの欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
リストを引数として展開してプリントする	print(*aList, sep=',')
真紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
黒い大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
青い実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
変数を紫色でプリントできる文字列にする	f'\033[35m{value}\033[0m'
線グラフの色をアリスブルーに指定する	plt.plot(データ列x, データ列y, color='aliceblue')
整数nを8進文字列に変換する	oct(n)[2:]
棒グラフをシルバー色として描画する	plt.bar(データ列x, データ列y, color='silver')
一方に含まれ他方に含まれない集合を計算する	aSet.difference(aSet2)
filepathにディレクトリを変更する	os.chdir(os.dirname(filepath))
リストと数列についてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: フォントの色をホワイトスモークに指定する	color = 'whitesmoke'
0からN未満までのベクトルを作る	np.arange(N)
データフレームの選択したカラムを万の位で四捨五入する	df[['列A', '列B']].round(-4)
リストを等量で分割数nとしてビニングする	pd.qcut(aList, n)
タイタニックのデータセットからデータフレームを読み込む	df = sns.load_dataset('titanic')
ある列の値がxに等しく別の列の値がyに等しい行を選択する	df[(df['列A'] == x) & (df['列B'] == y)]
現在の曜日を整数で求める	datetime.datetime.today().weekday()
日付時刻データの年数を使う	aDatetime.year
option: グラフの色をディムグレーに指定する	color = 'dimgrey'
オブジェクトは浮動小数点数クラス	isinstance(obj, float)
option: マゼンタを使う	color = 'magenta'
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
あるカラムのカテゴリ毎の最小値	df.groupby('列A').min()
値∈セット	element in aSet
ヒストグラムをホワイト色を用いて描画する	plt.hist(データ列, color='white')
表計算ファイルからデータフレームを読み込む	pd.read_excel('file.xlsx')
折れ線プロットにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
ひとつでも非小文字が文字列中に含まれるか	any(not c.islower() for c in s)
データフレームの指定したカラムの中に含まれる文字列と文字列の合計を数える	df['列A'].isin([value, value2]).sum()
指定したカラムの中央値	df['列A'].median()
データシリーズのNaNを中央値で置換する	ds.fillna(ds.median())
列をイミュータブルなセットに変換する	frozenset(iterable)
Pythonパスの一覧を知る	sys.path
option: シスル色を用いる	color = 'thistle'
集合の補集合を求める	aSet.difference(aSet2)
赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
ベクトル間のユークリッド距離	math.dist(point, point2)
折れ線グラフの色をドジャーブルーにセットする	plt.plot(データ列x, データ列y, color='dodgerblue')
データフレームの未入力値を直後の値に設定する	df.fillna(method='bfill')
最大値と最小値としてデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: 丸印を用いる	marker = 'o'
黒い左三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
赤い左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
線グラフをオーキッド色として描画する	plt.plot(データ列x, データ列y, color='orchid')
データフレームの中の列をビン数nとしてビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
ValueMapで一度にデータシリーズの値を置き換える	ds.replace(ValueMap)
2つのカウンタの共通する要素	aCounter & aCounter2
データフレームのあるカラムの要約統計量を求める	df['列A'].describe()
文字列の先頭の余分な空白を取り除く	s.lstrip()
アイリスのデータセットをロードする	df = sns.load_dataset('iris')
文字列が全てアスキー文字かどうか調べる	s.isascii()
散布図をフローラルホワイト色を使って描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
双方向キュー中の値のインデックス	deq.index(element)
環境の名前を知る	sys.platform
最大値・最小値で乱数を生成する	random.randint(最小値, 最大値)
文字列内に小文字が含まれるか	any(c.islower() for c in s)
プロットにx=0の破線を設定する	plt.axvline(x=0, linestyle='dashed')
文字列を改行で分割し文字列リストに変換する	s.splitlines()
文字列を特殊文字も含め小文字にする	s.casefold()
辞書に辞書の値を更新する	aDict.update(aDict2)
折れ線グラフの色をペルーに変更する	plt.plot(データ列x, データ列y, color='peru')
3自然数のGCD	math.gcd(n, n2, n3)
ファイルをUTF8で書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
データフレームの選択したカラムのSkewnessを計算する	df[['列A', '列B']].skew()
折れ線グラフに丸マーカーを加える	plt.plot(データ列x, データ列y, marker='o')
イテラブルと列をチェインする	itertools.chain(iterable, iterable2)
nとn2の和を計算する	n + n2
option: ダークスラテグレーに色を設定する	color = 'darkslategray'
棒プロットの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
ティール色として線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
左三角マーカーを使用し、散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
オブジェクトのバイトサイズを確認する	sys.getsizeof(obj)
折れ線グラフの色をシアンに変更する	plt.plot(データ列x, データ列y, color='cyan')
折れ線グラフの丸印の太さを設定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
プロット中のフォントをセットする	sns.set(font=フォント名)
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
スノー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
双方向キューのn番目に値を差し込む	deq.insert(n, element)
散布図をスラグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slategrey')
折れ線グラフの印を右三角印にする	plt.plot(データ列x, データ列y, marker='>')
リストを黒色で表示できる文字列にする	f'\033[30m{value}\033[0m'
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
option: ナバホホワイトを使う	color = 'navajowhite'
xが真	bool(x)
最初の要素をデックから取り除く	deq.remove(element)
カウンタを高頻度な方から列挙する	aCounter.most_common()
option: フォントの色を真紅に設定する	color = 'crimson'
ディムグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
x座標の目盛りの値を変更する	plt.xticks(目盛りの値リスト)
パウダーブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
グラフの全般的にカラーテーマを淡くする	sns.set(pallete='muted')
一点鎖線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
アルファベットの大文字を全て使う	string.ascii_uppercase
シルバーにヒストグラムの色を設定する	plt.hist(データ列, color='silver')
線グラフをデピンク色として描画する	plt.plot(データ列x, データ列y, color='deeppink')
指定したカラムの欠損値を最小値で埋める	df['列A'].fillna(df['列A'].min())
ダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
ライム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
散布図にポイント印を使う	plt.scatter(データ列x, データ列y, marker='.')
データフレームを関数の値でグループ分けして、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
データシリーズの欠損値を50パーセンタイルに設定する	ds.fillna(ds.median())
表データのあるカラムのタイムゾーンを設定する	df['列A'].tz_convert('Asia/Tokyo')
折れ線グラフに青い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームをある列ごとにグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
スタックのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
棒グラフをプラム色として描画する	plt.bar(データ列x, データ列y, color='plum')
option: ライトグリーンに色を設定する	color = 'lightseagreen'
折れ線グラフを一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列内にひとつでもアスキー文字が含まれる	any(c.isascii() for c in s)
変数を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
区切りによって文字列を分割し、、列挙する	s.split(sep)
データラベルの場所を指定する	plt.legend(loc=(x, y))
ファイルのフォルダ名を見る	os.path.dirname(filepath)
散布図を黒い星マーカーで描く	plt.plot(データ列x, データ列y, marker='*', c='k')
散布図に丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o')
データフレームのある列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
日付データをISO書式の文字列にする	aDate.isoformat()
赤いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
コーンズシルク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
グラフにy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
データフレームを表示するとき表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
インディゴ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
データフレームの中に含まれると日付データの合計を数える	df.isin([value, value2]).sum()
文字列中にひとつでも非アスキー文字が含まれるか	any(not c.isascii() for c in s)
タイムスタンプデータをn日前に戻す	aDatetime - datetime.timedelta(days=n)
折れ線グラフを赤い点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
配列と数列の散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
縦方向に複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
'A'カラムの値がxに等しい行を取り出す	df[df['列A'] == x]
実数を実数で割って、小数点以下を切り捨てる	x // y
要素は集合の要素でないか	element not in aSet
組の先頭の要素を求める	aTuple[0]
線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
ふたつの集合が集合と交わりを持たないかどうか調べる	aSet.isdisjoint(aSet2)
暗い赤色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームのカラムをにバイオリン図として描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
ファイルを文字コードtextで開く]	open(filepath, encoding=text)
ヒストグラムの色をペルーに指定する	plt.hist(データ列, color='peru')
本日をISO書式の文字列に変換する	datetime.datetime.today().isoformat()
箱ひげ図にラベルをつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
双方向キューに要素をエンキューする	deq.appendleft(element)
線グラフのラインスタイルを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: ライトブルーを用いる	color = 'lightblue'
下線付きで値を出力する	print(f'\033[4m{value}\033[0m')
線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
等差数列から整数乱数を求める	random.randrange(start, end, step)
カウンタから辞書を減らす	aCounter.subtract(aDict)
本日は何日か知る	datetime.datetime.today().day
文字列の開始位置からと終了位置までの間に部分文字列が含まれない	s.find(sub, start, end) == -1
リストから文字列と等しい最初の要素を除く	aList.remove(element)
スタックの先頭の要素	deq[0]
ロバスト推定としてクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
セットから任意の要素を取り除く	aSet.pop()
棒グラフをダークマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
数値の変数の解を方程式として算出する	sympy.solve(e, z)
散布図の四角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
データフレームをグループ化し、ある列に対し最小値を算出する	df.groupby('列A')['列B'].min()
データフレームを表示するとき、最大行数をnに設定する	pd.set_option('display.max_rows', n)
2つのデータフレームを合体させる	pd.concat([df, df2])
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
グリッドの線種を破線に変更する	plt.grid(linestyle='dashed')
0からnの範囲で	range(n)
文字列をバイト配列にする	bytearray(s)
ホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
四角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
ポイントマーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
青い破線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
集合の要素数	len(aSet)
指定した列を万の位で四捨五入する	df['列A'].round(-4)
数値の変数についてのn階微分を計算する	sympy.diff(e, z, n)
バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x')
三つの変数を順にプリントする	print(value, value2, value3)
ディレクトリ	os.getcwd()
縦棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
日付時刻データの曜日を整数で見る	aDatetime.weekday()
正弦の逆数	math.asin(x)
あるカラムのカテゴリごとの個数	df.groupby('列A').count()
日付を表現した文字列をdatetime64型に変換する	pd.to_datetime(日付を表現した文字列)
勾配ブースティング回帰木を用意する	model = sklearn.ensemble.GradientBoostingRegressor()
option: グラフの色をゲインズボロに変更する	color = 'gainsboro'
データフレームを表計算ファイルファイルで保存する	df.to_excel('file.xlsx')
マップの値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
折れ線グラフの大バツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
オブジェクトがリストの要素でないか	element not in aList
option: 回帰木の最大深さを変更する	maxdepth = n
データ列を横棒プロットにする	plt.barh(ラベル列, データ列)
縦軸の目盛を非表示にする	plt.yticks([])
プロットを暗くする	sns.set(pallete='dark')
データフレームの中に日付データがあるか調べる	df.isin([value])
線形モデルのバイアスを使う	model.intercept_
タプル内の要素が少なくとも一つ真か調べる	any(aTuple)
指定した列のカテゴリで集計し、各分散を算出する	df.groupby('列A').var()
ヒストグラムの色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
replにまとめて正規表現でデータフレームを置き換える	df.replace(pattern, repl, regex=True)
折れ線グラフの色をブランチドアーモンドに変更する	plt.plot(データ列x, データ列y, color='blanchedalmond')
100行をデータフレームからランダムに取り出す	df.sample(100)
棒グラフをダークオレンジ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkorange')
rgbの左三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: 色を深紅に設定する	color = 'crimson'
散布図に赤い左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列を中央寄せにする	s.center(文字列幅)
今日の曜日を整数で使う	datetime.datetime.today().weekday()
option: グラフの色をローングリーンにセットする	color = 'lawngreen'
色付きの破線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
実数の常用対数を求める	math.log10(x)
複数のデータフレームを縦に結合する	pd.concat([df, df2, df3], axis=1)
パウダーブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
nとn2の値を足してnにする	n += n2
Excelファイルから複数のシートを読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
折れ線グラフの印を四角にする	plt.plot(データ列x, データ列y, marker='s')
y軸だけ目盛り線	plt.grid(axis='y')
棒グラフをサンディーブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='sandybrown')
サポートベクター回帰モデルを作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
棒グラフをパールバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='palevioletred')
カーキ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
二つの行列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
nの各桁の総和を求める	sum(map(int, str(n)))
リストと配列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
日付時刻データが木曜日か	aDatetime.weekday() == 3
データフレーム中の未入力値を除く	df.dropna(inplace=True)
線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
折れ線グラフに青い▲印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ダークスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
option: フォントの色をカーキに変更する	color = 'khaki'
データシリーズの中にいくつ文字列が存在するか数える	ds.isin([value]).sum()
カウンタからゼロカウントを削除する	+aCounter
ファイル名がCSVファイルか判定する	filename.endswith('.csv')
ダークシアグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
実行結果を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
日付データにn日を加算する	aDate + datetime.timedelta(days=n)
ヒストグラムの色を暗い赤に変更する	plt.hist(データ列, color='darkred')
リネン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
ある列のカテゴリごとの合計を求める	df.groupby('列A').sum()
オプションで、標準出力を使用する	file = sys.stdout
イテラブルと配列について散布図を描いて、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
集合を更新不能に変換する	frozenset(aSet)
データフレームのn行目を取り出す	df.loc[n]
データフレームの指定した列は正規分布からどの程度、尖っているか見る	df['列A'].skew()
日付時刻データをISO8601形式の文字列にする	aDatetime.isoformat()
指定の列に重複があれば、ドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
イテラブルの推移を赤い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
タイムスタンプデータが日付時刻データより後ろか調べる	aDatetime > aDatetime2
線グラフを色付きの一点鎖線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
散布図をサンディーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
昇順にインデックスによってデータフレーム全体をソートする	df.sort_index(ascending=True)
option: 淡い茶色を使う	color = 'tan'
シーケンスをカウントしてカウンタから引く	aCounter.subtract(iterable)
列を両端キューに変換する	collections.deque(iterable)
２つの列としてグループ化し、最小値を計算する	df.groupby(['列A', '列B'], as_index=False).min()
変数がマイナス無限大に近づくときの数式の極限値を算出する	sympy.limit(e, z, -oo)
データフレームを２つの列でグループ化し、記述統計量を求める	df.groupby(['列A', '列B']).describe()
データフレームを２つの列にグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
組の末尾	aTuple[-1]
データフレームの重複した行だけを抽出する	df[df.duplicated(keep=False)]
青い実線としてデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
折れ線グラフの▲マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
カテゴリで色分けして、データフレームの全カラムの散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
データフレームの尖り	df.skew()
散布図のダイアモンドマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
双方向キュー中の要素のインデックスを使う	deq.index(element)
縦棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
データフレームの最初n行	df.head(n)
横棒グラフをミスティローズ色として描画する	plt.barh(データ列x, データ列y, color='mistyrose')
グラフで利用可能な色名の一覧	matplotlib.colors.cnames
option: 欠損値を先頭に来るようにする	na_position = 'first'
△マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategrey')
線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
散布図の菱形印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
ロイヤルブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
逆正接	math.atan(x)
スクリプトファイルのパス	os.path.abspath(__file__)
項目名が辞書に存在しない場合、要素を追加する	aDict.setdefault(key, element)
特異値分解を使って濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
データフレームの列間の相関行列を求める	df.corr()
エポック秒から日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
縦棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
散布図の色をティールにする	plt.scatter(データ列x, データ列y, color='teal')
ビン数nでデータ列をビン分割する	pd.cut(ds, n)
グラフに使う横軸の名前を設定する	plt.xlabel('x軸ラベル')
option: フォントの色をライトグリーンに変更する	color = 'lightgreen'
データフレームの指定した列の名前一覧の列のみ抽出する	df[columns]
パールゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
散布図をオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='orange')
データフレームの欠損値を平均値に指定する	df.fillna(df.mean())
ピアソンの相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
ある列毎の合計を求める	df.groupby('列A').sum()
プログラムの実行をここで止める	sys.exit()
集合から別の集合の要素を全て除去する	aSet.difference_update(aSet2)
貝殻色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
両端キューのn番目を求める	deq[n]
偽陰性を避けたい指標を使用する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
タイムスタンプデータからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
データ列とデータ列の散布図に赤いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームのある列を最初のカテゴリーを除外してワンホット・ベクトルにする	pd.get_dummies(df['列A'], drop_first=True)
折れ線グラフの色をフローラルホワイトに変更する	plt.plot(データ列x, データ列y, color='floralwhite')
実数が整数か確認する	x.is_integer()
文字列リストにイテラブルを変換して、タブで連結する	'\t'.join(map(str, iterable))
本日は何月か知る	datetime.datetime.today().month
整数が負の数か調べる	x < 0
ペアリストpairsからカウンタを構築する	collections.Counter(dict(pairs))
線グラフの色をナバホホワイトに指定する	plt.plot(データ列x, データ列y, color='navajowhite')
データシリーズを十の位で丸めて、整数にする	ds.round(-1).astype(int)
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgray')
タプルをカウンタにする	collections.Counter(aDict)
青いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
ベクトル間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
nからn2を減算する	n - n2
データシリーズのメディアン	ds.median()
折れ線グラフのポイントマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
nプラスn2を算出する	n + n2
縦棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
グラフをスライドに変更する	sns.set(context='talk')
ValueMapで一度にデータフレームの一部のカラムの値を置き換える	df[['列A', '列B']].replace(ValueMap)
全要素を０で初期化した行列を作成する	np.zeros(行数, 列数)
ゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='goldenrod')
線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
カウンタのユニオン演算する	aCounter | aCounter2
ブランチドアーモンド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
数値をマゼンタでプリントできる文字列にする	f'\033[35m{value}\033[0m'
散布図にrgbの四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: グラフの色をパールゴールデンロッドに変更する	color = 'palegoldenrod'
プロット中で日本語を使えるようにする	sns.set(font='IPAexGothic')
散布図に丸印を加える	plt.scatter(データ列x, データ列y, marker='o')
ファイルから1バイト、読む	f.read(1)
散布図をrgbの左三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: ベージュに色を設定する	color = 'beige'
散布図に青い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
プロット中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
黒い▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
アクアマリン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
イテラブルと配列についての散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
オプションで出力先を標準出力に設定する	file = sys.stdout
データフレームの選択したカラムの中に文字列と文字列がいくつあるかカウントする	df[['列A', '列B']].isin([value, value2]).sum()
option: スラッシュをセパレータで用いる	sep = '/'
ネイピア数を使う	math.e
リストをリバースする	reversed(aList)
ライムグリーン色でヒストグラムを描画する	plt.hist(データ列, color='limegreen')
列からユニークな値を抽出し、リスト化する	ds.unique().tolist()
カウンタを低頻出な方から列挙する	aCounter.most_common()[::-1]
データフレームの指定した列を丸めて、整数型にする	df['列A'].round().astype(int)
ランダム性を強化したランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
散布図の色をホワイトにする	plt.scatter(データ列x, データ列y, color='white')
rgbに横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
実数を整数で割った余り	x % y
箱髭図を描いて平均を加える	plt.boxplot(データ列, showmeans=True)
数列とリストの散布図に赤い三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
n個に等間隔で配列をビニングする	pd.cut(aArray, n)
縦棒グラフをカーキ色として描画する	plt.bar(データ列x, データ列y, color='khaki')
折れ線グラフをミディアムターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの色をパールゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='palegoldenrod')
縦棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
折れ線グラフをラベンダーブラッシュ色を使って描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
指定した列によってデータフレームを並べ直す	df.sort_values(by='列A')
データフレームの指定したカラムのNaNを最大値に変更する	df['列A'].fillna(df['列A'].max())
ビン数nとして配列をビン分割する	pd.cut(aArray, n)
縦棒グラフを描画して棒の幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
データフレームの指定したカラムの値は欠損値かどうか調べる	df['列A'].isna()
文字列内に大文字が含まれる	any(c.isupper() for c in s)
色付きの一点鎖線を使ってデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
nがn2の倍数でないかどうか調べる	n % n2 != 0
データフレームのデータ型一覧	df.dtypes
辞書の値も複製する	{k: copy.copy(v) for k, v in aDict.items()}
rgbの四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの一部の列の不偏標準偏差	df[['列A', '列B']].std()
ブランチドアーモンド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
散布図の色をダークレッドにする	plt.scatter(データ列x, データ列y, color='darkred')
チョコレート色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
昇順にリストの要素をソートする	sorted(aList, reverse=True)
横棒プロットを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
配列とリストの散布図をプロットして、バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
スタックのn番目に要素を挿入する	deq.insert(n, element)
文字列がひらがなか調べる	('ぁ' <= ch <= 'ん')
小数点数のハイパボリック・タンジェントの逆数	math.atanh(x)
ヒストグラムの色をミディアムバイオレットレッドに指定する	plt.hist(データ列, color='mediumvioletred')
棒グラフをミディアムターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: アクアを使用する	color = 'aqua'
線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームを２つの列の値によってグループ化する	df.groupby(['列A', '列B'])
リストと配列の散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
ベクトルの差	aArray - aArray2
浮動小数点数に実数を掛ける	x * y
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='gray')
year年month月day日をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day)
ヒストグラムをスラグレー色を用いて描画する	plt.hist(データ列, color='slategrey')
シエナ色でヒストグラムを描画する	plt.hist(データ列, color='sienna')
文字列全体を大文字・小文字を無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: リネンにグラフの色を変更する	color = 'linen'
ダークゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
option: ダークグレー色を用いる	color = 'darkgrey'
日付時刻データを数値に変換する	aDatetime.timestamp()
カウンタ間で∪演算する	aCounter | aCounter2
セットが空でないかどうか調べる	len(aSet) != 0
エラーを無視して文字列をバイト列にする	s.encode(errors='ignore')
リストと配列についての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフの色をトマトに指定する	plt.plot(データ列x, データ列y, color='tomato')
nを八進数文字列に変換する	oct(n)[2:]
ヒストグラムをロージーブラウン色として描画する	plt.hist(データ列, color='rosybrown')
浮動小数点数のk進対数を求める	math.log(x, k)
組の先頭を除く	aTuple[1:]
文字列の開始位置以降に部分文字列が含まれる	s.find(sub, start) != -1
2つのデータフレームを縦方向に一つにする	pd.concat([df, df2], axis=0)
option: 線のスタイルを点線に指定する	linestyle = 'dotted'
文字列はタプルに含まれないか調べる	element not in aTuple
option: フォントの色を耐火レンガに設定する	color = 'firebrick'
データフレームの最初の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
コマンドの第二引数	sys.argv[1]
stringモジュールをインポートする	import string
整数nの8進文字列を使う	oct(n)[2:]
ダークオリーブグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
等差数列から整数乱数を発生させる	random.randrange(start, end, step)
線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
上三角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='^')
ファイルから拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
n個の整数リスト	list(range(n))
箱ひげ図を描画し、、平均線を加える	plt.boxplot(データ列, meanline=True)
線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
赤い点線を使って数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフの色をミッドナイトブルーに変更する	plt.plot(データ列x, データ列y, color='midnightblue')
等量で列をビン数nでビン分割する	pd.qcut(ds, n)
数を浮動小数点数で整数除算する	x // y
カラムの最頻値	df['列A'].mode()
option: レベッカパープル色を使用する	color = 'rebeccapurple'
タプルの重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
横棒グラフをピンク色として描画する	plt.barh(データ列x, データ列y, color='pink')
折れ線グラフの色をゲインズボロに指定する	plt.plot(データ列x, データ列y, color='gainsboro')
rgbのポイントマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
多次元データをt分布型確率的近傍埋め込み法でパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
ミッドナイトブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
線グラフをネイビー色を用いて描画する	plt.plot(データ列x, データ列y, color='navy')
キーが辞書上で定義済み	key in aDict
データフレームを並べ直して、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
ファイルから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
整数nはセットのどれかか調べる	n in aSet
option: 濃いシアン色を使う	color = 'darkcyan'
ダイアモンド印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
データフレームをグループ化し、ある列に対し標準偏差を計算する	df.groupby('列A')['列B'].std()
値を緑色にする	f'\033[32m{value}\033[0m'
データ列の散布図を描く	plt.scatter(データ列x, データ列y)
リネンにヒストグラムの色を設定する	plt.hist(データ列, color='linen')
シアン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
文字列を記号にして、変数にする	z = sympy.Symbol(s)
横棒グラフをハニーデュー色として描画する	plt.barh(データ列x, データ列y, color='honeydew')
縦棒グラフを描画してバーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
ダークサーモンにヒストグラムの色をする	plt.hist(データ列, color='darksalmon')
ファイルから1文字読む	f.read(1)
option: グレーに色を設定する	color = 'grey'
データフレームをある列の値でグループ化する	df.groupby('列A')
文字列を全て小文字にする	s.casefold()
タイムスタンプデータをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
ブランチドアーモンド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
オブジェクトは浮動小数点数型	isinstance(obj, float)
折れ線グラフの色をダークブルーに指定する	plt.plot(データ列x, データ列y, color='darkblue')
実測値を回帰モデルの予測値と対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
折れ線グラフの色をライトシアンに指定する	plt.plot(データ列x, データ列y, color='lightcyan')
データフレームを十の位で四捨五入する	df.round(-1)
何か試しに動かしてみる	print('Hello World')
実数を小数点第一位で丸める	round(x, 1)
シーケンスから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
ファイルが存在するかどうか調べる	os.path.exists(filepath)
option: 淡いピンク色色を用いる	color = 'lightpink'
option: グレーにグラフの色を設定する	color = 'grey'
黄色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
option: グラフの色をドジャーブルーに指定する	color = 'dodgerblue'
ペールグリーンにヒストグラムの色をする	plt.hist(データ列, color='palegreen')
指定したカラムの中に日付データが存在するか調べる	df['列A'].isin([value])
横棒グラフをオリーブ色として描画する	plt.barh(データ列x, データ列y, color='olive')
オブジェクトは論理値クラスかどうか	isinstance(obj, bool)
赤い実線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
数列とリストについての散布図にrgbの△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データ列の各データが何回出現するか調べる	ds.value_counts()
オールドレース色として散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
データフレームをグループ化しそれぞれの個数を求める	df.groupby('列A').count()
既存の配列を元にして全要素が0の配列	np.zeros_like(aArray)
折れ線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
ラベンダー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
データフレームの指定した列においてどの値が頻出か確認する	df['列A'].mode()
データシリーズの欠損値をxに指定する	ds.fillna(x)
オーキッド色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
リストと配列について散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
データフレームの選択したカラムの中に文字列と文字列がある	df[['列A', '列B']].isin([value, value2])
代数計算を用いる	import sympy
紺碧色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
２つの整数の最大公約数	math.gcd(n, n2)
option: 欠損値を含める	dropna = True
半透明の破線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
縦棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
現在が月曜日か調べる	datetime.datetime.today().weekday() == 0
サポートベクター分類モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
カウンタを高頻出方からリストとして得る	aCounter.most_common()
箱ひげ図で数列を描画する	plt.boxplot(データ列)
分子n分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
色付きの実線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図のポイント印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
指定したカラムの文字列を未入力値にする	df['列A'].replace(値, np.nan)
nが2で割り切れないか	n % 2 == 1
option: 赤を使う	color = 'red'
折れ線グラフのクロスマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
カテゴリ別で色分けしてデータフレームをにバイオリン図で描画する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データ列と数列について散布図を描画して、ダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストの要素のみプリントする	print(*aList)
重複ありでランダムにn行をデータフレームからサンプリングする	df.sample(n, replace=True)
配列の平均	np.mean(aArray)
行列の合計を求める	np.sum(aArray)
配列と数列についてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
横棒グラフを描いて、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
イテラブルを2回あわせた直積を求める	itertools.product(iterable, repeat=2)
リストを引数として展開して出力する	print(*aList)
乱数で要素を埋めた行列を作る	np.random.random((行数, 列数))
option: △マーカーを使う	marker = '^'
データフレームがどれだけ、正規分布から尖っているか見る	df.skew()
グリーンにヒストグラムの色を変更する	plt.hist(データ列, color='green')
option: 色をロージーブラウンに変更する	color = 'rosybrown'
option: 色をミントクリームに設定する	color = 'mintcream'
折れ線グラフを赤色を用いて描画する	plt.plot(データ列x, データ列y, color='red')
配列と配列についての散布図に凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
ヒストグラムの色をスカイブルーに指定する	plt.hist(データ列, color='skyblue')
グラフで使える色名の一覧を使う	matplotlib.colors.cnames
rgbの右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
プロットの色テーマを指定する	sns.set(pallete=パレット名)
折れ線グラフの色をダークスラテグレーに変更する	plt.plot(データ列x, データ列y, color='darkslategray')
散布図を▽マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='v')
option: ホワイトスモークにフォントの色を変更する	color = 'whitesmoke'
ヒストグラムを描画する	plt.hist(データ列)
option: ライムにグラフの色を設定する	color = 'lime'
option: 文字コードをBOM付きに変更する	encoding = 'utf_8_sig'
データフレームをソートし、、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
option: グラフの色をダークバイオレットに指定する	color = 'darkviolet'
赤い一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ファイルをオープンして]、バイナリストリームを見る	open(filepath, mode='rb')
縦棒グラフをブラウン色として描画する	plt.bar(データ列x, データ列y, color='brown')
折れ線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: 書き込み用に変更する	mode = 'w'
モードでデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
オブジェクトに属性が存在するかどうか調べる	hasattr(obj, プロパティ名)
色名とカラーコードの対応表を求める	matplotlib.colors.cnames
データフレームの指定したカラムの母標準偏差を求める	df['列A'].std(ddof=0)
文字列を全て小文字にする	s.lower()
ライトグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
折れ線グラフの右三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
インデント付きでマッピングを文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
カウンタ同士でインターセクション	aCounter & aCounter2
データフレームを２つの列を用いて昇順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
２つのカウンタの共通する要素	aCounter & aCounter2
散布図をインディゴ色を使って描画する	plt.scatter(データ列x, データ列y, color='indigo')
二つの文字列が同じかどうか調べる	s == s2
棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
year年month月day日hour時minute分を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
散布図を右三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフの三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
データフレームの重複した行だけを選択する	df[df.duplicated(keep=False)]
ヒストグラムをオールドレース色を使って描画する	plt.hist(データ列, color='oldlace')
横棒グラフをシアン色を使って描画する	plt.barh(データ列x, データ列y, color='cyan')
16進数文字列を整数に変換する	int(s, 16)
ヒストグラムをモカシン色として描画する	plt.hist(データ列, color='moccasin')
デピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
モデルの決定係数を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
本日の曜日を整数で求める	datetime.datetime.today().weekday()
棒グラフをインディゴ色を用いて描画する	plt.bar(データ列x, データ列y, color='indigo')
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: 黄緑色を使用する	color = 'chartreuse'
n個分双方向キューのデータを右にローテンションする	deq.rotate(n)
ヒストグラムの色をミディアムブルーに変更する	plt.hist(データ列, color='mediumblue')
シスル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
option: グラフの色をローングリーンに指定する	color = 'lawngreen'
リストとイテラブルの散布図に▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームを表示するとき、表示できる行数をnに変更する	pd.set_option('display.max_rows', n)
Excelファイルのシートをデータフレームとしてロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
マッピングを並べ直してJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
データフレームを小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
x軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
option: グラフの色をシスルに指定する	color = 'thistle'
部分文字列が文字列中に含まれるか調べる	sub in s
データシリーズの文字列を未入力値にする	ds.replace(値, np.nan)
本日のタイムスタンプ	datetime.datetime.now()
ファイルパスをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
option: グラフの色をミッドナイトブルーに変更する	color = 'midnightblue'
データフレームのパーセンタイルを計算する	df.quantile(パーセント/100)
配列を分割する	pd.cut(aArray, aList)
ゴーストホワイト色でヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
option: フォントの色をミスティローズに設定する	color = 'mistyrose'
option: ダークスラテグレーを使用する	color = 'darkslategray'
配列の尖度を計算する	scipy.stats.kurtosis(配列, bias=False)
option: 先頭のカラムを行に設定する	index_col = 0
線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
折れ線グラフの色をダークシアグリーンにする	plt.plot(データ列x, データ列y, color='darkseagreen')
ヒストグラムをミディアムオーキッド色を使って描画する	plt.hist(データ列, color='mediumorchid')
破線としてデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
文字列中の大文字を小文字にする	s.lower()
option: マーカーを左三角に変える	marker = '<'
組を逆順にする	reversed(aTuple)
タプルの平均を求める	sum(aTuple)/len(aTuple)
ヒストグラムをトマト色を使って描画する	plt.hist(データ列, color='tomato')
オブジェクトをイテレータに変換する	iter(obj)
タプルの平均値を求める	sum(aTuple)/len(aTuple)
日付データからn分減算する	aDate - datetime.timedelta(minutes=n)
文字列を最初の部分文字列で分割した場合の前半の文字列	s.partition(sub)[0]
ビン数nで配列を等量でビン分割する	pd.qcut(aArray, n)
データフレームの中にいくつ欠損値があるか求める	df.isna().sum()
データシリーズの中に文字列と日付データがあるか調べる	ds.isin([value, value2])
カラムの25パーセンタイルを求める	df['列A'].quantile(0.25)
第二コマンド引数を確認する	sys.argv[1]
文字列を最初の部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
横棒グラフの色をダークブルーにする	plt.barh(データ列x, データ列y, color='darkblue')
縦棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ディープスカイブルーにヒストグラムの色を変更する	plt.hist(データ列, color='deepskyblue')
ヒストグラムを深紅色で描画する	plt.hist(データ列, color='crimson')
散布図の大バツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
グリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
FIXME:カテゴリーデータを出現頻度順に並べる	df['列A'].value_counts().sort_index().index
option: ナバホホワイトを用いる	color = 'navajowhite'
プロットの用途を画面に設定する	sns.set(context='notebook')
ヒストグラムの色をシルバーに指定する	plt.hist(データ列, color='silver')
カテゴリで色付けして、データフレームをにバイオリン図を使って可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データ列を対数変換する	np.log(データ列)
rgbの▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データ列からユニークな値を抽出し、リスト化する	ds.unique().tolist()
イテラブルの各要素を順に双方向キューの左側につけ加える	deq.extendleft(iterable)
２つのリストから辞書	dict(zip(aList, aList2))
ヒストグラムの色をダークオリーブグリーンに変更する	plt.hist(データ列, color='darkolivegreen')
８ビット整数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=np.int8)
option: ミディアムスレートブルー色を使用する	color = 'mediumslateblue'
ヒストグラムの色をスプリンググリーンに指定する	plt.hist(データ列, color='springgreen')
EUCでファイルをオープンする]	open(filepath, encoding='euc_jp')
変数が0に近づくときの数値の極限値を算出する	sympy.limit(e, z, 0)
文字列を緑色で出力する	print(f'\033[32m{value}\033[0m')
散布図の四角印を赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
散布図をミディアムスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
日付時刻データと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
オブジェクトのプロパティの値を値に変更する	setattr(obj, プロパティ名, 値)
ガウス過程分類モデルを準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: グラフの色を濃いシアンにセットする	color = 'darkcyan'
option: BOM付きを用いる	encoding = 'utf_8_sig'
行列の全要素の値を変更する	aArray[:, :] = 指定の値
棒グラフを暗い赤色として描画する	plt.bar(データ列x, データ列y, color='darkred')
データフレームの相関行列をケンドール順位相関係数を使って求める	df.corr(method='kendall')
xが-9以上9以下かどうか調べる	-9 <= x <= 9
ファイルの絶対パスを見る	os.path.abspath(filepath)
option: ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
日付データにn日を加える	aDate + datetime.timedelta(days=n)
データ列の折れ線グラフを左三角印で描画する	plt.plot(データ列x, データ列y, marker='<')
散布図を赤い▼マーカーで描く	plt.plot(データ列x, データ列y, marker='v', c='r')
両端キューから要素を取り除く	deq.remove(element)
折れ線グラフの左三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
イテラブルとしてカウンタを更新する	aCounter.update(iterable)
折れ線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
数に実数を加算する	x + y
２つのデータフレームを横方向に結合する	pd.concat([df, df2], axis=1)
作画の縦横比を等しくする	plt.axis('equals')
散布図を淡い茶色色で描画する	plt.scatter(データ列x, データ列y, color='tan')
データフレームの欠損値を数値で埋める	df.fillna(x)
▼印を使ってデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
アリスブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
option: ラインスタイルを点線に設定する	linestyle = 'dotted'
ふたつのカラムでグループ化し、最大値を算出する	df.groupby(['列A', '列B'], as_index=False).max()
棒グラフをライトコーラル色として描画する	plt.bar(データ列x, データ列y, color='lightcoral')
ヒストグラムの色をダークブルーにセットする	plt.hist(データ列, color='darkblue')
浮動小数点数が整数	x.is_integer()
棒グラフをコーンズシルク色を使って描画する	plt.bar(データ列x, データ列y, color='cornsilk')
option: ドジャーブルーにグラフの色を変更する	color = 'dodgerblue'
ペルー色でヒストグラムを描画する	plt.hist(データ列, color='peru')
折れ線グラフの色をミディアムターコイズに変更する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データ列のユニークな要素	ds.unique()
グラフの描画でパステル調にカラーパレットを用いる	sns.set(pallete='pastel')
データフレームの全列を散布図でプロット化する	sns.pairplot(df)
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
配列をリストから作る	np.array(aList)
option: グラフの色をペールグリーンに指定する	color = 'palegreen'
線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
データフレームのあるカラムは何月か見る	df['列A'].dt.month
実行時の標準出力の出力先がターミナルかどうか	sys.stdout.isatty()
option: フォントの色をブラウンに指定する	color = 'brown'
縦棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
表データのシェイプを見る	df.shape
散布図の右三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
横棒グラフをライトイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightyellow')
option: コーンフラワーブルーを使う	color = 'cornflowerblue'
n番目のカラムを除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
イテラブルをカウンタにする	collections.Counter(iterable)
オールドレース色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
色付きの破線を用いてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
モデルを説明変数と目的変数を用いて学習する	model.fit(説明変数, 目的変数)
横棒グラフをナバホホワイト色として描画する	plt.barh(データ列x, データ列y, color='navajowhite')
文字列中のひらがなを片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
双方向キューの要素をインプレースに逆順にする	deq.reverse()
リストとリストについての散布図に赤い▽マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
散らばりを作図する	plt.scatter(データ列x, データ列y)
nが1、もしくは2かどうか調べる	n == 1 or n == 2
ファイルをオープンして]追加ストリームを使う	open(filepath, mode='a')
option: バツマーカーを加える	marker = 'x'
散布図をライトゴールドロディイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
ディムグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
データフレームから指定した二つの列を選択する	df[['列A', '列B']]
ヒストグラムの色をピンクに指定する	plt.hist(データ列, color='pink')
データフレームの名前リストで指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの指定したカラムの欠損値をその最頻値で置き換える	df['列A'].fillna(df['列A'].mode().iloc[0])
あるカラムのカテゴリごとの最小値	df.groupby('列A').min()
データフレームの選択したカラムのNaNを最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
option: 色をホワイトスモークにセットする	color = 'whitesmoke'
データ列とイテラブルの散布図を描画して、その大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
シエナにヒストグラムの色を変更する	plt.hist(データ列, color='sienna')
四分位数ごとにデータ列をビン分割する	pd.qcut(ds, 4)
データシリーズは何時か見る	ds.dt.hour
16進数の文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
option: フォントの色をアリスブルーに指定する	color = 'aliceblue'
数値の出力を改行なしに行う	print(value, end='')
辞書のキーの値を得る	aDict[key]
データフレームの指定したカラムの中に存在するの合計を数える	df['列A'].isin([value]).sum()
option: ビスク色を用いる	color = 'bisque'
option: ミスティローズにフォントの色を設定する	color = 'mistyrose'
データフレームの未入力値をxに設定する	df.fillna(x)
option: ミントクリーム色を使用する	color = 'mintcream'
インディアンレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
ゲインズボロ色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
表から一つの列を抽出する	df[['列A']]
十六進文字列をバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
タブで区切って二つの文字列を出力する	print(value, value2, sep='\t')
レモンシフォン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ある列の値ごとの平均値	df.groupby('列A').mean()
ベクトルの累積積	np.cumprod(aArray)
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: インディゴを使う	color = 'indigo'
散布図をライム色として描画する	plt.scatter(データ列x, データ列y, color='lime')
平均値でデータフレームの欠損値を補う	df.fillna(df.mean())
文字列をセパレータを用いて区切って列挙する	s.split(sep)
ヒストグラムの色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
実数のk進対数を求める	math.log(x, k)
動作環境がリナックスか調べる	sys.platform.startswith('linux')
あるカラムの値がx以上、y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
黄色で文字列を表示する	print(f'\033[33m{value}\033[0m')
フォレストグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
散布図を貝殻色として描画する	plt.scatter(データ列x, データ列y, color='seashell')
マッピングをネスト化する	collections.ChainMap(aDict)
ヒストグラムをミスティローズ色を使って描画する	plt.hist(データ列, color='mistyrose')
ヒストグラムでデータフレームのカラムを描く	plt.hist(df[column])
タプルのそれぞれを関数でフィルタする	map(func, iterable)
列の各値の出現数	ds.value_counts()
散布図をアンティークホワイト色として描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
コマンドフラグの状態を知る	sys.flags
双方向キューが空でないかどうか	len(deq) != 0
ライトサーモン色でヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
ゼロ埋めされたブール型のベクトルを作成する	np.zeros(要素数, dtype=np.int32)
bとn2から成るペアを作る	(n, n2)
データフレームの選択したカラムの未入力値をその中央値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
黒い上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
year年を日付にする	datetime.date(year=year, month=1, day=1)
半透明の一点鎖線としてイテラブルの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
option: グラフの色をブランチドアーモンドに指定する	color = 'blanchedalmond'
データフレームから列を一つのみ選択する	df[['列A']]
指定した列で集計し、個数を求める	df.groupby('列A').count()
線を半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
棒グラフをダークカーキ色を使って描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
浮動小数点数のアークサインを算出する	math.asin(x)
文字列を最後の部分文字列によって二つに分ける	s.rpartition(sub)
今日のローカルな日付時刻を求める	datetime.datetime.today()
イテラブル自身の長さnの順列	itertools.permutations(iterable, n)
データフレームの選択したカラムの中に日付データと文字列がいくつ含まれるか求める	df[['列A', '列B']].isin([value, value2]).sum()
カラムの欠損値をxに指定する	df['列A'].fillna(x)
回帰木分析を行う	model = sklearn.tree.DecisionTreeRegressor()
折れ線グラフの▲印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
横軸の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
横棒グラフをハニーデュー色を使って描画する	plt.barh(データ列x, データ列y, color='honeydew')
データフレームの指定したカラムのNaNをその平均値で置き換える	df['列A'].fillna(df['列A'].mean())
データフレームの一部の列を十の位で丸めて整数型にする	df[['列A', '列B']].round(-1).astype(int)
文字列の左端から空白を取り除く	s.lstrip(' ')
円グラフでデータ列の比率を描画する	plt.pie(データ列, startangle=90)
ヒストグラムの色をグリーンに指定する	plt.hist(データ列, color='green')
データフレームの選択したカラムを1000の位で丸める	df[['列A', '列B']].round(-3)
線グラフをスラグレー色を使って描画する	plt.plot(データ列x, データ列y, color='slategray')
本日が木曜日か確認する	datetime.datetime.today().weekday() == 3
ヒストグラムをアクアマリン色として描画する	plt.hist(データ列, color='aquamarine')
折れ線グラフの四角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
option: ライムグリーン色を用いる	color = 'limegreen'
ヒストグラムをライトスレイグレー色を用いて描画する	plt.hist(データ列, color='lightslategray')
カウンタを辞書から準備する	collections.Counter(aDict)
データフレームをある列によって降順に並べる	df.sort_values(by='列A', ascending=False)
大量のデータが正規分布に従うかどうか仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
データフレームをインデックスによって降順で並べ直す	df.sort_index(ascending=False)
線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
縦棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
重複ありでデータフレームからランダムに100行をサンプリングする	df.sample(100, replace=True)
小数点数の指数部を求める	math.frexp(x)[1]
option: グラフの種類を実線に変更する	linestyle = 'solid'
option: ホットピンク色を使用する	color = 'hotpink'
データフレームの選択したカラムを10000の位で丸める	df[['列A', '列B']].round(-4)
データフレームの選択したカラムの中に日付データがあるか調べる	df[['列A', '列B']].isin([value])
線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
文字列はカタカナか	('ァ' <= ch <= 'ン')
ヒストグラムを赤色として描画する	plt.hist(データ列, color='red')
カラムの尖りを求める	scipy.stats.kurtosis(df['列A'], bias=False)
小数点数の双曲線正接の逆数	math.atanh(x)
カラーバーを水平で描画する	plt.colorbar(orientation='horizontal')
ヒストグラムの色をライトブルーに指定する	plt.hist(データ列, color='lightblue')
2を底とする対数を求める	math.log2(x)
カラム名を指定してデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
データフレームの一部のカラムの欠損値をその最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
整数nを十六進数表現に変換する	hex(n)
数式のパラメータを数式で置き換える	e.subs(z, e2)
浮動小数点数の指数を求める	math.frexp(x)[1]
データフレームの不偏分散を求める	df.var(ddof=1)
データフレームの中のカラムをn個にビニングし、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
縦棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategray')
今日が木曜日か確認する	datetime.datetime.today().weekday() == 3
青い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
２つのデータフレームを横方向に一つにする	pd.concat([df, df2], axis=1)
データフレームは正規分布からどの程度、歪んでいるか確認する	df.kurt()
本日は何年か知る	datetime.datetime.today().year
日付時刻データからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
クラス分類の偽陰性をヒートマップで調べる	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
散布図を黒い▽マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
２次元リストをフラット化する	sum(aList)
破線を用いてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
ライトグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
日付データは日付データより早いか調べる	aDate < aDate2
散布図に赤いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
組の最後	aTuple[-1]
データを外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
rgbのダイアモンドマーカーを数列と数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
数列のスピアマンの相関係数を計算する	scipy.stats.spearmanr(数列, 数列2)
ファイルパスをEUCでオープンする]	open(filepath, encoding='euc_jp')
option: グラフの色をオールドレースにセットする	color = 'oldlace'
カラム名一覧をデータ型でフィルタする	df.select_dtypes(型).columns
赤い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
赤い実線を用いてリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
タイムスタンプデータが何月か知る	aDatetime.month
ファイルパスとfilenameを結合する	os.path.join(filepath, filename)
横棒グラフをライムグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='limegreen')
グラフの補足の位置を指定する	plt.legend(loc=(x, y))
オールドレース色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
option: 色をトマトに設定する	color = 'tomato'
リストを等しい量になるようにn個にビン分割する	pd.qcut(aList, n)
散布図の△印の色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データシリーズの最頻値を求める	ds.mode()
要素を双方向キューにプッシュする	deq.append(element)
カウンタをイテラブルを出現回数して更新する	aCounter.update(iterable)
option: ペルーにフォントの色を設定する	color = 'peru'
タイムスタンプデータが何日か知る	aDatetime.day
８ビット整数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int8)
文字列内にひとつでも大文字が含まれるかどうか調べる	any(c.isupper() for c in s)
表データのあるカラムをdatetime64型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
散布図をダークオリーブグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データフレームを複数の列で降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
ゴールド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
データフレームをある列でグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
赤い丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
散布図に黒い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
散布図をライトサーモン色として描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
データフレームの指定した列を百の位で丸める	df['列A'].round(-2)
バイナリモードでファイルパスをオープンして]、fとする	f = open(filepath, mode='rb')
オブジェクトは文字列型か調べる	isinstance(obj, str)
折れ線グラフに赤い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
読み込みモードを用いてファイルをオープンして]、fとする	f = open(filepath, mode='r')
小数点数のハイパボリック・コサイン	math.cosh(x)
符号なし８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.uint8)
色付きの実線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
シーケンスと列をつなぐ	itertools.chain(iterable, iterable2)
散布図の星印を青色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
黒い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
線グラフの色をライムグリーンに変更する	plt.plot(データ列x, データ列y, color='limegreen')
部分文字列で文字列を二つに分ける	s.partition(sub)
オブジェクトの型を使う	type(obj)
データフレームの一部の列を10の位で丸める	df[['列A', '列B']].round(-1)
ダークシアン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
データフレームの選択した列を10の位で丸める	df[['列A', '列B']].round(-1)
データ列を箱ひげ図で作図する	plt.boxplot(データ列)
データフレームをにバイオリン図でグラフ化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
タイムスタンプ型の表データのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
スレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
データフレームのあるカラムにおいてどの値が頻出か確認する	df['列A'].mode()
赤い下三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: マーカーをバツに指定する	marker = 'x'
散布図にrgbの左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
option: パールバイオレットレッドを使う	color = 'palevioletred'
ヒストグラムをネイビー色を使って描画する	plt.hist(データ列, color='navy')
option: 小麦色にグラフの色を設定する	color = 'wheat'
要素をセットに追加する	aSet.add(element)
折れ線グラフの色をグレーにセットする	plt.plot(データ列x, データ列y, color='grey')
８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int8)
ファイルパスを読み込みモードで開く]	open(filepath, mode='r')
ひとつでも非英字が文字列中に含まれるか調べる	any(not c.isalpha() for c in s)
ミッドナイトブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
疑似乱数平均と標準偏差からを生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームを表示するとき、表示可能な列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
双方向キューのstart番目からend番目の値	collections.deque(itertools.islice(deq, start, end))
データフレームの中のカラムを四分位数ごとにビン分割する	pd.qcut(df[col], 4)
日付時刻データをISO書式の文字列にする	aDatetime.isoformat()
要素が集合のメンバーでない	element not in aSet
データフレームのカーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームの散布図をグループ化して縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
散布図に赤いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
横軸に軸ラベルを設定する	plt.xlabel('x軸ラベル')
リストとイテラブルについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
option: 三角印を加える	marker = '^'
プロットの色を濃くする	sns.set(pallete='deep')
ブルーバイオレット色としてヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
黄色い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
データシリーズの分散を求める	ds.var()
文字列中の部分文字列の登場回数	s.count(sub)
シーケンスから両端キューを新規生成する	collections.deque(iterable)
整数nの十六進リテラル	hex(n)
縦棒グラフを紺碧色として描画する	plt.bar(データ列x, データ列y, color='azure')
多次元データをt分布型確率的近傍埋め込み法を用いて淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
赤い星マーカーをリストとデータ列の散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
option: 青緑を使用する	color = 'teal'
データ列を箱ヒゲ図にする	plt.boxplot(データ列)
ふたつの集合の差	aSet.difference(aSet2)
配列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ミディアムオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ヒストグラムの色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
散布図に下三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='v')
10を底とする対数	math.log10(x)
▲印を使ってデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
リストの最初のオブジェクトを探す	aList.index(element)
散布図の▽マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
多次元データをSVDでパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
ケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
散布図に赤い▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
オブジェクトは辞書か確認する	isinstance(obj, dict)
データフレームの一部の列の欠損値を最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
option: ダークスレートブルーを使用する	color = 'darkslateblue'
グラフの目的を画面に設定する	sns.set(context='notebook')
n掛けるn2を求める	n * n2
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
縦棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
散布図の上三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
線グラフの色をペールグリーンに変更する	plt.plot(データ列x, データ列y, color='palegreen')
ラベル付きの円プロットを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
横棒グラフをミディアムスプリンググリーン色を使って描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
横棒グラフをパールゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
折れ線グラフの印をポイントにする	plt.plot(データ列x, データ列y, marker='.')
書き込みモードでファイルをオープンして]fとする	f = open(filepath, mode='w')
最初のカテゴリーを除外してデータフレームのあるカラムをダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
要素を両端キューの最後から取り除く	deq.pop()
リストとリストについて散布図を描き、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
option: フォントの色をサンディーブラウンに変更する	color = 'sandybrown'
リストの全ての要素を消去する	aList.clear()
散布図をフローラルホワイト色として描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
散布図に赤い▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
S-W検定を行う	scipy.stats.shapiro(配列)
2つのデータフレームを横向きに連結する	pd.concat([df, df2], axis=1)
option: ミディアムスプリンググリーンを使う	color = 'mediumspringgreen'
ファイルパスの絶対パス	os.path.abspath(filepath)
線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
ベクトルは何のデータ型か調べる	aArray.dtype()
3変数の最小値	min(x, y, z)
あるカラムの標本標準偏差	df['列A'].std(ddof=1)
実数の逆双曲線正接を求める	math.atanh(x)
棒グラフをモカシン色として描画する	plt.bar(データ列x, データ列y, color='moccasin')
ヒストグラムをシスル色として描画する	plt.hist(データ列, color='thistle')
ダークマゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
データフレームを行によって昇順にソートする	df.sort_index(ascending=True)
折れ線グラフの色をパパイヤウィップに指定する	plt.plot(データ列x, データ列y, color='papayawhip')
データシリーズの中に文字列がある	ds.isin([value])
要素がセットのメンバーでない	element not in aSet
option: ライトイエロー色を使用する	color = 'lightyellow'
データフレームの内容を見る	df.head()
折れ線グラフをオリベドラブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olivedrab')
列のコンビネーション	itertools.combinations(iterable, n)
ダークオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
補足をプロットの表示する	plt.legend()
データフレームから指定したデータ型のカラム名一覧	df.select_dtypes(型).columns
データフレームのある列をワンホット・ベクトルにする	pd.get_dummies(df['列A'])
配列の行ごとの最大値	np.max(aArray, axis=1)
ダークバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
棒グラフをミッドナイトブルー色を使って描画する	plt.bar(データ列x, データ列y, color='midnightblue')
非数値データ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
データシリーズを十の位で丸めて整数にする	ds.round(-1).astype(int)
線グラフの色を紺碧にセットする	plt.plot(データ列x, データ列y, color='azure')
ヒストグラムベースの勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: ミッドナイトブルーを用いる	color = 'midnightblue'
option: スカイブルー色を用いる	color = 'skyblue'
パパイヤウィップ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
オブジェクトはリストの要素か	element in aList
浮動小数点数をn乗する	x ** n
データフレームのカラムの母標準偏差を求める	df['列A'].std(ddof=0)
散布図をピーチパフ色として描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
空のマッピング	{}
リストとリストの散布図にrgbの三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列をパターンで分割する	re.split(pattern, s)
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgray')
データフレームの次元の大きさを確認する	df.shape
両端キューの左側	deq[0]
現在実行中の例外を情報を知る	sys.exc_info()
データフレームの統計量を算出する	df.describe()
イテラブルにタプルを続ける	itertools.chain(iterable, iterable2)
でデータフレームの選択した列の相関行列を計算する	df[['列A', '列B']].corr(method='kendall')
フローラルホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
option: オレンジレッドにフォントの色をする	color = 'orangered'
ヒストグラムを実線として描画する	plt.hist(データ列, linestyle='solid')
指定したカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
ライトグレーにヒストグラムの色を変更する	plt.hist(データ列, color='lightgray')
データフレームのあるカラムの曜日が何日目か調べる	df['列A'].dt.dayofweek
データ列を分割数nで分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームをグループ化し、最大値を求める	df.groupby('列A').max()
データフレームを表示するとき折り返しをしない	pd.set_option('expand_frame_repr', False)
セットから全要素を取り除く	aSet.clear()
ファイルパスから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
配列とリストについて散布図を描画し、、右三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: BOM付きを使用する	encoding = 'utf_8_sig'
マップを複製する	aDict.copy()
データフレームの一部のカラムの欠損値を平均値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
中央値でデータフレームの中の列を分割する	pd.qcut(df[col], 2)
日付データが日付データよりあと	aDate > aDate2
データフレームのカラムを目的変数にする	目的変数 = df['列名']
データフレームをCSVファイルにBOMを付けて出力する	df.to_csv('file.csv', encoding='utf_8_sig')
データフレームの列名を置き換える	df.columns = columns
２つの文字列は同じでないか調べる	s != s2
predicateFuncがTrueとならない列の要素	itertools.dropwhile(predicateFunc, iterable)
整数型のゼロ埋めされた配列を作成する	np.zeros(要素数, dtype=np.int)
データフレームをある列によってまとめたグループを使う	df.groupby('列A')
ロバストな線形回帰モデルを作成する	model = sklearn.linear_model.HuberRegressor()
ヒストグラムを耐火レンガ色として描画する	plt.hist(データ列, color='firebrick')
特異値分解として淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
シーケンスとイテラブルをつなぐ	itertools.chain(iterable, iterable2)
2つのデータフレームを横向きにマージする	pd.merge(df, df2)
データフレームをグループ化し、それぞれの分散を計算する	df.groupby('列A').var()
茶色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
プロットの全般的にカラーパレットを明るくする	sns.set(pallete='bright')
option: フォントの色をアクアに設定する	color = 'aqua'
散布図の印を赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
辞書からキーの値かもしくは要素を得る	aDict.get(key, element)
カウンタから最も頻出な文字列の件数	aCounter.most_common()[1]
小数点数の双曲線正接を算出する	math.tanh(x)
集合から要素を除く	aSet.remove(element)
散布図をダークマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
option: リネン色を使用する	color = 'linen'
アリスブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ある列の値がx以上、y以下のデータを抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
二つのタプルをネスト化する	collections.ChainMap(aDict, aDict2)
特異値分解の準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
0から始まるn個の整数列を作る	list(range(n))
各カテゴリごとにデータフレームの棒グラフを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
タプルを階層化マップにする	collections.ChainMap(aDict)
数値の数値を求める	float(e)
散布図を黒い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
グラフの縦軸の名称をuntitledに設定する	plt.ylabel('y軸ラベル')
データ列の折れ線グラフを▲印を使い、描画する	plt.plot(データ列x, データ列y, marker='^')
ミッドナイトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
データフレームを複数の列によって整列して、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
原点から(実数,y)の距離を求める	math.hypot(x, y)
偽陽性を避けたい指標を用いる	sklearn.metrics.precision_score(正解データ列, 予測データ列)
折れ線グラフの色を淡いピンク色にする	plt.plot(データ列x, データ列y, color='lightpink')
セットをタプルにする	tuple(aSet)
棒グラフをダークシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkcyan')
リストの末尾を捨てる	aList[:-1]
折れ線グラフの星印を赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
option: 分類木の深さを制限する	maxdepth = n
ポイント印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='turquoise')
茶色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
横棒グラフの色をバイオレットにする	plt.barh(データ列x, データ列y, color='violet')
カウンタ同士で和集合演算する	aCounter | aCounter2
文字列中にひとつでも非大文字があるかテストする	any(not c.isupper() for c in s)
縦棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgrey')
八進数文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
指定したカラムにおいてどの値が頻出か見る	df['列A'].mode()
文字列中にひとつでも非アルファベットが含まれるか	any(not c.isalpha() for c in s)
列とシーケンスをペアのリストにする	itertools.zip_longest(iterable, iterable2)
シャルトリューズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームの一部の列の中に文字列と文字列が存在するか判定する	df[['列A', '列B']].isin([value, value2])
mathを使う	import math
サーモン色でヒストグラムを描画する	plt.hist(データ列, color='salmon')
option: アクアマリン色を用いる	color = 'aquamarine'
組を展開してプリントする	print(*aTuple)
折れ線グラフの色をゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='goldenrod')
ライトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
データフレームのあるカラムの曜日	df['列A'].dt.weekday_name
最大長nの両端キューをシーケンスから作る	collections.deque(iterable, maxlen=n)
日付時刻データをn時間前にする	aDatetime - datetime.timedelta(hours=n)
逆正弦	math.asin(x)
データフレームのあるカラムをPandasの日付型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
散布図をレモンシフォン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
JSON文字列を辞書に変換する	json.loads(jsonString)
多次元データを主成分分析を用いて淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
折れ線プロットのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
複素数型の０で全要素を初期化した行列を作る	np.zeros(行数, 列数, dtype=bool)
ゼロ埋めされた整数型のベクトル	np.zeros(要素数, dtype=np.int)
リストを緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
スクリプトファイルのフォルダ名	os.path.dirname(os.path.abspath(__file__))
ファイルをUTF8を用いて書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
連立方程式の解を計算する	sympy.solve([e, e2])
nの8進数表現	oct(n)
散布図のポイント印の太さを変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
浮動小数点数の複素数	complex(x)
文字列から部分文字列を取り除く	s.replace(sub, '')
棒グラフをブラック色を使って描画する	plt.bar(データ列x, データ列y, color='black')
要素が集合に含まれないかどうか調べる	element not in aSet
縦棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
黒い三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
双方向キューから最初の要素を取り除く	deq.remove(element)
行列を平坦化する	aArray.flatten()
データ列と数列についての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
点線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームをグループ化しある列に対し平均値を求める	df.groupby('列A')['列B'].mean()
文字列を走査し正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
教師データとして回帰モデルを学習する	model.fit(説明変数, 目的変数)
辞書順で文字列が文字列より後	s > s2
線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
データシリーズの未入力値を50パーセンタイルに設定する	ds.fillna(ds.median())
コサイン	math.cos(x)
ルートの階層化マップを用意する	collections.ChainMap()
項目名がマッピングに存在しない時要素を追加する	aDict.setdefault(key, element)
折れ線グラフに丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o')
タプルをインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
文字列を最初の部分文字列で二分し、前半の文字列を求める	s.partition(sub)[0]
アイボリー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
数の２乗	x ** 2
折れ線グラフの左三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
最大値でデータフレームの未入力値を埋める	df.fillna(df.max())
小数点以下の表示精度を設定する	pd.set_option('precision', n)
option: 改行コードを動作環境依存にセットする	newline = None
実数の双曲線余弦の逆数を計算する	math.acosh(x)
双方向キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
正則化付き重回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
データシリーズにおいてどの値が最も出現するか見る	ds.mode()
ヒストグラムをサーモン色として描画する	plt.hist(データ列, color='salmon')
プロットのカラーパレットを全般的に暗くする	sns.set(pallete='dark')
2つのカウンタの共通する値	aCounter & aCounter2
実数に数を加える	x + y
横棒グラフをデピンク色として描画する	plt.barh(データ列x, データ列y, color='deeppink')
データシリーズの中にと文字列がある	ds.isin([value, value2])
option: ダークバイオレットにグラフの色を設定する	color = 'darkviolet'
マッピングのキーの値を得る	aDict[key]
option: グリーンにフォントの色を設定する	color = 'green'
方程式として数式を解く	sympy.solve(e)
テンプレートをargsを引数として文字列整形する	formatText.format(*args)
バイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
棒グラフの色を真紅にする	plt.bar(データ列x, データ列y, color='crimson')
option: ライトグレーに色を設定する	color = 'lightgrey'
データフレームの選択した列の中に文字列があるか調べる	df[['列A', '列B']].isin([value])
棒グラフをオーキッド色として描画する	plt.bar(データ列x, データ列y, color='orchid')
ペルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
リストと数列について散布図を描いて、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの中に文字列と日付データがいくつ存在するか数える	df.isin([value, value2]).sum()
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategray')
横棒グラフをバイオレット色で描画する	plt.barh(データ列x, データ列y, color='violet')
文字列をカンマで分割し、列挙する	s.split(',')
横向きにデータフレームを連結する	pd.concat([df, df2], axis=1)
低頻出な方からカウンタをリストとして得る	aCounter.most_common()[::-1]
option: データ型として三二ビット整数型を用いる	dtype = np.int16
集合を変更不能に変換する	frozenset(aSet)
option: フォントの色をスノーに指定する	color = 'snow'
グラフの横軸に説明をつける	plt.xlabel('x軸ラベル')
タイムスタンプデータからn日分減算する	aDatetime - datetime.timedelta(days=n)
カーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
rgbのバツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの標本分散を求める	df.var(ddof=0)
プラットホーム名	sys.platform
データフレームのポイントプロットを描く	sns.pairplot(hue='カテゴリ列', data=df)
散布図の丸マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
初めてのプログラムを書く	print('Hello World')
線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategray')
実数の逆双曲線余弦を求める	math.acosh(x)
ティールにヒストグラムの色を変更する	plt.hist(データ列, color='teal')
nがn2の倍数でないか確認する	n % n2 != 0
散布図の下三角印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ライトブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームから列を２つのみ選択する	df[['列A', '列B']]
既存のベクトルをベースに全要素が0の行列	np.zeros_like(aArray)
表計算ファイルから複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
ディープスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='deepskyblue')
option: 色をライトスカイブルーにする	color = 'lightskyblue'
折れ線グラフに四角印を使用する	plt.plot(データ列x, データ列y, marker='s')
辞書に要素を項目名として加える	aDict[key] = element
数値を太文字でプリントする	print(f'\033[1m{value}\033[0m')
タイムスタンプデータをエポック秒にする	aDatetime.timestamp()
折れ線グラフの色をゴーストホワイトにセットする	plt.plot(データ列x, データ列y, color='ghostwhite')
文字列が空白文字からなるか確認する	s.isspace()
グラフのx軸を対数目盛に変更する	plt.xscale('log')
トマト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
最大長nのキューを作る	collections.deque(maxlen=n)
リストとリストについて散布図をプロットし、、マーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
多次元データを特異値分解として濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
ダークオレンジ色としてヒストグラムを描画する	plt.hist(データ列, color='darkorange')
新しいガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
数値の数値を算出する	float(e)
ある列のカテゴリ毎の標準偏差	df.groupby('列A').std()
rgbのポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
アクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
折れ線グラフに黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列が文字列リストにある	s in aStringList
ダークサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
本日をタプルにする	datetime.datetime.today().timetuple()
データフレームの選択したカラムを十の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-1).astype(int)
xの小数点以下'5'桁までの文字列にする	':.5f'.format(x)
折れ線グラフをタン色として描画する	plt.plot(データ列x, データ列y, color='tan')
文字列の大文字小文字を変換する	s.casefold()
文字列中にひとつでも非数字が含まれるか	any(not c.isdigit() for c in s)
線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
ヒストグラムの色をライトスチールブルーに変更する	plt.hist(データ列, color='lightsteelblue')
配列のモードを求める	mode, count = scipy.stats.mode(配列)
option: パープルにグラフの色を設定する	color = 'purple'
ヒストグラムの色を白に変更する	plt.hist(データ列, color='white')
折れ線グラフを色付きの一点鎖線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームは正規分布からどの程度歪んでいるか見る	df.kurt()
配列とリストについての散布図に黒いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
option: 整数型を使用する	dtype = np.int
option: 区切りをスラッシュにする	sep = '/'
rgbの四角マーカーを数列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データ列をビン数nでビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
データフレームの選択したカラムを小数点以下n桁で四捨五入する	df[['列A', '列B']].round(n)
マゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
フォレストグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='forestgreen')
線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
折れ線グラフの三角印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ベクトルの要素ごとの積	np.multiply(aArray, aArray2)
リストの値を逆順にする	aList[::-1]
データフレームの列の各値が何回出現するか調べる	df[col].value_counts()
option: 黄色にグラフの色を変更する	color = 'yellow'
エクセルファイルから全てのシートをロードする	pd.read_excel('file.xlsx', sheet_name=None)
ダークサーモン色でヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
最初の部分文字列で文字列を二分する	s.partition(sub)
折れ線グラフをロージーブラウン色として描画する	plt.plot(データ列x, データ列y, color='rosybrown')
ファイルパスが存在する	os.path.exists(filepath)
アンティークホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフの印を左三角にする	plt.plot(データ列x, データ列y, marker='<')
ケンドール相関係数を用いてデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
散布図に赤い▽印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
青紫色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
データフレームの未入力値を平均に設定する	df.fillna(df.mean())
データフレームを表示するとき、表示可能な最大行数をnに指定する	pd.set_option('display.max_rows', n)
縦棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
option: シエナにフォントの色を設定する	color = 'sienna'
行列の列ごとの標準偏差を求める	np.std(aArray, axis=0)
折れ線グラフに青い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
変数を紫色で表示する	print(f'\033[35m{value}\033[0m')
option: シスルを使う	color = 'thistle'
文字列は全て識別子名かどうか調べる	s.isidentifier()
右から文字列を部分文字列で区切る	s.rsplit(sub)
文字列の右端から改行を除く	s.rstrip('\n')
浮動小数点数のn乗を算出する	x ** n
プロットにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
データフレームの指定したカラムの中にいくつ文字列があるかカウントする	df['列A'].isin([value]).sum()
線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
サドルブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ある列の値がxより大きくyより小さい行を抽出する	df[(x < df['列A']) & (df['列A'] < y)]
空白で文字列を分割して、整数リストに変換する	map(int, s.split())
数列とデータ列についての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ライトシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
散布図の▽マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
nはセットのいづれかか調べる	n in aSet
スラッシュで区切って2つの文字列をプリントする	print(value, value2, sep='/')
nが1もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
二つの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
オブジェクトの参照カウントを使う	sys.getrefcount(obj)
カラムの正規分布を判定する	scipy.stats.shapiro(df['列A'])
ホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='white')
nとn2の値を足してnとする	n += n2
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
文字列中に部分文字列がないか調べる	sub not in s
リストを緑色で表示する	print(f'\033[32m{value}\033[0m')
横棒グラフをブルーバイオレット色として描画する	plt.barh(データ列x, データ列y, color='blueviolet')
黒い線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
データシリーズが正規分布からどの程度尖っているか確認する	ds.skew()
データフレームの一部のカラムの欠損値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
双方向キューから最初の要素を取り出す	deq.remove(element)
濃いシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
文字列からformatのパターンで日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
データフレームの指定したカラムを100の位で丸める	df['列A'].round(-2)
空白文字を全部見る	string.whitespace
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
ロバストな線形分類モデルを準備する	model = sklearn.linear_model.HuberClassifier()
折れ線グラフを青い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
水色で変数をプリントする	print(f'\033[36m{value}\033[0m')
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
散布図をやわらかい青色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
小麦色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
空のタプルを作る	()
ライトグリーン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
文字列の先頭で大文字・小文字を無視してパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
逆順のスタック	reversed(deq)
オレンジ色でヒストグラムを描画する	plt.hist(データ列, color='orange')
散布図に赤い▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
リストを四分位数ごとにビニングする	pd.qcut(aList, 4)
データフレームの指定した列の名前一覧の列だけ選択する	df[columns]
シーケンス自身の長さnの順列	itertools.permutations(iterable, n)
シーケンスを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
グラフに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
イテラブルとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
数列とリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
三自然数の最大公約数を算出する	math.gcd(n, n2, n3)
平均と分散を用いて標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
集合にシーケンスの要素を追加する	aSet.update(iterable)
横棒グラフをパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='purple')
データシリーズの欠損値をその最小値で補完する	ds.fillna(ds.min())
プラットホームがWindows	sys.platform.startswith('win32')
rgbのバツマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
プロット中のフォントを変更する	sns.set(font=フォント名)
xの小数点以下'4'桁までを表示する	print(':.4f'.format(x))
横方向に二つのデータフレームを連結する	pd.concat([df, df2], axis=1)
折れ線グラフの星印の線幅を変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, markersize=2.0)
aListn番目から要素を取り出す	aList.pop(n)
配列の相関係数を計算する	scipy.stats.pearsonr(配列, 配列2)
データフレームの選択した列が正規分布からどの程度尖っているか確認する	df[['列A', '列B']].skew()
ベクトルの最大	np.max(aArray)
指定した列の値で集計し、最小値を計算する	df.groupby('列A').min()
2つのオブジェクトは同一参照か判定する	obj is obj2
ヒストグラムのビン数を指定する	plt.hist(データ列, bins=区関数)
列にイテラブルを続けた列を得る	itertools.chain(iterable, iterable2)
リストが空でないかどうか	len(aList) != 0
表データのあるカラムが何曜日か見る	df['列A'].dt.weekday_name
ダイアモンドマーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
ライトゴールドロディイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
ミディアムスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
プロットに鉛直方向の破線を付ける	plt.axvline(x=0, linestyle='dashed')
カテゴリ別に並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームから重複を認めてランダムに10行をサンプリングする	df.sample(10, replace=True)
配列を分割数nを用いてビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
文字列をコロンで区切って、文字列リストに変換する	s.split(':')
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
option: コロンを区切り記号で用いる	sep = ':'
左に両端キューの要素をn個分ローテンションする	deq.rotate(-n)
nがn2で割り切れないかどうか調べる	n % n2 != 0
コマンドの第一引数を調べる	sys.argv[1]
データフレームのカラムを各カテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
文字列をバイト列にする	bytes(s)
option: グラフの色をハニーデューにセットする	color = 'honeydew'
データフレームのカラムを散布図で描画し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
nとn2の商を計算する	n / n2
色付きの点線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
縦棒グラフを描画し、、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
リストとリストの散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
オブジェクトは集合型	isinstance(obj, set)
リストとリストについての散布図にrgbのポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データ列を2つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
配列とリストの散布図をプロットして四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列全体を正規表現に大文字・小文字を無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
散布図に黒い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
現在が水曜日	datetime.datetime.today().weekday() == 2
横に並べて配列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
折れ線グラフの色をライムグリーンにセットする	plt.plot(データ列x, データ列y, color='limegreen')
散布図の色をバイオレットにする	plt.scatter(データ列x, データ列y, color='violet')
option: ローングリーンを使う	color = 'lawngreen'
ヒストグラムをスレートブルー色として描画する	plt.hist(データ列, color='slateblue')
変数が無限大に近づく時の数式の極限値を求める	sympy.limit(e, z, oo)
オブジェクトはバイト列型か調べる	isinstance(obj, bytes)
データフレームの平均と信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
option: バッファを使わない	buffering = 0
リストとリストについて散布図を描画して菱形マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
紺色としてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
スレートブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
棒グラフをダークゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
文字列をコロンを用いて分割し、、列挙する	s.split(':')
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='gray')
棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
組の文字列が最初に見つかるインデックスを探す	aTuple.index(element)
option: 文字列を区切りで用いる	sep = s
特異値分解を使って多次元データをパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
nがn2より小さいか判定する	n < n2
ファイルが存在しないか確認する	not os.path.exists(filepath)
レベッカパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
散布図にバツ印を用いる	plt.scatter(データ列x, データ列y, marker='x')
折れ線グラフの下三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ファイルの拡張子を見る	os.path.splitext(filepath)[1].lstrip('.')
8進文字列を整数に変換する	int(s, 8)
あるカラムの未入力値を50パーセンタイルに変更する	df['列A'].fillna(df['列A'].median())
ファイルをオープンして]読み込みストリームを使う	open(filepath, mode='r')
部分文字列で部分文字列が始まるか確認する	s.startswith(sub)
データシリーズの月を使う	ds.dt.month
実行結果をマゼンタにする	f'\033[35m{value}\033[0m'
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
新しい重回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
真紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームの選択したカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
option: グラフの色を紺碧に指定する	color = 'azure'
ある列ごとの分散	df.groupby('列A').var()
グラフから目盛線を消す	plt.grid(False)
ハローワールドをプリントする	print('Hello World')
黒いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ヒストグラムの描画して正規化する	plt.hist(データ列, density=True)
見やすいグラフを用いる準備をする	import seaborn as sns
スレートブルーにヒストグラムの色をセットする	plt.hist(データ列, color='slateblue')
データ列の離れ具合をプロットする	sns.residplot(x=データ列, y=データ列)
データシリーズのKurtosis	ds.kurt()
本日の年を使う	datetime.datetime.today().year
入力から二つの実数を読む	A, B = map(float, input().split())
十六進数文字列を整数に変換する	int(s, 16)
列の一意な値の個数	ds.nunique()
配列の最頻値を計算する	mode, count = scipy.stats.mode(配列)
変数を赤色化する	f'\033[31m{value}\033[0m'
データ列のUNIX秒を日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
列から重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
日付データをn週間前にする	aDate - datetime.timedelta(weeks=n)
カテゴリで色分けして、に箱ひげ図を用いてデータフレームをグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
赤いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
散布図に▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
データフレームの中の列を分割数nとして分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
分類モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
リストを中央値でビニングする	pd.qcut(aList, 2)
二つの文字列は等しいか	s == s2
文字列の末尾から空白を取り除く	s.rstrip(' ')
option: 色をシアンに設定する	color = 'cyan'
赤い右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
トマト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
縦方向に3つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
ダークスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
二つの集合は互いに素かどうか調べる	aSet.isdisjoint(aSet2)
部分文字列が文字列中にあるか	sub in s
文字列をエンコーディングを用いてバイト列に変換する	s.encode(encoding=encoding)
タプルの合計を求める	sum(aTuple)
指定したカラムを10の位で四捨五入する	df['列A'].round(-1)
関数の値によってデータフレームをグループ化し記述統計量を求める	df.groupby(関数).describe()
ヒストグラムを描画して、ビン数を指定する	plt.hist(データ列, bins=区関数)
日付データにn分を加算する	aDate + datetime.timedelta(minutes=n)
ダークオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
０で全要素を初期化した符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
日付データが日付データより後ろ	aDate > aDate2
正規分布による累積分布関数を使用する	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
CSVのn行目をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
文字列リストを連結して一つの文字列にする	''.join(aStringList)
option: ダークターコイズにグラフの色を設定する	color = 'darkturquoise'
折れ線グラフに黒い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
キューの中に要素は含まれてる	element in deq
option: フォントの色をミディアムオーキッドに指定する	color = 'mediumorchid'
データフレームのカラムの偏差値を計算する	50 + 10 * scipy.stats.zscore(df['列A'])
データシリーズの上位25パーセント	ds.quantile(0.25)
option: △印を描画する	marker = '^'
エクセルファイルからシートを指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
棒グラフをゴーストホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
モカシン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
多重集合を辞書から作成する	collections.Counter(aDict)
ダークターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
文字列が組の要素でない	element not in aTuple
データシリーズの値をValueMapで一度に置き換える	ds.replace(ValueMap)
文字コードに対応する文字を求める	chr(unicode)
予測データの混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
折れ線グラフの星マーカーを青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
ある列の文字列が正規表現文字列にマッチしない行を選択する	df[~df['列A'].str.match(正規表現)]
ヒストグラムの色をミディアムスプリンググリーンに変更する	plt.hist(データ列, color='mediumspringgreen')
リストとデータ列について散布図を描いて、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムの色をリネンに変更する	plt.hist(データ列, color='linen')
カウンタのそれぞれの要素をその出現回数だけ列挙する	aCounter.elements()
二変数の一番小さい値	min(x, y)
日付時刻データが日付時刻データと同時か確認する	aDatetime == aDatetime2
散布図に左三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='<')
ミントクリーム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
option: ライトゴールドロディイエローを使う	color = 'lightgoldenrodyellow'
タイムスタンプデータにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
積み上げ棒グラフを描く	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
折れ線グラフに黒い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
ミディアムブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
複数の表データを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
散布図をrgbの左三角マーカーで描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: 淡いピンク色色を使用する	color = 'lightpink'
カラムをフォーマットとしてタイムスタンプ型にする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
2つのデータ列の残差を散布図として描く	sns.residplot(x=データ列, y=データ列)
option: 色をアクアマリンに設定する	color = 'aquamarine'
イテラブルと配列について散布図を描画し、、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
プログラムの実行をエラーとして終了する	sys.exit(1)
縦棒グラフをアリスブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ナバホホワイト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
双方向キューを全て取り除く	deq.clear()
パールゴールデンロッドにヒストグラムの色を指定する	plt.hist(データ列, color='palegoldenrod')
option: フォントの色をインディアンレッドに指定する	color = 'indianred'
棒グラフを紺碧色を用いて描画する	plt.bar(データ列x, データ列y, color='azure')
イテラブルから配列を作成する	np.array(iterable)
option: ダークグレーを使う	color = 'darkgrey'
列をリストを境界値としてビニングする	pd.cut(ds, aList)
1からNまでの配列を作成する	np.arange(1, N+1)
ローングリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
ヒストグラムをライトシアン色として描画する	plt.hist(データ列, color='lightcyan')
イテラブルからn要素、サンプリングする	random.sample(iterable, k=n)
ヒストグラムをディムグレー色を使って描画する	plt.hist(データ列, color='dimgray')
option: フォントの色をシスルに指定する	color = 'thistle'
一方に含まれ他方に含まれない集合	aSet.difference(aSet2)
データフレームの列間の相関行列をまとめて計算する	df.corr()
グラフ中で日本語フォントを使えるようにする	sns.set(font='IPAexGothic')
三整数のLCMを求める	math.lcm(n, n2, n3)
文字列を下線付き化する	f'\033[4m{value}\033[0m'
チョコレート色でヒストグラムを描画する	plt.hist(データ列, color='chocolate')
パレットトルコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
オブジェクトはタプルに含まれないか調べる	element not in aTuple
データフレームの中の列をn個にビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
nを十六進文字列にする	hex(n)[2:]
ヒストグラムをホットピンク色を用いて描画する	plt.hist(データ列, color='hotpink')
イテラブルと列のデカルト積	itertools.product(iterable, iterable2)
横棒グラフをインディアンレッド色を使って描画する	plt.barh(データ列x, データ列y, color='indianred')
要素一つのタプル	(element,)
ヒストグラムをインディアンレッド色を使って描画する	plt.hist(データ列, color='indianred')
折れ線グラフをプラム色として描画する	plt.plot(データ列x, データ列y, color='plum')
option: ダークスレートブルーを使う	color = 'darkslateblue'
両端キューから指定した範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
option: ミディアムスレートブルーにグラフの色を設定する	color = 'mediumslateblue'
散布図を黒い下三角マーカーで描く	plt.plot(データ列x, データ列y, marker='v', c='k')
線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
ヒストグラムをモカシン色を用いて描画する	plt.hist(データ列, color='moccasin')
データシリーズの不偏標準偏差を計算する	ds.std()
複数の列からグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
グラフの縦横比を同じする	plt.axis('equals')
データを最大最小値でスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: ダークマゼンタ色を用いる	color = 'darkmagenta'
マッピングのキーに対応した値	aDict.get(key)
ミディアムスプリンググリーンにヒストグラムの色を指定する	plt.hist(データ列, color='mediumspringgreen')
日付時刻データは何日か知る	aDatetime.day
データフレームの選択したカラムを10の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
ファイルパスの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
データフレームの選択した列を丸めて整数型にする	df[['列A', '列B']].round().astype(int)
大バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
option: 印の色を変える	markerfacecolor = '#800080'
バイナリ書き込みできるようにファイルを開く]	open(filepath, mode='wb')
プロットの横軸を対数に変更する	plt.xscale('log')
最大値でデータフレームの欠損値を埋める	df.fillna(df.max())
TSVからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
プラム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
コーンフラワーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
ダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
タプルを空にする	aDict.clear()
棒グラフをダークオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkorchid')
横棒グラフをマルーン色として描画する	plt.barh(データ列x, データ列y, color='maroon')
コーンフラワーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: 色を黄緑に設定する	color = 'chartreuse'
データ列をカテゴリデータにする	ds.astype(object)
多次元データをSVDでパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
option: ライトスレイグレー色を用いる	color = 'lightslategray'
指定した列のカテゴリで集計し分散を求める	df.groupby('列A').var()
リストのn番目に文字列を差し込む	aList.insert(n, element)
リストの先頭のn要素を除く	aList[n:]
option: 左三角マーカーを使用する	marker = '<'
現在の秒	datetime.date.today().second
option: マーカーの色を深紅にする	markerfacecolor = 'crimson'
データフレームの選択したカラムは正規分布からどの程度、歪んでいるか確認する	df[['列A', '列B']].kurt()
横棒グラフをライトグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
十六進数字を全部求める	string.hexdigits
△印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームをヘッダを付けず保存する	df.to_csv('file.csv', header=None)
散布図に黒いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ファイルを書き込みモードで開き]、fとする	f = open(filepath, mode='w')
データフレームの一部のカラムにおいてどの値が頻出か確認する	df[['列A', '列B']].mode()
二つのリストの積集合	list(set(aList) & set(aList2))
option: ミントクリームを使う	color = 'mintcream'
マッピングのコピーを作る	dict(aDict)
多次元データを多次元尺度構成法を用いて淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
指定したカラムの中にいくつ日付データが存在するか数える	df['列A'].isin([value]).sum()
空の辞書を作る	{}
小数点数の正接を求める	math.tan(x)
データフレームをグループ化しあるカラムに対し最小値を求める	df.groupby('列A')['列B'].min()
ヒストグラムで配列を作図する	plt.hist(データ列)
散布図をローングリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
オプションで標準出力を使う	file = sys.stdout
縦棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
円グラフを円にする	plt.axis('equals')
縦棒プロットを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
線グラフを色付きの実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
xでデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(x)
データフレームのあるカラムは何曜日か見る	df['列A'].dt.weekday_name
option: ラベンダーを用いる	color = 'lavender'
データフレームの選択した列は正規分布からどの程度、尖っているか調べる	df[['列A', '列B']].skew()
データシリーズのSkewness	ds.skew()
option: グラフの色をライムに指定する	color = 'lime'
データフレームから1つのカラムを抽出する	df[['列A']]
折れ線グラフをスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='slateblue')
ユークリッド距離	math.dist(point, point2)
青い点線で線を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
コーラル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
日付時刻データが土曜日かどうか調べる	aDatetime.weekday() == 5
グレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
折れ線グラフの色をミディアムブルーに変更する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームの選択したカラムの分散を算出する	df[['列A', '列B']].var()
ヒストグラムをシルバー色として描画する	plt.hist(データ列, color='silver')
ミディアムターコイズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
スーパーセットもしくは等しいかどうか	aSet > aSet2
グラフの描画で濃く色を使う	sns.set(pallete='deep')
論文にグラフを設定する	sns.set(context='paper')
イテラブルに列を続ける	itertools.chain(iterable, iterable2)
option: 右三角印を描画する	marker = '>'
四分位数ごとに配列をビン分割する	pd.qcut(aArray, 4)
option: バイナリ書き込み用に変更する	mode = 'wb'
データフレームの選択した列のNaNを数値で補完する	df[['列A', '列B']].fillna(x)
小数点数のkを底とする対数を算出する	math.log(x, k)
n回の数値イテラブル	range(n)
外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図の丸マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
ダークオリーブグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
タイムスタンプデータが木曜日かどうか調べる	aDatetime.weekday() == 3
option: マーカーを三角に変える	marker = '^'
多次元データをMSDで淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
散布図の菱形マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
グラフの名前を設定する	plt.title('グラフの名称')
配列と配列の散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
後の値でデータフレームの指定したカラムの未入力値を補う	df['列A'].fillna(method='bfill')
2つの変数をそれぞれ定義する	x, y = i, j
データフレームの指定した列のNaNを第二四分位数に設定する	df['列A'].fillna(df['列A'].median())
散布図の丸マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
データフレームの指定した列の欠損値を直前の値で置き換える	df['列A'].fillna(method='ffill')
2進数文字列を整数にする	int(s, 2)
rgbの三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
線グラフをスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='skyblue')
縦棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
アイボリー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
5行をランダムに表から抽出する	df.sample(5)
option: 色をライトコーラルに設定する	color = 'lightcoral'
線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
入力から二つの整数を読み込む	A, B = map(int, input().split())
横棒グラフをダーク・スラテグレー色を使って描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
マッピングのキーとその項目をペアとして取り出す	aDict.items()
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightgreen')
折れ線グラフの色をナバホホワイトにセットする	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームは正規分布からどの程度、尖っているか確認する	df.skew()
折れ線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='grey')
シルバー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
データフレームを表示するとき、小数点以下をn桁に設定する	pd.set_option('precision', n)
縦棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
縦棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
非大文字が文字列中にあるかどうか確認する	any(not c.isupper() for c in s)
二つのデータフレームを異なる列をキーとして右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
文字列を赤色で表示できる文字列にする	f'\033[31m{value}\033[0m'
ヒストグラムの色をディープスカイブルーに変更する	plt.hist(データ列, color='deepskyblue')
真上位集合	aSet > aSet2
グラフの描画で明るくパレットを使う	sns.set(pallete='bright')
option: ダークオレンジ色を用いる	color = 'darkorange'
option: ミディアムパープルにグラフの色を設定する	color = 'mediumpurple'
文字列に変換してイテラブルを連結する	''.join(map(str, iterable))
散布図をサドルブラウン色として描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
ヒストグラムの色をトマトにセットする	plt.hist(データ列, color='tomato')
n進数文字列を整数にする	int(s, n)
データフレームの指定したカラムの平均値を算出する	df['列A'].mean()
日付時刻データが日曜日	aDatetime.weekday() == 6
右にn個分双方向キューのデータをローテンションする	deq.rotate(n)
ケンドールの相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
option: 印の線幅を変更する	markeredgewidth = 2.5
カテゴリ別で色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ヒストグラムを濃い青色で描画する	plt.hist(データ列, color='darkblue')
リストの要素数	len(aList)
データフレームの指定した列の文字列をNaNに変換する	df['列A'].replace(値, np.nan)
option: 四角印を加える	marker = 's'
データフレームのある列を1000の位で丸める	df['列A'].round(-3)
乱数で要素を埋めた行列	np.random.random((行数, 列数))
option: フォントの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
散布図に下三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='v')
空行を出力する	print()
データシリーズの分位数を求める	ds.quantile(パーセント/100)
データフレーム中の欠損値を除いてみる	df.dropna()
説明変数と目的変数で回帰モデルを学習する	model.fit(説明変数, 目的変数)
２つの変数をそれぞれ定義する	x, y = i, j
option: 先頭のカラムをインデックスにする	index_col = 0
データシリーズのNaNを中央値で埋める	ds.fillna(ds.median())
マッピングのキーを要素にする	aDict[key] = element
option: 事前に説明変数を正規化する	normalize = True
最大値・最小値として整数乱数を生成する	random.randint(最小値, 最大値)
nが一桁の数か確認する	0 <= n <= 9
ヘッダを指定せずカンマ区切りのファイルを読む	pd.read_csv('file.csv', header=None)
option: 紺碧を使用する	color = 'azure'
濃いシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
半透明の実線でラインを描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ライトサーモン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
線グラフの色をオリーブに変更する	plt.plot(データ列x, データ列y, color='olive')
マップのキーに対応した値	aDict.get(key)
折れ線グラフをスノー色として描画する	plt.plot(データ列x, データ列y, color='snow')
year年month月day日のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
kを底とする小数点数の対数	math.log(x, k)
データフレームをある列によって整列してNaNを先頭にする	df.sort_values(by='列A', na_position='first')
整数nが集合のいづれかか確認する	n in aSet
最大長nの両端キューを生成する	collections.deque(maxlen=n)
配列の累積和を求める	np.cumsum(aArray)
青緑色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
文字列を紫色でプリントする	print(f'\033[35m{value}\033[0m')
n回文字列が繰り返すイテラブル	itertools.repeat(element, n)
グラフで使う横軸にキャプションを付ける	plt.xlabel('x軸ラベル')
列の重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
データシリーズの未入力値を後の行の値に減らす	ds.fillna(method='bfill')
十六進数字を全部見る	string.hexdigits
データフレームの選択した列の母標準偏差	df[['列A', '列B']].std(ddof=0)
文字列中にひとつでも非英数字が含まれるか	any(not c.isalnum() for c in s)
直後の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
データシリーズのNaNを最頻値で置換する	ds.fillna(ds.mode().iloc[0])
日付時刻データとタイムスタンプデータの時間差	aDatetime - aDatetime2
文字列が数字	s.isdigit()
シーケンスから行列を作る	np.array(iterable)
枠なしの凡例をプロットの中に付ける	plt.legend(frameon=False)
スタックの最後の要素	deq[-1]
多次元尺度構成法としてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
行列が何のデータ型か調べる	aArray.dtype()
パラメータがマイナス無限大に近づくときの数値の極限値を計算する	sympy.limit(e, z, -oo)
ファイルをバイナリモードを用いてオープンする]	open(filepath, mode='rb')
option: グラフの色を耐火レンガに変更する	color = 'firebrick'
縦方向に三つのデータフレームをつなぐ	pd.concat([df, df2, df3], axis=0)
点線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムをアリスブルー色として描画する	plt.hist(データ列, color='aliceblue')
赤い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
辞書の浅いコピーを新規生成する	aDict.copy()
線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
配列のn次モーメントを計算する	scipy.stats.moment(配列, moment=n)
折れ線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
オブジェクトの属性を取り除く	delattr(obj, プロパティ名)
折れ線グラフの色をティールに変更する	plt.plot(データ列x, データ列y, color='teal')
範囲を指定して乱数を計算する	random.randint(最小値, 最大値)
ラインを半透明の一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ファイルの入力ストリームを見る	open(filepath)
折れ線グラフの左三角印を青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
8進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データフレームのカラムのトリム平均を算出する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
データフレームの列の各データが何回出現するか調べる	df[col].value_counts()
option: ▼マーカーを使う	marker = 'v'
x座標の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
nがタプルのどれか	n in aTuple
rgbの星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
デックのn番目	deq[n]
文字列中に非大文字が含まれる	any(not c.isupper() for c in s)
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
データ列の推移を赤い破線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
回帰分析を部分的最小二乗法として行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
option: ハニーデューにフォントの色を変更する	color = 'honeydew'
集合に列の要素を全て追加する	aSet.update(iterable)
リストの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
文字列を文字コードエスケープでバイト列にする	s.encode(encoding='unicode_escape')
n個の文字列があるリスト	[element] * n
黒い印を散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
棒グラフをパープル色として描画する	plt.bar(データ列x, データ列y, color='purple')
数値を数値に変換する	float(e)
ロージーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
日付時刻をインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
データフレームをある列の値によってグループ化し、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
二つの文字列は同じかどうか	s == s2
データフレームを十の位で丸めて整数にする	df.round(-1).astype(int)
貝殻色で線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
スレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
数列と配列の散布図を描画して大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ドジャーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
散布図の△マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
オブジェクトのプロパティの値をする	setattr(obj, プロパティ名, 値)
数値をアンダーライン付きにする	f'\033[4m{value}\033[0m'
データフレームの指定した列の欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
ランダムにデータフレームから抽出する	df.sample()
行列の列ごとの最大値を調べる	np.max(aArray, axis=0)
データフレームの先頭の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
散布図をパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='purple')
等差数列をベクトルにする	np.arange(開始値, 終了値, 等差)
赤い一点鎖線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
2つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
文字列の最初から部分文字列を探す	s.find(sub)
ある列の文字列に部分文字列が存在する行を抽出する	df[df['列A'].str.contains(部分文字列)]
折れ線グラフをライトスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームからランダムに10行を取り出す	df.sample(10)
シャルトリューズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
ビン数nで配列をビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
y軸を対数目盛に変更する	plt.yscale('log')
タプルの末尾を捨てる	aTuple[:-1]
2次元リストをflattenする	sum(aList)
ヒストグラムをチョコレート色を使って描画する	plt.hist(データ列, color='chocolate')
散布図の星印を赤色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
データフレームからカテゴリデータのカラムを抽出する	df.select_dtypes('object')
グリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
ヒストグラムを点線に設定する	plt.hist(データ列, linestyle='dotted')
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
option: 黄色色を用いる	color = 'yellow'
ドジャーブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
ファイルパスをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
散布図に赤いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
三変数の最も小さい値	min(x, y, z)
指定したカラムの要約統計量	df['列A'].describe()
データフレームのカテゴリデータをワンホット・ベクトルに変換する	pd.get_dummies(df)
組の中の最大値を算出する	max(aTuple)
散布図を黄色色を用いて描画する	plt.scatter(データ列x, データ列y, color='yellow')
散布図の印を黒色にする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
ダークマゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
option: ピンクに色を指定する	color = 'pink'
散布図の四角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
データフレームの統計量を確認する	df.describe()
パールバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='palevioletred')
データフレームの中に文字列がある	df.isin([value])
折れ線グラフの色をタンに指定する	plt.plot(データ列x, データ列y, color='tan')
グラフの描画を綺麗にする	import seaborn as sns
線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='grey')
アクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
変数を緑色化する	f'\033[32m{value}\033[0m'
グリッドの線スタイルを実線に変更する	plt.grid(linestyle='solid')
マルーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='maroon')
リストと数列についての散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
数をn乗する	x ** n
２つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
option: ホットピンク色を用いる	color = 'hotpink'
折れ線グラフの大バツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
リストと数列についての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
棒グラフをタン色を用いて描画する	plt.bar(データ列x, データ列y, color='tan')
予測値とデータの離れ具合を図示する	sns.residplot(x='列名', y='列名', data=df)
データシリーズの欠損値をメディアンに設定する	ds.fillna(ds.median())
部分文字列が文字列の終了位置より前に含まれないかどうか調べる	s.find(sub, 0, end) == -1
線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
イテラブルにリストを続けた列	itertools.chain(iterable, iterable2)
データフレームをカンマ区切り形式で保存する	df.to_csv('file.csv')
ミディアムスプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
データフレームの選択したカラムのNaNを平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
散布図に赤い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフの色をディープスカイブルーに変更する	plt.plot(データ列x, データ列y, color='deepskyblue')
列名を指定して２つのデータフレームを結合する	pd.merge(df, df2, on='列A')
ピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
データシリーズのNaNを最大値にセットする	ds.fillna(ds.max())
分割数nとしてリストを等量でビン分割する	pd.qcut(aList, n)
両端キューからポップする	deq.pop()
データフレームの指定したカラムの標準偏差などを確認する	df['列A'].describe()
配列とリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
アイボリー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
プラットホームはMacOSかどうか確認する	sys.platform.startswith('darwin')
ダークオリーブグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')

option: ラベンダーブラッシュを用いる	color = 'lavenderblush'
数列とリストの散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
nはn2か調べる	n == n2
サブ型	issubclass(サブクラス, クラス)
リストの各要素を関数に適用した結果で並べ直す	sorted(aList, key=func)
プラットホームはWindows	sys.platform.startswith('win32')
ファイルを文字列の示す文字コードで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
データフレームを列を用いてソートし、、上位n件を取り出す	df.sort_values(columns).head(n)
ビスク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
列をビン分割する	pd.cut(ds, aList)
散布図をパレットトルコイズ色を使って描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
リストの末尾からn番目以前の要素を取り出す	aList[:-n]
option: ８ビット整数型を使用する	dtype = np.int8
配列と数列についての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
データフレームから重複するデータを消す	df.drop_duplicates()
ヒストグラムの色をペルーに変更する	plt.hist(データ列, color='peru')
カウンタのインターセクション演算する	aCounter & aCounter2
整数nを二進表記に変換する	bin(n)
キーがマッピングに存在しているか	key not in aDict
option: どの列もインデックスに設定しない	index_col = None
マゼンタで文字列を出力する	print(f'\033[35m{value}\033[0m')
文字列中にひとつでも非アスキー文字がある	any(not c.isascii() for c in s)
option: namesを列の名前に設定する	names = names
散布図のクロスマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
スピアマンの相関係数を計算する	scipy.stats.spearmanr(データ列, データ列2)
predicateFuncが真となる列の要素を求める	itertools.takewhile(predicateFunc, iterable)
入力ストリームをクローズする	f.close()
データフレームの列の値がx以上の行を抽出する	df[df[column] >= x]
折れ線グラフのポイントマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
散布図をロージーブラウン色を使って描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
散布図の三角印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
タイムスタンプデータが日曜日かどうか	aDatetime.weekday() == 6
データラベルをグラフの表示する	plt.legend()
横棒グラフをミディアムスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: グラフの色をネイビーに指定する	color = 'navy'
文字列中にひとつでも非英字が含まれるか	any(not c.isalpha() for c in s)
タプルの項目名に対応した値	aDict.get(key)
ピーチパフ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
リストの個数	len(aList)
列の値によってデータフレームをグループ化して、各グループごとの平均値を算出する	df.groupby(column).mean()
黒い星マーカーを配列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='*', c='k')
円プロットを完全な円にする	plt.axis('equals')
文字列中にひとつでも非小文字が含まれるかどうか調べる	any(not c.islower() for c in s)
option: フォントの色をライトシアンに設定する	color = 'lightcyan'
散布図の丸マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
線グラフの色をドジャーブルーに指定する	plt.plot(データ列x, データ列y, color='dodgerblue')
読み込みモードを用いてファイルをオープンする]	open(filepath, mode='r')
データフレームの列名を指定された名前リストに置き換える	df.columns = columns
ヒストグラムをデピンク色を使って描画する	plt.hist(データ列, color='deeppink')
否定する	not n
配列のムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
データ列の未入力値を最大値で埋める	ds.fillna(ds.max())
プラム色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
濃いシアン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
日付時刻データにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
句読点文字を求める	string.punctuation
文字列が全てアルファベットか	s.isalpha()
データフレームのリストカラムはどの程度、分散しているか調べる	df[aList].var()
nがn2より大きいか	n > n2
xの小数点以下'4'桁までを出力する	print(':.4f'.format(x))
文字列の左側	s[0]
乱数で要素を埋めた行列	np.random.random((行数, 列数))
各列毎にデータフレームをグループ化して、列の合計を計算する	df.groupby(column)[column2].sum()
綺麗なグラフを描画する	import seaborn as sns
データフレームのヒストグラムを横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名')
プロット中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
データフレームを関数の値で集約する	df.groupby(関数)
プロットの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
データフレームを表示するとき折り返しをしない	pd.set_option('expand_frame_repr', False)
スチールブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームのリストカラムのNaNを最小値で埋める	df[aList].fillna(df[aList].min())
折れ線グラフの右三角印を青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームのグループの最小値を求める	df.groupby(column).min()
文字列はタプルに含まれるか調べる	element in aTuple
データフレームの最後を見る	df.tail()
大きさnで数列と配列の散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
y座標の目盛りを表示しない	plt.yticks([])
option: フォントの色をナバホホワイトにセットする	color = 'navajowhite'
３変数の最小値	min(x, y, z)
nの十六進数表記	hex(n)
predicateFuncが真となるイテラブルの部分を得る	itertools.takewhile(predicateFunc, iterable)
散布図を▽マーカーで描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームの列を破壊的に取り除く	df.drop(column, axis=1, inplace=True)
二つの変数を改行なしに表示する	print(value, value2, end='')
折れ線グラフの上三角印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
タプルを集合に変換する	set(iterable)
等間隔の配列	np.arange(開始値, 終了値, 等差)
マッピングをコピーする	aDict.copy()
Pandasで、dateStringをタイムスタンプ型に変換する	pd.to_datetime(dateString)
範囲を指定して整数乱数を計算する	random.randint(最小値, 最大値)
をモジュールを検索するパスに追加する	sys.path.append(dir)
決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
外れ値に強い線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
option: ローングリーンにグラフの色を指定する	color = 'lawngreen'
整数nを8進文字列に変換する	oct(n)[2:]
サンディーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
ヒストグラムの色をパールバイオレットレッドにセットする	plt.hist(データ列, color='palevioletred')
横棒グラフをインディアンレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='indianred')
文字列をバイト配列にする	bytearray(s)
浮動小数点数のn乗	x ** n
分類結果のリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
全印字可能な文字	string.printable
文字列中からパターンに大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
ロバストな線形モデルを作る	model = sklearn.linear_model.HuberRegressor()
K最近傍法でクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
リストをy軸、リストをx軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
option: ロイヤルブルーを使う	color = 'royalblue'
環境がLinuxかどうか調べる	sys.platform.startswith('linux')
グラフから格子線を消す	plt.grid(False)
赤い▽マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
折れ線グラフの色をピーチパフに指定する	plt.plot(データ列x, データ列y, color='peachpuff')
配列とリストの散布図を描画してその大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
option: 色をミディアムスレートブルーにする	color = 'mediumslateblue'
タイムスタンプデータをISO形式の文字列に変換する	aDatetime.isoformat()
カウンタの下位をリストとして得る	aCounter.most_common()[:-n-1:-1]
データフレームのNaNを直後の値で置換する	df.fillna(method='bfill')
折れ線グラフの△マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
スカイブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
パターンにASCII限定として文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
option: 行列のデータ型を指定する	dtype = np.int
アクアマリン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
リストとデータ列の散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームのカラムの欠損値を中央値で補う	df[col].fillna(df[col].median())
文字列をパターンによって置換する	re.sub(pattern, newsub, s)
データフレームのヒストグラムを縦横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
データフレームの正規分布に対する上下広がり	df.skew()
2つの文字列は等しくないか調べる	s != s2
縦棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
ファイルを開いて]、バイナリ書き込みストリームを求める	open(filepath, mode='wb')
ファイル全体を行単位で分割して読む	f.readlines()
データフレームを'A'列と'B'列でまとめた表	df.groupby(['A', 'B'])
日付データからn分減らす	aDate - datetime.timedelta(minutes=n)
列のコンビネーションを得る	itertools.combinations(iterable, n)
列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
列の値によってデータフレームを集約して列挙する	[(name, group) for name, group in df.groupby(column)]
マッピングから項目名の値か、もしくは要素を得る	aDict.get(key, element)
ヒストグラムをモカシン色を使って描画する	plt.hist(データ列, color='moccasin')
日付データをISO8601書式の文字列にする	aDate.isoformat()
赤い△マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ライトコーラルにヒストグラムの色を設定する	plt.hist(データ列, color='lightcoral')
option: ダークゴールデンロッドに色を指定する	color = 'darkgoldenrod'
カウンタを少ない方からリストとして得る	aCounter.most_common()[::-1]
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
バリーウッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
ブラック色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
折れ線グラフの印を左三角印にする	plt.plot(データ列x, データ列y, marker='<')
オリーブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
横棒グラフをスラグレー色を使って描画する	plt.barh(データ列x, データ列y, color='slategray')
散布図の菱形マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
主成分分析を用いて多次元データを濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
折れ線グラフの色をオリベドラブに変更する	plt.plot(データ列x, データ列y, color='olivedrab')
タイムスタンプデータにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
折れ線グラフをダークオリーブグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
縦棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データ列を百の位で丸めて、整数にする	ds.round(-2).astype(int)
データフレームを小数点以下3桁までJSONLファイルに保存する	df.to_csv(filename, float_format='%.3f')
列のNaNを第二四分位数に設定する	ds.fillna(ds.median())
二つの列によってデータフレームを昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームの未入力値を最頻値にセットする	df.fillna(df.mode().iloc[0])
実線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
文字列の中で複数行対応として正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
リストと数列について散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ミスティローズにヒストグラムの色をする	plt.hist(データ列, color='mistyrose')
一点鎖線でヒストグラムを描く	plt.hist(データ列, linestyle='dashbot')
整数nの2進表現	bin(n)
stringモジュールをインポートする	import string
ヒストグラムの色をパールゴールデンロッドにする	plt.hist(データ列, color='palegoldenrod')
データフレームを列で整列して新しい行を加える	df.sort_values(columns).reset_index()
ファイルパスを絶対ファイルパスにする	os.path.abspath(filepath)
ゴールド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
カテゴリ列で色分けして、データフレームの全カラムの散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
オリベドラブ色でヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
空白が文字列内に含まれる	any(c.isspace() for c in s)
赤い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
オーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
折れ線グラフの色をコーンズシルクにセットする	plt.plot(データ列x, データ列y, color='cornsilk')
列の各データを両端キューの先頭に追加する	deq.extendleft(iterable)
円プロットでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
三角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
y軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
マッピングから最後の値をポップする	aDict.popitem()
シーケンスから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
数値を数値計算する	float(e)
JSON文字列を読み込む	json.loads(jsonString)
スタックを空にする	deq.clear()
ヒストグラムの色をインディゴにする	plt.hist(データ列, color='indigo')
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgray')
データフレームのヒートマップをグラフ化する	sns.heatmap(df.corr())
option: フォレストグリーンにグラフの色を設定する	color = 'forestgreen'
書き込みモードとしてファイルを開いて]、fとする	f = open(filepath, mode='w')
データ列のNaNを最頻値に変更する	ds.fillna(ds.mode().iloc[0])
文字列内にひとつでも空白が含まれるか確認する	any(c.isspace() for c in s)
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategray')
散布図の右三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
箱ひげ図を使ってデータフレームの２つのカラムを並べて作図する	plt.boxplot([df['カラム'], df['カラム']])
ポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.')
option: ロージーブラウンを使う	color = 'rosybrown'
縦棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
ライトスチールブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
文字列内にひとつでも英数字が含まれるかどうか	any(c.isalnum() for c in s)
リッジ回帰とロッソ回帰の組み合わせた分析の準備をする	model = sklearn.linear_model.ElasticNet()
カラムの中に存在する文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
ナバホホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='navajowhite')
赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
折れ線グラフをロイヤルブルー色として描画する	plt.plot(データ列x, データ列y, color='royalblue')
スクリプトファイルのフォルダ名	os.path.dirname(os.path.abspath(__file__))
回帰直線データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
文字列を部分文字列で分けた場合の残りの文字列	s.partition(sub)[-1]
文字列の両端から部分文字列を除く	s.strip(sub)
Pandasで文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
option: ハニーデューを使う	color = 'honeydew'
シエナ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
折れ線グラフに三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
リストと数列について散布図を描画して、マーカーを丸にセットする	plt.plot(データ列x, データ列y, marker='o')
option: ペルーにグラフの色を設定する	color = 'peru'
パールゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
折れ線グラフの色をスカイブルーに指定する	plt.plot(データ列x, データ列y, color='skyblue')
option: グラフの色をダークスレートブルーに指定する	color = 'darkslateblue'
入力ストリームから1文字読む	f.read(1)
データフレームの中の列と列に重複があれば、落とす	df.drop_duplicates(subset=[column, column2])
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgrey')
折れ線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームから指定された４つの列のみ抽出する	df[[column, column2, column3, column4]]
レモンシフォン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
データフレームの相関行列ケンドール相関係数として	df.corr(method='kendall')
最初のカテゴリーを除外してデータフレームの列をワンホット・ベクトルにする	pd.get_dummies(df[column], drop_first=True)
文字列のUNIX時間から日付データにする	pd.to_datetime(s, unit='s', utc=True)
データフレームから指定された２つの列を抽出する	df[[column, column2]]
データフレームを各列毎にグループ化し、、列の最小値を求める	df.groupby(column)[column2].min()
データフレームの重複した行数を数える	df.duplicated().sum()
データフレームのカラムをヒストグラムにする	plt.hist(df[column])
リストと数列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='teal')
散布図の星マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
データ列間のR2を求める	sklearn.metrics.r2_score(データ列, データ列2)
option: グラフの種類を破線にセットする	linestyle = 'dashed'
プロットに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
部分文字列が文字列中にないか調べる	sub not in s
option: エンコーディングを文字コードtextに指定する	encoding = text
破壊的にデータフレームを'A'列と'B'列によって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
折れ線グラフを点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
グラフを全般的に明るくする	sns.set(pallete='bright')
ローングリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
ベクトルの計算を行う	import numpy as np
線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
カテゴリで色分けして、カーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームの正規分布に対する左右対称性を求める	df.kurt()
option: アイボリーに色を設定する	color = 'ivory'
データフレームの列の値がxでないデータをフィルタする	df[df[column] == x]
ヒストグラムの色をディムグレーにする	plt.hist(データ列, color='dimgrey')
プロットに格子を加える	plt.grid(True)
カラムをキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
主成分分析で多次元データをパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
ヒストグラムの色をダークカーキに指定する	plt.hist(データ列, color='darkkhaki')
option: オールドレースにフォントの色を指定する	color = 'oldlace'
ダークスラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
EUCで書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='euc_jp')
クラス分類をバギングを使って行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
ゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
データフレームを表示するとき、最大行数をnに設定する	pd.set_option('display.max_rows', n)
option: 線種を破線に設定する	linestyle = 'dashed'
ブルーバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
データフレームを小さい順に二つの列で破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
赤い実線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
折れ線グラフに黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフの色をビスクにセットする	plt.plot(データ列x, データ列y, color='bisque')
ヒストグラムベースの勾配ブースティング分類木を準備する	model = sklearn.ensemble.HistGradientBoostingClassifier()
２つのオブジェクトが等しい	obj == obj2
ヒストグラムの色をバリーウッドにする	plt.hist(データ列, color='burlywood')
横棒グラフを描き、、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
データフレームを大きい順に'A'列を用いてによってソートする	df.sort_values(by='A', ascending=False)
からデータフレームを読み込む	pd.read_excel(filename)
グラフをプロットする	import matplotlib.pyplot as plt
ミディアムシアグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='mediumseagreen')
散布図の右三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
ファイルを文字コードtextで開く]	open(filepath, encoding=text)
線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
データフレームを各列と列の組み合わせ毎に集計して、最大値を求める	df.groupby([column, column2], as_index=False).max()
option: ライトシアン色を用いる	color = 'lightcyan'
線グラフの線種を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフをマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='magenta')
Pythonのバージョンを知る	sys.version
線を赤い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームの空文字を未入力値に変換しドロップする	df.replace('', np.nan).dropna()
option: グラフの色をラベンダーブラッシュに変更する	color = 'lavenderblush'
折れ線グラフの色をミスティローズに指定する	plt.plot(データ列x, データ列y, color='mistyrose')
散布図の左三角印を黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
正規化された度数分布図を描画する	plt.hist(データ列, density=True)
sepを区切りにして文字列リストをひとつの文字列にする	sep.join(aStringList)
option: 耐火レンガにフォントの色を設定する	color = 'firebrick'
データフレームの列の母標準偏差	df[col].std(ddof=0)
文字列の最初から空白を取り除く	s.lstrip(' ')
データフレームのカラムのメディアン	df[col].median()
nが3で割り切れる	n % 3 == 0
ヒストグラムをペールグリーン色として描画する	plt.hist(データ列, color='palegreen')
トマト色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
データフレームを昇順に'A'列と'B'列によってソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
昨日の日付を使う	datetime.date.today() - datetime.timedelta(days=1)
回帰分析をバギングで行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
折れ線グラフの右三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
データ列のR2を算出する	sklearn.metrics.r2_score(データ列, データ列2)
散布図にクロス印を用いる	plt.scatter(データ列x, データ列y, marker='x')
数値を部分分数として展開する	sympy.apart(e)
スチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
option: フォントの色をカデットブルーにセットする	color = 'cadetblue'
要素ひとつのタプルを作る	(element,)
横棒グラフをミッドナイトブルー色として描画する	plt.barh(データ列x, データ列y, color='midnightblue')
組の平均値を求める	sum(aTuple)/len(aTuple)
データフレームから指定した三つの列を抽出する	df[[column, column2, column3]]
データフレームをグループ化し、列に対し標準偏差を計算する	df.groupby(column)[column2].std()
option: シアン色を用いる	color = 'cyan'
表をグループ化し、各列に対し平均値を求める	df.groupby(column)[column2].mean()
タプルの項目名の値	aDict[key]
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
範囲を指定して乱数を得る	random.randint(最小値, 最大値)
2つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
リストとイテラブルの散布図にrgbのポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームの列の空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
option: ミディアムバイオレットレッド色を使用する	color = 'mediumvioletred'
リストとイテラブルについての散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームのリスト列の文字列を欠損値にする	df[aList].replace(s, np.nan)
option: ダイアモンドマーカーを加える	marker = 'D'
option: ミスティローズを用いる	color = 'mistyrose'
折れ線グラフの色をダークスレートブルーにセットする	plt.plot(データ列x, データ列y, color='darkslateblue')
リストとリストの散布図をプロットしてマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
オプションで標準エラーを出力先にする	file = sys.stderr
散布図に黒い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='k')
テンプレートをマッピングでフォーマットする	formatText.format_map(aDict)
文字列を走査し正規表現にマッチするか確認する	re.search(pattern, s)
新しいロバスト分類モデルを新規作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
２つの列によってでデータフレームを破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
nの各桁の総和を計算する	sum(map(int, str(n)))
JSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
タプル内の要素が少なくとも一つ真か	any(aTuple)
プラットホームのエンコーディング	sys.getdefaultencoding()
nからstep間隔でいつまでもカウントアップする	itertools.count(start=n, step=step)
タブ文字を使う	'\t'
辞書からキーの値をエラーなく参照する	aDict.get(key, None)
データフレームのカラムのタイムゾーンを文字列に指定する	df[col].tz_convert(s)
エンディアンを使う	sys.byteorder
線形回帰モデルの切片	model.intercept_
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightgreen')
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
option: フォントの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
ブラック色でヒストグラムを描画する	plt.hist(データ列, color='black')
実数を浮動小数点数で割る	x / y
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
データフレームのカラムをdatetime64型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
縦棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
option: フォントの色をダークオリーブグリーンに指定する	color = 'darkolivegreen'
散布図のバツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
rgbの▽マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
複数のデータフレームを横向きに連結する	pd.concat([df, df2, df3], axis=1)
option: グラフの色をダークオリーブグリーンに変更する	color = 'darkolivegreen'
option: グラフの色をダークバイオレットに変更する	color = 'darkviolet'
ダークマゼンタ色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
記号計算を使う	import sympy
Pandasでデータフレームのカラムをタイムスタンプ型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
茶色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
折れ線グラフに青い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
ヒストグラムを黄色色を用いて描画する	plt.hist(データ列, color='yellow')
プロットで用いる縦軸の名前をuntitledに指定する	plt.ylabel('y軸ラベル')
ヒストグラムをピーチパフ色として描画する	plt.hist(データ列, color='peachpuff')
日付と時刻から日付時刻を作る	datetime.datetime(年, 月, 日, 時, 分, 秒)
列でデータフレームをまとめたグループ	df.groupby(column)
option: フォントの色をパウダーブルーに設定する	color = 'powderblue'
部分文字列が文字列の開始位置以降に含まれるか	s.find(sub, start) != -1
折れ線グラフの色をサンディーブラウンに指定する	plt.plot(データ列x, データ列y, color='sandybrown')
ヒストグラムをダークレッド色として描画する	plt.hist(データ列, color='darkred')
カウンタを低頻度方からリストとして得る	aCounter.most_common()[::-1]
シルバー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
グラフのタイトルをセットする	plt.title('グラフの名称')
ヒストグラムをレベッカパープル色として描画する	plt.hist(データ列, color='rebeccapurple')
線グラフの色をミディアムアクアマリンにする	plt.plot(データ列x, データ列y, color='mediumaquamarine')
八進数文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
縦棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
データフレームのリスト列の欠損値を中央値で補う	df[aList].fillna(df[aList].median())
データフレームから型のみ取り出す	df.select_dtypes(ty)
ライトグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
リストとリストの散布図を描いて、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
今日が水曜日か調べる	datetime.datetime.today().weekday() == 2
ヒストグラムの描き、、正規化する	plt.hist(データ列, density=True)
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
入力から二つの文字を取り出す	A, B = map(str, input().split())
ライトスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
リストとデータ列について散布図を描画し、、左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ベクトルの列ごとの合計値を求める	np.sum(aArray, axis=0)
散布図を赤いクロスマーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームを各カラム毎にグループ化して、列の合計を計算する	df.groupby(column)[column2].sum()
パレットトルコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
有理数モジュールをインポートする	import fractions
データフレームを各列毎に集約して、文字列というグループの個数を計算する	df.groupby(column).size()[s]
文字列を評価する	eval(s)
縦方向に二つのデータフレームをつなぐ	pd.concat([df, df2])
データフレームを整数に四捨五入する	df.round()
option: クリムゾン色を用いる	color = 'crimson'
赤い星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒートマップでデータフレームの列と列の相関行列を描画する	sns.heatmap(df[[column, column2]].corr())
option: ローングリーン色を用いる	color = 'lawngreen'
オールドレース色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
散布図の星マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
半透明の破線を用いて折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
切り下げて整数に変換する	math.floor(x)
ラインを半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
横棒グラフをタン色として描画する	plt.barh(データ列x, データ列y, color='tan')
縦棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgrey')
赤い大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
option: オーキッドを使う	color = 'orchid'
折れ線グラフの星印を青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの列がxである行を取り出す	df[df[column] == x]
option: ラベンダーブラッシュを使う	color = 'lavenderblush'
横棒グラフをバリーウッド色として描画する	plt.barh(データ列x, データ列y, color='burlywood')
option: 改行を区切りで使う	sep = '\n'
三変数の最も大きい値を求める	max(x, y, z)
バイアスなしの単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
nが偶数	n % 2 == 0
データフレームを'A'列によって並べ、、更新する	df.sort_values(by='A', inplace=True)
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームが重複しているかどうか調べる	df.duplicated()
インタプリタの実行ファイルの絶対パスを調べる	sys.executable
リストとリストの散布図を描画し、マーカーを下三角に指定する	plt.plot(データ列x, データ列y, marker='v')
option: フォントの色をライトブルーに設定する	color = 'lightblue'
横棒グラフをシャルトリューズ色として描画する	plt.barh(データ列x, データ列y, color='chartreuse')
折れ線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
文字列でフォーマットして日付時刻データを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
マゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
オレンジレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
カテゴリでグループ化して、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
分割数nを用いてデータフレームの中の列をビニングする	pd.cut(df[col], n)
横棒プロットを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームの列の歪度を求める	df[col].kurt()
データフレームの未入力値を直後の値に指定する	df.fillna(method='bfill')
option: グラフの色をナバホホワイトにセットする	color = 'navajowhite'
二つの文字列をカンマで区切って表示する	print(value, value2, sep=',')
折れ線グラフをライトイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightyellow')
数字を全て使う	string.digits
パールゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
ヒストグラムの色をスカイブルーに変更する	plt.hist(データ列, color='skyblue')
グラフのフォントを日本語に設定する	sns.set(font='IPAexGothic')
ヒストグラムをスラグレー色を使って描画する	plt.hist(データ列, color='slategrey')
ヒストグラムの色をベージュに変更する	plt.hist(データ列, color='beige')
散布図に黒い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='k')
リストと配列の散布図を描画して、右三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
正規表現で文字列を分割する	re.split(pattern, s)
別の文字列に文字列中の部分文字列を全部置き換える	s.replace(sub, newsub)
赤い破線を使ってリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
グラフをスライド用に変更する	sns.set(context='talk')
option: ミスティローズを使う	color = 'mistyrose'
ミッドナイトブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
散布図をダークバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
ヒストグラムの色をディープスカイブルーにする	plt.hist(データ列, color='deepskyblue')
ライムグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
option: フォントの色をライトスチールブルーに変更する	color = 'lightsteelblue'
タイムスタンプデータをn分前にする	aDatetime - datetime.timedelta(minutes=n)
無限に列を繰り返す	itertools.cycle(iterable)
エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
縦棒グラフをスチールブルー色を使って描画する	plt.bar(データ列x, データ列y, color='steelblue')
大文字と小文字を逆にする	s.swapcase()
散布図に青い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームの列の中にと文字列がいくつ存在するかカウントする	df[col].isin([value, value2]).sum()
文字列内にアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
線グラフの色をミディアムシアグリーンに指定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
キューの順序を右にn個分ローテンションする	deq.rotate(n)
データ列の未入力値をxに設定する	ds.fillna(x)
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
オブジェクトのプロパティの値を使う	getattr(obj, プロパティ名)
option: 表示を半透明にする	alpha = 0.5
リストの最後を除く	aList[:-1]
y軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
文字列の開始位置から終了位置の範囲で部分文字列をカウントする	s.count(sub, start, end)
イテラブルとしてカウンタを更新する	aCounter.update(iterable)
リストと数列についての散布図に赤い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='r')
タプルの最初を取り除く	aTuple[1:]
横棒グラフをカデットブルー色として描画する	plt.barh(データ列x, データ列y, color='cadetblue')
option: ブラック色を用いる	color = 'black'
カラーバーを描く	plt.colorbar()
横棒グラフをライトゴールドロディイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
部分文字列によって文字列を区切る	s.split(sub)
数の複素数	complex(x)
折れ線グラフに黒い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームを２つの列でまとめたグループ	df.groupby(['A', 'B'])
表データを'A'列によって並べて、更新する	df.sort_values(by='A', inplace=True)
縦棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
数式の数値	float(e)
option: シルバーを使う	color = 'silver'
マップにマッピングの値を更新する	aDict.update(aDict2)
スカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
エクセルデータファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
リストとデータ列の散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
度数分布図のビン数を設定する	plt.hist(データ列, bins=区関数)
折れ線グラフに左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
option: 色をモカシンに設定する	color = 'moccasin'
SJISでデータフレームをJSONLファイルに保存する	df.to_csv(filename, encoding='shift_jis')
本日の曜日を整数で見る	datetime.datetime.today().weekday()
クラス分類をガウス過程として行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: マーカーを星に変える	marker = '*'
棒プロットの色をする	plt.bar(ラベル列, データ列, color=rgb)
ミディアムスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
キーがマッピングに存在するか確認する	key not in aDict
黒いバツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
オブジェクトはリストかタプルか	isinstance(obj, (list)
option: ライトスレイグレーを用いる	color = 'lightslategray'
ミッドナイトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
option: バッファリングのサイズを小さくする	buffering = 4096
ライトスレイグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
ヒストグラムの色をパパイヤウィップに変更する	plt.hist(データ列, color='papayawhip')
option: 文字コードをEUCに設定する	encoding = 'euc_jp'
nの二進文字列	bin(n)[2:]
二つのオブジェクトが同一参照	obj is obj2
サーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
option: スタイルを点線に設定する	linestyle = 'dotted'
散布図をマルーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='maroon')
棒グラフをミディアムブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumblue')
文字列中のパターンを新しい文字列で置き換える	re.sub(pattern, newsub, s)
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
小数点数の逆余弦	math.acos(x)
タイムスタンプデータからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
リストをリストを境界値として分割する	pd.cut(aList, aList)
アンティークホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
ASCII限定として正規表現で文字列を区切る	re.split(pattern, s, flags=re.ASCI)
文字列の先頭から部分文字列を除く	s.lstrip(sub)
option: ベクトルのデータ型を指定する	dtype = np.int16
行列にはいくつ要素があるか調べる	aArray.size
現在の日付	datetime.date.today()
折れ線グラフのクロスマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
リストとリストについて散布図を描いて、文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
データフレームの列を散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
データフレームから一番右側の列を除く	df[df.columns[:-1]]
サーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
シーケンスを文字列に変換して、部分文字列を用いて結合する	sub.join(map(str, iterable))
イテラブルから一つランダムに選ぶ	random.choice(iterable)
散布図に赤い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
シルバー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
双方向キューに値をエンキューする	deq.appendleft(element)
ミディアムスプリンググリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
赤い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
option: バツ印を使う	marker = 'x'
辞書を浅く複製する	dict(aDict)
option: グラフの色をフクシアにする	color = 'fuchsia'
表データから列を3つ選択する	df[[column, column2, column3]]
ファイルパスからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
文字列中に部分文字列が存在しない	sub not in s
option: 三角マーカーを加える	marker = '^'
タイムスタンプデータが水曜日か	aDatetime.weekday() == 2
データフレームのカラムの中に含まれる文字列との合計を求める	df[col].isin([value, value2]).sum()
浮動小数点数とyの斜辺	math.hypot(x, y)
データフレームのカラムの尖度を求める	df[col].skew()
2つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
暗い赤色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkred')
option: 線種を点線に変更する	linestyle = 'dotted'
データフレームのリストで指定された列の相関行列ピアソン積率相関係数を用いて	df[aList].corr(method='pearson')
データフレームを'A'列の値によってグループ化し、要約統計量を計算する	df.groupby('A').describe()
実数の正弦を算出する	math.sin(x)
option: 色を小麦色に設定する	color = 'wheat'
option: ポイントマーカーを用いる	marker = '.'
折れ線グラフをハニーデュー色として描画する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームの列は正規分布からどの程度、尖っているか確認する	df[col].skew()
データフレームのそれぞれのグループの最小値	df.groupby(column).min()
nのビット長	n.bit_length()
データフレームを各列と列の組み合わせ毎にグループ化して最小値を算出する	df.groupby([column, column2], as_index=False).min()
辞書上で項目名が定義済みか調べる	key in aDict
線グラフを色付きの実線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: サドルブラウンにグラフの色を指定する	color = 'saddlebrown'
要素を両端キューの先頭に追加する	deq.appendleft(element)
データ列と配列についての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
列の値によってデータフレームを集約し、、それぞれのグループごとの個数を求める	df.groupby(column).count()
バリーウッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
白色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
データフレームのカラムの値が欠損値かどうか	df[col].isna()
クラスのサブ型か判定する	issubclass(サブクラス, クラス)
データフレームのカラムの秒を使う	df[col].dt.second
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列x, データ列y, color='darksalmon')
線グラフの色を珊瑚に設定する	plt.plot(データ列x, データ列y, color='coral')
option: フォントの色をブラウンに設定する	color = 'brown'
シスル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
option: グラフの色をオレンジに指定する	color = 'orange'
多次元データを特異値分解を使って濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
縦棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
濃いシアンにヒストグラムの色を指定する	plt.hist(データ列, color='darkcyan')
型のサブクラスか調べる	issubclass(サブクラス, クラス)
ファイルを読み込み用に開き]、fとする	f = open(filepath, mode='r')
文字列がリストに含まれるか	element in aList
棒グラフをライトスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームを'A'列によって小さい順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームを表示するとき表示可能な行数を増やす	pd.set_option('display.max_rows', n)
ダークグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
データフレームを'A'列で並べ直して、NaNを先頭にする	df.sort_values(by='A', na_position='first')
散布図に三角印を加える	plt.scatter(データ列x, データ列y, marker='^')
列の重複組み合せ	itertools.combinations_with_replacement(iterable, n)
配列と配列についての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
散布図の左三角印を青色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
空の階層化マップ	collections.ChainMap()
データ列とリストについての散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
ふたつの集合のいずれか一方だけの集合を使う	aSet.symmetric_difference(aSet2)
散布図の印の線幅を設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
データフレームの列の値は欠損値か確認する	df[col].isna()
行列の行ごとの合計値を求める	np.sum(aArray, axis=1)
データフレームのカラムを十の位で丸めて整数型にする	df[col].round(-1).astype(int)
option: フォントの色をブランチドアーモンドに指定する	color = 'blanchedalmond'
データフレームを列によってを用いて降順にソートする	df.sort_values(by=column, ascending=False)
実測値を分類モデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
option: インディゴ色を使用する	color = 'indigo'
option: フォントの色をシスルに設定する	color = 'thistle'
折れ線グラフに青いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
横棒グラフをミディアムブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumblue')
散布図の四角印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
文字列の中のASCII限定として正規表現によるマッチを使う	re.findall(pattern, s, flags=re.ASCI)
予測結果の再現率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
タプル中の要素が全て真かどうか調べる	all(aTuple)
データフレームのカラムの中に文字列と日付データがいくつ含まれるか数える	df[col].isin([value, value2]).sum()
関数の値によってデータフレームをグループ化する	df.groupby(関数)
青緑色として散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
データフレームをタブ区切りを用いてJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
配列を一次元にする	aArray.flatten()
サンディーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
クラス分類をブースティングとして行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
データ列が正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(データ列)
折れ線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
折れ線グラフを半透明の実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
時計回りに円プロットを描く	plt.pie(データ列, startangle=90, counterclock=False)
散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
既存のファイルをBOM付きを使って追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
文字列の末尾から部分文字列を取り除く	s.removesuffix(sub)
文字列の右側からタブを消す	s.rstrip('\t')
option: ラベンダー色を使用する	color = 'lavender'
横棒グラフをバリーウッド色を用いて描画する	plt.barh(データ列x, データ列y, color='burlywood')
リストを箱髭図として可視化する	plt.boxplot(データ列)
折れ線グラフの三角印の太さを指定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
文字列の開始位置からと終了位置番目までの間に部分文字列が含まれないか	s.find(sub, start, end) == -1
ASCII限定としてパターンに文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
タプルの値数	len(aDict)
option: グラフの線の種類を一点鎖線に指定する	linestyle = 'dashbot'
二つの集合の共通部分を算出する	aSet.intersection(aSet2)
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
整数を実数に加える	x + y
カウンタのユニークな要素を列挙する	list(aCounter)
日付をインポートする	import datetime
option: 色をミディアムパープルに設定する	color = 'mediumpurple'
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
表データを各列毎にグループ化して、列の平均値を算出する	df.groupby(column)[column2].mean()
追加できるようにファイルをUTF8で開く]	open(filepath, mode='a', encoding='utf-8')
ターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
折れ線グラフの四角印を赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
xの小数点以下'2'桁までを出力する	print(':.2f'.format(x))
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
オプションで標準エラーを出力にする	file = sys.stderr
散布図を黒いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
リストと数列についての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
ゴールデンロッド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
二変数の最小値を求める	min(x, y)
現在が金曜日かどうか	datetime.datetime.today().weekday() == 4
データ列の値が正規分布にしたがって発生する累積確率を計算する	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
レモンシフォン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
option: マーカーの色をダークレッドにする	markerfacecolor = 'darkred'
列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
エラーなく文字列の接頭辞から部分文字列を除く	s.removeprefix(sub)
Pandasでデータフレームのcollをタイムスタンプに変換する	pd.to_datetime(df[col])
列と列の直積	itertools.product(iterable, iterable2)
データフレームの中にいくつ文字列が含まれるか数える	df.isin([value]).sum()
線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
ゼロ埋めされた整数型の行列を作る	np.zeros(要素数, dtype=np.int)
ライトゴールドロディイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
行列を2次元1列に変形する	aArray.reshape(-1, 1)
option: 青緑色を使用する	color = 'turquoise'
ライム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
レベッカパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
折れ線グラフの色をブルーバイオレットに変更する	plt.plot(データ列x, データ列y, color='blueviolet')
option: シアンを使う	color = 'cyan'
全要素を０で初期化した８ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int8)
option: 色をリネンに変更する	color = 'linen'
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
文字列をカンマを用いて区切り、、列挙する	s.split(',')
ふたつの集合が互いに素	aSet.isdisjoint(aSet2)
棒グラフの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
縦棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
文字列リストを結合し、ひとつの文字列にする	''.join(map(str, iterable))
混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
文字列の長さを使う	len(s)
レモンシフォン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
マッピングを複製する	aDict.copy()
実数が整数かどうか確認する	x.is_integer()
日付時刻データと日付時刻データの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()
リストをマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
文字列中にひとつでも非数字が含まれる	any(not c.isdigit() for c in s)
リストを等しい量になるように分割数nでビン分割する	pd.qcut(aList, n)
回帰木分析を行う	model = sklearn.tree.DecisionTreeRegressor()
データ列とデータ列について散布図を描画し、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムの色を珊瑚に設定する	plt.hist(データ列, color='coral')
二つの集合が集合と交わりを持たないか	aSet.isdisjoint(aSet2)
option: フォントの色をダークレッドに設定する	color = 'darkred'
シンボル計算モジュールを使用する	import sympy
線グラフの色を青紫に指定する	plt.plot(データ列x, データ列y, color='violet')
縦棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
配列を横ベクトルに変形する	aArray.reshape(1, -1)
カテゴリでグループ化して、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
タプルが少なくともひとつ真	any(aTuple)
円プロットの百分率を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
オレンジレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
時間をインポートする	import time
Pythonパスにディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
赤いポイントマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
カラムのNaNを直前の値に設定する	ds.fillna(method='ffill')
option: タブを区切りで用いる	sep = '\t'
データフレームを二つの列によってによって降順に並べ直す	df.sort_values(by=['A', 'B'], ascending=False)
部分文字列を文字列の終了位置まで探す	s.find(sub, 0, end)
マルーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
option: どの行もカラムの名前に設定しない	header = None
カウンタの文字列数	len(aCounter)
ヒストグラムをネイビー色として描画する	plt.hist(データ列, color='navy')
ヒストグラムでカラーマップを用いる	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
UTF8でファイルをオープンする]	open(filepath, encoding='utf-8')
縦軸の目盛りの値を変更する	plt.yticks(目盛りの値リスト)
ダークゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
Pandasで、日付データのデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
rgbの▽マーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データ列と数列について散布図を描画し、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
棒グラフをライトイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightyellow')
日付データは日付データよりあと	aDate > aDate2
マッピングにキーが存在する	key in aDict
リストと配列についての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
データフレームのカラムの値が欠損値	df[col].isna()
nとn2の値を足してnにする	n += n2
線グラフの色をパールバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='palevioletred')
option: グラフの色をライトグレーにする	color = 'lightgrey'
ヒストグラムの色をライトスチールブルーに変更する	plt.hist(データ列, color='lightsteelblue')
表データを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
論文にプロットの使途を設定する	sns.set(context='paper')
スラグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
配列の変遷を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
ヒストグラムの色をターコイズに変更する	plt.hist(データ列, color='turquoise')
ブール型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int32)
オーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='orchid')
散布図に右三角印を使う	plt.scatter(データ列x, データ列y, marker='>')
オールドレースにヒストグラムの色を指定する	plt.hist(データ列, color='oldlace')
データ列のNaNを平均値に変更する	ds.fillna(ds.mean())
列の値によってデータフレームを集約し、、それぞれのグループの合計を求める	df.groupby(column).sum()
option: フォントの色をミディアムアクアマリンに変更する	color = 'mediumaquamarine'
予測結果の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
オブジェクトは文字列クラスのインスタンスか調べる	isinstance(obj, str)
ファイルがあるか調べる	os.path.exists(filepath)
本日が火曜日かどうか調べる	datetime.datetime.today().weekday() == 1
xのハッシュ値を算出する	hash(x)
リストをひとつ置きに得る	aList[::2]
ミディアムブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
淡い茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
データフレームのリストカラムの欠損値を直前の値で補う	df[aList].fillna(method='ffill')
オブジェクトは数値	isinstance(obj, (int,float))
option: どのカラムもインデックスにしない	index_col = None
ケンドールの相関係数を計算する	scipy.stats.kendalltau(データ列, データ列2)
散布図のクロス印を赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データフレームの重複した行数のマスクを見る	df.duplicated()
自然数個のものからk個取り出した時の並べ方の総数	math.perm(n, k)
1文字だけ標準入力から読む	sys.stdin.read(1)
ロバストな単回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
データフレーム全体を降順で行によって並べ直す	df.sort_index(ascending=False)
アリスブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
散布図の大バツ印を青色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
折れ線グラフに青いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
日付時刻データからn週間分減らす	aDatetime - datetime.timedelta(weeks=n)
ベクトルの合計値	np.sum(aArray)
ファイルを改行除外して一行ずつ読み込む	f.readline()
散布図をインディゴ色を使って描画する	plt.scatter(データ列x, データ列y, color='indigo')
昇順にデータフレームを列で整列する	df.sort_values(by=column, ascending=True)
リストのオブジェクトが最初に見つかる場所	aList.index(element)
縦棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームとデータ列を連結する	pd.concat([df, ds], axis=1)
ライムにヒストグラムの色を設定する	plt.hist(データ列, color='lime')
散布図をピンク色として描画する	plt.scatter(データ列x, データ列y, color='pink')
にバイオリン図でデータフレームのカラムを描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
オレンジ色でヒストグラムを描画する	plt.hist(データ列, color='orange')
線グラフの色をバリーウッドに指定する	plt.plot(データ列x, データ列y, color='burlywood')
データフレームを複数の列で昇順に整列する	df.sort_values(by=column, ascending=True)
標準出力を即時表示する	sys.stdout.flush()
アンティークホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
アクアマリン色としてヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
赤色としてヒストグラムを描画する	plt.hist(データ列, color='red')
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
散布図をオリーブ色を用いて描画する	plt.scatter(データ列x, データ列y, color='olive')
ヒストグラムの色をオリベドラブに変更する	plt.hist(データ列, color='olivedrab')
縦棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
グラフにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
集合のすべての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
スラグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
昇順にリストの要素をソートする	sorted(aList, reverse=False)
データフレームからカラムを４つ選択する	df[[column, column2, column3, column4]]
リストを青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
三整数の最大公約数	math.gcd(n, n2, n3)
データ列を百の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
データフレームの列の文字列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
データフレームをグループ化し、各列に対し分散を求める	df.groupby(column)[column2].var()
データフレームを二つの列によって小さい順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
縦棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
整数を十の位で四捨五入する	round(x, -1)
行列を平坦化する	aArray.flatten()
データフレームを複数の列で昇順にソートする	df.sort_values(by=column, ascending=True)
２つのカウンタのいずれかに含まれる値を求める	aCounter | aCounter2
option: namesをカラムの名前に指定する	names = names
文字列の先頭から空白を除去する	s.lstrip()
二つの文字列は等しくない	s != s2
変数が無限大に近づくときの数値の極限値を算出する	sympy.limit(e, z, oo)
option: グラフの色を黄緑に指定する	color = 'chartreuse'
データフレームの中の列と列に重複があれば、消す	df.drop_duplicates(subset=[column, column2])
散布図に赤い△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
フォレストグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
セットを空にする	aSet.clear()
ヒストグラムの色をミッドナイトブルーに変更する	plt.hist(データ列, color='midnightblue')
線グラフをラベンダーブラッシュ色として描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
イテラブルを累積したイテラブルを求める	itertools.accumulate(iterable, operator.mul)
整数nの十六進数文字列を使う	hex(n)[2:]
日付時刻データの秒	aDatetime.second
nからstep間隔で無限に数え上げるする	itertools.count(start=n, step=step)
データフレームの列をドロップして更新する	df.drop(column, axis=1, inplace=True)
'A'列ででデータフレームを降順にソートする	df.sort_values(by='A', ascending=False)
オリーブ色を用いてヒストグラムを描画する	plt.hist(データ列, color='olive')
データ列の変遷を実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
線グラフの色をパパイヤウィップに指定する	plt.plot(データ列x, データ列y, color='papayawhip')
ビン数nでデータフレームの中の列をビン分割する	pd.cut(df[col], n)
ヒストグラムをシアン色として描画する	plt.hist(データ列, color='cyan')
option: 線の幅を3.0ポイントに指定する	linewidth = 3.0
ロイヤルブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
ロバストな線形分類器を作る	model = sklearn.linear_model.HuberClassifier()
option: ライトサーモンを使う	color = 'lightsalmon'
ヒストグラムをピンク色を用いて描画する	plt.hist(データ列, color='pink')
ハニーデューにヒストグラムの色を指定する	plt.hist(データ列, color='honeydew')
データフレームから型リストで指定されたデータ型のカラムを抽出する	df.select_dtypes(include=typeList)
option: ダークゴールデンロッドを使う	color = 'darkgoldenrod'
n進文字列を整数にする	int(s, n)
データフレームを散布図でグラフ化してカテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
option: アンティークホワイトにグラフの色を設定する	color = 'antiquewhite'
線グラフの色を青紫にセットする	plt.plot(データ列x, データ列y, color='violet')
横棒グラフをハニーデュー色として描画する	plt.barh(データ列x, データ列y, color='honeydew')
横棒グラフをパールバイオレットレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='palevioletred')
箱ひげ図を横に並べて描く	plt.boxplot([データ列, データ列])
リストの最初を取り除く	aList[1:]
TSVファイルをデータフレームとして読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
改行で文字列を分割する	s.splitlines()
データフレームのそれぞれのグループごとの最大値を求める	df.groupby(column).max()
データフレームの中にいくつ欠損値が含まれるか求める	df.isna().sum()
コーラル色でヒストグラムを描画する	plt.hist(データ列, color='coral')
文字列リストをつなげる	''.join(aStringList)
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
文字列中から正規表現に大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
文字列を後ろから空白で区切る	s.rsplit()
数列間の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
アイボリー色でヒストグラムを描画する	plt.hist(データ列, color='ivory')
重複する行のみを取り出す	df[df.duplicated(keep=False)]
散布図の四角印を赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
データフレームの中の列を四分位数ごとに分割する	pd.qcut(df[col], 4)
option: ホワイトにグラフの色を設定する	color = 'white'
青紫色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
マッピングからキーの値を得る	aDict.get(key)
数列とリストについての散布図に赤い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
折れ線グラフの色をフォレストグリーンに変更する	plt.plot(データ列x, データ列y, color='forestgreen')
縦棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
横棒グラフの色をrgbにセットする	plt.barh(ラベル列, データ列, color=rgb)
日付時刻データが木曜日か判定する	aDatetime.weekday() == 3
横棒グラフを描画して、棒の幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategray'
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
cos	math.cos(x)
折れ線グラフの大バツ印を赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
黒いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
青色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
ライトグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームの中の列を四分位数でビン分割する	pd.qcut(df[col], 4)
四角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
ペルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
後の行の値でデータフレームのカラムのNaNを埋める	df[col].fillna(method='bfill')
正規分布による確率密度関数を使う	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
データフレームの列の文字列で文字列が含まれる行を取り出す	df[df[column].str.contains(s)]
青い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
スピアマン相関係数でデータフレームのリストカラムの相関行列	df[aList].corr(method='spearman')
データフレームの中にある日付データと文字列の数を数える	df.isin([value, value2]).sum()
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
整数nを16進表現に変換する	hex(n)
インディゴ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
データフレームを２つの列によってソートする	df.sort_values(by=['A', 'B'])
バイナリ書き込み用にファイルをオープンして]、fとする	f = open(filepath, mode='wb')
浮動小数点数の分数近似	q.limit_denominator(max_denominator=1000000)
インタプリタの実行ファイルの絶対パス	sys.executable
縦棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
0から始まるn個の整数列を作る	list(range(n))
option: 青緑を使う	color = 'turquoise'
線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
ヒストグラムの線種を点線に設定する	plt.hist(データ列, linestyle='dotted')
データフレームのリストカラムの第二四分位数	df[aList].median()
データ列の値が未入力値か確認する	ds.isna()
ゼロ埋めした複素数型の配列を作成する	np.zeros(要素数, dtype=bool)
縦棒グラフを描画し、棒の横幅を変更する	plt.bar(ラベル列, データ列, width=0.5)
データフレームのカラムの曜日数を使う	df[col].dt.dayofweek
数列とリストの散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
浮動小数点数の最大値を算出する	sys.float_info.max
線グラフを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
白色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
破線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
リストと配列についての散布図にバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x')
Pandasで書式を用いてデータフレームのcollをdatetime64型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
左三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategrey')
イテラブルを配列にする	np.array(iterable)
ファイルを読む	pd.read_excel(filename)
実数の２乗	x ** 2
ゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
列を変更不能な集合に変換する	frozenset(iterable)
データ列とリストについて散布図を描き、、左三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図を淡いピンク色色として描画する	plt.scatter(データ列x, データ列y, color='lightpink')
データフレームの列の欠損値を中央値で埋める	df[col].fillna(df[col].median())
option: ヘッダをnamesに指定する	header = names
データフレームの中の列を中央値でビニングする	pd.qcut(df[col], 2)
回帰分析をアンサンブル学習で行う	sklearn.ensemble.VotingRegressor()
カデットブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームの列をインプレイスで削除する	df.drop(column, axis=1, inplace=True)
折れ線グラフに星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
サンディーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='sandybrown')
散布図の右三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
リストの最後を取り除く	aList[:-1]
実線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
部分文字列が部分文字列で始まるかどうか	s.startswith(sub)
ヒストグラムの色をホワイトに変更する	plt.hist(データ列, color='white')
データフレームの列の欠損値を平均値に設定する	df[col].fillna(df[col].mean())
２つのオブジェクトは等しいか調べる	obj == obj2
二つのデータフレームを列'A'と列'B'をキーとして全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
散布図にrgbのバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
実数の小数部を求める	math.modf(x)[0]
白色で文字列をプリントする	print(f'\033[37m{value}\033[0m')
平均値でデータフレームのリスト列のNaNを埋める	df[aList].fillna(df[aList].mean())
カラムは正規分布からどの程度尖っているか見る	ds.skew()
option: フォントの色をダークグレーに変更する	color = 'darkgrey'
折れ線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
チョコレートにヒストグラムの色を設定する	plt.hist(データ列, color='chocolate')
データフレームのカラムが正規分布からどの程度、尖っているか確認する	df[col].skew()
文字列に日本語が使われているか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
行列の行ごとの最大値を算出する	np.max(aArray, axis=1)
option: 色をダークグレーに設定する	color = 'darkgrey'
リストを文字列に変換してタブで結合する	'\t'.join(map(str, iterable))
折れ線プロットのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
縦棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
浮動小数点数を千の位で丸める	round(x, -3)
データフレームの中の列を等しい量になるようにn個にビンニングする	pd.qcut(df[col], n)
散布図のマーカーの色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
乱数で要素を埋めた配列を作る	np.random.random(N)
整数nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
option: スキップするフッタをnに指定する	skipfooter = n
nがn2より大きいか確認する	n > n2
データフレームを表示するとき、表示可能な最大行数を増やす	pd.set_option('display.max_rows', n)
両端キューの値数を求める	len(deq)
棒グラフをミディアムブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumblue')
シーケンスとイテラブルを連結する	itertools.chain(iterable, iterable2)
プログラムの実行を正常終える	sys.exit(0)
ヒストグラムをスチールブルー色を使って描画する	plt.hist(データ列, color='steelblue')
散布図をラベンダーブラッシュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
データ列とリストの散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
カウンタを高頻出方からリストとして得る	aCounter.most_common()
文字列中からパターンにマッチする文字列を探す	re.search(pattern, s)
プロットにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
option: スチールブルーを用いる	color = 'steelblue'
文字列を全て大文字にする	s.upper()
日付時刻データをISO書式の文字列に変換する	aDatetime.isoformat()
option: ポイントマーカーを使用する	marker = '.'
option: オレンジレッド色を用いる	color = 'orangered'
option: パープル色を使用する	color = 'purple'
データフレームの値を正規表現patternで一度にreplに変更する	df.replace(pattern, repl, regex=True)
線グラフの色をダークグリーンに変更する	plt.plot(データ列x, データ列y, color='darkgreen')
散布図を黄色色として描画する	plt.scatter(データ列x, データ列y, color='yellow')
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
丸印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
ひとつでも非アルファベットが文字列中に含まれる	any(not c.isalpha() for c in s)
データフレームのリスト列の歪度	df[aList].kurt()
データフレームを列によってグループ化して、それぞれのグループ毎の合計を計算する	df.groupby(column).sum()
散布図をスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='steelblue')
折れ線グラフの色をライトグレーにセットする	plt.plot(データ列x, データ列y, color='lightgrey')
乱数の行列を作る	np.random.random((行数, 列数))
スプリンググリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
縦棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
ビスク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
データフレームの行と列をひっくり返す	df.T
t分布型確率的近傍埋め込み法で淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームからランダムに一行抽出する	df.sample()
JSONファイルのファイルを読み込んで、dataとする	data = json.load(fin)
オールドレース色として散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
黒い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
option: マーカーの大きさを変える	markersize = 2.0
日付時刻データがタイムスタンプデータより遅い	aDatetime > aDatetime2
本日の年	datetime.datetime.today().year
縦棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
割合付きの円グラフを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
マッピングの値数を得る	len(aDict)
ライトサーモン色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
インディアンレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
黒い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
option: 改行をセパレータで使用する	sep = '\n'
option: 白を用いる	color = 'white'
あらかじめASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
option: カデットブルー色を用いる	color = 'cadetblue'
黄緑にヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
option: 色をシスルに指定する	color = 'thistle'
リストをn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
黒い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='k')
ファイルパスをEUCでオープンする]	open(filepath, encoding='euc_jp')
データフレームをカンマ区切りのファイルから読み込む	pd.read_csv(filename, sep=',')
リストを四分位数ごとに分割する	pd.qcut(aList, 4)
1行から二つの文字列を読む	A, B = map(str, input().split())
行列の分散	np.var(aArray)
複素数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=bool)
データフレームの重複していない行だけを抽出する	df[not df.duplicated(keep=False)]
列のイミュータブルなセット	frozenset(iterable)
文字列を二分割する	s.partition(sep)
パープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
ヒストグラムをサドルブラウン色を用いて描画する	plt.hist(データ列, color='saddlebrown')
文字列中の部分文字列の出現回数をカウントする	s.count(sub)
option: インデックスを連番に設定する	index_col = None
ヒストグラムの線の種類を点線に変更する	plt.hist(データ列, linestyle='dotted')
option: アクアマリンに色を設定する	color = 'aquamarine'
データフレームの列の各値が何回出現するか確認する	df[col].value_counts()
文字列リストをsepを区切りとしてつなげる	sep.join(aStringList)
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='turquoise')
散布図をロイヤルブルー色として描画する	plt.scatter(データ列x, データ列y, color='royalblue')
option: フォントの色を青にする	color = 'blue'
リストの値のみプリントする	print(*aList)
データフレームの欠損値を直前の値で置換する	df.fillna(method='ffill')
キーが辞書上でまだ定義されていない	key not in aDict
ふたつの集合の対称差集合を使う	aSet.symmetric_difference(aSet2)
ベクトルの分散	np.var(aArray)
列によってデータフレームをグループ化して、最小値を求める	df.groupby(column).min()
線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
オールドレース色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
論理値型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int32)
文字列を小文字にする	s.lower()
文字列をシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
ヒストグラムの色をフクシアに指定する	plt.hist(データ列, color='fuchsia')
nをn2で割った結果の切り上げを算出する	(n + n2 - 1) // n2
空のキュー	collections.deque()
散布図に星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムの色をスプリンググリーンに指定する	plt.hist(データ列, color='springgreen')
線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
アイボリー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
折れ線グラフの色をバリーウッドにする	plt.plot(データ列x, データ列y, color='burlywood')
散布図をバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
nとn2のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
横棒グラフを真紅色で描画する	plt.barh(データ列x, データ列y, color='crimson')
双方向キューのn番目に数値を途中追加する	deq.insert(n, element)
パープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
散布図をシャルトリューズ色として描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
変数をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
折れ線グラフの三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
コーンズシルク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
OSがWindowsか確認する	sys.platform.startswith('win32')
赤いダイアモンドマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームのカラムはどの程度分散しているか見る	df[col].var()
日付データが月曜日か確認する	aDate.weekday() == 0
貝殻にヒストグラムの色を設定する	plt.hist(データ列, color='seashell')
小数点数のk進対数	math.log(x, k)
グリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
8進数文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
option: デピンクにグラフの色を設定する	color = 'deeppink'
線グラフの色をダークオレンジに変更する	plt.plot(データ列x, データ列y, color='darkorange')
option: 色をサーモンに設定する	color = 'salmon'
JSON文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
折れ線グラフの色をライトゴールドロディイエローにする	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
散布図に星印を使用する	plt.scatter(データ列x, データ列y, marker='*')
折れ線グラフのダイアモンド印を黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
四分位数ごとに配列を分割する	pd.qcut(aArray, 4)
ブースティングでクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
スノー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
ラベンダーブラッシュ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
実数のk進対数を算出する	math.log(x, k)
赤い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='r')
珊瑚色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
rgbの星マーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ダークグリーン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
ブースティングで回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
マップのキーとその値をペアとして取り出す	aDict.items()
円グラフを正円にする	plt.axis('equals')
浮動小数点数を実数に加える	x + y
棒グラフをフローラルホワイト色として描画する	plt.bar(データ列x, データ列y, color='floralwhite')
タプルと列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
ふたつのマッピングを合体する	aDict | aDict2
追加用にファイルを開いて]、fとする	f = open(filepath, mode='a')
文字列をカンマで区切って列挙する	s.split(',')
リストとリストについての散布図にrgbの菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
タプルをJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
ケンドールの順位相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
配列と配列についての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
nが3の倍数かどうか	n % 3 == 0
自分自身をモジュールとしてを得る	sys.modules[__name__]
無限にnから数え上げるする	itertools.count(start=n)
縦棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
黒いクロスマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
複数の列によってデータフレームを整列して、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
折れ線グラフの色をミスティローズに変更する	plt.plot(データ列x, データ列y, color='mistyrose')
ファイルパスから入力ストリームを求める	open(filepath)
option: グラフの色を青紫に指定する	color = 'violet'
カウンタの項目の出現回数	aCounter[element]
散布図を▲マーカーでプロットする	plt.plot(データ列x, データ列y, marker='^')
データフレームのリストカラムの空文字をNaNに変換しドロップする	df[aList].replace('', np.nan).dropna()
色を全般的に濃くする	sns.set(pallete='deep')
データフレームの列の値がx以下の行を選択する	df[df[column] <= x]
ミディアムパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
折れ線グラフを色付きの実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
四分位数ごとにデータ列をビン分割する	pd.qcut(ds, 4)
線グラフの色をピンクにする	plt.plot(データ列x, データ列y, color='pink')
列を等しい量になるようにビン数nとしてビン分割する	pd.qcut(ds, n)
データフレームを表示するとき表示する行数を変更する	pd.set_option('display.max_rows', n)
データフレームのリストカラムのモード	df[aList].mode()
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
現在が月曜日	datetime.datetime.today().weekday() == 0
横棒グラフをプロットして、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
インディアンレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
ヒストグラムをホワイトスモーク色として描画する	plt.hist(データ列, color='whitesmoke')
タプル中の文字列が最初に見つかるインデックスを使う	aTuple.index(element)
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
列'A'と列'B'をキーにして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
データフレームから型型の列を抽出する	df.select_dtypes(ty)
option: ペルーに色を設定する	color = 'peru'
マルーンにヒストグラムの色を変更する	plt.hist(データ列, color='maroon')
保存するCSVファイルの小数点以下の桁数を指定する	df.to_csv(filename, float_format='%.3f')
データフレームの中の列をn個にビンニングする	pd.cut(df[col], n)
グラフを画面用に変更する	sns.set(context='notebook')
折れ線グラフに左三角マーカーを加える	plt.plot(データ列x, データ列y, marker='<')
線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
文字列のプレフィックスから部分文字列を除く	s.removeprefix(sub)
ケンドール順位相関係数でデータフレームのカラムと列の相関行列	df[[column, column2]].corr(method='kendall')
データフレームの列がx、かつ列がx2であるデータを抽出する	df[(df[column] == x) & (df[column2] == x2)]
タプルを引数として展開してプリントする	print(*aTuple)
スーパーセットもしくは等しいか	aSet > aSet2
2つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
ヒストグラムの色をシアンに指定する	plt.hist(データ列, color='cyan')
折れ線グラフの大バツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
棒グラフをシーグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='seagreen')
正規分布にしたがってデータ列の値が発生する確率を求める	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
ヒストグラムを貝殻色を用いて描画する	plt.hist(データ列, color='seashell')
横軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
赤い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='r')
カラムの欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
option: 淡いピンク色にグラフの色を設定する	color = 'lightpink'
茶色色でヒストグラムを描画する	plt.hist(データ列, color='brown')
モードで列の欠損値を埋める	ds.fillna(ds.mode().iloc[0])
オプションで標準出力に出力する	file = sys.stdout
nを八進表現にする	oct(n)
列を文字列に変換して'改行で連結する	'\n'.join(map(str, iterable))
ダークオレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
ふたつの集合の対称差	aSet.symmetric_difference(aSet2)
日付データにn日を加える	aDate + datetime.timedelta(days=n)
文字列の右端からタブを除く	s.rstrip('\t')
中央値でデータ列をビニングする	pd.qcut(ds, 2)
横軸の目盛りに文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
データフレームの中に日付データと文字列があるか	df.isin([value, value2])
option: フォントの色をバリーウッドに設定する	color = 'burlywood'
多次元データを主成分分析を用いて濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
マップからキーの値かもしくは要素を得る	aDict.get(key, element)
ロードされたモジュールを列挙する	sys.modules
要素がセットに含まれるか調べる	element in aSet
まとめてValueMapでデータフレームのカラムを置き換える	df[col].replace(ValueMap)
黒い星マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
ヒストグラムの色をブラックに変更する	plt.hist(データ列, color='black')
option: シルバーにグラフの色を設定する	color = 'silver'
新しい文字列に文字列中の部分文字列を全部置き換える	s.replace(sub, newsub)
ヒストグラムをミディアムパープル色として描画する	plt.hist(データ列, color='mediumpurple')
リストの要素のみプリントする	print(*aList)
option: ミディアムパープルを使う	color = 'mediumpurple'
オブジェクトはタプルか調べる	isinstance(obj, tuple)
データフレームの中にいくつ未入力値があるかカウントする	df.isna().sum()
タイムスタンプデータが何曜日か知る	aDatetime.weekday()
イテラブルのセットを生成する	set(iterable)
データフレームのインデックスがnの行を取り出す	df.loc[n]
新しいロッソ回帰モデルを用意する	model = sklearn.linear_model.Rosso(alpha=正則化項)
折れ線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
大きい順に２つの列ででデータフレームを並べる	df.sort_values(by=['A', 'B'], ascending=False)
option: 色をダークオレンジに設定する	color = 'darkorange'
散布図に黒い下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='k')
プロットを表示する	plt.show()
option: ディムグレーを用いる	color = 'dimgrey'
グラフにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
ヒストグラムの色をピーチパフにする	plt.hist(データ列, color='peachpuff')
TSVファイルからカンマ区切りのファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
データフレームのカラムが何時か調べる	df[col].dt.hour
デピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
行列の行ごとの分散を調べる	np.var(aArray, axis=1)
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データ列の中にいくつ文字列があるか求める	ds.isin([value]).sum()
文字列をコロンによって分割し、列挙する	s.split(':')
データフレームの列の第一四分位数	df[col].quantile(0.25)
データフレームの中で、列と列の重複をドロップする	df.drop_duplicates(subset=[column, column2])
散布図のポイントマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
横棒グラフを耐火レンガ色として描画する	plt.barh(データ列x, データ列y, color='firebrick')
散布図に赤い右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図をゲインズボロ色を使って描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
青紫色で線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
option: 未入力値は無視する	dropna = True
配列と配列についての散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
多次元データを多次元尺度構成法として濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
オリーブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
折れ線グラフの色をホワイトスモークに指定する	plt.plot(データ列x, データ列y, color='whitesmoke')
option: プラムにグラフの色を設定する	color = 'plum'
'A'列の値によってデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby('A')]
データ列が何月か確認する	ds.dt.month
文字列中のカタカナをひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
ヒストグラムをミントクリーム色として描画する	plt.hist(データ列, color='mintcream')
実数のハイパボリック・コサイン	math.cosh(x)
ベクトルをフラットにする	aArray.flatten()
マゼンタ色としてヒストグラムを描画する	plt.hist(データ列, color='magenta')
散布図をダークシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ライトイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームのpercent分位数を計算する	df.quantile(percent/100)
既存のファイルをEUCとして追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
ミディアムスプリンググリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
データ列間のRMSEを求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
散布図をブランチドアーモンド色を用いて描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
日付時刻データはタイムスタンプデータより後ろかどうか調べる	aDatetime > aDatetime2
データフレームの列の名前を一度に文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
ファイルからストリームを読み込みfileとする	file = open(filepath)
チョコレート色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
option: ダークマゼンタ色を使用する	color = 'darkmagenta'
ロージーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データフレームを複数の列でによって破壊的にソートする	df.sort_values(by=column, inplace=True)
option: 赤色を使用する	color = 'red'
タブを見る	'\t'
線グラフの色をディムグレーにセットする	plt.plot(データ列x, データ列y, color='dimgray')
シエナ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
タプルを順にプリントする	print(*aTuple)
双方向キューの順序を左にn個分ローテンションする	deq.rotate(-n)
リストと数列についての散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
y座標だけ目盛り線	plt.grid(axis='y')
折れ線グラフに赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
JSON文字列を辞書に変換する	json.loads(jsonString)
実数のコサインを算出する	math.cos(x)
散布図の△マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
論文用にグラフを設定する	sns.set(context='paper')
オブジェクトが属性を持つ	hasattr(obj, プロパティ名)
要素が全て1の配列を初期化する	np.ones(要素数, dtype=np.int)
データフレームのメディアンを算出する	df.median()
kを底とする小数点数の対数	math.log(x, k)
数式の変数の解を方程式として求める	sympy.solve(e, z)
回帰分析をRANSACで行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
リストを文字列として連結する	''.join(map(str, iterable))
シアン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
option: グラフの色をミディアムターコイズに変更する	color = 'mediumturquoise'
データフレームを複数の列によってによって大きい順にソートする	df.sort_values(by=column, ascending=False)
実行時の標準出力の出力先がターミナルか	sys.stdout.isatty()
nをn2だけ小さくする	n -= n2
二つの集合が互いに素	aSet.isdisjoint(aSet2)
プロットに使用するフォントを指定する	sns.set(font=フォント名)
カラムを1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
入力から二つの少数を読む	A, B = map(float, input().split())
ファイルからストリームをオープンして]fileとする	file = open(filepath)
データフレームの中のカラムを等量でn個にビン分割する	pd.qcut(df[col], n)
option: 印を大バツに変える	marker = 'X'
Pythonパス	sys.path
バイナリできるようにファイルをオープンする]	open(filepath, mode='rb')
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
データを最大値と最小値で正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
折れ線グラフをライトスチールブルー色を使って描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
option: ミントクリームに色を設定する	color = 'mintcream'
偽陽性を抑えたい指標を用いる	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図のポイントマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データ列を100の位で丸めて整数にする	ds.round(-2).astype(int)
整数の階乗を求める	math.factorial(n)
線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
回帰木の重要度をグラフ化する	plt.barh(X.columns, model.feature_importances_)
文字列はPythonのキーワードか	keyword.iskeyword(s)
赤い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
option: グラフの色を濃い青にセットする	color = 'darkblue'
文字列からタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: グラフの色をピンクに指定する	color = 'pink'
横棒グラフをプロットする	plt.barh(ラベル列, データ列)
折れ線グラフに菱形マーカーを加える	plt.plot(データ列x, データ列y, marker='D')
option: フォントの色をオリーブに設定する	color = 'olive'
線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
ヒストグラムにカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
複数の列を用いて破壊的にデータフレームを小さい順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームの内の欠損値をドロップする	df.dropna()
色付きの一点鎖線として数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
線グラフの色をスチールブルーにする	plt.plot(データ列x, データ列y, color='steelblue')
日本語が文字列内に含まれる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
棒グラフをダークカーキ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
リストの末尾のn要素を捨てる	aList[:-n]
オブジェクトは浮動小数点数型	isinstance(obj, float)
データ列を等しい量になるようにn個にビン分割する	pd.qcut(ds, n)
データ列の折れ線グラフを三角印で描画する	plt.plot(データ列x, データ列y, marker='^')
モカシン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
カーキ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
データフレームの中で、列と列の重複を落とす	df.drop_duplicates(subset=[column, column2])
散布図をホワイトスモーク色を用いて描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
バリーウッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
要素が全て1のベクトルを作る	np.ones(要素数, dtype=np.int)
折れ線グラフのダイアモンド印の線幅を設定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
辞書をインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
散布図をインディゴ色を用いて描画する	plt.scatter(データ列x, データ列y, color='indigo')
入力ストリームを改行を取り除いて一行ずつ読み込む	f.readline()
散布図をダークブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
散布図をミントクリーム色を使って描画する	plt.scatter(データ列x, データ列y, color='mintcream')
コロンで文字列を区切って、文字列リストに変換する	s.split(':')
正規表現をコンパイルする	re.compile(pattern)
nがn2以上か	n >= n2
option: フォントの色を赤に設定する	color = 'red'
折れ線グラフの色を耐火レンガに変更する	plt.plot(データ列x, データ列y, color='firebrick')
option: グラフの色をオールドレースにセットする	color = 'oldlace'
回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
変数を青色化する	f'\033[34m{value}\033[0m'
option: フォントの色をマゼンタにセットする	color = 'magenta'
２次元リストをフラット化する	sum(aList)
JSONLファイルにデータフレームを保存する	df.to_csv(filename)
文字列は全て十進数字	s.isdecimal()
predicateFuncが真になる列の部分	itertools.dropwhile(predicateFunc, iterable)
ポスター用にグラフを変更する	sns.set(context='poster')
色付きの点線でデータ列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
棒グラフをロージーブラウン色を使って描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ミディアムスプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
行列のユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
配列の行ごとの標準偏差	np.std(aArray, axis=1)
黒い大バツマーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームのリスト列を丸めて、整数型にする	df[aList].round().astype(int)
データフレームの中の欠損値をドロップする	df.dropna()
コロンで区切って２つの文字列を出力する	print(value, value2, sep=':')
部分文字列が文字列の終了位置以前に含まれるかテストする	s.find(sub, 0, end) != -1
第2引数で指定したファイルの名前	sys.argv[1]
ファイルをバイナリ書き込みモードで開く]	open(filepath, mode='wb')
option: マーカーの色を青緑にする	markerfacecolor = 'turquoise'
グラフのデザインをよくする	import seaborn as sns
列の各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
ダークブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
タイムスタンプデータが日曜日か調べる	aDatetime.weekday() == 6
n個分双方向キューの順を右に回転させる	deq.rotate(n)
データフレームのリスト列の要約統計量	df[aList].describe()
文字列がリストに含まれない	element not in aList
折れ線グラフに黒い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
option: 回帰木の深さを制限する	maxdepth = n
グラフの描画で濃くカラーパレットを用いる	sns.set(pallete='deep')
option: ライトグレー色を用いる	color = 'lightgray'
option: データ型としてブール型を用いる	dtype = np.int32
リストの各値を関数に適用した結果で並べ変える	sorted(aList, key=func)
option: パレットトルコイズに色を設定する	color = 'paleturquoise'
部分文字列で文字列の開始位置以降が開始するか調べる	s.startswith(sub, start)
集合の更新不能版	frozenset(aSet)
option: 星印を描画する	marker = '*'
昇順に2つの列によってデータフレームをソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
文字列が全て数値	s.isnumeric()
データフレームの列を百の位で丸める	df[col].round(-2)
線グラフを一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフの色をダークバイオレットに変更する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームを各列毎にグループ分けして、文字列というグループの大きさを計算する	df.groupby(column).size()[s]
分類モデルの正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
青い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
K最近傍法で回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
文字列をISO8601でタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: ラインを太くする	linewidth = 3.0
組の各値を関数に適用した結果で並べ変える	sorted(aTuple, key=func)
日付データからn週間を減算する	aDate - datetime.timedelta(weeks=n)
黒い星マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
ひとつでも非アルファベットが文字列中に含まれるか	any(not c.isalpha() for c in s)
ネイビーにヒストグラムの色を設定する	plt.hist(データ列, color='navy')
散布図をコーラル色を用いて描画する	plt.scatter(データ列x, データ列y, color='coral')
ヒストグラムをアイボリー色として描画する	plt.hist(データ列, color='ivory')
データフレームを複数の列で大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
実数の二進対数を計算する	math.log2(x)
線グラフの色をオレンジに指定する	plt.plot(データ列x, データ列y, color='orange')
nがn2未満またはn3以上か調べる	n < n2 or n >= n3
データ列の中にがあるか調べる	ds.isin([value])
option: グラフの色をゴールドに変更する	color = 'gold'
データ列の分を使う	ds.dt.minute
散布図をグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='grey')
タン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
文字をユニコードに変換する	ord(ch)
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
option: グラフの色を淡い茶色に設定する	color = 'tan'
option: ナバホホワイト色を用いる	color = 'navajowhite'
n掛けるn2	n * n2
option: フォントの色をペールグリーンに設定する	color = 'palegreen'
option: レベッカパープル色を用いる	color = 'rebeccapurple'
データフレームの中に日付データがあるか調べる	df.isin([value])
データフレームとしてエクセルファイルファイルを読み込む	pd.read_excel(filename)
option: 右三角印を加える	marker = '>'
紺色としてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
十六進文字列をバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
nの8進数表現	oct(n)
２つのデータフレームを横方向に一つにする	pd.merge(df, df2)
折れ線グラフの色をスノーに指定する	plt.plot(データ列x, データ列y, color='snow')
option: ドジャーブルーにグラフの色を設定する	color = 'dodgerblue'
option: 色をダークシアグリーンに変更する	color = 'darkseagreen'
ヒストグラムをアクア色として描画する	plt.hist(データ列, color='aqua')
縦棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
カウンタをセットに変換する	set(aCounter)
データフレームを'A'列によって並べ直してNaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
リストと配列についての散布図に赤いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
二つのデータ列の散布図として残差を描画する	sns.residplot(x=データ列, y=データ列)
新しい文字列で文字列を置き換える	s.replace(sub, newsub)
折れ線グラフの線種を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: 下三角印を描画する	marker = 'v'
フローラルホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
option: 改行コードを動作環境依存に変更する	newline = None
線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
グリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
折れ線グラフをネイビー色として描画する	plt.plot(データ列x, データ列y, color='navy')
表を各カラム毎にグループ化し、、列の標準偏差を計算する	df.groupby(column)[column2].std()
x軸の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
ファイルパスを開いて]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
データフレームを列ごとに分類して、グループの平均値を求める	df.groupby(column).mean()
option: 四角印を使用する	marker = 's'
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
カラムの中に文字列とがあるか調べる	ds.isin([value, value2])
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
デックの末尾から値を取り除く	deq.pop()
列の長さnの順列	itertools.permutations(iterable, n)
ファイルの拡張子付きのファイル名を見る	os.path.basename(filepath)
散布図をrgbの三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ゼロ埋めした配列	np.zeros(要素数)
箱ひげ図を描いて、平均値を加える	plt.boxplot(データ列, showmeans=True)
重複した行のみを抽出する	df[df.duplicated(keep=False)]
横棒グラフをコーラル色として描画する	plt.barh(データ列x, データ列y, color='coral')
散布図をシルバー色を使って描画する	plt.scatter(データ列x, データ列y, color='silver')
整数nの16進数文字列を使う	hex(n)[2:]
ヘッダを指定せずTSVファイルを読む	pd.read_csv(filename, header=None)
リストが空か判定する	len(aList) == 0
散布図の大バツマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
xの小数点以下'3'桁までプリントする	print(':.3f'.format(x))
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
入力から二つの文字列値を読む	A, B = map(str, input().split())
ゲインズボロ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
タプルをリストにする	list(aTuple)
Pandasでエポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
値を両端キューのn番目に挿入する	deq.insert(n, element)
文字列を部分文字列で分けたときの残りの文字列を使う	s.partition(sub)[-1]
ヒストグラムとしてデータ列を可視化する	plt.hist(データ列)
赤にヒストグラムの色を設定する	plt.hist(データ列, color='red')
option: サーモン色を用いる	color = 'salmon'
リストとして列を抽出する	df[column].values.tolist()
集合をイミュータブルにする	frozenset(aSet)
xの小数点以下'4'桁までプリントする	print(':.4f'.format(x))
データフレームを複数の列の値によって集約し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
折れ線グラフをアクア色を用いて描画する	plt.plot(データ列x, データ列y, color='aqua')
縦棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
文字列は組の要素か調べる	element in aTuple
ファイルパスの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
赤いダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
回数を制限して文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub, n)
オブジェクトをデバッグ向けの文字列にする	repr(obj)
未初期化のベクトルを初期化する	np.empty(要素数, dtype=np.int)
文字列内に空白が含まれる	any(c.isspace() for c in s)
散布図の右三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
option: 色をミントクリームに変更する	color = 'mintcream'
線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
丸印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
データ列の折れ線プロットを描いて、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
タプルと組を連結する	aTuple + aTuple2
線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgrey')
ファイルをバイナリ書き込みモードとしてオープンする]	open(filepath, mode='wb')
散布図の左三角印の色を指定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
星印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
リストと数列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
列の値でデータフレームをグループ分けして、各グループごとの個数を計算する	df.groupby(column).count()
データ列を十の位で丸めて、整数型にする	ds.round(-1).astype(int)
アンサンブル学習としてクラス分類を行う	sklearn.ensemble.VotingClassifier()
レモンシフォン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
JSONファイルの入力を辞書に変換する	json.load(fin)
UTF8を使って追加できるように既存のファイルパスを開く]	open(filepath, mode='a', encoding='utf-8')
データフレームを二つの列によってソートしてNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
Pandasで日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
本日が金曜日か	datetime.datetime.today().weekday() == 4
option: 色をライトブルーに設定する	color = 'lightblue'
ヒストグラムの色を耐火レンガに指定する	plt.hist(データ列, color='firebrick')
散布図のダイアモンド印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
セット＼セット	aSet.difference(aSet2)
option: フォントの色を真紅に変更する	color = 'crimson'
小数点数のsinの逆数	math.asin(x)
ライトグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
y軸の目盛を整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
option: 線のスタイルを実線に変更する	linestyle = 'solid'
サーモン色としてヒストグラムを描画する	plt.hist(データ列, color='salmon')
データフレームの列をドロップする	df.drop(column, axis=1)
ファイルパスを開いて]読み込みストリームを使う	open(filepath, mode='r')
カラムを整数に丸める	ds.round()
リストと数列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
文字列を空白で分割する	s.split()
列の中の欠損値の合計を数える	ds.isna().sum()
option: レモンシフォンに色を変更する	color = 'lemonchiffon'
切片なしの線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
SVDで濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
大きさnで数列とリストについての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
変数をマゼンタにする	f'\033[35m{value}\033[0m'
データフレームの列が正規表現文字列にマッチする行を取り出す	df[df[column].str.match(s)]
双方向キューの中に値があるか確認する	element in deq
ゴーストホワイト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
散布図の四角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
データ列の折れ線グラフを上三角印として描画する	plt.plot(データ列x, データ列y, marker='^')
option: グラフの色をミントクリームに変更する	color = 'mintcream'
オリベドラブ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
リストとリストの散布図にクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
部分文字列が文字列中に存在する	sub in s
プロットにx=0の実線を設定する	plt.axvline(x=0, linestyle='solid')
ISO8601の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームの列の欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
データフレームのリストカラムの平均	df[aList].mean()
ホールドアウトを使用する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
option: フォントの色をフクシアに設定する	color = 'fuchsia'
データ列の第一四分位数を求める	ds.quantile(0.25)
カテゴリで色分けして、データフレームをに箱ひげ図で描画する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightseagreen')
データフレームから列を二つだけ選択する	df[[column, column2]]
二つのデータフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
箱ひげ図を横向きにする	plt.boxplot(データ列, vert=False)
ヒストグラムの色をパープルに指定する	plt.hist(データ列, color='purple')
データフレームの列の値がxより小さい行を抽出する	df[df[column] < x]
option: データ型を指定する	dtype = np.int8
列でデータフレームを並べ、、新しいインデックスを加える	df.sort_values(columns).reset_index()
option: フォントの色をゴーストホワイトにセットする	color = 'ghostwhite'
option: アンティークホワイトを使う	color = 'antiquewhite'
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
マッピングからキーの値か、もしくは要素を参照する	aDict.get(key, element)
データをL2ノルムで正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
データフレームを表示するとき、表示可能な最大行数をnに指定する	pd.set_option('display.max_rows', n)
option: フォントの色をバイオレットに変更する	color = 'violet'
データフレームの列の分散	df[col].var()
データフレームの列の文字列を未入力値に変換する	df[col].replace(s, np.nan)
青い一点鎖線として数列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
線グラフの色をブランチドアーモンドにセットする	plt.plot(データ列x, データ列y, color='blanchedalmond')
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
列の文字列長を列として使う	ds.str.len()
散布図に青い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: 色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
入力から二つの整数を取り出す	A, B = map(int, input().split())
マップの項目名を要素に変更する	aDict[key] = element
文字列を中央寄せにする	s.center(文字列幅)
日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
数列とデータ列の散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: △マーカーを描画する	marker = '^'
option: フォントの色をベージュに設定する	color = 'beige'
イテラブルをカウントしてカウンタを更新する	aCounter.update(iterable)
データフレームから型の列のみ取り出す	df.select_dtypes(ty)
データフレームを複数の列を用いてで降順に並べる	df.sort_values(by=column, ascending=False)
リストとリストについて散布図を描いて、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
黒い▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
ブラックにヒストグラムの色を指定する	plt.hist(データ列, color='black')
オレンジレッド色としてヒストグラムを描画する	plt.hist(データ列, color='orangered')
クラスは名前付きタプル	issubclass(C, tuple)
データフレームの未入力値をモードで埋める	df.fillna(df.mode().iloc[0])
リストと配列の散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
散布図の大バツマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
折れ線グラフの下三角印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
グリーンイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
折れ線グラフの上三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
多項式回帰データフレームの散布図にを加える	sns.regplot(data=df, x='列名', y='列名', order=2)
フローラルホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='floralwhite')
3つのデータフレームを横向きにつなぐ	pd.concat([df, df2, df3], axis=1)
文字列中にひとつでも非アスキー文字があるか調べる	any(not c.isascii() for c in s)
ブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
分類結果の適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
黒い星印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
ヒストグラムをライトスカイブルー色として描画する	plt.hist(データ列, color='lightskyblue')
ダイアモンド印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
option: フォントの色をナバホホワイトに設定する	color = 'navajowhite'
カテゴリで色分けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
selectorsでマスクされたシーケンスの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
データフレームから型リストデータ型の列を抽出する	df.select_dtypes(include=typeList)
多次元データをt分布型確率的近傍埋め込み法として濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
グリーンイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
ヒストグラムの色をバイオレットに設定する	plt.hist(データ列, color='violet')
option: 貝殻を使用する	color = 'seashell'
小数点数を切り下げて整数に変換する	math.floor(x)
データフレームのカラムの中に文字列と文字列がいくつ含まれるか数える	df[col].isin([value, value2]).sum()
option: ビスク色を使用する	color = 'bisque'
ダイアモンド印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
グリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
文字列を部分文字列で分割し、、文字列リストにする	s.split(sub)
option: サンディーブラウンを使う	color = 'sandybrown'
n個に配列をビン分割する	pd.cut(aArray, n)
赤い大バツマーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
option: グラフの色をペールグリーンに変更する	color = 'palegreen'
列の値によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
昇順にデータフレームを'A'列によってソートする	df.sort_values(by='A', ascending=True)
組の末尾からn番目以前の要素を取り出す	aTuple[:-n]
浮動小数点数の小数点以下を丸める	round(x)
カラムの中に存在する文字列と日付データの合計を数える	ds.isin([value, value2]).sum()
数列と配列の散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
点線でヒストグラムを描く	plt.hist(データ列, linestyle='dotted')
折れ線グラフのクロス印の大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
よりランダムなランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
散布図をシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='cyan')
数を浮動小数点数に加える	x + y
▽印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
リストと配列について散布図を描画してマーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
データフレームの列と列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[[column, column2]].corr())
折れ線グラフをペルー色を用いて描画する	plt.plot(データ列x, データ列y, color='peru')
カテゴリ列で色分けして、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
n個の要素があるリストを作る	[element] * n
ヒストグラムの色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
リストと配列について散布図を描いて、ダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: フォントの色をブルーバイオレットに指定する	color = 'blueviolet'
日付データが月曜日かどうか調べる	aDate.weekday() == 0
表データから列を三つ選択する	df[[column, column2, column3]]
整数が正の数かどうか調べる	x > 0
x軸だけグリッド線	plt.grid(axis='x')
実数の値が整数	x.is_integer()
データフレームのリスト列を千の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
ヒストグラムを珊瑚色で描画する	plt.hist(データ列, color='coral')
２つのデータフレームをジョインする	pd.merge(df, df2)
行列を2次元1行に変形する	aArray.reshape(1, -1)
数列と配列の散布図をプロットし、、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: パールゴールデンロッドを用いる	color = 'palegoldenrod'
OS名	sys.platform
ヒストグラムをリネン色を使って描画する	plt.hist(データ列, color='linen')
range関数の無限バージョン	itertools.count(start=n, step=step)
文字列の終了位置より前に部分文字列が含まれないか	s.find(sub, 0, end) == -1
折れ線グラフの▲マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
イテラブルを文字列リストに変換してカンマによって連結する	','.join(map(str, iterable))
ロイヤルブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
グラフのデータラベルを表示する	plt.legend()
横棒グラフをピーチパフ色を用いて描画する	plt.barh(データ列x, データ列y, color='peachpuff')
実数のハイパボリック・サイン	math.sinh(x)
線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
データ列のNaNを最頻値に設定する	ds.fillna(ds.mode().iloc[0])
文字列を区切りで区切り、、文字列リストに変換する	s.split(sep)
option: グラフの色をやわらかい青に設定する	color = 'cornflowerblue'
数列とデータ列について散布図を描いてマーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
小数点数の絶対値	math.fabs(x)
文字列の開始位置番目からと終了位置までの間に部分文字列が存在しないか調べる	s.find(sub, start, end) == -1
タブ区切りのファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
配列とリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
二つの集合がセットと交わりを持たないか調べる	aSet.isdisjoint(aSet2)
２つの変数を改行で区切ってプリントする	print(value, value2, sep='\n')
カウンタから最頻出な項目の件数を算出する	aCounter.most_common()[1]
最大最小から配列を初期化する	np.linspace(最小値, 最大値, 要素数)
データフレームの列のpercent分位数	df[col].quantile(percent/100)
パールバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームの列を破壊的に消す	df.drop(column, axis=1, inplace=True)
option: フォントの色をカデットブルーに設定する	color = 'cadetblue'
横棒グラフをオレンジ色として描画する	plt.barh(データ列x, データ列y, color='orange')
2進数文字列を整数に変換する	int(s, 2)
グリーンにヒストグラムの色を設定する	plt.hist(データ列, color='green')
option: グラフの色をシーグリーンにセットする	color = 'seagreen'
配列を等しい量になるようにn個にビン分割する	pd.qcut(aArray, n)
ブラックにヒストグラムの色を設定する	plt.hist(データ列, color='black')
ライトイエロー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
黄緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
数値の変数についてのn階微分を計算する	sympy.diff(e, z, n)
散布図に大バツマーカーを加える	plt.scatter(データ列x, データ列y, marker='X')
option: 色をカーキに指定する	color = 'khaki'
棒グラフの横幅を指定する	plt.bar(ラベル列, データ列, width=0.5)
0から始まる無限の数列	itertools.count()
文字列中にひとつでも非空白が含まれる	any(not c.isspace() for c in s)
データフレームを列名リストの値によってグループ分けする	df.groupby(columns)
線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
濃いシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
折れ線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
Pandasで、フォーマットを用いて文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
データフレームのカラムの欠損値を直後の値に指定する	df[col].fillna(method='bfill')
ベクトルの行	aArray[行番号]
散布図に黒い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
日付時刻データは日付時刻データより前	aDatetime < aDatetime2
星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
ファイルを絶対ファイルパスに変換する	os.path.abspath(filepath)
文字列がタプルの要素でない	element not in aTuple
タイムスタンプデータををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
ファイルが存在するか	os.path.exists(filepath)
折れ線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
イテラブルのイミュータブルな集合を作る	frozenset(iterable)
データフレームのカラムのNaNを最大値で補う	df[col].fillna(df[col].max())
イテラブルと配列の散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
横棒グラフをダークスラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategray')
レモンシフォン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
二つの集合は集合と互いに素か調べる	aSet.isdisjoint(aSet2)
浮動小数点数を実数に加算する	x + y
option: バイナリモードにする	mode = 'rb'
ヒストグラムをシルバー色を用いて描画する	plt.hist(データ列, color='silver')
文字列がリストの要素かどうか調べる	element in aList
JSONLファイルにタブ区切りでデータフレームを保存する	df.to_csv(filename, sep='\t')
ヒストグラムの線種を実線に設定する	plt.hist(データ列, linestyle='solid')
コーラル色として線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
nが一桁の数	0 <= n <= 9
散布図の印を下三角にする	plt.scatter(データ列x, データ列y, marker='v')
双方向キューが空であるか調べる	len(deq) == 0
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='turquoise')
option: ダークシアグリーン色を用いる	color = 'darkseagreen'
データフレームのリストカラムの記述統計量	df[aList].describe()
一点鎖線にヒストグラムのスタイルを設定する	plt.hist(データ列, linestyle='dashbot')
イテラブルから両端キューを準備する	collections.deque(iterable)
ひとつでも数字が文字列内に含まれるかどうか調べる	any(c.isdigit() for c in s)
四角マーカーを用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をシャルトリューズに指定する	plt.plot(データ列x, データ列y, color='chartreuse')
option: フォントの色をスレートブルーに設定する	color = 'slateblue'
データフレームのカラムを千の位で丸めて、整数にする	df[col].round(-3).astype(int)
option: 改行しないように設定する	end = ''
グラフを淡くする	sns.set(pallete='muted')
タプルの要素数	len(aTuple)
黒い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
ディムグレー色としてヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
シルバー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
データフレームのカラムの平均値を求める	df[col].mean()
スプリンググリーン色としてヒストグラムを描画する	plt.hist(データ列, color='springgreen')
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
散布図をミスティローズ色として描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
データフレームのカラムの文字列をNaNに変換する	df[col].replace(s, np.nan)
option: ダークグリーンを使用する	color = 'darkgreen'
線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
データフレームを列名リストで並べて、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
ハニーデュー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
文字列を部分文字列で区切って文字列リストに変換する	s.split(sub)
ヒストグラムの色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
リストを四分位数でビン分割する	pd.qcut(aList, 4)
イテラブルを双方向キューにする	collections.deque(iterable)
列自身を2回あわせた直積	itertools.product(iterable, repeat=2)
文字列をユニコード列に変換する	[ord(ch) for ch in s]
各グループごとにデータフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: フォントの色をパウダーブルーに変更する	color = 'powderblue'
半透明の一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
折れ線グラフの色をシルバーに変更する	plt.plot(データ列x, データ列y, color='silver')
折れ線グラフをブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='brown')
オブジェクトをユーザ向けの文字列にする	str(obj)
散布図の色を真紅にする	plt.scatter(データ列x, データ列y, color='crimson')
最大長nの両端キューを作成する	collections.deque(maxlen=n)
ヒストグラムをアンティークホワイト色として描画する	plt.hist(データ列, color='antiquewhite')
リストが少なくとも一つ真か判定する	any(aList)
ヒストグラムの色をダークターコイズにセットする	plt.hist(データ列, color='darkturquoise')
データフレームを列によってソートして、新しいインデックスを振り直す	df.sort_values(columns).reset_index()
カウンタをイテラブルから作る	collections.Counter(iterable)
データフレームの中央値を求める	df.median()
option: ディムグレーにグラフの色をセットする	color = 'dimgrey'
データ列の相関を可視化する	plt.scatter(データ列x, データ列y)
散布図をライトスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
タプル中の要素が全て真	all(aTuple)
横棒グラフをバイオレット色として描画する	plt.barh(データ列x, データ列y, color='violet')
行列の次元の数を計算する	aArray.ndim
ダークマゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
横棒グラフをミディアムシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightgreen')
ブラック色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
小数点数の床数	math.floor(x)
データフレームの列がxより多い行を取り出す	df[df[column] > x]
ヒストグラムの色を耐火レンガに変更する	plt.hist(データ列, color='firebrick')
データフレームを各列と列の組み合わせ毎に集約して、最小値を計算する	df.groupby([column, column2], as_index=False).min()
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
ファイル全体をリストとして読む	f.readlines()
散布図に黒い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
辞書の項目名の一覧	aDict.keys()
タプルの末尾の要素	aTuple[-1]
データフレームのカラムは何日か見る	df[col].dt.day
ライトサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
散布図の丸印の色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データフレームの先頭の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
スチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
等間隔の配列を作成する＼	np.arange(開始値, 終了値, 等差)
option: グラフの色をダークターコイズに変更する	color = 'darkturquoise'
グリーンイエローにヒストグラムの色を設定する	plt.hist(データ列, color='greenyellow')
L2ノルムでデータを正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
イテラブルを文字列リストに変換して、部分文字列で結合する	sub.join(map(str, iterable))
option: ベージュを用いる	color = 'beige'
ロージーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
リストを中央値でビニングする	pd.qcut(aList, 2)
ホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
リストにリストを加え、拡張する	aList.extend(aList2)
nの八進文字列を使う	oct(n)[2:]
折れ線グラフの色をスノーに変更する	plt.plot(データ列x, データ列y, color='snow')
ヒストグラムの色をブラックに指定する	plt.hist(データ列, color='black')
データフレームのカラムの欠損値を中央値にセットする	df[col].fillna(df[col].median())
線グラフをシエナ色を使って描画する	plt.plot(データ列x, データ列y, color='sienna')
散布図をホットピンク色として描画する	plt.scatter(データ列x, データ列y, color='hotpink')
option: グラフの色をオリベドラブに変更する	color = 'olivedrab'
整数nのバイト長を調べる	(n.bit_length() + 7) // 8
線グラフの色をミディアムブルーに指定する	plt.plot(データ列x, データ列y, color='mediumblue')
日付データが土曜日かどうか	aDate.weekday() == 5
折れ線グラフの色をゲインズボロに変更する	plt.plot(データ列x, データ列y, color='gainsboro')
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgray')
文字列TSVからCSVをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
散布図のダイアモンドマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
JSONLファイルにデータフレームをSJISで書き込む	df.to_csv(filename, encoding='shift_jis')
データフレームのカラムを並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
データフレームの中のカラムを等量でビン数nとして分割する	pd.qcut(df[col], n)
データフレームのカラムの欠損値を前の行の値に設定する	df[col].fillna(method='ffill')
実行結果を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
赤い▽マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームのカテゴリごとの散布図に線形回帰を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ライトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
配列を等量でビン数nを使って分割する	pd.qcut(aArray, n)
散布図をフローラルホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図に赤い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフを三角印を使って描画する	plt.plot(データ列x, データ列y, marker='^')
2つの表をジョインする	pd.merge(df, df2)
option: ライトスレイグレーを使用する	color = 'lightslategrey'
線グラフをダークブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkblue')
横棒グラフをダークブルー色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
空のロッソ回帰モデルを準備する	model = sklearn.linear_model.Rosso(alpha=正則化項)
ピアソン相関係数としてデータフレームの相関行列を求める	df.corr(method='pearson')
option: サーモンを使う	color = 'salmon'
あらかじめ大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
option: ライトコーラルにフォントの色を変更する	color = 'lightcoral'
データフレームを各列と列の組み合わせ毎に集計し、、合計を計算する	df.groupby([column, column2], as_index=False).sum()
ヒストグラムの色をアクアマリンに指定する	plt.hist(データ列, color='aquamarine')
数列の折れ線プロットを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: グラフの色をホットピンクに指定する	color = 'hotpink'
プラットホームがWindowsか判定する	sys.platform.startswith('win32')
縦棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
option: グラフの色をモカシンに変更する	color = 'moccasin'
シーグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
折れ線グラフの四角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
入力から二つの浮動小数数値を読む	A, B = map(float, input().split())
データフレームの列の値が欠損値	df[col].isna()
シアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
データフレームから重複するデータをドロップする	df.drop_duplicates()
文字列の中の大文字・小文字を無視してパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
y軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
縦棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
ダークゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
散布図を三角マーカーを用いる描画する	plt.scatter(データ列x, データ列y, marker='^')
配列とシーケンスをペアリングする	itertools.zip_longest(iterable, iterable2)
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
縦棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
散布図の上三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
項目名がタプルにない時、要素を追加する	aDict.setdefault(key, element)
値を両端キューの最後から取り除く	deq.pop()
option: オールドレースを使う	color = 'oldlace'
表データの中の列と列に重複があれば、消す	df.drop_duplicates(subset=[column, column2])
散布図のバツマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
青い点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
ミスティローズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
プロットの目的を画面に変更する	sns.set(context='notebook')
データフレームの数値を一度に小数点以下n桁で丸める	df.round(n)
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='grey')
要素が集合に含まれないかどうか調べる	element not in aSet
赤い破線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データ列の中に含まれる文字列の合計を数える	ds.isin([value]).sum()
二つの集合の差集合	aSet.difference(aSet2)
タプルから計数器を作る	collections.Counter(aDict)
データフレームの列の中に存在する文字列の合計を数える	df[col].isin([value]).sum()
データフレームのカラムの欠損値を50パーセンタイルで補う	df[col].fillna(df[col].median())
標準エラー	sys.stderr
グリーンイエロー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームを十の位で丸める	df.round(-1)
散布図に青い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
オブジェクトはタプルクラスかどうか確認する	isinstance(obj, tuple)
ひとつ飛ばしでタプルを取り出す	aTuple[::2]
折れ線グラフをマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='magenta')
リストと数列について散布図を描いて、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
option: フォントの色をダークターコイズに設定する	color = 'darkturquoise'
数値を紫色にする	f'\033[35m{value}\033[0m'
マッピングに辞書の項目を更新する	aDict.update(aDict2)
データフレームのリストカラムの値は欠損値かどうか判定する	df[aList].isna()
CSVからデータフレームを読み込む	pd.read_csv(filename, sep=',')
部分集合かどうか調べる	aSet.issubset(aSet2)
全ての印字	string.printable
要素がマッピングの値に含まれていないか調べる	element not in aDict.values()
カーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
四分位点として標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
プロットの横軸に軸ラベルを付ける	plt.xlabel('x軸ラベル')
リストと配列の散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームを'A'列によってソートし、、更新する	df.sort_values(by='A', inplace=True)
列によってデータフレームをソートして下位n件を取り出す	df.sort_values(columns).tail(n)
option: 未入力値も含める	dropna = True
option: エラーがあるとき、例外を発生させるように変更する	errors = 'strict'
折れ線グラフの色をアイボリーに変更する	plt.plot(データ列x, データ列y, color='ivory')
各列毎にデータフレームを分類し、列の最小値を求める	df.groupby(column)[column2].min()
ライトイエロー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
線形回帰モデルの係数	model.coef_
散布図を貝殻色を用いて描画する	plt.scatter(データ列x, データ列y, color='seashell')
プロットを使う準備をする	import matplotlib.pyplot as plt
配列とリストについての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
グラフにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
データフレームの列の文字列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
丸印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
文字列中に非数字が含まれる	any(not c.isdigit() for c in s)
option: コーンズシルクを用いる	color = 'cornsilk'
散布図をビスク色として描画する	plt.scatter(データ列x, データ列y, color='bisque')
黄色で数値を出力する	print(f'\033[33m{value}\033[0m')
非数値データをワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
エポック秒のデータ列からタイムスタンプに変換する	pd.to_datetime(ds, unit='s', utc=True)
縦棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
データフレームを2つの列の値によってグループ化する	df.groupby(['A', 'B'])
横棒グラフをピンク色として描画する	plt.barh(データ列x, データ列y, color='pink')
データフレームのカラムが文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
散布図をタン色を使って描画する	plt.scatter(データ列x, データ列y, color='tan')
データフレームを各列と列の組み合わせ毎に集約して、最大値を求める	df.groupby([column, column2], as_index=False).max()
データフレームのリストカラムは正規分布からどの程度歪んでいるか確認する	df[aList].kurt()
データ列の欠損値をメディアンで埋める	ds.fillna(ds.median())
折れ線グラフのマーカーをポイント印にする	plt.plot(データ列x, データ列y, marker='.')
逆順の双方向キュー	reversed(deq)
データ列とリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
保存するCSVファイルの小数点以下の桁数をセットする	df.to_csv(filename, float_format='%.3f')
文字列の中で大文字・小文字を無視して正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
値がセットの要素か調べる	element in aSet
日付時刻データと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
空のタプルを作る	()
Pandasで、データフレームのcollのエポック秒から日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
option: 色をミスティローズに設定する	color = 'mistyrose'
半透明の一点鎖線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ペールグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
リストの値をクリアにする	aList.clear()
線グラフの色をグリーンイエローに指定する	plt.plot(データ列x, データ列y, color='greenyellow')
符号付き整数の最大値を知る	sys.maxsize
混同行列をヒートマップとして確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
行列の最小	np.min(aArray)
折れ線グラフを破線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図の上三角印を黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ヒートマップを用いてデータフレームのリストで指定された列の相関行列を描画する	sns.heatmap(df[aList].corr())
目盛り線	plt.grid(linewidth=3.0)
折れ線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
紺碧色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
線形回帰分析を行う	model = sklearn.linear_model.LinearRegression()
散布図を珊瑚色で描画する	plt.scatter(データ列x, データ列y, color='coral')
カウンタをリストにする	list(aCounter)
実線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
イテラブルを文字列リストに変換して、タブを用いて一つにする	'\t'.join(map(str, iterable))
ホットピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
データフレームのカラムが正規分布からどれだけ尖っているか確認する	df[col].skew()
option: ミディアムパープル色を用いる	color = 'mediumpurple'
ロージーブラウン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
実数の符号をコピーにする	math.copysign(x, x2)
データフレームのリストカラムが正規分布からどの程度尖っているか見る	df[aList].skew()
文字列はPythonのキーワードかどうか	keyword.iskeyword(s)
線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
アイボリー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
option: フォントの色をネイビーに指定する	color = 'navy'
ブルーバイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
データフレームを列名リストを用いてソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
青い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
カテゴリで色付けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
オールドレースにヒストグラムの色を変更する	plt.hist(データ列, color='oldlace')
縦棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
折れ線グラフの左三角印を黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
option: フォントの色をハニーデューに指定する	color = 'honeydew'
option: スプリンググリーンにグラフの色をセットする	color = 'springgreen'
標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
線グラフの色を深紅にセットする	plt.plot(データ列x, データ列y, color='crimson')
文字列中に部分文字列が含まれるかどうか調べる	sub in s
キューからポップする	deq.pop()
折れ線グラフを色付きの破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ヒストグラムをカデットブルー色として描画する	plt.hist(データ列, color='cadetblue')
現在が土曜日か調べる	datetime.datetime.today().weekday() == 5
青いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ミントクリーム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
今日が月曜日	datetime.datetime.today().weekday() == 0
文字列リストをひとつの文字列にする	''.join(aStringList)
クラス分類のアキュレシーを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
ライムグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
縦棒グラフをレベッカパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
現在は何時か知る	datetime.date.today().hour
ダークシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
行列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
文字列のの開始位置から終了位置までの間に部分文字列がいくつか存在するか調べる	s.count(sub, start, end)
正規分布による確率密度関数を用いる	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
一番右側の列をデータフレームから除く	df[df.columns[:-1]]
整数nの八進数表記	oct(n)
値は集合のメンバーに含まれないか調べる	element not in aSet
option: マーカーの色をティールにする	markerfacecolor = 'teal'
データフレームを列で昇順にソートする	df.sort_values(by=column, ascending=True)
列を配列に変換する	df[column].values
データ列の移り変わりを赤い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
オブジェクトは文字列クラスかどうか調べる	isinstance(obj, str)
棒グラフをスラグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='slategrey')
再帰の上限	sys.getrecursionlimit()
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategray')
太字で文字列をプリントする	print(f'\033[1m{value}\033[0m')
文字列の右端から部分文字列を除く	s.rstrip(sub)
散布図を丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o')
TSV形式のファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
スプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
データフレームを各列と列の組み合わせ毎に集計して平均値を求める	df.groupby([column, column2], as_index=False).mean()
データフレームの欠損値がある箇所に	df.style.highlight_null()
最大最小値でデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
散布図の丸マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
目盛り線	plt.grid(linewidth=3.0)
option: フォントの色をライムにセットする	color = 'lime'
データフレームから型リストで指定されたデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
散布図に三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
赤い左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームの欠損値をモードで埋める	df.fillna(df.mode().iloc[0])
オブジェクトはバイト列型	isinstance(obj, bytes)
折れ線グラフの色をライトグリーンにする	plt.plot(データ列x, データ列y, color='lightgreen')
文字列リストを連結し、ひとつの文字列にする	''.join(aStringList)
多次元データを主成分分析で濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
カラムの50パーセンタイル	ds.median()
ファイルからストリームを読み込んでfileとする	file = open(filepath)
横棒グラフの色をやわらかい青にする	plt.barh(データ列x, データ列y, color='cornflowerblue')
実数のバイナリ対数を求める	math.log2(x)
実数の二進対数を求める	math.log2(x)
リストと配列についての散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
ディレクトリをPythonパスに追加する	sys.path.append(dir)
折れ線グラフに黒い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
option: 淡い茶色色を使う	color = 'tan'
四角印を使ってデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
等しい量になるようにn個にリストをビン分割する	pd.qcut(aList, n)
n進文字列をbytesizeバイトのバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
文字列の開始位置から先に部分文字列が含まれないか調べる	s.find(sub, start) == -1
キューの最初から要素を取り除く	deq.popleft()
データフレームの列の欠損値をxに設定する	df[col].fillna(x)
辞書をインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
n番目のシートをエクセルデータファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
option: ライム色を使用する	color = 'lime'
散布図のダイアモンドマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
ダークカーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
線グラフを破線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームから一番左側の列を消す	df[df.columns[1:]]
option: ミディアムターコイズに色をセットする	color = 'mediumturquoise'
データ列の空文字を未入力値に変換し、ドロップする	ds.replace('', np.nan).dropna()
散布図のマーカーをダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
ミディアムアクアマリン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
ベージュ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
線グラフを実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid')
配列とリストの散布図をプロットして、マーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
全要素を０で初期化した符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
シーケンスから配列を作る	np.array(iterable)
組を引数として展開して表示する	print(*aTuple)
タプルのキーに対応した値	aDict.get(key)
スノー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
整数nが配列のひとつか調べる	n in aArray
ミディアムブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
黒い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
横棒グラフをシアン色として描画する	plt.barh(データ列x, データ列y, color='cyan')
リストの折れ線プロットを描いてラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
本日の日付時刻を求める	datetime.datetime.now()
淡い茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
データフレームのリストカラムを四捨五入する	df[aList].round()
折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
数列とイテラブルの散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
option: ダークオーキッド色を用いる	color = 'darkorchid'
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
データフレームの散布図をグループ化して縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
データフレームの最後の列以外を説明変数にする	説明変数 = df[df.columns[:-1]]
散布図を四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s')
option: ロイヤルブルーを使用する	color = 'royalblue'
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
棒グラフをスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='springgreen')
option: グラフの色をライトスカイブルーに指定する	color = 'lightskyblue'
TSVを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフの色をグリーンイエローにセットする	plt.plot(データ列x, データ列y, color='greenyellow')
option: モカシンにフォントの色を設定する	color = 'moccasin'
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
縦棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
縦棒グラフをアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='aquamarine')
filepathにディレクトリを変更する	os.chdir(os.dirname(filepath))
データフレームの中の欠損値が存在する行を消す	df.dropna()
データフレームを各列と列の組み合わせ毎にグループ化し、、最小値を計算する	df.groupby([column, column2], as_index=False).min()
スチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='steelblue')
option: ペルー色を用いる	color = 'peru'
データフレームの中のカラムをビン分割する	pd.cut(df[col], aList)
データ列をリストを境界値としてビンニングする	pd.cut(ds, aList)
空集合	set()
1で全要素を初期化した配列を作る	np.ones(要素数, dtype=np.int)
ヒストグラムの色をスノーに変更する	plt.hist(データ列, color='snow')
各列毎にデータフレームを集計して、列の最大値を求める	df.groupby(column)[column2].max()
棒グラフをドジャーブルー色として描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
横棒グラフをライトブルー色として描画する	plt.barh(データ列x, データ列y, color='lightblue')
組をn回連結する	aTuple * n
グリーンイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
折れ線グラフをブルーバイオレット色を使って描画する	plt.plot(データ列x, データ列y, color='blueviolet')
ネイビー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
オブジェクトがn回繰り返すイテラブルを求める	itertools.repeat(element, n)
option: フォントの色をパレットトルコイズに設定する	color = 'paleturquoise'
ランダムにデータフレームからn行を選ぶ	df.sample(n)
文字列が全て大文字	s.isupper()
オブジェクトは集合クラスのインスタンス	isinstance(obj, set)
棒プロットの幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
黄色色でヒストグラムを描画する	plt.hist(データ列, color='yellow')
線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
無限整数リスト	itertools.count()
ダークスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
データ列の推移を破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ミディアムオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
ライトスチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの三角印を青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムの色を真紅に指定する	plt.hist(データ列, color='crimson')
データ列を丸めて整数にする	ds.round().astype(int)
文字列を走査し、パターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
nの各桁の和を求める	sum(map(int, str(n)))
プロットのカラーパレットを全般的に明るくする	sns.set(pallete='bright')
処理中の例外を情報	sys.exc_info()
文字列は識別子名か調べる	s.isidentifier()
集合の浅いコピーを用意する	aSet.copy()
データフレームの最初を確認する	df.head()
option: 小麦色色を用いる	color = 'wheat'
日付データからn週間分減らす	aDate - datetime.timedelta(weeks=n)
大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
部分的最小二乗法として回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
xを論理値にする	bool(x)
配列とリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: グラフの色をイエローグリーンに変更する	color = 'yellowgreen'
棒グラフをダークターコイズ色として描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームの列の中にと日付データがあるか調べる	df[col].isin([value, value2])
データフレームの列名を指定された列名一覧に置き換える	df.columns = columns
等間隔でデータ列をn個にビン分割する	pd.cut(ds, n)
ヒストグラムの色をサドルブラウンに変更する	plt.hist(データ列, color='saddlebrown')
入力から二つの自然数を読む	A, B = map(int, input().split())
日付データが日付データと同時かどうか	aDate == aDate2
xが-9以上、9以下	-9 <= x <= 9
year年の日付をオブジェクト化する	datetime.date(year=year, month=1, day=1)
無限に数え上げるする	itertools.count()
バイオリン図を描く	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの行を条件で消すには	df[(df[column] == x) & (df[column2] == x2)]
データ列はどれだけ、分散しているか見る	ds.var()
データフレームを列を用いて並べて、上位n件を取り出す	df.sort_values(columns).head(n)
プロットの色を全般的に暗くする	sns.set(pallete='dark')
縦棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
リストを回数してカウンタから引く	aCounter.subtract(iterable)
散布図をスラグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='slategray')
ビン数nとしてデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの中で、列と列の重複を確認する	df.duplicated(subset=[column, column2])
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
データを四分位点でスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
折れ線グラフの丸マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
列によってデータフレームをグループ化して、グループごとの標準偏差を求める	df.groupby(column).std()
両端キューを要素を出す	deq.popleft()
データフレームのカラムを四捨五入する	df[col].round()
配列とリストの散布図をプロットして、その大きさをnにする	plt.scatter(データ列x, データ列y, s=n)
オブジェクトが関数かどうか	callable(obj)
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
文字列が部分文字列で終了するか	s.endswith(sub)
タイムスタンプデータとタイムスタンプデータの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
データフレームのカラムの値をValueMapでまとめて置換する	df[col].replace(ValueMap)
折れ線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
n個にデータ列をビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: パレットトルコイズ色を用いる	color = 'paleturquoise'
列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
紺碧色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
線グラフを青い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
文字列全体が正規表現にASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームの指定した列の名前一覧の列を取り出す	df[columns]
x座標の目盛を対数に変更する	plt.xscale('log')
リストと配列について散布図を描画して、バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
16進文字列を整数に変換する	int(s, 16)
空のセット	set()
横棒グラフをダークオーキッド色を使って描画する	plt.barh(データ列x, データ列y, color='darkorchid')
データフレームのcollをフォーマットで日付データにする	pd.to_datetime(df[col], format='%Y-%m-%d')
レベッカパープルにヒストグラムの色を設定する	plt.hist(データ列, color='rebeccapurple')
文字コードtextとして既存のファイルパスを追加できるように開く]	open(filepath, mode='a', encoding=text)
線グラフをピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='pink')
データフレームの列の欠損値を50パーセンタイルに指定する	df[col].fillna(df[col].median())
赤いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
クロス印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
横棒グラフをゲインズボロ色を用いて描画する	plt.barh(データ列x, データ列y, color='gainsboro')
列のNaNを前の行の値で埋める	ds.fillna(method='ffill')
逆正接	math.atan(x)
逆行列を求める	np.linalg.inv(aArray)
データフレームを各列毎に集計して、列の平均値を求める	df.groupby(column)[column2].mean()
キューのn番目	deq[n]
散布図の▼マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
カーネル密度による分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図をアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
左三角印を用いるデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムをイエローグリーン色を使って描画する	plt.hist(データ列, color='yellowgreen')
クラス分類をよりランダムなランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
リスト内の要素は少なくともひとつ真か調べる	any(aList)
折れ線グラフをライトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームの列を10の位で四捨五入する	df[col].round(-1)
option: グラフの色をグリーンイエローに指定する	color = 'greenyellow'
折れ線グラフの色をディープスカイブルーに指定する	plt.plot(データ列x, データ列y, color='deepskyblue')
タイムスタンプデータが日付時刻データより前か調べる	aDatetime < aDatetime2
リストとイテラブルをzipする	itertools.zip_longest(iterable, iterable2)
ダークゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
配列を折れ線プロットを用いて作図する	plt.plot(データ列x, データ列y)
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgray')
文字列の先頭で正規表現にマッチするか確認する	re.match(pattern, s)
option: 色をスノーに設定する	color = 'snow'
ライトシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
nの2進表現	bin(n)
データフレームの中に存在するの数を数える	df.isin([value]).sum()
日付データは日付データより前	aDate < aDate2
ドジャーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
回帰分析をヒストグラムと勾配ブースティングでする	model = sklearn.ensemble.HistGradientBoostingRegressor()
ヒストグラムの色をオリベドラブにする	plt.hist(データ列, color='olivedrab')
イテラブルと配列の散布図を描画して、マーカーをクロスに指定する	plt.plot(データ列x, データ列y, marker='x')
大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X')
横棒グラフをダークゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
文字列を空白で区切り、、文字列リストにする	s.split()
行列の最大値を求める	np.max(aArray)
縦棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレームのカラムの時を見る	df[col].dt.hour
散布図の大バツマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
配列を中央値で分割する	pd.qcut(aArray, 2)
データフレームをグループ化し、各列に対し標準偏差を求める	df.groupby(column)[column2].std()
ラインを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
プロットにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
パパイヤウィップ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
折れ線グラフのマーカーをバツ印にする	plt.plot(データ列x, データ列y, marker='x')
文字列リストに列を変換して、空白によってつなげる	' '.join(map(str, iterable))
データフレームで、列の重複を見る	df.duplicated(subset=column)
ビン数nを用いてデータ列をビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
横棒グラフをカデットブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='cadetblue')
option: グリーンイエローを用いる	color = 'greenyellow'
ファイルの絶対ファイルパス	os.path.abspath(filepath)
縦棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
散布図に黒い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
列をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, on=column, how='outer')
散布図の右三角マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
縦棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
空の回帰木モデルを用意する	model = sklearn.tree.DecisionTreeRegressor()
クラス分類をスタッキングとして行う	sklearn.ensemble.StackingClassifier()
インデント幅nで辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: データ型を指定する	dtype = bool
事前にケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
カラムの母標準偏差	ds.std(ddof=0)
折れ線グラフの色をダークカーキに変更する	plt.plot(データ列x, データ列y, color='darkkhaki')
データフレームの行がnの行を取り出す	df.loc[n]
nをn2で割った余りをnにする	n %= n2
折れ線グラフをオレンジレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='orangered')
データフレームから破壊的に重複した行をドロップする	df.drop_duplicates(inplace=True)
プログラムのファイル名	sys.argv[0]
option: ライトサーモンにグラフの色を設定する	color = 'lightsalmon'
option: 大きい順にする	ascending = False
散布図をライトスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
縦棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
データフレームの信頼区間を描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
配列と数列の散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
線グラフの色をスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='springgreen')
option: 箱髭図を水平方向にする	vert = False
線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
データ列を四分位数ごとに分割する	pd.qcut(ds, 4)
option: 文字列を分割記号で使う	sep = s
散布図に菱形マーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
折れ線グラフの三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
横棒グラフをペルー色を使って描画する	plt.barh(データ列x, データ列y, color='peru')
浮動小数点数を複素数に変換する	complex(x)
配列を四分位数ごとに分割する	pd.qcut(aArray, 4)
rgbの右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフの丸印を青色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
option: ライトイエローを使う	color = 'lightyellow'
行列積を使う	np.matmul(aArray, aArray2)
option: グラフの色をアンティークホワイトにする	color = 'antiquewhite'
文字列で区切って二つの値をプリントする	print(value, value2, sep=s)
option: スラグレー色を用いる	color = 'slategrey'
プラットホームがLinux	sys.platform.startswith('linux')
ヒストグラムをインディゴ色として描画する	plt.hist(データ列, color='indigo')
黒い菱形マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームのカーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
一度にValueMapでデータ列の値を置換する	ds.replace(ValueMap)
データフレームのカラムの月を求める	df[col].dt.month
値∉セット	element not in aSet
nが配列のどれか	n in aArray
1行だけ標準入力から読み込んで改行を取り除く	sys.stdin.readline().rstrip()
列のそれぞれを関数でフィルタする	map(func, iterable)
キューのn番目を求める	deq[n]
青い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
等間隔でn個にデータフレームの中の列を分割する	pd.cut(df[col], n)
散布図の大バツ印の大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
データフレームの指定された列名一覧の列を抽出する	df[columns]
集合を空集合にする	aSet.clear()
カラーテーマをパステル調にする	sns.set(pallete='pastel')
淡いピンク色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
Pandasでデータ列をタイムスタンプに変換する	pd.to_datetime(ds)
1で全要素を初期化した配列を作成する	np.ones(要素数, dtype=np.int)
縦棒グラフをディープスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: グラフの色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
ヒストグラムの色をスラグレーにする	plt.hist(データ列, color='slategrey')
データ列をn個に等間隔でビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
文字列が部分文字列で終わるかどうか	s.endswith(sub)
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
配列とリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
トマト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
オールドレース色としてヒストグラムを描画する	plt.hist(データ列, color='oldlace')
空の組	()
句読点文字を全て見る	string.punctuation
ペアリストpairsからカウンタを新規生成する	collections.Counter(dict(pairs))
実数の双曲線余弦の逆数を求める	math.acosh(x)
データフレームのカラムを小数点以下n桁で四捨五入する	df[col].round(n)
データ列の文字列を未入力値にする	ds.replace(s, np.nan)
データ列の欠損値をxで置き換える	ds.fillna(x)
y軸を対数に変更する	plt.yscale('log')
option: ミディアムターコイズ色を使用する	color = 'mediumturquoise'
線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
option: グラフの色をシーグリーンに変更する	color = 'seagreen'
最大値・最小値で整数乱数を発生させる	random.randint(最小値, 最大値)
表データの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
散布図の四角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
データフレームから指定された４つの列を選ぶ	df[[column, column2, column3, column4]]
データフレームの列を型にする	df[col] = df[col].astype(ty)
線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
列名リストでデータフレームを並べる	df.sort_values(by=column)
二つの文字列を順に出力する	print(value, value2)
nを十六進リテラルにする	hex(n)
option: バイオレットに色を設定する	color = 'violet'
折れ線グラフの右三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームの列を行に変更する	df.set_index(column)
両端キューが空であるか調べる	len(deq) == 0
縦棒グラフをプロットして、中央寄せする	plt.bar(ラベル列, データ列, align='center')
何回まで再帰ができるかを調べる	sys.getrecursionlimit()
既存の行列をベースに全要素が0の配列を初期化する	np.zeros_like(aArray)
ライムグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='limegreen')
option: ピーチパフにフォントの色を指定する	color = 'peachpuff'
ファイルパスをオープンして]読み込みストリームを求める	open(filepath, mode='r')
option: グラフの色をダーク・スラテグレーに変更する	color = 'darkslategrey'
Pandasでデータ列のUNIX秒からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
ダークシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
折れ線グラフの印をバツにする	plt.plot(データ列x, データ列y, marker='x')
option: ミディアムターコイズを用いる	color = 'mediumturquoise'
nがn2以下かどうかテストする	n <= n2
カウンタの最頻出の項目	aCounter.most_common()[0]
ピアソン相関係数としてデータフレームの相関行列	df.corr(method='pearson')
スラッシュで区切って二つの文字列を出力する	print(value, value2, sep='/')
スプリンググリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
イテラブルから行列を作る	np.array(iterable)
散布図をrgbのバツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: フォントの色をパレットトルコイズに変更する	color = 'paleturquoise'
データフレームの中で、列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
紺色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
ヒストグラムの色をスレートブルーに変更する	plt.hist(データ列, color='slateblue')
横棒グラフをリネン色として描画する	plt.barh(データ列x, データ列y, color='linen')
データフレームのリストカラムの中に存在する文字列の合計をカウントする	df[aList].isin([value]).sum()
凡例を加える	plt.legend(['凡例A', '凡例B'])
タプルのn番目のの要素	aTuple[n]
実数を実数で割った剰余を求める	math.remainder(x, x2)
nを8進数表記に変換する	oct(n)
日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
三つの最小値	min(x, y, z)
明るく色使いをグラフの描画で使う	sns.set(pallete='bright')
データ列の値は欠損値かどうか調べる	ds.isna()
データフレームとデータフレームの列を横方向に連結する	pd.concat([df, ds], axis=1)
棒グラフを小麦色色を用いて描画する	plt.bar(データ列x, データ列y, color='wheat')
散布図にダイアモンド印を使う	plt.scatter(データ列x, データ列y, marker='D')
今日が金曜日か調べる	datetime.datetime.today().weekday() == 4
option: ライトグリーンにグラフの色を設定する	color = 'lightgreen'
青い一点鎖線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
０で全要素を初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
データ列を用いる	import pandas as pd
線グラフの色を茶色に変更する	plt.plot(データ列x, データ列y, color='brown')
日付データをn分前にする	aDate - datetime.timedelta(minutes=n)
黒色で実行結果をプリントする	print(f'\033[30m{value}\033[0m')
ラインを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
赤い▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ネイビー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
オブジェクトにフィールドがあるかテストする	hasattr(obj, プロパティ名)
イエローグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
ヘッダー行を左寄せに増やす	pd.set_option('colheader_justify', 'left')
線グラフをダークゴールデンロッド色を使って描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: グラフの色を赤に変更する	color = 'red'
option: ディムグレーにグラフの色をする	color = 'dimgrey'
文字列を最後の部分文字列で二つに区切って前半の文字列を見る	s.rpartition(sub)[0]
ヒストグラムをブルーバイオレット色として描画する	plt.hist(データ列, color='blueviolet')
最小値でデータフレームのリストカラムのNaNを補う	df[aList].fillna(df[aList].min())
リストとリストについての散布図に下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v')
データフレームを百の位で丸めて整数にする	df.round(-2).astype(int)
option: ライトグリーン色を使用する	color = 'lightgreen'
データフレームのそれぞれのグループごとの分散を計算する	df.groupby(column).var()
棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
縦棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
散布図を下三角マーカーで描画する	plt.scatter(データ列x, データ列y, marker='v')
option: グラフの色を青緑にセットする	color = 'turquoise'
データフレームを10の位で四捨五入する	df.round(-1)
option: グラフの線のスタイルを一点鎖線にする	linestyle = 'dashbot'
option: シルバー色を使用する	color = 'silver'
ダークマゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
option: ピーチパフにグラフの色を指定する	color = 'peachpuff'
項目名がタプルに存在していないとき要素を追加する	aDict.setdefault(key, element)
キューの要素をインプレースに反転する	deq.reverse()
ヒストグラムの色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
主成分分析として多次元データを淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
文字列の最初	s[0]
十六進数字を全て見る	string.hexdigits
整数個からk個取り出した時の順列の総数	math.perm(n, k)
平均値でデータフレームのNaNを埋める	df.fillna(df.mean())
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
赤い菱形マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
option: クロスマーカーを描画する	marker = 'x'
データフレームのリスト列の欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
両端キューは空でないか確認する	len(deq) != 0
縦棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
数列とリストの散布図を描画してマーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
タブ文字	'\t'
折れ線グラフを赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ヒストグラムの色をインディゴにセットする	plt.hist(データ列, color='indigo')
L1ノルムとして正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ファイルパスの拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
ベクトルの合計を求める	np.sum(aArray)
ファイルに文字列を書く	f.write(s)
文字列全体が正規表現にケースを無視してマッチするか調べる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
散布図をミディアムスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
配列として列を抽出する	df[column].values
データフレームから型リストのデータ型の列を除外する	df.select_dtypes(exclude=typeList)
散布図の菱形マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
option: ヘッダをnamesに変更する	header = names
小数点数の双曲線正弦の逆数	math.asinh(x)
カウンタ	collections.Counter()
日付時刻データを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
モジュールとして自分自身を	sys.modules[__name__]
改行を用いて文字列を区切る	s.splitlines()
option: ハニーデューにグラフの色を設定する	color = 'honeydew'
現在の分	datetime.date.today().minute
部分文字列が文字列の開始位置からと終了位置の範囲にあるか調べる	s.find(sub, start, end) != -1
パパイヤウィップ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
作画で使うフォントを日本語に指定する	sns.set(font='IPAexGothic')
xが一桁の正の数かどうか	0 <= x <= 9
全要素を0で初期化した配列を作る	np.zeros(要素数)
部分文字列を文字列の最初から探す	s.find(sub)
データを外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
オリーブ色としてヒストグラムを描画する	plt.hist(データ列, color='olive')
パラメータから名前付きタプルをインスタンス化する	C._make(パラメータ)
option: ディムグレーにフォントの色を指定する	color = 'dimgray'
文字列はタプルに含まれないか調べる	element not in aTuple
option: グラフの色をライトグレーに変更する	color = 'lightgrey'
折れ線グラフを半透明の実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
散布図をrgbのダイアモンドマーカーを使って描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームを複数の列の値によってグループ化し、要約統計量を算出する	df.groupby(columns).describe()
ヒストグラムをスノー色を用いて描画する	plt.hist(データ列, color='snow')
青い破線でイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
二つのデータ列の散布図として残差を描く	sns.residplot(x=データ列, y=データ列)
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データフレームを列ごとにグループ化して、それぞれのグループごとの分散を計算する	df.groupby(column).var()
縦棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
データフレームの列が正規分布からどの程度歪んでいるか見る	df[col].kurt()
データフレームを列によってで破壊的にソートする	df.sort_values(by=column, inplace=True)
option: 大バツマーカーを使用する	marker = 'X'
リストをビン数nとして分割する	pd.cut(aList, n)
ヒストグラムの色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
折れ線グラフの印を▼にする	plt.plot(データ列x, データ列y, marker='v')
文字列に日本語が含まれるかどうか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
option: ダークスラテグレーを用いる	color = 'darkslategray'
部分文字列を文字列の右端から探す	s.rfind(sub)
折れ線グラフに丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
option: namesを列の名前にセットする	names = names
横棒グラフをライムグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='limegreen')
散布図の丸印を赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
option: ローングリーンを使う	color = 'lawngreen'
タプルのn番目以降の要素を得る	aTuple[n:]
データフレームのリストカラムの中に文字列があるか確認する	df[aList].isin([value])
プログラムの実行を強制的に終える	sys.exit()
異なる列をキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
オブジェクトのプロパティの値を値に指定する	setattr(obj, プロパティ名, 値)
標準入力から1行だけ読み込む	sys.stdin.readline()
option: パールバイオレットレッドを用いる	color = 'palevioletred'
データフレームから列を三つだけ選択する	df[[column, column2, column3]]
リスト内の要素は全て真か調べる	all(aList)
nの無限数列を得る	itertools.repeat(n)
全要素が1の行列を初期化する	np.ones(行数, 列数, dtype=np.int)
イテラブルからn要素、サンプリングする	random.sample(iterable, k=n)
セットにシーケンスの要素を全て追加する	aSet.update(iterable)
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
ゼロ埋めした８ビット整数型の配列を初期化する	np.zeros(要素数, dtype=np.int8)
浮動小数点数を小数点以下第一位で丸める	round(x, 1)
赤いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='r')
option: グラフの色をベージュに指定する	color = 'beige'
点線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
環境はウィンドウズ	sys.platform.startswith('win32')
集合が空か	len(aSet) == 0
option: フォントの色をライムグリーンに設定する	color = 'limegreen'
カテゴリ列で色分けしてデータフレームをにバイオリン図でグラフ化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
組の要素数	len(aTuple)
データ列の中にあるの合計を数える	ds.isin([value]).sum()
アイボリー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
文字列が空白文字か	s.isspace()
データ列を箱髭図を用いて描画する	plt.boxplot(データ列)
データ列の四分位を描画する	plt.boxplot(データ列)
切片なしの線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームのヒストグラムを縦横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
日付時刻データにn秒分加える	aDatetime + datetime.timedelta(seconds=n)
option: 無視する列番号をnamesで指定する	skiprows = names
プラム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
正規分布の確率密度関数を用いる	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
3つの最小値	min(x, y, z)
データ列とリストについて散布図を描画してマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
nは組のどれかか調べる	n in aTuple
ヒストグラムをやわらかい青色として描画する	plt.hist(データ列, color='cornflowerblue')
時間を使用する	import time
双方向キューをリストに変換する	list(deq)
散布図をrgbの下三角マーカーで描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
勾配ブースティングとしてクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
横棒プロットを描いて、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
書き込み用にファイルをBOM付きで開く]	open(filepath, mode='w', encoding='utf_8_sig')
データフレームを列で並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
空のマップ	{}
線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
日付データをタプルにする	aDate.timetuple()
文字列中の全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
要素がタプルの値に含まれていないか調べる	element not in aDict.values()
非数値データ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
新しい部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: グラフの色をサーモンに変更する	color = 'salmon'
ブラック色を使ってヒストグラムを描画する	plt.hist(データ列, color='black')
黒い大バツマーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
整数個のものからk個取り出したときの並べ方の総数を求める	math.perm(n, k)
現在の時刻	datetime.date.today().hour
文字列中にひとつでも非小文字が含まれる	any(not c.islower() for c in s)
モカシン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
訓練データでモデルを学習する	model.fit(説明変数, 目的変数)
Pandasでタイムスタンプのデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
ピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
辞書をインデント幅nのJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
formatパターンの文字列をタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
カーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
nの無限な数列	itertools.repeat(n)
横棒グラフを赤色を用いて描画する	plt.barh(データ列x, データ列y, color='red')
ベクトルの値を使う	aArray[行番号, 列番号]
プロットの色を濃くする	sns.set(pallete='deep')
名前付きタプルを引数からインスタンス化する	C._make(パラメータ)
実行結果をマゼンタにする	f'\033[35m{value}\033[0m'
option: ダークグレーを用いる	color = 'darkgray'
ヒストグラムの色を白に指定する	plt.hist(データ列, color='white')
耐火レンガ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
黄色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
nでシードを固定する	random.seed(n)
線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
リストと配列についての散布図に黒い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
散布図のポイント印を赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームのリストカラムを10の位で四捨五入して、整数型にする	df[aList].round(-1).astype(int)
折れ線グラフの▼マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの欠損値を後の行の値にセットする	df.fillna(method='bfill')
データフレームのn行まで選択する	df[:n]
JSON形式の文字列をデータにする	json.loads(b.decode('unicode-escape'))
リストとイテラブルについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
文字列の出力を改行せず行う	print(value, end='')
データフレームを２つの列の値でグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームのカラムの中の欠損値の合計をカウントする	df[col].isna().sum()
シーグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='seagreen')
点線の折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムをライム色を用いて描画する	plt.hist(データ列, color='lime')
列は正規分布からどれだけ歪んでいるか見る	ds.kurt()
カンマ区切りのファイルをデータフレームとして読む	pd.read_csv(filename, sep=',')
データ列の文字列を未入力値に変換する	ds.replace(s, np.nan)
スピアマン順位相関係数でデータフレームの相関行列	df.corr(method='spearman')
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgray')
ヒストグラムの色をリネンに指定する	plt.hist(データ列, color='linen')
データフレームのヒストグラムを縦横に並べて、プロット化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
ヒストグラムをダークブルー色で描画する	plt.hist(データ列, color='darkblue')
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
整数乱数の配列	np.random.randint(開始値, 終了値, N)
文字列に漢字が使われているか調べる	re.search('[\u4E00-\u9FD0]', s)
リストは少なくとも一つ真	any(aList)
option: ミッドナイトブルーを使う	color = 'midnightblue'
データフレームの列の第三四分位数	df[col].quantile(0.75)
データフレームの指定された列を取り出す	df[[column]]
線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
ファイルパスを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<')
ファイルパスからバイナリストリームをオープンして]fとする	f = open(filepath, mode='rb')
折れ線グラフの星マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
非数	math.nan
縦棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
マップの項目数を得る	len(aDict)
配列とリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
ライトイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightyellow')
文字列を太文字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
追加できるようにEUCを用いて既存のファイルをオープンする]	open(filepath, mode='a', encoding='euc_jp')
日付時刻データが月曜日	aDatetime.weekday() == 0
列の名前リスト	df.columns
タプルのn番目のを使う	aTuple[n]
データフレームの列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
棒グラフを珊瑚色で描画する	plt.bar(データ列x, データ列y, color='coral')
列の中に文字列と文字列がいくつ存在するか数える	ds.isin([value, value2]).sum()
文字列の左側から部分文字列を除く	s.lstrip(sub)
ヒストグラムをパールゴールデンロッド色として描画する	plt.hist(データ列, color='palegoldenrod')
折れ線グラフのバツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
データフレームをに箱ひげ図で見る	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームの欠損値を直前の値に増やす	df.fillna(method='ffill')
ミディアムシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumseagreen')
3自然数の最大公約数	math.gcd(n, n2, n3)
タイムスタンプデータにn分分加算する	aDatetime + datetime.timedelta(minutes=n)
データフレームのカラムのNaNを50パーセンタイルで埋める	df[col].fillna(df[col].median())
ホワイトスモーク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
散布図に▽マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフの色をライトイエローにセットする	plt.plot(データ列x, データ列y, color='lightyellow')
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
option: グリーン色を用いる	color = 'green'
データ列の欠損値を平均で埋める	ds.fillna(ds.mean())
キーがマップに存在するか調べる	key in aDict
線グラフの色をペルーに指定する	plt.plot(データ列x, データ列y, color='peru')
オブジェクトをイテレータに変換する	iter(obj)
ミディアムバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
散布図をダークグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
オブジェクトが整数クラスか	isinstance(obj, int)
深紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームを二つの列の値でグループ化する	df.groupby(['A', 'B'])
オレンジレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
ハニーデュー色としてヒストグラムを描画する	plt.hist(データ列, color='honeydew')
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
全句読点文字	string.punctuation
スチールブルーにヒストグラムの色を指定する	plt.hist(データ列, color='steelblue')
データフレームの列が文字列が含まれない行を選択する	df[not df[column].str.contains(s)]
Pandasで、UNIX秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームをランダムサンプリングする	df.sample()
データフレームの未入力値を中央値に設定する	df.fillna(df.median())
フォレストグリーン色でヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
データフレームのリストカラムのNaNを直後の値に設定する	df[aList].fillna(method='bfill')
線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ライムグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
スラッシュで区切って二つの文字列をプリントする	print(value, value2, sep='/')
散布図をアンティークホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
データフレームを1000の位で丸めて整数型にする	df.round(-3).astype(int)
日付データが日付データより前	aDate < aDate2
横棒グラフの色を濃いシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
nの八進表現	oct(n)
アクア色でヒストグラムを描画する	plt.hist(データ列, color='aqua')
縦棒グラフをダークサーモン色として描画する	plt.bar(データ列x, データ列y, color='darksalmon')
n2がn以上、かつ、n3以下かどうか	n <= n2 and n2 <= n3
ヒストグラムをサドルブラウン色として描画する	plt.hist(データ列, color='saddlebrown')
ディムグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='dimgray')
JSONフォーマットのバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
オブジェクトの種類	type(obj)
ファイルパスを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
中央値でリストをビンニングする	pd.qcut(aList, 2)
辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
nが2で割り切れるか判定する	n % 2 == 0
線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
スタッキングを用いて回帰分析を行う	sklearn.ensemble.StackingRegressor()
データフレームを列名リストの値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
空のリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
option: カラムの名前をnamesに変更する	header = names
ひとつでも非アスキー文字が文字列中にあるか調べる	any(not c.isascii() for c in s)
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgray')
2つのリストをカンマで区切ってプリントする	print(value, value2, sep=',')
TSV形式のファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
棒グラフをパールバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='palevioletred')
リストを等しい量になるように分割数nで分割する	pd.qcut(aList, n)
二進数の文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
▽マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
データ列の中に文字列と日付データがある	ds.isin([value, value2])
ヒストグラムにカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
折れ線グラフをミディアムブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumblue')
カウンタを列をカウントして、更新する	aCounter.update(iterable)
一方に含まれ、他方に含まれない集合を計算する	aSet.difference(aSet2)
青い上三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
二つの配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
文字列中の部分文字列の登場をカウントする	s.count(sub)
棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
リストの最後からn番目以前の部分を抽出する	aList[:-n]
作画を正方形にする	plt.axis('equals')
部分文字列を文字列中から見つける	s.find(sub)
折れ線グラフをローングリーン色として描画する	plt.plot(データ列x, データ列y, color='lawngreen')
小麦色にヒストグラムの色を変更する	plt.hist(データ列, color='wheat')
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgray')
カラムの中にある文字列と文字列の合計をカウントする	ds.isin([value, value2]).sum()
データフレームをJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
折れ線グラフに凡例をつける	plt.plot(データ列x, データ列y, label='ラベル')
ヒストグラムをシャルトリューズ色を用いて描画する	plt.hist(データ列, color='chartreuse')
ユニコードに対応する文字	chr(unicode)
横棒グラフを赤色として描画する	plt.barh(データ列x, データ列y, color='red')
線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
数列とリストの散布図を描画して、マーカーを上三角に指定する	plt.plot(データ列x, データ列y, marker='^')
整数nを8進リテラルに変換する	oct(n)
新しい勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
文字列が全てASCII文字か調べる	s.isascii()
折れ線グラフの星印の色を指定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
赤い星マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
スピアマンでデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
折れ線グラフの右三角印を黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
半透明の実線として配列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
グラフの描画で暗くパレットを使う	sns.set(pallete='dark')
データフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
データフレームを降順に複数の列によって破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
文字列がn回繰り返す列	itertools.repeat(element, n)
キューの先頭にイテラブルの各要素を入れる	deq.extendleft(iterable)
ダークシアグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
アイボリー色を用いてヒストグラムを描画する	plt.hist(データ列, color='ivory')
折れ線グラフのクロスマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ダークスレートブルー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
データフレームのリスト列の未入力値を最大値で埋める	df[aList].fillna(df[aList].max())
数列の散布図を描画する	plt.scatter(データ列x, データ列y)
折れ線グラフのバツ印の太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
散布図の印を赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
最大値・最小値で整数乱数を求める	random.randint(最小値, 最大値)
predicateFuncを適用したとき真とならないイテラブルの要素を得る	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフの色をティールに設定する	plt.plot(データ列x, データ列y, color='teal')
縦棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
replに正規表現patternでまとめて列の値を置き換える	ds.replace(pattern, repl, regex=True)
双方向キューをタプルにする	tuple(deq)
二つ並べてデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
ファイルパスを追加モードで開く]	open(filepath, mode='a')
散布図の四角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ダークオリーブグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
カラムの未入力値を最小値に設定する	ds.fillna(ds.min())
データフレームの文字列をNaNに変換する	df.replace(s, np.nan)
option: コーラル色を使用する	color = 'coral'
数列を円グラフにする	plt.pie(データ列, startangle=90)
散布図に右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
散布図に右三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='>')
ラベンダーブラッシュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
データ列がどの程度、分散しているか調べる	ds.var()
縦棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフのポイント印を黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
整数を整数に変換する	int(x)
サーモン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
集合をイミュータブルなセットにする	frozenset(aSet)
シーケンスとイテラブルをペア化する	itertools.zip_longest(iterable, iterable2)
散布図を黒い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームの重複する行を数える	df.duplicated().sum()
青色で線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
２つの文字列は等しくないかテストする	s != s2
クロス印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフのマーカーを菱形にする	plt.plot(データ列x, データ列y, marker='D')
色付きの破線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームをグループ化し各列に対し個数を求める	df.groupby(column)[column2].count()
ポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをブルーバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='blueviolet')
プロットの中に枠なしの補足を入れる	plt.legend(frameon=False)
青い点線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
配列のユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
option: レモンシフォンに色を設定する	color = 'lemonchiffon'
作画で使うフォントを指定する	sns.set(font=フォント名)
表データから列名を複数指定して選択する	df[columns]
縦棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
option: 最初の行をヘッダに設定する	header = 0
カウンタの要素をリストとして得る	aCounter.keys()
赤い一点鎖線としてリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
小数点数の双曲線余弦	math.cosh(x)
散布図をターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データフレームを列で昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
文字列をカンマで分割して文字列リストに変換する	s.split(',')
option: マーカーの色を濃い青にする	markerfacecolor = 'darkblue'
集合が空かどうか調べる	len(aSet) == 0
空のカウンタを作る	collections.Counter()
nがn2と等しい	n == n2
黄緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
スプリンググリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
ミディアムバイオレットレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
数式の変数についてのn階微分を行う	sympy.diff(e, z, n)
option: ピンク色を使用する	color = 'pink'
nが2で割り切れないか	n % 2 == 1
JSON文字列をデータに変換する	json.loads(jsonString)
３つの文字列を順に表示する	print(value, value2, value3)
ミディアムブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データ列の推移を一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ダークバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ユニコードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
組の長さ	len(aTuple)
文字列を部分文字列で二分し、先頭の文字列を使う	s.partition(sub)[0]
折れ線グラフの丸印の線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: ダークレッドを使用する	color = 'darkred'
線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
散布図をrgbの四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: ライトグレー色を用いる	color = 'lightgrey'
データ列が何秒か確認する	ds.dt.second
スチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
折れ線グラフを描く	plt.plot(データ列x, データ列y)
option: ミディアムオーキッド色を使用する	color = 'mediumorchid'
集合から要素を全て消す	aSet.clear()
option: グラフの色をミディアムスレートブルーにする	color = 'mediumslateblue'
組の最初の文字列を探す	aTuple.index(element)
データフレームが正規分布からどの程度、歪んでいるか確認する	df.kurt()
option: アクアマリン色を使用する	color = 'aquamarine'
双方向キューのstart番目からend番目までの部分要素	collections.deque(itertools.islice(deq, start, end))
線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
データを最大値を用いて正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
本日の日数を求める	datetime.datetime.today().day
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
折れ線グラフの星印を黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
多次元データをMSDとして濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
データ列は何月か確認する	ds.dt.month
TSVファイルファイル名がか	filename.endswith('.tsv')
ベクトルのユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
空の勾配ブースティング回帰木を準備する	model = sklearn.ensemble.GradientBoostingRegressor()
データフレームのリスト列の相関行列を求める	df[aList].corr()
option: グラフの色をミディアムスプリンググリーンに変更する	color = 'mediumspringgreen'
ドジャーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='dodgerblue')
シャルトリューズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
リストの末尾にリストを追加する	aList.extend(aList2)
option: フォントの色をライトイエローに変更する	color = 'lightyellow'
折れ線グラフの△マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ヒストグラムをローングリーン色として描画する	plt.hist(データ列, color='lawngreen')
数列とデータ列についての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
配列と数列についての散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
黒い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
リストと数列について散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
スタックをタプルに変換する	tuple(deq)
rgbの菱形マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: カラムの名前を自動的な連番に指定する	header = None
option: エンコーディングをSJISに変更する	encoding = 'shift_jis'
目盛り線をプロットに入れる	plt.grid(True)
横棒グラフをダークスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
赤い▲マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
実数のバイナリ対数	math.log2(x)
赤い大バツマーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
配列の各要素の最大公約数	np.gcd(aArray, aArray2)
散布図をrgbの星マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
新しいリッジ回帰モデルを用意する	model = sklearn.linear_model.Ridge(alpha=正則化項)
線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
ヒストグラムをダークオーキッド色として描画する	plt.hist(データ列, color='darkorchid')
変数を水色にする	f'\033[36m{value}\033[0m'
データフレームをに箱ひげ図で図示する	sns.boxplot(x='カテゴリ列', y='列', data=df)
線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategrey')
線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
ヒストグラムの色をブラウンに設定する	plt.hist(データ列, color='brown')
線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
現在の曜日を使う	datetime.datetime.today().weekday()
小数点数の余弦	math.cos(x)
option: 線の種類を実線にセットする	linestyle = 'solid'
黒い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='k')
横棒グラフをサドルブラウン色として描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
コーンズシルク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
赤い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
ヒートマップを用いてデータフレームの相関行列をグラフ化する	sns.heatmap(df.corr())
双方向キューをデキューする	deq.popleft()
データフレームを四捨五入する	df.round()
ボックスチャートにラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
横棒グラフをライトスチールブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
列をキーとして二つのデータフレームをジョインする	pd.merge(df, df2, on=column)
イテラブルを集合に追加更新する	aSet.update(iterable)
星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*')
ミディアムスレートブルー色としてヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
0からnまでの整数リストを作る	list(range(n+1))
散布図をrgbの右三角マーカーで描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
折れ線グラフの右三角印の線幅を変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
日付を使用する	import datetime
データ列とリストの散布図にrgbの左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフの色をレモンシフォンに変更する	plt.plot(データ列x, データ列y, color='lemonchiffon')
タプルの末尾を除く	aTuple[:-1]
ベクトルのユニークな各要素の頻度を使う	np.unique(aArray, return_counts=True)
データフレームを各列毎にグループ化して、列の標準偏差を算出する	df.groupby(column)[column2].std()
データフレームを'A'列を用いて小さい順に並べる	df.sort_values(by='A', ascending=True)
文字列を新しい文字列で置換する	s.replace(sub, newsub)
データフレームの列の空文字をNaNに変換し、ドロップする	df[col].replace('', np.nan).dropna()
rgbの▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
実数の仮数を求める	math.frexp(x)[0]
option: 青紫を使う	color = 'violet'
複数のデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
小数点数の逆双曲線正接を求める	math.atanh(x)
グラフの目的を論文に指定する	sns.set(context='paper')
データフレームはどれだけ、分散しているか見る	df.var()
複素数型のゼロ埋めされた配列	np.zeros(要素数, dtype=bool)
リストとリストについて散布図をプロットしてダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図のマーカーをクロス印にする	plt.scatter(データ列x, データ列y, marker='x')
データフレームを表示するとき、データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
TSVファイルファイル名がかどうか調べる	filename.endswith('.tsv')
予測値とデータの離れ具合を描く	sns.residplot(x='列名', y='列名', data=df)
Pandasで、データ列を日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
折れ線グラフに黒いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
ブール型の全要素を０で初期化した行列を初期化する	np.zeros(行数, 列数, dtype=np.int32)
option: グラフの色を珊瑚に設定する	color = 'coral'
折れ線グラフの色をトマトに変更する	plt.plot(データ列x, データ列y, color='tomato')
option: 上三角マーカーを描画する	marker = '^'
ティール色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
データ列をフォーマットfmtで日付データに変換する	pd.to_datetime(ds, format=fmt)
シアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
データフレームの欠損値をメディアンで埋める	df.fillna(df.median())
整数nはタプルの一つ	n in aTuple
ミッドナイトブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
ベクトルのユニークな値を要素とする配列	np.unique(aArray)
乱数の行列を作成する	np.random.random((行数, 列数))
散布図をペルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='peru')
横棒グラフをライトイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightyellow')
option: フォントの色をダークカーキに設定する	color = 'darkkhaki'
データ列がどの程度分散しているか見る	ds.var()
タプルの中の一番小さい値	min(aTuple)
エラーなくリストの文字列の位置を使う	aList.index(element) if element in aList else -1
nがn2で割り切れるか確認する	n % n2 == 0
表データから指定された二列を抽出する	df[[column, column2]]
ダークスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
フローラルホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの色をフローラルホワイトに指定する	plt.plot(データ列x, データ列y, color='floralwhite')
散布図をパウダーブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='powderblue')
マッピングのキーとそのエントリをペアとして取り出す	aDict.items()
配列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
データ列を閾値を用いて二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
棒グラフを黄色色として描画する	plt.bar(データ列x, データ列y, color='yellow')
分類結果のPPVを求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
棒グラフの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
多次元尺度構成法で多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
行列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
全要素を０で初期化した行列を作る	np.zeros(行数, 列数)
option: フォントの色をグリーンに指定する	color = 'green'
今日の日付時刻を使う	datetime.datetime.today()
データフレームのカラムの正規分布に対する上下広がりを求める	df[col].skew()
二つの数値をカンマで区切って出力する	print(value, value2, sep=',')
nの二乗を求める	n ** 2
データフレームの列の値がxより大きくx2より少ないデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
整数乱数の行列を初期化する	np.random.randint(開始値, 終了値, N)
データ列の欠損値を中央値で置換する	ds.fillna(ds.median())
リストとリストについての散布図に黒いクロスマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
変数名をキーとしてマップ	dict(name=element)
黒い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
ライトグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
ライトゴールドロディイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
ファイルパスを読み込み用にオープンして]、fとする	f = open(filepath, mode='r')
棒グラフをアクア色を用いて描画する	plt.bar(データ列x, データ列y, color='aqua')
カウンタのボトムをリストとして得る	aCounter.most_common()[:-n-1:-1]
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgrey')
アンティークホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
列にイテラブルを続ける	itertools.chain(iterable, iterable2)
折れ線グラフの色を赤に変更する	plt.plot(データ列x, データ列y, color='red')
オーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='orchid')
フクシア色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
黒い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
プラットホームがMacOSかテストする	sys.platform.startswith('darwin')
option: バイナリ書き込みモードに指定する	mode = 'wb'
折れ線グラフの四角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
赤い実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
スレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='slateblue')
配列の行ごとの合計を計算する	np.sum(aArray, axis=1)
縦棒グラフをカデットブルー色として描画する	plt.bar(データ列x, データ列y, color='cadetblue')
赤い破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
縦軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
文字列の末尾から部分文字列を除く	s.rstrip(sub)
文字コードtextを用いてファイルを開く]	open(filepath, encoding=text)
折れ線グラフの三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: マーカーの大きさを設定する	markersize = 2.0
ヒストグラムの色を濃いシアンに設定する	plt.hist(データ列, color='darkcyan')
データフレームの列の文字列が文字列で終わる行を選ぶ	df[df[column].str.endswith(s)]
縦方向に二つのデータフレームを連結する	pd.concat([df, df2])
コーンフラワーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
二つの集合の対称差集合を算出する	aSet.symmetric_difference(aSet2)
データフレームのカラム名を指定された列の名前一覧に置き換える	df.columns = columns
キューの中に数値はある	element in deq
勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
実数を十の位で四捨五入する	round(x, -1)
JSONLファイルにデータフレームをCSVファイルで保存する	df.to_csv(filename)
プロットの色をパステル調にする	sns.set(pallete='pastel')
option: グラフの線幅を3.0ポイントに設定する	linewidth = 3.0
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
正弦の逆数	math.asin(x)
データフレームを複数の列によってグループ化する	df.groupby(columns)
TSVファイルファイル名が	filename.endswith('.tsv')
データフレームのカラムの中の欠損値の個数を数える	df[col].isna().sum()
線グラフをライトサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x')
ランダムフォレストでクラス分類をする	model = sklearn.ensemble.RandomForestClassifier()
文字列が全てアスキー文字かどうか確認する	s.isascii()
ヒストグラムの色をディープスカイブルーに指定する	plt.hist(データ列, color='deepskyblue')
データフレームをJSONLファイルに書き込む	df.to_excel(filename)
データフレームの列を折れ線グラフとして作図する	plt.plot(df[column], df[column])
各列毎にデータフレームをグループ化し、、列の分散を計算する	df.groupby(column)[column2].var()
２変数の最大値	max(x, y)
predicateFuncがTrueとなるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
データフレームのリストカラムの中の未入力値の合計を数える	df[aList].isna().sum()
文字列全体がパターンに複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
データ列の中に文字列が含まれるか調べる	ds.isin([value])
数で浮動小数点数を整数除算する	x // y
縦棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
nで乱数生成系列を初期化する	random.seed(n)
横棒グラフをパールバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='palevioletred')
実線でリストの移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='solid')
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
データフレームからランダムに一行を抽出する	df.sample()
ヒストグラムの色を黄色にする	plt.hist(データ列, color='yellow')
線グラフの色をオールドレースに指定する	plt.plot(データ列x, データ列y, color='oldlace')
降順に2つの列でデータフレームを破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
行列の計算をする	import numpy as np
数値を変数について微分する	sympy.diff(e, z)
option: オリーブ色を用いる	color = 'olive'
データ列のタイムゾーンを日本にする	ds.tz_convert('Asia/Tokyo')
シエナ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
option: 色をマルーンに設定する	color = 'maroon'
組の最後	aTuple[-1]
option: 暗い赤を用いる	color = 'darkred'
パウダーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
折れ線グラフの色をアクアマリンに変更する	plt.plot(データ列x, データ列y, color='aquamarine')
イテラブルの出現頻度を可視化する	plt.hist(データ列)
ヒストグラムの色をオーキッドに変更する	plt.hist(データ列, color='orchid')
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
option: シアン色を使用する	color = 'cyan'
ライトスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightskyblue')
データ列の母標準偏差を求める	ds.std(ddof=0)
option: リネンにグラフの色を設定する	color = 'linen'
散布図に黒い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
箱ひげ図を描き、平均値を加える	plt.boxplot(データ列, showmeans=True)
ライトシアンにヒストグラムの色を設定する	plt.hist(データ列, color='lightcyan')
'A'列によって表データをソートして、更新する	df.sort_values(by='A', inplace=True)
折れ線グラフの大バツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ダークゴールデンロッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
カウンタからイテラブルを回数して引く	aCounter.subtract(iterable)
コマンドの第一引数	sys.argv[1]
文字列リストを一つにして一つの文字列にする	''.join(map(str, iterable))
ホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
散布図のバツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームのリストカラムの値を正規表現patternでreplに変更する	df[aList].replace(pattern, repl, regex=True)
既存の行列を元にして全要素が初期値の配列	np.full_like(aArray, 初期値)
サドルブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
縦棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
データ列の折れ線グラフをプロットして、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
カウンタからタプルを引く	aCounter.subtract(aDict)
折れ線グラフのポイント印を赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームのリストカラムのNaNを50パーセンタイルで補う	df[aList].fillna(df[aList].median())
データ列は何時か調べる	ds.dt.hour
リストとリストについて散布図を描き、、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
FIXME:カテゴリーデータを出現頻度順に並べる	df['A'].value_counts().sort_index().index
縦棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
新しい勾配ブースティング分類木を作成する	model = sklearn.ensemble.GradientBoostingClassifier()
別の文字列で文字列を置き換える	s.replace(sub, newsub)
リストとシーケンスを連結する	itertools.chain(iterable, iterable2)
散布図をミディアムスプリンググリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
リストとリストの散布図に▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
option: ペールグリーンを用いる	color = 'palegreen'
データフレームの列の25パーセンタイル	df[col].quantile(0.25)
文字列を新しい文字列によって置換する	s.replace(sub, newsub)
線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
ヒストグラムをオレンジレッド色として描画する	plt.hist(データ列, color='orangered')
縦軸の目盛りの表示値を変更する	plt.yticks(目盛りの値リスト)
線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
散布図をダークサーモン色として描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
option: フォントの色をブルーバイオレットに変更する	color = 'blueviolet'
二つの値をカンマで区切ってプリントする	print(value, value2, sep=',')
逆双曲線正弦を求める	math.asinh(x)
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
変数の出力を改行しなくて行う	print(value, end='')
平均値付きボックスチャートを描く	plt.boxplot(データ列, showmeans=True)
ダーク・スラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
ファイルを開いて]、追加ストリームを使う	open(filepath, mode='a')
タプルの重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
ファイルパスから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
縦棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
オブジェクトはあるクラスか調べる	isinstance(obj, クラス)
出力ストリームにxを文字列に変換して書く	f.write(str(x))
数値を変数についてn階微分する	sympy.diff(e, z, n)
ゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
整数の最大値	sys.maxsize
ベクトルの全要素を指定の値にする	aArray[:, :] = 指定の値
文字列中に部分文字列がある	sub in s
リストを青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
nわるn2を計算する	n / n2
カラムの最頻値を求める	ds.mode()
データフレームを各列毎に集約し、、列の合計を算出する	df.groupby(column)[column2].sum()
散布図の印の色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
データフレームのカラムの文字列を未入力値に変換する	df[col].replace(s, np.nan)
散布図のマーカーを▲にする	plt.scatter(データ列x, データ列y, marker='^')
平均付き箱ヒゲ図を描画する	plt.boxplot(データ列, showmeans=True)
こんにちは世界をプリントする	print('Hello World')
縦棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
クラス分類をニューラルネットで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
文字列を変数に変換する	sympy.Symbol(s)
タプルの先頭の要素	aTuple[0]
数値をマゼンタで出力する	print(f'\033[35m{value}\033[0m')
ダークブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームのリストカラムの欠損値を平均で補う	df[aList].fillna(df[aList].mean())
option: 珊瑚色を使う	color = 'coral'
縦棒グラフを描画し、、中央寄せする	plt.bar(ラベル列, データ列, align='center')
淡いピンク色色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
option: ゴールドを用いる	color = 'gold'
折れ線グラフの左三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: グラフの種類を点線に変更する	linestyle = 'dotted'
ベクトルの累積和	np.cumsum(aArray)
リストの最後の要素	aList[-1]
ヒストグラムをミディアムターコイズ色を用いて描画する	plt.hist(データ列, color='mediumturquoise')
折れ線グラフをホワイトスモーク色を用いて描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームを列によって集計して、それぞれのグループごとの分散を求める	df.groupby(column).var()
データフレームのカラムを散布図で描画し、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
日付データにn週間を加算する	aDate + datetime.timedelta(weeks=n)
横方向に二つのデータフレームをマージする	pd.merge(df, df2)
データフレームのカラムのNaNをxに変更する	df[col].fillna(x)
散布図の菱形印を赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームを列の値によってグループ化し、列挙する	[(name, group) for name, group in df.groupby(column)]
散布図をコーンズシルク色として描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
色名をからコードにする	matplotlib.colors.cnames[色名]
データフレームの最初n行	df.head(n)
折れ線グラフの色をミディアムバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データフレームのカラムが正規分布からどの程度、尖っているか調べる	df[col].skew()
淡い茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
実線の折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
option: データ型として整数型を使う	dtype = np.int
JSONLファイルにデータフレームをタブ区切りで保存する	df.to_csv(filename, sep='\t')
二つのデータフレームを縦に連結する	pd.concat([df, df2], axis=0)
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しないかどうか	s.find(sub, start, end) == -1
option: タブを区切りで使用する	sep = '\t'
散布図にrgbの大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
実数の三乗を求める	x ** 3
文字列リストを一つにしてひとつの文字列にする	''.join(aStringList)
数値をパラメータについて微分する	sympy.diff(e, z)
データ列が正規分布からどれだけ、尖っているか見る	ds.skew()
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgray')
折れ線グラフの色をダーク・スラテグレーにする	plt.plot(データ列x, データ列y, color='darkslategrey')
回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
異なる列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
オリベドラブ色を用いてヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
xが一桁の整数か調べる	-9 <= x <= 9
カウンタの文字列を増やす	aCounter[element] += 1
データ列の移り変わりを折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
折れ線グラフに黒いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
日付データにn分を加算する	aDate + datetime.timedelta(minutes=n)
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
文字列中に部分文字列があるか調べる	sub in s
浮動小数点数の符号をコピーにする	math.copysign(x, x2)
折れ線グラフを実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
グレー色でヒストグラムを描画する	plt.hist(データ列, color='grey')
ディープスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
スプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='springgreen')
散布図をライトスレイグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
単回帰モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
オブジェクトが名前付きタプルのインスタンスか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
行列の列ごとの最大値を求める	np.max(aArray, axis=0)
データフレームの中に文字列と日付データがいくつ存在するかカウントする	df.isin([value, value2]).sum()
辞書順で文字列が文字列より後か	s > s2
nがn2よりも大きいか確認する	n > n2
nがn2以下、またはn3以上か判定する	n <= n2 or n >= n3
散布図の大バツ印を青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
データフレームの最後	df.tail()
実行結果を黒色でプリントする	print(f'\033[30m{value}\033[0m')
散布図をライトコーラル色として描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
部分文字列が文字列中に含まれないか調べる	sub not in s
日付時刻データのタイムゾーンを使う	aDatetime.timetz()
異なる列をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
既存の行列を元にして全要素が0の配列	np.zeros_like(aArray)
文字列中のひらがなをカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
データフレームから重複した行をドロップする	df.drop_duplicates()
'A'列によって表をまとめたグループを使う	df.groupby('A')
相関係数を算出する	scipy.stats.pearsonr(データ列, データ列2)
縦棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
データフレームを'A'列で並べ直す	df.sort_values(by='A')
データフレームの欠損値を平均値で補う	df.fillna(df.mean())
データフレームからn番目の列を消す	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
option: バイナリモードを用いる	mode = 'rb'
カウンタからマッピングを引く	aCounter.subtract(aDict)
日付データをISO8601形式の文字列に変換する	aDate.isoformat()
option: エラーがあるとき、例外を発生させるようにセットする	errors = 'strict'
データフレームのリスト列がどの程度分散しているか見る	df[aList].var()
ファイルをSJISとしてオープンする]	open(filepath, encoding='shift_jis')
組をひとつ置きに取り出す	aTuple[::2]
カラムの欠損値を最小値で補う	ds.fillna(ds.min())
データフレームのカラムを散布図で可視化してカテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
重複した行だけを抽出する	df[df.duplicated(keep=False)]
セットに要素を追加する	aSet.add(element)
線グラフの色をペールグリーンにセットする	plt.plot(データ列x, データ列y, color='palegreen')
文字列の開始位置からと終了位置の間に部分文字列があるかどうか	s.find(sub, start, end) != -1
配列の各要素に加算する	aArray + aArray2
option: オーキッド色を使用する	color = 'orchid'
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
rgbの大バツマーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
箱髭図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
データ列の文字列長を列として求める	ds.str.len()
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
データ列の推移を折れ線グラフで描画する	plt.plot(range(len(データ列)), データ列)
デピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
線グラフを点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
散布図の▲マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
リストから重複を取り除く	sorted(set(aList), key=aList.index)
リストと数列の散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
アクア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
文字列の大きさを見る	len(s)
Pythonパスにを追加する	sys.path.append(dir)
ライム色を用いてヒストグラムを描画する	plt.hist(データ列, color='lime')
浮動小数点数の床数	math.floor(x)
リストを昇順にソートする	sorted(aList, reverse=False)
データフレームのカラムの中に含まれる文字列の合計を数える	df[col].isin([value]).sum()
文字列を最後から空白で区切る	s.rsplit()
乱数を算出する	random.random()
組の末尾のn要素を取り除く	aTuple[:-n]
８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int8)
オブジェクトひとつの組	(element,)
縦棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
リストの最初のn要素を取り除く	aList[n:]
グリーンイエロー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームのカラムのNaNを最大値に増やす	df[col].fillna(df[col].max())
データフレームの中の未入力値が存在する行を消す	df.dropna()
黒い丸マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームの列がx以上の行を選択する	df[df[column] >= x]
ケンドールでデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
xの小数点以下'4'桁まで表示する	print(':.4f'.format(x))
ミディアムスプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
縦棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
タイムスタンプデータの分	aDatetime.minute
集合からエラーなく値を除去する	aSet.discard(element)
データフレームのリストカラムの中にある文字列と日付データの合計をカウントする	df[aList].isin([value, value2]).sum()
データフレームの列の名前を列から文字列に変更する	df.rename(columns={column: name})
option: 最初のカラムをインデックスに指定する	index_col = 0
小数点数の逆双曲線正接を算出する	math.atanh(x)
空の両端キューを生成する	collections.deque()
文字列からISO書式でタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
散布図のマーカーを▽にする	plt.scatter(データ列x, データ列y, marker='v')
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgrey')
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()
インプレースにキューの値を反転する	deq.reverse()
option: 読むシートの名前をnamesに指定する	sheet_name = names
文字列を文字のリストに変換する	list(s)
横棒グラフをアクア色を用いて描画する	plt.barh(データ列x, データ列y, color='aqua')
バリーウッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
ゴーストホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
赤いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図のクロス印を赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
折れ線グラフのバツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
option: レベッカパープル色を使用する	color = 'rebeccapurple'
浮動小数点数が無限大か	math.isinf(x)
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
棒グラフをライトグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
文字列の中でパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s)
異なる列をキーにして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
破壊的にデータフレームの列を削除する	df.drop(column, axis=1, inplace=True)
ダークオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
２つのデータフレームを横向きに連結する	pd.concat([df, df2], axis=1)
データフレームのリスト列の分散	df[aList].var()
カウンタ同士で∪演算する	aCounter | aCounter2
大バツマーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
配列と数列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
カウンタを高頻度方から列挙する	aCounter.most_common()
列で大きい順に破壊的にデータフレームを整列する	df.sort_values(by=column, ascending=False, inplace=True)
角度のラジアンを求める	math.radians(degree)
タイムスタンプデータをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
行列と同じ大きさの空ベクトルを初期化する	np.empty_like(aArray)
サドルブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
横棒グラフをスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='slateblue')
プロットの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
ヒストグラムの色をブルーバイオレットにセットする	plt.hist(データ列, color='blueviolet')
データフレームのリスト列の中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
実数のn乗の実数剰余を計算する	pow(x, n, y)
線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
異なる列をキーとして2つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
option: フォントの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
散布図の丸マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
双方向キューの最大長	deq.maxlen
ロバストな単回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
データフレームのカラムの文字列長を列として使う	df[col].str.len()
グラフに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
深紅色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
タイムスタンプデータをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
ファイルパスからストリームを読み込みfileとする	file = open(filepath)
nが正の数かどうか調べる	n > 0
option: データ型を指定する	dtype = np.int32
変数を黒色でプリントする	print(f'\033[30m{value}\033[0m')
データフレームの25パーセンタイルを求める	df.quantile(0.25)
散布図にポイントマーカーを用いる	plt.scatter(データ列x, データ列y, marker='.')
データフレームを表示するとき表示可能な行数を減らす	pd.set_option('display.max_rows', n)
列名リストの値によってデータフレームをグループ化する	df.groupby(columns)
データフレームを10の位で丸めて整数型にする	df.round(-1).astype(int)
数値を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
ハニーデュー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
自然数のGCD	math.gcd(n, n2)
文字列の最後から改行を除く	s.rstrip('\n')
最大値・最小値の範囲を用いて一様な疑似乱数を求める	random.uniform(最小値, 最大値)
カウンタのそれぞれのキーを、その出現回数だけ列挙する	aCounter.elements()
ピーチパフ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
二つの浮動小数点数は十分に近いか調べる	math.isclose(x, x2)
本日が月曜日か確認する	datetime.datetime.today().weekday() == 0
小数点数の角度	math.degrees(x)
実数の小数点を丸める	round(x)
ヘッダを指定せずTSVを読み込む	pd.read_csv(filename, header=None)
横棒グラフをオールドレース色として描画する	plt.barh(データ列x, データ列y, color='oldlace')
option: ドジャーブルー色を用いる	color = 'dodgerblue'
ピアソンとしてデータフレームの相関行列	df.corr(method='pearson')
クロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
option: ライトシアン色を使用する	color = 'lightcyan'
データフレームのインデックスの名前を、nameからname2に変更する	df.rename(index={name: name2})
カウンタの正のカウントのみ残す	+aCounter
ミディアムスプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
二つのオブジェクトが同じか	obj is obj2
グラフのx座標にラベルをつける	plt.xlabel('x軸ラベル')
コーンズシルク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
nとn2の排他的論理和を算出する	n ^ n2
カラーパレットをパステル調にする	sns.set(pallete='pastel')
データフレームから指定した列を抽出する	df[[column]]
データフレームから指定された二列を抽出する	df[[column, column2]]
アヤメのデータセットをデータフレームとしてロードする	sns.load_dataset('iris')
データフレームのリストカラムを丸めて、整数にする	df[aList].round().astype(int)
列でによって降順にデータフレームを整列する	df.sort_values(by=column, ascending=False)
Pandasで、フォーマットを用いてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
文字列のケースを整える	s.casefold()
option: 色をトマトに設定する	color = 'tomato'
リストを分割数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図にrgbのバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
日付データが日付データより先か	aDate < aDate2
option: 書き込み用に指定する	mode = 'w'
データフレームのリスト列の第三四分位数	df[aList].quantile(0.75)
データフレームのリストカラムの中にあるの個数を数える	df[aList].isin([value]).sum()
散布図の左三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
データフレームの列からユニークな要素を抽出しリスト化する	df[col].unique().tolist()
タプルの値を逆順にする	aTuple[::-1]
度数分布図のプロットして、正規化する	plt.hist(データ列, density=True)
折れ線グラフを星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*')
散布図の印を大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
フローラルホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
データフレームの列名一覧で指定された列を消す	df.drop(columns, axis=1)
折れ線グラフをダークシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
珊瑚色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
未初期化の行列を作成する	np.empty(要素数, dtype=np.int)
dateStringを日付データに変換する	pd.to_datetime(dateString)
データフレームの欠損値を最小値に変更する	df.fillna(df.min())
数列とリストの散布図を描画してマーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
列を文字列リストに変換して、'改行によって連結する	'\n'.join(map(str, iterable))
データフレームのリストカラムの欠損値を最大値にセットする	df[aList].fillna(df[aList].max())
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データフレームの中で列に重複があるか調べる	df.duplicated(subset=column)
配列とデータ列の散布図を描画して、ダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ライトスレイグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
ダークゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
昇順に列名リストでデータフレームを整列して、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データを平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
タプルの浅いコピーを作成する	aDict.copy()
分子n、分母mの有理数を準備する	fractions.Fraction(numerator=n, denominator=m)
列によってデータフレームを並べ、、上の方n件を取り出す	df.sort_values(columns).head(n)
フクシア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
箱ひげ図を描画し、、平均を加える	plt.boxplot(データ列, showmeans=True)
nとn2の排他的論理和を求める	n ^ n2
名前からカラーマップを見る	"plt.get_cmap(""カラーマップ名"")"
黒いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームの未入力値をxで置換する	df.fillna(x)
リストの最初のオブジェクトを探す	aList.index(element)
重複を破壊的にデータフレームから削除する	df.drop_duplicates(inplace=True)
横棒グラフをリネン色を使って描画する	plt.barh(データ列x, データ列y, color='linen')
マゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
option: 色をナバホホワイトに設定する	color = 'navajowhite'
文字列の開始位置以降に部分文字列が含まれない	s.find(sub, start) == -1
option: 書き込みモードに変更する	mode = 'w'
リストの末尾にリストを追加して広げる	aList.extend(aList2)
ラインを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
カテゴリで色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
浮動小数点数を万の位で丸める	round(x, -4)
ハニーデュー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
nが3の倍数か	n % 3 == 0
データフレームのリストカラムを1000の位で丸めて、整数にする	df[aList].round(-3).astype(int)
フォーマットfmtでデータ列をタイムスタンプ型にする	pd.to_datetime(ds, format=fmt)
等量で配列をビン数nとしてビン分割する	pd.qcut(aArray, n)
プラットホームはMacOSか調べる	sys.platform.startswith('darwin')
ミディアムバイオレットレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
option: 改行コードをUNIXに指定する	newline = '\n'
箱ヒゲ図を２つ並べてプロットする	plt.boxplot([データ列, データ列])
線形回帰モデルの回帰変数を使う	model.coef_
option: レモンシフォンにグラフの色を指定する	color = 'lemonchiffon'
要素は集合のメンバーに含まれないか調べる	element not in aSet
大文字を全部使う	string.ascii_uppercase
縦棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
リスト中の最初のオブジェクトを探す	aList.index(element)
第二コマンド引数を知る	sys.argv[1]
ヒストグラムをミディアムシアグリーン色を用いて描画する	plt.hist(データ列, color='mediumseagreen')
文字列が空白文字からなるか調べる	s.isspace()
二次元リストの転置行列を見る	[list(x) for x in list(zip(*aList))]
カテゴリデータ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
データフレームのリストカラムの中にがあるか調べる	df[aList].isin([value])
ライムグリーン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームの最後を調べる	df.tail()
線グラフを青紫色を用いて描画する	plt.plot(データ列x, データ列y, color='violet')
線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
カウンタからゼロ回数を削除する	+aCounter
線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
偽陰性を抑えたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
プロットの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
データフレームを各列毎にグループ化し、、列の標準偏差を求める	df.groupby(column)[column2].std()
ペールグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
データフレームのリスト列が正規分布からどの程度尖っているか見る	df[aList].skew()
データフレームをグループ化しそれぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
データフレームの最初の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
rgbのバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームを表示するとき、カラムの最大幅をnに変更する	pd.set_option('max_colwidth', n)
リネン色でヒストグラムを描画する	plt.hist(データ列, color='linen')
データフレームの中のカラムをn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ネイビー色でヒストグラムを描画する	plt.hist(データ列, color='navy')
表データのリストで指定した列の相関行列を算出する	df[aList].corr()
追加できるように文字列の示すエンコーディングで既存のファイルを開く]	open(filepath, mode='a', encoding=s)
辞書から計数器を作る	collections.Counter(aDict)
データフレームの列がxかつ列がx2であるデータを抽出する	df[(df[column] == x) & (df[column2] == x2)]
option: ミディアムスプリンググリーンにグラフの色を変更する	color = 'mediumspringgreen'
ライトサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
空白で文字列を分割し、、整数リストに変換する	map(int, s.split())
データフレームのカラムを100の位で四捨五入して整数型にする	df[col].round(-2).astype(int)
option: モカシンを使用する	color = 'moccasin'
文字列中の小文字を大文字にする	s.upper()
データフレームから重複を落とす	df.drop_duplicates()
floatの最大値	sys.float_info.max
箱ヒゲ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
数を2乗する	x ** 2
リストをn個に分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
散布図を下三角印で描画する	plt.scatter(データ列x, データ列y, marker='v')
数のn乗の実数剰余を計算する	pow(x, n, y)
アルファベットの大文字を全部求める	string.ascii_uppercase
文字列の中の複数行対応としてパターンによるすべてのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
文字列をパターンで区切る	re.split(pattern, s)
多次元データをSVDでパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
データフレームを'A'列の値でグループ化し要約統計量を計算する	df.groupby('A').describe()
最後の部分文字列で文字列を二分する	s.rpartition(sub)
アクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
折れ線グラフの色をディープスカイブルーに変更する	plt.plot(データ列x, データ列y, color='deepskyblue')
ブランチドアーモンド色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームのカラムの中にいくつがあるか求める	df[col].isin([value]).sum()
データフレームを列の値で集約して、個数を求める	df.groupby(column).count()
数列とリストについての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
データ列を100の位で四捨五入して整数にする	ds.round(-2).astype(int)
折れ線グラフの色をアリスブルーに指定する	plt.plot(データ列x, データ列y, color='aliceblue')
集合の全ての要素が別の集合に含まれるかどうかテストする	aSet.issubset(aSet2)
データフレームの列を1000の位で丸める	df[col].round(-3)
線グラフをミディアムパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
行列の要素ごとの積	np.multiply(aArray, aArray2)
プラットホームがリナックス	sys.platform.startswith('linux')
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()//60
行列のユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
分類モデルの予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
オリベドラブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
日付時刻データの曜日を使う	aDatetime.weekday()
線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
棒グラフをダークシアン色として描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ふたつの集合のいずれか一方だけの集合を見る	aSet.symmetric_difference(aSet2)
文字列を部分文字列で二分割する	s.partition(sub)
データフレームを各列と列の組み合わせ毎にグループ分けして、最小値を算出する	df.groupby([column, column2], as_index=False).min()
一点鎖線でイテラブルの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int8)
散布図の丸印の太さを変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
日付データと日付データの時間差を求める	aDate - aDate2
２つの数値を改行しなくてプリントする	print(value, value2, end='')
option: ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
ダークサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
ミントクリーム色でヒストグラムを描画する	plt.hist(データ列, color='mintcream')
ミッドナイトブルーにヒストグラムの色をセットする	plt.hist(データ列, color='midnightblue')
赤い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
散布図に丸印を使う	plt.scatter(データ列x, データ列y, marker='o')
大バツ印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
散布図を淡い茶色色を用いて描画する	plt.scatter(データ列x, データ列y, color='tan')
データ列を３つ並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
タプルを文字列として一つにする	''.join(map(str, iterable))
option: ベクトルのデータ型を指定する	dtype = np.int8
パーセプトロンで回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
シルバー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
データフレームの重複した行のみ	df[df.duplicated(keep=False)]
L2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
アクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データフレームを列名リストによってまとめたグループ	df.groupby(columns)
標準入力	sys.stdin
kを底とする対数	math.log(x, k)
option: パウダーブルーにグラフの色を変更する	color = 'powderblue'
折れ線グラフをスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='slateblue')
タプルを引数として展開して出力する	print(*aTuple, sep=',')
ヒストグラムをオリーブ色を用いて描画する	plt.hist(データ列, color='olive')
ライトサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgrey')
データフレームを各列と列の組み合わせ毎に集約し、、最小値を計算する	df.groupby([column, column2], as_index=False).min()
線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
エポック秒からタイムスタンプにする	datetime.datetime.fromtimestamp(timestamp)
オレンジレッド色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
データフレームの内で何行、重複するか見る	df.duplicated().sum()
option: 赤を使う	color = 'red'
データフレームのカラムが何年か確認する	df[col].dt.year
赤い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
option: マーカーの色をやわらかい青にする	markerfacecolor = 'cornflowerblue'
横棒グラフをレモンシフォン色を用いて描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
ラインを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ダークスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
百分率付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
タプルをソートしてJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
行列の行列積を計算する	np.matmul(aArray, aArray2)
option: ライトスレイグレーを使う	color = 'lightslategrey'
散布図のマーカーを上三角印にする	plt.scatter(データ列x, データ列y, marker='^')
標準入力から1行だけ改行なしに読み込む	sys.stdin.readline().rstrip()
option: グラフの色をサーモンにする	color = 'salmon'
表のn行目をドロップする	df.drop(n, axis=0)
ローングリーン色でヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
option: ライトスチールブルーにグラフの色を設定する	color = 'lightsteelblue'
nとn2の論理積を求める	n & n2
ダークグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
線グラフの色をアンティークホワイトに指定する	plt.plot(データ列x, データ列y, color='antiquewhite')
破壊的に列によってによってデータフレームを並べる	df.sort_values(by=column, inplace=True)
option: オリーブにフォントの色を変更する	color = 'olive'
折れ線グラフをスノー色として描画する	plt.plot(データ列x, データ列y, color='snow')
データフレームを各列と列の組み合わせ毎にグループ分けして、最大値を算出する	df.groupby([column, column2], as_index=False).max()
変数が無限大に近づく時の数値の極限値を求める	sympy.limit(e, z, oo)
アンサンブル学習を使って回帰分析を行う	sklearn.ensemble.VotingRegressor()
外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
整数に変換する	int(x)
実線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
option: 上三角マーカーを使う	marker = '^'
全要素を０で初期化した整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int)
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
今日の日付時刻を計算する	datetime.datetime.now()
リストとデータ列の散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ふたつの関係が真上位集合か調べる	aSet > aSet2
文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
切片なしの回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ヒストグラムの色をダークゴールデンロッドに変更する	plt.hist(データ列, color='darkgoldenrod')
カウンタ同士で∩演算する	aCounter & aCounter2
カーキ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
nをn2で割った値を切り上げる	(n + n2 - 1) // n2
星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*')
predicateFuncを適用したとき真になるイテラブルの要素を除去する	itertools.dropwhile(predicateFunc, iterable)
タイムスタンプデータがタイムスタンプデータより後ろか調べる	aDatetime > aDatetime2
シーケンスにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
要素が集合に含まれる	element in aSet
縦棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
プラム色として線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
折れ線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
折れ線グラフをフクシア色を用いて描画する	plt.plot(データ列x, データ列y, color='fuchsia')
option: 平均を追記する	showmeans = False
ヒストグラムの色をシルバーにセットする	plt.hist(データ列, color='silver')
rgbの▲マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムを点線で描く	plt.hist(データ列, linestyle='dotted')
線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
数式をパラメータについて微分する	sympy.diff(e, z)
折れ線グラフに青い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
二つの集合の共通要素だけにする	aSet.intersection_update(aSet2)
グラフのx軸を対数に変更する	plt.xscale('log')
横棒グラフをネイビー色として描画する	plt.barh(データ列x, データ列y, color='navy')
タプルのn番目以降の要素を取り出す	aTuple[n:]
ベージュにヒストグラムの色をセットする	plt.hist(データ列, color='beige')
破壊的に小さい順にデータフレームを'A'列によって並べ直す	df.sort_values(by='A', ascending=True, inplace=True)
縦棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
複数行対応として文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
部分文字列を文字列の開始位置から探す	s.find(sub, start)
青い点線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データ列の折れ線グラフをクロス印を用いて描画する	plt.plot(データ列x, データ列y, marker='x')
余弦	math.cos(x)
散布図をrgbの大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
改行なしに二つのリストをプリントする	print(value, value2, end='')
グラフを論文用にセットする	sns.set(context='paper')
偽陽性を避けたい指標を用いる	sklearn.metrics.precision_score(正解データ列, 予測データ列)
棒グラフをシスル色として描画する	plt.bar(データ列x, データ列y, color='thistle')
データ列の値が正規分布にしたがって発生する確率を算出する	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
データフレームを列で並べる	df.sort_values(by=column)
ひとつ置きにリストを取り出す	aList[::2]
option: アクア色を用いる	color = 'aqua'
ピンクにヒストグラムの色を変更する	plt.hist(データ列, color='pink')
散布図の右三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
実行結果を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
ベクトルの平均値	np.mean(aArray)
イテラブルを出現回数してカウンタを更新する	aCounter.update(iterable)
非小文字が文字列中にあるか調べる	any(not c.islower() for c in s)
n2がnより大きく、かつn3未満	n < n2 and n2 < n3
データフレームの列の要約統計量を求める	df[col].describe()
year年month月day日hour時minute分の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
データ列をリストを境界値として分割する	pd.cut(ds, aList)
nが3で割り切れるか	n % 3 == 0
データ列のNaNを平均値に設定する	ds.fillna(ds.mean())
データフレームの信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列の大文字と小文字を逆にする	s.swapcase()
option: 色をラベンダーブラッシュに設定する	color = 'lavenderblush'
文字列をカンマで分割し、、列挙する	s.split(',')
オブジェクトが名前付きタプル型か調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データフレームのNaNをモードで埋める	df.fillna(df.mode().iloc[0])
縦棒グラフをミスティローズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mistyrose')
データ列を千の位で丸めて、整数型にする	ds.round(-3).astype(int)
折れ線グラフの四角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
値を改行なしにプリントする	print(value, end='')
横棒グラフを紺碧色として描画する	plt.barh(データ列x, データ列y, color='azure')
オブジェクトひとつのタプル	(element,)
リストのn番目にオブジェクトを挿入する	aList.insert(n, element)
スピアマンでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
線を赤い実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: 文字列を改行の代わりに用いる	end = s
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
ひとつでも大文字が文字列内にあるか調べる	any(c.isupper() for c in s)
データフレームのカラムの中にいくつ欠損値があるか求める	df[col].isna().sum()
シルバー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
リストをn個に分割する	pd.cut(aList, n)
ヒストグラムをベージュ色として描画する	plt.hist(データ列, color='beige')
赤い点線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
グリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
データフレームのカラムの欠損値を後の行の値で埋める	df[col].fillna(method='bfill')
列の値を正規表現patternで一度に置き換える	ds.replace(pattern, repl, regex=True)
行列の転置行列を求める	aArray.T
グラフのフォントを日本語表示に指定する	sns.set(font='IPAexGothic')
2ベクトル間のユークリッド距離を求める	math.dist(point, point2)
データフレームがどの程度分散しているか見る	df.var()
タプル内の要素が全て真	all(aTuple)
二つのデータフレームを横に連結する	pd.concat([df, df2], axis=1)
複数の列の値によってデータフレームをグループ分けして、列挙する	[(name, group) for name, group in df.groupby(columns)]
折れ線グラフに下三角印を用いる	plt.plot(データ列x, データ列y, marker='v')
日付時刻データが木曜日かどうか調べる	aDatetime.weekday() == 3
データフレームを各列と列の組み合わせ毎に集約し、、平均値を算出する	df.groupby([column, column2], as_index=False).mean()
ミディアムターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
リストとリストについての散布図にrgbのバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
配列を中央値でビニングする	pd.qcut(aArray, 2)
Pandasでフォーマットfmtを用いて文字列を日付データにする	pd.to_datetime(s, format=fmt)
文字列の左側からタブを消す	s.lstrip('\t')
折れ線グラフのクロスマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
散布図をライトグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgray')
option: コーンフラワーブルーにフォントの色を設定する	color = 'cornflowerblue'
変数について数式のインテグラルを行う	sympy.integrate(e, z)
ダークオーキッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
データフレームのリストカラムの中にいくつ日付データがあるか数える	df[aList].isin([value]).sum()
ヒストグラムを真紅色で描画する	plt.hist(データ列, color='crimson')
データフレームをグループ化し、それぞれの列に対し最大値を計算する	df.groupby(column)[column2].max()
データフレームのリストカラムの欠損値を最頻値に指定する	df[aList].fillna(df[aList].mode().iloc[0])
折れ線グラフの色を貝殻に指定する	plt.plot(データ列x, データ列y, color='seashell')
ファイルパスをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
折れ線グラフの大バツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
アルファベットが文字列内にある	any(c.isalpha() for c in s)
データフレームのグループごとの標準偏差	df.groupby(column).std()
最大値・最小値で乱数を生成する	random.randint(最小値, 最大値)
部分文字列を文字列のサフィックスから取り除く	s.removesuffix(sub)
棒グラフをライトシアン色として描画する	plt.bar(データ列x, データ列y, color='lightcyan')
青い破線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
今日が何曜日か知る	datetime.datetime.today().weekday()
2つの列の値によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
棒グラフをオレンジレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orangered')
プロットの凡例を表示する	plt.legend()
メディアンでデータフレームの欠損値を埋める	df.fillna(df.median())
スタックをデキューする	deq.popleft()
ファイルを文字列の示すエンコーディングとしてオープンする]	open(filepath, encoding=s)
option: 色を淡い茶色に設定する	color = 'tan'
シアン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
nを二進文字列に変換する	bin(n)[2:]
3変数の一番小さい値	min(x, y, z)
値を赤色にする	f'\033[31m{value}\033[0m'
ヒストグラムをブラック色として描画する	plt.hist(データ列, color='black')
データフレームの列の中にいくつ欠損値があるか数える	df[col].isna().sum()
縦棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
ヒストグラムをゴーストホワイト色を使って描画する	plt.hist(データ列, color='ghostwhite')
文字列中から正規表現に複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
散布図の印を星にする	plt.scatter(データ列x, データ列y, marker='*')
パープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
日付時刻データの時間	aDatetime.hour
デックが空でないか	len(deq) != 0
線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
列の値によってデータフレームをグループ分けする	df.groupby(column)
リストとイテラブルの散布図を描き、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
nの各桁の総和を算出する	sum(map(int, str(n)))
numpyを使用する	import numpy as np
既存のファイルをSJISを用いて追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
option: 3二ビット整数型を使用する	dtype = np.int16
値を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
ひとつでも非空白が文字列中に含まれるか調べる	any(not c.isspace() for c in s)
データフレームの各グループごとの個数を計算する	df.groupby(column).count()
折れ線グラフに上三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
option: フォントの色をライトグレーに設定する	color = 'lightgrey'
オレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgrey')
浮動小数点数が正か	x > 0
タプルを文字列に変換して、タブで連結する	'\t'.join(map(str, iterable))
折れ線グラフの色をグリーンに変更する	plt.plot(データ列x, データ列y, color='green')
サポートベクター分類器を作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
マゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
カウンタの文字列のカウント	aCounter[element]
青い破線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: ブルーバイオレット色を用いる	color = 'blueviolet'
ミディアムシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
2つのリストを箱ひげ図にする	plt.boxplot([データ列, データ列])
線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
散布図のポイントマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
やわらかい青色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
バイナリできるようにファイルパスをオープンする]	open(filepath, mode='rb')
散布図に赤いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
ファイルパスを書き込みモードを用いてオープンする]	open(filepath, mode='w')
スクリプトファイルのディレクトリパス	os.path.dirname(os.path.abspath(__file__))
縦棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
キューの順序をn個分左に輪番で回す	deq.rotate(-n)
文字列を水色でプリントする	print(f'\033[36m{value}\033[0m')
bとn2から成るペアを得る	(n, n2)
文字列内にひとつでもアルファベットが含まれる	any(c.isalpha() for c in s)
右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>')
データフレームを四捨五入して、整数型にする	df.round().astype(int)
リストの全順列	itertools.permutations(iterable)
整数nを二進数リテラルに変換する	bin(n)
セットからエラーなく要素を取り除く	aSet.discard(element)
黒い線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
デピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
データフレームのカラムをグループ列ごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
標準入力から1文字だけ読み込む	sys.stdin.read(1)
値が集合に含まれる	element in aSet
項目名がタプルに存在するか確認する	key in aDict
ペアリストpairsからカウンタを作成する	collections.Counter(dict(pairs))
ライトブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
横棒グラフをペルー色として描画する	plt.barh(データ列x, データ列y, color='peru')
分子n、分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
散布図を黒い丸マーカーでプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
横方向に3つのデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
クラス分類をブースティングで行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
文字列を走査し正規表現に大文字・小文字を無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
データ列の値を一度にreplに正規表現で変更する	ds.replace(pattern, repl, regex=True)
黄色色を用いてヒストグラムを描画する	plt.hist(データ列, color='yellow')
ゲインズボロ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
配列を変形する	aArray.reshape(行数, 列数)
option: カデットブルー色を使用する	color = 'cadetblue'
データフレームを２つのカラムによってソートしてNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
タプルをnから番号付けする	enumerate(aTuple, start=n)
データフレームのカラムが何曜日か確認する	df[col].dt.weekday_name
オブジェクトがあるクラスのインスタンスか調べる	isinstance(obj, クラス)
データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
ヒストグラムを描画し、ビン数を設定する	plt.hist(データ列, bins=区関数)
option: グラフの色をシスルに指定する	color = 'thistle'
棒グラフをグリーンイエロー色を使って描画する	plt.bar(データ列x, データ列y, color='greenyellow')
縦棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
カウンタ間で和集合演算する	aCounter | aCounter2
ケンドール相関係数としてデータフレームのリストで指定された列の相関行列	df[aList].corr(method='kendall')
タイムスタンプデータにn日を加える	aDatetime + datetime.timedelta(days=n)
シーケンスを文字列リストに変換して、部分文字列で結合する	sub.join(map(str, iterable))
ひとつでも非数字が文字列中に含まれる	any(not c.isdigit() for c in s)
データ列の曜日数を使う	ds.dt.dayofweek
n＋n2	n + n2
データ列と配列の散布図に▲マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
列'A'と列'B'をキーとして2つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームの列の中に文字列とがあるか確認する	df[col].isin([value, value2])
数値を下線付き化する	f'\033[4m{value}\033[0m'
リストと配列について散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
円グラフとしてデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
nはタプルのひとつであるかどうか調べる	n in aTuple
数値を赤色にする	f'\033[31m{value}\033[0m'
実数を千の位で四捨五入する	round(x, -3)
option: ラインを細くする	linewidth = 3.0
ミディアムターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: モカシン色を用いる	color = 'moccasin'
データフレームの各グループ毎の合計	df.groupby(column).sum()
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
option: フォントの色をチョコレートに指定する	color = 'chocolate'
折れ線グラフのアルファを指定する	plt.plot(データ列x, データ列y, alpha=0.5)
データ列を２つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームのデータ型のリスト	df.dtypes
option: グラフの色をパウダーブルーに指定する	color = 'powderblue'
タイムスタンプデータにn時間分加える	aDatetime + datetime.timedelta(hours=n)
イテラブルをベクトルに変換する	pd.get_dummies(iterable)
JSONフォーマットの文字列をデータにする	json.loads(b.decode('unicode-escape'))
集合を更新不能な集合に変換する	frozenset(aSet)
データフレームを複数の列でまとめたグループ	df.groupby(columns)
データ列の各データが何回出現するか調べる	ds.value_counts()
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategrey')
xが1、もしくは2かどうか	x == 1 or x == 2
折れ線グラフの▽マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int)
データフレームのcollを書式を用いて日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
散布図の印を青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
リストとリストについての散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフの線の種類を実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
小麦色色としてヒストグラムを描画する	plt.hist(データ列, color='wheat')
縦棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
珊瑚色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
最大最小で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレームを'A'列でで破壊的に整列する	df.sort_values(by='A', inplace=True)
日付データが火曜日	aDate.weekday() == 1
淡いピンク色色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
列をキーにして２つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
双方向キューの先頭から要素を削除する	deq.popleft()
データフレームの上n行	df.head(n)
グレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
ベクトルのユニークな要素とその個数を見る	u, counts = np.unique(aArray, return_counts=True)
整数nは集合のいづれかかテストする	n in aSet
破壊的にデータフレームを複数の列によってで並べる	df.sort_values(by=column, inplace=True)
縦棒グラフをサドルブラウン色として描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
要素を両端キューのn番目に挿入する	deq.insert(n, element)
組中の文字列が最初に見つかるインデックスを探す	aTuple.index(element)
データフレームの未入力値を平均値にセットする	df.fillna(df.mean())
文字列の先頭から空白やタブを除去する	s.lstrip()
列からひとつランダムに選ぶ	random.choice(iterable)
浮動小数点数を切り下げる	math.floor(x)
分子n分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
線グラフをダークグレー色を使って描画する	plt.plot(データ列x, データ列y, color='darkgrey')
文字列の右側から部分文字列を除く	s.rstrip(sub)
カラムの欠損値をxで補う	ds.fillna(x)
クラス分類をSDGで行う	model = sklearn.linear_model.SGDClassifier()
データフレームのリストカラムのNaNを直前の値で補う	df[aList].fillna(method='ffill')
データフレームを列の値でグループ化し、要約統計量を計算する	df.groupby(column).describe()
リストに要素を追加する	aList.append(element)
折れ線グラフの左三角印の色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
option: サドルブラウンに色を指定する	color = 'saddlebrown'
整数nが配列のいづれかか調べる	n in aArray
分類モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ブルーバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
文字列を部分文字列で分けた場合の最初の文字列	s.partition(sub)[0]
データ列の各値の出現回数	ds.value_counts()
データフレームの未入力値を平均値に設定する	df.fillna(df.mean())
プロット中の文字化けを防ぐ	sns.set(font='IPAexGothic')
データ列を用いる	import pandas as pd
option: 色をブラックに設定する	color = 'black'
散布図にrgbの菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームを列で集約して、列の要約統計量を求める	df.groupby(column).describe()[column2]
空のロジスティック回帰モデルを用意する	model = sklearn.linear_model.LogisticRegression()
カデットブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
データフレームをTSVファイルから読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: 淡いピンク色にグラフの色を変更する	color = 'lightpink'
度数分布図を上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
option: ナバホホワイトを使う	color = 'navajowhite'
縦棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームを千の位で丸めて整数型にする	df.round(-3).astype(int)
配列の転置行列を求める	aArray.T
列を等間隔でn個にビンニングする	pd.cut(ds, n)
数列とリストについて散布図を描画し、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
全ての印字できる文字	string.printable
ベージュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
回帰分析をアンサンブル学習でする	sklearn.ensemble.VotingRegressor()
折れ線グラフをバツ印として描画する	plt.plot(データ列x, データ列y, marker='x')
紺色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
折れ線グラフのダイアモンドマーカーの色を変える	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
折れ線グラフの四角印の色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
真下位集合	aSet < aSet2
赤い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
配列の値を変更する	aArray[行番号, 列番号] = 指定の値
折れ線グラフの丸印を赤色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
アークコサインを求める	math.acos(x)
データフレームの未入力値をモードで置換する	df.fillna(df.mode().iloc[0])
マッピングにキーワード引数で更新する	aDict.update(**kwargs)
複素数	complex(x, y)
Pandasでフォーマットでデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
双方向キューの最初にイテラブルの各要素を追加する	deq.extendleft(iterable)
タプルに辞書の項目を更新する	aDict.update(aDict2)
パウダーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
散布図の菱形マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
棒グラフをダークゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ValueMapでまとめてデータ列の値を置換する	ds.replace(ValueMap)
カウンタをシーケンスをカウントして、更新する	aCounter.update(iterable)
イテラブルとリストについて散布図を描いてマーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
縦棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
等間隔の行列	np.arange(開始値, 終了値, 等差)
option: ペルーを用いる	color = 'peru'
option: 貝殻色を使用する	color = 'seashell'
プロットの描画で色差別なく色を使用する	sns.set(pallete='colorblind')
option: 色をダークスレートブルーに設定する	color = 'darkslateblue'
パパイヤウィップ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
グラフのパレットを指定する	sns.set(pallete=パレット名)
辞書からキーで指定されたエントリを取り出す	aDict.pop(key)
文字列に日本語が使われているかどうか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
複数行対応として正規表現をあらかじめコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ミディアムブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
折れ線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
1からnまでの整数列を作る	list(range(1, n+1))
ディムグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
パールゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
データをスケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
カデットブルー色でヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
棒グラフをレベッカパープル色として描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
リストと数列についての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
文字列が全て数字か	s.isdigit()
クラス分類の適合率と再現率の調和平均を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
オーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
横棒グラフをスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='skyblue')
ASCII限定としてパターンで文字列を分割する	re.split(pattern, s, flags=re.ASCI)
作画で用いるフォントを指定する	sns.set(font=フォント名)
タプルの要素数を見る	len(aTuple)
ホワイト色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
赤い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
y軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
文字列の開始位置から終了位置の範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
現在をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
リストとリストの散布図にrgbの大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
縦棒グラフをバリーウッド色を用いて描画する	plt.bar(データ列x, データ列y, color='burlywood')
データ列の正規分布に対する上下広がり	ds.skew()
データフレームをCSVから読む	pd.read_csv(filename, sep=',')
プロットの色を淡くする	sns.set(pallete='muted')
ゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
二つの関係が上位集合もしくは等しいか確認する	aSet > aSet2
option: グラフの色をオレンジレッドに指定する	color = 'orangered'
散布図の印を上三角にする	plt.scatter(データ列x, データ列y, marker='^')
列の長さを制限する	collections.deque(iterable, maxlen=n)
横棒グラフをサドルブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
データ列が何秒か調べる	ds.dt.second
セットから別のセットとの共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
日付時刻データがタイムスタンプデータより前	aDatetime < aDatetime2
x軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
オレンジレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
散布図をミディアムターコイズ色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
JSONファイルのファイル入力を辞書にする	json.load(fin)
オレンジ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
折れ線グラフの星マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
折れ線グラフのダイアモンドマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
赤いポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
辞書の項目名を要素に設定する	aDict[key] = element
パラメータについて数値をn階微分する	sympy.diff(e, z, n)
文字コードを文字にする	chr(unicode)
プロットの大きさを設定する	plt.figure(figsize=(横幅, 高さ))
データフレームを複数の列の値でまとめた表	df.groupby(columns)
タイムスタンプデータとタイムスタンプデータの時間差	aDatetime - aDatetime2
xの小数点以下'1'桁までプリントする	print(':.1f'.format(x))
文字列を積極的に小文字にする	s.casefold()
数値を簡単にする	sympy.sympify(e)
黒い丸マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ダーク・スラテグレーにヒストグラムの色をする	plt.hist(データ列, color='darkslategrey')
線グラフを青色を用いて描画する	plt.plot(データ列x, データ列y, color='blue')
データフレームのカラムが何月か確認する	df[col].dt.month
一方に含まれ、他方に含まれない集合を使う	aSet.difference(aSet2)
配列と配列についての散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横棒グラフを紺色を用いて描画する	plt.barh(データ列x, データ列y, color='darkblue')
数列とリストについて散布図を描画し、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: ミディアムバイオレットレッドを使う	color = 'mediumvioletred'
データフレームのn行目をインプレイスで削除する	df.drop(n, axis=0, inplace=True)
データ列の折れ線グラフを右三角印で描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームをにバイオリン図を用いて可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図をダークスラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
データ列を横に並べて柱状グラフにする	plt.hist([データ列, データ列], color=['b', 'r'])
棒グラフをスノー色を使って描画する	plt.bar(データ列x, データ列y, color='snow')
year年month月day日を日付にする	datetime.date(year=year, month=month, day=day)
文字列中のタブ文字を空白に置換する	s.expandtabs(tabsize=n)
列'A'と列'B'をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
スレートブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='slateblue')
カラーバーを水平で付ける	plt.colorbar(orientation='horizontal')
折れ線グラフの色をモカシンにセットする	plt.plot(データ列x, データ列y, color='moccasin')
option: ゲインズボロにグラフの色を設定する	color = 'gainsboro'
散布図に青いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
コマンド引数を一覧として得る	sys.argv[1:]
データフレームのリストカラムの標本標準偏差を計算する	df[aList].std()
タプルの文字列が最初に見つかるインデックスを探す	aTuple.index(element)
散布図をやわらかい青色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: ミディアムシアグリーンにフォントの色を設定する	color = 'mediumseagreen'
リストとリストについて散布図を描画し、、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
回帰モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
ASCIIコードエスケープで文字列をバイト列にする	s.encode(encoding='unicode_escape')
データフレームから数値データのカラムを抽出する	df.select_dtypes('number')
ダークオレンジ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
タプルの中の一番大きい値	max(aTuple)
option: ダークスラテグレーに色を設定する	color = 'darkslategray'
オブジェクトを文字列にする	str(obj)
実数の双曲線正接の逆数を求める	math.atanh(x)
カラムの欠損値を最頻値にする	ds.fillna(ds.mode().iloc[0])
ミントクリーム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
数値を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
ゼロ埋めした整数型の配列を作る	np.zeros(要素数, dtype=np.int)
文字列内にひとつでも英数字があるか	any(c.isalnum() for c in s)
カウンタの項目をひとつ増やす	aCounter[element] += 1
ペールグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
組の値を逆順にする	aTuple[::-1]
青い一点鎖線でイテラブルの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: グラフの色をブラックにする	color = 'black'
option: UTF8を使用する	encoding = 'utf-8'
リストから重複なく、n要素ランダムに選ぶ	random.sample(iterable, k=n)
Pandasでフォーマットでデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
ダークグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データフレームの列がx以上のデータを選択する	df[df[column] >= x]
データフレームの列が正規表現文字列にマッチしないデータを抽出する	df[not df[column].str.match(s)]
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
nまでのスライス	slice(n)
パールゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
散布図に青い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
２つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
ヒストグラムの色をダークサーモンにセットする	plt.hist(データ列, color='darksalmon')
データフレームのカラムの種類	df.info()
タプルのキーとその値を列挙する	aDict.items()
データフレームを各列と列の組み合わせ毎にグループ化して個数を求める	df.groupby([column, column2], as_index=False).count()
昇順に表データをインデックスで並べ直す	df.sort_index(ascending=True)
option: 平均を加える	showmeans = False
ファイル名がCSVファイルか判定する	filename.endswith('.csv')
option: ベージュ色を用いる	color = 'beige'
データ列が正規分布からどの程度歪んでいるか見る	ds.kurt()
列を累加したイテラブルを得る	itertools.accumulate(iterable)
プロットに凡例を加える	plt.legend(['凡例A', '凡例B'])
ファイルから書き込みストリームを開いて]、fとする	f = open(filepath, mode='w')
浮動小数点数を文字列に変換する	str(x)
双方向キューの末尾から要素を取り出す	deq.pop()
データフレームのカラムの正規分布に対する上下広がり	df[col].skew()
データフレーム全体を行によって整列する	df.sort_index()
黒い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
棒グラフをホワイトスモーク色を使って描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
ライトシアン色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
シーケンスを配列に変換する	np.array(iterable)
ベクトル間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
部分文字列をエラーなく文字列の接頭辞から取り除く	s.removeprefix(sub)
データフレームを二つの列で昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
今日のローカルな日付	datetime.date.today()
縦棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
等差数列から整数乱数を得る	random.randrange(start, end, step)
配列を等量でn個にビニングする	pd.qcut(aArray, n)
散布図の色を黄緑にする	plt.scatter(データ列x, データ列y, color='chartreuse')
OSの名前	sys.platform
データフレームのカラムの中に文字列と日付データが存在するかどうか	df[col].isin([value, value2])
折れ線グラフをサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='salmon')
整数を浮動小数点数で割って、切り捨てる	x // y
色付きの実線を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
リストを分割数nで分割する	pd.cut(aList, n)
データフレームのグループの標準偏差	df.groupby(column).std()
散布図の下三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
データフレームから指定された列のみ取り出す	df[[column]]
折れ線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
二つの値をスラッシュで区切ってプリントする	print(value, value2, sep='/')
列をキーとして2つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
折れ線グラフの丸マーカーを青色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
横棒グラフをアンティークホワイト色として描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
配列を四分位数ごとにビニングする	pd.qcut(aArray, 4)
散布図を黒い四角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームを２つの列でまとめたグループを見る	df.groupby(['A', 'B'])
ナバホホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
全十六進数字	string.hexdigits
プロットの用途をポスターに設定する	sns.set(context='poster')
ミディアムスレートブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
四分位数でデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
EUCでファイルをオープンする]	open(filepath, encoding='euc_jp')
ValueMapでデータフレームのカラムを一度に置き換える	df[col].replace(ValueMap)
ダークマゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
標準正規分布の確率密度関数を使用する	scipy.stats.norm.pdf(x)
ロイヤルブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
ヒストグラムをダークシアグリーン色として描画する	plt.hist(データ列, color='darkseagreen')
文字列は片仮名か確認する	('ァ' <= ch <= 'ン')
ゴーストホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: フォントの色を貝殻に設定する	color = 'seashell'
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
option: タンを使う	color = 'tan'
option: オリベドラブを用いる	color = 'olivedrab'
データフレームの中の列と列に重複があれば、消す	df.drop_duplicates(subset=column)
イエローグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
option: ライトグレー色を使用する	color = 'lightgray'
英字を全部見る	string.ascii_letters
データフレームを列によってによって破壊的に並べ直す	df.sort_values(by=column, inplace=True)
ファイルを文字列の示すエンコーディングとして書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
モデルの平均２乗誤差を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
散布図のポイントマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
データフレームのカラムは何日か調べる	df[col].dt.day
散布図をライトコーラル色を使って描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
切片なしの回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ライトスカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
データフレームのリストカラムの未入力値をモードに設定する	df[aList].fillna(df[aList].mode().iloc[0])
配列とリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
nが負の整数	n < 0
データフレームから最後の列を消す	df[df.columns[:-1]]
ブランチドアーモンド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
option: 青にグラフの色を設定する	color = 'blue'
日付データは日付データと同時か調べる	aDate == aDate2
option: ダーク・スラテグレーを使う	color = 'darkslategrey'
列からサンプリングする	random.sample(iterable)
モデルをあてはめる	model.fit(説明変数, 目的変数)
データフレームで、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
カラムの空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
数式を簡単化する	sympy.sympify(e)
グラフの使途をポスターに設定する	sns.set(context='poster')
ベクトルの各要素に加算する	aArray + aArray2
縦棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
リストを累加したイテラブル	itertools.accumulate(iterable)
文字列が文字列より辞書順で後かどうか	s > s2
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgray')
散布図に黒い△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
リストを四分位数ごとにビニングする	pd.qcut(aList, 4)
全要素が初期値の行列を作成する	np.full((行数, 列数), 初期値, dtype=np.int)
リストと配列について散布図をプロットして、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
プログラムを強制的に終了する	sys.exit()
四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s')
option: シーグリーンを用いる	color = 'seagreen'
リストとリストについて散布図を描画し、▼マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: 色をダークマゼンタに設定する	color = 'darkmagenta'
文字列中の部分文字列を文字列に全て置き換える	s.replace(sub, newsub)
実数は有限かどうか判定する	math.isfinite(x)
データ列とリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフの菱形マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ラインを色付きの一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: 色をホワイトに設定する	color = 'white'
文字列をセンタリングする	s.center(文字列幅)
文字列の開始位置と終了位置の間に部分文字列があるかどうか調べる	s.find(sub, start, end) != -1
データフレームの指定したデータ型の列名を列挙する	df.select_dtypes(型).columns
データフレームのstart行目からend行目までを取り出す	df[start:end]
option: 印を左三角に設定する	marker = '<'
option: 改行コードを旧Macにセットする	newline = '\r'
整数nを二進文字列にする	bin(n)[2:]
option: デピンクを使う	color = 'deeppink'
既存のファイルをSJISで追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
ヒストグラムを紺碧色として描画する	plt.hist(データ列, color='azure')
散布図に赤いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
リストとイテラブルの散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
線グラフを点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
暗い赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
実数のn乗を求める	pow(x, n)
ファイルパスからファイル名を使う	os.path.basename(filepath)
散布図の丸印を青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
データフレームのリストカラムの分散を算出する	df[aList].var()
option: 四角マーカーを加える	marker = 's'
横棒グラフをホットピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='hotpink')
辞書に項目名が存在しないとき、要素を追加する	aDict.setdefault(key, element)
グラフにx=0の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
両端キュー中の値を数える	deq.count(element)
データフレームのリスト列を100の位で丸める	df[aList].round(-2)
部分文字列が文字列の開始位置以降に含まれるか確認する	s.find(sub, start) != -1
混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
コーパスのバージョンを知る	version = 'wcce2022-0.1'
散布図のマーカーを青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
テンプレートをargsを引数として文字列整形する	formatText.format(*args)
折れ線グラフの色をロイヤルブルーにセットする	plt.plot(データ列x, データ列y, color='royalblue')
スクリプトファイルの絶対パスを使う	os.path.abspath(__file__)
折れ線グラフに赤い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データ列の中にいくつNaNが含まれるか数える	ds.isna().sum()
データフレームの中の列をn個にビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
複数の列によって昇順にデータフレームをソートする	df.sort_values(by=column, ascending=True)
option: 赤に色を設定する	color = 'red'
散布図の色をバイオレットにする	plt.scatter(データ列x, データ列y, color='violet')
列によってデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
第二引数で指定したファイル名	sys.argv[1]
データフレームのリスト列の値をValueMapでまとめて変更する	df[aList].replace(ValueMap)
option: 文字コードをSJISに設定する	encoding = 'shift_jis'
データフレームを列の値でグループ化してそれぞれのグループごとの最小値を求める	df.groupby(column).min()
パラメータがマイナス無限大に近づく場合数式の極限値を求める	sympy.limit(e, z, -oo)
双方向キューの最初の要素	deq[0]
ミディアムオーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
リネン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
数列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
option: エンコーディングをEUCに変更する	encoding = 'euc_jp'
縦棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
日付時刻データからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
折れ線グラフを淡いピンク色色を用いて描画する	plt.plot(データ列x, データ列y, color='lightpink')
カラムの中にいくつ欠損値があるか求める	ds.isna().sum()
ホールドアウト法を用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
データ列とデータ列について散布図を描画して、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
カウンタの項目一覧を使う	aCounter.keys()
縦棒グラフをディムグレー色を使って描画する	plt.bar(データ列x, データ列y, color='dimgrey')
CSVファイルTSVファイルをn番目の列をインデックスとして読む	pd.read_csv(filename, index_col=n)
ファイルをUTF8を用いて書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
デックをデキューする	deq.popleft()
縦棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
散布図に▽マーカーを加える	plt.scatter(データ列x, データ列y, marker='v')
横棒プロットを描いてラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
データフレームのn番目の行を取り出す	df.loc[n]
八進数字を全部使う	string.octdigits
データ列とリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
データフレームの重複を調べる	df.duplicated()
データ列からユニークな値を抽出し、リスト化する	ds.unique().tolist()
データフレームのn行目をドロップして更新する	df.drop(n, axis=0, inplace=True)
行列の各要素の積を求める	np.multiply(aArray, aArray2)
Pandasで、データフレームのカラムをタイムスタンプに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
文字列がタプルの要素	element in aTuple
折れ線グラフの左三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームを各列と列の組み合わせ毎にグループ分けして、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
option: フォントの色をパールバイオレットレッドに設定する	color = 'palevioletred'
折れ線グラフをコーンズシルク色を用いて描画する	plt.plot(データ列x, データ列y, color='cornsilk')
散布図を耐火レンガ色を使って描画する	plt.scatter(データ列x, データ列y, color='firebrick')
ミントクリームにヒストグラムの色を設定する	plt.hist(データ列, color='mintcream')
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
ラベンダー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
option: グラフの色をグリーンにセットする	color = 'green'
散布図に黒い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
数値を因数分解する	sympy.factor(e)
コーンフラワーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
配列のユニークな要素を求める	np.unique(aArray)
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
縦棒グラフをペールグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='palegreen')
option: ゲインズボロを用いる	color = 'gainsboro'
第2引数のファイルの名前	sys.argv[1]
二つのオブジェクトが同じ参照か調べる	obj is obj2
横棒グラフをインディアンレッド色として描画する	plt.barh(データ列x, データ列y, color='indianred')
線グラフの色をライムグリーンにセットする	plt.plot(データ列x, データ列y, color='limegreen')
赤い一点鎖線として線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
nを16進表現にする	hex(n)
縦棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ファイルパスをUTF8としてオープンする]	open(filepath, encoding='utf-8')
データフレームをグループ化しそれぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
標準入力から1文字分読む	sys.stdin.read(1)
データ列が何年か調べる	ds.dt.year
データフレームの分散を求める	df.var()
折れ線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
option: グラフの色をターコイズに指定する	color = 'turquoise'
暗い赤にヒストグラムの色を設定する	plt.hist(データ列, color='darkred')
日付データをn日前にする	aDate - datetime.timedelta(days=n)
グラフの描画で明るくカラーパレットを使用する	sns.set(pallete='bright')
option: グリーンイエローを使う	color = 'greenyellow'
文字列の最初から不要な空白やタブを取り除く	s.lstrip()
ゼロ埋めされた三２ビット整数型の配列を初期化する	np.zeros(要素数, dtype=np.int16)
破線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
コーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
表データから列を1つのみ選択する	df[[column]]
折れ線グラフの色をスレートブルーにセットする	plt.plot(データ列x, データ列y, color='slateblue')
散布図をスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='slateblue')
オブジェクトは浮動小数点数クラスかテストする	isinstance(obj, float)
文字列内にひとつでもアスキー文字があるか調べる	any(c.isascii() for c in s)
n個の文字列があるリストを作る	[element] * n
縦棒プロットを描画してラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
空白文字	' '
両端キューの右	deq[-1]
文字列中から正規表現にASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
データフレームのリストカラムの未入力値を後の値に設定する	df[aList].fillna(method='bfill')
データフレームの中のNaNの合計をカウントする	df.isna().sum()
棒グラフをリネン色を用いて描画する	plt.bar(データ列x, データ列y, color='linen')
データフレームのリスト列のNaNを直後の値で置換する	df[aList].fillna(method='bfill')
折れ線グラフのポイント印の線幅を設定する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
折れ線グラフに青い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
既存の配列をベースに全要素が初期値のベクトル	np.full_like(aArray, 初期値)
カデットブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
疑似乱数平均値と標準偏差からを生成する	random.normalvariate(mu=0.5, sigma=0.2)
二つの列によってデータフレームを降順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
2つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
リストをn回、接続する	aList * n
アルファベットを全て求める	string.ascii_letters
組の要素を昇順にソートする	sorted(aTuple, reverse=False)
ファイルパスをSJISで開く]	open(filepath, encoding='shift_jis')
データフレームのカラムの中に文字列と文字列がある	df[col].isin([value, value2])
データ列の中央値を求める	ds.median()
折れ線グラフの色をイエローグリーンに指定する	plt.plot(データ列x, データ列y, color='yellowgreen')
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
数列とリストについての散布図に上三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
数列の変遷を半透明の実線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ヒストグラムをサンディーブラウン色を使って描画する	plt.hist(データ列, color='sandybrown')
集合が空集合	len(aSet) == 0
option: バリーウッド色を用いる	color = 'burlywood'
文字列を文字コードでバイト列にする	s.encode(encoding=encoding)
等量で列をn個にビン分割する	pd.qcut(ds, n)
方程式として数式の変数の解を計算する	sympy.solve(e, z)
全８進数字	string.octdigits
線グラフを破線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
ヒストグラムを複数並べてプロットする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
青緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームの中のカラムをリストを境界値としてビン分割する	pd.cut(df[col], aList)
線グラフの色をペールグリーンに指定する	plt.plot(データ列x, データ列y, color='palegreen')
option: 色をライトスレイグレーに変更する	color = 'lightslategrey'
横棒グラフを描画して、下寄せする	plt.barh(ラベル列, データ列, align='edge')
スラグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
ダークグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkgreen')
折れ線グラフのバツマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームがどれだけ分散しているか調べる	df.var()
列毎にデータフレームを分類して、標準偏差を計算する	df.groupby(column).std()
二点間のユークリッド距離を計算する	math.dist(point, point2)
折れ線グラフの四角印を青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
MSDで淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
散布図のダイアモンド印の色を設定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ヒストグラムを横に並べてプロットする	plt.hist([データ列, データ列], color=['b', 'r'])
マッピングを多重集合に変換する	collections.Counter(aDict)
折れ線グラフのクロス印の大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
ゴーストホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
カラムの未入力値を最大値に設定する	ds.fillna(ds.max())
option: グレー色を使用する	color = 'gray'
ヒストグラムの色を青紫に指定する	plt.hist(データ列, color='violet')
ミディアムオーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
n2がn以上かつn3以下かどうか調べる	n <= n2 and n2 <= n3
データフレームのカラムの欠損値を平均に設定する	df[col].fillna(df[col].mean())
option: フォントの色をピーチパフに設定する	color = 'peachpuff'
行列の行を選択する	aArray[行番号]
データフレームを列によってグループ分けし、それぞれのグループ毎の標準偏差を求める	df.groupby(column).std()
TSVファイルからCSVをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
折れ線グラフの四角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
カウンタからシーケンスを回数して引く	aCounter.subtract(iterable)
クラスが名前付きタプル	issubclass(C, tuple)
kを底とする対数を算出する	math.log(x, k)
ピンクにヒストグラムの色を設定する	plt.hist(データ列, color='pink')
文字列を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
散布図のマーカーを左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
配列とリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
配列とデータ列について散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: ローングリーン色を使用する	color = 'lawngreen'
データフレームを行によって並べる	df.sort_index()
n個に列をビン分割する	pd.cut(ds, n)
マップを浅くコピーする	dict(aDict)
散布図をオールドレース色を使って描画する	plt.scatter(データ列x, データ列y, color='oldlace')
文字列の終了位置より前に部分文字列が含まれないか判定する	s.find(sub, 0, end) == -1
文字列が十進数字	s.isdecimal()
書式をargsを引数として文字列整形する	formatText.format(*args)
option: 三２ビット整数型を使う	dtype = np.int16
配列と配列の散布図をプロットし、、マーカーをクロスにセットする	plt.plot(データ列x, データ列y, marker='x')
横棒グラフをインディゴ色として描画する	plt.barh(データ列x, データ列y, color='indigo')
折れ線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームを各列と列の組み合わせ毎に集約して合計を求める	df.groupby([column, column2], as_index=False).sum()
リストとイテラブルについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
列を1000の位で四捨五入する	ds.round(-3)
文字列から部分文字列を消す	s.replace(sub, '')
ファイル名がテキストファイルかどうか調べる	filename.endswith('.txt')
折れ線グラフの色をコーラルに変更する	plt.plot(データ列x, データ列y, color='coral')
集合の浅いコピーを作る	aSet.copy()
ヒストグラムの色をブラックにセットする	plt.hist(データ列, color='black')
2つの文字列を辞書順で比較する	s < s2
２つのタプルをネスト化する	collections.ChainMap(aDict, aDict2)
year年を日付にする	datetime.date(year=year, month=1, day=1)
文字列が全てアルファベットかどうか調べる	s.isalpha()
横棒グラフをティール色で描画する	plt.barh(データ列x, データ列y, color='teal')
組の最初を除く	aTuple[1:]
option: エンコーディングをBOM付きに指定する	encoding = 'utf_8_sig'
赤いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
棒グラフをゲインズボロ色を用いて描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: 茶色に色を変更する	color = 'brown'
option: 行列のデータ型を指定する	dtype = bool
文字列の先頭で正規表現にケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
グラフの全般的にパレットを淡くする	sns.set(pallete='muted')
散布図の左三角印を青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
xの小数点以下'3'桁の文字列に変換する	':.3f'.format(x)
option: フォントの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
xでデータ列の欠損値を埋める	ds.fillna(x)
カウンタの値を増やす	aCounter[element] += 1
データフレームの全カラムを散布図として可視化する	sns.pairplot(df)
黒いクロスマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
option: グラフの色をゲインズボロに変更する	color = 'gainsboro'
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
回帰分析をブースティングで行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
数を実数で除算する	x / y
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
データ列の平均を求める	ds.mean()
パレットトルコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
昇順にタプルの要素を並べる	sorted(aTuple, reverse=True)
nがn2よりも大きいかどうか	n > n2
データフレームを表示するとき、データフレームをn列まで表示できるようにする	pd.set_option('display.max_columns', n)
整数nを2進表記にする	bin(n)
x座標の目盛を非表示にする	plt.xticks([])
t分布型確率的近傍埋め込み法を行う	model = sklearn.manifold.TSNE(n_components=n)
option: ハニーデューを用いる	color = 'honeydew'
数値の平方根を求める	sympy.sqrt(e)
散布図でデータフレームをプロット化する	sns.scatterplot(data=df, x='列名', y='列名')
大文字を小文字に変換する	s.lower()
プロットの色を全般的に色差別なくする	sns.set(pallete='colorblind')
option: 箱ひげ図を横向きにする	vert = False
タブで区切って二つの実行結果をプリントする	print(value, value2, sep='\t')
option: 色をアクアに設定する	color = 'aqua'
nはタプルのいづれかか確認する	n in aTuple
ファイルから入力ストリームを見る	open(filepath)
'A'列によってデータフレームを降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
文字列の中のパターンによるすべてのマッチを使う	re.findall(pattern, s)
縦棒グラフをインディアンレッド色として描画する	plt.bar(データ列x, データ列y, color='indianred')
折れ線グラフのバツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
option: ディムグレーにグラフの色を設定する	color = 'dimgrey'
データフレームのリストカラムの母標準偏差を求める	df[aList].std(ddof=0)
文字列がリストの要素でない	element not in aList
プロットの横軸にラベルをつける	plt.xlabel('x軸ラベル')
折れ線グラフの色をダークオリーブグリーンにする	plt.plot(データ列x, データ列y, color='darkolivegreen')
図のサイズを変更する	plt.figure(figsize=(横幅, 高さ))
折れ線プロットとしてデータフレームの列を描画する	plt.plot(df[column], df[column])
散布図を星印で描画する	plt.scatter(データ列x, データ列y, marker='*')
列のユニークな値	df[col].unique()
散布図をポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームとデータ列をくっつける	pd.concat([df, ds], axis=1)
縦棒グラフをライトコーラル色を用いて描画する	plt.bar(データ列x, データ列y, color='lightcoral')
文字列を空白で区切り、、列挙する	s.split()
部分文字列かどうか調べる	sub in s
シーグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
縦棒プロットを描画して、バーの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
新しいサポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
青いクロス印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
option: SJISを使用する	encoding = 'shift_jis'
オブジェクトのプロパティの値を求める	getattr(obj, プロパティ名)
文字列リストにイテラブルを変換して部分文字列によって連結する	sub.join(map(str, iterable))
パレットを全般的に暗くする	sns.set(pallete='dark')
オブジェクトにプロパティが存在する	hasattr(obj, プロパティ名)
正規分布にしたがってデータ列の値が発生する累積確率を使う	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
変数がマイナス無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, -oo)
データフレームを二つの列の値で集計する	df.groupby(['A', 'B'])
文字列の開始位置と終了位置の間に部分文字列が存在するか	s.find(sub, start, end) != -1
実行時に標準出力がパイプかどうか調べる	not sys.stdout.isatty()
目盛線	plt.grid(color='#800080')
分数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
option: ブランチドアーモンドを用いる	color = 'blanchedalmond'
データフレームの列をヒストグラムを使って描画する	plt.hist(df[column])
ダークオリーブグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
最後の部分文字列で文字列を二つに区切って、前半の文字列を使う	s.rpartition(sub)[0]
散布図をミディアムターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
スタックが空でないかテストする	len(deq) != 0
データ列のNaNを最小値に設定する	ds.fillna(ds.min())
option: グラフを実線に設定する	linestyle = 'solid'
浮動小数点数を小数点数で割った剰余	math.remainder(x, x2)
数値を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
リストとリストの散布図を描画して、マーカーを三角に変更する	plt.plot(データ列x, データ列y, marker='^')
x座標の最大・最小を変更する	plt.xlim(最小値, 最大値)
文字列の先頭が部分文字列か調べる	s.startswith(sub)
文字列中にひとつでも非アスキー文字が含まれる	any(not c.isascii() for c in s)
折れ線グラフの色をパウダーブルーにセットする	plt.plot(データ列x, データ列y, color='powderblue')
縦棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
シアンにヒストグラムの色を設定する	plt.hist(データ列, color='cyan')
option: 色をダークスラテグレーに変更する	color = 'darkslategray'
二次元組をflattenする	sum(aTuple)
ミディアムスレートブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームをグループ化し、それぞれの列に対し個数を算出する	df.groupby(column)[column2].count()
データフレームをグループ化し、列に対し最小値を求める	df.groupby(column)[column2].min()
ロージーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
カウンタのそれぞれの要素を、そのカウントだけリストとして得る	aCounter.elements()
列を累加した列	itertools.accumulate(iterable)
グラフのx軸のキャプションを設定する	plt.xlabel('x軸ラベル')
縦棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
散布図に黒い上三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ファイルを開いて]、書き込みストリームを使う	open(filepath, mode='w')
実行結果を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
文字列全体を大文字・小文字を無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
リストを引数として展開してプリントする	print(*aList)
データフレームの内で何行重複するか確認する	df.duplicated().sum()
データ列の各値の出現回数を求める	ds.value_counts()
option: ラベンダーを使う	color = 'lavender'

サイン	math.sin(x)
本日をタプルにする	datetime.datetime.today().timetuple()
凡例を追記する	plt.legend(['凡例A', '凡例B'])
カテゴリ別で色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: 大バツマーカーを加える	marker = 'X'
文字列は全て十進数字	s.isdecimal()
rgbのダイアモンドマーカーをデータ列と数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
プロットの色を色差別なくする	sns.set(pallete='colorblind')
折れ線グラフをダークサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='darksalmon')
三つの最大値	max(x, y, z)
ファイルを追加できるようにUTF8として開く]	open(filepath, mode='a', encoding='utf-8')
option: 黄緑色を使う	color = 'chartreuse'
折れ線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
改行なしで1行だけ標準入力から読み込む	sys.stdin.readline().rstrip()
要素を両端キューの最後から取り出す	deq.pop()
ヒストグラムをライトスレイグレー色を使って描画する	plt.hist(データ列, color='lightslategray')
小数点以下の表示精度を設定する	pd.set_option('precision', n)
データ列の文字列を欠損値にする	ds.replace(s, np.nan)
ファイルのファイル名を求める	os.path.basename(filepath)
切り上げて整数にする	math.ceil(x)
データフレームをヘッダを付けずにJSONLファイルに書き込む	df.to_csv(filename, header=None)
散布図をライトスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
マッピングをチェーンマップにする	collections.ChainMap(aDict)
リストとデータ列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
縦棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
option: シスルにグラフの色を設定する	color = 'thistle'
折れ線グラフに左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
散布図に赤い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
追加モードでファイルをオープンして]、fとする	f = open(filepath, mode='a')
データフレームの列を丸める	df[col].round()
実数のハイパボリック・タンジェント	math.tanh(x)
小数点数の絶対値を求める	math.fabs(x)
nがn2より小さい	n < n2
クラス分類をパーセプトロンとして行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
表データのそれぞれのグループごとの最小値	df.groupby(column).min()
nがn2の倍数かどうか確認する	n % n2 == 0
散布図に黒い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='k')
オーキッド色でヒストグラムを描画する	plt.hist(データ列, color='orchid')
ミスティローズ色としてヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
横棒グラフをオリーブ色を使って描画する	plt.barh(データ列x, データ列y, color='olive')
日付時刻データを数値に変換する	aDatetime.timestamp()
折れ線グラフの色をロージーブラウンにする	plt.plot(データ列x, データ列y, color='rosybrown')
折れ線グラフのマーカーを大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
日付データは日付データよりあとかどうか	aDate > aDate2
データ列の変遷を赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ヒストグラムをアクアマリン色として描画する	plt.hist(データ列, color='aquamarine')
日付時刻データの月	aDatetime.month
散布図にrgbの下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの列名一覧で指定された列を消す	df.drop(columns, axis=1)
リストとリストについて散布図を描き、菱形マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図をポイントマーカーでプロットする	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフを珊瑚色で描画する	plt.plot(データ列x, データ列y, color='coral')
タイムスタンプをインポートする	import time
option: エラーを無視するように変更する	errors = 'ignore'
文字列を改行で区切り、文字列リストにする	s.splitlines()
棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
浮動小数点数に整数を加える	x + y
データフレームのcollのUNIX秒からタイムスタンプ型にする	pd.to_datetime(df[col], unit='s', utc=True)
ヒストグラムの色を青にセットする	plt.hist(データ列, color='blue')
今日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
オブジェクトがクラスかどうか調べる	isinstance(obj, クラス)
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
オブジェクトが名前付きタプル	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データフレームの列と列の相関行列を求める	df[[column, column2]].corr()
ライトゴールドロディイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
シアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
異なる列をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ラインを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
nが配列のいづれかか調べる	n in aArray
実行時に標準出力がパイプ	not sys.stdout.isatty()
マップからキーの値か、もしくは要素を見る	aDict.get(key, element)
実数を文字列にする	str(x)
２つの値をコロンで区切ってプリントする	print(value, value2, sep=':')
星マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
option: パールゴールデンロッド色を使用する	color = 'palegoldenrod'
データフレームをグループ化しそれぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
日付データをISO形式の文字列にする	aDate.isoformat()
線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
イテラブルから配列を作成する	np.array(iterable)
y軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
グラフにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
線グラフをサンディーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='sandybrown')
変数名をキーとして辞書	dict(name=element)
option: イエローグリーン色を使用する	color = 'yellowgreen'
データ列の変遷を半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームの中に存在する文字列と文字列の個数を求める	df.isin([value, value2]).sum()
JSONLファイルにBOMを付けてデータフレームを保存する	df.to_csv(filename, encoding='utf_8_sig')
組をひとつ置きに取り出す	aTuple[::2]
アルファベットの大文字を求める	string.ascii_uppercase
３整数の最大公約数を求める	math.gcd(n, n2, n3)
nを16進文字列に変換する	hex(n)[2:]
rgbの四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: 行列のデータ型を指定する	dtype = np.int32
部分文字列で部分文字列が始まるか調べる	s.startswith(sub)
ヒストグラムをイエローグリーン色として描画する	plt.hist(データ列, color='yellowgreen')
ダークターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
データ列を等間隔でn個に分割する	pd.cut(ds, n)
部分文字列が文字列中に存在するかどうか調べる	sub in s
組の値だけ表示する	print(*aTuple)
ヒストグラムの線の種類を点線に指定する	plt.hist(データ列, linestyle='dotted')
縦棒グラフを淡いピンク色色を用いて描画する	plt.bar(データ列x, データ列y, color='lightpink')
TSVからCSVをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
データフレームの列の中にいくつ日付データがあるか数える	df[col].isin([value]).sum()
ヒストグラムを淡い茶色色として描画する	plt.hist(データ列, color='tan')
行列のユニークな値を要素とする配列	np.unique(aArray)
縦棒グラフをドジャーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
year年day月のタイムスタンプ	datetime.datetime(year=year, month=month, day=1)
nが2で割り切れないか確認する	n % 2 == 1
インディアンレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
データフレームのカラムの未入力値を最大値に指定する	df[col].fillna(df[col].max())
散布図のバツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
切り捨てながらnをn2分の一にする	n //= n2
リストと配列についての散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: レモンシフォンにグラフの色を設定する	color = 'lemonchiffon'
データフレームのカラムからユニークな値を抽出し、リスト化する	df[col].unique().tolist()
折れ線グラフの右三角印を青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ベクトルをベースに全要素が1の配列	np.ones_like(aArray)
折れ線グラフをナバホホワイト色として描画する	plt.plot(データ列x, データ列y, color='navajowhite')
デックが空でないかどうか	len(deq) != 0
rgbの星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: 黄色にフォントの色を設定する	color = 'yellow'
列'A'と列'B'をキーとして2つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
日付時刻データからn分、減らす	aDatetime - datetime.timedelta(minutes=n)
文字列ひとつのりストを得る	[element]
日付と時刻からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
代数計算ライブラリを使う	import sympy
データフレームを'A'列によって昇順に破壊的に並べる	df.sort_values(by='A', ascending=True, inplace=True)
多次元データを特異値分解でパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
データフレームのカラムの分散を算出する	df[col].var()
集合からエラーなく要素を除去する	aSet.discard(element)
折れ線グラフの下三角印の太さを設定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
横棒グラフを真紅色として描画する	plt.barh(データ列x, データ列y, color='crimson')
option: フォレストグリーン色を使用する	color = 'forestgreen'
整数nの2進数文字列	bin(n)[2:]
データフレームの値をValueMapで一度に置換する	df.replace(ValueMap)
データフレームを'A'列によってまとめたグループを使う	df.groupby('A')
散布図の大バツマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
小数点数のハイパボリック・サイン	math.sinh(x)
特異値分解で多次元データを濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
折れ線グラフの色をフォレストグリーンに変更する	plt.plot(データ列x, データ列y, color='forestgreen')
文字列はリストに含まれる	element in aList
線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='gray')
折れ線グラフを赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
nのn2乗を計算する	n ** n2
項目名がマッピング上で未定義かどうか調べる	key not in aDict
データフレームを各列と列の組み合わせ毎にグループ化して個数を求める	df.groupby([column, column2], as_index=False).count()
rgbの▼マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
棒グラフを黄緑色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
積み上げ横棒グラフを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
横棒グラフをスノー色として描画する	plt.barh(データ列x, データ列y, color='snow')
カウンタを列をカウントして、更新する	aCounter.update(iterable)
データフレームのリスト列の欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
カウンタから最も頻出の項目の件数を算出する	aCounter.most_common()[1]
少ない順にカウンタをリストとして得る	aCounter.most_common()[::-1]
デフォルトを適用する	sns.set()
カテゴリで色分けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
列を累加した列	itertools.accumulate(iterable)
データフレームをグループ化し、それぞれの列に対し最大値を計算する	df.groupby(column)[column2].max()
マッピングのの一覧を得る	aDict.values()
句読点文字を全て使う	string.punctuation
データフレームのカラムの曜日	df[col].dt.weekday_name
横棒グラフをグリーン色として描画する	plt.barh(データ列x, データ列y, color='green')
今日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフを黄色色を用いて描画する	plt.plot(データ列x, データ列y, color='yellow')
線グラフをパレットトルコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
option: 読み込まないフッタをnにセットする	skipfooter = n
散布図をダークブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
散布図に青い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
文字列の文字数を使う	len(s)
PandasでデータフレームのcollをPandasの日付型にする	pd.to_datetime(df[col])
行列演算をする	import numpy as np
ローングリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
表データを複数の列によってソートする	df.sort_values(by=column)
プラットホームはMacOSか確認する	sys.platform.startswith('darwin')
表からn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
散布図の星印の色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
TSVファイルをヘッダを指定せず読む	pd.read_csv(filename, header=None)
実数で実数を除算する	x / y
ヒストグラムをミッドナイトブルー色として描画する	plt.hist(データ列, color='midnightblue')
リスト中のオブジェクトが最初に見つかる位置を探す	aList.index(element)
折れ線グラフをベージュ色として描画する	plt.plot(データ列x, データ列y, color='beige')
赤いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
重回帰モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
データフレームのNaNをxに変更する	df.fillna(x)
スラグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
文字列の開始位置番目と終了位置番目の間に部分文字列がないか調べる	s.find(sub, start, end) == -1
平均でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mean())
カテゴリ列でグループ化してデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
グラフをプレゼン用に指定する	sns.set(context='talk')
散布図に上三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='^')
グラフの描画で濃くカラーパレットを用いる	sns.set(pallete='deep')
折れ線グラフの色をシエナにセットする	plt.plot(データ列x, データ列y, color='sienna')
標準入力から1行分読み込んで改行を取り除く	sys.stdin.readline().rstrip()
円プロットの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
列名を指定された列名一覧に置き換える	df.columns = columns
ゲインズボロ色でヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
ヒストグラムの色をロージーブラウンに変更する	plt.hist(データ列, color='rosybrown')
分類モデルから目的変数を予測する	y_pred = model.predict(説明変数)
文字列を部分文字列で分割し、、文字列リストに変換する	s.split(sub)
option: ライトスチールブルーにグラフの色を設定する	color = 'lightsteelblue'
列によって昇順にデータフレームをソートする	df.sort_values(by=column, ascending=True)
回帰モデルをあてはめる	model.fit(説明変数, 目的変数)
option: アイボリーにグラフの色を設定する	color = 'ivory'
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
ブランチドアーモンド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t')
配列の最大値を調べる	np.max(aArray)
データフレームのn行までを抽出する	df[:n]
黒い▽マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
日付時刻データにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgray')
option: 色をブランチドアーモンドに変更する	color = 'blanchedalmond'
書き込み用にファイルを文字コードtextでオープンする]	open(filepath, mode='w', encoding=text)
データフレームを各列毎にグループ分けして、列の標準偏差を計算する	df.groupby(column)[column2].std()
グラフの色テーマを全般的に濃くする	sns.set(pallete='deep')
シーケンスから両端キューを作成する	collections.deque(iterable)
データフレームの列を最初のカテゴリーを除いてダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
表データを列によってグループ化して、各グループ毎の最大値を求める	df.groupby(column).max()
データフレームの欠損値を最大値で補う	df.fillna(df.max())
タプルのn番目のの要素	aTuple[n]
クラス分類をブースティングとして行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
データフレームの列の値がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
データフレームのヒストグラムを縦横に並べて、図示する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
データフレームを列によって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
タイムスタンプデータが土曜日	aDatetime.weekday() == 5
散布図の▽印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
アクア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
データフレームのカウントプロットを描く	sns.countplot(x='列名', data=df)
ラインを青い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
浮動小数点数の正弦の逆数	math.asin(x)
重回帰モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
データフレームを各列毎にグループ化して、カラムの合計を求める	df.groupby(column)[column2].sum()
円プロットにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
タプルの先頭を除く	aTuple[1:]
文字列が全て空白文字からなるかどうか調べる	s.isspace()
折れ線グラフの色をチョコレートに変更する	plt.plot(データ列x, データ列y, color='chocolate')
折れ線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
日付時刻データを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
n進数文字列をバイナリにする	int(s, n).to_bytes(length=bytesize, byteorder='big')
option: グラフの色をゴールドに変更する	color = 'gold'
イエローグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
ヒストグラムをライトサーモン色を用いて描画する	plt.hist(データ列, color='lightsalmon')
option: タン色を使用する	color = 'tan'
逆余弦を算出する	math.acos(x)
青い破線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームの中にある文字列の合計をカウントする	df.isin([value]).sum()
rgbの星マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: ビスクを用いる	color = 'bisque'
散布図に丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o')
多層パーセプトロンとして回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
日付データからn日分減算する	aDate - datetime.timedelta(days=n)
線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームのカラムのユニークな要素数を見る	df[col].nunique()
ヒストグラムの色を珊瑚にセットする	plt.hist(データ列, color='coral')
文字列が全て小文字かどうか	s.islower()
option: 色をオリベドラブに設定する	color = 'olivedrab'
データフレームのカラムの中のNaNの合計を数える	df[col].isna().sum()
リストを縦軸リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
データ列を箱ひげ図として可視化する	plt.boxplot(データ列)
データフレームの列の値を正規表現patternで一度にreplに変更する	df[col].replace(pattern, repl, regex=True)
option: フォントの色をミディアムバイオレットレッドに指定する	color = 'mediumvioletred'
ディムグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
二つの集合に共通する要素からなる集合	aSet.intersection(aSet2)
線グラフの色を紺に変更する	plt.plot(データ列x, データ列y, color='darkblue')
文字列が文字列より辞書順で前かどうか調べる	s < s2
option: 印を丸に変更する	marker = 'o'
四角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
option: フォントの色をライトスカイブルーに設定する	color = 'lightskyblue'
ミディアムシアグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
行列から重複を除いたベクトルを作る	np.unique(aArray)
データフレームの列のNaNを最大値で補う	df[col].fillna(df[col].max())
リストとして列を抽出する	df[column].values.tolist()
クラス分類をサポートベクターマシンを用いて行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
乱数で要素を埋めた行列	np.random.random((行数, 列数))
折れ線グラフの色をブラウンに変更する	plt.plot(データ列x, データ列y, color='brown')
データフレームのリストカラムの中に文字列があるか判定する	df[aList].isin([value])
option: フォントの色をカデットブルーに設定する	color = 'cadetblue'
option: 色のアルファを設定する	alpha = 0.5
ゴーストホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
イテラブルと列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
ヒストグラムを珊瑚色として描画する	plt.hist(データ列, color='coral')
データフレームを列によってソートして下位を取り出す	df.sort_values(columns).tail(n)
タブ区切りのファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
変数をマゼンタにする	f'\033[35m{value}\033[0m'
ヒストグラムの色をバイオレットに指定する	plt.hist(データ列, color='violet')
イテラブルを文字列リストに変換して部分文字列でつなげる	sub.join(map(str, iterable))
折れ線グラフを赤い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列の中で大文字・小文字を無視して正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
列を丸める	ds.round()
ダークオーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
黒い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
二つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
option: フォントの色をライトグリーンに設定する	color = 'lightseagreen'
散布図をrgbの丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データ列の折れ線グラフを描画し、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
カラムの歪度	ds.kurt()
散布図に黒い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
数列とリストについて散布図を描画して、マーカーを丸にセットする	plt.plot(データ列x, データ列y, marker='o')
散布図をモカシン色として描画する	plt.scatter(データ列x, データ列y, color='moccasin')
option: 三角印を使う	marker = '^'
表データを列ごとにグループ化して、各グループ毎の個数を計算する	df.groupby(column).count()
日本語フォントをプロット中で表示できるようにする	sns.set(font='IPAexGothic')
データフレームの列の欠損値を直前の値に設定する	df[col].fillna(method='ffill')
文字列がリストに含まれないか確認する	element not in aList
折れ線グラフの丸印の太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
空の回帰木モデルを用意する	model = sklearn.tree.DecisionTreeRegressor()
アリスブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
ブランチドアーモンド色としてヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
辞書からカウンタを作成する	collections.Counter(aDict)
データ列のNaNを最小値で補う	ds.fillna(ds.min())
両端キューの先頭から要素を削除する	deq.popleft()
データフレームを欠損値を含めて列の値で分類する	df.groupby(column, dropna=False)
ファイルパスをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
最後の部分文字列で文字列を分けたときの前半の文字列を見る	s.rpartition(sub)[0]
散布図にダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
option: グラフの線種を実線に設定する	linestyle = 'solid'
データフレームのリストで指定された列のヒートマップを描画する	sns.heatmap(df[aList].corr())
データフレームの列の文字列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
横棒グラフをライトブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightblue')
ファイル名がCSVファイルか	filename.endswith('.csv')
データフレームのn行目を消し、、インプレイスする	df.drop(n, axis=0, inplace=True)
縦棒グラフをブランチドアーモンド色を使って描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
実行結果を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
option: ライトグレーにグラフの色を指定する	color = 'lightgray'
複数の列の値によってデータフレームをグループ化する	df.groupby(columns)
ロバストな線形回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
ヒストグラムをパープル色を用いて描画する	plt.hist(データ列, color='purple')
実数を小数点数で割った剰余	math.remainder(x, x2)
要素が全て1の配列を作成する	np.ones(要素数, dtype=np.int)
ASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームのカラムの欠損値を前の値で置換する	df[col].fillna(method='ffill')
▲マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ライトスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
タプルをコピーする	aDict.copy()
棒グラフを紺碧色として描画する	plt.bar(データ列x, データ列y, color='azure')
縦棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
データフレームのそれぞれのグループ毎の分散を算出する	df.groupby(column).var()
データフレームを各カテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
列のNaNを中央値に設定する	ds.fillna(ds.median())
データフレームの中のカラムをビニングする	pd.cut(df[col], aList)
線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
小さい順にデータフレームを'A'列によってソートする	df.sort_values(by='A', ascending=True)
線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
黄色色でヒストグラムを描画する	plt.hist(データ列, color='yellow')
折れ線グラフに黒い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
マルーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='maroon')
option: フォントの色を淡いピンク色に設定する	color = 'lightpink'
y軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
辞書から項目名で指定された項目をポップする	aDict.pop(key)
散布図をクロスマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='x')
パラメータが0に近づく場合の数値の極限値を算出する	sympy.limit(e, z, 0)
Pandasでエポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
ホールドアウトを使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
リストのすべての値を消去する	aList.clear()
データフレームのヒストグラムを横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名')
データフレームの列の中央値を求める	df[col].median()
集合から値を除く	aSet.remove(element)
option: シアンを使う	color = 'cyan'
散布図をブラウン色で描画する	plt.scatter(データ列x, データ列y, color='brown')
option: フォントの色をスチールブルーにする	color = 'steelblue'
数列を箱ひげ図にする	plt.boxplot(データ列)
入力ストリームからn文字、読み込む	f.read(n)
データフレームの値が未入力値か確認する	df.isna()
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
マゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
カラムの尖度を求める	ds.skew()
ヒストグラムをペールグリーン色として描画する	plt.hist(データ列, color='palegreen')
ダークグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
リストと配列について散布図を描画して星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
グラフに水平方向の破線を付ける	plt.axhline(y=0, linestyle='dashed')
データ列の曜日が何日目か調べる	ds.dt.dayofweek
タプルの中の最も大きい値	max(aTuple)
折れ線グラフのバツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ヒストグラムを赤色として描画する	plt.hist(データ列, color='red')
日付時刻データは日付時刻データより後ろか調べる	aDatetime > aDatetime2
列の集合を求める	set(iterable)
option: △印を描画する	marker = '^'
Pandasでデータ列を日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='turquoise')
文字列の左端からタブを取り除く	s.lstrip('\t')
実数を複素数にする	complex(x)
枠なしの凡例をプロットの中に加える	plt.legend(frameon=False)
ひとつでも非小文字が文字列中にあるかどうか調べる	any(not c.islower() for c in s)
カラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
ディープスカイブルー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームから重複する行を削除する	df.drop_duplicates()
ロバストな線形分類器を新規作成する	model = sklearn.linear_model.HuberClassifier()
スカイブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='skyblue')
option: ダークオレンジにグラフの色を指定する	color = 'darkorange'
データフレームの最初の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
カラムの中央値	ds.median()
列の一覧	df.info()
散布図に青いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
option: 色をダークシアンにセットする	color = 'darkcyan'
部分文字列が文字列中に含まれないか調べる	sub not in s
文字列の最初から部分文字列を探す	s.find(sub)
カウンタの各キーをカウントだけ列挙する	aCounter.elements()
黒い星マーカーを数列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
配列の次元数を算出する	aArray.ndim
option: 先頭のカラムをインデックスに指定する	index_col = 0
データ列のNaNを平均で埋める	ds.fillna(ds.mean())
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
option: コーラル色を用いる	color = 'coral'
xが-9以上、9以下か	-9 <= x <= 9
Pandasでフォーマットとして文字列をdatetime64型にする	pd.to_datetime(s, format='%Y-%m-%d')
折れ線グラフの色を紺碧に変更する	plt.plot(データ列x, データ列y, color='azure')
等差数列から乱数を求める	random.randrange(start, end, step)
キーが辞書上で定義されている	key in aDict
グリーンにヒストグラムの色を設定する	plt.hist(データ列, color='green')
散布図をライトゴールドロディイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
キューからポップする	deq.pop()
マルーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
文字列全体がパターンにケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ファイルからバイナリ書き込みストリームを開いて]fとする	f = open(filepath, mode='wb')
ファイルパスから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
赤い実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
列のユニークな値を確認する	ds.unique()
データ列の曜日を使う	ds.dt.weekday_name
既存のファイルパスをSJISを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
日付データが土曜日か判定する	aDate.weekday() == 5
ダークカーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
コーラル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
散布図としてデータフレームのカラムを見る	sns.scatterplot(data=df, x='列名', y='列名')
大文字・小文字を無視して正規表現を事前にコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
リストと配列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
n番目のシートをエクセルファイルファイルのデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
パパイヤウィップ色でヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
データフレームから指定した４列だけ取り出す	df[[column, column2, column3, column4]]
文字列リストにイテラブルを変換して、空白によって連結する	' '.join(map(str, iterable))
ライトスカイブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='teal')
ヒストグラムをベージュ色を用いて描画する	plt.hist(データ列, color='beige')
カウンタの和集合を算出する	aCounter | aCounter2
ヒストグラムの色をスプリンググリーンに変更する	plt.hist(データ列, color='springgreen')
リストをソートする	sorted(aList)
データフレームの列をグループ化してヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
二つの集合の対称差集合を使う	aSet.symmetric_difference(aSet2)
ファイル名がJSONファイルか	filename.endswith('.json')
下三角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
散布図のダイアモンド印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
回帰分析を勾配ブースティングとして行う	model = sklearn.ensemble.GradientBoostingRegressor()
列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
option: グラフの色をサンディーブラウンにセットする	color = 'sandybrown'
カウンタの最も頻出な文字列	aCounter.most_common()[0]
データフレームが正規分布からどれだけ尖っているか見る	df.skew()
ヒストグラムをアリスブルー色として描画する	plt.hist(データ列, color='aliceblue')
浮動小数点数を二乗する	x ** 2
文字列を走査し、正規表現にマッチするか調べる	re.search(pattern, s)
線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
カテゴリ別に並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
JSONファイルの入力ストリームを辞書に変換する	json.load(fin)
option: グレー色を使用する	color = 'gray'
文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
ヒストグラムをリネン色を用いて描画する	plt.hist(データ列, color='linen')
option: フローラルホワイト色を使用する	color = 'floralwhite'
グラフで使うフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
リストとリストの散布図にrgbの左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ガウス過程としてクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
折れ線グラフの下三角印の色を設定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
タイムスタンプデータが金曜日か	aDatetime.weekday() == 4
カウンタのキーのカウント	aCounter[element]
実数が正か調べる	x > 0
棒グラフをデピンク色として描画する	plt.bar(データ列x, データ列y, color='deeppink')
バイナリ書き込みモードを用いてファイルパスをオープンする]	open(filepath, mode='wb')
データフレームを各列と列の組み合わせ毎にグループ化し、合計を計算する	df.groupby([column, column2], as_index=False).sum()
組の要素をソートする	sorted(aTuple)
別の文字列を用いて文字列を置換する	s.replace(sub, newsub)
散布図に▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
nxn2の2次元リスト	[[0] * n for _ in range(n2)]
列のユニークな要素数を見る	ds.nunique()
スカイブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
バイトオーダを確認する	sys.byteorder
プログラムの実行を正常に終了する	sys.exit(0)
データフレームの行を範囲指定して選択する	df[start:end]
マッピングの項目名一覧	list(aDict)
因子分析を行う	model = sklearn.decomposition.PCA(n_components=n)
option: ライトシアン色を用いる	color = 'lightcyan'
オブジェクトの固有のID	id(obj)
ファイルパスをEUCとしてオープンする]	open(filepath, encoding='euc_jp')
文字列の開始位置から終了位置までの範囲で部分文字列の出現	s.count(sub, start, end)
ふたつの集合のいずれか一方だけの集合を使う	aSet.symmetric_difference(aSet2)
option: マルーン色を用いる	color = 'maroon'
ファイルをバイナリ用にオープンする]	open(filepath, mode='rb')
ダークオリーブグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
折れ線グラフのダイアモンドマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
キューの末尾に数値を追加する	deq.append(element)
オブジェクトの無限の列	itertools.repeat(element)
ディレクトリをPythonパスに追加する	sys.path.append(dir)
文字列中に部分文字列がいくつか含まれるかカウントする	s.count(sub)
リストの末尾のn要素を除く	aList[:-n]
散布図のポイント印の色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
option: コーンフラワーブルーにグラフの色を設定する	color = 'cornflowerblue'
文字列でフォーマットして日付時刻データを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
グラフ中の(x,y)の場所にデータラベルを表示する	plt.legend(loc=(x, y))
option: フォントの色をダークバイオレットに設定する	color = 'darkviolet'
双方向キューをリストにする	list(deq)
ヒストグラムの色をビスクに指定する	plt.hist(データ列, color='bisque')
散布図の△印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームから型のカラムを抽出する	df.select_dtypes(ty)
散布図をゴールド色として描画する	plt.scatter(データ列x, データ列y, color='gold')
プロットの描画で明るく色テーマを使う	sns.set(pallete='bright')
キーがマッピングに存在していない場合、要素を追加する	aDict.setdefault(key, element)
Pandasで、フォーマットとしてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームのリストカラムのNaNを最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
カラムの欠損値を後の行の値で補う	ds.fillna(method='bfill')
タイムスタンプデータが水曜日かどうか調べる	aDatetime.weekday() == 2
データフレームのカラムの中に存在する文字列と日付データの数を数える	df[col].isin([value, value2]).sum()
折れ線グラフの色をオールドレースに変更する	plt.plot(データ列x, データ列y, color='oldlace')
Pandasで、タイムスタンプ型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
ライトスチールブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データ列の推移を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフを半透明の実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
折れ線グラフをターコイズ色を使って描画する	plt.plot(データ列x, データ列y, color='turquoise')
線グラフをサドルブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
option: ダークマゼンタ色を用いる	color = 'darkmagenta'
データフレームの未入力値を後の行の値で埋める	df.fillna(method='bfill')
option: グラフの色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
プロットの背景色を暗くする	sns.set(style='darkgrid')
折れ線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ヒストグラムをシーグリーン色として描画する	plt.hist(データ列, color='seagreen')
option: コーンズシルクにフォントの色をセットする	color = 'cornsilk'
リストと配列の散布図を描画し、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
nの16進文字列	hex(n)[2:]
option: スカイブルー色を用いる	color = 'skyblue'
読み込みモードでファイルパスをオープンする]	open(filepath, mode='r')
ライトスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
今日が月曜日か確認する	datetime.datetime.today().weekday() == 0
ホワイトスモーク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
ヒストグラムをモカシン色として描画する	plt.hist(データ列, color='moccasin')
バイオレット色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
option: ベージュを使う	color = 'beige'
折れ線グラフの色を耐火レンガに指定する	plt.plot(データ列x, データ列y, color='firebrick')
パウダーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
散布図の左三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
折れ線グラフをプラム色として描画する	plt.plot(データ列x, データ列y, color='plum')
バリーウッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
日付時刻データにn日分加える	aDatetime + datetime.timedelta(days=n)
整数を小数点以下で丸める	round(x, n)
最大値でデータ列の未入力値を置換する	ds.fillna(ds.max())
文字列を最初の部分文字列で分けた時の後半の文字列	s.partition(sub)[-1]
ヒストグラムの色をコーンズシルクに指定する	plt.hist(データ列, color='cornsilk')
散布図にポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
日付データが月曜日かどうか調べる	aDate.weekday() == 0
データフレームとデータ列を連結する	pd.concat([df, ds], axis=1)
nとn2が同じ値か調べる	n == n2
データフレームの欠損値を平均で補う	df.fillna(df.mean())
ベクトルの要素数を求める	aArray.size
スタッキングとして回帰分析を行う	sklearn.ensemble.StackingRegressor()
リストを緑色にする	f'\033[32m{value}\033[0m'
1からNまでの行列を作成する	np.arange(1, N+1)
日本語が文字列に含まれるかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
インディアンレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
option: ラインスタイルを点線に変更する	linestyle = 'dotted'
Pythonインタプリタの実行ファイルの絶対パスを知る	sys.executable
イテラブルの全順列を得る	itertools.permutations(iterable)
破線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ロイヤルブルーにヒストグラムの色を指定する	plt.hist(データ列, color='royalblue')
option: ロージーブラウン色を使用する	color = 'rosybrown'
リストを境界値として列をビン分割する	pd.cut(ds, aList)
エポック秒をタイムスタンプに変換する	datetime.datetime.fromtimestamp(timestamp)
折れ線グラフの色をゲインズボロに指定する	plt.plot(データ列x, データ列y, color='gainsboro')
option: バッファリングのサイズを変更する	buffering = 4096
プロットの色を濃くする	sns.set(pallete='deep')
ライトグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
データフレームを1000の位で四捨五入して、整数型にする	df.round(-3).astype(int)
ヒストグラムの色を淡い茶色に設定する	plt.hist(データ列, color='tan')
イテラブルのイミュータブルな集合を作る	frozenset(iterable)
グリーンイエロー色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
option: ミディアムシアグリーンにグラフの色を変更する	color = 'mediumseagreen'
ミントクリーム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
ミディアムスレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの△マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
オブジェクトは数値	isinstance(obj, (int,float))
ダークシアグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
散布図を右三角印で描画する	plt.scatter(データ列x, データ列y, marker='>')
青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
データフレームのNaNを最小値で補う	df.fillna(df.min())
option: イエローグリーンにフォントの色を指定する	color = 'yellowgreen'
データフレームを列名リストでによって降順に並べる	df.sort_values(by=column, ascending=False)
リストと数列について散布図を描画して、バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列が全て印字できるかどうか調べる	s.isprintable()
実数を十六進文字列に変換する	x.hex()
散布図の▼マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
無限に数え上げるする	itertools.count()
要素が集合の要素か調べる	element in aSet
名前付きタプルを使う	import collections
自然数個からk個取り出したときの並べ方の総数	math.perm(n, k)
データフレームの内容を調べる	df.head()
整数nがリストのどれかかどうか	n in aList
option: ▽印を描画する	marker = 'v'
データフレームから重複するデータを残さず、消す	df.drop_duplicates(keep=False)
配列とリストについて散布図を描画して、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
横棒グラフを淡いピンク色色を使って描画する	plt.barh(データ列x, データ列y, color='lightpink')
線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
リストの散布図を描く	plt.scatter(データ列x, データ列y)
散布図に黒い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
散布図の三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
散布図をrgbの右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列の中でパターンにマッチした文字列をリストに変換する	re.findall(pattern, s)
リストとデータ列について散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgrey')
要素が集合に含まれないか確認する	element not in aSet
赤いバツマーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
横棒グラフを描画し、、中央寄せする	plt.barh(ラベル列, データ列, align='center')
データフレームのリスト列の母標準偏差	df[aList].std(ddof=0)
全要素を０で初期化した３二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
グラフに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
option: エンコーディングを文字コードtextにセットする	encoding = text
カーネル密度推定プロット描画でを用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
タイムスタンプデータにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
フローラルホワイト色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
option: カーキ色を使用する	color = 'khaki'
データ列とリストの散布図を描画し、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: 色をプラムに設定する	color = 'plum'
ヒストグラムをディープスカイブルー色として描画する	plt.hist(データ列, color='deepskyblue')
データフレームの中の列と列に重複があれば、落とす	df.drop_duplicates(subset=column)
実数の自然対数を計算する	math.log(x)
リストを分割数nでビニングしてnamesのラベルをつける	pd.cut(aList, n, labels=names)
option: 最初の行をヘッダに増やす	header = 0
リストとリストについての散布図にrgbの丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
nが1、もしくは2もしくは3に等しい	n == 1 or n == 2 or n == 3
分類モデルの残差を計算する	目的変数 - model.predict(説明変数)
JSONLファイルにデータフレームをインデックスを付けずに保存する	df.to_csv(filename, index=None)
データフレームから型リストで指定したデータ型の列を除外する	df.select_dtypes(exclude=typeList)
散布図にダイアモンドマーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
２次元リストをフラット化する	sum(aList)
散布図を左三角印で描画する	plt.scatter(データ列x, データ列y, marker='<')
ダークサーモン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
option: グラフの色をホットピンクにする	color = 'hotpink'
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を計算する	df.groupby([column, column2], as_index=False).max()
空の階層化マップ	collections.ChainMap()
今日の日付時刻	datetime.datetime.today()
日付時刻データの年数を使う	aDatetime.year
ふたつのリストの積集合を求める	list(set(aList) & set(aList2))
線グラフをシーグリーン色として描画する	plt.plot(データ列x, データ列y, color='seagreen')
x軸の最大・最小値を変更する	plt.xlim(最小値, 最大値)
散布図の四角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
折れ線グラフを星印として描画する	plt.plot(データ列x, データ列y, marker='*')
線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
文字列中に非アルファベットが含まれる	any(not c.isalpha() for c in s)
黒い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
数列とリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
option: グラフの色をゲインズボロに指定する	color = 'gainsboro'
色付きの実線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ファイルから全てのシートを読む	pd.read_excel(filename, sheet_name=None)
数列とリストの散布図を描画してマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
集合に列の要素を全て追加する	aSet.update(iterable)
赤いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
データ列の欠損値を平均に指定する	ds.fillna(ds.mean())
二つ並べて箱ひげ図をプロットする	plt.boxplot([データ列, データ列])
option: ラベンダーブラッシュを使用する	color = 'lavenderblush'
三つ並べて柱状グラフを描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
黒いダイアモンドマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームを列名リストを用いて降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
オブジェクトのバイトサイズを知る	sys.getsizeof(obj)
青緑色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
棒グラフをダークターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームの列のNaNを直後の値で置き換える	df[col].fillna(method='bfill')
ヒストグラムをダークゴールデンロッド色として描画する	plt.hist(データ列, color='darkgoldenrod')
棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
折れ線グラフを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ふたつの集合が互いに素かどうか調べる	aSet.isdisjoint(aSet2)
グリーンイエローにヒストグラムの色を変更する	plt.hist(データ列, color='greenyellow')
折れ線グラフの色をベージュにする	plt.plot(データ列x, データ列y, color='beige')
折れ線グラフの色を黄色に指定する	plt.plot(データ列x, データ列y, color='yellow')
散布図をライトブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightblue')
リストをn個に分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
option: 線の幅を3.0ポイントに指定する	linewidth = 3.0
棒グラフをやわらかい青色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
両端キュー中の要素の数をカウントする	deq.count(element)
二つの値を文字列で区切って表示する	print(value, value2, sep=s)
リストを境界値としてデータフレームの中の列をビン分割する	pd.cut(df[col], aList)
データフレームの欠損値を直前の値で補う	df.fillna(method='ffill')
日付時刻データが日曜日	aDatetime.weekday() == 6
タイムスタンプデータの秒	aDatetime.second
線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
グラフの横軸を対数目盛に変更する	plt.xscale('log')
辞書のコピーを作る	aDict.copy()
第二コマンド引数を調べる	sys.argv[1]
カンマ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
シスル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
列名リストによってデータフレームをまとめたグループ	df.groupby(columns)
二つの文字列は同じかどうかテストする	s == s2
逆双曲線正弦を計算する	math.asinh(x)
散布図をパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='purple')
散布図の印をダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
2つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
文字列の左端から部分文字列を除く	s.lstrip(sub)
文字列をシンボルにして変数にする	z = sympy.Symbol(s)
青い△マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
予測データのコンフュージョン・マトリックスを求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ひとつでも英数字が文字列内に含まれる	any(c.isalnum() for c in s)
データフレームの列の欠損値をxにセットする	df[col].fillna(x)
option: 色を耐火レンガに設定する	color = 'firebrick'
データ列の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
option: バイナリモードに変更する	mode = 'rb'
option: グラフの種類を実線にする	linestyle = 'solid'
横軸の目盛の値を変更する	plt.xticks(目盛りの値リスト)
赤いダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
棒グラフをオールドレース色を用いて描画する	plt.bar(データ列x, データ列y, color='oldlace')
コードポイントの最大値	sys.maxunicode
双方向キューの最大長	deq.maxlen
データフレームを各列と列の組み合わせ毎にグループ化し、、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
ヒストグラムをダークカーキ色として描画する	plt.hist(データ列, color='darkkhaki')
データフレームの中の未入力値がある行を削除する	df.dropna()
文字列がリストの要素でない	element not in aList
配列からサンプリングする	random.sample(iterable)
折れ線グラフをカーキ色として描画する	plt.plot(データ列x, データ列y, color='khaki')
両端キューのn番目に要素を途中追加する	deq.insert(n, element)
データフレームのリスト列の欠損値をメディアンに設定する	df[aList].fillna(df[aList].median())
折れ線グラフの左三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
データフレームを表示するとき列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
ライトゴールドロディイエロー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
横棒グラフをゲインズボロ色を用いて描画する	plt.barh(データ列x, データ列y, color='gainsboro')
縦棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
文字列を複数行対応としてパターンで区切る	re.split(pattern, s, flags=re.MULTILINE)
プロットにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
3変数の最小値	min(x, y, z)
折れ線グラフの△マーカーの色を変える	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームのカラムの記述統計量を求める	df[col].describe()
折れ線グラフの大バツ印を青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
中央値でデータ列をビン分割する	pd.qcut(ds, 2)
十六進数字を全て使う	string.hexdigits
オーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='orchid')
線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
分子と分母から分数を作る	fractions.Fraction(分子, 分母)
２変数の最大値	max(x, y)
貝殻にヒストグラムの色を変更する	plt.hist(データ列, color='seashell')
カラムの空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
データフレームの列がxより大きいデータを選ぶ	df[df[column] > x]
option: グラフの線の種類を一点鎖線に設定する	linestyle = 'dashbot'
ミディアムスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフの色をスレートブルーに変更する	plt.plot(データ列x, データ列y, color='slateblue')
1文字標準入力から読む	sys.stdin.read(1)
本日の日数を見る	datetime.datetime.today().day
白色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
折れ線グラフの色を青にセットする	plt.plot(データ列x, データ列y, color='blue')
option: ビスクにフォントの色をセットする	color = 'bisque'
エクセルファイルをエクセルファイルファイルから読み込む	pd.read_excel(filename)
数列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
０で全要素を初期化したブール型の行列を作成する	np.zeros(行数, 列数, dtype=np.int32)
横棒グラフをプラム色として描画する	plt.barh(データ列x, データ列y, color='plum')
option: レモンシフォンを使う	color = 'lemonchiffon'
データフレームを列を用いて整列する	df.sort_values(by=column)
ヒストグラムの色をフクシアに変更する	plt.hist(データ列, color='fuchsia')
タプルの全項目をクリアする	aDict.clear()
縦棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
文字列の開始位置から終了位置の間で部分文字列をカウントする	s.count(sub, start, end)
データフレームの尖度を計算する	df.skew()
散布図に赤い上三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
option: ブルーバイオレットを使用する	color = 'blueviolet'
ミディアムオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データフレームをインデックスによって昇順に整列する	df.sort_index(ascending=True)
組をリストに変換する	list(aTuple)
回帰分析を部分的最小二乗法で行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
教師データで線形回帰モデルを学習する	model.fit(説明変数, 目的変数)
option: パパイヤウィップにグラフの色を設定する	color = 'papayawhip'
option: グラフの色をパレットトルコイズに指定する	color = 'paleturquoise'
リストから行列を作る	np.array(aList)
空の多重集合	collections.Counter()
タン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
黒い四角マーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
空白で文字列を区切る	s.split()
ミディアムブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumblue')
縦棒グラフをアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='aquamarine')
ハッシュ値	hash(x)
データ列を100の位で四捨五入して整数にする	ds.round(-2).astype(int)
データフレームのカラムが正規分布からどれだけ、歪んでいるか見る	df[col].kurt()
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データ列を千の位で丸める	ds.round(-3)
タプルをnから順番付けする	enumerate(aTuple, start=n)
x座標の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
多次元尺度構成法を用いてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
データ列の要約統計量を求める	ds.describe()
数字が文字列内に含まれるか調べる	any(c.isdigit() for c in s)
ベージュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
文字列をマゼンタで表示できる文字列に変換する	f'\033[35m{value}\033[0m'
ヒストグラムの色をライトグレーにセットする	plt.hist(データ列, color='lightgray')
全要素を初期値で初期化した配列を作成する	np.full(要素数, 初期値, dtype=np.int)
ディムグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
データフレームの全列の散らばりを可視化する	sns.pairplot(df)
イテラブルとリストについての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
option: 色をインディゴに設定する	color = 'indigo'
option: データ型を指定する	dtype = np.int
本日をISO書式の文字列にする	datetime.datetime.today().isoformat()
タプルの末尾からn番目以前の部分を抽出する	aTuple[:-n]
ファイルを絶対パスにする	os.path.abspath(filepath)
部分文字列を文字列の接尾辞から取り除く	s.removesuffix(sub)
ふたつの辞書をマージする	aDict | aDict2
オブジェクトが整数型か調べる	isinstance(obj, int)
データフレームのリストカラムの値を正規表現patternでreplに置換する	df[aList].replace(pattern, repl, regex=True)
データフレームのリストカラムの中にある文字列の数を数える	df[aList].isin([value]).sum()
横棒グラフをフォレストグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='forestgreen')
偽陰性を避けたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
パラメータが無限大に近づくとき数値の極限値を計算する	sympy.limit(e, z, oo)
カデットブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
option: ペルーにグラフの色を設定する	color = 'peru'
イテラブルとリストについて散布図を描画して、マーカーをダイアモンドに変更する	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムの描画して正規化する	plt.hist(データ列, density=True)
線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
ケンドールでデータフレームの相関行列を算出する	df.corr(method='kendall')
データフレームのリスト列の各列間の相関係数を計算する	df[aList].corr()
オブジェクトに属性が存在するか	hasattr(obj, プロパティ名)
フクシア色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
ビスク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
集合の濃度を計算する	len(aSet)
ヒストグラムでデータフレームの列をプロットする	plt.hist(df[column])
タイムスタンプデータは何月か知る	aDatetime.month
破壊的にデータフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
option: 白にグラフの色を設定する	color = 'white'
折れ線グラフの△マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフのバツ印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
スクリプトファイルのディレクトリ名を使う	os.path.dirname(os.path.abspath(__file__))
小麦色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
散布図をデピンク色として描画する	plt.scatter(データ列x, データ列y, color='deeppink')
文字列の示す文字コードとしてファイルをオープンする]	open(filepath, encoding=s)
数式の変数に数値を代入する	e.subs(z, e2)
文字列全体が正規表現にマッチするか確認する	re.fullmatch(pattern, s)
デフォルトのエンコーディングを知る	sys.getdefaultencoding()
２つのデータフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
ミディアムスプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumspringgreen')
モデルの訓練を開始する	model.fit(説明変数, 目的変数)
データフレームの列がどの程度分散しているか確認する	df[col].var()
折れ線グラフに簡単な説明をつける	plt.plot(データ列x, データ列y, label='ラベル')
文字列の出力を改行せず行う	print(value, end='')
ライトグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
文字列の中で複数行対応として正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
option: フォントの色をトマトに変更する	color = 'tomato'
散布図を黒い▼マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
オブジェクトがバイト列かどうか調べる	isinstance(obj, bytes)
文字列の中のASCII限定として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフの右三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
横棒プロットの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
縦棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
データフレームの最初	df.head()
散布図の印の色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
タプル内の要素は少なくとも一つ真かどうか調べる	any(aTuple)
変数を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
本日の月	datetime.datetime.today().month
データフレームからカテゴリデータの列名リストを見る	df.select_dtypes('object').columns
nが奇数か	n % 2 == 1
ヒストグラムをコーンフラワーブルー色として描画する	plt.hist(データ列, color='cornflowerblue')
rgbのポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: ライム色を使用する	color = 'lime'
本日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
タプルをJSONフォーマットのインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
数字を全部見る	string.digits
疑似乱数を正規分布を用いて生成する	random.normalvariate(mu=0.5, sigma=0.2)
イエローグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='yellowgreen')
データフレームを百の位で丸めて、整数型にする	df.round(-2).astype(int)
クラス分類の予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データフレームのカラムを百の位で丸める	df[col].round(-2)
ダークシアン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
y座標の目盛りの表示値を変更する	plt.yticks(目盛りの値リスト)
マッピングのキーとそのエントリをペアとして取り出す	aDict.items()
ランダムにデータフレームからn行を選択する	df.sample(n)
ヒストグラムをフォレストグリーン色を用いて描画する	plt.hist(データ列, color='forestgreen')
RANSACとしてクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
option: カラムの名前を自動的な連番に設定する	header = None
散布図の星マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
データフレームを表示するとき、表示できる最大行数を減らす	pd.set_option('display.max_rows', n)
データフレームの列の値がx以下の行を抽出する	df[df[column] <= x]
ヒストグラムをホットピンク色を使って描画する	plt.hist(データ列, color='hotpink')
データフレームの指定された３つの列を抽出する	df[[column, column2, column3]]
タプルのn番目以降の要素を得る	aTuple[n:]
データフレームを列で並べ直して、行を振り直す	df.sort_values(columns).reset_index(drop=True)
ランダムに表データから選択する	df.sample()
棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
淡いピンク色にヒストグラムの色を指定する	plt.hist(データ列, color='lightpink')
列と列の重複を削除する	df.drop_duplicates(subset=column)
棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
option: シーグリーンを用いる	color = 'seagreen'
option: グラフの色を貝殻にセットする	color = 'seashell'
赤い丸印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
ファイルを書き込みモードとして開く]	open(filepath, mode='w')
散布図の四角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データフレームの内で何行、重複するか見る	df.duplicated().sum()
柱状グラフを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
列の各データが何回出現するか確認する	df[col].value_counts()
パールバイオレットレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
xが一桁の数	-9 <= x <= 9
データフレームのカラムが文字列で始まらない行を取り出す	df[not df[column].str.startswith(s)]
データフレームを二つの列でグループ化し、記述統計量を求める	df.groupby(['A', 'B']).describe()
データフレームのリスト列を丸める	df[aList].round()
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightseagreen')
データフレームの列の空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
文字列の大文字小文字を逆にする	s.swapcase()
ヒストグラムをダークターコイズ色として描画する	plt.hist(データ列, color='darkturquoise')
０で全要素を初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
option: 色をフローラルホワイトに設定する	color = 'floralwhite'
部分文字列で文字列を最後から区切る	s.rsplit(sub)
ヒートマップでデータフレームの列と列の相関行列を描画する	sns.heatmap(df[[column, column2]].corr())
データフレームの欠損値を最大値に指定する	df.fillna(df.max())
折れ線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
パレットトルコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
シーケンスを文字列リストに変換して、'改行で一つにする	'\n'.join(map(str, iterable))
棒グラフをライトコーラル色を用いて描画する	plt.bar(データ列x, データ列y, color='lightcoral')
百分率付きの円グラフを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
二つの列によってデータフレームを並べ直して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
散布図をブラック色として描画する	plt.scatter(データ列x, データ列y, color='black')
折れ線グラフの色をスプリンググリーンにする	plt.plot(データ列x, データ列y, color='springgreen')
関数でデータフレームをまとめたグループ	df.groupby(関数)
出現頻度を可視化する	plt.hist(データ列)
リストとデータ列の散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
二つのオブジェクトが同一参照か	obj is obj2
青紫色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
カテゴリで色分けしてデータフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
データフレームの中で列に重複があるか確認する	df.duplicated(subset=column)
配列とリストについて散布図を描いて、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
散布図に左三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='<')
EUCとしてファイルパスを追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフの印を丸印にする	plt.plot(データ列x, データ列y, marker='o')
散布図をトマト色を用いて描画する	plt.scatter(データ列x, データ列y, color='tomato')
データフレームのリスト列の文字列を欠損値にする	df[aList].replace(s, np.nan)
ラベル付きの円グラフをプロットする	plt.pie(データ列, startangle=90, labels=ラベル列)
折れ線グラフの星マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
option: ダークグリーン色を使用する	color = 'darkgreen'
カウンタ間で共通部分	aCounter & aCounter2
option: ダークスラテグレーにグラフの色を設定する	color = 'darkslategray'
アンサンブル学習を使って回帰分析を行う	sklearn.ensemble.VotingRegressor()
折れ線グラフの色をライトスレイグレーにセットする	plt.plot(データ列x, データ列y, color='lightslategray')
折れ線グラフの色をミディアムアクアマリンに指定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: グラフの色をライトコーラルにセットする	color = 'lightcoral'
データフレームのインデックスの名前をまとめて、nameからname2に変更する	df.rename(index={name: name2})
棒グラフをシアン色として描画する	plt.bar(データ列x, データ列y, color='cyan')
データフレームの中の列をn個にビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列からformatのパターンを用いて日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
線グラフをグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='green')
マッピングから項目名の値	aDict.get(key)
数値を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
棒グラフをホワイトスモーク色を用いて描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
option: 小麦色に色を設定する	color = 'wheat'
折れ線グラフの色をミディアムシアグリーンにセットする	plt.plot(データ列x, データ列y, color='mediumseagreen')
BOM付きでファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
箱ひげ図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
オブジェクトはタプルの要素	element in aTuple
オレンジレッド色でヒストグラムを描画する	plt.hist(データ列, color='orangered')
リストを縦棒グラフにする	plt.bar(ラベル列, データ列)
散布図をオリーブ色を用いて描画する	plt.scatter(データ列x, データ列y, color='olive')
ヒストグラムを紺碧色として描画する	plt.hist(データ列, color='azure')
option: グラフの色をコーラルに変更する	color = 'coral'
文字列を走査し、正規表現にASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
option: 色をオーキッドにセットする	color = 'orchid'
データフレームをにバイオリン図を用いて描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図の左三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
行列の型	aArray.dtype()
オプションでファイルを使う	file = sys.open(filename, 'w')
縦棒プロットを描いてバーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
タプルをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
ヒストグラムをバリーウッド色を用いて描画する	plt.hist(データ列, color='burlywood')
実数が有限かどうか調べる	math.isfinite(x)
深紅色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
year年month月day日hour時のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour)
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
文字列を空白で区切って、列挙する	s.split()
データフレームの行がnの行を抽出する	df.loc[n]
データフレームのカラムを10の位で四捨五入して整数型にする	df[col].round(-1).astype(int)
逆順のスタック	reversed(deq)
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
タプルをn回連結する	aTuple * n
option: 淡いピンク色色を用いる	color = 'lightpink'
データフレームから指定された列を取り出す	df[[column]]
データ列を箱ヒゲ図で描く	plt.boxplot(データ列)
'A'列によってデータフレームをソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
option: グラフの色をライトグレーに指定する	color = 'lightgrey'
バギングを用いて回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
データフレームのカラムをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightgreen')
列'A'と列'B'をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
入力ストリームを一行ずつ読む	f.readline()
ヒストグラムの色をピーチパフにセットする	plt.hist(データ列, color='peachpuff')
線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
配列を分割数nでビン分割する	pd.cut(aArray, n)
FIXME:カテゴリーデータを出現頻度順に並べる	df['A'].value_counts().sort_index().index
option: スラグレー色を使用する	color = 'slategrey'
option: エンコーディングをBOM付きにセットする	encoding = 'utf_8_sig'
データフレームのリスト列を100の位で丸めて整数型にする	df[aList].round(-2).astype(int)
配列の形	aArray.shape
縦棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
シルバー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
破線に線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
ヒストグラムを濃いシアン色として描画する	plt.hist(データ列, color='darkcyan')
散布図をオリベドラブ色を用いて描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
マップの内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
左三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
プロットの凡例の位置を(x,y)に指定する	plt.legend(loc=(x, y))
ファイル名がTSVファイルかどうか	filename.endswith('.tsv')
ダークオレンジにヒストグラムの色をセットする	plt.hist(データ列, color='darkorange')
整数最小公倍数を求める	math.lcm(n, n2)
データフレームを関数の値によって集計して列挙する	[(name, group) for name, group in df.groupby(関数)]
事前にパターンをコンパイルする	re.compile(pattern)
option: モカシンに色を変更する	color = 'moccasin'
option: マーカーを右三角に変える	marker = '>'
option: ダークブルー色を用いる	color = 'darkblue'
イテラブルを更新不能なセットにする	frozenset(iterable)
リストと配列の散布図に赤い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
データ列を円プロットにする	plt.pie(データ列, startangle=90)
ガウス過程分類モデルを準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
配列とリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
散布図をシャルトリューズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
散布図のマーカーを△にする	plt.scatter(データ列x, データ列y, marker='^')
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
棒グラフをダーク・スラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
リスト中の要素が少なくともひとつ真か	any(aList)
安全に文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
パールバイオレットレッドにヒストグラムの色を指定する	plt.hist(データ列, color='palevioletred')
リストとリストについて散布図を描いて、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
イエローグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
文字列の先頭から不要な空白やタブを消す	s.lstrip()
ファイルを読み込みモードとして開き]、fとする	f = open(filepath, mode='r')
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
散布図を黒い丸マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームのそれぞれのグループごとの個数を計算する	df.groupby(column).count()
線グラフをスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='skyblue')
ライトサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='lightsalmon')
データフレームを表示するとき、表示可能な最大列数を減らす	pd.set_option('display.max_columns', n)
カラムがどの程度分散しているか見る	ds.var()
ヒストグラムの色をダーク・スラテグレーにセットする	plt.hist(データ列, color='darkslategrey')
折れ線グラフの色をグリーンイエローに指定する	plt.plot(データ列x, データ列y, color='greenyellow')
列ででデータフレームを降順にソートする	df.sort_values(by=column, ascending=False)
ヒストグラムをミディアムスプリンググリーン色を用いて描画する	plt.hist(データ列, color='mediumspringgreen')
nがn2と等しいか	n == n2
折れ線グラフの下三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
文字列の右側から空白を消す	s.rstrip()
nからn2を引いてnとする	n -= n2
option: 暗い赤にグラフの色を設定する	color = 'darkred'
散布図をミディアムオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
ピーチパフ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
ふたつの関係が真部分集合か調べる	aSet < aSet2
一方に含まれ他方に含まれない集合を使う	aSet.difference(aSet2)
部分文字列を文字列の末尾から見つける	s.rfind(sub)
文字列中の小文字を大文字にする	s.upper()
大バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
option: ダークゴールデンロッド色を用いる	color = 'darkgoldenrod'
リストとリストについて散布図を描画し、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
横棒グラフをブラック色として描画する	plt.barh(データ列x, データ列y, color='black')
プロットの縦横を変更する	plt.figure(figsize=(横幅, 高さ))
データフレームのカラムの未入力値をメディアンに設定する	df[col].fillna(df[col].median())
タン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
リストから文字列を除く	aList.remove(element)
赤い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
プロットを明るくする	sns.set(pallete='bright')
組の末尾のn要素を取り除く	aTuple[:-n]
ライトスカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightskyblue')
ヒストグラムの色をオールドレースに変更する	plt.hist(データ列, color='oldlace')
散布図に黒い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='k')
nが3の倍数か確認する	n % 3 == 0
空のロジスティック回帰モデルを準備する	model = sklearn.linear_model.LogisticRegression()
折れ線グラフに菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D')
オブジェクトが関数か	callable(obj)
線を色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームのカラムは何月か調べる	df[col].dt.month
文字列中の部分文字列を新しい文字列に全て置き換える	s.replace(sub, newsub)
パレットを淡くする	sns.set(pallete='muted')
折れ線グラフをシスル色を用いて描画する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
データフレームの未入力値を直前の値に設定する	df.fillna(method='ffill')
データ列は何月か確認する	ds.dt.month
線グラフをペールグリーン色として描画する	plt.plot(データ列x, データ列y, color='palegreen')
nのバイト長	(n.bit_length() + 7) // 8
配列と同じ大きさの空ベクトルを作る	np.empty_like(aArray)
JSON文字列を読み込む	json.loads(jsonString)
今日が水曜日かテストする	datetime.datetime.today().weekday() == 2
新しいリッジ回帰モデルを新規作成する	model = sklearn.linear_model.Ridge(alpha=正則化項)
データフレームの各カテゴリごとの散布図に線形回帰を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
折れ線グラフをライトスチールブルー色を使って描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
書き込み用にファイルを開いて]fとする	f = open(filepath, mode='w')
配列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
nが一桁の数かどうか調べる	-9 <= n <= 9
option: バリーウッドにグラフの色を変更する	color = 'burlywood'
配列とリストの散布図に赤い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
連続したベクトルの作成する	np.arange(開始値, 終了値, 等差)
折れ線プロットを描画する	plt.plot(データ列x, データ列y)
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
文字列全体を大文字・小文字を無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: グラフの色をシーグリーンに指定する	color = 'seagreen'
正規分布に基づく確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
option: コロンをセパレータで用いる	sep = ':'
３つ並べて数列をヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
散布図に黒い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='k')
八進数字を全部求める	string.octdigits
option: ミディアムオーキッドを使う	color = 'mediumorchid'
option: 文字列を区切りで使用する	sep = s
散布図に下三角印を使う	plt.scatter(データ列x, データ列y, marker='v')
辞書をインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
散布図を黒い星マーカーで描く	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームのリスト列を四捨五入して、整数型にする	df[aList].round().astype(int)
棒グラフをスノー色を用いて描画する	plt.bar(データ列x, データ列y, color='snow')
データフレームのカラムを四捨五入して、整数にする	df[col].round().astype(int)
横棒グラフをナバホホワイト色として描画する	plt.barh(データ列x, データ列y, color='navajowhite')
タブ区切りでJSONLファイルにデータフレームを書き込む	df.to_csv(filename, sep='\t')
ディムグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='dimgray')
数が負の数かどうか確認する	x < 0
ヒストグラムの色をスレートブルーに指定する	plt.hist(データ列, color='slateblue')
線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
データフレームの最後n行を抽出する	df.tail(n)
文字列の大文字と小文字を逆にする	s.swapcase()
キューをクリアする	deq.clear()
カウンタからタプルをカウントして引く	aCounter.subtract(iterable)
ネイビー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
辞書に要素を項目名として加える	aDict[key] = element
線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
ブースティングとして回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
option: パールゴールデンロッドに色を設定する	color = 'palegoldenrod'
横棒グラフを耐火レンガ色を用いて描画する	plt.barh(データ列x, データ列y, color='firebrick')
浮動小数点数を切り下げて整数に変換する	math.floor(x)
書き込み用にEUCでファイルをオープンする]	open(filepath, mode='w', encoding='euc_jp')
折れ線グラフのバツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()//60
行列の累積和	np.cumsum(aArray)
タプルの合計	sum(aTuple)
線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
日付時刻データがタイムスタンプデータと同時か	aDatetime == aDatetime2
ヒストグラムの色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
線グラフをロージーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='rosybrown')
文字列の開始位置以降に部分文字列が含まれない	s.find(sub, start) == -1
データフレームのリスト列を千の位で丸める	df[aList].round(-3)
変数について数式の微分を求める	sympy.diff(e, z)
最大値・最小値で乱数を算出する	random.randint(最小値, 最大値)
左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<')
中央値でデータフレームのNaNを埋める	df.fillna(df.median())
option: グラフの色をシエナに変更する	color = 'sienna'
最大最小で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ヒストグラムを茶色色を用いて描画する	plt.hist(データ列, color='brown')
サポートベクター分類器を用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
オブジェクトの属性の値を値に設定する	setattr(obj, プロパティ名, 値)
option: マーカーをバツに変える	marker = 'x'
数式の数値を算出する	float(e)
option: どのカラムもインデックスにしない	index_col = None
横棒グラフをディープスカイブルー色を使って描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
プログラムの実行を異常停止する	sys.exit(1)
スラグレー色としてヒストグラムを描画する	plt.hist(データ列, color='slategray')
データフレームを列で分類して、各グループごとの標準偏差を求める	df.groupby(column).std()
実数がNaN	math.isnan(x)
算術計算ライブラリをインポートする	import math
コーンズシルク色を用いてヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
ゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
色差別なく色をグラフの描画で使う	sns.set(pallete='colorblind')
線グラフをライトコーラル色として描画する	plt.plot(データ列x, データ列y, color='lightcoral')
散布図でデータフレームを可視化して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
列を配列に変換する	df[column].values
円プロットを真円にする	plt.axis('equals')
ヒストグラムの色をアイボリーに指定する	plt.hist(データ列, color='ivory')
ライトグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
option: ディムグレー色を使用する	color = 'dimgray'
英字の小文字を全部見る	string.ascii_lowercase
列とリストをペアリングする	itertools.zip_longest(iterable, iterable2)
散布図を大バツ印で描画する	plt.scatter(データ列x, データ列y, marker='X')
ヒストグラムをライトスチールブルー色を用いて描画する	plt.hist(データ列, color='lightsteelblue')
データフレームのカラムの日を求める	df[col].dt.day
データフレームのカラムの欠損値を第二四分位数で補う	df[col].fillna(df[col].median())
マッピングのキーの一覧を得る	aDict.keys()
データフレームの重複した行を抽出する	df[df.duplicated(keep=False)]
折れ線グラフの色をディムグレーにセットする	plt.plot(データ列x, データ列y, color='dimgray')
辞書から最後の項目を取り出す	aDict.popitem()
日付データが日付データより先	aDate < aDate2
xが一桁の正の整数	0 <= x <= 9
回帰分析をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
標準エラーを用いる	sys.stderr
ラベンダーブラッシュにヒストグラムの色を変更する	plt.hist(データ列, color='lavenderblush')
整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int)
option: ライトイエロー色を使用する	color = 'lightyellow'
整数nを2進数文字列に変換する	bin(n)[2:]
散布図のバツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データ列の欠損値をxに減らす	ds.fillna(x)
黒い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
正規分布による累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
棒グラフをライトスレイグレー色を使って描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
タイムスタンプデータからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
Pandasで、データ列を日付データにする	pd.to_datetime(ds)
ドジャーブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
変数を赤色でプリントする	print(f'\033[31m{value}\033[0m')
データフレームの列と列の相関行列スピアマン相関係数を使ってを求める	df[[column, column2]].corr(method='spearman')
option: ライトイエローにグラフの色を設定する	color = 'lightyellow'
option: マーカーを大バツに変える	marker = 'X'
nがn2以上	n >= n2
タイムスタンプデータにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
ポイント印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
ミッドナイトブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
文字列の開始位置からと終了位置の間に部分文字列が含まれるかどうか調べる	s.find(sub, start, end) != -1
ヒストグラムをクリムゾン色として描画する	plt.hist(データ列, color='crimson')
ファイルの絶対パスを見る	os.path.abspath(filepath)
横棒グラフをスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='slateblue')
ホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
縦棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
タプルを昇順にソートする	sorted(aTuple, reverse=True)
リストを折れ線プロットで可視化する	plt.plot(データ列x, データ列y)
データフレームのカラムの中にいくつ欠損値が存在するか求める	df[col].isna().sum()
xの小数点以下'2'桁までの文字列にする	':.2f'.format(x)
列から最大長nの両端キューを作る	collections.deque(iterable, maxlen=n)
データフレームの列の各データ値の出現回数を求める	df[col].value_counts()
データフレームの列名をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
集合を更新不能なセットに変換する	frozenset(aSet)
シアンで数値をプリントする	print(f'\033[36m{value}\033[0m')
折れ線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームをグループ化しそれぞれの列に対し個数を計算する	df.groupby(column)[column2].count()
散布図に▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
option: 色をハニーデューに設定する	color = 'honeydew'
グラフの見栄えをよくする	import seaborn as sns
データフレームを'A'列によって昇順にソートし、更新する	df.sort_values(by='A', ascending=True, inplace=True)
縦棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフの▲マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
正則化付き単回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
リストの総和を求める	sum(aList)
カテゴリでグループ化して、データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ディープスカイブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
標準入力から1行読み込む	sys.stdin.readline()
option: ライトスレイグレーにフォントの色を設定する	color = 'lightslategrey'
ベクトルの最小	np.min(aArray)
データフレームのそれぞれのグループの最大値	df.groupby(column).max()
option: 箱ひげ図に平均を追記する	showmeans = False
散布図をオレンジ色を用いて描画する	plt.scatter(データ列x, データ列y, color='orange')
option: オーキッド色を用いる	color = 'orchid'
文字列の後ろから範囲を指定して部分文字列を探す	s.find(sub, start, end)
文字列を最後の部分文字列で二つに区切って、残りの文字列を使う	s.rpartition(sub)[-1]
双方向キューの中に値が含まれてるか調べる	element in deq
コマンド引数のリストを得る	sys.argv[1:]
リストのそれぞれを関数でフィルタする	map(func, iterable)
データフレームを各列と列の組み合わせ毎に集約して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
折れ線グラフを濃いシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
チョコレート色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
JSONLファイルにデータフレームを保存する	df.to_excel(filename)
option: 色をドジャーブルーに設定する	color = 'dodgerblue'
縦方向に二つのデータフレームをくっつける	pd.concat([df, df2], axis=0)
オブジェクトはリストクラス	isinstance(obj, list)
ヒストグラムの色を青緑に変更する	plt.hist(データ列, color='turquoise')
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
ユークリッド距離	math.dist(point, point2)
option: ダークグレー色を使用する	color = 'darkgray'
パールゴールデンロッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
データフレームの先頭n行を抽出する	df.head(n)
データフレームの列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
nがn2で割り切れないかどうか調べる	n % n2 != 0
折れ線グラフのバツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
白にヒストグラムの色を変更する	plt.hist(データ列, color='white')
イテラブルに列を続けたイテラブル	itertools.chain(iterable, iterable2)
赤い星マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='r')
カテゴリごとにデータフレームの棒グラフを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームの列の一意な値	df[col].unique()
行列の列ごとの最小を求める	np.min(aArray, axis=0)
スラグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
散布図をティール色を用いて描画する	plt.scatter(データ列x, データ列y, color='teal')
データ列を等量でn個に分割する	pd.qcut(ds, n)
整数nを符号付きでバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
最頻値でデータ列の欠損値を埋める	ds.fillna(ds.mode().iloc[0])
option: ライトゴールドロディイエローにフォントの色を設定する	color = 'lightgoldenrodyellow'
データフレームのカラムのタイムゾーンを日本にする	df[col].tz_convert('Asia/Tokyo')
ダークブルー色としてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
リストが空でないかどうか	len(aList) != 0
ダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D')
データフレームを各列毎にグループ化して、文字列という名前のグループを使う	df.groupby(column).get_group(s)
丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
predicateFuncがTrueとならないイテラブルの部分を取り出す	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムをインディアンレッド色を用いて描画する	plt.hist(データ列, color='indianred')
オブジェクトが論理値クラスのインスタンスか調べる	isinstance(obj, bool)
散布図の下三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
折れ線グラフの四角マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
散布図を赤い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
変数を黒色にする	f'\033[30m{value}\033[0m'
書き込みできるようにファイルをオープンする]	open(filepath, mode='w')
オブジェクトをイテレータに変換する	iter(obj)
散布図の右三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
平均線付き箱髭図を描く	plt.boxplot(データ列, meanline=True)
データフレームを複数の列を用いてによって破壊的に並べる	df.sort_values(by=column, inplace=True)
タブで区切って二つの変数をプリントする	print(value, value2, sep='\t')
アイボリー色でヒストグラムを描画する	plt.hist(データ列, color='ivory')
リストを太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
プロットのパレットを暗くする	sns.set(pallete='dark')
nがn2未満またはn3以上か	n < n2 or n >= n3
行列の差	aArray - aArray2
nがn2以下、または、n3以上かどうか調べる	n <= n2 or n >= n3
標準出力を即時表示する	sys.stdout.flush()
ロージーブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ベージュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
ファイルパスをUTF8で開く]	open(filepath, encoding='utf-8')
真上位集合	aSet > aSet2
線グラフをダークゴールデンロッド色を使って描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
小数点以下をn桁に指定する	pd.set_option('precision', n)
組中の文字列が最初に見つかるインデックス	aTuple.index(element)
行列の行ごとの最小を求める	np.min(aArray, axis=1)
勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
ヒストグラムの色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
option: マーカーの線幅を変える	markeredgewidth = 2.5
三つの変数を順にプリントする	print(value, value2, value3)
プログラムのファイル名	sys.argv[0]
散布図をサーモン色として描画する	plt.scatter(データ列x, データ列y, color='salmon')
カテゴリで色分けして、データフレームをに箱ひげ図を用いて描画する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
横棒グラフをタン色を用いて描画する	plt.barh(データ列x, データ列y, color='tan')
スタッキングとしてクラス分類をする	sklearn.ensemble.StackingClassifier()
データフレームのリスト列が正規分布からどの程度、尖っているか調べる	df[aList].skew()
データフレームの指定された列名一覧の列を選択する	df[columns]
イテラブル自身の長さnの順列を得る	itertools.permutations(iterable, n)
option: 色をシルバーに設定する	color = 'silver'
レモンシフォン色としてヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
ユニークな各要素の頻度	np.unique(aArray, return_counts=True)
コーンズシルク色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
今日の年数を使う	datetime.datetime.today().year
データ列の中に日付データがあるか調べる	ds.isin([value])
オブジェクトはリストの要素か判定する	element in aList
dateStringをdatetime64型にする	pd.to_datetime(dateString)
折れ線グラフの色をミディアムスレートブルーに変更する	plt.plot(データ列x, データ列y, color='mediumslateblue')
アルファベットから一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
ライム色でヒストグラムを描画する	plt.hist(データ列, color='lime')
ライトサーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
リストの変遷を赤い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフの△マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ヒストグラムの色をブランチドアーモンドに変更する	plt.hist(データ列, color='blanchedalmond')
ヒストグラムを実線で描く	plt.hist(データ列, linestyle='solid')
データフレームの列を折れ線プロットとして可視化する	plt.plot(df[column], df[column])
ベクトルの内積を求める	np.dot(aArray, aArray2)
option: マゼンタ色を用いる	color = 'magenta'
データ列の時を使う	ds.dt.hour
配列を2回あわせたデカルト積	itertools.product(iterable, repeat=2)
横棒グラフをターコイズ色を使って描画する	plt.barh(データ列x, データ列y, color='turquoise')
折れ線グラフの右三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームの列の文字列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
option: レベッカパープルを使う	color = 'rebeccapurple'
データフレームを列でグループ分けして、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
文字列の先頭で正規表現にASCII限定としてマッチするか調べる	re.match(pattern, s, flags=re.ASCI)
コーンズシルク色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
折れ線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
右三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='>')
option: オールドレース色を使用する	color = 'oldlace'
文字列の接頭辞が部分文字列か確認する	s.startswith(sub)
option: スチールブルー色を用いる	color = 'steelblue'
行列を平坦化する	aArray.flatten()
ヒストグラムをビン数を設定して描画する	plt.hist(データ列, bins=区関数)
線グラフの色をオレンジに変更する	plt.plot(データ列x, データ列y, color='orange')
option: ライトグリーン色を用いる	color = 'lightgreen'
折れ線グラフを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
タプル内の要素は全て真か調べる	all(aTuple)
option: namesをカラムの名前に変更する	names = names
サブセットか調べる	aSet.issubset(aSet2)
表データを関数によってグループ化し要約統計量を算出する	df.groupby(関数).describe()
nがn2の倍数でないか確認する	n % n2 != 0
時刻を使う	import datetime
オブジェクトがタプルクラスのインスタンスか確認する	isinstance(obj, tuple)
折れ線グラフの色をクリムゾンにする	plt.plot(データ列x, データ列y, color='crimson')
棒グラフをマルーン色を用いて描画する	plt.bar(データ列x, データ列y, color='maroon')
変数を白色にする	f'\033[37m{value}\033[0m'
整数nがタプルの一つであるか	n in aTuple
nを二進数リテラルにする	bin(n)
option: ペールグリーン色を用いる	color = 'palegreen'
黒いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
nで乱数シードを固定化する	random.seed(n)
環境の名前を知る	sys.platform
散布図の下三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
JSONファイルのファイル入力を読み込んでdataとする	data = json.load(fin)
文字列を大文字・小文字を無視してパターンで分割する	re.split(pattern, s, flags=re.IGNORECASE)
option: 白を使う	color = 'white'
ヒストグラムの色をダークレッドに設定する	plt.hist(データ列, color='darkred')
線形回帰モデルの係数	model.coef_
データフレームとデータ列を横方向にくっつける	pd.concat([df, ds], axis=1)
リストと配列の散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
パールバイオレットレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
option: 改行をセパレータで使用する	sep = '\n'
リストが空かどうか	len(aList) == 0
リストと配列についての散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
散布図に星マーカーを用いる	plt.scatter(データ列x, データ列y, marker='*')
エクセルファイルファイルを読み込む	pd.read_excel(filename)
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
床数	math.floor(x)
option: ミディアムバイオレットレッド色を使用する	color = 'mediumvioletred'
データフレームの２つのカラムを並べて箱ひげ図を用いて可視化する	plt.boxplot([df['カラム'], df['カラム']])
キューのn番目を使う	deq[n]
双方向キューの値を左にn個分ローテンションする	deq.rotate(-n)
ヒストグラムをレベッカパープル色を用いて描画する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフをイエローグリーン色として描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームのリスト列を1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
集合が空集合か調べる	len(aSet) == 0
保存するCSVファイルの小数点以下の桁数を変更する	df.to_csv(filename, float_format='%.3f')
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
ヒストグラムの色をスチールブルーに指定する	plt.hist(データ列, color='steelblue')
nからn2までの整数列を使う	list(range(n, n2+1))
二つのデータフレームをジョインする	pd.merge(df, df2)
縦棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
グラフの色を指定する	sns.set(pallete=パレット名)
ヒストグラムと勾配ブースティングでクラス分類をする	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: ブラック色を使用する	color = 'black'
option: ライトブルー色を用いる	color = 'lightblue'
列をキーにして2つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
文字列がタプルに含まれるか確認する	element in aTuple
option: ヘッダをnamesに指定する	header = names
nが正の数か	n > 0
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgrey')
数値を水色で表示できる文字列にする	f'\033[36m{value}\033[0m'
数を十の位で四捨五入する	round(x, -1)
線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの下三角印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
棒グラフを濃い青色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: 濃い青にグラフの色を変更する	color = 'darkblue'
リストと数列についての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
マッピングのキーとその値を列挙する	aDict.items()
カウンタを高頻度方から列挙する	aCounter.most_common()
データフレームの行をリセットする	df.reset_index()
分数をインポートする	import fractions
棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgrey')
タブ区切りのファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: ローングリーン色を用いる	color = 'lawngreen'
ミディアムパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
小数点数の指数	math.frexp(x)[1]
データ列の折れ線グラフを右三角印として描画する	plt.plot(データ列x, データ列y, marker='>')
ふたつの集合の差	aSet.difference(aSet2)
文字列をユニコードエスケープでバイト列にする	s.encode(encoding='unicode_escape')
線グラフをスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='springgreen')
散布図に青いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
クラスのサブ型か確認する	issubclass(サブクラス, クラス)
整数の最大公約数を計算する	math.gcd(n, n2)
表を使う	import pandas as pd
縦棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
折れ線グラフの色をブランチドアーモンドにセットする	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: グラフの色をライムに変更する	color = 'lime'
データフレームをグループ化し、列に対し分散を求める	df.groupby(column)[column2].var()
文字列を緑色で表示できる文字列に変換する	f'\033[32m{value}\033[0m'
リストの先頭を捨てる	aList[1:]
文字列を黄色で表示する	print(f'\033[33m{value}\033[0m')
ロバストな線形回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
インディゴ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
オブジェクトがタプルの要素でないか調べる	element not in aTuple
正規化された度数分布図をプロットする	plt.hist(データ列, density=True)
日付データの曜日を整数で見る	aDate.weekday()
両端キューのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
ダークレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
ゲインズボロ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: グレーにフォントの色を設定する	color = 'gray'
等しい量になるようにリストをn個にビン分割する	pd.qcut(aList, n)
オブジェクトからプロパティを消す	delattr(obj, プロパティ名)
option: グラフの色を青緑にセットする	color = 'teal'
option: ナバホホワイトにグラフの色を設定する	color = 'navajowhite'
異なる列をキーにして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームを2つの列を用いて昇順に並べ、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
リストとリストについて散布図をプロットし、、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: 色をゴーストホワイトに設定する	color = 'ghostwhite'
ヒストグラムをオールドレース色として描画する	plt.hist(データ列, color='oldlace')
マップにマッピングの値を更新する	aDict.update(aDict2)
データ列を千の位で丸めて、整数型にする	ds.round(-3).astype(int)
折れ線グラフの印を下三角にする	plt.plot(データ列x, データ列y, marker='v')
線グラフをスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='slateblue')
本日の曜日を求める	datetime.datetime.today().weekday()
データフレームのリストカラムの分散を計算する	df[aList].var()
組の末尾の値	aTuple[-1]
リストを等しい量になるように分割数nで分割する	pd.qcut(aList, n)
横棒グラフを小麦色色として描画する	plt.barh(データ列x, データ列y, color='wheat')
折れ線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
パープル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
部分文字列が文字列の終了位置より前に含まれる	s.find(sub, 0, end) != -1
ダークバイオレット色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
横棒グラフをゴールド色を用いて描画する	plt.barh(データ列x, データ列y, color='gold')
ヒストグラムの色をダークバイオレットに変更する	plt.hist(データ列, color='darkviolet')
データフレームから列を三つのみ選択する	df[[column, column2, column3]]
アクア色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
2つのデータフレームを横方向にマージする	pd.merge(df, df2)
データフレームのリスト列の未入力値を直後の値に設定する	df[aList].fillna(method='bfill')
折れ線グラフをライトグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='lightgreen')
散布図をrgbの上三角マーカーで描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列を走査し、正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
折れ線グラフを青い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームのどの値が頻出か調べる	df.mode()
散布図を赤い四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s', c='r')
カラーバーを横向きに付ける	plt.colorbar(orientation='horizontal')
ベクトルの次元を変形する	aArray.reshape(行数, 列数)
折れ線グラフの大バツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
散布図を四角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='s')
横軸に説明を付ける	plt.xlabel('x軸ラベル')
文字列を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
リストとリストの散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
option: ミスティローズを使う	color = 'mistyrose'
ハローワールドと表示する	print('Hello World')
表データを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
オレンジ色を使ってヒストグラムを描画する	plt.hist(データ列, color='orange')
データフレームのカラムの欠損値を直後の値に変更する	df[col].fillna(method='bfill')
出力ストリーム全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
イテラブルの組み合せ	itertools.combinations(iterable, n)
値を青色でプリントする	print(f'\033[34m{value}\033[0m')
各列毎にデータフレームを集約して、列の最小値を求める	df.groupby(column)[column2].min()
折れ線グラフの色をドジャーブルーに指定する	plt.plot(データ列x, データ列y, color='dodgerblue')
データフレームのリストカラムの欠損値を第二四分位数で補う	df[aList].fillna(df[aList].median())
文字列リストを一つにする	''.join(aStringList)
改行を取り除いてファイルを一行ずつ読み込む	f.readline()
ヒストグラムの色を赤に変更する	plt.hist(データ列, color='red')
リストとリストについて散布図をプロットし、、四角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: パールバイオレットレッドにグラフの色を設定する	color = 'palevioletred'
最大値・最小値の範囲で一様な疑似乱数を得る	random.uniform(最小値, 最大値)
読み込みできるようにファイルを開く]	open(filepath, mode='r')
ブルーバイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
散布図をゴーストホワイト色として描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
データフレームから指定された2つの列を抽出する	df[[column, column2]]
JSONLファイルにデータフレームを小数点以下3桁まで書き込む	df.to_csv(filename, float_format='%.3f')
データフレームを列によってグループ化し、記述統計量を算出する	df.groupby(column).describe()
ライトシアン色を使ってヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
option: オールドレースに色をセットする	color = 'oldlace'
双方向キューは空か調べる	len(deq) == 0
リストと配列について散布図を描いて、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフの色をダークサーモンに指定する	plt.plot(データ列x, データ列y, color='darksalmon')
線グラフをライトゴールドロディイエロー色を使って描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
散布図の左三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームを列によって並べて、更新する	df.sort_values(by=column, inplace=True)
option: サンディーブラウン色を用いる	color = 'sandybrown'
option: シスル色を用いる	color = 'thistle'
散布図を左三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='<')
スチールブルー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
カウンタの要素を増やす	aCounter[element] += 1
option: ライムグリーンにグラフの色を設定する	color = 'limegreen'
グラフの縦軸の軸ラベルをuntitledに変更する	plt.ylabel('y軸ラベル')
ライトブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
JSONフォーマットの文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
要素が辞書の値に含まれていないかどうか調べる	element not in aDict.values()
option: オリーブにグラフの色を設定する	color = 'olive'
最後の部分文字列を用いて文字列を二分割する	s.rpartition(sub)
文字列中の平仮名を片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
折れ線グラフの色をアンティークホワイトに指定する	plt.plot(データ列x, データ列y, color='antiquewhite')
書式fmtでデータフレームのcollを日付データにする	pd.to_datetime(df[col], format=fmt)
グラフの描画で暗くカラーパレットを用いる	sns.set(pallete='dark')
データフレームを'A'列の値によってグループ化し、要約統計量を計算する	df.groupby('A').describe()
データ列の中に文字列と日付データがいくつあるか求める	ds.isin([value, value2]).sum()
文字列中に非数字が含まれるか調べる	any(not c.isdigit() for c in s)
option: フォントの色をミディアムパープルに設定する	color = 'mediumpurple'
散布図のマーカーの太さを変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
ふたつの集合のユニオン	aSet.union(aSet2)
表データから列を一つだけ選択する	df[[column]]
ゴーストホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
縦棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
ダークシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
タプル中の最初の文字列を探す	aTuple.index(element)
nの無限数列を求める	itertools.repeat(n)
ヒストグラムの色をローングリーンにセットする	plt.hist(データ列, color='lawngreen')
数式をパラメータについて微分する	sympy.diff(e, z)
オプションで、ファイルを出力先にする	file = sys.open(filename, 'w')
ラベンダー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
上限nの両端キューを作る	collections.deque(maxlen=n)
折れ線グラフの色を赤に変更する	plt.plot(データ列x, データ列y, color='red')
データフレームの列の文字列を未入力値に変換する	df[col].replace(s, np.nan)
散布図をパパイヤウィップ色として描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
データ列の欠損値を50パーセンタイルで埋める	ds.fillna(ds.median())
xが1、もしくは2もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
プロットに鉛直方向の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
リストと配列の散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフにバツ印を使う	plt.plot(データ列x, データ列y, marker='x')
散布図を黒いクロスマーカーとして描く	plt.plot(データ列x, データ列y, marker='x', c='k')
青紫色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
辞書を複製する	dict(aDict)
オブジェクトの属性の値をする	setattr(obj, プロパティ名, 値)
データ列が何日か確認する	ds.dt.day
データフレームのリストカラムの中に文字列と文字列があるか	df[aList].isin([value, value2])
データフレームの列を十の位で丸める	df[col].round(-1)
数式を浮動小数点数に変換する	float(e)
散布図にバツ印を使う	plt.scatter(データ列x, データ列y, marker='x')
option: ラベンダーブラッシュにフォントの色を設定する	color = 'lavenderblush'
文字列の両端から部分文字列を除去する	s.strip(sub)
マップから項目名の値をエラーなく見る	aDict.get(key, None)
エクセルデータファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
実線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='solid')
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgrey')
option: 色をミディアムターコイズに設定する	color = 'mediumturquoise'
データフレームのリストカラムの中にいくつがあるかカウントする	df[aList].isin([value]).sum()
nという名前のシートをエクセルファイルファイルから読む	pd.read_excel(filename, sheet_name=n)
折れ線グラフに黒い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
option: マーカーを星に指定する	marker = '*'
option: 色をライトブルーに変更する	color = 'lightblue'
データフレームを列によって並べ直して、新しいインデックスを加える	df.sort_values(columns).reset_index()
ベクトルの行ごとの最大値	np.max(aArray, axis=1)
浮動小数点数を実数にかける	x * y
横棒グラフをダークブルー色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
ヒストグラムをロージーブラウン色として描画する	plt.hist(データ列, color='rosybrown')
列のモード	ds.mode()
ヒストグラムの色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
sepを区切りとして文字列リストを連結する	sep.join(aStringList)
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
ファイルを開いて]、追加ストリームを使う	open(filepath, mode='a')
ペールグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
セットから要素を全て消す	aSet.clear()
ヒストグラムの色をモカシンにする	plt.hist(データ列, color='moccasin')
暗い赤色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
実数以上の最小の整数を求める	math.ceil(x)
浮動小数点数のn乗	x ** n
ヒストグラムの色をピンクに変更する	plt.hist(データ列, color='pink')
最大長を指定してスタック	collections.deque(maxlen=n)
既存のファイルパスを文字列の示すエンコーディングを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
ヒストグラムの色をブラウンに設定する	plt.hist(データ列, color='brown')
折れ線グラフの色をアクアにセットする	plt.plot(データ列x, データ列y, color='aqua')
フクシア色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
変数を下線付きにする	f'\033[4m{value}\033[0m'
表に重複があるか調べる	df.duplicated()
option: パールバイオレットレッド色を用いる	color = 'palevioletred'
実数で実数を除算して、切り捨てる	x // y
縦棒プロットを描く	plt.bar(ラベル列, データ列)
折れ線グラフの色をネイビーに指定する	plt.plot(データ列x, データ列y, color='navy')
行列のユニークな要素	np.unique(aArray)
整数nの8進文字列	oct(n)[2:]
option: フォントの色をダークカーキに指定する	color = 'darkkhaki'
折れ線グラフをブルーバイオレット色を使って描画する	plt.plot(データ列x, データ列y, color='blueviolet')
日付データが火曜日	aDate.weekday() == 1
プロットを論文用に設定する	sns.set(context='paper')
nが2で割り切れるか	n % 2 == 0
option: グラフの色をサドルブラウンに指定する	color = 'saddlebrown'
データフレームのデータを条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
データフレームから列を２つだけ選択する	df[[column, column2]]
棒グラフをレベッカパープル色として描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
黒い右三角マーカーを数列と配列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
データ列の欠損値を前の行の値で埋める	ds.fillna(method='ffill')
rgbの左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
双方向キューから最初の要素を取り除く	deq.remove(element)
データフレームの中の列を四分位数ごとに分割する	pd.qcut(df[col], 4)
xを文字列にしてファイルに書き込む	f.write(str(x))
線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
横棒グラフを貝殻色として描画する	plt.barh(データ列x, データ列y, color='seashell')
散布図の右三角印を赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
グラフの縦軸を対数目盛に変更する	plt.yscale('log')
ヒストグラムをローングリーン色として描画する	plt.hist(データ列, color='lawngreen')
列の中にあると日付データの合計を数える	ds.isin([value, value2]).sum()
データ列のpercent分位数を計算する	ds.quantile(percent/100)
線グラフの色をディープスカイブルーに変更する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームの中に文字列と文字列が含まれるかどうか	df.isin([value, value2])
折れ線グラフをオレンジ色として描画する	plt.plot(データ列x, データ列y, color='orange')
データフレームの相関行列をヒートマップとして描画する	sns.heatmap(df.corr())
アンティークホワイト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
文字列の右端からタブを取り除く	s.rstrip('\t')
ヒストグラムの色をオレンジレッドに指定する	plt.hist(データ列, color='orangered')
配列をn個にビン分割する	pd.cut(aArray, n)
数式のインテグラルを行う	sympy.integrate(e)
分類モデルのPPVを算出する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
n＋n2	n + n2
ヒストグラムの色をトマトに変更する	plt.hist(データ列, color='tomato')
折れ線グラフの大バツマーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
改行なしに二つの変数を表示する	print(value, value2, end='')
文字列を黄色で表示できる文字列にする	f'\033[33m{value}\033[0m'
K最近傍法としてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
二つのリストから辞書を作る	dict(zip(aList, aList2))
ブール型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int32)
option: ミッドナイトブルーを使う	color = 'midnightblue'
データフレームの信頼区間をプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
2を底とする浮動小数点数の対数	math.log2(x)
ライトグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
ゼロ埋めされた複素数型の配列を作成する	np.zeros(要素数, dtype=bool)
折れ線グラフの色をブラックにする	plt.plot(データ列x, データ列y, color='black')
nを八進数表現に変換する	oct(n)
ライトブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
option: アクアマリンを使う	color = 'aquamarine'
ナバホホワイト色でヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
文字列がPythonのキーワードか	keyword.iskeyword(s)
ダークグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkgreen')
シーグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
散布図に赤いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
ミディアムアクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
散布図にrgbの丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
バリーウッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
最大値でデータフレームのリストカラムのNaNを置換する	df[aList].fillna(df[aList].max())
データフレームを'A'列ごとに集約して、列挙する	[(name, group) for name, group in df.groupby('A')]
行列の列ごとの最大を求める	np.max(aArray, axis=0)
日付データの月数を求める	aDate.month
グラフにグリッド線を付ける	plt.grid(True)
ミディアムパープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
ロイヤルブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
プロットの用途をスライドに設定する	sns.set(context='talk')
文字列をカンマで区切って、文字列リストに変換する	s.split(',')
y軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
文字列がひらがな	('ぁ' <= ch <= 'ん')
option: カンマを区切りで用いる	sep = ','
ヒストグラムをブラック色として描画する	plt.hist(データ列, color='black')
option: 色をディムグレーに変更する	color = 'dimgray'
rgbのクロスマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: 読み込むシート名をnamesに設定する	sheet_name = names
線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
データ列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
行列の列ごとの平均	np.mean(aArray, axis=0)
文字列がタイトル大文字小文字	s.istitle()
縦軸にラベルをつける	plt.ylabel('y軸ラベル')
ライトスチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
文字列として列を連結する	''.join(map(str, iterable))
配列の列ごとの合計	np.sum(aArray, axis=0)
折れ線グラフの下三角印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
文字列が文字列より辞書順で後か確認する	s > s2
リストと数列について散布図を描いて、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
option: フォントの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
文字列は数値かどうか調べる	s.isnumeric()
文字列中の部分文字列を新しい文字列に回数を制限して置換する	s.replace(sub, newsub, n)
配列の平均値を求める	np.mean(aArray)
floatの最小値	sys.float_info.min
線グラフの色をミディアムターコイズに指定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームの欠損値を中央値にセットする	df.fillna(df.median())
ファイルパスをバイナリ書き込み用にオープンして]、fとする	f = open(filepath, mode='wb')
散布図のクロスマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
option: 赤色を用いる	color = 'red'
下三角マーカーを用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
nが-9以上、9以下	-9 <= n <= 9
折れ線グラフをバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームの列が正規表現文字列にマッチするデータを選択する	df[df[column].str.match(s)]
散布図に赤いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
黒い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
文字列が漢字か	('\u4E00' <= ch <= '\u9FD0')
ヒストグラムの色をライムグリーンにセットする	plt.hist(データ列, color='limegreen')
ファイルパスを開き]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
多次元データをMSDで淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
option: グラフの色をピーチパフに指定する	color = 'peachpuff'
インディゴにヒストグラムの色を設定する	plt.hist(データ列, color='indigo')
タイムスタンプデータが木曜日か調べる	aDatetime.weekday() == 3
option: ミントクリーム色を使用する	color = 'mintcream'
書き込みできるようにUTF8としてファイルパスをオープンする]	open(filepath, mode='w', encoding='utf-8')
スカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
グラフから格子線を消す	plt.grid(False)
0から始まる無限な整数リストを得る	itertools.count()
リストと数列についての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームのカラムの年を求める	df[col].dt.year
ボックスチャートを描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
ダークオリーブグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkolivegreen')
ヒストグラムを貝殻色として描画する	plt.hist(データ列, color='seashell')
グラフの見栄えをデフォルトでイイ感じに設定する	sns.set()
横棒グラフをミディアムアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
n×n2	n * n2
リストを引数として展開して出力する	print(*aList)
方程式として数式のパラメータの解を算出する	sympy.solve(e, z)
ダークスラテグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkslategray')
線グラフをサーモン色として描画する	plt.plot(データ列x, データ列y, color='salmon')
指定した値としてデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
プロットで用いる横軸のラベルを設定する	plt.xlabel('x軸ラベル')
実数の天井を求める	math.ceil(x)
パウダーブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
オリーブ色としてヒストグラムを描画する	plt.hist(データ列, color='olive')
ヒストグラムの色をベージュに指定する	plt.hist(データ列, color='beige')
データフレームから列を４つだけ選択する	df[[column, column2, column3, column4]]
タプルのn番目からn2番目を得る	aTuple[n:n2]
プラットホームがLinux	sys.platform.startswith('linux')
日付データからn秒分、引く	aDate - datetime.timedelta(seconds=n)
option: グラフの色をミディアムスレートブルーに指定する	color = 'mediumslateblue'
棒グラフをダークカーキ色として描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
リストから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
配列と配列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
配列をn個に等しい量になるようにビン分割する	pd.qcut(aArray, n)
option: フォレストグリーンにフォントの色を変更する	color = 'forestgreen'
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
折れ線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
棒グラフをスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='springgreen')
文字列がいつまでも繰り返すイテラブルを求める	itertools.repeat(element)
ヒストグラムを破線として描画する	plt.hist(データ列, linestyle='dashed')
データフレームのリスト列のNaNを直後の値で補う	df[aList].fillna(method='bfill')
ホットピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
ファイルからバイナリストリームを開いて]fとする	f = open(filepath, mode='rb')
データフレームの中で、列の重複を確認する	df.duplicated(subset=column)
データフレームのカラムの中に文字列と日付データがあるかどうか	df[col].isin([value, value2])
データフレームの中にいくつ文字列があるかカウントする	df.isin([value]).sum()
オブジェクトは浮動小数点数クラスのインスタンス	isinstance(obj, float)
ファイルをSJISで開く]	open(filepath, encoding='shift_jis')
データフレームの列の値がxである行を取り出す	df[df[column] == x]
データ列の欠損値を最大値に指定する	ds.fillna(ds.max())
rgbの大バツマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
アルファベットが文字列内にある	any(c.isalpha() for c in s)
option: フォントの色をインディアンレッドに設定する	color = 'indianred'
リストの末尾の要素	aList[-1]
データフレームを二つの列によってまとめた表を見る	df.groupby(['A', 'B'])
小さい順にリストの値を並べる	sorted(aList, reverse=False)
線グラフを点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
二つの変数を改行で区切ってプリントする	print(value, value2, sep='\n')
散布図に赤いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームを列の値によって集計する	df.groupby(column)
各列毎にデータフレームをグループ化し、列の最大値を求める	df.groupby(column)[column2].max()
散布図のバツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
双方向キューの最初に値を追加する	deq.appendleft(element)
option: アクアにグラフの色を設定する	color = 'aqua'
文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
日付時刻データの分	aDatetime.minute
配列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
option: データ型として８ビット整数型を使う	dtype = np.int8
新しいヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgrey')
配列の変化を一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
列名リストの値でデータフレームをグループ化し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
棒グラフをアイボリー色を使って描画する	plt.bar(データ列x, データ列y, color='ivory')
カラムが正規分布からどれだけ、尖っているか見る	ds.skew()
リストとリストについての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
データフレームを表示するとき、表示可能な列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
リストと配列の散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列x, データ列y, color='mediumorchid')
文字列内にASCII文字があるか調べる	any(c.isascii() for c in s)
データ列の第一四分位数を求める	ds.quantile(0.25)
option: ミントクリームに色を設定する	color = 'mintcream'
要素∈セット	element in aSet
散布図の菱形マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
線グラフを紺色を使って描画する	plt.plot(データ列x, データ列y, color='darkblue')
文字列をコロンで区切って、文字列リストに変換する	s.split(':')
本日が金曜日	datetime.datetime.today().weekday() == 4
辞書を多重集合に変換する	collections.Counter(aDict)
データ列と数列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
option: グラフを破線に変更する	linestyle = 'dashed'
散布図を四角印で描画する	plt.scatter(データ列x, データ列y, marker='s')
ダークグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
カテゴリでグループ化して、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
ヒストグラムをダーク・スラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategrey')
横棒グラフをミディアムスプリンググリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの色をホットピンクに変更する	plt.plot(データ列x, データ列y, color='hotpink')
文字列が片仮名	('ァ' <= ch <= 'ン')
横棒グラフをコーンズシルク色を用いて描画する	plt.barh(データ列x, データ列y, color='cornsilk')
データフレームを列によって並べて上位を取り出す	df.sort_values(columns).head(n)
線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
行列の合計値	np.sum(aArray)
イテラブルの移り変わりを色付きの破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームのカラムの欠損値を平均値に変更する	df[col].fillna(df[col].mean())
赤いポイントマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
棒グラフをオリーブ色を使って描画する	plt.bar(データ列x, データ列y, color='olive')
nが1もしくは2か	n == 1 or n == 2
ターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
行列の要素ごとの積	np.multiply(aArray, aArray2)
折れ線グラフを半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームのカラムの欠損値を最頻値に変更する	df[col].fillna(df[col].mode().iloc[0])
データフレームの中の列と列に重複があれば、ドロップする	df.drop_duplicates(subset=[column, column2])
データフレームの列をNaNも加えてダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
option: ブール型を使用する	dtype = np.int32
データフレームのリストカラムを十の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
パールゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
グレー色でヒストグラムを描画する	plt.hist(データ列, color='gray')
縦棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategray')
黒いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
双方向キューをタプルにする	tuple(deq)
データフレームのリスト列の欠損値を最頻値に指定する	df[aList].fillna(df[aList].mode().iloc[0])
整数nを符号なしでバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
配列を四分位数でビニングする	pd.qcut(aArray, 4)
option: マーカーをポイントに変える	marker = '.'
ダークスラテグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
赤い菱形マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='r')
BOM付きで追加できるようにファイルパスをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
キューの最初	deq[0]
ミディアムスプリンググリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
棒グラフをブルーバイオレット色を用いて描画する	plt.bar(データ列x, データ列y, color='blueviolet')
回帰分析をRANSACでする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
散布図に四角マーカーを加える	plt.scatter(データ列x, データ列y, marker='s')
現在のワーキングディレクトリ	os.getcwd()
ゼロ埋めされた三二ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int16)
option: 青紫を用いる	color = 'violet'
リストをn個にビン分割する	pd.cut(aList, n)
折れ線グラフの色をカーキにセットする	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
データフレームをJSONLファイルから読む	pd.read_json(filename, orient='records', lines=True)
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
option: フォントの色を紺碧に設定する	color = 'azure'
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
日付時刻データにn時間分、足す	aDatetime + datetime.timedelta(hours=n)
要素がタプルの値として含まれているか調べる	element in aDict.values()
option: ロージーブラウンにグラフの色を設定する	color = 'rosybrown'
実行結果を青色で表示できる文字列にする	f'\033[34m{value}\033[0m'
データフレームを破壊的に'A'列によってによってソートする	df.sort_values(by='A', inplace=True)
rgbのポイントマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
作画の背景色を暗くする	sns.set(style='darkgrid')
文字列を区切りによって分割して、列挙する	s.split(sep)
線グラフをミディアムスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
列を文字列リストに変換して、カンマで結合する	','.join(map(str, iterable))
円グラフとしてデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
折れ線グラフをレベッカパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
縦軸だけ目盛り線	plt.grid(axis='y')
データフレームの内で、列と列に重複があるか調べる	df.duplicated(subset=[column, column2])
グレー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
option: ダーク・スラテグレー色を用いる	color = 'darkslategrey'
ライトスカイブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
ピーチパフ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
option: 左三角印を使う	marker = '<'
今日の日付時刻	datetime.datetime.now()
棒グラフをコーラル色として描画する	plt.bar(データ列x, データ列y, color='coral')
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
レモンシフォンにヒストグラムの色を変更する	plt.hist(データ列, color='lemonchiffon')
横棒グラフをミディアムバイオレットレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
アルファベットを見る	string.ascii_letters
折れ線グラフをトマト色を用いて描画する	plt.plot(データ列x, データ列y, color='tomato')
option: グラフの種類を点線に変更する	linestyle = 'dotted'
データフレームの中に文字列があるか	df.isin([value])
線グラフの色をペールグリーンにセットする	plt.plot(データ列x, データ列y, color='palegreen')
列を用いてでデータフレームを破壊的にソートする	df.sort_values(by=column, inplace=True)
サドルブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
横棒グラフをライム色として描画する	plt.barh(データ列x, データ列y, color='lime')
ヒストグラムをラベンダー色を用いて描画する	plt.hist(データ列, color='lavender')
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
PNGファイルとしてプロットを保存する	plt.savefig('foo.png')
配列の行列式	np.linalg.det(aArray)
リストとリストについての散布図に黒い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
縦棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
線グラフの色をピンクに指定する	plt.plot(データ列x, データ列y, color='pink')
折れ線グラフをロイヤルブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='royalblue')
青い一点鎖線としてリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図の△マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
空白を見る	' '
option: マーカーを左三角に変える	marker = '<'
オブジェクトは文字列	isinstance(obj, str)
カウンタのユニークな項目をリストとして得る	list(aCounter)
折れ線グラフに△マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
option: ベクトルのデータ型を指定する	dtype = np.int8
半透明の一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
等しい量になるようにビン数nとして配列をビン分割する	pd.qcut(aArray, n)
二つの文字列を順に表示する	print(value, value2)
ヒストグラムの色をマルーンにする	plt.hist(データ列, color='maroon')
ミッドナイトブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
配列の行を選択する	aArray[行番号]
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
改行せずリストを表示する	print(value, end='')
リストと数列の散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
ライトイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
折れ線グラフの色をタンに変更する	plt.plot(データ列x, データ列y, color='tan')
option: コーンズシルク色を用いる	color = 'cornsilk'
Pandasで、文字列を書式fmtでタイムスタンプ型にする	pd.to_datetime(s, format=fmt)
青い実線でイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
キューの末尾	deq[-1]
データフレームの列が文字列が含まれるデータを抽出する	df[df[column].str.contains(s)]
タイムスタンプデータからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
コマンドの第二引数	sys.argv[1]
横棒グラフをフクシア色を用いて描画する	plt.barh(データ列x, データ列y, color='fuchsia')
折れ線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgrey')
赤い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
option: グラフの色をデピンクに指定する	color = 'deeppink'
リストを展開して出力する	print(*aList)
最小値でデータフレームの列の欠損値を埋める	df[col].fillna(df[col].min())
散布図に赤い▼印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: オレンジレッドにグラフの色を設定する	color = 'orangered'
横棒グラフをライトコーラル色を用いて描画する	plt.barh(データ列x, データ列y, color='lightcoral')
option: 四角印を使用する	marker = 's'
既にロードされたモジュールの一覧	sys.modules
列を無限に繰り返す	itertools.cycle(iterable)
オブジェクトのメモリビューを見る	memoryview(obj)
データ列のNaNを直後の値に設定する	ds.fillna(method='bfill')
配列とデータ列についての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データ列のどの値が頻出か調べる	ds.mode()
マップの項目名に対応した値	aDict.get(key)
浮動小数点数から実数を減算する	x - y
配列をリストを境界値として分割する	pd.cut(aArray, aList)
データフレームの欠損値が含まれる部分を色付けする	df.style.highlight_null()
イテラブルとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
２次元タプルをflattenする	sum(aTuple)
線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
無限にnからカウントアップする	itertools.count(start=n)
線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
散布図を黒い三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
折れ線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
エラーなくリストの文字列の位置を求める	aList.index(element) if element in aList else -1
文字列中の部分文字列の出現	s.count(sub)
データフレームの重複した行数のマスクを見る	df.duplicated()
赤い実線としてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データラベルの場所を指定する	plt.legend(loc=(x, y))
新しい部分的最小二乗回帰モデルを作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: マゼンタに色を設定する	color = 'magenta'
線を色付きの一点鎖線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
Pandasで、文字列の数値時刻から日付データにする	pd.to_datetime(s, unit='s', utc=True)
predicateFuncが真となるシーケンスの要素を消す	itertools.dropwhile(predicateFunc, iterable)
補助目盛を有効にする	plt.minorticks_on()
データフレームの平均と信頼区間を描く	sns.pairplot(hue='カテゴリ列', data=df)
横棒グラフを描画して、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
option: 色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
既存のベクトルをベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
散布図の印を星にする	plt.scatter(データ列x, データ列y, marker='*')
小数点数は無限大か	math.isinf(x)
インデント幅nで辞書をJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームの列の値がxより大きくx2より少ない行を抽出する	df[(x < df[column]) & (df[column] < x2)]
折れ線グラフの左三角印を赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ミディアムスレートブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
シーケンスからn個ランダムに選ぶ	random.choices(iterable, k=n)
横棒グラフをライトゴールドロディイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームのリスト列を小数点以下n桁で四捨五入する	df[aList].round(n)
option: 印の色を変更する	markerfacecolor = '#800080'
折れ線グラフの色をターコイズにする	plt.plot(データ列x, データ列y, color='turquoise')
スラッシュで区切って２つの文字列を出力する	print(value, value2, sep='/')
グラフのタイトルを指定する	plt.title('グラフの名称')
option: エンコーディングを文字列の示すエンコーディングに指定する	encoding = s
データ列の文字列を欠損値にする	ds.replace(s, np.nan)
配列の分散を計算する	np.var(aArray)
ダークオレンジ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
散布図をネイビー色を用いて描画する	plt.scatter(データ列x, データ列y, color='navy')
ライトスレイグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
option: データ型として符号なし８ビット整数型を使用する	dtype = np.uint8
日付時刻データの曜日を使う	aDatetime.weekday()
マップのキーを列挙する	aDict.keys()
シエナ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
ローングリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
符号なし８ビット整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.uint8)
データ列のタイムゾーンを日本にセットする	ds.tz_convert('Asia/Tokyo')
option: グラフの色をネイビーに変更する	color = 'navy'
円プロットを時計回りに描く	plt.pie(データ列, startangle=90, counterclock=False)
ロイヤルブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
グラフの描画でパステル調にカラーパレットを使用する	sns.set(pallete='pastel')
データ列の中にいくつが存在するか数える	ds.isin([value]).sum()
画面にグラフの用途を設定する	sns.set(context='notebook')
実数を浮動小数点数で	x // y
文字列の終了位置より前に部分文字列が含まれないか	s.find(sub, 0, end) == -1
文字列を部分文字列で二分し、残りの文字列を見る	s.partition(sub)[-1]
トマト色としてヒストグラムを描画する	plt.hist(データ列, color='tomato')
option: ディムグレーにフォントの色を設定する	color = 'dimgrey'
八進文字列をbytesizeバイトのバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
オリベドラブ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
折れ線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
データフレームの列の値が未入力値か	df[col].isna()
タイムスタンプデータとタイムスタンプデータの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
散布図のポイントマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
暗い赤色でヒストグラムを描画する	plt.hist(データ列, color='darkred')
option: 色をタンに設定する	color = 'tan'
半透明の一点鎖線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
option: ライトシアンに色を設定する	color = 'lightcyan'
データフレームのカラムの文字列をNaNに変換する	df[col].replace(s, np.nan)
浮動小数点数の平方根	math.sqrt(x)
横棒グラフをミディアムブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumblue')
浮動小数点数の最大値を算出する	sys.float_info.max
ふたつの集合の共通要素のみに更新する	aSet.intersection_update(aSet2)
横棒グラフをグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='gray')
データ列を小数点以下n桁で四捨五入する	ds.round(n)
option: スラッシュを区切り記号で使用する	sep = '/'
フクシア色として散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
二つの集合の積集合を求める	aSet.intersection(aSet2)
最大最小で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレームの列の未入力値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
プロットにy=0の実線を設定する	plt.axhline(y=0, linestyle='solid')
文字列の右端から空白を除く	s.rstrip(' ')
折れ線グラフの色をインディアンレッドにする	plt.plot(データ列x, データ列y, color='indianred')
option: ミディアムターコイズを用いる	color = 'mediumturquoise'
菱形印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフのポイント印の色を指定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
Pandasでデータフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
実数のn乗して実数による余りを算出する	pow(x, n, y)
カラムの値をまとめてreplに正規表現patternで置き換える	ds.replace(pattern, repl, regex=True)
線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
折れ線グラフを半透明の破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
イテラブルとシーケンスの直積を求める	itertools.product(iterable, iterable2)
カウンタを集合にする	set(aCounter)
棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
折れ線グラフの色をリネンに変更する	plt.plot(データ列x, データ列y, color='linen')
option: 色をグリーンイエローに変更する	color = 'greenyellow'
データフレームのカラムが何年か確認する	df[col].dt.year
ふたつの関係が上位集合か調べる	aSet.issuperset(aSet2)
インディアンレッド色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
データフレームの列の値がx以上のデータを取り出す	df[df[column] >= x]
二つのデータフレームを列'A'と列'B'をキーとして左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
ヒストグラムの色をミディアムシアグリーンに変更する	plt.hist(データ列, color='mediumseagreen')
option: ライトゴールドロディイエローを用いる	color = 'lightgoldenrodyellow'
JSONLファイルにデータフレームを書き込む	df.to_csv(filename)
文字列を最初の部分文字列で二分し、最初の文字列を使う	s.partition(sub)[0]
n個の数値イテラブルを求める	range(n)
ヒストグラムの色をミッドナイトブルーに変更する	plt.hist(データ列, color='midnightblue')
淡くカラーテーマをプロットの描画で使う	sns.set(pallete='muted')
日付データが日曜日	aDate.weekday() == 6
nが3で割り切れるかどうか	n % 3 == 0
オブジェクトがプロパティを持つかどうか調べる	hasattr(obj, プロパティ名)
折れ線グラフの菱形マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
文字列を積極的に小文字にする	s.casefold()
フローラルホワイトにヒストグラムの色をセットする	plt.hist(データ列, color='floralwhite')
データフレームのリスト列の正規分布に対する左右対称性を求める	df[aList].kurt()
外れ値に強いクラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
文字列の開始位置以降に部分文字列があるか調べる	s.find(sub, start) != -1
データフレームを各列毎に集計して列の個数を求める	df.groupby(column)[column2].count()
サンディーブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
文字列内に漢字があるか確認する	re.search('[\u4E00-\u9FD0]', s)
リストをマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
データ列が何時か確認する	ds.dt.hour
文字列をファイルに書く	f.write(s)
データフレームをグループ化し、それぞれの列に対し標準偏差を算出する	df.groupby(column)[column2].std()
データフレームのリストカラムのどの値が最も現れるか確認する	df[aList].mode()
option: ナバホホワイト色を使用する	color = 'navajowhite'
二つの文字列が等しくないか調べる	s != s2
データフレームのグループごとの標準偏差	df.groupby(column).std()
プラム色としてヒストグラムを描画する	plt.hist(データ列, color='plum')
データフレームの中にいくつ欠損値があるかカウントする	df.isna().sum()
正規分布に従うかどうか調べる	scipy.stats.shapiro(データ列)
丸マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
イテラブルを集合に追加する	aSet.update(iterable)
グレーにヒストグラムの色をセットする	plt.hist(データ列, color='grey')
データフレームのリストカラムの中にある日付データと文字列の合計を数える	df[aList].isin([value, value2]).sum()
データフレームを'A'列でソートする	df.sort_values(by='A')
散布図を三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームを四捨五入して、整数型にする	df.round().astype(int)
文字列の末尾の文字	s[-1]
散布図の▼印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
タプルとシーケンスをつなぐ	itertools.chain(iterable, iterable2)
ヒストグラムをピーチパフ色として描画する	plt.hist(データ列, color='peachpuff')
rgbのクロスマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
タイムスタンプデータをエポック秒に変換する	aDatetime.timestamp()
option: 印をダイアモンドに設定する	marker = 'D'
線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
0からN未満までのベクトル	np.arange(N)
回帰分析をガウス過程として行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
xを浮動小数点数型にする	float(x)
各列毎にデータフレームをグループ化して、列の分散を求める	df.groupby(column)[column2].var()
'A'列によってデータフレームを並べて、更新する	df.sort_values(by='A', inplace=True)
データフレームの列の中に日付データと文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
双方向キューの要素を右にn個分輪番で回す	deq.rotate(n)
セットをタプルに変換する	tuple(aSet)
列名リストによってデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
横棒グラフをコーラル色として描画する	plt.barh(データ列x, データ列y, color='coral')
折れ線グラフの色をマルーンにする	plt.plot(データ列x, データ列y, color='maroon')
線グラフの色をミントクリームに指定する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームからカテゴリデータを抽出する	df.select_dtypes('object')
ピンク色でヒストグラムを描画する	plt.hist(データ列, color='pink')
横棒グラフをグレー色を使って描画する	plt.barh(データ列x, データ列y, color='grey')
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgray')
数列の推移を折れ線グラフを用いて描画する	plt.plot(range(len(データ列)), データ列)
ひとつでも大文字が文字列内にあるかどうか	any(c.isupper() for c in s)
カラムの平均値を求める	ds.mean()
横棒グラフを青色として描画する	plt.barh(データ列x, データ列y, color='blue')
データ列の折れ線グラフを丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o')
線グラフの色をビスクに指定する	plt.plot(データ列x, データ列y, color='bisque')
整数nがセットのいづれかか調べる	n in aSet
リストを小さい方からソートする	sorted(aList, reverse=True)
データフレームのカラムの値を一度にValueMapで置き換える	df[col].replace(ValueMap)
データフレームのNaNを直後の値に減らす	df.fillna(method='bfill')
シャルトリューズ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
文字列は全て識別子名か	s.isidentifier()
option: フォントの色をホワイトスモークに指定する	color = 'whitesmoke'
表データを各列と列の組み合わせ毎にグループ化して、分散を算出する	df.groupby([column, column2], as_index=False).var()
本日のローカルな日付を見る	datetime.date.today()
リストの各値を関数に適用した結果で並べる	sorted(aList, key=func)
既存のファイルを文字コードtextを使って追加できるように開く]	open(filepath, mode='a', encoding=text)
日付データが日付データと同時	aDate == aDate2
option: 印の大きさを変更する	markersize = 2.0
option: ターコイズを使う	color = 'turquoise'
日付時刻データが日付時刻データより早いか確認する	aDatetime < aDatetime2
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
赤色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
耐火レンガ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
グラフの補足を表示する	plt.legend()
option: 三二ビット整数型を用いる	dtype = np.int16
折れ線グラフの△マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
カラムの欠損値をxで埋める	ds.fillna(x)
今日が日曜日	datetime.datetime.today().weekday() == 6
二つの集合は共通の要素を持たない	aSet.isdisjoint(aSet2)
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightgreen')
ダークオレンジ色でヒストグラムを描画する	plt.hist(データ列, color='darkorange')
折れ線グラフをライム色を用いて描画する	plt.plot(データ列x, データ列y, color='lime')
ライトスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
実部と虚部から複素数を作成する	complex(x, y)
文字列からISO8601で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: スカイブルーに色を設定する	color = 'skyblue'
n÷n2を算出する	n / n2
イテラブルを関数でフィルタする	filter(func, iterable)
データフレームを各列と列の組み合わせ毎にグループ化し、、最小値を求める	df.groupby([column, column2], as_index=False).min()
余弦の逆数を求める	math.acos(x)
option: シャルトリューズにグラフの色を設定する	color = 'chartreuse'
データ列は何曜日か調べる	ds.dt.weekday_name
黒いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='k')
縦横の比率を等しくする	plt.axis('equals')
データフレームを複数の列の値でグループ化し、要約統計量を求める	df.groupby(columns).describe()
色付きの一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームのリストカラムの中の未入力値の合計を数える	df[aList].isna().sum()
イテラブルの重複組み合わせを求める	itertools.combinations_with_replacement(iterable, n)
データフレームのNaNを最頻値で埋める	df.fillna(df.mode().iloc[0])
option: グラフの色をカーキに指定する	color = 'khaki'
線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
線グラフの色をダークゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
分類結果のリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ネイビー色を使ってヒストグラムを描画する	plt.hist(データ列, color='navy')
option: スノーにグラフの色を設定する	color = 'snow'
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategray')
ヒストグラムをパウダーブルー色として描画する	plt.hist(データ列, color='powderblue')
線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
option: 文字コードをSJISにする	encoding = 'shift_jis'
文字列の最初から空白を取り除く	s.lstrip(' ')
折れ線グラフの色をシスルに指定する	plt.plot(データ列x, データ列y, color='thistle')
文字列を赤色化する	f'\033[31m{value}\033[0m'
部分文字列で文字列の開始位置以降が開始するかどうか調べる	s.startswith(sub, start)
文字列リストを一つの文字列にする	''.join(map(str, iterable))
商と余りを同時に求める	divmod(x, y)
配列とリストについての散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
バイアスなしの線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
縦棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
rgbのバツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: 色をライトスレイグレーに変更する	color = 'lightslategray'
文字列が文字列リストに存在するか調べる	s in aStringList
線グラフの色をロイヤルブルーに変更する	plt.plot(データ列x, データ列y, color='royalblue')
サポートベクター回帰モデルを準備する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
n2がnより大きくかつ、n3未満か調べる	n < n2 and n2 < n3
散布図に大バツ印を加える	plt.scatter(データ列x, データ列y, marker='X')
ヒストグラムを上限から下限までの範囲でプロットする	plt.hist(データ列, range=(start, end))
散布図をスノー色を使って描画する	plt.scatter(データ列x, データ列y, color='snow')
列をベクトルに変換する	pd.get_dummies(iterable)
ベクトルの行ごとの合計	np.sum(aArray, axis=1)
範囲から配列を作成する	np.linspace(最小値, 最大値, 要素数)
文字列が全て数字	s.isdigit()
データフレームのリスト列の最頻値を求める	df[aList].mode()
縦棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
ファイルを追加モードとしてオープンする]	open(filepath, mode='a')
キューの要素数	len(deq)
白色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
ロージーブラウン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
線グラフの色を珊瑚にする	plt.plot(データ列x, データ列y, color='coral')
option: 色をアクアマリンに指定する	color = 'aquamarine'
青いポイント印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームを列を用いて整列し、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
文字列を部分文字列によって二分する	s.partition(sub)
文字列をコロンを用いて区切って、列挙する	s.split(':')
ヒストグラムの色をミスティローズにセットする	plt.hist(データ列, color='mistyrose')
文字列を走査し正規表現にケースを無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
データフレームのリストカラムの値が欠損値	df[aList].isna()
ベクトルが何のデータ型か調べる	aArray.dtype()
データフレームの欠損値を最小値に指定する	df.fillna(df.min())
rgbに棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
赤い▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
t-SNEを用いて濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
データフレームの列をドロップして、入れ替える	df.drop(column, axis=1, inplace=True)
散布図にクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
縦棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
データ列の中の未入力値の合計を求める	ds.isna().sum()
シルバー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
三整数の最小公倍数	math.lcm(n, n2, n3)
度数分布図を用いてデータ列を可視化する	plt.hist(データ列)
ヒストグラムの色をオリーブにセットする	plt.hist(データ列, color='olive')
ファイルパスをバイナリモードで開いて]、fとする	f = open(filepath, mode='rb')
浮動小数点数のn乗の浮動小数点数剰余を算出する	pow(x, n, y)
列を累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
ダークオーキッドにヒストグラムの色を指定する	plt.hist(データ列, color='darkorchid')
ファイルパスを文字コードtextを使ってオープンする]	open(filepath, encoding=text)
ホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
ライトグレーにヒストグラムの色をセットする	plt.hist(データ列, color='lightgrey')
option: スラグレーにグラフの色を変更する	color = 'slategrey'
ライトゴールドロディイエローにヒストグラムの色を指定する	plt.hist(データ列, color='lightgoldenrodyellow')
複素数型の０で全要素を初期化した行列を作る	np.zeros(行数, 列数, dtype=bool)
配列と数列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
複数のイテラブルを箱ひげ図にする	plt.boxplot([データ列, データ列])
数値を太字にする	f'\033[1m{value}\033[0m'
リストから重複を取り除く	set(iterable)
配列とリストについての散布図に黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
変数がマイナス無限大に近づく場合、数式の極限値を求める	sympy.limit(e, z, -oo)
データ列を10の位で丸めて、整数にする	ds.round(-1).astype(int)
データフレームのリストカラムを100の位で四捨五入する	df[aList].round(-2)
文字列を部分文字列で分けた場合の最初の文字列	s.partition(sub)[0]
ダークオーキッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
文字列中のタブ文字をn個の空白に置き換える	s.expandtabs(tabsize=n)
オールドレース色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
option: 右三角マーカーを使用する	marker = '>'
折れ線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
option: ダークスレートブルーにグラフの色をセットする	color = 'darkslateblue'
折れ線グラフの色をシルバーに変更する	plt.plot(データ列x, データ列y, color='silver')
データフレームの列の欠損値を平均値で埋める	df[col].fillna(df[col].mean())
横棒グラフをスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='springgreen')
実数の整数部を計算する	math.modf(x)[1]
ひとつ飛ばしでリストを取り出す	aList[::2]
乱数を発生させる	random.random()
二つの変数をカンマで区切ってプリントする	print(value, value2, sep=',')
二数の最小の値を計算する	min(x, y)
データフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
数の値が整数	x.is_integer()
タプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
ライトグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
何回まで再帰ができるか	sys.getrecursionlimit()
散布図の星印を黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
実行結果を黒色でプリントする	print(f'\033[30m{value}\033[0m')
option: フォントの色をペールグリーンに設定する	color = 'palegreen'
マッピングの項目名を要素にする	aDict[key] = element
ヒストグラムの色をリネンにセットする	plt.hist(データ列, color='linen')
折れ線グラフのダイアモンドマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
ラジアンの角度を計算する	math.degrees(x)
ダークマゼンタ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
ヒストグラムを淡いピンク色色として描画する	plt.hist(データ列, color='lightpink')
赤い星マーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='*', c='r')
カラムの中に含まれる文字列の数を数える	ds.isin([value]).sum()
option: インデックスを自動的な連番に指定する	index_col = None
option: 回帰木の最大深さを設定する	maxdepth = n
値をプリントする	print(value)
グレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
実数の双曲線正弦の逆数を求める	math.asinh(x)
整数乱数で要素を埋めた行列を作る	np.random.randint(開始値, 終了値, N)
横棒グラフをビスク色として描画する	plt.barh(データ列x, データ列y, color='bisque')
クロスマーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
散布図のポイントマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
範囲を指定して乱数を発生させる	random.randint(最小値, 最大値)
option: 茶色を使う	color = 'brown'
要素がセットのメンバーでないかどうか確認する	element not in aSet
JSONLファイルにデータフレームをエクセルファイルで保存する	df.to_excel(filename)
折れ線グラフのマーカーを▲にする	plt.plot(データ列x, データ列y, marker='^')
赤い▼マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v', c='r')
x軸の目盛を対数に変更する	plt.xscale('log')
データフレームをエクセルファイルから読み込む	pd.read_excel(filename)
データフレームのカラムの中に存在する文字列の合計をカウントする	df[col].isin([value]).sum()
散布図を黒い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
数値時刻の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
'A'列と'B'列でデータフレームを整列する	df.sort_values(by=['A', 'B'])
新しいロッソ回帰モデルを用意する	model = sklearn.linear_model.Rosso(alpha=正則化項)
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフの色を濃いシアンにセットする	plt.plot(データ列x, データ列y, color='darkcyan')
折れ線グラフの色をミディアムバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='mediumvioletred')
ヒストグラムの色をダークカーキに指定する	plt.hist(データ列, color='darkkhaki')
データフレームの列の値がxより小さいデータを抽出する	df[df[column] < x]
シーケンスの各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームの列の値がxでない行をフィルタする	df[df[column] == x]
option: パープルに色を設定する	color = 'purple'
グラフにx=0の実線を設定する	plt.axvline(x=0, linestyle='solid')
option: ダークオーキッド色を用いる	color = 'darkorchid'
option: ミディアムアクアマリンを使う	color = 'mediumaquamarine'
符号付きで整数nを長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
ダークゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
双曲線余弦の逆数を計算する	math.acosh(x)
ペアリストpairsからカウンタを生成する	collections.Counter(dict(pairs))
データフレームの指定した列を抽出する	df[column]
ダークサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
棒グラフをミディアムバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
データ列は何年か確認する	ds.dt.year
option: ピンクにグラフの色をする	color = 'pink'
データフレームを2つの列でによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
リストを引数として展開してプリントする	print(*aList, sep=',')
データフレームから型リストで指定されたデータ型の列を取り出す	df.select_dtypes(include=typeList)
文字列の両端から空白を除く	s.strip()
散布図をミディアムブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
今日が火曜日かどうか調べる	datetime.datetime.today().weekday() == 1
列'A'と列'B'をキーにして二つの表データを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
棒グラフを茶色色として描画する	plt.bar(データ列x, データ列y, color='brown')
折れ線プロットの色をカラーコードを使って変更する	plt.plot(データ列x, データ列y, color='#800080')
赤い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='r')
nの8進リテラル	oct(n)
日付データからn週間を減らす	aDate - datetime.timedelta(weeks=n)
ひとつでも空白が文字列内に含まれるかどうか	any(c.isspace() for c in s)
データフレームを列の値ごとに集約して、列挙する	[(name, group) for name, group in df.groupby(column)]
多次元データをt分布型確率的近傍埋め込み法で淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
散布図に黒い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
散布図の三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
option: ダークシアンを用いる	color = 'darkcyan'
2つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
ヒストグラムを青紫色として描画する	plt.hist(データ列, color='violet')
option: グラフの色をロイヤルブルーにセットする	color = 'royalblue'
縦棒グラフをダークマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
option: n番目の列をインデックスに増やす	index_col = n
数式をパラメータについてn階微分する	sympy.diff(e, z, n)
折れ線グラフを深紅色として描画する	plt.plot(データ列x, データ列y, color='crimson')
ペールグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
一度にValueMapでデータ列の値を置き換える	ds.replace(ValueMap)
スタックの要素をインプレースに反転する	deq.reverse()
小数点数のタンジェントの逆数	math.atan(x)
散布図に青い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
散布図を下三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='v')
文字列TSVファイルからn番目のカラムをインデックスにしてカンマ区切りのファイルを読み込む	pd.read_csv(filename, index_col=n)
エンコーディングを用いて文字列をバイト列に変換する	s.encode(encoding=encoding)
リストとリストについて散布図を描画し、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色を紺に指定する	plt.hist(データ列, color='darkblue')
ValueMapでデータフレームのリストカラムの値をまとめて置き換える	df[aList].replace(ValueMap)
浮動小数点数を万の位で丸める	round(x, -4)
折れ線グラフの四角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
一点鎖線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
xの小数点以下'3'桁までの文字列にする	':.3f'.format(x)
ハニーデュー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
option: 暗い赤色を用いる	color = 'darkred'
ライトサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
リストの最後を取り除く	aList[:-1]
文字列を空白を使って区切って、数列に変換する	map(int, s.split())
要素が集合に含まれるかどうか確認する	element in aSet
配列間の各要素の最大公約数を求める	np.gcd(aArray, aArray2)
破壊的にデータフレームのn行目を取り除く	df.drop(n, axis=0, inplace=True)
ロバスト分類器を作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
k進対数	math.log(x, k)
データフレームを関数によって分類する	df.groupby(関数)
横棒グラフを描いて、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
'A'列によってによって降順にデータフレームを並べる	df.sort_values(by='A', ascending=False)
option: スラグレーにグラフの色を指定する	color = 'slategray'
浮動小数点数の逆正接を計算する	math.atan(x)
棒グラフをクリムゾン色として描画する	plt.bar(データ列x, データ列y, color='crimson')
異なるカラムをキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
日付時刻データの時刻を使う	aDatetime.time()
逆正弦	math.asin(x)
散布図の丸印の線幅を変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
データフレームのリストカラムの中にいくつNaNが存在するか求める	df[aList].isna().sum()
マップにキーが存在するか確認する	key not in aDict
数列と配列について散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
データフレームのリストカラムのメディアン	df[aList].median()
散布図をダークスラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
二つの行列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
文字列をシアン化する	f'\033[36m{value}\033[0m'
青色としてヒストグラムを描画する	plt.hist(データ列, color='blue')
シアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
エラーを無視して文字列をバイト列にする	s.encode(errors='ignore')
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
イテラブルを文字列リストに変換してタブで連結する	'\t'.join(map(str, iterable))
データフレームのカラムを100の位で丸めて、整数にする	df[col].round(-2).astype(int)
横棒グラフをシエナ色を用いて描画する	plt.barh(データ列x, データ列y, color='sienna')
option: ダークバイオレットを使用する	color = 'darkviolet'
カラムとして表データをグループ化してそれぞれのグループごとの件数を知る	df.groupby(column).size()
未初期化の行列を作る	np.empty(要素数, dtype=np.int)
複数行対応として事前にパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
文字列中にひとつでも非空白があるかどうか確認する	any(not c.isspace() for c in s)
ヒストグラムを黄緑色として描画する	plt.hist(データ列, color='chartreuse')
マゼンタ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
データ列の中にいくつNaNが含まれるか数える	ds.isna().sum()
散布図の上三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
数列とリストの散布図に菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムの色をライトスチールブルーにする	plt.hist(データ列, color='lightsteelblue')
option: パープル色を使用する	color = 'purple'
nはn2か調べる	n == n2
標準出力の出力先がターミナルか	os.isatty(sys.stdin.fileno())
逆行列を求める	np.linalg.inv(aArray)
散布図に丸印を使用する	plt.scatter(データ列x, データ列y, marker='o')
文字列を緑色で出力する	print(f'\033[32m{value}\033[0m')
リストにリストを加える	aList.extend(aList2)
リストの先頭の要素	aList[0]
散布図にポイント印を使う	plt.scatter(データ列x, データ列y, marker='.')
横棒グラフをイエローグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
option: 青緑色を用いる	color = 'teal'
重複する行をインプレイスでデータフレームからドロップする	df.drop_duplicates(inplace=True)
ファイルがあるか調べる	os.path.exists(filepath)
Pythonパスのリスト	sys.path
リストと配列について散布図をプロットし、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
データ列とデータ列の散布図にrgbの下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフをブラック色を使って描画する	plt.plot(データ列x, データ列y, color='black')
折れ線グラフに丸印を使う	plt.plot(データ列x, データ列y, marker='o')
データフレームの列の平均を計算する	df[col].mean()
横棒グラフをリネン色を用いて描画する	plt.barh(データ列x, データ列y, color='linen')
実線に線の線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのリストカラムの欠損値を最小値に指定する	df[aList].fillna(df[aList].min())
アンティークホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ヒストグラムのビン数をセットする	plt.hist(データ列, bins=区関数)
日付データにn秒分、足す	aDate + datetime.timedelta(seconds=n)
データフレームの数値をまとめて四捨五入する	df.round()
オレンジレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
列'A'と列'B'をキーにして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
rgbの菱形マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームの列と列の相関行列ケンドール相関係数でを求める	df[[column, column2]].corr(method='kendall')
ブラック色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
データフレームがどの程度、分散しているか調べる	df.var()
黒い大バツマーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
option: ディープスカイブルーに色を設定する	color = 'deepskyblue'
ライトスレイグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
縦棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームを表示するとき、小数点以下n桁まで表示するようにする	pd.set_option('precision', n)
組の各要素を関数に適用した結果で並べ直す	sorted(aTuple, key=func)
をPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
option: 茶色にグラフの色を設定する	color = 'brown'
データフレームを10の位で丸めて整数型にする	df.round(-1).astype(int)
列を分割する	pd.cut(ds, aList)
折れ線グラフの色をダークレッドに指定する	plt.plot(データ列x, データ列y, color='darkred')
実数以下の最大の整数を求める	math.floor(x)
ナバホホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='navajowhite')
整数nの十六進リテラルを使う	hex(n)
データフレームのカラムの文字列長を列として使う	df[col].str.len()
rgbの左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレーム全体をインデックスによってソートする	df.sort_index()
option: モカシン色を用いる	color = 'moccasin'
データフレームをグループ化しそれぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
非数値データをワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
パープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
折れ線グラフに▼マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
タプルと組を連結する	aTuple + aTuple2
辞書の項目名を列挙する	list(aDict)
ヒストグラムをサンディーブラウン色を使って描画する	plt.hist(データ列, color='sandybrown')
option: 色をシアンにする	color = 'cyan'
折れ線グラフをカデットブルー色として描画する	plt.plot(データ列x, データ列y, color='cadetblue')
option: 星マーカーを加える	marker = '*'
文字列を最後の部分文字列で分けたときの残りの文字列を求める	s.rpartition(sub)[-1]
キューの先頭にイテラブルの各要素を順に入れる	deq.extendleft(iterable)
nとkの組合せを算出する	math.comb(n, k)
２つのデータフレームを列をキーにして右結合する	pd.merge(df, df2, on=column, how='right')
折れ線グラフのダイアモンドマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
データフレームを大きい順に'A'列によって破壊的に並べる	df.sort_values(by='A', ascending=False, inplace=True)
ネイビー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームの欠損値を平均値に変更する	df.fillna(df.mean())
データフレームの列の名前リストを見る	df.columns
データ列の折れ線グラフを描いて、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
year年month月day日のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
文字列の先頭でパターンにマッチするか調べる	re.match(pattern, s)
ラベンダーブラッシュ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
赤い▽マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
文字列がn回続くイテラブルを求める	itertools.repeat(element, n)
実数のハイパボリック・コサイン	math.cosh(x)
データフレームのリストカラムの25パーセンタイルを求める	df[aList].quantile(0.25)
ふたつの集合が集合と交わりを持たないかどうか判定する	aSet.isdisjoint(aSet2)
データフレームのリスト列の欠損値を前の値に設定する	df[aList].fillna(method='ffill')
option: グラフの色をグリーンに指定する	color = 'green'
点線に折れ線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの列をベクトルにする	pd.get_dummies(df[column])
ファイルからファイル名を取り出す	os.path.basename(filepath)
小さい順に複数の列によってデータフレームを整列する	df.sort_values(by=column, ascending=True)
文字列の中の正規表現によるすべてのマッチを使う	re.findall(pattern, s)
横棒グラフをアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='aquamarine')
データフレームを列によってグループ化して、グループ毎の合計を計算する	df.groupby(column).sum()
日付時刻データが火曜日かどうか確認する	aDatetime.weekday() == 1
浮動小数点数のハイパボリック・タンジェントの逆数を算出する	math.atanh(x)
データ列の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
データフレームを列の値毎に集約して、それぞれのグループごとの分散を算出する	df.groupby(column).var()
２つのデータフレームを縦方向に連結する	pd.concat([df, df2])
カラムの欠損値を前の行の値に設定する	ds.fillna(method='ffill')
数値のパラメータについてのn階微分を行う	sympy.diff(e, z, n)
散布図の△印を黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
シスル色でヒストグラムを描画する	plt.hist(データ列, color='thistle')
半透明の破線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
半透明の実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ミディアムオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
データフレームを十の位で丸める	df.round(-1)
Pandasでデータ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
filepathにディレクトリを変更する	os.chdir(os.dirname(filepath))
集合を変更不能にする	frozenset(aSet)
オプションで、標準エラーを用いる	file = sys.stderr
一点鎖線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dashbot')
カラーパレットを明るくする	sns.set(pallete='bright')
横棒グラフをパウダーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='powderblue')
カウンタ間で積集合演算する	aCounter & aCounter2
option: グラフの色をベージュにセットする	color = 'beige'
正則化付き線形回帰モデルを用意する	model = sklearn.linear_model.ElasticNet()
ピンク色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
10を底とする小数点数の対数	math.log10(x)
折れ線グラフをミディアムブルー色を使って描画する	plt.plot(データ列x, データ列y, color='mediumblue')
見やすいグラフを使う準備をする	import seaborn as sns
線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategray')
ヒストグラムの色をミディアムバイオレットレッドにする	plt.hist(データ列, color='mediumvioletred')
集合から何でもいいからひとつ取り出す	aSet.pop()
散布図を黒い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームのリストカラムはどの程度、分散しているか見る	df[aList].var()
実数とyの斜辺を求める	math.hypot(x, y)
データフレームのカラムは正規分布からどの程度、尖っているか見る	df[col].skew()
t-SNEとしてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
菱形印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
option: ダークグレーにフォントの色を設定する	color = 'darkgray'
散布図の星印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
option: 真紅を使う	color = 'crimson'
イテラブルの値を両端キューの末尾につけ加える	deq.extend(iterable)
タプルをカンマ区切りでプリントする	print(*aTuple, sep=',')
データフレームから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
分類モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
横棒グラフをやわらかい青色を使って描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
昇順にタプルの要素をソートする	sorted(aTuple, reverse=False)
ミディアムターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='mediumturquoise')
インプレイスで表データの列を削除する	df.drop(column, axis=1, inplace=True)
数列とリストの散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
多次元データをSVDで淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
整数を整数に変換する	int(x)
ペルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ヒストグラムをマゼンタ色を用いて描画する	plt.hist(データ列, color='magenta')
日付時刻データからn日を減算する	aDatetime - datetime.timedelta(days=n)
セパレータで文字列を分割して、文字列リストにする	s.split(sep)
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
文字列の最後から部分文字列を取り除く	s.rstrip(sub)
淡いピンク色色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
既存の配列をベースに全要素が0の行列	np.zeros_like(aArray)
データ列の各データが何回出現するか確認する	ds.value_counts()
option: グラフの色を青に指定する	color = 'blue'
散布図に黒い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフのクロスマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
イテラブルをカウンタにする	collections.Counter(iterable)
オブジェクトは集合クラスかどうか調べる	isinstance(obj, set)
文字列が全て英字かどうか調べる	s.isalpha()
折れ線グラフをパールゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
タプルのキーの値	aDict[key]
縦棒グラフをオーキッド色として描画する	plt.bar(データ列x, データ列y, color='orchid')
option: コーンフラワーブルーを使用する	color = 'cornflowerblue'
双方向キューをdequeue	deq.popleft()
オブジェクトの型を見る	type(obj)
データフレームのカラムの欠損値をxで置き換える	df[col].fillna(x)
文字列の右側が部分文字列か調べる	s.endswith(sub)
線グラフの色をスカイブルーに指定する	plt.plot(データ列x, データ列y, color='skyblue')
ヒストグラムをブルーバイオレット色を用いて描画する	plt.hist(データ列, color='blueviolet')
ビン数nとして配列をビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
横棒グラフを濃いシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ミントクリーム色でヒストグラムを描画する	plt.hist(データ列, color='mintcream')
数を千の位で四捨五入する	round(x, -3)
線グラフをダークシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: ミスティローズに色を設定する	color = 'mistyrose'
折れ線グラフを暗い赤色を用いて描画する	plt.plot(データ列x, データ列y, color='darkred')
色付きの点線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
option: グラフの色をゴールデンロッドにセットする	color = 'goldenrod'
ヒストグラムの色をホットピンクに指定する	plt.hist(データ列, color='hotpink')
ファイルを開いて]書き込みストリームを見る	open(filepath, mode='w')
サドルブラウン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
箱ひげ図をプロットして、平均値を加える	plt.boxplot(データ列, showmeans=True)
散布図に青い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
線グラフの色をスチールブルーに指定する	plt.plot(データ列x, データ列y, color='steelblue')
数のn乗	pow(x, n)
散布図のマーカーを下三角印にする	plt.scatter(データ列x, データ列y, marker='v')
折れ線グラフのバツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
真紅にヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
option: フォントの色をミディアムブルーに設定する	color = 'mediumblue'
実数のcos	math.cos(x)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図のクロスマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
二つ並べてイテラブルをヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ライトサーモン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
数を小数点第一位で丸める	round(x, 1)
日付時刻データの時間を見る	aDatetime.hour
整数を浮動小数点数で割った余り	x % y
ダークグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
線形回帰分析を行う	model = sklearn.linear_model.LinearRegression()
'A'列の値によってデータフレームをグループ化する	df.groupby('A')
データフレームの列を柱状グラフにする	plt.hist(df[column])
自然対数の底	math.e
直前の値でデータフレームのリスト列の欠損値を補う	df[aList].fillna(method='ffill')
バイアスなしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
青緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームを表示するとき折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
２つのデータフレームを異なる列をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
整数nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
書き込み用にファイルを文字列の示すエンコーディングでオープンする]	open(filepath, mode='w', encoding=s)
棒グラフをラベンダーブラッシュ色を用いて描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
横棒グラフをカーキ色として描画する	plt.barh(データ列x, データ列y, color='khaki')
option: 行列のデータ型を指定する	dtype = bool
ファイルの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
データフレームのインデックスの一覧を見る	df.index
グリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
折れ線グラフの大バツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
十六進文字列をbytesizeバイトのバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
シアン色としてヒストグラムを描画する	plt.hist(データ列, color='cyan')
線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
ダークスレートブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレームの中の列を等量で分割数nでビニングする	pd.qcut(df[col], n)
文字列の開始位置からと終了位置までの範囲に部分文字列が含まれない	s.find(sub, start, end) == -1
折れ線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列x, データ列y, color='lavenderblush')
日付データにn分分、加える	aDate + datetime.timedelta(minutes=n)
ファイルからストリームを開いて]fileとする	file = open(filepath)
データフレームのリスト列のNaNを最大値に変更する	df[aList].fillna(df[aList].max())
ヒストグラムの色をダークマゼンタに指定する	plt.hist(データ列, color='darkmagenta')
データフレームから重複した行を削除して、更新する	df.drop_duplicates(inplace=True)
棒グラフを青色として描画する	plt.bar(データ列x, データ列y, color='blue')
日付時刻データからn時間分、減らす	aDatetime - datetime.timedelta(hours=n)
クラス分類の正確さを計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
2進文字列を整数にする	int(s, 2)
データフレームのリストカラムの未入力値をxにする	df[aList].fillna(x)
nが5で割り切れるか	n % 5 == 0
データフレームの列のどの値が最も現れるか見る	df[col].mode()
印字できる文字を全て見る	string.printable
散布図をミントクリーム色を使って描画する	plt.scatter(データ列x, データ列y, color='mintcream')
イテラブルの変化を点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
組の中の最小値を計算する	min(aTuple)
スカイブルーにヒストグラムの色を変更する	plt.hist(データ列, color='skyblue')
カラーバーを横向きでプロットする	plt.colorbar(orientation='horizontal')
線グラフの色をアイボリーに指定する	plt.plot(データ列x, データ列y, color='ivory')
option: フォントの色をライトサーモンに設定する	color = 'lightsalmon'
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
文字列全体が正規表現に複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
配列の標準偏差を求める	np.std(aArray)
分子n、分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
折れ線グラフを赤い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
散布図の菱形マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
文字列を文字コード列にする	[ord(ch) for ch in s]
データフレームのリストカラムの記述統計量	df[aList].describe()
折れ線グラフのポイント印の太さを変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
シーケンスから新しいカウンタを作成する	collections.Counter(iterable)
option: ダークスラテグレーを使用する	color = 'darkslategray'
リストの中の最も小さい値	min(aList)
n個に配列をビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームのリストカラムのpercent分位数を計算する	df[aList].quantile(percent/100)
再帰の最大回数を上げる	sys.setrecursionlimit(1000000)
組を引数として展開してプリントする	print(*aTuple)
部分文字列によって文字列を区切る	s.split(sub)
列名リストでデータフレームを整列して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
縦棒グラフを描画し、、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
ミディアムターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
データフレームのカラムの中に文字列が存在するか確認する	df[col].isin([value])
option: 欠損値も含める	dropna = True
option: 印を▽に変更する	marker = 'v'
赤い丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o', c='r')
option: タブを区切りで使う	sep = '\t'
データフレームのカラムを1000の位で四捨五入して、整数にする	df[col].round(-3).astype(int)
黒いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
K最近傍法として回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
option: ローングリーンにグラフの色を設定する	color = 'lawngreen'
カラムの標本標準偏差	ds.std()
線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
option: グラフの色をダークグリーンに変更する	color = 'darkgreen'
エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
散布図をrgbの四角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
実行を強制的に終了する	sys.exit()
option: 青色を用いる	color = 'blue'
option: 色をミディアムオーキッドに指定する	color = 'mediumorchid'
ケンドールの相関係数を使う	scipy.stats.kendalltau(データ列, データ列2)
列を等量でビン数nを使ってビン分割する	pd.qcut(ds, n)
折れ線グラフの▼マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
rgbのダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストとイテラブルの散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
浮動小数点数の三乗	x ** 3
折れ線グラフの丸マーカーの色を変える	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
スチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
option: グラフの色をバイオレットにセットする	color = 'violet'
option: サーモンにグラフの色をセットする	color = 'salmon'
実数の２乗を求める	x ** 2
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
データフレームから一番左の列を除く	df[df.columns[1:]]
データ列の各データ値の出現数を計算する	ds.value_counts()
プロットの色テーマをパステル調にする	sns.set(pallete='pastel')
文字列中にひとつでも非英数字が含まれるか判定する	any(not c.isalnum() for c in s)
option: フォントの色をブルーバイオレットに指定する	color = 'blueviolet'
ファイルを開いて]、読み込みストリームを使う	open(filepath, mode='r')
文字列の先頭でパターンにケースを無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
ライトコーラルにヒストグラムの色を変更する	plt.hist(データ列, color='lightcoral')
データフレームのリスト列の相関行列をヒートマップとして描画する	sns.heatmap(df[aList].corr())
辞書のコピーを生成する	dict(aDict)
数値の変数を数式で置き換える	e.subs(z, e2)
データフレームのカテゴリデータをダミー変数にする	pd.get_dummies(df)
線グラフの色をダークマゼンタに変更する	plt.plot(データ列x, データ列y, color='darkmagenta')
ファイル全体をリストとして読み込む	f.readlines()
数の複素数	complex(x)
ヒストグラムをドジャーブルー色を使って描画する	plt.hist(データ列, color='dodgerblue')
データフレームのNaNを最頻値にセットする	df.fillna(df.mode().iloc[0])
キューに要素をenqueueする	deq.appendleft(element)
option: ダークオーキッドにフォントの色を指定する	color = 'darkorchid'
nからstep間隔で無限に数え上げるする	itertools.count(start=n, step=step)
二つのオブジェクトが等しいか確認する	obj == obj2
nを十六進表現にする	hex(n)
データフレームをグループ化しそれぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
ファイルからベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
文字列リストを連結し、ひとつの文字列にする	''.join(aStringList)
データフレームを列によって昇順に並べ直して、更新する	df.sort_values(by=column, ascending=True, inplace=True)
Pandasで、書式を用いてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
nとn2のビット積	n & n2
option: ゴールド色を用いる	color = 'gold'
データフレームを列の値によってまとめた表	df.groupby(column)
主成分分析で多次元データをパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
赤い三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームを'A'列と'B'列によって小さい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
カテゴリデータを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
２つの配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
データフレームの全カラムを散布図を用いてプロットする	sns.pairplot(df)
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgray')
リストの末尾から値を得る	aList.pop()
日付データの日を見る	aDate.day
散布図をチョコレート色を用いて描画する	plt.scatter(データ列x, データ列y, color='chocolate')
線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
ヒストグラムの色をプラムに指定する	plt.hist(データ列, color='plum')
文字列内にひとつでも小文字が含まれる	any(c.islower() for c in s)
ディムグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
オブジェクトひとつのタプル	(element,)
データフレームを'A'列と'B'列によって昇順に並べ直す	df.sort_values(by=['A', 'B'], ascending=True)
折れ線グラフの左三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: ダークカーキ色を用いる	color = 'darkkhaki'
アクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
二つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
リストの最後からn番目以前の部分を取り出す	aList[:-n]
データフレームの中の列を中央値でビニングする	pd.qcut(df[col], 2)
option: ホワイトスモークを使う	color = 'whitesmoke'
散布図をダークスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
タイムスタンプデータが月曜日か	aDatetime.weekday() == 0
プラットホームがウィンドウズか調べる	sys.platform.startswith('win32')
配列を中央値で分割する	pd.qcut(aArray, 2)
データフレームのカラムを散布図でグラフ化して、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
イテラブルと配列についてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
赤い破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
L2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
横棒グラフをダークカーキ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
書式を辞書で文字列整形する	formatText.format_map(aDict)
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
option: 文字コードをEUCに変更する	encoding = 'euc_jp'
散布図の左三角印を赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
縦棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
SJISで文字列をバイト列にする	s.encode(encoding='sjis', errors='ignore')
マッピングの項目数	len(aDict)
データフレームの各グループ毎の平均値	df.groupby(column).mean()
紺碧色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgrey')
分類モデルの予測値と目的変数を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
小数点数の仮数	math.frexp(x)[0]
グラフの用途をポスターにセットする	sns.set(context='poster')
option: ダークシアグリーンにグラフの色を設定する	color = 'darkseagreen'
各列毎にデータフレームをグループ化し、、列の平均値を求める	df.groupby(column)[column2].mean()
変数を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
データフレームから破壊的に重複を消す	df.drop_duplicates(inplace=True)
option: ▽印を使う	marker = 'v'
オブジェクトはリストかタプル	isinstance(obj, (list)
列をキーにして２つのデータフレームを左ジョインする	pd.merge(df, df2, on=column, how='left')
散布図に右三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='>')
カラムを十の位で丸める	ds.round(-1)
option: 書き込み用に指定する	mode = 'w'
散布図にrgbの右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ファイルパスからの読み込みストリームを見る	open(filepath)
実線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
option: ライトサーモンを使用する	color = 'lightsalmon'
ヒストグラムの色をハニーデューにする	plt.hist(データ列, color='honeydew')
散布図に黒い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
自然数個のものからk個取り出したときの並べ方	math.perm(n, k)
散布図をレベッカパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
横棒グラフをゴーストホワイト色を使って描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
option: クロスマーカーを使用する	marker = 'x'
折れ線グラフの左三角印を黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
カウンタの項目一覧を使う	aCounter.keys()
n2行n列の２次元リスト	[[0] * n for _ in range(n2)]
降順でデータフレームをインデックスによってソートする	df.sort_index(ascending=False)
２つのデータフレームを列をキーにして結合する	pd.merge(df, df2, on=column)
整数nの二進数表記	bin(n)
option: ライトスレイグレー色を使用する	color = 'lightslategrey'
option: ブランチドアーモンドを使う	color = 'blanchedalmond'
'A'列と'B'列の値でデータフレームを集約する	df.groupby(['A', 'B'])
色名からカラーコードを求める	matplotlib.colors.cnames[色名]
セットから別の集合を全て取り除く	aSet.difference_update(aSet2)
ピアソンとしてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
ライトシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
nが5の倍数	n % 5 == 0
データ列をフォーマットfmtとしてPandasの日付型に変換する	pd.to_datetime(ds, format=fmt)
ビン数nでデータフレームの中の列をビンニングする	pd.cut(df[col], n)
ファイルパスから読み込みストリームを開いて]、fとする	f = open(filepath, mode='r')
スピアマン相関係数としてデータフレームの相関行列	df.corr(method='spearman')
折れ線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームをTSV形式を用いてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
ヒストグラムの色をサンディーブラウンに指定する	plt.hist(データ列, color='sandybrown')
option: パパイヤウィップ色を用いる	color = 'papayawhip'
モジュールとして自分自身を	sys.modules[__name__]
option: NaNを先頭に来るようにする	na_position = 'first'
追加できるようにファイルをオープンする]	open(filepath, mode='a')
nをn2で割った剰余	n % n2
横棒グラフをドジャーブルー色を使って描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
option: 菱形印を用いる	marker = 'D'
集合から別のセットとの共通要素を全て除去する	aSet.symmetric_difference_update(aSet2)
線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
データフレームの中で、カラムと列の重複を見る	df.duplicated(subset=[column, column2])
組の末尾を取り除く	aTuple[:-1]
今日が土曜日か調べる	datetime.datetime.today().weekday() == 5
文字列中の正規表現を新しい文字列で置換する	re.sub(pattern, newsub, s)
ひとつでも非アスキー文字が文字列中に含まれるかどうか調べる	any(not c.isascii() for c in s)
option: ダーク・スラテグレーにグラフの色を設定する	color = 'darkslategrey'
組の最初のn要素を取り除く	aTuple[n:]
データフレームを各グループごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
カウンタの全カウントを求める	aCounter.total()
データフレームをまとめて小数点以下n桁で丸める	df.round(n)
データフレームを二つの列によって並べ、、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
データ列の欠損値を最小値に指定する	ds.fillna(ds.min())
配列を縦ベクトルに変形する	aArray.reshape(-1, 1)
線グラフをダークスラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategray')
辞書にキーワード引数で追加する	aDict.update(**kwargs)
チョコレート色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームのカラムが何日か確認する	df[col].dt.day
ヒストグラムの色をダークゴールデンロッドに変更する	plt.hist(データ列, color='darkgoldenrod')
リストからひとつランダムに選ぶ	random.choice(iterable)
散布図のダイアモンドマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
option: ダークオリーブグリーン色を用いる	color = 'darkolivegreen'
縦棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
option: グラフの色をダークサーモンにセットする	color = 'darksalmon'
データフレームを列を用いて大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
線グラフをゴールド色を用いて描画する	plt.plot(データ列x, データ列y, color='gold')
等間隔の配列	np.arange(開始値, 終了値, 等差)
集合が空集合でないか調べる	len(aSet) != 0
0で全要素を初期化した配列	np.zeros(要素数)
nが偶数かどうか判定する	n % 2 == 0
行列は何次元か調べる	aArray.ndim
データフレームの列名を列挙する	df.columns
ファイル名がテキストファイルかどうか調べる	filename.endswith('.txt')
リストとデータ列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
replに一度にデータフレームを正規表現で置き換える	df.replace(pattern, repl, regex=True)
データフレームの中に文字列とがいくつ含まれるか数える	df.isin([value, value2]).sum()
option: フォントの色をブラックに変更する	color = 'black'
2つのカウンタの共通する要素	aCounter & aCounter2
文字列を最後の部分文字列で二つに区切って、前半の文字列を見る	s.rpartition(sub)[0]
度数分布図の範囲をする	plt.hist(データ列, range=(start, end))
実数のkを底とする対数	math.log(x, k)
ファイルからフォルダ名を使う	os.path.dirname(filepath)
option: グラフの色をグレーに変更する	color = 'grey'
線グラフを色付きの破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
クラス分類をアンサンブル学習で行う	sklearn.ensemble.VotingClassifier()
実数の逆双曲線余弦を求める	math.acosh(x)
1で全要素を初期化したベクトル	np.ones(要素数, dtype=np.int)
ヒストグラムの色をブラックに指定する	plt.hist(データ列, color='black')
データ列の値はNaNか調べる	ds.isna()
option: ポイントマーカーを加える	marker = '.'
データ列の中に文字列と日付データが含まれるか調べる	ds.isin([value, value2])
データフレームのカラムの歪度を求める	df[col].kurt()
線グラフをフローラルホワイト色として描画する	plt.plot(データ列x, データ列y, color='floralwhite')
散布図に赤い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームから数値データの列のみ選択する	df.select_dtypes('number')
文字列の最初を見る	s[0]
データフレームの中の列をビン数nでビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
横方向に3つのデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
ゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
カデットブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
データフレームの列の文字列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
柱状グラフを描画する	plt.hist(データ列)
マップの値を列挙する	aDict.values()
日付データのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
パレットトルコイズにヒストグラムの色を変更する	plt.hist(データ列, color='paleturquoise')
ヒートマップを用いてクラス分類の予測精度を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
折れ線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
散布図をリネン色を使って描画する	plt.scatter(データ列x, データ列y, color='linen')
リストを分割数nでビン分割する	pd.cut(aList, n)
折れ線グラフの丸マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
option: マーカーを△に変更する	marker = '^'
リストにリストを追加して広げる	aList.extend(aList2)
タイムスタンプデータをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
データフレームを各列毎にグループ分けして、文字列というグループの個数を求める	df.groupby(column).size()[s]
日付データにn週間分加算する	aDate + datetime.timedelta(weeks=n)
散布図をマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='magenta')
文字列の中の複数行対応としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
散布図の丸印の色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
両端キューに要素をスタックする	deq.append(element)
折れ線グラフにポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
両端キュー	collections.deque()
データ列を100の位で四捨五入する	ds.round(-2)
データフレームを列で集計して、列の要約統計量を求める	df.groupby(column).describe()[column2]
データフレームを列によってグループ分けしてそれぞれのグループごとの最小値を求める	df.groupby(column).min()
データフレームの列を1000の位で丸める	df[col].round(-3)
配列とデータ列の散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムをインディゴ色を使って描画する	plt.hist(データ列, color='indigo')
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
三つのデータフレームを縦向きに連結する	pd.concat([df, df2, df3], axis=0)
xが1、もしくは2か確認する	x == 1 or x == 2
データフレームのリストで指定されたカラムの相関行列ケンドール相関係数でを求める	df[aList].corr(method='kendall')
分類モデルのF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
SJISで書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='shift_jis')
2進数文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
インディゴ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
折れ線グラフの菱形印を黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列をPandasの日付型に変換する	pd.to_datetime(s)
データフレームの重複していない行を抽出する	df[not df.duplicated(keep=False)]
単回帰モデルを学習する	model.fit(説明変数, 目的変数)
空のセット	set()
タンジェント	math.tan(x)
nがn2で割り切れるかどうか	n % n2 == 0
文字列が部分文字列で終わるか確認する	s.endswith(sub)
データラベルをグラフに被らない位置に表示する	plt.legend(loc='best')
論文にグラフの用途を設定する	sns.set(context='paper')
バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
option: グラフの色を青緑に設定する	color = 'turquoise'
nが負の数か	n < 0
タプルの個数	len(aTuple)
横棒グラフをスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='skyblue')
rgbの右三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: フォントの色をリネンに変更する	color = 'linen'
文字列中にひとつでも非大文字が含まれるかどうか調べる	any(not c.isupper() for c in s)
データをL1ノルムとして正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
JSONLファイルにCSVファイルとしてデータフレームを書き込む	df.to_csv(filename)
グラフの大きさを指定する	plt.figure(figsize=(横幅, 高さ))
シーケンスを双方向キューにする	collections.deque(iterable)
縦棒グラフを描画し、、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
文字列が文字列リストのいづれかどうか調べる	s in aStringList
折れ線グラフの色をピーチパフに指定する	plt.plot(データ列x, データ列y, color='peachpuff')
リストとリストについて散布図をプロットし、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
ダークサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='darksalmon')
データフレームの列がリストに含まれるデータを取り出す	df[df[column].isin(aList)]
ライトグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='lightseagreen')
ブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
グリーンイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
データフレームの未入力値をxで埋める	df.fillna(x)
データ列の欠損値を最頻値に指定する	ds.fillna(ds.mode().iloc[0])
ヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームを降順に２つの列によってによってソートする	df.sort_values(by=['A', 'B'], ascending=False)
リストの平均を求める	sum(aList)/len(aList)
文字列がアスキー文字かどうか調べる	s.isascii()
今日は何月か知る	datetime.datetime.today().month
日付データからn時間分減算する	aDate - datetime.timedelta(hours=n)
option: フォントの色をスレートブルーに指定する	color = 'slateblue'
ファイルパスをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
1からnまでの整数列を求める	list(range(1, n+1))
浮動小数点数の小数点以下を丸める	round(x)
ヒストグラムをライムグリーン色を用いて描画する	plt.hist(データ列, color='limegreen')
四分位点でスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データフレームのリストカラムの相関行列スピアマンとして	df[aList].corr(method='spearman')
シーグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
データフレームを表示するとき、表示可能な最大行数をnに指定する	pd.set_option('display.max_rows', n)
線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
データフレームから最後の列を消す	df[df.columns[:-1]]
データフレームのリストカラムが正規分布からどれだけ、歪んでいるか調べる	df[aList].kurt()
散布図の四角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
文字列の先頭でパターンにASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
マッピングをJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
スクリプトファイルと同じフォルダのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
散布図をダークオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='darkorange')
ライムグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
option: パウダーブルーにフォントの色を設定する	color = 'powderblue'
２つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
数列と数列について散布図を描画して、▼マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ライトグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
オプションで出力先を標準出力に設定する	file = sys.stdout
折れ線グラフに青いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
線グラフをアイボリー色を使って描画する	plt.plot(データ列x, データ列y, color='ivory')
データフレームの中の列を等量でn個に分割する	pd.qcut(df[col], n)
デック中の値のインデックス	deq.index(element)
データ列をビン数nとしてビン分割する	pd.cut(ds, n)
option: 色をクリムゾンに設定する	color = 'crimson'
カウンタをマッピングで更新する	aCounter.update(aDict)
文字列をカンマを用いて分割し、、列挙する	s.split(',')
散布図を赤いポイントマーカーを用いて描く	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームの列が文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
ピアソン積率相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
データ列の日にちを見る	ds.dt.day
分類モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
横棒グラフをホワイトスモーク色を用いて描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
列をキーとして二つの表を内部結合する	pd.merge(df, df2, on=column, how='inner')
空白で末尾から文字列を区切る	s.rsplit()
ヒストグラムをスチールブルー色を用いて描画する	plt.hist(データ列, color='steelblue')
棒グラフをライム色を用いて描画する	plt.bar(データ列x, データ列y, color='lime')
折れ線グラフに赤い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
option: チョコレートを用いる	color = 'chocolate'
option: 追加モードに変更する	mode = 'a'
文字列が全て英数字かどうか確認する	s.isalnum()
黄色にヒストグラムの色を設定する	plt.hist(データ列, color='yellow')
二つのカウンタのいずれかに含まれるデータ	aCounter | aCounter2
ダークグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
数値を部分分数に展開する	sympy.apart(e)
散布図の丸マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
空のリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
横棒グラフをライトサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
現在実行中の例外を情報を知る	sys.exc_info()
キーがマッピングに存在し、いるか調べる	key in aDict
リストに文字列を加える	aList.append(element)
文字列の最後から改行を除く	s.rstrip('\n')
データフレームの中の欠損値を落とす	df.dropna()
折れ線グラフの四角印を青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームのリストカラムの中に文字列と日付データがいくつ含まれるか求める	df[aList].isin([value, value2]).sum()
黄色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
散布図をスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='slateblue')
型が名前付きタプルか判定する	issubclass(C, tuple)
集合のすべての要素が別の集合に含まれる	aSet.issubset(aSet2)
文字列の開始位置と終了位置の間に部分文字列がある	s.find(sub, start, end) != -1
イテラブルにリストを続ける	itertools.chain(iterable, iterable2)
折れ線グラフをライトスレイグレー色を使って描画する	plt.plot(データ列x, データ列y, color='lightslategray')
棒グラフをリネン色を用いて描画する	plt.bar(データ列x, データ列y, color='linen')
ヒストグラムを点線として描画する	plt.hist(データ列, linestyle='dotted')
破壊的に降順に表を'A'列と'B'列を用いてソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
列が正規分布からどの程度歪んでいるか見る	ds.kurt()
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategrey')
option: ゴーストホワイト色を用いる	color = 'ghostwhite'
イテラブルとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ファイルが存在しない	not os.path.exists(filepath)
ロバスト回帰モデルを作成する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
数列とリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ヒストグラムを描画し合計を1にする	plt.hist(データ列, density=True)
ラインを青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
文字列中の片仮名をひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
青い点線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ヒストグラムと勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
predicateFuncがTrueとなるイテラブルの要素を取り出す	itertools.takewhile(predicateFunc, iterable)
データ列の四分位を描画する	plt.boxplot(データ列)
組の最初	aTuple[0]
縦棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
列を集合にする	set(iterable)
option: グラフの色をスプリンググリーンに指定する	color = 'springgreen'
データフレームの第二四分位数	df.median()
線形モデルのバイアス	model.intercept_
パラメータについて数値の積分を算出する	sympy.integrate(e, z)
列を配列として取り出す	df[column].values
縦棒グラフをシエナ色として描画する	plt.bar(データ列x, データ列y, color='sienna')
ベクトルの累積積	np.cumprod(aArray)
ふたつの集合が集合と互いに素かどうか	aSet.isdisjoint(aSet2)
線グラフの色をゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='goldenrod')
ライトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightblue')
線グラフをスノー色として描画する	plt.plot(データ列x, データ列y, color='snow')
縦棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
option: オリベドラブ色を使用する	color = 'olivedrab'
ファイル名のセパレータ記号	os.sep
オールドレース色として散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームのカラムのNaNを最小値に設定する	df[col].fillna(df[col].min())
オプションで出力先を標準エラーに変更する	file = sys.stderr
配列とリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
浮動小数点数を百の位で四捨五入する	round(x, -2)
データフレームの列がxかつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
データフレームの中の欠損値の合計を求める	df.isna().sum()
ヒストグラムをパールゴールデンロッド色を用いて描画する	plt.hist(データ列, color='palegoldenrod')
プロット中のフォントを設定する	sns.set(font=フォント名)
配列の行ごとの平均を求める	np.mean(aArray, axis=1)
CSVタブ区切りのファイルをn番目のカラムをインデックスにして読む	pd.read_csv(filename, index_col=n)
縦棒グラフをミスティローズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mistyrose')
n2がn以上かつ、n3以下か調べる	n <= n2 and n2 <= n3
option: ダークゴールデンロッドにグラフの色を変更する	color = 'darkgoldenrod'
rgbの上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの25パーセンタイル	df.quantile(0.25)
文字列が組に含まれないかどうか調べる	element not in aTuple
横棒グラフをミスティローズ色として描画する	plt.barh(データ列x, データ列y, color='mistyrose')
JSON文字列を辞書に変換する	json.loads(jsonString)
平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
データフレームのデータ型リストを使う	df.dtypes
ヒストグラムを一点鎖線として描画する	plt.hist(データ列, linestyle='dashbot')
散らばりを可視化する	plt.scatter(データ列x, データ列y)
折れ線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
ライトグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
ゴーストホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='ghostwhite')
文字列を小文字にする	s.casefold()
ライトグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームを二つの列の値によって集計して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームの指定した列をリストに変換する	df[column].values.tolist()
データフレームのカラムのpercent分位数を算出する	df[col].quantile(percent/100)
二つのデータフレームを横向きに連結する	pd.concat([df, df2], axis=1)
回帰分析を確率的勾配降下を用いてする	model = sklearn.linear_model.SGDRegressor()
データフレームのリストカラムのNaNを最小値で埋める	df[aList].fillna(df[aList].min())
両端キューのstart〜endの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
option: オレンジにグラフの色を設定する	color = 'orange'
散布図をカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='khaki')
現在の再帰の最大回数を調べる	sys.getrecursionlimit()
浮動小数点数の2進対数を求める	math.log2(x)
オブジェクトは辞書クラス	isinstance(obj, dict)
option: 色をアンティークホワイトにする	color = 'antiquewhite'
リスト中の要素が全て真	all(aList)
データ列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
文字列を改行を用いて区切る	s.splitlines()
線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
上位集合もしくは等しい	aSet > aSet2
棒グラフをダークオリーブグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
散布図をやわらかい青色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
表データから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')

数値を出力する	print(value)
二つの値をプリントする	print(value, value2)
三つの変数を順に出力する	print(value, value2, value3)
改行なしに文字列を出力する	print(value, end='')
値の出力を改行せず行う	print(value, end='')
改行しないで二つの数値をプリントする	print(value, value2, end='')
組を展開してプリントする	print(*aTuple)
＜オプション＞カンマを区切りで使う	sep = ','
＜オプション＞タブを分割記号で使う	sep = '\t'
＜オプション＞スラッシュを分割記号で使用する	sep = '/'
＜オプション＞改行を分割記号で使う	sep = '\n'
＜オプション＞文字列をセパレータで使用する	sep = s
2つの変数をカンマで区切ってプリントする	print(value, value2, sep=',')
２つの文字列をタブで区切って表示する	print(value, value2, sep='\t')
コロンで区切って二つの文字列を出力する	print(value, value2, sep=':')
二つの変数をスラッシュで区切って表示する	print(value, value2, sep='/')
二つの値を改行で区切ってプリントする	print(value, value2, sep='\n')
二つの数値を文字列で区切ってプリントする	print(value, value2, sep=s)
こんにちは世界とプリントする	print('Hello World')
黒色で文字列を表示する	print(f'\033[30m{value}\033[0m')
変数を赤色でプリントする	print(f'\033[31m{value}\033[0m')
数値を緑色で表示する	print(f'\033[32m{value}\033[0m')
実行結果を黄色でプリントする	print(f'\033[33m{value}\033[0m')
変数を青色で出力する	print(f'\033[34m{value}\033[0m')
変数をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
水色で文字列をプリントする	print(f'\033[36m{value}\033[0m')
文字列を白色で出力する	print(f'\033[37m{value}\033[0m')
文字列を太文字で出力する	print(f'\033[1m{value}\033[0m')
変数をアンダーライン付きでプリントする	print(f'\033[4m{value}\033[0m')
数値を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
変数を黒色にする	f'\033[30m{value}\033[0m'
リストを赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
変数を赤色にする	f'\033[31m{value}\033[0m'
値を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
変数を緑色にする	f'\033[32m{value}\033[0m'
値を黄色で表示できる文字列にする	f'\033[33m{value}\033[0m'
文字列を黄色化する	f'\033[33m{value}\033[0m'
数値を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
数値を青色にする	f'\033[34m{value}\033[0m'
文字列をマゼンタで表示できる文字列に変換する	f'\033[35m{value}\033[0m'
変数をマゼンタにする	f'\033[35m{value}\033[0m'
値をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
変数をシアンにする	f'\033[36m{value}\033[0m'
変数を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
変数を白色にする	f'\033[37m{value}\033[0m'
文字列を太字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
リストを太字化する	f'\033[1m{value}\033[0m'
文字列を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
文字列を下線付き化する	f'\033[4m{value}\033[0m'
xの小数点以下'1'桁まで表示する	print(':.1f'.format(x))
xの小数点以下'5'桁までプリントする	print(':.5f'.format(x))
xの小数点以下'4'桁の文字列にする	':.4f'.format(x)
xが真かどうか判定する	bool(x)
商と余りを同時に求める	divmod(x, y)
二変数の最も大きい値を計算する	max(x, y)
２変数の最小値	min(x, y)
3変数の最も大きい値を求める	max(x, y, z)
三つの最小値	min(x, y, z)
nullに等しい識別子	None
コレクションを使用する	import collections
両端キュー	collections.deque()
シーケンスから両端キューを作る	collections.deque(iterable)
列をキューにする	collections.deque(iterable)
上限を指定して、両端キュー	collections.deque(maxlen=n)
最大長nの双方向キューを生成する	collections.deque(maxlen=n)
最大長nの双方向キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
キューの左側に数値を付け加える	deq.appendleft(element)
数値をキューにエンキューする	deq.appendleft(element)
双方向キューの末尾に要素を付け加える	deq.append(element)
要素を両端キューにプッシュする	deq.append(element)
リストの要素を両端キューの先頭に追加する	deq.extendleft(iterable)
両端キューの右側にリストの値を追加する	deq.extend(iterable)
要素をデックのn番目に挿入する	deq.insert(n, element)
値を両端キューの先頭から取り除く	deq.popleft()
双方向キューをデキューする	deq.popleft()
両端キューの末尾から値を削除する	deq.pop()
双方向キューから最初の要素を取り出す	deq.remove(element)
双方向キューを空にする	deq.clear()
n個分右に双方向キューの要素を回転させる	deq.rotate(n)
両端キューの値を左にn個分回転させる	deq.rotate(-n)
キューの最大長を見る	deq.maxlen
キューのサイズ	len(deq)
両端キューが空である	len(deq) == 0
双方向キューが空でないか調べる	len(deq) != 0
スタックの中に数値が含まれてるか調べる	element in deq
双方向キューの先頭を使う	deq[0]
スタックの右	deq[-1]
キューのn番目	deq[n]
双方向キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
双方向キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
両端キューのstart番目からend番目の値	collections.deque(itertools.islice(deq, start, end))
両端キュー中の要素の位置	deq.index(element)
両端キュー中の値をカウントする	deq.count(element)
両端キューの値をインプレースに反転する	deq.reverse()
逆順のデック	reversed(deq)
両端キューをリストにする	list(deq)
双方向キューをタプルにする	tuple(deq)
新しい多重集合をリストから作る	collections.Counter(iterable)
イテラブルをカウンタにする	collections.Counter(iterable)
辞書から多重集合を作成する	collections.Counter(aDict)
タプルを計数器に変換する	collections.Counter(aDict)
カウンタのそれぞれの項目を、そのカウントだけリストとして得る	aCounter.elements()
高頻出方からカウンタを列挙する	aCounter.most_common()
カウンタを多い方からリストとして得る	aCounter.most_common()
少ない順にカウンタを列挙する	aCounter.most_common()[::-1]
カウンタを低頻出方からリストとして得る	aCounter.most_common()[::-1]
カウンタの上位をリストとして得る	aCounter.most_common(k)
カウンタの最頻出な要素	aCounter.most_common()[0]
カウンタから最頻出な要素の件数	aCounter.most_common()[1]
カウンタをシーケンスで更新する	aCounter.update(iterable)
シーケンスをカウントして、カウンタを更新する	aCounter.update(iterable)
カウンタをマッピングで更新する	aCounter.update(aDict)
カウンタからリストを出現回数して減らす	aCounter.subtract(iterable)
カウンタからタプルを引く	aCounter.subtract(aDict)
カウンタの要素のカウントを見る	aCounter[element]
カウンタのキー一覧	aCounter.keys()
カウンタの要素をリストとして得る	aCounter.keys()
カウンタの項目数を使う	len(aCounter)
カウンタをセットに変換する	set(aCounter)
ペアリストpairsからカウンタを生成する	collections.Counter(dict(pairs))
カウンタからゼロカウントを削除する	+aCounter
カウンタ同士で共通部分	aCounter & aCounter2
2つのカウンタの共通する値	aCounter & aCounter2
カウンタ間で交差演算する	aCounter & aCounter2
カウンタ同士で∪	aCounter | aCounter2
二つのカウンタのいずれかに含まれるデータを求める	aCounter | aCounter2
カウンタ同士で和集合演算する	aCounter | aCounter2
クラスが名前付きタプル	issubclass(C, tuple)
が名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ルートの階層化マップ	collections.ChainMap()
辞書を階層化マップにする	collections.ChainMap(aDict)
タプルをネスト化する	collections.ChainMap(aDict)
２つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
日付をインポートする	import datetime
時間を用いる	import time
今日の日付時刻を求める	datetime.datetime.now()
year年をタイムスタンプにする	datetime.datetime(year=year, month=1, day=1)
year年day月のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
日付と時刻からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
エポック秒からタイムスタンプに変換する	datetime.datetime.fromtimestamp(timestamp)
ISO8601の文字列からタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
文字列からformatのパターンを用いて日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
本日のローカルなタイムスタンプを見る	datetime.datetime.today()
タイムスタンプデータの日付	aDatetime.date()
日付時刻データの時刻を使う	aDatetime.time()
本日のローカルな日付	datetime.date.today()
日付時刻データの年を使う	aDatetime.year
現在が何年か知る	datetime.datetime.today().year
タイムスタンプデータの月数	aDatetime.month
日付データの月数を使う	aDate.month
現在が何月か知る	datetime.datetime.today().month
タイムスタンプデータの日数	aDatetime.day
日付データの日数を使う	aDate.day
本日の日	datetime.datetime.today().day
現在は何日か知る	datetime.datetime.today().day
タイムスタンプデータの曜日を整数で使う	aDatetime.weekday()
日付データの曜日を整数で求める	aDate.weekday()
今日の曜日を整数で使う	datetime.datetime.today().weekday()
本日は何曜日か知る	datetime.datetime.today().weekday()
日付時刻データが月曜日か判定する	aDatetime.weekday() == 0
日付データが月曜日	aDate.weekday() == 0
本日が月曜日かどうか調べる	datetime.datetime.today().weekday() == 0
日付時刻データが火曜日かテストする	aDatetime.weekday() == 1
日付データが火曜日かどうか調べる	aDate.weekday() == 1
今日が火曜日か調べる	datetime.datetime.today().weekday() == 1
タイムスタンプデータが水曜日	aDatetime.weekday() == 2
日付データが水曜日か	aDate.weekday() == 2
現在が水曜日か調べる	datetime.datetime.today().weekday() == 2
タイムスタンプデータが木曜日かどうか	aDatetime.weekday() == 3
日付データが木曜日か	aDate.weekday() == 3
本日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
日付時刻データが金曜日か	aDatetime.weekday() == 4
日付データが金曜日かどうか確認する	aDate.weekday() == 4
本日が金曜日	datetime.datetime.today().weekday() == 4
日付時刻データが土曜日かどうか調べる	aDatetime.weekday() == 5
日付データが土曜日	aDate.weekday() == 5
本日が土曜日か	datetime.datetime.today().weekday() == 5
日付時刻データが日曜日か	aDatetime.weekday() == 6
日付データが日曜日かどうか調べる	aDate.weekday() == 6
今日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
今日をタプルに変換する	datetime.datetime.today().timetuple()
日付時刻データをISO書式の文字列にする	aDatetime.isoformat()
現在をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
タイムスタンプデータを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
今日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
本日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
日付時刻データの時間	aDatetime.hour
現在の時間数を使う	datetime.date.today().hour
日付時刻データの分を使う	aDatetime.minute
日付時刻データの秒数を使う	aDatetime.second
日付時刻データにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
タイムスタンプデータからn週間を減算する	aDatetime - datetime.timedelta(weeks=n)
日付時刻データにn日を加算する	aDatetime + datetime.timedelta(days=n)
日付データにn日分、加える	aDate + datetime.timedelta(days=n)
タイムスタンプデータからn日を減算する	aDatetime - datetime.timedelta(days=n)
タイムスタンプデータにn時間分加える	aDatetime + datetime.timedelta(hours=n)
日付データにn時間を足す	aDate + datetime.timedelta(hours=n)
日付データからn時間分、引く	aDate - datetime.timedelta(hours=n)
タイムスタンプデータにn分分、足す	aDatetime + datetime.timedelta(minutes=n)
日付データにn分を加える	aDate + datetime.timedelta(minutes=n)
日付時刻データからn分、減らす	aDatetime - datetime.timedelta(minutes=n)
日付データからn分減らす	aDate - datetime.timedelta(minutes=n)
タイムスタンプデータにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
日付データからn秒を減算する	aDate - datetime.timedelta(seconds=n)
タイムスタンプデータは日付時刻データより前	aDatetime < aDatetime2
日付データが日付データより前か	aDate < aDate2
日付時刻データが日付時刻データよりあとか調べる	aDatetime > aDatetime2
日付データは日付データより後ろか調べる	aDate > aDate2
タイムスタンプデータが日付時刻データと同時か調べる	aDatetime == aDatetime2
日付データは日付データと同時	aDate == aDate2
タイムスタンプデータと日付時刻データの時間差	aDatetime - aDatetime2
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
タイムスタンプデータと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
空の辞書を作る	{}
変数名をキーとして、辞書を作る	dict(name=element)
辞書のキーの値を見る	aDict[key]
辞書の項目名を列挙する	list(aDict)
タプルのキー一覧	list(aDict)
タプルの項目数	len(aDict)
マッピングをクリアする	aDict.clear()
辞書を浅く複製する	aDict.copy()
マッピングの浅いコピーを準備する	aDict.copy()
マッピングからキーの値	aDict.get(key)
マッピングのキーに対応した値	aDict.get(key)
タプルから項目名の値をエラーなく得る	aDict.get(key, None)
マップからキーの値か、もしくは要素を得る	aDict.get(key, element)
項目名が辞書に存在する	key in aDict
キーが辞書上で既に定義されている	key in aDict
キーが辞書にあるか確認する	key not in aDict
キーがタプル上でまだ定義されていない	key not in aDict
タプルの項目名とその値を列挙する	aDict.items()
マッピングの項目名とその値をペアとして取り出す	aDict.items()
マッピングの項目名を列挙する	aDict.keys()
タプルの項目名の一覧	aDict.keys()
マップの値を列挙する	aDict.values()
タプルの値の一覧	aDict.values()
要素が辞書の値として含まれているかどうか調べる	element in aDict.values()
要素はタプルの値に含まれていないか	element not in aDict.values()
マップのキーを要素に設定する	aDict[key] = element
辞書に要素を項目名として加える	aDict[key] = element
項目名がマップに存在しないとき、要素を追加する	aDict.setdefault(key, element)
マッピングに辞書の項目を追加する	aDict.update(aDict2)
タプルにキーワード引数で加えて、更新する	aDict.update(**kwargs)
ふたつのマップを合体する	aDict | aDict2
マッピングから項目名で指定したエントリをポップする	aDict.pop(key)
辞書から最後に追加した値をポップする	aDict.popitem()
タプルのキーと値を入れ替える	{v: k for k, v in aDict.items()}
二つのリストからマップを準備する	dict(zip(aList, aList2))
マップを浅くコピーする	dict(aDict)
辞書のコピーを準備する	dict(aDict)
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
ファイルパスのセパレータ記号を用いる	os.sep
ディレクトリ	os.getcwd()
カレント作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
ファイルパスの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ファイルパスから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
ファイルパスの拡張子	os.path.splitext(filepath)[1].lstrip('.')
ファイルパスからディレクトリ名を使う	os.path.dirname(filepath)
ファイルを絶対パスにする	os.path.abspath(filepath)
ファイルが存在するかどうか調べる	os.path.exists(filepath)
ファイルが存在しないかどうか調べる	not os.path.exists(filepath)
スクリプトファイルのパス	os.path.abspath(__file__)
スクリプトファイルのディレクトリ名を見る	os.path.dirname(os.path.abspath(__file__))
スクリプトファイルと同じディレクトリのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
ファイルパスからの入力ストリームを使う	open(filepath)
ファイルパスからストリームを読み込み、fileとする	file = open(filepath)
ファイルパスからストリームをオープンして]fileとする	file = open(filepath)
ファイルパスを読み込みモードでオープンする]	open(filepath, mode='r')
ファイルパスを読み込みできるように開く]	open(filepath, mode='r')
ファイルパスをオープンして]、読み込みストリームを見る	open(filepath, mode='r')
ファイルをバイナリモードとしてオープンする]	open(filepath, mode='rb')
ファイルをバイナリできるように開く]	open(filepath, mode='rb')
ファイルをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
書き込みモードでファイルをオープンする]	open(filepath, mode='w')
ファイルを書き込みできるように開く]	open(filepath, mode='w')
ファイルをオープンして]書き込みストリームを求める	open(filepath, mode='w')
バイナリ書き込みモードを用いてファイルをオープンする]	open(filepath, mode='wb')
ファイルをバイナリ書き込みできるように開く]	open(filepath, mode='wb')
ファイルパスをオープンして]バイナリ書き込みストリームを求める	open(filepath, mode='wb')
ファイルを追加モードを用いてオープンする]	open(filepath, mode='a')
ファイルを追加できるように開く]	open(filepath, mode='a')
ファイルを開いて]、追加ストリームを見る	open(filepath, mode='a')
ファイルパスを読み込み用に開き]、fとする	f = open(filepath, mode='r')
ファイルから読み込みストリームを開いて]fとする	f = open(filepath, mode='r')
ファイルをバイナリ用にオープンして]、fとする	f = open(filepath, mode='rb')
書き込みモードでファイルパスを開いて]fとする	f = open(filepath, mode='w')
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
バイナリ書き込み用にファイルパスを開いて]fとする	f = open(filepath, mode='wb')
ファイルを追加モードを用いてオープンして]、fとする	f = open(filepath, mode='a')
ファイルパスから追加ストリームを開き]、fとする	f = open(filepath, mode='a')
＜オプション＞読み込みモードに変更する	mode = 'r'
＜オプション＞追加用に設定する	mode = 'a'
ファイルパスをUTF8でオープンする]	open(filepath, encoding='utf-8')
ファイルをSJISで開く]	open(filepath, encoding='shift_jis')
ファイルパスをEUCでオープンする]	open(filepath, encoding='euc_jp')
ファイルをBOM付きとして開く]	open(filepath, encoding='utf_8_sig')
ファイルパスを文字コードtextでオープンする]	open(filepath, encoding=text)
ファイルを文字列の示すエンコーディングで開く]	open(filepath, encoding=s)
ファイルをUTF8として書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
書き込み用にファイルパスをSJISを使って開く]	open(filepath, mode='w', encoding='shift_jis')
ファイルをEUCとして書き込みできるように開く]	open(filepath, mode='w', encoding='euc_jp')
ファイルをBOM付きとして書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
書き込み用に文字コードtextとしてファイルをオープンする]	open(filepath, mode='w', encoding=text)
書き込み用にファイルを文字列の示すエンコーディングを用いてオープンする]	open(filepath, mode='w', encoding=s)
追加できるようにファイルをUTF8を使ってオープンする]	open(filepath, mode='a', encoding='utf-8')
ファイルをSJISを用いて追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
既存のファイルパスをEUCとして追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
追加できるようにBOM付きで既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
追加できるように既存のファイルパスを文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
既存のファイルを文字列の示すエンコーディングとして追加できるように開く]	open(filepath, mode='a', encoding=s)
＜オプション＞エンコーディングをUTF8に変更する	encoding = 'utf-8'
＜オプション＞文字コードをBOM付きに設定する	encoding = 'utf_8_sig'
＜オプション＞文字コードを文字コードtextに設定する	encoding = text
＜オプション＞文字コードを文字列の示すエンコーディングに指定する	encoding = s
＜オプション＞バッファリングのサイズを大きくする	buffering = 4096
＜オプション＞エラーがあるとき、例外を発生させる	errors = 'strict'
ファイルを解放する	f.close()
入力ストリームを全部、読み込む	f.read()
ファイルから1バイト、読む	f.read(1)
出力ストリームからn文字、読み込む	f.read(n)
ファイル全体をリストとして読み込む	f.readlines()
入力ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
出力ストリームに文字列を書く	f.write(s)
xを文字列に変換してストリームに書く	f.write(str(x))
実数が正の数か確認する	x > 0
実数が負の数	x < 0
浮動小数点数を二乗する	x ** 2
実数の二乗を算出する	x ** 2
数を三乗する	x ** 3
数の三乗	x ** 3
浮動小数点数のn乗	x ** n
浮動小数点数に実数を加える	x + y
浮動小数点数を実数から減ずる	x - y
実数に浮動小数点数を乗算する	x * y
浮動小数点数で実数を除算する	x / y
実数を浮動小数点数で除算して切り捨てる	x // y
実数を浮動小数点数で整数除算する	x // y
実数を実数で除算した余り	x % y
浮動小数点数を文字列に変換する	str(x)
浮動小数点数の複素数	complex(x)
実数を複素数にする	complex(x)
整数のn乗	pow(x, n)
浮動小数点数のn乗の実数剰余を計算する	pow(x, n, y)
実数のn乗して数による余り	pow(x, n, y)
浮動小数点数を小数点以下第一位で四捨五入する	round(x, 1)
実数を小数点以下で四捨五入する	round(x, n)
数を十の位で丸める	round(x, -1)
浮動小数点数を百の位で丸める	round(x, -2)
実数を万の位で四捨五入する	round(x, -4)
浮動小数点数の最小値を求める	sys.float_info.min
浮動小数点数の値が整数かどうか	x.is_integer()
実数を十六進表記の文字列にする	x.hex()
有理数をインポートする	import fractions
分子と分母から分数を作る	fractions.Fraction(分子, 分母)
二進文字列を整数にする	int(s, 2)
十六進文字列を整数にする	int(s, 16)
n進数文字列をバイト列にする	int(s, n).to_bytes(length=bytesize, byteorder='big')
二進文字列をbytesizeバイトのバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
八進文字列をバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
十六進文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
nの二進表記	bin(n)
nを二進表現に変換する	bin(n)
整数nの八進数表現	oct(n)
整数nを八進数リテラルに変換する	oct(n)
nの16進表記を使う	hex(n)
整数nを16進表現に変換する	hex(n)
nの2進文字列	bin(n)[2:]
nの八進文字列	oct(n)[2:]
nを八進数文字列に変換する	oct(n)[2:]
nを十六進数文字列にする	hex(n)[2:]
整数nのバイト長を見る	(n.bit_length() + 7) // 8
nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
整数nをバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
整数nを符号付きで長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
n＋n2を求める	n + n2
n引くn2を求める	n - n2
n割るn2を計算する	n / n2
nをn2で割ったモジュロ	n % n2
nとn2のビット和	n | n2
nからn2の値を引いてnにする	n -= n2
切り捨てながらnをn2分の1にする	n //= n2
nとn2が等しい	n == n2
nがn2と等しいか確認する	n == n2
nがn2かどうか調べる	n == n2
nがn2よりも大きい	n > n2
nがn2よりも小さいかどうか	n < n2
nがn2未満、それかn3以上か	n < n2 or n >= n3
nがn2以下、もしくはn3以上	n <= n2 or n >= n3
n2がn以上、かつn3以下か	n <= n2 and n2 <= n3
n2がnより大きくかつ、n3より小さいか調べる	n < n2 and n2 < n3
nが偶数かどうか	n % 2 == 0
nが奇数	n % 2 == 1
nが3の倍数か	n % 3 == 0
nが3で割り切れる	n % 3 == 0
nが5の倍数か確認する	n % 5 == 0
nが5で割り切れるか確認する	n % 5 == 0
nがn2の倍数でないかどうか調べる	n % n2 != 0
nが正の数か	n > 0
nが負の整数か調べる	n < 0
nが一桁の数か確認する	-9 <= n <= 9
nが-9以上、9以下かどうか調べる	-9 <= n <= 9
nが一桁の数か	0 <= n <= 9
nがリストのひとつか確認する	n in aList
整数nがセットのどれか	n in aSet
整数nがタプルのどれかかどうか	n in aTuple
nは配列のどれか	n in aArray
nが1、もしくは2かどうか	n == 1 or n == 2
nが1、もしくは2もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
xが一桁の数かどうか	-9 <= x <= 9
xが-9以上、9以下か確認する	-9 <= x <= 9
xが1もしくは2か判定する	x == 1 or x == 2
xが1、もしくは2、もしくは3に等しいか	x == 1 or x == 2 or x == 3
nの無限リスト	itertools.repeat(n)
nが無限に続く数列を得る	itertools.repeat(n)
無限に文字列が続くイテラブル	itertools.repeat(element)
文字列の無限なイテラブル	itertools.repeat(element)
文字列をn回繰り返すイテラブル	itertools.repeat(element, n)
0から始まる無限数列を得る	itertools.count()
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
nからいつまでもカウントダウンする	itertools.count(start=n, step=-1)
無限にシーケンスを繰り返す	itertools.cycle(iterable)
列を累加したイテラブルを求める	itertools.accumulate(iterable)
イテラブルを累積した列	itertools.accumulate(iterable, operator.mul)
列とイテラブルをつなぐ	itertools.chain(iterable, iterable2)
列にイテラブルを続ける	itertools.chain(iterable, iterable2)
列にタプルを続けたイテラブル	itertools.chain(iterable, iterable2)
列の各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
predicateFuncがTrueとなるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
predicateFuncが真とならない列の要素	itertools.dropwhile(predicateFunc, iterable)
predicateFuncが真となるシーケンスの要素を消す	itertools.dropwhile(predicateFunc, iterable)
イテラブルとシーケンスをペアのリストにする	itertools.zip_longest(iterable, iterable2)
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
列とシーケンスの直積を求める	itertools.product(iterable, iterable2)
イテラブルを2回あわせた直積を得る	itertools.product(iterable, repeat=2)
列の全順列	itertools.permutations(iterable)
シーケンスの長さnの順列	itertools.permutations(iterable, n)
列の組み合わせ	itertools.combinations(iterable, n)
列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
JSONフォーマットの文字列を読み込む	json.loads(jsonString)
JSONフォーマットの文字列をデータにする	json.loads(b.decode('unicode-escape'))
JSONファイルのファイルを辞書に変換する	json.load(fin)
JSONフォーマットのfをデータに変換する	json.load(fin)
JSONファイルの入力を読み込んで、dataとする	data = json.load(fin)
タプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
改行付きで辞書を文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
辞書をJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
インデント幅nで、タプルをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
辞書をソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
辞書をJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
空の組	()
要素一つのタプル	(element,)
文字列ひとつのりスト	[element]
nxn2の二次元リストを得る	[[0] * n for _ in range(n2)]
組の長さを見る	len(aTuple)
リストが空でないかどうか調べる	len(aList) != 0
タプルとタプルを接続する	aTuple + aTuple2
リストをn回連結する	aList * n
組をn回、連結する	aTuple * n
リストの先頭の要素	aList[0]
タプルの先頭の要素を見る	aTuple[0]
リストの末尾の値を使う	aList[-1]
組の末尾	aTuple[-1]
組のn番目の	aTuple[n]
組の先頭を取り除く	aTuple[1:]
リストの先頭のn要素を除く	aList[n:]
組の先頭のn要素を取り除く	aTuple[n:]
リストの最後を捨てる	aList[:-1]
タプルの最後を取り除く	aTuple[:-1]
リストの末尾のn要素を除く	aList[:-n]
リストの最後からn番目以前の部分を取り出す	aList[:-n]
組の末尾のn要素を取り除く	aTuple[:-n]
タプルの末尾からn番目以前の要素を取り出す	aTuple[:-n]
リストをひとつ置きに得る	aList[::2]
組をひとつ置きに取り出す	aTuple[::2]
リストのn番目からn2番目の部分	aList[n:n2]
タプルのn番目からn2番目まで	aTuple[n:n2]
リストの合計値を計算する	sum(aList)
組の中の最小値	min(aTuple)
リストの平均	sum(aList)/len(aList)
タプルの平均値を算出する	sum(aTuple)/len(aTuple)
n個の数値イテラブルを求める	range(n)
0からnの範囲を見る	range(n)
n個の整数リスト	list(range(n))
nからn2までのひとつ飛ばしの整数列を作る	list(range(n, n2+1, 2))
nまでの偶整数列を得る	list(range(2, n, 2))
リストに要素を追加する	aList.append(element)
リストの末尾にリストを展開する	aList.extend(aList2)
リストにリストを追加し、拡張する	aList.extend(aList2)
リストの末尾から値をポップする	aList.pop()
aListn番目から要素を得る	aList.pop(n)
リストの全要素をクリアにする	aList.clear()
リストから文字列を捨てる	aList.remove(element)
リストのn番目を削除する	del aList[n]
文字列はリストの要素	element in aList
文字列はリストに含まれる	element in aList
オブジェクトがタプルの要素かどうか確認する	element in aTuple
文字列はタプルに含まれるか調べる	element in aTuple
オブジェクトはリストの要素でない	element not in aList
文字列がリストに含まれない	element not in aList
オブジェクトは組の要素でないかどうか確認する	element not in aTuple
オブジェクトは組に含まれない	element not in aTuple
リストの文字列が最初に見つかるインデックスを探す	aList.index(element)
組の文字列が最初に見つかるインデックスを探す	aTuple.index(element)
組の最初の文字列を探す	aTuple.index(element)
リストをソートする	sorted(aList)
タプルをソートする	sorted(aTuple)
リストを昇順にソートする	sorted(aList, reverse=False)
小さい順にタプルを並べる	sorted(aTuple, reverse=False)
リストの要素を小さい順に並べる	sorted(aList, reverse=True)
タプルの要素を小さい順に並べ直す	sorted(aTuple, reverse=True)
リストのオブジェクトの位置をエラーなく使う	aList.index(element) if element in aList else -1
リストの要素を関数に適用した結果でソートする	sorted(aList, key=func)
タプルの値を関数に適用した結果でソートする	sorted(aTuple, key=func)
タプルをリバースする	reversed(aTuple)
リストが全て真か調べる	all(aList)
タプル内の要素が全て真かどうかテストする	all(aTuple)
リストが少なくとも一つ真かどうか調べる	any(aList)
タプル内の要素が少なくともひとつ真かどうか判定する	any(aTuple)
リストを引数として展開してプリントする	print(*aList)
組を引数として展開して表示する	print(*aTuple)
リストを引数として展開して出力する	print(*aList, sep=',')
二次元リストをflattenする	sum(aList)
２次元タプルをフラット化する	sum(aTuple)
組をnから番号付けする	enumerate(aTuple, start=n)
列の各要素を関数でフィルタする	filter(func, iterable)
列の各要素を関数でフィルタする	map(func, iterable)
mathを用いる	import math
実数のルートを求める	math.sqrt(x)
天井	math.ceil(x)
床を求める	math.floor(x)
整数のGCD	math.gcd(n, n2)
自然数LCM	math.lcm(n, n2)
3自然数の最大公約数を求める	math.gcd(n, n2, n3)
三整数の最小公倍数を求める	math.lcm(n, n2, n3)
nとkの組合せを求める	math.comb(n, k)
小数点数の絶対値	math.fabs(x)
浮動小数点数の仮数を求める	math.frexp(x)[0]
実数の指数を求める	math.frexp(x)[1]
二つの浮動小数点数が十分に近いか確認する	math.isclose(x, x2)
小数点数が有限かどうか調べる	math.isfinite(x)
小数点数が無限大	math.isinf(x)
実数はNaNか調べる	math.isnan(x)
小数点数の整数部を求める	math.modf(x)[1]
自然数個からk個取り出した場合の順列の総数	math.perm(n, k)
自然数個のものからk個取り出した時の並べ方の総数を計算する	math.perm(n, k)
実数を実数で割った剰余を計算する	math.remainder(x, x2)
小数点数の自然対数	math.log(x)
kを底とする対数	math.log(x, k)
浮動小数点数のk進対数を求める	math.log(x, k)
実数の2進対数	math.log2(x)
2を底とする対数	math.log2(x)
10を底とする実数の対数を求める	math.log10(x)
余弦	math.cos(x)
小数点数の正弦	math.sin(x)
浮動小数点数のtanを求める	math.tan(x)
実数のアークコサインを求める	math.acos(x)
余弦の逆数	math.acos(x)
実数のアークサイン	math.asin(x)
実数の正弦の逆数を算出する	math.asin(x)
実数の逆正接を求める	math.atan(x)
実数のtanの逆数	math.atan(x)
小数点数の逆双曲線余弦を求める	math.acosh(x)
実数の双曲線余弦の逆数を求める	math.acosh(x)
逆双曲線正弦	math.asinh(x)
双曲線正弦の逆数を計算する	math.asinh(x)
小数点数の逆双曲線正接を求める	math.atanh(x)
実数の双曲線正接の逆数を算出する	math.atanh(x)
実数の双曲線余弦を求める	math.cosh(x)
小数点数の双曲線正弦を求める	math.sinh(x)
2ベクトル間のユークリッド距離	math.dist(point, point2)
実数とyのノルム	math.hypot(x, y)
原点から(小数点数,y)の距離を計算する	math.hypot(x, y)
ガンマ関数の値を算出する	math.gamma(x)
ネイピア数を用いる	math.e
グラフを用いる準備をする	from sympy import N
綺麗なグラフをプロットする準備をする	import seaborn as sns
綺麗なプロットを使う準備をする	import seaborn as sns
グラフの描画を綺麗にする	import seaborn as sns
プロットのデザインを良くする	import seaborn as sns
デフォルトを適用する	sns.set()
デフォルトでグラフの見栄えをいい感じに変更する	sns.set()
グラフの用途を論文にセットする	sns.set(context='paper')
プロットの目的を画面に設定する	sns.set(context='notebook')
画面用にグラフを設定する	sns.set(context='notebook')
プレゼンにプロットの用途を変更する	sns.set(context='talk')
プロットをプレゼン用に変更する	sns.set(context='talk')
グラフの用途をポスターにセットする	sns.set(context='poster')
グラフをポスター用に指定する	sns.set(context='poster')
グラフのパレットを濃くする	sns.set(pallete='deep')
パレットを全般的に濃くする	sns.set(pallete='deep')
プロットを全般的に淡くする	sns.set(pallete='muted')
パレットを淡くする	sns.set(pallete='muted')
グラフのパレットをパステル調にする	sns.set(pallete='pastel')
カラーパレットをパステル調にする	sns.set(pallete='pastel')
グラフを全般的に暗くする	sns.set(pallete='dark')
カラーパレットを暗くする	sns.set(pallete='dark')
プロットの色を全般的に明るくする	sns.set(pallete='bright')
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
カラーパレットを色差別なくする	sns.set(pallete='colorblind')
グラフの描画で濃いパレットを使う	sns.set(pallete='deep')
グラフの描画で淡い色使いを使う	sns.set(pallete='muted')
プロットの描画でパステル調のカラーパレットを用いる	sns.set(pallete='pastel')
プロットの描画で暗いパレットを使う	sns.set(pallete='dark')
グラフの描画で明るい色を用いる	sns.set(pallete='bright')
プロットの描画で色差別ない色テーマを使う	sns.set(pallete='colorblind')
グラフで用いる色をpalleteNameで指定する	sns.set(pallete=palleteName)
グラフのパレットをpalleteNameに設定する	sns.set(pallete=palleteName)
プロットの中のフォントをfontNameに指定する	sns.set(font=fontName)
グラフで日本語フォントを表示可能なようにする	sns.set(font='IPAexGothic')
グラフの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
プロットのフォントを日本語に設定する	sns.set(font='IPAexGothic')
グラフのグリッドを白くする	sns.set(style='whitegrid')
グラフで使うタイトルをuntitledに設定する	plt.title(untitled)
グラフのサイズを横width縦heightに指定する	plt.figure(figsize=(width, height))
グラフの大きさを設定する	plt.figure(figsize=(width, height))
グラフのx座標のラベルをuntitledに指定する	plt.xlabel(untitled)
横軸にuntitledというキャプションを設定する	plt.xlabel(untitled)
プロットの中の縦軸の軸名をuntitledに変更する	plt.ylabel(untitled)
グラフの中のy座標に名称をつける	plt.ylabel(untitled)
グラフに格子を入れる	plt.grid(True)
凡例をグラフに付ける	plt.legend()
プロットに文字列と文字列と凡例を入れる	plt.legend([s, s2])
グラフの補足の位置を指定する	plt.legend(loc=(x, y))
グラフの補足の位置を(x,y)にセットする	plt.legend(loc=(x, y))
グラフ中の(x,y)の位置にデータラベルを入れる	plt.legend(loc=(x, y))
凡例を最適な位置に入れる	plt.legend(loc='best')
プロットの中に枠なしのデータラベルを加える	plt.legend(frameon=False)
リストと数列の折れ線グラフを描画する	plt.plot(xdata, ydata)
リストと数列を折れ線グラフで描く	plt.plot(xdata, ydata)
リストを縦軸、配列を横軸と指定して、折れ線グラフをプロットする	plt.plot(xdata, ydata)
配列の推移を折れ線で描く	plt.plot(range(len(xdata)), xdata)
リストを横軸と指定して、折れ線グラフを描く	plt.plot(range(len(xdata)), xdata)
データフレームのカラムとカラムを折れ線グラフで描く	plt.plot(df[col], df[col2])
アルファalphaの折れ線グラフを描く	plt.plot(xdata, ydata, alpha=alpha)
折れ線のアルファをalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
アルファalphaでリストとイテラブルの折れ線グラフを描画する	plt.plot(xdata, ydata, alpha=alpha)
配列と配列の折れ線グラフを描いて透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
グラフで使える色の一覧	matplotlib.colors.cnames
折れ線の色を文字列にする	plt.plot(xdata, ydata, color=s)
配列とデータ列の折れ線グラフを文字列の色で描画する	plt.plot(xdata, ydata, color=s)
リストとイテラブルの折れ線を描画して、色を文字列に変更する	plt.plot(xdata, ydata, color=s)
折れ線グラフの色をカラーコードに指定する	plt.plot(xdata, ydata, color=rgb)
配列とリストの折れ線グラフをカラーコードで描く	plt.plot(xdata, ydata, color=rgb)
リストと配列の折れ線グラフを描画して、その色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
破線の色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
数列とリストについて破線を描画し、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
データ列とリストについて破線グラフを描画し、その色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
リストとデータ列について破線グラフを描画してその色をパステル調のにする	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
イテラブルとイテラブルの破線グラフを描いて、色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
配列とリストについて破線グラフを描画して色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
破線の色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
データ列とデータ列について破線グラフをプロットして、色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
濃い色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
リストとリストについて濃い色の折れ線をプロットしてその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
淡い色の折れ線グラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='muted')
リストとリストについて淡い色の折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
パステル調の色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
データ列とイテラブルについてパステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
暗い色の折れ線を描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
配列とデータ列について暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
明るい色の折れ線グラフを描画して線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
配列とデータ列について明るい色の折れ線グラフを描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
色差別ない色の折れ線を描いて、線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
配列とデータ列について色差別ない色の折れ線グラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
濃い色で散布図を描画する	plt.plot(xdata, ydata, c='deep')
数列とリストについての散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
リストと配列について散布図を描画して、色を濃いに指定する	plt.plot(xdata, ydata, c='deep')
淡い色のマーカーで散布図をプロットする	plt.plot(xdata, ydata, c='muted')
淡い色でリストと配列についての散布図を描く	plt.plot(xdata, ydata, c='muted')
リストとリストについて散布図を描画し、、マーカーの色を淡いに変更する	plt.plot(xdata, ydata, c='muted')
パステル調の色のマーカーを散布図に使用する	plt.plot(xdata, ydata, c='pastel')
散布図をパステル調の色のマーカーで描画する	plt.plot(xdata, ydata, c='pastel')
リストと数列についての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
配列とリストについて散布図を描画して、色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
暗い色のマーカーを散布図に用いる	plt.plot(xdata, ydata, c='dark')
暗い色のマーカーを用いて散布図をプロットする	plt.plot(xdata, ydata, c='dark')
配列と配列についての散布図を暗い色でプロットする	plt.plot(xdata, ydata, c='dark')
リストと配列について散布図を描画し、、色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
明るい色のマーカーを散布図に使用する	plt.plot(xdata, ydata, c='bright')
明るい色として散布図を描画する	plt.plot(xdata, ydata, c='bright')
明るい色を用いてリストと数列についての散布図をプロットする	plt.plot(xdata, ydata, c='bright')
リストとリストについて散布図を描画し、、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
色差別ない色のマーカーで散布図をプロットする	plt.plot(xdata, ydata, c='colorblind')
色差別ない色としてリストと数列についての散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
データ列とリストについて散布図を描画して、マーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
濃い色のマーカーで散布図を重なりを見やすくプロットする	plt.plot(xdata, ydata, c='deep', alpha=0.5)
リストとリストについての散布図を濃い色として重なりを見やすく描く	plt.plot(xdata, ydata, c='deep', alpha=0.5)
散布図を重なりを見やすく淡い色のマーカーとして描く	plt.plot(xdata, ydata, c='muted', alpha=0.5)
イテラブルとリストについての散布図を淡い色として重なりを見やすくプロットする	plt.plot(xdata, ydata, c='muted', alpha=0.5)
重なりを見やすく散布図をパステル調の色のマーカーでプロットする	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
数列と数列についての散布図を重なりを見やすくパステル調の色でプロットする	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
暗い色のマーカーで散布図を重なりを見やすく描く	plt.plot(xdata, ydata, c='dark', alpha=0.5)
重なりを見やすく暗い色でリストと数列の散布図をプロットする	plt.plot(xdata, ydata, c='dark', alpha=0.5)
重なりを見やすく散布図を明るい色で描く	plt.plot(xdata, ydata, c='bright', alpha=0.5)
リストとデータ列についての散布図を明るい色として重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
重なりを見やすく散布図を色差別ない色を用いて描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
色差別ない色で重なりを見やすく配列と配列についての散布図をプロットする	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
濃い色でリストについての柱状図を描画する	plt.hist(xdata, color='deep')
濃い色のヒストグラムでリストをプロットする	plt.hist(xdata, color='deep')
淡い色を用いて配列についてのヒストグラムを描画する	plt.hist(xdata, color='muted')
数列を淡い色のヒストグラムでプロットする	plt.hist(xdata, color='muted')
データ列についてのヒストグラムをパステル調の色でプロットする	plt.hist(xdata, color='pastel')
パステル調の色のヒストグラムでリストを描画する	plt.hist(xdata, color='pastel')
暗いでリストについてのヒストグラムをプロットする	plt.hist(xdata, color='dark')
イテラブルを暗い色の度数分布図として描画する	plt.hist(xdata, color='dark')
リストについてのヒストグラムを明るい色でプロットする	plt.hist(xdata, color='bright')
配列を明るい色のヒストグラムで描画する	plt.hist(xdata, color='bright')
色差別ない色としてイテラブルについてのヒストグラムを描画する	plt.hist(xdata, color='colorblind')
リストを色差別ない色のヒストグラムとして描画する	plt.hist(xdata, color='colorblind')
折れ線グラフにラベルをつける	plt.plot(xdata, ydata, label=untitled)
折れ線グラフのラベルをuntitledに変更する	plt.plot(xdata, ydata, label=untitled)
untitledとラベル付けしてリストと数列の折れ線グラフをプロットする	plt.plot(xdata, ydata, label=untitled)
配列とリストの折れ線を描画して、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
折れ線の線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
線幅nの折れ線グラフを描く	plt.plot(xdata, ydata, linewidth=n)
配列とリストで折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
配列とリストで濃いグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
淡いグラフの線幅をnに指定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
配列とリストを用いて淡いの折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
パステル調のの折れ線の線幅を指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
パステル調のグラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
リストとデータ列でパステル調のの折れ線グラフを描画してその線幅をnに指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
暗いの折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
リストとリストで暗いの折れ線を描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
明るいの折れ線の線幅を指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
明るいグラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
リストと配列で明るいグラフを描いて、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
色差別ないの折れ線グラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
配列とリストで色差別ないの折れ線グラフを描いてその線幅をnに指定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
濃いの色をカラーコードにセットする	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
リストとイテラブルについてカラーコードの濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
リストと配列で濃いの折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
配列と配列のカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
データ列とリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
イテラブルと配列のカラーコードのパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
データ列と配列でパステル調のを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
暗いの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
配列と配列のカラーコードの暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
暗いグラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
明るいの折れ線グラフの色をカラーコードにセットする	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
リストとリストのカラーコードの明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
リストと数列で明るいの折れ線を描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
色差別ないの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
データ列と配列のカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
データ列とリストとして色差別ないを描画し、、線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
赤色の濃いの折れ線グラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='r')
濃いの折れ線グラフの色を赤にする	plt.plot(xdata, ydata, linestyle='deep', color='r')
数列と数列として濃いの折れ線をプロットしてその線幅をnに指定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
赤い淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color='r')
淡いの色を赤にする	plt.plot(xdata, ydata, linestyle='muted', color='r')
淡いの折れ線グラフを描いてその線幅をnに変更する	plt.plot(xdata, ydata, linestyle='muted', color='r')
赤色のパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
パステル調のグラフの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
パステル調のグラフを配列とリストを用いて描いてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
赤い暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
暗いの折れ線グラフの色を赤にする	plt.plot(xdata, ydata, linestyle='dark', color='r')
リストとリストを使って暗いを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
赤い明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='r')
明るいグラフの色を赤色に変更する	plt.plot(xdata, ydata, linestyle='bright', color='r')
データ列と配列として明るいの折れ線を描画して、線幅をnにする	plt.plot(xdata, ydata, linestyle='bright', color='r')
赤い色差別ないの折れ線グラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
色差別ないの色を赤にする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
リストとリストとして色差別ないの折れ線グラフを描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
濃いの色を青色に設定する	plt.plot(xdata, ydata, linestyle='deep', color='b')
リストと数列の青い濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='b')
リストとリストの濃いグラフを描き、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
青い淡いを描く	plt.plot(xdata, ydata, linestyle='muted', color='b')
淡いの色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
リストと配列の青い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
リストと配列について淡いグラフを描画し、その色を青くする	plt.plot(xdata, ydata, linestyle='muted', color='b')
青いパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
パステル調のの色を青色に変更する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
リストと数列の青色のパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='b')
配列とリストのパステル調のグラフを描画して、その色を青くする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
青色の暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='b')
リストとリストについて青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
配列とイテラブルの暗いグラフを描画して色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
青い明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='b')
明るいの色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
データ列とイテラブルの青色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
リストと配列の明るいをプロットし、、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
色差別ないの色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
配列と配列について青い色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
イテラブルとリストについて色差別ないを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
イテラブルとデータ列の黒い濃いを描く	plt.plot(xdata, ydata, linestyle='deep', color='k')
数列とリストの濃いを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
黒色の淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color='k')
淡いの色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
リストとリストの黒色の淡いグラフを描く	plt.plot(xdata, ydata, linestyle='muted', color='k')
イテラブルとリストについて淡いを描画し、色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
リストと配列の黒色のパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
リストとリストについてパステル調のを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
黒色の暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='k')
リストとデータ列について黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
配列とリストの暗いグラフをプロットして色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
黒い明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='k')
データ列と配列について黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
リストと数列の明るいをプロットして、その色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
黒い色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
色差別ないの色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
リストと配列の黒色の色差別ないを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
リストと配列の色差別ないを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
数列とリストについて散布図を描画する	plt.scatter(xdata, ydata)
相関を可視化する	plt.scatter(xdata, ydata)
散布図のマーカーの大きさをnに指定する	plt.scatter(xdata, ydata, s=n)
リストを縦軸リストを横軸として大きさnの散布図をプロットする	plt.scatter(xdata, ydata, s=n)
大きさnでリストとリストの散布図を描く	plt.scatter(xdata, ydata, s=n)
配列とデータ列について散布図を描画して、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
ポイントマーカーで散布図を描く	plt.plot(xdata, ydata, marker='.')
リストとリストについて散布図を描いてマーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
配列とデータ列についての散布図にポイントマーカーを描く	plt.plot(xdata, ydata, marker='.')
丸マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='o')
丸マーカーで散布図を描く	plt.plot(xdata, ydata, marker='o')
リストと数列の散布図を描画して、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
リストと配列についての散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^')
三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^')
リストと配列の散布図を描画して、マーカーを▲に変更する	plt.plot(xdata, ydata, marker='^')
リストと配列についての散布図に三角マーカーを描く	plt.plot(xdata, ydata, marker='^')
散布図に▽マーカーを使う	plt.plot(xdata, ydata, marker='v')
下三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='v')
リストとリストについて散布図を描画して、マーカーを▼に設定する	plt.plot(xdata, ydata, marker='v')
リストとリストについての散布図に▽マーカーを描画する	plt.plot(xdata, ydata, marker='v')
左三角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='<')
配列とリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
イテラブルとリストについての散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
散布図に右三角マーカーを使用する	plt.plot(xdata, ydata, marker='>')
散布図を右三角マーカーを使ってプロットする	plt.plot(xdata, ydata, marker='>')
データ列とイテラブルについて散布図を描き、、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
リストとデータ列についての散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
散布図にバツマーカーを使用する	plt.plot(xdata, ydata, marker='x')
散布図をクロスマーカーを用いて描画する	plt.plot(xdata, ydata, marker='x')
データ列と数列について散布図を描いて、マーカーをバツにする	plt.plot(xdata, ydata, marker='x')
リストとリストの散布図にバツマーカーを描画する	plt.plot(xdata, ydata, marker='x')
配列とリストについて散布図を描画してマーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
リストとリストの散布図に大バツマーカーを描く	plt.plot(xdata, ydata, marker='X')
散布図に四角マーカーを使用する	plt.plot(xdata, ydata, marker='s')
四角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='s')
リストとイテラブルについて散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
データ列とリストについての散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
ダイアモンドマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='D')
リストと配列の散布図をプロットし、、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
リストと配列の散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
散布図を星マーカーで描画する	plt.plot(xdata, ydata, marker='*')
リストとデータ列について散布図を描画し、、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
数列とイテラブルについての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
カラーコードのポイントマーカーを散布図に使う	plt.plot(xdata, ydata, marker='.', c=rgb)
カラーコードのポイントマーカーとして散布図を描く	plt.plot(xdata, ydata, marker='.', c=rgb)
イテラブルと数列についての散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
リストとデータ列について散布図をプロットしてポイントマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='.', c=rgb)
散布図にカラーコードの丸マーカーを用いる	plt.plot(xdata, ydata, marker='o', c=rgb)
散布図をカラーコードの丸マーカーで描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
カラーコードの丸マーカーをリストとリストについての散布図に描く	plt.plot(xdata, ydata, marker='o', c=rgb)
配列とリストの散布図を描画して、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
散布図にカラーコードの▲マーカーを使う	plt.plot(xdata, ydata, marker='^', c=rgb)
散布図をカラーコードの▲マーカーで描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
配列とリストについての散布図にカラーコードの三角マーカーを描く	plt.plot(xdata, ydata, marker='^', c=rgb)
データ列と数列について散布図を描き、、上三角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='^', c=rgb)
カラーコードの▽マーカーを散布図に使う	plt.plot(xdata, ydata, marker='v', c=rgb)
散布図をカラーコードの下三角マーカーで描く	plt.plot(xdata, ydata, marker='v', c=rgb)
カラーコードの下三角マーカーをイテラブルとリストの散布図に描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
リストと配列について散布図をプロットして、▼マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='v', c=rgb)
カラーコードの左三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='<', c=rgb)
配列と数列の散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
リストとデータ列について散布図を描画して左三角マーカーの色をカラーコードにする	plt.plot(xdata, ydata, marker='<', c=rgb)
散布図をカラーコードの右三角マーカーとして描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
数列とデータ列についての散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
リストとリストについて散布図を描画し、、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
カラーコードのクロスマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='x', c=rgb)
カラーコードのクロスマーカーで散布図を描く	plt.plot(xdata, ydata, marker='x', c=rgb)
リストとリストについての散布図にカラーコードのバツマーカーを描く	plt.plot(xdata, ydata, marker='x', c=rgb)
リストと配列について散布図を描画してバツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
カラーコードの大バツマーカーを散布図に使用する	plt.plot(xdata, ydata, marker='X', c=rgb)
散布図をカラーコードの大バツマーカーで描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
リストと配列についての散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
リストとリストについて散布図を描画して大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
カラーコードの四角マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='s', c=rgb)
カラーコードの四角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='s', c=rgb)
リストとリストの散布図にカラーコードの四角マーカーを描く	plt.plot(xdata, ydata, marker='s', c=rgb)
データ列と配列について散布図を描画して、四角マーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='s', c=rgb)
カラーコードの菱形マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='D', c=rgb)
カラーコードのダイアモンドマーカーで散布図を描く	plt.plot(xdata, ydata, marker='D', c=rgb)
リストとデータ列についての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
イテラブルとリストについて散布図を描画し、、ダイアモンドマーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='D', c=rgb)
カラーコードの星マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='*', c=rgb)
散布図をカラーコードの星マーカーで描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
配列とリストについての散布図にカラーコードの星マーカーを描く	plt.plot(xdata, ydata, marker='*', c=rgb)
リストとリストについて散布図を描画して星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
散布図に赤色のポイントマーカーを使用する	plt.plot(xdata, ydata, marker='.', c='r')
散布図を赤いポイントマーカーを使って描画する	plt.plot(xdata, ydata, marker='.', c='r')
データ列とリストについての散布図に赤いポイントマーカーを描く	plt.plot(xdata, ydata, marker='.', c='r')
散布図に赤い丸マーカーを使用する	plt.plot(xdata, ydata, marker='o', c='r')
散布図を赤い丸マーカーで描く	plt.plot(xdata, ydata, marker='o', c='r')
リストとリストについての散布図に赤い丸マーカーをプロットする	plt.plot(xdata, ydata, marker='o', c='r')
散布図に赤色の上三角マーカーを使用する	plt.plot(xdata, ydata, marker='^', c='r')
赤色の三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^', c='r')
リストとリストの散布図に赤色の三角マーカーをプロットする	plt.plot(xdata, ydata, marker='^', c='r')
散布図を赤い下三角マーカーで描く	plt.plot(xdata, ydata, marker='v', c='r')
赤色の下三角マーカーをリストと配列についての散布図に描く	plt.plot(xdata, ydata, marker='v', c='r')
赤色の左三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='<', c='r')
赤色の左三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='<', c='r')
赤色の左三角マーカーを配列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='<', c='r')
赤い右三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='>', c='r')
赤い右三角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='>', c='r')
リストと配列の散布図に赤い右三角マーカーを描く	plt.plot(xdata, ydata, marker='>', c='r')
散布図に赤いクロスマーカーを使う	plt.plot(xdata, ydata, marker='x', c='r')
赤色のバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
リストとリストについての散布図に赤いバツマーカーをプロットする	plt.plot(xdata, ydata, marker='x', c='r')
散布図に赤色の大バツマーカーを用いる	plt.plot(xdata, ydata, marker='X', c='r')
赤い大バツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='X', c='r')
リストとリストについての散布図に赤色の大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='r')
赤い四角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='s', c='r')
散布図を赤い四角マーカーを使って描画する	plt.plot(xdata, ydata, marker='s', c='r')
数列とリストの散布図に赤い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
散布図に赤いダイアモンドマーカーを使用する	plt.plot(xdata, ydata, marker='D', c='r')
散布図を赤色のダイアモンドマーカーで描画する	plt.plot(xdata, ydata, marker='D', c='r')
リストとリストについての散布図に赤い菱形マーカーを描画する	plt.plot(xdata, ydata, marker='D', c='r')
散布図に赤い星マーカーを使用する	plt.plot(xdata, ydata, marker='*', c='r')
散布図を赤色の星マーカーで描画する	plt.plot(xdata, ydata, marker='*', c='r')
リストと配列についての散布図に赤い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
黒いポイントマーカーを散布図に使う	plt.plot(xdata, ydata, marker='.', c='k')
黒色のポイントマーカーで散布図を描く	plt.plot(xdata, ydata, marker='.', c='k')
リストとリストの散布図に黒いポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.', c='k')
散布図を黒い丸マーカーとして描画する	plt.plot(xdata, ydata, marker='o', c='k')
リストとリストの散布図に黒い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
散布図に黒い上三角マーカーを使用する	plt.plot(xdata, ydata, marker='^', c='k')
黒色の三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='k')
リストとリストについての散布図に黒色の三角マーカーを描く	plt.plot(xdata, ydata, marker='^', c='k')
散布図に黒色の下三角マーカーを用いる	plt.plot(xdata, ydata, marker='v', c='k')
黒い▼マーカーで散布図を描く	plt.plot(xdata, ydata, marker='v', c='k')
黒い下三角マーカーを配列と配列についての散布図に描画する	plt.plot(xdata, ydata, marker='v', c='k')
黒色の左三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='<', c='k')
黒い左三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='<', c='k')
リストとリストについての散布図に黒い左三角マーカーをプロットする	plt.plot(xdata, ydata, marker='<', c='k')
散布図に黒色の右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c='k')
黒色の右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='k')
リストと数列についての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
散布図に黒色のバツマーカーを用いる	plt.plot(xdata, ydata, marker='x', c='k')
黒いクロスマーカーで散布図を描く	plt.plot(xdata, ydata, marker='x', c='k')
データ列とリストの散布図に黒いバツマーカーを描く	plt.plot(xdata, ydata, marker='x', c='k')
散布図に黒色の大バツマーカーを使用する	plt.plot(xdata, ydata, marker='X', c='k')
散布図を黒色の大バツマーカーで描く	plt.plot(xdata, ydata, marker='X', c='k')
データ列とデータ列の散布図に黒色の大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
散布図に黒い四角マーカーを用いる	plt.plot(xdata, ydata, marker='s', c='k')
黒い四角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='s', c='k')
リストとリストの散布図に黒い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
黒いダイアモンドマーカーを散布図に使用する	plt.plot(xdata, ydata, marker='D', c='k')
黒色の菱形マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
配列と配列の散布図に黒いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
散布図に黒色の星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='k')
黒い星マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='*', c='k')
リストと数列についての散布図に黒い星マーカーを描く	plt.plot(xdata, ydata, marker='*', c='k')
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
に鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
にx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
グラフにx=0の実線を設定する	plt.axvline(x=0, linestyle='solid')
グラフにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
グラフに水平方向の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
にy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
にy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
リストとリストリストに応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
カラーバーを水平で描画する	plt.colorbar(orientation='horizontal')
カラーバーを横向きに付ける	plt.colorbar(orientation='horizontal')
配列と配列の散布図に文字列というデータラベル用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
データ列と数列について散布図を描画して、文字列という補足用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
度数分布図をプロットする	plt.hist(データ列)
リストの度数分布図をプロットする	plt.hist(aList)
度数分布図でリストを可視化する	plt.hist(aList)
配列のヒストグラムを描く	plt.hist(aArray)
配列を度数分布図で可視化する	plt.hist(aArray)
データフレームの列のヒストグラムを描く	plt.hist(df[column])
ヒストグラムを用いてデータフレームの列を可視化する	plt.hist(df[column])
データ列のヒストグラムを描く	plt.hist(ds)
柱状グラフでデータ列を可視化する	plt.hist(ds)
柱状図を半透明にする	plt.hist(データ列, alpha=0.5)
ヒストグラムをプロットし、、半透明化にする	plt.hist(データ列, alpha=0.5)
度数分布図の透明度をxに指定する	plt.hist(データ列, alpha=x)
ヒストグラムを描いて、xに透明度を設定する	plt.hist(データ列, alpha=x)
柱状図のビン数を設定する	plt.hist(データ列, bins=n)
柱状図を区間をnに設定してプロットする	plt.hist(データ列, bins=n)
ビンの数nのヒストグラムを描画する	plt.hist(データ列, bins=n)
ヒストグラムをプロットし、nにビン数を設定する	plt.hist(データ列, bins=n)
度数分布図の区間を設定する	plt.hist(データ列, range=(start, end))
度数分布図をstartからendの範囲で描画する	plt.hist(データ列, range=(start, end))
startからendの間の柱状図を用いて配列を描く	plt.hist(データ列, range=(start, end))
度数分布図の描画して、正規化する	plt.hist(データ列, density=True)
正規化された度数分布図を描画する	plt.hist(データ列, density=True)
度数分布図を描画し、合計を1にする	plt.hist(データ列, density=True)
2つのデータ列を並べて度数分布図にする	plt.hist([データ列, データ列2], color=['b', 'r'])
ヒストグラムを2つ並べて描く	plt.hist([データ列, データ列2], color=['b', 'r'])
データ列を箱髭図で描く	plt.boxplot(データ列)
データ列を箱ひげ図で可視化する	plt.boxplot(データ列)
２つのデータ列を並べてボックスチャートにする	plt.boxplot([データ列, データ列2])
箱髭図を横に並べて描画する	plt.boxplot([データ列, データ列2])
箱髭図を2つ並べる	plt.boxplot([データ列, データ列2])
２つの列を並べて箱ひげ図にする	plt.boxplot([df[column], df[column2]])
データ列とラベルを指定して、棒を描画する	plt.bar(ラベル列, データ列)
横棒を描画する	plt.barh(ラベル列, データ列)
棒の色をセットする	plt.bar(ラベル列, データ列, color=rgb)
横棒の色をする	plt.barh(ラベル列, データ列, color=rgb)
縦棒を積み上げにする	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
データ列とラベル列を指定して積み上げ棒を描画する	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
データ列とラベル列を指定して、積み上げ横棒グラフをプロットする	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
棒グラフを描画し、、幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
xに棒グラフの幅を設定する	plt.bar(ラベル列, データ列, width=x)
横棒グラフを描画し、、グラフ幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
xに横棒グラフの幅を指定する	plt.barh(ラベル列, データ列, width=x)
棒グラフを描画して中央寄せする	plt.bar(ラベル列, データ列, align='center')
縦棒グラフを描いて、中央寄せする	plt.bar(ラベル列, データ列, align='center')
横棒を描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
複数カラムの散布図をまとめて描く	sns.pairplot(df[[column, column2, column3]])
＜オプション＞アリスブルーにグラフの色を設定する	color = 'aliceblue'
＜オプション＞色をアンティークホワイトに設定する	color = 'antiquewhite'
＜オプション＞アクアにグラフの色を指定する	color = 'aqua'
＜オプション＞アクアマリンを使う	color = 'aquamarine'
＜オプション＞グラフの色をアクアマリンに変更する	color = 'aquamarine'
＜オプション＞紺碧色を使用する	color = 'azure'
＜オプション＞紺碧に色をする	color = 'azure'
＜オプション＞ベージュを使用する	color = 'beige'
＜オプション＞色をビスクに設定する	color = 'bisque'
＜オプション＞ブラックを使う	color = 'black'
＜オプション＞グラフの色をブランチドアーモンドにセットする	color = 'blanchedalmond'
＜オプション＞青色を使用する	color = 'blue'
＜オプション＞青にグラフの色をセットする	color = 'blue'
＜オプション＞ブルーバイオレット色を使用する	color = 'blueviolet'
＜オプション＞ブルーバイオレットにグラフの色を設定する	color = 'blueviolet'
＜オプション＞ブラウン色を用いる	color = 'brown'
＜オプション＞茶色にグラフの色をセットする	color = 'brown'
＜オプション＞バリーウッドにグラフの色を設定する	color = 'burlywood'
＜オプション＞カデットブルー色を使用する	color = 'cadetblue'
＜オプション＞カデットブルーにグラフの色をセットする	color = 'cadetblue'
＜オプション＞黄緑色を使う	color = 'chartreuse'
＜オプション＞グラフの色を黄緑に変更する	color = 'chartreuse'
＜オプション＞チョコレートを使用する	color = 'chocolate'
＜オプション＞グラフの色をチョコレートにセットする	color = 'chocolate'
＜オプション＞やわらかい青を使用する	color = 'cornflowerblue'
＜オプション＞グラフの色をやわらかい青に設定する	color = 'cornflowerblue'
＜オプション＞コーンズシルクを使用する	color = 'cornsilk'
＜オプション＞色をコーンズシルクに変更する	color = 'cornsilk'
＜オプション＞真紅色を使う	color = 'crimson'
＜オプション＞色をクリムゾンに変更する	color = 'crimson'
＜オプション＞シアンを用いる	color = 'cyan'
＜オプション＞色をシアンに設定する	color = 'cyan'
＜オプション＞ダークブルー色を用いる	color = 'darkblue'
＜オプション＞グラフの色を紺に指定する	color = 'darkblue'
＜オプション＞濃いシアンを用いる	color = 'darkcyan'
＜オプション＞色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
＜オプション＞グラフの色をダークグレーにセットする	color = 'darkgray'
＜オプション＞ダークグリーン色を使用する	color = 'darkgreen'
＜オプション＞色をダークグリーンに設定する	color = 'darkgreen'
＜オプション＞グラフの色をダークグレーに指定する	color = 'darkgrey'
＜オプション＞色をダークマゼンタに設定する	color = 'darkmagenta'
＜オプション＞ダークオリーブグリーン色を使用する	color = 'darkolivegreen'
＜オプション＞色をダークオリーブグリーンに変更する	color = 'darkolivegreen'
＜オプション＞ダークオレンジ色を用いる	color = 'darkorange'
＜オプション＞ダークオレンジにグラフの色を変更する	color = 'darkorange'
＜オプション＞ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
＜オプション＞暗い赤色を用いる	color = 'darkred'
＜オプション＞グラフの色を暗い赤に変更する	color = 'darkred'
＜オプション＞ダークサーモン色を使用する	color = 'darksalmon'
＜オプション＞グラフの色をダークサーモンにする	color = 'darksalmon'
＜オプション＞ダークシアグリーン色を用いる	color = 'darkseagreen'
＜オプション＞ダークスレートブルー色を使用する	color = 'darkslateblue'
＜オプション＞グラフの色をダークスレートブルーにする	color = 'darkslateblue'
＜オプション＞ダークスラテグレーを使う	color = 'darkslategray'
＜オプション＞グラフの色をダークスラテグレーにする	color = 'darkslategray'
＜オプション＞ダーク・スラテグレー色を使用する	color = 'darkslategrey'
＜オプション＞グラフの色をダーク・スラテグレーに指定する	color = 'darkslategrey'
＜オプション＞ダークターコイズを使う	color = 'darkturquoise'
＜オプション＞色をダークターコイズに設定する	color = 'darkturquoise'
＜オプション＞グラフの色をダークバイオレットに変更する	color = 'darkviolet'
＜オプション＞デピンクを使う	color = 'deeppink'
＜オプション＞グラフの色をデピンクに変更する	color = 'deeppink'
＜オプション＞ディープスカイブルーを使う	color = 'deepskyblue'
＜オプション＞色をディープスカイブルーに設定する	color = 'deepskyblue'
＜オプション＞ディムグレー色を用いる	color = 'dimgray'
＜オプション＞ディムグレー色を用いる	color = 'dimgrey'
＜オプション＞色をディムグレーに変更する	color = 'dimgrey'
＜オプション＞ドジャーブルーにグラフの色を変更する	color = 'dodgerblue'
＜オプション＞色を耐火レンガに設定する	color = 'firebrick'
＜オプション＞フローラルホワイトにグラフの色を設定する	color = 'floralwhite'
＜オプション＞グラフの色をフォレストグリーンにする	color = 'forestgreen'
＜オプション＞フクシアを用いる	color = 'fuchsia'
＜オプション＞グラフの色をゲインズボロに変更する	color = 'gainsboro'
＜オプション＞ゴーストホワイトを使う	color = 'ghostwhite'
＜オプション＞色をゴーストホワイトに設定する	color = 'ghostwhite'
＜オプション＞ゴールドを使う	color = 'gold'
＜オプション＞ゴールドにグラフの色を設定する	color = 'gold'
＜オプション＞色をゴールデンロッドに変更する	color = 'goldenrod'
＜オプション＞グレーを使う	color = 'gray'
＜オプション＞グラフの色をグレーに変更する	color = 'gray'
＜オプション＞色をグリーンイエローに変更する	color = 'greenyellow'
＜オプション＞グレーを用いる	color = 'grey'
＜オプション＞グラフの色をグレーにセットする	color = 'grey'
＜オプション＞グラフの色をハニーデューに指定する	color = 'honeydew'
＜オプション＞グラフの色をホットピンクに変更する	color = 'hotpink'
＜オプション＞インディアンレッドを使う	color = 'indianred'
＜オプション＞グラフの色をインディアンレッドに変更する	color = 'indianred'
＜オプション＞インディゴ色を使用する	color = 'indigo'
＜オプション＞アイボリー色を使用する	color = 'ivory'
＜オプション＞グラフの色をアイボリーに変更する	color = 'ivory'
＜オプション＞カーキ色を用いる	color = 'khaki'
＜オプション＞グラフの色をカーキに変更する	color = 'khaki'
＜オプション＞色をラベンダーに設定する	color = 'lavender'
＜オプション＞ラベンダーブラッシュを用いる	color = 'lavenderblush'
＜オプション＞ローングリーンにグラフの色を変更する	color = 'lawngreen'
＜オプション＞レモンシフォンを使う	color = 'lemonchiffon'
＜オプション＞グラフの色をレモンシフォンに変更する	color = 'lemonchiffon'
＜オプション＞ライトブルーにグラフの色を設定する	color = 'lightblue'
＜オプション＞ライトコーラルを使う	color = 'lightcoral'
＜オプション＞色をライトコーラルに設定する	color = 'lightcoral'
＜オプション＞ライトシアンを使う	color = 'lightcyan'
＜オプション＞グラフの色をライトシアンに指定する	color = 'lightcyan'
＜オプション＞ライトゴールドロディイエローに色をセットする	color = 'lightgoldenrodyellow'
＜オプション＞ライトグレー色を使用する	color = 'lightgray'
＜オプション＞グラフの色をライトグレーにセットする	color = 'lightgray'
＜オプション＞ライトグリーンを使う	color = 'lightgreen'
＜オプション＞ライトグリーンにグラフの色をセットする	color = 'lightgreen'
＜オプション＞ライトグレーにグラフの色を指定する	color = 'lightgrey'
＜オプション＞淡いピンク色色を使用する	color = 'lightpink'
＜オプション＞淡いピンク色に色を指定する	color = 'lightpink'
＜オプション＞ライトサーモンを用いる	color = 'lightsalmon'
＜オプション＞ライトサーモンにグラフの色を設定する	color = 'lightsalmon'
＜オプション＞ライトグリーンにグラフの色を変更する	color = 'lightseagreen'
＜オプション＞ライトスカイブルー色を用いる	color = 'lightskyblue'
＜オプション＞ライトスカイブルーにグラフの色を変更する	color = 'lightskyblue'
＜オプション＞ライトスレイグレーを使用する	color = 'lightslategray'
＜オプション＞ライトスレイグレーにグラフの色を設定する	color = 'lightslategray'
＜オプション＞ライトスレイグレーに色を変更する	color = 'lightslategrey'
＜オプション＞ライトスチールブルー色を用いる	color = 'lightsteelblue'
＜オプション＞色をライトスチールブルーに設定する	color = 'lightsteelblue'
＜オプション＞色をライトイエローに変更する	color = 'lightyellow'
＜オプション＞ライムを使う	color = 'lime'
＜オプション＞ライムに色を設定する	color = 'lime'
＜オプション＞グラフの色をライムグリーンに変更する	color = 'limegreen'
＜オプション＞リネン色を使用する	color = 'linen'
＜オプション＞リネンにグラフの色を変更する	color = 'linen'
＜オプション＞マゼンタにグラフの色を指定する	color = 'magenta'
＜オプション＞グラフの色をマルーンに指定する	color = 'maroon'
＜オプション＞グラフの色をミディアムアクアマリンに変更する	color = 'mediumaquamarine'
＜オプション＞ミディアムブルーを用いる	color = 'mediumblue'
＜オプション＞色をミディアムブルーに設定する	color = 'mediumblue'
＜オプション＞ミディアムオーキッドを使う	color = 'mediumorchid'
＜オプション＞ミディアムオーキッドにグラフの色を設定する	color = 'mediumorchid'
＜オプション＞ミディアムパープルに色を変更する	color = 'mediumpurple'
＜オプション＞ミディアムシアグリーンを使う	color = 'mediumseagreen'
＜オプション＞グラフの色をミディアムシアグリーンにセットする	color = 'mediumseagreen'
＜オプション＞ミディアムスレートブルー色を使用する	color = 'mediumslateblue'
＜オプション＞ミディアムスプリンググリーンにグラフの色を設定する	color = 'mediumspringgreen'
＜オプション＞ミディアムターコイズに色を指定する	color = 'mediumturquoise'
＜オプション＞グラフの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
＜オプション＞ミッドナイトブルーを用いる	color = 'midnightblue'
＜オプション＞ミッドナイトブルーにグラフの色をセットする	color = 'midnightblue'
＜オプション＞ミントクリームを使う	color = 'mintcream'
＜オプション＞ミントクリームにグラフの色を設定する	color = 'mintcream'
＜オプション＞ミスティローズを使う	color = 'mistyrose'
＜オプション＞モカシンを使う	color = 'moccasin'
＜オプション＞ナバホホワイト色を用いる	color = 'navajowhite'
＜オプション＞色をナバホホワイトに設定する	color = 'navajowhite'
＜オプション＞グラフの色をネイビーに指定する	color = 'navy'
＜オプション＞オールドレース色を使用する	color = 'oldlace'
＜オプション＞オールドレースにグラフの色を設定する	color = 'oldlace'
＜オプション＞オリーブ色を用いる	color = 'olive'
＜オプション＞オリーブにグラフの色を変更する	color = 'olive'
＜オプション＞オリベドラブを使う	color = 'olivedrab'
＜オプション＞色をオリベドラブに設定する	color = 'olivedrab'
＜オプション＞オレンジを使用する	color = 'orange'
＜オプション＞色をオレンジに設定する	color = 'orange'
＜オプション＞オレンジレッドにグラフの色を変更する	color = 'orangered'
＜オプション＞オーキッドを使う	color = 'orchid'
＜オプション＞パールゴールデンロッドを用いる	color = 'palegoldenrod'
＜オプション＞色をパールゴールデンロッドに指定する	color = 'palegoldenrod'
＜オプション＞ペールグリーンに色を設定する	color = 'palegreen'
＜オプション＞パールバイオレットレッドを使用する	color = 'palevioletred'
＜オプション＞グラフの色をパールバイオレットレッドに変更する	color = 'palevioletred'
＜オプション＞パパイヤウィップを用いる	color = 'papayawhip'
＜オプション＞グラフの色をパパイヤウィップに変更する	color = 'papayawhip'
＜オプション＞色をピーチパフに変更する	color = 'peachpuff'
＜オプション＞ペルー色を用いる	color = 'peru'
＜オプション＞グラフの色をペルーに変更する	color = 'peru'
＜オプション＞ピンク色を用いる	color = 'pink'
＜オプション＞グラフの色をプラムに指定する	color = 'plum'
＜オプション＞パウダーブルーにグラフの色を設定する	color = 'powderblue'
＜オプション＞パープルに色を設定する	color = 'purple'
＜オプション＞レベッカパープルを使う	color = 'rebeccapurple'
＜オプション＞赤に色を設定する	color = 'red'
＜オプション＞ロージーブラウンに色を指定する	color = 'rosybrown'
＜オプション＞色をロイヤルブルーに設定する	color = 'royalblue'
＜オプション＞色をサドルブラウンに設定する	color = 'saddlebrown'
＜オプション＞サーモン色を用いる	color = 'salmon'
＜オプション＞色をサーモンに設定する	color = 'salmon'
＜オプション＞サンディーブラウンを使う	color = 'sandybrown'
＜オプション＞シーグリーンを用いる	color = 'seagreen'
＜オプション＞色をシーグリーンに変更する	color = 'seagreen'
＜オプション＞グラフの色を貝殻に指定する	color = 'seashell'
＜オプション＞シエナ色を用いる	color = 'sienna'
＜オプション＞シエナに色を設定する	color = 'sienna'
＜オプション＞シルバー色を用いる	color = 'silver'
＜オプション＞シルバーにグラフの色を指定する	color = 'silver'
＜オプション＞スカイブルーを用いる	color = 'skyblue'
＜オプション＞スカイブルーにグラフの色を変更する	color = 'skyblue'
＜オプション＞スレートブルー色を用いる	color = 'slateblue'
＜オプション＞グラフの色をスレートブルーに変更する	color = 'slateblue'
＜オプション＞色をスラグレーに設定する	color = 'slategray'
＜オプション＞スラグレーを使う	color = 'slategrey'
＜オプション＞スラグレーにグラフの色をする	color = 'slategrey'
＜オプション＞色をスノーに設定する	color = 'snow'
＜オプション＞色をスプリンググリーンに指定する	color = 'springgreen'
＜オプション＞スチールブルーにグラフの色を設定する	color = 'steelblue'
＜オプション＞タン色を使用する	color = 'tan'
＜オプション＞グラフの色をタンにセットする	color = 'tan'
＜オプション＞青緑色を用いる	color = 'teal'
＜オプション＞青緑に色を設定する	color = 'teal'
＜オプション＞シスルを使用する	color = 'thistle'
＜オプション＞グラフの色をシスルにセットする	color = 'thistle'
＜オプション＞トマトにグラフの色を設定する	color = 'tomato'
＜オプション＞青緑を用いる	color = 'turquoise'
＜オプション＞青緑にグラフの色を指定する	color = 'turquoise'
＜オプション＞青紫を使う	color = 'violet'
＜オプション＞色をバイオレットに指定する	color = 'violet'
＜オプション＞小麦色を使う	color = 'wheat'
＜オプション＞色を小麦色に設定する	color = 'wheat'
＜オプション＞ホワイトを用いる	color = 'white'
＜オプション＞グラフの色を白に変更する	color = 'white'
＜オプション＞ホワイトスモーク色を用いる	color = 'whitesmoke'
＜オプション＞色をホワイトスモークに設定する	color = 'whitesmoke'
＜オプション＞黄色にグラフの色を変更する	color = 'yellow'
＜オプション＞イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
折れ線グラフの色をアリスブルーに指定する	plt.plot(データ列, データ列2, color='aliceblue')
線グラフを描画して、その色をアリスブルーに変更する	plt.plot(データ列, データ列2, color='aliceblue')
線グラフを描画してその色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
線グラフの色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
折れ線グラフを描画して、その色をアクアに指定する	plt.plot(データ列, データ列2, color='aqua')
折れ線グラフを描画して、その色をアクアマリンにセットする	plt.plot(データ列, データ列2, color='aquamarine')
折れ線グラフを描画して、その色を紺碧に変更する	plt.plot(データ列, データ列2, color='azure')
折れ線グラフの色をベージュにセットする	plt.plot(データ列, データ列2, color='beige')
線グラフを描画して、色をベージュに変更する	plt.plot(データ列, データ列2, color='beige')
折れ線グラフの色をビスクに指定する	plt.plot(データ列, データ列2, color='bisque')
線グラフを描画して、その色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
折れ線グラフの色をブラックに指定する	plt.plot(データ列, データ列2, color='black')
線グラフを描画して、その色をブラックにする	plt.plot(データ列, データ列2, color='black')
線グラフの色をブランチドアーモンドに指定する	plt.plot(データ列, データ列2, color='blanchedalmond')
線グラフを描画して、色をブランチドアーモンドに変更する	plt.plot(データ列, データ列2, color='blanchedalmond')
折れ線グラフの色を青にセットする	plt.plot(データ列, データ列2, color='blue')
線グラフを描画して、その色を青に変更する	plt.plot(データ列, データ列2, color='blue')
折れ線グラフを描画して、色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
線グラフの色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
線グラフを描画して、その色をブラウンに設定する	plt.plot(データ列, データ列2, color='brown')
折れ線グラフを描画して、色をバリーウッドに変更する	plt.plot(データ列, データ列2, color='burlywood')
折れ線グラフの色をカデットブルーに指定する	plt.plot(データ列, データ列2, color='cadetblue')
線グラフを描画して、その色をカデットブルーに指定する	plt.plot(データ列, データ列2, color='cadetblue')
線グラフの色を黄緑に設定する	plt.plot(データ列, データ列2, color='chartreuse')
折れ線グラフを描画してその色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
折れ線グラフの色をチョコレートに指定する	plt.plot(データ列, データ列2, color='chocolate')
折れ線グラフを描画して色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
折れ線グラフの色をコーラルに指定する	plt.plot(データ列, データ列2, color='coral')
線グラフを描画して、その色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
折れ線グラフの色をやわらかい青に指定する	plt.plot(データ列, データ列2, color='cornflowerblue')
折れ線グラフを描画して、色をコーンフラワーブルーに指定する	plt.plot(データ列, データ列2, color='cornflowerblue')
線グラフの色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
線グラフを描画して色をコーンズシルクに指定する	plt.plot(データ列, データ列2, color='cornsilk')
線グラフの色を深紅に設定する	plt.plot(データ列, データ列2, color='crimson')
折れ線グラフを描画して色を深紅に設定する	plt.plot(データ列, データ列2, color='crimson')
折れ線グラフを描画してその色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
線グラフの色を紺に指定する	plt.plot(データ列, データ列2, color='darkblue')
濃い青色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkblue')
折れ線グラフを描画して、その色をダークブルーに設定する	plt.plot(データ列, データ列2, color='darkblue')
折れ線グラフの色を濃いシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
折れ線グラフを描画してその色をダークシアンに指定する	plt.plot(データ列, データ列2, color='darkcyan')
折れ線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='darkgoldenrod')
折れ線グラフを描画して、色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
折れ線グラフを描画して、色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
線グラフの色をダークグリーンにする	plt.plot(データ列, データ列2, color='darkgreen')
線グラフを描画してその色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
折れ線グラフの色をダークグレーにセットする	plt.plot(データ列, データ列2, color='darkgrey')
線グラフを描画してその色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
線グラフを描画して色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
折れ線グラフを描画して色をダークマゼンタに指定する	plt.plot(データ列, データ列2, color='darkmagenta')
線グラフの色をダークオリーブグリーンに指定する	plt.plot(データ列, データ列2, color='darkolivegreen')
線グラフを描画して、その色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
線グラフを描画してその色をダークオレンジに変更する	plt.plot(データ列, データ列2, color='darkorange')
折れ線グラフの色をダークオーキッドにする	plt.plot(データ列, データ列2, color='darkorchid')
折れ線グラフを描画して、その色をダークオーキッドに変更する	plt.plot(データ列, データ列2, color='darkorchid')
線グラフの色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
ダークレッド色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='darkred')
折れ線グラフを描画して、色を暗い赤に指定する	plt.plot(データ列, データ列2, color='darkred')
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列, データ列2, color='darksalmon')
線グラフを描画して色をダークサーモンにする	plt.plot(データ列, データ列2, color='darksalmon')
線グラフを描画して、その色をダークシアグリーンにする	plt.plot(データ列, データ列2, color='darkseagreen')
折れ線グラフの色をダークスレートブルーにする	plt.plot(データ列, データ列2, color='darkslateblue')
折れ線グラフを描画してその色をダークスレートブルーに変更する	plt.plot(データ列, データ列2, color='darkslateblue')
線グラフの色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
線グラフを描画して、その色をダークスラテグレーに変更する	plt.plot(データ列, データ列2, color='darkslategray')
折れ線グラフの色をダーク・スラテグレーにする	plt.plot(データ列, データ列2, color='darkslategrey')
折れ線グラフを描画して、その色をダーク・スラテグレーに指定する	plt.plot(データ列, データ列2, color='darkslategrey')
折れ線グラフを描画してその色をダークターコイズにセットする	plt.plot(データ列, データ列2, color='darkturquoise')
線グラフの色をダークバイオレットに指定する	plt.plot(データ列, データ列2, color='darkviolet')
折れ線グラフを描画して、その色をダークバイオレットに変更する	plt.plot(データ列, データ列2, color='darkviolet')
折れ線グラフを描画してその色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
線グラフを描画して、その色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列, データ列2, color='dimgray')
線グラフを描画してその色をディムグレーにセットする	plt.plot(データ列, データ列2, color='dimgray')
折れ線グラフを描画して色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
線グラフの色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
線グラフを描画して、その色をドジャーブルーにする	plt.plot(データ列, データ列2, color='dodgerblue')
線グラフを描画して、その色を耐火レンガに変更する	plt.plot(データ列, データ列2, color='firebrick')
折れ線グラフの色をフローラルホワイトに変更する	plt.plot(データ列, データ列2, color='floralwhite')
線グラフを描画して、その色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
線グラフを描画して、その色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
折れ線グラフを描画して、色をフクシアに変更する	plt.plot(データ列, データ列2, color='fuchsia')
折れ線グラフの色をゲインズボロにする	plt.plot(データ列, データ列2, color='gainsboro')
折れ線グラフを描画してその色をゲインズボロに変更する	plt.plot(データ列, データ列2, color='gainsboro')
折れ線グラフの色をゴーストホワイトにセットする	plt.plot(データ列, データ列2, color='ghostwhite')
折れ線グラフを描画して、その色をゴーストホワイトにする	plt.plot(データ列, データ列2, color='ghostwhite')
線グラフの色をゴールドにする	plt.plot(データ列, データ列2, color='gold')
線グラフを描画してその色をゴールドにする	plt.plot(データ列, データ列2, color='gold')
折れ線グラフを描画して、その色をゴールデンロッドにする	plt.plot(データ列, データ列2, color='goldenrod')
線グラフを描画して、その色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
線グラフの色をグリーンに変更する	plt.plot(データ列, データ列2, color='green')
折れ線グラフを描画して、その色をグリーンイエローに変更する	plt.plot(データ列, データ列2, color='greenyellow')
折れ線グラフを描画して、色をグレーに変更する	plt.plot(データ列, データ列2, color='grey')
折れ線グラフを描画して、色をハニーデューに指定する	plt.plot(データ列, データ列2, color='honeydew')
線グラフを描画して、その色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
折れ線グラフの色をインディアンレッドにする	plt.plot(データ列, データ列2, color='indianred')
線グラフを描画して、色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
線グラフを描画してその色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
折れ線グラフの色をアイボリーに変更する	plt.plot(データ列, データ列2, color='ivory')
折れ線グラフを描画して色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
折れ線グラフを描画して、色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
折れ線グラフの色をラベンダーに指定する	plt.plot(データ列, データ列2, color='lavender')
線グラフを描画して、その色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
線グラフを描画して、その色をラベンダーブラッシュに変更する	plt.plot(データ列, データ列2, color='lavenderblush')
折れ線グラフの色をローングリーンにセットする	plt.plot(データ列, データ列2, color='lawngreen')
折れ線グラフを描画して、その色をローングリーンに指定する	plt.plot(データ列, データ列2, color='lawngreen')
折れ線グラフの色をレモンシフォンに変更する	plt.plot(データ列, データ列2, color='lemonchiffon')
線グラフを描画して、色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
折れ線グラフの色をライトブルーに指定する	plt.plot(データ列, データ列2, color='lightblue')
折れ線グラフを描画して、その色をライトブルーに指定する	plt.plot(データ列, データ列2, color='lightblue')
折れ線グラフを描画して、色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
線グラフを描画して色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
折れ線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
折れ線グラフを描画して、その色をライトゴールドロディイエローに指定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
折れ線グラフの色をライトグレーにセットする	plt.plot(データ列, データ列2, color='lightgray')
折れ線グラフを描画して、その色をライトグレーに指定する	plt.plot(データ列, データ列2, color='lightgray')
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列, データ列2, color='lightgreen')
折れ線グラフを描画して、その色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightgreen')
折れ線グラフを描画して、その色をライトグレーに変更する	plt.plot(データ列, データ列2, color='lightgrey')
折れ線グラフを描画して色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
線グラフの色をライトサーモンにセットする	plt.plot(データ列, データ列2, color='lightsalmon')
線グラフを描画してその色をライトサーモンにする	plt.plot(データ列, データ列2, color='lightsalmon')
折れ線グラフを描画して、色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightseagreen')
折れ線グラフを描画して、色をライトスカイブルーに指定する	plt.plot(データ列, データ列2, color='lightskyblue')
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
折れ線グラフを描画して色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
折れ線グラフを描画して、色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
折れ線グラフを描画してその色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
折れ線グラフを描画して、色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
折れ線グラフを描画して、色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
折れ線グラフの色をライムグリーンに指定する	plt.plot(データ列, データ列2, color='limegreen')
折れ線グラフを描画してその色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
線グラフの色をリネンに指定する	plt.plot(データ列, データ列2, color='linen')
折れ線グラフを描画して、色をリネンに変更する	plt.plot(データ列, データ列2, color='linen')
線グラフの色をマゼンタに指定する	plt.plot(データ列, データ列2, color='magenta')
折れ線グラフを描画して、色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
折れ線グラフの色をマルーンに変更する	plt.plot(データ列, データ列2, color='maroon')
線グラフを描画して、色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
折れ線グラフの色をミディアムアクアマリンに指定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
折れ線グラフを描画してその色をミディアムアクアマリンに指定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
折れ線グラフを描画してその色をミディアムブルーにセットする	plt.plot(データ列, データ列2, color='mediumblue')
折れ線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列, データ列2, color='mediumorchid')
折れ線グラフを描画してその色をミディアムオーキッドに変更する	plt.plot(データ列, データ列2, color='mediumorchid')
線グラフの色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
折れ線グラフを描画してその色をミディアムパープルにセットする	plt.plot(データ列, データ列2, color='mediumpurple')
線グラフの色をミディアムシアグリーンに変更する	plt.plot(データ列, データ列2, color='mediumseagreen')
線グラフを描画して、その色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
線グラフを描画して、その色をミディアムスレートブルーに変更する	plt.plot(データ列, データ列2, color='mediumslateblue')
線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
線グラフを描画して色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
折れ線グラフの色をミディアムターコイズに指定する	plt.plot(データ列, データ列2, color='mediumturquoise')
折れ線グラフを描画して色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
折れ線グラフを描画して色をミディアムバイオレットレッドに変更する	plt.plot(データ列, データ列2, color='mediumvioletred')
折れ線グラフの色をミッドナイトブルーに指定する	plt.plot(データ列, データ列2, color='midnightblue')
線グラフを描画して色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
折れ線グラフの色をミスティローズに指定する	plt.plot(データ列, データ列2, color='mistyrose')
折れ線グラフを描画して、色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
折れ線グラフを描画して、色をモカシンに変更する	plt.plot(データ列, データ列2, color='moccasin')
折れ線グラフを描画して、色をナバホホワイトにセットする	plt.plot(データ列, データ列2, color='navajowhite')
折れ線グラフを描画して、その色をネイビーに変更する	plt.plot(データ列, データ列2, color='navy')
折れ線グラフの色をオールドレースに指定する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフを描画してその色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフを描画して色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
折れ線グラフの色をオリベドラブにセットする	plt.plot(データ列, データ列2, color='olivedrab')
線グラフを描画して、その色をオリベドラブにする	plt.plot(データ列, データ列2, color='olivedrab')
線グラフの色をオレンジに変更する	plt.plot(データ列, データ列2, color='orange')
線グラフを描画して、その色をオレンジに指定する	plt.plot(データ列, データ列2, color='orange')
線グラフの色をオレンジレッドに変更する	plt.plot(データ列, データ列2, color='orangered')
線グラフを描画して、色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
折れ線グラフを描画して色をオーキッドに指定する	plt.plot(データ列, データ列2, color='orchid')
折れ線グラフの色をパールゴールデンロッドに指定する	plt.plot(データ列, データ列2, color='palegoldenrod')
折れ線グラフを描画して、その色をパールゴールデンロッドに指定する	plt.plot(データ列, データ列2, color='palegoldenrod')
線グラフの色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
線グラフを描画して、その色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
折れ線グラフを描画して色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
線グラフを描画して、色をパールバイオレットレッドにする	plt.plot(データ列, データ列2, color='palevioletred')
折れ線グラフの色をパパイヤウィップにセットする	plt.plot(データ列, データ列2, color='papayawhip')
線グラフを描画して、その色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
線グラフの色をピーチパフに変更する	plt.plot(データ列, データ列2, color='peachpuff')
折れ線グラフを描画して色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
線グラフの色をペルーにする	plt.plot(データ列, データ列2, color='peru')
線グラフを描画して、その色をペルーに指定する	plt.plot(データ列, データ列2, color='peru')
線グラフの色をピンクにする	plt.plot(データ列, データ列2, color='pink')
折れ線グラフを描画してその色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
線グラフを描画して、その色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
折れ線グラフを描画して、色をパウダーブルーに変更する	plt.plot(データ列, データ列2, color='powderblue')
折れ線グラフの色をパープルに指定する	plt.plot(データ列, データ列2, color='purple')
線グラフを描画してその色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
線グラフの色をレベッカパープルに指定する	plt.plot(データ列, データ列2, color='rebeccapurple')
線グラフを描画してその色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
線グラフの色を赤に設定する	plt.plot(データ列, データ列2, color='red')
折れ線グラフを描画してその色を赤に設定する	plt.plot(データ列, データ列2, color='red')
折れ線グラフの色をロージーブラウンに指定する	plt.plot(データ列, データ列2, color='rosybrown')
折れ線グラフを描画して、色をロージーブラウンに変更する	plt.plot(データ列, データ列2, color='rosybrown')
線グラフの色をロイヤルブルーに指定する	plt.plot(データ列, データ列2, color='royalblue')
折れ線グラフを描画してその色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
折れ線グラフを描画して、その色をサドルブラウンにセットする	plt.plot(データ列, データ列2, color='saddlebrown')
折れ線グラフを描画してその色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
折れ線グラフを描画して、色をサンディーブラウンに変更する	plt.plot(データ列, データ列2, color='sandybrown')
線グラフの色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
折れ線グラフを描画してその色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
線グラフの色を貝殻に変更する	plt.plot(データ列, データ列2, color='seashell')
線グラフを描画して、その色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
折れ線グラフの色をシエナに指定する	plt.plot(データ列, データ列2, color='sienna')
折れ線グラフを描画してその色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
折れ線グラフの色をシルバーに変更する	plt.plot(データ列, データ列2, color='silver')
折れ線グラフを描画してその色をシルバーにセットする	plt.plot(データ列, データ列2, color='silver')
折れ線グラフを描画してその色をスカイブルーに変更する	plt.plot(データ列, データ列2, color='skyblue')
折れ線グラフの色をスレートブルーに変更する	plt.plot(データ列, データ列2, color='slateblue')
線グラフを描画して、その色をスレートブルーにする	plt.plot(データ列, データ列2, color='slateblue')
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列, データ列2, color='slategray')
折れ線グラフを描画してその色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
線グラフの色をスラグレーに変更する	plt.plot(データ列, データ列2, color='slategrey')
線グラフを描画して、色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
線グラフを描画してその色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
折れ線グラフの色をスプリンググリーンに指定する	plt.plot(データ列, データ列2, color='springgreen')
折れ線グラフを描画して、色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
折れ線グラフを描画してその色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
折れ線グラフを描画してその色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
折れ線グラフの色を青緑に変更する	plt.plot(データ列, データ列2, color='teal')
折れ線グラフを描画して色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
線グラフの色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
折れ線グラフを描画して、その色をシスルに変更する	plt.plot(データ列, データ列2, color='thistle')
折れ線グラフを描画して色をトマトに指定する	plt.plot(データ列, データ列2, color='tomato')
折れ線グラフの色を青緑に設定する	plt.plot(データ列, データ列2, color='turquoise')
折れ線グラフを描画して、その色を青緑に変更する	plt.plot(データ列, データ列2, color='turquoise')
折れ線グラフの色をバイオレットに設定する	plt.plot(データ列, データ列2, color='violet')
線グラフを描画して、色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
線グラフの色を小麦色に指定する	plt.plot(データ列, データ列2, color='wheat')
折れ線グラフを描画して、その色を小麦色に変更する	plt.plot(データ列, データ列2, color='wheat')
折れ線グラフの色を白にセットする	plt.plot(データ列, データ列2, color='white')
折れ線グラフを描画してその色をホワイトに設定する	plt.plot(データ列, データ列2, color='white')
折れ線グラフを描画して、その色をホワイトスモークに変更する	plt.plot(データ列, データ列2, color='whitesmoke')
折れ線グラフの色を黄色にする	plt.plot(データ列, データ列2, color='yellow')
折れ線グラフを描画して、その色を黄色に変更する	plt.plot(データ列, データ列2, color='yellow')
折れ線グラフの色をイエローグリーンに指定する	plt.plot(データ列, データ列2, color='yellowgreen')
線グラフを描画してその色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
ヒストグラムを描画して、その色をアリスブルーに指定する	plt.hist(データ列, color='aliceblue')
アンティークホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='antiquewhite')
ヒストグラムを描画して、色をアンティークホワイトに指定する	plt.hist(データ列, color='antiquewhite')
アクアにヒストグラムの色を変更する	plt.hist(データ列, color='aqua')
ヒストグラムを描画して、色をアクアに設定する	plt.hist(データ列, color='aqua')
ヒストグラムの色をアクアマリンに変更する	plt.hist(データ列, color='aquamarine')
ヒストグラムを描画して、その色をアクアマリンに指定する	plt.hist(データ列, color='aquamarine')
ヒストグラムを描画して、その色を紺碧に指定する	plt.hist(データ列, color='azure')
ヒストグラムを描画して、その色をベージュにセットする	plt.hist(データ列, color='beige')
ヒストグラムを描画してその色をビスクにセットする	plt.hist(データ列, color='bisque')
ヒストグラムの色をブラックにする	plt.hist(データ列, color='black')
ヒストグラムを描画して、その色をブラックに変更する	plt.hist(データ列, color='black')
ヒストグラムを描画して色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
ヒストグラムの色を青にセットする	plt.hist(データ列, color='blue')
ヒストグラムを描画して、その色を青に指定する	plt.hist(データ列, color='blue')
ヒストグラムを描画して、その色をブルーバイオレットにする	plt.hist(データ列, color='blueviolet')
ヒストグラムの色をブラウンに設定する	plt.hist(データ列, color='brown')
ヒストグラムを描画して、色を茶色に指定する	plt.hist(データ列, color='brown')
ヒストグラムの色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
ヒストグラムを描画して、その色をバリーウッドにセットする	plt.hist(データ列, color='burlywood')
カデットブルーにヒストグラムの色を指定する	plt.hist(データ列, color='cadetblue')
ヒストグラムを描画して、その色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
シャルトリューズにヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
ヒストグラムを描画して色を黄緑に設定する	plt.hist(データ列, color='chartreuse')
ヒストグラムを描画して色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
コーラルにヒストグラムの色を設定する	plt.hist(データ列, color='coral')
ヒストグラムを描画して色をコーラルに指定する	plt.hist(データ列, color='coral')
コーンフラワーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムを描画して、色をコーンフラワーブルーに変更する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムの色をコーンズシルクにセットする	plt.hist(データ列, color='cornsilk')
ヒストグラムを描画して色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
真紅にヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
ヒストグラムを描画して、その色をクリムゾンにする	plt.hist(データ列, color='crimson')
シアンにヒストグラムの色を設定する	plt.hist(データ列, color='cyan')
ヒストグラムを描画して、色をシアンに変更する	plt.hist(データ列, color='cyan')
ヒストグラムを描画して、色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
ヒストグラムの色を濃いシアンにセットする	plt.hist(データ列, color='darkcyan')
ヒストグラムを描画して色を濃いシアンに設定する	plt.hist(データ列, color='darkcyan')
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
ヒストグラムを描画してその色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgray')
ヒストグラムを描画して、その色をダークグリーンに変更する	plt.hist(データ列, color='darkgreen')
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
ヒストグラムを描画して、その色をダークグレーに指定する	plt.hist(データ列, color='darkgrey')
ダークカーキにヒストグラムの色をセットする	plt.hist(データ列, color='darkkhaki')
ヒストグラムを描画して、その色をダークカーキにセットする	plt.hist(データ列, color='darkkhaki')
ダークマゼンタにヒストグラムの色を変更する	plt.hist(データ列, color='darkmagenta')
ヒストグラムを描画してその色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
ダークオリーブグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkolivegreen')
ヒストグラムを描画してその色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
ヒストグラムを描画して、その色をダークオレンジに変更する	plt.hist(データ列, color='darkorange')
ダークオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkorchid')
ヒストグラムを描画してその色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
ヒストグラムの色を暗い赤に指定する	plt.hist(データ列, color='darkred')
ヒストグラムを描画して、その色をダークレッドに設定する	plt.hist(データ列, color='darkred')
ヒストグラムを描画してその色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
ヒストグラムの色をダークシアグリーンにセットする	plt.hist(データ列, color='darkseagreen')
ヒストグラムを描画して色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
ダークスレートブルーにヒストグラムの色を変更する	plt.hist(データ列, color='darkslateblue')
ヒストグラムを描画して、色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
ヒストグラムの色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
ヒストグラムを描画して、色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
ダーク・スラテグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkslategrey')
ヒストグラムを描画して、色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
ダークターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='darkturquoise')
ヒストグラムを描画して、その色をダークターコイズに変更する	plt.hist(データ列, color='darkturquoise')
ヒストグラムを描画して、色をダークバイオレットに変更する	plt.hist(データ列, color='darkviolet')
デピンクにヒストグラムの色を指定する	plt.hist(データ列, color='deeppink')
ヒストグラムを描画して、その色をデピンクにセットする	plt.hist(データ列, color='deeppink')
ディープスカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='deepskyblue')
ヒストグラムを描画して、色をディープスカイブルーに変更する	plt.hist(データ列, color='deepskyblue')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
ヒストグラムを描画してその色をディムグレーに変更する	plt.hist(データ列, color='dimgray')
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgrey')
ヒストグラムを描画して、その色をディムグレーにする	plt.hist(データ列, color='dimgrey')
ドジャーブルーにヒストグラムの色を指定する	plt.hist(データ列, color='dodgerblue')
ヒストグラムを描画して、色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
耐火レンガにヒストグラムの色を設定する	plt.hist(データ列, color='firebrick')
ヒストグラムを描画して、色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
ヒストグラムを描画して、その色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
ヒストグラムの色をフォレストグリーンにセットする	plt.hist(データ列, color='forestgreen')
ヒストグラムを描画してその色をフォレストグリーンにセットする	plt.hist(データ列, color='forestgreen')
ヒストグラムを描画してその色をフクシアにする	plt.hist(データ列, color='fuchsia')
ゲインズボロにヒストグラムの色を設定する	plt.hist(データ列, color='gainsboro')
ヒストグラムを描画してその色をゲインズボロにセットする	plt.hist(データ列, color='gainsboro')
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
ヒストグラムを描画して、その色をゴーストホワイトに指定する	plt.hist(データ列, color='ghostwhite')
ヒストグラムの色をゴールドにセットする	plt.hist(データ列, color='gold')
ヒストグラムを描画して、色をゴールドに変更する	plt.hist(データ列, color='gold')
ヒストグラムを描画して、その色をゴールデンロッドにセットする	plt.hist(データ列, color='goldenrod')
ヒストグラムを描画してその色をグレーに変更する	plt.hist(データ列, color='gray')
ヒストグラムを描画して、色をグリーンに設定する	plt.hist(データ列, color='green')
グリーンイエローにヒストグラムの色を変更する	plt.hist(データ列, color='greenyellow')
ヒストグラムを描画して、その色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
ヒストグラムの色をグレーに変更する	plt.hist(データ列, color='grey')
ヒストグラムを描画して、色をグレーに設定する	plt.hist(データ列, color='grey')
ヒストグラムの色をハニーデューに変更する	plt.hist(データ列, color='honeydew')
ヒストグラムを描画して、色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
ヒストグラムを描画してその色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
ヒストグラムの色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
ヒストグラムを描画してその色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
インディゴにヒストグラムの色を指定する	plt.hist(データ列, color='indigo')
ヒストグラムを描画して、その色をインディゴに変更する	plt.hist(データ列, color='indigo')
ヒストグラムを描画して、その色をアイボリーに指定する	plt.hist(データ列, color='ivory')
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
ヒストグラムを描画してその色をカーキに指定する	plt.hist(データ列, color='khaki')
ヒストグラムを描画してその色をラベンダーに設定する	plt.hist(データ列, color='lavender')
ヒストグラムの色をラベンダーブラッシュにセットする	plt.hist(データ列, color='lavenderblush')
ヒストグラムを描画して、その色をラベンダーブラッシュにする	plt.hist(データ列, color='lavenderblush')
ヒストグラムを描画して、色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
ヒストグラムを描画して、色をレモンシフォンにする	plt.hist(データ列, color='lemonchiffon')
ヒストグラムを描画して、その色をライトブルーにセットする	plt.hist(データ列, color='lightblue')
ヒストグラムの色をライトコーラルに変更する	plt.hist(データ列, color='lightcoral')
ヒストグラムを描画してその色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
ヒストグラムを描画してその色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
ヒストグラムの色をライトゴールドロディイエローに指定する	plt.hist(データ列, color='lightgoldenrodyellow')
ヒストグラムの色をライトグレーにセットする	plt.hist(データ列, color='lightgray')
ヒストグラムを描画して、その色をライトグレーに変更する	plt.hist(データ列, color='lightgray')
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightgreen')
ヒストグラムを描画して色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgrey')
ヒストグラムを描画してその色をライトグレーに変更する	plt.hist(データ列, color='lightgrey')
淡いピンク色にヒストグラムの色を設定する	plt.hist(データ列, color='lightpink')
ヒストグラムの色をライトサーモンに変更する	plt.hist(データ列, color='lightsalmon')
ヒストグラムを描画して色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightseagreen')
ヒストグラムを描画して、色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
ヒストグラムの色をライトスカイブルーに変更する	plt.hist(データ列, color='lightskyblue')
ヒストグラムを描画して、色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
ヒストグラムを描画してその色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
ヒストグラムの色をライトスチールブルーにセットする	plt.hist(データ列, color='lightsteelblue')
ヒストグラムを描画して、色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
ヒストグラムの色をライトイエローに指定する	plt.hist(データ列, color='lightyellow')
ヒストグラムを描画して色をライトイエローにセットする	plt.hist(データ列, color='lightyellow')
ヒストグラムを描画して、その色をライムに変更する	plt.hist(データ列, color='lime')
ライムグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='limegreen')
ヒストグラムを描画してその色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
ヒストグラムを描画してその色をリネンに変更する	plt.hist(データ列, color='linen')
ヒストグラムを描画してその色をマゼンタに設定する	plt.hist(データ列, color='magenta')
マルーンにヒストグラムの色をする	plt.hist(データ列, color='maroon')
ヒストグラムを描画して、その色をマルーンにセットする	plt.hist(データ列, color='maroon')
ヒストグラムを描画してその色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
ミディアムブルーにヒストグラムの色を変更する	plt.hist(データ列, color='mediumblue')
ヒストグラムを描画して、色をミディアムブルーにセットする	plt.hist(データ列, color='mediumblue')
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
ヒストグラムを描画して、色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
ヒストグラムの色をミディアムシアグリーンにセットする	plt.hist(データ列, color='mediumseagreen')
ヒストグラムを描画して、色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
ミディアムスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumslateblue')
ヒストグラムを描画して、色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
ミディアムスプリンググリーンにヒストグラムの色を指定する	plt.hist(データ列, color='mediumspringgreen')
ヒストグラムを描画してその色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
ヒストグラムの色をミディアムターコイズに指定する	plt.hist(データ列, color='mediumturquoise')
ヒストグラムを描画してその色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
ヒストグラムを描画して、色をミディアムバイオレットレッドに指定する	plt.hist(データ列, color='mediumvioletred')
ミッドナイトブルーにヒストグラムの色を指定する	plt.hist(データ列, color='midnightblue')
ヒストグラムを描画して、その色をミッドナイトブルーに指定する	plt.hist(データ列, color='midnightblue')
ヒストグラムの色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
ヒストグラムを描画して、その色をミントクリームにする	plt.hist(データ列, color='mintcream')
ヒストグラムを描画してその色をミスティローズにセットする	plt.hist(データ列, color='mistyrose')
ヒストグラムの色をモカシンに指定する	plt.hist(データ列, color='moccasin')
ヒストグラムを描画して、色をモカシンに指定する	plt.hist(データ列, color='moccasin')
ナバホホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='navajowhite')
ヒストグラムを描画して、その色をナバホホワイトに指定する	plt.hist(データ列, color='navajowhite')
ヒストグラムの色をネイビーに指定する	plt.hist(データ列, color='navy')
ヒストグラムを描画して色をネイビーに設定する	plt.hist(データ列, color='navy')
ヒストグラムの色をオールドレースにセットする	plt.hist(データ列, color='oldlace')
ヒストグラムを描画して、その色をオールドレースにセットする	plt.hist(データ列, color='oldlace')
ヒストグラムを描画してその色をオリーブに設定する	plt.hist(データ列, color='olive')
ヒストグラムの色をオリベドラブにセットする	plt.hist(データ列, color='olivedrab')
ヒストグラムを描画して、その色をオリベドラブにする	plt.hist(データ列, color='olivedrab')
ヒストグラムの色をオレンジにする	plt.hist(データ列, color='orange')
ヒストグラムを描画して、その色をオレンジにする	plt.hist(データ列, color='orange')
ヒストグラムの色をオレンジレッドにセットする	plt.hist(データ列, color='orangered')
ヒストグラムを描画してその色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
ヒストグラムを描画してその色をオーキッドに設定する	plt.hist(データ列, color='orchid')
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
ヒストグラムを描画して、その色をパールゴールデンロッドに変更する	plt.hist(データ列, color='palegoldenrod')
ヒストグラムを描画して、色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
ヒストグラムを描画して、色をパレットトルコイズに変更する	plt.hist(データ列, color='paleturquoise')
ヒストグラムを描画して色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
ヒストグラムを描画して、その色をパパイヤウィップに指定する	plt.hist(データ列, color='papayawhip')
ヒストグラムの色をピーチパフにセットする	plt.hist(データ列, color='peachpuff')
ヒストグラムを描画して色をピーチパフにする	plt.hist(データ列, color='peachpuff')
ヒストグラムを描画してその色をペルーに設定する	plt.hist(データ列, color='peru')
ピンクにヒストグラムの色を設定する	plt.hist(データ列, color='pink')
ヒストグラムを描画してその色をピンクに設定する	plt.hist(データ列, color='pink')
ヒストグラムの色をプラムに変更する	plt.hist(データ列, color='plum')
ヒストグラムを描画して、その色をプラムに指定する	plt.hist(データ列, color='plum')
ヒストグラムの色をパウダーブルーに指定する	plt.hist(データ列, color='powderblue')
ヒストグラムを描画してその色をパウダーブルーに指定する	plt.hist(データ列, color='powderblue')
ヒストグラムを描画して、その色をパープルに指定する	plt.hist(データ列, color='purple')
ヒストグラムを描画して色をレベッカパープルにする	plt.hist(データ列, color='rebeccapurple')
ヒストグラムを描画して、色を赤に指定する	plt.hist(データ列, color='red')
ロージーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='rosybrown')
ヒストグラムを描画して、色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
ロイヤルブルーにヒストグラムの色を指定する	plt.hist(データ列, color='royalblue')
ヒストグラムを描画してその色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
ヒストグラムを描画して、その色をサドルブラウンに指定する	plt.hist(データ列, color='saddlebrown')
サーモンにヒストグラムの色を変更する	plt.hist(データ列, color='salmon')
ヒストグラムを描画して、色をサーモンに設定する	plt.hist(データ列, color='salmon')
ヒストグラムの色をサンディーブラウンにする	plt.hist(データ列, color='sandybrown')
ヒストグラムを描画してその色をサンディーブラウンに変更する	plt.hist(データ列, color='sandybrown')
ヒストグラムを描画して、その色をシーグリーンにセットする	plt.hist(データ列, color='seagreen')
ヒストグラムを描画してその色を貝殻に指定する	plt.hist(データ列, color='seashell')
ヒストグラムの色をシエナに変更する	plt.hist(データ列, color='sienna')
ヒストグラムを描画してその色をシエナに設定する	plt.hist(データ列, color='sienna')
ヒストグラムを描画して色をシルバーに設定する	plt.hist(データ列, color='silver')
ヒストグラムの色をスカイブルーにセットする	plt.hist(データ列, color='skyblue')
ヒストグラムを描画して、その色をスカイブルーに変更する	plt.hist(データ列, color='skyblue')
ヒストグラムの色をスレートブルーに指定する	plt.hist(データ列, color='slateblue')
ヒストグラムを描画してその色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
ヒストグラムを描画して、その色をスラグレーに指定する	plt.hist(データ列, color='slategrey')
スノーにヒストグラムの色を設定する	plt.hist(データ列, color='snow')
ヒストグラムを描画して、その色をスノーに指定する	plt.hist(データ列, color='snow')
ヒストグラムを描画して色をスプリンググリーンに指定する	plt.hist(データ列, color='springgreen')
スチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='steelblue')
ヒストグラムを描画してその色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
淡い茶色にヒストグラムの色を設定する	plt.hist(データ列, color='tan')
ヒストグラムを描画して、その色を淡い茶色に設定する	plt.hist(データ列, color='tan')
ヒストグラムの色を青緑にセットする	plt.hist(データ列, color='teal')
ヒストグラムを描画してその色を青緑に変更する	plt.hist(データ列, color='teal')
シスルにヒストグラムの色を設定する	plt.hist(データ列, color='thistle')
ヒストグラムを描画して、色をシスルに変更する	plt.hist(データ列, color='thistle')
ヒストグラムを描画して、色をトマトに設定する	plt.hist(データ列, color='tomato')
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='turquoise')
ヒストグラムを描画して、その色を青緑にする	plt.hist(データ列, color='turquoise')
青紫にヒストグラムの色を設定する	plt.hist(データ列, color='violet')
ヒストグラムを描画してその色を青紫に設定する	plt.hist(データ列, color='violet')
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
ヒストグラムを描画してその色を小麦色に設定する	plt.hist(データ列, color='wheat')
ヒストグラムの色をホワイトに設定する	plt.hist(データ列, color='white')
ヒストグラムを描画して、色をホワイトに設定する	plt.hist(データ列, color='white')
ヒストグラムの色をホワイトスモークに指定する	plt.hist(データ列, color='whitesmoke')
ヒストグラムを描画して、色をホワイトスモークに変更する	plt.hist(データ列, color='whitesmoke')
ヒストグラムを描画してその色を黄色に変更する	plt.hist(データ列, color='yellow')
ヒストグラムを描画して、色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
折れ線グラフを描画して色を白くする	plt.plot(データ列, データ列2, color='w')
ヒストグラムにカラーマップを使う	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
＜オプション＞グラフの種類を一点鎖線にする	linestyle = 'dashbot'
＜オプション＞線種を点線にセットする	linestyle = 'dotted'
＜オプション＞グラフの種類を実線に変更する	linestyle = 'solid'
＜オプション＞グラフの線種を実線に変更する	linestyle = 'solid'
折れ線グラフのスタイルを破線に指定する	plt.plot(データ列, データ列2, linestyle='dashed')
折れ線グラフを破線として描画する	plt.plot(データ列, データ列2, linestyle='dashed')
一点鎖線に折れ線グラフのスタイルを指定する	plt.plot(データ列, データ列2, linestyle='dashbot')
折れ線グラフを一点鎖線を用いて描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
折れ線グラフを点線に変更する	plt.plot(データ列, データ列2, linestyle='dotted')
点線で折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dotted')
破線にヒストグラムの線のスタイルを指定する	plt.hist(データ列, linestyle='dashed')
破線を使ってヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
ヒストグラムの線のスタイルを一点鎖線に指定する	plt.hist(データ列, linestyle='dashbot')
一点鎖線としてヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
ヒストグラムの線のスタイルを実線に変更する	plt.hist(データ列, linestyle='solid')
＜オプション＞ポイント印を加える	marker = '.'
＜オプション＞上三角マーカーを使う	marker = '^'
＜オプション＞△マーカーを描画する	marker = '^'
＜オプション＞下三角マーカーを加える	marker = 'v'
＜オプション＞下三角印を描画する	marker = 'v'
＜オプション＞左三角マーカーを加える	marker = '<'
＜オプション＞右三角マーカーを用いる	marker = '>'
＜オプション＞クロス印を使う	marker = 'x'
＜オプション＞バツ印を描画する	marker = 'x'
＜オプション＞大バツマーカーを使用する	marker = 'X'
＜オプション＞四角印を用いる	marker = 's'
＜オプション＞ダイアモンド印を用いる	marker = 'D'
＜オプション＞星マーカーを用いる	marker = '*'
折れ線グラフにポイントマーカーを用いる	plt.plot(データ列, データ列2, marker='.')
折れ線グラフのマーカーをポイント印にする	plt.plot(データ列, データ列2, marker='.')
折れ線グラフに描画して印をポイントにする	plt.plot(データ列, データ列2, marker='.')
折れ線グラフに丸印を使用する	plt.plot(データ列, データ列2, marker='o')
データ列を折れ線グラフに描画してマーカーを丸印にする	plt.plot(データ列, データ列2, marker='o')
折れ線グラフに△マーカーを用いる	plt.plot(データ列, データ列2, marker='^')
折れ線グラフの印を△にする	plt.plot(データ列, データ列2, marker='^')
折れ線グラフに描画して、マーカーを▲にする	plt.plot(データ列, データ列2, marker='^')
折れ線グラフに下三角マーカーを用いる	plt.plot(データ列, データ列2, marker='v')
データ列を折れ線グラフに描画してマーカーを▽にする	plt.plot(データ列, データ列2, marker='v')
折れ線グラフに左三角マーカーを加える	plt.plot(データ列, データ列2, marker='<')
データ列を折れ線グラフに描画して、マーカーを左三角にする	plt.plot(データ列, データ列2, marker='<')
折れ線グラフに右三角印を加える	plt.plot(データ列, データ列2, marker='>')
折れ線グラフの印を右三角印にする	plt.plot(データ列, データ列2, marker='>')
折れ線グラフに描画して、印を右三角印にする	plt.plot(データ列, データ列2, marker='>')
折れ線グラフにバツマーカーを加える	plt.plot(データ列, データ列2, marker='x')
折れ線グラフの印をクロスにする	plt.plot(データ列, データ列2, marker='x')
折れ線グラフに描画して、マーカーをバツ印にする	plt.plot(データ列, データ列2, marker='x')
データ列を折れ線グラフに描画して、印を大バツにする	plt.plot(データ列, データ列2, marker='X')
折れ線グラフに四角印を使う	plt.plot(データ列, データ列2, marker='s')
折れ線グラフの印を四角にする	plt.plot(データ列, データ列2, marker='s')
折れ線グラフに描画して、印を四角印にする	plt.plot(データ列, データ列2, marker='s')
折れ線グラフに菱形マーカーを使う	plt.plot(データ列, データ列2, marker='D')
データ列を折れ線グラフに描画して、印をダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
データ列を折れ線グラフに描画して、マーカーを星にする	plt.plot(データ列, データ列2, marker='*')
折れ線グラフに赤い三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
折れ線グラフの三角印を赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
折れ線グラフに赤い▽印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
折れ線グラフに赤いバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
折れ線グラフのクロスマーカーを赤色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
折れ線グラフの四角マーカーを赤色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
折れ線グラフに赤いダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
折れ線グラフに青い丸印を描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
折れ線グラフに青い上三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
折れ線グラフの三角マーカーを青色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
折れ線グラフに青い▼マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
折れ線グラフの下三角印を青色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
折れ線グラフに青い左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
折れ線グラフの四角マーカーを青色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
青い菱形印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
折れ線グラフの菱形マーカーを青くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
黒い▲マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
黒い▼マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
折れ線グラフの下三角マーカーを黒色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
黒い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
折れ線グラフに黒いクロスマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
折れ線グラフの大バツマーカーを黒色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
折れ線グラフに黒い四角印を描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
黒い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
折れ線グラフのダイアモンドマーカーを黒色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
黒い星マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
折れ線グラフの丸印を黄色くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
折れ線グラフに黄色い△マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
折れ線グラフの上三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
折れ線グラフに黄色い▽マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
折れ線グラフの▼マーカーを黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
黄色い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
折れ線グラフの大バツ印を黄色くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
折れ線グラフの四角マーカーを黄色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
折れ線グラフに黄色いダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
折れ線グラフの菱形印を黄色くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
黄色い星マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
折れ線グラフに緑色の三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
折れ線グラフの三角印を緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
折れ線グラフの▽マーカーを緑色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
緑色の左三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
折れ線グラフにサイズnのポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markersize=n)
折れ線グラフのポイント印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='.', markersize=n)
折れ線グラフに大きさnの上三角印を描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
折れ線グラフの上三角マーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='^', markersize=n)
折れ線グラフに大きさnの▽マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
折れ線グラフの▽マーカーの大きさをnにセットする	plt.plot(データ列, データ列2, marker='v', markersize=n)
折れ線グラフの左三角印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='<', markersize=n)
折れ線グラフの右三角マーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='>', markersize=n)
折れ線グラフのバツ印のサイズをnに設定する	plt.plot(データ列, データ列2, marker='x', markersize=n)
折れ線グラフの四角マーカーのサイズをnに変更する	plt.plot(データ列, データ列2, marker='s', markersize=n)
折れ線グラフのダイアモンド印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
折れ線グラフの星マーカーのサイズをnにする	plt.plot(データ列, データ列2, marker='*', markersize=n)
折れ線グラフのポイント印の線幅をnにセットする	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
折れ線グラフの丸マーカーの線幅をnにセットする	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
折れ線グラフに線幅nの△マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
折れ線グラフの▲マーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
折れ線グラフに線幅nの▽印を描画する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
折れ線グラフの下三角マーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
折れ線グラフの左三角マーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
折れ線グラフに線幅nのバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
折れ線グラフのクロス印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
折れ線グラフに線幅nの四角印を描画する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
折れ線グラフの四角マーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
折れ線グラフに線幅nのダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
折れ線グラフのダイアモンドマーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
折れ線グラフの星印の線幅をnに変更する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
ベクトルの計算をする	import numpy as np
＜オプション＞３二ビット整数型を使う	dtype = np.int16
リストから配列を初期化する	np.array(aList)
イテラブルを行列に変換する	np.array(iterable)
配列を列から作成する	np.array(iterable)
全要素を0で初期化したベクトル	np.zeros(要素数)
ゼロ埋めされた配列を作る	np.zeros(要素数)
整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int)
ゼロ埋めされた８ビット整数型の行列を作成する	np.zeros(要素数, dtype=np.int8)
符号なし８ビット整数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=np.uint8)
ゼロ埋めした三２ビット整数型の配列を作成する	np.zeros(要素数, dtype=np.int16)
ゼロ埋めしたブール型の配列	np.zeros(要素数, dtype=np.int32)
複素数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=bool)
整数型の０で全要素を初期化された行列	np.zeros(行数, 列数, dtype=np.int)
８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int8)
０で全要素を初期化した三2ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
全要素を０で初期化されたブール型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
０で全要素を初期化された複素数型の行列	np.zeros(行数, 列数, dtype=bool)
全要素を1で初期化したベクトル	np.ones(要素数, dtype=np.int)
要素が全て1の行列	np.ones(要素数, dtype=np.int)
全要素を初期値で初期化された行列	np.full(要素数, 初期値, dtype=np.int)
要素が全て初期値の行列を作る	np.full(要素数, 初期値, dtype=np.int)
全要素を初期値で初期化された行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
未初期化の行列を作る	np.empty(要素数, dtype=np.int)
行列と同じ大きさの空配列を作成する	np.empty_like(aArray)
0からNまでの配列を作成する	np.arange(N)
等差数列を行列にする	np.arange(開始値, 終端値, 等差)
行列の形状を変形する	aArray.reshape(行数, 列数)
ベクトルを2次元1列に変形する	aArray.reshape(-1, 1)
配列を横ベクトルに変形する	aArray.reshape(1, -1)
既存の配列をベースにして全要素が0の配列	np.zeros_like(aArray)
既存のベクトルを元に全要素が1の配列	np.ones_like(aArray)
既存の配列をベースにして全要素が初期値のベクトル	np.full_like(aArray, 初期値)
配列の列を選択する	aArray[:, 列番号]
ユニークな値を要素とする配列を使う	np.unique(aArray)
配列のユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
二次元リストの転置行列を計算する	[list(x) for x in list(zip(*aList))]
配列の和を計算する	aArray + aArray2
配列の各要素に加算する	aArray + aArray2
行列の各要素の積	np.multiply(aArray, aArray2)
ベクトルの内積	np.dot(aArray, aArray2)
行列積	np.matmul(aArray, aArray2)
逆行列	np.linalg.inv(aArray)
行列のムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
行列式	np.linalg.det(aArray)
行列間の各要素の最大公約数	np.gcd(aArray, aArray2)
配列間の要素ごとの最小公倍数を求める	np.lcm(aArray, aArray2)
行列の形	aArray.shape
配列の型を求める	aArray.dtype()
配列の次元の数	aArray.ndim
配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
行列の合計値	np.sum(aArray)
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
ベクトルの行ごとの合計値	np.sum(aArray, axis=1)
配列の平均値を求める	np.mean(aArray)
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
配列の行ごとの平均	np.mean(aArray, axis=1)
配列の最小を求める	np.min(aArray)
行列の列ごとの最小	np.min(aArray, axis=0)
行列の最大値を求める	np.max(aArray)
行列の行ごとの最大値を計算する	np.max(aArray, axis=1)
ベクトルの行ごとの標準偏差を求める	np.std(aArray, axis=1)
ベクトルの分散	np.var(aArray)
行列の累積和	np.cumsum(aArray)
ベクトルの累積積	np.cumprod(aArray)
配列から重複を除いた配列を作成する	np.unique(aArray)
ベクトルのユニークな要素を求める	np.unique(aArray)
ベクトルのユニークな要素とその個数を算出する	u, counts = np.unique(aArray, return_counts=True)
行列のユニークな要素とその位置を計算する	u, indices = np.unique(aArray, return_index=True)
配列を一次元化する	aArray.flatten()
ベクトルを平坦にする	aArray.flatten()
２つのオブジェクトが等しいか調べる	obj == obj2
二つのオブジェクトが同一参照かどうか調べる	obj is obj2
オブジェクトをユーザ向けの文字列にする	str(obj)
オブジェクトをイテラブルにする	iter(obj)
オブジェクトは関数	callable(obj)
オブジェクトのプロパティを取り除く	delattr(obj, プロパティ名)
オブジェクトに属性が存在するか	hasattr(obj, プロパティ名)
オブジェクトがプロパティを持つ	hasattr(obj, プロパティ名)
オブジェクトのプロパティの値を値に指定する	setattr(obj, プロパティ名, 値)
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
オブジェクトはあるクラスか調べる	isinstance(obj, クラス)
オブジェクトが整数クラスか調べる	isinstance(obj, int)
オブジェクトが浮動小数点数クラス	isinstance(obj, float)
オブジェクトは文字列クラスのインスタンス	isinstance(obj, str)
オブジェクトは論理値クラスのインスタンス	isinstance(obj, bool)
オブジェクトはリストクラスのインスタンスか調べる	isinstance(obj, list)
オブジェクトがタプル型かどうか調べる	isinstance(obj, tuple)
オブジェクトは辞書か調べる	isinstance(obj, dict)
オブジェクトは集合クラスか	isinstance(obj, set)
オブジェクトがバイト列型か調べる	isinstance(obj, bytes)
オブジェクトが数値かどうか	isinstance(obj, (int,float))
オブジェクトはリストかタプル	isinstance(obj, (list)
クラスのサブクラス	issubclass(サブクラス, クラス)
オブジェクトの固有のIDを使う	id(obj)
オブジェクトのクラスを使う	type(obj)
データフレームの要約統計量を求める	df.describe()
データフレームのリストカラムの要約統計量を計算する	df[aList].describe()
データ列の要約統計量を求める	ds.describe()
データフレームの列の要約統計量を求める	df[col].describe()
データフレームのリスト列の平均	df[aList].mean()
カラムの平均値を求める	ds.mean()
データフレームのカラムの平均	df[col].mean()
データフレームの中央値を計算する	df.median()
データ列の中央値を求める	ds.median()
データフレームのカラムのメディアン	df[col].median()
データフレームの第一四分位数を計算する	df.quantile(0.25)
データフレームのリストカラムの25パーセンタイル	df[aList].quantile(0.25)
列の第一四分位数を求める	ds.quantile(0.25)
データフレームのカラムの上位25%	df[col].quantile(0.25)
データフレームのリストカラムの75パーセンタイル	df[aList].quantile(0.75)
データフレームのカラムの75パーセンタイル	df[col].quantile(0.75)
データフレームのリストカラムのpercentパーセンタイル	df[aList].quantile(percent/100)
データフレームの列のpercentパーセンタイルを算出する	df[col].quantile(percent/100)
データフレームの最頻値を求める	df.mode()
データフレームのリスト列の最頻値を求める	df[aList].mode()
データフレームのリストカラムのどの値が最も現れるか調べる	df[aList].mode()
データ列の最頻値を求める	ds.mode()
データ列のどの値が最も現れるか調べる	ds.mode()
データフレームのカラムの最頻値を求める	df[col].mode()
データフレームのカラムのどの値が頻出か調べる	df[col].mode()
データフレームの標準偏差	df.std()
データフレームのリストカラムの標準偏差を計算する	df[aList].std()
データ列の標準偏差を計算する	ds.std()
データフレームのリストカラムの母標準偏差を求める	df[aList].std(ddof=0)
データ列の母標準偏差を求める	ds.std(ddof=0)
データフレームはどれだけ、分散しているか見る	df.var()
データフレームのリスト列の分散	df[aList].var()
データフレームのリスト列がどの程度、分散しているか確認する	df[aList].var()
カラムの分散	ds.var()
データ列がどの程度、分散しているか確認する	ds.var()
データフレームのカラムがどれだけ分散しているか見る	df[col].var()
データフレームの歪度を計算する	df.kurt()
データフレームは正規分布からどの程度、歪んでいるか調べる	df.kurt()
データフレームのリスト列の正規分布に対する左右対称性を計算する	df[aList].kurt()
データフレームのリストカラムは正規分布からどの程度歪んでいるか見る	df[aList].kurt()
カラムの歪度を求める	ds.kurt()
カラムが正規分布からどの程度、歪んでいるか見る	ds.kurt()
データフレームのカラムの正規分布に対する左右対称性	df[col].kurt()
データフレームのカラムが正規分布からどれだけ、歪んでいるか見る	df[col].kurt()
データフレームの尖度を計算する	df.skew()
データフレームは正規分布からどの程度尖っているか調べる	df.skew()
データフレームのリスト列の尖度	df[aList].skew()
データフレームのリストカラムが正規分布からどれだけ、尖っているか調べる	df[aList].skew()
データ列の正規分布に対する上下広がり	ds.skew()
データ列が正規分布からどれだけ、尖っているか見る	ds.skew()
データフレームのカラムの尖度を求める	df[col].skew()
データフレームのカラムが正規分布からどれだけ尖っているか見る	df[col].skew()
列を丸める	ds.round()
データフレームの列を丸める	df[col].round()
データフレームのリスト列を小数点以下n桁で丸める	df[aList].round(n)
データ列を小数点以下n桁で四捨五入する	ds.round(n)
データフレームを10の位で四捨五入する	df.round(-1)
データフレームのリスト列を10の位で丸める	df[aList].round(-1)
列を10の位で丸める	ds.round(-1)
データ列を100の位で四捨五入する	ds.round(-2)
データフレームのカラムを百の位で丸める	df[col].round(-2)
データフレームを千の位で四捨五入する	df.round(-3)
データフレームのリストカラムを千の位で丸める	df[aList].round(-3)
列を1000の位で四捨五入する	ds.round(-3)
データフレームを丸めて整数型にする	df.round().astype(int)
データフレームのリスト列を丸めて、整数型にする	df[aList].round().astype(int)
データ列を丸めて、整数にする	ds.round().astype(int)
データフレームの列を丸めて、整数型にする	df[col].round().astype(int)
データフレームを10の位で四捨五入して、整数型にする	df.round(-1).astype(int)
データフレームのリストカラムを十の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
データ列を十の位で丸めて、整数にする	ds.round(-1).astype(int)
データフレームのカラムを十の位で四捨五入して、整数型にする	df[col].round(-1).astype(int)
データフレームを百の位で丸めて整数にする	df.round(-2).astype(int)
データフレームのリストカラムを100の位で丸めて、整数にする	df[aList].round(-2).astype(int)
データ列を100の位で丸めて整数型にする	ds.round(-2).astype(int)
データフレームのカラムを百の位で丸めて整数型にする	df[col].round(-2).astype(int)
データフレームのリストカラムを1000の位で丸めて、整数にする	df[aList].round(-3).astype(int)
データ列を千の位で丸めて、整数にする	ds.round(-3).astype(int)
データフレームの列を1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
xでデータフレームの欠損値を埋める	df.fillna(x)
データフレームの欠損値をxにセットする	df.fillna(x)
データフレームのリスト列の未入力値をxで置換する	df[aList].fillna(x)
データフレームのリストカラムの欠損値をxに指定する	df[aList].fillna(x)
xでデータ列のNaNを埋める	ds.fillna(x)
データ列の欠損値をxに変更する	ds.fillna(x)
データフレームのカラムの欠損値をxで置き換える	df[col].fillna(x)
データフレームのカラムの欠損値をxに変更する	df[col].fillna(x)
データフレームの欠損値を平均で埋める	df.fillna(df.mean())
データフレームのNaNを平均値に設定する	df.fillna(df.mean())
データフレームのリストカラムのNaNを平均値で置換する	df[aList].fillna(df[aList].mean())
データフレームのリストカラムの欠損値を平均値に減らす	df[aList].fillna(df[aList].mean())
データ列の欠損値を平均値で補う	ds.fillna(ds.mean())
データ列の欠損値を平均値に指定する	ds.fillna(ds.mean())
データフレームのカラムの欠損値を平均値で置換する	df[col].fillna(df[col].mean())
データフレームのカラムの欠損値を平均値に指定する	df[col].fillna(df[col].mean())
データフレームの欠損値をモードで埋める	df.fillna(df.mode().iloc[0])
データフレームの未入力値を最頻値に指定する	df.fillna(df.mode().iloc[0])
データフレームのリスト列の欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
データ列の欠損値をモードに指定する	ds.fillna(ds.mode().iloc[0])
モードでデータフレームのカラムの欠損値を置換する	df[col].fillna(df[col].mode().iloc[0])
データフレームのカラムの欠損値をモードに設定する	df[col].fillna(df[col].mode().iloc[0])
データフレームの未入力値を中央値で置換する	df.fillna(df.median())
データフレームの欠損値を中央値に変更する	df.fillna(df.median())
データフレームのリストカラムの欠損値を第二四分位数で置換する	df[aList].fillna(df[aList].median())
データフレームのリストカラムのNaNを第二四分位数に設定する	df[aList].fillna(df[aList].median())
50パーセンタイルでデータ列の欠損値を埋める	ds.fillna(ds.median())
データ列のNaNをメディアンに設定する	ds.fillna(ds.median())
データフレームのカラムのNaNを中央値で埋める	df[col].fillna(df[col].median())
データフレームの列のNaNを中央値に設定する	df[col].fillna(df[col].median())
データフレームの未入力値を最大値で埋める	df.fillna(df.max())
データフレームのNaNを最大値にセットする	df.fillna(df.max())
データフレームのリストカラムのNaNを最大値で置換する	df[aList].fillna(df[aList].max())
データフレームのリストカラムの未入力値を最大値に設定する	df[aList].fillna(df[aList].max())
データ列の欠損値を最大値で補う	ds.fillna(ds.max())
カラムの欠損値を最大値に設定する	ds.fillna(ds.max())
データフレームの列の欠損値を最大値で補う	df[col].fillna(df[col].max())
データフレームのカラムの欠損値を最大値に減らす	df[col].fillna(df[col].max())
データフレームのNaNを最小値で埋める	df.fillna(df.min())
データフレームの欠損値を最小値にセットする	df.fillna(df.min())
データフレームのリストカラムの未入力値を最小値で置き換える	df[aList].fillna(df[aList].min())
データフレームのリストカラムの未入力値を最小値に減らす	df[aList].fillna(df[aList].min())
最小値でカラムの欠損値を置き換える	ds.fillna(ds.min())
カラムのNaNを最小値に指定する	ds.fillna(ds.min())
最小値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].min())
前の値でデータフレームの欠損値を埋める	df.fillna(method='ffill')
データフレームの欠損値を前の行の値に設定する	df.fillna(method='ffill')
データフレームのリスト列の欠損値を前の値で置換する	df[aList].fillna(method='ffill')
データフレームのリストカラムの未入力値を前の値に設定する	df[aList].fillna(method='ffill')
データ列の欠損値を前の行の値で置換する	ds.fillna(method='ffill')
カラムの欠損値を直前の値に設定する	ds.fillna(method='ffill')
直前の値でデータフレームのカラムの未入力値を埋める	df[col].fillna(method='ffill')
データフレームのカラムの未入力値を直前の値に設定する	df[col].fillna(method='ffill')
データフレームのNaNを直後の値で補う	df.fillna(method='bfill')
データフレームの欠損値を後の行の値に設定する	df.fillna(method='bfill')
直後の値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(method='bfill')
データフレームのリスト列の欠損値を後の値に設定する	df[aList].fillna(method='bfill')
カラムの欠損値を直後の値で補う	ds.fillna(method='bfill')
データ列のNaNを直後の値に指定する	ds.fillna(method='bfill')
直後の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='bfill')
データフレームのカラムの未入力値を直後の値に設定する	df[col].fillna(method='bfill')
データフレームのリストカラムの文字列を未入力値に変換する	df[aList].replace(s, np.nan)
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
データ列の文字列を欠損値にする	ds.replace(s, np.nan)
データ列の文字列をNaNに変換する	ds.replace(s, np.nan)
データフレームのカラムの文字列を欠損値にする	df[col].replace(s, np.nan)
データフレームの列の文字列をNaNにする	df[col].replace(s, np.nan)
データフレームのリストカラムの空文字を未入力値に変換しドロップする	df[aList].replace('', np.nan).dropna()
データ列の空文字をNaNに変換し、ドロップする	ds.replace('', np.nan).dropna()
データフレームの列の空文字をNaNに変換し、ドロップする	df[col].replace('', np.nan).dropna()
ValueMapでデータフレームの値をまとめて置換する	df.replace(ValueMap)
データフレームのリストカラムをValueMapでまとめて置換する	df[aList].replace(ValueMap)
ValueMapでカラムをまとめて置き換える	ds.replace(ValueMap)
データフレームの列をValueMapでまとめて置換する	df[col].replace(ValueMap)
データフレームを正規表現で一度にreplに置き換える	df.replace(pattern, repl, regex=True)
データフレームのリストカラムの値を正規表現でreplに置換する	df[aList].replace(pattern, repl, regex=True)
まとめてデータ列を正規表現patternでreplに置き換える	ds.replace(pattern, repl, regex=True)
データフレームの列の値を正規表現patternでreplに置き換える	df[col].replace(pattern, repl, regex=True)
データフレームの値が欠損値か判定する	df.isna()
データフレームのリストカラムの値が未入力値	df[aList].isna()
データ列の値が欠損値かどうか調べる	ds.isna()
データフレームのカラムの値がNaNか調べる	df[col].isna()
データフレームの中にいくつ欠損値が存在するか求める	df.isna().sum()
データフレームのリストカラムの中の欠損値の合計をカウントする	df[aList].isna().sum()
データフレームのリストカラムの中にいくつNaNがあるか数える	df[aList].isna().sum()
データ列の中の欠損値の合計を求める	ds.isna().sum()
カラムの中にいくつ欠損値が存在するかカウントする	ds.isna().sum()
データフレームのカラムの中のNaNの合計を求める	df[col].isna().sum()
データフレームのカラムの中にいくつNaNがあるか数える	df[col].isna().sum()
データフレームの中にがあるかどうか調べる	df.isin([value])
データフレームのリスト列の中に日付データがある	df[aList].isin([value])
データ列の中にがある	ds.isin([value])
データフレームの列の中に文字列が存在するか調べる	df[col].isin([value])
データフレームの中にある日付データの合計を数える	df.isin([value]).sum()
データフレームの中にいくつ文字列が含まれるか数える	df.isin([value]).sum()
データフレームのリスト列の中に含まれる文字列の合計をカウントする	df[aList].isin([value]).sum()
データフレームのリスト列の中にいくつが存在するか数える	df[aList].isin([value]).sum()
データ列の中に含まれる文字列の合計を数える	ds.isin([value]).sum()
データ列の中にいくつが含まれるか求める	ds.isin([value]).sum()
データフレームのカラムの中にある文字列の数を求める	df[col].isin([value]).sum()
データフレームのカラムの中にいくつ日付データが存在するかカウントする	df[col].isin([value]).sum()
データフレームの中に日付データと文字列がある	df.isin([value, value2])
データフレームのリストカラムの中に日付データと文字列が存在するかどうかテストする	df[aList].isin([value, value2])
データ列の中にと文字列がある	ds.isin([value, value2])
データフレームのカラムの中に日付データと文字列が存在するか調べる	df[col].isin([value, value2])
データフレームの中にあると文字列の合計を数える	df.isin([value, value2]).sum()
データフレームの中に文字列とがいくつあるか数える	df.isin([value, value2]).sum()
データフレームのリスト列の中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
データフレームのリスト列の中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
データ列の中に存在する文字列と文字列の合計をカウントする	ds.isin([value, value2]).sum()
カラムの中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
データフレームのカラムの中に存在する文字列と日付データの合計をカウントする	df[col].isin([value, value2]).sum()
データフレームのカラムの中に文字列と文字列がいくつ含まれるかカウントする	df[col].isin([value, value2]).sum()
2つのデータフレームを縦方向につなぐ	pd.concat([df, df2])
二つのデータフレームを縦方向にくっつける	pd.concat([df, df2], axis=0)
二つのデータフレームを横向きに連結する	pd.concat([df, df2], axis=1)
複数のデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
３つのデータフレームを横向きに一つにする	pd.concat([df, df2, df3], axis=1)
データフレームとデータフレームの列を横方向に一つにする	pd.concat([df, ds], axis=1)
データフレームとデータフレームの列を横方向につなぐ	pd.concat([df, ds], axis=1)
一番左側の列をデータフレームから消す	df[df.columns[1:]]
最後の列をデータフレームから消す	df[df.columns[:-1]]
データフレームからn番目のカラムを除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
二つのデータフレームを横向きに一つにする	pd.merge(df, df2)
列をキーにして2つのデータフレームを結合する	pd.merge(df, df2, on=column)
列'A'と列'B'をキーにして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
異なる列をキーとして2つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
列をキーにして二つのデータフレームを全結合する	pd.merge(df, df2, on=column, how='outer')
列をキーとして2つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
二つのデータフレームを列をキーにして右結合する	pd.merge(df, df2, on=column, how='right')
列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
列'A'と列'B'をキーとして２つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
二つのデータフレームを異なる列をキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
列'A'と列'B'をキーとして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
異なる列をキーとして二つの表データを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
二つのデータフレームを列'A'と列'B'をキーとして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
異なる列をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
列'A'と列'B'をキーとして２つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
異なるカラムをキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームの列をダミー変数にする	pd.get_dummies(df[column])
列をダミー変数に変換する	pd.get_dummies(iterable)
最初のカテゴリーを除いてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
NaNも加えてデータフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
表データの先頭n行	df.head(n)
表データの先頭n行	df.head(n)
データフレームの最後を調べる	df.tail()
データフレームの末尾n行を選択する	df.tail(n)
データフレームからランダムに一行、抽出する	df.sample()
n行をランダムにデータフレームから抽出する	df.sample(n)
データフレームから重複を認めてランダムにn行をサンプリングする	df.sample(n, replace=True)
範囲指定してデータフレームの行を抽出する	df[start:end]
データフレームのstart行目からend行目までを取り出す	df[start:end]
データフレームのn行より後ろ選ぶ	df[n:]
データフレームのn行より前抽出する	df[:n]
データフレームの指定した列を抽出する	df[column]
データフレームの指定した列を配列に変換する	df[column].values
配列としてデータフレームの指定された列を抽出する	df[column].values
列をリストにする	df[column].values.tolist()
データフレームの指定された列をリストとして取り出す	df[column].values.tolist()
データフレームからカラムを一つだけ選択する	df[[column]]
データフレームから列を二つのみ選択する	df[[column, column2]]
データフレームから指定された2列を取り出す	df[[column, column2]]
データフレームからカラムを三つだけ選択する	df[[column, column2, column3]]
データフレームの指定した３つの列を選択する	df[[column, column2, column3]]
データフレームから列を４つのみ選択する	df[[column, column2, column3, column4]]
データフレームから指定された４列を選択する	df[[column, column2, column3, column4]]
表データの指定した名前リストの列を抽出する	df[columns]
データフレームの行がnの行を抽出する	df.loc[n]
列の名前の一覧	df.columns
データフレームの列名を指定された列名一覧に置き換える	df.columns = columns
データフレームからカテゴリデータの列名一覧を使う	df.select_dtypes('object').columns
データフレームから指定されたデータ型の列名の一覧を使う	df.select_dtypes(型).columns
データフレームの行の一覧	df.index
データフレームのデータ型一覧を見る	df.dtypes
データフレームから型リストで指定されたデータ型のカラムだけ選ぶ	df.select_dtypes(include=typeList)
データフレームから型リストで指定されたデータ型のカラムを除外する	df.select_dtypes(exclude=typeList)
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
データフレームから数値データの列のみ抽出する	df.select_dtypes('number')
データフレームから型型を取り出す	df.select_dtypes(ty)
データフレームの各次元のサイズ	df.shape
データフレームの列とカラムの各列間の相関係数	df[[column, column2]].corr()
データフレームのリストカラムの相関行列	df[aList].corr()
ピアソンでデータフレームの相関行列	df.corr(method='pearson')
データフレームの列と列の相関行列ピアソン相関係数を用いてを求める	df[[column, column2]].corr(method='pearson')
ピアソン積率相関係数としてデータフレームのリスト列の相関行列を求める	df[aList].corr(method='pearson')
ケンドール順位相関係数でデータフレームの相関行列	df.corr(method='kendall')
ケンドール相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
データフレームのリスト列の相関行列ケンドールでを求める	df[aList].corr(method='kendall')
表データの相関行列スピアマン相関係数で	df.corr(method='spearman')
スピアマンとしてデータフレームの列と列の相関行列を算出する	df[[column, column2]].corr(method='spearman')
スピアマンを使ってデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
ヒートマップでデータフレームの相関行列を描画する	sns.heatmap(df.corr())
データフレームの列と列の相関行列をヒートマップとして描画する	sns.heatmap(df[[column, column2]].corr())
ヒートマップでデータフレームのリストで指定された列の相関行列を描画する	sns.heatmap(df[aList].corr())
表のリスト列のヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
データフレームの数値を丸める	df.round()
表データの列の名前を変更する	df.rename(columns={column: name})
データフレームの列名を列から文字列に変更する	df.rename(columns={column: name})
データフレームの列名を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
データフレームのインデックス名をまとめてnameからname2に付け直す	df.rename(index={name: name2})
データフレームのカラムをインデックスに設定する	df.set_index(column)
データフレームの列の値がxの行を取り出す	df[df[column] == x]
表データの行を条件で取り除くには	df[(df[column] == x) & (df[column2] == x2)]
データフレームの列がxかつ列がx2であるデータを取り出す	df[(df[column] == x) & (df[column2] == x2)]
データフレームのカラムがxより小さい行を抽出する	df[df[column] < x]
データフレームの列がx以下のデータを取り出す	df[df[column] <= x]
データフレームの列の値がxより大きいデータを抽出する	df[df[column] > x]
データフレームの列がx以上のデータを取り出す	df[df[column] >= x]
データフレームの列がxより多くx2より小さい行を取り出す	df[(x < df[column]) & (df[column] < x2)]
データフレームの列の値がx以上かつx2未満のデータを抽出する	df[(x <= df[column]) & (df[column] < x2)]
データフレームの列がリストに含まれる行を取り出す	df[df[column].isin(aList)]
データフレームのカラムの文字列で文字列が含まれる行を選ぶ	df[df[column].str.contains(s)]
データフレームの列が文字列が含まれない行を取り出す	df[not df[column].str.contains(s)]
データフレームの列の文字列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
データフレームの列が正規表現文字列にマッチしない行を選択する	df[not df[column].str.match(s)]
データフレームの列の文字列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
データフレームの列が文字列で始まらない行を取り出す	df[not df[column].str.startswith(s)]
データフレームの列が文字列で終わる行を取り出す	df[df[column].str.endswith(s)]
データフレームの列が文字列で終わらないデータを抽出する	df[not df[column].str.endswith(s)]
データフレームの欠損値がある箇所に色を付ける	df.style.highlight_null()
データフレームのn行目をインプレイスで消す	df.drop(n, axis=0, inplace=True)
データフレームのn行目をドロップして、入れ替える	df.drop(n, axis=0, inplace=True)
データフレームの列を破壊的にドロップする	df.drop(column, axis=1, inplace=True)
データフレームの列をドロップして更新する	df.drop(column, axis=1, inplace=True)
データフレームの列と列をドロップする	df.drop([column, column2], axis=1)
データフレームの列の名前一覧で指定された列を落とす	df.drop(columns, axis=1)
データフレームの中の欠損値を落とす	df.dropna()
データフレームの中の欠損値が存在する行を落とす	df.dropna()
データフレームが重複しているかどうか確認する	df.duplicated()
データフレームの重複する行数を数える	df.duplicated().sum()
データフレームの中で何行重複するか見る	df.duplicated().sum()
重複した行のみを抽出する	df[df.duplicated(keep=False)]
データフレームの重複していない行のみ	df[not df.duplicated(keep=False)]
データフレームの中で、カラムの重複を調べる	df.duplicated(subset=column)
データフレームの中で、列に重複があるか確認する	df.duplicated(subset=column)
表データの列に重複があれば、マスクする	df.duplicated(subset=column)
データフレームで、列と列の重複を調べる	df.duplicated(subset=[column, column2])
データフレームで、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
データフレームの中の列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
データフレームから重複する行を削除する	df.drop_duplicates()
重複をデータフレームから破壊的に消す	df.drop_duplicates(inplace=True)
データフレームから重複した行をドロップして更新する	df.drop_duplicates(inplace=True)
データフレームから破壊的に重複したデータをドロップする	df.drop_duplicates(inplace=True)
表データから重複を残さず、削除する	df.drop_duplicates(keep=False)
データフレームから重複する行を残さず、消す	df.drop_duplicates(keep=False)
データフレームの内で列と列の重複を落とす	df.drop_duplicates(subset=column)
データフレームの中の列と列に重複があれば、消す	df.drop_duplicates(subset=column)
列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
データフレームの中の列と列に重複があれば消す	df.drop_duplicates(subset=[column, column2])
dateStringをPandasの日付型に変換する	pd.to_datetime(dateString)
PandasでデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col])
Pandasで、データ列をPandasの日付型に変換する	pd.to_datetime(ds)
文字列を日付データにする	pd.to_datetime(s)
Pandasで、データフレームのcollを書式で日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
Pandasで、データ列を書式を用いて日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
フォーマットで文字列をPandasの日付型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
Pandasで、書式fmtでデータフレームのcollをdatetime64型に変換する	pd.to_datetime(df[col], format=fmt)
データ列をフォーマットfmtで日付データにする	pd.to_datetime(ds, format=fmt)
Pandasでフォーマットfmtとして文字列をタイムスタンプ型に変換する	pd.to_datetime(s, format=fmt)
数値時刻のデータフレームのcollからdatetime64型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
データフレームのcollのUNIX時間からPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
Pandasで、エポック秒のデータ列からdatetime64型にする	pd.to_datetime(ds, unit='s', utc=True)
Pandasで、データ列の数値時刻から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
Pandasでエポック秒の文字列からdatetime64型に変換する	pd.to_datetime(s, unit='s', utc=True)
Pandasで、文字列のUNIX秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームのカラムのタイムゾーンを日本に変更する	df[col].tz_convert('Asia/Tokyo')
データ列のタイムゾーンを日本に変更する	ds.tz_convert('Asia/Tokyo')
データフレームのカラムのタイムゾーンを文字列に変更する	df[col].tz_convert(s)
Pandasで日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
データフレームのカラムをPandasの日付型に変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
Pandasで、データ列をタイムスタンプ型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データ列は何年か調べる	ds.dt.year
データフレームのカラムは何月か調べる	df[col].dt.month
データ列は何月か調べる	ds.dt.month
データ列の日を求める	ds.dt.day
データ列が何日か確認する	ds.dt.day
データフレームのカラムの時を求める	df[col].dt.hour
データフレームのカラムは何時か調べる	df[col].dt.hour
データ列の時刻	ds.dt.hour
データ列が何分か確認する	ds.dt.minute
データフレームのカラムの曜日名	df[col].dt.weekday_name
データ列の曜日を使う	ds.dt.weekday_name
データフレームのカラムの曜日は何日目か確認する	df[col].dt.dayofweek
データフレームを表示するとき、表示可能な最大列数を減らす	pd.set_option('display.max_columns', n)
データフレームを表示するとき表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームを表示するとき、データフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
データフレームを表示するとき、表示可能な行数を変更する	pd.set_option('display.max_rows', n)
データフレームを表示するとき表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
小数点以下の表示精度を設定する	pd.set_option('precision', n)
小数点以下の表示精度をn桁に変更する	pd.set_option('precision', n)
データフレームを表示するとき、小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
折り返しをオフにする	pd.set_option('expand_frame_repr', False)
データフレームを表示するとき、カラムの最大幅をnに変更する	pd.set_option('max_colwidth', n)
ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
エクセルデータからデータフレームを読み込む	pd.read_excel(filename)
データフレームとしてエクセルファイルファイルを読み込む	pd.read_excel(filename)
をエクセルファイルファイルから読み込む	pd.read_excel(filename)
n番目のシートをエクセルデータファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
エクセルデータファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
エクセルファイルファイルから複数のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
nとn2のシートをエクセルファイルファイルから読む	pd.read_excel(filename, sheet_name=[n, n2])
エクセルファイルファイルからすべてのシートを読み込む	pd.read_excel(filename, sheet_name=None)
CSVからデータフレームを読み込む	pd.read_csv(filename, sep=',')
データフレームをCSVから読む	pd.read_csv(filename, sep=',')
データフレームとしてCSVファイルを読む	pd.read_csv(filename, sep=',')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
データフレームをタブ区切りのファイルから読み込む	pd.read_csv(filename, sep='\t')
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t')
＜オプション＞先頭のカラムをインデックスに増やす	index_col = 0
＜オプション＞n番目のカラムをインデックスにセットする	index_col = n
＜オプション＞どのカラムもインデックスにしない	index_col = None
＜オプション＞最初の行をカラムの名前に設定する	header = 0
＜オプション＞カラムの名前をnamesに変更する	header = names
＜オプション＞namesを列の名前に設定する	names = names
＜オプション＞読み込まないフッタをnに増やす	skipfooter = n
ヘッダを指定せずTSVファイルを読み込む	pd.read_csv(filename, header=None)
n番目の列をインデックスとしてカンマ区切りのファイルTSVファイルを読み込む	pd.read_csv(filename, index_col=n)
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスにして読み込む	pd.read_csv(filename, index_col=n)
TSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
TSVからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
TSV形式のファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームをJSONLファイルから読む	pd.read_json(filename, orient='records', lines=True)
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
JSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
データフレームをエクセルファイル形式としてJSONLファイルに保存する	df.to_excel(filename)
CSVファイルでJSONLファイルにデータフレームを書き込む	df.to_csv(filename)
JSONLファイルにタブ区切りを用いてデータフレームを保存する	df.to_csv(filename, sep='\t')
データフレームをJSONLファイルにTSVファイルとして書き込む	df.to_csv(filename, sep='\t')
カラムの名前を付けずにデータフレームをJSONLファイルに保存する	df.to_csv(filename, header=None)
データフレームをJSONLファイルに行を付けずに保存する	df.to_csv(filename, index=None)
データフレームをJSONLファイルにWindowsで文字化けしないように保存する	df.to_csv(filename, encoding='utf_8_sig')
データフレームをSJISでJSONLファイルに保存する	df.to_csv(filename, encoding='shift_jis')
保存するカンマ区切りのファイルの小数点以下の桁数を指定する	df.to_csv(filename, float_format='%.3f')
小数点以下3桁までJSONLファイルにデータフレームを保存する	df.to_csv(filename, float_format='%.3f')
データフレームを列の値によってグループ分けする	df.groupby(column)
表データを列の値によってまとめたグループを使う	df.groupby(column)
データフレームを'A'列の値によってグループ分けする	df.groupby('A')
データフレームを'A'列によってまとめたグループを使う	df.groupby('A')
'A'列と'B'列の値によってデータフレームをグループ化する	df.groupby(['A', 'B'])
データフレームを'A'列と'B'列でまとめた表	df.groupby(['A', 'B'])
データフレームを列名リストの値によって集約する	df.groupby(columns)
列名リストの値によってデータフレームをまとめた表	df.groupby(columns)
関数の値によってデータフレームをグループ化する	df.groupby(関数)
関数によってデータフレームをまとめたグループ	df.groupby(関数)
列の値によってデータフレームをグループ化し、要約統計量を計算する	df.groupby(column).describe()
表データを'A'列の値によってグループ化し要約統計量を求める	df.groupby('A').describe()
二つの列の値でデータフレームをグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
データフレームを複数の列の値によってグループ化し、要約統計量を計算する	df.groupby(columns).describe()
データフレームを関数によってグループ化し要約統計量を求める	df.groupby(関数).describe()
データフレームをNaNを含めて列でグループ化する	df.groupby(column, dropna=False)
データフレームを列の値によって集約し、列挙する	[(name, group) for name, group in df.groupby(column)]
データフレームを'A'列の値によって集約し、、列挙する	[(name, group) for name, group in df.groupby('A')]
データフレームを二つの列の値によって集約して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームを複数の列によってグループ分けして、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームを関数によってグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
データフレームを各列毎にグループ分けして、文字列というグループを使う	df.groupby(column).get_group(s)
データフレームを列の値でグループ化してグループの件数を知る	df.groupby(column).size()
データフレームを各列毎に集約して、文字列というグループの個数を計算する	df.groupby(column).size()[s]
データフレームの各グループ毎の合計	df.groupby(column).sum()
列ごとにデータフレームをグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
データフレームのグループごとの平均値を求める	df.groupby(column).mean()
列によってデータフレームをグループ化して各グループ毎の平均値を求める	df.groupby(column).mean()
データフレームのそれぞれのグループ毎の個数を求める	df.groupby(column).count()
カラムによってデータフレームをグループ分けし、、個数を計算する	df.groupby(column).count()
データフレームのそれぞれのグループの最大値	df.groupby(column).max()
データフレームを列ごとにグループ化して、グループごとの最大値を求める	df.groupby(column).max()
データフレームのそれぞれのグループ毎の最小値	df.groupby(column).min()
列でデータフレームをグループ化して、グループごとの最小値を算出する	df.groupby(column).min()
データフレームの各グループごとの分散を求める	df.groupby(column).var()
列によってデータフレームをグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
データフレームの各グループごとの標準偏差	df.groupby(column).std()
データフレームを列でグループ化して、それぞれのグループの標準偏差を求める	df.groupby(column).std()
データフレームを各列と列の組み合わせ毎にグループ化し、、合計を算出する	df.groupby([column, column2], as_index=False).sum()
データフレームを各列と列の組み合わせ毎に集約して、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
データフレームを各列と列の組み合わせ毎にグループ化し、、個数を求める	df.groupby([column, column2], as_index=False).count()
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を求める	df.groupby([column, column2], as_index=False).max()
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を計算する	df.groupby([column, column2], as_index=False).min()
データフレームを各列と列の組み合わせ毎に集約して、分散を求める	df.groupby([column, column2], as_index=False).var()
データフレームを各列と列の組み合わせ毎に集計して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
データフレームをグループ化し、列に対し合計を求める	df.groupby(column)[column2].sum()
データフレームを各列毎にグループ化して、列の合計を計算する	df.groupby(column)[column2].sum()
データフレームをグループ化し、それぞれの列に対し平均値を算出する	df.groupby(column)[column2].mean()
各列毎にデータフレームをグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
データフレームをグループ化し列に対し個数を求める	df.groupby(column)[column2].count()
データフレームを各列毎にグループ化して列の個数を求める	df.groupby(column)[column2].count()
データフレームをグループ化しそれぞれの列に対し最大値を計算する	df.groupby(column)[column2].max()
データフレームを各列毎に集約して、列の最大値を求める	df.groupby(column)[column2].max()
データフレームをグループ化しそれぞれの列に対し最小値を算出する	df.groupby(column)[column2].min()
データフレームを各列毎に集計して列の最小値を求める	df.groupby(column)[column2].min()
データフレームをグループ化しそれぞれの列に対し分散を計算する	df.groupby(column)[column2].var()
データフレームを各列毎にグループ化して、カラムの分散を求める	df.groupby(column)[column2].var()
データフレームをグループ化しそれぞれの列に対し標準偏差を計算する	df.groupby(column)[column2].std()
データフレームを各列毎にグループ分けして、列の標準偏差を求める	df.groupby(column)[column2].std()
データフレームを列でグループ分けして、列の要約統計量を計算する	df.groupby(column).describe()[column2]
データ列の各データ値の出現回数	ds.value_counts()
データ列の各データが何回出現するか調べる	ds.value_counts()
列の各データ値の出現回数	df[col].value_counts()
データフレームの列の各値が何回出現するか見る	df[col].value_counts()
列のユニークな要素を見る	ds.unique()
データフレームの列のユニークな要素を見る	df[col].unique()
列のユニークな要素数	ds.nunique()
データフレームの列のユニークな値の個数を調べる	df[col].nunique()
データフレームのカラムの文字列長を列として見る	df[col].str.len()
データフレームの列からユニークな要素を抽出しリスト化する	df[col].unique().tolist()
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
列をビン数nでビン分割する	pd.cut(ds, n)
n個にデータ列をビン分割する	pd.cut(ds, n)
データフレームの中の列を分割数nを用いてビン分割する	pd.cut(df[col], n)
データフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
リストをビン数nとしてビン分割する	pd.cut(aList, n)
リストを等間隔でn個に分割する	pd.cut(aList, n)
ビン数nで配列をビニングする	pd.cut(aArray, n)
等間隔で配列をn個にビン分割する	pd.cut(aArray, n)
ビン数nでデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データ列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームの中の列をビン数nでビニングし、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの中の列をn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
リストをビン数nを用いてビニングしてnamesのラベルをつける	pd.cut(aList, n, labels=names)
リストをn個に等間隔でビン分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
配列をビン数nでビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
等間隔で配列をn個にビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
列を等しい量になるようにビン数nでビン分割する	pd.qcut(ds, n)
等量でn個に列をビニングする	pd.qcut(ds, n)
ビン数nで等しい量になるようにデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
等量でn個にデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
リストを等しい量になるようにビン数nとしてビン分割する	pd.qcut(aList, n)
リストを等しい量になるようにn個にビン分割する	pd.qcut(aList, n)
配列を等量でビン数nとしてビニングする	pd.qcut(aArray, n)
等量で配列をn個に分割する	pd.qcut(aArray, n)
データ列を分割する	pd.cut(ds, aList)
リストを境界値としてデータフレームの中のカラムを分割する	pd.cut(df[col], aList)
リストを境界値としてリストをビン分割する	pd.cut(aList, aList)
配列をリストを境界値として分割する	pd.cut(aArray, aList)
列を中央値でビニングする	pd.qcut(ds, 2)
データフレームの中の列を中央値で分割する	pd.qcut(df[col], 2)
中央値でリストをビンニングする	pd.qcut(aList, 2)
配列を中央値で分割する	pd.qcut(aArray, 2)
四分位数ごとにデータ列をビンニングする	pd.qcut(ds, 4)
データフレームの中のカラムを四分位数ごとにビニングする	pd.qcut(df[col], 4)
四分位数ごとにリストを分割する	pd.qcut(aList, 4)
配列を四分位数でビン分割する	pd.qcut(aArray, 4)
列をキーにしてデータフレームをソートする	df.sort_values(by=column)
データフレームを'A'列を用いてソートする	df.sort_values(by='A')
'A'列と'B'列を用いてデータフレームを並べ直す	df.sort_values(by=['A', 'B'])
データフレームを複数の列によって並べる	df.sort_values(by=column)
データフレームを列で小さい順に並べ直す	df.sort_values(by=column, ascending=True)
データフレームを'A'列で昇順にソートする	df.sort_values(by='A', ascending=True)
二つの列によって昇順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True)
データフレームを昇順に列名リストでソートする	df.sort_values(by=column, ascending=True)
データフレームを列でによって大きい順に並べ直す	df.sort_values(by=column, ascending=False)
データフレームを'A'列でで降順にソートする	df.sort_values(by='A', ascending=False)
データフレームを'A'列と'B'列でによって降順に整列する	df.sort_values(by=['A', 'B'], ascending=False)
大きい順に列名リストによってでデータフレームを並べる	df.sort_values(by=column, ascending=False)
データフレームを列によってソートし、、更新する	df.sort_values(by=column, inplace=True)
データフレームを列によってによって破壊的に整列する	df.sort_values(by=column, inplace=True)
'A'列でデータフレームを並べて、更新する	df.sort_values(by='A', inplace=True)
データフレームを'A'列でによって破壊的に並べる	df.sort_values(by='A', inplace=True)
データフレームを'A'列と'B'列を用いてソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームを破壊的に2つの列によってを用いて並べる	df.sort_values(by=['A', 'B'], inplace=True)
列名リストによってデータフレームを並べて、更新する	df.sort_values(by=column, inplace=True)
複数の列でで破壊的にデータフレームを整列する	df.sort_values(by=column, inplace=True)
データフレームを列によって昇順に並べ直し、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを昇順に破壊的に列を用いて並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
表を'A'列で小さい順に並べて更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームを'A'列によって昇順に破壊的に並べる	df.sort_values(by='A', ascending=True, inplace=True)
表データを二つの列によって昇順に並べて、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームを２つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
複数の列でデータフレームを昇順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを複数の列を用いて昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを列を用いて降順に破壊的に整列する	df.sort_values(by=column, ascending=False, inplace=True)
データフレームを破壊的に大きい順に'A'列によってソートする	df.sort_values(by='A', ascending=False, inplace=True)
'A'列と'B'列によってデータフレームを大きい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームを複数の列によって大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームを列によって整列し、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データフレームを'A'列によって並べ直し、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
２つの列を用いてデータフレームをソートして、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
データフレームを列名リストによって並べ直し、NaNを先頭にする	df.sort_values(by=column, na_position='first')
＜オプション＞NaNを先頭にする	na_position = 'first'
データフレームを列によってソートして上の方n件を取り出す	df.sort_values(columns).head(n)
列によってデータフレームを並べて、下位n件を取り出す	df.sort_values(columns).tail(n)
データフレームを列でソートして、新しい行を加える	df.sort_values(columns).reset_index()
データフレームを列によって整列してインデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
インデックスによってデータフレームをソートする	df.sort_index()
昇順にインデックスによってデータフレームを整列する	df.sort_index(ascending=True)
データフレームをインデックスで降順でソートする	df.sort_index(ascending=False)
nで乱数シードを固定化する	random.seed(n)
最大値・最小値で整数乱数を得る	random.randint(最小値, 最大値)
疑似乱数を得る	random.random()
最大値・最小値の範囲として一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
正規分布で疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
平均と標準偏差から乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
イテラブルから1個ランダムに選ぶ	random.choice(iterable)
英文字からひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
イテラブルから複数個ランダムに選ぶ	random.choices(iterable, k=n)
イテラブルからn要素サンプリングする	random.sample(iterable, k=n)
イテラブルから重複なく、n要素ランダムに選ぶ	random.sample(iterable, k=n)
パターンを前もってコンパイルする	re.compile(pattern)
あらかじめ正規表現をASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
大文字・小文字を無視して事前に正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
事前に正規表現を複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
文字列を走査し、パターンにマッチするか調べる	re.search(pattern, s)
文字列中からパターンにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
文字列を走査し、正規表現にASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
文字列を走査し、正規表現にケースを無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
文字列中から正規表現に複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
文字列を走査し、正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
文字列の先頭で正規表現にマッチするか確認する	re.match(pattern, s)
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
文字列の先頭で正規表現にASCII限定としてマッチするか調べる	re.match(pattern, s, flags=re.ASCI)
パターンに文字列の先頭でケースを無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
文字列の先頭でパターンにケースを無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
複数行対応としてパターンに文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
文字列全体がパターンにマッチするか確認する	re.fullmatch(pattern, s)
文字列全体が正規表現にASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
大文字・小文字を無視して正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
文字列全体がパターンに大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
文字列全体を複数行対応としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
ASCII限定としてパターンで文字列を分割する	re.split(pattern, s, flags=re.ASCI)
文字列をケースを無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
文字列の中の正規表現によるすべてのマッチを使う	re.findall(pattern, s)
文字列の中のASCII限定としてパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
文字列の中でASCII限定として正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
文字列の中の大文字・小文字を無視して正規表現によるすべてのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
文字列の中の複数行対応として正規表現によるすべてのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
文字列の中で複数行対応としてパターンにマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
文字列中のパターンを新しい文字列で置き換える	re.sub(pattern, newsub, s)
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
空のセット	set()
シーケンスから集合を見る	set(iterable)
イテラブルをセットに変換する	set(iterable)
要素を集合に追加する	aSet.add(element)
イテラブルの要素を全てセットに追加する	aSet.update(iterable)
集合にシーケンスを追加する	aSet.update(iterable)
要素をセットから取り除く	aSet.remove(element)
集合からエラーなく値を取り除く	aSet.discard(element)
セットから全ての要素を消す	aSet.clear()
ふたつの集合のインターセクションだけにする	aSet.intersection_update(aSet2)
集合から別のセットの要素を全て取り除く	aSet.difference_update(aSet2)
集合から別の集合との共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
セットから任意の要素を除去する	aSet.pop()
ふたつの集合の∪	aSet.union(aSet2)
ふたつの集合の∩	aSet.intersection(aSet2)
二つの集合に共通する要素からなる集合を算出する	aSet.intersection(aSet2)
ふたつのリストの積集合を求める	list(set(aList) & set(aList2))
ふたつの集合の差	aSet.difference(aSet2)
ふたつの集合の対称差集合を使う	aSet.symmetric_difference(aSet2)
ふたつの集合のいずれか一方だけの集合を求める	aSet.symmetric_difference(aSet2)
要素が集合の要素に含まれる	element in aSet
要素はセットに含まれるか調べる	element in aSet
要素がセットのメンバーでないか調べる	element not in aSet
値が集合に含まれないか調べる	element not in aSet
ふたつの関係が⊆かどうか調べる	aSet.issubset(aSet2)
集合のすべての要素が別の集合に含まれるか確認する	aSet.issubset(aSet2)
真部分集合かどうか調べる	aSet < aSet2
二つの関係がスーパーセットかどうか確認する	aSet.issuperset(aSet2)
真スーパーセットか調べる	aSet > aSet2
ふたつの関係がスーパーセットもしくは等しいか調べる	aSet > aSet2
ふたつの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
二つの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
ふたつの集合が集合と互いに素か確認する	aSet.isdisjoint(aSet2)
ふたつの集合は互いに素か	aSet.isdisjoint(aSet2)
集合の濃度を求める	len(aSet)
集合が空	len(aSet) == 0
セットが空でないかどうか	len(aSet) != 0
タプルのイミュータブルな集合	frozenset(iterable)
リストをイミュータブルな集合に変換する	frozenset(iterable)
セットの更新不能版	frozenset(aSet)
集合を変更不能なセットに変換する	frozenset(aSet)
集合をイミュータブルにする	frozenset(aSet)
セットをタプルに変換する	tuple(aSet)
アルファベットを見る	string.ascii_letters
アルファベットの小文字を全部見る	string.ascii_lowercase
アルファベットの大文字を全て使う	string.ascii_uppercase
数字を使う	string.digits
十六進数字を全部見る	string.hexdigits
８進数字を使う	string.octdigits
句点文字を全部使う	string.punctuation
印字できる文字を全て使う	string.printable
空白文字を全て使う	string.whitespace
文字をユニコードに変換する	ord(ch)
文字列をASCIIコード列にする	[ord(ch) for ch in s]
文字列を大文字にする	s.upper()
文字列を特殊文字も含め小文字にする	s.casefold()
文字列を文字リストにする	list(s)
文字列を空白で分割して文字列リストに変換する	s.split()
空白によって文字列を区切る	s.split()
空白で文字列を分割して整数リストにする	map(int, s.split())
部分文字列で文字列を区切って、文字列リストに変換する	s.split(sub)
部分文字列で文字列を区切る	s.split(sub)
文字列をカンマで区切って、文字列リストに変換する	s.split(',')
カンマで文字列を分割して列挙する	s.split(',')
文字列をコロンで区切って、文字列リストに変換する	s.split(':')
コロンを使って文字列を分割し、、列挙する	s.split(':')
文字列をセパレータで分割して文字列リストに変換する	s.split(sep)
文字列をセパレータで分割し、、列挙する	s.split(sep)
改行で文字列を分割し、文字列リストに変換する	s.splitlines()
文字列を改行を用いて分割する	s.splitlines()
最後から文字列を空白で分割する	s.rsplit()
部分文字列で文字列を末尾から区切る	s.rsplit(sub)
文字列を部分文字列で二つに分ける	s.partition(sub)
最後の部分文字列によって文字列を二分する	s.rpartition(sub)
文字列を部分文字列で二分し、最初の文字列を見る	s.partition(sub)[0]
部分文字列で文字列を分けたときの前半の文字列を取り出す	s.partition(sub)[0]
文字列を部分文字列で二つに区切って、後半の文字列を求める	s.partition(sub)[-1]
文字列を部分文字列で分けたときの後半の文字列を取り出す	s.partition(sub)[-1]
文字列を最後の部分文字列で二つに区切って、前半の文字列を使う	s.rpartition(sub)[0]
文字列を最後の部分文字列で分割したときの最初の文字列を見る	s.rpartition(sub)[0]
文字列を最後の部分文字列で二分し後半の文字列を使う	s.rpartition(sub)[-1]
文字列を最後の部分文字列で分けた時の残りの文字列	s.rpartition(sub)[-1]
文字列を別の文字列で置き換える	s.replace(sub, newsub)
新しい文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub)
文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
文字列を回数を制限して置換する	s.replace(sub, newsub, n)
別の文字列に回数を制限して文字列中の部分文字列を置換する	s.replace(sub, newsub, n)
文字列から部分文字列を除去する	s.replace(sub, '')
文字列中のタブ文字を空白に置換する	s.expandtabs(tabsize=n)
文字列の両端から余分な空白と改行を取り除く	s.strip()
文字列の先頭の空白を除去する	s.lstrip()
文字列の左端から部分文字列を取り除く	s.lstrip(sub)
文字列の左端からタブを除く	s.lstrip('\t')
文字列の左側から空白を除く	s.lstrip(' ')
文字列の右側から空白を消す	s.rstrip()
文字列の末尾からタブを取り除く	s.rstrip('\t')
文字列の右端から改行を除く	s.rstrip('\n')
文字列の右側から空白を除去する	s.rstrip(' ')
数値をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
文字列を中央寄せにする	s.center(文字列幅)
大文字と小文字を入れ替える	s.swapcase()
文字列が文字列リストのいづれ	s in aStringList
文字列が文字列リストにあるか調べる	s in aStringList
文字列中に部分文字列がある	sub in s
文字列中に部分文字列が含まれないかどうか調べる	sub not in s
文字列中から部分文字列を見つける	s.find(sub)
部分文字列を文字列の先頭から探す	s.find(sub)
部分文字列が文字列の開始位置より後にある	s.find(sub, start) != -1
文字列の開始位置以降に部分文字列が含まれないかどうか調べる	s.find(sub, start) == -1
文字列の終了位置より前に部分文字列があるか調べる	s.find(sub, 0, end) != -1
部分文字列が文字列の終了位置以前に含まれないか調べる	s.find(sub, 0, end) == -1
文字列の開始位置と終了位置の間に部分文字列が含まれるか	s.find(sub, start, end) != -1
文字列の開始位置からと終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
文字列の開始位置番目と終了位置番目の間に部分文字列がない	s.find(sub, start, end) == -1
文字列の開始位置からと終了位置までの範囲に部分文字列が含まれないかどうか	s.find(sub, start, end) == -1
文字列の後ろから部分文字列を探す	s.rfind(sub)
文字列リストを結合し、ひとつの文字列にする	''.join(aStringList)
sepを区切りとして文字列リストを結合する	sep.join(aStringList)
文字列に変換してイテラブルを一つにする	''.join(map(str, iterable))
文字列リストを連結し、一つの文字列にする	''.join(map(str, iterable))
文字列リストにシーケンスを変換して、空白を用いて結合する	' '.join(map(str, iterable))
タプルを文字列リストに変換して、カンマによって連結する	','.join(map(str, iterable))
文字列にイテラブルを変換して、タブで連結する	'\t'.join(map(str, iterable))
イテラブルを文字列に変換して、'改行で連結する	'\n'.join(map(str, iterable))
列を文字列リストに変換して、部分文字列で一つにする	sub.join(map(str, iterable))
文字列中の部分文字列の出現	s.count(sub)
文字列の開始位置から終了位置までの範囲で部分文字列の登場をカウントする	s.count(sub, start, end)
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか数える	s.count(sub, start, end)
部分文字列が部分文字列で始まるか	s.startswith(sub)
文字列の先頭が部分文字列か調べる	s.startswith(sub)
文字列の開始位置以降が部分文字列で始まるか	s.startswith(sub, start)
部分文字列で文字列が終わるか調べる	s.endswith(sub)
文字列の接尾辞は部分文字列かどうか調べる	s.endswith(sub)
文字列の接頭辞から部分文字列を除く	s.removeprefix(sub)
文字列の末尾から部分文字列を取り除く	s.removesuffix(sub)
ファイル名がCSVファイルかどうか	filename.endswith('.csv')
ファイル名がテキストファイル	filename.endswith('.txt')
TSVファイルファイル名がか調べる	filename.endswith('.tsv')
文字列が全て大文字か	s.isupper()
文字列が全て小文字か	s.islower()
文字列が全て数字か	s.isdigit()
文字列がアルファベットか	s.isalpha()
文字列が全て英数字か	s.isalnum()
文字列が全てASCII文字か調べる	s.isascii()
文字列が全て空白文字か調べる	s.isspace()
文字列が全て数値	s.isnumeric()
大文字が文字列内に含まれるか調べる	any(c.isupper() for c in s)
文字列内にひとつでも小文字があるか調べる	any(c.islower() for c in s)
文字列内にひとつでも数字が含まれる	any(c.isdigit() for c in s)
文字列内にひとつでも英字が含まれるか調べる	any(c.isalpha() for c in s)
ひとつでも英数字が文字列内にある	any(c.isalnum() for c in s)
ひとつでも空白が文字列内に含まれる	any(c.isspace() for c in s)
アスキー文字が文字列内に含まれる	any(c.isascii() for c in s)
ひとつでも非大文字が文字列中に含まれるか	any(not c.isupper() for c in s)
文字列中にひとつでも非小文字が含まれるかどうか調べる	any(not c.islower() for c in s)
非数字が文字列中に含まれる	any(not c.isdigit() for c in s)
ひとつでも非アルファベットが文字列中に含まれる	any(not c.isalpha() for c in s)
文字列中にひとつでも非英数字がある	any(not c.isalnum() for c in s)
文字列中に非空白があるかどうか調べる	any(not c.isspace() for c in s)
文字列中に非アスキー文字がある	any(not c.isascii() for c in s)
文字列は全て識別子名	s.isidentifier()
文字列はPythonのキーワード	keyword.iskeyword(s)
文字列は全て印字できる	s.isprintable()
文字列がタイトルケースか調べる	s.istitle()
文字列をユニコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
文字列をエンコーディングを用いてバイト列に変換する	s.encode(encoding=encoding)
テンプレートをargsを引数としてフォーマットする	formatText.format(*args)
テンプレートをタプルでフォーマットする	formatText.format_map(aDict)
文字列の最初	s[0]
文字列の最後を使う	s[-1]
二つの文字列は等しいか調べる	s == s2
2つの文字列は等しくない	s != s2
辞書順で文字列は文字列より前かどうか確認する	s < s2
文字列が文字列より辞書順で後	s > s2
2つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
文字列が片仮名か確認する	('ァ' <= ch <= 'ン')
文字列が平仮名か	('ぁ' <= ch <= 'ん')
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
文字列内に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
文字列に日本語が含まれるかどうか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
文字列のカタカナをひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
平仮名をカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
代数計算モジュールを使う	import sympy
文字列を変数化して、変数にする	z = sympy.Symbol(s)
数値の変数に数式を代入する	e.subs(z, e2)
数式のパラメータを数値で置き換える	e.subs(z, e2)
数式の部分分数化する	sympy.apart(e)
方程式として数式の変数の解を算出する	sympy.solve(e, z)
変数が0に近づく場合の数値の極限値を求める	sympy.limit(e, z, 0)
パラメータが無限大に近づく時、数式の極限値を求める	sympy.limit(e, z, oo)
変数がマイナス無限大に近づくとき、数式の極限値を求める	sympy.limit(e, z, -oo)
数式の微分を算出する	sympy.diff(e)
パラメータについて数式の微分を求める	sympy.diff(e, z)
数値を変数について微分する	sympy.diff(e, z)
数式をパラメータについてn階微分する	sympy.diff(e, z, n)
数値の変数についてのn階微分を求める	sympy.diff(e, z, n)
数式の積分を計算する	sympy.integrate(e)
パラメータについて数式の積分を算出する	sympy.integrate(e, z)
数値の数値を算出する	float(e)
数式を浮動小数点数にする	float(e)
エンディアンを使う	sys.byteorder
エンコーディングを知る	sys.getdefaultencoding()
オブジェクトのバイト長を調べる	sys.getsizeof(obj)
再帰が何回までできるかを知る	sys.getrecursionlimit()
符号付き整数の最大値	sys.maxsize
プラットフォームのコードポイントの最大値を知る	sys.maxunicode
プラットホーム名を確認する	sys.platform
プラットホームがマックか調べる	sys.platform.startswith('darwin')
環境はLinux	sys.platform.startswith('linux')
プラットホームはWindowsか確認する	sys.platform.startswith('win32')
スクリプトのファイル名を知る	sys.argv[0]
第一引数で指定されたファイル名	sys.argv[1]
第2コマンド引数	sys.argv[1]
コマンドの第二引数	sys.argv[1]
第２引数のファイルの名前	sys.argv[1]
コマンドフラグの状態	sys.flags
をPythonパスに追加する	sys.path.append(dir)
ロードされたモジュールを列挙する	sys.modules
処理中の例外を情報を知る	sys.exc_info()
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
実行時に標準出力がパイプかどうか調べる	not sys.stdout.isatty()
標準入力を使用する	sys.stdin
オプションで、標準出力を出力先にする	file = sys.stdout
オプションで、標準エラーを用いる	file = sys.stderr
オプションで標準エラーを出力先にする	file = sys.stderr
標準入力から1文字だけ読み込む	sys.stdin.read(1)
標準入力から1行分読む	sys.stdin.readline()
1行だけ標準入力から改行を取り除いて読む	sys.stdin.readline().rstrip()
1行だけ標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
プログラムをここで終了する	sys.exit()
プログラムの実行を正しく終える	sys.exit(0)
プログラムの実行をエラーとして終了する	sys.exit(1)

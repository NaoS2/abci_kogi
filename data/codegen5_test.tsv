マッピングをカウンタにする	collections.Counter(aDict)
縦棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
グレー色としてヒストグラムを描画する	plt.hist(データ列, color='grey')
赤い点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
行列の形状	aArray.shape
ヒストグラムをオーキッド色を用いて描画する	plt.hist(データ列, color='orchid')
文字列を部分文字列によって分割する	s.partition(sub)
コーンフラワーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
折れ線グラフをダークマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
n2がnより大きくかつ、n3未満	n < n2 and n2 < n3
散布図をダーク・スラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
option: マルーン色を使用する	color = 'maroon'
散布図に赤い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
半透明の点線を用いてデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
代数計算ライブラリを使う	import sympy
重回帰モデルの残差を求める	目的変数 - model.predict(説明変数)
データフレームのカラムを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: オリーブに色を指定する	color = 'olive'
データフレームのカラムのトリム平均を使う	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
タプルの値を逆順にする	aTuple[::-1]
日付データが日曜日かどうか	aDate.weekday() == 6
option: 暗い赤に色を設定する	color = 'darkred'
数で実数を割る	x / y
文字列中の部分文字列の登場をカウントする	s.count(sub)
スラグレーにヒストグラムの色を変更する	plt.hist(データ列, color='slategray')
エラーを無視して文字列をバイト列にする	s.encode(errors='ignore')
プロットの色を色差別なくする	sns.set(pallete='colorblind')
リッジ回帰とロッソ回帰の組み合わせた分析を行う	model = sklearn.linear_model.ElasticNet()
縦棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
組の値を昇順にソートする	sorted(aTuple, reverse=False)
バイナリ書き込みできるようにファイルを開く]	open(filepath, mode='wb')
横棒グラフをダーク・スラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
乱数を生成する	random.random()
オリーブ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
option: サンディーブラウンにフォントの色を指定する	color = 'sandybrown'
行列積を求める	np.matmul(aArray, aArray2)
データ列を分割する	pd.cut(ds, aList)
文字列はリストに含まれないか調べる	element not in aList
二つの最小値	min(x, y)
データフレームをグループ化し個数を計算する	df.groupby('列A').count()
タプルから計数器を生成する	collections.Counter(aDict)
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
折れ線グラフの色を黄緑に設定する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームの中の列を四分位数でビン分割する	pd.qcut(df[col], 4)
ドジャーブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
データフレームをグループ化し各標準偏差を計算する	df.groupby('列A').std()
外れ値を除いたカラムの分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: フォントの色をマルーンに設定する	color = 'maroon'
option: カラムの名前をリストで減らす	names = 列名リスト
option: レベッカパープル色を用いる	color = 'rebeccapurple'
横棒グラフをライトイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightyellow')
option: グラフの色をダークグレーに変更する	color = 'darkgray'
ライム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
タイムスタンプデータをISO書式の文字列に変換する	aDatetime.isoformat()
日付時刻データとタイムスタンプデータの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
データシリーズを日付データに変換し、表データのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ペアリストpairsからカウンタを作成する	collections.Counter(dict(pairs))
データフレームの一部の列の欠損値をメディアンにセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
データフレームの選択した列の欠損値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
キューの先頭にイテラブルの各要素をつけ加える	deq.extendleft(iterable)
データフレームのあるカラムの中にある文字列と文字列の合計を数える	df['列A'].isin([value, value2]).sum()
option: フォントの色を青緑に指定する	color = 'turquoise'
日付データは日付データと同時か調べる	aDate == aDate2
行列の行ごとの標準偏差を求める	np.std(aArray, axis=1)
カラムはどの程度分散しているか見る	df['列A'].var()
ヒストグラムをブルーバイオレット色を使って描画する	plt.hist(データ列, color='blueviolet')
データフレームの全カラムを散布図で描く	sns.pairplot(df)
配列のユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
線グラフの色をダークオーキッドに指定する	plt.plot(データ列x, データ列y, color='darkorchid')
データシリーズを1000の位で四捨五入する	ds.round(-3)
データフレーム中の欠損値を除いてみる	df.dropna()
正則化付き重回帰モデルを用意する	model = sklearn.linear_model.ElasticNet()
ラベンダーブラッシュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
二つの文字列は等しくないか判定する	s != s2
何回まで再帰ができるか、	sys.getrecursionlimit()
正規分布かどうか仮説検定する	scipy.stats.shapiro(df['列A'])
y座標の最大・最小値を変更する	plt.ylim(最小値, 最大値)
現在の日付時刻を計算する	datetime.datetime.now()
ひとつでも非英字が文字列中に含まれる	any(not c.isalpha() for c in s)
データフレームの選択したカラムが正規分布からどれだけ、歪んでいるか確認する	df[['列A', '列B']].kurt()
指定したカラムのカテゴリで集計し各合計を求める	df.groupby('列A').sum()
マッピングに要素を項目名として加える	aDict[key] = element
縦棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
リストとリストの散布図を描き、、文字列というデータラベル用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
配列からn要素、サンプリングする	random.sample(iterable, k=n)
JSON文字列を読み込む	json.loads(jsonString)
散布図をオリベドラブ色として描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
文字列はタプルに含まれる	element in aTuple
散布図の▲マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: ディムグレー色を使用する	color = 'dimgray'
あるカラムの不偏分散	df['列A'].var(ddof=1)
変数を白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
ヒストグラムの色をミディアムバイオレットレッドにセットする	plt.hist(データ列, color='mediumvioletred')
現在が何曜日か知る	datetime.datetime.today().weekday()
option: イエローグリーンにフォントの色をセットする	color = 'yellowgreen'
option: ダークシアンを使う	color = 'darkcyan'
散布図をポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
青い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
散布図のポイントマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
折れ線グラフをブルーバイオレット色として描画する	plt.plot(データ列x, データ列y, color='blueviolet')
文字列中に部分文字列がいくつか含まれるかカウントする	s.count(sub)
折れ線グラフの星印の線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
イテラブルを二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
真部分集合かどうか調べる	aSet < aSet2
option: サドルブラウンを用いる	color = 'saddlebrown'
データシリーズのNaNを最頻値に設定する	ds.fillna(ds.mode().iloc[0])
縦棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
棒グラフをハニーデュー色を使って描画する	plt.bar(データ列x, データ列y, color='honeydew')
淡いピンク色にヒストグラムの色を設定する	plt.hist(データ列, color='lightpink')
データフレームの中のカラムを四分位数ごとにビニングする	pd.qcut(df[col], 4)
シルバー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
散布図の大バツ印の色を設定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
配列の幾何平均を使う	scipy.stats.gmean(配列)
濃い青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
列とイテラブルをzipする	itertools.zip_longest(iterable, iterable2)
option: ミディアムシアグリーンにグラフの色を設定する	color = 'mediumseagreen'
パレットをパステル調にする	sns.set(pallete='pastel')
モデルの残差を算出する	目的変数 - model.predict(説明変数)
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgrey')
データフレームをグループ化し分散を算出する	df.groupby('列A').var()
ダークスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
ロイヤルブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
文字列の中のASCII限定として正規表現によるすべてのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
正規分布で乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
レベッカパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
オブジェクトの属性の値を値に指定する	setattr(obj, プロパティ名, 値)
nが2で割り切れるか確認する	n % 2 == 0
option: タブを区切りで用いる	sep = '\t'
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgray')
シーケンスから重複なく、n要素選ぶ	random.sample(iterable, k=n)
英字の大文字を全部使う	string.ascii_uppercase
option: ▲マーカーを使用する	marker = '^'
折れ線グラフをシスル色を使って描画する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
散布図をチョコレート色として描画する	plt.scatter(データ列x, データ列y, color='chocolate')
option: 箱ひげ図を横方向にする	vert = False
列と列をペアリングする	itertools.zip_longest(iterable, iterable2)
ピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
カラムの歪度	scipy.stats.skew(df['列A'], bias=False)
データフレームを並べて上位を取り出す	df.sort_values('キーとなる列').head(n)
折れ線グラフの四角印を青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
部分文字列が部分文字列で開始する	s.startswith(sub)
ヒストグラムの描画して正規化する	plt.hist(データ列, density=True)
勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
predicateFuncを適用したときTrueになる列の部分を取り除く	itertools.dropwhile(predicateFunc, iterable)
棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
二進数文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
データフレームの選択したカラムのNaNを平均値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
多層パーセプトロンでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
データフレームの指定した列の第一四分位数	df['列A'].quantile(0.25)
日付時刻データからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
nがn2より小さいか	n < n2
option: グレーにフォントの色を変更する	color = 'grey'
データフレームの選択したカラムの不偏分散を計算する	df[['列A', '列B']].var(ddof=1)
浮動小数点数を浮動小数点数で割って、切り捨てる	x // y
データフレームの未入力値を中央値で埋める	df.fillna(df.median())
縦棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
あるカラムのカテゴリの分散	df.groupby('列A').var()
辞書上でキーが未定義かどうか	key not in aDict
新しい文字列で文字列中の正規表現を置き換える	re.sub(pattern, newsub, s)
option: スラグレーを使う	color = 'slategrey'
ヒストグラムをドジャーブルー色を使って描画する	plt.hist(データ列, color='dodgerblue')
再帰が何回までできるかを知る	sys.getrecursionlimit()
二つのデータ列の散布図として残差をプロットする	sns.residplot(x=データ列, y=データ列)
データフレームを散布図でプロット化し、、カテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
タプルの値の一覧を参照する	aDict.values()
ガウス過程回帰モデルを準備する	model = sklearn.gaussian_process.GaussianProcessRegressor()
ダークカーキにヒストグラムの色を指定する	plt.hist(データ列, color='darkkhaki')
散布図の印を丸にする	plt.scatter(データ列x, データ列y, marker='o')
ロージーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
配列が正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(配列)
小麦色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
既にロードしたモジュールのリスト	sys.modules
predicateFuncがTrueとなる列の要素	itertools.dropwhile(predicateFunc, iterable)
小数点数の双曲線正弦の逆数	math.asinh(x)
配列を等量でビン数nでビンニングする	pd.qcut(aArray, n)
TSVファイルから文字コードを指定してデータフレームをロードする	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
データフレームの選択した列のNaNを直後の値で置換する	df[['列A', '列B']].fillna(method='bfill')
リストの最後を取り除く	aList[:-1]
実数のタンジェントの逆数を算出する	math.atan(x)
小数点数とyの斜辺を求める	math.hypot(x, y)
デックから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
option: 色をブルーバイオレットにセットする	color = 'blueviolet'
マップから最後の項目をポップする	aDict.popitem()
縦棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
ストリーム全体を行ごとに分割してリストにする	[s.strip() for s in f.readlines()]
タプル内の要素が少なくとも一つ真か確認する	any(aTuple)
option: 深紅色を用いる	color = 'crimson'
option: グラフの色をナバホホワイトに変更する	color = 'navajowhite'
ミッドナイトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
２つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
第2コマンド引数	sys.argv[1]
ヒストグラムをベージュ色を用いて描画する	plt.hist(データ列, color='beige')
option: 印の線幅を変える	markeredgewidth = 2.5
option: オーキッドにグラフの色を設定する	color = 'orchid'
線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
ペルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
ファイルパスをバイナリモードでオープンして]fとする	f = open(filepath, mode='rb')
入力ストリームを全部、読み込む	f.read()
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
データフレームのn行までを抽出する	df[:n]
データシリーズのSkewness	ds.skew()
数式の積分を行う	sympy.integrate(e)
イテラブルからn要素、サンプリングする	random.sample(iterable, k=n)
option: バイナリ書き込みモードにセットする	mode = 'wb'
実数に浮動小数点数を加算する	x + y
タプルのキーを要素に設定する	aDict[key] = element
イテラブルのセットを使う	set(iterable)
実数が非数かどうか調べる	math.isnan(x)
折れ線グラフをオリーブ色を使って描画する	plt.plot(データ列x, データ列y, color='olive')
線グラフの色をベージュにセットする	plt.plot(データ列x, データ列y, color='beige')
横棒プロットをプロットして棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
predicateFuncが真とならないリストの要素	itertools.dropwhile(predicateFunc, iterable)
にバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: サンディーブラウンを用いる	color = 'sandybrown'
星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
横棒グラフをグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='green')
大文字と小文字を逆にする	s.swapcase()
列の各データ値の出現数	df[col].value_counts()
▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームのカーネル密度による分布図をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ヒストグラムの色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
あるカラムごとの標準偏差	df.groupby('列A').std()
2つのデータフレームを横方向に一つにする	pd.merge(df, df2)
黄色い線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
データフレームの選択したカラムのNaNを最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
ファイルパスを読み込みモードを用いてオープンする]	open(filepath, mode='r')
文字列をコロンで分割して文字列リストに変換する	s.split(':')
オブジェクトがリストに含まれる	element in aList
タイムスタンプデータがタイムスタンプデータより前かどうか調べる	aDatetime < aDatetime2
折れ線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
集合から要素を除く	aSet.remove(element)
nがn2以上かどうか確認する	n >= n2
リストと数列についての散布図に下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v')
散布図の四角印の色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ダークシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
０で全要素を初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
オブジェクトは論理値型かテストする	isinstance(obj, bool)
データフレームを表示するときn列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
オブジェクトが名前付きタプルか	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
折れ線グラフをミディアムターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームを関数の値によってまとめたグループ	df.groupby(関数)
データフレームの選択したカラムの中にいくつ文字列が存在するか調べる	df[['列A', '列B']].isin([value]).sum()
シルバー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
整数nの十六進リテラル	hex(n)
リストが空でない	len(aList) != 0
赤い▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
無限にnからカウントダウンする	itertools.count(start=n, step=-1)
数値を下線付きで表示する	print(f'\033[4m{value}\033[0m')
ヒストグラムをナバホホワイト色として描画する	plt.hist(データ列, color='navajowhite')
赤いダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
▽マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
0からnまでの整数列を作る	list(range(n+1))
option: パールバイオレットレッドにフォントの色を設定する	color = 'palevioletred'
列数の最大値をnにセットする	pd.set_option('display.max_columns', n)
データフレームの全列を散布図で見る	sns.pairplot(df)
多重集合をイテラブルから生成する	collections.Counter(iterable)
線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
横棒グラフをオリーブ色を用いて描画する	plt.barh(データ列x, データ列y, color='olive')
カウンタのキー一覧	aCounter.keys()
配列の偏差値を計算する	50 + 10 * scipy.stats.zscore(配列)
option: マーカーをクロスに変える	marker = 'x'
ヒストグラムの色をオレンジレッドにする	plt.hist(データ列, color='orangered')
データフレームを散布図で可視化して、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
散布図に丸マーカーを用いる	plt.scatter(データ列x, データ列y, marker='o')
ヒストグラムの色をライトゴールドロディイエローに指定する	plt.hist(データ列, color='lightgoldenrodyellow')
散布図をピンク色として描画する	plt.scatter(データ列x, データ列y, color='pink')
データフレームの未入力値を最大値に設定する	df.fillna(df.max())
線グラフをスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='skyblue')
散布図を黒い▽マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
2つのデータフレームをジョインする	pd.merge(df, df2)
option: ボックスチャートに平均を加える	showmeans = False
データフレームの一部の列が正規分布からどれだけ、歪んでいるか見る	df[['列A', '列B']].kurt()
日付時刻データが火曜日かどうか調べる	aDatetime.weekday() == 1
折れ線グラフの色をゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='goldenrod')
option: グラフの線のスタイルを実線に設定する	linestyle = 'solid'
タプルの先頭の要素を見る	aTuple[0]
データフレームの選択したカラムが正規分布からどれだけ尖っているか見る	df[['列A', '列B']].skew()
コーンズシルク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
濃い青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
データシリーズの分散を計算する	ds.var()
ある列の値によってデータフレームをグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
行列の最大値を求める	np.max(aArray)
シアン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
データフレームがどれだけ、分散しているか確認する	df.var()
箱髭図を２つ並べて描画する	plt.boxplot([データ列, データ列])
年月日と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
ヒストグラムの線の種類を一点鎖線に変更する	plt.hist(データ列, linestyle='dashbot')
プロットを正方形にする	plt.axis('equals')
両端キューの要素数を求める	len(deq)
タイムスタンプデータの曜日を整数で見る	aDatetime.weekday()
菱形印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムを使ってデータ列を描画する	plt.hist(データ列)
リストにリストを展開する	aList.extend(aList2)
空白を見る	' '
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
イテラブルとデータ列について散布図を描画して、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
オブジェクトの参照カウントを使う	sys.getrefcount(obj)
データフレームを表示するとき列数を増やす	pd.set_option('display.max_columns', n)
10行をデータフレームからランダムに選択する	df.sample(10)
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
ロバスト分類モデルを用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームの指定したカラムの未入力値をモードに指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
クラス分類をアンサンブル学習で行う	sklearn.ensemble.VotingClassifier()
文字コードに対応する文字を使う	chr(unicode)
散布図にバツマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
2つのベクトルを縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
ヒストグラムを一点鎖線として描く	plt.hist(データ列, linestyle='dashbot')
実数を小数点数で割った剰余	math.remainder(x, x2)
現在のモジュールを得る	sys.modules[__name__]
配列とイテラブルの散布図を描画し、、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
数値のパラメータを数値で置き換える	e.subs(z, e2)
赤色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
縦棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
タプルの先頭のn要素を捨てる	aTuple[n:]
データフレームの行数と列数を確認する	df.shape
データフレームから列を3つだけ選択する	df[['列A', '列B', '列C']]
スタックの最後から要素を取り出す	deq.pop()
両端キューが空か	len(deq) == 0
カラムの名前を付けずデータフレームを書き出す	df.to_csv('file.csv', header=None)
データフレームの一部のカラムの中にいくつ欠損値があるか数える	df[['列A', '列B']].isna().sum()
データフレーム中の未入力値をインプレイスで消す	df.dropna(inplace=True)
ライトグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
新しいリッジ回帰とロッソ回帰のハイブリットモデルを準備する	model = sklearn.linear_model.ElasticNet()
リストとリストについての散布図にrgbの星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
縦棒グラフをダークオリーブグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
カウンタを辞書にする	dict(aCounter)
イテラブルと列をつなぐ	itertools.chain(iterable, iterable2)
集合から別の集合を全て除く	aSet.difference_update(aSet2)
option: EUCを使用する	encoding = 'euc_jp'
パパイヤウィップ色でヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
折れ線グラフをコーンフラワーブルー色を使って描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
辞書に要素を項目名として加える	aDict[key] = element
option: やわらかい青にグラフの色を設定する	color = 'cornflowerblue'
ヒストグラムをブラック色を使って描画する	plt.hist(データ列, color='black')
追加モードでファイルパスを開き]、fとする	f = open(filepath, mode='a')
データフレームの一部の列は正規分布からどの程度、尖っているか確認する	df[['列A', '列B']].skew()
破線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
線グラフの色をハニーデューにする	plt.plot(データ列x, データ列y, color='honeydew')
オブジェクトは数値かどうか調べる	isinstance(obj, (int,float))
データフレームを各列毎にグループ化し、文字列というグループの個数を求める	df.groupby(column).size()[s]
データフレーム全体を行で昇順にソートする	df.sort_index(ascending=True)
プログラムの実行をエラーとして終了する	sys.exit(1)
option: リネンにグラフの色を設定する	color = 'linen'
未初期化の行列	np.empty(要素数, dtype=np.int)
二つの列によってデータフレームをグループ分けし、、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
折れ線グラフの四角印の色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
青い実線を用いてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
組の中の最大値	max(aTuple)
有理数をインポートする	import fractions
データ列からユニークな値を抽出しリスト化する	ds.unique().tolist()
ミディアムアクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategray')
整数nの16進文字列	hex(n)[2:]
ダークオーキッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
option: ミスティローズにグラフの色を変更する	color = 'mistyrose'
カウンタの上位をリストとして得る	aCounter.most_common(k)
ある列の文字列が部分文字列で始まらない行を選ぶ	df[~ df['列A'].str.startswith(部分文字列)]
データフレームの選択した列の不偏分散	df[['列A', '列B']].var(ddof=1)
option: 色をライトグレーに設定する	color = 'lightgray'
散布図をダークスラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
実行環境の名前を調べる	sys.platform
データフレームを確認する	df.head()
要素が集合のメンバー	element in aSet
折れ線グラフの色をディムグレーにセットする	plt.plot(データ列x, データ列y, color='dimgrey')
標準入力から1行分読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
データフレームを横方向に結合する	pd.concat([df, df2], axis=1)
データフレームの先頭を見る	df.head()
新しい文字列によって文字列を置き換える	s.replace(sub, newsub)
行列のユニークな値を要素とする配列	np.unique(aArray)
折れ線グラフを半透明の一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
xの小数点以下'4'桁までプリントする	print(':.4f'.format(x))
データフレームのあるカラムの欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
多次元データを主成分分析として淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
横棒プロットを描画し、、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
ヒストグラムを真紅色を使って描画する	plt.hist(データ列, color='crimson')
データ列と配列についての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
２つの変数を改行で区切って表示する	print(value, value2, sep='\n')
サポートベクターマシンを用いて回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
配列とリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
バリーウッド色としてヒストグラムを描画する	plt.hist(データ列, color='burlywood')
オプションで、出力先を標準出力に変更する	file = sys.stdout
リストと配列について散布図を描画してマーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
フローラルホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
パールゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
折れ線グラフを破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの中である列に重複があれば取り除く	df.drop_duplicates(subset='列A', inplace=True)
option: スノー色を使用する	color = 'snow'
菱形印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
リストと数列について散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
縦に複数のデータフレームを結合する	pd.concat([df, df2, df3], axis=1)
データフレームのカラムのピアソンの積立相関係数を使う	scipy.stats.pearsonr(df['列A'], df['列B'])
既存のファイルをBOM付きを使って追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
マップから項目名の値	aDict.get(key)
カテゴリでグループ化して、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
n個に配列をビニングする	pd.cut(aArray, n)
配列と配列の散布図に赤い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
自然数個からk個取り出したときの順列の総数を算出する	math.perm(n, k)
横棒グラフをリネン色を用いて描画する	plt.barh(データ列x, データ列y, color='linen')
全要素を０で初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
ビスク色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
現在を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ダークグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkgreen')
指定したカラムで集計し、最大値を求める	df.groupby('列A').max()
option: ペルー色を用いる	color = 'peru'
option: フォントの色をナバホホワイトに変更する	color = 'navajowhite'
正弦の逆数を求める	math.asin(x)
ヒストグラムの色をシアンに指定する	plt.hist(データ列, color='cyan')
グリッドの線スタイルを点線に変更する	plt.grid(linestyle='dotted')
option: 色をペールグリーンに指定する	color = 'palegreen'
ダークマゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
実数は有限か調べる	math.isfinite(x)
アイリスのデータセットをロードする	df = sns.load_dataset('iris')
マップの項目名とその値を列挙する	aDict.items()
n2がnより大きくかつ、n3より小さいかどうか調べる	n < n2 and n2 < n3
実数を3乗する	x ** 3
データシリーズの未入力値を平均に減らす	ds.fillna(ds.mean())
ベクトルのユニークな要素を求める	np.unique(aArray)
ベクトルの各要素の積	np.multiply(aArray, aArray2)
option: ダークカーキにグラフの色を設定する	color = 'darkkhaki'
列から配列を作る	np.array(iterable)
縦棒グラフをミントクリーム色として描画する	plt.bar(データ列x, データ列y, color='mintcream')
散布図に黒い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
option: 先頭の行をカラムの名前に指定する	header = 0
データフレームをある列によって降順に並べる	df.sort_values(by='列A', ascending=False)
option: グラフの色をミディアムシアグリーンに指定する	color = 'mediumseagreen'
折れ線グラフの色をライムグリーンにする	plt.plot(データ列x, データ列y, color='limegreen')
空のロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
日付データが日付データより先かどうか調べる	aDate < aDate2
環境がWindows	sys.platform.startswith('win32')
nがn2以下かどうか調べる	n <= n2
データ列の折れ線グラフを大バツ印で描画する	plt.plot(データ列x, データ列y, marker='X')
データシリーズのNaNを最大値で補う	ds.fillna(ds.max())
データフレームの選択したカラムの未入力値を後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
オプションで出力先を標準出力に設定する	file = sys.stdout
データフレームをに箱ひげ図で描画する	sns.boxplot(x='カテゴリ列', y='列', data=df)
線グラフをダークゴールデンロッド色を使って描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データシリーズの値を正規表現patternで一度にreplに置換する	ds.replace(pattern, repl, regex=True)
指定した列で集計し、それぞれの標準偏差を求める	df.groupby('列A').std()
ひとつでも大文字が文字列内に含まれる	any(c.isupper() for c in s)
option: リネン色を使用する	color = 'linen'
option: ダイアモンド印を描画する	marker = 'D'
文字列が全て小文字か	s.islower()
棒プロットの色を変更する	plt.bar(ラベル列, データ列, color=rgb)
データフレームのカラムの中にある文字列と文字列の合計を求める	df['列A'].isin([value, value2]).sum()
ネイビー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
散布図をダークスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
横に並べてヒストグラムをプロットする	plt.hist([データ列, データ列], color=['b', 'r'])
ダークオリーブグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
数式のパラメータについてのn階微分を求める	sympy.diff(e, z, n)
折れ線グラフのクロスマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
折れ線グラフを破線に変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: 紺碧色を使用する	color = 'azure'
文字列の先頭から空白を消す	s.lstrip()
option: スチールブルー色を使用する	color = 'steelblue'
データフレームの列を折れ線プロットとして作図する	plt.plot(df[column], df[column])
ドジャーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
シャルトリューズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
データフレームをある列をキーにして昇順に破壊的に並べ直す	df.sort_values(by='列A', ascending=True, inplace=True)
配列のケンドールの順位相関係数を見る	scipy.stats.kendalltau(配列, 配列2)
option: 貝殻にグラフの色を設定する	color = 'seashell'
配列のSkewnessを求める	scipy.stats.skew(配列, bias=False)
データフレームを行で昇順にソートする	df.sort_index(ascending=True)
option: 追加モードに変更する	mode = 'a'
ベクトルと同じ大きさの空配列を作る	np.empty_like(aArray)
表データを関数の値によってグループ分けして、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
折れ線グラフの色を紺に変更する	plt.plot(データ列x, データ列y, color='darkblue')
分子n分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
イテラブルから複数個ランダムに選ぶ	random.choices(iterable, k=n)
小数点以下3桁までCSVファイルにデータフレームを書き出す	df.to_csv('file.csv', float_format='%.3f')
列を文字列に変換して、空白によって連結する	' '.join(map(str, iterable))
n個の要素があるリストを作る	[element] * n
option: 色をマルーンに設定する	color = 'maroon'
文字列が数値か調べる	s.isnumeric()
データフレームから列を3つ選択する	df[['列A', '列B', '列C']]
箱ひげ図を２つ並べて描画する	plt.boxplot([データ列, データ列])
マッピングから項目名の値かもしくは要素を得る	aDict.get(key, element)
option: 色をレベッカパープルに変更する	color = 'rebeccapurple'
グリーンイエロー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
列を行列にする	np.array(iterable)
ヒストグラムの色をリネンに指定する	plt.hist(データ列, color='linen')
ミスティローズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
タプルの項目名とその項目を列挙する	aDict.items()
ヒストグラムの色をミディアムブルーにする	plt.hist(データ列, color='mediumblue')
データフレームを複数の列によって大きい順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
縦棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
文字列を文字コードでバイト列に変換する	s.encode(encoding=encoding)
横棒グラフをダークオリーブグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
リストと数列について散布図をプロットして、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
列によってデータフレームをグループ分けしてグループ名を列挙する	[name for name, _ in df.groupby('列A')]
指定した列リストのみ、データフレームの重複を調べる	df.duplicated(subset=['列A', '列B'])
データフレームの一部のカラムを千の位で丸める	df[['列A', '列B']].round(-3)
最初のカテゴリーを除き、表のある列をダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
双方向キューから最初の要素を取り出す	deq.remove(element)
フクシア色で線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームからカテゴリデータを抽出する	df.select_dtypes('object')
二つ並べて数列を箱ひげ図にする	plt.boxplot([データ列, データ列])
デフォルトのエンコーディング	sys.getdefaultencoding()
フクシア色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
文字列全体が正規表現にケースを無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
正規化されたヒストグラムをプロットする	plt.hist(データ列, density=True)
ヒストグラムをゴーストホワイト色として描画する	plt.hist(データ列, color='ghostwhite')
文字列リストをsepを区切りにして一つの文字列にする	sep.join(aStringList)
行列のスカラー倍	aArray * n
タプルの末尾の値	aTuple[-1]
ダークスラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
実数が負の数	x < 0
ひとつでもアスキー文字が文字列内に含まれるかどうか	any(c.isascii() for c in s)
回帰分析を確率的勾配降下としてする	model = sklearn.linear_model.SGDRegressor()
option: ブラックを使用する	color = 'black'
色付きの一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームを2つの列によってまとめたグループ	df.groupby(['列A', '列B'])
▼マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v')
データフレームの選択したカラムを1000の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
画面用にプロットを設定する	sns.set(context='notebook')
データフレームのあるカラムを千の位で四捨五入する	df['列A'].round(-3)
数列と配列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
シスル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフをスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='skyblue')
大量のデータが正規分布かどうか仮説検定する	scipy.stats.kstest(配列, 'norm')
option: グラフの色を暗い赤にセットする	color = 'darkred'
天井を計算する	math.ceil(x)
日付データが火曜日か	aDate.weekday() == 1
八進数の文字列をbytesizeバイトのバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
option: オリーブにグラフの色を設定する	color = 'olive'
パールバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
散布図の▽マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
option: グラフの色をライトスレイグレーにセットする	color = 'lightslategrey'
オブジェクトがあるクラスのインスタンス	isinstance(obj, クラス)
実数を小数点第一位で丸める	round(x, 1)
二つのデータフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='列A', right_on='列B')
データフレームをCSVファイルに小数点以下3桁まで出力する	df.to_csv('file.csv', float_format='%.3f')
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
散布図にrgbのバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
タイムスタンプデータにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
ミディアムブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
縦棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
処理中の例外を情報	sys.exc_info()
スタッキングを使って回帰分析を行う	sklearn.ensemble.StackingRegressor()
10を底とする対数を求める	math.log10(x)
折れ線グラフのダイアモンド印を赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データシリーズが何日か知る	ds.dt.day
データ列の変遷を赤い点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ある列のカテゴリごとの最大値を算出する	df.groupby('列A').max()
線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
option: エンコーディングを文字コードtextに指定する	encoding = text
ヒストグラムの色をミディアムオーキッドにセットする	plt.hist(データ列, color='mediumorchid')
整数nの八進表記	oct(n)
実線を用いてヒストグラムを描く	plt.hist(データ列, linestyle='solid')
棒グラフをレベッカパープル色を使って描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
クラス分類をバギングで行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
小数点以下3桁までCSVファイルにデータフレームを保存する	df.to_csv('file.csv', float_format='%.3f')
ホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
ある列の文字列が部分文字列で始まらない行を取り出す	df[~ df['列A'].str.startswith(部分文字列)]
2つの辞書をネストする	collections.ChainMap(aDict, aDict2)
小数点数のk進対数を計算する	math.log(x, k)
等間隔の行列を作る＼	np.arange(開始値, 終了値, 等差)
ある列の文字列が部分文字列で始まるデータを抽出する	df[df['列A'].str.startswith(部分文字列)]
外れ値に強い単クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
回数を制限して文字列を置換する	s.replace(sub, newsub, n)
option: フォントの色をローングリーンに設定する	color = 'lawngreen'
データフレームを指定した列の値で分類する	df.groupby('列A')
option: モカシンを用いる	color = 'moccasin'
nとn2が同じ値かどうか	n == n2
ヒストグラムの色をミディアムターコイズに変更する	plt.hist(データ列, color='mediumturquoise')
option: グラフの色をサドルブラウンに変更する	color = 'saddlebrown'
nを八進表記にする	oct(n)
option: ▲マーカーを描画する	marker = '^'
データ列を円プロットにする	plt.pie(データ列, startangle=90)
ヒストグラムをタン色を用いて描画する	plt.hist(データ列, color='tan')
データをL2ノルムを用いて正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
option: インディゴを用いる	color = 'indigo'
インディアンレッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
スーパーセットもしくは等しいか調べる	aSet > aSet2
範囲を指定して部分文字列を文字列の末尾から探す	s.find(sub, start, end)
データフレームを関数によってグループ化してグループ名を列挙する	[name for name, _ in df.groupby(関数)]
列を集合に変換する	set(iterable)
赤い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
文字コードtextを使ってファイルをオープンする]	open(filepath, encoding=text)
数列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
符号なし８ビット整数型の０で全要素を初期化した行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
半透明の点線として数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
色差別なくカラーテーマをグラフの描画で使う	sns.set(pallete='colorblind')
最大最小からベクトル	np.linspace(最小値, 最大値, 要素数)
option: シルバーを使う	color = 'silver'
セットから全ての要素を取り除く	aSet.clear()
nがn2よりも小さい	n < n2
ラベンダーブラッシュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームの中のカラムをリストを境界値としてビン分割する	pd.cut(df[col], aList)
オブジェクトの種類を使う	type(obj)
横棒グラフを描画し、、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
配列とリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
勾配ブースティング回帰木を用意する	model = sklearn.ensemble.GradientBoostingRegressor()
option: グラフの色をダークシアンに指定する	color = 'darkcyan'
option: ブランチドアーモンドを使う	color = 'blanchedalmond'
データフレームを1000の位で丸めて整数にする	df.round(-3).astype(int)
散布図をライトサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色を小麦色にする	plt.plot(データ列x, データ列y, color='wheat')
ヒストグラムの色をダークサーモンにする	plt.hist(データ列, color='darksalmon')
option: スキップするフッタをnに設定する	skipfooter = n
行列の要素数	aArray.size
リストの値を関数に適用した結果でソートする	sorted(aList, key=func)
option: グラフの色をトマトに指定する	color = 'tomato'
データシリーズがどれだけ、分散しているか見る	ds.var()
行列の差	aArray - aArray2
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: 改行コードを旧Macに指定する	newline = '\r'
データフレームの最後100行を選択する	df.tail(100)
データフレームをグループ化しあるカラムに対し最小値を求める	df.groupby('列A')['列B'].min()
線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
文字列を最後の部分文字列で二つに区切って残りの文字列を使う	s.rpartition(sub)[-1]
データフレームからカラムを一つ選択する	df[['列A']]
データフレームの選択した列のNaNを直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
折れ線グラフをディープスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
nの十六進数文字列	hex(n)[2:]
データフレームの指定した列の第三四分位数	df['列A'].quantile(0.75)
シルバー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
2進文字列を整数に変換する	int(s, 2)
ライトグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
文字コードを指定してTSVファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
新しいロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
タイムスタンプデータは何分か知る	aDatetime.minute
正方単位行列	np.identity(n)
データフレームから型の列のみ抽出する	df.select_dtypes(ty)
サーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
option: ライトサーモンにグラフの色をセットする	color = 'lightsalmon'
データシリーズを100の位で四捨五入する	ds.round(-2)
データフレームの列を散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
ピンク色でヒストグラムを描画する	plt.hist(データ列, color='pink')
要素が集合のメンバーでないかどうか調べる	element not in aSet
y軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
折れ線グラフの右三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
星印を使用し、散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
モデルの精度を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
タイムスタンプデータからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
データフレームを表示するとき、小数点以下の表示精度を指定する	pd.set_option('precision', n)
ローングリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
横棒グラフをホットピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='hotpink')
分類モデルのアキュレシーを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
折れ線グラフに三角マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
青い大バツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
横棒グラフをスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='skyblue')
未入力値がある行を取り除き、みる	df.dropna()
データフレームのカラムのモード	mode, count = scipy.stats.mode(df['列A'])
折れ線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
文字列の開始位置より後に部分文字列があるかどうか	s.find(sub, start) != -1
範囲を指定して乱数を計算する	random.randint(最小値, 最大値)
option: スレートブルーにグラフの色を設定する	color = 'slateblue'
改行せず2つの実行結果をプリントする	print(value, value2, end='')
配列の値が正規分布にしたがって発生する確率を計算する	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
横棒グラフをフローラルホワイト色として描画する	plt.barh(データ列x, データ列y, color='floralwhite')
データシリーズの曜日は何日目か調べる	ds.dt.dayofweek
データフレームのある列の欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
データ列を用いる	import pandas as pd
散布図を右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>')
マッピングの値数を得る	len(aDict)
option: ミディアムオーキッドにグラフの色を設定する	color = 'mediumorchid'
型が名前付きタプル	issubclass(C, tuple)
データフレームを未入力値を含めてある列の値で集計する	df.groupby('列A', dropna=False)
アリスブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
option: カラムの名前を自動的な連番に増やす	header = None
ドジャーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
文字列でフォーマットしてタイムスタンプデータを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
文字列の開始位置からと終了位置までの間に部分文字列がないかどうか調べる	s.find(sub, start, end) == -1
option: フォントの色をターコイズに指定する	color = 'turquoise'
列からサンプリングする	random.sample(iterable)
文字列からformatのパターンでタイムスタンプにする	datetime.datetime.strptime(日付の書かれた文字列, format)
空のヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
ライトゴールドロディイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
折れ線グラフの色をライムグリーンに変更する	plt.plot(データ列x, データ列y, color='limegreen')
浮動小数点数の小数点以下を丸める	round(x)
数式を部分分数として展開する	sympy.apart(e)
データフレームを２つの列によってグループ化してグループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
リストとデータ列についての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
小数点数のハイパボリック・サインの逆数	math.asinh(x)
文字列を大文字・小文字を無視して正規表現で区切る	re.split(pattern, s, flags=re.IGNORECASE)
等量でビン数nでリストを分割する	pd.qcut(aList, n)
option: ダークグレーを使う	color = 'darkgray'
データを最大最小で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データ列とリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
ラインの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
タプルから最大長nの双方向キューを新規生成する	collections.deque(iterable, maxlen=n)
時間を用いる	import time
棒グラフをサドルブラウン色として描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
折れ線グラフの左三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
配列の折れ線プロットを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
散布図をダークサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
折れ線グラフの色をミディアムスレートブルーに変更する	plt.plot(データ列x, データ列y, color='mediumslateblue')
赤いクロス印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
option: n番目の列をインデックスに変更する	index_col = n
折れ線グラフの色をダークターコイズにセットする	plt.plot(データ列x, データ列y, color='darkturquoise')
余弦を算出する	math.cos(x)
データフレームの一部の列の中にいくつ欠損値があるか調べる	df[['列A', '列B']].isna().sum()
第一引数で指定したファイル名	sys.argv[1]
タプルのキーを列挙する	list(aDict)
レベッカパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
プロットの色を明るくする	sns.set(pallete='bright')
文字列の後ろから空白を除く	s.rstrip()
アイボリー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
データシリーズの尖度を算出する	ds.skew()
カウンタの積集合演算する	aCounter & aCounter2
相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
データフレームの列を折れ線グラフで作図する	plt.plot(df[column], df[column])
実数の絶対値を計算する	math.fabs(x)
折れ線グラフの印を菱形にする	plt.plot(データ列x, データ列y, marker='D')
文字列リストにリストを変換してカンマによってつなげる	','.join(map(str, iterable))
データフレームのSkewnessを求める	df.skew()
線グラフの色をモカシンにする	plt.plot(データ列x, データ列y, color='moccasin')
棒グラフをダークマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
プロットを論文用に変更する	sns.set(context='paper')
部分文字列で文字列を分割した時の後半の文字列	s.partition(sub)[-1]
空白で文字列を分割する	s.split()
ヒストグラムの色をグリーンイエローにする	plt.hist(データ列, color='greenyellow')
２つの浮動小数点数が十分に近いか確認する	math.isclose(x, x2)
データフレームをある列によって昇順に並べ直す	df.sort_values(by='列A', ascending=True)
ブラック色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
データシリーズを10の位で四捨五入する	ds.round(-1)
option: ナバホホワイト色を使用する	color = 'navajowhite'
青い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
横棒グラフをレベッカパープル色を使って描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
option: 色をフォレストグリーンにセットする	color = 'forestgreen'
ふたつの関係が真スーパーセットか調べる	aSet > aSet2
二変数の最小の値	min(x, y)
option: ハニーデューにグラフの色を変更する	color = 'honeydew'
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数	s.count(sub, start, end)
データフレームを関数でグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
option: マゼンタにグラフの色を設定する	color = 'magenta'
option: ローングリーン色を使用する	color = 'lawngreen'
タプルの要素数	len(aTuple)
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
nが1、もしくは2もしくは3に等しいかどうか調べる	n == 1 or n == 2 or n == 3
回帰分析をロバスト推定として行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データフレームのあるカラムの値がxに等しい行を抽出する	df[df['列A'] == x]
文字列の開始位置と終了位置の間に部分文字列が含まれるか	s.find(sub, start, end) != -1
スピアマンの相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
散布図のマーカーを▽にする	plt.scatter(データ列x, データ列y, marker='v')
データフレームから数値データのみ抽出する	df.select_dtypes('number')
部分文字列が文字列の開始位置番目からと終了位置番目までの間にないか調べる	s.find(sub, start, end) == -1
データ列の推移を実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid')
グラフの目的をポスターにセットする	sns.set(context='poster')
散布図に黒い上三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
アクアマリン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
リストと配列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
ある列の値がxに等しくかつ別の列の値がyに等しい行を選択する	df[(df['列A'] == x) & (df['列B'] == y)]
散布図の上三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
折れ線プロットにラベルをつける	plt.plot(データ列x, データ列y, label='ラベル')
最頻値でデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
ミディアムパープル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
赤い三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
タプルの末尾のn要素を除く	aTuple[:-n]
日付時刻データにn分分、加える	aDatetime + datetime.timedelta(minutes=n)
回帰分析をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
プラム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
散布図をパールゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
イテラブルの組み合せを得る	itertools.combinations(iterable, n)
赤い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
オレンジレッドにヒストグラムの色を指定する	plt.hist(データ列, color='orangered')
アイボリーにヒストグラムの色を設定する	plt.hist(データ列, color='ivory')
文字列が全て数字かどうか調べる	s.isdigit()
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
ミディアムスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
スクリプトファイルと同じフォルダのファイルパスのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
文字列をカンマで分割して、文字列リストにする	s.split(',')
両端キューの中に値が含まれてるか調べる	element in deq
日付データが金曜日	aDate.weekday() == 4
要素をセットに追加する	aSet.add(element)
RMSEを計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
実数で浮動小数点数を割って、切り捨てる	x // y
折れ線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
句読点文字を使う	string.punctuation
option: ゴールデンロッド色を用いる	color = 'goldenrod'
２つの変数を改行で区切ってプリントする	print(value, value2, sep='\n')
配列間のスピアマンの相関係数を計算する	scipy.stats.spearmanr(配列, 配列2)
option: グラフの色をライムグリーンに指定する	color = 'limegreen'
折れ線グラフの色をオールドレースにセットする	plt.plot(データ列x, データ列y, color='oldlace')
タプルのn番目のを使う	aTuple[n]
折れ線グラフの下三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
半透明の破線を用いて折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
現在の年数	datetime.datetime.today().year
散布図をホワイト色として描画する	plt.scatter(データ列x, データ列y, color='white')
パラメータがマイナス無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, -oo)
クラス分類をアンサンブル学習を使って行う	sklearn.ensemble.VotingClassifier()
サポートベクター回帰モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
横棒グラフを青緑色を用いて描画する	plt.barh(データ列x, データ列y, color='teal')
option: マルーンを使う	color = 'maroon'
線グラフの色を淡いピンク色にセットする	plt.plot(データ列x, データ列y, color='lightpink')
ヒストグラムの色をオリベドラブに指定する	plt.hist(データ列, color='olivedrab')
カーキ色でヒストグラムを描画する	plt.hist(データ列, color='khaki')
折れ線グラフのポイントマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
カラム間の相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
カラーバーを描く	plt.colorbar()
option: 色をプラムに指定する	color = 'plum'
nの各桁の和を求める	sum(map(int, str(n)))
散布図の大バツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
棒グラフをオールドレース色を用いて描画する	plt.bar(データ列x, データ列y, color='oldlace')
散布図を赤い大バツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
0から始まる無限数列を得る	itertools.count()
散布図でデータフレームのカラムを可視化する	sns.scatterplot(data=df, x='列名', y='列名')
辞書順で２つの文字列を比較する	s < s2
箱ひげ図でデータ列を図示する	plt.boxplot(データ列)
データフレームのn行目を除き、みる	df.drop(n, axis=0)
文字列の中の複数行対応として正規表現によるすべてのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
数列とイテラブルについての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
双方向キューから最初のデータを取り除く	deq.remove(element)
データフレーム全体をインデックスを用いて降順でソートする	df.sort_index(ascending=False)
option: 最大深さを設定する	maxdepth = n
パープル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
ダークオレンジ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
青い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
文字列を新しい文字列で置換する	s.replace(sub, newsub)
値を太字にする	f'\033[1m{value}\033[0m'
データフレームの選択した列の標準偏差	df[['列A', '列B']].std()
画面用にグラフを設定する	sns.set(context='notebook')
線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgrey')
折れ線グラフの色を青にする	plt.plot(データ列x, データ列y, color='blue')
文字列の終了位置以前に部分文字列が含まれるかどうか調べる	s.find(sub, 0, end) != -1
散布図に▲マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
文字列をASCIIコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
option: フォレストグリーン色を使用する	color = 'forestgreen'
データフレームの中にいくつ欠損値があるかカウントする	df.isna().sum()
数を小数点以下第一位で丸める	round(x, 1)
データフレームの選択したカラムの基本統計量を求める	df[['列A', '列B']].describe()
線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームの指定したカラムを四捨五入して、整数型にする	df['列A'].round().astype(int)
バイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
option: 濃いシアンを使う	color = 'darkcyan'
データシリーズの平均など	ds.describe()
文字列を部分文字列を使って区切る	s.split(sub)
nが-9以上9以下	-9 <= n <= 9
ライトスレイグレー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
オーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
線形モデルの回帰変数を使う	model.coef_
カテゴリ列でグループ化して、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
折れ線グラフのポイントマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
predicateFuncが真となるリストの要素を取り出す	itertools.takewhile(predicateFunc, iterable)
折れ線グラフの右三角印を青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
整数個のものからk個取り出した時の並べ方を求める	math.perm(n, k)
集合を変更不能に変換する	frozenset(aSet)
配列と数列の散布図を描画して下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図に青い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
リストの先頭の値	aList[0]
ヒストグラムをミントクリーム色として描画する	plt.hist(データ列, color='mintcream')
ヒートマップでデータフレームの相関行列を可視化する	sns.heatmap(df.corr())
二つの列でデータフレームをグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
データシリーズの中に含まれる文字列と文字列の合計をカウントする	ds.isin([value, value2]).sum()
シーケンスの各要素に対して、predicateFuncがtrueであればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
散布図にrgbのクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
閾値として二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
辞書をネスト化する	collections.ChainMap(aDict)
ヒストグラムの色をタンに変更する	plt.hist(データ列, color='tan')
データシリーズのどの値が最も出現するか調べる	ds.mode()
日付データにn日分加算する	aDate + datetime.timedelta(days=n)
データフレームの一部のカラムの欠損値をxにする	df[['列A', '列B']].fillna(x)
データフレームのあるカラムのタイムゾーンを東京に指定する	df['列A'].tz_convert('Asia/Tokyo')
ゼロ埋めされた三２ビット整数型の行列を作る	np.zeros(要素数, dtype=np.int16)
折れ線グラフをホワイト色で描画する	plt.plot(データ列x, データ列y, color='white')
エラーなく集合から要素を取り除く	aSet.discard(element)
折れ線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
散布図のダイアモンド印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
散布図にrgbの丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
四分位点を用いて標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ヒストグラムを紺碧色を用いて描画する	plt.hist(データ列, color='azure')
ラインの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
自然数の並べ方の総数	math.perm(n)
辞書から項目名で指定されたエントリを取り出す	aDict.pop(key)
文字列を最後の部分文字列で分けた時の残りの文字列	s.rpartition(sub)[-1]
ベクトル演算を行う	import numpy as np
棒グラフをダークバイオレット色を用いて描画する	plt.bar(データ列x, データ列y, color='darkviolet')
プロットの補足の位置を指定する	plt.legend(loc=(x, y))
小文字を大文字にする	s.upper()
データフレームからカテゴリデータの列名の一覧を見る	df.select_dtypes('object').columns
ヒストグラムの色をコーラルに変更する	plt.hist(データ列, color='coral')
行列の列ごとの標準偏差を求める	np.std(aArray, axis=0)
文字列中の部分文字列の出現	s.count(sub)
nが1、もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
空白文字を求める	string.whitespace
データフレームのあるカラムの中に文字列と文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
データフレームの中央値を求める	df.median()
線グラフの色をコーンフラワーブルーに変更する	plt.plot(データ列x, データ列y, color='cornflowerblue')
等間隔でリストをn個にビン分割する	pd.cut(aList, n)
散布図の三角マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームから指定したデータ型の列名のリスト	df.select_dtypes(型).columns
データフレームのある列を千の位で丸めて、整数にする	df['列A'].round(-3).astype(int)
横棒グラフをピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='pink')
整数nを符号なしでバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big')
ミディアムアクアマリン色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
空のリッジ回帰モデルを準備する	model = sklearn.linear_model.Ridge(alpha=正則化項)
リストのn番目以降の要素を取り出す	aList[n:]
折れ線グラフの三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: マゼンタ色を用いる	color = 'magenta'
縦方向にデータフレームを連結する	pd.concat([df, df2], axis=0)
列名を指定してデータフレームを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
黒い▼印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
ライトゴールドロディイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
文字列の末尾を使う	s[-1]
ヒストグラムの色を貝殻に変更する	plt.hist(データ列, color='seashell')
プロットのカラーパレットを全般的に暗くする	sns.set(pallete='dark')
指定した列リストだけ、データフレームの重複を調べる	df.duplicated(subset=['列A', '列B'])
ヒストグラムの色をゲインズボロに変更する	plt.hist(データ列, color='gainsboro')
データフレームのシェイプを見る	df.shape
データフレームのヒストグラム付き散布図をプロットする	sns.jointplot(x='列名', y='列名', data=df)
折れ線グラフの△印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
複数行対応として文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データフレームから型リストのデータ型の列だけ除外する	df.select_dtypes(exclude=typeList)
動作環境はマックか調べる	sys.platform.startswith('darwin')
データフレームのカラムをに箱ひげ図を使ってプロット化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
赤い星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
黒いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフをピンク色として描画する	plt.plot(データ列x, データ列y, color='pink')
ダークオーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
データフレームの指定したカラムの不偏標準偏差を求める	df['列A'].std()
nとn2の論理和を求める	n | n2
データフレームの一部の列の歪度を求める	df[['列A', '列B']].kurt()
カラムの調和平均を求める	scipy.stats.hmean(df['列A'])
データフレームのカラムの調和平均を算出する	scipy.stats.hmean(df['列A'])
データフレームを整列して、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
縦棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
ヒストグラムの色をブラウンに設定する	plt.hist(データ列, color='brown')
option: ▽マーカーを描画する	marker = 'v'
ヒストグラムの色をペールグリーンに指定する	plt.hist(データ列, color='palegreen')
ターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
二つの整数の最大公約数	math.gcd(n, n2)
文字列を部分文字列を用いて区切る	s.split(sub)
データフレームをグループ化し、あるカラムに対し個数を求める	df.groupby('列A')['列B'].count()
折れ線グラフの丸印の線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
実行結果を下線付き化する	f'\033[4m{value}\033[0m'
黒いダイアモンドマーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
改行で文字列を分割し、文字列リストに変換する	s.splitlines()
ゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
指定した列の値が欠損値か	df['列A'].isna()
マップをコピーする	aDict.copy()
データフレームから型の列を選択する	df.select_dtypes(ty)
データフレームから数値データを選択する	df.select_dtypes('number')
最大最小でデータを揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
rgbの右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
配列の平均の標準誤差を求める	scipy.stats.sem(配列)
散布図をチョコレート色を使って描画する	plt.scatter(データ列x, データ列y, color='chocolate')
折れ線グラフの▲マーカーの色を変える	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームを2つの列でまとめたグループを使う	df.groupby(['列A', '列B'])
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgray')
ミディアムブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
option: 白に色を変更する	color = 'white'
イテラブルと数列についての散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図に左三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='<')
浮動小数点数を二乗する	x ** 2
ブラック色でヒストグラムを描画する	plt.hist(データ列, color='black')
日付時刻データが土曜日か	aDatetime.weekday() == 5
辞書の値数	len(aDict)
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightgreen')
名前付きタプルを辞書にする	aNamedTupleObject._asdict()
option: 印を左三角に設定する	marker = '<'
データフレームを散布図で描画してカテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
データフレームの指定したカラムの歪度を計算する	df['列A'].kurt()
横棒グラフをダークカーキ色として描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
配列をn個にビン分割する	pd.cut(aArray, n)
シャルトリューズ色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
option: ターコイズ色を用いる	color = 'turquoise'
ピアソンの相関係数	scipy.stats.pearsonr(数列, 数列2)
option: ライトシアン色を用いる	color = 'lightcyan'
データフレームを列によってまとめたグループ	df.groupby('列A')
サドルブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
データを最大最小を用いて正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
方程式の解を求める	sympy.solve(e)
赤いダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
部分文字列が文字列中に存在しないか	sub not in s
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategrey')
原点から(浮動小数点数,y)の距離	math.hypot(x, y)
文字列を最後の部分文字列で二つに区切って、残りの文字列を使う	s.rpartition(sub)[-1]
２つのデータフレームをつなぐ	pd.concat([df, df2])
横棒グラフをゴーストホワイト色として描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
グラフに使うx座標のラベルを指定する	plt.xlabel('x軸ラベル')
文字列が組の要素	element in aTuple
タイムスタンプデータを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
ファイルパスの区切り記号を使う	os.sep
データシリーズの標準偏差を計算する	ds.std()
numpyをインポートする	import numpy as np
データをL1ノルムで正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
直前の値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(method='ffill')
コマンドの第2引数を調べる	sys.argv[1]
nの二乗を求める	n ** 2
双方向キューの左の要素	deq[0]
リストが全て真か確認する	all(aList)
両端キュー中の値の数をカウントする	deq.count(element)
縦棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
option: 追加モードを用いる	mode = 'a'
横棒グラフをミッドナイトブルー色として描画する	plt.barh(データ列x, データ列y, color='midnightblue')
option: リネンを使用する	color = 'linen'
リストに要素を加える	aList.append(element)
option: 色をミディアムオーキッドに設定する	color = 'mediumorchid'
option: ラベンダーにグラフの色を指定する	color = 'lavender'
双方向キューの先頭から要素を削除する	deq.popleft()
二つのデータフレームを結合する	pd.merge(df, df2)
イテラブルとリストについて散布図を描画し、、四角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: 文字列の示す文字コードを用いる	encoding = s
年月日と時刻から日付時刻を準備する	datetime.datetime(年, 月, 日, 時, 分, 秒)
グラフにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
データフレームの一部のカラムの統計量を調べる	df[['列A', '列B']].describe()
横棒グラフをバリーウッド色を用いて描画する	plt.barh(データ列x, データ列y, color='burlywood')
集合から別の集合の要素を全て除去する	aSet.difference_update(aSet2)
第一引数のファイルの名前	sys.argv[1]
線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
マッピングをインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
縦棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
一点鎖線を用いて数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: ピンクにグラフの色を変更する	color = 'pink'
リストを累加する	itertools.accumulate(iterable)
nを二進数文字列にする	bin(n)[2:]
データ列を対数変換する	np.log(データ列)
散布図をゲインズボロ色を用いて描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
表データのあるカラムの年を使う	df['列A'].dt.year
値をスタックの先頭に入れる	deq.appendleft(element)
キューの中に要素が含まれてるかテストする	element in deq
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
散布図を黒い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
折れ線グラフをスラグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='slategrey')
クラス分類の予測精度をヒートマップで調べる	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
リストと配列についての散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
組をソートする	sorted(aTuple)
赤い実線で配列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategrey')
横棒グラフをシエナ色として描画する	plt.barh(データ列x, データ列y, color='sienna')
暗い赤色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
符号付きで整数nを長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
ダークサーモン色でヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
バリーウッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
小数点数が無限大か	math.isinf(x)
双方向キュー中のデータのインデックス	deq.index(element)
配列のトリム分散を計算する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
option: コーンズシルクにグラフの色を設定する	color = 'cornsilk'
標準入力から1行だけ改行を取り除いて読む	sys.stdin.readline().rstrip()
ヒストグラムを珊瑚色で描画する	plt.hist(データ列, color='coral')
パレットトルコイズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
数を文字列にする	str(x)
rgbのダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データシリーズの中にいくつ欠損値が存在するか調べる	ds.isna().sum()
文字列を部分文字列で分割したときの最初の文字列	s.partition(sub)[0]
折れ線グラフをミディアムターコイズ色を使って描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ヒストグラムをイエローグリーン色を使って描画する	plt.hist(データ列, color='yellowgreen')
スピアマン順位相関係数でデータフレームの一部の列の相関行列を計算する	df[['列A', '列B']].corr(method='spearman')
散布図の▼印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームの指定した列をValueMapでまとめて置換する	df['列A'].replace(ValueMap)
データフレームの中のカラムを四分位数ごとにビン分割する	pd.qcut(df[col], 4)
ラベンダーブラッシュ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
nとn2の排他的論理和を計算する	n ^ n2
option: レベッカパープルにグラフの色を設定する	color = 'rebeccapurple'
コンビネーション	math.comb(n, k)
表のインデックスがnの行を取り出す	df.loc[n]
２つの文字列は等しくない	s != s2
option: フォントの色をダークカーキに変更する	color = 'darkkhaki'
グラフの色テーマを全般的に淡くする	sns.set(pallete='muted')
option: バイナリモードにセットする	mode = 'rb'
追加できるようにUTF8として既存のファイルパスを開く]	open(filepath, mode='a', encoding='utf-8')
カウンタのそれぞれの文字列をそのカウントだけ列挙する	aCounter.elements()
線形回帰モデルを当てはめる	model.fit(説明変数, 目的変数)
データフレームのある列の第二四分位数	df['列A'].median()
オプションで標準エラーを使用する	file = sys.stderr
データフレームのカラムの種類	df.info()
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
データフレームをソートして下の方を取り出す	df.sort_values('キーとなる列').tail(n)
option: ターコイズにグラフの色を設定する	color = 'turquoise'
標準入力から1行受け取る	input()
option: ミッドナイトブルーにグラフの色を指定する	color = 'midnightblue'
ヒストグラムをオリーブ色として描画する	plt.hist(データ列, color='olive')
option: オーキッドに色を指定する	color = 'orchid'
棒グラフをリネン色として描画する	plt.bar(データ列x, データ列y, color='linen')
折れ線グラフの色をスレートブルーに指定する	plt.plot(データ列x, データ列y, color='slateblue')
バイオリン図をプロットする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの列の中に文字列があるかどうか	df['列A'].isin([value])
最初の部分文字列で文字列を二分割する	s.partition(sub)
ある列の文字列が正規表現にマッチする行を取り出す	df[df['列A'].str.match(正規表現)]
要素は集合の要素か調べる	element in aSet
タイムスタンプデータにn秒を加える	aDatetime + datetime.timedelta(seconds=n)
文字列をカンマで区切り、、文字列リストに変換する	s.split(',')
整数nの2進文字列を使う	bin(n)[2:]
異なるカラムをキーとして2つのデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
TSVファイルから文字コードを指定して読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
データフレームのある列を配列にする	df['列A'].values
配列とリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
タプルを昇順に並べ変える	sorted(aTuple, reverse=True)
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
ファイルパスをオープンして]、バイナリストリームを見る	open(filepath, mode='rb')
リストのそれぞれを関数でフィルタする	filter(func, iterable)
ヒストグラムをゴールデンロッド色として描画する	plt.hist(データ列, color='goldenrod')
無限大を使用する	math.inf
赤い星マーカーをリストとイテラブルについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
横棒グラフをホワイト色を使って描画する	plt.barh(データ列x, データ列y, color='white')
縦棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
ヒストグラムをシエナ色として描画する	plt.hist(データ列, color='sienna')
プログラムの実行を適切に止める	sys.exit(0)
リストを小さい順に並べ直す	sorted(aList, reverse=True)
nをn2で割った結果の切り上げを求める	(n + n2 - 1) // n2
縦棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
文字列は全て数値かどうか調べる	s.isnumeric()
データフレームのn行までを取り出す	df[:n]
縦棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
散布図をミディアムアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
カラムの欠損値をxに設定する	df['列A'].fillna(x)
ブラウン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
option: グラフの色をスカイブルーに変更する	color = 'skyblue'
option: 書き込み用にセットする	mode = 'w'
プロットの凡例の位置を(x,y)に指定する	plt.legend(loc=(x, y))
ユークリッド距離	math.dist(point, point2)
アンサンブル学習として回帰分析をする	sklearn.ensemble.VotingRegressor()
縦棒グラフをミディアムターコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
シーケンスからn個サンプリングする	random.sample(iterable, k=n)
グラフの補足の位置を指定する	plt.legend(loc=(x, y))
データシリーズの記述統計量	ds.describe()
ライトシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
星印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
散布図に青い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの欠損値を中央値で補う	df.fillna(df.median())
最初のを外したデータフレームを見る	df[df.columns[1:]]
ミッドナイトブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
ふたつの列からグループ化し最大値を計算する	df.groupby(['列A', '列B'], as_index=False).max()
option: 色をスノーに設定する	color = 'snow'
イテラブルを双方向キューに変換する	collections.deque(iterable)
文字列の左端は部分文字列か調べる	s.startswith(sub)
折れ線グラフを半透明の破線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
横棒グラフをライトグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgray')
データシリーズの中にある文字列の合計をカウントする	ds.isin([value]).sum()
数値を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
オプションで出力先を標準エラーに設定する	file = sys.stderr
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()//60
option: ミディアムシアグリーンにフォントの色をセットする	color = 'mediumseagreen'
インタプリタの実行ファイルの絶対パスを知る	sys.executable
option: パウダーブルーを使う	color = 'powderblue'
アクアマリン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームのあるカラムのNaNを前の行の値で置換する	df['列A'].fillna(method='ffill')
データフレームにおいてどの値が頻出か確認する	df.mode()
行列の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
文字列の後ろから空白を取り除く	s.rstrip()
縦棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
文字列を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
データフレームから指定した2列を抽出する	df[['列A', '列B']]
配列の尖度	scipy.stats.kurtosis(配列, bias=False)
文字列をカンマで分割して文字列リストに変換する	s.split(',')
n2がn以上、かつn3以下か調べる	n <= n2 and n2 <= n3
option: グレーを用いる	color = 'gray'
散布図を黄緑色を用いて描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
数列の推移を赤い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ある列の文字列が部分文字列で始まらないデータを抽出する	df[~ df['列A'].str.startswith(部分文字列)]
UTF8で書き込みできるようにファイルをオープンする]	open(filepath, mode='w', encoding='utf-8')
２つのデータフレームを横方向に結合する	pd.concat([df, df2], axis=1)
多次元データをSVDでパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
日付データの年を使う	aDate.year
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategrey')
列を等量でn個にビニングする	pd.qcut(ds, n)
データフレームがどの程度分散しているか確認する	df.var()
棒グラフをインディアンレッド色として描画する	plt.bar(データ列x, データ列y, color='indianred')
数値の部分分数化を行う	sympy.apart(e)
二つのカウンタの共通する要素を求める	aCounter & aCounter2
ある列によってデータフレームを並べてNaNを先頭にする	df.sort_values(by='列A', na_position='first')
回数を制限して新しい文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub, n)
線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
が名前付きタプルのインスタンスか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
線グラフを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
ライトグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
散布図の四角印を黒色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
option: ライトシアンを使う	color = 'lightcyan'
数列の散布図をプロットする	plt.scatter(データ列x, データ列y)
下限指定をしたデータフレームのカラムの算術平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
xの小数点以下'4'桁までの文字列にする	':.4f'.format(x)
nはリストのどれか	n in aList
横棒プロットを描いて、バーの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
タイムスタンプデータからn分、引く	aDatetime - datetime.timedelta(minutes=n)
横棒グラフをレベッカパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
ベージュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
option: スノーを使う	color = 'snow'
タイムスタンプデータが何日か知る	aDatetime.day
ミディアムブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
option: 色をライトシアンに変更する	color = 'lightcyan'
データシリーズが何時か知る	ds.dt.hour
少ない順にカウンタを列挙する	aCounter.most_common()[::-1]
ホットピンク色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
ダークブルー色としてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
棒グラフをオリベドラブ色を用いて描画する	plt.bar(データ列x, データ列y, color='olivedrab')
散布図を赤い四角マーカーとして描く	plt.plot(データ列x, データ列y, marker='s', c='r')
散布図に赤い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
リストとイテラブルについての散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
文字列の左側から空白を除く	s.lstrip(' ')
実線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
数値を黄色にする	f'\033[33m{value}\033[0m'
option: フォントの色をサドルブラウンに指定する	color = 'saddlebrown'
データ列の離れ具合を図示する	sns.residplot(x=データ列, y=データ列)
平仮名をカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
データ列を等量で分割数nを用いて分割する	pd.qcut(ds, n)
線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
rgbの左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ダークターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
リストを昇順に並べ変える	sorted(aList, reverse=False)
予測結果のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
２つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
ヒストグラムの色をゴーストホワイトにセットする	plt.hist(データ列, color='ghostwhite')
データフレームの選択したカラムの不偏標準偏差を求める	df[['列A', '列B']].std()
散布図に赤い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='r')
フクシア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
線グラフをレモンシフォン色として描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
２つの列からグループ化し最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
黒いクロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='k')
ヒストグラムを３つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
文字列リストにイテラブルを変換して、空白で連結する	' '.join(map(str, iterable))
データフレームの数値をまとめて小数点以下n桁で四捨五入する	df.round(n)
データシリーズの未入力値を直後の値で埋める	ds.fillna(method='bfill')
データフレームの先頭のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
折れ線グラフの色をトマトにする	plt.plot(データ列x, データ列y, color='tomato')
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgray')
オブジェクトのバイト長を調べる	sys.getsizeof(obj)
ヒストグラムをホワイトスモーク色として描画する	plt.hist(データ列, color='whitesmoke')
折れ線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
オブジェクトは浮動小数点数か	isinstance(obj, float)
データフレームの選択した列の中にいくつが含まれるかカウントする	df[['列A', '列B']].isin([value]).sum()
横軸だけ目盛線	plt.grid(axis='x')
データ列とリストについて散布図を描き、、文字列というデータラベル用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
散布図にクロスマーカーを使用する	plt.scatter(データ列x, データ列y, marker='x')
BOM付きでCSVファイルにデータフレームを保存する	df.to_csv('file.csv', encoding='utf_8_sig')
標準出力がパイプか	not sys.stdout.isatty()
ダークレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
ヒストグラムの色をシエナにする	plt.hist(データ列, color='sienna')
赤い大バツマーカーをリストと数列の散布図に描く	plt.plot(データ列x, データ列y, marker='X', c='r')
option: 暗い赤を使用する	color = 'darkred'
下限指定をした配列の算術平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
要素がセットのメンバーか	element in aSet
データフレームのカラムの平均の標準誤差	scipy.stats.sem(df['列A'])
タプルの項目数を見る	len(aDict)
折れ線グラフを破線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashed')
組を順にプリントする	print(*aTuple)
双方向キューの先頭	deq[0]
ラベンダーブラッシュ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: エクセルファイルシートの名前を変更する	sheet_name = ['A', 'B']
データフレームから列を３つだけ選択する	df[['列A', '列B', '列C']]
option: グラフの種類を破線に指定する	linestyle = 'dashed'
散布図を濃い青色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
正規表現で文字列を分ける	re.split(pattern, s)
表データのあるカラムが何時か調べる	df['列A'].dt.hour
折れ線グラフの色をオリベドラブにセットする	plt.plot(データ列x, データ列y, color='olivedrab')
線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
ダークオレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
配列を中央値でビニングする	pd.qcut(aArray, 2)
行列間の要素ごとの最小公倍数を求める	np.lcm(aArray, aArray2)
option: 色をライムグリーンに設定する	color = 'limegreen'
オブジェクトが論理値型のインスタンスか調べる	isinstance(obj, bool)
データフレームのカラムの値を正規表現patternで一度にreplに置換する	df['列A'].replace(pattern, repl, regex=True)
自然数の階乗を求める	math.factorial(n)
画面にプロットの用途を設定する	sns.set(context='notebook')
option: ダークオリーブグリーンにグラフの色を変更する	color = 'darkolivegreen'
文字列の大文字小文字を入れ替える	s.swapcase()
回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
ダークスラテグレー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
文字列が小文字	s.islower()
列名を指定して2つのデータフレームを内部結合する	pd.merge(df, df2, on='列A', how='inner')
option: フォントの色をフクシアに設定する	color = 'fuchsia'
データフレームのカラムの相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
散布図に△印を使用する	plt.scatter(データ列x, データ列y, marker='^')
option: カーキにグラフの色をする	color = 'khaki'
ダークゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
スラグレーにヒストグラムの色をセットする	plt.hist(データ列, color='slategrey')
データフレームの一部のカラムの未入力値をxに設定する	df[['列A', '列B']].fillna(x)
折れ線グラフの星マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
キーが辞書に存在する	key in aDict
rgbの大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
シエナ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
モデルのR2を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
パパイヤウィップ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
変数を白色にする	f'\033[37m{value}\033[0m'
方程式として数値の変数の解を求める	sympy.solve(e, z)
指定した列の欠損値をその最小値で埋める	df['列A'].fillna(df['列A'].min())
折れ線グラフをライトスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
昇順にタプルの要素をソートする	sorted(aTuple, reverse=True)
散布図をホットピンク色として描画する	plt.scatter(データ列x, データ列y, color='hotpink')
ヒストグラムの色をレモンシフォンに指定する	plt.hist(データ列, color='lemonchiffon')
スレートブルーにヒストグラムの色を変更する	plt.hist(データ列, color='slateblue')
散布図に赤いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列を走査し、正規表現にASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
データフレームからカテゴリデータの列だけ選択する	df.select_dtypes('object')
パールバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
予測結果の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
ベクトルの列ごとの標準偏差を調べる	np.std(aArray, axis=0)
現在をISO形式の文字列にする	datetime.datetime.today().isoformat()
太字で文字列をプリントする	print(f'\033[1m{value}\033[0m')
データフレームの全列の相関を可視化する	sns.pairplot(df)
コーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
option: ライムグリーンにグラフの色を指定する	color = 'limegreen'
ヒストグラムの色をターコイズに変更する	plt.hist(データ列, color='turquoise')
組のn番目の	aTuple[n]
カテゴリ別に並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
配列のユニークな要素とその位置を求める	u, indices = np.unique(aArray, return_index=True)
データフレームを用いる	import pandas as pd
データフレームの上位25％	df.quantile(0.25)
床	math.floor(x)
xの小数点以下'5'桁の文字列に変換する	':.5f'.format(x)
タイムスタンプデータの日数	aDatetime.day
グラフのタイトルを変更する	plt.title('グラフの名称')
横棒プロットの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
新しいロバスト分類モデルを作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
切片なしの重回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
横棒グラフをダークオリーブグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
OSの名前	sys.platform
ムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
データフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
青い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
リストの末尾を除く	aList[:-1]
インプレースに双方向キューのデータを反転する	deq.reverse()
データフレームをグループ化し、分散を求める	df.groupby('列A').var()
データフレームの選択した列の標本標準偏差	df[['列A', '列B']].std(ddof=1)
datetime64型のデータフレームのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
option: フォントの色をコーンズシルクに変更する	color = 'cornsilk'
指定した列で小さい順にデータフレームをソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
ファイルパスをEUCを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
文字列を空白で区切って、列挙する	s.split()
縦棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
変数の値を入れ替える	x, y = y, x
option: フォントの色をミスティローズに設定する	color = 'mistyrose'
option: グラフの色をアリスブルーに指定する	color = 'aliceblue'
フォーマットとしてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
散布図に赤い右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図に黒い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの選択した列の値が欠損値か調べる	df[['列A', '列B']].isna()
option: グラフの色をライトイエローに変更する	color = 'lightyellow'
データフレームをある列を用いて並べ直してNaNを先頭にする	df.sort_values(by='列A', na_position='first')
折れ線グラフの色をダークオレンジに変更する	plt.plot(データ列x, データ列y, color='darkorange')
散布図にダイアモンドマーカーを用いる	plt.scatter(データ列x, データ列y, marker='D')
欠損値のある行をドロップする	df.dropna(inplace=True)
文字列を部分文字列で分けた時の前半の文字列を使う	s.partition(sub)[0]
ダークオレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
文字列が漢字か	('\u4E00' <= ch <= '\u9FD0')
赤い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
nが無限に続くイテラブル	itertools.repeat(n)
rgbの大バツマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
16進数文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
カウンタ同士で共通部分	aCounter & aCounter2
データフレームの列の中にある文字列の数を数える	df['列A'].isin([value]).sum()
データフレームをヘッダを付けず書き出す	df.to_csv('file.csv', header=None)
xが1もしくは2、もしくは3に等しいか	x == 1 or x == 2 or x == 3
データ列間の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
オブジェクトはタプル型か	isinstance(obj, tuple)
縦棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
折れ線グラフの色をミディアムパープルにセットする	plt.plot(データ列x, データ列y, color='mediumpurple')
実数のハイパボリック・タンジェントの逆数	math.atanh(x)
項目名が辞書にあるか調べる	key in aDict
配列とイテラブルの散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ダイアモンド印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームのある列の値がxに等しくないデータを抽出する	df[df['列A'] != x]
xの小数点以下'4'桁の文字列に変換する	':.4f'.format(x)
エンコーディングを求める	sys.getdefaultencoding()
散布図をナバホホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
データフレームのカラムの不偏分散を算出する	df['列A'].var(ddof=1)
データフレームの選択したカラムの文字列をNaNにする	df[['列A', '列B']].replace(値, np.nan)
データフレームの欠損値をその第二四分位数で埋める	df.fillna(df.median())
option: アイボリー色を用いる	color = 'ivory'
リストの平均を求める	sum(aList)/len(aList)
列をフォーマットを用いてPandasの日付型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
データフレームの中に文字列と日付データがあるかどうか調べる	df.isin([value, value2])
散布図の菱形マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
赤い菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
黒い星マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
イテラブルと配列についての散布図に黒い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
ネイビーにヒストグラムの色を設定する	plt.hist(データ列, color='navy')
rgbの右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの列をにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
空のタプルを作る	()
棒グラフの色をバイオレットにする	plt.bar(データ列x, データ列y, color='violet')
データ列をリストを境界値として分割する	pd.cut(ds, aList)
ヒストグラムをコーンズシルク色を用いて描画する	plt.hist(データ列, color='cornsilk')
自然対数	math.log(x)
数列とリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
長さが一致しないときのzip	itertools.zip_longest(iterable, iterable2)
ヒストグラムを点線に変更する	plt.hist(データ列, linestyle='dotted')
文字列の左端から部分文字列を取り除く	s.lstrip(sub)
線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームの欠損値を中央値に増やす	df.fillna(df.median())
散布図の下三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
線グラフをクリムゾン色として描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの中にある文字列との合計を求める	df.isin([value, value2]).sum()
行列の行ごとの合計値を計算する	np.sum(aArray, axis=1)
縦棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
データフレームのヒストグラムを縦横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
ミディアムバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
文字列を部分文字列で二分し前半の文字列を使う	s.partition(sub)[0]
行列の次元の数	aArray.ndim
データフレームの一部のカラムにおいてどの値が頻出か見る	df[['列A', '列B']].mode()
option: グラフの線の幅を設定する	linewidth = 3.0
option: フォントの色をダークターコイズに設定する	color = 'darkturquoise'
乱数で要素を埋めた配列を初期化する	np.random.random(N)
ヒストグラムの色をフローラルホワイトにする	plt.hist(データ列, color='floralwhite')
データフレームの選択したカラムのどの値が頻出か調べる	df[['列A', '列B']].mode()
option: ヘッダを連番にセットする	header = None
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
option: マーカーの色を深紅にする	markerfacecolor = 'crimson'
データフレームのカラムの未入力値を直前の値で置き換える	df['列A'].fillna(method='ffill')
折れ線グラフをダークサーモン色として描画する	plt.plot(データ列x, データ列y, color='darksalmon')
列を等しい量になるようにn個にビンニングする	pd.qcut(ds, n)
茶色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
マップから最後のエントリをポップする	aDict.popitem()
折れ線グラフの印を左三角印にする	plt.plot(データ列x, データ列y, marker='<')
配列の列ごとの最大値	np.max(aArray, axis=0)
深紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
リストのn番目以降の要素を得る	aList[n:]
イテラブルの各要素に対して、predicateFuncの適用がTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
黒いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='k')
リストを縦軸数列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
データシリーズのパーセンタイルを求める	ds.quantile(パーセント/100)
データフレームをある列のカテゴリとしてグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
棒プロットの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
データフレームの選択したカラムの基本統計量	df[['列A', '列B']].describe()
ダークレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
コマンド引数のリストを得る	sys.argv[1:]
２つの文字列が等しくないか確認する	s != s2
日付データは日付データと同時かどうか判定する	aDate == aDate2
行列のムーア・ペンローズの擬似逆行列を計算する	np.linalg.pinv(aArray)
折れ線グラフの色をブランチドアーモンドに指定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ヒストグラムをスノー色として描画する	plt.hist(データ列, color='snow')
文字列を走査しパターンにケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
option: グラフの色をミディアムパープルに変更する	color = 'mediumpurple'
アルファベットから１文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
プロットを画面用にセットする	sns.set(context='notebook')
散布図の左三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
カウンタ同士で和集合演算する	aCounter | aCounter2
セットにリストの要素を全て追加する	aSet.update(iterable)
データフレームの歪度を求める	df.kurt()
rgbのダイアモンドマーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
柱状図を横に並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
ValueMapであるカラムの値を全部置き換える	df['列A'].replace(ValueMap)
散布図をダークブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
表データをある列の値によってまとめたグループを使う	df.groupby('列A')
リストとリストについて散布図を描画し、、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフに黒い▲印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
year年month月day日hour時minute分の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
列のNaNを平均値で埋める	df['列A'].fillna(df['列A'].mean())
二つの浮動小数点数は十分に近いか	math.isclose(x, x2)
nがn2以下、それか、n3以上か	n <= n2 or n >= n3
データフレームから同じ内容のデータをインプレイスでドロップする	df.drop_duplicates(inplace=True)
文字列を最初の部分文字列で分割したときの最初の文字列を使う	s.partition(sub)[0]
折れ線グラフに黒い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの選択した列がどの程度分散しているか確認する	df[['列A', '列B']].var()
option: ベクトルのデータ型を指定する	dtype = np.int16
折れ線グラフの左三角印の線幅を設定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ファイルから書き込みストリームを開いて]、fとする	f = open(filepath, mode='w')
レモンシフォン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
nはn2と等しい	n == n2
縦棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
数列とリストについて散布図を描いて、マーカーを△に指定する	plt.plot(データ列x, データ列y, marker='^')
ビン数nでリストをビニングする	pd.cut(aList, n)
ヒストグラムをビスク色を用いて描画する	plt.hist(データ列, color='bisque')
グラフのデザインを綺麗にする	import seaborn as sns
範囲指定をした配列の分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
真紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
２つのカラムを組み合わせてグループ化し個数を計算する	df.groupby(['列A', '列B'], as_index=False).count()
真紅色でヒストグラムを描画する	plt.hist(データ列, color='crimson')
option: グレー色を用いる	color = 'gray'
option: フォントの色をスノーに変更する	color = 'snow'
バリーウッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
nがn2より大きいかどうか調べる	n > n2
日付データにn分を加算する	aDate + datetime.timedelta(minutes=n)
散布図をロージーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
数値のパラメータに数式を代入する	e.subs(z, e2)
データフレームの選択したカラムの欠損値を直前の値に減らす	df[['列A', '列B']].fillna(method='ffill')
文字列を部分文字列で分けたときの左端の文字列を取り出す	s.partition(sub)[0]
折れ線グラフをインディアンレッド色を使って描画する	plt.plot(データ列x, データ列y, color='indianred')
リストの個数だけ繰り返す	range(len(aList))
データフレームの選択したカラムの欠損値を最大値にセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
二つの集合の差を使う	aSet.difference(aSet2)
新しい回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
データフレームの一部の列を百の位で丸めて整数型にする	df[['列A', '列B']].round(-2).astype(int)
折れ線グラフの線種を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
ダークシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
黒い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
データ列をボックスチャートにする	plt.boxplot(データ列)
文字列内にひとつでも空白が含まれるかどうか調べる	any(c.isspace() for c in s)
データシリーズの中に文字列とがあるか	ds.isin([value, value2])
空白で文字列を区切って列挙する	s.split()
option: 印を丸に変更する	marker = 'o'
三つのデータフレームを横方向につなぐ	pd.concat([df, df2, df3], axis=1)
文字列リストをsepを区切りとしてつなげる	sep.join(aStringList)
線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
プロットのy座標を対数に変更する	plt.yscale('log')
赤い点線としてリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
指定した列のカテゴリで集計し各個数を求める	df.groupby('列A').count()
列の一意な要素数	ds.nunique()
option: 大バツ印を描画する	marker = 'X'
データフレームの選択したカラムのNaNを最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
本日のローカルな日付を求める	datetime.date.today()
折れ線グラフの四角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
折れ線グラフの色をスカイブルーに指定する	plt.plot(データ列x, データ列y, color='skyblue')
実行結果を青色でプリントする	print(f'\033[34m{value}\033[0m')
option: フォントの色を青緑に設定する	color = 'teal'
日付データからn秒分減らす	aDate - datetime.timedelta(seconds=n)
option: グラフの色をピンクにセットする	color = 'pink'
オリーブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
option: 文字コードをUTF8に変更する	encoding = 'utf-8'
タプルは全て真かどうか調べる	all(aTuple)
データフレームの中に存在する文字列と文字列の合計を数える	df.isin([value, value2]).sum()
作画に用いるフォントを指定する	sns.set(font=フォント名)
option: フォントの色をオリーブに指定する	color = 'olive'
ライトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
全要素を1で初期化したベクトル	np.ones(要素数, dtype=np.int)
ふたつの集合に共通する要素からなる集合を使う	aSet.intersection(aSet2)
マッピングに項目名がある	key in aDict
文字列の先頭で正規表現に複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
パーセプトロンとしてクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ヒストグラムの色をライトスレイグレーにする	plt.hist(データ列, color='lightslategrey')
横棒グラフをハニーデュー色を用いて描画する	plt.barh(データ列x, データ列y, color='honeydew')
折れ線グラフの四角印の大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
要素がマッピングの値として含まれているか調べる	element in aDict.values()
スタッキングで回帰分析をする	sklearn.ensemble.StackingRegressor()
双方向キューのstart番目からendの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
横棒グラフをシルバー色を使って描画する	plt.barh(データ列x, データ列y, color='silver')
ランダムにデータフレームから100行を抽出する	df.sample(100)
ライトスチールブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
文字列がタプルの要素かどうか判定する	element in aTuple
折れ線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
nがn2以下、もしくは、n3以上	n <= n2 or n >= n3
画面にグラフを設定する	sns.set(context='notebook')
rgbの丸マーカーをイテラブルとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
縦棒プロットを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
プロットのy軸を対数に変更する	plt.yscale('log')
nをn2で割った余りをnにする	n %= n2
データフレームの選択したカラムの値が欠損値かどうか調べる	df[['列A', '列B']].isna()
n番目のカラムをインデックスとしてCSVファイルを読む	pd.read_csv('file.csv', index_col=n)
インディアンレッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
データを最大値と最小値を用いて正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
グレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
ミントクリームにヒストグラムの色を設定する	plt.hist(データ列, color='mintcream')
散布図を赤い右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ナバホホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
option: コーンズシルク色を使用する	color = 'cornsilk'
配列とリストについて散布図を描いて、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
欠損値がある行を削除してみる	df.dropna()
散布図を星印を使って描画する	plt.scatter(データ列x, データ列y, marker='*')
散布図をマルーン色として描画する	plt.scatter(データ列x, データ列y, color='maroon')
線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
文字列の先頭で正規表現にASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
ふたつの集合に共通する要素からなる集合を計算する	aSet.intersection(aSet2)
リストと数列についての散布図に赤い▼マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
データ列の移り変わりを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategrey')
実線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
option: ダークターコイズを使用する	color = 'darkturquoise'
データフレームの一部のカラムの欠損値を最大値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
イテラブルを集合に追加更新する	aSet.update(iterable)
サドルブラウン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームの選択したカラムの中にあると文字列の合計をカウントする	df[['列A', '列B']].isin([value, value2]).sum()
折れ線グラフをサドルブラウン色として描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
要素がマップの値として含まれているか	element in aDict.values()
データフレームの選択したカラムを1000の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-3).astype(int)
線グラフの色をライトスレイグレーにセットする	plt.plot(データ列x, データ列y, color='lightslategrey')
filepathにディレクトリを変更する	os.chdir(os.dirname(filepath))
数値を太字にする	f'\033[1m{value}\033[0m'
折れ線グラフの色をパールバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='palevioletred')
双方向キューをタプルにする	tuple(deq)
option: 青緑色を使う	color = 'turquoise'
option: バイナリ用に設定する	mode = 'rb'
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
散布図の左三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
文字列内に日本語が含まれるか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
サドルブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
自然対数の底を用いる	math.e
配列を等しい量になるようにビン数nでビン分割する	pd.qcut(aArray, n)
option: 改行しないように指定する	end = ''
文字列の右端から部分文字列を取り除く	s.rstrip(sub)
散布図をライトグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
バイアスなしの単回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
オブジェクトのプロパティの値を指定する	setattr(obj, プロパティ名, 値)
部分文字列が文字列の開始位置からと終了位置の間にあるか調べる	s.find(sub, start, end) != -1
データフレームの重複する行のみ	df[df.duplicated(keep=False)]
データフレームの指定した列の未入力値をその平均値で埋める	df['列A'].fillna(df['列A'].mean())
ターコイズにヒストグラムの色を変更する	plt.hist(データ列, color='turquoise')
線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
線グラフの色をマゼンタに指定する	plt.plot(データ列x, データ列y, color='magenta')
スピアマンの相関係数を使う	scipy.stats.spearmanr(数列, 数列2)
散布図を赤い三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
xの小数点以下'3'桁まで表示する	print(':.3f'.format(x))
文字列の中で正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s)
option: 色をダークバイオレットに設定する	color = 'darkviolet'
データシリーズのタイムゾーンを日本にセットする	ds.tz_convert('Asia/Tokyo')
散布図に菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフをナバホホワイト色として描画する	plt.plot(データ列x, データ列y, color='navajowhite')
日付データからn日を引く	aDate - datetime.timedelta(days=n)
リストと配列についての散布図に赤い菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
option: 色をディムグレーにセットする	color = 'dimgray'
縦棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ラインを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
２つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
中央値でデータ列を分割する	pd.qcut(ds, 2)
浮動小数点数を切り下げる	math.floor(x)
option: シアンを使う	color = 'cyan'
ヒストグラムの色をライムグリーンにセットする	plt.hist(データ列, color='limegreen')
xが1、もしくは2かどうか調べる	x == 1 or x == 2
ロージーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='rosybrown')
リストとリストについて散布図をプロットして、その大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
文字列の先頭から部分文字列を除去する	s.lstrip(sub)
非数値データを連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
option: アリスブルー色を使用する	color = 'aliceblue'
option: ミディアムスプリンググリーンに色をセットする	color = 'mediumspringgreen'
線グラフの色をライトコーラルにセットする	plt.plot(データ列x, データ列y, color='lightcoral')
文字列の右端から空白を除去する	s.rstrip(' ')
折れ線グラフを描く	plt.plot(データ列x, データ列y)
グラフを見やすくする	import seaborn as sns
マップを複製する	aDict.copy()
列をベクトルに変換する	np.array(iterable)
正規表現に大文字・小文字を無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
nxn2の２次元リスト	[[0] * n for _ in range(n2)]
ナバホホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
CSVファイルをロードする	pd.read_csv('file.csv', sep=',')
ライトスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
折れ線グラフの色をミディアムターコイズにセットする	plt.plot(データ列x, データ列y, color='mediumturquoise')
指定した列のみデータフレームの重複を見る	df.duplicated(subset='列A')
ヒストグラムをダークレッド色で描画する	plt.hist(データ列, color='darkred')
option: グラフの色をナバホホワイトにセットする	color = 'navajowhite'
ミッドナイトブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
線形回帰モデルの回帰変数	model.coef_
リストとイテラブルについての散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
棒グラフをローングリーン色として描画する	plt.bar(データ列x, データ列y, color='lawngreen')
線グラフの色をライトグレーにする	plt.plot(データ列x, データ列y, color='lightgrey')
深紅色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
リストの各値を関数に適用した結果で並べ変える	sorted(aList, key=func)
option: パパイヤウィップを使用する	color = 'papayawhip'
非空白が文字列中にあるかどうか確認する	any(not c.isspace() for c in s)
データフレームの列を散布図で可視化し、、カテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
option: ライムにグラフの色を設定する	color = 'lime'
nの2乗	n ** 2
ヒストグラムのラインスタイルを一点鎖線にセットする	plt.hist(データ列, linestyle='dashbot')
行列から重複を除いた行列を作る	np.unique(aArray)
rgbの右三角マーカーを配列とデータ列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームをグループ化し、各最小値を算出する	df.groupby('列A').min()
ある列の50パーセンタイル	df['列A'].median()
赤い実線として折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
パラメータが無限大に近づく時、数値の極限値を求める	sympy.limit(e, z, oo)
双方向キューの末尾を使う	deq[-1]
データフレームの欠損値を平均値で補完する	df.fillna(df.mean())
文字列で区切って2つのリストをプリントする	print(value, value2, sep=s)
リストの長さを制限する	collections.deque(iterable, maxlen=n)
折れ線グラフを青緑色を用いて描画する	plt.plot(データ列x, データ列y, color='turquoise')
自然数個からk個取り出した場合の並べ方の総数を求める	math.perm(n, k)
リストを箱髭図で描画する	plt.boxplot(データ列)
補足を表示する	plt.legend()
折れ線グラフの丸印の大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
y座標の目盛を表示しない	plt.yticks([])
データフレームのカラムの偏差値を算出する	50 + 10 * scipy.stats.zscore(df['列A'])
縦棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
アイボリー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
タプルの各要素を関数に適用した結果で並べ変える	sorted(aTuple, key=func)
ある列の値がxに等しくない行を抽出する	df[df['列A'] != x]
日付時刻データをISO書式の文字列にする	aDatetime.isoformat()
表計算ファイルファイルからCSVファイルをSJISで読む	pd.read_csv('file.csv', encoding='shift_jis')
リストと配列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
半透明の点線としてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
散布図をブラック色を用いて描画する	plt.scatter(データ列x, データ列y, color='black')
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
カウンタの最も頻出の要素を求める	aCounter.most_common()[0]
2つの最大値	max(x, y)
主成分分析を用いて淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
データ列のエポック秒をタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
行列を横ベクトルに変形する	aArray.reshape(1, -1)
データシリーズの四分位点など	ds.describe()
ライトスチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightsteelblue')
リストを引数として展開してプリントする	print(*aList, sep=',')
折れ線グラフの星マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
暗い赤色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフの印を丸印にする	plt.plot(データ列x, データ列y, marker='o')
暗い赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
行列の転置行列を求める	aArray.T
プロットを論文用に指定する	sns.set(context='paper')
option: SJISを使用する	encoding = 'shift_jis'
データフレームのカラムをグループ化して、ヒストグラムでグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
散布図をrgbの▲マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
最大列数を変更する	pd.set_option('display.max_columns', n)
データフレームの中に文字列が存在するか	df.isin([value])
淡い茶色色としてヒストグラムを描画する	plt.hist(データ列, color='tan')
変数が無限大に近づくとき、数式の極限値を算出する	sympy.limit(e, z, oo)
アクアにヒストグラムの色をセットする	plt.hist(データ列, color='aqua')
option: SJISを用いる	encoding = 'shift_jis'
データフレームを指定した列をキーにして昇順にソートして更新する	df.sort_values(by='列A', ascending=True, inplace=True)
線グラフの線の種類を点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
赤い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
双方向キューの最初の値	deq[0]
全要素を０で初期化した８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int8)
縦軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
サドルブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
option: グラフの色をダークオーキッドに変更する	color = 'darkorchid'
option: ブラウンを使用する	color = 'brown'
マッピングの浅いコピーを作る	aDict.copy()
に箱ひげ図を用いてデータフレームを描画する	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレーム中のNaNを削除し、みる	df.dropna()
グラフの描画で明るくカラーテーマを用いる	sns.set(pallete='bright')
データフレームのあるカラムは何月か調べる	df['列A'].dt.month
データシリーズにおいてどの値が頻出か調べる	ds.mode()
データフレームを２つの列の値でグループ化する	df.groupby(['列A', '列B'])
横棒グラフの色を珊瑚にする	plt.barh(データ列x, データ列y, color='coral')
既存のベクトルをベースにして全要素が0の配列	np.zeros_like(aArray)
データシリーズの欠損値を平均に設定する	ds.fillna(ds.mean())
データフレームの選択したカラムの中にある文字列の数を数える	df[['列A', '列B']].isin([value]).sum()
ファイルをバイナリモードでオープンして]fとする	f = open(filepath, mode='rb')
文字列全体をASCII限定としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
列のイミュータブルなセット	frozenset(iterable)
option: 印を菱形に変更する	marker = 'D'
rgbの三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データ列のヒストグラムを描く	plt.hist(データ列)
ヒストグラムを描き、、ビンの数を設定する	plt.hist(データ列, bins=区関数)
折れ線グラフを濃い青色を用いて描画する	plt.plot(データ列x, データ列y, color='darkblue')
シアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
リストの先頭を除く	aList[1:]
列概要	df.info()
ある列の文字列に部分文字列がある行を取り出す	df[df['列A'].str.contains(部分文字列)]
option: グラフの線の種類を一点鎖線に設定する	linestyle = 'dashbot'
黒い▽マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
option: ライトコーラルを使用する	color = 'lightcoral'
外れ値を除いたカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
マップに項目名ワード引数を用いて加えて、更新する	aDict.update(**kwargs)
プロットにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
赤い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームの複数の列をドロップし、みる	df.drop(['列A', '列B'], axis=1)
両端キューの先頭に文字列を付け加える	deq.appendleft(element)
列の各データ値の出現数	ds.value_counts()
データフレームのある列を最初のカテゴリーを除いてダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
あるカラムの値がxより多い行を抽出する	df[df['列A'] > x]
option: 文字列の示すエンコーディングを使用する	encoding = s
縦棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
まとめてreplにデータフレームの値を正規表現patternで置き換える	df.replace(pattern, repl, regex=True)
追加モードを用いてファイルパスをオープンして]、fとする	f = open(filepath, mode='a')
本日を文字列でフォーマットして文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
後の値でデータフレームの欠損値を補う	df.fillna(method='bfill')
切片なしの線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームのあるカラムの欠損値を最頻値に変更する	df['列A'].fillna(df['列A'].mode().iloc[0])
整数nの16進数リテラル	hex(n)
実数を小数点で丸める	round(x, n)
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
横方向に複数のデータフレームを合体させる	pd.concat([df, df2, df3], axis=1)
数を十の位で丸める	round(x, -1)
列を中央値で分割する	pd.qcut(ds, 2)
オブジェクトがタプルに含まれるか	element in aTuple
配列をイミュータブルな集合に変換する	frozenset(iterable)
色名をからコードにする	matplotlib.colors.cnames[色名]
線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
表計算ファイルからSJISでCSVファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
データフレームのあるカラムを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
プロットの色を淡くする	sns.set(pallete='muted')
集合から別のセットとの共通要素を全て除去する	aSet.symmetric_difference_update(aSet2)
折れ線グラフに丸印を使う	plt.plot(データ列x, データ列y, marker='o')
xの小数点以下'2'桁までを出力する	print(':.2f'.format(x))
実数を浮動小数点数で	x // y
データフレームのある列のNaNを最小値で埋める	df['列A'].fillna(df['列A'].min())
線グラフをブルーバイオレット色として描画する	plt.plot(データ列x, データ列y, color='blueviolet')
ヒストグラムの色を耐火レンガに指定する	plt.hist(データ列, color='firebrick')
ファイルパスからディレクトリ名を見る	os.path.dirname(filepath)
耐火レンガ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='grey')
データフレームをカラムの名前を付けず出力する	df.to_csv('file.csv', header=None)
ミントクリーム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
現在の月数	datetime.datetime.today().month
nがn2よりも小さいか判定する	n < n2
黄緑色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
縦棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
折れ線グラフに黒い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
配列とリストについて散布図を描画し、ポイントマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
整数個からk個取り出したときの順列の総数	math.perm(n, k)
データフレームのあるカラムの欠損値を50パーセンタイルに変更する	df['列A'].fillna(df['列A'].median())
データ列の折れ線グラフを右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>')
散布図の▽印の色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
辞書上で項目名が定義済みかどうか調べる	key in aDict
データフレームの列間の相関行列を計算する	df.corr()
多重集合をシーケンスから作る	collections.Counter(iterable)
辞書から最後に追加した項目をポップする	aDict.popitem()
散布図のポイントマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
nがn2で割り切れないか確認する	n % n2 != 0
散布図にrgbの▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
グリーンイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
棒グラフをシスル色を用いて描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームから重複するデータを残さずドロップする	df.drop_duplicates(keep=False)
N未満までの配列を作成する	np.arange(N)
ダークシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ファイルをオープンして]、バイナリ書き込みストリームを求める	open(filepath, mode='wb')
イテラブルとリストの散布図に▼マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
フクシアにヒストグラムの色を変更する	plt.hist(データ列, color='fuchsia')
ふたつの列でグループ化し、合計を算出する	df.groupby(['列A', '列B'], as_index=False).sum()
ヒストグラムをロージーブラウン色を用いて描画する	plt.hist(データ列, color='rosybrown')
option: ブランチドアーモンドに色を設定する	color = 'blanchedalmond'
折れ線グラフの色をミディアムパープルに変更する	plt.plot(データ列x, データ列y, color='mediumpurple')
日付時刻データにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
折れ線グラフの大バツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
二つの文字列が等しいか	s == s2
文字列全体が正規表現に大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
二つの実行結果をスラッシュで区切って表示する	print(value, value2, sep='/')
折れ線グラフの三角印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
日付時刻データが木曜日か	aDatetime.weekday() == 3
列をセットに追加更新する	aSet.update(iterable)
リストと配列の散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
文字列の中のパターンによる全てのマッチを求める	re.findall(pattern, s)
配列を変形する	aArray.reshape(行数, 列数)
option: パールバイオレットレッド色を使用する	color = 'palevioletred'
半透明の点線としてデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: フォントの色をスノーに設定する	color = 'snow'
ふたつのリストの共通りストを求める	list(set(aList) & set(aList2))
オブジェクトがn回繰り返すイテラブル	itertools.repeat(element, n)
ヒストグラムの色をゴールドに変更する	plt.hist(データ列, color='gold')
CSVをn番目のカラムを行としてロードする	pd.read_csv('file.csv', index_col=n)
半透明の実線を用いて折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
あるカラムの母標準偏差	df['列A'].std(ddof=0)
数を百の位で丸める	round(x, -2)
タプルをひとつ飛ばしで得る	aTuple[::2]
データフレームの列概要を見る	df.info()
実部と虚部から複素数を準備する	complex(x, y)
ミディアムオーキッド色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データシリーズの中に文字列が存在するか調べる	ds.isin([value])
文字列内にひとつでも英数字があるか調べる	any(c.isalnum() for c in s)
オブジェクトのオブジェクト識別子を使う	id(obj)
データフレームの一部のカラムを丸めて整数にする	df[['列A', '列B']].round().astype(int)
データフレームからカラムを２つ選択する	df[['列A', '列B']]
散布図をロージーブラウン色を使って描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
横棒グラフをディープスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
ふたつのマッピングを合体する	aDict | aDict2
双曲線余弦の逆数	math.acosh(x)
option: ミディアムアクアマリン色を使用する	color = 'mediumaquamarine'
キュー中の値のインデックス	deq.index(element)
ハニーデュー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
nが無限に続くリスト	itertools.repeat(n)
オブジェクトがリストかタプル	isinstance(obj, (list)
nが一桁の数	0 <= n <= 9
リストを分割数nでビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列のプレフィックスが部分文字列	s.startswith(sub)
ベクトルの行を選択する	aArray[行番号]
浮動小数点数の小数点を四捨五入する	round(x)
データフレームをグループ化し、ある列に対し分散を算出する	df.groupby('列A')['列B'].var()
ヒストグラムをアクアマリン色として描画する	plt.hist(データ列, color='aquamarine')
大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフのクロス印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
正接	math.tan(x)
折れ線グラフの印を右三角印にする	plt.plot(データ列x, データ列y, marker='>')
サンディーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
要素が全て初期値の行列	np.full(要素数, 初期値, dtype=np.int)
既存の配列をベースにして全要素が1の配列	np.ones_like(aArray)
散布図の左三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ライム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
白い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
四分位数でデータ列をビン分割する	pd.qcut(ds, 4)
散布図をリネン色を用いて描画する	plt.scatter(データ列x, データ列y, color='linen')
直前の値でデータシリーズのNaNを埋める	ds.fillna(method='ffill')
ダークオーキッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームを指定した列によってまとめたグループ	df.groupby('列A')
日付データは何月か知る	aDate.month
nとkのnCk	math.comb(n, k)
線グラフを実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのある列をワンホット・ベクトルにする	pd.get_dummies(df['列A'])
集合の変更不能版	frozenset(aSet)
ピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
散布図にポイントマーカーを加える	plt.scatter(データ列x, データ列y, marker='.')
標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
option: グラフの色をラベンダーに変更する	color = 'lavender'
実数のバイナリ対数	math.log2(x)
散布図に赤い上三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図の印を左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
データフレームのn行目以降抽出する	df[n:]
散布図をグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='grey')
散布図を左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームを調べる	df.head()
オプションで、ファイルを用いる	file = sys.open(filename, 'w')
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgrey')
折れ線グラフに凡例をつける	plt.plot(データ列x, データ列y, label='ラベル')
データフレームを用いる	import pandas as pd
タイムスタンプデータの分数	aDatetime.minute
散布図に赤い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
シルバー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
ライトスチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
折れ線グラフにポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
データシリーズの欠損値を直前の値にする	ds.fillna(method='ffill')
キーが辞書に存在しない時要素を追加する	aDict.setdefault(key, element)
日付データをISO8601形式の文字列に変換する	aDate.isoformat()
折れ線グラフの右三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
カウンタのそれぞれの項目をカウントだけリストとして得る	aCounter.elements()
xの小数点以下'1'桁の文字列に変換する	':.1f'.format(x)
まとめてデータフレームのあるカラムをValueMapで置換する	df['列A'].replace(ValueMap)
実行結果を赤色でプリントする	print(f'\033[31m{value}\033[0m')
実数の逆双曲線正接を求める	math.atanh(x)
エポック秒のデータ列からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
分子と分母から分数を作成する	fractions.Fraction(分子, 分母)
現在の時刻を使う	datetime.date.today().hour
文字列リストをつなげるひとつの文字列にする	''.join(map(str, iterable))
数列とリストについて散布図を描画し、、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
データシリーズは正規分布からどの程度、尖っているか見る	ds.skew()
散布図にrgbの星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームのある列を配列として取り出す	df['列A'].values
線グラフの色をアンティークホワイトにする	plt.plot(データ列x, データ列y, color='antiquewhite')
散布図のダイアモンドマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ファイルパスをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
option: マーカーをダイアモンドに指定する	marker = 'D'
ヒストグラムをライム色として描画する	plt.hist(データ列, color='lime')
指定した列で集計し、分散を求める	df.groupby('列A').var()
折れ線グラフのポイント印の色を設定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
散布図に青い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームの選択したカラムのNaNを平均に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
option: アイボリー色を使用する	color = 'ivory'
日付時刻データからn週間を減らす	aDatetime - datetime.timedelta(weeks=n)
黒い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームの選択したカラムのNaNを最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
整数nを十六進表現にする	hex(n)
データフレームの選択したカラムの欠損値を中央値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
折れ線プロットにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
線グラフの色をダークサーモンにセットする	plt.plot(データ列x, データ列y, color='darksalmon')
表をグループ化し、合計を計算する	df.groupby('列A').sum()
線グラフをシエナ色として描画する	plt.plot(データ列x, データ列y, color='sienna')
キューから最初の要素を削除する	deq.remove(element)
タイムスタンプデータを浮動小数点数に変換する	aDatetime.timestamp()
散布図に左三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='<')
文字コードtextを用いてファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
データシリーズの曜日数を使う	ds.dt.dayofweek
データシリーズは何月か知る	ds.dt.month
棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
option: グラフの色をフクシアに指定する	color = 'fuchsia'
線グラフをライトスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
文字列中に部分文字列がいくつか存在するか調べる	s.count(sub)
横棒グラフをミディアムスプリンググリーン色を使って描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
棒グラフを淡い茶色色を用いて描画する	plt.bar(データ列x, データ列y, color='tan')
シーケンスを双方向キューに変換する	collections.deque(iterable)
タプルを両端キューに変換する	collections.deque(iterable)
散布図の丸マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
option: マルーンを用いる	color = 'maroon'
option: フォントの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
データ列の折れ線グラフを星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*')
ライトスチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgray')
option: チョコレート色を使用する	color = 'chocolate'
実数が負の数か	x < 0
ユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
データフレームの一部の列の第三四分位数	df[['列A', '列B']].quantile(0.75)
NaNも加えてデータフレームのあるカラムをダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
データフレームの指定したカラムの空文字をNaNに変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
option: 文字列を分割記号で用いる	sep = s
ファイルパスをUTF8を用いて書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
データフレームの列間の相関係数を計算する	df.corr()
縦棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
散布図の△マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ベクトル演算をする	import numpy as np
マルーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
ミディアムパープル色でヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
データフレームのカラムのユニークな要素数	df[col].nunique()
実行結果の出力を改行なしに行う	print(value, end='')
赤いバツマーカーをリストと数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図をゴーストホワイト色として描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
散布図の右三角印の太さを変える	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
折れ線グラフをオレンジ色として描画する	plt.plot(データ列x, データ列y, color='orange')
ベクトルの合計	np.sum(aArray)
実数のn乗して数による余り	pow(x, n, y)
xの絶対値を算出する	abs(x)
データシリーズの欠損値を後の行の値に設定する	ds.fillna(method='bfill')
ふたつの列でグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
日付時刻データにn週間を足す	aDatetime + datetime.timedelta(weeks=n)
ダークオレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
平均値でデータフレームの選択した列のNaNを補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
ミッドナイトブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
データフレームの標準偏差を算出する	df.std()
option: グラフの色をターコイズに変更する	color = 'turquoise'
データフレームの一部のカラムの中にいくつ文字列があるか数える	df[['列A', '列B']].isin([value]).sum()
回帰モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
横棒グラフをフォレストグリーン色として描画する	plt.barh(データ列x, データ列y, color='forestgreen')
リストが少なくとも一つ真	any(aList)
文字列を部分文字列で分割して、文字列リストに変換する	s.split(sub)
データフレームの一部のカラムの中にと文字列がいくつあるか求める	df[['列A', '列B']].isin([value, value2]).sum()
リストとリストの散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
option: 色をシスルに設定する	color = 'thistle'
3自然数の最大公約数	math.gcd(n, n2, n3)
option: どの行もヘッダに設定しない	header = None
表データのあるカラムをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
Pythonパス	sys.path
変数がマイナス無限大に近づく際の数式の極限値を求める	sympy.limit(e, z, -oo)
文字列を中央寄せにする	s.center(文字列幅)
小麦色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
リッジ回帰分析を行う	model = sklearn.linear_model.Ridge(alpha=正則化項)
タイムスタンプデータが水曜日かどうか調べる	aDatetime.weekday() == 2
option: グラフの種類を点線に指定する	linestyle = 'dotted'
分類モデルから目的変数を予測する	y_pred = model.predict(説明変数)
黒いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
文字列の中の複数行対応として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
型が名前付きタプルか確認する	issubclass(C, tuple)
option: ダークカーキにグラフの色を指定する	color = 'darkkhaki'
MSDの準備をする	model = sklearn.manifold.MSD(n_components=n)
本日が土曜日か確認する	datetime.datetime.today().weekday() == 5
ダークスレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
nは組のいづれかか	n in aTuple
両端キューのstart〜endの要素を使う	collections.deque(itertools.islice(deq, start, end))
ライトコーラルにヒストグラムの色を変更する	plt.hist(データ列, color='lightcoral')
ベクトルの次元を変形する	aArray.reshape(行数, 列数)
option: 行列のデータ型を指定する	dtype = np.int16
データフレームの欠損値をドロップする	df.dropna(inplace=True)
option: フォントの色をミディアムターコイズに変更する	color = 'mediumturquoise'
小数点数のk進対数	math.log(x, k)
配列とリストについて散布図を描画してダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームの中に文字列がある	df.isin([value])
ブラックにヒストグラムの色を設定する	plt.hist(データ列, color='black')
組の最後からn番目以前の部分を得る	aTuple[:-n]
データフレームの二つの列を消す	df.drop(['列A', '列B'], axis=1, inplace=True)
半透明の一点鎖線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
横棒グラフをダークゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
マッピングのキーを列挙する	aDict.keys()
option: グラフの色をグレーにセットする	color = 'grey'
ゼロ埋めされた符号なし８ビット整数型の行列	np.zeros(要素数, dtype=np.uint8)
ヒストグラムの色を赤にセットする	plt.hist(データ列, color='red')
色付きの破線を使って折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームを表示するとき折り返しをしない	pd.set_option('expand_frame_repr', False)
option: 区切りを改行にする	sep = '\n'
nがn2で割り切れないかどうか調べる	n % n2 != 0
浮動小数点数とyのノルムを計算する	math.hypot(x, y)
乱数で要素を埋めた配列を作成する	np.random.random(N)
表データをソートして新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
オリベドラブ色でヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
year年のタイムスタンプ	datetime.datetime(year=year, month=1, day=1)
表を欠損値を含めてある列の値で集約する	df.groupby('列A', dropna=False)
グラフの見栄えをデフォルトでイイ感じにセットする	sns.set()
リストをn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフを赤い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ライトスレイグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームの一部のカラムの未入力値を前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
option: マーカーを三角に指定する	marker = '^'
リストとリストについて散布図をプロットして、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
最大最小からベクトルを作る	np.linspace(最小値, 最大値, 要素数)
データフレームの中に文字列と文字列が存在するかどうか調べる	df.isin([value, value2])
データシリーズが何秒か知る	ds.dt.second
異なる列をキーとしてデータフレームを内部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
まとめて正規表現でデータフレームの選択したカラムを置換する	df[['列A', '列B']].replace(pattern, repl, regex=True)
option: スチールブルーを使う	color = 'steelblue'
option: 色をパウダーブルーにセットする	color = 'powderblue'
点間のユークリッド距離	math.dist(point, point2)
カテゴリで色分けして、データフレームの全カラムの散布図をプロット化する	sns.pairplot(df, hue='カテゴリ列')
xの小数点以下'1'桁まで表示する	print(':.1f'.format(x))
データフレームをグループ化し、それぞれの標準偏差を算出する	df.groupby('列A').std()
散布図をレモンシフォン色として描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
データフレームの選択したカラムを十の位で丸める	df[['列A', '列B']].round(-1)
リストの全ての要素を消去する	aList.clear()
option: 耐火レンガにフォントの色を変更する	color = 'firebrick'
マッピングのキー一覧を得る	list(aDict)
文字列が部分文字列で終わるかテストする	s.endswith(sub)
全要素を初期値で初期化した行列	np.full(要素数, 初期値, dtype=np.int)
クラス分類をアンサンブル学習でする	sklearn.ensemble.VotingClassifier()
散布図をデピンク色として描画する	plt.scatter(データ列x, データ列y, color='deeppink')
色名からカラーコードを求める	matplotlib.colors.cnames[色名]
プロットのカラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
折れ線グラフの色をナバホホワイトに変更する	plt.plot(データ列x, データ列y, color='navajowhite')
文字列の左側が部分文字列か調べる	s.startswith(sub)
黒い丸マーカーを配列と数列についての散布図に描く	plt.plot(データ列x, データ列y, marker='o', c='k')
エクセルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
リストと数列について散布図をプロットして星マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
日付時刻データが金曜日かどうか確認する	aDatetime.weekday() == 4
辞書からキーの値かもしくは要素を参照する	aDict.get(key, element)
ハニーデュー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
一行、データフレームからランダムに抽出する	df.sample()
ヒストグラムの色をロージーブラウンに指定する	plt.hist(データ列, color='rosybrown')
データ列の各データ値の出現回数	ds.value_counts()
ひとつでも非英数字が文字列中に含まれる	any(not c.isalnum() for c in s)
データフレームの複数のカラムを削除し、みる	df.drop(['列A', '列B'], axis=1)
ライトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
折れ線グラフの左三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
nがn2未満、それかn3以上か調べる	n < n2 or n >= n3
Pandasのバージョンをプリントする	print(pd.__version__)
option: 区切りを文字列にする	sep = s
書き込み用に文字列の示す文字コードを用いてファイルパスを開く]	open(filepath, mode='w', encoding=s)
数列と配列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
オブジェクトのプロパティの値を値にセットする	setattr(obj, プロパティ名, 値)
文字列の中で大文字・小文字を無視してパターンにマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
カウンタをタプルとして更新する	aCounter.update(aDict)
配列とリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ライトゴールドロディイエローにヒストグラムの色を変更する	plt.hist(データ列, color='lightgoldenrodyellow')
散布図のポイント印の色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
範囲を指定して整数乱数を発生させる	random.randint(最小値, 最大値)
線グラフを半透明の破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
文字列を区切り記号で分割して文字列リストに変換する	s.split(sep)
データフレームの列が正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
左三角マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
色付きの実線を用いて数列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
表データのあるカラムの曜日を使う	df['列A'].dt.weekday_name
折れ線グラフの四角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
折れ線グラフの色をダークレッドに変更する	plt.plot(データ列x, データ列y, color='darkred')
文字列をマゼンタで表示できる文字列に変換する	f'\033[35m{value}\033[0m'
グラフのデータラベルの場所を(x,y)にセットする	plt.legend(loc=(x, y))
オブジェクトは文字列型のインスタンスか調べる	isinstance(obj, str)
珊瑚色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
折れ線グラフを点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列中の部分文字列を新しい文字列に全部置き換える	s.replace(sub, newsub)
option: スラグレーを使用する	color = 'slategray'
データシリーズを一万の位で四捨五入する	ds.round(-4)
ひとつ置きにタプルを得る	aTuple[::2]
散布図の四角印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
カラムの値が欠損値	df['列A'].isna()
色付きの実線としてリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームの未入力値をxに設定する	df.fillna(x)
折れ線グラフのマーカーを大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムを青色として描画する	plt.hist(データ列, color='blue')
実数とyのノルム	math.hypot(x, y)
散布図に黒い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームを異なる列をキーとして右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
xが-9以上9以下か調べる	-9 <= x <= 9
縦棒グラフをブランチドアーモンド色を用いて描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
グラフを論文に設定する	sns.set(context='paper')
折れ線グラフをターコイズ色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
既存の行列をベースに全要素が0の配列を作る	np.zeros_like(aArray)
整数にする	int(x)
指定したカラムの空文字をNaNに変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x')
ピンク色を用いてヒストグラムを描画する	plt.hist(データ列, color='pink')
配列のn次モーメントを計算する	scipy.stats.moment(配列, moment=n)
三変数の最小値を算出する	min(x, y, z)
貝殻にヒストグラムの色を設定する	plt.hist(データ列, color='seashell')
ヒストグラムの色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
ヒストグラムをライトグリーン色を使って描画する	plt.hist(データ列, color='lightseagreen')
ケンドール相関係数としてデータフレームの相関行列を計算する	df.corr(method='kendall')
黒い左三角マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
オプションで、出力先を標準出力にする	file = sys.stdout
数を千の位で丸める	round(x, -3)
オブジェクトが論理値かどうか調べる	isinstance(obj, bool)
タプルのn番目のの要素	aTuple[n]
数を実数で割った余り	x % y
データフレームを散布図で描画して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ふたつの列からグループ化し、標準偏差を算出する	df.groupby(['列A', '列B'], as_index=False).std()
濃く色使いをプロットの描画で用いる	sns.set(pallete='deep')
データフレームを丸めて整数型にする	df.round().astype(int)
データフレームのある列の記述統計量を求める	df['列A'].describe()
散布図を大バツ印で描画する	plt.scatter(データ列x, データ列y, marker='X')
今日が火曜日か調べる	datetime.datetime.today().weekday() == 1
ヒストグラムの色をブラックに変更する	plt.hist(データ列, color='black')
二つの集合の差集合	aSet.difference(aSet2)
散布図をライトコーラル色として描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
データフレームの指定した列のメディアン	df['列A'].median()
新しい文字列で文字列を置き換える	s.replace(sub, newsub)
横棒グラフをプロットし、、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
二つのオブジェクトが等しい	obj == obj2
ピアソンの相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
折れ線グラフの三角マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
折れ線プロットとしてデータ列を可視化する	plt.plot(データ列x, データ列y)
データフレームの列を散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
列とシーケンスの直積を得る	itertools.product(iterable, iterable2)
タプルの各値を関数に適用した結果で並べ直す	sorted(aTuple, key=func)
option: グラフの色をライトコーラルにする	color = 'lightcoral'
n2行n列の２次元リスト	[[0] * n for _ in range(n2)]
一点鎖線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
縦にデータフレームを連結する	pd.concat([df, df2], axis=0)
マッピングに別の辞書の項目を追加する	aDict.update(aDict2)
二つのオブジェクトが同じ参照かどうか調べる	obj is obj2
リストの末尾にリストを追加して広げる	aList.extend(aList2)
折れ線グラフの上三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
スタッキングとして回帰分析をする	sklearn.ensemble.StackingRegressor()
option: 青紫色を使用する	color = 'violet'
数字を全部求める	string.digits
データシリーズの分位数	ds.quantile(パーセント/100)
等差数列をベクトルに変換する	np.arange(開始値, 終了値, 等差)
データフレームをCSV形式として保存する	df.to_csv('file.csv')
実数を実数で除算して、切り捨てる	x // y
ヒストグラムの色をダークゴールデンロッドに指定する	plt.hist(データ列, color='darkgoldenrod')
二つの集合がセットと互いに素か調べる	aSet.isdisjoint(aSet2)
オブジェクトからプロパティを消す	delattr(obj, プロパティ名)
option: ダークグレーにグラフの色を変更する	color = 'darkgrey'
データ列とイテラブルの散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
線グラフの色をスカイブルーに変更する	plt.plot(データ列x, データ列y, color='skyblue')
線グラフの色を紺に指定する	plt.plot(データ列x, データ列y, color='darkblue')
横棒グラフの色をrgbにセットする	plt.barh(ラベル列, データ列, color=rgb)
縦棒グラフをプロットして、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
文字列の右側から余分な空白を除く	s.rstrip()
データシリーズの不偏分散を求める	ds.var(ddof=1)
ベクトルの分散	np.var(aArray)
折れ線グラフの色をミスティローズにする	plt.plot(データ列x, データ列y, color='mistyrose')
文字列リストを結合する	''.join(aStringList)
タプルをn回、結合する	aTuple * n
データフレームのある列の空文字をドロップする	df['列A'].replace('', np.nan).dropna()
ヒストグラムの色をダークスラテグレーにセットする	plt.hist(データ列, color='darkslategray')
横棒グラフをスラグレー色を使って描画する	plt.barh(データ列x, データ列y, color='slategrey')
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
文字列を最後の部分文字列で分けたときの残りの文字列を使う	s.rpartition(sub)[-1]
二進対数を算出する	math.log2(x)
乱数の配列を作成する	np.random.random(N)
文字列の最初から部分文字列を探す	s.find(sub)
今日の日数を使う	datetime.datetime.today().day
二つのリストをスラッシュで区切ってプリントする	print(value, value2, sep='/')
option: フォントの色を貝殻にセットする	color = 'seashell'
リストの各値を関数に適用した結果でソートする	sorted(aList, key=func)
菱形印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
オーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
データフレームからランダムに取り出す	df.sample()
黒い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームをグループ化し、各分散を計算する	df.groupby('列A').var()
線グラフの色をロージーブラウンに変更する	plt.plot(データ列x, データ列y, color='rosybrown')
日付時刻データをISO形式の文字列にする	aDatetime.isoformat()
日付を表現した文字列をdatetime64型に変換する	pd.to_datetime(日付を表現した文字列)
データシリーズの未入力値を最大値に設定する	ds.fillna(ds.max())
散布図を赤い下三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
ダークシアグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
イテラブルを文字列リストに変換して、'改行でつなげる	'\n'.join(map(str, iterable))
暗くカラーパレットをプロットの描画で使う	sns.set(pallete='dark')
rgbのポイントマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフに四角印を加える	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをシエナ色を用いて描画する	plt.barh(データ列x, データ列y, color='sienna')
option: フォントの色を青紫に設定する	color = 'violet'
データフレームの一部の列の標準偏差	df[['列A', '列B']].std()
リストの最後からn番目以前の部分を抽出する	aList[:-n]
指定した列の欠損値を直前の値に指定する	df['列A'].fillna(method='ffill')
リストと配列についての散布図に赤いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
ファイルパスを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
黒いダイアモンドマーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
オブジェクトが集合か調べる	isinstance(obj, set)
空のスタック	collections.deque()
オリベドラブ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
データフレームの指定したカラムのNaNを最大値に設定する	df['列A'].fillna(df['列A'].max())
option: 左三角マーカーを加える	marker = '<'
データフレームのカテゴリデータをワンホット・ベクトルに変換する	pd.get_dummies(df)
折れ線グラフの左三角印を黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
横棒グラフをグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='gray')
シーケンスをカウンタにする	collections.Counter(iterable)
データ列の変遷を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
散布図をダーク・スラテグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
折れ線グラフの色をライトイエローにセットする	plt.plot(データ列x, データ列y, color='lightyellow')
リストの平均を算出する	sum(aList)/len(aList)
nでシードを固定化する	random.seed(n)
ダークターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
グレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
下線付きで値をプリントする	print(f'\033[4m{value}\033[0m')
四角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームの一部のカラムの空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
データフレームの欠損値を前の行の値に指定する	df.fillna(method='ffill')
有理数モジュールを用いる	import fractions
集合をイミュータブルな集合に変換する	frozenset(aSet)
新しいガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
数列のスピアマンの相関係数を算出する	scipy.stats.spearmanr(数列, 数列2)
タプルの要素を昇順に並べる	sorted(aTuple, reverse=True)
中央値で配列をビン分割する	pd.qcut(aArray, 2)
ダークバイオレット色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
散布図に星印を使用する	plt.scatter(データ列x, データ列y, marker='*')
折れ線グラフの四角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
折れ線グラフのポイント印の大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
縦棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
散布図をフローラルホワイト色を使って描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
表データをグループ化し、最小値を計算する	df.groupby('列A').min()
散布図にrgbの左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
訓練データとして重回帰モデルを学習する	model.fit(説明変数, 目的変数)
option: コーンズシルクにグラフの色を変更する	color = 'cornsilk'
等間隔のベクトル	np.arange(開始値, 終了値, 等差)
option: グラフの色をハニーデューに指定する	color = 'honeydew'
option: ダークマゼンタ色を用いる	color = 'darkmagenta'
データ列のUNIX秒を日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
縦棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
シーケンスとイテラブルをつなぐ	itertools.chain(iterable, iterable2)
ダークバイオレットにヒストグラムの色をセットする	plt.hist(データ列, color='darkviolet')
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightseagreen')
円プロットにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
変数がマイナス無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, -oo)
JSONファイルの入力を読み込んで、dataとする	data = json.load(fin)
線グラフの色をミディアムスレートブルーに指定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
線グラフをダークオリーブグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ファイルをBOM付きとして書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
データフレームの選択したカラムがどの程度正規分布から歪んでいるか見る	df[['列A', '列B']].kurt()
オブジェクトがリスト	isinstance(obj, list)
淡いピンク色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
縦棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
折れ線グラフのクロスマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
文字列を最後の部分文字列で分割したときの前半の文字列を取り出す	s.rpartition(sub)[0]
データシリーズの未入力値を平均値に変更する	ds.fillna(ds.mean())
散布図をrgbの△マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの一部のカラムの未入力値を最大値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
option: グラフの色をダークカーキに指定する	color = 'darkkhaki'
文字列が全て大文字か	s.isupper()
nからn2までの一つ置きの整数列	list(range(n, n2+1, 2))
option: 色をシャルトリューズに変更する	color = 'chartreuse'
折れ線グラフのマーカーを菱形印にする	plt.plot(データ列x, データ列y, marker='D')
タイムスタンプデータをn日前に戻す	aDatetime - datetime.timedelta(days=n)
縦棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
部分文字列で文字列を二分する	s.partition(sub)
散布図に黒い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
配列の各要素の最小公倍数	np.lcm(aArray, aArray2)
棒グラフを珊瑚色で描画する	plt.bar(データ列x, データ列y, color='coral')
SJISで文字列をバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
ライトコーラル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
ヒストグラムの色をタンにセットする	plt.hist(データ列, color='tan')
ラベンダー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
データフレームの指定した名前リストの列を選択する	df[columns]
散布図に丸印を使う	plt.scatter(データ列x, データ列y, marker='o')
散布図に黒いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
ファイルをオープンして]、読み込みストリームを見る	open(filepath, mode='r')
散布図を星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightgreen')
折れ線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
スケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
文字列の示すエンコーディングを使ってファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
option: 欠損値を先頭に来るようにする	na_position = 'first'
散布図をダークオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='darkorange')
option: 白にグラフの色を設定する	color = 'white'
散布図を白色を用いて描画する	plt.scatter(データ列x, データ列y, color='white')
折れ線グラフの星印を赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
折れ線グラフをシスル色として描画する	plt.plot(データ列x, データ列y, color='thistle')
連番の配列の自動作成する	np.arange(開始値, 終了値, 等差)
option: 列名をリストで設定する	names = 列名リスト
データフレームから数値データだけ取り出す	df.select_dtypes('number')
上限nのキューを生成する	collections.deque(maxlen=n)
ライトサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
グラフの目的をポスターに変更する	sns.set(context='poster')
散布図をライトブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightblue')
棒グラフをライムグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='limegreen')
ヒストグラムの色を黄色に変更する	plt.hist(データ列, color='yellow')
線グラフをダークオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorchid')
option: オレンジを使う	color = 'orange'
両端キューの最後にイテラブルの各要素を入れる	deq.extend(iterable)
配列と配列についての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
既存のファイルパスを文字列の示すエンコーディングを使って追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
シアン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
ある列の標本標準偏差	df['列A'].std(ddof=1)
あるカラムの値がxより大きく、yより小さい行を抽出する	df[(x < df['列A']) & (df['列A'] < y)]
ネイビー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
大文字と小文字を交換する	s.swapcase()
一点鎖線で配列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフの色を深紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
リストとリストの散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
ランタイムの再帰の最大回数	sys.getrecursionlimit()
ふたつの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
ナバホホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
文字列の中で正規表現にマッチした全文字列をリストにする	re.findall(pattern, s)
ダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D')
option: 真紅にグラフの色を設定する	color = 'crimson'
ファイルからフォルダ名取り出す	os.path.dirname(filepath)
グリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
option: タブを分割記号で使う	sep = '\t'
リネン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
option: 大バツマーカーを加える	marker = 'X'
データシリーズの未入力値をxに指定する	ds.fillna(x)
xが一桁の正の整数かどうか確認する	0 <= x <= 9
散布図の四角印を青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
横棒グラフをペールグリーン色として描画する	plt.barh(データ列x, データ列y, color='palegreen')
ライム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
空の階層化辞書	collections.ChainMap()
折れ線グラフを色付きの点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ヒストグラムをダークサーモン色を使って描画する	plt.hist(データ列, color='darksalmon')
option: グラフの色を青紫に変更する	color = 'violet'
option: ミントクリーム色を使用する	color = 'mintcream'
タイムスタンプデータの時間を使う	aDatetime.time()
折れ線グラフの色をイエローグリーンに変更する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームの指定したカラムのNaNを前の値にセットする	df['列A'].fillna(method='ffill')
データフレームのある列を選ぶ	df['列A']
option: グラフの色をネイビーにセットする	color = 'navy'
折れ線グラフを半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
リストの要素をスタックの末尾に追加する	deq.extend(iterable)
xを整数にする	int(x)
データフレームの指定したカラムの欠損値をモードに指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
xの小数点以下'5'桁までの文字列にする	':.5f'.format(x)
実数が有限	math.isfinite(x)
ふたつの辞書をマージする	aDict | aDict2
線形回帰モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
こんにちは世界をプリントする	print('Hello World')
線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
option: エラーを無視するようにセットする	errors = 'ignore'
ロバストな重回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
ファイルパスがない	not os.path.exists(filepath)
option: タンを使う	color = 'tan'
多次元データをt分布型確率的近傍埋め込み法で濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
データフレームを一度に四捨五入する	df.round()
ゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
▲印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームの未入力値をメディアンで補完する	df.fillna(df.median())
リストを並べる	sorted(aList)
option: グラフの色をサンディーブラウンに指定する	color = 'sandybrown'
二つの値を順にプリントする	print(value, value2)
データフレームの列を散布図でプロット化する	sns.scatterplot(data=df, x='列名', y='列名')
データフレームの全列を散布図としてプロット化する	sns.pairplot(df)
をモジュールを検索するパスに追加する	sys.path.append(dir)
三数の最小値	min(x, y, z)
折れ線グラフに大バツ印を使う	plt.plot(データ列x, データ列y, marker='X')
データフレームの相関行列を求める	df.corr()
線グラフをアクア色を用いて描画する	plt.plot(データ列x, データ列y, color='aqua')
データフレームを指定したカラムによってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
実数が正の数かどうか調べる	x > 0
日付時刻データが水曜日か確認する	aDatetime.weekday() == 2
ヒストグラムをディムグレー色として描画する	plt.hist(データ列, color='dimgrey')
文字列が文字列より辞書順で後か確認する	s > s2
黒い▼印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
カンマ区切りのファイルのn行目をインデックスにして読む	pd.read_csv('file.csv', index_col=n)
データフレームを指定したカラムによってまとめた表	df.groupby('列A')
配列と配列について散布図を描いて、その大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
行列の行ごとの最小値を算出する	np.min(aArray, axis=1)
日付データが火曜日か判定する	aDate.weekday() == 1
データ列の各データ値の出現数を算出する	ds.value_counts()
折れ線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
赤い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
線形のクラス分類を行う	model = sklearn.linear_model.LogisticRegression()
浮動小数点数のn乗して実数による余り	pow(x, n, y)
文字列をコロンで区切って文字列リストにする	s.split(':')
折れ線グラフのバツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
文字列の左側から空白を取り除く	s.lstrip()
浮動小数点数の符号を同じにする	math.copysign(x, x2)
二つの浮動小数点数が十分に近いかどうか調べる	math.isclose(x, x2)
線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
オブジェクトは文字列クラスのインスタンスか調べる	isinstance(obj, str)
カラムの尖度	df['列A'].skew()
rgbの▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの末尾100行を取り出す	df.tail(100)
双方向キューの先頭に列の値を入れる	deq.extendleft(iterable)
ゴーストホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
サドルブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
グリッド線をグラフから消す	plt.grid(False)
散布図の印を下三角にする	plt.scatter(データ列x, データ列y, marker='v')
今日の日付時刻	datetime.datetime.now()
棒グラフをインディアンレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='indianred')
ヒストグラムの色をミッドナイトブルーに変更する	plt.hist(データ列, color='midnightblue')
線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: グラフの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
既にロードされたモジュールの一覧	sys.modules
指定したカラムがどの程度正規分布から尖っているか調べる	df['列A'].skew()
データフレームの選択したカラムの記述統計量	df[['列A', '列B']].describe()
タプル中の文字列が最初に見つかる位置	aTuple.index(element)
データ列をn個に等間隔でビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
ファイルからディレクトリ名を求める	os.path.dirname(filepath)
棒グラフをカデットブルー色として描画する	plt.bar(データ列x, データ列y, color='cadetblue')
散布図の星印の太さを変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
文字列の右側から部分文字列を除く	s.rstrip(sub)
２つの数値をコロンで区切って表示する	print(value, value2, sep=':')
データフレームの文字列をNaNに変換する	df.replace(値, np.nan)
線グラフの色をハニーデューに変更する	plt.plot(データ列x, データ列y, color='honeydew')
行列の列ごとの合計値を計算する	np.sum(aArray, axis=0)
ミディアムシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
散布図をシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='cyan')
データフレームの一部のカラムの中に文字列があるかテストする	df[['列A', '列B']].isin([value])
横棒グラフをミディアムアクアマリン色を使って描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
線グラフをインディアンレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='indianred')
分子n分母mの分数を作る	fractions.Fraction(numerator=n, denominator=m)
option: グラフの色をビスクに指定する	color = 'bisque'
オブジェクトは組に含まれるか調べる	element in aTuple
データフレームのあるカラムの曜日が何日目か調べる	df['列A'].dt.dayofweek
ヒストグラムの描画し、正規化する	plt.hist(データ列, density=True)
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategray'
青い破線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームから１つの列を抽出する	df[['列A']]
折れ線グラフをペルー色を用いて描画する	plt.plot(データ列x, データ列y, color='peru')
CSVファイルにデータフレームをSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
option: フォントの色をディムグレーに設定する	color = 'dimgray'
データフレームのあるカラムの中に含まれる文字列の合計を数える	df['列A'].isin([value]).sum()
文字列中の部分文字列を文字列に全部置き換える	s.replace(sub, newsub)
文字列全体が正規表現にASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
原点から(実数,y)の距離を求める	math.hypot(x, y)
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームをある列のカテゴリでグループ分けして、それぞれのグループごとの件数を知る	df.groupby('列A').size()
データラベルの位置を指定する	plt.legend(loc=(x, y))
数列とリストについて散布図を描いて、▼マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データ列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
10を底とする対数を計算する	math.log10(x)
n個にデータフレームの中のカラムを等間隔で分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの中の列を等間隔でn個にビニングする	pd.cut(df[col], n)
縦棒グラフをプロットして中央寄せする	plt.bar(ラベル列, データ列, align='center')
文字列中に部分文字列が存在しないか確認する	sub not in s
線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
最適な位置に補足を表示する	plt.legend(loc='best')
データ列の折れ線グラフをダイアモンドマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='D')
ラベル付きの円プロットを描く	plt.pie(データ列, startangle=90, labels=ラベル列)
平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
ミディアムスプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
オリベドラブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
大量のデータが正規分布か調べる	scipy.stats.kstest(df['列A'], 'norm')
ふたつの列からグループ化し個数を計算する	df.groupby(['列A', '列B'], as_index=False).count()
K-S検定を行う	scipy.stats.kstest(df['列A'], 'norm')
文字列がリストの要素か	element in aList
文字列中に部分文字列があるか調べる	sub in s
ある列の文字列が部分文字列で終わるデータを取り出す	df[df['列A'].str.endswith(部分文字列)]
数列の変化を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
散布図に黒い▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
散布図をインディアンレッド色として描画する	plt.scatter(データ列x, データ列y, color='indianred')
青い破線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
折れ線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
折れ線グラフの色をパウダーブルーにセットする	plt.plot(データ列x, データ列y, color='powderblue')
バイアスなしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
文字列は文字列より辞書順で前	s < s2
指定の列に重複があれば、ドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
要素をデックの最後から取り除く	deq.pop()
文字列の大きさ	len(s)
折れ線グラフを濃い青色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
黒い菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフの色をパールゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
ライトブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
ダークカーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: グラフの色をリネンに指定する	color = 'linen'
nが5の倍数か判定する	n % 5 == 0
配列を分割数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
全部ValueMapでデータシリーズの値を置き換える	ds.replace(ValueMap)
option: グラフの色をベージュに指定する	color = 'beige'
ミディアムスレートブルー色を使ってヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
異なる列をキーにして２つのデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
ヒストグラムをマルーン色を用いて描画する	plt.hist(データ列, color='maroon')
淡いピンク色色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
option: グラフの色をグリーンに指定する	color = 'green'
四角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
文字列リストをひとつの文字列にする	''.join(map(str, iterable))
日付データの日数を使う	aDate.day
横棒グラフを珊瑚色を用いて描画する	plt.barh(データ列x, データ列y, color='coral')
シーケンス自身を2回あわせた直積	itertools.product(iterable, repeat=2)
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
ダークマゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
縦棒グラフをビスク色を用いて描画する	plt.bar(データ列x, データ列y, color='bisque')
リストと配列の散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
あるカラムの中央値を求める	df['列A'].median()
パールバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
縦棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
浮動小数点数を切り下げて整数に変換する	math.floor(x)
ドジャーブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
行列の形	aArray.shape
option: 色をグリーンイエローに設定する	color = 'greenyellow'
箱ひげ図を描画して、平均線を追加する	plt.boxplot(データ列, meanline=True)
横棒グラフをカーキ色として描画する	plt.barh(データ列x, データ列y, color='khaki')
文字化けしないようにExcelファイルファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
横棒グラフを白色を使って描画する	plt.barh(データ列x, データ列y, color='white')
ラインを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
表データのある列をダミー変数にする	pd.get_dummies(df['列A'])
ブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
散布図をrgbのクロスマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの一部のカラムの中の欠損値の合計を数える	df[['列A', '列B']].isna().sum()
こんにちは世界とプリントする	print('Hello World')
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
勾配ブースティングを用いてクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
日付データは何日か知る	aDate.day
散布図を黒い丸マーカーで描く	plt.plot(データ列x, データ列y, marker='o', c='k')
データを最大値と最小値を用いて正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ヒストグラムを上限から下限の範囲で描画する	plt.hist(データ列, range=(start, end))
ヒートマップでクラス分類の偽陽性を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
両端キューの中に数値が存在するか調べる	element in deq
ヒストグラムをカラーマップを用いて描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
数を実数で除算する	x / y
ヒストグラムを珊瑚色として描画する	plt.hist(データ列, color='coral')
データを最大値を用いて正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
タプルの内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
複数の列でグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
平均値付き箱ひげ図を描く	plt.boxplot(データ列, showmeans=True)
コロンで文字列を分割して、文字列リストに変換する	s.split(':')
ファイルをオープンして]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
option: 黄緑色を用いる	color = 'chartreuse'
大バツ印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
折れ線グラフをアンティークホワイト色を使って描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
プロットのタイトルを設定する	plt.title('グラフの名称')
nが正の整数かどうか確認する	n > 0
option: ▽印を使う	marker = 'v'
リストをカウントして、カウンタを更新する	aCounter.update(iterable)
オブジェクトの無限列	itertools.repeat(element)
折れ線グラフを小麦色色を用いて描画する	plt.plot(データ列x, データ列y, color='wheat')
書式を辞書で文字列整形する	formatText.format_map(aDict)
t-SNEで多次元データをパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
横棒グラフをコーンズシルク色を用いて描画する	plt.barh(データ列x, データ列y, color='cornsilk')
一番右側の列を外したデータフレームを使う	df[df.columns[:-1]]
一度にデータフレームの選択した列の値をValueMapで置き換える	df[['列A', '列B']].replace(ValueMap)
▲マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='^')
エンコーディングを用いて文字列をバイト列にする	s.encode(encoding=encoding)
散布図をミディアムスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
棒グラフを青紫色を用いて描画する	plt.bar(データ列x, データ列y, color='violet')
データフレームを異なる列をキーとして左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
ライトイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
折れ線グラフの四角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
タプルの要素を並べ変える	sorted(aTuple)
黒い上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
組の先頭	aTuple[0]
0からnまでの整数リスト	list(range(n+1))
データシリーズを10の位で四捨五入して、整数にする	ds.round(-1).astype(int)
線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
赤いダイアモンドマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
データシリーズの値を正規表現patternでまとめてreplに変更する	ds.replace(pattern, repl, regex=True)
aListn番目から値を捨てる	aList.pop(n)
グリッドの線スタイルを破線に変更する	plt.grid(linestyle='dashed')
option: 文字列をセパレータで使用する	sep = s
ブルーバイオレット色としてヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
データシリーズを四捨五入して、整数型にする	ds.round().astype(int)
教師データで分類モデルを学習する	model.fit(説明変数, 目的変数)
データフレームをソートして、下位を取り出す	df.sort_values('キーとなる列').tail(n)
データフレームのNaNがある部分に色を付ける	df.style.highlight_null()
データフレームを２つのカラムによって並べる	df.sort_values(by=['列A', '列B'])
日付時刻データは日付時刻データと同時か調べる	aDatetime == aDatetime2
辞書上で項目名が定義済みか調べる	key in aDict
リストと配列についての散布図にrgbのバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ライトグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
TSVファイルファイル名がか	filename.endswith('.tsv')
option: ホットピンク色を用いる	color = 'hotpink'
nを二進数表現にする	bin(n)
データシリーズが正規分布からどの程度、尖っているか調べる	ds.skew()
最初のカテゴリーを除外してデータフレームのある列をダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
縦方向に２つのデータフレームを結合する	pd.concat([df, df2], axis=0)
リストを縦棒グラフにする	plt.bar(ラベル列, データ列)
カテゴリデータ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
オブジェクトにフィールドが存在するか	hasattr(obj, プロパティ名)
疑似乱数を算出する	random.random()
データフレームの指定したカラムの母標準偏差を求める	df['列A'].std(ddof=0)
ロバストな線形分類器を新規作成する	model = sklearn.linear_model.HuberClassifier()
option: グラフの色をオレンジに変更する	color = 'orange'
折れ線グラフのダイアモンド印の線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
横棒グラフを青緑色として描画する	plt.barh(データ列x, データ列y, color='turquoise')
option: ダークサーモンを使う	color = 'darksalmon'
nはn2	n == n2
option: フォレストグリーン色を用いる	color = 'forestgreen'
プロットの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
ベクトルの内積を計算する	np.dot(aArray, aArray2)
二つのデータフレームを異なる列をキーとして右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
option: フローラルホワイトにグラフの色をする	color = 'floralwhite'
データフレームの指定したカラムのメディアン	df['列A'].median()
オブジェクトがある型のインスタンスかどうか調べる	isinstance(obj, クラス)
縦棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
縦棒グラフを暗い赤色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
散布図に赤い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ライトゴールドロディイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
ミッドナイトブルー色としてヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
珊瑚色で散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
タイムスタンプデータと日付時刻データの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
データフレームの指定した列の中に文字列と文字列が含まれるか調べる	df['列A'].isin([value, value2])
リストの要素を昇順に並べ直す	sorted(aList, reverse=True)
日付データからn週間を減算する	aDate - datetime.timedelta(weeks=n)
ヒストグラムとしてイテラブルを作図する	plt.hist(データ列)
option: ブラウンを用いる	color = 'brown'
書き込みできるようにファイルをオープンする]	open(filepath, mode='w')
option: フローラルホワイトにグラフの色を設定する	color = 'floralwhite'
要素が全て初期値のベクトル	np.full(要素数, 初期値, dtype=np.int)
ヒストグラムの色をベージュにする	plt.hist(データ列, color='beige')
データフレームから指定した二列を抽出する	df[['列A', '列B']]
カウンタの項目一覧を見る	aCounter.keys()
文字列の最初から不要な空白やタブを除く	s.lstrip()
データフレームの選択したカラムの中に日付データと文字列があるか調べる	df[['列A', '列B']].isin([value, value2])
ベクトルの平均値	np.mean(aArray)
疑似乱数を正規分布として算出する	random.normalvariate(mu=0.5, sigma=0.2)
nが3の倍数か	n % 3 == 0
文字列の開始位置以降が部分文字列で始まる	s.startswith(sub, start)
黒い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
パパイヤウィップにヒストグラムの色を設定する	plt.hist(データ列, color='papayawhip')
折れ線グラフをダークシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームをある列によって昇順に並べ直して、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
文字列が数字かどうか	s.isdigit()
option: ロージーブラウン色を用いる	color = 'rosybrown'
データ列と配列の散布図を描画し、マーカーを下三角に指定する	plt.plot(データ列x, データ列y, marker='v')
データフレームの一部のカラムをValueMapでまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
回帰分析をサポートベクターマシンでする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフの色をライトゴールドロディイエローにセットする	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
黒い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
散布図の大バツマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データフレームの列間の相関をまとめて求める	df.corr()
option: パープルを使用する	color = 'purple'
二つの集合の差集合を求める	aSet.difference(aSet2)
線グラフの色をマゼンタにセットする	plt.plot(データ列x, データ列y, color='magenta')
折れ線グラフの色をカラーコードを用いて指定する	plt.plot(データ列x, データ列y, color='#800080')
小数点数の常用対数	math.log10(x)
ヒストグラムをダーク・スラテグレー色として描画する	plt.hist(データ列, color='darkslategrey')
折れ線グラフの色をミッドナイトブルーにする	plt.plot(データ列x, データ列y, color='midnightblue')
特異値分解で淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
ライトスカイブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
タプル内の要素が少なくともひとつ真か	any(aTuple)
リストとリストの散布図を描画してマーカーを菱形に変更する	plt.plot(データ列x, データ列y, marker='D')
分類モデルのリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
実数の絶対値を求める	math.fabs(x)
小数点以下をn桁に指定する	pd.set_option('precision', n)
L1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
プロットに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
option: 色を白に設定する	color = 'white'
今日の曜日を整数で見る	datetime.datetime.today().weekday()
データフレームの列の中に存在する文字列と日付データの数を調べる	df['列A'].isin([value, value2]).sum()
折れ線グラフをコーラル色を使って描画する	plt.plot(データ列x, データ列y, color='coral')
タプルの要素を小さい順に並べる	sorted(aTuple, reverse=True)
線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
整数nの二進数文字列を使う	bin(n)[2:]
折れ線グラフに赤いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
文字列中に部分文字列が含まれないかテストする	sub not in s
データフレームから重複した行を残さず取り除く	df.drop_duplicates(keep=False)
プロットを使う準備をする	import matplotlib.pyplot as plt
紺色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
リストから文字列を捨てる	aList.remove(element)
文字列の右側からタブを消す	s.rstrip('\t')
２つの文字列は等しくないか調べる	s != s2
折れ線グラフをダークオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームの列からユニークな値を抽出し、リスト化する	df[col].unique().tolist()
option: 列の名前をリストで設定する	names = 列名リスト
スタックに要素をエンキューする	deq.appendleft(element)
ディムグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
Excelファイルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
作画を正方形にする	plt.axis('equals')
アクアマリンにヒストグラムの色を変更する	plt.hist(データ列, color='aquamarine')
数式のパラメータについてのn階微分を計算する	sympy.diff(e, z, n)
ダークバイオレット色としてヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
現在のUNIX時間	int(time.time())
グラフの横軸を対数目盛に変更する	plt.xscale('log')
マップから項目名の値か、もしくは要素を見る	aDict.get(key, element)
デックをクリアする	deq.clear()
二次元リストの転置行列を調べる	[list(x) for x in list(zip(*aList))]
線グラフをスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='skyblue')
option: マーカーの色を濃い青にする	markerfacecolor = 'darkblue'
データシリーズの分を使う	ds.dt.minute
t分布型確率的近傍埋め込み法を行う	model = sklearn.manifold.TSNE(n_components=n)
option: ゲインズボロ色を使用する	color = 'gainsboro'
データフレームの指定したカラムを十の位で四捨五入して、整数型にする	df['列A'].round(-1).astype(int)
実数を十六進文字列に変換する	x.hex()
二つの列の値によってデータフレームをグループ化する	df.groupby(['列A', '列B'])
線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
特異値分解を使って多次元データを淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
タイムスタンプデータが水曜日	aDatetime.weekday() == 2
配列の要素ごとの最大公約数を算出する	np.gcd(aArray, aArray2)
文字列はリストの要素か確認する	element in aList
ヒストグラムの色をダークバイオレットに変更する	plt.hist(データ列, color='darkviolet')
文字列を二つに分ける	s.partition(sep)
配列をビン数nでビニングし、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ミッドナイトブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
縦棒グラフをプロットし、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
正規表現によって文字列を置換する	re.sub(pattern, newsub, s)
データフレームのあるカラムの曜日名	df['列A'].dt.weekday_name
複数の列からグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
ゲインズボロ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
横棒グラフをサドルブラウン色として描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
ゼロ埋めした行列を作る	np.zeros(要素数)
ハローワールドと出力する	print('Hello World')
データ列の折れ線グラフを左三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームの標本分散を求める	df.var(ddof=0)
option: 箱ヒゲ図を水平方向にする	vert = False
折れ線グラフを暗い赤色を使って描画する	plt.plot(データ列x, データ列y, color='darkred')
既存のファイルを文字列の示すエンコーディングを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
空白で文字列を区切る	s.split()
2つの実行結果を文字列で区切ってプリントする	print(value, value2, sep=s)
折れ線グラフを青紫色を用いて描画する	plt.plot(データ列x, データ列y, color='violet')
option: チョコレートを使う	color = 'chocolate'
ベージュ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
option: 無視する列番号をnamesで指定する	skiprows = names
ライトグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
再帰が何回までできるかを	sys.getrecursionlimit()
ペルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
散布図の▲マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ペルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
オブジェクトがリストかタプルか調べる	isinstance(obj, (list)
配列の累積和を求める	np.cumsum(aArray)
線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
マッピングをコピーする	dict(aDict)
要素はマップの値に含まれていないか調べる	element not in aDict.values()
ある列の値がx以上y以下のデータを取り出す	df[(x <= df['列A']) & (df['列A'] <= y)]
正規分布にしたがって配列の値が発生する累積確率を求める	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
文字列の接尾辞が部分文字列かどうか調べる	s.endswith(sub)
線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
散布図に四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
データフレームのあるカラムは何年か知る	df['列A'].dt.year
黒い三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
n行をデータフレームからランダムに抽出する	df.sample(n)
折れ線グラフを青い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームの指定した列のパーセンタイルを計算する	df['列A'].quantile(パーセント/100)
ダークスレートブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
組は全て真	all(aTuple)
データフレームの列の各データ値の出現数を求める	df[col].value_counts()
データフレームのあるカラムをリストに変換する	df['列A'].values.tolist()
プロットにx=0の実線を設定する	plt.axvline(x=0, linestyle='solid')
整数乱数で要素を埋めた配列を作成する	np.random.randint(開始値, 終了値, N)
option: フォレストグリーンを使う	color = 'forestgreen'
日付時刻データが日付時刻データより前か	aDatetime < aDatetime2
全要素を０で初期化した行列を初期化する	np.zeros(行数, 列数)
散布図に青い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
配列の行ごとの合計	np.sum(aArray, axis=1)
ライトシアン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
要素がマップの値に含まれていないか調べる	element not in aDict.values()
折れ線グラフに青い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
リストとリストについて散布図を描画してバツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
行列の全要素の値を変更する	aArray[:, :] = 指定の値
日付時刻データの曜日を整数で求める	aDatetime.weekday()
正規表現をあらかじめASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
折れ線グラフの菱形印を青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
棒グラフをライトスチールブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
予測値とデータの離れ具合を描画する	sns.residplot(x='列名', y='列名', data=df)
ベージュにヒストグラムの色を設定する	plt.hist(データ列, color='beige')
option: データ型として3二ビット整数型を用いる	dtype = np.int16
アンサンブル学習を用いてクラス分類をする	sklearn.ensemble.VotingClassifier()
折れ線グラフの色を青緑にする	plt.plot(データ列x, データ列y, color='turquoise')
上位集合もしくは等しい	aSet > aSet2
二つの集合が集合と交わりを持たないかどうか調べる	aSet.isdisjoint(aSet2)
x座標の目盛の値を変更する	plt.xticks(目盛りの値リスト)
カウンタから最も頻出な項目の件数を求める	aCounter.most_common()[1]
マルーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
option: バリーウッドにグラフの色を設定する	color = 'burlywood'
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='gray')
出力ストリーム全体をリストに変換する	[s.strip() for s in f.readlines()]
ネイビー色でヒストグラムを描画する	plt.hist(データ列, color='navy')
散布図にポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
空のマップを新規生成する	{}
折れ線グラフのクロス印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
変数が無限大に近づく際の数式の極限値を算出する	sympy.limit(e, z, oo)
CSVのn行目をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
箱ひげ図を横に並べて描く	plt.boxplot([データ列, データ列])
指定したカラムのNaNを最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
タイムスタンプデータが何分か知る	aDatetime.minute
データ列とリストの散布図を描いて、マーカーを下三角に変更する	plt.plot(データ列x, データ列y, marker='v')
ラベル付きの円グラフをプロットする	plt.pie(データ列, startangle=90, labels=ラベル列)
データフレームをグループ化し、合計を計算する	df.groupby('列A').sum()
インディアンレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
配列とデータ列の散布図をプロットして、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: 改行を区切りで使う	sep = '\n'
黒い△マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
列をビン数nでビン分割する	pd.cut(ds, n)
単位正方行列を作る	np.identity(n)
主成分分析で多次元データを濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
nがn2よりも大きい	n > n2
配列とデータ列について散布図を描画し、、その大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
データシリーズの値を正規表現patternで全部置換する	ds.replace(pattern, repl, regex=True)
option: パープルにフォントの色を変更する	color = 'purple'
文字列を部分文字列で二つに分ける	s.partition(sub)
折れ線グラフの四角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
最後の列を除いたデータフレームを使う	df[df.columns[:-1]]
折れ線グラフに▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
year年month月day日を日付にする	datetime.date(year=year, month=month, day=day)
配列とイテラブルについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
行列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
横棒プロットを描画してラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
ピーチパフにヒストグラムの色を設定する	plt.hist(データ列, color='peachpuff')
浮動小数点数の逆正接	math.atan(x)
文字列が文字列より辞書順で後かどうか調べる	s > s2
配列のKurtosisを求める	scipy.stats.kurtosis(配列, bias=False)
実数の常用対数を求める	math.log10(x)
nからn2までの整数列を作る	list(range(n, n2+1))
新しいガウス過程分類器を作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
散布図の印を赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
空のロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
データフレームの一部の列の欠損値を直前の値に指定する	df[['列A', '列B']].fillna(method='ffill')
ヒストグラムの色をサドルブラウンに変更する	plt.hist(データ列, color='saddlebrown')
option: コーンフラワーブルーにフォントの色を変更する	color = 'cornflowerblue'
データフレームを整列して、行を振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
配列とデータ列について散布図を描画し、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
縦棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
CSVファイルをカラムの名前なしで読み込む	pd.read_csv('file.csv', header=None)
下三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
イテラブルとリストの散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
モデルの残差を計算する	目的変数 - model.predict(説明変数)
floatの最大値	sys.float_info.max
散布図に黒い▽印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
スレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
データフレームを複数の列によって小さい順に並べる	df.sort_values(by=['列A', '列B'], ascending=True)
オリーブ色でヒストグラムを描画する	plt.hist(データ列, color='olive')
多次元尺度構成法の準備をする	model = sklearn.manifold.MSD(n_components=n)
要素∉セット	element not in aSet
配列の内積を調べる	np.dot(aArray, aArray2)
スカイブルーにヒストグラムの色を変更する	plt.hist(データ列, color='skyblue')
option: パールバイオレットレッドを使う	color = 'palevioletred'
ある列の値がxに等しいデータを抽出する	df[df['列A'] == x]
データフレームの選択したカラムの欠損値をその中央値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
整数nが配列の一つ	n in aArray
カンマで区切って二つの文字列を出力する	print(value, value2, sep=',')
横棒グラフをスプリンググリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='springgreen')
リストとリストについての散布図に赤い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームの一部の列の中にいくつ欠損値があるかカウントする	df[['列A', '列B']].isna().sum()
実数の角度	math.degrees(x)
アクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
option: 黄色色を用いる	color = 'yellow'
指定したカラムの母標準偏差を求める	df['列A'].std(ddof=0)
２つの列としてグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
プロットにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
表計算ファイルファイルからSJISでCSVファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
option: ライトコーラルにグラフの色を設定する	color = 'lightcoral'
ガウス過程としてクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームの列間の相関行列を一度に計算する	df.corr()
散布図に青い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
値はキューの中に存在するかどうか調べる	element in deq
ある列のNaNを最大値に設定する	df['列A'].fillna(df['列A'].max())
文字列中の部分文字列を別の文字列に置き換える	s.replace(sub, newsub)
プラットホームがマックか調べる	sys.platform.startswith('darwin')
赤い丸マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
ヒストグラムの色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
ホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムの色をオーキッドに変更する	plt.hist(データ列, color='orchid')
数値をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
ヒストグラムの線種を実線に設定する	plt.hist(データ列, linestyle='solid')
ホットピンク色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
セットをリストに変換する	list(aSet)
マッピングのキーを列挙する	list(aDict)
二つのカウンタのいずれかに含まれる要素を求める	aCounter | aCounter2
リストのn番目のを使う	aList[n]
配列とリストについて散布図を描画し、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
リストとデータ列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
配列をリストを境界値としてビンニングする	pd.cut(aArray, aList)
折れ線グラフを▽マーカーとして描画する	plt.plot(データ列x, データ列y, marker='v')
ダークカーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
二つの集合は共通の要素を持たないかテストする	aSet.isdisjoint(aSet2)
xの小数点以下'5'桁までを表示する	print(':.5f'.format(x))
グリッドの線スタイルを一点鎖線に変更する	plt.grid(linestyle='dashbot')
日付時刻データをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
データフレームの一部のカラムの値を正規表現で全部replに変更する	df[['列A', '列B']].replace(pattern, repl, regex=True)
option: ライトグレー色を使用する	color = 'lightgray'
箱髭図を横方向にする	plt.boxplot(データ列, vert=False)
リストの散らばりを描画する	plt.scatter(データ列x, データ列y)
option: 深紅を使う	color = 'crimson'
欠損値が存在する行をドロップしてみる	df.dropna()
破壊的にデータフレームを降順に複数の列によってソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
散布図をロージーブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
rgbの右三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
棒グラフをライムグリーン色として描画する	plt.bar(データ列x, データ列y, color='limegreen')
ヒストグラムをライムグリーン色として描画する	plt.hist(データ列, color='limegreen')
カデットブルー色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
option: 先頭の列を行に設定する	index_col = 0
ひとつでも大文字が文字列内に含まれるか確認する	any(c.isupper() for c in s)
プロットを画面に設定する	sns.set(context='notebook')
実数のn乗して浮動小数点数による余りを求める	pow(x, n, y)
PLSで回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
横棒グラフを描き、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
文字列を最後の部分文字列で分割したときの前半の文字列を使う	s.rpartition(sub)[0]
行列の値を求める	aArray[行番号, 列番号]
赤い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
ロバストな線形分類器を用意する	model = sklearn.linear_model.HuberClassifier()
nが正の整数か調べる	n > 0
オブジェクトの属性の値	getattr(obj, プロパティ名)
グリーンイエローにヒストグラムの色をセットする	plt.hist(データ列, color='greenyellow')
散布図の▼マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
十六進数文字列を整数にする	int(s, 16)
横棒グラフをローングリーン色として描画する	plt.barh(データ列x, データ列y, color='lawngreen')
オプションで、出力先を標準エラーにセットする	file = sys.stderr
データフレームのあるカラムは何秒か調べる	df['列A'].dt.second
データフレームの一部のカラムの中にある文字列との合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
シエナにヒストグラムの色を設定する	plt.hist(データ列, color='sienna')
折れ線グラフを半透明の破線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
線グラフの色をフォレストグリーンに変更する	plt.plot(データ列x, データ列y, color='forestgreen')
文字列は全て十進数字かどうか調べる	s.isdecimal()
文字列を空白で分割し、、整数リストにする	map(int, s.split())
数列とリストの散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームの選択したカラムの不偏分散を求める	df[['列A', '列B']].var(ddof=1)
ミディアムオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
数が負の数	x < 0
option: グラフの色をライトスカイブルーにする	color = 'lightskyblue'
線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
折れ線グラフのポイントマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
色付きの破線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: パレットトルコイズを用いる	color = 'paleturquoise'
ヒストグラムの色をライトスカイブルーに変更する	plt.hist(データ列, color='lightskyblue')
データフレームの相関行列をスピアマン相関係数で計算する	df.corr(method='spearman')
ラベンダー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
フクシア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームの指定したカラムの分散を算出する	df['列A'].var()
文字列の右側から空白を除去する	s.rstrip(' ')
文字列が組に含まれないか調べる	element not in aTuple
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
折れ線グラフを色付きの一点鎖線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ファイル全体をリストに変換する	[s.strip() for s in f.readlines()]
シーケンスの長さを制限する	collections.deque(iterable, maxlen=n)
日付データが木曜日か	aDate.weekday() == 3
値を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
文字列の左端から部分文字列を見つける	s.find(sub)
アクア色として散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
青い実線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
year年を日付にする	datetime.date(year=year, month=1, day=1)
オブジェクトのプロパティの値をセットする	setattr(obj, プロパティ名, 値)
実数を実数で除した余り	x % y
データ列を指定した値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
データフレームの統計量	df.describe()
ヒストグラムをやわらかい青色で描画する	plt.hist(データ列, color='cornflowerblue')
右三角印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
折れ線グラフをダークスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
リストを三つ並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
縦棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
折れ線グラフを耐火レンガ色を使って描画する	plt.plot(データ列x, データ列y, color='firebrick')
散布図をラベンダー色として描画する	plt.scatter(データ列x, データ列y, color='lavender')
空のロバスト分類モデルを用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
option: 符号なし８ビット整数型を用いる	dtype = np.uint8
データ列の推移を赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
点線でヒストグラムを描く	plt.hist(データ列, linestyle='dotted')
ゼロ埋めされたベクトル	np.zeros(要素数)
最大値・最小値の範囲として一様な乱数を生成する	random.uniform(最小値, 最大値)
グラフの色を濃くする	sns.set(pallete='deep')
データフレームの一部のカラムの文字列をNaNに変換する	df[['列A', '列B']].replace(値, np.nan)
Pythonインタプリタの実行ファイルの絶対パスを知る	sys.executable
option: スカイブルーを使用する	color = 'skyblue'
option: 青紫に色を指定する	color = 'violet'
値を両端キューのn番目に挿入する	deq.insert(n, element)
タイムスタンプデータからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
双方向キューの長さを求める	len(deq)
線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
ローングリーン色でヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
標準正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x)
折れ線グラフの丸マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
データフレームを並べ直して、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
アイリスのデータセットからデータフレームをロードする	df = sns.load_dataset('iris')
イテラブルから新しい計数器を作る	collections.Counter(iterable)
文字列がタプルの要素	element in aTuple
両端キューから最初の文字列を削除する	deq.remove(element)
クロスマーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
イテラブルからn要素サンプリングする	random.sample(iterable, k=n)
ある列に重複があれば、消す	df.drop_duplicates(subset='列A', inplace=True)
文字列を走査し、パターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>')
ライトサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
日付時刻データとタイムスタンプデータの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
option: 印を左三角に変更する	marker = '<'
実数を実数から減ずる	x - y
ピーチパフ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
散布図に赤い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
文字列を日付データに変換する	pd.to_datetime(日付を表現した文字列)
ファイル全体を行単位で分割して読む	f.readlines()
分類モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
散布図の三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか	s.find(sub, start, end) == -1
散布図のマーカーを大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
nがn2未満またはn3以上か調べる	n < n2 or n >= n3
勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
折れ線グラフを下三角印を用いて描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームの列間の相関行列を全て求める	df.corr()
option: フォントの色をミディアムスレートブルーにセットする	color = 'mediumslateblue'
現在の秒数を使う	datetime.date.today().second
パレットトルコイズ色でヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
カテゴリ別で色分けしてデータフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
散布図に青いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
整数nがセットのどれかか確認する	n in aSet
データフレームのある列の値をValueMapで一度に置き換える	df['列A'].replace(ValueMap)
標準出力がパイプ	not sys.stdout.isatty()
CSVファイルとしてデータフレームを保存する	df.to_csv('file.csv')
３つのデータフレームを縦にくっつける	pd.concat([df, df2, df3], axis=0)
ヒストグラムの色をスカイブルーに指定する	plt.hist(データ列, color='skyblue')
部分的最小二乗法として回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
日付時刻データの時刻を使う	aDatetime.time()
淡いピンク色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
ファイル名がJSONファイルかどうか調べる	filename.endswith('.json')
入力から2つの文字列を読み込む	A, B = map(str, input().split())
リストと配列について散布図をプロットし、、マーカーを▽に指定する	plt.plot(データ列x, データ列y, marker='v')
n行を重複ありでランダムにデータフレームからサンプリングする	df.sample(n, replace=True)
バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x')
配列のユニークな値を要素とする配列	np.unique(aArray)
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
option: オレンジレッド色を用いる	color = 'orangered'
データラベルをプロットの表示する	plt.legend()
指定した列のカテゴリで集計し、それぞれの平均値を算出する	df.groupby('列A').mean()
プラットホームの名前を知る	sys.platform
上限指定をしたデータフレームのカラムの算術平均を使う	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
マゼンタで変数をプリントする	print(f'\033[35m{value}\033[0m')
マッピングの項目名を列挙する	list(aDict)
スーパーセットか調べる	aSet.issuperset(aSet2)
データフレームをある列でグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
データシリーズの欠損値を直後の値に増やす	ds.fillna(method='bfill')
実数を切り上げて整数にする	math.ceil(x)
表のシェイプを見る	df.shape
データフレームの選択したカラムの中にいくつ文字列があるか調べる	df[['列A', '列B']].isin([value]).sum()
浮動小数点数を十六進文字列に変換する	x.hex()
文字列中の片仮名をひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データフレームのあるカラムの日にち	df['列A'].dt.day
option: 印を星に設定する	marker = '*'
フクシア色としてヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
データフレームの最初の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
あるカラムの値がx以上、y以下のデータを選択する	df[(x <= df['列A']) & (df['列A'] <= y)]
リスト中の最初の文字列を探す	aList.index(element)
ベクトルの個数	aArray.size
文字列を左寄せする	s.ljust(文字列幅)
ヒストグラムの色をダークターコイズにセットする	plt.hist(データ列, color='darkturquoise')
両端キューの順番をn個分左にローテンションする	deq.rotate(-n)
縦棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
UNIX秒の列から日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
グリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
赤い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
ヒストグラムをミディアムブルー色を用いて描画する	plt.hist(データ列, color='mediumblue')
行列の標準偏差	np.std(aArray)
マッピングのコピーを作成する	aDict.copy()
データフレームの中のカラムをリストを境界値として分割する	pd.cut(df[col], aList)
データフレームの分位数を求める	df.quantile(パーセント/100)
データフレームの欠損値を後の値で埋める	df.fillna(method='bfill')
淡いピンク色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
イテラブルの各要素を順に双方向キューの先頭に追加する	deq.extendleft(iterable)
集合の濃度を求める	len(aSet)
nとn2の差を計算する	n - n2
データシリーズの値をValueMapで一度に置き換える	ds.replace(ValueMap)
文字列を部分文字列で分割したときの先頭の文字列	s.partition(sub)[0]
option: グラフの色をパールバイオレットレッドに変更する	color = 'palevioletred'
棒グラフを淡い茶色色として描画する	plt.bar(データ列x, データ列y, color='tan')
散布図に黒い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
正規分布による確率密度関数を使う	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
分子n、分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
タイムスタンプデータが日付時刻データより後ろ	aDatetime > aDatetime2
キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
データフレームのある列を破壊的にドロップする	df.drop('列A', axis=1, inplace=True)
列名を指定して2つのデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
項目名がマップ上で定義済みかどうか調べる	key in aDict
ヒストグラムの色をパパイヤウィップにセットする	plt.hist(データ列, color='papayawhip')
インディゴにヒストグラムの色を指定する	plt.hist(データ列, color='indigo')
シスル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
逆行列	np.linalg.inv(aArray)
ラベンダーにヒストグラムの色を指定する	plt.hist(データ列, color='lavender')
黒いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
ひとつでも非空白が文字列中にあるか調べる	any(not c.isspace() for c in s)
データフレームを指定した列によってソートする	df.sort_values(by='列A')
四分位数で配列をビン分割する	pd.qcut(aArray, 4)
ミディアムアクアマリン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ダークシアン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
タイムスタンプデータが日付時刻データより先か	aDatetime < aDatetime2
パパイヤウィップ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
二進文字列をbytesizeバイトのバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
nullに等しい識別子	None
キーが辞書に存在するか確認する	key in aDict
折れ線グラフを青い実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
二つの文字列は同じか	s == s2
データフレームの中の列を中央値で分割する	pd.qcut(df[col], 2)
エクセルファイルファイルを文字化けしないように読み込む	pd.read_csv('file.csv', encoding='shift_jis')
ファイルを開いて]、書き込みストリームを使う	open(filepath, mode='w')
データフレームをグループ化し、標準偏差を算出する	df.groupby('列A').std()
棒グラフをサンディーブラウン色として描画する	plt.bar(データ列x, データ列y, color='sandybrown')
回帰モデルをクロスバリデーションする	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
nが正の整数	n > 0
カテゴリでグループ化してカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図を赤い▽マーカーとして描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ファイルを開いて]、読み込みストリームを求める	open(filepath, mode='r')
option: グラフの色をダークシアグリーンに変更する	color = 'darkseagreen'
データフレームのヒストグラムを横に並べて、描画する	sns.displot(df, x='列名', col='カテゴリ名')
エポック秒のデータ列からdatetime64型にする	pd.to_datetime(ds, unit='s', utc=True)
整数nを2進数表現にする	bin(n)
行列を縦ベクトルに変形する	aArray.reshape(-1, 1)
異なる列をキーとして２つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
ダークスレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='darkslateblue')
ファイルからストリームを読み込んで、fileとする	file = open(filepath)
ヒストグラムの色をブランチドアーモンドに指定する	plt.hist(データ列, color='blanchedalmond')
JSON文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
無限な数列を得る	itertools.count()
ある列の値がx以上y未満の行を選ぶ	df[(x <= df['列A']) & (df['列A'] < y)]
棒グラフをミッドナイトブルー色を使って描画する	plt.bar(データ列x, データ列y, color='midnightblue')
データフレームの指定したカラムのSkewnessを求める	df['列A'].skew()
TSVファイルファイル名がかどうか	filename.endswith('.tsv')
等量で配列を分割数nとして分割する	pd.qcut(aArray, n)
データフレームを表計算ファイルで保存する	df.to_excel('file.xlsx')
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()
リストと配列についての散布図に黒い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
option: 先頭の行をカラムの名前に設定する	header = 0
nで乱数生成系列を初期化する	random.seed(n)
文字コードの最大値を確認する	sys.maxunicode
線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフの色を淡いピンク色にセットする	plt.plot(データ列x, データ列y, color='lightpink')
データフレームのある列を取り出す	df['列A']
配列の標準誤差を計算する	scipy.stats.sem(配列)
散布図のバツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
組を引数として展開して出力する	print(*aTuple, sep=',')
リストとイテラブルの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームの一部の列の欠損値を中央値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
option: ラインを太くする	linewidth = 3.0
散布図の丸印を赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
option: 色を耐火レンガに指定する	color = 'firebrick'
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
数列をヒストグラムにする	plt.hist(データ列)
文字列をエラーを無視してバイト列に変換する	s.encode(errors='ignore')
リストをnから順序付けする	enumerate(aList, start=n)
文字列を日付データにする	pd.to_datetime(日付を表現した文字列)
散布図の三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
乱数平均値と標準偏差からを生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームをCSV形式にインデックスを付けず出力する	df.to_csv('file.csv', index=None)
option: ホットピンクを用いる	color = 'hotpink'
実数のcosの逆数を求める	math.acos(x)
時計回りに円プロットを描画する	plt.pie(データ列, startangle=90, counterclock=False)
日付時刻データにn週間分足す	aDatetime + datetime.timedelta(weeks=n)
実数を小数点以下で四捨五入する	round(x, n)
option: 未入力値を先頭にする	na_position = 'first'
ある列をドロップする	df.drop('列A', axis=1, inplace=True)
プログラムのファイルの名前を知る	sys.argv[0]
深紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
無限列	itertools.count()
棒グラフをブランチドアーモンド色として描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
エクセルファイルからすべてのシートを読む	pd.read_excel('file.xlsx', sheet_name=None)
縦棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
リストの最初の要素を求める	aList[0]
option: グラフの色をダークバイオレットに変更する	color = 'darkviolet'
ビン数nとしてリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列をコロンによって分割して列挙する	s.split(':')
nが無限に続く整数リストを得る	itertools.repeat(n)
折れ線グラフをシエナ色を使って描画する	plt.plot(データ列x, データ列y, color='sienna')
折れ線グラフの色をイエローグリーンにセットする	plt.plot(データ列x, データ列y, color='yellowgreen')
文字列が全て小文字か確認する	s.islower()
文字列の開始位置以降が部分文字列で始まるかどうか調べる	s.startswith(sub, start)
option: グラフの色をスラグレーにする	color = 'slategrey'
カウンタの最頻出の項目	aCounter.most_common()[0]
ライトイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
文字列中にひとつでも非大文字が含まれるかどうか確認する	any(not c.isupper() for c in s)
カウンタのキーと回数を列挙する	aCounter.items()
グラフにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
option: ロイヤルブルーにグラフの色を変更する	color = 'royalblue'
ベクトルの最大値	np.max(aArray)
折れ線グラフに赤い▽印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
カラムの欠損値を平均に設定する	df['列A'].fillna(df['列A'].mean())
データフレームのn行目を削除する	df.drop(n, axis=0, inplace=True)
横棒グラフをインディアンレッド色として描画する	plt.barh(データ列x, データ列y, color='indianred')
option: ダークシアン色を用いる	color = 'darkcyan'
option: マーカーを上三角に指定する	marker = '^'
プロットの凡例の位置を(x,y)に変更する	plt.legend(loc=(x, y))
タン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
数字を使う	string.digits
２つ並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
線グラフの色をライトイエローにする	plt.plot(データ列x, データ列y, color='lightyellow')
文字列中にひとつでも非英字が含まれる	any(not c.isalpha() for c in s)
余弦の逆数	math.acos(x)
ファイルを絶対ファイルパスに変換する	os.path.abspath(filepath)
折れ線グラフをミディアムスレートブルー色を使って描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
文字列中に部分文字列が含まれるか判定する	sub in s
散布図のクロス印を青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
数列と数列の散布図をプロットし、、マーカーを右三角にセットする	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムの線のスタイルを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
組の文字列が最初に見つかるインデックスを見る	aTuple.index(element)
線グラフをフローラルホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='floralwhite')
黒い右三角マーカーをリストとデータ列の散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
option: 読み込みモードに指定する	mode = 'r'
二つの数列を箱髭図にする	plt.boxplot([データ列, データ列])
ポイントマーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
黒い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
ヒストグラムを実線で描く	plt.hist(データ列, linestyle='solid')
折れ線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームの指定したカラムの中のNaNの合計を数える	df['列A'].isna().sum()
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるかカウントする	s.count(sub, start, end)
データフレームの列の一意な値の個数	df[col].nunique()
グラフで使うy座標のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
データフレームの列の名前を一度に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
棒グラフをライトゴールドロディイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフをバリーウッド色として描画する	plt.bar(データ列x, データ列y, color='burlywood')
散布図に右三角印を使う	plt.scatter(データ列x, データ列y, marker='>')
ミディアムターコイズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
折れ線グラフのバツマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
行列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
リストとリストについての散布図に黒い菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
option: ロイヤルブルーを使う	color = 'royalblue'
回帰分析をSDGとして行う	model = sklearn.linear_model.SGDRegressor()
線グラフの色をカーキに変更する	plt.plot(データ列x, データ列y, color='khaki')
ライトグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
浮動小数点数を十の位で丸める	round(x, -1)
データ列のエポック秒をPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
データ列の折れ線グラフをポイントマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='.')
アンサンブル学習でクラス分類をする	sklearn.ensemble.VotingClassifier()
行列の要素ごとの最大公約数を使う	np.gcd(aArray, aArray2)
nを二進表現に変換する	bin(n)
sepを区切りにして文字列リストをひとつの文字列にする	sep.join(aStringList)
データシリーズの中にある文字列の数を数える	ds.isin([value]).sum()
option: ブランチドアーモンドにフォントの色を設定する	color = 'blanchedalmond'
option: 左三角印を使う	marker = '<'
行列をフラット化する	aArray.flatten()
小数点数以上の最小の整数	math.ceil(x)
散布図の色を真紅にする	plt.scatter(データ列x, データ列y, color='crimson')
データフレームの選択したカラムの中の欠損値の数をカウントする	df[['列A', '列B']].isna().sum()
値をキューのn番目に差し込む	deq.insert(n, element)
ライトシアンにヒストグラムの色を変更する	plt.hist(データ列, color='lightcyan')
横棒グラフをダークシアグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
option: カンマを分割記号で使う	sep = ','
線グラフの色をパレットトルコイズにする	plt.plot(データ列x, データ列y, color='paleturquoise')
線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
クラスは名前付きタプルか	issubclass(C, tuple)
データシリーズの中に文字列と文字列がある	ds.isin([value, value2])
数列とイテラブルについて散布図を描いて右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームの一部のカラムの欠損値をxで置換する	df[['列A', '列B']].fillna(x)
シアンにヒストグラムの色をセットする	plt.hist(データ列, color='cyan')
正規分布のパーセント・ポイント関数を用いる	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
青色でヒストグラムを描画する	plt.hist(データ列, color='blue')
モデルの訓練を開始する	model.fit(説明変数, 目的変数)
option: グラフのラインスタイルを実線に設定する	linestyle = 'solid'
新しいリッジ回帰モデルを用意する	model = sklearn.linear_model.Ridge(alpha=正則化項)
日付データの表データのあるカラムをインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
データフレームをグループ化し、各平均値を計算する	df.groupby('列A').mean()
データ列の推移を色付きの実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
nの2乗を計算する	n ** 2
スプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='springgreen')
散布図をゴールド色として描画する	plt.scatter(データ列x, データ列y, color='gold')
xの小数点以下'2'桁までを表示する	print(':.2f'.format(x))
オブジェクトがリストクラスかどうか	isinstance(obj, list)
ある列で欠損値を含めてデータフレームをグループ化する	df.groupby('列A', dropna=False)
直後の値でデータシリーズの欠損値を埋める	ds.fillna(method='bfill')
ファイルパスから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
データフレームの指定した列のパーセンタイルを算出する	df['列A'].quantile(パーセント/100)
最後の部分文字列で文字列を分けた場合の左端の文字列を使う	s.rpartition(sub)[0]
データシリーズを千の位で丸めて整数型にする	ds.round(-3).astype(int)
無限大を使う	math.inf
散布図にrgbの△マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムをレベッカパープル色を使って描画する	plt.hist(データ列, color='rebeccapurple')
nの16進文字列を使う	hex(n)[2:]
双方向キューのstart〜endの部分要素を求める	collections.deque(itertools.islice(deq, start, end))
散布図の星マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
浮動小数点数の二乗を算出する	x ** 2
縦棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
折れ線グラフを実線として描く	plt.plot(データ列x, データ列y, linestyle='solid')
分割数nでデータフレームの中の列をビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフの色をレモンシフォンに変更する	plt.plot(データ列x, データ列y, color='lemonchiffon')
イテラブルとシーケンスをzipする	itertools.zip_longest(iterable, iterable2)
データフレームをエクセルから読む	pd.read_excel('file.xlsx')
カウンタから最頻出な要素の件数	aCounter.most_common()[1]
複素数を計算する	complex(x, y)
ネイビー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
現在処理中の例外を情報を知る	sys.exc_info()
リストとリストの散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
サインを求める	math.sin(x)
縦棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
タプルの平均を求める	sum(aTuple)/len(aTuple)
ヒストグラムを３つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
等間隔でリストをn個に分割する	pd.cut(aList, n)
箱ひげ図をプロットして平均を追加する	plt.boxplot(データ列, showmeans=True)
year年month月day日hour時を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour)
option: フォントの色をスプリンググリーンに変更する	color = 'springgreen'
ベージュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
option: 淡い茶色色を使う	color = 'tan'
数値の展開を行う	sympy.expand(e)
文字列の終了位置より前に部分文字列が存在しないか調べる	s.find(sub, 0, end) == -1
カテゴリデータ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
円グラフとしてデータ列の比率を作図する	plt.pie(データ列, startangle=90)
リストの各値を関数に適用した結果で並べる	sorted(aList, key=func)
文字列を部分文字列で二つに区切って、後半の文字列を求める	s.partition(sub)[-1]
列の長さnの順列を求める	itertools.permutations(iterable, n)
option: グラフの色をラベンダーにセットする	color = 'lavender'
整数nを符号付きでバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
指定したカラムのKurtosis	df['列A'].kurt()
マップの項目名に対応した値を得る	aDict.get(key)
文字列の中のケースを無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームがどれだけ、分散しているか見る	df.var()
CSVファイルファイル名がか確認する	filename.endswith('.csv')
折れ線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='gray')
日本語が文字列内に含まれるかどうか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
横棒グラフをダークオレンジ色として描画する	plt.barh(データ列x, データ列y, color='darkorange')
３つのリストを順に出力する	print(value, value2, value3)
データフレームのあるカラムが何日か調べる	df['列A'].dt.day
option: フォントの色をスノーに指定する	color = 'snow'
日付データにn日分加える	aDate + datetime.timedelta(days=n)
option: フォントの色を紺碧に指定する	color = 'azure'
整数nの16進表記	hex(n)
シルバー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
データフレームの一部の列がどの程度分散しているか見る	df[['列A', '列B']].var()
数列のピアソンの相関係数	scipy.stats.pearsonr(数列, 数列2)
option: ライトグレーにグラフの色を設定する	color = 'lightgrey'
データフレームのカラムを散布図で描画する	sns.scatterplot(data=df, x='列名', y='列名')
ファイルパスからストリームをオープンして]、fileとする	file = open(filepath)
イテラブルと列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
スカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
縦棒グラフを青緑色を用いて描画する	plt.bar(データ列x, データ列y, color='teal')
ゼロ埋めされたブール型のベクトル	np.zeros(要素数, dtype=np.int32)
空白を用いて文字列を区切って、整数リストに変換する	map(int, s.split())
データフレームを複数の列によって大きい順に整列する	df.sort_values(by=['列A', '列B'], ascending=False)
option: 黄色にグラフの色を設定する	color = 'yellow'
ヒストグラムをダークサーモン色として描画する	plt.hist(データ列, color='darksalmon')
t-SNEを行う	model = sklearn.manifold.TSNE(n_components=n)
ダークオレンジ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
データフレームをグループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
リストの出力を改行なしに行う	print(value, end='')
ベクトルの内積を求める	np.dot(aArray, aArray2)
大量のデータが正規分布か仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
データフレームの中に含まれる文字列との数を数える	df.isin([value, value2]).sum()
表データのある列を除いてみる	df.drop('列A', axis=1)
ゼロ埋めされた行列を作る	np.zeros(行数, 列数)
縦棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
nが負の整数か調べる	n < 0
折れ線グラフの四角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームをにバイオリン図で図示する	sns.violinplot(x='カテゴリ列', y='列', data=df)
プロットのタイトルをセットする	plt.title('グラフの名称')
配列と数列の散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
オブジェクトがリストに含まれない	element not in aList
散布図に赤い▽マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='r')
文字列全体がパターンにマッチするか見る	re.fullmatch(pattern, s)
部分文字列で文字列が終了するか調べる	s.endswith(sub)
セットから別の集合を全て取り除く	aSet.difference_update(aSet2)
要素を双方向キューの先頭から取り除く	deq.popleft()
文字列の先頭で複数行対応としてパターンにマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データフレームの中のカラムをビン分割する	pd.cut(df[col], aList)
リストとリストについての散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの選択したカラムのメディアン	df[['列A', '列B']].median()
ExcelファイルファイルからCSVをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
割合付きの円プロットを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ファイルパスからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
データフレームの指定したカラムが正規分布からどれだけ、尖っているか見る	df['列A'].skew()
組のn番目からn2番目までを取り出す	aTuple[n:n2]
データ列の折れ線グラフを△マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
整数nの十六進数文字列	hex(n)[2:]
ダークオレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
リストから重複を取り除く	set(iterable)
スチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
折れ線グラフの大バツ印を赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
ゼロ埋めされた三二ビット整数型のベクトル	np.zeros(要素数, dtype=np.int16)
option: ダークオリーブグリーンを使用する	color = 'darkolivegreen'
n2がn以上かつ、n3以下かどうか	n <= n2 and n2 <= n3
リストとイテラブルについての散布図にrgbのポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
TSVファイルとしてデータフレームを出力する	df.to_csv('file.tsv', sep='\t')
ファイルからストリームを開き]、fileとする	file = open(filepath)
双方向キューの要素をインプレースに逆順にする	deq.reverse()
データシリーズの欠損値をその中央値で埋める	ds.fillna(ds.median())
散布図の四角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ヒストグラムの色をパールゴールデンロッドに変更する	plt.hist(データ列, color='palegoldenrod')
まとめてデータフレームの選択した列の値をValueMapで置き換える	df[['列A', '列B']].replace(ValueMap)
文字列をバイト配列にする	bytearray(s)
線グラフの色をミディアムブルーに指定する	plt.plot(データ列x, データ列y, color='mediumblue')
nがn2より小さいか確認する	n < n2
折れ線グラフの色をカーキにセットする	plt.plot(データ列x, データ列y, color='khaki')
データ列の折れ線グラフを下三角印で描画する	plt.plot(データ列x, データ列y, marker='v')
日付時刻データは何曜日か知る	aDatetime.weekday()
フローラルホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
データフレームの行列をひっくり返す	df.T
データ列の折れ線グラフをバツ印を用いて描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームの指定したカラムの中に日付データが存在するかどうか調べる	df['列A'].isin([value])
ヒストグラムを小麦色色を使って描画する	plt.hist(データ列, color='wheat')
データフレームのn行目より後ろ抽出する	df[n:]
ホワイト色として線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
ミディアムブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
折れ線グラフを白色として描画する	plt.plot(データ列x, データ列y, color='white')
n進数文字列を整数にする	int(s, n)
散布図をミディアムスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
データ列を３つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
リストを展開して表示する	print(*aList)
ファイルパスからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
タプルのn番目からn2番目の部分	aTuple[n:n2]
プロットの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
option: ディムグレーにグラフの色を設定する	color = 'dimgray'
正規表現によって文字列を置き換える	re.sub(pattern, newsub, s)
データフレームの指定したカラムの欠損値を最小値に変更する	df['列A'].fillna(df['列A'].min())
数列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
ヒストグラムの色をスレートブルーに指定する	plt.hist(データ列, color='slateblue')
ある列の文字列に部分文字列が存在しない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
option: ロージーブラウンにグラフの色を設定する	color = 'rosybrown'
本日の年	datetime.datetime.today().year
option: ブラック色を用いる	color = 'black'
線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
データフレームを異なる列をキーにして全ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
文字列リストを一つにしてひとつの文字列にする	''.join(map(str, iterable))
棒グラフをライトスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
ある列の文字列に部分文字列が含まれない行を選ぶ	df[~df['列A'].str.contains(部分文字列)]
option: フクシアを使用する	color = 'fuchsia'
モデルを作る	model.fit(説明変数, 目的変数)
ヒストグラムをミディアムブルー色として描画する	plt.hist(データ列, color='mediumblue')
データフレームの選択したカラムの値はNaNかテストする	df[['列A', '列B']].isna()
折れ線グラフをスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='springgreen')
日付をインポートする	import datetime
option: スレートブルーにグラフの色を指定する	color = 'slateblue'
横棒グラフをスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='steelblue')
リストと数列の散布図に黒いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
文字列はリストの要素でないかどうか	element not in aList
データフレームの末尾n行を選ぶ	df.tail(n)
散布図に菱形マーカーを使用する	plt.scatter(データ列x, データ列y, marker='D')
文字列に変換して列を連結する	''.join(map(str, iterable))
数字を全て見る	string.digits
横棒グラフをロージーブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='rosybrown')
線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
ライトゴールドロディイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
グラフ中の(x,y)の位置にデータラベルを表示する	plt.legend(loc=(x, y))
小数点数の自然対数	math.log(x)
表を使う	import pandas as pd
タイムスタンプデータは日付時刻データと同時か調べる	aDatetime == aDatetime2
組のn番目のの要素	aTuple[n]
リストが空かどうか	len(aList) == 0
ヒストグラムの色をダークカーキに変更する	plt.hist(データ列, color='darkkhaki')
配列のケンドールの相関係数	scipy.stats.kendalltau(配列, 配列2)
線グラフの色をパレットトルコイズに指定する	plt.plot(データ列x, データ列y, color='paleturquoise')
散布図をピーチパフ色として描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
イテラブルとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
シエナ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
データフレームの未入力値を最大値で補う	df.fillna(df.max())
ライトシアン色でヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
データシリーズの統計量を見る	ds.describe()
散布図に丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
指定した列リストのみ、データフレームの重複を確認する	df.duplicated(subset=['列A', '列B'])
縦棒グラフをピーチパフ色として描画する	plt.bar(データ列x, データ列y, color='peachpuff')
散布図を赤色として描画する	plt.scatter(データ列x, データ列y, color='red')
データフレームの選択したカラムの中に含まれる日付データと文字列の数を数える	df[['列A', '列B']].isin([value, value2]).sum()
option: ダークゴールデンロッド色を使用する	color = 'darkgoldenrod'
インディアンレッド色でヒストグラムを描画する	plt.hist(データ列, color='indianred')
線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
数列とデータ列について散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
option: モカシンにグラフの色をする	color = 'moccasin'
ヒストグラムの色をゴールドにセットする	plt.hist(データ列, color='gold')
散布図のクロス印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ヒストグラムをダークオリーブグリーン色として描画する	plt.hist(データ列, color='darkolivegreen')
折れ線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームを指定した列のカテゴリによってグループ化する	df.groupby('列A')
日付時刻データをn時間前にする	aDatetime - datetime.timedelta(hours=n)
データシリーズの文字列をNaNに変換する	ds.replace(値, np.nan)
パレットトルコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
日付時刻データは何時か知る	aDatetime.hour
縦棒グラフをホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='white')
ライトグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
折れ線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
黄色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
黒い丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o', c='k')
関数の値によってデータフレームを集計して列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
ダークオリーブグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
オブジェクトが名前付きタプルかどうか	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
横棒グラフをグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='grey')
赤い大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームを表示するときヘッダー行を左寄せに指定する	pd.set_option('colheader_justify', 'left')
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
散布図の丸マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データフレームを十の位で丸めて整数にする	df.round(-1).astype(int)
データフレームの数値を全部、丸める	df.round()
赤い点線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
横棒グラフをシーグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='seagreen')
文字列をシンボルにしてパラメータにする	z = sympy.Symbol(s)
整数nを八進数文字列に変換する	oct(n)[2:]
データ列の推移を半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
縦棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
ゼロ埋めした８ビット整数型のベクトル	np.zeros(要素数, dtype=np.int8)
散布図を紺色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
分類結果の正確さを算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
縦棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='teal')
散布図をネイビー色として描画する	plt.scatter(データ列x, データ列y, color='navy')
文字列を最後から空白で区切る	s.rsplit()
n個分左に双方向キューの要素をローテンションする	deq.rotate(-n)
データフレームのあるカラムが正規分布からどの程度尖っているか見る	df['列A'].skew()
数値を展開する	sympy.expand(e)
ベクトルの型を求める	aArray.dtype()
リストとリストについて散布図を描画し、、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ミディアムアクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
数値の数値を計算する	float(e)
ファイルをバイナリ書き込みモードを使って開いて]、fとする	f = open(filepath, mode='wb')
文字列を部分文字列で二つに区切って、残りの文字列を見る	s.partition(sub)[-1]
浮動小数点数がNaNか	math.isnan(x)
組の最初の要素	aTuple[0]
option: 文字列を区切りで使用する	sep = s
部分文字列が文字列の開始位置からと終了位置までの範囲にないか調べる	s.find(sub, start, end) == -1
列とイテラブルの直積を得る	itertools.product(iterable, iterable2)
ライトスレイグレー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
タプルの中の最も小さい値を求める	min(aTuple)
nが負の数か確認する	n < 0
リストとリストについて散布図を描画してマーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
データシリーズの中にいくつ欠損値が存在するか数える	ds.isna().sum()
二つの列でデータフレームをまとめたグループ	df.groupby(['列A', '列B'])
option: フォントの色をアクアに変更する	color = 'aqua'
小数点数の逆正弦	math.asin(x)
２つの数値を文字列で区切って表示する	print(value, value2, sep=s)
option: グラフの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
スピアマンでデータフレームの相関行列を計算する	df.corr(method='spearman')
縦棒グラフを淡いピンク色色として描画する	plt.bar(データ列x, データ列y, color='lightpink')
混同行列をヒートマップを用いて確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
カラム名を指定して二つのデータフレームを結合する	pd.merge(df, df2, on='列A')
辞書にキーワード引数として更新する	aDict.update(**kwargs)
自然数個のものからk個取り出したときの並べ方の総数を計算する	math.perm(n, k)
二つのオブジェクトは等しいか調べる	obj == obj2
2つのオブジェクトが同じ	obj is obj2
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgrey')
nが-9以上、9以下か確認する	-9 <= n <= 9
指定したカラムを100の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
リストとイテラブルについて散布図を描画してマーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
現在は何分か知る	datetime.date.today().minute
横棒グラフをブルーバイオレット色として描画する	plt.barh(データ列x, データ列y, color='blueviolet')
列をビン数nとしてビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
数で実数を	x // y
カウンタからイテラブルを出現回数して引く	aCounter.subtract(iterable)
データフレームの選択したカラムを1000の位で四捨五入する	df[['列A', '列B']].round(-3)
option: クリムゾンにフォントの色を設定する	color = 'crimson'
データフレームの相関行列をヒートマップを用いて描画する	sns.heatmap(df.corr())
横棒グラフをレモンシフォン色を使って描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
option: 色をミッドナイトブルーに変更する	color = 'midnightblue'
データフレームの中の欠損値の数を数える	df.isna().sum()
タプルの中の一番大きい値を計算する	max(aTuple)
散布図を星マーカーでプロットする	plt.plot(データ列x, データ列y, marker='*')
２つのカウンタの共通する要素を求める	aCounter & aCounter2
縦棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
データフレームの相関行列を可視化する	sns.heatmap(df.corr())
行列は何次元か調べる	aArray.ndim
最大値・最小値の範囲を用いて一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
xを文字列にする	str(x)
折れ線グラフの色をライトグリーンにする	plt.plot(データ列x, データ列y, color='lightseagreen')
散布図をブラック色として描画する	plt.scatter(データ列x, データ列y, color='black')
option: グラフの色を小麦色に変更する	color = 'wheat'
整数nを二進数文字列に変換する	bin(n)[2:]
横棒グラフをターコイズ色として描画する	plt.barh(データ列x, データ列y, color='turquoise')
ライトスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
ライトシアンにヒストグラムの色を指定する	plt.hist(データ列, color='lightcyan')
データフレームの２つのカラムを並べて箱ひげ図で描画する	plt.boxplot([df['カラム'], df['カラム']])
右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>')
サドルブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
追加できるようにファイルをオープンする]	open(filepath, mode='a')
折れ線グラフに赤い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
円グラフとしてデータ列のパーセントを可視化する	plt.pie(データ列, startangle=90)
文字列を緑色化する	f'\033[32m{value}\033[0m'
小数点数のサインの逆数	math.asin(x)
ベクトルから重複を除いた配列を作る	np.unique(aArray)
折れ線グラフをブランチドアーモンド色を用いて描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
改行しなくて文字列をプリントする	print(value, end='')
マルーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
折れ線グラフに星マーカーを加える	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムの色をティールに変更する	plt.hist(データ列, color='teal')
半透明の実線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームを列の値によってグループ化し記述統計量を求める	df.groupby('列A').describe()
ピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
型が名前付きタプルかどうか	issubclass(C, tuple)
ヒストグラムの色をネイビーにする	plt.hist(データ列, color='navy')
データフレームを列名を指定してジョインする	pd.merge(df, df2, on='列A')
ロイヤルブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.GradientBoostingClassifier()
データフレームの最後	df.tail()
データフレームを表示するとき、表示できる最大列数を変更する	pd.set_option('display.max_columns', n)
データフレームの一部のカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
option: グラフの色をパウダーブルーに変更する	color = 'powderblue'
データフレームを散布図で可視化し、、カテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
データフレームの一部の列がどの程度、分散しているか確認する	df[['列A', '列B']].var()
配列の四分位を作図する	plt.boxplot(データ列)
option: フォントの色をベージュに設定する	color = 'beige'
本日が月曜日かどうか調べる	datetime.datetime.today().weekday() == 0
配列間のケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
データフレームの値は欠損値か調べる	df.isna()
横軸の目盛に文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
xが一桁の整数か調べる	-9 <= x <= 9
ヒストグラムの色をアクアマリンにする	plt.hist(データ列, color='aquamarine')
横棒グラフの色を淡い茶色にする	plt.barh(データ列x, データ列y, color='tan')
作画で用いるフォントを指定する	sns.set(font=フォント名)
ある列の中に日付データと日付データがある	df['列A'].isin([value, value2])
データシリーズの時刻	ds.dt.hour
０で全要素を初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
配列と数列の散布図を描き、、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
リストとデータ列についてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
十六進表記の文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
散布図をフォレストグリーン色として描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
ある列の値がx以上y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
縦棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
横棒グラフを白色として描画する	plt.barh(データ列x, データ列y, color='white')
カラムをdatetime64型にする	pd.to_datetime(df['列A'])
十六進文字列をbytesizeバイトのバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
nをn2で割った余りを計算する	n % n2
データフレームの中に含まれる文字列と日付データの合計を求める	df.isin([value, value2]).sum()
データフレームのある列をリストとして取り出す	df['列A'].values.tolist()
線グラフをプラム色として描画する	plt.plot(データ列x, データ列y, color='plum')
実数の複素数を計算する	complex(x)
文字列が全てアルファベットか確認する	s.isalpha()
両端キューの中に要素が存在するかどうか調べる	element in deq
等量で列をビン数nでビン分割する	pd.qcut(ds, n)
ディープスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='deepskyblue')
データフレームのインデックス名をまとめて変更する	df.rename(index={x: y})
折れ線グラフの左三角印を青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
n進数文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
ある列でデータフレームを並べて、NaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
数の複素数	complex(x)
データシリーズの中のNaNの個数を数える	ds.isna().sum()
エラーなくリストの文字列の位置を見る	aList.index(element) if element in aList else -1
散布図のポイント印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
整数の小数点以下を四捨五入する	round(x)
文字列の中のパターンによる全マッチを見る	re.findall(pattern, s)
イテラブルを文字列に変換して、部分文字列を用いて連結する	sub.join(map(str, iterable))
文字列内にひとつでも大文字が含まれるか判定する	any(c.isupper() for c in s)
折れ線グラフの丸印を黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
ロージーブラウン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
集合に列の要素を全て追加する	aSet.update(iterable)
行列の内積を求める	np.dot(aArray, aArray2)
option: バイアスを計算しない	fit_intercept = False
数値を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
各グループごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
エンコーディングを用いて文字列をバイト列に変換する	s.encode(encoding=encoding)
文字列の中の複数行対応として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
散布図のマーカーを星印にする	plt.scatter(データ列x, データ列y, marker='*')
回帰モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
データ列とリストの散布図に黒い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
変数を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
スライド用にグラフを設定する	sns.set(context='talk')
二つの数値をカンマで区切って出力する	print(value, value2, sep=',')
文字列の両端から空白と改行を取り除く	s.strip()
線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
散布図をダークゴールデンロッド色を使って描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
マップから項目名の値か、もしくは要素を得る	aDict.get(key, element)
文字列をコロンを用いて分割し、、列挙する	s.split(':')
データ構造を使う	import collections
線グラフをミッドナイトブルー色を使って描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームの一部のカラムの値をValueMapでまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
タプルの先頭のn要素を除く	aTuple[n:]
プロットで用いるカラーパレットを指定する	sns.set(pallete=パレット名)
option: 線の種類を実線に指定する	linestyle = 'solid'
組内の要素が少なくともひとつ真か	any(aTuple)
option: 四角印を使用する	marker = 's'
データフレームのあるカラムの中に存在する日付データとの数を数える	df['列A'].isin([value, value2]).sum()
決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
折れ線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
option: ミディアムシアグリーンを使う	color = 'mediumseagreen'
ダークオーキッド色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
ビスク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
プログラムのファイルの名前を調べる	sys.argv[0]
値が両端キューの中に含まれてるかどうか調べる	element in deq
線グラフを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
空のガウス過程回帰モデルを準備する	model = sklearn.gaussian_process.GaussianProcessRegressor()
カテゴリ列で色付けして、データフレームをに箱ひげ図でグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
リストの全ての要素を捨てる	aList.clear()
リストの平均	sum(aList)/len(aList)
円グラフとしてリストのパーセントを可視化する	plt.pie(データ列, startangle=90)
列から重複なくn個選ぶ	random.sample(iterable, k=n)
配列の累積積を求める	np.cumprod(aArray)
行でデータフレームをソートする	df.sort_index()
シーケンスからサンプリングする	random.sample(iterable)
カウンタをクリアする	aCounter.clear()
データフレームの指定した列を丸める	df['列A'].round()
option: マーカーを▽に変更する	marker = 'v'
EUCでファイルをオープンする]	open(filepath, encoding='euc_jp')
縦棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
リストの変化を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
一度にデータシリーズの値を正規表現patternでreplに置換する	ds.replace(pattern, repl, regex=True)
コマンドの第２引数を調べる	sys.argv[1]
ヒストグラムをシアン色を使って描画する	plt.hist(データ列, color='cyan')
バイトオーダを使う	sys.byteorder
アンティークホワイト色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
折れ線グラフをダークグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkgreen')
両端キュー中の要素の数をカウントする	deq.count(element)
散布図をライトシアン色として描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
単位行列を作る	np.eye(行数, 列数)
オブジェクトは論理値か調べる	isinstance(obj, bool)
バギングを用いてクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
色付きの破線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
インデックスによってデータフレーム全体をソートする	df.sort_index()
赤い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='r')
改行しなくて値をプリントする	print(value, end='')
option: インデックスを自動的な連番に指定する	index_col = None
日付データが火曜日	aDate.weekday() == 1
横棒グラフをブルーバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='blueviolet')
ヒストグラムをインディアンレッド色を用いて描画する	plt.hist(データ列, color='indianred')
ライトイエロー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
option: 濃い青を使用する	color = 'darkblue'
option: 菱形マーカーを描画する	marker = 'D'
散布図に赤い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの中にある文字列の合計をカウントする	df.isin([value]).sum()
データフレームの選択したカラムのメディアンを計算する	df[['列A', '列B']].median()
option: グラフの色をライトグリーンに変更する	color = 'lightseagreen'
整数nがセットのどれかか	n in aSet
目盛線をグラフから消す	plt.grid(False)
option: ダークマゼンタ色を使用する	color = 'darkmagenta'
線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgray')
option: 色をフローラルホワイトに設定する	color = 'floralwhite'
ベクトルの要素ごとの積を求める	np.multiply(aArray, aArray2)
辞書を複製する	aDict.copy()
項目名が辞書上で未定義かどうか調べる	key not in aDict
全てのシートをエクセルファイルからロードする	pd.read_excel('file.xlsx', sheet_name=None)
option: ビスクを用いる	color = 'bisque'
ダークブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
行列演算をする	import numpy as np
ヒストグラムを茶色色を用いて描画する	plt.hist(データ列, color='brown')
カラムのトリム分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
データフレームの中に文字列があるかどうか調べる	df.isin([value])
原点から(小数点数,y)の距離を計算する	math.hypot(x, y)
アンティークホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='antiquewhite')
部分文字列が部分文字列で始まるか確認する	s.startswith(sub)
x軸とy軸の比率を等しくする	plt.axis('equals')
整数nを8進表現にする	oct(n)
破線でヒストグラムをプロットする	plt.hist(データ列, linestyle='dashed')
option: 下三角印を用いる	marker = 'v'
折れ線グラフの左三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
K最近傍法を使って回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
オブジェクトは辞書型のインスタンスか調べる	isinstance(obj, dict)
ペルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
二点間のユークリッド距離を求める	math.dist(point, point2)
エクセルから複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
イテラブルとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
文字列の先頭で大文字・小文字を無視してパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
option: レベッカパープルを使う	color = 'rebeccapurple'
ダイアモンドマーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
異なる列をキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
指定した列の最頻値	df['列A'].mode()
等しい量になるようにビン数nを用いてデータ列をビン分割する	pd.qcut(ds, n)
縦軸の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
データ列の寄与率を求める	sklearn.metrics.r2_score(データ列, データ列2)
データフレームの選択したカラムの未入力値を直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
バイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
カーキ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
文字列の開始位置以降に部分文字列が含まれない	s.find(sub, start) == -1
option: 線種を一点鎖線に設定する	linestyle = 'dashbot'
option: ライトグレーを使用する	color = 'lightgrey'
option: ダークマゼンタを使う	color = 'darkmagenta'
日付時刻データにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
列の長さnの順列	itertools.permutations(iterable, n)
列の中にある文字列と日付データの合計を数える	df['列A'].isin([value, value2]).sum()
ヒストグラムをライムグリーン色を用いて描画する	plt.hist(データ列, color='limegreen')
オブジェクトが名前付きタプル型	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
折れ線グラフをライトゴールドロディイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの最初100行を抽出する	df.head(100)
日付データをn日前にする	aDate - datetime.timedelta(days=n)
線グラフをサンディーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームをグループ化し、それぞれの個数を算出する	df.groupby('列A').count()
日付データが金曜日かどうか調べる	aDate.weekday() == 4
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgray')
貝殻にヒストグラムの色をする	plt.hist(データ列, color='seashell')
散布図にダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
散布図でデータフレームをプロット化し、、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
縦方向に三つの表データをつなぐ	pd.concat([df, df2, df3], axis=0)
文字列を白色で表示する	print(f'\033[37m{value}\033[0m')
ラベンダー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
数値を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
ダークシアグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
辞書を計数器にする	collections.Counter(aDict)
option: ゴーストホワイトを使用する	color = 'ghostwhite'
nがn2の倍数でないか判定する	n % n2 != 0
ファイルを読み込みできるように開く]	open(filepath, mode='r')
線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの中に文字列と文字列がいくつあるか調べる	df.isin([value, value2]).sum()
列にシーケンスを続ける	itertools.chain(iterable, iterable2)
折れ線グラフに黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフをミントクリーム色として描画する	plt.plot(データ列x, データ列y, color='mintcream')
nが2で割り切れない	n % 2 == 1
今日は何日か知る	datetime.datetime.today().day
列をぐるぐると繰り返す	itertools.cycle(iterable)
折れ線グラフを実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid')
最大値と最小値としてデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
JSONファイルのfをデータにする	json.load(fin)
データフレームのあるカラムのNaNを第二四分位数で埋める	df['列A'].fillna(df['列A'].median())
データシリーズの秒を使う	ds.dt.second
データフレームの選択した列の欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
ひとつでも小文字が文字列内に含まれるか調べる	any(c.islower() for c in s)
マッピングを階層化する	collections.ChainMap(aDict)
組の先頭を除く	aTuple[1:]
aListn番目から要素を取り出す	aList.pop(n)
option: 菱形マーカーを加える	marker = 'D'
option: ダークグレー色を用いる	color = 'darkgrey'
ライトシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
列名を指定して二つのデータフレームを外部結合する	pd.merge(df, df2, on='列A', how='outer')
印字できる文字列にする	ascii(x)
日付データのデータシリーズをインデックスにする	df.index = pd.DatetimeIndex(ds)
パウダーブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
クリムゾン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
パターンに文字列の先頭でASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
データフレームの値をValueMapでまとめて変更する	df.replace(ValueMap)
散布図にrgbの丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
レベッカパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームの最初n行を抽出する	df.head(n)
ディープスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
数の３乗	x ** 3
タイムスタンプデータがタイムスタンプデータと同時かどうか調べる	aDatetime == aDatetime2
縦軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
整数nの十六進表記	hex(n)
折れ線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: グラフの種類を実線に指定する	linestyle = 'solid'
バギングとして回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
折れ線グラフの印をダイアモンド印にする	plt.plot(データ列x, データ列y, marker='D')
データフレームの一部の列の相関行列をケンドール相関係数を用いて計算する	df[['列A', '列B']].corr(method='kendall')
グラフをスライド用に指定する	sns.set(context='talk')
ヒストグラムをゴールド色として描画する	plt.hist(データ列, color='gold')
option: ライトグリーンにグラフの色を設定する	color = 'lightgreen'
t分布型確率的近傍埋め込み法で淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
オブジェクトは浮動小数点数クラスのインスタンスか	isinstance(obj, float)
データフレームを複数のカラムによってソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
データフレームの指定した列がどの程度、分散しているか見る	df['列A'].var()
カテゴリ別でグループ化して、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
ファイルパスを追加モードとして開く]	open(filepath, mode='a')
日付を表現した文字列をPandasの日付型に変換する	pd.to_datetime(日付を表現した文字列)
ある列のカテゴリ毎の個数	df.groupby('列A').count()
割合付きの円プロットを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ふたつの集合は集合と互いに素か調べる	aSet.isdisjoint(aSet2)
リストとリストについて散布図を描画し、、マーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフに赤い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
小数点数の余弦の逆数	math.acos(x)
変数をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
文字列の中でケースを無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
赤い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
データフレームの複数の列を除く	df.drop(['列A', '列B'], axis=1, inplace=True)
縦棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
関数によってデータフレームをグループ化し要約統計量を求める	df.groupby(関数).describe()
データシリーズをタイムスタンプ型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
配列の歪度	scipy.stats.skew(配列, bias=False)
ミディアムブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
作画の背景色を暗くする	sns.set(style='darkgrid')
ファイルをオープンして]書き込みストリームを求める	open(filepath, mode='w')
線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
既存のファイルパスを文字コードtextとして追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
文字列を走査し正規表現にマッチするか見る	re.search(pattern, s)
列をdatetime64型にする	pd.to_datetime(df['列A'])
入力から二つの文字列値を読む	A, B = map(str, input().split())
散布図を耐火レンガ色を使って描画する	plt.scatter(データ列x, データ列y, color='firebrick')
両端キューのn番目にデータを挿入する	deq.insert(n, element)
データフレームの一部のカラムを10の位で丸めて整数型にする	df[['列A', '列B']].round(-1).astype(int)
関数の値によってデータフレームを集約する	df.groupby(関数)
タイムスタンプデータは何秒か知る	aDatetime.second
option: コーンフラワーブルー色を用いる	color = 'cornflowerblue'
クラス分類をSDGを用いて行う	model = sklearn.linear_model.SGDClassifier()
option: パレットトルコイズを使用する	color = 'paleturquoise'
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
散布図にrgbの菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ミディアムスプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
option: 欠損値も含める	dropna = True
option: ダークグレー色を使用する	color = 'darkgray'
棒グラフをライトスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームをグループ化し、あるカラムに対し最大値を求める	df.groupby('列A')['列B'].max()
ASCII限定として正規表現で文字列を分割する	re.split(pattern, s, flags=re.ASCI)
データフレームを関数によって分類してグループ名を列挙する	[name for name, _ in df.groupby(関数)]
ファイルの拡張子を使う	os.path.splitext(filepath)[1].lstrip('.')
散布図に黒い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
現在の秒	datetime.date.today().second
上限nの両端キューをイテラブルから準備する	collections.deque(iterable, maxlen=n)
集合をタプルにする	tuple(aSet)
タプルの最後のn要素を捨てる	aTuple[:-n]
折れ線グラフの色をターコイズに変更する	plt.plot(データ列x, データ列y, color='turquoise')
文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームの選択したカラムのNaNを直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
折れ線グラフをシルバー色を用いて描画する	plt.plot(データ列x, データ列y, color='silver')
オールドレース色で線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
オブジェクトはあるクラスか	isinstance(obj, クラス)
まとめてreplに正規表現でカラムの値を置き換える	df['列A'].replace(pattern, repl, regex=True)
一点鎖線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dashbot')
データフレームをグループ化し、分散を算出する	df.groupby('列A').var()
縦棒グラフを淡いピンク色色を用いて描画する	plt.bar(データ列x, データ列y, color='lightpink')
x軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
配列のモードを算出する	mode, count = scipy.stats.mode(配列)
散布図の左三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームの指定した列がどれだけ、分散しているか見る	df['列A'].var()
空白文字	' '
文字列の最後から部分文字列を見つける	s.rfind(sub)
option: カラムの名前をリストでする	names = 列名リスト
ファイルをEUCで書き込みできるように開く]	open(filepath, mode='w', encoding='euc_jp')
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
ファイルを読み込みモードでオープンして]fとする	f = open(filepath, mode='r')
配列の推移を青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
year年month月day日の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
日付時刻データの時間を見る	aDatetime.hour
option: グラフの色をホワイトスモークにセットする	color = 'whitesmoke'
option: プラムを使う	color = 'plum'
切り下げて整数に変換する	math.floor(x)
ヒストグラムの色をライムグリーンに変更する	plt.hist(データ列, color='limegreen')
デピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgray')
全ての印字できる文字	string.printable
パープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
パパイヤウィップ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
散布図の大バツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
数値時刻のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
カラムの標準誤差を求める	scipy.stats.sem(df['列A'])
日付データの月	aDate.month
部分文字列を文字列の接頭辞から取り除く	s.removeprefix(sub)
黒い▲マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
文字列を水色化する	f'\033[36m{value}\033[0m'
散布図に四角印を使用する	plt.scatter(データ列x, データ列y, marker='s')
今日が木曜日	datetime.datetime.today().weekday() == 3
option: グリーンにフォントの色を指定する	color = 'green'
実数がNaNかどうか調べる	math.isnan(x)
整数を数で整数除算する	x // y
散布図にrgbの上三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
アルファベットを全て見る	string.ascii_letters
線グラフの色をアクアにする	plt.plot(データ列x, データ列y, color='aqua')
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
ミディアムスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
モカシン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
データフレームの欠損値を破壊的にドロップする	df.dropna(inplace=True)
データフレームをグループ化しある列に対し平均値を求める	df.groupby('列A')['列B'].mean()
データをL1ノルムを用いて正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
縦棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
散布図を紺碧色を用いて描画する	plt.scatter(データ列x, データ列y, color='azure')
半透明の破線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
散布図のダイアモンド印を赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフのダイアモンド印を青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
多次元データを主成分分析で濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
縦棒プロットを描画し、、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
year年month月day日hour時minute分のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
セットが空かどうか調べる	len(aSet) == 0
出力ストリームに文字列を書き込む	f.write(s)
要素ひとつのタプルを作る	(element,)
論理値型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int32)
カウンタのそれぞれの要素を、そのカウントだけ列挙する	aCounter.elements()
ライムにヒストグラムの色を変更する	plt.hist(データ列, color='lime')
横棒グラフを黄色色として描画する	plt.barh(データ列x, データ列y, color='yellow')
縦棒グラフをダークマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
指定したカラムのNaNを最頻値にセットする	df['列A'].fillna(df['列A'].mode().iloc[0])
option: ゴールド色を用いる	color = 'gold'
ロバストな線形回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
パステル調にカラーパレットをプロットの描画で使う	sns.set(pallete='pastel')
折れ線グラフの▽マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
行列の各要素の積	np.multiply(aArray, aArray2)
エクセルファイルのシートをデータフレームとしてロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
黒い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
文字列を改行で区切り、文字列リストに変換する	s.splitlines()
L2ノルムでデータを正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
散布図の四角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
異なる列をキーとして２つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
散布図の四角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームの指定したカラムの標本分散を求める	df['列A'].var(ddof=0)
predicateFuncが真とならない列の部分を取り出す	itertools.dropwhile(predicateFunc, iterable)
グラフを描く	import matplotlib.pyplot as plt
線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
ヒストグラムの色を黄色に指定する	plt.hist(データ列, color='yellow')
正規分布として疑似乱数を計算する	random.normalvariate(mu=0.5, sigma=0.2)
文字列の先頭で正規表現にケースを無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
文字列の中の複数行対応としてパターンによるマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
文字列はタプルに含まれるかどうか判定する	element in aTuple
ヒストグラムをシアン色として描画する	plt.hist(データ列, color='cyan')
ある列を用いてデータフレームを整列してNaNを先頭にする	df.sort_values(by='列A', na_position='first')
棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
option: 色を紺碧に設定する	color = 'azure'
ヒストグラムをミディアムアクアマリン色を用いて描画する	plt.hist(データ列, color='mediumaquamarine')
本日が土曜日か判定する	datetime.datetime.today().weekday() == 5
アリスブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
整数のGCDを求める	math.gcd(n, n2)
option: フォントの色を耐火レンガに設定する	color = 'firebrick'
散布図のバツ印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
ある列の文字列が正規表現にマッチする行を選択する	df[df['列A'].str.match(正規表現)]
データフレームの指定したカラムの欠損値を最大値で補う	df['列A'].fillna(df['列A'].max())
データフレームの列の標本分散	df['列A'].var(ddof=0)
作画のカラーテーマを指定する	sns.set(pallete=パレット名)
オブジェクトはタプル型のインスタンスかどうか	isinstance(obj, tuple)
二つの集合の共通部分	aSet.intersection(aSet2)
部分文字列を文字列中から見つける	s.find(sub)
オレンジレッド色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
新しい重回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
値が集合に含まれるか	element in aSet
イテラブルのセット	set(iterable)
プラム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
データフレームを二つの列の値でまとめた表	df.groupby(['列A', '列B'])
クリムゾン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
縦棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
折れ線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
タイムスタンプデータが木曜日か	aDatetime.weekday() == 3
option: ダークオレンジ色を用いる	color = 'darkorange'
配列の出現頻度を作図する	plt.hist(データ列)
表データから列名を複数指定して選択する	df[columns]
折れ線グラフの色をミディアムシアグリーンにする	plt.plot(データ列x, データ列y, color='mediumseagreen')
ホールドアウトを用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
黒い下三角マーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームの指定した列を100の位で四捨五入する	df['列A'].round(-2)
データフレームの選択したカラムのNaNを直前の値に指定する	df[['列A', '列B']].fillna(method='ffill')
ダークスラテグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
アイボリー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
散布図にダイアモンド印を使う	plt.scatter(データ列x, データ列y, marker='D')
集合にシーケンスを追加する	aSet.update(iterable)
文字列の開始位置から先に部分文字列がないか	s.find(sub, start) == -1
散布図の左三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
異なる列をキーとして二つのデータフレームを全ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
ヒストグラムの色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
グリーンイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
回帰分析をパーセプトロンで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
データフレームの一部の列の欠損値を最頻値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
マッピングを多重集合に変換する	collections.Counter(aDict)
option: ライトゴールドロディイエローにフォントの色を設定する	color = 'lightgoldenrodyellow'
二つのオブジェクトは同じ参照か調べる	obj is obj2
散布図の▽マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
文字列を部分文字列で分割した時の後半の文字列	s.partition(sub)[-1]
黒い下三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームのカラムを10の位で丸める	df['列A'].round(-1)
ダーク・スラテグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
ベクトルを一次元化する	aArray.flatten()
縦棒グラフをグリーンイエロー色を使って描画する	plt.bar(データ列x, データ列y, color='greenyellow')
ティール色のヒストグラムを描画する	plt.hist(データ列, color='teal')
散布図の下三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: 文字コードをSJISに指定する	encoding = 'shift_jis'
赤いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
折れ線グラフの色を紺に指定する	plt.plot(データ列x, データ列y, color='darkblue')
あるカラムの欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
列を累加したイテラブル	itertools.accumulate(iterable)
option: ブルーバイオレットにグラフの色を設定する	color = 'blueviolet'
option: リネン色を用いる	color = 'linen'
ポイント印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムをプラム色として描画する	plt.hist(データ列, color='plum')
あるカラムの値が欠損値	df['列A'].isna()
縦棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
折れ線グラフを青い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
環境はウィンドウズか調べる	sys.platform.startswith('win32')
データフレームの指定したカラムのNaNを最小値にする	df['列A'].fillna(df['列A'].min())
ダークオレンジ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
棒グラフを貝殻色を用いて描画する	plt.bar(データ列x, データ列y, color='seashell')
実数の二乗を計算する	x ** 2
線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
カテゴリで色付けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
データフレームの選択した列のNaNを数値で埋める	df[['列A', '列B']].fillna(x)
折れ線グラフの▲マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
nがn2より大きいかどうか	n > n2
ファイル名がJSONファイル	filename.endswith('.json')
紺碧色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
ファイルをバイナリ書き込みモードを用いて開く]	open(filepath, mode='wb')
配列の各要素の最大公約数を計算する	np.gcd(aArray, aArray2)
外れ値に強い回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
データフレームをある列で小さい順にソートする	df.sort_values(by='列A', ascending=True)
折れ線グラフに右三角印を使う	plt.plot(データ列x, データ列y, marker='>')
イエローグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
全要素を初期値で初期化した行列を作成する	np.full((行数, 列数), 初期値, dtype=np.int)
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
データフレームの欠損値を平均値に変更する	df.fillna(df.mean())
散布図の四角マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
rgbの下三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: 論理値型を使う	dtype = np.int32
ひとつでも非空白が文字列中に含まれるか調べる	any(not c.isspace() for c in s)
スタックのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
ベクトルの累積和	np.cumsum(aArray)
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategray')
四角印を使い、折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
ファイルからnバイト読む	f.read(n)
実数のタンジェントを計算する	math.tan(x)
縦棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
データフレームから5行、ランダムサンプリングする	df.sample(5)
カデットブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cadetblue')
option: 色を黄色に設定する	color = 'yellow'
文字列が空白か調べる	s.isspace()
option: 区切り記号をカンマにする	sep = ','
option: インディゴ色を用いる	color = 'indigo'
平均と分散としてデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
実行環境の名前	sys.platform
辞書のキー一覧を得る	list(aDict)
オーキッド色でヒストグラムを描画する	plt.hist(データ列, color='orchid')
グラフに鉛直方向の点線をつける	plt.axvline(x=0, linestyle='dotted')
ゲインズボロ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
2つの行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
ファイルの拡張子付きのファイル名	os.path.basename(filepath)
文字列を全て大文字にする	s.upper()
データシリーズの標本標準偏差を計算する	ds.std(ddof=1)
ミディアムオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
配列を四分位数ごとにビニングする	pd.qcut(aArray, 4)
散布図をライトスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
配列の最小	np.min(aArray)
option: グラフの色をロージーブラウンに変更する	color = 'rosybrown'
option: フォントの色をミディアムスプリンググリーンに変更する	color = 'mediumspringgreen'
データフレームをグループ化し分散を求める	df.groupby('列A').var()
option: 淡いピンク色を用いる	color = 'lightpink'
データフレームの選択したカラムのNaNをxに変更する	df[['列A', '列B']].fillna(x)
データフレームの平均と信頼区間をプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
双方向キューの最初の値を見る	deq[0]
option: フォントの色をホットピンクに指定する	color = 'hotpink'
平均値でデータフレームの未入力値を埋める	df.fillna(df.mean())
配列とリストについて散布図をプロットし、、マーカーをバツに指定する	plt.plot(データ列x, データ列y, marker='x')
数値を変数についてn階微分する	sympy.diff(e, z, n)
ヒストグラムの色をダークグレーにする	plt.hist(データ列, color='darkgray')
右三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
リストと配列の散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
日付データを文字列を用いてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
ダークバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='darkviolet')
データフレームの空文字を未入力値に変換し、ドロップする	df.replace('', np.nan).dropna()
空のヒストグラムベースの勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
整数乱数で要素を埋めた行列を作る	np.random.randint(開始値, 終了値, N)
ファイルをSJISとしてオープンする]	open(filepath, encoding='shift_jis')
option: バイナリ書き込みモードに指定する	mode = 'wb'
百分率付きの円グラフを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ユニコードに対応する文字	chr(unicode)
赤いポイントマーカーをデータ列とデータ列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
ふたつの列を組み合わせてグループ化し個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
データフレームのある列の欠損値を直前の値に設定する	df['列A'].fillna(method='ffill')
データフレームの未入力値を最頻値に指定する	df.fillna(df.mode().iloc[0])
部分文字列で文字列を末尾から分割する	s.rsplit(sub)
ベクトルの転置行列	aArray.T
部分文字列で文字列が終わるか調べる	s.endswith(sub)
組を逆順にする	reversed(aTuple)
イテラブルから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
入力ストリームから1文字読む	f.read(1)
クロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
マッピングを消去する	aDict.clear()
平均付き箱ひげ図を描く	plt.boxplot(データ列, showmeans=True)
ゲインズボロ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
浮動小数点数に数を掛ける	x * y
データシリーズの時を見る	ds.dt.hour
ドジャーブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
空集合を作る	set()
列の各データは何回出現するか見る	ds.value_counts()
グラフにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
データ列の移り変わりを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
グラフに用いる縦軸の名前をuntitledにセットする	plt.ylabel('y軸ラベル')
データシリーズをPandasの日付型に変換し、表データのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
縦棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データシリーズが何年か調べる	ds.dt.year
濃い青色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
棒グラフをスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='skyblue')
ケンドールの相関係数を算出する	scipy.stats.kendalltau(df['列A'], df['列B'])
option: マーカーを四角に指定する	marker = 's'
折れ線グラフの▽マーカーの色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
オブジェクトがリストに含まれるか	element in aList
日付データが日付データより早いか調べる	aDate < aDate2
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
グラフで用いる縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
数値の簡略化を行う	sympy.sympify(e)
縦棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
辞書の値に要素が含まれていないか調べる	element not in aDict.values()
option: データ型として整数型を用いる	dtype = np.int
文字列中にひとつでも非小文字があるか調べる	any(not c.islower() for c in s)
カテゴリで色分けして、データフレームをに箱ひげ図でグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
横棒グラフをピーチパフ色として描画する	plt.barh(データ列x, データ列y, color='peachpuff')
イテラブルと配列の散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムをブランチドアーモンド色を用いて描画する	plt.hist(データ列, color='blanchedalmond')
オリーブ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
プラットホームがMacOS	sys.platform.startswith('darwin')
星印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
ある列の値がxに等しく、かつ別の列の値がyに等しいデータを抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
ディープスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
その中央値でデータフレームの欠損値を埋める	df.fillna(df.median())
データフレームを1000の位で四捨五入する	df.round(-3)
二つの列をキーにしてデータフレームをソートして、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
横棒グラフをネイビー色を用いて描画する	plt.barh(データ列x, データ列y, color='navy')
option: フクシアを用いる	color = 'fuchsia'
Pythonインタプリタの実行ファイルの絶対パスを確認する	sys.executable
数列とリストの散布図を描いて、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
aListn番目から値をポップする	aList.pop(n)
グラフのタイトルを指定する	plt.title('グラフの名称')
データフレームの選択した列の分散を求める	df[['列A', '列B']].var()
変数が0に近づく際、数式の極限値を算出する	sympy.limit(e, z, 0)
正規分布に基づく確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
nがn2より小さい	n < n2
日付時刻データとタイムスタンプデータの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
数値を部分分数に展開する	sympy.apart(e)
ヒストグラムのラインスタイルを破線に変更する	plt.hist(データ列, linestyle='dashed')
単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
散布図をレモンシフォン色を使って描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
パウダーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='powderblue')
n個分両端キューの値を右にローテンションする	deq.rotate(n)
配列と数列について散布図を描いて、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
散布図を丸印を使用して描画する	plt.scatter(データ列x, データ列y, marker='o')
相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
縦棒グラフをライトグレー色を使って描画する	plt.bar(データ列x, データ列y, color='lightgray')
option: マーカーの大きさを設定する	markersize = 2.0
散布図をバリーウッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='burlywood')
データフレームの選択したカラムの空文字をNaNに変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
データフレームのカテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
線グラフの色をダークオレンジにセットする	plt.plot(データ列x, データ列y, color='darkorange')
二つのデータフレームをつなぐ	pd.concat([df, df2])
nが2で割り切れるか	n % 2 == 0
偽陰性を避けたい指標を使用する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
散布図をゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
指定したカラムの標準偏差	df['列A'].std()
折れ線グラフのバツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
黒いクロスマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
リストをベクトルに変換する	np.array(aList)
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
ポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.')
ハニーデューにヒストグラムの色を指定する	plt.hist(データ列, color='honeydew')
キュー中の要素のインデックス	deq.index(element)
二つ並べてデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
あるカラムの最頻値	df['列A'].mode()
折れ線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
文字列はリストの要素でないかどうか調べる	element not in aList
ハニーデュー色でヒストグラムを描画する	plt.hist(データ列, color='honeydew')
散布図をアイボリー色を用いて描画する	plt.scatter(データ列x, データ列y, color='ivory')
ビスク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
実数の天井を求める	math.ceil(x)
３整数のLCM	math.lcm(n, n2, n3)
データフレームをグループ化しそれぞれの合計を算出する	df.groupby('列A').sum()
表データのあるカラムが何秒か見る	df['列A'].dt.second
折れ線グラフの印をバツにする	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをダークオーキッド色を用いて描画する	plt.hist(データ列, color='darkorchid')
option: グラフの色をアリスブルーに変更する	color = 'aliceblue'
双方向キューのn番目	deq[n]
ヒストグラムの色をグリーンにセットする	plt.hist(データ列, color='green')
ミディアムスプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
散布図をライム色として描画する	plt.scatter(データ列x, データ列y, color='lime')
棒グラフをピンク色として描画する	plt.bar(データ列x, データ列y, color='pink')
棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
散布図の下三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
実数の双曲線正弦を算出する	math.sinh(x)
紺碧にヒストグラムの色をする	plt.hist(データ列, color='azure')
文字列を太字で表示する	print(f'\033[1m{value}\033[0m')
コマンドラインフラグの状態を知る	sys.flags
データフレームを表示するとき、折り返しを無効に指定する	pd.set_option('expand_frame_repr', False)
アンティークホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: グラフの色をスラグレーに指定する	color = 'slategrey'
グラフに鉛直方向の実線をつける	plt.axvline(x=0, linestyle='solid')
バイアスなしの単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: フォントの色をインディアンレッドに指定する	color = 'indianred'
列をフォーマットでタイムスタンプに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
文字列はリストに含まれるか調べる	element in aList
組の値を並べる	sorted(aTuple)
小数点数の整数部	math.modf(x)[1]
散布図を丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o')
今日の曜日を整数で使う	datetime.datetime.today().weekday()
ライトグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
option: ライトシアンにグラフの色をする	color = 'lightcyan'
実数のn乗して浮動小数点数による余り	pow(x, n, y)
棒グラフをホットピンク色として描画する	plt.bar(データ列x, データ列y, color='hotpink')
整数nの八進数表記	oct(n)
ターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
正規分布の確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
赤いポイントマーカーをリストとデータ列についての散布図に描く	plt.plot(データ列x, データ列y, marker='.', c='r')
要素が集合に含まれない	element not in aSet
散布図をダークグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
散布図をスラグレー色として描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームのn行目を除く	df.drop(n, axis=0, inplace=True)
散布図を黒いポイントマーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
option: バイアスを算出しない	fit_intercept = False
セットをイミュータブルな集合に変換する	frozenset(aSet)
ふたつの関係が部分集合か調べる	aSet.issubset(aSet2)
スチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='steelblue')
浮動小数点数の双曲線正接の逆数	math.atanh(x)
option: パウダーブルーにフォントの色を設定する	color = 'powderblue'
イテラブルとイテラブルについて散布図を描画してマーカーをダイアモンドにセットする	plt.plot(データ列x, データ列y, marker='D')
テキストファイルファイル名が	filename.endswith('.txt')
積率相関係数でデータフレームの相関行列を算出する	df.corr(method='pearson')
option: ブラウンにフォントの色を設定する	color = 'brown'
option: 色をピーチパフに設定する	color = 'peachpuff'
リストの値のみプリントする	print(*aList)
ある列のカテゴリごとの分散を求める	df.groupby('列A').var()
ゴールデンロッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
縦棒グラフをゴールド色を用いて描画する	plt.bar(データ列x, データ列y, color='gold')
ある列の文字列に部分文字列がある行を抽出する	df[df['列A'].str.contains(部分文字列)]
rgbのダイアモンドマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
predicateFuncを適用したとき真とならない列の要素	itertools.dropwhile(predicateFunc, iterable)
配列にはいくつ要素が含まれるか調べる	aArray.size
ファイルからの入力ストリームを見る	open(filepath)
文字列の両端から部分文字列を除く	s.strip(sub)
カウンタをセットに変換する	set(aCounter)
文字列の開始位置以降に部分文字列がない	s.find(sub, start) == -1
折れ線グラフをロージーブラウン色として描画する	plt.plot(データ列x, データ列y, color='rosybrown')
淡いピンク色色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightpink')
半透明の一点鎖線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
本日が水曜日	datetime.datetime.today().weekday() == 2
横棒グラフをダークグレー色を使って描画する	plt.barh(データ列x, データ列y, color='darkgrey')
散布図の印の大きさを設定する	plt.scatter(データ列x, データ列y, markersize=2.0)
nがn2未満、もしくはn3以上か	n < n2 or n >= n3
option: 回帰木の深さを制限する	maxdepth = n
全要素を０で初期化した三2ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
プロットにx=0の点線を設定する	plt.axvline(x=0, linestyle='dotted')
データフレームを複数の列によって小さい順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
option: グラフの色をシルバーに指定する	color = 'silver'
円プロットを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
option: 赤にフォントの色を設定する	color = 'red'
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
データシリーズはどの程度、分散しているか確認する	ds.var()
ブースティングを使ってクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
折れ線グラフをブルーバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='blueviolet')
自然数の順列の総数を算出する	math.perm(n)
シエナ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
option: ダークシアグリーン色を用いる	color = 'darkseagreen'
複素数型のゼロ埋めされた配列	np.zeros(要素数, dtype=bool)
折れ線グラフの色をロイヤルブルーに変更する	plt.plot(データ列x, データ列y, color='royalblue')
正規表現に文字列全体を大文字・小文字を無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ヒストグラムの色をトマトにセットする	plt.hist(データ列, color='tomato')
サンディーブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームのNaNを中央値に設定する	df.fillna(df.median())
横方向に二つのデータフレームを結合する	pd.concat([df, df2], axis=1)
タイムスタンプデータが土曜日か	aDatetime.weekday() == 5
バイナリ書き込みできるようにファイルをオープンする]	open(filepath, mode='wb')
ヒストグラムをターコイズ色として描画する	plt.hist(データ列, color='turquoise')
nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
イテラブルとリストについての散布図に赤い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
リストとリストについて散布図を描画してマーカーを右三角に変更する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムの色をミディアムバイオレットレッドに変更する	plt.hist(データ列, color='mediumvioletred')
データフレームをNaNを含めてあるカラムの値でグループ化する	df.groupby('列A', dropna=False)
インディゴ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
データシリーズの不偏標準偏差を算出する	ds.std()
集合を変更不能な集合に変換する	frozenset(aSet)
ダークスラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
データ列の変化を破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
イテラブルを文字列リストに変換して、部分文字列を用いて連結する	sub.join(map(str, iterable))
バイオレットにヒストグラムの色を変更する	plt.hist(データ列, color='violet')
否定する	not n
バイオレットにヒストグラムの色を指定する	plt.hist(データ列, color='violet')
option: サンディーブラウン色を用いる	color = 'sandybrown'
option: ポイント印を用いる	marker = '.'
エクセルファイルからすべてのシートをロードする	pd.read_excel('file.xlsx', sheet_name=None)
プロットの用途を論文に設定する	sns.set(context='paper')
折れ線グラフを濃い青色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
折れ線グラフをダークサーモン色を使って描画する	plt.plot(データ列x, データ列y, color='darksalmon')
option: グラフの色をライトイエローにする	color = 'lightyellow'
1行だけ列を外したデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
要素が集合に含まれるか	element in aSet
データフレームの値が未入力値かどうか	df.isna()
棒グラフをフクシア色として描画する	plt.bar(データ列x, データ列y, color='fuchsia')
本日の年数を見る	datetime.datetime.today().year
折れ線グラフの線種を一点鎖線にセットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: マーカーを下三角に指定する	marker = 'v'
ティール色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
浮動小数点数の正接の逆数を求める	math.atan(x)
ロバスト分類器を用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームの一部のカラムの最頻値	df[['列A', '列B']].mode()
nが奇数	n % 2 == 1
ExcelファイルファイルからCSVファイルをSJISでロードする	pd.read_csv('file.csv', encoding='shift_jis')
紺色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
リストと配列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
両端キューのn番目に値を差し込む	deq.insert(n, element)
配列と数列の散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフの左三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: 色をターコイズに指定する	color = 'turquoise'
複数の列を組み合わせてグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
セットから別のセットの要素を全て取り除く	aSet.difference_update(aSet2)
データフレームのあるカラムは何分か調べる	df['列A'].dt.minute
散布図に下三角印を使う	plt.scatter(データ列x, データ列y, marker='v')
タプルの値をソートする	sorted(aTuple)
散布図の印の大きさを変える	plt.scatter(データ列x, データ列y, markersize=2.0)
データフレームをグループ化し、ある列に対し分散を計算する	df.groupby('列A')['列B'].var()
縦棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
グラフで利用可能な色名の一覧を使う	matplotlib.colors.cnames
表データを使用する	import pandas as pd
データシリーズの曜日	ds.dt.weekday_name
サンディーブラウン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
配列のトリム分散を使う	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
散布図に▲マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
右三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='>')
rgbの左三角マーカーを数列と数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
非英字が文字列中に含まれるか調べる	any(not c.isalpha() for c in s)
リストと配列の散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
横棒グラフをラベンダーブラッシュ色として描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
文字列の開始位置と終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
データフレームをグループ化して、ヒストグラムを用いてプロット化する	sns.histplot(df, x='列名', hue='カテゴリ名')
回帰分析をブースティングで行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
option: ラベンダー色を用いる	color = 'lavender'
折れ線グラフの△印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
逆順の両端キューを求める	reversed(deq)
値が集合に含まれないか	element not in aSet
リストとイテラブルについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
浮動小数点数を複素数に変換する	complex(x)
ヒストグラムの色をグリーンに変更する	plt.hist(データ列, color='green')
ヒストグラムを描画して、区間数を設定する	plt.hist(データ列, bins=区関数)
横軸の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
半透明の実線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
散布図に黒いポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c='k')
ファイルのフォルダ名	os.path.dirname(filepath)
ライトグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
option: エラーを無視するように変更する	errors = 'ignore'
指定したカラムのパーセンタイルを算出する	df['列A'].quantile(パーセント/100)
あるカラムの値がx以上、y以下のデータを抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
キューのstart番目からendの部分値	collections.deque(itertools.islice(deq, start, end))
アンティークホワイト色でヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
ファイルパスをバイナリモードでオープンする]	open(filepath, mode='rb')
nが1、もしくは2か確認する	n == 1 or n == 2
青緑色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
マップに項目名ワード引数で更新する	aDict.update(**kwargs)
フィッシャーの線形判別分類の準備をする	model = sklearn.manifold.TSNE(n_components=n)
ピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
データフレームの全列を散布図で図示する	sns.pairplot(df)
タプルの値を昇順にソートする	sorted(aTuple, reverse=True)
両端キューに値をエンキューする	deq.appendleft(element)
データフレームの欠損値を直前の値にセットする	df.fillna(method='ffill')
データ列をヒストグラムを使って可視化する	plt.hist(データ列)
カラーバーを横向きに付ける	plt.colorbar(orientation='horizontal')
行列の内積	np.dot(aArray, aArray2)
黒い四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s', c='k')
xを論理値にする	bool(x)
双方向キューをデキューする	deq.popleft()
散布図をrgbのダイアモンドマーカーを使って描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
入力から２つの文字列を読む	A, B = map(str, input().split())
折れ線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
nが5で割り切れるかテストする	n % 5 == 0
インデックスを付けずデータフレームを出力する	df.to_csv('file.csv', index=None)
一点鎖線にラインの線種を設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
値∉集合	element not in aSet
option: 文字コードをEUCに設定する	encoding = 'euc_jp'
1行だけ標準入力から読み込む	sys.stdin.readline()
ヒストグラムを描画して半透明化にする	plt.hist(データ列x, alpha=0.5)
浮動小数点数の双曲線余弦の逆数を計算する	math.acosh(x)
線グラフの色をブルーバイオレットに変更する	plt.plot(データ列x, データ列y, color='blueviolet')
データフレームをある列をキーにして並べてNaNを先頭にする	df.sort_values(by='列A', na_position='first')
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()//60
乱数で要素を埋めた配列を作る	np.random.random(N)
表計算を読み込む	pd.read_excel('file.xlsx')
y軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
キューの要素をn個分右にローテンションする	deq.rotate(n)
ファイルをバイナリ書き込み用に開く]	open(filepath, mode='wb')
シアン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
複数行対応としてパターンで文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
option: 文字コードを文字列の示す文字コードに設定する	encoding = s
option: マーカーの色を珊瑚にする	markerfacecolor = 'coral'
縦棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
オブジェクトがリストかタプルか	isinstance(obj, (list)
散布図をダークシアン色として描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
ある列のカテゴリごとの合計を算出する	df.groupby('列A').sum()
列の各要素を順に双方向キューの最後に付け加える	deq.extend(iterable)
事前に正規表現を複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ヒストグラムをライトイエロー色として描画する	plt.hist(データ列, color='lightyellow')
データフレームの相関行列をヒートマップとして可視化する	sns.heatmap(df.corr())
option: フォントの色をシルバーに設定する	color = 'silver'
option: フォントの色をアンティークホワイトに設定する	color = 'antiquewhite'
ヒストグラムの色をアクアにする	plt.hist(データ列, color='aqua')
行列の最小値	np.min(aArray)
option: レモンシフォン色を用いる	color = 'lemonchiffon'
データフレームから重複する行を残さずドロップする	df.drop_duplicates(keep=False)
棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
列を指定して重複を削除する	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
マッピングをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
オプションでファイルに出力する	file = sys.open(filename, 'w')
ホワイトスモーク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
プロットを描画する準備をする	import matplotlib.pyplot as plt
分子n分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
option: ３２ビット整数型を使用する	dtype = np.int16
横軸の目盛りを表示しない	plt.xticks([])
シンボル計算モジュールを使う	import sympy
option: ダークオーキッド色を用いる	color = 'darkorchid'
文字列を特殊文字も含め小文字に変換する	s.casefold()
カラーパレットを色差別なくする	sns.set(pallete='colorblind')
パラメータについて数式のインテグラルを行う	sympy.integrate(e, z)
ダークレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
折れ線グラフに青い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
線グラフをトマト色として描画する	plt.plot(データ列x, データ列y, color='tomato')
散布図をダークゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
predicateFuncを適用したとき真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
縦棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
ある列の値がxより大きくyより小さいデータを抽出する	df[(x < df['列A']) & (df['列A'] < y)]
実数が無限大か	math.isinf(x)
実数を浮動小数点数で整数除算する	x // y
本日が水曜日かテストする	datetime.datetime.today().weekday() == 2
数列とリストの散布図を描いて文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
組を順序付けする	enumerate(aTuple)
八進文字列をバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
オリベドラブにヒストグラムの色を設定する	plt.hist(データ列, color='olivedrab')
データフレームの一部のカラムを千の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-3).astype(int)
正則化付き重回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
切片なしの線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
散布図のポイントマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
セットの補集合	aSet.difference(aSet2)
散布図をブルーバイオレット色を使って描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
nをn2分の1にする	n /= n2
赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
インディゴ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
データフレームの選択したカラムの中にと日付データがあるか調べる	df[['列A', '列B']].isin([value, value2])
散布図に三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
逆双曲線余弦を計算する	math.acosh(x)
表データのn行目を削除して	df.drop(n, axis=0)
散布図の三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
折れ線グラフの色をアイボリーに指定する	plt.plot(データ列x, データ列y, color='ivory')
ホワイトスモークにヒストグラムの色を変更する	plt.hist(データ列, color='whitesmoke')
ヒストグラムの色をダークグレーにする	plt.hist(データ列, color='darkgrey')
ヒストグラムをライム色を用いて描画する	plt.hist(データ列, color='lime')
行列の分散	np.var(aArray)
イエローグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
データシリーズの中にいくつ文字列が含まれるか調べる	ds.isin([value]).sum()
関数によってデータフレームをまとめたグループを求める	df.groupby(関数)
事前に大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データフレームのカラムを散布図で図示し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
数値を緑色化する	f'\033[32m{value}\033[0m'
option: フォントの色をミントクリームに設定する	color = 'mintcream'
キューの最初に要素を追加する	deq.appendleft(element)
赤色で変数をプリントする	print(f'\033[31m{value}\033[0m')
実数の双曲線正弦を計算する	math.sinh(x)
リストとデータ列の散布図を描画してマーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
option: インディアンレッド色を用いる	color = 'indianred'
ふたつの列からグループ化し、合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
ヒストグラムをダークスラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategray')
点線に線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
辞書の項目名と値を入れ替える	{v: k for k, v in aDict.items()}
線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
option: グラフの色をオリベドラブにする	color = 'olivedrab'
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
イテラブルの集合を生成する	set(iterable)
あるカラムのNaNを平均値に設定する	df['列A'].fillna(df['列A'].mean())
option: アンティークホワイト色を使用する	color = 'antiquewhite'
グラフのデータラベルの位置を(x,y)に指定する	plt.legend(loc=(x, y))
option: ライトゴールドロディイエローに色を設定する	color = 'lightgoldenrodyellow'
ファイルからストリームを読み込みfileとする	file = open(filepath)
option: やわらかい青色を用いる	color = 'cornflowerblue'
リネン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
配列をベースにして全要素が1の配列	np.ones_like(aArray)
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightgreen')
部分文字列が文字列の開始位置と終了位置の間にある	s.find(sub, start, end) != -1
二つのリストをカンマで区切って表示する	print(value, value2, sep=',')
四分位点でデータを標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
折れ線グラフをミディアムバイオレットレッド色を使って描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
nにn2を掛ける	n * n2
書き込みできるようにEUCとしてファイルパスを開く]	open(filepath, mode='w', encoding='euc_jp')
n2がn以上かつ、n3以下	n <= n2 and n2 <= n3
データフレームを指定した列によって昇順に破壊的に並べる	df.sort_values(by='列A', ascending=True, inplace=True)
option: マーカーを菱形に変更する	marker = 'D'
スタッキングとしてクラス分類を行う	sklearn.ensemble.StackingClassifier()
折れ線グラフのマーカーを下三角印にする	plt.plot(データ列x, データ列y, marker='v')
赤いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームを並べ直す	df.sort_values('キーとなる列')
列を文字列に変換して、カンマを用いて連結する	','.join(map(str, iterable))
文字列をシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
イテラブルのヒストグラムを描く	plt.hist(データ列)
シードを初期化する	random.seed()
リストと数列について散布図を描いて、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
データフレームを千の位で丸めて整数にする	df.round(-3).astype(int)
サンディーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
リストを境界値として配列をビン分割する	pd.cut(aArray, aList)
データフレームのあるカラムは何曜日か見る	df['列A'].dt.weekday_name
平方根平均二乗誤差を計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
ベクトル間のユークリッド距離	math.dist(point, point2)
プロットのカラーテーマを暗くする	sns.set(pallete='dark')
リストをy座標、リストをx軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
縦棒グラフをリネン色として描画する	plt.bar(データ列x, データ列y, color='linen')
ヒストグラムの色をサドルブラウンにセットする	plt.hist(データ列, color='saddlebrown')
符号付き整数の最大値	sys.maxsize
option: 列方向に処理する	axis = 0
ミディアムバイオレットレッド色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
option: 色をダークオリーブグリーンに変更する	color = 'darkolivegreen'
タイムスタンプデータがタイムスタンプデータより前か調べる	aDatetime < aDatetime2
リストから重複を除く	sorted(set(aList), key=aList.index)
ベクトルから重複を除いたベクトルを作成する	np.unique(aArray)
データ列を柱状グラフにする	plt.hist(データ列)
nが偶数かどうか調べる	n % 2 == 0
データシリーズのNaNを直前の値で埋める	ds.fillna(method='ffill')
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
棒グラフをゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='goldenrod')
option: グラフの色を耐火レンガに変更する	color = 'firebrick'
折れ線グラフに青い上三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
チップのデータセットをデータフレームとしてロードする	df = sns.load_dataset('tips')
リストと配列についての散布図にrgbのポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: イエローグリーン色を使用する	color = 'yellowgreen'
本日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフをスプリンググリーン色を使って描画する	plt.plot(データ列x, データ列y, color='springgreen')
白色として線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
ヒストグラムをダークバイオレット色を用いて描画する	plt.hist(データ列, color='darkviolet')
両端キューのstart番目からendの要素を使う	collections.deque(itertools.islice(deq, start, end))
データフレームから型リストで指定したデータ型の列だけ抽出する	df.select_dtypes(include=typeList)
nはセットのひとつか調べる	n in aSet
散布図をミディアムシアグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ライム色でヒストグラムを描画する	plt.hist(データ列, color='lime')
散布図のダイアモンドマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
行列の列ごとの最小	np.min(aArray, axis=0)
表データのあるカラムが何日か見る	df['列A'].dt.day
データフレームの選択した列を百の位で四捨五入する	df[['列A', '列B']].round(-2)
ヒストグラムの色を小麦色に変更する	plt.hist(データ列, color='wheat')
線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
英字の小文字列	string.ascii_lowercase
ライトサーモンにヒストグラムの色を指定する	plt.hist(データ列, color='lightsalmon')
データフレームを2つの列によって降順に並べる	df.sort_values(by=['列A', '列B'], ascending=False)
リストを下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
option: グラフの色をサーモンにする	color = 'salmon'
option: 濃い青色を用いる	color = 'darkblue'
nとn2のXOR	n ^ n2
xの小数点以下'5'桁までプリントする	print(':.5f'.format(x))
ヒストグラムの色をチョコレートに変更する	plt.hist(データ列, color='chocolate')
最初の部分文字列で文字列を二つに区切って前半の文字列を見る	s.partition(sub)[0]
リストとリストについて散布図を描画し、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
あるカラムの文字列が正規表現文字列にマッチしない行を選択する	df[~df['列A'].str.match(正規表現)]
ヒストグラムをライトイエロー色を用いて描画する	plt.hist(データ列, color='lightyellow')
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
ホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
行によってデータフレーム全体を並べ直す	df.sort_index()
サポートベクターマシンとしてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
配列の変遷を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
日付時刻データを数値に変換する	aDatetime.timestamp()
横棒グラフをライトグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
データシリーズのNaNを最大値に変更する	ds.fillna(ds.max())
オブジェクトは論理値かどうか判定する	isinstance(obj, bool)
データフレームの下n行を抽出する	df.tail(n)
デピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
データフレームのあるカラムをダミー変数にする	pd.get_dummies(df['列A'])
文字列の左側から部分文字列を消す	s.lstrip(sub)
黄色にヒストグラムの色を設定する	plt.hist(データ列, color='yellow')
配列の値が正規分布にしたがって発生する累積確率を使う	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
折れ線グラフに大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
rgbの三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを散布図で描画して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ヒストグラムの色を濃いシアンに設定する	plt.hist(データ列, color='darkcyan')
ヒストグラムの色をラベンダーブラッシュにセットする	plt.hist(データ列, color='lavenderblush')
ダークシアグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
バイナリモードとしてファイルをオープンして]、fとする	f = open(filepath, mode='rb')
集合から何でもいいからひとつ取り出す	aSet.pop()
option: 茶色にフォントの色を設定する	color = 'brown'
変数を太字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
折れ線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
棒グラフの色をダークブルーにする	plt.bar(データ列x, データ列y, color='darkblue')
データフレームの選択した列の値をValueMapでまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
表データの先頭	df.head()
データ列の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
アクア色を使ってヒストグラムを描画する	plt.hist(データ列, color='aqua')
凡例の場所を(x,y)に設定する	plt.legend(loc=(x, y))
リストとリストの散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
フローラルホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
ヒストグラムをミディアムバイオレットレッド色を使って描画する	plt.hist(データ列, color='mediumvioletred')
データ列を縦棒プロットにする	plt.bar(ラベル列, データ列)
データフレームの選択したカラムの値がNaNかどうか調べる	df[['列A', '列B']].isna()
nが3の倍数かどうか調べる	n % 3 == 0
ダークサーモンにヒストグラムの色を指定する	plt.hist(データ列, color='darksalmon')
散布図をホワイトスモーク色として描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
データフレームのNaNが含まれる部分を色付けする	df.style.highlight_null()
配列と配列について散布図を描画し、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
ファイルを書き込みできるようにEUCで開く]	open(filepath, mode='w', encoding='euc_jp')
配列のケンドールの相関係数を計算する	scipy.stats.kendalltau(配列, 配列2)
散布図の左三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
マッピングの項目名と値を入れ替える	{v: k for k, v in aDict.items()}
複数のシートを指定してExcelファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
配列のKurtosisを求める	scipy.stats.kurtosis(配列, bias=False)
マッピングをコピーする	aDict.copy()
文字列がひらがなか調べる	('ぁ' <= ch <= 'ん')
ある列で表データを並べる	df.sort_values(by='列A')
区間からベクトル	np.linspace(最小値, 最大値, 要素数)
option: スラグレー色を使用する	color = 'slategray'
データフレームのあるカラムが何月か知る	df['列A'].dt.month
ハニーデュー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
散布図をミディアムスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
折れ線グラフの印を丸にする	plt.plot(データ列x, データ列y, marker='o')
option: オリベドラブを使う	color = 'olivedrab'
データフレームを指定したカラムの値でグループ化する	df.groupby('列A')
バツマーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
整数を三乗する	x ** 3
色付きの破線を使って線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列を文字のリストにする	list(s)
バイナリ用にファイルをオープンして]fとする	f = open(filepath, mode='rb')
option: 箱髭図を水平方向にする	vert = False
データフレームを並べ、、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
文字列がパターンにマッチさせる	re.match(pattern, s)
リストを等しい量になるようにビン数nで分割する	pd.qcut(aList, n)
データフレームの中にいくつNaNがあるか数える	df.isna().sum()
ゴーストホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
データシリーズの中にいくつがあるかカウントする	ds.isin([value]).sum()
option: 行列のデータ型を指定する	dtype = bool
option: フォレストグリーンを用いる	color = 'forestgreen'
ポイント印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgray')
option: フォントの色をシスルに設定する	color = 'thistle'
実数を実数に掛ける	x * y
データフレームの選択した列を万の位で四捨五入する	df[['列A', '列B']].round(-4)
リストの折れ線グラフを描画して、色をカラーコードで変更する	plt.plot(データ列x, データ列y, color='#800080')
組の要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
エクセルからシートを指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
散布図のマーカーの色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
色付きの破線としてラインを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフのクロス印を赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
最後の値を辞書から取り出す	aDict.popitem()
組をカンマ区切りで出力する	print(*aTuple, sep=',')
セパレータで文字列を区切る	s.split(sub)
ブラウンにヒストグラムの色をセットする	plt.hist(データ列, color='brown')
1行だけ列を外したデータフレームを求める	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
option: ミントクリーム色を用いる	color = 'mintcream'
N未満までの配列	np.arange(N)
青い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
文字列を青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
プログラムの実行を異常停止する	sys.exit(1)
横棒グラフをホワイト色で描画する	plt.barh(データ列x, データ列y, color='white')
ある列の値がxに等しくかつ別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
縦棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
散布図のマーカーを上三角にする	plt.scatter(データ列x, データ列y, marker='^')
データシリーズのNaNを中央値で置き換える	ds.fillna(ds.median())
指定したカラムを一万の位で四捨五入する	df['列A'].round(-4)
ヒストグラムの描き、、正規化する	plt.hist(データ列, density=True)
リストの中の最小値を算出する	min(aList)
nがn2以下、または、n3以上	n <= n2 or n >= n3
option: グラフの色を耐火レンガにセットする	color = 'firebrick'
ダークグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
ロバストな重クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
分類モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
ダークバイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
リストと数列について散布図を描画して、マーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
日付時刻データは何日か知る	aDatetime.day
配列を等量でn個にビニングする	pd.qcut(aArray, n)
2を底とする浮動小数点数の対数を求める	math.log2(x)
スラグレーにヒストグラムの色をする	plt.hist(データ列, color='slategrey')
あるカラムの標本標準偏差を求める	df['列A'].std(ddof=1)
マッピングの項目名の一覧を得る	aDict.keys()
日付時刻データの分数を見る	aDatetime.minute
マルーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
リストとリストについて散布図を描き、、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
配列から重複を除いた配列を作成する	np.unique(aArray)
文字列から部分文字列を取り除く	s.replace(sub, '')
正規分布の累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
option: マーカーの色をティールにする	markerfacecolor = 'teal'
ふたつの列からグループ化し、標準偏差を計算する	df.groupby(['列A', '列B'], as_index=False).std()
ヒストグラムをシスル色を用いて描画する	plt.hist(データ列, color='thistle')
オレンジ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
辞書の項目名とその値を列挙する	aDict.items()
現在の日数	datetime.datetime.today().day
縦棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
タイムスタンプデータの曜日を使う	aDatetime.weekday()
カウンタのそれぞれの項目を回数だけ列挙する	aCounter.elements()
データフレームの選択したカラムの欠損値をモードに変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
プロットをスライドに変更する	sns.set(context='talk')
データフレームの指定した列の平均値を算出する	df['列A'].mean()
ミディアムターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
色付きの点線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
非アスキー文字が文字列中に含まれるか調べる	any(not c.isascii() for c in s)
数列とリストの散布図を描き、、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
日付データが日付データより前か判定する	aDate < aDate2
散布図をペールグリーン色として描画する	plt.scatter(データ列x, データ列y, color='palegreen')
リストと配列の散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
カラムのn次モーメントを求める	scipy.stats.moment(df['列A'], moment=n)
データフレームの指定したカラムの中にいくつ日付データがあるか求める	df['列A'].isin([value]).sum()
データフレームの一部の列の文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
パラメータについて数値の積分を算出する	sympy.integrate(e, z)
データフレームのあるカラムのモード	df['列A'].mode()
縦棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
データシリーズの欠損値を50パーセンタイルに設定する	ds.fillna(ds.median())
データフレームの未入力値を前の行の値で埋める	df.fillna(method='ffill')
データフレームをグループ化し各最大値を求める	df.groupby('列A').max()
浮動小数点数のn乗	x ** n
ある列のカテゴリごとの個数を計算する	df.groupby('列A').count()
データフレームから列を三つだけ選択する	df[['列A', '列B', '列C']]
オブジェクトが整数	isinstance(obj, int)
配列を列から初期化する	np.array(iterable)
コマンドフラグの状態	sys.flags
データフレームの母標準偏差を計算する	df.std(ddof=0)
オブジェクトは辞書か調べる	isinstance(obj, dict)
ファイル全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
データフレームのNaNを前の行の値で補う	df.fillna(method='ffill')
棒グラフをディープスカイブルー色を使って描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
文字列の中の複数行対応としてパターンによる全マッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
カラムのn次モーメント	scipy.stats.moment(df['列A'], moment=n)
シーケンスからn個、ランダムに選ぶ	random.choices(iterable, k=n)
ゼロ埋めされた配列を初期化する	np.zeros(要素数)
データフレームをreplにまとめて正規表現patternで置き換える	df.replace(pattern, repl, regex=True)
データ列の折れ線グラフを丸印を用いる描画する	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムの色をライトブルーにセットする	plt.hist(データ列, color='lightblue')
カラムの種類を確認する	df.info()
折れ線グラフに下三角印を用いる	plt.plot(データ列x, データ列y, marker='v')
データシリーズの中にいくつ文字列があるか調べる	ds.isin([value]).sum()
オブジェクトが辞書型か	isinstance(obj, dict)
データフレームの選択したカラムの中に日付データと文字列がいくつ存在するか数える	df[['列A', '列B']].isin([value, value2]).sum()
ピアソンの積立相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
縦棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
縦棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
文字列の先頭でパターンに複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
ヒストグラムを破線で描く	plt.hist(データ列, linestyle='dashed')
オブジェクトはリスト型	isinstance(obj, list)
数列とリストについての散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームの一部の列の相関行列を計算する	df[['列A', '列B']].corr()
カウンタを少ない方から列挙する	aCounter.most_common()[::-1]
最後の項目をマッピングからポップする	aDict.popitem()
xを整数にする	int(x)
列の長さを制限する	collections.deque(iterable, maxlen=n)
イテラブルをカウントしてカウンタから引く	aCounter.subtract(iterable)
nの無限リスト	itertools.repeat(n)
両端キュー中の要素を数える	deq.count(element)
文字列からformatのパターンでタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
ターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
行列の個数	aArray.size
指定した列によってデータフレームをソートする	df.sort_values(by='列A')
指定した列のカテゴリで集計しそれぞれの合計を求める	df.groupby('列A').sum()
文字列がタプルに含まれるか確認する	element in aTuple
配列と数列についての散布図にrgbの右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データシリーズの中にある文字列の合計を調べる	ds.isin([value]).sum()
データフレームの散布図をグループ化して横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
OSのバイトオーダを知る	sys.byteorder
散布図の右三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
ラベンダーブラッシュ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
文字列をカンマによって区切って、列挙する	s.split(',')
あらかじめ正規表現をコンパイルする	re.compile(pattern)
option: バッファリングのサイズをセットする	buffering = 4096
オールドレース色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
エクセルファイルのシートを読む	pd.read_excel('file.xlsx', sheet_name=シート名)
部分的最小二乗法を用いて回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
浮動小数点数を千の位で丸める	round(x, -3)
線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
オブジェクトが名前付きタプル型かどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
折れ線グラフの▲印の大きさを設定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
部分文字列が文字列の終了位置より前に含まれるかどうか調べる	s.find(sub, 0, end) != -1
配列を縦軸、リストをx軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ライトシアンにヒストグラムの色をする	plt.hist(データ列, color='lightcyan')
タプルのn番目からn2番目までを取り出す	aTuple[n:n2]
option: フォントの色をフォレストグリーンに指定する	color = 'forestgreen'
option: 色をオリベドラブに設定する	color = 'olivedrab'
折れ線グラフの色をミディアムブルーに変更する	plt.plot(データ列x, データ列y, color='mediumblue')
線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
最大値でデータフレームの指定した列の欠損値を補完する	df['列A'].fillna(df['列A'].max())
ヒストグラムの色をアリスブルーにする	plt.hist(データ列, color='aliceblue')
青い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
低頻度方からカウンタをリストとして得る	aCounter.most_common()[::-1]
部分文字列が文字列の開始位置より後に含まれる	s.find(sub, start) != -1
折れ線グラフの色をミディアムブルーに指定する	plt.plot(データ列x, データ列y, color='mediumblue')
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgrey')
配列とデータ列の散布図を描画して、四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの一部のカラムを正規表現patternでまとめてreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
列名を指定して２つのデータフレームを右結合する	pd.merge(df, df2, on='列A', how='right')
ヒストグラムの色をホットピンクに指定する	plt.hist(データ列, color='hotpink')
データフレームを関数の値によってグループ化し要約統計量を計算する	df.groupby(関数).describe()
散布図に黒い三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図をサドルブラウン色として描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
ターコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
n2がnより大きくかつn3未満か調べる	n < n2 and n2 < n3
耐火レンガにヒストグラムの色を設定する	plt.hist(データ列, color='firebrick')
ダークオレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
ラインの線の種類を実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
ライトグリーン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
2つのデータ列の散布図として残差を描く	sns.residplot(x=データ列, y=データ列)
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
コーンズシルク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
x,y,zをそれぞれn,n2,n3に指定する	x, y, z = n, n2, n3
option: カーキ色を用いる	color = 'khaki'
2つの整数LCMを計算する	math.lcm(n, n2)
縦棒グラフを描いて、バーの横幅を変更する	plt.bar(ラベル列, データ列, width=0.5)
リストと配列についての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
nが一桁の数か	0 <= n <= 9
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()//60
表データのあるカラムの曜日が何日目か調べる	df['列A'].dt.dayofweek
配列とリストの散布図を描いて星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ファイルパスのファイル名	os.path.basename(filepath)
範囲を指定して乱数を生成する	random.randint(最小値, 最大値)
イテラブルに列を続ける	itertools.chain(iterable, iterable2)
データフレームのある列を削除し、みる	df.drop('列A', axis=1)
option: スカイブルー色を使用する	color = 'skyblue'
タプルのn番目以降の要素を取り出す	aTuple[n:]
自分自身をモジュールとしてを得る	sys.modules[__name__]
ヒストグラムを実線でプロットする	plt.hist(データ列, linestyle='solid')
データフレームを表示するとき、表示可能な最大列数を減らす	pd.set_option('display.max_columns', n)
逆余弦を算出する	math.acos(x)
ライトゴールドロディイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ある列の文字列が正規表現文字列にマッチしないデータを取り出す	df[~df['列A'].str.match(正規表現)]
ホールドアウト法を使用する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
複数の列からグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
option: オールドレースにグラフの色を設定する	color = 'oldlace'
データ列とリストについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
リストをnから番号付けする	enumerate(aList, start=n)
文字列が英数字か確認する	s.isalnum()
文字列を記号化してパラメータにする	z = sympy.Symbol(s)
連立方程式の解を計算する	sympy.solve([e, e2])
プロットのパレットを全般的に明るくする	sns.set(pallete='bright')
上限nの両端キューを列から作る	collections.deque(iterable, maxlen=n)
ある列を用いてデータフレームを降順に並べ直す	df.sort_values(by='列A', ascending=False)
正規分布のパーセント・ポイント関数を使用する	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
イテラブルのイミュータブルな集合を作る	frozenset(iterable)
折れ線プロットを描画して色をRGBで指定する	plt.plot(データ列x, データ列y, color='#800080')
配列とリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
オブジェクトは辞書型か調べる	isinstance(obj, dict)
赤いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='r')
表データのあるカラムの曜日が何日目か知る	df['列A'].dt.dayofweek
小数点以下3桁までCSVファイルにデータフレームを出力する	df.to_csv('file.csv', float_format='%.3f')
点線にラインのスタイルを設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
縦棒グラフをダークオレンジ色を使って描画する	plt.bar(データ列x, データ列y, color='darkorange')
カウンタを使う	import collections
データ列をビニングする	pd.cut(ds, aList)
文字列ひとつのタプル	(element,)
xが1、もしくは2か	x == 1 or x == 2
追加モードでファイルパスを開いて]、fとする	f = open(filepath, mode='a')
イテラブルにイテラブルを続けたイテラブルを得る	itertools.chain(iterable, iterable2)
xの小数点以下'5'桁まで表示する	print(':.5f'.format(x))
縦棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
パールバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
本日が木曜日か	datetime.datetime.today().weekday() == 3
データ列とリストについての散布図に文字列というデータラベル用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
アルファベットが文字列内に含まれる	any(c.isalpha() for c in s)
最大長nのキューを新規生成する	collections.deque(maxlen=n)
百分率付きの円プロットを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
折れ線グラフのマーカーを星印にする	plt.plot(データ列x, データ列y, marker='*')
ライトスチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームからカテゴリデータのカラムを抽出する	df.select_dtypes('object')
リストとリストの散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
赤い破線を使ってリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
行列を平坦にする	aArray.flatten()
三変数の最小の値	min(x, y, z)
ヒストグラムをグリーンイエロー色を用いて描画する	plt.hist(データ列, color='greenyellow')
データフレームの選択したカラムの値が欠損値	df[['列A', '列B']].isna()
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
最大値・最小値の範囲で一様な乱数	random.uniform(最小値, 最大値)
四分位数ごとにリストをビン分割する	pd.qcut(aList, 4)
日付データは日付データと同時か	aDate == aDate2
実数の双曲線正接の逆数を求める	math.atanh(x)
散布図のバツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
タイムスタンプデータをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
実数を３乗する	x ** 3
破線で配列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームを指定した列を用いてソートする	df.sort_values(by='列A')
文字列をエラーを無視してバイト列にする	s.encode(errors='ignore')
パールゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
配列とリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
option: グラフの色をシアンに指定する	color = 'cyan'
ゼロ埋めされた符号なし８ビット整数型の行列を作る	np.zeros(要素数, dtype=np.uint8)
option: ダークカーキにフォントの色を指定する	color = 'darkkhaki'
スチールブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
折れ線グラフを青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図に黒い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
データシリーズの歪度を求める	ds.kurt()
リストを文字列に変換して一つにする	''.join(map(str, iterable))
浮動小数点数で実数を割って、小数点以下を切り捨てる	x // y
ブースティングとして回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
ヒストグラムの色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
指定したカラムの尖度	df['列A'].skew()
現在の秒数を見る	datetime.date.today().second
数を2乗する	x ** 2
耐火レンガ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
横棒グラフをラベンダー色として描画する	plt.barh(データ列x, データ列y, color='lavender')
日付時刻データの分を見る	aDatetime.minute
ひとつでも非ASCII文字が文字列中に含まれる	any(not c.isascii() for c in s)
キューの末尾にシーケンスの各要素を順に追加する	deq.extend(iterable)
イテラブルを2回あわせたデカルト積	itertools.product(iterable, repeat=2)
プロット中の文字化けを防ぐ	sns.set(font='IPAexGothic')
ミディアムパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
データフレームを関数の値によってまとめたグループを見る	df.groupby(関数)
ボックスチャートとしてデータ列を可視化する	plt.boxplot(データ列)
ある列を破壊的に除く	df.drop('列A', axis=1, inplace=True)
ヒストグラムをサンディーブラウン色として描画する	plt.hist(データ列, color='sandybrown')
リストとリストの散布図を描画し、、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームの指定した列の平均値を求める	df['列A'].mean()
リストと数列の散布図を描画して、左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
小麦色色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
何か試しに動かす	print('Hello World')
データフレームの指定した２つの列を抽出する	df[['列A', '列B']]
辞書の全を空にする	aDict.clear()
縦棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
小数点以下をn桁に変更する	pd.set_option('precision', n)
線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
線グラフをピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='pink')
整数nが配列のいづれかかテストする	n in aArray
リストとデータ列について散布図を描いてその大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
文字列を最初の部分文字列で分割したときの最初の文字列	s.partition(sub)[0]
数値を方程式として解く	sympy.solve(e)
配列の個数	aArray.size
赤い星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムの色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
方程式として数式のパラメータの解を算出する	sympy.solve(e, z)
数列とリストについて散布図を描画して菱形マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
グラフの大きさをセットする	plt.figure(figsize=(横幅, 高さ))
nが負の数かどうか調べる	n < 0
リストの最初のオブジェクトを探す	aList.index(element)
n2がn以上、かつ、n3以下かどうか調べる	n <= n2 and n2 <= n3
ヒストグラムの色をリネンに変更する	plt.hist(データ列, color='linen')
日付データが日付データと同時かどうか	aDate == aDate2
オブジェクトはタプルの要素でない	element not in aTuple
rgbの△マーカーをイテラブルとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームから重複を認めてランダムに100行をサンプリングする	df.sample(100, replace=True)
ミントクリーム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
option: ハニーデューに色を設定する	color = 'honeydew'
最大値でデータを正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ファイルを書き込み用にオープンする]	open(filepath, mode='w')
データフレームの選択したカラムの統計量を調べる	df[['列A', '列B']].describe()
文字列内に大文字が含まれるか判定する	any(c.isupper() for c in s)
白色で文字列をプリントする	print(f'\033[37m{value}\033[0m')
option: グラフを実線に設定する	linestyle = 'solid'
折れ線グラフに赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
文字列は印字できるかどうか	s.isprintable()
一点鎖線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
n×n2を求める	n * n2
ふたつの集合の差を求める	aSet.difference(aSet2)
nが一桁の数か	-9 <= n <= 9
散布図の左三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
配列のユニークな値を要素とする行列	np.unique(aArray)
コマンド引数をリストとして	sys.argv[1:]
等量で分割数nとしてデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
二つの列からグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
文字列がアスキー文字か確認する	s.isascii()
データ列の折れ線グラフを星印として描画する	plt.plot(データ列x, データ列y, marker='*')
グラフの大きさを指定する	plt.figure(figsize=(横幅, 高さ))
ローングリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
実測値を線形回帰モデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
リストの先頭を捨てる	aList[1:]
option: ホワイトを使う	color = 'white'
データフレームの選択した列はどの程度、分散しているか見る	df[['列A', '列B']].var()
散布図にrgbのクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
グレー色でヒストグラムを描画する	plt.hist(データ列, color='grey')
Pandasのバージョンを調べる	print(pd.__version__)
ライトイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
配列の四分位を可視化する	plt.boxplot(データ列)
データフレームの行数と列数を見る	df.shape
追加できるようにUTF8で既存のファイルを開く]	open(filepath, mode='a', encoding='utf-8')
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
グラフの簡単な説明の場所を(x,y)に設定する	plt.legend(loc=(x, y))
日付データが水曜日か	aDate.weekday() == 2
ひとつでも非アスキー文字が文字列中に含まれるかどうか調べる	any(not c.isascii() for c in s)
option: ミディアムバイオレットレッドに色を変更する	color = 'mediumvioletred'
連続した配列の作成する	np.arange(開始値, 終了値, 等差)
日付時刻データにn時間分、加える	aDatetime + datetime.timedelta(hours=n)
両端キューの最後の要素	deq[-1]
データフレームの指定した列を百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
カテゴリでグループ化してデータフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
数式のパラメータを数式で置き換える	e.subs(z, e2)
データフレームをグループ化し、各標準偏差を求める	df.groupby('列A').std()
ミディアムパープル色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
最後の部分文字列によって文字列を二分する	s.rpartition(sub)
原点から点までの距離	math.hypot(x, y)
棒グラフをフローラルホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='floralwhite')
横方向に三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
ライトグレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
今日の日付時刻	datetime.datetime.today()
文字列をセパレータで区切る	s.split(sub)
データシリーズを日付データに変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
折れ線グラフのマーカーを▲にする	plt.plot(データ列x, データ列y, marker='^')
option: シルバーにグラフの色を設定する	color = 'silver'
列のユニークな値の個数を調べる	df[col].nunique()
カラムのモードを求める	mode, count = scipy.stats.mode(df['列A'])
散布図をブラウン色で描画する	plt.scatter(データ列x, データ列y, color='brown')
option: 色をスカイブルーにセットする	color = 'skyblue'
ヒートマップでデータフレームの相関行列を描画する	sns.heatmap(df.corr())
リストの推移を折れ線グラフを用いて可視化する	plt.plot(range(len(データ列)), データ列)
データフレームをグループ化し個数を算出する	df.groupby('列A').count()
縦棒グラフをパープル色として描画する	plt.bar(データ列x, データ列y, color='purple')
タプルにキーがある	key not in aDict
ミディアムスプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
グラフで使うx座標に軸名を設定する	plt.xlabel('x軸ラベル')
プロットの用途をスライドに設定する	sns.set(context='talk')
option: 線種を実線に指定する	linestyle = 'solid'
ある列のカテゴリごとの最大値を求める	df.groupby('列A').max()
実行を異常止める	sys.exit(1)
縦棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
ファイルパスをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
縦棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
option: スラグレーにグラフの色を設定する	color = 'slategray'
カウンタの全数を使う	aCounter.total()
n個に配列をビンニングする	pd.cut(aArray, n)
勾配ブースティングで回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
データフレームの指定したカラムがどの程度、分散しているか調べる	df['列A'].var()
データフレームを四捨五入して整数型にする	df.round().astype(int)
option: ミディアムシアグリーン色を使用する	color = 'mediumseagreen'
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
シルバー色でヒストグラムを描画する	plt.hist(データ列, color='silver')
棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
配列のピアソンの積立相関係数	scipy.stats.pearsonr(配列, 配列2)
折れ線グラフの上三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
option: フォントの色をスレートブルーに指定する	color = 'slateblue'
文字列の右端から改行を消す	s.rstrip('\n')
エクセルから複数のシートをロードする	pd.read_excel('file.xlsx', sheet_name=[0, 1])
赤い左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
横棒グラフをアンティークホワイト色として描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
option: グラフの色をシーグリーンに変更する	color = 'seagreen'
縦棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
rgbの四角マーカーを配列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
カラムの各値の出現数	df[col].value_counts()
データフレームのあるカラムの秒を使う	df['列A'].dt.second
option: 文字列の示す文字コードを使用する	encoding = s
紺色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
オブジェクトに属性が存在するか確認する	hasattr(obj, プロパティ名)
データを平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データフレームの最初n行	df.head(n)
チョコレート色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
日本語が文字列に含まれるかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
指定した列のカテゴリで集計しそれぞれの標準偏差を計算する	df.groupby('列A').std()
折れ線グラフの▽印の線幅を変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
100行をデータフレームからランダムに抽出する	df.sample(100)
縦棒グラフをスレートブルー色を使って描画する	plt.bar(データ列x, データ列y, color='slateblue')
ブール型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int32)
データシリーズを丸めて、整数にする	ds.round().astype(int)
オプションで標準出力を使う	file = sys.stdout
option: グラフの線幅を3.0ポイントに設定する	linewidth = 3.0
乱数シードをnで固定化する	random.seed(n)
イテラブルを文字列に変換して空白で連結する	' '.join(map(str, iterable))
ダークオレンジにヒストグラムの色を設定する	plt.hist(データ列, color='darkorange')
折れ線グラフを濃いシアン色を使って描画する	plt.plot(データ列x, データ列y, color='darkcyan')
横棒グラフをティール色で描画する	plt.barh(データ列x, データ列y, color='teal')
線グラフの色をライトシアンに変更する	plt.plot(データ列x, データ列y, color='lightcyan')
一点鎖線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
グラフで用いるカラーテーマを指定する	sns.set(pallete=パレット名)
長さnのリストを作る	[0] * n
配列間の相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
パープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
折れ線プロットの色をカラーコードで変更する	plt.plot(データ列x, データ列y, color='#800080')
データ列間の平均絶対誤差を算出する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
棒グラフをライトコーラル色として描画する	plt.bar(データ列x, データ列y, color='lightcoral')
文字列内に小文字があるかどうか	any(c.islower() for c in s)
真部分集合か	aSet < aSet2
ヒストグラムをモカシン色として描画する	plt.hist(データ列, color='moccasin')
option: フォントの色をネイビーに設定する	color = 'navy'
ラジアンの角度を計算する	math.degrees(x)
散布図をシエナ色として描画する	plt.scatter(データ列x, データ列y, color='sienna')
データフレームを二つの列によって小さい順に並べ直して、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
ファイルを改行除外して一行ずつ読み込む	f.readline()
貝殻色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
表の行を範囲指定して抽出する	df[start:end]
実行環境はMacOS	sys.platform.startswith('darwin')
データフレームの指定した列においてどの値が頻出か見る	df['列A'].mode()
空の階層化マップ	collections.ChainMap()
現在の日付時刻	datetime.datetime.now()
リストとリストの散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
データシリーズを1000の位で丸めて、整数にする	ds.round(-3).astype(int)
option: パレットトルコイズにグラフの色を変更する	color = 'paleturquoise'
チョコレート色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
フォレストグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
2進数文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
折れ線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
文字列が全て印字できるか判定する	s.isprintable()
option: グラフの色をイエローグリーンにセットする	color = 'yellowgreen'
データフレームの指定したカラムの値をValueMapで一度に置換する	df['列A'].replace(ValueMap)
option: バツ印を描画する	marker = 'x'
t-SNEを使ってパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
横棒グラフをバイオレット色として描画する	plt.barh(データ列x, データ列y, color='violet')
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しない	s.find(sub, start, end) == -1
ファイルが存在するかテストする	os.path.exists(filepath)
カラーバーを設定する	plt.colorbar()
折れ線グラフのラベルを変更する	plt.plot(データ列x, データ列y, label='ラベル')
文字列をISO8601で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
リストとリストの散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームの中のカラムをビン数nを用いてビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの選択したカラムのNaNを直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
リストとリストについて散布図を描き、、▼マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの内である列に重複があれば、除く	df.drop_duplicates(subset='列A', inplace=True)
配列のトリム分散を見る	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
文字列は片仮名	('ァ' <= ch <= 'ン')
データフレームの選択したカラムの25パーセンタイル	df[['列A', '列B']].quantile(0.25)
CSVをn番目のカラムをインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
リストを境界値としてリストをビン分割する	pd.cut(aList, aList)
文字列を代数計算の変数にする	sympy.Symbol(s)
辞書を改行付きで文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
日付時刻データが土曜日かどうか調べる	aDatetime.weekday() == 5
二つの文字列を改行しなくてプリントする	print(value, value2, end='')
EUCでファイルを追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
オブジェクトはバイト列型	isinstance(obj, bytes)
ヒストグラムの色をミディアムターコイズにする	plt.hist(データ列, color='mediumturquoise')
線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
列の第一四分位数を算出する	df['列A'].quantile(0.25)
2つの文字列を順に出力する	print(value, value2)
ヒストグラムの色を淡い茶色に設定する	plt.hist(データ列, color='tan')
値を黄色化する	f'\033[33m{value}\033[0m'
第一コマンド引数	sys.argv[1]
データフレームを指定した列の値でグループ化し、記述統計量を求める	df.groupby('列A').describe()
列名一覧をデータ型でフィルタする	df.select_dtypes(型).columns
黒い三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
縦棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
横棒グラフをドジャーブルー色を使って描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
現在が月曜日か	datetime.datetime.today().weekday() == 0
データフレームをカラムによってグループ化し、要約統計量を算出する	df.groupby('列A').describe()
カウンタ同士で積集合を算出する	aCounter & aCounter2
データフレームの指定したカラムの中に存在するの合計をカウントする	df['列A'].isin([value]).sum()
散布図の丸マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
全要素が1の行列を作成する	np.ones(行数, 列数, dtype=np.int)
カウンタの項目のカウントを見る	aCounter[element]
option: 文字列の示す文字コードを使う	encoding = s
半透明の破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ケンドール相関係数を用いてデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
データフレームの選択した列を丸める	df[['列A', '列B']].round()
データフレームの名前リストで指定したカラムを消す	df.drop(columns, axis=1, inplace=True)
日付時刻データからn日を減算する	aDatetime - datetime.timedelta(days=n)
多次元データを多次元尺度構成法でパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
数が正の数か調べる	x > 0
データフレームの重複していない行のみ	df[~ df.duplicated(keep=False)]
データフレームをある列をキーにして並べて、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
ブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
データフレームの未入力値を第二四分位数で埋める	df.fillna(df.median())
option: グラフの色をディープスカイブルーに指定する	color = 'deepskyblue'
グラフの描画で淡くパレットを使う	sns.set(pallete='muted')
データフレームの欠損値がある箇所を	df.style.highlight_null()
ホワイトスモークにヒストグラムの色を設定する	plt.hist(データ列, color='whitesmoke')
データフレームを表示するとき、小数点以下の表示精度をn桁に指定する	pd.set_option('precision', n)
散布図を▲マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^')
n進文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
縦棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームのカラムは正規分布からどの程度、歪んでいるか確認する	df['列A'].kurt()
ライトサーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
option: 青色を用いる	color = 'blue'
リストを赤色で表示する	print(f'\033[31m{value}\033[0m')
ライトイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
ベージュ色でヒストグラムを描画する	plt.hist(データ列, color='beige')
散布図にrgbのダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
横棒グラフをプラム色として描画する	plt.barh(データ列x, データ列y, color='plum')
まとめてreplに正規表現でデータシリーズの値を置き換える	ds.replace(pattern, repl, regex=True)
リストを昇順にソートする	sorted(aList, reverse=True)
ふたつの関係が真部分集合	aSet < aSet2
モデルをあてはめる	model.fit(説明変数, 目的変数)
文字列の末尾から空白を消す	s.rstrip(' ')
カテゴリデータ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
ブラウン色でヒストグラムを描画する	plt.hist(データ列, color='brown')
option: ライトコーラル色を用いる	color = 'lightcoral'
t-SNEでパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データシリーズのタイムゾーンを日本に指定する	ds.tz_convert('Asia/Tokyo')
ヒストグラムの色をパウダーブルーに指定する	plt.hist(データ列, color='powderblue')
文字列が漢字かどうかテストする	('\u4E00' <= ch <= '\u9FD0')
行列の列ごとの最大を求める	np.max(aArray, axis=0)
文字列をケースを無視して正規表現で区切る	re.split(pattern, s, flags=re.IGNORECASE)
xが一桁の数か	-9 <= x <= 9
ダークカーキ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
関数によってデータフレームをグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
下限指定をしたカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
サポートベクター回帰モデルを作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列をASCIIコード列にする	[ord(ch) for ch in s]
グラフで使う題名を設定する	plt.title('グラフの名称')
配列の列ごとの合計値を求める	np.sum(aArray, axis=0)
セットの浅いコピー	aSet.copy()
データフレームを丸めて、整数にする	df.round().astype(int)
データフレームをSJISで出力する	df.to_csv('file.csv', encoding='shift_jis')
ダークマゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
縦棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
列を両端キューに変換する	collections.deque(iterable)
横棒グラフをゴーストホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
オブジェクトの無限イテラブル	itertools.repeat(element)
データフレームの選択した列の欠損値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
第２引数で指定されたファイルの名前	sys.argv[1]
文字列中の平仮名をカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
option: 線の種類を点線に変更する	linestyle = 'dotted'
ゴーストホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
二つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
option: 行を連番に指定する	index_col = None
データフレームを表示するとき、表示する列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
option: オーキッドを用いる	color = 'orchid'
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategray')
ラインを赤い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ダイアモンド印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategrey')
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategray')
数列とリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
日付時刻データを浮動小数点数にする	aDatetime.timestamp()
1行だけ標準入力から読む	sys.stdin.readline()
文字列中にひとつでも非大文字が含まれるか	any(not c.isupper() for c in s)
青緑色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
文字列の右端からタブを取り除く	s.rstrip('\t')
タン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
データフレームの中の列をビン数nを用いてビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
目盛線	plt.grid(linewidth=3.0)
option: サンディーブラウンにグラフの色を設定する	color = 'sandybrown'
折れ線グラフの色を珊瑚に指定する	plt.plot(データ列x, データ列y, color='coral')
イテラブルとリストについて散布図を描画して下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図をダークターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
行列のユニークな要素	np.unique(aArray)
全十六進数字	string.hexdigits
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
散布図のダイアモンドマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
一点鎖線に線グラフの線種を設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフをトマト色として描画する	plt.plot(データ列x, データ列y, color='tomato')
データフレームの選択した列の相関行列をピアソンとして求める	df[['列A', '列B']].corr(method='pearson')
8進数の文字列をバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
option: ビスク色を用いる	color = 'bisque'
シエナ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
オブジェクトはタプル	isinstance(obj, tuple)
折れ線グラフの色をロイヤルブルーにする	plt.plot(データ列x, データ列y, color='royalblue')
option: フォントの色をダークバイオレットに変更する	color = 'darkviolet'
カウンタの正の回数のみ残す	+aCounter
実線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
文字列に列を変換して、空白で連結する	' '.join(map(str, iterable))
棒グラフの色を深紅にする	plt.bar(データ列x, データ列y, color='crimson')
データシリーズの欠損値をモードで補う	ds.fillna(ds.mode().iloc[0])
回帰モデルを当てはめる	model.fit(説明変数, 目的変数)
イテラブルを文字列リストに変換して、'改行によって結合する	'\n'.join(map(str, iterable))
集合から別のセットの要素を取り除く	aSet.difference_update(aSet2)
横方向に二つのデータフレームをマージする	pd.merge(df, df2)
option: 色を淡いピンク色に設定する	color = 'lightpink'
プロットにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
線グラフの色をダークオーキッドにする	plt.plot(データ列x, データ列y, color='darkorchid')
昨日の日付を求める	datetime.date.today() - datetime.timedelta(days=1)
乱数の行列を作る	np.random.random((行数, 列数))
データシリーズのNaNを50パーセンタイルに指定する	ds.fillna(ds.median())
線グラフの色をサンディーブラウンに指定する	plt.plot(データ列x, データ列y, color='sandybrown')
インデント幅nで辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ヒストグラムの色をライトスカイブルーにする	plt.hist(データ列, color='lightskyblue')
分数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
整数nの二進文字列を見る	bin(n)[2:]
配列のトリム平均を計算する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
句読点文字を全て求める	string.punctuation
option: ミディアムオーキッド色を使用する	color = 'mediumorchid'
タプルの先頭の値	aTuple[0]
データフレームの2つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
シルバー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
折れ線グラフの色をパールバイオレットレッドにセットする	plt.plot(データ列x, データ列y, color='palevioletred')
配列をリストを境界値として分割する	pd.cut(aArray, aList)
ライトグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
イテラブルの各要素をキューの末尾に追加する	deq.extend(iterable)
データフレームのあるカラムの中に日付データと文字列が存在するかどうか調べる	df['列A'].isin([value, value2])
散布図に赤い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='r')
ベクトルの行ごとの最大値	np.max(aArray, axis=1)
option: 線種を破線に設定する	linestyle = 'dashed'
集合が空でないかどうか判定する	len(aSet) != 0
折れ線グラフの星マーカーを青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
ファイルが存在する	os.path.exists(filepath)
option: サーモンに色を設定する	color = 'salmon'
散布図の大バツ印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
線グラフの色をコーラルに変更する	plt.plot(データ列x, データ列y, color='coral')
ヒストグラムをディムグレー色を用いて描画する	plt.hist(データ列, color='dimgray')
option: ミディアムブルーに色を指定する	color = 'mediumblue'
線グラフの色をオレンジレッドに変更する	plt.plot(データ列x, データ列y, color='orangered')
シードをnで初期化する	random.seed(n)
option: エンコーディングを文字コードtextにする	encoding = text
データフレームの欠損値を数値で埋める	df.fillna(x)
散布図に星印を使う	plt.scatter(データ列x, データ列y, marker='*')
データ列をフォーマットでタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
折れ線グラフの色をパパイヤウィップに変更する	plt.plot(データ列x, データ列y, color='papayawhip')
option: 色をライトサーモンに設定する	color = 'lightsalmon'
平均と分散でデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ファイル名がTSVファイルかどうか調べる	filename.endswith('.tsv')
縦棒グラフを紺碧色を使って描画する	plt.bar(データ列x, データ列y, color='azure')
棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
折れ線グラフにポイントマーカーを加える	plt.plot(データ列x, データ列y, marker='.')
サンディーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
変数名をキーとして、マップ	dict(name=element)
パウダーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
データフレームの指定したカラムの欠損値をxに変更する	df['列A'].fillna(x)
データ列を横に並べて柱状図にする	plt.hist([データ列, データ列], color=['b', 'r'])
実数のタンジェントの逆数	math.atan(x)
赤いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
リストと数列についての散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
赤にヒストグラムの色を指定する	plt.hist(データ列, color='red')
正弦	math.sin(x)
データフレームが重なるいるかどうか	df.duplicated()
ファイルの拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
正則化付き線形回帰分析を行う	model = sklearn.linear_model.ElasticNet()
イテラブルを文字列リストに変換して、部分文字列で結合する	sub.join(map(str, iterable))
グラフを全般的に淡くする	sns.set(pallete='muted')
縦棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
イテラブルと配列についての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
y軸だけ目盛り線	plt.grid(axis='y')
option: ベクトルのデータ型を指定する	dtype = bool
棒グラフをブルーバイオレット色を使って描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ファイル全体をリストとして読み込む	f.readlines()
実数の指数を求める	math.frexp(x)[1]
棒グラフをホワイトスモーク色として描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
ベージュ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
計数器をタプルから作る	collections.Counter(aDict)
オブジェクトは文字列か調べる	isinstance(obj, str)
データフレームの指定したカラムの中にある文字列との合計を調べる	df['列A'].isin([value, value2]).sum()
データフレームが正規分布からどの程度、尖っているか調べる	df.skew()
小麦色色でヒストグラムを描画する	plt.hist(データ列, color='wheat')
青緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
横軸の目盛りに文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
文字列の中のASCII限定として正規表現によるマッチを見る	re.findall(pattern, s, flags=re.ASCI)
２つのオブジェクトが等しい	obj == obj2
横棒プロットをプロットしてラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
option: 耐火レンガを用いる	color = 'firebrick'
ヒストグラムの線の種類を点線に変更する	plt.hist(データ列, linestyle='dotted')
縦棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
平均値でデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(df['列A'].mean())
フローラルホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
ベクトルの行ごとの分散	np.var(aArray, axis=1)
八進数字を見る	string.octdigits
棒グラフをミディアムスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
ファイルを閉じる	f.close()
現在をタプルに変換する	datetime.datetime.today().timetuple()
ダークブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
nとn2の商を求める	n / n2
nとn2が同じ値か調べる	n == n2
データフレームの選択した列を千の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
整数nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
カウンタの文字列一覧を求める	aCounter.keys()
nが-9以上、9以下か	-9 <= n <= 9
x軸の目盛りに文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
作画で使うフォントを指定する	sns.set(font=フォント名)
option: グラフの色をアンティークホワイトに指定する	color = 'antiquewhite'
線グラフを破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームを線形回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
配列から重複を除いた配列を初期化する	np.unique(aArray)
option: グラフの色をライトグレーに変更する	color = 'lightgrey'
棒グラフをライム色を用いて描画する	plt.bar(データ列x, データ列y, color='lime')
データフレームの指定した列の値が未入力値かどうか調べる	df['列A'].isna()
パラメータについて数式の微分を行う	sympy.diff(e, z)
集合から別のセットとの共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
スライドにプロットを設定する	sns.set(context='talk')
縦棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
折り返しをオフに指定する	pd.set_option('expand_frame_repr', False)
パールバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
ファイルを追加モードを用いて開く]	open(filepath, mode='a')
日付データをタプルにする	aDate.timetuple()
列の各データが何回出現するか見る	df[col].value_counts()
ミディアムターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
二つの集合の差集合を計算する	aSet.difference(aSet2)
ひとつでも非アルファベットが文字列中に含まれる	any(not c.isalpha() for c in s)
要素∈セット	element in aSet
綺麗なグラフを用いる準備をする	import seaborn as sns
option: パレットトルコイズ色を使用する	color = 'paleturquoise'
文字列に漢字が使われているかどうか	re.search('[\u4E00-\u9FD0]', s)
多次元データを特異値分解としてパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
右三角マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
nをn2だけ増やす	n += n2
イエローグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
実数のサインの逆数を求める	math.asin(x)
クラス分類をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
ファイルを開く]	open(filepath)
option: ライムグリーン色を用いる	color = 'limegreen'
黒い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
円グラフを時計回りに描く	plt.pie(データ列, startangle=90, counterclock=False)
ラインを半透明の点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
rgbに棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
実数を浮動小数点数に掛ける	x * y
カウントプロットをプロットする	sns.countplot(x='列名', data=df)
配列の相関係数を計算する	scipy.stats.pearsonr(配列, 配列2)
ヒストグラムの色をパープルにセットする	plt.hist(データ列, color='purple')
option: 丸印を使う	marker = 'o'
マップからキーで指定された項目をポップする	aDict.pop(key)
折れ線グラフのバツマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
リストの末尾にリストを追加し、広げる	aList.extend(aList2)
縦棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
ドジャーブルー色でヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
双方向キューの要素を右にn個分ローテンションする	deq.rotate(n)
ゼロ埋めされた８ビット整数型の行列	np.zeros(要素数, dtype=np.int8)
文字列のケースをする	s.casefold()
行列の行ごとの分散を計算する	np.var(aArray, axis=1)
ひとつでもアスキー文字が文字列内にある	any(c.isascii() for c in s)
データフレームの一部の列の欠損値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
ネイビー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
データ列と配列の散布図をプロットして、バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='gray')
リストとリストについて散布図を描いて、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
データシリーズがどの程度、分散しているか確認する	ds.var()
データフレームから重複を認めてランダムに10行をサンプリングする	df.sample(10, replace=True)
データフレームの最初100行を見る	df.head(100)
クラス分類の分類精度を算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
リストとイテラブルについて散布図を描いて、バツマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列の先頭の空白やタブを取り除く	s.lstrip()
option: レベッカパープルを用いる	color = 'rebeccapurple'
データフレームの数値を一度に小数点以下n桁で丸める	df.round(n)
棒グラフをチョコレート色を用いて描画する	plt.bar(データ列x, データ列y, color='chocolate')
折れ線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
ファイルにxを文字列に変換して書く	f.write(str(x))
環境がMacOSか判定する	sys.platform.startswith('darwin')
データフレームの指定した列を千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
nを十六進数リテラルに変換する	hex(n)
散布図に黒いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
グラフのパレットを全般的に明るくする	sns.set(pallete='bright')
ローングリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
散布図を三角マーカーで描画する	plt.scatter(データ列x, データ列y, marker='^')
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
折れ線グラフの色をスノーに指定する	plt.plot(データ列x, データ列y, color='snow')
値をシアンでプリントできる文字列にする	f'\033[36m{value}\033[0m'
ロージーブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='rosybrown')
option: マーカーを三角に設定する	marker = '^'
グラフに水平方向の点線を設定する	plt.axhline(y=0, linestyle='dotted')
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
０で全要素を初期化した符号なし８ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.uint8)
ふたつの集合が互いに素かどうか確認する	aSet.isdisjoint(aSet2)
スクリプトファイルと同じフォルダのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
アクア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
アクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
分数を用いる	import fractions
組を引数として展開してプリントする	print(*aTuple, sep=',')
option: ブルーバイオレットにフォントの色を変更する	color = 'blueviolet'
散布図の四角印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
文字列を最後から空白で分割する	s.rsplit()
ある列のカテゴリごとの最小値を算出する	df.groupby('列A').min()
散布図を下三角印で描画する	plt.scatter(データ列x, データ列y, marker='v')
現在の作業ディレクトリを求める	os.getcwd()
棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
文字列をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
ヒストグラムの色を白に指定する	plt.hist(データ列, color='white')
指定した列のカテゴリで集計し、平均値を求める	df.groupby('列A').mean()
ダークマゼンタ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
折れ線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームのカラムの最頻値を使う	mode, count = scipy.stats.mode(df['列A'])
ヒストグラムをホットピンク色を使って描画する	plt.hist(データ列, color='hotpink')
nが偶数かテストする	n % 2 == 0
option: シャルトリューズ色を用いる	color = 'chartreuse'
縦棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
nの無限な数列を得る	itertools.repeat(n)
グラフの縦軸の名前をuntitledに設定する	plt.ylabel('y軸ラベル')
四分位数ごとに配列をビン分割する	pd.qcut(aArray, 4)
データフレームをグループ化し、平均値を求める	df.groupby('列A').mean()
双方向キューの先頭に数値を追加する	deq.appendleft(element)
散布図を黄色色を使って描画する	plt.scatter(データ列x, データ列y, color='yellow')
ひとつでも空白が文字列内に含まれるかどうか調べる	any(c.isspace() for c in s)
折れ線グラフのバツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
option: ライムを使う	color = 'lime'
スタックの末尾に列のデータを順に付け加える	deq.extend(iterable)
散布図を白色として描画する	plt.scatter(データ列x, データ列y, color='white')
線グラフの色をディープスカイブルーに変更する	plt.plot(データ列x, データ列y, color='deepskyblue')
日付時刻データにn日を加える	aDatetime + datetime.timedelta(days=n)
ヒストグラムの色をライトイエローに指定する	plt.hist(データ列, color='lightyellow')
オレンジレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
折れ線グラフの色をダークマゼンタに変更する	plt.plot(データ列x, データ列y, color='darkmagenta')
シーケンスとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
辞書を多重集合に変換する	collections.Counter(aDict)
option: ディムグレーにグラフの色をセットする	color = 'dimgray'
多次元データを特異値分解で淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
縦棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
実数のルート	math.sqrt(x)
文字列中の部分文字列の登場	s.count(sub)
カウンタの全数を求める	aCounter.total()
データフレームの指定したカラムの欠損値をモードに設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
日付時刻データの月を見る	aDatetime.month
ライトイエロー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
散布図をフォレストグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
データ列と数列の散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
option: フォントの色をシャルトリューズに設定する	color = 'chartreuse'
パスの区切り記号	os.sep
データフレームの未入力値をその最頻値で補う	df.fillna(df.mode().iloc[0])
部分文字列が文字列の終了位置より前に存在しないか	s.find(sub, 0, end) == -1
列のSkewness	df['列A'].skew()
option: 色をマゼンタにセットする	color = 'magenta'
カウンタを辞書を用いて更新する	aCounter.update(aDict)
データフレームの列を度数分布図として描画する	plt.hist(df[column])
y座標の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
折れ線グラフの▲マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
実数の３乗	x ** 3
カンマを用いて文字列を区切って、列挙する	s.split(',')
option: ライトゴールドロディイエロー色を用いる	color = 'lightgoldenrodyellow'
折れ線グラフの色をドジャーブルーに変更する	plt.plot(データ列x, データ列y, color='dodgerblue')
既存のファイルを追加できるようにEUCでオープンする]	open(filepath, mode='a', encoding='euc_jp')
ライトスレイグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
nわるn2を計算する	n / n2
ダークカーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
オブジェクトは組の要素か調べる	element in aTuple
全要素を０で初期化したブール型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
折れ線グラフの色をスチールブルーにする	plt.plot(データ列x, データ列y, color='steelblue')
本日の日付を使う	datetime.date.today()
リストの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
タイタニック号のデータセットからデータフレームをロードする	df = sns.load_dataset('titanic')
ガウス過程分類器を準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
日付データにn週間分加算する	aDate + datetime.timedelta(weeks=n)
ヒストグラムのビンを設定する	plt.hist(データ列, bins=区関数)
データフレームのある列をNaNも加えてワンホット・ベクトルにする	pd.get_dummies(df['列A'], dummy_na=True)
option: グラフの色をサンディーブラウンに変更する	color = 'sandybrown'
複数のデータフレームを縦向きに一つにする	pd.concat([df, df2, df3], axis=0)
行列間の各要素の最大公約数	np.gcd(aArray, aArray2)
文字列の先頭でパターンに複数行対応としてマッチするか確認する	re.match(pattern, s, flags=re.MULTILINE)
コーンズシルクにヒストグラムの色を変更する	plt.hist(データ列, color='cornsilk')
赤い左三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
正規表現を複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データフレームからカテゴリデータのカラム名の一覧を使う	df.select_dtypes('object').columns
要素がタプルの値に含まれていないかどうか	element not in aDict.values()
ヒストグラムの色をスレートブルーにセットする	plt.hist(データ列, color='slateblue')
横棒グラフを描画し、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
rgbの大バツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図に赤い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
赤い菱形マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='r')
nからn2を減算する	n - n2
option: 追加用にする	mode = 'a'
リストを順にプリントする	print(*aList)
データフレームを二つの列によってまとめた表を求める	df.groupby(['列A', '列B'])
指定した列で集計し最小値を求める	df.groupby('列A').min()
データフレームのn行目より前選択する	df[:n]
実測値を回帰モデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
ミディアムオーキッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
タン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
ヒストグラムをダークシアグリーン色を用いて描画する	plt.hist(データ列, color='darkseagreen')
ヒストグラムをライトサーモン色として描画する	plt.hist(データ列, color='lightsalmon')
option: スチールブルーを用いる	color = 'steelblue'
線グラフの色をグリーンに変更する	plt.plot(データ列x, データ列y, color='green')
実行環境の再帰の最大回数	sys.getrecursionlimit()
リストとリストの散布図を描画し、、左三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
日付データは日付データより前か調べる	aDate < aDate2
option: コロンを分割記号で使う	sep = ':'
リストと配列についての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ファイルパスからストリームを読み込み、fileとする	file = open(filepath)
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightseagreen')
配列の歪度を計算する	scipy.stats.skew(配列, bias=False)
散布図を赤い星マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
ひとつでも空白が文字列内に含まれる	any(c.isspace() for c in s)
データフレームの指定したカラムの文字列を未入力値に変換する	df['列A'].replace(値, np.nan)
option: 色をシーグリーンに設定する	color = 'seagreen'
ファイルパスの拡張子	os.path.splitext(filepath)[1].lstrip('.')
逆双曲線余弦を求める	math.acosh(x)
データフレームを小さい順に破壊的に複数の列によってソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
列を配列に変換する	np.array(iterable)
ボックスチャートを描画し、平均線を加える	plt.boxplot(データ列, meanline=True)
折れ線グラフのポイントマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
データフレームの指定した列のSkewness	df['列A'].skew()
option: グラフの色をスカイブルーにセットする	color = 'skyblue'
シーケンスを2回あわせた直積	itertools.product(iterable, repeat=2)
データフレームのNaNを最頻値に指定する	df.fillna(df.mode().iloc[0])
線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
データフレームの一部のカラムの標準偏差を算出する	df[['列A', '列B']].std()
表計算から複数のシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
行列のユニークな要素とそのインデックスを計算する	u, indices = np.unique(aArray, return_index=True)
黒い四角マーカーを数列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='s', c='k')
t-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
文字列が空白からなるか調べる	s.isspace()
青い一点鎖線として数列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
昨日の日付を使う	datetime.date.today() - datetime.timedelta(days=1)
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフの大バツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
両端キューの最初に列の各要素を順に追加する	deq.extendleft(iterable)
イテラブルからn個サンプリングする	random.sample(iterable, k=n)
データシリーズをPandasの日付型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
折れ線グラフをダークブルー色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームは正規分布からどの程度歪んでいるか調べる	df.kurt()
パープルにヒストグラムの色を変更する	plt.hist(データ列, color='purple')
三自然数のLCMを求める	math.lcm(n, n2, n3)
データフレームのカラム名一覧で指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
データ列の推移を色付きの一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: ミディアムスプリンググリーンを使う	color = 'mediumspringgreen'
ヒストグラムをライトグレー色を用いて描画する	plt.hist(データ列, color='lightgrey')
rgbの左三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
year年をタイムスタンプにする	datetime.datetime(year=year, month=1, day=1)
改行なしに数値をプリントする	print(value, end='')
option: ヘッダを連番に設定する	header = None
文字列の大文字と小文字を逆にする	s.swapcase()
双曲線正弦の逆数	math.asinh(x)
貝殻色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*')
半透明の一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
nが一桁の整数	-9 <= n <= 9
改行なしに1行分標準入力から読み込む	sys.stdin.readline().rstrip()
二つの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
OSがWindowsか	sys.platform.startswith('win32')
最大長nの双方向キューをイテラブルから作成する	collections.deque(iterable, maxlen=n)
リストを等間隔でn個に分割する	pd.cut(aList, n)
散布図にダイアモンド印を用いる	plt.scatter(データ列x, データ列y, marker='D')
等量でデータフレームの中のカラムをn個にビン分割する	pd.qcut(df[col], n)
配列としてデータフレームのあるカラムを取り出す	df['列A'].values
データフレームを各カテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データシリーズは何秒か見る	ds.dt.second
二つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
ホットピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
nの桁数を求める	len(str(n))
イテラブルとリストについて散布図を描いて、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
線グラフをダークマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
文字列の左端から空白を除去する	s.lstrip(' ')
実数の自然対数を求める	math.log(x)
ライムグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='limegreen')
データフレームの一部の列の未入力値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
オブジェクトが組に含まれないか調べる	element not in aTuple
イテラブルにシーケンスを続けた列を求める	itertools.chain(iterable, iterable2)
フローラルホワイト色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
option: モカシン色を用いる	color = 'moccasin'
データフレームのあるカラムが何分か知る	df['列A'].dt.minute
浮動小数点数が非数か調べる	math.isnan(x)
ベクトルの値を変更する	aArray[行番号, 列番号] = 指定の値
データフレームの指定したカラムの未入力値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
列の各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
rgbの菱形マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
タブで区切って2つの文字列をプリントする	print(value, value2, sep='\t')
散布図を暗い赤色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームの選択したカラムの未入力値をxで置換する	df[['列A', '列B']].fillna(x)
タイムスタンプデータにn日分、加算する	aDatetime + datetime.timedelta(days=n)
ヒストグラムをパールゴールデンロッド色を使って描画する	plt.hist(データ列, color='palegoldenrod')
折れ線グラフをライトコーラル色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームの一部の列の相関行列	df[['列A', '列B']].corr()
ヒストグラムをオレンジレッド色として描画する	plt.hist(データ列, color='orangered')
多次元データを多次元尺度構成法で濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
列のUNIX秒をdatetime64型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
カウンタの項目一覧を使う	aCounter.keys()
列の欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
文字列をdatetime64型に変換する	pd.to_datetime(日付を表現した文字列)
カウンタの項目をカウントだけ列挙する	aCounter.elements()
x座標の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
タイムスタンプデータををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
グラフをポスター用に指定する	sns.set(context='poster')
データフレームの指定した列はどの程度、正規分布から尖っているか見る	df['列A'].skew()
棒グラフをグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='grey')
BOM付きでファイルをオープンする]	open(filepath, encoding='utf_8_sig')
option: ダークグレーにグラフの色を指定する	color = 'darkgray'
縦棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
整数nの2進表現	bin(n)
日付データにn秒分、加える	aDate + datetime.timedelta(seconds=n)
黒い大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフのポイント印の大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
散布図の▽マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
配列のピアソンの相関係数を算出する	scipy.stats.pearsonr(配列, 配列2)
全要素を1で初期化した行列を作る	np.ones(行数, 列数, dtype=np.int)
ヒストグラムの線の種類を破線に指定する	plt.hist(データ列, linestyle='dashed')
データシリーズの欠損値を最小値に指定する	ds.fillna(ds.min())
赤い左三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
組を逆順にする	aTuple[::-1]
２つのデータフレームをカラム名を指定して左ジョインする	pd.merge(df, df2, on='列A', how='left')
3つ並べてヒストグラムをプロットする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームのカラム間の相関行列を計算する	df.corr()
option: スレートブルー色を用いる	color = 'slateblue'
option: ライトコーラルを使う	color = 'lightcoral'
集合のすべての要素が別のセットに含まれるかどうか調べる	aSet.issubset(aSet2)
散布図に菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
ディムグレーにヒストグラムの色を変更する	plt.hist(データ列, color='dimgray')
ファイルを追加モードを使ってオープンする]	open(filepath, mode='a')
折れ線グラフをゴーストホワイト色として描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
ライトグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightgray')
両端キューの要素を反転する	deq.reverse()
nからn2までの整数列を見る	list(range(n, n2+1))
ライムグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
二つの文字列は等しくないか確認する	s != s2
折れ線グラフの三角印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: 色をライトシアンに指定する	color = 'lightcyan'
折れ線グラフのダイアモンドマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
option: ライトグリーンを使う	color = 'lightseagreen'
文字列中に部分文字列がいくつか存在するかカウントする	s.count(sub)
ビン数nとして等しい量になるように列をビン分割する	pd.qcut(ds, n)
ふたつの列からグループ化し個数を算出する	df.groupby(['列A', '列B'], as_index=False).count()
イテラブルを文字列リストに変換してタブを用いて連結する	'\t'.join(map(str, iterable))
データフレームのあるカラムをdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
データフレームの中に含まれる日付データの合計を数える	df.isin([value]).sum()
eの乗数を計算する	math.exp(x)
浮動小数点数の整数部を計算する	math.modf(x)[1]
データフレームの一部のカラムの分散	df[['列A', '列B']].var()
折れ線グラフのダイアモンドマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
カウンタのボトムを列挙する	aCounter.most_common()[:-n-1:-1]
グラフで使う横軸のキャプションを設定する	plt.xlabel('x軸ラベル')
option: ペールグリーンを使う	color = 'palegreen'
多次元データを主成分分析として淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
データシリーズの欠損値を最頻値に減らす	ds.fillna(ds.mode().iloc[0])
ヒストグラムをフローラルホワイト色を用いて描画する	plt.hist(データ列, color='floralwhite')
ライムグリーン色でヒストグラムを描画する	plt.hist(データ列, color='limegreen')
リストとイテラブルの散布図をプロットして、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ロイヤルブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
縦棒グラフをプロットして、バーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
データフレームのある列の中にいくつNaNがあるか求める	df['列A'].isna().sum()
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategray')
横棒グラフをダークグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgray')
配列を四分位数で分割する	pd.qcut(aArray, 4)
オレンジ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
横棒グラフを青色として描画する	plt.barh(データ列x, データ列y, color='blue')
折れ線グラフをライトスチールブルー色を使って描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
未初期化のベクトルを作成する	np.empty(要素数, dtype=np.int)
正規分布に基づく確率密度関数を使う	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
option: 色をダークグレーに設定する	color = 'darkgray'
データフレームの中の列をビン数nとしてビニングする	pd.cut(df[col], n)
データフレームの列がどの程度分散しているか見る	df['列A'].var()
ヒストグラムの色を紺碧にセットする	plt.hist(データ列, color='azure')
あるカラムを十の位で四捨五入して、整数にする	df['列A'].round(-1).astype(int)
棒グラフを淡いピンク色色を使って描画する	plt.bar(データ列x, データ列y, color='lightpink')
データフレームを複数の列によってソートし、、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
ファイルパスの絶対ファイルパス	os.path.abspath(filepath)
散布図を黒い丸マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームの次元数	df.shape
文字列を最後の部分文字列で二分し、残りの文字列を見る	s.rpartition(sub)[-1]
日付時刻データが日付時刻データよりあと	aDatetime > aDatetime2
データフレームの選択したカラムがどの程度、分散しているか調べる	df[['列A', '列B']].var()
縦方向に三つのデータフレームを結合する	pd.concat([df, df2, df3], axis=0)
黒い▼マーカーをリストとデータ列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
日付データからn日分減算する	aDate - datetime.timedelta(days=n)
クラス分類の偽陽性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: ライトスレイグレー色を使用する	color = 'lightslategray'
nが1、もしくは2もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
文字列のサフィックスは部分文字列かどうか調べる	s.endswith(sub)
乱数の行列を初期化する	np.random.random((行数, 列数))
ユニコードを文字に変換する	chr(unicode)
ヒストグラムの色をダークオーキッドに変更する	plt.hist(データ列, color='darkorchid')
文字列のケースを逆にする	s.swapcase()
紺碧色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
ベージュ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
カテゴリで色分けして、データフレームの全カラムの相関をプロット化する	sns.pairplot(df, hue='カテゴリ列')
サイン	math.sin(x)
乱数生成系列を初期化する	random.seed()
二進数文字列を整数にする	int(s, 2)
プロットの描画で濃く色調を使う	sns.set(pallete='deep')
ヒストグラムの色をミントクリームに変更する	plt.hist(データ列, color='mintcream')
エクセルファイルからシートを指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
option: グラフの種類を一点鎖線に変更する	linestyle = 'dashbot'
グラフのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
マッピングの項目名を要素に設定する	aDict[key] = element
ヒストグラムの色をシャルトリューズにセットする	plt.hist(データ列, color='chartreuse')
三つの変数を表示する	print(value, value2, value3)
オブジェクトがリストに含まれるか判定する	element in aList
ベクトルの計算を行う	import numpy as np
データフレームのカラムの要約統計量	df['列A'].describe()
表データのあるカラムの日にち	df['列A'].dt.day
文字列の両端から空白と改行を消す	s.strip()
ひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
データフレームの指定した列の値をまとめてValueMapで置換する	df['列A'].replace(ValueMap)
データフレームの最初	df.head()
ヒストグラムの色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
ダークグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
実数で実数を割って、切り捨てる	x // y
行列の行ごとの最小値を求める	np.min(aArray, axis=1)
回帰木をグラフ化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
option: コーラル色を使用する	color = 'coral'
サブクラスかどうか	issubclass(サブクラス, クラス)
データフレームのカラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
変数を水色にする	f'\033[36m{value}\033[0m'
プロットで使うフォントを指定する	sns.set(font=フォント名)
上三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^')

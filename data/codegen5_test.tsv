少ない順にカウンタをリストとして得る	aCounter.most_common()[::-1]
白色で文字列を出力する	print(f'\033[37m{value}\033[0m')
データフレームから重複したデータをドロップして、更新する	df.drop_duplicates(inplace=True)
データフレームのそれぞれのグループの平均値	df.groupby(column).mean()
複素数	complex(x, y)
オレンジレッドにヒストグラムの色を設定する	plt.hist(データ列, color='orangered')
nがn2より大きいか確認する	n > n2
option: グラフの色を黄色に指定する	color = 'yellow'
ヒストグラムをサドルブラウン色として描画する	plt.hist(データ列, color='saddlebrown')
浮動小数点数を整数に変換する	int(x)
まとめてデータフレームの列名を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
文字列を部分文字列で二つに分ける	s.partition(sub)
キューのn番目に値を差し込む	deq.insert(n, element)
集合から何でもいいからひとつ取り出す	aSet.pop()
箱ひげ図をプロットして平均を加える	plt.boxplot(データ列, showmeans=True)
ゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームの列の文字列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
カウンタ間でユニオン	aCounter | aCounter2
要素は集合に含まれる	element in aSet
実行時の標準出力の出力先がターミナルか判定する	os.isatty(sys.stdin.fileno())
散布図をペールグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='palegreen')
二つの変数をスラッシュで区切ってプリントする	print(value, value2, sep='/')
ロッソ回帰分析を行う	model = sklearn.linear_model.Rosso(alpha=正則化項)
大きい順にデータフレームを列を用いてによってソートする	df.sort_values(by=column, ascending=False)
小数点数のタンジェントを計算する	math.tan(x)
に箱ひげ図でデータフレームを図示する	sns.boxplot(x='カテゴリ列', y='列', data=df)
マッピングを浅くコピーする	dict(aDict)
ヒストグラムを実線としてプロットする	plt.hist(データ列, linestyle='solid')
データフレームのリスト列の欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
疑似乱数	random.random()
真下位集合かどうか確認する	aSet < aSet2
イテラブルを累加したイテラブルを求める	itertools.accumulate(iterable)
データフレームの中の列と列に重複があれば、落とす	df.drop_duplicates(subset=column)
グラフの見栄えをよくする	import seaborn as sns
データ列の値をValueMapでまとめて置換する	ds.replace(ValueMap)
データフレームの未入力値を最大値で埋める	df.fillna(df.max())
option: 貝殻にグラフの色を設定する	color = 'seashell'
データ列とリストについての散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
ミントクリーム色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
UTF8でファイルを開く]	open(filepath, encoding='utf-8')
aListn番目から値を除く	aList.pop(n)
点線でリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
カウンタからマッピングを引く	aCounter.subtract(aDict)
既存の行列を元にして全要素が1の配列	np.ones_like(aArray)
分類モデルを当てはめる	model.fit(説明変数, 目的変数)
イテラブルを文字列リストに変換して'改行を用いて連結する	'\n'.join(map(str, iterable))
ブランチドアーモンド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
ゴーストホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
折れ線グラフの三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ヒストグラムをミディアムパープル色を用いて描画する	plt.hist(データ列, color='mediumpurple')
リストとリストについて散布図をプロットし、文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
アリスブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
データフレームからランダムに重複を認めてn行をサンプリングする	df.sample(n, replace=True)
折れ線グラフの色をバイオレットに変更する	plt.plot(データ列x, データ列y, color='violet')
列の重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
option: ピンクを用いる	color = 'pink'
2つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
半透明の点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: オレンジレッドに色を変更する	color = 'orangered'
半透明の実線を使って線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: フローラルホワイトにフォントの色を変更する	color = 'floralwhite'
文字列が無限に続くイテラブル	itertools.repeat(element)
コレクションを用いる	import collections
整数nを16進数文字列に変換する	hex(n)[2:]
nを符号付きで長さn2のバイナリにする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
ファイルをバイナリモードを用いてオープンして]、fとする	f = open(filepath, mode='rb')
線グラフの色をミディアムアクアマリンにセットする	plt.plot(データ列x, データ列y, color='mediumaquamarine')
浮動小数点数を実数で割った剰余	math.remainder(x, x2)
option: オレンジに色を設定する	color = 'orange'
カウンタの最頻出な項目を算出する	aCounter.most_common()[0]
文字列を改行で区切り、文字列リストにする	s.splitlines()
文字列が部分文字列で終わるか	s.endswith(sub)
サーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
リストから文字列を除く	aList.remove(element)
項目名が辞書にあるかどうか	key in aDict
散布図をパパイヤウィップ色として描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
今日が何年か知る	datetime.datetime.today().year
オブジェクトの型を調べる	type(obj)
ヒストグラムを描画し、、ビン数を設定する	plt.hist(データ列, bins=区関数)
棒グラフをミディアムスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
日付データが火曜日か判定する	aDate.weekday() == 1
データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
データフレームの列がxかつ列がx2であるデータを抽出する	df[(df[column] == x) & (df[column2] == x2)]
縦棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
集合が空かどうか調べる	len(aSet) == 0
数列の出現頻度を可視化する	plt.hist(データ列)
カーキ色でヒストグラムを描画する	plt.hist(データ列, color='khaki')
アイボリー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
データフレームのカラムを百の位で四捨五入して、整数型にする	df[col].round(-2).astype(int)
0から始まる無限の整数リスト	itertools.count()
nがn2かどうか	n == n2
option: 淡い茶色を使用する	color = 'tan'
シーケンスを双方向キューに変換する	collections.deque(iterable)
イテラブルと配列の散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
整数nを2進数文字列に変換する	bin(n)[2:]
option: 色を淡いピンク色に指定する	color = 'lightpink'
折れ線グラフの▼マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ライトスレイグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
列とイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
散布図の菱形マーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ファイルパスをバイナリ用に開いて]fとする	f = open(filepath, mode='rb')
データ列をビン数nで分割する	pd.cut(ds, n)
現在の年数	datetime.datetime.today().year
文字列の中の大文字・小文字を無視して正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
option: ダークカーキを用いる	color = 'darkkhaki'
文字列の最初	s[0]
リストと配列について散布図をプロットして、マーカーを三角に指定する	plt.plot(データ列x, データ列y, marker='^')
ダーク・スラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
option: ライムグリーン色を用いる	color = 'limegreen'
縦軸の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
カテゴリ別でグループ化してに箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
表データの列が文字列で始まるデータを抽出する	df[df[column].str.startswith(s)]
ファイルパスをベース名と拡張子に分割する	os.path.splitext(filepath)
ヒストグラムをスラグレー色を用いて描画する	plt.hist(データ列, color='slategrey')
リストをリストを境界値として分割する	pd.cut(aList, aList)
データフレームの指定された列名一覧の列を抽出する	df[columns]
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
文字列を複数行対応として正規表現で分ける	re.split(pattern, s, flags=re.MULTILINE)
行列の列ごとの最小	np.min(aArray, axis=0)
バイナリ書き込みモードでファイルパスをオープンして]、fとする	f = open(filepath, mode='wb')
折れ線グラフを茶色色を用いて描画する	plt.plot(データ列x, データ列y, color='brown')
空の集合を見る	set()
データフレームのリスト列の中にある文字列の合計を数える	df[aList].isin([value]).sum()
折れ線グラフに左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
小数点数が有限かどうか調べる	math.isfinite(x)
データ列の平均	ds.mean()
データフレームの文字列を欠損値にする	df.replace(s, np.nan)
データフレームをグループ化しそれぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
特異値分解として多次元データを濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
ベクトルの行ごとの分散を求める	np.var(aArray, axis=1)
散布図をフクシア色を使って描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
option: ターコイズを用いる	color = 'turquoise'
データフレームの欠損値を平均で埋める	df.fillna(df.mean())
折れ線グラフにクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
散布図の四角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
文字列を積極的に小文字にする	s.casefold()
列をいつまでも繰り返す	itertools.cycle(iterable)
線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
横棒グラフをライトシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightcyan')
option: バイナリモードに指定する	mode = 'rb'
数に実数を加算する	x + y
データフレームを2つの列によってグループ化する	df.groupby(['A', 'B'])
異なる列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
散布図をオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='orange')
データフレームは正規分布からどれだけ、尖っているか確認する	df.skew()
option: グラフの色をゴーストホワイトに変更する	color = 'ghostwhite'
折れ線グラフの色を茶色に変更する	plt.plot(データ列x, データ列y, color='brown')
列を用いてデータフレームをソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
スノー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
スプリンググリーン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
データ列の時刻	ds.dt.hour
カテゴリで色分けして、にバイオリン図でデータフレームをグラフ化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
イテラブルを多重集合にする	collections.Counter(iterable)
縦棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
コーンフラワーブルーにヒストグラムの色を指定する	plt.hist(データ列, color='cornflowerblue')
データフレームのカラムを丸めて整数にする	df[col].round().astype(int)
option: カラムの名前を自動的な連番に設定する	header = None
散布図に四角印を加える	plt.scatter(データ列x, データ列y, marker='s')
部分文字列が文字列の終了位置より前にあるかどうか	s.find(sub, 0, end) != -1
rgbのクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
TSV形式でデータフレームをJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
折れ線グラフの印を下三角にする	plt.plot(データ列x, データ列y, marker='v')
濃いシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
折れ線グラフの色をダーク・スラテグレーにセットする	plt.plot(データ列x, データ列y, color='darkslategrey')
データ列の中にいくつ文字列があるか求める	ds.isin([value]).sum()
文字列を記号化して、変数にする	z = sympy.Symbol(s)
Pandasで、タイムスタンプ型のデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
プロットにグリッド線を入れる	plt.grid(True)
ダークグレー色を使ってヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
３整数の最小公倍数	math.lcm(n, n2, n3)
パレットトルコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
赤い四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
文字列でフォーマットして日付データを文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
n番目の列をデータフレームから除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
option: ゴールド色を用いる	color = 'gold'
option: 色を濃い青に変更する	color = 'darkblue'
線グラフの色をスノーに指定する	plt.plot(データ列x, データ列y, color='snow')
文字列の終了位置より前に部分文字列が含まれるか判定する	s.find(sub, 0, end) != -1
ヒストグラムの色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
縦棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
論文にプロットの用途を変更する	sns.set(context='paper')
option: フォントの色をアクアマリンに指定する	color = 'aquamarine'
文字列を赤色で表示できる文字列にする	f'\033[31m{value}\033[0m'
本日が土曜日か	datetime.datetime.today().weekday() == 5
部分文字列を文字列の末尾から探す	s.rfind(sub)
ローングリーン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
日付時刻データからn時間分引く	aDatetime - datetime.timedelta(hours=n)
option: バッファリングのサイズを指定する	buffering = 4096
横棒グラフをブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='brown')
浮動小数点数のn乗の浮動小数点数剰余	pow(x, n, y)
プログラムの実行をここで停止する	sys.exit()
リストとリストについての散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
option: グラフの色をペルーに変更する	color = 'peru'
ヒストグラムをシエナ色を用いて描画する	plt.hist(データ列, color='sienna')
ラインを半透明の点線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
縦棒グラフをパールゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
データフレームの重複する行数のマスクを使う	df.duplicated()
黒い星マーカーを数列と数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
カテゴリで色分けして、データフレームをにバイオリン図を使って見る	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフの△マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
線グラフをネイビー色を使って描画する	plt.plot(データ列x, データ列y, color='navy')
多次元データをt分布型確率的近傍埋め込み法で濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
プラム色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
シスル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
縦棒グラフをアイボリー色として描画する	plt.bar(データ列x, データ列y, color='ivory')
散布図を貝殻色を使って描画する	plt.scatter(データ列x, データ列y, color='seashell')
文字列は組に含まれないかどうか判定する	element not in aTuple
棒グラフをシャルトリューズ色を用いて描画する	plt.bar(データ列x, データ列y, color='chartreuse')
本日が火曜日か確認する	datetime.datetime.today().weekday() == 1
タプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
option: ホットピンクを用いる	color = 'hotpink'
半透明の点線を使ってデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
円周率を使用する	math.pi
列'A'と列'B'をキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
折れ線グラフの色をネイビーにする	plt.plot(データ列x, データ列y, color='navy')
n2がn以上かつ、n3以下か調べる	n <= n2 and n2 <= n3
線グラフを色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
n番目の列を行としてCSVファイルTSVを読み込む	pd.read_csv(filename, index_col=n)
半透明の点線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
項目名がマップにある	key in aDict
標準入力	sys.stdin
文字列を走査し、パターンにケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
白色としてヒストグラムを描画する	plt.hist(データ列, color='white')
option: ダークブルーを使う	color = 'darkblue'
プロットのy軸を対数に変更する	plt.yscale('log')
三つの変数を順にプリントする	print(value, value2, value3)
ラインを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ライトゴールドロディイエロー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
リストとリストリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
空白を見る	' '
折れ線グラフの三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
▲印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームの行と列をひっくり返す	df.T
データ列のpercentパーセンタイル	ds.quantile(percent/100)
折れ線グラフの色をゴーストホワイトにセットする	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフをピーチパフ色を用いて描画する	plt.plot(データ列x, データ列y, color='peachpuff')
option: サーモンに色を設定する	color = 'salmon'
ヒストグラムの色をモカシンに変更する	plt.hist(データ列, color='moccasin')
option: ナバホホワイトにグラフの色を設定する	color = 'navajowhite'
横棒グラフを描画し、、下寄せする	plt.barh(ラベル列, データ列, align='edge')
列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
バリーウッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
year年month月day日hour時をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day, hour=hour)
ヒストグラムをナバホホワイト色を使って描画する	plt.hist(データ列, color='navajowhite')
option: ミディアムバイオレットレッド色を使用する	color = 'mediumvioletred'
t-SNEを行う	model = sklearn.manifold.TSNE(n_components=n)
グラフをスライドに設定する	sns.set(context='talk')
日付時刻データは日付時刻データより後ろか調べる	aDatetime > aDatetime2
線グラフの色をフォレストグリーンに指定する	plt.plot(データ列x, データ列y, color='forestgreen')
折れ線グラフの星印を青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの標本標準偏差を求める	df.std()
マッピングのキーに対応した値を得る	aDict.get(key)
データフレームのリストカラムを千の位で丸めて整数にする	df[aList].round(-3).astype(int)
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を算出する	df.groupby([column, column2], as_index=False).min()
散布図の菱形印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
散布図を赤いダイアモンドマーカーでプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
表データから型型のみ取り出す	df.select_dtypes(ty)
小数点数を切り上げて整数に変換する	math.ceil(x)
リストとリストについて散布図を描画し、、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
文字列の大文字小文字を交換する	s.swapcase()
option: シルバーを用いる	color = 'silver'
option: マーカーを菱形に設定する	marker = 'D'
リストとイテラブルについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
nが正の数	n > 0
配列と同じ大きさの空の配列を作成する	np.empty_like(aArray)
データフレームを列によってまとめたグループを使う	df.groupby(column)
ドジャーブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
棒グラフをライトブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightblue')
日付データが日付データよりあとか調べる	aDate > aDate2
データフレームを各列と列の組み合わせ毎にグループ化し、、合計を算出する	df.groupby([column, column2], as_index=False).sum()
縦棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
option: オールドレースにフォントの色を設定する	color = 'oldlace'
空白で文字列を区切って、文字列リストに変換する	s.split()
黒い▽マーカーをリストとリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
辞書を階層化辞書に変換する	collections.ChainMap(aDict)
外れ値に強い線形回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
横に並べてボックスチャートを描画する	plt.boxplot([データ列, データ列])
縦棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
バリーウッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
option: エラーがあるとき例外を発生させるように設定する	errors = 'strict'
重回帰モデルの残差を求める	目的変数 - model.predict(説明変数)
ヒストグラムを濃い青色で描画する	plt.hist(データ列, color='darkblue')
option: ライトスレイグレーを使う	color = 'lightslategray'
黒いクロスマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームから指定された三列のみ抽出する	df[[column, column2, column3]]
アイリスのデータセットをロードする	sns.load_dataset('iris')
日付時刻データが土曜日か確認する	aDatetime.weekday() == 5
option: 色をフクシアに変更する	color = 'fuchsia'
折れ線グラフをアンティークホワイト色として描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
データフレームの中にある文字列と文字列の合計をカウントする	df.isin([value, value2]).sum()
文字列を末尾から空白で分割する	s.rsplit()
数値を双方向キューにエンキューする	deq.appendleft(element)
縦軸の目盛の表示値を変更する	plt.yticks(目盛りの値リスト)
正規表現patternでreplに一度にデータ列を置き換える	ds.replace(pattern, repl, regex=True)
シーケンスを文字列リストに変換して、部分文字列によって連結する	sub.join(map(str, iterable))
option: ライトイエローにグラフの色を設定する	color = 'lightyellow'
実数のアークコサイン	math.acos(x)
option: フォントの色をピンクに設定する	color = 'pink'
数値のn階微分を行う	sympy.diff(e, z, n)
変数を白色化する	f'\033[37m{value}\033[0m'
PandasでUNIX秒のデータ列からタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
棒グラフをダークバイオレット色を用いて描画する	plt.bar(データ列x, データ列y, color='darkviolet')
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
rgbの三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
改行なしに二つの文字列を表示する	print(value, value2, end='')
データフレームとデータフレームの列を合体させる	pd.concat([df, ds], axis=1)
折れ線グラフに星印を使用する	plt.plot(データ列x, データ列y, marker='*')
option: アクア色を用いる	color = 'aqua'
option: フローラルホワイト色を使用する	color = 'floralwhite'
データフレームを各列毎に集約して、列の分散を算出する	df.groupby(column)[column2].var()
カラムを1000の位で四捨五入して整数型にする	ds.round(-3).astype(int)
nが正の整数か	n > 0
データフレームを列によってグループ化して、分散を求める	df.groupby(column).var()
データフレームからランダムに選択する	df.sample()
散布図に右三角印を加える	plt.scatter(データ列x, データ列y, marker='>')
リストとリストについての散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
タイムスタンプデータの時間数	aDatetime.hour
散布図をスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='skyblue')
異なる列をキーとして2つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
option: ダーク・スラテグレーにフォントの色を設定する	color = 'darkslategrey'
大バツマーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
最大最小から行列を作成する	np.linspace(最小値, 最大値, 要素数)
ベージュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
データフレームの中のカラムを等しい量になるようにn個にビン分割する	pd.qcut(df[col], n)
eの小数点数乗を求める	math.exp(x)
新しい文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub)
文字列全体がパターンに複数行対応としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.MULTILINE)
実行結果を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
データ列の偏りを対数する	np.log(データ列)
クラス分類をブースティングを用いて行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
行列の最大を算出する	np.max(aArray)
折れ線グラフに左三角印を用いる	plt.plot(データ列x, データ列y, marker='<')
実数の絶対値を求める	math.fabs(x)
ファイルからバイナリストリームをオープンして]fとする	f = open(filepath, mode='rb')
option: 論理値型を使う	dtype = np.int32
横棒グラフを青緑色として描画する	plt.barh(データ列x, データ列y, color='turquoise')
option: オリベドラブを用いる	color = 'olivedrab'
棒グラフをミントクリーム色を使って描画する	plt.bar(データ列x, データ列y, color='mintcream')
スカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
散布図の▲マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
文字列の先頭で正規表現にマッチするか調べる	re.match(pattern, s)
散布図の▲マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
nをn2分の1にする	n /= n2
文字列を最後の部分文字列で二分割する	s.rpartition(sub)
色付きの実線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームをグループ化して、ヒストグラムを用いて可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
リストを縦軸、データ列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムをミントクリーム色として描画する	plt.hist(データ列, color='mintcream')
折れ線グラフとしてデータフレームの列を可視化する	plt.plot(df[column], df[column])
リストとリストの散布図にrgbの▽マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
rgbの△マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ダークターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
棒グラフをパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='purple')
データフレームを複数の列の値でグループ化する	df.groupby(columns)
読み込みモードでファイルパスをオープンする]	open(filepath, mode='r')
データフレームを二つの列によってで破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
配列とリストについて散布図を描いて、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
option: スプリンググリーンを使う	color = 'springgreen'
折れ線グラフの上三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
表を各列と列の組み合わせ毎に集約し、、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
ファイルをバイナリ書き込みモードで開いて]fとする	f = open(filepath, mode='wb')
値∉集合	element not in aSet
ミディアムスレートブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ヒストグラムをペールグリーン色として描画する	plt.hist(データ列, color='palegreen')
option: 3二ビット整数型を使用する	dtype = np.int16
リストとリストの散布図に▽マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフをプロットして、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
ライトスチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
データフレームの列名を指定したカラム名一覧に置き換える	df.columns = columns
明日の日付を見る	datetime.date.today() + datetime.timedelta(days=1)
棒グラフをイエローグリーン色として描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
新しい文字列を使って文字列を置換する	s.replace(sub, newsub)
データ列を丸めて、整数にする	ds.round().astype(int)
分類モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
散布図をrgbの星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
rgbの下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
縦棒グラフをオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orchid')
イテラブルにシーケンスを続ける	itertools.chain(iterable, iterable2)
予測値とデータの離れ具合を見る	sns.residplot(x='列名', y='列名', data=df)
文字列を下線付きで表示する	print(f'\033[4m{value}\033[0m')
配列とリストについて散布図を描画し、、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
表データを列で集約し、、それぞれのグループの分散を計算する	df.groupby(column).var()
空の両端キューを準備する	collections.deque()
フローラルホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
option: エンコーディングをUTF8にセットする	encoding = 'utf-8'
データ列を用いる	import pandas as pd
線グラフをゴーストホワイト色として描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
横棒グラフを描画し、、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
等差数列を行列にする	np.arange(開始値, 終了値, 等差)
文字列の右側から余分な改行を取り除く	s.rstrip()
折れ線グラフの線種を破線に指定する	plt.plot(データ列x, データ列y, linestyle='dashed')
線グラフの色をパパイヤウィップに変更する	plt.plot(データ列x, データ列y, color='papayawhip')
２つの変数をスラッシュで区切って表示する	print(value, value2, sep='/')
option: グラフを破線に設定する	linestyle = 'dashed'
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgray')
データフレームの列の中央値を計算する	df[col].median()
rgbの丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列内にアスキー文字があるかどうか調べる	any(c.isascii() for c in s)
日付時刻データにn分分足す	aDatetime + datetime.timedelta(minutes=n)
ナバホホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
1行から二つの文字列値を読む	A, B = map(str, input().split())
赤い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='r')
ヒストグラムをダークグリーン色として描画する	plt.hist(データ列, color='darkgreen')
オリーブ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
カラムの標本標準偏差を計算する	ds.std()
黒い右三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
ファイル名がJSONファイル	filename.endswith('.json')
実行時の標準出力の出力先がターミナルか確認する	sys.stdout.isatty()
線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
配列の累積和を計算する	np.cumsum(aArray)
列のユニークな値を調べる	ds.unique()
タプル中の最初の文字列を探す	aTuple.index(element)
ファイルパスからストリームをオープンして]fileとする	file = open(filepath)
1で全要素を初期化した行列を作る	np.ones(要素数, dtype=np.int)
線グラフの色をゴーストホワイトにセットする	plt.plot(データ列x, データ列y, color='ghostwhite')
'A'列と'B'列でデータフレームを並べる	df.sort_values(by=['A', 'B'])
組の末尾を取り除く	aTuple[:-1]
両端キューのn番目の値	deq[n]
ファイルからエクセルファイルを読む	pd.read_excel(filename)
バイナリできるようにファイルパスを開く]	open(filepath, mode='rb')
双方向キューをデキューする	deq.popleft()
データフレームを'A'列によって昇順に並べる	df.sort_values(by='A', ascending=True)
辞書の全を消去する	aDict.clear()
データフレームのリストカラムの欠損値をメディアンで埋める	df[aList].fillna(df[aList].median())
縦棒グラフをミディアムバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
Pandasで、エポック秒の文字列からタイムスタンプ型にする	pd.to_datetime(s, unit='s', utc=True)
リストを境界値としてデータフレームの中の列を分割する	pd.cut(df[col], aList)
等量でビン数nを用いて配列をビン分割する	pd.qcut(aArray, n)
オブジェクトがリストに含まれないか	element not in aList
グレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
ダークバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
折れ線グラフの▽印の色を設定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
散布図をゴールド色として描画する	plt.scatter(データ列x, データ列y, color='gold')
ラベンダー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
双方向キューの長さを求める	len(deq)
青い破線でデータ列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ヒストグラムのビン数を指定する	plt.hist(データ列, bins=区関数)
列をリストとして取り出す	df[column].values.tolist()
リストとイテラブルについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
縦棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
ミディアムオーキッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
option: バイナリ用に設定する	mode = 'rb'
ヒストグラムをコーラル色として描画する	plt.hist(データ列, color='coral')
多次元データを多次元尺度構成法を用いて淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
列の平均	ds.mean()
データフレームをJSONLファイルにカラムの名前を付けずに保存する	df.to_csv(filename, header=None)
縦棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
オレンジ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
折れ線グラフの▽マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
整数nを符号なしでバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
リストの合計値を求める	sum(aList)
黄色で変数をプリントする	print(f'\033[33m{value}\033[0m')
option: シエナを用いる	color = 'sienna'
データ列を十の位で丸めて、整数型にする	ds.round(-1).astype(int)
黄色色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
ふたつの集合の差集合を算出する	aSet.difference(aSet2)
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategray'
整数nの二進文字列を見る	bin(n)[2:]
整数nは配列のどれかか確認する	n in aArray
データフレームのリストカラムの中に文字列がある	df[aList].isin([value])
データフレームを２つの列でを用いて降順に並べる	df.sort_values(by=['A', 'B'], ascending=False)
ファイルからディレクトリ名を求める	os.path.dirname(filepath)
ヒストグラムの色をブランチドアーモンドに指定する	plt.hist(データ列, color='blanchedalmond')
データフレームの列の値がリストに含まれる行を選択する	df[df[column].isin(aList)]
折れ線グラフの星印の線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
実数とyの斜辺を求める	math.hypot(x, y)
ライトコーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
線グラフをビスク色を使って描画する	plt.plot(データ列x, データ列y, color='bisque')
リストとリストについて散布図をプロットして、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
リストを太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
配列間の各要素の最小公倍数を計算する	np.lcm(aArray, aArray2)
最頻値でデータフレームのNaNを補う	df.fillna(df.mode().iloc[0])
棒グラフをロイヤルブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='royalblue')
折れ線グラフの下三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
タプルから計数器を新規生成する	collections.Counter(aDict)
データフレームの列を小数点以下n桁で丸める	df[col].round(n)
文字列を空白で区切り、整数のリストに変換する	map(int, s.split())
ゴーストホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
散布図にrgbの下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
要素がセットの要素に含まれるか調べる	element in aSet
データ列の未入力値を中央値で埋める	ds.fillna(ds.median())
赤いバツマーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームの列がリストに含まれる行を取り出す	df[df[column].isin(aList)]
プロット中で日本語フォントを使えるようにする	sns.set(font='IPAexGothic')
文字列に列を変換して、部分文字列で連結する	sub.join(map(str, iterable))
'A'列でデータフレームをソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
option: 色をネイビーに設定する	color = 'navy'
回帰直線データフレームのグループ化した散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
option: フォントの色をバリーウッドに設定する	color = 'burlywood'
今日が何日か知る	datetime.datetime.today().day
線グラフの色をディープスカイブルーにセットする	plt.plot(データ列x, データ列y, color='deepskyblue')
行列の行ごとの合計値	np.sum(aArray, axis=1)
折れ線グラフの左三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ファイルから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
データフレームのカラムが正規分布からどの程度歪んでいるか調べる	df[col].kurt()
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
プロットの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
option: スラグレー色を用いる	color = 'slategrey'
グリッドの線スタイルを破線に変更する	plt.grid(linestyle='dashed')
TSVからSJISでCSVを読み込む	pd.read_csv(filename, encoding='shift_jis')
データフレームをグループ化しそれぞれの列に対し合計を算出する	df.groupby(column)[column2].sum()
タプルのキーとその値をペアとして取り出す	aDict.items()
エンコーディングを使う	sys.getdefaultencoding()
ヒストグラムの色をホットピンクに指定する	plt.hist(データ列, color='hotpink')
降順で行によってデータフレーム全体をソートする	df.sort_index(ascending=False)
パターンに文字列全体をケースを無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
リストを出現回数して、カウンタを更新する	aCounter.update(iterable)
文字コードで文字列をバイト列に変換する	s.encode(encoding=encoding)
列を計数器にする	collections.Counter(iterable)
赤い左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c='r')
折れ線グラフの印をポイント印にする	plt.plot(データ列x, データ列y, marker='.')
マッピングのキー一覧	list(aDict)
赤いバツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
データフレームの列の中にいくつ文字列があるか数える	df[col].isin([value]).sum()
整数nの8進数表現	oct(n)
縦棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
ライトゴールドロディイエロー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
SVDで多次元データを濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
散布図をダークターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
散布図の印をクロスにする	plt.scatter(データ列x, データ列y, marker='x')
横棒グラフをレベッカパープル色として描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
カーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
データフレームを各列毎にグループ化して、列の標準偏差を算出する	df.groupby(column)[column2].std()
データフレームの中のカラムを四分位数ごとにビン分割する	pd.qcut(df[col], 4)
破壊的にデータフレームを'A'列によって降順にソートする	df.sort_values(by='A', ascending=False, inplace=True)
自然数の最大公約数を求める	math.gcd(n, n2)
円プロットをきれいな円にする	plt.axis('equals')
ラベル付きの円プロットを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
辞書の値の一覧を得る	aDict.values()
データ列の欠損値を後の値に減らす	ds.fillna(method='bfill')
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgrey')
青い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフを色付きの一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: グラフの色をミッドナイトブルーに指定する	color = 'midnightblue'
縦棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
マップのキーを列挙する	list(aDict)
散布図の▼マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
破壊的にデータフレームを複数の列によってによってソートする	df.sort_values(by=column, inplace=True)
option: 更新する	inplace = True
縦棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
日付時刻データが日付時刻データと同時かどうか調べる	aDatetime == aDatetime2
ブラック色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
横棒グラフをオールドレース色として描画する	plt.barh(データ列x, データ列y, color='oldlace')
線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
rgbの丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームのリスト列のNaNを直前の値に増やす	df[aList].fillna(method='ffill')
双方向キューの先頭にイテラブルの各値を追加する	deq.extendleft(iterable)
縦棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
'A'列によってを用いてデータフレームを破壊的にソートする	df.sort_values(by='A', inplace=True)
要素が集合の要素でないかどうか調べる	element not in aSet
3変数の最大値	max(x, y, z)
黄緑色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
半透明の破線を用いてデータ列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データ列の推移を色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
イテラブルを累積したイテラブルを求める	itertools.accumulate(iterable, operator.mul)
ライトコーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
タプルの値を列挙する	aDict.values()
青い丸印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
グラフをパステル調にする	sns.set(pallete='pastel')
xが-9以上、9以下か	-9 <= x <= 9
スレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
日付データが月曜日	aDate.weekday() == 0
ピーチパフにヒストグラムの色を変更する	plt.hist(データ列, color='peachpuff')
カウンタをイテラブルを出現回数して、更新する	aCounter.update(iterable)
オリベドラブ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
今日が水曜日	datetime.datetime.today().weekday() == 2
要素が集合に含まれるかどうか調べる	element in aSet
データフレームのリストカラムの未入力値を前の行の値で埋める	df[aList].fillna(method='ffill')
Pandasで、書式でデータ列をPandasの日付型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
オブジェクトはリストかタプル	isinstance(obj, (list)
option: グラフの色をレモンシフォンにセットする	color = 'lemonchiffon'
ひとつでも数字が文字列内に含まれるか調べる	any(c.isdigit() for c in s)
データフレームの列がxより小さいデータを抽出する	df[df[column] < x]
アクアにヒストグラムの色を指定する	plt.hist(データ列, color='aqua')
文字列リストにイテラブルを変換して空白で結合する	' '.join(map(str, iterable))
データフレームのカラムの文字列を未入力値に変換する	df[col].replace(s, np.nan)
アンサンブル学習として回帰分析を行う	sklearn.ensemble.VotingRegressor()
option: 色をミディアムオーキッドに変更する	color = 'mediumorchid'
多次元データをt-SNEとして濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
option: グラフの色をグレーに変更する	color = 'grey'
最初のカテゴリーを除いてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
列を文字列リストに変換して、タブを使って結合する	'\t'.join(map(str, iterable))
ヒストグラムの色をスカイブルーに指定する	plt.hist(データ列, color='skyblue')
整数nの16進数文字列	hex(n)[2:]
データフレームのカラムの欠損値をメディアンで置換する	df[col].fillna(df[col].median())
option: ピンク色を使用する	color = 'pink'
数列とリストについて散布図を描画して、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
option: ダークオレンジにグラフの色を指定する	color = 'darkorange'
option: フォントの色をオーキッドに指定する	color = 'orchid'
セットの補集合を求める	aSet.difference(aSet2)
線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
実数とyのノルム	math.hypot(x, y)
散布図をゴーストホワイト色として描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
option: 色をナバホホワイトに指定する	color = 'navajowhite'
エクセルファイルファイルから複数のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
t分布型確率的近傍埋め込み法として多次元データをパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
リストとリストについて散布図をプロットし、、マーカーを左三角に指定する	plt.plot(データ列x, データ列y, marker='<')
散布図を黒い丸マーカーでプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
ピアソン相関係数でデータフレームのリストで指定された列の相関行列	df[aList].corr(method='pearson')
既にロードされたモジュールの一覧	sys.modules
ネイビーにヒストグラムの色を変更する	plt.hist(データ列, color='navy')
文字列内にひとつでも大文字がある	any(c.isupper() for c in s)
option: パールバイオレットレッドを使用する	color = 'palevioletred'
option: フォントの色をベージュに設定する	color = 'beige'
日付データの年	aDate.year
データフレームを列で集計する	df.groupby(column)
option: 色を紺碧に指定する	color = 'azure'
棒プロットの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
CSVからデータフレームを読む	pd.read_csv(filename, sep=',')
入力から二つの自然数値を読む	A, B = map(int, input().split())
ヒストグラムの色をダークグリーンに指定する	plt.hist(データ列, color='darkgreen')
整数nの16進表現	hex(n)
カラーバーを横向きにプロットする	plt.colorbar(orientation='horizontal')
オプションでファイルに出力する	file = sys.open(filename, 'w')
x軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
カラムを100の位で丸める	ds.round(-2)
2つの文字列は同じか調べる	s == s2
シアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
赤いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図にrgbの星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
イテラブルの長さnの順列を求める	itertools.permutations(iterable, n)
データフレームをグループ化し、それぞれの列に対し個数を算出する	df.groupby(column)[column2].count()
カウンタの文字列をリストとして得る	aCounter.keys()
データフレームからランダムに一行を選択する	df.sample()
ライトシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
大文字を使う	string.ascii_uppercase
ホワイトスモーク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
実行結果を白色にする	f'\033[37m{value}\033[0m'
option: 最初のカラムをインデックスに指定する	index_col = 0
option: ディープスカイブルーにグラフの色を変更する	color = 'deepskyblue'
文字列が全て数値か	s.isnumeric()
パラメータから名前付きタプルをインスタンス化する	C._make(パラメータ)
上限のある両端キュー	collections.deque(maxlen=n)
ミディアムアクアマリン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: 文字列をセパレータで用いる	sep = s
option: 色をミスティローズに設定する	color = 'mistyrose'
オブジェクトが集合クラスか調べる	isinstance(obj, set)
折れ線グラフの色をコーンズシルクに変更する	plt.plot(データ列x, データ列y, color='cornsilk')
option: グラフの色をインディゴにセットする	color = 'indigo'
線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategrey')
タプルの中の最小値を算出する	min(aTuple)
行列間の要素ごとの最小公倍数を算出する	np.lcm(aArray, aArray2)
色名からカラーコードを見る	matplotlib.colors.cnames[色名]
読み込みモードでファイルをオープンして]、fとする	f = open(filepath, mode='r')
文字列の中で複数行対応として正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
タイムスタンプデータをエポック秒に変換する	aDatetime.timestamp()
縦棒グラフをライムグリーン色として描画する	plt.bar(データ列x, データ列y, color='limegreen')
option: ダーク・スラテグレーを使う	color = 'darkslategrey'
SJISでJSONLファイルにデータフレームを書き込む	df.to_csv(filename, encoding='shift_jis')
配列とリストについて散布図を描き、、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
新しいヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
３変数の最大値	max(x, y, z)
nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
データ列の秒を使う	ds.dt.second
赤い破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ヒストグラムの色をスチールブルーに変更する	plt.hist(データ列, color='steelblue')
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
縦棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
全要素を０で初期化した三２ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int16)
折れ線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
option: パパイヤウィップ色を用いる	color = 'papayawhip'
ミディアムブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
乱数の行列を作る	np.random.random(N)
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
淡い茶色色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
カテゴリ別で色分けしてデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ランダムにn行をデータフレームから抽出する	df.sample(n)
グリーンイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームを各列と列の組み合わせ毎に集約して、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
option: 色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
ゴールド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
オブジェクトが論理値クラスか調べる	isinstance(obj, bool)
ライムグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
辞書から項目名で指定された項目をポップする	aDict.pop(key)
縦方向に３つのデータフレームを合体させる	pd.concat([df, df2, df3], axis=0)
散布図を白色を使って描画する	plt.scatter(データ列x, データ列y, color='white')
プラットホームがリナックスか調べる	sys.platform.startswith('linux')
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
正規表現に大文字・小文字を無視して文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: アンティークホワイトにグラフの色をセットする	color = 'antiquewhite'
サーモン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
データフレームの各グループごとの最大値を計算する	df.groupby(column).max()
回帰モデルを当てはめる	model.fit(説明変数, 目的変数)
リストとリストについて散布図をプロットして、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
カウンタから列をカウントして引く	aCounter.subtract(iterable)
デックの最後からデータを取り出す	deq.pop()
データフレームの列が文字列で始まるデータを抽出する	df[df[column].str.startswith(s)]
折れ線グラフのダイアモンド印を黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
option: ダークシアグリーン色を用いる	color = 'darkseagreen'
option: ミディアムアクアマリン色を使用する	color = 'mediumaquamarine'
入力ストリームを改行を取り除いて一行ずつ読み込む	f.readline()
作画で用いるカラーテーマを指定する	sns.set(pallete=パレット名)
散布図に赤い左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームの列で文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
ヒストグラムの色をブラウンにする	plt.hist(データ列, color='brown')
グリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
データフレームからカテゴリデータのカラムを取り出す	df.select_dtypes('object')
イテラブルから新しいカウンタを用意する	collections.Counter(iterable)
パパイヤウィップ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームの値が欠損値	df.isna()
文字列の右側から空白を除く	s.rstrip(' ')
ミッドナイトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
文字列の左側が部分文字列	s.startswith(sub)
線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
日付時刻データとタイムスタンプデータの時間差を求める	aDatetime - aDatetime2
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
深紅色でヒストグラムを描画する	plt.hist(データ列, color='crimson')
散布図をシルバー色を使って描画する	plt.scatter(データ列x, データ列y, color='silver')
文字列は全て十進数字かどうか調べる	s.isdecimal()
データフレームの中に含まれる文字列の合計を数える	df.isin([value]).sum()
棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームのカラム名を列から文字列に付け直す	df.rename(columns={column: name})
データフレームの全列を散布図で可視化する	sns.pairplot(df)
散布図にポイントマーカーを用いる	plt.scatter(データ列x, データ列y, marker='.')
nの8進リテラルを求める	oct(n)
今日が金曜日か調べる	datetime.datetime.today().weekday() == 4
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
option: オレンジレッド色を使用する	color = 'orangered'
組の文字列が最初に見つかる位置	aTuple.index(element)
文字列リストを結合する	''.join(aStringList)
ASCII限定として正規表現で文字列を区切る	re.split(pattern, s, flags=re.ASCI)
数値を青色にする	f'\033[34m{value}\033[0m'
黒い丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームの列の値がx以上のデータを抽出する	df[df[column] >= x]
折れ線グラフに△マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
イテラブルの集合を生成する	set(iterable)
option: 青緑を用いる	color = 'turquoise'
option: 色をライムに設定する	color = 'lime'
ヒストグラムの色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
option: バイナリ書き込みモードを使用する	mode = 'wb'
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
表データのn行目までを抽出する	df[:n]
二つの配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
散布図を赤いクロスマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c='r')
option: コロンを分割記号で使う	sep = ':'
整数乱数の行列	np.random.randint(開始値, 終了値, N)
nがn2以下または、n3以上か調べる	n <= n2 or n >= n3
ヒストグラムの色を珊瑚に設定する	plt.hist(データ列, color='coral')
リストとリストについて散布図を描画してマーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
ダークゴールデンロッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
整数nが集合のどれか	n in aSet
折れ線グラフをピンク色として描画する	plt.plot(データ列x, データ列y, color='pink')
データ列を等しい量になるようにビン数nを用いて分割する	pd.qcut(ds, n)
散布図にrgbの大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
折れ線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
確率的勾配降下としてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
ヒストグラムの色を淡いピンク色に指定する	plt.hist(データ列, color='lightpink')
既存の行列をベースに全要素が0のベクトル	np.zeros_like(aArray)
ヒストグラムの色をマルーンにセットする	plt.hist(データ列, color='maroon')
２つのデータフレームを異なる列をキーとして全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ライトスレイグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
日付データをn分前にする	aDate - datetime.timedelta(minutes=n)
文字列のn番目の文字	s[n]
カテゴリで色付けして、データフレームをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ベクトルのユニークな値を要素とする配列を求める	np.unique(aArray)
カウンタの上位をリストとして得る	aCounter.most_common(k)
ファイルパスが存在する	os.path.exists(filepath)
文字列の中のASCII限定として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
データフレームを'A'列の値によって分類する	df.groupby('A')
散布図をオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orchid')
データ列を1000の位で丸めて、整数にする	ds.round(-3).astype(int)
積み上げ棒プロットをプロットする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
データ列の中の欠損値の数を数える	ds.isna().sum()
縦棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
横棒グラフをベージュ色を使って描画する	plt.barh(データ列x, データ列y, color='beige')
表の指定された三つの列のみ選ぶ	df[[column, column2, column3]]
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
実数を切り下げて整数にする	math.floor(x)
折れ線グラフをベージュ色を用いて描画する	plt.plot(データ列x, データ列y, color='beige')
アリスブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
ひとつ置きにタプルを抽出する	aTuple[::2]
インディゴ色を使ってヒストグラムを描画する	plt.hist(データ列, color='indigo')
グレー色としてヒストグラムを描画する	plt.hist(データ列, color='gray')
ディムグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
ピアソン相関係数を用いてデータフレームのカラムと列の相関行列	df[[column, column2]].corr(method='pearson')
線形モデルの回帰変数を求める	model.coef_
データフレームの列の未入力値を平均で補う	df[col].fillna(df[col].mean())
横棒グラフをミディアムブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumblue')
option: ゴールドを用いる	color = 'gold'
データフレームの中に文字列とがあるかどうか調べる	df.isin([value, value2])
現在が水曜日	datetime.datetime.today().weekday() == 2
中央値でデータ列の未入力値を置き換える	ds.fillna(ds.median())
折れ線グラフに四角マーカーを加える	plt.plot(データ列x, データ列y, marker='s')
箱ひげ図をプロットして、平均線を追加する	plt.boxplot(データ列, meanline=True)
データフレームのリストカラムを100の位で丸めて整数にする	df[aList].round(-2).astype(int)
option: グラフの色をロイヤルブルーにセットする	color = 'royalblue'
キューをデキューする	deq.popleft()
rgbの大バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
列から行列を作る	np.array(iterable)
option: フォントの色をライトコーラルに指定する	color = 'lightcoral'
option: ロイヤルブルーを用いる	color = 'royalblue'
クリムゾン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
option: フォントの色をオリーブに変更する	color = 'olive'
option: フォントの色をライトサーモンに変更する	color = 'lightsalmon'
多次元データをt分布型確率的近傍埋め込み法としてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
xの小数点以下'1'桁まで表示する	print(':.1f'.format(x))
option: 色を赤に指定する	color = 'red'
ファイルパスをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームのリストカラムの欠損値を最大値に減らす	df[aList].fillna(df[aList].max())
日付データにn日を加算する	aDate + datetime.timedelta(days=n)
option: ミッドナイトブルー色を使用する	color = 'midnightblue'
マップからキーの値をエラーなく得る	aDict.get(key, None)
パールゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
文字列が全て英数字	s.isalnum()
option: フォントの色を小麦色に変更する	color = 'wheat'
データ列を四分位数でビン分割する	pd.qcut(ds, 4)
文字列中に部分文字列がいくつかあるか調べる	s.count(sub)
ベクトルを横ベクトルに変形する	aArray.reshape(1, -1)
option: 色をブランチドアーモンドに設定する	color = 'blanchedalmond'
グラフの縦横比を同じする	plt.axis('equals')
データフレームの値が未入力値かどうか調べる	df.isna()
ファイルパスを書き込み用に文字列の示す文字コードとしてオープンする]	open(filepath, mode='w', encoding=s)
アイボリー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
表データのインデックスの名前を一度に、nameからname2に変更する	df.rename(index={name: name2})
散布図をダークオリーブグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
線グラフの色をダークバイオレットに指定する	plt.plot(データ列x, データ列y, color='darkviolet')
データ列の推移を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
コーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
書式fmtで文字列をdatetime64型に変換する	pd.to_datetime(s, format=fmt)
クラス名は名前付きタプルか調べる	issubclass(C, tuple)
横棒グラフをリネン色を用いて描画する	plt.barh(データ列x, データ列y, color='linen')
行列の計算をする	import numpy as np
リストをひとつ飛ばしで取り出す	aList[::2]
JSON文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
線グラフをブランチドアーモンド色を用いて描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
左三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='<')
option: インデックスを連番に指定する	index_col = None
横棒グラフをシャルトリューズ色を用いて描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ヒストグラムをライトサーモン色として描画する	plt.hist(データ列, color='lightsalmon')
真紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームの値をValueMapで一度に置き換える	df.replace(ValueMap)
データフレームの列を落とす	df.drop(column, axis=1)
辞書にキーワード引数を用いて加えて、更新する	aDict.update(**kwargs)
xの絶対値を求める	abs(x)
組の先頭を取り除く	aTuple[1:]
カウンタのユニークな項目をリストとして得る	list(aCounter)
多次元データをt-SNEを使ってパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
折れ線グラフの色をスカイブルーにする	plt.plot(データ列x, データ列y, color='skyblue')
オブジェクトがあるクラスか	isinstance(obj, クラス)
データフレームのカラムがどの程度、分散しているか調べる	df[col].var()
データフレームを表示するとき、小数点以下の表示精度をn桁にセットする	pd.set_option('precision', n)
option: ロイヤルブルー色を使用する	color = 'royalblue'
option: ベクトルのデータ型を指定する	dtype = np.int
データフレームのリストカラムの尖度を求める	df[aList].skew()
新しいリッジ回帰とロッソ回帰のハイブリットモデルを新規作成する	model = sklearn.linear_model.ElasticNet()
表データを各列と列の組み合わせ毎にグループ化し、、分散を計算する	df.groupby([column, column2], as_index=False).var()
ビンの数を設定して柱状グラフを描画する	plt.hist(データ列, bins=区関数)
数列を横棒プロットにする	plt.barh(ラベル列, データ列)
折れ線グラフを描き、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: 色をダークターコイズに設定する	color = 'darkturquoise'
option: 最初の列を行に増やす	index_col = 0
日付データが金曜日	aDate.weekday() == 4
option: フォントの色をスチールブルーに設定する	color = 'steelblue'
線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
スクリプト名	sys.argv[0]
既存の配列を元に全要素が初期値のベクトル	np.full_like(aArray, 初期値)
ロジスティック回帰データフレームの散布図にを加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
nからn2までの整数リスト	list(range(n, n2+1))
データフレームを複数の列によってソートし、更新する	df.sort_values(by=column, inplace=True)
黒い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X')
色付きの実線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
縦棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
空白で文字列を末尾から分割する	s.rsplit()
ミスティローズ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
リストと配列についての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ヒストグラムの色をダークバイオレットにセットする	plt.hist(データ列, color='darkviolet')
散布図にrgbの上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストのn番目に文字列を差し込む	aList.insert(n, element)
データ列の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
折れ線グラフの色をライムに指定する	plt.plot(データ列x, データ列y, color='lime')
ヒストグラムをアイボリー色を使って描画する	plt.hist(データ列, color='ivory')
Pandasで、データ列をフォーマットとして日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
組の中の最大値を求める	max(aTuple)
横方向に二つのデータフレームを一つにまとめる	pd.merge(df, df2)
文字列がひらがなか調べる	('ぁ' <= ch <= 'ん')
両端キュー中の要素のインデックスを求める	deq.index(element)
イテラブルを文字列に変換して、部分文字列で連結する	sub.join(map(str, iterable))
エクセルデータファイルからnというシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ファイルを文字コードtextとして書き込み用に開く]	open(filepath, mode='w', encoding=text)
オブジェクトは辞書型か調べる	isinstance(obj, dict)
データフレームを表示するとき、ヘッダー行を左寄せにセットする	pd.set_option('colheader_justify', 'left')
option: NaNは無視する	dropna = True
ファイルパスを書き込みできるように開く]	open(filepath, mode='w')
option: 色をサーモンに設定する	color = 'salmon'
リストと数列についての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
リストとリストについて散布図をプロットしてその大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
データフレームの列を100の位で四捨五入して、整数型にする	df[col].round(-2).astype(int)
数列とイテラブルについて散布図を描画して、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
集合から別のセットとの共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
データフレームのそれぞれのグループごとの個数を算出する	df.groupby(column).count()
文字列リストを一つの文字列にする	''.join(aStringList)
タプルのキーを列挙する	list(aDict)
２つのオブジェクトは同一参照	obj is obj2
データフレームのリストカラムが正規分布からどの程度歪んでいるか見る	df[aList].kurt()
リストとリストについて散布図を描画し、ダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
サンディーブラウン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
横軸の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
行列の行ごとの平均値	np.mean(aArray, axis=1)
現在の分数を使う	datetime.date.today().minute
茶色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
プロットを表示する	plt.show()
折れ線グラフをゴーストホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフの上三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
フォレストグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ホワイトスモーク色を用いてヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
文字列の開始位置より後に部分文字列が含まれるか調べる	s.find(sub, start) != -1
リストをn個にビニングしてnamesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフの印をバツにする	plt.plot(データ列x, データ列y, marker='x')
線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
円プロットの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
文字列全体がパターンに大文字・小文字を無視してマッチするか調べる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ミディアムブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
プロットで用いるy軸に名称を設定する	plt.ylabel('y軸ラベル')
シーグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
折れ線グラフの色をスレートブルーに指定する	plt.plot(データ列x, データ列y, color='slateblue')
二つのオブジェクトが同一か	obj is obj2
スレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
整数個からk個取り出したときの並べ方の総数	math.perm(n, k)
ライムグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
データフレームを各列と列の組み合わせ毎にグループ化して、分散を計算する	df.groupby([column, column2], as_index=False).var()
列の各要素に対して、predicateFuncがtrueであればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
TSVファイルからCSVをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
折れ線グラフの大バツ印の色を指定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ひとつでも非大文字が文字列中にあるか確認する	any(not c.isupper() for c in s)
データフレームを列によってまとめた表	df.groupby(column)
直前の値でデータ列の欠損値を埋める	ds.fillna(method='ffill')
全要素を0で初期化した配列を作る	np.zeros(要素数)
データフレームのn行より後ろ抽出する	df[n:]
データフレームのcollのUNIX時間から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
マッピングをインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
配列を分割数nとして等しい量になるようにビン分割する	pd.qcut(aArray, n)
K最近傍法としてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
データ列を等量で分割数nで分割する	pd.qcut(ds, n)
散布図の印をバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
散布図の丸印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
nの二乗を算出する	n ** 2
option: スラグレーにグラフの色を設定する	color = 'slategray'
rgbの左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
サーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
バリーウッド色でヒストグラムを描画する	plt.hist(データ列, color='burlywood')
ライムグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='limegreen')
自分自身をモジュールとしてを	sys.modules[__name__]
日付データにn週間を加える	aDate + datetime.timedelta(weeks=n)
option: ダークスラテグレーにグラフの色を変更する	color = 'darkslategray'
RANSACで回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データ列の尖度を計算する	ds.skew()
オブジェクトのメモリビューを使う	memoryview(obj)
グリッドの線種を一点鎖線に変更する	plt.grid(linestyle='dashbot')
横棒グラフをバリーウッド色として描画する	plt.barh(データ列x, データ列y, color='burlywood')
option: フォントの色をペルーに設定する	color = 'peru'
線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
ValueMapでデータフレームを置き換える	df.replace(ValueMap)
分類モデルの正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
データフレームの列の尖度	df[col].skew()
スレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
ヒストグラムの色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
円グラフの特定の要素だけ目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
モジュールとして自分自身を	sys.modules[__name__]
散布図をタン色として描画する	plt.scatter(データ列x, データ列y, color='tan')
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategray')
option: ライトサーモン色を用いる	color = 'lightsalmon'
赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
逆順のキューを使う	reversed(deq)
最初のカテゴリーを除外してデータフレームの列をワンホット・ベクトルにする	pd.get_dummies(df[column], drop_first=True)
集合から別の集合との共通要素を除く	aSet.symmetric_difference_update(aSet2)
ダークグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
シーケンスを両端キューに変換する	collections.deque(iterable)
データフレームを表示するとき、折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
イテラブルを2回あわせたデカルト積を求める	itertools.product(iterable, repeat=2)
配列を四分位数ごとに分割する	pd.qcut(aArray, 4)
ファイルパスをバイナリ書き込みモードを用いて開く]	open(filepath, mode='wb')
データ列をn個に等しい量になるようにビニングする	pd.qcut(ds, n)
文字列の開始位置以降が部分文字列で開始する	s.startswith(sub, start)
散布図をダークブルー色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームを'A'列の値によってグループ化し要約統計量を求める	df.groupby('A').describe()
ヒストグラムの色をピンクに指定する	plt.hist(データ列, color='pink')
散布図の▲マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
初期値で全要素を初期化したベクトル	np.full(要素数, 初期値, dtype=np.int)
横棒グラフの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
文字コードtextでファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
ミスティローズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームで列と列の重複を見る	df.duplicated(subset=[column, column2])
コマンドの第一引数を調べる	sys.argv[1]
文字列中に非大文字が含まれる	any(not c.isupper() for c in s)
部分文字列で部分文字列が始まる	s.startswith(sub)
破壊的にデータフレームの列を削除する	df.drop(column, axis=1, inplace=True)
散布図を赤いポイントマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データ列の欠損値をxに変更する	ds.fillna(x)
両端キュー中の数値の数を数える	deq.count(element)
ヒストグラムをパープル色として描画する	plt.hist(データ列, color='purple')
既存のファイルをEUCを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
option: ホワイトスモークにグラフの色をセットする	color = 'whitesmoke'
日付時刻データとタイムスタンプデータの時間差を計算する	aDatetime - aDatetime2
option: データ型として3二ビット整数型を使う	dtype = np.int16
折れ線プロットを描く	plt.plot(データ列x, データ列y)
ダークグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
option: タンにグラフの色を変更する	color = 'tan'
ターコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
散布図にrgbのクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図をライトブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightblue')
ピアソン積率相関係数でデータフレームのリスト列の相関行列を求める	df[aList].corr(method='pearson')
集合から全要素を消す	aSet.clear()
色付きの実線としてリストの移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
カテゴリでグループ化して、データフレームの全カラムの相関をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
rgbの左三角マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
出力ストリームに文字列を書き込む	f.write(s)
データフレームの列の第一四分位数を求める	df[col].quantile(0.25)
オレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
色付きの破線として数列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームを'A'列と'B'列の値でグループ化し、要約統計量を計算する	df.groupby(['A', 'B']).describe()
ヒストグラムの色をダークオレンジにする	plt.hist(データ列, color='darkorange')
赤い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
文字列をカンマで分割して、列挙する	s.split(',')
出力ストリームにxを文字列にして書く	f.write(str(x))
データフレームのカラムを小数点以下n桁で四捨五入する	df[col].round(n)
リストの個数だけ繰り返す	range(len(aList))
データ列の中に文字列と文字列があるか判定する	ds.isin([value, value2])
マルーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
リストとデータ列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
辞書順で文字列が文字列より前	s < s2
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()
リストの最後にオブジェクトを追加する	aList.append(element)
線グラフをアクア色を用いて描画する	plt.plot(データ列x, データ列y, color='aqua')
オブジェクトが論理値クラス	isinstance(obj, bool)
タプルの末尾の値を使う	aTuple[-1]
データフレームを複数の列を用いてソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
シーグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
折れ線グラフをスノー色として描画する	plt.plot(データ列x, データ列y, color='snow')
データフレームのグループ毎の最小値	df.groupby(column).min()
△印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
リストの最後から要素をポップする	aList.pop()
データフレームのリストカラムを百の位で丸めて、整数にする	df[aList].round(-2).astype(int)
ボックスチャートを描画し、、平均線を加える	plt.boxplot(データ列, meanline=True)
浮動小数点数の平方根	math.sqrt(x)
CSVファイルからデータフレームを読む	pd.read_csv(filename, sep=',')
小麦色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
データフレームのリストカラムの中に文字列と文字列が存在するか確認する	df[aList].isin([value, value2])
線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ファイルパスをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
タイムスタンプデータをISO形式の文字列にする	aDatetime.isoformat()
多次元データをt-SNEを用いて淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
全十六進数字	string.hexdigits
ヒストグラムの色をスノーに変更する	plt.hist(データ列, color='snow')
折れ線グラフをアリスブルー色として描画する	plt.plot(データ列x, データ列y, color='aliceblue')
ブラウン色のヒストグラムを描画する	plt.hist(データ列, color='brown')
ファイルの絶対パスを見る	os.path.abspath(filepath)
タイムスタンプデータにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
入力から2つの浮動小数数を取り出す	A, B = map(float, input().split())
ティール色で線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
タプル中の文字列が最初に見つかる位置を探す	aTuple.index(element)
リストを黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
rgbの四角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ダークスラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategray')
サドルブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
散布図に黒い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
組合せを計算する	math.comb(n, k)
部分文字列を文字列の接尾辞から取り除く	s.removesuffix(sub)
列'A'と列'B'をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データ列を千の位で丸める	ds.round(-3)
未初期化のベクトル	np.empty(要素数, dtype=np.int)
option: フォントの色をダークスレートブルーに変更する	color = 'darkslateblue'
散布図にrgbの▲マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: 小さい順にする	ascending = True
option: 線の種類を一点鎖線にセットする	linestyle = 'dashbot'
平均と標準偏差から乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
表データのシェイプを確認する	df.shape
データフレームを列ごとにグループ化し、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
リストの平均値を求める	sum(aList)/len(aList)
本日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
プロットをプレゼン用に設定する	sns.set(context='talk')
year年day月のタイムスタンプ	datetime.datetime(year=year, month=month, day=1)
書き込みモードとしてファイルパスをオープンして]、fとする	f = open(filepath, mode='w')
ダークバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
Pandasで、数値時刻のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームを列の値によってグループ分けしてそれぞれのグループごとの個数を求める	df.groupby(column).count()
タプルを順にプリントする	print(*aTuple)
データ列の曜日は何日目か見る	ds.dt.dayofweek
散布図のバツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
スチールブルーにヒストグラムの色をセットする	plt.hist(データ列, color='steelblue')
option: 色を青緑に設定する	color = 'teal'
データフレームの標準偏差を求める	df.std()
データフレームの列がx、かつ列がx2である行を取り出す	df[(df[column] == x) & (df[column2] == x2)]
文字列がタイトルケースかどうか調べる	s.istitle()
データフレームのカラムの曜日名	df[col].dt.weekday_name
赤い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
ヒストグラムの色を茶色にセットする	plt.hist(データ列, color='brown')
実数を整数で割った余り	x % y
横棒プロットの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
行列の累積和	np.cumsum(aArray)
線グラフをトマト色として描画する	plt.plot(データ列x, データ列y, color='tomato')
赤い破線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
色を明るくする	sns.set(pallete='bright')
線グラフの色をピーチパフにする	plt.plot(データ列x, データ列y, color='peachpuff')
ヒストグラムの線種を点線にセットする	plt.hist(データ列, linestyle='dotted')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
棒グラフを濃い青色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
文字列をn回繰り返すイテラブル	itertools.repeat(element, n)
青色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
データ列を百の位で丸めて整数にする	ds.round(-2).astype(int)
データフレームのリストカラムの欠損値を平均で補う	df[aList].fillna(df[aList].mean())
二つの集合のインターセクションのみにする	aSet.intersection_update(aSet2)
四分位点でデータをスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
折れ線グラフに右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
縦棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
文字列リストをsepを区切りとして結合する	sep.join(aStringList)
文字列の終了位置より前に部分文字列が含まれないかどうか調べる	s.find(sub, 0, end) == -1
オブジェクトはリストの要素でない	element not in aList
2を底とする対数	math.log2(x)
既存のファイルを文字列の示すエンコーディングで追加できるように開く]	open(filepath, mode='a', encoding=s)
等間隔でn個に配列をビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
現在の曜日を整数で求める	datetime.datetime.today().weekday()
カテゴリ別で色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を算出する	df.groupby([column, column2], as_index=False).mean()
モデルを作る	model.fit(説明変数, 目的変数)
分子n分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
実数が整数か判定する	x.is_integer()
ナバホホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
データ列は何曜日か見る	ds.dt.weekday_name
オブジェクトは論理値クラスのインスタンスか確認する	isinstance(obj, bool)
集合のすべての要素が別の集合に含まれる	aSet.issubset(aSet2)
上限長nの両端キューを作る	collections.deque(maxlen=n)
ラインを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
JSONLファイルにデータフレームをSJISで保存する	df.to_csv(filename, encoding='shift_jis')
ヒストグラムをブルーバイオレット色として描画する	plt.hist(データ列, color='blueviolet')
option: 色をダークバイオレットに変更する	color = 'darkviolet'
データフレームを２つの列で昇順に並べ直す	df.sort_values(by=['A', 'B'], ascending=True)
option: レベッカパープルにグラフの色を設定する	color = 'rebeccapurple'
データフレームを二つの列によってまとめたグループを見る	df.groupby(['A', 'B'])
option: グラフの色をオレンジにする	color = 'orange'
データフレームをグループ化し、それぞれの列に対し最大値を計算する	df.groupby(column)[column2].max()
データフレームのリストカラムを十の位で丸める	df[aList].round(-1)
散布図をハニーデュー色として描画する	plt.scatter(データ列x, データ列y, color='honeydew')
散布図に▼マーカーを用いる	plt.scatter(データ列x, データ列y, marker='v')
サーモンにヒストグラムの色を指定する	plt.hist(データ列, color='salmon')
シーケンスの全順列	itertools.permutations(iterable)
option: フォントの色をダークカーキに設定する	color = 'darkkhaki'
'A'列を用いてで破壊的にデータフレームをソートする	df.sort_values(by='A', inplace=True)
オブジェクトのプロパティの値を値にセットする	setattr(obj, プロパティ名, 値)
整数個からk個取り出した場合の順列の総数を計算する	math.perm(n, k)
実数の指数部	math.frexp(x)[1]
ダーク・スラテグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
実測値を分類モデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
option: グラフの色をゴールドに変更する	color = 'gold'
スラグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
グラフ描画でカーネル密度推定を使用する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
デフォルト見栄えを適用する	sns.set()
等間隔の行列	np.arange(開始値, 終了値, 等差)
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
パレットトルコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ダークバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
データフレームのn行まで選択する	df[:n]
デックの末尾に要素を追加する	deq.append(element)
値が集合のメンバーでないか調べる	element not in aSet
リストの先頭を除く	aList[1:]
縦軸だけ目盛り線	plt.grid(axis='y')
バイナリ書き込みモードでファイルをオープンする]	open(filepath, mode='wb')
グリッドの線スタイルを一点鎖線に変更する	plt.grid(linestyle='dashbot')
行列の列ごとの平均	np.mean(aArray, axis=0)
大きい順に二つの列によってでデータフレームを整列する	df.sort_values(by=['A', 'B'], ascending=False)
右三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
リストを緑色化する	f'\033[32m{value}\033[0m'
赤い星マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
ファイルパスをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
option: フォレストグリーンを用いる	color = 'forestgreen'
CSVファイルTSVファイルをn番目のカラムをインデックスにして読み込む	pd.read_csv(filename, index_col=n)
値を緑色にする	f'\033[32m{value}\033[0m'
未初期化の配列を作成する	np.empty(要素数, dtype=np.int)
タプルをチェーンマップに変換する	collections.ChainMap(aDict)
グラフの色を全般的に明るくする	sns.set(pallete='bright')
ファイルパスを読み込みモードで開く]	open(filepath, mode='r')
折れ線グラフをライトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightblue')
組の各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
データフレームのカーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームのカラムを千の位で丸めて、整数にする	df[col].round(-3).astype(int)
リストを縦軸、イテラブルを横軸として大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ガンマ関数の値を求める	math.gamma(x)
折れ線グラフに黒い▽印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
option: カデットブルーを使う	color = 'cadetblue'
文字列中に部分文字列があるか調べる	sub in s
整数nを8進数表現にする	oct(n)
パターンに文字列全体をASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
淡い茶色色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
ヒストグラムの色をオレンジに指定する	plt.hist(データ列, color='orange')
データフレームの中のカラムを等間隔でn個にビニングする	pd.cut(df[col], n)
縦棒グラフの色をブラウンにする	plt.bar(データ列x, データ列y, color='brown')
xの小数点以下'2'桁までの文字列にする	':.2f'.format(x)
空白によって文字列を区切る	s.split()
モデルの平均２乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ローングリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
ふたつの集合の共通要素だけにする	aSet.intersection_update(aSet2)
整数nがタプルのいづれかか調べる	n in aTuple
赤い右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
赤い星マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='r')
スラグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
タプルをひとつ置きに得る	aTuple[::2]
リストの最初を取り除く	aList[1:]
散布図をポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
文字列中の部分文字列の登場を数える	s.count(sub)
表データを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
リストとイテラブルについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
マルーン色でヒストグラムを描画する	plt.hist(データ列, color='maroon')
行列の行を選択する	aArray[行番号]
配列とリストの散布図を描き、、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
目盛線	plt.grid(linewidth=3.0)
スチールブルー色を使ってヒストグラムを描画する	plt.hist(データ列, color='steelblue')
散布図のバツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
ヒストグラムの色をゴーストホワイトに変更する	plt.hist(データ列, color='ghostwhite')
nのビット長	n.bit_length()
横棒グラフをダークゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
ファイルからエクセルファイルを読み込む	pd.read_excel(filename)
カウンタを列で更新する	aCounter.update(iterable)
ライム色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
コロンで文字列を区切り、、列挙する	s.split(':')
文字列を走査し正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
文字列が全てアルファベット	s.isalpha()
データフレームを'A'列と'B'列の値によってグループ化し、記述統計量を求める	df.groupby(['A', 'B']).describe()
縦棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
標準入力から1文字分読む	sys.stdin.read(1)
データフレームのリストカラムの未入力値をxにセットする	df[aList].fillna(x)
散布図に黒い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列を部分文字列によって二分する	s.partition(sub)
辞書からキーの値か、もしくは要素を参照する	aDict.get(key, element)
青紫色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
両端キューから最初の値を取り除く	deq.remove(element)
実行結果をマゼンタで表示できる文字列にする	f'\033[35m{value}\033[0m'
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
ライトゴールドロディイエロー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
キーが辞書上で未定義かどうか調べる	key not in aDict
折れ線グラフをライトコーラル色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcoral')
キューをリストにする	list(deq)
正則化付き単回帰モデルを用意する	model = sklearn.linear_model.ElasticNet()
データ列をValueMapで置き換える	ds.replace(ValueMap)
データフレームの列がx以上かつx2未満の行を取り出す	df[(x <= df[column]) & (df[column] < x2)]
棒グラフをブランチドアーモンド色として描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
線グラフの色をダークオーキッドに変更する	plt.plot(データ列x, データ列y, color='darkorchid')
黒いクロスマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ピアソン積率相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
クラス分類の予測精度をヒートマップで調べる	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
option: グラフの色をダークレッドに変更する	color = 'darkred'
ホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='white')
整数nの二進文字列を使う	bin(n)[2:]
option: 文字コードをSJISに指定する	encoding = 'shift_jis'
散布図の▲マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
グリッドの線種を点線に変更する	plt.grid(linestyle='dotted')
タイムスタンプデータが木曜日か	aDatetime.weekday() == 3
option: バッファリングのサイズを大きくする	buffering = 4096
回帰分析をMLPで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
ホットピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
パターンに文字列の先頭で複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
列のイミュータブルなセットを求める	frozenset(iterable)
実数が非数	math.isnan(x)
小数点数を実数で割った剰余	math.remainder(x, x2)
リストとリストの散布図に黒い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
いつまでもnからstep間隔で数え上げるする	itertools.count(start=n, step=step)
赤い左三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
大バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
タプルの最初のオブジェクトを探す	aTuple.index(element)
データフレームのリストカラムを1000の位で四捨五入する	df[aList].round(-3)
ヒストグラムを暗い赤色として描画する	plt.hist(データ列, color='darkred')
データ列のNaNを最小値で埋める	ds.fillna(ds.min())
一方に含まれ他方に含まれない集合	aSet.difference(aSet2)
棒グラフをピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='pink')
オブジェクトがプロパティを持つ	hasattr(obj, プロパティ名)
ライムにヒストグラムの色を指定する	plt.hist(データ列, color='lime')
文字列を区切りで区切り、、列挙する	s.split(sep)
まとめてデータフレームのリスト列の値をreplに正規表現patternで変更する	df[aList].replace(pattern, repl, regex=True)
データ列の欠損値を後の値に設定する	ds.fillna(method='bfill')
option: 色をオーキッドに設定する	color = 'orchid'
割合付きの円グラフを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
折れ線グラフの色をビスクに変更する	plt.plot(データ列x, データ列y, color='bisque')
横棒プロットを描画して、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
行列の列ごとの分散を求める	np.var(aArray, axis=0)
ヒストグラムをライトイエロー色を用いて描画する	plt.hist(データ列, color='lightyellow')
データフレームを２つの列で並べ直して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームを表示するとき、表示可能な最大行数を増やす	pd.set_option('display.max_rows', n)
データフレームの列の文字列が文字列が含まれるデータを選ぶ	df[df[column].str.contains(s)]
データ列の欠損値を中央値に指定する	ds.fillna(ds.median())
オブジェクトが整数クラスのインスタンスか調べる	isinstance(obj, int)
文字列はタイトルケース	s.istitle()
型が名前付きタプルかどうか調べる	issubclass(C, tuple)
折れ線グラフの印を▲印にする	plt.plot(データ列x, データ列y, marker='^')
列のpercentパーセンタイル	ds.quantile(percent/100)
散布図のマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
配列とイテラブルについての散布図にrgbの右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ライトコーラル色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
ファイルからフォルダ名を求める	os.path.dirname(filepath)
nが1もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
データフレームの列の標準偏差を計算する	df[col].std()
散布図にrgbの▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図をコーンフラワーブルー色として描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データフレームを列の値によってグループ化して列挙する	[(name, group) for name, group in df.groupby(column)]
折れ線グラフをクリムゾン色として描画する	plt.plot(データ列x, データ列y, color='crimson')
散布図のマーカーを▼にする	plt.scatter(データ列x, データ列y, marker='v')
行列にはいくつ要素があるか調べる	aArray.size
スタックを列から作る	collections.deque(iterable)
文字列を赤色で出力する	print(f'\033[31m{value}\033[0m')
余弦の逆数	math.acos(x)
ベクトルのユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
赤いダイアモンドマーカーをリストと配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
黒い大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
配列とイテラブルについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ファイルをオープンして]、バイナリ書き込みストリームを求める	open(filepath, mode='wb')
option: スラグレー色を用いる	color = 'slategray'
データフレームからn行をランダムに重複ありでサンプリングする	df.sample(n, replace=True)
点線に折れ線グラフの線の種類を指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
マッピングをJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
ベクトルの要素ごとの積	np.multiply(aArray, aArray2)
二つのタプルをネストする	collections.ChainMap(aDict, aDict2)
散布図に赤い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
ホワイトスモーク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
ダークオレンジにヒストグラムの色を設定する	plt.hist(データ列, color='darkorange')
黄色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
折れ線グラフの色をダークシアグリーンに変更する	plt.plot(データ列x, データ列y, color='darkseagreen')
リストの推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
赤い右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
データ列の欠損値を前の行の値で埋める	ds.fillna(method='ffill')
淡いピンク色にヒストグラムの色をセットする	plt.hist(データ列, color='lightpink')
横棒グラフをダークオリーブグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
黒いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
棒グラフをコーラル色として描画する	plt.bar(データ列x, データ列y, color='coral')
紺色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
オールドレースにヒストグラムの色を設定する	plt.hist(データ列, color='oldlace')
データ列を閾値を用いて二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
散布図をピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='pink')
データフレームの中で何行、重複するか調べる	df.duplicated().sum()
辞書からキーで指定したエントリをポップする	aDict.pop(key)
数を浮動小数点数から引く	x - y
グラフの大きさを指定する	plt.figure(figsize=(横幅, 高さ))
タプルに要素を項目名として加える	aDict[key] = element
折れ線グラフの三角印の線幅を変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
パールゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
自然数の並べ方の総数	math.perm(n)
option: スチールブルー色を用いる	color = 'steelblue'
データフレームのカラムの日を見る	df[col].dt.day
データ列の移り変わりを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
カウンタのキーのカウント	aCounter[element]
ふたつの集合が集合と互いに素	aSet.isdisjoint(aSet2)
ヒストグラムの色をダークオリーブグリーンに変更する	plt.hist(データ列, color='darkolivegreen')
option: ミディアムバイオレットレッドを使う	color = 'mediumvioletred'
option: フォントの色をオールドレースに設定する	color = 'oldlace'
データフレームのリストカラムの中にある日付データと文字列の合計をカウントする	df[aList].isin([value, value2]).sum()
小数点数の指数部を求める	math.frexp(x)[1]
行列の行ごとの分散を求める	np.var(aArray, axis=1)
option: グラフの色をミディアムパープルに指定する	color = 'mediumpurple'
折れ線グラフの色をグリーンに変更する	plt.plot(データ列x, データ列y, color='green')
タプルに項目名がある	key not in aDict
マルーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
横棒グラフをグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='gray')
リストの値を逆順にする	aList[::-1]
疑似乱数平均と標準偏差からを求める	random.normalvariate(mu=0.5, sigma=0.2)
カウンタをゼロにする	aCounter.clear()
option: ダークオレンジを使う	color = 'darkorange'
部分文字列で文字列を区切って列挙する	s.split(sub)
データ列を四捨五入して、整数にする	ds.round().astype(int)
線グラフをライムグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='limegreen')
ミディアムバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
折れ線グラフの▼マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
nの二進文字列	bin(n)[2:]
レベッカパープル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
最頻値でデータフレームの列のNaNを埋める	df[col].fillna(df[col].mode().iloc[0])
option: 濃いシアン色を用いる	color = 'darkcyan'
option: 深紅にグラフの色を設定する	color = 'crimson'
イテラブルと配列についての散布図に上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
箱ひげ図に簡単な説明をつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
黒い▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列が大文字か調べる	s.isupper()
カラーテーマを暗くする	sns.set(pallete='dark')
option: フォントの色をパールバイオレットレッドにセットする	color = 'palevioletred'
option: ミディアムターコイズを使う	color = 'mediumturquoise'
ファイルをオープンして]、追加ストリームを見る	open(filepath, mode='a')
データフレームのカラムのNaNを直前の値に設定する	df[col].fillna(method='ffill')
散布図を淡い茶色色で描画する	plt.scatter(データ列x, データ列y, color='tan')
行列のユニークな要素とそのインデックスを計算する	u, indices = np.unique(aArray, return_index=True)
散布図の菱形マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
option: ディープスカイブルーにフォントの色をセットする	color = 'deepskyblue'
整数nはリストのどれかかどうか確認する	n in aList
本日をISO書式の文字列にする	datetime.datetime.today().isoformat()
度数分布図を横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームの列名リストで指定した列を削除する	df.drop(columns, axis=1)
文字列のの開始位置から終了位置までの間に部分文字列がいくつかあるかカウントする	s.count(sub, start, end)
二つの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
点線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
破壊的にデータフレームのn行目を削除する	df.drop(n, axis=0, inplace=True)
円グラフの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
浮動小数点数に実数を加える	x + y
線を赤い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ライトサーモン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
縦棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
データフレームのリストカラムの中に含まれる文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
リストの文字列の位置をエラーなく見る	aList.index(element) if element in aList else -1
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
箱髭図でデータ列を描く	plt.boxplot(データ列)
数のn乗の数剰余を求める	pow(x, n, y)
バイオレット色のヒストグラムを描画する	plt.hist(データ列, color='violet')
ラベンダー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
棒グラフをクリムゾン色を用いて描画する	plt.bar(データ列x, データ列y, color='crimson')
散布図をカーキ色として描画する	plt.scatter(データ列x, データ列y, color='khaki')
データ列の第一四分位数を求める	ds.quantile(0.25)
option: 四角印を使う	marker = 's'
右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>')
option: バイアスを計算しない	fit_intercept = False
リストの値をソートする	sorted(aList)
大量のデータ列が正規分布に従うか調べる	scipy.stats.kstest(データ列, 'norm')
option: 右三角マーカーを加える	marker = '>'
カラムの欠損値を最大値に減らす	ds.fillna(ds.max())
文字列が全てASCII文字か	s.isascii()
データフレームのリストカラムのモードを計算する	df[aList].mode()
データフレームの空文字を未入力値に変換しドロップする	df.replace('', np.nan).dropna()
スライド用にグラフを指定する	sns.set(context='talk')
ファイルパスを読み込みできるようにオープンする]	open(filepath, mode='r')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれない	s.find(sub, start, end) == -1
折れ線グラフの色をシエナにセットする	plt.plot(データ列x, データ列y, color='sienna')
組の平均値	sum(aTuple)/len(aTuple)
辞書をJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
アルファベットを全部求める	string.ascii_letters
データフレームの値が未入力値か	df.isna()
データフレームをから読み込む	pd.read_excel(filename)
文字列を部分文字列を使って区切る	s.split(sub)
キューの左に要素を追加する	deq.appendleft(element)
タプルを番号付けする	enumerate(aTuple)
黒いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
キューからポップする	deq.pop()
ネイビー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
ヒストグラムを暗い赤色を用いて描画する	plt.hist(データ列, color='darkred')
縦棒グラフを描画し、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
文字列の中のASCII限定として正規表現による全マッチを使う	re.findall(pattern, s, flags=re.ASCI)
文字コードtextで書き込みできるようにファイルパスを開く]	open(filepath, mode='w', encoding=text)
option: 線の種類を実線に変更する	linestyle = 'solid'
線形モデルの切片を使う	model.intercept_
パパイヤウィップ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
1からnまでの整数リストを使う	list(range(1, n+1))
散布図をマゼンタ色を用いて描画する	plt.scatter(データ列x, データ列y, color='magenta')
折れ線グラフの色をミッドナイトブルーに変更する	plt.plot(データ列x, データ列y, color='midnightblue')
数列とリストについて散布図を描いて、マーカーをクロスに指定する	plt.plot(データ列x, データ列y, marker='x')
1で全要素を初期化したベクトルを初期化する	np.ones(要素数, dtype=np.int)
option: グラフを実線にセットする	linestyle = 'solid'
星印を用いる折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
option: ダークバイオレット色を使用する	color = 'darkviolet'
option: バリーウッドを使う	color = 'burlywood'
折れ線グラフをローングリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームを列の値によって集約し、各グループの平均値を求める	df.groupby(column).mean()
データフレームをJSONLファイルにインデックスを付けずに書き込む	df.to_csv(filename, index=None)
データフレームをTSVから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
集合の濃度を求める	len(aSet)
ブラック色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
option: ライトスレイグレー色を使用する	color = 'lightslategray'
縦棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
ファイルを読み込みモードで開いて]、fとする	f = open(filepath, mode='r')
option: グレー色を使用する	color = 'gray'
スタッキングを用いて回帰分析をする	sklearn.ensemble.StackingRegressor()
折れ線グラフのクロス印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
option: デピンクにグラフの色を設定する	color = 'deeppink'
シーケンスを関数でフィルタする	filter(func, iterable)
オブジェクトが関数かどうか調べる	callable(obj)
シルバー色でヒストグラムを描画する	plt.hist(データ列, color='silver')
データフレームのリストカラムの中にある文字列の合計を求める	df[aList].isin([value]).sum()
データフレームの列をグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
散布図をライトスレイグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
出現頻度を図示する	plt.hist(データ列)
要素が全て1のベクトル	np.ones(要素数, dtype=np.int)
ビン数nを用いて等量でリストをビン分割する	pd.qcut(aList, n)
nがn2以上かどうか判定する	n >= n2
横方向に二つのデータフレームをつなぐ	pd.concat([df, df2], axis=1)
ベクトルの列ごとの最大	np.max(aArray, axis=0)
データフレームのリストカラムの平均値を計算する	df[aList].mean()
Pandasでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col])
折れ線グラフに赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データ列を箱髭図で描画する	plt.boxplot(データ列)
ライトコーラル色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
option: フォントの色をビスクに指定する	color = 'bisque'
真スーパーセットか調べる	aSet > aSet2
散布図をピーチパフ色として描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
option: フォントの色をサンディーブラウンに変更する	color = 'sandybrown'
多い順にカウンタをリストとして得る	aCounter.most_common()
縦棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
ダークオリーブグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
option: グラフの色を黄緑に設定する	color = 'chartreuse'
option: グリーンを用いる	color = 'green'
データフレームの上n行を確認する	df.head(n)
SVDで多次元データを淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
option: ピーチパフを使う	color = 'peachpuff'
option: ディムグレーにグラフの色を設定する	color = 'dimgray'
2つのカウンタの共通する要素を計算する	aCounter & aCounter2
データフレームの最後n行を選択する	df.tail(n)
棒グラフをカデットブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cadetblue')
配列とリストについての散布図に▼マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v')
データ列の欠損値をモードで埋める	ds.fillna(ds.mode().iloc[0])
散布図の右三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
OSのエンディアン	sys.byteorder
データ列を指定した値を用いて二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
パパイヤウィップ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
ヒストグラムをターコイズ色として描画する	plt.hist(データ列, color='turquoise')
ヒストグラムをミディアムシアグリーン色を用いて描画する	plt.hist(データ列, color='mediumseagreen')
ディープスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
折れ線グラフの色をライトイエローに指定する	plt.plot(データ列x, データ列y, color='lightyellow')
散布図に赤い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: マーカーを上三角に指定する	marker = '^'
列'A'と列'B'をキーにして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
option: 箱ひげ図に平均を追記する	showmeans = False
データフレームを列で小さい順に整列する	df.sort_values(by=column, ascending=True)
空の階層化マップを作る	collections.ChainMap()
ファイルを文字コードtextとして開く]	open(filepath, encoding=text)
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
色をパステル調にする	sns.set(pallete='pastel')
エクセルファイルファイルを読み込む	pd.read_excel(filename)
正規分布を判定する	scipy.stats.shapiro(データ列)
データフレームのグループ毎の個数	df.groupby(column).count()
リストとリストについて散布図を描いて、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ヒストグラムの色を青に変更する	plt.hist(データ列, color='blue')
nは組のいづれか	n in aTuple
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
フォレストグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
浮動小数点数を小数点第一位で丸める	round(x, 1)
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
文字列が文字列リストのいづれ	s in aStringList
rgbの右三角マーカーをデータ列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームを２つの列によって並べ直す	df.sort_values(by=['A', 'B'])
コロンで文字列を区切って、列挙する	s.split(':')
リストと配列の散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームを各列毎に集約して、列の分散を求める	df.groupby(column)[column2].var()
データフレームの中の列を等量で分割数nでビン分割する	pd.qcut(df[col], n)
棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
option: ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
破壊的に降順に二つの列によってデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
文字列の先頭の空白やタブを取り除く	s.lstrip()
縦棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
ヒストグラムの色をティールに変更する	plt.hist(データ列, color='teal')
option: ダイアモンドマーカーを使用する	marker = 'D'
データフレームをValueMapでまとめて置換する	df.replace(ValueMap)
リストのn番目以降の部分を抽出する	aList[n:]
データフレームをJSONLファイルにSJISで書き込む	df.to_csv(filename, encoding='shift_jis')
ふたつの集合のユニオンを求める	aSet.union(aSet2)
option: ▼マーカーを描画する	marker = 'v'
クラスのサブクラス	issubclass(サブクラス, クラス)
配列とリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
棒グラフをスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='skyblue')
散布図に菱形マーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
ライトスレイグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
データフレームをグループ化し、それぞれの列に対し合計を算出する	df.groupby(column)[column2].sum()
縦棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
サドルブラウン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ファイルパスを書き込みできるようにSJISで開く]	open(filepath, mode='w', encoding='shift_jis')
横棒グラフをベージュ色を用いて描画する	plt.barh(データ列x, データ列y, color='beige')
データ列をn個にビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
option: コーンフラワーブルー色を用いる	color = 'cornflowerblue'
名前付きタプルを引数からインスタンス化する	C._make(パラメータ)
折れ線グラフをライトサーモン色として描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をピーチパフに指定する	plt.plot(データ列x, データ列y, color='peachpuff')
サポートベクター分類モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
カラムを10の位で丸める	ds.round(-1)
option: 色をトマトに設定する	color = 'tomato'
文字列内にひとつでもアルファベットが含まれるかどうか調べる	any(c.isalpha() for c in s)
文字列中にひとつでも非アルファベットが含まれる	any(not c.isalpha() for c in s)
データフレームの列の値がx以上かつx2未満のデータを選択する	df[(x <= df[column]) & (df[column] < x2)]
option: 線幅を3.0ポイントに変更する	linewidth = 3.0
二つのデータフレームを列をキーにして結合する	pd.merge(df, df2, on=column)
散布図をレベッカパープル色として描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
折れ線グラフの星印を赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
折れ線グラフの丸マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
カラムの欠損値を後の値に指定する	ds.fillna(method='bfill')
線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
option: グラフの色をフローラルホワイトにする	color = 'floralwhite'
文字列の終了位置より前に部分文字列がない	s.find(sub, 0, end) == -1
データフレームのリスト列を小数点以下n桁で丸める	df[aList].round(n)
option: エンコーディングをUTF8に指定する	encoding = 'utf-8'
クラス分類の適合率と再現率の調和平均を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
データフレームの列をベクトルにする	pd.get_dummies(df[column])
データ列の折れ線グラフをクロス印として描画する	plt.plot(データ列x, データ列y, marker='x')
文字列中にひとつでも非空白が含まれる	any(not c.isspace() for c in s)
横棒グラフをシスル色を用いて描画する	plt.barh(データ列x, データ列y, color='thistle')
リストとリストの散布図に赤いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームを複数の列の値によってグループ化し、記述統計量を求める	df.groupby(columns).describe()
option: ティールを使う	color = 'teal'
文字列がアルファベットか	s.isalpha()
折れ線グラフの色をコーラルに指定する	plt.plot(データ列x, データ列y, color='coral')
option: グラフの線の種類を点線に変更する	linestyle = 'dotted'
データ列が正規分布からどの程度、歪んでいるか確認する	ds.kurt()
option: コーラル色を使用する	color = 'coral'
半透明の実線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームのn番目の行を選択する	df.loc[n]
浮動小数点数の仮数部	math.frexp(x)[0]
ヒストグラムの色をスノーにする	plt.hist(データ列, color='snow')
線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
棒グラフをサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='salmon')
線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
スタックの中に要素が含まれてる	element in deq
xが一桁の正の数	0 <= x <= 9
折れ線グラフの丸印を赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
文字列が全て印字できるか調べる	s.isprintable()
ベクトルの要素ごとに加算する	aArray + aArray2
ケンドールでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
ファイルからバイナリ書き込みストリームを開いて]、fとする	f = open(filepath, mode='wb')
データフレームの列の未入力値を前の値で埋める	df[col].fillna(method='ffill')
ディープスカイブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームの先頭n行を取り出す	df.head(n)
フローラルホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
プログラムの実行をここで終了する	sys.exit()
ミディアムスプリンググリーンにヒストグラムの色を変更する	plt.hist(データ列, color='mediumspringgreen')
option: マーカーを△に指定する	marker = '^'
数を実数から引く	x - y
データフレームの列がxより大きい行を選ぶ	df[df[column] > x]
黄色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
リストの相関を可視化する	plt.scatter(データ列x, データ列y)
日付時刻データからn分、減らす	aDatetime - datetime.timedelta(minutes=n)
rgbの上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
部分文字列か確認する	sub in s
グラフの題名を指定する	plt.title('グラフの名称')
タプルの中の最も大きい値	max(aTuple)
データ列の文字列をNaNに変換する	ds.replace(s, np.nan)
ファイル全体をリストに変換する	[s.strip() for s in f.readlines()]
ダークスラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データフレームの列をダミー変数にする	pd.get_dummies(df[column])
青い▽マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
四分位数ごとにリストを分割する	pd.qcut(aList, 4)
option: フォントの色をペールグリーンに指定する	color = 'palegreen'
双方向キューのstart〜endの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
２つの実行結果をコロンで区切って表示する	print(value, value2, sep=':')
線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
マッピングをJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
データフレームの列がxの行を取り出す	df[df[column] == x]
データフレームのリスト列がどの程度、分散しているか見る	df[aList].var()
折れ線グラフの大バツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
散布図に赤い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
折れ線グラフのポイント印の大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
データフレームから破壊的に重複した行を取り除く	df.drop_duplicates(inplace=True)
option: パレットトルコイズにフォントの色を設定する	color = 'paleturquoise'
正規分布に基づく確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
赤いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームを表示するときヘッダー行を右寄せにセットする	pd.set_option('colheader_justify', 'right')
クラスが名前付きタプルか確認する	issubclass(C, tuple)
option: ロージーブラウンを使う	color = 'rosybrown'
option: スノーにフォントの色を指定する	color = 'snow'
文字列タブ区切りのファイルからCSVファイルをn番目のカラムをインデックスとして読む	pd.read_csv(filename, index_col=n)
列'A'と列'B'をキーとして２つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
項目名がタプルにないとき、要素を追加する	aDict.setdefault(key, element)
データフレームのリスト列を丸めて整数型にする	df[aList].round().astype(int)
データフレームを各列毎に分類して列の分散を求める	df.groupby(column)[column2].var()
文字列の中の複数行対応として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
データ列のタイムゾーンを文字列にする	ds.tz_convert(s)
カラムの一意な値を見る	df[col].unique()
数値の数値を求める	float(e)
option: どの行もヘッダに設定しない	header = None
ゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
データ列とデータ列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgray')
option: ロイヤルブルーを使用する	color = 'royalblue'
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
ヒストグラムの色をオレンジレッドに変更する	plt.hist(データ列, color='orangered')
折れ線グラフの色をグリーンイエローにセットする	plt.plot(データ列x, データ列y, color='greenyellow')
文字列中に部分文字列が存在するか	sub in s
ライトスチールブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
標準エラー	sys.stderr
ファイルをSJISとして開く]	open(filepath, encoding='shift_jis')
データ列のNaNを中央値に増やす	ds.fillna(ds.median())
データフレームの数値を一度に丸める	df.round()
データフレームのリスト列を10の位で四捨五入して整数型にする	df[aList].round(-1).astype(int)
散布図を濃い青色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
ロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
ヒストグラムをシアン色として描画する	plt.hist(データ列, color='cyan')
π	math.pi
散布図の△マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
集合にイテラブルを追加する	aSet.update(iterable)
リストの最初のオブジェクトを探す	aList.index(element)
データフレームを表示するとき、小数点以下の表示精度をする	pd.set_option('precision', n)
データフレームをにバイオリン図でプロット化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
二つの浮動小数点数は十分に近いか調べる	math.isclose(x, x2)
整数の小数点以下を丸める	round(x)
データフレームの列の未入力値を直後の値で置き換える	df[col].fillna(method='bfill')
option: 色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
タプルの末尾を使う	aTuple[-1]
キーがマップ上で定義されているかどうか	key in aDict
ピンク色を用いてヒストグラムを描画する	plt.hist(データ列, color='pink')
列をキーにして２つのデータフレームを結合する	pd.merge(df, df2, on=column)
ディムグレー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
タイムスタンプデータをn時間前にする	aDatetime - datetime.timedelta(hours=n)
option: グラフの色をパールゴールデンロッドに指定する	color = 'palegoldenrod'
散布図の丸印を黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
行列の平均値	np.mean(aArray)
行列の形状を計算する	aArray.shape
赤い実線を用いてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ピーチパフ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
文字列を右寄せする	s.rjust(文字列幅)
配列とリストの散布図を描画し、、ダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
オブジェクトはリストに含まれない	element not in aList
データフレームを列を用いてソートして更新する	df.sort_values(by=column, inplace=True)
列をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
ライトグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
文字列を走査しパターンにケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
散布図をスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='steelblue')
グラフの用途をプレゼンに指定する	sns.set(context='talk')
折れ線グラフの色をRGBで変更する	plt.plot(データ列x, データ列y, color='#800080')
option: サドルブラウンにグラフの色をする	color = 'saddlebrown'
折れ線グラフのポイント印の色を設定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
青い点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
文字列をカンマで区切り、、列挙する	s.split(',')
データフレームを２つの列の値によって分類して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
リストと配列についての散布図に赤い上三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
ヒストグラムの色をクリムゾンに指定する	plt.hist(データ列, color='crimson')
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
入力から二つの自然数を読み込む	A, B = map(int, input().split())
折れ線グラフのマーカーを上三角にする	plt.plot(データ列x, データ列y, marker='^')
データフレームの欠損値を直前の値に増やす	df.fillna(method='ffill')
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
データフレームの未入力値をxに設定する	df.fillna(x)
ロバストな線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
散布図の大バツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
オレンジ色を用いてヒストグラムを描画する	plt.hist(データ列, color='orange')
データ列の25パーセンタイル	ds.quantile(0.25)
オレンジレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
折れ線グラフの色を紺碧に変更する	plt.plot(データ列x, データ列y, color='azure')
データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
ファイルからバイナリ書き込みストリームを開いて]fとする	f = open(filepath, mode='wb')
行列の転置行列を求める	aArray.T
縦棒グラフをティール色で描画する	plt.bar(データ列x, データ列y, color='teal')
双方向キューの左にイテラブルの各要素を追加する	deq.extendleft(iterable)
文字列に漢字が使われているかどうか	re.search('[\u4E00-\u9FD0]', s)
シーグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
ライトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
棒グラフをディムグレー色を使って描画する	plt.bar(データ列x, データ列y, color='dimgrey')
カテゴリでグループ化してデータフレームの全カラムの相関をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
小数点数の逆余弦を求める	math.acos(x)
縦棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgray')
数列とリストについての散布図に黒い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
option: エンコーディングを文字列の示すエンコーディングに変更する	encoding = s
実数の双曲線正弦の逆数を求める	math.asinh(x)
最後の部分文字列で文字列を分割したときの前半の文字列	s.rpartition(sub)[0]
日付時刻データにn日を加算する	aDatetime + datetime.timedelta(days=n)
破線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
タプルにキーワード引数で更新する	aDict.update(**kwargs)
option: ３２ビット整数型を使う	dtype = np.int16
折れ線グラフに赤い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
回帰分析をランダムフォレストでする	model = sklearn.ensemble.RandomForestRegressor()
ヒストグラムの色をブラックにセットする	plt.hist(データ列, color='black')
折れ線グラフの左三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
マッピングをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
option: フォントの色をデピンクに変更する	color = 'deeppink'
タプルの値をソートする	sorted(aTuple)
データフレームから指定された二列だけ取り出す	df[[column, column2]]
配列の転置行列	aArray.T
スカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
組のn番目からn2番目まで	aTuple[n:n2]
数字を全部求める	string.digits
option: ライトサーモンを使用する	color = 'lightsalmon'
逆行列	np.linalg.inv(aArray)
リストを逆順にする	reversed(aList)
ネイビーにヒストグラムの色をする	plt.hist(データ列, color='navy')
濃いシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
部分文字列が文字列の終了位置より前にあるかどうか判定する	s.find(sub, 0, end) != -1
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategrey')
リストを展開して出力する	print(*aList)
Pandasで、データフレームのカラムを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
option: 行列のデータ型を指定する	dtype = np.int32
ダークレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
方程式として数式の変数の解を算出する	sympy.solve(e, z)
部分文字列か	sub in s
データフレームのリスト列の文字列を欠損値にする	df[aList].replace(s, np.nan)
RANSACでクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
折れ線グラフを半透明の点線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ヒストグラムの色をミディアムアクアマリンに指定する	plt.hist(データ列, color='mediumaquamarine')
option: ミディアムオーキッド色を使用する	color = 'mediumorchid'
逆順のデック	reversed(deq)
空のキューを用意する	collections.deque()
データ列の折れ線グラフを右三角印を用いて描画する	plt.plot(データ列x, データ列y, marker='>')
ダークグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
nまでのスライス	slice(n)
横棒グラフをトマト色を使って描画する	plt.barh(データ列x, データ列y, color='tomato')
ルートのチェーンマップを作成する	collections.ChainMap()
n個にリストをビン分割する	pd.cut(aList, n)
クラスのサブ型か確認する	issubclass(サブクラス, クラス)
実線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ベクトルの標準偏差を計算する	np.std(aArray)
リストをn回連結する	aList * n
プロットを論文用に設定する	sns.set(context='paper')
数列とリストについて散布図をプロットし、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データを外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データ列間のRMSEを求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
ヒストグラムの色をスレートブルーに変更する	plt.hist(データ列, color='slateblue')
双方向キューの左	deq[0]
option: UTF8を用いる	encoding = 'utf-8'
両端キューのstart番目からend番目の要素	collections.deque(itertools.islice(deq, start, end))
値は集合のメンバーでないかどうか調べる	element not in aSet
赤いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
等量でn個に配列を分割する	pd.qcut(aArray, n)
FIXME:カテゴリーデータを出現頻度順に整列する	df['A'].value_counts().sort_index().index
タイムスタンプデータからn秒分、減らす	aDatetime - datetime.timedelta(seconds=n)
カウンタから列を出現回数して減らす	aCounter.subtract(iterable)
データフレームのカラムの時刻	df[col].dt.hour
色付きの一点鎖線でデータ列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データ列の変遷を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
新しい文字列でパターンにマッチした文字列を置き換える	re.sub(pattern, newsub, s)
カラムの中にいくつNaNが存在するかカウントする	ds.isna().sum()
各列毎にデータフレームをグループ分けして、列の平均値を求める	df.groupby(column)[column2].mean()
黄色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
棒グラフをミディアムターコイズ色として描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
ふたつの集合のいずれか一方だけの集合を求める	aSet.symmetric_difference(aSet2)
リストが空でない	len(aList) != 0
データ列の分散を算出する	ds.var()
リストとリストについて散布図を描画してマーカーをクロスに指定する	plt.plot(データ列x, データ列y, marker='x')
事前に正規表現を複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
インディアンレッド色でヒストグラムを描画する	plt.hist(データ列, color='indianred')
辞書から項目名の値	aDict.get(key)
セットにイテラブルの要素を追加する	aSet.update(iterable)
分数モジュールをインポートする	import fractions
縦棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
rgbに棒グラフの色を変更する	plt.bar(ラベル列, データ列, color=rgb)
列からn個、ランダムに選ぶ	random.choices(iterable, k=n)
イテラブルから計数器を生成する	collections.Counter(iterable)
データフレームのリストカラムがどれだけ、分散しているか見る	df[aList].var()
ヒストグラムをミスティローズ色を用いて描画する	plt.hist(データ列, color='mistyrose')
折れ線グラフの色をダークターコイズに指定する	plt.plot(データ列x, データ列y, color='darkturquoise')
浮動小数点数を十の位で四捨五入する	round(x, -1)
データフレームのカラムがどの程度、分散しているか確認する	df[col].var()
ビン数nとしてデータ列を分割する	pd.cut(ds, n)
文字列がタプルの要素でないかどうか確認する	element not in aTuple
option: 色をパープルに設定する	color = 'purple'
散布図をパールゴールデンロッド色を使って描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
青色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
データ列の未入力値をモードで置き換える	ds.fillna(ds.mode().iloc[0])
行列をベースに全要素が初期値の行列	np.full_like(aArray, 初期値)
データ列の折れ線グラフを丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o')
予測値とデータの離れ具合をグラフ化する	sns.residplot(x='列名', y='列名', data=df)
折れ線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をディムグレーにセットする	plt.hist(データ列, color='dimgray')
折れ線グラフのバツ印の太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
後の行の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='bfill')
双方向キューをリストにする	list(deq)
データ列と配列についての散布図に黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: グリーンイエローを使う	color = 'greenyellow'
データフレームの列を散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
スカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='skyblue')
オールドレースにヒストグラムの色をする	plt.hist(データ列, color='oldlace')
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
からデータフレームを読む	pd.read_excel(filename)
赤いダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
option: フローラルホワイトにフォントの色を指定する	color = 'floralwhite'
データフレームを２つの列で昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
８進数字を全部見る	string.octdigits
線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
等差数列から整数乱数を求める	random.randrange(start, end, step)
option: シスル色を用いる	color = 'thistle'
散布図の印を黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
ビン数nで等しい量になるように配列をビン分割する	pd.qcut(aArray, n)
データフレームのカラムを削除する	df.drop(column, axis=1)
線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
折れ線グラフをイエローグリーン色として描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
折れ線グラフの色をスレートブルーにセットする	plt.plot(データ列x, データ列y, color='slateblue')
文字列が全て空白文字からなる	s.isspace()
最大値・最小値の範囲を用いて一様な疑似乱数を得る	random.uniform(最小値, 最大値)
整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int)
折れ線グラフのダイアモンド印の大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
色付きの実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データ列のNaNを最小値にセットする	ds.fillna(ds.min())
オプションで出力先を標準エラーに指定する	file = sys.stderr
配列とリストについての散布図に赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
配列とリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
カウンタの和集合	aCounter | aCounter2
オブジェクトは文字列クラスのインスタンスか	isinstance(obj, str)
最頻値でデータフレームのリスト列のNaNを埋める	df[aList].fillna(df[aList].mode().iloc[0])
データフレームのカラムをValueMapでまとめて置換する	df[col].replace(ValueMap)
降順にデータフレームを複数の列を用いてで整列する	df.sort_values(by=column, ascending=False)
option: 書き込み用に変更する	mode = 'w'
ホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
'A'列と'B'列によってデータフレームをまとめたグループを使う	df.groupby(['A', 'B'])
データフレームのNaNを平均値で補う	df.fillna(df.mean())
線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
縦棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
デピンクにヒストグラムの色を設定する	plt.hist(データ列, color='deeppink')
option: リネンに色を設定する	color = 'linen'
オプションで標準出力を使う	file = sys.stdout
データフレームのカラムの欠損値を平均に増やす	df[col].fillna(df[col].mean())
ヒストグラムをタン色を用いて描画する	plt.hist(データ列, color='tan')
option: 青紫色を使用する	color = 'violet'
n×n2の2次元リスト	[[0] * n for _ in range(n2)]
配列を度数分布図にする	plt.hist(データ列)
データフレームのリストカラムの平均	df[aList].mean()
ヒストグラムの色をライトサーモンにセットする	plt.hist(データ列, color='lightsalmon')
変数について数値のインテグラルを計算する	sympy.integrate(e, z)
線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
デックをタプルにする	tuple(deq)
ファイルを書き込み用に開いて]、fとする	f = open(filepath, mode='w')
データフレームの中に文字列とが存在する	df.isin([value, value2])
ペアリストpairsからカウンタを生成する	collections.Counter(dict(pairs))
option: ミディアムスレートブルーを使用する	color = 'mediumslateblue'
散布図をダークゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
散布図のポイント印の色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
横棒グラフをスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='skyblue')
自然数個のものからk個取り出したときの並べ方の総数を算出する	math.perm(n, k)
データフレームのカラムの未入力値を最小値で埋める	df[col].fillna(df[col].min())
option: カンマをセパレータで使用する	sep = ','
珊瑚色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
数列と配列について散布図を描画し、、左三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列を空白で分割し、、文字列リストに変換する	s.split()
文字列の中のケースを無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
option: 色をダークバイオレットにセットする	color = 'darkviolet'
ミントクリーム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームの要約統計量を計算する	df.describe()
折れ線グラフのダイアモンドマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
x,y,zをそれぞれn,n2,n3にセットする	x, y, z = n, n2, n3
プロットのカラーパレットを濃くする	sns.set(pallete='deep')
列のイミュータブルな集合	frozenset(iterable)
option: 印を▲に変更する	marker = '^'
データフレームとしてTSVを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
折れ線グラフのマーカーを△にする	plt.plot(データ列x, データ列y, marker='^')
xが1もしくは2	x == 1 or x == 2
データフレームのリスト列の欠損値を前の行の値で補う	df[aList].fillna(method='ffill')
データフレームの全カラムの散らばりを可視化する	sns.pairplot(df)
ファイルを改行を取り除いて一行ずつ読む	f.readline()
散布図のクロスマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
option: グラフの色をハニーデューに指定する	color = 'honeydew'
散布図を黒い星マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームの列と列に重複があれば、ドロップする	df.drop_duplicates(subset=column)
列名リストを用いてデータフレームをソートし、、更新する	df.sort_values(by=column, inplace=True)
小数点以下3桁までデータフレームをJSONLファイルに保存する	df.to_csv(filename, float_format='%.3f')
棒グラフをブルーバイオレット色を用いて描画する	plt.bar(データ列x, データ列y, color='blueviolet')
エンディアンを調べる	sys.byteorder
マルーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
散布図の△マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
横棒グラフをライトブルー色として描画する	plt.barh(データ列x, データ列y, color='lightblue')
縦棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
データフレームのリスト列の未入力値を直後の値に指定する	df[aList].fillna(method='bfill')
双方向キューの値数を求める	len(deq)
カーネル密度推定グラフ描画でを使用する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフの大バツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
配列とリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
オリベドラブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
リストと配列の散布図に△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
値をプリントする	print(value)
文字列の左側から部分文字列を除く	s.lstrip(sub)
文字列の後ろ	s[-1]
データフレームの欠損値を平均で置換する	df.fillna(df.mean())
データフレームを列を用いて降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームのカラムは正規分布からどの程度、歪んでいるか見る	df[col].kurt()
散布図のダイアモンドマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
チョコレート色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
プログラムのファイル名	sys.argv[0]
線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
文字列のケースをする	s.casefold()
option: フォントの色をミディアムパープルに変更する	color = 'mediumpurple'
グラフで使える色の一覧を使う	matplotlib.colors.cnames
option: ミッドナイトブルーにフォントの色を設定する	color = 'midnightblue'
イテラブルとイテラブルについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
切り下げて整数に変換する	math.floor(x)
ミディアムオーキッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ヒストグラムを３つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
コーンズシルク色を使ってヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
疑似乱数を計算する	random.random()
目盛線	plt.grid(alpha=0.5)
２つのデータ列の散布図として残差を描画する	sns.residplot(x=データ列, y=データ列)
タイムスタンプデータををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
文字列を走査し、正規表現にケースを無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
nがn2よりも大きいかどうか確認する	n > n2
文字列内にひとつでも数字があるか調べる	any(c.isdigit() for c in s)
散布図の星印を青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
横棒グラフをフクシア色を使って描画する	plt.barh(データ列x, データ列y, color='fuchsia')
散布図を暗い赤色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
青紫にヒストグラムの色を設定する	plt.hist(データ列, color='violet')
option: マーカーを右三角に指定する	marker = '>'
ラベンダー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
折れ線グラフの色を黄色に変更する	plt.plot(データ列x, データ列y, color='yellow')
リストとリストについて散布図を描画し、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
配列の推移を赤い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
ベクトルの要素ごとの最大公約数を求める	np.gcd(aArray, aArray2)
ダークシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
重複ありでランダムにデータフレームからn行をサンプリングする	df.sample(n, replace=True)
データフレームを複数の列によって並べ直して、更新する	df.sort_values(by=column, inplace=True)
散布図に青いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
イテラブルとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
黒い星マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
真下位集合か確認する	aSet < aSet2
データ列の中のNaNの合計を数える	ds.isna().sum()
データフレームを各列毎にグループ分けして、列の最小値を求める	df.groupby(column)[column2].min()
線形回帰モデルの切片を見る	model.intercept_
カラムがどの程度、分散しているか見る	ds.var()
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
折れ線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
白い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
option: ライトスチールブルー色を用いる	color = 'lightsteelblue'
数値の変数に数式を代入する	e.subs(z, e2)
データフレームの列の中にいくつ未入力値があるか数える	df[col].isna().sum()
リストを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
グラフの大きさを設定する	plt.figure(figsize=(横幅, 高さ))
線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
ガンマ関数を使う	math.gamma(x)
整数を小数点以下で丸める	round(x, n)
折れ線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
直前の値でデータフレームの欠損値を補う	df.fillna(method='ffill')
データフレームを列によってまとめたグループを見る	df.groupby(column)
予測データの混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
二つの列によってデータフレームを昇順に並べ、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
箱ひげ図に簡単な説明を設定する	plt.boxplot([データ列, データ列], labels=['A', 'B'])
実数のkを底とする対数	math.log(x, k)
リストの推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
折れ線グラフに大バツ印を使う	plt.plot(データ列x, データ列y, marker='X')
シーグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
リストを緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
カラムを1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
文字列の中の正規表現による全てのマッチを求める	re.findall(pattern, s)
複数の列によってデータフレームをソートし、更新する	df.sort_values(by=column, inplace=True)
散布図を黒い四角マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
nがn2の倍数でないかどうか調べる	n % n2 != 0
JSON形式の文字列をデータにする	json.loads(jsonString)
データフレーム全体をインデックスで小さい順にソートする	df.sort_index(ascending=True)
カテゴリで色分けしてデータフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
option: 濃いシアンを使用する	color = 'darkcyan'
棒グラフをダークターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
度数分布図を二つ並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームのカラムの名前一覧	df.columns
option: 淡いピンク色を使う	color = 'lightpink'
文字列の開始位置から終了位置までの範囲で部分文字列の登場をカウントする	s.count(sub, start, end)
フォーマットfmtでデータ列をPandasの日付型に変換する	pd.to_datetime(ds, format=fmt)
破線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームのカラムの未入力値を最小値で置き換える	df[col].fillna(df[col].min())
整数nを二進表現にする	bin(n)
Pandasでフォーマットとしてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
ヒストグラムの色をミディアムスレートブルーにセットする	plt.hist(データ列, color='mediumslateblue')
コマンド引数のリスト	sys.argv[1:]
実数のハイパボリック・コサイン	math.cosh(x)
データフレームとしてタブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t')
文字列を文字のリストに変換する	list(s)
カーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
replにデータフレームのリストカラムの値を正規表現patternでまとめて変更する	df[aList].replace(pattern, repl, regex=True)
折れ線グラフの色を真紅に指定する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
縦棒グラフをプロットする	plt.bar(ラベル列, データ列)
nが2で割り切れるかどうか調べる	n % 2 == 0
横棒グラフをミディアムオーキッド色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
横棒グラフをライトグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightgray')
オブジェクトは整数かどうか調べる	isinstance(obj, int)
最後から文字列を空白で区切る	s.rsplit()
rgbのバツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: フォントの色をブルーバイオレットに設定する	color = 'blueviolet'
棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
option: ブルーバイオレットを使う	color = 'blueviolet'
データフレームのn番目の行を抽出する	df.loc[n]
部分文字列を用いて文字列を区切る	s.split(sub)
正規分布に基づく累積分布関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
オールドレース色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
印字できる文字列にする	ascii(x)
散布図をポイント印で描画する	plt.scatter(データ列x, データ列y, marker='.')
数式の変数についてのn階微分を計算する	sympy.diff(e, z, n)
破線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
option: グラフの色をディムグレーにセットする	color = 'dimgray'
部分文字列が部分文字列で開始するか調べる	s.startswith(sub)
サーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
データフレームを列を用いてソートして、更新する	df.sort_values(by=column, inplace=True)
ふたつの集合の交差	aSet.intersection(aSet2)
二つの集合の和集合を見る	aSet.union(aSet2)
線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
ヒストグラムを描く	plt.hist(データ列)
行列の列ごとの最大値を調べる	np.max(aArray, axis=0)
横棒グラフをブルーバイオレット色として描画する	plt.barh(データ列x, データ列y, color='blueviolet')
option: 改行を区切りで用いる	sep = '\n'
カウンタの項目をリストとして得る	aCounter.keys()
列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
列の長さnの順列を得る	itertools.permutations(iterable, n)
データフレームの行をリセットする	df.reset_index()
折れ線グラフの色をミディアムバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: シーグリーン色を用いる	color = 'seagreen'
データフレームの欠損値をxに指定する	df.fillna(x)
整数nをバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big')
カンマで区切って２つの文字列を出力する	print(value, value2, sep=',')
正規表現によって文字列を置き換える	re.sub(pattern, newsub, s)
符号なし８ビット整数型のゼロ埋めされたベクトルを初期化する	np.zeros(要素数, dtype=np.uint8)
列名リストで昇順にデータフレームをソートする	df.sort_values(by=column, ascending=True)
最初の部分文字列で文字列を分けたときの後半の文字列	s.partition(sub)[-1]
折れ線グラフを深紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの列を度数分布図にする	plt.hist(df[column])
インプレースに双方向キューの要素を逆順にする	deq.reverse()
タイムスタンプデータを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
ユニークな各要素の出現回数	np.unique(aArray, return_counts=True)
カテゴリ別で色分けして、データフレームをにバイオリン図で描画する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: グラフの色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
散布図を星印で描画する	plt.scatter(データ列x, データ列y, marker='*')
データフレームの文字列を未入力値にする	df.replace(s, np.nan)
縦棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
スレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
プロットの縦横比を等しくする	plt.axis('equals')
表データの列名を列から文字列に変更する	df.rename(columns={column: name})
データフレームの重複する行	df[df.duplicated(keep=False)]
散布図の右三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
option: 色をブラックに変更する	color = 'black'
データ列は何時か見る	ds.dt.hour
縦棒グラフをイエローグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
OSがMacOSかどうかテストする	sys.platform.startswith('darwin')
イテラブルを文字列リストに変換してタブによって連結する	'\t'.join(map(str, iterable))
ペルー色としてヒストグラムを描画する	plt.hist(データ列, color='peru')
散布図を黒い丸マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
折れ線グラフにバツ印を用いる	plt.plot(データ列x, データ列y, marker='x')
アクア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
データ列とイテラブルについて散布図を描いて、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
リストの要素を昇順に並べ直す	sorted(aList, reverse=False)
最大値・最小値で整数乱数を得る	random.randint(最小値, 最大値)
列のユニークな値を見る	ds.unique()
データ列を等しい量になるようにn個にビン分割する	pd.qcut(ds, n)
option: 線の種類を一点鎖線に変更する	linestyle = 'dashbot'
ダークマゼンタ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
ヒストグラムの色をパパイヤウィップに変更する	plt.hist(データ列, color='papayawhip')
文字列中の部分文字列を別の文字列に全部置き換える	s.replace(sub, newsub)
入力を整数として受け取る	int(input())
ゲインズボロ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
文字列中に非アスキー文字があるか調べる	any(not c.isascii() for c in s)
グリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
スピアマン順位相関係数としてデータフレームのリストカラムの相関行列	df[aList].corr(method='spearman')
整数nの八進リテラル	oct(n)
各列毎にデータフレームをグループ化し、カラムの個数を求める	df.groupby(column)[column2].count()
n2行n列の2次元リスト	[[0] * n for _ in range(n2)]
option: ライトゴールドロディイエロー色を使用する	color = 'lightgoldenrodyellow'
作画で用いるフォントを指定する	sns.set(font=フォント名)
組の要素を逆順にする	aTuple[::-1]
ヒストグラムの色をラベンダーブラッシュに指定する	plt.hist(データ列, color='lavenderblush')
黄緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
イテラブルから双方向キューを作る	collections.deque(iterable)
option: 色をクリムゾンにセットする	color = 'crimson'
まとめてValueMapでデータフレームのリストカラムを置き換える	df[aList].replace(ValueMap)
横棒グラフをバイオレット色として描画する	plt.barh(データ列x, データ列y, color='violet')
rgbに横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
プラットホームの名前を調べる	sys.platform
左三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
ディープスカイブルー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データ列とイテラブルの散布図を描画してマーカーを左三角に指定する	plt.plot(データ列x, データ列y, marker='<')
option: スタイルを点線にセットする	linestyle = 'dotted'
option: フォントの色をコーラルに設定する	color = 'coral'
パールゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
散布図をバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='violet')
浮動小数点数に数を加える	x + y
ライム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
option: グラフの色をロージーブラウンにセットする	color = 'rosybrown'
データを最大値と最小値を用いて正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
再帰の最大回数	sys.getrecursionlimit()
散布図に黒い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフのマーカーをバツ印にする	plt.plot(データ列x, データ列y, marker='x')
文字列でフォーマットして今日を文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
散布図をベージュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='beige')
nからn2までの整数リストを使う	list(range(n, n2+1))
イテラブルをキューに変換する	collections.deque(iterable)
ヒストグラムの色をダークゴールデンロッドに変更する	plt.hist(データ列, color='darkgoldenrod')
グラフに格子線を入れる	plt.grid(True)
青緑色としてヒストグラムを描画する	plt.hist(データ列, color='teal')
キューの要素を反転する	deq.reverse()
xが一桁の正の数かどうか確認する	0 <= x <= 9
折れ線グラフにポイント印を用いる	plt.plot(データ列x, データ列y, marker='.')
散布図をrgbの△マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
配列の形	aArray.shape
文字列が部分文字列で終了するかテストする	s.endswith(sub)
散布図の△印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
配列とデータ列について散布図をプロットして、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームのカラムの中にあるの合計をカウントする	df[col].isin([value]).sum()
option: ペルーを用いる	color = 'peru'
ヒストグラムをコーンフラワーブルー色として描画する	plt.hist(データ列, color='cornflowerblue')
異なる列をキーにして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
テキストファイルファイル名がか調べる	filename.endswith('.txt')
線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
縦棒グラフをオーキッド色として描画する	plt.bar(データ列x, データ列y, color='orchid')
ダークゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの色をゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='goldenrod')
棒グラフを耐火レンガ色を用いて描画する	plt.bar(データ列x, データ列y, color='firebrick')
二つのカウンタの共通する値	aCounter & aCounter2
データ列を百の位で四捨五入する	ds.round(-2)
逆双曲線余弦	math.acosh(x)
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
２次元リストをflattenする	sum(aList)
散布図の色を真紅にする	plt.scatter(データ列x, データ列y, color='crimson')
クラスのサブクラスかどうか調べる	issubclass(サブクラス, クラス)
N未満までの行列	np.arange(N)
文字列を部分文字列で分けたときの前半の文字列を使う	s.partition(sub)[0]
データフレームの中の未入力値を削除する	df.dropna()
タプルから項目名で指定された値をポップする	aDict.pop(key)
書式を辞書で文字列整形する	formatText.format_map(aDict)
ブランチドアーモンド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
黒い左三角マーカーをリストとイテラブルの散布図に描く	plt.plot(データ列x, データ列y, marker='<', c='k')
最初のカテゴリーを除外してデータフレームの列をベクトルにする	pd.get_dummies(df[column], drop_first=True)
線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ベクトルをフラット化する	aArray.flatten()
オブジェクトがリストかタプルか調べる	isinstance(obj, (list)
散布図にポイント印を使用する	plt.scatter(データ列x, データ列y, marker='.')
データ列の中に文字列と文字列がいくつ存在するか求める	ds.isin([value, value2]).sum()
箱ひげ図をプロットして平均線を追加する	plt.boxplot(データ列, meanline=True)
日付時刻データからn分、引く	aDatetime - datetime.timedelta(minutes=n)
ロバストなクラス分類を行う	model = sklearn.linear_model.HuberClassifier()
赤い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
青緑にヒストグラムの色をセットする	plt.hist(データ列, color='turquoise')
データフレームの列がxであるデータを抽出する	df[df[column] == x]
ロバスト推定でクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
パールゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
文字列を小文字に変換する	s.lower()
横棒グラフをディープスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
縦棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
ファイルのファイル名を求める	os.path.basename(filepath)
セットが空か調べる	len(aSet) == 0
データフレームを散布図で可視化してカテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
横棒グラフをライムグリーン色として描画する	plt.barh(データ列x, データ列y, color='limegreen')
列から重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
nが一桁の整数	0 <= n <= 9
棒グラフをゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='goldenrod')
縦棒グラフをミディアムスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
ASCII限定として正規表現で文字列を分割する	re.split(pattern, s, flags=re.ASCI)
多次元データを多次元尺度構成法を用いてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
データフレームのカラムは正規分布からどれだけ、尖っているか見る	df[col].skew()
データ列の偏りを平方根する	np.sqrt(データ列)
データフレームのカラムを折れ線グラフで可視化する	plt.plot(df[column], df[column])
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
JSONを用いる	import json
折れ線グラフの右三角印を黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
option: SJISを用いる	encoding = 'shift_jis'
線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
タプルの項目名を列挙する	list(aDict)
データフレームを'A'列を用いて大きい順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
スノー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
カウンタ間で共通部分を求める	aCounter & aCounter2
option: 色をインディアンレッドに変更する	color = 'indianred'
文字列がタイトルケースか	s.istitle()
散布図をrgbの上三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
マッピングの項目名の一覧を参照する	aDict.keys()
マッピングからキーの値	aDict.get(key)
リストの散布図を描く	plt.scatter(データ列x, データ列y)
データ列の分を使う	ds.dt.minute
ドジャーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
部分文字列	sub in s
データフレームを'A'列と'B'列によって昇順に整列する	df.sort_values(by=['A', 'B'], ascending=True)
ベクトルから重複を除いた配列を作る	np.unique(aArray)
エクセルデータファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
数列を円グラフにする	plt.pie(データ列, startangle=90)
マッピングにキーワード引数で更新する	aDict.update(**kwargs)
データ列と配列についての散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムをレベッカパープル色を使って描画する	plt.hist(データ列, color='rebeccapurple')
データフレームのカラムの中に存在する文字列と日付データの合計を数える	df[col].isin([value, value2]).sum()
ヒストグラムを破線を使って描画する	plt.hist(データ列, linestyle='dashed')
オブジェクトの参照カウントを見る	sys.getrefcount(obj)
ヒストグラムの色をラベンダーにセットする	plt.hist(データ列, color='lavender')
リストを縦軸、リストを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
データフレームを列を用いてソートし、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
nがn2以下それか、n3以上かどうか確認する	n <= n2 or n >= n3
データフレームの列を1000の位で丸める	df[col].round(-3)
クラス分類をランダム性を強化したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
線グラフをミディアムスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
2つのリストから辞書を作る	dict(zip(aList, aList2))
２つ並べてデータ列を箱ヒゲ図にする	plt.boxplot([データ列, データ列])
文字列を評価する	eval(s)
線グラフを色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
棒グラフをレベッカパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: カーキにグラフの色を設定する	color = 'khaki'
散布図の左三角マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームのNaNを最大値に設定する	df.fillna(df.max())
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
データ列を100の位で四捨五入して、整数にする	ds.round(-2).astype(int)
タイムスタンプデータの時間	aDatetime.time()
文字列をISO書式としてタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
グラフにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
表を2つの列の値によってグループ化して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
紺碧色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
実数の3乗を求める	x ** 3
実数は無限大かテストする	math.isinf(x)
縦軸の目盛を非表示にする	plt.yticks([])
データフレームのカラムの欠損値を最大値にする	df[col].fillna(df[col].max())
ベクトルの列ごとの平均値を計算する	np.mean(aArray, axis=0)
nがn2の倍数でないか	n % n2 != 0
列の値を正規表現でreplに置換する	ds.replace(pattern, repl, regex=True)
全要素を０で初期化した行列を作成する	np.zeros(行数, 列数)
実数以下の最大の整数を計算する	math.floor(x)
分子n分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
'A'列によって昇順にデータフレームを並べ直して、更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームのリストカラムの中にいくつが存在するかカウントする	df[aList].isin([value]).sum()
リストを箱髭図で描く	plt.boxplot(データ列)
x,yの複素数を求める	complex(x, y)
データフレームが重複している	df.duplicated()
文字列の両端から部分文字列を消す	s.strip(sub)
クラス分類をランダムフォレストで行う	model = sklearn.ensemble.RandomForestClassifier()
ベクトルの和を求める	aArray + aArray2
散布図をレモンシフォン色として描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
配列とリストについての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
双方向キュー中の文字列の数を数える	deq.count(element)
文字列中の片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データフレームの欠損値を直後の値にセットする	df.fillna(method='bfill')
カテゴリ列で色分けしてに箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームを'A'列によってグループ化する	df.groupby('A')
散布図をグリーンイエロー色として描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームとデータフレームの列をつなぐ	pd.concat([df, ds], axis=1)
関数の値によってデータフレームを集計し、列挙する	[(name, group) for name, group in df.groupby(関数)]
散布図を黒い丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
プロットのカラーパレットを淡くする	sns.set(pallete='muted')
棒グラフをライムグリーン色として描画する	plt.bar(データ列x, データ列y, color='limegreen')
折れ線グラフに黒い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
双方向キューの最初	deq[0]
ヒストグラムの色を黄緑に指定する	plt.hist(データ列, color='chartreuse')
線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
ビン数nとしてリストを等量でビン分割する	pd.qcut(aList, n)
シーケンスからn個、ランダムに選ぶ	random.choices(iterable, k=n)
オリベドラブにヒストグラムの色を設定する	plt.hist(データ列, color='olivedrab')
ふたつの集合の積集合を見る	aSet.intersection(aSet2)
線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列を部分文字列で二つに区切って前半の文字列を使う	s.partition(sub)[0]
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
ライトスレイグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
ビン数nでリストをビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
文字列が文字列リストに含まれる	s in aStringList
カウンタの最頻出な要素を計算する	aCounter.most_common()[0]
カラムの欠損値を最小値に設定する	ds.fillna(ds.min())
散布図のマーカーを▽にする	plt.scatter(データ列x, データ列y, marker='v')
表データを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
正規表現を使用する	import re
ミディアムパープルにヒストグラムの色を変更する	plt.hist(データ列, color='mediumpurple')
カラム名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
データフレームを各列とカラムの組み合わせ毎に集計して最大値を算出する	df.groupby([column, column2], as_index=False).max()
データフレームの列を文字列に名前を変更する	df.rename(columns={column: name})
文字列中にひとつでも非大文字が含まれる	any(not c.isupper() for c in s)
半透明の破線でイテラブルの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
黄色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
グラフの色をパステル調にする	sns.set(pallete='pastel')
線形モデルの係数	model.coef_
rgbの左三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームのカラムの中にが含まれるかどうか	df[col].isin([value])
列の値でデータフレームをグループ化して、グループの平均値を計算する	df.groupby(column).mean()
データフレームを列で整列して、上位n件を取り出す	df.sort_values(columns).head(n)
データフレームのリストカラムの空文字を未入力値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
イテラブルを文字列に変換して、カンマで連結する	','.join(map(str, iterable))
文字列はPythonのキーワードかどうか調べる	keyword.iskeyword(s)
データフレームのカラムは何月か調べる	df[col].dt.month
option: マーカーを菱形に変更する	marker = 'D'
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか	s.find(sub, start, end) == -1
データフレームで、列に重複があるか見る	df.duplicated(subset=column)
グラフの描画で暗く色を使用する	sns.set(pallete='dark')
リストの値を昇順にソートする	sorted(aList, reverse=True)
列の値ごとに表データをグループ分けして、列挙する	[(name, group) for name, group in df.groupby(column)]
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
折れ線グラフをディープスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
配列の相関係数を計算する	scipy.stats.pearsonr(データ列, データ列2)
option: ミディアムバイオレットレッド色を用いる	color = 'mediumvioletred'
やわらかい青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
関数でデータフレームをグループ化し要約統計量を算出する	df.groupby(関数).describe()
カテゴリで色付けしてデータフレームの全カラムの相関をプロットする	sns.pairplot(df, hue='カテゴリ列')
データフレームのリストカラムを1000の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
クラス分類をKNNで行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
文字列全体がパターンに大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
nの16進表現	hex(n)
データフレームを'A'列と'B'列の値でグループ化する	df.groupby(['A', 'B'])
青色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
折れ線グラフの色をミディアムシアグリーンに指定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
文字列の開始位置以降に部分文字列が含まれない	s.find(sub, start) == -1
マゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
predicateFuncが真となるシーケンスの部分	itertools.dropwhile(predicateFunc, iterable)
nからいつまでも数え上げるする	itertools.count(start=n)
全要素を０で初期化した符号なし８ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.uint8)
回帰モデルをクロスバリデーションする	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
データフレームから重複するデータを消す	df.drop_duplicates()
option: 右三角印を描画する	marker = '>'
リスト内の要素が全て真かテストする	all(aList)
標準入力から1行改行を除いて読み込む	sys.stdin.readline().rstrip()
黒い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
option: 青紫に色を設定する	color = 'violet'
リストとリストについて散布図を描画して、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
データフレームのリストカラムの中にある文字列と日付データの合計を数える	df[aList].isin([value, value2]).sum()
データフレームを散布図で描画し、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
nがn2よりも小さいか判定する	n < n2
散布図のバツ印を青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
option: 耐火レンガ色を用いる	color = 'firebrick'
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
回帰分析をアンサンブル学習を用いて行う	sklearn.ensemble.VotingRegressor()
文字列の左側から空白を除く	s.lstrip(' ')
データフレームの未入力値を最頻値で補う	df.fillna(df.mode().iloc[0])
変数を黒色にする	f'\033[30m{value}\033[0m'
グリーンイエロー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
カラムの名前を列挙する	df.columns
オプションで、出力先をファイルに指定する	file = sys.open(filename, 'w')
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
データフレームのn行目より前取り出す	df[:n]
縦棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
色付きの点線を使って線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
UNIX秒の文字列からタイムスタンプに変換する	pd.to_datetime(s, unit='s', utc=True)
バツ印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
キーがマッピング上で未定義かどうか調べる	key not in aDict
小数点数の双曲線正接を求める	math.tanh(x)
プロットからグリッド線を表示しない	plt.grid(False)
グラフを全般的に色差別なくする	sns.set(pallete='colorblind')
線グラフの色をディープスカイブルーに指定する	plt.plot(データ列x, データ列y, color='deepskyblue')
横棒グラフをオーキッド色を用いて描画する	plt.barh(データ列x, データ列y, color='orchid')
option: ダークレッド色を使う	color = 'darkred'
ヒストグラムの色をアクアにセットする	plt.hist(データ列, color='aqua')
データ列を閾値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
カラーバーを横向きでつける	plt.colorbar(orientation='horizontal')
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームのカラムの分を使う	df[col].dt.minute
オブジェクトのバイト長を調べる	sys.getsizeof(obj)
option: フォントの色をレベッカパープルに設定する	color = 'rebeccapurple'
n回の数値イテラブル	range(n)
実行結果をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
ヒストグラムの色をダークサーモンに変更する	plt.hist(データ列, color='darksalmon')
rgbの四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
組が少なくともひとつ真か調べる	any(aTuple)
文字列中の部分文字列の出現を数える	s.count(sub)
列を中央値で分割する	pd.qcut(ds, 2)
nとn2のビット和	n | n2
データ列の離れ具合を見る	sns.residplot(x=データ列, y=データ列)
実数のn乗を計算する	pow(x, n)
ホットピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
option: グラフの色をトマトに指定する	color = 'tomato'
ブランチドアーモンドにヒストグラムの色を設定する	plt.hist(データ列, color='blanchedalmond')
組を引数として展開して表示する	print(*aTuple)
最後の部分文字列で文字列を二分し、前半の文字列を使う	s.rpartition(sub)[0]
日付時刻データからn秒分減算する	aDatetime - datetime.timedelta(seconds=n)
折れ線グラフをカデットブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='cadetblue')
リストと配列について散布図を描画して、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
マッピングのコピーを作成する	dict(aDict)
集合から別の集合を全て取り除く	aSet.difference_update(aSet2)
折れ線グラフに青いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ファイルを文字コードtextとして追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
データフレームの列を削除し、、入れ替える	df.drop(column, axis=1, inplace=True)
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='grey')
散布図でデータフレームの全カラムを可視化する	sns.pairplot(df)
列をカテゴリデータに変換する	ds.astype(object)
折れ線グラフをレモンシフォン色として描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
散布図を珊瑚色で描画する	plt.scatter(データ列x, データ列y, color='coral')
option: 青にグラフの色を変更する	color = 'blue'
ASCII限定としてパターンを前もってコンパイルする	re.compile(pattern, flag=re.ASCI)
ヒストグラムを点線に設定する	plt.hist(データ列, linestyle='dotted')
プロット中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
ローングリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lawngreen')
オブジェクトが名前付きタプルのインスタンス	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
option: シーグリーンにフォントの色を設定する	color = 'seagreen'
カンマ区切りのファイルTSVファイルをn番目のカラムを行として読む	pd.read_csv(filename, index_col=n)
ヒストグラムをダークカーキ色として描画する	plt.hist(データ列, color='darkkhaki')
option: ディープスカイブルー色を使用する	color = 'deepskyblue'
文字列がカタカナか確認する	('ァ' <= ch <= 'ン')
ヒストグラムをダーク・スラテグレー色として描画する	plt.hist(データ列, color='darkslategrey')
平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
淡いピンク色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームの列の各値の出現数	df[col].value_counts()
データフレームのリストカラムの相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
データフレームを列名リストによってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
値が集合に含まれない	element not in aSet
option: ブランチドアーモンド色を用いる	color = 'blanchedalmond'
データ列の中にある文字列の数をカウントする	ds.isin([value]).sum()
棒グラフをハニーデュー色を用いて描画する	plt.bar(データ列x, データ列y, color='honeydew')
カテゴリ別に並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
数値を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
データフレームのリストカラムの欠損値をxで置換する	df[aList].fillna(x)
折れ線グラフの色をパレットトルコイズに指定する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームのリスト列のヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
'A'列と'B'列の値によってデータフレームをまとめたグループ	df.groupby(['A', 'B'])
データフレームのリストカラムの中に文字列とがあるか	df[aList].isin([value, value2])
リストとイテラブルについての散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
シーケンスをカウントしてカウンタから引く	aCounter.subtract(iterable)
nがn2よりも小さいかどうか調べる	n < n2
option: ロージーブラウン色を用いる	color = 'rosybrown'
データフレームのカラムの下位25%	df[col].quantile(0.75)
重複した行のみを抽出する	df[df.duplicated(keep=False)]
ヒストグラムをパウダーブルー色を用いて描画する	plt.hist(データ列, color='powderblue')
MSEを算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
日付データが金曜日かどうか調べる	aDate.weekday() == 4
オブジェクトはある型	isinstance(obj, クラス)
日付時刻データにn日分加算する	aDatetime + datetime.timedelta(days=n)
option: ダークサーモン色を使用する	color = 'darksalmon'
列の名前の一覧	df.columns
option: ダークオリーブグリーン色を使用する	color = 'darkolivegreen'
オブジェクトがあるクラスか確認する	isinstance(obj, クラス)
データフレームのstart行目からend行目まで選ぶ	df[start:end]
データフレームを'A'列と'B'列によって整列して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
相関を描画する	plt.scatter(データ列x, データ列y)
ベクトルから重複を除いた配列を初期化する	np.unique(aArray)
折れ線グラフの丸マーカーの色を変える	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データフレームの内で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
オレンジレッド色でヒストグラムを描画する	plt.hist(データ列, color='orangered')
サドルブラウン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
辞書のキーとその項目をペアとして取り出す	aDict.items()
データ列とリストについての散布図に星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*')
散布図をダークスラテグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
数値のインテグラルを計算する	sympy.integrate(e)
散布図に四角印を用いる	plt.scatter(データ列x, データ列y, marker='s')
折れ線グラフの▼マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ベクトルの全要素を指定の値にする	aArray[:, :] = 指定の値
option: タブを区切り記号で使用する	sep = '\t'
縦棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgrey')
八進数の文字列をバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
ロバスト分類モデルを用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームの列の25パーセンタイル	df[col].quantile(0.25)
文字列の先頭でパターンに大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
アスキー文字が文字列内に含まれる	any(c.isascii() for c in s)
変数をシアンで出力する	print(f'\033[36m{value}\033[0m')
線グラフの色をアクアマリンに変更する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームをグループ化し、各列に対し最大値を求める	df.groupby(column)[column2].max()
赤い四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c='r')
ファイルパスをバイナリできるように開く]	open(filepath, mode='rb')
補足を表示する	plt.legend()
折れ線グラフに青いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
文字列を変数にして、変数にする	z = sympy.Symbol(s)
縦軸のラベルをuntitledに指定する	plt.ylabel('y軸ラベル')
変数を赤色で出力する	print(f'\033[31m{value}\033[0m')
シーケンスからn要素、サンプリングする	random.sample(iterable, k=n)
等量でデータ列をビン数nとして分割する	pd.qcut(ds, n)
データ列の移り変わりを色付きの一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: グリーンイエローにグラフの色をする	color = 'greenyellow'
列を中央値でビン分割する	pd.qcut(ds, 2)
1行だけ標準入力から読む	sys.stdin.readline()
データ列を分割数nでビン分割する	pd.cut(ds, n)
標準出力	sys.stdout
option: 色をラベンダーに設定する	color = 'lavender'
ひとつ飛ばしでリストを得る	aList[::2]
日付時刻データが日付時刻データより遅いか調べる	aDatetime > aDatetime2
option: バイナリモードを使用する	mode = 'rb'
折れ線グラフの色をダークマゼンタに指定する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームのカラムを丸めて整数型にする	df[col].round().astype(int)
データフレームの行リスト	df.index
JSONフォーマットの文字列をデータに変換する	json.loads(jsonString)
色付きの破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列中から正規表現に大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
ミントクリーム色でヒストグラムを描画する	plt.hist(データ列, color='mintcream')
散布図に大バツマーカーを加える	plt.scatter(データ列x, データ列y, marker='X')
データフレームのリストカラムを千の位で丸めて整数型にする	df[aList].round(-3).astype(int)
アリスブルーにヒストグラムの色をセットする	plt.hist(データ列, color='aliceblue')
色付きの破線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームのカラムの中にいくつ欠損値があるか求める	df[col].isna().sum()
度数分布図を区間の数を設定して描画する	plt.hist(データ列, bins=区関数)
データフレームで、列と列の重複を見る	df.duplicated(subset=[column, column2])
散布図の星印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
符号なし８ビット整数型の０で全要素を初期化した行列を初期化する	np.zeros(行数, 列数, dtype=np.uint8)
データフレームのリストで指定されたカラムのヒートマップを描画する	sns.heatmap(df[aList].corr())
ヒストグラムの色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
シーケンスから重複なく、n個選ぶ	random.sample(iterable, k=n)
2進文字列をbytesizeバイトのバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
折れ線グラフをシエナ色を使って描画する	plt.plot(データ列x, データ列y, color='sienna')
大バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
リストを文字列に変換して空白で一つにする	' '.join(map(str, iterable))
両端キューの末尾に列の要素を追加する	deq.extend(iterable)
ライトゴールドロディイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
インタプリタの実行ファイルの絶対パス	sys.executable
option: スチールブルーを使用する	color = 'steelblue'
等差数列をベクトルに変換する	np.arange(開始値, 終了値, 等差)
option: ライトグリーンにグラフの色を設定する	color = 'lightseagreen'
空の階層化辞書	collections.ChainMap()
TSVをデータフレームとして読み込む	pd.read_csv(filename, sep='\t')
棒グラフをブルーバイオレット色を使って描画する	plt.bar(データ列x, データ列y, color='blueviolet')
折れ線グラフの丸印の色を指定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
Pandasで、書式fmtを用いて文字列をdatetime64型に変換する	pd.to_datetime(s, format=fmt)
オブジェクトのフィールドを削除する	delattr(obj, プロパティ名)
日付時刻データを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
option: マーカーを▼に変更する	marker = 'v'
表データを二つの列によってソートして更新する	df.sort_values(by=['A', 'B'], inplace=True)
文字列を走査し、パターンに大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
option: フォントの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
実数の符号をコピーにする	math.copysign(x, x2)
縦棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
x軸の目盛の値を変更する	plt.xticks(目盛りの値リスト)
option: ダークシアンを使う	color = 'darkcyan'
ヒストグラムを点線で描く	plt.hist(データ列, linestyle='dotted')
線グラフの色をパールゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='palegoldenrod')
散布図の丸印を青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
ファイルを読み込みモードを用いてオープンする]	open(filepath, mode='r')
変数の出力を改行せず行う	print(value, end='')
散布図をゴールデンロッド色を使って描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
線グラフの色をコーンズシルクに指定する	plt.plot(データ列x, データ列y, color='cornsilk')
xが-9以上9以下か調べる	-9 <= x <= 9
散布図の星印を赤色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
分類木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
セットから別のセットを全て取り除く	aSet.difference_update(aSet2)
両端キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
二つの文字列が等しいか調べる	s == s2
option: マーカーを星に指定する	marker = '*'
日付データが金曜日か	aDate.weekday() == 4
線グラフをミディアムブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumblue')
x,y,zをそれぞれn,n2,n3にする	x, y, z = n, n2, n3
ブースティングで回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
option: グレー色を用いる	color = 'grey'
option: 文字列を改行の代わりに用いる	end = s
縦棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
ベクトルの計算を行う	import numpy as np
ヒストグラムの色を耐火レンガに指定する	plt.hist(データ列, color='firebrick')
ヒストグラムの色をデピンクに変更する	plt.hist(データ列, color='deeppink')
文字列の中で正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s)
棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
横棒グラフを紺色として描画する	plt.barh(データ列x, データ列y, color='darkblue')
折れ線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列x, データ列y, color='lavenderblush')
散布図の▲マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームの先頭を見る	df.head()
文字列全体がパターンにASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
文字列を最初の部分文字列で二つに区切って、残りの文字列を求める	s.partition(sub)[-1]
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
入力から二つの浮動小数数値を読み込む	A, B = map(float, input().split())
option: グラフの色をダークサーモンに変更する	color = 'darksalmon'
Pythonパスの一覧を知る	sys.path
リストのn番目のの要素を使う	aList[n]
データフレームを各列毎にグループ化して、列の合計を計算する	df.groupby(column)[column2].sum()
等差数列から整数乱数を発生させる	random.randrange(start, end, step)
両端キューの上限	deq.maxlen
配列と数列についての散布図にrgbのダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
直前の値でデータフレームの欠損値を埋める	df.fillna(method='ffill')
インディアンレッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
データフレームを昇順に列によってソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムの色をロージーブラウンに変更する	plt.hist(データ列, color='rosybrown')
数値をシアンで表示する	print(f'\033[36m{value}\033[0m')
要素は集合のメンバー	element in aSet
ダークオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
文字列がリストに含まれないか判定する	element not in aList
一方に含まれ他方に含まれない集合を使う	aSet.difference(aSet2)
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
折れ線グラフの星印の大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
データフレームの列の中に文字列があるか調べる	df[col].isin([value])
nとn2のシートをエクセルデータファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
option: 色をナバホホワイトに変更する	color = 'navajowhite'
決定木をグラフにする	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
option: ミディアムスプリンググリーンにグラフの色を設定する	color = 'mediumspringgreen'
タイムスタンプデータの時刻	aDatetime.hour
Pandasで、データ列の数値時刻からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
真部分集合か確認する	aSet < aSet2
データフレームのリスト列のpercent分位数	df[aList].quantile(percent/100)
日付時刻データが金曜日かどうか調べる	aDatetime.weekday() == 4
横棒グラフの色を濃い青にする	plt.barh(データ列x, データ列y, color='darkblue')
ヒストグラムを上限から下限までの区間で描画する	plt.hist(データ列, range=(start, end))
ロイヤルブルー色としてヒストグラムを描画する	plt.hist(データ列, color='royalblue')
year年month月day日の日付をオブジェクト化する	datetime.date(year=year, month=month, day=day)
nが1もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
数列とリストの散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: グラフの色をパープルに変更する	color = 'purple'
線グラフの色をディムグレーにする	plt.plot(データ列x, データ列y, color='dimgrey')
組を展開してプリントする	print(*aTuple)
データフレームとしてファイルを読み込む	pd.read_excel(filename)
データフレームのリストカラムの中に存在するの合計を数える	df[aList].isin([value]).sum()
データフレームのグループごとの標準偏差	df.groupby(column).std()
option: フォントの色をミディアムターコイズに設定する	color = 'mediumturquoise'
ヒストグラムの色をミディアムパープルに変更する	plt.hist(データ列, color='mediumpurple')
昇順にタプルの値をソートする	sorted(aTuple, reverse=False)
メディアンでデータ列の欠損値を埋める	ds.fillna(ds.median())
グラフの色を全般的に淡くする	sns.set(pallete='muted')
データフレームをグループ化し、各列に対し標準偏差を求める	df.groupby(column)[column2].std()
nまでの偶整数列を得る	list(range(2, n, 2))
折れ線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
2つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
非数値データを連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
印字可能な文字列	ascii(x)
昇順にリストの値をソートする	sorted(aList, reverse=False)
文字列が平仮名か確認する	('ぁ' <= ch <= 'ん')
文字列が全て数値	s.isnumeric()
実数のサインの逆数	math.asin(x)
安全に文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
データフレームのリスト列を10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
両端キューをイテラブルから作る	collections.deque(iterable)
カラムを丸めて、整数型にする	ds.round().astype(int)
カテゴリ別でグループ化して、データフレームをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームのインデックス名をまとめてnameからname2に変更する	df.rename(index={name: name2})
データフレームを列によってグループ化して、最大値を求める	df.groupby(column).max()
線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
配列と数列について散布図を描画してマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
縦棒グラフをパープル色として描画する	plt.bar(データ列x, データ列y, color='purple')
タン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
ミントクリームにヒストグラムの色を設定する	plt.hist(データ列, color='mintcream')
option: マーカーをポイントに変える	marker = '.'
ゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
日付時刻データの時間	aDatetime.hour
リストの推移を半透明の破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
折れ線グラフの色をダークスラテグレーにセットする	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームのリストカラムの平均値を求める	df[aList].mean()
option: マーカーを▽に変更する	marker = 'v'
数列と数列の散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
改行文字	'\n'
横棒プロットを描画し、、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
option: 色をクリムゾンに変更する	color = 'crimson'
組の中の一番小さい値	min(aTuple)
折れ線グラフを色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列全体をASCII限定としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームの列をドロップする	df.drop(column, axis=1)
折れ線グラフをスレートブルー色を使って描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームのリスト列を丸めて、整数にする	df[aList].round().astype(int)
オーキッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
データフレームとデータフレームの列を横方向に合体させる	pd.concat([df, ds], axis=1)
データ列の各値が何回出現するか見る	ds.value_counts()
折れ線グラフの大バツマーカーの太さを変える	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
値が集合のメンバーか調べる	element in aSet
淡い茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
データフレームのカラムのNaNを平均値に変更する	df[col].fillna(df[col].mean())
散布図を左三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='<')
カウンタ同士でユニオンを求める	aCounter | aCounter2
文字列をISO書式でタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
横棒グラフをアイボリー色として描画する	plt.barh(データ列x, データ列y, color='ivory')
折れ線グラフを実線として描く	plt.plot(データ列x, データ列y, linestyle='solid')
文字列をファイルに書く	f.write(s)
リストとデータ列について散布図を描画して四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列が文字列リストのいづれかどうかテストする	s in aStringList
データフレームを複数の列によって小さい順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを各グループごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
オレンジレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
グラフの横軸の軸名を設定する	plt.xlabel('x軸ラベル')
線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
option: 追加モードを用いる	mode = 'a'
文字列を太字で表示できる文字列にする	f'\033[1m{value}\033[0m'
折れ線グラフの色をサーモンに指定する	plt.plot(データ列x, データ列y, color='salmon')
散布図をドジャーブルー色として描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
option: 青緑色を使う	color = 'turquoise'
折れ線グラフの色をローングリーンにする	plt.plot(データ列x, データ列y, color='lawngreen')
ボックスチャートでデータフレームの複数の列を並べて作図する	plt.boxplot([df['カラム'], df['カラム']])
アルファベットの大文字を全て使う	string.ascii_uppercase
filepathに現在の作業ディレクトリを変更する	os.chdir(os.dirname(filepath))
ヒストグラムをコーンズシルク色として描画する	plt.hist(データ列, color='cornsilk')
黒い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフのバツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
データ列をビン数nとして分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
二つの集合は集合と互いに素かどうか調べる	aSet.isdisjoint(aSet2)
データフレームの列のユニークな要素数を確認する	df[col].nunique()
シャルトリューズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
日付時刻データからn週間を減らす	aDatetime - datetime.timedelta(weeks=n)
aListn番目から値を抽出する	aList.pop(n)
データフレームのカラムの中にと日付データがある	df[col].isin([value, value2])
データフレームのリストカラムの第一四分位数を算出する	df[aList].quantile(0.25)
option: 赤にフォントの色を変更する	color = 'red'
折れ線グラフに青い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
シエナ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
グリーンイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
ヒストグラムの色をダークマゼンタにセットする	plt.hist(データ列, color='darkmagenta')
ダーク・スラテグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
黒いポイントマーカーをリストとリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
折れ線グラフをゴールド色を使って描画する	plt.plot(データ列x, データ列y, color='gold')
データフレームを列の値によってグループ分けして、列挙する	[(name, group) for name, group in df.groupby(column)]
散布図に左三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='<')
option: 左三角印を描画する	marker = '<'
ヒストグラムをライトイエロー色として描画する	plt.hist(データ列, color='lightyellow')
今日が木曜日か調べる	datetime.datetime.today().weekday() == 3
8進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
散布図の左三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
点線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ゼロ埋めされた32ビット整数型の配列を初期化する	np.zeros(要素数, dtype=np.int16)
折れ線グラフに大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムの色をスチールブルーにセットする	plt.hist(データ列, color='steelblue')
ヒストグラムの色をミントクリームに変更する	plt.hist(データ列, color='mintcream')
青緑色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
プロットの描画で明るく色を使う	sns.set(pallete='bright')
折れ線グラフの△マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
色付きの実線としてリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
表を使う	import pandas as pd
数式の変数を数値で置き換える	e.subs(z, e2)
線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
option: スカイブルー色を使用する	color = 'skyblue'
TSVを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
プロットのテーマを濃くする	sns.set(pallete='deep')
文字列をカンマを使って分割して、列挙する	s.split(',')
ポイント印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
最大値・最小値で乱数を求める	random.randint(最小値, 最大値)
２変数の最大の値を計算する	max(x, y)
ピアソン相関係数でデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='pearson')
データフレームを列でソートして、新しい行を振り直す	df.sort_values(columns).reset_index()
オブジェクトはタプルに含まれるか確認する	element in aTuple
スレートブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームをCSVファイルを用いてJSONLファイルに書き込む	df.to_csv(filename)
ライトスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightskyblue')
カウンタから最も頻出の項目の件数	aCounter.most_common()[1]
ふたつの集合の対称差を求める	aSet.symmetric_difference(aSet2)
青い点線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ホットピンク色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
折れ線グラフの下三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
数値のインテグラルを算出する	sympy.integrate(e)
縦棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
ピアソンの相関係数を見る	scipy.stats.pearsonr(データ列, データ列2)
year年month月day日の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
オブジェクトは浮動小数点数クラスのインスタンス	isinstance(obj, float)
訓練データでモデルを学習する	model.fit(説明変数, 目的変数)
データフレームをタブ区切りのファイルから読む	pd.read_csv(filename, sep='\t')
option: 青に色を設定する	color = 'blue'
散布図をカーキ色を使って描画する	plt.scatter(データ列x, データ列y, color='khaki')
カウンタを多い方から列挙する	aCounter.most_common()
等間隔の配列を作成する＼	np.arange(開始値, 終了値, 等差)
文字列を空白によって分割し、、整数列に変換する	map(int, s.split())
文字列中からパターンにマッチする文字列を探す	re.search(pattern, s)
option: フォントの色をロイヤルブルーに変更する	color = 'royalblue'
丸印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
配列とリストについて散布図をプロットして、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
棒グラフを黄色色を使って描画する	plt.bar(データ列x, データ列y, color='yellow')
辞書の値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
数列とリストの散布図を描画してマーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
辞書から項目名で指定されたエントリを取り出す	aDict.pop(key)
数列を折れ線プロットで可視化する	plt.plot(データ列x, データ列y)
星印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
線グラフの色をシャルトリューズに指定する	plt.plot(データ列x, データ列y, color='chartreuse')
赤い四角マーカーをリストとイテラブルについての散布図に描く	plt.plot(データ列x, データ列y, marker='s', c='r')
八進文字列をバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
option: ミッドナイトブルーにグラフの色を変更する	color = 'midnightblue'
実数のsinを求める	math.sin(x)
縦棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
リストを下線付きでプリントする	print(f'\033[4m{value}\033[0m')
データフレームの欠損値をxに増やす	df.fillna(x)
シーケンス自身を2回あわせた直積	itertools.product(iterable, repeat=2)
パラメータについて数式のインテグラルを求める	sympy.integrate(e, z)
文字列の接尾辞が部分文字列かどうか調べる	s.endswith(sub)
折れ線グラフのバツマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
配列とリストの散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをドジャーブルー色として描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
リストを順序付けする	enumerate(aList)
縦棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: バイナリモードを用いる	mode = 'rb'
変数名をキーとして、マッピングを生成する	dict(name=element)
ベクトルの次元数	aArray.ndim
数値を簡略にする	sympy.sympify(e)
棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
option: ダークオレンジ色を用いる	color = 'darkorange'
データフレームの列の欠損値を直後の値に設定する	df[col].fillna(method='bfill')
ディープスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
異なる列をキーにして２つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
ベクトルの列ごとの標準偏差	np.std(aArray, axis=0)
option: アンティークホワイトを使う	color = 'antiquewhite'
折れ線グラフをダークスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
数列と配列の散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
option: 読むシートの名前をnamesに設定する	sheet_name = names
データフレームのリストカラムを十の位で四捨五入する	df[aList].round(-1)
小麦色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
rgbの三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
スタッキングを使ってクラス分類を行う	sklearn.ensemble.StackingClassifier()
３つのデータフレームを横に連結する	pd.concat([df, df2, df3], axis=1)
整数nが配列のどれか	n in aArray
行列の行ごとの最小	np.min(aArray, axis=1)
線グラフの色をグレーにセットする	plt.plot(データ列x, データ列y, color='gray')
黒い△マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
空の線形モデルを作る	model = sklearn.linear_model.LinearRegression()
散布図をライトサーモン色として描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
縦棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームを複数の列で昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
散布図にポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
部分文字列が文字列の終了位置以前に含まれないか	s.find(sub, 0, end) == -1
文字列の開始位置からと終了位置の間に部分文字列が含まれるか	s.find(sub, start, end) != -1
カンマ区切りのファイルTSVをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
縦棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
オブジェクトが論理値クラスのインスタンスかどうか	isinstance(obj, bool)
リストを展開して表示する	print(*aList)
組をn回、連結する	aTuple * n
option: ハニーデューにフォントの色を設定する	color = 'honeydew'
文字列を最初の部分文字列で二つに区切って残りの文字列を求める	s.partition(sub)[-1]
文字列の中で大文字・小文字を無視して正規表現にマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
年月日と時刻からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
横方向に三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
配列とリストの散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
縦棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategrey')
平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
option: ミントクリーム色を用いる	color = 'mintcream'
シーケンスのコンビネーション	itertools.combinations(iterable, n)
'A'列の値でデータフレームをグループ化し、、列挙する	[(name, group) for name, group in df.groupby('A')]
整数個からk個取り出したときの順列の総数	math.perm(n, k)
バイアスなしの重回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
nがn2の倍数か	n % n2 == 0
数の二乗	x ** 2
行列を列から作る	np.array(iterable)
改行なしにリストをプリントする	print(value, end='')
折れ線グラフを星印として描画する	plt.plot(データ列x, データ列y, marker='*')
ファイルからバイナリ書き込みストリームを開き]、fとする	f = open(filepath, mode='wb')
Pandasで、書式fmtを用いて文字列を日付データにする	pd.to_datetime(s, format=fmt)
上位集合もしくは等しいかどうか調べる	aSet > aSet2
ファイル名がテキストファイルかどうか確認する	filename.endswith('.txt')
列'A'と列'B'をキーとして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
データフレームの列をドロップして入れ替える	df.drop(column, axis=1, inplace=True)
日付時刻データにn分分加算する	aDatetime + datetime.timedelta(minutes=n)
線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
文字列の左端からタブを取り除く	s.lstrip('\t')
ヒストグラムをダークスラテグレー色を使って描画する	plt.hist(データ列, color='darkslategray')
option: コーンフラワーブルー色を使用する	color = 'cornflowerblue'
文字列内にひとつでも小文字があるかどうか判定する	any(c.islower() for c in s)
ミスティローズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
線グラフの色をオレンジレッドにする	plt.plot(データ列x, データ列y, color='orangered')
1行から2つの文字値を読む	A, B = map(str, input().split())
折れ線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightgreen')
シーグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
ヒストグラムをモカシン色を用いて描画する	plt.hist(データ列, color='moccasin')
ファイルをEUCとしてオープンする]	open(filepath, encoding='euc_jp')
リストとリストについて散布図をプロットし、、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
第二コマンド引数を調べる	sys.argv[1]
縦棒グラフをスチールブルー色を使って描画する	plt.bar(データ列x, データ列y, color='steelblue')
データ列とリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
ミディアムスプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
文字列を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
数値の変数についてのn階微分を求める	sympy.diff(e, z, n)
棒グラフをオリーブ色を使って描画する	plt.bar(データ列x, データ列y, color='olive')
option: グラフの色をフクシアに指定する	color = 'fuchsia'
option: ライトグリーンにグラフの色を変更する	color = 'lightseagreen'
ライトスレイグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数をカウントする	s.count(sub, start, end)
カンマで文字列を区切り、、列挙する	s.split(',')
グラフで利用可能な色名の一覧	matplotlib.colors.cnames
ヒストグラムを上限から下限の範囲で描画する	plt.hist(データ列, range=(start, end))
追加できるようにファイルを開く]	open(filepath, mode='a')
散布図の左三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
改行を使う	'\n'
小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
データ列が何日か確認する	ds.dt.day
最大値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].max())
ゴールド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
折れ線グラフの星印の線幅を設定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
option: 紺碧にグラフの色を指定する	color = 'azure'
ヒストグラムの色をシアンに変更する	plt.hist(データ列, color='cyan')
option: レモンシフォンにグラフの色を変更する	color = 'lemonchiffon'
y座標の目盛りに文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
実数の逆双曲線正弦を求める	math.asinh(x)
全要素が1の行列を作る	np.ones(行数, 列数, dtype=np.int)
MLPを用いて回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
option: グラフの色をミディアムアクアマリンに変更する	color = 'mediumaquamarine'
ミディアムスプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
日付データが土曜日	aDate.weekday() == 5
中央値でデータフレームの欠損値を置換する	df.fillna(df.median())
データフレームの中のカラムをn個にビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
スタックの左の要素	deq[0]
縦棒グラフをやわらかい青色として描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
列で昇順にデータフレームをソートする	df.sort_values(by=column, ascending=True)
グラフを暗くする	sns.set(pallete='dark')
サンディーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
箱ヒゲ図をプロットし、、平均線を加える	plt.boxplot(データ列, meanline=True)
線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
破壊的にデータフレームから重複する行を削除する	df.drop_duplicates(inplace=True)
option: クリムゾンを使用する	color = 'crimson'
オブジェクトが数値か調べる	isinstance(obj, (int,float))
文字列にイテラブルを変換して、タブで結合する	'\t'.join(map(str, iterable))
リストを青色にする	f'\033[34m{value}\033[0m'
アイリスのデータセットをデータフレームとしてロードする	sns.load_dataset('iris')
option: フォントの色をダークスレートブルーに設定する	color = 'darkslateblue'
空のヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
折れ線グラフの四角印を赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
カーネル密度推定グラフ描画でを使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: ダークブルーにグラフの色をセットする	color = 'darkblue'
折れ線グラフのラベルを指定する	plt.plot(データ列x, データ列y, label='ラベル')
散布図をシーグリーン色として描画する	plt.scatter(データ列x, データ列y, color='seagreen')
オブジェクトからプロパティを削除する	delattr(obj, プロパティ名)
データフレームの列名を付け直す	df.rename(columns={column: name})
説明変数と目的変数としてモデルを学習する	model.fit(説明変数, 目的変数)
イテラブルの各要素を順に双方向キューの右側に付け加える	deq.extend(iterable)
ヒストグラムの色をタンに指定する	plt.hist(データ列, color='tan')
表示できる列数の最大値をnに変更する	pd.set_option('display.max_columns', n)
option: グラフの色を淡いピンク色にセットする	color = 'lightpink'
データフレームを各列毎に集約して列の個数を求める	df.groupby(column)[column2].count()
PandasでデータフレームのcollのUNIX秒からタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
ファイルパスをEUCとしてオープンする]	open(filepath, encoding='euc_jp')
データ列の四分位を描画する	plt.boxplot(データ列)
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
ベクトルの次元を変形する	aArray.reshape(行数, 列数)
中央値でリストを分割する	pd.qcut(aList, 2)
rgbの大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
破壊的に複数の列を用いて降順にデータフレームを並べる	df.sort_values(by=column, ascending=False, inplace=True)
nが1もしくは2	n == 1 or n == 2
折れ線グラフをダークオリーブグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
連立方程式の解を計算する	sympy.solve([e, e2])
option: ゴールドに色を設定する	color = 'gold'
ヒストグラムをミッドナイトブルー色として描画する	plt.hist(データ列, color='midnightblue')
文字列は全て印字できる	s.isprintable()
点線でヒストグラムを描く	plt.hist(データ列, linestyle='dotted')
折り返しをしない	pd.set_option('expand_frame_repr', False)
データフレームのカラムの曜日の名前を求める	df[col].dt.weekday_name
表データを列によってグループ化して、各グループごとの個数を求める	df.groupby(column).count()
ライトスチールブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
データフレームのカラムを正規表現patternで変更する	df[col].replace(pattern, repl, regex=True)
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgrey')
データフレームのカラムの未入力値を平均に設定する	df[col].fillna(df[col].mean())
両端キューの長さ	len(deq)
文字列の左側	s[0]
散布図をミディアムブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
リストとリストの散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームの列のNaNを最大値に設定する	df[col].fillna(df[col].max())
データフレームのリスト列を1000の位で丸める	df[aList].round(-3)
配列をボックスチャートとして描画する	plt.boxplot(データ列)
再帰が何回までできるかを調べる	sys.getrecursionlimit()
イテラブルとイテラブルについて散布図を描画してマーカーを上三角に設定する	plt.plot(データ列x, データ列y, marker='^')
データフレームのリストカラムの文字列を未入力値にする	df[aList].replace(s, np.nan)
xが一桁の数か確認する	-9 <= x <= 9
ファイル名がTSVファイルか	filename.endswith('.tsv')
横軸にラベルをつける	plt.xlabel('x軸ラベル')
黒いバツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
option: ダークグリーンにフォントの色を設定する	color = 'darkgreen'
部分文字列で部分文字列が開始するか調べる	s.startswith(sub)
ホットピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
オブジェクトの無限イテラブル	itertools.repeat(element)
マッピングに項目名ワード引数を用いて更新する	aDict.update(**kwargs)
文字列のエポック秒からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
円グラフでリストのパーセントを可視化する	plt.pie(データ列, startangle=90)
実数のn乗を算出する	pow(x, n)
正規表現patternで一度にデータフレームの値を変更する	df.replace(pattern, repl, regex=True)
ASCII限定として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
既存のベクトルを元にして全要素が1の行列	np.ones_like(aArray)
ヒストグラムの色をターコイズにセットする	plt.hist(データ列, color='turquoise')
option: ティールにグラフの色を設定する	color = 'teal'
ケースを無視して文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
ユニコードに対応する文字	chr(unicode)
線グラフをインディアンレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='indianred')
option: ライトスレイグレーにグラフの色を変更する	color = 'lightslategray'
縦棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: パパイヤウィップを用いる	color = 'papayawhip'
option: 色を黄緑に設定する	color = 'chartreuse'
オブジェクトの属性の値	getattr(obj, プロパティ名)
切り捨てながらnをn2分の1にする	n //= n2
option: グラフの色をロージーブラウンに変更する	color = 'rosybrown'
ファイルを開いて]、追加ストリームを求める	open(filepath, mode='a')
文字列リストをつなげるひとつの文字列にする	''.join(map(str, iterable))
option: フォントの色をドジャーブルーに指定する	color = 'dodgerblue'
option: ハニーデュー色を使用する	color = 'honeydew'
文字列中の部分文字列を別の文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
データフレームのリストカラムの中にいくつ未入力値があるか数える	df[aList].isna().sum()
折れ線グラフの下三角印の色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
文字列は数値	s.isnumeric()
データフレームをグループ化し、それぞれの列に対し最小値を計算する	df.groupby(column)[column2].min()
赤いクロスマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
xの小数点以下'3'桁までプリントする	print(':.3f'.format(x))
アクア色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
列自身の長さnの順列	itertools.permutations(iterable, n)
ピーチパフ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームの列と列の各列間の相関係数	df[[column, column2]].corr()
option: トマトにグラフの色をする	color = 'tomato'
MSDを用いて多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ヒストグラムの色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
色付きの実線としてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
バツマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
日付データが日付データと同時かどうか調べる	aDate == aDate2
データフレームのカラムが何時か調べる	df[col].dt.hour
シーケンスからn個、サンプリングする	random.sample(iterable, k=n)
rgbの四角マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
オレンジレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
パパイヤウィップ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
数列の推移を折れ線プロットで可視化する	plt.plot(range(len(データ列)), データ列)
淡い茶色色のヒストグラムを描画する	plt.hist(データ列, color='tan')
イテラブルに列を続けた列	itertools.chain(iterable, iterable2)
文字列はリストの要素か調べる	element in aList
option: ライムグリーンを使う	color = 'limegreen'
やわらかい青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
日付時刻データからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
配列とリストについて散布図を描画し、上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: フクシア色を使用する	color = 'fuchsia'
ライトスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
折れ線グラフの色をホットピンクに変更する	plt.plot(データ列x, データ列y, color='hotpink')
リストとリストについての散布図にrgbの星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
変数を太字でプリントする	print(f'\033[1m{value}\033[0m')
縦棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='teal')
値を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
ファイルパスから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
多次元データを特異値分解を使ってパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
乱数の行列	np.random.random(N)
二つの集合の共通要素のみに更新する	aSet.intersection_update(aSet2)
二進数文字列を整数にする	int(s, 2)
平均値でデータフレームの列のNaNを補う	df[col].fillna(df[col].mean())
作画の縦横比を等しくする	plt.axis('equals')
ヒストグラムの色をミディアムパープルに指定する	plt.hist(データ列, color='mediumpurple')
日付データが火曜日か	aDate.weekday() == 1
度数分布図を描いて、ビン数を設定する	plt.hist(データ列, bins=区関数)
NaNも加えてデータフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
シアン色を用いてヒストグラムを描画する	plt.hist(データ列, color='cyan')
データフレームを２つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
ターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
データフレームをグループ化し、各列に対し分散を算出する	df.groupby(column)[column2].var()
ミディアムシアグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='mediumseagreen')
データフレームの列がxのデータを選択する	df[df[column] == x]
option: 色をビスクに設定する	color = 'bisque'
散布図に四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
散布図をブルーバイオレット色を用いて描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
データフレームの相関行列をヒートマップとしてグラフ化する	sns.heatmap(df.corr())
option: フクシアを使う	color = 'fuchsia'
リストをn回、加える	aList * n
横棒グラフをカーキ色を用いて描画する	plt.barh(データ列x, データ列y, color='khaki')
今日が水曜日か確認する	datetime.datetime.today().weekday() == 2
データ列の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
棒グラフをシーグリーン色として描画する	plt.bar(データ列x, データ列y, color='seagreen')
グラフの描画で暗くパレットを使う	sns.set(pallete='dark')
データフレームを散布図で可視化し、、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
データ構造を使う	import collections
ヒートマップでデータフレームの相関行列を描画する	sns.heatmap(df.corr())
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
データフレームのリスト列の未入力値を最小値に設定する	df[aList].fillna(df[aList].min())
折れ線グラフを下三角印で描画する	plt.plot(データ列x, データ列y, marker='v')
ダークサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
データフレームを表示するとき小数点以下の表示精度を増やす	pd.set_option('precision', n)
option: 印の大きさを変える	markersize = 2.0
実数が負の数かどうか調べる	x < 0
option: エクセルファイルのシート名をnamesに設定する	sheet_name = names
nを十六進表現にする	hex(n)
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
改行なしに1行標準入力から読み込む	sys.stdin.readline().rstrip()
縦棒グラフを茶色色として描画する	plt.bar(データ列x, データ列y, color='brown')
縦棒グラフをディープスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームの列がxより大きくx2より小さい行を選択する	df[(x < df[column]) & (df[column] < x2)]
option: オレンジに色を変更する	color = 'orange'
スラグレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
散布図を大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X')
二つの集合の対称差を計算する	aSet.symmetric_difference(aSet2)
入力から２つの文字を取り出す	A, B = map(str, input().split())
インデックスで昇順にデータフレーム全体をソートする	df.sort_index(ascending=True)
データフレームのNaNを最頻値で埋める	df.fillna(df.mode().iloc[0])
棒グラフをコーンズシルク色として描画する	plt.bar(データ列x, データ列y, color='cornsilk')
option: プラムにフォントの色を指定する	color = 'plum'
実数以下の最大の整数を求める	math.floor(x)
各列毎にデータフレームをグループ分けし、、列の個数を求める	df.groupby(column)[column2].count()
データフレームを列名リストでによって降順に並べる	df.sort_values(by=column, ascending=False)
大バツマーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
日付データからn日分減らす	aDate - datetime.timedelta(days=n)
データフレームのcollをPandasの日付型にする	pd.to_datetime(df[col])
ベクトルを転置する	aArray.T
縦棒グラフをライトサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームのリスト列の文字列をNaNに変換する	df[aList].replace(s, np.nan)
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='turquoise')
線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
縦棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
日付データにn時間を足す	aDate + datetime.timedelta(hours=n)
nからn2までのひとつ飛ばしの整数リストを作る	list(range(n, n2+1, 2))
昇順にデータフレームを複数の列で整列する	df.sort_values(by=column, ascending=True)
リストとリストの散布図に文字列という簡単な説明用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
追加できるようにファイルをSJISでオープンする]	open(filepath, mode='a', encoding='shift_jis')
文字列中に非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
ヒストグラムの色をミディアムバイオレットレッドにセットする	plt.hist(データ列, color='mediumvioletred')
浮動小数点数を千の位で四捨五入する	round(x, -3)
データフレームの値を正規表現でreplに置き換える	df.replace(pattern, repl, regex=True)
nまでの偶整数リスト	list(range(2, n, 2))
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
散布図の下三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ヒストグラムの色をマゼンタにセットする	plt.hist(データ列, color='magenta')
変数名をキーとして、マップを作る	dict(name=element)
option: ダークターコイズにフォントの色をする	color = 'darkturquoise'
セット＼集合	aSet.difference(aSet2)
データフレームを列で昇順にソートする	df.sort_values(by=column, ascending=True)
option: 濃いシアン色を使う	color = 'darkcyan'
クロスマーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をダークバイオレットに指定する	plt.hist(データ列, color='darkviolet')
データフレームを2つの列の値によって集約する	df.groupby(['A', 'B'])
ひとつ置きにリストを取り出す	aList[::2]
データフレームを表示するとき、行数をnに変更する	pd.set_option('display.max_rows', n)
英数字が文字列内に含まれるかどうか調べる	any(c.isalnum() for c in s)
ダークグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
データフレームのリストカラムのNaNを直後の値で埋める	df[aList].fillna(method='bfill')
文字列中の部分文字列の出現回数をカウントする	s.count(sub)
データフレームのカラムの平均	df[col].mean()
リストと配列についての散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
縦棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
空白文字を全て見る	string.whitespace
プロットの描画でパステル調にカラーパレットを使用する	sns.set(pallete='pastel')
データフレームのNaNをxで埋める	df.fillna(x)
線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
今日が何曜日か知る	datetime.datetime.today().weekday()
カデットブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
データフレームのNaNを直前の値に設定する	df.fillna(method='ffill')
スラグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='slategray')
入力から二つの整数値を読む	A, B = map(int, input().split())
既存のファイルパスをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
散布図に黒いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategrey')
タプルをJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
実数が正の数かどうか	x > 0
ISO書式の文字列から日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
モードでデータフレームのカラムの欠損値を補う	df[col].fillna(df[col].mode().iloc[0])
グラフに用いるx座標のキャプションを変更する	plt.xlabel('x軸ラベル')
貝殻色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
ミディアムスプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
リストの中の一番小さい値	min(aList)
0からN未満までの行列	np.arange(N)
データフレームの中のカラムをビン分割する	pd.cut(df[col], aList)
データを最大最小値として標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ナバホホワイト色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
線グラフをライトイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightyellow')
nのバイト長を調べる	(n.bit_length() + 7) // 8
ライトイエロー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
データフレームを降順に二つの列によってによってソートする	df.sort_values(by=['A', 'B'], ascending=False)
直後の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
タプルの先頭を除く	aTuple[1:]
option: ライムグリーンにフォントの色を設定する	color = 'limegreen'
大文字・小文字を無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
散布図の▽マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
ダークサーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
破線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ベクトルのユニークな各要素の頻度	np.unique(aArray, return_counts=True)
データフレームから列を４つだけ選択する	df[[column, column2, column3, column4]]
一点鎖線でヒストグラムを描く	plt.hist(データ列, linestyle='dashbot')
無限にシーケンスを繰り返す	itertools.cycle(iterable)
折れ線グラフのバツマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
option: ブラウン色を使う	color = 'brown'
nがn2で割り切れないかどうか	n % n2 != 0
整数に変換する	int(x)
部分文字列で文字列を分けたときの最初の文字列	s.partition(sub)[0]
ヒストグラムをホワイトスモーク色を用いて描画する	plt.hist(データ列, color='whitesmoke')
線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
小数点数を浮動小数点数で割った剰余	math.remainder(x, x2)
ミディアムブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
ファイルパスをバイナリ書き込みモードとしてオープンして]fとする	f = open(filepath, mode='wb')
nがn2以下かどうか	n <= n2
日付時刻データをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
option: フォントの色をナバホホワイトに設定する	color = 'navajowhite'
リストをタプルにする	tuple(aList)
ペールグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
色付きの一点鎖線でリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データ列のどの値が最も現れるか見る	ds.mode()
mathモジュールを使う	import math
赤いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
改行で文字列を分割し文字列リストに変換する	s.splitlines()
折れ線グラフをネイビー色として描画する	plt.plot(データ列x, データ列y, color='navy')
n個にデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
折れ線グラフのマーカーを菱形印にする	plt.plot(データ列x, データ列y, marker='D')
文字列から部分文字列を全て除く	s.replace(sub, '')
nがn2以下、それか、n3以上	n <= n2 or n >= n3
option: 色をティールに設定する	color = 'teal'
棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
データフレームを小さい順に'A'列によってソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームの未入力値を直後の値で埋める	df.fillna(method='bfill')
option: ディムグレーを使用する	color = 'dimgrey'
配列のスカラー倍を求める	aArray * n
線グラフをスラグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='slategray')
option: ピンクにグラフの色を変更する	color = 'pink'
データフレームの指定された３つの列だけ抽出する	df[[column, column2, column3]]
データフレームのカラムの曜日が何日目か調べる	df[col].dt.dayofweek
オブジェクトは浮動小数点数型か確認する	isinstance(obj, float)
データフレームの列をインプレイスで削除する	df.drop(column, axis=1, inplace=True)
クラス分類の予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
aListn番目から値を取り除く	aList.pop(n)
option: フォントの色をグリーンにセットする	color = 'green'
折れ線グラフを青い実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
セットを空集合にする	aSet.clear()
十六進数文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
'A'列によってによってデータフレームを大きい順にソートする	df.sort_values(by='A', ascending=False)
データ列の中に含まれる日付データと日付データの合計を数える	ds.isin([value, value2]).sum()
最大値・最小値として整数乱数を得る	random.randint(最小値, 最大値)
ダーク・スラテグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
青い実線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
項目名が辞書に存在する	key in aDict
データ列を柱状図にする	plt.hist(データ列)
タプルをコピーする	aDict.copy()
折れ線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgray')
k進対数	math.log(x, k)
0から始まるn個の整数列	list(range(n))
折れ線グラフを色付きの実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ひとつでも非空白が文字列中に含まれるか調べる	any(not c.isspace() for c in s)
破壊的にデータフレームの列を消す	df.drop(column, axis=1, inplace=True)
折れ線グラフの色をダークグレーにする	plt.plot(データ列x, データ列y, color='darkgray')
文字をユニコードにする	ord(ch)
option: ダークスレートブルーを使う	color = 'darkslateblue'
値を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
正規表現patternでreplにデータフレームのカラムの値を置換する	df[col].replace(pattern, repl, regex=True)
線グラフをシャルトリューズ色を使って描画する	plt.plot(データ列x, データ列y, color='chartreuse')
オブジェクトの属性を削除する	delattr(obj, プロパティ名)
整数最小公倍数	math.lcm(n, n2)
タブ区切りのファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
カウンタ間で和集合演算する	aCounter | aCounter2
カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
黒いポイントマーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームを十の位で丸めて、整数型にする	df.round(-1).astype(int)
散布図の菱形マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
黒い三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図に黒い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='k')
線グラフをラベンダーブラッシュ色として描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームの相関行列ケンドールを使ってを求める	df.corr(method='kendall')
パールバイオレットレッド色としてヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
列の第三四分位数	ds.quantile(0.75)
オプションで、出力先を標準エラーに変更する	file = sys.stderr
データ列のNaNを最大値に変更する	ds.fillna(ds.max())
折れ線グラフの色をライトグレーにセットする	plt.plot(データ列x, データ列y, color='lightgrey')
ブラック色でヒストグラムを描画する	plt.hist(データ列, color='black')
データフレームを関数でまとめた表	df.groupby(関数)
データフレームのpercentパーセンタイル	df.quantile(percent/100)
線グラフの色をライトスレイグレーにセットする	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームをヘッダを付けずにJSONLファイルに保存する	df.to_csv(filename, header=None)
option: フォントの色をダークカーキに変更する	color = 'darkkhaki'
ヒストグラムの色をライムにセットする	plt.hist(データ列, color='lime')
二つの文字列が同じ	s == s2
プロットを画像ファイルとして保存する	plt.savefig('foo.png')
データフレームのカラムの中にいくつ欠損値が含まれるか数える	df[col].isna().sum()
黒いポイントマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='k')
ブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
シャルトリューズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
線グラフを真紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
赤い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
配列の逆行列	np.linalg.inv(aArray)
標準出力のバッファを即時表示する	sys.stdout.flush()
リストをビン数nとして分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
部分文字列が文字列中に含まれるか	sub in s
赤い▲マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
文字列を緑色化する	f'\033[32m{value}\033[0m'
データフレームのn行目より後ろ抽出する	df[n:]
浮動小数点数の整数部	math.modf(x)[1]
データフレームのリストカラムのどの値が最も現れるか調べる	df[aList].mode()
option: グラフを一点鎖線にセットする	linestyle = 'dashbot'
度数分布図を描画し、合計を1にする	plt.hist(データ列, density=True)
０で全要素を初期化した行列	np.zeros(行数, 列数)
二つの最大の値	max(x, y)
補助目盛を有効にする	plt.minorticks_on()
折れ線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgrey')
サンディーブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
bとn2から成るペアを作る	(n, n2)
日付時刻データが木曜日かどうか	aDatetime.weekday() == 3
データフレームを四捨五入する	df.round()
辞書に別の辞書の項目を更新する	aDict.update(aDict2)
リストをn個に等しい量になるように分割する	pd.qcut(aList, n)
option: 色をオールドレースに設定する	color = 'oldlace'
縦棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
黒い▽マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
青いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
データフレームのリストカラムの値はNaNか	df[aList].isna()
option: 文字列を区切りで使う	sep = s
文字列の先頭でパターンにマッチするか確認する	re.match(pattern, s)
データ列の未入力値を中央値で補う	ds.fillna(ds.median())
折れ線グラフに青い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
△マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
option: オリベドラブ色を使用する	color = 'olivedrab'
デックの末尾を求める	deq[-1]
イテラブルの各要素に対して、predicateFuncがTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='grey')
折れ線グラフの△マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
数式処理ライブラリを用いる	import sympy
線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
表データから重複を残さず、消す	df.drop_duplicates(keep=False)
星印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームのリストカラムの欠損値を直後の値で補う	df[aList].fillna(method='bfill')
カウンタをマッピングを用いて更新する	aCounter.update(aDict)
前の行の値でデータフレームのNaNを埋める	df.fillna(method='ffill')
散布図をライトコーラル色を使って描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
データフレームの中にが含まれる	df.isin([value])
タプルの項目名に対応した値	aDict.get(key)
プロットのカラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
線形モデルのバイアス	model.intercept_
文字列内にひとつでも数字が含まれるかどうか判定する	any(c.isdigit() for c in s)
ライトスレイグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
データ列をボックスチャートを用いて描画する	plt.boxplot(データ列)
列とイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
カウンタのキー数	len(aCounter)
ミディアムバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
xの小数点以下'5'桁の文字列にする	':.5f'.format(x)
現在が水曜日かどうか調べる	datetime.datetime.today().weekday() == 2
線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
配列とリストについての散布図に補足用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
積み上げ横棒プロットを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
折れ線グラフの色をシスルに指定する	plt.plot(データ列x, データ列y, color='thistle')
棒グラフをナバホホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='navajowhite')
横棒プロットの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
折れ線グラフのダイアモンドマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームのNaNを直後の値で埋める	df.fillna(method='bfill')
線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
option: 色をミディアムパープルにセットする	color = 'mediumpurple'
整数nのビット長を見る	n.bit_length()
散布図を星マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='*')
行列の列ごとの分散を計算する	np.var(aArray, axis=0)
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
キューの最後の要素	deq[-1]
データフレームの中の欠損値が存在する行を削除する	df.dropna()
部分文字列で文字列を二つに区切って、最初の文字列を使う	s.partition(sub)[0]
赤い点線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームのリストカラムの中の欠損値の数を数える	df[aList].isna().sum()
option: 行列のデータ型を指定する	dtype = np.int16
ヒストグラムの色をカデットブルーに指定する	plt.hist(データ列, color='cadetblue')
有理数を使用する	import fractions
横棒グラフを濃いシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
等間隔でリストをn個にビン分割する	pd.cut(aList, n)
データフレームのn行目を破壊的に落とす	df.drop(n, axis=0, inplace=True)
線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
文字列を部分文字列で後ろから分割する	s.rsplit(sub)
二次元組をflattenする	sum(aTuple)
色付きの破線でイテラブルの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
散布図をミディアムブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
データフレームの各グループごとの標準偏差を求める	df.groupby(column).std()
折れ線グラフの右三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
ファイルからn文字読み込む	f.read(n)
両端キューのn番目を見る	deq[n]
データフレームをに箱ひげ図としてプロット化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
デックから指定した範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
横棒グラフの色を珊瑚にする	plt.barh(データ列x, データ列y, color='coral')
文字列の後ろから空白を取り除く	s.rstrip(' ')
数値を白色化する	f'\033[37m{value}\033[0m'
データフレームのカラムを四捨五入する	df[col].round()
一点鎖線を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
nとn2の積を求める	n * n2
勾配ブースティングでクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
縦棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
折れ線グラフにダイアモンド印を加える	plt.plot(データ列x, データ列y, marker='D')
部分文字列を文字列の終了位置まで探す	s.find(sub, 0, end)
散布図の▲印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ヒストグラムの色をミディアムオーキッドに変更する	plt.hist(データ列, color='mediumorchid')
辞書をインデント幅nのJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
セットを更新不能に変換する	frozenset(aSet)
オレンジレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
rgbの▲マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
タイムスタンプデータからn日分、減らす	aDatetime - datetime.timedelta(days=n)
option: マーカーを△に設定する	marker = '^'
パターンに複数行対応として文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
新しいガウス過程回帰モデルを作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
nとn2が同じ値か調べる	n == n2
文字列の最後から部分文字列を探す	s.rfind(sub)
オブジェクトがあるクラス	isinstance(obj, クラス)
赤いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームの中に文字列が存在するか確認する	df.isin([value])
小さい順に表データを列によってソートする	df.sort_values(by=column, ascending=True)
ダークシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
option: スノー色を用いる	color = 'snow'
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
リストの末尾からn番目以前の部分を得る	aList[:-n]
青い一点鎖線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
新しいサポートベクトル分類器を作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
自分自身をモジュールとしてを得る	sys.modules[__name__]
ヒストグラムの範囲をする	plt.hist(データ列, range=(start, end))
タプルからn個サンプリングする	random.sample(iterable, k=n)
リストを番号付けする	enumerate(aList)
ダークレッド色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
ヒストグラムの色をブランチドアーモンドにセットする	plt.hist(データ列, color='blanchedalmond')
縦棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
option: 貝殻に色を設定する	color = 'seashell'
nの8進文字列を使う	oct(n)[2:]
オブジェクトは論理値クラスかどうか調べる	isinstance(obj, bool)
ブラックにヒストグラムの色を変更する	plt.hist(データ列, color='black')
ミディアムバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
バイオリン図を描く	sns.violinplot(x='カテゴリ列', y='列', data=df)
点線でラインを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
縦棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
n回の数値イテラブルを見る	range(n)
ライム色でヒストグラムを描画する	plt.hist(データ列, color='lime')
option: 色をインディゴに設定する	color = 'indigo'
三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
文字列が大文字	s.isupper()
option: グラフの色をディムグレーにする	color = 'dimgrey'
列の各データが何回出現するか見る	ds.value_counts()
横棒グラフを黄色色を用いて描画する	plt.barh(データ列x, データ列y, color='yellow')
option: 赤を使う	color = 'red'
新しい単回帰モデルを準備する	model = sklearn.linear_model.LinearRegression()
両端キューの末尾から要素を取り出す	deq.pop()
青色を用いてヒストグラムを描画する	plt.hist(データ列, color='blue')
ローングリーンにヒストグラムの色を指定する	plt.hist(データ列, color='lawngreen')
集合から何でもいいからひとつ取り除く	aSet.pop()
折れ線グラフのバツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
xが1もしくは2、もしくは3に等しい	x == 1 or x == 2 or x == 3
両端キューをイテラブルから新規生成する	collections.deque(iterable)
散布図のポイントマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームを表示するときn列までデータフレームを表示するようにする	pd.set_option('display.max_columns', n)
縦棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
コーンフラワーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: グラフの色をダークシアグリーンに変更する	color = 'darkseagreen'
データフレームのリスト列の文字列を未入力値にする	df[aList].replace(s, np.nan)
データフレームの中に日付データと文字列があるか調べる	df.isin([value, value2])
データフレームを表示するとき小数点以下の表示精度を設定する	pd.set_option('precision', n)
カウンタの文字列をひとつ増やす	aCounter[element] += 1
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームをグループ化し各列に対し最小値を求める	df.groupby(column)[column2].min()
線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
シエナ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
ベクトルのユニークな要素	np.unique(aArray)
アクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
句点文字を全部使う	string.punctuation
データフレームの中のカラムをビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
回帰分析を勾配ブースティングでする	model = sklearn.ensemble.GradientBoostingRegressor()
浮動小数点数以上の最小の整数	math.ceil(x)
データフレームのカラムのユニークな値	df[col].unique()
線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
データフレームの欠損値を直前の値に指定する	df.fillna(method='ffill')
明るくカラーパレットをプロットの描画で使う	sns.set(pallete='bright')
データ列の折れ線グラフをダイアモンド印で描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームのn行以降を抽出する	df[n:]
色付きの実線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図に▲マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
複数行対応として正規表現で文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
xの小数点以下'5'桁までを出力する	print(':.5f'.format(x))
データフレームから重複したデータをドロップして更新する	df.drop_duplicates(inplace=True)
菱形印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
逆順の双方向キュー	reversed(deq)
赤い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
option: ミディアムターコイズにグラフの色を指定する	color = 'mediumturquoise'
正規表現で文字列を分割する	re.split(pattern, s)
データフレームの列の欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
行列の次元数	aArray.ndim
最頻値でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(df[aList].mode().iloc[0])
文字列TSVからn番目の列をインデックスとしてCSVを読み込む	pd.read_csv(filename, index_col=n)
カラムのNaNを直後の値で補う	ds.fillna(method='bfill')
線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
コーンフラワーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
option: フォントの色をシスルに設定する	color = 'thistle'
日付時刻データからn週間を減算する	aDatetime - datetime.timedelta(weeks=n)
リストと配列についての散布図にrgbの▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
作業ディレクトリ	os.getcwd()
多次元データを多次元尺度構成法を用いて濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
nはn2と等しいか調べる	n == n2
リストの先頭を見る	aList[0]
既存のファイルをBOM付きを使って追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
列によってデータフレームをグループ化して、標準偏差を計算する	df.groupby(column).std()
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
データフレームのリストカラムのNaNをxで埋める	df[aList].fillna(x)
日付時刻データが火曜日	aDatetime.weekday() == 1
正規表現に文字列がマッチさせる	re.match(pattern, s)
データ列の折れ線グラフを描画して、カラーコードとして色を変更する	plt.plot(データ列x, データ列y, color='#800080')
多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
文字列は全て識別子名か確認する	s.isidentifier()
組を順に出力する	print(*aTuple)
線グラフをサドルブラウン色として描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
ファイルパスをEUCとして追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
サポートベクトル分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの列の中にいくつ欠損値が存在するか数える	df[col].isna().sum()
ミディアムバイオレットレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
散布図の四角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
カラーマップとしてヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
option: 印をバツに設定する	marker = 'x'
赤いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
実数で実数を整数除算する	x // y
折れ線グラフをダークターコイズ色を使って描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
パープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
黒いクロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='k')
書き込み用に文字コードtextとしてファイルをオープンする]	open(filepath, mode='w', encoding=text)
文字列が全て小文字か	s.islower()
データフレームの中の列をn個に等間隔でビンニングし、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
プロットにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
文字列の後ろから部分文字列を探す	s.rfind(sub)
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
特異値分解を使って濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
折れ線グラフに星マーカーを加える	plt.plot(データ列x, データ列y, marker='*')
散布図をロイヤルブルー色として描画する	plt.scatter(データ列x, データ列y, color='royalblue')
ファイルパスを開き]書き込みストリームを見る	open(filepath, mode='w')
線形回帰モデルの回帰変数	model.coef_
option: namesをカラム名に設定する	names = names
option: ライムグリーンにフォントの色をする	color = 'limegreen'
データフレームのカラムの中にいくつ未入力値が存在するかカウントする	df[col].isna().sum()
本日をISO書式の文字列に変換する	datetime.datetime.today().isoformat()
option: バリーウッドにフォントの色を指定する	color = 'burlywood'
浮動小数点数以下の最大の整数を求める	math.floor(x)
option: フォントの色をアクアマリンに設定する	color = 'aquamarine'
項目名ワード引数で辞書に加えて、更新する	aDict.update(**kwargs)
データ列の未入力値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
データフレームのそれぞれのグループの分散	df.groupby(column).var()
データフレームの列の欠損値を最大値で埋める	df[col].fillna(df[col].max())
オプションで、標準エラーを使用する	file = sys.stderr
最大値と最小値を用いてデータを揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
グラフで用いる縦軸のラベルをuntitledに指定する	plt.ylabel('y軸ラベル')
赤い▲マーカーを数列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
オブジェクトがリストの要素	element in aList
シーケンスに列を続けたイテラブル	itertools.chain(iterable, iterable2)
ハニーデュー色でヒストグラムを描画する	plt.hist(データ列, color='honeydew')
データフレームを二つの列の値によって集約して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームをTSV形式のファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
散布図の大バツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
散らばりを可視化する	plt.scatter(データ列x, データ列y)
option: 書き込み用に指定する	mode = 'w'
option: 色をシーグリーンに設定する	color = 'seagreen'
オブジェクトは数値かどうか調べる	isinstance(obj, (int,float))
線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: ライトグレーにグラフの色を変更する	color = 'lightgray'
option: ライトスカイブルーを使う	color = 'lightskyblue'
データフレームのリスト列のどの値が頻出か見る	df[aList].mode()
表の重複する行数のマスクを求める	df.duplicated()
配列とリストの散布図に黒いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームを複数の列によってで破壊的にソートする	df.sort_values(by=column, inplace=True)
点線を使ってヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
異なる列をキーとして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
カウンタのユニオン	aCounter | aCounter2
イテラブルと配列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
rgbのダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
相関係数を算出する	scipy.stats.pearsonr(データ列, データ列2)
文字列を末尾から部分文字列で分割する	s.rsplit(sub)
パウダーブルー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
スクリプトのファイル名を知る	sys.argv[0]
option: ホワイトスモークにグラフの色を指定する	color = 'whitesmoke'
グラフの使途を画面に設定する	sns.set(context='notebook')
option: シエナを使う	color = 'sienna'
option: グリーンイエローに色を設定する	color = 'greenyellow'
ボックスチャートを描画して平均線を加える	plt.boxplot(データ列, meanline=True)
赤い実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
配列を箱ひげ図にする	plt.boxplot(データ列)
データ列の基本統計量	ds.describe()
表データの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
棒グラフをダークターコイズ色として描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
リストと配列の散布図に文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
線グラフの色をミディアムオーキッドにする	plt.plot(データ列x, データ列y, color='mediumorchid')
積立相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
ふたつのリストのインターセクション	list(set(aList) & set(aList2))
ファイルパスを文字コードtextを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
淡い茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
十六進数字を全部見る	string.hexdigits
一度にデータフレームの列の名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
リストを行列に変換する	np.array(aList)
文字列の右側から空白を除去する	s.rstrip(' ')
実数に浮動小数点数を乗算する	x * y
勾配ブースティングとしてクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
データフレームの複数のカラムを並べて箱ひげ図で作図する	plt.boxplot([df['カラム'], df['カラム']])
自然対数の底を使う	math.e
散布図に右三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='>')
データフレームのリスト列の歪度を求める	df[aList].kurt()
昇順に二つの列によってデータフレームを破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
文字列全体を大文字・小文字を無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データ列をn個にビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: 色をディムグレーにセットする	color = 'dimgrey'
実行結果を白色化する	f'\033[37m{value}\033[0m'
セットから全要素を除く	aSet.clear()
黒い右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
option: 色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
線グラフの色をアイボリーに指定する	plt.plot(データ列x, データ列y, color='ivory')
実数のn乗の実数剰余を算出する	pow(x, n, y)
グラフのデザインをよくする	import seaborn as sns
イテラブルと配列の散布図に文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
文字列を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
特異値分解で濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
組の先頭のn要素を除く	aTuple[n:]
プロットの描画で明るくカラーパレットを使用する	sns.set(pallete='bright')
データフレームを各カラムと列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
year年を日付にする	datetime.date(year=year, month=1, day=1)
分数の分子	q.numerator
散布図をダーク・スラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
スレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
オブジェクトは論理値	isinstance(obj, bool)
カウンタをマッピングから作る	collections.Counter(aDict)
nからn2を減算する	n - n2
データフレームをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
カウンタのそれぞれの文字列をそのカウントだけリストとして得る	aCounter.elements()
カテゴリ列で色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
最小値でデータ列のNaNを埋める	ds.fillna(ds.min())
データフレームの指定された列を配列として選択する	df[column].values
rgbのダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
文字列が文字列リストに含まれるか判定する	s in aStringList
配列をイテラブルから作る	np.array(iterable)
縦棒グラフをミディアムシアグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
データフレームの内で、列とカラムに重複があるか確認する	df.duplicated(subset=[column, column2])
文字列が全て英数字か	s.isalnum()
黄色でリストをプリントする	print(f'\033[33m{value}\033[0m')
データフレームのリストカラムの中にいくつ文字列が存在するかカウントする	df[aList].isin([value]).sum()
連立方程式の解を算出する	sympy.solve([e, e2])
フィッシャーの線形判別分類の準備をする	model = sklearn.manifold.TSNE(n_components=n)
データ列と配列についての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
正規分布に基づくパーセント・ポイント関数を使用する	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
xが-9以上9以下	-9 <= x <= 9
nの16進文字列を使う	hex(n)[2:]
データフレームのstart行目からend行目まで取り出す	df[start:end]
データフレームのカラムの秒を使う	df[col].dt.second
特異値分解で多次元データを濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
箱ひげ図を描画して平均を加える	plt.boxplot(データ列, showmeans=True)
文字列の右側が部分文字列か	s.endswith(sub)
option: 区切りをタブにする	sep = '\t'
日付時刻データの秒数を求める	aDatetime.second
文字列内にひとつでも大文字が含まれるか	any(c.isupper() for c in s)
ミッドナイトブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
散布図の印を赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
実数のサイン	math.sin(x)
ヒストグラムの色をフォレストグリーンにセットする	plt.hist(データ列, color='forestgreen')
データフレームのリストカラムの標本標準偏差を計算する	df[aList].std()
データフレームの尖度を算出する	df.skew()
縦棒グラフをゴーストホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
縦棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
データフレームを各列毎にグループ化してカラムの最大値を求める	df.groupby(column)[column2].max()
option: 色を耐火レンガに変更する	color = 'firebrick'
option: エンコーディングを文字列の示す文字コードに設定する	encoding = s
データフレームのカラムの値がNaNか	df[col].isna()
ロイヤルブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
サンディーブラウン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
淡い茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
データフレームを二つの列によってまとめたグループを使う	df.groupby(['A', 'B'])
データ列の中に文字列が存在するかどうか調べる	ds.isin([value])
集合に列の要素を追加する	aSet.update(iterable)
配列とリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
縦棒グラフをハニーデュー色として描画する	plt.bar(データ列x, データ列y, color='honeydew')
文字コードの最大値	sys.maxunicode
rgbの▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
配列と配列の散布図を描画し、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
タプルの値を並べる	sorted(aTuple)
文字列を空白を用いて区切って、整数のリストに変換する	map(int, s.split())
データフレームから型リストで指定されたデータ型の列だけ取り出す	df.select_dtypes(include=typeList)
行列の要素数	aArray.size
ヒストグラムをミディアムバイオレットレッド色として描画する	plt.hist(データ列, color='mediumvioletred')
ファイルパスからフォルダ名を見る	os.path.dirname(filepath)
option: 紺碧を使用する	color = 'azure'
option: グラフの色をラベンダーに指定する	color = 'lavender'
ヒストグラムと勾配ブースティングでクラス分類をする	model = sklearn.ensemble.HistGradientBoostingClassifier()
▲印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
双方向キューの最初の値	deq[0]
ホットピンク色でヒストグラムを描画する	plt.hist(データ列, color='hotpink')
双方向キューの末尾から要素を取り除く	deq.pop()
rgbの▽マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
'A'列によってデータフレームを並べ直し、NaNを先頭にする	df.sort_values(by='A', na_position='first')
ベクトルのユニークな各要素の頻度を見る	np.unique(aArray, return_counts=True)
データフレームをTSVファイルでJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
散布図に赤い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
オブジェクトのハッシュ値を算出する	hash(obj)
ヒストグラムをフクシア色を用いて描画する	plt.hist(データ列, color='fuchsia')
データフレームの列の中にいくつ文字列が存在するか数える	df[col].isin([value]).sum()
後の値でカラムの未入力値を補う	ds.fillna(method='bfill')
表データの列の値がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
縦棒グラフを描画し、棒の幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフの下三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
黒い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
モジュールとして自分自身をを	sys.modules[__name__]
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
数列を箱ひげ図で描画する	plt.boxplot(データ列)
2つの文字列は同じ	s == s2
部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
型のサブクラスか調べる	issubclass(サブクラス, クラス)
赤い三角マーカーをリストと数列についての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='r')
ヒストグラムをナバホホワイト色として描画する	plt.hist(データ列, color='navajowhite')
データラベルの場所を(x,y)に設定する	plt.legend(loc=(x, y))
データ列の推移を半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
リストとリストの散布図に三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
2つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
データ列を折れ線グラフを使って作図する	plt.plot(データ列x, データ列y)
データフレームを複数の列でソートしてNaNを先頭にする	df.sort_values(by=column, na_position='first')
平均値と標準偏差から疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
文字列内にアスキー文字が含まれるか確認する	any(c.isascii() for c in s)
ヒストグラムの線の種類を実線に変更する	plt.hist(データ列, linestyle='solid')
二つの浮動小数点数は十分に近いか	math.isclose(x, x2)
データ列を折れ線グラフを用いて描画する	plt.plot(データ列x, データ列y)
文字列を記号にして、変数にする	z = sympy.Symbol(s)
変数を紫色で表示できる文字列にする	f'\033[35m{value}\033[0m'
折れ線グラフをコーンフラワーブルー色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
棒グラフをドジャーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
option: 行を自動的な連番にする	index_col = None
データフレームから型型の列を抽出する	df.select_dtypes(ty)
横棒グラフを描画してラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
データフレームの列の値がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
黒い▼マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
縦棒グラフをカーキ色として描画する	plt.bar(データ列x, データ列y, color='khaki')
グリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
二つのデータ列の散布図として残差を描画する	sns.residplot(x=データ列, y=データ列)
数値の変数を数式で置き換える	e.subs(z, e2)
データフレームのカラムの文字列を未入力値に変換する	df[col].replace(s, np.nan)
異なる列をキーにして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
折れ線グラフに赤い▽印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
タプルの中の一番大きい値	max(aTuple)
ヒストグラムにカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
散布図に左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
横棒グラフをディムグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='dimgray')
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgray')
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
配列をダミー変数にする	pd.get_dummies(iterable)
データフレームのカラムを折れ線グラフとして可視化する	plt.plot(df[column], df[column])
自然数の階乗を計算する	math.factorial(n)
エクセルファイルファイルからnという名前のシートを読み込む	pd.read_excel(filename, sheet_name=n)
二つのデータフレームを横向きに合体させる	pd.merge(df, df2)
全ての句点文字	string.punctuation
ヒストグラムの色をミスティローズにセットする	plt.hist(データ列, color='mistyrose')
上限nの両端キューをイテラブルから生成する	collections.deque(iterable, maxlen=n)
グリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
リストの度数分布図を描画する	plt.hist(データ列)
折れ線グラフの星マーカーを青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
グラフに使う横軸のラベルを設定する	plt.xlabel('x軸ラベル')
データフレームの相関行列ケンドール相関係数で	df.corr(method='kendall')
現在の作業ディレクトリを使う	os.getcwd()
option: グラフの色をシルバーに指定する	color = 'silver'
棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
ふたつの集合が集合と交わりを持たないかどうか調べる	aSet.isdisjoint(aSet2)
option: ピンクを使う	color = 'pink'
配列とデータ列の散布図をプロットして、マーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
データフレームをグループ化し、列に対し平均値を計算する	df.groupby(column)[column2].mean()
線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
データフレームのカラムは何時か見る	df[col].dt.hour
リストのそれぞれを関数でフィルタする	filter(func, iterable)
リストが空かどうか確認する	len(aList) == 0
散布図の大バツ印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
オブジェクトはリスト型のインスタンス	isinstance(obj, list)
リストと配列の散布図を描画して、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの三角印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
datetime64型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
カラムの中に日付データと日付データがいくつあるか求める	ds.isin([value, value2]).sum()
折れ線グラフをナバホホワイト色を使って描画する	plt.plot(データ列x, データ列y, color='navajowhite')
散布図に黒い△マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図のダイアモンドマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームのリストカラムの標本標準偏差を算出する	df[aList].std()
データフレームのカラムの欠損値を平均値で補う	df[col].fillna(df[col].mean())
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
回帰分析をK最近傍法としてする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
折れ線グラフをインディアンレッド色として描画する	plt.plot(データ列x, データ列y, color='indianred')
データフレームを列を用いて昇順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: グラフの色をドジャーブルーに変更する	color = 'dodgerblue'
イテラブルとリストについて散布図をプロットして、文字列という簡単な説明用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
エクセルデータファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
折れ線グラフの丸マーカーを青色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
バツ印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームを列の値毎に集約して、列挙する	[(name, group) for name, group in df.groupby(column)]
データフレームを列でソートし、、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
線グラフの色をドジャーブルーにセットする	plt.plot(データ列x, データ列y, color='dodgerblue')
複数の列で破壊的に降順にデータフレームをソートする	df.sort_values(by=column, ascending=False, inplace=True)
リストから重複なく、n個選ぶ	random.sample(iterable, k=n)
散布図を青紫色を使って描画する	plt.scatter(データ列x, データ列y, color='violet')
option: マーカーを右三角に変える	marker = '>'
n2がn以上、かつ、n3以下か	n <= n2 and n2 <= n3
リストと配列についての散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
文字列を複数行対応として正規表現で区切る	re.split(pattern, s, flags=re.MULTILINE)
リストとリストについて散布図を描画して、丸マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフの丸印を黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
２つのオブジェクトが等しいか調べる	obj == obj2
プロットに目盛り線を入れる	plt.grid(True)
データフレームから列を４つのみ選択する	df[[column, column2, column3, column4]]
Pandasで、データフレームのcollのエポック秒からPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
二進数文字列を整数に変換する	int(s, 2)
ペルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
ミディアムブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumblue')
nがセットのどれかかどうか判定する	n in aSet
データフレームの欠損値を中央値で補う	df.fillna(df.median())
option: シスルを使う	color = 'thistle'
２つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
データ列の曜日を見る	ds.dt.weekday_name
ヒストグラムの色をマゼンタに変更する	plt.hist(データ列, color='magenta')
散布図に上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
プロットをポスター用にする	sns.set(context='poster')
データフレームから一番左側の列を除く	df[df.columns[1:]]
データフレームのカラムの未入力値を直後の値で補う	df[col].fillna(method='bfill')
カラムのNaNを平均値で埋める	ds.fillna(ds.mean())
文字列がリストの要素か確認する	element in aList
rgbの左三角マーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
茶色色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
ペルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
シアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
ライトスチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームの重複する行を数える	df.duplicated().sum()
折れ線グラフをバツ印で描画する	plt.plot(データ列x, データ列y, marker='x')
リネン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
赤い一点鎖線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ボックスチャートに簡単な説明を設定する	plt.boxplot([データ列, データ列], labels=['A', 'B'])
データを最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
黒い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
ミディアムオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データ列の値をValueMapで一度に変更する	ds.replace(ValueMap)
データフレームをTSV形式を用いてJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
ヒストグラムの色をミディアムオーキッドに指定する	plt.hist(データ列, color='mediumorchid')
ヒストグラムの色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
変数を青色でプリントする	print(f'\033[34m{value}\033[0m')
折れ線グラフの印を星にする	plt.plot(データ列x, データ列y, marker='*')
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
実数を3乗する	x ** 3
分類モデルの訓練を開始する	model.fit(説明変数, 目的変数)
データフレームのカラムは何年か確認する	df[col].dt.year
option: 色をミディアムターコイズに設定する	color = 'mediumturquoise'
Pandasで、エポック秒のデータフレームのcollからPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
散布図をrgbのポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
プロットの背景色を暗くする	sns.set(style='darkgrid')
オブジェクトの無限イテラブルを得る	itertools.repeat(element)
データフレームを表示するとき、n列までデータフレームを表示できるようにする	pd.set_option('display.max_columns', n)
ヒストグラムのビンの数を変更する	plt.hist(データ列, bins=区関数)
赤い▽印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
線グラフをスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='springgreen')
2を底とする小数点数の対数	math.log2(x)
複数の列でによって大きい順にデータフレームをソートする	df.sort_values(by=column, ascending=False)
option: ミディアムブルー色を使用する	color = 'mediumblue'
文字列を最後の部分文字列で分けた場合の前半の文字列を使う	s.rpartition(sub)[0]
データフレームをグループ化し、それぞれの列に対し合計を計算する	df.groupby(column)[column2].sum()
双方向キューのn番目に文字列を差し込む	deq.insert(n, element)
イテラブルとイテラブルについての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
整数を千の位で丸める	round(x, -3)
option: 文字コードを文字列の示すエンコーディングに指定する	encoding = s
実数を浮動小数点数で割る	x / y
predicateFuncを適用したときTrueとなる列の部分	itertools.dropwhile(predicateFunc, iterable)
文字列は全て十進数字か確認する	s.isdecimal()
空の線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
散布図にrgbの菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
縦棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
文字列中に非大文字が含まれるかどうか判定する	any(not c.isupper() for c in s)
数から整数を減算する	x - y
線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
散布図の印を星にする	plt.scatter(データ列x, データ列y, marker='*')
小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
整数nを8進文字列に変換する	oct(n)[2:]
セットから全要素を取り除く	aSet.clear()
散布図の▽マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
配列の和を求める	aArray + aArray2
データフレームのカラムのNaNを最大値で補う	df[col].fillna(df[col].max())
日付時刻データが火曜日かどうか調べる	aDatetime.weekday() == 1
カウンタを辞書を用いて更新する	aCounter.update(aDict)
ベージュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
配列とリストについて散布図を描画して四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
タイムスタンプデータを浮動小数点数に変換する	aDatetime.timestamp()
浮動小数点数を浮動小数点数で除した余り	x % y
ふたつの集合は集合と互いに素か調べる	aSet.isdisjoint(aSet2)
複数行対応として文字列の先頭でパターンにマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
option: ホワイトスモークを使う	color = 'whitesmoke'
ダークサーモン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームを丸めて整数型にする	df.round().astype(int)
線グラフをミディアムシアグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
最後の列をデータフレームから除く	df[df.columns[:-1]]
計数器を列から新規生成する	collections.Counter(iterable)
異なる列をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
緑色で数値を表示する	print(f'\033[32m{value}\033[0m')
x軸を対数目盛に変更する	plt.xscale('log')
ヒストグラムを三つ並べてプロットする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: サーモンにグラフの色を設定する	color = 'salmon'
青い点線としてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
双方向キューの中に値はあるか	element in deq
昇順にリストの要素をソートする	sorted(aList, reverse=False)
データフレームのカラムの標本標準偏差を求める	df[col].std()
option: 色をダークシアグリーンに変更する	color = 'darkseagreen'
横棒グラフをゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='goldenrod')
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
ヒストグラムの色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
JSONLファイルにCSVファイルでデータフレームを保存する	df.to_csv(filename)
右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>')
リストのn番目からn2番目まで	aList[n:n2]
文字列の左側からタブを除去する	s.lstrip('\t')
折れ線グラフを青い点線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
折れ線グラフを黄緑色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ヒストグラムをシスル色を使って描画する	plt.hist(データ列, color='thistle')
値を黒色で表示できる文字列にする	f'\033[30m{value}\033[0m'
option: グラフの色をダークオレンジに変更する	color = 'darkorange'
データフレームを二つの列によって昇順にソートし、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
部分文字列が文字列の開始位置からと終了位置までの間に含まれない	s.find(sub, start, end) == -1
散布図をパールバイオレットレッド色として描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
行列計算を行う	import numpy as np
赤い丸マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
xが1、もしくは2、もしくは3に等しいかテストする	x == 1 or x == 2 or x == 3
縦棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='grey')
データフレームからランダムに一行、抽出する	df.sample()
イテラブル自身の長さnの順列	itertools.permutations(iterable, n)
折れ線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
文字列の開始位置からと終了位置の間に部分文字列がある	s.find(sub, start, end) != -1
散布図のバツ印の色を設定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データ列の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
縦棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
散布図をブラウン色を使って描画する	plt.scatter(データ列x, データ列y, color='brown')
スクリプトファイルのフォルダ名	os.path.dirname(os.path.abspath(__file__))
横棒グラフをライム色を使って描画する	plt.barh(データ列x, データ列y, color='lime')
Pandasでタイムスタンプ型のデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
ミッドナイトブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
平均線付き箱ひげ図を描く	plt.boxplot(データ列, meanline=True)
データフレームのリスト列の欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
ヒストグラムでデータフレームのカラムを描画する	plt.hist(df[column])
グリーンイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
nとkのコンビネーションを求める	math.comb(n, k)
ダークスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
散布図をティール色で描画する	plt.scatter(データ列x, データ列y, color='teal')
ライトスチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ファイルがあるかどうか調べる	os.path.exists(filepath)
データフレームをカテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
行列の平均値を求める	np.mean(aArray)
タイムスタンプデータをn日前に戻す	aDatetime - datetime.timedelta(days=n)
昇順にリストの要素を並べ変える	sorted(aList, reverse=True)
オプションで、ファイルを出力先にする	file = sys.open(filename, 'w')
縦棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
ファイルにxを文字列にして書き込む	f.write(str(x))
ヒストグラムの色をナバホホワイトに指定する	plt.hist(データ列, color='navajowhite')
プログラムの実行を正常終了する	sys.exit(0)
ペアリストpairsからカウンタを構築する	collections.Counter(dict(pairs))
リストをビン数nとしてビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列を最初の部分文字列で分けたときの先頭の文字列を取り出す	s.partition(sub)[0]
データ列が何年か調べる	ds.dt.year
データフレームのcollの数値時刻からタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
リストとデータ列について散布図を描画し、、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
今日をISO書式の文字列に変換する	datetime.datetime.today().isoformat()
ヒストグラムベースの勾配ブースティング回帰木を準備する	model = sklearn.ensemble.HistGradientBoostingRegressor()
マップのの一覧	aDict.values()
ダークマゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
データフレームのカラムを散布図を用いてプロットする	sns.scatterplot(data=df, x='列名', y='列名')
ライトゴールドロディイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
ベクトルの分散	np.var(aArray)
シーケンスのそれぞれを関数でフィルタする	filter(func, iterable)
サンディーブラウン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
プラム色でヒストグラムを描画する	plt.hist(データ列, color='plum')
option: 色をダークオレンジに設定する	color = 'darkorange'
ヒストグラムの色をホワイトにする	plt.hist(データ列, color='white')
文字列全体が正規表現にケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: カーキを使う	color = 'khaki'
文字コードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
option: ダークグレーを使用する	color = 'darkgray'
Pythonパス	sys.path
棒グラフをイエローグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
JSONLファイルにデータフレームを保存する	df.to_csv(filename)
ヒートマップでデータフレームのリストで指定された列の相関行列を描画する	sns.heatmap(df[aList].corr())
縦棒グラフをライトスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
nを十六進表現に変換する	hex(n)
option: 印をバツに変更する	marker = 'x'
データフレームのリストカラムの未入力値を直後の値に設定する	df[aList].fillna(method='bfill')
スカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
ふたつの集合は集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
numpyをインポートする	import numpy as np
小数点数の正接の逆数	math.atan(x)
データフレームを小数点以下n桁で丸める	df.round(n)
ダークゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
浮動小数点数を十の位で丸める	round(x, -1)
折れ線グラフを赤い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
リストと配列についての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
棒グラフをシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='cyan')
xを整数にする	int(x)
折れ線グラフに赤い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
縦棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
ニューラルネットで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
ライトスチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
ヒストグラムをインディアンレッド色として描画する	plt.hist(データ列, color='indianred')
option: ブラックに色を設定する	color = 'black'
日付データが木曜日	aDate.weekday() == 3
ユークリッド距離	math.dist(point, point2)
イテラブルのセット	set(iterable)
カラムを100の位で四捨五入して整数型にする	ds.round(-2).astype(int)
ホワイトスモーク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
組の文字列が最初に見つかる場所	aTuple.index(element)
文字列が片仮名	('ァ' <= ch <= 'ン')
文字列の開始位置以降に部分文字列が含まれないか	s.find(sub, start) == -1
目盛り線	plt.grid(color='#800080')
数値を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
辞書の内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
文字列が組の要素か	element in aTuple
nがn2以上	n >= n2
ライトスチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
文字列中にひとつでも非アルファベットが含まれるか確認する	any(not c.isalpha() for c in s)
散布図の左三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
折れ線グラフに黒いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図にrgbのポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
日付時刻データからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
ライトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightblue')
列をぐるぐると繰り返す	itertools.cycle(iterable)
モデルをあてはめる	model.fit(説明変数, 目的変数)
プロットの用途を画面に指定する	sns.set(context='notebook')
ライトスレイグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
縦棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
ファイルパスから追加ストリームを開き]、fとする	f = open(filepath, mode='a')
予測値とデータの離れ具合をプロット化する	sns.residplot(x='列名', y='列名', data=df)
グラフの補足を表示する	plt.legend()
プロット中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
英字を全部見る	string.ascii_letters
sepを区切りにして文字列リストをひとつの文字列にする	sep.join(aStringList)
破壊的に重複をデータフレームから落とす	df.drop_duplicates(inplace=True)
リストと配列についての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
replにデータフレームをまとめて正規表現patternで置き換える	df.replace(pattern, repl, regex=True)
オリーブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
集合から要素を除く	aSet.remove(element)
y座標だけグリッド線	plt.grid(axis='y')
データフレームのリスト列の相関行列ケンドールで	df[aList].corr(method='kendall')
データフレームを各列と列の組み合わせ毎にグループ化して標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
マッピングの項目名とその値をペアとして取り出す	aDict.items()
データフレームの列の文字列が文字列で始まらないデータを取り出す	df[not df[column].str.startswith(s)]
半透明の点線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
二つの列を用いてデータフレームを降順に破壊的に整列する	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
ミスティローズにヒストグラムの色を変更する	plt.hist(データ列, color='mistyrose')
ふたつの集合の差を求める	aSet.difference(aSet2)
option: データ型を指定する	dtype = np.int
ライムグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
ロージーブラウン色を用いてヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
リストとイテラブルについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
散布図に青い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
アクアマリン色としてヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
option: 改行コードをUNIXに指定する	newline = '\n'
両端キューの末尾に値を追加する	deq.append(element)
線グラフをアクア色として描画する	plt.plot(データ列x, データ列y, color='aqua')
棒グラフをブラック色を用いて描画する	plt.bar(データ列x, データ列y, color='black')
三変数の一番小さい値	min(x, y, z)
文字列を新しい文字列で置換する	s.replace(sub, newsub)
バイナリ書き込みできるようにファイルパスをオープンする]	open(filepath, mode='wb')
リストとリストについて散布図を描画してマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
未初期化の配列を作る	np.empty(要素数, dtype=np.int)
ピーチパフ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
非数値データ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
をPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
双方向キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
ロイヤルブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
シーケンスを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
シスルにヒストグラムの色を変更する	plt.hist(データ列, color='thistle')
option: フォントの色をホットピンクに指定する	color = 'hotpink'
タプル中の最初のオブジェクトを探す	aTuple.index(element)
ファイルパスが存在しない	not os.path.exists(filepath)
ダークスラテグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
降順にデータフレームを破壊的に'A'列でソートする	df.sort_values(by='A', ascending=False, inplace=True)
折れ線グラフの四角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
句読点文字を全て使う	string.punctuation
青色で文字列を出力する	print(f'\033[34m{value}\033[0m')
実数のcosの逆数	math.acos(x)
データフレームの列が文字列で始まらない行を取り出す	df[not df[column].str.startswith(s)]
列によってデータフレームを集計して、それぞれのグループ毎の標準偏差を求める	df.groupby(column).std()
リストの合計値を算出する	sum(aList)
折れ線グラフの菱形印の線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
プロットの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
貝殻色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
配列を分割数nでビン分割する	pd.cut(aArray, n)
勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
リストと数列について散布図を描画し、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフをライム色を使って描画する	plt.plot(データ列x, データ列y, color='lime')
ビン数nでデータフレームの中の列をビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
辞書順で二つの文字列を比較する	s < s2
ヒストグラムの色を淡い茶色に設定する	plt.hist(データ列, color='tan')
文字列の右端からタブを取り除く	s.rstrip('\t')
ネイビーにヒストグラムの色を設定する	plt.hist(データ列, color='navy')
マッピングを並べ直してJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
セットが空集合	len(aSet) == 0
文字列を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
option: 色をミディアムシアグリーンにする	color = 'mediumseagreen'
コーンズシルクにヒストグラムの色を設定する	plt.hist(データ列, color='cornsilk')
文字列の末尾から改行を取り除く	s.rstrip('\n')
棒グラフの色を濃い青にする	plt.bar(データ列x, データ列y, color='darkblue')
データフレームの指定された４つの列を抽出する	df[[column, column2, column3, column4]]
印字可能な文字を全部求める	string.printable
混同行列をヒートマップとして確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
カーキ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
値を黒色でプリントする	print(f'\033[30m{value}\033[0m')
ピアソンとしてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
L1ノルムでデータを正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ひとつでも英数字が文字列内に含まれるか確認する	any(c.isalnum() for c in s)
一点鎖線に線グラフの線種を設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図に右三角印を使用する	plt.scatter(データ列x, データ列y, marker='>')
小数点数がNaN	math.isnan(x)
文字列を最後の部分文字列で分けたときの後半の文字列を取り出す	s.rpartition(sub)[-1]
xでデータフレームの列の未入力値を埋める	df[col].fillna(x)
紺碧色で散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
グリーンイエロー色でヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
プラットホームがWindowsか判定する	sys.platform.startswith('win32')
既存のファイルパスをEUCとして追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
1行分改行なしで標準入力から読む	sys.stdin.readline().rstrip()
カウンタをセットに変換する	set(aCounter)
リストの最初を除く	aList[1:]
option: ダークシアンを使用する	color = 'darkcyan'
横棒プロットを描画して、棒の縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
配列をワンホット・ベクトルにする	pd.get_dummies(iterable)
ヒストグラムの色を小麦色にセットする	plt.hist(データ列, color='wheat')
配列の平均	np.mean(aArray)
クラス分類の真陽性を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: 追加用に指定する	mode = 'a'
シーケンスの長さnの順列	itertools.permutations(iterable, n)
横棒グラフをホットピンク色として描画する	plt.barh(データ列x, データ列y, color='hotpink')
データフレームを各列と列の組み合わせ毎にグループ化して平均値を求める	df.groupby([column, column2], as_index=False).mean()
イテラブルとリストの散布図に赤い▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図の▲マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
行列の値を使う	aArray[行番号, 列番号]
整数nの二進表現を見る	bin(n)
データフレームのカラムの正規分布に対する上下広がり	df[col].skew()
パレットトルコイズ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
文字列がリストの要素かどうか確認する	element in aList
データフレームを各列と列の組み合わせ毎にグループ化して最大値を求める	df.groupby([column, column2], as_index=False).max()
双方向キューの中に要素が含まれてるか調べる	element in deq
ふたつの集合がセットと交わりを持たないか調べる	aSet.isdisjoint(aSet2)
二つの文字列は同じでないか調べる	s != s2
組の末尾のn要素を捨てる	aTuple[:-n]
ビン数nを用いてデータフレームの中の列をビニングしてnamesのラベルをつける	pd.cut(df[col], n, labels=names)
EUCで既存のファイルパスを追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
アリスブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
整数nの二進数文字列を使う	bin(n)[2:]
配列とイテラブルについての散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
コーンフラワーブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
回帰分析をランダムフォレストで行う	model = sklearn.ensemble.RandomForestRegressor()
ファイルを開いて]追加ストリームを使う	open(filepath, mode='a')
option: ミディアムアクアマリンに色を指定する	color = 'mediumaquamarine'
データ列は正規分布からどの程度歪んでいるか確認する	ds.kurt()
リストの全要素をクリアにする	aList.clear()
印字できる文字を全部使う	string.printable
n個に配列をビン分割する	pd.cut(aArray, n)
レモンシフォン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
黒い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
文字列の中でASCII限定として正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
乱数	random.random()
option: シアンにフォントの色を設定する	color = 'cyan'
ダークスレートブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
データ列間のMAEを算出する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
option: グラフの色をライトスレイグレーに変更する	color = 'lightslategrey'
ビン数nでリストを分割する	pd.cut(aList, n)
折れ線グラフのクロス印の色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
実数を実数で除した余り	x % y
option: グラフの色をミディアムターコイズに変更する	color = 'mediumturquoise'
黒色で数値をプリントする	print(f'\033[30m{value}\033[0m')
イテラブルと数列についての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
option: n番目のカラムをインデックスに減らす	index_col = n
列でデータフレームをソートして、下位を取り出す	df.sort_values(columns).tail(n)
option: フォントの色を耐火レンガにセットする	color = 'firebrick'
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
ヒストグラムの色を濃い青に設定する	plt.hist(データ列, color='darkblue')
線グラフの色をシスルにする	plt.plot(データ列x, データ列y, color='thistle')
散布図を丸マーカーで描画する	plt.scatter(データ列x, データ列y, marker='o')
リストとリストの散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームを複数の列によって集約する	df.groupby(columns)
データフレームを各列と列の組み合わせ毎に集約し、、個数を算出する	df.groupby([column, column2], as_index=False).count()
下三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
数を浮動小数点数で除した余り	x % y
横棒グラフをフォレストグリーン色として描画する	plt.barh(データ列x, データ列y, color='forestgreen')
リストを昇順に並べ変える	sorted(aList, reverse=True)
整数nの16進数表現	hex(n)
option: マーカーの色をダークブルーにする	markerfacecolor = 'darkblue'
リストと数列について散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
nが一桁の整数か	-9 <= n <= 9
option: グラフの色をダークシアンにセットする	color = 'darkcyan'
列の中にいくつ欠損値が存在するか数える	ds.isna().sum()
ライトイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightyellow')
リストの末尾にオブジェクトを加える	aList.append(element)
シアン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
円グラフでリストの割合を作図する	plt.pie(データ列, startangle=90)
ダークスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
オーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
ヒストグラムの色をベージュにする	plt.hist(データ列, color='beige')
整数nを十六進数リテラルに変換する	hex(n)
浮動小数点数の二乗	x ** 2
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategrey')
データ列の中にある文字列の数を数える	ds.isin([value]).sum()
有理数モジュールをインポートする	import fractions
青い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
整数nが組のどれかかどうか調べる	n in aTuple
n個にデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列からformatのパターンとして日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
実線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
２つの整数の最大公約数	math.gcd(n, n2)
データフレームの中に日付データが存在するかどうか調べる	df.isin([value])
データフレームをエクセルファイルから読む	pd.read_excel(filename)
読み込みモードとしてファイルをオープンする]	open(filepath, mode='r')
組の要素を小さい方から並べる	sorted(aTuple, reverse=False)
ユニコードを文字に変換する	chr(unicode)
カウンタの項目数を見る	len(aCounter)
縦棒グラフを描画し、棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
ダーク・スラテグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
データ列の欠損値を最小値で置換する	ds.fillna(ds.min())
ヒストグラムの色をインディアンレッドに変更する	plt.hist(データ列, color='indianred')
線グラフをダークスラテグレー色を使って描画する	plt.plot(データ列x, データ列y, color='darkslategray')
タプルのキーとその値を列挙する	aDict.items()
タプル内の要素が全て真か	all(aTuple)
平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
変数が無限大に近づく場合の数式の極限値を求める	sympy.limit(e, z, oo)
ひとつでも非英数字が文字列中にあるか調べる	any(not c.isalnum() for c in s)
リネン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
option: シルバーにグラフの色を設定する	color = 'silver'
列を更新不能なセットにする	frozenset(iterable)
折れ線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
折れ線グラフの色をドジャーブルーにする	plt.plot(データ列x, データ列y, color='dodgerblue')
全印字可能な文字	string.printable
データフレームを一度に小数点以下n桁で丸める	df.round(n)
折れ線グラフをスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='slateblue')
ファイルからの入力ストリームを見る	open(filepath)
データフレームを列の値でグループ化し、、列挙する	[(name, group) for name, group in df.groupby(column)]
ダークレッド色としてヒストグラムを描画する	plt.hist(データ列, color='darkred')
データフレームのリストカラムの空文字をNaNに変換しドロップする	df[aList].replace('', np.nan).dropna()
分子n分母mの分数を作る	fractions.Fraction(numerator=n, denominator=m)
ブランチドアーモンドにヒストグラムの色をする	plt.hist(データ列, color='blanchedalmond')
nが一桁の数かどうか調べる	-9 <= n <= 9
option: グラフの色をオリベドラブにセットする	color = 'olivedrab'
パールバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
クラス分類をSDGで行う	model = sklearn.linear_model.SGDClassifier()
タプルの各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
ダークサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームの列の未入力値をメディアンに設定する	df[col].fillna(df[col].median())
標準エラーを用いる	sys.stderr
マップの内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
リストとリストについて散布図を描き、、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
配列と数列について散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームをインデックスを付けずにJSONLファイルに書き込む	df.to_csv(filename, index=None)
列'A'と列'B'をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
最大値・最小値で整数乱数を発生させる	random.randint(最小値, 最大値)
ベクトルのデータ型を求める	aArray.dtype()
ロージーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
option: グラフの種類を一点鎖線にセットする	linestyle = 'dashbot'
データフレームを列によってグループ化してそれぞれのグループごとの最小値を求める	df.groupby(column).min()
データフレームのリストカラムの未入力値を最大値に増やす	df[aList].fillna(df[aList].max())
ホワイトスモーク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
今日が月曜日かどうか	datetime.datetime.today().weekday() == 0
数値のパラメータを数式で置き換える	e.subs(z, e2)
貝殻色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
データフレームを'A'列によってによって破壊的に並べる	df.sort_values(by='A', inplace=True)
ヒストグラムをターコイズ色を使って描画する	plt.hist(データ列, color='turquoise')
文字列は数値かテストする	s.isnumeric()
最小値でデータフレームのリスト列の欠損値を置換する	df[aList].fillna(df[aList].min())
データフレームの2つのカラムを並べてボックスチャートを用いて可視化する	plt.boxplot([df['カラム'], df['カラム']])
二つの文字列をタブで区切って出力する	print(value, value2, sep='\t')
グラフの使途をスライドに指定する	sns.set(context='talk')
オブジェクトの無限なイテラブル	itertools.repeat(element)
option: グラフの色を深紅にセットする	color = 'crimson'
タプルをn回連結する	aTuple * n
散布図の上三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
タイムスタンプデータを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
横軸だけ目盛り線	plt.grid(axis='x')
縦棒プロットを描画し、、左寄せする	plt.bar(ラベル列, データ列, align='edge')
赤い破線でイテラブルの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
option: 暗い赤を使う	color = 'darkred'
散布図の△マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
黒い左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
プレゼンにグラフを設定する	sns.set(context='talk')
xの小数点以下'2'桁までを表示する	print(':.2f'.format(x))
option: アクアマリンに色をセットする	color = 'aquamarine'
データ列とイテラブルの散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームの中に存在する文字列と文字列の合計を数える	df.isin([value, value2]).sum()
rgbの大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図にrgbの星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c=rgb)
配列とリストについての散布図に文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
option: ロイヤルブルーを使う	color = 'royalblue'
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
リストとイテラブルの散布図を描画して、マーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
イテラブルの組み合わせ	itertools.combinations(iterable, n)
カウンタをマッピングとして更新する	aCounter.update(aDict)
ファイル名がCSVファイルかどうか調べる	filename.endswith('.csv')
折れ線グラフの色をカーキに変更する	plt.plot(データ列x, データ列y, color='khaki')
黒い▽印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
ヒストグラムの色をオレンジに変更する	plt.hist(データ列, color='orange')
ミディアムスプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
列でデータフレームをグループ化して列の要約統計量を計算する	df.groupby(column).describe()[column2]
xが真か確認する	bool(x)
リストの値を関数に適用した結果で並べ変える	sorted(aList, key=func)
グラフにx=0の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
横軸の目盛の表示値を変更する	plt.xticks(目盛りの値リスト)
option: 先頭の行をカラムの名前に指定する	header = 0
散布図に赤い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
最大長を指定して、双方向キュー	collections.deque(maxlen=n)
nがn2と等しいか	n == n2
縦棒プロットを描いて、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
ファイルパスをオープンして]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
線グラフの色をダークマゼンタに変更する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: ダークグレーを使う	color = 'darkgrey'
折れ線グラフをホワイト色として描画する	plt.plot(データ列x, データ列y, color='white')
リストの要素のみ出力する	print(*aList)
データフレームの未入力値を平均値で置換する	df.fillna(df.mean())
ヒストグラムをハニーデュー色を用いて描画する	plt.hist(データ列, color='honeydew')
データフレームを列でグループ化し、、列の要約統計量を求める	df.groupby(column).describe()[column2]
データフレームを列によって整列して上の方n件を取り出す	df.sort_values(columns).head(n)
リストと配列についてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
横棒グラフをブランチドアーモンド色として描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
ミディアムバイオレットレッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
option: グラフの色をスラグレーにセットする	color = 'slategrey'
折れ線グラフの色をスラグレーにセットする	plt.plot(データ列x, データ列y, color='slategrey')
半透明の破線としてデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データフレームのリストカラムの欠損値を平均に指定する	df[aList].fillna(df[aList].mean())
データフレームを列の値で分類して、それぞれのグループの最大値を求める	df.groupby(column).max()
ドジャーブルーにヒストグラムの色を変更する	plt.hist(データ列, color='dodgerblue')
ファイルをバイナリ書き込みモードで開く]	open(filepath, mode='wb')
散布図を上三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
集合をタプルにする	tuple(aSet)
option: ▼マーカーを使う	marker = 'v'
データフレームの列が文字列で終わるデータを取り出す	df[df[column].str.endswith(s)]
xの小数点以下'1'桁までを出力する	print(':.1f'.format(x))
シアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
表データの中の列と列に重複があれば消す	df.drop_duplicates(subset=[column, column2])
1からNまでの配列を作成する	np.arange(1, N+1)
2つのオブジェクトが等しいかどうか調べる	obj == obj2
折れ線グラフの色を茶色にする	plt.plot(データ列x, データ列y, color='brown')
最後に追加した項目をマッピングからポップする	aDict.popitem()
プロットで使う縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
オブジェクトは文字列か調べる	isinstance(obj, str)
列を2回あわせた直積を求める	itertools.product(iterable, repeat=2)
SJISを用いてファイルを開く]	open(filepath, encoding='shift_jis')
ミスティローズにヒストグラムの色を指定する	plt.hist(データ列, color='mistyrose')
ビンを設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
L2ノルムでデータを正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
option: アイボリーにグラフの色を設定する	color = 'ivory'
現在の時刻を使う	datetime.date.today().hour
文字列中のカタカナを平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
option: スノーに色を設定する	color = 'snow'
タイムスタンプデータの年	aDatetime.year
データフレームのリストカラムの母標準偏差を算出する	df[aList].std(ddof=0)
option: チョコレートにグラフの色を指定する	color = 'chocolate'
タプルの浅いコピーを生成する	aDict.copy()
数値を太字にする	f'\033[1m{value}\033[0m'
option: ミディアムバイオレットレッドにグラフの色を変更する	color = 'mediumvioletred'
option: グラフの線の種類を点線に設定する	linestyle = 'dotted'
変数をアンダーライン付きで出力する	print(f'\033[4m{value}\033[0m')
option: シエナにフォントの色を変更する	color = 'sienna'
縦棒グラフをブラック色を用いて描画する	plt.bar(データ列x, データ列y, color='black')
option: グラフの色をライトスカイブルーに変更する	color = 'lightskyblue'
ヒストグラムの色をスラグレーにする	plt.hist(データ列, color='slategrey')
表を各列と列の組み合わせ毎に集約して分散を求める	df.groupby([column, column2], as_index=False).var()
Pandasで、データ列をフォーマットfmtで日付データにする	pd.to_datetime(ds, format=fmt)
ふたつの集合が集合と交わりを持たないか	aSet.isdisjoint(aSet2)
縦棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
実数で実数を割って、切り捨てる	x // y
グラフの用途をスライドにする	sns.set(context='talk')
配列として列を抽出する	df[column].values
折れ線グラフの色をアクアにセットする	plt.plot(データ列x, データ列y, color='aqua')
リストと配列の散布図をプロットし、、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: グラフを点線に変更する	linestyle = 'dotted'
文字列の右側から部分文字列を除く	s.rstrip(sub)
データフレームの中に文字列と日付データがいくつあるか数える	df.isin([value, value2]).sum()
ヒストグラムの色をインディゴに指定する	plt.hist(データ列, color='indigo')
縦棒プロットを描画し、、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
t-SNEとしてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データ列の中にある文字列の合計をカウントする	ds.isin([value]).sum()
データフレームの列を散布図を用いてプロット化する	sns.scatterplot(data=df, x='列名', y='列名')
文字列リストをsepを区切りとしてつなげる	sep.join(aStringList)
日付データにn秒分加算する	aDate + datetime.timedelta(seconds=n)
行列のユニークな各要素の頻度	np.unique(aArray, return_counts=True)
現在の秒数を使う	datetime.date.today().second
ミディアムターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='mediumturquoise')
縦棒プロットを描き、、バーの横幅を変更する	plt.bar(ラベル列, データ列, width=0.5)
文字列中に部分文字列が存在する	sub in s
option: ミディアムスプリンググリーン色を使用する	color = 'mediumspringgreen'
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategray')
十六進文字列をbytesizeバイトのバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
横棒グラフをシエナ色として描画する	plt.barh(データ列x, データ列y, color='sienna')
データフレームをインデックスでソートする	df.sort_index()
コーラルにヒストグラムの色をする	plt.hist(データ列, color='coral')
ミスティローズ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
オプションで、標準出力を出力先にする	file = sys.stdout
データフレームの列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
データフレームとしてエクセルファイルファイルを読む	pd.read_excel(filename)
配列を横ベクトルに変形する	aArray.reshape(1, -1)
リストの要素を消す	aList.clear()
ロバスト推定としてクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データ列の値をまとめてValueMapで置き換える	ds.replace(ValueMap)
横棒グラフをダークサーモン色を使って描画する	plt.barh(データ列x, データ列y, color='darksalmon')
項目名が辞書上でまだ定義されていないかどうか調べる	key not in aDict
組の末尾のn要素を除く	aTuple[:-n]
実数の余弦の逆数を算出する	math.acos(x)
ひとつでも非小文字が文字列中に含まれるかどうか	any(not c.islower() for c in s)
辞書のの一覧を参照する	aDict.values()
セットから別の集合の要素を除く	aSet.difference_update(aSet2)
２つの変数をスラッシュで区切って出力する	print(value, value2, sep='/')
ヒストグラムの色をアリスブルーに指定する	plt.hist(データ列, color='aliceblue')
文字列中の部分文字列の出現	s.count(sub)
本日が水曜日	datetime.datetime.today().weekday() == 2
ガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
浮動小数点数が非数	math.isnan(x)
option: ライトシアン色を使用する	color = 'lightcyan'
環境がLinuxかどうか	sys.platform.startswith('linux')
行列の要素ごとに加算する	aArray + aArray2
２つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
option: カンマをセパレータで用いる	sep = ','
データ列のどの値が頻出か確認する	ds.mode()
実数の双曲線正接を求める	math.tanh(x)
散布図のマーカーを△印にする	plt.scatter(データ列x, データ列y, marker='^')
文字化けを防ぐ	sns.set(font='IPAexGothic')
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
ヒストグラムの色をアイボリーに変更する	plt.hist(データ列, color='ivory')
両端キューの左側に列の各要素を追加する	deq.extendleft(iterable)
データフレームの列の文字列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
整数nがセットのいづれかか調べる	n in aSet
列の一覧	df.info()
グラフにx=0の実線を設定する	plt.axvline(x=0, linestyle='solid')
部分文字列によって文字列を二分割する	s.partition(sub)
パレットを全般的に暗くする	sns.set(pallete='dark')
茶色色としてヒストグラムを描画する	plt.hist(データ列, color='brown')
二点間のユークリッド距離を算出する	math.dist(point, point2)
折れ線グラフのポイント印の大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
データフレームを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
パパイヤウィップにヒストグラムの色を指定する	plt.hist(データ列, color='papayawhip')
二進文字列をbytesizeバイトのバイナリにする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
option: サドルブラウンに色を設定する	color = 'saddlebrown'
日付時刻データの時間	aDatetime.time()
濃いシアン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データ列の折れ線グラフを下三角印で描画する	plt.plot(データ列x, データ列y, marker='v')
フローラルホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='floralwhite')
ライトイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
新しいサポートベクター分類モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: ダークオーキッドを使用する	color = 'darkorchid'
新しいロジスティック回帰モデルを準備する	model = sklearn.linear_model.LogisticRegression()
データフレームを'A'列と'B'列で昇順にソートし、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
プロットにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
紺碧にヒストグラムの色を設定する	plt.hist(データ列, color='azure')
データフレームのstart行目からend行目までを抽出する	df[start:end]
ガウス過程で回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
実数を実数で除算した余り	x % y
y軸だけ目盛り線	plt.grid(axis='y')
散布図の▼マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
日付データにn時間を加算する	aDate + datetime.timedelta(hours=n)
縦棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
実線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
現在が木曜日か	datetime.datetime.today().weekday() == 3
データフレームの内で、列の重複を見る	df.duplicated(subset=column)
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるかカウントする	s.count(sub, start, end)
横棒グラフの色をダークレッドにする	plt.barh(データ列x, データ列y, color='darkred')
オブジェクトが名前付きタプルかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
黒い丸マーカーをリストと数列の散布図に描く	plt.plot(データ列x, データ列y, marker='o', c='k')
チョコレート色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
データフレームの指定された二列を取り出す	df[[column, column2]]
折れ線グラフをスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='skyblue')
文字列をコロンで分割して、文字列リストにする	s.split(':')
データ列の未入力値を平均値に設定する	ds.fillna(ds.mean())
データフレームの未入力値が存在する行を削除する	df.dropna()
上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
配列の差を調べる	aArray - aArray2
散布図を赤い三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
option: ライトシアン色を用いる	color = 'lightcyan'
二つのデータフレームを列'A'と列'B'をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
option: バツ印を描画する	marker = 'x'
実数のアークサイン	math.asin(x)
nxn2の2次元リストを作る	[[0] * n for _ in range(n2)]
こんにちは世界とプリントする	print('Hello World')
格子線をグラフに入れる	plt.grid(True)
シャルトリューズ色としてヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
ピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
データフレームの指定した４つの列を取り出す	df[[column, column2, column3, column4]]
ポスター用にプロットを設定する	sns.set(context='poster')
option: グラフの色をスラグレーに指定する	color = 'slategrey'
option: ミディアムパープルを使う	color = 'mediumpurple'
折れ線グラフの色をペールグリーンにする	plt.plot(データ列x, データ列y, color='palegreen')
option: シアンを用いる	color = 'cyan'
option: ゴールドを使う	color = 'gold'
コーンフラワーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
散布図に黒い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
option: グラフの色をミディアムオーキッドに指定する	color = 'mediumorchid'
配列とリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
改行せず二つの数値をプリントする	print(value, value2, end='')
リストの末尾から要素を取り出す	aList.pop()
データフレームの各グループごとの合計	df.groupby(column).sum()
変数をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
黄緑色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<')
双方向キューの末尾に文字列を追加する	deq.append(element)
折れ線グラフの右三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
ミディアムパープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
折れ線グラフをミディアムスプリンググリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: ミディアムスプリンググリーンにフォントの色を設定する	color = 'mediumspringgreen'
文字列を部分文字列で区切って、列挙する	s.split(sub)
真紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
ベクトルの標準偏差	np.std(aArray)
データ列の中の未入力値の数をカウントする	ds.isna().sum()
option: アクアにグラフの色を設定する	color = 'aqua'
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='grey')
表データの列がxより大きいデータを抽出する	df[df[column] > x]
nの各桁の総和を求める	sum(map(int, str(n)))
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='teal')
option: グラフの色をチョコレートにする	color = 'chocolate'
1行標準入力から読む	sys.stdin.readline()
配列を等量で分割数nを用いて分割する	pd.qcut(aArray, n)
データフレームの指定した列を配列に変換する	df[column].values
文字列の両端から余分な空白を除く	s.strip()
ホワイトスモーク色として線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームの中の列を分割数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データ列の空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
浮動小数点数のn乗して数による余り	pow(x, n, y)
数値を太字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
データフレームを列によって分類して、各グループ毎の最小値を求める	df.groupby(column).min()
双方向キューの先頭に値を追加する	deq.appendleft(element)
option: グラフを点線に設定する	linestyle = 'dotted'
リストが空かどうか	len(aList) == 0
日付時刻データは何日か知る	aDatetime.day
縦棒グラフをカデットブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cadetblue')
ヒストグラムの色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
クラス分類の適合率を算出する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
双方向キューの最後を使う	deq[-1]
ライトスレイグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
散布図の色をホワイトにする	plt.scatter(データ列x, データ列y, color='white')
8進数文字列をbytesizeバイトのバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
折れ線グラフの丸印を黒色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
option: 色をクリムゾンに設定する	color = 'crimson'
降順に列名リストによって破壊的にデータフレームを並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
option: ティールにグラフの色を変更する	color = 'teal'
option: マーカーの色を設定する	markerfacecolor = '#800080'
縦棒グラフをシスル色を用いて描画する	plt.bar(データ列x, データ列y, color='thistle')
散布図の大バツ印を黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
オブジェクトは整数型のインスタンスかどうか調べる	isinstance(obj, int)
option: 分割記号をカンマにする	sep = ','
線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
折れ線グラフの▽印の色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
横棒グラフをアリスブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='aliceblue')
K最近傍法として回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
文字列を走査し、パターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
データフレームのカラムの中にある文字列と文字列の数を数える	df[col].isin([value, value2]).sum()
option: グラフの色をパレットトルコイズに変更する	color = 'paleturquoise'
文字列が大文字かどうか	s.isupper()
縦棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
空のリッジ回帰とロッソ回帰のハイブリットモデルを準備する	model = sklearn.linear_model.ElasticNet()
データフレームの中にある日付データの合計をカウントする	df.isin([value]).sum()
破線としてヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
t分布型確率的近傍埋め込み法で多次元データを濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
折れ線グラフの色をRGBを使って設定する	plt.plot(データ列x, データ列y, color='#800080')
寄与率を求める	sklearn.metrics.r2_score(データ列, データ列2)
分類モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
タイムスタンプデータは何曜日か知る	aDatetime.weekday()
折れ線グラフの色をインディアンレッドに変更する	plt.plot(データ列x, データ列y, color='indianred')
入力ストリームから1文字、読み込む	f.read(1)
リストとリストの散布図を描いて、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
円プロットの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
データフレームを表示するとき、列数を増やす	pd.set_option('display.max_columns', n)
変数が0に近づく場合の数値の極限値を求める	sympy.limit(e, z, 0)
データフレームのカラムの値が未入力値	df[col].isna()
実数の天井数	math.ceil(x)
プロットで使う題名を設定する	plt.title('グラフの名称')
浮動小数点数のn乗を求める	x ** n
option: グラフの色をダークサーモンにセットする	color = 'darksalmon'
文字列リストにイテラブルを変換して、空白で連結する	' '.join(map(str, iterable))
ラインを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
線グラフをパープル色を使って描画する	plt.plot(データ列x, データ列y, color='purple')
nがn2以下、それか、n3以上かどうか調べる	n <= n2 or n >= n3
option: ホットピンクを使う	color = 'hotpink'
真下位集合か	aSet < aSet2
線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightgreen')
散布図をダークレッド色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
イテラブルを関数でフィルタする	filter(func, iterable)
折れ線グラフに右三角マーカーを加える	plt.plot(データ列x, データ列y, marker='>')
横棒グラフを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
縦棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
option: ミディアムスプリンググリーンを使用する	color = 'mediumspringgreen'
文字列を部分文字列で二つに区切って後半の文字列を使う	s.partition(sub)[-1]
棒グラフをシーグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='seagreen')
散布図の三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
折れ線グラフをシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='cyan')
プロットをポスターに設定する	sns.set(context='poster')
組の先頭	aTuple[0]
等間隔のベクトルを初期化する＼	np.arange(開始値, 終了値, 等差)
組の合計値	sum(aTuple)
スタッキングで回帰分析をする	sklearn.ensemble.StackingRegressor()
文字コードtextとしてファイルをオープンする]	open(filepath, encoding=text)
散布図に赤いポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームのリストカラムの中に文字列が含まれる	df[aList].isin([value])
文字列が部分文字列で終了する	s.endswith(sub)
データ列を千の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
option: パレットトルコイズ色を使用する	color = 'paleturquoise'
ダークオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
破壊的に列でによってデータフレームを並べる	df.sort_values(by=column, inplace=True)
列を1000の位で四捨五入して、整数にする	ds.round(-3).astype(int)
疑似乱数を正規分布として得る	random.normalvariate(mu=0.5, sigma=0.2)
ゼロ埋めされた８ビット整数型の行列を作る	np.zeros(要素数, dtype=np.int8)
文字列が空白文字からなるか調べる	s.isspace()
option: アイボリーにフォントの色を設定する	color = 'ivory'
プロットのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
文字列が組の要素でないか調べる	element not in aTuple
整数nを16進表現に変換する	hex(n)
深紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
円グラフを用いてデータ列の割合を図示する	plt.pie(データ列, startangle=90)
デピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
nが負の整数か調べる	n < 0
シードをnで固定する	random.seed(n)
リストにリストを追加し、拡張する	aList.extend(aList2)
データフレームを関数の値によってグループ化し、基本統計量を求める	df.groupby(関数).describe()
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか数える	s.count(sub, start, end)
option: アクアを使用する	color = 'aqua'
大きい順に２つの列によってでデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False)
配列とリストについて散布図を描いて、三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームのリストカラムの未入力値を最頻値に指定する	df[aList].fillna(df[aList].mode().iloc[0])
データ列の中の欠損値の数を求める	ds.isna().sum()
シーケンスを多重集合に変換する	collections.Counter(iterable)
多次元データを主成分分析で淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
読み込みモードを用いてファイルパスを開く]	open(filepath, mode='r')
横棒グラフをパールバイオレットレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='palevioletred')
option: グリーンに色を変更する	color = 'green'
浮動小数点数の2乗を計算する	x ** 2
データ列を10の位で四捨五入して、整数型にする	ds.round(-1).astype(int)
データフレームのカラムの年を求める	df[col].dt.year
TSVファイルからCSVファイルを文字化けしないように読む	pd.read_csv(filename, encoding='shift_jis')
t-SNEで多次元データを濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
kを底とする実数の対数を求める	math.log(x, k)
変数について数式をn階微分する	sympy.diff(e, z, n)
行列のスカラー倍を計算する	aArray * n
ヒストグラムをカデットブルー色を使って描画する	plt.hist(データ列, color='cadetblue')
列と列をペアリングする	itertools.zip_longest(iterable, iterable2)
TSVファイルをデータフレームとして読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
rgbのバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームを各列と列の組み合わせ毎に集約して、分散を計算する	df.groupby([column, column2], as_index=False).var()
書き込み用にBOM付きを使ってファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
表を'A'列と'B'列の値によってグループ化し、要約統計量を算出する	df.groupby(['A', 'B']).describe()
文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームのカラムの標準偏差	df[col].std()
スノー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
option: 茶色に色を設定する	color = 'brown'
データフレームのカラムが正規分布からどれだけ、歪んでいるか確認する	df[col].kurt()
オブジェクトをイテレータにする	iter(obj)
データフレームのリスト列の中にいくつ欠損値があるか数える	df[aList].isna().sum()
option: グラフの色をベージュにセットする	color = 'beige'
データ列間の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
組の最後を取り除く	aTuple[:-1]
リストとリストについて散布図を描いて、下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
nを符号付きで長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データフレームの欠損値を平均値に減らす	df.fillna(df.mean())
グラフで用いるx座標のラベルを設定する	plt.xlabel('x軸ラベル')
nを2進表現に変換する	bin(n)
サポートベクター分類モデルを作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
オブジェクトの参照カウントを求める	sys.getrefcount(obj)
カテゴリ別で色分けして、データフレームをに箱ひげ図としてグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列の接尾辞から部分文字列を除去する	s.removesuffix(sub)
2つのデータフレームを縦方向にくっつける	pd.concat([df, df2])
整数乱数で要素を埋めた行列を初期化する	np.random.randint(開始値, 終了値, (行数, 列数))
異なる列をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
現在が日曜日かどうか確認する	datetime.datetime.today().weekday() == 6
折れ線グラフの色をインディゴに変更する	plt.plot(データ列x, データ列y, color='indigo')
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
真紅色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの列が文字列で始まらないデータを取り出す	df[not df[column].str.startswith(s)]
ガウス過程分類モデルを作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
棒グラフを青色を用いて描画する	plt.bar(データ列x, データ列y, color='blue')
星印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
タイムスタンプデータをn分前にする	aDatetime - datetime.timedelta(minutes=n)
ふたつの関係が上位集合もしくは等しいか調べる	aSet > aSet2
線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
白色で実行結果を表示する	print(f'\033[37m{value}\033[0m')
黒いバツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームの列の文字列が文字列で終わるデータを抽出する	df[df[column].str.endswith(s)]
線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
ライトスチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
ポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.')
データフレームから一番左側の列を消す	df[df.columns[1:]]
折れ線グラフの左三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
縦棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
ハニーデュー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
リストとリストについての散布図に左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<')
ぐるぐるとイテラブルを繰り返す	itertools.cycle(iterable)
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
右三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
変数を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
数値をアンダーライン付きで表示する	print(f'\033[4m{value}\033[0m')
ミディアムブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
option: フォントの色をローングリーンに指定する	color = 'lawngreen'
N未満までの配列	np.arange(N)
option: ブルーバイオレットを使用する	color = 'blueviolet'
データフレームの未入力値を最大値に設定する	df.fillna(df.max())
'A'列でデータフレームをグループ化し要約統計量を求める	df.groupby('A').describe()
散布図に赤い右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
option: ホワイトに色を設定する	color = 'white'
データフレーム全体をインデックスで並べる	df.sort_index()
文字列を回数を制限して置換する	s.replace(sub, newsub, n)
新しいロバスト分類モデルを新規作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームで、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
プラム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
nが5で割り切れるか判定する	n % 5 == 0
作画に使用するフォントを指定する	sns.set(font=フォント名)
文字列をカンマで区切って列挙する	s.split(',')
データフレームを'A'列で整列し、更新する	df.sort_values(by='A', inplace=True)
散布図に大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
カラムの空文字をドロップする	ds.replace('', np.nan).dropna()
ディレクトリをPythonパスに追加する	sys.path.append(dir)
後の値で列のNaNを埋める	ds.fillna(method='bfill')
破線でヒストグラムを描く	plt.hist(データ列, linestyle='dashed')
rgbのクロスマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
カウンタを高頻度方から列挙する	aCounter.most_common()
折れ線グラフをリネン色を用いて描画する	plt.plot(データ列x, データ列y, color='linen')
データフレームの列が文字列で終わらないデータを抽出する	df[not df[column].str.endswith(s)]
マッピングの値として要素が含まれているかどうか	element in aDict.values()
option: フォントの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
option: ミディアムオーキッドを用いる	color = 'mediumorchid'
option: 色をグリーンに設定する	color = 'green'
散布図に星マーカーを使用する	plt.scatter(データ列x, データ列y, marker='*')
option: 色をダークオレンジに変更する	color = 'darkorange'
線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
配列の累積積を調べる	np.cumprod(aArray)
行列の列ごとの分散を使う	np.var(aArray, axis=0)
データフレームのそれぞれのグループ毎の標準偏差	df.groupby(column).std()
浮動小数点数が整数か調べる	x.is_integer()
カテゴリで色分けしてデータフレームの全カラムの相関をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
文字列をセパレータで区切って、文字列リストに変換する	s.split(sep)
データフレームから列を１つ選択する	df[[column]]
要素がマッピングの値として含まれているか調べる	element in aDict.values()
option: グラフの色をティールに設定する	color = 'teal'
破線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
双方向キューが空か確認する	len(deq) == 0
ヒストグラムの色をベージュに変更する	plt.hist(データ列, color='beige')
キーがマッピング上で未定義	key not in aDict
データフレームの列がxより多くx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
折れ線グラフに左三角マーカーを加える	plt.plot(データ列x, データ列y, marker='<')
データフレームを複数の列を用いて小さい順に破壊的に整列する	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgray')
折れ線グラフの色を白に指定する	plt.plot(データ列x, データ列y, color='white')
半透明の一点鎖線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームの内で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
パラメータが無限大に近づく際の数式の極限値を求める	sympy.limit(e, z, oo)
縦棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
棒グラフの色を淡い茶色にする	plt.bar(データ列x, データ列y, color='tan')
散布図の▲印を黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
配列をn個にビン分割する	pd.cut(aArray, n)
浮動小数点数に変換する	float(x)
option: ホワイト色を使用する	color = 'white'
option: 色を小麦色に変更する	color = 'wheat'
グラフの描画で濃くパレットを使用する	sns.set(pallete='deep')
ヒストグラムをライトスカイブルー色を用いて描画する	plt.hist(データ列, color='lightskyblue')
グラフの描画で色差別なくカラーパレットを使用する	sns.set(pallete='colorblind')
ヒストグラムとしてデータフレームの列を描く	plt.hist(df[column])
データフレームを列の値によって集約する	df.groupby(column)
プロットのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
折れ線グラフに赤い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
日付時刻データにn時間分、加える	aDatetime + datetime.timedelta(hours=n)
行列の合計	np.sum(aArray)
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
predicateFuncが真になるリストの要素を消す	itertools.dropwhile(predicateFunc, iterable)
option: ライトスチールブルーにグラフの色を設定する	color = 'lightsteelblue'
データフレームの列の空文字を未入力値に変換しドロップする	df[col].replace('', np.nan).dropna()
円グラフを用いて配列の比率を可視化する	plt.pie(データ列, startangle=90)
データフレームの列名をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
カラムの欠損値をxに設定する	ds.fillna(x)
文字列中に部分文字列が含まれる	sub in s
折れ線グラフの色をターコイズにする	plt.plot(データ列x, データ列y, color='turquoise')
小麦色にヒストグラムの色を指定する	plt.hist(データ列, color='wheat')
デピンク色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
折れ線グラフに▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
２つのデータフレームをジョインする	pd.merge(df, df2)
主成分分析でパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
データフレームの欠損値が含まれる部分に色を付ける	df.style.highlight_null()
ミディアムパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
セットの更新不能版	frozenset(aSet)
nullに等しいもの	None
option: オーキッドにフォントの色を指定する	color = 'orchid'
折れ線グラフの色をダークスラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームのカラムのpercent分位数を求める	df[col].quantile(percent/100)
イテラブルを累積した列	itertools.accumulate(iterable, operator.mul)
黒い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
セットが空でないか確認する	len(aSet) != 0
何か試しに動かす	print('Hello World')
方程式として数式のパラメータの解を計算する	sympy.solve(e, z)
要素ひとつのタプルを作る	(element,)
折れ線グラフのクロス印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ホットピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
数値をアンダーライン付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
rgbのポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ティール色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
折れ線グラフの色をロイヤルブルーに変更する	plt.plot(データ列x, データ列y, color='royalblue')
イテラブルを文字列に変換して、タブで連結する	'\t'.join(map(str, iterable))
ピーチパフ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
散布図をrgbの星マーカーで描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストに要素を加える	aList.append(element)
等量でビン数nでデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
整数nが配列のどれかかどうか調べる	n in aArray
option: 欠損値を含めない	dropna = True
散布図をダークスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
option: ライトゴールドロディイエローにグラフの色を設定する	color = 'lightgoldenrodyellow'
線グラフをレモンシフォン色を用いて描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームの列の未入力値を中央値に増やす	df[col].fillna(df[col].median())
タプルの中の一番小さい値	min(aTuple)
横棒グラフをライトサーモン色を使って描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
散布図の四角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
整数のn乗	x ** n
リストとリストの散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
nをn2だけ増やす	n += n2
ディープスカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
データフレームの指定された列名一覧の列だけ選択する	df[columns]
分子n、分母mの分数を作る	fractions.Fraction(numerator=n, denominator=m)
折れ線プロットにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
option: 小麦色色を使用する	color = 'wheat'
線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
線グラフをサンディーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='sandybrown')
折れ線グラフをホワイトスモーク色として描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
日付データからn時間を減らす	aDate - datetime.timedelta(hours=n)
行列の行ごとの最小を求める	np.min(aArray, axis=1)
回帰モデルの残差を算出する	目的変数 - model.predict(説明変数)
折れ線グラフの印を▽にする	plt.plot(データ列x, データ列y, marker='v')
赤い点線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
赤い点線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
赤い星マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
各カラム毎にデータフレームを分類して列の最大値を計算する	df.groupby(column)[column2].max()
双方向キューに値をエンキューする	deq.appendleft(element)
ピーチパフ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
横棒グラフを白色を用いて描画する	plt.barh(データ列x, データ列y, color='white')
データフレームの列を10の位で丸めて、整数にする	df[col].round(-1).astype(int)
ヒストグラムの色をコーンズシルクに変更する	plt.hist(データ列, color='cornsilk')
各列毎にデータフレームをグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
データフレームのカラムの文字列をNaNにする	df[col].replace(s, np.nan)
三２ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
部分文字列で文字列の開始位置以降が始まるかどうか調べる	s.startswith(sub, start)
ダークバイオレット色としてヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
オブジェクトがリストかタプルかどうか調べる	isinstance(obj, (list)
パラメータが0に近づくときの数値の極限値を算出する	sympy.limit(e, z, 0)
option: ポイント印を加える	marker = '.'
列を関数でフィルタする	map(func, iterable)
クラス分類をアンサンブル学習を用いて行う	sklearn.ensemble.VotingClassifier()
グラフのフォントを日本語表示に指定する	sns.set(font='IPAexGothic')
データフレームを各カラムと列の組み合わせ毎にグループ化して標準偏差を求める	df.groupby([column, column2], as_index=False).std()
重複をデータフレームから破壊的に落とす	df.drop_duplicates(inplace=True)
耐火レンガ色でヒストグラムを描画する	plt.hist(データ列, color='firebrick')
色差別なくカラーパレットをグラフの描画で使う	sns.set(pallete='colorblind')
データフレームから型の列のみ取り出す	df.select_dtypes(ty)
スタック中の要素のインデックス	deq.index(element)
全句点文字	string.punctuation
データ列のpercentパーセンタイルを計算する	ds.quantile(percent/100)
整数の複素数を算出する	complex(x)
データフレームの相関行列ケンドール相関係数を用いて	df.corr(method='kendall')
全要素を０で初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
ミディアムバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumvioletred')
データフレームの中で列の重複を調べる	df.duplicated(subset=column)
データフレームを各列毎に集約して、列の最大値を求める	df.groupby(column)[column2].max()
改行を取り除いてファイルを一行ずつ読み込む	f.readline()
option: ヘッダを連番に設定する	header = None
赤い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
配列とリストについて散布図を描画して、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
データフレームの列のNaNを最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
散布図の色をブラウンにする	plt.scatter(データ列x, データ列y, color='brown')
散布図をダークシアグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ヒストグラムをスノー色を用いて描画する	plt.hist(データ列, color='snow')
nが一桁の数	0 <= n <= 9
nのビット長を調べる	n.bit_length()
数列とリストの散布図を描画して、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフをミッドナイトブルー色として描画する	plt.barh(データ列x, データ列y, color='midnightblue')
データフレームを列によって小さい順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
多次元データを多次元尺度構成法として濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
最大長nの両端キューをイテラブルから生成する	collections.deque(iterable, maxlen=n)
縦棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
ヒストグラムをダークシアグリーン色を用いて描画する	plt.hist(データ列, color='darkseagreen')
データフレームのカラムは何秒か確認する	df[col].dt.second
行列の分散	np.var(aArray)
日付データをn秒前にする	aDate - datetime.timedelta(seconds=n)
文字列TSVファイルからCSVをn番目の列をインデックスとして読む	pd.read_csv(filename, index_col=n)
既存のファイルパスをBOM付きとして追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
option: 黄色を用いる	color = 'yellow'
option: 線のスタイルを一点鎖線に変更する	linestyle = 'dashbot'
カラーマップでヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
三数の最も小さい値	min(x, y, z)
両端キューに値を積む	deq.append(element)
ゴールデンロッドにヒストグラムの色を指定する	plt.hist(データ列, color='goldenrod')
折れ線グラフをハニーデュー色を用いて描画する	plt.plot(データ列x, データ列y, color='honeydew')
折れ線グラフの色をタンにセットする	plt.plot(データ列x, データ列y, color='tan')
リストと数列についての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: フォントの色をスラグレーに変更する	color = 'slategrey'
色付きの点線で配列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
赤い破線で数列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
散布図の星マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
文字列が文字列より辞書順で前か	s < s2
散布図の下三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
シアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
option: バイナリ書き込み用にセットする	mode = 'wb'
文字列全体が正規表現にマッチするか確認する	re.fullmatch(pattern, s)
option: スプリンググリーンにグラフの色をセットする	color = 'springgreen'
ヒストグラムの色をブラックに指定する	plt.hist(データ列, color='black')
カラムのpercent分位数	ds.quantile(percent/100)
折れ線グラフをスカイブルー色を使って描画する	plt.plot(データ列x, データ列y, color='skyblue')
四分位数でリストをビン分割する	pd.qcut(aList, 4)
アスキー文字が文字列内に含まれるかどうか	any(c.isascii() for c in s)
列の各値を双方向キューの先頭に追加する	deq.extendleft(iterable)
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
データフレームの中で、列と列の重複をドロップする	df.drop_duplicates(subset=column)
パラメータについて数式の積分を求める	sympy.integrate(e, z)
ハローワールドと表示する	print('Hello World')
横棒グラフの色をrgbに変更する	plt.barh(ラベル列, データ列, color=rgb)
折れ線グラフのクロスマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
タブで区切って二つのリストをプリントする	print(value, value2, sep='\t')
ペルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
散布図の四角印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
データフレームを各列毎にグループ化し、、文字列という名前のグループを使う	df.groupby(column).get_group(s)
横棒グラフをパールゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
option: フォントの色をライトブルーに指定する	color = 'lightblue'
ピーチパフにヒストグラムの色を設定する	plt.hist(データ列, color='peachpuff')
filepathに現在のワーキングディレクトリを設定する	os.chdir(os.dirname(filepath))
データフレームのリスト列が正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
自然数の順列の総数を算出する	math.perm(n)
n2がn以上かつn3以下か調べる	n <= n2 and n2 <= n3
日付時刻データとタイムスタンプデータの時間差を秒で算出する	(aDatetime - aDatetime2).total_seconds()//60
nで乱数シードを固定化する	random.seed(n)
データ列の中のNaNの合計を求める	ds.isna().sum()
両端キューが空である	len(deq) == 0
出力ストリームにxを文字列に変換して書く	f.write(str(x))
散布図をダークサーモン色として描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
nの各桁の和を求める	sum(map(int, str(n)))
ファイルからnというシートを読む	pd.read_excel(filename, sheet_name=n)
全要素を０で初期化した三二ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
ゼロ埋めした複素数型の配列を作る	np.zeros(要素数, dtype=bool)
散布図をシルバー色として描画する	plt.scatter(データ列x, データ列y, color='silver')
シエナ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
バギングを使ってクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
ダークブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
折れ線グラフの色をライトスレイグレーにセットする	plt.plot(データ列x, データ列y, color='lightslategrey')
表データの列名を列から文字列に付け直す	df.rename(columns={column: name})
ライトグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
ヒストグラムの色をレベッカパープルに指定する	plt.hist(データ列, color='rebeccapurple')
散布図をコーンズシルク色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
データ列をビン数nでビンニングし、、namesのラベルをつける	pd.cut(ds, n, labels=names)
オブジェクトが関数かどうか確認する	callable(obj)
ベクトルの要素ごとの最小公倍数	np.lcm(aArray, aArray2)
option: フォントの色を青にする	color = 'blue'
リストとイテラブルについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムを破線を使って描く	plt.hist(データ列, linestyle='dashed')
散布図の三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
タプルの平均を求める	sum(aTuple)/len(aTuple)
セットにイテラブルを追加更新する	aSet.update(iterable)
データフレームをグループ化しそれぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
特異値分解を用いて淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
タプルの値だけプリントする	print(*aTuple)
データフレームを列を用いてソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データ列の中にいくつNaNがあるかカウントする	ds.isna().sum()
データフレームを'A'列によって降順に破壊的に並べる	df.sort_values(by='A', ascending=False, inplace=True)
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
Pandasでデータ列をdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ヒストグラムの色をパレットトルコイズにセットする	plt.hist(データ列, color='paleturquoise')
option: 最初の行をカラムの名前に増やす	header = 0
線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
データ列の未入力値を最頻値で置換する	ds.fillna(ds.mode().iloc[0])
option: 未入力値を先頭にする	na_position = 'first'
データフレームを列によってグループ分けして、最大値を求める	df.groupby(column).max()
option: タブを区切りで使う	sep = '\t'
文字列中からパターンにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategrey'
nがn2の倍数かどうか調べる	n % n2 == 0
実数のバイナリ対数	math.log2(x)
文字列の最初を求める	s[0]
散布図に▽マーカーを使用する	plt.scatter(データ列x, データ列y, marker='v')
後の値でデータフレームの欠損値を置換する	df.fillna(method='bfill')
キーワード引数を用いてマップに更新する	aDict.update(**kwargs)
線グラフを青紫色を用いて描画する	plt.plot(データ列x, データ列y, color='violet')
今日は何日か知る	datetime.datetime.today().day
折れ線グラフの△マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
ライトコーラルにヒストグラムの色を設定する	plt.hist(データ列, color='lightcoral')
辞書の項目数を参照する	len(aDict)
縦棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
データ列は何分か見る	ds.dt.minute
データフレームの歪度を求める	df.kurt()
日本語が文字列内にあるか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
空の組を作る	()
リストをカンマ区切りでプリントする	print(*aList, sep=',')
カラムがどの程度、分散しているか確認する	ds.var()
小文字列	string.ascii_lowercase
既存のファイルをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
n進文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
折れ線グラフの▲印の色を指定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列の左端から空白を取り除く	s.lstrip(' ')
ダークシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
表データの行を範囲指定して選択する	df[start:end]
小数点数の仮数部	math.frexp(x)[0]
ライトスレイグレーにヒストグラムの色を指定する	plt.hist(データ列, color='lightslategray')
折れ線グラフをパールゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームのカラムをヒストグラムにする	plt.hist(df[column])
書き込むCSVファイルの小数点以下の桁数を指定する	df.to_csv(filename, float_format='%.3f')
丸印を使ってデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
横棒グラフをブラック色として描画する	plt.barh(データ列x, データ列y, color='black')
集合から別の集合を取り除く	aSet.difference_update(aSet2)
ダークスラテグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkslategray')
データ列を折れ線グラフとして可視化する	plt.plot(データ列x, データ列y)
データフレームの文字列を未入力値にする	df.replace(s, np.nan)
破壊的にデータフレームのn行目を消す	df.drop(n, axis=0, inplace=True)
オプションで標準エラーに出力する	file = sys.stderr
データフレームのカラムの中に文字列があるか確認する	df[col].isin([value])
列'A'と列'B'をキーにして2つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
折れ線グラフを青い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列x, データ列y, color='darksalmon')
データ列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
ピアソン相関係数を使ってデータフレームのリストで指定された列の相関行列を求める	df[aList].corr(method='pearson')
ヒストグラムの色をフォレストグリーンに指定する	plt.hist(データ列, color='forestgreen')
折れ線グラフのポイント印を青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ファイルのファイル名を見る	os.path.basename(filepath)
データフレームのリストカラムを丸めて整数型にする	df[aList].round().astype(int)
黒い右三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
変数が無限大に近づく際、数式の極限値を計算する	sympy.limit(e, z, oo)
オブジェクトをn回繰り返すイテラブル	itertools.repeat(element, n)
２つのデータフレームを列'A'と列'B'をキーにして結合する	pd.merge(df, df2, left_on='A', right_on='B')
浮動小数点数の双曲線余弦を求める	math.cosh(x)
ケンドールの相関係数を計算する	scipy.stats.kendalltau(データ列, データ列2)
正規表現patternでデータ列の値をまとめて置き換える	ds.replace(pattern, repl, regex=True)
リストの最後を取り除く	aList[:-1]
nが1もしくは2もしくは3に等しい	n == 1 or n == 2 or n == 3
option: 先頭列をインデックスにセットする	index_col = 0
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
耐火レンガにヒストグラムの色を指定する	plt.hist(データ列, color='firebrick')
データ列を10の位で四捨五入する	ds.round(-1)
データ列をビニングする	pd.cut(ds, aList)
文字列の開始位置以降が部分文字列で開始するかどうか調べる	s.startswith(sub, start)
プロットを使用する準備をする	import matplotlib.pyplot as plt
散布図のクロスマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
赤い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
赤いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
表データのn行目をドロップしてインプレイスする	df.drop(n, axis=0, inplace=True)
ヒストグラムを深紅色で描画する	plt.hist(データ列, color='crimson')
option: グラフの線の幅を3.0ポイントに変更する	linewidth = 3.0
実数を数で除した余り	x % y
option: スラグレーにグラフの色を変更する	color = 'slategray'
折れ線グラフの色をフローラルホワイトに変更する	plt.plot(データ列x, データ列y, color='floralwhite')
数列とリストの散布図を描き、、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
option: ミディアムシアグリーンにグラフの色を設定する	color = 'mediumseagreen'
option: グラフの色をペルーに指定する	color = 'peru'
文字列中の部分文字列の登場をカウントする	s.count(sub)
カウンタのキーと出現回数を列挙する	aCounter.items()
option: レモンシフォンにグラフの色を設定する	color = 'lemonchiffon'
横棒グラフをダークスラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategray')
マッピングから項目名の値をエラーなく得る	aDict.get(key, None)
文字列中にひとつでも非数字があるか調べる	any(not c.isdigit() for c in s)
シエナ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
ダークレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームの欠損値を中央値にする	df.fillna(df.median())
ふたつの集合に共通する要素からなる集合を求める	aSet.intersection(aSet2)
option: 回帰木の深さを制限する	maxdepth = n
文字列リストにイテラブルを変換してカンマによって連結する	','.join(map(str, iterable))
散布図の丸マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
option: タンを使う	color = 'tan'
等間隔の配列	np.arange(開始値, 終了値, 等差)
配列から重複を除いた配列を作成する	np.unique(aArray)
オブジェクトがタプルの要素か調べる	element in aTuple
ヒストグラムをダークターコイズ色として描画する	plt.hist(データ列, color='darkturquoise')
配列をビン数nとしてビニングする	pd.cut(aArray, n)
散布図をパレットトルコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
データフレーム全体をインデックスによって並べる	df.sort_index()
プロットのカラーパレットを暗くする	sns.set(pallete='dark')
横棒グラフをコーンズシルク色を使って描画する	plt.barh(データ列x, データ列y, color='cornsilk')
データフレームのn行目を削除し、、更新する	df.drop(n, axis=0, inplace=True)
x座標の最大・最小値を変更する	plt.xlim(最小値, 最大値)
ヒストグラムをミディアムバイオレットレッド色を用いて描画する	plt.hist(データ列, color='mediumvioletred')
option: ディムグレーにグラフの色をする	color = 'dimgray'
文字列は漢字	('\u4E00' <= ch <= '\u9FD0')
データフレームを複数の列によって並べ直して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
オブジェクトは辞書型かどうか確認する	isinstance(obj, dict)
横棒グラフを紺碧色として描画する	plt.barh(データ列x, データ列y, color='azure')
平均絶対誤差を計算する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
CSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep=',')
ミディアムスプリンググリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
カウンタの文字列数	len(aCounter)
切片なしの重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
カウンタを少ない方からリストとして得る	aCounter.most_common()[::-1]
三数の最大値	max(x, y, z)
折れ線グラフの丸マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
分類モデルの正確さを計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
イテラブルとリストについての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
配列を元に全要素が0の配列を作る	np.zeros_like(aArray)
折れ線プロットを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの列の各データ値の出現回数	df[col].value_counts()
表の内容を確認する	df.head()
データフレームを'A'列によってソートし、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
真サブセットか	aSet < aSet2
散布図の四角印の線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
option: アクアマリンにグラフの色を設定する	color = 'aquamarine'
option: 色をアイボリーにセットする	color = 'ivory'
横軸を対数目盛に変更する	plt.xscale('log')
表データを列によって大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
文字列中の大文字を小文字にする	s.lower()
列でデータフレームを並べ、NaNを先頭にする	df.sort_values(by=column, na_position='first')
散布図をグリーンイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
実行結果を黒色でプリントする	print(f'\033[30m{value}\033[0m')
柱状グラフをビン数を設定してプロットする	plt.hist(データ列, bins=区関数)
スクリプトファイルのディレクトリパス	os.path.dirname(os.path.abspath(__file__))
リストが空でないか判定する	len(aList) != 0
データフレームのカウントプロットをプロットする	sns.countplot(x='列名', data=df)
疑似乱数平均と標準偏差からを生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームが重複しているか	df.duplicated()
新しいロッソ回帰モデルを作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
グラフにy=0の実線を設定する	plt.axhline(y=0, linestyle='solid')
折れ線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
折れ線グラフをデピンク色として描画する	plt.plot(データ列x, データ列y, color='deeppink')
アリスブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ファイルパスの拡張子	os.path.splitext(filepath)[1].lstrip('.')
rgbの菱形マーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
折れ線グラフに大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
変数を緑色にする	f'\033[32m{value}\033[0m'
スラッシュで区切って二つのリストをプリントする	print(value, value2, sep='/')
カラムの未入力値を平均で埋める	ds.fillna(ds.mean())
四角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
ヒストグラムの色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
折れ線グラフの▽印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ミッドナイトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
棒グラフをインディゴ色として描画する	plt.bar(データ列x, データ列y, color='indigo')
集合から別の集合との共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
xの小数点以下'5'桁までの文字列にする	':.5f'.format(x)
nの十六進表記を使う	hex(n)
値を下線付きで出力する	print(f'\033[4m{value}\033[0m')
ベクトルの和	aArray + aArray2
データフレームを列名リストによって並べる	df.sort_values(by=column)
折れ線グラフの丸マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
文字列をバイト配列にする	bytearray(s)
トマト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
日付時刻データからn日を減算する	aDatetime - datetime.timedelta(days=n)
最大長nのキューをイテラブルから新規生成する	collections.deque(iterable, maxlen=n)
ダークシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
散布図に赤いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
２つのデータフレームを横にマージする	pd.merge(df, df2)
配列をn個に分割する	pd.cut(aArray, n)
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
線グラフの色をパウダーブルーに変更する	plt.plot(データ列x, データ列y, color='powderblue')
データ列の折れ線グラフを右三角印で描画する	plt.plot(データ列x, データ列y, marker='>')
文字列をパターンで分割する	re.split(pattern, s)
文字コードtextで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
折れ線グラフをミディアムオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データフレームの列をNaNも加えてダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
リストを箱ひげ図にする	plt.boxplot(データ列)
行列のスカラー倍	aArray * n
option: フォレストグリーン色を用いる	color = 'forestgreen'
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
カラムの正規分布に対する上下広がり	ds.skew()
文字列中にひとつでも非アルファベットが含まれるかどうか	any(not c.isalpha() for c in s)
データを最大最小を用いて標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
グラフに鉛直方向の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
データフレームの各グループごとの標準偏差	df.groupby(column).std()
option: グラフの色をオーキッドに指定する	color = 'orchid'
作画のカラーテーマを指定する	sns.set(pallete=パレット名)
日付データからn分減らす	aDate - datetime.timedelta(minutes=n)
option: シスル色を使用する	color = 'thistle'
データフレームの列が文字列で終わるデータを選択する	df[df[column].str.endswith(s)]
表データの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
グラフにx=0の破線を設定する	plt.axvline(x=0, linestyle='dashed')
データフレームを列の値によって集約して、各グループごとの最大値を求める	df.groupby(column).max()
グラフの目的を画面に設定する	sns.set(context='notebook')
パウダーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
棒グラフをペルー色を用いて描画する	plt.bar(データ列x, データ列y, color='peru')
ヒストグラムをグリーン色として描画する	plt.hist(データ列, color='green')
散布図の色をダークブルーにする	plt.scatter(データ列x, データ列y, color='darkblue')
データ列の欠損値を最小値に変更する	ds.fillna(ds.min())
データフレームのNaNを最小値で補う	df.fillna(df.min())
文字列内に大文字が含まれるかどうか調べる	any(c.isupper() for c in s)
データフレームから破壊的に重複するデータを削除する	df.drop_duplicates(inplace=True)
option: グラフの色をアリスブルーに変更する	color = 'aliceblue'
データフレームのカラムの一意な値の個数	df[col].nunique()
散布図のマーカーの太さを変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
データフレームの欠損値を前の行の値に設定する	df.fillna(method='ffill')
イテラブルと数列についての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
変数について数式の微分を計算する	sympy.diff(e, z)
リストとリストの散布図を描画してマーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
浮動小数点数を2乗する	x ** 2
カウンタを用いる	import collections
データフレームのカラムの分散を求める	df[col].var()
nがn2より小さいかどうか調べる	n < n2
サーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
列の名前一覧を使う	df.columns
option: バリーウッド色を用いる	color = 'burlywood'
ファイルが存在するかどうかテストする	os.path.exists(filepath)
データフレームのリスト列の文字列を未入力値に変換する	df[aList].replace(s, np.nan)
アクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
空のロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ロイヤルブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
ネイビー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
データフレームのカラムの値が欠損値か確認する	df[col].isna()
データフレームを各列と列の組み合わせ毎にグループ化して標準偏差を求める	df.groupby([column, column2], as_index=False).std()
縦棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームの列の未入力値をxに指定する	df[col].fillna(x)
線グラフの色をライトシアンに変更する	plt.plot(データ列x, データ列y, color='lightcyan')
xが一桁の正の整数か調べる	0 <= x <= 9
ヒストグラムの色をシアンに指定する	plt.hist(データ列, color='cyan')
線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームの列名一覧で指定された列を削除する	df.drop(columns, axis=1)
nとn2の和を計算する	n + n2
ファイルパスを絶対パスにする	os.path.abspath(filepath)
グループ列ごとにデータフレームの列を散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
2つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
等しい量になるように列をビン数nとして分割する	pd.qcut(ds, n)
自然数個のものからk個取り出したときの並べ方	math.perm(n, k)
青い実線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
日付時刻データの時間数を使う	aDatetime.hour
データフレームを各列と列の組み合わせ毎に集約して平均値を求める	df.groupby([column, column2], as_index=False).mean()
列'A'と列'B'をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
ファイル名がテキストファイル	filename.endswith('.txt')
データフレームを関数によってまとめた表を求める	df.groupby(関数)
折れ線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategray')
散布図の左三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
日付データが月曜日か	aDate.weekday() == 0
オプションでファイルを出力先にする	file = sys.open(filename, 'w')
n足すn2	n + n2
線グラフの色をライトゴールドロディイエローに指定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
線グラフをホワイトスモーク色を用いて描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
オリベドラブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
画面用にプロットを変更する	sns.set(context='notebook')
現在のモジュールを得る	sys.modules[__name__]
散布図に青い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
赤い四角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='r')
ベクトルの次元数を計算する	aArray.ndim
浮動小数点数の逆双曲線余弦	math.acosh(x)
文字列の大文字小文字を変換する	s.casefold()
文字列の中で大文字・小文字を無視して正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームのリスト列の未入力値をxで埋める	df[aList].fillna(x)
nの3乗	n ** 3
nが奇数か確認する	n % 2 == 1
青緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
赤いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
ベクトルの行ごとの平均	np.mean(aArray, axis=1)
散布図に黒い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
双方向キューのstart〜endの部分データ	collections.deque(itertools.islice(deq, start, end))
ヒストグラムをゴールド色を用いて描画する	plt.hist(データ列, color='gold')
日付データは何曜日か知る	aDate.weekday()
文字列が小文字か調べる	s.islower()
作画のグリッドを暗くする	sns.set(style='darkgrid')
データフレームをグループ化し、列に対し合計を求める	df.groupby(column)[column2].sum()
書式を引数としてargsをフォーマットする	formatText.format(*args)
イテラブルを出現回数して、カウンタを更新する	aCounter.update(iterable)
文字列の最後を求める	s[-1]
動作環境のバイトオーダを知る	sys.byteorder
折れ線グラフの線種を破線にする	plt.plot(データ列x, データ列y, linestyle='dashed')
イテラブルとリストについて散布図を描いてポイントマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
昇順に複数の列によってデータフレームを整列して更新する	df.sort_values(by=column, ascending=True, inplace=True)
白色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
横棒グラフをハニーデュー色として描画する	plt.barh(データ列x, データ列y, color='honeydew')
データ列の中に存在する文字列と文字列の合計を求める	ds.isin([value, value2]).sum()
現在処理中の例外を情報を調べる	sys.exc_info()
破線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ヒートマップでクラス分類の予測精度を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
option: 先頭の列をインデックスに変更する	index_col = 0
整数nを2進表記に変換する	bin(n)
セットの浅いコピーを生成する	aSet.copy()
データフレームのリストカラムを100の位で丸めて、整数にする	df[aList].round(-2).astype(int)
折れ線グラフをロイヤルブルー色を使って描画する	plt.plot(データ列x, データ列y, color='royalblue')
バイトオーダ	sys.byteorder
折れ線グラフの色をダークバイオレットにする	plt.plot(データ列x, データ列y, color='darkviolet')
散布図に△マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
文字列中の正規表現を新しい文字列として置き換える	re.sub(pattern, newsub, s)
折れ線グラフの丸マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
文字のASCIIコードを使う	ord(ch)
積み上げ棒グラフを描く	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームの指定された列の名前一覧の列のみ選択する	df[columns]
エラーなく部分文字列を文字列の接頭辞から取り除く	s.removeprefix(sub)
文字列をセパレータで区切って、文字列リストに変換する	s.split(sub)
文字列リストをsepを区切りにして一つの文字列にする	sep.join(aStringList)
黒い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='k')
散布図の三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
文字列の開始位置以降が部分文字列で始まるかどうか	s.startswith(sub, start)
マルーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
散布図のマーカーを菱形にする	plt.scatter(データ列x, データ列y, marker='D')
濃くカラーテーマをグラフの描画で使う	sns.set(pallete='deep')
データフレームの信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
数式のn階微分を算出する	sympy.diff(e, z, n)
データフレームを列によって集計して、平均値を算出する	df.groupby(column).mean()
ピーチパフ色としてヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
散布図をシーグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='seagreen')
本日が土曜日か確認する	datetime.datetime.today().weekday() == 5
データフレームのカラムを丸めて、整数にする	df[col].round().astype(int)
線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
文字列をセパレータで分割して文字列リストにする	s.split(sep)
実数の三乗を求める	x ** 3
データフレームを列によって並べ直して、行を振り直す	df.sort_values(columns).reset_index(drop=True)
ブルーバイオレット色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
複数の列でデータフレームをソートし、、更新する	df.sort_values(by=column, inplace=True)
option: グラフの色をオレンジレッドに指定する	color = 'orangered'
データ列と配列についての散布図にrgbの△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: 文字コードをUTF8に設定する	encoding = 'utf-8'
散布図をダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D')
マッピングの項目名一覧	list(aDict)
option: ネイビー色を用いる	color = 'navy'
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgray')
日付時刻データが日付時刻データと同時	aDatetime == aDatetime2
データフレームを'A'列で並べる	df.sort_values(by='A')
option: フォントの色をパパイヤウィップに変更する	color = 'papayawhip'
option: スラグレーを用いる	color = 'slategrey'
線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
複数のデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
ポイントマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='.')
棒グラフをサンディーブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='sandybrown')
組み合わせ	math.comb(n, k)
散布図をシスル色を使って描画する	plt.scatter(データ列x, データ列y, color='thistle')
option: ダークゴールデンロッドを使用する	color = 'darkgoldenrod'
二つの文字列をスラッシュで区切って出力する	print(value, value2, sep='/')
ホットピンク色としてヒストグラムを描画する	plt.hist(データ列, color='hotpink')
棒グラフをブラック色として描画する	plt.bar(データ列x, データ列y, color='black')
モードでデータ列の未入力値を埋める	ds.fillna(ds.mode().iloc[0])
スペクトル分解の準備をする	model = sklearn.decomposition.PCA(n_components=n)
カウンタの要素のカウント	aCounter[element]
列のNaNを最大値に設定する	ds.fillna(ds.max())
ふたつの関係が上位集合もしくは等しいかどうかテストする	aSet > aSet2
配列と数列について散布図を描画して、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
オブジェクトがバイト列クラスか調べる	isinstance(obj, bytes)
option: グラフの色をライトシアンに変更する	color = 'lightcyan'
既存の配列を元にして全要素が1の配列	np.ones_like(aArray)
列毎にデータフレームをグループ化して、各グループごとの個数を求める	df.groupby(column).count()
データフレームの中の列を四分位数でビン分割する	pd.qcut(df[col], 4)
値がセットに含まれるか	element in aSet
ブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
要素は集合のメンバーでないかどうか調べる	element not in aSet
線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
ヒストグラムをイエローグリーン色として描画する	plt.hist(データ列, color='yellowgreen')
乱数生成系列をnで初期化する	random.seed(n)
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
option: 行を自動的な連番に設定する	index_col = None
ネイビー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
option: フォントの色をライトグレーに設定する	color = 'lightgrey'
ミディアムターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='mediumturquoise')
文字列は片仮名かどうか調べる	('ァ' <= ch <= 'ン')
データフレームのリスト列の中に文字列が存在する	df[aList].isin([value])
データフレームの列の分散	df[col].var()
リストと数列についての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフの色を白に変更する	plt.plot(データ列x, データ列y, color='white')
横棒プロットを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
辞書のコピーを作成する	dict(aDict)
散布図の丸印を黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
データフレームを'A'列でで破壊的にソートする	df.sort_values(by='A', inplace=True)
最大長のある両端キュー	collections.deque(maxlen=n)
入力から2つの浮動小数数を読み込む	A, B = map(float, input().split())
option: パウダーブルーを使う	color = 'powderblue'
線グラフの色をミントクリームに指定する	plt.plot(データ列x, データ列y, color='mintcream')
ファイルからnという名前のシートを読み込む	pd.read_excel(filename, sheet_name=n)
インディアンレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
rgbの星マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ヒストグラムをライトグレー色を使って描画する	plt.hist(データ列, color='lightgrey')
右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームのNaNを平均値で置き換える	df.fillna(df.mean())
リストとリストの散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
散布図の▽印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ディムグレー色としてヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
行列の要素ごとの積を求める	np.multiply(aArray, aArray2)
プロットの描画で淡くパレットを使う	sns.set(pallete='muted')
散布図のマーカーを四角印にする	plt.scatter(データ列x, データ列y, marker='s')
ティール色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
散布図の▲印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
▽印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
データフレームの最初n行を見る	df.head(n)
今日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データフレームを100の位で四捨五入する	df.round(-2)
option: オリーブを使う	color = 'olive'
▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
カテゴリデータ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ベクトル間の要素ごとの最小公倍数を求める	np.lcm(aArray, aArray2)
カウンタ同士で積集合を求める	aCounter & aCounter2
横棒グラフをゴーストホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
データフレームの相関行列スピアマン順位相関係数でを求める	df.corr(method='spearman')
オブジェクトは浮動小数点数	isinstance(obj, float)
二つのデータフレームを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='A', right_on='B')
表データをインポートする	import pandas as pd
文字列の右端から不要な空白を除去する	s.rstrip()
配列とリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームをグループ化し、各列に対し最大値を計算する	df.groupby(column)[column2].max()
円グラフでデータ列の割合を作図する	plt.pie(データ列, startangle=90)
option: グラフの色をスプリンググリーンにする	color = 'springgreen'
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
値を緑色でプリントする	print(f'\033[32m{value}\033[0m')
タイムスタンプデータををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
線グラフの色をダークブルーに設定する	plt.plot(データ列x, データ列y, color='darkblue')
文字列中に部分文字列が含まれないか	sub not in s
項目名がマッピングに存在していない場合、要素を追加する	aDict.setdefault(key, element)
数値を黄色でプリントする	print(f'\033[33m{value}\033[0m')
パラメータが無限大に近づくときの数式の極限値を算出する	sympy.limit(e, z, oo)
ブール型のゼロ埋めされた配列を作成する	np.zeros(要素数, dtype=np.int32)
TSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
データ列を書式を用いて日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
rgbの星マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
二つの列で小さい順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True)
最大最小で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
option: レモンシフォン色を使用する	color = 'lemonchiffon'
実数が有限かどうか調べる	math.isfinite(x)
折れ線グラフに青い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
標準入力から1行だけ読み込む	sys.stdin.readline()
アルファベットの大文字を全部見る	string.ascii_uppercase
両端キューの先頭に列の要素を付け加える	deq.extendleft(iterable)
列の中に文字列と文字列がいくつあるかカウントする	ds.isin([value, value2]).sum()
カテゴリ列でグループ化して、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
折れ線グラフのバツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
書式で文字列をタイムスタンプに変換する	pd.to_datetime(s, format='%Y-%m-%d')
十六進数字を全て使う	string.hexdigits
紺色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
空のロジスティック回帰モデルを準備する	model = sklearn.linear_model.LogisticRegression()
星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
TSVファイルを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームのカラムをdatetime64型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
パレットトルコイズ色でヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
データ列の一意な値	ds.unique()
ベクトルのデータ型	aArray.dtype()
ファイルパスからストリームを読み込んで、fileとする	file = open(filepath)
option: バイナリ書き込み用に設定する	mode = 'wb'
辞書に要素を項目名として加える	aDict[key] = element
データ列のNaNをxに指定する	ds.fillna(x)
リストとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
サポートベクターマシンを用いて回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: 青緑色を使用する	color = 'teal'
グラフで利用可能な色の一覧	matplotlib.colors.cnames
二つの関係が上位集合もしくは等しいか調べる	aSet > aSet2
縦棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
行列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
リストと配列についての散布図に赤い▲マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
二進対数を求める	math.log2(x)
列を両端キューにする	collections.deque(iterable)
リストの値を小さい順に並べ変える	sorted(aList, reverse=False)
データフレームを二つの列でソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
折れ線グラフの右三角印を黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
クロス印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
黄緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
データフレームを複数の列の値でグループ化し、記述統計量を計算する	df.groupby(columns).describe()
option: 線の種類を一点鎖線に指定する	linestyle = 'dashbot'
分子と分母から有理数を準備する	fractions.Fraction(分子, 分母)
option: ダークグレーにグラフの色を設定する	color = 'darkgray'
データフレームのリスト列の中に日付データがあるかどうか調べる	df[aList].isin([value])
折れ線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
option: グラフの色をシエナに指定する	color = 'sienna'
散布図の左三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
棒グラフをダークスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
データフレームの列の空文字をドロップする	df[col].replace('', np.nan).dropna()
ベクトルの最小	np.min(aArray)
ライムグリーン色でヒストグラムを描画する	plt.hist(データ列, color='limegreen')
まとめてreplにデータフレームのリスト列を正規表現patternで置換する	df[aList].replace(pattern, repl, regex=True)
日付時刻データと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()
表の列で文字列が含まれる行を選択する	df[df[column].str.contains(s)]
プロットのタイトルを変更する	plt.title('グラフの名称')
option: プラム色を用いる	color = 'plum'
option: グラフの色をフクシアに変更する	color = 'fuchsia'
Pandasでフォーマットfmtでデータフレームのcollをタイムスタンプに変換する	pd.to_datetime(df[col], format=fmt)
インデント幅nでタプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
横棒グラフをアイボリー色を用いて描画する	plt.barh(データ列x, データ列y, color='ivory')
データフレームを複数の列によって大きい順に破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
データ列の折れ線グラフを左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<')
トマト色でヒストグラムを描画する	plt.hist(データ列, color='tomato')
リストのn番目からn2番目までの部分を取り出す	aList[n:n2]
ミディアムターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
散布図のダイアモンド印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
全要素を０で初期化した三２ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
データフレームの中に含まれるの合計を数える	df.isin([value]).sum()
ディープスカイブルーにヒストグラムの色を変更する	plt.hist(データ列, color='deepskyblue')
ファイルを開いて]、書き込みストリームを求める	open(filepath, mode='w')
文字列が全て空白文字かどうか	s.isspace()
n足すn2を算出する	n + n2
n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
文字列が全て識別子名か確認する	s.isidentifier()
ライム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
シーケンスを回数してカウンタを更新する	aCounter.update(iterable)
nが奇数か	n % 2 == 1
ハッシュ値	hash(x)
タンにヒストグラムの色を変更する	plt.hist(データ列, color='tan')
実数のハイパボリック・タンジェントの逆数	math.atanh(x)
列の各データ値の出現数を求める	ds.value_counts()
predicateFuncが真とならないリストの要素を求める	itertools.dropwhile(predicateFunc, iterable)
線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
option: 整数型を使用する	dtype = np.int
option: 色をラベンダーブラッシュに設定する	color = 'lavenderblush'
黄緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ケンドール順位相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
カウンタのそれぞれの値を出現回数だけ列挙する	aCounter.elements()
データフレームのリストカラムの基本統計量	df[aList].describe()
横棒グラフをライトコーラル色として描画する	plt.barh(データ列x, データ列y, color='lightcoral')
日本語が文字列に含まれるかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
折れ線グラフの線種を点線に変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
双方向キューの先頭に要素をつけ加える	deq.appendleft(element)
表データの列名を指定された列の名前一覧に置き換える	df.columns = columns
データフレームが正規分布からどれだけ、尖っているか確認する	df.skew()
データフレームを列によって集計して、それぞれのグループごとの最大値を算出する	df.groupby(column).max()
データフレームのリスト列の各列間の相関係数	df[aList].corr()
散布図のマーカーを菱形印にする	plt.scatter(データ列x, データ列y, marker='D')
ゼロ埋めした符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
マッピングをクリアする	aDict.clear()
辞書をソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
青い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
組の要素を昇順に並べる	sorted(aTuple, reverse=True)
データフレームのリストカラムのNaNを前の行の値で埋める	df[aList].fillna(method='ffill')
線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームを列によって並べ直して新しいインデックスを振り直す	df.sort_values(columns).reset_index()
リストとリストについての散布図に黒い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データ列の日を使う	ds.dt.day
数値を因数分解する	sympy.factor(e)
散布図を赤い丸マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームのリスト列のNaNをxで補う	df[aList].fillna(x)
データフレームを各列毎にグループ化し、、列の最小値を求める	df.groupby(column)[column2].min()
データフレームを'A'列によって並べて更新する	df.sort_values(by='A', inplace=True)
データ列が正規分布からどの程度歪んでいるか見る	ds.kurt()
空白によって文字列を区切って整数のリストにする	map(int, s.split())
縦棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
文字列内にひとつでもアスキー文字が含まれるか確認する	any(c.isascii() for c in s)
ミディアムスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
ファイルからnバイト読み込む	f.read(n)
整数nが集合のいづれか	n in aSet
データフレームの列と列を落とす	df.drop([column, column2], axis=1)
UNIX時間のデータフレームのcollからタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
文字列の先頭からタブを取り除く	s.lstrip('\t')
オリベドラブ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
データフレームを列で集約し、、それぞれのグループごとの分散を算出する	df.groupby(column).var()
xの小数点以下'1'桁の文字列にする	':.1f'.format(x)
JSONを使用する	import json
predicateFuncがtrueとならない列の要素	itertools.dropwhile(predicateFunc, iterable)
オプションで、標準エラーを用いる	file = sys.stderr
青い▽マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ヒストグラムの色をデピンクに指定する	plt.hist(データ列, color='deeppink')
リストの最後にリストを追加して拡張する	aList.extend(aList2)
散布図の色をダークレッドにする	plt.scatter(データ列x, データ列y, color='darkred')
折れ線グラフの色をフクシアにセットする	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームから重複した行をドロップして、入れ替える	df.drop_duplicates(inplace=True)
データフレームは正規分布からどれだけ、歪んでいるか見る	df.kurt()
折れ線グラフにクロス印を使う	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをフクシア色として描画する	plt.hist(データ列, color='fuchsia')
赤い菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
xとyの商と余りを同時に計算する	divmod(x, y)
データフレームの列の中に文字列と日付データがいくつあるか数える	df[col].isin([value, value2]).sum()
カウンタの値一覧	aCounter.keys()
ヒストグラムを描画して半透明化にする	plt.hist(データ列x, alpha=0.5)
真スーパーセット	aSet > aSet2
逆余弦を求める	math.acos(x)
文字列中に非大文字が含まれるかどうか調べる	any(not c.isupper() for c in s)
縦棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
配列をフラットにする	aArray.flatten()
リストとリストの散布図に赤い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
option: フォントの色をミントクリームに設定する	color = 'mintcream'
JSON形式のファイル入力を辞書に変換する	json.load(fin)
n個に等間隔でリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
year年month月day日hour時の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
nが負の整数か確認する	n < 0
枠なしの補足を付ける	plt.legend(frameon=False)
折れ線グラフの▼マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ダークカーキ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
文字列がリストに含まれる	element in aList
回帰分析をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
日付データからn日分減算する	aDate - datetime.timedelta(days=n)
散布図に赤い菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
文字列を下線付き化する	f'\033[4m{value}\033[0m'
リストを引数として展開して出力する	print(*aList)
ひとつでも非小文字が文字列中にある	any(not c.islower() for c in s)
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
year年month月day日hour時minute分のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
レモンシフォンにヒストグラムの色を変更する	plt.hist(データ列, color='lemonchiffon')
積み上げ横棒グラフを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
ダークマゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
要素は集合のメンバーでない	element not in aSet
データ列のエポック秒からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
データ列のNaNを平均値に変更する	ds.fillna(ds.mean())
文字列の左側から空白やタブを取り除く	s.lstrip()
リストとイテラブルの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
アクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='aquamarine')
ラインを色付きの実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
文字列が全て空白文字か確認する	s.isspace()
表データの列が文字列で始まらないデータを取り出す	df[not df[column].str.startswith(s)]
実数のk進対数を求める	math.log(x, k)
線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
二つのオブジェクトが等しい	obj == obj2
リストをマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
ヒストグラムを濃いシアン色で描画する	plt.hist(データ列, color='darkcyan')
横棒グラフをフローラルホワイト色として描画する	plt.barh(データ列x, データ列y, color='floralwhite')
折れ線グラフの右三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ASCII文字が文字列内にある	any(c.isascii() for c in s)
棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
データフレームを表示するとき、小数点以下の表示精度を指定する	pd.set_option('precision', n)
横棒グラフを耐火レンガ色を使って描画する	plt.barh(データ列x, データ列y, color='firebrick')
option: 濃い青にフォントの色をする	color = 'darkblue'
データフレームを各列毎にグループ化し、列の平均値を計算する	df.groupby(column)[column2].mean()
ヒストグラムの色をペルーに指定する	plt.hist(データ列, color='peru')
プログラムのファイルの名前を確める	sys.argv[0]
EUCでファイルパスを書き込み用に開く]	open(filepath, mode='w', encoding='euc_jp')
グリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
データフレームをまとめて丸める	df.round()
棒グラフをデピンク色を使って描画する	plt.bar(データ列x, データ列y, color='deeppink')
option: フォントの色をミスティローズに変更する	color = 'mistyrose'
散布図の▽印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
リストとリストについての散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
シルバー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
プロットを暗くする	sns.set(pallete='dark')
nがn2の倍数	n % n2 == 0
ヒストグラムの色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
タプルを小さい方からソートする	sorted(aTuple, reverse=True)
横棒グラフをダークスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
列をリストとして抽出する	df[column].values.tolist()
線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
タイムスタンプデータを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
データフレームを各列毎にグループ化し、文字列というグループの個数を計算する	df.groupby(column).size()[s]
２つの変数を改行なしにプリントする	print(value, value2, end='')
数式のn階微分を求める	sympy.diff(e, z, n)
小数点数の逆双曲線余弦	math.acosh(x)
改行せず二つのリストをプリントする	print(value, value2, end='')
前もって正規表現をコンパイルする	re.compile(pattern)
オブジェクトが数値か判定する	isinstance(obj, (int,float))
データフレームを表示するとき、ヘッダー行を左寄せに変更する	pd.set_option('colheader_justify', 'left')
文字列はリストの要素か確認する	element in aList
文字列の先頭の空白を取り除く	s.lstrip()
パレットトルコイズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
データフレームのリスト列の上位25%	df[aList].quantile(0.25)
フクシア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
列'A'と列'B'をキーとして二つの表を全ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
option: ダークグリーンを使う	color = 'darkgreen'
線グラフをスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='skyblue')
本日の曜日を整数で求める	datetime.datetime.today().weekday()
文字列の先頭で正規表現に複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
折れ線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
シスル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
部分文字列で文字列の開始位置以降が開始するか調べる	s.startswith(sub, start)
ミディアムスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumslateblue')
初めてのプログラムを書く	print('Hello World')
現在が日曜日か調べる	datetime.datetime.today().weekday() == 6
データ列を分割する	pd.cut(ds, aList)
option: ハニーデューに色を設定する	color = 'honeydew'
列のNaNを前の値で埋める	ds.fillna(method='ffill')
プログラムのファイル名を知る	sys.argv[0]
赤い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームを'A'列を用いてソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
青紫色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
散布図をライトコーラル色として描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
変数を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
回帰モデルの予測値と目的変数を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
パールバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
やわらかい青色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
デピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
上位集合かどうか調べる	aSet.issuperset(aSet2)
散布図に左三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='<')
線グラフの色をペールグリーンにセットする	plt.plot(データ列x, データ列y, color='palegreen')
プラットフォームの整数の最大値	sys.maxsize
イテラブルに列を続けたイテラブル	itertools.chain(iterable, iterable2)
プロットをプロットする	import matplotlib.pyplot as plt
option: ライム色を用いる	color = 'lime'
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
option: ローングリーンを用いる	color = 'lawngreen'
配列をイミュータブルなセットに変換する	frozenset(iterable)
option: バイオレットにフォントの色を変更する	color = 'violet'
淡いピンク色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
フォレストグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
ファイルパスから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
文字列をエラーを無視してバイト列にする	s.encode(errors='ignore')
散布図をミディアムシアグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ホールドアウト法を使用する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
option: フォントの色をタンにする	color = 'tan'
データフレームの列がxより大きいデータを選択する	df[df[column] > x]
折れ線グラフの三角印の大きさを指定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
要素がセットの要素に含まれない	element not in aSet
散布図をオレンジ色を使って描画する	plt.scatter(データ列x, データ列y, color='orange')
stringモジュールをインポートする	import string
十六進数文字列を整数にする	int(s, 16)
データフレームのデータ型の一覧を求める	df.dtypes
モデルのR2を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
カラーバーを水平に描画する	plt.colorbar(orientation='horizontal')
タプルの要素を小さい順に並べ変える	sorted(aTuple, reverse=False)
option: グラフの色を珊瑚に設定する	color = 'coral'
リストと数列について散布図を描画し、、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
回数を制限して文字列を置換する	s.replace(sub, newsub, n)
rgbの菱形マーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: フォントの色をオリベドラブに設定する	color = 'olivedrab'
既存の行列をベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
データフレームのリスト列の25パーセンタイルを求める	df[aList].quantile(0.25)
組の長さを調べる	len(aTuple)
デック中の要素のインデックス	deq.index(element)
縦棒グラフをハニーデュー色を使って描画する	plt.bar(データ列x, データ列y, color='honeydew')
棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
文字列を分割する	s.partition(sep)
散布図をミディアムスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
データ列が何時か確認する	ds.dt.hour
データ列の変化を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
データフレームのリストカラムの欠損値を平均に設定する	df[aList].fillna(df[aList].mean())
option: グラフの色をスレートブルーに変更する	color = 'slateblue'
空の回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
マッピングのキーを列挙する	list(aDict)
イテラブルを文字列としてつなげる	''.join(map(str, iterable))
プラットフォームの符号付き整数の最大値を調べる	sys.maxsize
破壊的に昇順に'A'列でデータフレームをソートする	df.sort_values(by='A', ascending=True, inplace=True)
カウンタの最頻出の項目	aCounter.most_common()[0]
データ列を複数並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
実数から整数を引く	x - y
パレットトルコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
横棒グラフをライトゴールドロディイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
昇順にデータフレームを破壊的に列名リストで並べる	df.sort_values(by=column, ascending=True, inplace=True)
option: ライトスレイグレーを用いる	color = 'lightslategray'
数値をシアンで出力する	print(f'\033[36m{value}\033[0m')
行列の分散を使う	np.var(aArray)
青い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
アンティークホワイト色を用いてヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
黒いポイントマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='k')
縦棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
文字列をISO8601形式でタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
散布図をパパイヤウィップ色を用いて描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
線グラフの色をラベンダーに指定する	plt.plot(データ列x, データ列y, color='lavender')
文字列を最後の部分文字列によって二分する	s.rpartition(sub)
折れ線グラフの丸マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
文字列の中の正規表現による全てのマッチを見る	re.findall(pattern, s)
平均値でデータ列のNaNを埋める	ds.fillna(ds.mean())
データ列を100の位で丸めて整数型にする	ds.round(-2).astype(int)
データ列の推移を半透明の一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームから指定された列を取り出す	df[[column]]
▼印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
リストの値を関数に適用した結果でソートする	sorted(aList, key=func)
nをn2で割った値の切り上げを求める	(n + n2 - 1) // n2
option: シスルにグラフの色を変更する	color = 'thistle'
タイムスタンプデータを数値にする	aDatetime.timestamp()
2つのオブジェクトは等しいか	obj == obj2
リストと数列について散布図を描き、、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
ミディアムブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
棒グラフをシルバー色として描画する	plt.bar(データ列x, データ列y, color='silver')
データフレームをグループ化し、それぞれの列に対し平均値を算出する	df.groupby(column)[column2].mean()
散布図をライトスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
横棒グラフをデピンク色として描画する	plt.barh(データ列x, データ列y, color='deeppink')
淡い茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
データ列を用いる	import pandas as pd
ダークサーモンにヒストグラムの色を変更する	plt.hist(データ列, color='darksalmon')
デックのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
option: 事前に説明変数を正規化する	normalize = True
option: 印を右三角に変更する	marker = '>'
データフレームが正規分布からどの程度尖っているか調べる	df.skew()
縦棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
データフレームの中の列を等量でビン数nでビニングする	pd.qcut(df[col], n)
ブランチドアーモンド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
データ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)

ASCII限定として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
nは整数と等しいかどうか調べる	整数 == 整数2
ベクトルが何のデータ型か調べる	aArray.dtype()
にバイオリン図でデータフレームのカラムを可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
エクセルから全てのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
全要素が初期値の行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
ライトイエロー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
データフレームを表示するとき、表示可能な最大行数をnにセットする	pd.set_option('display.max_rows', n)
リストのn番目の要素を消す	del リスト[n]
菱形マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
文字列の両端から空白を取り除く	文字列.strip('\t')
データフレームをに箱ひげ図としてプロットする	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームの値がNaNか	df.isna()
日付データの月	aDate.month
シーケンスとイテラブルをつなぐ	itertools.chain(iterable, iterable2)
リストと配列について散布図を描画して、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
文字列中にひとつでも非アルファベットが含まれる	any(not c.isalpha() for c in 文字列)
リストとデータ列についての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームの指定した列のNaNを直前の値に変更する	df['列A'].fillna(method='ffill')
全要素を0で初期化した行列	np.zeros(要素数)
折れ線グラフの下三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
青いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
バイナリ書き込みモードとしてファイルをオープンして]、fとする	f = open(filepath, mode='wb')
データシリーズの平均値を求める	ds.mean()
データフレームの複数の列を並べて箱髭図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
多次元尺度構成法として文字列次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
余弦の逆数	x = 0.33<nl>math.acos(x)
表データのあるカラムは何日か見る	df['列A'].dt.day
文字列を右からコロンで分割する	文字列.rsplit(':')
本日は何曜日か知る	datetime.datetime.today().weekday()
切り捨てながら変数の値を整数分の1にする	変数 //= 整数
option: ダークスレートブルー色を使用する	color = 'darkslateblue'
図の縦横をセットする	plt.figure(figsize=(横幅, 高さ))
ミディアムシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
淡い茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
原点から点までの距離	math.hypot(x, y)
option: ディープスカイブルー色を用いる	color = 'deepskyblue'
カラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
青い▽マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
淡い茶色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
セットをインターセクションだけに更新する	セット.intersection_update(セット2)
簡単な説明の位置を(x,y)に設定する	plt.legend(loc=(x, y))
リストと配列の散布図に赤い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
オブジェクトは辞書クラスか	dict = int<nl>isinstance(obj, dict)
ダークグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkgray')
タイムスタンプデータからn時間分、減らす	aDatetime - datetime.timedelta(hours=n)
リストの要素を文字列として、ある文字列で連結する	文字列.join(map(str, リスト))
配列とイテラブルについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
リストとデータ列について散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
option: 色をアイボリーに指定する	color = 'ivory'
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
グラフを論文用にする	sns.set(context='paper')
ある列リストのみ、データフレームの重複を確認する	df.duplicated(subset=['列A', '列B'])
option: グラフの色をプラムに変更する	color = 'plum'
データフレームから重複したデータを残さずドロップする	df.drop_duplicates(keep=False)
データ列とリストの散布図を描画し、、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
リストに列を続ける	itertools.chain(iterable, iterable2)
マッピングの項目の一覧	list(辞書.values())
ライトサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
縦棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
タイムスタンプデータが日付時刻データより早いか	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
option: フォントの色をフォレストグリーンに変更する	color = 'forestgreen'
ヒストグラムをミスティローズ色として描画する	plt.hist(データ列, color='mistyrose')
option: 色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
棒グラフをオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orchid')
列名一覧をデータ型でフィルタする	df.select_dtypes(型).columns
データフレームを二つの列によって破壊的に降順に並べる	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
散布図のダイアモンドマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
option: グラフの色をオレンジに指定する	color = 'orange'
option: 色を青緑に設定する	color = 'turquoise'
タプルが空でない	len(タプル) != 0
散布図をカデットブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
グラフに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
ヒストグラムをパパイヤウィップ色として描画する	plt.hist(データ列, color='papayawhip')
モデルの正確さを算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
option: フォントの色をライトコーラルに変更する	color = 'lightcoral'
散布図をバツ印を使って描画する	plt.scatter(データ列x, データ列y, marker='x')
ファイルを文字列の示すエンコーディングを用いて開く]	s = 'utf-8'<nl>open(filepath, encoding=s)
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
オブジェクトが非同期ジェネレータか	inspect.isasyncgen(オブジェクト)
option: ダイアモンドマーカーを用いる	marker = 'D'
バイナリ書き込みモードでファイルを開いて]、fとする	f = open(filepath, mode='wb')
散布図をロイヤルブルー色として描画する	plt.scatter(データ列x, データ列y, color='royalblue')
指定した列のカテゴリで集計し、各平均値を計算する	df.groupby('列A').mean()
option: フォントの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
xについて偏微分を行う	sympy.diff(数式, [|変数]x)
積み上げ棒グラフを描く	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
多次元データを特異値分解として項次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
散布図にrgbの▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リストの最初	リスト[0]
文字列がセットのメンバーでない	文字列 not in セット
データフレームをグループ化しある列に対し個数を求める	df.groupby('列A')['列B'].count()
ダークシアン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
赤色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
リストをJSON形式でファイル出力に出力する	json.dump(リスト, ファイル出力, ensure_ascii=False)
折れ線グラフの色をネイビーにする	plt.plot(データ列x, データ列y, color='navy')
オールドレース色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
オリーブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
option: 青緑色を用いる	color = 'teal'
セットを更新不能に変換する	frozenset(セット)
折れ線グラフの色をオレンジにする	plt.plot(データ列x, データ列y, color='orange')
データフレームのカラムをグループ化して、ヒストグラムとして描画する	sns.histplot(df, x='列名', hue='カテゴリ名')
散布図をバツマーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='x')
列名を指定してデータフレームを内部結合する	pd.merge(df, df2, on='列A', how='inner')
正則化付き線形回帰モデルを新規作成する	model = sklearn.linear_model.ElasticNet()
リストの推移を折れ線プロットで可視化する	plt.plot(range(len(データ列)), データ列)
折れ線グラフの色をカーキにセットする	plt.plot(データ列x, データ列y, color='khaki')
文字列がタイトルケースか調べる	文字列.istitle()
2つの列でグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
二次元リストの転置行列を計算する	[list(x) for x in list(zip(*aList))]
option: 色をダークグレーに設定する	color = 'darkgrey'
ライトグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
新しい多重集合をイテラブルから用意する	collections.Counter(iterable)
イエローグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='yellowgreen')
データフレームの選択したカラムのNaNを平均値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
グラフを色差別なくする	sns.set(pallete='colorblind')
データフレームから重複した行を残さず取り除く	df.drop_duplicates(keep=False)
イテラブルとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ヒストグラムの色を黄緑に設定する	plt.hist(データ列, color='chartreuse')
x座標の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
折れ線グラフの四角印の大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
option: グラフの色をコーラルにする	color = 'coral'
3変数の最小値	min(x, y, z)
横棒グラフをライトサーモン色として描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
クラス分類をRANSACとしてする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
カウンタ同士でインターセクションを求める	aCounter & aCounter2
確率的勾配降下でクラス分類をする	model = sklearn.linear_model.SGDClassifier()
縦棒グラフの色をダークブルーにする	plt.bar(データ列x, データ列y, color='darkblue')
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategray'
キューの中に要素は存在するか調べる	要素 in 両端キュー
option: 貝殻にグラフの色を設定する	color = 'seashell'
option: グラフの色をグレーに指定する	color = 'grey'
日付時刻データと日付時刻データの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()//60
リストとリストについて散布図を描画し、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
線グラフの色をスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='springgreen')
データシリーズの中にある文字列と日付データの合計を数える	ds.isin([value, value2]).sum()
横棒グラフをシャルトリューズ色を用いて描画する	plt.barh(データ列x, データ列y, color='chartreuse')
棒グラフをローングリーン色として描画する	plt.bar(データ列x, データ列y, color='lawngreen')
ベクトルを2次元1行に変形する	aArray.reshape(1, -1)
xの小数点以下'2'桁までプリントする	':.2f' = ':.3f'<nl>print(':.2f'.format(x))
option: ダークサーモンを使用する	color = 'darksalmon'
データフレームのあるカラムが何年か知る	df['列A'].dt.year
Pandasのバージョンを出力する	print(pd.__version__)
棒グラフをローングリーン色を使って描画する	plt.bar(データ列x, データ列y, color='lawngreen')
散布図をシャルトリューズ色として描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
オブジェクトがコルーチンかどうか	inspect.iscoroutine(オブジェクト)
横棒グラフをディムグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='dimgray')
データ列を箱ひげ図で描く	plt.boxplot(データ列)
文字列の先頭でパターンにケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
データフレームの選択したカラムの中にいくつ日付データが存在するかカウントする	df[['列A', '列B']].isin([value]).sum()
折れ線グラフに赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ベクトルの値を変更する	aArray[行番号, 列番号] = 指定の値
散布図に上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
散布図に黒い四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c='k')
自然数個からk個取り出した場合の順列の総数を計算する	math.perm(n, k)
文字列の右端からタブを除去する	文字列.rstrip('\t')
ベクトルの平均値	np.mean(aArray)
現在をISO形式の文字列にする	datetime.datetime.today().isoformat()
横棒グラフをアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='aquamarine')
option: スプリンググリーン色を使用する	color = 'springgreen'
昇順にリストをソートする	sorted(リスト, reverse=False)
データフレームの全カラムの相関を描く	sns.pairplot(df)
ゼロ埋めされた整数型のベクトル	np.zeros(要素数, dtype=np.int)
縦棒グラフをチョコレート色として描画する	plt.bar(データ列x, データ列y, color='chocolate')
データフレームをグループ化し、分散を求める	df.groupby('列A').var()
ヒストグラムをミディアムスレートブルー色を用いて描画する	plt.hist(データ列, color='mediumslateblue')
エポック秒をタイムスタンプに変換する	datetime.datetime.fromtimestamp(timestamp)
縦棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
データフレームの一部のカラムの標準偏差	df[['列A', '列B']].std()
ヒストグラムの色をアイボリーにする	plt.hist(データ列, color='ivory')
データフレームを全部、小数点以下n桁で丸める	df.round(n)
両端キューが空でないかどうか調べる	len(両端キュー) != 0
ラベンダー色でヒストグラムを描画する	plt.hist(データ列, color='lavender')
データを最大値と最小値を用いて正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
プラットホームがウィンドウズ	sys.platform.startswith('win32')
辞書を浅く複製する	辞書.copy()
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
列の各データは何回出現するか見る	ds.value_counts()
改行のみプリントする	print()
耐火レンガ色としてヒストグラムを描画する	plt.hist(データ列, color='firebrick')
データをインデントを指定してJSONフォーマットにエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
非数値データを連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
オブジェクトの大きさを知る	sys.getsizeof(オブジェクト)
option: 下三角マーカーを用いる	marker = 'v'
散布図に赤い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
データフレームの選択したカラムの中にと文字列があるかどうか調べる	df[['列A', '列B']].isin([value, value2])
ファイルパスのディレクトリ名	os.path.dirname(filepath)
データフレームの指定した列の平均値を求める	df['列A'].mean()
カテゴリ別で色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
縦棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
option: マーカーの太さを指定する	markeredgewidth = 2.5
配列とデータ列について散布図をプロットし、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
散布図をデピンク色として描画する	plt.scatter(データ列x, データ列y, color='deeppink')
多次元データをMSDで項次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
マップに辞書2の項目を追加する	辞書.update(辞書2)
配列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
辞書に辞書2のエントリを追加する	辞書.update(辞書2)
指定したカラムの尖度	df['列A'].skew()
散布図をピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='pink')
リストのn番目以降の要素を得る	リスト[n:]
部分分数として数式を展開する	sympy.apart(数式)
行列を2次元1行に変形する	aArray.reshape(1, -1)
データフレームを二つの列によって昇順にソートし、、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
option: コーラル色を用いる	color = 'coral'
棒グラフをスノー色として描画する	plt.bar(データ列x, データ列y, color='snow')
ヒストグラムの色を淡い茶色にセットする	plt.hist(データ列, color='tan')
数値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(x)
option: ターコイズに色を設定する	color = 'turquoise'
整数同士のビット和	整数 | 整数2
散布図に黒い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='k')
プロットの用途を画面に設定する	sns.set(context='notebook')
列名を指定して２つのデータフレームを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
折れ線グラフをダークグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgreen')
スレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
文字列を最後のセパレータで二分し、、前半を使う	文字列.rpartition(セパレータ)[0]
日付時刻データが日曜日か確認する	aDatetime.weekday() == 6
データフレームのあるカラムの未入力値を中央値で補う	df['列A'].fillna(df['列A'].median())
option: ポイント印を用いる	marker = '.'
ダイアモンドマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D')
MeanSquaredErrorを計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
カンマで文字列を二つに分けて、残りを見る	文字列.partition(',')[-1]
その平均でデータシリーズのNaNを置き換える	ds.fillna(ds.mean())
大文字列	string.ascii_uppercase
データフレームのあるカラムの欠損値をモードで補う	df['列A'].fillna(df['列A'].mode().iloc[0])
最大最小値を用いてデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: アイボリーにグラフの色を設定する	color = 'ivory'
散布図の右三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
データフレームを散布図でプロット化し、、カテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
空のロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
ホットピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
オブジェクトはバイト列クラス	bytes = int<nl>isinstance(obj, bytes)
16進数文字列を整数に変換する	int(文字列, 16)
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
yが0に近づくときの極限値を計算する	sympy.limit(数式, y, 0)
散布図のポイント印を赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
文字列が全てアルファベットかどうか調べる	文字列.isalpha()
折れ線グラフを半透明の破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームのあるカラムの年を使う	df['列A'].dt.year
整数2がnより大きく、かつ、n3より小さいか調べる	整数 < 整数2 and 整数2 < n3
option: サーモン色を用いる	color = 'salmon'
データフレームの末尾5行を選択する	df.tail(5)
xを赤色で表示する	print(f'\033[31m{x}\033[0m')
青い丸印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
指定した列のみデータフレームの重複を見る	df.duplicated(subset='列A')
rgbの大バツマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
四分位数ごとに配列をビン分割する	pd.qcut(aArray, 4)
データフレームを2つの列の値で集約する	df.groupby(['列A', '列B'])
nの無限のイテラブルを得る	itertools.repeat(n)
データフレームの選択したカラムの未入力値を中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
カレント作業ディレクトリを使う	os.getcwd()
ブルーバイオレット色としてヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
データ列の推移を赤い実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
行列積を算出する	np.matmul(aArray, aArray2)
データシリーズの尖度を求める	ds.skew()
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
二つの計算結果を改行なしに出力する	print(式, 式, end='')
リストの個数を知る	len(リスト)
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='gray')
勾配ブースティングを用いてクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
データシリーズの中に文字列と文字列があるか確認する	ds.isin([value, value2])
ビスク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
線グラフをミディアムブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームの選択した列の歪度	df[['列A', '列B']].kurt()
折れ線グラフの色をダークグリーンに変更する	plt.plot(データ列x, データ列y, color='darkgreen')
棒グラフをサドルブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
最後に追加した値をマップからポップする	辞書.popitem()
折れ線グラフの色をホワイトスモークに指定する	plt.plot(データ列x, データ列y, color='whitesmoke')
データシリーズの値が未入力値か調べる	ds.isna()
floatの最大値	sys.float_info.max
データフレームのあるカラムの値がxより少ないデータを選択する	df[df['列A'] < x]
リストをビン数nで分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
ロージーブラウン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
マッピングのキーを列挙する	辞書.keys()
データフレームのインデックスの名前を一度に変更する	df.rename(index={x: y})
新しい勾配ブースティング分類木を作成する	model = sklearn.ensemble.GradientBoostingClassifier()
あるカラムの文字列が正規表現文字列にマッチしない行を抽出する	df[~df['列A'].str.match(正規表現)]
リッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
文字列中の正規表現を新しい文字列として置き換える	re.sub(pattern, newsub, s)
シスル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
散布図に赤いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='r')
シアン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
指定した列の値で集計し、それぞれの平均値を求める	df.groupby('列A').mean()
赤い下三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
正規分布によるパーセント・ポイント関数を使用する	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
横棒グラフをダークマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
ヒストグラムをフォレストグリーン色を用いて描画する	plt.hist(データ列, color='forestgreen')
スプリンググリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
クラス分類の再現率を算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ベクトルの標準偏差を算出する	np.std(aArray)
論文にグラフの用途を設定する	sns.set(context='paper')
星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
ブラック色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
データシリーズをdatetime64型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
文字列内に日本語が使われているかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
赤い大バツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='X', c='r')
時刻を使う	import datetime
浮動小数点数の二乗を求める	x ** 2
縦棒プロットを描画する	plt.bar(ラベル列, データ列)
文字列を最後のカンマで二つに分け、、前半を求める	文字列.rpartition(',')[0]
配列と配列についての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
小数点数以下の最大の整数	math.floor(x)
データフレームをグループ化しある列に対し平均値を算出する	df.groupby('列A')['列B'].mean()
実数の複素数を求める	complex(x)
1行から二つの実数を読む	A, B = map(float, input().split())
表データを関数の値でグループ化し、要約統計量を求める	df.groupby(関数).describe()
ミッドナイトブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
リストとリストの散布図を描画し、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
リストをnから番号付けする	enumerate(リスト, start=n)
データフレームからランダムに一行抽出する	df.sample()
option: マルーン色を用いる	color = 'maroon'
option: ダークオレンジ色を用いる	color = 'darkorange'
整数を両端キューから取り除く	両端キュー.remove(整数)
option: リネン色を使用する	color = 'linen'
データ列を二つ並べてボックスチャートにする	plt.boxplot([データ列, データ列])
option: グラフの色を深紅に設定する	color = 'crimson'
option: グラフの色を暗い赤に変更する	color = 'darkred'
option: 文字列をプリントの終端に用いる	end = 文字列
実数の余弦を算出する	math.cos(x)
表データを並べて上位を取り出す	df.sort_values('キーとなる列').head(n)
文字列を走査し正規表現にケースを無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
２つ並べて箱ひげ図を描く	plt.boxplot([データ列, データ列])
ミディアムスレートブルーにヒストグラムの色を変更する	plt.hist(データ列, color='mediumslateblue')
データフレームのカラムのKurtosisを求める	scipy.stats.kurtosis(df['列A'], bias=False)
日付データの曜日を求める	aDate.weekday()
option: 色をダークスラテグレーに設定する	color = 'darkslategray'
option: シエナにグラフの色を設定する	color = 'sienna'
データフレームを二つの列の値で分類して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
ヒストグラムをレモンシフォン色を用いて描画する	plt.hist(データ列, color='lemonchiffon')
文字列を走査し正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
円グラフのパーセントを表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
option: ダークバイオレットに色を変更する	color = 'darkviolet'
データフレームの指定のカラムに重複があれば、ドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
ある列の文字列に部分文字列が存在するデータを選ぶ	df[df['列A'].str.contains(部分文字列)]
JSONファイルファイル名がかどうか調べる	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
xの小数点以下'5'桁までを出力する	':.5f' = ':.3f'<nl>print(':.5f'.format(x))
平均でデータシリーズの未入力値を補う	ds.fillna(ds.mean())
文字列中にひとつでも非空白がある	any(not c.isspace() for c in 文字列)
あるカラムの文字列が正規表現にマッチするデータを取り出す	df[df['列A'].str.match(正規表現)]
散布図に黒いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
今日の日数を使う	datetime.datetime.today().day
破壊的にデータフレームを小さい順に2つのカラムをキーにしてソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
折れ線グラフをスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='skyblue')
option: グラフの色をライトグリーンにする	color = 'lightgreen'
指定したカラムの欠損値を平均値で埋める	df['列A'].fillna(df['列A'].mean())
空白区切りでリストの各要素を表示する	print(*リスト)
マップの値もコピーする	{k: copy.copy(v) for k, v in 辞書.items()}
赤い三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームのある列は正規分布からどの程度尖っているか調べる	df['列A'].skew()
赤い一点鎖線を用いてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームの選択した列の相関行列をケンドール相関係数で求める	df[['列A', '列B']].corr(method='kendall')
横棒グラフをライトゴールドロディイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
２つのリストからマップ	dict(zip(リスト, リスト2))
データ列をボックスチャートにする	plt.boxplot(データ列)
折れ線グラフの四角印の線幅を指定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
正規表現を複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
指定したカラムの欠損値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
配列の値が正規分布にしたがって発生する累積確率を使う	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
option: フォントの色をシスルに指定する	color = 'thistle'
長さの制限した両端キューを数列から作る	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
データフレームの一部のカラムの空文字を欠損値に変換しドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
散布図の印をポイントにする	plt.scatter(データ列x, データ列y, marker='.')
数式の積分を算出する	sympy.integrate(数式)
ファイルをオープンして]、書き込みストリームを求める	'w' = 'a'<nl>open(filepath, mode='w')
実数が非数	math.isnan(x)
紺碧色で散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
両端キューの先頭に文字列を入れる	両端キュー.appendleft(文字列)
要素を両端キューの右から取り出す	両端キュー.pop()
ダークグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkgrey')
KNNとして回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
が名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ファイルパスの絶対パスを使う	os.path.abspath(filepath)
正規分布の確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
ベクトルの累積和	np.cumsum(aArray)
データフレームの選択したカラムの値を正規表現patternで一度にreplに変更する	df[['列A', '列B']].replace(pattern, repl, regex=True)
赤色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
文字列を最後のコロンで二分し、、後半を使う	文字列.rpartition(':')[-1]
切り上げて整数にする	math.ceil(x)
xが無限大に近づくとき、数式の極限値を求める	sympy.limit(数式, [|変数]x, oo)
セットから要素を除去する	セット.remove(要素)
データフレームのNaNをドロップしてみる	df.dropna()
文字列は文字列より辞書順で前	文字列 < 文字列2
データフレームのstart行目からend行目までを選択する	df[start:end]
データフレームの指定したカラムを100の位で四捨五入する	df['列A'].round(-2)
線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
シスル色でヒストグラムを描画する	plt.hist(データ列, color='thistle')
option: 先頭の列を行に指定する	index_col = 0
小麦色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
option: ゴーストホワイトを用いる	color = 'ghostwhite'
データフレームの選択したカラムの値を正規表現でまとめてreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
列をカテゴリデータにする	ds.astype(object)
相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
データフレームの選択したカラムを1000の位で四捨五入する	df[['列A', '列B']].round(-3)
二変数の最も大きい値を求める	max(x, y)
セットを差分だけに更新する	セット.difference_update(セット2)
データフレームの一部の列の文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
整数がnで割り切れるかどうか	整数 % n == 0
文字列の右端から文字を取り除く	文字列.rstrip(文字)
'A'列の値がxに等しい行を取り出す	df[df['列A'] == x]
散布図をフクシア色を使って描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
ある列によってデータフレームをソートして、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
ミディアムターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
グラフの使途を論文に設定する	sns.set(context='paper')
折れ線グラフの色をダークゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: ミディアムアクアマリン色を使用する	color = 'mediumaquamarine'
ある列の文字列に部分文字列がない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
配列間のケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
表データのあるカラムを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
文字列がパターンにマッチさせる	re.match(pattern, s)
ホワイトスモーク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
折れ線グラフに左三角マーカーを加える	plt.plot(データ列x, データ列y, marker='<')
散布図のマーカーを△にする	plt.scatter(データ列x, データ列y, marker='^')
xを浮動小数点数に変換する	float(x)
実数のルート	math.sqrt(x)
データフレームをある列によって大きい順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
カウンタをゼロにする	aCounter.clear()
データフレームの選択したカラムにおいてどの値が頻出か調べる	df[['列A', '列B']].mode()
線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームをグループ化しある列に対し標準偏差を計算する	df.groupby('列A')['列B'].std()
文字列を最初のコロンで二分割して前の方を使う	文字列.partition(':')[0]
折れ線グラフの色をミントクリームに変更する	plt.plot(データ列x, データ列y, color='mintcream')
option: カラムの名前をリストで指定する	names = 列名リスト
文字列中にひとつでも空白が含まれるかどうか調べる	any(c.isspace() for c in 文字列)
二つのデータ列の残差を散布図として描く	sns.residplot(x=データ列, y=データ列)
散布図を赤い下三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
ヒストグラムでデータフレームの列をプロットする	plt.hist(df[column])
散布図を黒い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームを並べ、、行を振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
２つのデータフレームを横方向にマージする	pd.merge(df, df2)
文字列の右端からある文字を消す	文字列.rstrip(文字)
浮動小数点数で実数を割って、切り捨てる	x // y
縦棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
リストと配列についての散布図に赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: 色をダークオレンジに指定する	color = 'darkorange'
option: どの行もヘッダに設定しない	header = None
双方向キュー中の要素を数える	両端キュー.count(要素)
データシリーズは何秒か見る	ds.dt.second
データフレームの一部のカラムの中にある文字列の合計を求める	df[['列A', '列B']].isin([value]).sum()
多次元データを多次元尺度構成法を用いて整数次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
ロバストな単回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
縦棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
アルファベットの小文字を全て求める	string.ascii_lowercase
リストを出現回数してカウンタから引く	aCounter.subtract(iterable)
option: フォントの色をゴールドに設定する	color = 'gold'
あるカラムがどの程度、正規分布から歪んでいるか見る	df['列A'].kurt()
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
プロットにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
２つの計算結果を順にプリントする	print(式, 式)
線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
文字列を最後のセパレータで二分して、前半を見る	文字列.rpartition(セパレータ)[0]
横棒グラフをプロットして、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
カレント作業ディレクトリ	os.getcwd()
ファイルパスをバイナリモードとして開く]	'rb' = 'a'<nl>open(filepath, mode='rb')
ベクトルの型を見る	aArray.dtype()
長さの制限された両端キューを配列から生成する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
option: インディゴにグラフの色を設定する	color = 'indigo'
半透明の点線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
文字列から改行を全て除く	文字列.replace('\n', '')
option: フォントの色をオレンジレッドに設定する	color = 'orangered'
ヒストグラムをコーラル色として描画する	plt.hist(データ列, color='coral')
日付時刻データにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
散布図の星印の線幅を変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
データ列を平方根変換する	np.sqrt(データ列)
yが無限大に近づくときの数式の極限値を算出する	sympy.limit(数式, y, oo)
文字列は全て印字できるか	文字列.isprintable()
カラムの平均値	df['列A'].mean()
オブジェクトは論理値型のインスタンスか調べる	bool = int<nl>isinstance(obj, bool)
データシリーズの分位数	ds.quantile(パーセント/100)
縦に三つのデータフレームを結合する	pd.concat([df, df2, df3], axis=0)
散布図に大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
配列間のケンドールの順位相関係数を使う	scipy.stats.kendalltau(配列, 配列2)
データシリーズの未入力値を最大値で置換する	ds.fillna(ds.max())
クラス分類をヒストグラムと勾配ブースティングでする	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列を最後の区切り文字で分けた時の後半の文字列	文字列.rpartition(セパレータ)[-1]
整数が整数2未満、もしくはn3以上か調べる	整数 < 整数2 or 整数 >= n3
▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの右三角マーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
エクセルファイルのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
日付時刻データにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
deqのstart番目からendの要素	collections.deque(itertools.islice(deq, start, end))
要素はタプルの要素でない	要素 not in タプル
マゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='magenta')
ライトイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightyellow')
option: フォントの色をカデットブルーに指定する	color = 'cadetblue'
日付時刻データは何年か知る	aDatetime.year
ゼロ埋めした行列	np.zeros(要素数)
データフレームのカラムをにバイオリン図を用いて描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
指定された列で集計し、標準偏差を算出する	df.groupby('列A').std()
散布図をrgbの四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
サーモン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
deqのstart〜endの要素を見る	collections.deque(itertools.islice(deq, start, end))
縦棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
ヒストグラムの色をライトスカイブルーに変更する	plt.hist(データ列, color='lightskyblue')
ファイルを追加モードで開いて]fとする	f = open(filepath, mode='a')
四角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
アヤメのデータセットをデータフレームとしてロードする	df = sns.load_dataset('iris')
赤い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームのカラムを散布図として可視化する	sns.scatterplot(data=df, x='列名', y='列名')
タイタニック号のデータセットからデータフレームをロードする	df = sns.load_dataset('titanic')
スピアマンの相関係数を使う	scipy.stats.spearmanr(数列, 数列2)
線グラフの色を淡い茶色に変更する	plt.plot(データ列x, データ列y, color='tan')
最後のカンマで文字列を二分して最初の方を使う	文字列.rpartition(',')[0]
実数のルートを求める	math.sqrt(x)
option: ホットピンクに色を変更する	color = 'hotpink'
丸印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
クラス分類をランダムフォレストでする	model = sklearn.ensemble.RandomForestClassifier()
コマンド引数で与えられたファイルをひとつずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
関数の値によってデータフレームをグループ化し、要約統計量を求める	df.groupby(関数).describe()
option: ダークターコイズに色をする	color = 'darkturquoise'
文字コードの最大値	sys.maxunicode
option: マーカーの線幅を設定する	markeredgewidth = 2.5
option: グラフの色を貝殻にセットする	color = 'seashell'
二つ並べて数列を箱ひげ図にする	plt.boxplot([データ列, データ列])
option: 文字列を改行するの代わりに用いる	end = 文字列
文字列を走査しパターンに複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
option: グラフの色をスレートブルーに変更する	color = 'slateblue'
ヒストグラムをライムグリーン色として描画する	plt.hist(データ列, color='limegreen')
ヒストグラムをフォレストグリーン色として描画する	plt.hist(データ列, color='forestgreen')
日付時刻をインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
行列の演算を行う	import numpy as np
要素がセットのいずれ	要素 in セット
データフレームの選択した列の分散	df[['列A', '列B']].var()
データフレームをグループ化し最小値を算出する	df.groupby('列A').min()
リストの先頭の要素を見る	リスト[0]
option: 出力先をファイルにセットする	file = sys.open('file.txt', 'w')
ベクトルのユニークな要素	np.unique(aArray)
ハニーデューにヒストグラムの色を変更する	plt.hist(データ列, color='honeydew')
横棒グラフをレモンシフォン色を用いて描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
折れ線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
データ列の推移を青い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
文字列は印字できるか調べる	文字列.isprintable()
シーグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='seagreen')
縦棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
データフレームを整列して、上の方n件を取り出す	df.sort_values('キーとなる列').head(n)
識別子がメソッド	inspect.ismethod(識別子)
要素が辞書の値として含まれているか	element in 辞書.values()
コロンで文字列を区切って、列挙する	文字列.split(':')
横棒プロットを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
折れ線グラフの四角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
棒グラフをブラウン色で描画する	plt.bar(データ列x, データ列y, color='brown')
に箱ひげ図でデータフレームの列を可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
十六進文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
整数の5分の1	整数 / 5
オーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
オレンジレッド色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
表データの末尾n行を抽出する	df.tail(n)
option: 青緑を使う	color = 'teal'
カテゴリ列で色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
分割数nとして列をビニングしてnamesのラベルをつける	pd.cut(ds, n, labels=names)
折れ線グラフに星印を用いる	plt.plot(データ列x, データ列y, marker='*')
ある列の分散	df.groupby('列A').var()
線グラフをアリスブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='aliceblue')
ヒストグラムの色を耐火レンガに変更する	plt.hist(データ列, color='firebrick')
縦軸を対数に変更する	plt.yscale('log')
散布図をサンディーブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
文字列の最初を使う	文字列[0]
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
整数が2で割り切れるかどうか調べる	整数 % 2 == 0
外れ値に強い線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
リストと数列の散布図を描画して、ダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
赤い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
ビスク色を使ってヒストグラムを描画する	plt.hist(データ列, color='bisque')
こんにちは世界と出力する	print('Hello World')
option: フォントの色をダークカーキにセットする	color = 'darkkhaki'
リストとリストの散布図を描き、、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
データシリーズは何日か見る	ds.dt.day
散布図に黒いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図に▲印を加える	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムをシエナ色を使って描画する	plt.hist(データ列, color='sienna')
日付時刻データと日付時刻データの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()
句点文字を全部求める	string.punctuation
横棒グラフをミディアムブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumblue')
リストをJSON形式を用いてファイル出力に保存する	json.dump(リスト, ファイル出力, ensure_ascii=False)
文字列中にひとつも英数字が含まれないか	any(not c.isalnum() for c in 文字列)
折れ線グラフをダークスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
バイナリ書き込みモードを用いてファイルをオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
データフレームの未入力値を中央値に指定する	df.fillna(df.median())
文字列の先頭を見る	文字列[0]
両端キューに文字列をスタックする	両端キュー.append(文字列)
整数の十六進数文字列を使う	hex(整数)[2:]
option: フォントの色をディープスカイブルーに設定する	color = 'deepskyblue'
三つ並べてヒストグラムを描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: ミスティローズ色を用いる	color = 'mistyrose'
文字列をセパレータで二分し、、残りを使う	文字列.partition(セパレータ)[-1]
文字列の中の複数行対応として正規表現によるマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
既存の配列を元にして全要素が初期値の配列	np.full_like(aArray, 初期値)
パープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
option: グラフの色をミディアムスレートブルーに指定する	color = 'mediumslateblue'
イエローグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
折れ線グラフの色をアイボリーに指定する	plt.plot(データ列x, データ列y, color='ivory')
ヒストグラムをハニーデュー色として描画する	plt.hist(データ列, color='honeydew')
縦棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
最後の値を辞書からポップする	辞書.popitem()
option: ダークスラテグレーを使う	color = 'darkslategray'
折れ線グラフの色をライトコーラルにセットする	plt.plot(データ列x, データ列y, color='lightcoral')
折れ線グラフの右三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
列名を列挙する	df.columns
折れ線グラフの丸マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ロイヤルブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
列の値でデータフレームをグループ分けする	df.groupby('列A')
ユニコードエスケープで文字列をバイト列に変換する	文字列.encode(encoding='unicode_escape')
散布図の左三角印を黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
カウンタの文字列数を見る	len(aCounter)
ヒストグラムの色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
データフレームの歪度を算出する	df.kurt()
折り返しをオフにする	pd.set_option('expand_frame_repr', False)
折れ線グラフの色をライムグリーンにする	plt.plot(データ列x, データ列y, color='limegreen')
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
配列の行列積	np.matmul(aArray, aArray2)
データ列を全てタイムスタンプ型に変換する	pd.to_datetime(ds)
双方向キュー中の整数の位置	両端キュー.index(整数)
最大値・最小値の範囲で一様な疑似乱数を発生させる	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
日付データにn週間分加算する	aDate + datetime.timedelta(weeks=n)
棒グラフを貝殻色を用いて描画する	plt.bar(データ列x, データ列y, color='seashell')
データシリーズの中に文字列と日付データがあるか調べる	ds.isin([value, value2])
データシリーズの中にと文字列があるか調べる	ds.isin([value, value2])
データフレームをCSV形式に行を付けず保存する	df.to_csv('file.csv', index=None)
nが整数と等しいかどうか調べる	整数 == 整数2
文字列はセットのメンバーかどうか判定する	文字列 in セット
option: 色をスカイブルーに指定する	color = 'skyblue'
散布図をドジャーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
ポイント印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
文字列の先頭で正規表現にマッチするか確認する	re.match(pattern, s)
文字列中に指定した文字がいくつあるか調べる	文字列.count(文字)
コーンズシルク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
データフレームの一部のカラムの第三四分位数	df[['列A', '列B']].quantile(0.75)
option: 行列のデータ型を指定する	np.int = np.int<nl>dtype = np.int
option: ミディアムターコイズにグラフの色を指定する	color = 'mediumturquoise'
数列とデータ列の散布図に黒い上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
線グラフの色をフローラルホワイトにセットする	plt.plot(データ列x, データ列y, color='floralwhite')
ランダムにデータフレームからn行を抽出する	df.sample(n)
両端キュー中の整数の位置	両端キュー.index(整数)
表データの相関行列	df.corr()
デックが空であるかどうか	len(両端キュー) == 0
ガウス過程でクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームのカテゴリデータをベクトルに変換する	pd.get_dummies(df)
散布図に黒い▼印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
カンマ区切りのファイルをn番目の列をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
CSVファイルでデータフレームを保存する	df.to_csv('file.csv')
折れ線グラフに丸印を用いる	plt.plot(データ列x, データ列y, marker='o')
文字列を最後の区切り文字で二分して、前半を使う	文字列.rpartition(セパレータ)[0]
カラーバーを水平に描画する	plt.colorbar(orientation='horizontal')
パールバイオレットレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
正規分布による累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
辞書の項目の一覧を得る	list(辞書.values())
ヒストグラムをスノー色を用いて描画する	plt.hist(データ列, color='snow')
列と列を連結する	itertools.chain(iterable, iterable2)
クラス分類の予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
等量でデータ列をn個にビン分割する	pd.qcut(ds, n)
文字列をJSONフォーマットで出力にダンプする	json.dump(文字列, ファイル出力, ensure_ascii=False)
縦棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
option: イエローグリーンにグラフの色を指定する	color = 'yellowgreen'
識別子がトレースバックかどうか調べる	inspect.istraceback(識別子)
データフレームのモード	df.mode()
偽陰性を避けたい指標を使用する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
横棒グラフをバリーウッド色を使って描画する	plt.barh(データ列x, データ列y, color='burlywood')
線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データシリーズの時刻	ds.dt.hour
データフレームの選択したカラムを百の位で四捨五入する	df[['列A', '列B']].round(-2)
データフレームの選択したカラムの尖度を求める	df[['列A', '列B']].skew()
2つのデータフレームをジョインする	pd.merge(df, df2)
option: グラフの色をナバホホワイトに指定する	color = 'navajowhite'
棒グラフをライトイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightyellow')
データフレームの棒プロットを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
文字列を部分文字列で二分割して、後半を使う	文字列.partition(部分文字列)[-1]
データシリーズを正規表現で一度にreplに置換する	ds.replace(pattern, repl, regex=True)
タイムスタンプデータをISO形式の文字列に変換する	aDatetime.isoformat()
ヒストグラムをカラーマップを用いて描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
キューに整数をエンキューする	両端キュー.append(整数)
折れ線グラフのダイアモンドマーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
色付きの実線でリストの変化を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
配列間の相関係数を算出する	scipy.stats.pearsonr(配列, 配列2)
データフレームを関数の値によってグループ化し、統計量を求める	df.groupby(関数).describe()
棒グラフをタン色として描画する	plt.bar(データ列x, データ列y, color='tan')
グラフのインチを変更する	plt.figure(figsize=(横幅, 高さ))
指定したカラムを10の位で丸める	df['列A'].round(-1)
二つの列によって昇順にデータフレームを整列する	df.sort_values(by=['列A', '列B'], ascending=True)
コーンフラワーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
ロイヤルブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
option: ミディアムバイオレットレッド色を使用する	color = 'mediumvioletred'
データフレーム中の欠損値を削除してみる	df.dropna()
縦棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
入力から２つの浮動小数数を読む	A, B = map(float, input().split())
option: マーカーの色を濃い青にする	markerfacecolor = 'darkblue'
折れ線グラフの印を右三角にする	plt.plot(データ列x, データ列y, marker='>')
option: グラフの色をインディゴに指定する	color = 'indigo'
ライトブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightblue')
配列のKurtosisを求める	scipy.stats.kurtosis(配列, bias=False)
データフレームの欠損値が含まれる部分に	df.style.highlight_null()
配列から重複を除いた行列を初期化する	np.unique(aArray)
option: グラフを点線に設定する	linestyle = 'dotted'
文字列を最初の区切り記号で二つに分けて前の方を求める	文字列.partition(セパレータ)[0]
配列と配列についての散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
ある列を用いてデータフレームを降順に破壊的に並べ直す	df.sort_values(by='列A', ascending=False, inplace=True)
折れ線グラフの△マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
行列のスカラー倍を使う	aArray * n
option: ホワイトスモークに色をする	color = 'whitesmoke'
折れ線グラフの色をピンクに指定する	plt.plot(データ列x, データ列y, color='pink')
インデックスによってデータフレームをソートする	df.sort_index()
データフレームのn行目を削除してみる	df.drop(n, axis=0)
option: 色をアリスブルーにセットする	color = 'aliceblue'
データフレームをある列でソートして、NaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
データフレームのカラムの尖度を計算する	scipy.stats.kurtosis(df['列A'], bias=False)
指定した列ついてデータフレームの重複を調べる	df.duplicated(subset='列A')
数列のピアソンの相関係数	scipy.stats.pearsonr(数列, 数列2)
分子n、分母mの分数を作る	fractions.Fraction(numerator=n, denominator=m)
小数点以下'5'桁の文字列に変換する	':.5f'.format(x)
二つのオブジェクトが同一か	obj is obj2
t分布型確率的近傍埋め込み法として文字列次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
グラフの色を明るくする	sns.set(pallete='bright')
配列と数列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
カウンタのキーと出現回数をリストとして得る	aCounter.items()
option: グラフの色をライトスレイグレーに変更する	color = 'lightslategray'
カウンタの項目をカウントだけリストとして得る	aCounter.elements()
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
文字列を最後のカンマで二分し、、残りを見る	文字列.rpartition(',')[-1]
option: フォントの色をピンクに指定する	color = 'pink'
データフレームの第一四分位数を計算する	df.quantile(0.25)
テンプレを引数としてarg文字列をフォーマットする	書式.format(*args)
ファイル名がJSONファイルか判定する	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
option: サーモンにグラフの色を指定する	color = 'salmon'
option: フォントの色をパパイヤウィップにセットする	color = 'papayawhip'
ファイルから追加ストリームを開いて]fとする	f = open(filepath, mode='a')
ベクトルの行ごとの平均値	np.mean(aArray, axis=1)
デピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
option: ミディアムスプリンググリーンを使う	color = 'mediumspringgreen'
ミディアムアクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データフレームの重複した行だけを選択する	df[df.duplicated(keep=False)]
散布図をスラグレー色として描画する	plt.scatter(データ列x, データ列y, color='slategrey')
日付データをタプルにする	aDate.timetuple()
ヒストグラムの色を青緑に変更する	plt.hist(データ列, color='teal')
xをマゼンタで表示する	print(f'\033[35m{x}\033[0m')
option: フクシア色を使用する	color = 'fuchsia'
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
option: ミントクリームを使う	color = 'mintcream'
option: フォントの色をダークバイオレットにする	color = 'darkviolet'
縦棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
文字列を走査し正規表現にASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
文字列を末尾からカンマで分割する	文字列.rsplit(',')
タプルを昇順に並べる	sorted(タプル, reverse=True)
改行しなくて文字列の出力を行う	print(文字列, end='')
双方向キューをリストから生成する	collections.deque(リスト)
xを下線付きでプリントできる文字列にする	f'\033[4m{x}\033[0m'
変数について数式の偏微分を計算する	sympy.diff(数式, 変数)
データフレームのあるカラムのNaNを最小値で補う	df['列A'].fillna(df['列A'].min())
option: フォントの色をレモンシフォンに設定する	color = 'lemonchiffon'
散布図の大バツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
パレットトルコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
イテラブルと列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
折れ線グラフの大バツ印の線幅を変える	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
クラス分類の偽陽性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
デックの末尾から要素を取り出す	両端キュー.pop()
散布図をコーンズシルク色として描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
データフレームからある二つの列のみ取り出す	df[['列A', '列B']]
フォーマットとして列をタイムスタンプ型にする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
縦棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
折れ線グラフの▼印の線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
タプルの各要素を関数に適用した結果で並べ変える	sorted(タプル, key=func)
レベッカパープル色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
折れ線グラフをサーモン色として描画する	plt.plot(データ列x, データ列y, color='salmon')
rgbの▲マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
アリスブルーにヒストグラムの色を設定する	plt.hist(データ列, color='aliceblue')
サドルブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
データシリーズの歪みを求める	ds.kurt()
赤い点線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ミディアムシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
ピアソンの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
回帰分析をヒストグラムと勾配ブースティングとして行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
リストとリストについて散布図を描画し、、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
option: グラフの色をティールに設定する	color = 'teal'
カラーバーを横向きに設定する	plt.colorbar(orientation='horizontal')
要素がセットに含まれるか	要素 in セット
棒グラフをパパイヤウィップ色を用いて描画する	plt.bar(データ列x, データ列y, color='papayawhip')
自然数個のものからk個取り出した時の並べ方の総数を求める	math.perm(n, k)
option: 最初の行をヘッダに設定する	header = 0
整数型のゼロ埋めした配列	np.zeros(要素数, dtype=np.int)
option: ダークスラテグレーを用いる	color = 'darkslategray'
カウンタを準備する	collections.Counter()
データフレームのグループ化した散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
棒グラフをオーキッド色として描画する	plt.bar(データ列x, データ列y, color='orchid')
yについて数式をn階微分する	sympy.diff(数式, y, n)
散布図をダークオレンジ色を使って描画する	plt.scatter(データ列x, データ列y, color='darkorange')
標準入力	sys.stdin
データをJSON形式を用いてファイル出力に保存する	json.dump(データ, ファイル出力, ensure_ascii=False)
文字列の右側から改行を除く	文字列.rstrip('\n')
文字が指定した文字列に含まれるか調べる	文字 in 文字列
option: フォントの色をホワイトスモークに設定する	color = 'whitesmoke'
配列を等量で分割数nとしてビン分割する	pd.qcut(aArray, n)
箱ひげ図でデータ列をプロットする	plt.boxplot(データ列)
ホットピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
散布図のクロスマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
データフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
データフレームの指定したカラムのNaNを最小値に指定する	df['列A'].fillna(df['列A'].min())
リストをソートしてJSONフォーマットにエンコードする	json.dumps(リスト, ensure_ascii=False, sort_keys=True)
回帰分析をランダム性を追加したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
タイムスタンプデータの年数を使う	aDatetime.year
格子線をプロットから表示しない	plt.grid(False)
ヒストグラムをアンティークホワイト色として描画する	plt.hist(データ列, color='antiquewhite')
xを水色にする	f'\033[36m{x}\033[0m'
改行なしに2つの計算結果をプリントする	print(式, 式, end='')
タプルが少なくとも一つ真かどうか調べる	any(タプル)
黒いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
文字列中に空白が含まれないか調べる	any(not c.isspace() for c in 文字列)
空白区切りでタプルを出力する	print(*タプル)
データフレームを並べ直し、、上位を取り出す	df.sort_values('キーとなる列').head(n)
文字が片仮名	# Tips<nl>('ァ' <= 文字 <= 'ン')
ローングリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
タプルを順に出力する	print(*タプル)
データフレームの最初5行	df.head(5)
散布図の△印の色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームを並べ直して、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
100行を重複ありでランダムにデータフレームからサンプリングする	df.sample(100, replace=True)
黒い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
ある列の不偏分散	df['列A'].var(ddof=1)
ファイルパスをバイナリ用にオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
データ列の散布図を描く	plt.scatter(データ列x, データ列y)
ファイル名がJSONファイル	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
ファイルを開いて]バイナリ書き込みストリームを求める	'wb' = 'a'<nl>open(filepath, mode='wb')
整数が5で割り切れるか	整数 % 5 == 0
アクア色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
線グラフをピーチパフ色を使って描画する	plt.plot(データ列x, データ列y, color='peachpuff')
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='grey')
データフレームの指定したカラムの欠損値をxにセットする	df['列A'].fillna(x)
CSVをロードする	pd.read_csv('file.csv', sep=',')
青い実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
折れ線グラフの左三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
線グラフの色をやわらかい青にする	plt.plot(データ列x, データ列y, color='cornflowerblue')
option: ダークレッド色を使う	color = 'darkred'
散布図をラベンダー色を使って描画する	plt.scatter(データ列x, データ列y, color='lavender')
２つのデータフレームを縦方向に結合する	pd.concat([df, df2], axis=0)
パターンに文字列の先頭でASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
データ列を分割数nでビン分割する	pd.cut(ds, n)
タイムスタンプデータの日数を使う	aDatetime.day
データフレームを10の位で四捨五入して、整数型にする	df.round(-1).astype(int)
折れ線グラフのクロスマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
リストとしてデータフレームのある列を取り出す	df['列A'].values.tolist()
折れ線グラフをミントクリーム色を用いて描画する	plt.plot(データ列x, データ列y, color='mintcream')
オブジェクトがタプルクラスかどうか調べる	tuple = int<nl>isinstance(obj, tuple)
文字を新しい文字に置き換える	文字列.replace(部分文字列, 置換後の文字列)
本日の日付時刻を計算する	datetime.datetime.now()
線グラフを一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ヒストグラムを黄緑色として描画する	plt.hist(データ列, color='chartreuse')
ヒストグラムの色をロイヤルブルーに変更する	plt.hist(データ列, color='royalblue')
option: ヘッダを自動的な連番に増やす	header = None
t-SNEで項次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
y軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
空白で文字列を分割する	文字列.partition()
複数のの条件が何れか成り立つ	条件 or 条件2 or 条件3
セットからエラーなく文字列を除く	セット.discard(文字列)
option: 行方向に処理する	axis = 1
文字列を最後のコロンで二つに分けて、前半を使う	文字列.rpartition(':')[0]
データフレームをカラムごとに分類して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
タプルの最後	タプル[-1]
縦棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
貝殻色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
散布図をプラム色を使って描画する	plt.scatter(データ列x, データ列y, color='plum')
少ない順番にカウンタを列挙する	aCounter.most_common()[::-1]
列をn個に等間隔でビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
ホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
オブジェクトは文字列クラスのインスタンスかどうか判定する	str = int<nl>isinstance(obj, str)
ヒストグラムの色をディムグレーにセットする	plt.hist(データ列, color='dimgray')
表計算ファイルからデータフレームを読み込む	pd.read_excel('file.xlsx')
フローラルホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ラインを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データ列を等しい量になるようにn個にビン分割する	pd.qcut(ds, n)
回数制限して文字列を置換する	文字列.replace(部分文字列, 置換後の文字列, n)
文字列をセパレータで分割して文字列リストに変換する	文字列.split(セパレータ)
ヒストグラムの色をダークオーキッドに変更する	plt.hist(データ列, color='darkorchid')
option: 紺色を用いる	color = 'darkblue'
折れ線グラフの右三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
オブジェクトがクラスかどうか判定する	inspect.isclass(オブジェクト)
データフレームのあるカラムを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
配列とリストの散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
平均線付き箱ひげ図をプロットする	plt.boxplot(データ列, meanline=True)
散布図をスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='springgreen')
十六進数字を求める	string.hexdigits
縦棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
ロジスティック回帰モデルを準備する	model = sklearn.linear_model.LogisticRegression()
散布図を淡い茶色色で描画する	plt.scatter(データ列x, データ列y, color='tan')
重複した行のみ	df[df.duplicated(keep=False)]
タイムスタンプデータが火曜日かどうか判定する	aDatetime.weekday() == 1
ヒストグラムを濃い青色を用いて描画する	plt.hist(データ列, color='darkblue')
リストとデータ列についての散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
option: データ型として整数型を使う	np.int = np.int<nl>dtype = np.int
データフレームを表示するとき、最大行数を変更する	pd.set_option('display.max_rows', n)
昇順にデータフレームをインデックスによってソートする	df.sort_index(ascending=True)
折れ線グラフをシーグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='seagreen')
データフレームの指定した二列を抽出する	df[['列A', '列B']]
配列の要素を連結してひとつの文字列にする	''.join(map(str, 配列))
クラスが名前付きタプルかどうか調べる	issubclass(C, tuple)
整数が整数2より大きいかどうか調べる	整数 > 整数2
文字列を最後のコロンで分けた場合の残りの文字列を使う	文字列.rpartition(':')[-1]
色付きの点線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
文字列全体を大文字・小文字を無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
２つのデータフレームを横方向につなぐ	pd.concat([df, df2], axis=1)
多次元データを特異値分解で文字列次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
文字列の中で大文字・小文字を無視してパターンにマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
一点鎖線でヒストグラムをプロットする	plt.hist(データ列, linestyle='dashbot')
グラフで利用可能な色名の一覧を知る	matplotlib.colors.cnames
ダークシアグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ルートのチェーンマップ	collections.ChainMap()
整数はセットに含まれない	数 not in セット
四角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
線グラフの色をミディアムアクアマリンに指定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
散布図をライム色として描画する	plt.scatter(データ列x, データ列y, color='lime')
二つの変数の値を順にプリントする	print(変数名, 変数名)
あるカラムの分散を求める	df['列A'].var()
日付データと日付データの時間差は何秒か知る	(aDate - aDate2).total_seconds()
データ列の平均絶対誤差を算出する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
整数が一桁の正の整数かどうか調べる	0 <= 整数 <= 9
列をカウンタに変換する	collections.Counter(iterable)
option: 赤を使う	color = 'red'
折れ線グラフを実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームの内である列に重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
データフレームが正規分布からどの程度歪んでいるか調べる	df.kurt()
整数を二乗する	x ** 2
データシリーズの欠損値を50パーセンタイルに減らす	ds.fillna(ds.median())
ミントクリーム色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
線グラフの色をシルバーに指定する	plt.plot(データ列x, データ列y, color='silver')
棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
リストと配列リストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
淡い茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
配列からn個サンプリングしてリスト化する	random.sample(配列, k=n)
ファイルを開く]	open(filepath)
xとyを改行なしにプリントする	print(x, y, end='')
option: フォントの色をブランチドアーモンドに指定する	color = 'blanchedalmond'
option: グラフの色をホワイトスモークに指定する	color = 'whitesmoke'
点線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
散布図をシャルトリューズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
アリスブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
2つの数値を順に表示する	print(数値, 数値)
リストを逆さにする	reversed(リスト)
option: ▲マーカーを使う	marker = '^'
シードを初期化する	random.seed()
線グラフをダークシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
配列と配列についての散布図に文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
データフレームのカラムをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
RMSEを算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
NaNが存在する行をドロップしてみる	df.dropna()
折れ線グラフをホワイト色で描画する	plt.plot(データ列x, データ列y, color='white')
空のリッジ回帰モデルを用意する	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
データフレームのカラムを散布図で描画して、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
option: パールゴールデンロッドを使用する	color = 'palegoldenrod'
列数を減らす	pd.set_option('display.max_columns', n)
n行をランダムにデータフレームから抽出する	df.sample(n)
要素を両端キューのn番目に追加する	両端キュー.insert(n, 要素)
データフレームをエクセルファイルで保存する	df.to_excel('file.xlsx')
文字が別の文字列にあるかどうか調べる	文字 in 文字列
キーが辞書に存在しないとき要素を追加する	辞書.setdefault(キー, element)
カウンタの要素のカウント	aCounter[element]
横棒グラフをコーンフラワーブルー色として描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をミディアムシアグリーンに変更する	plt.hist(データ列, color='mediumseagreen')
折れ線グラフをゴールド色を使って描画する	plt.plot(データ列x, データ列y, color='gold')
整数の差を求める	整数 - 整数2
初めてのプログラムを書く	print('Hello World')
seabornのデフォルトスタイルを適用する	sns.set()
縦棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
二つのデータフレームを横向きに一つにする	pd.merge(df, df2)
散布図を丸マーカーとして描く	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムをライトスチールブルー色を用いて描画する	plt.hist(データ列, color='lightsteelblue')
表データをある列によってソートする	df.sort_values(by='列A')
データフレームの指定した列を丸めて整数にする	df['列A'].round().astype(int)
データフレームの指定したカラムを百の位で丸めて、整数にする	df['列A'].round(-2).astype(int)
ヒストグラムを実線に設定する	plt.hist(データ列, linestyle='solid')
option: グラフの色をやわらかい青に設定する	color = 'cornflowerblue'
option: グラフの色をミディアムターコイズにセットする	color = 'mediumturquoise'
点線としてヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
リストとリストについて散布図を描画し、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
スノー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
SJISでデータフレームを書き出す	df.to_csv('file.csv', encoding='shift_jis')
辞書をJSON形式でファイル出力に出力する	json.dump(辞書, ファイル出力, ensure_ascii=False)
折れ線グラフの菱形マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
リストから長さの制限された両端キューを作る	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
折れ線グラフにダイアモンド印を加える	plt.plot(データ列x, データ列y, marker='D')
データフレームを小数点以下3桁まで書き出す	df.to_csv('file.csv', float_format='%.3f')
折れ線グラフの色をライムに指定する	plt.plot(データ列x, データ列y, color='lime')
青いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
数列とリストの散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
双方向キューの先頭	両端キュー[0]
折れ線グラフの色をやわらかい青に変更する	plt.plot(データ列x, データ列y, color='cornflowerblue')
オリーブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
ヒストグラムをダークオーキッド色として描画する	plt.hist(データ列, color='darkorchid')
辞書からキーで指定された値をポップする	辞書.pop(キー)
赤いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
グラフ中の(x,y)の位置にデータラベルを表示する	plt.legend(loc=(x, y))
データフレームの重複した行のみを選択する	df[df.duplicated(keep=False)]
棒グラフをリネン色として描画する	plt.bar(データ列x, データ列y, color='linen')
データフレームの指定したカラムの中にいくつ欠損値があるか求める	df['列A'].isna().sum()
青い一点鎖線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
横棒グラフをゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='goldenrod')
ファイルパスを読み込みできるようにオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
ヒストグラムを暗い赤色を使って描画する	plt.hist(データ列, color='darkred')
変数の値を整数だけ大きくする	変数 += 整数
非アルファベットが文字列中にある	any(not c.isalpha() for c in 文字列)
散布図をホットピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='hotpink')
JSON形式としてデータをファイル出力に保存する	json.dump(データ, ファイル出力, ensure_ascii=False)
変数を表示する	print(変数名)
縦棒グラフをプロットしてラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
ぐるぐると列を繰り返す	itertools.cycle(iterable)
option: グレーを用いる	color = 'gray'
折れ線グラフの色をライトスチールブルーに指定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
option: 三角印を描画する	marker = '^'
リストを等しい量になるようにn個にビン分割する	pd.qcut(aList, n)
線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
数値でデータフレームの選択した列の欠損値を埋める	df[['列A', '列B']].fillna(x)
パターンにマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
リストとイテラブルについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
２つの列の値によってデータフレームをグループ分けする	df.groupby(['列A', '列B'])
イテラブルとデータ列の散布図をプロットして、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
リストとイテラブルの散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
リストとリストの散布図を描画して、マーカーを大バツにセットする	plt.plot(データ列x, データ列y, marker='X')
ある列の値がx以上、y以下のデータを選択する	df[(x <= df['列A']) & (df['列A'] <= y)]
コーンフラワーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
折れ線グラフの色をダークスラテグレーに変更する	plt.plot(データ列x, データ列y, color='darkslategray')
リストとリストについて散布図を描画し、、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
option: フォントの色をクリムゾンに設定する	color = 'crimson'
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
棒グラフを貝殻色として描画する	plt.bar(データ列x, データ列y, color='seashell')
option: グリーンイエローを使う	color = 'greenyellow'
データフレームの一部のカラムの母標準偏差を算出する	df[['列A', '列B']].std(ddof=0)
あるカラムで降順にデータフレームを整列する	df.sort_values(by='列A', ascending=False)
データフレームの選択したカラムを百の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-2).astype(int)
配列の尖りを求める	scipy.stats.kurtosis(配列, bias=False)
散布図をオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='orchid')
線形回帰モデルの回帰変数を求める	model.coef_
データフレームのある列を配列にする	df['列A'].values
データシリーズの欠損値を中央値に指定する	ds.fillna(ds.median())
カラーバーを横向きで描く	plt.colorbar(orientation='horizontal')
中央値で指定した列の未入力値を補う	df['列A'].fillna(df['列A'].median())
ディープスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
縦棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
データフレームから指定したデータ型の列名一覧	df.select_dtypes(型).columns
実数のハイパボリック・コサイン	math.cosh(x)
散布図をシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='cyan')
option: ミディアムシアグリーンにグラフの色を設定する	color = 'mediumseagreen'
option: グラフの色をミスティローズに変更する	color = 'mistyrose'
イテラブルの各要素を両端キューの末尾に追加する	両端キュー.extend(イテラブル)
線グラフを色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
線グラフの色を茶色に指定する	plt.plot(データ列x, データ列y, color='brown')
折れ線グラフの色をダークサーモンにセットする	plt.plot(データ列x, データ列y, color='darksalmon')
ファイルパスからファイル名を使う	os.path.basename(filepath)
文字列の左側だけ大文字化する	文字列.capitalize()
範囲を指定して部分文字列を文字列の末尾から探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
部分的最小二乗法を使って回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
整数が一桁の正の数かどうか	0 <= 整数 <= 9
線グラフをビスク色を使って描画する	plt.plot(データ列x, データ列y, color='bisque')
データフレームのカラムの幾何平均	scipy.stats.gmean(df['列A'])
文字列を走査し、パターンにマッチするか見る	re.search(pattern, s)
option: オレンジレッドにグラフの色をセットする	color = 'orangered'
文字列から末尾を取り除く	文字列.removeprefix(部分文字列)
ある列の値がxに等しい行を選択する	df[df['列A'] == x]
リストをn回結合する	リスト * n
散布図をライトコーラル色として描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
セットがスーパーセットか調べる	セット.issuperset(セット2)
ミディアムブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
グラフに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
数式の簡単化を行う	sympy.sympify(数式)
n個にデータフレームの中の列をビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列の指定した位置より前に部分文字列が含まれるかどうか調べる	文字列.find(部分文字列, 0, 終了位置) != -1
データフレームの一部のカラムの標本分散	df[['列A', '列B']].var(ddof=0)
データフレームから指定された三つの列を取り出す	df[['列A', '列B', '列C']]
option: ダークターコイズ色を使用する	color = 'darkturquoise'
表計算から複数のシートをロードする	pd.read_excel('file.xlsx', sheet_name=[0, 1])
ある列の値がxより大きくyより小さい行を抽出する	df[(x < df['列A']) & (df['列A'] < y)]
シスルにヒストグラムの色を設定する	plt.hist(データ列, color='thistle')
option: ダークシアグリーンにグラフの色を指定する	color = 'darkseagreen'
option: 色を赤に設定する	color = 'red'
option: フォントの色をライトシアンに設定する	color = 'lightcyan'
正規分布の累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームの指定した列の中に存在する文字列と日付データの合計を数える	df['列A'].isin([value, value2]).sum()
option: ダーク・スラテグレーにフォントの色を設定する	color = 'darkslategrey'
散布図をフローラルホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
縦棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
新しいガウス過程分類器を作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
日付データが日付データより前かどうか調べる	aDate2 = aDatetime<nl>aDate < aDate2
データフレームから型型のカラムだけ取り出す	df.select_dtypes(ty)
赤い▽マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図の四角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
リストからランダムn個に選んでリストにする	random.choices(リスト, k=n)
モデルを訓練する	model.fit(説明変数, 目的変数)
データ列の推移を青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
スプリンググリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
タプル内の要素が全て真かどうか判定する	all(タプル)
折れ線グラフをダークグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkgreen')
ビン数nで列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
文字列が全て数字かテストする	文字列.isdigit()
折れ線グラフをアクアマリン色を使って描画する	plt.plot(データ列x, データ列y, color='aquamarine')
タブ区切りのファイルから文字エンコーディングを指定してデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
散布図に四角印を使う	plt.scatter(データ列x, データ列y, marker='s')
タプルが空かどうか	len(タプル) == 0
折れ線グラフをライトブルー色として描画する	plt.plot(データ列x, データ列y, color='lightblue')
辞書をJSON形式としてファイル出力に保存する	json.dump(辞書, ファイル出力, ensure_ascii=False)
横棒グラフをピンク色を使って描画する	plt.barh(データ列x, データ列y, color='pink')
線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
オブジェクトがジェネレータか確認する	inspect.isgenerator(オブジェクト)
データ列をフォーマットとして日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
整数はリストのどれかか調べる	aList = [0, 1, 2]<nl>整数 in aList
指定したカラムがどの程度、分散しているか見る	df['列A'].var()
ダークグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームの中にいくつNaNが存在するか数える	df.isna().sum()
折れ線グラフのクロスマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
オブジェクトは論理値クラスか	bool = int<nl>isinstance(obj, bool)
データを用いてモデルを学習する	model.fit(説明変数, 目的変数)
アルファベットが文字列中に含まれるかどうか	any(c.isalpha() for c in 文字列)
option: 文字コードをEUCにする	encoding = 'euc_jp'
ダークシアン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
オブジェクトがジェネレータか	inspect.isgenerator(オブジェクト)
横棒グラフをモカシン色として描画する	plt.barh(データ列x, データ列y, color='moccasin')
改行なしに文字列を出力する	print(文字列, end='')
ヒストグラムの色をハニーデューにする	plt.hist(データ列, color='honeydew')
横棒グラフをティール色で描画する	plt.barh(データ列x, データ列y, color='teal')
グラフのカラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
データフレームから重複を残さず重複を消す	df.drop_duplicates(keep=False)
グラフの縦軸のキャプションをuntitledに設定する	plt.ylabel('y軸ラベル')
実行中の関数の名前	inspect.currentframe().f_code.co_name
折れ線グラフの右三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
3変数の最大値	max(x, y, z)
配列と配列についての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データシリーズがどれだけ分散しているか確認する	ds.var()
二つの表データを列名を指定してジョインする	'<nl>pd.merge(df, df2, on='列A')
コーンフラワーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
文字列の右端がか調べる	文字列.endswith(部分文字列)
現在処理中の例外情報を調べる	etype, evalue, traceback = sys.exc_info()
リストから複数個ランダムに抽出する	random.choices(リスト, k=n)
二数の最も小さい値	min(x, y)
option: パールゴールデンロッドを使う	color = 'palegoldenrod'
option: グラフの色をリネンに変更する	color = 'linen'
リストのn番目に要素を差し込む	リスト.insert(n, 要素)
本日をISO形式の文字列にする	datetime.datetime.today().isoformat()
データフレームがどの程度、分散しているか確認する	df.var()
正規表現に文字列の先頭でASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
変数名がコルーチンか	inspect.iscoroutine(識別子)
円プロットの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
両端キューの中に文字列が含まれてるかどうか調べる	文字列 in 両端キュー
配列から両端キューを用意する	collections.deque(配列)
数式の変数xに別の数式を代入する	数式.subs([|変数]x, 数式2)
整数を実数に加える	x + y
データフレームのNaNを最小値に設定する	df.fillna(df.min())
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
空白文字を使う	string.whitespace
文字列中にひとつでも数字が含まれるか判定する	any(c.isdigit() for c in 文字列)
文字列を最後のカンマで分けたときの後半の文字列を使う	文字列.rpartition(',')[-1]
プロットの見た目をデフォルトでいい感じに指定する	sns.set()
赤い右三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
原点から(実数,y)の距離を計算する	math.hypot(x, y)
整数個のものからk個取り出した時の並べ方	math.perm(n, k)
シアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
データ列の一意な値の個数を見る	ds.nunique()
プロットのデータラベルを表示する	plt.legend()
縦棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
整数が整数2よりも大きいかテストする	整数 > 整数2
両端キューの先頭に数列の要素を追加する	両端キュー.extendleft(数列)
option: 色をリネンに変更する	color = 'linen'
データ列と配列についての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ヒストグラムをスプリンググリーン色として描画する	plt.hist(データ列, color='springgreen')
線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategrey')
データフレームを百の位で四捨五入して、整数にする	df.round(-2).astype(int)
外れ値に強い重クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
1で全要素を初期化した配列	np.ones(要素数, dtype=np.int)
カテゴリで色分けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
列をビン数nを使って分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームの指定したカラムを百の位で四捨五入して、整数型にする	df['列A'].round(-2).astype(int)
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgray')
オブジェクトは集合か	set = int<nl>isinstance(obj, set)
アクア色として線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
オブジェクトを文字列にする	str(obj)
標準入力から1文字分読む	sys.stdin.read(1)
ナバホホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='navajowhite')
option: グラフの色をグレーに変更する	color = 'gray'
データフレームの列の平均値	df['列A'].mean()
文字列をカンマで区切って列挙する	文字列.split(',')
カデットブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
散布図の印を赤色にする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
横棒グラフを耐火レンガ色を用いて描画する	plt.barh(データ列x, データ列y, color='firebrick')
小麦色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
浮動小数点数を百の位で丸める	round(x, -2)
改行だけ表示する	print()
タイムスタンプデータは何曜日か知る	aDatetime.weekday()
データフレームの選択した列のNaNをxに設定する	df[['列A', '列B']].fillna(x)
線グラフをモカシン色を用いて描画する	plt.plot(データ列x, データ列y, color='moccasin')
xを記号化する	x = sympy.Symbol('x')
二つのデータフレームを列名を指定して全ジョインする	pd.merge(df, df2, on='列A', how='outer')
散布図をサンディーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
線グラフの色をペールグリーンに指定する	plt.plot(データ列x, データ列y, color='palegreen')
プロットの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
散布図をフクシア色として描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
折れ線グラフを色付きの実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
縦棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
JSON形式で辞書をファイル出力に保存する	json.dump(辞書, ファイル出力, ensure_ascii=False)
縦棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
オレンジ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
xのハッシュ値を求める	hash(x)
横棒グラフをダークスレートブルー色を使って描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
マゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
折れ線グラフをマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='magenta')
空白文字を見る	string.whitespace
折れ線グラフの菱形印の大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
リストと数列の散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームの指定した列の中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
グラフから目盛り線を消す	plt.grid(False)
ホワイト色のヒストグラムを描画する	plt.hist(データ列, color='white')
option: ミディアムバイオレットレッドにフォントの色を変更する	color = 'mediumvioletred'
丸印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
深紅色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
ミッドナイトブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
0から始まるn個の整数列を得る	list(range(n))
数式の数値を計算する	float(数式)
サドルブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
異なる列をキーにしてデータフレームを右結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
項目名で指定された項目を辞書からポップする	辞書.pop(キー)
赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
キーが辞書に存在しない場合、要素を追加する	辞書.setdefault(キー, element)
実行中のメソッド名	inspect.currentframe().f_code.co_name
表データのあるカラムをインデックスにする	df.set_index('列A', inplace=True)
要素がリストの要素か確認する	要素 in リスト
ヒストグラムをダークマゼンタ色として描画する	plt.hist(データ列, color='darkmagenta')
rgbの星マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ヒストグラムをティール色として描画する	plt.hist(データ列, color='teal')
データフレームの末尾n行を取り出す	df.tail(n)
データフレームの指定したカラムの中にいくつ未入力値が存在するか調べる	df['列A'].isna().sum()
横に並べてボックスチャートを描く	plt.boxplot([データ列, データ列])
破線として数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームのある列の欠損値を第二四分位数に設定する	df['列A'].fillna(df['列A'].median())
グラフを画面用に指定する	sns.set(context='notebook')
カテゴリデータを連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
折れ線グラフを小麦色色を使って描画する	plt.plot(データ列x, データ列y, color='wheat')
アクアにヒストグラムの色をセットする	plt.hist(データ列, color='aqua')
文字列を末尾からセパレータで区切る	文字列.rsplit(セパレータ)
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
バイオレット色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
ダークオレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
ファイルを書き込みモードとして開いて]fとする	f = open(filepath, mode='w')
最後のコロンで文字列を二分する	文字列.rpartition(':')
クロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームをあるカラムのカテゴリとしてグループ分けして、それぞれのグループごとの件数を知る	df.groupby('列A').size()
t-SNEで多次元データを文字列次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームのカラムをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
折れ線グラフの色をダークシアグリーンに指定する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: ロージーブラウンを使う	color = 'rosybrown'
文字列が全て大文字	文字列.isupper()
列名を指定して2つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
アークサイン	math.asin(x)
option: オレンジレッドを使う	color = 'orangered'
折れ線グラフをダーク・スラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
両端キューの要素を逆順にする	両端キュー.reverse()
文字列がリストに含まれるか	文字列 in リスト
安全に文字列のプレフィックスから部分文字列を取り除く	文字列.removeprefix(部分文字列)
文字列に日本語が使われているか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
データフレームを散布図で可視化し、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ピーチパフ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='gray')
小数点数の逆双曲線正弦を算出する	math.asinh(x)
option: n番目の列をインデックスに変更する	index_col = n
整数が-9以上、9以下かどうか調べる	-9 <= 整数 <= 9
行列の行ごとの最大	np.max(aArray, axis=1)
option: 行列のデータ型を指定する	bool = np.int<nl>dtype = bool
８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int8)
折れ線グラフの色をフォレストグリーンに変更する	plt.plot(データ列x, データ列y, color='forestgreen')
ふたつの列を用いてグループ化し個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
文字列に日本語が使われているかどうか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
データフレームの列をカテゴリデータにする	df[col].astype(object)
長さの制限された両端キューをイテラブルから作成する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
option: 色をグレーに設定する	color = 'grey'
列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
ベクトルの最小値	np.min(aArray)
線グラフをオリーブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olive')
折れ線グラフをプラム色として描画する	plt.plot(データ列x, データ列y, color='plum')
Pythonパスの一覧を知る	sys.path
option: ロージーブラウンを使用する	color = 'rosybrown'
タイムスタンプデータが日付時刻データと同時か確認する	aDatetime == aDatetime2
線グラフの色を黄色に変更する	plt.plot(データ列x, データ列y, color='yellow')
異なる列をキーにして二つのデータフレームを全ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
ケンドールの順位相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
データフレームを複数の列によって昇順に並べる	df.sort_values(by=['列A', '列B'], ascending=True)
黒いバツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c='k')
xを黄色で表示する	print(f'\033[33m{x}\033[0m')
データフレームの25パーセンタイル	df.quantile(0.25)
option: ライトブルー色を使用する	color = 'lightblue'
ミントクリーム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
散布図をダイアモンドマーカーで描く	plt.plot(データ列x, データ列y, marker='D')
棒グラフをシーグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='seagreen')
データフレームのカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
ポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.')
数式の変数を指定された数式で置き換える	数式.subs(変数, 数式2)
数が整数か調べる	x.is_integer()
CSVファイルファイル名がかどうか調べる	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
オブジェクトはあるクラスのインスタンスか確認する	isinstance(obj, クラス)
線グラフの色をイエローグリーンに指定する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームの列名一覧で指定した列を削除する	df.drop(columns, axis=1, inplace=True)
データフレームの中にいくつ文字列が含まれるか求める	df.isin([value]).sum()
option: エンコーディングをEUCにする	encoding = 'euc_jp'
青い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
ある列の値がxに等しく、かつ別の列の値がyに等しいデータを抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
option: 色をオレンジレッドに変更する	color = 'orangered'
Excelファイルからシートの名前を指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
データフレームを散布図でグラフ化して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
要素が辞書の値に含まれていないかどうか調べる	element not in 辞書.values()
黒い▽マーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ブランチドアーモンド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
文字列が全て英数字	文字列.isalnum()
データフレームを10の位で四捨五入する	df.round(-1)
ナバホホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='navajowhite')
表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
白色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
変数名がジェネレータか調べる	inspect.isgenerator(識別子)
実数を十六進文字列に変換する	x.hex()
nが整数	整数 == 整数2
線グラフの色をゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='goldenrod')
リストとデータ列の散布図を描画し、、マーカーをバツに指定する	plt.plot(データ列x, データ列y, marker='x')
キーが辞書上で未定義	キー not in 辞書
辞書の値として要素が含まれているか調べる	element in 辞書.values()
赤い左三角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
日付時刻データにn時間分、加える	aDatetime + datetime.timedelta(hours=n)
データフレームのある列の中にある文字列の個数を数える	df['列A'].isin([value]).sum()
xとyをカンマで区切って出力する	print(x, y, sep=',')
数式のxを別の数式で置き換える	数式.subs([|変数]x, 数式2)
乱数で要素を埋めたベクトル	np.random.random(N)
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='gray')
円グラフを正確な円にする	plt.axis('equals')
英字を全部使う	string.ascii_letters
ヒストグラムと勾配ブースティングとしてクラス分類をする	model = sklearn.ensemble.HistGradientBoostingClassifier()
横棒グラフをレモンシフォン色として描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
データ列のユニークな要素数	ds.nunique()
プラットフォームの文字コードの最大値を調べる	sys.maxunicode
散布図をカーキ色として描画する	plt.scatter(データ列x, データ列y, color='khaki')
本日の月を求める	datetime.datetime.today().month
配列のイミュータブルな集合を使う	frozenset(配列)
大文字と小文字を入れ替える	文字列.swapcase()
ダークレッド色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
一点鎖線でヒストグラムを描く	plt.hist(データ列, linestyle='dashbot')
散布図の上三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
カンマ区切りのファイルをヘッダなしで読み込む	pd.read_csv('file.csv', header=None)
整数が1もしくは2、もしくは3に等しいか	整数 == 1 or 整数 == 2 or 整数 == 3
データシリーズの中に文字列と文字列が存在するか	ds.isin([value, value2])
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
option: 色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
黒い下三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
インデント幅を指定してデータをJSON文字列にする	json.dumps(データ, ensure_ascii=False, indent=n)
横棒グラフを貝殻色として描画する	plt.barh(データ列x, データ列y, color='seashell')
辞書の値も複製する	{k: copy.copy(v) for k, v in 辞書.items()}
文字列をスタックに積む	両端キュー.append(文字列)
現在を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
双方向キューのn番目に文字列を追加する	両端キュー.insert(n, 文字列)
データフレームを欠損値を含めてある列の値で分類する	df.groupby('列A', dropna=False)
改行しなくて複数の数値をプリントする	print(数値, 数値, end='')
辞書順で二つの文字列を比較する	文字列 < 文字列2
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
縦棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
動作環境のエンコーディング	sys.getdefaultencoding()
データフレームを百の位で四捨五入して整数型にする	df.round(-2).astype(int)
最大値・最小値を用いて乱数を発生させる	random.randint(最小値, 最大値)
部分文字列によって文字列を区切って、列挙する	文字列.split(部分文字列)
赤にヒストグラムの色を設定する	plt.hist(データ列, color='red')
折れ線グラフのポイント印の線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ライトブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightblue')
ピーチパフにヒストグラムの色を指定する	plt.hist(データ列, color='peachpuff')
棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
プロットの縦横比を同じする	plt.axis('equals')
ミッドナイトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
日付時刻データが日付時刻データより前かどうか	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
データフレームの選択した列の不偏分散	df[['列A', '列B']].var(ddof=1)
option: マルーン色を使用する	color = 'maroon'
ベクトルのユニークな要素とその位置を求める	u, indices = np.unique(aArray, return_index=True)
白色にする	f'\033[37m{x}\033[0m'
ケンドール相関係数としてデータフレームの相関行列を求める	df.corr(method='kendall')
複数行対応として正規表現で文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
データフレームのカラム間のピアソンの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
散布図にダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
リストの最後に要素を追加する	リスト.append(要素)
データフレームの一部の列の未入力値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
２つのデータフレームを横にマージする	pd.merge(df, df2)
平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
横棒グラフをフローラルホワイト色として描画する	plt.barh(データ列x, データ列y, color='floralwhite')
文字列をコロンを用いて分割して、列挙する	文字列.split(':')
二変数の最大値を算出する	max(x, y)
アンサンブル学習としてクラス分類を行う	sklearn.ensemble.VotingClassifier()
データフレームの指定した列のNaNを数値で埋める	df['列A'].fillna(x)
ひとつでも数字が文字列中に含まれるか	any(c.isdigit() for c in 文字列)
新しいロバスト分類モデルを新規作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データシリーズが正規分布からどの程度尖っているか見る	ds.skew()
文字列の両端から空白を消す	文字列.strip('\t')
クロスマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x')
データフレームの一部のカラムの中にと文字列がいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
グラフのy軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
二つのリストの共通要素を求める	list(set(リスト).intersection(set(リスト2)))
ある列のカテゴリ毎の合計	df.groupby('列A').sum()
JSON文字列を読む	data = json.loads(文字列)
データフレームの中の列を分割数nでビン分割する	pd.cut(df[col], n)
変数の値を表示する	print(変数名)
赤い実線としてデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
浮動小数点数の常用対数	math.log10(x)
配列が正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(配列)
option: 文字列を区切りで使う	sep = s
データ列の数値時刻を日付データにする	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフの色をミディアムアクアマリンに指定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
オリーブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
ゴーストホワイト色として線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフに凡例を付ける	plt.plot(データ列x, データ列y, label='ラベル')
option: パレットトルコイズ色を用いる	color = 'paleturquoise'
ダークサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
横棒グラフの色をダークレッドにする	plt.barh(データ列x, データ列y, color='darkred')
predicateFuncがTrueとならないシーケンスの部分を取り出す	itertools.dropwhile(predicateFunc, iterable)
データフレームが正規分布からどれだけ、歪んでいるか見る	df.kurt()
日付時刻データが火曜日かどうか	aDatetime.weekday() == 1
option: フォントの色をブルーバイオレットに変更する	color = 'blueviolet'
線グラフをライトイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightyellow')
リストを逆順にする	reversed(リスト)
線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
折れ線グラフの色をシエナに指定する	plt.plot(データ列x, データ列y, color='sienna')
要素がリストに含まれないか判定する	要素 not in リスト
折れ線グラフの丸マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
数式のインテグラルを計算する	sympy.integrate(数式)
カテゴリでグループ化してカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: グラフの色をアクアにする	color = 'aqua'
列の各値の出現回数	df[col].value_counts()
線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgray')
データフレームのあるカラムを十の位で丸める	df['列A'].round(-1)
πを使う	math.pi
文字列から部分文字列を探す	文字列.find(部分文字列)
ヒストグラムをカーキ色を用いて描画する	plt.hist(データ列, color='khaki')
データ列の離れ具合を見る	sns.residplot(x=データ列, y=データ列)
データフレームの選択した列の中のNaNの合計を数える	df[['列A', '列B']].isna().sum()
データフレームの最後を見る	df.tail()
データフレームの上10行	df.head(10)
文字列の両端から空白と改行を取り除く	文字列.strip()
ヒストグラムの色をホワイトにする	plt.hist(データ列, color='white')
文字列中の部分文字列を新しい文字列へ置き換える	文字列.replace(部分文字列, 置換後の文字列)
データを最大値を使って正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
双方向キューをポップする	両端キュー.pop()
キューの大きさを求める	len(両端キュー)
文字列中にひとつも大文字がないか調べる	any(not c.isupper() for c in 文字列)
サーモンにヒストグラムの色を変更する	plt.hist(データ列, color='salmon')
配列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
やわらかい青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ヒストグラムをダークカーキ色として描画する	plt.hist(データ列, color='darkkhaki')
データフレームを表示するとき、n列までデータフレームを表示できるようにする	pd.set_option('display.max_columns', n)
赤い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
実数を切り上げて整数にする	math.ceil(x)
識別子はモジュール	inspect.ismodule(識別子)
色差別なく色をプロットの描画で用いる	sns.set(pallete='colorblind')
データフレームの数値を全部、丸める	df.round()
データフレームの一部のカラムを10の位で四捨五入する	df[['列A', '列B']].round(-1)
小数点以下'3'桁までをプリントする	':.3f' = ':.3f'<nl>print(':.3f'.format(x))
折れ線グラフに赤い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
イテラブルをランダムにシャッフルしてリスト化する	random.sample(イテラブル, len(イテラブル))
ふたつの条件が成り立つ	条件 and 条件2
ダークシアグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
行列のユニークな要素を調べる	np.unique(aArray)
ヒストグラムをディムグレー色を用いて描画する	plt.hist(データ列, color='dimgray')
y座標を対数に変更する	plt.yscale('log')
棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
折れ線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
データから名前付きタプルをインスタンス化する	C._make(パラメータ)
ヒストグラムをプロットする	plt.hist(データ列)
option: バリーウッドを用いる	color = 'burlywood'
シスル色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
最初の要素を両端キューから削除する	両端キュー.remove(要素)
マップの項目名をリストに変換する	list(辞書.keys())
二つの文字列が同じかどうか確認する	文字列 == 文字列2
ブラウン色のヒストグラムを描画する	plt.hist(データ列, color='brown')
折れ線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
棒グラフをシルバー色を使って描画する	plt.bar(データ列x, データ列y, color='silver')
三変数の一番小さい値	max(x, y, z)
option: グラフの色をライトスカイブルーに変更する	color = 'lightskyblue'
データフレームから100行ランダムサンプリングする	df.sample(100)
散布図をミディアムバイオレットレッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
コロンで末尾から文字列を区切る	文字列.rsplit(':')
リストのパーセンタイルを描画する	plt.boxplot(データ列)
データフレームの全カラムの相関を見る	sns.pairplot(df)
現在実行中の例外情報を知る	etype, evalue, traceback = sys.exc_info()
珊瑚色で散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
配列と配列についての散布図に赤い△マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
TSVファイルをロードする	pd.read_csv('file.tsv', sep='\t')
部分文字列を文字列のプレフィックスから取り除く	文字列.removeprefix(部分文字列)
ダークスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
リストをソートしてJSONにエンコードする	json.dumps(リスト, ensure_ascii=False, sort_keys=True)
nまでのスライス	slice(n)
辞書を別の辞書として更新する	辞書.update(辞書2)
モデルの正確さを求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
データフレームをCSV形式に小数点以下3桁まで出力する	df.to_csv('file.csv', float_format='%.3f')
データシリーズの記述統計量	ds.describe()
文字列の終了位置より前に部分文字列が含まれるかどうか調べる	文字列.find(部分文字列, 0, 終了位置) != -1
実行環境の名前を知る	sys.platform
空の辞書を作る	辞書 = {}
ある列の文字列が部分文字列で始まらない行を取り出す	df[~ df['列A'].str.startswith(部分文字列)]
データフレームの重複する行のみを抽出する	df[df.duplicated(keep=False)]
折れ線グラフの星印を黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
整数が一桁の数か	-9 <= 整数 <= 9
option: 印を丸に設定する	marker = 'o'
散布図の印をダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
散布図のクロス印の色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
枠なしのデータラベルを入れる	plt.legend(frameon=False)
折れ線グラフのポイントマーカーを青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームの指定の列に重複があれば、除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
浮動小数点数を実数で割った余り	x % y
データフレームからあるデータ型の列名の一覧	df.select_dtypes(型).columns
棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
ライム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
整数が整数2未満、またはn3以上か	整数 < 整数2 or 整数 >= n3
折れ線グラフをパパイヤウィップ色を使って描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームとしてカンマ区切りのファイルを読み込む	pd.read_csv('file.csv', sep=',')
データ列の変遷を青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
フクシア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームの第一四分位数を求める	df.quantile(0.25)
100行をデータフレームから重複を認めてランダムにサンプリングする	df.sample(100, replace=True)
option: 色をダークターコイズにセットする	color = 'darkturquoise'
グレーにヒストグラムの色を指定する	plt.hist(データ列, color='gray')
横棒グラフをコーラル色を用いて描画する	plt.barh(データ列x, データ列y, color='coral')
データフレームがどの程度正規分布から歪んでいるか確認する	df.kurt()
両端キューの右に文字列を追加する	両端キュー.append(文字列)
赤い実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
変数の値の出力を改行しないで行う	print(変数名, end='')
文字列の先頭からタブを消す	文字列.lstrip('\t')
リストの要素をセットに追加する	セット.update(リスト)
シルバー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
棒グラフをホットピンク色として描画する	plt.bar(データ列x, データ列y, color='hotpink')
棒グラフをブラック色を用いて描画する	plt.bar(データ列x, データ列y, color='black')
文字列を最後のコロンで二分して最初の方を使う	文字列.rpartition(':')[0]
数字を全部見る	string.digits
option: グラフの色をダークグレーに変更する	color = 'darkgrey'
散布図のマーカーの線幅を変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
ミディアムバイオレットレッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
option: マーカーを▽に設定する	marker = 'v'
y軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
モードでデータフレームの欠損値を補う	df.fillna(df.mode().iloc[0])
シアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
縦棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
散布図を白色を用いて描画する	plt.scatter(データ列x, データ列y, color='white')
赤い丸マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
ある列によってデータフレームを並べ直す	df.sort_values(by='列A')
自然数個からk個取り出した時の順列の総数	math.perm(n, k)
option: 行列のデータ型を指定する	np.int8 = np.int<nl>dtype = np.int8
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
ファイルパスをSJISとして追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
データシリーズのNaNを直後の値に増やす	ds.fillna(method='bfill')
カウンタから最頻出の項目の件数	aCounter.most_common()[1]
ミッドナイトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
ファイルを読み込みモードを用いてオープンして]、fとする	f = open(filepath, mode='r')
タプルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
ヒストグラムをミディアムターコイズ色を用いて描画する	plt.hist(データ列, color='mediumturquoise')
リストとイテラブルについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
双方向キューのn番目に整数を挿入する	両端キュー.insert(n, 整数)
ロージーブラウン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
表計算ファイルのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
縦棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
文字列を部分文字列で二分して、前の方を使う	文字列.partition(部分文字列)[0]
xの絶対値を計算する	abs(x)
option: 三２ビット整数型を使用する	np.int16 = np.int<nl>dtype = np.int16
リストと配列の散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図にクロスマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()//60
指定された列のカテゴリで集計し最小値を求める	df.groupby('列A').min()
棒グラフをミディアムシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
文字列の左側から空白を取り除く	文字列.lstrip()
表計算から複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
最小値でデータフレームの指定した列の欠損値を埋める	df['列A'].fillna(df['列A'].min())
カウンタのそれぞれの文字列をカウントだけ列挙する	aCounter.elements()
データフレームの一部のカラムの欠損値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
文字列の指定した位置以降に部分文字列があるか調べる	文字列.find(部分文字列, 開始位置) != -1
散布図をミディアムブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
正規表現を使用する	import re
データフレームをグループ化しある列に対し標準偏差を算出する	df.groupby('列A')['列B'].std()
ロードしたモジュールを列挙する	sys.modules
データフレームのあるカラムの第一四分位数を求める	df['列A'].quantile(0.25)
ふたつのセットは互いに素か	セット.isdisjoint(セット2)
option: 先頭の列をインデックスに指定する	index_col = 0
option: 先頭の行をカラムの名前に設定する	header = 0
グラフに鉛直方向の破線をつける	plt.axvline(x=0, linestyle='dashed')
行列の計算を行う	import numpy as np
文字列中にひとつでも空白があるかどうか調べる	any(c.isspace() for c in 文字列)
青い▲印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
ヒストグラムの色をデピンクにする	plt.hist(データ列, color='deeppink')
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
左三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='<')
t分布型確率的近傍埋め込み法で多次元データを要素次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
横軸にラベルを付ける	plt.xlabel('x軸ラベル')
第一引数で指定されたファイル名	sys.argv[1]
ライトスチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
プロットを画像ファイルとして保存する	plt.savefig('foo.png')
option: スレートブルー色を用いる	color = 'slateblue'
データフレームから同じ内容の行を除く	df.drop_duplicates(inplace=True)
データフレームをCSV形式を用いて保存する	df.to_csv('file.tsv', sep='\t')
実数を浮動小数点数で割った余り	x % y
箱髭図を横方向にする	plt.boxplot(データ列, vert=False)
データフレームから数値データの列のみ選択する	df.select_dtypes('number')
データフレームのある列の第三四分位数	df['列A'].quantile(0.75)
グラフのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
セットから項を取り除く	セット.remove(要素)
データ列とリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
区切り記号で文字列を区切って、列挙する	文字列.split(セパレータ)
ファイルからJSONを読み込む	with open('file.json') as f:<nl><tab>data = json.load(f)
整数の16進数文字列を見る	hex(整数)[2:]
リストとデータ列について散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの母標準偏差を計算する	df.std(ddof=0)
option: 線の種類を破線にセットする	linestyle = 'dashed'
スピアマンの順位相関係数	scipy.stats.spearmanr(配列, 配列2)
リストの総和を算出する	sum(リスト)
線グラフの色をカデットブルーにセットする	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームを列名を指定して右ジョインする	pd.merge(df, df2, on='列A', how='right')
SJISでファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
マップにキーがないとき、処理するようにしたい	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
散布図をミディアムシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
スラグレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
棒グラフを珊瑚色で描画する	plt.bar(データ列x, データ列y, color='coral')
データフレームを列名を指定して外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
散布図に青いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
インプレースに両端キューの要素を逆に並べ直す	両端キュー.reverse()
option: 印を▼に変更する	marker = 'v'
折れ線グラフをダークグレー色を使って描画する	plt.plot(データ列x, データ列y, color='darkgray')
指定した列のみ、表データの重複を見る	df.duplicated(subset='列A')
ゼロ埋めされた符号なし８ビット整数型の行列	np.zeros(要素数, dtype=np.uint8)
度数分布図を描画してビン数を設定する	plt.hist(データ列, bins=区関数)
データフレームの一部のカラムのKurtosis	df[['列A', '列B']].kurt()
リストと数列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
テキストファイルファイル名が	filename = 'file.txt'  # ファイル name<nl>'.txt' = '.csv'<nl>filename.startswith('.txt')
折れ線グラフをオレンジレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='orangered')
rgbの四角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データシリーズの欠損値を平均で埋める	ds.fillna(ds.mean())
データフレームからカテゴリデータのカラムを取り出す	df.select_dtypes('object')
線形回帰モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
折れ線グラフをシスル色として描画する	plt.plot(データ列x, データ列y, color='thistle')
最初のコロンで文字列を分割して前の方を使う	文字列.partition(':')[0]
カテゴリで色分けして、データフレームをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: マーカーを△に変える	marker = '^'
配列にはいくつ要素が含まれるか調べる	aArray.size
文字列中にひとつでもASCII文字が含まれるか調べる	any(c.isascii() for c in 文字列)
タイムスタンプデータにn日分加算する	aDatetime + datetime.timedelta(days=n)
リストをナンバリングしながら、一つずつ処理する	for i, value in enumerate(リスト):<nl><tab>print(i, value)  # value はリストの要素
青い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
まとめてデータフレームの列の名前を置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
'A'列の値がxに等しいデータを抽出する	df[df['列A'] == x]
データフレームの指定したカラムの文字列を欠損値にする	df['列A'].replace(値, np.nan)
rgbのダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームの一部のカラムが正規分布からどの程度歪んでいるか見る	df[['列A', '列B']].kurt()
識別子がコードか	inspect.iscode(識別子)
やわらかい青色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
文字列の中のASCII限定として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
オブジェクトはリストかタプルか	isinstance(obj, (list)
option: ダークオレンジを使う	color = 'darkorange'
両端キューの中に要素が存在するかどうか調べる	要素 in 両端キュー
三整数の最大公約数	math.gcd(n, n2, n3)
文字列を部分文字列で二つに分けて、残りを求める	文字列.partition(部分文字列)[-1]
データフレームの二つの列を削除し、みる	df.drop(['列A', '列B'], axis=1)
リストとリストの散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
イエローグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
イテラブルの要素を連結してひとつの文字列にする	''.join(map(str, イテラブル))
イテラブルと数列について散布図を描画して、マーカーを下三角に指定する	plt.plot(データ列x, データ列y, marker='v')
整数個からk個取り出したときの順列の総数	math.perm(n, k)
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
文字列を最後の部分文字列で二分割する	文字列.rpartition(部分文字列)
リストを文字列として、文字列によってつなげる	文字列.join(map(str, リスト))
識別子がジェネレータかどうか調べる	inspect.isgenerator(識別子)
縦棒グラフをコーンズシルク色を用いて描画する	plt.bar(データ列x, データ列y, color='cornsilk')
データフレームをあるカラムのカテゴリによって集約する	df.groupby('列A')
ヒートマップとして混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
表データからカテゴリデータの列名一覧を使う	df.select_dtypes('object').columns
option: 四角印を使用する	marker = 's'
文字列中からパターンにASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
主成分分析として多次元データを要素次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
ある列の文字列に部分文字列が存在する行を選択する	df[df['列A'].str.contains(部分文字列)]
３つの計算結果を順に表示する	print(式, 式, 式)
rgbの▽マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
スクリプトファイルと同じフォルダのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>')
option: フォントの色をミッドナイトブルーにする	color = 'midnightblue'
縦棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
散布図を淡い茶色色を用いて描画する	plt.scatter(データ列x, データ列y, color='tan')
deqの末尾の要素	両端キュー[-1]
横棒グラフをカーキ色を使って描画する	plt.barh(データ列x, データ列y, color='khaki')
option: 色をリネンに指定する	color = 'linen'
列の未入力値を直後の値で置き換える	df['列A'].fillna(method='bfill')
辞書からキーとバリューを取り出し、ひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
ファイルパスからの入力ストリームを求める	open(filepath)
散布図をダークオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
黒いクロスマーカーを配列とデータ列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
箱ひげ図を描いて、平均値を加える	plt.boxplot(データ列, showmeans=True)
ミディアムオーキッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
オブジェクトが整数クラスか調べる	int = int<nl>isinstance(obj, int)
線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
要素はセットに含まれないかどうか	要素 not in セット
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgrey')
色付きの破線でイテラブルの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
インディアンレッド色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
横棒グラフをホワイト色で描画する	plt.barh(データ列x, データ列y, color='white')
要素がリストの要素かどうか調べる	要素 in リスト
バイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
2つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
散布図に黒い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
散布図の左三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
option: 区切りを改行にする	sep = '\n'
散布図の大バツ印の色を指定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
整数が配列のどれか	aArray = [0, 1, 2]<nl>整数 in aArray
棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
英字の大文字を全部求める	string.ascii_uppercase
日付時刻データにn秒分、加える	aDatetime + datetime.timedelta(seconds=n)
文字列の両端から部分文字列を除去する	文字列.strip(部分文字列)
棒グラフをレモンシフォン色を用いて描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
２つの列を用いてデータフレームを大きい順に並べる	df.sort_values(by=['列A', '列B'], ascending=False)
日付データにn日を加算する	aDate + datetime.timedelta(days=n)
アンティークホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データフレーム中の未入力値を破壊的に除く	df.dropna(inplace=True)
タイムスタンプデータからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
両端キューの中に文字列が存在するか確認する	文字列 in 両端キュー
データフレームの中の列をビン数nでビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの相関行列を算出する	df.corr()
列を2回あわせた直積を求める	itertools.product(iterable, repeat=2)
データフレームのあるカラムの中にいくつ欠損値があるか数える	df['列A'].isna().sum()
option: グラフの色を青に変更する	color = 'blue'
レベッカパープル色でヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
異なる列をキーにして２つの表データを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
ファイルパスを文字列の示すエンコーディングを使ってオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
イテラブルをベクトルに変換する	np.array(iterable)
二進文字列を整数に変換する	int(文字列, 2)
作画のフォントを日本語に設定する	sns.set(font='IPAexGothic')
文字列を大文字にする	文字列.upper()
ベクトルの和を使う	aArray + aArray2
棒グラフをタン色を用いて描画する	plt.bar(データ列x, データ列y, color='tan')
保存するCSV形式の小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
積立相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
セットのすべての要素が別のセット2に含まれるかどうか	セット.issubset(セット2)
全要素を初期値で初期化した行列を初期化する	np.full((行数, 列数), 初期値, dtype=np.int)
疑似乱数を発生させる	random.random()
データフレームの一部のカラムの標準偏差を求める	df[['列A', '列B']].std()
ブースティングで回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
カラーコードで折れ線プロットの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
折れ線グラフのバツマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
実数の絶対値を求める	math.fabs(x)
浮動小数点数が整数	x.is_integer()
行列の列ごとの最小	np.min(aArray, axis=0)
グリーン色でヒストグラムを描画する	plt.hist(データ列, color='green')
数式を変数xの方程式として解く	sympy.solve(数式, [|変数]x)
文字列中にひとつでも数字が存在するかどうか調べる	any(c.isdigit() for c in 文字列)
今日が土曜日か調べる	datetime.datetime.today().weekday() == 5
文字列の右端から空白を取り除く	文字列.rstrip()
ヒストグラムを耐火レンガ色として描画する	plt.hist(データ列, color='firebrick')
リストを文字列として、'改行によって一つにする	'\n'.join(map(str, リスト))
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
黒い丸マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
ヒストグラムの色をアイボリーにセットする	plt.hist(データ列, color='ivory')
黄色色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
折れ線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
ふたつの列でグループ化し、合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
option: 印をポイントに変更する	marker = '.'
最大値・最小値で乱数を発生させる	random.randint(最小値, 最大値)
データフレームを表示するとき小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
文字列を部分文字列で二つに分けて残りを使う	文字列.partition(部分文字列)[-1]
縦棒グラフをドジャーブルー色として描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
最大行数を変更する	pd.set_option('display.max_rows', n)
カテゴリ別でグループ化して、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
option: フォントの色をライムに設定する	color = 'lime'
折れ線グラフの色をオリーブに指定する	plt.plot(データ列x, データ列y, color='olive')
データフレームの一部のカラムを100の位で丸めて、整数にする	df[['列A', '列B']].round(-2).astype(int)
データフレーム中の未入力値を除く	df.dropna(inplace=True)
リストの中の最大値を計算する	max(リスト)
縦向きに３つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
データフレームのカラムをカテゴリデータに変換する	df[col].astype(object)
データフレームを指定した列の値ごとにグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
データフレームを指定したカラムを用いて並べ直し、、NaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
実数のハイパボリック・タンジェントの逆数	math.atanh(x)
オブジェクトは非同期ジェネレータ関数か	inspect.isasyncgenfunction(オブジェクト)
散布図を淡いピンク色色として描画する	plt.scatter(データ列x, データ列y, color='lightpink')
フクシア色でヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
データ列とリストの散布図に黒い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='k')
行列の形状を求める	aArray.shape
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
グラフの大きさを指定する	plt.figure(figsize=(横幅, 高さ))
三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ファイルパスからフォルダ名を使う	os.path.dirname(filepath)
option: 星印を描画する	marker = '*'
一点鎖線を用いて線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ベクトルの次元の数	aArray.ndim
フローラルホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgray')
t-SNEを用いて多次元データを項次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
JSON形式で辞書を指定したファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
指定したカラムの値が欠損値か確認する	df['列A'].isna()
新しいリッジ回帰モデルを新規作成する	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
リストと配列の散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
青緑にヒストグラムの色を変更する	plt.hist(データ列, color='turquoise')
配列を双方向キューに変換する	collections.deque(配列)
文字列をソートしてJSONにエンコードする	json.dumps(文字列, ensure_ascii=False, sort_keys=True)
整数2がnより大きくかつn3未満かどうか調べる	整数 < 整数2 and 整数2 < n3
折れ線グラフを赤い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
バイアスなしの単回帰モデルを用意する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: スキップする列番号をnamesで指定する	skiprows = names
データフレームから型だけ抽出する	df.select_dtypes(ty)
配列の値が正規分布にしたがって発生する確率を見る	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
xについてのn階偏微分を行う	sympy.diff(数式, [|変数]x, n)
日付データをn時間前にする	aDate - datetime.timedelta(hours=n)
option: フォントの色をベージュに指定する	color = 'beige'
option: モカシンを用いる	color = 'moccasin'
ヒストグラムをホワイトスモーク色を用いて描画する	plt.hist(データ列, color='whitesmoke')
データフレームをある列でグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
データフレームの指定した列の欠損値をその最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
文字列の開始位置以降に部分文字列が含まれるか	文字列.find(部分文字列, 開始位置) != -1
ポスターにグラフを設定する	sns.set(context='poster')
指定したカラムの欠損値を最小値で置き換える	df['列A'].fillna(df['列A'].min())
数列とリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
バイオレット色のヒストグラムを描画する	plt.hist(データ列, color='violet')
インデントを指定してリストをJSON形式にエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
配列と数列の散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
グラフの補足の位置を(x,y)に設定する	plt.legend(loc=(x, y))
データフレームの列を四捨五入して、整数にする	df['列A'].round().astype(int)
分類モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
折れ線グラフに丸印を加える	plt.plot(データ列x, データ列y, marker='o')
行列の列ごとの平均値	np.mean(aArray, axis=0)
句読点文字を全て使う	string.punctuation
データシリーズのNaNを最頻値にする	ds.fillna(ds.mode().iloc[0])
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
カテゴリで色分けしてデータフレームをにバイオリン図として見る	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ファイルからバイナリ書き込みストリームを開き]、fとする	f = open(filepath, mode='wb')
データフレームの欠損値を最大値に変更する	df.fillna(df.max())
文字列が全て英数字かどうか調べる	文字列.isalnum()
グラフに簡単な説明を追記する	plt.legend(['凡例A', '凡例B'])
セットが空集合でないか	len(セット) != 0
表計算ファイルでデータフレームを保存する	df.to_excel('file.xlsx')
NaNも加えてデータフレームのあるカラムをダミー変数にする	pd.get_dummies(df['列A'], dummy_na=True)
xが0に近づく時の数式の極限値を求める	sympy.limit(数式, [|変数]x, 0)
散布図の四角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
横方向にデータフレームを一つにする	pd.concat([df, df2], axis=1)
リストの折れ線グラフを描画し、、RGBで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
option: 赤色を使用する	color = 'red'
ゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
リストとリストについて散布図を描画してマーカーをダイアモンドに指定する	plt.plot(データ列x, データ列y, marker='D')
プロットにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
文字列中に大文字がある	any(c.isupper() for c in 文字列)
辞書順で文字列が文字列より前かどうか	文字列 < 文字列2
yがマイナス無限大に近づくときの極限値を求める	sympy.limit(数式, y, -oo)
異なる列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
棒グラフをイエローグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
最大値・最小値の範囲を使って一様な疑似乱数を生成する	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
棒グラフを淡い茶色色で描画する	plt.bar(データ列x, データ列y, color='tan')
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
option: 色をライトサーモンに設定する	color = 'lightsalmon'
データフレームのあるカラムの中にあるの合計を数える	df['列A'].isin([value]).sum()
option: グラフの色をライムにする	color = 'lime'
行列のユニークな要素とその位置を算出する	u, indices = np.unique(aArray, return_index=True)
option: グラフの色をライトブルーにセットする	color = 'lightblue'
散布図の丸印を青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
縦棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
エポック秒のデータ列からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
暗い赤色でヒストグラムを描画する	plt.hist(データ列, color='darkred')
配列から重複を除いた配列を作成する	np.unique(aArray)
回帰木をグラフ化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
文字列を両端キューから取り除く	両端キュー.remove(文字列)
一点鎖線を用いて数列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
rgbのバツマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図をrgbの右三角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図の▲マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
グラフの縦横の比率を等しくする	plt.axis('equals')
option: グラフの色をサーモンに変更する	color = 'salmon'
データフレームのある列の欠損値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
指定したカラムを千の位で丸めて整数型にする	df['列A'].round(-3).astype(int)
データフレームの選択した列を一万の位で丸める	df[['列A', '列B']].round(-4)
散布図の左三角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
折れ線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
オーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
ヒストグラムの色をミントクリームにセットする	plt.hist(データ列, color='mintcream')
ゴールデンロッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
データ列とリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフの色をスプリンググリーンにセットする	plt.plot(データ列x, データ列y, color='springgreen')
プロット中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
option: マーカーを丸に変える	marker = 'o'
option: ベージュに色をする	color = 'beige'
データ列のエポック秒をPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
散布図の三角印の色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
四角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='s')
散布図をダークオーキッド色を使って描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
データフレームの最初5行を抽出する	df.head(5)
ファイルパスの絶対パスを見る	os.path.abspath(filepath)
線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
option: エンコーディングを文字列の示すエンコーディングに指定する	encoding = s
πを用いる	math.pi
浮動小数点数を複素数に変換する	complex(x)
カラムのKurtosisを算出する	scipy.stats.kurtosis(df['列A'], bias=False)
折れ線グラフの四角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
option: 先頭の列をインデックスに設定する	index_col = 0
ネイビーにヒストグラムの色を設定する	plt.hist(データ列, color='navy')
横棒グラフをインディゴ色として描画する	plt.barh(データ列x, データ列y, color='indigo')
文字列を両端キューの先頭に追加する	両端キュー.appendleft(文字列)
ケースを無視して文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
外れ値を除いた配列の分散を計算する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
option: ダークシアンにフォントの色を設定する	color = 'darkcyan'
カウンタ同士でインターセクション	aCounter & aCounter2
文字列をパディングする	文字列.zfill(文字列幅)
3つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=1)
ホールドアウトを使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
折れ線グラフの色をシスルにセットする	plt.plot(データ列x, データ列y, color='thistle')
スレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
リストをイミュータブルな集合に変換する	frozenset(リスト)
option: 紺碧色を用いる	color = 'azure'
文字列の左側からタブを除去する	文字列.lstrip('\t')
チョコレート色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
棒グラフをマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='magenta')
折れ線グラフの▽マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
等しい量になるようにビン数nとしてデータフレームの中のカラムをビニングする	pd.qcut(df[col], n)
option: ライトシアン色を使用する	color = 'lightcyan'
option: ピーチパフ色を使用する	color = 'peachpuff'
表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
option: カンマをセパレータで用いる	sep = ','
文字列があるに含まれる	文字列 not in 別の文字列
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategrey')
イエローグリーンにヒストグラムの色をする	plt.hist(データ列, color='yellowgreen')
ファイルが存在しない	not os.path.exists(filepath)
オブジェクトはバイト列か調べる	bytes = int<nl>isinstance(obj, bytes)
option: 淡いピンク色に色を設定する	color = 'lightpink'
勾配ブースティングを使ってクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
折れ線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
データフレームのある列を百の位で丸める	df['列A'].round(-2)
縦棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
文字列をケースを無視してパターンで区切る	re.split(pattern, s, flags=re.IGNORECASE)
option: グラフの色をピンクに変更する	color = 'pink'
文字列中に大文字が存在しないか確認する	any(not c.isupper() for c in 文字列)
二つの列によって大きい順にデータフレームを並べ直す	df.sort_values(by=['列A', '列B'], ascending=False)
分数を使う	import fractions
現在の時刻を使う	datetime.date.today().hour
option: ラベンダーブラッシュを使用する	color = 'lavenderblush'
ロバストな線形分類モデルを用意する	model = sklearn.linear_model.HuberClassifier()
データフレームのインデックスがnの行を取り出す	df.loc[n]
データフレームの選択した列は正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
option: ダークカーキにグラフの色を設定する	color = 'darkkhaki'
入力ストリームを全て読み込む	f.read()
平均値付き箱ひげ図を描く	plt.boxplot(データ列, showmeans=True)
option: ダーク・スラテグレーを使う	color = 'darkslategrey'
変数がマイナス無限大に近づく際の極限値を求める	sympy.limit(数式, 変数, -oo)
option: フォントの色をナバホホワイトにセットする	color = 'navajowhite'
要素がタプルの要素でない	要素 not in タプル
グラフ中の(x,y)の位置に補足を表示する	plt.legend(loc=(x, y))
回帰分析をランダム性を追加したランダムフォレストでする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
データフレームをJSONLファイルから読む	pd.read_json(filename, orient='records', lines=True)
option: フォントの色をダークスレートブルーにセットする	color = 'darkslateblue'
ダークマゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
整数は配列のどれか	aArray = [0, 1, 2]<nl>整数 in aArray
option: 線種を点線に変更する	linestyle = 'dotted'
データフレームをJSONLファイルからロードする	pd.read_json(filename, orient='records', lines=True)
データシリーズの中に文字列と文字列がいくつあるかカウントする	ds.isin([value, value2]).sum()
散布図の菱形印の色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データフレームの選択したカラムのパーセンタイルを求める	df[['列A', '列B']].quantile(パーセント/100)
option: インデックスを自動的な連番に指定する	index_col = None
ヒストグラムの色をアクアに変更する	plt.hist(データ列, color='aqua')
option: フォントの色をインディアンレッドに設定する	color = 'indianred'
リストと配列の散布図を描いて、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
縦棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
整数が一桁か調べる	-9 <= 整数 <= 9
option: スラグレーにグラフの色をする	color = 'slategrey'
文字列中に非英字があるか調べる	any(not c.isalpha() for c in 文字列)
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
2つのオブジェクトが等しい	obj == obj2
日付時刻データの月を求める	aDatetime.month
数列を箱ひげ図で描画する	plt.boxplot(データ列)
折れ線グラフの印を下三角にする	plt.plot(データ列x, データ列y, marker='v')
タイムスタンプデータが月曜日か調べる	aDatetime.weekday() == 0
コマンドフラグの状態	sys.flags
フォレストグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
空白文字を全部求める	string.whitespace
option: グラフの色をミディアムアクアマリンにセットする	color = 'mediumaquamarine'
ヒストグラムの線種を実線に変更する	plt.hist(データ列, linestyle='solid')
データフレームのカラムのトリム分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
グラフをスライドに変更する	sns.set(context='talk')
散布図のポイント印を黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
マップのキーとその値を列挙する	辞書.items()
辞書のキーを要素に変更する	辞書[キー] = element
サーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
データフレームが重複しているかどうか	df.duplicated()
option: 区切りをスラッシュにする	sep = '/'
散布図をシーグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='seagreen')
床を計算する	math.floor(x)
データフレームのn行以降を取り出す	df[n:]
青色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
イテラブルと配列について散布図を描画してマーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
配列の最大	np.max(aArray)
ヒストグラムの色をパパイヤウィップにする	plt.hist(データ列, color='papayawhip')
文字列をコロンで区切って列挙する	文字列.split(':')
散布図に青い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
空の辞書がほしい	辞書 = {}
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='gray')
指定した列を100の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
文字列中のカタカナをひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
散布図をアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
数列間の相関係数	scipy.stats.pearsonr(数列, 数列2)
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
option: グラフの色をオリベドラブに変更する	color = 'olivedrab'
データフレームの中にいくつNaNが含まれるか数える	df.isna().sum()
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgray')
散布図の菱形マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
最大長を指定して、スタック	collections.deque(maxlen=最大長)
データフレームの指定した列の欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
二つのカウンタの共通する要素を求める	aCounter & aCounter2
デフォルトを適用する	sns.set()
多次元データを主成分分析として文字列次元に次元削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
ダークマゼンタ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
横棒グラフをグリーンイエロー色として描画する	plt.barh(データ列x, データ列y, color='greenyellow')
データフレームの一部のカラムの値を正規表現patternでまとめてreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
データフレームをあるカラムの値で分類し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
最初の整数を双方向キューから削除する	両端キュー.remove(整数)
散布図をゴーストホワイト色として描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
部分文字列を文字列の末尾から探す	文字列.rfind(部分文字列)  # 見つからない場合は-1
データシリーズの尖り	ds.skew()
線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
文字列中にひとつでも非数字があるか	any(not c.isdigit() for c in 文字列)
データフレームの相関行列をヒートマップを用いて可視化する	sns.heatmap(df.corr())
文字列の中の複数行対応としてパターンによる全マッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
トマト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
識別子はトレースバックか	inspect.istraceback(識別子)
数値の出力を改行しないで行う	print(数値, end='')
文字列中にひとつもアルファベットがないか	any(not c.isalpha() for c in 文字列)
線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
追加できるように既存のファイルパスをUTF8で開く]	open(filepath, mode='a', encoding='utf-8')
散布図をシエナ色として描画する	plt.scatter(データ列x, データ列y, color='sienna')
文字列を全て小文字にする	文字列.lower()
ヒストグラムをアンティークホワイト色を用いて描画する	plt.hist(データ列, color='antiquewhite')
シアン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
変数名が非同期ジェネレータか調べる	inspect.isasyncgen(識別子)
数列を双方向キューに変換する	collections.deque(数列)
オブジェクトはモジュールかどうか調べる	inspect.ismodule(オブジェクト)
疑似乱数	random.random()
標準正規分布の確率密度関数を用いる	scipy.stats.norm.pdf(x)
部分文字列で文字列を二分して、残りを見る	文字列.partition(部分文字列)[-1]
横棒グラフを描画してラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
データフレームの選択したカラムの未入力値を直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
ダイアモンドマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
終了位置まで部分文字列の位置を探す	文字列.find(部分文字列, 0, 終了位置)  # 見つからない場合は-1
双方向キューを数列から新規生成する	collections.deque(数列)
xを下線付きで表示する	print(f'\033[4m{x}\033[0m')
データフレームを関数の値によってグループ化し、記述統計量を算出する	df.groupby(関数).describe()
データフレームの一部のカラムを10の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
識別子がジェネレータ関数	inspect.isgeneratorfunction(識別子)
正規表現を用いる	import re
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
option: ゲインズボロを使う	color = 'gainsboro'
データフレームのあるカラムが何日か知る	df['列A'].dt.day
ヒストグラムの色を白に指定する	plt.hist(データ列, color='white')
option: 色をダークマゼンタに変更する	color = 'darkmagenta'
ヒストグラムの範囲を変更する	plt.hist(データ列, range=(start, end))
分類モデルを学習する	model.fit(説明変数, 目的変数)
データフレームの値を正規表現patternで全部置換する	df.replace(pattern, repl, regex=True)
折れ線グラフの色をサーモンにセットする	plt.plot(データ列x, データ列y, color='salmon')
浮動小数点数の値が整数	x.is_integer()
データフレームのヒストグラムを縦横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
整数が整数2以下、もしくはn3以上	整数 <= 整数2 or 整数 >= n3
因子分析を行う	model = sklearn.decomposition.PCA(n_components=n)
小麦色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
ヒストグラムの色をリネンに変更する	plt.hist(データ列, color='linen')
線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
option: マーカーを丸に指定する	marker = 'o'
オレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
ポイント印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムのビンを変更する	plt.hist(データ列, bins=区関数)
データフレームの歪みを求める	df.kurt()
縦棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
データフレームから型リストのデータ型の列を除外する	df.select_dtypes(exclude=typeList)
イテラブルから両端キューを用意する	collections.deque(イテラブル)
カウンタを少ない順にリストとして得る	aCounter.most_common()[::-1]
option: マーカーの色を設定する	markerfacecolor = '#800080'
option: ドジャーブルーを用いる	color = 'dodgerblue'
今日が水曜日か調べる	datetime.datetime.today().weekday() == 2
リストのコンビネーション	itertools.combinations(iterable, n)
横棒グラフの色を真紅にする	plt.barh(データ列x, データ列y, color='crimson')
双方向キュー中の文字列の数を数える	両端キュー.count(文字列)
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
二つの集合の和集合を計算する	セット.union(セット2)
numpyをインポートする	import numpy as np
バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフのバツマーカーの太さを変える	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ローングリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
範囲を指定して部分文字列を文字列の右側から探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
クラス分類をパーセプトロンでする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
整数が偶数か	整数 % 2 == 0
ヒストグラムをティール色で描画する	plt.hist(データ列, color='teal')
スプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
データ列の各値の出現回数	ds.value_counts()
配列とリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
線グラフの色をパウダーブルーに指定する	plt.plot(データ列x, データ列y, color='powderblue')
MSDで文字列次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
シルバー色でヒストグラムを描画する	plt.hist(データ列, color='silver')
rgbの右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
多次元データを主成分分析として数値次元に次元削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
文字列の右側から不要な改行を取り除く	文字列.rstrip()
区間数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
データ列の折れ線グラフを左三角印で描画する	plt.plot(データ列x, データ列y, marker='<')
散布図に黒い▼マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフをライトサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
option: ダークオリーブグリーン色を使用する	color = 'darkolivegreen'
文字列をカンマで二分して前半を使う	文字列.partition(',')[0]
データ列をリストを境界値として分割する	pd.cut(ds, aList)
パターンに文字列の先頭で複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
ヒストグラムの色をライトシアンに指定する	plt.hist(データ列, color='lightcyan')
option: 分割記号をスラッシュにする	sep = '/'
データシリーズの中に日付データと文字列がいくつあるか数える	ds.isin([value, value2]).sum()
option: グラフの色をプラムにセットする	color = 'plum'
破線としてラインを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: 印を四角に設定する	marker = 's'
自然数の最大公約数を求める	math.gcd(n, n2)
文字列の開始位置以降に部分文字列が存在する	文字列.find(部分文字列, 開始位置) != -1
グラフのy軸を対数目盛に変更する	plt.yscale('log')
緑色にする	f'\033[32m{x}\033[0m'
多次元データを主成分分析を用いて文字列次元に削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
散布図の▲印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
文字列がセットの要素に含まれるか	文字列 in セット
棒グラフをデピンク色を使って描画する	plt.bar(データ列x, データ列y, color='deeppink')
データシリーズを十の位で四捨五入する	ds.round(-1)
ミディアムオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
符号なし８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.uint8)
インデント幅を指定して文字列をJSON文字列にする	json.dumps(文字列, ensure_ascii=False, indent=n)
線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
散布図を赤色を用いて描画する	plt.scatter(データ列x, データ列y, color='red')
指定された列リストのみ、データフレームの重複を確認する	df.duplicated(subset=['列A', '列B'])
リストの最初のn要素を捨てる	リスト[n:]
散布図を茶色色として描画する	plt.scatter(データ列x, データ列y, color='brown')
縦棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
ライトスカイブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
配列とリストについての散布図にrgbの菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
未初期化の行列を作る	np.empty((行数, 列数), dtype=np.int)
データフレームのインデックス名をまとめて付け直す	df.rename(index={x: y})
ダークグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
アンティークホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
TSVファイルから文字コードを指定してデータフレームを読む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
日付時刻データの日を求める	aDatetime.day
option: フォントの色を紺碧に設定する	color = 'azure'
縦棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
データフレームの行のリストを使う	df.index
カラムのUNIX秒を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
横棒グラフの色を淡い茶色にする	plt.barh(データ列x, データ列y, color='tan')
日付時刻データの日	aDatetime.day
折れ線グラフの左三角印の色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
指定した列の欠損値を中央値に設定する	df['列A'].fillna(df['列A'].median())
文字列から一つずつ文字を列挙する	list(文字列)
ブラック色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
ヒストグラムの色をシアンにする	plt.hist(データ列, color='cyan')
数列の四分位を可視化する	plt.boxplot(データ列)
浮動小数点数はNaNか調べる	math.isnan(x)
を半分にする	変数 //= 2
縦棒グラフを描いて、棒の横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
パレットトルコイズにヒストグラムの色を設定する	plt.hist(データ列, color='paleturquoise')
スノー色でヒストグラムを描画する	plt.hist(データ列, color='snow')
文字列中にひとつも小文字が含まれない	any(not c.islower() for c in 文字列)
縦棒グラフをハニーデュー色を用いて描画する	plt.bar(データ列x, データ列y, color='honeydew')
折れ線グラフを赤い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
回帰分析をバギングで行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
ラインを半透明の点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ファイル名がCSVファイルかどうか判定する	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
y軸だけ目盛線	plt.grid(axis='y')
折れ線グラフのマーカーを▽印にする	plt.plot(データ列x, データ列y, marker='v')
文字列の左端から部分文字列を除く	文字列.lstrip(部分文字列)
追加できるように既存のファイルをUTF8でオープンする]	open(filepath, mode='a', encoding='utf-8')
ふたつの集合の差集合を使う	セット.difference(セット2)
散布図のマーカーを青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
最大最小で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データシリーズの曜日は何日目か調べる	ds.dt.dayofweek
ハニーデュー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
方程式として数式の変数の解を算出する	sympy.solve(数式, 変数)
データフレームの未入力値を直後の値で埋める	df.fillna(method='bfill')
option: フクシアを使う	color = 'fuchsia'
データフレームのあるカラムが何曜日か調べる	df['列A'].dt.weekday_name
折れ線グラフにラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
二つのオブジェクトが等しいかどうか	obj == obj2
部分文字列がsubで始まる	文字列.startswith(部分文字列)
変数名を項目名として、マッピング	dict(name='kogi', age=6)
棒グラフをゴーストホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
横軸だけ目盛線	plt.grid(axis='x')
文字列の示すエンコーディングでファイルをオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
オーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='orchid')
縦棒グラフをミントクリーム色として描画する	plt.bar(データ列x, データ列y, color='mintcream')
出力ストリームを全部読み込む	f.read()
赤い一点鎖線としてラインを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ゲインズボロ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
パールバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
ライトスレイグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
カラムのSkewnessを使う	scipy.stats.skew(df['列A'], bias=False)
文字列の指定した区間位置の間に部分文字列があるか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
昇順にある列によってデータフレームをソートして更新する	df.sort_values(by='列A', ascending=True, inplace=True)
要素がリストの要素でないかどうか調べる	要素 not in リスト
整数が2で割り切れないかどうか調べる	整数 % 2 == 1
双方向キュー中の要素のインデックスを使う	両端キュー.index(要素)
タイムスタンプデータからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
セットに数値を追加する	セット.add(数)
option: 星マーカーを加える	marker = '*'
セットを空集合にする	セット.clear()
ファイルパスをBOM付きでオープンする]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
リストの変遷を赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
配列と配列についての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
カテゴリ別でグループ化して、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データ列を等量でビン数nを用いて分割する	pd.qcut(ds, n)
パレットトルコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
データフレームのあるカラムを消す	df.drop('列A', axis=1, inplace=True)
ヒストグラムの色を真紅に指定する	plt.hist(データ列, color='crimson')
散布図に黒い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
option: ダークグレーに色を指定する	color = 'darkgrey'
モデルデータでを学習する	model.fit(説明変数, 目的変数)
青い点線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ロバストな線形分類モデルを作成する	model = sklearn.linear_model.HuberClassifier()
リストの中の最も小さい値	min(リスト)
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
環境のエンディアンを知る	sys.byteorder
ヒストグラムの色をパパイヤウィップに変更する	plt.hist(データ列, color='papayawhip')
丸印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
カラーコードで折れ線グラフの色を変更する	plt.plot(データ列x, データ列y, color='#800080')
ビスク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
option: ロージーブラウンに色を指定する	color = 'rosybrown'
配列とイテラブルの散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
スラグレー色としてヒストグラムを描画する	plt.hist(データ列, color='slategrey')
1からNまでのベクトルを作る	np.arange(1, N+1)
横棒グラフをスプリンググリーン色を使って描画する	plt.barh(データ列x, データ列y, color='springgreen')
ゼロ埋めした符号なし８ビット整数型の行列を作る	np.zeros(要素数, dtype=np.uint8)
線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
浮動小数点数が非数かテストする	math.isnan(x)
指定された列の値で集計し、それぞれの平均値を計算する	df.groupby('列A').mean()
黄色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
データシリーズの中にある日付データの合計を求める	ds.isin([value]).sum()
タイムスタンプデータからn週間分、減らす	aDatetime - datetime.timedelta(weeks=n)
データ列の折れ線グラフを丸印を用いて描画する	plt.plot(データ列x, データ列y, marker='o')
option: 印を星に指定する	marker = '*'
折れ線グラフのバツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
文字列を最後からカンマで区切る	文字列.rsplit(',')
リストの移り変わりを青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
線グラフの色をパールバイオレットレッドにする	plt.plot(データ列x, データ列y, color='palevioletred')
文字列中のある文字の登場	文字列.count(文字)
データフレームのn行目をドロップし、みる	df.drop(n, axis=0)
最小値でカラムの欠損値を置き換える	df['列A'].fillna(df['列A'].min())
データフレームの指定したカラムの中に文字列が存在するか	df['列A'].isin([value])
y座標だけグリッド線	plt.grid(axis='y')
折れ線グラフの色をスカイブルーにする	plt.plot(データ列x, データ列y, color='skyblue')
赤い点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
イテラブルとイテラブルについて散布図を描いてマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
暗くカラーパレットをプロットの描画で使う	sns.set(pallete='dark')
黒い星印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームの選択したカラムのSkewness	df[['列A', '列B']].skew()
サブクラスか調べる	issubclass(サブクラス, クラス)
キーが辞書上で定義済み	キー in 辞書
散布図の色をダークブルーにする	plt.scatter(データ列x, データ列y, color='darkblue')
ある列でデータフレームを降順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
タプルが空でないかどうかテストする	len(タプル) != 0
改行なしに文字列の出力を行う	print(文字列, end='')
リストと配列について散布図を描画して、左三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
カラムの標準誤差を求める	scipy.stats.sem(df['列A'])
長さの制限された両端キューをリストから作成する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
データフレームを未入力値を含めてあるカラムの値でグループ化する	df.groupby('列A', dropna=False)
データシリーズの四分位点など	ds.describe()
カーキ色でヒストグラムを描画する	plt.hist(データ列, color='khaki')
表計算から複数のシートを指定してデータフレームとして読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
option: ライトイエローを用いる	color = 'lightyellow'
ファイルパスの入力ストリームを見る	open(filepath)
ヒストグラムをグリーン色として描画する	plt.hist(データ列, color='green')
整数乱数で要素を埋めた配列を作成する	np.random.randint(開始値, 終了値, N)
リストを文字列として、指定した文字列を用いてつなげる	文字列.join(map(str, リスト))
データフレームの選択したカラムのNaNを後の行の値に設定する	df[['列A', '列B']].fillna(method='bfill')
散布図にポイント印を用いる	plt.scatter(データ列x, データ列y, marker='.')
線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
棒グラフをライトコーラル色として描画する	plt.bar(データ列x, データ列y, color='lightcoral')
全要素を1で初期化した行列を作成する	np.ones(行数, 列数, dtype=np.int)
フォーマットでデータ列をタイムスタンプにする	pd.to_datetime(ds, format='%Y-%m-%d')
線形回帰モデルを訓練する	model.fit(説明変数, 目的変数)
文字列をコロンで末尾から区切る	文字列.rsplit(':')
データフレームを散布図でグラフ化し、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームをインデックスを用いて小さい順に並べ直す	df.sort_index(ascending=True)
ネイビー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
キューの長さを制限する	collections.deque(maxlen=最大長)
データフレームの列間の相関行列を一度に求める	df.corr()
データフレームの全列を散布図としてグラフ化する	sns.pairplot(df)
ラベンダーブラッシュにヒストグラムの色を設定する	plt.hist(データ列, color='lavenderblush')
文字列の開始位置以降に部分文字列がある	文字列.find(部分文字列, 開始位置) != -1
識別子はスタックフレームか確認する	inspect.isframe(識別子)
タプルをリバースする	reversed(タプル)
ファイルパスを文字列の示す文字コードを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
セットの全ての要素が別のセット2に含まれるかどうか調べる	セット.issubset(セット2)
option: フォントの色をダークオレンジに指定する	color = 'darkorange'
プラットフォームの整数の最大値	sys.maxsize
option: 色をアイボリーに変更する	color = 'ivory'
正規表現を事前にASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
一点鎖線としてイテラブルの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
データシリーズの標本標準偏差を求める	ds.std(ddof=1)
エクセルファイルからデータフレームをロードする	pd.read_excel('file.xlsx')
ファイルパスをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
文字列の開始位置から先に部分文字列がないか調べる	文字列.find(部分文字列, 開始位置) == -1
セットからエラーなく要素を除去する	セット.discard(要素)
データフレームの指定した列の未入力値をxに設定する	df['列A'].fillna(x)
折れ線グラフをライトイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightyellow')
一番右側の列を除いたデータフレームを見る	df[df.columns[:-1]]
フォーマットでデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
指定したカラムを丸めて、整数にする	df['列A'].round().astype(int)
横棒グラフをモカシン色を用いて描画する	plt.barh(データ列x, データ列y, color='moccasin')
要素がタプルの要素でないか	要素 not in タプル
option: 濃い青にフォントの色を指定する	color = 'darkblue'
折れ線グラフの色をコーンズシルクに変更する	plt.plot(データ列x, データ列y, color='cornsilk')
nから始まる無限リストがほしい	itertools.count(start=n)
リストをJSON文字列に変換する	json.dumps(リスト, ensure_ascii=False)
リストと配列について散布図をプロットして、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをインディアンレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='indianred')
折れ線グラフをスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームのカラムの最頻値を算出する	mode, count = scipy.stats.mode(df['列A'])
ライムグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
文字列の左側の空白を取り除く	文字列.lstrip()
部分文字列が文字列の開始位置以降に存在するか調べる	文字列.find(部分文字列, 開始位置) != -1
データフレームの選択したカラムの欠損値を平均に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
柱状グラフのビンの数を設定する	plt.hist(データ列, bins=区関数)
モカシン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
イテラブルの各要素に対して、predicateFuncがTrueであればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームのカラムの一意な値の個数	df[col].nunique()
指定した列を十の位で丸める	df['列A'].round(-1)
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategray')
データフレームのシェイプを見る	df.shape
ファイルをBOM付きとして追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
option: グリーンを用いる	color = 'green'
xを紫色でプリントする	print(f'\033[35m{x}\033[0m')
データフレームを十の位で四捨五入して、整数にする	df.round(-1).astype(int)
散布図の左三角印の線幅を変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
サポートベクターマシンでクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ベクトルの全要素を指定の値にする	aArray[:, :] = 指定の値
文字列がリストのいずれでもないか	文字列 not in リスト
文字列を走査し正規表現にマッチするか見る	re.search(pattern, s)
データフレーム全体を行によってソートする	df.sort_index()
オブジェクトは整数型	int = int<nl>isinstance(obj, int)
ヒストグラムをディムグレー色を使って描画する	plt.hist(データ列, color='dimgrey')
横方向に2つの表データをマージする	pd.merge(df, df2)
クラス分類の適合率を算出する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
predicateFuncが真になるイテラブルの部分	itertools.takewhile(predicateFunc, iterable)
カラムの尖度	df['列A'].skew()
option: グラフの色を濃い青に設定する	color = 'darkblue'
データフレームの指定したカラムの未入力値をxで補う	df['列A'].fillna(x)
等間隔の行列を作る＼	np.arange(開始値, 終了値, 等差)
option: フォントの色をブラックに設定する	color = 'black'
既存の行列を元にして全要素が初期値の行列	np.full_like(aArray, 初期値)
カウンタからタプルを引く	aCounter.subtract(aDict)
折れ線グラフの色をミディアムバイオレットレッドにセットする	plt.plot(データ列x, データ列y, color='mediumvioletred')
表から重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
作画のグリッドを暗くする	sns.set(style='darkgrid')
ある列によって表データを降順に並べ直す	df.sort_values(by='列A', ascending=False)
小数点以下'5'桁の文字列にする	':.5f'.format(x)
option: チョコレート色を用いる	color = 'chocolate'
データフレームのある列を取り除き、みる	df.drop('列A', axis=1)
最後の項目を辞書からポップする	辞書.popitem()
データ列と配列の散布図を描画し、、四角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ファイルを開いて]、書き込みストリームを使う	'w' = 'a'<nl>open(filepath, mode='w')
散布図をダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D')
option: ドジャーブルーにグラフの色を設定する	color = 'dodgerblue'
クラス名が名前付きタプルかどうか調べる	issubclass(C, tuple)
ブルーバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
散布図の星マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
rgbの左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
グラフに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
折れ線グラフのマーカーをクロス印にする	plt.plot(データ列x, データ列y, marker='x')
線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
リストをソートする	sorted(リスト)
データフレームの指定したカラムの25パーセンタイル	df['列A'].quantile(0.25)
リストを多重集合に変換する	collections.Counter(iterable)
データフレームの全カラムを散布図として描画する	sns.pairplot(df)
文字列を最初のコロンで二つに分け、、残りを使う	文字列.partition(':')[-1]
線グラフの色をレモンシフォンに変更する	plt.plot(データ列x, データ列y, color='lemonchiffon')
縦棒グラフをネイビー色を使って描画する	plt.bar(データ列x, データ列y, color='navy')
カデットブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
数列間のスピアマンの相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
option: スラグレーにフォントの色を変更する	color = 'slategray'
カラムのトリム平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
論文にグラフの目的を設定する	sns.set(context='paper')
リストをn個に分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図をオーキッド色を使って描画する	plt.scatter(データ列x, データ列y, color='orchid')
ファイルを改行を取り除いて一行ずつ読む	f.readline()
線グラフを点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの指定したカラムの文字列を未入力値に変換する	df['列A'].replace(値, np.nan)
分類モデルの予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: バツマーカーを加える	marker = 'x'
小数点数の正接	math.tan(x)
横棒グラフをスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='skyblue')
ミディアムシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
欠損値が存在する行をドロップしてみる	df.dropna()
折れ線グラフを珊瑚色で描画する	plt.plot(データ列x, データ列y, color='coral')
ゲインズボロ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
文字列がある文字列で終わるか調べる	文字列.endswith(部分文字列)
空白を使って文字列を区切る	文字列.split()
マップの項目名の値	辞書[キー]
整数の4分の一をが欲しい	整数 / 4
ダークシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
折れ線グラフの▽マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: ホットピンクを使う	color = 'hotpink'
CSVファイルのn行目をインデックスとしてロードする	pd.read_csv('file.csv', index_col=n)
整数が整数2未満、またはn3以上か確認する	整数 < 整数2 or 整数 >= n3
option: コーンズシルクに色を変更する	color = 'cornsilk'
ゴールデンロッド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
option: グラフの種類を点線に変更する	linestyle = 'dotted'
xをシアン化する	f'\033[36m{x}\033[0m'
文字列をn回繰り返すイテラブル	itertools.repeat(element, n)
データフレームのあるカラムを配列に変換する	df['列A'].values
セットが真⊂か調べる	セット < セット2
文字列中にひとつでもアスキー文字が含まれるかどうか調べる	any(c.isascii() for c in 文字列)
カウンタの文字列のカウントを使う	aCounter[element]
文字列をコロンで二つに分けて、前半を使う	文字列.partition(':')[0]
カラム名をリストで置き換える	df.columns = columns
黄緑色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
範囲を指定して乱数を生成する	random.randint(最小値, 最大値)
改行しないで二つの計算結果を出力する	print(式, 式, end='')
あるカラムのカテゴリで集計し、各標準偏差を求める	df.groupby('列A').std()
最大長nのスタックを用意する	collections.deque(maxlen=最大長)
整数を双方向キューにプッシュする	両端キュー.append(整数)
2次元リストを転置する	[list(x) for x in list(zip(*aList))]
パールゴールデンロッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
リストを四分位数でビン分割する	pd.qcut(aList, 4)
オブジェクトはジェネレータ関数か調べる	inspect.isgeneratorfunction(オブジェクト)
データフレームのどの値が最も出現するか確認する	df.mode()
データフレームの指定した列を百の位で丸めて、整数にする	df['列A'].round(-2).astype(int)
昇順に二つのカラムをキーにしてデータフレームを並べて、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
折れ線グラフの三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
option: ペールグリーンを使う	color = 'palegreen'
ミディアムオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
option: フォントの色をタンに設定する	color = 'tan'
データ列とイテラブルについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
整数の16進数文字列	hex(整数)[2:]
option: バッファのサイズを変更する	buffering = 4096
オブジェクトがトレースバックかどうか調べる	inspect.istraceback(オブジェクト)
散布図をライムグリーン色として描画する	plt.scatter(データ列x, データ列y, color='limegreen')
文字列を最後のカンマで分けた時の後半の文字列	文字列.rpartition(',')[-1]
文字列を改行を用いて区切る	文字列.splitlines()
折れ線グラフのマーカーを左三角印にする	plt.plot(データ列x, データ列y, marker='<')
ミディアムアクアマリン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
表計算ファイルから複数のシートを読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
配列と配列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
二つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
データフレームのある列の標本分散	df['列A'].var(ddof=0)
文字列中にひとつでも非数字が存在するか	any(not c.isdigit() for c in 文字列)
データフレームを複数の列をキーにして昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
日付時刻データが金曜日	aDatetime.weekday() == 4
散布図のマーカーを星印にする	plt.scatter(データ列x, データ列y, marker='*')
両端キューの中に要素が含まれてるか	要素 in 両端キュー
マップの項目名とその項目を列挙する	辞書.items()
option: フォントの色を赤に指定する	color = 'red'
本日をISO書式の文字列にする	datetime.datetime.today().isoformat()
ライム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
データフレームを複数の列でソートする	df.sort_values(by=['列A', '列B'])
縦棒グラフをホットピンク色として描画する	plt.bar(データ列x, データ列y, color='hotpink')
カウンタのキーを列挙する	aCounter.keys()
二次元タプルをflattenする	sum(タプル)
散布図のポイント印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
赤いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
文字列が指定されたに含まれる	文字列 not in 別の文字列
折れ線グラフの色をパレットトルコイズにセットする	plt.plot(データ列x, データ列y, color='paleturquoise')
ファイルから書き込みストリームを開いて]、fとする	f = open(filepath, mode='w')
文字列の中のASCII限定として正規表現によるマッチを使う	re.findall(pattern, s, flags=re.ASCI)
カウンタ同士で和集合演算する	aCounter | aCounter2
文字列を最後のカンマで二分して前半を見る	文字列.rpartition(',')[0]
あるカラムのカテゴリで集計しそれぞれの分散を求める	df.groupby('列A').var()
rgbの右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
黒いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
文字コードを文字へ変換する	chr(文字コード)
日付データからn週間を減らす	aDate - datetime.timedelta(weeks=n)
オリーブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
データフレームを関数でまとめた表を使う	df.groupby(関数)
option: フォントの色をグリーンに設定する	color = 'green'
配列の尖りを求める	scipy.stats.kurtosis(配列, bias=False)
折れ線グラフの色をブルーバイオレットに変更する	plt.plot(データ列x, データ列y, color='blueviolet')
最大長nの双方向キューを準備する	collections.deque(maxlen=最大長)
ラベンダーブラッシュ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
配列と同じ大きさの空の行列を作成する	np.empty_like(aArray)
変数について偏微分を計算する	sympy.diff(数式, 変数)
線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
横棒グラフをダーク・スラテグレー色を使って描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
year年をタイムスタンプに変換する	datetime.datetime(year=year, month=1, day=1)
ファイルをバイナリできるように開く]	'rb' = 'a'<nl>open(filepath, mode='rb')
オブジェクトは辞書型か確認する	dict = int<nl>isinstance(obj, dict)
縦棒グラフをドジャーブルー色を使って描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
コマンドラインのリスト	sys.argv
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
ライトサーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
要素はセットに含まれるかどうか調べる	要素 in セット
文字列中に指定された文字がいくつあるか調べる	文字列.count(文字)
データシリーズの欠損値をその平均で埋める	ds.fillna(ds.mean())
実数を実数で除する	x / y
列名を指定して二つのデータフレームを結合する	'<nl>pd.merge(df, df2, on='列A')
数の３乗	x ** 3
ヒストグラムの色をローングリーンに指定する	plt.hist(データ列, color='lawngreen')
配列と配列の散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
二つのセットが交わりを持たないか	セット.isdisjoint(セット2)
ゼロ埋めした三2ビット整数型の行列を作る	np.zeros(要素数, dtype=np.int16)
データフレームをインデックスによって降順で並べ直す	df.sort_index(ascending=False)
項がセットのメンバーか調べる	要素 in セット
ファイルを文字コードtextで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
配列を四分位数ごとに分割する	pd.qcut(aArray, 4)
文字列の中のASCII限定としてパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.ASCI)
線グラフの色をダークグレーにセットする	plt.plot(データ列x, データ列y, color='darkgrey')
列をPandasの日付型に変換する	pd.to_datetime(df['列A'])
データフレームの中にいくつ日付データがあるか調べる	df.isin([value]).sum()
縦棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
option: スチールブルー色を使用する	color = 'steelblue'
日付時刻データにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
昇順にデータフレームをあるカラムによってソートする	df.sort_values(by='列A', ascending=True)
紺碧色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
ファイルが存在する	os.path.exists(filepath)
今日の曜日を整数で使う	datetime.datetime.today().weekday()
タプルの各要素を空白区切りでプリントする	print(*タプル)
直前の値でデータフレームの欠損値を補完する	df.fillna(method='ffill')
ビスク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
リストから配列を初期化する	np.array(aList)
関数の値によってデータフレームをグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
散布図に赤い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='r')
グラフの中の縦軸に説明を付ける	plt.ylabel('y軸ラベル')
大量のデータが正規分布に従うか調べる	scipy.stats.kstest(df['列A'], 'norm')
データフレームのインデックスを振り直す	df.reset_index()
折れ線グラフにバツ印を使う	plt.plot(データ列x, データ列y, marker='x')
ダークグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
指定した列の分散	df['列A'].var()
縦棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームの中に日付データと文字列が含まれるか確認する	df.isin([value, value2])
日付時刻データが土曜日かどうか調べる	aDatetime.weekday() == 5
折れ線グラフに赤いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
線グラフをライトコーラル色として描画する	plt.plot(データ列x, データ列y, color='lightcoral')
ライトコーラル色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
option: ホワイトにグラフの色を指定する	color = 'white'
データフレームの指定したカラムを四捨五入して、整数型にする	df['列A'].round().astype(int)
指定したカラムの要約統計量	df['列A'].describe()
文字化けを防ぐ	sns.set(font='IPAexGothic')
折れ線グラフの色をオールドレースに指定する	plt.plot(データ列x, データ列y, color='oldlace')
カラム間の相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
データフレームの２つの列を並べて箱ひげ図を使って図示する	plt.boxplot([df['カラム'], df['カラム']])
整数が整数2以上かどうか確認する	整数 >= 整数2
nからstep間隔でいつまでもカウントアップする	itertools.count(start=n, step=step)
棒グラフを黄緑色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
多次元データをt-SNEとして項次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
散布図にrgbの菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
横棒グラフを濃い青色として描画する	plt.barh(データ列x, データ列y, color='darkblue')
option: 貝殻に色を設定する	color = 'seashell'
文字列の大文字と小文字を入れ替える	文字列.swapcase()
線グラフの色をサドルブラウンに変更する	plt.plot(データ列x, データ列y, color='saddlebrown')
あるカラムでデータフレームをまとめたグループ	df.groupby('列A')
縦棒グラフをスノー色を使って描画する	plt.bar(データ列x, データ列y, color='snow')
黒いダイアモンドマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
スペース文字	' '
データフレームの選択した列の欠損値をその最頻値で置き換える	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
散布図に赤い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームを1000の位で丸めて整数型にする	df.round(-3).astype(int)
SVDの準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
文字列を最後の部分文字列で二分し、、残りを使う	文字列.rpartition(部分文字列)[-1]
全ての印字できる文字	string.printable
フィッシャーの線形判別分類の準備をする	model = sklearn.manifold.TSNE(n_components=n)
タイムスタンプデータにn日を加える	aDatetime + datetime.timedelta(days=n)
標準入力を見る	sys.stdin
横棒グラフをカーキ色として描画する	plt.barh(データ列x, データ列y, color='khaki')
ヒストグラムを描き、、ビン数を変更する	plt.hist(データ列, bins=区関数)
nまでの奇整数列を作る	list(range(1, n, 2))
表から指定した二つの列を抽出する	df[['列A', '列B']]
表データのあるカラムの時刻	df['列A'].dt.hour
パールゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
コーラル色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
ブースティングを用いてクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
カテゴリで色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
整数2がn以上、かつn3以下か調べる	整数 <= 整数2 and 整数2 <= n3
データフレームの指定したカラムの尖り	df['列A'].skew()
散布図に黒い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
配列の内積を計算する	np.dot(aArray, aArray2)
実数の複素数を算出する	complex(x)
1で全要素を初期化したベクトル	np.ones(要素数, dtype=np.int)
線形回帰モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ある列のみ、データフレームの重複を確認する	df.duplicated(subset='列A')
メディアンでデータフレームの欠損値を置換する	df.fillna(df.median())
プロット中のフォントをする	sns.set(font=フォント名)
データフレームをインデックスを用いて降順でソートする	df.sort_index(ascending=False)
文字列の無限イテラブルを求める	itertools.repeat(element)
文字列を中央寄せする	文字列.center(文字列幅)
マップの値の一覧	list(辞書.values())
クラス分類の偽陽性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
折れ線グラフのマーカーをバツ印にする	plt.plot(データ列x, データ列y, marker='x')
本日のタイムスタンプ	datetime.datetime.now()
縦棒グラフをカーキ色として描画する	plt.bar(データ列x, データ列y, color='khaki')
リストと配列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
nから始まる無限数列を得る	itertools.count(start=n)
データフレームのひとつのカラムだけ説明変数にする	説明変数 = df[['列名']]
option: ブール型を用いる	np.int32 = np.int<nl>dtype = np.int32
option: グラフの色をダークスレートブルーにセットする	color = 'darkslateblue'
リストと配列についての散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
二つのオブジェクトは等しいか調べる	obj == obj2
プロットのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
プロットの描画で淡く色を使用する	sns.set(pallete='muted')
フォレストグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
縦棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
データシリーズの日を求める	ds.dt.day
ふたつの整数の差を計算する	整数 - 整数2
コーンズシルク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
散布図をライトスレイグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
印字できる文字列にする	ascii(x)
rgbの菱形マーカーをイテラブルと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図をミッドナイトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
データフレームを表示するとき、列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
分割数nとしてリストをビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
オブジェクトが数値か判定する	isinstance(obj, (int,float))
リストを箱髭図にする	plt.boxplot(データ列)
標準出力がターミナル出力か確認する	sys.stdout.isatty()
データフレームから一つの列を選択する	df[['列A']]
2つの列によってデータフレームをソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
option: アイボリーにフォントの色を変更する	color = 'ivory'
赤にヒストグラムの色をする	plt.hist(データ列, color='red')
データフレームの中にある日付データと文字列の合計を数える	df.isin([value, value2]).sum()
縦棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
線グラフの色をアリスブルーに変更する	plt.plot(データ列x, データ列y, color='aliceblue')
８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int8)
リストとイテラブルについての散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
配列をy軸、データ列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
パパイヤウィップ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
文字列中にひとつでも非英数字があるか調べる	any(not c.isalnum() for c in 文字列)
折れ線グラフをロージーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='rosybrown')
散布図に赤い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
最大値・最小値の範囲で一様な疑似乱数を算出する	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
xの出力を改行しないで行う	print(x, end='')
折れ線グラフのポイントマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
BOM付きとして書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
縦棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
データ列をビン数nでビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
カラーマップでヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
オールドレース色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
option: ▽マーカーを用いる	marker = 'v'
option: フォントの色をライトコーラルに設定する	color = 'lightcoral'
黄色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
既存のファイルをSJISを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
文字列を最後の区切り文字で二分して、前半を求める	文字列.rpartition(セパレータ)[0]
時間をインポートする	import time
整数が-9以上、9以下	-9 <= 整数 <= 9
貝殻色で線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
ミディアムオーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
option: 貝殻を使う	color = 'seashell'
偽陽性を避けたい指標を使用する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
日付時刻データと日付時刻データの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
整数をバイナリに変換する	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big')
辞書から最後に追加した項目をポップする	辞書.popitem()
あるカラムの値によってデータフレームをグループ化し、要約統計量を計算する	df.groupby('列A').describe()
パールゴールデンロッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
ヒストグラムの色を耐火レンガに指定する	plt.hist(データ列, color='firebrick')
サドルブラウン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ヒストグラムの色をダークスラテグレーにセットする	plt.hist(データ列, color='darkslategray')
option: グラフの色をグリーンイエローに指定する	color = 'greenyellow'
実数のタンジェント	math.tan(x)
ライム色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
データフレームをあるカラムで降順に破壊的に整列する	df.sort_values(by='列A', ascending=False, inplace=True)
縦棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
文字列を最後のコロンで分けたときの残りの文字列	文字列.rpartition(':')[-1]
降順に二つの列によってデータフレームをソートする	df.sort_values(by=['列A', '列B'], ascending=False)
データフレームを横方向に連結する	pd.concat([df, df2], axis=1)
option: モカシンを使う	color = 'moccasin'
データシリーズの未入力値を直前の値に設定する	ds.fillna(method='ffill')
あるカラムにリストの値が含まれる行を抽出する	df[df['列A'].isin(リスト)]
option: ライトサーモンにグラフの色を指定する	color = 'lightsalmon'
yについてのn階微分を計算する	sympy.diff(数式, y, n)
折れ線グラフの左三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ミディアムターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
option: サーモンを使う	color = 'salmon'
オールドレース色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
散布図の丸マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
サンディーブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='sandybrown')
グラフの全般的にカラーパレットを明るくする	sns.set(pallete='bright')
二つのオブジェクトが等しいかどうか確認する	obj == obj2
スタックの要素をインプレースに逆順にする	両端キュー.reverse()
複数のデータフレームを縦方向に一つにする	pd.concat([df, df2, df3], axis=0)
線グラフをホワイトスモーク色を使って描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o')
縦棒グラフをシアン色として描画する	plt.bar(データ列x, データ列y, color='cyan')
キューは空でないか	len(両端キュー) != 0
ケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
小麦色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
カラム名を指定して２つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
データフレームから重複を認めてランダムに100行をサンプリングする	df.sample(100, replace=True)
線グラフの色をトマトに指定する	plt.plot(データ列x, データ列y, color='tomato')
option: 黄色色を用いる	color = 'yellow'
一点鎖線に線グラフの線のスタイルを設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ミッドナイトブルーにヒストグラムの色を指定する	plt.hist(データ列, color='midnightblue')
文字列を最後から区切り文字で区切る	文字列.rsplit(セパレータ)
ランダム性を強化したランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
ふたつの集合の差	セット.difference(セット2)
散布図の下三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
タプルをn回連結する	タプル * n
文字列をカンマで区切って、文字列リストに変換する	文字列.split(',')
リストとイテラブルについての散布図に赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフの丸マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
マップの項目名を列挙する	list(辞書)
横棒グラフを珊瑚色で描画する	plt.barh(データ列x, データ列y, color='coral')
バイト列からJSON形式のデータを読み込む	json.loads(バイト列.decode('unicode-escape'))
option: アクアマリンに色を変更する	color = 'aquamarine'
珊瑚にヒストグラムの色を設定する	plt.hist(データ列, color='coral')
辞書の浅いコピーを作成する	辞書.copy()
rgbの右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフのマーカーをクロスにする	plt.plot(データ列x, データ列y, marker='x')
文字列を最後のカンマで二分して、前半を見る	文字列.rpartition(',')[0]
ファイルがないか調べる	not os.path.exists(filepath)
赤い一点鎖線としてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
xを論理値にする	bool(x)
小数点数の逆双曲線正接	math.atanh(x)
折れ線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列x, データ列y, color='mediumorchid')
まとめてValueMapでデータフレームの指定した列の値を置き換える	df['列A'].replace(ValueMap)
option: 区切り記号をコロンにする	sep = ':'
ヒストグラムの色を青に指定する	plt.hist(データ列, color='blue')
データシリーズをdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
辞書を別のマップで更新する	辞書.update(辞書2)
データシリーズはどの程度、正規分布から歪んでいるか確認する	ds.kurt()
重複する行のみを抽出する	df[df.duplicated(keep=False)]
変数について数式のインテグラルを求める	sympy.integrate(数式, 変数)
前の行の値でデータシリーズの欠損値を埋める	ds.fillna(method='ffill')
カウンタからゼロカウントを削除する	+aCounter
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategray')
ダークカーキ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
赤い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフの丸印の線幅を設定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
折れ線グラフの色をミッドナイトブルーに指定する	plt.plot(データ列x, データ列y, color='midnightblue')
文字列を空白で分割し、、文字列リストにする	文字列.split()
文字列の最初から部分文字列の位置を探す	文字列.find(部分文字列)
黒いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
箱髭図を描いて平均値を加える	plt.boxplot(データ列, showmeans=True)
nまでの偶整数列を作る	list(range(2, n, 2))
y軸の目盛を非表示にする	plt.yticks([])
画面用にプロットを設定する	sns.set(context='notebook')
ペールグリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
散布図に四角印を加える	plt.scatter(データ列x, データ列y, marker='s')
option: フォントの色をスラグレーに設定する	color = 'slategrey'
キーがマップにあるいるかどうか調べる	キー not in 辞書
リストを文字列として、空白でつなげる	' '.join(map(str, リスト))
横棒グラフをダーク・スラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
線グラフの色をライトグレーにセットする	plt.plot(データ列x, データ列y, color='lightgray')
ある列のカテゴリで集計し、分散を求める	df.groupby('列A').var()
未入力値を含めてデータフレームをある列の値でグループ化する	df.groupby('列A', dropna=False)
配列を等しい量になるようにn個にビン分割する	pd.qcut(aArray, n)
データフレームの指定した列の標本分散を求める	df['列A'].var(ddof=0)
折れ線グラフをピンク色を使って描画する	plt.plot(データ列x, データ列y, color='pink')
縦棒グラフをタン色として描画する	plt.bar(データ列x, データ列y, color='tan')
ヒストグラムをイエローグリーン色として描画する	plt.hist(データ列, color='yellowgreen')
option: デピンクを使う	color = 'deeppink'
MeanSquaredErrorを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
データフレームのあるカラムの分を使う	df['列A'].dt.minute
ふたつの集合の差を使う	セット.difference(セット2)
本日が金曜日か確認する	datetime.datetime.today().weekday() == 4
データシリーズの中にある日付データの数を求める	ds.isin([value]).sum()
データシリーズの欠損値を数値で置換する	ds.fillna(x)
option: グラフの色をチョコレートに変更する	color = 'chocolate'
識別子はコードか調べる	inspect.iscode(識別子)
数列からランダムにひとつ選んでリストにする	random.choice(数列)
線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgrey')
外れ値に強い単回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
分割数nとして列を分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
配列の各値を双方向キューの末尾に追加する	両端キュー.extend(配列)
現在をISO書式の文字列に変換する	datetime.datetime.today().isoformat()
option: ピンクにグラフの色を設定する	color = 'pink'
xを青色でプリントできる文字列にする	f'\033[34m{x}\033[0m'
二進文字列をバイナリに変換する	int(文字列, 2).to_bytes(length=バイト数, byteorder='big')
数値はセットのメンバー	数 in セット
文字列の文字数	len(文字列)
カテゴリでグループ化して、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
リストを変更不能なセットにする	frozenset(リスト)
データフレームの選択したカラムの未入力値を直前の値で置換する	df[['列A', '列B']].fillna(method='ffill')
指定した列のカテゴリで集計し、平均値を求める	df.groupby('列A').mean()
predicateFuncを適用したときTrueとならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
行列の差を求める	aArray - aArray2
year年month月day日のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
縦棒プロットを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
整数が一桁の整数か確認する	-9 <= 整数 <= 9
行数をnに指定する	pd.set_option('display.max_rows', n)
ゴールデンロッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
ヒストグラムを茶色色として描画する	plt.hist(データ列, color='brown')
タイムスタンプデータの日数を求める	aDatetime.day
折れ線グラフの色をパールゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
黒い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームの指定のカラムに重複があれば消す	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
黒いダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
option: エラーがあるとき、例外を発生させるように指定する	errors = 'strict'
カラムのユニークな値の個数	df[col].nunique()
データフレームの一部の列の標準偏差	df[['列A', '列B']].std()
n番目の列を行としてCSVファイルを読み込む	pd.read_csv('file.csv', index_col=n)
ダークオリーブグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
色名からカラーコードを見る	matplotlib.colors.cnames[色名]
ベクトル間の各要素の最小公倍数	np.lcm(aArray, aArray2)
浮動小数点数の複素数を求める	complex(x)
データフレームから指定した3列を抽出する	df[['列A', '列B', '列C']]
データフレームがどれだけ、分散しているか調べる	df.var()
折れ線グラフの色をミディアムシアグリーンに変更する	plt.plot(データ列x, データ列y, color='mediumseagreen')
散布図をチョコレート色として描画する	plt.scatter(データ列x, データ列y, color='chocolate')
データフレームの複数の列を取り除いてみる	df.drop(['列A', '列B'], axis=1)
実数が非数か調べる	math.isnan(x)
データフレームの未入力値をドロップし、みる	df.dropna()
折れ線グラフの色をリネンに変更する	plt.plot(データ列x, データ列y, color='linen')
文字列が全てアスキー文字かどうか確認する	文字列.isascii()
データフレームを各カテゴリに色付けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
マッピングからカウンタを準備する	collections.Counter(aDict)
折れ線グラフをタン色を用いて描画する	plt.plot(データ列x, データ列y, color='tan')
文字列が指定された文字列に含まれる	文字列 in 別の文字列
列にイテラブルを続ける	itertools.chain(iterable, iterable2)
リストの総和	sum(リスト)
xをシアンで表示する	print(f'\033[36m{x}\033[0m')
rgbの星マーカーをリストとデータ列についての散布図に描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ミディアムスプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
列とイテラブルのデカルト積	itertools.product(iterable, iterable2)
数列の移り変わりを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategrey'
option: フォントの色をゴールデンロッドに設定する	color = 'goldenrod'
nからn2までの整数列を見る	list(range(n, n2+1))
黒色にする	f'\033[30m{x}\033[0m'
配列とリストについて散布図を描画して星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
オリベドラブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
アクア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
散布図を赤いバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データシリーズの曜日の名前を使う	ds.dt.weekday_name
option: 色をグレーにセットする	color = 'grey'
整数が1もしくは2か調べる	整数 == 1 or 整数 == 2
最大最小から行列を作成する	np.linspace(最小値, 最大値, 要素数)
yがマイナス無限大に近づく場合の数式の極限値を求める	sympy.limit(数式, y, -oo)
分割数nでリストをビン分割する	pd.cut(aList, n)
ヒストグラムの色をミディアムバイオレットレッドにセットする	plt.hist(データ列, color='mediumvioletred')
データシリーズの文字列を欠損値にする	ds.replace(値, np.nan)
リストからランダムに一つ選ぶ	random.choice(リスト)
データフレームの指定したカラムの中に含まれる日付データと文字列の合計を数える	df['列A'].isin([value, value2]).sum()
option: グラフの色を黄色に変更する	color = 'yellow'
２つの文字列は等しい	文字列 == 文字列2
横棒グラフを珊瑚色を用いて描画する	plt.barh(データ列x, データ列y, color='coral')
リネン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
リストとリストについての散布図に上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフに右三角印を用いる	plt.plot(データ列x, データ列y, marker='>')
棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
データフレームのある列をインデックスにセットする	df.set_index('列A')
小文字が文字列中に存在しないか調べる	any(not c.islower() for c in 文字列)
フローラルホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
option: フォントの色をライトブルーに設定する	color = 'lightblue'
論文用にプロットを設定する	sns.set(context='paper')
データを最大最小でスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
一点鎖線にヒストグラムを設定する	plt.hist(データ列, linestyle='dashbot')
データフレームのカラムが正規分布からどの程度、尖っているか見る	df['列A'].skew()
折れ線グラフの▼マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
折れ線グラフを黄色色として描画する	plt.plot(データ列x, データ列y, color='yellow')
散布図をラベンダー色として描画する	plt.scatter(データ列x, データ列y, color='lavender')
リストと数列の散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームが何行重複するか見る	df.duplicated().sum()
オブジェクトが属性を持つか確認する	hasattr(obj, プロパティ名)
option: スノーにグラフの色を設定する	color = 'snow'
データフレームの指定した列のNaNを第二四分位数で埋める	df['列A'].fillna(df['列A'].median())
入力から二つの自然数を取り出す	A, B = map(int, input().split())
ラベンダー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
ある列の値がxに等しく別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
菱形マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D')
文字列は全て数値かどうか	文字列.isnumeric()
折れ線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
日付データが日曜日か	aDate.weekday() == 6
スクリプトファイルの絶対パスを求める	os.path.abspath(__file__)
改行なしに数値の出力を行う	print(数値, end='')
option: グリーンイエローに色を指定する	color = 'greenyellow'
文字列の指定した範囲位置の間に部分文字列があるか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
折れ線グラフの色をイエローグリーンに変更する	plt.plot(データ列x, データ列y, color='yellowgreen')
プラム色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
要素はセットのいずれでもないどうか	要素 not in セット
ファイルをSJISで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
配列をランダムにシャッフルしてリスト化する	random.sample(配列, len(配列))
リストの要素を文字列として指定した文字によって一つにする	文字.join(map(str, リスト))
後の値でデータフレームの一部のカラムの欠損値を埋める	df[['列A', '列B']].fillna(method='bfill')
オブジェクトがクラスか	inspect.isclass(オブジェクト)
小文字を全部求める	string.ascii_lowercase
縦棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
ヒストグラムを実線にセットする	plt.hist(データ列, linestyle='solid')
ライムグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
散布図にrgbの大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: オリーブを使用する	color = 'olive'
カーキ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
グラフに鉛直方向の実線を設定する	plt.axvline(x=0, linestyle='solid')
閾値を使ってデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
日付データの表データのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
option: グラフの色をミントクリームにセットする	color = 'mintcream'
コロンで文字列を二分して、前半を使う	文字列.partition(':')[0]
ユニコードから文字に変換する	chr(文字コード)
ライトイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
デピンク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
日付時刻データはタイムスタンプデータより前か確認する	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
xの出力を改行せずに行う	print(x, end='')
散布図をダーク・スラテグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
データフレームの指定した列を百の位で丸める	df['列A'].round(-2)
インディアンレッドにヒストグラムの色を指定する	plt.hist(データ列, color='indianred')
赤いポイント印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
縦棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
折れ線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
ブランチドアーモンド色でヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
データフレームの欠損値を後の行の値にセットする	df.fillna(method='bfill')
オブジェクトは論理値か調べる	bool = int<nl>isinstance(obj, bool)
ヒストグラムをラベンダー色を使って描画する	plt.hist(データ列, color='lavender')
データフレームを表示するとき、最大行数をnに設定する	pd.set_option('display.max_rows', n)
ラインを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの選択したカラムの中にいくつ欠損値が含まれるか調べる	df[['列A', '列B']].isna().sum()
データフレームのある列の値がxより少ない行を選ぶ	df[df['列A'] < x]
整数を両端キューのn番目に差し込む	両端キュー.insert(n, 整数)
黄緑色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
要素はリストに含まれない	要素 not in リスト
折れ線グラフを半透明の実線として描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ヒストグラムの色を真紅に設定する	plt.hist(データ列, color='crimson')
タプルの要素を昇順に並べる	sorted(タプル, reverse=False)
折れ線グラフをダークゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
横棒グラフをパープル色として描画する	plt.barh(データ列x, データ列y, color='purple')
option: フォントの色をターコイズに指定する	color = 'turquoise'
文字列は全て印字できる	文字列.isprintable()
デックに整数をプッシュする	両端キュー.append(整数)
グラフの描画でパステル調にテーマを用いる	sns.set(pallete='pastel')
折れ線グラフの色をパパイヤウィップにする	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームのあるカラムの要約統計量を求める	df['列A'].describe()
データフレームの選択した列を整数に丸める	df[['列A', '列B']].round()
要素ひとつの組を作る	(要素,)
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
ライトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightblue')
タイムスタンプデータのタイムゾーン	aDatetime.timetz()
nまでの奇整数列を得る	list(range(1, n, 2))
青い実線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームのKurtosis	df.kurt()
レベッカパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
グラフを明るくする	sns.set(pallete='bright')
横棒グラフをサンディーブラウン色として描画する	plt.barh(データ列x, データ列y, color='sandybrown')
クラスのサブ型	issubclass(サブクラス, クラス)
ベージュ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
option: ライトコーラルを使う	color = 'lightcoral'
シエナにヒストグラムの色を指定する	plt.hist(データ列, color='sienna')
整数の積	整数 * 整数2
数式の平方根を算出する	sympy.sqrt(数式)
回帰モデルを学習する	model.fit(説明変数, 目的変数)
直後の値でデータシリーズの未入力値を埋める	ds.fillna(method='bfill')
線グラフをサーモン色として描画する	plt.plot(データ列x, データ列y, color='salmon')
ゴミ集めの参照カウントを知る	sys.getrefcount(オブジェクト)
データフレームのn行より後ろ取り出す	df[n:]
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
現在をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
散布図をミディアムスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
option: スチールブルーを使用する	color = 'steelblue'
option: 色をピンクにセットする	color = 'pink'
文字列の左側から指定された文字を除く	文字列.lstrip(文字)
データフレームの選択したカラムの相関行列をスピアマンで算出する	df[['列A', '列B']].corr(method='spearman')
線グラフの色をインディゴにする	plt.plot(データ列x, データ列y, color='indigo')
グラフをスライド用に変更する	sns.set(context='talk')
文字列をバイト列にする	bytes(s)
折れ線グラフの▲マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフの▽印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
縦棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームの指定したカラムを一万の位で四捨五入する	df['列A'].round(-4)
柱状グラフを描画してビン数を設定する	plt.hist(データ列, bins=区関数)
折れ線グラフをタン色として描画する	plt.plot(データ列x, データ列y, color='tan')
識別子がスタックフレーム	inspect.isframe(識別子)
散布図の大バツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
日付データのデータシリーズをインデックスにする	df.index = pd.DatetimeIndex(ds)
特異値分解で多次元データを文字列次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
レベッカパープル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
リストとデータ列の散布図を描いて、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
リストの推移を半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
赤色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
セットから共通要素を除く	セット.symmetric_difference_update(セット2)
ミディアムバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumvioletred')
ファイルパスを追加モードとしてオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
最初のセパレータを使って文字列を二分する	文字列.partition(セパレータ)
リストをJSONフォーマットにエンコードする	json.dumps(リスト, ensure_ascii=False)
数が負の数	x < 0
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
データフレームはどの程度、分散しているか見る	df.var()
データフレームをグループ化し最大値を求める	df.groupby('列A').max()
散布図の印の線幅を変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
赤色でxを表示する	print(f'\033[31m{x}\033[0m')
配列を分割数nでビン分割する	pd.cut(aArray, n)
データフレームから指定した二つの列だけ抽出する	df[['列A', '列B']]
本日の曜日を整数で見る	datetime.datetime.today().weekday()
新しい回帰木モデルを準備する	model = sklearn.tree.DecisionTreeRegressor()
数字が文字列中に含まれないか	any(not c.isdigit() for c in 文字列)
パウダーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='powderblue')
折れ線プロットのラベルを指定する	plt.plot(データ列x, データ列y, label='ラベル')
データフレームとしてJSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
option: 標準出力を使用する	file = sys.stdout
ファイルが存在しないか確認する	not os.path.exists(filepath)
マッピングからキーとバリューのペアを取り出し、ひとつずつ処理する	for key, value in 辞書.items():<nl><tab>print(key, value)  # FIXME
折れ線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='gray')
折れ線グラフに青い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
部分文字列の位置を文字列中から探す	文字列.find(部分文字列)
データフレームの選択したカラムのNaNを直前の値に指定する	df[['列A', '列B']].fillna(method='ffill')
データフレームの中のカラムをビニングする	pd.cut(df[col], aList)
option: トマトにグラフの色を変更する	color = 'tomato'
散布図を丸印で描画する	plt.scatter(データ列x, データ列y, marker='o')
データフレームのあるカラムの欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
ヒストグラムの色をモカシンに変更する	plt.hist(データ列, color='moccasin')
縦棒グラフをフクシア色を使って描画する	plt.bar(データ列x, データ列y, color='fuchsia')
文字列を最後のカンマで分けたときの残りの文字列を見る	文字列.rpartition(',')[-1]
折れ線グラフの丸マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
指定したカラムの欠損値を後の行の値に設定する	df['列A'].fillna(method='bfill')
option: 色をライトブルーにセットする	color = 'lightblue'
1行だけカラムを外したデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
折れ線グラフの大バツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データフレームの一部の列の中に日付データと文字列が存在するか	df[['列A', '列B']].isin([value, value2])
データフレームの一部のカラムの欠損値をその平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
ベクトルの差	aArray - aArray2
八進文字列を整数に変換する	int(文字列, 8)
データフレームの中にがあるか	df.isin([value])
データフレームをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームの列の一意な値	df[col].unique()
データフレームのカラムの欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
二つのセットが共通の要素を持たないか調べる	セット.isdisjoint(セット2)
データフレームの指定したカラムの欠損値をxに指定する	df['列A'].fillna(x)
棒グラフをミントクリーム色として描画する	plt.bar(データ列x, データ列y, color='mintcream')
ライトコーラル色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームのあるカラムのNaNを直前の値で補う	df['列A'].fillna(method='ffill')
棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
プロットを色差別なくする	sns.set(pallete='colorblind')
option: ダークスレートブルー色を用いる	color = 'darkslateblue'
散布図の星印を黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
nと整数が同じ値か確認する	整数 == 整数2
散布図に星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
二つのデータフレームを列名を指定して内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
n回だけ文字列中の文字を置き換える	文字列.replace(部分文字列, 置換後の文字列, n)
日付時刻データの年数を見る	aDatetime.year
ローングリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
option: フォントの色をサンディーブラウンに設定する	color = 'sandybrown'
データシリーズのNaNを最大値に変更する	ds.fillna(ds.max())
散布図を黒い上三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図のダイアモンドマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
グリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
スピアマン順位相関係数を用いてデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
縦棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
折れ線グラフのクロス印の大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
数列の各値を両端キューの先頭に追加する	両端キュー.extendleft(数列)
3つの文字列を出力する	print(文字列, 文字列, 文字列)
マップの浅いコピーを作る	辞書.copy()
日付時刻データからn日を減算する	aDatetime - datetime.timedelta(days=n)
データフレームのカラムのモード	mode, count = scipy.stats.mode(df['列A'])
データフレームの指定した列の中に存在する文字列と日付データの合計をカウントする	df['列A'].isin([value, value2]).sum()
ヒストグラムの色をライトスチールブルーにセットする	plt.hist(データ列, color='lightsteelblue')
折れ線グラフの色をプラムに指定する	plt.plot(データ列x, データ列y, color='plum')
折れ線グラフの色をトマトに変更する	plt.plot(データ列x, データ列y, color='tomato')
現在のワーキングディレクトリを使う	os.getcwd()
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
散布図をコーンフラワーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
ダークシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
線グラフの色を濃いシアンに変更する	plt.plot(データ列x, データ列y, color='darkcyan')
実行中の例外情報を知る	etype, evalue, traceback = sys.exc_info()
option: BOM付きを用いる	encoding = 'utf_8_sig'
折れ線グラフの右三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
year年month月day日hour時を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour)
赤い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
縦棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
リストのイミュータブルな集合を作る	frozenset(リスト)
ナバホホワイト色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategrey')
option: フォントの色をライトコーラルにセットする	color = 'lightcoral'
散布図の三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
散布図の星印の色を設定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ファイルパスをベース名と拡張子に分割する	os.path.splitext(filepath)
データフレームの一部の列の欠損値を数値で補う	df[['列A', '列B']].fillna(x)
文字列中にひとつでも非ASCII文字がある	any(not c.isascii() for c in 文字列)
横棒グラフをライトシアン色として描画する	plt.barh(データ列x, データ列y, color='lightcyan')
折れ線グラフの色をロイヤルブルーに指定する	plt.plot(データ列x, データ列y, color='royalblue')
カウンタの項目のカウントを使う	aCounter[element]
ガンマ関数の絶対値に自然対数をとった値を求める	math.lgamma(x)
データを最大最小値として標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ヒストグラムを青色を用いて描画する	plt.hist(データ列, color='blue')
xで指定したカラムの未入力値を補う	df['列A'].fillna(x)
xについて微分を行う	sympy.diff(数式, [|変数]x)
指定された列のカテゴリで集計し、各分散を計算する	df.groupby('列A').var()
正則化付き線形回帰モデルを用意する	model = sklearn.linear_model.ElasticNet()
セットの補集合を使う	セット.difference(セット2)
棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
option: 書き込みモードにする	mode = 'w'
データフレームから同じ内容の行を削除する	df.drop_duplicates(inplace=True)
文字列がn回続くイテラブルを得る	itertools.repeat(element, n)
相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
整数が一桁の数かどうか調べる	-9 <= 整数 <= 9
折れ線グラフをラベンダーブラッシュ色を用いて描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームの一部の列を万の位で四捨五入する	df[['列A', '列B']].round(-4)
半透明の点線でリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
option: グラフの色をディムグレーに指定する	color = 'dimgrey'
オブジェクトがプロパティを持つか	hasattr(obj, プロパティ名)
Excelファイルから複数のシートを指定して読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
文字列中にひとつでも非大文字が含まれるか	any(not c.isupper() for c in 文字列)
追加できるようにファイルをSJISとしてオープンする]	open(filepath, mode='a', encoding='shift_jis')
ネイビー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
全要素を1で初期化したベクトル	np.ones(要素数, dtype=np.int)
折れ線グラフをアリスブルー色として描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームの行リスト	df.index
データフレームの欠損値をその第二四分位数で補完する	df.fillna(df.median())
option: インディゴ色を用いる	color = 'indigo'
折れ線グラフの大バツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
option: ダークカーキにグラフの色を指定する	color = 'darkkhaki'
整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int)
リストとリストについて散布図をプロットして、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列の指定した位置より後に部分文字列が含まれるか判定する	文字列.find(部分文字列, 開始位置) != -1
大文字・小文字を無視してパターンで文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
シャルトリューズ色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
データフレームの一部のカラムをValueMapでまとめて置換する	df[['列A', '列B']].replace(ValueMap)
一番左側のを除いたデータフレーム	df[df.columns[1:]]
行列の要素ごとの積	np.multiply(aArray, aArray2)
数から実数を引く	x - y
ふたつのセットがdisjointか	セット.isdisjoint(セット2)
要素がリストに含まれるか	要素 in リスト
ダークブルー色としてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
データフレームの指定したカラムの中にと日付データがある	df['列A'].isin([value, value2])
option: ミディアムパープル色を用いる	color = 'mediumpurple'
ヒストグラムの色をオレンジに変更する	plt.hist(データ列, color='orange')
option: 表計算ファイルシートの名前をセットする	sheet_name = ['A', 'B']
線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
整数を整数で整数除算する	整数 // 整数2
横軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
現在実行中の例外情報	etype, evalue, traceback = sys.exc_info()
option: データ型として三二ビット整数型を用いる	np.int16 = np.int<nl>dtype = np.int16
ラインを青い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
数式の変数を別の数式で置き換える	数式.subs(変数, 数式2)
option: シャルトリューズにグラフの色を変更する	color = 'chartreuse'
プロットのx軸にラベルを設定する	plt.xlabel('x軸ラベル')
線グラフを貝殻色を用いて描画する	plt.plot(データ列x, データ列y, color='seashell')
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
横棒グラフをホットピンク色として描画する	plt.barh(データ列x, データ列y, color='hotpink')
デピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
ヒストグラムの色をレモンシフォンにセットする	plt.hist(データ列, color='lemonchiffon')
表計算から複数のシートを指定してデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
縦棒グラフを紺色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
単位行列を作成する	np.eye(行数, 列数)
ふたつのセットが共通の要素を持たないか確認する	セット.isdisjoint(セット2)
要素がセットの要素でない	要素 not in セット
データフレームの指定したカラムの中に日付データとがいくつあるかカウントする	df['列A'].isin([value, value2]).sum()
JSONファイル入力を辞書に変換する	json.load(ファイル入力)
折れ線グラフを半透明の点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
リストとデータ列の散布図に赤い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
文字が片仮名かどうか調べる	# Tips<nl>('ァ' <= 文字 <= 'ン')
データフレームから指定されたデータ型の列名一覧	df.select_dtypes(型).columns
横棒グラフの色をホワイトにする	plt.barh(データ列x, データ列y, color='white')
右三角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
ライトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
ヒストグラムを黄色色を使って描画する	plt.hist(データ列, color='yellow')
predicateFuncが真となる列の要素	itertools.dropwhile(predicateFunc, iterable)
カラーコードで折れ線プロットの色を指定する	plt.plot(データ列x, データ列y, color='#800080')
散布図でデータフレームをグラフ化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
整数が一桁かどうか確認する	-9 <= 整数 <= 9
文字列から指定した文字を消す	文字列.replace(文字, '')
ピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
リストとリストについての散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategrey')
多次元データをt分布型確率的近傍埋め込み法を用いて要素次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
実数を浮動小数点数で	x // y
指定した列の中に日付データと文字列があるか確認する	df['列A'].isin([value, value2])
データフレームのある列の値がxに等しい行を選ぶ	df[df['列A'] == x]
CSVファイルをカラムの名前を指定せず読み込む	pd.read_csv('file.csv', header=None)
日付時刻データの時間数を見る	aDatetime.hour
データフレームの全カラムの相関をプロット化する	sns.pairplot(df)
option: ナバホホワイトにフォントの色を指定する	color = 'navajowhite'
数式の変数についてのn階偏微分を計算する	sympy.diff(数式, 変数, n)
ヒストグラムの色をミントクリームにする	plt.hist(データ列, color='mintcream')
データ列を箱ヒゲ図にする	plt.boxplot(データ列)
データフレームの中の列を分割する	pd.cut(df[col], aList)
文字列を最初のカンマで二分割する	文字列.partition(',')
文字列をISO8601形式を用いてタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
列の長さnの順列を得る	itertools.permutations(iterable, n)
SVDとして項次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
データシリーズの日を使う	ds.dt.day
データフレームの相関行列を求める	df.corr()
ヒストグラムの色をカーキに指定する	plt.hist(データ列, color='khaki')
数列からランダムに1個選んでリストにする	random.choice(数列)
ファイル全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
文字列の左側からタブを除く	文字列.lstrip('\t')
データフレームのカラムの欠損値を中央値で置換する	df['列A'].fillna(df['列A'].median())
ライトサーモン色でヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
データフレームのあるカラムの秒を使う	df['列A'].dt.second
入力からJSONフォーマットのデータをロードする	json.load(ファイル入力)
リストと配列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: 耐火レンガを使う	color = 'firebrick'
黒い▽マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
イテラブルとリストについて散布図をプロットしてマーカーを三角に指定する	plt.plot(データ列x, データ列y, marker='^')
文字列全体をパターンにマッチさせる	re.fullmatch(pattern, s)
文字列が英数字	文字列.isalnum()
赤い破線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
空の回帰木モデルを作成する	model = sklearn.tree.DecisionTreeRegressor()
行列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
プロットの用途をスライドに設定する	sns.set(context='talk')
指定された文字列で文字列が終わるかどうか調べる	文字列.endswith(部分文字列)
マップの値を列挙する	辞書.values()
option: レモンシフォンにフォントの色を設定する	color = 'lemonchiffon'
option: タンを用いる	color = 'tan'
散布図にrgbの上三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列は全て印字できるか確認する	文字列.isprintable()
スタックをセットにする	set(両端キュー)
棒グラフをグリーンイエロー色として描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームのカラムの調和平均を算出する	scipy.stats.hmean(df['列A'])
空白で文字列を区切り、、文字列リストにする	文字列.split()
ハニーデュー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
TSVファイルをデータフレームとして読み込む	pd.read_csv('file.tsv', sep='\t')
ミディアムブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
ヒストグラムの色をミッドナイトブルーに変更する	plt.hist(データ列, color='midnightblue')
ふたつの辞書を結合する	辞書 | 辞書2
横棒グラフをペールグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='palegreen')
ロバスト分類器を作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
長さの制限された両端キューをイテラブルから生成する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
option: グラフの色をフクシアに変更する	color = 'fuchsia'
ヒストグラムの色をモカシンにする	plt.hist(データ列, color='moccasin')
ケンドール相関係数としてデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
青色化する	f'\033[34m{x}\033[0m'
折れ線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
文字列をコロンで二分して、残りを見る	文字列.partition(':')[-1]
辞書を用いて文字列を数える	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
散布図にポイントマーカーを用いる	plt.scatter(データ列x, データ列y, marker='.')
横向きに2つのデータフレームを一つにする	pd.merge(df, df2)
エンコーディングで文字列をバイト列に変換する	文字列.encode(encoding=encoding)
散布図をrgbの右三角マーカーで描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
空のロジスティック回帰モデルを作成する	model = sklearn.linear_model.LogisticRegression()
縦棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
リストの最後からn番目以前の部分を取り出す	リスト[:-n]
浮動小数点数のn乗の浮動小数点数剰余を計算する	pow(x, n, y)
カラーパレットを暗くする	sns.set(pallete='dark')
折れ線グラフの色をラベンダーに変更する	plt.plot(データ列x, データ列y, color='lavender')
散布図をrgbのダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストと配列の散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: フォントの色をシアンにする	color = 'cyan'
データフレームをあるカラムで昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
プロットを暗くする	sns.set(pallete='dark')
折れ線グラフの右三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ある列をインプレイスでドロップする	df.drop('列A', axis=1, inplace=True)
散布図の右三角印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ミディアムスプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
インディアンレッド色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
アヤメのデータセットからデータフレームをロードする	df = sns.load_dataset('iris')
データフレームを表示するとき、ヘッダー行を右寄せに変更する	pd.set_option('colheader_justify', 'right')
ヒストグラムの色をミディアムアクアマリンに変更する	plt.hist(データ列, color='mediumaquamarine')
option: フォントの色をスプリンググリーンに設定する	color = 'springgreen'
二つの計算結果をプリントする	print(式, 式)
データフレームの一部のカラムを10の位で四捨五入して、整数にする	df[['列A', '列B']].round(-1).astype(int)
データをスケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
カーネル密度推定グラフ描画でを使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームから一つの列のみ抽出する	df[['列A']]
左三角マーカーを用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
両端キューをイテラブルから新規生成する	collections.deque(イテラブル)
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
数を実数で割る	x / y
ビン数nで配列を分割する	pd.cut(aArray, n)
イテラブルから重複なくランダムにn要素選んでリストにする	random.sample(イテラブル, k=n)
最後から文字列を空白で分割する	文字列.rsplit()
日付データは日付データと同時かどうか確認する	aDate == aDate2
要素がリストの要素か	要素 in リスト
タイムスタンプデータを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
文字列全体がパターンに複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
プロットを全般的に淡くする	sns.set(pallete='muted')
L1ノルムでデータを正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
二つのデータフレームを縦向きに連結する	pd.concat([df, df2], axis=0)
日付データの月数を使う	aDate.month
折れ線グラフの印を丸にする	plt.plot(データ列x, データ列y, marker='o')
綺麗なグラフを使う	import seaborn as sns
プラットフォームの符号付き整数の最大値を知る	sys.maxsize
横棒グラフをダークバイオレット色として描画する	plt.barh(データ列x, データ列y, color='darkviolet')
レモンシフォン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
option: ダークカーキを使う	color = 'darkkhaki'
回帰分析をスタッキングでする	sklearn.ensemble.StackingRegressor()
yについて数式のインテグラルを求める	sympy.integrate(数式, y)
ヒストグラムの色をライトスチールブルーに変更する	plt.hist(データ列, color='lightsteelblue')
双方向キューの末尾にイテラブルの値を追加する	両端キュー.extend(イテラブル)
option: グラフの色をアクアマリンに指定する	color = 'aquamarine'
オールドレース色を使ってヒストグラムを描画する	plt.hist(データ列, color='oldlace')
ミディアムターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
日付時刻データにn分分、足す	aDatetime + datetime.timedelta(minutes=n)
データフレームのあるカラムの月を使う	df['列A'].dt.month
データ列をn個にビン分割する	pd.cut(ds, n)
グラフの見た目をよくする	import seaborn as sns
ヒストグラムをピーチパフ色として描画する	plt.hist(データ列, color='peachpuff')
識別子がビルトインかどうか判定する	inspect.isbuiltin(識別子)
データフレームの行を範囲指定して取り出す	df[start:end]
を用いてデータフレームの選択した列の相関行列を計算する	df[['列A', '列B']].corr(method='kendall')
中央値でリストをビン分割する	pd.qcut(aList, 2)
リストの最後のn要素を捨てる	リスト[:-n]
ファイルをオープンして]、追加ストリームを見る	'a' = 'a'<nl>open(filepath, mode='a')
xを赤色で表示できる文字列にする	f'\033[31m{x}\033[0m'
縦棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
option: グラフの色をライトゴールドロディイエローにセットする	color = 'lightgoldenrodyellow'
データフレームを表示するとき、表示される列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
横棒グラフを紺碧色を用いて描画する	plt.barh(データ列x, データ列y, color='azure')
折れ線グラフの▽マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ふたつの列からグループ化し最小値を計算する	df.groupby(['列A', '列B'], as_index=False).min()
行列のスカラー倍を求める	aArray * n
行列の行ごとの標準偏差を求める	np.std(aArray, axis=1)
タプルの最後からn番目以前の要素を取り出す	タプル[:-n]
ひとつでも小文字が文字列中に含まれるか調べる	any(c.islower() for c in 文字列)
散布図の色を深紅にする	plt.scatter(データ列x, データ列y, color='crimson')
option: 白色を使用する	color = 'white'
データフレームのあるカラムの中にいくつ文字列が存在するかカウントする	df['列A'].isin([value]).sum()
データフレームの選択したカラムの中にいくつ欠損値があるかカウントする	df[['列A', '列B']].isna().sum()
プロットの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
セットをイミュータブルにする	frozenset(セット)
余弦	math.cos(x)
改行しないで2つの数値をプリントする	print(数値, 数値, end='')
文字列中にひとつでもASCII文字が含まれるかどうか調べる	any(c.isascii() for c in 文字列)
棒グラフをトマト色を用いて描画する	plt.bar(データ列x, データ列y, color='tomato')
サイコロと同じ乱数を生成する	random.randint(1, 6)
指定したカラムによって小さい順にデータフレームをソートする	df.sort_values(by='列A', ascending=True)
データフレームの一部の列の欠損値を前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
タプルの中の最大値を計算する	max(タプル)
分割数nで列をビニングする	pd.cut(ds, n)
カラムの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
折れ線グラフの上三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
半透明の点線として数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
文字列の大文字小文字を入れ替える	文字列.swapcase()
三つのデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
データフレームを散布図でプロット化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
文字列中にアスキー文字が含まれないか調べる	any(not c.isascii() for c in 文字列)
ひとつでも英数字が文字列中に含まれるかテストする	any(c.isalnum() for c in 文字列)
文字列の大きさ	len(文字列)
option: グラフの色をライトグリーンに変更する	color = 'lightgreen'
ミッドナイトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
option: 文字コードをUTF8にセットする	encoding = 'utf-8'
列名を指定してデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
ミディアムパープル色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
青い点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
フクシア色としてヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
あらかじめASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
折れ線グラフを描画し、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: ミディアムパープルを使う	color = 'mediumpurple'
散布図の大バツマーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
リストの要素を文字列として、指定した文字でつなげる	文字.join(map(str, リスト))
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
文字列を改行で区切り、文字列リストにする	文字列.splitlines()
空白が文字列中に存在しないかどうかテストする	any(not c.isspace() for c in 文字列)
二つのデータフレームをつなぐ	# concat<nl>pd.concat([df, df2])
データフレームの一部の列がどの程度、正規分布から尖っているか見る	df[['列A', '列B']].skew()
散布図をライトサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
year年を日付時刻にする	datetime.datetime(year=year, month=1, day=1)
最初のコマンドライン	sys.argv[1]
あるカラムの中にある文字列の合計を数える	df['列A'].isin([value]).sum()
グラフ描画でカーネル密度推定を用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームのカラム間の積立相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
表から列を１つ選択する	df[['列A']]
指定した列の値で集計し、合計を計算する	df.groupby('列A').sum()
データフレームをグループ化し、あるカラムに対し個数を計算する	df.groupby('列A')['列B'].count()
日付データが火曜日かどうか調べる	aDate.weekday() == 1
x座標の目盛を非表示にする	plt.xticks([])
イエローグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
淡いピンク色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
黒いダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: カーキにグラフの色を設定する	color = 'khaki'
文字列をタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: グリーンイエローを使用する	color = 'greenyellow'
ふたつの整数の商を求める	整数 / 整数2
折れ線グラフのマーカーを▲印にする	plt.plot(データ列x, データ列y, marker='^')
データシリーズの未入力値をモードにセットする	ds.fillna(ds.mode().iloc[0])
リストを中央値で分割する	pd.qcut(aList, 2)
リストをJSON形式を用いて出力に保存する	json.dump(リスト, ファイル出力, ensure_ascii=False)
option: 色をブランチドアーモンドに設定する	color = 'blanchedalmond'
二つの文字列を順に表示する	print(文字列, 文字列)
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
作画で使うフォントを指定する	sns.set(font=フォント名)
赤い三角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
横棒グラフを描画し、、棒の幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
縦棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
表計算ファイルをデータフレームとして読む	pd.read_excel('file.xlsx')
フクシアにヒストグラムの色を変更する	plt.hist(データ列, color='fuchsia')
整数が一桁の整数	0 <= 整数 <= 9
コマンドラインを列挙する	sys.argv
ひらがなをカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
散布図のクロスマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
バイアスなしの重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
変数がマイナス無限大に近づくとき極限値を求める	sympy.limit(数式, 変数, -oo)
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
青い星印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの選択した列のNaNを最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
ファイルパスをバイナリ書き込みモードを用いてオープンして]fとする	f = open(filepath, mode='wb')
データフレームのある列をドロップし、みる	df.drop('列A', axis=1)
リスト内の要素は全て真か調べる	all(リスト)
赤い▲マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図をミディアムスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
文字列を両端キューのn番目に差し込む	両端キュー.insert(n, 文字列)
回帰分析をパーセプトロンを用いて行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
数列と配列についての散布図に赤い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
リストをカンマ区切りでプリントする	print(*リスト, sep=',')
配列の折れ線グラフをプロットして、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
ミディアムオーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
シエナにヒストグラムの色を設定する	plt.hist(データ列, color='sienna')
ケースを無視して正規表現で文字列を区切る	re.split(pattern, s, flags=re.IGNORECASE)
線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightgreen')
線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
文字列中に非英数字があるかどうか	any(not c.isalnum() for c in 文字列)
範囲を指定して部分文字列を後方から探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
ライトコーラル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
オブジェクトのプロパティを値に変更する	setattr(obj, プロパティ名, 値)
８進数字を全部求める	string.octdigits
ある列のカテゴリで集計し、それぞれの個数を求める	df.groupby('列A').count()
ガウス過程分類器を作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: マーカーを大バツに指定する	marker = 'X'
データフレームの2つの列を並べて箱ヒゲ図を用いて描画する	plt.boxplot([df['カラム'], df['カラム']])
オブジェクトが名前付きタプルか判定する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
スレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='slateblue')
tan	math.tan(x)
白い線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
未入力値のある行を削除する	df.dropna(inplace=True)
スノー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
配列とデータ列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
線グラフの色をパウダーブルーにセットする	plt.plot(データ列x, データ列y, color='powderblue')
クラス分類をアンサンブル学習で行う	sklearn.ensemble.VotingClassifier()
作画のフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
JSON形式の文字列をオブジェクトにする	data = json.loads(文字列)
プロットに水平方向の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
データフレームの次元の大きさを見る	df.shape
散布図を▽マーカーで描く	plt.plot(データ列x, データ列y, marker='v')
線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームとデータシリーズを連結する	pd.concat([df, ds], axis=1)
線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
今日の曜日を使う	datetime.datetime.today().weekday()
バイアスなしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
明るくカラーパレットをグラフの描画で使う	sns.set(pallete='bright')
リストの末尾から値を取り出す	リスト.pop()
nからn2の範囲で	range(n, n2)
タイムスタンプデータの秒数を求める	aDatetime.second
JSON形式で辞書をファイル出力にダンプする	json.dump(辞書, ファイル出力, ensure_ascii=False)
折れ線グラフの色をライトイエローにする	plt.plot(データ列x, データ列y, color='lightyellow')
グラフで利用可能な色名の一覧	matplotlib.colors.cnames
バイナリできるようにファイルを開く]	'rb' = 'a'<nl>open(filepath, mode='rb')
文字列が指定したに存在するかどうか調べる	文字列 not in 別の文字列
ロバストな線形分類器を作る	model = sklearn.linear_model.HuberClassifier()
グラフの色テーマを色差別なくする	sns.set(pallete='colorblind')
重複ありでランダムにデータフレームから5行をサンプリングする	df.sample(5, replace=True)
グラフの色を暗くする	sns.set(pallete='dark')
バリーウッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
マップのキーを要素に設定する	辞書[キー] = element
オブジェクトがリストクラスのインスタンスか調べる	list = int<nl>isinstance(obj, list)
縦棒グラフをトマト色を用いて描画する	plt.bar(データ列x, データ列y, color='tomato')
ファイルパスの拡張子	os.path.splitext(filepath)[1].lstrip('.')
option: ミディアムオーキッドを使う	color = 'mediumorchid'
ヒストグラムの色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
オブジェクトはメソッドかどうか確認する	inspect.ismethod(オブジェクト)
浮動小数点数を二乗する	x ** 2
ヒストグラムを描画して半透明ににする	plt.hist(データ列x, alpha=0.5)
最小値でデータシリーズの欠損値を補う	ds.fillna(ds.min())
部分文字列で文字列を二分して後半を使う	文字列.partition(部分文字列)[-1]
数列から重複なく、n個ランダムに選んでリスト化する	random.sample(数列, k=n)
ファイルパスの区切り記号	os.sep
option: スチールブルーを用いる	color = 'steelblue'
回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
線グラフを色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
折れ線グラフの大バツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データフレームの指定したカラムを万の位で四捨五入する	df['列A'].round(-4)
データシリーズの歪み	ds.kurt()
改行せず二つの計算結果をプリントする	print(式, 式, end='')
セットが空集合	len(セット) == 0
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
アリスブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
棒グラフをミディアムパープル色を使って描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
黒い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
kを底とする対数	math.log(x, k)
実行環境はLinuxか確認する	sys.platform.startswith('linux')
ヒストグラムをブランチドアーモンド色として描画する	plt.hist(データ列, color='blanchedalmond')
文字列中にひとつでも非小文字が含まれる	any(not c.islower() for c in 文字列)
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
マルーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
数式を簡単化する	sympy.sympify(数式)
プロットの横軸を対数に変更する	plt.xscale('log')
勾配ブースティング回帰木を作成する	model = sklearn.ensemble.GradientBoostingRegressor()
データフレームを欠損値を含めてある列でグループ化する	df.groupby('列A', dropna=False)
yがマイナス無限大に近づく時、数式の極限値を求める	sympy.limit(数式, y, -oo)
列の各データ値の出現数	ds.value_counts()
耐火レンガ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
部分文字列で文字列を区切って列挙する	文字列.split(部分文字列)
option: 3二ビット整数型を使う	np.int16 = np.int<nl>dtype = np.int16
データフレームの一部のカラムを一万の位で四捨五入する	df[['列A', '列B']].round(-4)
ヒストグラムをゴーストホワイト色を使って描画する	plt.hist(データ列, color='ghostwhite')
xの小数点以下'5'桁の文字列に変換する	':.5f'.format(x)
横棒グラフをオレンジ色として描画する	plt.barh(データ列x, データ列y, color='orange')
データフレームのカラムの幾何平均を使う	scipy.stats.gmean(df['列A'])
データフレームを並べる	df.sort_values('キーとなる列')
ピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
データフレームのカラムを各グループごとに色付けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データシリーズの欠損値をモードに設定する	ds.fillna(ds.mode().iloc[0])
横棒プロットを描く	plt.barh(ラベル列, データ列)
指定の列に重複があればドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
データフレームを表示するとき、列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
文字列を区切り文字で二分割して、前半を求める	文字列.partition(セパレータ)[0]
折れ線グラフの▽マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
整数が1、もしくは2か	整数 == 1 or 整数 == 2
等量で配列をn個にビニングする	pd.qcut(aArray, n)
クラス分類をアンサンブル学習として行う	sklearn.ensemble.VotingClassifier()
棒グラフをアイボリー色として描画する	plt.bar(データ列x, データ列y, color='ivory')
データフレームのどの値が頻出か確認する	df.mode()
データ列の変化を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
option: ダークグレー色を用いる	color = 'darkgrey'
環境がLinuxか調べる	sys.platform.startswith('linux')
縦棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
両端キューの先頭の要素	両端キュー[0]
リストを境界値として配列をビニングする	pd.cut(aArray, aList)
出力するCSV形式の小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
アクア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
データフレームの選択した列の相関行列を計算する	df[['列A', '列B']].corr()
横棒グラフを青色として描画する	plt.barh(データ列x, データ列y, color='blue')
散布図を四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s')
濃いシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームのある列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
option: 色をダークシアグリーンに変更する	color = 'darkseagreen'
行列を平坦にする	aArray.flatten()
ゼロ埋めされたベクトルを作成する	np.zeros(要素数)
新しい重回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
範囲から配列	np.linspace(最小値, 最大値, 要素数)
データフレームをグループ化しある列に対し分散を求める	df.groupby('列A')['列B'].var()
表の形状	df.shape
数が負	x < 0
リストの最後からn番目以前の要素を得る	リスト[:-n]
ふたつの列からグループ化し分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
formatのパターンとして文字列から日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
ファイルパスをバイナリ書き込みモードで開く]	'wb' = 'a'<nl>open(filepath, mode='wb')
数値を改行しないでプリントする	print(数値, end='')
ライトスカイブルー色を使ってヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
データフレームのn行以降取り出す	df[n:]
データフレームを昇順にインデックスによってソートする	df.sort_index(ascending=True)
マッピングの項目をひとつずつ処理する	for value in 辞書.values():<nl><tab>print(value)  # FIXME
改行なしに数値を出力する	print(数値, end='')
コマンドの第一引数	sys.argv[1]
横棒グラフをパウダーブルー色として描画する	plt.barh(データ列x, データ列y, color='powderblue')
ヒストグラムと勾配ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
回帰分析をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
整数をセットから除く	セット.remove(数)
指定した列のカテゴリで集計し、各平均値を求める	df.groupby('列A').mean()
データ列を用いる	import pandas as pd
日付データからn分、引く	aDate - datetime.timedelta(minutes=n)
リストの要素を両端キューの末尾に追加する	両端キュー.extend(リスト)
データフレームを丸めて整数型にする	df.round().astype(int)
黄色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
文字列を最後の部分文字列で二分して、前半を求める	文字列.rpartition(部分文字列)[0]
回帰分析を部分的最小二乗法で行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
yについてのn階微分を求める	sympy.diff(数式, y, n)
0からnまでの整数列を作る	list(range(n+1))
option: エンコーディングを文字列の示す文字コードに指定する	encoding = s
データシリーズを千の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
配列の推移を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ヒストグラムをネイビー色として描画する	plt.hist(データ列, color='navy')
ヒストグラムを黄色色として描画する	plt.hist(データ列, color='yellow')
データフレームの選択したカラムを100の位で丸める	df[['列A', '列B']].round(-2)
部分文字列が文字列の終了位置より前に存在するか調べる	文字列.find(部分文字列, 0, 終了位置) != -1
横棒グラフをネイビー色として描画する	plt.barh(データ列x, データ列y, color='navy')
JSON形式としてデータをファイル出力にダンプする	json.dump(データ, ファイル出力, ensure_ascii=False)
ライム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
線グラフをカデットブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='cadetblue')
イエローグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
ASCII限定としてパターンで文字列を分割する	re.split(pattern, s, flags=re.ASCI)
セットを差分だけにする	セット.difference_update(セット2)
サーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
赤い大バツマーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
リストをビン数nで分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
パールゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
option: 色をアリスブルーに変更する	color = 'aliceblue'
データをJSON形式としてファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
折れ線グラフの色をアリスブルーにする	plt.plot(データ列x, データ列y, color='aliceblue')
散布図に黒い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='k')
要素がセットのメンバーに含まれないか調べる	要素 not in セット
リストを無限に繰り返す	itertools.cycle(iterable)
棒グラフをプラム色を用いて描画する	plt.bar(データ列x, データ列y, color='plum')
イテラブルの各要素を関数でフィルタする	map(func, iterable)
セットが上位集合もしくは等しい	セット >= セット2
データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
文字列がセットのいずれか	文字列 in セット
棒グラフをオールドレース色を使って描画する	plt.bar(データ列x, データ列y, color='oldlace')
ブランチドアーモンドにヒストグラムの色を設定する	plt.hist(データ列, color='blanchedalmond')
文字列を双方向キューにenqueueする	両端キュー.append(文字列)
タイムスタンプデータにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
option: 青に色を設定する	color = 'blue'
n個にデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
縦軸だけ目盛り線	plt.grid(axis='y')
折れ線グラフの下三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
ダークスレートブルーにヒストグラムの色を変更する	plt.hist(データ列, color='darkslateblue')
データフレームの選択したカラムの中に文字列があるかどうか調べる	df[['列A', '列B']].isin([value])
データフレームを各列毎にグループ化して文字列というグループの個数を計算する	df.groupby(column).size()[s]
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategrey')
yが0に近づくとき、極限値を算出する	sympy.limit(数式, y, 0)
option: マーカーをクロスに変える	marker = 'x'
配列とリストについての散布図に黒い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
option: マーカーをクロスに変更する	marker = 'x'
データフレームのある三つのカラムを抽出する	df[['列A', '列B', '列C']]
option: 印を星に変更する	marker = '*'
実数の天井を算出する	math.ceil(x)
パパイヤウィップにヒストグラムの色を指定する	plt.hist(データ列, color='papayawhip')
整数を整数で割った余りを求める	整数 % 整数2
ヒストグラムをミディアムシアグリーン色として描画する	plt.hist(データ列, color='mediumseagreen')
散布図をrgbの三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフを青紫色を用いて描画する	plt.plot(データ列x, データ列y, color='violet')
パウダーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
ヒストグラムをスチールブルー色を用いて描画する	plt.hist(データ列, color='steelblue')
option: 色をアンティークホワイトに変更する	color = 'antiquewhite'
色名とカラーコードの対応表を求める	matplotlib.colors.cnames
配列のケンドールの相関係数	scipy.stats.kendalltau(配列, 配列2)
棒グラフをサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='salmon')
文字列からタブを取り除く	文字列.replace('\t', '')
実数のサインの逆数を求める	math.asin(x)
キーが辞書上で定義済みか	キー in 辞書
改行なしにxの出力を行う	print(x, end='')
何回まで再帰ができるかを知る	sys.getrecursionlimit()
ある列の値ごとの平均値	df.groupby('列A').mean()
option: フォレストグリーン色を用いる	color = 'forestgreen'
データフレームから散布図を作り回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
タプルの各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
タプル中の要素が最初に見つかるインデックスを見る	タプル.index(要素)
散布図をピンク色を使って描画する	plt.scatter(データ列x, データ列y, color='pink')
文字列中にひとつでも非アスキー文字が含まれるかどうか調べる	any(not c.isascii() for c in 文字列)
オブジェクトが関数かどうか調べる	inspect.isfunction(オブジェクト)
黄緑色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ファイルパスを文字列の示す文字コードでオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
横棒グラフを真紅色で描画する	plt.barh(データ列x, データ列y, color='crimson')
文字列がセットのメンバーでないかどうか調べる	文字列 not in セット
option: ターコイズにフォントの色を設定する	color = 'turquoise'
要素がマップの値に含まれていないかどうか確認する	element not in 辞書.values()
折れ線グラフをシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='cyan')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか確認する	文字列.find(部分文字列, 開始位置, 終了位置) == -1
イテラブルのコンビネーションを得る	itertools.combinations(iterable, n)
ベクトルの列ごとの平均を計算する	np.mean(aArray, axis=0)
整数を16進文字列に変換する	hex(整数)[2:]
縦棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
横棒グラフをダークオーキッド色を使って描画する	plt.barh(データ列x, データ列y, color='darkorchid')
option: フォントの色をディムグレーにする	color = 'dimgray'
三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
実数の3乗を計算する	x ** 3
オリベドラブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
リストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
赤い星マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
十六進数字を全部見る	string.hexdigits
配列をリストを境界値としてビンニングする	pd.cut(aArray, aList)
縦棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
浮動小数点数を十の位で丸める	round(x, -1)
mathを使う	import math
改行を取り除いて標準入力から1行だけ読む	sys.stdin.readline().rstrip()
xを黒色で表示できる文字列にする	f'\033[30m{x}\033[0m'
データフレームの選択したカラムの標本分散を求める	df[['列A', '列B']].var(ddof=0)
option: ドジャーブルーを使用する	color = 'dodgerblue'
表データの行の一覧	df.index
option: ミディアムブルーにグラフの色を指定する	color = 'mediumblue'
文字列を両端キューのn番目に挿入する	両端キュー.insert(n, 文字列)
数列を縦軸、配列を横軸として、大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
xについて数式を偏微分する	sympy.diff(数式, [|変数]x)
データシリーズがどれだけ、正規分布から歪んでいるか調べる	ds.kurt()
空白で文字列を分割して、文字列リストに変換する	文字列.split()
データフレームの選択した列の中にある文字列の数を数える	df[['列A', '列B']].isin([value]).sum()
データフレームの選択したカラムの中に文字列が含まれる	df[['列A', '列B']].isin([value])
文字列を正規表現で区切る	re.split(pattern, s)
実数のサインの逆数	math.asin(x)
８ビット整数型のゼロ埋めされた行列を作成する	np.zeros(要素数, dtype=np.int8)
赤いポイントマーカーをリストと配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
リストとリストの散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
大きい順にデータフレームを二つの列で並べ直す	df.sort_values(by=['列A', '列B'], ascending=False)
外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
リストをn個に等量でビンニングする	pd.qcut(aList, n)
ヒストグラムを淡い茶色色を用いて描画する	plt.hist(データ列, color='tan')
辞書をインデントを指定してJSON文字列にする	json.dumps(辞書, ensure_ascii=False, indent=n)
散布図に左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
プロットの用途を論文に変更する	sns.set(context='paper')
ヒストグラムの色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
データフレームをカラムの名前を付けず保存する	df.to_csv('file.csv', header=None)
指定されたカラムで集計し標準偏差を求める	df.groupby('列A').std()
最初のカンマで文字列を二分して前の方を使う	文字列.partition(',')[0]
白色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフの色をライムグリーンに変更する	plt.plot(データ列x, データ列y, color='limegreen')
リストと配列について散布図を描画してバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの選択したカラムのNaNを前の行の値で埋める	df[['列A', '列B']].fillna(method='ffill')
整数が整数2以下かどうか	整数 <= 整数2
半透明の一点鎖線でイテラブルの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データシリーズを十の位で四捨五入して整数型にする	ds.round(-1).astype(int)
文字列を最後のセパレータで分割する	文字列.rpartition(セパレータ)
リストとリストについての散布図に赤い三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
一行をランダムにデータフレームから選択する	df.sample()
ヒストグラムをゴーストホワイト色として描画する	plt.hist(データ列, color='ghostwhite')
指定した列の母標準偏差を求める	df['列A'].std(ddof=0)
データシリーズの年度を見る	ds.dt.year
ガンマ関数を使う	math.gamma(x)
プロットの色を淡くする	sns.set(pallete='muted')
データフレームから列を3つ選択する	df[['列A', '列B', '列C']]
nと整数が等しいか	整数 == 整数2
散布図のクロスマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ファイルのディレクトリ名を使う	os.path.dirname(filepath)
縦棒グラフをダーク・スラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
整数が1、もしくは2かどうか調べる	整数 == 1 or 整数 == 2
ダークバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
太文字にする	f'\033[1m{x}\033[0m'
データフレームをグループ化し、平均値を求める	df.groupby('列A').mean()
イテラブルから重複なくn個ランダムに選んでリスト化する	random.sample(イテラブル, k=n)
データシリーズの統計量を見る	ds.describe()
リストをコピーする	リスト.copy()
散布図をローングリーン色として描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
option: フォントの色をローングリーンに設定する	color = 'lawngreen'
分割数nを用いて配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームをある列を用いて昇順に並べる	df.sort_values(by='列A', ascending=True)
整数が整数2以上か判定する	整数 >= 整数2
option: シアン色を使用する	color = 'cyan'
辞書をインデント幅を指定してJSON形式にエンコードする	json.dumps(辞書, ensure_ascii=False, indent=n)
option: グラフの色をシアンに指定する	color = 'cyan'
行列の列を選択する	aArray[:, 列番号]
改行しないで二つの文字列をプリントする	print(文字列, 文字列, end='')
線グラフの色をシャルトリューズに指定する	plt.plot(データ列x, データ列y, color='chartreuse')
option: シーグリーン色を用いる	color = 'seagreen'
折れ線グラフをロイヤルブルー色として描画する	plt.plot(データ列x, データ列y, color='royalblue')
option: 行列のデータ型を指定する	np.int16 = np.int<nl>dtype = np.int16
散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
文字列が全てアルファベットか確認する	文字列.isalpha()
データフレームのカラムのNaNをその最小値で埋める	df['列A'].fillna(df['列A'].min())
option: ゴールドにフォントの色を変更する	color = 'gold'
折れ線グラフの丸印を青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
option: パールゴールデンロッドにフォントの色を変更する	color = 'palegoldenrod'
データフレームを一万の位で丸める	df.round(-4)
数値がセットに含まれないか	数 not in セット
データフレームを各列毎にグループ化して文字列というグループの大きさを計算する	df.groupby(column).size()[s]
最初のセパレータで文字列を二分して、残りを使う	文字列.partition(セパレータ)[-1]
イテラブルから重複なく、n個ランダムに選んでリスト化する	random.sample(イテラブル, k=n)
データフレームをCSV形式を用いて保存する	df.to_csv('file.csv')
クラス分類をブースティングで行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
行列にはいくつ要素が含まれるか調べる	aArray.size
折れ線グラフの色をダークターコイズに変更する	plt.plot(データ列x, データ列y, color='darkturquoise')
今日を文字列を使ってフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
▼マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
日付データは日付データより前か調べる	aDate2 = aDatetime<nl>aDate < aDate2
option: カンマをセパレータで使用する	sep = ','
option: アリスブルーにフォントの色を設定する	color = 'aliceblue'
折れ線グラフの色をアンティークホワイトにセットする	plt.plot(データ列x, データ列y, color='antiquewhite')
識別子は非同期ジェネレータ関数か調べる	inspect.isasyncgenfunction(識別子)
数字を求める	string.digits
option: 文字コードをEUCに設定する	encoding = 'euc_jp'
配列の幾何平均を計算する	scipy.stats.gmean(配列)
本日が火曜日か	datetime.datetime.today().weekday() == 1
赤いポイントマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
青い実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
カウンタのktopをリストとして得る	aCounter.most_common(k)
横棒グラフをダークゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
タイムスタンプデータが土曜日か調べる	aDatetime.weekday() == 5
文字列はセットに含まれるか	文字列 in セット
マップにキーが存在する場合、処理する	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
option: スラグレーにグラフの色をセットする	color = 'slategray'
八進数字を全部求める	string.octdigits
yの方程式として数式を解く	sympy.solve(数式, y)
データをJSONにエンコードする	json.dumps(データ, ensure_ascii=False)
ランダムに重複を認めて100行を表データからサンプリングする	df.sample(100, replace=True)
option: フクシアにグラフの色を設定する	color = 'fuchsia'
タプルを無限に繰り返す	itertools.cycle(iterable)
配列の行ごとの最大	np.max(aArray, axis=1)
ネイビー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
実数のk進対数を求める	math.log(x, k)
折れ線グラフをダークカーキ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
データ列間の平均2乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
白色でプリントできる文字列に変換する	f'\033[37m{x}\033[0m'
option: フォントの色をブランチドアーモンドに変更する	color = 'blanchedalmond'
データフレームの指定したカラムを一万の位で丸める	df['列A'].round(-4)
ダークオリーブグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
範囲から行列を作る	np.linspace(最小値, 最大値, 要素数)
折れ線グラフのポイント印の大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
線グラフをミディアムオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データフレームのあるカラムの値がxに等しくない行を抽出する	df[df['列A'] != x]
プラットホームがLinuxか確認する	sys.platform.startswith('linux')
データ列と配列についての散布図に赤い菱形マーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
横棒グラフをナバホホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='navajowhite')
淡い茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
ライトスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
２つの変数を順に表示する	print(変数名, 変数名)
散布図をダークグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
右三角印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
ライトゴールドロディイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
option: フォントの色をカデットブルーに設定する	color = 'cadetblue'
配列と配列の散布図を描画してマーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
データフレームの選択したカラムの欠損値を最大値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
セットが空でない	len(セット) != 0
ファイルをUTF8として書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
最初の区切り記号で文字列を二つに分ける	文字列.partition(セパレータ)
ある列の文字列が部分文字列で終わらないデータを抽出する	df[~ df['列A'].str.endswith(部分文字列)]
ライトイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
赤い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='r')
option: ファイルを出力先にする	file = sys.open('file.txt', 'w')
データフレームの選択したカラムを一万の位で丸める	df[['列A', '列B']].round(-4)
rgbの左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
配列とリストの散布図にrgbの四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: 色をフォレストグリーンに設定する	color = 'forestgreen'
全八進数字	string.octdigits
小数点数の余弦を求める	math.cos(x)
折れ線グラフをシャルトリューズ色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
列名を指定して二つのデータフレームを全ジョインする	pd.merge(df, df2, on='列A', how='outer')
二つの文字列をプリントする	print(文字列, 文字列)
モカシン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
散布図に黒い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
ブラック色で線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
データ列をn個にビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
整数が一桁の正の整数	0 <= 整数 <= 9
行列と同じ大きさの空配列を作成する	np.empty_like(aArray)
ヒストグラムを青緑色を用いて描画する	plt.hist(データ列, color='teal')
文字列を最後のカンマで分けたときの残りの文字列を使う	文字列.rpartition(',')[-1]
データフレームの一部のカラムの中の未入力値の合計をカウントする	df[['列A', '列B']].isna().sum()
文字列を最後のコロンで二分して、最初の方を使う	文字列.rpartition(':')[0]
ライトゴールドロディイエローにヒストグラムの色を指定する	plt.hist(データ列, color='lightgoldenrodyellow')
コーンズシルク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
青色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
双方向キュー中の文字列の位置	両端キュー.index(文字列)
散布図のバツ印を青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
リストと配列について散布図を描画して、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
データフレームの選択したカラムを丸めて、整数にする	df[['列A', '列B']].round().astype(int)
列を中央値でビニングする	pd.qcut(ds, 2)
option: ブラックを用いる	color = 'black'
線グラフをダーク・スラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
キーが辞書にあるか調べる	キー in 辞書
R2を求める	sklearn.metrics.r2_score(データ列, データ列2)
xとyをスラッシュで区切って出力する	print(x, y, sep='/')
データフレームの中に日付データが存在する	df.isin([value])
実部と虚部から複素数を作る	complex(x, y)
散布図をクロス印で描画する	plt.scatter(データ列x, データ列y, marker='x')
配列の歪度	scipy.stats.skew(配列, bias=False)
データフレームを列によってグループ分けして、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
文字列をコロンで二分して残りを求める	文字列.partition(':')[-1]
線グラフの色をダークオレンジにする	plt.plot(データ列x, データ列y, color='darkorange')
データフレームの列のユニークな要素数	df[col].nunique()
リストとイテラブルについて散布図をプロットして下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
実数で実数を割る	x / y
折れ線グラフをダークブルー色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
カテゴリ列で色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
横棒グラフをダークカーキ色として描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
文字列の先頭を求める	文字列[0]
データフレームの選択した列の未入力値をxに指定する	df[['列A', '列B']].fillna(x)
文字列を走査しパターンに大文字・小文字を無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
deqのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
option: シスルにグラフの色を設定する	color = 'thistle'
データフレームの一部の列が正規分布からどれだけ、歪んでいるか見る	df[['列A', '列B']].kurt()
option: フォントの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
インデント幅を指定してリストをJSONにエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
折れ線グラフをシエナ色として描画する	plt.plot(データ列x, データ列y, color='sienna')
レベッカパープルにヒストグラムの色を設定する	plt.hist(データ列, color='rebeccapurple')
表データのあるカラムのタイムゾーンを東京に指定する	df['列A'].tz_convert('Asia/Tokyo')
回帰分析をヒストグラムと勾配ブースティングでする	model = sklearn.ensemble.HistGradientBoostingRegressor()
棒グラフをミッドナイトブルー色として描画する	plt.bar(データ列x, データ列y, color='midnightblue')
線を半透明の実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
プロットに補足を加える	plt.legend(['凡例A', '凡例B'])
ヒストグラムをスカイブルー色を用いて描画する	plt.hist(データ列, color='skyblue')
ダークシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
行列の内積	np.dot(aArray, aArray2)
option: 印の線幅を変える	markeredgewidth = 2.5
配列をn個に等間隔でビン分割する	pd.cut(aArray, n)
option: ラベンダーブラッシュを用いる	color = 'lavenderblush'
データフレームを複数の列によって昇順に破壊的に整列する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
整数の2進表現を使う	bin(整数)
二つのセットはdisjointか調べる	セット.isdisjoint(セット2)
散布図の星マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
数式の変数xについてのn階微分を求める	sympy.diff(数式, [|変数]x, n)
浮動小数点数を文字列にする	str(x)
線グラフの色をディープスカイブルーに指定する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームを行によってソートする	df.sort_index()
option: 大バツ印を使用する	marker = 'X'
データフレームを散布図でグラフ化し、、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ダークバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightgreen')
option: グラフの色をダークサーモンにセットする	color = 'darksalmon'
列と列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
ヒストグラムの色をブラウンに変更する	plt.hist(データ列, color='brown')
部分文字列で文字列を二つに分けて、前半を使う	文字列.partition(部分文字列)[0]
折れ線グラフの色をミディアムスレートブルーに指定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
二つの最も小さい値を計算する	min(x, y)
数をn乗する	x ** n
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
オブジェクトは関数かどうか調べる	inspect.isfunction(オブジェクト)
リストと配列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
オブジェクトが非同期ジェネレータかどうか調べる	inspect.isasyncgen(オブジェクト)
識別子がコルーチンかどうか調べる	inspect.iscoroutine(識別子)
折れ線グラフの色をダークオーキッドにセットする	plt.plot(データ列x, データ列y, color='darkorchid')
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
option: 整数型を用いる	np.int = np.int<nl>dtype = np.int
白色でxを表示する	print(f'\033[37m{x}\033[0m')
option: グラフの色をダーク・スラテグレーに変更する	color = 'darkslategrey'
ラインを青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: ゴーストホワイトに色をセットする	color = 'ghostwhite'
option: ラベンダーを使う	color = 'lavender'
整数が整数2より小さいか判定する	整数 < 整数2
データフレームの選択した列の未入力値を中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
rgbの▼マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データ列の折れ線グラフを描画し、、色をRGBを用いて設定する	plt.plot(データ列x, データ列y, color='#800080')
ペールグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データフレームの2つのカラムを並べて箱ひげ図で作図する	plt.boxplot([df['カラム'], df['カラム']])
マップにマップ2の項目を追加する	辞書.update(辞書2)
整数が整数2未満もしくはn3以上か調べる	整数 < 整数2 or 整数 >= n3
半透明の破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データ列の推移を青い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
線形モデルの回帰変数を見る	model.coef_
option: 黄緑色を使用する	color = 'chartreuse'
ファイルパスをバイナリできるように開く]	'rb' = 'a'<nl>open(filepath, mode='rb')
バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x')
昇順にリストの要素を並べる	sorted(リスト, reverse=True)
線グラフの色をリネンに変更する	plt.plot(データ列x, データ列y, color='linen')
データフレームをある列によってソートしてNaNを先頭にする	df.sort_values(by='列A', na_position='first')
セパレータで文字列を分割して文字列リストに変換する	文字列.split(セパレータ)
折れ線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
グラフの横軸にラベルを設定する	plt.xlabel('x軸ラベル')
日付時刻データの年を見る	aDatetime.year
プロットのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
浮動小数点数を小数点で丸める	round(x, n)
セットにシーケンスを追加更新する	セット.update(リスト)
xが無限大に近づくときの数式の極限値を算出する	sympy.limit(数式, [|変数]x, oo)
option: フォントの色をグレーに設定する	color = 'grey'
両端キューから最初の文字列を削除する	両端キュー.remove(文字列)
再帰の最大回数を上げる	sys.setrecursionlimit(1000000)
配列の要素をひとつの文字列にする	''.join(map(str, 配列))
線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='gray')
オブジェクトにフィールドが存在する	hasattr(obj, プロパティ名)
散布図をダークマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
散布図の丸印を赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
文字列がPythonのキーワード	keyword.iskeyword(文字列)
2つの文字列は等しくないか調べる	文字列 != 文字列2
リストの要素を文字列として、カンマを用いて連結する	','.join(map(str, リスト))
ある列の値がx以上、y以下の行を取り出す	df[(x <= df['列A']) & (df['列A'] <= y)]
散布図のポイント印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
option: ディムグレーにフォントの色を設定する	color = 'dimgrey'
リストからランダムにひとつ選ぶ	random.choice(リスト)
列とリストをペアリングする	itertools.zip_longest(iterable, iterable2)
ライトグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
黒い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
ゼロ埋めされた行列を作成する	np.zeros(行数, 列数)
横棒グラフをチョコレート色を使って描画する	plt.barh(データ列x, データ列y, color='chocolate')
線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
柱状図を描画し、合計を1にする	plt.hist(データ列, density=True)
円グラフにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
スピアマンでデータフレームの相関行列を計算する	df.corr(method='spearman')
マップの値として要素が含まれているか調べる	element in 辞書.values()
折れ線グラフの色を赤に変更する	plt.plot(データ列x, データ列y, color='red')
パーセント付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
データシリーズの中にいくつ欠損値が存在するか数える	ds.isna().sum()
クラス分類を多層パーセプトロンとしてする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
整数マイナス整数を算出する	整数 - 整数2
データフレームの列の名前一覧で指定された列をドロップする	df.drop(columns, axis=1, inplace=True)
option: 青紫にグラフの色をする	color = 'violet'
折れ線グラフの▼マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
整数が整数2未満、もしくはn3以上か確認する	整数 < 整数2 or 整数 >= n3
整数がnで割り切れるかどうか調べる	整数 % n == 0
タプルにイテラブルを続ける	itertools.chain(iterable, iterable2)
線グラフの色をサーモンに指定する	plt.plot(データ列x, データ列y, color='salmon')
大文字を使う	string.ascii_uppercase
データフレームのヒストグラムを横に並べてグラフ化する	sns.displot(df, x='列名', col='カテゴリ名')
名前からカラーマップを見る	"plt.get_cmap(""カラーマップ名"")"
文字列の右側から改行を取り除く	文字列.rstrip()
プレゼンてションにプロットの用途を設定する	sns.set(context='talk')
散布図をrgbのクロスマーカーとして描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
リストと配列の散布図をプロットしてマーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
指定した列の中に文字列と日付データがある	df['列A'].isin([value, value2])
ヒストグラムの色をロージーブラウンにセットする	plt.hist(データ列, color='rosybrown')
赤いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
折れ線グラフを描いて、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームから5行サンプリングする	df.sample(5)
文字列を走査しパターンに大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をシルバーに変更する	plt.plot(データ列x, データ列y, color='silver')
n回オブジェクトが繰り返すイテラブル	itertools.repeat(element, n)
オブジェクトのメモリビューを使う	memoryview(obj)
データフレームから型リストデータ型の列を取り出す	df.select_dtypes(include=typeList)
正規表現で文字列を分割する	re.split(pattern, s)
文字列の中で複数行対応として正規表現にマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
データシリーズの欠損値を後の行の値で補完する	ds.fillna(method='bfill')
何回まで再帰ができるかを確認する	sys.getrecursionlimit()
グリッドの線種を実線に変更する	plt.grid(linestyle='solid')
長さの制限された両端キューをリストから生成する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
リストの散らばりを可視化する	plt.scatter(データ列x, データ列y)
データフレームの一部の列の相関行列をスピアマン順位相関係数として求める	df[['列A', '列B']].corr(method='spearman')
ダークシアグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
論文用にグラフを設定する	sns.set(context='paper')
日本語をグラフ中で表示できるようにする	sns.set(font='IPAexGothic')
データフレームのカラムの標準誤差を計算する	scipy.stats.sem(df['列A'])
実数とyの斜辺を算出する	math.hypot(x, y)
文字列中にある文字がいくつあるか調べる	文字列.count(文字)
option: ピンク色を用いる	color = 'pink'
縦棒グラフをマルーン色として描画する	plt.bar(データ列x, データ列y, color='maroon')
データフレームのあるカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
二つの変数をプリントする	print(変数名, 変数名)
ある列の値がx以上、y未満の行を選択する	df[(x <= df['列A']) & (df['列A'] < y)]
ライム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
グラフを画面に設定する	sns.set(context='notebook')
分類モデルの残差を算出する	目的変数 - model.predict(説明変数)
重複していない行のみを選択する	df[~ df.duplicated(keep=False)]
データフレームのあるカラムを四捨五入して、整数にする	df['列A'].round().astype(int)
シートの名前を指定してデータフレームをエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
目盛線	plt.grid(alpha=0.5)
既存の行列を元に全要素が1の配列を初期化する	np.ones_like(aArray)
双曲線正弦の逆数を求める	math.asinh(x)
データフレームの中に文字列と日付データがいくつあるかカウントする	df.isin([value, value2]).sum()
option: フクシア色を用いる	color = 'fuchsia'
ビスク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
イテラブルを累積した列を得る	itertools.accumulate(iterable, operator.mul)
線グラフの色をスチールブルーに変更する	plt.plot(データ列x, データ列y, color='steelblue')
プロットの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
散布図に赤いバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームをエクセルからシート名を指定してロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
昇順にある列によってデータフレームをソートする	df.sort_values(by='列A', ascending=True)
セットが空かどうか調べる	len(セット) == 0
最初の区切り文字で文字列を二分し、、前半を使う	文字列.partition(セパレータ)[0]
分割数nでリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
日付時刻データを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
部分文字列を使って文字列を分割して、列挙する	文字列.split(部分文字列)
ふたつの集合に共通する要素からなる集合を見る	セット.intersection(セット2)
線グラフの線のスタイルを一点鎖線に変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
リストの末尾から値をポップする	リスト.pop()
ラベンダー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
実数の2乗	x ** 2
ファイルパスを書き込み用にUTF8で開く]	open(filepath, mode='w', encoding='utf-8')
整数の最大値を知る	sys.maxsize
標準出力がパイプか調べる	not sys.stdout.isatty()
横棒グラフをダークレッド色で描画する	plt.barh(データ列x, データ列y, color='darkred')
列と列をペア化する	itertools.zip_longest(iterable, iterable2)
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データフレームをグループ化しそれぞれの標準偏差を求める	df.groupby('列A').std()
データフレームのある列の値がx以下の行を取り出す	df[df['列A'] <= x]
折れ線グラフに黒い▽印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
黒い右三角マーカーをイテラブルとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームの選択したカラムの欠損値を最頻値にセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
辞書の全値を消去する	辞書.clear()
データをJSON文字列にする	json.dumps(データ, ensure_ascii=False)
カウンタ	collections.Counter()
分類モデルをあてはめる	model.fit(説明変数, 目的変数)
option: アスキー文字に限定する	flag = re.ASCII
option: ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
ドジャーブルーにヒストグラムの色を変更する	plt.hist(データ列, color='dodgerblue')
両端キューの先頭に数列の各値を追加する	両端キュー.extendleft(数列)
データフレームのあるカラムの不偏標準偏差を求める	df['列A'].std()
文字列を表示する	print(文字列)
指定された列で集計し、各個数を算出する	df.groupby('列A').count()
データフレームの選択したカラムの中に含まれる日付データと文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
▼マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v')
リストとデータ列について散布図を描いて、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
option: 色を黄色に設定する	color = 'yellow'
文字列をアスキーコードエスケープでバイト列に変換する	文字列.encode(encoding='unicode_escape')
オブジェクトの属性の値	getattr(obj, プロパティ名)
ピアソンの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
1で全要素を初期化した行列	np.ones(行数, 列数, dtype=np.int)
文字列のプレフィックスがsubか調べる	文字列.startswith(部分文字列)
カテゴリ別でグループ化して、データフレームをに箱ひげ図で図示する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
リストの要素を消す	リスト.clear()
データをL2ノルムとして正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
散布図の印をクロス印にする	plt.scatter(データ列x, データ列y, marker='x')
文字列の左側から文字を除く	文字列.lstrip(文字)
線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
箱髭図を描画して、平均線を追加する	plt.boxplot(データ列, meanline=True)
ラインを赤い一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
小さい順にリストの要素を並べ直す	sorted(リスト, reverse=True)
データシリーズは何年か見る	ds.dt.year
リストの最初の値	リスト[0]
タプルをカンマ区切りで表示する	print(*タプル, sep=',')
線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
二進文字列を整数にする	int(文字列, 2)
option: 紺を使用する	color = 'darkblue'
日付時刻データにn秒分加える	aDatetime + datetime.timedelta(seconds=n)
リストをn回連結する	リスト * n
カウンタをマッピングで更新する	aCounter.update(aDict)
2次元タプルをフラット化する	sum(タプル)
最大長nの双方向キューを作る	collections.deque(maxlen=最大長)
行列の列ごとの合計値を求める	np.sum(aArray, axis=0)
グラフのグリッドを暗くする	sns.set(style='darkgrid')
最後のエントリを辞書から取り除く	辞書.popitem()
折れ線グラフの色を青紫に指定する	plt.plot(データ列x, データ列y, color='violet')
option: フォントの色をイエローグリーンに変更する	color = 'yellowgreen'
赤い右三角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームをソートして、新しいインデックスを振り直す	df.sort_values('キーとなる列').reset_index()
アンティークホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
小数点数を実数で割った剰余	math.remainder(x, x2)
双方向キューの大きさ	len(両端キュー)
ピンクにヒストグラムの色を指定する	plt.hist(データ列, color='pink')
マップの値の一覧	辞書.values()
その平均でデータフレームのカラムの欠損値を埋める	df['列A'].fillna(df['列A'].mean())
淡いピンク色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
パープル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
ヒストグラムをダークマゼンタ色を用いて描画する	plt.hist(データ列, color='darkmagenta')
データフレームの中に文字列と日付データがあるか	df.isin([value, value2])
本日が日曜日	datetime.datetime.today().weekday() == 6
クラス分類のF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
日付時刻データの時刻を使う	aDatetime.hour
文字列を最後の部分文字列で二分割して、最初の方を使う	文字列.rpartition(部分文字列)[0]
横棒プロットを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
インタプリタの実行ファイルの絶対パス	sys.executable
散布図をブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='brown')
横棒グラフを描画してラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
線グラフの色をアクアに変更する	plt.plot(データ列x, データ列y, color='aqua')
日付データの年数を使う	aDate.year
標準エラーを見る	sys.stderr
縦軸の目盛の表示値を変更する	plt.yticks(目盛りの値リスト)
文字列の接頭辞がsubかどうか調べる	文字列.startswith(部分文字列)
要素はマップの値として含まれているか	element in 辞書.values()
ある列でデータフレームをグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
option: 欠損値を含める	dropna = True
文字列の末尾の文字	文字列[-1]
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1, inplace=True)
スピアマンの順位相関係数を見る	scipy.stats.spearmanr(数列, 数列2)
空の辞書を用意する	辞書 = {}
空のカウンタを作成する	collections.Counter()
データフレームのデータ型一覧	df.dtypes
線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
折れ線グラフの色をバリーウッドに指定する	plt.plot(データ列x, データ列y, color='burlywood')
ファイルパスを読み込みモードとしてオープンする]	'r' = 'a'<nl>open(filepath, mode='r')
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データフレームの不偏分散を求める	df.var(ddof=1)
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
八進数文字列をバイト列にする	int(文字列, 8).to_bytes(length=バイト数, byteorder='big')
ヒストグラムの色をダークオレンジにセットする	plt.hist(データ列, color='darkorange')
option: ダーク・スラテグレー色を使用する	color = 'darkslategrey'
浮動小数点数を三乗する	x ** 3
縦棒グラフを貝殻色として描画する	plt.bar(データ列x, データ列y, color='seashell')
浮動小数点数が負か調べる	x < 0
折れ線グラフの印を四角印にする	plt.plot(データ列x, データ列y, marker='s')
deqのstart番目からend番目までの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
データフレームの列を並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
部分文字列が文字列の指定した範囲位置の間に含まれるか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
データフレームのNaNを平均値に変更する	df.fillna(df.mean())
データ列の推移を色付きの実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データシリーズの母標準偏差を計算する	ds.std(ddof=0)
リストをビン数nとして分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームの空文字を欠損値に変換しドロップする	df.replace('', np.nan).dropna()
option: フォントの色をクリムゾンに変更する	color = 'crimson'
分子と分母から有理数を用意する	fractions.Fraction(分子, 分母)
整数×整数	整数 * 整数2
最初の部分文字列で文字列を二つに分けて、残りを見る	文字列.partition(部分文字列)[-1]
データフレームのカラムのKurtosis	scipy.stats.kurtosis(df['列A'], bias=False)
散布図に青い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
文字列を最後から空白で区切る	文字列.rsplit()
シーケンスとイテラブルを連結する	itertools.chain(iterable, iterable2)
リネン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
配列の調和平均	scipy.stats.hmean(配列)
配列と数列についての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
カウンタの要素をリストとして得る	aCounter.keys()
option: 濃いシアンにグラフの色を設定する	color = 'darkcyan'
文字列の右側から不要な空白を取り除く	文字列.rstrip()
リストを引数として展開してプリントする	print(*リスト)
リストを３つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
リストを文字列として、タブでつなげる	'\t'.join(map(str, リスト))
整数が整数2未満、それかn3以上か	整数 < 整数2 or 整数 >= n3
赤い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
カウンタの各項目をそのカウントだけリストとして得る	aCounter.elements()
実線を用いてヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
棒グラフをコーラル色として描画する	plt.bar(データ列x, データ列y, color='coral')
配列間のスピアマンの順位相関係数	scipy.stats.spearmanr(配列, 配列2)
データフレームの指定した列のKurtosis	df['列A'].kurt()
オブジェクトのバイトサイズを知る	sys.getsizeof(オブジェクト)
改行しないで計算結果を表示する	print(式, end='')
ファイルパスをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
散布図の星マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームの選択したカラムのNaNをメディアンで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
オブジェクトは集合クラスのインスタンスかどうか調べる	set = int<nl>isinstance(obj, set)
実数の符号をコピーにする	math.copysign(x, x2)
バイアスなしの線形モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
辞書をJSONフォーマットでファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
散布図のマーカーを左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
折れ線グラフの左三角印の線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
タプルを並べる	sorted(タプル)
折れ線グラフの色をロージーブラウンにする	plt.plot(データ列x, データ列y, color='rosybrown')
縦棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
イテラブルとイテラブルの散布図を描き、、その大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
カウンタの値をひとつ増やす	aCounter[element] += 1
タプルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
データフレームを二つの列の値によって集計し、、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
xを黒色で表示できる文字列に変換する	f'\033[30m{x}\033[0m'
黒色化する	f'\033[30m{x}\033[0m'
データフレームの指定したカラムの値がNaN	df['列A'].isna()
年月日と時刻からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
アルファベットからランダムにひとつ選ぶ	random.choice(string.ascii_uppercase)
配列とリストについて散布図を描画し、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
欠損値が存在する行を消す	df.dropna(inplace=True)
空の組	()
黒い菱形マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームを複数の列を用いて昇順に並べる	df.sort_values(by=['列A', '列B'], ascending=True)
折れ線グラフをホワイトスモーク色を用いて描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
パパイヤウィップ色でヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
option: マーカーをポイントに指定する	marker = '.'
データフレームの一部のカラムの値をValueMapでまとめて置換する	df[['列A', '列B']].replace(ValueMap)
オブジェクトはジェネレータ関数	inspect.isgeneratorfunction(オブジェクト)
パパイヤウィップ色としてヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
実数が正	x > 0
イテラブルをシャッフルしてリスト化する	random.sample(イテラブル, len(イテラブル))
グラフ中の(x,y)の位置に簡単な説明を表示する	plt.legend(loc=(x, y))
折れ線グラフのポイント印を青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
分類結果の適合率と再現率の調和平均を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
日付データにn秒を加える	aDate + datetime.timedelta(seconds=n)
既存の配列を元に全要素が0の行列を初期化する	np.zeros_like(aArray)
整数を整数で割ってその結果を切り捨てる	整数 // 整数2
二つの文字列が同じかどうか調べる	文字列 == 文字列2
ブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
複数の条件が同時に成り立つ	条件 and 条件2 and 条件3
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgray')
モカシン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
変数が0に近づくとき、数式の極限値を求める	sympy.limit(数式, 変数, 0)
セットから例外なく整数を除く	セット.discard(数)
データフレームの行の一覧	df.index
ミディアムスプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
文字列から部分文字列を全て消す	文字列.replace(部分文字列, '')
ダークカーキ色を使ってヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
変数について偏微分する	sympy.diff(数式, 変数)
KNNでクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
option: ダークシアンを使用する	color = 'darkcyan'
横棒グラフをミスティローズ色を用いて描画する	plt.barh(データ列x, データ列y, color='mistyrose')
本日が水曜日かテストする	datetime.datetime.today().weekday() == 2
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
数列を双方向キューにする	collections.deque(数列)
プラットホームのバイトオーダを使う	sys.byteorder
ヒストグラムの色をライトサーモンにセットする	plt.hist(データ列, color='lightsalmon')
列をフォーマットを使って日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
option: ローングリーン色を用いる	color = 'lawngreen'
多次元データを特異値分解を用いて項次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
散布図の四角印を黒色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
日付データにn秒分加算する	aDate + datetime.timedelta(seconds=n)
データラベルを加える	plt.legend(['凡例A', '凡例B'])
ふたつのカラムを組み合わせてグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
２つの列の値によってデータフレームをグループ化し、記述統計量を求める	df.groupby(['列A', '列B']).describe()
日付時刻データがタイムスタンプデータより前かどうか確認する	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()
散布図を△印で描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームのカラムの中にが含まれるか調べる	df['列A'].isin([value])
自然数の階乗を計算する	math.factorial(n)
日付時刻データをISO書式の文字列に変換する	aDatetime.isoformat()
線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
指定したカラムの欠損値を平均値で補う	df['列A'].fillna(df['列A'].mean())
ヒストグラムをミディアムブルー色を用いて描画する	plt.hist(データ列, color='mediumblue')
文字列が別のに存在するか調べる	文字列 not in 別の文字列
最大値でデータフレームの欠損値を埋める	df.fillna(df.max())
データ列の推移を赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
要素を両端キューから削除する	両端キュー.remove(要素)
分類モデルのPPVを計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
グラフに凡例を追記する	plt.legend(['凡例A', '凡例B'])
浮動小数点数をn乗する	x ** n
option: グラフの色をダークシアンに指定する	color = 'darkcyan'
ある列のカテゴリごとの標準偏差を計算する	df.groupby('列A').std()
xとyをタブで区切って表示する	print(x, y, sep='\t')
散布図の丸印の線幅を変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
散布図の右三角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
タイムスタンプデータの時刻を使う	aDatetime.time()
データフレームを異なる列をキーとして外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
折れ線グラフに大バツ印を加える	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフのダイアモンド印の線幅を設定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
π	math.pi
ホールドアウトを使用する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
正規表現patternで全てreplにデータフレームの指定したカラムを置き換える	df['列A'].replace(pattern, repl, regex=True)
データシリーズの未入力値を直前の値にする	ds.fillna(method='ffill')
空白区切りでタプルの各要素を出力する	print(*タプル)
n進文字列を整数に変換する	int(文字列, n)
エポック秒をタイムスタンプにする	datetime.datetime.fromtimestamp(timestamp)
計算結果を表示する	print(式)
文字列からformatのパターンとしてタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
パールバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
y座標の目盛りの値を変更する	plt.yticks(目盛りの値リスト)
ヒストグラムの色をレモンシフォンに指定する	plt.hist(データ列, color='lemonchiffon')
数列のイミュータブルな集合を使う	frozenset(数列)
部分文字列がsubで始まるかどうか調べる	文字列.startswith(部分文字列)
線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームの選択した列を十の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
横棒グラフをダークシアグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
縦棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
辞書をソートしてJSONにエンコードする	json.dumps(辞書, ensure_ascii=False, sort_keys=True)
日付データにn時間分、足す	aDate + datetime.timedelta(hours=n)
データ列の移り変わりを青い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
xについて数式のインテグラルを算出する	sympy.integrate(数式, [|変数]x)
option: フォントの色をアンティークホワイトに設定する	color = 'antiquewhite'
横棒グラフをピンク色として描画する	plt.barh(データ列x, データ列y, color='pink')
全要素を1で初期化した行列を初期化する	np.ones(行数, 列数, dtype=np.int)
オブジェクトはあるクラス	isinstance(obj, クラス)
まとめてデータフレームの指定したカラムをreplに正規表現で置換する	df['列A'].replace(pattern, repl, regex=True)
タイムスタンプデータが何年か知る	aDatetime.year
データフレームの選択した列の平均値を求める	df[['列A', '列B']].mean()
ダークオリーブグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
横棒グラフをインディアンレッド色として描画する	plt.barh(データ列x, データ列y, color='indianred')
黒い▲マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
カウンタ同士で交差を求める	aCounter & aCounter2
データフレームの指定した列をまとめてValueMapで変更する	df['列A'].replace(ValueMap)
日付時刻データからn週間を減らす	aDatetime - datetime.timedelta(weeks=n)
データフレームのカラムのNaNを直前の値で埋める	df['列A'].fillna(method='ffill')
ヒストグラムをミントクリーム色として描画する	plt.hist(データ列, color='mintcream')
散布図を珊瑚色で描画する	plt.scatter(データ列x, データ列y, color='coral')
複数のデータフレームを縦向きに結合する	pd.concat([df, df2, df3], axis=0)
フローラルホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
option: バリーウッドにグラフの色を設定する	color = 'burlywood'
双方向キュー中の要素の数を数える	両端キュー.count(要素)
option: ダークオレンジに色をセットする	color = 'darkorange'
折れ線グラフの色をパールバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームの一部の列を一万の位で丸める	df[['列A', '列B']].round(-4)
重回帰分析を行う	model = sklearn.linear_model.LinearRegression()
入力から２つの文字列値を読む	A, B = map(str, input().split())
整数がセットのメンバー	数 in セット
文字列を記号に変換する	sympy.Symbol(変数名)
option: グラフを一点鎖線に変更する	linestyle = 'dashbot'
データフレームの中にある日付データと文字列の合計を求める	df.isin([value, value2]).sum()
配列の個数	aArray.size
ピンク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
配列の平均を調べる	np.mean(aArray)
イテラブル自身の長さnの順列を求める	itertools.permutations(iterable, n)
データフレームの中に存在する文字列と日付データの数を数える	df.isin([value, value2]).sum()
散布図に赤いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
マップの内部もコピーする	{k: copy.copy(v) for k, v in 辞書.items()}
データ列を等しい量になるようにn個にビニングする	pd.qcut(ds, n)
リストの合計	sum(リスト)
指定した列のカテゴリで集計し、最小値を計算する	df.groupby('列A').min()
スペクトル分解の準備をする	model = sklearn.decomposition.PCA(n_components=n)
整数がnの倍数か確認する	整数 % n == 0
ライトスカイブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データシリーズを四捨五入する	ds.round()
option: フォントの色をシスルにする	color = 'thistle'
文字列から指定された文字を取り除く	文字列.replace(文字, '')
ダークレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
2を底とする実数の対数を求める	math.log2(x)
option: 左三角マーカーを用いる	marker = '<'
赤い一点鎖線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
折れ線グラフのバツマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
指定された列ついて、データフレームの重複を見る	df.duplicated(subset='列A')
データ列の折れ線グラフを描いてカラーコードで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
有理数モジュールを使う	import fractions
ロージーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
右から文字列を区切り文字で分割する	文字列.rsplit(セパレータ)
データシリーズが何時か知る	ds.dt.hour
kを底とする小数点数の対数を算出する	math.log(x, k)
ダークグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
option: 色をライトグレーに変更する	color = 'lightgray'
未初期化の配列を作る	np.empty(要素数, dtype=np.int)
線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
カウンタをイテラブルから準備する	collections.Counter(iterable)
option: グラフの色をデピンクにする	color = 'deeppink'
文字が平仮名か	('ぁ' <= 文字 <= 'ん')
行列の行ごとの最大を求める	np.max(aArray, axis=1)
xの小数点以下'5'桁までプリントする	':.5f' = ':.3f'<nl>print(':.5f'.format(x))
数列のケンドールの相関係数を計算する	scipy.stats.kendalltau(数列, 数列2)
文字列を後ろから空白で分割する	文字列.rsplit()
ファイルを文字コードtextを用いてオープンする]	text = 'utf-8'<nl>open(filepath, encoding=text)
勾配ブースティングでクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
両端キューの先頭にリストの要素を追加する	両端キュー.extendleft(リスト)
データフレームの全列を散布図でプロット化する	sns.pairplot(df)
プロットで用いるx座標に説明を付ける	plt.xlabel('x軸ラベル')
文字列のケースを整える	文字列.casefold()
数を小数点以下第一位で丸める	round(x, 1)
option: ライトイエローを使う	color = 'lightyellow'
ある列の文字列が正規表現文字列にマッチしないデータを抽出する	df[~df['列A'].str.match(正規表現)]
日付データからn週間分減算する	aDate - datetime.timedelta(weeks=n)
ヒストグラムの色をイエローグリーンにセットする	plt.hist(データ列, color='yellowgreen')
ふたつの集合の対称差集合を使う	セット.symmetric_difference(セット2)
データ列の折れ線グラフを右三角印を用いて描画する	plt.plot(データ列x, データ列y, marker='>')
option: マーカーを大バツに変える	marker = 'X'
インディゴにヒストグラムの色を指定する	plt.hist(データ列, color='indigo')
データフレームの選択したカラムの尖り	df[['列A', '列B']].skew()
折れ線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
プロットの描画で暗くカラーパレットを用いる	sns.set(pallete='dark')
データフレームとデータフレームの列を横方向に連結する	pd.concat([df, ds], axis=1)
option: マーカーの色をダークレッドにする	markerfacecolor = 'darkred'
二つのカラムからグループ化し、最大値を計算する	df.groupby(['列A', '列B'], as_index=False).max()
option: フォントの色をライトスチールブルーに設定する	color = 'lightsteelblue'
黒いバツマーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
インディゴ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
ホワイトスモーク色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
リストの要素を連結してひとつの文字列にする	''.join(map(str, リスト))
データフレームから型リストのデータ型のカラムを除外する	df.select_dtypes(exclude=typeList)
ヒストグラムの区間数を指定する	plt.hist(データ列, bins=区関数)
オブジェクトがモジュール	inspect.ismodule(オブジェクト)
散布図のクロスマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームの中であるカラムに重複があればドロップする	df.drop_duplicates(subset='列A', inplace=True)
option: グラフの色をアイボリーに変更する	color = 'ivory'
オブジェクトにフィールドが存在するか調べる	hasattr(obj, プロパティ名)
option: ダークサーモンにグラフの色を設定する	color = 'darksalmon'
データフレームのカラムの各値の出現数を求める	df[col].value_counts()
文字コードを指定してTSVファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
文字列の中の複数行対応としてパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
Pandasの日付型のデータシリーズをインデックスにする	df.index = pd.DatetimeIndex(ds)
行列の累積積を求める	np.cumprod(aArray)
ふたつの列としてグループ化し、個数を計算する	df.groupby(['列A', '列B'], as_index=False).count()
オブジェクトは文字列クラス	str = int<nl>isinstance(obj, str)
横棒グラフをパパイヤウィップ色を用いて描画する	plt.barh(データ列x, データ列y, color='papayawhip')
配列と数列についての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフの▼マーカーを青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ファイルパスをUTF8で開く]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
カラムのエポック秒を日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
10を底とする対数を計算する	math.log10(x)
文字列を最後のカンマで分けたときの残りの文字列	文字列.rpartition(',')[-1]
実行時に標準出力がパイプ	not sys.stdout.isatty()
n番目の列を除いたデータフレームを使う	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
折れ線グラフをティール色で描画する	plt.plot(データ列x, データ列y, color='teal')
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
改行なしにxとyを順にプリントする	print(x, y, end='')
数値時刻のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
文字列をインデントを指定してJSON文字列に変換する	json.dumps(文字列, ensure_ascii=False, indent=n)
折れ線グラフを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
色を色差別なくする	sns.set(pallete='colorblind')
青色でプリントできる文字列に変換する	f'\033[34m{x}\033[0m'
整数に浮動小数点数を掛ける	x * y
乱数で要素を埋めた配列を作成する	np.random.random(N)
横棒グラフをマゼンタ色を用いて描画する	plt.barh(データ列x, データ列y, color='magenta')
option: グラフの色をダークバイオレットに変更する	color = 'darkviolet'
文字列の中の正規表現によるマッチを見る	re.findall(pattern, s)
option: アクアにグラフの色を設定する	color = 'aqua'
横軸の目盛の表示値を変更する	plt.xticks(目盛りの値リスト)
マップの項目名に対応した値	辞書[キー]
リストを更新不能なにする	frozenset(リスト)
折れ線グラフを珊瑚色として描画する	plt.plot(データ列x, データ列y, color='coral')
日付時刻データの時間	aDatetime.time()
ドジャーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
文字列からISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
浮動小数点数の符号を同じにする	math.copysign(x, x2)
散布図を四角マーカーを用いる描画する	plt.scatter(データ列x, データ列y, marker='s')
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
縦棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
文字列の右端から改行を除く	文字列.rstrip('\n')
配列間の各要素の最大公約数	np.gcd(aArray, aArray2)
日付時刻データをタプルにする	aDatetime.timetuple()
縦棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
データフレームの選択したカラムの欠損値をメディアンに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
横棒グラフをオールドレース色として描画する	plt.barh(データ列x, データ列y, color='oldlace')
折れ線グラフをモカシン色を用いて描画する	plt.plot(データ列x, データ列y, color='moccasin')
レモンシフォン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
平均と標準偏差から乱数を計算する	random.normalvariate(mu=0.5, sigma=0.2)
要素はリストに含まれないか調べる	要素 not in リスト
範囲を指定して部分文字列を探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
option: 色をディムグレーに変更する	color = 'dimgray'
option: ラベンダー色を用いる	color = 'lavender'
配列と配列の散布図を描き、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: 読み込みモードを使用する	mode = 'r'
ヒストグラムの色をライトシアンにセットする	plt.hist(データ列, color='lightcyan')
最初の区切り記号で文字列を二分して前の方を見る	文字列.partition(セパレータ)[0]
浮動小数点数の逆双曲線余弦	math.acosh(x)
MSDの準備をする	model = sklearn.manifold.MSD(n_components=n)
文字列中に英数字がないか調べる	any(not c.isalnum() for c in 文字列)
逆行列を算出する	np.linalg.inv(aArray)
デックの左に整数を追加する	両端キュー.appendleft(整数)
イテラブルの長さnの順列を得る	itertools.permutations(iterable, n)
option: オレンジを使う	color = 'orange'
識別子が関数か判定する	inspect.isfunction(識別子)
ライトコーラル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
データフレームの中の列をn個に等間隔でビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列が文字列より辞書順で後	文字列 > 文字列2
データフレームの行を条件で消す	df[(df['列A'] == x) & (df['列B'] == y)]
新しいロバスト分類器を作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
option: フォントの色を赤にセットする	color = 'red'
データフレームをインポートする	import pandas as pd
指定したカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
セットの補集合を計算する	セット.difference(セット2)
カテゴリで色分けしてデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
option: マーカーの色をホワイトにする	markerfacecolor = 'white'
散布図の四角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ポスターにグラフの使途を変更する	sns.set(context='poster')
逆正弦を求める	math.asin(x)
青い点線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
列を全てタイムスタンプ型に変換する	pd.to_datetime(df['列A'])
ライムグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
option: ビスクにグラフの色を指定する	color = 'bisque'
散布図の丸マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
データフレームをある列によって降順に並べる	df.sort_values(by='列A', ascending=False)
線グラフの色をアクアにセットする	plt.plot(データ列x, データ列y, color='aqua')
データシリーズのタイムゾーンを東京に変更する	ds.tz_convert('Asia/Tokyo')
英大文字からランダムに１文字選ぶ	random.choice(string.ascii_uppercase)
文字列中の平仮名を片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
ペアリストpairsからカウンタを作成する	collections.Counter(dict(pairs))
ひとつでもアスキー文字が文字列中に含まれるかどうか調べる	any(c.isascii() for c in 文字列)
散布図を赤いクロスマーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
多次元データを特異値分解で整数次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
文字列中にひとつでもアルファベットが含まれる	any(c.isalpha() for c in 文字列)
表データのある列の値がxより大きい行を抽出する	df[df['列A'] > x]
タプルをn回結合する	タプル * n
日付と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
データシリーズのモードを求める	ds.mode()
option: 書き込みモードを用いる	mode = 'w'
ダークゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
文字列中にひとつでも非英字が存在するかどうか調べる	any(not c.isalpha() for c in 文字列)
ある列のカテゴリで集計し、平均値を算出する	df.groupby('列A').mean()
オブジェクトのバイトサイズを確める	sys.getsizeof(オブジェクト)
option: 色をダークオリーブグリーンに指定する	color = 'darkolivegreen'
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
データフレームの選択した列の統計量	df[['列A', '列B']].describe()
グラフの見栄えをいい感じに設定する	sns.set()
ロージーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
シーケンスから配列を作る	np.array(iterable)
データフレームをカラムによってグループ化し、要約統計量を求める	df.groupby('列A').describe()
折れ線グラフの下三角印を黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
数式のyについてのn階偏微分を求める	sympy.diff(数式, y, n)
整数がセットのいずれか確認する	数 in セット
データフレームの先頭n行を見る	df.head(n)
実数で実数を整数除算する	x // y
既存の行列を元に全要素が0の配列	np.zeros_like(aArray)
配列の歪度を計算する	scipy.stats.skew(配列, bias=False)
ある列をキーにして降順にデータフレームを破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
既存の行列をベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
改行せずに文字列の出力を行う	print(文字列, end='')
散布図にクロスマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
紫色にする	f'\033[35m{x}\033[0m'
折れ線グラフを色付きの点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
両端キューの最後に文字列を入れる	両端キュー.append(文字列)
ヒストグラムの色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
option: データ型としてブール型を使用する	np.int32 = np.int<nl>dtype = np.int32
データフレームのインデックスがnの行を選ぶ	df.loc[n]
データをJSONフォーマットとしてあるファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
option: グラフの色をラベンダーに指定する	color = 'lavender'
双方向キューに整数をエンキューする	両端キュー.append(整数)
散布図をシスル色を用いて描画する	plt.scatter(データ列x, データ列y, color='thistle')
ムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
二つのデータフレームを異なるカラムをキーとして外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
折れ線グラフのバツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
ヒストグラムの色をシルバーに変更する	plt.hist(データ列, color='silver')
データフレームの複数の列を取り除く	df.drop(['列A', '列B'], axis=1, inplace=True)
データシリーズはどの程度、正規分布から尖っているか見る	ds.skew()
行列と同じ大きさの空配列を初期化する	np.empty_like(aArray)
シーグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
データフレームを表示するとき、小数点以下の表示精度を指定する	pd.set_option('precision', n)
線グラフをライトゴールドロディイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの選択したカラムの記述統計量を見る	df[['列A', '列B']].describe()
リストを境界値として列をビン分割する	pd.cut(ds, aList)
オリベドラブ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
CSVをn番目のカラムをインデックスにして読み込む	pd.read_csv('file.csv', index_col=n)
両端キューの順序を左に輪番で回す	両端キュー.rotate(-1)
option: グラフの色をゴーストホワイトに指定する	color = 'ghostwhite'
option: フォントの色をライトスカイブルーに設定する	color = 'lightskyblue'
横棒グラフを淡いピンク色色として描画する	plt.barh(データ列x, データ列y, color='lightpink')
棒グラフをシスル色を使って描画する	plt.bar(データ列x, データ列y, color='thistle')
棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
耐火レンガ色でヒストグラムを描画する	plt.hist(データ列, color='firebrick')
データフレームのインデックスリスト	df.index
option: 文字コードをBOM付きに設定する	encoding = 'utf_8_sig'
クラスが名前付きタプルか	issubclass(C, tuple)
option: グラフの色をピーチパフに変更する	color = 'peachpuff'
縦棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
データ列と配列についての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
オブジェクトが関数	inspect.isfunction(オブジェクト)
option: ライトスチールブルーにフォントの色を設定する	color = 'lightsteelblue'
データフレームの値を正規表現patternでまとめてreplに置換する	df.replace(pattern, repl, regex=True)
リストの末尾の値	リスト[-1]
グラフ中の(x,y)の場所にデータラベルを表示する	plt.legend(loc=(x, y))
今日が何年か知る	datetime.datetime.today().year
ファイルパスをEUCとして書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
棒グラフをアイボリー色を用いて描画する	plt.bar(データ列x, データ列y, color='ivory')
指定したカラムのNaNを最大値に設定する	df['列A'].fillna(df['列A'].max())
小数点以下の表示精度をn桁にする	pd.set_option('precision', n)
折れ線グラフをレベッカパープル色を使って描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
黒い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフの四角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ファイル名がテキストファイルか	filename = 'file.txt'  # ファイル name<nl>'.txt' = '.csv'<nl>filename.startswith('.txt')
文字コードに相当する文字を使う	chr(文字コード)
赤い一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
二つの文字列が同じか調べる	文字列 == 文字列2
option: グラフの色をコーンズシルクに変更する	color = 'cornsilk'
データフレームの一部のカラムの第一四分位数	df[['列A', '列B']].quantile(0.25)
t-SNEとして整数次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
クラス分類のリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
シャルトリューズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
パールゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
ヒストグラムの色をゴールデンロッドに変更する	plt.hist(データ列, color='goldenrod')
シルバー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
year年month月day日hour時minute分のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
変数の値を整数だけ増加させる	変数 += 整数
カウンタからイテラブルをカウントして減らす	aCounter.subtract(iterable)
分類モデルのF値を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
リストの値のみ出力する	print(*リスト)
実数の仮数を求める	math.frexp(x)[0]
rgbの左三角マーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームを表示するとき表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
option: スチールブルーにフォントの色をする	color = 'steelblue'
リストから重複なく、ランダムにn個選んでリストにする	random.sample(リスト, k=n)
グラフにy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
小数点数の二進対数	math.log2(x)
折れ線グラフに青い△印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
赤いポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列を最初のカンマで二分して、後ろの方を使う	文字列.partition(',')[-1]
線グラフの色をホットピンクに指定する	plt.plot(データ列x, データ列y, color='hotpink')
指定した列の最頻値	df['列A'].mode()
変数名はモジュールか確認する	inspect.ismodule(識別子)
文字列中の部分文字列の出現を範囲を指定して数える	文字列.count(部分文字列, 開始位置, 終了位置)
散布図にダイアモンド印を使う	plt.scatter(データ列x, データ列y, marker='D')
2つのデータフレームを異なる列をキーとして外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
データシリーズの中の未入力値の合計を調べる	ds.isna().sum()
パールバイオレットレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
配列とリストの散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ベージュ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
リストの先頭の要素を使う	リスト[0]
データフレームのカラムを折れ線プロットとして図示する	plt.plot(df[column], df[column])
折れ線グラフの菱形印の太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームの指定したカラムを丸めて、整数にする	df['列A'].round().astype(int)
折れ線グラフのポイントマーカーの色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データフレームの選択したカラムの中にいくつNaNがあるかカウントする	df[['列A', '列B']].isna().sum()
option: マーカーを左三角に指定する	marker = '<'
データフレームの指定した列の分散	df['列A'].var()
散布図をアリスブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
文字列から部分文字列を消す	文字列.replace(部分文字列, '')
行列の転置行列を求める	aArray.T
横に2つのデータフレームをマージする	pd.merge(df, df2)
ブースティングでクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
変数名がジェネレータ関数か	inspect.isgeneratorfunction(識別子)
グラフを論文用にセットする	sns.set(context='paper')
青緑色で線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
文字列はセットに含まれるか調べる	文字列 in セット
タイムスタンプデータからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
データシリーズがどの程度、分散しているか確認する	ds.var()
赤い菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
プロットから目盛り線を消す	plt.grid(False)
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
プラム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
黒い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='k')
配列をビン数nで分割する	pd.cut(aArray, n)
文字列の指定された範囲に部分文字列が含まれるかどうか調べる	文字列.find(部分文字列, 開始位置, 終了位置) != -1
エラーを無視して文字列をバイト列にする	文字列.encode(errors='ignore')
折れ線グラフの右三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
グラフに水平方向の破線をつける	plt.axhline(y=0, linestyle='dashed')
線グラフをナバホホワイト色として描画する	plt.plot(データ列x, データ列y, color='navajowhite')
行列の次元の数を計算する	aArray.ndim
散布図の印を▲にする	plt.scatter(データ列x, データ列y, marker='^')
最初のカテゴリーを無視してデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
データシリーズを百の位で四捨五入して整数にする	ds.round(-2).astype(int)
行列が何のデータ型か調べる	aArray.dtype()
データシリーズの記述統計量を見る	ds.describe()
ヒストグラムの色をライトグリーンにする	plt.hist(データ列, color='lightgreen')
SDGで回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
安全に文字列の接頭辞から部分文字列を取り除く	文字列.removeprefix(部分文字列)
散布図に赤い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
キーワード引数を用いて辞書に加えて、更新する	辞書.update(**kwargs)
データシリーズの尖りを求める	ds.skew()
２つの列からグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
SJISでファイルをオープンする]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
エクセルファイルからすべてのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
データフレームを２つの列によってまとめたグループ	df.groupby(['列A', '列B'])
option: アリスブルーを使用する	color = 'aliceblue'
ふたつの集合の対称差	セット.symmetric_difference(セット2)
2進数文字列をバイナリにする	int(文字列, 2).to_bytes(length=バイト数, byteorder='big')
eの実数乗を求める	math.exp(x)
ガウス過程分類モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
散布図の三角印を青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
等量で配列を分割数nでビン分割する	pd.qcut(aArray, n)
標準出力がターミナル出力かどうか調べる	sys.stdout.isatty()
散布図のクロス印を黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
黒い▲マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
イテラブルと配列の散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
文字列で区切ってxとyを表示する	print(x, y, sep=s)
ヒストグラムの色をシルバーにセットする	plt.hist(データ列, color='silver')
折れ線グラフの四角印を青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
折れ線グラフの色をダーク・スラテグレーに変更する	plt.plot(データ列x, データ列y, color='darkslategrey')
ダークオレンジ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
エクセルファイルファイルを文字化けしないように読む	pd.read_csv('file.csv', encoding='shift_jis')
ダークターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='darkturquoise')
配列とリストの散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データシリーズを一万の位で丸める	ds.round(-4)
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
文字列をインデント幅を指定してJSONにエンコードする	json.dumps(文字列, ensure_ascii=False, indent=n)
折れ線グラフをダークマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフの色をサーモンに指定する	plt.plot(データ列x, データ列y, color='salmon')
散布図の菱形マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
横棒グラフをアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='aquamarine')
データフレームを二つの列をキーにして昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
データフレームの選択した列のNaNを最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
リストと配列についての散布図にrgbの菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
bとn2から成るペアを得る	(n, n2)
yが0に近づく時、数式の極限値を求める	sympy.limit(数式, y, 0)
y座標の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
横棒グラフをシエナ色を用いて描画する	plt.barh(データ列x, データ列y, color='sienna')
横棒グラフをアリスブルー色として描画する	plt.barh(データ列x, データ列y, color='aliceblue')
折れ線グラフの色をパープルに指定する	plt.plot(データ列x, データ列y, color='purple')
データフレームは何行重複するか確認する	df.duplicated().sum()
カウンタの値数を使う	len(aCounter)
明るく色をグラフの描画で使う	sns.set(pallete='bright')
折れ線グラフの菱形マーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフをラベンダーブラッシュ色を使って描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
option: 箱髭図を水平方向にする	vert = False
実線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
イテラブルにイテラブルを続けた列	itertools.chain(iterable, iterable2)
散布図に黒い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='k')
新しいガウス過程回帰モデルを用意する	model = sklearn.gaussian_process.GaussianProcessRegressor()
双方向キューの中に要素が存在するか	要素 in 両端キュー
緑色化する	f'\033[32m{x}\033[0m'
改行なしにxを表示する	print(x, end='')
横軸の目盛の値を変更する	plt.xticks(目盛りの値リスト)
データフレームの指定したカラムを百の位で四捨五入する	df['列A'].round(-2)
棒グラフをハニーデュー色として描画する	plt.bar(データ列x, データ列y, color='honeydew')
折れ線グラフの菱形印の大きさを指定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
横棒プロットを描いて、中央寄せする	plt.barh(ラベル列, データ列, align='center')
2つの文字列を出力する	print(文字列, 文字列)
データフレームから指定されたデータ型の列名の一覧を使う	df.select_dtypes(型).columns
二つのオブジェクトが同一参照か判定する	obj is obj2
データ列とデータ列についての散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
散布図の大バツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
区切り文字を用いて文字列を区切り、、列挙する	文字列.split(セパレータ)
破壊的にデータフレームを昇順に二つの列を用いてソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
option: グラフの色をアイボリーに指定する	color = 'ivory'
option: ゴールデンロッドを用いる	color = 'goldenrod'
散布図に赤いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
レベッカパープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
プロットの描画で濃くカラーパレットを用いる	sns.set(pallete='deep')
実数のsin	math.sin(x)
縦棒グラフをイエローグリーン色として描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
散布図の四角印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
タプルのn番目以降の要素を取り出す	タプル[n:]
昇順にタプルの値を並べる	sorted(タプル, reverse=True)
データフレームの先頭100行を見る	df.head(100)
濃い青にヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
マルーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
折れ線グラフの大バツ印の色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
青いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
数式のn階偏微分を行う	sympy.diff(数式, y, n)
本日が土曜日か	datetime.datetime.today().weekday() == 5
ミントクリーム色でヒストグラムを描画する	plt.hist(データ列, color='mintcream')
散布図をダークゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
追加できるように既存のファイルをEUCでオープンする]	open(filepath, mode='a', encoding='euc_jp')
オブジェクトのオブジェクト識別子を使う	id(obj)
ヒストグラムの色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
正接を求める	math.tan(x)
散布図を赤いポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームのあるカラムの曜日	df['列A'].dt.weekday_name
文字列全体を複数行対応としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
散布図をシルバー色を用いて描画する	plt.scatter(データ列x, データ列y, color='silver')
実数のn乗の浮動小数点数剰余を算出する	pow(x, n, y)
八進文字列をバイト列に変換する	int(文字列, 8).to_bytes(length=バイト数, byteorder='big')
インデックスを付けずデータフレームをCSVファイルに保存する	df.to_csv('file.csv', index=None)
オブジェクトは集合か判定する	set = int<nl>isinstance(obj, set)
実行を正しく止める	sys.exit(0)
アイボリー色としてヒストグラムを描画する	plt.hist(データ列, color='ivory')
その最小値でデータシリーズの欠損値を補完する	ds.fillna(ds.min())
三数の最も小さい値を計算する	min(x, y, z)
データフレームのカラムをValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
ある列の文字列に部分文字列がある行を選択する	df[df['列A'].str.contains(部分文字列)]
データフレームの数値を全部、小数点以下n桁で丸める	df.round(n)
折れ線グラフの色を耐火レンガに指定する	plt.plot(データ列x, データ列y, color='firebrick')
整数が1もしくは2	整数 == 1 or 整数 == 2
データシリーズを10の位で丸めて整数にする	ds.round(-1).astype(int)
タイムスタンプデータの秒数を見る	aDatetime.second
正弦	math.sin(x)
大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
カウンタの要素一覧	aCounter.keys()
データフレームの75パーセンタイル	df.quantile(0.75)
マゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
折れ線グラフのラインスタイルを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフをミディアムスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
色付きの破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
リストと配列についての散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
option: 色をダークカーキに変更する	color = 'darkkhaki'
珊瑚色としてヒストグラムを描画する	plt.hist(データ列, color='coral')
データフレームの選択した列の平均値を計算する	df[['列A', '列B']].mean()
両端キューをdequeue	両端キュー.popleft()
データフレームを百の位で四捨五入して、整数型にする	df.round(-2).astype(int)
項目名がマップに存在している	キー not in 辞書
データフレームをある列の値でグループ化し要約統計量を計算する	df.groupby('列A').describe()
バイオリン図をプロットする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
リッジ回帰とロッソ回帰のハイブリッド分析を行う	model = sklearn.linear_model.ElasticNet()
データ列の相関を図示する	plt.scatter(データ列x, データ列y)
要素はセットのメンバーでない	要素 not in セット
リストの中の最大値を求める	max(リスト)
データフレームを百の位で丸めて整数型にする	df.round(-2).astype(int)
リストを折れ線グラフを用いて描画する	plt.plot(データ列x, データ列y)
ゼロ埋めされたブール型の行列	np.zeros(要素数, dtype=np.int32)
ヒストグラムの色をミディアムスプリンググリーンに指定する	plt.hist(データ列, color='mediumspringgreen')
三数の最小値	min(x, y, z)
リストの要素を並べる	sorted(リスト)
option: ラベンダー色を使用する	color = 'lavender'
option: データ型として複素数型を使う	bool = np.int<nl>dtype = bool
リストとイテラブルについて散布図を描画し、、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
predicateFuncが真となるイテラブルの部分	itertools.takewhile(predicateFunc, iterable)
棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
切り下げて整数にする	math.floor(x)
ガウス過程回帰モデルを用意する	model = sklearn.gaussian_process.GaussianProcessRegressor()
縦棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
散布図を右三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='>')
option: スラグレーを使用する	color = 'slategrey'
データフレームの一部のカラムのNaNを第二四分位数で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
文字列を最後の区切り文字で二分割して残りを使う	文字列.rpartition(セパレータ)[-1]
データフレームの選択した列が正規分布からどれだけ、尖っているか見る	df[['列A', '列B']].skew()
赤い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
赤色を用いてヒストグラムを描画する	plt.hist(データ列, color='red')
折れ線グラフの上三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
UTF8で追加できるように既存のファイルを開く]	open(filepath, mode='a', encoding='utf-8')
データフレームのカラムの偏差値を計算する	50 + 10 * scipy.stats.zscore(df['列A'])
コーラル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
表データをサンプリングする	df.sample()
文字列をインターンする	sys.intern(文字列)
横棒グラフを赤色として描画する	plt.barh(データ列x, データ列y, color='red')
主成分分析の準備をする	model = sklearn.decomposition.PCA(n_components=n)
option: ライムグリーン色を使用する	color = 'limegreen'
分類モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
実数の小数点以下を四捨五入する	round(x)
option: インディゴを用いる	color = 'indigo'
ミディアムパープル色でヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
ダークカーキにヒストグラムの色を変更する	plt.hist(データ列, color='darkkhaki')
option: マーカーを大バツに設定する	marker = 'X'
濃いシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
option: グリーンにグラフの色を設定する	color = 'green'
線グラフの色をグリーンにする	plt.plot(データ列x, データ列y, color='green')
小数点以下'4'桁まで表示する	':.4f' = ':.3f'<nl>print(':.4f'.format(x))
辞書に項目名があるか	キー in 辞書
ミスティローズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
2つのリストから辞書	dict(zip(リスト, リスト2))
サーモンにヒストグラムの色を指定する	plt.hist(データ列, color='salmon')
複数のの条件が何か成り立つ	条件 or 条件2 or 条件3
データフレームを並べて、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
option: グラフの色をダークスラテグレーにする	color = 'darkslategray'
紺碧色としてヒストグラムを描画する	plt.hist(データ列, color='azure')
折れ線グラフの▲マーカーの色を変える	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
配列と配列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
縦棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
データフレームの上位25％を求める	df.quantile(0.25)
スラグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
option: データ型として複素数型を使用する	bool = np.int<nl>dtype = bool
eの浮動小数点数乗	math.exp(x)
文字列は文字列より辞書順で前か調べる	文字列 < 文字列2
データフレームをソートし、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
ヒストグラムの色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
ネイビー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
CSVファイルファイル名がか	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
折れ線グラフの大バツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
リストと数列についての散布図に黒い上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
指定した列の値で集計しそれぞれの合計を求める	df.groupby('列A').sum()
アルファベットの大文字を全部求める	string.ascii_uppercase
線グラフの色をベージュに指定する	plt.plot(データ列x, データ列y, color='beige')
サンディーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
ケンドール相関係数としてデータフレームの一部の列の相関行列を計算する	df[['列A', '列B']].corr(method='kendall')
データフレームの選択した列を千の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
リストとリストの散布図を描画して、四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データ列を使用する	import pandas as pd
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgrey')
棒グラフをローングリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lawngreen')
散布図のマーカーの大きさをnにする	plt.scatter(データ列x, データ列y, s=n)
配列を無限に繰り返す	itertools.cycle(iterable)
カーキ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
イテラブルから新しい計数器を作る	collections.Counter(iterable)
ガウス過程分類モデルを作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
整数と整数のXOR	整数 ^ 整数2
文字列をコロンによって分割し、、列挙する	文字列.split(':')
小数点数の床数	math.floor(x)
データフレームのあるカラムの平均値	df['列A'].mean()
リストを更新不能な集合に変換する	frozenset(リスト)
データシリーズの中に日付データとがいくつあるか数える	ds.isin([value, value2]).sum()
option: 印を四角に指定する	marker = 's'
セットの浅いコピーを新規生成する	セット.copy()
正規表現に文字列の先頭で複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
リストをJSONフォーマットを用いてファイル出力に保存する	json.dump(リスト, ファイル出力, ensure_ascii=False)
データフレームのある列が正規分布からどの程度、尖っているか見る	df['列A'].skew()
option: ポイント印を描画する	marker = '.'
折れ線グラフを一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
ひとつでも非大文字が文字列中にあるかどうか	any(not c.isupper() for c in 文字列)
辞書のコピーを作成する	dict(辞書)
文字列の両端から改行を除く	文字列.strip('\n')
整数の商	整数 / 整数2
ヒストグラムをミディアムスプリンググリーン色として描画する	plt.hist(データ列, color='mediumspringgreen')
リストの要素をクリアにする	リスト.clear()
散布図をカーキ色を使って描画する	plt.scatter(データ列x, データ列y, color='khaki')
文字列の指定した位置以降に部分文字列が含まれない	文字列.find(部分文字列, 開始位置) == -1
数列からランダム複数個に選んでリストにする	random.choices(数列, k=n)
箱髭図でデータフレームの2つの列を並べて図示する	plt.boxplot([df['カラム'], df['カラム']])
散布図に青い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
横棒グラフをダークオレンジ色として描画する	plt.barh(データ列x, データ列y, color='darkorange')
フローラルホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='floralwhite')
データフレームからカテゴリデータの列名の一覧を求める	df.select_dtypes('object').columns
表データのあるカラムの日	df['列A'].dt.day
指定したカラムの文字列を未入力値にする	df['列A'].replace(値, np.nan)
リストと配列の散布図に赤い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームは正規分布からどれだけ尖っているか見る	df.skew()
ヒストグラムを貝殻色を使って描画する	plt.hist(データ列, color='seashell')
ヒストグラムの色をオリベドラブに指定する	plt.hist(データ列, color='olivedrab')
パーセント付きの円グラフを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
リストの要素を文字列として指定した文字列で連結する	文字列.join(map(str, リスト))
option: トマトを用いる	color = 'tomato'
データフレームの欠損値を後の行の値に設定する	df.fillna(method='bfill')
データフレームを二つの列によってまとめた表	df.groupby(['列A', '列B'])
year年を日付にする	datetime.date(year=year, month=1, day=1)
部分文字列で文字列を分割して、列挙する	文字列.split(部分文字列)
事前に複数行対応としてパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
文字が平仮名か判定する	('ぁ' <= 文字 <= 'ん')
カラムを標準化する	scipy.stats.zscore(df['列A'])
三つ並べて度数分布図を描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームをCSVファイルにBOMを付けて保存する	df.to_csv('file.csv', encoding='utf_8_sig')
ヒストグラムを点線で描く	plt.hist(データ列, linestyle='dotted')
折れ線グラフをミッドナイトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='midnightblue')
シーグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
データフレームの指定した列の未入力値を直前の値で埋める	df['列A'].fillna(method='ffill')
オブジェクトにプロパティが存在するかどうか確認する	hasattr(obj, プロパティ名)
リストから重複を取り除く	sorted(set(リスト), key=リスト.index)
オブジェクトは数値かどうか調べる	isinstance(obj, (int,float))
option: ダークターコイズ色を用いる	color = 'darkturquoise'
折れ線グラフのポイント印の大きさを設定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
データ列と数列の散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データシリーズの未入力値をその最小値で埋める	ds.fillna(ds.min())
散布図をハニーデュー色を用いて描画する	plt.scatter(データ列x, データ列y, color='honeydew')
文字列の両端から部分文字列を消す	文字列.strip(部分文字列)
リストとリストについて散布図を描画し、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図を黒い星マーカーで描く	plt.plot(データ列x, データ列y, marker='*', c='k')
グラフのx座標にラベルをつける	plt.xlabel('x軸ラベル')
辞書から項目名とその値をペアとして取り出す	辞書.items()
８進数字を全部見る	string.octdigits
配列からランダムに1個選んでリストにする	random.choice(配列)
カテゴリでグループ化して、データフレームをに箱ひげ図を用いて可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームのカラムのトリム平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
積率相関係数でデータフレームの相関行列を求める	df.corr(method='pearson')
キューを全て取り除く	両端キュー.clear()
散布図をrgbの左三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
コーラル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
辞書のコピーを生成する	辞書.copy()
散布図を星マーカーとして描く	plt.plot(データ列x, データ列y, marker='*')
散布図を大バツマーカーとして描く	plt.plot(データ列x, データ列y, marker='X')
浮動小数点数が正か調べる	x > 0
データフレームの欠損値を最頻値に指定する	df.fillna(df.mode().iloc[0])
option: レベッカパープル色を使用する	color = 'rebeccapurple'
ライトスレイグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
セットから例外なく整数を取り除く	セット.discard(数)
option: 印の太さを変更する	markeredgewidth = 2.5
数列とリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
ポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.')
縦棒グラフをフォレストグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='forestgreen')
インディゴ色を用いてヒストグラムを描画する	plt.hist(データ列, color='indigo')
小数点数の小数部を計算する	math.modf(x)[0]
配列を縦ベクトルに変形する	aArray.reshape(-1, 1)
変数名はスタックフレームかどうかテストする	inspect.isframe(識別子)
日付時刻データの日付を使う	aDatetime.date()
整数を2進数表現にする	bin(整数)
識別子がコードか判定する	inspect.iscode(識別子)
分類モデルの適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
クラス分類のリコールを計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
カウンタの下位をリストとして得る	aCounter.most_common()[:-n-1:-1]
option: ライトコーラルに色を設定する	color = 'lightcoral'
option: 改行を区切りで使う	sep = '\n'
前の行の値でデータフレームのNaNを埋める	df.fillna(method='ffill')
句点文字を全て求める	string.punctuation
rgbの左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
カラムの文字列を未入力値に変換する	df['列A'].replace(値, np.nan)
データフレームのあるカラムが正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
リストをnから順序付けする	enumerate(リスト, start=n)
オリーブにヒストグラムの色を設定する	plt.hist(データ列, color='olive')
シエナ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
データフレームの未入力値を中央値に設定する	df.fillna(df.median())
改行なしにxとyを出力する	print(x, y, end='')
レモンシフォン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
折れ線グラフにバツ印を用いる	plt.plot(データ列x, データ列y, marker='x')
リストと数列の散布図に上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
option: アリスブルーに色を設定する	color = 'aliceblue'
ダークオーキッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
文字列から改行を除去する	文字列.replace('\n', '')
イテラブルからランダムに一つ選んでリストにする	random.choice(イテラブル)
書式でデータ列をPandasの日付型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
配列を変形する	aArray.reshape(行数, 列数)
データフレームの一部のカラムが正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
ヒストグラムの色をライトグレーにセットする	plt.hist(データ列, color='lightgray')
散布図に左三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='<')
小数点数の逆双曲線正接を算出する	math.atanh(x)
縦棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
ベクトルのユニークな要素を計算する	np.unique(aArray)
縦棒グラフを黄色色として描画する	plt.bar(データ列x, データ列y, color='yellow')
データフレームの選択したカラムの未入力値を最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
日付データにn分分、足す	aDate + datetime.timedelta(minutes=n)
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
文字列をエンコーディングでバイト列にする	文字列.encode(encoding=encoding)
ペルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
データフレームの一部の列の不偏分散	df[['列A', '列B']].var(ddof=1)
ミスティローズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
文字列が全てASCII文字か調べる	文字列.isascii()
文字列中の指定した文字を数える	文字列.count(文字)
ASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
珊瑚色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
リストとリストについての散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列が全て大文字か	文字列.isupper()
入力から二つの文字列を読み込む	A, B = map(str, input().split())
option: グラフの色を暗い赤にする	color = 'darkred'
パレットトルコイズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ライトゴールドロディイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
文字列を部分文字列で末尾から区切る	文字列.rsplit(部分文字列)
ランダムに10行をデータフレームから選ぶ	df.sample(10)
option: グラフの色をコーンフラワーブルーに変更する	color = 'cornflowerblue'
データフレームのカラムのトリム分散を見る	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
整数がnで割り切れない	整数 % n != 0
バイトオーダを調べる	sys.byteorder
色差別なく色をグラフの描画で使う	sns.set(pallete='colorblind')
ロバスト推定で回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
リッジ回帰とロッソ回帰の組み合わせた分析の準備をする	model = sklearn.linear_model.ElasticNet()
xをマゼンタで出力する	print(f'\033[35m{x}\033[0m')
クラス分類の真陽性を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データ列のユニークな要素数を見る	ds.nunique()
データフレームの選択したカラムをValueMapでまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
文字列全体がパターンにケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: NaNは無視する	dropna = True
データフレームのデータ型の一覧を使う	df.dtypes
データ列を等量で分割数nでビニングする	pd.qcut(ds, n)
表データのあるカラムのタイムゾーンを東京に設定する	df['列A'].tz_convert('Asia/Tokyo')
折れ線グラフの色をイエローグリーンにする	plt.plot(データ列x, データ列y, color='yellowgreen')
線グラフの色をナバホホワイトに変更する	plt.plot(データ列x, データ列y, color='navajowhite')
option: 色をローングリーンに設定する	color = 'lawngreen'
折れ線グラフの右三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
日付データからn時間分、減らす	aDate - datetime.timedelta(hours=n)
折れ線グラフの色をライトブルーにセットする	plt.plot(データ列x, データ列y, color='lightblue')
黒い線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
変数についてのn階偏微分を算出する	sympy.diff(数式, 変数, n)
option: フローラルホワイト色を使用する	color = 'floralwhite'
ヒストグラムの色をダークオーキッドにする	plt.hist(データ列, color='darkorchid')
ヒストグラムをホワイトスモーク色として描画する	plt.hist(データ列, color='whitesmoke')
ロイヤルブルー色としてヒストグラムを描画する	plt.hist(データ列, color='royalblue')
ディムグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
データフレームから散布図を作り線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
ある列にリストの値が含まれるデータを抽出する	df[df['列A'].isin(リスト)]
データをJSON形式でファイル出力にダンプする	json.dump(データ, ファイル出力, ensure_ascii=False)
データフレームをTSVファイルで出力する	df.to_csv('file.tsv', sep='\t')
yがマイナス無限大に近づく場合の数式の極限値を計算する	sympy.limit(数式, y, -oo)
折れ線グラフの星マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
整数2がn以上、かつ、n3以下	整数 <= 整数2 and 整数2 <= n3
実数が非数かどうか調べる	math.isnan(x)
横棒グラフをスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='steelblue')
散布図のポイント印を黒色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
線グラフをパウダーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='powderblue')
ヒストグラムをライトサーモン色として描画する	plt.hist(データ列, color='lightsalmon')
データフレームの指定したカラムの文字列をNaNに変換する	df['列A'].replace(値, np.nan)
小数点数の逆余弦を求める	x = 0.33<nl>math.acos(x)
逆余弦	x = 0.33<nl>math.acos(x)
xを太文字化する	f'\033[1m{x}\033[0m'
線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
実数以下の最大の整数を算出する	math.floor(x)
文字列が別の文字列に含まれるか確認する	文字列 in 別の文字列
破線としてリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
アイボリー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
整数の各桁の和がほしい	sum(map(int, str(整数)))
エクセルファイルファイルからSJISでカンマ区切りのファイルを読む	pd.read_csv('file.csv', encoding='shift_jis')
双方向キューを配列から生成する	collections.deque(配列)
ライム色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
option: ミディアムパープルにグラフの色を指定する	color = 'mediumpurple'
ヒストグラムを暗い赤色を用いて描画する	plt.hist(データ列, color='darkred')
ダークグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
テンプレを辞書でフォーマットする	書式.format_map(辞書)
コーラル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
ピアソンを用いてデータフレームの相関行列を算出する	df.corr(method='pearson')
option: スラグレーを用いる	color = 'slategrey'
部分文字列を文字列のサフィックスから除く	文字列.removesuffix(部分文字列)
option: 色をダークオーキッドに設定する	color = 'darkorchid'
パターンで文字列を区切る	re.split(pattern, s)
レモンシフォン色でヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
パウダーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
ファイルを読み込みできるように開く]	'r' = 'a'<nl>open(filepath, mode='r')
相関係数でデータフレームの選択したカラムの相関行列を求める	df[['列A', '列B']].corr(method='pearson')
指定したカラムのNaNを最大値に指定する	df['列A'].fillna(df['列A'].max())
タプルをひとつ飛ばしで取り出す	タプル[::2]
整数がタプルのどれか	aTuple = [0, 1, 2]<nl>整数 in aTuple
最大値・最小値の範囲で一様な乱数	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
文字列が全て大文字かどうか	文字列.isupper()
目盛り線	plt.grid(color='#800080')
折れ線グラフの▲マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
KNNとしてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
データフレームをグループ化しそれぞれの最大値を求める	df.groupby('列A').max()
配列と配列についての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
リストとデータ列についての散布図に赤い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
オブジェクトのプロパティを値に指定する	setattr(obj, プロパティ名, 値)
option: 文字コードをUTF8に設定する	encoding = 'utf-8'
関数ごとにデータフレームをグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
折れ線グラフを一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
日付時刻データが木曜日かどうか	aDatetime.weekday() == 3
日付を使用する	import datetime
データフレームのあるカラムは何曜日か見る	df['列A'].dt.weekday_name
ヒストグラムの色をレモンシフォンに変更する	plt.hist(データ列, color='lemonchiffon')
文字列中に部分文字列がいくつかあるか調べる	文字列.count(部分文字列)
3自然数のLCMを計算する	math.lcm(n, n2, n3)
データ列の四分位を描画する	plt.boxplot(データ列)
カウンタを高頻出方からリストとして得る	aCounter.most_common()
二つの条件が同時に成り立つ	条件 and 条件2
y軸にラベルをつける	plt.ylabel('y軸ラベル')
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategray')
数式の数値を算出する	float(数式)
新しい文字列で正規表現にマッチした文字列を置換する	re.sub(pattern, newsub, s)
リストと配列について散布図を描画し、、▽マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
カラムの中の欠損値の数をカウントする	df['列A'].isna().sum()
グラフを描画する	import matplotlib.pyplot as plt
散布図のポイント印を青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
セットが真部分集合か調べる	セット < セット2
データ列の変遷を色付きの一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
辞書の項目名と値を入れ替える	{v: k for k, v in 辞書.items()}
データフレームをグループ化し最小値を求める	df.groupby('列A').min()
ヒストグラムをダークサーモン色を使って描画する	plt.hist(データ列, color='darksalmon')
暗い赤にヒストグラムの色を設定する	plt.hist(データ列, color='darkred')
データフレームの指定したカラムの中に存在する日付データの合計を求める	df['列A'].isin([value]).sum()
データフレームの中の列をビン数nで分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
option: ダークグリーンに色を設定する	color = 'darkgreen'
配列のモードを計算する	mode, count = scipy.stats.mode(配列)
プロットのパレットを暗くする	sns.set(pallete='dark')
識別子が抽象クラスか	inspect.isabstract(識別子)
区切り文字で文字列を二分して、後半を使う	文字列.partition(セパレータ)[-1]
データフレームの列の文字列長を列として求める	df[col].str.len()
ファイルパスをディレクトリ名とファイル名に分割する	os.path.split(filepath)
タプルを順に表示する	print(*タプル)
表データのあるカラムを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
xを赤色で出力する	print(f'\033[31m{x}\033[0m')
グラフで利用可能な色の一覧を知る	matplotlib.colors.cnames
散布図に大バツマーカーを加える	plt.scatter(データ列x, データ列y, marker='X')
ホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
リストとリストの散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: グラフの色をカデットブルーにセットする	color = 'cadetblue'
カテゴリでグループ化して、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
ExcelファイルファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgray')
文字は漢字かどうか調べる	('\u4E00' <= 文字 <= '\u9FD0')
折れ線グラフの色をマゼンタに指定する	plt.plot(データ列x, データ列y, color='magenta')
両端キューを数列から作成する	collections.deque(数列)
グラフの見た目を良くする	import seaborn as sns
線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
xが0に近づくとき、極限値を求める	sympy.limit(数式, [|変数]x, 0)
nからn2までのひとつ飛ばしの整数リスト	list(range(n, n2+1, 2))
外れ値を除いたデータフレームのカラムの分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
データフレームをグループ化し、それぞれの合計を計算する	df.groupby('列A').sum()
option: 文字コードを文字列の示す文字コードに変更する	encoding = s
配列の歪みを計算する	scipy.stats.skew(配列, bias=False)
棒グラフをピンク色として描画する	plt.bar(データ列x, データ列y, color='pink')
現在を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ダークカーキ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
オレンジレッドにヒストグラムの色をする	plt.hist(データ列, color='orangered')
日付データのデータシリーズを表データのインデックスにする	df.index = pd.DatetimeIndex(ds)
パープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
文字列中に非アスキー文字が含まれるか調べる	any(not c.isascii() for c in 文字列)
最大長を指定して、キュー	collections.deque(maxlen=最大長)
文字列中からパターンに大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
データフレームをソートし、、新しい行を加える	df.sort_values('キーとなる列').reset_index()
ビン数nでデータ列をビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: バイナリモードに変更する	mode = 'rb'
リストとリストについて散布図を描画して、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
セットを別のセットとの差分のみに更新する	セット.difference_update(セット2)
キューの中に整数が含まれてるか判定する	整数 in 両端キュー
縦棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
リストとリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
オブジェクトがバイト列クラスか	bytes = int<nl>isinstance(obj, bytes)
リストをnから順番付けする	enumerate(リスト, start=n)
リストから重複なくランダムにn個選んでリストにする	random.sample(リスト, k=n)
データフレームのカラムをヒストグラムにする	plt.hist(df[column])
折れ線グラフのバツ印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
縦棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
文字列がリストのいずれ	文字列 in リスト
ヒストグラムの色をオレンジレッドに変更する	plt.hist(データ列, color='orangered')
option: 左三角マーカーを使用する	marker = '<'
リストを引数として展開してプリントする	print(*リスト, sep=',')
実行時の標準入力のソースがターミナルかどうか調べる	os.isatty(sys.stdin.fileno())
文字列を区切り記号で二分割し、、前の方を求める	文字列.partition(セパレータ)[0]
▼印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
現在が水曜日か調べる	datetime.datetime.today().weekday() == 2
ヒストグラムをデピンク色として描画する	plt.hist(データ列, color='deeppink')
文字列中にひとつでも非アスキー文字が存在する	any(not c.isascii() for c in 文字列)
整数が1もしくは2、もしくは3に等しいかどうか調べる	整数 == 1 or 整数 == 2 or 整数 == 3
option: グラフの色をライトグレーに変更する	color = 'lightgray'
option: グラフの色をサドルブラウンに指定する	color = 'saddlebrown'
散布図をサドルブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
整数の桁数を求める	len(str(整数))
日付時刻データが月曜日	aDatetime.weekday() == 0
ヒストグラムをチョコレート色を使って描画する	plt.hist(データ列, color='chocolate')
ヒストグラムを淡いピンク色色として描画する	plt.hist(データ列, color='lightpink')
データシリーズの中にと文字列があるかどうか調べる	ds.isin([value, value2])
option: オリベドラブ色を用いる	color = 'olivedrab'
書き込み用にファイルをBOM付きでオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
option: 赤色を用いる	color = 'red'
データフレームの列のNaNを直後の値に設定する	df['列A'].fillna(method='bfill')
データフレームの中の欠損値の数を数える	df.isna().sum()
表の相関行列	df.corr()
文字列の中のケースを無視してパターンによる全マッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
オブジェクトが整数型か調べる	int = int<nl>isinstance(obj, int)
部分文字列を新しい文字列に置き換える	文字列.replace(部分文字列, 置換後の文字列)
自然数個のものからk個取り出した時の並べ方の総数を計算する	math.perm(n, k)
JSON文字列を辞書にする	data = json.loads(文字列)
文字列が全て印字できるかどうか	文字列.isprintable()
バイナリ書き込みモードとしてファイルをオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
本日は何月か知る	datetime.datetime.today().month
整数の割り算の余りを求める	整数 % 整数2
データシリーズの未入力値を直前の値で埋める	ds.fillna(method='ffill')
線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategray')
リストをインデントを指定してJSONにエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
option: マーカーの色を黄緑にする	markerfacecolor = 'chartreuse'
ダークマゼンタ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
ヒストグラムの色をパウダーブルーにする	plt.hist(データ列, color='powderblue')
ピーチパフ色でヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
データフレームの選択したカラムの中に文字列と日付データがある	df[['列A', '列B']].isin([value, value2])
最後のセパレータで文字列を分割し、、最初の方を使う	文字列.rpartition(セパレータ)[0]
option: グラフの色をグレーに変更する	color = 'grey'
option: ミディアムスプリンググリーン色を使用する	color = 'mediumspringgreen'
散布図のマーカーの太さを設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
散布図の色をブラウンにする	plt.scatter(データ列x, データ列y, color='brown')
マップ	辞書 = {}
ヒストグラムをダークシアン色を使って描画する	plt.hist(データ列, color='darkcyan')
識別子は非同期ジェネレータ関数か判定する	inspect.isasyncgenfunction(識別子)
日付時刻データが日付時刻データと同時か	aDatetime == aDatetime2
縦棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
データフレームのある列の値がx以下のデータを取り出す	df[df['列A'] <= x]
データフレームのNaNを中央値に減らす	df.fillna(df.median())
整数同士のXOR	整数 ^ 整数2
データフレームを正規表現patternで全てreplに置換する	df.replace(pattern, repl, regex=True)
線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
スカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
回帰分析をブースティングを使って行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
データフレームの列を折れ線グラフで作図する	plt.plot(df[column], df[column])
year年month月day日hour時の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
リストと配列について散布図を描画して文字列というデータラベル用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
未初期化の行列を作成する	np.empty((行数, 列数), dtype=np.int)
カラムのn次モーメントを使う	scipy.stats.moment(df['列A'], moment=n)
ダークターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
配列とリストについての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
縦棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
x軸の目盛を非表示にする	plt.xticks([])
配列のSkewnessを計算する	scipy.stats.skew(配列, bias=False)
データ列間の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
文字列中にひとつでも数字があるか確認する	any(c.isdigit() for c in 文字列)
option: 暗い赤にフォントの色を設定する	color = 'darkred'
オリーブ色でヒストグラムを描画する	plt.hist(データ列, color='olive')
サーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
option: グラフの色をミディアムオーキッドに変更する	color = 'mediumorchid'
データラベルの位置を指定する	plt.legend(loc=(x, y))
エラーの種類を使う	etype, evalue, traceback = sys.exc_info()
セットを共通要素のみに更新する	セット.intersection_update(セット2)
双方向キューに整数をプッシュする	両端キュー.append(整数)
データフレームのあるカラムをインデックスに変更する	df.set_index('列A')
等差数列から乱数を計算する	random.randrange(start, end, step)
配列とリストについて散布図をプロットして、左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
真紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
一点鎖線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
数列間のケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
散布図の印を丸印にする	plt.scatter(データ列x, データ列y, marker='o')
ファイルからnバイト、読む	f.read(n)
データフレームのあるカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
標準入力を求める	sys.stdin
リストをJSONフォーマットでファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
整数が3の倍数か	整数 % 3 == 0
下線付き化する	f'\033[4m{x}\033[0m'
ヒストグラムにカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
option: フォントの色をカーキに設定する	color = 'khaki'
識別子が関数か確認する	inspect.isfunction(識別子)
文字列をセットに追加する	セット.add(文字列)
キューに要素をプッシュする	両端キュー.append(要素)
折れ線グラフの色をネイビーに指定する	plt.plot(データ列x, データ列y, color='navy')
文字列を最後から部分文字列で区切る	文字列.rsplit(部分文字列)
割り算の余りをが欲しい	整数 % 整数2
エラーなくセットから整数を取り除く	セット.discard(数)
ふたつの列としてグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgrey')
オレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
カウントプロットを描画する	sns.countplot(x='列名', data=df)
折れ線グラフをダークバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='darkviolet')
イテラブルをセットに追加更新する	セット.update(リスト)
降順で行によってデータフレーム全体をソートする	df.sort_index(ascending=False)
データフレームのあるカラムが何月か調べる	df['列A'].dt.month
横棒グラフをライトスチールブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの色をダークオリーブグリーンに変更する	plt.plot(データ列x, データ列y, color='darkolivegreen')
識別子が抽象クラス	inspect.isabstract(識別子)
折れ線グラフの色をサンディーブラウンにセットする	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームのある列を1000の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
棒グラフを暗い赤色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
折り返しをしない	pd.set_option('expand_frame_repr', False)
整数の八進表記を使う	oct(整数)
折れ線グラフの右三角印を赤色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
option: スラグレー色を使用する	color = 'slategray'
整数を2進文字列に変換する	bin(整数)[2:]
外れ値に強い線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
表データの最初n行	df.head(n)
整数が3で割り切れるか	整数 % 3 == 0
option: シスル色を使用する	color = 'thistle'
モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
文字コードtextでファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
縦棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
確率的勾配降下を用いて回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
カテゴリでグループ化して、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
最大最小から行列を作る	np.linspace(最小値, 最大値, 要素数)
データフレームの中に文字列とがいくつあるか調べる	df.isin([value, value2]).sum()
青い一点鎖線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
グラフの縦軸を対数目盛に変更する	plt.yscale('log')
リストとリストの散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ある列の値がxに等しくない行を抽出する	df[df['列A'] != x]
折れ線グラフの色をチョコレートに変更する	plt.plot(データ列x, データ列y, color='chocolate')
ヒストグラムをロージーブラウン色として描画する	plt.hist(データ列, color='rosybrown')
ヒストグラムと勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列中のタブを空白にする	文字列.expandtabs(tabsize=n)
文字列がリストのいずれでもないかどうか調べる	文字列 not in リスト
データフレームの選択したカラムの不偏標準偏差を計算する	df[['列A', '列B']].std()
リストと数列について散布図を描画して、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
複数のシートをエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
折れ線グラフの色をダークマゼンタに変更する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームのあるカラムを丸める	df['列A'].round()
整数が2で割り切れないか	整数 % 2 == 1
データシリーズの曜日名	ds.dt.weekday_name
日付データの日数を使う	aDate.day
折れ線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
紺色としてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
現在が火曜日か調べる	datetime.datetime.today().weekday() == 1
predicateFuncがTrueとなるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
表データの先頭10行	df.head(10)
数列と数列についての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
ファイルをオープンして]、バイナリ書き込みストリームを見る	'wb' = 'a'<nl>open(filepath, mode='wb')
整数がリストのひとつ	aList = [0, 1, 2]<nl>整数 in aList
ダークオレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
option: カデットブルーを用いる	color = 'cadetblue'
線形回帰モデルの係数	model.coef_
折れ線グラフに青い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
線グラフをホワイトスモーク色を用いて描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
ある列を破壊的に削除する	df.drop('列A', axis=1, inplace=True)
今日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
データフレームの一部のカラムの欠損値をxに設定する	df[['列A', '列B']].fillna(x)
ラベンダーブラッシュにヒストグラムの色を指定する	plt.hist(データ列, color='lavenderblush')
変数を改行せず表示する	print(変数名, end='')
データフレームの最初5行を取り出す	df.head(5)
日付時刻データが金曜日かどうか確認する	aDatetime.weekday() == 4
リストをJSONフォーマットで指定したファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
棒グラフをペルー色を用いて描画する	plt.bar(データ列x, データ列y, color='peru')
タイムスタンプデータをタプルに変換する	aDatetime.timetuple()
三つの変数を順に表示する	print(変数名, 変数名, 変数名)
レモンシフォン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
option: ピンクを用いる	color = 'pink'
外れ値を除いた配列の算術平均を見る	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
ホットピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
出力ストリームにxを文字列にして書き込む	x = 0<nl>f.write(str(x))
散布図をrgbの三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
配列から重複なくn個ランダムに選んでリストにする	random.sample(配列, k=n)
２つの整数の排他的論理和	整数 ^ 整数2
ヒストグラムを破線に設定する	plt.hist(データ列, linestyle='dashed')
黒い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフの色をパレットトルコイズに指定する	plt.plot(データ列x, データ列y, color='paleturquoise')
整数の五分の1	整数 / 5
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
指定したカラムを1000の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
整数が1もしくは2もしくは3に等しいか調べる	整数 == 1 or 整数 == 2 or 整数 == 3
アルファベットの大文字を使う	string.ascii_uppercase
イテラブルを集合にする	set(イテラブル)
データフレームのn行目を消してみる	df.drop(n, axis=0)
配列の変遷を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
指定したカラムの統計量を確認する	df['列A'].describe()
追加モードを用いてファイルをオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
predicateFuncが真になるリストの要素	itertools.takewhile(predicateFunc, iterable)
縦軸の目盛の値を変更する	plt.yticks(目盛りの値リスト)
option: 色をライトスレイグレーに変更する	color = 'lightslategrey'
折れ線グラフの色をインディゴにする	plt.plot(データ列x, データ列y, color='indigo')
データ列の四分位を作図する	plt.boxplot(データ列)
整数に整数を掛ける	整数 * 整数2
オブジェクトはタプル	tuple = int<nl>isinstance(obj, tuple)
少ない方からカウンタを列挙する	aCounter.most_common()[::-1]
ロッソ回帰分析を行う	model = sklearn.linear_model.Rosso(alpha=正則化項)
要素がタプルに含まれるかどうか確認する	要素 in タプル
配列から重複なく、n要素ランダムに選んでリストにする	random.sample(配列, k=n)
ライム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
要素が辞書の値として含まれている	element in 辞書.values()
線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
あらかじめ正規表現をコンパイルする	re.compile(pattern)
変数を出力する	print(変数名)
ヒストグラムを三つ並べてプロットする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
指定した列のカテゴリで集計しそれぞれの最小値を算出する	df.groupby('列A').min()
文字列を最初の部分文字列で二分して、前半を見る	文字列.partition(部分文字列)[0]
両端キューからデキューする	両端キュー.popleft()
黒い菱形マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
黒い右三角マーカーを配列と数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
計算機イプシロンを求める	sys.float_info.epsilon
文字列は全て変数名か調べる	文字列.isidentifier()
カンマで文字列を区切って文字列リストに変換する	文字列.split(',')
ラベンダーブラッシュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
整数がnの倍数かどうか判定する	整数 % n == 0
書き込みできるようにファイルパスをEUCでオープンする]	open(filepath, mode='w', encoding='euc_jp')
データフレームの一部の列を千の位で丸めて整数型にする	df[['列A', '列B']].round(-3).astype(int)
配列の値が正規分布にしたがって発生する確率を使う	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
ファイルを開いて]、バイナリ書き込みストリームを使う	'wb' = 'a'<nl>open(filepath, mode='wb')
データフレームの一部のカラムの上位25％	df[['列A', '列B']].quantile(0.25)
ふたつの列からグループ化し標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
切り捨てながら変数の値を整数分の一にする	変数 //= 整数
横棒グラフを描いて、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
散布図を暗い赤色を使って描画する	plt.scatter(データ列x, データ列y, color='darkred')
文字列の左端から指定した文字を除去する	文字列.lstrip(文字)
棒グラフをライトサーモン色として描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
縦棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
識別子はビルトインかどうか調べる	inspect.isbuiltin(識別子)
紺色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
縦棒グラフをプロットする	plt.bar(ラベル列, データ列)
箱ひげ図を描画して平均値を追加する	plt.boxplot(データ列, showmeans=True)
リストを等間隔でn個にビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
文字列を最初のカンマで二分して、前半を求める	文字列.partition(',')[0]
リストをn個に分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
区切り記号で文字列を二つに分け、、後半を使う	文字列.partition(セパレータ)[-1]
option: ラベンダーにグラフの色を設定する	color = 'lavender'
データフレームの重複を確認する	df.duplicated()
黒い▲印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームを二つの列の値でまとめた表を求める	df.groupby(['列A', '列B'])
線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: グラフの色をホワイトに設定する	color = 'white'
ポイント印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
散布図を赤い大バツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
floatの最小値	sys.float_info.min
option: 赤にフォントの色を設定する	color = 'red'
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
濃いシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ディムグレー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ミディアムパープル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームの選択したカラムの未入力値を中央値に増やす	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
option: マーカーの色を青緑にする	markerfacecolor = 'turquoise'
option: カンマを分割記号で用いる	sep = ','
線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
散布図にポイント印を使う	plt.scatter(データ列x, データ列y, marker='.')
横棒グラフをグリーンイエロー色を使って描画する	plt.barh(データ列x, データ列y, color='greenyellow')
データシリーズの中に日付データと文字列が含まれる	ds.isin([value, value2])
タプルの要素だけ表示する	print(*タプル)
カウンタのそれぞれの項目を出現回数だけリストとして得る	aCounter.elements()
横棒グラフをミスティローズ色として描画する	plt.barh(データ列x, データ列y, color='mistyrose')
データフレームのカラムの各データ値の出現数	df[col].value_counts()
散布図をrgbの丸マーカーとして描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
外れ値に強い重回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
折れ線グラフのポイント印の色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
option: ダークブルー色を使用する	color = 'darkblue'
回帰モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
散布図をシーグリーン色として描画する	plt.scatter(データ列x, データ列y, color='seagreen')
option: グラフの色をベージュに指定する	color = 'beige'
データ列の散らばりを作図する	plt.scatter(データ列x, データ列y)
折れ線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
option: パレットトルコイズにフォントの色を設定する	color = 'paleturquoise'
セットが空か	len(セット) == 0
日付データと日付データの時間差を求める	aDate - aDate2
実行環境の名前	sys.platform
データフレームのある列を選択する	df['列A']
データフレームとデータフレームのカラムを連結する	pd.concat([df, ds], axis=1)
辞書の値もコピーする	{k: copy.copy(v) for k, v in 辞書.items()}
グラフに格子線を付ける	plt.grid(True)
二つの列でデータフレームを大きい順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
まとめてValueMapでデータフレームのある列を変更する	df['列A'].replace(ValueMap)
列とイテラブルの直積を得る	itertools.product(iterable, iterable2)
option: グラフの色をゴールドに変更する	color = 'gold'
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgray')
リストと数列についての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ホワイトスモークにヒストグラムの色を変更する	plt.hist(データ列, color='whitesmoke')
ロージーブラウン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
散布図をダークシアグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
文字列を最後の区切り記号で二つに分ける	文字列.rpartition(セパレータ)
複数の列からグループ化し標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
文字列全体がパターンにASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
ミディアムパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
データフレームをある列でグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
ヒストグラムの色をグレーにセットする	plt.hist(データ列, color='grey')
異なるカラムをキーとして2つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
赤い一点鎖線として数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
グラフの横軸の軸名を変更する	plt.xlabel('x軸ラベル')
タプルの最初を使う	タプル[0]
データフレームの平均値を求める	df.mean()
データフレームの値が未入力値かどうか確認する	df.isna()
option: マゼンタにグラフの色をセットする	color = 'magenta'
散布図の星マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
シアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
縦棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
回帰木分析を行う	model = sklearn.tree.DecisionTreeRegressor()
線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
縦向きに複数のデータフレームを結合する	pd.concat([df, df2, df3], axis=0)
データ列の散らばりを描画する	plt.scatter(データ列x, データ列y)
小数点数の床数を算出する	math.floor(x)
データシリーズの不偏標準偏差を求める	ds.std()
データフレームの選択したカラムの第一四分位数を算出する	df[['列A', '列B']].quantile(0.25)
配列の値を両端キューの先頭に追加する	両端キュー.extendleft(配列)
プロットの中のy軸に軸名をつける	plt.ylabel('y軸ラベル')
データフレームの一部のカラムのパーセンタイル	df[['列A', '列B']].quantile(パーセント/100)
option: コーンフラワーブルーにグラフの色を設定する	color = 'cornflowerblue'
散布図に右三角印を加える	plt.scatter(データ列x, データ列y, marker='>')
option: インディゴを使う	color = 'indigo'
x座標の目盛りを対数に変更する	plt.xscale('log')
項目名とその値を組として取り出す	辞書.items()
列を指定して重複を削除する	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
データフレームのカラムの名前を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
作画を正方形にする	plt.axis('equals')
折れ線グラフにバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
ある列の値がxより少ないデータを取り出す	df[df['列A'] < x]
データフレームの選択した列を10の位で丸める	df[['列A', '列B']].round(-1)
option: アイボリーを使う	color = 'ivory'
赤い点線を用いて線を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームをTSVファイルから読み込む	pd.read_csv('file.tsv', sep='\t')
データフレームのカラムをグループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
新しいロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームが重複しているか判定する	df.duplicated()
改行せず数値の出力を行う	print(数値, end='')
二つのオブジェクトが等しい	obj == obj2
目盛線	plt.grid(linestyle='--')
線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
散布図に黒い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
ある列のカテゴリ毎の最大値を計算する	df.groupby('列A').max()
数の2乗	x ** 2
日付時刻データが土曜日か	aDatetime.weekday() == 5
1からNまでのベクトル	np.arange(1, N+1)
ファイル名がTSVファイルかどうか調べる	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
横軸の目盛りを非表示にする	plt.xticks([])
項がセットのメンバー	要素 in セット
文字列が英字か調べる	文字列.isalpha()
リストをJSON形式の文字列にする	json.dumps(リスト, ensure_ascii=False)
データフレームの指定したカラムの中にがあるか調べる	df['列A'].isin([value])
二つの変数の値を順に表示する	print(変数名, 変数名)
散布図をダークグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
カウンタのボトムを列挙する	aCounter.most_common()[:-n-1:-1]
ファイルを文字コードtextを用いて開く]	text = 'utf-8'<nl>open(filepath, encoding=text)
配列のケンドールの相関係数を計算する	scipy.stats.kendalltau(配列, 配列2)
直前の値でデータフレームの選択した列の欠損値を補う	df[['列A', '列B']].fillna(method='ffill')
数列を箱ヒゲ図で描画する	plt.boxplot(データ列)
多次元データを多次元尺度構成法として項次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
デック中の要素を数える	両端キュー.count(要素)
半透明の実線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: 行列のデータ型を指定する	np.int32 = np.int<nl>dtype = np.int32
セットの更新不能版	frozenset(セット)
サドルブラウン色でヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
現在が金曜日	datetime.datetime.today().weekday() == 4
ミディアムバイオレットレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
指定した列で集計し最大値を計算する	df.groupby('列A').max()
データフレームの一部の列の空文字を欠損値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
終了位置を指定して部分文字列を探す	文字列.find(部分文字列, 0, 終了位置)  # 見つからない場合は-1
折れ線グラフに下三角印を用いる	plt.plot(データ列x, データ列y, marker='v')
ValueMapでまとめてデータシリーズの値を置き換える	ds.replace(ValueMap)
識別子がジェネレータ	inspect.isgenerator(識別子)
rgbのバツマーカーをイテラブルと数列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: グラフの色をバリーウッドに指定する	color = 'burlywood'
ふたつのリストのインターセクション	list(set(リスト).intersection(set(リスト2)))
線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
配列と配列についてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ブラック色でヒストグラムを描画する	plt.hist(データ列, color='black')
折れ線グラフをグリーンイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データ列の推移を半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgray')
option: 文字コードtextを使用する	encoding = text
異なるカラムをキーにして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
データフレームの選択した列の欠損値を最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
ラベル付きの円グラフをプロットする	plt.pie(データ列, startangle=90, labels=ラベル列)
縦棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
最初のセパレータで文字列を二分して前半を使う	文字列.partition(セパレータ)[0]
リスト内の要素が全て真かどうか調べる	all(リスト)
整数2がn以上、かつ、n3以下かどうか調べる	整数 <= 整数2 and 整数2 <= n3
データフレームをインデックスによって昇順に並べる	df.sort_index(ascending=True)
ひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
日付データからn週間分引く	aDate - datetime.timedelta(weeks=n)
データ列を2つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
データフレームをグループ化し、ある列に対し分散を算出する	df.groupby('列A')['列B'].var()
TSVをデータフレームとして読む	pd.read_csv('file.tsv', sep='\t')
グリッドの線種を一点鎖線に変更する	plt.grid(linestyle='dashbot')
線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
行列は何次元か調べる	aArray.ndim
逆順の両端キューを見る	reversed(両端キュー)
文字列が別の文字列に含まれる	文字列 in 別の文字列
回帰分析をガウス過程としてする	model = sklearn.gaussian_process.GaussianProcessRegressor()
コーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
日付時刻データからn時間を減らす	aDatetime - datetime.timedelta(hours=n)
文字列がASCII文字か	文字列.isascii()
数列からn個サンプリングしてリストにする	random.sample(数列, k=n)
乱数の配列	np.random.random(N)
グラフの色テーマを全般的に明るくする	sns.set(pallete='bright')
両端キューに文字列を積む	両端キュー.append(文字列)
ロバストな単回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
変数名をキーとして辞書を作成する	dict(name='kogi', age=6)
グラフを濃くする	sns.set(pallete='deep')
文字列中の部分文字列を数える	文字列.count(部分文字列)
折れ線グラフのマーカーを菱形にする	plt.plot(データ列x, データ列y, marker='D')
列を配列に変換する	np.array(iterable)
三つの計算結果をプリントする	print(式, 式, 式)
表計算ファイルから全てのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
セットから数値を取り除く	セット.remove(数)
整数の四乗を求める	整数 ** 4
既存のファイルを追加できるように文字コードtextとしてオープンする]	open(filepath, mode='a', encoding=text)
グラフを使う	import matplotlib.pyplot as plt
線グラフを淡いピンク色色を使って描画する	plt.plot(データ列x, データ列y, color='lightpink')
散布図に黒い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームの選択した列の中に存在する文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
シーグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
点間のユークリッド距離	math.dist(point, point2)
日付時刻データにn時間分、足す	aDatetime + datetime.timedelta(hours=n)
横棒グラフをシャルトリューズ色として描画する	plt.barh(データ列x, データ列y, color='chartreuse')
option: ミディアムオーキッドにグラフの色をセットする	color = 'mediumorchid'
二つのリストからマップを生成する	dict(zip(リスト, リスト2))
データフレームのヒストグラムを横に並べて、プロットする	sns.displot(df, x='列名', col='カテゴリ名')
開始位置から終了位置までに部分文字列がいくつかあるか調べる	文字列.count(部分文字列, 開始位置, 終了位置)
option: エンコーディングをEUCにセットする	encoding = 'euc_jp'
ヒストグラムをグリーンイエロー色として描画する	plt.hist(データ列, color='greenyellow')
データ列を横に並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
タプル内の要素が少なくとも一つ真か調べる	any(タプル)
ファイル名のセパレータ記号を使う	os.sep
データフレームの選択したカラムの欠損値をその最頻値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
データフレームのn番目の行を取り出す	df.loc[n]
指定された列のカテゴリで集計し、それぞれの合計を求める	df.groupby('列A').sum()
ダークスラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ヒストグラムを淡い茶色色で描画する	plt.hist(データ列, color='tan')
タプルの要素を小さい方からソートする	sorted(タプル, reverse=False)
表を二つの列によって降順に並べ直す	df.sort_values(by=['列A', '列B'], ascending=False)
暗い赤色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkred')
アリスブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
データフレームを複数の列によって昇順にソートして更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
ファイルパスをUTF8で書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
標準出力の出力先がターミナル	sys.stdout.isatty()
xを青色で出力する	print(f'\033[34m{x}\033[0m')
行列の分散	np.var(aArray)
データ列とリストについて散布図をプロットして、文字列というデータラベル用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
データフレームの中に日付データと日付データがいくつ存在するか調べる	df.isin([value, value2]).sum()
棒グラフを黄緑色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
グラフのx座標を対数に変更する	plt.xscale('log')
アンティークホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データシリーズの欠損値を数値で埋める	ds.fillna(x)
データフレームの値は欠損値か	df.isna()
散布図をダークシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
数列を連結して一つの文字列にする	''.join(map(str, 数列))
ライトグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
スカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
整数を2進数表記に変換する	bin(整数)
ある列の中にいくつ文字列が存在するか数える	df['列A'].isin([value]).sum()
高頻出な方からカウンタを列挙する	aCounter.most_common()
ヒストグラムの色をミディアムアクアマリンに指定する	plt.hist(データ列, color='mediumaquamarine')
配列の推移を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフの色をミディアムスレートブルーに変更する	plt.plot(データ列x, データ列y, color='mediumslateblue')
小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
部分集合	セット.issubset(セット2)
ある列の文字列が部分文字列で始まらない行を選択する	df[~ df['列A'].str.startswith(部分文字列)]
データ列と配列の散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
辞書のエントリをひとつずつ処理する	for value in 辞書.values():<nl><tab>print(value)  # FIXME
回帰分析をアンサンブル学習として行う	sklearn.ensemble.VotingRegressor()
日付時刻データが金曜日かどうか	aDatetime.weekday() == 4
リストとイテラブルについての散布図に赤いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
棒グラフをミディアムスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
青い点線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
y軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
グリッド線をプロットに付ける	plt.grid(True)
パウダーブルー色でヒストグラムを描画する	plt.hist(データ列, color='powderblue')
ビスク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
数列とリストについて散布図をプロットして▼マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
黒い右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
実行時の標準入力のソースがターミナルか調べる	os.isatty(sys.stdin.fileno())
文字列を走査し正規表現にASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
ヒストグラムの色をスチールブルーに指定する	plt.hist(データ列, color='steelblue')
整数の右シフトを求める	整数 >> n
横棒グラフをシーグリーン色として描画する	plt.barh(データ列x, データ列y, color='seagreen')
整数を二進数リテラルに変換する	bin(整数)
タイムスタンプデータと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
option: グラフの色をハニーデューに指定する	color = 'honeydew'
ベクトルの列ごとの最大値を求める	np.max(aArray, axis=0)
折れ線グラフのクロス印の大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
データフレームの重複を調べる	df.duplicated()
データフレームを四捨五入して整数型にする	df.round().astype(int)
棒グラフをチョコレート色として描画する	plt.bar(データ列x, データ列y, color='chocolate')
ミスティローズ色でヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<')
option: パープルを使用する	color = 'purple'
線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
整数除算の切り上げを算出する	(整数 + 整数2 - 1) // 整数2
複数のデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
option: 色をビスクに設定する	color = 'bisque'
配列とリストについての散布図にダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
数列をシャッフルしてリストにする	random.sample(数列, len(数列))
rgbの三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
日付データをISO書式の文字列にする	aDate.isoformat()
タイムスタンプデータの秒を求める	aDatetime.second
３自然数の最大公約数	math.gcd(n, n2, n3)
線グラフの色をカーキに指定する	plt.plot(データ列x, データ列y, color='khaki')
ライトスレイグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームのカラムをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
２つの数値を順に表示する	print(数値, 数値)
分子n、分母mの分数を生成する	fractions.Fraction(numerator=n, denominator=m)
赤い破線で線を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
標準入力から1行分読み込む	sys.stdin.readline()
option: タブを分割記号で使う	sep = '\t'
データフレームのあるカラムは何時か見る	df['列A'].dt.hour
データフレームのカラムを度数分布図で描画する	plt.hist(df[column])
整数が5で割り切れるかどうか判定する	整数 % 5 == 0
耐火レンガ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
ミディアムバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
指定したカラムがどの程度分散しているか見る	df['列A'].var()
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
ビン数nを使って配列をビン分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
今日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
x軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
項目名が辞書に存在する	キー in 辞書
deqの最後を見る	両端キュー[-1]
データ列とリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムの色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
散布図に上三角印を加える	plt.scatter(データ列x, データ列y, marker='^')
散布図のポイント印を赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
カデットブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
文字列を最初の部分文字列で二つに分け、、前半を使う	文字列.partition(部分文字列)[0]
データフレームの選択したカラムの最頻値を求める	df[['列A', '列B']].mode()
データフレームの行がnの行を抽出する	df.loc[n]
リストに別のリストを加え、拡張する	リスト.extend(リスト2)
option: 色をシーグリーンに設定する	color = 'seagreen'
横向きに三つのデータフレームを合体させる	pd.concat([df, df2, df3], axis=1)
パールバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
青い右三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
実線の折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
ファイルを追加モードとして開く]	'a' = 'a'<nl>open(filepath, mode='a')
データフレームの列は正規分布からどの程度尖っているか確認する	df['列A'].skew()
散布図の上三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
日付データが日付データと同時か確認する	aDate == aDate2
アルファベットの小文字を全部見る	string.ascii_lowercase
青い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
折れ線グラフを半透明の一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
散布図のマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
データフレームの選択したカラムを百の位で四捨五入して整数にする	df[['列A', '列B']].round(-2).astype(int)
numpyを使用する	import numpy as np
option: フォントの色をマゼンタに設定する	color = 'magenta'
0から始まるn個の整数リスト	list(range(n))
配列の行	aArray[行番号]
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
option: 黄色にグラフの色をセットする	color = 'yellow'
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
文字列中にひとつでも英数字が含まれるか	any(c.isalnum() for c in 文字列)
印字を全部使う	string.printable
黒い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
両端キューをイテラブルから作る	collections.deque(イテラブル)
勾配ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
散布図の▽マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
横棒プロットを描画し、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
データフレームの指定した列においてどの値が頻出か見る	df['列A'].mode()
ファイルパスをUTF8でオープンする]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
線グラフを色付きの破線を使って描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフの色をハニーデューに指定する	plt.plot(データ列x, データ列y, color='honeydew')
両端キューの末尾にイテラブルの各値を追加する	両端キュー.extend(イテラブル)
カウンタの項目一覧を使う	aCounter.keys()
散布図をベージュ色として描画する	plt.scatter(データ列x, データ列y, color='beige')
option: グラフの色をパールバイオレットレッドに指定する	color = 'palevioletred'
現在が何日か知る	datetime.datetime.today().day
折れ線グラフの色をライトブルーに指定する	plt.plot(データ列x, データ列y, color='lightblue')
横棒グラフをパールバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='palevioletred')
xが真	bool(x)
散布図のマーカーを黒色にする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
ライトサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
n番目のカラムを行にしてCSVファイルを読む	pd.read_csv('file.csv', index_col=n)
線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
縦棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームの選択した列は正規分布からどの程度歪んでいるか調べる	df[['列A', '列B']].kurt()
平均値でデータフレームのNaNを置換する	df.fillna(df.mean())
棒グラフをアリスブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='aliceblue')
イテラブルからn個サンプリングしてリスト化する	random.sample(イテラブル, k=n)
配列間の積立相関係数	scipy.stats.pearsonr(配列, 配列2)
黄色にヒストグラムの色を指定する	plt.hist(データ列, color='yellow')
option: グラフの色をチョコレートに指定する	color = 'chocolate'
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgray')
散布図に黒いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
辞書の項目を列挙する	辞書.values()
option: バッファのサイズを設定する	buffering = 4096
プロットで用いる色を指定する	sns.set(pallete=パレット名)
option: フォントの色をライトグリーンに指定する	color = 'lightseagreen'
指定したカラムの中に存在する文字列と文字列の個数を調べる	df['列A'].isin([value, value2]).sum()
option: ライトイエロー色を使用する	color = 'lightyellow'
シスル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
要素がセットのメンバーかどうかテストする	要素 in セット
チョコレート色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
リストとリストについて散布図を描画し、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
セパレータで文字列を分割して文字列リストにする	文字列.split(セパレータ)
ファイルを開き]、書き込みストリームを使う	'w' = 'a'<nl>open(filepath, mode='w')
二つの整数の差	整数 - 整数2
縦棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
ダークシアグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
グラフを全般的に色差別なくする	sns.set(pallete='colorblind')
ケースを無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
要素を両端キューの末尾に追加する	両端キュー.append(要素)
横棒グラフをアイボリー色として描画する	plt.barh(データ列x, データ列y, color='ivory')
カラーバーを設定する	plt.colorbar()
文字列中に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
ふたつのカラムからグループ化し、合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
2を底とする対数	math.log2(x)
データフレームのカラムのケンドールの相関係数	scipy.stats.kendalltau(df['列A'], df['列B'])
変数が無限大に近づくときの極限値を求める	sympy.limit(数式, 変数, oo)
シーケンスを累積する	itertools.accumulate(iterable, operator.mul)
yが0に近づく場合、数式の極限値を計算する	sympy.limit(数式, y, 0)
リストのn番目のの要素	リスト[n]
縦棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
ValueMapで一度にデータフレームの選択した列の値を変更する	df[['列A', '列B']].replace(ValueMap)
option: フォントの色をピンクに設定する	color = 'pink'
配列の値が正規分布にしたがって発生する累積確率を計算する	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
データフレームの選択した列の中にと文字列がいくつあるか求める	df[['列A', '列B']].isin([value, value2]).sum()
データフレームのn行以降を選択する	df[n:]
配列の行ごとの平均	np.mean(aArray, axis=1)
データフレームのカラムの各データが何回出現するか見る	df[col].value_counts()
日付を表現した文字列をタイムスタンプ型に変換する	pd.to_datetime(日付を表現した文字列)
折れ線グラフの色を茶色に変更する	plt.plot(データ列x, データ列y, color='brown')
空の辞書	辞書 = {}
ひとつ置きにリストを得る	リスト[::2]
変数が無限大に近づく場合の数式の極限値を計算する	sympy.limit(数式, 変数, oo)
文字列を最後のコロンで二分し、、残りを見る	文字列.rpartition(':')[-1]
データフレームのある列は正規分布からどの程度尖っているか見る	df['列A'].skew()
ふたつの列からグループ化し最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
折れ線グラフのクロスマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
BOM付きでファイルをオープンする]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
クラスが名前付きタプル	issubclass(C, tuple)
整数が1もしくは2	整数 == 1 or 整数 == 2
リストのスピアマンの相関係数	scipy.stats.spearmanr(数列, 数列2)
文字列をISO書式を使って日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
縦棒グラフをミディアムバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
折れ線グラフの色を紺にする	plt.plot(データ列x, データ列y, color='darkblue')
黒い丸マーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
横棒グラフを描画し、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
見やすいグラフを使う準備をする	import seaborn as sns
数列と配列の散布図を描画して、ポイントマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフの四角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
棒グラフをラベンダーブラッシュ色を用いて描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
散布図の丸印を赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
折れ線グラフの色をライトスカイブルーにする	plt.plot(データ列x, データ列y, color='lightskyblue')
長さの制限された両端キューをリストから用意する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
データフレームのn行目以降抽出する	df[n:]
整数を両端キューにプッシュする	両端キュー.append(整数)
入力を整数として受け取る	int(input())
カテゴリで色付けして、にバイオリン図でデータフレームを見る	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
イテラブルとリストの散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
整数が整数2以下、もしくは、n3以上か調べる	整数 <= 整数2 or 整数 >= n3
折れ線グラフのダイアモンド印を青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
option: トマトに色を設定する	color = 'tomato'
ハニーデュー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
リストを順にプリントする	print(*リスト)
文字列を最後のカンマで二分して、後ろの方を求める	文字列.rpartition(',')[-1]
折れ線グラフに左三角印を使う	plt.plot(データ列x, データ列y, marker='<')
数列間の相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
1文字だけ標準入力から読む	sys.stdin.read(1)
散布図にrgbの下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
オブジェクトは浮動小数点数かどうか	float = int<nl>isinstance(obj, float)
データシリーズは正規分布からどれだけ、歪んでいるか確認する	ds.kurt()
eの乗数を求める	math.exp(x)
２つの列の値でデータフレームをまとめたグループ	df.groupby(['列A', '列B'])
リストとしてデータフレームのある列を抽出する	df['列A'].values.tolist()
データフレームのカラムを千の位で丸めて整数にする	df['列A'].round(-3).astype(int)
日付時刻データの曜日を整数で見る	aDatetime.weekday()
数列と配列の散布図を描画して、ダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ペールグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='palegreen')
スクリプト名	sys.argv[0]
文字列を右からカンマで分割する	文字列.rsplit(',')
実数のアークコサイン	x = 0.33<nl>math.acos(x)
カタカナをひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in 文字列])
折れ線グラフの下三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ひとつでも大文字が文字列中に含まれる	any(c.isupper() for c in 文字列)
ヒストグラムでカラーマップを用いる	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ふたつのセットが共通の要素を持たない	セット.isdisjoint(セット2)
ミディアムバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
折れ線グラフの色をマルーンに変更する	plt.plot(データ列x, データ列y, color='maroon')
下三角印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
option: ダークターコイズに色を変更する	color = 'darkturquoise'
青い破線でイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
四分位数ごとに配列をビニングする	pd.qcut(aArray, 4)
列をビニングする	pd.cut(ds, aList)
縦棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
ヒストグラムをプラム色として描画する	plt.hist(データ列, color='plum')
グリーンイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
その平均値でデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(df['列A'].mean())
回帰分析を行う	model = sklearn.linear_model.LinearRegression()
文字列の先頭で正規表現に複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
指定したカラムの中のNaNの個数を数える	df['列A'].isna().sum()
ヒストグラムの色をミントクリームに変更する	plt.hist(データ列, color='mintcream')
option: ライトブルーを使う	color = 'lightblue'
1行だけ列を除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
option: アクアにグラフの色を指定する	color = 'aqua'
マゼンタ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
重回帰モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
あるカラムの中にいくつ欠損値があるか数える	df['列A'].isna().sum()
文字列の接頭辞から部分文字列を消す	文字列.removeprefix(部分文字列)
漢字が文字列に存在するか確認する	re.search('[\u4E00-\u9FD0]', 文字列)
予測結果の再現率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
リストを空白区切りで表示する	print(*リスト)
ポイント印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
上限から下限までの範囲でヒストグラムを描画する	plt.hist(データ列, range=(start, end))
両端キューの末尾に数列の各値を追加する	両端キュー.extend(数列)
最大値でデータシリーズの欠損値を埋める	ds.fillna(ds.max())
折れ線グラフをオールドレース色を用いて描画する	plt.plot(データ列x, データ列y, color='oldlace')
時刻を使用する	import datetime
ダーク・スラテグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
データフレームの一部のカラムの空文字を未入力値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
折れ線グラフをダークオリーブグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
option: グラフの色をシャルトリューズに変更する	color = 'chartreuse'
列にシーケンスを続ける	itertools.chain(iterable, iterable2)
整数除算の切り上げを求める	(整数 + 整数2 - 1) // 整数2
サンディーブラウン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームのある列のどの値が最も出現するか見る	df['列A'].mode()
文字列を文字コードのリストにする	[ord(ch) for ch in 文字列]
配列と配列についての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
二つの文字列を大文字小文字を無視して比較する	文字列.casefold() < 文字列2.casefold()
ミディアムスプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
ある列の文字列に部分文字列が含まれないデータを取り出す	df[~df['列A'].str.contains(部分文字列)]
縦棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
横棒グラフをリネン色として描画する	plt.barh(データ列x, データ列y, color='linen')
option: スラグレー色を使用する	color = 'slategrey'
グラフにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
KNNとしてクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
データフレームの一部の列の中央値	df[['列A', '列B']].median()
option: どの列も行にしない	index_col = None
棒グラフをターコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='turquoise')
外れ値を除いたデータフレームのカラムの算術平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: フォントの色をシアンに設定する	color = 'cyan'
散布図の丸マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
option: スレートブルーを使う	color = 'slateblue'
イテラブルの変化を折れ線グラフとして可視化する	plt.plot(range(len(データ列)), データ列)
option: ポイントマーカーを加える	marker = '.'
実数のn乗の浮動小数点数剰余	pow(x, n, y)
スラグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
散布図の大バツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図の下三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
本日の日付を使う	datetime.date.today()
線グラフを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
リストとリストについての散布図を大きさnでプロットする	plt.scatter(データ列x, データ列y, s=n)
プログラムをエラーとして終える	sys.exit(1)
プロットのx軸とy軸の比率を同じする	plt.axis('equals')
タプルの個数を見る	len(タプル)
現在の時間数を使う	datetime.date.today().hour
線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
要素がマップの値に含まれていないかどうか	element not in 辞書.values()
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
行列のユニークな要素とそのインデックスを求める	u, indices = np.unique(aArray, return_index=True)
散布図に赤い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
部分文字列の出現を範囲を指定してカウントする	文字列.count(部分文字列, 開始位置, 終了位置)
配列とリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
データ列間のMAEを算出する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
セットからエラーなく整数を除去する	セット.discard(数)
今日が日曜日か調べる	datetime.datetime.today().weekday() == 6
改行せずに文字列をプリントする	print(文字列, end='')
辞書をJSON形式でファイル出力にダンプする	json.dump(辞書, ファイル出力, ensure_ascii=False)
option: UTF8を使用する	encoding = 'utf-8'
データフレームの相関行列をスピアマン順位相関係数で求める	df.corr(method='spearman')
チョコレート色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
ミントクリーム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
多層パーセプトロンでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
整数を符号付きでバイナリに変換する	整数.to_bytes(length=バイト数, byteorder='big', signed=True)
データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
リストをn回接続する	リスト * n
横棒グラフをパールバイオレットレッド色を使って描画する	plt.barh(データ列x, データ列y, color='palevioletred')
ある列の要約統計量	df['列A'].describe()
ヒストグラムの色をミディアムターコイズに変更する	plt.hist(データ列, color='mediumturquoise')
option: フォントの色をオーキッドにする	color = 'orchid'
リストとリストについて散布図を描画して、その大きさをnにする	plt.scatter(データ列x, データ列y, s=n)
日付時刻データの日付を見る	aDatetime.date()
リストの個数	len(リスト)
縦棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
シーケンスにイテラブルを続けたイテラブルを求める	itertools.chain(iterable, iterable2)
ディレクトリ	os.getcwd()
データフレームのNaNを直後の値に指定する	df.fillna(method='bfill')
赤いポイントマーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
プロット中の(x,y)の位置に補足を表示する	plt.legend(loc=(x, y))
ファイルから入力ストリームを使う	open(filepath)
xとyを改行で区切って表示する	print(x, y, sep='\n')
ベクトルの次元数	aArray.ndim
色付きの一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
散布図に赤い▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
option: グラフの色をインディアンレッドに指定する	color = 'indianred'
文字列を最後の部分文字列で二分し、、残りを求める	文字列.rpartition(部分文字列)[-1]
データフレームの選択した列の未入力値を後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
リストを文字列として、空白によって連結する	' '.join(map(str, リスト))
日付時刻データの曜日を使う	aDatetime.weekday()
ある列の標準偏差	df.groupby('列A').std()
標準出力	sys.stdout
要素がセットのメンバーかどうか調べる	要素 in セット
ある列の文字列が正規表現にマッチする行を取り出す	df[df['列A'].str.match(正規表現)]
リストとリストの散布図に文字列という簡単な説明用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
コンフュージョン・マトリックスを算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
リストの最後から要素をポップする	リスト.pop()
データフレームのデータを条件でフィルタする	df[(df['列A'] == x) & (df['列B'] == y)]
JSON形式の文字列をパースする	data = json.loads(文字列)
横棒グラフをシエナ色を使って描画する	plt.barh(データ列x, データ列y, color='sienna')
折れ線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
標準出力	sys.stdout
折れ線グラフのダイアモンドマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
option: 色をフローラルホワイトに変更する	color = 'floralwhite'
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
文字列を最後の区切り文字で分けたときの後半の文字列を取り出す	文字列.rpartition(セパレータ)[-1]
整数のビット長を確認する	整数.bit_length()
淡いピンク色にヒストグラムの色を設定する	plt.hist(データ列, color='lightpink')
ダークバイオレット色としてヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
上限を指定して、両端キュー	collections.deque(maxlen=最大長)
散布図の▲マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
2つのデータフレームを列名を指定してジョインする	'<nl>pd.merge(df, df2, on='列A')
BOM付きを用いてファイルパスを開く]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
データフレームの選択したカラムの中に文字列と日付データが含まれるか調べる	df[['列A', '列B']].isin([value, value2])
オブジェクトは論理値クラスのインスタンスか調べる	bool = int<nl>isinstance(obj, bool)
辞書の項目名に対応した値を得る	辞書.get(キー, 見つからない場合の値)
折れ線グラフの色をライトスカイブルーに変更する	plt.plot(データ列x, データ列y, color='lightskyblue')
リストから複数の要素をランダムに抽出する	random.sample(リスト, k=n)
option: ドジャーブルー色を使用する	color = 'dodgerblue'
青い破線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
タプル中の要素が最初に見つかる位置を使う	タプル.index(要素)
線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
代数計算を使用する	import sympy
多次元尺度構成法で文字列次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
データフレームのあるカラムを1000の位で四捨五入して、整数型にする	df['列A'].round(-3).astype(int)
辞書に項目名がある場合、処理する	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
CSVファイルファイル名が	filename = 'file.txt'  # ファイル name<nl>'.csv' = '.csv'<nl>filename.startswith('.csv')
日付データをn分前にする	aDate - datetime.timedelta(minutes=n)
データフレームの選択したカラムの欠損値を平均値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
散布図の右三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
折れ線グラフをフォレストグリーン色として描画する	plt.plot(データ列x, データ列y, color='forestgreen')
指定した列のカテゴリで集計し各最小値を求める	df.groupby('列A').min()
散布図にrgbのダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームのn行目をインプレイスでドロップする	df.drop(n, axis=0, inplace=True)
option: グラフの色をチョコレートにセットする	color = 'chocolate'
整数の2乗	整数 ** 2
折れ線グラフをインディアンレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='indianred')
リストに別のリストを追加し、拡張する	リスト.extend(リスト2)
データフレームをCSV形式で保存する	df.to_csv('file.csv')
データフレームを表示するとき、データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
箱ひげ図をプロットして、平均値を加える	plt.boxplot(データ列, showmeans=True)
カウンタ間で∪を算出する	aCounter | aCounter2
ダークブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
等差数列を行列にする	np.arange(開始値, 終了値, 等差)
ASCII限定として正規表現を事前にコンパイルする	re.compile(pattern, flag=re.ASCI)
線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
ISO8601の文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフの星マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
ファイルをUTF8としてオープンする]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
データフレームの先頭を確認する	df.head()
ホワイトスモーク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
部分文字列を文字列の最後から探す	文字列.rfind(部分文字列)  # 見つからない場合は-1
配列の合計を計算する	np.sum(aArray)
文字列がアスキー文字かどうか調べる	文字列.isascii()
文字列をファイルに書く	s = ''<nl>f.write(s)
アイボリー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
ダークオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
データフレームの一部の列の空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
データフレームの選択したカラムの欠損値をxで補完する	df[['列A', '列B']].fillna(x)
浮動小数点数が無限大か確認する	math.isinf(x)
新しいサポートベクター回帰モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
数列のイミュータブルな集合を求める	frozenset(数列)
リストをJSONにエンコードする	json.dumps(リスト, ensure_ascii=False)
文字列をコロンで二つに分ける	文字列.partition(':')
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgrey')
部分文字列で文字列を二分し、、前の方を使う	文字列.partition(部分文字列)[0]
リストを昇順に並べ変える	sorted(リスト, reverse=True)
日付時刻データの分を見る	aDatetime.minute
配列間の要素ごとの最大公約数を調べる	np.gcd(aArray, aArray2)
データフレームの選択したカラムのNaNを平均に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
要素はタプルに含まれないか調べる	要素 not in タプル
option: グレーを用いる	color = 'grey'
データフレームの中の列を等しい量になるようにn個に分割する	pd.qcut(df[col], n)
データフレームを表示するときカラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
グラフに使う縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
今日は何曜日か知る	datetime.datetime.today().weekday()
option: グリーンイエロー色を用いる	color = 'greenyellow'
year年month月day日hour時minute分second秒をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day,<nl><tab><tab><tab><tab>  hour=hour, minute=minute, second=second)
SJISとして既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
ダークブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
折れ線グラフの色をアクアにする	plt.plot(データ列x, データ列y, color='aqua')
三つの条件が成り立つ	条件 and 条件2 and 条件3
浮動小数点数が正かテストする	x > 0
option: ダークシアグリーンにフォントの色を変更する	color = 'darkseagreen'
インディゴ色としてヒストグラムを描画する	plt.hist(データ列, color='indigo')
両端キューは空でないかどうかテストする	len(両端キュー) != 0
リストをビニングする	pd.cut(aList, aList)
グラフの色を淡くする	sns.set(pallete='muted')
線グラフを青い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データ列の分布を可視化する	plt.scatter(データ列x, データ列y)
ヒストグラムの色をシエナに指定する	plt.hist(データ列, color='sienna')
文字列の中のASCII限定として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
データフレームの一部のカラムの不偏分散を求める	df[['列A', '列B']].var(ddof=1)
日付時刻データにn週間を加える	aDatetime + datetime.timedelta(weeks=n)
配列の調和平均を算出する	scipy.stats.hmean(配列)
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
文字列をパターンによって置換する	re.sub(pattern, newsub, s)
半透明の実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
配列の相関係数を算出する	scipy.stats.pearsonr(配列, 配列2)
横棒グラフをドジャーブルー色として描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
折れ線グラフの▼マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
青い実線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
1行だけ標準入力から読み込んで改行を取り除く	sys.stdin.readline().rstrip()
パレットトルコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
連番の行列の自動作成する	np.arange(開始値, 終了値, 等差)
項はセットに含まれないか確認する	要素 not in セット
２つのデータフレームを異なる列をキーとして内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
データシリーズの中に含まれる日付データの合計を数える	ds.isin([value]).sum()
書き込み用にEUCでファイルパスをオープンする]	open(filepath, mode='w', encoding='euc_jp')
シーケンスを関数でフィルタする	filter(func, iterable)
文字列中の正規表現を新しい文字列を用いて置き換える	re.sub(pattern, newsub, s)
ヒストグラムをリネン色として描画する	plt.hist(データ列, color='linen')
等量で配列をビン数nとして分割する	pd.qcut(aArray, n)
文字列の中のASCII限定として正規表現による全マッチを見る	re.findall(pattern, s, flags=re.ASCI)
データフレームの分散を求める	df.var()
茶色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
横棒グラフをダークグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgray')
option: 色をサーモンに設定する	color = 'salmon'
データフレームは正規分布からどれだけ歪んでいるか調べる	df.kurt()
折れ線グラフを紺色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
点線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列を最後のセパレータで二分して、前半を使う	文字列.rpartition(セパレータ)[0]
ファイルをバイナリモードで開いて]、fとする	f = open(filepath, mode='rb')
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)

rgbのクロスマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
オブジェクトの型	type(obj)
自然数のGCDを求める	math.gcd(n, n2)
散布図のマーカーの大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
パパイヤウィップ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
スカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
イテラブルと配列について散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: ペールグリーンを使う	color = 'palegreen'
実数が無限大か	math.isinf(x)
割り算のあまりの計算を書きたい	X % Y
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
データフレームを百の位で四捨五入して整数型にする	df.round(-2).astype(int)
青紫色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
グラフから格子線を表示しない	plt.grid(False)
option: パールゴールデンロッド色を用いる	color = 'palegoldenrod'
2つのオブジェクトが等しいか確認する	obj == obj2
データフレームのn行目を取り出す	df.loc[n]
画面用にプロットをセットする	sns.set(context='notebook')
カウンタのユニークな要素を列挙する	list(aCounter)
線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
折れ線グラフの色をフクシアにセットする	plt.plot(データ列x, データ列y, color='fuchsia')
折れ線グラフの色を耐火レンガに変更する	plt.plot(データ列x, データ列y, color='firebrick')
文字列の接頭辞から部分文字列を除去する	文字列.removeprefix(部分文字列)
ヒストグラムを黄色色を用いて描画する	plt.hist(データ列, color='yellow')
２つの変数の大きい方を欲しい	max(X, Y)
こんにちは世界と出力する	print('Hello World')
エポック秒の列からdatetime64型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
事前にASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
option: グラフを実線にする	linestyle = 'solid'
折れ線グラフに黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
表を二つの列によってまとめたグループを求める	df.groupby(['列A', '列B'])
青色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
option: 文字列をセパレータで用いる	sep = s
カウンタの文字列を列挙する	aCounter.keys()
線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列x, データ列y, color='mediumorchid')
前の値でデータシリーズの欠損値を埋める	ds.fillna(method='ffill')
散布図の右三角マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ガウス過程回帰モデルを用意する	model = sklearn.gaussian_process.GaussianProcessRegressor()
折れ線グラフに赤いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ファイルをオープンして]書き込みストリームを使う	'w' = 'a'<nl>open(filepath, mode='w')
文字列中の文字の登場	文字列.count(文字)
半透明の破線でリストの移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
リストの最後	リスト[-1]
リストと配列についての散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
文字列を最初のコロンで二つに分けて、残りを使う	文字列.partition(':')[-1]
正規分布に基づく確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
キューから最初の要素を取り除く	両端キュー.remove(要素)
折れ線グラフをドジャーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
n個に配列を等しい量になるように分割する	pd.qcut(aArray, n)
ラインを半透明の破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
大文字列	string.ascii_uppercase
半透明の実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
縦軸の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
散布図に右三角印を使う	plt.scatter(データ列x, データ列y, marker='>')
主成分分析を用いて多次元データを文字列次元に次元削減する	N = 2<nl>sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
option: アイボリーに色を指定する	color = 'ivory'
折れ線グラフの星マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
最初のカテゴリーを除き、データフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
散布図の▽マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
指定した列の標本分散を求める	df['列A'].var(ddof=0)
文字列の開始位置先に部分文字列があるか調べる	文字列.find(部分文字列, 開始位置) != -1
アクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='aquamarine')
四角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
整数が1もしくは2か	整数 == 1 or 整数 == 2
グラフのデザインをいい感じに設定する	sns.set()
赤色でプリントできる文字列に変換する	f'\033[31m{x}\033[0m'
ヒストグラムをカラーマップとして描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
配列を等量でビン数nで分割する	pd.qcut(aArray, n)
option: ホワイトスモークを使用する	color = 'whitesmoke'
ある列の値がxに等しく別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
データシリーズの中に存在する文字列との合計を調べる	ds.isin([value, value2]).sum()
散布図に左三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='<')
カラムの偏差値を算出する	50 + 10 * scipy.stats.zscore(df['列A'])
ダークカーキ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
折れ線グラフを青い点線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
オブジェクトがリストかタプルか調べる	isinstance(obj, (list)
線グラフの色をダークブルーに設定する	plt.plot(データ列x, データ列y, color='darkblue')
散布図にrgbの四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ダークオリーブグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
新しい勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
散布図に三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
横方向に二つのデータフレームを結合する	pd.concat([df, df2], axis=1)
数列とリストについて散布図を描き、、四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列をソートしてJSONにエンコードする	json.dumps(文字列, ensure_ascii=False, sort_keys=True)
文字がある文字列にあるかどうか調べる	文字 in 文字列
散布図をスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='springgreen')
データフレームの歪み	df.kurt()
データフレームのカラムの相関係数を算出する	scipy.stats.pearsonr(df['列A'], df['列B'])
データフレームの一部のカラムのNaNを後の行の値で埋める	df[['列A', '列B']].fillna(method='bfill')
ミディアムターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
マルーンにヒストグラムの色を設定する	plt.hist(データ列, color='maroon')
ライムグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
データシリーズを丸めて整数型にする	ds.round().astype(int)
タプルをチェーンマップに変換する	collections.ChainMap(aDict)
入力から２つの整数値を取り出す	A, B = map(int, input().split())
線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
ライトグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
グラフの縦軸のラベルをuntitledに変更する	plt.ylabel('y軸ラベル')
スタックをポップする	両端キュー.pop()
二つのデータフレームを縦方向に一つにまとめる	pd.concat([df, df2], axis=0)
フォレストグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
カラーバーを水平でつける	plt.colorbar(orientation='horizontal')
散布図をポイントマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームのあるカラムの中にある日付データと文字列の合計を調べる	df['列A'].isin([value, value2]).sum()
predicateFuncを適用したとき真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
３つ並べて度数分布図を描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
線グラフの色をサンディーブラウンに変更する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームのstart行目からend行目まで取り出す	df[start:end]
ダークブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
ヒストグラムの色をダークレッドに指定する	plt.hist(データ列, color='darkred')
option: シスルにフォントの色を設定する	color = 'thistle'
シーケンスに列を続ける	itertools.chain(iterable, iterable2)
ヒストグラムの色をオールドレースに変更する	plt.hist(データ列, color='oldlace')
ゴーストホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
option: グラフの色をグレーにセットする	color = 'grey'
点線としてヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
配列から双方向キューを用意する	collections.deque(配列)
データフレームのあるカラムが何曜日か調べる	df['列A'].dt.weekday_name
項がセットのメンバーに含まれる	要素 in セット
リストとリストの散布図に星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*')
実数がNaN	math.isnan(x)
データシリーズを万の位で四捨五入する	ds.round(-4)
データフレームの欠損値を平均値に変更する	df.fillna(df.mean())
ヒストグラムの色を赤に変更する	plt.hist(データ列, color='red')
y座標の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
新しいリッジ回帰モデルを作成する	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
option: ターコイズにグラフの色を指定する	color = 'turquoise'
一点鎖線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームのカラムの平均の標準誤差を求める	scipy.stats.sem(df['列A'])
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
ヒストグラムの線の種類を一点鎖線にする	plt.hist(データ列, linestyle='dashbot')
改行せずに二つの計算結果をプリントする	print(式, 式, end='')
実数を十の位で四捨五入する	round(x, -1)
無限に整数が繰り返すイテレータを求める	itertools.repeat(整数)
五乗を書きたい	X ** 5
データフレームの選択したカラムの値が欠損値かどうか調べる	df[['列A', '列B']].isna()
辞書をJSONフォーマットを用いて指定したファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
yがマイナス無限大に近づくとき、数式の極限値を求める	sympy.limit(数式, y, -oo)
浮動小数点数とyのノルム	math.hypot(x, y)
データフレームの指定したカラムの中に文字列と日付データがいくつあるか数える	df['列A'].isin([value, value2]).sum()
ラインを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ファイル全体を行ごとに分割してリストにする	[s.strip() for s in f.readlines()]
option: ブラック色を用いる	color = 'black'
データフレームの欠損値をドロップする	df.dropna(inplace=True)
散布図をフクシア色として描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
データフレームから型リストで指定されたデータ型の列のみ取り出す	df.select_dtypes(include=typeList)
グラフに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
グラフで使える色名の一覧を見る	matplotlib.colors.cnames
列を行列に変換する	np.array(iterable)
黒い右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフの▽印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
辞書をJSONにエンコードする	json.dumps(辞書, ensure_ascii=False)
トマト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
データ列をビンニングする	pd.cut(ds, aList)
データシリーズの中のNaNの合計を数える	ds.isna().sum()
データフレームの指定した列の標準偏差など	df['列A'].describe()
ランダムに表データから10行を抽出する	df.sample(10)
青い実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
複数行対応として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
レモンシフォン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
線グラフを半透明の破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
二つの浮動小数点数が十分に近い	math.isclose(x, x2)
行列式を算出する	np.linalg.det(aArray)
リストをn個にビン分割する	pd.cut(aList, n)
データフレームの列のパーセンタイルを求める	df['列A'].quantile(パーセント/100)
カウンタの最頻出な文字列	aCounter.most_common()[0]
セットがスーパーセットもしくは等しいか調べる	セット >= セット2
文字列を最後のカンマによって二分割する	文字列.rpartition(',')
折れ線グラフにダイアモンド印を加える	plt.plot(データ列x, データ列y, marker='D')
文字列中に非空白があるか調べる	any(not c.isspace() for c in 文字列)
二つの列からグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
データフレームを使う	import pandas as pd
データフレームの一部のカラムを正規表現patternで一度に置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
３つ並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
配列の行ごとの合計値を求める	np.sum(aArray, axis=1)
オブジェクトが名前付きタプル	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
２つの文字列が同じか調べる	文字列 == 文字列2
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategrey')
散布図のバツ印を赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: ダークターコイズ色を用いる	color = 'darkturquoise'
文字列の中で大文字・小文字を無視して正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームからランダムに5行を取り出す	df.sample(5)
日付時刻データが日曜日かどうか	aDatetime.weekday() == 6
deqのn番目を求める	両端キュー[n]
青にヒストグラムの色を指定する	plt.hist(データ列, color='blue')
降順でデータフレームをインデックスによってソートする	df.sort_index(ascending=False)
ある列のカテゴリで集計し、最大値を求める	df.groupby('列A').max()
ライトイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightyellow')
プロットの描画でパステル調に色調を使う	sns.set(pallete='pastel')
積み上げ横棒グラフをプロットする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
ファイルをUTF8として開く]	'utf-8' = 'utf-8'<nl>open(filepath, encoding='utf-8')
データシリーズを十の位で丸めて整数型にする	ds.round(-1).astype(int)
アイボリー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
あるカラムの文字列が部分文字列で始まらないデータを選択する	df[~ df['列A'].str.startswith(部分文字列)]
辞書のキーを要素に変更する	辞書[キー] = element
文字列をセパレータで分割して、文字列リストにする	文字列.split(セパレータ)
ある列の文字列に部分文字列が含まれる行を選択する	df[df['列A'].str.contains(部分文字列)]
文字列を空白で区切って、列挙する	文字列.split()
コマンド引数で与えられたファイルをひとつずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
xを白色で表示できる文字列にする	f'\033[37m{x}\033[0m'
Xのn乗が計算したい	X ** n
文字列をASCII限定として正規表現で分ける	re.split(pattern, s, flags=re.ASCI)
オブジェクトがスタックフレームかどうか確認する	inspect.isframe(オブジェクト)
ファイルをバイナリ書き込み用に開く]	'wb' = 'a'<nl>open(filepath, mode='wb')
デピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
文字列から一つずつ文字を列挙する	list(文字列)
データフレームの選択したカラムの欠損値をモードに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
縦棒グラフをゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='goldenrod')
文字列が全てASCII文字	文字列.isascii()
ターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
黒い大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
オブジェクトがいつまでも繰り返すイテラブル	itertools.repeat(element)
データフレームから列を二つのみ選択する	df[['列A', '列B']]
option: フォントの色を耐火レンガに変更する	color = 'firebrick'
option: 印をダイアモンドに変更する	marker = 'D'
option: インディアンレッドにフォントの色を設定する	color = 'indianred'
四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s')
option: 白を用いる	color = 'white'
整数が-9以上、9以下	-9 <= 整数 <= 9
浮動小数点数を切り上げる	math.ceil(x)
複数の条件を書きたい	条件式 and 条件式2
option: フォントの色をシーグリーンにセットする	color = 'seagreen'
データ列とデータ列について散布図を描画してマーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフをターコイズ色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: ブラック色を使用する	color = 'black'
テキストファイルファイル名がか	filename = 'file.txt'  # ファイル name<nl>'.txt' = '.csv'<nl>filename.startswith('.txt')
ファイルパスを書き込み用にUTF8でオープンする]	open(filepath, mode='w', encoding='utf-8')
ラベンダーブラッシュにヒストグラムの色を設定する	plt.hist(データ列, color='lavenderblush')
横棒グラフを耐火レンガ色として描画する	plt.barh(データ列x, データ列y, color='firebrick')
日付データが日曜日かどうか	aDate.weekday() == 6
オブジェクトが抽象クラスかどうか	inspect.isabstract(オブジェクト)
ヒストグラムを用いてリストを可視化する	plt.hist(データ列)
xの小数点以下'5'桁までを表示する	':.5f' = ':.3f'<nl>print(':.5f'.format(x))
３乗を欲しい	X ** 3
ソートして文字列をJSONフォーマットにエンコードする	json.dumps(文字列, ensure_ascii=False, sort_keys=True)
浮動小数点数以上の最小の整数	math.ceil(x)
リストからランダムに1個選ぶ	random.choice(リスト)
横棒グラフをスプリンググリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='springgreen')
折れ線グラフを青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
整数個のものからk個取り出した時の並べ方の総数	math.perm(n, k)
データフレームの行がnの行を抽出する	df.loc[n]
ミディアムバイオレットレッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
整数はセットのいずれでもないどうか	数 not in セット
整数を万の位で四捨五入する	round(x, -4)
パーセント付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
predicateFuncが真となるイテラブルの要素を取り出す	itertools.takewhile(predicateFunc, iterable)
データフレームのある列の値がxより小さいデータを取り出す	df[df['列A'] < x]
ラインを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ビン数nを用いてリストをビン分割する	pd.cut(aList, n)
リストとリストについての散布図にrgbの▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
バイナリ書き込みモードを用いてファイルをオープンする]	'wb' = 'a'<nl>open(filepath, mode='wb')
散布図を丸印を使い、描画する	plt.scatter(データ列x, データ列y, marker='o')
多次元データを多次元尺度構成法として要素次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
x軸の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
棒グラフをアイボリー色を使って描画する	plt.bar(データ列x, データ列y, color='ivory')
浮動小数点数の最小値を算出する	sys.float_info.min
文字列を複数行対応としてパターンで分割する	re.split(pattern, s, flags=re.MULTILINE)
回帰分析をサポートベクターマシンを用いて行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
多次元データを多次元尺度構成法として項次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
２つのデータフレームを縦方向にくっつける	pd.concat([df, df2], axis=0)
文字列をパターンによって置換する	re.sub(pattern, newsub, s)
配列からn個ランダムに選んでリスト化する	random.choices(配列, k=n)
折れ線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
option: グラフの色を暗い赤に変更する	color = 'darkred'
無限に整数が繰り返すイテレータ	itertools.repeat(整数)
リストからn要素、サンプリングする	random.sample(リスト, k=n)
option: ミッドナイトブルー色を用いる	color = 'midnightblue'
行列を元に全要素が初期値の行列	np.full_like(aArray, 初期値)
データフレームのカラムの各データ値の出現数を求める	df[col].value_counts()
赤い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームを異なる列をキーとして内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
文字列の中の複数行対応としてパターンによるすべてのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
option: 文字コードtextを使用する	encoding = text
ベストな位置に凡例を表示する	plt.legend(loc='best')
ゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='goldenrod')
ある列に重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
横棒グラフをターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='turquoise')
エクセルファイルからシート名を指定してデータフレームを読む	pd.read_excel('file.xlsx', sheet_name=シート名)
ダークスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
文字列の開始位置より後に部分文字列があるかどうか調べる	文字列.find(部分文字列, 開始位置) != -1
データフレームがどの程度分散しているか見る	df.var()
変数名をキーとして辞書	dict(name='kogi', age=6)
配列が正規分布に従うかどうか調べる	scipy.stats.shapiro(配列)
チョコレート色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
標準入力	sys.stdin
淡い茶色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
x座標を対数に変更する	plt.xscale('log')
辞書の項目の一覧	辞書.values()
ライトイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
ラインを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームの選択したカラムの中にある文字列と文字列の数を数える	df[['列A', '列B']].isin([value, value2]).sum()
テーマを全般的に色差別なくする	sns.set(pallete='colorblind')
散布図をrgbのポイントマーカーでプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: サドルブラウンにグラフの色を設定する	color = 'saddlebrown'
ヒストグラムをラベンダー色として描画する	plt.hist(データ列, color='lavender')
オブジェクトはリスト型か調べる	list = int<nl>isinstance(obj, list)
行列の要素数	aArray.size
リストと配列についての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
整数が両端キューの中に含まれてるか調べる	整数 in 両端キュー
ダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D')
散布図を耐火レンガ色として描画する	plt.scatter(データ列x, データ列y, color='firebrick')
データフレームから数値データの列だけ取り出す	df.select_dtypes('number')
その最小値でデータフレームの欠損値を埋める	df.fillna(df.min())
配列の調和平均を計算する	scipy.stats.hmean(配列)
カラムを百の位で丸めて、整数にする	df['列A'].round(-2).astype(int)
パールバイオレットレッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
x座標の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
プログラムを正しく終了する	sys.exit(0)
option: どのカラムもインデックスにしない	index_col = None
棒グラフを濃い青色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
等差数列から整数乱数を得る	random.randrange(start, end, step)
全シートを表計算から読み込む	pd.read_excel('file.xlsx', sheet_name=None)
ある列の値がxより大きくyより小さい行を抽出する	df[(x < df['列A']) & (df['列A'] < y)]
ASCII限定として正規表現で文字列を区切る	re.split(pattern, s, flags=re.ASCI)
左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<')
指定した列ついて、データフレームの重複を確認する	df.duplicated(subset='列A')
yについて偏微分を算出する	sympy.diff(数式, y)
今日は何月か知る	datetime.datetime.today().month
辞書を別の辞書として更新する	辞書.update(辞書2)
青いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
文字列中の部分文字列を置換する	文字列.replace(部分文字列, 置換後の文字列)
データフレームのあるカラムを配列として抽出する	df['列A'].values
自然数個のものからk個取り出した場合の並べ方	math.perm(n, k)
データフレームの指定した列を百の位で丸める	df['列A'].round(-2)
珊瑚色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
縦棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
ISO書式の文字列からタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフに下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
変数名はモジュールか調べる	inspect.ismodule(識別子)
数列の推移を半透明の点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
既存の行列を元にして全要素が1の配列を作る	np.ones_like(aArray)
線グラフをシエナ色として描画する	plt.plot(データ列x, データ列y, color='sienna')
縦棒グラフを赤色を用いて描画する	plt.bar(データ列x, データ列y, color='red')
横棒グラフをマルーン色として描画する	plt.barh(データ列x, データ列y, color='maroon')
タイムスタンプデータの年数	aDatetime.year
その平均値でデータシリーズの欠損値を補う	ds.fillna(ds.mean())
ロバストな線形分類器を作る	model = sklearn.linear_model.HuberClassifier()
変数が0に近づく場合の極限値を求める	sympy.limit(数式, 変数, 0)
ファイルが存在しない	not os.path.exists(filepath)
範囲を指定して部分文字列を探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
ケンドール順位相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
リストをn個にビニングし、、namesのラベルをつける	pd.cut(aList, n, labels=names)
10行をデータフレームからランダムに抽出する	df.sample(10)
散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
配列の変化を青い実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
リストの末尾から要素を得る	リスト.pop()
整数をバイナリにする	整数.to_bytes(length=バイト数, byteorder='big')
複数行対応として事前にパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ファイル全体を行分割して読む	f.readlines()
カデットブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
バリーウッドにヒストグラムの色を変更する	plt.hist(データ列, color='burlywood')
ドジャーブルー色でヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
データシリーズを千の位で四捨五入して、整数にする	ds.round(-3).astype(int)
整数が5で割り切れるかどうか確認する	整数 % 5 == 0
線グラフの色をダークターコイズに変更する	plt.plot(データ列x, データ列y, color='darkturquoise')
データフレームの欠損値が含まれる箇所を色付けする	df.style.highlight_null()
日付データにn分を足す	aDate + datetime.timedelta(minutes=n)
option: フォレストグリーンを用いる	color = 'forestgreen'
ヒストグラムを点線を用いて描画する	plt.hist(データ列, linestyle='dotted')
CSVファイルのn行目を行としてロードする	pd.read_csv('file.csv', index_col=n)
データフレームの列からユニークな値を抽出し、リスト化する	df[col].unique().tolist()
改行せず数値をプリントする	print(数値, end='')
識別子がスタックフレーム	inspect.isframe(識別子)
カテゴリ列でグループ化してデータフレームの全カラムの相関をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
option: 左三角マーカーを用いる	marker = '<'
棒グラフをダークスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
散布図の左三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
xとyをコロンで区切って出力する	print(x, y, sep=':')
ラインを色付きの一点鎖線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
三つ並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
列のNaNをxで補う	df['列A'].fillna(x)
棒グラフを青色として描画する	plt.bar(データ列x, データ列y, color='blue')
リストからn個サンプリングする	random.sample(リスト, k=n)
乱数のベクトルを作る	np.random.random(N)
黒い▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
紺碧色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
ヒストグラムの色をイエローグリーンに変更する	plt.hist(データ列, color='yellowgreen')
淡いピンク色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
データフレームのあるカラムの未入力値を直後の値に設定する	df['列A'].fillna(method='bfill')
散布図を濃い青色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
整数が整数2以下、またはn3以上か	整数 <= 整数2 or 整数 >= n3
option: アンティークホワイトを使う	color = 'antiquewhite'
キュー中の整数の出現数を数える	両端キュー.count(整数)
シーグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
行列を変形する	aArray.reshape(行数, 列数)
範囲を指定して部分文字列を文字列の最後から探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
折れ線グラフをフクシア色を使って描画する	plt.plot(データ列x, データ列y, color='fuchsia')
学習データのバージョン	version = 'wcce2022-0.1'
データフレームのあるカラムの値がxより多いデータを抽出する	df[df['列A'] > x]
リネンにヒストグラムの色を指定する	plt.hist(データ列, color='linen')
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
データフレームの一部のカラムにおいてどの値が最も出現するか見る	df[['列A', '列B']].mode()
線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
文字列を最後のコロンで分けた場合の後半の文字列	文字列.rpartition(':')[-1]
データフレームを関数の値でグループ化し、要約統計量を算出する	df.groupby(関数).describe()
散布図の菱形印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
表計算からシートを指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
option: グラフの色をスチールブルーに変更する	color = 'steelblue'
折れ線グラフの右三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
グリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
整数乱数で要素を埋めた行列を作る	np.random.randint(開始値, 終了値, N)
分類木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
英大文字から一つランダムに選ぶ	random.choice(string.ascii_uppercase)
文字列をパターンで区切る	re.split(pattern, s)
リストのパーセンタイルを描画する	plt.boxplot(データ列)
ライトゴールドロディイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
グラフのパレットを色差別なくする	sns.set(pallete='colorblind')
0からnまでの整数リスト	list(range(n+1))
線グラフをレモンシフォン色を使って描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
option: 行列のデータ型を指定する	bool = np.int<nl>dtype = bool
カデットブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
nと整数が等しい	整数 == 整数2
散布図の大バツマーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
出力ストリーム全体をリストに変換する	[s.strip() for s in f.readlines()]
ヒストグラムの色をパウダーブルーにセットする	plt.hist(データ列, color='powderblue')
折れ線グラフの色を濃い青に指定する	plt.plot(データ列x, データ列y, color='darkblue')
カラーバーを水平に描く	plt.colorbar(orientation='horizontal')
ダークシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
黒いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
タプルの先頭の要素を見る	タプル[0]
横棒グラフをサンディーブラウン色を使って描画する	plt.barh(データ列x, データ列y, color='sandybrown')
カウンタを少ない順にリストとして得る	aCounter.most_common()[::-1]
双方向キューに要素をenqueueする	両端キュー.append(要素)
折れ線グラフを淡いピンク色色として描画する	plt.plot(データ列x, データ列y, color='lightpink')
配列と同じ大きさの空配列を作成する	np.empty_like(aArray)
折れ線グラフの線の種類を一点鎖線に変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
NaNを使用する	math.nan
黒い右三角マーカーを配列とリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフの色をナバホホワイトにセットする	plt.plot(データ列x, データ列y, color='navajowhite')
折れ線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
三項演算子を書きたい	X if 条件式 else Y
文字列が全て印字できるか調べる	文字列.isprintable()
option: 小麦色を使う	color = 'wheat'
option: 回帰木の深さを制限する	maxdepth = n
タプルの要素を空白区切りで表示する	print(*タプル)
行列の行ごとの合計値を使う	np.sum(aArray, axis=1)
データフレームのデータを条件でフィルタする	df[(df['列A'] == x) & (df['列B'] == y)]
横棒グラフを暗い赤色を用いて描画する	plt.barh(データ列x, データ列y, color='darkred')
ファイルパスをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
ヒストグラムの色をサンディーブラウンにセットする	plt.hist(データ列, color='sandybrown')
散布図をスノー色を用いて描画する	plt.scatter(データ列x, データ列y, color='snow')
データフレームから１つの列を抽出する	df[['列A']]
回帰分析をランダムフォレストで行う	model = sklearn.ensemble.RandomForestRegressor()
データシリーズは正規分布からどの程度歪んでいるか見る	ds.kurt()
文字列をdatetime64型に変換する	pd.to_datetime(日付を表現した文字列)
データフレームのあるカラムの平均値	df['列A'].mean()
タン色を用いてヒストグラムを描画する	plt.hist(データ列, color='tan')
縦棒グラフをミッドナイトブルー色として描画する	plt.bar(データ列x, データ列y, color='midnightblue')
option: 未入力値を先頭に来るようにする	na_position = 'first'
線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
空のロジスティック回帰モデルを作成する	model = sklearn.linear_model.LogisticRegression()
多次元尺度構成法として要素次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
回帰分析をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: デピンクを使う	color = 'deeppink'
データフレームをグループ化し、分散を算出する	df.groupby('列A').var()
データフレームを昇順に指定した列によって破壊的に並べ直す	df.sort_values(by='列A', ascending=True, inplace=True)
３つの変数の値を順にプリントする	print(変数名, 変数名, 変数名)
ヒストグラムの色をダークシアグリーンにする	plt.hist(データ列, color='darkseagreen')
折れ線グラフの色を濃いシアンに変更する	plt.plot(データ列x, データ列y, color='darkcyan')
条件演算子が書きたい	X if 条件式 else Y
ディープスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
文字列を大文字に変換する	文字列.upper()
RANSACとしてクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
プロットの色を暗くする	sns.set(pallete='dark')
option: フォントの色をサドルブラウンに設定する	color = 'saddlebrown'
縦棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
固有値分解を行う	model = sklearn.decomposition.PCA(n_components=n)
辞書からエラーなく項目名の値	辞書.get(キー, 見つからない場合の値)
折れ線グラフの印を菱形にする	plt.plot(データ列x, データ列y, marker='D')
オブジェクトは文字列型か	str = int<nl>isinstance(obj, str)
option: ターコイズにフォントの色を変更する	color = 'turquoise'
線グラフの色をライトサーモンにセットする	plt.plot(データ列x, データ列y, color='lightsalmon')
エンディアンを調べる	sys.byteorder
文字列を文字コード列にする	[ord(ch) for ch in 文字列]
折れ線グラフの色をミディアムターコイズにセットする	plt.plot(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの色をダークターコイズにする	plt.plot(データ列x, データ列y, color='darkturquoise')
BOM付きでファイルをオープンする]	'utf_8_sig' = 'utf-8'<nl>open(filepath, encoding='utf_8_sig')
青緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
散布図に△マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
リストとデータ列についての散布図に文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ダークシアン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
事前に複数行対応としてパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データフレームのひとつのカラムだけ説明変数にする	説明変数 = df[['列名']]
プラットホームのエンコーディング	sys.getdefaultencoding()
シスル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
option: ダークスラテグレーを使う	color = 'darkslategray'
データフレームの中にある日付データと文字列の合計を数える	df.isin([value, value2]).sum()
ライトスチールブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
折れ線グラフをライトサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
黒い丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o', c='k')
回帰分析をロバスト推定で行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
スーパーセットもしくは等しいか調べる	セット >= セット2
等しくないと条件を書きたい	X != Y
ライトスレイグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
option: 色をリネンに設定する	color = 'linen'
データフレーム中のNaNをドロップする	df.dropna(inplace=True)
option: フォントの色をアイボリーに設定する	color = 'ivory'
識別子は抽象クラスかどうか調べる	inspect.isabstract(識別子)
シーケンスを行列に変換する	np.array(iterable)
正規表現に文字列の先頭でASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
Xの四乗を求めたい	X ** 4
横棒グラフをミディアムバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
プラム色でヒストグラムを描画する	plt.hist(データ列, color='plum')
要素の無限イテラブルを使う	itertools.repeat(要素)
折れ線グラフの色をシルバーに変更する	plt.plot(データ列x, データ列y, color='silver')
整数を両端キューの左に追加する	両端キュー.appendleft(整数)
折れ線グラフをサドルブラウン色として描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
パターンに文字列の先頭でASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
折れ線グラフの色をライトコーラルに指定する	plt.plot(データ列x, データ列y, color='lightcoral')
多次元データを多次元尺度構成法で整数次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
ヒストグラムの色をライトゴールドロディイエローに変更する	plt.hist(データ列, color='lightgoldenrodyellow')
横棒グラフを白色を用いて描画する	plt.barh(データ列x, データ列y, color='white')
リストの末尾から要素を取り出す	リスト.pop()
線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
第一コマンドラインを知る	sys.argv[1]
散布図に黒いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図の丸マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
折れ線グラフを実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
option: シエナ色を使用する	color = 'sienna'
option: エクセルファイルシート名をセットする	sheet_name = ['A', 'B']
日付時刻データをISO書式の文字列にする	aDatetime.isoformat()
データフレームをグループ化し、ある列の統計量を求める	df.groupby('列A').describe()['列B']
カウンタの積集合を算出する	aCounter & aCounter2
標準入力から入力される	input()
文字列を最後の部分文字列で分割して残りを見る	文字列.rpartition(部分文字列)[-1]
双方向キューの中に文字列は存在するかどうか調べる	文字列 in 両端キュー
option: ダークオーキッドを使う	color = 'darkorchid'
小さい方を欲しい	min(X, Y)
オブジェクトがモジュールかどうか調べる	inspect.ismodule(オブジェクト)
データフレームを散布図を使って可視化する	sns.scatterplot(data=df, x='列名', y='列名')
データフレームをある列をキーにして降順に破壊的に並べる	df.sort_values(by='列A', ascending=False, inplace=True)
浮動小数点数以下の最大の整数	math.floor(x)
オブジェクトが非同期ジェネレータ関数か	inspect.isasyncgenfunction(オブジェクト)
データフレームの中の列を分割する	pd.cut(df[col], aList)
プログラムの実行をここで終了する	sys.exit()
option: 色を赤にする	color = 'red'
折れ線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
黒い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームの最頻値を算出する	df.mode()
行列の平均値	np.mean(aArray)
▲印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
データ列の一意な値	ds.unique()
日付時刻データをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
実数が非数	math.isnan(x)
rgbの四角マーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
行列の標準偏差を求める	np.std(aArray)
青い一点鎖線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフの色をゲインズボロにセットする	plt.plot(データ列x, データ列y, color='gainsboro')
線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
ヒストグラムの色をライトスチールブルーに指定する	plt.hist(データ列, color='lightsteelblue')
配列の四分位を描画する	plt.boxplot(データ列)
データフレームの選択したカラムの上位25％	df[['列A', '列B']].quantile(0.25)
正規分布の確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
データフレームの指定したカラムは正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
横棒グラフをパールバイオレットレッド色を使って描画する	plt.barh(データ列x, データ列y, color='palevioletred')
シーグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
折れ線グラフの色をゴーストホワイトに変更する	plt.plot(データ列x, データ列y, color='ghostwhite')
ベクトルが何のデータ型か調べる	aArray.dtype()
折れ線グラフをカーキ色として描画する	plt.plot(データ列x, データ列y, color='khaki')
カラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
option: ミディアムスレートブルーにグラフの色を設定する	color = 'mediumslateblue'
セットが真部分集合か調べる	セット < セット2
option: グラフの色をデピンクにセットする	color = 'deeppink'
空集合	set()
大きい方を計算したい	max(X, Y)
データフレームの重複していない行だけを抽出する	df[~ df.duplicated(keep=False)]
縦棒グラフをトマト色を用いて描画する	plt.bar(データ列x, データ列y, color='tomato')
ASCII限定として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
rgbのポイントマーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
タプル中の要素が最初に見つかるインデックス	タプル.index(要素)
文字列中のタブを空白にする	文字列.expandtabs(tabsize=n)
プログラムの関数名を取得する	inspect.currentframe().f_code.co_name
ある列のカテゴリの最小値	df.groupby('列A').min()
データフレームのふたつの列をドロップしてみる	df.drop(['列A', '列B'], axis=1)
option: ダークグレーを使う	color = 'darkgrey'
ヒストグラムの色をペルーに指定する	plt.hist(データ列, color='peru')
JSONフォーマットのファイルを構文解析する	with open('file.json') as f:<nl><tab>data = json.load(f)
プロットを使う	import matplotlib.pyplot as plt
データフレームのNaNを数値で埋める	df.fillna(x)
データフレームを千の位で四捨五入して、整数型にする	df.round(-3).astype(int)
整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int)
文字列の先頭の文字を使う	文字列[0]
イテラブルの各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
option: グラフの色をライトグリーンにする	color = 'lightseagreen'
データをJSONフォーマットの文字列にする	json.dumps(データ, ensure_ascii=False)
データフレームから5行ランダムサンプリングする	df.sample(5)
マップのキーを列挙する	辞書.keys()
ミディアムブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumblue')
サーモン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
ダークゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムを白色として描画する	plt.hist(データ列, color='white')
横棒プロットをプロットして、バーの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
option: カーキ色を用いる	color = 'khaki'
モデルのバージョンを知る	version = 'wcce2022-0.1'
ヒストグラムの色をイエローグリーンに指定する	plt.hist(データ列, color='yellowgreen')
ユニコードに相当する文字	chr(文字コード)
数式を数値にする	float(数式)
現在が土曜日	datetime.datetime.today().weekday() == 5
カウンタ間でユニオンを求める	aCounter | aCounter2
n回文字列が続くイテラブルを見る	itertools.repeat(文字列, n)
散布図の印を四角にする	plt.scatter(データ列x, データ列y, marker='s')
リストを等間隔でn個にビニングする	pd.cut(aList, n)
データフレームの選択したカラムを丸めて整数にする	df[['列A', '列B']].round().astype(int)
リストをインデントを指定してJSON文字列に変換する	json.dumps(リスト, ensure_ascii=False, indent=n)
データフレームの指定した列の歪度を算出する	df['列A'].kurt()
折れ線グラフに赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフのバツ印の太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
リストをひとつ置きに得る	リスト[::2]
線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
昇順にタプルを並べる	sorted(タプル, reverse=False)
重複ありでランダムに5行をデータフレームからサンプリングする	df.sample(5, replace=True)
散布図のマーカーを黒色にする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
折れ線グラフの印をダイアモンド印にする	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフの△マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
xを青色で表示できる文字列に変換する	f'\033[34m{x}\033[0m'
文字列がセットの要素に含まれないか調べる	文字列 not in セット
yがマイナス無限大に近づくときの極限値を計算する	sympy.limit(数式, y, -oo)
データフレームのモード	df.mode()
データフレームの一部のカラムの未入力値をxで補う	df[['列A', '列B']].fillna(x)
option: ライトシアンを使用する	color = 'lightcyan'
縦棒グラフをカデットブルー色として描画する	plt.bar(データ列x, データ列y, color='cadetblue')
文字列を最後のコロンで分割する	文字列.rpartition(':')
option: マーカーを左三角に設定する	marker = '<'
複数の条件が同時に成り立つ	条件 and 条件2 and 条件3
タプルの中の最も大きい値	max(タプル)
空のヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
リストと配列の散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
より小さいと条件に書きたい	X < Y
ヒストグラムをマルーン色を使って描画する	plt.hist(データ列, color='maroon')
データフレームの文字列をNaNにする	df.replace(値, np.nan)
折れ線グラフにクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
散布図の▽マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
文字列をPandasの日付型に変換する	pd.to_datetime(日付を表現した文字列)
マップのエントリ数を得る	len(辞書)
度数分布図を描画し、合計を1にする	plt.hist(データ列, density=True)
データフレームをカラムの名前を付けず書き出す	df.to_csv('file.csv', header=None)
プロットの色を色差別なくする	sns.set(pallete='colorblind')
多次元データをSVDを用いて項次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
点線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
最後の区切り文字によって文字列を二分する	文字列.rpartition(セパレータ)
散布図を赤いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
option: インディゴ色を用いる	color = 'indigo'
ヒストグラムの色をシルバーに変更する	plt.hist(データ列, color='silver')
文字列を空白で区切って、整数リストにする	list(map(int, 文字列.split()))
横棒グラフを貝殻色を使って描画する	plt.barh(データ列x, データ列y, color='seashell')
データフレームの選択したカラムの中にあると文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
ファイルパスを文字列の示すエンコーディングで書き込み用に開く]	open(filepath, mode='w', encoding=s)
option: ゴーストホワイトにグラフの色を変更する	color = 'ghostwhite'
列と列を連結する	itertools.chain(iterable, iterable2)
文字列をJSONフォーマットにエンコードする	json.dumps(文字列, ensure_ascii=False)
横棒グラフをミディアムオーキッド色を使って描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
option: 青緑を使う	color = 'teal'
条件を満たすときだけ、実行したい	if 条件式:<nl><tab>print('条件が真のとき')  # 直して
複数のデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
n個にデータフレームの中の列をビン分割する	pd.cut(df[col], n)
データフレームの選択したカラムの未入力値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
双方向キューの先頭にイテラブルの各データを追加する	両端キュー.extendleft(イテラブル)
線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレームを行によって昇順に整列する	df.sort_index(ascending=True)
データフレームの選択した列の要約統計量	df[['列A', '列B']].describe()
やわらかい青色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
散布図のバツ印を青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
散布図に黒い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='k')
散布図に赤い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: ライトコーラルにグラフの色を設定する	color = 'lightcoral'
データ列の推移を実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid')
指定した列の中に日付データがあるか調べる	df['列A'].isin([value])
マゼンタにヒストグラムの色を変更する	plt.hist(データ列, color='magenta')
option: スラグレーにフォントの色を設定する	color = 'slategrey'
データフレームのある列を行に指定する	df.set_index('列A')
データフレームを二つの列で並べ直してNaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
option: 三二ビット整数型を使用する	np.int16 = np.int<nl>dtype = np.int16
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
イテラブルから双方向キューを作る	collections.deque(イテラブル)
データフレームのあるカラムを日付データに変換し、表データのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
青い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームをある列でグループ化する	df.groupby('列A')
2つの計算結果を出力する	print(式, 式)
２つのオブジェクトが等しいかどうか確認する	obj == obj2
TSVから文字エンコーディングを指定して読む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
データフレームの指定したカラムの標準偏差を求める	df['列A'].std()
棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
JSON形式でリストをあるファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
日付データは何月か知る	aDate.month
option: ダークグリーンにフォントの色を設定する	color = 'darkgreen'
プレゼン用にプロットを設定する	sns.set(context='talk')
option: 区切り記号を使わない	sep = ''
指定した列の分散	df['列A'].var()
折れ線グラフの左三角印を青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
日付データが月曜日かどうか	aDate.weekday() == 0
縦棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
識別子はトレースバックか調べる	inspect.istraceback(識別子)
データシリーズを10000の位で四捨五入する	ds.round(-4)
ヒストグラムの色をパレットトルコイズに変更する	plt.hist(データ列, color='paleturquoise')
データフレームを関数の値でグループ分けして列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
散布図をリネン色を使って描画する	plt.scatter(データ列x, データ列y, color='linen')
散布図の右三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
整数が1もしくは2か調べる	整数 == 1 or 整数 == 2
トマト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
配列の変遷を色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
日付と時刻から日付時刻を新規生成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: 標準出力を用いる	file = sys.stdout
横棒グラフをミディアムスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
ベクトルをイテラブルから作成する	np.array(iterable)
赤い星マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
両端キューが欲しい	両端キュー = collections.deque()
縦棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategrey')
星印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
変数がマイナス無限大に近づく場合の極限値を計算する	sympy.limit(数式, 変数, -oo)
整数型の０で全要素を初期化した行列を作成する	np.zeros(行数, 列数, dtype=np.int)
折れ線グラフの色をアクアにセットする	plt.plot(データ列x, データ列y, color='aqua')
ダイアモンド印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
大文字を小文字に変換する	文字列.lower()
option: 色をロージーブラウンに変更する	color = 'rosybrown'
日付データが土曜日か確認する	aDate.weekday() == 5
option: ダークシアグリーンにグラフの色を設定する	color = 'darkseagreen'
ダークオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
ペールグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
option: 色をミディアムスプリンググリーンに変更する	color = 'mediumspringgreen'
カテゴリで色分けして、に箱ひげ図でデータフレームを図示する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: ダークグレーを用いる	color = 'darkgray'
縦棒グラフをダークシアン色として描画する	plt.bar(データ列x, データ列y, color='darkcyan')
表計算ファイルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
赤い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='r')
横棒グラフをローングリーン色を使って描画する	plt.barh(データ列x, データ列y, color='lawngreen')
カウンタのそれぞれの要素をカウントだけ列挙する	aCounter.elements()
option: 印を四角に変える	marker = 's'
グラフに格子線を入れる	plt.grid(True)
rgbの▽マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
偽陰性を抑えたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
二つのリストから辞書を作る	dict(zip(リスト, リスト2))
散布図を下三角印で描画する	plt.scatter(データ列x, データ列y, marker='v')
エラーなくリストの要素の位置を見る	リスト.index(要素) if 要素 in リスト else -1
赤い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
要素がマップの値に含まれていないかどうか	element not in 辞書.values()
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
CSVファイルにカラムの名前を付けずデータフレームを保存する	df.to_csv('file.csv', header=None)
リスト中の要素が最初に見つかるインデックス	リスト.index(要素)
クラス分類をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームの指定した列の中にある文字列と文字列の合計をカウントする	df['列A'].isin([value, value2]).sum()
グラフで用いる横軸に軸ラベルを付ける	plt.xlabel('x軸ラベル')
文字列中に大文字が含まれない	any(not c.isupper() for c in 文字列)
文字列がリストに含まれないか	文字列 not in リスト
option: ３2ビット整数型を使う	np.int16 = np.int<nl>dtype = np.int16
ヒストグラムをゲインズボロ色として描画する	plt.hist(データ列, color='gainsboro')
option: ビスクにグラフの色を設定する	color = 'bisque'
ミディアムターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
赤色でプリントできる文字列にする	f'\033[31m{x}\033[0m'
ニューラルネットとしてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
整数の2進数表現を使う	bin(整数)
year年month月の日付をオブジェクト化する	datetime.date(year=year, month=month, day=1)
散布図の四角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
分割数nとしてリストを分割する	pd.cut(aList, n)
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
データフレームを表示するとき、最大行数をnに増やす	pd.set_option('display.max_rows', n)
折れ線グラフをミッドナイトブルー色として描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データシリーズを1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
指定したカラムの欠損値をメディアンに設定する	df['列A'].fillna(df['列A'].median())
整数が2で割り切れない	整数 % 2 == 1
折れ線グラフをピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='pink')
nからstep間隔でいつまでもカウントアップする	itertools.count(start=n, step=step)
二つのデータフレームをカラム名を指定して左ジョインする	pd.merge(df, df2, on='列A', how='left')
横棒プロットを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
配列とリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
リストをリバースする	reversed(リスト)
文字列から部分文字列を取り除く	文字列.replace(部分文字列, '')
散布図を黒い四角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
オブジェクトが浮動小数点数か	float = int<nl>isinstance(obj, float)
データフレームの最初100行	df.head(100)
アルファベットを全て使う	string.ascii_letters
ミディアムシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
option: ライトイエローにグラフの色を設定する	color = 'lightyellow'
箱髭図を描き、平均線を加える	plt.boxplot(データ列, meanline=True)
今日が土曜日かどうか調べる	datetime.datetime.today().weekday() == 5
プロットの色を全般的にパステル調にする	sns.set(pallete='pastel')
横棒グラフの色を濃い青にする	plt.barh(データ列x, データ列y, color='darkblue')
棒グラフをロージーブラウン色として描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ふたつのセットがdisjointか調べる	セット.isdisjoint(セット2)
データ列間のRMSEを求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
オブジェクトがビルトインか確認する	inspect.isbuiltin(オブジェクト)
mathモジュールを使う	import math
日付時刻データがタイムスタンプデータと同時か確認する	aDatetime == aDatetime2
整数掛ける整数	整数 * 整数2
回帰木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
折れ線グラフをミスティローズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームを関数の値で集計して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
折れ線グラフをコーラル色を用いて描画する	plt.plot(データ列x, データ列y, color='coral')
要素はタプルの要素でないか確認する	要素 not in タプル
インディアンレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
タプルをn回、加える	タプル * n
文字列の指定した範囲位置の間に部分文字列が含まれるかどうか	文字列.find(部分文字列, 開始位置, 終了位置) != -1
データフレームの指定したカラムが正規分布からどの程度歪んでいるか見る	df['列A'].kurt()
スピアマンの順位相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
データシリーズの統計量を見る	ds.describe()
パールバイオレットレッドにヒストグラムの色を指定する	plt.hist(データ列, color='palevioletred')
イテラブルを箱ひげ図にする	plt.boxplot(データ列)
折れ線グラフでデータ列を可視化する	plt.plot(データ列x, データ列y)
データフレームのカラムの尖度を計算する	scipy.stats.kurtosis(df['列A'], bias=False)
ダーク・スラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
折れ線グラフの色をダークスレートブルーにする	plt.plot(データ列x, データ列y, color='darkslateblue')
ヒストグラムの色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
ヒストグラムを描画し合計を1にする	plt.hist(データ列, density=True)
option: グラフの色をインディゴにセットする	color = 'indigo'
ファイルパスのフォルダ名	os.path.dirname(filepath)
プロットを描く準備をする	import matplotlib.pyplot as plt
タプルの合計を計算する	sum(タプル)
データフレームの選択した列の標本標準偏差	df[['列A', '列B']].std(ddof=1)
データフレームから100行サンプリングする	df.sample(100)
淡いピンク色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
アリスブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
オーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
濃い青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
アイリスのデータセットからデータフレームを読み込む	df = sns.load_dataset('iris')
赤い丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
ブースティングで回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
整数が配列のいづれかかどうか確認する	aArray = [0, 1, 2]<nl>整数 in aArray
xを黒色で表示できる文字列にする	f'\033[30m{x}\033[0m'
文字列の無限イテレータ	itertools.repeat(文字列)
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
線グラフをミディアムシアグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
小数点以下'5'桁まで表示する	':.5f' = ':.3f'<nl>print(':.5f'.format(x))
バイアスなしの重回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: フォントの色をミディアムシアグリーンに指定する	color = 'mediumseagreen'
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
1からNまでのベクトルを作る	np.arange(1, N+1)
二変数の最大値を計算する	max(x, y)
シャルトリューズ色としてヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
グループ化してデータフレームの散布図を縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
折れ線グラフの四角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
リストから重複なくランダムにn値選んでリスト化する	random.sample(リスト, k=n)
option: バイナリ書き込みモードを使用する	mode = 'wb'
表データのあるカラムの曜日	df['列A'].dt.weekday_name
実行時の標準出力の出力先がターミナルか	sys.stdout.isatty()
部分文字列が文字列の指定した位置より前にあるか	文字列.find(部分文字列, 0, 終了位置) != -1
データフレームの相関行列を求める	df.corr()
rgbのポイントマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
整数の各桁の総和を求める	sum(map(int, str(整数)))
CSVを読み込む	pd.read_csv('file.csv', sep=',')
リストと配列について散布図を描画し、、三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
線グラフの色をダークシアンにセットする	plt.plot(データ列x, データ列y, color='darkcyan')
折れ線グラフの色をダークオリーブグリーンに指定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ピンク色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
データ列の四分位を作図する	plt.boxplot(データ列)
ファイルパスをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
折れ線グラフをミディアムオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データフレームのカラム間の相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
タプルの先頭を見る	タプル[0]
ファイルパスとfilenameを結合する	os.path.join(filepath, filename)
データフレームの二つのカラムを削除してみる	df.drop(['列A', '列B'], axis=1)
ファイルパスを文字コードtextとして書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
グラフに水平方向の実線をつける	plt.axhline(y=0, linestyle='solid')
データフレームの選択したカラムを四捨五入して整数型にする	df[['列A', '列B']].round().astype(int)
データフレームの中のカラムをn個に等しい量になるようにビン分割する	pd.qcut(df[col], n)
文字列を最後の部分文字列で二分し、、前半を使う	文字列.rpartition(部分文字列)[0]
ミディアムバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumvioletred')
多い順にカウンタを列挙する	aCounter.most_common()
option: ミディアムブルー色を使用する	color = 'mediumblue'
条件にあったらループを中断したい	if 条件式:<nl><tab>break
ヒストグラムの色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
散布図に赤い▼印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ダークオレンジ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
標準入力から1行改行なしに読む	sys.stdin.readline().rstrip()
折れ線グラフの色をコーンフラワーブルーにする	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図をオリーブ色を用いて描画する	plt.scatter(データ列x, データ列y, color='olive')
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
要素がタプルに含まれる	要素 in タプル
xで指定したカラムの欠損値を補う	df['列A'].fillna(x)
xをマゼンタで表示できる文字列に変換する	f'\033[35m{x}\033[0m'
スノー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
折れ線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
折れ線グラフのクロス印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
小数点以下の表示精度を減らす	pd.set_option('precision', n)
ファイルが存在しないか	not os.path.exists(filepath)
左三角マーカーを使用し、散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
折れ線グラフをダークオリーブグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
リストの各要素を関数に適用した結果で並べる	sorted(リスト, key=func)
線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgrey')
中央値でデータ列をビン分割する	pd.qcut(ds, 2)
rgbの▽マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ネイビー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
ダークスラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ValueMapでデータフレームを全部置換する	df.replace(ValueMap)
10を底とする小数点数の対数	math.log10(x)
整数乱数で要素を埋めた行列を作る	np.random.randint(開始値, 終了値, (行数, 列数))
ある列の文字列に部分文字列があるデータを取り出す	df[df['列A'].str.contains(部分文字列)]
ファイルからJSONフォーマットのデータを読む	with open('file.json') as f:<nl><tab>data = json.load(f)
黒い▼マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームのカラム名をまとめて置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
改行なしに２つの変数をプリントする	print(変数名, 変数名, end='')
二つの条件のうち何か成り立つ	条件 or 条件2
最大値・最小値の範囲で一様な乱数	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
文字列から接尾辞を取り除いた文字列	文字列.removeprefix(部分文字列)
改行によって文字列を区切る	文字列.splitlines()
原点から点までの距離を計算する	math.hypot(x, y)
横棒グラフをラベンダー色を使って描画する	plt.barh(データ列x, データ列y, color='lavender')
ガウス過程で回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
バリーウッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
option: 色を貝殻に指定する	color = 'seashell'
書き込み用にSJISでファイルをオープンする]	open(filepath, mode='w', encoding='shift_jis')
リストとリストについての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
グラフの色テーマを淡くする	sns.set(pallete='muted')
パパイヤウィップにヒストグラムの色を変更する	plt.hist(データ列, color='papayawhip')
散布図の▼マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
カウンタの文字列一覧	aCounter.keys()
XからYを引いた結果を計算したい	X - Y
rgbの左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データ列の各値が何回出現するか見る	ds.value_counts()
データフレームの選択したカラムを千の位で四捨五入する	df[['列A', '列B']].round(-3)
日付時刻データの年を見る	aDatetime.year
数列とリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
パールゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームから指定されたデータ型の列名リスト	df.select_dtypes(型).columns
変数の値を2倍にしたい	X *= 2
２つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
xをブール値にする	bool(x)
もしコマンドラインが与えられたなら、処理する	if len(sys.argv) > 1:<nl><tab>print(sys.argv[1])  # 具体的な処理にする
xとyを改行で区切って出力する	print(x, y, sep='\n')
指定した列によって昇順にデータフレームを並べ直し、、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
ある列のカテゴリ毎の分散	df.groupby('列A').var()
折れ線グラフの大バツ印を赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
SVDで多次元データを要素次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
データフレームの中の列をビン数nとしてビン分割する	pd.cut(df[col], n)
option: 色をブラックに設定する	color = 'black'
改行しないで変数をプリントする	print(変数名, end='')
複数行対応として正規表現で文字列を区切る	re.split(pattern, s, flags=re.MULTILINE)
リストを分割する	pd.cut(aList, aList)
辞書が欲しい	辞書 = {}
データフレームの相関行列をケンドール相関係数で求める	df.corr(method='kendall')
option: 行方向に処理する	axis = 1
option: グラフの色をパープルに変更する	color = 'purple'
棒グラフをバリーウッド色として描画する	plt.bar(データ列x, データ列y, color='burlywood')
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
紺色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
タプルの最後	タプル[-1]
箱髭図を描画して、平均値を追加する	plt.boxplot(データ列, showmeans=True)
rgbに横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
xを変数化する	x = sympy.Symbol('x')
ロバストな単クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
データフレームの数値を一度に丸める	df.round()
等間隔でn個に配列をビニングする	pd.cut(aArray, n)
データシリーズを千の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
カンマで文字列を二分し、残りを求める	文字列.partition(',')[-1]
配列の列	aArray[:, 列番号]
リスト中の要素が少なくともひとつ真	any(リスト)
青色でxを出力する	print(f'\033[34m{x}\033[0m')
散布図をパパイヤウィップ色を使って描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
ゴーストホワイト色でヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
散布図のポイントマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ヒストグラムの色をダークサーモンに変更する	plt.hist(データ列, color='darksalmon')
ベクトル間の各要素の最大公約数	np.gcd(aArray, aArray2)
平均線付き箱ひげ図を描く	plt.boxplot(データ列, meanline=True)
二つの値の大きい方が欲しい	max(X, Y)
散布図に赤い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
今日が水曜日か判定する	datetime.datetime.today().weekday() == 2
option: グラフの色をダークグレーにセットする	color = 'darkgrey'
文字列からJSONをロードする	data = json.loads(文字列)
二つのタプルをネストする	collections.ChainMap(aDict, aDict2)
option: 追加モードにセットする	mode = 'a'
データ列と配列の散布図に▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
列自身を2回あわせたデカルト積	itertools.product(iterable, repeat=2)
データフレームをグループ化し、ある列に対し平均値を算出する	df.groupby('列A')['列B'].mean()
赤い破線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームの選択したカラムの欠損値をメディアンで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
エポック秒を日付時刻にする	datetime.datetime.fromtimestamp(timestamp)
option: バッファリングのサイズをする	buffering = 4096
数値がセットに含まれるか確認する	数 in セット
折れ線グラフに黒い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
option: ダークスレートブルーにフォントの色を設定する	color = 'darkslateblue'
ファイルをUTF8で書き込みできるように開く]	open(filepath, mode='w', encoding='utf-8')
辞書順で文字列が文字列より前か調べる	文字列 < 文字列2
ロバスト推定でクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
中央値でリストをビン分割する	pd.qcut(aList, 2)
散布図の右三角印の線幅を変える	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
折れ線グラフの色をディープスカイブルーにセットする	plt.plot(データ列x, データ列y, color='deepskyblue')
option: グラフの色をピーチパフに指定する	color = 'peachpuff'
ある列のカテゴリ毎の個数	df.groupby('列A').count()
変数名をキーとしてマップ	dict(name='kogi', age=6)
部分文字列で文字列を二分する	文字列.partition(部分文字列)
xを黒色化する	f'\033[30m{x}\033[0m'
サイコロと同じ乱数を生成する	random.randint(1, 6)
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
データフレームを関数でグループ化する	df.groupby(関数)
文字列全体がパターンにマッチするか見る	re.fullmatch(pattern, s)
折れ線グラフの星印を赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
自然対数の底	math.e
ヒストグラムの色をミッドナイトブルーにセットする	plt.hist(データ列, color='midnightblue')
一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの第一四分位数を計算する	df.quantile(0.25)
JSON文字列を読む	data = json.loads(文字列)
最小値でデータフレームの選択した列の欠損値を置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
散布図をレベッカパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
折れ線グラフのラインスタイルを点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフとしてデータ列の推移を作図する	plt.plot(range(len(データ列)), データ列)
データフレームのカラムの調和平均を計算する	scipy.stats.hmean(df['列A'])
横棒グラフをダークレッド色で描画する	plt.barh(データ列x, データ列y, color='darkred')
線グラフをバイオレット色で描画する	plt.plot(データ列x, データ列y, color='violet')
線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
数列から長さの制限された両端キューを生成する	最大長 = 10<nl>collections.deque(数列, maxlen=最大長)
ふたつの列からグループ化し、合計を算出する	df.groupby(['列A', '列B'], as_index=False).sum()
線グラフの色をオーキッドにセットする	plt.plot(データ列x, データ列y, color='orchid')
データ列とリストの散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
黄色でプリントできる文字列にする	f'\033[33m{x}\033[0m'
文字列の後ろから範囲を指定して部分文字列を探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
データフレームのあるカラムの名前一覧の列を選択する	columns = ['列A', '列B']<nl>df[columns]
ファイルを開く]	open(filepath)
表計算ファイルをデータフレームとして読む	pd.read_excel('file.xlsx')
アンティークホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
データフレームをグループ化しある列に対し標準偏差を計算する	df.groupby('列A')['列B'].std()
折れ線グラフの色をシアンに指定する	plt.plot(データ列x, データ列y, color='cyan')
データフレームの列を折れ線プロットで描画する	plt.plot(df[column], df[column])
データフレームのn行より後ろを抽出する	df[n:]
データ列を箱ひげ図を用いて可視化する	plt.boxplot(データ列)
データフレームの全列の相関をグラフ化する	sns.pairplot(df)
線グラフの色をライトスレイグレーにセットする	plt.plot(データ列x, データ列y, color='lightslategray')
ファイルパスを開いて]、バイナリストリームを求める	'rb' = 'a'<nl>open(filepath, mode='rb')
ファイルパスのディレクトリ名を求める	os.path.dirname(filepath)
option: ライトゴールドロディイエローに色を設定する	color = 'lightgoldenrodyellow'
線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
等しいと条件を書きたい	X == Y
折れ線グラフをシエナ色として描画する	plt.plot(データ列x, データ列y, color='sienna')
散布図をブランチドアーモンド色として描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
option: 文字列をプリントの終端に用いる	end = 文字列
データフレームの不偏分散を求める	df.var(ddof=1)
線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
スノー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
option: 紺にグラフの色を設定する	color = 'darkblue'
平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
option: フォントの色をダークサーモンに設定する	color = 'darksalmon'
プログラムの実行をエラーとして止める	sys.exit(1)
option: フォントの色をアンティークホワイトに変更する	color = 'antiquewhite'
最大長を指定して、スタック	collections.deque(maxlen=最大長)
option: グラフの色を青に指定する	color = 'blue'
タイムスタンプデータが火曜日か	aDatetime.weekday() == 1
列名を指定してデータフレームを外部結合する	pd.merge(df, df2, on='列A', how='outer')
イテラブルをベクトルにする	np.array(iterable)
折れ線グラフのポイントマーカーを青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
オブジェクトはスタックフレームか調べる	inspect.isframe(オブジェクト)
線形のクラス分類を行う	model = sklearn.linear_model.LogisticRegression()
リストの末尾から値をポップする	リスト.pop()
第一コマンドライン	sys.argv[1]
太文字でxをプリントする	print(f'\033[1m{x}\033[0m')
ダークグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkgreen')
ケンドールの相関係数	scipy.stats.kendalltau(df['列A'], df['列B'])
ベクトルの累積積を計算する	np.cumprod(aArray)
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
スカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
スラグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
ヒストグラムをダークオーキッド色を用いて描画する	plt.hist(データ列, color='darkorchid')
タプルの総和	sum(タプル)
データフレームのどの値が頻出か見る	df.mode()
大バツマーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
縦棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
ダークオーキッドにヒストグラムの色を指定する	plt.hist(データ列, color='darkorchid')
コサインを求める	math.cos(x)
フォーマットを用いて列を日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
データフレームの選択したカラムの欠損値を最小値で補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
縦軸を対数に変更する	plt.yscale('log')
rgbの大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ある列の値がxより小さいデータを取り出す	df[df['列A'] < x]
ファイルから1バイト、読み込む	f.read(1)
行列の行列式を計算する	np.linalg.det(aArray)
option: ミディアムバイオレットレッドにグラフの色を設定する	color = 'mediumvioletred'
year年month月day日をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day)
xを下線付き化する	f'\033[4m{x}\033[0m'
ファイルをEUCで書き込み用に開く]	open(filepath, mode='w', encoding='euc_jp')
実行を異常終了する	sys.exit(1)
空の勾配ブースティング分類木を作成する	model = sklearn.ensemble.GradientBoostingClassifier()
折れ線グラフの色をゲインズボロにする	plt.plot(データ列x, データ列y, color='gainsboro')
データシリーズの値をValueMapで全て置き換える	ds.replace(ValueMap)
プロットの色を濃くする	sns.set(pallete='deep')
option: 文字列を区切り記号で使う	sep = s
option: 色をダークオレンジにセットする	color = 'darkorange'
指定した列リストのみデータフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
データフレームの列の未入力値を最大値に指定する	df['列A'].fillna(df['列A'].max())
キーが辞書に存在しない時、要素を追加する	辞書.setdefault(キー, element)
指定した列を百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
折れ線グラフの線種を実線にセットする	plt.plot(データ列x, データ列y, linestyle='solid')
整数を八進表記に変換する	oct(整数)
データフレームから型型だけ選択する	df.select_dtypes(ty)
文字列が無限に繰り返すイテラブルが欲しい	itertools.repeat(文字列)
データフレームのカラム間のケンドールの相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
散布図をミディアムターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
変数のの型が知りたい	type(X)
スレートブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
リストと配列についての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
折れ線グラフをラベンダーブラッシュ色として描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
作画の背景色を白くする	sns.set(style='whitegrid')
縦棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
散布図に黒い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
option: ミディアムシアグリーン色を用いる	color = 'mediumseagreen'
ファイルからファイル名を求める	os.path.basename(filepath)
オブジェクトのポインタを見る	id(obj)
グラフのx軸とy軸の比率を同じする	plt.axis('equals')
option: ビスク色を用いる	color = 'bisque'
出力ストリームを改行除外して一行ずつ読み込む	f.readline()
コーンフラワーブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データ列の離れ具合をグラフ化する	sns.residplot(x=データ列, y=データ列)
全要素を1で初期化した配列を作る	np.ones(要素数, dtype=np.int)
タイムスタンプデータをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
ミディアムアクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
カラーパレットを色差別なくする	sns.set(pallete='colorblind')
横棒グラフをブランチドアーモンド色として描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
option: ライトシアンを使う	color = 'lightcyan'
リストとデータ列についての散布図にポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.')
列名を指定してデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
新しい文字列で文字列中の正規表現を置換する	re.sub(pattern, newsub, s)
データフレームの一部のカラムの中にあるの数を数える	df[['列A', '列B']].isin([value]).sum()
ヒストグラムをミディアムスプリンググリーン色を使って描画する	plt.hist(データ列, color='mediumspringgreen')
折れ線グラフの色をダークオーキッドにする	plt.plot(データ列x, データ列y, color='darkorchid')
２つのカウンタの共通する要素を計算する	aCounter & aCounter2
横棒グラフをライトグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgray')
option: 青緑色を使う	color = 'turquoise'
赤い点線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
文字列を最後の部分文字列で二分割して、前半を求める	文字列.rpartition(部分文字列)[0]
ビスク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
条件がみっつとも成り立つ	条件 and 条件2 and 条件3
グリーンイエロー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
目盛線	plt.grid(linewidth=3.0)
散布図をディムグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dimgray')
偽陰性を抑えたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
エポック秒のデータ列からタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
タプルを昇順に並べ変える	sorted(タプル, reverse=False)
option: シスル色を使用する	color = 'thistle'
データ列と配列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
今日が金曜日かどうか	datetime.datetime.today().weekday() == 4
折れ線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
リストとリストの散布図を描画してマーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
最適な場所に補足を表示する	plt.legend(loc='best')
大きい順にあるカラムによってデータフレームを並べ直す	df.sort_values(by='列A', ascending=False)
文字列中にひとつもアルファベットが含まれないかどうか	any(not c.isalpha() for c in 文字列)
option: 色をコーンズシルクに設定する	color = 'cornsilk'
リストをn個に等間隔でビンニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
option: 赤にグラフの色を指定する	color = 'red'
オールドレース色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
SJISを用いてファイルをオープンする]	'shift_jis' = 'utf-8'<nl>open(filepath, encoding='shift_jis')
カラム間の相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
二つの集合に共通する要素からなる集合を求める	セット.intersection(セット2)
データシリーズの秒を見る	ds.dt.second
折れ線グラフの四角印を赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
既存の行列をベースに全要素が1の配列を作成する	np.ones_like(aArray)
線グラフをスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='skyblue')
文字列中にひとつでもアルファベットが存在するか調べる	any(c.isalpha() for c in 文字列)
option: フクシアに色を設定する	color = 'fuchsia'
リストを等量でn個にビニングする	pd.qcut(aList, n)
option: フォントの色をドジャーブルーに変更する	color = 'dodgerblue'
ふたつの整数の差をがほしい	整数 - 整数2
箱ひげ図をプロットして、平均線を加える	plt.boxplot(データ列, meanline=True)
データフレームの記述統計量を見る	df.describe()
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
正規分布のパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームの指定したカラムの文字列を未入力値に変換する	df['列A'].replace(値, np.nan)
データ列の推移を赤い破線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ガウス過程分類器を作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: グラフの色をバイオレットに設定する	color = 'violet'
option: フォントの色をミディアムバイオレットレッドに指定する	color = 'mediumvioletred'
ピーチパフ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
タプルが空でないか	len(タプル) != 0
ハニーデュー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
双方向キューに整数を積む	両端キュー.append(整数)
表計算ファイルのシートをロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
リストとリストについての散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
タプルが空か	len(タプル) == 0
折れ線グラフのバツ印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
棒グラフをライトイエロー色を使って描画する	plt.bar(データ列x, データ列y, color='lightyellow')
ベクトルの要素ごとのアダマール積を求める	np.multiply(aArray, aArray2)
小数点以下をn桁に設定する	pd.set_option('precision', n)
タイムスタンプデータををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
散布図の印を大バツにする	plt.scatter(データ列x, データ列y, marker='X')
rgbの大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムの色をシルバーに指定する	plt.hist(データ列, color='silver')
データフレームの選択したカラムの中にある文字列の数を求める	df[['列A', '列B']].isin([value]).sum()
イテラブルからn個、サンプリングしてリスト化する	random.sample(イテラブル, k=n)
ヒストグラムをダークマゼンタ色として描画する	plt.hist(データ列, color='darkmagenta')
文字列を最後の区切り記号で分割して前半を求める	文字列.rpartition(セパレータ)[0]
リストとイテラブルについて散布図を描画して、マーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
整数がnで割り切れない	整数 % n != 0
option: フォントの色をグリーンに設定する	color = 'green'
数列とリストについて散布図を描画して、バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ライトコーラル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
整数で整数を整数除算する	x // y
四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
レベッカパープル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ブラック色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
タイムスタンプデータからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
文字列を走査し、パターンにマッチするか見る	re.search(pattern, s)
ヒストグラムを破線を用いて描く	plt.hist(データ列, linestyle='dashed')
折れ線グラフに丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o')
線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
２つの文字列は等しくないか調べる	文字列 != 文字列2
変数の値を整数だけ小さくする	変数 -= 整数
配列を双方向キューにする	collections.deque(配列)
整数のバイト長を見る	(整数.bit_length() + 7) // 8
rgbの菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
列の名前を列挙する	df.columns
二つの文字列は同じか	文字列 == 文字列2
分類モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
データフレームのデータ型リストを使う	df.dtypes
線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
ヒストグラムをピーチパフ色として描画する	plt.hist(データ列, color='peachpuff')
バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
例外実行したい	try:<nl><tab># ここに処理を入れる<nl><tab>pass<nl>except Exception as e:<nl><tab>print(e)
データフレームを列名を指定して右結合する	pd.merge(df, df2, on='列A', how='right')
ループを最初から実行し直したい	if 条件式:<nl><tab>continue
ヒストグラムをパールバイオレットレッド色を使って描画する	plt.hist(データ列, color='palevioletred')
option: クリムゾンを使用する	color = 'crimson'
データフレームのあるカラムは何年か見る	df['列A'].dt.year
あるカラムの文字列が部分文字列で始まるデータを選択する	df[df['列A'].str.startswith(部分文字列)]
辞書を更新する	辞書.update(辞書2)
データフレームのカラムのトリム分散を計算する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: 青色を用いる	color = 'blue'
タイムスタンプデータの月数	aDatetime.month
option: ダークサーモンにフォントの色を設定する	color = 'darksalmon'
ダークスレートブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
二つの文字列は等しくないかどうか判定する	文字列 != 文字列2
データフレームのある列の中央値を計算する	df['列A'].median()
バイナリ書き込み用にファイルパスを開いて]fとする	f = open(filepath, mode='wb')
option: スプリンググリーンにグラフの色を変更する	color = 'springgreen'
文字列中にひとつでも非大文字があるか調べる	any(not c.isupper() for c in 文字列)
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgray')
点線に線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
縦棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
ディープスカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
option: 最初の行をヘッダに設定する	header = 0
折れ線グラフを青い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームの代表値	df.describe()
マッピングにキーワード引数で追加する	辞書.update(**kwargs)
正規分布に基づく確率密度関数を使用する	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
指定したカラムを小数点以下n桁で四捨五入する	n = 2<nl>df['列A'].round(n)
option: グラフの色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
ターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategray'
セットを変更不能なセットにする	frozenset(セット)
回帰分析をバギングとして行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
option: 複素数型を用いる	bool = np.int<nl>dtype = bool
主成分分析として数値次元に次元削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
指定した列の値はNaNか	df['列A'].isna()
折れ線グラフをホワイトスモーク色として描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
ヒストグラムをオレンジレッド色として描画する	plt.hist(データ列, color='orangered')
イテラブルを横棒グラフにする	plt.barh(ラベル列, データ列)
二つの列からグループ化し、個数を計算する	df.groupby(['列A', '列B'], as_index=False).count()
文字列中の部分文字列を別の文字列に置き換える	文字列.replace(部分文字列, 置換後の文字列)
縦棒グラフを描画してバーの幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
行列にはいくつ要素が含まれるか調べる	aArray.size
プロット描画でカーネル密度推定を使用する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
NULLに等しい識別子	None
リストとイテラブルについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
今日の日数	datetime.datetime.today().day
英数字が文字列中に存在するか	any(c.isalnum() for c in 文字列)
データフレームのある列を行に設定する	df.set_index('列A')
折れ線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
ヒストグラムを淡いピンク色色として描画する	plt.hist(データ列, color='lightpink')
縦棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
散布図の▼印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
ミディアムスプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
y軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
折れ線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
option: 三角印を使う	marker = '^'
散布図にrgbの△マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: データ型として論理値型を使用する	np.int32 = np.int<nl>dtype = np.int32
グラフを濃くする	sns.set(pallete='deep')
散布図に青い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
小数点数のタンジェントの逆数	math.atan(x)
折れ線グラフの色をダークオーキッドにセットする	plt.plot(データ列x, データ列y, color='darkorchid')
マップのキーの一覧	list(辞書.keys())
日付時刻データと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
イテラブルとリストの散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
option: フォントの色をディープスカイブルーに設定する	color = 'deepskyblue'
データフレームのあるカラムのタイムゾーンをセットする	df['列A'].tz_convert('Asia/Tokyo')
ミディアムバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
折れ線グラフに赤い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
ヒストグラムの色をライトサーモンに変更する	plt.hist(データ列, color='lightsalmon')
ベクトルの最小	np.min(aArray)
ファイル名がJSONファイルか判定する	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
データフレームのあるカラムの欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
折れ線グラフに右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
縦棒グラフをミディアムシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
リストとリストについて散布図を描画して右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列中から正規表現に大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
option: バイナリ用に設定する	mode = 'rb'
スチールブルーにヒストグラムの色を変更する	plt.hist(データ列, color='steelblue')
折れ線グラフの色をクリムゾンに変更する	plt.plot(データ列x, データ列y, color='crimson')
列名を指定して2つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
データフレームの行を範囲指定して取り出す	df[start:end]
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
ライトゴールドロディイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
タイムスタンプデータの分数を使う	aDatetime.minute
データ列の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
データフレームとしてTSVを読み込む	pd.read_csv('file.tsv', sep='\t')
線グラフの色をオールドレースに指定する	plt.plot(データ列x, データ列y, color='oldlace')
ヒストグラムベースの勾配ブースティング回帰木を準備する	model = sklearn.ensemble.HistGradientBoostingRegressor()
空のセットを見る	set()
実数が負の数かどうか調べる	x < 0
ヒストグラムの色を紺に変更する	plt.hist(データ列, color='darkblue')
要素はタプルの要素でない	要素 not in タプル
複数のデータフレームを横方向につなぐ	pd.concat([df, df2, df3], axis=1)
茶色色でヒストグラムを描画する	plt.hist(データ列, color='brown')
リストと配列についての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
２つの列でグループ化し最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
option: スレートブルーに色を設定する	color = 'slateblue'
色付きの一点鎖線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
プロットを正方形にする	plt.axis('equals')
折れ線グラフをオレンジレッド色を使って描画する	plt.plot(データ列x, データ列y, color='orangered')
データフレームの未入力値が含まれる箇所に色を付ける	df.style.highlight_null()
列を2回あわせた直積	itertools.product(iterable, repeat=2)
ドジャーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
黒いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
year年month月day日hour時minute分second秒をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day,<nl><tab><tab><tab><tab>  hour=hour, minute=minute, second=second)
散布図を青色を用いて描画する	plt.scatter(データ列x, データ列y, color='blue')
両端キューを数列から作る	collections.deque(数列)
青いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図をブルーバイオレット色を使って描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
整数が整数2未満もしくはn3以上か調べる	整数 < 整数2 or 整数 >= n3
シャルトリューズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
option: フォントの色をダークバイオレットに設定する	color = 'darkviolet'
文字が別の文字列にあるか	文字 in 文字列
ヒストグラムの色をゴールデンロッドに指定する	plt.hist(データ列, color='goldenrod')
こんにちは世界とプリントする	print('Hello World')
ライトグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
データ列の折れ線グラフをポイント印で描画する	plt.plot(データ列x, データ列y, marker='.')
option: スラグレー色を使用する	color = 'slategray'
タプルの個数を見る	len(タプル)
データ列をリストを境界値として分割する	pd.cut(ds, aList)
サンディーブラウン色を用いてヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
両端キューの中に要素が存在するか調べる	要素 in 両端キュー
option: リネンを使う	color = 'linen'
リストの推移を色付きの点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ファイルを開いて]、追加ストリームを見る	'a' = 'a'<nl>open(filepath, mode='a')
ライトコーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
リストの推移を一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
シーケンスとシーケンスをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
カラーバーを水平で設定する	plt.colorbar(orientation='horizontal')
プラットフォームの符号付き整数の最大値を知る	sys.maxsize
整数はセットに含まれるか確認する	数 in セット
散布図のダイアモンド印を青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
二つの集合のいずれか一方だけの集合	セット.symmetric_difference(セット2)
option: マーカーの色を濃いシアンにする	markerfacecolor = 'darkcyan'
データフレームのある列をリストとして取り出す	df['列A'].values.tolist()
棒グラフをミディアムターコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
データフレームのある列をワンホット・ベクトルにする	pd.get_dummies(df['列A'])
横棒グラフをベージュ色を使って描画する	plt.barh(データ列x, データ列y, color='beige')
ヒストグラムの色をゲインズボロに変更する	plt.hist(データ列, color='gainsboro')
時計回りに円グラフを描く	plt.pie(データ列, startangle=90, counterclock=False)
スノー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
文字列をセパレータで分割する	文字列.partition(セパレータ)
ネイビーにヒストグラムの色を設定する	plt.hist(データ列, color='navy')
新しいロジスティック回帰モデルを作成する	model = sklearn.linear_model.LogisticRegression()
整数がセットのメンバーに含まれる	数 in セット
回帰モデルの残差を求める	目的変数 - model.predict(説明変数)
nからいつまでもカウントダウンする	itertools.count(start=n, step=-1)
指定した列のカテゴリで集計し最小値を求める	df.groupby('列A').min()
文字列を中央寄せにする	文字列.center(文字列幅)
箱ひげ図を二つ並べてプロットする	plt.boxplot([データ列, データ列])
リストを並べる	sorted(リスト)
整数がnで割り切れる	整数 % n == 0
ヒストグラムをマゼンタ色を使って描画する	plt.hist(データ列, color='magenta')
全要素が1の行列を初期化する	np.ones(行数, 列数, dtype=np.int)
開始位置から終了位置までに部分文字列がいくつか存在するか調べる	文字列.count(部分文字列, 開始位置, 終了位置)
ヘッダー行を右寄せに変更する	pd.set_option('colheader_justify', 'right')
書き込みモードとしてファイルをオープンして]、fとする	f = open(filepath, mode='w')
その中央値でデータシリーズの未入力値を補完する	ds.fillna(ds.median())
分類結果のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
配列の最小値を計算する	np.min(aArray)
変数が0に近づくとき極限値を求める	sympy.limit(数式, 変数, 0)
option: 色の透明度を変更する	alpha = 0.5
データフレームの選択したカラムの記述統計量	df[['列A', '列B']].describe()
ベージュ色でヒストグラムを描画する	plt.hist(データ列, color='beige')
外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
を切り捨てながら半分にする	変数 //= 2
あるカラムの文字列に部分文字列がないデータを取り出す	df[~df['列A'].str.contains(部分文字列)]
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
文字列がn回繰り返すイテラブルを求める	itertools.repeat(element, n)
縦棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
配列を等しい量になるようにビン数nとしてビン分割する	pd.qcut(aArray, n)
赤い一点鎖線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
オブジェクトは論理値か調べる	bool = int<nl>isinstance(obj, bool)
プロットで使うフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
散布図に下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
箱ひげ図を描き、平均線を加える	plt.boxplot(データ列, meanline=True)
option: 色をミッドナイトブルーに変更する	color = 'midnightblue'
データフレームを関数の値によってグループ化し要約統計量を計算する	df.groupby(関数).describe()
データフレームのある列の中の欠損値の合計を数える	df['列A'].isna().sum()
行列を横ベクトルに変形する	aArray.reshape(1, -1)
ライムグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
実数のn乗の実数剰余を算出する	pow(x, n, y)
ヒストグラムの色をホワイトスモークにセットする	plt.hist(データ列, color='whitesmoke')
キーが辞書にある	キー in 辞書
1行から二つの浮動小数数値を読む	A, B = map(float, input().split())
文字列を空白で区切り、整数リストにする	list(map(int, 文字列.split()))
rgbの星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームの列のNaNを最小値で埋める	df['列A'].fillna(df['列A'].min())
データフレームのあるカラムがどの程度分散しているか調べる	df['列A'].var()
カテゴリでグループ化して、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
リストを分割数nで分割する	pd.cut(aList, n)
option: 色をグリーンイエローに設定する	color = 'greenyellow'
浮動小数点数とyの斜辺を計算する	math.hypot(x, y)
データフレームをグループ化し、それぞれの合計を算出する	df.groupby('列A').sum()
データシリーズの中に文字列とがいくつあるかカウントする	ds.isin([value, value2]).sum()
option: グラフの色をグレーに変更する	color = 'gray'
折れ線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
データ列のエポック秒をPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
rgbのダイアモンドマーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
小さい順にタプルの要素を並べる	sorted(タプル, reverse=True)
太字でxを出力する	print(f'\033[1m{x}\033[0m')
マップの値に要素が含まれていない	element not in 辞書.values()
ライトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
折れ線グラフのダイアモンド印を黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列の最初から余分な空白を取り除く	文字列.lstrip()
双方向キューをリストから用意する	collections.deque(リスト)
データフレームの中の列をn個に分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフを色付きの実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データシリーズの欠損値を最大値に変更する	ds.fillna(ds.max())
コマンドラインで与えられたファイル名をひとつずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
アンサンブル学習を用いてクラス分類を行う	sklearn.ensemble.VotingClassifier()
折れ線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
折れ線グラフの三角マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
整数がnで割り切れるか確認する	整数 % n == 0
線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
縦棒グラフを紺碧色を使って描画する	plt.bar(データ列x, データ列y, color='azure')
表の先頭10行	df.head(10)
ヒストグラムの色をグリーンに変更する	plt.hist(データ列, color='green')
日付時刻データが水曜日か	aDatetime.weekday() == 2
ヒストグラムを耐火レンガ色として描画する	plt.hist(データ列, color='firebrick')
データフレームの最後n行を抽出する	df.tail(n)
８進数字を全て見る	string.octdigits
プロットに鉛直方向の実線を設定する	plt.axvline(x=0, linestyle='solid')
半透明の点線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
やわらかい青色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データフレームのあるカラムの文字列を未入力値に変換する	df['列A'].replace(値, np.nan)
両端キューの先頭にイテラブルの要素を追加する	両端キュー.extendleft(イテラブル)
あるカラムの欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
option: 読み込みモードにセットする	mode = 'r'
ブースティングとして回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
線グラフの色をシアンにする	plt.plot(データ列x, データ列y, color='cyan')
xをブール値に変換する	bool(x)
割り算の切り上げを書きたい	(X + Y - 1) // Y
辞書にキーが存在するか確認する	キー in 辞書
空の双方向キュー	両端キュー = collections.deque()
色付きの実線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: 箱ひげ図を横方向にする	vert = False
横棒グラフをパールゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
データフレームの一部のカラムを100の位で四捨五入する	df[['列A', '列B']].round(-2)
散布図をデピンク色を使って描画する	plt.scatter(データ列x, データ列y, color='deeppink')
文字列の先頭から文字を消す	文字列.lstrip(文字)
option: フォントの色をブルーバイオレットにセットする	color = 'blueviolet'
日付データは日付データよりあとか	aDate > aDate2
文字列はセットのいずれでもないどうか	文字列 not in セット
黒いポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='k')
データシリーズは何秒か見る	ds.dt.second
線を赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
K最近傍法で回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
データフレームを二つの列ごとにグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
二つの列の値でデータフレームをグループ化し記述統計量を算出する	df.groupby(['列A', '列B']).describe()
数列を連結して一つの文字列にする	''.join(map(str, 数列))
yが0に近づく時の極限値を計算する	sympy.limit(数式, y, 0)
相関係数を使う	scipy.stats.pearsonr(数列, 数列2)
折れ線グラフをミディアムブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumblue')
散布図を左三角印を使い、描画する	plt.scatter(データ列x, データ列y, marker='<')
option: グラフの種類を点線に指定する	linestyle = 'dotted'
浮動小数点数に実数を掛ける	x * y
折れ線グラフの色をブルーバイオレットにセットする	plt.plot(データ列x, データ列y, color='blueviolet')
ホットピンク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
コーンズシルク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
要素はセットのいずれか確認する	要素 in セット
配列をシャッフルしてリストにする	random.sample(配列, len(配列))
キュー中の整数のインデックス	両端キュー.index(整数)
数列とリストについて散布図を描画し、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ヒストグラムをダークシアグリーン色として描画する	plt.hist(データ列, color='darkseagreen')
ダークレッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkred')
ライトブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightblue')
表データのn行目を抽出する	df.loc[n]
浮動小数点数の正弦	math.sin(x)
折れ線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
散布図のマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
グラフの簡単な説明の場所を指定する	plt.legend(loc=(x, y))
非数値データを連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
濃いシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
セットから要素を除去する	セット.remove(要素)
option: マゼンタに色をセットする	color = 'magenta'
データシリーズは何時か知る	ds.dt.hour
データ列とリストについての散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
表データのあるカラムを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
グラフで用いる縦軸のラベルをuntitledに変更する	plt.ylabel('y軸ラベル')
デピンク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
クロス印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
リストをn回加える	リスト * n
バギングを用いてクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
option: ライム色を使用する	color = 'lime'
ミディアムパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
データシリーズを100の位で四捨五入して整数型にする	ds.round(-2).astype(int)
xの小数点以下'1'桁の文字列に変換する	':.1f'.format(x)
データをJSONフォーマットでファイル出力に保存する	json.dump(データ, ファイル出力, ensure_ascii=False)
折れ線グラフの△印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
数値をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
データフレームのカラムの中のNaNの合計をカウントする	df['列A'].isna().sum()
棒グラフを黄緑色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームを指定された列によって昇順に整列して更新する	df.sort_values(by='列A', ascending=True, inplace=True)
option: スプリンググリーン色を用いる	color = 'springgreen'
option: ライトスレイグレー色を用いる	color = 'lightslategray'
JSON形式でデータを出力ストリームに保存する	json.dump(データ, ファイル出力, ensure_ascii=False)
教師データとして線形回帰モデルを学習する	model.fit(説明変数, 目的変数)
ロイヤルブルー色でヒストグラムを描画する	plt.hist(データ列, color='royalblue')
データをJSON形式としてファイルに出力する	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
青緑色として散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
ふたつの集合の積集合を求める	セット.intersection(セット2)
option: スチールブルー色を使用する	color = 'steelblue'
折れ線グラフの色をミッドナイトブルーに指定する	plt.plot(データ列x, データ列y, color='midnightblue')
データシリーズにおいてどの値が頻出か調べる	ds.mode()
イテラブルと配列についての散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
タイタニックのデータセットをデータフレームとしてロードする	df = sns.load_dataset('titanic')
option: フォントの色を貝殻に変更する	color = 'seashell'
カウンタの各項目を、そのカウントだけ列挙する	aCounter.elements()
ベクトル演算をする	import numpy as np
option: バイナリモードに指定する	mode = 'rb'
整数が3で割り切れるか	整数 % 3 == 0
散布図の印を右三角印にする	plt.scatter(データ列x, データ列y, marker='>')
整数を8進表記に変換する	oct(整数)
横棒グラフをピンク色として描画する	plt.barh(データ列x, データ列y, color='pink')
ダークオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
整数のモジュロを	整数 % 整数2
データフレームの一部のカラムの尖度	df[['列A', '列B']].skew()
折れ線グラフに菱形印を使う	plt.plot(データ列x, データ列y, marker='D')
ひとつでも非数字が文字列中に含まれる	any(not c.isdigit() for c in 文字列)
ダークマゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
辞書を空にする	辞書.clear()
散布図に黒い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
線グラフの色をインディアンレッドにセットする	plt.plot(データ列x, データ列y, color='indianred')
グレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
文字列の最初から改行を消す	文字列.lstrip('\n')
▲印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
複数の列でグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
ヒストグラムの色をマゼンタに変更する	plt.hist(データ列, color='magenta')
データフレームからある３つのカラムを選ぶ	df[['列A', '列B', '列C']]
柱状グラフを描画し、ビン数を指定する	plt.hist(データ列, bins=区関数)
整数のn乗	x ** n
「または」と書きたい	条件式 or 条件式2
散布図の四角マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
文字列はセットに含まれるかどうか調べる	文字列 in セット
折れ線グラフをロイヤルブルー色として描画する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームを関数でまとめた表を使う	df.groupby(関数)
ハニーデュー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
折れ線グラフをバイオレット色として描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームから指定した2つの列のみ抽出する	df[['列A', '列B']]
散布図の上三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
タブ区切りのファイルからデータフレームを読む	pd.read_csv('file.tsv', sep='\t')
辞書の内部も複製する	{k: copy.copy(v) for k, v in 辞書.items()}
option: データ型として複素数型を使う	bool = np.int<nl>dtype = bool
option: 印を下三角に指定する	marker = 'v'
リストの末尾からn番目以前の要素を取り出す	リスト[:-n]
両端キューの中に文字列は存在するかどうか調べる	文字列 in 両端キュー
文字列中に小文字が含まれるか調べる	any(c.islower() for c in 文字列)
データフレームの選択したカラムの最頻値を算出する	df[['列A', '列B']].mode()
オブジェクトがメソッド	inspect.ismethod(オブジェクト)
データシリーズの未入力値を数値で埋める	ds.fillna(x)
シンボル計算を使う	import sympy
リストの末尾に要素を加える	リスト.append(要素)
データシリーズの欠損値を後の行の値に指定する	ds.fillna(method='bfill')
変数計算を使う	import sympy
データフレームをCSVファイルにBOM付きで書き出す	df.to_csv('file.csv', encoding='utf_8_sig')
データシリーズの標本分散を求める	ds.var(ddof=0)
折れ線グラフのダイアモンド印を黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
オブジェクトがジェネレータ関数	inspect.isgeneratorfunction(オブジェクト)
イテラブルをランダムにシャッフルしてリスト化する	random.sample(イテラブル, len(イテラブル))
縦棒グラフをシスル色として描画する	plt.bar(データ列x, データ列y, color='thistle')
ヒストグラムを描画して、半透明化にする	plt.hist(データ列x, alpha=0.5)
mathモジュールをインポートする	import math
ダークブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x')
リストから複数の要素をランダムに選ぶ	random.sample(リスト, k=n)
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategray')
実数のn乗の浮動小数点数剰余を計算する	pow(x, n, y)
変数の方程式として数式を解く	sympy.solve(数式, 変数)
カラムの中央値を求める	df['列A'].median()
yが0に近づく場合の数式の極限値を算出する	sympy.limit(数式, y, 0)
棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
浮動小数点数を切り下げる	math.floor(x)
オールドレース色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
データフレームのn行目より前抽出する	df[:n]
リストの要素を昇順に並べる	sorted(リスト, reverse=True)
option: マーカーの色を真紅にする	markerfacecolor = 'crimson'
Pandasの日付型のデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
小麦色色でヒストグラムを描画する	plt.hist(データ列, color='wheat')
データシリーズの中にあるの合計をカウントする	ds.isin([value]).sum()
要素がタプルの要素でない	要素 not in タプル
アルファベットの大文字を全部見る	string.ascii_uppercase
リストをJSON形式としてファイルにダンプする	with open('file.json', 'w') as f:<nl><tab>json.dump(リスト, f, ensure_ascii=False)
黒いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
作画で使うカラーパレットを指定する	sns.set(pallete=パレット名)
折れ線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
シードを初期化する	random.seed()
縦棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
データフレームの中の列をn個に等間隔でビンニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
クラス分類をスタッキングで行う	sklearn.ensemble.StackingClassifier()
列一覧	df.info()
データフレームからランダムに一行を取り出す	df.sample()
改行なしにxの出力を行う	print(x, end='')
折れ線グラフをドジャーブルー色として描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
option: 箱髭図に平均を加える	showmeans = False
文字列中にひとつでもASCII文字が含まれるかどうか調べる	any(c.isascii() for c in 文字列)
データフレームを二つのカラムで小さい順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
データ列を箱ひげ図でプロットする	plt.boxplot(データ列)
文字列がタイトルケースか確認する	文字列.istitle()
プラム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
改行なしにxを出力する	print(x, end='')
ヒストグラムの色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
option: ダークグレーにグラフの色を設定する	color = 'darkgrey'
ガベージコレクションの参照カウント	sys.getrefcount(オブジェクト)
3つの変数を順にプリントする	print(変数名, 変数名, 変数名)
折れ線グラフの色をパウダーブルーに指定する	plt.plot(データ列x, データ列y, color='powderblue')
キューの中に要素が含まれてるかどうか調べる	要素 in 両端キュー
配列から重複なく、ランダムにn個選んでリストにする	random.sample(配列, k=n)
データフレームのインデックスがnの行を取り出す	df.loc[n]
散布図に左三角印を使う	plt.scatter(データ列x, データ列y, marker='<')
棒グラフをピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='pink')
データフレームの選択したカラムの中にとがいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
データフレームの選択したカラムの最頻値を計算する	df[['列A', '列B']].mode()
二つの行列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
option: ホットピンクにグラフの色を設定する	color = 'hotpink'
データフレームの一部のカラムの中に日付データと文字列がいくつ含まれるか数える	df[['列A', '列B']].isin([value, value2]).sum()
横棒プロットの幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
日付時刻データにn分分、加える	aDatetime + datetime.timedelta(minutes=n)
ヒストグラムの色をミディアムオーキッドに変更する	plt.hist(データ列, color='mediumorchid')
1からnまでの整数リストを使う	list(range(1, n+1))
コマンド引数で与えられたファイル名を一つずつ処理する	for file in sys.argv[1:]:<nl><tab>print(file)  # 具体的な処理にする
文字列がセットの要素か調べる	文字列 in セット
クラス分類をニューラルネットで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
option: 青を使う	color = 'blue'
データフレームの選択したカラムがどの程度、分散しているか確認する	df[['列A', '列B']].var()
多次元データをt分布型確率的近傍埋め込み法を用いて要素次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
アクアマリン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
散布図を菱形印で描画する	plt.scatter(データ列x, データ列y, marker='D')
データフレームの欠損値を中央値で補う	df.fillna(df.median())
option: コロンをセパレータで用いる	sep = ':'
横棒グラフをライトゴールドロディイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
自分自身をモジュールとしてを使う	sys.modules[__name__]
option: フォントの色をミッドナイトブルーに設定する	color = 'midnightblue'
カウンタをシーケンスで更新する	aCounter.update(iterable)
文字列をセパレータで区切って、列挙する	文字列.split(セパレータ)
数式の変数の解を方程式として計算する	sympy.solve(数式, y)
データフレームから重複を残さず重複を除く	df.drop_duplicates(keep=False)
現在をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
リストをn個にビンニングし、namesのラベルをつける	pd.cut(aList, n, labels=names)
JSONを用いる	import json
バイナリできるようにファイルをオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
n進文字列をバイト列に変換する	int(文字列, n).to_bytes(length=バイト数, byteorder='big')
全８進数字	string.octdigits
日付時刻データの時刻を使う	aDatetime.time()
縦棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
二つの列からグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
データフレームの未入力値を直後の値に設定する	df.fillna(method='bfill')
整数プラス整数を求める	整数 + 整数2
ファイルパスをバイナリモードでオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
折れ線グラフをサーモン色として描画する	plt.plot(データ列x, データ列y, color='salmon')
フクシア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
option: ピンクを使用する	color = 'pink'
折れ線グラフの▽マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
カウンタの要素を増やす	aCounter[element] += 1
横棒グラフを描画してバーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データシリーズの欠損値を直後の値に減らす	ds.fillna(method='bfill')
データフレームから指定した二つの列を取り出す	df[['列A', '列B']]
事前に大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
整数が整数2よりも大きいかどうか判定する	整数 > 整数2
実数を浮動小数点数で除した余り	x % y
カーキ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
オレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
連立方程式の解を計算する	sympy.solve([数式, 数式2])
折れ線グラフに青い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
アイボリー色でヒストグラムを描画する	plt.hist(データ列, color='ivory')
本日が木曜日	datetime.datetime.today().weekday() == 3
option: ディムグレーを用いる	color = 'dimgrey'
縦棒グラフをレベッカパープル色として描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
文字列の大文字小文字を入れ替える	文字列.swapcase()
線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
文字列をISO8601を使ってタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
散布図を丸マーカーで描画する	plt.scatter(データ列x, データ列y, marker='o')
横棒グラフをゴーストホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
データフレームから指定したデータ型のカラム名の一覧を使う	df.select_dtypes(型).columns
option: ベージュにフォントの色を指定する	color = 'beige'
線グラフをブラウン色で描画する	plt.plot(データ列x, データ列y, color='brown')
ポイント印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフの色をダークスラテグレーにセットする	plt.plot(データ列x, データ列y, color='darkslategray')
ミディアムスプリンググリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
option: ナバホホワイトにグラフの色を変更する	color = 'navajowhite'
棒グラフをミディアムターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
昨日の日付を求める	datetime.date.today() - datetime.timedelta(days=1)
文字コードを文字へ変換する	chr(文字コード)
コマンドフラグの状態を知る	sys.flags
昇順にある列をキーにしてデータフレームを並べる	df.sort_values(by='列A', ascending=True)
線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
タプルの中の一番小さい値	min(タプル)
データシリーズの値は欠損値	ds.isna()
グラフで使える色の一覧	matplotlib.colors.cnames
データフレームを表示するとき最大行数をnに変更する	pd.set_option('display.max_rows', n)
文字列中にひとつでも英数字があるか調べる	any(c.isalnum() for c in 文字列)
平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
文字列の最後から部分文字列を除去する	文字列.rstrip(部分文字列)
データフレームの指定した列の分散	df['列A'].var()
リストとデータ列の散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
ベクトルを2次元1列に変形する	aArray.reshape(-1, 1)
本日が火曜日	datetime.datetime.today().weekday() == 1
散布図を黒い丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
コードポイントの最大値	sys.maxunicode
データフレームから散布図を作り線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
折れ線グラフの左三角印を赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
10行をランダムに重複ありでデータフレームからサンプリングする	df.sample(10, replace=True)
option: 色をカーキに指定する	color = 'khaki'
カデットブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データシリーズの25パーセンタイル	ds.quantile(0.25)
option: バツ印を使う	marker = 'x'
データフレームの中にいくつNaNがあるか数える	df.isna().sum()
縦棒グラフをスノー色を用いて描画する	plt.bar(データ列x, データ列y, color='snow')
線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームの列の名前のリストを求める	df.columns
データシリーズが正規分布からどの程度歪んでいるか見る	ds.kurt()
ライトサーモン色でヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
ピンク色を使ってヒストグラムを描画する	plt.hist(データ列, color='pink')
ファイルをオープンして]読み込みストリームを求める	'r' = 'a'<nl>open(filepath, mode='r')
ライム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
濃いシアンにヒストグラムの色を変更する	plt.hist(データ列, color='darkcyan')
ライトグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='lightgreen')
タイムスタンプデータがタイムスタンプデータと同時か調べる	aDatetime == aDatetime2
空のヒストグラムベースの勾配ブースティング回帰木を作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
データフレームの標準偏差など	df.describe()
散布図に下三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='v')
TSVファイルでデータフレームを保存する	df.to_csv('file.tsv', sep='\t')
折れ線グラフの印を三角にする	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムをダークカーキ色を使って描画する	plt.hist(データ列, color='darkkhaki')
ホワイトスモーク色として線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
数式の変数の解を方程式として算出する	sympy.solve(数式, 変数)
外れ値に強い線形分類器を用意する	model = sklearn.linear_model.HuberClassifier()
カウンタ同士で共通部分	aCounter & aCounter2
ファイルを絶対パスにする	os.path.abspath(filepath)
棒グラフをシャルトリューズ色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームを指定された列で昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
データ列のエポック秒を日付データにする	pd.to_datetime(ds, unit='s', utc=True)
データフレームの指定した３つの列のみ抽出する	df[['列A', '列B', '列C']]
文字列を両端キューから取り除く	両端キュー.remove(文字列)
ホールドアウト法を用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
イテラブルから重複なく、ランダムにn個選んでリスト化する	random.sample(イテラブル, k=n)
ダークオレンジ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
折れ線グラフを暗い赤色として描画する	plt.plot(データ列x, データ列y, color='darkred')
列の名前の一覧を求める	df.columns
ダークカーキ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgray')
配列とイテラブルについて散布図を描画してマーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
文字列を部分文字列によって分割して、列挙する	文字列.split(部分文字列)
オレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
インディゴ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
オブジェクトの無限イテラブルを求める	itertools.repeat(element)
リストとリストの散布図をプロットして、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
二つのカラムを用いてデータフレームをソートして、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
日付データが木曜日か	aDate.weekday() == 3
黒いダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
項がセットに含まれないか確認する	要素 not in セット
散布図をパレットトルコイズ色として描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
濃い青色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
日付時刻データは何年か知る	aDatetime.year
小数点数の絶対値	math.fabs(x)
3変数の最大の値を求める	max(x, y, z)
ある列の値がx以上y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
チョコレート色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
赤い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='r')
実数を３乗する	x ** 3
グラフで使う縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
y座標を対数に変更する	plt.yscale('log')
スラッシュで区切ってxとyをプリントする	print(x, y, sep='/')
ベクトルの和	aArray + aArray2
データフレームは正規分布からどの程度、尖っているか見る	df.skew()
データフレームを並べて上位を取り出す	df.sort_values('キーとなる列').head(n)
プロットの色を濃くする	sns.set(pallete='deep')
正規表現patternでデータフレームの値をreplにまとめて置き換える	df.replace(pattern, repl, regex=True)
データ列を分割数nとしてビニングする	pd.cut(ds, n)
表からある２つの列を抽出する	df[['列A', '列B']]
ダークグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
表データのあるカラムの時を使う	df['列A'].dt.hour
小数点数の逆正弦	math.asin(x)
データフレームの指定した列の空文字を未入力値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
option: ゴールデンロッド色を用いる	color = 'goldenrod'
整数同士の排他的論理和を計算する	整数 ^ 整数2
マップの値をひとつずつ処理する	for value in 辞書.values():<nl><tab>print(value)  # FIXME
折れ線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='gray')
データシリーズは何曜日か見る	ds.dt.weekday_name
カデットブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
整数が一桁の数かどうか調べる	-9 <= 整数 <= 9
割った余りを欲しい	X % Y
データ列の各データは何回出現するか見る	ds.value_counts()
データフレームの一部のカラムが正規分布からどれだけ、歪んでいるか確認する	df[['列A', '列B']].kurt()
日付時刻データの時刻を見る	aDatetime.time()
青い点線を用いてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データをソートしてJSONフォーマットにエンコードする	json.dumps(データ, ensure_ascii=False, sort_keys=True)
折れ線グラフをベージュ色として描画する	plt.plot(データ列x, データ列y, color='beige')
ケンドール順位相関係数でデータフレームの相関行列を求める	df.corr(method='kendall')
リストの変遷を折れ線プロットで描画する	plt.plot(range(len(データ列)), データ列)
データフレームの指定した二つの列を抽出する	df[['列A', '列B']]
日付データをn週間前にする	aDate - datetime.timedelta(weeks=n)
文字列内に日本語が使われているかどうかテストする	re.search('[あ-んア-ン\u4E00-\u9FD0]', 文字列)
表をワンホット・ベクトルに変換する	pd.get_dummies(df)
サドルブラウン色としてヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
文字列を大文字・小文字を無視してパターンで分割する	re.split(pattern, s, flags=re.IGNORECASE)
セットから別のセットとの共通要素を除去する	セット.symmetric_difference_update(セット2)
日付時刻データを浮動小数点数にする	aDatetime.timestamp()
option: マーカーの色をバイオレットにする	markerfacecolor = 'violet'
線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
プロットに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
縦棒グラフを黄色色として描画する	plt.bar(データ列x, データ列y, color='yellow')
空白で文字列を最後から区切る	文字列.rsplit()
散布図をライトゴールドロディイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
文字列を文字コードのリストにする	[ord(ch) for ch in 文字列]
列を等量でn個にビンニングする	pd.qcut(ds, n)
相関係数でデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
option: ライトスレイグレーを使う	color = 'lightslategray'
配列の平均値を求める	np.mean(aArray)
文字列の右端から部分文字列を取り除く	文字列.rstrip(部分文字列)
テンプレートを引数としてarg文字列をフォーマットする	書式.format(*args)
配列のトリム平均を算出する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
ネイビー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
実数の逆正接を計算する	math.atan(x)
浮動小数点数を十六進文字列に変換する	x.hex()
xを実数に変換する	float(x)
浮動小数点数の天井	math.ceil(x)
縦棒グラフを黄緑色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
縦棒グラフをグレー色を使って描画する	plt.bar(データ列x, データ列y, color='grey')
文字列全体がパターンにマッチするか調べる	re.fullmatch(pattern, s)
折れ線グラフの菱形マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
配列と数列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
整数が一桁の数か	-9 <= 整数 <= 9
入力ストリームから1文字、読み込む	f.read(1)
フクシア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
データをJSONフォーマットにエンコードする	json.dumps(データ, ensure_ascii=False)
カラムの調和平均	scipy.stats.hmean(df['列A'])
option: 色の透明度を指定する	alpha = 0.5
ロージーブラウン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データフレームを散布図で図示してカテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ヒストグラムをダークグレー色を使って描画する	plt.hist(データ列, color='darkgray')
追加モードでファイルをオープンして]、fとする	f = open(filepath, mode='a')
日付時刻データが木曜日かどうか調べる	aDatetime.weekday() == 3
文字列で区切ってxとyを出力する	print(x, y, sep=s)
データ列の偏りを対数する	np.log(データ列)
ファイルからJSON形式のデータを読み込む	with open('file.json') as f:<nl><tab>data = json.load(f)
コマンドラインを列挙する	sys.argv
ふたつの関係が部分集合	セット.issubset(セット2)
option: ゴールドにグラフの色を変更する	color = 'gold'
文字列が全て英数字か確認する	文字列.isalnum()
文字列中に数字が存在しない	any(not c.isdigit() for c in 文字列)
ファイルをバイナリ用に開いて]、fとする	f = open(filepath, mode='rb')
配列とリストについて散布図を描いて、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
カウンタの正の出現回数のみ残す	+aCounter
散布図をミディアムバイオレットレッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
散布図にrgbの上三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムの色を濃いシアンに指定する	plt.hist(データ列, color='darkcyan')
折れ線グラフの色をスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='springgreen')
イテラブルと数列の散布図に赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
２つの列でデータフレームをグループ分けし、、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
整数の無限イテラブルを見る	itertools.repeat(整数)
線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
ヒストグラムをロージーブラウン色を用いて描画する	plt.hist(データ列, color='rosybrown')
指定したカラムのカテゴリで集計し、それぞれの最小値を計算する	df.groupby('列A').min()
ミディアムターコイズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
K-S検定を行う	scipy.stats.kstest(df['列A'], 'norm')
横棒グラフをライトグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='lightgreen')
線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
option: スレートブルーを使用する	color = 'slateblue'
リストとイテラブルについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: リネンにフォントの色を設定する	color = 'linen'
折れ線グラフの色をサドルブラウンに指定する	plt.plot(データ列x, データ列y, color='saddlebrown')
折れ線グラフをミディアムスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
大きさnで数列とリストについての散布図を描く	plt.scatter(データ列x, データ列y, s=n)
ミディアムシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
散布図の星マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
メディアンでデータフレームのカラムの欠損値を補う	df['列A'].fillna(df['列A'].median())
文字列の両端から部分文字列を除く	文字列.strip(部分文字列)
インディゴにヒストグラムの色を変更する	plt.hist(データ列, color='indigo')
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ヒストグラムをサーモン色として描画する	plt.hist(データ列, color='salmon')
実数のサインの逆数を求める	math.asin(x)
本日の月数を見る	datetime.datetime.today().month
縦方向に三つのデータフレームをつなぐ	pd.concat([df, df2, df3], axis=0)
条件に満たすときのみ、処理したい	if 条件式:<nl><tab>print('条件が真のとき')  # 直して
今日の日を使う	datetime.datetime.today().day
イテラブルからランダムにひとつ選んでリストにする	random.choice(イテラブル)
タプルをn回連結する	タプル * n
箱髭図を使ってデータフレームの二つの列を並べて描画する	plt.boxplot([df['カラム'], df['カラム']])
数列を集合に変換する	set(数列)
散布図をパールバイオレットレッド色として描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
折れ線グラフの菱形印を黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
TSVを読む	pd.read_csv('file.tsv', sep='\t')
文字列がアルファベット	文字列.isalpha()
両端キューの要素を右に回転させる	両端キュー.rotate(1)
今日の曜日を整数で使う	datetime.datetime.today().weekday()
現在は何分か知る	datetime.date.today().minute
折れ線グラフをライトブルー色として描画する	plt.plot(データ列x, データ列y, color='lightblue')
多次元データを主成分分析で数値次元に次元削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
データフレームの一部のカラムを小数点以下n桁で四捨五入する	n = 2<nl>df[['列A', '列B']].round(n)
日付データが日付データより早いか	aDate2 = aDatetime<nl>aDate < aDate2
ヒストグラムの色をスノーにする	plt.hist(データ列, color='snow')
データフレームの列を折れ線プロットで可視化する	plt.plot(df[column], df[column])
データフレームをグループ化し、合計を計算する	df.groupby('列A').sum()
散布図をミディアムスプリンググリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
割り算したい	X / Y
フローラルホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ヒストグラムの色をスレートブルーに指定する	plt.hist(データ列, color='slateblue')
イテラブルを2回あわせたデカルト積	itertools.product(iterable, repeat=2)
二つの列からグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
変数が無限大に近づく時、数式の極限値を求める	sympy.limit(数式, 変数, oo)
折れ線グラフを赤い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームをグループ化し合計を算出する	df.groupby('列A').sum()
散布図をインディゴ色として描画する	plt.scatter(データ列x, データ列y, color='indigo')
整数を8進文字列に変換する	oct(整数)[2:]
整数を文字列に変換する	str(x)
線グラフの色をパレットトルコイズに指定する	plt.plot(データ列x, データ列y, color='paleturquoise')
散布図をロイヤルブルー色として描画する	plt.scatter(データ列x, データ列y, color='royalblue')
散布図の左三角印の太さを変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
カラムの偏差値を計算する	50 + 10 * scipy.stats.zscore(df['列A'])
縦棒グラフをライトグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームがどれだけ分散しているか見る	df.var()
入力から2つの整数値を読む	A, B = map(int, input().split())
option: フォントの色をブランチドアーモンドに変更する	color = 'blanchedalmond'
パープル色として線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
データフレームをある列をキーにして昇順に整列して、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
option: ラインスタイルを実線に設定する	linestyle = 'solid'
モカシン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
２つの配列を箱髭図にする	plt.boxplot([データ列, データ列])
散布図をライトブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightblue')
実数で実数を整数除算する	x // y
項がセットのメンバーか調べる	要素 in セット
線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: フォントの色をデピンクに設定する	color = 'deeppink'
数列と配列についての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
option: オレンジレッド色を使用する	color = 'orangered'
作画の縦横比を等しくする	plt.axis('equals')
データフレームをグループ化しある列に対し分散を求める	df.groupby('列A')['列B'].var()
配列の相乗平均を求める	scipy.stats.gmean(配列)
データフレームの一部のカラムのどの値が頻出か見る	df[['列A', '列B']].mode()
２つのデータフレームを異なるカラムをキーとして内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
文字列が全て空白からなるかどうか確認する	文字列.isspace()
ケンドールの相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
オブジェクトは集合	set = int<nl>isinstance(obj, set)
辞書から最後のエントリをポップする	辞書.popitem()
リストと配列についての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データシリーズの歪度を計算する	ds.kurt()
Xの８乗を計算したい	X ** 8
両端キューの末尾に数列の要素を追加する	両端キュー.extend(数列)
線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
option: コロンを分割記号で用いる	sep = ':'
ライトスレイグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
データフレームのNaNをその最小値で補う	df.fillna(df.min())
日付データの曜日を使う	aDate.weekday()
ナバホホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
タプルが空かどうか	len(タプル) == 0
データフレームを正規表現patternでまとめて置き換える	df.replace(pattern, repl, regex=True)
標準入力の入力元がターミナルかどうか	os.isatty(sys.stdin.fileno())
配列のユニークな要素とその位置を求める	u, indices = np.unique(aArray, return_index=True)
再帰が何回までできるかを	sys.getrecursionlimit()
表データをグループ化しある列の要約統計量を算出する	df.groupby('列A').describe()['列B']
option: マーカーの色を青緑にする	markerfacecolor = 'turquoise'
文字列の無限イテラブルを得る	itertools.repeat(element)
ヒストグラムの色を暗い赤に変更する	plt.hist(データ列, color='darkred')
菱形マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
タプルの末尾の要素	タプル[-1]
文字列をJSON形式としてファイル出力にダンプする	json.dump(文字列, ファイル出力, ensure_ascii=False)
平均と標準偏差から疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
折れ線グラフの色をダークターコイズに指定する	plt.plot(データ列x, データ列y, color='darkturquoise')
日付データと日付データの時間差を算出する	aDate - aDate2
改行なしに複数の文字列をプリントする	print(文字列, 文字列, end='')
ヒストグラムをダークカーキ色として描画する	plt.hist(データ列, color='darkkhaki')
データフレームを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
折れ線グラフのクロスマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データフレームから指定した二カラムだけ選択する	df[['列A', '列B']]
外れ値に強い線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
ひとつでも空白が文字列中に含まれるかどうか調べる	any(c.isspace() for c in 文字列)
次の繰り返しにスキップしたい	if 条件式:<nl><tab>continue
配列と数列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
option: 大バツマーカーを用いる	marker = 'X'
日付データが月曜日か確認する	aDate.weekday() == 0
データフレームからランダムに100行を重複ありでサンプリングする	df.sample(100, replace=True)
列とリストをチェインする	itertools.chain(iterable, iterable2)
折れ線グラフの▼マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフのバツ印の大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
option: 三角印を描画する	marker = '^'
整数マイナス整数を求める	整数 - 整数2
option: 分割記号をスラッシュにする	sep = '/'
option: ミスティローズを使う	color = 'mistyrose'
表計算ファイルファイルからCSVファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
ヒストグラムをグリーン色を用いて描画する	plt.hist(データ列, color='green')
データフレームを昇順に破壊的に二つの列でソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
整数が整数2未満、またはn3以上か確認する	整数 < 整数2 or 整数 >= n3
option: ミスティローズ色を使用する	color = 'mistyrose'
option: ミディアムターコイズを使う	color = 'mediumturquoise'
データフレームのカラムの名前をまとめて置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
折れ線グラフに星印を用いる	plt.plot(データ列x, データ列y, marker='*')
カウンタからイテラブルをカウントして減らす	aCounter.subtract(iterable)
双方向キュー中の要素の数をカウントする	両端キュー.count(要素)
データフレームの一部のカラムの空文字を欠損値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
option: フォントの色をピーチパフに設定する	color = 'peachpuff'
変数について数式をn階微分する	sympy.diff(数式, 変数, n)
リストの要素をセットに追加する	セット.update(リスト)
キーが辞書上で定義済みか	キー in 辞書
JSONフォーマットで辞書をファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
折れ線グラフの色をリネンに変更する	plt.plot(データ列x, データ列y, color='linen')
ライトスチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
縦軸の目盛の表示値を変更する	plt.yticks(目盛りの値リスト)
エラーのメッセージを求める	etype, evalue, traceback = sys.exc_info()
データフレームから列を三つのみ選択する	df[['列A', '列B', '列C']]
整数がセットに含まれない	数 not in セット
小数点数が無限大かどうか	math.isinf(x)
要素が無限に繰り返すイテレータ	itertools.repeat(要素)
折れ線グラフの右三角印の線幅を設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
option: インデックスを自動的な連番に増やす	index_col = None
ヒストグラムを小麦色色として描画する	plt.hist(データ列, color='wheat')
option: 紺碧にフォントの色を設定する	color = 'azure'
バイオリン図をプロットする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ゼロ埋めされた３二ビット整数型の配列を初期化する	np.zeros(要素数, dtype=np.int16)
棒グラフをゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームの一部のカラムの欠損値を中央値にセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
両端キュー	両端キュー = collections.deque()
線グラフの色をアンティークホワイトにする	plt.plot(データ列x, データ列y, color='antiquewhite')
指定したカラムの25パーセンタイルを求める	df['列A'].quantile(0.25)
折れ線グラフの印を丸印にする	plt.plot(データ列x, データ列y, marker='o')
リストと配列の散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
レモンシフォン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データをL2ノルムとして正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
散布図をビスク色を用いて描画する	plt.scatter(データ列x, データ列y, color='bisque')
配列間のケンドールの相関係数を算出する	scipy.stats.kendalltau(配列, 配列2)
横棒グラフをインディアンレッド色として描画する	plt.barh(データ列x, データ列y, color='indianred')
散布図をrgbのポイントマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
リストと配列について散布図を描画し、、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列を走査し、正規表現にケースを無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
配列をn個にビン分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
線グラフの色をタンにセットする	plt.plot(データ列x, データ列y, color='tan')
列のユニークな要素数	df[col].nunique()
横棒グラフをダークグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgreen')
濃い青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
オブジェクトをデバッグ向けの文字列にする	repr(obj)
数列とリストの散布図を描画してマーカーを大バツにセットする	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムの色をローングリーンに変更する	plt.hist(データ列, color='lawngreen')
縦棒グラフをブラウン色で描画する	plt.bar(データ列x, データ列y, color='brown')
2つのデータフレームを縦方向にくっつける	pd.concat([df, df2], axis=0)
列をリストを境界値として分割する	pd.cut(ds, aList)
データフレームの信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
オブジェクトが非同期ジェネレータかどうか確認する	inspect.isasyncgen(オブジェクト)
大量のデータが正規分布に従うかどうか仮説検定する	scipy.stats.kstest(配列, 'norm')
数値はセットに含まれるか	数 in セット
文字列を最後のセパレータで分けたときの後半の文字列を見る	文字列.rpartition(セパレータ)[-1]
折れ線グラフをパールバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='palevioletred')
rgbのポイントマーカーをリストとイテラブルの散布図に描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフの丸印を赤色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
イテラブルから配列を作成する	np.array(iterable)
線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
リストと配列について散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ゴーストホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
マップのコピーを新規生成する	dict(辞書)
指定した列で昇順にデータフレームをソートし、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
数列とリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: グラフの色をティールに変更する	color = 'teal'
整数がいつまでも繰り返すイテラブル	itertools.repeat(整数)
散布図にrgbの右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横軸の目盛りを非表示にする	plt.xticks([])
折れ線グラフの色をチョコレートに変更する	plt.plot(データ列x, データ列y, color='chocolate')
リストを境界値として配列をビン分割する	pd.cut(aArray, aList)
文字列のn番目をアスキーコードにする	ord(文字列[n])
データシリーズの中にいくつがあるか数える	ds.isin([value]).sum()
散布図に黒い△マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームの中のカラムを等しい量になるようにn個にビン分割する	pd.qcut(df[col], n)
折れ線グラフの印を丸にする	plt.plot(データ列x, データ列y, marker='o')
カウンタを辞書にする	dict(aCounter)
数式の変数xについてのn階微分を算出する	sympy.diff(数式, [|変数]x, n)
スカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ダークターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='darkturquoise')
データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
データフレームの値はNaNか調べる	df.isna()
リストとイテラブルの散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
データフレームの選択した列の空文字を未入力値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
プログラムを強制的に終了する	sys.exit()
カウンタの値数	len(aCounter)
ブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
xを赤色で出力する	print(f'\033[31m{x}\033[0m')
バイナリ用にファイルをオープンする]	'rb' = 'a'<nl>open(filepath, mode='rb')
スクリプトファイルのフォルダパス	os.path.dirname(os.path.abspath(__file__))
散布図をダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D')
二つのデータ列の残差を散布図としてプロットする	sns.residplot(x=データ列, y=データ列)
大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X')
y軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
データシリーズの標本標準偏差を求める	ds.std(ddof=1)
パールバイオレットレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
四角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
配列の要素数を計算する	aArray.size
パープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
文字列の開始位置からと終了位置までの範囲に部分文字列がない	文字列.find(部分文字列, 開始位置, 終了位置) == -1
複数のカラムからグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
ゼロ埋めされた複素数型のベクトルを作る	np.zeros(要素数, dtype=bool)
行列の行ごとの合計	np.sum(aArray, axis=1)
辞書の項目名の値	辞書[キー]
option: ライトブルーにグラフの色を設定する	color = 'lightblue'
辞書の値もコピーする	{k: copy.copy(v) for k, v in 辞書.items()}
横棒グラフを紺碧色として描画する	plt.barh(データ列x, データ列y, color='azure')
リストとリストについて散布図を描画し、、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
散布図をインディゴ色を使って描画する	plt.scatter(データ列x, データ列y, color='indigo')
文字列を最後のカンマで二つに分けて残りを使う	文字列.rpartition(',')[-1]
option: 読み込みモードを用いる	mode = 'r'
データフレームの値は未入力値か	df.isna()
xについて数式の偏微分を計算する	sympy.diff(数式, [|変数]x)
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
折れ線グラフに赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
部分文字列を置き換える	文字列.replace(部分文字列, 置換後の文字列)
主成分分析を用いて整数次元に次元削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
配列のKurtosis	scipy.stats.kurtosis(配列, bias=False)
データシリーズの未入力値を最大値に設定する	ds.fillna(ds.max())
カウンタの要素一覧を見る	aCounter.keys()
文字列を小文字に変換する	文字列.lower()
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
横棒グラフをスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='slateblue')
等間隔でn個にリストをビン分割する	pd.cut(aList, n)
箱髭図を横向きにする	plt.boxplot(データ列, vert=False)
文字列中にひとつでも非英数字があるか調べる	any(not c.isalnum() for c in 文字列)
横棒グラフをブラック色を使って描画する	plt.barh(データ列x, データ列y, color='black')
黄色にヒストグラムの色を指定する	plt.hist(データ列, color='yellow')
ファイルパスをバイナリモードを使って開く]	'rb' = 'a'<nl>open(filepath, mode='rb')
今日が日曜日	datetime.datetime.today().weekday() == 6
線グラフの色をレモンシフォンにセットする	plt.plot(データ列x, データ列y, color='lemonchiffon')
option: 文字コードをSJISに設定する	encoding = 'shift_jis'
ライム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
辞書の項目名に対応した値	辞書.get(キー, 見つからない場合の値)
バイナリ書き込みモードとしてファイルをオープンして]fとする	f = open(filepath, mode='wb')
整数乱数で要素を埋めた配列を作成する	np.random.randint(開始値, 終了値, N)
貝殻にヒストグラムの色をセットする	plt.hist(データ列, color='seashell')
リストの最後からn番目以前の部分を抽出する	リスト[:-n]
逆順のキューを使う	reversed(両端キュー)
option: 淡いピンク色にグラフの色を設定する	color = 'lightpink'
スレートブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
両端キューの上限長	両端キュー.maxlen
要素を両端キューの左側に追加する	両端キュー.appendleft(要素)
option: ミディアムスレートブルー色を用いる	color = 'mediumslateblue'
データ列の割合を円グラフで作図する	plt.pie(データ列, startangle=90)
データフレームのn行目を消す	df.drop(n, axis=0, inplace=True)
コマンドラインを列挙する	sys.argv[1:]
配列とイテラブルについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
等間隔でデータ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
タイムスタンプデータにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
数列を一つの文字列にする	''.join(map(str, 数列))
縦棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
ピーチパフ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
x軸のラベルを設定する	plt.xlabel('x軸ラベル')
option: ハニーデューを用いる	color = 'honeydew'
▼マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v')
散布図を黒い四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s', c='k')
文字列の左側から文字を取り除く	文字列.lstrip(文字)
連番の配列の自動作成する	np.arange(開始値, 終了値, 等差)
折れ線グラフの▽マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: 色をライトグレーに設定する	color = 'lightgray'
全ての印字できる文字	string.printable
replに正規表現patternでデータシリーズの値を一度に置き換える	ds.replace(pattern, repl, regex=True)
プロットのフォントを日本語に設定する	sns.set(font='IPAexGothic')
ファイル名のセパレータ記号	os.sep
部分文字列を新しい文字列に置換する	文字列.replace(部分文字列, 置換後の文字列)
キーがマップ上で未定義	キー not in 辞書
データシリーズをValueMapで一度に置き換える	ds.replace(ValueMap)
日付時刻データが火曜日かどうか判定する	aDatetime.weekday() == 1
パレットトルコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
イテラブルに列を続けたイテラブルを得る	itertools.chain(iterable, iterable2)
ファイルを文字列の示すエンコーディングで書き込み用に開く]	open(filepath, mode='w', encoding=s)
実数のタンジェントの逆数を算出する	math.atan(x)
ロージーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='rosybrown')
箱ひげ図を横に並べて描く	plt.boxplot([データ列, データ列])
実数の逆正接を求める	math.atan(x)
タイムスタンプデータの時刻を使う	aDatetime.time()
option: ダークシアンを使用する	color = 'darkcyan'
イテラブルとイテラブルの散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
文字列がリストのいずれかどうか	文字列 in リスト
データフレームをカンマ区切り形式にインデックスを付けず保存する	df.to_csv('file.csv', index=None)
指定した列のカテゴリで集計し、各分散を求める	df.groupby('列A').var()
８進数字を見る	string.octdigits
表データのあるカラムが何時か知る	df['列A'].dt.hour
本日が火曜日かどうか	datetime.datetime.today().weekday() == 1
ロバスト推定としてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
指定したカラムの値がNaN	df['列A'].isna()
グラフをパステル調にする	sns.set(pallete='pastel')
棒グラフをハニーデュー色として描画する	plt.bar(データ列x, データ列y, color='honeydew')
配列をビニングする	pd.cut(aArray, aList)
折れ線グラフを色付きの破線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列からタブを除去する	文字列.replace('\t', '')
データ列を分割数nでビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
ネイピア数を使用する	math.e
０で全要素を初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
散布図をミディアムシアグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
散布図をグリーンイエロー色を使って描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームをSJISでカンマ区切り形式に保存する	df.to_csv('file.csv', encoding='shift_jis')
カウンタのキーとカウントをリストとして得る	aCounter.items()
折れ線グラフをハニーデュー色として描画する	plt.plot(データ列x, データ列y, color='honeydew')
小数点数の整数部	math.modf(x)[1]
折れ線グラフの色を暗い赤に指定する	plt.plot(データ列x, データ列y, color='darkred')
ダークスラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データ列を等間隔でn個に分割する	pd.cut(ds, n)
折れ線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
実数から数を引く	x - y
横棒グラフをミディアムシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
マゼンタにヒストグラムの色を指定する	plt.hist(データ列, color='magenta')
option: 書き込みモードに指定する	mode = 'w'
option: グラフの色をダークシアンに変更する	color = 'darkcyan'
整数が整数2よりも小さいかどうか調べる	整数 < 整数2
オブジェクトがコルーチンかテストする	inspect.iscoroutine(オブジェクト)
リストと配列についての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
ヒストグラムの色をサンディーブラウンに指定する	plt.hist(データ列, color='sandybrown')
線グラフの色を耐火レンガにセットする	plt.plot(データ列x, データ列y, color='firebrick')
データフレームを100の位で四捨五入する	df.round(-2)
ヒストグラムの色をバイオレットに設定する	plt.hist(データ列, color='violet')
ファイルパスをディレクトリ名とファイル名に分割する	os.path.split(filepath)
耐火レンガ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
yが無限大に近づくとき、数式の極限値を求める	sympy.limit(数式, y, oo)
オブジェクトはビルトイン	inspect.isbuiltin(オブジェクト)
option: グラフの色をアクアに変更する	color = 'aqua'
文字列が数字	文字列.isdigit()
option: シスルにグラフの色を設定する	color = 'thistle'
データ列の折れ線グラフを大バツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='X')
オブジェクトをユーザ向けの文字列にする	str(obj)
ベクトルと同じ大きさの空配列を作る	np.empty_like(aArray)
線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
文字列を区切り記号で二つに分けて、前半を使う	文字列.partition(セパレータ)[0]
文字列が全て印字できるかどうか調べる	文字列.isprintable()
書き込み用にEUCでファイルをオープンする]	open(filepath, mode='w', encoding='euc_jp')
データフレームの指定したカラムがどの程度、正規分布から尖っているか確認する	df['列A'].skew()
整数が負の整数か調べる	整数 < 0
リストからn個、サンプリングしてリスト化する	random.sample(リスト, k=n)
オブジェクトがタプルか	tuple = int<nl>isinstance(obj, tuple)
横棒グラフをレベッカパープル色として描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
配列とリストについての散布図に黒い上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
タプルのn番目のの要素を使う	タプル[n]
レモンシフォン色としてヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
変数の値を切り捨てながら整数分の1にする	変数 //= 整数
整数2がn以上かつ、n3以下	整数 <= 整数2 and 整数2 <= n3
データフレームの選択した列を十の位で丸めて整数にする	df[['列A', '列B']].round(-1).astype(int)
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
データフレームの一部のカラムの値をValueMapで全部置き換える	df[['列A', '列B']].replace(ValueMap)
データフレームを表示するとき折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
折れ線グラフをイエローグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
データ列をn個にビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
アイボリー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
折れ線グラフの色をトマトに指定する	plt.plot(データ列x, データ列y, color='tomato')
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
ある列の値がxより大きく、yより小さいデータを抽出する	df[(x < df['列A']) & (df['列A'] < y)]
リストから両端キューを用意する	collections.deque(リスト)
データフレームのあるカラムの曜日を使う	df['列A'].dt.weekday_name
ファイルを絶対ファイルパスにする	os.path.abspath(filepath)
加算が書きたい	X + Y
配列の最頻値を計算する	mode, count = scipy.stats.mode(配列)
本日が水曜日	datetime.datetime.today().weekday() == 2
線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
横方向に二つのデータフレームを合体させる	pd.merge(df, df2)
パスのセパレータ記号を見る	os.sep
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
ライトイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
整数の8進数文字列	oct(整数)[2:]
改行なしに２つの計算結果をプリントする	print(式, 式, end='')
データシリーズの未入力値を前の行の値に設定する	ds.fillna(method='ffill')
option: 下三角マーカーを使用する	marker = 'v'
キューのn番目に整数を挿入する	両端キュー.insert(n, 整数)
データシリーズの標準偏差を求める	ds.std()
折れ線グラフの下三角マーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
赤い△マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
整数が整数2以下か確認する	整数 <= 整数2
データフレームの一部のカラムのNaNを中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
データフレームの選択したカラムの中に文字列が存在するか確認する	df[['列A', '列B']].isin([value])
横棒グラフをプロットして、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
横軸の名前をセットする	plt.xlabel('x軸ラベル')
ハイパボリック・コサインの逆数	math.acosh(x)
青い一点鎖線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
線形回帰モデルの回帰変数を使う	model.coef_
データフレームのカラムのトリム平均を使う	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: フォントの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
ダークカーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
折れ線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
黒い上三角マーカーをデータ列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
文字列をJSON文字列に変換する	json.dumps(文字列, ensure_ascii=False)
指定したカラムの欠損値を直後の値に指定する	df['列A'].fillna(method='bfill')
データ列を使用する	import pandas as pd
リストと配列についての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームを小数点以下n桁で四捨五入する	n = 2<nl>df.round(n)
パーセント付きの円プロットを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
整数が5で割り切れる	整数 % 5 == 0
データ列間の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
数列とリストの散布図を描画して、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
アリスブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
乱数の配列	np.random.random(N)
ライトサーモン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
文字列の両端から部分文字列を除去する	文字列.strip(部分文字列)
２つの整数のビット積	整数 & 整数2
黒い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
折れ線グラフのダイアモンドマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
option: 暗い赤を使う	color = 'darkred'
散布図のバツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ある列の文字列が正規表現にマッチするデータを抽出する	df[df['列A'].str.match(正規表現)]
行列の合計値を求める	np.sum(aArray)
option: データ型として符号なし８ビット整数型を使う	np.uint8 = np.int<nl>dtype = np.uint8
リストを文字列として指定した文字列で連結する	文字列.join(map(str, リスト))
識別子は非同期ジェネレータ関数	inspect.isasyncgenfunction(識別子)
直前の値でデータフレームの欠損値を埋める	df.fillna(method='ffill')
分数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
ヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
小数点数の双曲線正弦	math.sinh(x)
新しいガウス過程分類器を準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
カラーバーを水平で付ける	plt.colorbar(orientation='horizontal')
データ列間の平均２乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
割り算の小数点以下を切り捨てたい	X // Y
エンディアンを知る	sys.byteorder
ハローワールドを出力する	print('Hello World')
データフレームの指定した列の標本標準偏差	df['列A'].std(ddof=1)
空の集合を使う	set()
option: ダークバイオレットを用いる	color = 'darkviolet'
オブジェクトのプロパティを取り除く	delattr(obj, プロパティ名)
両端キューの右側に要素を追加する	両端キュー.append(要素)
表データのあるカラムが何曜日か見る	df['列A'].dt.weekday_name
カテゴリ列に並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
散布図を赤い四角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ヒストグラムの色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
データシリーズをまとめてValueMapで置き換える	ds.replace(ValueMap)
コーラル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
配列からランダムに1個選んでリストにする	random.choice(配列)
option: 文字コードをEUCに設定する	encoding = 'euc_jp'
option: マーカーの色を設定する	markerfacecolor = '#800080'
実行時に標準出力がパイプか確認する	not sys.stdout.isatty()
あるカラムの値がxに等しく、別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
表データは何行重複するか見る	df.duplicated().sum()
データフレームを十の位で丸めて整数にする	df.round(-1).astype(int)
データフレームを異なる列をキーとして外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
列のUNIX秒をタイムスタンプに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
表データから列を一つ選択する	df[['列A']]
タイムスタンプデータにn日を加算する	aDatetime + datetime.timedelta(days=n)
整数の四乗を計算する	整数 ** 4
配列を集合に変換する	set(配列)
データフレームの選択した列を正規表現patternでまとめて置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
文字列全体がパターンにASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
横棒グラフをライトイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightyellow')
ゴールド色を使ってヒストグラムを描画する	plt.hist(データ列, color='gold')
折れ線グラフの色をレベッカパープルにする	plt.plot(データ列x, データ列y, color='rebeccapurple')
パープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
横棒グラフをライトサーモン色として描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
赤い実線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ヒストグラムをホットピンク色を使って描画する	plt.hist(データ列, color='hotpink')
指定したカラムの欠損値を後の行の値に設定する	df['列A'].fillna(method='bfill')
ヒストグラムで配列を可視化する	plt.hist(データ列)
リストを文字列としてタブによって連結する	'\t'.join(map(str, リスト))
マッピングに別の辞書2のエントリを更新する	辞書.update(辞書2)
NaNがある行をドロップしてみる	df.dropna()
文字列をインデントを指定してJSONにエンコードする	json.dumps(文字列, ensure_ascii=False, indent=n)
表データのあるカラムが何年か見る	df['列A'].dt.year
縦棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
折れ線グラフにラベルをつける	plt.plot(データ列x, データ列y, label='ラベル')
数列とイテラブルについての散布図に赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ライトコーラル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
両端キューに整数を積む	両端キュー.append(整数)
識別子はメソッドか調べる	inspect.ismethod(識別子)
列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
全般的に色を淡くする	sns.set(pallete='muted')
option: ターコイズにフォントの色を設定する	color = 'turquoise'
縦棒プロットを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
３変数の最大値	max(x, y, z)
指定された列リストついて、データフレームの重複を確認する	df.duplicated(subset=['列A', '列B'])
シーケンスのそれぞれを関数でフィルタする	filter(func, iterable)
文字列を区切り記号で分割して、列挙する	文字列.split(セパレータ)
散布図をミッドナイトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
縦棒グラフを紺色を用いて描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームの選択した列の欠損値を前の行の値に設定する	df[['列A', '列B']].fillna(method='ffill')
タン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
タイムスタンプデータを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
タイムスタンプデータが何分か知る	aDatetime.minute
識別子はコルーチンか	inspect.iscoroutine(識別子)
分類モデル教師データとしてを学習する	model.fit(説明変数, 目的変数)
データシリーズを10の位で丸めて、整数にする	ds.round(-1).astype(int)
タプル内の要素は全て真か判定する	all(タプル)
option: パレットトルコイズにグラフの色を設定する	color = 'paleturquoise'
白色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
部分文字列で文字列を二分割し、前半を使う	文字列.partition(部分文字列)[0]
データフレームの末尾を確認する	df.tail()
ブラック色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
2つ以上の条件分岐が書きたい	if 条件式:<nl><tab>print('1')<nl>elif 条件式2:<nl><tab>print('2')<nl>else:<nl><tab>print('3')
２つの整数のビット和	整数 | 整数2
文字列中に大文字が含まれるかどうか	any(c.isupper() for c in 文字列)
option: 論理値型を使う	np.int32 = np.int<nl>dtype = np.int32
整数がnで割り切れないかどうか調べる	整数 % n != 0
ヒストグラムをレモンシフォン色として描画する	plt.hist(データ列, color='lemonchiffon')
option: フォントの色を青緑に設定する	color = 'teal'
横棒グラフを描画し、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
カーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
文字列の末尾から指定した文字を取り除く	文字列.rstrip(文字)
データフレームのNaNを後の行の値に指定する	df.fillna(method='bfill')
リッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
横棒グラフを黄色色を用いて描画する	plt.barh(データ列x, データ列y, color='yellow')
ライムグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームのある列を取り出す	df['列A']
小数点数の逆余弦	x = 0.33<nl>math.acos(x)
データシリーズの中にいくつ文字列が存在するか数える	ds.isin([value]).sum()
ヒストグラムの色をシエナに指定する	plt.hist(データ列, color='sienna')
外れ値を除いたデータフレームのカラムの分散を見る	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
カウンタの項目をリストとして得る	aCounter.keys()
文字列の左側がsubか調べる	文字列.startswith(部分文字列)
縦棒グラフを貝殻色を用いて描画する	plt.bar(データ列x, データ列y, color='seashell')
yが無限大に近づく場合の数式の極限値を計算する	sympy.limit(数式, y, oo)
option: グリーンを使う	color = 'green'
数列からn要素、サンプリングしてリストにする	random.sample(数列, k=n)
ヒストグラムをホワイトスモーク色を用いて描画する	plt.hist(データ列, color='whitesmoke')
新しいサポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
縦棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
箱髭図を用いてデータ列を可視化する	plt.boxplot(データ列)
ファイルパスをオープンして]、書き込みストリームを見る	'w' = 'a'<nl>open(filepath, mode='w')
文字列の開始位置からと終了位置までの間に部分文字列が含まれない	文字列.find(部分文字列, 開始位置, 終了位置) == -1
ホットピンク色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
文字列中のタブ文字をn個の空白にする	文字列.expandtabs(tabsize=n)
文字列中にひとつも英数字が含まれないか	any(not c.isalnum() for c in 文字列)
ヒストグラムの色をダークバイオレットにする	plt.hist(データ列, color='darkviolet')
複素数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=bool)
縦棒グラフをプロットしてラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
辞書にキーが存在しないとき、処理する	if キー not in 辞書:<nl><tab>print(辞書[キー])  # FIXME
複数のシートをエクセルファイルから読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
option: 印を丸に変更する	marker = 'o'
散布図に赤い三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
ミディアムスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
日付時刻データからn分、減らす	aDatetime - datetime.timedelta(minutes=n)
よりランダムなランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
タプルの順番をシャッフルする	tuple(random.sample(タプル, len(タプル)))
折れ線グラフのクロス印を青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
黒い星マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
リストと配列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
偽陽性を抑えたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
ヒストグラムをスレートブルー色を使って描画する	plt.hist(データ列, color='slateblue')
データフレームの指定した二つの列を取り出す	df[['列A', '列B']]
イテラブルと配列についての散布図に補足用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
イテラブルと列を連結する	itertools.chain(iterable, iterable2)
ハニーデュー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
黒い四角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
配列を縦ベクトルに変形する	aArray.reshape(-1, 1)
ミントクリームにヒストグラムの色を設定する	plt.hist(データ列, color='mintcream')
やわらかい青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
回帰分析をK最近傍法として行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
リストを縦軸リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムを濃いシアン色で描画する	plt.hist(データ列, color='darkcyan')
ふたつの集合の共通部分を使う	セット.intersection(セット2)
線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフをプラム色として描画する	plt.plot(データ列x, データ列y, color='plum')
ダークバイオレット色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
空白で文字列を区切って、文字列リストに変換する	文字列.split()
option: グラフのラインスタイルを一点鎖線に設定する	linestyle = 'dashbot'
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='grey')
ヒストグラムをディムグレー色を用いて描画する	plt.hist(データ列, color='dimgray')
option: 線の種類を実線に変更する	linestyle = 'solid'
グラフのカラーパレットを全般的に淡くする	sns.set(pallete='muted')
散布図に右三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='>')
２つのマッピングをネストする	collections.ChainMap(aDict, aDict2)
データシリーズの欠損値をxで補完する	ds.fillna(x)
二つの表データを横方向にマージする	pd.merge(df, df2)
SVDを使って整数次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
赤い下三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
棒グラフの色をティールにする	plt.bar(データ列x, データ列y, color='teal')
赤い破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
横棒グラフをアンティークホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
rgbのクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ケンドール相関係数でデータフレームの相関行列を算出する	df.corr(method='kendall')
配列をフラット化する	aArray.flatten()
エクセルファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
option: データ型を指定する	np.uint8 = np.int<nl>dtype = np.uint8
データフレームの値が未入力値かどうか調べる	df.isna()
データシリーズの年度	ds.dt.year
タプルのn番目からn2番目を取り出す	タプル[n:n2]
ヒートマップを使ってデータフレームの相関行列を可視化する	sns.heatmap(df.corr())
スチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
ラベンダー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
配列とリストの散布図を描画して、三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
rgbの▽マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
配列の相乗平均を使う	scipy.stats.gmean(配列)
データフレームのn行まで取り出す	df[:n]
線グラフの色をライトブルーに指定する	plt.plot(データ列x, データ列y, color='lightblue')
セットが空か判定する	len(セット) == 0
タイムスタンプデータからn秒分減算する	aDatetime - datetime.timedelta(seconds=n)
散布図をスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='skyblue')
実数の整数部を計算する	math.modf(x)[1]
本日のタイムスタンプ	datetime.datetime.now()
重複を認めてデータフレームから5行をランダムにサンプリングする	df.sample(5, replace=True)
部分文字列を文字列の先頭から取り除く	文字列.removeprefix(部分文字列)
option: グラフの色をデピンクに指定する	color = 'deeppink'
グラフ中で日本語を使えるようにする	sns.set(font='IPAexGothic')
データフレームを異なる列をキーにして右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
option: 上三角印を描画する	marker = '^'
黄色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
ある列の値ごとの分散を求める	df.groupby('列A').var()
列を累加した列	itertools.accumulate(iterable)
線グラフの色をシアンに指定する	plt.plot(データ列x, データ列y, color='cyan')
データフレームから5行サンプリングする	df.sample(5)
安全に文字列の接尾辞から部分文字列を除く	文字列.removesuffix(部分文字列)
確率的勾配降下を使って回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
散布図をピンク色として描画する	plt.scatter(データ列x, データ列y, color='pink')
ビンを設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
黒いポイントマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
Pandasのバージョンを確認する	print(pd.__version__)
option: 貝殻を使用する	color = 'seashell'
option: グラフの色をカデットブルーに指定する	color = 'cadetblue'
イテラブルの要素を	''.join(map(str, イテラブル))
整数のn乗	pow(x, n)
JSONフォーマットの文字列をデータに変換する	data = json.loads(文字列)
データフレームを1000の位で丸めて整数にする	df.round(-3).astype(int)
リストと配列について散布図を描画して、▼マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データ列の残差を散布図としてプロットする	sns.residplot(x=データ列, y=データ列)
10を底とする実数の対数を計算する	math.log10(x)
option: ライトサーモンにグラフの色を設定する	color = 'lightsalmon'
辞書の全エントリをクリアする	辞書.clear()
黒いクロスマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
ヒストグラムの色をダークバイオレットに指定する	plt.hist(データ列, color='darkviolet')
パールバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
標準出力をフラッシュする	sys.stdout.flush()
散布図をグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='gray')
データフレームをある列でソートする	df.sort_values(by='列A')
半透明の破線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データ列の折れ線グラフを右三角印を使って描画する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフの△マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームをある列によって並べる	df.sort_values(by='列A')
option: グラフの色をマゼンタにセットする	color = 'magenta'
変数の出力を改行せず行う	print(変数名, end='')
データフレームをにバイオリン図として見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
カテゴリで色分けして、に箱ひげ図でデータフレームを描画する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
Xの五乗を求めたい	X ** 5
あるカラムを四捨五入する	df['列A'].round()
線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
横棒グラフを描画して、バーの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
線グラフをミントクリーム色として描画する	plt.plot(データ列x, データ列y, color='mintcream')
配列とリストについて散布図を描画して、上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
青緑色として線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
パウダーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
データ列とリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
MSDで多次元データを項次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
データフレームの指定したカラムの文字列をNaNにする	df['列A'].replace(値, np.nan)
マップにキーが存在するか調べる	キー not in 辞書
文字列を最後の部分文字列で二分し、、後半を見る	文字列.rpartition(部分文字列)[-1]
ヒストグラムをプラム色を用いて描画する	plt.hist(データ列, color='plum')
2を底とする小数点数の対数を求める	math.log2(x)
文字列を最後の区切り文字で分割したときの後半の文字列	文字列.rpartition(セパレータ)[-1]
データシリーズの尖度を求める	ds.skew()
整数がセットのいずれ	数 in セット
直後の値でデータシリーズの欠損値を置換する	ds.fillna(method='bfill')
option: フォントの色をシルバーに変更する	color = 'silver'
文字列の先頭から指定した文字を取り除く	文字列.lstrip(文字)
２数の最小値	min(x, y)
リストから両端キューを新規生成する	collections.deque(リスト)
ミディアムスプリンググリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データフレームの欠損値を平均で埋める	df.fillna(df.mean())
第二四分位数でデータフレームの選択したカラムの欠損値を補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
整数の2進数表現	bin(整数)
横棒グラフをゲインズボロ色として描画する	plt.barh(データ列x, データ列y, color='gainsboro')
あるカラムの文字列に部分文字列が含まれる行を抽出する	df[df['列A'].str.contains(部分文字列)]
破線に折れ線グラフの線の種類を変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
データ列を全てdatetime64型に変換する	pd.to_datetime(ds)
標準出力を強制表示する	sys.stdout.flush()
データフレームの一部の列の最頻値	df[['列A', '列B']].mode()
データフレームから列を３つ選択する	df[['列A', '列B', '列C']]
リストの重複を除く	sorted(set(リスト), key=リスト.index)
散布図を右三角マーカーで描く	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムをサンディーブラウン色を用いて描画する	plt.hist(データ列, color='sandybrown')
データフレームの欠損値を後の行の値に設定する	df.fillna(method='bfill')
リストの要素が最初に見つかる場所	リスト.index(要素)
8進数文字列をバイト列にする	int(文字列, 8).to_bytes(length=バイト数, byteorder='big')
平均と標準偏差から乱数を発生させる	random.normalvariate(mu=0.5, sigma=0.2)
部分文字列が文字列の指定した区間に存在するか	文字列.find(部分文字列, 開始位置, 終了位置) != -1
サドルブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
実数を浮動小数点数に足す	x + y
JSONファイル入力を辞書に変換する	json.load(ファイル入力)
アクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
散布図に下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムの色をダークグリーンに変更する	plt.hist(データ列, color='darkgreen')
データ列間の平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
ミディアムブルー色を使ってヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
配列のモード	mode, count = scipy.stats.mode(配列)
Excelファイルファイルを文字化けしないように読む	pd.read_csv('file.csv', encoding='shift_jis')
文字列を複数行対応として正規表現で分ける	re.split(pattern, s, flags=re.MULTILINE)
文字列の両端から不要な空白と改行を取り除く	文字列.strip()
イテラブルの推移を赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: スチールブルーを使う	color = 'steelblue'
ヒストグラムの色をライトスレイグレーにセットする	plt.hist(データ列, color='lightslategrey')
改行文字を使う	'\n'
option: インディゴを使う	color = 'indigo'
オブジェクトがリスト	list = int<nl>isinstance(obj, list)
折れ線グラフに赤い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフの右三角印の色を設定する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
整数のバイト長を調べる	(整数.bit_length() + 7) // 8
データフレームを複数の列で並べ直して、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
文字列が小文字かどうか	文字列.islower()
option: 色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
ヒストグラムの色をパパイヤウィップにセットする	plt.hist(データ列, color='papayawhip')
コーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
option: 色をライムグリーンにセットする	color = 'limegreen'
浮動小数点数の双曲線正接の逆数を求める	math.atanh(x)
棒グラフの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
スチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
行列間の要素ごとの最小公倍数を見る	np.lcm(aArray, aArray2)
青色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
表示可能な行数を変更する	pd.set_option('display.max_rows', n)
文字列がn回続くイテラブル	itertools.repeat(文字列, n)
折れ線グラフをホワイト色として描画する	plt.plot(データ列x, データ列y, color='white')
サポートベクターマシンとしてクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレーム中の欠損値をインプレイスでドロップする	df.dropna(inplace=True)
データシリーズの標本分散を計算する	ds.var(ddof=0)
データフレームのカラムを型にする	df[col] = df[col].astype(ty)
第一引数のファイルの名前	sys.argv[1]
毎回異なるように乱数を初期化する	random.seed()
出力するCSVファイルの小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
データフレームを千の位で四捨五入する	df.round(-3)
分子n、分母mの有理数を新規生成する	fractions.Fraction(numerator=n, denominator=m)
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
オブジェクトがバイト列	bytes = int<nl>isinstance(obj, bytes)
赤い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列の右側から改行を取り除く	文字列.rstrip()
目盛線をグラフから消す	plt.grid(False)
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
option: フォントの色をコーラルに設定する	color = 'coral'
データフレームをある列で集計し、、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
全要素を０で初期化した整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int)
配列からn個サンプリングしてリスト化する	random.sample(配列, k=n)
option: グラフの色をライトグリーンに指定する	color = 'lightseagreen'
あるカラムの文字列が部分文字列で終わる行を選択する	df[df['列A'].str.endswith(部分文字列)]
折れ線グラフのバツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
xを黄色で表示する	print(f'\033[33m{x}\033[0m')
ファイルの絶対パスを求める	os.path.abspath(filepath)
散布図をブラック色を使って描画する	plt.scatter(データ列x, データ列y, color='black')
縦棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
n個の整数リスト	list(range(n))
オブジェクトはクラスかどうか調べる	isinstance(obj, クラス)
配列から長さの制限された両端キューを生成する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
ライトグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
縦棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
折れ線グラフの下三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
文字列はタイトルケースかどうか調べる	文字列.istitle()
マッピングからカウンタを作る	collections.Counter(aDict)
散布図に黒い三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
オブジェクトのバイト長を知る	sys.getsizeof(オブジェクト)
グラフの使途をスライドに設定する	sns.set(context='talk')
縦棒グラフをフローラルホワイト色として描画する	plt.bar(データ列x, データ列y, color='floralwhite')
データフレームが正規分布からどれだけ尖っているか調べる	df.skew()
散布図に青い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
分類結果の適合率を算出する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
option: グラフの色をサンディーブラウンに指定する	color = 'sandybrown'
ゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
カテゴリ別で色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
変数について数式の微分を行う	sympy.diff(数式, 変数)
線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
option: ライトグレーを使用する	color = 'lightgray'
インディアンレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
要素はタプルの要素でないか調べる	要素 not in タプル
オブジェクトはコルーチン	inspect.iscoroutine(オブジェクト)
四乗を計算したい	X ** 4
縦棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
文字列はタイトルケースか確認する	文字列.istitle()
文字列の接頭辞がsub	文字列.startswith(部分文字列)
最初のコロンで文字列を二分して、前半を使う	文字列.partition(':')[0]
ヒストグラムを二つ並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
option: フローラルホワイトを用いる	color = 'floralwhite'
項がセットに含まれるか調べる	要素 in セット
リストとリストについて散布図を描画し、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
行列のユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
option: グラフの色をシエナにセットする	color = 'sienna'
グラフの描画で明るくカラーパレットを用いる	sns.set(pallete='bright')
棒グラフをミディアムブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumblue')
ふたつの列を組み合わせてグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
青にヒストグラムの色を設定する	plt.hist(データ列, color='blue')
線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ラベンダーブラッシュ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
データフレームの空文字をNaNに変換しドロップする	df.replace('', np.nan).dropna()
カウンタの項目を一つ増やす	aCounter[element] += 1
文字列のn番目の文字を使う	文字列[n]
赤い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='r')
最大値・最小値として整数乱数を算出する	random.randint(最小値, 最大値)
自然数の階乗を求める	math.factorial(n)
データフレームから型型の列を抽出する	df.select_dtypes(ty)
散布図を赤い右三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='>', c='r')
関数の値によってデータフレームを分類する	df.groupby(関数)
横棒グラフをライトブルー色を使って描画する	plt.barh(データ列x, データ列y, color='lightblue')
deqのstart〜endの部分要素を見る	collections.deque(itertools.islice(deq, start, end))
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
データフレームを縦方向に一つにする	pd.concat([df, df2], axis=0)
変数が0に近づく時数式の極限値を求める	sympy.limit(数式, 変数, 0)
文字列を空白で区切り、、整数リストにする	list(map(int, 文字列.split()))
四分位点でスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データフレームをある列を用いて降順に整列する	df.sort_values(by='列A', ascending=False)
データシリーズの母標準偏差を求める	ds.std(ddof=0)
指定したカラムの代表値	df['列A'].describe()
線グラフの色をベージュに変更する	plt.plot(データ列x, データ列y, color='beige')
ヒストグラムの色をミディアムスレートブルーに指定する	plt.hist(データ列, color='mediumslateblue')
ユークリッド距離	math.dist(point, point2)
ライムグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='limegreen')
データフレームを小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
ヒストグラムの色をホワイトに指定する	plt.hist(データ列, color='white')
折れ線グラフのポイント印の大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
XをYで割った結果が切り上げたい	(X + Y - 1) // Y
L1ノルムでデータを正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ISO8601の文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
上限から下限までの上限下限で度数分布図を描画する	plt.hist(データ列, range=(start, end))
グラフに水平方向の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
縦棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
JSON形式の文字列をロードする	data = json.loads(文字列)
リストを変更不能なセットに変換する	frozenset(リスト)
データフレームの選択した列の欠損値を平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
縦棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
縦棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
rgbの左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
わり算のあまりの計算を書きたい	X % Y
option: フォントの色をラベンダーにセットする	color = 'lavender'
nの無限な数列	itertools.repeat(n)
日付時刻データの時刻	aDatetime.hour
線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
グリーン色としてヒストグラムを描画する	plt.hist(データ列, color='green')
緑色にする	f'\033[32m{x}\033[0m'
option: 大バツ印を加える	marker = 'X'
黒い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームの未入力値が含まれる箇所を色つけする	df.style.highlight_null()
文字列をASCIIコードエスケープでバイト列にする	文字列.encode(encoding='unicode_escape')
データフレームのカラムの相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
文字列がタイトルケースかどうか調べる	文字列.istitle()
ダークマゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
散布図をホットピンク色として描画する	plt.scatter(データ列x, データ列y, color='hotpink')
横棒グラフを黄色色として描画する	plt.barh(データ列x, データ列y, color='yellow')
項目名が辞書に存在するかテストする	キー not in 辞書
あるカラムによってデータフレームをグループ化し要約統計量を求める	df.groupby('列A').describe()
データ列を平方根変換する	np.sqrt(データ列)
タイムスタンプデータがタイムスタンプデータよりあとか調べる	aDatetime > aDatetime2
赤い菱形マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
ラベンダーブラッシュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
散布図をダークオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
最大値・最小値を用いて乱数を得る	random.randint(最小値, 最大値)
赤いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
ファイルパスをUTF8で書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
イテラブルから長さの制限された両端キューを作成する	最大長 = 10<nl>collections.deque(イテラブル, maxlen=最大長)
データフレームの指定した列がどれだけ分散しているか確認する	df['列A'].var()
データフレームとデータフレームの列を横向きに連結する	pd.concat([df, ds], axis=1)
レベッカパープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
散布図に赤い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='r')
目盛り線をグラフに描画する	plt.grid(True)
指定したカラムの平均値	df['列A'].mean()
データフレームから同じデータをドロップする	df.drop_duplicates(inplace=True)
トマト色でヒストグラムを描画する	plt.hist(データ列, color='tomato')
データ列の変遷を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
双方向キュー中の整数のインデックス	両端キュー.index(整数)
ランダムにデータフレームから重複を認めてn行をサンプリングする	df.sample(n, replace=True)
ペールグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
ヒストグラムを破線で描く	plt.hist(データ列, linestyle='dashed')
赤い丸マーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
部分文字列が文字列の開始位置以降に含まれるか判定する	文字列.find(部分文字列, 開始位置) != -1
K最近傍法として回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
日付データは日付データより前か調べる	aDate2 = aDatetime<nl>aDate < aDate2
ガンマ関数の絶対値に自然対数をとった値を算出する	math.lgamma(x)
文字列を最初の部分文字列で二分割して、前半を使う	文字列.partition(部分文字列)[0]
オリーブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
散布図に赤い左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c='r')
散布図をネイビー色として描画する	plt.scatter(データ列x, データ列y, color='navy')
データフレームから数値データを抽出する	df.select_dtypes('number')
数の小数点以下を四捨五入する	round(x)
グラフのx軸のラベルを設定する	plt.xlabel('x軸ラベル')
二つの列によって表データをグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
predicateFuncがTrueとなるイテラブルの要素を得る	itertools.takewhile(predicateFunc, iterable)
データフレームの一部のカラムの空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
アクアマリン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
データ列とリストについての散布図にrgbのダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
棒グラフをペールグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='palegreen')
散布図を△マーカーとして描く	plt.plot(データ列x, データ列y, marker='^')
データシリーズの未入力値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
右にデックの順序をローテーションする	両端キュー.rotate(1)
辞書からキーとその項目をペアとして取り出す	辞書.items()
ダークスレートブルー色としてヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
リストから重複なくn要素ランダムに選ぶ	random.sample(リスト, k=n)
横方向に二つのデータフレームをマージする	pd.merge(df, df2)
カラムのトリム平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
双方向キューのn番目に文字列を途中追加する	両端キュー.insert(n, 文字列)
タイムスタンプデータからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
オレンジレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
縦棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
ヒストグラムをブラウン色を使って描画する	plt.hist(データ列, color='brown')
実数の正接を求める	math.tan(x)
両端キューの順序を左にローテーションする	両端キュー.rotate(-1)
白色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
データフレームの選択したカラムの欠損値をその50パーセンタイルで置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
0からN未満までのベクトル	np.arange(N)
データフレームの指定した列の尖度を算出する	df['列A'].skew()
線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
折れ線グラフを半透明の点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
アルファベットの小文字を求める	string.ascii_lowercase
ライトサーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
インディゴ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
浮動小数点数の整数部	math.modf(x)[1]
変数名が抽象クラスか判定する	inspect.isabstract(識別子)
カデットブルー色でヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
データフレームの指定したカラムの標本標準偏差を求める	df['列A'].std(ddof=1)
L2ノルムを用いて正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
一方に含まれ他方に含まれない集合を求める	セット.difference(セット2)
相関係数	scipy.stats.pearsonr(数列, 数列2)
散布図をロージーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
色差別なくカラーパレットをグラフの描画で使う	sns.set(pallete='colorblind')
sepを区切りにして文字列リストをひとつの文字列にする	sep.join(文字列リスト)
ヒストグラムをライムグリーン色として描画する	plt.hist(データ列, color='limegreen')
ふたつの列からグループ化し、最大値を計算する	df.groupby(['列A', '列B'], as_index=False).max()
オブジェクトは整数クラス	int = int<nl>isinstance(obj, int)
横軸の目盛の値を変更する	plt.xticks(目盛りの値リスト)
線グラフの色をターコイズにする	plt.plot(データ列x, データ列y, color='turquoise')
整数が整数2よりも小さいか	整数 < 整数2
白色でxをプリントする	print(f'\033[37m{x}\033[0m')
縦棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
ゴールド色でヒストグラムを描画する	plt.hist(データ列, color='gold')
セットを組に変換する	tuple(セット)
変数名がモジュールかどうか調べる	inspect.ismodule(識別子)
リストとリストの散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ヒストグラムをフクシア色を用いて描画する	plt.hist(データ列, color='fuchsia')
ダークターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
散布図の菱形印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームの列名一覧であるカラムを削除する	df.drop(columns, axis=1, inplace=True)
データフレームをグループ化し、最小値を求める	df.groupby('列A').min()
ダークターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
円グラフを使ってデータ列の割合を描画する	plt.pie(データ列, startangle=90)
データフレームの選択したカラムは正規分布からどの程度、歪んでいるか確認する	df[['列A', '列B']].kurt()
データフレーム全体を小さい順にインデックスによってソートする	df.sort_index(ascending=True)
ヒストグラムを上限から下限までの上限下限で描く	plt.hist(データ列, range=(start, end))
データフレームを二つの列の値によってまとめたグループを使う	df.groupby(['列A', '列B'])
ヒストグラムの色をシャルトリューズに変更する	plt.hist(データ列, color='chartreuse')
文字列を区切り記号で分割して、文字列リストにする	文字列.split(セパレータ)
回帰直線データフレームのグループ化した散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
option: フォントの色をシスルに変更する	color = 'thistle'
配列を双方向キューに変換する	collections.deque(配列)
リストとデータ列についての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列の先頭で正規表現にASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
ヒストグラムをゴールド色を用いて描画する	plt.hist(データ列, color='gold')
Xの1０乗を欲しい	X ** 10
配列をリストを境界値としてビニングする	pd.cut(aArray, aList)
プロットの描画で濃く色調を使用する	sns.set(pallete='deep')
option: ブラウン色を用いる	color = 'brown'
データフレームを昇順にある列によって並べ、、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
文字列の先頭から部分文字列を消す	文字列.lstrip(部分文字列)
t分布型確率的近傍埋め込み法で要素次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
整数が1、もしくは2か	整数 == 1 or 整数 == 2
JSONファイルファイル名が	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
改行なしに複数の数値をプリントする	print(数値, 数値, end='')
ある列の値がx以上、y以下のデータを選ぶ	df[(x <= df['列A']) & (df['列A'] <= y)]
欠損値がある行を消してみる	df.dropna()
スカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='skyblue')
変数を定義したい	X = 0
rgbのダイアモンドマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
整数の2乗を計算する	整数 ** 2
データフレームのあるカラムは何曜日か調べる	df['列A'].dt.weekday_name
データフレームのカラムを散布図で可視化して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
文字列を後ろからコロンで分割する	文字列.rsplit(':')
横方向に三つのデータフレームをつなぐ	pd.concat([df, df2, df3], axis=1)
色付きの点線でリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
散布図を茶色色を用いて描画する	plt.scatter(データ列x, データ列y, color='brown')
棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
本日の月数を使う	datetime.datetime.today().month
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgrey')
折れ線グラフを青い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
赤色として線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
浮動小数点数の正弦の逆数を求める	math.asin(x)
線グラフをシスル色を用いて描画する	plt.plot(データ列x, データ列y, color='thistle')
表データのあるカラムの曜日が何日目か見る	df['列A'].dt.dayofweek
整数の2乗	整数 ** 2
option: フォントの色をペールグリーンに指定する	color = 'palegreen'
データフレームのカラムの各値の出現数	df[col].value_counts()
折れ線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
option: 赤を使う	color = 'red'
識別子はスタックフレームかどうか判定する	inspect.isframe(識別子)
データフレームの中に含まれる日付データと文字列の合計を調べる	df.isin([value, value2]).sum()
横棒グラフをクリムゾン色として描画する	plt.barh(データ列x, データ列y, color='crimson')
文字列中のひらがなを片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in 文字列])
イテラブルの推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
赤い下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
文字列の左側からタブを消す	文字列.lstrip('\t')
データフレームを表示するとき表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
水色でxを表示する	print(f'\033[36m{x}\033[0m')
データ列の推移を赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
日付データは日付データより後ろか	aDate > aDate2
文字列は全て数値かどうか調べる	文字列.isnumeric()
ライム色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
貝殻色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
折れ線グラフの色をフォレストグリーンに指定する	plt.plot(データ列x, データ列y, color='forestgreen')
最大値が求めたい	max(X, Y)
２つのカウンタの共通する要素を求める	aCounter & aCounter2
要素がリストの要素でないかどうか	要素 not in リスト
option: 色をホットピンクに変更する	color = 'hotpink'
リッジ回帰とロッソ回帰のハイブリットモデルを作成する	model = sklearn.linear_model.ElasticNet()
ファイルパスのフォルダ名を求める	os.path.dirname(filepath)
option: 色をライトグレーに変更する	color = 'lightgray'
折れ線グラフをライム色を使って描画する	plt.plot(データ列x, データ列y, color='lime')
最小値でデータフレームの一部のカラムの欠損値を置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
レモンシフォン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
option: 耐火レンガを用いる	color = 'firebrick'
線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームからカテゴリデータのカラム名を列挙する	df.select_dtypes('object').columns
数値でデータフレームのNaNを補う	df.fillna(x)
度数分布図を上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
英字を全部使う	string.ascii_letters
2つの変数を改行なしにプリントする	print(変数名, 変数名, end='')
ひとつでも大文字が文字列中に存在するか	any(c.isupper() for c in 文字列)
縦棒グラフを描いて、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
コーンズシルク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
配列の最小を求める	np.min(aArray)
初期値で全要素を初期化した行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
真部分集合かどうか	セット < セット2
option: エクセルシートの名前を設定する	sheet_name = ['A', 'B']
ホットピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
折れ線グラフを青い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームからランダムに一行を抽出する	df.sample()
珊瑚色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
アクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
横棒グラフをサーモン色として描画する	plt.barh(データ列x, データ列y, color='salmon')
散布図をフォレストグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
実線を用いてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
カラムの歪みを計算する	scipy.stats.skew(df['列A'], bias=False)
散布図の四角印を青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
文字列が全て数字かどうか	文字列.isdigit()
文字列の右側からタブを消す	文字列.rstrip('\t')
オブジェクトの無限なイテラブル	itertools.repeat(element)
インデントを指定して辞書をJSON形式にエンコードする	json.dumps(辞書, ensure_ascii=False, indent=n)
文字列をJSONフォーマットとして指定されたファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(文字列, f, ensure_ascii=False)
実数を浮動小数点数で除算する	x / y
スチールブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
散布図に赤い三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='r')
３つの文字列を順にプリントする	print(文字列, 文字列, 文字列)
JSONフォーマットのファイルをパースする	with open('file.json') as f:<nl><tab>data = json.load(f)
配列を両端キューにする	collections.deque(配列)
両端キューを配列から生成する	collections.deque(配列)
整数の無限なイテレータ	itertools.repeat(整数)
色付きの実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
マゼンタでxをプリントする	print(f'\033[35m{x}\033[0m')
option: 丸印を描画する	marker = 'o'
横棒グラフをオーキッド色を使って描画する	plt.barh(データ列x, データ列y, color='orchid')
nullに等しい識別子	None
option: パールバイオレットレッドにグラフの色を変更する	color = 'palevioletred'
リストとリストについての散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
マルーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
２つの値の大きい方を知りたい	max(X, Y)
データフレームのあるカラムは何秒か見る	df['列A'].dt.second
指定した列の標本分散	df['列A'].var(ddof=0)
二つのデータフレームを横向きに結合する	pd.concat([df, df2], axis=1)
option: ダークグリーンを使う	color = 'darkgreen'
タプルの値を並べ直す	sorted(タプル)
データフレームを関数の値によってまとめたグループ	df.groupby(関数)
option: マーカーを星に指定する	marker = '*'
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='teal')
データをJSON形式でファイルにダンプする	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
オーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
横棒グラフをバイオレット色で描画する	plt.barh(データ列x, データ列y, color='violet')
折れ線グラフのバツマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ヒストグラムをダークサーモン色を用いて描画する	plt.hist(データ列, color='darksalmon')
カテゴリごとにデータフレームの棒グラフを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
二つのオブジェクトが同じかどうか	obj is obj2
option: ライトスレイグレーに色を設定する	color = 'lightslategray'
データフレームから重複を破壊的に消す	df.drop_duplicates(inplace=True)
最後のコロンを用いて文字列を二分する	文字列.rpartition(':')
散布図に黒い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
配列の要素を連結して一つの文字列にする	''.join(map(str, 配列))
散布図のバツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
文字コードを指定してTSVファイルからデータフレームをロードする	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
二つのデータフレームを結合する	pd.merge(df, df2)
数のn乗	pow(x, n)
散布図をナバホホワイト色を使って描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
数列を度数分布図として描画する	plt.hist(データ列)
リストの要素の位置をエラーなく見る	リスト.index(要素) if 要素 in リスト else -1
option: アリスブルー色を用いる	color = 'aliceblue'
ファイルを文字コードtextとして書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
日付時刻データがタイムスタンプデータと同時かどうか調べる	aDatetime == aDatetime2
グリーンイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
例外なくセットから文字列を取り除く	セット.discard(文字列)
データフレームの選択したカラムのNaNを前の行の値で埋める	df[['列A', '列B']].fillna(method='ffill')
整数が偶数	整数 % 2 == 0
文字列中に非空白がある	any(not c.isspace() for c in 文字列)
ゼロ埋めした整数型の配列	np.zeros(要素数, dtype=np.int)
タプルの要素を関数に適用した結果でソートする	sorted(タプル, key=func)
双方向キューの最後に文字列を追加する	両端キュー.append(文字列)
配列のユニークな要素とその位置を調べる	u, indices = np.unique(aArray, return_index=True)
散布図をシーグリーン色として描画する	plt.scatter(データ列x, データ列y, color='seagreen')
タイムスタンプデータをn時間前にする	aDatetime - datetime.timedelta(hours=n)
ValueMapでデータフレームの選択したカラムを全て置換する	df[['列A', '列B']].replace(ValueMap)
バリーウッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
小数点数のサインの逆数	math.asin(x)
ふたつのリストの積集合を計算する	list(set(リスト).intersection(set(リスト2)))
折れ線グラフのクロスマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
部分文字列を新しい文字列に置き換える	文字列.replace(部分文字列, 置換後の文字列)
日本語フォントをグラフ中で使えるようにする	sns.set(font='IPAexGothic')
オブジェクトがクラス	isinstance(obj, クラス)
自然数個からk個取り出したときの並べ方の総数を求める	math.perm(n, k)
二つのデータフレームを異なる列をキーとして内部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
文字列をコロンで二分割して前半を見る	文字列.partition(':')[0]
部分文字列が文字列の開始位置より後に存在する	文字列.find(部分文字列, 開始位置) != -1
ミディアムターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
タン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
散布図にrgbの▲マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
複数行対応として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データ列の変遷を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
商と余りを同時に求める	divmod(x, y)
縦棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
棒グラフをカーキ色を用いて描画する	plt.bar(データ列x, データ列y, color='khaki')
数値はセットに含まれない	数 not in セット
データフレームを表示するとき小数点以下の表示精度を設定する	pd.set_option('precision', n)
散布図を赤い丸マーカーとして描く	plt.plot(データ列x, データ列y, marker='o', c='r')
ひとつでも非アスキー文字が文字列中にあるか調べる	any(not c.isascii() for c in 文字列)
日付時刻データからn日分減らす	aDatetime - datetime.timedelta(days=n)
日付データにn秒を加える	aDate + datetime.timedelta(seconds=n)
ベクトルの要素ごとのアダマール積	np.multiply(aArray, aArray2)
スピアマンの相関係数	scipy.stats.spearmanr(df['列A'], df['列B'])
パーセプトロンでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
日付データが木曜日	aDate.weekday() == 3
文字列はセットに含まれないか	文字列 not in セット
データ列を閾値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
データフレームから数値データの列だけ抽出する	df.select_dtypes('number')
データフレームの選択したカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
ポイントマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='.')
option: ディムグレーにフォントの色をする	color = 'dimgray'
線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
データフレームのn行目まで抽出する	df[:n]
スプリンググリーンにヒストグラムの色を変更する	plt.hist(データ列, color='springgreen')
グラフをプレゼンにする	sns.set(context='talk')
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategrey')
ペールグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='palegreen')
option: グラフの色をライトイエローに指定する	color = 'lightyellow'
入力ストリームからn文字、読み込む	f.read(n)
部分文字列が文字列の指定した位置以降に含まれるかどうか調べる	文字列.find(部分文字列, 開始位置) != -1
配列とリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
表計算ファイルから全シートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
縦棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
線グラフの色をコーンズシルクに指定する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームをグループ化し平均値を求める	df.groupby('列A').mean()
ダークオリーブグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
条件に応じて、動作を変えたい	if 条件式:<nl><tab>print('真のとき')  # 直して<nl>else:<nl><tab>print('そうでなければ')  # 直して
表データの列の名前を変更する	df.rename(columns={'列A': '列a', '列B': '列b'})
option: 列方向に処理する	axis = 0
イテラブルの要素を連結してひとつの文字列にする	''.join(map(str, イテラブル))
赤いクロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
縦棒グラフを描画し、、左寄せする	plt.bar(ラベル列, データ列, align='edge')
コーンズシルクにヒストグラムの色を設定する	plt.hist(データ列, color='cornsilk')
リストからランダムに1個選んでリストにする	random.choice(リスト)
マルーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
文字列中にひとつもアスキー文字が含まれない	any(not c.isascii() for c in 文字列)
棒グラフをシスル色を用いて描画する	plt.bar(データ列x, データ列y, color='thistle')
option: 区切り記号をコロンにする	sep = ':'
y座標の目盛りを対数に変更する	plt.yscale('log')
辞書をJSON形式で指定されたファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
日付データからn秒を減らす	aDate - datetime.timedelta(seconds=n)
option: ライトグレーにフォントの色を設定する	color = 'lightgray'
ロージーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
xとyを改行なしに順にプリントする	print(x, y, end='')
リストとイテラブルについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
データシリーズの不偏分散を計算する	ds.var(ddof=1)
シエナ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
カラムのトリム分散を算出する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
文字列を最後からカンマで分割する	文字列.rsplit(',')
option: ピンクにグラフの色を設定する	color = 'pink'
折れ線グラフの色をラベンダーに変更する	plt.plot(データ列x, データ列y, color='lavender')
両端キューの要素をインプレースに逆に並べ直す	両端キュー.reverse()
option: ミディアムスレートブルーを使う	color = 'mediumslateblue'
折れ線グラフの色をターコイズに変更する	plt.plot(データ列x, データ列y, color='turquoise')
五乗が書きたい	X ** 5
整数型のゼロ埋めされた行列を作る	np.zeros(要素数, dtype=np.int)
散布図の右三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
折れ線グラフのダイアモンド印の大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
リストの要素を連結してひとつの文字列にする	''.join(map(str, リスト))
線グラフを半透明の実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームの指定したカラムのNaNを最小値にセットする	df['列A'].fillna(df['列A'].min())
折れ線グラフの星印を黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
オブジェクトは辞書型か調べる	dict = int<nl>isinstance(obj, dict)
折れ線グラフをシエナ色を用いて描画する	plt.plot(データ列x, データ列y, color='sienna')
画像ファイルとしてグラフを保存する	plt.savefig('foo.png')
エラーなく文字列の先頭から部分文字列を除去する	文字列.removeprefix(部分文字列)
リストのn番目のを求める	リスト[n]
点線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dotted')
ヒストグラムをダークカーキ色を用いて描画する	plt.hist(データ列, color='darkkhaki')
シアンでxをプリントする	print(f'\033[36m{x}\033[0m')
縦棒グラフをナバホホワイト色を使って描画する	plt.bar(データ列x, データ列y, color='navajowhite')
ダークゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
日付時刻データをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
グラフの中の縦軸に軸名を付ける	plt.ylabel('y軸ラベル')
双方向キューから最初の整数を削除する	両端キュー.remove(整数)
黒いポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
乱数で要素を埋めた配列を作る	np.random.random(N)
データをインデントを指定してJSON文字列に変換する	json.dumps(データ, ensure_ascii=False, indent=n)
ヒストグラムをマゼンタ色として描画する	plt.hist(データ列, color='magenta')
データシリーズの年度を求める	ds.dt.year
二つの文字列は同じでないか確認する	文字列 != 文字列2
データフレームの指定した列の欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
ティール色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
グラフの描画で淡く色を用いる	sns.set(pallete='muted')
データフレームのカラムのユニークな要素数を見る	df[col].nunique()
縦棒グラフをサーモン色として描画する	plt.bar(データ列x, データ列y, color='salmon')
を大きくする	変数 += 整数
マッピングで文字列をカウントする	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
プロットの使途をポスターに設定する	sns.set(context='poster')
ヒストグラムを描いて、ビンの数を変更する	plt.hist(データ列, bins=区関数)
文字列がリストにある	文字列 in リスト
折れ線グラフのバツ印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ファイルを文字列の示すエンコーディングを用いてオープンする]	s = 'utf-8'<nl>open(filepath, encoding=s)
option: ダイアモンド印を加える	marker = 'D'
わり算の余りの計算が書きたい	X % Y
option: マーカーを左三角に変える	marker = '<'
作画のx軸とy軸の比率を等しくする	plt.axis('equals')
データフレームの一部のカラムの欠損値を最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
全要素を０で初期化した符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
option: フクシアにフォントの色を設定する	color = 'fuchsia'
データシリーズの中に含まれる文字列の合計を求める	ds.isin([value]).sum()
辞書の値の一覧を得る	list(辞書.values())
二つのセットが互いに素	セット.isdisjoint(セット2)
円グラフの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
折れ線プロットのラベルをする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームを2つのカラムの値毎にグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
シエナ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
データフレームのカラムの欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
整数が1もしくは2かどうか調べる	整数 == 1 or 整数 == 2
シエナにヒストグラムの色を指定する	plt.hist(データ列, color='sienna')
縦棒グラフをアリスブルー色を使って描画する	plt.bar(データ列x, データ列y, color='aliceblue')
option: オーキッドを使う	color = 'orchid'
option: 濃いシアンを使う	color = 'darkcyan'
日付時刻データが火曜日かどうか調べる	aDatetime.weekday() == 1
データフレームを関数の値によって集約して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
ヒストグラムをインディアンレッド色を使って描画する	plt.hist(データ列, color='indianred')
未初期化の行列	np.empty(要素数, dtype=np.int)
黒いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
変数の値を整数分の1にする	変数 //= 整数
赤い星マーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
分子と分母から分数を新規生成する	fractions.Fraction(分子, 分母)
xの小数点以下'5'桁までを出力する	':.5f' = ':.3f'<nl>print(':.5f'.format(x))
あるカラムの値がx以上、y以下の行を抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
部分文字列を置換する	文字列.replace(部分文字列, 置換後の文字列)
行列の最大値	np.max(aArray)
ヒストグラムをミディアムスプリンググリーン色を用いて描画する	plt.hist(データ列, color='mediumspringgreen')
タイムスタンプデータが日曜日か	aDatetime.weekday() == 6
option: インディゴを用いる	color = 'indigo'
option: フォントの色をグリーンイエローに指定する	color = 'greenyellow'
XからYを引いた結果を求めたい	X - Y
線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: グラフの線のスタイルを点線に設定する	linestyle = 'dotted'
データ列をn個に分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
青紫にヒストグラムの色を設定する	plt.hist(データ列, color='violet')
縦棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
option: パパイヤウィップを用いる	color = 'papayawhip'
文字列中に大文字がないかどうか	any(not c.isupper() for c in 文字列)
未初期化の行列を作る	np.empty(要素数, dtype=np.int)
割り算を切り上げたい	(X + Y - 1) // Y
ゼロ埋めされたブール型の配列を作る	np.zeros(要素数, dtype=np.int32)
option: ディムグレー色を用いる	color = 'dimgray'
リストと数列の散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ライム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
パターンにASCII限定として文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
イテラブルの変遷を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
日付時刻データからn秒分減算する	aDatetime - datetime.timedelta(seconds=n)
列の全順列	itertools.permutations(iterable)
文字列の左端から空白を取り除く	文字列.lstrip()
リストを順に表示する	print(*リスト)
小数点数以下の最大の整数	math.floor(x)
二つのオブジェクトが等しいか	obj == obj2
ヒストグラムの色をパールゴールデンロッドに指定する	plt.hist(データ列, color='palegoldenrod')
双方向キューに文字列をプッシュする	両端キュー.append(文字列)
ファイルパスから追加ストリームを開き]、fとする	f = open(filepath, mode='a')
２つのベクトルを横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
指定したカラムの平均を求める	df['列A'].mean()
カウンタ	collections.Counter()
xを記号にする	x = sympy.Symbol('x')
折れ線グラフの色をフクシアに指定する	plt.plot(データ列x, データ列y, color='fuchsia')
データシリーズの不偏標準偏差を計算する	ds.std()
option: ダークブルーにフォントの色を変更する	color = 'darkblue'
カラムのモードを求める	mode, count = scipy.stats.mode(df['列A'])
ラベンダー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
ライムグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
データフレームを２つの列をキーにして降順に破壊的に並べる	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
入力から２つの整数を読む	A, B = map(int, input().split())
データフレームの選択したカラムの欠損値をxに指定する	df[['列A', '列B']].fillna(x)
ホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームのカラムの尖度を算出する	scipy.stats.kurtosis(df['列A'], bias=False)
ファイル入力からJSONをロードする	json.load(ファイル入力)
ヒストグラムをホワイト色で描画する	plt.hist(データ列, color='white')
凡例をグラフの表示する	plt.legend()
２つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
イテラブルとリストについて散布図を描画してその大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムの色をライトスカイブルーに指定する	plt.hist(データ列, color='lightskyblue')
点線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: フォントの色をミスティローズに変更する	color = 'mistyrose'
セットからエラーなく項を除く	セット.discard(要素)
ミディアムバイオレットレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
プロットを色差別なくする	sns.set(pallete='colorblind')
識別子はスタックフレームか調べる	inspect.isframe(識別子)
横棒グラフをミディアムブルー色を使って描画する	plt.barh(データ列x, データ列y, color='mediumblue')
イテラブルとイテラブルについての散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ゼロ埋めされた整数型の配列を作る	np.zeros(要素数, dtype=np.int)
データフレームの相関行列をスピアマンを用いて求める	df.corr(method='spearman')
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
文字列の両端から空白を取り除く	文字列.strip('\t')
円グラフを正円にする	plt.axis('equals')
データフレームの散布図をグループ化して横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
カウンタを高頻度方からリストとして得る	aCounter.most_common()
上限を指定して両端キュー	collections.deque(maxlen=最大長)
レベッカパープルにヒストグラムの色を設定する	plt.hist(データ列, color='rebeccapurple')
データフレームの数値を全部、丸める	df.round()
最大値・最小値の範囲で一様な疑似乱数	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
折れ線グラフをハニーデュー色を用いて描画する	plt.plot(データ列x, データ列y, color='honeydew')
整数の三分の1を計算する	整数 / 3
折れ線グラフのダイアモンド印を赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
option: フォントの色をロージーブラウンに設定する	color = 'rosybrown'
散布図をブラック色を用いて描画する	plt.scatter(データ列x, データ列y, color='black')
コマンドラインフラグの状態を知る	sys.flags
文字列の示すエンコーディングで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding=s)
整数が整数か調べる	x.is_integer()
散布図のポイント印を青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
ベージュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
カテゴリ別に並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
整数が3の倍数	整数 % 3 == 0
変数について数式の積分を計算する	sympy.integrate(数式, 変数)
Pythonのバージョンを知る	if sys.version_info >= (3, 4):<nl><tab>print(sys.version_info)
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgrey')
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
最初の要素を両端キューから取り除く	両端キュー.remove(要素)
データフレームを二つの列によって並べて、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
入力ストリームを全部、読み込む	f.read()
データフレームをあるカラムをキーにして昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
棒グラフを紺色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
リストの要素を入れ替える	リスト[x], リスト[y] = リスト[y], リスト[x]
ヒストグラムの色をオールドレースにセットする	plt.hist(データ列, color='oldlace')
チップのデータセットをデータフレームとしてロードする	df = sns.load_dataset('tips')
ファイルを読み込みモードを用いてオープンして]、fとする	f = open(filepath, mode='r')
折れ線グラフの色をピンクにセットする	plt.plot(データ列x, データ列y, color='pink')
棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
データフレームの選択したカラムの未入力値をxで埋める	df[['列A', '列B']].fillna(x)
小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
100行をデータフレームからランダムに取り出す	df.sample(100)
ヒストグラムをダークスレートブルー色を用いて描画する	plt.hist(データ列, color='darkslateblue')
クリムゾン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
ロージーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
改行せずxの出力を行う	print(x, end='')
散布図の下三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
あるカラムの値がxに等しく、かつ別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
ダーク・スラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
双方向キューの要素をローテーションする	両端キュー.rotate(1)
識別子がジェネレータ関数か確認する	inspect.isgeneratorfunction(識別子)
全要素を0で初期化したベクトル	np.zeros(要素数)
文字が平仮名かどうかテストする	('ぁ' <= 文字 <= 'ん')
イテラブルと配列についての散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
option: フォントの色を淡いピンク色に設定する	color = 'lightpink'
グラフの描画で色差別なくパレットを用いる	sns.set(pallete='colorblind')
option: 改行しないように設定する	end = ''
散布図の丸マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ビン数nとしてデータ列をビンニングし、、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームのカラムの歪度	df['列A'].kurt()
要素がタプルに含まれるかどうか判定する	要素 in タプル
オールドレース色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
二つの整数の最大公約数を計算する	math.gcd(n, n2)
表をグループ化し、あるカラムに対し平均値を求める	df.groupby('列A')['列B'].mean()
折れ線グラフの線の種類を点線に変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
要素の無限列	itertools.repeat(要素)
データシリーズの中にがあるか	ds.isin([value])
アンサンブル学習として回帰分析を行う	sklearn.ensemble.VotingRegressor()
太字にする	f'\033[1m{x}\033[0m'
イテラブルから重複なくランダムにn要素選んでリスト化する	random.sample(イテラブル, k=n)
文字列を両端キューにプッシュする	両端キュー.append(文字列)
散布図の星マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
option: ▲マーカーを描画する	marker = '^'
文字列中の文字を数える	文字列.count(文字)
タプルをリストにする	list(タプル)
空の勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
ライトスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
折れ線グラフの丸マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
パウダーブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
ストリームに文字列を書き込む	s = ''<nl>f.write(s)
文字列を最後のカンマで二分し、、前半を見る	文字列.rpartition(',')[0]
整数はセットのメンバーでない	数 not in セット
昇順にある列を用いてデータフレームを並べて、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
主成分分析を用いて整数次元に削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
option: フォントの色をオレンジレッドに指定する	color = 'orangered'
二つの値の大きい方が知りたい	max(X, Y)
両端キューを要素を出す	両端キュー.popleft()
横棒グラフをライトイエロー色を使って描画する	plt.barh(データ列x, データ列y, color='lightyellow')
データフレームをある列の値でグループ分けして、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
文字列をカンマで分割して、文字列リストにする	文字列.split(',')
散布図を▲マーカーで描画する	plt.scatter(データ列x, データ列y, marker='^')
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: マーカーを△に変更する	marker = '^'
ヒストグラムをミディアムスプリンググリーン色として描画する	plt.hist(データ列, color='mediumspringgreen')
浮動小数点数が整数か	x.is_integer()
要素の無限なイテラブル	itertools.repeat(要素)
線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
文字列の右側から改行を除く	文字列.rstrip('\n')
あるカラムの未入力値を50パーセンタイルに設定する	df['列A'].fillna(df['列A'].median())
パターンに文字列全体をマッチさせる	re.fullmatch(pattern, s)
オブジェクトはメソッドかどうか確認する	inspect.ismethod(オブジェクト)
二つの列を組み合わせてグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
リストをダミー変数にする	pd.get_dummies(リスト)
文字列をセパレータで二分し、後半を見る	文字列.partition(セパレータ)[-1]
見やすいグラフを使う準備をする	import seaborn as sns
rgbの右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: シスルを使う	color = 'thistle'
y軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
マッピングからエラーなくキーの値	辞書.get(キー, 見つからない場合の値)
n個の集まりからk個選ぶ方法	math.comb(n, k)
オレンジレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
行列間の要素ごとの最大公約数を調べる	np.gcd(aArray, aArray2)
要素が辞書の値として含まれているか確認する	element in 辞書.values()
二つの辞書をネストする	collections.ChainMap(aDict, aDict2)
横に並べて配列を度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
ティール色のヒストグラムを描画する	plt.hist(データ列, color='teal')
option: アイボリーにフォントの色を変更する	color = 'ivory'
データシリーズの中央値を算出する	ds.median()
リストを３つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
多次元尺度構成法で多次元データを項次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
ダークオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkorchid')
縦棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
セットから全要素を除く	セット.clear()
カテゴリ別で色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
配列を変更不能なセットにする	frozenset(配列)
数式の数値を計算する	float(数式)
ラジアンの角度を算出する	math.degrees(x)
セットからエラーなく整数を除く	セット.discard(数)
option: フォントの色をオリーブに変更する	color = 'olive'
実数のn乗の数剰余	pow(x, n, y)
貝殻色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
横棒グラフをアイボリー色を使って描画する	plt.barh(データ列x, データ列y, color='ivory')
整数が整数2より小さいか確認する	整数 < 整数2
ダークカーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
ハニーデュー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
サーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
非数値データを連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
option: スプリンググリーンにグラフの色を指定する	color = 'springgreen'
数列のイミュータブルな集合を使う	frozenset(数列)
リストを縦棒グラフにする	plt.bar(ラベル列, データ列)
キーワード引数で辞書に更新する	辞書.update(**kwargs)
日付時刻データが日付時刻データより遅いか	aDatetime > aDatetime2
ファイルを開いて]、追加ストリームを使う	'a' = 'a'<nl>open(filepath, mode='a')
ふたつのセットは互いに素	セット.isdisjoint(セット2)
ある列のカテゴリで集計し、それぞれの標準偏差を計算する	df.groupby('列A').std()
リストが空でない	len(リスト) != 0
マップのキーを要素に変更する	辞書[キー] = element
上限指定をしたデータフレームのカラムの分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
列を等量でn個に分割する	pd.qcut(ds, n)
N回、ループさせたい	for i in range(N):<nl><tab>print(i)  # iは0から始まる
折れ線グラフの色をミディアムブルーに指定する	plt.plot(データ列x, データ列y, color='mediumblue')
列名を指定して２つのデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
スノー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
縦棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
ファイルパスを文字コードtextでオープンする]	text = 'utf-8'<nl>open(filepath, encoding=text)
散布図に黒い▼印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図のマーカーをダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
データフレームを関数でグループ化し、統計量を求める	df.groupby(関数).describe()
ブラックにヒストグラムの色を設定する	plt.hist(データ列, color='black')
リストを中央値でビニングする	pd.qcut(aList, 2)
文字列の右端がかどうか調べる	文字列.endswith(部分文字列)
predicateFuncが真となるリストの要素	itertools.takewhile(predicateFunc, iterable)
ファイル全体を行分割して読み込む	f.readlines()
文字列中に部分文字列がいくつかあるか調べる	文字列.count(部分文字列)
option: フォントの色をイエローグリーンに設定する	color = 'yellowgreen'
符号付きで整数をバイト列にする	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big', signed=True)
リストから1個ランダムに選ぶ	random.choice(リスト)
オレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
データフレームの選択した列の値をValueMapで一度に置換する	df[['列A', '列B']].replace(ValueMap)
辞書に項目名が存在するとき、処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
線グラフを実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
色付きの破線を用いて配列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
整数が整数2より大きいか確認する	整数 > 整数2
option: グラフの色をダークグレーにする	color = 'darkgray'
棒グラフをグリーンイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='greenyellow')
xが真か	bool(x)
キーがマップに存在するかどうか調べる	キー in 辞書
option: ダークスラテグレー色を用いる	color = 'darkslategray'
KNNで回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
データフレームの選択した列の分散	df[['列A', '列B']].var()
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
横棒グラフをプロットして、下寄せする	plt.barh(ラベル列, データ列, align='edge')
散布図をダークバイオレット色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
データフレームの末尾n行を選択する	df.tail(n)
ケンドール相関係数を使ってデータフレームの相関行列を算出する	df.corr(method='kendall')
ライトスレイグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
ミントクリーム色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
辞書の項目名を列挙する	list(辞書)
目盛り線	plt.grid(linewidth=3.0)
2つの計算結果をプリントする	print(式, 式)
空白を使う	' '
リストの最後から要素を除く	リスト.pop()
アクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データシリーズの中に文字列と日付データがいくつあるかカウントする	ds.isin([value, value2]).sum()
整数がn回続くイテレータ	itertools.repeat(整数, n)
データフレームの選択したカラムの中に含まれる文字列の合計を求める	df[['列A', '列B']].isin([value]).sum()
nからn2までのひとつ飛ばしの整数列を作る	list(range(n, n2+1, 2))
線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの選択したカラムの空文字を欠損値に変換しドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
辞書に項目名があるとき処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
リストの全ての要素を消す	リスト.clear()
日付データが木曜日かどうか	aDate.weekday() == 3
カデットブルーにヒストグラムの色を変更する	plt.hist(データ列, color='cadetblue')
ロージーブラウン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データシリーズのタイムゾーンを指定する	ds.tz_convert('Asia/Tokyo')
文字列を最初のカンマで分割し、、前の方を見る	文字列.partition(',')[0]
文字列を部分文字列で分割して、文字列リストにする	文字列.split(部分文字列)
縦棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
青い点線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
プログラムの実行を正しく終える	sys.exit(0)
行列の要素数を調べる	aArray.size
ヒストグラムをダークオレンジ色を使って描画する	plt.hist(データ列, color='darkorange')
最小値でデータフレームの欠損値を埋める	df.fillna(df.min())
option: コーラル色を用いる	color = 'coral'
カレントワーキングディレクトリ	os.getcwd()
方程式として数式の変数の解を算出する	sympy.solve(数式, 変数)
黒い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
度数分布図を描画し合計を1にする	plt.hist(データ列, density=True)
サポートベクター回帰モデルを作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図の印の色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
小数点数の指数部を求める	math.frexp(x)[1]
ヒストグラムの色をオレンジに指定する	plt.hist(データ列, color='orange')
列から計数器を用意する	collections.Counter(iterable)
ヒストグラムの色をオリーブにする	plt.hist(データ列, color='olive')
整数が整数2以下、または、n3以上	整数 <= 整数2 or 整数 >= n3
セットを空集合にする	セット.clear()
option: ダークサーモン色を用いる	color = 'darksalmon'
指定したカラムを千の位で丸めて整数型にする	df['列A'].round(-3).astype(int)
散布図をミディアムブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
分割数nを用いてリストをビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
option: リネンにグラフの色をセットする	color = 'linen'
黄色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
n進文字列をバイナリにする	int(文字列, n).to_bytes(length=バイト数, byteorder='big')
散布図をデピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='deeppink')
数値時刻のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
データシリーズの未入力値を直後の値で補う	ds.fillna(method='bfill')
符号付き整数の最大値	sys.maxsize
オブジェクトのバイトサイズを知る	sys.getsizeof(オブジェクト)
ランタイムの再帰の最大回数	sys.getrecursionlimit()
文字列の両端からタブを除く	文字列.strip('\t')
双方向キューの末尾にリストの要素を追加する	両端キュー.extend(リスト)
ヒストグラムの色をスノーにセットする	plt.hist(データ列, color='snow')
双方向キューの最大長	両端キュー.maxlen
アクア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
最初のカテゴリーを除いてデータフレームのある列をベクトルにする	pd.get_dummies(df['列A'], drop_first=True)
文字列中の指定された文字の登場回数	文字列.count(文字)
新しいリッジ回帰モデルを準備する	正則化項 = 0.1<nl>model = sklearn.linear_model.Ridge(alpha=正則化項)
淡いピンク色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
ヒストグラムの色をスレートブルーに変更する	plt.hist(データ列, color='slateblue')
ハニーデューにヒストグラムの色をセットする	plt.hist(データ列, color='honeydew')
指定したカラムの文字列を未入力値に変換する	df['列A'].replace(値, np.nan)
データフレームの列の一覧を調べる	df.info()
二つのカウンタのいずれかに含まれる要素を計算する	aCounter | aCounter2
カウンタのKトップを列挙する	aCounter.most_common(k)
数字を全て見る	string.digits
部分文字列を文字列の開始位置から終了位置まで探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
今日が何年か知る	datetime.datetime.today().year
辞書の項目名を要素に設定する	辞書[キー] = element
データ列の変遷を青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
円プロットにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
小数点以下の表示精度を設定する	pd.set_option('precision', n)
タプルを小さい順に並べる	sorted(タプル, reverse=True)
option: エンコーディングをUTF8に指定する	encoding = 'utf-8'
濃いシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ミディアムスプリンググリーンにヒストグラムの色を指定する	plt.hist(データ列, color='mediumspringgreen')
表データのあるカラムが何月か見る	df['列A'].dt.month
配列のユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
横棒グラフをプロットして、バーの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
二次元リストの転置行列を使う	[list(x) for x in list(zip(*aList))]
折れ線グラフに赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
２つの文字列を順にプリントする	print(文字列, 文字列)
カウンタ同士で共通部分演算する	aCounter & aCounter2
nは整数かテストする	整数 == 整数2
散布図の星マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
散布図をrgbの大バツマーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: ブラウン色を使う	color = 'brown'
配列のKurtosisを求める	scipy.stats.kurtosis(配列, bias=False)
option: 文字列を区切りで使用する	sep = s
作画で使うフォントを指定する	sns.set(font=フォント名)
折れ線グラフの菱形マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
ライトサーモン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
赤色でxを出力する	print(f'\033[31m{x}\033[0m')
散布図をデピンク色として描画する	plt.scatter(データ列x, データ列y, color='deeppink')
縦棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
文字列を空白で分割して、文字列リストに変換する	文字列.split()
文字列をASCII限定としてパターンで区切る	re.split(pattern, s, flags=re.ASCI)
要素がリストに含まれるか	要素 in リスト
データフレームの列概要	df.info()
ふたつのセットが共通の要素を持たないかどうか調べる	セット.isdisjoint(セット2)
散布図をダークグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
外れ値を除いたデータフレームのカラムの分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
整数の十六進表記	hex(整数)
データフレームから列を２つ選択する	df[['列A', '列B']]
データフレームの選択したカラムはどの程度、正規分布から歪んでいるか調べる	df[['列A', '列B']].kurt()
データフレームを二つの列によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
2つのカラムの値によってデータフレームをグループ分けする	df.groupby(['列A', '列B'])
数字を全部見る	string.digits
行列の値を求める	aArray[行番号, 列番号]
データシリーズの中にいくつ未入力値があるか求める	ds.isna().sum()
stringをインポートする	import string
整数がリストのどれかか	aList = [0, 1, 2]<nl>整数 in aList
線グラフの色をゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='goldenrod')
行列の列ごとの最小を求める	np.min(aArray, axis=0)
データフレームを指定した列の値毎にグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
CSVファイルをn番目の列を行として読む	pd.read_csv('file.csv', index_col=n)
option: パウダーブルーにフォントの色を指定する	color = 'powderblue'
線グラフの色をネイビーに指定する	plt.plot(データ列x, データ列y, color='navy')
文字列の無限列を使う	itertools.repeat(文字列)
グラフをポスター用に指定する	sns.set(context='poster')
シートの名前を指定してエクセルから読む	pd.read_excel('file.xlsx', sheet_name=シート名)
データシリーズの値をまとめてValueMapで置換する	ds.replace(ValueMap)
指定した列の値で集計し、それぞれの個数を求める	df.groupby('列A').count()
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgray')
データフレームの中のカラムをn個に等間隔でビン分割する	pd.cut(df[col], n)
配列とリストについて散布図を描画し、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
列のエポック秒をタイムスタンプに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
２つの文字列をケースを無視して比較する	文字列.casefold() < 文字列2.casefold()
アルファベットから１文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
グラフの描画で明るくカラーパレットを使用する	sns.set(pallete='bright')
標準入力から改行なしで1行分読む	sys.stdin.readline().rstrip()
リストとリストの散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
option: アンティークホワイトに色を指定する	color = 'antiquewhite'
両端キュー中の要素のインデックスを使う	両端キュー.index(要素)
新しいロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
複数の列でグループ化し最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
キューは空かどうか確認する	len(両端キュー) == 0
浮動小数点数を文字列に変換する	str(x)
最初のカテゴリーを除いてデータフレームのある列をダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
イテラブルをぐるぐると繰り返す	itertools.cycle(iterable)
ある列の値毎の標準偏差	df.groupby('列A').std()
配列の和を計算する	aArray + aArray2
タプルの最後のn要素を除く	タプル[:-n]
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
option: フォントの色をダークスレートブルーに指定する	color = 'darkslateblue'
スカイブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
既存のファイルをBOM付きとして追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ダークグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームの選択したカラムの未入力値を平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
セットにリストの要素を追加する	セット.update(リスト)
破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: 色をダークオーキッドに設定する	color = 'darkorchid'
カウンタからゼロ出現回数を取り除く	+aCounter
ヒストグラムの色をトマトに変更する	plt.hist(データ列, color='tomato')
三つの文字列を順に表示する	print(文字列, 文字列, 文字列)
option: スカイブルーにグラフの色を指定する	color = 'skyblue'
ディムグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
xとyをスラッシュで区切って表示する	print(x, y, sep='/')
タイムスタンプデータが日曜日か確認する	aDatetime.weekday() == 6
整数が整数2より小さいかどうか	整数 < 整数2
nからn2の範囲で	range(n, n2)
折れ線グラフのラベルをセットする	plt.plot(データ列x, データ列y, label='ラベル')
スチールブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
二つの集合の差集合を求める	セット.difference(セット2)
散布図をカーキ色として描画する	plt.scatter(データ列x, データ列y, color='khaki')
説明変数と目的変数を用いて分類モデルを学習する	model.fit(説明変数, 目的変数)
黒いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='k')
線グラフの色をイエローグリーンに変更する	plt.plot(データ列x, データ列y, color='yellowgreen')
表データから同じ内容の行を破壊的に取り除く	df.drop_duplicates(inplace=True)
データフレームのインデックスを振り直す	df.reset_index()
青い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
表データをグループ化し、最小値を求める	df.groupby('列A').min()
option: スノーを使う	color = 'snow'
双方向キューの中に整数が存在する	整数 in 両端キュー
縦棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
文字が漢字	('\u4E00' <= 文字 <= '\u9FD0')
データフレームのあるカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
データフレームの選択した列の中に存在する文字列と文字列の数を数える	df[['列A', '列B']].isin([value, value2]).sum()
コーンフラワーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
実行時の標準入力の入力元がターミナル	os.isatty(sys.stdin.fileno())
縦棒グラフをライトスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
オブジェクトが整数クラスかどうかテストする	int = int<nl>isinstance(obj, int)
グラフの描画で暗くカラーパレットを用いる	sns.set(pallete='dark')
配列を四分位数ごとに分割する	pd.qcut(aArray, 4)
折れ線グラフを青い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
リストとイテラブルについて散布図を描画し、、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
異なる列をキーとしてデータフレームを内部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
浮動小数点数のサイン	math.sin(x)
双曲線正弦の逆数	math.asinh(x)
シルバーにヒストグラムの色を設定する	plt.hist(データ列, color='silver')
データフレームの指定したカラムは正規分布からどの程度、尖っているか見る	df['列A'].skew()
数列とイテラブルについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図に赤い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
最初のコマンド引数を知る	sys.argv[1]
データ列の変遷を赤い点線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
濃い青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
文字列から指定した文字を全て除去する	文字列.replace(文字, '')
横軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
でデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
option: マーカーを菱形に指定する	marker = 'D'
データシリーズの年度を使う	ds.dt.year
データフレームの選択したカラムの平均	df[['列A', '列B']].mean()
いつまでも文字列が繰り返すイテラブル	itertools.repeat(element)
散布図をダークカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
配列をn個にビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
線グラフをアイボリー色として描画する	plt.plot(データ列x, データ列y, color='ivory')
ベクトルのユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
リストが空でないかどうか	len(リスト) != 0
リストと数列の散布図を描画してマーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
Xの５乗を欲しい	X ** 5
その最小値でデータシリーズのNaNを埋める	ds.fillna(ds.min())
ヒストグラムをペールグリーン色として描画する	plt.hist(データ列, color='palegreen')
配列とリストについて散布図を描画し、、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図のバツ印を青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレーム中の欠損値をドロップし、みる	df.dropna()
ライトスカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
分類結果の正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ヒストグラムをプラム色として描画する	plt.hist(データ列, color='plum')
xが0に近づく時の数式の極限値を計算する	sympy.limit(数式, [|変数]x, 0)
あるカラムの値がx以上の行を抽出する	df[df['列A'] >= x]
カーネル密度推定プロット描画でを用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
オブジェクトは浮動小数点数型か調べる	float = int<nl>isinstance(obj, float)
BOM付きでデータフレームをCSVファイルに保存する	df.to_csv('file.csv', encoding='utf_8_sig')
星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
縦棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
n個に列を等間隔で分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームの指定した列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
リストとイテラブルを連結する	itertools.chain(iterable, iterable2)
クラス分類をガウス過程として行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
ダークスラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
ガウス過程分類器を新規作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームのNaNを中央値に設定する	df.fillna(df.median())
プロットの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
行列の行ごとの標準偏差を求める	np.std(aArray, axis=1)
データフレームの先頭の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
kを底とする実数の対数を求める	math.log(x, k)
表データのある列の値がxより小さい行を選択する	df[df['列A'] < x]
ラベンダーブラッシュ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
option: 丸印を加える	marker = 'o'
辞書で文字列の数を数える	if 文字列 in 辞書:<nl><tab>辞書[文字列] += 1<nl>else:<nl><tab>辞書[文字列] = 1
やわらかい青色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
浮動小数点数を小数点以下で丸める	round(x, n)
リストと配列について散布図を描画して、菱形マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
文字列をセパレータによって分割して、列挙する	文字列.split(セパレータ)
識別子がビルトインか	inspect.isbuiltin(識別子)
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
数列とリストの散布図を描画して、上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフでデータフレームの列を可視化する	plt.plot(df[column], df[column])
データフレームの中に日付データがある	df.isin([value])
データフレームの選択したカラムのSkewness	df[['列A', '列B']].skew()
ライトコーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
整数が一桁の正の数	0 <= 整数 <= 9
データフレームのカラムの第三四分位数	df['列A'].quantile(0.75)
yが0に近づく場合の数式の極限値を計算する	sympy.limit(数式, y, 0)
環境がLinuxか調べる	sys.platform.startswith('linux')
イテラブルと配列についての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
シーケンス自身を2回あわせた直積	itertools.product(iterable, repeat=2)
折れ線グラフをオーキッド色として描画する	plt.plot(データ列x, データ列y, color='orchid')
データフレームの選択したカラムの中に文字列と文字列がいくつ含まれるか数える	df[['列A', '列B']].isin([value, value2]).sum()
行数をnに増やす	pd.set_option('display.max_rows', n)
deqの右の要素	両端キュー[-1]
ピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
データフレームの列の中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
option: ライトスレイグレーにフォントの色を設定する	color = 'lightslategrey'
外れ値を除いた配列の分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
ヒストグラムと勾配ブースティングを使ってクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
数式の変数をある数式で置き換える	数式.subs(変数, 数式2)
棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgray')
縦棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
ヒストグラムをパープル色として描画する	plt.hist(データ列, color='purple')
改行なしにxとyを表示する	print(x, y, end='')
ロバストな線形分類モデルを新規作成する	model = sklearn.linear_model.HuberClassifier()
option: 色をアンティークホワイトにする	color = 'antiquewhite'
空のマップがほしい	辞書 = {}
列を累積したイテラブル	itertools.accumulate(iterable, operator.mul)
マゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='magenta')
散布図に赤いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='r')
ラインを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
オブジェクトが関数か	callable(obj)
データフレームの選択した列の中に文字列と文字列がいくつあるかカウントする	df[['列A', '列B']].isin([value, value2]).sum()
フクシア色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
ライムグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
マッピングからキーで指定した項目を取り除く	辞書.pop(キー)
option: ディムグレーを用いる	color = 'dimgray'
データフレームを2つの列の値によってグループ化し、要約統計量を求める	df.groupby(['列A', '列B']).describe()
レベッカパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
グラフの中のy軸に軸ラベルを付ける	plt.ylabel('y軸ラベル')
データフレームの指定したカラムの記述統計量を見る	df['列A'].describe()
ベクトルを変形する	aArray.reshape(行数, 列数)
n番目の列を行としてCSVファイルを読み込む	pd.read_csv('file.csv', index_col=n)
条件が三つとも同時に成り立つ	条件 and 条件2 and 条件3
文字列を最初の部分文字列で二分して、残りを使う	文字列.partition(部分文字列)[-1]
option: フォントの色をダークシアグリーンに変更する	color = 'darkseagreen'
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
ヒストグラムをティール色として描画する	plt.hist(データ列, color='teal')
両端キューの先頭に配列の要素を追加する	両端キュー.extendleft(配列)
辞書にキーが存在するならば、処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
データフレームを線形回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
オブジェクトがビルトインか	inspect.isbuiltin(オブジェクト)
スレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームのカラムの標本分散を求める	df['列A'].var(ddof=0)
整数がタプルのいづれかか調べる	aTuple = [0, 1, 2]<nl>整数 in aTuple
散布図の▲印の色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
標準入力から改行なしで1行読み込む	sys.stdin.readline().rstrip()
回帰分析をバギングとしてする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
データ列の離れ具合を図示する	sns.residplot(x=データ列, y=データ列)
横棒グラフの色をダークブルーにする	plt.barh(データ列x, データ列y, color='darkblue')
線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームの最初5行を抽出する	df.head(5)
シアンにヒストグラムの色を設定する	plt.hist(データ列, color='cyan')
折れ線プロットを描画する	plt.plot(データ列x, データ列y)
ファイルを読み込みモードでオープンして]fとする	f = open(filepath, mode='r')
折れ線グラフの▲マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
わり算の小数点以下を切り上げたい	(X + Y - 1) // Y
縦棒グラフをパープル色を使って描画する	plt.bar(データ列x, データ列y, color='purple')
散布図の▲印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データシリーズの中に文字列と日付データがあるか調べる	ds.isin([value, value2])
日付データは日付データと同時かどうか調べる	aDate == aDate2
線グラフの色をサドルブラウンに変更する	plt.plot(データ列x, データ列y, color='saddlebrown')
散布図の星印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
整数の十六進数文字列を使う	hex(整数)[2:]
縦棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
option: グラフの線種を破線に設定する	linestyle = 'dashed'
表データのあるカラムは何分か見る	df['列A'].dt.minute
外れ値を除いた配列の分散を計算する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
リストとリストの散布図をプロットして、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
線形モデルの係数	model.coef_
ホールドアウトを使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
リストの最初のn要素を取り除く	リスト[n:]
0からnまでの整数列を得る	list(range(n+1))
改行せず計算結果をプリントする	print(式, end='')
変数名は非同期ジェネレータ	inspect.isasyncgen(識別子)
ホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
レモンシフォン色でヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
オリーブにヒストグラムの色を設定する	plt.hist(データ列, color='olive')
ゴールド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
ロージーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
インデント幅を指定して文字列をJSON文字列に変換する	json.dumps(文字列, ensure_ascii=False, indent=n)
文字列の順番をシャッフルする	''.join(random.sample(文字列, len(文字列)))
オブジェクトは集合クラスか	set = int<nl>isinstance(obj, set)
重複する行のみ	df[df.duplicated(keep=False)]
クリムゾン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
文字列を区切り文字で二分し、、前半を使う	文字列.partition(セパレータ)[0]
文字列を双方向キューの最初に追加する	両端キュー.appendleft(文字列)
デピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
文字列を走査し、パターンにマッチするか確認する	re.search(pattern, s)
散布図の四角印の色を設定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
option: グラフの色をスプリンググリーンに変更する	color = 'springgreen'
チョコレート色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
縦棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
文字列を走査し、正規表現にケースを無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
横棒グラフをダーク・スラテグレー色を使って描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
ゼロ埋めした符号なし８ビット整数型の行列を作る	np.zeros(要素数, dtype=np.uint8)
option: 先頭の行をヘッダに変更する	header = 0
横棒グラフを小麦色色として描画する	plt.barh(データ列x, データ列y, color='wheat')
縦棒グラフをシーグリーン色として描画する	plt.bar(データ列x, データ列y, color='seagreen')
タンにヒストグラムの色を指定する	plt.hist(データ列, color='tan')
ヒストグラムの色をミディアムアクアマリンにセットする	plt.hist(データ列, color='mediumaquamarine')
線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
縦横比を等しくする	plt.axis('equals')
クラス分類の予測精度をヒートマップで確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
原点から(実数,y)の距離を計算する	math.hypot(x, y)
配列とイテラブルについて散布図を描いてポイントマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ヒストグラムの色をアイボリーに変更する	plt.hist(データ列, color='ivory')
行列の列ごとの合計値を求める	np.sum(aArray, axis=0)
バイト列からJSONフォーマットのデータを読む	json.loads(バイト列.decode('unicode-escape'))
ビスク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
ヒストグラムの色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
散布図に右三角印を加える	plt.scatter(データ列x, データ列y, marker='>')
整数が整数2以上か確認する	整数 >= 整数2
本日の日付時刻を求める	datetime.datetime.now()
プラットフォームの文字コードの最大値	sys.maxunicode
xを出力する	print(x)
データフレームの一部の列を丸めて整数型にする	df[['列A', '列B']].round().astype(int)
ランダムにデータフレームから10行を抽出する	df.sample(10)
ベクトルは何次元か調べる	aArray.ndim
浮動小数点数のn乗	pow(x, n)
タイムスタンプデータは何曜日か知る	aDatetime.weekday()
リストのケンドールの順位相関係数	scipy.stats.kendalltau(数列, 数列2)
option: スノーにグラフの色を設定する	color = 'snow'
カラーバーを水平でプロットする	plt.colorbar(orientation='horizontal')
データ列の各値は何回出現するか確認する	ds.value_counts()
日付データが日付データより遅いか調べる	aDate > aDate2
空のロッソ回帰モデルを用意する	model = sklearn.linear_model.Rosso(alpha=正則化項)
全要素が1の行列を作成する	np.ones(行数, 列数, dtype=np.int)
データフレームをソートし、、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
論理値型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int32)
あるカラムの値がxに等しくない行を取り出す	df[df['列A'] != x]
CSVファイルをカラム名を指定せず読み込む	pd.read_csv('file.csv', header=None)
文字列を最後のコロンで二つに分け、残りを求める	文字列.rpartition(':')[-1]
ヒストグラムでカラーマップを用いる	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
データフレームの指定した列の中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
読み込みできるようにファイルを開く]	'r' = 'a'<nl>open(filepath, mode='r')
文字列の示すエンコーディングでファイルパスを開く]	s = 'utf-8'<nl>open(filepath, encoding=s)
要素がセットのメンバーか	要素 in セット
折れ線グラフの▲マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの選択したカラムの中にと文字列が存在するかどうか調べる	df[['列A', '列B']].isin([value, value2])
日付データが月曜日かどうか確認する	aDate.weekday() == 0
ブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
データフレームを表示するとき小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
配列の要素を連結してひとつの文字列にする	''.join(map(str, 配列))
データフレームの中に文字列がある	df.isin([value])
濃い青色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
点線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
日付時刻データと日付時刻データの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
ダークグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
整数はセットに含まれないか調べる	数 not in セット
プログラムのファイル名	sys.argv[0]
データフレームの列名を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
プラム色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
ダークシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
Pythonパス	sys.path
横棒グラフをダーク・スラテグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
折れ線グラフの色をオレンジにセットする	plt.plot(データ列x, データ列y, color='orange')
データ列の変遷を実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
リストをインデント幅を指定してJSON文字列にする	json.dumps(リスト, ensure_ascii=False, indent=n)
option: ライトグリーンにフォントの色を設定する	color = 'lightseagreen'
xを水色で表示できる文字列に変換する	f'\033[36m{x}\033[0m'
エポック秒の列から日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
折れ線グラフの色をロイヤルブルーにする	plt.plot(データ列x, データ列y, color='royalblue')
二つのオブジェクトが同じ参照か確認する	obj is obj2
ヒストグラムの色を淡い茶色に設定する	plt.hist(データ列, color='tan')
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列x, データ列y, marker='D')
イテラブルと数列について散布図を描画し、、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
原点から(浮動小数点数,y)の距離を求める	math.hypot(x, y)
XをYで割った結果が求めたい	X / Y
オレンジレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
折れ線グラフを半透明の破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: 耐火レンガにフォントの色を設定する	color = 'firebrick'
棒グラフをライトスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
アンティークホワイト色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
折れ線グラフの色を黄緑にセットする	plt.plot(データ列x, データ列y, color='chartreuse')
折れ線グラフのポイントマーカーの太さを変える	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
▽マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
yについて数式のインテグラルを算出する	sympy.integrate(数式, y)
option: EUCを使用する	encoding = 'euc_jp'
rgbの左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
カンマで文字列を分割して、文字列リストに変換する	文字列.split(',')
文字列をカンマで二分して前半を使う	文字列.partition(',')[0]
リストをJSONフォーマットにエンコードする	json.dumps(リスト, ensure_ascii=False)
線グラフをライトスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
option: グラフの色をスラグレーに変更する	color = 'slategray'
データフレームのあるカラムの尖度を算出する	df['列A'].skew()
ガウス過程を使ってクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームのふたつの列をドロップし、みる	df.drop(['列A', '列B'], axis=1)
入力から二つの自然数値を読む	A, B = map(int, input().split())
和を計算したい	X + Y
赤い大バツマーカーを配列とデータ列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
option: 青を用いる	color = 'blue'
option: サーモンを使う	color = 'salmon'
オブジェクトにプロパティがあるかどうか調べる	hasattr(obj, プロパティ名)
ライトイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
ふたつの列を組み合わせてグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
辞書上でキーが定義済み	キー in 辞書
カテゴリで色付けしてに箱ひげ図としてデータフレームをプロット化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ファイルからストリームを読み込んでfileとする	file = open(filepath)
カウンタからマッピングを引く	aCounter.subtract(aDict)
データ列の推移を実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid')
実数に浮動小数点数を掛ける	x * y
パウダーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
文字化けを防ぐ	sns.set(font='IPAexGothic')
折れ線グラフの右三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
文字列を最後のカンマを用いて二つに分ける	文字列.rpartition(',')
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
ブール型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int32)
双方向キューの中に整数が含まれてるか調べる	整数 in 両端キュー
option: マーカーを丸に変える	marker = 'o'
ヒストグラムをミディアムブルー色を用いて描画する	plt.hist(データ列, color='mediumblue')
データフレームの選択した列の最頻値を求める	df[['列A', '列B']].mode()
重複した行のみを抽出する	df[df.duplicated(keep=False)]
TSVファイルから文字コードを指定してデータフレームをロードする	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
散布図をダークオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
スタックの最初から要素を取り出す	両端キュー.popleft()
データフレームの形状	df.shape
option: ナバホホワイトにグラフの色を設定する	color = 'navajowhite'
上限長を指定して両端キューを作る	collections.deque(maxlen=最大長)
日付時刻データからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
プロットの色を淡くする	sns.set(pallete='muted')
縦棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
データを四分位点でスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
イテラブルを配列にする	np.array(iterable)
option: 線の種類を点線に指定する	linestyle = 'dotted'
棒グラフをミディアムブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumblue')
2つのデータフレームをジョインする	pd.merge(df, df2)
文字列を出力ストリームに書き込む	s = ''<nl>f.write(s)
クラス分類をKNNを使ってする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
線グラフをフローラルホワイト色を使って描画する	plt.plot(データ列x, データ列y, color='floralwhite')
指定した列の要約統計量	df['列A'].describe()
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: 文字コードを文字コードtextにする	encoding = text
ある列の文字列が部分文字列で終わるデータを取り出す	df[df['列A'].str.endswith(部分文字列)]
文字列中にひとつでも大文字があるか判定する	any(c.isupper() for c in 文字列)
四乗を書きたい	X ** 4
マップの値の一覧を得る	list(辞書.values())
ファイル入力からJSONフォーマットのデータを読む	json.load(ファイル入力)
ラベンダーブラッシュ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
option: どの行もカラムの名前にしない	header = None
折れ線グラフの色をダークグリーンに変更する	plt.plot(データ列x, データ列y, color='darkgreen')
切片なしの線形モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
整数が2で割り切れないか	整数 % 2 == 1
オブジェクトのメモリビューを見る	memoryview(obj)
散布図をrgbの星マーカーで描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
数列の各値を両端キューの末尾に追加する	両端キュー.extend(数列)
データフレームの中に文字列と文字列がいくつあるかカウントする	df.isin([value, value2]).sum()
option: グラフの色をライトスカイブルーに変更する	color = 'lightskyblue'
行列の行ごとの最大値を計算する	np.max(aArray, axis=1)
文字列が全て小文字かどうか調べる	文字列.islower()
カーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフをコーンフラワーブルー色を使って描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
オーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
option: マーカーを菱形に変える	marker = 'D'
ヒストグラムの色を珊瑚に設定する	plt.hist(データ列, color='coral')
散布図の色を深紅にする	plt.scatter(データ列x, データ列y, color='crimson')
散布図をパレットトルコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
year年month月day日hour時minute分second秒のタイムスタンプ	datetime.datetime(year=year, month=month, day=day,<nl><tab><tab><tab><tab>  hour=hour, minute=minute, second=second)
ヒストグラムの色をインディゴにする	plt.hist(データ列, color='indigo')
データフレームをある列によって大きい順にソートする	df.sort_values(by='列A', ascending=False)
縦棒グラフをプロットする	plt.bar(ラベル列, データ列)
散布図に赤い上三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
option: △マーカーを加える	marker = '^'
スーパーセットかどうか確認する	セット.issuperset(セット2)
セットを差分だけにする	セット.difference_update(セット2)
変数のの種類を知りたい	type(X)
数列からランダム複数個に選んでリストにする	random.choices(数列, k=n)
散布図の下三角印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
ロイヤルブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
色付きの点線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
二つのオブジェクトは同一か調べる	obj is obj2
日付データは日付データと同時か	aDate == aDate2
現在の時間数を求める	datetime.date.today().hour
リストの値を小さい順に並べる	sorted(リスト, reverse=True)
棒グラフをゴールド色を用いて描画する	plt.bar(データ列x, データ列y, color='gold')
ヒストグラムをミスティローズ色として描画する	plt.hist(データ列, color='mistyrose')
赤いポイントマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='r')
セットの補集合を求める	セット.difference(セット2)
整数はセットのひとつかどうか調べる	aSet = [0, 1, 2]<nl>整数 in aSet
ロイヤルブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
データフレームの重複していない行	df[~ df.duplicated(keep=False)]
日付データは日付データより後ろか調べる	aDate > aDate2
option: アイボリー色を使用する	color = 'ivory'
異なる列をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
データフレームの指定したカラムを小数点以下n桁で四捨五入する	n = 2<nl>df['列A'].round(n)
指定された列のカテゴリで集計し、最小値を求める	df.groupby('列A').min()
option: スレートブルー色を用いる	color = 'slateblue'
イテラブルをセットに追加更新する	セット.update(リスト)
指定した列の値で集計し、最小値を計算する	df.groupby('列A').min()
option: フォントの色をアクアマリンにする	color = 'aquamarine'
option: ベージュを使う	color = 'beige'
データフレームの選択したカラムの値が欠損値か判定する	df[['列A', '列B']].isna()
整数のモジュロを計算する	整数 % 整数2
淡いピンク色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
双方向キューから最初の整数を取り除く	両端キュー.remove(整数)
リストのイミュータブルな集合を用意する	frozenset(リスト)
その平均値でデータフレームの指定したカラムの欠損値を補う	df['列A'].fillna(df['列A'].mean())
データフレームの指定したカラムの未入力値を最小値に設定する	df['列A'].fillna(df['列A'].min())
箱ひげ図として配列を可視化する	plt.boxplot(データ列)
タプル中の最初の要素を探す	タプル.index(要素)
複数のシートを表計算から読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
ヒストグラムをダークゴールデンロッド色を使って描画する	plt.hist(データ列, color='darkgoldenrod')
保存するCSVファイルの小数点以下の桁数を変更する	df.to_csv('file.csv', float_format='%.3f')
ヒストグラムの色をサーモンに変更する	plt.hist(データ列, color='salmon')
option: マーカーを下三角に設定する	marker = 'v'
インデックスを用いて昇順にデータフレーム全体を整列する	df.sort_index(ascending=True)
データフレームのNaNを最小値に設定する	df.fillna(df.min())
浮動小数点数を万の位で四捨五入する	round(x, -4)
データフレームをある列でグループ分けして列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
線グラフの色をゴーストホワイトに変更する	plt.plot(データ列x, データ列y, color='ghostwhite')
イテラブルと配列の散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: 改行コードをUNIXにセットする	newline = '\n'
文字コードtextでファイルパスを開く]	text = 'utf-8'<nl>open(filepath, encoding=text)
option: オリーブにグラフの色を変更する	color = 'olive'
方程式として数式のパラメータの解を求める	sympy.solve(数式, [|変数]x)
複数の列からグループ化し、分散を計算する	df.groupby(['列A', '列B'], as_index=False).var()
リストをランダムにシャッフルしてリスト化する	random.sample(リスト, len(リスト))
多次元尺度構成法で多次元データを数値次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
リストとリストについての散布図に▽マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの色をパールバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='palevioletred')
散布図のクロス印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
終了位置を指定して部分文字列を探す	文字列.find(部分文字列, 0, 終了位置)  # 見つからない場合は-1
nまでの奇整数列を作る	list(range(1, n, 2))
文字列が別の文字列に含まれるかどうか調べる	文字列 in 別の文字列
散布図をグリーンイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
散布図の四角マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
パールゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
整数のそれぞれの桁の和	sum(map(int, str(整数)))
横棒グラフを茶色色として描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームの指定した列の欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
散布図の四角印を赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
リストを2回あわせた直積を得る	itertools.product(iterable, repeat=2)
option: データ型として整数型を使う	np.int = np.int<nl>dtype = np.int
文字コードから文字に変換する	chr(文字コード)
クリムゾン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
データフレームの指定した列の空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
多次元尺度構成法で整数次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームの指定した三つの列を選択する	df[['列A', '列B', '列C']]
数式の変数xについてのn階偏微分を計算する	sympy.diff(数式, [|変数]x, n)
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
XにYを掛けた結果が求めたい	X * Y
データシリーズの中の未入力値の合計を調べる	ds.isna().sum()
データ列を用いる	import pandas as pd
散布図に丸マーカーを用いる	plt.scatter(データ列x, データ列y, marker='o')
符号付きで整数をバイト列に変換する	整数.to_bytes(length=バイト数, byteorder='big', signed=True)
option: カデットブルーを用いる	color = 'cadetblue'
わりが書きたい	X / Y
文字列中にひとつもアルファベットが存在しないか	any(not c.isalpha() for c in 文字列)
指定したカラムの中にある文字列の合計を数える	df['列A'].isin([value]).sum()
option: シルバー色を用いる	color = 'silver'
データフレームの行の名前の一覧	df.index
option: 線の種類を点線に変更する	linestyle = 'dotted'
折れ線グラフを半透明の実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームを指定されたカラムの値によってグループ化し記述統計量を計算する	df.groupby('列A').describe()
リストと配列について散布図を描き、、左三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
浮動小数点数を２乗する	x ** 2
データフレームのヒストグラムを縦横に並べてグラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
分子n、分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
アスキー文字が文字列中に存在するかどうか調べる	any(c.isascii() for c in 文字列)
option: 青紫色を使用する	color = 'violet'
ダークターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
確率的勾配降下を用いてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
option: ライトスチールブルーを使う	color = 'lightsteelblue'
棒グラフを珊瑚色として描画する	plt.bar(データ列x, データ列y, color='coral')
option: 耐火レンガにフォントの色を変更する	color = 'firebrick'
散布図のダイアモンド印の色を設定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ゼロ埋めされた三2ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int16)
新しい文字列でパターンにマッチした文字列を置き換える	re.sub(pattern, newsub, s)
左三角印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
ダークターコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
配列の列ごとの最小値を求める	np.min(aArray, axis=0)
option: フォントの色をライトスカイブルーに設定する	color = 'lightskyblue'
カウンタの項目一覧を使う	aCounter.keys()
option: アンティークホワイト色を用いる	color = 'antiquewhite'
チョコレート色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
新しい勾配ブースティング回帰木を用意する	model = sklearn.ensemble.GradientBoostingRegressor()
星マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
整数を二進数リテラルに変換する	bin(整数)
配列をひとつの文字列にする	''.join(map(str, 配列))
折れ線グラフに黒い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
文字列の大文字小文字を変換する	文字列.casefold()
両端キューの先頭に数列の値を追加する	両端キュー.extendleft(数列)
相関係数でデータフレームの選択した列の相関行列を算出する	df[['列A', '列B']].corr(method='pearson')
複数行対応として文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
ヒストグラムをやわらかい青色で描画する	plt.hist(データ列, color='cornflowerblue')
ポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.')
日付データからn分減らす	aDate - datetime.timedelta(minutes=n)
オブジェクトの無限イテラブル	itertools.repeat(element)
データフレームのカラムを名前変更する	df.rename(columns={'列A': '列a', '列B': '列b'})
整数足す整数を求める	整数 + 整数2
option: ライムグリーンを使う	color = 'limegreen'
タプルが少なくとも一つ真か調べる	any(タプル)
線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
二つの集合の対称差集合	セット.symmetric_difference(セット2)
データフレームをグループ化しあるカラムに対し最大値を求める	df.groupby('列A')['列B'].max()
データフレームの指定したカラムを四捨五入して、整数にする	df['列A'].round().astype(int)
文字列を最後のカンマで二つに分け、、残りを使う	文字列.rpartition(',')[-1]
予測値とデータの離れ具合を描画する	sns.residplot(x='列名', y='列名', data=df)
パレットを淡くする	sns.set(pallete='muted')
ヒストグラムの色をスプリンググリーンに変更する	plt.hist(データ列, color='springgreen')
データフレームのあるカラムの欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
カウンタをクリアする	aCounter.clear()
分類モデルのF値を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
option: ライトシアンに色を変更する	color = 'lightcyan'
ダークレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
リストの要素を全てセットに追加する	セット.update(リスト)
TSVファイルファイル名がか確認する	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
横軸の最大・最小値を変更する	plt.xlim(最小値, 最大値)
浮動小数点数を小数点以下第一位で丸める	round(x, 1)
option: グラフの色をミディアムパープルにセットする	color = 'mediumpurple'
複数のカラムからグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
数式のyを指定された数式で置き換える	数式.subs(y, 数式2)
日付時刻データが日付時刻データと同時	aDatetime == aDatetime2
データフレームをCSVファイルから読み込む	pd.read_csv('file.csv', sep=',')
xとyを文字列で区切って表示する	print(x, y, sep=s)
タプルの各要素を関数に適用した結果で並べる	sorted(タプル, key=func)
ベクトルの行	aArray[行番号]
実数のn乗して実数による余りを計算する	pow(x, n, y)
折れ線グラフにバツ印を使う	plt.plot(データ列x, データ列y, marker='x')
デックの要素数	len(両端キュー)
指定したカラムを四捨五入して整数型にする	df['列A'].round().astype(int)
ライトグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
文字列のケースを整える	文字列.casefold()
option: 四角印を使う	marker = 's'
option: グラフの色をロージーブラウンにセットする	color = 'rosybrown'
ライトスレイグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
新しい文字列で文字列中の正規表現を置き換える	re.sub(pattern, newsub, s)
option: オーキッドにフォントの色を設定する	color = 'orchid'
option: パールゴールデンロッドにグラフの色をする	color = 'palegoldenrod'
散布図をバツ印を使って描画する	plt.scatter(データ列x, データ列y, marker='x')
option: グラフの色をライトグレーに変更する	color = 'lightgray'
データフレームの中のカラムを等間隔でn個にビン分割する	pd.cut(df[col], n)
折れ線グラフの下三角印の線幅を指定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
読み込み用にファイルをオープンして]、fとする	f = open(filepath, mode='r')
見やすいグラフを描画する	import seaborn as sns
線グラフの色をフローラルホワイトにセットする	plt.plot(データ列x, データ列y, color='floralwhite')
データフレームの選択したカラムを10000の位で四捨五入する	df[['列A', '列B']].round(-4)
分類モデルの分類精度を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
データフレームから同じ行を消す	df.drop_duplicates(inplace=True)
データフレームの選択したカラムの欠損値を平均に増やす	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
データフレームの選択した列の標準偏差	df[['列A', '列B']].std()
整数が一桁の整数かどうか	-9 <= 整数 <= 9
option: モカシンにグラフの色を設定する	color = 'moccasin'
データフレームの中の列をビン数nとして分割する	pd.cut(df[col], n)
ふたつの列からグループ化し、最小値を計算する	df.groupby(['列A', '列B'], as_index=False).min()
横棒グラフを描いて、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
線グラフの色をダークスラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategray')
折れ線グラフの色をマゼンタに指定する	plt.plot(データ列x, データ列y, color='magenta')
シルバー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
グラフの描画でパステル調にテーマを使う	sns.set(pallete='pastel')
データをJSON形式を使って指定されたファイルにダンプする	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
option: フォントの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
ふたつの集合のユニオンを求める	セット.union(セット2)
散布図にrgbの菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームのあるカラムの曜日を見る	df['列A'].dt.weekday_name
rgbの右三角マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
ヒストグラムの色をバリーウッドに指定する	plt.hist(データ列, color='burlywood')
緑色化する	f'\033[32m{x}\033[0m'
データフレームの選択した列のNaNを最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
散布図に左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
本日をISO8601形式の文字列にする	datetime.datetime.today().isoformat()
データフレームの行の一覧	df.index
両端キューの中に要素は含まれてる	要素 in 両端キュー
指定した列のみ、データフレームの重複を確認する	df.duplicated(subset='列A')
欠損値がある行を除いてみる	df.dropna()
列のユニークな値の個数	ds.nunique()
文字列の右側から部分文字列を消す	文字列.rstrip(部分文字列)
一点鎖線にヒストグラムの線の種類を指定する	plt.hist(データ列, linestyle='dashbot')
ヒストグラムの色をリネンに変更する	plt.hist(データ列, color='linen')
ヒストグラムをダークスラテグレー色として描画する	plt.hist(データ列, color='darkslategray')
線グラフを耐火レンガ色を使って描画する	plt.plot(データ列x, データ列y, color='firebrick')
散布図をホワイトスモーク色として描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
ガウス過程を用いて回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
ミディアムスプリンググリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
分類モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
現在が木曜日か調べる	datetime.datetime.today().weekday() == 3
ある列の文字列が部分文字列で終わらないデータを抽出する	df[~ df['列A'].str.endswith(部分文字列)]
ある列毎の標準偏差を求める	df.groupby('列A').std()
線グラフを深紅色として描画する	plt.plot(データ列x, データ列y, color='crimson')
リストと数列についての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
データフレームの中にいくつNaNが存在するか求める	df.isna().sum()
ランダムフォレストで回帰分析をする	model = sklearn.ensemble.RandomForestRegressor()
データフレームの歪みを求める	df.kurt()
折れ線グラフをタン色を使って描画する	plt.plot(データ列x, データ列y, color='tan')
文字列全体が正規表現にASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
折れ線グラフの右三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
データフレームからカラムを2つのみ選択する	df[['列A', '列B']]
カテゴリでグループ化して、に箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
整数が一桁の数か	0 <= 整数 <= 9
インディゴ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
青色でプリントできる文字列に変換する	f'\033[34m{x}\033[0m'
フローラルホワイト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
option: マーカーを菱形に変更する	marker = 'D'
改行せず計算結果を表示する	print(式, end='')
xがマイナス無限大に近づくとき、極限値を求める	sympy.limit(数式, [|変数]x, -oo)
データフレームの選択したカラムが正規分布からどの程度、尖っているか確認する	df[['列A', '列B']].skew()
耐火レンガ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
縦棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
サーモンにヒストグラムの色を指定する	plt.hist(データ列, color='salmon')
リストからn個ランダムに選んでリストにする	random.choices(リスト, k=n)
データフレームのあるカラムのパーセンタイルを求める	df['列A'].quantile(パーセント/100)
スペース文字	' '
複数の列で降順にデータフレームをソートする	df.sort_values(by=['列A', '列B'], ascending=False)
小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
部分文字列が文字列の終了位置より前に含まれないかテストする	文字列.find(部分文字列, 0, 終了位置) == -1
整数が奇数か確認する	整数 % 2 == 1
無限に整数が続くイテラブルを使う	itertools.repeat(整数)
分類モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
四分位数で列をビン分割する	pd.qcut(ds, 4)
新しいガウス過程回帰モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
オブジェクトは文字列クラスか	str = int<nl>isinstance(obj, str)
文字列中に空白が含まれる	any(c.isspace() for c in 文字列)
ダークブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
カテゴリでグループ化して、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
オレンジ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
option: オーキッドにグラフの色を指定する	color = 'orchid'
データフレームをヘッダを付けず保存する	df.to_csv('file.csv', header=None)
文字列の先頭で正規表現に複数行対応としてマッチするか確認する	re.match(pattern, s, flags=re.MULTILINE)
ロジスティック回帰データフレームの散布図にを加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
ファイルをバイナリモードで開いて]、fとする	f = open(filepath, mode='rb')
プロットの描画で明るくカラーパレットを用いる	sns.set(pallete='bright')
データフレームの一部の列の欠損値を平均値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
ゼロ埋めされた符号なし８ビット整数型のベクトル	np.zeros(要素数, dtype=np.uint8)
y軸の目盛の値を変更する	plt.yticks(目盛りの値リスト)
ふたつの列でグループ化し、最小値を計算する	df.groupby(['列A', '列B'], as_index=False).min()
線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
文字列を最後の区切り記号で二つに分けて、後ろの方を使う	文字列.rpartition(セパレータ)[-1]
あるカラムの歪度	df['列A'].kurt()
双方向キューの先頭にイテラブルの要素を追加する	両端キュー.extendleft(イテラブル)
パープルにヒストグラムの色を設定する	plt.hist(データ列, color='purple')
改行なしに２つの文字列を出力する	print(文字列, 文字列, end='')
プラム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
セットから要素を全て除く	セット.clear()
整数の十六進数リテラルを使う	hex(整数)
文字列を大文字にする	文字列.upper()
2つ並べて度数分布図を描画する	plt.hist([データ列, データ列], color=['b', 'r'])
データシリーズのNaNを平均値に変更する	ds.fillna(ds.mean())
一点鎖線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
変数xがマイナス無限大に近づく場合の極限値を計算する	sympy.limit(数式, [|変数]x, -oo)
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
リストからランダムn個に選んでリストにする	random.choices(リスト, k=n)
option: 青にグラフの色を変更する	color = 'blue'
シーグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='seagreen')
option: スノーを使用する	color = 'snow'
配列の歪みを算出する	scipy.stats.skew(配列, bias=False)
option: グラフの色をパレットトルコイズに変更する	color = 'paleturquoise'
整数を整数で整数除算する	整数 // 整数2
指定された列によって表データを小さい順に並べ直し、、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
散布図を黒い四角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
イテラブルのコンビネーションを求める	itertools.combinations(iterable, n)
日付データが日付データより早いかどうか判定する	aDate2 = aDatetime<nl>aDate < aDate2
線グラフの色をグリーンイエローに変更する	plt.plot(データ列x, データ列y, color='greenyellow')
シーケンスと列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
整数をデックの先頭に入れる	両端キュー.appendleft(整数)
option: 標準エラーを用いる	file = sys.stderr
多次元データを特異値分解として項次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
データフレームの全カラムの散らばりをグラフ化する	sns.pairplot(df)
ヒストグラムの色をオリベドラブに変更する	plt.hist(データ列, color='olivedrab')
xについて数式をn階微分する	sympy.diff(数式, [|変数]x, n)
左に両端キューの順序をローテーションする	両端キュー.rotate(-1)
option: ペールグリーンにグラフの色を設定する	color = 'palegreen'
文字列を改行で分割し、文字列リストにする	文字列.splitlines()
作業ディレクトリを求める	os.getcwd()
減算が書きたい	X - Y
Excelファイルのシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
セットが空かどうか調べる	len(セット) == 0
無限数列を得る	itertools.count()
指定した列の母標準偏差	df['列A'].std(ddof=0)
今日をタプルに変換する	datetime.datetime.today().timetuple()
ターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
要素を双方向キューの先頭に追加する	両端キュー.appendleft(要素)
プログラムをエラーとして終了する	sys.exit(1)
データフレームとデータシリーズをつなぐ	pd.concat([df, ds], axis=1)
縦棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
辞書上で項目名が定義されていないか調べる	キー not in 辞書
プロットのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
ホワイトスモーク色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
折れ線グラフの色をゲインズボロに変更する	plt.plot(データ列x, データ列y, color='gainsboro')
折れ線グラフを紺碧色を使って描画する	plt.plot(データ列x, データ列y, color='azure')
ある列の文字列が正規表現にマッチする行を選ぶ	df[df['列A'].str.match(正規表現)]
散布図のマーカーを左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
データフレームの中のNaNの数を数える	df.isna().sum()
データフレームの数値を全て小数点以下n桁で丸める	df.round(n)
折れ線グラフの▽印の線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
折れ線グラフの色をビスクにする	plt.plot(データ列x, データ列y, color='bisque')
ヒストグラムをダークブルー色で描画する	plt.hist(データ列, color='darkblue')
文字列の左側からある文字を取り除く	文字列.lstrip(文字)
列にリストを続ける	itertools.chain(iterable, iterable2)
ダークグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
折れ線グラフを淡い茶色色として描画する	plt.plot(データ列x, データ列y, color='tan')
辞書の全を消去する	辞書.clear()
リストを折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
連立方程式の解を算出する	sympy.solve([数式, 数式2])
小数点数が有限か調べる	math.isfinite(x)
バイナリ用にファイルをオープンして]、fとする	f = open(filepath, mode='rb')
印字を全て見る	string.printable
ヒストグラムをモカシン色を用いて描画する	plt.hist(データ列, color='moccasin')
配列を一次元化する	aArray.flatten()
新しい回帰木モデルを用意する	model = sklearn.tree.DecisionTreeRegressor()
２つのカラムでグループ化し、平均値を計算する	df.groupby(['列A', '列B'], as_index=False).mean()
option: ゲインズボロ色を用いる	color = 'gainsboro'
option: 濃い青を使用する	color = 'darkblue'
ベクトルの要素数	aArray.size
データフレームから一つの列を取り出す	df[['列A']]
シーケンスを2回あわせたデカルト積	itertools.product(iterable, repeat=2)
整数を符号付きでバイナリにする	整数.to_bytes(length=バイト数, byteorder='big', signed=True)
折れ線グラフを淡い茶色色で描画する	plt.plot(データ列x, データ列y, color='tan')
配列とイテラブルについて散布図を描画してマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
データシリーズが何月か知る	ds.dt.month
2つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
リストと数列の散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
TSVファイルとしてデータフレームを書き出す	df.to_csv('file.tsv', sep='\t')
マッピングの項目名を列挙する	辞書.keys()
データフレームの欠損値がある部分に色を付ける	df.style.highlight_null()
を整数倍にする	変数 *= 整数
線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
ブール型のゼロ埋めした配列	np.zeros(要素数, dtype=np.int32)
データフレームのある列の未入力値をモードで埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
小数点以下'3'桁の文字列にする	':.3f'.format(x)
末尾から文字列を部分文字列で区切る	文字列.rsplit(部分文字列)
例外動作したい	try:<nl><tab># ここに処理を入れる<nl><tab>pass<nl>except Exception as e:<nl><tab>print(e)
option: パウダーブルー色を用いる	color = 'powderblue'
データフレームのあるカラムの時を見る	df['列A'].dt.hour
散布図の左三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
リストの要素を文字列として、タブで連結する	'\t'.join(map(str, リスト))
文字列が無限に繰り返すイテラブルを使う	itertools.repeat(文字列)
整数の積	整数 * 整数2
データフレームのカラムを万の位で丸める	df['列A'].round(-4)
リストの末尾のn要素を除く	リスト[:-n]
浮動小数点数を三乗する	x ** 3
データフレームの選択した列を百の位で丸める	df[['列A', '列B']].round(-2)
棒グラフをアクア色を用いて描画する	plt.bar(データ列x, データ列y, color='aqua')
option: 三２ビット整数型を用いる	np.int16 = np.int<nl>dtype = np.int16
文字列の左端から指定した文字を取り除く	文字列.lstrip(文字)
ボックスチャートを描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
文字列中の指定した文字を数える	文字列.count(文字)
データフレームをある列の値によってグループ分けして、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
文字列がキーワードか確認する	keyword.iskeyword(文字列)
オレンジにヒストグラムの色を変更する	plt.hist(データ列, color='orange')
イテラブルとリストの散布図にクロスマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x')
ラベンダーブラッシュ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
データフレームの指定した列の中にいくつNaNがあるか数える	df['列A'].isna().sum()
deqのstart番目からendの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
双方向キューから最初の文字列を削除する	両端キュー.remove(文字列)
句読点文字を全部見る	string.punctuation
▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v')
多次元データをSVDとして文字列次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
ホワイトスモーク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
棒グラフを真紅色を使って描画する	plt.bar(データ列x, データ列y, color='crimson')
option: ホワイトスモーク色を用いる	color = 'whitesmoke'
棒グラフをライトゴールドロディイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
実数を小数点で四捨五入する	round(x, n)
データシリーズの中に存在する文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
改行せず変数の値を表示する	print(変数名, end='')
変数xについて数式の積分を求める	sympy.integrate(数式, [|変数]x)
指定された列のみ、データフレームの重複を見る	df.duplicated(subset='列A')
散布図のポイント印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
表データのあるカラムは何日か見る	df['列A'].dt.day
グラフを使う	import matplotlib.pyplot as plt
文字列中に非数字があるか	any(not c.isdigit() for c in 文字列)
棒グラフをライトブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightblue')
標準出力がパイプか調べる	not sys.stdout.isatty()
ヒストグラムの色をパレットトルコイズに指定する	plt.hist(データ列, color='paleturquoise')
列名を指定してデータフレームを全結合する	pd.merge(df, df2, on='列A', how='outer')
データフレームを表示するとき折り返しをしない	pd.set_option('expand_frame_repr', False)
折れ線グラフの色をペールグリーンに指定する	plt.plot(データ列x, データ列y, color='palegreen')
ゲインズボロ色でヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
横軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
ブランチドアーモンド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
まとめてデータフレームの列の名前を文字列置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
ミディアムシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumseagreen')
表計算ファイルから文字化けしないようにCSVファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
ディレクトリ	os.getcwd()
横棒グラフをナバホホワイト色として描画する	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームを表示するとき、n列までデータフレームを表示するようにする	pd.set_option('display.max_columns', n)
option: ドジャーブルーにグラフの色を変更する	color = 'dodgerblue'
円周率を使う	math.pi
リストをカウンタに変換する	collections.Counter(iterable)
データ列をn個にビンニングする	pd.cut(ds, n)
青いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ダークバイオレット色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
エクセルファイルから複数のシートを読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
実数から整数を減ずる	x - y
文字列リストをつなげる	''.join(文字列)
option: ライトスカイブルーにグラフの色を指定する	color = 'lightskyblue'
データフレームの選択したカラムの未入力値を直後の値で置き換える	df[['列A', '列B']].fillna(method='bfill')
文字列を最後のコロンで二分割する	文字列.rpartition(':')
ピアソンでデータフレームの一部のカラムの相関行列を求める	df[['列A', '列B']].corr(method='pearson')
両端キューの最後に整数を追加する	両端キュー.append(整数)
横棒グラフをレベッカパープル色を使って描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
双方向キューの最後から要素を取り出す	両端キュー.pop()
小数点数の指数を求める	math.frexp(x)[1]
ValueMapで一度にデータフレームの値を置き換える	df.replace(ValueMap)
二つ並べて数列を柱状図にする	plt.hist([データ列, データ列], color=['b', 'r'])
グラフで使う色を指定する	sns.set(pallete=パレット名)
option: 箱ヒゲ図に平均を加える	showmeans = False
option: フォントの色を紺に設定する	color = 'darkblue'
散布図に青い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
JSON形式を用いてデータをファイルにダンプする	with open('file.json', 'w') as f:<nl><tab>json.dump(データ, f, ensure_ascii=False)
指定したカラムの欠損値を直前の値に設定する	df['列A'].fillna(method='ffill')
文字列が全て英数字	文字列.isalnum()
リストの折れ線プロットを描画して、色をカラーコードとして設定する	plt.plot(データ列x, データ列y, color='#800080')
線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データフレームの一部のカラムのSkewness	df[['列A', '列B']].skew()
折れ線グラフの線種を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
文字列に漢字が使われている	re.search('[\u4E00-\u9FD0]', 文字列)
option: ダークオーキッドに色を設定する	color = 'darkorchid'
option: グラフの色をダークグリーンに指定する	color = 'darkgreen'
ファイル名がJSONファイルかどうか調べる	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
option: ライトグリーンを使う	color = 'lightseagreen'
追加モードを用いてファイルをオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
option: ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
アルファベットの小文字を見る	string.ascii_lowercase
データフレームの未入力値を直後の値で補う	df.fillna(method='bfill')
整数個からk個取り出した場合の順列の総数を求める	math.perm(n, k)
書き込み用に文字コードtextを用いてファイルパスをオープンする]	open(filepath, mode='w', encoding=text)
ファイルをオープンして]、バイナリ書き込みストリームを見る	'wb' = 'a'<nl>open(filepath, mode='wb')
現在の日付を求める	datetime.date.today()
ホワイトスモーク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
空の集合を見る	set()
データシリーズの統計量を調べる	ds.describe()
スレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='slateblue')
カウンタ同士で和集合演算する	aCounter | aCounter2
折れ線グラフをフクシア色を用いて描画する	plt.plot(データ列x, データ列y, color='fuchsia')
option: グラフの色をコーラルにセットする	color = 'coral'
縦棒プロットを描画して、左寄せする	plt.bar(ラベル列, データ列, align='edge')
二つのリストのインターセクション	list(set(リスト).intersection(set(リスト2)))
option: アクアにグラフの色を設定する	color = 'aqua'
ヒストグラムの色をカーキに変更する	plt.hist(データ列, color='khaki')
散布図をフクシア色を用いて描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
折れ線グラフの右三角印を黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
今日の日付	datetime.date.today()
文字列中にひとつでも非アルファベットが含まれるかどうか調べる	any(not c.isalpha() for c in 文字列)
入力ストリームを一行ずつ読み込む	f.readline()
２つのデータフレームを列名を指定して結合する	'<nl>pd.merge(df, df2, on='列A')
リストは少なくともひとつ真か調べる	any(リスト)
データフレームのカラムのn次モーメント	scipy.stats.moment(df['列A'], moment=n)
スレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
rgbの▲マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図を青緑色として描画する	plt.scatter(データ列x, データ列y, color='teal')
'A'カラムの値がxに等しいデータを抽出する	df[df['列A'] == x]
文字列を積極的に小文字にする	文字列.casefold()
ヒストグラムの色をゴールドに変更する	plt.hist(データ列, color='gold')
２つの変数の小さい方が欲しい	min(X, Y)
スクリプトファイルのディレクトリ名を使う	os.path.dirname(os.path.abspath(__file__))
日付データが金曜日	aDate.weekday() == 4
セットの要素数を求める	len(セット)
配列と数列の散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
option: エラーを無視するように変更する	errors = 'ignore'
キュー中の要素の数を数える	両端キュー.count(要素)
数列を更新不能なに変換する	frozenset(数列)
ライムグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='limegreen')
表データのあるカラムは何月か見る	df['列A'].dt.month
乱数の行列	np.random.random(N)
データフレームのカラムのケンドールの相関係数を使う	scipy.stats.kendalltau(df['列A'], df['列B'])
データフレームの欠損値を最小値に指定する	df.fillna(df.min())
リストのn番目からn2番目の部分	リスト[n:n2]
文字列中にひとつも数字が存在しない	any(not c.isdigit() for c in 文字列)
ヒストグラムの色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
ヒストグラムをダークレッド色で描画する	plt.hist(データ列, color='darkred')
ラベンダーにヒストグラムの色を変更する	plt.hist(データ列, color='lavender')
option: NaNを先頭にする	na_position = 'first'
三つのデータフレームを縦に結合する	pd.concat([df, df2, df3], axis=0)
リストとリストについて散布図を描画してマーカーをダイアモンドに変更する	plt.plot(データ列x, データ列y, marker='D')
散布図に四角マーカーを加える	plt.scatter(データ列x, データ列y, marker='s')
ライトシアン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
リストと配列について散布図を描画して、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
要素はセットのいずれ	要素 in セット
日付時刻データが水曜日かどうか	aDatetime.weekday() == 2
整数が正の数かどうか確認する	整数 > 0
箱ひげ図を描画して平均を加える	plt.boxplot(データ列, showmeans=True)
同じでないと書きたい	X != Y
縦棒グラフをハニーデュー色として描画する	plt.bar(データ列x, データ列y, color='honeydew')
イテラブルから重複なく、n要素ランダムに選んでリストにする	random.sample(イテラブル, k=n)
リストとリストについての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
最大最小として正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
折れ線グラフのクロスマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフの三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データ列の推移を一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
マップの値の一覧	list(辞書.values())
日付データが金曜日か	aDate.weekday() == 4
ファイルをUTF8を使って書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
ロバスト推定で回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ダークオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
文字列の先頭から部分文字列を取り除く	文字列.removeprefix(部分文字列)
データフレームがどの程度、正規分布から歪んでいるか見る	df.kurt()
両端キューの要素を左に回転させる	両端キュー.rotate(-1)
折れ線グラフにラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
異なる列をキーとしてデータフレームを結合する	pd.merge(df, df2, left_on='列A', right_on='列B')
データフレームのある列を十の位で丸める	df['列A'].round(-1)
リストの重複を取り除く	sorted(set(リスト), key=リスト.index)
オブジェクトがビルトイン	inspect.isbuiltin(オブジェクト)
t-SNEで整数次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
実数のtanの逆数	math.atan(x)
データフレームの列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
ファイルから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
散布図の右三角印の色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
書き込みモードでファイルパスを開いて]fとする	f = open(filepath, mode='w')
散布図の丸印の太さを変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
二つの列によってデータフレームをまとめた表を使う	df.groupby(['列A', '列B'])
ストリームを解放する	f.close()
データフレームの列の各データ値の出現数を求める	df[col].value_counts()
線形モデルの回帰変数を見る	model.coef_
平均値付き箱ヒゲ図を描画する	plt.boxplot(データ列, showmeans=True)
ヒストグラムの色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
一番右側の列を除いたデータフレーム	df[df.columns[:-1]]
ヒストグラムの色をライトグレーにする	plt.hist(データ列, color='lightgray')
二つのデータフレームを横方向に合体させる	pd.merge(df, df2)
英字を全部見る	string.ascii_letters
文字列中に数字が含まれるかテストする	any(c.isdigit() for c in 文字列)
句読点文字を全て見る	string.punctuation
半透明の一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
文字列が別のにあるか調べる	文字列 not in 別の文字列
二つのカウンタのいずれかに含まれる要素を算出する	aCounter | aCounter2
散布図を使ってデータフレームのカラムを可視化する	sns.scatterplot(data=df, x='列名', y='列名')
option: ミディアムバイオレットレッド色を用いる	color = 'mediumvioletred'
option: Excelファイルシート名を設定する	sheet_name = ['A', 'B']
ライムグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
リストから長さの制限された双方向キューを作成する	最大長 = 10<nl>collections.deque(リスト, maxlen=最大長)
データフレームの列のユニークな値の個数を確認する	df[col].nunique()
データフレームのカラムの最頻値を算出する	mode, count = scipy.stats.mode(df['列A'])
リストの要素を小さい順に並べ変える	sorted(リスト, reverse=False)
カウンタのキーと出現回数をリストとして得る	aCounter.items()
小数点以下'2'桁の文字列に変換する	':.2f'.format(x)
棒グラフを濃いシアン色を使って描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ふたつの条件が成り立つ	条件 and 条件2
散布図の印をバツにする	plt.scatter(データ列x, データ列y, marker='x')
ファイルをBOM付きで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
UTF8で追加できるようにファイルを開く]	open(filepath, mode='a', encoding='utf-8')
データシリーズの中にあると文字列の個数をカウントする	ds.isin([value, value2]).sum()
線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
入力から2つの実数を取り出す	A, B = map(float, input().split())
xを赤色で表示する	print(f'\033[31m{x}\033[0m')
option: シルバーにグラフの色を設定する	color = 'silver'
ダークグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
配列のトリム分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
リストと数列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
データシリーズのNaNをモードに設定する	ds.fillna(ds.mode().iloc[0])
マップに要素をキーとして加える	辞書[キー] = element
見やすいグラフを描画する準備をする	import seaborn as sns
option: シーグリーンにグラフの色を指定する	color = 'seagreen'
外れ値に強い線形回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
青い点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
折れ線グラフをアンティークホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
y軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
かけ算を書きたい	X * Y
データフレームをある列でグループ化してそれぞれのグループごとの件数を知る	df.groupby('列A').size()
折れ線グラフの色をオーキッドにする	plt.plot(データ列x, データ列y, color='orchid')
ある列の値がxに等しくかつ別の列の値がyに等しい行を取り出す	df[(df['列A'] == x) & (df['列B'] == y)]
変数xについて数式をn階偏微分する	sympy.diff(数式, [|変数]x, n)
リストと配列についての散布図にrgbの星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図の下三角印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフのマーカーを▽にする	plt.plot(データ列x, データ列y, marker='v')
配列間の相関係数を算出する	scipy.stats.pearsonr(配列, 配列2)
オブジェクトが浮動小数点数型か調べる	float = int<nl>isinstance(obj, float)
option: ミディアムスレートブルーを使用する	color = 'mediumslateblue'
散布図の印を黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
オレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
数が正の数か調べる	x > 0
TSVからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
実数で数を割って、切り捨てる	x // y
ケースを無視して文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データフレームのNaNを数値で置き換える	df.fillna(x)
散布図を淡い茶色色で描画する	plt.scatter(データ列x, データ列y, color='tan')
データフレームの選択したカラムのNaNを中央値で補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
折れ線プロットにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの欠損値をメディアンに設定する	df.fillna(df.median())
日付データが木曜日かどうか確認する	aDate.weekday() == 3
グラフの目的を画面に設定する	sns.set(context='notebook')
フォーマットでカラムをタイムスタンプ型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
折れ線グラフをライムグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='limegreen')
縦棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
xが真	bool(x)
実数を浮動小数点数で割った剰余	math.remainder(x, x2)
option: リネンを使用する	color = 'linen'
散布図をダークオリーブグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
折れ線グラフの色をターコイズにセットする	plt.plot(データ列x, データ列y, color='turquoise')
茶色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
折れ線グラフをペールグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='palegreen')
配列をイテラブルから作る	np.array(iterable)
サドルブラウン色でヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
データフレームの指定した列を十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
平均線付き箱ひげ図をプロットする	plt.boxplot(データ列, meanline=True)
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
データシリーズをタイムスタンプ型に変換し、表データのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
カーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
文字列の右側から指定した文字を除去する	文字列.rstrip(文字)
リストのn番目の要素を消す	del リスト[n]
配列とイテラブルの散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ダークレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
ひとつも小文字が文字列中に含まれないかどうか調べる	any(not c.islower() for c in 文字列)
データフレームの複数のカラムを並べて箱ヒゲ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
数を十の位で丸める	round(x, -1)
折れ線グラフの印を右三角印にする	plt.plot(データ列x, データ列y, marker='>')
右三角マーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
整数の八進数リテラルを見る	oct(整数)
淡い茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
浮動小数点数を複素数に変換する	complex(x)
OSがWindowsかどうか調べる	sys.platform.startswith('win32')
文字列中にひとつでも非英字が含まれるか	any(not c.isalpha() for c in 文字列)
'A'列の値がxに等しいデータを取り出す	df[df['列A'] == x]
文字列を空白を用いて分割する	文字列.split()
rgbの▽マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
3つのデータフレームを縦方向に合体させる	pd.concat([df, df2, df3], axis=0)
ある列のカテゴリごとの個数を求める	df.groupby('列A').count()
ヒストグラムの色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
横棒グラフを深紅色で描画する	plt.barh(データ列x, データ列y, color='crimson')
xとyをプリントする	print(x, y)
横棒グラフをプロットし、、棒の幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ひとつでも空白が文字列中に含まれる	any(c.isspace() for c in 文字列)
データフレームの相関行列を描画する	sns.heatmap(df.corr())
データシリーズの欠損値をxに変更する	ds.fillna(x)
SJISでCSVファイルにデータフレームを出力する	df.to_csv('file.csv', encoding='shift_jis')
option: 白色を用いる	color = 'white'
縦棒グラフをピーチパフ色を使って描画する	plt.bar(データ列x, データ列y, color='peachpuff')
ミントクリーム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
データフレームのあるカラムのタイムゾーンを東京に設定する	df['列A'].tz_convert('Asia/Tokyo')
円プロットを真円にする	plt.axis('equals')
日付データの年	aDate.year
文字列を右からセパレータで区切る	文字列.rsplit(セパレータ)
ロバストな線形回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
option: グラフの色をビスクにセットする	color = 'bisque'
ファイルパスを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
ある列の値ごとの標準偏差	df.groupby('列A').std()
二つのセットは互いに素か調べる	セット.isdisjoint(セット2)
折れ線グラフの▽印の大きさを設定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
プロットのデータラベルの位置を(x,y)に設定する	plt.legend(loc=(x, y))
エポック秒のカラムからPandasの日付型にする	pd.to_datetime(df['列A'], unit='s', utc=True)
八進数字を全部使う	string.octdigits
棒グラフをアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データフレームのカラムのケンドールの順位相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
データ列をビン数nで分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
複数のリストを箱髭図にする	plt.boxplot([データ列, データ列])
データフレームをグループ化しそれぞれの個数を求める	df.groupby('列A').count()
rgbの大バツマーカーをリストと配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
シートの名前を指定してデータフレームをエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
縦棒グラフをゴーストホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
データフレームの次元数	df.shape
オールドレース色でヒストグラムを描画する	plt.hist(データ列, color='oldlace')
option: マーカーの大きさを指定する	markersize = 2.0
水色でxをプリントする	print(f'\033[36m{x}\033[0m')
データシリーズの中にいくつ未入力値があるか数える	ds.isna().sum()
リストの要素を両端キューの末尾に追加する	両端キュー.extend(リスト)
折れ線グラフの色をドジャーブルーにセットする	plt.plot(データ列x, データ列y, color='dodgerblue')
リストの最初のn要素を捨てる	リスト[n:]
文字列全体を正規表現にASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
珊瑚色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
データフレームの一部のカラムの平均など	df[['列A', '列B']].describe()
棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
各グループごとにデータフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
キーがマップに存在する	キー not in 辞書
空の辞書	辞書 = {}
整数はセットに含まれるかどうか	数 in セット
year年の日付をオブジェクト化する	datetime.date(year=year, month=1, day=1)
ダークカーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
折れ線グラフの△マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
nxn2の2次元リスト	[[0] * n for _ in range(n2)]
データフレームの選択したカラムの中央値を求める	df[['列A', '列B']].median()
データ列を箱髭図にする	plt.boxplot(データ列)
双方向キューの最後に整数を追加する	両端キュー.append(整数)
実数を小数点数で割った剰余を計算する	math.remainder(x, x2)
散布図に黒い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフの色をサーモンに指定する	plt.plot(データ列x, データ列y, color='salmon')
データシリーズの時刻を使う	ds.dt.hour
項∉セット	要素 not in セット
option: 色のアルファを指定する	alpha = 0.5
option: ラベンダー色を使用する	color = 'lavender'
データフレームの指定したカラムの空文字をNaNに変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
正則化付き回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
データフレームを複数の列によって昇順に並べて、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
セットを複製する	セット.copy()
データシリーズは何時か見る	ds.dt.hour
クリムゾン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
日付データからn分、引く	aDate - datetime.timedelta(minutes=n)
ヒストグラムの色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
ヒストグラムをシルバー色として描画する	plt.hist(データ列, color='silver')
ファイルを書き込み用にオープンする]	'w' = 'a'<nl>open(filepath, mode='w')
データフレームの一部の列がどの程度、分散しているか調べる	df[['列A', '列B']].var()
配列と配列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフの大バツ印を青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
折れ線グラフの四角印を青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
プラットホームはWindowsかどうか調べる	sys.platform.startswith('win32')
ヒストグラムの線の種類を実線に指定する	plt.hist(データ列, linestyle='solid')
辞書をJSONフォーマットでファイルに保存する	with open('file.json', 'w') as f:<nl><tab>json.dump(辞書, f, ensure_ascii=False)
option: 読む行番号をnamesで指定する	usecols = names
エクセルファイルのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
データフレームの指定した列のNaNを直前の値で置き換える	df['列A'].fillna(method='ffill')
option: フォントの色をライトスレイグレーに変更する	color = 'lightslategray'
データフレームのあるカラムの値をValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
配列から長さの制限した両端キューを作成する	最大長 = 10<nl>collections.deque(配列, maxlen=最大長)
配列を一つの文字列にする	''.join(map(str, 配列))
棒グラフをミディアムオーキッド色を使って描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
列を四分位数ごとに分割する	pd.qcut(ds, 4)
散布図のポイント印を黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
色付きの実線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
アルファベットの小文字を全部求める	string.ascii_lowercase
rgbのバツマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
数列の変遷を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
イテラブルから両端キューを作成する	collections.deque(イテラブル)
文字列の中で複数行対応として正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
改行せずxとyを順にプリントする	print(x, y, end='')
カラムの欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
Pandasの日付型の表データのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
サポートベクターマシンとしてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
線グラフの色をゴーストホワイトに指定する	plt.plot(データ列x, データ列y, color='ghostwhite')
モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
文字列の右側から範囲を指定して部分文字列を探す	文字列.find(部分文字列, 開始位置, 終了位置)  # 見つからない場合は-1
データフレームの欠損値を直後の値に変更する	df.fillna(method='bfill')
データフレームの選択した列の中のNaNの合計を数える	df[['列A', '列B']].isna().sum()
赤い点線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
既存のファイルを追加できるようにUTF8を使って開く]	open(filepath, mode='a', encoding='utf-8')
セットの変更不能版	frozenset(セット)
棒グラフをレベッカパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームのあるカラムを1000の位で四捨五入して、整数型にする	df['列A'].round(-3).astype(int)
数列を箱ひげ図にする	plt.boxplot(データ列)
日付時刻データの秒数を求める	aDatetime.second
縦棒グラフを描いてラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
赤い▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
表計算ファイルのシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
データフレームの列間の相関行列を一度に求める	df.corr()
オブジェクトがジェネレータか	inspect.isgenerator(オブジェクト)
実線としてイテラブルの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのNaNを前の行の値で補完する	df.fillna(method='ffill')
option: ミディアムターコイズ色を使用する	color = 'mediumturquoise'
データシリーズがどの程度、正規分布から尖っているか見る	ds.skew()
折れ線グラフをグレー色を使って描画する	plt.plot(データ列x, データ列y, color='gray')
データフレームの指定したカラムの中に存在する文字列と日付データの数をカウントする	df['列A'].isin([value, value2]).sum()
水色で表示できる文字列にする	f'\033[36m{x}\033[0m'
ヒストグラムをバイオレット色で描画する	plt.hist(データ列, color='violet')
option: ダークマゼンタにフォントの色を変更する	color = 'darkmagenta'
折れ線グラフにポイント印を使用する	plt.plot(データ列x, データ列y, marker='.')
xを太字で表示できる文字列にする	f'\033[1m{x}\033[0m'
黒い三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ヒストグラムの色をリネンに指定する	plt.hist(データ列, color='linen')
option: コーンフラワーブルーにフォントの色をセットする	color = 'cornflowerblue'
JSONフォーマットの文字列をオブジェクトに変換する	data = json.loads(文字列)
変数の値を１つ増やしたい	X += 1
文字列が全て英数字か	文字列.isalnum()
折れ線グラフの色をドジャーブルーに変更する	plt.plot(データ列x, データ列y, color='dodgerblue')
指定したカラムの中に文字列と文字列が存在する	df['列A'].isin([value, value2])
データフレームの列の一覧を見る	df.info()
縦棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
option: 区切りをカンマにする	sep = ','
データシリーズの欠損値を平均値で補完する	ds.fillna(ds.mean())
クラス分類をランダムフォレストでする	model = sklearn.ensemble.RandomForestClassifier()
散布図の下三角印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
データフレームをある列によって集約してグループ名を列挙する	[name for name, _ in df.groupby('列A')]
折れ線グラフの大バツ印を黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
作画の色を指定する	sns.set(pallete=パレット名)
指定したカラムの値がNaNかどうか調べる	df['列A'].isna()
データフレームのあるカラムの曜日	df['列A'].dt.weekday_name
散布図をミントクリーム色を用いて描画する	plt.scatter(データ列x, データ列y, color='mintcream')
rgbのポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
青い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
濃いシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ヒストグラムをグリーンイエロー色を用いて描画する	plt.hist(データ列, color='greenyellow')
黒い▲マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データシリーズを百の位で丸めて、整数にする	ds.round(-2).astype(int)
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
ヒストグラムの色を青に変更する	plt.hist(データ列, color='blue')
紺碧色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
リストのスピアマンの相関係数を計算する	scipy.stats.spearmanr(数列, 数列2)
ライトスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
配列と配列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームを各列毎にグループ化して、文字列というグループの個数を計算する	df.groupby(column).size()[s]
ダークシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkseagreen')
option: フォントの色をフローラルホワイトに設定する	color = 'floralwhite'
プラムにヒストグラムの色を設定する	plt.hist(データ列, color='plum')
ファイルパスからディレクトリ名を求める	os.path.dirname(filepath)
データフレームのカウントプロットを描く	sns.countplot(x='列名', data=df)
文字列中にひとつでも小文字が含まれるかどうか調べる	any(c.islower() for c in 文字列)
カウンタから列をカウントして引く	aCounter.subtract(iterable)
あるカラムの文字列が部分文字列で終わらない行を抽出する	df[~ df['列A'].str.endswith(部分文字列)]
データフレームのNaNを最頻値に設定する	df.fillna(df.mode().iloc[0])
文字列を両端キューの末尾に追加する	両端キュー.append(文字列)
データフレームをグループ化し、それぞれの合計を計算する	df.groupby('列A').sum()
option: パールバイオレットレッドを使う	color = 'palevioletred'
折れ線グラフの右三角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
縦棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
マップの項目名の一覧を参照する	list(辞書.keys())
文字列が全てアスキー文字か確認する	文字列.isascii()
コロンで文字列を分割して文字列リストに変換する	文字列.split(':')
データシリーズは正規分布からどの程度、尖っているか確認する	ds.skew()
変数名がビルトインか調べる	inspect.isbuiltin(識別子)
数式をyについてn階偏微分する	sympy.diff(数式, y, n)
線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
option: フォントの色をディムグレーに設定する	color = 'dimgrey'
文字列を後ろから空白で区切る	文字列.rsplit()
option: 青紫色を用いる	color = 'violet'
option: アリスブルーにグラフの色を設定する	color = 'aliceblue'
線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
文字列中の部分文字列の出現を範囲を指定して数える	文字列.count(部分文字列, 開始位置, 終了位置)
線グラフの色をダークオレンジに指定する	plt.plot(データ列x, データ列y, color='darkorange')
データ列をビン数nとしてビン分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームの中のカラムを中央値で分割する	pd.qcut(df[col], 2)
データシリーズの中にいくつ未入力値が存在するか求める	ds.isna().sum()
折れ線グラフのポイントマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
折れ線グラフの三角印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
整数の4乗を求める	整数 ** 4
最後の部分文字列で文字列を二分割し、最初の方を求める	文字列.rpartition(部分文字列)[0]
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
ベクトルを転置する	aArray.T
データシリーズの欠損値を直前の値に変更する	ds.fillna(method='ffill')
グラフで使うタイトルを設定する	plt.title('グラフの名称')
アルファベットを見る	string.ascii_letters
辞書のキーを一つずつ処理する	for key in 辞書.keys():<nl><tab>print(辞書[key])  # FIXME
FIXME:カテゴリーデータを出現頻度順に並べ直す	df['列A'].value_counts().sort_index().index
折れ線グラフを半透明の破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
リストとリストについての散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列x, データ列y, color='mediumorchid')
ふたつの列としてグループ化し、平均値を算出する	df.groupby(['列A', '列B'], as_index=False).mean()
変数の値を整数分の1にする	変数 /= 整数
プロットのx軸を対数に変更する	plt.xscale('log')
データフレームの中のカラムを等量でビン数nでビン分割する	pd.qcut(df[col], n)
実数の双曲線正弦を求める	math.sinh(x)
折れ線グラフにバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
option: グラフの色をミスティローズに指定する	color = 'mistyrose'
option: ミッドナイトブルーを使用する	color = 'midnightblue'
文字列中からパターンにケースを無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
オブジェクトが関数かどうか調べる	callable(obj)
数列と配列についての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームの統計量を一度に見る	df.describe()
ライトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
option: 小麦色色を用いる	color = 'wheat'
option: ダイアモンド印を使う	marker = 'D'
option: ダークグレーを使う	color = 'darkgray'
カラムの歪度	scipy.stats.skew(df['列A'], bias=False)
データフレームのSkewness	df.skew()
ミディアムパープルにヒストグラムの色を変更する	plt.hist(データ列, color='mediumpurple')
ヒストグラムをパパイヤウィップ色を用いて描画する	plt.hist(データ列, color='papayawhip')
データ列の折れ線プロットを描画して、色をカラーコードで指定する	plt.plot(データ列x, データ列y, color='#800080')
折れ線グラフに四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をパパイヤウィップにセットする	plt.plot(データ列x, データ列y, color='papayawhip')
小数点以下'4'桁までの文字列にする	':.4f'.format(x)
ブラック色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
データを最大最小で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
文字列を最後の部分文字列で分けたときの後半の文字列を取り出す	文字列.rpartition(部分文字列)[-1]
文字列中にASCII文字が含まれない	any(not c.isascii() for c in 文字列)
線グラフをダークオレンジ色として描画する	plt.plot(データ列x, データ列y, color='darkorange')
データフレームの行名を全て付け直す	df.rename(index={x: y})
ミディアムシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの指定したカラムのNaNを直後の値で埋める	df['列A'].fillna(method='bfill')
配列のピアソンの積立相関係数	scipy.stats.pearsonr(配列, 配列2)
グラフに鉛直方向の実線をつける	plt.axvline(x=0, linestyle='solid')
全ての八進数字	string.octdigits
辞書の値の一覧を参照する	list(辞書.values())
線グラフの色をダークサーモンに指定する	plt.plot(データ列x, データ列y, color='darksalmon')
ファイルパスを追加モードでオープンする]	'a' = 'a'<nl>open(filepath, mode='a')
折れ線グラフをハニーデュー色を使って描画する	plt.plot(データ列x, データ列y, color='honeydew')
フィシャー流の尖度を見る	scipy.stats.kurtosis(配列, fisher=True, bias=False)
パウダーブルーにヒストグラムの色を変更する	plt.hist(データ列, color='powderblue')
カウンタのユニークな値を列挙する	list(aCounter)
横棒グラフをデピンク色として描画する	plt.barh(データ列x, データ列y, color='deeppink')
整数を二進リテラルに変換する	bin(整数)
日付データが日付データより後ろか確認する	aDate > aDate2
棒グラフをピーチパフ色を使って描画する	plt.bar(データ列x, データ列y, color='peachpuff')
散布図の四角印を黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
横棒グラフをサンディーブラウン色として描画する	plt.barh(データ列x, データ列y, color='sandybrown')
リストと数列の散布図を描画して、▲マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: 色をライトスカイブルーに設定する	color = 'lightskyblue'
今日の日付時刻	datetime.datetime.now()
ヒストグラムをダークマゼンタ色を用いて描画する	plt.hist(データ列, color='darkmagenta')
数値がセットのいずれでもないどうか	数 not in セット
option: グラフの色をミントクリームにセットする	color = 'mintcream'
option: ダークバイオレットにフォントの色を変更する	color = 'darkviolet'
二つの変数の大きい方が知りたい	max(X, Y)
データフレームの中の列をリストを境界値としてビンニングする	pd.cut(df[col], aList)
十六進文字列をバイト列に変換する	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgreen')
プロットの中に枠なしの補足を付ける	plt.legend(frameon=False)
識別子が抽象クラスか	inspect.isabstract(識別子)
ふたつの列を組み合わせてグループ化し標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
データ列の折れ線グラフを描画して、RGBで色を指定する	plt.plot(データ列x, データ列y, color='#800080')
棒グラフをライトグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
グラフの描画で濃く色テーマを使う	sns.set(pallete='deep')
欠損値がある行を削除する	df.dropna(inplace=True)
ベクトル間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
文字列を最後の区切り記号で分割し、、前半を使う	文字列.rpartition(セパレータ)[0]
ローングリーンにヒストグラムの色をする	plt.hist(データ列, color='lawngreen')
部分文字列を文字列の左端から除く	文字列.removeprefix(部分文字列)
データフレームの一部のカラムの下位25パーセント	df[['列A', '列B']].quantile(0.75)
標準出力を使用する	sys.stdout
折れ線グラフの色をダークグレーにセットする	plt.plot(データ列x, データ列y, color='darkgray')
黒いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
配列を中央値で分割する	pd.qcut(aArray, 2)
半透明の一点鎖線を用いてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
マッピングにキーが存在するとき、処理するようにしたい	if キー in 辞書:<nl><tab>print(辞書[キー])  # FIXME
option: 色をレモンシフォンにする	color = 'lemonchiffon'
青色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
ファイルからnバイト、読む	f.read(n)
標準入力から1行だけ読み込んで改行を取り除く	sys.stdin.readline().rstrip()
線グラフの色をシーグリーンに指定する	plt.plot(データ列x, データ列y, color='seagreen')
日付データにn日を加算する	aDate + datetime.timedelta(days=n)
マルーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
プロット中の文字化けを防ぐ	sns.set(font='IPAexGothic')
赤い四角マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
option: グラフの色をダークシアンに指定する	color = 'darkcyan'
データフレームをグループ化しある列に対し標準偏差を求める	df.groupby('列A')['列B'].std()
データを最大最小を用いて揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データフレームの一部の列の相関行列を計算する	df[['列A', '列B']].corr()
データフレームを各グループ列ごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
十六進数文字列をバイナリにする	int(文字列, 16).to_bytes(length=バイト数, byteorder='big')
イエローグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
正則化付き単回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
predicateFuncがTrueになる列の要素	itertools.takewhile(predicateFunc, iterable)
option: ライトイエローにグラフの色をする	color = 'lightyellow'
紺碧色としてヒストグラムを描画する	plt.hist(データ列, color='azure')
２つの列を組み合わせてグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
ホワイトスモーク色でヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
アスキー文字が文字列中に存在しない	any(not c.isascii() for c in 文字列)
データフレームを表示するとき、表示できる最大行数を変更する	pd.set_option('display.max_rows', n)
アルファベットの大文字を使う	string.ascii_uppercase
折れ線グラフに青い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
説明変数と目的変数で分類モデルを学習する	model.fit(説明変数, 目的変数)
グラフで使う色テーマを指定する	sns.set(pallete=パレット名)
option: フローラルホワイトにグラフの色をする	color = 'floralwhite'
点線でヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
実数を実数にかける	x * y
データフレームを横向きに合体する	pd.concat([df, df2], axis=1)
ロッソ回帰モデルを新規作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
データフレームのカラムを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
異なる列をキーとしてデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
丸マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
'A'列の値がxに等しい行を選択する	df[df['列A'] == x]
option: 丸マーカーを加える	marker = 'o'
カウンタ同士で積集合を計算する	aCounter & aCounter2
識別子はジェネレータかどうか	inspect.isgenerator(識別子)
データフレームのあるカラムを百の位で四捨五入して、整数型にする	df['列A'].round(-2).astype(int)
表データの数値をまとめて小数点以下n桁で四捨五入する	df.round(n)
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
黒い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
xでデータシリーズのNaNを埋める	ds.fillna(x)
文字列を右からコロンで分割する	文字列.rsplit(':')
分類結果の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
パープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
文字列を改行で分割する	文字列.splitlines()
整数が非負数でない	整数 >= 0
ファイルからn文字読み込む	f.read(n)
縦棒グラフをラベンダーブラッシュ色として描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
モデルのR2を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
データフレームの末尾10行を取り出す	df.tail(10)
散布図の丸印を青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
折れ線グラフをシスル色として描画する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフの色をホットピンクに指定する	plt.plot(データ列x, データ列y, color='hotpink')
数値はセットの要素か	数 in セット
カデットブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
青いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
文字列を最後のコロンで分割したときの後半の文字列を求める	文字列.rpartition(':')[-1]
option: 淡い茶色色を使う	color = 'tan'
横棒グラフをディープスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
option: グラフの色をコーラルに変更する	color = 'coral'
日付データが日付データと同時か	aDate == aDate2
TSVからデータフレームを読む	pd.read_csv('file.tsv', sep='\t')
bとn2から成るペアを得る	(n, n2)
プロットを表示する	plt.show()
数式の簡単化を行う	sympy.sympify(数式)
折れ線グラフの四角印の色を設定する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
文字列がリストにないかどうか調べる	文字列 not in リスト
関数によってデータフレームをまとめた表	df.groupby(関数)
多次元尺度構成法の準備をする	model = sklearn.manifold.MSD(n_components=n)
データフレームから重複を残さず重複を消す	df.drop_duplicates(keep=False)
データフレームのある列を消してみる	df.drop('列A', axis=1)
レベッカパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
青い実線として線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
カウンタのキーを増やす	aCounter[element] += 1
アルファベットの小文字を使う	string.ascii_lowercase
折れ線グラフの星マーカーを青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
青色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
あるカラムを四捨五入して、整数型にする	df['列A'].round().astype(int)
棒グラフの色を淡い茶色にする	plt.bar(データ列x, データ列y, color='tan')
option: 色をペールグリーンに設定する	color = 'palegreen'
折れ線グラフに黒い▽印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
要素はタプルの要素でないかどうか調べる	要素 not in タプル
option: グラフの色をライムグリーンにセットする	color = 'limegreen'
ダークオレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
データフレームを昇順に複数の列でソートして更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
option: 改行コードをUNIXにする	newline = '\n'
紺色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
黒い丸マーカーを配列とデータ列についての散布図に描く	plt.plot(データ列x, データ列y, marker='o', c='k')
線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: フクシアを使う	color = 'fuchsia'
セットの全ての要素が別のセット2に含まれる	セット.issubset(セット2)
文字列のn番目を文字コードにする	ord(文字列[n])
ゴーストホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
平均付き箱髭図をプロットする	plt.boxplot(データ列, showmeans=True)
複数のシートをエクセルから読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
ダークスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
option: フォントの色をカデットブルーに変更する	color = 'cadetblue'
文字列はPythonのキーワードか	keyword.iskeyword(文字列)
暗い赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
浮動小数点数のハイパボリック・コサイン	math.cosh(x)
散布図をダークグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
オリベドラブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
勾配ブースティングでクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
リストの末尾の要素を使う	リスト[-1]
option: 色をローングリーンに設定する	color = 'lawngreen'
ゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
紫色でプリントできる文字列に変換する	f'\033[35m{x}\033[0m'
コーンフラワーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
暗い赤色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
無限に文字列が続くイテラブルを得る	itertools.repeat(element)
イテラブルの重複組み合せを得る	itertools.combinations_with_replacement(iterable, n)
文字列を最後の部分文字列で二分割して、残りを求める	文字列.rpartition(部分文字列)[-1]
ピーチパフ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データシリーズを十の位で四捨五入して整数にする	ds.round(-1).astype(int)
ヒストグラムをローングリーン色として描画する	plt.hist(データ列, color='lawngreen')
option: 文字コードをSJISに指定する	encoding = 'shift_jis'
option: フォントの色をミディアムパープルにする	color = 'mediumpurple'
配列としてデータフレームのある列を抽出する	df['列A'].values
配列の列ごとの平均値を算出する	np.mean(aArray, axis=0)
データフレームの中の列を分割数nでビン分割する	pd.cut(df[col], n)
セットから要素を全て取り除く	セット.clear()
データフレームの選択した列の欠損値を最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
option: ライトブルー色を使用する	color = 'lightblue'
散布図を黒い下三角マーカーで描く	plt.plot(データ列x, データ列y, marker='v', c='k')
配列の尖度を算出する	scipy.stats.kurtosis(配列, bias=False)
option: フォントの色をマゼンタに設定する	color = 'magenta'
ファイルからバイナリ書き込みストリームを開いて]fとする	f = open(filepath, mode='wb')
シアンでxを表示する	print(f'\033[36m{x}\033[0m')
文字列を正規表現によって置換する	re.sub(pattern, newsub, s)
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()//60
マップから最後の項目をポップする	辞書.popitem()
整数の4分の一	整数 / 4
ヒストグラムをダークサーモン色として描画する	plt.hist(データ列, color='darksalmon')
配列をn個に分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
決定係数を算出する	sklearn.metrics.r2_score(データ列, データ列2)
キューに整数をプッシュする	両端キュー.append(整数)
⊆か調べる	セット.issubset(セット2)
折れ線グラフをダークサーモン色として描画する	plt.plot(データ列x, データ列y, color='darksalmon')
イテラブルからカウンタを作成する	collections.Counter(iterable)
▲印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
最大値・最小値の範囲を用いて一様な疑似乱数	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
option: 小麦色にグラフの色を設定する	color = 'wheat'
異なる列をキーにしてデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
列の重複組み合せを得る	itertools.combinations_with_replacement(iterable, n)
ダークサーモン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
MeanSquaredErrorを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
散布図をオレンジ色を使って描画する	plt.scatter(データ列x, データ列y, color='orange')
指定したカラムの中にいくつ欠損値が存在するかカウントする	df['列A'].isna().sum()
散布図をダークスラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
ロイヤルブルーにヒストグラムの色を指定する	plt.hist(データ列, color='royalblue')
データフレームの一部のカラムのNaNをその平均で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
リストをコピーする	リスト.copy()
データシリーズの欠損値を最頻値で置き換える	ds.fillna(ds.mode().iloc[0])
ヒストグラムの色をシアンに変更する	plt.hist(データ列, color='cyan')
列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
ヒストグラムをアクア色として描画する	plt.hist(データ列, color='aqua')
ディープスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: フォントの色をパレットトルコイズに指定する	color = 'paleturquoise'
tanを求める	math.tan(x)
青い点線で数列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームの一部のカラムの平均値を求める	df[['列A', '列B']].mean()
整数が配列のどれか	aArray = [0, 1, 2]<nl>整数 in aArray
度数分布図を描画して、ビンを設定する	plt.hist(データ列, bins=区関数)
キーが辞書にあるいるか	キー not in 辞書
インディゴ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
標準エラーを見る	sys.stderr
線グラフの色を赤に変更する	plt.plot(データ列x, データ列y, color='red')
ダイアモンドマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D')
文字列中に漢字が存在するか確認する	re.search('[\u4E00-\u9FD0]', 文字列)
リストからn要素サンプリングしてリスト化する	random.sample(リスト, k=n)
既存のファイルパスを文字列の示す文字コードで追加できるように開く]	open(filepath, mode='a', encoding=s)
データフレームのあるカラムの中に存在する文字列の数をカウントする	df['列A'].isin([value]).sum()
データフレームを表示するとき表示可能な列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
変数の値の出力を改行せずに行う	print(変数名, end='')
option: カデットブルー色を使用する	color = 'cadetblue'
折れ線グラフをスノー色として描画する	plt.plot(データ列x, データ列y, color='snow')
ファイル名がTSVファイル	filename = 'file.txt'  # ファイル name<nl>'.tsv' = '.csv'<nl>filename.startswith('.tsv')
データフレームの一部のカラムの標準偏差を求める	df[['列A', '列B']].std()
要素はセットのメンバーか	要素 in セット
折れ線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgrey')
キーが辞書に存在する	キー not in 辞書
option: 大バツ印を描画する	marker = 'X'
長さnのリストを作る	[0] * n
インデント幅を指定してデータをJSONにエンコードする	json.dumps(データ, ensure_ascii=False, indent=n)
配列を等量で分割数nでビンニングする	pd.qcut(aArray, n)
文字列を最初のコロンで二分する	文字列.partition(':')
データフレームの一部の列の欠損値をモードで補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
option: フォントの色をアイボリーに変更する	color = 'ivory'
ベクトルの標準偏差	np.std(aArray)
トマト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
文字列中にひとつでもアルファベットがあるかどうか調べる	any(c.isalpha() for c in 文字列)
セットから全ての要素を消す	セット.clear()
棒グラフをシアン色として描画する	plt.bar(データ列x, データ列y, color='cyan')
あるカラムの第二四分位数	df['列A'].median()
ヒストグラムをライトサーモン色として描画する	plt.hist(データ列, color='lightsalmon')
ミッドナイトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='midnightblue')
データシリーズのタイムゾーンをセットする	ds.tz_convert('Asia/Tokyo')
option: グラフの色をスカイブルーに変更する	color = 'skyblue'
グラフで利用可能な色名の一覧を知る	matplotlib.colors.cnames
データフレームをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
文字列中の文字をカウントする	文字列.count(文字)
文字列全体をケースを無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
縦棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
折れ線グラフをホワイト色で描画する	plt.plot(データ列x, データ列y, color='white')
棒グラフを淡い茶色色で描画する	plt.bar(データ列x, データ列y, color='tan')
option: フォントの色をダークオリーブグリーンに変更する	color = 'darkolivegreen'
グラフのカラーテーマを暗くする	sns.set(pallete='dark')
ISO書式の文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームを関数の値ごとにグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
ファイルパスの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
アクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
yについてのn階微分を算出する	sympy.diff(数式, y, n)
データシリーズがどれだけ分散しているか見る	ds.var()
全要素が1の行列を作る	np.ones(行数, 列数, dtype=np.int)
浮動小数点数の絶対値	math.fabs(x)
縦棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
Xの４乗が求めたい	X ** 4
整数が1もしくは2	整数 == 1 or 整数 == 2
リストの折れ線プロットを描いて色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
ローングリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
ホットピンク色としてヒストグラムを描画する	plt.hist(データ列, color='hotpink')
ペールグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
文字列の開始位置以降がsubで開始するか調べる	文字列.startswith(部分文字列, 開始位置)
ファイルから1文字読み込む	f.read(1)
部分文字列を文字列中から探す	文字列.find(部分文字列)
あるカラムの欠損値を最頻値にする	df['列A'].fillna(df['列A'].mode().iloc[0])
データフレームの全カラムを散布図で図示する	sns.pairplot(df)
折れ線グラフを赤い一点鎖線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
グラフの描画を綺麗にする	import seaborn as sns
折れ線グラフの三角印の色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列の最初の余分な空白を取り除く	文字列.lstrip()
ヒストグラムを黄緑色で描画する	plt.hist(データ列, color='chartreuse')
タイムスタンプデータが水曜日か調べる	aDatetime.weekday() == 2
セットを別のセットとの共通要素のみに更新する	セット.intersection_update(セット2)
グリーンイエロー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
項目名とその値を組として取り出す	辞書.items()
predicateFuncが真となるシーケンスの要素を求める	itertools.takewhile(predicateFunc, iterable)
モデルの残差を算出する	目的変数 - model.predict(説明変数)
辞書からキーとその値を組として取り出す	辞書.items()
CSVファイルでデータフレームを保存する	df.to_csv('file.csv')
棒グラフをスラグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='slategray')
タプルを展開してプリントする	print(*タプル)
リストとデータ列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
ハローワールドと表示する	print('Hello World')
ゴーストホワイト色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
小数点数の指数	math.frexp(x)[1]
縦棒グラフをシルバー色として描画する	plt.bar(データ列x, データ列y, color='silver')
データ列の推移を青い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
散布図を黒い▽マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
最大長nの両端キューを新規生成する	collections.deque(maxlen=最大長)
タン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
タプルの最後を使う	タプル[-1]
棒グラフの横幅を指定する	plt.bar(ラベル列, データ列, width=0.5)
散布図の左三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データシリーズの曜日は何日目か調べる	ds.dt.dayofweek
縦棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
散布図の下三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
日付時刻データが金曜日	aDatetime.weekday() == 4
ファイルを書き込みできるように開く]	'w' = 'a'<nl>open(filepath, mode='w')
数を3乗する	x ** 3
option: フォントの色をダークサーモンに変更する	color = 'darksalmon'
'A'カラムの値がxに等しい行を取り出す	df[df['列A'] == x]
ヒストグラムをアイボリー色として描画する	plt.hist(データ列, color='ivory')
option: 色をホワイトスモークに設定する	color = 'whitesmoke'
決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
ヒストグラムの色をライトブルーにする	plt.hist(データ列, color='lightblue')
numpyを使用する	import numpy as np
データフレームを各カテゴリにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
赤いバツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c='r')
文字列の終了位置より前に部分文字列がないか調べる	文字列.find(部分文字列, 0, 終了位置) == -1
散布図を暗い赤色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームをグループ化し最小値を求める	df.groupby('列A').min()
整数を16進数文字列にする	hex(整数)[2:]
option: マーカーを三角に設定する	marker = '^'
option: ミディアムバイオレットレッドを用いる	color = 'mediumvioletred'
棒グラフの色をダークブルーにする	plt.bar(データ列x, データ列y, color='darkblue')
キーが辞書上で未定義かどうか調べる	キー not in 辞書
ファイルをバイナリ用にオープンして]fとする	f = open(filepath, mode='rb')
xでデータフレームの一部のカラムの欠損値を埋める	df[['列A', '列B']].fillna(x)
配列を等量でビン数nとして分割する	pd.qcut(aArray, n)
ヒストグラムの色をピンクに変更する	plt.hist(データ列, color='pink')
バイト列からJSONを読み込む	json.loads(バイト列.decode('unicode-escape'))
リストを等しい量になるようにn個にビン分割する	pd.qcut(aList, n)
データフレームをグループ化しある列に対し個数を求める	df.groupby('列A')['列B'].count()
変数の値を整数だけ増加させる	変数 += 整数
文字列をユニコードエスケープでバイト列にする	文字列.encode(encoding='unicode_escape')
タイムスタンプデータからn秒を減算する	aDatetime - datetime.timedelta(seconds=n)
散布図を黒い三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
yについて数式をn階微分する	sympy.diff(数式, y, n)
option: グラフの色をターコイズに変更する	color = 'turquoise'
折れ線グラフの色をサンディーブラウンに指定する	plt.plot(データ列x, データ列y, color='sandybrown')
線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
最小値でデータシリーズの欠損値を埋める	ds.fillna(ds.min())
線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
整数の左シフトを計算する	整数 << n
BOM付きでファイルパスを書き込み用に開く]	open(filepath, mode='w', encoding='utf_8_sig')
タプルの末尾のn要素を捨てる	タプル[:-n]
ヒストグラムの色をミディアムスプリンググリーンに変更する	plt.hist(データ列, color='mediumspringgreen')
折れ線グラフの▼マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
データフレームをインデックスで小さい順に並べる	df.sort_index(ascending=True)
データシリーズの尖りを計算する	ds.skew()
日付時刻データにn時間分、足す	aDatetime + datetime.timedelta(hours=n)
ダークカーキにヒストグラムの色を指定する	plt.hist(データ列, color='darkkhaki')
データフレームの行がnの行を選択する	df.loc[n]
option: フォレストグリーン色を使用する	color = 'forestgreen'
ふたつの集合のユニオン	セット.union(セット2)
データフレームの数値を一度に小数点以下n桁で丸める	df.round(n)
データフレームから散布図を作り回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
セットが上位集合か調べる	セット.issuperset(セット2)
ヒストグラムの色をハニーデューに指定する	plt.hist(データ列, color='honeydew')
ロージーブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データフレームの指定した列の欠損値を直前の値に変更する	df['列A'].fillna(method='ffill')
折れ線グラフのポイント印の大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
漢字が文字列内に使われているかどうか	re.search('[\u4E00-\u9FD0]', 文字列)
データシリーズの欠損値を直後の値に指定する	ds.fillna(method='bfill')
入力から二つの少数を取り出す	A, B = map(float, input().split())
配列とリストの散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
ライトスチールブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データ列の離れ具合を描画する	sns.residplot(x=データ列, y=データ列)
折れ線グラフの色をミディアムスレートブルーに変更する	plt.plot(データ列x, データ列y, color='mediumslateblue')
行列の列ごとの最大	np.max(aArray, axis=0)
分類モデルを当てはめる	model.fit(説明変数, 目的変数)
折れ線グラフの四角印を赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
L1ノルムとして正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
チョコレート色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
線グラフの色をダークオーキッドにセットする	plt.plot(データ列x, データ列y, color='darkorchid')
ふたつの辞書をマージする	辞書 | 辞書2
辞書のエントリ数を得る	len(辞書)
データフレームの選択したカラムを十の位で丸めて、整数にする	df[['列A', '列B']].round(-1).astype(int)
フローラルホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
折れ線グラフを上三角印で描画する	plt.plot(データ列x, データ列y, marker='^')
棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
option: ダークマゼンタに色を変更する	color = 'darkmagenta'
option: フォントの色を淡いピンク色に変更する	color = 'lightpink'
ライトスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
option: スノーにフォントの色を設定する	color = 'snow'
度数分布図としてデータフレームのカラムをプロットする	plt.hist(df[column])
折れ線グラフの▲印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフの色をダークサーモンにセットする	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームのn行目を削除してみる	df.drop(n, axis=0)
書き出すCSV形式の小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
折れ線グラフの色をダークグリーンに指定する	plt.plot(データ列x, データ列y, color='darkgreen')
折れ線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
縦棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
データフレームから型の列を選択する	df.select_dtypes(ty)
作画に使うフォントを指定する	sns.set(font=フォント名)
十六進数字を全て使う	string.hexdigits
出力ストリームにxを文字列に変換して書く	x = 0<nl>f.write(str(x))
グラフのデザインをよくする	import seaborn as sns
日付時刻データとタイムスタンプデータの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
イテラブルを二つ並べて柱状グラフにする	plt.hist([データ列, データ列], color=['b', 'r'])
あるカラムのカテゴリごとの標準偏差を計算する	df.groupby('列A').std()
最大値・最小値を使って整数乱数を生成する	random.randint(最小値, 最大値)
柱状図のビン数を設定する	plt.hist(データ列, bins=区関数)
線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
ダーク・スラテグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkslategrey')
散布図をライトグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgray')
折れ線グラフのダイアモンドマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
縦棒グラフをアイボリー色を使って描画する	plt.bar(データ列x, データ列y, color='ivory')
データフレームの選択した列を千の位で丸めて整数型にする	df[['列A', '列B']].round(-3).astype(int)
ペアリストpairsからカウンタを構築する	collections.Counter(dict(pairs))
EUCでファイルを書き込み用に開く]	open(filepath, mode='w', encoding='euc_jp')
データフレームから型リストであるデータ型の列を取り出す	df.select_dtypes(include=typeList)
赤い点線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
プラットホームがMacOS	sys.platform.startswith('darwin')
スタック中の文字列の出現数を数える	両端キュー.count(文字列)
アイボリー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='turquoise')
ラベンダー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
2つのカラムを使ってグループ化し標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
ユニコードに対応する文字	chr(文字コード)
データシリーズの欠損値を後の行の値で補う	ds.fillna(method='bfill')
整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int)
シャルトリューズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
リストとリストの散布図を描画してバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
非数字が文字列中に含まれるか調べる	any(not c.isdigit() for c in 文字列)
折れ線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
リストに別のリストを展開する	リスト.extend(リスト2)
指定した列の値で集計し各合計を求める	df.groupby('列A').sum()
option: フォントの色をミディアムパープルに変更する	color = 'mediumpurple'
現在実行中の例外情報を知る	etype, evalue, traceback = sys.exc_info()
カラムの標準誤差を求める	scipy.stats.sem(df['列A'])
配列から1個ランダムに選んでリストにする	random.choice(配列)
散布図にダイアモンドマーカーを用いる	plt.scatter(データ列x, データ列y, marker='D')
データフレームの指定したカラムのNaNを直前の値に設定する	df['列A'].fillna(method='ffill')
データフレームの一部の列の要約統計量	df[['列A', '列B']].describe()
option: ブラウンにグラフの色を指定する	color = 'brown'
カンマを使って文字列を区切って、列挙する	文字列.split(',')
配列から両端キューを新規生成する	collections.deque(配列)
データ列とリストの散布図を描画して大バツマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
列にイテラブルを続けたイテラブルを得る	itertools.chain(iterable, iterable2)
ヒストグラムをディープスカイブルー色を用いて描画する	plt.hist(データ列, color='deepskyblue')
散布図にrgbの右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
割り算の切り上げが書きたい	(X + Y - 1) // Y
n乗を求めたい	X ** n
option: アイボリーを使う	color = 'ivory'
リストの要素を関数に適用した結果で並べる	sorted(リスト, key=func)
全要素を0で初期化した行列	np.zeros(要素数)
列と列の直積を求める	itertools.product(iterable, iterable2)
散布図をダーク・スラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
オブジェクトはバイト列クラスのインスタンス	bytes = int<nl>isinstance(obj, bytes)
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
正規表現で文字列を分割する	re.split(pattern, s)
文字列をカンマを使って区切り、列挙する	文字列.split(',')
クラス分類の再現率を算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
文字列リストをsepを区切りとして一つにする	sep.join(文字列リスト)
小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
ラインを色付きの点線を使って描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データ列の折れ線グラフを大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフを青紫色を用いて描画する	plt.plot(データ列x, データ列y, color='violet')
縦棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
インディアンレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
ペルー色としてヒストグラムを描画する	plt.hist(データ列, color='peru')
xが0に近づくときの極限値を求める	sympy.limit(数式, [|変数]x, 0)
変数xが無限大に近づく際極限値を求める	sympy.limit(数式, [|変数]x, oo)
option: フォントの色をライトグレーに変更する	color = 'lightgrey'
文字列中に非英数字が含まれる	any(not c.isalnum() for c in 文字列)
2つのデータフレームを列名を指定してジョインする	'<nl>pd.merge(df, df2, on='列A')
数列のピアソンの積立相関係数	scipy.stats.pearsonr(数列, 数列2)
日付時刻データは日付時刻データより先	aDatetime2 = aDatetime<nl>aDatetime < aDatetime2
ヒストグラムをディムグレー色として描画する	plt.hist(データ列, color='dimgrey')
データフレームの一部のカラムの中にいくつがあるか調べる	df[['列A', '列B']].isin([value]).sum()
積み上げ棒グラフをプロットする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
マップを複製する	辞書.copy()
二つのカウンタの共通する要素を計算する	aCounter & aCounter2
文字列の先頭でパターンに大文字・小文字を無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
横棒グラフをダークターコイズ色として描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
t分布型確率的近傍埋め込み法を使って整数次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
横棒グラフをプロットして、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
データフレームの指定したカラムの欠損値をモードに設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
エクセルファイルファイルでデータフレームを書き出す	df.to_excel('file.xlsx')
区切り記号で文字列を二分し、、後ろの方を使う	文字列.partition(セパレータ)[-1]
整数が3で割り切れるかどうか	整数 % 3 == 0
既存のファイルを文字コードtextとして追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
回帰分析をガウス過程を使って行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
正規表現にASCII限定として文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
星印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームをグループ化し、平均値を求める	df.groupby('列A').mean()
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
option: ビスクにグラフの色を指定する	color = 'bisque'
データフレームの列の文字列長を列として求める	df[col].str.len()
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
タイムスタンプデータが月曜日か調べる	aDatetime.weekday() == 0
散布図の右三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
最適な位置に短い説明を表示する	plt.legend(loc='best')
データフレームの最後10行を抽出する	df.tail(10)
辞書をチェーンマップにする	collections.ChainMap(aDict)
ダークターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
配列の折れ線グラフを描画し、、色をRGBで変更する	plt.plot(データ列x, データ列y, color='#800080')
標準出力のバッファを強制表示する	sys.stdout.flush()
ファイルパスから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
カテゴリデータをベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
折れ線グラフの色をダーク・スラテグレーに変更する	plt.plot(データ列x, データ列y, color='darkslategrey')
棒グラフをチョコレート色を用いて描画する	plt.bar(データ列x, データ列y, color='chocolate')
棒グラフをダークカーキ色として描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o')
データフレームのカラムの名前を列挙する	df.columns
データフレームをグループ化しあるカラムに対し合計を計算する	df.groupby('列A')['列B'].sum()
指定したカラムのパーセンタイルを求める	df['列A'].quantile(パーセント/100)
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgray')
エクセルからシートを指定して読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
本日を文字列を用いてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
図の縦横を設定する	plt.figure(figsize=(横幅, 高さ))
スプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='springgreen')
散布図の上三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
標準入力を見る	sys.stdin
折れ線プロットのラベルを変更する	plt.plot(データ列x, データ列y, label='ラベル')
茶色色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
データフレームから型リストで指定したデータ型の列だけ抽出する	df.select_dtypes(include=typeList)
ユニークな値を要素とするベクトル	np.unique(aArray)
数列から重複なく、ランダムにn要素選んでリストにする	random.sample(数列, k=n)
横棒グラフをカデットブルー色として描画する	plt.barh(データ列x, データ列y, color='cadetblue')
データフレームを複数の列をキーにして小さい順に並べる	df.sort_values(by=['列A', '列B'], ascending=True)
指定した列の欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
クラス分類をバギングでする	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
グリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
変数が無限大に近づくとき、極限値を求める	sympy.limit(数式, 変数, oo)
最初のカテゴリーを除外してデータフレームのあるカラムをダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
データフレームをあるカラムでまとめたグループを求める	df.groupby('列A')
散布図の大バツ印を黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
ゼロ埋めされた3２ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
主成分分析で数値次元に次元削減する	三 = 2<nl>sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
変数xが0に近づくときの数式の極限値を計算する	sympy.limit(数式, [|変数]x, 0)
グラフの見た目を良くする	import seaborn as sns
option: フォントの色をアリスブルーに設定する	color = 'aliceblue'
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
ブルーバイオレット色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
両端キュー中の文字列の位置を使う	両端キュー.index(文字列)
赤いダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
配列と配列についての散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
グリッドの線種を点線に変更する	plt.grid(linestyle='dotted')
分子と分母から分数を作成する	fractions.Fraction(分子, 分母)
日付データにn週間分、加える	aDate + datetime.timedelta(weeks=n)
データフレームを並べ直し、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
リストの要素が最初に見つかる位置	リスト.index(要素)
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategray'
データフレームの列を散布図で図示して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
タプルの合計	sum(タプル)
縦棒グラフをパールバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='palevioletred')
データ列とリストについての散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
データ列をタイムスタンプに変換する	pd.to_datetime(ds)
配列とリストの散布図を描画してマーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
数列を2つ並べて箱ヒゲ図にする	plt.boxplot([データ列, データ列])
棒グラフをダークサーモン色として描画する	plt.bar(データ列x, データ列y, color='darksalmon')
option: マーカーの色を珊瑚にする	markerfacecolor = 'coral'
散布図をダークスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
option: ゴールドを使う	color = 'gold'
文字列が指定した文字列に含まれるか調べる	文字列 in 別の文字列
option: 印を四角に変更する	marker = 's'
データフレームを指定した列によって昇順に並べ、、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
縦棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
データシリーズの標本標準偏差を計算する	ds.std(ddof=1)
フォレストグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
日付と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
データフレームのカラムの未入力値を最大値で補う	df['列A'].fillna(df['列A'].max())
時計回りに円グラフを描画する	plt.pie(データ列, startangle=90, counterclock=False)
ファイルを改行なしで一行ずつ読み込む	f.readline()
リストを文字列として空白によってつなげる	' '.join(map(str, リスト))
マゼンタ化する	f'\033[35m{x}\033[0m'
タイムスタンプデータをn日前に戻す	aDatetime - datetime.timedelta(days=n)
書き込み用にBOM付きでファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
変数名が非同期ジェネレータか調べる	inspect.isasyncgen(識別子)
文字列をカンマで二分し、、後半を使う	文字列.partition(',')[-1]
整数の八分の一を算出する	整数 / 8
クラス分類の予測精度をヒートマップを用いて見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
option: グラフの色を青緑に設定する	color = 'turquoise'
文字列中にひとつでも非空白が存在するか確認する	any(not c.isspace() for c in 文字列)
option: オーキッドにグラフの色を変更する	color = 'orchid'
プロットを画像ファイルとして保存する	plt.savefig('foo.png')
破壊的にデータフレームを降順にあるカラムによって並べ直す	df.sort_values(by='列A', ascending=False, inplace=True)
棒グラフをサンディーブラウン色として描画する	plt.bar(データ列x, データ列y, color='sandybrown')
配列の行ごとの平均を求める	np.mean(aArray, axis=1)
横棒グラフをダークサーモン色として描画する	plt.barh(データ列x, データ列y, color='darksalmon')
プログラムを異常止める	sys.exit(1)
線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
データフレームの選択した列のNaNを中央値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
２つの文字列を辞書順で比較する	文字列 < 文字列2
辞書の値に要素は含まれていないか	element not in 辞書.values()
多次元データを多次元尺度構成法で文字列次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ファイルパスからフォルダ名取り出す	os.path.dirname(filepath)
Xのn乗を計算したい	X ** n
文字列リストを一つの文字列にする	''.join(文字列)
縦棒グラフの色をバイオレットにする	plt.bar(データ列x, データ列y, color='violet')
要素がセットのメンバーでない	要素 not in セット
足し算が書きたい	X + Y
オレンジレッド色としてヒストグラムを描画する	plt.hist(データ列, color='orangered')
回帰分析をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
タプルをチェーンマップにする	collections.ChainMap(aDict)
文字を別の文字に置き換える	文字列.replace(部分文字列, 置換後の文字列)
散布図にrgbのポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフに菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
整数を符号付きでバイナリにする	整数.to_bytes((整数.bit_length() + 7) // 8, byteorder='big', signed=True)
リストの先頭を除く	リスト[1:]
データフレームから同じ内容の行を破壊的にドロップする	df.drop_duplicates(inplace=True)
本日の曜日を整数で求める	datetime.datetime.today().weekday()
ライトイエロー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
指定したカラムの中に日付データが存在するか確認する	df['列A'].isin([value])
列と列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
2つのカウンタの共通する要素	aCounter & aCounter2
サドルブラウン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
数式のxについてのn階微分を行う	sympy.diff(数式, [|変数]x, n)
横棒グラフを青緑色として描画する	plt.barh(データ列x, データ列y, color='teal')
option: ダークブルー色を用いる	color = 'darkblue'
option: ミディアムアクアマリンを用いる	color = 'mediumaquamarine'
データシリーズの未入力値を50パーセンタイルで埋める	ds.fillna(ds.median())
ライトシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
配列の行ごとの平均値を求める	np.mean(aArray, axis=1)
整数の3乗を算出する	整数 ** 3
折れ線グラフの色をアクアマリンに変更する	plt.plot(データ列x, データ列y, color='aquamarine')
オブジェクトは数値かどうか	isinstance(obj, (int,float))
オリーブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
最大値・最小値の範囲で一様な疑似乱数を得る	x = 0.0<nl>x2 = 1.0<nl>random.uniform(最小値, 最大値)
配列の値が正規分布にしたがって発生する確率を計算する	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
折れ線グラフに▽マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
ファイルを文字コードtextで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
文字列中にひとつでもアスキー文字がある	any(c.isascii() for c in 文字列)
リストをn回、結合する	リスト * n
option: 四角マーカーを使用する	marker = 's'
配列を等量でビン数nとしてビン分割する	pd.qcut(aArray, n)
データフレームの最初n行を選ぶ	df.head(n)
文字列はキーワードか調べる	keyword.iskeyword(文字列)
リストとデータ列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
縦棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
赤い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='r')
ヒストグラムをライトゴールドロディイエロー色として描画する	plt.hist(データ列, color='lightgoldenrodyellow')
直前の値でデータフレームのNaNを埋める	df.fillna(method='ffill')
線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
ラインを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームを100の位で丸める	df.round(-2)
データフレームの中のNaNの合計を求める	df.isna().sum()
オブジェクトが属性を持つか	hasattr(obj, プロパティ名)
散布図をダークグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgray')
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
データシリーズを百の位で丸めて整数型にする	ds.round(-2).astype(int)
option: どの列もインデックスに設定しない	index_col = None
日付データと日付データの時間差を求める	aDate - aDate2
文字列の中でASCII限定としてパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
識別子が非同期ジェネレータ関数	inspect.isasyncgenfunction(識別子)
テキストファイルファイル名がかどうか調べる	filename = 'file.txt'  # ファイル name<nl>'.txt' = '.csv'<nl>filename.startswith('.txt')
入力から二つの自然数を読む	A, B = map(int, input().split())
データフレームから100行をランダムに抽出する	df.sample(100)
option: グラフの色をゲインズボロに指定する	color = 'gainsboro'
3つの数値を順にプリントする	print(数値, 数値, 数値)
棒グラフをグレー色を使って描画する	plt.bar(データ列x, データ列y, color='gray')
ある列によって降順にデータフレームを破壊的に並べ直す	df.sort_values(by='列A', ascending=False, inplace=True)
文字列を改行によって区切る	文字列.splitlines()
ヘッダー行を左寄せに指定する	pd.set_option('colheader_justify', 'left')
マゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
スーパーセット	セット.issuperset(セット2)
散布図に上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
データフレームの一部のカラムの未入力値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
文字列中にひとつでも非アルファベットが含まれるかどうか確認する	any(not c.isalpha() for c in 文字列)
線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
UNIX時間の列から日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
折れ線グラフの色をトマトにする	plt.plot(データ列x, データ列y, color='tomato')
データフレームをある列によって整列して、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
カウンタから最頻出な値の件数を求める	aCounter.most_common()[1]
バツマーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
複数の列を組み合わせてグループ化し、平均値を計算する	df.groupby(['列A', '列B'], as_index=False).mean()
切片なしの線形モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
指定したカラムの欠損値を中央値に指定する	df['列A'].fillna(df['列A'].median())
バリーウッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
タイムスタンプデータが土曜日かどうか調べる	aDatetime.weekday() == 5
データシリーズはどれだけ、正規分布から歪んでいるか確認する	ds.kurt()
リストと配列の散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
折れ線グラフのクロスマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
無限に要素が繰り返す列が欲しい	itertools.repeat(要素)
散布図の菱形印の太さを変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
赤い▽マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
セットを変更不能な集合にする	frozenset(セット)
option: ミディアムシアグリーンを使用する	color = 'mediumseagreen'
データフレームからある２列のみ抽出する	df[['列A', '列B']]
カラムのn次モーメント	scipy.stats.moment(df['列A'], moment=n)
コーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
ハニーデュー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
散布図に青い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
配列とリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
フォーマットでデータ列をdatetime64型にする	pd.to_datetime(ds, format='%Y-%m-%d')
数から浮動小数点数を引く	x - y
散布図に黒い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
option: フォントの色をパレットトルコイズにする	color = 'paleturquoise'
ヒストグラムの色をパールバイオレットレッドに変更する	plt.hist(データ列, color='palevioletred')
横棒グラフをカーキ色を使って描画する	plt.barh(データ列x, データ列y, color='khaki')
識別子がビルトイン関数	inspect.isbuiltin(識別子)
データフレームの選択したカラムの不偏分散を求める	df[['列A', '列B']].var(ddof=1)
option: フォントの色をミントクリームにする	color = 'mintcream'
リストとリストの散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームを降順にある列によって並べ直す	df.sort_values(by='列A', ascending=False)
リストと数列についての散布図に赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
year年month月を日付にする	datetime.date(year=year, month=month, day=1)
option: 文字コードを文字列の示す文字コードに指定する	encoding = s
異なるカラムをキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
リストの要素を文字列として、指定した文字列によって結合する	文字列.join(map(str, リスト))
折れ線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
散布図をポイント印で描画する	plt.scatter(データ列x, データ列y, marker='.')
データシリーズの中に存在すると文字列の合計を調べる	ds.isin([value, value2]).sum()
ヒストグラムを青緑色を用いて描画する	plt.hist(データ列, color='turquoise')
変数名がビルトイン	inspect.isbuiltin(識別子)
バイオレット色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
n2行n列の二次元リストを作る	[[0] * n for _ in range(n2)]
カテゴリ列で色分けして、データフレームをにバイオリン図として図示する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームの列の各値は何回出現するか見る	df[col].value_counts()
整数個からk個取り出したときの順列の総数	math.perm(n, k)
昇順にデータフレームをある列でソートする	df.sort_values(by='列A', ascending=True)
option: シスル色を用いる	color = 'thistle'
スタック中の整数の数を数える	両端キュー.count(整数)
ブルーバイオレット色で線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
配列の各要素を双方向キューの先頭に追加する	両端キュー.extendleft(配列)
option: スラグレーにグラフの色をする	color = 'slategrey'
配列の最大	np.max(aArray)
赤いポイントマーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
option: 色をサーモンに設定する	color = 'salmon'
等しい量になるようにn個にデータ列をビニングする	pd.qcut(ds, n)
データ列の折れ線グラフを四角印として描画する	plt.plot(データ列x, データ列y, marker='s')
ファイルパスからストリームを読み込んで、fileとする	file = open(filepath)
ヒストグラムをカデットブルー色を用いて描画する	plt.hist(データ列, color='cadetblue')
指定したカラムの文字列を欠損値にする	df['列A'].replace(値, np.nan)
新しいガウス過程分類モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
リストをn個にビニングする	pd.cut(aList, n)
シスル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
散布図を丸印で描画する	plt.scatter(データ列x, データ列y, marker='o')
配列をヒストグラムにする	plt.hist(データ列)
option: ダイアモンドマーカーを加える	marker = 'D'
散布図を黒い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
文字列があるに存在するか調べる	文字列 not in 別の文字列
散布図に青い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
新しいロッソ回帰モデルを作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
変数の値を一つ増加させたい	X += 1
横棒グラフをコーンフラワーブルー色として描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をコーンズシルクに指定する	plt.hist(データ列, color='cornsilk')
黒い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
全空白文字	string.whitespace
列の文字列長を列として使う	ds.str.len()
ホワイト色のヒストグラムを描画する	plt.hist(データ列, color='white')
横棒グラフをダークスラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategray')
ダークバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
三つの変数の値を順にプリントする	print(変数名, 変数名, 変数名)
青い一点鎖線でイテラブルの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
作画の縦横の比率を同じする	plt.axis('equals')
データフレームを2つの列で昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgrey')
リストを集合にする	set(リスト)
データを最大値を用いて正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
配列を分割数nでビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
変数を改行なしにプリントする	print(変数名, end='')
ポイント印を使ってデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームのn番目の行を選択する	df.loc[n]
折れ線グラフの色をカーキに指定する	plt.plot(データ列x, データ列y, color='khaki')
イテラブルとイテラブルについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
重複した行だけを取り出す	df[df.duplicated(keep=False)]
グラフをデフォルトでいい感じにする	sns.set()
クロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
黒いダイアモンド印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列を最初のカンマで二分し、、残りを求める	文字列.partition(',')[-1]
行列の累積積	np.cumprod(aArray)
ヒストグラムの色をサドルブラウンにセットする	plt.hist(データ列, color='saddlebrown')
折れ線グラフに黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
タプルの順序をランダムにシャッフルする	tuple(random.sample(タプル, len(タプル)))
乱数の行列を初期化する	np.random.random((行数, 列数))
option: 線の種類を実線に指定する	linestyle = 'solid'
文字列の開始位置以降がsubで始まるかどうか調べる	文字列.startswith(部分文字列, 開始位置)
ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
ヒストグラムの色をサンディーブラウンに変更する	plt.hist(データ列, color='sandybrown')
カラーバーを描く	plt.colorbar()
リストの個数だけ繰り返す	range(len(リスト))
データフレームの選択したカラムのNaNをxに指定する	df[['列A', '列B']].fillna(x)
リストと配列の散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
リストから要素と等しい最初の要素を取り除く	リスト.remove(要素)
データ列を三つ並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
オブジェクトから属性を消す	delattr(obj, プロパティ名)
折れ線グラフの色をパープルに指定する	plt.plot(データ列x, データ列y, color='purple')
リストとイテラブルについて散布図を描画して文字列という簡単な説明用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
グラフを全般的に暗くする	sns.set(pallete='dark')
イテラブルのイミュータブルな集合を準備する	frozenset(イテラブル)
パールゴールデンロッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
バギングとして回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
xの小数点以下'1'桁までの文字列にする	':.1f'.format(x)
クラス分類をMLPで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ディムグレーにヒストグラムの色を変更する	plt.hist(データ列, color='dimgrey')
option: グラフの色をレモンシフォンに変更する	color = 'lemonchiffon'
文字列を最初のセパレータで二分して、後ろの方を使う	文字列.partition(セパレータ)[-1]
赤い点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
タン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
リストとリストについて散布図を描画してポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
計数器をマッピングから作成する	collections.Counter(aDict)
option: どのカラムも行に設定しない	index_col = None
散布図の印を三角にする	plt.scatter(データ列x, データ列y, marker='^')
インデント幅を指定してリストをJSONにエンコードする	json.dumps(リスト, ensure_ascii=False, indent=n)
ヒストグラムの色を茶色に変更する	plt.hist(データ列, color='brown')
書式で列を日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
x軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
データシリーズの欠損値を後の行の値で埋める	ds.fillna(method='bfill')
データフレームを正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
空の階層化辞書	collections.ChainMap()
セットが上位集合もしくは等しいかテストする	セット >= セット2
データフレームの最後5行を抽出する	df.tail(5)
小数点以下'1'桁まで出力する	':.1f' = ':.3f'<nl>print(':.1f'.format(x))
整数が-9以上9以下か判定する	-9 <= 整数 <= 9
option: グラフの色をスチールブルーにする	color = 'steelblue'
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
全ての句点文字	string.punctuation
データフレームの選択したカラムの中の未入力値の合計を数える	df[['列A', '列B']].isna().sum()
青緑色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
リストを引数として展開してプリントする	print(*リスト, sep=',')
クラス分類を確率的勾配降下として行う	model = sklearn.linear_model.SGDClassifier()
プロットをスライドに変更する	sns.set(context='talk')
データフレームの欠損値を平均に減らす	df.fillna(df.mean())
ダークレッド色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
度数分布図の描いて、正規化する	plt.hist(データ列, density=True)
ある列の文字列が正規表現にマッチする行を取り出す	df[df['列A'].str.match(正規表現)]
option: フォントの色をライトシアンに設定する	color = 'lightcyan'
条件がふたつとも成り立つ	条件 and 条件2
文字列中の部分文字列の登場を範囲を指定してカウントする	文字列.count(部分文字列, 開始位置, 終了位置)
二つのデータ列の残差を散布図として描く	sns.residplot(x=データ列, y=データ列)
ベクトルの計算を行う	import numpy as np
文字列から空白を取り除く	文字列.replace('\t', '')
折れ線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
文字列中にひとつも大文字がないか調べる	any(not c.isupper() for c in 文字列)
オールドレース色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
データフレームのあるカラムの曜日は何日目か見る	df['列A'].dt.dayofweek
ひとつでも非数字が文字列中にあるかどうか確認する	any(not c.isdigit() for c in 文字列)
option: パールバイオレットレッド色を用いる	color = 'palevioletred'
配列を四分位数ごとにビニングする	pd.qcut(aArray, 4)
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
option: パウダーブルー色を使用する	color = 'powderblue'
データシリーズはどれだけ分散しているか見る	ds.var()
ファイルを書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='w')
スカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
option: グラフの色をスノーに指定する	color = 'snow'
ヒストグラムをスラグレー色を用いて描画する	plt.hist(データ列, color='slategrey')
リストの最初を使う	リスト[0]
箱髭図でデータ列を作図する	plt.boxplot(データ列)
インディゴ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
データフレームのカラムの欠損値を平均に指定する	df['列A'].fillna(df['列A'].mean())
部分文字列の位置を文字列の最初から探す	文字列.find(部分文字列)
散布図をバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='violet')
散布図の▲マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
折れ線グラフの色をリネンに指定する	plt.plot(データ列x, データ列y, color='linen')
カンマ区切りのファイルをデータフレームとして読み込む	pd.read_csv('file.csv', sep=',')
データフレームを二つの列によって大きい順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
カラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
折れ線グラフを点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
タイムスタンプデータを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
全部ValueMapでデータフレームの一部のカラムの値を置き換える	df[['列A', '列B']].replace(ValueMap)
プロットの背景色を暗くする	sns.set(style='darkgrid')
データフレームをValueMapでまとめて置き換える	df.replace(ValueMap)
整数が奇数	整数 % 2 == 1
散布図の大バツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
SVDで整数次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
オブジェクトがモジュール	inspect.ismodule(オブジェクト)
ヒストグラムの色をブラウンに設定する	plt.hist(データ列, color='brown')
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
配列と数列について散布図を描画し、、文字列という補足用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
リネン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
分類モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
データフレームのあるカラムの時刻	df['列A'].dt.hour
データシリーズのNaNを平均値に設定する	ds.fillna(ds.mean())
データ列の折れ線グラフを大バツ印で描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームの一部の列の欠損値を前の行の値に設定する	df[['列A', '列B']].fillna(method='ffill')
文字列をカンマで二分割して、残りを使う	文字列.partition(',')[-1]
行列の標準偏差を計算する	np.std(aArray)
セットから例外なく文字列を取り除く	セット.discard(文字列)
列の一覧を見る	df.info()
option: オレンジレッド色を用いる	color = 'orangered'
文字列中にひとつでも大文字が存在するか判定する	any(c.isupper() for c in 文字列)
実部と虚部から複素数を作る	complex(x, y)
整数が1、もしくは2、もしくは3に等しいかどうか調べる	整数 == 1 or 整数 == 2 or 整数 == 3
リストから要素と等しい最初の要素を除く	リスト.remove(要素)
棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
文字列中にひとつも空白が含まれない	any(not c.isspace() for c in 文字列)
セットの浅いコピーを作る	セット.copy()
横方向に複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
線形回帰データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
整数を十六進文字列に変換する	hex(整数)[2:]
rgbの丸マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: ナバホホワイトを用いる	color = 'navajowhite'
整数が一桁か	-9 <= 整数 <= 9
オリベドラブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
大バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
双方向キューをリストに変換する	list(両端キュー)
フクシア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
横棒グラフをダークオレンジ色を使って描画する	plt.barh(データ列x, データ列y, color='darkorange')
散布図をポイントマーカーとして描画する	plt.plot(データ列x, データ列y, marker='.')
配列と配列について散布図をプロットして、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
赤い△マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データシリーズの中にあるの個数を求める	ds.isin([value]).sum()
キーが辞書上で未定義	キー not in 辞書
データフレームのあるカラムを最初のカテゴリーを除き、ワンホット・ベクトルに変換する	pd.get_dummies(df['列A'], drop_first=True)
カウンタをセットにする	set(aCounter)
文字列を評価する	eval(s)
yについて数式の積分を行う	sympy.integrate(数式, y)
折れ線グラフの▲印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
最初の区切り文字で文字列を二分する	文字列.partition(セパレータ)
データシリーズのNaNを前の行の値で埋める	ds.fillna(method='ffill')
option: ロイヤルブルーにグラフの色を設定する	color = 'royalblue'
ふたつの列を組み合わせてグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
黒い大バツマーカーを数列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
配列のKurtosisを計算する	scipy.stats.kurtosis(配列, bias=False)
縦棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データシリーズの欠損値をモードに設定する	ds.fillna(ds.mode().iloc[0])
データシリーズの中に含まれる文字列と日付データの合計を数える	ds.isin([value, value2]).sum()
整数2がn以上かつ、n3以下か調べる	整数 <= 整数2 and 整数2 <= n3
MSDとして多次元データを文字列次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
option: カンマをセパレータで用いる	sep = ','
option: 貝殻にグラフの色を設定する	color = 'seashell'
ルートの階層化マップを作る	collections.ChainMap()
プロットの使途をポスターに指定する	sns.set(context='poster')
行列の計算を行う	import numpy as np
MSDで多次元データを文字列次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
データフレームの選択した列の文字列を未入力値に変換する	df[['列A', '列B']].replace(値, np.nan)
データフレームのカラム名を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
横棒グラフをラベンダーブラッシュ色を用いて描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
コーラル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
文字列がリストに含まれない	文字列 not in リスト
両端キューのn番目に文字列を途中追加する	両端キュー.insert(n, 文字列)
整数が1、もしくは2もしくは3に等しいか調べる	整数 == 1 or 整数 == 2 or 整数 == 3
文字が指定された文字列に存在する	文字 in 文字列
option: グレーにグラフの色を設定する	color = 'grey'
縦棒グラフを描画し、バーの幅をする	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフを青緑色を用いて描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: グラフの色をバリーウッドに変更する	color = 'burlywood'
散布図に赤いポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c='r')
データ構造を使う	import collections
菱形印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
カウンタを辞書から作る	collections.Counter(aDict)
色名からカラーコードを求める	matplotlib.colors.cnames[色名]
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
二つのリストの差集合を使う	list(set(リスト).difference(set(リスト2)))
option: ゲインズボロにグラフの色を指定する	color = 'gainsboro'
左三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
辞書をソートしてJSONにエンコードする	json.dumps(辞書, ensure_ascii=False, sort_keys=True)
データフレームを表示するとき、ヘッダー行を右寄せに指定する	pd.set_option('colheader_justify', 'right')
ゲインズボロにヒストグラムの色を指定する	plt.hist(データ列, color='gainsboro')
データフレームの尖度を求める	df.skew()
散布図に菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
範囲を指定して乱数を求める	random.randint(最小値, 最大値)
データフレームのあるカラムの年を使う	df['列A'].dt.year
ラベンダー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
整数をセットに追加する	セット.add(数)
ラベンダーブラッシュにヒストグラムの色を変更する	plt.hist(データ列, color='lavenderblush')
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
year年month月day日hour時minute分を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
ヒストグラムの色をネイビーにセットする	plt.hist(データ列, color='navy')
異なるカラムをキーとして2つのデータフレームを右結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
option: 淡いピンク色を使う	color = 'lightpink'
データフレームを表示するとき、表示する最大行数を減らす	pd.set_option('display.max_rows', n)
あるカラムの文字列が部分文字列で始まらない行を抽出する	df[~ df['列A'].str.startswith(部分文字列)]
回帰分析をランダムフォレストでする	model = sklearn.ensemble.RandomForestRegressor()
オブジェクトにプロパティが存在するかどうか調べる	hasattr(obj, プロパティ名)
option: 茶色にグラフの色を設定する	color = 'brown'
オブジェクトの属性の値を使う	getattr(obj, プロパティ名)
数列から1個ランダムに選んでリストにする	random.choice(数列)
線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
ライトイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
option: ライトスチールブルーにグラフの色を変更する	color = 'lightsteelblue'
文字列の開始位置番目からと終了位置番目までの範囲に部分文字列が存在しないか	文字列.find(部分文字列, 開始位置, 終了位置) == -1
二つのデータフレームを異なる列をキーとして右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
行列のユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
リストとリストについて散布図を描画して、マーカーを大バツにセットする	plt.plot(データ列x, データ列y, marker='X')
変数が0に近づく場合、極限値を求める	sympy.limit(数式, 変数, 0)
棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
option: ピンクにフォントの色を設定する	color = 'pink'
列名一覧をデータ型でフィルタする	df.select_dtypes(型).columns
データフレームからカテゴリデータを選択する	df.select_dtypes('object')
ベクトルから重複を除いた配列を初期化する	np.unique(aArray)
黒い丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
JSONファイルファイル名がか確認する	filename = 'file.txt'  # ファイル name<nl>'.json' = '.csv'<nl>filename.startswith('.json')
グラフ中の(x,y)の場所にデータラベルを表示する	plt.legend(loc=(x, y))
色付きの点線でラインをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
横棒グラフをアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='aquamarine')
日付時刻データは何秒か知る	aDatetime.second
大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
要素を両端キューの最後に追加する	両端キュー.append(要素)
双方向キューの末尾に数列の要素を追加する	両端キュー.extend(数列)
option: ピーチパフにグラフの色を指定する	color = 'peachpuff'
配列の平均の標準誤差を求める	scipy.stats.sem(配列)
区切り記号を使って文字列を区切って、列挙する	文字列.split(セパレータ)
黒いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
リストの値を昇順に並べ変える	sorted(リスト, reverse=True)
option: オーキッドにグラフの色を設定する	color = 'orchid'
線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
ベクトルの分散を求める	np.var(aArray)
文字列は全て数値か確認する	文字列.isnumeric()
リストをひとつ飛ばしで取り出す	リスト[::2]
ヒストグラムの色をミスティローズに指定する	plt.hist(データ列, color='mistyrose')
浮動小数点数の双曲線正接を求める	math.tanh(x)
折れ線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
データ列の各データは何回出現するか調べる	ds.value_counts()
線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
ひとつでも非アスキー文字が文字列中に含まれるかどうか	any(not c.isascii() for c in 文字列)
実数の逆双曲線余弦を求める	math.acosh(x)
横棒グラフをプロットし、下寄せする	plt.barh(ラベル列, データ列, align='edge')
文字列を最後のコロンで二分して後ろの方を使う	文字列.rpartition(':')[-1]
オブジェクトはクラス	inspect.isclass(オブジェクト)
option: スカイブルーにグラフの色を設定する	color = 'skyblue'
カウンタからマッピングを減らす	aCounter.subtract(aDict)
データフレームの一部のカラムを百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
データフレームの指定した列を万の位で四捨五入する	df['列A'].round(-4)
散布図に右三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='>')
カウンタから最も頻出な項目の件数	aCounter.most_common()[1]
ホットピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
縦棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
表の重複した行を数える	df.duplicated().sum()
データフレームの中に文字列とが含まれる	df.isin([value, value2])
データシリーズを百の位で丸めて整数にする	ds.round(-2).astype(int)
整数がタプルのどれかかどうか	aTuple = [0, 1, 2]<nl>整数 in aTuple
散布図のマーカーを星印にする	plt.scatter(データ列x, データ列y, marker='*')
小数点数のcosを計算する	math.cos(x)
あるカラムの値がxより大きい行を抽出する	df[df['列A'] > x]
option: ライトグリーン色を使用する	color = 'lightgreen'
オブジェクトにプロパティが存在する	hasattr(obj, プロパティ名)
フクシア色として散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
option: グラフの色をミディアムオーキッドに変更する	color = 'mediumorchid'
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
ダークオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
option: 淡い茶色色を用いる	color = 'tan'
タイムスタンプデータと日付時刻データの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()//60
珊瑚色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
リストをベクトルに変換する	np.array(aList)
リストと数列の散布図を描画して下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
シエナ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
ペールグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='palegreen')
option: フォントの色を貝殻に指定する	color = 'seashell'
数列を横棒グラフにする	plt.barh(ラベル列, データ列)
線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
グラフの目的をスライドに設定する	sns.set(context='talk')
単位行列を作る	np.eye(行数, 列数)
ファイルのファイル名を求める	os.path.basename(filepath)
ヒストグラムの色をオレンジレッドにセットする	plt.hist(データ列, color='orangered')
数式のxについてのn階偏微分を計算する	sympy.diff(数式, [|変数]x, n)
折れ線グラフの色をオリベドラブに指定する	plt.plot(データ列x, データ列y, color='olivedrab')
ふたつのセットが共通の要素を持たないか確認する	セット.isdisjoint(セット2)
表データをグループ化し、それぞれの最大値を計算する	df.groupby('列A').max()
列から多重集合を作る	collections.Counter(iterable)
要素はセットに含まれないか	要素 not in セット
３変数の最も小さい値を求める	min(x, y, z)
ヒストグラムをターコイズ色として描画する	plt.hist(データ列, color='turquoise')
フォレストグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
リスト内の要素が少なくとも一つ真か調べる	any(リスト)
ロバストな線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
ヒストグラムとしてデータ列を作図する	plt.hist(データ列)
折れ線グラフを赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
赤い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
option: 星マーカーを使用する	marker = '*'
黒いポイントマーカーを配列と配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
option: ミディアムアクアマリンを使用する	color = 'mediumaquamarine'
数列間の相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
箱ひげ図でデータ列を描画する	plt.boxplot(データ列)
データフレームのカラムの尖度を算出する	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームの次元の大きさを調べる	df.shape
赤い破線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
配列の調和平均	scipy.stats.hmean(配列)
グラフに水平方向の破線を付ける	plt.axhline(y=0, linestyle='dashed')
実数の仮数を求める	math.frexp(x)[0]
列の各データが何回出現するか見る	ds.value_counts()
英字の大文字列	string.ascii_uppercase
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightseagreen')
オブジェクトはタプルクラスのインスタンスか調べる	tuple = int<nl>isinstance(obj, tuple)
データフレームの指定した三つの列だけ抽出する	df[['列A', '列B', '列C']]
棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgrey')
配列とリストについて散布図を描いて、左三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
replに全部正規表現でデータフレームの値を置き換える	df.replace(pattern, repl, regex=True)
配列としてデータフレームのあるカラムを抽出する	df['列A'].values
日付時刻データが月曜日	aDatetime.weekday() == 0
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームの列のユニークな要素数	df[col].nunique()
事前にパターンをコンパイルする	re.compile(pattern)
データフレームを関数によって集計して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
数を複素数にする	complex(x)
option: ダーク・スラテグレーに色を設定する	color = 'darkslategrey'
実数の平方根を計算する	math.sqrt(x)
前の行の値でデータフレームの一部のカラムのNaNを埋める	df[['列A', '列B']].fillna(method='ffill')
ゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
カウンタ同士で積集合を求める	aCounter & aCounter2
棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
二つの文字列はケースを無視して同じか	文字列.casefold() == 文字列2.casefold()
option: ミントクリームを用いる	color = 'mintcream'
散布図に左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
点線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
本日が水曜日かどうか調べる	datetime.datetime.today().weekday() == 2
リストと数列について散布図を描画してマーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
線グラフを実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのあるカラムを丸めて整数型にする	df['列A'].round().astype(int)
データフレーム全体をインデックスでソートする	df.sort_index()
グラフの補助目盛りを有効にする	plt.minorticks_on()
スレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
文字列を最後の部分文字列で二分して最初の方を使う	文字列.rpartition(部分文字列)[0]
ラベンダー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
ヒストグラムをライトゴールドロディイエロー色を用いて描画する	plt.hist(データ列, color='lightgoldenrodyellow')
折れ線グラフを四角印として描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームの複数の列を除く	df.drop(['列A', '列B'], axis=1, inplace=True)
ミントクリーム色でヒストグラムを描画する	plt.hist(データ列, color='mintcream')
散布図に大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
浮動小数点数の二乗を求める	x ** 2
行列から重複を除いた行列を初期化する	np.unique(aArray)
横棒グラフを青緑色を用いて描画する	plt.barh(データ列x, データ列y, color='teal')
フォーマットで列をdatetime64型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
赤い星マーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
オレンジレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
折れ線グラフを半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームのn行目より前選択する	df[:n]
散布図を黒いダイアモンドマーカーでプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
ピアソンとしてデータフレームの相関行列を求める	df.corr(method='pearson')
散布図をレモンシフォン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
折れ線グラフの色をライトスレイグレーにする	plt.plot(データ列x, データ列y, color='lightslategray')
文字列中にひとつでも大文字が含まれるか	any(c.isupper() for c in 文字列)
ヒストグラムをスノー色を使って描画する	plt.hist(データ列, color='snow')
列の名前の一覧を使う	df.columns
論理値型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=np.int32)
長さが一致しないときのzip	itertools.zip_longest(iterable, iterable2)
ダークオリーブグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データシリーズの欠損値をその平均で埋める	ds.fillna(ds.mean())
ヒストグラムをフォレストグリーン色を用いて描画する	plt.hist(データ列, color='forestgreen')
既存の配列を元に全要素が0のベクトル	np.zeros_like(aArray)
データ列を折れ線グラフを使って可視化する	plt.plot(データ列x, データ列y)
カラムの名前を指定せずCSVを読み込む	pd.read_csv('file.csv', header=None)
指定したカラムの値で集計し、それぞれの標準偏差を求める	df.groupby('列A').std()
xを太字で出力する	print(f'\033[1m{x}\033[0m')
▼印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
ふたつのタプルを加える	タプル + タプル2
逆余弦	x = 0.33<nl>math.acos(x)
ダークオレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
グラフのy座標の軸ラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
区切り記号で文字列を二分する	文字列.partition(セパレータ)
オブジェクトが名前付きタプルかどうか	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
方程式の解を計算する	sympy.solve(数式)
入力から２つの文字列を読み込む	A, B = map(str, input().split())
日付データにn日を加える	aDate + datetime.timedelta(days=n)
実数を浮動小数点数で割って小数点以下を切り捨てる	x // y
縦棒グラフの色をティールにする	plt.bar(データ列x, データ列y, color='teal')
option: グラフの色をやわらかい青に設定する	color = 'cornflowerblue'
データフレームを四捨五入して整数型にする	df.round().astype(int)
ミディアムアクアマリン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
ティール色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
ライトイエロー色を使ってヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
nと整数が同じ値か	整数 == 整数2
要素はタプルに含まれないか	要素 not in タプル
ピアソンでデータフレームの相関行列を算出する	df.corr(method='pearson')
データフレームをあるカラムの値で集約して各グループごとの件数を知る	df.groupby('列A').size()
ヒストグラムをスラグレー色を使って描画する	plt.hist(データ列, color='slategray')
配列間のピアソンの相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
貝殻色として散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
本日のローカルな日付	datetime.date.today()
書式を使ってデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
複数の文字列を順に表示する	print(文字列, 文字列, 文字列)
データフレームを複数の列によって昇順に破壊的に並べ直す	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
カーネル密度による分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフの色を紺碧にセットする	plt.plot(データ列x, データ列y, color='azure')
データフレームのカラムを選んで重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
リストとデータ列についての散布図にrgbのダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
nで乱数シードを初期化する	random.seed(n)
データフレームをある列のカテゴリでグループ化し、、それぞれのグループ毎の件数を知る	df.groupby('列A').size()
UTF8で追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='utf-8')
データシリーズの値はNaNか調べる	ds.isna()
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
文字列はセットの要素に含まれるかどうか調べる	文字列 in セット
文字化けしないように表計算ファイルファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
ライムグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
折れ線グラフの色をシエナにする	plt.plot(データ列x, データ列y, color='sienna')
変数の値を累乗に増やす	変数 **= 整数
散布図の下三角印の色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: フォントの色をオリベドラブに指定する	color = 'olivedrab'
行列をフラット化する	aArray.flatten()
XをYで割った余りが求めたい	X % Y
折れ線グラフをライトイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightyellow')
文字列中のタブを空白に置換する	文字列.expandtabs(tabsize=n)
半透明の実線を用いてリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ヒストグラムの色をゴールドにセットする	plt.hist(データ列, color='gold')
白色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
数列と数列の散布図を描いて星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列リストを結合してひとつの文字列にする	''.join(文字列)
数式の平方根を算出する	sympy.sqrt(数式)
リストの合計値を求める	sum(リスト)
データシリーズの曜日は何日目か見る	ds.dt.dayofweek
線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
データフレーム全体を降順で行によってソートする	df.sort_index(ascending=False)
イテラブルをシャッフルしてリスト化する	random.sample(イテラブル, len(イテラブル))
option: ダークサーモンにグラフの色を設定する	color = 'darksalmon'
整数2がnより大きく、かつ、n3未満	整数 < 整数2 and 整数2 < n3
二つの条件のうち何れか成り立つ	条件 or 条件2
ダークスラテグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
文字列を最後のコロンで分割して、前半を求める	文字列.rpartition(':')[0]
日付データが水曜日かどうか	aDate.weekday() == 2
棒グラフをホワイトスモーク色を用いて描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
n個に等間隔でリストを分割する	pd.cut(aList, n)
サドルブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
配列をダミー変数にする	pd.get_dummies(配列)
二つの値の小さい方が知りたい	min(X, Y)
スタッキングとしてクラス分類を行う	sklearn.ensemble.StackingClassifier()
折れ線グラフの色をダーク・スラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategrey')
散布図の印の線幅を指定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
現在のワーキングディレクトリ	os.getcwd()
データフレームの一部の列の不偏分散	df[['列A', '列B']].var(ddof=1)
散布図を右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>')
ミントクリーム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
色付きの破線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
両端キューの中に整数は含まれてるか調べる	整数 in 両端キュー
データフレームを並べて下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
データ列と配列について散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
空白区切りでリストを表示する	print(*リスト)
グリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
散布図に赤い下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='r')
線グラフを色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフの色をバリーウッドに変更する	plt.plot(データ列x, データ列y, color='burlywood')
配列の各要素に加算する	aArray + aArray2
option: 色をミディアムターコイズにする	color = 'mediumturquoise'
K最近傍法でクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
識別子はコルーチンか調べる	inspect.iscoroutine(識別子)
option: ブール型を使用する	np.int32 = np.int<nl>dtype = np.int32
オブジェクトが名前付きタプル型かどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
棒グラフをダークオレンジ色を使って描画する	plt.bar(データ列x, データ列y, color='darkorange')
カラーパレットを暗くする	sns.set(pallete='dark')
二つのカラムをキーにして表を小さい順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
リストをヒストグラムにする	plt.hist(データ列)
棒グラフをコーラル色として描画する	plt.bar(データ列x, データ列y, color='coral')
タプル内の要素が全て真	all(タプル)
線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgray')
配列のイミュータブルな集合を新規生成する	frozenset(配列)
option: ミディアムスプリンググリーンに色を指定する	color = 'mediumspringgreen'
アンティークホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフに左三角印を加える	plt.plot(データ列x, データ列y, marker='<')
青い点線でリストの変化を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
文字列が指定した文字列で終わるかどうか調べる	文字列.endswith(部分文字列)
線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
散布図のマーカーの色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
option: フォントの色をミディアムブルーにする	color = 'mediumblue'
ヒストグラムをラベンダー色を用いて描画する	plt.hist(データ列, color='lavender')
option: フォントの色を紺碧に設定する	color = 'azure'
線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
データシリーズのNaNを後の行の値に設定する	ds.fillna(method='bfill')
エポック秒をタイムスタンプに変換する	datetime.datetime.fromtimestamp(timestamp)
文字列が全てアルファベットかテストする	文字列.isalpha()
太字でxを表示する	print(f'\033[1m{x}\033[0m')
散布図をマゼンタ色を用いて描画する	plt.scatter(データ列x, データ列y, color='magenta')
データフレームのある列	df['列A']
割りを書きたい	X / Y
option: グラフの色を黄緑に指定する	color = 'chartreuse'
区間から行列を作る	np.linspace(最小値, 最大値, 要素数)
リストの中の最小値を計算する	min(リスト)
要素がタプルの要素でないかどうか調べる	要素 not in タプル
割りが書きたい	X / Y
棒グラフをダークターコイズ色として描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
黒い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
縦棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
データフレームのあるカラムを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
カーネル密度分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
n×n2の２次元リストを作る	[[0] * n for _ in range(n2)]
オレンジレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
配列とリストについての散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
n回の数値イテラブル	range(n)
散布図の右三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ふたつの集合の差集合を計算する	セット.difference(セット2)
主成分分析で多次元データを要素次元に次元削減する	二 = 2<nl>sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
ふたつの集合のインターセクション	セット.intersection(セット2)
リストのイミュータブルな集合を見る	frozenset(リスト)
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームの行を条件で消す	df[(df['列A'] == x) & (df['列B'] == y)]
タプルを順に表示する	print(*タプル)
文字列をバイト列にする	bytes(s)
折れ線グラフの星印を青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
横棒グラフをライトサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
データフレームの中の列を分割数nを用いてビン分割する	pd.cut(df[col], n)
ダークブルーにヒストグラムの色をセットする	plt.hist(データ列, color='darkblue')
option: △印を用いる	marker = '^'
リストと数列についての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
n×n2の二次元リストを得る	[[0] * n for _ in range(n2)]
青緑色を用いてヒストグラムを描画する	plt.hist(データ列, color='teal')
折れ線グラフをシルバー色として描画する	plt.plot(データ列x, データ列y, color='silver')
赤い印を散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
リストと配列の散布図を描画して、マーカーを上三角に指定する	plt.plot(データ列x, データ列y, marker='^')
スレートブルー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
プログラムを異常終了する	sys.exit(1)
文字列を最後のカンマで二分して前半を使う	文字列.rpartition(',')[0]
データフレームの指定したカラムのNaNを直後の値に設定する	df['列A'].fillna(method='bfill')
文字列中に小文字が含まれるか	any(c.islower() for c in 文字列)
データフレームの選択したカラムを1000の位で丸める	df[['列A', '列B']].round(-3)
列名を指定して表データを右ジョインする	pd.merge(df, df2, on='列A', how='right')
3つの最も大きい値を求める	max(x, y, z)
数列と配列についての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
識別子がビルトイン関数か	inspect.isbuiltin(識別子)
クラス分類をK最近傍法で行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
折れ線グラフの色をレベッカパープルに変更する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームの一部の列の文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
データシリーズを十の位で四捨五入して、整数型にする	ds.round(-1).astype(int)
二つのカラムからグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
線グラフを青い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
第一引数で指定されたファイル名	sys.argv[1]
シスル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
option: タンにグラフの色をする	color = 'tan'
文字列のプレフィックスがsub	文字列.startswith(部分文字列)
ブルーバイオレット色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
散布図に黒い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
標準入力	sys.stdin
折れ線グラフをペルー色を用いて描画する	plt.plot(データ列x, データ列y, color='peru')
ケンドールの順位相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
シーケンスとタプルを連結する	itertools.chain(iterable, iterable2)
数列間のピアソンの積立相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
バイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
option: △マーカーを描画する	marker = '^'
option: 黄色を使う	color = 'yellow'
配列をリストを境界値として分割する	pd.cut(aArray, aList)
散布図にダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
データ列と数列について散布図をプロットして、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
文字列をケースを無視してパターンで分割する	re.split(pattern, s, flags=re.IGNORECASE)
多次元尺度構成法で文字列次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
option: 出力先をファイルに変更する	file = sys.open('file.txt', 'w')
データフレームの選択した列の欠損値を最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
グラフのx軸の名前を設定する	plt.xlabel('x軸ラベル')
棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
数列と配列についての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データシリーズをValueMapでまとめて置換する	ds.replace(ValueMap)
数をn乗する	x ** n
データフレームの選択したカラムのメディアン	df[['列A', '列B']].median()
option: 色を黄緑に設定する	color = 'chartreuse'
紺碧色として散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
折れ線グラフの色をブルーバイオレットに変更する	plt.plot(データ列x, データ列y, color='blueviolet')
データフレームの平均などを見る	df.describe()
データフレームの相関行列をスピアマン相関係数で計算する	df.corr(method='spearman')
データシリーズの中に文字列がある	ds.isin([value])
表データを欠損値を含めてある列の値でグループ化する	df.groupby('列A', dropna=False)
カテゴリでグループ化して、カーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
数値がセットの要素でない	数 not in セット
折れ線グラフの▲マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
横棒グラフをライトグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightgrey')
データフレームが重複しているか	df.duplicated()
option: フォントの色をミディアムターコイズに変更する	color = 'mediumturquoise'
何回まで再帰ができるか、知る	sys.getrecursionlimit()
マッピングをカウンタにする	collections.Counter(aDict)
確率的勾配降下を用いて回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
ある列のカテゴリごとの合計を求める	df.groupby('列A').sum()
散布図に赤い▽マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='r')
勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
データフレームの指定したカラムを1000の位で四捨五入する	df['列A'].round(-3)
ミントクリーム色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
横棒グラフをカデットブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='cadetblue')
ヒストグラムの色をティールにセットする	plt.hist(データ列, color='teal')
ランダムにデータフレームから抽出する	df.sample()
データフレームをある列でグループ化して、それぞれのグループ毎の件数を知る	df.groupby('列A').size()
青い実線で数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
文字列からタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
x座標の目盛りを対数に変更する	plt.xscale('log')
タプルは全て真	all(タプル)
折れ線グラフの色をグリーンイエローに変更する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームの値をValueMapでまとめて変更する	df.replace(ValueMap)
縦棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
折れ線グラフに菱形印を加える	plt.plot(データ列x, データ列y, marker='D')
真紅色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
データフレームを用いる	import numpy as np<nl>import pandas as pd
ヒストグラムを点線として描画する	plt.hist(データ列, linestyle='dotted')
シーグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
パールゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
option: エラーを無視する	errors = 'ignore'
折れ線グラフの下三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームの一部のカラムを正規表現で一度にreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
分類モデルの再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
数列のケンドールの相関係数	scipy.stats.kendalltau(数列, 数列2)
算術計算ライブラリを使用する	import math
散布図をポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームのあるカラムをリストとして選択する	df['列A'].values.tolist()

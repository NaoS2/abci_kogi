マッピングをカウンタに変換する	collections.Counter(aDict)
ヒストグラムをダークゴールデンロッド色として描画する	plt.hist(データ列, color='darkgoldenrod')
文字列を最後の部分文字列で分けたときの残りの文字列	s.rpartition(sub)[-1]
入力から二つの整数値を読む	A, B = map(int, input().split())
大文字を全て見る	string.ascii_uppercase
option: フォントの色をオリーブに設定する	color = 'olive'
データフレームの欠損値を前の値に設定する	df.fillna(method='ffill')
データフレーム中のNaNをドロップしてみる	df.dropna()
option: 四角マーカーを用いる	marker = 's'
横棒グラフをミディアムパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
データフレームの指定した列のSkewness	df['列A'].skew()
ミディアムバイオレットレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
データフレームを百の位で丸めて、整数にする	df.round(-2).astype(int)
option: ライトシアンを使う	color = 'lightcyan'
縦棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
option: 色をスチールブルーに設定する	color = 'steelblue'
データ列の偏りを対数する	np.log(データ列)
散布図のバツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
nがn2未満もしくはn3以上か確認する	n < n2 or n >= n3
折れ線グラフをペルー色を用いて描画する	plt.plot(データ列x, データ列y, color='peru')
線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
option: ヘッダを自動的な連番に変更する	header = None
列を累積する	itertools.accumulate(iterable, operator.mul)
変数を青色でプリントする	print(f'\033[34m{value}\033[0m')
option: ピーチパフ色を用いる	color = 'peachpuff'
ファイルを文字列の示すエンコーディングで開く]	open(filepath, encoding=s)
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
散布図のクロスマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ロバストな線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
正規分布を判定する	scipy.stats.shapiro(df['列A'])
3つのデータフレームを縦に結合する	pd.concat([df, df2, df3], axis=0)
赤い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='r')
オブジェクトを文字列にする	str(obj)
横棒グラフをミスティローズ色として描画する	plt.barh(データ列x, データ列y, color='mistyrose')
散布図をrgbの下三角マーカーを使ってプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
値∉集合	element not in aSet
ファイルのディレクトリ名を使う	os.path.dirname(filepath)
オブジェクトはタプルに含まれるか調べる	element in aTuple
ファイルを書き込みできるようにUTF8でオープンする]	open(filepath, mode='w', encoding='utf-8')
ヒストグラムの色を小麦色に変更する	plt.hist(データ列, color='wheat')
カラムのエポック秒を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
配列と数列の散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
option: ライトグレーにグラフの色を指定する	color = 'lightgray'
日付時刻データの曜日を使う	aDatetime.weekday()
白色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
数が負の数かどうか	x < 0
nがn2の倍数でないか確認する	n % n2 != 0
縦棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
プロットの見栄えをいい感じに指定する	sns.set()
グラフの縦軸のラベルをuntitledにする	plt.ylabel('y軸ラベル')
リストとリストの散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
option: カンマをセパレータで用いる	sep = ','
散布図をオレンジレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orangered')
日付時刻データが月曜日かどうか調べる	aDatetime.weekday() == 0
JSON文字列をデータに変換する	json.loads(jsonString)
ブランチドアーモンド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームのカテゴリデータをダミー変数にする	pd.get_dummies(df)
option: 赤を使う	color = 'red'
option: グラフの色をライトイエローに指定する	color = 'lightyellow'
xが-9以上9以下か	-9 <= x <= 9
空の階層化辞書	collections.ChainMap()
データシリーズの中のNaNの合計を数える	ds.isna().sum()
三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ある列の中の欠損値の数を数える	df['列A'].isna().sum()
縦棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
option: オリベドラブ色を用いる	color = 'olivedrab'
散布図をフォレストグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
プロットのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
option: フォントの色をアンティークホワイトに設定する	color = 'antiquewhite'
文字列の中でパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
数列とリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
自然対数の底	math.e
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
nはn2と等しいかどうか調べる	n == n2
データフレームとしてJSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
rgbのバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフの色をライトスレイグレーにセットする	plt.plot(データ列x, データ列y, color='lightslategray')
黄緑にヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgray')
クラス分類の予測精度をヒートマップで確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ヒストグラムをライム色として描画する	plt.hist(データ列, color='lime')
ライトスチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
散布図の色をブラウンにする	plt.scatter(データ列x, データ列y, color='brown')
赤い線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
ミディアムシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
回帰直線データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
nからn2の範囲を使う	range(n, n2)
丸印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
nが無限に続く整数リスト	itertools.repeat(n)
散布図の左三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
option: エンコーディングをEUCに変更する	encoding = 'euc_jp'
列を等量でn個にビン分割する	pd.qcut(ds, n)
ピアソンを使ってデータフレームの選択したカラムの相関行列を計算する	df[['列A', '列B']].corr(method='pearson')
文字列の先頭から空白やタブを取り除く	s.lstrip()
エクセルファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
option: グラフの色をブラックに変更する	color = 'black'
データフレームの選択したカラムの歪度を求める	df[['列A', '列B']].kurt()
リストとイテラブルの散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
縦棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
散布図をミディアムスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
option: スノーを使う	color = 'snow'
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
分類モデルから目的変数を予測する	y_pred = model.predict(説明変数)
横棒グラフをパールゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
option: ダイアモンド印を描画する	marker = 'D'
赤いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ヒストグラムの色をコーンフラワーブルーに指定する	plt.hist(データ列, color='cornflowerblue')
折れ線グラフの色をパレットトルコイズに指定する	plt.plot(データ列x, データ列y, color='paleturquoise')
スカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
淡い茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
文字列を右寄せする	s.rjust(文字列幅)
タン色でヒストグラムを描画する	plt.hist(データ列, color='tan')
ベクトル間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームのあるカラムの日を求める	df['列A'].dt.day
黒いダイアモンドマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
切片なしの重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: フォントの色をスラグレーに指定する	color = 'slategray'
リストとリストの散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
二つの列からグループ化し合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
データシリーズを10の位で丸めて、整数型にする	ds.round(-1).astype(int)
ダークシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
赤い下三角マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
実数がNaNかどうか調べる	math.isnan(x)
データフレームのカラムの幾何平均	scipy.stats.gmean(df['列A'])
データフレームの指定した列のNaNを直後の値に設定する	df['列A'].fillna(method='bfill')
タプルの項目名を要素に変更する	aDict[key] = element
ダークカーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ベクトルの最大値	np.max(aArray)
折れ線グラフの左三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
縦軸の目盛りの表示値を変更する	plt.yticks(目盛りの値リスト)
リストのn番目の要素を消す	del aList[n]
要素∈セット	element in aSet
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgrey')
折れ線グラフに黒い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
実数の床を算出する	math.floor(x)
ファイルをSJISで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
ファイルパスのセパレータ記号を調べる	os.sep
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
option: ダークグレーを使う	color = 'darkgrey'
線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
データフレームのカラムを散布図で見る	sns.scatterplot(data=df, x='列名', y='列名')
ライトコーラル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
標準出力	sys.stdout
空の多重集合	collections.Counter()
新しい勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
エポック秒をタイムスタンプに変換する	datetime.datetime.fromtimestamp(timestamp)
線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
散布図の▲マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ロイヤルブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
黒い右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
横棒グラフの色をブラウンにする	plt.barh(データ列x, データ列y, color='brown')
option: グラフの色をプラムに指定する	color = 'plum'
データフレームのある列の中に文字列と文字列がある	df['列A'].isin([value, value2])
非数	math.nan
数値を変数について微分する	sympy.diff(e, z)
大バツ印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
option: グラフの色をサーモンに指定する	color = 'salmon'
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
横軸の目盛を表示しない	plt.xticks([])
オブジェクトからプロパティを削除する	delattr(obj, プロパティ名)
カウンタの項目を、その出現回数だけ列挙する	aCounter.elements()
散布図の印を左三角にする	plt.scatter(データ列x, データ列y, marker='<')
データフレームの標準偏差を計算する	df.std()
nとn2の値を足してnとする	n += n2
option: グラフの色をフローラルホワイトに指定する	color = 'floralwhite'
文字列をカンマで区切り、、列挙する	s.split(',')
ファイルパスをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
プレゼンてション用にグラフを指定する	sns.set(context='talk')
逆正弦	math.asin(x)
ミディアムバイオレットレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
散布図の星印の色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
空白で文字列を区切って整数リストに変換する	map(int, s.split())
折れ線グラフの左三角印を青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
浮動小数点数を二乗する	x ** 2
ファイルパスをバイナリできるようにオープンする]	open(filepath, mode='rb')
ヒストグラムをサドルブラウン色として描画する	plt.hist(データ列, color='saddlebrown')
整数nが組のどれかかテストする	n in aTuple
option: アクアにグラフの色を指定する	color = 'aqua'
ロージーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
ファイルパスを開いて]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
ヒストグラムの色をダークゴールデンロッドに指定する	plt.hist(データ列, color='darkgoldenrod')
散布図をミディアムシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ヒストグラムをミディアムパープル色として描画する	plt.hist(データ列, color='mediumpurple')
日付時刻をインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
JSONファイルのファイルを辞書にする	json.load(fin)
折れ線グラフのバツ印の太さを設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
selectorsでマスクしたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
数列と配列についての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
乱数を生成する	random.random()
縦棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
二つの浮動小数点数は近似値	math.isclose(x, x2)
データフレームのヒストグラムを縦横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
文字列を最後の部分文字列で分けたときの最初の文字列	s.rpartition(sub)[0]
行列のムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
散布図をパパイヤウィップ色を用いて描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
スカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
option: 線種を破線に設定する	linestyle = 'dashed'
ローングリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
棒グラフを黄色色として描画する	plt.bar(データ列x, データ列y, color='yellow')
折れ線グラフに▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
散布図の星印の大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
year年day月をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=1)
線グラフの色を淡い茶色に設定する	plt.plot(データ列x, データ列y, color='tan')
データ列と配列について散布図を描画して、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
グラフを画面に設定する	sns.set(context='notebook')
ある列の文字列が正規表現文字列にマッチしないデータを抽出する	df[~df['列A'].str.match(正規表現)]
データフレームの重複した行	df[df.duplicated(keep=False)]
エクセルファイルのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
空の辞書を作る	{}
スラグレーにヒストグラムの色を変更する	plt.hist(データ列, color='slategrey')
データフレームが正規分布からどれだけ、尖っているか見る	df.skew()
モデルのバージョン	version = 'wcce2022-0.1'
プロットの凡例を表示する	plt.legend()
散布図をオリベドラブ色として描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
配列の列ごとの合計値を求める	np.sum(aArray, axis=0)
データ列の変遷を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
nxn2の二次元リスト	[[0] * n for _ in range(n2)]
本日をISO書式の文字列にする	datetime.datetime.today().isoformat()
パレットを全般的に淡くする	sns.set(pallete='muted')
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
小数点数のタンジェント	math.tan(x)
データフレームを整数に丸める	df.round()
正規化された度数分布図を描画する	plt.hist(データ列, density=True)
シルバー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
option: パレットトルコイズ色を用いる	color = 'paleturquoise'
今日の年数	datetime.datetime.today().year
ブランチドアーモンド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
タイムスタンプデータの日数	aDatetime.day
縦軸を対数に変更する	plt.yscale('log')
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
ファイルを書き込みモードでオープンして]fとする	f = open(filepath, mode='w')
ヒストグラムを二つ並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
変数について数値の積分を求める	sympy.integrate(e, z)
実線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
区切りで文字列を分割して文字列リストにする	s.split(sep)
データフレームの中のカラムをリストを境界値としてビン分割する	pd.cut(df[col], aList)
データフレームの選択した列の欠損値をxで埋める	df[['列A', '列B']].fillna(x)
散布図をダークスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
横棒グラフをブラウン色で描画する	plt.barh(データ列x, データ列y, color='brown')
カウンタを列をカウントして、更新する	aCounter.update(iterable)
散布図の▲マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
行列を転置する	aArray.T
赤い点線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
カラム名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
バリーウッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
二つのベクトルを縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
文字列を水色でプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
ヒストグラムの色をチョコレートに変更する	plt.hist(データ列, color='chocolate')
数式の簡単化を行う	sympy.sympify(e)
散布図のマーカーを▲にする	plt.scatter(データ列x, データ列y, marker='^')
多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
オブジェクトはあるクラスか調べる	isinstance(obj, クラス)
データシリーズの年を求める	ds.dt.year
リストとリストについての散布図にrgbの▽マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
rgbの大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
処理中の例外を情報	sys.exc_info()
option: 先頭の行をカラムの名前に設定する	header = 0
リストの要素数だけ繰り返す	range(len(aList))
データシリーズの中にある文字列の数を数える	ds.isin([value]).sum()
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか	s.find(sub, start, end) == -1
散布図の丸印を黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
数値の変数にnを代入する	e.subs(z, n)
線グラフの色をダークオーキッドにする	plt.plot(データ列x, データ列y, color='darkorchid')
横棒グラフを暗い赤色として描画する	plt.barh(データ列x, データ列y, color='darkred')
黄緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
ヒストグラムの色をミスティローズに指定する	plt.hist(データ列, color='mistyrose')
データフレームを表示するとき、ヘッダー行を左寄せに変更する	pd.set_option('colheader_justify', 'left')
データフレームの選択したカラムのNaNを平均で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
ダークスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
ダークマゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
ヒストグラムをコーンフラワーブルー色として描画する	plt.hist(データ列, color='cornflowerblue')
option: グラフの色を白に変更する	color = 'white'
実数を実数で除算して、切り捨てる	x // y
ふたつの集合が集合と互いに素か確認する	aSet.isdisjoint(aSet2)
日付データを文字列を用いてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
データフレームのNaNを中央値に設定する	df.fillna(df.median())
option: グラフの色をゲインズボロに変更する	color = 'gainsboro'
グレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
プロットのグリッドを白くする	sns.set(style='whitegrid')
文字列をユニコード列に変換する	[ord(ch) for ch in s]
整数nの十六進数文字列を使う	hex(n)[2:]
データフレームをソートして新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
xが一桁の数か	-9 <= x <= 9
珊瑚色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
線形回帰分析を行う	model = sklearn.linear_model.LinearRegression()
ガウス過程としてクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
ヒストグラムをゲインズボロ色として描画する	plt.hist(データ列, color='gainsboro')
横軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
option: グラフの色をミディアムターコイズに指定する	color = 'mediumturquoise'
線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
グラフの大きさをセットする	plt.figure(figsize=(横幅, 高さ))
散布図のマーカーを▽印にする	plt.scatter(データ列x, データ列y, marker='v')
option: 色をアクアマリンに設定する	color = 'aquamarine'
ヒストグラムを３つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
CSVファイルのn行目を行として読み込む	pd.read_csv('file.csv', index_col=n)
大きい順に指定した列によってデータフレームをソートする	df.sort_values(by='列A', ascending=False)
カラムの標本標準偏差	df['列A'].std(ddof=1)
タイタニックのデータセットをロードする	df = sns.load_dataset('titanic')
小数点数の双曲線正接	math.tanh(x)
ブースティングで回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
タイムスタンプ型のデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
ベクトルのスカラー倍	aArray * n
ある列の文字列に部分文字列が含まれない行を取り出す	df[~df['列A'].str.contains(部分文字列)]
option: ターコイズ色を用いる	color = 'turquoise'
文字列の中で大文字・小文字を無視して正規表現にマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームをある列によってグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
半透明の破線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
小数点以下3桁までデータフレームを保存する	df.to_csv('file.csv', float_format='%.3f')
リストとデータ列についての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフを青い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
option: ダークマゼンタにグラフの色をセットする	color = 'darkmagenta'
ヒストグラムの色をゴールデンロッドに変更する	plt.hist(データ列, color='goldenrod')
2を底とする小数点数の対数	math.log2(x)
スチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
グラフの描画で暗くカラーパレットを用いる	sns.set(pallete='dark')
バイトオーダを調べる	sys.byteorder
半透明の破線でリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
文字列を最初の部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
縦棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
散布図をライトスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
ダークスレートブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
指定したカラムをキーにしてデータフレームを小さい順にソートする	df.sort_values(by='列A', ascending=True)
キーがマッピング上で未定義かどうか調べる	key not in aDict
無限大を使う	math.inf
SDGで回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
縦棒グラフをディープスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: 紺碧色を用いる	color = 'azure'
リストとリストについての散布図にrgbの三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの選択したカラムの欠損値を直前の値に変更する	df[['列A', '列B']].fillna(method='ffill')
スカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
折れ線プロットにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
ホワイトスモーク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
指定したカラムのカテゴリで集計し、それぞれの標準偏差を求める	df.groupby('列A').std()
折れ線グラフをドジャーブルー色を使って描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
カデットブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
凡例の場所を(x,y)に設定する	plt.legend(loc=(x, y))
ファイルパスの絶対ファイルパスを使う	os.path.abspath(filepath)
option: 文字コードをUTF8に設定する	encoding = 'utf-8'
日付データからn日を減算する	aDate - datetime.timedelta(days=n)
配列の歪みを求める	scipy.stats.skew(配列, bias=False)
折り返しをオフに増やす	pd.set_option('expand_frame_repr', False)
文字列がリストの要素か	element in aList
線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
ヒストグラムの色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
棒グラフをダークグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkgreen')
option: フォントの色をスプリンググリーンにする	color = 'springgreen'
線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
ある列によって昇順に破壊的にデータフレームを並べる	df.sort_values(by='列A', ascending=True, inplace=True)
タイムスタンプデータとタイムスタンプデータの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
棒グラフをコーラル色を用いて描画する	plt.bar(データ列x, データ列y, color='coral')
データ列の折れ線グラフをポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
複数の列からグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
０で全要素を初期化した複素数型の行列を作る	np.zeros(行数, 列数, dtype=bool)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームの選択したカラムのNaNを最頻値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
ヒストグラムをフクシア色を用いて描画する	plt.hist(データ列, color='fuchsia')
折れ線グラフのポイントマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
散布図の菱形印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
リストとリストについての散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
option: アリスブルーを使う	color = 'aliceblue'
右三角マーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
ある列の文字列に部分文字列が存在する行を抽出する	df[df['列A'].str.contains(部分文字列)]
ダークマゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
データ列を全て日付データにする	pd.to_datetime(ds)
データフレームを指定した列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
データフレームのあるカラムをベクトルにする	pd.get_dummies(df['列A'])
散布図を黒い丸マーカーでプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
折れ線グラフの色をダークサーモンに指定する	plt.plot(データ列x, データ列y, color='darksalmon')
リストから文字列と等しい最初の要素を取り除く	aList.remove(element)
列名を指定してデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
データフレームのあるカラムを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
スタック中の要素の位置を使う	deq.index(element)
option: グラフの色をペルーに指定する	color = 'peru'
線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
ミッドナイトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
散布図に青い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
小文字を見る	string.ascii_lowercase
未入力値がある行を破壊的にドロップする	df.dropna(inplace=True)
データフレームの欠損値を数値で埋める	df.fillna(x)
option: 32ビット整数型を使う	dtype = np.int16
日付時刻データが日付時刻データより後ろか	aDatetime > aDatetime2
option: グラフの色を青緑に設定する	color = 'turquoise'
option: 欠損値を含めない	dropna = True
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
黒い左三角マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
折れ線グラフの色をホワイトスモークにセットする	plt.plot(データ列x, データ列y, color='whitesmoke')
リストを黒色で出力する	print(f'\033[30m{value}\033[0m')
円グラフとしてデータ列の割合を描画する	plt.pie(データ列, startangle=90)
グラフの描画で淡く色を使う	sns.set(pallete='muted')
表データの選択した列の相関行列を求める	df[['列A', '列B']].corr()
ベクトルの次元数	aArray.ndim
整数nを十六進文字列にする	hex(n)[2:]
データフレームの指定したカラムの平均など	df['列A'].describe()
２つ並べて箱ひげ図を描く	plt.boxplot([データ列, データ列])
ロジスティック回帰データフレームの散布図にを加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
プログラムを強制的に終了する	sys.exit()
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgrey')
n番目の列をインデックスとしてCSVファイルを読み込む	pd.read_csv('file.csv', index_col=n)
option: ライトサーモンを使用する	color = 'lightsalmon'
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
やわらかい青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームの中にいくつ欠損値が含まれるか数える	df.isna().sum()
折れ線グラフに四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
タプルの最後からn番目以前の要素を取り出す	aTuple[:-n]
データフレームのあるカラムは何秒か見る	df['列A'].dt.second
パウダーブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
ファイルからバイナリストリームをオープンして]fとする	f = open(filepath, mode='rb')
文字列をシンボルにしてパラメータにする	z = sympy.Symbol(s)
カラムの基本統計量を求める	df['列A'].describe()
配列とイテラブルについての散布図に黒い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
リストをヒストグラムにする	plt.hist(データ列)
数列の推移を半透明の実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
折れ線グラフの色をカラーコードで変更する	plt.plot(データ列x, データ列y, color='#800080')
ゼロ埋めされた８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int8)
列をフォーマットで日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
折れ線グラフの下三角印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
縦棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
グラフの見た目を綺麗にする	import seaborn as sns
散布図をダークオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
リストとリストの散布図をプロットしてマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
文字列を空白で分割する	s.split()
棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ダイアモンド印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
文字列を緑色で表示できる文字列に変換する	f'\033[32m{value}\033[0m'
双方向キューは空か調べる	len(deq) == 0
リストを下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
文字列がn回繰り返す列	itertools.repeat(element, n)
データフレームのstart行目からend行目まで取り出す	df[start:end]
名前付きタプルを使う	import collections
折れ線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='gray')
現在の日数	datetime.datetime.today().day
カウンタをイテラブルを用いて更新する	aCounter.update(iterable)
外れ値を除いた配列の分散を算出する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
ライトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
回帰木をグラフ化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
作画の背景色を暗くする	sns.set(style='darkgrid')
折れ線グラフをダークグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgreen')
データフレームの中にいくつ文字列が含まれるかカウントする	df.isin([value]).sum()
折れ線グラフの△マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
データフレームの中であるカラムに重複があれば、消す	df.drop_duplicates(subset='列A', inplace=True)
ファイルを文字コードtextで書き込み用に開く]	open(filepath, mode='w', encoding=text)
折れ線グラフの右三角印を黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
文字列内にひとつでも小文字があるか調べる	any(c.islower() for c in s)
ボックスチャートでデータ列を描画する	plt.boxplot(データ列)
棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
ファイルからnバイト、読み込む	f.read(n)
データフレームの中の列をn個に等間隔でビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
ある列の値ごとの標準偏差	df.groupby('列A').std()
nを十六進表現にする	hex(n)
クラス分類をヒストグラムと勾配ブースティングでする	model = sklearn.ensemble.HistGradientBoostingClassifier()
ダークグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
オプションで、標準出力を出力先にする	file = sys.stdout
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='turquoise')
プロットにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
集合から別の集合との共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
横棒グラフをペールグリーン色として描画する	plt.barh(データ列x, データ列y, color='palegreen')
線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
ヒストグラムをフローラルホワイト色を用いて描画する	plt.hist(データ列, color='floralwhite')
2つのマッピングをネスト化する	collections.ChainMap(aDict, aDict2)
データフレームの中にあるの数を数える	df.isin([value]).sum()
option: グラフの色をマゼンタに指定する	color = 'magenta'
ヒストグラムを黄色色を用いて描画する	plt.hist(データ列, color='yellow')
折れ線グラフにクロスマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの色をシエナに変更する	plt.plot(データ列x, データ列y, color='sienna')
オプションで、ファイルを使用する	file = sys.open(filename, 'w')
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
データフレームの中の列を等しい量になるようにn個にビン分割する	pd.qcut(df[col], n)
データフレームのカラムの尖度を計算する	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームの一部の列の文字列を未入力値に変換する	df[['列A', '列B']].replace(値, np.nan)
データフレームの複数のカラムをドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
データフレームの選択した列の分散	df[['列A', '列B']].var()
option: 文字列の示す文字コードを使う	encoding = s
線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
柱状図でリストを可視化する	plt.hist(データ列)
目盛り線	plt.grid(linewidth=3.0)
凡例の位置を指定する	plt.legend(loc=(x, y))
データシリーズの代表値	ds.describe()
ヒストグラムの色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
ベージュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
t-SNEの準備をする	model = sklearn.manifold.TSNE(n_components=n)
option: EUCを使用する	encoding = 'euc_jp'
散布図をアリスブルー色として描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
濃いシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
散布図の大バツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
横棒グラフをロージーブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='rosybrown')
散布図のマーカーを青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
散布図の丸マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ある列の文字列が部分文字列で終わらないデータを選ぶ	df[~ df['列A'].str.endswith(部分文字列)]
文字列をエンコーディングでバイト列にする	s.encode(encoding=encoding)
データフレームの選択した列の空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
データフレームの列を度数分布図にする	plt.hist(df[column])
▼印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
散布図の下三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
標準出力のバッファを強制表示する	sys.stdout.flush()
データ列の変遷を色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフを一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
配列とデータ列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
浮動小数点数を三乗する	x ** 3
パープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
ピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
ファイルパスを追加モードでオープンする]	open(filepath, mode='a')
標準入力から1行読む	sys.stdin.readline()
線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
リストとデータ列の散布図を描いて、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列を空白で末尾から区切る	s.rsplit()
折れ線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
JSONファイルのファイルを読み込んで、dataとする	data = json.load(fin)
データフレームの選択したカラムの中に存在する文字列の合計をカウントする	df[['列A', '列B']].isin([value]).sum()
ベクトルと同じ大きさの空ベクトルを作る	np.empty_like(aArray)
文字列は印字できるか確認する	s.isprintable()
ふたつの集合は集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
縦棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
データ列を中央値で分割する	pd.qcut(ds, 2)
ホワイトスモーク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
option: エクセルファイルシートの名前を変更する	sheet_name = ['A', 'B']
スプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
オブジェクトが数値か調べる	isinstance(obj, (int,float))
グラフの縦横の比率を等しくする	plt.axis('equals')
ヒストグラムの色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
データ列をy座標、リストをx軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
リストとリストの散布図を描画して、ダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
最大長nの両端キューを作成する	collections.deque(maxlen=n)
文字列の右側から改行を消す	s.rstrip('\n')
プロットの用途をスライドに設定する	sns.set(context='talk')
ファイルをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
データフレーム全体をインデックスによって降順でソートする	df.sort_index(ascending=False)
マッピングのキーを列挙する	aDict.keys()
積み上げ棒グラフをプロットする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
カウンタの文字列一覧	aCounter.keys()
データフレームの一部のカラムの文字列を未入力値にする	df[['列A', '列B']].replace(値, np.nan)
ヒストグラムをロージーブラウン色として描画する	plt.hist(データ列, color='rosybrown')
折れ線グラフを実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
リストとリストについて散布図を描画し、、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
整数個のものからk個取り出した時の並べ方の総数	math.perm(n, k)
データフレームの欠損値を直後の値に増やす	df.fillna(method='bfill')
nが3の倍数	n % 3 == 0
ヒストグラムの色を紺碧に指定する	plt.hist(データ列, color='azure')
オリベドラブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
割合付きの円プロットを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
option: 線の幅を変更する	linewidth = 3.0
nが一桁の数	-9 <= n <= 9
折れ線グラフの色をホットピンクに指定する	plt.plot(データ列x, データ列y, color='hotpink')
ベクトルにはいくつ要素があるか調べる	aArray.size
option: ローングリーンにグラフの色を設定する	color = 'lawngreen'
データフレームから重複を除く	df.drop_duplicates(inplace=True)
数が整数か調べる	x.is_integer()
横棒グラフをオリベドラブ色として描画する	plt.barh(データ列x, データ列y, color='olivedrab')
散布図をrgbの三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
オーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
ヒストグラムをダークマゼンタ色を使って描画する	plt.hist(データ列, color='darkmagenta')
キーがマッピング上で定義済みか調べる	key in aDict
日付時刻データの分	aDatetime.minute
ヒストグラムの上限下限を設定する	plt.hist(データ列, range=(start, end))
文字列から日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
リストをリストを境界値としてビニングする	pd.cut(aList, aList)
追加用にファイルをオープンして]fとする	f = open(filepath, mode='a')
ハニーデュー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
ゼロ埋めされた３２ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
グリーンイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
赤い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='r')
浮動小数点数の小数部	math.modf(x)[0]
リストを引数として展開してプリントする	print(*aList)
線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
データフレームを二つの列でソートしてNaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
nが1、もしくは2もしくは3に等しい	n == 1 or n == 2 or n == 3
数列の推移を点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted')
縦棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
双曲線余弦の逆数	math.acosh(x)
リストをn回、加える	aList * n
棒グラフをミディアムスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
本日が日曜日かどうか判定する	datetime.datetime.today().weekday() == 6
英字の小文字列	string.ascii_lowercase
xが1、もしくは2、もしくは3に等しい	x == 1 or x == 2 or x == 3
オレンジレッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
n進数文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
option: ポイント印を描画する	marker = '.'
データフレームの全列の相関を可視化する	sns.pairplot(df)
縦軸の目盛を整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
option: グラフの色をインディアンレッドに変更する	color = 'indianred'
列のそれぞれを関数でフィルタする	map(func, iterable)
n個にリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
N未満までの配列	np.arange(N)
データフレームをある列で集計し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
リストとリストについて散布図をプロットして、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
カテゴリ列で色分けして、データフレームの全カラムの散布図を見る	sns.pairplot(df, hue='カテゴリ列')
ヒストグラムをグリーン色として描画する	plt.hist(データ列, color='green')
実数は無限大か確認する	math.isinf(x)
逆順のデック	reversed(deq)
データフレームをインポートする	import pandas as pd
option: グラフの色をピンクに指定する	color = 'pink'
ポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.')
option: パウダーブルーを用いる	color = 'powderblue'
最初のコマンド引数を知る	sys.argv[1]
横棒グラフをミディアムターコイズ色として描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
エラーなくマッピングからキーの値を得る	aDict.get(key, None)
散布図の上三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
xを文字列にする	str(x)
ファイルパスを読み込みできるようにオープンする]	open(filepath, mode='r')
文字列の中で複数行対応としてパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
配列をリストを境界値として分割する	pd.cut(aArray, aList)
正則化付き線形回帰モデルを準備する	model = sklearn.linear_model.ElasticNet()
データフレームの中にと文字列がいくつあるか数える	df.isin([value, value2]).sum()
カラムのn次モーメントを求める	scipy.stats.moment(df['列A'], moment=n)
文字列中にひとつでも非小文字があるか調べる	any(not c.islower() for c in s)
option: ラインを細くする	linewidth = 3.0
データフレームのあるカラムをインデックスに増やす	df.set_index('列A')
データ列を二つ並べて箱髭図にする	plt.boxplot([データ列, データ列])
0からnの範囲で	range(n)
線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
option: 大バツ印を用いる	marker = 'X'
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgrey')
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
折れ線グラフのマーカーをバツ印にする	plt.plot(データ列x, データ列y, marker='x')
リストとリストについて散布図をプロットして、マーカーを三角に変更する	plt.plot(データ列x, データ列y, marker='^')
二つのデータフレームを横方向につなぐ	pd.concat([df, df2], axis=1)
ヒストグラムをパパイヤウィップ色を使って描画する	plt.hist(データ列, color='papayawhip')
青紫色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
UTF8を用いて既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
折れ線グラフの色をインディゴに指定する	plt.plot(データ列x, データ列y, color='indigo')
リストから集合	set(iterable)
今日が金曜日か	datetime.datetime.today().weekday() == 4
散布図の丸印を赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
nがリストのどれか	n in aList
データフレームの一部のカラムを百の位で丸める	df[['列A', '列B']].round(-2)
線グラフの色をアンティークホワイトに変更する	plt.plot(データ列x, データ列y, color='antiquewhite')
n行をランダムにデータフレームから重複ありでサンプリングする	df.sample(n, replace=True)
両端キューは空でないか調べる	len(deq) != 0
オブジェクトがリストに含まれるかテストする	element in aList
カウンタの和集合演算する	aCounter | aCounter2
リストの末尾からn番目以前の部分を抽出する	aList[:-n]
option: グリーン色を用いる	color = 'green'
データフレームの選択したカラムを千の位で四捨五入して、整数にする	df[['列A', '列B']].round(-3).astype(int)
数式の部分分数化する	sympy.apart(e)
既存の配列をベースにして全要素が0の配列	np.zeros_like(aArray)
散布図の星マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
データフレームの歪みを求める	df.kurt()
データフレームの相関行列をとして算出する	df.corr(method='kendall')
日付データにn日分、足す	aDate + datetime.timedelta(days=n)
列に列を続けたイテラブル	itertools.chain(iterable, iterable2)
データフレーム全体をインデックスによって昇順にソートする	df.sort_index(ascending=True)
データフレーム中のNaNを除く	df.dropna(inplace=True)
ひとつでも非アルファベットが文字列中に含まれるか調べる	any(not c.isalpha() for c in s)
データフレームのメディアン	df.median()
データフレームを指定したカラムによってソートする	df.sort_values(by='列A')
文字列を評価する	eval(s)
ピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームの指定したカラムを十の位で四捨五入する	df['列A'].round(-1)
ベクトル演算を行う	import numpy as np
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
ゲインズボロにヒストグラムの色を設定する	plt.hist(データ列, color='gainsboro')
配列の各要素に加算する	aArray + aArray2
ゼロ埋めされた符号なし８ビット整数型のベクトル	np.zeros(要素数, dtype=np.uint8)
回帰分析をロバスト推定として行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データシリーズのタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
両端キューのstart番目からend番目までの部分要素を見る	collections.deque(itertools.islice(deq, start, end))
散布図をバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='violet')
sepを区切りにして文字列リストをひとつの文字列にする	sep.join(aStringList)
横棒グラフをゴールド色を用いて描画する	plt.barh(データ列x, データ列y, color='gold')
黒い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
縦棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
縦棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
レモンシフォン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
ファイルを読み込みモードでオープンして]fとする	f = open(filepath, mode='r')
データフレームを二つの列の値によってグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
データフレームの列の値を正規表現patternでまとめてreplに置換する	df['列A'].replace(pattern, repl, regex=True)
変数をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
option: n番目のカラムをインデックスに減らす	index_col = n
文字列はタイトル大文字小文字か判定する	s.istitle()
option: 色をレモンシフォンに変更する	color = 'lemonchiffon'
アリスブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
option: 読み込まないフッタをnに変更する	skipfooter = n
JSONLファイルからデータフレームをロードする	pd.read_json(filename, orient='records', lines=True)
配列とリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
数値を部分分数に展開する	sympy.apart(e)
ふたつの集合の共通部分	aSet.intersection(aSet2)
16進文字列をバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
タイムスタンプデータをエポック秒に変換する	aDatetime.timestamp()
散布図を赤い丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームの指定したカラムを万の位で四捨五入する	df['列A'].round(-4)
カウンタの要素のカウント	aCounter[element]
散布図をダークバイオレット色を使って描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
文字列を変数にする	sympy.Symbol(s)
縦棒プロットを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
文字のユニコードを見る	ord(ch)
スピアマン順位相関係数としてデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
データ列とデータ列についての散布図に赤い上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
偽陽性を避けたい指標を使用する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
茶色にヒストグラムの色を変更する	plt.hist(データ列, color='brown')
集合から全ての要素を除去する	aSet.clear()
ヒストグラムをダークオリーブグリーン色を用いて描画する	plt.hist(データ列, color='darkolivegreen')
データシリーズの欠損値を最頻値に変更する	ds.fillna(ds.mode().iloc[0])
線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
マッピングをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
混同行列をヒートマップを用いて確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
折れ線グラフの印をポイントにする	plt.plot(データ列x, データ列y, marker='.')
行列のデータ型	aArray.dtype()
バイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
折れ線グラフを点線に変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームのカラムのピアソンの積立相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
option: マーカーの色をやわらかい青にする	markerfacecolor = 'cornflowerblue'
year年をタイムスタンプにする	datetime.datetime(year=year, month=1, day=1)
データフレームのある列の値がxより少ない行を抽出する	df[df['列A'] < x]
暗い赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
実数のタンジェントの逆数	math.atan(x)
整数nを8進表現に変換する	oct(n)
ファイルを改行なしで一行ずつ読み込む	f.readline()
棒プロットの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
日付時刻データは何時か知る	aDatetime.hour
標準出力がパイプ	not sys.stdout.isatty()
プロットをプロットする準備をする	import matplotlib.pyplot as plt
データ列を箱髭図にする	plt.boxplot(データ列)
ヒストグラムの色をピーチパフに変更する	plt.hist(データ列, color='peachpuff')
option: イエローグリーンを使う	color = 'yellowgreen'
ミディアムオーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
カラーパレットをパステル調にする	sns.set(pallete='pastel')
パーセプトロンを用いて回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
データフレームの指定したカラムを千の位で丸めて、整数にする	df['列A'].round(-3).astype(int)
折れ線グラフの色をドジャーブルーに変更する	plt.plot(データ列x, データ列y, color='dodgerblue')
日付時刻データの年数を使う	aDatetime.year
折れ線グラフの色をダークレッドに指定する	plt.plot(データ列x, データ列y, color='darkred')
散布図の上三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ピアソンの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
データフレームを二つの列によって集約してグループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
文字列をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
二つの値をスラッシュで区切ってプリントする	print(value, value2, sep='/')
リネン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
データフレームのカラムをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
リストを三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
第一引数のファイルの名前	sys.argv[1]
option: ゴールデンロッドにグラフの色を設定する	color = 'goldenrod'
棒グラフをライトスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
今日が何月か知る	datetime.datetime.today().month
option: ネイビーにグラフの色を設定する	color = 'navy'
option: マーカーの色を指定する	markerfacecolor = '#800080'
散布図の丸印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
あるカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
データフレームの選択したカラムの欠損値を直後の値に指定する	df[['列A', '列B']].fillna(method='bfill')
散布図の星マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
option: ミスティローズ色を用いる	color = 'mistyrose'
リストから重複を取り除く	sorted(set(aList), key=aList.index)
安全に文字列の左側から部分文字列を除去する	s.removeprefix(sub)
折れ線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
浮動小数点数の整数部を計算する	math.modf(x)[1]
データフレームの選択したカラムの中に文字列と文字列がいくつ存在するか数える	df[['列A', '列B']].isin([value, value2]).sum()
あらかじめ複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
列をビン分割する	pd.cut(ds, aList)
option: コーンズシルクを使用する	color = 'cornsilk'
ヒストグラムをダークスラテグレー色として描画する	plt.hist(データ列, color='darkslategray')
単回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
データフレームの複数のカラムを並べて箱ひげ図で描画する	plt.boxplot([df['カラム'], df['カラム']])
year年month月の日付をオブジェクト化する	datetime.date(year=year, month=month, day=1)
インディアンレッド色でヒストグラムを描画する	plt.hist(データ列, color='indianred')
データフレームを散布図でプロット化して、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
横棒プロットを描画して中央寄せする	plt.barh(ラベル列, データ列, align='center')
イテラブルを行列に変換する	np.array(iterable)
データフレームの選択した列の中に文字列があるか調べる	df[['列A', '列B']].isin([value])
ふたつの関係が真上位集合か	aSet > aSet2
アヤメのデータセットをデータフレームとしてロードする	df = sns.load_dataset('iris')
列の重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
データフレームの平均を求める	df.mean()
縦棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
シーグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
書式をマッピングで文字列整形する	formatText.format_map(aDict)
マッピングの項目名の一覧	aDict.keys()
データフレームの選択した列を丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
タイムスタンプデータの時間を見る	aDatetime.time()
データシリーズの空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
空のロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
ヒストグラムと勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
横棒グラフをライトスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
折れ線グラフの色をミディアムブルーに指定する	plt.plot(データ列x, データ列y, color='mediumblue')
回帰モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
option: ダークスラテグレー色を用いる	color = 'darkslategray'
データフレームをソートし、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
文字列中の部分文字列を文字列に全部置き換える	s.replace(sub, newsub)
キーがタプルに存在しないとき、要素を追加する	aDict.setdefault(key, element)
データフレームの列においてどの値が頻出か見る	df['列A'].mode()
option: パレットトルコイズにグラフの色を設定する	color = 'paleturquoise'
上位集合かどうか調べる	aSet.issuperset(aSet2)
option: フォントの色をドジャーブルーに指定する	color = 'dodgerblue'
カウンタのユニークな項目をリストとして得る	list(aCounter)
ヒストグラムをオリーブ色を用いて描画する	plt.hist(データ列, color='olive')
ミディアムシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームのある列を千の位で四捨五入する	df['列A'].round(-3)
データフレームから5行ランダムサンプリングする	df.sample(5)
option: デピンク色を用いる	color = 'deeppink'
ヒストグラムの色を白に変更する	plt.hist(データ列, color='white')
リストの各要素を関数に適用した結果で並べ変える	sorted(aList, key=func)
棒グラフをダークスラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データフレームの指定したカラムの歪度を求める	df['列A'].kurt()
データフレームの欠損値が含まれる箇所を	df.style.highlight_null()
折れ線グラフのバツマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
文字列全体をケースを無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をブラックにする	plt.plot(データ列x, データ列y, color='black')
縦棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
縦棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
データフレームのあるカラムが何曜日か知る	df['列A'].dt.weekday_name
option: ミディアムスプリンググリーン色を用いる	color = 'mediumspringgreen'
三つのデータフレームを縦方向に一つにする	pd.concat([df, df2, df3], axis=1)
option: 色をミントクリームに変更する	color = 'mintcream'
縦横比を等しくする	plt.axis('equals')
ホットピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
標準出力	sys.stdout
平均値と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
本日の日付時刻を算出する	datetime.datetime.now()
最大値・最小値の範囲として一様な疑似乱数を得る	random.uniform(最小値, 最大値)
ヒストグラムをマゼンタ色として描画する	plt.hist(データ列, color='magenta')
組の文字列が最初に見つかるインデックス	aTuple.index(element)
スカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
赤い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフをペールグリーン色として描画する	plt.plot(データ列x, データ列y, color='palegreen')
チップのデータセットをデータフレームとしてロードする	df = sns.load_dataset('tips')
タプルにイテラブルを続ける	itertools.chain(iterable, iterable2)
データフレームの一部の列を千の位で丸める	df[['列A', '列B']].round(-3)
白い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
スレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
横棒グラフをオリーブ色として描画する	plt.barh(データ列x, データ列y, color='olive')
全要素を０で初期化した整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int)
黒いダイアモンドマーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
貝殻色でヒストグラムを描画する	plt.hist(データ列, color='seashell')
実行時の標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
bとn2から成るペアを作る	(n, n2)
パパイヤウィップ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
縦棒グラフをシアン色として描画する	plt.bar(データ列x, データ列y, color='cyan')
オブジェクトにプロパティが存在するかどうか	hasattr(obj, プロパティ名)
横軸だけ目盛線	plt.grid(axis='x')
option: 小麦色色を使用する	color = 'wheat'
全要素を０で初期化した三二ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='grey')
option: ボックスチャートを水平方向にする	vert = False
データフレームの一部のカラムを百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
グラフの中の日本語表示を利用可能にする	sns.set(font='IPAexGothic')
深紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
option: ▼マーカーを描画する	marker = 'v'
option: グレーを用いる	color = 'gray'
option: フォントの色をディムグレーに設定する	color = 'dimgray'
集合の変更不能版	frozenset(aSet)
データフレームの形状	df.shape
連続したベクトルの自動作成する	np.arange(開始値, 終了値, 等差)
nの無限数列を求める	itertools.repeat(n)
説明変数と目的変数で分類モデルを学習する	model.fit(説明変数, 目的変数)
折れ線グラフをアクア色を使って描画する	plt.plot(データ列x, データ列y, color='aqua')
nが2で割り切れない	n % 2 == 1
行列の行ごとの合計値	np.sum(aArray, axis=1)
棒グラフをダークサーモン色として描画する	plt.bar(データ列x, データ列y, color='darksalmon')
横棒グラフを小麦色色として描画する	plt.barh(データ列x, データ列y, color='wheat')
キューの末尾に値を付け加える	deq.append(element)
リストの先頭を除く	aList[1:]
散布図の印を丸にする	plt.scatter(データ列x, データ列y, marker='o')
右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>')
多次元データを主成分分析としてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
2つのデータフレームをつなぐ	pd.concat([df, df2])
タプルの要素を小さい方から並べる	sorted(aTuple, reverse=False)
配列を中央値でビニングする	pd.qcut(aArray, 2)
折れ線グラフをトマト色として描画する	plt.plot(データ列x, データ列y, color='tomato')
日付データからn分減算する	aDate - datetime.timedelta(minutes=n)
散布図の色を黄緑にする	plt.scatter(データ列x, データ列y, color='chartreuse')
線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
配列の標準誤差を使う	scipy.stats.sem(配列)
横棒グラフの色をダークブルーにする	plt.barh(データ列x, データ列y, color='darkblue')
データフレームの指定したカラムの欠損値を最頻値で補う	df['列A'].fillna(df['列A'].mode().iloc[0])
リストのn番目からn2番目までの部分を得る	aList[n:n2]
ビン数nで等量でリストをビン分割する	pd.qcut(aList, n)
アルファベットを全て使う	string.ascii_letters
折れ線グラフの印を丸にする	plt.plot(データ列x, データ列y, marker='o')
指定した列のカテゴリで集計し、平均値を求める	df.groupby('列A').mean()
要素がセットに含まれないか調べる	element not in aSet
オールドレース色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
数を整数で割った余り	x % y
option: コーンフラワーブルー色を使用する	color = 'cornflowerblue'
線グラフの色をライトシアンにする	plt.plot(データ列x, データ列y, color='lightcyan')
非数値データ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
文字列の中のパターンによる全てのマッチを見る	re.findall(pattern, s)
丸印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
option: 行列のデータ型を指定する	dtype = np.int16
新しいリッジ回帰モデルを用意する	model = sklearn.linear_model.Ridge(alpha=正則化項)
option: グリーンイエローにグラフの色を設定する	color = 'greenyellow'
option: チョコレート色を用いる	color = 'chocolate'
折れ線グラフをスノー色を用いて描画する	plt.plot(データ列x, データ列y, color='snow')
縦棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
散布図を紺碧色を用いて描画する	plt.scatter(データ列x, データ列y, color='azure')
出力ストリームに文字列を書き込む	f.write(s)
散布図を暗い赤色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
散布図のバツ印を赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: △マーカーを加える	marker = '^'
リストとリストについての散布図に黒い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
ライトスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
xの小数点以下'2'桁までを表示する	print(':.2f'.format(x))
データシリーズを正規表現patternで全部置き換える	ds.replace(pattern, repl, regex=True)
データシリーズの文字列をNaNに変換する	ds.replace(値, np.nan)
データフレームのあるカラムのタイムゾーンを日本に指定する	df['列A'].tz_convert('Asia/Tokyo')
データ列とリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
文字列が数字か調べる	s.isdigit()
option: グレー色を用いる	color = 'grey'
ヒストグラムの色をクリムゾンに指定する	plt.hist(データ列, color='crimson')
データフレームの選択したカラムを正規表現patternで一度にreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
データ列のエポック秒をdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
辞書にタプルの項目を加えて、更新する	aDict.update(aDict2)
指定した列のカテゴリで集計し、各合計を算出する	df.groupby('列A').sum()
文字列リストをつなげるひとつの文字列にする	''.join(aStringList)
線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
データフレームを表示するとき、列の最大幅をnに増やす	pd.set_option('max_colwidth', n)
散布図にrgbの▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームをある列の値によってグループ化し要約統計量を計算する	df.groupby('列A').describe()
横棒グラフをブルーバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='blueviolet')
ある列の最大値	df.groupby('列A').max()
option: スレートブルー色を使用する	color = 'slateblue'
実数の天井を求める	math.ceil(x)
データフレームを表示するとき、小数点以下の表示精度を減らす	pd.set_option('precision', n)
横棒プロットを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
配列のケンドールの相関係数	scipy.stats.kendalltau(配列, 配列2)
線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
二つの辞書をネストする	collections.ChainMap(aDict, aDict2)
プロットを全般的に濃くする	sns.set(pallete='deep')
あるカラムの値がxに等しく、かつ別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
データシリーズの中に日付データと文字列がある	ds.isin([value, value2])
折れ線グラフのバツ印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図のダイアモンドマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
カウンタをイテラブルから作成する	collections.Counter(iterable)
色付きの破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームの選択したカラムの75パーセンタイル	df[['列A', '列B']].quantile(0.75)
n＋n2	n + n2
カーキ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
option: ダークオレンジを使う	color = 'darkorange'
散布図にrgbの菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
K-S検定を行う	scipy.stats.kstest(配列, 'norm')
線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
あるカラムの下位25％	df['列A'].quantile(0.75)
ダークグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
折れ線グラフの大バツ印の色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ヒストグラムの色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
整数nの2進文字列	bin(n)[2:]
ロバスト推定としてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
数式の微分を算出する	sympy.diff(e)
現在の再帰の最大回数を知る	sys.getrecursionlimit()
棒グラフをゴールド色として描画する	plt.bar(データ列x, データ列y, color='gold')
リストと配列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
論文にグラフを指定する	sns.set(context='paper')
文字列を最初の部分文字列によって二分する	s.partition(sub)
右三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='>')
線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
散布図にrgbの下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
レベッカパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
折れ線グラフをゲインズボロ色を用いて描画する	plt.plot(データ列x, データ列y, color='gainsboro')
NULLに等しい値	None
データフレームを2つの列によって昇順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
ヒストグラムの色をアリスブルーに変更する	plt.hist(データ列, color='aliceblue')
数値を簡単化する	sympy.sympify(e)
y座標の目盛りに文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
option: グラフを一点鎖線に設定する	linestyle = 'dashbot'
アクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
文字列の末尾から部分文字列を取り除く	s.removesuffix(sub)
option: 珊瑚色を使用する	color = 'coral'
配列の尖度を使う	scipy.stats.kurtosis(配列, bias=False)
リストと配列について散布図を描画して、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムをシスル色として描画する	plt.hist(データ列, color='thistle')
rgbの星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームをグループ化し、あるカラムに対し分散を求める	df.groupby('列A')['列B'].var()
散布図の下三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
辞書のの一覧	aDict.values()
ロイヤルブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
2つの変数を文字列で区切って表示する	print(value, value2, sep=s)
散布図に星マーカーを加える	plt.scatter(データ列x, データ列y, marker='*')
線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
データフレームの指定したカラムの不偏分散を求める	df['列A'].var(ddof=1)
データフレームから10行、ランダムサンプリングする	df.sample(10)
散布図の右三角マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
文字列の開始位置から終了位置までの範囲で部分文字列の出現	s.count(sub, start, end)
混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ヒストグラムの色をグレーに変更する	plt.hist(データ列, color='gray')
カデットブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
散布図の大バツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
文字列の最初	s[0]
指定したカラムの中にとがいくつあるか求める	df['列A'].isin([value, value2]).sum()
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
赤い四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c='r')
線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
リストの値を消す	aList.clear()
辞書から項目名で指定された値をポップする	aDict.pop(key)
黒い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
イテラブルを両端キューにする	collections.deque(iterable)
リストをビン数nとしてビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
option: フォントの色をライトスチールブルーにセットする	color = 'lightsteelblue'
散布図の色をダークブルーにする	plt.scatter(データ列x, データ列y, color='darkblue')
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
コマンドの第2引数を知る	sys.argv[1]
分子と分母から有理数を用意する	fractions.Fraction(分子, 分母)
データフレームを関数の値によってグループ化し、記述統計量を求める	df.groupby(関数).describe()
線グラフの色をレベッカパープルに変更する	plt.plot(データ列x, データ列y, color='rebeccapurple')
実数を浮動小数点数で割った剰余	math.remainder(x, x2)
行列を平坦化する	aArray.flatten()
日付データをn時間前にする	aDate - datetime.timedelta(hours=n)
スノー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgray')
行列の平均	np.mean(aArray)
現在の曜日を整数で使う	datetime.datetime.today().weekday()
データフレームの先頭を見る	df.head()
列とイテラブルの直積を得る	itertools.product(iterable, iterable2)
大きさnでリストとイテラブルについての散布図を描く	plt.scatter(データ列x, データ列y, s=n)
タイムスタンプデータが金曜日か調べる	aDatetime.weekday() == 4
ヒストグラムの色を青に指定する	plt.hist(データ列, color='blue')
列を文字列リストに変換して、カンマを用いて連結する	','.join(map(str, iterable))
ホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
散布図をrgbの四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列が漢字か確認する	('\u4E00' <= ch <= '\u9FD0')
ある列の値毎の分散	df.groupby('列A').var()
numpyを入れる	import numpy as np
マップのキーに対応した値	aDict.get(key)
実数の符号を同じにする	math.copysign(x, x2)
文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
作画のフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
折れ線グラフの色をミスティローズに指定する	plt.plot(データ列x, データ列y, color='mistyrose')
横棒グラフをナバホホワイト色として描画する	plt.barh(データ列x, データ列y, color='navajowhite')
折れ線グラフのクロス印を赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
日付を表現した文字列をタイムスタンプ型に変換する	pd.to_datetime(日付を表現した文字列)
句読点文字を全部求める	string.punctuation
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
マッピングの値を列挙する	aDict.values()
文字列の最初だけ大文字化する	s.capitalize()
折れ線グラフをダークスラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategray')
日付データと日付データの時間差は何秒か知る	(aDate - aDate2).total_seconds()
n2行n列の2次元リスト	[[0] * n for _ in range(n2)]
option: フォントの色をサンディーブラウンに変更する	color = 'sandybrown'
ベクトルは何次元か調べる	aArray.ndim
折れ線グラフをフォレストグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='forestgreen')
文字列を黒色化する	f'\033[30m{value}\033[0m'
数列とリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()//60
ビン数nとしてデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
赤い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
二つのベクトルを行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
配列の相乗平均を求める	scipy.stats.gmean(配列)
グラフのx軸のラベルを設定する	plt.xlabel('x軸ラベル')
折れ線グラフの色をアクアマリンに指定する	plt.plot(データ列x, データ列y, color='aquamarine')
ハイパボリック・サインの逆数	math.asinh(x)
下位集合か調べる	aSet.issubset(aSet2)
文字列をコロンによって区切って列挙する	s.split(':')
縦棒グラフをスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='skyblue')
線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
クリムゾン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
最初の要素をスタックから取り除く	deq.remove(element)
データフレームの選択したカラムの欠損値をそのメディアンで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
実数を数に加算する	x + y
option: ゲインズボロ色を用いる	color = 'gainsboro'
セットをリストに変換する	list(aSet)
耐火レンガ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
散布図に青い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームのカラムを散布図でグラフ化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
文字列をセパレータで分割して列挙する	s.split(sep)
変数を白色でプリントする	print(f'\033[37m{value}\033[0m')
コマンド引数を一覧として	sys.argv[1:]
図の縦横を変更する	plt.figure(figsize=(横幅, 高さ))
現在が土曜日か調べる	datetime.datetime.today().weekday() == 5
2つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
データフレームの指定したカラムの25パーセンタイル	df['列A'].quantile(0.25)
線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
データフレームがどの程度、分散しているか調べる	df.var()
タイムスタンプデータからn秒分減算する	aDatetime - datetime.timedelta(seconds=n)
散布図の四角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
実部と虚部から複素数を用意する	complex(x, y)
リストとリストの散布図を描画し、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データシリーズのパーセンタイルを求める	ds.quantile(パーセント/100)
線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフに青い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
option: フォントの色をビスクに指定する	color = 'bisque'
ファイルをバイナリ書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='wb')
リストにリストを展開する	aList.extend(aList2)
ケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
データフレームの中の列をビン数nでビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
タプルの値を逆順にする	aTuple[::-1]
ファイルを文字コードtextとしてオープンする]	open(filepath, encoding=text)
複数のデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
ゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
タイムスタンプデータが何分か知る	aDatetime.minute
predicateFuncを適用したときtrueとならないイテラブルの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
カーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
データフレームをSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
リストとリストについて散布図を描画して、バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
xが一桁の正の数	0 <= x <= 9
ライトサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='lightsalmon')
ヒストグラムをプロットして、区間の数を設定する	plt.hist(データ列, bins=区関数)
黒い大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
ヒストグラムの色を赤にセットする	plt.hist(データ列, color='red')
アヤメのデータセットからデータフレームをロードする	df = sns.load_dataset('iris')
両端キュー中の文字列の数を数える	deq.count(element)
ダークオレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
指定したカラムのNaNを中央値に設定する	df['列A'].fillna(df['列A'].median())
データフレームの数値をまとめて小数点以下n桁で四捨五入する	df.round(n)
固有値分解を行う	model = sklearn.decomposition.PCA(n_components=n)
ファイルから書き込みストリームを開いて]fとする	f = open(filepath, mode='w')
文字列を新しい文字列で全て置き換える	s.replace(sub, newsub)
option: パールゴールデンロッド色を用いる	color = 'palegoldenrod'
データフレームから数値データの列のみ抽出する	df.select_dtypes('number')
option: フォントの色をミディアムオーキッドに設定する	color = 'mediumorchid'
全十六進数字	string.hexdigits
散布図のマーカーを大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
データフレームから重複する行を残さずドロップする	df.drop_duplicates(keep=False)
正則化付き回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
データフレームのカラムのケンドールの相関係数	scipy.stats.kendalltau(df['列A'], df['列B'])
predicateFuncが真となるイテラブルの要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフに大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
読み込み用にファイルをオープンする]	open(filepath, mode='r')
option: マーカーを▲に変える	marker = '^'
文字列はタプルの要素でないかどうか確認する	element not in aTuple
option: ライトスカイブルーを使う	color = 'lightskyblue'
散布図をミントクリーム色を使って描画する	plt.scatter(データ列x, データ列y, color='mintcream')
折れ線グラフのダイアモンドマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
カウントプロットを描画する	sns.countplot(x='列名', data=df)
データフレームの選択した列の欠損値を中央値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
リストとイテラブルについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: 青紫色を用いる	color = 'violet'
文字列を紫色にする	f'\033[35m{value}\033[0m'
ライトイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
ヒストグラムの色をミディアムバイオレットレッドに変更する	plt.hist(データ列, color='mediumvioletred')
新しいサポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの平均など	df.describe()
xが1、もしくは2	x == 1 or x == 2
データフレームをある列によってソートして、NaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
データフレームのあるカラムの曜日は何日目か見る	df['列A'].dt.dayofweek
xでデータシリーズの欠損値を補完する	ds.fillna(x)
nがn2以上	n >= n2
データフレームの指定したカラムを百の位で丸めて、整数にする	df['列A'].round(-2).astype(int)
オプションで標準エラーに出力する	file = sys.stderr
縦棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
nの桁数を求める	len(str(n))
折れ線グラフをダークシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: グラフの色をトマトに指定する	color = 'tomato'
文字列の最初から部分文字列を探す	s.find(sub)
データフレームのあるカラムの年度	df['列A'].dt.year
データフレームからランダムに取り出す	df.sample()
茶色色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
option: ライトグレー色を用いる	color = 'lightgray'
分子n分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
折れ線グラフをフローラルホワイト色として描画する	plt.plot(データ列x, データ列y, color='floralwhite')
列の各値の出現数を計算する	ds.value_counts()
nが1、もしくは2か	n == 1 or n == 2
ヒストグラムを点線を用いて描画する	plt.hist(データ列, linestyle='dotted')
青色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
リストとリストについて散布図を描画してマーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
データフレームの選択した列がどの程度、分散しているか見る	df[['列A', '列B']].var()
データフレームのカラムを説明変数にする	説明変数 = df[['列名', '列名2']]
マッピングの項目名とその値をペアとして取り出す	aDict.items()
option: マルーン色を用いる	color = 'maroon'
実数のアークタンジェント	math.atan(x)
データフレームの指定した列を四捨五入して、整数型にする	df['列A'].round().astype(int)
線グラフをサンディーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='sandybrown')
ファイルパスから追加ストリームを開いて]、fとする	f = open(filepath, mode='a')
ブースティングでクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
ベクトルの次元を変形する	aArray.reshape(行数, 列数)
データシリーズのメディアン	ds.median()
リストとリストについて散布図を描画して下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
二つの数値をタブで区切って出力する	print(value, value2, sep='\t')
散布図のマーカーの太さを変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
ゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
点線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ベクトルをフラットにする	aArray.flatten()
データフレームの文字列をNaNに変換する	df.replace(値, np.nan)
最初のカテゴリーを除外してデータフレームのある列をワンホット・ベクトルに変換する	pd.get_dummies(df['列A'], drop_first=True)
文字列を赤色で表示できる文字列にする	f'\033[31m{value}\033[0m'
要素が集合の要素か調べる	element in aSet
nがn2よりも小さいか	n < n2
赤い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームの選択した列の中にいくつ欠損値があるか数える	df[['列A', '列B']].isna().sum()
データフレームの記述統計量	df.describe()
データフレームの一部のカラムの標準偏差	df[['列A', '列B']].std()
棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
ふたつの集合の対称差	aSet.symmetric_difference(aSet2)
ベクトルの行列積	np.matmul(aArray, aArray2)
データ列の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
折れ線グラフの左三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
配列の調和平均を使う	scipy.stats.hmean(配列)
縦棒グラフをライトグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgreen')
縦棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
折れ線グラフの色をミディアムターコイズに変更する	plt.plot(データ列x, データ列y, color='mediumturquoise')
スクリプトの名前を知る	sys.argv[0]
要素が辞書の値として含まれているか	element in aDict.values()
リストの最後	aList[-1]
縦棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
赤い大バツマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図の下三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームの選択したカラムの欠損値を最大値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
配列のスピアマンの相関係数	scipy.stats.spearmanr(配列, 配列2)
淡いピンク色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
データ列の折れ線グラフを大バツ印で描画する	plt.plot(データ列x, データ列y, marker='X')
現在の分	datetime.date.today().minute
文字列を左寄せする	s.ljust(文字列幅)
小麦色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
ヒストグラムの色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
option: グラフの色をブラウンに設定する	color = 'brown'
データフレームをグループ化し、各合計を求める	df.groupby('列A').sum()
青い実線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
行列の転置行列を求める	aArray.T
n番目の列を除いた表	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
option: 印を右三角に変更する	marker = '>'
option: ドジャーブルーを使う	color = 'dodgerblue'
データフレームの指定した3つの列を抽出する	df[['列A', '列B', '列C']]
ライトスチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
縦棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフのポイントマーカーの色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データフレームの選択した列の要約統計量	df[['列A', '列B']].describe()
散布図をライムグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='limegreen')
オブジェクトのプロパティを値に設定する	setattr(obj, プロパティ名, 値)
文字列中の部分文字列を数える	s.count(sub)
線を破線に変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図のダイアモンドマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
オブジェクトは論理値クラスかどうかテストする	isinstance(obj, bool)
折れ線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
リストの個数	len(aList)
ブラック色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
珊瑚色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
option: バイナリモードに変更する	mode = 'rb'
ラベンダーブラッシュ色としてヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
プログラムをエラーとして終了する	sys.exit(1)
カウンタ同士で交差	aCounter & aCounter2
ファイルをUTF8としてオープンする]	open(filepath, encoding='utf-8')
折れ線グラフの色をスレートブルーに指定する	plt.plot(データ列x, データ列y, color='slateblue')
分類モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
折れ線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
浮動小数点数を切り下げる	math.floor(x)
データフレームをグループ化し、それぞれの最小値を計算する	df.groupby('列A').min()
option: 淡いピンク色色を用いる	color = 'lightpink'
下線付きで変数をプリントする	print(f'\033[4m{value}\033[0m')
option: ダークシアン色を使用する	color = 'darkcyan'
ビン数nとしてリストを分割する	pd.cut(aList, n)
色付きの実線としてデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategray')
xを整数にする	int(x)
横棒グラフをダークグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkgreen')
カテゴリ別で色分けしてカーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ダークスラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
option: 色をダークブルーに設定する	color = 'darkblue'
option: マーカーの色をダークレッドにする	markerfacecolor = 'darkred'
行列の形状を求める	aArray.shape
折れ線グラフをパールゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
nが一桁の整数	0 <= n <= 9
線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: グラフの色をダークオレンジに指定する	color = 'darkorange'
少ない順にカウンタを列挙する	aCounter.most_common()[::-1]
タプルの先頭を捨てる	aTuple[1:]
数列と数列についての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
ベクトルの合計値	np.sum(aArray)
マッピングのコピー	dict(aDict)
双方向キューの順序を右にn個分回転させる	deq.rotate(n)
整数乱数の配列	np.random.randint(開始値, 終了値, N)
ヒストグラムをダークスレートブルー色を用いて描画する	plt.hist(データ列, color='darkslateblue')
文字列の開始位置以降が部分文字列で開始する	s.startswith(sub, start)
データフレームの列を度数分布図で描画する	plt.hist(df[column])
option: マーカーを四角に指定する	marker = 's'
データシリーズの中にいくつ欠損値が存在するか調べる	ds.isna().sum()
両端キューをクリアする	deq.clear()
実数が有限かどうか調べる	math.isfinite(x)
ダークグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
マッピングをコピーする	aDict.copy()
散布図に赤い▲マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='r')
貝殻色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
option: ナバホホワイトを使う	color = 'navajowhite'
データシリーズのSkewness	ds.skew()
グラフから格子線を消す	plt.grid(False)
文字列を黄色化する	f'\033[33m{value}\033[0m'
データフレームの中に存在する文字列と文字列の合計を数える	df.isin([value, value2]).sum()
option: 印を下三角に変更する	marker = 'v'
縦棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
散布図の▲印の色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
折れ線グラフの上三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフの大バツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ライトコーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
option: グラフの色をライムにセットする	color = 'lime'
タプルを順に表示する	print(*aTuple)
組の長さ	len(aTuple)
エクセルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
option: ブラック色を用いる	color = 'black'
データフレームのあるカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
要素ひとつの組	(element,)
リストとリストの散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
エクセルファイルからデータフレームを読む	pd.read_excel('file.xlsx')
option: データ型として８ビット整数型を使う	dtype = np.int8
ベージュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
グラフに使うフォントを指定する	sns.set(font=フォント名)
ビンを設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
リストをプリントする	print(value)
rgbの右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
nとn2の論理和を求める	n | n2
イテラブルを文字列リストに変換して、部分文字列で一つにする	sub.join(map(str, iterable))
一点鎖線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
ミディアムスプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumspringgreen')
t-SNEを用いてパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
縦棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
エラーを無視して文字列をバイト列にする	s.encode(errors='ignore')
option: オリーブを用いる	color = 'olive'
折れ線グラフの色を貝殻に指定する	plt.plot(データ列x, データ列y, color='seashell')
紺碧色でヒストグラムを描画する	plt.hist(データ列, color='azure')
option: リネン色を用いる	color = 'linen'
ヒストグラムをシーグリーン色を用いて描画する	plt.hist(データ列, color='seagreen')
縦棒グラフを暗い赤色として描画する	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフの印を下三角にする	plt.plot(データ列x, データ列y, marker='v')
option: シアンを使用する	color = 'cyan'
折れ線グラフの色をリネンに指定する	plt.plot(データ列x, データ列y, color='linen')
散布図をモカシン色として描画する	plt.scatter(データ列x, データ列y, color='moccasin')
バギングとして回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
カウンタからマッピングを引く	aCounter.subtract(aDict)
データフレームのインデックスの名前を一度に付け直す	df.rename(index={x: y})
option: フローラルホワイトを使う	color = 'floralwhite'
線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
ヒストグラムをブルーバイオレット色として描画する	plt.hist(データ列, color='blueviolet')
配列の値を変更する	aArray[行番号, 列番号] = 指定の値
文字列の開始位置から終了位置の範囲で部分文字列をカウントする	s.count(sub, start, end)
ビスク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
オプションで出力先を標準出力に変更する	file = sys.stdout
option: バッファリングのサイズを変更する	buffering = 4096
リストに要素を加える	aList.append(element)
異なる列をキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
ファイルパスからの入力ストリームを使う	open(filepath)
今日の月数	datetime.datetime.today().month
方程式として数式のパラメータの解を計算する	sympy.solve(e, z)
リストと数列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
原点から(小数点数,y)の距離	math.hypot(x, y)
データフレームの中の列を等量で分割数nでビン分割する	pd.qcut(df[col], n)
多次元データをt-SNEで濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
列の各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
ターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
リストからサンプリングする	random.sample(iterable)
確率的勾配降下を用いてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
option: ミディアムスプリンググリーンにグラフの色を設定する	color = 'mediumspringgreen'
黒いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='k')
折れ線グラフに下三角印を使用する	plt.plot(データ列x, データ列y, marker='v')
シスル色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームの選択したカラムのNaNを最大値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
散布図を赤色を用いて描画する	plt.scatter(データ列x, データ列y, color='red')
折れ線グラフの左三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
縦棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームとデータシリーズを横につなぐ	pd.concat([df, ds], axis=1)
バリーウッドにヒストグラムの色を設定する	plt.hist(データ列, color='burlywood')
散布図の四角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
エポック秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
グラフに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
データフレームの指定したカラムの値がNaNかどうか調べる	df['列A'].isna()
データフレームの相関行列をスピアマン相関係数で求める	df.corr(method='spearman')
日付データが日付データよりあと	aDate > aDate2
モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
データフレームの中の列を分割数nでビンニングする	pd.cut(df[col], n)
パラメータが0に近づく時の数式の極限値を計算する	sympy.limit(e, z, 0)
折れ線グラフの大バツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
横棒グラフをブランチドアーモンド色として描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
xの小数点以下'5'桁の文字列に変換する	':.5f'.format(x)
折れ線グラフのポイントマーカーを青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
文字列内に数字が含まれるか調べる	any(c.isdigit() for c in s)
縦棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
リストの末尾のn要素を除く	aList[:-n]
目盛線	plt.grid(linestyle='--')
散布図に上三角印を加える	plt.scatter(データ列x, データ列y, marker='^')
列をカテゴリデータに変換する	ds.astype(object)
n2分のnを求める	n / n2
現在のワーキングディレクトリを使う	os.getcwd()
折れ線グラフの四角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
折れ線グラフの色をシアンにする	plt.plot(データ列x, データ列y, color='cyan')
スタックの要素をインプレースに逆順にする	deq.reverse()
散布図をブランチドアーモンド色を用いて描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
ファイルを書き込み用にEUCを使ってオープンする]	open(filepath, mode='w', encoding='euc_jp')
青色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
折れ線グラフの丸マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
散布図にダイアモンドマーカーを用いる	plt.scatter(データ列x, データ列y, marker='D')
データフレームは何行重複するか確認する	df.duplicated().sum()
散布図の▽マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームの最初n行	df.head(n)
散布図をゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
ミッドナイトブルーにヒストグラムの色を変更する	plt.hist(データ列, color='midnightblue')
文字列は全て識別子名	s.isidentifier()
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgray')
文字列の右端からタブを取り除く	s.rstrip('\t')
中央値でリストを分割する	pd.qcut(aList, 2)
option: フォントの色をオレンジに設定する	color = 'orange'
インディアンレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
option: 列名をリストで設定する	names = 列名リスト
横棒グラフをミッドナイトブルー色として描画する	plt.barh(データ列x, データ列y, color='midnightblue')
リストの最後を取り除く	aList[:-1]
ファイルを書き込みできるように開く]	open(filepath, mode='w')
横棒グラフをダークカーキ色として描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
リストを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
アイボリー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
パパイヤウィップ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
プラットホームがマックか調べる	sys.platform.startswith('darwin')
線グラフの色をダークシアンにする	plt.plot(データ列x, データ列y, color='darkcyan')
ヒストグラムの色をディムグレーにセットする	plt.hist(データ列, color='dimgray')
散布図をライトグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightgray')
辞書の項目名の値	aDict[key]
両端キューの順番を左にn個分ローテンションする	deq.rotate(-n)
数列とリストについて散布図を描画して、ポイントマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データシリーズの月を求める	ds.dt.month
縦棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
option: フォントの色をクリムゾンに設定する	color = 'crimson'
データフレームを各列毎にグループ化して文字列というグループの大きさを算出する	df.groupby(column).size()[s]
本日のローカルな日付を使う	datetime.date.today()
オブジェクトの固有のID	id(obj)
カンマ区切りのファイルを読み込む	pd.read_csv('file.csv', sep=',')
二つのオブジェクトが同じ参照か調べる	obj is obj2
y軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
データ列の折れ線グラフを描画し、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
マッピングをチェーンマップに変換する	collections.ChainMap(aDict)
データフレームの指定したカラムを10の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
横棒グラフをライムグリーン色として描画する	plt.barh(データ列x, データ列y, color='limegreen')
カーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: 青にグラフの色を設定する	color = 'blue'
option: ライトサーモンにグラフの色を設定する	color = 'lightsalmon'
数字を全部見る	string.digits
option: 色をイエローグリーンに設定する	color = 'yellowgreen'
ダイアモンドマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
option: 貝殻にグラフの色を設定する	color = 'seashell'
プロットを用いる準備をする	import matplotlib.pyplot as plt
三整数のLCM	math.lcm(n, n2, n3)
追加できるようにファイルをオープンする]	open(filepath, mode='a')
option: グラフの色をグレーにする	color = 'gray'
折れ線グラフの線種を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
アリスブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
多次元尺度構成法として多次元データを淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームのカラムのNaNを直前の値に変更する	df['列A'].fillna(method='ffill')
散布図の四角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
日付時刻データが水曜日	aDatetime.weekday() == 2
列名を指定して2つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
option: グラフの色をパールバイオレットレッドに変更する	color = 'palevioletred'
折れ線グラフをコーンフラワーブルー色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
折れ線グラフをアンティークホワイト色を使って描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
列の各値は何回出現するか調べる	df[col].value_counts()
縦棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
縦棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
サンディーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
option: 先頭の列をインデックスに設定する	index_col = 0
データフレームの列概要	df.info()
散布図に三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
option: ダイアモンドマーカーを用いる	marker = 'D'
縦棒グラフをインディアンレッド色を使って描画する	plt.bar(データ列x, データ列y, color='indianred')
オプションで出力先を標準エラーに設定する	file = sys.stderr
データフレームの列の文字列長を列として求める	df[col].str.len()
散布図をライトゴールドロディイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
バイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
option: グラフの色をタンに指定する	color = 'tan'
散布図をブルーバイオレット色を使って描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
文字列の最後から部分文字列を探す	s.rfind(sub)
ゴーストホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
データシリーズの欠損値を最小値で補う	ds.fillna(ds.min())
データフレームを関数ごとにグループ分けして、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
データフレームの選択したカラムの空文字をNaNに変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
グラフの題名を設定する	plt.title('グラフの名称')
データフレームの指定した列の最頻値	df['列A'].mode()
複数の列からグループ化し、個数を算出する	df.groupby(['列A', '列B'], as_index=False).count()
リストのn番目に文字列を差し込む	aList.insert(n, element)
高頻出方からカウンタを列挙する	aCounter.most_common()
目盛り線	plt.grid(linewidth=3.0)
データシリーズが何時か調べる	ds.dt.hour
大量のデータが正規分布に従うかどうか調べる	scipy.stats.kstest(配列, 'norm')
タプルの各値を関数に適用した結果でソートする	sorted(aTuple, key=func)
ピーチパフ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
0から始まる無限数列を得る	itertools.count()
数値を積分する	sympy.integrate(e)
マッピングの項目名とその項目を列挙する	aDict.items()
散布図をスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='springgreen')
両端キューをタプルにする	tuple(deq)
ダークスラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
オブジェクトは集合	isinstance(obj, set)
目盛り線	plt.grid(alpha=0.5)
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategrey')
option: グラフの色をスカイブルーにセットする	color = 'skyblue'
option: グラフの色を青緑に指定する	color = 'teal'
線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
SVDで多次元データをパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
バイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
数値を展開する	sympy.expand(e)
変数をシアンでプリントする	print(f'\033[36m{value}\033[0m')
散布図のポイントマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
option: フォントの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
一点鎖線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
棒グラフを紺色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームの指定した列の中にいくつ日付データがあるか数える	df['列A'].isin([value]).sum()
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
折れ線グラフのポイント印を黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
真紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
ヒストグラムをディムグレー色を用いて描画する	plt.hist(データ列, color='dimgray')
縦棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
パールバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightseagreen')
黒い三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
オリーブにヒストグラムの色を設定する	plt.hist(データ列, color='olive')
主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
シーグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
S-W検定を行う	scipy.stats.shapiro(配列)
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
辞書から最後に追加した値をポップする	aDict.popitem()
ある列を整数に丸める	df['列A'].round()
データシリーズのNaNを直後の値に設定する	ds.fillna(method='bfill')
データフレームをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
option: データ型として符号なし８ビット整数型を使う	dtype = np.uint8
データ列を折れ線グラフで描画する	plt.plot(データ列x, データ列y)
タプル内の要素は全て真かどうか調べる	all(aTuple)
日付時刻データが日付時刻データより前かどうか調べる	aDatetime < aDatetime2
折れ線グラフの下三角印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
nとn2が等しいかどうか調べる	n == n2
折れ線グラフに青い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
ヒストグラムの色を淡い茶色に変更する	plt.hist(データ列, color='tan')
数を百の位で丸める	round(x, -2)
option: グラフの色をアリスブルーに指定する	color = 'aliceblue'
データフレームの列の名前を全て置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
リストとリストについての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
あらかじめ大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
赤い一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームの上5行を取り出す	df.head(5)
回帰木の重要度をグラフにする	plt.barh(X.columns, model.feature_importances_)
折れ線グラフの星印の大きさを設定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
nが5で割り切れるか	n % 5 == 0
をPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
浮動小数点数の符号をコピーにする	math.copysign(x, x2)
シーケンスをイミュータブルなセットにする	frozenset(iterable)
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
タイムスタンプデータを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
ダークバイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
ダークオリーブグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
クラス分類のPPVを求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図のマーカーの大きさを変える	plt.scatter(データ列x, データ列y, markersize=2.0)
アクア色でヒストグラムを描画する	plt.hist(データ列, color='aqua')
折れ線グラフの丸マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
nがn2で割り切れないか	n % n2 != 0
ヒストグラムをホットピンク色を使って描画する	plt.hist(データ列, color='hotpink')
option: スラグレー色を使用する	color = 'slategray'
棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
オブジェクトはタプル	isinstance(obj, tuple)
option: フォントの色をライトスレイグレーに指定する	color = 'lightslategrey'
縦棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
グラフの描画で色差別なくパレットを使う	sns.set(pallete='colorblind')
日付を使用する	import datetime
データ列の変化を半透明の一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
指定したカラムの欠損値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
ヒストグラムの色をライトスカイブルーに指定する	plt.hist(データ列, color='lightskyblue')
全印字可能な文字	string.printable
カラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームの一部の列の中に文字列と文字列が含まれるか調べる	df[['列A', '列B']].isin([value, value2])
グラフの描画で濃くパレットを使う	sns.set(pallete='deep')
パレットトルコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
ストリームから1文字読み込む	f.read(1)
数値を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
折れ線グラフの右三角印を赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
値が集合のメンバーでない	element not in aSet
セパレータで文字列を区切る	s.split(sub)
オブジェクトが整数クラス	isinstance(obj, int)
線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
文字列の終了位置より前に部分文字列がない	s.find(sub, 0, end) == -1
列自身を2回あわせたデカルト積を求める	itertools.product(iterable, repeat=2)
データフレームの選択したカラムにおいてどの値が頻出か調べる	df[['列A', '列B']].mode()
組の末尾のn要素を取り除く	aTuple[:-n]
横棒グラフをライトブルー色として描画する	plt.barh(データ列x, データ列y, color='lightblue')
散布図をピーチパフ色を用いて描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
文字列が全て数値	s.isnumeric()
散布図にrgbの四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
二つのデータフレームを横に結合する	pd.concat([df, df2], axis=1)
線グラフを半透明の実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ライトサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データシリーズの欠損値を第二四分位数に設定する	ds.fillna(ds.median())
指定したカラムのNaNを最小値で埋める	df['列A'].fillna(df['列A'].min())
散布図をカデットブルー色として描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
モデルの残差を計算する	目的変数 - model.predict(説明変数)
データフレームの下n行を抽出する	df.tail(n)
折れ線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
浮動小数点数の最大値を求める	sys.float_info.max
ふたつの列からグループ化し標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
本日が火曜日	datetime.datetime.today().weekday() == 1
要素一つのりスト	[element]
左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<')
一方に含まれ他方に含まれない集合	aSet.difference(aSet2)
黒い大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
option: エラーがあるとき例外を発生させる	errors = 'strict'
Pandasの日付型の表データのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
ファイルが存在する	os.path.exists(filepath)
n割るn2を求める	n / n2
option: グラフの色をシアンに指定する	color = 'cyan'
データシリーズのどの値が頻出か調べる	ds.mode()
ライトスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
折れ線グラフの色をシャルトリューズに指定する	plt.plot(データ列x, データ列y, color='chartreuse')
option: NaNも無視しない	dropna = True
散布図に大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
データフレームの選択したカラムの中にある文字列と文字列の合計をカウントする	df[['列A', '列B']].isin([value, value2]).sum()
マッピングにキーワード引数で更新する	aDict.update(**kwargs)
折り返しをしない	pd.set_option('expand_frame_repr', False)
昇順にリストの要素をソートする	sorted(aList, reverse=True)
ヒストグラムの色をカーキにセットする	plt.hist(データ列, color='khaki')
整数nの2進表記	bin(n)
データフレームの相関行列をヒートマップでグラフ化する	sns.heatmap(df.corr())
折れ線グラフをミディアムアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: グラフの色をミディアムスレートブルーにする	color = 'mediumslateblue'
データフレームを二つの列の値によってまとめたグループ	df.groupby(['列A', '列B'])
集合にシーケンスを追加更新する	aSet.update(iterable)
外れ値を除いたデータフレームのカラムの分散を使う	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
３つの変数を順に出力する	print(value, value2, value3)
横棒グラフをチョコレート色として描画する	plt.barh(データ列x, データ列y, color='chocolate')
SJISで文字列をバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
データフレームから一つの列だけ取り出す	df[['列A']]
オブジェクトがプロパティを持つかどうか調べる	hasattr(obj, プロパティ名)
散布図に青い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
文字列の先頭が部分文字列かどうか確認する	s.startswith(sub)
組の末尾	aTuple[-1]
折れ線グラフを黄色色を用いて描画する	plt.plot(データ列x, データ列y, color='yellow')
クロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの左三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
指定した列のカテゴリで集計しそれぞれの最大値を計算する	df.groupby('列A').max()
線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
既存の配列を元にして全要素が1の配列を作る	np.ones_like(aArray)
FIXME:カテゴリーデータを出現頻度順に並べる	df['列A'].value_counts().sort_index().index
文字列に漢字が含まれるか判定する	re.search('[\u4E00-\u9FD0]', s)
双方向キューの大きさ	len(deq)
option: 青緑を使用する	color = 'teal'
ファイルパスの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
グラフの色テーマを暗くする	sns.set(pallete='dark')
数を複素数に変換する	complex(x)
折れ線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
ピアソンとしてデータフレームの相関行列を求める	df.corr(method='pearson')
横棒グラフをミディアムオーキッド色として描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
文字列リストをsepを区切りとして結合する	sep.join(aStringList)
option: フォントの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
二つの列を用いてデータフレームを小さい順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
線グラフをライトサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
棒グラフをホットピンク色として描画する	plt.bar(データ列x, データ列y, color='hotpink')
線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
十六進文字列を整数にする	int(s, 16)
折れ線グラフの星マーカーを青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
option: グラフの色をモカシンに指定する	color = 'moccasin'
赤い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='r')
文字コードtextで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding=text)
棒グラフをシャルトリューズ色を用いて描画する	plt.bar(データ列x, データ列y, color='chartreuse')
プラットフォームの符号付き整数の最大値を知る	sys.maxsize
最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
日付時刻データにn週間分、足す	aDatetime + datetime.timedelta(weeks=n)
0からnまでの整数リスト	list(range(n+1))
ヒストグラムの色を青紫に指定する	plt.hist(データ列, color='violet')
ダークレッド色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
文字列を白色化する	f'\033[37m{value}\033[0m'
３つのデータフレームを横向きに連結する	pd.concat([df, df2, df3], axis=1)
貝殻色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
ミッドナイトブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
キューに数値をエンキューする	deq.appendleft(element)
双方向キューをリストにする	list(deq)
折れ線グラフをイエローグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
ハニーデュー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
折れ線グラフの丸印を黒色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
双方向キューを要素を出す	deq.popleft()
小文字を大文字にする	s.upper()
データフレームの選択したカラムの中にいくつ日付データがあるか求める	df[['列A', '列B']].isin([value]).sum()
指定したカラムの母標準偏差を求める	df['列A'].std(ddof=0)
カテゴリデータを連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
nを切り捨てながらn2分の１にする	n //= n2
星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*')
グリッドの線種を点線に変更する	plt.grid(linestyle='dotted')
折れ線グラフの▲印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
散布図にrgbのクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
イテラブルとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
リストを二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ゼロ埋めされた論理値型の配列を作成する	np.zeros(要素数, dtype=np.int32)
データフレームの一部のカラムがどの程度正規分布から尖っているか見る	df[['列A', '列B']].skew()
データフレームをソートし、、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
リストの出現頻度を可視化する	plt.hist(データ列)
フクシア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
option: 色をフクシアに設定する	color = 'fuchsia'
指定した列のカテゴリで集計しそれぞれの最小値を算出する	df.groupby('列A').min()
option: フォントの色をシスルに設定する	color = 'thistle'
グラフの描画でパステル調にパレットを使う	sns.set(pallete='pastel')
符号なしで整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
二つの列からグループ化し、平均値を計算する	df.groupby(['列A', '列B'], as_index=False).mean()
線形回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
組の末尾を取り除く	aTuple[:-1]
クラス分類をバギングで行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
TSVを読み込む	pd.read_csv('file.tsv', sep='\t')
nにn2をかけた値をnとする	n *= n2
データシリーズの欠損値をその平均値で埋める	ds.fillna(ds.mean())
ヒストグラムの線の種類を一点鎖線に指定する	plt.hist(データ列, linestyle='dashbot')
データフレームを各グループ列ごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームをグループ化し、ある列に対し最大値を計算する	df.groupby('列A')['列B'].max()
縦棒グラフをプロットして中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームの末尾100行を選択する	df.tail(100)
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームを二つの列によって降順に破壊的に整列する	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
option: ライトグリーンを使う	color = 'lightseagreen'
パレットトルコイズにヒストグラムの色を指定する	plt.hist(データ列, color='paleturquoise')
ヒストグラムの色をシエナに指定する	plt.hist(データ列, color='sienna')
データフレームを万の位で四捨五入する	df.round(-4)
書式としてデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
ファイルをバイナリモードとしてオープンする]	open(filepath, mode='rb')
線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
折れ線グラフの印を右三角にする	plt.plot(データ列x, データ列y, marker='>')
縦棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
出力ストリームにxを文字列に変換して書き込む	f.write(str(x))
データフレームの欠損値を最頻値に変更する	df.fillna(df.mode().iloc[0])
列名を指定してデータフレームを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
実数の逆双曲線正弦を求める	math.asinh(x)
青緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
部分文字列が文字列の終了位置より前にあるか調べる	s.find(sub, 0, end) != -1
横棒グラフをマゼンタ色を用いて描画する	plt.barh(データ列x, データ列y, color='magenta')
四分位点を用いて標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図にクロスマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
折れ線グラフの左三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームのある列の中に文字列が存在するか調べる	df['列A'].isin([value])
新しい部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: アクアマリン色を使用する	color = 'aquamarine'
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
散布図をシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='cyan')
リストとリストについて散布図を描画し、、マーカーを右三角に変更する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをタン色を用いて描画する	plt.plot(データ列x, データ列y, color='tan')
option: 星マーカーを加える	marker = '*'
縦棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
変数について数値の微分を行う	sympy.diff(e, z)
散布図を小麦色色として描画する	plt.scatter(データ列x, データ列y, color='wheat')
教師データとしてモデルを学習する	model.fit(説明変数, 目的変数)
黒い右三角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
option: ダークカーキにグラフの色を設定する	color = 'darkkhaki'
ヒストグラムの色をドジャーブルーに指定する	plt.hist(データ列, color='dodgerblue')
シアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
数値を太字にする	f'\033[1m{value}\033[0m'
option: ミッドナイトブルーにグラフの色を指定する	color = 'midnightblue'
リストの最初のn要素を取り除く	aList[n:]
データフレームの平均と信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
行列の要素数	aArray.size
option: シエナを用いる	color = 'sienna'
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
データフレームの選択したカラムが正規分布からどの程度、歪んでいるか確認する	df[['列A', '列B']].kurt()
option: 区切りを改行にする	sep = '\n'
配列とリストについての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
リストとリストの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
データ列とリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: 色をゴールドに設定する	color = 'gold'
浮動小数点数を万の位で四捨五入する	round(x, -4)
option: グラフの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
リストとリストの散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ガウス過程回帰モデルを準備する	model = sklearn.gaussian_process.GaussianProcessRegressor()
文字列の右端から空白を取り除く	s.rstrip()
青緑色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
データフレームのあるカラムの標準偏差	df['列A'].std()
option: 印を大バツに変更する	marker = 'X'
黒い星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームの最初100行	df.head(100)
option: ホワイトスモークを使う	color = 'whitesmoke'
option: 色を黄色に変更する	color = 'yellow'
勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
３つの一番小さい値	max(x, y, z)
データフレームの選択したカラムの不偏分散を求める	df[['列A', '列B']].var(ddof=1)
ファイルをオープンして]、書き込みストリームを見る	open(filepath, mode='w')
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
predicateFuncが真になるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
配列の偏差値を計算する	50 + 10 * scipy.stats.zscore(配列)
データフレームの選択した列の平均	df[['列A', '列B']].mean()
整数nの八進表記を使う	oct(n)
現在のエポック秒	int(time.time())
ゼロ埋めされた行列を作る	np.zeros(行数, 列数)
線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
option: 分割記号をコロンにする	sep = ':'
ライトゴールドロディイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
ターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='turquoise')
組の先頭	aTuple[0]
横棒グラフをミントクリーム色を使って描画する	plt.barh(データ列x, データ列y, color='mintcream')
散布図に四角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='s')
リストと配列についての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o')
要素を両端キューにスタックする	deq.append(element)
文字列が全てアスキー文字	s.isascii()
option: グラフの色をスラグレーに指定する	color = 'slategrey'
回帰分析を部分的最小二乗法を用いてする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
文字列中にひとつでも非大文字がある	any(not c.isupper() for c in s)
option: タンを用いる	color = 'tan'
nとkのコンビネーションを求める	math.comb(n, k)
書き込み用にファイルを文字列の示すエンコーディングでオープンする]	open(filepath, mode='w', encoding=s)
配列の値が正規分布にしたがって発生する累積確率を使う	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
折れ線グラフをレベッカパープル色を使って描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
文字列を最初の部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
k進対数	math.log(x, k)
リストを組に変換する	tuple(aList)
文字列の接尾辞が部分文字列か	s.endswith(sub)
折れ線グラフの色をミディアムシアグリーンに指定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
列の長さnの順列	itertools.permutations(iterable, n)
赤い破線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームをグループ化し個数を計算する	df.groupby('列A').count()
凡例をグラフ中の(x,y)の位置に表示する	plt.legend(loc=(x, y))
データフレームをグループ化し、最大値を求める	df.groupby('列A').max()
折れ線グラフを赤い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
サーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
データフレームを並べ直す	df.sort_values('キーとなる列')
データフレームのあるカラムの標本分散	df['列A'].var(ddof=0)
ラベンダーブラッシュ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
プロットを論文用に設定する	sns.set(context='paper')
リストが空でないかどうか調べる	len(aList) != 0
データフレームの数値を全部、丸める	df.round()
円プロットの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
option: 文字コードをBOM付きに設定する	encoding = 'utf_8_sig'
その中央値でデータフレームの未入力値を埋める	df.fillna(df.median())
特異値分解の準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
データフレームの選択したカラムの記述統計量	df[['列A', '列B']].describe()
オブジェクトは浮動小数点数型か調べる	isinstance(obj, float)
日付データの年	aDate.year
option: グラフの色をグリーンに指定する	color = 'green'
縦棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
データフレームをグループ化しある列に対し合計を求める	df.groupby('列A')['列B'].sum()
変数を入れ替える	x, y = y, x
異なる列をキーにして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
データフレームをソートし、、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
あらかじめ正規表現をコンパイルする	re.compile(pattern)
ラベンダーブラッシュ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
文字列全体がパターンにASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
散布図をタン色を用いて描画する	plt.scatter(データ列x, データ列y, color='tan')
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightseagreen')
棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
数式の数値	float(e)
プロットの横軸を対数に変更する	plt.xscale('log')
毎回異なるように乱数を初期化する	random.seed()
ファイルを一行ずつ読む	f.readline()
多次元尺度構成法の準備をする	model = sklearn.manifold.MSD(n_components=n)
文字列を最後の部分文字列で二分し、前半の文字列を見る	s.rpartition(sub)[0]
色名からカラーコードを見る	matplotlib.colors.cnames[色名]
棒グラフをペルー色として描画する	plt.bar(データ列x, データ列y, color='peru')
データシリーズを10の位で四捨五入する	ds.round(-1)
耐火レンガ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
集合が空でない	len(aSet) != 0
ベクトルが何のデータ型か調べる	aArray.dtype()
欠損値も加えてデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
小数点数の2進対数を求める	math.log2(x)
option: フォレストグリーン色を用いる	color = 'forestgreen'
コーンズシルク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
代数計算を用いる	import sympy
option: ライムを使う	color = 'lime'
折れ線グラフの色をライトグリーンにする	plt.plot(データ列x, データ列y, color='lightgreen')
option: 追加モードに指定する	mode = 'a'
文字列内にひとつでも英数字があるか確認する	any(c.isalnum() for c in s)
横棒グラフをシャルトリューズ色として描画する	plt.barh(データ列x, データ列y, color='chartreuse')
データシリーズのNaNをモードで埋める	ds.fillna(ds.mode().iloc[0])
デピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
散らばりを可視化する	plt.scatter(データ列x, データ列y)
縦棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
実行環境の名前	sys.platform
整数nの十六進数表現を使う	hex(n)
文字列が大文字か調べる	s.isupper()
アリスブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
リストの推移を折れ線プロットで可視化する	plt.plot(range(len(データ列)), データ列)
文字列を赤色で表示する	print(f'\033[31m{value}\033[0m')
デックの先頭にシーケンスの各要素を追加する	deq.extendleft(iterable)
イテラブルを文字列として連結する	''.join(map(str, iterable))
option: ライトグレーを使う	color = 'lightgrey'
正弦の逆数	math.asin(x)
指定した列の中にいくつ欠損値が含まれるか数える	df['列A'].isna().sum()
散布図に左三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='<')
現在が何年か知る	datetime.datetime.today().year
縦棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
縦棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
option: 茶色を使う	color = 'brown'
option: ダークカーキを使う	color = 'darkkhaki'
option: データ型としてブール型を使う	dtype = np.int32
n掛けるn2を求める	n * n2
折れ線グラフの色をゴーストホワイトに変更する	plt.plot(データ列x, データ列y, color='ghostwhite')
棒グラフをサドルブラウン色として描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
グラフの使途をポスターに指定する	sns.set(context='poster')
未初期化の配列を作る	np.empty(要素数, dtype=np.int)
双方向キューをイテラブルから作る	collections.deque(iterable)
配列の最頻値を使う	mode, count = scipy.stats.mode(配列)
ミディアムバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
線グラフの色を白に指定する	plt.plot(データ列x, データ列y, color='white')
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
option: 色をゴーストホワイトに設定する	color = 'ghostwhite'
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
文字列を回数を制限して置換する	s.replace(sub, newsub, n)
平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
文字列を最初の部分文字列で分割したときの左側の文字列を使う	s.partition(sub)[0]
データフレームをグループ化し、あるカラムに対し個数を求める	df.groupby('列A')['列B'].count()
データフレームからカテゴリデータの列を取り出す	df.select_dtypes('object')
データフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
散布図をイエローグリーン色として描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
値を黄色でプリントする	print(f'\033[33m{value}\033[0m')
散布図を星印で描画する	plt.scatter(データ列x, データ列y, marker='*')
折れ線グラフの三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
散布図をミディアムスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
散布図のダイアモンド印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
表計算ファイルから複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
データシリーズを1000の位で丸める	ds.round(-3)
ライトスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
リストとリストの散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
データフレームの行を抽出する	df[start:end]
データフレームの一部の列のNaNを最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
option: フォントの色をダークバイオレットにする	color = 'darkviolet'
option: コロンをセパレータで用いる	sep = ':'
線グラフをダークサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='darksalmon')
x軸の目盛を対数に変更する	plt.xscale('log')
カウンタから最頻出な要素の件数	aCounter.most_common()[1]
データ列をビン数nで分割する	pd.cut(ds, n)
option: 色をチョコレートに指定する	color = 'chocolate'
折れ線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームの指定したカラムの中にある日付データと文字列の合計を数える	df['列A'].isin([value, value2]).sum()
箱ひげ図をプロットして、平均値を加える	plt.boxplot(データ列, showmeans=True)
縦棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
辞書の値に要素が含まれていない	element not in aDict.values()
データフレームから散布図を作り線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
データフレームのヒストグラムを横に並べて、描く	sns.displot(df, x='列名', col='カテゴリ名')
横棒グラフをブラック色を用いて描画する	plt.barh(データ列x, データ列y, color='black')
数式のパラメータについてのn階微分を求める	sympy.diff(e, z, n)
区間から配列	np.linspace(最小値, 最大値, 要素数)
多次元データを多次元尺度構成法としてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ダークオリーブグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
表データのあるカラムの時	df['列A'].dt.hour
データフレームを表示するとき、データフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
新しい勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
等差数列をベクトルにする	np.arange(開始値, 終了値, 等差)
折れ線グラフに青い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
重複ありでランダムに10行をデータフレームからサンプリングする	df.sample(10, replace=True)
リストのスピアマンの相関係数を使う	scipy.stats.spearmanr(数列, 数列2)
ファイル名がTSVファイルかどうか	filename.endswith('.tsv')
アクア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
時間を使用する	import time
青い破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
組のn番目以降の部分を抽出する	aTuple[n:]
値を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
マッピングからキーの値か、もしくは要素を得る	aDict.get(key, element)
変数を赤色にする	f'\033[31m{value}\033[0m'
要素をキューのn番目に挿入する	deq.insert(n, element)
データフレームをある列で降順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
文字列を太字で出力する	print(f'\033[1m{value}\033[0m')
ヒストグラムをマルーン色を用いて描画する	plt.hist(データ列, color='maroon')
項目名が辞書に存在する	key in aDict
option: 色をオレンジレッドにセットする	color = 'orangered'
オブジェクトは辞書クラスか	isinstance(obj, dict)
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
棒グラフをスノー色として描画する	plt.bar(データ列x, データ列y, color='snow')
グレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
ファイルからストリームをオープンして]fileとする	file = open(filepath)
縦棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
n個に等間隔でデータ列を分割する	pd.cut(ds, n)
組の中の最小値	min(aTuple)
option: グラフの色をダークグレーにセットする	color = 'darkgrey'
ヒストグラムの色をシアンに指定する	plt.hist(データ列, color='cyan')
ダーク・スラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
散布図をダークオリーブグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
指定したカラムのNaNを最小値に設定する	df['列A'].fillna(df['列A'].min())
インデント幅nで、辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームをBOM付きで保存する	df.to_csv('file.csv', encoding='utf_8_sig')
データシリーズを丸めて、整数にする	ds.round().astype(int)
ヒストグラムの線の種類を点線に指定する	plt.hist(データ列, linestyle='dotted')
既存の配列を元に全要素が初期値のベクトル	np.full_like(aArray, 初期値)
データフレームのあるカラムの中央値	df['列A'].median()
実数で浮動小数点数を	x // y
棒グラフをインディゴ色を用いて描画する	plt.bar(データ列x, データ列y, color='indigo')
文字列が文字列より辞書順で前かどうか調べる	s < s2
データフレームの選択したカラムの値が欠損値かどうか	df[['列A', '列B']].isna()
option: パウダーブルーにグラフの色を指定する	color = 'powderblue'
ヒストグラムをホワイトスモーク色として描画する	plt.hist(データ列, color='whitesmoke')
列の各値が何回出現するか見る	ds.value_counts()
リストの折れ線グラフを描画して、色をRGBとして設定する	plt.plot(データ列x, データ列y, color='#800080')
nがn2かどうか調べる	n == n2
折れ線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームの一部のカラムの第一四分位数	df[['列A', '列B']].quantile(0.25)
データフレームの列からユニークな値を抽出し、リスト化する	df[col].unique().tolist()
ファイルからファイル名を取り出す	os.path.basename(filepath)
オブジェクトの無限イテラブル	itertools.repeat(element)
t-SNEを用いて多次元データを淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
n引くn2	n - n2
ダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D')
実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
指定したカラムの空文字をNaNに変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
ユニークな各要素の頻度を求める	np.unique(aArray, return_counts=True)
nが奇数か	n % 2 == 1
折れ線グラフの丸印の色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データフレームの指定したカラムの文字列を未入力値に変換する	df['列A'].replace(値, np.nan)
横棒グラフを描画して棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データ列をリストを境界値として分割する	pd.cut(ds, aList)
option: ラベンダー色を用いる	color = 'lavender'
option: カーキを用いる	color = 'khaki'
グラフのパレットを指定する	sns.set(pallete=パレット名)
option: ローングリーン色を用いる	color = 'lawngreen'
ターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
色付きの実線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
オブジェクトが関数か確認する	callable(obj)
散布図をディムグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dimgray')
文字列を大文字・小文字を無視して正規表現で分ける	re.split(pattern, s, flags=re.IGNORECASE)
縦棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
ヒストグラムをオレンジ色として描画する	plt.hist(データ列, color='orange')
文字列を代数計算の変数にする	sympy.Symbol(s)
整数nを2進文字列にする	bin(n)[2:]
散布図を黄色色を用いて描画する	plt.scatter(データ列x, データ列y, color='yellow')
データシリーズの中にいくつ文字列が含まれるかカウントする	ds.isin([value]).sum()
３自然数のGCDを求める	math.gcd(n, n2, n3)
ダークゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
散布図を赤い下三角マーカーで描く	plt.plot(データ列x, データ列y, marker='v', c='r')
表データをグループ化し、分散を求める	df.groupby('列A').var()
最大値・最小値で乱数を生成する	random.randint(最小値, 最大値)
日付時刻データの日付を使う	aDatetime.date()
option: 色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
データフレームからn行サンプリングする	df.sample(n)
タイムスタンプデータをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
データフレームの指定したカラムの欠損値を第二四分位数で埋める	df['列A'].fillna(df['列A'].median())
整数のn乗の実数剰余を求める	pow(x, n, y)
数式の変数に数値を代入する	e.subs(z, e2)
データフレームの最後10行を抽出する	df.tail(10)
ライトサーモン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームの空文字を欠損値に変換しドロップする	df.replace('', np.nan).dropna()
ブルーバイオレットにヒストグラムの色を変更する	plt.hist(データ列, color='blueviolet')
カテゴリ別で色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
文字列の左側から部分文字列を除く	s.lstrip(sub)
オブジェクトの種類を使う	type(obj)
行列の行ごとの標準偏差を求める	np.std(aArray, axis=1)
線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
文字列の先頭で正規表現にマッチするか調べる	re.match(pattern, s)
インディゴ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
カテゴリでグループ化して、にバイオリン図としてデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
オブジェクトがリストクラスかどうか	isinstance(obj, list)
コマンドの第一引数	sys.argv[1]
データ列の離れ具合をプロットする	sns.residplot(x=データ列, y=データ列)
カテゴリデータ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ある列の値がxに等しくない行を抽出する	df[df['列A'] != x]
配列を四分位数ごとに分割する	pd.qcut(aArray, 4)
データフレームの選択したカラムのメディアン	df[['列A', '列B']].median()
グループ化してデータフレームの散布図を縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
リスト内の要素が少なくともひとつ真かどうか調べる	any(aList)
配列をビン数nを用いてビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
縦棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
データフレームを表示するとき表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
空集合	set()
データフレームが重複しているかどうか調べる	df.duplicated()
正規分布のパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
xの小数点以下'1'桁までを出力する	print(':.1f'.format(x))
文字列の両端から部分文字列を消す	s.strip(sub)
散布図の大バツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データフレームのある列の欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
option: ライムグリーン色を使用する	color = 'limegreen'
ピーチパフ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
option: エラーを無視するように指定する	errors = 'ignore'
三つの最も小さい値	min(x, y, z)
データフレームのあるカラムの曜日の名前を使う	df['列A'].dt.weekday_name
カウンタをタプルで更新する	aCounter.update(aDict)
データフレームのカラム間の相関行列をまとめて求める	df.corr()
option: 右三角印を描画する	marker = '>'
散布図をダークスラテグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
切り上げて整数にする	math.ceil(x)
データフレームを十の位で丸める	df.round(-1)
半透明の一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
横棒グラフの色をホワイトにする	plt.barh(データ列x, データ列y, color='white')
ふたつの集合のユニオンを求める	aSet.union(aSet2)
実数を小数点で四捨五入する	round(x, n)
ゴーストホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
組内の要素が少なくとも一つ真か調べる	any(aTuple)
ミディアムスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
ブルーバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
option: マーカーをポイントに変える	marker = '.'
nの8進文字列	oct(n)[2:]
横棒グラフをピンク色として描画する	plt.barh(データ列x, データ列y, color='pink')
文字列に日本語が使われているか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
淡いピンク色にヒストグラムの色を指定する	plt.hist(データ列, color='lightpink')
配列とデータ列の散布図をプロットして、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
イテラブルを多重集合に変換する	collections.Counter(iterable)
縦棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
タプルのイミュータブルな集合	frozenset(iterable)
データフレームの選択したカラムのNaNを最頻値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
折れ線グラフの▽マーカーの色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
アクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
関数によってデータフレームをまとめた表	df.groupby(関数)
データ列の推移を青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
nとn2の商を求める	n / n2
折れ線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの色をレモンシフォンに指定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
散布図の四角印を赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
折れ線グラフの△マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
プロットの色を全般的に色差別なくする	sns.set(pallete='colorblind')
シスルにヒストグラムの色を指定する	plt.hist(データ列, color='thistle')
nの二乗を求める	n ** 2
'A'カラムの値がxに等しい行を抽出する	df[df['列A'] == x]
文字列を最後の部分文字列で二分し、残りの文字列を見る	s.rpartition(sub)[-1]
カウンタの項目数を使う	len(aCounter)
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
文字列中のカタカナを平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
指定した列の未入力値を最大値に設定する	df['列A'].fillna(df['列A'].max())
線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
本日が月曜日か	datetime.datetime.today().weekday() == 0
配列を等しい量になるようにビン数nを使ってビンニングする	pd.qcut(aArray, n)
フィシャー流の尖度	scipy.stats.kurtosis(配列, fisher=True, bias=False)
option: グラフの色を紺碧にする	color = 'azure'
ダークオレンジ色でヒストグラムを描画する	plt.hist(データ列, color='darkorange')
データフレームのカラムのトリム平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
プロットを淡くする	sns.set(pallete='muted')
データフレームのカラム間のスピアマンの相関係数	scipy.stats.spearmanr(df['列A'], df['列B'])
赤い点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフに黒い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
データフレームを指定した列によって昇順にソートし、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
閾値を用いてバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
データフレームをグループ化し各平均値を算出する	df.groupby('列A').mean()
線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
データ列の折れ線グラフを左三角印として描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームの中の列を分割する	pd.cut(df[col], aList)
外れ値に強い線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
折れ線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列x, データ列y, color='mediumorchid')
タイムスタンプデータをISO形式の文字列にする	aDatetime.isoformat()
ファイルパスからストリームを読み込み、fileとする	file = open(filepath)
ミディアムオーキッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
行列の最小を求める	np.min(aArray)
リストとリストについての散布図にポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.')
文字列の中の複数行対応としてパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
散布図に黒いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの最初の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
エクセルファイルからシートの名前を指定して読む	pd.read_excel('file.xlsx', sheet_name=シート名)
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
横棒グラフをフローラルホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='floralwhite')
散布図をシャルトリューズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
黒いクロスマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
option: 文字列を分割記号で使う	sep = s
ベクトルの累積積	np.cumprod(aArray)
ヒストグラムをスプリンググリーン色として描画する	plt.hist(データ列, color='springgreen')
双方向キューの末尾から要素を取り除く	deq.pop()
カウンタをタプルから作る	collections.Counter(aDict)
箱髭図でデータ列を可視化する	plt.boxplot(データ列)
黒い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
option: 色をブランチドアーモンドに変更する	color = 'blanchedalmond'
折れ線グラフの印を四角にする	plt.plot(データ列x, データ列y, marker='s')
集合のすべての要素が別の集合に含まれるか確認する	aSet.issubset(aSet2)
データフレームの欠損値を前の値で埋める	df.fillna(method='ffill')
JSON文字列をデータにする	json.loads(b.decode('unicode-escape'))
option: フォントの色をハニーデューに指定する	color = 'honeydew'
標準入力	sys.stdin
改行せず数値を出力する	print(value, end='')
データシリーズの中に存在する文字列と文字列の合計をカウントする	ds.isin([value, value2]).sum()
ヒストグラムをピーチパフ色を用いて描画する	plt.hist(データ列, color='peachpuff')
青い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
文字列内にひとつでもASCII文字が含まれるか調べる	any(c.isascii() for c in s)
ヒストグラムの色をライトスレイグレーにセットする	plt.hist(データ列, color='lightslategrey')
option: 丸印を使う	marker = 'o'
散布図をホットピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='hotpink')
両端キューの中に値は存在するか確認する	element in deq
双方向キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
入力から二つの浮動小数数値を読み込む	A, B = map(float, input().split())
散布図のマーカーを右三角印にする	plt.scatter(データ列x, データ列y, marker='>')
現在の秒数を使う	datetime.date.today().second
線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームの相関行列を可視化する	sns.heatmap(df.corr())
散布図をコーンフラワーブルー色として描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: 改行するの代わりに文字列を用いる	end = s
行によってデータフレーム全体を並べ直す	df.sort_index()
散布図に青い上三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフの色をディムグレーにセットする	plt.plot(データ列x, データ列y, color='dimgray')
option: 小さい順にする	ascending = True
マップの全をクリアする	aDict.clear()
赤い実線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
n進数文字列を整数に変換する	int(s, n)
赤いポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ディープスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるかカウントする	s.count(sub, start, end)
折れ線グラフをダークシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
線グラフの色をダークグリーンにセットする	plt.plot(データ列x, データ列y, color='darkgreen')
データフレームのあるカラムが何日か調べる	df['列A'].dt.day
カウンタの正のカウントのみ残す	+aCounter
ある列の値がx以上y以下の行を抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
両端キューの上限	deq.maxlen
小麦色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
グラフで利用可能な色名の一覧	matplotlib.colors.cnames
データフレームの一部のカラムの未入力値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
option: 色をダークスレートブルーに設定する	color = 'darkslateblue'
縦棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
aListn番目から要素を取り出す	aList.pop(n)
縦棒グラフを描いてラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
タイムスタンプデータと日付時刻データの時間差	aDatetime - aDatetime2
option: グラフの色をラベンダーブラッシュに指定する	color = 'lavenderblush'
range関数の無限バージョン	itertools.count(start=n, step=step)
文字列が部分文字列で終わる	s.endswith(sub)
option: フォントの色をホワイトスモークに設定する	color = 'whitesmoke'
formatパターンの文字列を日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
nがn2以下、または、n3以上かテストする	n <= n2 or n >= n3
option: 色をダークグリーンに設定する	color = 'darkgreen'
パウダーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='powderblue')
散布図をペールグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegreen')
データフレームから100行ランダムサンプリングする	df.sample(100)
文字列をカンマで分割して、文字列リストにする	s.split(',')
ある列の文字列が部分文字列で始まる行を選択する	df[df['列A'].str.startswith(部分文字列)]
折れ線グラフに丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
白色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ファイルを閉じる	f.close()
リストとリストについて散布図をプロットして、その大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
ある列にリストの値が含まれるデータを取り出す	df[df['列A'].isin(リスト)]
option: グラフの種類を破線に指定する	linestyle = 'dashed'
折れ線グラフの色をミディアムスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
横棒グラフをレモンシフォン色として描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
散布図の印をダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
整数を十六進表記の文字列に変換する	x.hex()
スチールブルーにヒストグラムの色を変更する	plt.hist(データ列, color='steelblue')
option: ▲マーカーを描画する	marker = '^'
データフレームのカラムの欠損値を直前の値で置換する	df['列A'].fillna(method='ffill')
データフレームの列の空文字をドロップする	df['列A'].replace('', np.nan).dropna()
データフレームの値を正規表現patternでまとめてreplに置換する	df.replace(pattern, repl, regex=True)
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームを指定した列の値によってグループ化する	df.groupby('列A')
タン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
rgbの左三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
棒グラフをグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='green')
散布図にrgbの左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフをパウダーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='powderblue')
リストをnから番号付けする	enumerate(aList, start=n)
データフレームをある列のカテゴリでグループ化してそれぞれのグループごとの件数を知る	df.groupby('列A').size()
異なるカラムをキーとして２つのデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgrey')
折れ線グラフに星印を使う	plt.plot(データ列x, データ列y, marker='*')
表データを二つの列を用いて昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
本日が水曜日	datetime.datetime.today().weekday() == 2
平均値付き箱ひげ図をプロットする	plt.boxplot(データ列, showmeans=True)
option: ゴーストホワイトを使う	color = 'ghostwhite'
option: グラフの色を耐火レンガに変更する	color = 'firebrick'
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームを指定した列によってまとめたグループ	df.groupby('列A')
縦棒プロットを描画してバーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
赤い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
マッピングに要素を項目名として加える	aDict[key] = element
小数点数の双曲線正弦	math.sinh(x)
ミディアムシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
データフレームの選択したカラムの欠損値を直後の値で補完する	df[['列A', '列B']].fillna(method='bfill')
文字列中の大文字を小文字にする	s.lower()
散布図をコーンズシルク色として描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
タイムスタンプデータが何年か知る	aDatetime.year
実数の逆余弦を求める	math.acos(x)
あるカラムの文字列が部分文字列で終わる行を抽出する	df[df['列A'].str.endswith(部分文字列)]
変数を緑色にする	f'\033[32m{value}\033[0m'
時計回りに円プロットを描く	plt.pie(データ列, startangle=90, counterclock=False)
濃いシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
文字列内にひとつでも大文字が含まれる	any(c.isupper() for c in s)
整数nを符号付きで長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データフレームのある列の値がx以上の行を取り出す	df[df['列A'] >= x]
データフレームを表示するとき、表示できる列数を増やす	pd.set_option('display.max_columns', n)
キューをポップする	deq.pop()
辞書をJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
グラフに格子を入れる	plt.grid(True)
折れ線グラフをマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='magenta')
余弦の逆数	math.acos(x)
リストにリストを追加して広げる	aList.extend(aList2)
ヒストグラムをゴールド色を使って描画する	plt.hist(データ列, color='gold')
ライム色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
小数点数の双曲線余弦	math.cosh(x)
TSVファイルから文字コードを指定してデータフレームをロードする	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
辞書をインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームの指定したカラムの中に存在する文字列の数をカウントする	df['列A'].isin([value]).sum()
option: ピーチパフにフォントの色を設定する	color = 'peachpuff'
xの小数点以下'5'桁までを出力する	print(':.5f'.format(x))
線グラフをレモンシフォン色として描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
文字列を正規表現によって置換する	re.sub(pattern, newsub, s)
文字列が平仮名か確認する	('ぁ' <= ch <= 'ん')
標準エラーを	sys.stderr
線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
文字列が全て十進数字か調べる	s.isdecimal()
２つの文字列は等しい	s == s2
半透明の点線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
珊瑚色のヒストグラムを描画する	plt.hist(データ列, color='coral')
文字列を部分文字列で分割したときの後半の文字列	s.partition(sub)[-1]
ランダム性を追加したランダムフォレストで回帰分析をする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
第二引数で指定されたファイル名	sys.argv[1]
ある列の値がxより大きく、yより小さいデータを抽出する	df[(x < df['列A']) & (df['列A'] < y)]
オブジェクトはタプルに含まれないか調べる	element not in aTuple
配列の列ごとの平均値を求める	np.mean(aArray, axis=0)
正規分布で疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
リストと数列についての散布図に赤い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
option: ダークレッドを用いる	color = 'darkred'
外れ値を除いた配列の算術平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
縦方向に３つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
配列とリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
白色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
赤いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
リストとリストについて散布図を描画して、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
文字列中に部分文字列がいくつかあるか調べる	s.count(sub)
option: グラフの色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
アクア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
数列の散布図を描画する	plt.scatter(データ列x, データ列y)
辞書の項目数を参照する	len(aDict)
データフレームの選択した列の欠損値を平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
配列とリストについて散布図を描画して右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームが重複し、いるか	df.duplicated()
リストを配列にする	np.array(aList)
ある列の文字列が正規表現にマッチするデータを抽出する	df[df['列A'].str.match(正規表現)]
データフレームの指定したカラムの値をValueMapでまとめて置換する	df['列A'].replace(ValueMap)
横棒グラフをレベッカパープル色として描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
データフレームの名前リストで指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
散布図を黒い左三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
アンサンブル学習として回帰分析を行う	sklearn.ensemble.VotingRegressor()
データフレームの列のユニークな値の個数を見る	df[col].nunique()
グラフのx軸にラベルをつける	plt.xlabel('x軸ラベル')
線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
リストとデータ列について散布図を描画して、上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの列の名前リスト	df.columns
アンティークホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
パラメータが無限大に近づくとき、数式の極限値を計算する	sympy.limit(e, z, oo)
データフレームの一部のカラムの標本標準偏差	df[['列A', '列B']].std(ddof=1)
散布図の印をポイント印にする	plt.scatter(データ列x, データ列y, marker='.')
折れ線グラフの色をミッドナイトブルーにする	plt.plot(データ列x, データ列y, color='midnightblue')
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
要素を双方向キューの先頭から取り除く	deq.popleft()
データを平均と分散を用いて標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
2つの文字列は等しくないか調べる	s != s2
両端キューの末尾を使う	deq[-1]
ラインの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: 色をディープスカイブルーに設定する	color = 'deepskyblue'
棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
指定した列のカテゴリで集計し、分散を算出する	df.groupby('列A').var()
データフレームの指定したカラムの欠損値をxで補う	df['列A'].fillna(x)
ライトイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
実数を小数点第一位で丸める	round(x, 1)
1文字標準入力から読む	sys.stdin.read(1)
新しいヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
縦棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
列からn個、サンプリングする	random.sample(iterable, k=n)
データシリーズの不偏標準偏差を求める	ds.std()
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
データシリーズを100の位で丸めて、整数型にする	ds.round(-2).astype(int)
組を昇順にソートする	sorted(aTuple, reverse=True)
折れ線グラフの右三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
文字列が英数字か調べる	s.isalnum()
両端キューの最後にイテラブルの各要素を追加する	deq.extend(iterable)
Pythonパス	sys.path
データフレームのある列の欠損値を後の行の値で埋める	df['列A'].fillna(method='bfill')
線グラフをミディアムスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
回帰モデルの平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
nからn2までの整数リスト	list(range(n, n2+1))
上位集合もしくは等しいか	aSet > aSet2
バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
リストと数列の散布図に赤い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
商と余りを同時に計算する	divmod(x, y)
複数行対応としてパターンに文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
文字列中の部分文字列を新しい文字列に全部置き換える	s.replace(sub, newsub)
２変数の最小値	min(x, y)
グラフにy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
印字可能な文字を全て見る	string.printable
ベクトルから重複を除いた配列を作成する	np.unique(aArray)
部分文字列が文字列中に含まれないか	sub not in s
データシリーズの欠損値を第二四分位数で埋める	ds.fillna(ds.median())
option: 青を使う	color = 'blue'
n2がnより大きく、かつ、n3未満	n < n2 and n2 < n3
折れ線グラフに青い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
二つの関係が真下位集合かどうか調べる	aSet < aSet2
文字列リストを連結して一つの文字列にする	''.join(map(str, iterable))
部分文字列が文字列中に含まれるかどうか	sub in s
指定したカラムがどの程度、分散しているか見る	df['列A'].var()
データフレームの列のユニークな値を見る	df[col].unique()
棒グラフの色をセットする	plt.bar(ラベル列, データ列, color=rgb)
散布図のクロス印を黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
多次元データをSVDを用いて濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
ベクトルの累積和	np.cumsum(aArray)
リストとリストについての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
xのハッシュ値を求める	hash(x)
コーンフラワーブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
分類結果の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
nが負の数か確認する	n < 0
指定した列の値で集計し、各個数を求める	df.groupby('列A').count()
日付データにn時間分加算する	aDate + datetime.timedelta(hours=n)
折れ線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
横棒グラフをオーキッド色として描画する	plt.barh(データ列x, データ列y, color='orchid')
折れ線グラフに黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフに赤い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='gray')
線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
書き出すCSVファイルの小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
散布図の▲マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ライムグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='limegreen')
集合からエラーなく値を取り除く	aSet.discard(element)
ヒストグラムの色をスレートブルーに変更する	plt.hist(データ列, color='slateblue')
データフレームの中に文字列と日付データがある	df.isin([value, value2])
重複していない行のみを取り出す	df[~ df.duplicated(keep=False)]
n割るmの分数表現	fractions.Fraction(numerator=n, denominator=m)
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
ターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
折れ線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
カウンタの和集合を求める	aCounter | aCounter2
プログラムを適切に終了する	sys.exit(0)
末尾のカラムを除いたデータフレームを使う	df[df.columns[:-1]]
浮動小数点数をn乗する	x ** n
散布図の左三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
カラーバーを水平でつける	plt.colorbar(orientation='horizontal')
ガウス過程分類モデルを作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: 印をダイアモンドに指定する	marker = 'D'
カウンタのキーと回数をリストとして得る	aCounter.items()
淡い茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
文字列がアルファベットか調べる	s.isalpha()
横棒グラフをダークターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
データフレームを二つの列の値によってグループ化し要約統計量を算出する	df.groupby(['列A', '列B']).describe()
データフレームを表示するとき、最大行数を変更する	pd.set_option('display.max_rows', n)
スクリプトファイルと同じフォルダのファイルのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
折れ線グラフの菱形マーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ヒストグラムの色をパールバイオレットレッドに変更する	plt.hist(データ列, color='palevioletred')
変数がマイナス無限大に近づくときの数式の極限値を計算する	sympy.limit(e, z, -oo)
2進数文字列をバイナリにする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
スチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='steelblue')
ヒストグラムをダークレッド色で描画する	plt.hist(データ列, color='darkred')
サブクラス	issubclass(サブクラス, クラス)
文字列が全て小文字	s.islower()
データフレームの重複を調べる	df.duplicated()
折れ線グラフにダイアモンド印を加える	plt.plot(データ列x, データ列y, marker='D')
濃いシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
凡例を追記する	plt.legend(['凡例A', '凡例B'])
データフレームから同じ内容のデータを削除する	df.drop_duplicates(inplace=True)
ベージュ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
折れ線グラフのラベルをする	plt.plot(データ列x, データ列y, label='ラベル')
option: オールドレースにグラフの色を変更する	color = 'oldlace'
option: ミディアムシアグリーンを用いる	color = 'mediumseagreen'
散布図をrgbのポイントマーカーとして描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
チョコレート色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
文字列の右側から部分文字列を消す	s.rstrip(sub)
文字列内にひとつでもアルファベットが含まれるか	any(c.isalpha() for c in s)
リストが全て真か調べる	all(aList)
option: シルバー色を用いる	color = 'silver'
ロバストな線形分類器を作る	model = sklearn.linear_model.HuberClassifier()
文字列をセパレータで区切り、、文字列リストに変換する	s.split(sub)
低頻出な方からカウンタを列挙する	aCounter.most_common()[::-1]
散布図に黒い三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
棒グラフをやわらかい青色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
グラフの全般的に色を明るくする	sns.set(pallete='bright')
再帰が何回までできるかを	sys.getrecursionlimit()
option: ブランチドアーモンド色を使用する	color = 'blanchedalmond'
カテゴリ別で色分けして、データフレームをに箱ひげ図を用いて図示する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
バリーウッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
赤いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
nとn2のXORを求める	n ^ n2
カテゴリ別に並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: 色をダークレッドに設定する	color = 'darkred'
日付データが日付データより早いか調べる	aDate < aDate2
淡い茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
全要素を０で初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
文字列の開始位置からと終了位置までの範囲に部分文字列が含まれないか確認する	s.find(sub, start, end) == -1
シーグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
横棒グラフをトマト色として描画する	plt.barh(データ列x, データ列y, color='tomato')
横棒グラフをバリーウッド色を用いて描画する	plt.barh(データ列x, データ列y, color='burlywood')
ダークオレンジ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
タプルを浅くコピーする	dict(aDict)
y軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
マゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
行列の要素ごとの積を調べる	np.multiply(aArray, aArray2)
縦棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
折れ線グラフに青い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
折れ線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの選択したカラムを小数点以下n桁で四捨五入する	df[['列A', '列B']].round(n)
ファイル全体をリストにする	[s.strip() for s in f.readlines()]
データシリーズを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
横棒グラフをドジャーブルー色として描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
クラス分類をアンサンブル学習として行う	sklearn.ensemble.VotingClassifier()
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategrey')
日付データからn秒を減算する	aDate - datetime.timedelta(seconds=n)
双方向キューのn番目	deq[n]
実数の小数点以下を四捨五入する	round(x)
データフレームのあるカラムの曜日数を使う	df['列A'].dt.dayofweek
散布図の下三角印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
タプルの先頭のn要素を除く	aTuple[n:]
データシリーズのNaNを最小値に変更する	ds.fillna(ds.min())
option: データ型として整数型を使う	dtype = np.int
バリーウッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
データフレームをCSVファイルとして保存する	df.to_csv('file.csv')
文字列を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
エクセルから全てのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
折れ線グラフに黒いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
option: マーカーを星に変える	marker = '*'
横棒グラフの色を珊瑚にする	plt.barh(データ列x, データ列y, color='coral')
未初期化の行列を作る	np.empty((行数, 列数), dtype=np.int)
両端キューの最初に文字列を追加する	deq.appendleft(element)
折れ線グラフの大バツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
データフレームの選択したカラムを10の位で丸めて整数型にする	df[['列A', '列B']].round(-1).astype(int)
勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
データシリーズの平均	ds.mean()
散布図に赤い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフをゴーストホワイト色として描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: フォントの色をブルーバイオレットに設定する	color = 'blueviolet'
データシリーズの中にがあるか調べる	ds.isin([value])
数のn乗	pow(x, n)
K-S検定を行う	scipy.stats.kstest(df['列A'], 'norm')
リストのヒストグラムをプロットする	plt.hist(データ列)
棒グラフをマルーン色を用いて描画する	plt.bar(データ列x, データ列y, color='maroon')
クラス分類をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
改行なしに二つの数値を表示する	print(value, value2, end='')
xの絶対値を求める	abs(x)
平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
縦棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
option: グラフの色をライトグリーンに指定する	color = 'lightseagreen'
カラーパレットを全般的に濃くする	sns.set(pallete='deep')
散布図に黒い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
nが配列のどれかかどうか調べる	n in aArray
組をリバースする	reversed(aTuple)
折れ線グラフの△印を黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの選択した列の標本分散	df[['列A', '列B']].var(ddof=0)
option: グラフの色をカデットブルーに指定する	color = 'cadetblue'
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
グリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
折れ線グラフの星印を黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
カウンタをリストにする	list(aCounter)
複素数型のゼロ埋めされた行列	np.zeros(要素数, dtype=bool)
リストと配列についての散布図にrgbの菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ランダムにデータフレームからn行を抽出する	df.sample(n)
空のリストを得る	[]
文字列はキーワードか	keyword.iskeyword(s)
リストとリストについて散布図を描画して、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
データ列を四分位数ごとに分割する	pd.qcut(ds, 4)
数値の因数分解を行う	sympy.factor(e)
データ列を平方根する	np.sqrt(データ列)
x軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
ヒストグラムを実線に設定する	plt.hist(データ列, linestyle='solid')
データフレームの値がNaN	df.isna()
option: ベージュを使う	color = 'beige'
Pandasのバージョンを確認する	print(pd.__version__)
ダークオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
浮動小数点数を十の位で四捨五入する	round(x, -1)
リストと数列の散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
辞書順で文字列が文字列より後かどうか確認する	s > s2
線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
分数を使う	import fractions
縦棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
リストの推移を破線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
グラフ中で日本語フォントを使えるようにする	sns.set(font='IPAexGothic')
あるカラムの値毎の平均値	df.groupby('列A').mean()
リストを横棒グラフにする	plt.barh(ラベル列, データ列)
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()
ヒストグラムをカラーマップを用いて描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
標準入力から1行分改行を除いて読む	sys.stdin.readline().rstrip()
空のロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
option: ライトスチールブルーを使う	color = 'lightsteelblue'
折れ線グラフの下三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
両端キューの先頭の要素	deq[0]
散布図をアイボリー色を用いて描画する	plt.scatter(データ列x, データ列y, color='ivory')
縦棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
集合の補集合を使う	aSet.difference(aSet2)
常用対数	math.log10(x)
日付データと日付データの時間差を求める	aDate - aDate2
日付時刻データにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
100行をランダムにデータフレームから重複を認めてサンプリングする	df.sample(100, replace=True)
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
線グラフの色をダークブルーに設定する	plt.plot(データ列x, データ列y, color='darkblue')
ミディアムオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
縦棒グラフをチョコレート色として描画する	plt.bar(データ列x, データ列y, color='chocolate')
サポートベクターマシンとして回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
線グラフを赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
日付データが火曜日	aDate.weekday() == 1
文字列のn番目の文字	s[n]
データシリーズを千の位で四捨五入して整数型にする	ds.round(-3).astype(int)
option: 行を自動的な連番に設定する	index_col = None
縦棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
データフレームの行と列をひっくり返す	df.T
option: 印の線幅を変更する	markeredgewidth = 2.5
option: 左三角マーカーを加える	marker = '<'
ヒストグラムをダークシアン色として描画する	plt.hist(データ列, color='darkcyan')
クリムゾン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
n2がn以上、かつn3以下かどうか調べる	n <= n2 and n2 <= n3
ヒストグラムの色を暗い赤にする	plt.hist(データ列, color='darkred')
option: 黄色を使う	color = 'yellow'
配列をビン数nで分割する	pd.cut(aArray, n)
モジュールを検索するパスを列挙する	sys.path
分数の分子	q.numerator
文字列の先頭で正規表現にASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
データフレームの一部のカラムを万の位で丸める	df[['列A', '列B']].round(-4)
ASCII限定として正規表現を前もってコンパイルする	re.compile(pattern, flag=re.ASCI)
折れ線グラフをミディアムバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
リストとリストの散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
セットにイテラブルの要素を全て追加する	aSet.update(iterable)
横棒グラフをダークサーモン色を使って描画する	plt.barh(データ列x, データ列y, color='darksalmon')
正規表現に大文字・小文字を無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
欠損値がある行を除いてみる	df.dropna()
データフレームのカラムのモード	mode, count = scipy.stats.mode(df['列A'])
データフレームの中の欠損値の数をカウントする	df.isna().sum()
散布図をホワイト色として描画する	plt.scatter(データ列x, データ列y, color='white')
折れ線グラフをライム色として描画する	plt.plot(データ列x, データ列y, color='lime')
option: グラフの色をシルバーに変更する	color = 'silver'
集合を更新不能なセットに変換する	frozenset(aSet)
行列を2次元1列に変形する	aArray.reshape(-1, 1)
データフレームの指定した列の名前一覧の列を選択する	df[columns]
上限指定をしたデータフレームのカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
ヒストグラムの色をブラックに変更する	plt.hist(データ列, color='black')
タイムスタンプデータからn日分、減算する	aDatetime - datetime.timedelta(days=n)
option: ダークターコイズにグラフの色を設定する	color = 'darkturquoise'
折れ線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
オプションで標準エラーを使う	file = sys.stderr
配列のトリム分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
エクセルファイルから複数のシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
２つの変数を順にプリントする	print(value, value2)
日付時刻データが日曜日かどうか	aDatetime.weekday() == 6
組の平均値	sum(aTuple)/len(aTuple)
パールバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
英字の文字列	string.ascii_letters
折れ線グラフの色をフォレストグリーンに変更する	plt.plot(データ列x, データ列y, color='forestgreen')
書式をargsを引数として文字列整形する	formatText.format(*args)
棒グラフをスチールブルー色を使って描画する	plt.bar(データ列x, データ列y, color='steelblue')
英字の大文字列	string.ascii_uppercase
ミントクリームにヒストグラムの色を指定する	plt.hist(データ列, color='mintcream')

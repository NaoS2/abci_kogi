オブジェクトのプロパティの値を値に変更する	setattr(obj, プロパティ名, 値)
オレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
ドジャーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='dodgerblue')
配列とリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームから	df.select_dtypes(型).columns
データフレームの中にと文字列が含まれるか調べる	df.isin([value, value2])
数列とリストについて散布図を描画して、マーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
文字列がPythonのキーワードか確認する	keyword.iskeyword(s)
データフレームのある列をリストとして選択する	df['列A'].values.tolist()
Pandasのバージョンを見る	print(pd.__version__)
縦棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
数列のスピアマンの相関係数	scipy.stats.spearmanr(数列, 数列2)
英文字から一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの四角印の線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
標準出力を使う	sys.stdout
散布図の▲マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
コマンドの第一引数を知る	sys.argv[1]
option: 先頭のカラムをインデックスに設定する	index_col = 0
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
等量で分割数nとしてデータ列を分割する	pd.qcut(ds, n)
文字列中のタブ文字を空白に置換する	s.expandtabs(tabsize=n)
option: オレンジ色を使う	color = 'orange'
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
option: グラフの色をディムグレーに設定する	color = 'dimgray'
ブルーバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
option: スカイブルーにグラフの色を設定する	color = 'skyblue'
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
データフレームの選択したカラムの尖度	df[['列A', '列B']].skew()
折れ線グラフに星マーカーを加える	plt.plot(データ列x, データ列y, marker='*')
リストの最初の文字列を探す	aList.index(element)
コーンフラワーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
散布図のバツマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
浮動小数点数を十六進表記の文字列に変換する	x.hex()
黒い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='k')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
リストとリストについての散布図に上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
ヒストグラムをダークマゼンタ色として描画する	plt.hist(データ列, color='darkmagenta')
オプションで、標準エラーを出力にする	file = sys.stderr
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
データフレームから型リストで指定したデータ型の列を選択する	df.select_dtypes(include=typeList)
option: 値を置き換える	inplace = True
散布図の▽印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
option: 四角印を使う	marker = 's'
リストを箱ひげ図にする	plt.boxplot(データ列)
平均と分散を用いてデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフの色をダークシアグリーンにセットする	plt.plot(データ列x, データ列y, color='darkseagreen')
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
変数について数式を積分する	sympy.integrate(e, z)
データフレームの選択したカラムの未入力値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
文字列が全てアルファベットか調べる	s.isalpha()
実数の整数部	math.modf(x)[1]
第２コマンド引数	sys.argv[1]
列を等しい量になるようにn個にビン分割する	pd.qcut(ds, n)
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
option: 無視する列番号をnamesで指定する	skiprows = names
文字列をシアンにする	f'\033[36m{value}\033[0m'
nの無限数列	itertools.repeat(n)
ファイルをバイナリ書き込み用にオープンして]、fとする	f = open(filepath, mode='wb')
データフレームの選択したカラムの欠損値を最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
配列の要素ごとに加算する	aArray + aArray2
縦棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
グラフの色を濃くする	sns.set(pallete='deep')
色付きの破線を使ってデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
nが1もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
ヒストグラムをパープル色として描画する	plt.hist(データ列, color='purple')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
ファイル名がJSONファイルかどうか確認する	filename.endswith('.json')
文字列リストをつなげる	''.join(aStringList)
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
追加できるように既存のファイルパスをBOM付きで開く]	open(filepath, mode='a', encoding='utf_8_sig')
option: 整数型を使用する	dtype = np.int
折れ線グラフの色をレモンシフォンに指定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
文字列がタプルに含まれないかどうか調べる	element not in aTuple
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
文字列が全て大文字かどうか	s.isupper()
option: グラフの色を黄緑に変更する	color = 'chartreuse'
データシリーズの中にいくつ欠損値があるか数える	ds.isna().sum()
option: n番目のカラムを行に増やす	index_col = n
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
データフレームをある列のカテゴリでグループ化して、それぞれのグループごとの件数を知る	df.groupby('列A').size()
データフレームの一部の列の第一四分位数	df[['列A', '列B']].quantile(0.25)
ヒストグラムをオレンジレッド色を用いて描画する	plt.hist(データ列, color='orangered')
ディムグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
二つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
棒グラフをスラグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='slategrey')
実数の正接	math.tan(x)
カラムの標準誤差を求める	scipy.stats.sem(df['列A'])
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='turquoise')
符号なし８ビット整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.uint8)
ミディアムスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
線グラフの色をミディアムターコイズにセットする	plt.plot(データ列x, データ列y, color='mediumturquoise')
リストの変遷を赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
コマンド引数の一覧	sys.argv[1:]
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
スクリプトのファイル名	sys.argv[0]
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
横棒グラフをスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='springgreen')
部分文字列が文字列の終了位置より前に含まれないか	s.find(sub, 0, end) == -1
オブジェクトのハッシュ値を求める	hash(obj)
乱数シードをnで固定化する	random.seed(n)
配列を変形する	aArray.reshape(行数, 列数)
option: シエナ色を使用する	color = 'sienna'
データシリーズの分散	ds.var()
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
ヒストグラムを一点鎖線としてプロットする	plt.hist(データ列, linestyle='dashbot')
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
ロジスティック回帰データフレームの散布図にを加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
nが3の倍数か	n % 3 == 0
データフレームの指定したカラムの中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
nとkの組合せを求める	math.comb(n, k)
データ列間の平方根平均二乗誤差を計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
データフレームを2つのカラムをキーにして整列する	df.sort_values(by=['列A', '列B'])
ターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
縦棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
イテラブルを累加する	itertools.accumulate(iterable)
黒い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
縦軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
文字列がn回続くイテラブル	itertools.repeat(element, n)
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームから列を二つ選択する	df[['列A', '列B']]
データ列をn個にビン分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
折れ線グラフを色付きの一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
線グラフをアリスブルー色として描画する	plt.plot(データ列x, データ列y, color='aliceblue')
プロットを画像ファイルとして保存する	plt.savefig('foo.png')
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
データフレームの先頭5行	df.head(5)
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
ヒストグラムをダークグリーン色を用いて描画する	plt.hist(データ列, color='darkgreen')
n2がnより大きくかつ、n3未満か調べる	n < n2 and n2 < n3
データフレームの中にあるの個数を調べる	df.isin([value]).sum()
option: グラフの色をミスティローズに指定する	color = 'mistyrose'
今日が何曜日か知る	datetime.datetime.today().weekday()
ファイルの拡張子付きのファイル名	os.path.basename(filepath)
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
オプションで出力先を標準出力に変更する	file = sys.stdout
実数のkを底とする対数を算出する	math.log(x, k)
グリッド線	plt.grid(alpha=0.5)
折れ線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列x, データ列y, color='mediumorchid')
JSON文字列をデータにする	json.loads(jsonString)
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
データフレームはどの程度、正規分布から尖っているか確認する	df.skew()
やわらかい青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
データシリーズの値をreplにまとめて正規表現patternで置き換える	ds.replace(pattern, repl, regex=True)
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
ホットピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
データフレームの指定した列の欠損値を最小値にする	df['列A'].fillna(df['列A'].min())
部分文字列を範囲を指定して探す	s.find(sub, start, end)
キーが辞書にあるかどうか調べる	key in aDict
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
モードでデータシリーズの未入力値を補完する	ds.fillna(ds.mode().iloc[0])
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
y座標の表示範囲を変更する	plt.ylim(最小値, 最大値)
データフレームの選択したカラムの統計量を全部調べる	df[['列A', '列B']].describe()
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
散布図を黒い下三角マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
option: 印を上三角に変更する	marker = '^'
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
折れ線グラフを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
縦棒プロットを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
データフレームを小数点以下n桁で四捨五入する	df.round(n)
縦棒プロットを描く	plt.bar(ラベル列, データ列)
文字列の大文字と小文字を交換する	s.swapcase()
日付データが月曜日か	aDate.weekday() == 0
option: 色をパールゴールデンロッドにセットする	color = 'palegoldenrod'
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
円プロットにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
赤い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームの重複していない行のみを選択する	df[~ df.duplicated(keep=False)]
三つのデータフレームを縦に結合する	pd.concat([df, df2, df3], axis=0)
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
nをn2で割った値を切り上げる	(n + n2 - 1) // n2
日付時刻データが金曜日かどうか	aDatetime.weekday() == 4
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
文字列の右端からタブを取り除く	s.rstrip('\t')
option: 淡い茶色色を使用する	color = 'tan'
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
昇順に組の値をソートする	sorted(aTuple, reverse=True)
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
耐火レンガ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
日付を表現した文字列を日付データに変換する	pd.to_datetime(日付を表現した文字列)
ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
主成分分析で淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
パールバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
option: 貝殻色を使う	color = 'seashell'
データフレームの選択したカラムの欠損値をxで埋める	df[['列A', '列B']].fillna(x)
配列とリストについての散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
ボックスチャートを二つ並べて描画する	plt.boxplot([データ列, データ列])
折れ線グラフの大バツ印を黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
２次元組をフラット化する	sum(aTuple)
空白文字を全部求める	string.whitespace
縦棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
リストの値をクリアにする	aList.clear()
部分文字列が文字列の終了位置より前に含まれる	s.find(sub, 0, end) != -1
トマト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
option: フォントの色をグリーンイエローに設定する	color = 'greenyellow'
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
データフレームの指定したカラムの欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
空列	[]
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
ロージーブラウン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
文字列の左側からタブを取り除く	s.lstrip('\t')
n個の整数列	list(range(n))
積立相関係数	scipy.stats.pearsonr(数列, 数列2)
ミディアムオーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
グラフのy軸の軸ラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
option: シャルトリューズ色を使う	color = 'chartreuse'
数値を両端キューのn番目に挿入する	deq.insert(n, element)
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
タン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
ヒストグラムをデピンク色として描画する	plt.hist(データ列, color='deeppink')
option: グラフの色をシエナにする	color = 'sienna'
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
ファイルパスのファイル名を使う	os.path.basename(filepath)
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
グラフの横軸を対数に変更する	plt.xscale('log')
タプル内の要素が少なくともひとつ真か確認する	any(aTuple)
JSON形式のファイル入力を辞書に変換する	json.load(fin)
nからn2までの整数列を使う	list(range(n, n2+1))
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: アリスブルーにグラフの色を設定する	color = 'aliceblue'
二つ並べてヒストグラムを描画する	plt.hist([データ列, データ列], color=['b', 'r'])
等量でリストをn個にビン分割する	pd.qcut(aList, n)
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
データフレームをエクセルファイルファイルで保存する	df.to_excel('file.xlsx')
黒い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームが重複しているか確認する	df.duplicated()
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
文字列を最後の部分文字列で分けた時の後半の文字列を取り出す	s.rpartition(sub)[-1]
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データを平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
横方向に三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
折れ線グラフを淡いピンク色色を用いて描画する	plt.plot(データ列x, データ列y, color='lightpink')
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
散布図の丸印を黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
最大値・最小値の範囲で一様な乱数を得る	random.uniform(最小値, 最大値)
データフレームからn行、ランダムサンプリングする	df.sample(n)
データフレームの選択したカラムの中に文字列が含まれる	df[['列A', '列B']].isin([value])
文字列を隔離する	sys.intern(s)
レベッカパープルにヒストグラムの色を設定する	plt.hist(データ列, color='rebeccapurple')
データフレームの行と列を入れ替える	df.T
紺碧色を使ってヒストグラムを描画する	plt.hist(データ列, color='azure')
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
option: フォントの色をインディゴにする	color = 'indigo'
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
黒いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
option: コーラルを用いる	color = 'coral'
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
散布図にrgbのクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの列を10の位で丸める	df['列A'].round(-1)
太文字で変数をプリントする	print(f'\033[1m{value}\033[0m')
データフレームのn行より後ろを抽出する	df[n:]
逆順の両端キュー	reversed(deq)
折れ線グラフを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
折れ線グラフを青い点線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データフレームをグループ化し、それぞれの分散を求める	df.groupby('列A').var()
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
n進文字列をbytesizeバイトのバイナリにする	int(s, n).to_bytes(length=bytesize, byteorder='big')
ファイルを文字列の示すエンコーディングで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
グラフの横軸の軸ラベルを変更する	plt.xlabel('x軸ラベル')
折れ線グラフをミディアムスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
行列から重複を除いた行列を作る	np.unique(aArray)
ビン数nとしてリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列から部分文字列を全て取り除く	s.replace(sub, '')
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
オブジェクトはリストか調べる	isinstance(obj, list)
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
サイン	math.sin(x)
セットを組にする	tuple(aSet)
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
浮動小数点数の符号を同じにする	math.copysign(x, x2)
文字列が文字列リストのいづれかどうか	s in aStringList
日付時刻データの日数	aDatetime.day
散布図の▲マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
カラム間のピアソンの相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
option: グラフの線の種類を一点鎖線に変更する	linestyle = 'dashbot'
△マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='^')
空のカウンタ	collections.Counter()
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
散布図をパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='purple')
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
ヒストグラムを黄色色を用いて描画する	plt.hist(データ列, color='yellow')
option: グラフの色をディムグレーに変更する	color = 'dimgrey'
二進文字列を整数に変換する	int(s, 2)
データフレームのカラムのKurtosisを求める	scipy.stats.kurtosis(df['列A'], bias=False)
レモンシフォン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
散布図のダイアモンド印を黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
配列の推移を半透明の一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームからn行、サンプリングする	df.sample(n)
データフレームの一部のカラムのNaNを最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
リストと配列について散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図のバツ印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
黄色い線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
データフレームが重複しているか調べる	df.duplicated()
データフレームを使う	import pandas as pd
日付データの曜日を整数で求める	aDate.weekday()
実数のハイパボリック・サインの逆数	math.asinh(x)
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
ダークバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
データフレームのカラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
データフレームの選択した列の中にいくつ欠損値があるか数える	df[['列A', '列B']].isna().sum()
option: ミディアムスレートブルー色を用いる	color = 'mediumslateblue'
文字列がタプルの要素か調べる	element in aTuple
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
配列のトリム分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
数列と数列について散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
リストの中の最小値を計算する	min(aList)
列のイミュータブルな集合	frozenset(iterable)
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
データフレームの選択したカラムが正規分布からどの程度歪んでいるか見る	df[['列A', '列B']].kurt()
配列とリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
マッピングの値数を得る	len(aDict)
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
表データをグループ化し、ある列に対し合計を求める	df.groupby('列A')['列B'].sum()
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
nにn2を加算する	n + n2
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
nをn2で割った余りをnに代入する	n %= n2
CSVファイルをヘッダなしで読み込む	pd.read_csv('file.csv', header=None)
行列の行ごとの最大値	np.max(aArray, axis=1)
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
折れ線グラフの三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
項目名ワード引数でマップに加えて、更新する	aDict.update(**kwargs)
黒い菱形マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
日付データが土曜日かどうか調べる	aDate.weekday() == 5
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
option: ライムを使う	color = 'lime'
青紫色で散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
データシリーズが何日か知る	ds.dt.day
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
グラフ中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
グラフの色テーマを全般的に淡くする	sns.set(pallete='muted')
実数の絶対値を算出する	math.fabs(x)
レベッカパープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
正規分布の累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
文字列をカンマで区切って列挙する	s.split(',')
データフレームの信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
バリーウッド色としてヒストグラムを描画する	plt.hist(データ列, color='burlywood')
セパレータで文字列を区切り、、文字列リストにする	s.split(sub)
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
データフレームの指定したカラムの欠損値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
データフレームの指定したカラムの平均値	df['列A'].mean()
ヒストグラムの色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
option: ライトスレイグレーを使う	color = 'lightslategrey'
赤い右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
リストを緑色にする	f'\033[32m{value}\033[0m'
散布図をパパイヤウィップ色として描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
無限大を使う	math.inf
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
データフレームのNaNを中央値に変更する	df.fillna(df.median())
実行を即座に終了する	sys.exit()
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
折れ線グラフの色をダークオーキッドにする	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームから指定した3つの列を抽出する	df[['列A', '列B', '列C']]
データフレームをCSVファイルから読み込む	pd.read_csv('file.csv', sep=',')
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()//60
rgbの大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
ある列のカテゴリ毎の最大値を求める	df.groupby('列A').max()
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
最大値でデータシリーズのNaNを埋める	ds.fillna(ds.max())
ランダムフォレストでクラス分類をする	model = sklearn.ensemble.RandomForestClassifier()
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
乱数	random.random()
部分文字列によって文字列を二分割する	s.partition(sub)
線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図に左三角印を使用する	plt.scatter(データ列x, データ列y, marker='<')
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
1からnまでの整数列を見る	list(range(1, n+1))
option: グラフの色をオレンジレッドに変更する	color = 'orangered'
ヒストグラムを淡いピンク色色を使って描画する	plt.hist(データ列, color='lightpink')
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
プロットを論文用に設定する	sns.set(context='paper')
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='gray')
option: 青色を用いる	color = 'blue'
横軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
外れ値を除いた配列の算術平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
カウンタのキーをひとつ増やす	aCounter[element] += 1
データフレームのカラムの名前を変更する	df.rename(columns={'列A': '列a', '列B': '列b'})
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
option: コーンズシルク色を用いる	color = 'cornsilk'
折れ線グラフの下三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ハローワールドとプリントする	print('Hello World')
option: ミディアムスレートブルーにグラフの色を変更する	color = 'mediumslateblue'
現在は何秒か知る	datetime.date.today().second
両端キュー中の要素の数を数える	deq.count(element)
データ列のユニークな値の個数	ds.nunique()
両端キュー中の値の数を数える	deq.count(element)
option: 符号なし８ビット整数型を使用する	dtype = np.uint8
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
表データから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
文字列の最初を見る	s[0]
線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
文字列を部分文字列で区切る	s.split(sub)
リストとリストの散布図を描画し、マーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
行列のデータ型を求める	aArray.dtype()
折れ線グラフの色をロージーブラウンにする	plt.plot(データ列x, データ列y, color='rosybrown')
折れ線グラフの▽マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
ヒストグラムの色をミディアムスレートブルーにセットする	plt.hist(データ列, color='mediumslateblue')
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
ファイルをバイナリ書き込みモードを用いて開く]	open(filepath, mode='wb')
実数の余弦の逆数	math.acos(x)
散布図をダークゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
数値の積分を求める	sympy.integrate(e)
縦棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
ヒストグラムの色をライトシアンにする	plt.hist(データ列, color='lightcyan')
option: 色をデピンクに設定する	color = 'deeppink'
折れ線グラフの▲マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
新しい勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
サドルブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
数値をパラメータについてn階微分する	sympy.diff(e, z, n)
option: 配列のデータ型を指定する	dtype = bool
ある列のカテゴリごとの最大値を求める	df.groupby('列A').max()
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
オプションで、出力先を標準出力にセットする	file = sys.stdout
データフレームの指定したカラムの欠損値を中央値に設定する	df['列A'].fillna(df['列A'].median())
配列の標準誤差を求める	scipy.stats.sem(配列)
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
データフレームを異なる列をキーとして外部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
option: ライトコーラルを使う	color = 'lightcoral'
データフレームの文字列を欠損値に変換する	df.replace(値, np.nan)
最後の列を除いたデータフレーム	df[df.columns[:-1]]
散布図にrgbのバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
柱状図を上限から下限の範囲で描画する	plt.hist(データ列, range=(start, end))
折れ線グラフの色を黄緑に指定する	plt.plot(データ列x, データ列y, color='chartreuse')
あるカラムの値ごとの最小値を求める	df.groupby('列A').min()
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
最頻値でデータフレームの選択したカラムのNaNを埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
データフレームの値をValueMapでまとめて変更する	df.replace(ValueMap)
折れ線グラフの星マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: フォントの色をダークサーモンにする	color = 'darksalmon'
タイムスタンプデータにn秒分、足す	aDatetime + datetime.timedelta(seconds=n)
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
配列をビン数nで分割する	pd.cut(aArray, n)
eの実数乗	math.exp(x)
option: グレー色を使う	color = 'grey'
中央値でデータフレームの欠損値を埋める	df.fillna(df.median())
二つの浮動小数点数はほぼ等しいか	math.isclose(x, x2)
折れ線グラフのマーカーを△にする	plt.plot(データ列x, データ列y, marker='^')
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
ラベンダー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
ベクトルの演算を行う	import numpy as np
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
線グラフの色を淡い茶色に設定する	plt.plot(データ列x, データ列y, color='tan')
ロージーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
辞書から多重集合を生成する	collections.Counter(aDict)
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
赤い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
option: イエローグリーンを使う	color = 'yellowgreen'
データ列を折れ線グラフで作図する	plt.plot(データ列x, データ列y)
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ヒストグラムを紺色として描画する	plt.hist(データ列, color='darkblue')
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
二つの行列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
整数nがリストのどれか	n in aList
浮動小数点数を実数で除算した余り	x % y
線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
nが一桁の数かどうか確認する	0 <= n <= 9
画面にグラフの用途を設定する	sns.set(context='notebook')
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
データフレームから一つのカラムのみ抽出する	df[['列A']]
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgray')
リストの要素を昇順に並べる	sorted(aList, reverse=True)
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
データシリーズを100の位で丸める	ds.round(-2)
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
グラフを淡くする	sns.set(pallete='muted')
文字列全体がパターンにASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
フクシア色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
オブジェクトからプロパティを削除する	delattr(obj, プロパティ名)
nからn2の範囲	range(n, n2)
縦棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
ある列によってデータフレームを昇順にソートして更新する	df.sort_values(by='列A', ascending=True, inplace=True)
データフレームをある列によって昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
縦棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
双方向キューをタプルにする	tuple(deq)
オブジェクトは集合クラスか調べる	isinstance(obj, set)
データフレームの末尾5行を取り出す	df.tail(5)
文字列の両端から空白を取り除く	s.strip()
真	True
新しい回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgrey')
2つの列でグループ化し平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
カデットブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
option: ダイアモンド印を描画する	marker = 'D'
日付時刻データをISO8601書式の文字列に変換する	aDatetime.isoformat()
文字列をインターンする	sys.intern(s)
データフレームの列の名前をまとめて文字列置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
2つの変数を順にプリントする	print(value, value2)
折れ線グラフの色をオーキッドに指定する	plt.plot(データ列x, データ列y, color='orchid')
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
ニューラルネットで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
浮動小数点数の最大値	sys.float_info.max
option: 色をアイボリーに設定する	color = 'ivory'
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
option: 印をポイントに設定する	marker = '.'
データフレームの指定したカラムの未入力値を最小値で補う	df['列A'].fillna(df['列A'].min())
縦棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
option: カラムの名前をリストで設定する	names = 列名リスト
本日が金曜日	datetime.datetime.today().weekday() == 4
option: フォントの色をダークターコイズに設定する	color = 'darkturquoise'
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
option: ミディアムバイオレットレッドにグラフの色を設定する	color = 'mediumvioletred'
option: 青を用いる	color = 'blue'
キーが辞書上でまだ定義されていないか調べる	key not in aDict
配列のトリム平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
データフレームの一部のカラムを丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
リストにリストを追加して拡張する	aList.extend(aList2)
データフレームを転置する	df.T
グラフに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
クラス分類の正解率を算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
データフレームの選択したカラムの要約統計量	df[['列A', '列B']].describe()
散布図をrgbの上三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームは何行重複するか見る	df.duplicated().sum()
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
option: 小麦色色を使う	color = 'wheat'
option: ペールグリーンを使う	color = 'palegreen'
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
要素は集合のメンバーでないか調べる	element not in aSet
日付時刻データは日付時刻データと同時かどうか調べる	aDatetime == aDatetime2
縦棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
辞書からキーで指定されたエントリをポップする	aDict.pop(key)
散布図を濃いシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
データフレームの指定したカラムを丸めて、整数型にする	df['列A'].round().astype(int)
データフレームをある列によって降順にソートする	df.sort_values(by='列A', ascending=False)
option: マーカーの色を変更する	markerfacecolor = '#800080'
文字列を全て小文字に変換する	s.lower()
option: コーンズシルク色を使う	color = 'cornsilk'
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの色をダークターコイズにセットする	plt.plot(データ列x, データ列y, color='darkturquoise')
文字列をISO8601を使って日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データシリーズを百の位で丸める	ds.round(-2)
option: フォントの色をミディアムブルーに設定する	color = 'mediumblue'
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
nがn2より大きいか調べる	n > n2
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
自然数の最大公約数を求める	math.gcd(n, n2)
カウンタを集合にする	set(aCounter)
リストと配列について散布図を描画して星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
縦棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
横棒グラフをフォレストグリーン色として描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ホワイトスモーク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
データフレームをグループ化し、それぞれの個数を計算する	df.groupby('列A').count()
データシリーズを十の位で四捨五入して整数型にする	ds.round(-1).astype(int)
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
リストを箱髭図で可視化する	plt.boxplot(データ列)
縦棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
散布図をハニーデュー色として描画する	plt.scatter(データ列x, データ列y, color='honeydew')
マッピングの値に要素が含まれていないかテストする	element not in aDict.values()
パラメータについて数式の微分を行う	sympy.diff(e, z)
マルーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
日付データが日付データより後ろか調べる	aDate > aDate2
バリーウッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
折れ線グラフを色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
カデットブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
リストとデータ列についての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
シスル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
option: ライトグリーンにグラフの色を設定する	color = 'lightgreen'
現在のモジュールを得る	sys.modules[__name__]
ダークスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
ホットピンクにヒストグラムの色を設定する	plt.hist(データ列, color='hotpink')
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
ヒストグラムの色をスプリンググリーンに指定する	plt.hist(データ列, color='springgreen')
文字列を空白で区切って文字列リストに変換する	s.split()
多次元データを主成分分析を用いて濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
実数のn乗の浮動小数点数剰余を求める	pow(x, n, y)
option: ダークグリーンにグラフの色を設定する	color = 'darkgreen'
option: バイナリモードを使う	mode = 'rb'
表データのあるカラムの曜日が何日目か見る	df['列A'].dt.dayofweek
日付データが日付データと同時か調べる	aDate == aDate2
ピーチパフ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ベクトルの和を使う	aArray + aArray2
ダークマゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: 大バツ印を描画する	marker = 'X'
散布図のポイントマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
折れ線グラフの星マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
散布図の右三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
折れ線グラフのダイアモンドマーカーの色を変える	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
複数のシートをデータフレームとして表計算ファイルから読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
option: セパレータをスラッシュにする	sep = '/'
データシリーズの未入力値を最大値で置換する	ds.fillna(ds.max())
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
nが3の倍数	n % 3 == 0
イテラブルとリストの散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
双方向キューに数値をenqueueする	deq.appendleft(element)
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
二つの変数を文字列で区切ってプリントする	print(value, value2, sep=s)
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
散布図をコーンズシルク色として描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
リストとリストについて散布図を描画し、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
year年day月のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
リストの先頭を取り除く	aList[1:]
散布図にクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
実数を実数で割った剰余を求める	math.remainder(x, x2)
折れ線グラフの四角印を赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
線グラフの色をミディアムスレートブルーに指定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
標準正規分布の確率密度関数を使用する	scipy.stats.norm.pdf(x)
データシリーズの母標準偏差	ds.std(ddof=0)
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
数式を部分分数に展開する	sympy.apart(e)
option: トマトにグラフの色を設定する	color = 'tomato'
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
グラフの縦横比を等しくする	plt.axis('equals')
赤い実線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
マップから項目名の値を得る	aDict.get(key)
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
データフレームを並べ直し、、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
新しいロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
新しいガウス過程回帰モデルを用意する	model = sklearn.gaussian_process.GaussianProcessRegressor()
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
year年のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ファイルパスから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
ファイルのディレクトリ名	os.path.dirname(filepath)
配列の最小を計算する	np.min(aArray)
表データのあるカラムの分を使う	df['列A'].dt.minute
ファイルをSJISとしてオープンする]	open(filepath, encoding='shift_jis')
スカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
固有値分解を行う	model = sklearn.decomposition.PCA(n_components=n)
散布図に菱形マーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
補助目盛を有効にする	plt.minorticks_on()
option: パープル色を使う	color = 'purple'
縦棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
折れ線グラフをカーキ色を用いて描画する	plt.plot(データ列x, データ列y, color='khaki')
ダークシアン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
year年month月day日hour時minute分の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
nが負の数	n < 0
横棒グラフをダークオリーブグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
両端キューの最大長	deq.maxlen
散布図にバツ印を加える	plt.scatter(データ列x, データ列y, marker='x')
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
▽印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームの数値を一度に四捨五入する	df.round()
データフレームの指定した列を四捨五入する	df['列A'].round()
ミディアムアクアマリン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
辞書をソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
2つの変数をスラッシュで区切ってプリントする	print(value, value2, sep='/')
折れ線グラフの色をスカイブルーに変更する	plt.plot(データ列x, データ列y, color='skyblue')
散布図に黒いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
散布図に赤い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフの色をダークスレートブルーに指定する	plt.plot(データ列x, データ列y, color='darkslateblue')
要素がタプルの値に含まれていないか	element not in aDict.values()
コマンドライン引数を列挙する	sys.argv
キューの末尾に値を追加する	deq.append(element)
データフレームの選択したカラムのNaNを最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
シエナにヒストグラムの色を設定する	plt.hist(データ列, color='sienna')
データフレームの列名を列挙する	df.columns
n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
データフレームをインポートする	import pandas as pd
配列の歪度を求める	scipy.stats.skew(配列, bias=False)
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
二つの文字列を順にプリントする	print(value, value2)
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
線グラフの色をミントクリームに指定する	plt.plot(データ列x, データ列y, color='mintcream')
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
組の先頭のn要素を取り除く	aTuple[n:]
データフレームの不偏標準偏差を求める	df.std()
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームの指定したカラムの欠損値を最小値で埋める	df['列A'].fillna(df['列A'].min())
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
ある列の文字列に部分文字列が存在する行を選択する	df[df['列A'].str.contains(部分文字列)]
数値の簡略化を行う	sympy.sympify(e)
サイコロ	random.randint(1, 6)
ダークオリーブグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
淡いピンク色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
線グラフの色を貝殻にセットする	plt.plot(データ列x, データ列y, color='seashell')
双方向キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
行列の逆行列を求める	np.linalg.inv(aArray)
イテラブルを文字列リストに変換して、'改行によって連結する	'\n'.join(map(str, iterable))
行列にはいくつ要素があるか調べる	aArray.size
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
新しい文字列で文字列を置き換える	s.replace(sub, newsub)
データフレームの一部のカラムを十の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-1).astype(int)
パーセプトロンで回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
辞書のキーの値	aDict[key]
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='turquoise')
option: グラフの種類を破線に設定する	linestyle = 'dashed'
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
フォーマットで列を日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
option: グラフの色をアンティークホワイトにする	color = 'antiquewhite'
ラインのラインスタイルを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの文字列を欠損値に変換する	df.replace(値, np.nan)
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
5行をランダムにデータフレームから重複ありでサンプリングする	df.sample(5, replace=True)
日付時刻データはタイムスタンプデータより前か調べる	aDatetime < aDatetime2
図の縦横を指定する	plt.figure(figsize=(横幅, 高さ))
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
横棒グラフをプロットして棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ヒストグラムの色をアクアマリンに変更する	plt.hist(データ列, color='aquamarine')
データシリーズの未入力値を第二四分位数に設定する	ds.fillna(ds.median())
折れ線グラフの四角印を青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
指定した列のカテゴリで集計しそれぞれの標準偏差を求める	df.groupby('列A').std()
option: マーカーをポイントに変更する	marker = '.'
箱髭図を描いて、平均線を加える	plt.boxplot(データ列, meanline=True)
ラジアンの角度	math.degrees(x)
オリーブ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
ヒストグラムの色をシエナに指定する	plt.hist(データ列, color='sienna')
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
nが負の数か調べる	n < 0
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
文字列に変換してシーケンスを連結する	''.join(map(str, iterable))
option: ピーチパフ色を用いる	color = 'peachpuff'
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
配列の標準偏差を調べる	np.std(aArray)
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
本日が木曜日か確認する	datetime.datetime.today().weekday() == 3
MSDの準備をする	model = sklearn.manifold.MSD(n_components=n)
ライムグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
リストの平均値を求める	sum(aList)/len(aList)
列を文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
データフレームをグループ化し標準偏差を求める	df.groupby('列A').std()
ホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
タプルをミュータブルにする	list(aTuple)
文字列をパターンで分ける	re.split(pattern, s)
二進対数を求める	math.log2(x)
縦棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
欠損値がある行をドロップする	df.dropna(inplace=True)
データフレームのstart行目からend行目まで抽出する	df[start:end]
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
実行環境がWindowsか調べる	sys.platform.startswith('win32')
xでデータフレームの選択したカラムの欠損値を補う	df[['列A', '列B']].fillna(x)
option: ライムグリーンにグラフの色を変更する	color = 'limegreen'
半透明の実線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
白色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
option: 箱ひげ図に平均を加える	showmeans = False
折れ線グラフの色をダークグレーにする	plt.plot(データ列x, データ列y, color='darkgray')
データフレームの選択した列の中央値	df[['列A', '列B']].median()
部分文字列を文字列の右端から探す	s.rfind(sub)
rgbの大バツマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ドジャーブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
option: 左三角マーカーを用いる	marker = '<'
実数が有限かどうか調べる	math.isfinite(x)
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
データフレームの選択したカラムの中に文字列があるか	df[['列A', '列B']].isin([value])
リストとデータ列についての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
小数点数の整数部	math.modf(x)[1]
option: パレットトルコイズを使用する	color = 'paleturquoise'
昇順にあるカラムによってデータフレームをソートする	df.sort_values(by='列A', ascending=True)
パレットトルコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
上限指定をした配列の算術平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
n個の数値イテラブルを使う	range(n)
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
データ列の偏りを平方根する	np.sqrt(データ列)
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
タプルをnからナンバリングする	enumerate(aTuple, start=n)
二つの変数を順に出力する	print(value, value2)
文字列は全て識別子名か調べる	s.isidentifier()
数値を赤色でプリントする	print(f'\033[31m{value}\033[0m')
リストの折れ線プロットを描画して、色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
ベストな位置にデータラベルを表示する	plt.legend(loc='best')
散布図を黒い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
原点から点までの距離	math.hypot(x, y)
横棒グラフを黄色色として描画する	plt.barh(データ列x, データ列y, color='yellow')
ゼロ埋めされた論理値型の配列	np.zeros(要素数, dtype=np.int32)
線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
折れ線グラフをティール色で描画する	plt.plot(データ列x, データ列y, color='teal')
option: ライトスレイグレー色を使用する	color = 'lightslategrey'
文字列を太字にする	f'\033[1m{value}\033[0m'
イテラブルから両端キューを新規生成する	collections.deque(iterable)
半透明の点線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データシリーズの欠損値を平均値に設定する	ds.fillna(ds.mean())
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
ファイルをBOM付きで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
option: ゴールドを用いる	color = 'gold'
データフレームのカラムを十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
等間隔のベクトルを作る＼	np.arange(開始値, 終了値, 等差)
貝殻色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
データフレームを横方向につなぐ	pd.concat([df, df2], axis=1)
パールバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
リストを行列に変換する	np.array(aList)
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
ファイルが存在する	os.path.exists(filepath)
サドルブラウン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
列のそれぞれを関数でフィルタする	map(func, iterable)
整数を文字列にする	str(x)
オブジェクトはバイト列クラスのインスタンスか調べる	isinstance(obj, bytes)
データフレームのカラムの幾何平均を求める	scipy.stats.gmean(df['列A'])
黒い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
ファイルをバイナリ書き込みモードとしてオープンする]	open(filepath, mode='wb')
ヒストグラムをブルーバイオレット色として描画する	plt.hist(データ列, color='blueviolet')
データフレームのあるカラムの値がx以上のデータを抽出する	df[df['列A'] >= x]
連立方程式を解く	sympy.solve([e, e2])
nが無限に続く数列を求める	itertools.repeat(n)
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
デピンクにヒストグラムの色を設定する	plt.hist(データ列, color='deeppink')
赤い左三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='<', c='r')
リストとリストについて散布図を描いて、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
割合付きの円グラフをプロットする	plt.pie(データ列, startangle=90, autopct='%.2f%%')
行列の列ごとの標準偏差を求める	np.std(aArray, axis=0)
ヒストグラムを紺碧色を用いて描画する	plt.hist(データ列, color='azure')
部分文字列を文字列の接頭辞から消す	s.removeprefix(sub)
option: BOM付きを使う	encoding = 'utf_8_sig'
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgrey')
データフレームの複数の列をドロップしてみる	df.drop(['列A', '列B'], axis=1)
mathをインポートする	import math
データフレームのあるカラムは何秒か見る	df['列A'].dt.second
option: グラフの色をミディアムターコイズに指定する	color = 'mediumturquoise'
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
実数の逆余弦	math.acos(x)
データフレームの指定したカラムの第三四分位数	df['列A'].quantile(0.75)
両端キューの中に要素が含まれてるか調べる	element in deq
データフレームを指定したカラムによってソートして、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
二つの値をスラッシュで区切ってプリントする	print(value, value2, sep='/')
データ列からユニークな値を抽出し、リスト化する	ds.unique().tolist()
ゼロ埋めされた３二ビット整数型のベクトル	np.zeros(要素数, dtype=np.int16)
リッジ回帰分析を行う	model = sklearn.linear_model.Ridge(alpha=正則化項)
自分自身をモジュールとして	sys.modules[__name__]
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
option: マーカーを左三角に変更する	marker = '<'
option: 文字列をセパレータで用いる	sep = s
特異値分解の準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
標準出力を使用する	sys.stdout
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
散布図を赤い▼マーカーとして描く	plt.plot(データ列x, データ列y, marker='v', c='r')
要素はタプルの値に含まれていないか調べる	element not in aDict.values()
逆双曲線正弦	math.asinh(x)
散布図の色を濃いシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
option: フォントの色をダークサーモンに設定する	color = 'darksalmon'
指定した列のカテゴリで集計し、それぞれの合計を求める	df.groupby('列A').sum()
文字列の開始位置より後に部分文字列がないか調べる	s.find(sub, start) == -1
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
配列とリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
横棒グラフを淡いピンク色色を用いて描画する	plt.barh(データ列x, データ列y, color='lightpink')
日付時刻データが日曜日かどうか調べる	aDatetime.weekday() == 6
グラフの目的を論文に設定する	sns.set(context='paper')
option: ミディアムスレートブルーを使用する	color = 'mediumslateblue'
カーキにヒストグラムの色を変更する	plt.hist(データ列, color='khaki')
リストとリストの散布図にポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.')
タプルからひとつランダムに選ぶ	random.choice(iterable)
ファイルパスをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
データシリーズのモード	ds.mode()
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
文字列全体がパターンに大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ブルーバイオレット色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
formatパターンの文字列をタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
ファイルが存在しないか調べる	not os.path.exists(filepath)
縦棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
シーグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
配列とリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
散布図のバツ印を青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
option: プラムにグラフの色を設定する	color = 'plum'
option: グラフの色を茶色に設定する	color = 'brown'
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
計算機イプシロン	sys.float_info.epsilon
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
カウンタの要素をひとつ増やす	aCounter[element] += 1
グラフのy座標を対数に変更する	plt.yscale('log')
ヒストグラムを赤くする	plt.hist(データ列, color='r')
最大長nのデックをイテラブルから生成する	collections.deque(iterable, maxlen=n)
文字列が全てアスキー文字か調べる	s.isascii()
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: ラベンダーブラッシュを用いる	color = 'lavenderblush'
縦軸を対数に変更する	plt.yscale('log')
selectorsでマスクされたリストの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
配列のKurtosisを計算する	scipy.stats.kurtosis(配列, bias=False)
ダークシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
プロットの全般的にカラーテーマを明るくする	sns.set(pallete='bright')
ヒストグラムを実線に設定する	plt.hist(データ列, linestyle='solid')
数式を展開する	sympy.expand(e)
縦棒グラフを淡いピンク色色として描画する	plt.bar(データ列x, データ列y, color='lightpink')
バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
各カテゴリごとにデータフレームの棒グラフを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
数式を変数についてn階微分する	sympy.diff(e, z, n)
ヒストグラムの色をダークターコイズに変更する	plt.hist(データ列, color='darkturquoise')
option: グリーン色を使う	color = 'green'
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
縦棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの色をプラムに変更する	plt.plot(データ列x, データ列y, color='plum')
タプルの末尾からn番目以前の部分を得る	aTuple[:-n]
散布図の色をダークブルーにする	plt.scatter(データ列x, データ列y, color='darkblue')
改行なしに二つの文字列をプリントする	print(value, value2, end='')
データフレームの行を範囲指定して抽出する	df[start:end]
散布図に赤い四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c='r')
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
option: モカシン色を用いる	color = 'moccasin'
実数の逆双曲線正接を求める	math.atanh(x)
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
リストの変化を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
散布図をライムグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='limegreen')
実数の双曲線正弦を求める	math.sinh(x)
散布図の印をポイントにする	plt.scatter(データ列x, データ列y, marker='.')
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
丸印を使ってデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
データフレームの選択したカラムの中にいくつ欠損値があるか数える	df[['列A', '列B']].isna().sum()
散布図を赤い大バツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
カウンタ同士でユニオンを求める	aCounter | aCounter2
option: グラフの色をクリムゾンに設定する	color = 'crimson'
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
option: 青にグラフの色を設定する	color = 'blue'
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
データフレームからランダムにn行を抽出する	df.sample(n)
オブジェクトがタプルの要素でないか	element not in aTuple
キーが辞書上で未定義か調べる	key not in aDict
ゼロ埋めされた整数型の行列	np.zeros(要素数, dtype=np.int)
データフレームの先頭n行	df.head(n)
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
散布図をスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='slateblue')
データフレームの指定した列を十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
CSV形式にデータフレームをSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
エンコーディングで文字列をバイト列に変換する	s.encode(encoding=encoding)
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
日付データが水曜日か調べる	aDate.weekday() == 2
データ列のユニークな値	ds.unique()
リストとリストの散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームの指定したカラムの欠損値をxに設定する	df['列A'].fillna(x)
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
実数を百の位で四捨五入する	round(x, -2)
nを半分にする	n /= 2
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
辞書をJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
黒い三角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
インディゴ色を用いてヒストグラムを描画する	plt.hist(データ列, color='indigo')
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
NaNを使う	math.nan
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
折れ線グラフの下三角印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
改行で文字列を区切る	s.splitlines()
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
option: 茶色色を用いる	color = 'brown'
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
半透明の一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
データフレームのあるカラム	df['列A']
青い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
日付時刻データが水曜日かどうか調べる	aDatetime.weekday() == 2
小文字を大文字に変換する	s.upper()
x座標の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
黒い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
柱状グラフでデータフレームのカラムを描く	plt.hist(df[column])
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
ネイビー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
パーセプトロンを用いてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
データフレームのあるカラムが何時か見る	df['列A'].dt.hour
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
まとめてValueMapでデータフレームの値を置き換える	df.replace(ValueMap)
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
データフレームの二つのカラムを並べて箱ひげ図で描画する	plt.boxplot([df['カラム'], df['カラム']])
散布図をダークブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
配列とデータ列についての散布図に赤い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
リストとデータ列の散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図のポイント印の色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
文字列リストを結合してひとつの文字列にする	''.join(map(str, iterable))
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
配列を標準化する	scipy.stats.zscore(配列)
配列とリストについて散布図をプロットして、その大きさをnにセットする	plt.scatter(データ列x, データ列y, s=n)
データフレームのカラムのn次モーメントを求める	scipy.stats.moment(df['列A'], moment=n)
リストとリストについての散布図にrgbのダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
整数nを十六進文字列に変換する	hex(n)[2:]
ヒストグラムをダークサーモン色として描画する	plt.hist(データ列, color='darksalmon')
双方向キューの長さ	len(deq)
ローングリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
横棒グラフを淡い茶色色で描画する	plt.barh(データ列x, データ列y, color='tan')
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
配列の推移を赤い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
配列の最頻値	mode, count = scipy.stats.mode(配列)
nのビット長	n.bit_length()
option: シルバー色を使用する	color = 'silver'
データフレームの選択したカラムの値は欠損値か調べる	df[['列A', '列B']].isna()
文字列の開始位置以降が部分文字列で始まるかどうか調べる	s.startswith(sub, start)
縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
２つのデータフレームを列名を指定して右ジョインする	pd.merge(df, df2, on='列A', how='right')
リストとリストについて散布図を描画してマーカーを▽に指定する	plt.plot(データ列x, データ列y, marker='v')
変数を水色で表示する	print(f'\033[36m{value}\033[0m')
option: オーキッド色を使用する	color = 'orchid'
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
赤い丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o', c='r')
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの丸印の太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
タプルの要素を小さい順に並べる	sorted(aTuple, reverse=True)
散布図のダイアモンド印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データ列とリストについて散布図を描画して、マーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
option: ホワイトスモーク色を用いる	color = 'whitesmoke'
辞書に辞書のエントリを更新する	aDict.update(aDict2)
option: 小麦色を使う	color = 'wheat'
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
データフレームを百の位で丸めて、整数型にする	df.round(-2).astype(int)
ヒストグラムの色をダークブルーに変更する	plt.hist(データ列, color='darkblue')
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
横棒グラフをパレットトルコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
日付時刻データが何月か知る	aDatetime.month
データフレームが重複しているか判定する	df.duplicated()
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
散布図にrgbの上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ファイルパスの絶対ファイルパス	os.path.abspath(filepath)
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
ヒストグラムを赤色を用いて描画する	plt.hist(データ列, color='red')
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
option: スカイブルー色を用いる	color = 'skyblue'
折れ線グラフの色をゲインズボロにセットする	plt.plot(データ列x, データ列y, color='gainsboro')
n個にデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
リストにリストを展開する	aList.extend(aList2)
折れ線グラフの色をライトゴールドロディイエローに指定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
データフレームの選択したカラムの中に文字列があるか調べる	df[['列A', '列B']].isin([value])
option: グラフの色をグレーに設定する	color = 'gray'
折れ線グラフの上三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
フィシャー流の尖度を求める	scipy.stats.kurtosis(配列, fisher=True, bias=False)
xの小数点以下'3'桁までプリントする	print(':.3f'.format(x))
実数の仮数を算出する	math.frexp(x)[0]
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
option: ダークグレー色を使う	color = 'darkgray'
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
棒グラフをミディアムスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
option: ダークグレー色を用いる	color = 'darkgrey'
ダークグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
バイナリ書き込みモードでファイルパスをオープンして]、fとする	f = open(filepath, mode='wb')
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
実数のn乗して実数による余り	pow(x, n, y)
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
散布図を赤い下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: グラフの色を赤に指定する	color = 'red'
横棒グラフを描画し、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
データラベルを表示する	plt.legend()
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
nをn2だけ減少させる	n -= n2
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
ミディアムスプリンググリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
全数字	string.digits
集合から全要素を消す	aSet.clear()
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
オプションで、標準出力を用いる	file = sys.stdout
データ列の偏りを対数変換する	np.log(データ列)
ヒストグラムをペルー色として描画する	plt.hist(データ列, color='peru')
option: ネイビー色を使う	color = 'navy'
実数が有限か調べる	math.isfinite(x)
カウンタ同士で∪演算する	aCounter | aCounter2
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
リストのn番目に文字列を挿入する	aList.insert(n, element)
折れ線グラフの色をローングリーンにセットする	plt.plot(データ列x, データ列y, color='lawngreen')
option: 青緑色を用いる	color = 'teal'
カテゴリデータをベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgrey')
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
数式の簡略化を行う	sympy.sympify(e)
データ列のMAEを算出する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
配列を等しい量になるようにビン数nでビン分割する	pd.qcut(aArray, n)
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
データシリーズの欠損値を最小値に設定する	ds.fillna(ds.min())
三つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=1)
sepを区切りとして文字列リストを連結する	sep.join(aStringList)
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
辞書の項目名とそのエントリを列挙する	aDict.items()
数値を太文字にする	f'\033[1m{value}\033[0m'
kを底とする実数の対数	math.log(x, k)
整数個からk個取り出した場合の順列の総数	math.perm(n, k)
線グラフを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの指定した列の中にいくつ日付データが存在するか数える	df['列A'].isin([value]).sum()
option: スチールブルーにグラフの色を変更する	color = 'steelblue'
option: ミディアムパープル色を使う	color = 'mediumpurple'
線グラフの色をビスクに指定する	plt.plot(データ列x, データ列y, color='bisque')
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
x,y,zをそれぞれn,n2,n3に変更する	x, y, z = n, n2, n3
黄色で文字列をプリントする	print(f'\033[33m{value}\033[0m')
nをn2で整数除算する	n // n2
ふたつの列からグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
ゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
無限大	math.inf
ダークサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
option: 星印を描画する	marker = '*'
今日のタイムスタンプ	datetime.datetime.today()
分数の分子	q.numerator
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
ダークグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
MSDとして淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
datetime64型のデータフレームのあるカラムを表データのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
ダークグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkgray')
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
双方向キューの最後に文字列を追加する	deq.append(element)
グラフにグリッド線を入れる	plt.grid(True)
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
実数を千の位で丸める	round(x, -3)
rgbの丸マーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームの選択した列の未入力値を直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
文字列の中で正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s)
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
エクセルファイルからデータフレームとして複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
option: フォントの色をダークスラテグレーに設定する	color = 'darkslategray'
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
縦棒グラフをバリーウッド色として描画する	plt.bar(データ列x, データ列y, color='burlywood')
実数の正弦	math.sin(x)
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
nからn2までの一つ置きの整数列	list(range(n, n2+1, 2))
散布図の大バツ印を青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
リストの中の一番小さい値を求める	min(aList)
データフレームのあるカラムのモードを算出する	df['列A'].mode()
実行を強制的に終了する	sys.exit()
日付時刻データは何秒か知る	aDatetime.second
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
option: 色のアルファ値を指定する	alpha = 0.5
カラムの標本標準偏差	df['列A'].std(ddof=1)
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
ヒストグラムを描き、、区間数をする	plt.hist(データ列, bins=区関数)
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
要素が集合のメンバーか調べる	element in aSet
option: ピンクにフォントの色を設定する	color = 'pink'
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
文字列をエラーを無視してバイト列にする	s.encode(errors='ignore')
option: 読み込みモードにセットする	mode = 'r'
データフレームのあるカラムの日にち	df['列A'].dt.day
カラムが正規分布に従うか調べる	scipy.stats.shapiro(df['列A'])
ある列の文字列が正規表現にマッチするデータを抽出する	df[df['列A'].str.match(正規表現)]
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
ダークオリーブグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
データフレームをグループ化しあるカラムに対し個数を求める	df.groupby('列A')['列B'].count()
配列の幾何平均を求める	scipy.stats.gmean(配列)
データフレームの列名一覧で指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
option: グラフの色をミディアムスレートブルーにセットする	color = 'mediumslateblue'
option: アイボリーを使う	color = 'ivory'
プロットを描画する準備をする	import matplotlib.pyplot as plt
マルーン色でヒストグラムを描画する	plt.hist(データ列, color='maroon')
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
破線を用いてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
改行せずに２つのリストをプリントする	print(value, value2, end='')
タプルをリストに変換する	list(aTuple)
MSDで多次元データを濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
縦棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgray')
配列と数列について散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
標準入力から1行分読み込む	sys.stdin.readline()
option: ライトスカイブルー色を使用する	color = 'lightskyblue'
ふたつの集合の積集合	aSet.intersection(aSet2)
実数を十の位で四捨五入する	round(x, -1)
nがn2以下か	n <= n2
集合の濃度	len(aSet)
ヒストグラムの色をナバホホワイトにセットする	plt.hist(データ列, color='navajowhite')
nとkのコンビネーションを計算する	math.comb(n, k)
折れ線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
標準入力から1行受け取る	input()
数値を簡単にする	sympy.sympify(e)
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
ダークターコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
文字列を最初の部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
レモンシフォン色でヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
変数を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
棒グラフを暗い赤色として描画する	plt.bar(データ列x, データ列y, color='darkred')
真紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
文字列を文字リストに変換する	list(s)
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
データフレームのあるカラムをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
要素ひとつのりストを作る	[element]
ある列の文字列が部分文字列で始まらない行を抽出する	df[~ df['列A'].str.startswith(部分文字列)]
オリベドラブ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
折れ線グラフの▽マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
散布図に星印を加える	plt.scatter(データ列x, データ列y, marker='*')
モカシン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
散布図をスノー色として描画する	plt.scatter(データ列x, データ列y, color='snow')
ディープスカイブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
ヒストグラムをダークゴールデンロッド色として描画する	plt.hist(データ列, color='darkgoldenrod')
青い実線を用いてイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
折れ線グラフの星印の大きさを変える	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
クリムゾン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
option: ミッドナイトブルー色を使う	color = 'midnightblue'
アルファベットの大文字列	string.ascii_uppercase
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
ある列の値がxに等しくないデータを取り出す	df[df['列A'] != x]
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
相関係数でデータフレームの相関行列を求める	df.corr(method='pearson')
切片なしの線形モデルを作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
黒い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
サーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
year年month月day日hour時minute分を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
データシリーズのどの値が頻出か確認する	ds.mode()
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
値を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
マゼンタ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
縦棒プロットを描画して、棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
option: ミディアムパープル色を用いる	color = 'mediumpurple'
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
nが1、もしくは2かどうかテストする	n == 1 or n == 2
グラフをプロットする準備をする	import matplotlib.pyplot as plt
部分文字列で文字列の開始位置以降が開始するか調べる	s.startswith(sub, start)
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
MSDで多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
小数点以下の表示精度をする	pd.set_option('precision', n)
文字列は全て印字できるか調べる	s.isprintable()
二つの列の値によってデータフレームをグループ化し、統計量を求める	df.groupby(['列A', '列B']).describe()
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
実数とyの斜辺	math.hypot(x, y)
リストとリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgray')
データ列をリストを境界値としてビニングする	pd.cut(ds, aList)
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
オブジェクトは組に含まれないか調べる	element not in aTuple
データフレームの選択したカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
データシリーズの要約統計量	ds.describe()
ヒストグラムをシャルトリューズ色を用いて描画する	plt.hist(データ列, color='chartreuse')
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
データシリーズの欠損値を直後の値で埋める	ds.fillna(method='bfill')
正規分布に基づくパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームのカラムの幾何平均	scipy.stats.gmean(df['列A'])
指定したカラムの中にいくつ欠損値が存在するかカウントする	df['列A'].isna().sum()
ヒストグラムをシーグリーン色を使って描画する	plt.hist(データ列, color='seagreen')
散布図に赤い▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
option: フォントの色をサドルブラウンに指定する	color = 'saddlebrown'
ライトコーラルにヒストグラムの色を指定する	plt.hist(データ列, color='lightcoral')
ライムグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='limegreen')
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
要素ひとつのりスト	[element]
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
タイムスタンプデータが日付時刻データより前	aDatetime < aDatetime2
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
縦棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
option: ライトスレイグレー色を使う	color = 'lightslategray'
綺麗なグラフを用いる準備をする	import seaborn as sns
option: パウダーブルーを使う	color = 'powderblue'
option: コーンフラワーブルーにフォントの色を指定する	color = 'cornflowerblue'
BOM付きで書き込み用にファイルパスをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
縦棒グラフをダークグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkgreen')
ベクトルの行を選択する	aArray[行番号]
データシリーズの値が欠損値か調べる	ds.isna()
データフレームの指定したカラムの中にある文字列と文字列の合計をカウントする	df['列A'].isin([value, value2]).sum()
文字列の変数名を数式にする	sympy.Symbol(s)
オリベドラブにヒストグラムの色を設定する	plt.hist(データ列, color='olivedrab')
日付データを文字列を使ってフォーマットする	"aDate.strftime(""%d/%m/%y"")"
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
データフレームから重複ありでランダムに100行をサンプリングする	df.sample(100, replace=True)
option: グラフの色をパープルに設定する	color = 'purple'
ダークオレンジ色を使ってヒストグラムを描画する	plt.hist(データ列, color='darkorange')
グリーンイエロー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
淡いピンク色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
カウンタの全数を使う	aCounter.total()
文字列をASCII限定として正規表現で区切る	re.split(pattern, s, flags=re.ASCI)
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
文字列を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
回帰分析をブースティングで行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
茶色色でヒストグラムを描画する	plt.hist(データ列, color='brown')
ミディアムターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
リストが少なくともひとつ真	any(aList)
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
ライムグリーンにヒストグラムの色をする	plt.hist(データ列, color='limegreen')
文字列にシーケンスを変換して空白によって結合する	' '.join(map(str, iterable))
日本語が文字列にある	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データフレームのあるカラムの曜日数を使う	df['列A'].dt.dayofweek
オブジェクトを文字列にする	str(obj)
日付時刻データにn分分、足す	aDatetime + datetime.timedelta(minutes=n)
日付時刻データの年数	aDatetime.year
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
項目名が辞書上で未定義か調べる	key not in aDict
配列の行ごとの標準偏差を算出する	np.std(aArray, axis=1)
文字列を積極的に小文字に変換する	s.casefold()
空のヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
線グラフを青い一点鎖線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
配列をn個に等量で分割する	pd.qcut(aArray, n)
タプルをnから順番付けする	enumerate(aTuple, start=n)
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
データフレームの中に存在する文字列と文字列の合計をカウントする	df.isin([value, value2]).sum()
option: ライトグリーンにグラフの色を変更する	color = 'lightseagreen'
ロイヤルブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
option: グラフの色をライトグリーンに変更する	color = 'lightseagreen'
リストの中の最小値	min(aList)
ドジャーブルーにヒストグラムの色を指定する	plt.hist(データ列, color='dodgerblue')
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
変数を黒色にする	f'\033[30m{value}\033[0m'
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
ライトグレー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
まとめてデータフレームの一部のカラムの値をValueMapで置き換える	df[['列A', '列B']].replace(ValueMap)
二つのデータフレームを列名を指定して外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
option: ディムグレー色を使う	color = 'dimgray'
グリッドの線種を一点鎖線に変更する	plt.grid(linestyle='dashbot')
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
現在が土曜日	datetime.datetime.today().weekday() == 5
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
黄色いグリッド線を引く	plt.grid(color='y')
データ列をインポートする	import pandas as pd
変数をアンダーライン付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
グラフのタイトルをする	plt.title('グラフの名称')
サーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
option: ライトゴールドロディイエローを使う	color = 'lightgoldenrodyellow'
option: フォントの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
棒グラフをライトサーモン色として描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
ライトグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
ファイル全体を行単位で分割して読む	f.readlines()
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
0からN未満までの配列	np.arange(N)
ある列のカテゴリごとの平均値	df.groupby('列A').mean()
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
データ列のユニークな要素	ds.unique()
グリッド線	plt.grid(color='#800080')
リストとリストの散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列中にひとつでも非大文字が含まれるか	any(not c.isupper() for c in s)
組の末尾のn要素を取り除く	aTuple[:-n]
predicateFuncが真となるシーケンスの要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフをハニーデュー色として描画する	plt.plot(データ列x, データ列y, color='honeydew')
文字列の末尾から部分文字列を探す	s.rfind(sub)
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
棒グラフをダークオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkorchid')
option: ミディアムターコイズを使う	color = 'mediumturquoise'
カウンタの各項目を、そのカウントだけ列挙する	aCounter.elements()
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
option: ダークバイオレット色を使う	color = 'darkviolet'
少ない順にカウンタを列挙する	aCounter.most_common()[::-1]
度数分布図のビン数を設定する	plt.hist(データ列, bins=区関数)
ヒストグラムをアリスブルー色として描画する	plt.hist(データ列, color='aliceblue')
表データのあるカラムが何時か見る	df['列A'].dt.hour
黒い▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
option: フォントの色をダークオレンジに設定する	color = 'darkorange'
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
折れ線グラフをサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='salmon')
横棒グラフをオリベドラブ色として描画する	plt.barh(データ列x, データ列y, color='olivedrab')
赤い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
赤い菱形マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
ミディアムターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
正規分布にしたがってランダムに配列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
ベクトルの標準偏差	np.std(aArray)
option: フォントの色をライトコーラルに設定する	color = 'lightcoral'
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ライトサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データを最大値として正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
カウンタ同士で和集合演算する	aCounter | aCounter2
辞書のキーを列挙する	aDict.keys()
ライム色を用いてヒストグラムを描画する	plt.hist(データ列, color='lime')
データ列をビン数nでビン分割する	pd.cut(ds, n)
option: ダークターコイズを使う	color = 'darkturquoise'
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
三角印を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
rgbの右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
タプルの中の最大値	max(aTuple)
箱ひげ図を二つ並べて描く	plt.boxplot([データ列, データ列])
option: 分割記号を文字列にする	sep = s
option: フォントの色をアクアマリンに設定する	color = 'aquamarine'
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
データフレームをグループ化し、合計を計算する	df.groupby('列A').sum()
文字列が部分文字列で終わるか調べる	s.endswith(sub)
配列と数列の散布図を描画して、マーカーを菱形に変更する	plt.plot(データ列x, データ列y, marker='D')
ファイル全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
全ての８進数字	string.octdigits
日付時刻データとタイムスタンプデータの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
文字列リストを連結して一つの文字列にする	''.join(map(str, iterable))
辞書のコピー	dict(aDict)
棒グラフをブラック色として描画する	plt.bar(データ列x, データ列y, color='black')
分数を使う	import fractions
折れ線グラフの色をゴールドにセットする	plt.plot(データ列x, データ列y, color='gold')
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
散布図の星マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
折れ線グラフをポイント印で描画する	plt.plot(データ列x, データ列y, marker='.')
データをL2ノルムとして正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
TSVからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
データフレームのn番目の行を取り出す	df.loc[n]
既存の配列を元にして全要素が0の配列を初期化する	np.zeros_like(aArray)
縦棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
データフレームの中の列をビン数nを使ってビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
印字できる文字列にする	ascii(x)
折れ線グラフの色をフクシアにセットする	plt.plot(データ列x, データ列y, color='fuchsia')
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
エポック秒のカラムからタイムスタンプ型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
データシリーズの中にいくつ文字列があるか数える	ds.isin([value]).sum()
データフレームをあるカラムによってソートして、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
データフレームからカテゴリデータの列名一覧を使う	df.select_dtypes('object').columns
option: フォントの色をオレンジに指定する	color = 'orange'
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
二つのオブジェクトが同一参照かテストする	obj is obj2
ヒストグラムの色を濃い青に設定する	plt.hist(データ列, color='darkblue')
空のタプルを作る	()
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
実数の絶対値を求める	math.fabs(x)
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
ファイルパスをオープンして]、読み込みストリームを見る	open(filepath, mode='r')
二つ並べて度数分布図をプロットする	plt.hist([データ列, データ列], color=['b', 'r'])
ブラックにヒストグラムの色を設定する	plt.hist(データ列, color='black')
文字列がいつまでも繰り返す列	itertools.repeat(element)
データフレームのヒストグラム付き散布図を描く	sns.jointplot(x='列名', y='列名', data=df)
二つのカウンタの共通する要素	aCounter & aCounter2
データシリーズが何時か見る	ds.dt.hour
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
カラムの欠損値を最大値に指定する	df['列A'].fillna(df['列A'].max())
データフレームの選択した列の平均値を算出する	df[['列A', '列B']].mean()
空行をプリントする	print()
数の二乗	x ** 2
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
option: 改行コードをUNIXに設定する	newline = '\n'
rgbのバツマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
配列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
ファイルを書き込みモードで開いて]、fとする	f = open(filepath, mode='w')
ヒストグラムをラベンダーブラッシュ色として描画する	plt.hist(データ列, color='lavenderblush')
整数nがリストのどれかか調べる	n in aList
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
日付データが何曜日か知る	aDate.weekday()
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
文字列を部分文字列で二分し、残りの文字列を使う	s.partition(sub)[-1]
option: 線を細くする	linewidth = 3.0
折れ線グラフの丸印の大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
SJISで追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='shift_jis')
option: ライトグリーンを使用する	color = 'lightseagreen'
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
ファイルを読み込みモードとしてオープンして]、fとする	f = open(filepath, mode='r')
データフレームの最後	df.tail()
option: ラインスタイルを破線にセットする	linestyle = 'dashed'
数式の展開を行う	sympy.expand(e)
線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: フォントの色をオリーブに設定する	color = 'olive'
オールドレース色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
option: カデットブルー色を使う	color = 'cadetblue'
小麦色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
棒グラフを真紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームの指定した二つの列を抽出する	df[['列A', '列B']]
行列と同じ大きさの空行列を作る	np.empty_like(aArray)
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
オブジェクトが集合	isinstance(obj, set)
要素ひとつのタプルを作る	(element,)
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
データフレームからランダムに10行を抽出する	df.sample(10)
最大値・最小値の範囲を用いて一様な乱数を得る	random.uniform(最小値, 最大値)
option: グラフの色をサンディーブラウンに指定する	color = 'sandybrown'
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームのあるカラムのタイムゾーンを設定する	df['列A'].tz_convert('Asia/Tokyo')
データフレームの分位数	df.quantile(パーセント/100)
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
データフレームのNaNをメディアンに設定する	df.fillna(df.median())
option: ダークオリーブグリーンを使う	color = 'darkolivegreen'
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
ヒストグラムと勾配ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
散布図の右三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
グラフを使用する準備をする	import matplotlib.pyplot as plt
配列としてデータフレームのある列を抽出する	df['列A'].values
綺麗なグラフを使用する準備をする	import seaborn as sns
グラフで使える色の一覧	matplotlib.colors.cnames
K最近傍法を用いて回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
データフレームの中に文字列と文字列がいくつあるかカウントする	df.isin([value, value2]).sum()
データフレームの行を振り直す	df.reset_index()
データフレームの信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームの選択したカラムの平均	df[['列A', '列B']].mean()
多次元データをt分布型確率的近傍埋め込み法でパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
折れ線グラフのクロスマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
ロバスト分類モデルを作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
nの無限な数列を求める	itertools.repeat(n)
文字列は平仮名か調べる	('ぁ' <= ch <= 'ん')
散布図に三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='^')
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
リストとリストの散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
変数をシアンで表示する	print(f'\033[36m{value}\033[0m')
線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
３つの変数を順に出力する	print(value, value2, value3)
モードでデータフレームの未入力値を埋める	df.fillna(df.mode().iloc[0])
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
散布図に赤い▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
散布図の色をブラウンにする	plt.scatter(データ列x, データ列y, color='brown')
カテゴリ列で色分けしてカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
タプルの合計を計算する	sum(aTuple)
線形回帰モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
ファイルパスのセパレータ記号	os.sep
環境がMacOSかどうか調べる	sys.platform.startswith('darwin')
データフレームの指定したカラムを万の位で丸める	df['列A'].round(-4)
パールバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
データシリーズを整数に丸める	ds.round()
ヒストグラムをローングリーン色として描画する	plt.hist(データ列, color='lawngreen')
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
nからいつまでもカウントアップする	itertools.count(start=n)
option: マーカーの色をホワイトにする	markerfacecolor = 'white'
角度のラジアン	math.radians(degree)
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
青紫色としてヒストグラムを描画する	plt.hist(データ列, color='violet')
ダークバイオレット色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームの選択したカラムの欠損値を中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
option: 欠損値も無視しない	dropna = True
データフレームのカラムの中にいくつ欠損値が存在するか求める	df['列A'].isna().sum()
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
リストと配列についての散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
散布図の上三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
ブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
赤いバツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
赤い三角マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='r')
棒グラフをライトグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgrey')
配列の標準偏差	np.std(aArray)
日付データが金曜日か調べる	aDate.weekday() == 4
データフレームの指定したカラムの中にある文字列と日付データの合計を数える	df['列A'].isin([value, value2]).sum()
外れ値を除いた配列の算術平均を計算する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
別の文字列に文字列中の部分文字列を全部置き換える	s.replace(sub, newsub)
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
nにn2をかけた値をnにする	n *= n2
数値を黒色化する	f'\033[30m{value}\033[0m'
行列を配列から作る	np.array(iterable)
データフレームの中のカラムを分割数nでビン分割する	pd.cut(df[col], n)
nをn2だけ左シフトする	n << n2
指定した列の中にある日付データの個数をカウントする	df['列A'].isin([value]).sum()
青い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
標準入力から1行読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
データフレームのNaNをxで埋める	df.fillna(x)
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
昇順に複数の列によってデータフレームをソートし、、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
データフレームの下位25パーセント	df.quantile(0.75)
nが一桁の数か調べる	-9 <= n <= 9
ベクトルの演算をする	import numpy as np
オプションで、出力先をファイルに変更する	file = sys.open(filename, 'w')
データフレームから指定した三つの列を抽出する	df[['列A', '列B', '列C']]
リストと数列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
文字列から部分文字列を全て除去する	s.replace(sub, '')
ふたつの集合の対称差	aSet.symmetric_difference(aSet2)
rgbの▲マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
配列とリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
最初のプログラムを書く	print('Hello World')
上位集合かどうか	aSet.issuperset(aSet2)
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
両端キューの要素をn個分回転させる	deq.rotate(n)
実数を切り上げる	math.ceil(x)
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
データフレームの選択したカラムがどの程度、正規分布から尖っているか見る	df[['列A', '列B']].skew()
左三角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
option: ポイントマーカーを描画する	marker = '.'
データフレームの選択したカラムの歪度	df[['列A', '列B']].kurt()
半透明の点線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: 区切りを改行にする	sep = '\n'
option: オレンジレッドを用いる	color = 'orangered'
黒い菱形マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
nとn2が等しい	n == n2
データフレームの選択した列の空文字を未入力値に変換しドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
オブジェクトがリストに含まれるか調べる	element in aList
オブジェクトの種類	type(obj)
黄緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: 色をダークグリーンに設定する	color = 'darkgreen'
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
シーケンスとイテラブルを連結する	itertools.chain(iterable, iterable2)
棒グラフを黄色色として描画する	plt.bar(データ列x, データ列y, color='yellow')
日付データが火曜日	aDate.weekday() == 1
ある列の値がxに等しいデータを選ぶ	df[df['列A'] == x]
データフレームの要約統計量	df.describe()
option: 丸印を描画する	marker = 'o'
黒い大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
option: 箱髭図を水平方向にする	vert = False
数列のスピアマンの相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
データフレームの複数のカラムをドロップし、みる	df.drop(['列A', '列B'], axis=1)
実数の符号をコピーにする	math.copysign(x, x2)
ふたつの集合のユニオンを計算する	aSet.union(aSet2)
グラフを論文用に設定する	sns.set(context='paper')
折れ線グラフをディープスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
両端キュー中の要素のインデックスを使う	deq.index(element)
ダークグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
指定したカラムの母標準偏差	df['列A'].std(ddof=0)
数式を簡略にする	sympy.sympify(e)
option: フォントの色をアイボリーに指定する	color = 'ivory'
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
ゲインズボロ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
列の名前を列挙する	df.columns
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
option: グラフの色をフォレストグリーンに指定する	color = 'forestgreen'
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
棒グラフをシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='cyan')
部分文字列によって文字列を区切る	s.split(sub)
マッピングの値の一覧	aDict.values()
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
数式の微分を求める	sympy.diff(e)
双方向キューの左側に列の各要素を追加する	deq.extendleft(iterable)
データフレームの重複した行をマスクする	df.duplicated()
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
横棒グラフをサンディーブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='sandybrown')
折れ線グラフの色をライトシアンにセットする	plt.plot(データ列x, データ列y, color='lightcyan')
相関係数を算出する	scipy.stats.pearsonr(配列, 配列2)
縦棒グラフの色をティールにする	plt.bar(データ列x, データ列y, color='teal')
縦棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
ヒストグラムの色をデピンクに指定する	plt.hist(データ列, color='deeppink')
シルバー色としてヒストグラムを描画する	plt.hist(データ列, color='silver')
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
ファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
横棒グラフをオレンジレッド色として描画する	plt.barh(データ列x, データ列y, color='orangered')
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
モカシン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
表データのあるカラムが何曜日か見る	df['列A'].dt.weekday_name
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
プロットの大きさを設定する	plt.figure(figsize=(横幅, 高さ))
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
逆正接	math.atan(x)
マッピングの全項目を空にする	aDict.clear()
文字列の長さを見る	len(s)
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
列を文字列リストに変換して部分文字列で連結する	sub.join(map(str, iterable))
クラス分類を勾配ブースティングで行う	model = sklearn.ensemble.GradientBoostingClassifier()
データフレームの選択したカラムが正規分布からどの程度、歪んでいるか見る	df[['列A', '列B']].kurt()
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
データフレームの列のユニークな値	df[col].unique()
データフレームのカラムの標準誤差を求める	scipy.stats.sem(df['列A'])
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
ふたつの列からグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
変数を定義する	x = n
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
ヒストグラムの色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
データフレームの統計量	df.describe()
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
リストを分割数nを用いてビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
黒いポイント印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
カラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
ひとつでも非大文字が文字列中に含まれる	any(not c.isupper() for c in s)
青い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
文字列の示すエンコーディングを使って追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding=s)
珊瑚色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
双方向キューから最初の要素を削除する	deq.remove(element)
option: スノーにグラフの色を変更する	color = 'snow'
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
ふたつの列を組み合わせてグループ化し合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
option: 文字コードtextを使用する	encoding = text
ヒストグラムをベージュ色を用いて描画する	plt.hist(データ列, color='beige')
折れ線グラフの三角印の色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
黒いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフの右三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
データ列をn個に等間隔で分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
文字列の終了位置より前に部分文字列が含まれないか確認する	s.find(sub, 0, end) == -1
データ列の一意な値の個数	ds.nunique()
データフレームからカラムを３つ選択する	df[['列A', '列B', '列C']]
データシリーズの曜日数を見る	ds.dt.dayofweek
実数から実数を引く	x - y
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
文字列の開始位置からと終了位置の範囲に部分文字列が含まれるかどうか調べる	s.find(sub, start, end) != -1
外れ値を除いた配列の分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
指定の列に重複があれば、ドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
変数がマイナス無限大に近づくとき、数式の極限値を求める	sympy.limit(e, z, -oo)
タイムスタンプデータが何日か知る	aDatetime.day
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
空の単回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
棒グラフを茶色色を用いて描画する	plt.bar(データ列x, データ列y, color='brown')
レベッカパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
日付データが木曜日かどうか調べる	aDate.weekday() == 3
option: 色をリネンにする	color = 'linen'
文字列を変数にして、変数にする	z = sympy.Symbol(s)
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
ミディアムスレートブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
線グラフの色をダークシアンに指定する	plt.plot(データ列x, データ列y, color='darkcyan')
グレー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
横棒グラフをチョコレート色を使って描画する	plt.barh(データ列x, データ列y, color='chocolate')
横棒グラフをスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='steelblue')
棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
タプルからn個、サンプリングする	random.sample(iterable, k=n)
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
option: マーカーを菱形に変える	marker = 'D'
今日が何月か知る	datetime.datetime.today().month
option: ミディアムスレートブルーにグラフの色を設定する	color = 'mediumslateblue'
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
改行付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
option: グラフの種類を実線にする	linestyle = 'solid'
nをn2乗に増やす	n **= n2
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
辞書のキーに対応した値	aDict.get(key)
数値の微分を算出する	sympy.diff(e)
黒いバツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c='k')
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
nがn2よりも大きいかどうか確認する	n > n2
リストが空でないか確認する	len(aList) != 0
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
option: オレンジにグラフの色を変更する	color = 'orange'
option: 回帰木の深さを制限する	maxdepth = n
データフレームをグループ化し、あるカラムに対し個数を求める	df.groupby('列A')['列B'].count()
日付データが日付データより前	aDate < aDate2
文字列が文字列リストに含まれるか調べる	s in aStringList
option: 区切りを使わない	sep = ''
折れ線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
自然数の順列の総数	math.perm(n)
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
nの八進文字列	oct(n)[2:]
文字列からformatのパターンを使って日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
option: グラフの色を珊瑚に変更する	color = 'coral'
データフレームの指定したカラムの欠損値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
文字列をプリントする	print(value)
本日が土曜日かどうか調べる	datetime.datetime.today().weekday() == 5
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
表データをインポートする	import pandas as pd
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
文字列の右側から部分文字列を消す	s.rstrip(sub)
白いグリッド線を引く	plt.grid(color='w')
ヒストグラムを一点鎖線を使って描画する	plt.hist(データ列, linestyle='dashbot')
ミディアムパープルにヒストグラムの色を変更する	plt.hist(データ列, color='mediumpurple')
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
option: 印を▼に変更する	marker = 'v'
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
データシリーズの25パーセンタイル	ds.quantile(0.25)
ファイルのベースファイル名	os.path.splitext(os.path.basename(filepath))[0]
ヒストグラムをピンク色を用いて描画する	plt.hist(データ列, color='pink')
データフレームのカラムを千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームのグループ化した散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
非数値データを連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
連続した行列の作成する	np.arange(開始値, 終了値, 等差)
セットが空かどうか	len(aSet) == 0
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
データフレームの中央値を求める	df.median()
データフレームから指定した３つの列を抽出する	df[['列A', '列B', '列C']]
実行結果を白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
縦棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
折れ線グラフに菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
option: ダークシアグリーンを使う	color = 'darkseagreen'
option: カデットブルー色を用いる	color = 'cadetblue'
折れ線グラフに赤い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
nがn2で割り切れないかどうか調べる	n % n2 != 0
配列の正規分布を判定する	scipy.stats.shapiro(配列)
データフレームの選択したカラムを万の位で四捨五入する	df[['列A', '列B']].round(-4)
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
option: 色を小麦色に設定する	color = 'wheat'
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
option: サーモンにグラフの色を指定する	color = 'salmon'
線グラフをゴーストホワイト色として描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
全８進数字	string.octdigits
配列の行ごとの合計値	np.sum(aArray, axis=1)
データフレームのあるカラムが何秒か調べる	df['列A'].dt.second
データフレームの選択したカラムの欠損値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
数列とリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
フォレストグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
２つの列によってデータフレームを並べ直す	df.sort_values(by=['列A', '列B'])
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
データフレームの指定した列の不偏分散	df['列A'].var(ddof=1)
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
イテラブルとシーケンスをペアのリストにする	itertools.zip_longest(iterable, iterable2)
淡い茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
タイタニックのデータセットからデータフレームを読み込む	df = sns.load_dataset('titanic')
バリーウッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
カラーパレットを濃くする	sns.set(pallete='deep')
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
配列の尖度を計算する	scipy.stats.kurtosis(配列, bias=False)
n2分のn	n / n2
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
セットから全ての要素を取り除く	aSet.clear()
データフレームの選択した列の中に文字列と日付データがあるか	df[['列A', '列B']].isin([value, value2])
option: フォントの色をロージーブラウンに設定する	color = 'rosybrown'
散布図をターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='turquoise')
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
データフレームをCSV形式にインデックスを付けず書き出す	df.to_csv('file.csv', index=None)
データフレームの列の欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
option: グラフの色をスノーに設定する	color = 'snow'
文字列を部分文字列で分割したときの残りの文字列を見る	s.partition(sub)[-1]
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
円グラフを真円にする	plt.axis('equals')
集合＼集合	aSet.difference(aSet2)
オブジェクトが浮動小数点数クラスか調べる	isinstance(obj, float)
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
配列をビン数nでビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
インディアンレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
テンプレートをargsを引数としてフォーマットする	formatText.format(*args)
aListn番目から要素をポップする	aList.pop(n)
rgbの大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムをダークスラテグレー色として描画する	plt.hist(データ列, color='darkslategray')
3つの実行結果を順にプリントする	print(value, value2, value3)
グリッドの線スタイルを実線に変更する	plt.grid(linestyle='solid')
縦棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
変数が無限大に近づくときの数式の極限値を計算する	sympy.limit(e, z, oo)
データフレームのカラムを並べてボックスチャートにする	plt.boxplot([df['カラム'], df['カラム']])
option: アイボリー色を使用する	color = 'ivory'
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
データフレームのカラムを散布図で描画する	sns.scatterplot(data=df, x='列名', y='列名')
ティール色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
option: ベージュ色を使う	color = 'beige'
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
ある列ごとの標準偏差	df.groupby('列A').std()
データフレームの一部のカラムの欠損値を最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
データフレームを指定した列で大きい順に破壊的に並べ直す	df.sort_values(by='列A', ascending=False, inplace=True)
縦棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
文字列をカンマで区切って、列挙する	s.split(',')
データフレームを表示するとき表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
双方向キューのn番目を使う	deq[n]
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
プロット中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
アクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
ヒストグラムを描き、、区間数を設定する	plt.hist(データ列, bins=区関数)
リストを順に表示する	print(*aList)
xをブール値にする	bool(x)
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
散布図をインディアンレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='indianred')
リストと数列について散布図を描いて、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ファイルパスをバイナリ用にオープンする]	open(filepath, mode='rb')
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
散布図の▲マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
縦棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
文字列はキーワード	keyword.iskeyword(s)
データフレームとしてTSVファイルを読む	pd.read_csv('file.tsv', sep='\t')
option: パープル色を使用する	color = 'purple'
散布図を耐火レンガ色として描画する	plt.scatter(データ列x, データ列y, color='firebrick')
データフレームを並べ直し、、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
ライトスチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
スプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
n回オブジェクトが繰り返すイテラブル	itertools.repeat(element, n)
タイムスタンプデータが火曜日かどうか確認する	aDatetime.weekday() == 1
散布図に黒いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
本日は何日か知る	datetime.datetime.today().day
シエナ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
ヒストグラムのラインスタイルを破線に設定する	plt.hist(データ列, linestyle='dashed')
縦棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
option: ダイアモンドマーカーを使う	marker = 'D'
データシリーズの標準偏差	ds.std()
option: マーカーの色を濃いシアンにする	markerfacecolor = 'darkcyan'
折れ線グラフに赤いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
本日が土曜日か	datetime.datetime.today().weekday() == 5
文字列を白色にする	f'\033[37m{value}\033[0m'
パープル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
option: グレー色を使用する	color = 'grey'
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
ラインを青い一点鎖線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ファイルパスをUTF8で書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
TSVファイルからデータフレームを読む	pd.read_csv('file.tsv', sep='\t')
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データ列をリストを境界値として分割する	pd.cut(ds, aList)
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
タプルを順に表示する	print(*aTuple)
散布図を黒い丸マーカーで描く	plt.plot(データ列x, データ列y, marker='o', c='k')
乱数シードをnで固定する	random.seed(n)
option: フォントの色をスプリンググリーンに指定する	color = 'springgreen'
option: グラフの種類を実線に設定する	linestyle = 'solid'
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
横棒グラフの色を黄緑にする	plt.barh(データ列x, データ列y, color='chartreuse')
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
グラフの見栄えを綺麗にする	import seaborn as sns
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
オレンジにヒストグラムの色を設定する	plt.hist(データ列, color='orange')
棒グラフをゴーストホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
逆順のスタック	reversed(deq)
CSVファイルとしてデータフレームを保存する	df.to_csv('file.csv')
xを文字列に変換する	str(x)
データシリーズの欠損値を中央値に設定する	ds.fillna(ds.median())
option: アクアを使う	color = 'aqua'
デピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームをある列のカテゴリで集約し、グループごとの件数を知る	df.groupby('列A').size()
option: 改行コードを旧Macに設定する	newline = '\r'
nが正の整数	n > 0
３変数の最大値を算出する	max(x, y, z)
データフレームの指定したカラムは正規分布からどの程度、尖っているか確認する	df['列A'].skew()
range関数の無限版	itertools.count(start=n, step=step)
option: フォントの色をライトシアンに指定する	color = 'lightcyan'
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
データフレームのあるカラムの月	df['列A'].dt.month
横方向に二つのデータフレームをマージする	pd.merge(df, df2)
カウンタからゼロ出現回数を取り除く	+aCounter
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
option: デピンクにグラフの色を変更する	color = 'deeppink'
option: 色をビスクに設定する	color = 'bisque'
ヒストグラムをダークオレンジ色を用いて描画する	plt.hist(データ列, color='darkorange')
横棒グラフをライトグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightgray')
option: インディゴ色を使う	color = 'indigo'
赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
浮動小数点数にする	float(x)
グラフの描画を綺麗にする	import seaborn as sns
データフレームの指定したカラムの欠損値を直前の値にする	df['列A'].fillna(method='ffill')
option: 色をパレットトルコイズに設定する	color = 'paleturquoise'
横棒グラフをダークオレンジ色として描画する	plt.barh(データ列x, データ列y, color='darkorange')
グラフの描画で明るくカラーパレットを使用する	sns.set(pallete='bright')
散布図をミディアムオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
配列をビン数nを用いてビニングする	pd.cut(aArray, n)
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
データフレームの中の列をn個に分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
三変数の最も大きい値	max(x, y, z)
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
プロットのグリッドを白くする	sns.set(style='whitegrid')
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
クラス分類をニューラルネットでする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
指定した列のカテゴリで集計し最小値を計算する	df.groupby('列A').min()
データフレームを百の位で丸める	df.round(-2)
グラフを見やすくする	import seaborn as sns
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
配列間のケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
option: ヘッダを自動的な連番にする	header = None
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
文字列がリストに含まれるか調べる	element in aList
option: シーグリーンを使う	color = 'seagreen'
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
青い破線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
空のセットを使う	set()
散布図の印の色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
整数の階乗	math.factorial(n)
表計算ファイルからシート名を指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
ヒストグラムをネイビー色として描画する	plt.hist(データ列, color='navy')
文字列をセパレータを用いて区切って、列挙する	s.split(sep)
リストとリストの散布図をプロットし、、丸マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
配列の内積	np.dot(aArray, aArray2)
オブジェクトは集合型	isinstance(obj, set)
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
カテゴリで色分けしてデータフレームをに箱ひげ図として図示する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: シルバー色を用いる	color = 'silver'
データ列の折れ線グラフをポイント印を用いて描画する	plt.plot(データ列x, データ列y, marker='.')
マルーンにヒストグラムの色を変更する	plt.hist(データ列, color='maroon')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
行列の行ごとの標準偏差	np.std(aArray, axis=1)
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
option: スノーを使う	color = 'snow'
ファイルを書き込みモードでオープンして]fとする	f = open(filepath, mode='w')
コーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
リストから行列を作成する	np.array(iterable)
行列が何のデータ型か調べる	aArray.dtype()
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
option: シートの名前を設定する	sheet_name = ['A', 'B']
折れ線グラフの色をアリスブルーに変更する	plt.plot(データ列x, データ列y, color='aliceblue')
文字列が全て空白文字からなるか調べる	s.isspace()
オリーブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
ヒストグラムをレモンシフォン色として描画する	plt.hist(データ列, color='lemonchiffon')
n個にリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフの色をミントクリームに指定する	plt.plot(データ列x, データ列y, color='mintcream')
option: 線の種類を破線に設定する	linestyle = 'dashed'
最大値・最小値の範囲で一様な疑似乱数	random.uniform(最小値, 最大値)
文字列中の平仮名を片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
xが真か調べる	bool(x)
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
あるカラムの文字列が部分文字列で終わる行を抽出する	df[df['列A'].str.endswith(部分文字列)]
コマンドの第二引数を知る	sys.argv[1]
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
ヒストグラムの色をドジャーブルーに変更する	plt.hist(データ列, color='dodgerblue')
折れ線グラフを真紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
ある列の文字列が正規表現文字列にマッチしない行を抽出する	df[~df['列A'].str.match(正規表現)]
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
ポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.')
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
nとn2の商	n / n2
option: 印を下三角に変更する	marker = 'v'
ヒストグラムをフォレストグリーン色として描画する	plt.hist(データ列, color='forestgreen')
データフレームの選択したカラムの中にと日付データがいくつ存在するか数える	df[['列A', '列B']].isin([value, value2]).sum()
日付時刻データをエポック秒にする	aDatetime.timestamp()
ファイル全体を行単位で分割して読み込む	f.readlines()
散布図をrgbの四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
日付時刻データの秒数を見る	aDatetime.second
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
真スーパーセットかどうか調べる	aSet > aSet2
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
文字列を全て小文字に変換する	s.casefold()
ある列によってデータフレームをまとめたグループ	df.groupby('列A')
最大長を指定してキュー	collections.deque(maxlen=n)
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
２つの数値をタブで区切ってプリントする	print(value, value2, sep='\t')
要素を両端キューの右側に追加する	deq.append(element)
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
ピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
デピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
折れ線グラフの大バツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームの選択したカラムの分散	df[['列A', '列B']].var()
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
データフレームのある列の未入力値を最小値で置き換える	df['列A'].fillna(df['列A'].min())
データフレームの指定した列の不偏分散を算出する	df['列A'].var(ddof=1)
整数nがタプルのどれかか調べる	n in aTuple
スラグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
イテラブルを集合に変換する	set(iterable)
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
データフレームの平均値	df.mean()
散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームをある列によって昇順にソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
データフレームの選択した列を百の位で丸める	df[['列A', '列B']].round(-2)
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
ファイルにxを文字列に変換して書き込む	f.write(str(x))
ヒストグラムをダークカーキ色として描画する	plt.hist(データ列, color='darkkhaki')
option: タブを区切りで使う	sep = '\t'
指定したカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
データフレーム中のNaNをドロップしてみる	df.dropna()
二つの実行結果をカンマで区切って出力する	print(value, value2, sep=',')
画面にプロットの使途を設定する	sns.set(context='notebook')
option: バッファのサイズを設定する	buffering = 4096
データシリーズの欠損値を平均値で埋める	ds.fillna(ds.mean())
文字列を走査し、パターンに複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
データシリーズが何分か調べる	ds.dt.minute
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
無限にnからカウントアップする	itertools.count(start=n)
黒い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: 耐火レンガ色を使う	color = 'firebrick'
白色で変数をプリントする	print(f'\033[37m{value}\033[0m')
降順に破壊的にデータフレームをある列で並べ直す	df.sort_values(by='列A', ascending=False, inplace=True)
ファイルから拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
線グラフの色をコーラルに指定する	plt.plot(データ列x, データ列y, color='coral')
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ダークゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
option: トマト色を使う	color = 'tomato'
文字列をシンボルにして、パラメータにする	z = sympy.Symbol(s)
数を実数から減ずる	x - y
Pythonパスにディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームの指定したカラムの中に文字列と文字列がいくつあるかカウントする	df['列A'].isin([value, value2]).sum()
配列とリストの散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
データフレームの指定したカラムの第一四分位数	df['列A'].quantile(0.25)
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
文字列を改行で区切る	s.splitlines()
リストの末尾を捨てる	aList[:-1]
データフレームのカラム間の相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
ヒストグラムをライトスカイブルー色として描画する	plt.hist(データ列, color='lightskyblue')
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
散布図の下三角印を青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームのある列をリストに変換する	df['列A'].values.tolist()
データシリーズのNaNをメディアンに設定する	ds.fillna(ds.median())
option: 色をミディアムオーキッドにする	color = 'mediumorchid'
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
ゴーストホワイト色でヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
実行を正しく停止する	sys.exit(0)
ゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
縦棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
ヒストグラムの色をオリーブに指定する	plt.hist(データ列, color='olive')
現在の時間数	datetime.date.today().hour
折れ線グラフの色をコーンズシルクに変更する	plt.plot(データ列x, データ列y, color='cornsilk')
カーキ色を用いてヒストグラムを描画する	plt.hist(データ列, color='khaki')
パラメータが無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
スカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='skyblue')
リストが空でないか調べる	len(aList) != 0
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
option: グラフの色をドジャーブルーに変更する	color = 'dodgerblue'
データフレームのカラムの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
ライトスレイグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
項目名が辞書上で定義済み	key in aDict
option: オリーブ色を使う	color = 'olive'
変数をマゼンタでプリントできる文字列にする	f'\033[35m{value}\033[0m'
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
option: 色をピンクに指定する	color = 'pink'
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
書式を辞書でフォーマットする	formatText.format_map(aDict)
option: ミッドナイトブルーにグラフの色を設定する	color = 'midnightblue'
文字列が全て英数字かテストする	s.isalnum()
折れ線グラフの色を青に変更する	plt.plot(データ列x, データ列y, color='blue')
option: フォントの色をスレートブルーに指定する	color = 'slateblue'
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
option: レベッカパープル色を使う	color = 'rebeccapurple'
ターコイズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
ヒストグラムの色をダークゴールデンロッドにセットする	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
タプルの値を逆順にする	aTuple[::-1]
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
n個の数値イテラブル	range(n)
データシリーズの不偏標準偏差	ds.std()
データフレームの一部のカラムの第三四分位数	df[['列A', '列B']].quantile(0.75)
ライム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
nとkのコンビネーション	math.comb(n, k)
棒グラフをナバホホワイト色として描画する	plt.bar(データ列x, データ列y, color='navajowhite')
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
option: インディアンレッド色を使う	color = 'indianred'
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
データフレームの指定したカラムの欠損値をxで埋める	df['列A'].fillna(x)
引数から名前付きタプルをインスタンス化する	C._make(パラメータ)
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
タプル中の要素は少なくとも一つ真か調べる	any(aTuple)
実数の指数を求める	math.frexp(x)[1]
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
タイタニックのデータセットをロードする	df = sns.load_dataset('titanic')
プロットのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
二つのオブジェクトが等しいか調べる	obj == obj2
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
option: アクアマリン色を使う	color = 'aquamarine'
折れ線グラフの丸マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
データフレームをある列によってソートする	df.sort_values(by='列A')
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
カデットブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
ユーザから入力される	input()
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(配列)
タプルの合計値	sum(aTuple)
折れ線グラフにバツ印を使う	plt.plot(データ列x, データ列y, marker='x')
データフレームの中のカラムを四分位数でビン分割する	pd.qcut(df[col], 4)
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
リストをシャッフルする	random.shuffle(aList)
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
ヒストグラムの色をレモンシフォンに変更する	plt.hist(データ列, color='lemonchiffon')
指定したカラムの文字列を欠損値にする	df['列A'].replace(値, np.nan)
データシリーズの分	ds.dt.minute
両端キューの中に値が含まれてるかどうか調べる	element in deq
実数の常用対数	math.log10(x)
ロードされたモジュールを列挙する	sys.modules
線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
折れ線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
オブジェクトが集合かどうか調べる	isinstance(obj, set)
イテラブルから配列を作る	np.array(iterable)
横棒グラフを濃いシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkcyan')
オブジェクトが論理値クラス	isinstance(obj, bool)
２つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
データフレームの重複していない行だけを抽出する	df[~ df.duplicated(keep=False)]
二つの列の値によってデータフレームを集約する	df.groupby(['列A', '列B'])
formatのパターンで文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
赤い右三角マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
散布図にrgbのダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフのバツ印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データフレームの指定した列のNaNをモードで埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
チップのデータセットからデータフレームをロードする	df = sns.load_dataset('tips')
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
データフレームの平均	df.mean()
データフレームをある列によって並べて、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgray')
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
０で全要素を初期化した行列を作る	np.zeros(行数, 列数)
折れ線グラフをダークシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
マッピングのキーの一覧	aDict.keys()
スクリプトの名前	sys.argv[0]
パウダーブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
カウンタのボトムをリストとして得る	aCounter.most_common()[:-n-1:-1]
データフレームの欠損値を直後の値で補う	df.fillna(method='bfill')
折れ線グラフの色をシルバーに指定する	plt.plot(データ列x, データ列y, color='silver')
option: ダークブルー色を使用する	color = 'darkblue'
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
文字列の先頭で正規表現にケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
青いヒストグラムを描画する	plt.hist(データ列, color='b')
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
option: グラフの色をピンクに設定する	color = 'pink'
線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
赤い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
重複ありで5行をデータフレームからランダムにサンプリングする	df.sample(5, replace=True)
データ列の文字列長を列として使う	ds.str.len()
回帰分析をK最近傍法で行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
文字列は漢字かどうか確認する	('\u4E00' <= ch <= '\u9FD0')
変数を赤色でプリントする	print(f'\033[31m{value}\033[0m')
option: スラグレー色を使う	color = 'slategrey'
線グラフを青紫色として描画する	plt.plot(データ列x, データ列y, color='violet')
三変数の最大の値	max(x, y, z)
カテゴリで色付けしてカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
実数の逆双曲線正接	math.atanh(x)
option: スキップするフッタをnにする	skipfooter = n
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
option: バイナリ書き込み用にセットする	mode = 'wb'
データフレームから同じデータをドロップする	df.drop_duplicates(inplace=True)
組をnからナンバリングする	enumerate(aTuple, start=n)
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
option: ライトスレイグレー色を使う	color = 'lightslategrey'
nからn2の値を引いてnとする	n -= n2
主成分分析で多次元データをパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
折れ線グラフをブラウン色で描画する	plt.plot(データ列x, データ列y, color='brown')
折れ線グラフでデータフレームのカラムを図示する	plt.plot(df[column], df[column])
自然数の最大公約数	math.gcd(n, n2)
option: 先頭の列をインデックスに設定する	index_col = 0
データフレームの指定の列に重複があれば、ドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
カウンタ同士で積集合	aCounter & aCounter2
nにn2を足して代入する	n += n2
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
データフレームのカラムの相関係数を計算する	scipy.stats.pearsonr(df['列A'], df['列B'])
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
nを符号付きで長さn2のバイト列にする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
データフレームのある列の値がx以下の行を抽出する	df[df['列A'] <= x]
中央値でデータフレームの中の列をビン分割する	pd.qcut(df[col], 2)
CSVからデータフレームを読み込む	pd.read_csv('file.csv', sep=',')
横棒グラフをトマト色として描画する	plt.barh(データ列x, データ列y, color='tomato')
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
最大値・最小値の範囲として一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
リストを中央値で分割する	pd.qcut(aList, 2)
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ミディアムパープル色としてヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
散布図を四角印で描画する	plt.scatter(データ列x, データ列y, marker='s')
青い点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
数値を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
変数を太字でプリントする	print(f'\033[1m{value}\033[0m')
xが一桁の正の数か	0 <= x <= 9
option: グラフの色をオリーブに設定する	color = 'olive'
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
nがn2未満、またはn3以上	n < n2 or n >= n3
option: サーモン色を使う	color = 'salmon'
両端キューの要素をn個分左にローテンションする	deq.rotate(-n)
数式の数値	float(e)
xのハッシュ値を計算する	hash(x)
データフレームのカラムのスピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
赤い丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
option: グラフの種類を破線に変更する	linestyle = 'dashed'
データフレームの一部の列の中にある文字列と日付データの合計をカウントする	df[['列A', '列B']].isin([value, value2]).sum()
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
リストの全ての要素をクリアにする	aList.clear()
三つのデータフレームを縦方向に一つにする	pd.concat([df, df2, df3], axis=0)
スカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
折れ線グラフをシーグリーン色として描画する	plt.plot(データ列x, データ列y, color='seagreen')
黒い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
実数を切り下げて整数に変換する	math.floor(x)
ファイルのディレクトリ名を使う	os.path.dirname(filepath)
データシリーズを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
コマンドの第二引数を調べる	sys.argv[1]
データフレームの指定したカラムの中央値	df['列A'].median()
今日の日数	datetime.datetime.today().day
表データのあるカラムが何月か見る	df['列A'].dt.month
三整数の最小公倍数	math.lcm(n, n2, n3)
文字列を全て大文字に変換する	s.upper()
option: グラフの色をインディゴに設定する	color = 'indigo'
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
棒グラフをコーンフラワーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
nとn2の論理積を計算する	n & n2
データフレームの指定した列の尖度	df['列A'].skew()
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
日付データの曜日を整数で使う	aDate.weekday()
データフレームの指定したカラムの要約統計量	df['列A'].describe()
二変数の最小値	min(x, y)
ダークオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
多次元データをt-SNEとして濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
リストをシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
アリスブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
データフレームの選択したカラムを十の位で四捨五入する	df[['列A', '列B']].round(-1)
option: グラフの色をリネンに設定する	color = 'linen'
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
マッピングをインデント幅nのJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
ミディアムシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
折れ線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgray')
有理数の分母	q.denominator
option: 改行しない	end = ''
散布図にrgbの▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
nとn2の積を求める	n * n2
実数の逆正弦	math.asin(x)
横棒グラフを黄緑色として描画する	plt.barh(データ列x, データ列y, color='chartreuse')
option: 最初の行をヘッダに設定する	header = 0
現在が何月か知る	datetime.datetime.today().month
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
ナバホホワイト色でヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
option: グラフの色を紺碧に設定する	color = 'azure'
二つのオブジェクトが同一か調べる	obj is obj2
1行から二つの文字列を読む	A, B = map(str, input().split())
線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
データフレームを複数の列によって並べて、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
第２引数で指定したファイルの名前	sys.argv[1]
重複した行のみ	df[df.duplicated(keep=False)]
小麦色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
散布図に上三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
文字列を回数を制限して置換する	s.replace(sub, newsub, n)
線グラフの色をアクアに変更する	plt.plot(データ列x, データ列y, color='aqua')
モカシン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
ファイルパスを絶対パスにする	os.path.abspath(filepath)
行列の列ごとの最小値	np.min(aArray, axis=0)
青紫色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
行列の列	aArray[:, 列番号]
データフレームをTSVファイルで保存する	df.to_csv('file.tsv', sep='\t')
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
オブジェクトにプロパティが存在する	hasattr(obj, プロパティ名)
実数の自然対数を求める	math.log(x)
カウンタの項目一覧	aCounter.keys()
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
散布図をrgbの大バツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: グラフの色をアイボリーに設定する	color = 'ivory'
option: 丸マーカーを描画する	marker = 'o'
真下位集合	aSet < aSet2
文字列を空白で区切って、整数リストにする	map(int, s.split())
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
データフレームをある列によってまとめたグループ	df.groupby('列A')
ラインを色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: ダークグレーを使う	color = 'darkgray'
データフレームの欠損値を平均で補う	df.fillna(df.mean())
行列の転置行列を求める	aArray.T
データフレームの標本標準偏差	df.std(ddof=1)
行列の列ごとの分散	np.var(aArray, axis=0)
option: ディムグレー色を使用する	color = 'dimgrey'
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
option: 説明変数を事前に正規化する	normalize = True
データフレームの指定した列を百の位で丸める	df['列A'].round(-2)
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
option: ロージーブラウンにグラフの色を指定する	color = 'rosybrown'
リストを縦棒プロットにする	plt.bar(ラベル列, データ列)
データフレームのカラムの値を正規表現patternでまとめて置換する	df['列A'].replace(pattern, repl, regex=True)
プロットにグリッド線を入れる	plt.grid(True)
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
黄色色としてヒストグラムを描画する	plt.hist(データ列, color='yellow')
option: 色をトマトに変更する	color = 'tomato'
表を二つの列で昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
option: SJISを使う	encoding = 'shift_jis'
ファイルを開いて]、読み込みストリームを使う	open(filepath, mode='r')
文字列のケースを入れ替える	s.swapcase()
折れ線グラフの大バツ印を赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
option: ミディアムシアグリーンを使用する	color = 'mediumseagreen'
ネイピア数	math.e
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
nが3で割り切れるか調べる	n % 3 == 0
文字列はタプルの要素かどうか調べる	element in aTuple
データフレームが重複し、いるかどうか調べる	df.duplicated()
データ列と配列について散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
データシリーズを100の位で丸めて整数型にする	ds.round(-2).astype(int)
option: マーカーの色を青緑にする	markerfacecolor = 'turquoise'
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
bとn2から成るペアを作る	(n, n2)
方程式の解	sympy.solve(e)
本日の曜日を整数で使う	datetime.datetime.today().weekday()
複数の列からグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
データフレームの選択したカラムの中に文字列と文字列があるか調べる	df[['列A', '列B']].isin([value, value2])
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
ロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
カテゴリで色付けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
数式のn階微分を算出する	sympy.diff(e, z, n)
ダークグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
プログラムの実行を強制的に終了する	sys.exit()
option: ディムグレーにフォントの色を設定する	color = 'dimgrey'
高頻出方からカウンタを列挙する	aCounter.most_common()
最初のカテゴリーを除き、データフレームのある列をダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
ASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
日付データにn日分加算する	aDate + datetime.timedelta(days=n)
データ列の移り変わりを赤い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ハローワールドと表示する	print('Hello World')
ラベンダーブラッシュ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
データフレームのカラムのトリム分散を計算する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
データフレームの選択したカラムの最頻値	df[['列A', '列B']].mode()
折れ線グラフのアルファ値を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
文字列を空白で区切り、、整数リストに変換する	map(int, s.split())
2進対数	math.log2(x)
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
option: グラフを実線にセットする	linestyle = 'solid'
バリーウッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ヒストグラムを茶色色として描画する	plt.hist(データ列, color='brown')
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
ロイヤルブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
option: SJISを用いる	encoding = 'shift_jis'
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
表計算ファイルファイルでデータフレームを保存する	df.to_excel('file.xlsx')
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
散布図を赤い大バツマーカーとして描く	plt.plot(データ列x, データ列y, marker='X', c='r')
配列とリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
プラットフォームの符号付き整数の最大値を知る	sys.maxsize
キーがマッピングに存在している	key not in aDict
折れ線グラフをオールドレース色を用いて描画する	plt.plot(データ列x, データ列y, color='oldlace')
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
t-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームを指定したカラムの値でグループ化し、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
文字列中に部分文字列があるかどうか調べる	sub in s
データフレームの不偏分散	df.var(ddof=1)
ガンマ関数の値を求める	math.gamma(x)
縦棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
データを最大値を用いて正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
線を半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
折れ線グラフを淡い茶色色として描画する	plt.plot(データ列x, データ列y, color='tan')
現在の日付を求める	datetime.date.today()
書式をタプルでフォーマットする	formatText.format_map(aDict)
データフレームのカラムをヒストグラムで描く	plt.hist(df[column])
nの無限リスト	itertools.repeat(n)
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
文字列の終了位置以前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
データフレームのカラムを標準化する	scipy.stats.zscore(df['列A'])
縦棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
実数は非数	math.isnan(x)
未初期化の行列を作る	np.empty((行数, 列数), dtype=np.int)
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
ふたつの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
散布図の色をホワイトにする	plt.scatter(データ列x, データ列y, color='white')
インディアンレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
散布図の左三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
自然数最小公倍数を計算する	math.lcm(n, n2)
option: エラーがあるとき例外を発生させるように変更する	errors = 'strict'
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
散布図の右三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
散布図のバツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
リストを展開してプリントする	print(*aList)
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
逆順の双方向キュー	reversed(deq)
両端キューのn番目のデータ	deq[n]
オブジェクトがタプルクラスのインスタンスかどうか確認する	isinstance(obj, tuple)
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
データシリーズの月を見る	ds.dt.month
文字列中にひとつでも非アルファベットが含まれるか	any(not c.isalpha() for c in s)
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
データシリーズの中に文字列があるかどうか	ds.isin([value])
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
本日が何月か知る	datetime.datetime.today().month
リストの文字列が最初に見つかる位置を探す	aList.index(element)
サーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
プロットの使途を画面に設定する	sns.set(context='notebook')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
データフレームのカラムの最頻値	mode, count = scipy.stats.mode(df['列A'])
ある列の文字列が部分文字列で始まらないデータを選択する	df[~ df['列A'].str.startswith(部分文字列)]
option: 下三角マーカーを描画する	marker = 'v'
追加できるように既存のファイルをUTF8を用いてオープンする]	open(filepath, mode='a', encoding='utf-8')
option: グラフの色をトマトに設定する	color = 'tomato'
ホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
データフレームの一部のカラムがどの程度分散しているか見る	df[['列A', '列B']].var()
文字列を複数行対応としてパターンで分割する	re.split(pattern, s, flags=re.MULTILINE)
散布図の三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
折れ線グラフの印を左三角にする	plt.plot(データ列x, データ列y, marker='<')
値を両端キューにenqueueする	deq.appendleft(element)
xが一桁の数か調べる	-9 <= x <= 9
リストをビン分割する	pd.cut(aList, aList)
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
option: ブルーバイオレットを使う	color = 'blueviolet'
ヒストグラムをグレー色を用いて描画する	plt.hist(データ列, color='gray')
小数点数以下の最大の整数	math.floor(x)
ラベンダーにヒストグラムの色を指定する	plt.hist(データ列, color='lavender')
文字列はタプルに含まれない	element not in aTuple
変数を太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
日付時刻データとタイムスタンプデータの時間差を求める	aDatetime - aDatetime2
option: グラフの色をスラグレーに設定する	color = 'slategrey'
本日の日付時刻を求める	datetime.datetime.now()
文字列がアスキー文字か調べる	s.isascii()
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
ダークサーモン色としてヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
指定した列のカテゴリで集計しそれぞれの平均値を計算する	df.groupby('列A').mean()
ヒストグラムをライトスレイグレー色を用いて描画する	plt.hist(データ列, color='lightslategrey')
グラフにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
リストとリストについての散布図にrgbの丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: オレンジを用いる	color = 'orange'
空のリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
option: 色を貝殻に設定する	color = 'seashell'
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
option: マーカーの色を白にする	markerfacecolor = 'white'
集合が空でないか確認する	len(aSet) != 0
散布図を赤い左三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
散布図をグリーン色として描画する	plt.scatter(データ列x, データ列y, color='green')
線グラフの色をライトシアンに変更する	plt.plot(データ列x, データ列y, color='lightcyan')
縦棒グラフをダークシアグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
実数の小数点を丸める	round(x)
データフレームの選択した列の未入力値を直後の値で置換する	df[['列A', '列B']].fillna(method='bfill')
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
option: バイナリモードを用いる	mode = 'rb'
ある列によってデータフレームをグループ化し、要約統計量を計算する	df.groupby('列A').describe()
散布図を丸印で描画する	plt.scatter(データ列x, データ列y, marker='o')
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
ASCII限定として正規表現で文字列を分割する	re.split(pattern, s, flags=re.ASCI)
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
option: フォントの色をナバホホワイトに設定する	color = 'navajowhite'
nが一桁の数か調べる	0 <= n <= 9
JSON形式のファイル入力を読み込んで、dataとする	data = json.load(fin)
文字列の先頭で正規表現にASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
数値の積分を算出する	sympy.integrate(e)
散布図を大バツ印で描画する	plt.scatter(データ列x, データ列y, marker='X')
キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
２数の最大値を計算する	max(x, y)
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
データフレームの指定したカラムの欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
option: セパレータを文字列にする	sep = s
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
文字列の後ろから空白を除く	s.rstrip()
シャルトリューズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
インディアンレッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
数列間のピアソンの相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
データ列と配列について散布図をプロットして、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
文字列をASCIIコード列にする	[ord(ch) for ch in s]
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
折れ線グラフの色をスチールブルーに変更する	plt.plot(データ列x, データ列y, color='steelblue')
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
カンマ区切りのファイルからデータフレームをロードする	pd.read_csv('file.csv', sep=',')
フォレストグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
文字列でフォーマットして本日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
コーンズシルク色としてヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
行列を転置する	aArray.T
nがn2	n == n2
ファイルをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
データ列の推移を破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームを関数の値によってグループ化し、統計量を求める	df.groupby(関数).describe()
データ列を使う	import pandas as pd
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
ブランチドアーモンド色でヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
乱数シードをnで初期化する	random.seed(n)
配列の出現頻度を描画する	plt.hist(データ列)
実数の逆双曲線余弦	math.acosh(x)
オブジェクトはリストかタプルかテストする	isinstance(obj, (list)
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
データフレームをTSVファイルで出力する	df.to_csv('file.tsv', sep='\t')
データフレームの中の列を等量でn個にビニングする	pd.qcut(df[col], n)
横棒グラフを描画して、棒の縦幅を変更する	plt.barh(ラベル列, データ列, width=0.5)
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
十六進文字列を整数に変換する	int(s, 16)
折れ線グラフの▼印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
横棒グラフをゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='goldenrod')
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
折れ線グラフを小麦色色を用いて描画する	plt.plot(データ列x, データ列y, color='wheat')
グラフに鉛直方向の破線をつける	plt.axvline(x=0, linestyle='dashed')
線グラフを一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
データフレームの一部のカラムの母標準偏差を計算する	df[['列A', '列B']].std(ddof=0)
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgrey')
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
黒い大バツマーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
箱髭図でデータ列を作図する	plt.boxplot(データ列)
折れ線グラフをダークブルー色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームの一部のカラムを丸める	df[['列A', '列B']].round()
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
二つの集合が互いに素か判定する	aSet.isdisjoint(aSet2)
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
出力ストリームからn文字、読む	f.read(n)
データ列をビン数nを用いて分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームをValueMapでまとめて置き換える	df.replace(ValueMap)
乱数の行列を作る	np.random.random((行数, 列数))
折れ線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
データフレームの選択したカラムの中にある文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
数式の平方根を求める	sympy.sqrt(e)
文字列が全て数値か調べる	s.isnumeric()
縦棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
文字列中からパターンにマッチする位置を探す	re.search(pattern, s)
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
コーンズシルク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
行列の列ごとの合計値を計算する	np.sum(aArray, axis=0)
インディゴ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
リストと配列について散布図を描いてマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
赤い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
フローラルホワイト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
横棒グラフをアクア色として描画する	plt.barh(データ列x, データ列y, color='aqua')
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
青い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
列の名前の一覧を求める	df.columns
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
option: ライムを用いる	color = 'lime'
ヒストグラムの色を紺に変更する	plt.hist(データ列, color='darkblue')
線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
マッピングのキーとその値をペアとして取り出す	aDict.items()
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
データフレームのカラムの標準偏差	df['列A'].std()
オーキッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
データ列をビン分割する	pd.cut(ds, aList)
ASCII限定として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
散布図に黒い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
リストとリストの散布図を描画して、マーカーを三角に指定する	plt.plot(データ列x, データ列y, marker='^')
行列の合計	np.sum(aArray)
option: パウダーブルー色を用いる	color = 'powderblue'
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
双方向キューの末尾に列の各要素を追加する	deq.extend(iterable)
二つのデータフレームを合体させる	pd.concat([df, df2])
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
イテラブルに列を続けたイテラブル	itertools.chain(iterable, iterable2)
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
option: グラフの色をパパイヤウィップに指定する	color = 'papayawhip'
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
ヒストグラムの色をコーンフラワーブルーに変更する	plt.hist(データ列, color='cornflowerblue')
日付データの年数を使う	aDate.year
リストの最後の要素	aList[-1]
SJISとして追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='shift_jis')
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
ヒストグラムの色をアクアに指定する	plt.hist(データ列, color='aqua')
ケンドール相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
赤い大バツマーカーを配列と数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムの色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
データフレームの選択したカラムの記述統計量	df[['列A', '列B']].describe()
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
行列の累積積を求める	np.cumprod(aArray)
データフレームの指定したカラムを千の位で丸める	df['列A'].round(-3)
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
データフレームの行を抽出する	df[start:end]
線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
散布図の▲印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
重複していない行のみを抽出する	df[~ df.duplicated(keep=False)]
データフレームから指定した3つの列のみ選択する	df[['列A', '列B', '列C']]
データフレームを二つの列の値でグループ化し、統計量を求める	df.groupby(['列A', '列B']).describe()
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
配列を等量で分割数nを使って分割する	pd.qcut(aArray, n)
データシリーズの欠損値を最大値で埋める	ds.fillna(ds.max())
option: ダークグリーン色を使う	color = 'darkgreen'
辞書の浅いコピーを生成する	aDict.copy()
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
文字列中に部分文字列が含まれないか調べる	sub not in s
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
イテラブルの長さnの順列	itertools.permutations(iterable, n)
線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
散布図の右三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
二つ並べてリストをヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
スノー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
2つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
データフレームを関数によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
半透明の破線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
option: マーカーを大バツに指定する	marker = 'X'
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
データフレームとデータシリーズを横向きに連結する	pd.concat([df, ds], axis=1)
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
タプルの最初を取り除く	aTuple[1:]
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
切り下げて整数にする	math.floor(x)
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
貝殻色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
データフレームの相関行列	df.corr()
辞書をクリアする	aDict.clear()
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームを配列にする	df.values
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
データフレームからランダムに100行を抽出する	df.sample(100)
グラフ中の(x,y)の位置に簡単な説明を表示する	plt.legend(loc=(x, y))
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
nがn2の倍数か調べる	n % n2 == 0
文字列の右側からタブを取り除く	s.rstrip('\t')
整数を十の位で丸める	round(x, -1)
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
ヒストグラムをライトスチールブルー色として描画する	plt.hist(データ列, color='lightsteelblue')
ファイルを追加モードでオープンする]	open(filepath, mode='a')
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
データフレームの選択した列の欠損値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
データシリーズの空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
文字列を特殊文字も含め小文字に変換する	s.casefold()
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフをサドルブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのNaNを最頻値に設定する	df.fillna(df.mode().iloc[0])
散布図に赤い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームの全カラムの散らばりを可視化する	sns.pairplot(df)
円プロットのパーセントを表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
非数	math.nan
辞書から最後の項目を取り出す	aDict.popitem()
option: エンコーディングをBOM付きに変更する	encoding = 'utf_8_sig'
データフレームの指定した列の最頻値	df['列A'].mode()
散布図をスラグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='slategray')
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
データフレームのあるカラムが何年か見る	df['列A'].dt.year
option: 下三角マーカーを使う	marker = 'v'
日付時刻データの時間	aDatetime.time()
option: スカイブルーを用いる	color = 'skyblue'
横方向にデータフレームを合体する	pd.concat([df, df2], axis=1)
実数の三乗	x ** 3
試しに何か動かす	print('Hello World')
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
ネイビーにヒストグラムの色を変更する	plt.hist(データ列, color='navy')
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
データフレームの指定したカラムがどの程度、正規分布から尖っているか見る	df['列A'].skew()
リストからn個サンプリングする	random.sample(iterable, k=n)
列名を指定して２つのデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
散布図の丸マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
ヒストグラムをハニーデュー色として描画する	plt.hist(データ列, color='honeydew')
破線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフの色をダークカーキに指定する	plt.plot(データ列x, データ列y, color='darkkhaki')
ダークシアグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
ヒストグラムの色をネイビーに変更する	plt.hist(データ列, color='navy')
配列のユニークな要素	np.unique(aArray)
データフレームの指定した列の尖り	df['列A'].skew()
日付データが木曜日か	aDate.weekday() == 3
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
カウンタの項目を、そのカウントだけ列挙する	aCounter.elements()
コーンズシルク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
データシリーズの時	ds.dt.hour
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
ファイルパスのファイルサイズ	os.path.get_size(filepath)
実数の小数部	math.modf(x)[0]
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
赤色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
16進文字列を整数に変換する	int(s, 16)
タイムスタンプデータををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
ネイビー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
部分文字列が文字列の終了位置以前に含まれる	s.find(sub, 0, end) != -1
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
データシリーズを十の位で四捨五入する	ds.round(-1)
最初のカテゴリーを除外して表のある列をダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
データ列をビン数nでビンニングする	pd.cut(ds, n)
既存の配列をベースにして全要素が初期値の配列	np.full_like(aArray, 初期値)
度数分布図としてデータフレームの列を描く	plt.hist(df[column])
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
ダークスレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
降順にデータフレームをある列でソートする	df.sort_values(by='列A', ascending=False)
option: 書き込みモードに設定する	mode = 'w'
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
option: ターコイズ色を使用する	color = 'turquoise'
option: セパレータを改行にする	sep = '\n'
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
データシリーズの中に存在する文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
option: シーグリーン色を用いる	color = 'seagreen'
深紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
貝殻色としてヒストグラムを描画する	plt.hist(データ列, color='seashell')
CSVファイルにBOM付きでデータフレームを保存する	df.to_csv('file.csv', encoding='utf_8_sig')
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
指定したカラムを丸めて、整数型にする	df['列A'].round().astype(int)
折れ線グラフの下三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データ列の変化を実線として描く	plt.plot(データ列x, データ列y, linestyle='solid')
濃いシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
文字列の中で複数行対応として正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
option: マーカーをダイアモンドに変更する	marker = 'D'
散布図に四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s')
ある列の値ごとの最大値を求める	df.groupby('列A').max()
散布図を赤い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
スタッキングを用いて回帰分析を行う	sklearn.ensemble.StackingRegressor()
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
データフレームの選択したカラムを千の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
option: ホワイトスモークにグラフの色を設定する	color = 'whitesmoke'
option: ダークオレンジ色を使う	color = 'darkorange'
折れ線グラフに赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
集合の補集合	aSet.difference(aSet2)
データフレームの数値を全部、整数に丸める	df.round()
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
option: スカイブルーにフォントの色を設定する	color = 'skyblue'
二つのデータフレームを連結する	pd.concat([df, df2])
ミディアムオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
実数が無限大か調べる	math.isinf(x)
ダークグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
ピーチパフ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
表データをグループ化し、あるカラムに対し合計を計算する	df.groupby('列A')['列B'].sum()
bとn2から成るペア	(n, n2)
データフレームの中に含まれる文字列と文字列の数をカウントする	df.isin([value, value2]).sum()
n割るmの分数表現	fractions.Fraction(numerator=n, denominator=m)
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
イテラブルを配列に変換する	np.array(iterable)
データフレームのインデックスの名前を一度に変更する	df.rename(index={x: y})
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
option: パパイヤウィップ色を使う	color = 'papayawhip'
文字のユニコード	ord(ch)
ミディアムパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
折れ線グラフのポイントマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
浮動小数点数に数を加える	x + y
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
文字列を部分文字列で区切って文字列リストに変換する	s.split(sub)
散布図をイエローグリーン色として描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
折れ線グラフをネイビー色として描画する	plt.plot(データ列x, データ列y, color='navy')
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
列を累加した列	itertools.accumulate(iterable)
文字列を部分文字列で分けた時の前半の文字列	s.partition(sub)[0]
リストの中の一番小さい値	min(aList)
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
浮動小数点数を切り上げて整数に変換する	math.ceil(x)
文字列の中で複数行対応としてパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
データフレームのインデックスがnの行を選択する	df.loc[n]
文字列の右端から部分文字列を取り除く	s.rstrip(sub)
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
棒グラフを青紫色として描画する	plt.bar(データ列x, データ列y, color='violet')
データシリーズの年	ds.dt.year
データシリーズを日付データに変換し、表データのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
色付きの実線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
CSVファイルにデータフレームをカラムの名前を付けず出力する	df.to_csv('file.csv', header=None)
タプルのn番目からn2番目までの部分を取り出す	aTuple[n:n2]
破壊的にある列を用いてデータフレームを小さい順にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
イテラブルの全順列	itertools.permutations(iterable)
データフレームの列をヒストグラムでプロットする	plt.hist(df[column])
大量のデータが正規分布に従うか調べる	scipy.stats.kstest(配列, 'norm')
option: 色をインディアンレッドに設定する	color = 'indianred'
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
本日の日付時刻	datetime.datetime.now()
最大長を指定して、両端キュー	collections.deque(maxlen=n)
クラス分類の真陽性率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
平均付き箱髭図を描く	plt.boxplot(データ列, showmeans=True)
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
option: ASCII文字に限定する	flag = re.ASCII
散布図のバツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
データフレームから指定したデータ型の列名の一覧を使う	df.select_dtypes(型).columns
ロイヤルブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
実数が正か	x > 0
option: 色をラベンダーに変更する	color = 'lavender'
option: パールバイオレットレッド色を用いる	color = 'palevioletred'
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
数を小数点第一位で丸める	round(x, 1)
横棒グラフをミディアムパープル色として描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
データフレームを複数の列によって昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
ラベンダーブラッシュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
option: ローングリーン色を使う	color = 'lawngreen'
デピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
グラフ中で日本語を使えるようにする	sns.set(font='IPAexGothic')
文字列が文字列リストにあるかテストする	s in aStringList
オブジェクトのメモリビュー	memoryview(obj)
option: グリーンにフォントの色を変更する	color = 'green'
クラス分類をブースティングとして行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
文字列を最後の部分文字列で分割したときの後半の文字列	s.rpartition(sub)[-1]
データフレームの未入力値を取り除いてみる	df.dropna()
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
データフレームの値がNaN	df.isna()
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
ふたつの列でグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
回帰木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
option: ナバホホワイトに色を変更する	color = 'navajowhite'
線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
スタックの要素を右にn個分ローテンションする	deq.rotate(n)
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
リストとリストについて散布図を描画して、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
折れ線グラフのバツ印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームからカテゴリデータの列名の一覧を見る	df.select_dtypes('object').columns
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
option: タブをセパレータで使う	sep = '\t'
両端キューの末尾	deq[-1]
散布図をダークレッド色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
指定した列のカテゴリで集計し、それぞれの分散を計算する	df.groupby('列A').var()
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームの統計量を見る	df.describe()
option: ハニーデュー色を使う	color = 'honeydew'
文字列の開始位置から先に部分文字列が含まれないか調べる	s.find(sub, start) == -1
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
データフレームをグループ化し、それぞれの最大値を求める	df.groupby('列A').max()
エクセルファイルファイルからカンマ区切りのファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
今日が日曜日か	datetime.datetime.today().weekday() == 6
データフレームの列の第一四分位数	df['列A'].quantile(0.25)
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
option: 小さい順にする	ascending = True
option: バッファリングのサイズを設定する	buffering = 4096
標準入力から改行なしで1行読む	sys.stdin.readline().rstrip()
データフレームのカラムのピアソンの相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
横棒グラフをサドルブラウン色として描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
両端キューの先頭	deq[0]
データフレームのあるカラムの秒	df['列A'].dt.second
配列と配列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームの選択したカラムの中にある文字列と文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
データフレームから重複を残さず重複をドロップする	df.drop_duplicates(keep=False)
nをn2で割ったモジュロを計算する	n % n2
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
正則化付き線形モデルを作る	model = sklearn.linear_model.ElasticNet()
スノー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
青い右三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームをある列でグループ分けして、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
option: フォントの色をダークバイオレットに設定する	color = 'darkviolet'
上三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^')
グリッド線を白くする	plt.grid(color='w')
日付データをタプルにする	aDate.timetuple()
ISO書式の文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
数列と配列について散布図をプロットし、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
グラフの色テーマを淡くする	sns.set(pallete='muted')
option: 色をブランチドアーモンドに指定する	color = 'blanchedalmond'
配列の最頻値を求める	mode, count = scipy.stats.mode(配列)
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
平方根	math.sqrt(x)
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
指定した列で集計し、個数を計算する	df.groupby('列A').count()
表データのあるカラムの秒	df['列A'].dt.second
データシリーズがどの程度分散しているか見る	ds.var()
標準出力を	sys.stdout
データシリーズは何月か見る	ds.dt.month
ゲインズボロ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
フローラルホワイトにヒストグラムの色をセットする	plt.hist(データ列, color='floralwhite')
SVDとして濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
文字列の右側から部分文字列を取り除く	s.removesuffix(sub)
折れ線グラフに黒い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
エクセルファイルから複数のシートを指定してデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
黒いバツマーカーをリストと数列の散布図に描く	plt.plot(データ列x, データ列y, marker='x', c='k')
入力ストリームを閉じる	f.close()
整数LCM	math.lcm(n, n2)
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
xを浮動小数点数型に変換する	float(x)
プログラムの実行を異常終了する	sys.exit(1)
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
縦軸だけ目盛線	plt.grid(axis='y')
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
横棒グラフをオレンジ色を用いて描画する	plt.barh(データ列x, データ列y, color='orange')
データフレームのあるカラムの中の欠損値の合計を求める	df['列A'].isna().sum()
横棒グラフをマゼンタ色を使って描画する	plt.barh(データ列x, データ列y, color='magenta')
データフレームの選択した列を十の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-1).astype(int)
データフレームをグループ化し、最大値を求める	df.groupby('列A').max()
実数を文字列に変換する	str(x)
データフレームのn行以降選択する	df[n:]
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
改行	'\n'
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
数値を下線付きにする	f'\033[4m{value}\033[0m'
ASCII限定としてパターンに文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
文字列の開始位置から終了位置の間で部分文字列を数える	s.count(sub, start, end)
データ列を閾値として二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
数式を数値計算する	float(e)
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
散布図に黒い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
現在が金曜日	datetime.datetime.today().weekday() == 4
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
横棒グラフを耐火レンガ色として描画する	plt.barh(データ列x, データ列y, color='firebrick')
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
文字列をアンダーライン付きにする	f'\033[4m{value}\033[0m'
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
列のエポック秒を日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
データシリーズの中にいくつ文字列があるかカウントする	ds.isin([value]).sum()
縦方向に三つのデータフレームを合体させる	pd.concat([df, df2, df3], axis=0)
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
タイムスタンプデータをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
option: 紺碧にグラフの色を設定する	color = 'azure'
散布図の上三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
UTF8で書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='utf-8')
四分位数でデータフレームの中の列を分割する	pd.qcut(df[col], 4)
データフレームのカーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
小さい順にリストを並べ変える	sorted(aList, reverse=True)
折れ線グラフの色をマルーンに変更する	plt.plot(データ列x, データ列y, color='maroon')
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
ふたつの列からグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
散布図の印を大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
折れ線グラフのバツマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
文字列の中の複数行対応としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
option: ダークスラテグレーを用いる	color = 'darkslategray'
円周率	math.pi
標準正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x)
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
データフレームをグループ化し、ある列に対し最大値を求める	df.groupby('列A')['列B'].max()
ベクトルの要素ごとの最小公倍数	np.lcm(aArray, aArray2)
配列の値	aArray[行番号, 列番号]
データシリーズの欠損値をxに変更する	ds.fillna(x)
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
option: 印をクロスに変更する	marker = 'x'
散布図の菱形マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
折れ線グラフをレモンシフォン色を用いて描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
散布図を下三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='v')
プロットを用いる	import matplotlib.pyplot as plt
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
データフレームのある列を10000の位で丸める	df['列A'].round(-4)
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
二つの配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
数式の積分を求める	sympy.integrate(e)
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
ミスティローズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
xが-9以上、9以下か	-9 <= x <= 9
データシリーズの中に文字列がある	ds.isin([value])
正規表現に大文字・小文字を無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
option: マゼンタを用いる	color = 'magenta'
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
文字列を走査し正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
線グラフの色を耐火レンガにする	plt.plot(データ列x, データ列y, color='firebrick')
データシリーズの欠損値を中央値で補完する	ds.fillna(ds.median())
三自然数のGCDを計算する	math.gcd(n, n2, n3)
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='grey')
△印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
０で全要素を初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
ミスティローズにヒストグラムの色を設定する	plt.hist(データ列, color='mistyrose')
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
線グラフを青い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: フォントの色をシーグリーンに設定する	color = 'seagreen'
散布図をティール色を用いて描画する	plt.scatter(データ列x, データ列y, color='teal')
アリスブルー色でヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
option: ライトコーラル色を用いる	color = 'lightcoral'
実行時の標準出力の出力先がターミナルか	os.isatty(sys.stdin.fileno())
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
折れ線グラフのクロスマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
nがn2の倍数か	n % n2 == 0
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
リストとリストについて散布図を描画して、マーカーを△に設定する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフのダイアモンドマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
ホットピンク色でヒストグラムを描画する	plt.hist(データ列, color='hotpink')
八進文字列を整数に変換する	int(s, 8)
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データ列を円プロットにする	plt.pie(データ列, startangle=90)
折れ線グラフに左三角マーカーを加える	plt.plot(データ列x, データ列y, marker='<')
option: フォントの色をミスティローズに設定する	color = 'mistyrose'
データフレームを散布図でグラフ化し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: グラフの色をモカシンに設定する	color = 'moccasin'
大文字・小文字を無視して正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
横棒グラフをピーチパフ色として描画する	plt.barh(データ列x, データ列y, color='peachpuff')
nわるn2	n / n2
データフレームから型リストで指定したデータ型の列だけ抽出する	df.select_dtypes(include=typeList)
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ライトゴールドロディイエロー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
ポイント印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
文字列を置き換える	s.replace(sub, newsub)
データフレームの相関行列をヒートマップを用いて描画する	sns.heatmap(df.corr())
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
入力から二つの文字を読む	A, B = map(str, input().split())
データフレームの文字列をNaNに変換する	df.replace(値, np.nan)
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
ホワイトスモーク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
データ列とリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
柱状図を上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
異なる列をキーとして２つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
リストを複製する	aList.copy()
文字列を最初の部分文字列を用いて分割する	s.partition(sub)
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
option: NaNは無視する	dropna = True
実数が整数か調べる	x.is_integer()
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
データフレームのあるカラムのタイムゾーンを日本に設定する	df['列A'].tz_convert('Asia/Tokyo')
データシリーズの不偏標準偏差を計算する	ds.std()
文字列を正規表現で分割する	re.split(pattern, s)
データフレームの複数の列を削除してみる	df.drop(['列A', '列B'], axis=1)
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
浮動小数点数の最小値	sys.float_info.min
option: 大バツマーカーを描画する	marker = 'X'
外れ値に強い単回帰モデルを新規作成する	model = sklearn.linear_model.HuberRegressor()
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
タイムスタンプデータが何時か知る	aDatetime.hour
折れ線グラフをイエローグリーン色として描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
数列と配列についての散布図に星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*')
option: 青紫に色をセットする	color = 'violet'
option: 茶色色を使う	color = 'brown'
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: ピーチパフ色を使う	color = 'peachpuff'
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
自然数の順列の総数を求める	math.perm(n)
カテゴリ列に並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
二つの変数をコロンで区切って出力する	print(value, value2, sep=':')
あるカラムの文字列に部分文字列が含まれない行を選択する	df[~df['列A'].str.contains(部分文字列)]
データフレームの選択したカラムの統計量	df[['列A', '列B']].describe()
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
option: タン色を用いる	color = 'tan'
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
ベクトルの平均を求める	np.mean(aArray)
日付時刻データの時間数	aDatetime.hour
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
辞書をインデント幅nのJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
mathモジュールを使用する	import math
長さnのリスト	[0] * n
データフレームの指定した列のNaNを平均値で置換する	df['列A'].fillna(df['列A'].mean())
追加できるようにファイルパスをUTF8としてオープンする]	open(filepath, mode='a', encoding='utf-8')
辞書から項目名の値	aDict.get(key)
散布図に左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
データフレームの中のカラムを四分位数ごとに分割する	pd.qcut(df[col], 4)
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
データシリーズの年度	ds.dt.year
散布図に赤い▼マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='r')
整数nのビット長	n.bit_length()
集合にリストの要素を全て追加する	aSet.update(iterable)
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
ファイル全体をリストとして読み込む	f.readlines()
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
データフレームのあるカラムをタイムスタンプ型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
データフレームの選択した列においてどの値が頻出か調べる	df[['列A', '列B']].mode()
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
丸マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='o')
線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
８進数字を全て使う	string.octdigits
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
nが-9以上、9以下か調べる	-9 <= n <= 9
option: どのカラムもインデックスに設定しない	index_col = None
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
CSVファイルのn行目を行にして読み込む	pd.read_csv('file.csv', index_col=n)
折れ線グラフのマーカーを▼印にする	plt.plot(データ列x, データ列y, marker='v')
日付を表現した文字列をPandasの日付型に変換する	pd.to_datetime(日付を表現した文字列)
赤い左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
折れ線グラフをシャルトリューズ色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームに重複があるか見る	df.duplicated()
データフレームをグループ化し、ある列に対し分散を計算する	df.groupby('列A')['列B'].var()
データフレームを2つの列によって小さい順にソートして更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
オブジェクトは浮動小数点数クラスかどうか調べる	isinstance(obj, float)
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
ヒストグラムをサンディーブラウン色として描画する	plt.hist(データ列, color='sandybrown')
縦棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
指定した列の欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
option: パウダーブルーにフォントの色を設定する	color = 'powderblue'
棒グラフをライトブルー色として描画する	plt.bar(データ列x, データ列y, color='lightblue')
欠損値がある行を削除してみる	df.dropna()
データフレームをエクセルファイルファイルで出力する	df.to_excel('file.xlsx')
option: ポイントマーカーを使用する	marker = '.'
標準入力から1文字だけ読む	sys.stdin.read(1)
データフレームの指定したカラムがどの程度、分散しているか見る	df['列A'].var()
コギーくんを使いたい	import kogi
文字列の出力を改行なしに行う	print(value, end='')
option: ネイビーを使う	color = 'navy'
リストの長さ	len(aList)
表データを二つの列によってまとめたグループ	df.groupby(['列A', '列B'])
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
多層パーセプトロンを用いて回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
データシリーズの欠損値を最頻値にセットする	ds.fillna(ds.mode().iloc[0])
チョコレート色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
最大最小としてスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
入力ストリームを全て読む	f.read()
コマンドラインフラグの状態を調べる	sys.flags
データフレームの列の中に文字列がある	df['列A'].isin([value])
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
カウンタ間で∪演算する	aCounter | aCounter2
データシリーズを10の位で丸める	ds.round(-1)
データフレームの選択したカラムを四捨五入して、整数型にする	df[['列A', '列B']].round().astype(int)
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
二進数の文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
option: ローングリーンを使う	color = 'lawngreen'
実数の余弦の逆数を求める	math.acos(x)
線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
折れ線グラフの三角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
部分集合か	aSet.issubset(aSet2)
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
指定した列のカテゴリで集計し、合計を計算する	df.groupby('列A').sum()
数列のピアソンの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
▽印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームの選択したカラムを10の位で丸める	df[['列A', '列B']].round(-1)
横棒グラフをゴールド色として描画する	plt.barh(データ列x, データ列y, color='gold')
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
データフレームの一部のカラムの第一四分位数	df[['列A', '列B']].quantile(0.25)
要素∉集合	element not in aSet
データシリーズは正規分布からどれだけ歪んでいるか見る	ds.kurt()
ゲインズボロ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
乱数平均と標準偏差からを得る	random.normalvariate(mu=0.5, sigma=0.2)
辞書に項目名があるか確認する	key not in aDict
赤い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
折れ線グラフの上三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
予測データのコンフュージョン・マトリックスを算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: ホワイトスモーク色を使う	color = 'whitesmoke'
インディゴ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
データフレームの欠損値がある箇所に色をつける	df.style.highlight_null()
ファイルを書き込みモードで開く]	open(filepath, mode='w')
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
散布図をブランチドアーモンド色を用いて描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
句点文字を全部使う	string.punctuation
整数nを八進表現に変換する	oct(n)
小数点数のk進対数を求める	math.log(x, k)
文字列が文字列リストのいづれか調べる	s in aStringList
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
ヒストグラムの色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
平方根平均二乗誤差を算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
ブラウン色のヒストグラムを描画する	plt.hist(データ列, color='brown')
タプルの先頭	aTuple[0]
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
折れ線グラフを描く	plt.plot(データ列x, データ列y)
データフレームをグループ化し、それぞれの標準偏差を求める	df.groupby('列A').std()
リストとデータ列についての散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームのデータ型の一覧	df.dtypes
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
行列を2次元1列に変形する	aArray.reshape(-1, 1)
option: ダークゴールデンロッドにグラフの色を設定する	color = 'darkgoldenrod'
nullに等しい値	None
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームを正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
ライトグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
列にイテラブルを続ける	itertools.chain(iterable, iterable2)
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
ふたつの集合の対称差集合を見る	aSet.symmetric_difference(aSet2)
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
配列の差	aArray - aArray2
折れ線グラフのポイントマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
プロットにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
パーセプトロンでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
データフレームの選択したカラムのNaNを平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
列の長さnの順列を得る	itertools.permutations(iterable, n)
整数nがリストのひとつかどうか確認する	n in aList
option: 決定木の深さを制限する	maxdepth = n
折れ線プロットを用いてリストの推移を図示する	plt.plot(range(len(データ列)), データ列)
データフレームのある列の値がxより小さい行を取り出す	df[df['列A'] < x]
option: ディムグレー色を使う	color = 'dimgrey'
ラインを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
ミディアムターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='mediumturquoise')
実数以上の最小の整数	math.ceil(x)
リストの折れ線プロットをプロットし、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームのあるカラムをタイムスタンプに変換し、表データのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
指定したカラムを万の位で丸める	df['列A'].round(-4)
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
ペルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
散布図をrgbの四角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列の最後を使う	s[-1]
全要素を０で初期化した行列	np.zeros(行数, 列数)
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: グラフの色をサーモンに変更する	color = 'salmon'
リストの先頭の値	aList[0]
パターンに文字列の先頭でASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
リストの平均値を計算する	sum(aList)/len(aList)
データシリーズのタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
実数の逆双曲線正弦	math.asinh(x)
二つのデータフレームを合体する	pd.concat([df, df2])
データ列をカテゴリデータに変換する	ds.astype(object)
リストの値をソートする	sorted(aList)
文字列が組の要素でないか調べる	element not in aTuple
文字列を式として評価する	eval(s)
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
データフレームの一部のカラムの不偏標準偏差を求める	df[['列A', '列B']].std()
ファイルパスをUTF8でオープンする]	open(filepath, encoding='utf-8')
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
インディアンレッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
y軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
データフレームの選択した列を一万の位で丸める	df[['列A', '列B']].round(-4)
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
日付時刻データにn秒を足す	aDatetime + datetime.timedelta(seconds=n)
複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
縦棒グラフを小麦色色として描画する	plt.bar(データ列x, データ列y, color='wheat')
ヒストグラムを一点鎖線にセットする	plt.hist(データ列, linestyle='dashbot')
カラムのスピアマンの相関係数を見る	scipy.stats.spearmanr(df['列A'], df['列B'])
折れ線グラフの色をイエローグリーンに指定する	plt.plot(データ列x, データ列y, color='yellowgreen')
現在のタイムスタンプ	int(time.time())
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
データフレームの重複を数える	df.duplicated().sum()
option: ホットピンクにグラフの色をする	color = 'hotpink'
データシリーズの50パーセンタイル	ds.median()
データフレームの選択した列の値を一度に正規表現patternで置換する	df[['列A', '列B']].replace(pattern, repl, regex=True)
xの小数点以下'4'桁までを出力する	print(':.4f'.format(x))
パールゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データ列を等しい量になるようにビン数nでビン分割する	pd.qcut(ds, n)
折れ線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
2を底とする対数	math.log2(x)
文字列を最後から部分文字列で分割する	s.rsplit(sub)
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
nからn2の値を引いてnに代入する	n -= n2
文字列を改行で分割し文字列リストに変換する	s.splitlines()
実数の二進対数	math.log2(x)
グラフに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
numpyを入れる	import numpy as np
線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
ガウス過程分類器を作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
データシリーズの中央値	ds.median()
ヒストグラムの色をライトスカイブルーにする	plt.hist(データ列, color='lightskyblue')
オブジェクトは数値か調べる	isinstance(obj, (int,float))
グラフのy座標の軸名をuntitledに指定する	plt.ylabel('y軸ラベル')
日付時刻データの日付	aDatetime.date()
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
ふたつの列からグループ化し、標準偏差を計算する	df.groupby(['列A', '列B'], as_index=False).std()
option: スノー色を使う	color = 'snow'
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ミディアムスレートブルー色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
数で実数を整数除算する	x // y
値を白色にする	f'\033[37m{value}\033[0m'
n個に配列をビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームの一部のカラムの未入力値を最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
オーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
実数の双曲線正弦の逆数	math.asinh(x)
マルーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
データフレームをグループ化し、ある列の記述統計量を算出する	df.groupby('列A').describe()['列B']
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
行列の合計値	np.sum(aArray)
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
赤い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
カラムのUNIX時間を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
青い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
リストの最後から要素をポップする	aList.pop()
文字列中にひとつでも非小文字があるかどうか確認する	any(not c.islower() for c in s)
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
実数を整数に変換する	int(x)
コマンド引数の一覧を	sys.argv[1:]
リストとリストについての散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
データフレームの列間の相関行列をまとめて求める	df.corr()
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
データシリーズの月	ds.dt.month
集合の浅いコピー	aSet.copy()
日付データにn日を足す	aDate + datetime.timedelta(days=n)
ファイルパスをオープンする]	open(filepath)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
クラス名が名前付きタプルか調べる	issubclass(C, tuple)
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(df['列A'])
線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
散布図を赤い上三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
ヒストグラムをロージーブラウン色として描画する	plt.hist(データ列, color='rosybrown')
option: バリーウッドにフォントの色を設定する	color = 'burlywood'
表計算から全てのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
NaNがある行をドロップしてみる	df.dropna()
折れ線グラフの色を赤に変更する	plt.plot(データ列x, データ列y, color='red')
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
option: グラフの色をスラグレーに指定する	color = 'slategrey'
新しいリッジ回帰モデルを用意する	model = sklearn.linear_model.Ridge(alpha=正則化項)
補足の位置を(x,y)に変更する	plt.legend(loc=(x, y))
データフレームの列の名前一覧で指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
日付データからn分、減らす	aDate - datetime.timedelta(minutes=n)
データシリーズの分を見る	ds.dt.minute
棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ある列の文字列に部分文字列が含まれる行を抽出する	df[df['列A'].str.contains(部分文字列)]
データフレームの標本分散	df.var(ddof=0)
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
タプルの項目名を要素に設定する	aDict[key] = element
色付きの一点鎖線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: エラーを無視するように設定する	errors = 'ignore'
データフレームの未入力値をその最小値で埋める	df.fillna(df.min())
表データのあるカラムをインデックスにする	df.set_index('列A', inplace=True)
データフレームの値をまとめてValueMapで変更する	df.replace(ValueMap)
横棒グラフをロージーブラウン色として描画する	plt.barh(データ列x, データ列y, color='rosybrown')
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
ファイルを閉じる	f.close()
日付データをn週間前にする	aDate - datetime.timedelta(weeks=n)
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
八進数字を全部使う	string.octdigits
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
赤い四角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
両端キューの先頭に要素を追加する	deq.appendleft(element)
ファイルがないかどうか調べる	not os.path.exists(filepath)
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
整数nの二進文字列を使う	bin(n)[2:]
CSVファイルをヘッダを指定せず読み込む	pd.read_csv('file.csv', header=None)
データフレームのある列の値がxに等しいデータを抽出する	df[df['列A'] == x]
リストとリストについての散布図に三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
ヒストグラムをライトスレイグレー色を使って描画する	plt.hist(データ列, color='lightslategrey')
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
option: 不偏分散を用いる	ddof = 1
最大値でデータフレームのあるカラムの欠損値を埋める	df['列A'].fillna(df['列A'].max())
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
平均値でデータフレームのNaNを埋める	df.fillna(df.mean())
折れ線グラフの左三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ライムにヒストグラムの色を変更する	plt.hist(データ列, color='lime')
データシリーズの第一四分位数を求める	ds.quantile(0.25)
指定したカラムの値で集計し、最大値を計算する	df.groupby('列A').max()
option: 色をコーラルに設定する	color = 'coral'
ラベンダー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
グラフの用途を論文に変更する	sns.set(context='paper')
リストの末尾から要素をポップする	aList.pop()
データフレームのインデックス一覧	df.index
ヒストグラムをゴールド色として描画する	plt.hist(データ列, color='gold')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
option: ダークオリーブグリーン色を用いる	color = 'darkolivegreen'
nの無限イテラブル	itertools.repeat(n)
タプルの先頭を除く	aTuple[1:]
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
要素が全て初期値のベクトル	np.full(要素数, 初期値, dtype=np.int)
ライトサーモン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ファイルパスからファイル名を見る	os.path.basename(filepath)
nがn2か調べる	n == n2
ベクトルの行ごとの分散	np.var(aArray, axis=1)
文字列を部分文字列で二分し、先頭の文字列を使う	s.partition(sub)[0]
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
スチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
データフレームから指定した列名リストの列を取り出す	df[columns]
option: ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
2つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
グループごとにデータフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
折れ線グラフをパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='purple')
データフレームを二つの列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
文字列の中でASCII限定としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
カラムの幾何平均	scipy.stats.gmean(df['列A'])
辞書を複製する	aDict.copy()
文字列中の部分文字列を別の文字列に置き換える	s.replace(sub, newsub)
シエナ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
データ列の折れ線グラフを左三角印として描画する	plt.plot(データ列x, データ列y, marker='<')
クラスが名前付きタプルか	issubclass(C, tuple)
折れ線グラフのダイアモンド印の大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
データフレームの上5行を見る	df.head(5)
二つの文字列が等しいかどうか	s == s2
折れ線グラフを珊瑚色で描画する	plt.plot(データ列x, データ列y, color='coral')
データフレームを二つの列によって並べ直し、、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
数列とリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
配列の偏差値を求める	50 + 10 * scipy.stats.zscore(配列)
ペアリストpairsからカウンタを作成する	collections.Counter(dict(pairs))
nかつn2	n and n2
option: ダーク・スラテグレー色を使用する	color = 'darkslategrey'
y軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
option: ８ビット整数型を使う	dtype = np.int8
ベクトルを変形する	aArray.reshape(行数, 列数)
データシリーズが正規分布からどの程度、歪んでいるか見る	ds.kurt()
ファイルを文字コードtextで開く]	open(filepath, encoding=text)
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
縦横比を同じする	plt.axis('equals')
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
option: グラフの色をカーキにする	color = 'khaki'
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
オールドレース色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
フォーマットで列を日付データにする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
データフレームの一部の列の空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
ヒストグラムをラベンダー色として描画する	plt.hist(データ列, color='lavender')
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
縦棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
nが負の整数か	n < 0
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
rgbの星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
カラムの正規分布を判定する	scipy.stats.shapiro(df['列A'])
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
ファイルが存在しない	not os.path.exists(filepath)
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
分類モデルのF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
rgbの右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
組のn番目以降の部分を取り出す	aTuple[n:]
eの乗数を求める	math.exp(x)
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
散布図の右三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
最小値で指定したカラムの欠損値を置換する	df['列A'].fillna(df['列A'].min())
option: フォントの色をシエナに変更する	color = 'sienna'
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
データフレームを指定した列で降順にソートする	df.sort_values(by='列A', ascending=False)
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
タイムスタンプデータにn日を加算する	aDatetime + datetime.timedelta(days=n)
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
文字列がひらがなか調べる	('ぁ' <= ch <= 'ん')
縦棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
二次元リストをフラット化する	sum(aList)
散布図に丸マーカーを使用する	plt.scatter(データ列x, データ列y, marker='o')
データフレームの選択した列のパーセンタイル	df[['列A', '列B']].quantile(パーセント/100)
ライトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightblue')
オプションで、標準エラーを使う	file = sys.stderr
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
整数nを八進数表現に変換する	oct(n)
配列の形	aArray.shape
カウンタを高頻度方から列挙する	aCounter.most_common()
xが-9以上、9以下か調べる	-9 <= x <= 9
nがn2以下、または、n3以上か確認する	n <= n2 or n >= n3
データフレームの上位25％	df.quantile(0.25)
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
option: グラフの色を黄色に設定する	color = 'yellow'
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
option: 濃い青色を使う	color = 'darkblue'
ヒストグラムをビン数を設定して描く	plt.hist(データ列, bins=区関数)
リストの推移を色付きの破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
分子割る分母	fractions.Fraction(分子, 分母)
カテゴリ列で色分けして、データフレームの全カラムの相関を図示する	sns.pairplot(df, hue='カテゴリ列')
折れ線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
切片なしの線形モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
オリーブ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
カウンタのそれぞれの項目を、そのカウントだけリストとして得る	aCounter.elements()
耐火レンガ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
データフレームの一部の列の標本分散	df[['列A', '列B']].var(ddof=0)
散布図を上三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
エンコーディングを使う	sys.getdefaultencoding()
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
option: 深紅色を使う	color = 'crimson'
ロバストな線形分類モデルを新規作成する	model = sklearn.linear_model.HuberClassifier()
option: 読み込まないフッタをnに設定する	skipfooter = n
データフレームの相関行列をピアソンを用いて求める	df.corr(method='pearson')
文字列リストにイテラブルを変換して、'改行で連結する	'\n'.join(map(str, iterable))
データフレームの選択したカラムの欠損値を直前の値に変更する	df[['列A', '列B']].fillna(method='ffill')
線グラフの色をパウダーブルーにする	plt.plot(データ列x, データ列y, color='powderblue')
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
文字コードを文字に変換する	chr(unicode)
リストの末尾のn要素を取り除く	aList[:-n]
xが1、もしくは2か調べる	x == 1 or x == 2
散布図をダークシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ダークスラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
事前に正規表現を複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
データ列を箱髭図にする	plt.boxplot(データ列)
データフレームの列を折れ線プロットで可視化する	plt.plot(df[column], df[column])
ホワイトスモークにヒストグラムの色をセットする	plt.hist(データ列, color='whitesmoke')
赤い点線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
ロージーブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='rosybrown')
プロットに被らない場所に凡例を表示する	plt.legend(loc='best')
ミントクリームにヒストグラムの色を変更する	plt.hist(データ列, color='mintcream')
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
option: フォントの色をミディアムパープルに設定する	color = 'mediumpurple'
nをn2で値の切り上げを計算する	(n + n2 - 1) // n2
データフレームをインデックスによってソートする	df.sort_index()
option: グラフの色をオレンジに設定する	color = 'orange'
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
自然数の順列の総数を算出する	math.perm(n)
棒グラフを深紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
Pythonパスにを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
ホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
縦棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
ボックスチャートを横方向にする	plt.boxplot(データ列, vert=False)
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
ヒストグラムをミディアムブルー色を用いて描画する	plt.hist(データ列, color='mediumblue')
二つの文字列は同じか	s == s2
グラフの用途を画面に設定する	sns.set(context='notebook')
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームのカラムのNaNを直後の値にする	df['列A'].fillna(method='bfill')
折れ線グラフに黒い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
横棒グラフをドジャーブルー色として描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
クラス分類をK最近傍法で行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategrey')
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
option: 色をスラグレーに設定する	color = 'slategray'
データフレームを関数の値によってグループ化する	df.groupby(関数)
折れ線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
文字列のケースを変換する	s.casefold()
option: インディゴにグラフの色を指定する	color = 'indigo'
最初の要素をキューから削除する	deq.remove(element)
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
リストをビン数nでビン分割する	pd.cut(aList, n)
ファイルをEUCで開く]	open(filepath, encoding='euc_jp')
ベクトルを2次元1列に変形する	aArray.reshape(-1, 1)
ダーク・スラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ダークシアグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
カーキ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
散布図の▽印の色を指定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データシリーズのNaNを平均に変更する	ds.fillna(ds.mean())
ビン数nで配列を等しい量になるようにビン分割する	pd.qcut(aArray, n)
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
配列の尖度を求める	scipy.stats.kurtosis(配列, bias=False)
タプルが少なくとも一つ真か調べる	any(aTuple)
option: ライトコーラルにフォントの色を設定する	color = 'lightcoral'
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
辞書の項目数	len(aDict)
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
データフレームの一部のカラムの中にいくつ日付データが含まれるか数える	df[['列A', '列B']].isin([value]).sum()
データフレームのインデックスをリセットする	df.reset_index()
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
タプルをいつまでも繰り返す	itertools.cycle(iterable)
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
デピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
ライトスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるかカウントする	s.count(sub, start, end)
数列のケンドールの順位相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
ヒストグラムの線の種類を破線に変更する	plt.hist(データ列, linestyle='dashed')
データシリーズのNaNを直前の値で埋める	ds.fillna(method='ffill')
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
ブルーバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='blueviolet')
文字列内にひとつでも数字が含まれるか	any(c.isdigit() for c in s)
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
棒グラフの幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
縦軸だけ目盛り線	plt.grid(axis='y')
自然数個からk個取り出したときの並べ方の総数	math.perm(n, k)
ヒストグラムを白くする	plt.hist(データ列, color='w')
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
淡い茶色にヒストグラムの色を設定する	plt.hist(データ列, color='tan')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
縦棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
文字列が小文字か調べる	s.islower()
線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
折れ線グラフをブラック色として描画する	plt.plot(データ列x, データ列y, color='black')
ペルー色でヒストグラムを描画する	plt.hist(データ列, color='peru')
横棒グラフをハニーデュー色を用いて描画する	plt.barh(データ列x, データ列y, color='honeydew')
双方向キューをタプルに変換する	tuple(deq)
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
縦棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
非数値データ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
データフレームの一部のカラムを十の位で丸める	df[['列A', '列B']].round(-1)
日付時刻データと日付時刻データの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
データシリーズが何秒か見る	ds.dt.second
第2引数で指定されたファイルの名前	sys.argv[1]
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
両端キューの要素をインプレースに逆順にする	deq.reverse()
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
オブジェクトがプロパティを持つ	hasattr(obj, プロパティ名)
切片なしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
文字列の左側から空白を消す	s.lstrip(' ')
棒グラフをラベンダーブラッシュ色として描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
既存のファイルをEUCとして追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
スチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
option: マーカーの大きさを設定する	markersize = 2.0
棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
二つの列でグループ化し、最大値を算出する	df.groupby(['列A', '列B'], as_index=False).max()
option: ライトイエローにフォントの色を設定する	color = 'lightyellow'
ファイルとfilenameを結合する	os.path.join(filepath, filename)
行列の行列積	np.matmul(aArray, aArray2)
データフレームの指定した列の中にある文字列の数を調べる	df['列A'].isin([value]).sum()
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
散布図に赤いダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='r')
キューの先頭からデータを取り除く	deq.popleft()
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
実数の仮数	math.frexp(x)[0]
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
option: ネイビーにグラフの色を設定する	color = 'navy'
連立方程式の解を求める	sympy.solve([e, e2])
中央値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
折れ線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightgreen')
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
データシリーズは何時か見る	ds.dt.hour
option: 三角マーカーを使う	marker = '^'
nをn2で割ったモジュロ	n % n2
オプションで、標準エラーに出力する	file = sys.stderr
option: ライトグリーンを使う	color = 'lightseagreen'
option: グラフの色をダークシアグリーンに変更する	color = 'darkseagreen'
モデルの残差を計算する	目的変数 - model.predict(説明変数)
最大長nの双方向キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
行列の最小値	np.min(aArray)
棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
スレートブルーにヒストグラムの色を変更する	plt.hist(データ列, color='slateblue')
データフレームの75パーセンタイル	df.quantile(0.75)
リストを等量でn個にビン分割する	pd.qcut(aList, n)
線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
option: アリスブルーを使用する	color = 'aliceblue'
データ列をn個にビニングし、、namesのラベルをつける	pd.cut(ds, n, labels=names)
要素をセットから除く	aSet.remove(element)
集合にイテラブルを追加更新する	aSet.update(iterable)
コロンによって文字列を区切って、列挙する	s.split(':')
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
文字列中にひとつでも非小文字がある	any(not c.islower() for c in s)
カテゴリでグループ化して、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
実数の双曲線余弦を計算する	math.cosh(x)
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
配列の累積和	np.cumsum(aArray)
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
n進文字列を整数に変換する	int(s, n)
縦棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データ列の各データ値の出現数	ds.value_counts()
2つのリストを順にプリントする	print(value, value2)
行列から重複を除いた配列を作成する	np.unique(aArray)
辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
縦軸の目盛を表示しない	plt.yticks([])
ヒストグラムの色をオーキッドに変更する	plt.hist(データ列, color='orchid')
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
折れ線グラフの色をミディアムバイオレットレッドにセットする	plt.plot(データ列x, データ列y, color='mediumvioletred')
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
数式の変数の解を方程式として求める	sympy.solve(e, z)
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
横棒グラフをレモンシフォン色を使って描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
option: 黄色を用いる	color = 'yellow'
グラフの描画で濃く色テーマを用いる	sns.set(pallete='deep')
ブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
部分文字列	sub in s
option: ダークレッドにグラフの色を設定する	color = 'darkred'
ヒストグラムの色をパールゴールデンロッドに指定する	plt.hist(データ列, color='palegoldenrod')
線グラフをホットピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='hotpink')
配列のスピアマンの順位相関係数	scipy.stats.spearmanr(配列, 配列2)
nがn2よりも小さいか調べる	n < n2
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
実数の天井数	math.ceil(x)
読み込みできるようにファイルをオープンする]	open(filepath, mode='r')
クラス分類をヒストグラムと勾配ブースティングでする	model = sklearn.ensemble.HistGradientBoostingClassifier()
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
ターコイズ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
ライトスチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームの未入力値を直後の値で補う	df.fillna(method='bfill')
option: グレー色を使う	color = 'gray'
範囲を指定して乱数を計算する	random.randint(最小値, 最大値)
ファイルをバイナリモードでオープンして]fとする	f = open(filepath, mode='rb')
配列の合計値	np.sum(aArray)
データフレームの指定したカラムの中に文字列と文字列があるか確認する	df['列A'].isin([value, value2])
option: 切片を計算しない	fit_intercept = False
カテゴリでグループ化して、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ヒストグラムの色をプラムにする	plt.hist(データ列, color='plum')
実数の正接の逆数	math.atan(x)
カウンタの項目を増やす	aCounter[element] += 1
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
リストと配列の散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
折れ線グラフの色をミディアムスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
サンディーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
ファイルを改行除外して一行ずつ読み込む	f.readline()
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ふたつの辞書を合体する	aDict | aDict2
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
グラフの凡例の場所を(x,y)に変更する	plt.legend(loc=(x, y))
データ列を複数横に並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: 改行コードをWindowsにセットする	newline = '\r\n'
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データフレームの指定したカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
カウンタからイテラブルを回数して引く	aCounter.subtract(iterable)
データフレームの標準偏差	df.std()
タブ	'\t'
データフレームの指定したカラムの中にがあるか調べる	df['列A'].isin([value])
nとn2が等しいか調べる	n == n2
折れ線グラフをハニーデュー色を使って描画する	plt.plot(データ列x, データ列y, color='honeydew')
実数が負の数か調べる	x < 0
横棒グラフをダークカーキ色として描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
横軸の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
線グラフの色をサドルブラウンにする	plt.plot(データ列x, データ列y, color='saddlebrown')
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
配列のケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
散布図の丸マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
データフレームを２つの列を用いて大きい順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
部分文字列を文字列の先頭から探す	s.find(sub)
縦棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
散布図のポイントマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
二つの変数を改行で区切って表示する	print(value, value2, sep='\n')
ライトグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightgray')
データフレームからランダムに100行を取り出す	df.sample(100)
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
折れ線グラフをダークカーキ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
日付データにn分分、加える	aDate + datetime.timedelta(minutes=n)
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
折れ線グラフの星マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
タイムスタンプ型のデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
変数名をキーとして、マップ	dict(name=element)
列を指定して重複を削除する	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
イテラブルの各要素を両端キューの末尾に追加する	deq.extend(iterable)
カウンタ同士で積集合を求める	aCounter & aCounter2
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
ダークオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
プログラムの実行を正しく停止する	sys.exit(0)
ダークオーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
option: 三二ビット整数型を使う	dtype = np.int16
データフレームのカラムが正規分布に従うか仮説検定する	scipy.stats.shapiro(df['列A'])
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
option: カーキ色を使う	color = 'khaki'
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
文字列をカンマを用いて分割して、列挙する	s.split(',')
文字列を走査し、パターンに複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ミディアムスプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
配列とリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
列の重複組み合わせを求める	itertools.combinations_with_replacement(iterable, n)
データ列のノルムをそろえる	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
CSVを読み込む	pd.read_csv('file.csv', sep=',')
両端キューの要素をインプレースに反転する	deq.reverse()
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームのn行まで抽出する	df[:n]
アンティークホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データシリーズの中に日付データと文字列がいくつ含まれるか調べる	ds.isin([value, value2]).sum()
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
暗い赤色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
半透明の一点鎖線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
文字列を右トリムする	s.rstrip()
等しい量になるようにビン数nを用いてリストをビン分割する	pd.qcut(aList, n)
配列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
マゼンタ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
行列の転置行列を使う	aArray.T
ヒストグラムをアクア色を用いて描画する	plt.hist(データ列, color='aqua')
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
三つの文字列を順にプリントする	print(value, value2, value3)
ファイルパスをオープンして]、バイナリストリームを見る	open(filepath, mode='rb')
データフレームを関数によって集約して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
xの小数点以下'1'桁までを出力する	print(':.1f'.format(x))
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
オブジェクトはある型	isinstance(obj, クラス)
option: スラグレーを用いる	color = 'slategrey'
データシリーズの尖度を求める	ds.skew()
データフレームのある列の値がxより大きい行を抽出する	df[df['列A'] > x]
リストの最初のn要素を除く	aList[n:]
データフレームのある列の値がxに等しいデータを選ぶ	df[df['列A'] == x]
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
配列の積立相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
データを最大最小でスケーリングする	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: ポイントマーカーを使う	marker = '.'
スクリプトファイルのフォルダ名	os.path.dirname(os.path.abspath(__file__))
データフレームの指定した列を百の位で丸めて整数型にする	df['列A'].round(-2).astype(int)
ヒストグラムをペールグリーン色として描画する	plt.hist(データ列, color='palegreen')
リストの合計値	sum(aList)
seabornのデフォルトスタイルを適用する	sns.set()
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
数式の因数分解を行う	sympy.factor(e)
option: ダークスレートブルー色を使う	color = 'darkslateblue'
シエナ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
エクセルファイルファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
データフレームの中央値を計算する	df.median()
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
文字列の変数名を数式に変換する	sympy.Symbol(s)
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
データフレームを表示するとき、小数点以下の表示精度をn桁に増やす	pd.set_option('precision', n)
折れ線グラフの色をダークマゼンタに変更する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: スラグレーを使う	color = 'slategray'
線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
rgbの右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データシリーズの秒を見る	ds.dt.second
浮動小数点数の二乗	x ** 2
Pythonパスの一覧	sys.path
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
シャルトリューズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
option: グラフの色をゴーストホワイトに変更する	color = 'ghostwhite'
縦棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
文字列を水色でプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
ヒストグラムをオリベドラブ色として描画する	plt.hist(データ列, color='olivedrab')
データフレームの中にと文字列がある	df.isin([value, value2])
タプルの最後を除く	aTuple[:-1]
データフレームの指定したカラムの中に文字列があるか調べる	df['列A'].isin([value])
データフレームの一部の列の相関行列を相関係数を用いて計算する	df[['列A', '列B']].corr(method='pearson')
縦棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
２つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
浮動小数点数に変換する	float(x)
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
データシリーズが何月か知る	ds.dt.month
右三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='>')
ホワイトスモーク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
青い一点鎖線を用いて数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
棒グラフを茶色色を使って描画する	plt.bar(データ列x, データ列y, color='brown')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
箱ひげ図で配列を可視化する	plt.boxplot(データ列)
要素が集合のメンバーでないか調べる	element not in aSet
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
パパイヤウィップ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
バリーウッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
option: イエローグリーンにグラフの色を指定する	color = 'yellowgreen'
グラフで使う横軸の説明を設定する	plt.xlabel('x軸ラベル')
2つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
折れ線グラフの右三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
n掛けるn2を算出する	n * n2
両端キューの最初に文字列を追加する	deq.appendleft(element)
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
option: フォントの色をクリムゾンに変更する	color = 'crimson'
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
option: 色をダークグレーに指定する	color = 'darkgrey'
option: タブをセパレータで使用する	sep = '\t'
相関を可視化する	plt.scatter(データ列x, データ列y)
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
ヒストグラムをラベンダーブラッシュ色を使って描画する	plt.hist(データ列, color='lavenderblush')
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
文字コードの最大値	sys.maxunicode
散布図をディープスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
プロットの描画で暗くカラーパレットを用いる	sns.set(pallete='dark')
データフレームを2つの列によってソートし、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
リストをマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
シルバー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
カウンタの最頻出な要素	aCounter.most_common()[0]
ヒストグラムを実線として描画する	plt.hist(データ列, linestyle='solid')
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
option: ライトグレーにフォントの色を設定する	color = 'lightgrey'
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
リストの最後からn番目以前の要素を取り出す	aList[:-n]
データフレームを関数によってまとめたグループ	df.groupby(関数)
小数点数の逆余弦	math.acos(x)
横棒グラフをダークグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkgreen')
今日の日数を使う	datetime.datetime.today().day
日付データにn日分加える	aDate + datetime.timedelta(days=n)
四角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
option: ライトコーラル色を使う	color = 'lightcoral'
option: クリムゾンにフォントの色を指定する	color = 'crimson'
印字可能な文字を全部使う	string.printable
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
折れ線グラフの右三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
option: グラフの色をマゼンタに設定する	color = 'magenta'
タイムスタンプデータからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
データフレームにおいてどの値が最も出現するか見る	df.mode()
二つの文字列は同じか調べる	s == s2
ゴールド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
データシリーズの文字列を未入力値に変換する	ds.replace(値, np.nan)
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
文字列の右側から改行を取り除く	s.rstrip('\n')
ミッドナイトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
正規表現モジュールをインポートする	import re
最大最小値でデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ビン数を設定してヒストグラムを描く	plt.hist(データ列, bins=区関数)
全ての句読点文字	string.punctuation
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
オブジェクトをユーザ向けの文字列に変換する	str(obj)
文字列をケースを無視して正規表現で分ける	re.split(pattern, s, flags=re.IGNORECASE)
リストとリストについての散布図に黒い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
グラフの補助目盛を有効にする	plt.minorticks_on()
option: ゴールド色を使用する	color = 'gold'
整数nの十六進文字列	hex(n)[2:]
リストの中の最大値	max(aList)
パーセプトロンとしてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
縦棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
データシリーズの欠損値を直後の値にセットする	ds.fillna(method='bfill')
データを最大値と最小値で正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレームの末尾5行を抽出する	df.tail(5)
行列の内積	np.dot(aArray, aArray2)
赤い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
ミスティローズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
指定したカラムにおいてどの値が頻出か見る	df['列A'].mode()
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフのバツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
option: マーカーの太さを指定する	markeredgewidth = 2.5
日付データが何日か知る	aDate.day
グラフ中のフォントを指定する	sns.set(font=フォント名)
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
折れ線グラフの大バツ印を青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
ひとつ置きにリストを抽出する	aList[::2]
option: ライトグレーにグラフの色を指定する	color = 'lightgray'
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
データフレームの指定したカラムの最頻値	df['列A'].mode()
双方向キューの最後から要素を取り除く	deq.pop()
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
ひとつでもアスキー文字が文字列内に含まれるか	any(c.isascii() for c in s)
列名を指定して二つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
が名前付きタプル型	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
散布図をゴーストホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
等間隔のベクトル	np.arange(開始値, 終了値, 等差)
タプルのn番目以降の要素を取り出す	aTuple[n:]
option: 破壊的に操作する	inplace = True
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
xを整数に変換する	int(x)
データシリーズを十の位で丸めて、整数型にする	ds.round(-1).astype(int)
データフレームの一部のカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
赤い一点鎖線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
表計算からデータフレームをシートの名前を指定して読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
データフレームの指定したカラムの中に文字列と文字列があるか調べる	df['列A'].isin([value, value2])
タプルの最後	aTuple[-1]
ファイルをオープンする]	open(filepath)
グラフで使う縦軸のラベルをuntitledに指定する	plt.ylabel('y軸ラベル')
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
指定したカラムのどの値が頻出か見る	df['列A'].mode()
データシリーズの中にいくつ欠損値があるかカウントする	ds.isna().sum()
全ての空白文字	string.whitespace
データシリーズの欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
右三角印を使用してデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
オブジェクトのイテレータ	iter(obj)
赤いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
横棒グラフの色をやわらかい青にする	plt.barh(データ列x, データ列y, color='cornflowerblue')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
グラフの凡例の位置を(x,y)にする	plt.legend(loc=(x, y))
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
散布図のマーカーの大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
出力ストリーム全体を行ごとに分割してリストにする	[s.strip() for s in f.readlines()]
データシリーズの文字列を欠損値に変換する	ds.replace(値, np.nan)
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
ファイル全体をリストとして読む	f.readlines()
データフレーム中の欠損値を消す	df.dropna(inplace=True)
option: ミディアムスレートブルー色を使用する	color = 'mediumslateblue'
線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
横棒グラフをパウダーブルー色として描画する	plt.barh(データ列x, データ列y, color='powderblue')
オブジェクトのオブジェクト識別子	id(obj)
横棒グラフをラベンダーブラッシュ色を用いて描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
アンサンブル学習を使ってクラス分類を行う	sklearn.ensemble.VotingClassifier()
ファイルからディレクトリ名取り出す	os.path.dirname(filepath)
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
文字列をセパレータによって区切る	s.split(sub)
データフレームの指定したカラムの欠損値をメディアンに設定する	df['列A'].fillna(df['列A'].median())
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
option: フォントの色をホットピンクに設定する	color = 'hotpink'
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
折れ線グラフをスプリンググリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='springgreen')
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
サンディーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='sandybrown')
本日が日曜日	datetime.datetime.today().weekday() == 6
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
折れ線グラフのポイントマーカーを青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図の▼印の太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
option: ゴールド色を使う	color = 'gold'
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
赤い実線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
カウンタをセットに変換する	set(aCounter)
黒いグリッド線を引く	plt.grid(color='k')
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
現在の秒数	datetime.date.today().second
外れ値に強い線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
option: データ型を指定する	dtype = np.int
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
イテラブルとリストの散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
浮動小数点数を切り下げる	math.floor(x)
配列を分割する	pd.cut(aArray, aList)
散布図の右三角印の色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
option: 色をシャルトリューズにする	color = 'chartreuse'
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
データフレームの選択した列の未入力値を最小値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
ランダムにデータフレームからn行を取り出す	df.sample(n)
横棒グラフの色を濃いシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
配列の標準誤差を使う	scipy.stats.sem(配列)
部分文字列で最後から文字列を区切る	s.rsplit(sub)
線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データを最大値と最小値で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
ヒストグラムの色をライトサーモンに変更する	plt.hist(データ列, color='lightsalmon')
ベクトルの行ごとの合計値	np.sum(aArray, axis=1)
部分文字列が文字列中に存在しないか調べる	sub not in s
データフレームを関数の値でグループ化し、要約統計量を算出する	df.groupby(関数).describe()
最大値・最小値として乱数を得る	random.randint(最小値, 最大値)
予測結果の正確さを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ファイルパスをSJISで開く]	open(filepath, encoding='shift_jis')
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
データフレームのカラムの欠損値をxに減らす	df['列A'].fillna(x)
データ列を全てPandasの日付型に変換する	pd.to_datetime(ds)
棒グラフをゲインズボロ色を使って描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: ライトグリーンに色を設定する	color = 'lightseagreen'
データフレームのカラムが正規分布からどの程度、尖っているか調べる	df['列A'].skew()
日付時刻データが木曜日	aDatetime.weekday() == 3
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
タプル内の要素が全て真か	all(aTuple)
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
リストを反転する	reversed(aList)
aListn番目から要素を得る	aList.pop(n)
文字列をコロンによって区切って列挙する	s.split(':')
リストを昇順にソートする	sorted(aList, reverse=False)
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
コマンド引数を列挙する	sys.argv[1:]
データフレームの列の名前の一覧を使う	df.columns
リストの末尾の要素	aList[-1]
ダークオリーブグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkolivegreen')
青い左三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームの指定したカラムの値をValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
文字列を部分文字列で区切って、列挙する	s.split(sub)
シアン色を用いてヒストグラムを描画する	plt.hist(データ列, color='cyan')
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
データシリーズの中に文字列があるか	ds.isin([value])
option: グラフの色をホワイトに設定する	color = 'white'
option: ゴーストホワイトにフォントの色を設定する	color = 'ghostwhite'
option: トマト色を使用する	color = 'tomato'
option: 濃いシアンを使用する	color = 'darkcyan'
データフレームを表示するとき表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
折れ線グラフの色をゴールドに指定する	plt.plot(データ列x, データ列y, color='gold')
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
破線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dashed')
折れ線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
データシリーズの中に文字列と文字列がある	ds.isin([value, value2])
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
大文字を小文字に変換する	s.lower()
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
タプルの末尾のn要素を取り除く	aTuple[:-n]
正規分布のパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
指定したカラムによってデータフレームを集約してグループ名を列挙する	[name for name, _ in df.groupby('列A')]
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
青緑色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
option: ゴールデンロッドに色を指定する	color = 'goldenrod'
option: ダークカーキ色を用いる	color = 'darkkhaki'
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
時間を使う	import time
リストの末尾を取り除く	aList[:-1]
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
文字列に変換してイテラブルを連結する	''.join(map(str, iterable))
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
実数のn乗の数剰余	pow(x, n, y)
nとn2のビット和	n | n2
データフレームのある列のパーセンタイル	df['列A'].quantile(パーセント/100)
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
横棒グラフの色を真紅にする	plt.barh(データ列x, データ列y, color='crimson')
折れ線グラフの色をドジャーブルーにセットする	plt.plot(データ列x, データ列y, color='dodgerblue')
option: 色のアルファを設定する	alpha = 0.5
折れ線グラフをライトスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
パパイヤウィップ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
散布図を▲マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
リストの要素数	len(aList)
option: マーカーの色をタンにする	markerfacecolor = 'tan'
データフレームの指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
欠損値がある行をドロップしてみる	df.dropna()
未初期化の行列	np.empty(要素数, dtype=np.int)
浮動小数点数が無限大か調べる	math.isinf(x)
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
ゴーストホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
option: 青緑色を使う	color = 'teal'
全要素を０で初期化した複素数型の行列を作る	np.zeros(行数, 列数, dtype=bool)
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
データシリーズの中にいくつ文字列があるか求める	ds.isin([value]).sum()
データシリーズの分散を計算する	ds.var()
新しい文字列で文字列中の正規表現を置き換える	re.sub(pattern, newsub, s)
等差数列から整数乱数を計算する	random.randrange(start, end, step)
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
縦棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
キーが辞書に存在するか調べる	key not in aDict
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
折れ線グラフを白色として描画する	plt.plot(データ列x, データ列y, color='white')
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
縦棒グラフを描き、、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
文字列を文字コード列に変換する	[ord(ch) for ch in s]
ある列のカテゴリごとの最小値を求める	df.groupby('列A').min()
折れ線グラフの色をプラムにセットする	plt.plot(データ列x, データ列y, color='plum')
線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
オプションで、標準エラーを用いる	file = sys.stderr
線グラフをライトスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
リストに文字列を追加する	aList.append(element)
両端キューを空にする	deq.clear()
データフレームをある列によって昇順に破壊的に並べる	df.sort_values(by='列A', ascending=True, inplace=True)
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームの末尾	df.tail()
横棒プロットを描画する	plt.barh(ラベル列, データ列)
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
本日の年数	datetime.datetime.today().year
タプルの先頭のn要素を除く	aTuple[n:]
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
正規分布によるパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データシリーズの標本標準偏差を求める	ds.std(ddof=1)
データフレームの一部のカラムの値を正規表現patternでまとめて置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
棒グラフをホワイトスモーク色として描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
リストとリストの散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
配列の散布図を描画する	plt.scatter(データ列x, データ列y)
現在処理中の例外を情報を調べる	sys.exc_info()
option: マーカーを三角に変更する	marker = '^'
option: 改行を区切り記号で使う	sep = '\n'
option: グラフの色をアンティークホワイトに指定する	color = 'antiquewhite'
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
nのn2乗を計算する	n ** n2
option: ラベンダーを使う	color = 'lavender'
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
最初のカテゴリーを除外してデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
アンサンブル学習を用いて回帰分析を行う	sklearn.ensemble.VotingRegressor()
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
集合をタプルに変換する	tuple(aSet)
追加モードでファイルを開いて]、fとする	f = open(filepath, mode='a')
nをn2でわる	n / n2
行列の累積和	np.cumsum(aArray)
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
組の合計値	sum(aTuple)
列をカテゴリデータに変換する	ds.astype(object)
n進数文字列を整数にする	int(s, n)
文字列はPythonのキーワード	keyword.iskeyword(s)
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
書式をargsを引数としてフォーマットする	formatText.format(*args)
変数を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフの色を紺碧に変更する	plt.plot(データ列x, データ列y, color='azure')
リストとリストの散布図を描画してバツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(配列, 'norm')
バツ印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
option: シアンにグラフの色を指定する	color = 'cyan'
点線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
部分文字列を文字列の最初から見つける	s.find(sub)
辞書のキーを要素に変更する	aDict[key] = element
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
データフレームをCSVファイルにBOM付きで保存する	df.to_csv('file.csv', encoding='utf_8_sig')
データフレームの中の列をビニングする	pd.cut(df[col], aList)
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
部分文字列で文字列を分けたときの後半の文字列を使う	s.partition(sub)[-1]
CSVファイルをデータフレームとして読み込む	pd.read_csv('file.csv', sep=',')
青色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
散布図でデータフレームのカラムをグラフ化する	sns.scatterplot(data=df, x='列名', y='列名')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
文字列を太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
珊瑚色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
線形モデルの切片	model.intercept_
ゼロ埋めされた複素数型のベクトル	np.zeros(要素数, dtype=bool)
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
ヒストグラムの色を淡い茶色に指定する	plt.hist(データ列, color='tan')
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
双方向キュー中の文字列をカウントする	deq.count(element)
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
集合を空にする	aSet.clear()
option: ダークターコイズ色を使う	color = 'darkturquoise'
折れ線グラフをミントクリーム色を使って描画する	plt.plot(データ列x, データ列y, color='mintcream')
折れ線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームのカラムの調和平均を求める	scipy.stats.hmean(df['列A'])
スノー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
データ列と数列についての散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームの一部のカラムの中央値	df[['列A', '列B']].median()
カテゴリ列で色分けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
トマト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
option: グラフの色をタンに設定する	color = 'tan'
option: フォントの色を小麦色に指定する	color = 'wheat'
要素がマッピングの値として含まれている	element in aDict.values()
昇順にある列によってデータフレームをソートする	df.sort_values(by='列A', ascending=True)
シアンにヒストグラムの色を設定する	plt.hist(データ列, color='cyan')
ディープスカイブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
部分文字列で文字列を分けた場合の前半の文字列	s.partition(sub)[0]
タプルを引数として展開して表示する	print(*aTuple, sep=',')
折れ線グラフのバツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
複数のデータフレームを縦に結合する	pd.concat([df, df2, df3], axis=1)
文字列内にひとつでも小文字が含まれるか	any(c.islower() for c in s)
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
リストとリストの散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
日付データの年	aDate.year
ダークゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
文字列の両端から不要な空白を除去する	s.strip()
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
データフレームのカラムの最頻値を計算する	mode, count = scipy.stats.mode(df['列A'])
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
オブジェクトがタプルクラス	isinstance(obj, tuple)
散布図をアンティークホワイト色として描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
分類モデルから目的変数を予測する	y_pred = model.predict(説明変数)
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
ファイルパスを開き]追加ストリームを使う	open(filepath, mode='a')
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
縦棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
本日の日付	datetime.date.today()
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
ダークサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフの四角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
スピアマン相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームの先頭	df.head()
リストの要素を昇順にソートする	sorted(aList, reverse=False)
カラーパレットを全般的に暗くする	sns.set(pallete='dark')
棒グラフをハニーデュー色として描画する	plt.bar(データ列x, データ列y, color='honeydew')
データシリーズの欠損値を最大値に変更する	ds.fillna(ds.max())
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
データフレームをCSVファイルにカラムの名前を付けず書き出す	df.to_csv('file.csv', header=None)
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
文字列の中でパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
双方向キューの最初に要素を追加する	deq.appendleft(element)
文字列の開始位置と終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
赤色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
NaNも加えてデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
リストの最後からn番目以前の部分を取り出す	aList[:-n]
データフレームの全カラムの相関をグラフ化する	sns.pairplot(df)
ヒストグラムを真紅色として描画する	plt.hist(データ列, color='crimson')
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
データフレームの選択したカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
データフレームの選択したカラムの標本標準偏差	df[['列A', '列B']].std(ddof=1)
散布を可視化する	plt.scatter(データ列x, データ列y)
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
データフレームの選択した列の分散	df[['列A', '列B']].var()
データフレームが重複しているか調べる	df.duplicated()
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
データフレームにおいてどの値が頻出か見る	df.mode()
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ファイル全体をリストに変換する	[s.strip() for s in f.readlines()]
カンマによって文字列を分割して、列挙する	s.split(',')
データフレームの下100行を抽出する	df.tail(100)
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
線グラフの線種を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
列の各要素を関数でフィルタする	map(func, iterable)
クラス分類を確率的勾配降下として行う	model = sklearn.linear_model.SGDClassifier()
データフレームからカテゴリデータを取り出す	df.select_dtypes('object')
再帰の上限を上げる	sys.setrecursionlimit(1000000)
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategray')
散布図をライトゴールドロディイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
リストとリストについて散布図を描画してその大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
指定した列のカテゴリで集計し、それぞれの個数を計算する	df.groupby('列A').count()
カウンタの項目数	len(aCounter)
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
データフレームがどの程度、正規分布から歪んでいるか確認する	df.kurt()
配列としてデータフレームのある列を取り出す	df['列A'].values
データフレームを各カテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ひとつでも数字が文字列内にある	any(c.isdigit() for c in s)
散布図にポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
リストとリストの散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
nが2で割り切れるか調べる	n % 2 == 0
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
option: マーカーを丸に変更する	marker = 'o'
option: フォントの色をイエローグリーンに指定する	color = 'yellowgreen'
リストのn番目の	aList[n]
データフレームの中に日付データが存在するか調べる	df.isin([value])
ヒストグラムをインディゴ色として描画する	plt.hist(データ列, color='indigo')
両端キューの大きさ	len(deq)
モジュールを検索するパス	sys.path
出現頻度を描画する	plt.hist(データ列)
ボックスチャートとして配列を可視化する	plt.boxplot(データ列)
分数モジュールをインポートする	import fractions
データフレームのあるカラムの欠損値を平均で置換する	df['列A'].fillna(df['列A'].mean())
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
大量のデータが正規分布に従うか仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの△マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ひとつでも非数字が文字列中に含まれる	any(not c.isdigit() for c in s)
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
データシリーズの年を使う	ds.dt.year
黒い星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
変数について数値を微分する	sympy.diff(e, z)
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgrey')
カウンタを辞書に変換する	dict(aCounter)
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
縦棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
原点から(実数,y)の距離	math.hypot(x, y)
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
ある列の値がxより小さい行を選択する	df[df['列A'] < x]
データフレームの不偏標準偏差	df.std()
option: シルバー色を使う	color = 'silver'
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
データフレームのNaNをメディアンで補う	df.fillna(df.median())
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
配列は何次元か調べる	aArray.ndim
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
データフレームを表示するとき、小数点以下n桁まで表示するようにする	pd.set_option('precision', n)
グラフの色を色差別なくする	sns.set(pallete='colorblind')
マップの項目名の一覧	aDict.keys()
アルファベットの小文字を全て見る	string.ascii_lowercase
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
リストの平均値	sum(aList)/len(aList)
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
データフレームのデータ型一覧	df.dtypes
データフレームを千の位で丸めて、整数型にする	df.round(-3).astype(int)
折れ線グラフの星印を青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
散布図の印を赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
リストのn番目からn2番目までの部分	aList[n:n2]
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
空の両端キュー	collections.deque()
折れ線グラフの▼マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
グラフの色を淡くする	sns.set(pallete='muted')
データフレームのカラムをカテゴリごとにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
キューをリストにする	list(deq)
線グラフを白色を用いて描画する	plt.plot(データ列x, データ列y, color='white')
複数の列からグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
リストとリストについて散布図を描画して、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
縦棒プロットを描画し、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
option: UTF8を使う	encoding = 'utf-8'
ISO書式の文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
リストとリストについて散布図をプロットし、、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
データフレームの選択したカラムの第三四分位数	df[['列A', '列B']].quantile(0.75)
縦棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
option: グラフの色をマルーンに設定する	color = 'maroon'
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
横棒グラフを濃い青色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
option: フォントの色をライトスチールブルーに変更する	color = 'lightsteelblue'
英字の小文字を全部見る	string.ascii_lowercase
CSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
折れ線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
配列の全要素の値を変更する	aArray[:, :] = 指定の値
マッピングから最後の項目を取り出す	aDict.popitem()
データフレームの最頻値	df.mode()
ヒストグラムをリネン色を用いて描画する	plt.hist(データ列, color='linen')
カラーバーを描画する	plt.colorbar()
サイコロと同じ乱数	random.randint(1, 6)
ダークオレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
数列と配列の散布図を描画し、、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
nからn2までのstepごとによるスライス	slice(n, n2, step)
箱髭図をプロットして、平均線を加える	plt.boxplot(データ列, meanline=True)
option: エラーを無視する	errors = 'ignore'
ヒストグラムをブルーバイオレット色を用いて描画する	plt.hist(データ列, color='blueviolet')
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
数式を数値にする	float(e)
データフレームをヘッダを付けず出力する	df.to_csv('file.csv', header=None)
リスト内の要素が全て真	all(aList)
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
データフレームの欠損値を直後の値で置き換える	df.fillna(method='bfill')
散布図を赤い星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
year年month月day日を日付時刻にする	datetime.datetime(year=year, month=month, day=day)
点線を用いてヒストグラムをプロットする	plt.hist(データ列, linestyle='dotted')
ファイルにxを文字列にして書く	f.write(str(x))
辞書からキーの値	aDict.get(key)
ダークブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
文字列がカタカナかどうか	('ァ' <= ch <= 'ン')
散布図のマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
散布図をやわらかい青色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データフレームのNaNを後の行の値に設定する	df.fillna(method='bfill')
縦棒グラフをピンク色として描画する	plt.bar(データ列x, データ列y, color='pink')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
リストのn番目のを使う	aList[n]
青いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
配列とリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
ガンマ関数の値	math.gamma(x)
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
option: グラフの色をグリーンに設定する	color = 'green'
二つの変数を文字列で区切って表示する	print(value, value2, sep=s)
ヒストグラムの色を青に変更する	plt.hist(データ列, color='blue')
option: スラグレーにグラフの色を設定する	color = 'slategrey'
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームの選択したカラムの中の欠損値の合計を数える	df[['列A', '列B']].isna().sum()
ヒストグラムの色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
option: ダークバイオレットにグラフの色を設定する	color = 'darkviolet'
整数が整数	x.is_integer()
グラフのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
あるカラムの中に文字列がある	df['列A'].isin([value])
縦棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
option: グラフの色をスチールブルーに指定する	color = 'steelblue'
表データの列の名前一覧で指定した列を消す	df.drop(columns, axis=1, inplace=True)
標準入力から1行改行なしに読み込む	sys.stdin.readline().rstrip()
option: グラフの色をライトブルーに設定する	color = 'lightblue'
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
指定した列のカテゴリで集計し、それぞれの最大値を算出する	df.groupby('列A').max()
整数nの十六進数表現	hex(n)
日付データは日付データより早いか調べる	aDate < aDate2
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
オブジェクトが関数かどうか	callable(obj)
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
リストの先頭	aList[0]
ヒストグラムを黄緑色を使って描画する	plt.hist(データ列, color='chartreuse')
小数点数は無限大か	math.isinf(x)
縦棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
ライム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
リストの要素をクリアにする	aList.clear()
ラベンダーブラッシュ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
散布図に黒い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='k')
名前付きタプルをデータからインスタンス化する	C._make(パラメータ)
option: グラフの色をスラグレーにセットする	color = 'slategrey'
ライトスチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightsteelblue')
現在のモジュール	sys.modules[__name__]
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームがどの程度、正規分布から歪んでいるか見る	df.kurt()
ヒストグラムをダークバイオレット色として描画する	plt.hist(データ列, color='darkviolet')
SDGでクラス分類をする	model = sklearn.linear_model.SGDClassifier()
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データシリーズが何曜日か見る	ds.dt.weekday_name
赤いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
リストを境界値として配列をビン分割する	pd.cut(aArray, aList)
ガンマ関数	math.gamma(x)
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
散布図をブルーバイオレット色を用いて描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
凡例をグラフの表示する	plt.legend()
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
棒グラフをミスティローズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mistyrose')
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
折れ線グラフの色をグレーにセットする	plt.plot(データ列x, データ列y, color='gray')
データフレームの中の欠損値の数を数える	df.isna().sum()
指定したカラムを10の位で丸める	df['列A'].round(-1)
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
グラフにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
ふたつの集合の和集合	aSet.union(aSet2)
リストの末尾を見る	aList[-1]
nが組のいづれか	n in aTuple
データ列のヒストグラムを描画する	plt.hist(データ列)
オブジェクトを文字列に変換する	str(obj)
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
関数の値によってデータフレームをグループ化し統計量を計算する	df.groupby(関数).describe()
データフレームを散布図を使って可視化する	sns.scatterplot(data=df, x='列名', y='列名')
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
ヒストグラムの色を茶色に指定する	plt.hist(データ列, color='brown')
カウンタの上位を列挙する	aCounter.most_common(k)
データフレームの一部の列の中に文字列と文字列が含まれるか調べる	df[['列A', '列B']].isin([value, value2])
option: グラフの色を赤に設定する	color = 'red'
文字列の右端から部分文字列を除く	s.rstrip(sub)
二つの列ごとにデータフレームをグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
散布図に赤い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
データフレームの指定した列の要約統計量	df['列A'].describe()
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
実数のn乗を算出する	x ** n
option: セパレータを使わない	sep = ''
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
値が集合のメンバーでないか調べる	element not in aSet
配列の最大値	np.max(aArray)
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
ブラック色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
横棒グラフの色をホワイトにする	plt.barh(データ列x, データ列y, color='white')
文字列が空白からなるか調べる	s.isspace()
乱数生成系列を初期化する	random.seed()
縦棒グラフをライトシアン色として描画する	plt.bar(データ列x, データ列y, color='lightcyan')
データシリーズの上位25％を求める	ds.quantile(0.25)
ミディアムバイオレットレッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
折れ線グラフの色をドジャーブルーに変更する	plt.plot(データ列x, データ列y, color='dodgerblue')
year年を日付時刻にする	datetime.datetime(year=year, month=1, day=1)
ファイルパスが存在しないか確認する	not os.path.exists(filepath)
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
option: プラム色を使う	color = 'plum'
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
ヒストグラムをアクア色として描画する	plt.hist(データ列, color='aqua')
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
データ列を使用する	import pandas as pd
文字コードに対応する文字	chr(unicode)
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
リストの散らばりを作図する	plt.scatter(データ列x, データ列y)
変数をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
リストをイミュータブルにする	tuple(aList)
丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o')
データフレームからカテゴリデータだけ選択する	df.select_dtypes('object')
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
イエローグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
作画の背景色を白くする	sns.set(style='whitegrid')
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
option: フォントの色をモカシンに設定する	color = 'moccasin'
リスト間のスピアマンの相関係数	scipy.stats.spearmanr(数列, 数列2)
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
イテラブルとデータ列の散布図にrgbの左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
横棒グラフをオリーブ色として描画する	plt.barh(データ列x, データ列y, color='olive')
ヒストグラムをミスティローズ色を用いて描画する	plt.hist(データ列, color='mistyrose')
option: スプリンググリーン色を用いる	color = 'springgreen'
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
二つのデータフレームを横方向に合体させる	pd.concat([df, df2], axis=1)
option: 書き込み用に変更する	mode = 'w'
x座標の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
アリスブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
標準出力を得る	sys.stdout
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
データフレームの末尾10行を抽出する	df.tail(10)
グリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
カテゴリでグループ化して、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
データシリーズの分を使う	ds.dt.minute
綺麗なグラフを使う準備をする	import seaborn as sns
実数を小数点以下第一位で丸める	round(x, 1)
データフレームの選択した列の未入力値をxに設定する	df[['列A', '列B']].fillna(x)
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
縦棒グラフをライトブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightblue')
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
option: グラフの色をシャルトリューズに変更する	color = 'chartreuse'
option: マーカーを▽に変える	marker = 'v'
option: アクアにグラフの色を指定する	color = 'aqua'
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
切り捨てながらnをn2分の1にする	n //= n2
黒い大バツマーカーをデータ列とイテラブルの散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
カウンタ同士でユニオン	aCounter | aCounter2
データフレームの選択したカラムの中の未入力値の個数を数える	df[['列A', '列B']].isna().sum()
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
option: グラフの色を青緑に設定する	color = 'teal'
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
浮動小数点数を数で除算して、切り捨てる	x // y
option: ▼マーカーを用いる	marker = 'v'
データフレームからランダムに10行を重複ありでサンプリングする	df.sample(10, replace=True)
ヒストグラムの色をスプリンググリーンにセットする	plt.hist(データ列, color='springgreen')
option: ダークカーキにフォントの色を指定する	color = 'darkkhaki'
折れ線グラフの色をダークオーキッドにセットする	plt.plot(データ列x, データ列y, color='darkorchid')
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategrey')
度数分布図を複数横に並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームの指定のカラムに重複があれば、除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
option: バツマーカーを描画する	marker = 'x'
数を小数点で四捨五入する	round(x, n)
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
折れ線グラフの大バツ印の色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
グラフの題名を設定する	plt.title('グラフの名称')
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
オブジェクトの型	type(obj)
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
n割るn2を切り上げる	(n + n2 - 1) // n2
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
散布図のクロスマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
線グラフの色をグリーンイエローに変更する	plt.plot(データ列x, データ列y, color='greenyellow')
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
イテラブルを累積した列	itertools.accumulate(iterable, operator.mul)
要素が辞書の値として含まれているか調べる	element in aDict.values()
ユニコードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
２つの列でデータフレームを並べ、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
折れ線グラフを半透明の一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ある列の値がx以上y以下の行を取り出す	df[(x <= df['列A']) & (df['列A'] <= y)]
ヒストグラムの色をオリーブに変更する	plt.hist(データ列, color='olive')
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
nがn2以上かどうか調べる	n >= n2
ある列の値がxより大きく、yより小さい行を抽出する	df[(x < df['列A']) & (df['列A'] < y)]
ターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
リストの推移を赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
カテゴリデータを連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データフレームの列の名前を全て置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
分類モデルの適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
サドルブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
リストのn番目の要素を消す	del aList[n]
nをn2で割った値の切り上げ	(n + n2 - 1) // n2
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
option: 紺碧に色を設定する	color = 'azure'
データフレームの平均など	df.describe()
散布図に赤いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='r')
赤いグリッド線を引く	plt.grid(color='r')
線グラフをパールゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(df['列A'], 'norm')
データシリーズの中に日付データと文字列があるかどうか確認する	ds.isin([value, value2])
データシリーズの日	ds.dt.day
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
空の回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
ビスク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
データフレームの選択したカラムを百の位で丸める	df[['列A', '列B']].round(-2)
option: 改行コードを動作環境依存に設定する	newline = None
データフレームをCSV形式で保存する	df.to_csv('file.csv')
正規分布として乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
データフレームの指定したカラムの欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
サンディーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
シーケンスを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
にバイオリン図でデータフレームをグラフ化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
両端キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
タイムスタンプデータをn日前にする	aDatetime - datetime.timedelta(days=n)
xの小数点以下'2'桁までプリントする	print(':.2f'.format(x))
ライトブルー色を使ってヒストグラムを描画する	plt.hist(データ列, color='lightblue')
表を配列にする	df.values
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
ゼロ埋めした符号なし８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.uint8)
nをn2だけ大きくする	n += n2
文字列はタプルに含まれるかどうか調べる	element in aTuple
カウンタをイテラブルを出現回数して、更新する	aCounter.update(iterable)
データフレームを表示するとき表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
xが-9以上、9以下かどうか調べる	-9 <= x <= 9
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
集合のイミュータブル版	frozenset(aSet)
線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
黒い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='k')
実行結果を表示する	print(value)
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
折れ線プロットをプロットする	plt.plot(データ列x, データ列y)
ライトゴールドロディイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightgoldenrodyellow')
k進対数	math.log(x, k)
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
線グラフの色を黄色に変更する	plt.plot(データ列x, データ列y, color='yellow')
カウンタを辞書として更新する	aCounter.update(aDict)
折れ線グラフをチョコレート色として描画する	plt.plot(データ列x, データ列y, color='chocolate')
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
ファイルの絶対パス	os.path.abspath(filepath)
上位集合	aSet.issuperset(aSet2)
ナバホホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データフレームから一つの列を取り出す	df[['列A']]
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
配列とリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
半透明の一点鎖線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
タイムスタンプデータの曜日を整数で使う	aDatetime.weekday()
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
散布図をインディアンレッド色として描画する	plt.scatter(データ列x, データ列y, color='indianred')
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
散布図をライトイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
グラフの色を明るくする	sns.set(pallete='bright')
配列の最頻値を計算する	mode, count = scipy.stats.mode(配列)
ユークリッド距離を計算する	math.dist(point, point2)
スタックの最大長	deq.maxlen
棒グラフをデピンク色として描画する	plt.bar(データ列x, データ列y, color='deeppink')
ヒストグラムの色をシャルトリューズに指定する	plt.hist(データ列, color='chartreuse')
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
追加できるようにUTF8で既存のファイルを開く]	open(filepath, mode='a', encoding='utf-8')
一番右側の列を除いたデータフレーム	df[df.columns[:-1]]
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
option: 読み込みモードに設定する	mode = 'r'
エクセルファイルから全てのシートをロードする	pd.read_excel('file.xlsx', sheet_name=None)
文字列の開始位置番目からと終了位置番目までの間に部分文字列が含まれないか	s.find(sub, start, end) == -1
分類モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
シエナ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
標準入力から1文字だけ読み込む	sys.stdin.read(1)
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
ファイルからストリームを読み込みfileとする	file = open(filepath)
文字列を改行で分割し、文字列リストにする	s.splitlines()
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
option: グラフの色をフローラルホワイトにセットする	color = 'floralwhite'
option: グラフの色をシスルに設定する	color = 'thistle'
第二引数で指定されたファイルの名前	sys.argv[1]
ライトゴールドロディイエロー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームの指定したカラムを千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
データフレームの指定したカラムの不偏標準偏差	df['列A'].std()
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
xを浮動小数点数に変換する	float(x)
既存の配列を元に全要素が1のベクトルを作る	np.ones_like(aArray)
データ列を二つ並べてボックスチャートにする	plt.boxplot([データ列, データ列])
データフレームをグループ化し、ある列に対し合計を求める	df.groupby('列A')['列B'].sum()
線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
青いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
nullに等しいもの	None
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
タプルの長さ	len(aTuple)
データフレームの指定した列を10の位で四捨五入する	df['列A'].round(-1)
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データシリーズを丸めて、整数型にする	ds.round().astype(int)
方程式として数式の変数の解を求める	sympy.solve(e, z)
カンマ区切りのファイルをn番目の列をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
option: ミディアムブルー色を用いる	color = 'mediumblue'
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
折れ線グラフを半透明の破線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: 先頭のカラムを行に設定する	index_col = 0
ある列の値ごとの個数	df.groupby('列A').count()
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
イテラブルのコンビネーションを求める	itertools.combinations(iterable, n)
実数の双曲線正弦を計算する	math.sinh(x)
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
配列のn次モーメントを算出する	scipy.stats.moment(配列, moment=n)
ホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
UNIX時間の列から日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
辞書のキーを列挙する	list(aDict)
天井	math.ceil(x)
option: ミディアムオーキッドを使う	color = 'mediumorchid'
横棒グラフをシスル色として描画する	plt.barh(データ列x, データ列y, color='thistle')
nがn2未満、もしくはn3以上か判定する	n < n2 or n >= n3
横棒グラフをミッドナイトブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='midnightblue')
組を逆順にする	aTuple[::-1]
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
数式の部分分数化する	sympy.apart(e)
アクア色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
データフレームの相関行列をヒートマップで可視化する	sns.heatmap(df.corr())
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
データ列を四分位数で分割する	pd.qcut(ds, 4)
データフレームの中の列をビン数nでビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
タブ区切りのファイルから文字エンコーディングを指定してデータフレームをロードする	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
BOM付きでファイルパスをオープンする]	open(filepath, encoding='utf_8_sig')
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
xが一桁の数かテストする	-9 <= x <= 9
全ての印字可能な文字	string.printable
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
グリーンイエローにヒストグラムの色を設定する	plt.hist(データ列, color='greenyellow')
改行を取り除いてファイルを一行ずつ読む	f.readline()
ライトコーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
赤いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='r')
新しい計数器を列から作る	collections.Counter(iterable)
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
ヒストグラムの色をゴーストホワイトに指定する	plt.hist(データ列, color='ghostwhite')
配列の値が正規分布にしたがって発生する確率を計算する	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
データ列を中央値でビン分割する	pd.qcut(ds, 2)
集合の変更不能版	frozenset(aSet)
option: マゼンタを使う	color = 'magenta'
赤い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
データシリーズの曜日は何日目か調べる	ds.dt.dayofweek
データフレームをグループ化し、標準偏差を求める	df.groupby('列A').std()
赤いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
指定した列リストのみデータフレームの重複を確認する	df.duplicated(subset=['列A', '列B'])
棒グラフをカーキ色として描画する	plt.bar(データ列x, データ列y, color='khaki')
option: ３二ビット整数型を使う	dtype = np.int16
実数の逆双曲線正弦を求める	math.asinh(x)
文字列がタプルの要素でないか	element not in aTuple
データフレームを丸める	df.round()
predicateFuncがTrueとなる列の要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
option: ライトブルーにフォントの色を設定する	color = 'lightblue'
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
x,yの複素数	complex(x, y)
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
複数行対応として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
option: サドルブラウン色を使う	color = 'saddlebrown'
データフレームを万の位で四捨五入する	df.round(-4)
縦棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
option: アスキー文字に限定する	flag = re.ASCII
本日の日数を使う	datetime.datetime.today().day
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
散布図の四角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
正接の逆数を求める	math.atan(x)
現在の作業ディレクトリ	os.getcwd()
行列のスカラー倍	aArray * n
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
散布図を黒いポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c='k')
日付データにn時間分、足す	aDate + datetime.timedelta(hours=n)
ロバスト推定としてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
横棒グラフの色を濃い青にする	plt.barh(データ列x, データ列y, color='darkblue')
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
横軸の目盛を表示しない	plt.xticks([])
option: フォントの色を暗い赤に指定する	color = 'darkred'
option: ライトスレイグレー色を用いる	color = 'lightslategrey'
表データのあるカラムは何分か見る	df['列A'].dt.minute
実数を３乗する	x ** 3
両端キューのstart番目からend番目の値	collections.deque(itertools.islice(deq, start, end))
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
標準入力から1行だけ改行なしに読み込む	sys.stdin.readline().rstrip()
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
0からnまでの整数列	list(range(n+1))
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
棒グラフをミディアムバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
行列にはいくつ要素が存在するか調べる	aArray.size
option: セパレータをタブにする	sep = '\t'
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
カウンタのキーと出現回数を列挙する	aCounter.items()
データフレームの選択したカラムの値を正規表現patternでまとめてreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
横棒グラフをサドルブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
データフレームをあるカラムによってソートし、、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
option: グラフの色をライトスレイグレーに変更する	color = 'lightslategray'
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
二つのデータフレームを異なる列をキーにして左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
グラフで使うx座標に軸ラベルを付ける	plt.xlabel('x軸ラベル')
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
色付きの実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: 丸印を加える	marker = 'o'
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
カウンタの項目を列挙する	aCounter.keys()
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
データフレームの最初の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列を正規表現で区切る	re.split(pattern, s)
データフレームを２つの列によって集計して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
データフレームの選択したカラムの欠損値を最頻値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
二進数文字列を整数にする	int(s, 2)
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
データフレームのひとつの列を説明変数にする	説明変数 = df[['列名']]
散布図の下三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームの一部のカラムの中に含まれる日付データの合計を数える	df[['列A', '列B']].isin([value]).sum()
配列を平坦にする	aArray.flatten()
ローングリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
文字列の先頭でパターンに大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
option: モカシン色を使う	color = 'moccasin'
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
データフレームがどの程度、分散しているか見る	df.var()
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
文字コードtextでファイルパスをオープンする]	open(filepath, encoding=text)
指定した列のカテゴリで集計し、各標準偏差を算出する	df.groupby('列A').std()
エクセルファイルファイルからCSVファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
散布図に▲マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
データフレームのあるカラムの日	df['列A'].dt.day
option: グリーンイエロー色を使う	color = 'greenyellow'
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
リストの合計	sum(aList)
分子と分母から分数を生成する	fractions.Fraction(分子, 分母)
折れ線グラフの下三角印の大きさを設定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
TSVファイルを読み込む	pd.read_csv('file.tsv', sep='\t')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
TSVファイルから文字コードを指定して読む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
データフレームの二つのカラムを並べて箱ひげ図を用いて描画する	plt.boxplot([df['カラム'], df['カラム']])
縦棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
トマト色でヒストグラムを描画する	plt.hist(データ列, color='tomato')
アルファベットを使う	string.ascii_letters
一点鎖線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
線グラフをライトゴールドロディイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
文字列のケースを整える	s.casefold()
リストとリストの散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
最初のカテゴリーを除外してデータフレームのあるカラムをダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
option: サドルブラウンを使用する	color = 'saddlebrown'
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
折れ線グラフの色をカラーコードを用いて設定する	plt.plot(データ列x, データ列y, color='#800080')
0で全要素を初期化した行列を作る	np.zeros(要素数)
折れ線グラフの右三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
整数型の全要素を０で初期化した行列を作成する	np.zeros(行数, 列数, dtype=np.int)
データフレームの指定したカラムの空文字を未入力値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
y軸だけグリッド線	plt.grid(axis='y')
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
グループ化してデータフレームの散布図を横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
散布図の下三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
イテラブルの折れ線プロットを描画して色をRGBとして設定する	plt.plot(データ列x, データ列y, color='#800080')
行列の次元を変形する	aArray.reshape(行数, 列数)
組の先頭の要素	aTuple[0]
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
折れ線グラフをナバホホワイト色として描画する	plt.plot(データ列x, データ列y, color='navajowhite')
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
nがn2よりも小さいか	n < n2
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
データフレームのあるカラムをタイムスタンプ型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
折れ線グラフの左三角印を赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
文字列中にひとつでも非アルファベットが含まれるかどうか	any(not c.isalpha() for c in s)
配列のトリム平均を計算する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
そのメディアンでデータシリーズの欠損値を埋める	ds.fillna(ds.median())
配列の累積積	np.cumprod(aArray)
JSONフォーマットの入力を読み込んで、dataとする	data = json.load(fin)
option: セパレータをコロンにする	sep = ':'
リネン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
実数を実数で整数除算する	x // y
実数から浮動小数点数を引く	x - y
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
組の長さを見る	len(aTuple)
文字列を区切りで分割して、文字列リストに変換する	s.split(sep)
配列を等量でn個にビンニングする	pd.qcut(aArray, n)
タプルの末尾	aTuple[-1]
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
ミディアムターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
指定した列のカテゴリで集計し、それぞれの標準偏差を計算する	df.groupby('列A').std()
変数を白色化する	f'\033[37m{value}\033[0m'
平均値でデータシリーズの欠損値を埋める	ds.fillna(ds.mean())
ヒストグラムをロイヤルブルー色を用いて描画する	plt.hist(データ列, color='royalblue')
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
モカシン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
option: ロージーブラウン色を使う	color = 'rosybrown'
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
数値の数値を算出する	float(e)
データフレームの選択した列のNaNを最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
option: 印を左三角に変更する	marker = '<'
データ列の四分位を作図する	plt.boxplot(データ列)
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
stringモジュールをインポートする	import string
データフレームのあるカラムの曜日名	df['列A'].dt.weekday_name
ある列のカテゴリごとの標準偏差	df.groupby('列A').std()
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
欠損値も加えてデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
ファイルパスからファイル名を使う	os.path.basename(filepath)
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
option: グラフの色をミッドナイトブルーに指定する	color = 'midnightblue'
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
文字列の先頭の文字を使う	s[0]
半透明の実線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
双方向キューの左に配列の各要素を順に付け加える	deq.extendleft(iterable)
文字列は組に含まれるか調べる	element in aTuple
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
option: 配列のデータ型を指定する	dtype = np.int32
ベクトルのユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
option: オリーブにフォントの色を設定する	color = 'olive'
データフレームから列を一つのみ選択する	df[['列A']]
標準出力のバッファをフラッシュする	sys.stdout.flush()
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
折れ線グラフに丸印を使う	plt.plot(データ列x, データ列y, marker='o')
表データから一つのカラムを抽出する	df[['列A']]
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
ヒストグラムを黄色色として描画する	plt.hist(データ列, color='yellow')
n回文字列を繰り返す列	itertools.repeat(element, n)
散布図のポイント印を青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
データフレームの選択したカラムのパーセンタイル	df[['列A', '列B']].quantile(パーセント/100)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームの欠損値を中央値で置換する	df.fillna(df.median())
線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
表のある列をNaNも加えてダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
深紅色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
ファイルから拡張子付きのファイル名を取り出す	os.path.basename(filepath)
配列をビン数nでビン分割する	pd.cut(aArray, n)
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
ファイルパスを読み込みモードを用いてオープンする]	open(filepath, mode='r')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
キューの大きさ	len(deq)
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
リストとリストについての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
option: アクア色を使う	color = 'aqua'
データ列を等間隔でn個に分割する	pd.cut(ds, n)
データフレームの選択したカラムの値をValueMapでまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
整数nがタプルのいづれか	n in aTuple
折れ線グラフの色を真紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
日付時刻データが何日か知る	aDatetime.day
散布図の下三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
整数乱数のベクトル	np.random.randint(開始値, 終了値, N)
散布図でデータフレームの全カラムを可視化する	sns.pairplot(df)
option: クリムゾン色を使う	color = 'crimson'
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
ある列の値によってデータフレームを集約する	df.groupby('列A')
2つの行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
データフレームを万の位で丸める	df.round(-4)
折れ線グラフにバツマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
オブジェクトがあるクラス	isinstance(obj, クラス)
ある列の文字列が部分文字列で終わるデータを選択する	df[df['列A'].str.endswith(部分文字列)]
option: ライトグレーにフォントの色をする	color = 'lightgrey'
散布図をシーグリーン色として描画する	plt.scatter(データ列x, データ列y, color='seagreen')
データフレームからランダムに5行を選択する	df.sample(5)
データシリーズの曜日を使う	ds.dt.weekday_name
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
２次元リストの転置行列	[list(x) for x in list(zip(*aList))]
マッピングにマップのエントリを更新する	aDict.update(aDict2)
横棒グラフをミディアムブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumblue')
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
折れ線グラフの色をゴーストホワイトに指定する	plt.plot(データ列x, データ列y, color='ghostwhite')
アリスブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
赤い大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
イテラブルの各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
集合から要素を除く	aSet.remove(element)
predicateFuncがTrueとなるイテラブルの要素を得る	itertools.takewhile(predicateFunc, iterable)
クラス分類をパーセプトロンを用いてする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
エンコーディングで文字列をバイト列にする	s.encode(encoding=encoding)
上位集合か	aSet.issuperset(aSet2)
イエローグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームの歪度	df.kurt()
文字列はタプルの要素か調べる	element in aTuple
文字列全体を複数行対応としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
option: 淡いピンク色にグラフの色を指定する	color = 'lightpink'
データフレームの歪み	df.kurt()
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
二つの列を組み合わせてグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
データシリーズのNaNを直前の値で補う	ds.fillna(method='ffill')
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
データシリーズを千の位で丸めて、整数型にする	ds.round(-3).astype(int)
アルファベットの大文字を全て使う	string.ascii_uppercase
データフレームをグループ化し、それぞれの個数を求める	df.groupby('列A').count()
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
データフレームが正規分布からどの程度、歪んでいるか確認する	df.kurt()
半透明の一点鎖線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
下限指定をしたデータフレームのカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
ファイルを全部、読み込む	f.read()
入力ストリームから1文字読み込む	f.read(1)
線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
要素が全て1の配列	np.ones(要素数, dtype=np.int)
二次元タプルをフラット化する	sum(aTuple)
棒グラフの色をする	plt.bar(ラベル列, データ列, color=rgb)
option: スレートブルー色を使う	color = 'slateblue'
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
オプションで、標準出力に出力する	file = sys.stdout
空のリストを作る	[]
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
ビン数nを用いて配列をビン分割する	pd.cut(aArray, n)
リストを境界値として配列を分割する	pd.cut(aArray, aList)
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
日付時刻データの月数	aDatetime.month
ラインのラインスタイルを一点鎖線に指定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
日付時刻データにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
データフレームのあるカラムの値がx以下の行を抽出する	df[df['列A'] <= x]
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
日付データが日付データより早いか調べる	aDate < aDate2
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
データシリーズをタイムスタンプ型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームをCSVファイルを用いて保存する	df.to_csv('file.csv')
凡例を追記する	plt.legend(['凡例A', '凡例B'])
双方向キューをポップする	deq.pop()
折れ線グラフをミントクリーム色として描画する	plt.plot(データ列x, データ列y, color='mintcream')
指定した列の値で集計し、合計を算出する	df.groupby('列A').sum()
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
nが1もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
項目名が辞書に存在するかどうか調べる	key not in aDict
nマイナスn2	n - n2
オブジェクトのバイトサイズ	sys.getsizeof(obj)
ある列のカテゴリによってデータフレームをグループ化する	df.groupby('列A')
表データを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
ヒストグラムの色をシルバーに変更する	plt.hist(データ列, color='silver')
カーネル密度分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: グラフの色をダークターコイズに指定する	color = 'darkturquoise'
散布図のマーカーを△にする	plt.scatter(データ列x, データ列y, marker='^')
折れ線グラフの左三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
文字列を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
カテゴリで色分けして、に箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
縦棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
日付データをISO形式の文字列に変換する	aDate.isoformat()
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
文字列の接尾辞が部分文字列か確認する	s.endswith(sub)
文字列の無限なイテラブルを得る	itertools.repeat(element)
折れ線グラフをレベッカパープル色を使って描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
カウンタのユニオン演算する	aCounter | aCounter2
option: 印を大バツに変更する	marker = 'X'
線グラフの色をゲインズボロに指定する	plt.plot(データ列x, データ列y, color='gainsboro')
xを文字列にする	str(x)
データシリーズのNaNを平均で埋める	ds.fillna(ds.mean())
データフレームを千の位で丸めて整数にする	df.round(-3).astype(int)
異なる列をキーとしてデータフレームを右結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
文字列を文字リストにする	list(s)
集合から全ての要素を取り除く	aSet.clear()
option: グラフの色をチョコレートに指定する	color = 'chocolate'
本日の月数	datetime.datetime.today().month
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
折れ線グラフの大バツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
ハニーデュー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
標準入力から1行だけ読む	sys.stdin.readline()
データフレームの選択した列においてどの値が頻出か見る	df[['列A', '列B']].mode()
ヒストグラムをゲインズボロ色を用いて描画する	plt.hist(データ列, color='gainsboro')
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
ダークグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームの指定したカラムを10の位で丸める	df['列A'].round(-1)
option: グラフの色をカーキに設定する	color = 'khaki'
ファイルパスからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategray')
閾値としてバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
ある列の個数	df.groupby('列A').count()
データフレームの先頭100行	df.head(100)
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
行列の値を使う	aArray[行番号, 列番号]
ふたつの集合がセットと交わりを持たないか調べる	aSet.isdisjoint(aSet2)
nがn2未満、またはn3以上か確認する	n < n2 or n >= n3
リストの末尾の値	aList[-1]
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
option: マーカーを大バツに変更する	marker = 'X'
リストが空か調べる	len(aList) == 0
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
集合をイミュータブルなセットに変換する	frozenset(aSet)
option: インディゴを使う	color = 'indigo'
option: グラフの色をフクシアに指定する	color = 'fuchsia'
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
CSVファイルをn番目のカラムをインデックスとしてロードする	pd.read_csv('file.csv', index_col=n)
option: 改行コードをWindowsに変更する	newline = '\r\n'
データフレームの選択した列を小数点以下n桁で丸める	df[['列A', '列B']].round(n)
辞書を改行付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
値∈集合	element in aSet
option: 追加用に設定する	mode = 'a'
アンティークホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データシリーズの欠損値をxに設定する	ds.fillna(x)
option: 整数型を使う	dtype = np.int
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
フローラルホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='floralwhite')
option: ライトシアンにグラフの色を設定する	color = 'lightcyan'
カラーバーをつける	plt.colorbar()
安全に文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
xでデータフレームの欠損値を補う	df.fillna(x)
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
折れ線グラフをスノー色として描画する	plt.plot(データ列x, データ列y, color='snow')
折れ線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
数式の変数にnを代入する	e.subs(z, n)
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
option: ライトイエロー色を使う	color = 'lightyellow'
単位正方行列を作る	np.identity(n)
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
ファイル名の区切り記号	os.sep
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
散布図のマーカーを右三角印にする	plt.scatter(データ列x, データ列y, marker='>')
データフレームの未入力値を平均値に変更する	df.fillna(df.mean())
ダークバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='darkviolet')
列から両端キューを作る	collections.deque(iterable)
異なる列をキーとして２つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
線グラフの色をミディアムバイオレットレッドにセットする	plt.plot(データ列x, データ列y, color='mediumvioletred')
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
散布図をカーキ色として描画する	plt.scatter(データ列x, データ列y, color='khaki')
nは配列のどれかか調べる	n in aArray
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
オブジェクトはリストクラスか調べる	isinstance(obj, list)
データフレームの指定したカラムの未入力値を最大値で補完する	df['列A'].fillna(df['列A'].max())
本日をISO8601書式の文字列に変換する	datetime.datetime.today().isoformat()
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
n個にデータフレームの中の列を等量でビン分割する	pd.qcut(df[col], n)
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
折れ線グラフに赤い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
ゲインズボロ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
辞書にキーが存在しない時、要素を追加する	aDict.setdefault(key, element)
文字列の開始位置以降が部分文字列で始まるか	s.startswith(sub, start)
散布図の上三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
折れ線グラフの大バツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームをNaNを含めてある列の値でグループ化する	df.groupby('列A', dropna=False)
リストとリストについて散布図を描画して、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
アイボリー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
散布図のクロスマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
リストにオブジェクトを追加する	aList.append(element)
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
ヒストグラムをティール色で描画する	plt.hist(データ列, color='teal')
option: ロージーブラウン色を使用する	color = 'rosybrown'
rgbに横棒グラフの色をセットする	plt.barh(ラベル列, データ列, color=rgb)
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
ミディアムバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ドジャーブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
グラフを表示する	plt.show()
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
rgbの大バツマーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームの欠損値を前の値に設定する	df.fillna(method='ffill')
データフレームを表計算ファイルファイルで保存する	df.to_excel('file.xlsx')
文字列はリストに含まれるか調べる	element in aList
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
オプションで、ファイルを出力先にする	file = sys.open(filename, 'w')
rgbの▽マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
折れ線グラフをスチールブルー色を使って描画する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームから型リストで指定したデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
カウンタの要素一覧を使う	aCounter.keys()
折れ線グラフを一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
ファイル名がテキストファイル	filename.endswith('.txt')
データフレームをグループ化し、それぞれの平均値を算出する	df.groupby('列A').mean()
データフレームのある列を配列として抽出する	df['列A'].values
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
データフレームをある列によって並べる	df.sort_values(by='列A')
横棒グラフをミディアムバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
表データをグループ化し、ある列に対し分散を求める	df.groupby('列A')['列B'].var()
nの各桁の総和を求める	sum(map(int, str(n)))
線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームから列を三つのみ選択する	df[['列A', '列B', '列C']]
option: 印をバツに指定する	marker = 'x'
シャルトリューズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
ラインを赤い破線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
日付時刻データが土曜日かどうか	aDatetime.weekday() == 5
ミディアムオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
option: 色をスカイブルーに設定する	color = 'skyblue'
nがn2より小さいか調べる	n < n2
二つのデータフレームを横につなぐ	pd.concat([df, df2], axis=1)
ある列の値がxに等しく、かつ別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
数列とリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
ライトスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
option: マーカーを大バツに設定する	marker = 'X'
一点鎖線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームを整数に四捨五入する	df.round()
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
option: フォントの色をブラウンにセットする	color = 'brown'
rgbの大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
nをn2で割ったmodを求める	n % n2
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
option: 小麦色色を使用する	color = 'wheat'
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
データシリーズが何分か知る	ds.dt.minute
線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
データフレームを複数の列を用いて降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
データフレームをグループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
option: マーカーの色をバイオレットにする	markerfacecolor = 'violet'
日付データにn週間分、加える	aDate + datetime.timedelta(weeks=n)
rgbの△マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: 四角マーカーを描画する	marker = 's'
データフレームをまとめて小数点以下n桁で丸める	df.round(n)
棒グラフをパレットトルコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
データラベルをプロットの表示する	plt.legend()
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
ファイルを開いて]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
文字列を部分文字列によって分割する	s.split(sub)
データフレームのヒストグラムを縦横に並べて、プロットする	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
日付時刻データがタイムスタンプデータと同時	aDatetime == aDatetime2
option: マーカーの色をブラウンにする	markerfacecolor = 'brown'
散布図の色を淡い茶色にする	plt.scatter(データ列x, データ列y, color='tan')
タプルの中の一番小さい値を算出する	min(aTuple)
option: パレットトルコイズ色を使う	color = 'paleturquoise'
ロバストな線形分類器を準備する	model = sklearn.linear_model.HuberClassifier()
黄色にヒストグラムの色を設定する	plt.hist(データ列, color='yellow')
リストと配列の散布図をプロットして、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
文字列がタプルの要素でないか調べる	element not in aTuple
横棒グラフをシャルトリューズ色を用いて描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
シエナ色でヒストグラムを描画する	plt.hist(データ列, color='sienna')
option: ミッドナイトブルーを用いる	color = 'midnightblue'
点線にヒストグラムを設定する	plt.hist(データ列, linestyle='dotted')
複数行対応として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
紺碧色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: バイナリ書き込みモードを使う	mode = 'wb'
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
ミディアムスプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
浮動小数点数の逆双曲線余弦	math.acosh(x)
等しい量になるようにデータフレームの中の列を分割数nでビン分割する	pd.qcut(df[col], n)
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
英字を全て使う	string.ascii_letters
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
実行を異常終了する	sys.exit(1)
フローラルホワイト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
辞書の全項目をクリアする	aDict.clear()
折れ線グラフの色をホワイトスモークにセットする	plt.plot(データ列x, データ列y, color='whitesmoke')
option: リネンを使う	color = 'linen'
文字列を末尾から空白で区切る	s.rsplit()
ミディアムオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
配列とリストの散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームをグループ化し、最小値を計算する	df.groupby('列A').min()
文字列がリストに含まれないか調べる	element not in aList
データフレームの指定したカラムの欠損値を平均値で埋める	df['列A'].fillna(df['列A'].mean())
棒グラフをシーグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='seagreen')
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
データシリーズの値をValueMapで一度に置き換える	ds.replace(ValueMap)
パウダーブルー色でヒストグラムを描画する	plt.hist(データ列, color='powderblue')
日付データをn日前にする	aDate - datetime.timedelta(days=n)
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
濃いシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
数列と配列についての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
整数の並べ方の総数	math.perm(n)
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
option: 文字列をセパレータで使う	sep = s
データフレームの列の一覧	df.info()
option: グラフの色をプラムに設定する	color = 'plum'
データフレームをグループ化し、あるカラムに対し最大値を求める	df.groupby('列A')['列B'].max()
表データの名前リストで指定したカラムをドロップする	df.drop(columns, axis=1, inplace=True)
nをn2だけ増加させる	n += n2
データフレームを各グループ列ごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
リストと配列について散布図を描画し、、マーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
シエナ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
グラフを描画する準備をする	import matplotlib.pyplot as plt
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
文字列が文字列より辞書順で後	s > s2
データフレームのカラムのトリム分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
option: フォントの色をホワイトにする	color = 'white'
ファイルパスを読み込み用にオープンして]、fとする	f = open(filepath, mode='r')
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
データシリーズの値が未入力値か	ds.isna()
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
実数を十六進表記の文字列に変換する	x.hex()
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データ列の推移を半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
商と余りを同時に求める	divmod(x, y)
文字列を最後の部分文字列で二分し最初の文字列を使う	s.rpartition(sub)[0]
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
変数について数式を微分する	sympy.diff(e, z)
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームのある列を配列にする	df['列A'].values
目盛り線	plt.grid(alpha=0.5)
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
本日の年を見る	datetime.datetime.today().year
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgray')
整数nを2進表記に変換する	bin(n)
部分文字列を文字列の開始位置から終了位置まで探す	s.find(sub, start, end)
二つの集合の差集合を計算する	aSet.difference(aSet2)
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
指定した列のカテゴリで集計し、標準偏差を算出する	df.groupby('列A').std()
赤い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
行列の列ごとの最小	np.min(aArray, axis=0)
ヒストグラムの色をライトグリーンにセットする	plt.hist(データ列, color='lightseagreen')
ヒストグラムをピンク色として描画する	plt.hist(データ列, color='pink')
行列の要素数	aArray.size
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
赤色で数値をプリントする	print(f'\033[31m{value}\033[0m')
データフレームの列の一覧を見る	df.info()
データフレームの指定したカラムの分散	df['列A'].var()
ファイルパスの区切り記号を使う	os.sep
UNIX時間のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
部分文字列で部分文字列が始まるか調べる	s.startswith(sub)
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフの色をシアンにする	plt.plot(データ列x, データ列y, color='cyan')
データフレームの列を目的変数にする	目的変数 = df['列名']
イテラブルと配列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
プログラムの実行を異常停止する	sys.exit(1)
数字を全部使う	string.digits
データフレームをグループ化し、あるカラムの統計量を求める	df.groupby('列A').describe()['列B']
横棒グラフをダークオレンジ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkorange')
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
データフレームの中央値	df.median()
横棒プロットをプロットして、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
両端キューが空でないかどうか調べる	len(deq) != 0
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
データフレームをある列の値を用いて集計して、各グループごとの件数を知る	df.groupby('列A').size()
ブラック色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
数列間のケンドールの相関係数を算出する	scipy.stats.kendalltau(数列, 数列2)
黒い▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
rgbの四角マーカーを配列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: オレンジレッドにフォントの色を設定する	color = 'orangered'
コマンド引数のリストを得る	sys.argv[1:]
データフレームの選択したカラムの文字列をNaNに変換する	df[['列A', '列B']].replace(値, np.nan)
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
ゼロ埋めされたブール型の行列	np.zeros(要素数, dtype=np.int32)
デピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
モデルの残差を求める	目的変数 - model.predict(説明変数)
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
データフレームの選択したカラムの欠損値をxに設定する	df[['列A', '列B']].fillna(x)
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
ヒストグラムをダークブルー色で描画する	plt.hist(データ列, color='darkblue')
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
option: ダークグリーン色を使用する	color = 'darkgreen'
ヒストグラムの色をパールバイオレットレッドに指定する	plt.hist(データ列, color='palevioletred')
option: ピンクを使う	color = 'pink'
マップのキー一覧を得る	list(aDict)
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
２つの文字列をスラッシュで区切って出力する	print(value, value2, sep='/')
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
option: グラフの色をスラグレーに設定する	color = 'slategray'
数列とリストの散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
二つのデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
折れ線グラフの菱形マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
散布図に赤い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
nをn2倍にする	n *= n2
データフレームのカラムのトリム平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
文字列はタプルの要素でない	element not in aTuple
配列とリストについての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
グレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
n行をデータフレームからランダムに重複を認めてサンプリングする	df.sample(n, replace=True)
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightgreen')
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: バツマーカーを使う	marker = 'x'
リストと配列について散布図を描画して星マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストをn回、連結する	aList * n
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
紺色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
option: 文字コードをEUCに設定する	encoding = 'euc_jp'
アリスブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
xとyの商と余りを同時に求める	divmod(x, y)
文字列がタプルの要素	element in aTuple
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
データフレームのある列をリストとして抽出する	df['列A'].values.tolist()
線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
カテゴリ別で色分けしてデータフレームをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: タン色を使う	color = 'tan'
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
二つの文字列を辞書順で比較する	s < s2
option: グラフの色を青に変更する	color = 'blue'
カウンタの項目の出現回数	aCounter[element]
ファイルのベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ヒートマップを用いて混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
二つの文字列は同じかどうか調べる	s == s2
タプルのn番目のを求める	aTuple[n]
双方向キューの左にイテラブルの各値を追加する	deq.extendleft(iterable)
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
整数nを二進文字列に変換する	bin(n)[2:]
option: インディゴ色を使用する	color = 'indigo'
回帰分析をロバスト推定で行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
option: グラフの色を濃い青に設定する	color = 'darkblue'
箱ひげ図を使って数列を描画する	plt.boxplot(データ列)
縦棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
データフレームの選択したカラムの中央値を算出する	df[['列A', '列B']].median()
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
横棒グラフをライム色を用いて描画する	plt.barh(データ列x, データ列y, color='lime')
綺麗なグラフを描画する準備をする	import seaborn as sns
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
option: 黄色色を使う	color = 'yellow'
散布図に赤い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
カテゴリでグループ化して、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
日付時刻データの分数	aDatetime.minute
部分文字列を用いて文字列を区切る	s.split(sub)
数列の折れ線グラフを描画し、、色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
スクリプトのファイルの名前を知る	sys.argv[0]
貝殻色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
option: 色をオレンジに設定する	color = 'orange'
インディアンレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
貝殻色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
日付データが月曜日かどうか確認する	aDate.weekday() == 0
折れ線グラフに赤い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
散布図のマーカーを星印にする	plt.scatter(データ列x, データ列y, marker='*')
データフレームを丸めて、整数にする	df.round().astype(int)
グラフの色をパステル調にする	sns.set(pallete='pastel')
散布図に赤い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: クロス印を描画する	marker = 'x'
グリッドを実線にする	plt.grid(linestyle='solid')
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
option: ロイヤルブルー色を用いる	color = 'royalblue'
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
option: 切片を算出しない	fit_intercept = False
option: マーカーの色を珊瑚にする	markerfacecolor = 'coral'
折れ線グラフに四角マーカーを加える	plt.plot(データ列x, データ列y, marker='s')
線グラフをゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームの指定したデータ型の列名を列挙する	df.select_dtypes(型).columns
nの二乗	n ** 2
データフレームをグループ化し、あるカラムに対し最小値を求める	df.groupby('列A')['列B'].min()
実数の天井を求める	math.ceil(x)
両端キューが空でないか調べる	len(deq) != 0
データフレームの選択したカラムのNaNを最大値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
データフレームの指定したカラムを十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
黒い四角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
部分集合か調べる	aSet.issubset(aSet2)
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
option: 青紫にグラフの色を設定する	color = 'violet'
タプルのn番目からn2番目までの部分	aTuple[n:n2]
色名とカラーコードの対応表を見る	matplotlib.colors.cnames
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
文字列を最後の部分文字列で二つに区切って残りの文字列を使う	s.rpartition(sub)[-1]
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
実数を百の位で丸める	round(x, -2)
ライムグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
折れ線グラフにダイアモンド印を使う	plt.plot(データ列x, データ列y, marker='D')
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
二つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
データフレームの選択したカラムにおいてどの値が頻出か見る	df[['列A', '列B']].mode()
データフレームの中の列をビン数nを用いてビニングする	pd.cut(df[col], n)
ダークブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
二つの列を用いてデータフレームを昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
分類結果の偽陰性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ライトグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
タイムスタンプを使う	import time
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
コードポイントの最大値を知る	sys.maxunicode
クラス分類をバギングとしてする	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
データフレームから型の列を抽出する	df.select_dtypes(ty)
nがn2より小さい	n < n2
リストの推移を半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
散布図のクロスマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
折れ線グラフをカデットブルー色として描画する	plt.plot(データ列x, データ列y, color='cadetblue')
イテラブルを文字列リストに変換してカンマで連結する	','.join(map(str, iterable))
自分自身をモジュールとしてを得る	sys.modules[__name__]
データフレームを昇順に指定したカラムによってソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
折れ線グラフの色をパパイヤウィップに変更する	plt.plot(データ列x, データ列y, color='papayawhip')
PLSで回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームのあるカラムの曜日の名前	df['列A'].dt.weekday_name
実線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
EUCでファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
サンディーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
行列の列ごとの最小値を求める	np.min(aArray, axis=0)
最初のコマンド引数	sys.argv[1]
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
カテゴリ別で色付けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
両端キューをリストに変換する	list(deq)
グラフの描画で明るく色を用いる	sns.set(pallete='bright')
option: ドジャーブルー色を使う	color = 'dodgerblue'
year年を日付にする	datetime.date(year=year, month=1, day=1)
カラムが正規分布か仮説検定する	scipy.stats.shapiro(df['列A'])
白い線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
バツ印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
ヒストグラムの色をモカシンにする	plt.hist(データ列, color='moccasin')
数式の変数を数式で置き換える	e.subs(z, e2)
コマンド引数の一覧を得る	sys.argv[1:]
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
ヒストグラムの色をコーンズシルクにセットする	plt.hist(データ列, color='cornsilk')
option: シャルトリューズを使用する	color = 'chartreuse'
データフレームを指定した列によってまとめた表	df.groupby('列A')
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
横棒グラフを赤色を用いて描画する	plt.barh(データ列x, データ列y, color='red')
正規分布による累積分布関数の逆関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
バイオリン図を描く	sns.violinplot(x='カテゴリ列', y='列', data=df)
折れ線グラフの▽マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
データフレームのカテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
option: グラフの色をシルバーにする	color = 'silver'
円グラフで配列のパーセントを描画する	plt.pie(データ列, startangle=90)
文字列中に部分文字列が含まれるか調べる	sub in s
CSVファイルファイル名が	filename.endswith('.csv')
表データのあるカラムが何秒か見る	df['列A'].dt.second
リストとリストについて散布図を描き、、文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
散布図の右三角印を黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームのカラムの偏差値を求める	50 + 10 * scipy.stats.zscore(df['列A'])
散布図にrgbの三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ある列のカテゴリごとの個数	df.groupby('列A').count()
縦棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
線グラフの色をライトブルーに指定する	plt.plot(データ列x, データ列y, color='lightblue')
黒い四角マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
青紫色を用いてヒストグラムを描画する	plt.hist(データ列, color='violet')
実数を切り上げて整数に変換する	math.ceil(x)
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
リストと数列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームのある列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
実数の双曲線正接の逆数	math.atanh(x)
ヒストグラムとしてデータ列を描画する	plt.hist(データ列)
散布図をチョコレート色を用いて描画する	plt.scatter(データ列x, データ列y, color='chocolate')
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
実数の自然対数	math.log(x)
辞書に要素を項目名として加える	aDict[key] = element
レモンシフォン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
散布図をサドルブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
実数から整数を減算する	x - y
２つのデータフレームを横方向に結合する	pd.concat([df, df2], axis=1)
データフレームの中にあるの合計を調べる	df.isin([value]).sum()
データシリーズの秒	ds.dt.second
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
option: マーカーの太さを変更する	markeredgewidth = 2.5
本日が日曜日か	datetime.datetime.today().weekday() == 6
折れ線グラフの色を貝殻に指定する	plt.plot(データ列x, データ列y, color='seashell')
二つの文字列をカンマで区切って表示する	print(value, value2, sep=',')
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
二つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
option: グラフの色を貝殻に設定する	color = 'seashell'
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
option: シアンにグラフの色を設定する	color = 'cyan'
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
日付時刻データが日付時刻データと同時か	aDatetime == aDatetime2
ブルーバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
option: 大バツマーカーを使う	marker = 'X'
ミッドナイトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
タプルの末尾からn番目以前の部分を抽出する	aTuple[:-n]
縦棒グラフをパールバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='palevioletred')
データフレームの列名をリストで置き換える	df.columns = columns
ヒストグラムの色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
折れ線グラフを赤い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームのNaNを中央値に設定する	df.fillna(df.median())
キューが空でないか確認する	len(deq) != 0
散布図の▼マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
セットから任意の要素を取り出す	aSet.pop()
スクリプトファイルのパス	os.path.abspath(__file__)
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
リストからサンプリングする	random.sample(iterable)
文字列全体がパターンにASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
フクシア色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
データフレームの選択した列の代表値	df[['列A', '列B']].describe()
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
偽陰性を抑えたい指標を使用する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
双方向キューの最初の要素	deq[0]
淡い茶色色のヒストグラムを描画する	plt.hist(データ列, color='tan')
散布図をミディアムブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
option: 区切り記号を改行にする	sep = '\n'
ユニークな値を要素とする配列	np.unique(aArray)
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
マップの値の一覧を得る	aDict.values()
追加できるようにEUCでファイルをオープンする]	open(filepath, mode='a', encoding='euc_jp')
エクセルファイルからデータフレームをロードする	pd.read_excel('file.xlsx')
ブール型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int32)
データフレームの一部のカラムを100の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-2).astype(int)
ライトサーモン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
ケースを無視してパターンで文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
データをスケーリングする	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ダークグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
option: シャルトリューズ色を用いる	color = 'chartreuse'
文字列の先頭だけ大文字化する	s.capitalize()
文字列がリストの要素か調べる	element in aList
パレットトルコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
リストが空でないかどうか調べる	len(aList) != 0
データフレームを確認する	df.head()
データシリーズのNaNをxに設定する	ds.fillna(x)
ガウス過程分類モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
文字列の右側から空白を取り除く	s.rstrip(' ')
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
折れ線グラフのバツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
オリーブ色でヒストグラムを描画する	plt.hist(データ列, color='olive')
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ケンドールの相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
リストを逆さにする	reversed(aList)
データフレームをまとめて丸める	df.round()
無限に数え上げるする	itertools.count()
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
グラフに凡例を追記する	plt.legend(['凡例A', '凡例B'])
赤いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
文字列の開始位置から部分文字列を探す	s.find(sub, start)
ファイルパスをSJISとしてオープンする]	open(filepath, encoding='shift_jis')
ピーチパフ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
カラムの欠損値を直前の値に設定する	df['列A'].fillna(method='ffill')
ヒストグラムの色をペルーに指定する	plt.hist(データ列, color='peru')
標準入力を得る	sys.stdin
オブジェクトの属性の値を値に設定する	setattr(obj, プロパティ名, 値)
文字列を小文字に変換する	s.casefold()
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
縦棒グラフをミディアムスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
ヒストグラムをアイボリー色として描画する	plt.hist(データ列, color='ivory')
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
データシリーズの値はNaN	ds.isna()
プロットの色を濃くする	sns.set(pallete='deep')
タプルのn番目以降の部分を取り出す	aTuple[n:]
option: グラフの色をライトイエローに変更する	color = 'lightyellow'
タプルのコピー	dict(aDict)
黒い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
option: データ型として整数型を使う	dtype = np.int
ミントクリーム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
データシリーズの中に文字列があるか調べる	ds.isin([value])
rgbの下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: やわらかい青色を用いる	color = 'cornflowerblue'
データ列を用いる	import pandas as pd
ヒストグラムをレベッカパープル色として描画する	plt.hist(データ列, color='rebeccapurple')
ライトグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
文字列の先頭の空白を除く	s.lstrip()
辞書の浅いコピーを作る	aDict.copy()
option: グラフの色をゴールドに設定する	color = 'gold'
日付時刻データをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
２変数の最も小さい値を求める	min(x, y)
コーンズシルク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
第２コマンド引数を確認する	sys.argv[1]
option: カンマをセパレータで用いる	sep = ','
データフレームの中のカラムを等間隔でn個にビン分割する	pd.cut(df[col], n)
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
データフレームを２つの列によってソートする	df.sort_values(by=['列A', '列B'])
データフレームの選択したカラムの欠損値を平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
データフレームをある列によって小さい順にソートし、、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
カウンタから辞書を減らす	aCounter.subtract(aDict)
行列の標準偏差	np.std(aArray)
散布図のマーカーの大きさを変える	plt.scatter(データ列x, データ列y, markersize=2.0)
nがn2の倍数	n % n2 == 0
リストを番号付けする	enumerate(aList)
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
データフレームの全カラムを散布図で図示する	sns.pairplot(df)
線グラフをトマト色として描画する	plt.plot(データ列x, データ列y, color='tomato')
折れ線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
データフレームを各列毎にグループ化して文字列というグループの個数を計算する	df.groupby(column).size()[s]
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
折れ線グラフの色を黄色に指定する	plt.plot(データ列x, データ列y, color='yellow')
折れ線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
ライトイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
リストの末尾にリストを加え、拡張する	aList.extend(aList2)
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
ヒストグラムの色をプラムに指定する	plt.hist(データ列, color='plum')
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
ヒストグラムをディムグレー色を用いて描画する	plt.hist(データ列, color='dimgrey')
等間隔の配列	np.arange(開始値, 終了値, 等差)
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
プロット中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
データフレームの選択した列の欠損値を平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
印字可能な文字を全部見る	string.printable
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
option: スレートブルー色を使用する	color = 'slateblue'
ダークオレンジ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
option: グラフの色をパープルに変更する	color = 'purple'
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
nが2で割り切れないか調べる	n % 2 == 1
数字を全部見る	string.digits
ヒストグラムベースの勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.HistGradientBoostingClassifier()
ミッドナイトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
アルファベットの文字列	string.ascii_letters
スプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
分類モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
データフレームのあるカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
option: グラフの色を耐火レンガに変更する	color = 'firebrick'
入力ストリームから1文字、読み込む	f.read(1)
赤い大バツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
横棒グラフをオーキッド色を使って描画する	plt.barh(データ列x, データ列y, color='orchid')
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
16進文字列を整数にする	int(s, 16)
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
現在の時間数を使う	datetime.date.today().hour
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームを二つのカラムによってソートする	df.sort_values(by=['列A', '列B'])
rgbの丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: オリベドラブ色を使用する	color = 'olivedrab'
折れ線グラフをゴールド色を使って描画する	plt.plot(データ列x, データ列y, color='gold')
option: n番目のカラムをインデックスに変更する	index_col = n
行列の転置行列	aArray.T
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データ列とリストについて散布図をプロットし、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
散布図の下三角印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームを十の位で丸める	df.round(-1)
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
カウンタの項目のカウント	aCounter[element]
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
等量でビン数nとしてリストをビン分割する	pd.qcut(aList, n)
線グラフを黄色色を用いて描画する	plt.plot(データ列x, データ列y, color='yellow')
グラフのフォントを日本語に変更する	sns.set(font='IPAexGothic')
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
カテゴリで色分けして、データフレームの全カラムの相関を見る	sns.pairplot(df, hue='カテゴリ列')
option: マーカーをクロスに変更する	marker = 'x'
データフレームのあるカラムが何日か知る	df['列A'].dt.day
データフレームの一部のカラムの中にある文字列の合計を調べる	df[['列A', '列B']].isin([value]).sum()
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
文字列の先頭でパターンにASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
option: 耐火レンガを使う	color = 'firebrick'
データフレームの選択したカラムにおいてどの値が最も出現するか確認する	df[['列A', '列B']].mode()
小数点数の小数部	math.modf(x)[0]
オプションで、出力先をファイルに指定する	file = sys.open(filename, 'w')
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
ファイルが存在するか調べる	os.path.exists(filepath)
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
現在処理中の例外を情報	sys.exc_info()
辞書の項目名の値を得る	aDict[key]
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
nの各桁の総和	sum(map(int, str(n)))
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
データフレームを表示するとき、小数点以下の表示精度をする	pd.set_option('precision', n)
ファイルパスとfilenameを結合する	os.path.join(filepath, filename)
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
option: ターコイズにグラフの色を設定する	color = 'turquoise'
リストとリストについて散布図を描き、、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームのカラムをグループ化して、ヒストグラムでグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
散布図に黒い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
オブジェクトのメモリビューを見る	memoryview(obj)
日付データをn時間前にする	aDate - datetime.timedelta(hours=n)
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
新しいロッソ回帰モデルを用意する	model = sklearn.linear_model.Rosso(alpha=正則化項)
option: 色を青に指定する	color = 'blue'
ミディアムパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
セットを空にする	aSet.clear()
棒グラフをサーモン色として描画する	plt.bar(データ列x, データ列y, color='salmon')
リストの出力を改行しないで行う	print(value, end='')
辞書の値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
散布図をライトコーラル色として描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
縦棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
散布図をアリスブルー色として描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
JSONを使う	import json
データフレームの選択したカラムの欠損値を最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
データフレームを二つの列によってソートする	df.sort_values(by=['列A', '列B'])
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
文字列が正規表現にマッチさせる	re.match(pattern, s)
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
配列をビン分割する	pd.cut(aArray, aList)
ダークオレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
両端キューを用意する	collections.deque()
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
配列のn次モーメントを求める	scipy.stats.moment(配列, moment=n)
グリーンイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
配列と数列の散布図を描画してマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
リストを文字列リストに変換して、部分文字列でつなげる	sub.join(map(str, iterable))
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
プログラムの実行を異常止める	sys.exit(1)
データフレームの指定した列の中に文字列と日付データがいくつあるか求める	df['列A'].isin([value, value2]).sum()
option: NaNを無視しない	nan_policy = 'propagate'
下線付きで文字列をプリントする	print(f'\033[4m{value}\033[0m')
折れ線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
暗い赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
変数を太字にする	f'\033[1m{value}\033[0m'
小麦色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
データフレームの選択したカラムは正規分布からどの程度歪んでいるか調べる	df[['列A', '列B']].kurt()
スプリンググリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
十六進表記の文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
タプルの項目名の一覧	aDict.keys()
分割数nでデータフレームの中の列をビン分割する	pd.cut(df[col], n)
青いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
文字列を右側から部分文字列で区切る	s.rsplit(sub)
有理数を使用する	import fractions
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
rgbに横棒グラフの色を指定する	plt.barh(ラベル列, データ列, color=rgb)
線グラフをペルー色を使って描画する	plt.plot(データ列x, データ列y, color='peru')
ゴーストホワイト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
データフレームを表示するとき、折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
データフレームの重複していない行のみを抽出する	df[~ df.duplicated(keep=False)]
データフレームのあるカラムをdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
表データをある列の値でグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
データシリーズの中に文字列と文字列があるか調べる	ds.isin([value, value2])
二進文字列をバイナリにする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
データフレームの選択したカラムを千の位で丸める	df[['列A', '列B']].round(-3)
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
偽	False
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
棒グラフをリネン色として描画する	plt.bar(データ列x, データ列y, color='linen')
文字列がアルファベット	s.isalpha()
nが3で割り切れるかどうか調べる	n % 3 == 0
option: ライトスカイブルー色を使う	color = 'lightskyblue'
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
グラフに格子線を入れる	plt.grid(True)
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
エクセルファイルからCSVファイルをSJISでロードする	pd.read_csv('file.csv', encoding='shift_jis')
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
リストを縦軸リストを横軸として大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
数式の微分を算出する	sympy.diff(e)
数値のn階微分を求める	sympy.diff(e, z, n)
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
散布図をオレンジレッド色として描画する	plt.scatter(データ列x, データ列y, color='orangered')
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
データフレームをある列のカテゴリとして分類し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
nの3乗	n ** 3
ダークターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームを表示するときデータフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
データシリーズのSkewness	ds.skew()
紺碧色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
日付データが木曜日か確認する	aDate.weekday() == 3
option: 読み込まない列番号をnamesで指定する	skiprows = names
文字列が片仮名	('ァ' <= ch <= 'ン')
ゴールド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
nが3の倍数か調べる	n % 3 == 0
英字の大文字列	string.ascii_uppercase
散布図をポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
ダークブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームの欠損値を後の行の値で置き換える	df.fillna(method='bfill')
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
ヒストグラムを黒くする	plt.hist(データ列, color='k')
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
グラフ中のフォントを設定する	sns.set(font=フォント名)
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
実数に実数を加える	x + y
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
nとn2の値を足してnに代入する	n += n2
ダークスラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
リストの先頭の値を求める	aList[0]
データフレームの選択したカラムは正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
実行結果を下線付きにする	f'\033[4m{value}\033[0m'
ダークターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
option: ライトスレイグレーを用いる	color = 'lightslategray'
option: フォントの色をグレーに設定する	color = 'gray'
option: ボックスチャートを水平方向にする	vert = False
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
クラス分類をランダム性を強化したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
オールドレース色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
データフレームの選択したカラムを十の位で四捨五入して、整数にする	df[['列A', '列B']].round(-1).astype(int)
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
現在の秒数を求める	datetime.date.today().second
白色でヒストグラムを描画する	plt.hist(データ列, color='white')
option: シエナ色を使う	color = 'sienna'
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
データフレームを線形回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
折れ線グラフの▼マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: ブラック色を使う	color = 'black'
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
データフレームのあるカラムをダミー変数にする	pd.get_dummies(df['列A'])
データシリーズの下位25％	ds.quantile(0.75)
横棒グラフをプラム色として描画する	plt.barh(データ列x, データ列y, color='plum')
一番右側の列を外したデータフレームを使う	df[df.columns[:-1]]
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
ヒストグラムをホワイト色を用いて描画する	plt.hist(データ列, color='white')
データフレームをある列の値でグループ化し、要約統計量を求める	df.groupby('列A').describe()
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
リストと配列についての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
文字列の開始位置より後に部分文字列が含まれるか調べる	s.find(sub, start) != -1
option: フォントの色を淡いピンク色に設定する	color = 'lightpink'
nのn2乗	n ** n2
ヒストグラムをディープスカイブルー色を用いて描画する	plt.hist(データ列, color='deepskyblue')
サンディーブラウン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgray')
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
文字列は全て十進数字か調べる	s.isdecimal()
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
xの絶対値	abs(x)
横軸の目盛を対数に変更する	plt.xscale('log')
タプルから最後の項目をポップする	aDict.popitem()
データフレームを並べて、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
タプルの中の一番小さい値	min(aTuple)
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
ExcelファイルファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
オレンジ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
線グラフを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
option: フォントの色をビスクに設定する	color = 'bisque'
option: ディムグレーを使う	color = 'dimgray'
スチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='steelblue')
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
データフレームの選択したカラムを十の位で丸めて、整数にする	df[['列A', '列B']].round(-1).astype(int)
データフレームの中に文字列が含まれるか調べる	df.isin([value])
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
ある列の値がxより大きい行を抽出する	df[df['列A'] > x]
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
option: 色をダークカーキに変更する	color = 'darkkhaki'
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
rgbの三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
重複ありでn行をランダムにデータフレームからサンプリングする	df.sample(n, replace=True)
空の集合	set()
行列の列ごとの最大値	np.max(aArray, axis=0)
ヒストグラムを白色として描画する	plt.hist(データ列, color='white')
option: オレンジレッド色を使う	color = 'orangered'
option: ライトブルーを使う	color = 'lightblue'
列名を指定して二つのデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
ふたつの集合は集合と互いに素か	aSet.isdisjoint(aSet2)
xでデータシリーズの欠損値を補う	ds.fillna(x)
ミディアムブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
文字列が全て数字か	s.isdigit()
フクシアにヒストグラムの色を指定する	plt.hist(データ列, color='fuchsia')
文字列内にひとつでも大文字が含まれるか	any(c.isupper() for c in s)
リストとイテラブルについて散布図を描画し、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
指定した列のカテゴリで集計し、各平均値を求める	df.groupby('列A').mean()
データフレームの選択した列の相関行列をスピアマン順位相関係数で算出する	df[['列A', '列B']].corr(method='spearman')
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
折れ線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
option: グラフの色をアクアに変更する	color = 'aqua'
自然数最小公倍数	math.lcm(n, n2)
ヒストグラムの色をリネンに変更する	plt.hist(データ列, color='linen')
プロットの使途をポスターに設定する	sns.set(context='poster')
グラフの色テーマを濃くする	sns.set(pallete='deep')
青色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
option: フォントの色をダークオレンジに指定する	color = 'darkorange'
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
データフレームを散布図でグラフ化して、カテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
リストと配列の散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: ゲインズボロにグラフの色を設定する	color = 'gainsboro'
数式の数値を計算する	float(e)
データフレームの選択した列がどの程度、分散しているか見る	df[['列A', '列B']].var()
棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
パウダーブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
データフレームを10の位で四捨五入する	df.round(-1)
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
ローングリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データシリーズを丸めて整数型にする	ds.round().astype(int)
実数のtan	math.tan(x)
ケンドールの相関係数を計算する	scipy.stats.kendalltau(df['列A'], df['列B'])
横棒グラフをダークオリーブグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
保存するCSVファイルの小数点以下の桁数を指定する	df.to_csv('file.csv', float_format='%.3f')
実数の常用対数を求める	math.log10(x)
ファイルから1文字読む	f.read(1)
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
option: フォントの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
折れ線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
数値を青色化する	f'\033[34m{value}\033[0m'
option: シスル色を使う	color = 'thistle'
データフレームの相関行列を描画する	sns.heatmap(df.corr())
option: 色をパールバイオレットレッドに設定する	color = 'palevioletred'
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
数列とデータ列について散布図をプロットして、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
配列のユニークな要素ごとの出現回数	np.unique(aArray, return_counts=True)
八進数文字列を整数に変換する	int(s, 8)
グラフのパレットを明るくする	sns.set(pallete='bright')
ダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D')
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
ヒストグラムの色をライトイエローに変更する	plt.hist(データ列, color='lightyellow')
モデルの決定係数を算出する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
S-W検定を行う	scipy.stats.shapiro(配列)
折れ線グラフをダークシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
縦棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
ビン数nでデータフレームの中の列をビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
作画の縦横比を等しくする	plt.axis('equals')
タプルの最初のn要素を除く	aTuple[n:]
option: 改行コードを動作環境依存に変更する	newline = None
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
リストをn回連結する	aList * n
K-S検定を行う	scipy.stats.kstest(配列, 'norm')
データフレームの選択したカラムを小数点以下n桁で丸める	df[['列A', '列B']].round(n)
日付データからn秒を引く	aDate - datetime.timedelta(seconds=n)
散布図を黒い上三角マーカーで描く	plt.plot(データ列x, データ列y, marker='^', c='k')
ヒストグラムの色をライトブルーにセットする	plt.hist(データ列, color='lightblue')
データフレームのインデックスがnの行を抽出する	df.loc[n]
SJISで表計算ファイルファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
nが3で割り切れるか	n % 3 == 0
option: ポイント印を描画する	marker = '.'
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
ミディアムブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
赤い点線で数列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: フォントの色をダークカーキに設定する	color = 'darkkhaki'
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
イテラブルのコンビネーションを得る	itertools.combinations(iterable, n)
二つの変数をそれぞれ定義する	x, y = i, j
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
タイムスタンプデータからn秒分減算する	aDatetime - datetime.timedelta(seconds=n)
欠損値がある行を除く	df.dropna(inplace=True)
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
オブジェクトはリストクラスかどうか調べる	isinstance(obj, list)
リストとデータ列についての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
配列から1個ランダムに選ぶ	random.choice(iterable)
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
今日を文字列を用いてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
縦棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
データフレームの形状	df.shape
ヒストグラムをシスル色を用いて描画する	plt.hist(データ列, color='thistle')
データフレームの下10行を取り出す	df.tail(10)
文字列全体が正規表現にケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
２つの文字列を辞書順で比較する	s < s2
プラットホームの名前	sys.platform
文字列を部分文字列で二分する	s.partition(sub)
黒い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームをグループ化し、ある列に対し標準偏差を求める	df.groupby('列A')['列B'].std()
nが3の倍数かどうか確認する	n % 3 == 0
データフレームをソートして、新しい行を加える	df.sort_values('キーとなる列').reset_index()
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
空セット	set()
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
列を指定して重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
データフレームの列の歪度	df['列A'].kurt()
変数について数式の微分を行う	sympy.diff(e, z)
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
否定する	not n
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
散布図の丸マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
青いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
カラムの中央値	df['列A'].median()
フクシア色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
両端キューに要素をエンキューする	deq.appendleft(element)
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
文字列で区切って二つの文字列をプリントする	print(value, value2, sep=s)
データフレームを二つの列によってソートし、、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ホットピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
最小値でデータフレームの選択したカラムの欠損値を補う	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
教師データで分類モデルを学習する	model.fit(説明変数, 目的変数)
データシリーズの75パーセンタイル	ds.quantile(0.75)
散布図にrgbのポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームから重複した行を残さず消す	df.drop_duplicates(keep=False)
文字列を右寄せにする	s.rjust(文字列幅)
データフレームを昇順に2つの列によって並べる	df.sort_values(by=['列A', '列B'], ascending=True)
パープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
リストの要素数だけ繰り返す	range(len(aList))
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
値を白色でプリントする	print(f'\033[37m{value}\033[0m')
アクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='aquamarine')
標準入力から1行読み込む	sys.stdin.readline()
丸印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
文字列内にひとつでもアスキー文字が含まれるか	any(c.isascii() for c in s)
読み込みモードとしてファイルパスをオープンする]	open(filepath, mode='r')
折れ線グラフの△印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
文字列が全て数字	s.isdigit()
カテゴリ別で色付けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
replに正規表現patternで全部データフレームの値を置換する	df.replace(pattern, repl, regex=True)
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
現在の日付時刻	datetime.datetime.now()
リストとリストについての散布図にrgbの左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
組の要素を逆順にする	aTuple[::-1]
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
option: ペルー色を使う	color = 'peru'
ベクトルのユニークな要素を求める	np.unique(aArray)
カラムの幾何平均を求める	scipy.stats.gmean(df['列A'])
データフレームを配列に変換する	df.values
パステル調にカラーパレットをグラフの描画で使う	sns.set(pallete='pastel')
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
実数のバイナリ対数	math.log2(x)
データフレームの欠損値を後の行の値に設定する	df.fillna(method='bfill')
改行しないで変数をプリントする	print(value, end='')
データフレームのあるカラムのNaNを後の値で埋める	df['列A'].fillna(method='bfill')
白色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
xでデータシリーズの欠損値を埋める	ds.fillna(x)
データフレームのあるカラムが何秒か見る	df['列A'].dt.second
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
ライトスレイグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
カラーバーをプロットする	plt.colorbar()
アイボリー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ファイルをバイナリ用にオープンする]	open(filepath, mode='rb')
オブジェクトは整数クラスか調べる	isinstance(obj, int)
八進文字列をbytesizeバイトのバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
文字列の中の大文字・小文字を無視して正規表現による全マッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
パウダーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
タプルの値を関数に適用した結果でソートする	sorted(aTuple, key=func)
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
行列の行	aArray[行番号]
組の最後を取り除く	aTuple[:-1]
データフレームをグループ化し、最小値を求める	df.groupby('列A').min()
小麦色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
ボックスチャートにラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
カーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
イテラブルをイミュータブルなセットに変換する	frozenset(iterable)
ナバホホワイト色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
日付を使う	import datetime
シアン色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
黒い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
アヤメのデータセットからデータフレームをロードする	df = sns.load_dataset('iris')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
パラメータについて数値の微分を算出する	sympy.diff(e, z)
option: ダークゴールデンロッド色を使用する	color = 'darkgoldenrod'
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
行によって昇順にデータフレーム全体を並べる	df.sort_index(ascending=True)
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
nがn2より小さいかどうか調べる	n < n2
タイムスタンプデータからn分減算する	aDatetime - datetime.timedelta(minutes=n)
ゼロ埋めされた８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int8)
データフレームの選択したカラムを百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
文字列リストを結合し、ひとつの文字列にする	''.join(aStringList)
実行結果を白色でプリントする	print(f'\033[37m{value}\033[0m')
散布図に赤い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
nを切り捨てながらn2分の1にする	n //= n2
option: フォントの色をライトグレーに指定する	color = 'lightgrey'
数値の因数分解を行う	sympy.factor(e)
option: スラッシュをセパレータで使う	sep = '/'
リストのすべての要素をクリアにする	aList.clear()
現在が何分か知る	datetime.date.today().minute
散布図の星マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
文字列は漢字か	('\u4E00' <= ch <= '\u9FD0')
クリムゾン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
散布図のマーカーをクロス印にする	plt.scatter(データ列x, データ列y, marker='x')
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
データフレームのあるカラムの中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
ミディアムスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
option: 区切りをタブにする	sep = '\t'
option: シエナにフォントの色を設定する	color = 'sienna'
ビン数nでリストをビン分割する	pd.cut(aList, n)
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
逆余弦	math.acos(x)
データフレームの選択したカラムの値をValueMapで全部置き換える	df[['列A', '列B']].replace(ValueMap)
ロイヤルブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データシリーズの欠損値を直前の値で埋める	ds.fillna(method='ffill')
四分位数でデータ列をビン分割する	pd.qcut(ds, 4)
横棒グラフをグリーンイエロー色として描画する	plt.barh(データ列x, データ列y, color='greenyellow')
実線にヒストグラムの線種を設定する	plt.hist(データ列, linestyle='solid')
option: フローラルホワイトにフォントの色を設定する	color = 'floralwhite'
ライトスレイグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
まとめてValueMapで指定したカラムの値を置き換える	df['列A'].replace(ValueMap)
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
既存の配列を元にして全要素が1のベクトルを作る	np.ones_like(aArray)
option: データ型を指定する	dtype = bool
線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategrey')
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
折れ線グラフに黒い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
折れ線グラフの丸印の色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
リストを境界値としてリストをビン分割する	pd.cut(aList, aList)
option: グラフの色をリネンに指定する	color = 'linen'
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
文字列内にひとつでも英数字が含まれる	any(c.isalnum() for c in s)
オプションで、標準出力を使う	file = sys.stdout
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
データフレームの指定したカラムのNaNを最小値に設定する	df['列A'].fillna(df['列A'].min())
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
空のマップ	{}
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームを二つの列によってまとめたグループ	df.groupby(['列A', '列B'])
折れ線グラフの色をグリーンに指定する	plt.plot(データ列x, データ列y, color='green')
散布図を四角マーカーで描画する	plt.scatter(データ列x, データ列y, marker='s')
散布図にポイント印を使う	plt.scatter(データ列x, データ列y, marker='.')
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
青い丸印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
二つの変数をカンマで区切ってプリントする	print(value, value2, sep=',')
ビン数を設定して度数分布図を描画する	plt.hist(データ列, bins=区関数)
グラフの凡例を表示する	plt.legend()
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
データフレームの選択したカラムの代表値	df[['列A', '列B']].describe()
実数で浮動小数点数を割って、小数点以下を切り捨てる	x // y
色付きの破線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
整数nを2進文字列にする	bin(n)[2:]
左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<')
標準入力から入力される	input()
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
文字列の開始位置からと終了位置番目までの間に部分文字列が存在しない	s.find(sub, start, end) == -1
チョコレート色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
日付データは何曜日か知る	aDate.weekday()
option: 文字列を区切り記号で使う	sep = s
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
データフレームの列を度数分布図で描く	plt.hist(df[column])
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
ミディアムアクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ベクトルにはいくつ要素があるか調べる	aArray.size
データシリーズが何日か見る	ds.dt.day
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
データフレームの先頭100行	df.head(100)
散布図をブルーバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
数が正か調べる	x > 0
文字列の右側から空白を取り除く	s.rstrip()
option: オリベドラブにグラフの色を設定する	color = 'olivedrab'
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
データシリーズがどの程度、分散しているか見る	ds.var()
グラフのy座標の軸ラベルをuntitledに指定する	plt.ylabel('y軸ラベル')
２つのデータフレームを横方向にマージする	pd.merge(df, df2)
データフレームのカラムの値が欠損値かどうか判定する	df['列A'].isna()
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
nにn2を加える	n + n2
文字列中の部分文字列の登場	s.count(sub)
リストと配列の散布図を描画し、、マーカーをダイアモンドに変更する	plt.plot(データ列x, データ列y, marker='D')
osモジュールをインポートする	import os
リストとリストについて散布図を描画して左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
nがn2以下、それか、n3以上	n <= n2 or n >= n3
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
縦棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
option: 行を自動的な連番に設定する	index_col = None
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
データフレームの指定したカラムの欠損値を数値で埋める	df['列A'].fillna(x)
折れ線グラフをダークゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: 文字列の示すエンコーディングを使う	encoding = s
あるカラムにリストの値が含まれる行を抽出する	df[df['列A'].isin(リスト)]
データフレームを二つの列ごとにグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
数式を数値に変換する	float(e)
option: グラフの色を小麦色に変更する	color = 'wheat'
イテラブルの各要素を関数でフィルタする	map(func, iterable)
データフレームを散布図で描画してカテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ミディアムシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
折れ線グラフの色をロージーブラウンに指定する	plt.plot(データ列x, データ列y, color='rosybrown')
折れ線グラフの右三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ネイビー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
あるカラムの値ごとの最小値	df.groupby('列A').min()
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
option: 追加モードを使用する	mode = 'a'
データシリーズの代表値	ds.describe()
棒グラフの色をブラウンにする	plt.bar(データ列x, データ列y, color='brown')
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
mathを使用する	import math
ミントクリーム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
散布図をリネン色を用いて描画する	plt.scatter(データ列x, データ列y, color='linen')
データフレームの平均と信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
option: 白を用いる	color = 'white'
大文字・小文字を無視してパターンに文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
rgbの四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
散布図に黒い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='k')
分類モデル教師データとしてを学習する	model.fit(説明変数, 目的変数)
文字列をISO書式で日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
マッピングからキーの値かもしくは要素を得る	aDict.get(key, element)
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
文字列の右端から空白を取り除く	s.rstrip(' ')
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームの指定した列の空文字をドロップする	df['列A'].replace('', np.nan).dropna()
SDGで回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
多次元データを多次元尺度構成法でパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
スピアマン順位相関係数としてデータフレームの選択したカラムの相関行列を求める	df[['列A', '列B']].corr(method='spearman')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
配列とデータ列についての散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
nがn2よりも小さいか確認する	n < n2
黒いダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
データフレームからn行をランダムに選択する	df.sample(n)
ホールドアウト法を使用する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
データフレームをCSVファイルで保存する	df.to_csv('file.csv')
回帰分析を勾配ブースティングとして行う	model = sklearn.ensemble.GradientBoostingRegressor()
文字列を空白で区切って、文字列リストに変換する	s.split()
折れ線グラフのラベルを指定する	plt.plot(データ列x, データ列y, label='ラベル')
データフレームのあるカラムを抽出する	df['列A']
実数の３乗	x ** 3
数値のパラメータにnを代入する	e.subs(z, n)
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
n2がnより大きく、かつ、n3未満か確認する	n < n2 and n2 < n3
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームを表示するときヘッダー行を右寄せに指定する	pd.set_option('colheader_justify', 'right')
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
タイムスタンプデータをエポック秒に変換する	aDatetime.timestamp()
双方向キューの末尾	deq[-1]
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
ヒストグラムの色をアリスブルーに指定する	plt.hist(データ列, color='aliceblue')
外れ値を除いたデータフレームのカラムの分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
nがn2と等しいか調べる	n == n2
ユーザから入力される	int(input())
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
横棒グラフをオーキッド色として描画する	plt.barh(データ列x, データ列y, color='orchid')
列から重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
サーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
option: パープル色を用いる	color = 'purple'
nが正の整数か調べる	n > 0
データフレームの列の文字列長を列として使う	df[col].str.len()
丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o')
線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
平均線付き箱髭図を描く	plt.boxplot(データ列, meanline=True)
データフレームからランダムに10行を取り出す	df.sample(10)
散布図をナバホホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
文字列をゼロ埋めする	s.zfill(文字列幅)
option: グラフの色をダークグレーに変更する	color = 'darkgrey'
入力から２つの文字値を読む	A, B = map(str, input().split())
rgbのダイアモンドマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
書き出すCSVファイルの小数点以下の桁数を指定する	df.to_csv('file.csv', float_format='%.3f')
タプルのn番目のを使う	aTuple[n]
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
データ列の推移を半透明の点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
option: 印を星に変更する	marker = '*'
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
データフレームを表示するとき、行数をnに設定する	pd.set_option('display.max_rows', n)
散布図の右三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
折れ線グラフの色をミディアムブルーに変更する	plt.plot(データ列x, データ列y, color='mediumblue')
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
プロットで使うx軸の軸ラベルをセットする	plt.xlabel('x軸ラベル')
データフレームを10の位で四捨五入して、整数型にする	df.round(-1).astype(int)
シート名を指定してエクセルからデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
散布図の下三角マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
ライトコーラル色でヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
nが無限に続く数列を得る	itertools.repeat(n)
option: フォントの色をダークグレーに設定する	color = 'darkgrey'
文字列がリストの要素	element in aList
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
option: レベッカパープルを使う	color = 'rebeccapurple'
データフレームをグループ化しあるカラムに対し最大値を求める	df.groupby('列A')['列B'].max()
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
組を小さい方から並べる	sorted(aTuple, reverse=True)
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
ライトコーラル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
データフレームのある列をNaNも加えてダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
リストと数列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
折れ線グラフに青い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
option: シャルトリューズを使う	color = 'chartreuse'
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
データフレームのn番目の行を抽出する	df.loc[n]
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
書き込み用にファイルをEUCでオープンする]	open(filepath, mode='w', encoding='euc_jp')
文字列の長さ	len(s)
イテラブルをダミー変数にする	pd.get_dummies(iterable)
カウンタの和集合演算する	aCounter | aCounter2
ファイルパスをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
整数nの8進数表現	oct(n)
データフレームの指定したカラムの欠損値を平均値に変更する	df['列A'].fillna(df['列A'].mean())
グリーンにヒストグラムの色を設定する	plt.hist(データ列, color='green')
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
リストとリストについて散布図を描き、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
option: グラフの色をオリベドラブに変更する	color = 'olivedrab'
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
インデント幅nで、辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
オブジェクトは辞書か	isinstance(obj, dict)
集合を変更不能な集合に変換する	frozenset(aSet)
折れ線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgreen')
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
データフレームの選択したカラムの欠損値を平均で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
両端キューの末尾に要素を追加する	deq.append(element)
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
分類結果の適合率と再現率の調和平均を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
option: 濃いシアンにグラフの色を設定する	color = 'darkcyan'
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
両端キューをデキューする	deq.popleft()
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
タプルの中の一番小さい値を求める	min(aTuple)
グラフのパレットを暗くする	sns.set(pallete='dark')
ある列のカテゴリごとの最小値	df.groupby('列A').min()
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
二つの文字列を改行せず表示する	print(value, value2, end='')
実行環境がLinuxか判定する	sys.platform.startswith('linux')
実数を二乗する	x ** 2
ヒストグラムを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
カウンタの項目数を使う	len(aCounter)
三変数の最小値	min(x, y, z)
スタックの先頭に要素を入れる	deq.appendleft(element)
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
データフレームのあるカラムが何年か知る	df['列A'].dt.year
データフレームから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
フォレストグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
クラスのサブ型か調べる	issubclass(サブクラス, クラス)
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
数式を変数について微分する	sympy.diff(e, z)
日付データの曜日を整数で見る	aDate.weekday()
文字列の両端から余分な空白を取り除く	s.strip()
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
文字列中から部分文字列を探す	s.find(sub)
異なるカラムをキーとしてデータフレームを結合する	pd.merge(df, df2, left_on='列A', right_on='列B')
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
指定したカラムの空文字を未入力値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
option: ディムグレー色を用いる	color = 'dimgray'
数式を微分する	sympy.diff(e)
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
グラフのデータラベルの位置を指定する	plt.legend(loc=(x, y))
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
リストから最大長nの双方向キューを生成する	collections.deque(iterable, maxlen=n)
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
option: フォントの色をティールに設定する	color = 'teal'
現在の再帰の最大回数	sys.getrecursionlimit()
横棒グラフをダークサーモン色として描画する	plt.barh(データ列x, データ列y, color='darksalmon')
イテラブルから1個ランダムに選ぶ	random.choice(iterable)
整数nがタプルのどれか	n in aTuple
散布図を青色を用いて描画する	plt.scatter(データ列x, データ列y, color='blue')
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
グラフの使途をプレゼンてションに設定する	sns.set(context='talk')
ディープスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
散布図の印を青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
プロットの色を色差別なくする	sns.set(pallete='colorblind')
データフレームを二つの列でまとめた表	df.groupby(['列A', '列B'])
配列をダミー変数に変換する	pd.get_dummies(配列)
文字列を左寄せにする	s.ljust(文字列幅)
ダイアモンド印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
両端キュー中の要素のインデックス	deq.index(element)
数列とデータ列の散布図を描画して、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
画像ファイルとしてプロットを保存する	plt.savefig('foo.png')
filepathに現在の作業ディレクトリを設定する	os.chdir(os.dirname(filepath))
２次元リストをフラット化する	sum(aList)
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
rgbの丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
TSVファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
散布図をrgbの丸マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフに赤い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
TSVファイルをロードする	pd.read_csv('file.tsv', sep='\t')
キューが空か	len(deq) == 0
マルーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
上限長を指定して、両端キュー	collections.deque(maxlen=n)
縦棒グラフをサドルブラウン色として描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
データシリーズの最頻値	ds.mode()
多次元データを主成分分析を用いて淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
option: ヘッダを連番に設定する	header = None
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
nがn2以下か調べる	n <= n2
データフレームの列の各データ値の出現数	df[col].value_counts()
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
二つの変数を同じ値にする	x = y = n
標準出力がパイプか確認する	not sys.stdout.isatty()
入力から二つの浮動小数数を読み込む	A, B = map(float, input().split())
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
横棒グラフを深紅色として描画する	plt.barh(データ列x, データ列y, color='crimson')
散布図をパパイヤウィップ色を使って描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
データフレームから一つの列を抽出する	df[['列A']]
データフレームのあるカラムのタイムゾーンをセットする	df['列A'].tz_convert('Asia/Tokyo')
データフレームから重複ありでランダムに10行をサンプリングする	df.sample(10, replace=True)
黒い上三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
option: フォントの色をダークスレートブルーに設定する	color = 'darkslateblue'
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
線グラフの色をフォレストグリーンに指定する	plt.plot(データ列x, データ列y, color='forestgreen')
カウンタをイテラブルで更新する	aCounter.update(iterable)
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
散布図に赤い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
ヒストグラムを点線で描く	plt.hist(データ列, linestyle='dotted')
実数が負の数か確認する	x < 0
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
option: グラフの色をグレーに設定する	color = 'grey'
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
ベージュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
カテゴリで色分けして、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
リストと配列について散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
組を逆順にする	reversed(aTuple)
正規表現で文字列を区切る	re.split(pattern, s)
データ列の折れ線プロットを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
ダークシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
イテラブルを無限に繰り返す	itertools.cycle(iterable)
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
文字列はタイトルケース	s.istitle()
マゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
列の最大幅をnに変更する	pd.set_option('max_colwidth', n)
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
貝殻色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
データフレームをある列でグループ化して、それぞれのグループの件数を知る	df.groupby('列A').size()
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
タプルの最初を使う	aTuple[0]
列を等量でビン数nとしてビン分割する	pd.qcut(ds, n)
ダークシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
折れ線グラフに青い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
縦横の比率を等しくする	plt.axis('equals')
実数の正接を求める	math.tan(x)
パターンにマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
箱髭図を二つ並べて描画する	plt.boxplot([データ列, データ列])
タプルをnから番号付けする	enumerate(aTuple, start=n)
データフレームの一部のカラムの値が欠損値か調べる	df[['列A', '列B']].isna()
データフレームから列を三つ選択する	df[['列A', '列B', '列C']]
折れ線グラフの色を濃い青に設定する	plt.plot(データ列x, データ列y, color='darkblue')
左三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
リストとイテラブルについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
黒いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
タイムスタンプデータと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
ベクトルの形状を使う	aArray.shape
配列の平均値	np.mean(aArray)
ベージュ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
配列の行ごとの合計値を求める	np.sum(aArray, axis=1)
入力から２つの実数を読む	A, B = map(float, input().split())
数値を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
JSON形式の文字列をデータにする	json.loads(jsonString)
データフレームのカテゴリデータをダミー変数にする	pd.get_dummies(df)
縦棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
ライトコーラル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
空白で文字列を分割して、整数リストに変換する	map(int, s.split())
縦棒グラフを描く	plt.bar(ラベル列, データ列)
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
部分文字列で文字列が終了する	s.endswith(sub)
散布図に三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
データフレームの指定したカラムを千の位で四捨五入する	df['列A'].round(-3)
でデータフレームの相関行列を求める	df.corr(method='kendall')
あるカラムの中に存在する文字列との合計をカウントする	df['列A'].isin([value, value2]).sum()
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
文字列中の部分文字列を数える	s.count(sub)
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
nとn2の論理積	n & n2
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
やわらかい青色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
リストをひとつ置きに取り出す	aList[::2]
十六進数文字列をバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
オブジェクトをイテラブルに変換する	iter(obj)
データシリーズを100の位で丸めて、整数型にする	ds.round(-2).astype(int)
データフレームから型リストで指定したデータ型の列を抽出する	df.select_dtypes(include=typeList)
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
データフレームを100の位で丸めて、整数にする	df.round(-2).astype(int)
第二コマンド引数	sys.argv[1]
配列とリストの散布図を描いて、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ファイル名がCSVファイルか判定する	filename.endswith('.csv')
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
ファイルパスから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
タイムスタンプデータからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
xの小数点以下'4'桁までプリントする	print(':.4f'.format(x))
option: 色をゴーストホワイトに変更する	color = 'ghostwhite'
ひとつでも非空白が文字列中に含まれるかどうか調べる	any(not c.isspace() for c in s)
カテゴリデータ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
双方向キューの先頭	deq[0]
黒い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データシリーズは何分か調べる	ds.dt.minute
option: シスル色を用いる	color = 'thistle'
散布図をダークシアン色として描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
折れ線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
データフレームのあるカラムの曜日は何日目か見る	df['列A'].dt.dayofweek
文字列を空白によって分割し、、整数リストに変換する	map(int, s.split())
ヒストグラムをライトイエロー色を使って描画する	plt.hist(データ列, color='lightyellow')
ディープスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
パープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
配列をダミー変数にする	pd.get_dummies(配列)
ふたつの集合の差集合	aSet.difference(aSet2)
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
アイボリー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
フォーマットを用いてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
文字列が全て小文字か調べる	s.islower()
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
グラフで用いるy軸にラベルを付ける	plt.ylabel('y軸ラベル')
実数がNaNか調べる	math.isnan(x)
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
ファイルパスのファイル名	os.path.basename(filepath)
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
配列のケンドールの相関係数	scipy.stats.kendalltau(配列, 配列2)
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
縦軸の目盛を対数に変更する	plt.yscale('log')
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームの一部の列の欠損値をxで補う	df[['列A', '列B']].fillna(x)
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
赤い点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
文字列をセパレータで区切って、文字列リストに変換する	s.split(sub)
小数点数の整数部を求める	math.modf(x)[1]
赤い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
タプルをひとつ置きに抽出する	aTuple[::2]
2つの列ごとにデータフレームをグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
インディアンレッドにヒストグラムの色を設定する	plt.hist(データ列, color='indianred')
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
イエローグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
ヒストグラムの色をクリムゾンにセットする	plt.hist(データ列, color='crimson')
ダークオレンジ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: ホットピンクを使う	color = 'hotpink'
nからn2までのひとつ飛ばしの整数リストを作る	list(range(n, n2+1, 2))
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
双方向キュー中の要素の位置	deq.index(element)
入力から２つの整数を読む	A, B = map(int, input().split())
タプルをリバースする	reversed(aTuple)
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
表データをグループ化しある列に対し平均値を求める	df.groupby('列A')['列B'].mean()
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
イテラブルから多重集合を作る	collections.Counter(iterable)
集合が空集合	len(aSet) == 0
ゲインズボロ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
棒グラフをシャルトリューズ色を用いて描画する	plt.bar(データ列x, データ列y, color='chartreuse')
濃い青色としてヒストグラムを描画する	plt.hist(データ列, color='darkblue')
大文字を全部使う	string.ascii_uppercase
百分率付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ダークグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
ヒストグラムをミディアムスレートブルー色を用いて描画する	plt.hist(データ列, color='mediumslateblue')
データフレームをある列の値でグループ化し要約統計量を計算する	df.groupby('列A').describe()
全シートを表計算から読み込む	pd.read_excel('file.xlsx', sheet_name=None)
変数について数値を積分する	sympy.integrate(e, z)
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
ヒストグラムの色を淡いピンク色に変更する	plt.hist(データ列, color='lightpink')
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
やわらかい青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
本日をタプルに変換する	datetime.datetime.today().timetuple()
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
リストと数列の散布図をプロットしてマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
ひとつでも非空白が文字列中に含まれる	any(not c.isspace() for c in s)
option: 左三角マーカーを使用する	marker = '<'
値をキューにプッシュする	deq.append(element)
イテラブルを文字列リストに変換してタブによって連結する	'\t'.join(map(str, iterable))
ヒストグラムと勾配ブースティングを使ってクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
円グラフの特定の要素だけ目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
year年day月のタイムスタンプ	datetime.datetime(year=year, month=month, day=1)
option: ブランチドアーモンド色を使用する	color = 'blanchedalmond'
棒グラフを青色として描画する	plt.bar(データ列x, データ列y, color='blue')
option: フォントの色をパープルに設定する	color = 'purple'
パールバイオレットレッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
データフレームの指定したカラムの標準偏差	df['列A'].std()
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
横棒グラフをダークレッド色を使って描画する	plt.barh(データ列x, データ列y, color='darkred')
文字列を黄色にする	f'\033[33m{value}\033[0m'
ベージュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
データフレームをソートして、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
option: ダークマゼンタにフォントの色を設定する	color = 'darkmagenta'
データフレームの一部のカラムの中に文字列がある	df[['列A', '列B']].isin([value])
データフレームのある列を配列に変換する	df['列A'].values
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
文字列の開始位置より後に部分文字列が存在するかどうか	s.find(sub, start) != -1
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
ヒストグラムを描画して、半透明化にする	plt.hist(データ列x, alpha=0.5)
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
横向きに二つのデータフレームをマージする	pd.merge(df, df2)
データフレームのカラムの分位数	df['列A'].quantile(パーセント/100)
日付時刻データは日付時刻データと同時か調べる	aDatetime == aDatetime2
option: 列方向に処理する	axis = 0
タプルとタプルを加える	aTuple + aTuple2
散布図に左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
文字列が全て十進数字かどうか調べる	s.isdecimal()
散布図をミスティローズ色として描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
文字列リストを連結し、一つの文字列にする	''.join(aStringList)
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
縦棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
ファイルパスをバイナリ書き込みモードとして開いて]、fとする	f = open(filepath, mode='wb')
ロードされたモジュールのリストを知る	sys.modules
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
配列の幾何平均を計算する	scipy.stats.gmean(配列)
シャルトリューズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
折れ線グラフの色をラベンダーブラッシュにする	plt.plot(データ列x, データ列y, color='lavenderblush')
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
option: 配列のデータ型を指定する	dtype = np.int
折れ線グラフの色をスノーに指定する	plt.plot(データ列x, データ列y, color='snow')
箱ひげ図をプロットし、、平均を加える	plt.boxplot(データ列, showmeans=True)
ダークオレンジにヒストグラムの色をセットする	plt.hist(データ列, color='darkorange')
散布図の色をティールにする	plt.scatter(データ列x, データ列y, color='teal')
5行をデータフレームから重複ありでランダムにサンプリングする	df.sample(5, replace=True)
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
真紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
nがn2か確認する	n == n2
ゴールドにヒストグラムの色を指定する	plt.hist(データ列, color='gold')
前の値で指定したカラムの欠損値を埋める	df['列A'].fillna(method='ffill')
表計算からシートを指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
折れ線グラフに赤いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
横棒グラフをゲインズボロ色として描画する	plt.barh(データ列x, データ列y, color='gainsboro')
部分文字列が部分文字列で始まる	s.startswith(sub)
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図のダイアモンド印を赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgrey')
変数が0に近づく時、数値の極限値を求める	sympy.limit(e, z, 0)
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
赤い▽マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
文字列の両端から部分文字列を消す	s.strip(sub)
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
縦棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
プラットホームがMacOSかどうか調べる	sys.platform.startswith('darwin')
ヒストグラムの色をスカイブルーに変更する	plt.hist(データ列, color='skyblue')
マゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
０で全要素を初期化した符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
ふたつの集合のユニオン	aSet.union(aSet2)
３つの変数を順にプリントする	print(value, value2, value3)
option: グラフの種類を一点鎖線に指定する	linestyle = 'dashbot'
ホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
辞書に辞書の項目を更新する	aDict.update(aDict2)
nプラスn2	n + n2
option: 白色を使う	color = 'white'
predicateFuncが真となるシーケンスの要素を得る	itertools.takewhile(predicateFunc, iterable)
option: 色をネイビーに指定する	color = 'navy'
ある列の値ごとの最大値	df.groupby('列A').max()
散布図のダイアモンドマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
折れ線グラフをトマト色として描画する	plt.plot(データ列x, データ列y, color='tomato')
書式をマッピングでフォーマットする	formatText.format_map(aDict)
日付データが火曜日か調べる	aDate.weekday() == 1
ダークカーキにヒストグラムの色を変更する	plt.hist(データ列, color='darkkhaki')
青いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
option: ライムグリーンに色を指定する	color = 'limegreen'
データフレームを2つの列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
ビスク色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
指定した列のカテゴリで集計し、それぞれの分散を求める	df.groupby('列A').var()
リストから文字列を捨てる	aList.remove(element)
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
option: フクシア色を使う	color = 'fuchsia'
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレーム中の未入力値を除いてみる	df.dropna()
タプルをn回、連結する	aTuple * n
データフレームのある列を最初のカテゴリーを無視してダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
等間隔でn個にリストをビン分割する	pd.cut(aList, n)
データシリーズのタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
データフレームの指定した列の記述統計量を算出する	df['列A'].describe()
データフレームをグループ化し、ある列の要約統計量を求める	df.groupby('列A').describe()['列B']
アンティークホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
文字列リストにシーケンスを変換して、カンマで連結する	','.join(map(str, iterable))
ラベンダーブラッシュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
nが5の倍数かどうか調べる	n % 5 == 0
リストが空かどうか確認する	len(aList) == 0
線グラフの色をダークスレートブルーにセットする	plt.plot(データ列x, データ列y, color='darkslateblue')
組の長さ	len(aTuple)
線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
システム時刻で乱数を初期化する	random.seed()
数式を簡単にする	sympy.sympify(e)
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
散布図に青い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
データフレームの指定した列の欠損値を最大値で置換する	df['列A'].fillna(df['列A'].max())
nが-9以上9以下	-9 <= n <= 9
ヒストグラムを淡い茶色色で描画する	plt.hist(データ列, color='tan')
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
ファイルを読み込み用にオープンして]、fとする	f = open(filepath, mode='r')
真サブセット	aSet < aSet2
グラフをポスター用に設定する	sns.set(context='poster')
option: グラフの色を青紫に設定する	color = 'violet'
データ列の折れ線グラフをダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D')
option: フォントの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
y座標の目盛りを対数に変更する	plt.yscale('log')
ヒストグラムをダークオレンジ色として描画する	plt.hist(データ列, color='darkorange')
３数の最大値を求める	max(x, y, z)
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
option: 線の種類を破線にする	linestyle = 'dashed'
散布図をミディアムバイオレットレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
シャルトリューズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
option: アリスブルー色を使う	color = 'aliceblue'
濃い青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
ヒストグラムの色をダークスラテグレーに指定する	plt.hist(データ列, color='darkslategray')
折れ線グラフのクロスマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
rgbのポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
赤い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの指定したカラムの欠損値を直後の値に設定する	df['列A'].fillna(method='bfill')
option: ライトスレイグレーにグラフの色をする	color = 'lightslategray'
option: 欠損値は無視する	dropna = True
option: 紺碧色を使う	color = 'azure'
option: バイオレット色を使う	color = 'violet'
データフレームを並べ、、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
マップのキーを要素に設定する	aDict[key] = element
要素は集合の要素	element in aSet
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
行列積	np.matmul(aArray, aArray2)
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
辞書を階層化する	collections.ChainMap(aDict)
プログラムの実行を異常終える	sys.exit(1)
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
入力ストリーム全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
日付時刻データにn日を加算する	aDatetime + datetime.timedelta(days=n)
下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
option: ラベンダー色を使う	color = 'lavender'
０で全要素を初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
指定したカラムの統計量を見る	df['列A'].describe()
option: 改行なし	end = ''
データフレームの選択したカラムの不偏標準偏差	df[['列A', '列B']].std()
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategray')
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
長さnのリストを得る	[0] * n
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
各グループごとにグループ化してデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
カウンタ同士で積集合演算する	aCounter & aCounter2
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
マッピングをJSON形式のインデント幅nの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
データフレームの選択したカラムの未入力値を前の値で補う	df[['列A', '列B']].fillna(method='ffill')
option: 深さを制限する	maxdepth = n
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
オブジェクトは数値かテストする	isinstance(obj, (int,float))
散布図を星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*')
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
日付データからn秒分減算する	aDate - datetime.timedelta(seconds=n)
データフレームのカラムの平均	df['列A'].mean()
itertoolsモジュールをインポートする	import itertools
データフレームを横方向に結合する	pd.concat([df, df2], axis=1)
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
配列の分散を求める	np.var(aArray)
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
入力から二つの文字列を読み込む	A, B = map(str, input().split())
範囲を指定して乱数を求める	random.randint(最小値, 最大値)
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
データフレームの中に日付データとが含まれるか調べる	df.isin([value, value2])
文字列にイテラブルを変換して、タブによって連結する	'\t'.join(map(str, iterable))
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
データシリーズを小数点以下n桁で四捨五入する	ds.round(n)
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
時計回りに円プロットを描く	plt.pie(データ列, startangle=90, counterclock=False)
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
データフレームの指定したカラムの欠損値をメディアンに指定する	df['列A'].fillna(df['列A'].median())
横棒グラフをブランチドアーモンド色として描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
外れ値を除いた配列の分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
ゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
最大長を指定して双方向キューを作る	collections.deque(maxlen=n)
日付データの年数	aDate.year
データフレームの値が欠損値か調べる	df.isna()
折れ線グラフのマーカーを四角印にする	plt.plot(データ列x, データ列y, marker='s')
回帰分析をランダムフォレストで行う	model = sklearn.ensemble.RandomForestRegressor()
行列の行ごとの分散	np.var(aArray, axis=1)
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
option: マルーン色を使う	color = 'maroon'
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
グラフのフォントを日本語表示に変更する	sns.set(font='IPAexGothic')
スノー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
日付データからn週間分減らす	aDate - datetime.timedelta(weeks=n)
データフレームの指定したカラムの欠損値を直後の値で埋める	df['列A'].fillna(method='bfill')
数式を部分分数として展開する	sympy.apart(e)
浮動小数点数が負の数	x < 0
データフレームの列の名前を列挙する	df.columns
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
指定したカラムリストついて、データフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
データフレームの指定したカラムの欠損値を後の行の値に指定する	df['列A'].fillna(method='bfill')
第一引数で指定されたファイル名	sys.argv[1]
実数の逆正接	math.atan(x)
折れ線グラフの丸マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
xを整数に変換する	int(x)
option: 紺色を使う	color = 'darkblue'
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
ファイルパスをフォルダ名とファイル名に分割する	os.path.split(filepath)
nを否定する	not n
平均値付きボックスチャートをプロットする	plt.boxplot(データ列, showmeans=True)
データフレームの選択したカラムがどの程度、分散しているか見る	df[['列A', '列B']].var()
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
データシリーズの中にある文字列の合計を数える	ds.isin([value]).sum()
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
プロットで用いるフォントを指定する	sns.set(font=フォント名)
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
データシリーズの曜日数	ds.dt.dayofweek
日付時刻データの分数を見る	aDatetime.minute
option: マーカーを右三角に変更する	marker = '>'
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
散布図をロイヤルブルー色として描画する	plt.scatter(データ列x, データ列y, color='royalblue')
数列とリストについて散布図を描画して、菱形マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフでデータフレームの列を図示する	plt.plot(df[column], df[column])
要素が集合に含まれないか調べる	element not in aSet
整数nの十六進表現	hex(n)
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
option: カーキにグラフの色をセットする	color = 'khaki'
大量のデータが正規分布かどうか仮説検定する	scipy.stats.kstest(配列, 'norm')
折れ線グラフをオーキッド色として描画する	plt.plot(データ列x, データ列y, color='orchid')
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
ヒストグラムをダークオーキッド色を用いて描画する	plt.hist(データ列, color='darkorchid')
最大値・最小値として整数乱数を生成する	random.randint(最小値, 最大値)
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
散布図をシャルトリューズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
棒グラフをスチールブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='steelblue')
UTF8で追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='utf-8')
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
イテラブルとイテラブルの直積を得る	itertools.product(iterable, iterable2)
リネン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
K最近傍法でクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
各カテゴリごとにデータフレームの棒プロットを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
データフレームの末尾n行を取り出す	df.tail(n)
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
組の要素を小さい順に並べ直す	sorted(aTuple, reverse=False)
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
ファイルの絶対パスを見る	os.path.abspath(filepath)
ファイル名がJSONファイルか調べる	filename.endswith('.json')
データフレームのKurtosisを計算する	df.kurt()
折れ線グラフの印を△にする	plt.plot(データ列x, データ列y, marker='^')
option: イエローグリーン色を用いる	color = 'yellowgreen'
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
文字列を走査し、パターンにケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
散布図をパウダーブルー色として描画する	plt.scatter(データ列x, データ列y, color='powderblue')
線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
rgbの▼マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
オプションで出力先を標準エラーに設定する	file = sys.stderr
データフレームの列をヒストグラムにする	plt.hist(df[column])
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
データフレームをグループ化し、最小値を算出する	df.groupby('列A').min()
リストとリストの散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: 書き込みモードを用いる	mode = 'w'
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
横棒グラフをハニーデュー色として描画する	plt.barh(データ列x, データ列y, color='honeydew')
データフレームの指定したカラムの中にある文字列の合計を数える	df['列A'].isin([value]).sum()
黄緑色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
eの乗数	math.exp(x)
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
折り返しをオフに指定する	pd.set_option('expand_frame_repr', False)
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
option: アンティークホワイトにグラフの色を設定する	color = 'antiquewhite'
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
本日の日数	datetime.datetime.today().day
ライトサーモン色としてヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
リストを逆順にする	aList[::-1]
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
リッジ回帰とロッソ回帰の組み合わせた分析の準備をする	model = sklearn.linear_model.ElasticNet()
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
ベクトルのデータ型を計算する	aArray.dtype()
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
散布図に黒い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
データシリーズを四捨五入して、整数型にする	ds.round().astype(int)
線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
ロイヤルブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
数値を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
option: グラフの色をシアンに設定する	color = 'cyan'
データフレームを小数点以下n桁で丸める	df.round(n)
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
リストを引数として展開してプリントする	print(*aList, sep=',')
プレゼンにグラフの用途を設定する	sns.set(context='talk')
文字列をセパレータによって区切って、列挙する	s.split(sep)
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
NaN	math.nan
データシリーズは何年か調べる	ds.dt.year
小数点数を切り上げる	math.ceil(x)
最頻値でデータシリーズのNaNを置換する	ds.fillna(ds.mode().iloc[0])
nが無限に続く数列	itertools.repeat(n)
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
データフレームの選択した列の文字列を未入力値に変換する	df[['列A', '列B']].replace(値, np.nan)
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
rgbのバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ファイルパスを追加モードでオープンする]	open(filepath, mode='a')
文字を文字コードに変換する	ord(ch)
option: 行方向に計算する	axis = 1
折れ線グラフの色をマゼンタにする	plt.plot(データ列x, データ列y, color='magenta')
文字列はタイトル大文字小文字か調べる	s.istitle()
等しい量になるようにデータフレームの中の列をn個にビン分割する	pd.qcut(df[col], n)
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
タプルのn番目からn2番目	aTuple[n:n2]
セットを変更不能な集合に変換する	frozenset(aSet)
タプルの先頭を取り除く	aTuple[1:]
多項式回帰データフレームの散布図にを加える	sns.regplot(data=df, x='列名', y='列名', order=2)
配列のデータ型	aArray.dtype()
nがn2で割り切れるか確認する	n % n2 == 0
option: シャルトリューズ色を使用する	color = 'chartreuse'
横棒グラフをビスク色を用いて描画する	plt.barh(データ列x, データ列y, color='bisque')
表データを使う	import pandas as pd
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
option: グラフの色をサーモンに設定する	color = 'salmon'
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategray')
ロージーブラウン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
日付時刻データが土曜日かどうか調べる	aDatetime.weekday() == 5
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategrey'
option: 箱ひげ図を水平方向にする	vert = False
ある列の最頻値	df['列A'].mode()
数列を横に並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ライム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
リストのn番目の要素を削除する	del aList[n]
青色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
カウンタを辞書にする	dict(aCounter)
文字列の左端からタブを取り除く	s.lstrip('\t')
イテラブルと配列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
横棒プロットを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
データシリーズが何年か知る	ds.dt.year
option: ブラック色を使用する	color = 'black'
双方向キューの先頭にシーケンスの各値を追加する	deq.extendleft(iterable)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
指定した列のカテゴリで集計しそれぞれの最小値を算出する	df.groupby('列A').min()
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
タプルの各要素を関数でフィルタする	filter(func, iterable)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
現在の分数	datetime.date.today().minute
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
ふたつの列としてグループ化し個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
ライトスチールブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
データフレームの選択したカラムの欠損値を平均値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
ファイルから書き込みストリームを開いて]fとする	f = open(filepath, mode='w')
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
散布図の丸印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: スラッシュを区切りで使う	sep = '/'
カラムのピアソンの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
リストにリストを追加する	aList.extend(aList2)
リストをリバースする	reversed(aList)
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列の開始位置からと終了位置の間に部分文字列がある	s.find(sub, start, end) != -1
データフレームの欠損値をxで埋める	df.fillna(x)
コーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
データフレームのカラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
データシリーズを丸める	ds.round()
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
プロットの横軸にラベルをつける	plt.xlabel('x軸ラベル')
タン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
モデルの精度を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
データフレームの欠損値をxに指定する	df.fillna(x)
データフレームのカラムの平均の標準誤差を求める	scipy.stats.sem(df['列A'])
日付時刻データをタプルに変換する	aDatetime.timetuple()
データフレームをCSVファイルとして保存する	df.to_csv('file.csv')
カーキ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
折れ線グラフの色をグリーンに変更する	plt.plot(データ列x, データ列y, color='green')
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
option: ダークグレーにフォントの色を変更する	color = 'darkgray'
多次元データをMSDで濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
グリッド線を黄色くする	plt.grid(color='y')
データ列を２つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
データフレームからランダムに一行抽出する	df.sample()
整数nを十六進表現に変換する	hex(n)
カウンタを高頻出方からリストとして得る	aCounter.most_common()
データ列を箱ひげ図にする	plt.boxplot(データ列)
回帰モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
グレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
n2行n列の２次元リストを作る	[[0] * n for _ in range(n2)]
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
コーラル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
文字列中から正規表現に複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
ヒストグラムの色をオレンジにセットする	plt.hist(データ列, color='orange')
n個の整数リスト	list(range(n))
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
タプルの中の最小値	min(aTuple)
データフレームを二つの列によって降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
箱ヒゲ図でデータフレームの複数のカラムを並べて作図する	plt.boxplot([df['カラム'], df['カラム']])
option: グラフの色をアクアに設定する	color = 'aqua'
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
折れ線グラフの大バツ印の線幅を変える	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
説明変数と目的変数で単回帰モデルを学習する	model.fit(説明変数, 目的変数)
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
ピーチパフ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
散布図をパープル色として描画する	plt.scatter(データ列x, データ列y, color='purple')
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
データフレームを関数の値によってグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
option: n番目のカラムをインデックスに設定する	index_col = n
nが5の倍数か調べる	n % 5 == 0
黒いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームのカラムの欠損値を平均値で埋める	df['列A'].fillna(df['列A'].mean())
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
散布図をダークターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
散布図のクロスマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
イテラブルの各データを双方向キューの左に入れる	deq.extendleft(iterable)
データフレームの選択したカラムの欠損値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
1からNまでのベクトル	np.arange(1, N+1)
UTF8で文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
イテラブルを文字列に変換して、空白を用いてつなげる	' '.join(map(str, iterable))
データフレームを指定したカラムの値でグループ化し、統計量を算出する	df.groupby('列A').describe()
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データフレームの第二四分位数	df.median()
サドルブラウン色を使ってヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
変数を緑色で表示する	print(f'\033[32m{value}\033[0m')
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
アクアにヒストグラムの色を設定する	plt.hist(データ列, color='aqua')
イテラブルとイテラブルをペア化する	itertools.zip_longest(iterable, iterable2)
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
部分文字列が文字列中に存在しないかどうか	sub not in s
小数点数は非数か	math.isnan(x)
nを符号なしでバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
表データをソートして、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
カウンタを高頻出な方からリストとして得る	aCounter.most_common()
本日が金曜日かどうか確認する	datetime.datetime.today().weekday() == 4
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
折れ線グラフの色をカデットブルーに指定する	plt.plot(データ列x, データ列y, color='cadetblue')
レモンシフォン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
エクセルファイルのシートをデータフレームとして読む	pd.read_excel('file.xlsx', sheet_name=シート名)
グラフ中のフォントをする	sns.set(font=フォント名)
フクシア色として散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
スラグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
非アスキー文字が文字列中にあるかどうか調べる	any(not c.isascii() for c in s)
データシリーズは何曜日か見る	ds.dt.weekday_name
ファイルから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
グラフにy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
横棒グラフをパレットトルコイズ色として描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
データフレームのある列を抽出する	df['列A']
縦棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
データシリーズの平均	ds.mean()
文字列が全て英字か	s.isalpha()
データフレームのあるカラムのNaNを直後の値に設定する	df['列A'].fillna(method='bfill')
ある列でデータフレームを集約して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
ゼロ埋めされた行列	np.zeros(行数, 列数)
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
カウンタのユニークな項目を列挙する	list(aCounter)
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
縦棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
昇順にインデックスによってデータフレーム全体をソートする	df.sort_index(ascending=True)
線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
折れ線グラフをパパイヤウィップ色を用いて描画する	plt.plot(データ列x, データ列y, color='papayawhip')
ある列の値がxより大きくyより小さい行を抽出する	df[(x < df['列A']) & (df['列A'] < y)]
データフレームの相関行列を計算する	df.corr()
変数が0に近づく場合の数式の極限値を算出する	sympy.limit(e, z, 0)
ダークレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
要素ひとつのタプル	(element,)
散布図に菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
ある列のカテゴリごとの最大値	df.groupby('列A').max()
イテラブルをぐるぐると繰り返す	itertools.cycle(iterable)
青い破線でリストの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ダークレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
option: 上三角マーカーを使用する	marker = '^'
データフレームをある列をキーにして降順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
イテラブルとリストについての散布図に赤いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データ列の離れ具合を図示する	sns.residplot(x=データ列, y=データ列)
データフレームの一部のカラムの標本分散	df[['列A', '列B']].var(ddof=0)
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
折れ線グラフのポイント印の線幅を変える	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
データフレームの最初100行を抽出する	df.head(100)
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
データフレームのある列の値がxより小さい行を抽出する	df[df['列A'] < x]
オブジェクトは論理値かどうか判定する	isinstance(obj, bool)
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
ヒストグラムをモカシン色として描画する	plt.hist(データ列, color='moccasin')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
文字列の示すエンコーディングとしてファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
新しい線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
表データの列の名前を変更する	df.rename(columns={'列A': '列a', '列B': '列b'})
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
フクシア色を用いてヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
出現頻度を作図する	plt.hist(データ列)
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
データフレームの選択したカラムの不偏分散を求める	df[['列A', '列B']].var(ddof=1)
option: サーモンに色を変更する	color = 'salmon'
折れ線グラフの左三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
ファイルをEUCとして追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
日付データからn日を引く	aDate - datetime.timedelta(days=n)
rangeの無限バージョン	itertools.count(start=n, step=step)
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
指定した列のカテゴリで集計し、それぞれの平均値を求める	df.groupby('列A').mean()
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
縦棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
データフレームの選択したカラムが正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
option: グラフの色をミントクリームにセットする	color = 'mintcream'
散布図の四角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
イテラブルのイミュータブルな集合	frozenset(iterable)
空の組	()
ヒストグラムを黄緑色を用いて描画する	plt.hist(データ列, color='chartreuse')
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
事前に正規表現をケースを無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
配列のスピアマンの相関係数	scipy.stats.spearmanr(配列, 配列2)
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
コマンドラインフラグの状態を知る	sys.flags
データフレームを２つの列によって昇順に破壊的に整列する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
二つの数値をカンマで区切って表示する	print(value, value2, sep=',')
データフレームの選択したカラムの母標準偏差	df[['列A', '列B']].std(ddof=0)
ファイルパスの拡張子	os.path.splitext(filepath)[1].lstrip('.')
2つの数値を順に表示する	print(value, value2)
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
タプルの要素をソートする	sorted(aTuple)
option: ダークレッド色を用いる	color = 'darkred'
要素を集合に追加する	aSet.add(element)
縦棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
リストと配列について散布図を描画して、▽マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
イテラブルとイテラブルについて散布図を描画し、、文字列という簡単な説明用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
名前付きタプルを引数からインスタンス化する	C._make(パラメータ)
日付時刻データからn日分減らす	aDatetime - datetime.timedelta(days=n)
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
マッピングから項目名の値を得る	aDict.get(key)
データフレームを千の位で丸める	df.round(-3)
折れ線グラフをラベンダーブラッシュ色を用いて描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
プロットの色を明るくする	sns.set(pallete='bright')
データフレームのあるカラムは何年か見る	df['列A'].dt.year
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
nが偶数か調べる	n % 2 == 0
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データフレームをエクセルから読み込む	pd.read_excel('file.xlsx')
代数計算を使う	import sympy
y軸に名前を付ける	plt.ylabel('y軸ラベル')
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
やわらかい青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図をハニーデュー色を用いて描画する	plt.scatter(データ列x, データ列y, color='honeydew')
折れ線グラフに黒い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
option: スレートブルーに色を変更する	color = 'slateblue'
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='gray')
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
異なる列をキーとしてデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
まとめてデータフレームの列の名前を置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
インタプリタの実行ファイルの絶対パス	sys.executable
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgray')
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
縦棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
ダークスラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategray')
折れ線グラフの色をアイボリーに指定する	plt.plot(データ列x, データ列y, color='ivory')
プロットに鉛直方向の点線を設定する	plt.axvline(x=0, linestyle='dotted')
何回まで再帰ができるか、	sys.getrecursionlimit()
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
nが1、もしくは2か調べる	n == 1 or n == 2
リストの末尾からn番目以前の部分を抽出する	aList[:-n]
浮動小数点数を実数で割る	x / y
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
データフレームのn行目を削除する	df.drop(n, axis=0, inplace=True)
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
データシリーズが何分か見る	ds.dt.minute
実数のアークコサイン	math.acos(x)
日付時刻データは何月か知る	aDatetime.month
再帰の最大回数を知る	sys.getrecursionlimit()
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
カラーバーを横向きで描く	plt.colorbar(orientation='horizontal')
リストと配列の散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
リストとリストについて散布図をプロットして、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
表示可能な最大列数を増やす	pd.set_option('display.max_columns', n)
グラフの縦軸を対数目盛に変更する	plt.yscale('log')
データフレームがどれだけ、正規分布から歪んでいるか確認する	df.kurt()
マゼンタで文字列をプリントする	print(f'\033[35m{value}\033[0m')
今日が木曜日かどうか確認する	datetime.datetime.today().weekday() == 3
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
実数をn乗する	x ** n
プラットフォームのコードポイントの最大値	sys.maxunicode
option: 青緑にグラフの色を指定する	color = 'teal'
縦棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
JSONファイルのfをデータに変換する	json.load(fin)
option: ターコイズに色を変更する	color = 'turquoise'
option: ダークマゼンタ色を用いる	color = 'darkmagenta'
データフレームの選択した列の尖度	df[['列A', '列B']].skew()
２次元リストをflattenする	sum(aList)
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
実数のコサインの逆数を求める	math.acos(x)
散布図を黒い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
数式の変数を数値で置き換える	e.subs(z, e2)
option: 丸マーカーを加える	marker = 'o'
キーがマッピングに存在するか調べる	key in aDict
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
整数nの八進数リテラル	oct(n)
数を千の位で四捨五入する	round(x, -3)
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
option: フォントの色を紺に設定する	color = 'darkblue'
折れ線グラフをミディアムパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
データフレームを見る	df.head()
要素がセットのメンバーでないか調べる	element not in aSet
プロットのカラーパレットを濃くする	sns.set(pallete='deep')
配列の調和平均を求める	scipy.stats.hmean(配列)
線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
文字列を最初の部分文字列で二分し前半の文字列を求める	s.partition(sub)[0]
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
棒グラフの色をダークブルーにする	plt.bar(データ列x, データ列y, color='darkblue')
青緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
year年month月day日のタイムスタンプ	datetime.datetime(year=year, month=month, day=day)
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
シーグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
ヒストグラムをライトコーラル色を用いて描画する	plt.hist(データ列, color='lightcoral')
インディアンレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
折れ線グラフの▽マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
nが一桁の数	0 <= n <= 9
要素をキューの先頭に追加する	deq.appendleft(element)
nをn2だけ右シフトする	n >> n2
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
逆双曲線正弦を算出する	math.asinh(x)
option: 色をグリーンイエローに設定する	color = 'greenyellow'
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
パターンを複数行対応として事前にコンパイルする	re.compile(pattern, flag=re.MULTILINE)
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
ファイルパスを書き込み用にSJISとしてオープンする]	open(filepath, mode='w', encoding='shift_jis')
グラフ描画でカーネル密度推定を使用する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: グリーン色を用いる	color = 'green'
ブランチドアーモンド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
予測値とデータの離れ具合をグラフ化する	sns.residplot(x='列名', y='列名', data=df)
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
折れ線グラフの印を大バツにする	plt.plot(データ列x, データ列y, marker='X')
データフレームを表示するとき、カラムの最大幅をnに変更する	pd.set_option('max_colwidth', n)
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
データフレームの選択した列の中に文字列と文字列がいくつあるか求める	df[['列A', '列B']].isin([value, value2]).sum()
データフレームのあるカラムは何分か調べる	df['列A'].dt.minute
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
表データのあるカラムが何時か知る	df['列A'].dt.hour
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
棒グラフを紺碧色を使って描画する	plt.bar(データ列x, データ列y, color='azure')
０で全要素を初期化した行列	np.zeros(行数, 列数)
ロッソ回帰分析を行う	model = sklearn.linear_model.Rosso(alpha=正則化項)
棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ゲインズボロ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
線グラフをサーモン色として描画する	plt.plot(データ列x, データ列y, color='salmon')
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
データフレームのあるカラムの分	df['列A'].dt.minute
コレクションを使う	import collections
マッピングのコピー	dict(aDict)
パールゴールデンロッド色を使ってヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
ヒストグラムをコーンズシルク色を使って描画する	plt.hist(データ列, color='cornsilk')
ペルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
配列の相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
リストとリストの散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
nかけるn2	n * n2
データフレームの行を条件でフィルタする	df[(df['列A'] == x) & (df['列B'] == y)]
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
実数で実数を整数除算する	x // y
左三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームの母標準偏差	df.std(ddof=0)
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームの選択したカラムのNaNを直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
アンティークホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
表示できる行数を増やす	pd.set_option('display.max_rows', n)
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
option: ペールグリーン色を使用する	color = 'palegreen'
option: 大文字・小文字を無視する	flag = re.IGNORECASE
データ列の四分位を可視化する	plt.boxplot(データ列)
データ列を2つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
option: マルーンにフォントの色をする	color = 'maroon'
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
データフレームを二つの列の値によってグループ化する	df.groupby(['列A', '列B'])
両端キューをタプルにする	tuple(deq)
散布図をシルバー色として描画する	plt.scatter(データ列x, データ列y, color='silver')
option: スチールブルー色を使う	color = 'steelblue'
ヒストグラムの色を耐火レンガにセットする	plt.hist(データ列, color='firebrick')
二つのリストから辞書	dict(zip(aList, aList2))
スピアマン相関係数でデータフレームの一部の列の相関行列を算出する	df[['列A', '列B']].corr(method='spearman')
option: アクアにグラフの色を設定する	color = 'aqua'
データフレームの一部のカラムの不偏分散を算出する	df[['列A', '列B']].var(ddof=1)
配列とリストについて散布図を描画して右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの列概要	df.info()
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
option: スノー色を用いる	color = 'snow'
二つのオブジェクトが同一参照かどうか調べる	obj is obj2
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
散布図をライトグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
辞書を浅くコピーする	dict(aDict)
プロットの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
折れ線グラフの左三角印を黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームを関数の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
文字列をコロンを用いて区切って、列挙する	s.split(':')
両端キューの長さを制限する	collections.deque(maxlen=n)
ダークスレートブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
アイボリー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
辞書のキーの一覧	aDict.keys()
option: フォントの色をハニーデューに変更する	color = 'honeydew'
ベクトルと同じ大きさの空配列を作る	np.empty_like(aArray)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
辞書のキーとその値を列挙する	aDict.items()
線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
カウンタをリストにする	list(aCounter)
横棒グラフを描画する	plt.barh(ラベル列, データ列)
データフレームを十の位で丸めて、整数型にする	df.round(-1).astype(int)
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
０で全要素を初期化した符号なし８ビット整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.uint8)
文字列の先頭から部分文字列を取り除く	s.lstrip(sub)
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
数式の部分分数化を行う	sympy.apart(e)
整数nがセットのいづれかか調べる	n in aSet
文字列をマゼンタでプリントできる文字列にする	f'\033[35m{value}\033[0m'
線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
ブルーバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
二つの最小の値	min(x, y)
エクセルファイルから全てのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
全ての十六進数字	string.hexdigits
青い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
グリッド線	plt.grid(linewidth=3.0)
散布図を大バツマーカーとして描く	plt.plot(データ列x, データ列y, marker='X')
データフレームのn行目をドロップする	df.drop(n, axis=0, inplace=True)
文字列がリストに含まれない	element not in aList
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
文字列を評価する	eval(s)
散布図に四角印を用いる	plt.scatter(データ列x, データ列y, marker='s')
option: ライトゴールドロディイエローを用いる	color = 'lightgoldenrodyellow'
データシリーズのNaNを最頻値に増やす	ds.fillna(ds.mode().iloc[0])
折れ線グラフの▽印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
四角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
ライトイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
nが奇数か調べる	n % 2 == 1
グラフを正方形にする	plt.axis('equals')
イテラブルを配列にする	np.array(iterable)
配列が何のデータ型か調べる	aArray.dtype()
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
多次元データをt-SNEとして淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
チップのデータセットをデータフレームとしてロードする	df = sns.load_dataset('tips')
データシリーズの曜日の名前	ds.dt.weekday_name
真上位集合か調べる	aSet > aSet2
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
商と余りを同時に計算する	divmod(x, y)
自然対数の底を使う	math.e
正規化された度数分布図を描く	plt.hist(データ列, density=True)
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
n引くn2	n - n2
データフレームの分散	df.var()
散布図のクロス印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
折れ線グラフの色をスチールブルーにセットする	plt.plot(データ列x, データ列y, color='steelblue')
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
カウンタを低頻度方から列挙する	aCounter.most_common()[::-1]
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データフレームの選択した列の中にいくつ欠損値があるかカウントする	df[['列A', '列B']].isna().sum()
実数が負の数かどうか調べる	x < 0
データフレームのあるカラムを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
option: カンマを区切り記号で使う	sep = ','
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
スタッキングでクラス分類をする	sklearn.ensemble.StackingClassifier()
プロットのx軸とy軸の比率を同じする	plt.axis('equals')
散布図をライトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightblue')
横棒グラフをミッドナイトブルー色として描画する	plt.barh(データ列x, データ列y, color='midnightblue')
データフレームを欠損値を含めてある列の値でグループ化する	df.groupby('列A', dropna=False)
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
タン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
縦棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームとデータシリーズを横方向に連結する	pd.concat([df, ds], axis=1)
リストと配列についての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
日付データが日付データよりあとか	aDate > aDate2
データフレームの中のカラムをリストを境界値としてビン分割する	pd.cut(df[col], aList)
スクリプトファイルの絶対パス	os.path.abspath(__file__)
組と組を加える	aTuple + aTuple2
オブジェクトのクラス	type(obj)
nが何桁か	len(str(n))
データフレームの指定したカラムの値を正規表現patternでまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
アルファベットから一つランダムに選ぶ	random.choice(string.ascii_uppercase)
ラベンダーブラッシュにヒストグラムの色をする	plt.hist(データ列, color='lavenderblush')
双方向キューをクリアする	deq.clear()
文字列を後ろから部分文字列で区切る	s.rsplit(sub)
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
あるカラムを小数点以下n桁で丸める	df['列A'].round(n)
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
プログラムの実行をエラーとして終える	sys.exit(1)
データフレームのあるカラムが何日か調べる	df['列A'].dt.day
イテラブルの各要素を双方向キューの末尾に付け加える	deq.extend(iterable)
データフレームの選択した列を正規表現patternでまとめて置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
集合から要素を取り除く	aSet.remove(element)
0からnまでのスライス	slice(n)
文字列は文字列より辞書順で前	s < s2
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
縦棒グラフを小麦色色を用いて描画する	plt.bar(データ列x, データ列y, color='wheat')
表データのあるカラムは何日か知る	df['列A'].dt.day
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
整数nが配列のどれかか調べる	n in aArray
option: シーグリーンに色を変更する	color = 'seagreen'
ティール色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
カウンタからイテラブルを出現回数して引く	aCounter.subtract(iterable)
目盛線	plt.grid(alpha=0.5)
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
集合の全ての要素が別のセットに含まれるかどうか調べる	aSet.issubset(aSet2)
ひとつでもアルファベットが文字列内にある	any(c.isalpha() for c in s)
option: フォントの色をブラックに設定する	color = 'black'
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
レベッカパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
文字列の先頭から空白を取り除く	s.lstrip()
横向きに三つのデータフレームをつなぐ	pd.concat([df, df2, df3], axis=1)
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
線グラフの色をリネンにセットする	plt.plot(データ列x, データ列y, color='linen')
辞書をカウンタにする	collections.Counter(aDict)
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
データ列をn個に分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
分数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
option: フォントの色をゴールデンロッドに設定する	color = 'goldenrod'
パールバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='palevioletred')
エクセルファイルからデータフレームを読み込む	pd.read_excel('file.xlsx')
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
配列の尖りを計算する	scipy.stats.kurtosis(配列, bias=False)
棒グラフを黄緑色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
データフレームの平均と信頼区間をプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
線グラフの色を珊瑚に指定する	plt.plot(データ列x, データ列y, color='coral')
タイタニック号のデータセットをロードする	df = sns.load_dataset('titanic')
リストのオブジェクトの位置をエラーなく使う	aList.index(element) if element in aList else -1
データフレームの中に文字列と日付データがいくつあるか数える	df.isin([value, value2]).sum()
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
タプル中の文字列が最初に見つかるインデックスを探す	aTuple.index(element)
データフレームをTSVファイルとして出力する	df.to_csv('file.tsv', sep='\t')
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
散布図のバツ印を黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームから数値データの列だけ選ぶ	df.select_dtypes('number')
リストを分割数nとしてビン分割する	pd.cut(aList, n)
星マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='*')
option: ミディアムパープルにグラフの色を設定する	color = 'mediumpurple'
数列の相関係数を算出する	scipy.stats.pearsonr(数列, 数列2)
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
切り捨てながらnをn2分の一にする	n //= n2
両端キューに要素をプッシュする	deq.append(element)
データ列の文字列長を列として見る	ds.str.len()
いつまでもnからカウントアップする	itertools.count(start=n)
数値の符号を同じにする	math.copysign(x, x2)
ダークオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
濃い青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
乱数シードを初期化する	random.seed()
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームをインデックスでソートする	df.sort_index()
データフレームの欠損値をそのモードで補う	df.fillna(df.mode().iloc[0])
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
実線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
タプルの要素を昇順に並べる	sorted(aTuple, reverse=False)
回帰分析をヒストグラムと勾配ブースティングを用いて行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
両端キューをタプルに変換する	tuple(deq)
スピアマン相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
文字列リストを連結し、ひとつの文字列にする	''.join(aStringList)
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
option: フォントの色をオレンジに設定する	color = 'orange'
option: ダークスラテグレー色を使う	color = 'darkslategray'
横軸の目盛を非表示にする	plt.xticks([])
option: 青色を使う	color = 'blue'
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
データフレームの選択したカラムの要約統計量を求める	df[['列A', '列B']].describe()
データ列を分割数nを用いてビン分割する	pd.cut(ds, n)
縦棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
棒グラフをピンク色として描画する	plt.bar(データ列x, データ列y, color='pink')
浮動小数点数の双曲線余弦を求める	math.cosh(x)
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
グラフの色を明るくする	sns.set(pallete='bright')
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
クラス分類の予測精度をヒートマップを使って見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
リストを緑色でプリントする	print(f'\033[32m{value}\033[0m')
値を太字でプリントする	print(f'\033[1m{value}\033[0m')
シスル色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
シスル色でヒストグラムを描画する	plt.hist(データ列, color='thistle')
列からn個、サンプリングする	random.sample(iterable, k=n)
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
ミントクリーム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
値をマゼンタにする	f'\033[35m{value}\033[0m'
二つの集合の和集合	aSet.union(aSet2)
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
option: バッファリングのサイズを小さくする	buffering = 4096
回帰分析をランダム性を追加したランダムフォレストでする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
リストが全て真か調べる	all(aList)
イテラブルの集合	set(iterable)
文字列はタプルの要素	element in aTuple
文字列中に非数字が含まれるか調べる	any(not c.isdigit() for c in s)
ふたつの集合に共通する要素からなる集合を使う	aSet.intersection(aSet2)
散布図をグリーンイエロー色として描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームの選択したカラムの標準偏差	df[['列A', '列B']].std()
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
データフレームの指定したカラムにおいてどの値が頻出か確認する	df['列A'].mode()
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
ミディアムパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
入力から二つの整数を読む	A, B = map(int, input().split())
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
イテラブルからカウンタを生成する	collections.Counter(iterable)
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームから数値データの列を抽出する	df.select_dtypes('number')
日付時刻データが火曜日	aDatetime.weekday() == 1
データフレームのあるカラムが何曜日か見る	df['列A'].dt.weekday_name
option: ダークオリーブグリーンにグラフの色を指定する	color = 'darkolivegreen'
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
浮動小数点数を整数にする	int(x)
カラム名を指定して２つの表データを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
データシリーズのKurtosis	ds.kurt()
日付データと日付データの時間差	aDate - aDate2
折れ線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
タプル中の要素が少なくとも一つ真か調べる	any(aTuple)
多次元データを特異値分解を用いて淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
カウンタから辞書を引く	aCounter.subtract(aDict)
option: フローラルホワイトを使用する	color = 'floralwhite'
ライトグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ベクトル間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
両端キューのn番目に要素を挿入する	deq.insert(n, element)
ミディアムパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
文字列内にASCII文字が含まれるか	any(c.isascii() for c in s)
度数分布図の範囲を設定する	plt.hist(データ列, range=(start, end))
option: グラフの色を青に設定する	color = 'blue'
カラムの各データは何回出現するか見る	df[col].value_counts()
数列とイテラブルの散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストとリストを連結する	aList + aList2
散布図を下三角マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='v')
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
散布図をイエローグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
アルファベットを全て見る	string.ascii_letters
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
1行から二つの文字を読む	A, B = map(str, input().split())
リストを引数として展開して表示する	print(*aList, sep=',')
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgrey')
ヒストグラムの色を暗い赤にする	plt.hist(データ列, color='darkred')
真部分集合か調べる	aSet < aSet2
ヒストグラムをパパイヤウィップ色として描画する	plt.hist(データ列, color='papayawhip')
タプルの各値を関数に適用した結果でソートする	sorted(aTuple, key=func)
モデルを当てはめる	model.fit(説明変数, 目的変数)
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ライムグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
散布図をペールグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegreen')
折れ線グラフの色をターコイズに変更する	plt.plot(データ列x, データ列y, color='turquoise')
ある列の文字列が部分文字列で終わる行を抽出する	df[df['列A'].str.endswith(部分文字列)]
カラムの調和平均	scipy.stats.hmean(df['列A'])
nで乱数生成系列を初期化する	random.seed(n)
入力ストリームをクローズする	f.close()
year年をタイムスタンプに変換する	datetime.datetime(year=year, month=1, day=1)
データ列の各データが何回出現するか見る	ds.value_counts()
空白	' '
辞書に要素をキーとして加える	aDict[key] = element
散布図の印を大バツにする	plt.scatter(データ列x, データ列y, marker='X')
指定した列の値で集計し、それぞれの個数を計算する	df.groupby('列A').count()
縦棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
nからn2までのひとつ飛ばしの整数リスト	list(range(n, n2+1, 2))
配列と数列の散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
option: 淡いピンク色色を使う	color = 'lightpink'
データフレームの指定したカラムの統計量	df['列A'].describe()
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
option: 小麦色にグラフの色を設定する	color = 'wheat'
配列を2次元1列に変形する	aArray.reshape(-1, 1)
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
追加用にファイルパスを開く]	open(filepath, mode='a')
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
赤い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
グラフからグリッド線を消す	plt.grid(False)
シーケンスの全順列	itertools.permutations(iterable)
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
指定した列の欠損値をメディアンにする	df['列A'].fillna(df['列A'].median())
散布図を黒い四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s', c='k')
文字列の先頭から部分文字列を見つける	s.find(sub)
option: ミスティローズを用いる	color = 'mistyrose'
データフレームの第一四分位数	df.quantile(0.25)
実数を数で割った余り	x % y
オレンジレッドにヒストグラムの色を設定する	plt.hist(データ列, color='orangered')
フローラルホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
option: 改行を区切りで用いる	sep = '\n'
1文字だけ標準入力から読み込む	sys.stdin.read(1)
パラメータについて数式を積分する	sympy.integrate(e, z)
ダーク・スラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
散布図をゲインズボロ色を使って描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
option: グラフの色をブランチドアーモンドにする	color = 'blanchedalmond'
グラフの背景色を暗くする	sns.set(style='darkgrid')
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
折れ線グラフをゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='goldenrod')
option: ブルーバイオレットにフォントの色を指定する	color = 'blueviolet'
２つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
クラスが名前付きタプル	issubclass(C, tuple)
option: マーカーを星に変更する	marker = '*'
表データのある列の値がxに等しくない行を抽出する	df[df['列A'] != x]
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
データシリーズの欠損値を最大値に設定する	ds.fillna(ds.max())
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
辞書をJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
折れ線グラフに三角印を使う	plt.plot(データ列x, データ列y, marker='^')
ライトイエロー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
データシリーズの標本分散を求める	ds.var(ddof=0)
データフレームを関数によって集計して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
三変数の最小値を求める	min(x, y, z)
黒い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
リストとリストの散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
辞書のキーを要素に設定する	aDict[key] = element
ヘッダー行を右寄せに変更する	pd.set_option('colheader_justify', 'right')
第２引数で指定されたファイルの名前	sys.argv[1]
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
データフレームの欠損値をxに減らす	df.fillna(x)
データ列の変遷を折れ線プロットで作図する	plt.plot(range(len(データ列)), データ列)
棒グラフをダークターコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
サポートベクター回帰モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
インデント幅nで辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
コマンドの第一引数を調べる	sys.argv[1]
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
二つの文字列は等しくないか調べる	s != s2
標準エラー	sys.stderr
データフレームの複数の列をドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
ローングリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
グリッド線を黒くする	plt.grid(color='k')
配列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
折れ線グラフをライトゴールドロディイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームのあるカラムの欠損値を中央値に変更する	df['列A'].fillna(df['列A'].median())
n個分キューの要素を回転させる	deq.rotate(n)
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
文字列を代数計算の変数に変換する	sympy.Symbol(s)
改行なしに文字列をプリントする	print(value, end='')
縦棒グラフを淡い茶色色で描画する	plt.bar(データ列x, データ列y, color='tan')
パパイヤウィップ色でヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
文字列の開始位置以降に部分文字列が含まれる	s.find(sub, start) != -1
ペールグリーン色でヒストグラムを描画する	plt.hist(データ列, color='palegreen')
線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
浮動小数点数を百の位で丸める	round(x, -2)
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
菱形マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
散布図に青い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
分類モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
グラフの見栄えを良くする	import seaborn as sns
データフレームのある列をドロップする	df.drop('列A', axis=1, inplace=True)
option: グラフの色をベージュにセットする	color = 'beige'
横棒グラフを描画し、、下寄せする	plt.barh(ラベル列, データ列, align='edge')
ラインを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データ列をビン数nでビニングする	pd.cut(ds, n)
データフレームのインデックスの一覧	df.index
双方向キューのn番目に値を差し込む	deq.insert(n, element)
横棒グラフを黄色色を用いて描画する	plt.barh(データ列x, データ列y, color='yellow')
データシリーズの欠損値を最小値で埋める	ds.fillna(ds.min())
グラフの描画を見やすくする	import seaborn as sns
棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
赤い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
グラフをポスターに設定する	sns.set(context='poster')
option: フォントの色をダークマゼンタに変更する	color = 'darkmagenta'
タプルを番号付けする	enumerate(aTuple)
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
折れ線グラフの色をインディゴにする	plt.plot(データ列x, データ列y, color='indigo')
フォーマットを用いて列をタイムスタンプ型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
option: ゴーストホワイト色を使用する	color = 'ghostwhite'
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
マルーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
本日が何日か知る	datetime.datetime.today().day
2変数の最大値	max(x, y)
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データシリーズを小数点以下n桁で丸める	ds.round(n)
色付きの実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームの選択したカラムを十の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
リストを緑色で出力する	print(f'\033[32m{value}\033[0m')
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
文字列を最後の部分文字列で二つに区切って、前半の文字列を求める	s.rpartition(sub)[0]
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
２変数の最も大きい値	max(x, y)
リストとリストについて散布図を描画し、、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
目盛り線	plt.grid(color='#800080')
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
追加モードを使ってファイルをオープンして]fとする	f = open(filepath, mode='a')
ヒストグラムをミディアムオーキッド色として描画する	plt.hist(データ列, color='mediumorchid')
データフレームの相関行列をケンドール順位相関係数として求める	df.corr(method='kendall')
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
二つの文字列は同じかどうか	s == s2
データフレームのカラム名をリストで置き換える	df.columns = columns
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
珊瑚色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
nを切り捨てながら半分にする	n //= 2
表から100行をランダムに重複ありでサンプリングする	df.sample(100, replace=True)
耐火レンガ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
データフレームを10000の位で丸める	df.round(-4)
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
変数をスワップする	x, y = y, x
一方に含まれ、他方に含まれない集合を使う	aSet.difference(aSet2)
二つのリストの積集合を算出する	list(set(aList) & set(aList2))
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
ダークシアン色でヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
option: エクセルファイルシートの名前を設定する	sheet_name = ['A', 'B']
option: フォントの色をミディアムターコイズに変更する	color = 'mediumturquoise'
オブジェクトが名前付きタプルか確認する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
option: 赤を使う	color = 'red'
実数のハイパボリック・サインの逆数を算出する	math.asinh(x)
配列のスカラー倍を調べる	aArray * n
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
option: グラフの色をミディアムシアグリーンにセットする	color = 'mediumseagreen'
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
option: グラフの色をネイビーに設定する	color = 'navy'
自然数個のものからk個取り出した時の並べ方の総数	math.perm(n, k)
読み込みモードでファイルを開いて]、fとする	f = open(filepath, mode='r')
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
データフレームの選択したカラムの欠損値を中央値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
３数の最小値	min(x, y, z)
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
文字列を最後の部分文字列で二分し、後半の文字列を見る	s.rpartition(sub)[-1]
リストとリストについての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
プロットにy=0の点線を設定する	plt.axhline(y=0, linestyle='dotted')
データフレームの指定したカラムの不偏標準偏差を算出する	df['列A'].std()
ダークサーモン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
option: 複数行に対応する	flag = re.MULTILINE
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
チョコレート色でヒストグラムを描画する	plt.hist(データ列, color='chocolate')
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
option: 昇順にする	ascending = True
数値をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
最大長を指定して両端キュー	collections.deque(maxlen=n)
データフレームの指定した列の名前一覧の列を選択する	df[columns]
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
時刻を使う	import datetime
データフレームの値は未入力値	df.isna()
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
実数から実数を減ずる	x - y
データシリーズの文字列を欠損値に変換する	ds.replace(値, np.nan)
数を整数に変換する	int(x)
ヒストグラムの色をコーラルに指定する	plt.hist(データ列, color='coral')
データシリーズの中に文字列が存在する	ds.isin([value])
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
現在のミリ秒	int(time.time() * 1000)
option: スノーにグラフの色を設定する	color = 'snow'
option: 赤にグラフの色を設定する	color = 'red'
データフレームのカラムの各データ値の出現数	df[col].value_counts()
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
数値を青色にする	f'\033[34m{value}\033[0m'
配列の列ごとの平均値	np.mean(aArray, axis=0)
データフレームの欠損値をその平均値で埋める	df.fillna(df.mean())
耐火レンガ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
コロンで文字列を区切り、、列挙する	s.split(':')
ブルーバイオレット色を用いてヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
プログラムを強制的に終える	sys.exit()
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
option: どのカラムも行に設定しない	index_col = None
折れ線グラフの色をミディアムシアグリーンに変更する	plt.plot(データ列x, データ列y, color='mediumseagreen')
縦棒グラフを描画してラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
データフレームをある列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームを欠損値を含めてあるカラムでグループ化する	df.groupby('列A', dropna=False)
実数の複素数を求める	complex(x)
データシリーズの記述統計量	ds.describe()
レモンシフォン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
セットが空か調べる	len(aSet) == 0
横棒グラフをカーキ色を用いて描画する	plt.barh(データ列x, データ列y, color='khaki')
線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームのあるカラムの標本標準偏差を求める	df['列A'].std(ddof=1)
実数が正の数か調べる	x > 0
配列とリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
タプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
３つの実行結果を順に表示する	print(value, value2, value3)
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
辞書からキーの値をエラーなく得る	aDict.get(key, None)
ヒストグラムの色をラベンダーに変更する	plt.hist(データ列, color='lavender')
option: ゴーストホワイトにグラフの色をセットする	color = 'ghostwhite'
組の各要素を関数に適用した結果で並べ変える	sorted(aTuple, key=func)
回帰木分析を行う	model = sklearn.tree.DecisionTreeRegressor()
散布図にダイアモンドマーカーを用いる	plt.scatter(データ列x, データ列y, marker='D')
nの無限整数リストを得る	itertools.repeat(n)
既存のベクトルをベースに全要素が1の配列	np.ones_like(aArray)
半透明の実線としてリストの移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
文字列を全て小文字にする	s.casefold()
ファイル名がTSVファイル	filename.endswith('.tsv')
コマンドフラグの状態	sys.flags
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
小数点数の指数	math.frexp(x)[1]
rgbの上三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
プログラムの実行を正しく終了する	sys.exit(0)
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
サポートベクターマシンで回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの選択したカラムのNaNを中央値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
データフレームのカラムのSkewnessを求める	scipy.stats.skew(df['列A'], bias=False)
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
データフレームを二つの列のカテゴリによって集約する	df.groupby(['列A', '列B'])
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
に箱ひげ図でデータフレームをグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
リストの推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
濃いシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データ列を円グラフにする	plt.pie(データ列, startangle=90)
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
xのハッシュ値	hash(x)
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
外れ値を除いたデータフレームのカラムの分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
タプルをひとつ置きに取り出す	aTuple[::2]
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
折れ線グラフの色をクリムゾンに指定する	plt.plot(データ列x, データ列y, color='crimson')
折れ線グラフの大バツマーカーの太さを変える	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
オプションで、標準出力を使用する	file = sys.stdout
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
データフレームの一部のカラムの第一四分位数を算出する	df[['列A', '列B']].quantile(0.25)
ファイルをバイナリモードとして開く]	open(filepath, mode='rb')
option: アリスブルーにグラフの色を変更する	color = 'aliceblue'
データフレームのカラムを折れ線プロットで可視化する	plt.plot(df[column], df[column])
環境がWindowsかどうか調べる	sys.platform.startswith('win32')
折れ線グラフをオレンジ色として描画する	plt.plot(データ列x, データ列y, color='orange')
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
変数を青色でプリントする	print(f'\033[34m{value}\033[0m')
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
option: ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
コマンド引数をリストとして得る	sys.argv[1:]
折れ線グラフを青い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
単位正方行列	np.identity(n)
データシリーズの不偏分散	ds.var(ddof=1)
データフレームのn行目をドロップし、みる	df.drop(n, axis=0)
データフレームの選択したカラムを丸める	df[['列A', '列B']].round()
キーが辞書に存在するか調べる	key in aDict
タプルのキーと値を入れ替える	{v: k for k, v in aDict.items()}
ヒストグラムをピーチパフ色として描画する	plt.hist(データ列, color='peachpuff')
n割るn2の切り上げ	(n + n2 - 1) // n2
文字列がタプルに含まれないか調べる	element not in aTuple
外れ値を除いたデータフレームのカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
データフレームをソートして、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
データ列をビン数nを用いてビン分割する	pd.cut(ds, n)
option: 白色を用いる	color = 'white'
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
nがタプルのどれかか調べる	n in aTuple
パレットトルコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
データフレームのn行目まで取り出す	df[:n]
折れ線グラフの丸マーカーの色を変える	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
赤い星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='r')
リストの中の一番大きい値	max(aList)
データフレームをある列によって並べ直す	df.sort_values(by='列A')
部分文字列か	sub in s
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
option: グラフの色をブラックに設定する	color = 'black'
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
option: グラフの色をロイヤルブルーに変更する	color = 'royalblue'
横棒グラフをライトシアン色として描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
散布図に▲マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
縦棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームからランダムに抽出する	df.sample()
再帰が何回までできるかを	sys.getrecursionlimit()
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
カテゴリ別で色分けして、データフレームをに箱ひげ図で描画する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
リストとリストについて散布図を描き、、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
オブジェクトのポインタ	id(obj)
option: グラフの色をライトグリーンに変更する	color = 'lightgreen'
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
文字列が小文字かどうか確認する	s.islower()
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
三変数の最大値	max(x, y, z)
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
既存のベクトルを元にして全要素が0のベクトルを作る	np.zeros_like(aArray)
貝殻にヒストグラムの色を設定する	plt.hist(データ列, color='seashell')
標準入力を使う	sys.stdin
ファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
散布図の左三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
文字列の両端から部分文字列を除く	s.strip(sub)
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
nが偶数	n % 2 == 0
option: ゲインズボロ色を用いる	color = 'gainsboro'
option: ライトグリーン色を使う	color = 'lightgreen'
配列のユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
折れ線グラフの丸印を青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
二つの浮動小数点数が十分に近いかどうか調べる	math.isclose(x, x2)
配列とリストについて散布図を描画し、、マーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
データ列とリストの散布図を描いて、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ピアソンでデータフレームの相関行列を求める	df.corr(method='pearson')
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
カラムがどの程度、分散しているか見る	df['列A'].var()
配列を等間隔でn個に分割する	pd.cut(aArray, n)
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
値が集合に含まれるか調べる	element in aSet
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
文字列の終了位置より前に部分文字列が存在しないか判定する	s.find(sub, 0, end) == -1
ふたつの列からグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
縦棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
option: パウダーブルー色を使う	color = 'powderblue'
option: 改行をセパレータで使う	sep = '\n'
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
データフレームの選択した列の未入力値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
グラフの横軸に説明をつける	plt.xlabel('x軸ラベル')
タプルの最初の文字列を探す	aTuple.index(element)
option: ブール型を使う	dtype = np.int32
rgbのダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
縦棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
文字列全体が正規表現にケースを無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
ミディアムパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
日付データにn時間を加算する	aDate + datetime.timedelta(hours=n)
データフレームのあるカラムを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
散布図をダークカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
表データの末尾n行を取り出す	df.tail(n)
year年month月day日の日付をオブジェクト化する	datetime.date(year=year, month=month, day=day)
レベッカパープルにヒストグラムの色をする	plt.hist(データ列, color='rebeccapurple')
文字列の右側から空白を消す	s.rstrip()
nをn2で割る	n / n2
十六進数字を使う	string.hexdigits
モデルを学習する	model.fit(説明変数, 目的変数)
プロットの色使いを色差別なくする	sns.set(pallete='colorblind')
データフレームをCSV形式に小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
整数nがセットのどれかか調べる	n in aSet
option: マーカーの色を赤にする	markerfacecolor = 'red'
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
棒グラフをダークスラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategray')
リストから文字列を取り除く	aList.remove(element)
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
option: グラフの色をフクシアに設定する	color = 'fuchsia'
インディゴにヒストグラムの色をセットする	plt.hist(データ列, color='indigo')
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
ダークスレートブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
黒い大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
ふたつの列を組み合わせてグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
表計算ファイルから全てのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
ある列の文字列が部分文字列で終わらない行を抽出する	df[~ df['列A'].str.endswith(部分文字列)]
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
散布図の四角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
タイムスタンプ型のデータフレームのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
ビン数nとしてデータフレームの中の列をビンニングする	pd.cut(df[col], n)
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
プロットの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
文字列リストにイテラブルを変換して、空白によって連結する	' '.join(map(str, iterable))
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
データ列の折れ線グラフを星印で描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームのカラム概要を見る	df.info()
折れ線グラフの色をシアンにセットする	plt.plot(データ列x, データ列y, color='cyan')
横棒グラフを描いて、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ゴーストホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
ふたつのリストの積集合	list(set(aList) & set(aList2))
大バツマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
option: ライトシアン色を使う	color = 'lightcyan'
グリーン色としてヒストグラムを描画する	plt.hist(データ列, color='green')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
プログラムのファイルの名前	sys.argv[0]
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
データフレームの代表値	df.describe()
コマンドライン引数	sys.argv
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフの色をミディアムアクアマリンにする	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: グラフの色をミントクリームに設定する	color = 'mintcream'
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
スレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
半透明の実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
最初の部分文字列で文字列を分けたときの残りの文字列を使う	s.partition(sub)[-1]
空文字	''
カラムの未入力値を最大値に設定する	df['列A'].fillna(df['列A'].max())
散布図に赤い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームの指定したカラムを百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
ゴールド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
数列を縦棒グラフにする	plt.bar(ラベル列, データ列)
行列が何次元か調べる	aArray.ndim
列と列のデカルト積を算出する	itertools.product(iterable, iterable2)
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
option: ピーチパフにグラフの色を指定する	color = 'peachpuff'
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
option: コロンをセパレータで使う	sep = ':'
ダークシアグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
nがn2より大きいか	n > n2
option: オールドレースにグラフの色を指定する	color = 'oldlace'
ある列の値がx以下の行を抽出する	df[df['列A'] <= x]
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
タプルとタプルを連結する	aTuple + aTuple2
ある列の文字列が部分文字列で終わらない行を取り出す	df[~ df['列A'].str.endswith(部分文字列)]
データフレームがどの程度分散しているか調べる	df.var()
タプルを反転する	reversed(aTuple)
実数を切り下げる	math.floor(x)
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
x,yの複素数を計算する	complex(x, y)
option: ミッドナイトブルー色を用いる	color = 'midnightblue'
行列の内積を計算する	np.dot(aArray, aArray2)
文字列の無限イテラブル	itertools.repeat(element)
マッピングをコピーする	dict(aDict)
ヒストグラムの線種を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
リストの値を空にする	aList.clear()
option: マーカーの色をダークブルーにする	markerfacecolor = 'darkblue'
xの小数点以下'2'桁の文字列にする	':.2f'.format(x)
データフレームのカウントプロットをプロットする	sns.countplot(x='列名', data=df)
グラフの描画でパステル調にカラーパレットを用いる	sns.set(pallete='pastel')
箱ひげ図でデータ列を描画する	plt.boxplot(データ列)
双方向キューの大きさを算出する	len(deq)
ヒストグラムの色をローングリーンに指定する	plt.hist(データ列, color='lawngreen')
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
カウンタを多い方からリストとして得る	aCounter.most_common()
タプルの先頭を捨てる	aTuple[1:]
折れ線グラフに丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
カウンタ間でインターセクション演算する	aCounter & aCounter2
ヒストグラムの色をミディアムバイオレットレッドに指定する	plt.hist(データ列, color='mediumvioletred')
x軸の目盛の表示値を変更する	plt.xticks(目盛りの値リスト)
ヒストグラムの色をスプリンググリーンに変更する	plt.hist(データ列, color='springgreen')
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
実数を実数で割る	x / y
分子n、分母mの分数を作る	fractions.Fraction(numerator=n, denominator=m)
大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X')
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフの線の種類を破線に指定する	plt.plot(データ列x, データ列y, linestyle='dashed')
xが-9以上9以下か	-9 <= x <= 9
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
リストのn番目以降の部分を取り出す	aList[n:]
カラムの最大幅をnに変更する	pd.set_option('max_colwidth', n)
散布図を黒いダイアモンドマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: ミディアムスプリンググリーン色を用いる	color = 'mediumspringgreen'
データフレームの欠損値をモードで補う	df.fillna(df.mode().iloc[0])
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
サポートベクター回帰モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
配列の尖り	scipy.stats.kurtosis(配列, bias=False)
xの小数点以下'5'桁までの文字列にする	':.5f'.format(x)
イテラブルからサンプリングする	random.sample(iterable)
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: グラフの色をターコイズに設定する	color = 'turquoise'
文字列を走査し正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
option: 三角マーカーを描画する	marker = '^'
指定したカラムの欠損値を第二四分位数で埋める	df['列A'].fillna(df['列A'].median())
データフレームの全列の相関を可視化する	sns.pairplot(df)
データフレームをグループ化し、ある列に対し個数を求める	df.groupby('列A')['列B'].count()
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
option: レモンシフォン色を使用する	color = 'lemonchiffon'
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
リストと配列についての散布図に赤い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
データフレームの列の未入力値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
ヒストグラムの色をライトスカイブルーに変更する	plt.hist(データ列, color='lightskyblue')
色付きの点線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ヒストグラムをシルバー色として描画する	plt.hist(データ列, color='silver')
option: 暗い赤にグラフの色を設定する	color = 'darkred'
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
２つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
新しいリッジ回帰とロッソ回帰のハイブリットモデルを準備する	model = sklearn.linear_model.ElasticNet()
データフレームのある列をドロップしてみる	df.drop('列A', axis=1)
ヒストグラムの色をパールバイオレットレッドにする	plt.hist(データ列, color='palevioletred')
マッピングに要素を項目名として加える	aDict[key] = element
列名を指定してデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
year年month月day日hour時のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ベージュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
nを切り捨てながらn2分の一にする	n //= n2
サポートベクターマシンを用いて回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: バッファを使わない	buffering = 0
データ列を使う	import pandas as pd
option: グラフの色をライムにする	color = 'lime'
変数を水色で表示できる文字列に変換する	f'\033[36m{value}\033[0m'
暗い赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
ラベル付きの円プロットを描く	plt.pie(データ列, startangle=90, labels=ラベル列)
TSVファイルから文字エンコーディングを指定してデータフレームを読む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
option: 色をオリベドラブにする	color = 'olivedrab'
TSVファイルを読む	pd.read_csv('file.tsv', sep='\t')
二つの列によってデータフレームをグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
散布図の三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
指定した列のカテゴリで集計し、各最大値を算出する	df.groupby('列A').max()
文字列がパターンにマッチさせる	re.match(pattern, s)
ヒストグラムを点線として描画する	plt.hist(データ列, linestyle='dotted')
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
横棒グラフをフクシア色を用いて描画する	plt.barh(データ列x, データ列y, color='fuchsia')
データフレームを列によってまとめたグループ	df.groupby('列A')
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
数式の変数についてのn階微分を行う	sympy.diff(e, z, n)
空のチェーンマップ	collections.ChainMap()
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
データフレームを二つの列で小さい順に破壊的に並べる	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
スチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='steelblue')
グラフの色テーマを指定する	sns.set(pallete=パレット名)
折れ線グラフの左三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
縦棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
整数nの2進数表現	bin(n)
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフに上三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
整数nの十六進文字列を使う	hex(n)[2:]
線形モデルの回帰変数	model.coef_
縦棒グラフをリネン色を用いて描画する	plt.bar(データ列x, データ列y, color='linen')
文字列中にひとつでも非英数字が含まれる	any(not c.isalnum() for c in s)
今日が木曜日か調べる	datetime.datetime.today().weekday() == 3
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
リストをnからナンバリングする	enumerate(aList, start=n)
青い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
データフレームのカラムの種類	df.info()
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
rgbのバツマーカーをイテラブルとデータ列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
グラフの使途を論文に設定する	sns.set(context='paper')
リストとデータ列についての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
日付時刻データのタイムゾーンを求める	aDatetime.timetz()
ベージュにヒストグラムの色をする	plt.hist(データ列, color='beige')
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
赤い実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
線グラフの色をネイビーに指定する	plt.plot(データ列x, データ列y, color='navy')
データフレームの選択したカラムの標本分散	df[['列A', '列B']].var(ddof=0)
ファイルのフォルダ名を使う	os.path.dirname(filepath)
nがn2の倍数でないかどうか	n % n2 != 0
スチールブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
度数分布図の描画して、正規化する	plt.hist(データ列, density=True)
データシリーズの値をValueMapでまとめて置き換える	ds.replace(ValueMap)
文字列をマゼンタ化する	f'\033[35m{value}\033[0m'
全句点文字	string.punctuation
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
ドジャーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
表データが重複し、いるか調べる	df.duplicated()
型のサブクラスか調べる	issubclass(サブクラス, クラス)
option: グラフの色をホットピンクに変更する	color = 'hotpink'
option: ミディアムアクアマリン色を用いる	color = 'mediumaquamarine'
赤い▽マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
rgbの左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ファイルの拡張子を使う	os.path.splitext(filepath)[1].lstrip('.')
リストにシーケンスを続ける	itertools.chain(iterable, iterable2)
データフレームのあるカラムの曜日数	df['列A'].dt.dayofweek
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
を用いてデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
タイムスタンプデータが水曜日	aDatetime.weekday() == 2
リストの末尾からn番目以前の要素を取り出す	aList[:-n]
データフレームに重複があるか調べる	df.duplicated()
色付きの実線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
行列の行ごとの最小	np.min(aArray, axis=1)
データフレームをCSVファイルに小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
散布図をピンク色として描画する	plt.scatter(データ列x, データ列y, color='pink')
タイムスタンプデータからn日分減算する	aDatetime - datetime.timedelta(days=n)
改行なしに二つの文字列を表示する	print(value, value2, end='')
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
初期値で全要素を初期化した行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
文字列の左側の空白を取り除く	s.lstrip()
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
リスト内の要素は少なくともひとつ真か調べる	any(aList)
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
散布図の右三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
文字列中に部分文字列がないか調べる	sub not in s
データフレームの一部のカラムの統計量	df[['列A', '列B']].describe()
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
重回帰分析を行う	model = sklearn.linear_model.LinearRegression()
option: グリーンイエローにグラフの色をセットする	color = 'greenyellow'
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
option: フローラルホワイト色を使う	color = 'floralwhite'
option: グラフの色をライトグレーに設定する	color = 'lightgray'
データフレームの指定したカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
タイムスタンプデータが何秒か知る	aDatetime.second
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
データフレームの列間の相関行列を一度に求める	df.corr()
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
配列のスカラー倍	aArray * n
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
２つの整数の最大公約数	math.gcd(n, n2)
外れ値に強い線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
散布図の丸印を赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
ファイルパスをオープンして]バイナリ書き込みストリームを見る	open(filepath, mode='wb')
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
リストとリストの散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
ルートのチェーンマップ	collections.ChainMap()
クラス名が名前付きタプル	issubclass(C, tuple)
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
棒グラフをグリーンイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='greenyellow')
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
文字列を部分文字列を用いて二分する	s.partition(sub)
偽陽性を抑えたい指標を使用する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
FIXME	np.linalg.eig(aArray)
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
縦棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
二つのリストから辞書を作る	dict(zip(aList, aList2))
データフレームの指定したカラムの中にある日付データの合計を数える	df['列A'].isin([value]).sum()
ヒストグラムを赤色として描画する	plt.hist(データ列, color='red')
ファイルのファイル名	os.path.basename(filepath)
作画を正方形にする	plt.axis('equals')
データシリーズを1000の位で四捨五入して、整数にする	ds.round(-3).astype(int)
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
実数の二乗	x ** 2
nが5で割り切れるか調べる	n % 5 == 0
データフレームから同じ内容の行を破壊的にドロップする	df.drop_duplicates(inplace=True)
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
前の行の値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(method='ffill')
赤い線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
折れ線グラフの四角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
散布図に丸印を使う	plt.scatter(データ列x, データ列y, marker='o')
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
指定した列の値で集計し、平均値を求める	df.groupby('列A').mean()
両端キューから最初の要素を取り除く	deq.remove(element)
ライトサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
ヒストグラムの色をレモンシフォンにセットする	plt.hist(データ列, color='lemonchiffon')
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
折れ線グラフをやわらかい青色を用いて描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
本日が水曜日かどうか調べる	datetime.datetime.today().weekday() == 2
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
option: グラフの色をチョコレートに設定する	color = 'chocolate'
nが正の数か調べる	n > 0
文字列中の部分文字列を文字列に全て置き換える	s.replace(sub, newsub)
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s')
指定した列のカテゴリで集計しそれぞれの個数を求める	df.groupby('列A').count()
データシリーズの空文字をドロップする	ds.replace('', np.nan).dropna()
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
グリッドを点線にする	plt.grid(linestyle='dotted')
組をナンバリングする	enumerate(aTuple)
文字列は組に含まれない	element not in aTuple
タイムスタンプデータををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
列にイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
折れ線グラフの下三角印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
辞書の値に要素が含まれていないか	element not in aDict.values()
ダークオレンジにヒストグラムの色を指定する	plt.hist(データ列, color='darkorange')
カウンタのそれぞれの項目を出現回数だけ列挙する	aCounter.elements()
option: ミスティローズ色を使う	color = 'mistyrose'
データフレームの先頭10行	df.head(10)
option: ライトサーモン色を使う	color = 'lightsalmon'
ダークオリーブグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkolivegreen')
棒グラフをやわらかい青色を用いて描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
真紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
目盛り線	plt.grid(linewidth=3.0)
データ列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
option: BOM付きを用いる	encoding = 'utf_8_sig'
データフレームの重複した行を取り出す	df[df.duplicated(keep=False)]
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
コーパスのバージョン	version = 'wcce2022-0.1'
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
ヒストグラムの色をディープスカイブルーに指定する	plt.hist(データ列, color='deepskyblue')
データフレームの指定したカラムの中に日付データがあるか調べる	df['列A'].isin([value])
日付データが火曜日かどうか調べる	aDate.weekday() == 1
空列を得る	[]
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
option: セパレータをカンマにする	sep = ','
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
オブジェクトは辞書型か調べる	isinstance(obj, dict)
eの実数乗を算出する	math.exp(x)
線グラフを赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
文字列をUTF8でバイト列にする	s.encode(encoding='utf-8', errors='strict')
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
option: グラフの色をペルーに設定する	color = 'peru'
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
棒グラフを濃いシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ヒストグラムをターコイズ色として描画する	plt.hist(データ列, color='turquoise')
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
データシリーズの歪度	ds.kurt()
行列のユニークな要素とそのインデックスを計算する	u, indices = np.unique(aArray, return_index=True)
真上位集合か	aSet > aSet2
マゼンタ色としてヒストグラムを描画する	plt.hist(データ列, color='magenta')
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
両端キューのstart番目からend番目の要素	collections.deque(itertools.islice(deq, start, end))
折れ線グラフをデピンク色を使って描画する	plt.plot(データ列x, データ列y, color='deeppink')
イテラブルとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
グラフをポスターに変更する	sns.set(context='poster')
横棒グラフをアリスブルー色として描画する	plt.barh(データ列x, データ列y, color='aliceblue')
コレクションを用いる	import collections
データフレームのあるカラムを百の位で丸める	df['列A'].round(-2)
文字列が全て英数字か確認する	s.isalnum()
組の末尾の要素を使う	aTuple[-1]
淡い茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
ふたつの辞書をマージする	aDict | aDict2
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレームを散布図で描画し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
パールバイオレットレッドにヒストグラムの色を変更する	plt.hist(データ列, color='palevioletred')
濃くパレットをグラフの描画で使う	sns.set(pallete='deep')
rgbのポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: ミントクリームを使う	color = 'mintcream'
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
実数を実数で割った剰余	math.remainder(x, x2)
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームのカラムにおいてどの値が頻出か見る	df['列A'].mode()
線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
ラベンダーブラッシュ色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
プラム色でヒストグラムを描画する	plt.hist(データ列, color='plum')
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
パレットトルコイズにヒストグラムの色を設定する	plt.hist(データ列, color='paleturquoise')
折れ線グラフの色をマゼンタに指定する	plt.plot(データ列x, データ列y, color='magenta')
部分文字列か調べる	sub in s
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
縦棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
パープル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
乱数生成系列をnで固定する	random.seed(n)
折れ線グラフをサンディーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='sandybrown')
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
UNIX秒のカラムから日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
貝殻色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
色付きの点線でイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
色付きの実線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgray')
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
横棒グラフを小麦色色を用いて描画する	plt.barh(データ列x, データ列y, color='wheat')
サブセットか調べる	aSet.issubset(aSet2)
リストをn回、加える	aList * n
リストとしてデータフレームのある列を選択する	df['列A'].values.tolist()
部分文字列で部分文字列が始まる	s.startswith(sub)
線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
数列とリストについて散布図を描いて、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
option: ミントクリームにグラフの色を設定する	color = 'mintcream'
データフレームの欠損値を直前の値に指定する	df.fillna(method='ffill')
小文字を全部使う	string.ascii_lowercase
データフレームのある列の第三四分位数	df['列A'].quantile(0.75)
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
折れ線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
散布図に四角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='s')
行列の計算をする	import numpy as np
option: グラフの線の種類を一点鎖線に設定する	linestyle = 'dashbot'
文字列を部分文字列で二分し後半の文字列を使う	s.partition(sub)[-1]
文字列内にアスキー文字が含まれるか	any(c.isascii() for c in s)
散布図をパールゴールデンロッド色を使って描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
折れ線グラフの上三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: ライトイエローを用いる	color = 'lightyellow'
集合にシーケンスの要素を全て追加する	aSet.update(iterable)
散布図をロージーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
２つのデータフレームをジョインする	pd.merge(df, df2)
ふたつの関係が上位集合もしくは等しい	aSet > aSet2
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
リストとリストを接続する	aList + aList2
本日が月曜日	datetime.datetime.today().weekday() == 0
2つの変数を改行で区切って表示する	print(value, value2, sep='\n')
折れ線グラフの印をバツにする	plt.plot(データ列x, データ列y, marker='x')
散布図をホットピンク色として描画する	plt.scatter(データ列x, データ列y, color='hotpink')
データフレームの不偏分散を求める	df.var(ddof=1)
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
データフレームをヘッダを付けず保存する	df.to_csv('file.csv', header=None)
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
文字列を区切りで区切り、、列挙する	s.split(sep)
低頻度な方からカウンタをリストとして得る	aCounter.most_common()[::-1]
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
文字列を太字化する	f'\033[1m{value}\033[0m'
行列の列ごとの平均値	np.mean(aArray, axis=0)
マッピングをカウンタに変換する	collections.Counter(aDict)
棒グラフをピーチパフ色として描画する	plt.bar(データ列x, データ列y, color='peachpuff')
列のユニークな要素	ds.unique()
丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o')
文字列が全て英数字か調べる	s.isalnum()
データ列を全て日付データに変換する	pd.to_datetime(ds)
実数を実数で割って、切り捨てる	x // y
データシリーズの中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
タプルをひとつ飛ばしで取り出す	aTuple[::2]
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
option: マルーンにフォントの色を変更する	color = 'maroon'
整数nを八進数リテラルに変換する	oct(n)
オブジェクトのポインタを見る	id(obj)
option: ロイヤルブルー色を使う	color = 'royalblue'
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームから10行、サンプリングする	df.sample(10)
双方向キューに要素をエンキューする	deq.appendleft(element)
日付時刻データが日付時刻データより後ろ	aDatetime > aDatetime2
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
データシリーズの記述統計量	ds.describe()
散布図に大バツマーカーを加える	plt.scatter(データ列x, データ列y, marker='X')
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
正接の逆数	math.atan(x)
三つのデータフレームを縦に結合する	pd.concat([df, df2, df3], axis=1)
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
リストを引数として展開して表示する	print(*aList)
指定した列のカテゴリで集計しそれぞれの最小値を求める	df.groupby('列A').min()
名前からカラーマップを求める	"plt.get_cmap(""カラーマップ名"")"
グラフの中のy座標に名前を付ける	plt.ylabel('y軸ラベル')
option: マーカーの色を青にする	markerfacecolor = 'blue'
rgbの星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
双方向キューの要素をインプレースに逆順にする	deq.reverse()
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
データ列の各データ値の出現回数	ds.value_counts()
実数の常用対数を計算する	math.log10(x)
文字列をセンタリングにする	s.center(文字列幅)
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
デピンク色でヒストグラムを描画する	plt.hist(データ列, color='deeppink')
オーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='orchid')
棒グラフをゴールド色を用いて描画する	plt.bar(データ列x, データ列y, color='gold')
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
ファイルからn文字、読み込む	f.read(n)
ユニークな値を要素とする配列を求める	np.unique(aArray)
データフレームをSJISでカンマ区切り形式に保存する	df.to_csv('file.csv', encoding='shift_jis')
データシリーズの中の欠損値の合計を数える	ds.isna().sum()
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
縦棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
option: フォントの色をロージーブラウンにする	color = 'rosybrown'
option: 降順にする	ascending = False
option: ゴーストホワイト色を使う	color = 'ghostwhite'
二つのオブジェクトが等しいかどうか調べる	obj == obj2
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
option: ライトスカイブルー色を用いる	color = 'lightskyblue'
文字列がリストの要素かどうか調べる	element in aList
ヒストグラムを一点鎖線として描画する	plt.hist(データ列, linestyle='dashbot')
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
整数nを八進文字列に変換する	oct(n)[2:]
散布図をゲインズボロ色として描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
表データの指定した二つの列を抽出する	df[['列A', '列B']]
昨日の日付を使う	datetime.date.today() - datetime.timedelta(days=1)
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
リストと配列についての散布図を大きさnでプロットする	plt.scatter(データ列x, データ列y, s=n)
データシリーズの平均値	ds.mean()
option: シエナに色を設定する	color = 'sienna'
上限nの両端キューをイテラブルから生成する	collections.deque(iterable, maxlen=n)
縦棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
オレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
点線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームのインデックスの名前をまとめて付け直す	df.rename(index={x: y})
文字列に日本語が使われているか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
文字列を空白によって区切る	s.split()
ディープスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
アクアマリン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
カラーバーを付ける	plt.colorbar()
データフレームをある列によって降順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
棒グラフをフォレストグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='forestgreen')
配列の個数	aArray.size
棒グラフを貝殻色を使って描画する	plt.bar(データ列x, データ列y, color='seashell')
t分布型確率的近傍埋め込み法を行う	model = sklearn.manifold.TSNE(n_components=n)
データシリーズを千の位で四捨五入して整数にする	ds.round(-3).astype(int)
文字列の中のASCII限定としてパターンによるすべてのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
二つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
option: バイアスを算出しない	fit_intercept = False
データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
白色としてヒストグラムを描画する	plt.hist(データ列, color='white')
option: レモンシフォンにグラフの色を設定する	color = 'lemonchiffon'
option: ヘッダを自動的な連番に設定する	header = None
折れ線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
散布図のバツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
データフレームの数値を全部四捨五入する	df.round()
ダークオレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
黒い星マーカーをデータ列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: ゴールデンロッド色を用いる	color = 'goldenrod'
折れ線グラフの▼印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフに四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
データフレームのカラムの尖りを算出する	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームの指定した列の中の欠損値の合計を数える	df['列A'].isna().sum()
データフレームの中である列に重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
実数の絶対値	math.fabs(x)
線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
日付データの曜日を使う	aDate.weekday()
ヒストグラムをライム色を使って描画する	plt.hist(データ列, color='lime')
実数の平方根	math.sqrt(x)
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
折れ線グラフのクロス印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
十六進文字列をバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
折れ線グラフを色付きの破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか確認する	s.find(sub, start, end) == -1
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
実数を小数点以下で四捨五入する	round(x, n)
今日をISO書式の文字列にする	datetime.datetime.today().isoformat()
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
配列とリストについて散布図を描画し、、マーカーを左三角に指定する	plt.plot(データ列x, データ列y, marker='<')
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
正規分布に従うか仮説検定する	scipy.stats.shapiro(配列)
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
散布図の大バツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
正則化付き重回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
タプルの末尾を取り除く	aTuple[:-1]
線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
ベクトル間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームのn行目を抽出する	df.loc[n]
文字列が全てアスキー文字か	s.isascii()
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: 三角マーカーを加える	marker = '^'
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
option: ブルーバイオレットを用いる	color = 'blueviolet'
実数で浮動小数点数を割る	x / y
x座標の目盛を非表示にする	plt.xticks([])
ヒストグラムをオールドレース色として描画する	plt.hist(データ列, color='oldlace')
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
option: オールドレース色を使う	color = 'oldlace'
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
整数nの二進数表現	bin(n)
日付データをn秒前にする	aDate - datetime.timedelta(seconds=n)
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
ディレクトリをPythonパスに追加する	sys.path.append(dir)
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
オーキッド色でヒストグラムを描画する	plt.hist(データ列, color='orchid')
ファイルに文字列を書き込む	f.write(s)
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
プラットフォームの符号付き整数の最大値	sys.maxsize
線グラフの色をペールグリーンに変更する	plt.plot(データ列x, データ列y, color='palegreen')
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
ダークオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkorchid')
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
整数nを二進表現に変換する	bin(n)
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
散布図に赤いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームの選択したカラムの空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
二つの列からグループ化し最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
リストを順にプリントする	print(*aList)
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
配列の相乗平均を求める	scipy.stats.gmean(配列)
カウンタの項目をリストとして得る	aCounter.keys()
散布図の丸印の色を指定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
配列の各要素の最大公約数	np.gcd(aArray, aArray2)
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
option: コーラル色を使う	color = 'coral'
線グラフの色を暗い赤にセットする	plt.plot(データ列x, データ列y, color='darkred')
option: ダークグレー色を使う	color = 'darkgrey'
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ラベンダー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
両端キューからポップする	deq.pop()
データシリーズの第一四分位数	ds.quantile(0.25)
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
タイムスタンプデータが何分か知る	aDatetime.minute
カウンタからゼロカウントを取り出す	+aCounter
青紫色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
指定したカラムのカテゴリで集計し、それぞれの最大値を求める	df.groupby('列A').max()
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
year年month月day日の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
折れ線グラフの色をリネンに指定する	plt.plot(データ列x, データ列y, color='linen')
1からNまでの配列	np.arange(1, N+1)
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
横棒グラフをパパイヤウィップ色として描画する	plt.barh(データ列x, データ列y, color='papayawhip')
縦棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
パーセント付きの円グラフを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
縦棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
日付時刻データの秒数	aDatetime.second
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
数式のパラメータの解を方程式として求める	sympy.solve(e, z)
黄色い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
分類モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
でデータフレームの選択した列の相関行列を算出する	df[['列A', '列B']].corr(method='kendall')
リストとリストの散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
文字列を最後の部分文字列で二つに区切って最初の文字列を使う	s.rpartition(sub)[0]
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
option: ダークグレー色を用いる	color = 'darkgray'
データフレームの選択した列の欠損値を最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
指定した値として二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
データフレームから10行サンプリングする	df.sample(10)
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
文字列がタプルに含まれるか調べる	element in aTuple
線形回帰モデルを当てはめる	model.fit(説明変数, 目的変数)
文字列がリストに含まれる	element in aList
整数nを二進表現にする	bin(n)
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
色名をからコードに変換する	matplotlib.colors.cnames[色名]
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームを表示するとき、小数点以下の表示精度を指定する	pd.set_option('precision', n)
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
option: マーカーの色を濃い青にする	markerfacecolor = 'darkblue'
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
nまでの偶整数リスト	list(range(2, n, 2))
ミディアムブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumblue')
黄色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
日付時刻データが日付時刻データと同時かテストする	aDatetime == aDatetime2
データフレームの指定したカラムを百の位で丸める	df['列A'].round(-2)
縦棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
ロージーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
option: ダークオレンジを使う	color = 'darkorange'
表データのあるカラムが何曜日か知る	df['列A'].dt.weekday_name
データフレームをソートする	df.sort_values('キーとなる列')
タプルをn倍する	aTuple * n
option: ダークグリーンを使う	color = 'darkgreen'
列の各要素に対して、predicateFuncの適用がTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
データフレームを小さい順に二つの列によってソートし、、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
配列のピアソンの相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
ダークゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
イテラブルとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
ミディアムブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
配列のトリム平均を見る	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
リストとデータ列の散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
ふたつの集合の交わり	aSet.intersection(aSet2)
option: コーラルを使用する	color = 'coral'
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
列の各データは何回出現するか調べる	ds.value_counts()
option: パールバイオレットレッド色を使う	color = 'palevioletred'
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
CSV形式にデータフレームを小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
散布図の左三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
ゴールデンロッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
ヒストグラムの色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
横棒グラフをゴールデンロッド色を使って描画する	plt.barh(データ列x, データ列y, color='goldenrod')
組の合計値を計算する	sum(aTuple)
縦棒プロットを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームの最初n行	df.head(n)
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
パウダーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
折れ線グラフの色をシエナにセットする	plt.plot(データ列x, データ列y, color='sienna')
文字列をユニコード列に変換する	[ord(ch) for ch in s]
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
option: ミントクリーム色を使用する	color = 'mintcream'
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
表データのn行目をドロップしてみる	df.drop(n, axis=0)
マッピングのエントリ数	len(aDict)
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
連立方程式の解を算出する	sympy.solve([e, e2])
データフレームを散布図で可視化してカテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
option: 色を淡い茶色に設定する	color = 'tan'
列の長さを制限する	collections.deque(iterable, maxlen=n)
散布図に下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
リストの先頭を除く	aList[1:]
CSVのn行目を行としてロードする	pd.read_csv('file.csv', index_col=n)
データフレームの中のカラムを四分位数ごとにビン分割する	pd.qcut(df[col], 4)
乱数の行列	np.random.random((行数, 列数))
リストを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
オプションでファイルを使う	file = sys.open(filename, 'w')
option: フォントの色をアンティークホワイトに設定する	color = 'antiquewhite'
option: 赤色を使う	color = 'red'
事前にパターンをコンパイルする	re.compile(pattern)
横軸の目盛に文字列を設定する	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
整数nが配列のどれかか確認する	n in aArray
棒グラフをプラム色として描画する	plt.bar(データ列x, データ列y, color='plum')
スピアマンの順位相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
上位集合か調べる	aSet.issuperset(aSet2)
空の多重集合	collections.Counter()
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
配列の次元数を計算する	aArray.ndim
標準エラーを得る	sys.stderr
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
文字列を最後の部分文字列で分けたときの後半の文字列を取り出す	s.rpartition(sub)[-1]
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
縦棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
データフレームのカラムのピアソンの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
アンティークホワイト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
ミディアムスプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: サンディーブラウン色を使う	color = 'sandybrown'
日付データが土曜日か調べる	aDate.weekday() == 5
データフレームを表示するとき、表示できる最大行数をnに設定する	pd.set_option('display.max_rows', n)
L2ノルムで正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
青色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
等間隔でn個にリストを分割する	pd.cut(aList, n)
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
文字列を最後から空白で区切る	s.rsplit()
折れ線グラフを白色を用いて描画する	plt.plot(データ列x, データ列y, color='white')
Pythonのバージョン	sys.version
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
文字列中のひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームの次元の大きさ	df.shape
ラベンダー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
データシリーズが何時か知る	ds.dt.hour
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
option: グラフの色をティールに指定する	color = 'teal'
文字列の左端から空白を消す	s.lstrip(' ')
option: フォントの色を青紫に設定する	color = 'violet'
文字列を黄色化する	f'\033[33m{value}\033[0m'
ヒストグラムの色をミディアムスプリンググリーンに指定する	plt.hist(データ列, color='mediumspringgreen')
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
option: ビスク色を使う	color = 'bisque'
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
option: ミディアムバイオレットレッドを使う	color = 'mediumvioletred'
ファイル名がTSVファイルか判定する	filename.endswith('.tsv')
縦棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
欠損値が存在する行をドロップし、みる	df.dropna()
option: グラフの色をコーラルに設定する	color = 'coral'
線グラフの色をタンに指定する	plt.plot(データ列x, データ列y, color='tan')
グリッド線	plt.grid(linewidth=3.0)
文字列は漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
日付データが何月か知る	aDate.month
ゴールド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
データフレームの選択した列の中にある文字列の合計を調べる	df[['列A', '列B']].isin([value]).sum()
option: マーカーをポイントに変える	marker = '.'
option: 改行コードを旧Macに変更する	newline = '\r'
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
ヒストグラムを暗い赤色として描画する	plt.hist(データ列, color='darkred')
option: シアン色を使う	color = 'cyan'
option: グラフの色をディープスカイブルーに指定する	color = 'deepskyblue'
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
ミディアムブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
オブジェクトが関数か	callable(obj)
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
グラフから格子を消す	plt.grid(False)
データ列の推移を青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
空の辞書	{}
配列と数列の散布図にrgbの大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
日付データは何年か知る	aDate.year
グラフを描画する	import matplotlib.pyplot as plt
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
集合が空でないか調べる	len(aSet) != 0
ライトブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
両端キューをイテラブルから用意する	collections.deque(iterable)
青いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
あるカラムの値がx以上、y未満の行を選択する	df[(x <= df['列A']) & (df['列A'] < y)]
option: ハニーデューを用いる	color = 'honeydew'
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
日付時刻データは何分か知る	aDatetime.minute
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
配列の形状	aArray.shape
三自然数の最小公倍数	math.lcm(n, n2, n3)
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
文字列がカタカナ	('ァ' <= ch <= 'ン')
日付時刻データを浮動小数点数にする	aDatetime.timestamp()
n番目の列を外したデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
散布図にrgbの菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: フォントの色をミディアムスプリンググリーンに指定する	color = 'mediumspringgreen'
線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
n個にデータ列を等間隔で分割する	pd.cut(ds, n)
新しいサポートベクター分類器を作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図に黒いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
緑色で文字列を表示する	print(f'\033[32m{value}\033[0m')
方程式として数値を解く	sympy.solve(e)
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
nがn2以下かどうか調べる	n <= n2
データフレームの最後5行を抽出する	df.tail(5)
リストを配列に変換する	np.array(aList)
データフレームをグループ化し、それぞれの合計を求める	df.groupby('列A').sum()
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
option: グラフの色をラベンダーに設定する	color = 'lavender'
ヒストグラムを描画し合計を1にする	plt.hist(データ列, density=True)
データフレームの選択したカラムの標本標準偏差を求める	df[['列A', '列B']].std(ddof=1)
ダークスラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
棒グラフをライトスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
散布図の大バツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
列名を指定して二つのデータフレームをジョインする	pd.merge(df, df2, on='列A')
線グラフの色をフクシアに変更する	plt.plot(データ列x, データ列y, color='fuchsia')
実数のタンジェント	math.tan(x)
切り捨てながらnを半分にする	n //= 2
ゴーストホワイト色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
オプションで、ファイルを使う	file = sys.open(filename, 'w')
折れ線グラフを青い実線として描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ヒストグラムの色をフクシアにセットする	plt.hist(データ列, color='fuchsia')
散布図の三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データシリーズの欠損値を直前の値に設定する	ds.fillna(method='ffill')
シアン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
rgbに棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
データフレームの中にいくつ欠損値があるかカウントする	df.isna().sum()
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
option: フォントの色をライトスレイグレーにセットする	color = 'lightslategrey'
データフレームの指定の列に重複があれば、除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
ライトシアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
option: NaNは例外を投げる	nan_policy = 'raise'
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
縦棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
データフレームから同じ内容の行を除く	df.drop_duplicates(inplace=True)
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
等間隔の配列を作成する＼	np.arange(開始値, 終了値, 等差)
プロットに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
折れ線グラフをアクア色を用いて描画する	plt.plot(データ列x, データ列y, color='aqua')
縦棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
横棒グラフの色をダークレッドにする	plt.barh(データ列x, データ列y, color='darkred')
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
ダークグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
データフレームを二つの列をキーにして大きい順に整列する	df.sort_values(by=['列A', '列B'], ascending=False)
データフレームの文字列を欠損値にする	df.replace(値, np.nan)
リストと配列について散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムを青くする	plt.hist(データ列, color='b')
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
データフレームにおいてどの値が頻出か調べる	df.mode()
線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
リストの要素をソートする	sorted(aList)
線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
リストをランダムにシャッフルする	random.shuffle(aList)
実線に線を設定する	plt.plot(データ列x, データ列y, linestyle='solid')
ケースを無視して正規表現を事前にコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
ダークシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
option: スラグレーにグラフの色を設定する	color = 'slategray'
整数乱数で要素を埋めた行列を作る	np.random.randint(開始値, 終了値, (行数, 列数))
データフレームの指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
option: マーカーを四角に変更する	marker = 's'
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
文字列が全て大文字か	s.isupper()
空行を表示する	print()
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
実数の双曲線正接	math.tanh(x)
データフレームをグループ化し、それぞれの最小値を求める	df.groupby('列A').min()
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
棒グラフをパパイヤウィップ色を用いて描画する	plt.bar(データ列x, データ列y, color='papayawhip')
シーケンスの重複コンビネーションを計算する	itertools.combinations_with_replacement(iterable, n)
回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
等差数列を配列にする	np.arange(開始値, 終了値, 等差)
一方に含まれ、他方に含まれない集合を計算する	aSet.difference(aSet2)
データフレームのn行目をドロップしてみる	df.drop(n, axis=0)
配列の次元を変形する	aArray.reshape(行数, 列数)
未初期化の配列	np.empty(要素数, dtype=np.int)
文字列を正規表現で分ける	re.split(pattern, s)
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
赤い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='r')
動作環境がMacOSか	sys.platform.startswith('darwin')
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフにポイントマーカーを加える	plt.plot(データ列x, データ列y, marker='.')
空のタプル	()
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
データフレームのある列をダミー変数にする	pd.get_dummies(df['列A'])
縦棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
横棒グラフをオレンジレッド色を使って描画する	plt.barh(データ列x, データ列y, color='orangered')
散布図の丸マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ミディアムバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
ゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
折れ線グラフを貝殻色を用いて描画する	plt.plot(データ列x, データ列y, color='seashell')
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
データフレームの指定した列の欠損値を直後の値に設定する	df['列A'].fillna(method='bfill')
ゼロ埋めされた配列	np.zeros(要素数)
配列をn個にビニングしてnamesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームのあるカラムが何月か見る	df['列A'].dt.month
option: グラフの色をビスクに設定する	color = 'bisque'
データフレームから100行をランダムに抽出する	df.sample(100)
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
日付時刻データをn時間前にする	aDatetime - datetime.timedelta(hours=n)
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
サーモンにヒストグラムの色をセットする	plt.hist(データ列, color='salmon')
データフレームをある列のカテゴリでグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
データフレームをグループ化し最小値を計算する	df.groupby('列A').min()
黒い星マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
nがn2以下、または、n3以上か	n <= n2 or n >= n3
ある列の欠損値をxに設定する	df['列A'].fillna(x)
日付データからn時間分、減らす	aDate - datetime.timedelta(hours=n)
データフレームの一部のカラムの尖度	df[['列A', '列B']].skew()
縦棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
変数をシアンでプリントする	print(f'\033[36m{value}\033[0m')
option: 左三角マーカーを使う	marker = '<'
データフレームの一部のカラムの分散を算出する	df[['列A', '列B']].var()
ロバスト回帰モデルを新規作成する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
option: グラフの色をライトスカイブルーに変更する	color = 'lightskyblue'
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
散布図でデータフレームの列を見る	sns.scatterplot(data=df, x='列名', y='列名')
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
大文字・小文字を無視して文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
文字列をバイト列に変換する	bytes(s)
nにn2をかける	n * n2
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
リストの値を昇順にソートする	sorted(aList, reverse=True)
option: EUCを使用する	encoding = 'euc_jp'
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
リストをnから順序付けする	enumerate(aList, start=n)
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
option: ライトグレーを使う	color = 'lightgrey'
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
バギングとしてクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
option: エクセルシート名を設定する	sheet_name = ['A', 'B']
option: グラフの色をホットピンクに設定する	color = 'hotpink'
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
option: 最大深さを設定する	maxdepth = n
文字列ひとつのタプル	(element,)
option: NaNを先頭にする	na_position = 'first'
nとn2の論理和	n | n2
JSON形式の文字列をデータに変換する	json.loads(jsonString)
データフレームの指定したカラムを小数点以下n桁で丸める	df['列A'].round(n)
文字列をパディングする	s.zfill(文字列幅)
散布図の左三角印を黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームの中の欠損値の合計を数える	df.isna().sum()
ミディアムアクアマリン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
リストの文字列が最初に見つかるインデックス	aList.index(element)
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
配列と同じ大きさの空ベクトルを作成する	np.empty_like(aArray)
ヒストグラムをビン数を設定して描画する	plt.hist(データ列, bins=区関数)
rgbの四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
xを論理値にする	bool(x)
文字列をセパレータで区切って、列挙する	s.split(sep)
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
散布図の▼印を青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームの列の種類	df.info()
文字列中の片仮名をひらがなにする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
散布図の▽マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
nにn2をかけた値をnに代入する	n *= n2
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
真上位集合	aSet > aSet2
スノー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
文字列中にひとつでも非アスキー文字が含まれる	any(not c.isascii() for c in s)
ミディアムターコイズ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
黒い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
リストと数列の散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
要素が集合に含まれるか調べる	element in aSet
イテラブルの組み合せ	itertools.combinations(iterable, n)
ヒストグラムをバイオレット色で描画する	plt.hist(データ列, color='violet')
option: シーグリーン色を使う	color = 'seagreen'
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
折れ線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
nがn2で割り切れる	n % n2 == 0
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
option: ナバホホワイト色を使用する	color = 'navajowhite'
カウンタからタプルを減らす	aCounter.subtract(aDict)
空文字を使う	''
自然数個からk個取り出した場合の順列の総数を求める	math.perm(n, k)
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
シスルにヒストグラムの色を設定する	plt.hist(データ列, color='thistle')
散布図の丸マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
データフレームの欠損値を前の行の値で置換する	df.fillna(method='ffill')
散布図に黒いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
縦棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
データフレームのある列をインデックスに指定する	df.set_index('列A')
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
データフレームをインデックスを付けず出力する	df.to_csv('file.csv', index=None)
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
単位行列	np.eye(行数, 列数)
散布図の上三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図をクリムゾン色として描画する	plt.scatter(データ列x, データ列y, color='crimson')
100行を重複ありでランダムにデータフレームからサンプリングする	df.sample(100, replace=True)
データフレームを関数によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
数で実数を割って、切り捨てる	x // y
データフレームの指定した列の名前一覧の列だけ選択する	df[columns]
データフレームから列名を複数指定して選択する	df[columns]
ブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
アクア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
右三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
実数を小数点以下で丸める	round(x, n)
データフレームの相関行列をスピアマン相関係数として求める	df.corr(method='spearman')
option: ミディアムシアグリーンを使う	color = 'mediumseagreen'
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
文字列をファイルに書く	f.write(s)
線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgray')
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
辞書から計数器を生成する	collections.Counter(aDict)
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
降順にデータフレームを二つの列を用いてソートする	df.sort_values(by=['列A', '列B'], ascending=False)
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
データフレームのn行目を削除してみる	df.drop(n, axis=0)
追加できるように既存のファイルパスを文字コードtextを用いて開く]	open(filepath, mode='a', encoding=text)
データフレームの選択したカラムの欠損値を最大値に増やす	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
折れ線グラフのダイアモンドマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
option: ドジャーブルー色を用いる	color = 'dodgerblue'
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
配列の和	aArray + aArray2
option: 先頭の行をヘッダに設定する	header = 0
グラフの用途を論文に設定する	sns.set(context='paper')
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
列を累積したイテラブル	itertools.accumulate(iterable, operator.mul)
データフレームの一部の列の相関行列	df[['列A', '列B']].corr()
文字列を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
リストとリストの散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
集合から任意の要素を取り出す	aSet.pop()
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
ヒストグラムをホワイトスモーク色として描画する	plt.hist(データ列, color='whitesmoke')
半透明の点線でイテラブルの変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
インデックスでデータフレームを降順で並べる	df.sort_index(ascending=False)
文字列の開始位置から終了位置までの範囲で部分文字列の登場回数を数える	s.count(sub, start, end)
カウンタのユニークな要素を列挙する	list(aCounter)
データシリーズの未入力値を最大値で補完する	ds.fillna(ds.max())
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
浮動小数点数の最大値を求める	sys.float_info.max
option: ラベンダーにグラフの色を設定する	color = 'lavender'
option: グラフの色をミディアムブルーに指定する	color = 'mediumblue'
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
棒グラフの色をバイオレットにする	plt.bar(データ列x, データ列y, color='violet')
データシリーズの尖度	ds.skew()
aListn番目から値をポップする	aList.pop(n)
横棒グラフをダークレッド色で描画する	plt.barh(データ列x, データ列y, color='darkred')
ホワイトスモーク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
nがn2以下	n <= n2
データフレームの指定した列の名前一覧の列を抽出する	df[columns]
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
異なる列をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
二次元組をフラット化する	sum(aTuple)
イエローグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
リストと数列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
option: ライトゴールドロディイエローにフォントの色を指定する	color = 'lightgoldenrodyellow'
ベクトルの個数	aArray.size
タイムスタンプデータの月数	aDatetime.month
カウンタ同士でユニオン演算する	aCounter | aCounter2
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
青い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームのあるカラムの時刻	df['列A'].dt.hour
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
文字列をシンボルに変換する	sympy.Symbol(s)
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
実数のn乗	x ** n
平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
浮動小数点数を十の位で丸める	round(x, -1)
ヒストグラムを紺碧色として描画する	plt.hist(データ列, color='azure')
ある列の文字列が部分文字列で始まる行を抽出する	df[df['列A'].str.startswith(部分文字列)]
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
散布図の色をバイオレットにする	plt.scatter(データ列x, データ列y, color='violet')
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
データフレームの中に文字列とがあるか調べる	df.isin([value, value2])
三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
特異値分解で多次元データをパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
データフレームの指定したカラムの不偏分散	df['列A'].var(ddof=1)
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
リストの最後を使う	aList[-1]
辞書からカウンタを作る	collections.Counter(aDict)
option: グラフの色をライトグレーに変更する	color = 'lightgrey'
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
リストを中央値でビン分割する	pd.qcut(aList, 2)
option: ライトグレーを使う	color = 'lightgray'
ナバホホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
option: 全体を計算対象にする	axis = None
イテラブルと配列の散布図を描画し、、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
配列間のスピアマンの相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
データフレームを10の位で丸める	df.round(-1)
option: スラグレー色を使う	color = 'slategray'
棒グラフをゴールド色として描画する	plt.bar(データ列x, データ列y, color='gold')
折れ線グラフの色をナバホホワイトに変更する	plt.plot(データ列x, データ列y, color='navajowhite')
リストとリストについて散布図を描画して、マーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
リストをタプルに変換する	tuple(aList)
option: バイナリモードに設定する	mode = 'rb'
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
新しいガウス過程分類器を準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
横棒グラフを真紅色で描画する	plt.barh(データ列x, データ列y, color='crimson')
コーンズシルク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
標準入力から1行読み取る	input()
下三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v')
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
ローングリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
オールドレース色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
パパイヤウィップにヒストグラムの色を設定する	plt.hist(データ列, color='papayawhip')
option: 色を黄色に設定する	color = 'yellow'
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
シードをnで固定する	random.seed(n)
option: ダークレッドを使う	color = 'darkred'
データシリーズの文字列を欠損値にする	ds.replace(値, np.nan)
最大長nの両端キューをイテラブルから作成する	collections.deque(iterable, maxlen=n)
option: 線幅を3.0ポイントに設定する	linewidth = 3.0
重複ありでデータフレームからランダムに100行をサンプリングする	df.sample(100, replace=True)
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
option: ライトグレーを用いる	color = 'lightgray'
option: ピンク色を使う	color = 'pink'
シーグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='seagreen')
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
xを浮動小数点数にする	float(x)
ファイルの入力ストリームを使う	open(filepath)
主成分分析を使って多次元データを淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
散布図の印を上三角にする	plt.scatter(データ列x, データ列y, marker='^')
浮動小数点数の仮数	math.frexp(x)[0]
option: 上三角印を描画する	marker = '^'
データ列と数列について散布図を描画し、、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
option: フォントの色をターコイズに設定する	color = 'turquoise'
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
データフレームの指定したカラムがどの程度分散しているか見る	df['列A'].var()
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
横棒グラフをライトサーモン色として描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
デピンク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
リストの末尾から値を取り出す	aList.pop()
ヒストグラムを描画して半透明化にする	plt.hist(データ列x, alpha=0.5)
ファイルをオープンして]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
データフレームのカラムの最頻値を求める	mode, count = scipy.stats.mode(df['列A'])
ファイルを書き込みできるように文字コードtextとしてオープンする]	open(filepath, mode='w', encoding=text)
データフレームのパーセンタイルを求める	df.quantile(パーセント/100)
リストと数列の散布図を描いて、バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
xの小数点以下'5'桁まで表示する	print(':.5f'.format(x))
文字列から部分文字列を全て除く	s.replace(sub, '')
データフレームの列を度数分布図にする	plt.hist(df[column])
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
マップの項目名一覧	list(aDict)
線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームの行を範囲指定して取り出す	df[start:end]
文字列を最後の部分文字列で分けたときの最初の文字列を取り出す	s.rpartition(sub)[0]
option: カーキ色を用いる	color = 'khaki'
行列から重複を除いた配列を初期化する	np.unique(aArray)
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
横棒グラフをネイビー色を用いて描画する	plt.barh(データ列x, データ列y, color='navy')
空白文字を全部使う	string.whitespace
折れ線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列x, データ列y, color='lavenderblush')
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
'A'カラムの値がxに等しい行を抽出する	df[df['列A'] == x]
バイナリできるようにファイルパスをオープンする]	open(filepath, mode='rb')
データフレームの中の欠損値の合計をカウントする	df.isna().sum()
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
有理数をインポートする	import fractions
option: グラフの色をベージュに指定する	color = 'beige'
棒グラフをバイオレット色で描画する	plt.bar(データ列x, データ列y, color='violet')
n進数文字列を整数に変換する	int(s, n)
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームの中にと文字列がいくつ含まれるか数える	df.isin([value, value2]).sum()
データフレーム中の欠損値をドロップする	df.dropna(inplace=True)
折れ線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='grey')
ヒストグラムをアンティークホワイト色として描画する	plt.hist(データ列, color='antiquewhite')
データフレームの選択したカラムの欠損値を直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
やわらかい青色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
ライトイエローにヒストグラムの色をセットする	plt.hist(データ列, color='lightyellow')
ヒストグラムの色をゴールデンロッドに変更する	plt.hist(データ列, color='goldenrod')
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
配列を転置する	aArray.T
マッピングにキーワード引数として加えて、更新する	aDict.update(**kwargs)
'A'列の値がxに等しい行を取り出す	df[df['列A'] == x]
文字列内にひとつでも英数字が含まれるかどうか調べる	any(c.isalnum() for c in s)
キューをタプルにする	tuple(deq)
nが集合のどれかかどうか調べる	n in aSet
ライムグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
日付データが日曜日かどうか調べる	aDate.weekday() == 6
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
折れ線グラフの右三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
ロージーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
プラムにヒストグラムの色をする	plt.hist(データ列, color='plum')
データシリーズの欠損値を前の行の値にする	ds.fillna(method='ffill')
配列をビン数nとしてビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
option: グラフの色をハニーデューにセットする	color = 'honeydew'
横棒グラフをダークマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
数値の符号をコピーにする	math.copysign(x, x2)
日付データにn週間分加算する	aDate + datetime.timedelta(weeks=n)
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
散布図をローングリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームの一部のカラムの値をValueMapでまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
青い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
その平均でデータフレームの選択したカラムのNaNを埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
option: バリーウッド色を使う	color = 'burlywood'
データフレームをある列のカテゴリを用いてグループ化して、それぞれのグループの件数を知る	df.groupby('列A').size()
ヒストグラムをミディアムターコイズ色として描画する	plt.hist(データ列, color='mediumturquoise')
option: 追加モードに設定する	mode = 'a'
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
ヒストグラムの色をマルーンにする	plt.hist(データ列, color='maroon')
散布図を右三角印で描画する	plt.scatter(データ列x, データ列y, marker='>')
散布図のマーカーの太さを変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
列名を指定して２つのデータフレームを全結合する	pd.merge(df, df2, on='列A', how='outer')
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
データフレームをグループ化し、ある列に対し標準偏差を計算する	df.groupby('列A')['列B'].std()
指定した列の値で集計し、最大値を求める	df.groupby('列A').max()
エクセルファイルから全シートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
散布図に黒い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
ヒストグラムをディムグレー色として描画する	plt.hist(データ列, color='dimgrey')
ファイルを文字列の示す文字コードでオープンする]	open(filepath, encoding=s)
実数の小数部を求める	math.modf(x)[0]
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: カンマを区切りで使用する	sep = ','
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
縦棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
option: ブルーバイオレット色を使う	color = 'blueviolet'
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
配列の要素ごとの積	np.multiply(aArray, aArray2)
nが2で割り切れる	n % 2 == 0
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
サーモン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
列をビン数nでビニングしてnamesのラベルをつける	pd.cut(ds, n, labels=names)
option: グラフの色を小麦色に設定する	color = 'wheat'
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
option: データ型として複素数型を使う	dtype = bool
イテラブルから重複を取り除く	set(iterable)
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
部分文字列を文字列中から探す	s.find(sub)
ゼロ埋めされた行列	np.zeros(要素数)
データフレームをある列によってソートして、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
要素を双方向キューにenqueueする	deq.appendleft(element)
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
散布図の色を黄緑にする	plt.scatter(データ列x, データ列y, color='chartreuse')
整数nの16進数文字列	hex(n)[2:]
実数を実数で割って切り捨てる	x // y
赤い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
インデックスを付けずCSVファイルにデータフレームを保存する	df.to_csv('file.csv', index=None)
指定したカラムの不偏分散	df['列A'].var(ddof=1)
option: グラフの色をシアンに変更する	color = 'cyan'
ティール色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
option: 線の種類を点線に設定する	linestyle = 'dotted'
nとn2の商を求める	n / n2
option: フォントの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
縦棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
タイムスタンプデータが月曜日	aDatetime.weekday() == 0
文字の文字コード	ord(ch)
データシリーズの未入力値を直前の値で置換する	ds.fillna(method='ffill')
折れ線グラフを青い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレーム全体をインデックスによってソートする	df.sort_index()
アクア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
マッピングのキーとその値を列挙する	aDict.items()
option: 行列のデータ型を指定する	dtype = np.int
ヒストグラムをオレンジレッド色を使って描画する	plt.hist(データ列, color='orangered')
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ゼロ埋めされた配列を作る	np.zeros(要素数)
option: ダークターコイズに色を設定する	color = 'darkturquoise'
正則化付き回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
文字列中の部分文字列を回数を制限して別の文字列に置き換える	s.replace(sub, newsub, n)
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
ユーザが整数を入力する	int(input())
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
リストとリストについての散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
シーグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
あるカラムの下位25％	df['列A'].quantile(0.75)
データシリーズの欠損値を中央値で埋める	ds.fillna(ds.median())
ライトスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
折れ線グラフを破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
文字列が空白文字からなるかどうか確認する	s.isspace()
データフレームから型型の列だけ抽出する	df.select_dtypes(ty)
折れ線グラフの大バツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
今日が金曜日	datetime.datetime.today().weekday() == 4
四分位数ごとにリストをビン分割する	pd.qcut(aList, 4)
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
ヒストグラムをスカイブルー色を用いて描画する	plt.hist(データ列, color='skyblue')
n2がnより大きくかつ、n3より小さいか調べる	n < n2 and n2 < n3
配列の最頻値を算出する	mode, count = scipy.stats.mode(配列)
グラフのx軸にラベルを付ける	plt.xlabel('x軸ラベル')
文字列をASCIIコードエスケープでバイト列にする	s.encode(encoding='unicode_escape')
データフレームの指定した列の標本標準偏差を算出する	df['列A'].std(ddof=1)
JSONフォーマットの文字列をデータにする	json.loads(b.decode('unicode-escape'))
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
プロットで使うタイトルを指定する	plt.title('グラフの名称')
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
グラフのy軸を対数に変更する	plt.yscale('log')
マッピングからキーの値か、もしくは要素を得る	aDict.get(key, element)
二進文字列を整数にする	int(s, 2)
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
日付時刻データからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
文字列中の部分文字列の出現をカウントする	s.count(sub)
文字列の接尾辞が部分文字列かどうか調べる	s.endswith(sub)
シーグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='seagreen')
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
オールドレース色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
ドジャーブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
ペールグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
リストとリストの散布図を描画して、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
データフレームをグループ化しそれぞれの平均値を計算する	df.groupby('列A').mean()
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
実数に実数を掛ける	x * y
本日の日付時刻	datetime.datetime.today()
シーケンスを2回あわせた直積	itertools.product(iterable, repeat=2)
ヒストグラムの色をカーキに指定する	plt.hist(データ列, color='khaki')
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
データフレームの選択した列の歪度	df[['列A', '列B']].kurt()
パラメータについて数式の積分を求める	sympy.integrate(e, z)
配列の要素数を使う	aArray.size
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategray')
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
リストと配列の散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
データフレームの選択したカラムの平均値	df[['列A', '列B']].mean()
実行環境の名前	sys.platform
ゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
日付を使用する	import datetime
自然数の並べ方の総数	math.perm(n)
数値の変数を数式で置き換える	e.subs(z, e2)
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
縦軸だけグリッド線	plt.grid(axis='y')
リストの重複を取り除く	sorted(set(aList), key=aList.index)
文字列をコロンで区切って、列挙する	s.split(':')
日付時刻データの時刻	aDatetime.time()
列をフォーマットを使って日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
単位行列を作る	np.eye(行数, 列数)
グラフで使える色名の一覧	matplotlib.colors.cnames
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
文字列中にひとつでも非小文字が含まれる	any(not c.islower() for c in s)
データ列をインポートする	import pandas as pd
円グラフを用いてリストのパーセントを作図する	plt.pie(データ列, startangle=90)
option: フォントの色をアイボリーに設定する	color = 'ivory'
データフレームのある列の中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
あるカラムを十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
指定した列のカテゴリで集計し、それぞれの最大値を求める	df.groupby('列A').max()
文字列を全て小文字にする	s.lower()
option: チョコレートにグラフの色をする	color = 'chocolate'
ライトシアン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
行列のユニークな値を要素とする配列	np.unique(aArray)
データフレームのカラムの中にいくつ文字列があるか求める	df['列A'].isin([value]).sum()
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
ヒストグラムの区間を設定する	plt.hist(データ列, range=(start, end))
折れ線グラフをスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='slateblue')
グリッド線を赤くする	plt.grid(color='r')
option: 色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
カラム名を指定せずCSVファイルをロードする	pd.read_csv('file.csv', header=None)
ある列を用いてデータフレームをソートする	df.sort_values(by='列A')
異なるカラムをキーとして2つのデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
カテゴリ別で色分けしてにバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
指定した列の文字列をNaNに変換する	df['列A'].replace(値, np.nan)
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
グリッドを破線にする	plt.grid(linestyle='dashed')
option: バツマーカーを加える	marker = 'x'
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
データフレームの欠損値が含まれる箇所に色をつける	df.style.highlight_null()
配列のスカラー倍を求める	aArray * n
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
option: パールゴールデンロッドに色を設定する	color = 'palegoldenrod'
イテラブルの折れ線グラフを描画して、色をカラーコードを用いて設定する	plt.plot(データ列x, データ列y, color='#800080')
ダークオーキッドにヒストグラムの色を指定する	plt.hist(データ列, color='darkorchid')
外れ値を除いたデータフレームのカラムの算術平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
行列の値を求める	aArray[行番号, 列番号]
データシリーズを1000の位で丸める	ds.round(-3)
文字列を全て大文字にする	s.upper()
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
文字列の開始位置より後に部分文字列が含まれないか調べる	s.find(sub, start) == -1
オプションでファイルを用いる	file = sys.open(filename, 'w')
ポイント印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
ファイルを絶対パスに変換する	os.path.abspath(filepath)
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
CSVファイルからデータフレームを読み込む	pd.read_csv('file.csv', sep=',')
行列の値	aArray[行番号, 列番号]
既存の配列を元にして全要素が0の配列	np.zeros_like(aArray)
バリーウッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
option: グラフの色をベージュに設定する	color = 'beige'
線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
ライトスカイブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
y座標の目盛の値を変更する	plt.yticks(目盛りの値リスト)
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
カラムを日付データに変換する	pd.to_datetime(df['列A'])
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
データフレームの先頭n行を確認する	df.head(n)
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
デピンク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
あるカラムのNaNを後の行の値に指定する	df['列A'].fillna(method='bfill')
ミディアムブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
データフレームのある列の値がxに等しくない行を抽出する	df[df['列A'] != x]
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: 改行コードをWindowsに設定する	newline = '\r\n'
ミディアムオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
散布図をミディアムバイオレットレッド色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
リストの要素を昇順にソートする	sorted(aList, reverse=True)
キーがマッピング上で定義済みか	key in aDict
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
JSONフォーマットの文字列をロードする	json.loads(jsonString)
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
データシリーズを十の位で丸めて、整数にする	ds.round(-1).astype(int)
ナバホホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
濃い青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
リストをひとつ置きに抽出する	aList[::2]
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
行列の行ごとの最大を求める	np.max(aArray, axis=1)
バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x')
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
option: クロスマーカーを加える	marker = 'x'
リストを展開して表示する	print(*aList)
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームの選択したカラムの欠損値をモードに指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
無限の数列を得る	itertools.count()
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
データフレームを破壊的に指定した列で降順に並べ直す	df.sort_values(by='列A', ascending=False, inplace=True)
横棒プロットを描いて、下寄せする	plt.barh(ラベル列, データ列, align='edge')
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
イテラブルと数列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
等差数列から整数乱数を生成する	random.randrange(start, end, step)
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ティール色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
カウンタの全カウント	aCounter.total()
データフレームをある列で集約する	df.groupby('列A')
データフレームのある列の値がxに等しい行を抽出する	df[df['列A'] == x]
日付時刻データの曜日を使う	aDatetime.weekday()
データフレームから型リストで指定したデータ型の列を除外する	df.select_dtypes(exclude=typeList)
L1ノルムでデータを正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
データフレームの列間の相関行列を全部求める	df.corr()
year年month月を日付にする	datetime.date(year=year, month=month, day=1)
日付データが何年か知る	aDate.year
ヒストグラムを実線に指定する	plt.hist(データ列, linestyle='solid')
option: マーカーをバツに変更する	marker = 'x'
列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
最大最小から配列を初期化する	np.linspace(最小値, 最大値, 要素数)
文字列を黒色にする	f'\033[30m{value}\033[0m'
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムの色をマゼンタに変更する	plt.hist(データ列, color='magenta')
ある列の値がxに等しくない行を抽出する	df[df['列A'] != x]
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
タプルの文字列が最初に見つかる位置	aTuple.index(element)
データフレームの上n行	df.head(n)
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
散布図の印を左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
自然数LCM	math.lcm(n, n2)
option: アイボリー色を使う	color = 'ivory'
ヘッダー行を左寄せに変更する	pd.set_option('colheader_justify', 'left')
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
n個分右に双方向キューの要素をローテンションする	deq.rotate(n)
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
横棒グラフをマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='magenta')
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームから重複したデータを残さずドロップする	df.drop_duplicates(keep=False)
キーが辞書にあるか調べる	key in aDict
線グラフの色を青緑にする	plt.plot(データ列x, データ列y, color='teal')
空白で文字列を末尾から区切る	s.rsplit()
バイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
テキストファイルファイル名がか	filename.endswith('.txt')
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
散布図の左三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
行列の列ごとの最小を調べる	np.min(aArray, axis=0)
リストの長さを見る	len(aList)
option: 配列のデータ型を指定する	dtype = np.uint8
option: 色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
文字列を新しい文字列で置換する	s.replace(sub, newsub)
nがn2で割り切れるか調べる	n % n2 == 0
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
option: 四角マーカーを使う	marker = 's'
option: 配列のデータ型を指定する	dtype = np.int8
ひとつでも非空白が文字列中に含まれるか調べる	any(not c.isspace() for c in s)
xを印字できる文字列にする	ascii(x)
ブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
nから無限にカウントアップする	itertools.count(start=n)
横棒グラフをアイボリー色として描画する	plt.barh(データ列x, データ列y, color='ivory')
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
パラメータが無限大に近づく場合の数式の極限値を求める	sympy.limit(e, z, oo)
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
option: グラフの色をシエナに設定する	color = 'sienna'
文字列をISO書式でタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
何回まで再帰ができるかを	sys.getrecursionlimit()
option: ボックスチャートに平均を加える	showmeans = False
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
追加モードとしてファイルをオープンする]	open(filepath, mode='a')
データフレーム中の欠損値を破壊的に除く	df.dropna(inplace=True)
nが一桁の整数か	0 <= n <= 9
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
クラス分類のリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データフレームの列の各データ値の出現数を求める	df[col].value_counts()
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
リネン色でヒストグラムを描画する	plt.hist(データ列, color='linen')
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
中央値でリストをビン分割する	pd.qcut(aList, 2)
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
データフレームの一部のカラムの欠損値を直前の値で置換する	df[['列A', '列B']].fillna(method='ffill')
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
新しい単回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
実数を実数で除した余り	x % y
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
ダークゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
option: ミスティローズにグラフの色を指定する	color = 'mistyrose'
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
配列の尖りを算出する	scipy.stats.kurtosis(配列, bias=False)
キューの大きさを求める	len(deq)
今日の年数	datetime.datetime.today().year
半透明の一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
列の重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
オールドレースにヒストグラムの色をする	plt.hist(データ列, color='oldlace')
要素∈セット	element in aSet
データフレームの標本分散を計算する	df.var(ddof=0)
option: グラフの色をハニーデューに設定する	color = 'honeydew'
横軸だけグリッド線	plt.grid(axis='x')
明日の日付を使う	datetime.date.today() + datetime.timedelta(days=1)
集合をイミュータブルに変換する	frozenset(aSet)
データシリーズが何曜日か知る	ds.dt.weekday_name
縦に3つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
文字列をキャピタライズする	s.capitalize()
回帰分析をロバスト推定でする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データフレームの標本標準偏差を求める	df.std(ddof=1)
横棒グラフをダーク・スラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
データフレームを保存する	df.to_csv('file.csv')
option: フォントの色をフクシアに設定する	color = 'fuchsia'
線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
行列のムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
アクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: 淡いピンク色色を用いる	color = 'lightpink'
データフレームの空文字を未入力値に変換し、ドロップする	df.replace('', np.nan).dropna()
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
浮動小数点数の符号をコピーにする	math.copysign(x, x2)
配列の相関係数を計算する	scipy.stats.pearsonr(配列, 配列2)
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
n2行n列の２次元リスト	[[0] * n for _ in range(n2)]
ゴールド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
データシリーズの欠損値を後の行の値で埋める	ds.fillna(method='bfill')
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
等間隔でn個にデータ列をビニングする	pd.cut(ds, n)
本日のローカルな日付時刻	datetime.datetime.today()
option: フォントの色を赤に設定する	color = 'red'
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
日付時刻データが金曜日か	aDatetime.weekday() == 4
黒色で文字列をプリントする	print(f'\033[30m{value}\033[0m')
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
ブラックにヒストグラムの色をセットする	plt.hist(データ列, color='black')
シーケンスを累加したイテラブル	itertools.accumulate(iterable)
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
option: バツマーカーを使用する	marker = 'x'
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
縦棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
日付時刻データが何曜日か知る	aDatetime.weekday()
イテラブルを両端キューにする	collections.deque(iterable)
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
文字列の右側が部分文字列	s.endswith(sub)
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
ヒストグラムをダークオリーブグリーン色を用いて描画する	plt.hist(データ列, color='darkolivegreen')
ユークリッド距離	math.dist(point, point2)
option: 色を半透明にする	alpha = 0.5
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
データフレームを降順に破壊的に二つのカラムによってソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
ヒストグラムをトマト色として描画する	plt.hist(データ列, color='tomato')
option: グラフの色をピーチパフに変更する	color = 'peachpuff'
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
nの各桁の和を求める	sum(map(int, str(n)))
データフレームから重複を認めてランダムに5行をサンプリングする	df.sample(5, replace=True)
指定した列だけ、データフレームの重複を見る	df.duplicated(subset='列A')
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
青色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
線グラフの色をペルーに指定する	plt.plot(データ列x, データ列y, color='peru')
表データの行がnの行を取り出す	df.loc[n]
日付を表現した文字列をタイムスタンプに変換する	pd.to_datetime(日付を表現した文字列)
エクセルファイルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
部分文字列が文字列の開始位置より後にあるかどうか確認する	s.find(sub, start) != -1
列名を指定せずCSVファイルを読む	pd.read_csv('file.csv', header=None)
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
y軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
option: グラフの色をデピンクに設定する	color = 'deeppink'
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
イテラブルをカウンタにする	collections.Counter(iterable)
文字列に文字列中の部分文字列を全部置き換える	s.replace(sub, newsub)
複数のシートを表計算ファイルからロードする	pd.read_excel('file.xlsx', sheet_name=[0, 1])
option: データ型を指定する	dtype = np.int16
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
散布図に下三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='v')
リストの最後から要素を除く	aList.pop()
データフレームの選択したカラムの中に文字列と文字列がいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
大バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
モデルを作る	model.fit(説明変数, 目的変数)
データフレームのNaNを前の行の値で埋める	df.fillna(method='ffill')
tanの逆数	math.atan(x)
実数の余弦	math.cos(x)
n個の文字列があるリストを作る	[element] * n
要素が集合の要素でないかどうか調べる	element not in aSet
ダークターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
棒グラフをライトスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データ列のエポック秒を日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームのカラムを型に変換する	df[col] = df[col].astype(ty)
シアン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
深紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
散布図を四角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='s')
オリーブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
ヒストグラムをプラム色を用いて描画する	plt.hist(データ列, color='plum')
棒グラフをミディアムシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
第二引数のファイル名	sys.argv[1]
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
イテラブルのセット	set(iterable)
辞書をカウンタに変換する	collections.Counter(aDict)
option: 暗い赤色を使う	color = 'darkred'
データフレームのn行目を削除して	df.drop(n, axis=0)
三自然数の最大公約数	math.gcd(n, n2, n3)
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
FIXME:カテゴリーデータを出現頻度順にソートする	df['列A'].value_counts().sort_index().index
文字列は全て数値か	s.isnumeric()
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
オプションで標準エラーを使う	file = sys.stderr
散布図をスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='slateblue')
predicateFuncが真とならない列の部分を得る	itertools.dropwhile(predicateFunc, iterable)
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
折れ線グラフの色をゲインズボロに指定する	plt.plot(データ列x, データ列y, color='gainsboro')
値を改行しないで表示する	print(value, end='')
文字列を赤色にする	f'\033[31m{value}\033[0m'
文字列は識別子名か調べる	s.isidentifier()
y軸の目盛を表示しない	plt.yticks([])
文字列の右端から空白を取り除く	s.rstrip()
タイムスタンプデータの年数	aDatetime.year
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
データフレームのあるカラムのタイムゾーンを東京に設定する	df['列A'].tz_convert('Asia/Tokyo')
散布図の三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームをグループ化して、ヒストグラムを用いて可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
データシリーズの曜日を求める	ds.dt.weekday_name
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
option: グリーン色を使用する	color = 'green'
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
文字列をバイト配列に変換する	bytearray(s)
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
実行結果を黄色でプリントする	print(f'\033[33m{value}\033[0m')
縦棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
リストと配列の散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
標準出力	sys.stdout
データシリーズのNaNを最小値で置換する	ds.fillna(ds.min())
マッピングの値として要素は含まれている	element in aDict.values()
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
折れ線グラフの色をスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='springgreen')
散布図をクロスマーカーで描画する	plt.scatter(データ列x, データ列y, marker='x')
整数nをn2分の一にする	n //= n2
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
キューを空にする	deq.clear()
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
無限に文字列が繰り返す列を得る	itertools.repeat(element)
デックの末尾から要素を取り除く	deq.pop()
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
最大値・最小値を使って整数乱数を生成する	random.randint(最小値, 最大値)
option: ダークシアグリーン色を使う	color = 'darkseagreen'
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
黒い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームのひとつのカラムだけ説明変数にする	説明変数 = df[['列名']]
OSがリナックスか	sys.platform.startswith('linux')
オプションでファイルを出力先にする	file = sys.open(filename, 'w')
ヒストグラムをスレートブルー色を用いて描画する	plt.hist(データ列, color='slateblue')
整数nを8進文字列に変換する	oct(n)[2:]
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
option: 茶色を使う	color = 'brown'
カウンタの最頻出な項目を求める	aCounter.most_common()[0]
オブジェクトのハッシュ値を計算する	hash(obj)
行列の行ごとの平均	np.mean(aArray, axis=1)
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
カウンタの項目一覧を見る	aCounter.keys()
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
散布図を星マーカーで描く	plt.plot(データ列x, データ列y, marker='*')
option: 色をゴーストホワイトに設定する	color = 'ghostwhite'
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
データフレームのカラムのケンドールの相関係数	scipy.stats.kendalltau(df['列A'], df['列B'])
折れ線グラフに右三角印を用いる	plt.plot(データ列x, データ列y, marker='>')
データフレームの一部のカラムの欠損値を後の行の値に設定する	df[['列A', '列B']].fillna(method='bfill')
最大最小から行列	np.linspace(最小値, 最大値, 要素数)
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
両端キューから要素を削除する	deq.remove(element)
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
JSONファイルのファイル入力を辞書にする	json.load(fin)
n個にデータフレームの中の列をビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: エンコーディングを文字コードtextに設定する	encoding = text
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
折れ線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームの選択した列の標準偏差	df[['列A', '列B']].std()
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
文字列の開始位置から終了位置までの範囲で部分文字列の出現	s.count(sub, start, end)
二つのオブジェクトが同一参照か調べる	obj is obj2
散布図を赤いバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
anemptystring	''
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
データ列の各値の出現数を計算する	ds.value_counts()
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
データ列と配列についての散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
リストとイテラブルについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
横棒グラフをインディアンレッド色として描画する	plt.barh(データ列x, データ列y, color='indianred')
折れ線グラフに青い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
行列の列ごとの分散を求める	np.var(aArray, axis=0)
nを8進文字列に変換する	oct(n)[2:]
シーケンスの長さを制限する	collections.deque(iterable, maxlen=n)
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
小数点数が無限大か調べる	math.isinf(x)
配列を四分位数でビニングする	pd.qcut(aArray, 4)
ベクトルの和を求める	aArray + aArray2
データシリーズの中に含まれる文字列と日付データの合計をカウントする	ds.isin([value, value2]).sum()
データフレームのカラムのn次モーメントを計算する	scipy.stats.moment(df['列A'], moment=n)
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
文字列をアンダーライン付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
文字列中の正規表現を新しい文字列として置き換える	re.sub(pattern, newsub, s)
日付データが日曜日か調べる	aDate.weekday() == 6
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
散布図のクロス印を黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
クラス分類をガウス過程を用いて行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
アルファベットの小文字列	string.ascii_lowercase
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ヒートマップを用いてデータフレームの相関行列を描画する	sns.heatmap(df.corr())
散布図をパレットトルコイズ色として描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
ある列のカテゴリごとの合計	df.groupby('列A').sum()
ダークオレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
縦棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
option: フォントの色をダークグリーンに設定する	color = 'darkgreen'
0からnまでの整数列を作る	list(range(n+1))
option: エンコーディングをBOM付きにセットする	encoding = 'utf_8_sig'
回帰分析をRANSACとして行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
ファイルパスの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
複数のデータフレームを縦向きに結合する	pd.concat([df, df2, df3], axis=0)
CSVファイルにデータフレームをBOM付きで保存する	df.to_csv('file.csv', encoding='utf_8_sig')
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
option: ホットピンクに色を変更する	color = 'hotpink'
リストとリストの散布図を描画し、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
タプルのn番目以降の要素を得る	aTuple[n:]
データ列の離れ具合を描画する	sns.residplot(x=データ列, y=データ列)
ブール型の全要素を０で初期化した行列を初期化する	np.zeros(行数, 列数, dtype=np.int32)
縦棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
マッピングの値として要素が含まれているか調べる	element in aDict.values()
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
データフレームのデータ型の一覧を求める	df.dtypes
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
折れ線グラフの色をホワイトにする	plt.plot(データ列x, データ列y, color='white')
折れ線グラフをベージュ色として描画する	plt.plot(データ列x, データ列y, color='beige')
option: ホワイトスモークを用いる	color = 'whitesmoke'
降順にデータフレームを二つの列によって並べる	df.sort_values(by=['列A', '列B'], ascending=False)
データフレームの選択したカラムを千の位で四捨五入する	df[['列A', '列B']].round(-3)
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
ゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
配列の行列積	np.matmul(aArray, aArray2)
データフレームのNaNをxに設定する	df.fillna(x)
option: バッファリングを無効にする	buffering = 0
日付時刻データが何時か知る	aDatetime.hour
データフレームの標本標準偏差を算出する	df.std(ddof=1)
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
整数を整数に変換する	int(x)
コーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
option: 色をタンに指定する	color = 'tan'
数列とリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
2つのデータフレームを縦方向につなぐ	pd.concat([df, df2], axis=0)
赤い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
データフレームの先頭10行	df.head(10)
option: ライトコーラルにグラフの色を指定する	color = 'lightcoral'
文字列中に部分文字列がいくつか含まれるかカウントする	s.count(sub)
floatの最小値	sys.float_info.min
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
データフレームの上5行	df.head(5)
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
二変数の最大値	max(x, y)
option: グラフの線の種類を実線に設定する	linestyle = 'solid'
数値を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
ピーチパフにヒストグラムの色を設定する	plt.hist(データ列, color='peachpuff')
データフレームの選択した列の欠損値を直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
ベクトルの最大値	np.max(aArray)
KNNでクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
文字列に列を変換して、部分文字列で連結する	sub.join(map(str, iterable))
option: 色をスレートブルーに設定する	color = 'slateblue'
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
option: バイナリ書き込みモードに設定する	mode = 'wb'
データフレームを表示するとき、折り返しをオフに変更する	pd.set_option('expand_frame_repr', False)
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
数値の積分を行う	sympy.integrate(e)
データフレームの一部の列の不偏分散	df[['列A', '列B']].var(ddof=1)
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
折れ線グラフの色をゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='goldenrod')
数値を白色でプリントする	print(f'\033[37m{value}\033[0m')
xでデータフレームのある列の欠損値を埋める	df['列A'].fillna(x)
集合を更新不能に変換する	frozenset(aSet)
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
一度に指定したカラムの値を正規表現patternでreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
option: マーカーの色をライムにする	markerfacecolor = 'lime'
文字列中の平仮名をカタカナにする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
ターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='turquoise')
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
散布図をアリスブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
タイムスタンプデータの秒数	aDatetime.second
散布図をミッドナイトブルー色として描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
列のコンビネーション	itertools.combinations(iterable, n)
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
フローラルホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
option: ダークシアン色を使う	color = 'darkcyan'
リストとリストの散布図を描き、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフに青い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
行列の列ごとの最大値を算出する	np.max(aArray, axis=0)
キーが辞書上で定義済みか調べる	key in aDict
リストとリストについて散布図を描画して、星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
エポック秒の列から日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
nにn2をかけた値をnとする	n *= n2
パレットトルコイズ色でヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
option: グラフの色を淡いピンク色にする	color = 'lightpink'
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
データフレームの指定したカラムの未入力値をモードで埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
黒い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
▲印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームをインデックスを付けずCSVファイルに保存する	df.to_csv('file.csv', index=None)
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
散布図のマーカーを▽にする	plt.scatter(データ列x, データ列y, marker='v')
データフレームのあるカラムの年	df['列A'].dt.year
指定した列リストのみ、データフレームの重複を確認する	df.duplicated(subset=['列A', '列B'])
文字列の開始位置以降に部分文字列が含まれないか	s.find(sub, start) == -1
セットをイミュータブルなセットにする	frozenset(aSet)
モカシンにヒストグラムの色を設定する	plt.hist(データ列, color='moccasin')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
散布図をオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='orchid')
ミディアムバイオレットレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データフレームのカラムのトリム平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
ホワイトスモーク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
要素はセットに含まれるかどうかテストする	element in aSet
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
nの三乗	n ** 3
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
ランダムにデータフレームから取り出す	df.sample()
黒い△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
部分的最小二乗法で回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ゲインズボロにヒストグラムの色を設定する	plt.hist(データ列, color='gainsboro')
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
option: アクアマリン色を使用する	color = 'aquamarine'
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
カラムの未入力値を平均に設定する	df['列A'].fillna(df['列A'].mean())
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
バリーウッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
両端キューのn番目	deq[n]
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
オブジェクトに属性が存在する	hasattr(obj, プロパティ名)
数列とリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
散布図をミディアムパープル色として描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
データフレームの指定したカラムの平均値を求める	df['列A'].mean()
インプレースに双方向キューの値を逆順にする	deq.reverse()
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
タプルを引数として展開してプリントする	print(*aTuple)
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
リストをベクトルに変換する	np.array(aList)
ヒストグラムをフクシア色を使って描画する	plt.hist(データ列, color='fuchsia')
nとn2の和	n + n2
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
余弦の逆数	math.acos(x)
行列の行ごとの最小値	np.min(aArray, axis=1)
実数の双曲線余弦の逆数	math.acosh(x)
線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ある列の値がx以上、y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
新しいヒストグラムベースの勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.HistGradientBoostingClassifier()
ラベンダーブラッシュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
横棒グラフを真紅色として描画する	plt.barh(データ列x, データ列y, color='crimson')
読み込み用にファイルをオープンして]、fとする	f = open(filepath, mode='r')
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
データフレームの選択した列の欠損値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
シンボル計算を使う	import sympy
データフレームの指定したカラムの欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
環境がウィンドウズか調べる	sys.platform.startswith('win32')
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
データフレームの次元の大きさを見る	df.shape
文字列がカタカナか調べる	('ァ' <= ch <= 'ン')
空のリスト	[]
データ列の変遷を青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
文字列が文字列より辞書順で後か調べる	s > s2
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
ミディアムアクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
分子と分母から有理数を生成する	fractions.Fraction(分子, 分母)
配列の尖度を見る	scipy.stats.kurtosis(配列, bias=False)
折れ線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
数列のケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
option: ゲインズボロ色を使用する	color = 'gainsboro'
配列とリストの散布図に赤い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
実数が正の数	x > 0
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
今日をタプルにする	datetime.datetime.today().timetuple()
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
データシリーズの平均を求める	ds.mean()
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
線グラフをブラック色を用いて描画する	plt.plot(データ列x, データ列y, color='black')
配列と同じ大きさの空配列を初期化する	np.empty_like(aArray)
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームのカラムが正規分布に従うか調べる	scipy.stats.shapiro(df['列A'])
二つの数値をタブで区切ってプリントする	print(value, value2, sep='\t')
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
option: ダークスラテグレー色を用いる	color = 'darkslategray'
データフレームの選択したカラムの中にいくつ文字列があるか数える	df[['列A', '列B']].isin([value]).sum()
集合からエラーなく値を取り除く	aSet.discard(element)
ダークゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
プロットの縦横の比率を等しくする	plt.axis('equals')
option: グラフの色をアンティークホワイトに変更する	color = 'antiquewhite'
散布図の左三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
ヒストグラムの色をミスティローズに指定する	plt.hist(データ列, color='mistyrose')
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
文字列の先頭でパターンにマッチするか調べる	re.match(pattern, s)
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームの選択した列の空文字を欠損値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ファイルのファイルサイズ	os.path.get_size(filepath)
赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
ゼロ埋めされた符号なし８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.uint8)
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
今日の日付時刻	datetime.datetime.now()
昇順にデータフレームを二つの列によって並べ直して更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
option: ネイビー色を用いる	color = 'navy'
EUCでファイルをオープンする]	open(filepath, encoding='euc_jp')
文字列が全て大文字	s.isupper()
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
指定したカラムの中の欠損値の数を数える	df['列A'].isna().sum()
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
CSVファイルをデータフレームとして読む	pd.read_csv('file.csv', sep=',')
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
文字列が全て数字か調べる	s.isdigit()
列とリストをつなぐ	itertools.chain(iterable, iterable2)
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
三つのデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
浮動小数点数を実数で整数除算する	x // y
イテラブルを文字列リストに変換して、空白によって連結する	' '.join(map(str, iterable))
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
エンディアンを使う	sys.byteorder
nが1、もしくは2かどうか調べる	n == 1 or n == 2
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
実数の小数点以下を四捨五入する	round(x)
円グラフを用いてデータ列のパーセントを可視化する	plt.pie(データ列, startangle=90)
ライトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
シーケンスを累積する	itertools.accumulate(iterable, operator.mul)
ある列にリストの値が含まれるデータを抽出する	df[df['列A'].isin(リスト)]
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
データフレームから指定した二つの列を抽出する	df[['列A', '列B']]
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: トマト色を用いる	color = 'tomato'
リストを縦軸、配列を横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
文字列中の部分文字列をカウントする	s.count(sub)
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
指定した列のカテゴリで集計し、それぞれの最小値を求める	df.groupby('列A').min()
データフレームから重複ありでランダムに5行をサンプリングする	df.sample(5, replace=True)
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
オールドレース色でヒストグラムを描画する	plt.hist(データ列, color='oldlace')
データフレームの選択したカラムの欠損値を平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
縦棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
リストと配列の散布図を描画してダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
全ての数字	string.digits
二つのデータフレームを横方向に結合する	pd.concat([df, df2], axis=1)
xを論理値に変換する	bool(x)
ある列にリストの値が含まれる行を抽出する	df[df['列A'].isin(リスト)]
リストとイテラブルの散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
ピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
オブジェクトの参照カウント	sys.getrefcount(obj)
リストと配列の散布図を描画してバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
整数nの八進文字列	oct(n)[2:]
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
横棒グラフをペールグリーン色として描画する	plt.barh(データ列x, データ列y, color='palegreen')
option: グラフの色をドジャーブルーに指定する	color = 'dodgerblue'
データフレームから同じ内容の行をドロップする	df.drop_duplicates(inplace=True)
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
データ列の折れ線プロットをプロットして色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
最大長nのキューを作る	collections.deque(maxlen=n)
配列とリストについて散布図を描画して、マーカーを上三角に設定する	plt.plot(データ列x, データ列y, marker='^')
印字可能な文字を全て使う	string.printable
縦棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
表データのあるカラムは何曜日か見る	df['列A'].dt.weekday_name
ヒストグラムの色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
オブジェクトは整数型か調べる	isinstance(obj, int)
一度にValueMapで列の値を置き換える	df['列A'].replace(ValueMap)
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
文字列中から正規表現にASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
切片なしの回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームの選択した列の相関行列をスピアマン相関係数を用いて求める	df[['列A', '列B']].corr(method='spearman')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
イテラブルとシーケンスをジップする	itertools.zip_longest(iterable, iterable2)
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
option: フォントの色をブルーバイオレットに指定する	color = 'blueviolet'
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームのカラムのn次モーメントを見る	scipy.stats.moment(df['列A'], moment=n)
棒グラフをダークグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkgreen')
ライトサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='lightsalmon')
ファイル全体を行分割して読み込む	f.readlines()
データシリーズの欠損値をその最小値で埋める	ds.fillna(ds.min())
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
青い点線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
黒い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
ライトスレイグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
指定した列の欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
部分文字列を文字列の終了位置まで探す	s.find(sub, 0, end)
積率相関係数としてデータフレームの一部の列の相関行列を計算する	df[['列A', '列B']].corr(method='pearson')
ネイビー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
option: インディゴを使用する	color = 'indigo'
２つの文字列は等しくないかどうか調べる	s != s2
実数の角度	math.degrees(x)
データフレームの未入力値を最大値に設定する	df.fillna(df.max())
データシリーズにおいてどの値が頻出か見る	ds.mode()
棒グラフの色をティールにする	plt.bar(データ列x, データ列y, color='teal')
グリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
データフレームの空文字を欠損値に変換しドロップする	df.replace('', np.nan).dropna()
データフレームをグループ化し、ある列に対し最小値を求める	df.groupby('列A')['列B'].min()
句点文字を全部見る	string.punctuation
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
データフレームをグループ化し、ある列に対し分散を求める	df.groupby('列A')['列B'].var()
データフレームを使う	import pandas as pd
Pythonパスにディレクトリを追加する	sys.path.append(dir)
データフレームの選択した列がどの程度、正規分布から尖っているか確認する	df[['列A', '列B']].skew()
データフレームを２つの列の値によってグループ化し要約統計量を求める	df.groupby(['列A', '列B']).describe()
リストをn倍する	aList * n
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
双方向キューをリストに変換する	list(deq)
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
項目名がマッピングにある	key not in aDict
特異値分解を用いて淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
日付時刻データをISO形式の文字列にする	aDatetime.isoformat()
option: 色をミスティローズに設定する	color = 'mistyrose'
分類木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
option: ペルー色を用いる	color = 'peru'
配列の最小値	np.min(aArray)
二つの浮動小数点数が近似値か調べる	math.isclose(x, x2)
データフレームのKurtosisを求める	df.kurt()
リストとリストについての散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列がリストの要素でないか調べる	element not in aList
キーが辞書にない時、要素を追加する	aDict.setdefault(key, element)
option: カンマをセパレータで使う	sep = ','
ファイルからの入力ストリームを使う	open(filepath)
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームを昇順に２つの列で並べる	df.sort_values(by=['列A', '列B'], ascending=True)
option: EUCを使う	encoding = 'euc_jp'
ロージーブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='rosybrown')
option: ライトブルー色を使う	color = 'lightblue'
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
データ列の折れ線グラフを大バツ印を使用し、描画する	plt.plot(データ列x, データ列y, marker='X')
option: フォレストグリーン色を使う	color = 'forestgreen'
ビン数nでリストを等量でビン分割する	pd.qcut(aList, n)
散布図の四角印の線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
行列の列ごとの標準偏差	np.std(aArray, axis=0)
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
option: データ型として８ビット整数型を使う	dtype = np.int8
横棒プロットを描いて、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
日付データが月曜日か調べる	aDate.weekday() == 0
実数のn乗	pow(x, n)
リストと配列についての散布図に△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
散布図に右三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='>')
option: 書き込み用に設定する	mode = 'w'
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
ビスク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
ヒストグラムを実線としてプロットする	plt.hist(データ列, linestyle='solid')
rgbの星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
プロットにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
データフレームのある列の値がxに等しい行を選択する	df[df['列A'] == x]
option: 改行しないように設定する	end = ''
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
グラフにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
データ列と配列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
棒グラフをゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='goldenrod')
黒い下三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
option: インディアンレッド色を使用する	color = 'indianred'
データシリーズの標本標準偏差	ds.std(ddof=1)
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
ヒストグラムをミントクリーム色として描画する	plt.hist(データ列, color='mintcream')
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
データフレームをソートして、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
文字列をコロンで分割して文字列リストに変換する	s.split(':')
データフレームをCSVファイルにインデックスを付けず保存する	df.to_csv('file.csv', index=None)
集合から要素を全て除く	aSet.clear()
昇順にある列をキーにしてデータフレームを並べ直す	df.sort_values(by='列A', ascending=True)
データフレームのある列の中に文字列があるか調べる	df['列A'].isin([value])
配列と数列について散布図を描いてマーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
パパイヤウィップ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
ヒストグラムの色をペルーにする	plt.hist(データ列, color='peru')
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
データフレームの選択したカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
数式を因数分解する	sympy.factor(e)
ダーク・スラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
データとしてモデルを学習する	model.fit(説明変数, 目的変数)
縦棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
データシリーズの中に日付データと文字列がいくつ含まれるか数える	ds.isin([value, value2]).sum()
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームの50パーセンタイルを求める	df.median()
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
オレンジ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
横棒グラフを暗い赤色を用いて描画する	plt.barh(データ列x, データ列y, color='darkred')
数値をマゼンタにする	f'\033[35m{value}\033[0m'
ふたつの列からグループ化し標準偏差を計算する	df.groupby(['列A', '列B'], as_index=False).std()
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
横棒グラフを青色として描画する	plt.barh(データ列x, データ列y, color='blue')
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
ターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
option: フォントの色をバリーウッドに設定する	color = 'burlywood'
option: ダークオリーブグリーンを用いる	color = 'darkolivegreen'
データシリーズの欠損値を後の行の値にセットする	ds.fillna(method='bfill')
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
散布図をダークレッド色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
数列の相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
プロットのタイトルを変更する	plt.title('グラフの名称')
option: 色をラベンダーブラッシュにセットする	color = 'lavenderblush'
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: グラフの色を紺に設定する	color = 'darkblue'
データフレームからランダムに5行を抽出する	df.sample(5)
カラムのUNIX秒を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
実数を万の位で丸める	round(x, -4)
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
ペールグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='palegreen')
データシリーズのパーセンタイル	ds.quantile(パーセント/100)
データフレームの指定したカラムの尖度	df['列A'].skew()
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
変数名を項目名として、辞書	dict(name=element)
線グラフを黄色色として描画する	plt.plot(データ列x, データ列y, color='yellow')
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
パラメータについて数値の積分を算出する	sympy.integrate(e, z)
横棒グラフを描く	plt.barh(ラベル列, データ列)
リストとリストの散布図をプロットして、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
n個に配列をビン分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
棒グラフをレベッカパープル色として描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
リストの最初を捨てる	aList[1:]
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
カーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
ヒストグラムの色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
ローングリーン色でヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
nからn2までの整数列	list(range(n, n2+1))
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
最大長nの両端キューを作る	collections.deque(maxlen=n)
集合が空でないかどうか調べる	len(aSet) != 0
縦軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
半透明の破線で数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: 未入力値は無視する	dropna = True
棒グラフをシャルトリューズ色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
縦棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
option: グラフの色をダークオレンジに指定する	color = 'darkorange'
ホットピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
横棒グラフをローングリーン色として描画する	plt.barh(データ列x, データ列y, color='lawngreen')
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
赤いポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
正規分布で疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
が名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
option: ライトブルーにグラフの色を設定する	color = 'lightblue'
リストとリストについての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
数の値が整数か調べる	x.is_integer()
タプル上でキーが定義済みか確認する	key in aDict
option: グラフの種類を点線に設定する	linestyle = 'dotted'
nとn2の排他的論理和	n ^ n2
日付データを文字列としてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
列から複数個、ランダムに選ぶ	random.choices(iterable, k=n)
グラフを描く準備をする	import matplotlib.pyplot as plt
データフレームの重複を見る	df.duplicated()
option: 色をダークカーキに設定する	color = 'darkkhaki'
双方向キューのstart番目からend番目までの部分要素を求める	collections.deque(itertools.islice(deq, start, end))
範囲を指定して乱数を生成する	random.randint(最小値, 最大値)
分子と分母から有理数を作成する	fractions.Fraction(分子, 分母)
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
プラム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
データフレームの中の欠損値の合計を調べる	df.isna().sum()
グラフの色を色差別なくする	sns.set(pallete='colorblind')
数値を青色でプリントする	print(f'\033[34m{value}\033[0m')
縦棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
横棒グラフをディープスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
ブランチドアーモンド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
タプルをn回、結合する	aTuple * n
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
折れ線グラフのポイント印の色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
散布図の星マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
n番目の列を除いたデータフレームを見る	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
リストの散布図を描画する	plt.scatter(データ列x, データ列y)
散布図に左三角印を加える	plt.scatter(データ列x, データ列y, marker='<')
データフレームをグループ化してヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
日付データが日曜日かどうか	aDate.weekday() == 6
折れ線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='gray')
アクア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
安全に文字列のプレフィックスから部分文字列を取り除く	s.removeprefix(sub)
option: 暗い赤を使用する	color = 'darkred'
データフレームの選択したカラムの値が欠損値か調べる	df[['列A', '列B']].isna()
文字列をバイト列にする	bytes(s)
赤い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
実数の値が整数か確認する	x.is_integer()
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
数列を縦軸リストを横軸として、大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
オブジェクトはバイト列	isinstance(obj, bytes)
option: チョコレート色を使う	color = 'chocolate'
直後の値でデータシリーズの欠損値を埋める	ds.fillna(method='bfill')
黒いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
両端キュー	collections.deque()
ヒストグラムをパールゴールデンロッド色を使って描画する	plt.hist(データ列, color='palegoldenrod')
折れ線グラフに青いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
実行結果を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
データフレームが重複しているかどうか調べる	df.duplicated()
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
データフレームの中にある文字列と日付データの合計を数える	df.isin([value, value2]).sum()
サイコロと同じ乱数を生成する	random.randint(1, 6)
文字列の接頭辞が部分文字列	s.startswith(sub)
option: エンコーディングをUTF8に変更する	encoding = 'utf-8'
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
散布図のクロスマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
文字列をSJISでバイト列にする	s.encode(encoding='sjis', errors='ignore')
option: フォントの色をライトグリーンに設定する	color = 'lightgreen'
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
実行時の標準出力の出力先がターミナルか確認する	os.isatty(sys.stdin.fileno())
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
線形モデルの回帰変数を使う	model.coef_
折れ線グラフの色をRGBで指定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームの選択した列の欠損値を中央値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
空のロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
折れ線グラフの色をイエローグリーンに変更する	plt.plot(データ列x, データ列y, color='yellowgreen')
Pandasのバージョンを表示する	print(pd.__version__)
レモンシフォン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
ライトコーラル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
全要素が1の行列を作る	np.ones(行数, 列数, dtype=np.int)
ダークオレンジにヒストグラムの色を設定する	plt.hist(データ列, color='darkorange')
黒い星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
改行文字	'\n'
リスト内の要素が少なくともひとつ真か調べる	any(aList)
ある列の値毎の分散	df.groupby('列A').var()
折れ線グラフのバツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
option: 淡いピンク色にグラフの色を変更する	color = 'lightpink'
浮動小数点数を万の位で丸める	round(x, -4)
辞書のキーとその項目を列挙する	aDict.items()
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
データフレームを一万の位で丸める	df.round(-4)
ヒストグラムをライム色として描画する	plt.hist(データ列, color='lime')
数列を3つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ヒストグラムの色をスノーに指定する	plt.hist(データ列, color='snow')
オブジェクトはタプルクラスのインスタンスか調べる	isinstance(obj, tuple)
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
あるカラムの第一四分位数を求める	df['列A'].quantile(0.25)
青緑色として線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
部分文字列で文字列の開始位置以降が始まる	s.startswith(sub, start)
データ列をビン数nを用いてビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
散布図のマーカーをダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
折れ線グラフの色をブラックにセットする	plt.plot(データ列x, データ列y, color='black')
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
セットのイミュータブル版	frozenset(aSet)
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
まとめてデータフレームを正規表現patternで置換する	df.replace(pattern, repl, regex=True)
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
スピアマンでデータフレームの相関行列を求める	df.corr(method='spearman')
コマンドの第二引数を確認する	sys.argv[1]
データフレームの第三四分位数	df.quantile(0.75)
タプルを引数として展開してプリントする	print(*aTuple, sep=',')
表データのあるカラムは何月か調べる	df['列A'].dt.month
ファイルパスを書き込み用に文字列の示すエンコーディングとしてオープンする]	open(filepath, mode='w', encoding=s)
option: レベッカパープルにフォントの色を設定する	color = 'rebeccapurple'
option: ダークスレートブルーを使う	color = 'darkslateblue'
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
多次元データをMSDでパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ミディアムスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
線グラフの色をパレットトルコイズにセットする	plt.plot(データ列x, データ列y, color='paleturquoise')
列の全順列を求める	itertools.permutations(iterable)
ダークスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
ふたつのリストの積集合を求める	list(set(aList) & set(aList2))
タプルの平均値を計算する	sum(aTuple)/len(aTuple)
データフレームの指定したカラムの欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
実線にヒストグラムを指定する	plt.hist(データ列, linestyle='solid')
リストをソートする	sorted(aList)
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
日付データの月数を使う	aDate.month
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
option: マーカーを▲に変更する	marker = '^'
データフレームのカラムの尖りを求める	scipy.stats.kurtosis(df['列A'], bias=False)
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
文字列の最後から範囲を指定して部分文字列を探す	s.find(sub, start, end)
最初のを外したデータフレームを使う	df[df.columns[1:]]
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
文字列を部分文字列で分けたときの前半の文字列を見る	s.partition(sub)[0]
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
横棒グラフを小麦色色として描画する	plt.barh(データ列x, データ列y, color='wheat')
option: ケースを無視する	flag = re.IGNORECASE
赤い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムの色をハニーデューに変更する	plt.hist(データ列, color='honeydew')
タイムスタンプデータをn日前に戻す	aDatetime - datetime.timedelta(days=n)
JSON形式の入力を辞書に変換する	json.load(fin)
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
データフレームのある列の中にと日付データがあるか調べる	df['列A'].isin([value, value2])
指定したカラムの記述統計量	df['列A'].describe()
K最近傍法として回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
データフレームのあるカラムの値がx以上の行を抽出する	df[df['列A'] >= x]
横棒グラフをスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='skyblue')
ある列のカテゴリ毎の分散	df.groupby('列A').var()
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
データフレームを散布図で可視化し、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
一番左側のを除いたデータフレーム	df[df.columns[1:]]
マルーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['列A', '列B']).describe()
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
イテラブルをイミュータブルな集合にする	frozenset(iterable)
クラス分類をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
入力ストリームを全部、読み込む	f.read()
エンコーディングを知る	sys.getdefaultencoding()
ダークオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
要素∉セット	element not in aSet
ベージュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
オリベドラブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
小麦色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
option: 右三角印を使う	marker = '>'
データフレームのカラムの偏差値を計算する	50 + 10 * scipy.stats.zscore(df['列A'])
グラフの背景色を暗くする	sns.set(style='darkgrid')
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
配列の分散を見る	np.var(aArray)
ミディアムスプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
option: データ型を指定する	dtype = np.uint8
データフレームのあるカラムの中に存在する文字列と文字列の合計を調べる	df['列A'].isin([value, value2]).sum()
散布図をrgbの四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ファイルの拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
データフレームの指定したカラムの中にある文字列と文字列の合計を数える	df['列A'].isin([value, value2]).sum()
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
データシリーズの曜日は何日目か知る	ds.dt.dayofweek
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
横棒グラフをライトゴールドロディイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフをフローラルホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='floralwhite')
折れ線グラフのバツ印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
紺色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
ガンマ関数の値を計算する	math.gamma(x)
線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
option: ▼マーカーを加える	marker = 'v'
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
ある列のカテゴリごとの分散	df.groupby('列A').var()
棒グラフをダークオリーブグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
平均値で指定したカラムの未入力値を置き換える	df['列A'].fillna(df['列A'].mean())
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
データフレームのあるカラムが何日か見る	df['列A'].dt.day
複数行対応としてあらかじめ正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
大文字を小文字にする	s.lower()
option: フォレストグリーン色を用いる	color = 'forestgreen'
文字列中に部分文字列がいくつかあるか調べる	s.count(sub)
浮動小数点数を実数で割った余り	x % y
データ列を等しい量になるようにn個にビン分割する	pd.qcut(ds, n)
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
ライムにヒストグラムの色を設定する	plt.hist(データ列, color='lime')
大文字・小文字を無視して事前に正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
実行結果をプリントする	print(value)
データ列を折れ線グラフを用いて可視化する	plt.plot(データ列x, データ列y)
折れ線グラフに黒いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
nがn2の倍数でないか	n % n2 != 0
文字列の最初だけ大文字化する	s.capitalize()
ガンマ関数を用いる	math.gamma(x)
折れ線プロットにラベルをつける	plt.plot(データ列x, データ列y, label='ラベル')
ダークサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='darksalmon')
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
データフレームの先頭10行を見る	df.head(10)
折れ線グラフをシスル色として描画する	plt.plot(データ列x, データ列y, color='thistle')
option: リネン色を使う	color = 'linen'
折れ線グラフの大バツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
カデットブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
トマト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
全要素を0で初期化した配列	np.zeros(要素数)
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
散布図を黒い菱形マーカーでプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
カラムを標準化する	scipy.stats.zscore(df['列A'])
numpyを使う	import numpy as np
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
オプションで、標準出力を出力にする	file = sys.stdout
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
折れ線グラフを淡い茶色色で描画する	plt.plot(データ列x, データ列y, color='tan')
整数最小公倍数	math.lcm(n, n2)
半透明の実線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
グローバル変数の一覧	globals()
カウンタを高頻出方から列挙する	aCounter.most_common()
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
ダークシアン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
リストから配列を作る	np.array(iterable)
赤いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームの選択した列の平均値を計算する	df[['列A', '列B']].mean()
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
リストをビン数nを用いてビン分割する	pd.cut(aList, n)
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
option: ダークグレーに色をセットする	color = 'darkgrey'
キーが辞書上で未定義	key not in aDict
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
シアン色でヒストグラムを描画する	plt.hist(データ列, color='cyan')
配列の分散	np.var(aArray)
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
黒い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
列を累加したイテラブル	itertools.accumulate(iterable)
option: 丸マーカーを使う	marker = 'o'
option: ダークマゼンタを用いる	color = 'darkmagenta'
２つの変数を同じ値にする	x = y = n
option: グラフの色をオーキッドに設定する	color = 'orchid'
リストを中央値でビニングする	pd.qcut(aList, 2)
クラス分類の予測精度をヒートマップとして見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
カテゴリデータを連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データフレームの列の名前をまとめて置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
配列と配列の散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
珊瑚色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
書き込み用にファイルをUTF8でオープンする]	open(filepath, mode='w', encoding='utf-8')
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
文字をユニコードにする	ord(ch)
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
データシリーズの中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
日付時刻データをタプルにする	aDatetime.timetuple()
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
スピアマンの相関係数を計算する	scipy.stats.spearmanr(df['列A'], df['列B'])
データ列をヒストグラムにする	plt.hist(データ列)
シャルトリューズ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
２つの列によってデータフレームを降順に破壊的に並べる	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
折れ線グラフの色をシャルトリューズに指定する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームのカラムをにバイオリン図を用いてグラフ化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
浮動小数点数の常用対数	math.log10(x)
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
nがn2で割り切れないか調べる	n % n2 != 0
データ列を用いる	import pandas as pd
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
白いヒストグラムを描画する	plt.hist(データ列, color='w')
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
nの桁数	len(str(n))
サドルブラウン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
リストの要素を逆順にする	aList[::-1]
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
組を順に表示する	print(*aTuple)
黒い▽マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
小文字列	string.ascii_lowercase
データ列を度数分布図にする	plt.hist(データ列)
year年month月の日付	datetime.date(year=year, month=month, day=1)
横棒グラフをマルーン色を用いて描画する	plt.barh(データ列x, データ列y, color='maroon')
ライトグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データフレームのあるカラムが何時か知る	df['列A'].dt.hour
nがn2の倍数でないか調べる	n % n2 != 0
ふたつの列を組み合わせてグループ化し最大値を算出する	df.groupby(['列A', '列B'], as_index=False).max()
既存のファイルをUTF8で追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
カテゴリで色分けして、に箱ひげ図としてデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列中にひとつでも非英数字があるかどうか確認する	any(not c.isalnum() for c in s)
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
パールバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
option: 追加モードを使う	mode = 'a'
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
疑似乱数を生成する	random.random()
組を昇順に並べ変える	sorted(aTuple, reverse=True)
データフレームをCSVファイルにヘッダを付けず保存する	df.to_csv('file.csv', header=None)
シーケンスのそれぞれを関数でフィルタする	filter(func, iterable)
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
ベクトルのユニークな要素	np.unique(aArray)
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
ミディアムパープルにヒストグラムの色を指定する	plt.hist(データ列, color='mediumpurple')
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
nは何桁か	len(str(n))
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
淡い茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
プロットをスライドに設定する	sns.set(context='talk')
データフレームをある列のカテゴリでグループ化し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
オプションでファイルを出力にする	file = sys.open(filename, 'w')
ロードされたモジュールの一覧	sys.modules
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
option: 印を丸に変更する	marker = 'o'
ケンドール相関係数でデータフレームの相関行列を求める	df.corr(method='kendall')
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
散布図のマーカーを左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
散布図にrgbのバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
淡い茶色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
プラットホームのエンディアンを知る	sys.byteorder
option: ミントクリーム色を使う	color = 'mintcream'
データシリーズの曜日名	ds.dt.weekday_name
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
グラフをパステル調にする	sns.set(pallete='pastel')
線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データシリーズの空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
散布図をダークオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='darkorange')
二つのデータ列の散布図として残差を描画する	sns.residplot(x=データ列, y=データ列)
nが負の数かどうか調べる	n < 0
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
双方向キューの要素を左にn個分ローテンションする	deq.rotate(-n)
データフレームを関数ごとにグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
nがn2と等しいかどうか	n == n2
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
カウンタからゼロカウントを削除する	+aCounter
ファイルから1文字、読み込む	f.read(1)
双方向キューのstart〜endの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
グラフのタイトルを指定する	plt.title('グラフの名称')
データフレームのある列をインプレイスでドロップする	df.drop('列A', axis=1, inplace=True)
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
配列のモードを算出する	mode, count = scipy.stats.mode(配列)
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
アヤメのデータセットをロードする	df = sns.load_dataset('iris')
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
option: ベージュにグラフの色を変更する	color = 'beige'
データフレームの列を型にする	df[col] = df[col].astype(ty)
両端キュー中の要素を数える	deq.count(element)
グラフの中に枠なしの簡単な説明を加える	plt.legend(frameon=False)
実行結果を紫色にする	f'\033[35m{value}\033[0m'
横棒グラフをライトスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
グリッド線を青くする	plt.grid(color='b')
レベッカパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
イテラブルからカウンタを作る	collections.Counter(iterable)
データシリーズの欠損値を直後の値で補う	ds.fillna(method='bfill')
option: ライトグリーンにグラフの色をセットする	color = 'lightgreen'
配列の列ごとの合計値	np.sum(aArray, axis=0)
決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
辞書の値を列挙する	aDict.values()
リストの相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
データフレームのポイントプロットをプロットする	sns.pairplot(hue='カテゴリ列', data=df)
改行なしにリストをプリントする	print(value, end='')
データフレームの中にいくつ欠損値が存在するか数える	df.isna().sum()
JSON形式の文字列をロードする	json.loads(jsonString)
折れ線グラフの星マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
散布図の下三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int)
配列のトリム平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
ミディアムアクアマリン色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
nとn2の積	n * n2
散布図の菱形マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
散布図をアクア色として描画する	plt.scatter(データ列x, データ列y, color='aqua')
折れ線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
イテラブルを文字列リストに変換してタブで結合する	'\t'.join(map(str, iterable))
クリムゾン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
カウンタの上位をリストとして得る	aCounter.most_common(k)
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
スチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームの選択したカラムを万の位で丸める	df[['列A', '列B']].round(-4)
折れ線グラフのマーカーを丸印にする	plt.plot(データ列x, データ列y, marker='o')
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
線形回帰分析を行う	model = sklearn.linear_model.LinearRegression()
n個に等しい量になるようにリストを分割する	pd.qcut(aList, n)
ミッドナイトブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
リストとイテラブルの散布図に赤い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
ランダムに5行をデータフレームから抽出する	df.sample(5)
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
ホワイトスモーク色を使ってヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
x,yの複素数を求める	complex(x, y)
バイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
option: レモンシフォンを使う	color = 'lemonchiffon'
ダークオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
配列が正規分布に従うか仮説検定する	scipy.stats.shapiro(配列)
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
リストとリストの散布図を描画し、、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
シーグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
option: ホットピンク色を使う	color = 'hotpink'
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
option: ダイアモンドマーカーを描画する	marker = 'D'
横棒グラフをミディアムパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
ミントクリーム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
ミディアムシアグリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
オブジェクトは集合クラスかテストする	isinstance(obj, set)
option: レベッカパープル色を用いる	color = 'rebeccapurple'
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
データフレームの数値をまとめて小数点以下n桁で四捨五入する	df.round(n)
ミディアムバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
事前に正規表現をコンパイルする	re.compile(pattern)
0からnの範囲	range(n)
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
エクセルファイルのシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
x軸だけグリッド線	plt.grid(axis='x')
ロバストな重回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
アヤメのデータセットからデータフレームを読み込む	df = sns.load_dataset('iris')
数値を黒色で表示できる文字列にする	f'\033[30m{value}\033[0m'
データフレームのある列の値がx以上の行を抽出する	df[df['列A'] >= x]
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
ブランチドアーモンド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームをグループ化し、ある列に対し平均値を求める	df.groupby('列A')['列B'].mean()
棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgray')
ヒストグラムをインディアンレッド色として描画する	plt.hist(データ列, color='indianred')
折れ線グラフの左三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
リストの末尾からn番目以前の要素を得る	aList[:-n]
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
データシリーズの標本分散	ds.var(ddof=0)
前もって正規表現をコンパイルする	re.compile(pattern)
データフレームの数値をまとめて丸める	df.round()
折れ線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
欠損値がある行を削除する	df.dropna(inplace=True)
整数nを八進文字列にする	oct(n)[2:]
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
２つのベクトルを列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
棒グラフをターコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='turquoise')
フクシア色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
rgbの星マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
カラムの歪度	df['列A'].kurt()
散布図に青いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
新しい文字列で文字列を全部置き換える	s.replace(sub, newsub)
タプルの先頭のn要素を取り除く	aTuple[n:]
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
円グラフにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
ダークサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
日付データが日付データより後ろ	aDate > aDate2
重複ありでランダムにデータフレームからn行をサンプリングする	df.sample(n, replace=True)
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
ビスク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
データフレームの尖度	df.skew()
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
点線の折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
リストとリストについて散布図を描き、、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横棒グラフの色をダークブルーにする	plt.barh(データ列x, データ列y, color='darkblue')
ある列のカテゴリ毎の平均値	df.groupby('列A').mean()
横棒グラフの色をバイオレットにする	plt.barh(データ列x, データ列y, color='violet')
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
日付時刻データからn秒を減算する	aDatetime - datetime.timedelta(seconds=n)
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データフレームから数値データの列を選択する	df.select_dtypes('number')
よりランダムなランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
ダークシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
コーンズシルク色でヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
option: マーカーの色を黄緑にする	markerfacecolor = 'chartreuse'
実部と虚部から複素数を作る	complex(x, y)
横棒グラフをダークオーキッド色として描画する	plt.barh(データ列x, データ列y, color='darkorchid')
カウンタをマッピングで更新する	aCounter.update(aDict)
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgray')
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
option: 色をディープスカイブルーに設定する	color = 'deepskyblue'
データフレームをソートし、、上の方n件を取り出す	df.sort_values('キーとなる列').head(n)
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
整数nを十六進表現にする	hex(n)
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
option: ロージーブラウン色を用いる	color = 'rosybrown'
データ列をビン数nを用いてビンニングする	pd.cut(ds, n)
乱数を求める	random.random()
ある列の値がxに等しく、別の列の値がyに等しいデータを選択する	df[(df['列A'] == x) & (df['列B'] == y)]
option: グラフの色をパレットトルコイズに指定する	color = 'paleturquoise'
タイムスタンプデータにn分分、加える	aDatetime + datetime.timedelta(minutes=n)
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
データフレームの中にあるの合計をカウントする	df.isin([value]).sum()
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
横軸の最大・最小値を変更する	plt.xlim(最小値, 最大値)
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
option: アンティークホワイト色を使う	color = 'antiquewhite'
データフレームのあるカラムをリストとして抽出する	df['列A'].values.tolist()
縦棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
文字列中の大文字を小文字に変換する	s.lower()
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
横棒グラフをミディアムシアグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
option: ライトグレーにフォントの色を変更する	color = 'lightgrey'
データフレームの一部のカラムの空文字をNaNに変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
散布図をオレンジレッド色を使って描画する	plt.scatter(データ列x, データ列y, color='orangered')
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
ナバホホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
データフレームのカラムのKurtosisを算出する	scipy.stats.kurtosis(df['列A'], bias=False)
散布図を左三角印を用いる描画する	plt.scatter(データ列x, データ列y, marker='<')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
赤い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフを青い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
データシリーズがどの程度、正規分布から尖っているか調べる	ds.skew()
ヒストグラムを破線を用いて描画する	plt.hist(データ列, linestyle='dashed')
option: バイオレット色を使用する	color = 'violet'
データフレームをグループ化し、各個数を計算する	df.groupby('列A').count()
データフレームのモードを計算する	df.mode()
異なる列をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
正規表現を用いる	import re
日付データが日付データより前か調べる	aDate < aDate2
ヒストグラムの色をアンティークホワイトにする	plt.hist(データ列, color='antiquewhite')
ダークカーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: フォントの色をリネンに設定する	color = 'linen'
ゴーストホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
グラフのタイトルを設定する	plt.title('グラフの名称')
縦棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データ列を全てdatetime64型にする	pd.to_datetime(ds)
ミディアムオーキッドにヒストグラムの色を指定する	plt.hist(データ列, color='mediumorchid')
実数の指数	math.frexp(x)[1]
option: グラフの色を暗い赤に設定する	color = 'darkred'
option: マーカーを右三角に変える	marker = '>'
データシリーズの不偏分散を求める	ds.var(ddof=1)
日付時刻データにn秒分加える	aDatetime + datetime.timedelta(seconds=n)
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
CSVファイルを読み込む	pd.read_csv('file.csv', sep=',')
日付時刻データを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
データフレームの指定したカラムの不偏分散を算出する	df['列A'].var(ddof=1)
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
option: ダークサーモン色を使う	color = 'darksalmon'
nがn2で割り切れるかどうか調べる	n % n2 == 0
散布図のポイントマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
ベクトルは何次元か調べる	aArray.ndim
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
option: 左三角マーカーを描画する	marker = '<'
列のユニークな値の個数を見る	df[col].nunique()
option: 右三角マーカーを描画する	marker = '>'
option: アイボリーに色を指定する	color = 'ivory'
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
カラーバーを水平に付ける	plt.colorbar(orientation='horizontal')
赤い▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ミディアムオーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
句読点文字を全部見る	string.punctuation
nが負の整数	n < 0
データシリーズを10の位で丸めて、整数型にする	ds.round(-1).astype(int)
行列の演算をする	import numpy as np
データフレームの指定したカラムの欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
データフレームをグループ化し、標準偏差を計算する	df.groupby('列A').std()
句点文字を求める	string.punctuation
マップの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
青緑にヒストグラムの色を指定する	plt.hist(データ列, color='teal')
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
option: グラフの色をオールドレースに設定する	color = 'oldlace'
データフレームの先頭5行を見る	df.head(5)
縦棒グラフを茶色色を用いて描画する	plt.bar(データ列x, データ列y, color='brown')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
表データの指定したデータ型の列名を列挙する	df.select_dtypes(型).columns
ヒストグラムをマルーン色として描画する	plt.hist(データ列, color='maroon')
日付データと日付データの時間差は何分か知る	(aDate - aDate2).total_seconds()//60
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
データフレームの欠損値を最小値にする	df.fillna(df.min())
整数の小数点を丸める	round(x)
エラーを出力する	sys.stderr
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
ガンマ関数を使う	math.gamma(x)
文字列は全て十進数字	s.isdecimal()
タプルをひとつ置きに得る	aTuple[::2]
線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームのあるカラムの欠損値をxに設定する	df['列A'].fillna(x)
ヒストグラムをスノー色として描画する	plt.hist(データ列, color='snow')
データフレームから100行、サンプリングする	df.sample(100)
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
タプルの平均	sum(aTuple)/len(aTuple)
双方向キューの先頭から要素を取り除く	deq.popleft()
ブルーバイオレットにヒストグラムの色を変更する	plt.hist(データ列, color='blueviolet')
主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
日付時刻データにn秒分、加える	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
n個の整数列を作る	list(range(n))
ロージーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='rosybrown')
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
散布図をリネン色として描画する	plt.scatter(データ列x, データ列y, color='linen')
縦棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
日付時刻データにn時間分加える	aDatetime + datetime.timedelta(hours=n)
データフレームの選択したカラムの欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
未定値	None
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
データフレームを用いる	import pandas as pd
option: グラフの色をダークグレーに設定する	color = 'darkgray'
散布図のダイアモンド印の線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
グラフを色差別なくする	sns.set(pallete='colorblind')
日付時刻データのタイムゾーン	aDatetime.timetz()
折れ線グラフの色をグリーンイエローにセットする	plt.plot(データ列x, データ列y, color='greenyellow')
ミディアムスプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumspringgreen')
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
フィッシャーの線形判別分類の準備をする	model = sklearn.manifold.TSNE(n_components=n)
データフレームはどの程度、分散しているか見る	df.var()
ヒストグラムをライトサーモン色として描画する	plt.hist(データ列, color='lightsalmon')
正規表現patternでまとめて指定したカラムの値をreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
バイアスなしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
散布図を黒いクロスマーカーとして描く	plt.plot(データ列x, データ列y, marker='x', c='k')
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
文字列を部分文字列で分割したときの後半の文字列	s.partition(sub)[-1]
文字列の先頭で正規表現に大文字・小文字を無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategray')
赤い点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
数値を数値計算する	float(e)
小数点数とyのノルム	math.hypot(x, y)
option: グラフの色をライムに設定する	color = 'lime'
列の各データが何回出現するか調べる	ds.value_counts()
データフレームの二つのカラムを並べて箱ひげ図として可視化する	plt.boxplot([df['カラム'], df['カラム']])
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
ラベンダー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
最小値でデータフレームの一部のカラムのNaNを埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
ダイアモンド印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームの選択したカラムを丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
あるカラムの文字列に部分文字列が存在しない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
辞書のキーとその値をペアとして取り出す	aDict.items()
ファイルを開いて]、書き込みストリームを使う	open(filepath, mode='w')
ブラック色を用いてヒストグラムを描画する	plt.hist(データ列, color='black')
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
タプルの合計	sum(aTuple)
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
整数nを符号付きでバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
option: 分割記号をスラッシュにする	sep = '/'
データシリーズの不偏分散を算出する	ds.var(ddof=1)
降順で行によってデータフレームをソートする	df.sort_index(ascending=False)
ビン数nで配列をビニングし、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
イテラブルのコンビネーション	itertools.combinations(iterable, n)
線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
散布図を黒い菱形マーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
カウンタを使う	import collections
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームの選択したカラムの欠損値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
option: グラフの色をインディアンレッドに指定する	color = 'indianred'
sin	math.sin(x)
ダークオーキッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
縦棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
option: 色をブルーバイオレットにする	color = 'blueviolet'
ヒストグラムをイエローグリーン色を使って描画する	plt.hist(データ列, color='yellowgreen')
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
ヒストグラムをダーク・スラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategrey')
数値を積分する	sympy.integrate(e)
データフレームの選択したカラムの中にあると日付データの合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
集合から別の集合を除去する	aSet.difference_update(aSet2)
等差数列を行列にする	np.arange(開始値, 終了値, 等差)
バイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
マッピングからキーの値か、もしくは要素を見る	aDict.get(key, element)
カウンタの要素のカウントを使う	aCounter[element]
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
大きさnでリストと数列についての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
nをn2で割った余り	n % n2
縦棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategray')
option: サーモン色を使用する	color = 'salmon'
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
ヒストグラムをフォレストグリーン色を用いて描画する	plt.hist(データ列, color='forestgreen')
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
ある列に重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
折れ線グラフの下三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
棒グラフをパールバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palevioletred')
n2がnより大きく、かつn3より小さいか調べる	n < n2 and n2 < n3
option: グリーンイエローにフォントの色を指定する	color = 'greenyellow'
リストとリストについて散布図をプロットし、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ファイルをクローズする	f.close()
option: パウダーブルー色を使用する	color = 'powderblue'
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
データフレームをグループ化し、あるカラムに対し分散を求める	df.groupby('列A')['列B'].var()
データフレームの欠損値を平均に設定する	df.fillna(df.mean())
ヒストグラムをライトスチールブルー色を用いて描画する	plt.hist(データ列, color='lightsteelblue')
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
リストをリストを境界値としてビニングする	pd.cut(aList, aList)
ブランチドアーモンド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
ヒストグラムの色をオールドレースに指定する	plt.hist(データ列, color='oldlace')
データシリーズの値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
横棒グラフをパールバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='palevioletred')
棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
列を分割する	pd.cut(ds, aList)
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
数列間のケンドールの相関係数	scipy.stats.kendalltau(数列, 数列2)
文字列の開始位置から先に部分文字列が含まれないかどうか確認する	s.find(sub, start) == -1
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
ユーザの入力を整数として受け取る	int(input())
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
符号付きで整数nを長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データフレームの指定したカラムの中にいくつ欠損値があるか数える	df['列A'].isna().sum()
データフレームの指定したカラムの標本分散	df['列A'].var(ddof=0)
セットをイミュータブルにする	frozenset(aSet)
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
実数を切り上げて整数にする	math.ceil(x)
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
文字列を青色にする	f'\033[34m{value}\033[0m'
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームを関数の値ごとにグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
ライムにヒストグラムの色を指定する	plt.hist(データ列, color='lime')
クリムゾン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
t分布型確率的近傍埋め込み法を用いて多次元データをパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームの一部のカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
散布図をrgbのバツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データシリーズを千の位で丸める	ds.round(-3)
option: フクシア色を使用する	color = 'fuchsia'
２つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
option: 色をゴールドに指定する	color = 'gold'
分類モデルを学習する	model.fit(説明変数, 目的変数)
データシリーズの中にいくつ欠損値が存在するか調べる	ds.isna().sum()
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームの指定したカラムの名前一覧の列を抽出する	df[columns]
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
データフレームの指定したカラムの母標準偏差	df['列A'].std(ddof=0)
オプションで、出力先を標準エラーに設定する	file = sys.stderr
列名を指定して二つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
'A'列の値がxに等しいデータを抽出する	df[df['列A'] == x]
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームからカテゴリデータのカラム名の一覧を求める	df.select_dtypes('object').columns
データフレームの一部のカラムのKurtosis	df[['列A', '列B']].kurt()
データフレームの相関行列をヒートマップを用いて可視化する	sns.heatmap(df.corr())
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
リストとデータ列についてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: SJISを使用する	encoding = 'shift_jis'
整数nのバイト長	(n.bit_length() + 7) // 8
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
散布図のマーカーを大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
双方向キューの長さを制限する	collections.deque(maxlen=n)
プロットの色を全般的に暗くする	sns.set(pallete='dark')
双方向キュー中の値の位置	deq.index(element)
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
トマト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
ベクトルの列ごとの合計	np.sum(aArray, axis=0)
リストの相関を可視化する	plt.scatter(データ列x, データ列y)
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
日付データからn分、引く	aDate - datetime.timedelta(minutes=n)
散布図をミディアムアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
棒グラフをドジャーブルー色として描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
option: パパイヤウィップを使う	color = 'papayawhip'
下三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
勾配ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
赤い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
データフレームの末尾n行を抽出する	df.tail(n)
三数の最小値	min(x, y, z)
回帰分析をブースティングを用いてする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
グラフを使う準備をする	import matplotlib.pyplot as plt
n番目のカラムを除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
目盛線	plt.grid(linestyle='--')
データシリーズの欠損値を直前の値に指定する	ds.fillna(method='ffill')
option: スラグレーを使う	color = 'slategrey'
集合をリストに変換する	list(aSet)
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
左三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
year年の日付	datetime.date(year=year, month=1, day=1)
データフレームの選択したカラムの欠損値を最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
列名を指定して二つのデータフレームを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
option: マーカーの色をブラックにする	markerfacecolor = 'black'
オールドレースにヒストグラムの色を指定する	plt.hist(データ列, color='oldlace')
1行分標準入力から読み込む	sys.stdin.readline()
データフレームの指定したカラムの値が欠損値か調べる	df['列A'].isna()
ライトスレイグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
option: ライトサーモンを使う	color = 'lightsalmon'
バリーウッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
ファイルを書き込み用にEUCでオープンする]	open(filepath, mode='w', encoding='euc_jp')
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
データフレームの選択したカラムの中にいくつNaNが存在するか求める	df[['列A', '列B']].isna().sum()
イテラブルと数列についての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
文字列中にひとつでも非アスキー文字があるか調べる	any(not c.isascii() for c in s)
option: 箱ヒゲ図を水平方向にする	vert = False
option: グラフの色をスプリンググリーンに変更する	color = 'springgreen'
折れ線グラフでデータ列を図示する	plt.plot(データ列x, データ列y)
折れ線グラフにダイアモンドマーカーを加える	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
部分文字列を文字列の開始位置から探す	s.find(sub, start)
実数を十の位で丸める	round(x, -1)
折れ線グラフを青い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
折れ線グラフの色をゴールドにする	plt.plot(データ列x, データ列y, color='gold')
リストと数列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
表データから型リストで指定したデータ型の列だけ抽出する	df.select_dtypes(include=typeList)
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
タイムスタンプデータが何年か知る	aDatetime.year
折れ線グラフのポイント印の大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategray'
縦棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
ブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
縦棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
タブ区切りのファイルを読む	pd.read_csv('file.tsv', sep='\t')
ヒストグラムを暗い赤色を用いて描画する	plt.hist(データ列, color='darkred')
日付時刻データが何秒か知る	aDatetime.second
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
データ列と配列の散布図を描画し、、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ヒストグラムの色をマルーンに指定する	plt.hist(データ列, color='maroon')
y座標の最大・最小を変更する	plt.ylim(最小値, 最大値)
表データのあるカラムは何月か見る	df['列A'].dt.month
データフレームの選択したカラムの欠損値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
作画の背景色を暗くする	sns.set(style='darkgrid')
その中央値でデータシリーズの欠損値を埋める	ds.fillna(ds.median())
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
横棒グラフの縦幅を指定する	plt.barh(ラベル列, データ列, width=0.5)
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
タプルをナンバリングする	enumerate(aTuple)
散布図をホワイトスモーク色を用いて描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
リストの長さだけ繰り返す	range(len(aList))
文字列をカンマで分割して、文字列リストにする	s.split(',')
データフレームの指定した列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
折れ線グラフをハニーデュー色を用いて描画する	plt.plot(データ列x, データ列y, color='honeydew')
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
折れ線グラフの左三角印の太さを指定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
option: 線を太くする	linewidth = 3.0
ブラック色で散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
指定した列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
縦棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
option: グレー色を用いる	color = 'gray'
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
グレーにヒストグラムの色を変更する	plt.hist(データ列, color='grey')
データフレームが何行重複するか見る	df.duplicated().sum()
option: 読み込む行番号をnamesで指定する	usecols = names
データフレームのパーセンタイル	df.quantile(パーセント/100)
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
ファイルパスを追加用に開く]	open(filepath, mode='a')
プロットのカラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
辞書からキーで指定された項目をポップする	aDict.pop(key)
上限制限された長さnの両端キューを作る	collections.deque(maxlen=n)
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
データフレームを関数毎にグループ化し、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
折れ線グラフに黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
option: ターコイズ色を用いる	color = 'turquoise'
option: 右三角マーカーを使う	marker = '>'
線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
線グラフをアイボリー色を用いて描画する	plt.plot(データ列x, データ列y, color='ivory')
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
xが一桁の数かどうか調べる	-9 <= x <= 9
横棒グラフをデピンク色として描画する	plt.barh(データ列x, データ列y, color='deeppink')
作画のフォントを日本語に設定する	sns.set(font='IPAexGothic')
整数nは配列のどれかか	n in aArray
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
散布図に▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
配列のスピアマンの相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
option: ゴールデンロッド色を使う	color = 'goldenrod'
二つの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
小麦色色でヒストグラムを描画する	plt.hist(データ列, color='wheat')
デックのn番目の値	deq[n]
黒い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
折れ線グラフを半透明の実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
散布図をダークオリーブグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
平均付き箱ひげ図を描く	plt.boxplot(データ列, showmeans=True)
実数は無限大か調べる	math.isinf(x)
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
実数を複素数に変換する	complex(x)
ベクトルを平坦にする	aArray.flatten()
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
データフレームの選択した列の空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
折れ線グラフをダークカーキ色を使って描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
指定した列のカテゴリで集計し、それぞれの個数を求める	df.groupby('列A').count()
ヒストグラムをパールバイオレットレッド色を用いて描画する	plt.hist(データ列, color='palevioletred')
データフレームのあるカラムの文字列を欠損値にする	df['列A'].replace(値, np.nan)
列に列を続けたイテラブル	itertools.chain(iterable, iterable2)
ファイルを一行ずつ読み込む	f.readline()
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
ヒストグラムをミントクリーム色を用いて描画する	plt.hist(データ列, color='mintcream')
異なる列をキーとしてデータフレームを結合する	pd.merge(df, df2, left_on='列A', right_on='列B')
文字列モジュールをインポートする	import string
あるカラムのカテゴリごとの最小値	df.groupby('列A').min()
折れ線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
option: インデックスを自動的な連番に設定する	index_col = None
文字列の開始位置から終了位置の範囲で部分文字列の出現回数をカウントする	s.count(sub, start, end)
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
データフレームのカラムの歪度を求める	scipy.stats.skew(df['列A'], bias=False)
ヒストグラムの色をサドルブラウンに変更する	plt.hist(データ列, color='saddlebrown')
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
散布図に黒い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
データフレームの列の文字列長を列として見る	df[col].str.len()
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
整数nの二進表現	bin(n)
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
リストの末尾	aList[-1]
イテラブルのイミュータブルな集合を見る	frozenset(iterable)
データフレームのあるカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
ヒストグラムの色をライトブルーに変更する	plt.hist(データ列, color='lightblue')
ダークターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='darkturquoise')
折れ線グラフの印を菱形にする	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
列から1個ランダムに選ぶ	random.choice(iterable)
アルファベットの大文字を全部使う	string.ascii_uppercase
多次元尺度構成法を使って多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
中央値でデータフレームの欠損値を補完する	df.fillna(df.median())
配列とリストについての散布図にバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x')
マゼンタにヒストグラムの色を指定する	plt.hist(データ列, color='magenta')
ミディアムアクアマリン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
タイムスタンプデータからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
データフレームの一部のカラムの欠損値を中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
ヒストグラムをサーモン色を用いて描画する	plt.hist(データ列, color='salmon')
タプルの中の一番大きい値	max(aTuple)
イテラブルをカウンタに変換する	collections.Counter(iterable)
データフレームの指定したカラムを小数点以下n桁で四捨五入する	df['列A'].round(n)
option: ゴールデンロッドを使う	color = 'goldenrod'
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
ラベル付きの円プロットを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
カラーパレットを淡くする	sns.set(pallete='muted')
データフレームの最初100行	df.head(100)
配列を平坦化する	aArray.flatten()
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
配列の次元数	aArray.ndim
線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
オブジェクトが名前付きタプル型か調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ダークカーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
option: 符号なし８ビット整数型を使う	dtype = np.uint8
nがn2よりも大きいか調べる	n > n2
ヒストグラムをオーキッド色として描画する	plt.hist(データ列, color='orchid')
散布図の印を星にする	plt.scatter(データ列x, データ列y, marker='*')
option: ダークサーモンにグラフの色を設定する	color = 'darksalmon'
列名をリストで置き換える	df.columns = columns
散布図をダークバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
紺碧色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
乱数で要素を埋めた配列	np.random.random(N)
アルファベットの小文字を全部使う	string.ascii_lowercase
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
縦棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
リストをダミー変数に変換する	pd.get_dummies(リスト)
あるカラムの文字列が部分文字列で終わらない行を抽出する	df[~ df['列A'].str.endswith(部分文字列)]
ある列ごとの個数	df.groupby('列A').count()
小数点数の常用対数	math.log10(x)
データフレームの末尾100行を選択する	df.tail(100)
線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
option: スレートブルー色を用いる	color = 'slateblue'
横棒グラフをブラック色を用いて描画する	plt.barh(データ列x, データ列y, color='black')
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
データシリーズの欠損値を最頻値に指定する	ds.fillna(ds.mode().iloc[0])
列を選んで重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
リストとリストについての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
正規化したヒストグラムを描く	plt.hist(データ列, density=True)
最初のを除いたデータフレーム	df[df.columns[1:]]
option: ネイビー色を使用する	color = 'navy'
ファイルをSJISとして書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
データ列のユニークな要素数	ds.nunique()
リストを下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
散布図をrgbのポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
タイムスタンプデータをタプルにする	aDatetime.timetuple()
グラフをスライドに設定する	sns.set(context='talk')
変数について数式の積分を求める	sympy.integrate(e, z)
最大値と最小値でデータを正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
リストとデータ列の散布図を描画して、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
2を底とする実数の対数を計算する	math.log2(x)
データフレームを千の位で四捨五入して、整数型にする	df.round(-3).astype(int)
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgrey')
文字列でフォーマットして日付データを文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
整数nの八進文字列を求める	oct(n)[2:]
タイムスタンプデータの時刻を見る	aDatetime.hour
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
データフレームの指定したカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
折れ線グラフの色を茶色にセットする	plt.plot(データ列x, データ列y, color='brown')
散布図の印をダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
日付データからn週間を減算する	aDate - datetime.timedelta(weeks=n)
データ列の出現頻度を可視化する	plt.hist(データ列)
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
折れ線グラフを青い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
棒グラフをシルバー色として描画する	plt.bar(データ列x, データ列y, color='silver')
無限にイテラブルを繰り返す	itertools.cycle(iterable)
ヒストグラムの色をカーキに変更する	plt.hist(データ列, color='khaki')
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
両端キューの末尾から要素を取り除く	deq.pop()
指定した列のカテゴリで集計し、それぞれの標準偏差を求める	df.groupby('列A').std()
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
マッピングからキーの値をエラーなく得る	aDict.get(key, None)
データフレームのカラムの不偏標準偏差を求める	df['列A'].std()
データフレームの指定したカラムの中の欠損値の合計を数える	df['列A'].isna().sum()
option: カデットブルーにグラフの色を指定する	color = 'cadetblue'
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
横棒プロットを描画して、下寄せする	plt.barh(ラベル列, データ列, align='edge')
指定したカラムの欠損値をモードに指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
散布図の星印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
文字列リストをsepを区切りにして一つの文字列にする	sep.join(aStringList)
現在が何時か知る	datetime.date.today().hour
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
文字列を緑色にする	f'\033[32m{value}\033[0m'
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
イテラブルの要素を全て集合に追加する	aSet.update(iterable)
リストから配列を作る	np.array(aList)
Pythonパスのリストを調べる	sys.path
nからn2までのスライス	slice(n, n2)
データフレームの中に文字列と文字列があるか確認する	df.isin([value, value2])
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
自然数の階乗	math.factorial(n)
データフレームを２つの列でまとめたグループを使う	df.groupby(['列A', '列B'])
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
実数から実数を減算する	x - y
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
n2分のnを求める	n / n2
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
rgbの菱形マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
作画で用いるフォントを指定する	sns.set(font=フォント名)
最適な位置に凡例を表示する	plt.legend(loc='best')
rgbの▼マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
折れ線グラフの左三角印を青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
nとn2の差	n - n2
文字列が英数字か調べる	s.isalnum()
複数行対応として正規表現で文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
二つのデータフレームを異なる列をキーとして内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
ヒストグラムを茶色色を用いて描画する	plt.hist(データ列, color='brown')
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
Excelファイルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
折れ線グラフの色をインディゴに変更する	plt.plot(データ列x, データ列y, color='indigo')
折れ線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームのn行目を消して	df.drop(n, axis=0)
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
データ列の偏りを平方根変換する	np.sqrt(データ列)
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
option: ミスティローズにフォントの色を設定する	color = 'mistyrose'
青紫色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
今日が月曜日か調べる	datetime.datetime.today().weekday() == 0
行列の次元数	aArray.ndim
散布図を白色を用いて描画する	plt.scatter(データ列x, データ列y, color='white')
集合から別の集合との共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
文字列のn番目	s[n]
データフレームの重複した行を数える	df.duplicated().sum()
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
ラジアンの角度を求める	math.degrees(x)
あるカラムの値ごとの平均値	df.groupby('列A').mean()
データフレームの列のユニークな要素数	df[col].nunique()
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームのカラムの母標準偏差	df['列A'].std(ddof=0)
文字列の先頭から部分文字列を探す	s.find(sub)
実数の自然対数を算出する	math.log(x)
ファイルをバイナリ用に開く]	open(filepath, mode='rb')
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
異なるカラムをキーとして２つのデータフレームを全結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
散布図に赤いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ヒストグラムを珊瑚色で描画する	plt.hist(データ列, color='coral')
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムの色をブラックに指定する	plt.hist(データ列, color='black')
データフレームの選択したカラムがどれだけ正規分布から歪んでいるか確認する	df[['列A', '列B']].kurt()
棒グラフをダーク・スラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
データフレームから列を一つ選択する	df[['列A']]
オブジェクトは文字列クラス	isinstance(obj, str)
カンマで区切って二つの文字列を表示する	print(value, value2, sep=',')
双方向キューのstart〜endの部分値を使う	collections.deque(itertools.islice(deq, start, end))
データフレームの列のユニークな値を見る	df[col].unique()
散布図を▽印を使って描画する	plt.scatter(データ列x, データ列y, marker='v')
指定した列のカテゴリで集計し、それぞれの合計を算出する	df.groupby('列A').sum()
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: ハニーデューにグラフの色を変更する	color = 'honeydew'
n個の要素があるリスト	[element] * n
実数以下の最大の整数	math.floor(x)
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
実数の天井	math.ceil(x)
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
option: ベージュを使う	color = 'beige'
シルバー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
'A'列の値がxに等しい行を抽出する	df[df['列A'] == x]
rgbの下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
十六進文字列を整数にする	int(s, 16)
数値を方程式として解く	sympy.solve(e)
ファイルを絶対ファイルパスに変換する	os.path.abspath(filepath)
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームの最後の列以外を説明変数にする	説明変数 = df[df.columns[:-1]]
文字列の長さを使う	len(s)
日付時刻データは何時か知る	aDatetime.hour
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
散布図に青い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
バイオレットにヒストグラムの色を変更する	plt.hist(データ列, color='violet')
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
集合から別のセットの要素を除く	aSet.difference_update(aSet2)
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
データフレームを表示するとき表示する列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
プロットにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
行列の列を選択する	aArray[:, 列番号]
あるカラムの標本分散	df['列A'].var(ddof=0)
ある列の値がx以上、y以下の行を取り出す	df[(x <= df['列A']) & (df['列A'] <= y)]
データフレームの欠損値をその最小値で補完する	df.fillna(df.min())
有理数の分子	q.numerator
タプルを逆順にする	reversed(aTuple)
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
データフレームの中に文字列があるか調べる	df.isin([value])
0から始まる無限数列	itertools.count()
データシリーズがどれだけ、分散しているか見る	ds.var()
横棒プロットの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームの指定したカラムが正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
option: 配列のデータ型を指定する	dtype = np.int16
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
変数をシアンにする	f'\033[36m{value}\033[0m'
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
ふたつの関係が上位集合	aSet.issuperset(aSet2)
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
データフレームのカラムのトリム平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
集合から別の集合との共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
option: ディープスカイブルー色を使う	color = 'deepskyblue'
棒グラフをダークレッド色で描画する	plt.bar(データ列x, データ列y, color='darkred')
データフレームの先頭のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
option: ゲインズボロを用いる	color = 'gainsboro'
マッピングを階層化マップに変換する	collections.ChainMap(aDict)
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
データフレームの選択したカラムを千の位で丸めて、整数にする	df[['列A', '列B']].round(-3).astype(int)
ライトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
nをn2で割った剰余	n % n2
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
option: フォントの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
nが1、もしくは2	n == 1 or n == 2
データフレーム中の欠損値をドロップしてみる	df.dropna()
カラムが正規分布からどれだけ、歪んでいるか見る	df['列A'].kurt()
リストの要素を関数に適用した結果で並べ直す	sorted(aList, key=func)
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
ファイルをバイナリモードとしてオープンして]fとする	f = open(filepath, mode='rb')
集合に値を追加する	aSet.add(element)
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
option: プラムを用いる	color = 'plum'
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
option: ゲインズボロを使う	color = 'gainsboro'
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
オプションで、出力先を標準出力に設定する	file = sys.stdout
ムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
ドジャーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
nの無限イテラブルを求める	itertools.repeat(n)
数式の積分を計算する	sympy.integrate(e)
データフレームを二つの列によってまとめたグループを使う	df.groupby(['列A', '列B'])
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
nからn2を引く	n - n2
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
データシリーズが何年か見る	ds.dt.year
文字列が文字列リストのいづれか判定する	s in aStringList
プロットの色をパステル調にする	sns.set(pallete='pastel')
実部と虚部から複素数	complex(x, y)
データフレームの選択した列のどの値が頻出か見る	df[['列A', '列B']].mode()
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
変数を赤色にする	f'\033[31m{value}\033[0m'
カウンタの全数	aCounter.total()
縦棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームの累積分布をプロットする	sns.ecdfplot(x='列名', data=df)
option: 印を四角に変更する	marker = 's'
option: 色をプラムに設定する	color = 'plum'
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
グリッド線をグラフから消す	plt.grid(False)
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
グリッド線	plt.grid(alpha=0.5)
回帰木の重要度をグラフ化する	plt.barh(X.columns, model.feature_importances_)
option: バツマーカーを用いる	marker = 'x'
データフレームの指定した列の75パーセンタイル	df['列A'].quantile(0.75)
文字列の中の複数行対応としてパターンによるマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
xでデータシリーズの欠損値を置換する	ds.fillna(x)
散布図の印を右三角印にする	plt.scatter(データ列x, データ列y, marker='>')
表データのあるカラムが何日か調べる	df['列A'].dt.day
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
2を底とする実数の対数	math.log2(x)
データフレームの指定したカラムの未入力値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
ヒストグラムの色を淡い茶色に設定する	plt.hist(データ列, color='tan')
データフレームの指定したカラムの標本標準偏差	df['列A'].std(ddof=1)
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
xの絶対値を計算する	abs(x)
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
option: 星印を使う	marker = '*'
データフレームの選択した列を千の位で丸めて、整数にする	df[['列A', '列B']].round(-3).astype(int)
データフレームのどの値が最も出現するか確認する	df.mode()
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
散布図の印をポイント印にする	plt.scatter(データ列x, データ列y, marker='.')
ある列の文字列に部分文字列が含まれない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
黒いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
option: フクシアを使う	color = 'fuchsia'
散布図の下三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
option: 暗い赤色を使用する	color = 'darkred'
option: ダークオーキッド色を使う	color = 'darkorchid'
整数nをn2分の1にする	n //= n2
ミスティローズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
散布図を黄緑色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
散布図でデータフレームの全列を描く	sns.pairplot(df)
option: 追加モードを用いる	mode = 'a'
イテラブルとリストについて散布図を描画して左三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
option: フォントの色をダークグレーに変更する	color = 'darkgrey'
データフレームの中に文字列が含まれるかどうか調べる	df.isin([value])
線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
option: 印の色を変更する	markerfacecolor = '#800080'
データフレームをグループ化しあるカラムに対し合計を求める	df.groupby('列A')['列B'].sum()
折れ線グラフを赤い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
数列を円プロットにする	plt.pie(データ列, startangle=90)
option: イエローグリーン色を使う	color = 'yellowgreen'
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
データフレームの散布図をグループ化して横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
データシリーズをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
リストと数列についての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームのカラムの正規分布を判定する	scipy.stats.shapiro(df['列A'])
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
option: フォントの色をマゼンタに設定する	color = 'magenta'
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
データフレームから重複を破壊的にドロップする	df.drop_duplicates(inplace=True)
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
ゴーストホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
行列の要素ごとの最小公倍数を求める	np.lcm(aArray, aArray2)
nが無限に続く整数リストを得る	itertools.repeat(n)
二つのデータフレームを列名を指定してジョインする	pd.merge(df, df2, on='列A')
散布図に赤い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
option: 色をイエローグリーンに変更する	color = 'yellowgreen'
行列の要素ごとの積を求める	np.multiply(aArray, aArray2)
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
イテラブルを両端キューに変換する	collections.deque(iterable)
option: ダークカーキ色を使う	color = 'darkkhaki'
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
ファイルから読み込みストリームを開き]、fとする	f = open(filepath, mode='r')
option: カンマを区切りで使う	sep = ','
指定したカラムの未入力値をxで補う	df['列A'].fillna(x)
文字列全体が正規表現に大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
行列の要素ごとに加算する	aArray + aArray2
文字化けを防ぐ	sns.set(font='IPAexGothic')
xを整数にする	int(x)
データフレームから型を抽出する	df.select_dtypes(ty)
ヒストグラムを三つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
横棒グラフの色を淡い茶色にする	plt.barh(データ列x, データ列y, color='tan')
option: ペルーに色を設定する	color = 'peru'
option: ライトグレー色を用いる	color = 'lightgray'
数列と数列の散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
option: 線の種類を実線に設定する	linestyle = 'solid'
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
大量のデータが正規分布に従うか仮説検定する	scipy.stats.kstest(配列, 'norm')
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
折れ線グラフを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
現在のローカルな日付を使う	datetime.date.today()
リストとリストについてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
ミディアムターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
タイムスタンプデータを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
線グラフをオリベドラブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olivedrab')
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
文字列内にひとつでもアルファベットが含まれる	any(c.isalpha() for c in s)
文字列が全て大文字か調べる	s.isupper()
ミッドナイトブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
線グラフをモカシン色を用いて描画する	plt.plot(データ列x, データ列y, color='moccasin')
カラムの歪み	scipy.stats.skew(df['列A'], bias=False)
正規化されたヒストグラムを描く	plt.hist(データ列, density=True)
データフレームの指定したカラムのNaNを最小値にセットする	df['列A'].fillna(df['列A'].min())
現在を文字列を使ってフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
文字列を空白で区切る	s.split()
線グラフを色付きの点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
データフレームのある列をインデックスに設定する	df.set_index('列A')
option: グラフの色をラベンダーブラッシュに指定する	color = 'lavenderblush'
データフレームを並べ直す	df.sort_values('キーとなる列')
書き込みできるように文字列の示すエンコーディングでファイルを開く]	open(filepath, mode='w', encoding=s)
データシリーズを百の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
グレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
文字列リストをsepを区切りとして結合する	sep.join(aStringList)
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
データフレームを百の位で四捨五入して、整数にする	df.round(-2).astype(int)
option: 四角マーカーを用いる	marker = 's'
集合からエラーなく要素を取り除く	aSet.discard(element)
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
安全に文字列の接頭辞から部分文字列を除く	s.removeprefix(sub)
データフレームを丸めて、整数型にする	df.round().astype(int)
ファイルの絶対ファイルパス	os.path.abspath(filepath)
リストを昇順にソートする	sorted(aList, reverse=True)
数値の平方根を求める	sympy.sqrt(e)
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
ある列をドロップする	df.drop('列A', axis=1, inplace=True)
文字列を左トリムする	s.lstrip()
xが真	bool(x)
整数nの16進文字列	hex(n)[2:]
整数の最大値	sys.maxsize
データフレームの列を丸めて、整数型にする	df['列A'].round().astype(int)
ファイルからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
日付データをタプルに変換する	aDate.timetuple()
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
配列とリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: ダークスレートブルーにグラフの色を設定する	color = 'darkslateblue'
集合から別の集合を全て取り除く	aSet.difference_update(aSet2)
文字列の中でASCII限定としてパターンにマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
コマンドラインフラグの状態	sys.flags
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
セットから全要素を消す	aSet.clear()
データフレームの指定した列がどの程度、正規分布から歪んでいるか見る	df['列A'].kurt()
入力から2つの整数を読む	A, B = map(int, input().split())
option: ▼印を使う	marker = 'v'
データ列のエポック秒をタイムスタンプに変換する	pd.to_datetime(ds, unit='s', utc=True)
キューの最初の要素	deq[0]
双方向キューをデキューする	deq.popleft()
データフレームのNaNを直後の値に指定する	df.fillna(method='bfill')
文字列が文字列リストにあるか調べる	s in aStringList
0からnまでの整数リスト	list(range(n+1))
Excelファイルから複数のシートを指定してデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
option: 深紅にグラフの色を指定する	color = 'crimson'
文字列中の小文字を大文字に変換する	s.upper()
ヒストグラムの色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
要素が全て初期値の行列を作成する	np.full(要素数, 初期値, dtype=np.int)
option: 複素数型を使う	dtype = bool
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
配列とリストについてリストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
option: 文字列を改行の代わりに用いる	end = s
ふたつの集合は集合と互いに素	aSet.isdisjoint(aSet2)
本日が何年か知る	datetime.datetime.today().year
option: どの行もヘッダにしない	header = None
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
nまでの偶整数列	list(range(2, n, 2))
データフレームの列をリネームする	df.rename(columns={'列A': '列a', '列B': '列b'})
オブジェクトは関数	callable(obj)
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
折れ線グラフをトマト色を用いて描画する	plt.plot(データ列x, データ列y, color='tomato')
散布図のバツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データフレームの中の列を分割数nを用いて等量でビン分割する	pd.qcut(df[col], n)
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームの選択したカラムの中央値	df[['列A', '列B']].median()
文字列が文字列リストのいづれかどうか調べる	s in aStringList
配列とリストについての散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
2つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
８進数字を全部使う	string.octdigits
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
列の名前一覧を求める	df.columns
多次元データを多次元尺度構成法を用いて淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
小数点数の正接を求める	math.tan(x)
線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
データフレームを各カテゴリごとにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
ヒストグラムの色をミディアムパープルに指定する	plt.hist(データ列, color='mediumpurple')
文字列を黒色化する	f'\033[30m{value}\033[0m'
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームの選択した列の標本標準偏差	df[['列A', '列B']].std(ddof=1)
データシリーズが何秒か調べる	ds.dt.second
オブジェクトが関数か調べる	callable(obj)
指定した列のみ、データフレームの重複を見る	df.duplicated(subset='列A')
スピアマンの相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
グラフの縦軸を対数に変更する	plt.yscale('log')
最後の部分文字列で文字列を二分する	s.rpartition(sub)
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
散布図の右三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
モカシン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
整数のGCD	math.gcd(n, n2)
スノーにヒストグラムの色を変更する	plt.hist(データ列, color='snow')
ダークシアグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
数式を積分する	sympy.integrate(e)
折れ線グラフの色を珊瑚に変更する	plt.plot(データ列x, データ列y, color='coral')
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
option: クリムゾンにグラフの色を設定する	color = 'crimson'
データフレームをグループ化し、それぞれの平均値を求める	df.groupby('列A').mean()
大文字を全て使う	string.ascii_uppercase
折れ線グラフに丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o')
データフレームのあるカラムをリストにする	df['列A'].values.tolist()
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
辞書の値の一覧	aDict.values()
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
リストを赤色で表示する	print(f'\033[31m{value}\033[0m')
データシリーズの欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
文字列をシアン化する	f'\033[36m{value}\033[0m'
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
データフレームの未入力値を最大値で埋める	df.fillna(df.max())
option: 行列のデータ型を指定する	dtype = np.int8
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
option: データ型として符号なし８ビット整数型を使う	dtype = np.uint8
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
横棒グラフを黄色色を使って描画する	plt.barh(データ列x, データ列y, color='yellow')
データ列とリストの散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
数式を方程式として解く	sympy.solve(e)
リストとリストについて散布図を描画し、、マーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
実数を三乗する	x ** 3
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
タプルの末尾の要素を使う	aTuple[-1]
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
option: バリーウッド色を用いる	color = 'burlywood'
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
range関数の無限バージョン	itertools.count(start=n, step=step)
数を十の位で丸める	round(x, -1)
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
十六進数字を全部使う	string.hexdigits
option: エラーを無視するように変更する	errors = 'ignore'
オブジェクトが型かどうか調べる	isinstance(obj, クラス)
異なる列をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
オプションで標準出力を出力にする	file = sys.stdout
データフレームの選択したカラムを10の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
青緑色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
データフレームのカラムをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
オールドレース色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
データフレームを行によって降順で整列する	df.sort_index(ascending=False)
辞書から最後の項目をポップする	aDict.popitem()
データフレームの先頭5行	df.head(5)
実数のn乗の実数剰余	pow(x, n, y)
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
nとn2が同じ値かどうか調べる	n == n2
ラインの線の種類を破線にする	plt.plot(データ列x, データ列y, linestyle='dashed')
リストの先頭のn要素を除く	aList[n:]
オーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
ヒストグラムを点線に設定する	plt.hist(データ列, linestyle='dotted')
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
ユニークな要素ごとの出現回数	np.unique(aArray, return_counts=True)
リストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
文字列の右側からタブを消す	s.rstrip('\t')
表計算ファイルをデータフレームとしてロードする	pd.read_excel('file.xlsx')
データフレームから重複した行を残さずドロップする	df.drop_duplicates(keep=False)
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: 書き込みモードを使う	mode = 'w'
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
行列のユニークな要素とその個数を算出する	u, counts = np.unique(aArray, return_counts=True)
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
配列の行ごとの平均値	np.mean(aArray, axis=1)
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
ミディアムアクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
文字列をトリムする	s.strip()
文字列の右端から空白を消す	s.rstrip(' ')
散布図をタン色を用いて描画する	plt.scatter(データ列x, データ列y, color='tan')
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
ヒストグラムの色をピーチパフに変更する	plt.hist(データ列, color='peachpuff')
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
xでデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(x)
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
データフレームの指定した列のパーセンタイル	df['列A'].quantile(パーセント/100)
日付データが木曜日か調べる	aDate.weekday() == 3
整数nの八進数文字列を見る	oct(n)[2:]
スピアマンでデータフレームの相関行列を算出する	df.corr(method='spearman')
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
マッピングを用いてカウンタを更新する	aCounter.update(aDict)
データフレームのヒストグラムを縦横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
縦棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
四分位点としてデータを標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
日付時刻データの曜日を整数で使う	aDatetime.weekday()
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
両端キューの先頭から要素を取り除く	deq.popleft()
ヒストグラムの色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
データフレームのシェイプ	df.shape
データフレームのあるカラムの中に文字列と文字列がいくつ含まれるか数える	df['列A'].isin([value, value2]).sum()
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
option: 印を右三角に変更する	marker = '>'
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
データフレームの列のユニークな値の個数	df[col].nunique()
option: オリベドラブ色を使う	color = 'olivedrab'
折れ線グラフをピンク色を使って描画する	plt.plot(データ列x, データ列y, color='pink')
option: ゲインズボロ色を使う	color = 'gainsboro'
ある列の値がx以上、y以下の行を抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
データフレームから重複を残さず重複を削除する	df.drop_duplicates(keep=False)
CSVファイルのn行目をインデックスにして読む	pd.read_csv('file.csv', index_col=n)
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
中央値でデータフレームの選択したカラムの欠損値を置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
配列の尖度を求める	scipy.stats.kurtosis(配列, bias=False)
データフレームをJSONLファイルから読む	pd.read_json(filename, orient='records', lines=True)
インデックスを用いてデータフレームを降順でソートする	df.sort_index(ascending=False)
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategrey')
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
ある列の文字列が正規表現にマッチする行を抽出する	df[df['列A'].str.match(正規表現)]
入力を整数として受け取る	int(input())
分割数nを用いて配列をビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
標準エラーを使う	sys.stderr
実数の正弦の逆数	math.asin(x)
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
初期値で全要素を初期化した配列	np.full(要素数, 初期値, dtype=np.int)
option: グラフの色をマゼンタに指定する	color = 'magenta'
折れ線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
リストの先頭のn要素を取り除く	aList[n:]
グリーンイエロー色でヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
末尾の列を除いたデータフレーム	df[df.columns[:-1]]
データフレームの棒プロットを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
サーモン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
ピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
option: データ型として８ビット整数型を使用する	dtype = np.int8
散布図のマーカーを青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
日付時刻データの日	aDatetime.day
プロットを使う準備をする	import matplotlib.pyplot as plt
ドジャーブルー色を使ってヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
option: 線種を破線に設定する	linestyle = 'dashed'
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
nがn2の倍数かどうか調べる	n % n2 == 0
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
グラフの背景色を白くする	sns.set(style='whitegrid')
option: 青紫色を使う	color = 'violet'
辞書のキー一覧	list(aDict)
カレントワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
option: 行列のデータ型を指定する	dtype = np.int16
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームの一部のカラムを10の位で丸める	df[['列A', '列B']].round(-1)
データフレームを表示するとき小数点以下の表示精度を設定する	pd.set_option('precision', n)
データフレームを2つの列の値ごとにグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
折れ線グラフの三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
option: ナバホホワイト色を使う	color = 'navajowhite'
線グラフの色をダークシアグリーンに変更する	plt.plot(データ列x, データ列y, color='darkseagreen')
グラフを画面用に設定する	sns.set(context='notebook')
ヒストグラムの色をスチールブルーに指定する	plt.hist(データ列, color='steelblue')
データフレームの選択したカラムの欠損値をその平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
データフレームのあるカラムの時	df['列A'].dt.hour
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
折れ線グラフの色を濃いシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
オブジェクトのプロパティを取り除く	delattr(obj, プロパティ名)
折れ線グラフのバツマーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
文字列はリストに含まれないか調べる	element not in aList
散布図を▲マーカーとして描く	plt.plot(データ列x, データ列y, marker='^')
自然数の階乗を求める	math.factorial(n)
データフレームの先頭を見る	df.head()
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームの指定したカラムがどの程度分散しているか調べる	df['列A'].var()
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
option: 改行の代わりに文字列を用いる	end = s
リストを四分位数ごとに分割する	pd.qcut(aList, 4)
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
option: パールゴールデンロッド色を使用する	color = 'palegoldenrod'
現在の秒	datetime.date.today().second
関数のカテゴリによってデータフレームを集約する	df.groupby(関数)
データフレームの選択したカラムの欠損値を最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
リストの出現頻度を描画する	plt.hist(データ列)
リストとリストの散布図に赤いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
リストに文字列を加える	aList.append(element)
データフレームをある列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
タプルを引数として展開して表示する	print(*aTuple)
リストの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
サーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
ライトスカイブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
option: ライトグリーン色を使う	color = 'lightseagreen'
データフレームの指定したカラムにおいてどの値が頻出か見る	df['列A'].mode()
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
nを八進文字列に変換する	oct(n)[2:]
option: レモンシフォン色を使う	color = 'lemonchiffon'
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
散布図の上三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
日付データの月数	aDate.month
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
日付を表現した文字列を日付データにする	pd.to_datetime(日付を表現した文字列)
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
データフレームの一部の列の文字列をNaNにする	df[['列A', '列B']].replace(値, np.nan)
データ列を中央値でビニングする	pd.qcut(ds, 2)
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの大バツマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ランダム性を強化したランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
線グラフの色をグレーにセットする	plt.plot(データ列x, データ列y, color='gray')
２つの変数をそれぞれ定義する	x, y = i, j
昇順にある列で破壊的にデータフレームを整列する	df.sort_values(by='列A', ascending=True, inplace=True)
option: ダーク・スラテグレーを使う	color = 'darkslategrey'
散布図をシーグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='seagreen')
nをn2分の一にする	n /= n2
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
集合の濃度を算出する	len(aSet)
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
イテラブルでカウンタを更新する	aCounter.update(iterable)
エポック秒のカラムから日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
行列の逆行列	np.linalg.inv(aArray)
円プロットを使ってリストのパーセントを可視化する	plt.pie(データ列, startangle=90)
折れ線グラフに黒い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
双方向キューの左から要素を取り除く	deq.popleft()
n番目の列を除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
リストの各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
度数分布図を上限から下限までの上限下限で描画する	plt.hist(データ列, range=(start, end))
シーグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
辞書に項目名ワード引数を用いて更新する	aDict.update(**kwargs)
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
変数について数式をn階微分する	sympy.diff(e, z, n)
データシリーズの欠損値を直後の値に設定する	ds.fillna(method='bfill')
データシリーズの値を正規表現patternでまとめて変更する	ds.replace(pattern, repl, regex=True)
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
オレンジレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
第一引数で指定されたファイルの名前	sys.argv[1]
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
折れ線グラフをディープスカイブルー色を使って描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
タイムスタンプデータをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
オリベドラブ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
ゴーストホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフをフクシア色を用いて描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ファイルからストリームを読み込んで、fileとする	file = open(filepath)
ひとつでも非英数字が文字列中に含まれるかどうか	any(not c.isalnum() for c in s)
文字列全体をパターンにマッチさせる	re.fullmatch(pattern, s)
データフレームの欠損値を直後の値に指定する	df.fillna(method='bfill')
散布図をシアン色として描画する	plt.scatter(データ列x, データ列y, color='cyan')
1からnまでの整数列を得る	list(range(1, n+1))
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
小数点数の正弦の逆数	math.asin(x)
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
カウンタの正の数のみ残す	+aCounter
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
リストにリストを加える	aList.extend(aList2)
散布図に赤い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムの描いて、正規化する	plt.hist(データ列, density=True)
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
ピアソンでデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
ライム色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
空白で文字列を区切る	s.split()
ヒストグラムをチョコレート色として描画する	plt.hist(データ列, color='chocolate')
option: ミディアムバイオレットレッド色を使用する	color = 'mediumvioletred'
赤いダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
入力から二つの文字列を読む	A, B = map(str, input().split())
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
日付時刻データとタイムスタンプデータの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()
配列のトリム平均を算出する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
データフレームのあるカラムのタイムゾーンを指定する	df['列A'].tz_convert('Asia/Tokyo')
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
option: アリスブルー色を用いる	color = 'aliceblue'
複数のデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
ミディアムパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
グローバル変数の一覧を使う	globals()
ヒストグラムをミディアムアクアマリン色として描画する	plt.hist(データ列, color='mediumaquamarine')
句読点文字を全部使う	string.punctuation
折れ線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
本日の曜日を整数で見る	datetime.datetime.today().weekday()
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
整数nがセットのどれかか	n in aSet
タイムスタンプデータの月数を使う	aDatetime.month
集合が空か調べる	len(aSet) == 0
書き込み用にBOM付きでファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
ヒストグラムの色をパパイヤウィップにする	plt.hist(データ列, color='papayawhip')
複数のシートをエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
ヒストグラムの色をミディアムスレートブルーに変更する	plt.hist(データ列, color='mediumslateblue')
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
現在の再帰の上限	sys.getrecursionlimit()
ディープスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
ベクトル演算をする	import numpy as np
デフォルトを適用する	sns.set()
散布図の四角印を黒色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
実数の双曲線正弦	math.sinh(x)
線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgrey')
パパイヤウィップ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
インディゴ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
日付時刻データが月曜日	aDatetime.weekday() == 0
ビスク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
CSVファイルをヘッダを指定せず読む	pd.read_csv('file.csv', header=None)
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
xの印字可能な文字列	ascii(x)
データフレームをサンプリングする	df.sample()
異なる列をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
数列とリストの散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
リストと配列について散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームの指定したカラムが正規分布からどの程度、尖っているか見る	df['列A'].skew()
データフレームの信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
xが一桁の正の数か調べる	0 <= x <= 9
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
データフレームを指定した列で昇順にソートする	df.sort_values(by='列A', ascending=True)
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
整数nの八進表現	oct(n)
nがn2で割り切れるか判定する	n % n2 == 0
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
実数のk進対数	math.log(x, k)
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
配列と配列についての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
イテラブルとシーケンスのデカルト積を求める	itertools.product(iterable, iterable2)
ヒストグラムでデータ列を作図する	plt.hist(データ列)
データフレームのあるカラムが何分か見る	df['列A'].dt.minute
ひとつでも非小文字が文字列中にある	any(not c.islower() for c in s)
縦棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
カラムの調和平均を求める	scipy.stats.hmean(df['列A'])
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
チップのデータセットからデータフレームを読み込む	df = sns.load_dataset('tips')
散布図をコーンフラワーブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
文字列の左側から空白を取り除く	s.lstrip(' ')
コーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
データフレームの選択したカラムの第一四分位数	df[['列A', '列B']].quantile(0.25)
リストと配列についての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
整数nをn2分の１にする	n //= n2
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
淡いピンク色にヒストグラムの色を指定する	plt.hist(データ列, color='lightpink')
option: 読み込みモードを使う	mode = 'r'
option: ライトグレー色を使用する	color = 'lightgrey'
四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s')
option: グラフの色をシルバーに設定する	color = 'silver'
エクセルファイルからシートの名前を指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
ハローワールドをプリントする	print('Hello World')
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
整数の最大値を知る	sys.maxsize
棒グラフを珊瑚色として描画する	plt.bar(データ列x, データ列y, color='coral')
option: ミディアムターコイズにフォントの色を設定する	color = 'mediumturquoise'
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
全要素を1で初期化した行列	np.ones(要素数, dtype=np.int)
データフレームをある列のカテゴリとしてグループ化して、各グループの件数を知る	df.groupby('列A').size()
折れ線グラフの色をスレートブルーにする	plt.plot(データ列x, データ列y, color='slateblue')
自然数個からk個取り出したときの順列の総数を求める	math.perm(n, k)
データフレームの一部の列の欠損値を中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
赤い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='r')
スレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
数のn乗して数による余り	pow(x, n, y)
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
文字列の中でASCII限定としてパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
外れ値を除いたデータフレームのカラムの算術平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
x座標の目盛に文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
折れ線グラフのダイアモンドマーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
ミントクリーム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
option: プラムを使う	color = 'plum'
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
文字列がひらがなか確認する	('ぁ' <= ch <= 'ん')
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
option: オーキッド色を使う	color = 'orchid'
データシリーズの第三四分位数	ds.quantile(0.75)
セットをイミュータブルに変換する	frozenset(aSet)
外れ値を除いた配列の分散を算出する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
データフレームの一部のカラムの不偏分散を求める	df[['列A', '列B']].var(ddof=1)
シーケンスをセットに変換する	set(iterable)
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
リストをy軸リストを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
データフレームのあるカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
option: ダークゴールデンロッド色を用いる	color = 'darkgoldenrod'
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
棒グラフの色を淡い茶色にする	plt.bar(データ列x, データ列y, color='tan')
日付時刻データが何年か知る	aDatetime.year
散布図のマーカーを菱形にする	plt.scatter(データ列x, データ列y, marker='D')
分子n分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
リストのヒストグラムを描画する	plt.hist(データ列)
組をn倍する	aTuple * n
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
データ列の移り変わりを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームをCSVファイルにSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
スレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
横軸の目盛の値を変更する	plt.xticks(目盛りの値リスト)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
ライムグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
既存の行列を元に全要素が1の配列	np.ones_like(aArray)
ディープスカイブルーにヒストグラムの色をセットする	plt.hist(データ列, color='deepskyblue')
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
線グラフの色をインディゴに指定する	plt.plot(データ列x, データ列y, color='indigo')
実線にヒストグラムを設定する	plt.hist(データ列, linestyle='solid')
半透明の破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
option: 列方向に計算する	axis = 0
xの小数点以下'5'桁までを出力する	print(':.5f'.format(x))
縦に複数のデータフレームを一つにする	pd.concat([df, df2, df3], axis=1)
まとめてValueMapでデータフレームの選択したカラムを置換する	df[['列A', '列B']].replace(ValueMap)
ふたつの列からグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
実数の双曲線余弦	math.cosh(x)
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
真下位集合か調べる	aSet < aSet2
タイタニック号のデータセットからデータフレームを読み込む	df = sns.load_dataset('titanic')
NaNのある行を消す	df.dropna(inplace=True)
option: ドジャーブルーを使う	color = 'dodgerblue'
カウンタの最頻出な項目	aCounter.most_common()[0]
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
列のユニークな要素数	df[col].nunique()
データフレームの選択したカラムの不偏分散	df[['列A', '列B']].var(ddof=1)
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
折れ線グラフを半透明の一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
カウンタを辞書で更新する	aCounter.update(aDict)
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
パールバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
折れ線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
option: グラフの色をシスルに変更する	color = 'thistle'
横棒グラフをピーチパフ色を用いて描画する	plt.barh(データ列x, データ列y, color='peachpuff')
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
二点間のユークリッド距離	math.dist(point, point2)
タプルのn番目の	aTuple[n]
option: グラフの色をライトグレーに指定する	color = 'lightgray'
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
配列を2次元1行に変形する	aArray.reshape(1, -1)
折れ線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
配列のn次モーメント	scipy.stats.moment(配列, moment=n)
ベージュ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
辞書をコピーする	aDict.copy()
ヘッダー行を右寄せにセットする	pd.set_option('colheader_justify', 'right')
複数のデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
option: ローングリーン色を用いる	color = 'lawngreen'
データフレームの複数の列をドロップし、みる	df.drop(['列A', '列B'], axis=1)
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
option: ライトグレー色を使う	color = 'lightgrey'
nがn2以上か調べる	n >= n2
線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ある列の値がxに等しく、かつ別の列の値がyに等しい行を取り出す	df[(df['列A'] == x) & (df['列B'] == y)]
縦棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
線グラフをシスル色として描画する	plt.plot(データ列x, データ列y, color='thistle')
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
option: ディープスカイブルー色を用いる	color = 'deepskyblue'
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
散布図のバツ印の色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
文字列リストを結合し、ひとつの文字列にする	''.join(map(str, iterable))
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
文字列リストを連結する	''.join(aStringList)
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
データフレームの一部のカラムを千の位で丸める	df[['列A', '列B']].round(-3)
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
浮動小数点数の逆余弦	math.acos(x)
カウンタから最も頻出な値の件数	aCounter.most_common()[1]
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
option: マーカーの大きさを変更する	markersize = 2.0
散布図の下三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
日付データの日数を使う	aDate.day
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
行列の行ごとの最大	np.max(aArray, axis=1)
データシリーズのどの値が頻出か見る	ds.mode()
ファイルをオープンして]、バイナリ書き込みストリームを求める	open(filepath, mode='wb')
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
折れ線グラフの色をライトグレーにする	plt.plot(データ列x, データ列y, color='lightgrey')
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
円グラフを完全な円にする	plt.axis('equals')
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
データフレームの選択した列のモードを算出する	df[['列A', '列B']].mode()
バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x')
データフレームの指定の列に重複があればドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
データ列を縦棒プロットにする	plt.bar(ラベル列, データ列)
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
三つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
リストとリストについての散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
SJISで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='shift_jis')
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
カウンタからゼロカウントを取り除く	+aCounter
タプルをソートする	sorted(aTuple)
リストから重複を取り除く	set(iterable)
データフレームの指定したカラムを100の位で四捨五入する	df['列A'].round(-2)
文字列の先頭	s[0]
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数を数える	s.count(sub, start, end)
線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
カテゴリ別で色分けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
カーネル密度による分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
データフレームの列の名前を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
パウダーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
tan	math.tan(x)
イテラブルと配列についての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列が文字列より辞書順で前か調べる	s < s2
seabornのデフォルトを適用する	sns.set()
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
文字列の開始位置から終了位置までの範囲で部分文字列を数える	s.count(sub, start, end)
分類結果のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
値が集合に含まれる	element in aSet
グリッド線	plt.grid(linestyle='--')
データシリーズの中に文字列と日付データがいくつあるか数える	ds.isin([value, value2]).sum()
実数のハイパボリック・コサインの逆数	math.acosh(x)
散布図をダイアモンド印で描画する	plt.scatter(データ列x, データ列y, marker='D')
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
配列にはいくつ要素があるか調べる	aArray.size
プロットからグリッド線を消す	plt.grid(False)
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
サドルブラウン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: フォレストグリーンを使う	color = 'forestgreen'
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
文字列の最後	s[-1]
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
カラーバーを横向きに付ける	plt.colorbar(orientation='horizontal')
パールゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
あるカラムの欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
折れ線グラフに黒い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
縦棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
タイムスタンプデータが土曜日か調べる	aDatetime.weekday() == 5
データ列の各データ値の出現数を計算する	ds.value_counts()
青い一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームとしてExcelファイルを読み込む	pd.read_excel('file.xlsx')
タプルを展開してプリントする	print(*aTuple)
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
二つのデータフレームをジョインする	pd.merge(df, df2)
データフレームの選択したカラムの欠損値をその最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
ファイルパスを書き込み用にBOM付きとして開く]	open(filepath, mode='w', encoding='utf_8_sig')
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
パパイヤウィップ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データシリーズを百の位で丸めて、整数型にする	ds.round(-2).astype(int)
行列は何次元か調べる	aArray.ndim
複素数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=bool)
文字列は文字列より辞書順で前かどうか確認する	s < s2
ダークオリーブグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
表データのあるカラムの月	df['列A'].dt.month
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
黄緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
勾配ブースティングとしてクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
データフレームのある列を取り出す	df['列A']
小数点数を実数で割った剰余	math.remainder(x, x2)
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
文字列をセパレータで分割して文字列リストに変換する	s.split(sep)
リストと配列について散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
黒い丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームをソートして、下の方n件を取り出す	df.sort_values('キーとなる列').tail(n)
xを実数に変換する	float(x)
組をひとつ置きに取り出す	aTuple[::2]
集合に要素を追加する	aSet.add(element)
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
option: 印の色を指定する	markerfacecolor = '#800080'
ゼロ埋めされた三2ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
option: オーキッドにグラフの色を変更する	color = 'orchid'
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
スタックの最大長を使う	deq.maxlen
ミディアムスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
日付時刻データを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
散布図のポイント印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
イエローグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='yellowgreen')
ふたつの集合の共通要素のみに更新する	aSet.intersection_update(aSet2)
option: パパイヤウィップ色を使用する	color = 'papayawhip'
文字列の先頭で正規表現に複数行対応としてマッチするか確認する	re.match(pattern, s, flags=re.MULTILINE)
タイムスタンプデータををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
プログラムの実行を強制的に停止する	sys.exit()
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
折れ線グラフの色を濃い青に変更する	plt.plot(データ列x, データ列y, color='darkblue')
折れ線グラフをオリーブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olive')
データ列をボックスチャートとして描画する	plt.boxplot(データ列)
実数の逆正弦を算出する	math.asin(x)
数値を部分分数に展開する	sympy.apart(e)
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
リストの最後にリストを追加する	aList.extend(aList2)
option: 三角印を描画する	marker = '^'
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
二つのデータフレームを縦方向に結合する	pd.concat([df, df2], axis=0)
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
日付時刻データからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
要素∈集合	element in aSet
データフレームの尖りを計算する	df.skew()
散布図をダークレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkred')
セットの浅いコピーを作る	aSet.copy()
オブジェクトのバイト長	sys.getsizeof(obj)
横棒グラフをライトブルー色として描画する	plt.barh(データ列x, データ列y, color='lightblue')
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
配列の平均値を計算する	np.mean(aArray)
本日をタプルにする	datetime.datetime.today().timetuple()
option: 三角マーカーを用いる	marker = '^'
option: フォントの色をディムグレーに設定する	color = 'dimgrey'
データシリーズの曜日が何日目か見る	ds.dt.dayofweek
オブジェクトのハッシュ値	hash(obj)
列のエポック秒を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
集合を空集合にする	aSet.clear()
option: フォントの色をトマトに指定する	color = 'tomato'
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
リストと数列についての散布図を大きさnでプロットする	plt.scatter(データ列x, データ列y, s=n)
option: ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
両端キューをポップする	deq.pop()
チップのデータセットをロードする	df = sns.load_dataset('tips')
変数を緑色にする	f'\033[32m{value}\033[0m'
ファイルからストリームをオープンして]fileとする	file = open(filepath)
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
タプルの平均値	sum(aTuple)/len(aTuple)
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
横棒グラフをライトイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightyellow')
ガウス過程で回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
縦棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
横棒グラフをシーグリーン色として描画する	plt.barh(データ列x, データ列y, color='seagreen')
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
行列の行ごとの最小を計算する	np.min(aArray, axis=1)
部分文字列が文字列中に含まれないかどうか判定する	sub not in s
option: 欠損値を先頭にする	na_position = 'first'
文字列の終了位置より前に部分文字列が含まれるか	s.find(sub, 0, end) != -1
cos	math.cos(x)
TSVファイルから文字コードを指定してデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
option: グラフの色をダークオリーブグリーンにセットする	color = 'darkolivegreen'
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
option: フローラルホワイト色を使用する	color = 'floralwhite'
マッピングの項目名の値	aDict[key]
特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
データフレームの指定したカラムの分散を求める	df['列A'].var()
星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*')
フォーマットとしてデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
アンティークホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
散布図をスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='steelblue')
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
散布図をライムグリーン色として描画する	plt.scatter(データ列x, データ列y, color='limegreen')
青いグリッド線を引く	plt.grid(color='b')
ダークオレンジ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
データフレームから型を選ぶ	df.select_dtypes(ty)
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
実数のk進対数を計算する	math.log(x, k)
option: 色をミディアムスプリンググリーンにセットする	color = 'mediumspringgreen'
折れ線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
option: 改行コードを旧Macに指定する	newline = '\r'
バイオレット色のヒストグラムを描画する	plt.hist(データ列, color='violet')
三つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
year年month月day日hour時minute分のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
マルーン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
タイムスタンプデータを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
降順にデータフレームをあるカラムをキーにしてソートする	df.sort_values(by='列A', ascending=False)
ファイルパスからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
option: チョコレートにグラフの色を設定する	color = 'chocolate'
オレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
折れ線グラフを黄色色として描画する	plt.plot(データ列x, データ列y, color='yellow')
データフレームの未入力値を平均値にセットする	df.fillna(df.mean())
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
グラフで使うフォントを指定する	sns.set(font=フォント名)
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
イテラブルのイミュータブルなセット	frozenset(iterable)
グラフをデフォルトでいい感じに変更する	sns.set()
データフレームの指定したカラムを丸める	df['列A'].round()
二進文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
カテゴリで色付けしてにバイオリン図としてデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
回帰分析を確率的勾配降下を用いて行う	model = sklearn.linear_model.SGDRegressor()
データフレームの中の列を分割する	pd.cut(df[col], aList)
データ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
実数の複素数	complex(x)
option: グラフの色を白に指定する	color = 'white'
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
パステル調にパレットをグラフの描画で使用する	sns.set(pallete='pastel')
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
リストのn番目以降の部分を得る	aList[n:]
作画の縦横の比率を同じする	plt.axis('equals')
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategray')
データフレームから10行をランダムに抽出する	df.sample(10)
データフレームの選択したカラムの中にと文字列がいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
文字列を最後の部分文字列で二分する	s.rpartition(sub)
option: マーカーを△に指定する	marker = '^'
ライトスチールブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
リストを赤色にする	f'\033[31m{value}\033[0m'
ゼロ埋めされたベクトル	np.zeros(要素数)
option: ライム色を使う	color = 'lime'
ファイルを文字コードtextとして書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
横軸を対数目盛に変更する	plt.xscale('log')
nの八進表現	oct(n)
縦棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
文字列の無限のイテラブル	itertools.repeat(element)
配列を横ベクトルに変形する	aArray.reshape(1, -1)
行列の行ごとの最小値を求める	np.min(aArray, axis=1)
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
実数が負の数	x < 0
カンマで文字列を分割して、文字列リストにする	s.split(',')
データ列間の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
折れ線グラフの右三角印を黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
ラベンダーブラッシュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
要素は集合の要素でないか	element not in aSet
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
分類モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
列をタイムスタンプ型に変換する	pd.to_datetime(df['列A'])
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
配列を中央値でビン分割する	pd.qcut(aArray, 2)
カウンタを多い順に列挙する	aCounter.most_common()
列数を変更する	pd.set_option('display.max_columns', n)
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
option: フォントの色をローングリーンに指定する	color = 'lawngreen'
ダークスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
データフレームをソートして、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
option: 線の種類を実線に変更する	linestyle = 'solid'
t-SNEでパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
実数の小数点以下を丸める	round(x)
ラベンダー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
文字列の終了位置より前に部分文字列が含まれる	s.find(sub, 0, end) != -1
グラフをスライド用に設定する	sns.set(context='talk')
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
データフレームの選択したカラムの空文字を欠損値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
option: 色をサーモンに指定する	color = 'salmon'
リストのn番目以降の要素を取り出す	aList[n:]
クラス分類の真陰性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
指定した列リストのみ、データフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
配列の行ごとの平均を計算する	np.mean(aArray, axis=1)
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
数列間のスピアマンの相関係数を計算する	scipy.stats.spearmanr(数列, 数列2)
エクセルファイルから複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
自分自身をモジュールとしてを	sys.modules[__name__]
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
データフレームの指定したカラムの中に文字列と文字列があるかどうか調べる	df['列A'].isin([value, value2])
小数点数の正弦	math.sin(x)
縦棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームを表示するとき、データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
散布図に青いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
リスト内の要素が全て真か調べる	all(aList)
折れ線グラフに丸印を加える	plt.plot(データ列x, データ列y, marker='o')
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
線グラフの色をサンディーブラウンに指定する	plt.plot(データ列x, データ列y, color='sandybrown')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
有理数を使う	import fractions
パープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
アリスブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
配列と配列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
option: ダークシアンにグラフの色を設定する	color = 'darkcyan'
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
option: グラフの色をグリーンイエローに指定する	color = 'greenyellow'
ミディアムスレートブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
グラフの用途をポスターに設定する	sns.set(context='poster')
菱形マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムをプロットして、ビン数を指定する	plt.hist(データ列, bins=区関数)
SJISでファイルパスを書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
日付データをISO8601書式の文字列に変換する	aDate.isoformat()
リストをナンバリングする	enumerate(aList)
ファイルパスをオープンして]書き込みストリームを使う	open(filepath, mode='w')
黒い下三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
UNIXコマンドtextを実行する	os.system(text)
CSVファイルのn行目をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
辞書の項目名に対応した値	aDict.get(key)
スピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
option: インデックスを自動的な連番に増やす	index_col = None
数式の数値を求める	float(e)
タプルを逆順にする	aTuple[::-1]
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
辞書にキーワード引数で更新する	aDict.update(**kwargs)
xの小数点以下'2'桁の文字列に変換する	':.2f'.format(x)
小数点数の天井	math.ceil(x)
イエローグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
標準入力から1行だけ改行なしで読み込む	sys.stdin.readline().rstrip()
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
空の線形回帰モデルを作成する	model = sklearn.linear_model.LinearRegression()
option: カーキを使う	color = 'khaki'
リストと数列について散布図を描画して、▼マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムをゴーストホワイト色を用いて描画する	plt.hist(データ列, color='ghostwhite')
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
二つのデータフレームを異なるカラムをキーとして右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
説明変数と目的変数として分類モデルを学習する	model.fit(説明変数, 目的変数)
バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x')
フォーマットとしてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
散布図に赤いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
真紅色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
タイムスタンプデータををn日後に進める	aDatetime + datetime.timedelta(days=n)
データシリーズの時を使う	ds.dt.hour
イテラブルをセットに変換する	set(iterable)
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
シエナ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
変数を黒色でプリントする	print(f'\033[30m{value}\033[0m')
整数nの二進文字列	bin(n)[2:]
1からnまでの整数列	list(range(1, n+1))
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: ライムグリーンを使う	color = 'limegreen'
文字列の右端から部分文字列を除去する	s.rstrip(sub)
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
両端キューが空か調べる	len(deq) == 0
カウンタのキーとカウントを列挙する	aCounter.items()
option: 三２ビット整数型を使う	dtype = np.int16
データフレームのインデックスの名前の一覧	df.index
追加できるようにファイルパスをオープンする]	open(filepath, mode='a')
散布図にバツマーカーを使用する	plt.scatter(データ列x, データ列y, marker='x')
線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
データフレームから重複をドロップする	df.drop_duplicates(inplace=True)
プラットホームがウィンドウズか調べる	sys.platform.startswith('win32')
option: ダークグレーに色を設定する	color = 'darkgray'
グラフのデザインを綺麗にする	import seaborn as sns
縦棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
アクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
いつまでもイテラブルを繰り返す	itertools.cycle(iterable)
3つの文字列を順にプリントする	print(value, value2, value3)
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
option: スカイブルー色を使う	color = 'skyblue'
折れ線グラフをダークスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
横棒グラフをカーキ色として描画する	plt.barh(データ列x, データ列y, color='khaki')
ポイント印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
ライトゴールドロディイエロー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
データシリーズの欠損値をxで埋める	ds.fillna(x)
文字列リストをひとつの文字列にする	''.join(map(str, iterable))
正規表現を使う	import re
折れ線グラフの色をライムグリーンに指定する	plt.plot(データ列x, データ列y, color='limegreen')
ローングリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lawngreen')
リスト中の要素が少なくとも一つ真かどうか調べる	any(aList)
ビスク色でヒストグラムを描画する	plt.hist(データ列, color='bisque')
折れ線グラフのダイアモンドマーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
行列の行ごとの分散を求める	np.var(aArray, axis=1)
多次元データを特異値分解として淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
折れ線グラフの星マーカーを青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの中に文字列と文字列がいくつ存在するか求める	df.isin([value, value2]).sum()
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
数式を浮動小数点数にする	float(e)
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
option: フォントの色をシスルに設定する	color = 'thistle'
option: フォントの色をタンに設定する	color = 'tan'
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列は全て数値か調べる	s.isnumeric()
10を底とする実数の対数	math.log10(x)
option: ライトグレー色を使う	color = 'lightgray'
データフレームの末尾100行を抽出する	df.tail(100)
データシリーズの中に文字列とがあるか調べる	ds.isin([value, value2])
折れ線グラフに青い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
昇順にリストをソートする	sorted(aList, reverse=True)
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
データシリーズが正規分布からどの程度、尖っているか見る	ds.skew()
文字列中の部分文字列を回数を制限して新しい文字列に置き換える	s.replace(sub, newsub, n)
ヒストグラムの色を暗い赤に指定する	plt.hist(データ列, color='darkred')
ふたつの列からグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
データフレームの行の名前をまとめて付け直す	df.rename(index={x: y})
option: マルーンを使う	color = 'maroon'
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
データフレームからカテゴリデータの列名の一覧を求める	df.select_dtypes('object').columns
線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
データフレームをグループ化しある列に対し分散を求める	df.groupby('列A')['列B'].var()
リストを黒色でプリントする	print(f'\033[30m{value}\033[0m')
データフレームをある列の値によってグループ化し、要約統計量を求める	df.groupby('列A').describe()
縦棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
イテラブルを文字列に変換して、カンマによって連結する	','.join(map(str, iterable))
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
データシリーズのタイムゾーンを日本に指定する	ds.tz_convert('Asia/Tokyo')
データフレームをある列によって昇順にソートする	df.sort_values(by='列A', ascending=True)
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
FIXME:カテゴリーデータを出現頻度順に並べ直す	df['列A'].value_counts().sort_index().index
データシリーズのタイムゾーンを設定する	ds.tz_convert('Asia/Tokyo')
フィシャー流の尖度	scipy.stats.kurtosis(配列, fisher=True, bias=False)
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
実数を浮動小数点数で割って切り捨てる	x // y
ミディアムスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
リストに要素を加える	aList.append(element)
珊瑚色として散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
折れ線グラフをサドルブラウン色として描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
rgbのポイントマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
グループ化してデータフレームの散布図を縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
整数nを半分にする	n //= 2
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
列を文字列リストに変換して、部分文字列によって連結する	sub.join(map(str, iterable))
カウンタを集合に変換する	set(aCounter)
あるカラムの値がx以上y未満のデータを取り出す	df[(x <= df['列A']) & (df['列A'] < y)]
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
ある列の文字列に部分文字列が含まれる行を取り出す	df[df['列A'].str.contains(部分文字列)]
文字列内にひとつでもアスキー文字が含まれるかどうか	any(c.isascii() for c in s)
ファイル名がTSVファイルかどうか判定する	filename.endswith('.tsv')
日付データが日付データと同時か	aDate == aDate2
円グラフでデータ列の比率を可視化する	plt.pie(データ列, startangle=90)
折れ線グラフをダークマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
グラフに使用するx軸にキャプションを付ける	plt.xlabel('x軸ラベル')
2を底とする浮動小数点数の対数	math.log2(x)
散布図にクロスマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
データフレームを2つの列の値によって集計して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
データフレームの指定したカラムの中に文字列と文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
option: グラフの色をスレートブルーにする	color = 'slateblue'
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
データフレームを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
option: ミディアムオーキッド色を用いる	color = 'mediumorchid'
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
option: 星マーカーを描画する	marker = '*'
replにまとめてデータシリーズを正規表現patternで置き換える	ds.replace(pattern, repl, regex=True)
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
配列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
0から始まる無限リスト	itertools.count()
実数の床	math.floor(x)
2つのオブジェクトが同一かどうか	obj is obj2
多次元データをt-SNEとして淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームの中の列をリストを境界値として分割する	pd.cut(df[col], aList)
指定したカラムのカテゴリで集計し、それぞれの分散を計算する	df.groupby('列A').var()
ライトゴールドロディイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
折れ線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
パレットトルコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
ポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.')
nでシードを初期化する	random.seed(n)
複数の列からグループ化し、平均値を計算する	df.groupby(['列A', '列B'], as_index=False).mean()
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
ファイルをEUCとして書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
option: ビスクを使用する	color = 'bisque'
option: 文字コードtextを使う	encoding = text
データフレームの指定したカラムの欠損値を直前の値に設定する	df['列A'].fillna(method='ffill')
ダークブルー色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
データフレームのあるカラムの曜日が何日目か見る	df['列A'].dt.dayofweek
日付データのデータシリーズを表データのインデックスにする	df.index = pd.DatetimeIndex(ds)
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
ミディアムターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
option: マーカーの線幅を変更する	markeredgewidth = 2.5
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
耐火レンガ色でヒストグラムを描画する	plt.hist(データ列, color='firebrick')
プロットの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
ふたつの列からグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
等量でデータ列をビン数nでビン分割する	pd.qcut(ds, n)
N未満までの配列	np.arange(N)
文字列の先頭は部分文字列か調べる	s.startswith(sub)
散布図を黒いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
リストのn番目にオブジェクトを挿入する	aList.insert(n, element)
棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
折れ線グラフのマーカーを▲にする	plt.plot(データ列x, データ列y, marker='^')
星印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームのインデックスを振り直す	df.reset_index()
option: サンディーブラウンを使う	color = 'sandybrown'
データフレームの全カラムの散らばりをプロット化する	sns.pairplot(df)
集合の浅いコピーを生成する	aSet.copy()
ゲインズボロ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: ベージュにフォントの色をする	color = 'beige'
横棒グラフを茶色色を用いて描画する	plt.barh(データ列x, データ列y, color='brown')
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームの中にあると文字列の個数を求める	df.isin([value, value2]).sum()
淡くカラーパレットをグラフの描画で使う	sns.set(pallete='muted')
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
下位集合かテストする	aSet.issubset(aSet2)
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgray')
異なる列をキーとしてデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
データフレームの選択した列の分散を求める	df[['列A', '列B']].var()
表データのあるカラムが何年か見る	df['列A'].dt.year
行列を平坦にする	aArray.flatten()
predicateFuncが真となる列の要素	itertools.takewhile(predicateFunc, iterable)
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
数列とデータ列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
改行なしに2つの文字列をプリントする	print(value, value2, end='')
横棒グラフをバリーウッド色を用いて描画する	plt.barh(データ列x, データ列y, color='burlywood')
改行を取り除いてファイルを一行ずつ読み込む	f.readline()
マッピングのキーに対応した値	aDict.get(key)
昇順に破壊的に複数の列でデータフレームを並べる	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフをパールバイオレットレッド色を使って描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームから重複をインプレイスでドロップする	df.drop_duplicates(inplace=True)
全句読点文字	string.punctuation
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
ヒストグラムをグリーンイエロー色として描画する	plt.hist(データ列, color='greenyellow')
散布図の大バツ印の色を設定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
縦棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
カテゴリ列に並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームの選択した列の中のNaNの合計をカウントする	df[['列A', '列B']].isna().sum()
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
配列のピアソンの積立相関係数を計算する	scipy.stats.pearsonr(配列, 配列2)
格子をグラフに入れる	plt.grid(True)
カラム名を指定せずCSVファイルを読み込む	pd.read_csv('file.csv', header=None)
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
option: ライトグリーン色を用いる	color = 'lightgreen'
日付データからn日分、減らす	aDate - datetime.timedelta(days=n)
イテラブルを文字列に変換して、'改行によって連結する	'\n'.join(map(str, iterable))
オブジェクトは浮動小数点数かどうか	isinstance(obj, float)
マップのコピーを作成する	aDict.copy()
日付時刻データからn分、減らす	aDatetime - datetime.timedelta(minutes=n)
n個に配列を等間隔でビン分割する	pd.cut(aArray, n)
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
L2ノルムを用いて正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
オプションで標準出力に出力する	file = sys.stdout
現在が何日か知る	datetime.datetime.today().day
オールドレース色で散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
データフレームの指定したカラムの歪度	df['列A'].kurt()
多い順にカウンタを列挙する	aCounter.most_common()
折れ線グラフの印をダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
ファイルからフォルダ名取り出す	os.path.dirname(filepath)
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
文字列を二分する	s.partition(sep)
アルファベットから１文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
上位集合もしくは等しいか調べる	aSet > aSet2
データフレームの一部の列の欠損値を後の行の値に設定する	df[['列A', '列B']].fillna(method='bfill')
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
option: ダークシアン色を用いる	color = 'darkcyan'
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
文字列中の文字を列挙する	list(s)
データフレームがどれだけ、分散しているか見る	df.var()
列を全て日付データに変換する	pd.to_datetime(df['列A'])
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
JSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
項目名で指定されたエントリを辞書から取り出す	aDict.pop(key)
データフレームの先頭n行	df.head(n)
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
ふたつのカラムを組み合わせてグループ化し、最小値を計算する	df.groupby(['列A', '列B'], as_index=False).min()
データフレームから列を２つ選択する	df[['列A', '列B']]
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
整数nを十六進リテラルに変換する	hex(n)
データシリーズの欠損値をメディアンにする	ds.fillna(ds.median())
現在の分を使う	datetime.date.today().minute
2を底とする対数を求める	math.log2(x)
文字列は全て識別子名かどうか調べる	s.isidentifier()
グラフの用途をスライドに設定する	sns.set(context='talk')
棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
散布図に青い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
グレー色でヒストグラムを描画する	plt.hist(データ列, color='grey')
黒いポイントマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
option: ペールグリーン色を使う	color = 'palegreen'
配列から重複を除いた配列を作る	np.unique(aArray)
文字列はタイトルケースか調べる	s.istitle()
その最小値でデータフレームの未入力値を埋める	df.fillna(df.min())
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
浮動小数点数を十六進表記の文字列にする	x.hex()
データ列と配列について散布図を描画してマーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
未初期化の行列を作る	np.empty(要素数, dtype=np.int)
option: ライムグリーン色を使う	color = 'limegreen'
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
シーケンスをイミュータブルな集合に変換する	frozenset(iterable)
データフレームのあるカラムの標準偏差	df['列A'].std()
カウンタの全数を見る	aCounter.total()
option: ブラウンを使う	color = 'brown'
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
日付データのデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
option: どのカラムも行にしない	index_col = None
Pythonインタプリタの実行ファイルの絶対パスを知る	sys.executable
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
option: 追加モードに変更する	mode = 'a'
n進文字列をバイト列にする	int(s, n).to_bytes(length=bytesize, byteorder='big')
配列から重複を除いた配列を作成する	np.unique(aArray)
グラフのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
オブジェクトが関数	callable(obj)
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
データフレームのある列の値がxより大きいデータを抽出する	df[df['列A'] > x]
カーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
リストからオブジェクトと等しい最初の要素を取り除く	aList.remove(element)
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
０で全要素を初期化した３2ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
折れ線グラフの色をペルーに指定する	plt.plot(データ列x, データ列y, color='peru')
option: ロイヤルブルー色を使用する	color = 'royalblue'
データシリーズの欠損値を前の行の値に設定する	ds.fillna(method='ffill')
option: △印を描画する	marker = '^'
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
ビン数nで等量で配列を分割する	pd.qcut(aArray, n)
縦棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
書式をargsを引数として文字列整形する	formatText.format(*args)
青いバツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
文字列を下線付きにする	f'\033[4m{value}\033[0m'
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの丸印を赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
option: エンコーディングを文字コードtextに変更する	encoding = text
縦棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
サンディーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
マゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='magenta')
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
要素が集合のメンバー	element in aSet
データシリーズの欠損値をxで補う	ds.fillna(x)
列名を指定してデータフレームを結合する	pd.merge(df, df2, on='列A')
option: NaNを無視する	nan_policy = 'omit'
データフレームの選択した列の中にいくつ日付データがあるか調べる	df[['列A', '列B']].isin([value]).sum()
データフレームを整数に丸める	df.round()
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
分類モデルのPPVを求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
カラムを万の位で丸める	df['列A'].round(-4)
集合が空でない	len(aSet) != 0
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
辞書の項目名を列挙する	aDict.keys()
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
デック中の値のインデックス	deq.index(element)
データフレームから5行、サンプリングする	df.sample(5)
小数点数の角度	math.degrees(x)
データフレームのカラムの欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
行列の各要素の積を算出する	np.multiply(aArray, aArray2)
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
配列が正規分布か調べる	scipy.stats.shapiro(配列)
option: マゼンタ色を使う	color = 'magenta'
アンサンブル学習で回帰分析をする	sklearn.ensemble.VotingRegressor()
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
印字可能な文字を使う	string.printable
option: グラフの色をオレンジに指定する	color = 'orange'
option: ミディアムブルー色を使う	color = 'mediumblue'
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
散布図をミディアムスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
太字で文字列をプリントする	print(f'\033[1m{value}\033[0m')
文字列中から部分文字列を見つける	s.find(sub)
データフレームをある列のカテゴリでグループ分けして、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
データフレームの指定した列の中に文字列と文字列が含まれるか確認する	df['列A'].isin([value, value2])
space	' '
本日が何曜日か知る	datetime.datetime.today().weekday()
xの小数点以下'5'桁までプリントする	print(':.5f'.format(x))
パールゴールデンロッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
タプル内の要素が全て真か調べる	all(aTuple)
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
文字列に漢字があるかテストする	re.search('[\u4E00-\u9FD0]', s)
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
一点鎖線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: ライトコーラルを使用する	color = 'lightcoral'
折れ線グラフの右三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
eの乗数を計算する	math.exp(x)
配列を等しい量になるようにn個にビニングする	pd.qcut(aArray, n)
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
等量でn個にデータフレームの中の列をビニングする	pd.qcut(df[col], n)
イテラブルから両端キューを作る	collections.deque(iterable)
マッピングをソートしてJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
データフレームのカラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
縦棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
散布図をペールグリーン色として描画する	plt.scatter(データ列x, データ列y, color='palegreen')
option: モカシンにフォントの色を設定する	color = 'moccasin'
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
直前の値でデータフレームの一部の列の欠損値を補完する	df[['列A', '列B']].fillna(method='ffill')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
リストの最後のn要素を取り除く	aList[:-n]
二数の最小値	min(x, y)
option: グラフの色を白に設定する	color = 'white'
ヒストグラムのビンを設定する	plt.hist(データ列, bins=区関数)
点間のユークリッド距離	math.dist(point, point2)
線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
option: ダイアモンドマーカーを加える	marker = 'D'
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
文字列内に日本語が使われているかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データフレームからランダムに一行を取り出す	df.sample()
データ列の推移を破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレーム中のNaNを破壊的にドロップする	df.dropna(inplace=True)
データフレームの選択した列の相関行列	df[['列A', '列B']].corr()
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
列の一覧	df.info()
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
データフレームのSkewnessを求める	df.skew()
右三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
折れ線グラフの色をダーク・スラテグレーに変更する	plt.plot(データ列x, データ列y, color='darkslategrey')
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
線グラフをダークオリーブグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
文字列は全て十進数字かどうか調べる	s.isdecimal()
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームをある列の値によってグループ化する	df.groupby('列A')
データフレームとデータシリーズを連結する	pd.concat([df, ds], axis=1)
散布図を左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<')
青い実線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ミディアムターコイズ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
クラス分類の予測精度を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: ダークマゼンタ色を使う	color = 'darkmagenta'
ロードしたモジュールを列挙する	sys.modules
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列の末尾	s[-1]
xを浮動小数点数に変換する	float(x)
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
JSON形式の文字列を読み込む	json.loads(jsonString)
散布図をピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='pink')
option: 分割記号をコロンにする	sep = ':'
文字列中にひとつでも非アルファベットが含まれる	any(not c.isalpha() for c in s)
option: デピンク色を使う	color = 'deeppink'
組内の要素が少なくともひとつ真	any(aTuple)
グラフの色使いを全般的に淡くする	sns.set(pallete='muted')
データフレームのカラムを百の位で丸めて、整数にする	df['列A'].round(-2).astype(int)
タプルの内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
データフレームをあるカラムの値によってグループ分けして、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
上位集合かどうか調べる	aSet.issuperset(aSet2)
ミディアムスレートブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
縦棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
無限にカウントアップする	itertools.count()
縦棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
要素が全て初期値の配列を作る	np.full(要素数, 初期値, dtype=np.int)
グラフの色を暗くする	sns.set(pallete='dark')
分類モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームの重複した行だけを選択する	df[df.duplicated(keep=False)]
option: 文字コードをUTF8に設定する	encoding = 'utf-8'
横棒グラフをミスティローズ色として描画する	plt.barh(データ列x, データ列y, color='mistyrose')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
線グラフの色をラベンダーブラッシュに変更する	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームの欠損値を最大値に指定する	df.fillna(df.max())
標準エラーを	sys.stderr
option: マーカーを下三角に変更する	marker = 'v'
実数を千の位で四捨五入する	round(x, -3)
文字コードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: パパイヤウィップ色を用いる	color = 'papayawhip'
表データのあるカラムの日を見る	df['列A'].dt.day
option: どの列も行にしない	index_col = None
散布図のダイアモンドマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
棒グラフを貝殻色を用いて描画する	plt.bar(データ列x, データ列y, color='seashell')
折れ線グラフの上三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
カウンタをリストに変換する	list(aCounter)
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
データフレームの最後n行を抽出する	df.tail(n)
カウンタの下位をリストとして得る	aCounter.most_common()[:-n-1:-1]
ダークスラテグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
ヒストグラムをスチールブルー色として描画する	plt.hist(データ列, color='steelblue')
ゲインズボロ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
データフレームのカラムの中に日付データと文字列がいくつ含まれるか数える	df['列A'].isin([value, value2]).sum()
ファイルパスを文字列の示すエンコーディングを用いてオープンする]	open(filepath, encoding=s)
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
文字列を左寄せする	s.ljust(文字列幅)
配列を横棒グラフにする	plt.barh(ラベル列, データ列)
最大値と最小値を用いてデータを揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データフレームの中のカラムを中央値でビン分割する	pd.qcut(df[col], 2)
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightseagreen')
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
行列の行列式	np.linalg.det(aArray)
数式の変数に数式を代入する	e.subs(z, e2)
縦棒グラフをブランチドアーモンド色として描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
ヒストグラムをスプリンググリーン色を使って描画する	plt.hist(データ列, color='springgreen')
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
データフレームの欠損値をxに設定する	df.fillna(x)
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
散布図のマーカーの大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムの色をライトコーラルに指定する	plt.hist(データ列, color='lightcoral')
nまたはn2	n or n2
日付時刻データの年	aDatetime.year
option: ライトサーモン色を用いる	color = 'lightsalmon'
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
折れ線グラフの菱形マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
実数を整数で整数除算する	x // y
縦棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
今日のタイムスタンプを使う	datetime.datetime.today()
ケンドールの相関係数を計算する	scipy.stats.kendalltau(配列, 配列2)
未初期化のベクトルを作成する	np.empty(要素数, dtype=np.int)
ヒストグラムの色をダークバイオレットに変更する	plt.hist(データ列, color='darkviolet')
option: ダーク・スラテグレーにグラフの色を指定する	color = 'darkslategrey'
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
散布図の三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
配列間のピアソンの相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
散布図をナバホホワイト色として描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
option: グラフの線幅を3.0ポイントにする	linewidth = 3.0
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
データフレームのモード	df.mode()
option: ダークスレートブルー色を用いる	color = 'darkslateblue'
クラスが名前付きタプルか調べる	issubclass(C, tuple)
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
実数を実数で割った余り	x % y
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
アルファベットを全部使う	string.ascii_letters
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
データシリーズを万の位で丸める	ds.round(-4)
入力から二つの浮動小数数を読む	A, B = map(float, input().split())
全要素を0で初期化した行列	np.zeros(要素数)
散布図のポイントマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
浮動小数点数を小数点以下第一位で丸める	round(x, 1)
指定した列の中にある日付データと文字列の合計を調べる	df['列A'].isin([value, value2]).sum()
タプルの要素を逆順にする	aTuple[::-1]
n進文字列をバイナリにする	int(s, n).to_bytes(length=bytesize, byteorder='big')
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
ベクトルの逆行列	np.linalg.inv(aArray)
折れ線グラフの▲印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
青い実線として線をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ケースを無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
ファイルからファイル名を使う	os.path.basename(filepath)
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
全空白文字	string.whitespace
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
n回文字列を繰り返すイテラブル	itertools.repeat(element, n)
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
データフレームの相関行列をスピアマン順位相関係数を用いて計算する	df.corr(method='spearman')
浮動小数点数の分数近似	q.limit_denominator(max_denominator=1000000)
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
黒い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームのカラムのケンドールの相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
散布図をライム色として描画する	plt.scatter(データ列x, データ列y, color='lime')
クラス分類をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
バイトオーダを知る	sys.byteorder
option: フォントの色をゲインズボロに設定する	color = 'gainsboro'
要素ひとつの組を得る	(element,)
データフレームの選択したカラムの中にいくつNaNが存在するか数える	df[['列A', '列B']].isna().sum()
データ列の変化を一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
データフレームのあるカラムをインデックスにする	df.set_index('列A', inplace=True)
データフレームの中にいくつ文字列があるか求める	df.isin([value]).sum()
option: 星マーカーを使う	marker = '*'
日付時刻データの時間	aDatetime.hour
ゼロ埋めされた符号なし８ビット整数型の配列を作成する	np.zeros(要素数, dtype=np.uint8)
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
option: グリーンを使う	color = 'green'
末尾のカラムを除いたデータフレーム	df[df.columns[:-1]]
オリーブにヒストグラムの色をする	plt.hist(データ列, color='olive')
配列の要素数	aArray.size
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
折れ線グラフに赤いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
xが-9以上9以下かどうかテストする	-9 <= x <= 9
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
２つの変数を文字列で区切って表示する	print(value, value2, sep=s)
データフレームをグループ化し、分散を計算する	df.groupby('列A').var()
カウンタ同士で共通部分を求める	aCounter & aCounter2
文字列中に部分文字列がある	sub in s
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームから指定した３つのカラムを抽出する	df[['列A', '列B', '列C']]
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
日付時刻データは何日か知る	aDatetime.day
データフレームからランダムに5行を取り出す	df.sample(5)
ベクトルのムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
ネイビー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
ダークゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
option: タブをセパレータで用いる	sep = '\t'
日付時刻データが何分か知る	aDatetime.minute
データシリーズの統計量	ds.describe()
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
その最小値でデータシリーズの未入力値を埋める	ds.fillna(ds.min())
日付データのデータフレームのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
二つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
数を千の位で丸める	round(x, -3)
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
nをn2で割った余りを計算する	n % n2
グラフの描画で淡く色を使う	sns.set(pallete='muted')
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
データフレームのあるカラムをインデックスに設定する	df.set_index('列A')
データフレームの選択した列のモード	df[['列A', '列B']].mode()
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
option: 色の透明度を設定する	alpha = 0.5
nではない	not n
折れ線グラフに右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
文字列が全て印字できるか	s.isprintable()
option: エンコーディングをSJISに変更する	encoding = 'shift_jis'
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
ある列にリストの値が含まれる行を選択する	df[df['列A'].isin(リスト)]
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
モデルをあてはめる	model.fit(説明変数, 目的変数)
データフレームのn行以降抽出する	df[n:]
option: ヘッダを自動的な連番にセットする	header = None
多次元データをt-SNEを用いて淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
カウンタをリセットする	aCounter.clear()
ライトスチールブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
nまでの奇整数列	list(range(1, n, 2))
データシリーズが何月か見る	ds.dt.month
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
コンビネーション	math.comb(n, k)
現在が何秒か知る	datetime.date.today().second
option: 追加モードにセットする	mode = 'a'
出力ストリームにxを文字列に変換して書く	f.write(str(x))
データフレームを表示するとき、小数点以下の表示精度をn桁に指定する	pd.set_option('precision', n)
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
データフレームの中にあると文字列の数を数える	df.isin([value, value2]).sum()
両端キューの順序を右にn個分輪番で回す	deq.rotate(n)
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
ケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
マップの項目名を要素にする	aDict[key] = element
折れ線グラフをグリーンイエロー色を使って描画する	plt.plot(データ列x, データ列y, color='greenyellow')
実線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
nが5で割り切れるか判定する	n % 5 == 0
2つのデータフレームを縦方向に結合する	pd.concat([df, df2], axis=0)
モデルを訓練する	model.fit(説明変数, 目的変数)
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
小数点数の平方根	math.sqrt(x)
改行する	print()
データフレームの25パーセンタイル	df.quantile(0.25)
データフレームの指定したカラムを百の位で丸めて、整数にする	df['列A'].round(-2).astype(int)
ガンマ関数の絶対値に自然対数をとった値を計算する	math.lgamma(x)
オブジェクトはリストかタプル	isinstance(obj, (list)
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
option: ターコイズ色を使う	color = 'turquoise'
2進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
日本語が文字列中に使われているか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
線グラフの色をミディアムシアグリーンに変更する	plt.plot(データ列x, データ列y, color='mediumseagreen')
xが1、もしくは2	x == 1 or x == 2
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
縦棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
文字列リストをつなげる一つの文字列にする	''.join(aStringList)
２つのデータフレームをつなぐ	pd.concat([df, df2])
nからn2の範囲を使う	range(n, n2)
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
縦棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
xが一桁の数	-9 <= x <= 9
変数名を項目名として辞書	dict(name=element)
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
エンコーディング	sys.getdefaultencoding()
データフレームの指定したカラムの値が欠損値かテストする	df['列A'].isna()
文字列の両端から部分文字列を取り除く	s.strip(sub)
赤い一点鎖線としてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
データフレームのカラムの尖り	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームをソートして、行を振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
部分文字列が文字列の開始位置からと終了位置までの範囲にないか調べる	s.find(sub, start, end) == -1
回帰木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
線グラフをライム色を用いて描画する	plt.plot(データ列x, データ列y, color='lime')
MSDで淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
表データを関数によって集約して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
新しいヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
縦軸の目盛りを表示しない	plt.yticks([])
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
データフレームを指定した列を用いて昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
分数の分母	q.denominator
option: グラフの色をダークバイオレットに変更する	color = 'darkviolet'
option: スプリンググリーン色を使う	color = 'springgreen'
アークタンジェント	math.atan(x)
ラインを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
配列と数列についての散布図にrgbの大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
seabornのデフォルト見栄えを適用する	sns.set()
option: 色をカーキに設定する	color = 'khaki'
度数分布図を描く	plt.hist(データ列)
ヒストグラムのビン数を指定する	plt.hist(データ列, bins=区関数)
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
配列の転置行列	aArray.T
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
折れ線グラフをマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='magenta')
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
イテラブルと配列についての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
線グラフの色をマルーンに指定する	plt.plot(データ列x, データ列y, color='maroon')
最初のコマンド引数を調べる	sys.argv[1]
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
ダイアモンド印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
option: 行列のデータ型を指定する	dtype = np.uint8
エクセルファイルのシートをデータフレームとしてロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
日付データの日数	aDate.day
nをn2分の１にする	n /= n2
リストとイテラブルについて散布図を描き、、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ヒストグラムの色を珊瑚に設定する	plt.hist(データ列, color='coral')
変数名をキーとして、辞書	dict(name=element)
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
縦棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')

パールバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
プラットフォームのコードポイントの最大値	sys.maxunicode
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
全要素を0で初期化した配列	np.zeros(要素数)
カラムの欠損値を第二四分位数に減らす	ds.fillna(ds.median())
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
耐火レンガ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
タプルの要素を昇順に並べる	sorted(aTuple, reverse=False)
ヒストグラムをチョコレート色として描画する	plt.hist(データ列, color='chocolate')
自分自身をモジュールとして	sys.modules[__name__]
ファイルパスをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
データフレームの値は欠損値	df.isna()
全空白文字	string.whitespace
JSON形式のfをデータに変換する	json.load(fin)
ファイルパスをEUCとして書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
本日のローカルな日付を使う	datetime.date.today()
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
option: 丸印を使う	marker = 'o'
折れ線グラフの左三角マーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
option: マーカーの色を濃いシアンにする	markerfacecolor = 'darkcyan'
区間からベクトル	np.linspace(最小値, 最大値, 要素数)
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
option: バツマーカーを使う	marker = 'x'
データ列が正規分布からどの程度、歪んでいるか確認する	ds.kurt()
フォーマットとしてデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
ヒストグラムの色をシスルに変更する	plt.hist(データ列, color='thistle')
データフレームを列でグループ化して、それぞれのグループ毎の件数を知る	df.groupby(column).size()
カラーバーを描画する	plt.colorbar()
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
折れ線グラフの星印の線幅を設定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ローングリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
データフレームのcollのUNIX秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
下位集合か調べる	aSet.issubset(aSet2)
ヒストグラムをブルーバイオレット色として描画する	plt.hist(データ列, color='blueviolet')
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
キューの中に要素が存在するかテストする	element in deq
ガウス過程で回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
ダークレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
組を並べ直す	sorted(aTuple)
散布図をゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
ヒストグラムの色をドジャーブルーにする	plt.hist(データ列, color='dodgerblue')
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
黒い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームをグループ化し、それぞれの列に対し最大値を算出する	df.groupby(column)[column2].max()
nわるn2を求める	n / n2
データフレームをインポートする	import pandas as pd
リストと配列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
rgbに横棒プロットの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
option: 色をミディアムパープルに設定する	color = 'mediumpurple'
辞書の値に要素が含まれていないかどうか判定する	element not in aDict.values()
現在の秒を見る	datetime.date.today().second
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
縦棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
辞書の値として要素が含まれているか調べる	element in aDict.values()
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
符号なしで整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
ヒストグラムをペールグリーン色として描画する	plt.hist(データ列, color='palegreen')
nの桁数を求める	len(str(n))
ひとつでも非小文字が文字列中に含まれるかどうか調べる	any(not c.islower() for c in s)
ロバスト回帰モデルを新規作成する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データフレームの中の欠損値を消す	df.dropna()
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
マッピングのキーに対応した値	aDict.get(key)
実数の逆双曲線正接	math.atanh(x)
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
散布図をスラグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slategray')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームをグループ化し列に対し分散を求める	df.groupby(column)[column2].var()
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
データフレームの列が文字列で始まるデータを抽出する	df[df[column].str.startswith(s)]
線グラフの色をシルバーにセットする	plt.plot(データ列x, データ列y, color='silver')
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
option: ホットピンク色を用いる	color = 'hotpink'
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
文字列全体を大文字・小文字を無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
列のNaNを最大値で埋める	ds.fillna(ds.max())
ヒストグラムの色をシアンに指定する	plt.hist(データ列, color='cyan')
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
MSDを用いて多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
0からN未満までの配列	np.arange(N)
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
変数について数式の微分を行う	sympy.diff(e, z)
JSONLファイルにデータフレームを小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
シーケンスを累加したイテラブル	itertools.accumulate(iterable)
文字コードの最大値	sys.maxunicode
データフレームのカラムの欠損値を後の行の値に設定する	df[col].fillna(method='bfill')
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
文字列が文字列より辞書順で後か調べる	s > s2
レベッカパープル色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
ガンマ関数の絶対値に自然対数をとった値を計算する	math.lgamma(x)
紺にヒストグラムの色を変更する	plt.hist(データ列, color='darkblue')
横棒グラフを描画する	plt.barh(ラベル列, データ列)
辞書の浅いコピーを作成する	aDict.copy()
オレンジレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
集合から値を取り除く	aSet.remove(element)
データフレームのカラムの上位25%	df[col].quantile(0.25)
散布図の四角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ラベンダーブラッシュ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームのリスト列の標本標準偏差	df[aList].std()
値を赤色にする	f'\033[31m{value}\033[0m'
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
折れ線グラフにクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
セットから別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
ヒストグラムをダークグレー色を使って描画する	plt.hist(データ列, color='darkgray')
2つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
データフレームのカラムを百の位で四捨五入する	df[col].round(-2)
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
文字列を複数行対応として正規表現で区切る	re.split(pattern, s, flags=re.MULTILINE)
option: ライトイエローを使用する	color = 'lightyellow'
辞書のキー一覧	list(aDict)
文字列中の部分文字列を文字列に置換する	s.replace(sub, newsub)
折れ線グラフの大バツ印の色を設定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
変数をプリントする	print(value)
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
横軸だけ目盛り線	plt.grid(axis='x')
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
列'A'と列'B'をキーとして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
散布図を茶色色として描画する	plt.scatter(データ列x, データ列y, color='brown')
散布図に△マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
オブジェクトを文字列に変換する	str(obj)
折れ線グラフの星印を黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
文字列の末尾から部分文字列を除く	s.removesuffix(sub)
散布図をコーラル色として描画する	plt.scatter(データ列x, データ列y, color='coral')
2を底とする実数の対数	math.log2(x)
option: 上三角マーカーを使う	marker = '^'
option: アイボリーを使う	color = 'ivory'
整数の並べ方の総数を求める	math.perm(n)
ヒストグラムの色をペルーに変更する	plt.hist(データ列, color='peru')
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
折れ線グラフの線種を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ヒストグラムの色をシルバーに変更する	plt.hist(データ列, color='silver')
部分文字列が文字列の開始位置から先に含まれないかどうか	s.find(sub, start) == -1
option: 色をナバホホワイトに設定する	color = 'navajowhite'
線グラフの色をミントクリームに指定する	plt.plot(データ列x, データ列y, color='mintcream')
ヒストグラムの色をハニーデューにする	plt.hist(データ列, color='honeydew')
行列の累積和を求める	np.cumsum(aArray)
箱ひげ図にラベルをつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
パールバイオレットレッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
イテラブルの集合を作成する	set(iterable)
折れ線グラフをシスル色として描画する	plt.plot(データ列x, データ列y, color='thistle')
線グラフをダークサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='darksalmon')
option: マーカーをバツに変更する	marker = 'x'
散布図に黒い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データ列のNaNをxで埋める	ds.fillna(x)
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
小数点以下の表示精度を設定する	pd.set_option('precision', n)
カウンタの積集合	aCounter & aCounter2
タイムスタンプデータからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
y軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
目盛線	plt.grid(alpha=0.5)
オールドレース色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
配列の平均値	np.mean(aArray)
三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
散布図の▽印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
ヒストグラムをビン数を設定して描画する	plt.hist(データ列, bins=区関数)
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
散布図の印の大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
データフレームのカーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
方程式として数値の変数の解を求める	sympy.solve(e, z)
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
日付データの曜日を整数で使う	aDate.weekday()
実数の２乗	x ** 2
モデルの予測値と目的変数を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
文字列の左側からタブを除く	s.lstrip('\t')
データフレームからカテゴリデータの列のみ取り出す	df.select_dtypes('object')
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
マッピングの項目数	len(aDict)
折れ線グラフの右三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgrey')
棒グラフをコーラル色を用いて描画する	plt.bar(データ列x, データ列y, color='coral')
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
カラムの欠損値を平均値にセットする	ds.fillna(ds.mean())
切り下げて整数にする	math.floor(x)
nをn2だけ左シフトする	n << n2
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
折れ線グラフの▲マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
行列の行ごとの最小	np.min(aArray, axis=1)
リストの推移を折れ線プロットとして可視化する	plt.plot(range(len(データ列)), データ列)
青にヒストグラムの色を設定する	plt.hist(データ列, color='blue')
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
赤い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームとデータ列をくっつける	pd.concat([df, ds], axis=1)
既存の行列を元に全要素が0の配列	np.zeros_like(aArray)
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
変数を定義する	x = n
ファイルをバイナリできるように開く]	open(filepath, mode='rb')
折れ線グラフの上三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
黒いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='k')
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
グラフの描画で明るく色テーマを使う	sns.set(pallete='bright')
データフレームのカラムのNaNを中央値に設定する	df[col].fillna(df[col].median())
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
八進文字列を整数に変換する	int(s, 8)
淡い茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
縦棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
option: SJISを用いる	encoding = 'shift_jis'
二つのリストから辞書	dict(zip(aList, aList2))
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
option: 追加モードを用いる	mode = 'a'
データ列の中に日付データがあるか調べる	ds.isin([value])
折れ線グラフに大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
表データの中で、列に重複があるか見る	df.duplicated(subset=column)
nはn2か調べる	n == n2
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
十六進文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
値をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
データフレームを'A'列を用いて昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
列の50パーセンタイルを計算する	ds.median()
option: シスル色を使う	color = 'thistle'
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
option: フォントの色をディムグレーに設定する	color = 'dimgray'
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
辞書の値を列挙する	aDict.values()
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
データフレームのリスト列の平均値	df[aList].mean()
データ列の中にある文字列の数を数える	ds.isin([value]).sum()
コーパスのバージョン	version = 'wcce2022-0.1'
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
空白文字を全部使う	string.whitespace
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
関数ごとにデータフレームを集計して、列挙する	[(name, group) for name, group in df.groupby(関数)]
データフレームを'A'列によって集約して、列挙する	[(name, group) for name, group in df.groupby('A')]
文字列を黒色化する	f'\033[30m{value}\033[0m'
濃い青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
耐火レンガ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
データフレームのリストカラムの中の未入力値の個数を数える	df[aList].isna().sum()
option: グラフの色をゴールドに設定する	color = 'gold'
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
nをn2だけ右シフトする	n >> n2
データフレームのカラムの歪度	df[col].kurt()
縦棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
数列とイテラブルについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
カーキ色を用いてヒストグラムを描画する	plt.hist(データ列, color='khaki')
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
文字列が数字か調べる	s.isdigit()
文字列を文字リストにする	list(s)
配列と配列についての散布図に凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフの色を茶色に変更する	plt.plot(データ列x, データ列y, color='brown')
折れ線グラフの色をライトゴールドロディイエローに指定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ファイルからの入力ストリームを見る	open(filepath)
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
二つのデータフレームを横方向に合体させる	pd.merge(df, df2)
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
データ列の値をValueMapでまとめて置換する	ds.replace(ValueMap)
データフレームのリストカラムを10の位で丸めて整数型にする	df[aList].round(-1).astype(int)
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
行列計算を行う	import numpy as np
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
option: グラフの色をダークバイオレットにセットする	color = 'darkviolet'
オプションで、標準エラーを出力先にする	file = sys.stderr
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
タプル内の要素が少なくともひとつ真かどうか調べる	any(aTuple)
ライトスレイグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
オプションで出力先を標準出力に設定する	file = sys.stdout
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
散布図の下三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
option: どのカラムも行に設定しない	index_col = None
標準出力	sys.stdout
データフレームの中の列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
option: レベッカパープル色を使う	color = 'rebeccapurple'
昇順に組の値を並べ変える	sorted(aTuple, reverse=False)
ピーチパフ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
文字列を空白によって区切って、整数リストに変換する	map(int, s.split())
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
リストとリストについて散布図を描いて、マーカーを菱形にする	plt.plot(データ列x, データ列y, marker='D')
カウンタ同士で交わり演算する	aCounter & aCounter2
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームの中に日付データとが存在するかどうか調べる	df.isin([value, value2])
option: ラベンダーにグラフの色を設定する	color = 'lavender'
ヒストグラムの色をコーンズシルクに変更する	plt.hist(データ列, color='cornsilk')
横棒グラフをコーンフラワーブルー色として描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(データ列, 'norm')
オレンジレッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
列をカテゴリデータにする	ds.astype(object)
バイトオーダを使う	sys.byteorder
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
データフレームの尖度を計算する	df.skew()
色を淡くする	sns.set(pallete='muted')
データフレームの列がxより多くx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
折れ線グラフをサドルブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
分類モデルから目的変数を予測する	y_pred = model.predict(説明変数)
カウンタ同士で積集合	aCounter & aCounter2
横棒グラフをダークオーキッド色として描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ファイルからn文字、読み込む	f.read(n)
実数をn乗する	x ** n
'A'列の値でデータフレームをまとめたグループ	df.groupby('A')
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
option: ライトスカイブルー色を使用する	color = 'lightskyblue'
ベクトルのデータ型	aArray.dtype()
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
空の計数器を作成する	collections.Counter()
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
文字列中に非数字が含まれるかどうか調べる	any(not c.isdigit() for c in s)
データフレームのカラムの欠損値を最小値で補う	df[col].fillna(df[col].min())
ヒストグラムをラベンダーブラッシュ色として描画する	plt.hist(データ列, color='lavenderblush')
列名リストでデータフレームをソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
組中の文字列が最初に見つかる位置	aTuple.index(element)
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
折れ線グラフの色をバリーウッドに指定する	plt.plot(データ列x, データ列y, color='burlywood')
ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
アルファベットの文字列	string.ascii_letters
アイボリー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
option: 最初の行をカラムの名前に設定する	header = 0
棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
option: グラフの色をベージュに設定する	color = 'beige'
Pandasでフォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
マッピングの値に要素は含まれていない	element not in aDict.values()
option: エラーを無視するように設定する	errors = 'ignore'
option: 色をマルーンに指定する	color = 'maroon'
文字列の中の複数行対応としてパターンによるマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
option: グラフの種類を点線に指定する	linestyle = 'dotted'
option: ミディアムブルーにフォントの色を設定する	color = 'mediumblue'
ライム色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
散布図に赤い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
綺麗なグラフを使う準備をする	import seaborn as sns
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
スノーにヒストグラムの色を変更する	plt.hist(データ列, color='snow')
nをn2だけ減らす	n -= n2
スラグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
ミッドナイトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='midnightblue')
縦棒グラフをミディアムスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
predicateFuncを適用したとき真とならないイテラブルの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
1行だけ標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
横棒グラフを小麦色色を用いて描画する	plt.barh(データ列x, データ列y, color='wheat')
ライトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
year年day月の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
整数nを8進表現にする	oct(n)
リストを出力する	print(value)
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
リストと配列についての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
数列の変化を折れ線プロットで可視化する	plt.plot(range(len(データ列)), データ列)
実数に実数を加算する	x + y
コマンド引数の一覧	sys.argv[1:]
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
辞書からカウンタを作る	collections.Counter(aDict)
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
オブジェクトは論理値	isinstance(obj, bool)
カラーマップでヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
データフレームの列の中の欠損値の数を数える	df[col].isna().sum()
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
タプルの最初を除く	aTuple[1:]
黒い▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
ファイルパスをオープンして]追加ストリームを求める	open(filepath, mode='a')
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
パパイヤウィップ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
option: 色をインディアンレッドに指定する	color = 'indianred'
リストのn番目を削除する	del aList[n]
縦軸の目盛りを対数に変更する	plt.yscale('log')
option: カーキを用いる	color = 'khaki'
PandasでUNIX時間の文字列からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
整数を実数にかける	x * y
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
データフレームのn行以降抽出する	df[n:]
表データから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
option: スラグレー色を使う	color = 'slategray'
列を多重集合に変換する	collections.Counter(iterable)
option: 複素数型を使う	dtype = bool
データフレームから一番左側の列を除く	df[df.columns[1:]]
複数の列でデータフレームをまとめた表を見る	df.groupby(columns)
文字列は全て識別子名か調べる	s.isidentifier()
option: グラフの色を青に設定する	color = 'blue'
データフレームを列で並べ直して、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
nーn2	n - n2
積み上げ棒グラフをプロットする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
線グラフをダークマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
二つの文字列は同じか調べる	s == s2
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
列の文字列長を列として見る	ds.str.len()
グラフにx=0の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
リストの変遷を青い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: フローラルホワイトにグラフの色を設定する	color = 'floralwhite'
英字の小文字を全て使う	string.ascii_lowercase
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
文字列を双方向キューの先頭に付け加える	deq.appendleft(element)
散布図を貝殻色として描画する	plt.scatter(データ列x, データ列y, color='seashell')
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
折れ線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
折れ線グラフのポイント印の太さを設定する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ヒストグラムをライトイエロー色を使って描画する	plt.hist(データ列, color='lightyellow')
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
配列の行	aArray[行番号]
文字列が無限に続くイテラブル	itertools.repeat(element)
二つの行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
文字列を末尾から空白で区切る	s.rsplit()
数が負の数かどうか調べる	x < 0
パーセプトロンとして回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
引数から名前付きタプルをインスタンス化する	C._make(パラメータ)
データフレームのリストカラムのNaNを直後の値にする	df[aList].fillna(method='bfill')
折れ線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
グレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
グラフの用途をポスターに設定する	sns.set(context='poster')
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
整数nを十六進数表現に変換する	hex(n)
横棒グラフをライム色を用いて描画する	plt.barh(データ列x, データ列y, color='lime')
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
option: グラフの色をスノーに設定する	color = 'snow'
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
散布図をマルーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='maroon')
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
折れ線グラフの印を四角にする	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
正規表現に文字列がマッチさせる	re.match(pattern, s)
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
option: 色をバリーウッドに設定する	color = 'burlywood'
日付時刻データの月数	aDatetime.month
文字列の右側から空白を取り除く	s.rstrip(' ')
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
データフレームの列をヒストグラムで描く	plt.hist(df[column])
配列のユニークな要素	np.unique(aArray)
部分文字列で部分文字列が始まるか調べる	s.startswith(sub)
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
option: 切片を算出しない	fit_intercept = False
ピアソンとしてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
option: 読み込みモードにする	mode = 'r'
度数分布図を描画してビン数を変更する	plt.hist(データ列, bins=区関数)
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
グラフをスライドに指定する	sns.set(context='talk')
教師データとしてモデルを学習する	model.fit(説明変数, 目的変数)
縦棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
option: 区切りを使わない	sep = ''
リストとリストについての散布図に黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
日付時刻データと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()
xが一桁の正の数かどうか調べる	0 <= x <= 9
日付データをISO書式の文字列に変換する	aDate.isoformat()
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
option: 文字コードtextを使う	encoding = text
ヒストグラムの色を白に指定する	plt.hist(データ列, color='white')
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データ列の分を使う	ds.dt.minute
横棒グラフを紺碧色を用いて描画する	plt.barh(データ列x, データ列y, color='azure')
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
インディアンレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
データフレームの列名の一覧を使う	df.columns
データフレームのcollをフォーマットfmtでタイムスタンプ型に変換する	pd.to_datetime(df[col], format=fmt)
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
ヒストグラムをマルーン色として描画する	plt.hist(データ列, color='maroon')
ヒストグラムの色をダークスレートブルーにセットする	plt.hist(データ列, color='darkslateblue')
option: マゼンタ色を使う	color = 'magenta'
ファイルを書き込みできるようにBOM付きとしてオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
リストと配列について散布図を描き、、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
散布図をビスク色として描画する	plt.scatter(データ列x, データ列y, color='bisque')
イテラブルを両端キューに変換する	collections.deque(iterable)
折れ線グラフに菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D')
オリーブ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
option: 青紫を用いる	color = 'violet'
データフレームを列によって並べ、、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ブランチドアーモンド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームの列のユニークな値の個数	df[col].nunique()
グラフの凡例の位置を(x,y)に変更する	plt.legend(loc=(x, y))
データフレームを列の値によってグループ分けし、、各グループの分散を求める	df.groupby(column).var()
列のコンビネーション	itertools.combinations(iterable, n)
データフレームの列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
ヒストグラムをハニーデュー色として描画する	plt.hist(データ列, color='honeydew')
配列を中央値で分割する	pd.qcut(aArray, 2)
グラフ中で日本語を使えるようにする	sns.set(font='IPAexGothic')
2つのデータフレームを列をキーにして外部ジョインする	pd.merge(df, df2, on=column, how='outer')
代数計算を用いる	import sympy
ファイルを書き込み用にUTF8を用いてオープンする]	open(filepath, mode='w', encoding='utf-8')
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
コーンズシルクにヒストグラムの色を設定する	plt.hist(データ列, color='cornsilk')
nがn2の倍数かどうか	n % n2 == 0
変数をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
赤い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
黒いダイアモンドマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
option: 配列のデータ型を指定する	dtype = np.int16
平均値でデータフレームのカラムの欠損値を補う	df[col].fillna(df[col].mean())
データフレームを正規表現でまとめて置き換える	df.replace(pattern, repl, regex=True)
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
option: ディムグレー色を用いる	color = 'dimgray'
サンディーブラウン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
コマンド引数のリスト	sys.argv[1:]
横棒グラフをゴールド色として描画する	plt.barh(データ列x, データ列y, color='gold')
折れ線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
辞書から最後の項目をポップする	aDict.popitem()
数値を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
赤い一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
黒い丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列をISO書式として日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
リストの全ての要素をクリアにする	aList.clear()
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column])
赤い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
オリベドラブ色を用いてヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
option: エンコーディングを文字コードtextに指定する	encoding = text
xの小数点以下'5'桁までを表示する	print(':.5f'.format(x))
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
データフレームを二つの列によって昇順に並べ直す	df.sort_values(by=['A', 'B'], ascending=True)
ダークシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
マッピングのキーを要素に変更する	aDict[key] = element
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
文字列中に部分文字列が含まれるか調べる	sub in s
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
空の辞書	{}
option: バッファリングのサイズを設定する	buffering = 4096
データ列の標本標準偏差	ds.std()
ダークカーキにヒストグラムの色を変更する	plt.hist(データ列, color='darkkhaki')
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
文字列に文字列中の部分文字列を全部置き換える	s.replace(sub, newsub)
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: フクシア色を使う	color = 'fuchsia'
データ列を円グラフにする	plt.pie(データ列, startangle=90)
NaNを使う	math.nan
ハニーデュー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
option: 紺碧にグラフの色を設定する	color = 'azure'
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームの列がxより小さいデータを抽出する	df[df[column] < x]
タプルを引数として展開して表示する	print(*aTuple)
ヒストグラムの色をゴールドに指定する	plt.hist(データ列, color='gold')
option: マーカーを下三角に指定する	marker = 'v'
データフレームの母標準偏差	df.std(ddof=0)
option: ライトグリーンにグラフの色を変更する	color = 'lightseagreen'
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
y軸の目盛を対数に変更する	plt.yscale('log')
option: 色を青緑に設定する	color = 'teal'
実数を十の位で丸める	round(x, -1)
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
配列とリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
日付データが月曜日かどうかテストする	aDate.weekday() == 0
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
option: 星マーカーを用いる	marker = '*'
折れ線グラフをミディアムオーキッド色として描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
縦棒グラフをライムグリーン色として描画する	plt.bar(データ列x, データ列y, color='limegreen')
データフレームのリスト列の中に文字列があるか	df[aList].isin([value])
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
実数に実数を加える	x + y
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
ポイントマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムをライムグリーン色として描画する	plt.hist(データ列, color='limegreen')
kを底とする対数	math.log(x, k)
整数nを16進文字列に変換する	hex(n)[2:]
二つのベクトルを行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
nの無限数列を得る	itertools.repeat(n)
折れ線グラフをリネン色を使って描画する	plt.plot(データ列x, データ列y, color='linen')
文字列で区切って二つの文字列を出力する	print(value, value2, sep=s)
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
目的変数を分類モデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
チョコレート色として散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
部分文字列で文字列を分割する	s.split(sub)
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
折れ線グラフのマーカーを星印にする	plt.plot(データ列x, データ列y, marker='*')
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
小数点数の天井	math.ceil(x)
データフレームのリストカラムの欠損値を第二四分位数で置き換える	df[aList].fillna(df[aList].median())
ミントクリーム色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
ペールグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
ファイルを読み込み用にオープンする]	open(filepath, mode='r')
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
現在のUNIX時刻	int(time.time())
英字の小文字を全部見る	string.ascii_lowercase
等差数列から乱数を得る	random.randrange(start, end, step)
JSONLファイルにヘッダを付けずにデータフレームを保存する	df.to_csv(filename, header=None)
numpyを使う	import numpy as np
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
逆正弦を求める	math.asin(x)
黒い▽マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
英数字が文字列内に含まれるか確認する	any(c.isalnum() for c in s)
入力から二つの整数を読む	A, B = map(int, input().split())
空のカウンタを新規生成する	collections.Counter()
データフレームのカラムの曜日数	df[col].dt.dayofweek
ファイルを文字コードtextとして書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
データフレームのポイントプロットをプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: ゴールドに色を設定する	color = 'gold'
整数nが組のどれかか	n in aTuple
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
辞書を多重集合に変換する	collections.Counter(aDict)
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
折れ線グラフの丸印を黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
クラスが名前付きタプルかどうか判定する	issubclass(C, tuple)
イテラブルを集合にする	set(iterable)
ヒストグラムの色をダークサーモンに変更する	plt.hist(データ列, color='darksalmon')
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
option: グラフの色をアクアに設定する	color = 'aqua'
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
横軸の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
分子割る分母	fractions.Fraction(分子, 分母)
option: マーカーの線幅を設定する	markeredgewidth = 2.5
サドルブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
マゼンタ色を用いてヒストグラムを描画する	plt.hist(データ列, color='magenta')
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
パールバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
文字列を改行で分割し文字列リストに変換する	s.splitlines()
棒グラフをビスク色を用いて描画する	plt.bar(データ列x, データ列y, color='bisque')
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
ロバスト分類器を新規作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
nがn2と等しい	n == n2
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
option: パレットトルコイズ色を使う	color = 'paleturquoise'
nではない	not n
データフレームを各列と列の組み合わせ毎にグループ化して分散を求める	df.groupby([column, column2], as_index=False).var()
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
両端キューに要素をプッシュする	deq.append(element)
タプルから項目名の値か、もしくは要素を得る	aDict.get(key, element)
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列中からパターンにマッチする位置を探す	re.search(pattern, s)
回帰直線データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
散布図をリネン色として描画する	plt.scatter(データ列x, データ列y, color='linen')
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
xが一桁の正の数	0 <= x <= 9
option: 印を下三角に変更する	marker = 'v'
イテラブルから集合	set(iterable)
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategray')
ブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
サイコロと同じ乱数を発生させる	random.randint(1, 6)
データフレームから型リストで指定されたデータ型の列を取り出す	df.select_dtypes(include=typeList)
option: グラフの色をバイオレットに変更する	color = 'violet'
表の列がxでない行をフィルタする	df[df[column] == x]
x軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
日付時刻データの年数	aDatetime.year
option: ▼マーカーを描画する	marker = 'v'
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
アンティークホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='antiquewhite')
英字を全部見る	string.ascii_letters
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
イテラブルとイテラブルについて散布図を描画し、、マーカーを下三角に指定する	plt.plot(データ列x, データ列y, marker='v')
データフレームの列を最初のカテゴリーを除外してダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
オブジェクトがリストかタプルか調べる	isinstance(obj, (list)
ファイルパスのセパレータ記号	os.sep
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
x軸の目盛を非表示にする	plt.xticks([])
option: グラフの色を貝殻に設定する	color = 'seashell'
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
集合の要素数	len(aSet)
数式を方程式として解く	sympy.solve(e)
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
文字列TSVからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
ヒストグラムをライトシアン色を用いて描画する	plt.hist(データ列, color='lightcyan')
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
ヒストグラムの色をペールグリーンに指定する	plt.hist(データ列, color='palegreen')
8進数文字列を整数にする	int(s, 8)
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームの未入力値を平均値で埋める	df.fillna(df.mean())
星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*')
ピンク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
データフレームを昇順に複数の列によって並べる	df.sort_values(by=column, ascending=True)
データフレームの列を行に増やす	df.set_index(column)
散布図に黒い▽印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
nにn2をかけた値をnとする	n *= n2
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
列をビン分割する	pd.cut(ds, aList)
棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームのひとつの列のみ説明変数にする	説明変数 = df[['列名']]
ファイルを追加モードでオープンする]	open(filepath, mode='a')
リストにリストを加える	aList.extend(aList2)
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
データフレームのカラム名を変更する	df.rename(columns={column: name})
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
nが1、もしくは2か調べる	n == 1 or n == 2
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
option: 耐火レンガ色を使う	color = 'firebrick'
ヒストグラムをスチールブルー色として描画する	plt.hist(データ列, color='steelblue')
両端キューをデキューする	deq.popleft()
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
辞書にマッピングのエントリを更新する	aDict.update(aDict2)
データ列と配列についての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列の中で正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s)
オブジェクトは浮動小数点数クラスのインスタンス	isinstance(obj, float)
縦棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データ列が正規分布に従うかどうか調べる	scipy.stats.shapiro(データ列)
n進文字列を整数にする	int(s, n)
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
データ列の折れ線グラフを三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^')
文字列が全て印字できるか確認する	s.isprintable()
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
ミッドナイトブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
値が集合に含まれないか調べる	element not in aSet
実数の三乗を求める	x ** 3
折れ線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
ライトスレイグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
option: マーカーの線幅を変更する	markeredgewidth = 2.5
要素が全て初期値の行列を作る	np.full(要素数, 初期値, dtype=np.int)
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='teal')
オブジェクトのバイト長を確認する	sys.getsizeof(obj)
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
列にイテラブルを続ける	itertools.chain(iterable, iterable2)
多次元データを特異値分解で淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
Pandasでデータ列を日付データにする	pd.to_datetime(ds)
文字列を左トリムする	s.lstrip()
横棒グラフをホワイトスモーク色として描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
折れ線グラフを実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ライム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
印字可能な文字を全部使う	string.printable
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
勾配ブースティングで回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
オレンジレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
紺碧にヒストグラムの色を設定する	plt.hist(データ列, color='azure')
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データ列と数列について散布図を描画して、マーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
グラフの描画で淡くパレットを用いる	sns.set(pallete='muted')
全要素が初期値の行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
ヒストグラムでカラーマップを用いる	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
散布図をモカシン色を使って描画する	plt.scatter(データ列x, データ列y, color='moccasin')
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
ローングリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
フォレストグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='forestgreen')
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
データフレームから重複した行を残さず消す	df.drop_duplicates(keep=False)
リストをビン分割する	pd.cut(aList, aList)
データフレームの列をインデックスにセットする	df.set_index(column)
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
エンコーディングを調べる	sys.getdefaultencoding()
散布図をライム色を用いて描画する	plt.scatter(データ列x, データ列y, color='lime')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
集合＼集合	aSet.difference(aSet2)
'A'列を用いてデータフレームをソートして、更新する	df.sort_values(by='A', inplace=True)
nにn2をかける	n * n2
辞書の項目数	len(aDict)
マゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
アンティークホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategray')
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
option: グラフの色をプラムに設定する	color = 'plum'
凡例をグラフ中の(x,y)の場所に表示する	plt.legend(loc=(x, y))
ファイルのファイルサイズ	os.path.get_size(filepath)
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
JSONを用いる	import json
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
新しい文字列に文字列中の部分文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
両端キューの先頭	deq[0]
x軸の目盛を表示しない	plt.xticks([])
データフレームのリスト列の上位25%	df[aList].quantile(0.25)
実数のハイパボリック・コサインの逆数	math.acosh(x)
両端キューの中に要素が含まれてるか	element in deq
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
データ構造を使う	import collections
トマト色としてヒストグラムを描画する	plt.hist(データ列, color='tomato')
散布図をミディアムパープル色として描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
option: ダークバイオレット色を使用する	color = 'darkviolet'
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
部分文字列が部分文字列で開始するか	s.startswith(sub)
実数のsin	math.sin(x)
option: ライトスレイグレーを使う	color = 'lightslategray'
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
データフレームをグループ化し、各列に対し個数を求める	df.groupby(column)[column2].count()
ライトグリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: ハニーデューにグラフの色を設定する	color = 'honeydew'
データフレームの列の名前を列から文字列に変更する	df.rename(columns={column: name})
アイボリーにヒストグラムの色を設定する	plt.hist(データ列, color='ivory')
行列の各要素の最大公約数	np.gcd(aArray, aArray2)
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
イテラブルから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
option: 黄色を使用する	color = 'yellow'
文字列の両端から空白と改行を取り除く	s.strip()
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
白いヒストグラムを描画する	plt.hist(データ列, color='w')
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
右三角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
縦棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
イテラブルを文字列リストに変換して、空白で結合する	' '.join(map(str, iterable))
日付データは日付データと同時か	aDate == aDate2
データフレームから指定された列を抽出する	df[[column]]
タプルをチェーンマップに変換する	collections.ChainMap(aDict)
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
カウンタの要素をリストとして得る	aCounter.keys()
t-SNEで濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
ファイルパスのベースファイル名	os.path.splitext(os.path.basename(filepath))[0]
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
青い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
データ列のNaNを直前の値にセットする	ds.fillna(method='ffill')
最大長nの両端キューをシーケンスから用意する	collections.deque(iterable, maxlen=n)
横棒グラフをバリーウッド色として描画する	plt.barh(データ列x, データ列y, color='burlywood')
横棒グラフをフクシア色として描画する	plt.barh(データ列x, データ列y, color='fuchsia')
タイムスタンプデータを数値に変換する	aDatetime.timestamp()
値を黄色化する	f'\033[33m{value}\033[0m'
option: グラフの色を小麦色に設定する	color = 'wheat'
option: 色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
option: ネイビー色を用いる	color = 'navy'
データ列の残差を散布図としてプロットする	sns.residplot(x=データ列, y=データ列)
データフレームの値が欠損値かテストする	df.isna()
データフレームを四捨五入して、整数にする	df.round().astype(int)
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
option: ローングリーンにフォントの色を設定する	color = 'lawngreen'
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
文字列を左寄せする	s.ljust(文字列幅)
線グラフの色をベージュに変更する	plt.plot(データ列x, データ列y, color='beige')
nをn2だけ減少させる	n -= n2
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
ヒストグラムの色をダークカーキに変更する	plt.hist(データ列, color='darkkhaki')
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
option: ディープスカイブルーにフォントの色を設定する	color = 'deepskyblue'
n×n2を求める	n * n2
option: ホワイトスモークを使用する	color = 'whitesmoke'
数式を部分分数として展開する	sympy.apart(e)
空列	[]
xのハッシュ値を求める	hash(x)
入力ストリームをクローズする	f.close()
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
棒グラフをやわらかい青色として描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
リストをコピーする	aList.copy()
分類木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
折れ線グラフをサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='salmon')
散布図を淡い茶色色として描画する	plt.scatter(データ列x, データ列y, color='tan')
option: ダークスラテグレーを使う	color = 'darkslategray'
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
リストと数列の散布図を描画して大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
青い点線としてリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
実数を複素数に変換する	complex(x)
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
数式の部分分数化を行う	sympy.apart(e)
行列の逆行列	np.linalg.inv(aArray)
ビン数を設定してヒストグラムをプロットする	plt.hist(データ列, bins=区関数)
数列とリストの散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
カテゴリでグループ化して、データフレームの全カラムの相関をプロットする	sns.pairplot(df, hue='カテゴリ列')
偽	False
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
option: バツ印を描画する	marker = 'x'
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
辞書のキーの値を得る	aDict[key]
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
散布図に黒い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
データ列とイテラブルについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
赤いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
横棒グラフをミディアムターコイズ色として描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
オプションで、出力先を標準エラーに設定する	file = sys.stderr
リストの値を並べ直す	sorted(aList)
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
データフレームの列がxでない行をフィルタする	df[df[column] == x]
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
散布図をrgbの星マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
nが負の数	n < 0
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
グリッドの線スタイルを破線に変更する	plt.grid(linestyle='dashed')
ヒストグラムの色をピーチパフに変更する	plt.hist(データ列, color='peachpuff')
線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
option: ダークカーキ色を用いる	color = 'darkkhaki'
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
ミディアムシアグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
散布図の右三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: 色をライトサーモンに設定する	color = 'lightsalmon'
イテラブルとリストについて散布図を描画して、マーカーを▽に指定する	plt.plot(データ列x, データ列y, marker='v')
組の中の一番大きい値を求める	max(aTuple)
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
折れ線グラフを紺色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: フォントの色をシエナに設定する	color = 'sienna'
実数が有限か調べる	math.isfinite(x)
小数点数の逆双曲線余弦	math.acosh(x)
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
日付データの日	aDate.day
文字列の開始位置と終了位置の間に部分文字列が存在する	s.find(sub, start, end) != -1
タプルのn番目からn2番目までを得る	aTuple[n:n2]
文字列内に英字が含まれるか	any(c.isalpha() for c in s)
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
辞書の値に要素は含まれていないかどうか	element not in aDict.values()
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データ列の中の欠損値の合計を数える	ds.isna().sum()
時間を使う	import time
変数が0に近づくときの数値の極限値を求める	sympy.limit(e, z, 0)
縦棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
実数を浮動小数点数から減算する	x - y
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
n個にデータフレームの中の列をビン分割する	pd.cut(df[col], n)
文字列全体が正規表現に複数行対応としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.MULTILINE)
ヒートマップでクラス分類の偽陽性を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
フローラルホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
数値を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
集合が空でないかどうか	len(aSet) != 0
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
黒い三角マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
リストを分割数nでビン分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
n引くn2	n - n2
タプルを引数として展開して表示する	print(*aTuple, sep=',')
列をイミュータブルな集合にする	frozenset(iterable)
データフレームのリストカラムの中に文字列と日付データがある	df[aList].isin([value, value2])
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
option: グラフの色をオーキッドに設定する	color = 'orchid'
棒グラフの色をダークブルーにする	plt.bar(データ列x, データ列y, color='darkblue')
データフレームのリストカラムを100の位で丸めて整数型にする	df[aList].round(-2).astype(int)
表データから指定されたデータ型の列名一覧	df.select_dtypes(型).columns
タイムスタンプデータが日曜日	aDatetime.weekday() == 6
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
文字列の示すエンコーディングで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
文字列をISO書式としてタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
タプル中の要素は少なくともひとつ真か確認する	any(aTuple)
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
文字列は十進数字	s.isdecimal()
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
文字列の接頭辞は部分文字列かどうか調べる	s.startswith(sub)
ヒストグラムの線種を実線に指定する	plt.hist(データ列, linestyle='solid')
文字列中から部分文字列を探す	s.find(sub)
option: 読み込むシート名をnamesに設定する	sheet_name = names
rgbの三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
辞書の値の一覧を参照する	aDict.values()
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
配列と数列についての散布図にrgbのポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
浮動小数点数の符号をコピーにする	math.copysign(x, x2)
サポートベクター回帰モデルを作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームから列名を複数指定して選択する	df[columns]
データフレームを２つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
ヒストグラムの色を淡い茶色に設定する	plt.hist(データ列, color='tan')
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
option: スチールブルーを使う	color = 'steelblue'
各列毎にデータフレームをグループ化してカラムの平均値を算出する	df.groupby(column)[column2].mean()
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
option: リネン色を使う	color = 'linen'
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
option: 色の透明度を設定する	alpha = 0.5
標準入力から1文字読み込む	sys.stdin.read(1)
プロットの用途を論文に設定する	sns.set(context='paper')
リストの要素数だけ繰り返す	range(len(aList))
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
option: 印を三角に変更する	marker = '^'
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
rgbのダイアモンドマーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
符号付きで整数nを長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データフレームのそれぞれのグループ毎の標準偏差を求める	df.groupby(column).std()
折れ線グラフの色をベージュに指定する	plt.plot(データ列x, データ列y, color='beige')
option: 淡いピンク色色を使う	color = 'lightpink'
option: アクアにグラフの色を指定する	color = 'aqua'
小数点数の指数部を求める	math.frexp(x)[1]
辞書からキーで指定された項目をポップする	aDict.pop(key)
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
option: グラフの色をシアンに設定する	color = 'cyan'
ゼロ埋めした三2ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
option: 色をディムグレーに指定する	color = 'dimgray'
箱ひげ図をプロットして平均値を追加する	plt.boxplot(データ列, showmeans=True)
本日が何月か知る	datetime.datetime.today().month
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
データフレームのカラムを100の位で丸める	df[col].round(-2)
データフレームのリストカラムのNaNを最小値に減らす	df[aList].fillna(df[aList].min())
赤い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
JSON形式の文字列をロードする	json.loads(jsonString)
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
データフレームの先頭n行を調べる	df.head(n)
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
既存のファイルパスを文字コードtextとして追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
集合の補集合を求める	aSet.difference(aSet2)
データ列の折れ線グラフをポイント印を用いて描画する	plt.plot(データ列x, データ列y, marker='.')
option: サンディーブラウン色を用いる	color = 'sandybrown'
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
n番目のカラムをデータフレームから消す	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
集合を組に変換する	tuple(aSet)
横棒グラフをシアン色として描画する	plt.barh(データ列x, データ列y, color='cyan')
折れ線グラフの色をレベッカパープルにセットする	plt.plot(データ列x, データ列y, color='rebeccapurple')
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
黄色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
符号なし８ビット整数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.uint8)
線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ロッソ回帰分析を行う	model = sklearn.linear_model.Rosso(alpha=正則化項)
文字列を部分文字列で二分し前半の文字列を使う	s.partition(sub)[0]
ヒストグラムをダークサーモン色として描画する	plt.hist(データ列, color='darksalmon')
リストの要素を入れ替える	aList[i], aList[j] = aList[j], aList[i]
線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
配列を四分位数でビン分割する	pd.qcut(aArray, 4)
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
nが奇数かどうか調べる	n % 2 == 1
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
折れ線グラフを小麦色色を使って描画する	plt.plot(データ列x, データ列y, color='wheat')
折れ線グラフの色をダーク・スラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategrey')
ファイルを全て読み込む	f.read()
データフレームのインデックスの名前の一覧を使う	df.index
データフレームの列の75パーセンタイル	df[col].quantile(0.75)
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
リストを境界値としてデータフレームの中の列を分割する	pd.cut(df[col], aList)
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
データフレームからカラムを４つだけ選択する	df[[column, column2, column3, column4]]
ミッドナイトブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
文字列にイテラブルを変換して、タブを用いて連結する	'\t'.join(map(str, iterable))
青い実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
配列とリストについて散布図を描画して、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
文字列リストをsepを区切りにして一つの文字列にする	sep.join(aStringList)
列に列を続けた列	itertools.chain(iterable, iterable2)
整数nの八進表現を使う	oct(n)
PandasでdateStringをタイムスタンプ型に変換する	pd.to_datetime(dateString)
option: 青を用いる	color = 'blue'
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
散布図を黒いポイントマーカーでプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
要素はマッピングの値として含まれているか調べる	element in aDict.values()
横軸だけグリッド線	plt.grid(axis='x')
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
スタックをリストに変換する	list(deq)
配列が何のデータ型か調べる	aArray.dtype()
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
縦棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
ヒストグラムの色をサーモンにセットする	plt.hist(データ列, color='salmon')
正規分布に基づく累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ペアリストpairsからカウンタを新規生成する	collections.Counter(dict(pairs))
散布図を赤い右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
ふたつの集合の和集合	aSet.union(aSet2)
散布図をスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='steelblue')
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
両端キューの末尾に要素を追加する	deq.append(element)
折れ線グラフの右三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='teal')
ライトゴールドロディイエロー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
nがn2以下かどうか調べる	n <= n2
リスト中の要素は全て真かどうか調べる	all(aList)
データ列を丸めて、整数にする	ds.round().astype(int)
数値の簡単化を行う	sympy.sympify(e)
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
option: フォントの色をダークサーモンに設定する	color = 'darksalmon'
リストを赤色化する	f'\033[31m{value}\033[0m'
特異値分解を用いて淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
文字列のUNIX秒からタイムスタンプにする	pd.to_datetime(s, unit='s', utc=True)
平仮名をカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
イテラブルを縦軸、リストをx軸として、大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
散布図をダークカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
縦棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
散布図のポイントマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
折れ線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
小数点数の逆双曲線正弦	math.asinh(x)
ファイルをUTF8として開く]	open(filepath, encoding='utf-8')
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
データ列の中に文字列と日付データがいくつ存在するか数える	ds.isin([value, value2]).sum()
全要素を０で初期化した行列	np.zeros(行数, 列数)
列'A'と列'B'をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
ファイルを文字列の示すエンコーディングで開く]	open(filepath, encoding=s)
ダークスレートブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
辞書上でキーが未定義か調べる	key not in aDict
バイナリ書き込みモードでファイルをオープンする]	open(filepath, mode='wb')
ヒストグラムの色をロイヤルブルーにする	plt.hist(データ列, color='royalblue')
標準エラー	sys.stderr
option: ナバホホワイトにグラフの色を変更する	color = 'navajowhite'
ロバスト推定としてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ランダムにデータフレームからn行を取り出す	df.sample(n)
データフレームとデータ列を合体させる	pd.concat([df, ds], axis=1)
16進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
option: アイボリー色を使う	color = 'ivory'
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
実数の双曲線正接の逆数	math.atanh(x)
分類モデルの予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
折れ線グラフの色をダークグリーンに指定する	plt.plot(データ列x, データ列y, color='darkgreen')
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
クラス分類を確率的勾配降下を用いて行う	model = sklearn.linear_model.SGDClassifier()
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ケンドールの順位相関係数を見る	scipy.stats.kendalltau(データ列, データ列2)
データフレームのカラムが何年か見る	df[col].dt.year
スプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
変数について数式の積分を求める	sympy.integrate(e, z)
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
折れ線グラフの色をスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームの相関行列	df.corr()
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
逆双曲線正弦	math.asinh(x)
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
オプションで、標準出力を使う	file = sys.stdout
最大値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].max())
三つのリストを順にプリントする	print(value, value2, value3)
データフレームを各列と列の組み合わせ毎に集約し、分散を算出する	df.groupby([column, column2], as_index=False).var()
全要素を初期値で初期化した配列を作る	np.full(要素数, 初期値, dtype=np.int)
折れ線グラフの右三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
データフレームをCSVファイルでJSONLファイルに書き込む	df.to_csv(filename)
リストと配列の散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
グラフを淡くする	sns.set(pallete='muted')
option: グラフの色をラベンダーブラッシュに指定する	color = 'lavenderblush'
データフレームのカラムの欠損値を後の行の値に変更する	df[col].fillna(method='bfill')
option: ライトスレイグレー色を使う	color = 'lightslategray'
折れ線グラフに青い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
2を底とする対数	math.log2(x)
横棒グラフを真紅色を用いて描画する	plt.barh(データ列x, データ列y, color='crimson')
格子線をプロットに付ける	plt.grid(True)
配列でカウンタを更新する	aCounter.update(iterable)
日付時刻データが木曜日	aDatetime.weekday() == 3
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
縦棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
option: ビスク色を使う	color = 'bisque'
正規分布として疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
列を累積する	itertools.accumulate(iterable, operator.mul)
ローングリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ユーザから入力される	int(input())
ミディアムターコイズ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
option: ダークサーモンを使う	color = 'darksalmon'
option: 書き込みモードに設定する	mode = 'w'
nの2進数文字列	bin(n)[2:]
ふたつの集合の対称差	aSet.symmetric_difference(aSet2)
option: グラフの色をパープルに指定する	color = 'purple'
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
散布図をスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
ファイル名がTSVファイルか判定する	filename.endswith('.tsv')
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
散布図をパールバイオレットレッド色として描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
散布図に青い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ナバホホワイト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
データ列を小数点以下n桁で丸める	ds.round(n)
データフレームを1000の位で丸める	df.round(-3)
eの乗数を算出する	math.exp(x)
散布図にrgbの星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c=rgb)
nが正の数か調べる	n > 0
option: 下三角印を加える	marker = 'v'
option: モカシンにグラフの色を変更する	color = 'moccasin'
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
文字列を改行で区切り文字列リストに変換する	s.splitlines()
黒い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
やわらかい青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
赤い大バツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
option: データ型を指定する	dtype = np.int32
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
option: BOM付きを使う	encoding = 'utf_8_sig'
データフレームを列によってまとめたグループ	df.groupby(column)
xの小数点以下'1'桁までプリントする	print(':.1f'.format(x))
ピアソン相関係数を使ってデータフレームの相関行列を算出する	df.corr(method='pearson')
ヒストグラムベースの勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
縦棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ファイルパスからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
折れ線グラフの色をダークスラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategray')
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
フォレストグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
N未満までの行列を作る	np.arange(N)
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
アルファベットの小文字を全部使う	string.ascii_lowercase
行列の平均値	np.mean(aArray)
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
リストと配列についての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
本日の曜日を整数で見る	datetime.datetime.today().weekday()
散布図の星印の色を指定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
最初の部分文字列で文字列を二つに区切って、前半の文字列を求める	s.partition(sub)[0]
切り捨てながらnを半分にする	n //= 2
データ列が正規分布からどれだけ、歪んでいるか見る	ds.kurt()
フォレストグリーン色でヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
option: マーカーをバツに設定する	marker = 'x'
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
辞書をインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
タプルの各要素を関数に適用した結果で並べ変える	sorted(aTuple, key=func)
数列とリストについて散布図を描画して、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
全ての空白文字	string.whitespace
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: ディープスカイブルーにグラフの色を設定する	color = 'deepskyblue'
グラフの横軸を対数に変更する	plt.xscale('log')
折れ線グラフのアルファを変更する	plt.plot(データ列x, データ列y, alpha=0.5)
グラフを描く準備をする	import matplotlib.pyplot as plt
データフレームの行列をひっくり返す	df.T
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
列'A'と列'B'をキーとして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
データフレームのリスト列を100の位で丸めて整数型にする	df[aList].round(-2).astype(int)
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
データフレームのカラムの欠損値を最頻値で置換する	df[col].fillna(df[col].mode().iloc[0])
カラーマップとしてヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
時計回りに円グラフを描く	plt.pie(データ列, startangle=90, counterclock=False)
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
option: グラフの色を白に指定する	color = 'white'
全ての数字	string.digits
タプルのn番目以降の要素を取り出す	aTuple[n:]
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
option: ミディアムスプリンググリーンを使う	color = 'mediumspringgreen'
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
nをn2で割った余り	n % n2
データフレームのリスト列の相関行列ケンドールで	df[aList].corr(method='kendall')
option: パールバイオレットレッドを使用する	color = 'palevioletred'
フクシア色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
nの無限リスト	itertools.repeat(n)
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
実数の三乗	x ** 3
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
ヒストグラムを黒くする	plt.hist(データ列, color='k')
データフレームのカラムの中央値	df[col].median()
辞書をJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
折れ線グラフの色を暗い赤に変更する	plt.plot(データ列x, データ列y, color='darkred')
year年month月day日をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day)
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
データフレームからインプレイスで重複を消す	df.drop_duplicates(inplace=True)
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
数値を下線付きで表示する	print(f'\033[4m{value}\033[0m')
両端キューは空か調べる	len(deq) == 0
符号なし８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.uint8)
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
リストに文字列を加える	aList.append(element)
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
データ列は何日か確認する	ds.dt.day
データフレームとデータ列を横方向に合体させる	pd.concat([df, ds], axis=1)
クラス分類の正解率を算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
option: ミディアムシアグリーンを使用する	color = 'mediumseagreen'
イテラブルを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
ダークオレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
ピーチパフ色でヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
option: ミディアムブルー色を使う	color = 'mediumblue'
ライトスレイグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
パーセプトロンを用いてクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
グラフの大きさを設定する	plt.figure(figsize=(横幅, 高さ))
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
nとn2が等しいか	n == n2
散布図を黒い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームのリスト列の空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
列をぐるぐると繰り返す	itertools.cycle(iterable)
散布図の四角印を青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
プロットを画面に設定する	sns.set(context='notebook')
ペアリストpairsからカウンタを構築する	collections.Counter(dict(pairs))
ヒストグラムをミディアムシアグリーン色を使って描画する	plt.hist(データ列, color='mediumseagreen')
option: グラフの色をライトグリーンに指定する	color = 'lightseagreen'
データフレームから型リストで指定されたデータ型の列のみ取り出す	df.select_dtypes(include=typeList)
ヒストグラムの色をコーンフラワーブルーにする	plt.hist(データ列, color='cornflowerblue')
リストとリストの散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
配列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
ダークスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
マッピングにキーがあるか調べる	key in aDict
配列とイテラブルについての散布図にrgbの菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフに黒い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
モカシン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
option: SJISを使う	encoding = 'shift_jis'
ヒストグラムをダークオリーブグリーン色を用いて描画する	plt.hist(データ列, color='darkolivegreen')
イテラブルを累加する	itertools.accumulate(iterable)
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
横棒グラフをミディアムブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumblue')
option: ライトスカイブルー色を使う	color = 'lightskyblue'
組の要素数	len(aTuple)
データ列を1000の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ダークグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
イテラブルとリストの散布図を描画して、左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
標準エラーを得る	sys.stderr
縦棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
折れ線グラフの色をダークサーモンに指定する	plt.plot(データ列x, データ列y, color='darksalmon')
双方向キューの末尾にイテラブルの各要素を順に入れる	deq.extend(iterable)
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームから型の列を取り出す	df.select_dtypes(ty)
タイムスタンプデータにn分を足す	aDatetime + datetime.timedelta(minutes=n)
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
データフレームを列の値でグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
散布図を菱形印で描画する	plt.scatter(データ列x, データ列y, marker='D')
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
文字列をトリムする	s.strip()
option: ブラウンに色を設定する	color = 'brown'
要素を集合から除去する	aSet.remove(element)
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
線グラフの色をペルーに変更する	plt.plot(データ列x, データ列y, color='peru')
線形回帰データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ビスク色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
辞書の値として要素は含まれている	element in aDict.values()
文字列を部分文字列で二分する	s.partition(sub)
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
ファイルからフォルダ名を使う	os.path.dirname(filepath)
ライム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
変数を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
散布図に黒い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
プロットに格子を入れる	plt.grid(True)
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
option: ピンク色を使用する	color = 'pink'
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
文字列中の部分文字列を回数を制限して新しい文字列に置き換える	s.replace(sub, newsub, n)
棒グラフをミディアムターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
オプションで出力先を標準エラーに設定する	file = sys.stderr
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ライトサーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
xが真か	bool(x)
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
行列の値を見る	aArray[行番号, 列番号]
赤い下三角マーカーを配列とイテラブルの散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
カウンタ同士で共通部分演算する	aCounter & aCounter2
実数のアークタンジェントを求める	math.atan(x)
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
option: ミディアムブルーを使う	color = 'mediumblue'
各列毎にデータフレームをグループ化して、列の平均値を算出する	df.groupby(column)[column2].mean()
文字列をカンマで分割し、、列挙する	s.split(',')
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
マゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
配列の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
入力を整数として受け取る	int(input())
列の一意な値	df[col].unique()
整数nの十六進表現	hex(n)
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
option: バツマーカーを描画する	marker = 'x'
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
折れ線グラフの菱形マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
行列の行ごとの最大値を求める	np.max(aArray, axis=1)
２つの文字列を改行で区切って表示する	print(value, value2, sep='\n')
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
項目名がマップ上で定義済みか	key in aDict
ナバホホワイト色でヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
グラフの補足の位置を(x,y)に設定する	plt.legend(loc=(x, y))
綺麗なグラフを使用する準備をする	import seaborn as sns
文字列を式として評価する	eval(s)
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
マッピングをカウンタにする	collections.Counter(aDict)
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
オブジェクトは文字列型かどうか調べる	isinstance(obj, str)
日付時刻データをn分前にする	aDatetime - datetime.timedelta(minutes=n)
Pandasでデータフレームのcollをフォーマットfmtで日付データに変換する	pd.to_datetime(df[col], format=fmt)
本日が月曜日	datetime.datetime.today().weekday() == 0
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
線グラフの色をホワイトスモークにセットする	plt.plot(データ列x, データ列y, color='whitesmoke')
ケースを無視して事前に正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
単回帰モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
横棒グラフをアクア色を用いて描画する	plt.barh(データ列x, データ列y, color='aqua')
イテラブルを文字列に変換してカンマによって結合する	','.join(map(str, iterable))
列によってによって破壊的にデータフレームをソートする	df.sort_values(by=column, inplace=True)
リストとリストの散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
チョコレート色で線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
グリーンイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
グリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
双方向キューの上限を見る	deq.maxlen
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
ヒートマップを用いてデータフレームのリスト列の相関行列を描画する	sns.heatmap(df[aList].corr())
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
データフレームのリストカラムの25パーセンタイルを求める	df[aList].quantile(0.25)
option: 改行コードをUNIXに指定する	newline = '\n'
option: 線幅を設定する	linewidth = 3.0
実行時の標準出力の出力先がターミナルかどうか	sys.stdout.isatty()
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
グリーンイエロー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
option: マーカーの色をタンにする	markerfacecolor = 'tan'
黒い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データ列の空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
折れ線グラフの四角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
混同行列をヒートマップを使って確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
option: ホワイトスモークに色を設定する	color = 'whitesmoke'
散布図に赤い▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
ミディアムパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
大量のデータ列が正規分布かどうか仮説検定する	scipy.stats.kstest(データ列, 'norm')
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
データフレームの指定された三列だけ抽出する	df[[column, column2, column3]]
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
ライトサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
ヒストグラムをグリーンイエロー色として描画する	plt.hist(データ列, color='greenyellow')
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
リストとリストの散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データ列の折れ線プロットを描画して、色をカラーコードで指定する	plt.plot(データ列x, データ列y, color='#800080')
Pandasで、データ列のUNIX秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
NaNも加えてデータフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
文字列内にひとつでも小文字が含まれるか確認する	any(c.islower() for c in s)
データ列の中に文字列と日付データがいくつあるか数える	ds.isin([value, value2]).sum()
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
タイムスタンプデータが日曜日か調べる	aDatetime.weekday() == 6
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
option: ライトブルー色を使う	color = 'lightblue'
データフレームのカラムのタイムゾーンを東京に設定する	df[col].tz_convert('Asia/Tokyo')
ピアソンとしてデータフレームの相関行列を算出する	df.corr(method='pearson')
乱数生成系列をnで初期化する	random.seed(n)
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
ファイルをオープンして]、バイナリストリームを求める	open(filepath, mode='rb')
option: グレーを使う	color = 'gray'
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
今日が水曜日か	datetime.datetime.today().weekday() == 2
イテラブルのイミュータブルな集合を用意する	frozenset(iterable)
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
文字列を右から空白で区切る	s.rsplit()
ベクトルを平坦化する	aArray.flatten()
散布図をポイント印で描画する	plt.scatter(データ列x, データ列y, marker='.')
バリーウッドにヒストグラムの色を設定する	plt.hist(データ列, color='burlywood')
データフレームのカラムを千の位で四捨五入して、整数型にする	df[col].round(-3).astype(int)
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
日付時刻データにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
モデルを学習する	model.fit(説明変数, 目的変数)
グラフのカラーテーマを全般的に明るくする	sns.set(pallete='bright')
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
option: 改行コードを動作環境依存に指定する	newline = None
nがn2で割り切れるかどうか調べる	n % n2 == 0
ファイルを開き]、書き込みストリームを使う	open(filepath, mode='w')
ヒストグラムをシャルトリューズ色として描画する	plt.hist(データ列, color='chartreuse')
データフレームのカラムと列の相関行列スピアマンで	df[[column, column2]].corr(method='spearman')
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データ列のメディアン	ds.median()
グリーンイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
ロイヤルブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
上位集合か調べる	aSet.issuperset(aSet2)
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
データフレームの中央値	df.median()
xが1、もしくは2もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
nが何桁か	len(str(n))
データフレームのn行まで取り出す	df[:n]
紺色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
ピーチパフ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
リストの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
折れ線グラフをダークオリーブグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
イエローグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='yellowgreen')
データフレームの先頭のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
ボックスチャートを横方向にする	plt.boxplot(データ列, vert=False)
データフレームを列で並べて、上位n件を取り出す	df.sort_values(columns).head(n)
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
文字列の開始位置から終了位置の間で部分文字列の出現をカウントする	s.count(sub, start, end)
文字列を改行で区切り、文字列リストに変換する	s.splitlines()
線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
横軸の目盛りの値を変更する	plt.xticks(目盛りの値リスト)
棒グラフをパープル色として描画する	plt.bar(データ列x, データ列y, color='purple')
折れ線グラフの色を紺碧に変更する	plt.plot(データ列x, データ列y, color='azure')
折れ線グラフの色を赤に指定する	plt.plot(データ列x, データ列y, color='red')
散布図の四角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
配列をフラットにする	aArray.flatten()
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
ダークバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
データフレームのカラムの平均値	df[col].mean()
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
集合のイミュータブル版	frozenset(aSet)
option: レモンシフォン色を使う	color = 'lemonchiffon'
スカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
option: バリーウッド色を使用する	color = 'burlywood'
現在が何秒か知る	datetime.date.today().second
カテゴリデータを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
複数の列によってデータフレームをグループ化する	df.groupby(columns)
トマトにヒストグラムの色を指定する	plt.hist(データ列, color='tomato')
日付データをISO形式の文字列にする	aDate.isoformat()
ダイアモンドマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D')
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
変数をマゼンタ化する	f'\033[35m{value}\033[0m'
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
散布図に赤い△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
ライトコーラル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: モカシン色を使う	color = 'moccasin'
サーモン色でヒストグラムを描画する	plt.hist(データ列, color='salmon')
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
二つのカウンタの共通する要素	aCounter & aCounter2
データフレームのカラムの中にある文字列と文字列の合計をカウントする	df[col].isin([value, value2]).sum()
アンティークホワイト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
xが-9以上、9以下か調べる	-9 <= x <= 9
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
散布図にrgbの下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列を全て小文字に変換する	s.casefold()
データフレームを各列と列の組み合わせ毎にグループ化して標準偏差を求める	df.groupby([column, column2], as_index=False).std()
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
キューの末尾に数値を追加する	deq.append(element)
プロットのカラーパレットを指定する	sns.set(pallete=パレット名)
option: フォントの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
部分文字列で後ろから文字列を分割する	s.rsplit(sub)
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
新しい勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
リストの末尾を除く	aList[:-1]
ダークシアグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
データ列の日	ds.dt.day
上位集合もしくは等しいか	aSet > aSet2
折れ線グラフの大バツ印を赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
nからn2の値を引いてnにする	n -= n2
浮動小数点数の最大値	sys.float_info.max
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
文字列の両端から部分文字列を除去する	s.strip(sub)
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
ホワイトスモーク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
option: 決定木の深さを制限する	maxdepth = n
配列をn個にビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
リストとリストの散布図を描画し、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
両端キューを要素を出す	deq.popleft()
option: 黄緑を使う	color = 'chartreuse'
日付データが何曜日か知る	aDate.weekday()
縦棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
option: 値を置き換える	inplace = True
データ列をビン分割する	pd.cut(ds, aList)
データ列の母標準偏差を求める	ds.std(ddof=0)
マッピングのの一覧	aDict.values()
ファイルパスからストリームを読み込み、fileとする	file = open(filepath)
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
ミディアムブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
MLPで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
option: ライトグレーを用いる	color = 'lightgrey'
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
ファイルパスの拡張子付きのファイル名	os.path.basename(filepath)
日付時刻データが金曜日	aDatetime.weekday() == 4
縦棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
ひとつ置きにリストを抽出する	aList[::2]
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
散布図を青緑色として描画する	plt.scatter(データ列x, データ列y, color='teal')
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
折れ線グラフの菱形マーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
ベクトル演算を行う	import numpy as np
黒い上三角マーカーを配列と数列の散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='k')
option: パパイヤウィップ色を使う	color = 'papayawhip'
変数について数式の積分を行う	sympy.integrate(e, z)
行列の個数	aArray.size
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
ファイルパスの絶対パスを見る	os.path.abspath(filepath)
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
文字列を黒色にする	f'\033[30m{value}\033[0m'
縦棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
Pandasで、データ列をフォーマットを使ってタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
実数が正かどうか調べる	x > 0
ヒストグラムの色をライトスチールブルーに変更する	plt.hist(データ列, color='lightsteelblue')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
配列と数列についての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
文字列を文字コード列に変換する	[ord(ch) for ch in s]
空白によって文字列を区切って整数のリストに変換する	map(int, s.split())
切片なしの線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームの欠損値を平均値にする	df.fillna(df.mean())
折れ線グラフを青い一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフをダーク・スラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: インデックスを連番に設定する	index_col = None
散布図の左三角印を青色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
散布図を黒い左三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
散布図をマルーン色として描画する	plt.scatter(データ列x, データ列y, color='maroon')
表データの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
データフレームのリスト列の値は欠損値かどうか調べる	df[aList].isna()
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
文字列を空白で分割し、、文字列リストに変換する	s.split()
長さnのリストを作る	[0] * n
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
ヒストグラムをシーグリーン色として描画する	plt.hist(データ列, color='seagreen')
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
データフレームを複数の列で降順に破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
オブジェクトがタプルか調べる	isinstance(obj, tuple)
nが正の整数か調べる	n > 0
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
縦棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ヒストグラムをライム色を使って描画する	plt.hist(データ列, color='lime')
双方向キュー中の要素の位置	deq.index(element)
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
データフレームから数値データの列を抽出する	df.select_dtypes('number')
日付データが火曜日か	aDate.weekday() == 1
データフレームのリストカラムの要約統計量を計算する	df[aList].describe()
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
日付時刻データが日曜日かどうか調べる	aDatetime.weekday() == 6
折れ線グラフの色をインディゴに指定する	plt.plot(データ列x, データ列y, color='indigo')
集合の濃度	len(aSet)
青いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ダークマゼンタ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
イテラブルから行列を作る	np.array(iterable)
リストと配列について散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
ミディアムブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ヒストグラムをパウダーブルー色を使って描画する	plt.hist(データ列, color='powderblue')
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
2つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
ファイルパスをオープンして]読み込みストリームを求める	open(filepath, mode='r')
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
横軸の目盛の表示値を変更する	plt.xticks(目盛りの値リスト)
グラフのパレットを色差別なくする	sns.set(pallete='colorblind')
データフレームのカラムを百の位で丸める	df[col].round(-2)
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
横棒グラフをカデットブルー色として描画する	plt.barh(データ列x, データ列y, color='cadetblue')
option: ミッドナイトブルー色を使う	color = 'midnightblue'
リストとリストについて散布図を描き、左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフの左三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームを複数の列によって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
試しに何か動かす	print('Hello World')
option: 耐火レンガ色を使用する	color = 'firebrick'
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
文字列を走査し正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
リストの合計値	sum(aList)
正規分布による累積分布関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
タイムスタンプデータの分数	aDatetime.minute
赤いバツマーカーを配列と配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
折れ線グラフに青い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
行列の合計値	np.sum(aArray)
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
option: グラフの色をグレーに指定する	color = 'gray'
グラフの用途をポスターに指定する	sns.set(context='poster')
option: 色を小麦色に設定する	color = 'wheat'
ファイルからストリームを読み込んで、fileとする	file = open(filepath)
カレント作業ディレクトリ	os.getcwd()
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
二つの浮動小数点数は近似値か調べる	math.isclose(x, x2)
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
数字が文字列内に含まれるか確認する	any(c.isdigit() for c in s)
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
ファイルを一行ずつ読む	f.readline()
セットから任意の要素を取り出す	aSet.pop()
ダークオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
青い一点鎖線でイテラブルの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: 破壊的に操作する	inplace = True
nがn2で割り切れる	n % n2 == 0
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
シーケンスを配列にする	np.array(iterable)
文字列中の大文字を小文字に変換する	s.lower()
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
option: バッファリングを無効にする	buffering = 0
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
サンディーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
ロイヤルブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
折れ線グラフの色をミディアムバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='mediumvioletred')
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームを各列と列の組み合わせ毎にグループ化し、、最小値を計算する	df.groupby([column, column2], as_index=False).min()
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
option: グラフの色を濃いシアンに設定する	color = 'darkcyan'
出力ストリームに文字列を書く	f.write(s)
リストとリストの散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
PandasでdateStringを日付データに変換する	pd.to_datetime(dateString)
option: BOM付きを用いる	encoding = 'utf_8_sig'
棒グラフをダークマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
散布図の色をブラウンにする	plt.scatter(データ列x, データ列y, color='brown')
リストとイテラブルについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データ列のヒストグラムを描画する	plt.hist(データ列)
最初のコマンド引数を知る	sys.argv[1]
回帰分析をスタッキングとして行う	sklearn.ensemble.StackingRegressor()
option: 濃いシアンを用いる	color = 'darkcyan'
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
リストとリストの散布図に赤い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
行列が何のデータ型か調べる	aArray.dtype()
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
配列の列ごとの分散	np.var(aArray, axis=0)
option: バイアスを算出しない	fit_intercept = False
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
アクア色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
平均値付き箱ひげ図を描く	plt.boxplot(データ列, showmeans=True)
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
配列の要素数	aArray.size
データ列の標本標準偏差を計算する	ds.std()
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
データ列を等間隔でn個に分割する	pd.cut(ds, n)
ビンの数を設定してヒストグラムを描く	plt.hist(データ列, bins=区関数)
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
データフレームの各グループ毎の合計	df.groupby(column).sum()
タプル内の要素は全て真か	all(aTuple)
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
オブジェクトのフィールドの値	getattr(obj, プロパティ名)
データフレームを関数によってまとめたグループ	df.groupby(関数)
データ列の上位25%	ds.quantile(0.25)
回帰分析を確率的勾配降下で行う	model = sklearn.linear_model.SGDRegressor()
集合が空でないか調べる	len(aSet) != 0
データ列のどの値が最も現れるか見る	ds.mode()
両端キューの最初に要素を追加する	deq.appendleft(element)
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
文字列を赤色化する	f'\033[31m{value}\033[0m'
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
ミディアムパープル色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
データフレームのカラムを四捨五入して、整数にする	df[col].round().astype(int)
複数行対応として正規表現で文字列を分ける	re.split(pattern, s, flags=re.MULTILINE)
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
カラムの歪度	ds.kurt()
option: ダークグレーに色を設定する	color = 'darkgrey'
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
配列とリストの散布図を描画して、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
nが1、もしくは2、もしくは3に等しいか	n == 1 or n == 2 or n == 3
データフレームの中で、列と列の重複をドロップする	df.drop_duplicates(subset=column)
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ヒストグラムの色をパールゴールデンロッドにセットする	plt.hist(データ列, color='palegoldenrod')
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
数式のn階微分を求める	sympy.diff(e, z, n)
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
折れ線グラフをドジャーブルー色として描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
option: マーカーの色をティールにする	markerfacecolor = 'teal'
ダークカーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
折れ線グラフの▲マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
シーケンスを文字列として一つにする	''.join(map(str, iterable))
データ列の欠損値を前の行の値に設定する	ds.fillna(method='ffill')
カウンタをリセットする	aCounter.clear()
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
カウンタ同士で和集合	aCounter | aCounter2
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
'A'列によってデータフレームをソートする	df.sort_values(by='A')
ハニーデュー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
重複していない行を取り出す	df[not df.duplicated(keep=False)]
ミディアムアクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
変数を太字にする	f'\033[1m{value}\033[0m'
特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
無限にカウントアップする	itertools.count()
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
ピアソンを用いてデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
青いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
コマンドの第一引数を知る	sys.argv[1]
シアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
option: 右三角マーカーを描画する	marker = '>'
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
日付データの曜日を使う	aDate.weekday()
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
変数を黒色化する	f'\033[30m{value}\033[0m'
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
ヒストグラムをミディアムオーキッド色として描画する	plt.hist(データ列, color='mediumorchid')
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ヒストグラムを貝殻色を用いて描画する	plt.hist(データ列, color='seashell')
nが偶数	n % 2 == 0
折れ線グラフの色をアンティークホワイトに指定する	plt.plot(データ列x, データ列y, color='antiquewhite')
データフレームを列で集計して列の要約統計量を算出する	df.groupby(column).describe()[column2]
xでカラムの欠損値を埋める	ds.fillna(x)
year年month月の日付	datetime.date(year=year, month=month, day=1)
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
カウンタの全数	aCounter.total()
小文字列	string.ascii_lowercase
散布図の▽マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
文字列がリストの要素でないか調べる	element not in aList
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
配列とリストの散布図を描画して、▼マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
バイナリできるようにファイルをオープンする]	open(filepath, mode='rb')
列とイテラブルを連結する	itertools.chain(iterable, iterable2)
クラス分類の真陽性率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
オブジェクトはリストか確認する	isinstance(obj, list)
日付を使う	import datetime
実数とyの斜辺	math.hypot(x, y)
x座標の目盛りを対数に変更する	plt.xscale('log')
option: グラフの色をタンに変更する	color = 'tan'
predicateFuncが真となる列の部分	itertools.takewhile(predicateFunc, iterable)
リストとリストについての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
rgbの右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
データ列の文字列を欠損値にする	ds.replace(s, np.nan)
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
無限イテラブルを得る	itertools.count()
データ列の標本標準偏差を求める	ds.std()
ダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: 読み込まない列番号をnamesで指定する	skiprows = names
ふたつの辞書をマージする	aDict | aDict2
折れ線グラフの四角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
nがn2で割り切れるか調べる	n % n2 == 0
複数のデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
折れ線グラフの▼マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
珊瑚色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
ナバホホワイト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
折れ線グラフの色をグリーンイエローにする	plt.plot(データ列x, データ列y, color='greenyellow')
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
赤い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
列の各データ値の出現数	ds.value_counts()
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
線グラフの色をダークターコイズに変更する	plt.plot(データ列x, データ列y, color='darkturquoise')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
文字列を太文字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
散布図に菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
カラムの未入力値を後の行の値に設定する	ds.fillna(method='bfill')
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
空の辞書を作成する	{}
両端キューの右から要素を取り除く	deq.pop()
データフレームの内で、列と列の重複を削除する	df.drop_duplicates(subset=column)
JSONを使う	import json
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
乱数	random.random()
データフレームの列のpercent分位数	df[col].quantile(percent/100)
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
イテラブルとイテラブルについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
option: グラフの色を白に設定する	color = 'white'
線形モデルの係数	model.coef_
文字列の先頭で正規表現にマッチするか調べる	re.match(pattern, s)
ライムグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
データ列をヒストグラムにする	plt.hist(データ列)
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
ラベンダー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
数式の変数に数値を代入する	e.subs(z, e2)
リストと数列についての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
ヒストグラムをドジャーブルー色を用いて描画する	plt.hist(データ列, color='dodgerblue')
ライムグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
データフレームのリスト列の中にいくつ文字列が存在するかカウントする	df[aList].isin([value]).sum()
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
配列の行ごとの平均値	np.mean(aArray, axis=1)
スクリプトのファイル名	sys.argv[0]
データフレームを列の値でグループ化する	df.groupby(column)
アイボリー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
整数nが配列のどれかか	n in aArray
部分文字列が文字列中に含まれる	sub in s
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
横棒グラフを描画し、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
ふたつのリストのインターセクション	list(set(aList) & set(aList2))
二つの文字列が同じかどうか	s == s2
等間隔の配列を初期化する＼	np.arange(開始値, 終了値, 等差)
ポスター用にプロットを設定する	sns.set(context='poster')
最小値でデータフレームの列の欠損値を埋める	df[col].fillna(df[col].min())
有理数の分子	q.numerator
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
散布図をカーキ色として描画する	plt.scatter(データ列x, データ列y, color='khaki')
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
グラフの描画でパステル調にパレットを使う	sns.set(pallete='pastel')
赤いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
ヒストグラムをダークオレンジ色として描画する	plt.hist(データ列, color='darkorange')
option: グラフの色をマゼンタに変更する	color = 'magenta'
短い説明を表示する	plt.legend()
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
角度のラジアン	math.radians(degree)
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
nが正の整数かどうか	n > 0
現在の秒数	datetime.date.today().second
大バツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='X')
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
ファイルを読み込みモードを用いてオープンして]、fとする	f = open(filepath, mode='r')
要素が集合のメンバーに含まれるかどうか調べる	element in aSet
データフレームを列で並べ、、上位n件を取り出す	df.sort_values(columns).head(n)
両端キューの先頭にシーケンスの各値を入れる	deq.extendleft(iterable)
アクア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
レベッカパープル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
正則化付き回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
２つの最大値	max(x, y)
列の値でデータフレームをグループ化し、要約統計量を計算する	df.groupby(column).describe()
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
アルファベットを全部使う	string.ascii_letters
日付時刻データが何年か知る	aDatetime.year
option: セパレータを文字列にする	sep = s
最頻値でカラムのNaNを置換する	ds.fillna(ds.mode().iloc[0])
縦棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
正規分布のパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
option: スプリンググリーンを用いる	color = 'springgreen'
option: 印を菱形に変える	marker = 'D'
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
キューに要素をプッシュする	deq.append(element)
配列の要素ごとに加算する	aArray + aArray2
何か試しに動かす	print('Hello World')
縦軸だけグリッド線	plt.grid(axis='y')
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
標準入力から1行だけ読み込んで改行を取り除く	sys.stdin.readline().rstrip()
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
タプルをn倍する	aTuple * n
整数乱数の行列	np.random.randint(開始値, 終了値, (行数, 列数))
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
部分文字列が文字列の開始位置から先に含まれないか調べる	s.find(sub, start) == -1
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
タイムスタンプデータからn日分、引く	aDatetime - datetime.timedelta(days=n)
列の各値を順にデックの最初に追加する	deq.extendleft(iterable)
実数の値が整数か調べる	x.is_integer()
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
入力から二つの浮動小数数を読み込む	A, B = map(float, input().split())
option: マーカーをダイアモンドに指定する	marker = 'D'
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
データ列の出現頻度を可視化する	plt.hist(データ列)
折れ線グラフの菱形マーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
カウンタの項目を、そのカウントだけ列挙する	aCounter.elements()
複数行対応として文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
日付データにn週間分、足す	aDate + datetime.timedelta(weeks=n)
計数器をマッピングから作る	collections.Counter(aDict)
実数を百の位で丸める	round(x, -2)
縦棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
整数nを二進文字列にする	bin(n)[2:]
空のチェーンマップ	collections.ChainMap()
配列をリストから初期化する	np.array(aList)
ベクトルを転置する	aArray.T
空白	' '
option: マーカーをポイントに変更する	marker = '.'
option: グラフの色をトマトに設定する	color = 'tomato'
８進数字を全部使う	string.octdigits
オブジェクトのバイトサイズ	sys.getsizeof(obj)
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
外れ値に強い線形分類モデルを用意する	model = sklearn.linear_model.HuberClassifier()
ミッドナイトブルーにヒストグラムの色をセットする	plt.hist(データ列, color='midnightblue')
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
文字化けを防ぐ	sns.set(font='IPAexGothic')
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
データフレームを複数の列によって大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
文字列にリストを変換して、空白で連結する	' '.join(map(str, iterable))
オブジェクトは数値か	isinstance(obj, (int,float))
xの小数点以下'2'桁まで出力する	print(':.2f'.format(x))
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
タプルの最初のオブジェクトを探す	aTuple.index(element)
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
option: ホワイトスモークにグラフの色を設定する	color = 'whitesmoke'
データ列の値をreplにまとめて正規表現で置換する	ds.replace(pattern, repl, regex=True)
２つの数値をカンマで区切ってプリントする	print(value, value2, sep=',')
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
リストをアンダーライン付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
ビン数nを用いてリストを等量で分割する	pd.qcut(aList, n)
タプルの末尾を取り除く	aTuple[:-1]
縦棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
文字列を区切りで区切り、列挙する	s.split(sep)
option: データ型を指定する	dtype = np.uint8
列の平均値	ds.mean()
データフレームのリストカラムの欠損値を直後の値に変更する	df[aList].fillna(method='bfill')
ふたつの集合が互いに素	aSet.isdisjoint(aSet2)
線グラフを色付きの一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ライトスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
option: ゴールド色を用いる	color = 'gold'
散布図の左三角印を黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
イテラブルから両端キューを作る	collections.deque(iterable)
データフレームのカラムのタイムゾーンを日本に変更する	df[col].tz_convert('Asia/Tokyo')
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
データ列の各値が何回出現するか見る	ds.value_counts()
データフレームをインデックスによってソートする	df.sort_index()
データフレームを各列と列の組み合わせ毎にグループ分けして、最大値を求める	df.groupby([column, column2], as_index=False).max()
縦棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
rgbの上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフを青い実線として描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
nが無限に続く数列を得る	itertools.repeat(n)
日付データが日付データより前か	aDate < aDate2
データフレームをJSONLファイルにSJISで書き込む	df.to_csv(filename, encoding='shift_jis')
正接を算出する	math.tan(x)
option: 色をシアンに設定する	color = 'cyan'
折れ線グラフの色をコーンフラワーブルーに指定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
実数の小数点以下を丸める	round(x)
文字列中からパターンにケースを無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
整数nを半分にする	n //= 2
option: ゲインズボロ色を使う	color = 'gainsboro'
文字列で区切って２つのリストをプリントする	print(value, value2, sep=s)
データフレームの列一覧を見る	df.info()
重複ありで表データからn行をランダムにサンプリングする	df.sample(n, replace=True)
散布図のダイアモンドマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データ列の推移を青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
オレンジ色でヒストグラムを描画する	plt.hist(データ列, color='orange')
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
数式を簡略にする	sympy.sympify(e)
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
文字列を赤色にする	f'\033[31m{value}\033[0m'
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
縦棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
項目名がマッピングに存在するかテストする	key in aDict
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
イテラブルとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
グラフの背景色を暗くする	sns.set(style='darkgrid')
ヒストグラムの色をフォレストグリーンに指定する	plt.hist(データ列, color='forestgreen')
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
option: ライトイエロー色を用いる	color = 'lightyellow'
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
クリムゾン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
option: サドルブラウン色を使用する	color = 'saddlebrown'
棒グラフをドジャーブルー色を使って描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
nをn2だけ大きくする	n += n2
スピアマン順位相関係数で表の相関行列	df.corr(method='spearman')
ファイルが存在しないか調べる	not os.path.exists(filepath)
実数のn乗の浮動小数点数剰余	pow(x, n, y)
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
データ列間の決定係数を算出する	sklearn.metrics.r2_score(データ列, データ列2)
折れ線グラフの右三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
option: ターコイズ色を使う	color = 'turquoise'
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
組のn番目からn2番目の部分	aTuple[n:n2]
データフレームの散布図をグループ化して縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
ネイビー色でヒストグラムを描画する	plt.hist(データ列, color='navy')
オレンジレッド色を使ってヒストグラムを描画する	plt.hist(データ列, color='orangered')
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
option: ブルーバイオレット色を使用する	color = 'blueviolet'
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
日付データからn秒分、引く	aDate - datetime.timedelta(seconds=n)
グラフの背景色を暗くする	sns.set(style='darkgrid')
青い三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
文字コードtextで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding=text)
selectorsでマスクされたリストの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
プロットの描画で淡く色を用いる	sns.set(pallete='muted')
文字列を青色にする	f'\033[34m{value}\033[0m'
option: 色をスラグレーに設定する	color = 'slategray'
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
カテゴリで色分けしてカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
ライトグレーにヒストグラムの色を変更する	plt.hist(データ列, color='lightgray')
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
方程式の解を求める	sympy.solve(e)
折れ線グラフをロイヤルブルー色として描画する	plt.plot(データ列x, データ列y, color='royalblue')
ゲインズボロ色でヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
数式の展開を行う	sympy.expand(e)
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
option: 色を白に設定する	color = 'white'
散布図の印をバツにする	plt.scatter(データ列x, データ列y, marker='x')
option: マーカーを丸に変更する	marker = 'o'
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
アイボリー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
文字列の先頭でパターンに大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
チョコレートにヒストグラムの色を変更する	plt.hist(データ列, color='chocolate')
ゼロ埋めされた符号なし８ビット整数型の行列	np.zeros(要素数, dtype=np.uint8)
折れ線グラフにバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
サイコロと同じ乱数	random.randint(1, 6)
データフレームの未入力値を直前の値に変更する	df.fillna(method='ffill')
実数を実数に掛ける	x * y
淡いピンク色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
文字列の先頭から空白やタブを取り除く	s.lstrip()
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategrey')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれない	s.find(sub, start, end) == -1
文字列中に部分文字列が含まれるかどうか調べる	sub in s
数列とリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
nがn2と等しいか調べる	n == n2
データフレームとデータ列を横方向にくっつける	pd.concat([df, ds], axis=1)
データフレームのカラムを100の位で丸めて整数型にする	df[col].round(-2).astype(int)
文字列を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
現在が土曜日か調べる	datetime.datetime.today().weekday() == 5
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
データフレームのリストカラムはどの程度分散しているか見る	df[aList].var()
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
実数を文字列に変換する	str(x)
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
option: セパレータをタブにする	sep = '\t'
辞書から項目名の値	aDict.get(key)
日付時刻データが日付時刻データと同時か	aDatetime == aDatetime2
文字列中にひとつでも非アスキー文字が含まれる	any(not c.isascii() for c in s)
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
部分文字列か調べる	sub in s
ファイルパスから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
青色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
横棒グラフをピンク色として描画する	plt.barh(データ列x, データ列y, color='pink')
ローングリーン色でヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
クラス分類のF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
データフレームを見る	df.head()
線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
文字列の右側からタブを取り除く	s.rstrip('\t')
データフレームを列によってソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
文字列をアンダーライン付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
カウンタ同士でユニオン演算する	aCounter | aCounter2
最大値でデータフレームのカラムの未入力値を埋める	df[col].fillna(df[col].max())
リストを反転する	reversed(aList)
散布図をやわらかい青色として描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データフレームを'A'列で昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
イテラブルとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
option: 印を右三角に設定する	marker = '>'
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームの列をドロップする	df.drop(column, axis=1)
anemptystring	''
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
パラメータについて数式を積分する	sympy.integrate(e, z)
自然対数の底	math.e
散布図の▼印を青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
多次元データを主成分分析として淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
実数のn乗の実数剰余を求める	pow(x, n, y)
二つの文字列を辞書順で比較する	s < s2
ラベル付きの円グラフをプロットする	plt.pie(データ列, startangle=90, labels=ラベル列)
三変数の最大値	max(x, y, z)
データフレームのリストカラムを整数に丸める	df[aList].round()
実数の逆余弦を計算する	math.acos(x)
データフレームの重複した行を数える	df.duplicated().sum()
モカシン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
リストの最後から要素をポップする	aList.pop()
データ列を百の位で四捨五入する	ds.round(-2)
option: 印をポイントに変更する	marker = '.'
データフレームの先頭を見る	df.head()
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
横棒グラフを淡いピンク色色として描画する	plt.barh(データ列x, データ列y, color='lightpink')
ダークオリーブグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
文字列を緑色で出力する	print(f'\033[32m{value}\033[0m')
日付データが何日か知る	aDate.day
nが一桁の数かどうか調べる	0 <= n <= 9
２変数の最小値を求める	min(x, y)
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
option: ダークマゼンタを使う	color = 'darkmagenta'
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
点線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
耐火レンガ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
データフレームのカラムの名前を列から文字列に付け直す	df.rename(columns={column: name})
入力から二つの文字列を読む	A, B = map(str, input().split())
xを整数に変換する	int(x)
UNIXコマンドtextを実行する	os.system(text)
データフレームの列のNaNを平均値に設定する	df[col].fillna(df[col].mean())
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
option: 丸マーカーを使う	marker = 'o'
データ列の中にある文字列の合計を求める	ds.isin([value]).sum()
オブジェクトのクラス	type(obj)
折れ線グラフの四角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
本日の日付	datetime.date.today()
option: 淡い茶色を使う	color = 'tan'
実数の逆余弦	math.acos(x)
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
データフレームのカラムが何秒か調べる	df[col].dt.second
散布図のバツマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
最頻値でデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
オーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
折れ線グラフをライトコーラル色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcoral')
文字列を白色にする	f'\033[37m{value}\033[0m'
行列の列を選択する	aArray[:, 列番号]
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
タプルの最後からn番目以前の要素を取り出す	aTuple[:-n]
ヒストグラムの色をベージュに指定する	plt.hist(データ列, color='beige')
散布図の菱形マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
棒グラフをタン色を用いて描画する	plt.bar(データ列x, データ列y, color='tan')
コマンドライン引数	sys.argv
rgbのバツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
スレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
スノー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
option: ダークグリーンにフォントの色を設定する	color = 'darkgreen'
多次元データをSVDで濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
キューの最大長	deq.maxlen
テンプレートをargsを引数としてフォーマットする	formatText.format(*args)
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
プロットに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
リストとデータ列について散布図を描画して、その大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
ボックスチャートを二つ並べて描画する	plt.boxplot([データ列, データ列])
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
文字列中に非大文字が含まれる	any(not c.isupper() for c in s)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
ファイルをEUCを使って開く]	open(filepath, encoding='euc_jp')
散布図の左三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
データ列を100の位で丸めて、整数にする	ds.round(-2).astype(int)
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
データフレームの列の文字列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
配列の行ごとの平均値を計算する	np.mean(aArray, axis=1)
配列の列ごとの合計を求める	np.sum(aArray, axis=0)
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
茶色色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
切片なしの線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
rgbのポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
サンディーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='sandybrown')
リストから重複を取り除く	sorted(set(aList), key=aList.index)
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
ヒストグラムの色をダークグレーにセットする	plt.hist(データ列, color='darkgrey')
ゼロ埋めされた行列	np.zeros(行数, 列数)
文字列を空白で区切る	s.split()
データ列の欠損値を平均に設定する	ds.fillna(ds.mean())
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
option: スプリンググリーン色を使う	color = 'springgreen'
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
グレー色としてヒストグラムを描画する	plt.hist(データ列, color='gray')
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
データフレームの列とカラムの相関行列を求める	df[[column, column2]].corr()
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
シスル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
プロットの全般的に色を明るくする	sns.set(pallete='bright')
ファイルからnバイト読み込む	f.read(n)
option: ドジャーブルー色を使う	color = 'dodgerblue'
データフレームを確認する	df.head()
折れ線グラフの色をゲインズボロに変更する	plt.plot(データ列x, データ列y, color='gainsboro')
日付時刻データの時間数を使う	aDatetime.hour
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategrey')
散布図を赤い左三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='<', c='r')
1で全要素を初期化した配列	np.ones(要素数, dtype=np.int)
折れ線グラフのポイント印の大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
ネイビー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
リストの移り変わりを折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
セットが空集合でないかどうか調べる	len(aSet) != 0
散布図にrgbの大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ロードされたモジュールのリスト	sys.modules
線グラフの色をティールに設定する	plt.plot(データ列x, データ列y, color='teal')
option: 改行コードを旧Macに設定する	newline = '\r'
表データをグループ化しそれぞれの列に対し最小値を計算する	df.groupby(column)[column2].min()
数式の変数を数値で置き換える	e.subs(z, e2)
標準入力から1行だけ読む	sys.stdin.readline()
行列をイテラブルから作る	np.array(iterable)
option: 色を青に設定する	color = 'blue'
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
2つのオブジェクトが等しい	obj == obj2
二つのオブジェクトが等しいか調べる	obj == obj2
nの2乗	n ** 2
縦棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgray')
リストが空でないかどうか確認する	len(aList) != 0
アルファベットの大文字列	string.ascii_uppercase
option: ミントクリーム色を使用する	color = 'mintcream'
option: ディムグレー色を使用する	color = 'dimgray'
リストをビン数nでビン分割する	pd.cut(aList, n)
線グラフをライトイエロー色を使って描画する	plt.plot(データ列x, データ列y, color='lightyellow')
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
本日は何年か知る	datetime.datetime.today().year
折れ線グラフの星印を青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
ヒストグラムの色を赤に指定する	plt.hist(データ列, color='red')
棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgray')
実数がNaN	math.isnan(x)
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='grey')
線グラフの色をカーキに指定する	plt.plot(データ列x, データ列y, color='khaki')
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
ボックスチャートを描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
option: ゴールデンロッドを使用する	color = 'goldenrod'
横棒グラフをミディアムブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumblue')
最後の部分文字列で文字列を二分する	s.rpartition(sub)
リストを等しい量になるようにビン数nを使ってビン分割する	pd.qcut(aList, n)
option: グラフの色をダークバイオレットに指定する	color = 'darkviolet'
'A'列でデータフレームをソートする	df.sort_values(by='A')
整数nが配列のいづれかかどうか判定する	n in aArray
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
1行から二つの自然数を読む	A, B = map(int, input().split())
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
折れ線グラフの下三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
黄緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
データフレームから重複を残さずドロップする	df.drop_duplicates(keep=False)
option: 三角マーカーを描画する	marker = '^'
行列の値	aArray[行番号, 列番号]
散布図をダークバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
赤い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
第一引数で指定されたファイルの名前	sys.argv[1]
ベクトル間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
散布図をダークマゼンタ色を使って描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
実数の双曲線正接を算出する	math.tanh(x)
option: フォントの色をシャルトリューズに設定する	color = 'chartreuse'
リストの最初のn要素を取り除く	aList[n:]
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
正規表現によって文字列を置換する	re.sub(pattern, newsub, s)
マッピングの項目数を得る	len(aDict)
折れ線グラフに黒い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
ふたつの辞書を合体する	aDict | aDict2
実数が有限か	math.isfinite(x)
option: namesをカラムの名前に設定する	names = names
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データ列が何時か調べる	ds.dt.hour
縦棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
rgbのダイアモンドマーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
タン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
標準正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x)
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
日付データが日曜日かテストする	aDate.weekday() == 6
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
データフレームの中にいくつNaNがあるか数える	df.isna().sum()
option: グラフの色をライトゴールドロディイエローにする	color = 'lightgoldenrodyellow'
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
タプルをミュータブルにする	list(aTuple)
データフレームの列の中に文字列と文字列がいくつあるかカウントする	df[col].isin([value, value2]).sum()
ファイルパスをUTF8で書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
option: フォントの色をフクシアに設定する	color = 'fuchsia'
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
空白が文字列内に含まれるかどうか確認する	any(c.isspace() for c in s)
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
データフレームを列でを用いて破壊的にソートする	df.sort_values(by=column, inplace=True)
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
シルバー色でヒストグラムを描画する	plt.hist(データ列, color='silver')
グラフのパレットをパステル調にする	sns.set(pallete='pastel')
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
option: 改行コードをWindowsに変更する	newline = '\r\n'
両端キューが空か調べる	len(deq) == 0
option: グラフの種類を破線に設定する	linestyle = 'dashed'
データフレームから重複した行を取り除い、インプレイスする	df.drop_duplicates(inplace=True)
TSVファイルを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
黒い上三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
２つのデータフレームを横方向にマージする	pd.merge(df, df2)
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
要素∉セット	element not in aSet
異なるカラムをキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
nからn2までの一つ置きの整数列	list(range(n, n2+1, 2))
日付時刻データが日曜日	aDatetime.weekday() == 6
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
折れ線グラフの色をダークマゼンタに変更する	plt.plot(データ列x, データ列y, color='darkmagenta')
淡いピンク色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
プロット中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
option: セパレータをコロンにする	sep = ':'
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
データフレームを各列と列の組み合わせ毎に分類して、合計を求める	df.groupby([column, column2], as_index=False).sum()
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
勾配ブースティングを使ってクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
リストのn番目に文字列を挿入する	aList.insert(n, element)
option: セパレータを使わない	sep = ''
値∈集合	element in aSet
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データフレームをグループ化し、各列に対し最大値を求める	df.groupby(column)[column2].max()
option: パレットトルコイズ色を使用する	color = 'paleturquoise'
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
オプションで、出力先を標準出力に設定する	file = sys.stdout
線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
デフォルトのエンコーディングを使う	sys.getdefaultencoding()
データフレームのカラムを並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
option: グラフの色をパープルに設定する	color = 'purple'
2つの列の値によってデータフレームをグループ分けする	df.groupby(['A', 'B'])
タプルの先頭を使う	aTuple[0]
ピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
option: 欠損値を含めない	dropna = True
オレンジ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
option: ライトグレーを使う	color = 'lightgray'
データフレームのリスト列のNaNを中央値で補う	df[aList].fillna(df[aList].median())
リストを中央値でビン分割する	pd.qcut(aList, 2)
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
折れ線グラフの印をポイントにする	plt.plot(データ列x, データ列y, marker='.')
ダークマゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームを小数点以下n桁で丸める	df.round(n)
ヒストグラムの色をブラックに変更する	plt.hist(データ列, color='black')
nの八進数表記	oct(n)
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
実数を万の位で四捨五入する	round(x, -4)
option: グラフの色を茶色に設定する	color = 'brown'
データフレームを'A'列と'B'列で昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
角度のラジアンを求める	math.radians(degree)
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
折れ線グラフをプロットする	plt.plot(データ列x, データ列y)
データ列の変遷を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線プロットの色をカラーコードを用いて指定する	plt.plot(データ列x, データ列y, color='#800080')
numpyを用いる	import numpy as np
分子と分母から有理数を生成する	fractions.Fraction(分子, 分母)
プロットで使うフォントを指定する	sns.set(font=フォント名)
nわるn2	n / n2
少ない順番にカウンタを列挙する	aCounter.most_common()[::-1]
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
リストとリストの散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームを二つの列で小さい順に並べて更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
カウンタの項目を増やす	aCounter[element] += 1
タプルの長さ	len(aTuple)
タプルの末尾	aTuple[-1]
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
文字列を黄色にする	f'\033[33m{value}\033[0m'
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
k進対数	math.log(x, k)
プラム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
データ列の偏りを平方根する	np.sqrt(データ列)
散布図をライトスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
横棒グラフをミディアムパープル色として描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
スプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
青い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームの列と列の各列間の相関係数を求める	df[[column, column2]].corr()
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
データ列の欠損値を平均で埋める	ds.fillna(ds.mean())
option: ミスティローズ色を用いる	color = 'mistyrose'
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
新しいロジスティック回帰モデルを準備する	model = sklearn.linear_model.LogisticRegression()
nにn2をかけた値をnに代入する	n *= n2
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
文字列リストを結合する	''.join(aStringList)
グラフで使うタイトルを設定する	plt.title('グラフの名称')
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
線グラフの色をアクアに指定する	plt.plot(データ列x, データ列y, color='aqua')
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
nから無限にカウントアップする	itertools.count(start=n)
データフレームの指定された２つの列を抽出する	df[[column, column2]]
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
辞書にキーワード引数で更新する	aDict.update(**kwargs)
自然数個からk個取り出したときの並べ方の総数を求める	math.perm(n, k)
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
正規分布による確率密度関数を使用する	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
折れ線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームをインデックスで小さい順に並べる	df.sort_index(ascending=True)
二変数の最も小さい値	min(x, y)
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
黒いポイントマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
マップの項目数	len(aDict)
データ列が何年か見る	ds.dt.year
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
データフレームの中に日付データと文字列があるか調べる	df.isin([value, value2])
複数の列の値でデータフレームをグループ化し、要約統計量を求める	df.groupby(columns).describe()
散布図の印を▲にする	plt.scatter(データ列x, データ列y, marker='^')
折れ線グラフに右三角マーカーを加える	plt.plot(データ列x, データ列y, marker='>')
実数の正弦の逆数	math.asin(x)
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
一番左側の列をデータフレームから除く	df[df.columns[1:]]
要素をキューの最初に入れる	deq.appendleft(element)
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
2変数の最も大きい値	max(x, y)
縦棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
散布図を丸マーカーで描く	plt.plot(データ列x, データ列y, marker='o')
カラーコードで折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgrey')
オブジェクトはバイト列クラスのインスタンス	isinstance(obj, bytes)
JSON形式のファイル入力を辞書に変換する	json.load(fin)
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
JSON形式の文字列をデータに変換する	json.loads(jsonString)
二次元リストをフラット化する	sum(aList)
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
カウンタをイテラブルで更新する	aCounter.update(iterable)
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
option: フォントの色をディープスカイブルーに変更する	color = 'deepskyblue'
箱髭図で数列を可視化する	plt.boxplot(データ列)
配列の転置行列を求める	aArray.T
折れ線グラフに赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
クラス分類をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
パールバイオレットレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
横棒グラフをディープスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
データフレームのカラムを1000の位で四捨五入する	df[col].round(-3)
文字列の接尾辞から部分文字列を安全に取り除く	s.removesuffix(sub)
カラーバーを横向きに付ける	plt.colorbar(orientation='horizontal')
２つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
option: アンティークホワイト色を使う	color = 'antiquewhite'
option: グラフの色をディムグレーに変更する	color = 'dimgrey'
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
折れ線グラフの色をカラーコードで指定する	plt.plot(データ列x, データ列y, color='#800080')
option: カデットブルーを使う	color = 'cadetblue'
数値の符号をコピーにする	math.copysign(x, x2)
円プロットを真円にする	plt.axis('equals')
プロット描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
配列とリストについて散布図を描いて三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
線グラフの色をライトブルーに指定する	plt.plot(データ列x, データ列y, color='lightblue')
nをn2で結果の切り上げ	(n + n2 - 1) // n2
ヒストグラムの色をダークグリーンに指定する	plt.hist(データ列, color='darkgreen')
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
未初期化の行列	np.empty(要素数, dtype=np.int)
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
散布図に赤い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームのカラムの時刻を使う	df[col].dt.hour
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
データフレーム全体を行でソートする	df.sort_index()
折れ線グラフに黒いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
両端キューの末尾	deq[-1]
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
データラベルを表示する	plt.legend()
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
グラフを論文用に設定する	sns.set(context='paper')
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
リストの中の最小値を求める	min(aList)
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
データフレームのリストカラムの尖度を求める	df[aList].skew()
列を両端キューにする	collections.deque(iterable)
Pandasのバージョンを表示する	print(pd.__version__)
折れ線グラフの丸印を青色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
縦棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームを丸めて、整数型にする	df.round().astype(int)
option: ハニーデュー色を使う	color = 'honeydew'
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
折れ線グラフの印を四角印にする	plt.plot(データ列x, データ列y, marker='s')
option: グラフの色をオレンジレッドに変更する	color = 'orangered'
option: 大バツマーカーを使う	marker = 'X'
option: 色をピーチパフに設定する	color = 'peachpuff'
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
プラットホームはLinuxか調べる	sys.platform.startswith('linux')
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
文字列の中のパターンによるすべてのマッチを求める	re.findall(pattern, s)
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
リストを箱ひげ図で可視化する	plt.boxplot(データ列)
データフレームのデータ型の一覧を使う	df.dtypes
ファイルパスを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
データフレームを列の値によって集約する	df.groupby(column)
データフレームの列一覧	df.info()
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
ダークシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkseagreen')
折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
option: 色をタンに指定する	color = 'tan'
データフレームの行を範囲指定して抽出する	df[start:end]
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
ヒストグラムをディープスカイブルー色として描画する	plt.hist(データ列, color='deepskyblue')
横棒グラフをディムグレー色を使って描画する	plt.barh(データ列x, データ列y, color='dimgrey')
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
パールゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
イテラブルを配列に変換する	np.array(iterable)
横棒グラフをパープル色として描画する	plt.barh(データ列x, データ列y, color='purple')
ヒストグラムをオリーブ色を使って描画する	plt.hist(データ列, color='olive')
option: セパレータを改行にする	sep = '\n'
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
実部と虚部から複素数を作る	complex(x, y)
折れ線グラフにポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
散布図のポイント印を黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
線グラフの色をペルーに指定する	plt.plot(データ列x, データ列y, color='peru')
縦軸の目盛りを整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
option: サドルブラウンを使う	color = 'saddlebrown'
パウダーブルーにヒストグラムの色を指定する	plt.hist(データ列, color='powderblue')
破壊的に降順に'A'列によってデータフレームを整列する	df.sort_values(by='A', ascending=False, inplace=True)
散布図をパールゴールデンロッド色を使って描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
折れ線グラフの星印の線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
最適な位置に凡例を表示する	plt.legend(loc='best')
空のロジスティック回帰モデルを準備する	model = sklearn.linear_model.LogisticRegression()
型が名前付きタプルか調べる	issubclass(C, tuple)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
xの小数点以下'2'桁までの文字列にする	':.2f'.format(x)
option: グラフの色を赤に設定する	color = 'red'
ヒストグラムの色をアイボリーに変更する	plt.hist(データ列, color='ivory')
日付時刻データがタイムスタンプデータより後ろか調べる	aDatetime > aDatetime2
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
rgbの左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
配列とリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ヒストグラムをダークレッド色で描画する	plt.hist(データ列, color='darkred')
配列とリストの散布図をプロットし、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
度数分布図のビン数を指定する	plt.hist(データ列, bins=区関数)
データフレームのカラムの分を見る	df[col].dt.minute
ダークバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
シアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
横棒グラフをパールゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
青い破線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ベージュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
数列とデータ列について散布図をプロットしてマーカーを▽に指定する	plt.plot(データ列x, データ列y, marker='v')
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
方程式として数式の変数の解を計算する	sympy.solve(e, z)
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
スクリプト名	sys.argv[0]
リストとイテラブルについての散布図に赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
option: アクアマリン色を使う	color = 'aquamarine'
データ列を100の位で四捨五入して、整数にする	ds.round(-2).astype(int)
文字を文字コードに変換する	ord(ch)
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
偽陰性を避けたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategray')
折れ線グラフの色をイエローグリーンに指定する	plt.plot(データ列x, データ列y, color='yellowgreen')
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
双方向キューの先頭にイテラブルの各データを追加する	deq.extendleft(iterable)
黒い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
行列の行列積	np.matmul(aArray, aArray2)
線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
双方向キューから最初の数値を取り除く	deq.remove(element)
タイムスタンプデータのタイムゾーン	aDatetime.timetz()
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
行列の転置行列	aArray.T
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
データフレームのNaNを最小値に指定する	df.fillna(df.min())
改行なしに文字列を表示する	print(value, end='')
ネイビー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
組の最初のn要素を捨てる	aTuple[n:]
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
ベクトルの列ごとの最小値	np.min(aArray, axis=0)
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
option: チョコレート色を使う	color = 'chocolate'
データフレームを'A'列によって小さい順に並べて更新する	df.sort_values(by='A', ascending=True, inplace=True)
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
小数点数の二進対数	math.log2(x)
多次元データを主成分分析を用いてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
一点鎖線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
MSEを計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
データフレームをサンプリングする	df.sample()
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
配列の和	aArray + aArray2
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
2つの列によってデータフレームを整列して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
option: フォントの色をビスクに指定する	color = 'bisque'
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
縦棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
辞書に要素を項目名として加える	aDict[key] = element
プログラムの実行を即座に終了する	sys.exit()
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
折れ線グラフの色をモカシンにセットする	plt.plot(データ列x, データ列y, color='moccasin')
option: ベクトルのデータ型を指定する	dtype = np.int
データフレームの欠損値をモードに設定する	df.fillna(df.mode().iloc[0])
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
横棒グラフをパウダーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='powderblue')
実数の平方根を求める	math.sqrt(x)
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
カウンタ同士で積集合演算する	aCounter & aCounter2
option: グラフの色をブランチドアーモンドに指定する	color = 'blanchedalmond'
x軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
茶色色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
year年をタイムスタンプに変換する	datetime.datetime(year=year, month=1, day=1)
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
データ列の折れ線グラフを三角印で描画する	plt.plot(データ列x, データ列y, marker='^')
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
nがn2以下、もしくは、n3以上か	n <= n2 or n >= n3
データフレームのリストカラムの欠損値を後の行の値に変更する	df[aList].fillna(method='bfill')
option: グラフを一点鎖線に指定する	linestyle = 'dashbot'
二つのリストから辞書を作成する	dict(zip(aList, aList2))
小数点数はNaNか調べる	math.isnan(x)
ヒストグラムをアイボリー色として描画する	plt.hist(データ列, color='ivory')
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
グリッド線を白くする	plt.grid(color='w')
データフレームのリストカラムの中にある文字列と日付データの数を数える	df[aList].isin([value, value2]).sum()
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
折れ線グラフのバツマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
点線に線グラフを指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
option: 青緑色を用いる	color = 'teal'
データ列の欠損値を50パーセンタイルに指定する	ds.fillna(ds.median())
bとn2から成るペア	(n, n2)
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
カウンタを辞書で更新する	aCounter.update(aDict)
データ列の推移を一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
リストをn個にビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
option: 色のアルファ値を指定する	alpha = 0.5
部分文字列で末尾から文字列を区切る	s.rsplit(sub)
マップのキーを要素に設定する	aDict[key] = element
option: フクシア色を用いる	color = 'fuchsia'
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
横棒グラフをダークシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
列によってによって降順にデータフレームを並べる	df.sort_values(by=column, ascending=False)
グラフで使うx座標にラベルを付ける	plt.xlabel('x軸ラベル')
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
option: ダークオーキッドにグラフの色を変更する	color = 'darkorchid'
ファイル名がJSONファイルかどうか調べる	filename.endswith('.json')
データフレームのNaNを最頻値にセットする	df.fillna(df.mode().iloc[0])
縦棒グラフをホワイトスモーク色として描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
データ列を丸める	ds.round()
データフレームを表示するとき、小数点以下をn桁に設定する	pd.set_option('precision', n)
辞書から項目名の値か、もしくは要素を得る	aDict.get(key, element)
y座標の目盛りを非表示にする	plt.yticks([])
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
xを整数に変換する	int(x)
データフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
イテラブルの長さnの順列	itertools.permutations(iterable, n)
配列の最大値	np.max(aArray)
両端キューをリストに変換する	list(deq)
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
▼印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
数式の微分を求める	sympy.diff(e)
カウンタを少ない順番に列挙する	aCounter.most_common()[::-1]
こんにちは世界と出力する	print('Hello World')
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
xを論理値に変換する	bool(x)
折れ線グラフの左三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
行列と同じ大きさの空の配列を作成する	np.empty_like(aArray)
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
両端キュー中の数値の位置	deq.index(element)
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
データフレームの列を100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
ファイルを文字コードtextで開く]	open(filepath, encoding=text)
折れ線グラフの丸印の線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: 配列のデータ型を指定する	dtype = np.int8
リストが空か調べる	len(aList) == 0
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
データフレームがどの程度、分散しているか見る	df.var()
データフレームの最頻値	df.mode()
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
ライトスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
正規表現に文字列全体を大文字・小文字を無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
データフレームの名前リストで指定されたカラムを削除する	df.drop(columns, axis=1)
グリッド線を赤くする	plt.grid(color='r')
マッピングのコピー	dict(aDict)
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
度数分布図でデータ列を可視化する	plt.hist(データ列)
option: 下三角印を描画する	marker = 'v'
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
データフレームを２つの列の値によって集約する	df.groupby(['A', 'B'])
リストを等量でビン数nとしてビニングする	pd.qcut(aList, n)
分類モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
rgbのバツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
２つのオブジェクトが同じ参照	obj is obj2
散布図に赤いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
nが3の倍数か調べる	n % 3 == 0
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
折れ線グラフにバツマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
option: 箱ひげ図を水平方向にする	vert = False
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
配列の列ごとの平均値を計算する	np.mean(aArray, axis=0)
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
データフレームの列を破壊的に消す	df.drop(column, axis=1, inplace=True)
データフレームの列の各データ値の出現数を求める	df[col].value_counts()
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
実数を切り上げて整数に変換する	math.ceil(x)
論理値型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int32)
option: マーカーの色をブラウンにする	markerfacecolor = 'brown'
ベクトルのユニークな要素	np.unique(aArray)
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
折れ線グラフの大バツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
option: グラフの色をシルバーに設定する	color = 'silver'
ヒートマップでデータフレームの列と列の相関行列を描画する	sns.heatmap(df[[column, column2]].corr())
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
グリッドを点線にする	plt.grid(linestyle='dotted')
データフレームの分散	df.var()
カテゴリで色分けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
モデルのバージョンを知る	version = 'wcce2022-0.1'
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
数値の積分を行う	sympy.integrate(e)
データフレームを列の値によってグループ化して、合計を求める	df.groupby(column).sum()
やわらかい青色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
キーが辞書上で未定義	key not in aDict
タイムスタンプデータを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
文字列の開始位置からと終了位置番目までの間に部分文字列が含まれない	s.find(sub, start, end) == -1
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
実数を複素数にする	complex(x)
文字列を最初の部分文字列で二分する	s.partition(sub)
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
縦向きに２つのデータフレームを連結する	pd.concat([df, df2], axis=0)
空の線形モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
option: 上三角マーカーを用いる	marker = '^'
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
リストとリストについての散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
二次元タプルをフラット化する	sum(aTuple)
疑似乱数を生成する	random.random()
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
ゲインズボロ色を用いてヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
2つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
二つのデータフレームを列をキーにして左結合する	pd.merge(df, df2, on=column, how='left')
option: 貝殻にグラフの色を設定する	color = 'seashell'
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
浮動小数点数の最小値	sys.float_info.min
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームの重複する行数を数える	df.duplicated().sum()
データフレームを百の位で丸める	df.round(-2)
タイムスタンプデータが何秒か知る	aDatetime.second
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
データフレームを列で集約する	df.groupby(column)
有理数モジュールを用いる	import fractions
散布図の▲マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
リストに要素を追加する	aList.append(element)
ピンク色でヒストグラムを描画する	plt.hist(データ列, color='pink')
ヒストグラムを青色を使って描画する	plt.hist(データ列, color='blue')
ダークオリーブグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
文字列の中で正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s)
散布図の左三角マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
n2がn以上、かつn3以下か確認する	n <= n2 and n2 <= n3
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
データ列の変遷を一点鎖線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列をゼロ埋めする	s.zfill(文字列幅)
ヒストグラムをサーモン色を用いて描画する	plt.hist(データ列, color='salmon')
option: グラフの色をグレーに設定する	color = 'grey'
配列の標準偏差	np.std(aArray)
散布図を黒い右三角マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
option: 下三角マーカーを描画する	marker = 'v'
ふたつのマップを合体する	aDict | aDict2
ホワイトスモーク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
グラフの補助目盛りを有効にする	plt.minorticks_on()
データ列が何時か確認する	ds.dt.hour
option: 読み込みモードを用いる	mode = 'r'
要素ひとつのタプルを得る	(element,)
ティール色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームのカラムのNaNを最小値に設定する	df[col].fillna(df[col].min())
option: グラフを実線に設定する	linestyle = 'solid'
文字列を空白を使って区切る	s.split()
標準入力から1文字だけ読む	sys.stdin.read(1)
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
縦棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
散布図に赤い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='r')
等しい量になるように配列をn個に分割する	pd.qcut(aArray, n)
プラム色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
ファイルをオープンして]、書き込みストリームを見る	open(filepath, mode='w')
線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
ファイルパスの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
折れ線グラフに▼印を使う	plt.plot(データ列x, データ列y, marker='v')
データ列が正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(データ列)
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
散布図の大バツマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
文字列を改行で分割し、文字列リストにする	s.splitlines()
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
rgbの四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの色をサーモンに指定する	plt.plot(データ列x, データ列y, color='salmon')
0からnまでの整数列	list(range(n+1))
整数のn乗	x ** n
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
データフレームを表示するとき、列数の最大値をnにする	pd.set_option('display.max_columns', n)
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
option: オーキッド色を用いる	color = 'orchid'
縦棒グラフを描き、、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
黒い線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
option: グラフの色をシャルトリューズにセットする	color = 'chartreuse'
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
グラフに用いる縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
データフレームの内の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
丸印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
数列と配列について散布図を描いてマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
データフレームのリスト列のpercentパーセンタイル	df[aList].quantile(percent/100)
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
グラフに鉛直方向の実線を設定する	plt.axvline(x=0, linestyle='solid')
真紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
ヒストグラムをロージーブラウン色として描画する	plt.hist(データ列, color='rosybrown')
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
option: グリーンイエロー色を使う	color = 'greenyellow'
ヒストグラムをミディアムブルー色を用いて描画する	plt.hist(データ列, color='mediumblue')
nが-9以上、9以下か	-9 <= n <= 9
データ列が何月か調べる	ds.dt.month
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
部分文字列を文字列の開始位置から探す	s.find(sub, start)
線グラフをオレンジ色として描画する	plt.plot(データ列x, データ列y, color='orange')
折れ線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
横棒グラフをプラム色として描画する	plt.barh(データ列x, データ列y, color='plum')
オリーブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
オブジェクトは集合クラスかどうか調べる	isinstance(obj, set)
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
データフレームの列の各データが何回出現するか確認する	df[col].value_counts()
リストと数列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
データフレームのカラムをカテゴリデータにする	df[col].astype(object)
日付データが日付データと同時	aDate == aDate2
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
option: 行列のデータ型を指定する	dtype = np.int32
今日が何月か知る	datetime.datetime.today().month
データフレームのリスト列のNaNを最頻値に指定する	df[aList].fillna(df[aList].mode().iloc[0])
散布図を丸印で描画する	plt.scatter(データ列x, データ列y, marker='o')
青緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
タイムスタンプデータを文字列を用いてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
option: 読み込むシートの名前をnamesに設定する	sheet_name = names
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームのリスト列のモード	df[aList].mode()
二つの整数最小公倍数	math.lcm(n, n2)
文字列を改行なしに表示する	print(value, end='')
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
ヒストグラムの色をホワイトにセットする	plt.hist(データ列, color='white')
回帰木分析を行う	model = sklearn.tree.DecisionTreeRegressor()
データフレームを関数によって集約して、列挙する	[(name, group) for name, group in df.groupby(関数)]
option: マルーン色を使う	color = 'maroon'
表データを列でグループ化し、基本統計量を求める	df.groupby(column).describe()
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
nが奇数か調べる	n % 2 == 1
散布図を紺色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
日付時刻データの曜日を整数で使う	aDatetime.weekday()
ヒストグラムの色をオーキッドに変更する	plt.hist(データ列, color='orchid')
赤いポイントマーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
バツ印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
オリーブ色を用いてヒストグラムを描画する	plt.hist(データ列, color='olive')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
プラム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
データ列の変化を色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
部分文字列で文字列を末尾から分割する	s.rsplit(sub)
option: 色をゴールデンロッドに設定する	color = 'goldenrod'
中央値でデータフレームの中の列を分割する	pd.qcut(df[col], 2)
リストとデータ列についてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
文字列の先頭から部分文字列を探す	s.find(sub)
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: 色をアクアマリンに設定する	color = 'aquamarine'
日付データからn日を減算する	aDate - datetime.timedelta(days=n)
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
文字列TSVファイルからn番目のカラムをインデックスとしてCSVファイルを読み込む	pd.read_csv(filename, index_col=n)
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
option: ▽印を用いる	marker = 'v'
データフレームのカラムの値は欠損値かどうか調べる	df[col].isna()
プロットの描画で色差別なくカラーパレットを用いる	sns.set(pallete='colorblind')
バイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
文字列全体がパターンにマッチするか見る	re.fullmatch(pattern, s)
要素が集合のメンバーでないか確認する	element not in aSet
辞書からキーの値を得る	aDict.get(key)
データフレームが正規分布からどの程度歪んでいるか確認する	df.kurt()
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
option: 色をミディアムオーキッドに設定する	color = 'mediumorchid'
アクア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
データフレームを各列と列の組み合わせ毎にグループ化して、合計を計算する	df.groupby([column, column2], as_index=False).sum()
option: 赤を使用する	color = 'red'
ファイルからバイナリ書き込みストリームを開いて]fとする	f = open(filepath, mode='wb')
折れ線グラフに青い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
分類結果のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
既存の行列を元に全要素が初期値の行列を作る	np.full_like(aArray, 初期値)
整数nを十六進表現に変換する	hex(n)
線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
柱状グラフを描画する	plt.hist(データ列)
ミディアムアクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムをホワイトスモーク色として描画する	plt.hist(データ列, color='whitesmoke')
項目名がマッピングに存在するか	key in aDict
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
option: ダークグレーにフォントの色を変更する	color = 'darkgray'
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
入力から二つの浮動小数数値を読む	A, B = map(float, input().split())
option: グラフの色をスノーにセットする	color = 'snow'
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
最大最小値を用いて標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
回帰分析をニューラルネットで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ミディアムスプリンググリーンにヒストグラムの色をセットする	plt.hist(データ列, color='mediumspringgreen')
ヒストグラムの色をカーキに指定する	plt.hist(データ列, color='khaki')
実数を百の位で四捨五入する	round(x, -2)
日付データが水曜日か	aDate.weekday() == 2
リストが少なくともひとつ真か調べる	any(aList)
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
n個の文字列があるリストを得る	[element] * n
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
データフレームを列によって並べて、新しいインデックスを加える	df.sort_values(columns).reset_index()
縦棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
ファイルをバイナリ書き込みモードを使ってオープンして]、fとする	f = open(filepath, mode='wb')
線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
データフレームの上n行	df.head(n)
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
データ列の歪度	ds.kurt()
縦棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
データフレームを'A'列と'B'列で昇順に並べ直す	df.sort_values(by=['A', 'B'], ascending=True)
option: フォントの色をライトグリーンに設定する	color = 'lightseagreen'
行列を転置する	aArray.T
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
文字列をエラーを無視してバイト列にする	s.encode(errors='ignore')
イテラブルを集合に変換する	set(iterable)
値を白色でプリントする	print(f'\033[37m{value}\033[0m')
辞書の全項目を消去する	aDict.clear()
大量のデータ列が正規分布かどうか調べる	scipy.stats.kstest(データ列, 'norm')
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
データフレームの列がxでない行を取り除く	df[df[column] == x]
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームのリストカラムの歪度を計算する	df[aList].kurt()
文字列を走査し、パターンにマッチするか見る	re.search(pattern, s)
データフレームに重複があるか調べる	df.duplicated()
散布図の大バツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
最大長のある両端キューを作る	collections.deque(maxlen=n)
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
option: ライトコーラル色を使用する	color = 'lightcoral'
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
グラフの用途を画面に設定する	sns.set(context='notebook')
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
数列を箱ひげ図にする	plt.boxplot(データ列)
データフレームのリストカラムを1000の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
ヒストグラムをミディアムターコイズ色として描画する	plt.hist(データ列, color='mediumturquoise')
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
seabornのデフォルトを適用する	sns.set()
option: NaNを先頭にする	na_position = 'first'
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
作画のx軸とy軸の比率を等しくする	plt.axis('equals')
nが5で割り切れるかどうか調べる	n % 5 == 0
オブジェクトのオブジェクト識別子を使う	id(obj)
リストとイテラブルの散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
配列を2次元1行に変形する	aArray.reshape(1, -1)
度数分布図を複数横に並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
日付時刻データは何時か知る	aDatetime.hour
折れ線グラフの左三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームの中で何行、重複するか見る	df.duplicated().sum()
データフレームをSJISでJSONLファイルに保存する	df.to_csv(filename, encoding='shift_jis')
線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
カラムをキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
option: オールドレース色を用いる	color = 'oldlace'
文字列を代数計算の変数に変換する	sympy.Symbol(s)
nがn2未満、もしくはn3以上か調べる	n < n2 or n >= n3
option: パウダーブルーを用いる	color = 'powderblue'
モデルの正確さを求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
データフレームの列とカラムの相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
折れ線グラフを青い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
連続した行列の作成する	np.arange(開始値, 終了値, 等差)
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
集合を更新不能なセットに変換する	frozenset(aSet)
両端キューに要素をエンキューする	deq.appendleft(element)
黒いポイントマーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
nの各桁の総和	sum(map(int, str(n)))
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
折れ線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='grey')
データフレームの列のユニークな値	df[col].unique()
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
正規表現モジュールをインポートする	import re
日付データにn日を加算する	aDate + datetime.timedelta(days=n)
option: 最大深さを設定する	maxdepth = n
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
集合からエラーなく値を取り除く	aSet.discard(element)
ファイル全体をリストとして読み込む	f.readlines()
線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
カラムの最頻値を求める	ds.mode()
実数のハイパボリック・サイン	math.sinh(x)
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
ヒストグラムの線種を破線に設定する	plt.hist(データ列, linestyle='dashed')
リストのn番目からn2番目の部分	aList[n:n2]
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
データフレームのカラムを小数点以下n桁で四捨五入する	df[col].round(n)
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
文字コードtextでファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
現在の日付時刻を求める	datetime.datetime.now()
リストの要素を昇順に並べ変える	sorted(aList, reverse=False)
黄緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
折れ線グラフをスカイブルー色を使って描画する	plt.plot(データ列x, データ列y, color='skyblue')
度数分布図の区間数を設定する	plt.hist(データ列, bins=区関数)
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
黒いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
option: マルーン色を用いる	color = 'maroon'
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
nが5の倍数か	n % 5 == 0
カウンタからマッピングを減らす	aCounter.subtract(aDict)
線形のクラス分類を行う	model = sklearn.linear_model.LogisticRegression()
実数の符号を同じにする	math.copysign(x, x2)
カラムを1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
option: 印を星に変更する	marker = '*'
ファイルからn文字読み込む	f.read(n)
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
小数点数を小数点数で割った剰余を求める	math.remainder(x, x2)
ダークサーモンにヒストグラムの色をセットする	plt.hist(データ列, color='darksalmon')
y軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
実数のk進対数	math.log(x, k)
既存のファイルパスをSJISを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
線グラフの色をパレットトルコイズにセットする	plt.plot(データ列x, データ列y, color='paleturquoise')
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
日付時刻データが何曜日か知る	aDatetime.weekday()
データフレームの列と列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[[column, column2]].corr())
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
横棒グラフをシーグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='seagreen')
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
日付データをn日前にする	aDate - datetime.timedelta(days=n)
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
縦棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
データフレームの中のカラムをn個にビンニングし、namesのラベルをつける	pd.cut(df[col], n, labels=names)
線グラフの色をシルバーに変更する	plt.plot(データ列x, データ列y, color='silver')
リストとリストについての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
折り返しをしない	pd.set_option('expand_frame_repr', False)
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
10を底とする浮動小数点数の対数	math.log10(x)
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
データフレームを列で昇順に並べる	df.sort_values(by=column, ascending=True)
option: 昇順にする	ascending = True
折れ線グラフの色をサンディーブラウンにセットする	plt.plot(データ列x, データ列y, color='sandybrown')
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
データフレームのカラムをダミー変数に変換する	pd.get_dummies(df[column])
データフレームのカラムの未入力値を直前の値に変更する	df[col].fillna(method='ffill')
データフレームのリストカラムのどの値が頻出か調べる	df[aList].mode()
三つの文字列を順にプリントする	print(value, value2, value3)
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
文字列が全て識別子名か調べる	s.isidentifier()
折れ線グラフの印をダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムを描画し合計を1にする	plt.hist(データ列, density=True)
モジュールを検索するパスを列挙する	sys.path
部分文字列が文字列中にない	sub not in s
今日は何曜日か知る	datetime.datetime.today().weekday()
データフレームの先頭	df.head()
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
散布図を黒い▲マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームのカラムは何秒か見る	df[col].dt.second
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
データフレームの相関行列スピアマン相関係数で	df.corr(method='spearman')
辞書のキーとその値を列挙する	aDict.items()
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
文字列のケースを整える	s.casefold()
列によってデータフレームをまとめたグループ	df.groupby(column)
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
データフレームを列でソートする	df.sort_values(by=column)
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
リストをワンホット・ベクトルに変換する	pd.get_dummies(iterable)
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
実数の逆双曲線余弦を算出する	math.acosh(x)
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
データフレームのデータ型の一覧	df.dtypes
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
option: カンマを区切りで使う	sep = ','
折れ線グラフの色を青緑に変更する	plt.plot(データ列x, データ列y, color='turquoise')
新しいロバスト分類器を作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームのカラムのタイムゾーンを東京にする	df[col].tz_convert('Asia/Tokyo')
ValueMapでデータフレームのリスト列をまとめて変更する	df[aList].replace(ValueMap)
グリッド線	plt.grid(linewidth=3.0)
最初のコマンド引数	sys.argv[1]
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
実数の仮数部	math.frexp(x)[0]
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
折れ線グラフの丸マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
データフレームから一番右側の列を除く	df[df.columns[:-1]]
本日の日付時刻	datetime.datetime.now()
乱数平均と標準偏差からを生成する	random.normalvariate(mu=0.5, sigma=0.2)
ベクトルの内積を調べる	np.dot(aArray, aArray2)
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
option: ペールグリーン色を使う	color = 'palegreen'
option: グラフの色をマゼンタに設定する	color = 'magenta'
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
データフレームのリストカラムの中に日付データと文字列があるかどうか調べる	df[aList].isin([value, value2])
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
文字列を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
散布図に赤い上三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='r')
最大長nの両端キューを列から生成する	collections.deque(iterable, maxlen=n)
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
真スーパーセット	aSet > aSet2
縦棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフを赤い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgreen')
option: データ型として整数型を使う	dtype = np.int
文字列の終了位置より前に部分文字列が含まれる	s.find(sub, 0, end) != -1
文字列がアルファベットか調べる	s.isalpha()
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
データフレームのNaNが含まれる部分に色を付ける	df.style.highlight_null()
縦棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
分類結果の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
アンティークホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
棒グラフをシャルトリューズ色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
折れ線グラフのポイントマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
カウンタ同士で∩	aCounter & aCounter2
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
縦棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
option: フォントの色をライトスカイブルーに設定する	color = 'lightskyblue'
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
リストと配列についての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
正規分布によるパーセント・ポイント関数を使用する	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームを関数によってまとめたグループを使う	df.groupby(関数)
印字を全部使う	string.printable
赤い四角マーカーを配列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
ケンドールでデータフレームの相関行列	df.corr(method='kendall')
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
タプルの先頭のn要素を取り除く	aTuple[n:]
データフレームから列を二つだけ選択する	df[[column, column2]]
折れ線グラフを半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
横棒グラフをダークサーモン色として描画する	plt.barh(データ列x, データ列y, color='darksalmon')
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか確認する	s.find(sub, start, end) == -1
ダークオーキッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
棒グラフをプラム色を用いて描画する	plt.bar(データ列x, データ列y, color='plum')
10を底とする小数点数の対数を計算する	math.log10(x)
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を求める	df.groupby([column, column2], as_index=False).max()
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
横棒グラフを描画し、、バーの縦幅をする	plt.barh(ラベル列, データ列, width=0.5)
アヤメのデータセットをロードする	sns.load_dataset('iris')
散布図をシエナ色を用いて描画する	plt.scatter(データ列x, データ列y, color='sienna')
双方向キューが空でないか	len(deq) != 0
データフレームの各グループごとの最小値を計算する	df.groupby(column).min()
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
データフレームの中の欠損値の合計を数える	df.isna().sum()
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
データ列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
データフレーム全体を行で昇順に並べ直す	df.sort_index(ascending=True)
option: ゴールデンロッド色を用いる	color = 'goldenrod'
配列のユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
横軸の目盛を表示しない	plt.xticks([])
option: 色をペールグリーンに設定する	color = 'palegreen'
現在のUNIXタイム	int(time.time())
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
列の各データが何回出現するか見る	ds.value_counts()
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
リストの要素をソートする	sorted(aList)
値がセットに含まれない	element not in aSet
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
文字列をコロンを用いて分割して、列挙する	s.split(':')
実数の逆双曲線正弦	math.asinh(x)
ゴーストホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
ヒストグラムの色をライトスチールブルーに指定する	plt.hist(データ列, color='lightsteelblue')
ピアソンの相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
表データのn行目を抽出する	df.loc[n]
パラメータが無限大に近づく時の数値の極限値を計算する	sympy.limit(e, z, oo)
数値を展開する	sympy.expand(e)
xが一桁の数か	-9 <= x <= 9
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
option: ダークオレンジを使用する	color = 'darkorange'
データフレームのカラムのタイムゾーンを文字列に変更する	df[col].tz_convert(s)
整数nの十六進文字列	hex(n)[2:]
文字列が全て数字	s.isdigit()
nとn2の商	n / n2
データフレームのリストカラムを正規表現patternで一度にreplに置換する	df[aList].replace(pattern, repl, regex=True)
最後の項目をマッピングから取り出す	aDict.popitem()
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
列でデータフレームを並べ直してインデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
イテラブルとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
パープルにヒストグラムの色を設定する	plt.hist(データ列, color='purple')
数式の変数に数式を代入する	e.subs(z, e2)
十六進文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
整数nを八進表現に変換する	oct(n)
インディゴ色でヒストグラムを描画する	plt.hist(データ列, color='indigo')
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
折れ線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
リストの文字列が最初に見つかるインデックス	aList.index(element)
n行をランダムに重複ありでデータフレームからサンプリングする	df.sample(n, replace=True)
縦棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
実数の双曲線正接の逆数を求める	math.atanh(x)
棒グラフをバイオレット色で描画する	plt.bar(データ列x, データ列y, color='violet')
option: マーカーの色を赤にする	markerfacecolor = 'red'
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
配列とデータ列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
リストとリストの散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
新しい文字列として文字列中の正規表現を置換する	re.sub(pattern, newsub, s)
折れ線グラフの色をライトシアンに指定する	plt.plot(データ列x, データ列y, color='lightcyan')
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
ヒストグラムをミディアムシアグリーン色として描画する	plt.hist(データ列, color='mediumseagreen')
ヒストグラムの色を淡いピンク色にセットする	plt.hist(データ列, color='lightpink')
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
実数の二乗	x ** 2
option: 四角マーカーを使う	marker = 's'
データフレームの列の一覧を見る	df.info()
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
折れ線グラフの色をダークオリーブグリーンにセットする	plt.plot(データ列x, データ列y, color='darkolivegreen')
円グラフでリストの割合を作図する	plt.pie(データ列, startangle=90)
カウンタ間でユニオン	aCounter | aCounter2
データフレームを各列と列の組み合わせ毎にグループ化して最小値を算出する	df.groupby([column, column2], as_index=False).min()
option: エンコーディングを文字コードtextに設定する	encoding = text
散布図をミディアムパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
文字列の先頭で複数行対応としてパターンにマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
赤い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='r')
option: 文字コードをBOM付きにセットする	encoding = 'utf_8_sig'
横棒グラフをブランチドアーモンド色として描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
散布図に赤い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: どのカラムもインデックスにしない	index_col = None
散布図を赤い大バツマーカーを用いて描く	plt.plot(データ列x, データ列y, marker='X', c='r')
option: バイナリモードを用いる	mode = 'rb'
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
実数の仮数	math.frexp(x)[0]
主成分分析で濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
ふたつの関係が真上位集合か調べる	aSet > aSet2
実数を切り下げる	math.floor(x)
散布図に右三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='>')
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
nをn2で割った余りをnにする	n %= n2
データフレームの指定した列を配列に変換する	df[column].values
option: パウダーブルー色を用いる	color = 'powderblue'
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図の左三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
文字列の右側から空白を除去する	s.rstrip()
option: マーカーの色をライムにする	markerfacecolor = 'lime'
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
option: グラフの色をスラグレーに設定する	color = 'slategrey'
散布図をライトグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
nが5で割り切れるか調べる	n % 5 == 0
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
ファイルが存在する	os.path.exists(filepath)
オリーブ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
整数nをn2分の1にする	n //= n2
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
文字列の中の複数行対応としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフに黒い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
データ列が正規分布に従うか調べる	scipy.stats.shapiro(データ列)
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
数値の展開を行う	sympy.expand(e)
option: ヘッダを自動的な連番に設定する	header = None
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
散布図に青い上三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
書式を使ってデータフレームのcollを日付データにする	pd.to_datetime(df[col], format='%Y-%m-%d')
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
ミディアムシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
データフレームのカラムの中に文字列が存在する	df[col].isin([value])
乱数シードをnで固定する	random.seed(n)
option: ライトゴールドロディイエローを使う	color = 'lightgoldenrodyellow'
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
データ列の値が欠損値か	ds.isna()
実数の逆双曲線余弦	math.acosh(x)
ヒストグラムと勾配ブースティングで回帰分析をする	model = sklearn.ensemble.HistGradientBoostingRegressor()
インデックスを用いてデータフレームをソートする	df.sort_index()
ふたつの集合のユニオン	aSet.union(aSet2)
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
文字列を最後の部分文字列で二分し、後半の文字列を見る	s.rpartition(sub)[-1]
オリーブ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
横棒グラフをダークバイオレット色として描画する	plt.barh(データ列x, データ列y, color='darkviolet')
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
データ列を正規表現patternで一度にreplに置き換える	ds.replace(pattern, repl, regex=True)
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
option: ダークグリーンにグラフの色を設定する	color = 'darkgreen'
数式の変数にnを代入する	e.subs(z, n)
option: シーグリーンにグラフの色をする	color = 'seagreen'
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
カウンタの項目一覧を見る	aCounter.keys()
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
データフレームのそれぞれのグループの平均値	df.groupby(column).mean()
横棒グラフをリネン色として描画する	plt.barh(データ列x, データ列y, color='linen')
両端キューの先頭から要素を取り除く	deq.popleft()
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
リストと数列についての散布図に赤いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
縦棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
option: カラムの名前をnamesに設定する	header = names
option: バイナリ書き込みモードを使う	mode = 'wb'
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
線グラフをミディアムシアグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
特異値分解でパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
点線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
空の勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
データフレームのカラムを散布図で可視化して、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
散布図にrgbの右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: グラフの色を青紫に設定する	color = 'violet'
真下位集合	aSet < aSet2
nからn2を引く	n - n2
ヒストグラムを黄色色として描画する	plt.hist(データ列, color='yellow')
グラフの用途をポスターにセットする	sns.set(context='poster')
option: チョコレートを使う	color = 'chocolate'
横棒グラフをベージュ色として描画する	plt.barh(データ列x, データ列y, color='beige')
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
半透明の実線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
データフレームを'A'列によって並べ直して更新する	df.sort_values(by='A', inplace=True)
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
実線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
プロットの色を明るくする	sns.set(pallete='bright')
分類モデルのF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
折れ線グラフのバツ印を赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
列の欠損値を最大値に設定する	ds.fillna(ds.max())
要素がセットのメンバーに含まれないか調べる	element not in aSet
長さnのリスト	[0] * n
文字列を紫色でプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
折れ線グラフの星印を赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
option: マーカーを▽に指定する	marker = 'v'
option: 星印を用いる	marker = '*'
データフレームを二つの列の値ごとにグループ化し、、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
ネイピア数	math.e
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
クラスのサブクラスか	issubclass(サブクラス, クラス)
今日の日付	datetime.date.today()
rgbの丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ライトコーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
アイボリー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
自然数個のものからk個取り出した時の並べ方	math.perm(n, k)
option: 書き込みモードを使う	mode = 'w'
棒グラフをやわらかい青色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
分数を用いる	import fractions
option: 箱ひげ図に平均を加える	showmeans = False
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
キューのstart番目からend番目までの部分要素	collections.deque(itertools.islice(deq, start, end))
option: ビスク色を使用する	color = 'bisque'
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
データ列の変遷を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
最頻値でデータフレームのカラムの欠損値を補う	df[col].fillna(df[col].mode().iloc[0])
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
ヒストグラムと勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
大量のデータ列が正規分布か仮説検定する	scipy.stats.kstest(データ列, 'norm')
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
option: ダークシアン色を用いる	color = 'darkcyan'
クラス分類をブースティングで行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
option: 色を暗い赤に設定する	color = 'darkred'
データフレームを列毎にグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
ピンク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
文字列の開始位置からと終了位置番目までの範囲に部分文字列が含まれないか	s.find(sub, start, end) == -1
ホワイトスモークにヒストグラムの色を変更する	plt.hist(データ列, color='whitesmoke')
ファイルを読み込みできるように開く]	open(filepath, mode='r')
折れ線グラフをインディアンレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='indianred')
文字列がパターンにマッチさせる	re.match(pattern, s)
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
option: ブランチドアーモンド色を使用する	color = 'blanchedalmond'
棒グラフをスラグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='slategrey')
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ライトスチールブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
コーンズシルク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
数値を部分分数として展開する	sympy.apart(e)
データフレームのカラムの分散	df[col].var()
二つの文字列を文字列で区切って出力する	print(value, value2, sep=s)
棒グラフをパウダーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='powderblue')
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
文字列を部分文字列で区切る	s.split(sub)
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
棒グラフをアリスブルー色を使って描画する	plt.bar(データ列x, データ列y, color='aliceblue')
黒色で文字列を表示する	print(f'\033[30m{value}\033[0m')
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
プロットに鉛直方向の破線をつける	plt.axvline(x=0, linestyle='dashed')
ダークカーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
文字列を部分文字列で分けたときの残りの文字列を取り出す	s.partition(sub)[-1]
浮動小数点数を実数で除算して切り捨てる	x // y
横棒グラフをイエローグリーン色として描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
データ列の分	ds.dt.minute
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
データフレームの列と列の相関行列ピアソンで	df[[column, column2]].corr(method='pearson')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
ヒストグラムをプラム色として描画する	plt.hist(データ列, color='plum')
データフレームのカラムの母標準偏差を求める	df[col].std(ddof=0)
nが配列のひとつか	n in aArray
ファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
切り捨てながらnをn2分の一にする	n //= n2
ターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
右三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
リストを配列に変換する	np.array(aList)
データフレームの列をインデックスに設定する	df.set_index(column)
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
データ列を等しい量になるようにビン数nでビン分割する	pd.qcut(ds, n)
グラフにx=0の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
書式をargsを引数として文字列整形する	formatText.format(*args)
多次元データをMSDで濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
縦棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
ふたつの集合は集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
横棒グラフをカーキ色として描画する	plt.barh(データ列x, データ列y, color='khaki')
データフレームを表示するとき、表示できる最大行数をnに変更する	pd.set_option('display.max_rows', n)
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
散布図をrgbの右三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
複素数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=bool)
nとn2の積を求める	n * n2
既存の配列を元に全要素が0の配列を作る	np.zeros_like(aArray)
データ列の秒を見る	ds.dt.second
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
折れ線グラフの色を真紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
横棒グラフをオリベドラブ色として描画する	plt.barh(データ列x, データ列y, color='olivedrab')
カーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
カラムをキーとして２つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
option: 追加モードを使う	mode = 'a'
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
y軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
Pandasで、データフレームのcollを書式で日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
nから無限に数え上げるする	itertools.count(start=n)
データフレームを列でソートし、、下の方n件を取り出す	df.sort_values(columns).tail(n)
横棒グラフを赤色を用いて描画する	plt.barh(データ列x, データ列y, color='red')
option: パパイヤウィップを使う	color = 'papayawhip'
option: グラフの色をインディゴに設定する	color = 'indigo'
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
マッピングをネスト化する	collections.ChainMap(aDict)
タプルの平均値を計算する	sum(aTuple)/len(aTuple)
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
グラフのグリッドを暗くする	sns.set(style='darkgrid')
データフレームの先頭n行	df.head(n)
文字列を全て小文字に変換する	s.lower()
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
データ列を２つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
文字列を改行で区切る	s.splitlines()
rgbの星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームを複数の列の値にグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
nがn2より大きいか調べる	n > n2
オリベドラブにヒストグラムの色を設定する	plt.hist(データ列, color='olivedrab')
文字列が小文字かどうか調べる	s.islower()
等量で配列をn個に分割する	pd.qcut(aArray, n)
ラインを青い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
散布図に左三角印を加える	plt.scatter(データ列x, データ列y, marker='<')
option: ダークバイオレットを使う	color = 'darkviolet'
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
option: パープルを使用する	color = 'purple'
変数名を項目名として、マップ	dict(name=element)
グラフのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
フィッシャーの線形判別分類の準備をする	model = sklearn.manifold.TSNE(n_components=n)
分数の分子	q.numerator
列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
グラフの中に枠なしの補足を表示する	plt.legend(frameon=False)
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
タイムスタンプデータにn週間分、加える	aDatetime + datetime.timedelta(weeks=n)
右にn個分両端キューの値をローテンションする	deq.rotate(n)
option: 小麦色を使用する	color = 'wheat'
option: フォントの色をハニーデューに設定する	color = 'honeydew'
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
option: グラフの色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
ロイヤルブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
浮動小数点数のn乗して実数による余りを求める	pow(x, n, y)
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
データフレームで何行、重複するか確認する	df.duplicated().sum()
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームの中の列と列に重複があれば、消す	df.drop_duplicates(subset=[column, column2])
option: グラフの色をピンクにセットする	color = 'pink'
第二コマンド引数	sys.argv[1]
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
t-SNEとして濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
ダークバイオレットにヒストグラムの色を指定する	plt.hist(データ列, color='darkviolet')
棒グラフをラベンダー色を用いて描画する	plt.bar(データ列x, データ列y, color='lavender')
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
最大値でデータフレームの欠損値を埋める	df.fillna(df.max())
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
y座標だけグリッド線	plt.grid(axis='y')
TSVファイルを用いてデータフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
option: イエローグリーンを使用する	color = 'yellowgreen'
カラーコードとして折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
棒グラフをミディアムブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumblue')
マゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
配列のユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
オレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
二つのリストの積集合	list(set(aList) & set(aList2))
n進文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
option: スラグレー色を使用する	color = 'slategrey'
リストを縦棒グラフにする	plt.bar(ラベル列, データ列)
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
サポートベクターマシンとしてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
オブジェクトから属性を取り除く	delattr(obj, プロパティ名)
データフレームの欠損値が含まれる箇所を色付けする	df.style.highlight_null()
オレンジレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
タプルとタプルを連結する	aTuple + aTuple2
データフレームのカラムのNaNを最大値で埋める	df[col].fillna(df[col].max())
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
黒い左三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
文字列をアンダーライン付き化する	f'\033[4m{value}\033[0m'
データフレームの内容を調べる	df.head()
現在が何月か知る	datetime.datetime.today().month
散布図の下三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
文字列のn番目	s[n]
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
要素が集合のメンバーでない	element not in aSet
集合から要素を全て除く	aSet.clear()
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
両端キュー中の要素をカウントする	deq.count(element)
option: 決定木の最大深さを設定する	maxdepth = n
option: パープルにフォントの色を設定する	color = 'purple'
t-SNEを用いて多次元データをパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームのリスト列の欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
エクセルデータファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
今日の年数	datetime.datetime.today().year
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
３つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
散布図の右三角印を赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
辞書の全項目をクリアする	aDict.clear()
インタプリタの再帰の上限	sys.getrecursionlimit()
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
横軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
目盛線	plt.grid(linestyle='--')
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
nを半分にする	n /= 2
散布図を耐火レンガ色を用いて描画する	plt.scatter(データ列x, データ列y, color='firebrick')
1行から二つの浮動小数数値を読む	A, B = map(float, input().split())
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
実数を整数に変換する	int(x)
データフレームから指定した列を選ぶ	df[[column]]
グラフに目盛線を入れる	plt.grid(True)
option: 右三角マーカーを使う	marker = '>'
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
折れ線グラフを耐火レンガ色として描画する	plt.plot(データ列x, データ列y, color='firebrick')
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
データフレームから型リストのデータ型の列を除外する	df.select_dtypes(exclude=typeList)
線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
option: フォントの色をパレットトルコイズに設定する	color = 'paleturquoise'
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
option: グラフの種類を実線に設定する	linestyle = 'solid'
ヒストグラムの色を真紅に設定する	plt.hist(データ列, color='crimson')
データフレームの中に文字列が存在する	df.isin([value])
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
option: ライトイエローにグラフの色を設定する	color = 'lightyellow'
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
実数のcosを算出する	math.cos(x)
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
黄色い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
ファイルからの入力ストリームを求める	open(filepath)
nが負の整数か調べる	n < 0
ヒートマップでデータフレームの相関行列をグラフ化する	sns.heatmap(df.corr())
データフレームの列をドロップして更新する	df.drop(column, axis=1, inplace=True)
赤い四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
リストが空でないか判定する	len(aList) != 0
カテゴリ別で色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
option: 色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
タイムスタンプデータの時間数を見る	aDatetime.hour
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
棒グラフをイエローグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
データ列と配列の散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
n2分のnを求める	n / n2
正接	math.tan(x)
option: グラフの色をダークターコイズにセットする	color = 'darkturquoise'
グラフの色を色差別なくする	sns.set(pallete='colorblind')
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
nが一桁の整数かどうか調べる	-9 <= n <= 9
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
option: グラフの色をターコイズに設定する	color = 'turquoise'
データフレームを列で並べて、新しい行を加える	df.sort_values(columns).reset_index()
n2がnより大きく、かつ、n3未満かどうか確認する	n < n2 and n2 < n3
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
文字列の大文字小文字を変換する	s.casefold()
option: 小麦色色を使う	color = 'wheat'
データフレームを関数の値ごとにグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
データフレームの25パーセンタイルを求める	df.quantile(0.25)
マゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
rgbの四角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの線種を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
グラフを表示する	plt.show()
ミディアムシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームのインデックスの名前を一度に、nameからname2に付け直す	df.rename(index={name: name2})
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
黒い右三角マーカーをデータ列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
グラフにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
文字列を空白で区切り、、文字列リストに変換する	s.split()
現在の日数	datetime.datetime.today().day
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgray')
option: グラフの色をライトイエローに変更する	color = 'lightyellow'
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
タプルの各値を関数に適用した結果で並べる	sorted(aTuple, key=func)
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: グラフのラインスタイルを点線に設定する	linestyle = 'dotted'
散布図の星印を青色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
データ列のpercentパーセンタイル	ds.quantile(percent/100)
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
上限nの両端キューを作る	collections.deque(maxlen=n)
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
option: ペルー色を用いる	color = 'peru'
データフレームを1000の位で四捨五入して、整数型にする	df.round(-3).astype(int)
線グラフを点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームから重複したデータをドロップして、更新する	df.drop_duplicates(inplace=True)
散布図に大バツマーカーを加える	plt.scatter(データ列x, データ列y, marker='X')
データフレームのカラムの各値が何回出現するか見る	df[col].value_counts()
リストの全要素をクリアにする	aList.clear()
タプルを順序付けする	enumerate(aTuple)
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
データ列の推移を半透明の点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
スチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
シーグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
散布図のマーカーを▼にする	plt.scatter(データ列x, データ列y, marker='v')
文字列は印字できるかどうか調べる	s.isprintable()
棒グラフの色をバイオレットにする	plt.bar(データ列x, データ列y, color='violet')
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
文字列が全て空白からなるか調べる	s.isspace()
option: スラグレー色を用いる	color = 'slategrey'
折れ線グラフの色をオールドレースに変更する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームの列を削除して、更新する	df.drop(column, axis=1, inplace=True)
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
option: スタイルを破線に設定する	linestyle = 'dashed'
データ列を千の位で丸める	ds.round(-3)
option: 書き込みモードを用いる	mode = 'w'
option: ミッドナイトブルーを用いる	color = 'midnightblue'
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
配列とリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
何回まで再帰ができるかを知る	sys.getrecursionlimit()
画面用にプロットを設定する	sns.set(context='notebook')
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
ユニークな値を要素とする配列を求める	np.unique(aArray)
列をキーとして2つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
option: グラフの色をライムに設定する	color = 'lime'
赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
黄色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
ファイルを読み込みモードで開く]	open(filepath, mode='r')
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
オプションで、標準出力を出力にする	file = sys.stdout
リストから配列を作成する	np.array(aList)
列でデータフレームをグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
折れ線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
RANSACでクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
今日の曜日を求める	datetime.datetime.today().weekday()
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
散布図の下三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
xを文字列に変換する	str(x)
整数nを2進表現に変換する	bin(n)
option: 色をリネンに設定する	color = 'linen'
option: グラフの色をローングリーンに指定する	color = 'lawngreen'
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
データフレームを列の値によってグループ化し、、それぞれのグループ毎の最小値を求める	df.groupby(column).min()
option: ミディアムアクアマリンを使う	color = 'mediumaquamarine'
チョコレート色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
option: ポイントマーカーを加える	marker = '.'
数式の変数についてのn階微分を行う	sympy.diff(e, z, n)
option: マーカーの色をやわらかい青にする	markerfacecolor = 'cornflowerblue'
補足をベストな位置に表示する	plt.legend(loc='best')
JSONファイルのfをデータに変換する	json.load(fin)
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
モデルの訓練を開始する	model.fit(説明変数, 目的変数)
nからn2までのstepごとによるスライス	slice(n, n2, step)
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
キューのn番目に値を途中追加する	deq.insert(n, element)
リストを等しい量になるようにn個にビン分割する	pd.qcut(aList, n)
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
要素が辞書の値として含まれているか調べる	element in aDict.values()
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
数のn乗して実数による余り	pow(x, n, y)
散布図のマーカーの太さを変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
xの小数点以下'4'桁の文字列にする	':.4f'.format(x)
文字列モジュールをインポートする	import string
線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
2つの文字列をスラッシュで区切って表示する	print(value, value2, sep='/')
列からn個、ランダムに選ぶ	random.choices(iterable, k=n)
option: グラフの色をパールゴールデンロッドに変更する	color = 'palegoldenrod'
散布図をベージュ色を使って描画する	plt.scatter(データ列x, データ列y, color='beige')
ユーザの入力を整数として受け取る	int(input())
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
オブジェクトのポインタを使う	id(obj)
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
クラス分類をサポートベクターマシンでする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
両端キューの最後を使う	deq[-1]
ビン数nを用いてデータフレームの中の列をビン分割する	pd.cut(df[col], n)
異なる列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
列をリストを境界値として分割する	pd.cut(ds, aList)
変数がマイナス無限大に近づく際の数式の極限値を求める	sympy.limit(e, z, -oo)
タプルの各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
文字列が識別子名か調べる	s.isidentifier()
シスル色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
数に実数を掛ける	x * y
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
配列と配列の散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
option: グラフの色をアイボリーに設定する	color = 'ivory'
xのハッシュ値	hash(x)
ヒストグラムの色をパウダーブルーに指定する	plt.hist(データ列, color='powderblue')
文字列を特殊文字も含め小文字に変換する	s.casefold()
散布図のマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
JSONLファイルにデータフレームを書き込む	df.to_csv(filename, sep='\t')
配列の累積和	np.cumsum(aArray)
実行結果を黒色にする	f'\033[30m{value}\033[0m'
パレットトルコイズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
データフレームのn行目をドロップして、インプレイスする	df.drop(n, axis=0, inplace=True)
x,y,zをそれぞれn,n2,n3に指定する	x, y, z = n, n2, n3
線グラフの色をフォレストグリーンに指定する	plt.plot(データ列x, データ列y, color='forestgreen')
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
データフレームのカラムを型に変換する	df[col] = df[col].astype(ty)
option: ホットピンク色を使用する	color = 'hotpink'
分子n分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
空のセットを作る	set()
ミディアムスレートブルーにヒストグラムの色をする	plt.hist(データ列, color='mediumslateblue')
データフレームを'A'列と'B'列でソートする	df.sort_values(by=['A', 'B'])
折れ線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
グラフ中のフォントを変更する	sns.set(font=フォント名)
マッピングの値を列挙する	aDict.values()
オブジェクトはあるクラスのインスタンス	isinstance(obj, クラス)
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームの中の欠損値を削除する	df.dropna()
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
散布図のクロスマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
データ列を箱髭図にする	plt.boxplot(データ列)
グラフにx=0の破線を設定する	plt.axvline(x=0, linestyle='dashed')
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームから散布図を作り回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
バイナリモードでファイルパスをオープンする]	open(filepath, mode='rb')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
線グラフを青紫色として描画する	plt.plot(データ列x, データ列y, color='violet')
ライトサーモン色でヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
ファイルが存在しないか確認する	not os.path.exists(filepath)
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
option: 印を右三角に変更する	marker = '>'
まとめてデータフレームの値をValueMapで置き換える	df.replace(ValueMap)
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
option: グラフの色をモカシンに設定する	color = 'moccasin'
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
リストとデータ列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
リストの散らばりを描画する	plt.scatter(データ列x, データ列y)
データフレームの中のカラムと列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
文字列の先頭から部分文字列を取り除く	s.removeprefix(sub)
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
折れ線グラフのダイアモンドマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
正規表現に大文字・小文字を無視して文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
集合に値を追加する	aSet.add(element)
タイムスタンプデータの年を使う	aDatetime.year
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
真紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
小さい順に二つの列によって破壊的にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
標準入力	sys.stdin
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
スチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
タイムスタンプデータと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
タイムスタンプデータは何秒か知る	aDatetime.second
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
データ列の分散	ds.var()
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
MeanSquaredErrorを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
キーが辞書上で定義済みか判定する	key in aDict
データフレームをJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
リスト中の最初の文字列を探す	aList.index(element)
ダークオリーブグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
青色で実行結果をプリントする	print(f'\033[34m{value}\033[0m')
データフレームを表示するときヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
散布図の菱形マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
サンディーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
黒い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
ラベンダーブラッシュ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
option: スラッシュをセパレータで使う	sep = '/'
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
棒グラフをブランチドアーモンド色として描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
ゴールド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
リストから文字列を取り除く	aList.remove(element)
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
ASCII限定として正規表現を事前にコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームのカラムを100の位で丸めて、整数にする	df[col].round(-2).astype(int)
棒グラフをライトシアン色として描画する	plt.bar(データ列x, データ列y, color='lightcyan')
エクセルファイルファイルからn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
ブルーバイオレットにヒストグラムの色を変更する	plt.hist(データ列, color='blueviolet')
サーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
データフレームの列の尖度を求める	df[col].skew()
スクリプトの名前	sys.argv[0]
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
Pythonパスにディレクトリを追加する	sys.path.append(dir)
暗い赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
配列としてデータフレームの指定された列を選ぶ	df[column].values
キーが辞書に存在するか調べる	key in aDict
ライトグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
黒いグリッド線を引く	plt.grid(color='k')
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
現在のミリ秒	int(time.time() * 1000)
リストの末尾に文字列を加える	aList.append(element)
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
散布図の色をバイオレットにする	plt.scatter(データ列x, データ列y, color='violet')
文字列をISO書式で日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
スピアマン相関係数でデータフレームのリストカラムの相関行列	df[aList].corr(method='spearman')
回帰分析をバギングで行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
新しい回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
リストから行列を作成する	np.array(aList)
横棒グラフをデピンク色として描画する	plt.barh(データ列x, データ列y, color='deeppink')
ダークサーモンにヒストグラムの色を指定する	plt.hist(データ列, color='darksalmon')
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
折れ線グラフをシルバー色を用いて描画する	plt.plot(データ列x, データ列y, color='silver')
縦棒グラフをカーキ色として描画する	plt.bar(データ列x, データ列y, color='khaki')
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
option: アクア色を使う	color = 'aqua'
エポック秒をタイムスタンプに変換する	datetime.datetime.fromtimestamp(timestamp)
スタッキングとして回帰分析を行う	sklearn.ensemble.StackingRegressor()
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
二つのデータフレームを列'A'と列'B'をキーにしてジョインする	pd.merge(df, df2, left_on='A', right_on='B')
データフレームの中のカラムと列に重複があれば、消す	df.drop_duplicates(subset=[column, column2])
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
シーケンスから重複を取り除く	set(iterable)
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
空列を得る	[]
部分文字列が文字列の開始位置からと終了位置までの間に含まれないか調べる	s.find(sub, start, end) == -1
リストとリストについて散布図を描画し、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
縦棒グラフをインディアンレッド色として描画する	plt.bar(データ列x, データ列y, color='indianred')
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
二つのデータフレームを異なる列をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
リストの各値を関数に適用した結果で並べ変える	sorted(aList, key=func)
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
2つの文字列が等しくない	s != s2
データフレームのカラムの値をValueMapで置換する	df[col].replace(ValueMap)
space	' '
空列を作る	[]
ヒストグラムをダークグリーン色を用いて描画する	plt.hist(データ列, color='darkgreen')
線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
文字列から部分文字列を取り除く	s.replace(sub, '')
option: ライトスレイグレー色を使う	color = 'lightslategrey'
書式をargsを引数としてフォーマットする	formatText.format(*args)
線グラフを青い一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
配列をビン数nでビニングする	pd.cut(aArray, n)
２次元リストの転置行列	[list(x) for x in list(zip(*aList))]
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
ダークオリーブグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkolivegreen')
option: ブール型を使う	dtype = np.int32
グラフで使える色名の一覧を見る	matplotlib.colors.cnames
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
データフレームの第三四分位数	df.quantile(0.75)
データフレームのカラムの要約統計量	df[col].describe()
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
オブジェクトのプロパティを値に設定する	setattr(obj, プロパティ名, 値)
データ列とリストについての散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
オブジェクトは文字列型か調べる	isinstance(obj, str)
option: フォントの色をオーキッドに設定する	color = 'orchid'
真	True
データフレームのカラムのNaNを平均値に設定する	df[col].fillna(df[col].mean())
折れ線グラフの大バツ印の大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
データフレームのカラムのNaNを50パーセンタイルに設定する	df[col].fillna(df[col].median())
ふたつの集合の差を求める	aSet.difference(aSet2)
グラフで利用可能な色の一覧	matplotlib.colors.cnames
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
ミディアムオーキッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
option: フォントの色をダークグレーに変更する	color = 'darkgrey'
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
カウンタ間で∪演算する	aCounter | aCounter2
折れ線グラフの色をグリーンイエローに変更する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームの列の歪度	df[col].kurt()
xを文字列に変換してファイルに書き込む	f.write(str(x))
散布図をドジャーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
ミディアムスプリンググリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: 分割記号をスラッシュにする	sep = '/'
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
オプションで、標準エラーを使う	file = sys.stderr
データフレームの中の列を等量でビン数nとして分割する	pd.qcut(df[col], n)
イテラブルを多重集合にする	collections.Counter(iterable)
文字列内にひとつでも小文字が含まれるかどうか調べる	any(c.islower() for c in s)
リストの要素を取り除く	aList.clear()
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
デックの末尾を使う	deq[-1]
白色で文字列をプリントする	print(f'\033[37m{value}\033[0m')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
文字列中のタブ文字をn個の空白に置き換える	s.expandtabs(tabsize=n)
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
2次元タプルをフラット化する	sum(aTuple)
パパイヤウィップ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
最大長nの両端キューを作る	collections.deque(maxlen=n)
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
n進文字列をバイナリにする	int(s, n).to_bytes(length=bytesize, byteorder='big')
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
実数から整数を引く	x - y
リスト内の要素が少なくともひとつ真か調べる	any(aList)
多い順番にカウンタをリストとして得る	aCounter.most_common()
option: フォントの色をミディアムターコイズに設定する	color = 'mediumturquoise'
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
棒グラフをコーンズシルク色を使って描画する	plt.bar(データ列x, データ列y, color='cornsilk')
year年month月day日hour時の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
散布図の上三角マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ファイル全体を行単位で分割して読み込む	f.readlines()
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
配列をリストを境界値として分割する	pd.cut(aArray, aList)
真部分集合か	aSet < aSet2
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
散布図の右三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
列のユニークな要素	ds.unique()
行列式	np.linalg.det(aArray)
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
option: プラム色を使う	color = 'plum'
リストと数列について散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
タプルの末尾を捨てる	aTuple[:-1]
行列を変形する	aArray.reshape(行数, 列数)
option: パールバイオレットレッド色を使用する	color = 'palevioletred'
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
データ列を分割数nでビニングする	pd.cut(ds, n)
折れ線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
最大値・最小値の範囲として一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
option: ライトグリーンにフォントの色を指定する	color = 'lightgreen'
option: 符号なし８ビット整数型を用いる	dtype = np.uint8
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
リストをボックスチャートにする	plt.boxplot(データ列)
ヒストグラムの色をチョコレートに変更する	plt.hist(データ列, color='chocolate')
ヒストグラムを破線で描く	plt.hist(データ列, linestyle='dashed')
カテゴリ列で色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
散布図に菱形マーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
データフレームの列はどの程度、分散しているか見る	df[col].var()
タイムスタンプデータは日付時刻データより前か	aDatetime < aDatetime2
リストをナンバリングする	enumerate(aList)
値を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
日付データの年数	aDate.year
改行なしに２つの文字列をプリントする	print(value, value2, end='')
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
縦棒グラフをアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='aquamarine')
二つの変数を出力する	print(value, value2)
データフレームのリストカラムの値は欠損値	df[aList].isna()
文字列の開始位置から終了位置の範囲で部分文字列をカウントする	s.count(sub, start, end)
グリッド線	plt.grid(linestyle='--')
箱髭図を２つ並べて描く	plt.boxplot([データ列, データ列])
リストのn番目に文字列を差し込む	aList.insert(n, element)
データフレームが重複している	df.duplicated()
２つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
文字列はタイトルケースか調べる	s.istitle()
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
黒いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
縦棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
縦棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
折れ線グラフの色をトマトにセットする	plt.plot(データ列x, データ列y, color='tomato')
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
option: オレンジを使う	color = 'orange'
クラス分類をガウス過程として行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
折れ線グラフの色をミディアムターコイズに指定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
横棒グラフをゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='goldenrod')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
小数点数以下の最大の整数	math.floor(x)
イエローグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
データ列の値が欠損値か調べる	ds.isna()
文字列全体を正規表現に複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
イテラブルのコンビネーションを求める	itertools.combinations(iterable, n)
日付データからn分引く	aDate - datetime.timedelta(minutes=n)
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
ヒストグラムをライトスカイブルー色を用いて描画する	plt.hist(データ列, color='lightskyblue')
文字列は文字列より辞書順で後か調べる	s > s2
ヒストグラムの色を茶色に変更する	plt.hist(データ列, color='brown')
双方向キューの先頭	deq[0]
現在の作業ディレクトリ	os.getcwd()
JSON形式の文字列をデータにする	json.loads(b.decode('unicode-escape'))
標準入力を	sys.stdin
ロージーブラウン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
オプションで、標準エラーを出力にする	file = sys.stderr
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
option: フォントの色をダークスラテグレーに設定する	color = 'darkslategray'
option: ロイヤルブルーにグラフの色を設定する	color = 'royalblue'
文字列中に非数字が含まれる	any(not c.isdigit() for c in s)
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
ひとつでも非英数字が文字列中にあるか	any(not c.isalnum() for c in s)
マゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='magenta')
マッピング上でキーが定義済みかどうか調べる	key in aDict
ミディアムアクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
データフレームを表示するとき、表示可能な列数を変更する	pd.set_option('display.max_columns', n)
ライトグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
Pandasでタイムスタンプのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
ベクトルの平均値	np.mean(aArray)
線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
小数点数の逆双曲線正接を求める	math.atanh(x)
option: n番目のカラムをインデックスに設定する	index_col = n
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフの色をライムグリーンに変更する	plt.plot(データ列x, データ列y, color='limegreen')
オレンジレッドにヒストグラムの色をセットする	plt.hist(データ列, color='orangered')
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
ヒストグラムの色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
カテゴリデータをベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
ヒストグラムをアイボリー色を用いて描画する	plt.hist(データ列, color='ivory')
横棒グラフをグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='grey')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
データ列の平均値	ds.mean()
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
ライムグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
折れ線グラフの色をミディアムターコイズに変更する	plt.plot(データ列x, データ列y, color='mediumturquoise')
正則化付き回帰分析を行う	model = sklearn.linear_model.ElasticNet()
データフレームを'A'列によって降順に破壊的に並べ直す	df.sort_values(by='A', ascending=False, inplace=True)
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
文字列をセパレータで区切って、列挙する	s.split(sep)
大文字・小文字を無視して正規表現で文字列を分ける	re.split(pattern, s, flags=re.IGNORECASE)
組の最初のn要素を除く	aTuple[n:]
横棒グラフをライトシアン色として描画する	plt.barh(データ列x, データ列y, color='lightcyan')
データフレームのリストカラムを丸めて整数型にする	df[aList].round().astype(int)
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
ライトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
データフレームを'A'列によってまとめたグループ	df.groupby('A')
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
数列とリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ふたつの関係が部分集合か調べる	aSet.issubset(aSet2)
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ヒストグラムをラベンダー色を用いて描画する	plt.hist(データ列, color='lavender')
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
データフレームの各グループごとの標準偏差	df.groupby(column).std()
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
部分文字列が文字列の開始位置以降にあるか	s.find(sub, start) != -1
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
小数点数の絶対値	math.fabs(x)
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
分類モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ミディアムブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumblue')
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
ライム色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
コマンドライン引数を列挙する	sys.argv
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
実数のn乗の実数剰余	pow(x, n, y)
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
リストを青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
ダークマゼンタ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
棒グラフをダークターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームのカラムのモード	df[col].mode()
グリッドの線種を一点鎖線に変更する	plt.grid(linestyle='dashbot')
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
データフレームの列の値がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
折れ線グラフの色をシスルに変更する	plt.plot(データ列x, データ列y, color='thistle')
両端キューの大きさ	len(deq)
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
横棒グラフをロージーブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='rosybrown')
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
データフレームを表示するとき、小数点以下の表示精度を指定する	pd.set_option('precision', n)
黒い右三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
数列とリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
nのビット長を見る	n.bit_length()
縦棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
ホールドアウトを使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ダークオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkorchid')
棒グラフをミッドナイトブルー色として描画する	plt.bar(データ列x, データ列y, color='midnightblue')
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
二点間のユークリッド距離	math.dist(point, point2)
散布図をライトサーモン色として描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
実数の余弦の逆数	math.acos(x)
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
option: 色をラベンダーに設定する	color = 'lavender'
データ列とリストの散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
分子n、分母mの有理数を準備する	fractions.Fraction(numerator=n, denominator=m)
両端キューの先頭の値を求める	deq[0]
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
データフレームを各列毎にグループ化して列の分散を求める	df.groupby(column)[column2].var()
折れ線グラフの星印の色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
option: ディムグレー色を用いる	color = 'dimgrey'
rgbの四角マーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
イテラブルからカウンタを生成する	collections.Counter(iterable)
option: 紺を使う	color = 'darkblue'
option: グラフの色をネイビーに変更する	color = 'navy'
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
ライトサーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
文字列を走査し、パターンに大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
データフレームの行を範囲指定して取り出す	df[start:end]
文字列の中の大文字・小文字を無視して正規表現によるマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
option: ドジャーブルーにグラフの色を設定する	color = 'dodgerblue'
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
option: 印を丸に設定する	marker = 'o'
範囲を指定して整数乱数を発生させる	random.randint(最小値, 最大値)
option: 線を太くする	linewidth = 3.0
文字列をシアン化する	f'\033[36m{value}\033[0m'
平均線付き箱ヒゲ図を描画する	plt.boxplot(データ列, meanline=True)
ライトスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
折れ線グラフをダイアモンド印で描画する	plt.plot(データ列x, データ列y, marker='D')
縦棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
タイムスタンプデータと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
折れ線グラフに赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
十六進文字列を整数に変換する	int(s, 16)
散布図に左三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='<')
散布図をライトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightblue')
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
整数で実数を整数除算する	x // y
ファイルからn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
データ列の偏りを対数変換する	np.log(データ列)
ミントクリーム色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
チョコレート色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
ダークスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
縦棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
折れ線グラフをミントクリーム色として描画する	plt.plot(データ列x, データ列y, color='mintcream')
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
リストを縦軸イテラブルを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
データ列の最頻値を求める	ds.mode()
データ列の分散を求める	ds.var()
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
option: 右三角マーカーを加える	marker = '>'
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
組をn回、結合する	aTuple * n
オブジェクトが整数型のインスタンスか調べる	isinstance(obj, int)
データフレームをエクセルデータファイルでJSONLファイルに保存する	df.to_excel(filename)
option: マーカーを▲に変更する	marker = '^'
折れ線グラフの色をダークオリーブグリーンに指定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
棒グラフをラベンダーブラッシュ色を用いて描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
実数の小数部を求める	math.modf(x)[0]
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
辞書をコピーする	aDict.copy()
インデント幅nでタプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
散布図の四角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
シアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
実数の複素数	complex(x)
カウンタの項目一覧	aCounter.keys()
二つの数列を箱ひげ図にする	plt.boxplot([データ列, データ列])
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
ミディアムバイオレットレッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
サドルブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
スクリプトファイルのディレクトリ名を使う	os.path.dirname(os.path.abspath(__file__))
ヒストグラムの色をアクアに指定する	plt.hist(データ列, color='aqua')
本日が火曜日	datetime.datetime.today().weekday() == 1
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
文字列リストをつなげるひとつの文字列にする	''.join(aStringList)
ダーク・スラテグレーにヒストグラムの色をする	plt.hist(データ列, color='darkslategrey')
箱ひげ図を描画して、平均を加える	plt.boxplot(データ列, showmeans=True)
日付時刻データを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
オーキッドにヒストグラムの色を指定する	plt.hist(データ列, color='orchid')
カラムの記述統計量	ds.describe()
実数の逆正弦	math.asin(x)
散布図をライトグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
カラムの中に日付データがあるか調べる	ds.isin([value])
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
別の文字列に文字列中の部分文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
散布図をターコイズ色を使って描画する	plt.scatter(データ列x, データ列y, color='turquoise')
青い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
option: フォントの色をトマトに指定する	color = 'tomato'
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
データフレームの正規分布に対する左右対称性	df.kurt()
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
データ列の欠損値を最小値で置換する	ds.fillna(ds.min())
パパイヤウィップ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
option: ダイアモンドマーカーを加える	marker = 'D'
ライトスチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
オリベドラブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
ダークオレンジ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
本日が火曜日か確認する	datetime.datetime.today().weekday() == 1
文字列を最初の部分文字列で分けたときの最初の文字列	s.partition(sub)[0]
縦棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
折れ線グラフを色付きの破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ダークシアン色としてヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
ヒストグラムの色をミディアムオーキッドにセットする	plt.hist(データ列, color='mediumorchid')
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
散布図をやわらかい青色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
option: ３二ビット整数型を使用する	dtype = np.int16
整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
option: フォントの色をロイヤルブルーに指定する	color = 'royalblue'
option: オーキッド色を使用する	color = 'orchid'
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
option: ライトスチールブルー色を使用する	color = 'lightsteelblue'
option: フォントの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
標準入力から1行受け取る	input()
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
散布図にrgbのポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
大量のデータ列が正規分布に従うか仮説検定する	scipy.stats.kstest(データ列, 'norm')
文字列はタプルに含まれるか	element in aTuple
線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
改行なしに文字列を出力する	print(value, end='')
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
xが真か調べる	bool(x)
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
実数とyの斜辺を算出する	math.hypot(x, y)
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
カラムの欠損値を平均で埋める	ds.fillna(ds.mean())
折れ線グラフの色を黄色に指定する	plt.plot(データ列x, データ列y, color='yellow')
配列間の要素ごとの最大公約数を使う	np.gcd(aArray, aArray2)
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
二つの変数を同じ値にする	x = y = n
混同行列をヒートマップとして確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
２つのデータフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
データフレームのstart行目からend行目までを取り出す	df[start:end]
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームを2つの列でまとめたグループ	df.groupby(['A', 'B'])
棒グラフをスラグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='slategray')
ヒストグラムをスレートブルー色を使って描画する	plt.hist(データ列, color='slateblue')
ヒストグラムをオリーブ色として描画する	plt.hist(データ列, color='olive')
折れ線グラフの色をダークグリーンに変更する	plt.plot(データ列x, データ列y, color='darkgreen')
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
計算機イプシロンを求める	sys.float_info.epsilon
縦棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
nを切り捨てながら半分にする	n //= 2
ヒストグラムをコーラル色を使って描画する	plt.hist(データ列, color='coral')
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
option: ベージュ色を使う	color = 'beige'
日付時刻データが日付時刻データより後ろ	aDatetime > aDatetime2
イテラブルを両端キューにする	collections.deque(iterable)
年月日と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
文字列中からパターンに複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
option: マーカーの色をブラックにする	markerfacecolor = 'black'
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
データ列が何秒か見る	ds.dt.second
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
ふたつの集合のいずれか一方だけの集合を求める	aSet.symmetric_difference(aSet2)
nの三乗を計算する	n ** 3
ファイルをオープンして]追加ストリームを使う	open(filepath, mode='a')
二つのオブジェクトが同一参照か	obj is obj2
ゼロ埋めされた複素数型のベクトル	np.zeros(要素数, dtype=bool)
８進数字を全部見る	string.octdigits
0から始まる無限な数列	itertools.count()
データフレームの列名一覧で指定された列を落とす	df.drop(columns, axis=1)
縦棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
nが負の数か調べる	n < 0
option: グラフの色をスラグレーに設定する	color = 'slategray'
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データ列を日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
ひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
文字列を文字コード列にする	[ord(ch) for ch in s]
等間隔の行列	np.arange(開始値, 終了値, 等差)
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
三自然数のLCMを求める	math.lcm(n, n2, n3)
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
文字列中にひとつでも非英字が含まれるか調べる	any(not c.isalpha() for c in s)
非数値データ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
数式の積分を求める	sympy.integrate(e)
グラフの描画でパステル調にカラーパレットを用いる	sns.set(pallete='pastel')
散布図の左三角マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
実数の小数部	math.modf(x)[0]
データフレームのカラムは正規分布からどれだけ、尖っているか見る	df[col].skew()
option: バツマーカーを用いる	marker = 'x'
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
行列の行ごとの標準偏差	np.std(aArray, axis=1)
棒グラフをスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='springgreen')
文字列を文字のリストに変換する	list(s)
バイオリン図をプロットする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
回帰分析をRANSACで行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
カウンタを辞書に変換する	dict(aCounter)
集合から別の集合との共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
プログラムの実行を正しく終了する	sys.exit(0)
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
ハローワールドとプリントする	print('Hello World')
ヒストグラムの色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
タプルが全て真かどうか	all(aTuple)
JSONLファイルをデータフレームとして読み込む	pd.read_json(filename, orient='records', lines=True)
プロットにx=0の点線を設定する	plt.axvline(x=0, linestyle='dotted')
回帰分析をランダム性を追加したランダムフォレストでする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
空のリストを得る	[]
ダークカーキ色でヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
マッピングにキーワード引数で追加する	aDict.update(**kwargs)
三つの実行結果をプリントする	print(value, value2, value3)
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図の丸印を黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
数列を箱ヒゲ図で描く	plt.boxplot(データ列)
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
セット＼集合	aSet.difference(aSet2)
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
横棒グラフをピーチパフ色として描画する	plt.barh(データ列x, データ列y, color='peachpuff')
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
棒グラフを珊瑚色で描画する	plt.bar(データ列x, データ列y, color='coral')
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
文字列を部分文字列で二つに区切って後半の文字列を使う	s.partition(sub)[-1]
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
ヒストグラムをブラウン色で描画する	plt.hist(データ列, color='brown')
スラグレーにヒストグラムの色を指定する	plt.hist(データ列, color='slategray')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
実数の双曲線余弦	math.cosh(x)
データ列を分割する	pd.cut(ds, aList)
アクアマリン色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
文字列は平仮名か調べる	('ぁ' <= ch <= 'ん')
２つのカウンタのいずれかに含まれる要素を求める	aCounter | aCounter2
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
数式を浮動小数点数に変換する	float(e)
文字列が全て数値	s.isnumeric()
データ列の四分位を可視化する	plt.boxplot(データ列)
散布図をライトグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgray')
文字列からformatのパターンで日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
シャルトリューズ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
八進数文字列を整数にする	int(s, 8)
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
配列の値を変更する	aArray[行番号, 列番号] = 指定の値
データフレームのリスト列の欠損値をメディアンに指定する	df[aList].fillna(df[aList].median())
数列とリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
ダークバイオレット色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
オブジェクトが名前付きタプルかどうか確認する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
赤い大バツマーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
データ列の時刻	ds.dt.hour
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
実数の平方根を算出する	math.sqrt(x)
データフレームを'A'列でによって破壊的にソートする	df.sort_values(by='A', inplace=True)
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
折れ線グラフの四角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
文字列をバイト列に変換する	bytes(s)
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
option: 区切りをカンマにする	sep = ','
option: ホットピンクを使用する	color = 'hotpink'
option: マーカーをポイントに変える	marker = '.'
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
option: カデットブルー色を使用する	color = 'cadetblue'
データフレームを各列毎に集約して、列の標準偏差を求める	df.groupby(column)[column2].std()
ガウス過程回帰モデルを作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
列をイミュータブルな集合に変換する	frozenset(iterable)
モデルの決定係数を計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
option: グラフの色をサーモンにセットする	color = 'salmon'
散布図の星印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
option: ターコイズを使用する	color = 'turquoise'
option: スラグレー色を使用する	color = 'slategray'
二つのデータフレームを異なる列をキーとして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
option: ライトブルー色を用いる	color = 'lightblue'
ヒストグラムの色をコーンズシルクに指定する	plt.hist(データ列, color='cornsilk')
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
集合が空でない	len(aSet) != 0
散布図を赤い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
nの二乗	n ** 2
リストの最初のオブジェクトを探す	aList.index(element)
折れ線グラフの色をサンディーブラウンに変更する	plt.plot(データ列x, データ列y, color='sandybrown')
折れ線グラフの色を青緑に指定する	plt.plot(データ列x, データ列y, color='teal')
行列の計算をする	import numpy as np
option: フォレストグリーンを用いる	color = 'forestgreen'
文字列をASCII限定として正規表現で分ける	re.split(pattern, s, flags=re.ASCI)
イテラブルを関数でフィルタする	map(func, iterable)
双方向キューをリストに変換する	list(deq)
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
列の値によってデータフレームをグループ化し、記述統計量を求める	df.groupby(column).describe()
折れ線グラフの四角印の線幅を設定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
ヒストグラムの色をリネンに指定する	plt.hist(データ列, color='linen')
珊瑚色として散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
折れ線グラフをライトコーラル色として描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームのカラムの中央値を求める	df[col].median()
ヒストグラムをダークバイオレット色として描画する	plt.hist(データ列, color='darkviolet')
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
集合の全ての要素が別の集合に含まれるか確認する	aSet.issubset(aSet2)
nとn2の差を求める	n - n2
option: ライトシアン色を使う	color = 'lightcyan'
データ列の最頻値	ds.mode()
ファイル全体をリストとして読む	f.readlines()
折れ線グラフのマーカーを左三角印にする	plt.plot(データ列x, データ列y, marker='<')
二つの実行結果を改行で区切ってプリントする	print(value, value2, sep='\n')
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
データフレームのデータ型一覧	df.dtypes
Pandasで、文字列の数値時刻から日付データにする	pd.to_datetime(s, unit='s', utc=True)
横棒グラフを紺色を用いて描画する	plt.barh(データ列x, データ列y, color='darkblue')
option: 先頭のカラムをインデックスに設定する	index_col = 0
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
データ列の年を使う	ds.dt.year
データフレームのリストカラムの各列間の相関係数	df[aList].corr()
要素はマッピングの値に含まれていない	element not in aDict.values()
文字列を中央寄せにする	s.center(文字列幅)
散布図を▲印で描画する	plt.scatter(データ列x, データ列y, marker='^')
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
整数nの2進表記	bin(n)
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
集合を空にする	aSet.clear()
文字列を改行によって区切る	s.splitlines()
データフレームのリストカラムの欠損値を第二四分位数に設定する	df[aList].fillna(df[aList].median())
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
option: グラフの色をリネンに設定する	color = 'linen'
実数の双曲線正弦の逆数を求める	math.asinh(x)
文字列を二分する	s.partition(sep)
数式の数値を求める	float(e)
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
名前付きタプルを辞書にする	aNamedTupleObject._asdict()
データフレームのリスト列の中に存在する文字列の数を数える	df[aList].isin([value]).sum()
散布図にポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategray')
縦軸だけ目盛り線	plt.grid(axis='y')
ファイルの絶対パス	os.path.abspath(filepath)
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
option: ダークカーキ色を使う	color = 'darkkhaki'
データフレームの指定したデータ型のカラム名を列挙する	df.select_dtypes(型).columns
option: グリーンイエローにグラフの色を設定する	color = 'greenyellow'
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
縦棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
散布図に上三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
グラフにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
散布図の右三角マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
ヒストグラムをダークオーキッド色として描画する	plt.hist(データ列, color='darkorchid')
折れ線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
横方向に二つのデータフレームをくっつける	pd.concat([df, df2], axis=1)
option: 小麦色色を用いる	color = 'wheat'
折れ線グラフの色をスレートブルーに指定する	plt.plot(データ列x, データ列y, color='slateblue')
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
ベクトルを横ベクトルに変形する	aArray.reshape(1, -1)
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
縦棒グラフをハニーデュー色として描画する	plt.bar(データ列x, データ列y, color='honeydew')
データフレームのカラムが何秒か見る	df[col].dt.second
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
縦棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
シルバー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
散布図の色をホワイトにする	plt.scatter(データ列x, データ列y, color='white')
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
パラメータがマイナス無限大に近づくとき、数式の極限値を求める	sympy.limit(e, z, -oo)
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
データ列を円プロットにする	plt.pie(データ列, startangle=90)
散布図の右三角マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ライトスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
nが2で割り切れるか調べる	n % 2 == 0
折れ線グラフの色をライトスチールブルーに指定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームから型型の列を抽出する	df.select_dtypes(ty)
棒グラフをミディアムシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
データフレームのカラムをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: 線の種類を破線に設定する	linestyle = 'dashed'
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
グラフを画面用にする	sns.set(context='notebook')
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
縦棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
ふたつの集合の差	aSet.difference(aSet2)
カラムの値でデータフレームを欠損値を含めてグループ化する	df.groupby(column, dropna=False)
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
データフレームのリスト列を四捨五入する	df[aList].round()
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
折れ線グラフのマーカーを丸印にする	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームを散布図で可視化し、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
データフレームの値はNaNかどうか調べる	df.isna()
option: バッファリングのサイズを指定する	buffering = 4096
列からベクトルを作る	np.array(iterable)
文字列の両端から不要な空白を取り除く	s.strip()
折れ線グラフに丸印を加える	plt.plot(データ列x, データ列y, marker='o')
データフレームの列の中に存在する文字列の合計を数える	df[col].isin([value]).sum()
ファイルのフォルダ名を使う	os.path.dirname(filepath)
データフレームを'A'列の値でグループ化し、要約統計量を求める	df.groupby('A').describe()
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
option: 色をサドルブラウンに指定する	color = 'saddlebrown'
棒グラフをピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='pink')
option: フォントの色をカデットブルーにセットする	color = 'cadetblue'
リストの末尾	aList[-1]
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
赤いクロス印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
ローングリーン色を使ってヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
スプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
正規表現を使う	import re
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
逆余弦	math.acos(x)
ライトグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
バイオリン図を描く	sns.violinplot(x='カテゴリ列', y='列', data=df)
サンディーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
説明変数と目的変数で分類モデルを学習する	model.fit(説明変数, 目的変数)
実数を文字列にする	str(x)
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
文字列をdatetime64型に変換する	pd.to_datetime(s)
オブジェクトのオブジェクト識別子	id(obj)
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
ファイルパスから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
要素が集合のメンバーか調べる	element in aSet
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
文字列を部分文字列で区切って、列挙する	s.split(sub)
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
option: ミディアムオーキッドにグラフの色を指定する	color = 'mediumorchid'
option: ヘッダを連番に設定する	header = None
データフレームを'A'列によってソートする	df.sort_values(by='A')
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
散布図の左三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームを２つの列によって小さい順に整列する	df.sort_values(by=['A', 'B'], ascending=True)
赤い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightseagreen')
線グラフをゴーストホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
ダークシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
実行時に標準出力がパイプ	not sys.stdout.isatty()
変数をシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
ヒストグラムの区間数を設定する	plt.hist(データ列, bins=区関数)
データ列が何曜日か見る	ds.dt.weekday_name
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
データ列のタイムゾーンを文字列に変更する	ds.tz_convert(s)
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
配列を2次元1列に変形する	aArray.reshape(-1, 1)
データフレームを各カテゴリにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ヒートマップでデータフレームの相関行列を描画する	sns.heatmap(df.corr())
配列の全要素の値を変更する	aArray[:, :] = 指定の値
線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
ヒストグラムの色をライトイエローに指定する	plt.hist(データ列, color='lightyellow')
option: イエローグリーン色を使う	color = 'yellowgreen'
文字列リストにイテラブルを変換して、カンマで結合する	','.join(map(str, iterable))
クラス分類をアンサンブル学習として行う	sklearn.ensemble.VotingClassifier()
配列をビン数nとしてビン分割する	pd.cut(aArray, n)
ふたつの集合が共通の要素を持たないか	aSet.isdisjoint(aSet2)
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
実数の二進対数を求める	math.log2(x)
データをL2ノルムとして正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
整数nの2進文字列を使う	bin(n)[2:]
データ列の折れ線グラフを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データ列をタイムスタンプ型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
ミディアムブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
配列をビン数nでビン分割する	pd.cut(aArray, n)
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
option: ダークオーキッドを使用する	color = 'darkorchid'
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
組の要素をソートする	sorted(aTuple)
rgbのダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
グラフの色を暗くする	sns.set(pallete='dark')
データ列とリストについて散布図をプロットし、、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: ダークシアン色を使う	color = 'darkcyan'
リストを境界値としてリストをビニングする	pd.cut(aList, aList)
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s')
option: グラフの色をリネンに指定する	color = 'linen'
初期値で全要素を初期化した配列	np.full(要素数, 初期値, dtype=np.int)
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
option: モカシンにグラフの色を指定する	color = 'moccasin'
タイムスタンプデータの曜日を整数で使う	aDatetime.weekday()
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
データフレームのリストカラムの第一四分位数を求める	df[aList].quantile(0.25)
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
列の中にいくつ文字列が存在するか求める	ds.isin([value]).sum()
データフレームのリストカラムの要約統計量	df[aList].describe()
文字列をカンマを用いて区切り、、列挙する	s.split(',')
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
データフレームを複数の列によってを用いて破壊的にソートする	df.sort_values(by=column, inplace=True)
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
xの小数点以下'4'桁の文字列に変換する	':.4f'.format(x)
横棒グラフをゴールド色を使って描画する	plt.barh(データ列x, データ列y, color='gold')
データフレームを列によってによって大きい順にソートする	df.sort_values(by=column, ascending=False)
option: グラフの色をスレートブルーに指定する	color = 'slateblue'
ファイルパスを追加用にオープンして]fとする	f = open(filepath, mode='a')
二つの文字列をプリントする	print(value, value2)
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
リッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
xが一桁の整数	-9 <= x <= 9
暗い赤にヒストグラムの色を設定する	plt.hist(データ列, color='darkred')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
nからn2の値を引いてnに代入する	n -= n2
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
option: 茶色を使う	color = 'brown'
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
データフレームの数値をまとめて丸める	df.round()
書き込み用にファイルをEUCでオープンする]	open(filepath, mode='w', encoding='euc_jp')
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
読み込みモードでファイルをオープンする]	open(filepath, mode='r')
集合から全ての要素を取り除く	aSet.clear()
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
オブジェクトの属性の値を値に設定する	setattr(obj, プロパティ名, 値)
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
デピンク色でヒストグラムを描画する	plt.hist(データ列, color='deeppink')
nが3の倍数か	n % 3 == 0
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームをグループ化しそれぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
線の線の種類を点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームを列によって昇順に整列する	df.sort_values(by=column, ascending=True)
option: ゴールデンロッド色を使う	color = 'goldenrod'
四分位数ごとにデータ列をビン分割する	pd.qcut(ds, 4)
データフレームをグループ化し、列に対し最小値を計算する	df.groupby(column)[column2].min()
標準エラーを用いる	sys.stderr
タプルを累加したイテラブル	itertools.accumulate(iterable)
データフレームのリストカラムの欠損値を最大値にする	df[aList].fillna(df[aList].max())
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
折れ線グラフのアルファ値を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
列のユニークな値の個数	df[col].nunique()
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
回帰分析をランダムフォレストで行う	model = sklearn.ensemble.RandomForestRegressor()
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
実数が有限	math.isfinite(x)
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
ヒストグラムの色をマゼンタに変更する	plt.hist(データ列, color='magenta')
線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
淡い茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
グラフを画面用に設定する	sns.set(context='notebook')
英字の小文字を全部使う	string.ascii_lowercase
データフレームのカラムの欠損値を平均値に指定する	df[col].fillna(df[col].mean())
グラフの用途を論文に設定する	sns.set(context='paper')
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
最初のカテゴリーを無視してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
散布図に赤い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
option: フォントの色をカーキに指定する	color = 'khaki'
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
year年month月day日hour時をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day, hour=hour)
文字列の終了位置以前に部分文字列が含まれないか	s.find(sub, 0, end) == -1
nをn2で割った余りを求める	n % n2
コーンズシルク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
自然数の順列の総数	math.perm(n)
セットの全ての要素が別のセットに含まれるか調べる	aSet.issubset(aSet2)
option: グラフの色を赤に変更する	color = 'red'
中央値でデータ列を分割する	pd.qcut(ds, 2)
option: ゲインズボロにフォントの色を指定する	color = 'gainsboro'
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
文字列の開始位置以降が部分文字列で開始する	s.startswith(sub, start)
グラフの横軸を対数目盛に変更する	plt.xscale('log')
文字列は全て十進数字か	s.isdecimal()
文字列が全て空白文字からなるか調べる	s.isspace()
シーケンスの各要素を関数でフィルタする	filter(func, iterable)
リストが空でない	len(aList) != 0
キューの長さを制限する	collections.deque(maxlen=n)
要素は集合のメンバーかどうか調べる	element in aSet
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
標準エラーを	sys.stderr
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
option: ライムグリーンを使う	color = 'limegreen'
今日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
正則化付き単回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
各グループ列ごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
散布図のマーカーの色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
データフレームを'A'列によってグループ化して列挙する	[(name, group) for name, group in df.groupby('A')]
ライトイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
十六進数字を全て使う	string.hexdigits
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
データフレームを各列と列の組み合わせ毎に集約して、分散を求める	df.groupby([column, column2], as_index=False).var()
option: 文字列を改行の代わりに用いる	end = s
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
ファイルをバイナリ書き込みモードとしてオープンする]	open(filepath, mode='wb')
論文にグラフの用途を設定する	sns.set(context='paper')
貝殻色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
文字列の左端だけ大文字化する	s.capitalize()
option: 線のスタイルを破線に設定する	linestyle = 'dashed'
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
文字列を緑色にする	f'\033[32m{value}\033[0m'
表データの指定された列を配列にする	df[column].values
散布図にrgbの左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
今日が何曜日か知る	datetime.datetime.today().weekday()
整数nの二進表現	bin(n)
横棒グラフをミディアムオーキッド色として描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
文字列内にアスキー文字があるか	any(c.isascii() for c in s)
グリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
option: マルーンを使う	color = 'maroon'
option: オリベドラブ色を使う	color = 'olivedrab'
横棒プロットを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
nxn2の二次元リスト	[[0] * n for _ in range(n2)]
文字列のn番目を使う	s[n]
決定係数を算出する	sklearn.metrics.r2_score(データ列, データ列2)
日付時刻データの日数	aDatetime.day
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
淡い茶色色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
ヒストグラムの色をコーンフラワーブルーにセットする	plt.hist(データ列, color='cornflowerblue')
ヒストグラムをタン色として描画する	plt.hist(データ列, color='tan')
データフレームを列で降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
タプルをリストに変換する	list(aTuple)
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
表データを2つの列を用いてソートし、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
ガウス過程分類器を準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
円周率	math.pi
データフレームからカラムを１つだけ選択する	df[[column]]
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームを各列とカラムの組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
リッジ回帰とロッソ回帰の組み合わせた分析を行う	model = sklearn.linear_model.ElasticNet()
文字列を大文字・小文字を無視してパターンで分割する	re.split(pattern, s, flags=re.IGNORECASE)
本日が木曜日	datetime.datetime.today().weekday() == 3
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
イテラブルとデータ列について散布図をプロットして、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
青い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
部分文字列が文字列の開始位置以降に含まれる	s.find(sub, start) != -1
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
option: 読み込み用に設定する	mode = 'r'
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
データフレームを散布図で可視化し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
散布図に赤い四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c='r')
列の各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームを'A'列と'B'列によって並べ直す	df.sort_values(by=['A', 'B'])
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
nがn2よりも小さい	n < n2
第２コマンド引数	sys.argv[1]
散布図にバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
データフレームのリストカラムのメディアン	df[aList].median()
線形モデルのバイアス	model.intercept_
カウンタのキーと回数を列挙する	aCounter.items()
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
配列をベースに全要素が初期値の行列	np.full_like(aArray, 初期値)
散布図に黒い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
Pandasで、データフレームのcollの数値時刻から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
プロットを全般的に淡くする	sns.set(pallete='muted')
データフレームの欠損値が含まれる部分に色を付ける	df.style.highlight_null()
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
option: ライトサーモン色を使う	color = 'lightsalmon'
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
option: グラフの色を耐火レンガに変更する	color = 'firebrick'
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
データフレームのリストカラムを丸める	df[aList].round()
クラス分類の適合率と再現率の調和平均を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
option: シアンにグラフの色を設定する	color = 'cyan'
データフレームのインデックスの名前の一覧	df.index
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
二進文字列を整数に変換する	int(s, 2)
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
白いグリッド線を引く	plt.grid(color='w')
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
文字列を部分文字列で区切り、、文字列リストにする	s.split(sub)
データ列がどの程度、分散しているか確認する	ds.var()
リストをn回、連結する	aList * n
データ列の各データ値の出現数	ds.value_counts()
データフレームのリストカラムの未入力値を直前の値で埋める	df[aList].fillna(method='ffill')
データフレームの列からユニークな要素を抽出しリスト化する	df[col].unique().tolist()
オブジェクトはある型か	isinstance(obj, クラス)
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
option: ダークターコイズを使う	color = 'darkturquoise'
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
リストとリストの散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ダークオーキッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
スクリプトファイルと同じディレクトリのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
縦棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
散布図に星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
データフレームの列の空文字をドロップする	df[col].replace('', np.nan).dropna()
三変数の最小値を求める	min(x, y, z)
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
折れ線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
データフレームで何行、重複するか見る	df.duplicated().sum()
散布図の上三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: グラフの色をミントクリームに指定する	color = 'mintcream'
ケンドール相関係数としてデータフレームのリスト列の相関行列を求める	df[aList].corr(method='kendall')
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
実線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
一点鎖線に折れ線グラフの線種を設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
オブジェクトは集合クラスか調べる	isinstance(obj, set)
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
ランタイムの再帰の最大回数	sys.getrecursionlimit()
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
タイムスタンプデータからn週間分、減らす	aDatetime - datetime.timedelta(weeks=n)
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
データフレームを表示するとき、小数点以下の表示精度を変更する	pd.set_option('precision', n)
グラフの見栄えを良くする	import seaborn as sns
横棒グラフをオレンジ色として描画する	plt.barh(データ列x, データ列y, color='orange')
ベクトルの要素ごとの最小公倍数	np.lcm(aArray, aArray2)
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
システム時刻で乱数を初期化する	random.seed()
ヒストグラムの色をマゼンタに指定する	plt.hist(データ列, color='magenta')
ミスティローズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
データフレームから指定した３列のみ抽出する	df[[column, column2, column3]]
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
双方向キューのn番目に数値を途中追加する	deq.insert(n, element)
リストの末尾から要素をポップする	aList.pop()
option: シャルトリューズ色を使う	color = 'chartreuse'
実数の正接	math.tan(x)
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
最初のカテゴリーを無視し、データフレームの列をワンホット・ベクトルにする	pd.get_dummies(df[column], drop_first=True)
深紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
整数nがリストの一つか調べる	n in aList
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
xとyの商と余りを同時に計算する	divmod(x, y)
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
集合が空か調べる	len(aSet) == 0
nをn2だけ増加させる	n += n2
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
縦棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
データフレームのn行目をドロップしてインプレイスする	df.drop(n, axis=0, inplace=True)
データラベルの位置を指定する	plt.legend(loc=(x, y))
カウンタの全カウント	aCounter.total()
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
option: カラムの名前を自動的な連番にする	header = None
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
散布図をダイアモンド印で描画する	plt.scatter(データ列x, データ列y, marker='D')
option: デピンクにグラフの色を設定する	color = 'deeppink'
データフレームから列を二つ選択する	df[[column, column2]]
整数nを8進数文字列に変換する	oct(n)[2:]
目盛線	plt.grid(color='#800080')
パスのセパレータ記号	os.sep
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
縦棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
0から始まる無限の数列を得る	itertools.count()
散布図に丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
オブジェクトが数値かどうか確認する	isinstance(obj, (int,float))
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
文字列を走査しパターンにマッチするか見る	re.search(pattern, s)
ファイルパスをオープンして]、追加ストリームを使う	open(filepath, mode='a')
昇順にデータフレームを破壊的に二つの列によって整列する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
文字列がタプルの要素か調べる	element in aTuple
組の先頭を除く	aTuple[1:]
線グラフを青色を用いて描画する	plt.plot(データ列x, データ列y, color='blue')
小数点数を切り下げる	math.floor(x)
折れ線グラフのラベルを指定する	plt.plot(データ列x, データ列y, label='ラベル')
option: ピンクにグラフの色を変更する	color = 'pink'
折れ線グラフの色をマルーンに変更する	plt.plot(データ列x, データ列y, color='maroon')
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
データフレームのリストカラムの欠損値を平均に設定する	df[aList].fillna(df[aList].mean())
データフレームをJSONLファイルに保存する	df.to_excel(filename)
ファイルパスを読み込みできるように開く]	open(filepath, mode='r')
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ミントクリーム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームをCSVファイルから読む	pd.read_csv(filename, sep=',')
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
ヒストグラムの色をブラウンに変更する	plt.hist(データ列, color='brown')
棒グラフを黄色色を用いて描画する	plt.bar(データ列x, データ列y, color='yellow')
リストにリストを追加し、拡張する	aList.extend(aList2)
データフレームのリスト列の空文字をNaNに変換しドロップする	df[aList].replace('', np.nan).dropna()
改行を使う	'\n'
データフレームの列をグループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
カラムをキーにして２つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
散布図に黒いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgray')
option: オリーブにグラフの色を変更する	color = 'olive'
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
nとn2の差	n - n2
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
レベッカパープルにヒストグラムの色を設定する	plt.hist(データ列, color='rebeccapurple')
散布図のポイント印を青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図をトマト色として描画する	plt.scatter(データ列x, データ列y, color='tomato')
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
縦棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
配列の差を計算する	aArray - aArray2
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
標準出力を使う	sys.stdout
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
option: インデックスを自動的な連番に設定する	index_col = None
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
縦軸の目盛を表示しない	plt.yticks([])
線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
ダイアモンドマーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
option: フォントの色をグレーに設定する	color = 'grey'
ミントクリーム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
ダークオレンジ色でヒストグラムを描画する	plt.hist(データ列, color='darkorange')
データ列をn個に等間隔でビンニングする	pd.cut(ds, n)
データフレームを二つの列でによって降順に並べ直す	df.sort_values(by=['A', 'B'], ascending=False)
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
両端キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
文字列を紫色で出力する	print(f'\033[35m{value}\033[0m')
散布図に黒いクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
グラフのデータラベルの位置を指定する	plt.legend(loc=(x, y))
option: ライトグリーン色を使う	color = 'lightgreen'
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を算出する	df.groupby([column, column2], as_index=False).max()
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
ヒストグラムの線の種類を実線に指定する	plt.hist(データ列, linestyle='solid')
ふたつの集合がセットと互いに素	aSet.isdisjoint(aSet2)
nが-9以上、9以下か調べる	-9 <= n <= 9
ゼロ埋めされた符号なし８ビット整数型の配列を作成する	np.zeros(要素数, dtype=np.uint8)
行列の行ごとの分散	np.var(aArray, axis=1)
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
ダークスラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
縦棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
バイトオーダを知る	sys.byteorder
オールドレース色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
ヒストグラムをミッドナイトブルー色として描画する	plt.hist(データ列, color='midnightblue')
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
year年の日付	datetime.date(year=year, month=1, day=1)
データフレームのリスト列の欠損値を後の行の値に設定する	df[aList].fillna(method='bfill')
散布図の下三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
option: フォントの色をオリベドラブに設定する	color = 'olivedrab'
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
文字列がリストの要素か調べる	element in aList
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
option: バイナリ書き込みモードに設定する	mode = 'wb'
散布図に青い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
カデットブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
折れ線プロットにラベルをつける	plt.plot(データ列x, データ列y, label='ラベル')
オブジェクトはバイト列型	isinstance(obj, bytes)
nにn2を足して代入する	n += n2
オブジェクトからプロパティを削除する	delattr(obj, プロパティ名)
option: グラフの色を青に変更する	color = 'blue'
小数点数の逆正接を計算する	math.atan(x)
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
プロットのカラーパレットを淡くする	sns.set(pallete='muted')
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
データフレームをJSONLファイルに書き込む	df.to_csv(filename)
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
配列の折れ線グラフを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
グラフを画面用に変更する	sns.set(context='notebook')
データ列を分割数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
文字列のの開始位置から終了位置までの間に部分文字列がいくつか存在するか調べる	s.count(sub, start, end)
線グラフを耐火レンガ色として描画する	plt.plot(データ列x, データ列y, color='firebrick')
線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
option: ベクトルのデータ型を指定する	dtype = bool
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
option: ダイアモンドマーカーを使う	marker = 'D'
散布図をライトコーラル色として描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
日付時刻データは何分か知る	aDatetime.minute
データフレームに重複があるか見る	df.duplicated()
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
シーケンスを文字列リストに変換して、タブによって連結する	'\t'.join(map(str, iterable))
イテラブルを無限に繰り返す	itertools.cycle(iterable)
集合の浅いコピー	aSet.copy()
未定値	None
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
折れ線グラフの線の種類を実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
ラベンダー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
辞書をカウンタに変換する	collections.Counter(aDict)
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
全要素を0で初期化したベクトル	np.zeros(要素数)
実数が非数	math.isnan(x)
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
縦棒グラフをダークシアグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ヒストグラムの色をフローラルホワイトに変更する	plt.hist(データ列, color='floralwhite')
列の名前の一覧	df.columns
データフレームのNaNを前の行の値で埋める	df.fillna(method='ffill')
データフレームのカラムは何月か見る	df[col].dt.month
option: 文字列をセパレータで使う	sep = s
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
option: ピーチパフ色を用いる	color = 'peachpuff'
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
データフレームを各列毎に集約して文字列というグループを求める	df.groupby(column).get_group(s)
折れ線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
３変数の最大値を求める	max(x, y, z)
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームのインデックス名の一覧	df.index
行列を元に全要素が初期値のベクトル	np.full_like(aArray, 初期値)
ラインを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
横棒プロットを描いて、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
n2がnより大きく、かつn3未満か調べる	n < n2 and n2 < n3
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
線グラフの色をスノーに変更する	plt.plot(データ列x, データ列y, color='snow')
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
空の勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
ミディアムアクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
実行時に標準出力がパイプかどうか調べる	not sys.stdout.isatty()
折れ線グラフをパウダーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='powderblue')
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
グラフの横軸の軸ラベルを設定する	plt.xlabel('x軸ラベル')
棒グラフをイエローグリーン色として描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
ダークスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
データを最大値と最小値を用いて正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
nがn2よりも小さいか調べる	n < n2
折れ線グラフの左三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
nにn2を加える	n + n2
数式を数値に変換する	float(e)
散布図をシャルトリューズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
nをn2で整数除算する	n // n2
option: 追加モードに設定する	mode = 'a'
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
正規表現を使用する	import re
nが3で割り切れるか	n % 3 == 0
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
option: 四角マーカーを描画する	marker = 's'
データフレームから指定された二つの列を抽出する	df[[column, column2]]
文字列をn回繰り返すイテラブル	itertools.repeat(element, n)
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
ヒストグラムをスレートブルー色として描画する	plt.hist(データ列, color='slateblue')
横棒グラフをシエナ色として描画する	plt.barh(データ列x, データ列y, color='sienna')
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgrey')
シーグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
タプルをJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
折れ線グラフの色をミディアムスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ダークスレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='darkslateblue')
符号なし８ビット整数型のゼロ埋めされた配列を初期化する	np.zeros(要素数, dtype=np.uint8)
データフレームのカラムの欠損値を平均値で置き換える	df[col].fillna(df[col].mean())
シーケンスの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
オブジェクトが整数クラスのインスタンス	isinstance(obj, int)
n2分のn	n / n2
カウンタの全出現回数を使う	aCounter.total()
文字列を最後の部分文字列で分けた場合の後半の文字列	s.rpartition(sub)[-1]
リストと配列の散布図を描き、、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
辞書を多重集合にする	collections.Counter(aDict)
JSON文字列をデータに変換する	json.loads(jsonString)
option: フォレストグリーンにグラフの色を変更する	color = 'forestgreen'
棒グラフをシルバー色を用いて描画する	plt.bar(データ列x, データ列y, color='silver')
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
リストとリストの散布図に黒い▽マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
option: ダークバイオレット色を用いる	color = 'darkviolet'
データフレームのリスト列のNaNをモードで埋める	df[aList].fillna(df[aList].mode().iloc[0])
本日の日付時刻を求める	datetime.datetime.now()
表データを二つの列でで降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
タプルの合計	sum(aTuple)
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
大量のデータ列が正規分布に従うか調べる	scipy.stats.kstest(データ列, 'norm')
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
日付データが水曜日	aDate.weekday() == 2
ティール色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
ブースティングで回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
オーキッド色でヒストグラムを描画する	plt.hist(データ列, color='orchid')
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
option: 複素数型を用いる	dtype = bool
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
辞書の項目名の値を得る	aDict[key]
リストの全ての要素を消去する	aList.clear()
黒いダイアモンドマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図を左三角印で描画する	plt.scatter(データ列x, データ列y, marker='<')
option: 赤色を使う	color = 'red'
スクリプトファイルと同じフォルダのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
カテゴリ別でグループ化して、データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームのカラムの25パーセンタイル	df[col].quantile(0.25)
option: グラフの色をダークオーキッドに変更する	color = 'darkorchid'
option: スラグレーを使う	color = 'slategrey'
データフレームを列で整列してNaNを先頭にする	df.sort_values(by=column, na_position='first')
リストをひとつ置きに得る	aList[::2]
option: 左三角マーカーを描画する	marker = '<'
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
リストをヒストグラムにする	plt.hist(データ列)
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategray')
線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
散布図を暗い赤色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
アリスブルー色でヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
データフレームの数値を一度に丸める	df.round()
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
データフレームをJSONLファイルに保存する	df.to_csv(filename)
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
リストを横棒プロットにする	plt.barh(ラベル列, データ列)
行列の列	aArray[:, 列番号]
数値を緑色でプリントする	print(f'\033[32m{value}\033[0m')
正規分布にしたがってランダムにデータ列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
タプルのキーと値を入れ替える	{v: k for k, v in aDict.items()}
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
グラフにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
破線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
カラムの75パーセンタイル	ds.quantile(0.75)
option: ローングリーンにグラフの色を設定する	color = 'lawngreen'
EUCとしてファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
散布図をブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='brown')
折れ線グラフのポイント印を赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
データ列のNaNを平均値に設定する	ds.fillna(ds.mean())
散布図に丸マーカーを用いる	plt.scatter(データ列x, データ列y, marker='o')
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
リストとリストについての散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: ゴーストホワイト色を使う	color = 'ghostwhite'
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
リストを縦軸、イテラブルを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
nがn2か調べる	n == n2
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
空のガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
option: スラッシュをセパレータで用いる	sep = '/'
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データフレームのリスト列の欠損値をxで埋める	df[aList].fillna(x)
リストと配列について散布図を描いて、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
データフレームのNaNを最小値で埋める	df.fillna(df.min())
データ列の平方根平均二乗誤差を算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
データフレームのリストカラムのpercent分位数を算出する	df[aList].quantile(percent/100)
折れ線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
イテラブルとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
option: フォントの色をダークスレートブルーに設定する	color = 'darkslateblue'
プロットの縦横比を同じする	plt.axis('equals')
nをn2分の1にする	n /= n2
組の先頭	aTuple[0]
棒グラフの色をブラウンにする	plt.bar(データ列x, データ列y, color='brown')
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
数値の変数に数式を代入する	e.subs(z, e2)
ライトゴールドロディイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データ列がどの程度、分散しているか見る	ds.var()
n個分左に両端キューの要素を回転させる	deq.rotate(-n)
リネン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
データ列の一意な値	ds.unique()
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
データフレームの全カラムを散布図でグラフ化する	sns.pairplot(df)
アークタンジェント	math.atan(x)
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
日付データの日数	aDate.day
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
モデルをあてはめる	model.fit(説明変数, 目的変数)
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
実数で数を割る	x / y
末尾の列をデータフレームから除く	df[df.columns[:-1]]
データフレームの内の欠損値がある行を削除する	df.dropna()
半透明の実線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
散布図の上三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
関数の値でデータフレームをグループ化する	df.groupby(関数)
タプル中の最初のオブジェクトを探す	aTuple.index(element)
縦棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
nを切り捨てながらn2分の一にする	n //= n2
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
option: グレー色を使う	color = 'gray'
データフレームを列でソートして上位n件を取り出す	df.sort_values(columns).head(n)
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
散布図の色を淡い茶色にする	plt.scatter(データ列x, データ列y, color='tan')
option: ライトグレー色を使う	color = 'lightgrey'
横棒グラフをペルー色として描画する	plt.barh(データ列x, データ列y, color='peru')
暗くカラーパレットをグラフの描画で使う	sns.set(pallete='dark')
オブジェクトがあるクラスか	isinstance(obj, クラス)
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
リストの長さ	len(aList)
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データ列の値がNaNか調べる	ds.isna()
文字列はタプルの要素かどうか調べる	element in aTuple
カンマで文字列を分割し、、列挙する	s.split(',')
縦棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
赤色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
option: 上三角印を描画する	marker = '^'
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
SJISでTSVを読む	pd.read_csv(filename, encoding='shift_jis')
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
文字列中に部分文字列がない	sub not in s
option: クロスマーカーを描画する	marker = 'x'
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
クラス分類をロバスト推定を用いて行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
日付データの年数を使う	aDate.year
散布図をダークブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームを千の位で四捨五入して、整数型にする	df.round(-3).astype(int)
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
カウンタの項目のカウント	aCounter[element]
折れ線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='gray')
タプルを複製する	aDict.copy()
散布図に赤い上三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームの重複を見る	df.duplicated()
折れ線グラフの四角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
データフレームのリスト列の最頻値	df[aList].mode()
改行	'\n'
ヒストグラムの色をスチールブルーに変更する	plt.hist(データ列, color='steelblue')
オブジェクトがリストの要素でないかテストする	element not in aList
文字列の最後から範囲を指定して部分文字列を探す	s.find(sub, start, end)
深紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
数列と配列についての散布図にrgbの左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ヒストグラムを白くする	plt.hist(データ列, color='w')
ファイルとfilenameを結合する	os.path.join(filepath, filename)
横棒グラフを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
本日の日付時刻	datetime.datetime.today()
ダークマゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
折れ線グラフの左三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
全ての８進数字	string.octdigits
両端キューが空でないか調べる	len(deq) != 0
多次元データを多次元尺度構成法として淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
option: フローラルホワイトにグラフの色を変更する	color = 'floralwhite'
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームの末尾n行を抽出する	df.tail(n)
n個の整数列	list(range(n))
ナバホホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
赤い破線でリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
option: ダークグレーを使う	color = 'darkgrey'
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
棒グラフをトマト色として描画する	plt.bar(データ列x, データ列y, color='tomato')
要素∉集合	element not in aSet
文字列中の部分文字列の登場をカウントする	s.count(sub)
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
データフレームのカラムの分	df[col].dt.minute
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
option: 色をグリーンに変更する	color = 'green'
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
複数の列によってデータフレームをまとめた表	df.groupby(columns)
バイナリできるようにファイルパスを開く]	open(filepath, mode='rb')
直前の値でデータ列の欠損値を埋める	ds.fillna(method='ffill')
option: オレンジレッド色を使う	color = 'orangered'
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
散布図の▲マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
グラフのx軸のラベルを設定する	plt.xlabel('x軸ラベル')
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
折れ線グラフをマルーン色として描画する	plt.plot(データ列x, データ列y, color='maroon')
現在の再帰の最大回数	sys.getrecursionlimit()
2つの整数の最大公約数	math.gcd(n, n2)
データフレームの列がx以上のデータを抽出する	df[df[column] >= x]
Pythonパスのリストを知る	sys.path
縦横比を等しくする	plt.axis('equals')
データフレームのリストカラムの空文字を未入力値に変換しドロップする	df[aList].replace('', np.nan).dropna()
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
JSONLファイルにデータフレームをエクセルファイルファイルを使って保存する	df.to_excel(filename)
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
辞書に別のタプルの項目を更新する	aDict.update(aDict2)
option: ブルーバイオレットにフォントの色を変更する	color = 'blueviolet'
option: シルバーにフォントの色をする	color = 'silver'
データフレームを四捨五入して、整数型にする	df.round().astype(int)
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
大きさnでリストと配列についての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
リスト内の要素が全て真か調べる	all(aList)
option: ペルー色を使用する	color = 'peru'
option: グリーン色を使用する	color = 'green'
ポイントマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
点線でイテラブルの推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
ダークターコイズにヒストグラムの色を変更する	plt.hist(データ列, color='darkturquoise')
折れ線グラフの色をミディアムシアグリーンに変更する	plt.plot(データ列x, データ列y, color='mediumseagreen')
タプルの先頭を取り除く	aTuple[1:]
入力から２つの文字列を取り出す	A, B = map(str, input().split())
ファイルをEUCとして追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
シャルトリューズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: ミディアムスプリンググリーン色を使用する	color = 'mediumspringgreen'
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
集合から別のセットとの共通要素を除去する	aSet.symmetric_difference_update(aSet2)
列の第一四分位数	ds.quantile(0.25)
データフレームの指定された列をリストにする	df[column].values.tolist()
実数を小数点以下第一位で丸める	round(x, 1)
オブジェクトが関数か調べる	callable(obj)
リストとリストの散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
赤い実線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
ダークバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
文字列中に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
ファイルの拡張子付きのファイル名	os.path.basename(filepath)
'A'列によって破壊的にデータフレームを昇順に並べる	df.sort_values(by='A', ascending=True, inplace=True)
インディアンレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
ライム色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
複数横に並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームの行列を入れ替える	df.T
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
数式を変数についてn階微分する	sympy.diff(e, z, n)
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
option: インディゴを使う	color = 'indigo'
文字列中に非アスキー文字があるか	any(not c.isascii() for c in s)
数列と数列について散布図を描画してマーカーをクロスに指定する	plt.plot(データ列x, データ列y, marker='x')
サイコロ	random.randint(1, 6)
データフレームの値を正規表現patternでまとめてreplに置換する	df.replace(pattern, repl, regex=True)
データフレームを整数に丸める	df.round()
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
データ列の値はNaNかどうか	ds.isna()
ヒストグラムを赤くする	plt.hist(データ列, color='r')
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
折れ線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームからカラムを2つ選択する	df[[column, column2]]
データフレームのリストカラムのNaNを平均値に指定する	df[aList].fillna(df[aList].mean())
グリッドを実線にする	plt.grid(linestyle='solid')
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
折れ線グラフの色をゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='goldenrod')
predicateFuncがTrueとなる列の要素	itertools.takewhile(predicateFunc, iterable)
からデータフレームを読み込む	pd.read_excel(filename)
リストの要素を小さい順にソートする	sorted(aList, reverse=False)
データフレームのリストカラムの未入力値を直前の値に設定する	df[aList].fillna(method='ffill')
nからn2までの整数列	list(range(n, n2+1))
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
散布図をミディアムシアグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
主成分分析で多次元データを淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
散布図の星印の色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
実数を千の位で丸める	round(x, -3)
線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
ヘッダなしでTSVファイルを読み込む	pd.read_csv(filename, header=None)
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
散布図に黒い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの中にある文字列と文字列の個数を数える	df.isin([value, value2]).sum()
データフレームの列の種類を見る	df.info()
プロットのカラーパレットを全般的に暗くする	sns.set(pallete='dark')
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
キューの要素を逆に並べ直す	deq.reverse()
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
折れ線グラフのバツ印を青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ダークスラテグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
ミディアムバイオレットレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
x,yの複素数	complex(x, y)
ダークゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
タイムスタンプデータが木曜日	aDatetime.weekday() == 3
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
空のリスト	[]
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
データフレームのカラムの平均値を求める	df[col].mean()
option: 色をシエナにする	color = 'sienna'
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
プロットのタイトルをセットする	plt.title('グラフの名称')
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
リストをリストを境界値としてビニングする	pd.cut(aList, aList)
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
二変数の最大値	max(x, y)
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
文字列は数値か調べる	s.isnumeric()
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
プロットの横軸にラベルを設定する	plt.xlabel('x軸ラベル')
option: グラフの色をダークマゼンタに変更する	color = 'darkmagenta'
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームのn行目を選択する	df.loc[n]
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
文字列が部分文字列で終了する	s.endswith(sub)
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
ヒストグラムの色をミディアムターコイズにする	plt.hist(データ列, color='mediumturquoise')
日付データが土曜日か調べる	aDate.weekday() == 5
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
データフレームのカラムの欠損値を直後の値で置換する	df[col].fillna(method='bfill')
データ列の欠損値を直後の値で置換する	ds.fillna(method='bfill')
y座標の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
配列の形状	aArray.shape
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
折れ線グラフを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
変数を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
グラフで使うフォントを指定する	sns.set(font=フォント名)
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
グラフに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
プロットで使用するフォントを指定する	sns.set(font=フォント名)
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
option: グラフの色を淡い茶色に変更する	color = 'tan'
カラムの中の欠損値の合計を数える	ds.isna().sum()
分類モデルを当てはめる	model.fit(説明変数, 目的変数)
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
折れ線グラフをブラック色として描画する	plt.plot(データ列x, データ列y, color='black')
赤い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームの数値を整数に丸める	df.round()
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
option: ペルーを使う	color = 'peru'
散布図に黒い三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
実数の指数部	math.frexp(x)[1]
option: グラフの色を紺碧に指定する	color = 'azure'
カテゴリ別でグループ化して、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
表データの上n行	df.head(n)
xの印字可能な文字列	ascii(x)
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
折れ線グラフをペールグリーン色として描画する	plt.plot(データ列x, データ列y, color='palegreen')
option: グラフの線の種類を破線に変更する	linestyle = 'dashed'
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
折れ線グラフの印を三角にする	plt.plot(データ列x, データ列y, marker='^')
実数の整数部	math.modf(x)[1]
イテラブルと配列について散布図を描画し、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
データフレームの欠損値をxで置き換える	df.fillna(x)
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
データフレームのそれぞれのグループごとの最小値を求める	df.groupby(column).min()
マゼンタで文字列をプリントする	print(f'\033[35m{value}\033[0m')
各列毎にデータフレームをグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
折れ線グラフを一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
グラフの用途をスライドに設定する	sns.set(context='talk')
データフレームのカラムの空文字を未入力値に変換しドロップする	df[col].replace('', np.nan).dropna()
配列と配列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
実数を整数にする	int(x)
リストをnからナンバリングする	enumerate(aList, start=n)
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
データ列のパーセンタイルを可視化する	plt.boxplot(データ列)
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
実数を実数で割った剰余を算出する	math.remainder(x, x2)
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
データフレームのカラムの値をValueMapでまとめて置換する	df[col].replace(ValueMap)
TSVファイルをヘッダを指定せず読む	pd.read_csv(filename, header=None)
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
縦棒グラフを紺色を使って描画する	plt.bar(データ列x, データ列y, color='darkblue')
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
横棒グラフをオレンジレッド色を使って描画する	plt.barh(データ列x, データ列y, color='orangered')
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
要素が集合に含まれるかどうか調べる	element in aSet
データフレームの欠損値を直前の値に指定する	df.fillna(method='ffill')
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
数列の変化を半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
文字列を右寄せにする	s.rjust(文字列幅)
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
文字列が部分文字列で終わるか判定する	s.endswith(sub)
一点鎖線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
ファイルを閉じる	f.close()
データフレームを2つの列によってによって大きい順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
データフレームの列の文字列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
文字列が全てアルファベットか調べる	s.isalpha()
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ベクトルの和	aArray + aArray2
option: ミディアムシアグリーン色を用いる	color = 'mediumseagreen'
数値をスタックの末尾に入れる	deq.append(element)
データフレームを列をキーにしてソートする	df.sort_values(by=column)
option: グラフの色をアクアマリンに変更する	color = 'aquamarine'
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
ファイルパスを絶対ファイルパスに変換する	os.path.abspath(filepath)
データフレームからランダムに一行を抽出する	df.sample()
▲印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
横棒グラフをピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='pink')
ブラックにヒストグラムの色を設定する	plt.hist(データ列, color='black')
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
option: グラフの色をオレンジに設定する	color = 'orange'
新しい回帰木モデルを準備する	model = sklearn.tree.DecisionTreeRegressor()
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
リストを境界値として配列をビン分割する	pd.cut(aArray, aList)
数値を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
やわらかい青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
実数のcos	math.cos(x)
データフレームの列と列をドロップする	df.drop([column, column2], axis=1)
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
数値の数値を求める	float(e)
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
リストをn個にビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列が大文字かテストする	s.isupper()
文字列をシンボルに変換する	sympy.Symbol(s)
降順にデータフレームを'A'列でによってソートする	df.sort_values(by='A', ascending=False)
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
配列とイテラブルの散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
正規分布による確率密度関数を使う	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
データフレームのリスト列の欠損値をxで置換する	df[aList].fillna(x)
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
辞書を浅くコピーする	dict(aDict)
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
リストとリストについて散布図を描画してマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
正規分布を使って疑似乱数を算出する	random.normalvariate(mu=0.5, sigma=0.2)
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
ラインを実線として描く	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
文字列が全て小文字かどうか	s.islower()
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
目盛り線	plt.grid(alpha=0.5)
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='turquoise')
文字列がアルファベットかどうか	s.isalpha()
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
データ列の平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
辞書の項目名を要素にする	aDict[key] = element
表データをインポートする	import pandas as pd
分類モデルのPPVを求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
折れ線グラフの色をゴーストホワイトに変更する	plt.plot(データ列x, データ列y, color='ghostwhite')
リストをn個に分割する	pd.cut(aList, n)
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
句読点文字を全部求める	string.punctuation
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
折れ線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
フローラルホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
データフレームのn行までを取り出す	df[:n]
星印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
セットの要素数	len(aSet)
毎回異なるように乱数を初期化する	random.seed()
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
イテラブルとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
異なる列をキーにして２つの表データを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
実数を小数点数で割った剰余を求める	math.remainder(x, x2)
カラムを丸める	ds.round()
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
リストに要素を加える	aList.append(element)
時計回りに円プロットをプロットする	plt.pie(データ列, startangle=90, counterclock=False)
文字列をコロンで分割し、列挙する	s.split(':')
折れ線グラフを淡い茶色色として描画する	plt.plot(データ列x, データ列y, color='tan')
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
折れ線グラフの色を珊瑚に設定する	plt.plot(データ列x, データ列y, color='coral')
ヒストグラムの色をライトコーラルに指定する	plt.hist(データ列, color='lightcoral')
ダークオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
二つのカウンタのいずれかに含まれる要素を求める	aCounter | aCounter2
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
option: フォントの色を耐火レンガに設定する	color = 'firebrick'
カラーバーを横向きで描く	plt.colorbar(orientation='horizontal')
データ列の尖度を求める	ds.skew()
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
データフレームを関数の値によってグループ化し要約統計量を計算する	df.groupby(関数).describe()
データフレームを関数の値によってグループ化し、記述統計量を求める	df.groupby(関数).describe()
カウンタをリストに変換する	list(aCounter)
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategray')
自然数LCMを求める	math.lcm(n, n2)
キーが辞書上で未定義か調べる	key not in aDict
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
文字列が無限に繰り返す列を求める	itertools.repeat(element)
マルーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
ドジャーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
マッピングのコピーを作る	aDict.copy()
文字列をアンダーライン付きで出力する	print(f'\033[4m{value}\033[0m')
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
Pandasで、Pandasの日付型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
イテラブルから配列を作る	np.array(iterable)
縦棒グラフを描画して棒の幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
オブジェクトはタプルの要素かどうか確認する	element in aTuple
折れ線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgray')
実数の双曲線余弦の逆数	math.acosh(x)
データフレームの行と列を入れ替える	df.T
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
配列とリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
両端キューを空にする	deq.clear()
データフレームを列名リストによって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
nはn2と等しい	n == n2
横棒グラフをカデットブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='cadetblue')
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
xが真	bool(x)
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
データフレームを列によって集約して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
データフレームからカテゴリデータの列だけ抽出する	df.select_dtypes('object')
nが2で割り切れないか調べる	n % 2 == 1
カウンタを高頻出な方から列挙する	aCounter.most_common()
ブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='brown')
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
イテラブルの各要素を関数でフィルタする	filter(func, iterable)
ヒストグラムの色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
濃いシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
データフレームの重複した行のみ	df[df.duplicated(keep=False)]
スクリプトファイルと同じフォルダのファイルのパスを求める	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
スラグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
エラーなく文字列のプレフィックスから部分文字列を取り除く	s.removeprefix(sub)
データフレームの列をベクトルに変換する	pd.get_dummies(df[column])
グラフを使用する準備をする	import matplotlib.pyplot as plt
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
option: n番目の列を行に設定する	index_col = n
配列とリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
year年を日付時刻にする	datetime.datetime(year=year, month=1, day=1)
列にリストを続ける	itertools.chain(iterable, iterable2)
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
リストとデータ列の散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
横軸の目盛に文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
リストの要素を並べ変える	sorted(aList)
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightseagreen')
折れ線グラフをシャルトリューズ色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
折れ線グラフをグリーンイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='greenyellow')
option: 色を黄色に設定する	color = 'yellow'
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
集合から任意の要素を取り出す	aSet.pop()
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
文字列を最後の部分文字列で分けた時の後半の文字列	s.rpartition(sub)[-1]
nとn2の論理和	n | n2
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
折れ線グラフを青紫色を使って描画する	plt.plot(データ列x, データ列y, color='violet')
折れ線グラフをバリーウッド色を用いて描画する	plt.plot(データ列x, データ列y, color='burlywood')
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフを破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
option: 色をアンティークホワイトに設定する	color = 'antiquewhite'
データフレームの列を目的変数にする	目的変数 = df['列名']
データ列を等しい量になるようにビン数nでビニングする	pd.qcut(ds, n)
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
リストのn番目のの値	aList[n]
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
データフレームから指定された２列を選択する	df[[column, column2]]
文字列を走査し、正規表現に複数行対応としてマッチするか調べる	re.search(pattern, s, flags=re.MULTILINE)
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
乱数シードを初期化する	random.seed()
ヒストグラムをインディアンレッド色を用いて描画する	plt.hist(データ列, color='indianred')
縦棒グラフをライトグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgray')
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームを各列毎にグループ化し、、文字列というグループを求める	df.groupby(column).get_group(s)
xが1、もしくは2	x == 1 or x == 2
青紫色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
xの絶対値を算出する	abs(x)
変数が0に近づくとき、数式の極限値を計算する	sympy.limit(e, z, 0)
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
実数以下の最大の整数	math.floor(x)
文字列を変数化して、パラメータにする	z = sympy.Symbol(s)
項目名がマッピングにない時、要素を追加する	aDict.setdefault(key, element)
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
２つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
データフレームのリスト列の中に文字列と文字列がいくつ存在するか数える	df[aList].isin([value, value2]).sum()
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
横棒グラフをミディアムアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
year年を日付にする	datetime.date(year=year, month=1, day=1)
淡いピンク色色でヒストグラムを描画する	plt.hist(データ列, color='lightpink')
option: ミディアムブルーにフォントの色を指定する	color = 'mediumblue'
データフレームを列の値でグループ化し、、各グループごとの件数を知る	df.groupby(column).size()
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: ライトグリーンにフォントの色を設定する	color = 'lightgreen'
データフレームのカラムが何月か見る	df[col].dt.month
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
option: イエローグリーンを使う	color = 'yellowgreen'
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
リストが空	len(aList) == 0
CSVファイルタブ区切りのファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
option: 白色を使う	color = 'white'
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
全要素を０で初期化したブール型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int32)
シードを初期化する	random.seed()
option: データ型として整数型を用いる	dtype = np.int
データフレームの列が文字列で始まる行を取り出す	df[df[column].str.startswith(s)]
プログラムの実行を適切に終了する	sys.exit(0)
折れ線グラフの印を菱形にする	plt.plot(データ列x, データ列y, marker='D')
目盛り線	plt.grid(linewidth=3.0)
二つのデータフレームをジョインする	pd.merge(df, df2)
option: グラフの色をクリムゾンに設定する	color = 'crimson'
パウダーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
線グラフをペールグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
線グラフをパールゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
範囲を指定して部分文字列を文字列の後ろから探す	s.find(sub, start, end)
タプルの中の最小値	min(aTuple)
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
ペアリストpairsからカウンタを作成する	collections.Counter(dict(pairs))
配列をビン分割する	pd.cut(aArray, aList)
本日のタイムスタンプ	datetime.datetime.now()
データ列を使う	import pandas as pd
折れ線グラフを半透明の一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ロージーブラウン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
折れ線グラフの菱形マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
ファイルをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
セットの濃度を求める	len(aSet)
データフレームを各列毎にグループ化し、カラムの最小値を算出する	df.groupby(column)[column2].min()
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
オブジェクトは文字列クラス	isinstance(obj, str)
データフレームを二つの列でで破壊的に整列する	df.sort_values(by=['A', 'B'], inplace=True)
データをL1ノルムとして正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
TSVをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
オブジェクトが関数	callable(obj)
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
予測データのコンフュージョン・マトリックスを求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
組の長さを見る	len(aTuple)
配列の内積	np.dot(aArray, aArray2)
データフレームを各列毎に分類して文字列というグループを使う	df.groupby(column).get_group(s)
クラス分類のリコールを算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
データ列とリストについて散布図を描画してマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
プロット中の文字化けを防ぐ	sns.set(font='IPAexGothic')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
散布図に赤い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
option: ブラック色を使用する	color = 'black'
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
双方向キューの中に要素が含まれてるかどうか調べる	element in deq
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
表示できる最大行数を減らす	pd.set_option('display.max_rows', n)
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
マッピングのキーとその値を列挙する	aDict.items()
ゴールド色でヒストグラムを描画する	plt.hist(データ列, color='gold')
ダークレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
マッピングから最後の値を取り出す	aDict.popitem()
タプルのn番目からn2番目までの部分	aTuple[n:n2]
二数の最小値	min(x, y)
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
日付データが日付データと同時か判定する	aDate == aDate2
棒グラフをフクシア色を使って描画する	plt.bar(データ列x, データ列y, color='fuchsia')
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
散布図に四角印を加える	plt.scatter(データ列x, データ列y, marker='s')
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
カウンタ同士でユニオン	aCounter | aCounter2
目盛線	plt.grid(linewidth=3.0)
データフレームを表示するとき折り返しをしない	pd.set_option('expand_frame_repr', False)
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
リストをビンニングする	pd.cut(aList, aList)
データフレームの重複した行だけを抽出する	df[df.duplicated(keep=False)]
折れ線グラフの丸マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
option: ディープスカイブルーにグラフの色を指定する	color = 'deepskyblue'
0から始まるn個の整数リストを作る	list(range(n))
配列とリストの散布図を描いて、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
リストを引数として展開して表示する	print(*aList, sep=',')
option: グラフの色をオリーブに設定する	color = 'olive'
グラフのx軸のラベルを指定する	plt.xlabel('x軸ラベル')
option: 複数行に対応する	flag = re.MULTILINE
option: モカシンを使用する	color = 'moccasin'
エラーを無視して文字列をバイト列にする	s.encode(errors='ignore')
線グラフを紺碧色を使って描画する	plt.plot(データ列x, データ列y, color='azure')
option: ペルーにフォントの色を設定する	color = 'peru'
散布図の右三角印の色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
破壊的に列によってデータフレームを小さい順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
日付データをISO8601書式の文字列にする	aDate.isoformat()
ヒストグラムをサドルブラウン色を使って描画する	plt.hist(データ列, color='saddlebrown')
option: ベージュを用いる	color = 'beige'
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
日付データは何曜日か知る	aDate.weekday()
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
折れ線グラフに黒い上三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
リストとリストについて散布図を描いて、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
カウンタのktopを列挙する	aCounter.most_common(k)
データフレームの重複した行数のマスクを使う	df.duplicated()
プロットの短い説明の位置を指定する	plt.legend(loc=(x, y))
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
列を累加した列	itertools.accumulate(iterable)
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
３変数の最も大きい値を求める	max(x, y, z)
部分集合	aSet.issubset(aSet2)
ゼロ埋めされた整数型のベクトル	np.zeros(要素数, dtype=np.int)
ミディアムターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
ベクトルは何のデータ型か調べる	aArray.dtype()
ファイルを全部、読み込む	f.read()
リストを境界値としてデータ列を分割する	pd.cut(ds, aList)
TSVファイルからCSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
線グラフをデピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='deeppink')
option: 色をスノーにセットする	color = 'snow'
ダークグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
1文字だけ標準入力から読み込む	sys.stdin.read(1)
文字列中の部分文字列の出現をカウントする	s.count(sub)
クラス分類をKNNを使ってする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
黒い大バツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームの中で列に重複があるか見る	df.duplicated(subset=column)
アクアマリンにヒストグラムの色をする	plt.hist(データ列, color='aquamarine')
xが一桁の正の整数か調べる	0 <= x <= 9
折れ線グラフを赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ヒストグラムの色をローングリーンに指定する	plt.hist(データ列, color='lawngreen')
浮動小数点数を文字列に変換する	str(x)
nはn2と等しいか調べる	n == n2
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
データ列のどの値が頻出か調べる	ds.mode()
回帰木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
黒い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
n2がn以上かつ、n3以下	n <= n2 and n2 <= n3
ミディアムアクアマリン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
グラフのx座標のラベルを変更する	plt.xlabel('x軸ラベル')
option: フォントの色をシーグリーンに指定する	color = 'seagreen'
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
カウンタのそれぞれの項目を、その出現回数だけ列挙する	aCounter.elements()
xを浮動小数点数型に変換する	float(x)
データフレームの値が欠損値か調べる	df.isna()
値を黄色でプリントする	print(f'\033[33m{value}\033[0m')
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
option: 色をライムグリーンに設定する	color = 'limegreen'
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
散布図の星マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
リストを赤色でプリントする	print(f'\033[31m{value}\033[0m')
実数の双曲線正接の逆数を計算する	math.atanh(x)
縦棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
イテラブルを文字列リストに変換して、'改行でつなげる	'\n'.join(map(str, iterable))
option: フォントの色をモカシンに設定する	color = 'moccasin'
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
折れ線グラフに青い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
リストを太文字で表示できる文字列にする	f'\033[1m{value}\033[0m'
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
折れ線グラフのマーカーをポイント印にする	plt.plot(データ列x, データ列y, marker='.')
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
n個にリストを分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
環境のバイトオーダを用いる	sys.byteorder
折れ線グラフにダイアモンド印を加える	plt.plot(データ列x, データ列y, marker='D')
別の文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub)
二次元組をflattenする	sum(aTuple)
実数の値が整数か確認する	x.is_integer()
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
データ列を中央値でビン分割する	pd.qcut(ds, 2)
集合からエラーなく値を除く	aSet.discard(element)
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
ミディアムターコイズ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
縦棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームを'A'列と'B'列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
２つのマッピングを階層的につなぐ	collections.ChainMap(aDict, aDict2)
イテラブルを文字列に変換して、空白で連結する	' '.join(map(str, iterable))
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
折れ線グラフにバツ印を使う	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s')
変数の値をスワップする	x, y = y, x
データフレームの列の値が欠損値かどうか調べる	df[col].isna()
データ列と数列についての散布図にrgbのダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
グラフの見栄えを綺麗にする	import seaborn as sns
ミッドナイトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
散布図の四角マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
formatのパターンで文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
モデルの残差を求める	目的変数 - model.predict(説明変数)
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
黒い▼マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
文字列を小文字にする	s.lower()
浮動小数点数の逆双曲線余弦を求める	math.acosh(x)
円グラフの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
option: バリーウッドにグラフの色を設定する	color = 'burlywood'
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
外れ値に強い線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
リストを柱状グラフにする	plt.hist(データ列)
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
データフレームを複数の列の値によってグループ化し基本統計量を算出する	df.groupby(columns).describe()
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
文字列中にひとつでも非アルファベットが含まれるか	any(not c.isalpha() for c in s)
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
箱ひげ図としてデータ列をプロットする	plt.boxplot(データ列)
折れ線グラフに青いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
option: マーカーを四角に変更する	marker = 's'
ブランチドアーモンド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
整数nは配列のどれかか調べる	n in aArray
ダークシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
option: 貝殻色を使う	color = 'seashell'
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
カテゴリでグループ化して、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
貝殻色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
データフレームの中のカラムをn個に分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
option: 色をライトブルーに設定する	color = 'lightblue'
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
オブジェクトはリストに含まれないか調べる	element not in aList
ミントクリーム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
散布図の右三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
プロットの中の縦軸に説明を付ける	plt.ylabel('y軸ラベル')
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
データをスケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
主成分分析としてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
散布図に左三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='<')
パールゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
実数の双曲線正弦の逆数	math.asinh(x)
四分位点を用いて標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
折れ線グラフをダークターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
ファイルの絶対ファイルパス	os.path.abspath(filepath)
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
カラムの欠損値を最大値で埋める	ds.fillna(ds.max())
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
要素が辞書の値として含まれている	element in aDict.values()
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
プラットホーム名	sys.platform
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
文字列の変数名を数式にする	sympy.Symbol(s)
リストの推移を赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
２つの数値をコロンで区切ってプリントする	print(value, value2, sep=':')
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
縦棒グラフを描いて、バーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
year年のタイムスタンプ	datetime.datetime(year=year, month=1, day=1)
option: ライムグリーンにグラフの色を変更する	color = 'limegreen'
ヒストグラムの色をパレットトルコイズに指定する	plt.hist(データ列, color='paleturquoise')
柱状グラフを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
下線付きで変数をプリントする	print(f'\033[4m{value}\033[0m')
ヒストグラムをスプリンググリーン色を用いて描画する	plt.hist(データ列, color='springgreen')
折れ線グラフを色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
フォレストグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
グラフの色を明るくする	sns.set(pallete='bright')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
データフレームの中で、列に重複があるか確認する	df.duplicated(subset=column)
両端キューをタプルに変換する	tuple(deq)
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: フォントの色をパウダーブルーに設定する	color = 'powderblue'
線グラフを色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
文字列の先頭から空白を取り除く	s.lstrip()
符号付きで整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
折れ線グラフをターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='turquoise')
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
option: グラフの色をペルーに設定する	color = 'peru'
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
データフレームの中にと文字列が含まれるか調べる	df.isin([value, value2])
option: やわらかい青を使う	color = 'cornflowerblue'
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
文字列をコロンで区切って、列挙する	s.split(':')
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
全印字可能な文字	string.printable
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
タプルの合計値	sum(aTuple)
文字列中に非英数字があるか調べる	any(not c.isalnum() for c in s)
連立方程式の解を算出する	sympy.solve([e, e2])
リストを分割数nでビン分割する	pd.cut(aList, n)
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
itertoolsモジュールをインポートする	import itertools
n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
四角マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
ロバスト推定を用いて回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
小数点数のハイパボリック・サインを計算する	math.sinh(x)
スラッシュで区切って二つの文字列をプリントする	print(value, value2, sep='/')
ファイルを読み込みモードとしてオープンする]	open(filepath, mode='r')
配列を転置する	aArray.T
線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフの色をリネンに指定する	plt.plot(データ列x, データ列y, color='linen')
文字列のケースを変換する	s.casefold()
リストをnから順序付けする	enumerate(aList, start=n)
Pandasで、フォーマットを用いて文字列をPandasの日付型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
縦棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
折れ線グラフのダイアモンド印を赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
縦棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
rgbの▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: フォントの色をミッドナイトブルーに設定する	color = 'midnightblue'
データフレームの空文字を欠損値に変換しドロップする	df.replace('', np.nan).dropna()
option: 青色を使う	color = 'blue'
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
散布図のマーカーを丸印にする	plt.scatter(データ列x, データ列y, marker='o')
option: ブルーバイオレットにグラフの色を設定する	color = 'blueviolet'
菱形マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
入力から二つの文字列を読み込む	A, B = map(str, input().split())
カウンタを少ない順にリストとして得る	aCounter.most_common()[::-1]
散布図に四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
ファイルパスからストリームをオープンして]、fileとする	file = open(filepath)
昇順に二つの列によってデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True)
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
現在をタプルに変換する	datetime.datetime.today().timetuple()
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
線グラフの色をダークレッドに設定する	plt.plot(データ列x, データ列y, color='darkred')
リストとリストの散布図を描き、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
データ列の各データが何回出現するか見る	ds.value_counts()
折れ線グラフの右三角印を黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
option: データ型としてブール型を使う	dtype = np.int32
黒い丸マーカーをリストとリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategrey'
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
option: デピンク色を使う	color = 'deeppink'
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
散布図の菱形マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
1行から二つの文字列を読み込む	A, B = map(str, input().split())
日付時刻データの日付	aDatetime.date()
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
nがn2で割り切れないか調べる	n % n2 != 0
データ列をビン数nで等量でビン分割する	pd.qcut(ds, n)
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
データフレームのリストカラムの中にいくつ欠損値が存在するか求める	df[aList].isna().sum()
Pandasで、文字列のUNIX時間から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
ドジャーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
あらかじめ大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
散布図を三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームとデータ列を横方向につなぐ	pd.concat([df, ds], axis=1)
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
各列毎にデータフレームをグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
グリーン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
縦棒グラフをクリムゾン色として描画する	plt.bar(データ列x, データ列y, color='crimson')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
全要素を1で初期化したベクトル	np.ones(要素数, dtype=np.int)
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
スタックの値をインプレースに反転する	deq.reverse()
データフレームを列でグループ化して、列の要約統計量を算出する	df.groupby(column).describe()[column2]
ファイルパスを追加用にオープンする]	open(filepath, mode='a')
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームの列の値はNaNか調べる	df[col].isna()
ミディアムスプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
正規分布で疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
文字列がタプルの要素でないか調べる	element not in aTuple
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
横棒グラフをモカシン色を用いて描画する	plt.barh(データ列x, データ列y, color='moccasin')
部分文字列で文字列を区切って、列挙する	s.split(sub)
n個にリストを等間隔でビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
リストと数列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
option: グラフの色をパウダーブルーにセットする	color = 'powderblue'
散布図をダークグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgray')
両端キューが空かどうかテストする	len(deq) == 0
散布図のマーカーの太さを変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
黒色でリストをプリントする	print(f'\033[30m{value}\033[0m')
リストは全て真か	all(aList)
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
文字列の末尾から部分文字列を消す	s.rstrip(sub)
実数のn乗	pow(x, n)
データフレームを列名リストによってまとめたグループ	df.groupby(columns)
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
実線にヒストグラムの線種を設定する	plt.hist(データ列, linestyle='solid')
テキストファイルファイル名がか	filename.endswith('.txt')
オブジェクトにプロパティが存在するかどうか	hasattr(obj, プロパティ名)
n割るn2を切り上げる	(n + n2 - 1) // n2
折れ線グラフのポイントマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: フォントの色をミスティローズに設定する	color = 'mistyrose'
文字列中にひとつでも非数字が含まれるかどうか	any(not c.isdigit() for c in s)
棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
ヒストグラムの色をシーグリーンに変更する	plt.hist(データ列, color='seagreen')
リストと配列について散布図を描画してバツマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
二つの文字列を順にプリントする	print(value, value2)
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
リストのn番目からn2番目までの部分を取り出す	aList[n:n2]
グラフの描画を見やすくする	import seaborn as sns
データフレームのリストカラムのNaNを直前の値にする	df[aList].fillna(method='ffill')
縦棒グラフをダークターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
２つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
nからn2までの整数列を見る	list(range(n, n2+1))
データフレームの中の列をビン数nで分割する	pd.cut(df[col], n)
option: ライトイエロー色を使う	color = 'lightyellow'
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
ヒストグラムの色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
TSV形式のファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
option: 丸マーカーを描画する	marker = 'o'
ドジャーブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
ベクトルの要素ごとのアダマール積	np.multiply(aArray, aArray2)
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
に箱ひげ図を用いてデータフレームをグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
文字列をコロンで区切り、、列挙する	s.split(':')
option: ダークターコイズ色を使う	color = 'darkturquoise'
SJISでファイルパスをオープンする]	open(filepath, encoding='shift_jis')
イテラブルを文字列に変換して、'改行で連結する	'\n'.join(map(str, iterable))
タイムスタンプデータが何月か知る	aDatetime.month
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
ストリームにxを文字列に変換して書き込む	f.write(str(x))
変数について数式の積分を計算する	sympy.integrate(e, z)
日付データの月数を使う	aDate.month
データフレームのリストカラムの平均値	df[aList].mean()
ヒストグラムの色をレベッカパープルにする	plt.hist(データ列, color='rebeccapurple')
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
option: グラフの色をグリーンに設定する	color = 'green'
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
データフレームが正規分布からどの程度、歪んでいるか確認する	df.kurt()
option: グラフの色をデピンクに設定する	color = 'deeppink'
グラフの中に枠なしのデータラベルを入れる	plt.legend(frameon=False)
データフレームの列の値がxでない行をフィルタする	df[df[column] == x]
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
シーケンスを集合に追加更新する	aSet.update(iterable)
データフレームのカラムの欠損値を最小値に指定する	df[col].fillna(df[col].min())
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
折れ線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
上位集合か	aSet.issuperset(aSet2)
option: 色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
大文字・小文字を無視して事前に正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
option: フォントの色をスプリンググリーンに変更する	color = 'springgreen'
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
列をキーとして２つのデータフレームを結合する	pd.merge(df, df2, on=column)
ファイルをバイナリ書き込みモードとして開く]	open(filepath, mode='wb')
分割数nとしてリストを等しい量になるように分割する	pd.qcut(aList, n)
rgbの三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
グラフの色をパステル調にする	sns.set(pallete='pastel')
線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をダークオーキッドに指定する	plt.hist(データ列, color='darkorchid')
ValueMapでまとめてデータフレームの値を置き換える	df.replace(ValueMap)
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
赤い点線としてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: ポイントマーカーを描画する	marker = '.'
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
データフレームのヒストグラムを縦横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
option: グラフの色をドジャーブルーに変更する	color = 'dodgerblue'
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
散布図をラベンダーブラッシュ色を使って描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
青い▽マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
n足すn2	n + n2
option: ディムグレーにグラフの色を設定する	color = 'dimgrey'
データフレームを列でグループ化し、、それぞれのグループの個数を計算する	df.groupby(column).count()
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
インデント付きで辞書を文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
JSON形式のバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
バイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
折れ線グラフに青い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: グラフの色を暗い赤に設定する	color = 'darkred'
ヒストグラムをミディアムスプリンググリーン色として描画する	plt.hist(データ列, color='mediumspringgreen')
コマンドの第二引数	sys.argv[1]
nとn2の積	n * n2
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
文字の文字コード	ord(ch)
標準入力から1行だけ改行なしに読む	sys.stdin.readline().rstrip()
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
文字列中に部分文字列が含まれる	sub in s
ヒストグラムの色をパレットトルコイズに変更する	plt.hist(データ列, color='paleturquoise')
最大長nの両端キューを生成する	collections.deque(maxlen=n)
option: ハニーデューを使う	color = 'honeydew'
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
度数分布図を描いて、区間数を設定する	plt.hist(データ列, bins=区関数)
整数nを八進表記に変換する	oct(n)
整数nを十六進文字列に変換する	hex(n)[2:]
大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X')
リストとイテラブルについてリストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームの第一四分位数を求める	df.quantile(0.25)
数列とリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
数値を浮動小数点数に変換する	float(e)
サドルブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
データフレームの行を条件で消すには	df[(df[column] == x) & (df[column2] == x2)]
散布図を赤いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
実数の自然対数を求める	math.log(x)
ヒストグラムの色をクリムゾンに変更する	plt.hist(データ列, color='crimson')
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
option: 濃いシアンにフォントの色を変更する	color = 'darkcyan'
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
組の末尾を取り除く	aTuple[:-1]
線形回帰モデルの切片	model.intercept_
縦棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
今日が木曜日か調べる	datetime.datetime.today().weekday() == 3
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
option: マーカーを左三角に変更する	marker = '<'
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
部分文字列かどうか調べる	sub in s
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
四分位点でデータを標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
リストのオブジェクトの位置をエラーなく使う	aList.index(element) if element in aList else -1
黒い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
Pandasでエポック秒の文字列からdatetime64型に変換する	pd.to_datetime(s, unit='s', utc=True)
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
ライムにヒストグラムの色を指定する	plt.hist(データ列, color='lime')
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
option: ロージーブラウン色を使用する	color = 'rosybrown'
ベクトルの計算を行う	import numpy as np
データフレームからn行をランダムに抽出する	df.sample(n)
文字列一つのりスト	[element]
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
option: 分割記号を文字列にする	sep = s
データフレームから重複する行を削除する	df.drop_duplicates()
ダークスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
データフレームを小数点以下n桁で丸める	df.round(n)
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
文字列中のパターンを新しい文字列を用いて置換する	re.sub(pattern, newsub, s)
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
度数分布図を描画して、ビン数を変更する	plt.hist(データ列, bins=区関数)
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
10を底とする実数の対数を計算する	math.log10(x)
イテラブルを文字列に変換して、カンマで連結する	','.join(map(str, iterable))
文字列中に非小文字が含まれるか	any(not c.islower() for c in s)
実数が無限大か調べる	math.isinf(x)
四角マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
縦棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
xが1、もしくは2か調べる	x == 1 or x == 2
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
実数を実数で除算して、切り捨てる	x // y
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
カウンタからゼロカウントを取り除く	+aCounter
オブジェクトが組の要素でないかどうか調べる	element not in aTuple
列を集合に変換する	set(iterable)
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
無限にオブジェクトが繰り返す列	itertools.repeat(element)
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
列ででデータフレームを破壊的に並べる	df.sort_values(by=column, inplace=True)
ファイル名がJSONファイルか調べる	filename.endswith('.json')
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
セットの補集合	aSet.difference(aSet2)
データフレームのリスト列の欠損値を中央値にセットする	df[aList].fillna(df[aList].median())
文字列を最後の部分文字列で二分する	s.rpartition(sub)
線形回帰モデルの残差を求める	目的変数 - model.predict(説明変数)
折れ線グラフに下三角印を使用する	plt.plot(データ列x, データ列y, marker='v')
option: ディムグレー色を使う	color = 'dimgray'
スピアマンとしてデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
折れ線グラフの三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
文字列の終了位置より前に部分文字列が存在するか	s.find(sub, 0, end) != -1
Pythonのバージョン	sys.version
第二四分位数でデータフレームの欠損値を補う	df.fillna(df.median())
option: △マーカーを描画する	marker = '^'
ヒストグラムの色をライトサーモンに変更する	plt.hist(データ列, color='lightsalmon')
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
棒グラフをシーグリーン色として描画する	plt.bar(データ列x, データ列y, color='seagreen')
両端キューをリストから作る	collections.deque(iterable)
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
スタックに要素をエンキューする	deq.appendleft(element)
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
ベクトル間のユークリッド距離	math.dist(point, point2)
データフレームのカーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
数を実数で除した余り	x % y
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
縦棒グラフを描く	plt.bar(ラベル列, データ列)
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
nがn2未満またはn3以上か確認する	n < n2 or n >= n3
行列の列ごとの最小を計算する	np.min(aArray, axis=0)
option: ダークオリーブグリーンを用いる	color = 'darkolivegreen'
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
パターンにマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
オプションで標準出力を出力にする	file = sys.stdout
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
真部分集合かどうか調べる	aSet < aSet2
列からn個サンプリングする	random.sample(iterable, k=n)
横棒グラフをシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='cyan')
nの8進文字列を使う	oct(n)[2:]
データフレームを各グループごとに色付けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
縦棒グラフをペールグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='palegreen')
ヒストグラムを青くする	plt.hist(データ列, color='b')
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
散布図のマーカーの大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
文字列に日本語が含まれる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データ列をフォーマットfmtとして日付データに変換する	pd.to_datetime(ds, format=fmt)
nがn2より小さいか調べる	n < n2
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
option: 星印を描画する	marker = '*'
数値時刻のデータフレームのcollから日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
y座標の目盛を整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
ベクトルを2次元1列に変形する	aArray.reshape(-1, 1)
スピアマンでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
option: 右三角印を描画する	marker = '>'
データフレームの列の要約統計量	df[col].describe()
折れ線グラフに青い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
両端キューの先頭に要素を追加する	deq.appendleft(element)
ライトゴールドロディイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
option: ライトグリーン色を使う	color = 'lightseagreen'
浮動小数点数の常用対数を求める	math.log10(x)
散布図をバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='violet')
データフレームを列によって整列して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
数値の変数に数値を代入する	e.subs(z, e2)
二つのデータフレームを結合する	pd.merge(df, df2)
コーンズシルクにヒストグラムの色を指定する	plt.hist(データ列, color='cornsilk')
タプルの末尾の要素	aTuple[-1]
配列とリストの散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームの列がxかつ列がx2である行を取り出す	df[(df[column] == x) & (df[column2] == x2)]
折れ線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
折れ線グラフの四角印を青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
option: 青緑にグラフの色を設定する	color = 'turquoise'
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
スカイブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
疑似乱数を発生させる	random.random()
カラムの一意な値を見る	df[col].unique()
リストのn番目の要素を削除する	del aList[n]
単位行列を作る	np.eye(行数, 列数)
データフレームのカラムの曜日は何日目か見る	df[col].dt.dayofweek
横棒プロットの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
リストをひとつ置きに取り出す	aList[::2]
イテラブルをカウンタにする	collections.Counter(iterable)
データフレームのカラムの空文字を未入力値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
散布図に黒い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
ひとつでも英数字が文字列内に含まれる	any(c.isalnum() for c in s)
ヒストグラムをカーキ色を用いて描画する	plt.hist(データ列, color='khaki')
上三角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
列の最頻値を求める	ds.mode()
オプションで標準出力を使う	file = sys.stdout
ラインを一点鎖線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: マーカーの色を変更する	markerfacecolor = '#800080'
行列の行ごとの分散を求める	np.var(aArray, axis=1)
文字列に漢字が含まれるかどうか	re.search('[\u4E00-\u9FD0]', s)
ダークオレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
フォレストグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
赤いグリッド線を引く	plt.grid(color='r')
option: 色を淡いピンク色に設定する	color = 'lightpink'
日付時刻データが火曜日	aDatetime.weekday() == 1
option: バリーウッドにグラフの色を変更する	color = 'burlywood'
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
数式を微分する	sympy.diff(e)
ヒストグラムの色をシャルトリューズにセットする	plt.hist(データ列, color='chartreuse')
散布図をミディアムブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
整数nが配列のどれかか調べる	n in aArray
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
ボックスチャートを２つ並べて描画する	plt.boxplot([データ列, データ列])
オリベドラブ色でヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
データフレームのカラム名を列挙する	df.columns
スラグレーにヒストグラムの色を指定する	plt.hist(データ列, color='slategrey')
全ての十六進数字	string.hexdigits
散布図に黒い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
辞書をソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
横棒グラフをダーク・スラテグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
アンサンブル学習として回帰分析を行う	sklearn.ensemble.VotingRegressor()
データ列の推移を一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
日付データが日付データと同時か調べる	aDate == aDate2
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
日付データが日付データより早いか調べる	aDate < aDate2
表の行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
データフレームの列の欠損値をxで埋める	df[col].fillna(x)
データフレームで、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
JSONファイルファイル名がか	filename.endswith('.json')
option: エンコーディングを文字列の示す文字コードに設定する	encoding = s
整数nの二進文字列	bin(n)[2:]
データフレームのどの値が頻出か見る	df.mode()
データフレームの列の欠損値を中央値で埋める	df[col].fillna(df[col].median())
データフレームの列の各データ値の出現数	df[col].value_counts()
色差別なくカラーパレットをグラフの描画で使う	sns.set(pallete='colorblind')
オブジェクトのメモリビュー	memoryview(obj)
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームを千の位で丸めて、整数型にする	df.round(-3).astype(int)
折れ線グラフの▲マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフの色をディープスカイブルーに指定する	plt.plot(データ列x, データ列y, color='deepskyblue')
散布図に三角印を加える	plt.scatter(データ列x, データ列y, marker='^')
シーケンスをカウンタに変換する	collections.Counter(iterable)
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
列によってデータフレームをグループ化して、最小値を求める	df.groupby(column).min()
棒グラフをダーク・スラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ミスティローズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
折れ線グラフの色をアクアマリンに指定する	plt.plot(データ列x, データ列y, color='aquamarine')
最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
option: マーカーの色を濃い青にする	markerfacecolor = 'darkblue'
option: 色の透明度を変更する	alpha = 0.5
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
標準出力のバッファをフラッシュする	sys.stdout.flush()
茶色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
実数を実数で整数除算する	x // y
散布図をバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
option: ミディアムアクアマリン色を使用する	color = 'mediumaquamarine'
データフレームを二つの列によってグループ化する	df.groupby(['A', 'B'])
ヒストグラムをネイビー色を用いて描画する	plt.hist(データ列, color='navy')
縦棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
カウンタの項目のカウントを使う	aCounter[element]
横棒グラフをダークスラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategray')
一点鎖線に線の線の種類を指定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
半透明の一点鎖線を用いて折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
データフレームの中の列と列に重複があれば、落とす	df.drop_duplicates(subset=column)
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
本日の月数	datetime.datetime.today().month
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
赤い三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフを星印で描画する	plt.plot(データ列x, データ列y, marker='*')
散布図の▲印の線幅を変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ダークスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
直後の値でデータフレームの列の欠損値を埋める	df[col].fillna(method='bfill')
データ列の曜日が何日目か見る	ds.dt.dayofweek
文字列から部分文字列を全て取り除く	s.replace(sub, '')
ヒストグラムをピンク色として描画する	plt.hist(データ列, color='pink')
文字列の大文字小文字を入れ替える	s.swapcase()
グラフの補助目盛を有効にする	plt.minorticks_on()
実行環境のバイトオーダを知る	sys.byteorder
赤いポイントマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
線グラフを赤い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
タイムスタンプデータをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
nが3の倍数か確認する	n % 3 == 0
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
データフレームの各グループごとの個数	df.groupby(column).count()
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームを列によってグループ化し、、それぞれのグループ毎の最大値を求める	df.groupby(column).max()
リストをタプルにする	tuple(aList)
モカシン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
option: シーグリーンを使う	color = 'seagreen'
三二ビット整数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.int16)
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
n2がnより大きく、かつn3未満かどうか調べる	n < n2 and n2 < n3
option: 左三角印を加える	marker = '<'
ヒストグラムとして配列を可視化する	plt.hist(データ列)
線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフを黄緑色を使って描画する	plt.plot(データ列x, データ列y, color='chartreuse')
行列を平坦にする	aArray.flatten()
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
option: 暗い赤色を使う	color = 'darkred'
option: 欠損値を先頭に来るようにする	na_position = 'first'
ファイルパスをEUCで開く]	open(filepath, encoding='euc_jp')
パーセプトロンとしてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
数式の微分を算出する	sympy.diff(e)
縦棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
データ列とリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ヒストグラムの色をゴールドに変更する	plt.hist(データ列, color='gold')
実数に実数を掛ける	x * y
縦棒プロットを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
横棒グラフをアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='aquamarine')
文字列が文字列より辞書順で前かどうか調べる	s < s2
黒い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='k')
option: グラフの色を青紫に変更する	color = 'violet'
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: グラフの色をカーキに設定する	color = 'khaki'
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
nが1、もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
option: ダーク・スラテグレー色を用いる	color = 'darkslategrey'
データフレームを列名リストによって並べ直し、更新する	df.sort_values(by=column, inplace=True)
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
文字列が文字列リストに含まれるか調べる	s in aStringList
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
縦棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
数式の数値を算出する	float(e)
タプルの最後のn要素を取り除く	aTuple[:-n]
散布図をミッドナイトブルー色として描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ヒストグラムの色をティールにセットする	plt.hist(データ列, color='teal')
ホットピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
アクア色で線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
TSVファイルからSJISでCSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
nの十六進リテラルを使う	hex(n)
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
データフレームのn行まで抽出する	df[:n]
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
スタックが空であるか調べる	len(deq) == 0
散布図をホットピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='hotpink')
データフレームを各列毎にグループ化し、、列の平均値を求める	df.groupby(column)[column2].mean()
文字列中の全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
縦棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
データ列を閾値を用いて二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフをスラグレー色を使って描画する	plt.plot(データ列x, データ列y, color='slategray')
ハローワールドと表示する	print('Hello World')
ファイルからファイル名を使う	os.path.basename(filepath)
文字列の右端が部分文字列か調べる	s.endswith(sub)
マップにキーワード引数を使って更新する	aDict.update(**kwargs)
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
ヒストグラムの色を珊瑚に設定する	plt.hist(データ列, color='coral')
option: ダークオレンジ色を使用する	color = 'darkorange'
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
マッピングの浅いコピーを作る	aDict.copy()
平均と分散でデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
グラフの名前を変更する	plt.title('グラフの名称')
値をキューのn番目に挿入する	deq.insert(n, element)
カウントプロットをプロットする	sns.countplot(x='列名', data=df)
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
データフレームをJSONLファイルから読む	pd.read_json(filename, orient='records', lines=True)
平均と標準偏差から乱数を発生させる	random.normalvariate(mu=0.5, sigma=0.2)
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
プロットを論文用に変更する	sns.set(context='paper')
セットを空にする	aSet.clear()
標準出力の出力先がターミナルか	sys.stdout.isatty()
主成分分析の準備をする	model = sklearn.decomposition.PCA(n_components=n)
ダークターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
配列の列ごとの標準偏差	np.std(aArray, axis=0)
外れ値に強い線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
オーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
データフレームのそれぞれのグループ毎の分散	df.groupby(column).var()
データ列の月を使う	ds.dt.month
データフレームの列の名前を付け直す	df.rename(columns={column: name})
辞書にキーが存在しないとき、要素を追加する	aDict.setdefault(key, element)
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
predicateFuncが真とならないイテラブルの部分を取り出す	itertools.dropwhile(predicateFunc, iterable)
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームを行によって降順でソートする	df.sort_index(ascending=False)
縦棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
全要素を０で初期化した三二ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
option: ライトスレイグレーにグラフの色を変更する	color = 'lightslategray'
option: 大バツマーカーを用いる	marker = 'X'
日付時刻データにn週間分、加える	aDatetime + datetime.timedelta(weeks=n)
グラフのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
疑似乱数を得る	random.random()
ポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.')
option: ダークレッド色を使用する	color = 'darkred'
列'A'と列'B'をキーにして2つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
整数nの八進表現	oct(n)
部分文字列	sub in s
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
散布図に黒いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
多次元データをSVDでパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
イテラブルと数列についての散布図に赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
リストの末尾から値をポップする	aList.pop()
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
option: パパイヤウィップにグラフの色を指定する	color = 'papayawhip'
データフレームの列がx以上かつx2未満の行を選ぶ	df[(x <= df[column]) & (df[column] < x2)]
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
リストとリストの散布図に文字列という簡単な説明用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
option: グラフの色をミッドナイトブルーにセットする	color = 'midnightblue'
ゼロ埋めされた配列	np.zeros(要素数)
コギーくんを使いたい	import kogi
パウダーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='powderblue')
折れ線グラフを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
リストをランダムにシャッフルする	random.shuffle(aList)
option: ホットピンクにグラフの色を設定する	color = 'hotpink'
散布図をrgbの▲マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストと配列の散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
nからstep間隔でいつまでもカウントアップする	itertools.count(start=n, step=step)
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
縦棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
option: コーンズシルク色を使う	color = 'cornsilk'
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
ミディアムシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
option: 未入力値を先頭に来るようにする	na_position = 'first'
リストの推移を青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
度数分布図を上限から下限までの区間で描く	plt.hist(データ列, range=(start, end))
ペールグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
ビン数nとしてデータフレームの中の列をビンニングし、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ヒストグラムをイエローグリーン色として描画する	plt.hist(データ列, color='yellowgreen')
緑色で実行結果をプリントする	print(f'\033[32m{value}\033[0m')
プロットの背景色を暗くする	sns.set(style='darkgrid')
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
星マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームを列でソートし、、新しいインデックスを加える	df.sort_values(columns).reset_index()
データフレームのリストカラムが正規分布からどの程度、尖っているか調べる	df[aList].skew()
rgbのクロスマーカーを配列と数列の散布図に描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
オプションで出力先をファイルに設定する	file = sys.open(filename, 'w')
データ列は正規分布からどの程度、尖っているか見る	ds.skew()
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
ネイビー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
option: グラフの色をミディアムターコイズに変更する	color = 'mediumturquoise'
データ列の中にいくつ欠損値があるか求める	ds.isna().sum()
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
列の全順列を求める	itertools.permutations(iterable)
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
破線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
黒いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームから指定されたデータ型の列名一覧	df.select_dtypes(型).columns
要素がスタックの中に存在するか調べる	element in deq
option: 文字コードをUTF8に設定する	encoding = 'utf-8'
黒い下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
カラムの第一四分位数を求める	ds.quantile(0.25)
ブルーバイオレットにヒストグラムの色を指定する	plt.hist(データ列, color='blueviolet')
オブジェクトのクラスを求める	type(obj)
多重集合	collections.Counter()
作画の縦横比を等しくする	plt.axis('equals')
辞書でカウンタを更新する	aCounter.update(aDict)
nが偶数か調べる	n % 2 == 0
option: オリベドラブに色をセットする	color = 'olivedrab'
データフレームのカラムがどれだけ、分散しているか見る	df[col].var()
ベクトルを変形する	aArray.reshape(行数, 列数)
本日をISO8601形式の文字列にする	datetime.datetime.today().isoformat()
イテラブルの各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
リストとリストを連結する	aList + aList2
横棒グラフをシエナ色を用いて描画する	plt.barh(データ列x, データ列y, color='sienna')
散布図に赤い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
ファイルをオープンして]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
データフレームのstart行目からend行目まで抽出する	df[start:end]
散布図をオレンジレッド色を使って描画する	plt.scatter(データ列x, データ列y, color='orangered')
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
rgbに棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
黄緑色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
シーケンスを文字列リストに変換して、タブで一つにする	'\t'.join(map(str, iterable))
横棒グラフをアンティークホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
文字列が文字列リストに含まれるか確認する	s in aStringList
データフレームのカラムのNaNを直前の値で埋める	df[col].fillna(method='ffill')
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
数式の平方根を計算する	sympy.sqrt(e)
標準出力	sys.stdout
文字列中の部分文字列を数える	s.count(sub)
0からnまでのスライス	slice(n)
折れ線グラフのバツマーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
オブジェクトのハッシュ値	hash(obj)
カラムのどの値が頻出か見る	ds.mode()
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
白色で散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
ブラック色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
Pythonパスの一覧	sys.path
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
ラベンダー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
データ列の尖度	ds.skew()
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
空のロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
単位正方行列	np.identity(n)
カウンタを低頻出方からリストとして得る	aCounter.most_common()[::-1]
日付時刻データと日付時刻データの時間差を求める	aDatetime - aDatetime2
０で全要素を初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
文字列を積極的に小文字に変換する	s.casefold()
データフレームを各列と列の組み合わせ毎にグループ分けし、、平均値を求める	df.groupby([column, column2], as_index=False).mean()
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
option: ダークカーキにグラフの色を設定する	color = 'darkkhaki'
赤色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
option: グラフの色をフクシアに変更する	color = 'fuchsia'
nを二進表記に変換する	bin(n)
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
rgbの右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列の中のASCII限定として正規表現によるマッチを求める	re.findall(pattern, s, flags=re.ASCI)
nまでの奇整数列	list(range(1, n, 2))
青い一点鎖線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームのカラムの中の欠損値の数を数える	df[col].isna().sum()
折れ線グラフのダイアモンドマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムの色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
option: ベクトルのデータ型を指定する	dtype = np.uint8
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
タプルをソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
option: グラフの色をパールバイオレットレッドに変更する	color = 'palevioletred'
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
シスル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
折れ線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
散布図に下三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='v')
折れ線グラフを半透明の点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームのヒートマップをグラフ化する	sns.heatmap(df.corr())
ミディアムブルーにヒストグラムの色を指定する	plt.hist(データ列, color='mediumblue')
リネン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
option: グラフの色をフローラルホワイトに指定する	color = 'floralwhite'
グラフにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
赤い大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
nがn2以上か	n >= n2
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をシエナに変更する	plt.hist(データ列, color='sienna')
データ列の中に文字列と日付データがあるか調べる	ds.isin([value, value2])
option: ピーチパフ色を使う	color = 'peachpuff'
文字列は印字できる	s.isprintable()
データフレームの内容を確認する	df.head()
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
ベクトルをリストから作成する	np.array(aList)
散布図の▽マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ファイルをバイナリ用にオープンする]	open(filepath, mode='rb')
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
ヒストグラムの色をカーキに変更する	plt.hist(データ列, color='khaki')
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
白い線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
辞書のキーに対応した値	aDict.get(key)
文字列中に部分文字列が含まれないか	sub not in s
option: ダークゴールデンロッド色を用いる	color = 'darkgoldenrod'
タプルの末尾からn番目以前の部分を抽出する	aTuple[:-n]
リストを2回あわせた直積	itertools.product(iterable, repeat=2)
option: シスルにグラフの色を変更する	color = 'thistle'
データ列の月	ds.dt.month
データフレームが正規分布からどの程度、尖っているか調べる	df.skew()
組をn回、加える	aTuple * n
グラフを使う準備をする	import matplotlib.pyplot as plt
折れ線グラフの左三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
ライトスチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
文字の文字コードを見る	ord(ch)
自然数の順列の総数を求める	math.perm(n)
データフレームのカラムの中に文字列とがあるかテストする	df[col].isin([value, value2])
ダーク・スラテグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkslategrey')
シエナにヒストグラムの色を設定する	plt.hist(データ列, color='sienna')
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
データフレームを二つの列の値でグループ化し要約統計量を算出する	df.groupby(['A', 'B']).describe()
option: 紺色を使う	color = 'darkblue'
何回まで再帰ができるかを	sys.getrecursionlimit()
実数から実数を減算する	x - y
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
データ列の散布図を描く	plt.scatter(データ列x, データ列y)
ロバスト分類器を用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
散布図をアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
今日が土曜日か調べる	datetime.datetime.today().weekday() == 5
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
値を白色にする	f'\033[37m{value}\033[0m'
ヒストグラムの色をトマトに指定する	plt.hist(データ列, color='tomato')
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
nがn2以下、または、n3以上か	n <= n2 or n >= n3
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
変数名をキーとして、辞書	dict(name=element)
option: ベージュにグラフの色を設定する	color = 'beige'
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
xとyの商と余りを同時に求める	divmod(x, y)
折れ線グラフの下三角印の大きさを指定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
データフレームのデータ型のリスト	df.dtypes
ダークサーモン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
中央値でデータ列の欠損値を補う	ds.fillna(ds.median())
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
リストのオブジェクトが最初に見つかるインデックスを探す	aList.index(element)
データ列の推移を青い点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
実行時の標準出力の出力先がターミナルか確認する	os.isatty(sys.stdin.fileno())
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームのNaNを最大値に設定する	df.fillna(df.max())
文字コードtextとして既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
改行する	print()
rgbのポイントマーカーを配列とデータ列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
グリッド線	plt.grid(color='#800080')
紺碧にヒストグラムの色を変更する	plt.hist(データ列, color='azure')
散布図の▲マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
option: グラフの色をディムグレーに設定する	color = 'dimgray'
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
棒グラフをダークカーキ色として描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
数を整数に変換する	int(x)
データフレームの列の平均値	df[col].mean()
ユニークな値を要素とする配列	np.unique(aArray)
配列をビン数nとして等量で分割する	pd.qcut(aArray, n)
ゼロ埋めされた論理値型の配列を作る	np.zeros(要素数, dtype=np.int32)
赤い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
小麦色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
ファイルをEUCで開く]	open(filepath, encoding='euc_jp')
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
エクセルファイルファイルからnというシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームの中の欠損値がある行を削除する	df.dropna()
option: 淡いピンク色を使う	color = 'lightpink'
グラフのタイトルを設定する	plt.title('グラフの名称')
option: ダークスレートブルー色を用いる	color = 'darkslateblue'
積み上げ横棒プロットを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
散布図にrgbの▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
小さい順にリストを並べる	sorted(aList, reverse=False)
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
JSONを使用する	import json
イテラブルの全順列	itertools.permutations(iterable)
横棒グラフをシスル色として描画する	plt.barh(データ列x, データ列y, color='thistle')
option: 色をアリスブルーに設定する	color = 'aliceblue'
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
データフレームの尖度	df.skew()
データフレームの列をインプレイスで削除する	df.drop(column, axis=1, inplace=True)
散布図に黒い△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
フクシア色でヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
横棒グラフを暗い赤色として描画する	plt.barh(データ列x, データ列y, color='darkred')
リストと数列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
文字列がタイトルケースか調べる	s.istitle()
スプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
option: グラフの色をコーンズシルクに指定する	color = 'cornsilk'
ファイルパスをベース名と拡張子に分割する	os.path.splitext(filepath)
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
ミディアムアクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumaquamarine')
タプルの値数	len(aDict)
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
option: グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
リストとリストについて散布図を描き、、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
文字列を改行で分割する	s.splitlines()
option: サドルブラウン色を使う	color = 'saddlebrown'
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
ラジアンの角度	math.degrees(x)
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
データ列間のMAEを計算する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
データ列の相関係数を算出する	scipy.stats.pearsonr(データ列, データ列2)
option: マーカーの太さを変更する	markeredgewidth = 2.5
文字列を代数計算の変数にする	sympy.Symbol(s)
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
要素がセットに含まれるか	element in aSet
文字列が数字か判定する	s.isdigit()
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
マッピングから項目名で指定された項目をポップする	aDict.pop(key)
真上位集合か調べる	aSet > aSet2
行列の差	aArray - aArray2
半透明の実線としてリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ヒストグラムの色を小麦色に指定する	plt.hist(データ列, color='wheat')
データフレーム全体をインデックスによって小さい順にソートする	df.sort_index(ascending=True)
n個の要素があるリスト	[element] * n
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
データフレームの標準偏差	df.std()
オールドレース色で散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
オブジェクトの参照カウント	sys.getrefcount(obj)
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
nがn2以下、もしくはn3以上か判定する	n <= n2 or n >= n3
色付きの破線としてラインを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
option: どの行もヘッダにしない	header = None
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
既存の行列を元に全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
Pythonパスにを追加する	sys.path.append(dir)
乱数で要素を埋めた配列	np.random.random(N)
クラス分類をスタッキングとしてする	sklearn.ensemble.StackingClassifier()
区切りで文字列を分割して、文字列リストに変換する	s.split(sep)
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
ヒストグラムをロージーブラウン色を使って描画する	plt.hist(データ列, color='rosybrown')
option: トマト色を使う	color = 'tomato'
データフレームのカラムの欠損値を50パーセンタイルに設定する	df[col].fillna(df[col].median())
ブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
option: フォントの色をオレンジレッドにセットする	color = 'orangered'
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
option: マーカーを三角に変更する	marker = '^'
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
ポスター用にグラフを設定する	sns.set(context='poster')
アリスブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
データフレームのそれぞれのグループ毎の最小値を計算する	df.groupby(column).min()
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
リストの平均値	sum(aList)/len(aList)
nが正の数か	n > 0
イテラブルの集合を作る	set(iterable)
ロージーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
十六進数文字列を整数に変換する	int(s, 16)
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
縦棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
文字列を部分文字列で分割した時の先頭の文字列を使う	s.partition(sub)[0]
Pandasで、フォーマットfmtを用いて文字列をPandasの日付型にする	pd.to_datetime(s, format=fmt)
option: 四角マーカーを加える	marker = 's'
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgray')
集合から要素を取り除く	aSet.remove(element)
ミディアムオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
列からカウンタを作る	collections.Counter(iterable)
option: アクアを使う	color = 'aqua'
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
option: 左三角マーカーを使う	marker = '<'
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
グラフに水平方向の破線を付ける	plt.axhline(y=0, linestyle='dashed')
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
フォレストグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
データフレームを'A'列によって大きい順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
2つのデータフレームを異なる列をキーにして全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
空の部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
ヒストグラムをライトスチールブルー色として描画する	plt.hist(データ列, color='lightsteelblue')
折れ線グラフをパールバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='palevioletred')
折れ線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
オブジェクトは集合クラスか	isinstance(obj, set)
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
散布図の菱形マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
列をキーにして2つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
option: グレー色を使う	color = 'grey'
平均付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
折れ線グラフの▼マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
青い点線を用いて線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームを関数の値によってグループ分けし、列挙する	[(name, group) for name, group in df.groupby(関数)]
シーケンスから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
日付時刻データの時間	aDatetime.time()
青紫色で線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
散布図を紺碧色として描画する	plt.scatter(データ列x, データ列y, color='azure')
列をキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
日付データをISO形式の文字列に変換する	aDate.isoformat()
ヒストグラムの色をミディアムオーキッドに変更する	plt.hist(データ列, color='mediumorchid')
ひとつでも非小文字が文字列中に含まれるか調べる	any(not c.islower() for c in s)
option: ミディアムパープル色を用いる	color = 'mediumpurple'
横方向に二つのデータフレームを連結する	pd.concat([df, df2], axis=1)
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
フローラルホワイトにヒストグラムの色をする	plt.hist(データ列, color='floralwhite')
複数の列によってでデータフレームを降順にソートする	df.sort_values(by=column, ascending=False)
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
データフレームのn行より後ろを抽出する	df[n:]
オプションで標準出力を用いる	file = sys.stdout
折れ線グラフをアイボリー色を用いて描画する	plt.plot(データ列x, データ列y, color='ivory')
オールドレース色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
日付時刻データが何秒か知る	aDatetime.second
データフレームの欠損値を最小値で補う	df.fillna(df.min())
列によってデータフレームを昇順に並べる	df.sort_values(by=column, ascending=True)
散布図の四角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o')
option: ダークレッドを用いる	color = 'darkred'
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
淡くカラーパレットをグラフの描画で使う	sns.set(pallete='muted')
赤い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
タイムスタンプデータからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
日付時刻データの分数	aDatetime.minute
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
データフレームを'A'列と'B'列の値によって集約する	df.groupby(['A', 'B'])
要素が全て1の行列	np.ones(要素数, dtype=np.int)
青い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
横棒グラフをやわらかい青色として描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
K-S検定を行う	scipy.stats.kstest(データ列, 'norm')
データフレームの欠損値をxで埋める	df.fillna(x)
データフレームの列の標準偏差を計算する	df[col].std()
異なるカラムをキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
整数nはリストのどれか	n in aList
グラフで使うy軸の説明をuntitledにセットする	plt.ylabel('y軸ラベル')
赤い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
ダークスラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
非空白が文字列中に含まれるか	any(not c.isspace() for c in s)
option: ASCII文字に限定する	flag = re.ASCII
データ列が何曜日か確認する	ds.dt.weekday_name
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
マッピングのキーの一覧を参照する	aDict.keys()
イテラブルから計数器を作る	collections.Counter(iterable)
rgbの星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
線グラフを実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームを列名リストによってソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
耐火レンガ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
オブジェクトにプロパティが存在する	hasattr(obj, プロパティ名)
データフレームの重複した行をマスクする	df.duplicated()
散布図をライムグリーン色として描画する	plt.scatter(データ列x, データ列y, color='limegreen')
数式の平方根を算出する	sympy.sqrt(e)
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
日付データが水曜日か調べる	aDate.weekday() == 2
整数nをn2分の一にする	n //= n2
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームの欠損値を直前の値で補う	df.fillna(method='ffill')
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
文字列の接頭辞が部分文字列かどうか調べる	s.startswith(sub)
option: フォントの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
option: カンマをセパレータで使う	sep = ','
x座標の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
リストの総和	sum(aList)
データ列の曜日の名前	ds.dt.weekday_name
カーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
nを十六進数文字列に変換する	hex(n)[2:]
リストと数列について散布図をプロットして、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
データフレームの列が文字列で始まらない行を取り出す	df[not df[column].str.startswith(s)]
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
濃いシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
線グラフの色をシーグリーンに指定する	plt.plot(データ列x, データ列y, color='seagreen')
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
option: トマト色を使用する	color = 'tomato'
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
黒い大バツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
option: フォントの色をインディアンレッドに設定する	color = 'indianred'
モデルの平均２乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
半透明の破線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: 貝殻色を用いる	color = 'seashell'
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
データ列の中にいくつNaNがあるかカウントする	ds.isna().sum()
ファイルから1文字、読み込む	f.read(1)
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
組をソートする	sorted(aTuple)
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
ラベンダーブラッシュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
ミディアムスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
データフレームの列のNaNを平均値に変更する	df[col].fillna(df[col].mean())
等差数列から整数乱数を生成する	random.randrange(start, end, step)
文字列はリストに含まれないか調べる	element not in aList
Pandasで、データフレームのcollのエポック秒からタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
変数を緑色で表示できる文字列に変換する	f'\033[32m{value}\033[0m'
列の長さnの順列	itertools.permutations(iterable, n)
文字列を区切り記号を用いて区切り、、列挙する	s.split(sep)
前もってパターンをコンパイルする	re.compile(pattern)
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
TSV形式のファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
数式を変数について微分する	sympy.diff(e, z)
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
option: NaNも含める	dropna = True
黒い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
両端キュー中の要素のインデックスを見る	deq.index(element)
ヒストグラムの色をサーモンに変更する	plt.hist(データ列, color='salmon')
折れ線グラフの線種を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
ヒストグラムをシーグリーン色を用いて描画する	plt.hist(データ列, color='seagreen')
茶色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
リストの文字列の位置をエラーなく求める	aList.index(element) if element in aList else -1
ヒストグラムのビン数を指定する	plt.hist(データ列, bins=区関数)
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
アルファベットから１文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
option: カーキ色を使う	color = 'khaki'
折れ線グラフの大バツ印を黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
二つのデータフレームを列をキーにして外部ジョインする	pd.merge(df, df2, on=column, how='outer')
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
グリッドの線種を点線に変更する	plt.grid(linestyle='dotted')
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
閾値でデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
辞書のキーを要素に設定する	aDict[key] = element
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
２次元リストをflattenする	sum(aList)
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
オレンジ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
フォーマットfmtとして文字列をタイムスタンプ型にする	pd.to_datetime(s, format=fmt)
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
ヒストグラムの色をモカシンに変更する	plt.hist(データ列, color='moccasin')
行列が何次元か調べる	aArray.ndim
線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
ディープスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
カテゴリで色分けして、データフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
データフレームを複数の列によって並べる	df.sort_values(by=column)
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
データフレームのカラムの中にいくつ日付データが存在するか数える	df[col].isin([value]).sum()
option: フォントの色をフォレストグリーンに設定する	color = 'forestgreen'
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
文字列が全て空白文字かどうか	s.isspace()
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
データフレームの欠損値を最頻値に変更する	df.fillna(df.mode().iloc[0])
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
ふたつの集合の積集合	aSet.intersection(aSet2)
列によってデータフレームをソートして、下位を取り出す	df.sort_values(columns).tail(n)
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
淡い茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
改行を取り除いて出力ストリームを一行ずつ読み込む	f.readline()
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
破線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
デピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
データ列を使う	import pandas as pd
行列の要素ごとに加算する	aArray + aArray2
option: フォントの色を紺に設定する	color = 'darkblue'
文字列を下線付きにする	f'\033[4m{value}\033[0m'
プロットの用途をプレゼンに設定する	sns.set(context='talk')
option: フォントの色をアクアに設定する	color = 'aqua'
n個分右に両端キューの要素を輪番で回す	deq.rotate(n)
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
xが-9以上、9以下	-9 <= x <= 9
データフレームを列によって昇順に並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームのカラムの欠損値を最大値に指定する	df[col].fillna(df[col].max())
数式を部分分数に展開する	sympy.apart(e)
ヒストグラムの色をスチールブルーにする	plt.hist(データ列, color='steelblue')
青い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
半透明の点線を用いてイテラブルの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
ダークサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
折れ線グラフの星印を青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
ふたつの集合の共通要素だけにする	aSet.intersection_update(aSet2)
リストを引数として展開して表示する	print(*aList)
予測データのコンフュージョン・マトリックスを算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
ダーク・スラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
データフレームを用いる	import pandas as pd
箱ひげ図に簡単な説明を設定する	plt.boxplot([データ列, データ列], labels=['A', 'B'])
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
日付時刻データの秒数を求める	aDatetime.second
option: ミントクリーム色を使う	color = 'mintcream'
方程式の解	sympy.solve(e)
文字列が文字列より辞書順で後か	s > s2
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
リストを改行せずプリントする	print(value, end='')
文字列をSJISでバイト列にする	s.encode(encoding='sjis', errors='ignore')
カウンタを集合に変換する	set(aCounter)
線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
option: 小麦色にグラフの色を設定する	color = 'wheat'
データフレームから数値データのカラムを抽出する	df.select_dtypes('number')
折れ線グラフの色をダークシアグリーンに指定する	plt.plot(データ列x, データ列y, color='darkseagreen')
ロバストな単回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
データフレームを表示するとき、折り返しをオフに増やす	pd.set_option('expand_frame_repr', False)
二つの関係が上位集合もしくは等しいか調べる	aSet > aSet2
ValueMapで一度にデータフレームのカラムの値を置き換える	df[col].replace(ValueMap)
データフレームを'A'列でソートして、NaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
折れ線グラフをミディアムブルー色を使って描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
縦軸の目盛りの表示値を変更する	plt.yticks(目盛りの値リスト)
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
実数の天井を計算する	math.ceil(x)
黄色いグリッド線を引く	plt.grid(color='y')
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図の三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
折れ線グラフのクロスマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: パレットトルコイズ色を用いる	color = 'paleturquoise'
整数nはセットのどれかか調べる	n in aSet
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
数値の符号を同じにする	math.copysign(x, x2)
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
オレンジレッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
実数の指数	math.frexp(x)[1]
出力ストリームを改行を取り除いて一行ずつ読み込む	f.readline()
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
リストと数列についての散布図に▼マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
棒グラフをレベッカパープル色として描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: タブをセパレータで使う	sep = '\t'
ライトスレイグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
散布図をアクア色として描画する	plt.scatter(データ列x, データ列y, color='aqua')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
現在のタイムスタンプ	int(time.time())
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
xの絶対値	abs(x)
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
ゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
データフレームのリストカラムの欠損値を50パーセンタイルで埋める	df[aList].fillna(df[aList].median())
アクア色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
カラムがどの程度、分散しているか見る	ds.var()
rgbの丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
日付時刻データの分を使う	aDatetime.minute
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
横棒グラフをサンディーブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='sandybrown')
データフレームを百の位で丸めて、整数型にする	df.round(-2).astype(int)
ふたつの集合は集合と交わりを持たないか	aSet.isdisjoint(aSet2)
四角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
デフォルトを適用する	sns.set()
タプルのキーとその値をペアとして取り出す	aDict.items()
リストとデータ列についての散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
最適な位置にデータラベルを表示する	plt.legend(loc='best')
データ列の推移を折れ線プロットを用いて図示する	plt.plot(range(len(データ列)), データ列)
ホットピンク色として線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
文字列の中で大文字・小文字を無視してパターンにマッチした文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
nが-9以上、9以下か判定する	-9 <= n <= 9
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
プロットのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
目盛り線	plt.grid(color='#800080')
データフレームを配列に変換する	df.values
茶色色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
折れ線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
データフレームのリストカラムの尖度	df[aList].skew()
ブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
option: スレートブルー色を使う	color = 'slateblue'
範囲指定してデータフレームの行を抽出する	df[start:end]
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
横棒グラフをオレンジレッド色として描画する	plt.barh(データ列x, データ列y, color='orangered')
茶色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
折れ線グラフの色を耐火レンガに変更する	plt.plot(データ列x, データ列y, color='firebrick')
赤い右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
見やすいグラフを描画する	import seaborn as sns
グラフを正方形にする	plt.axis('equals')
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
日付時刻データが月曜日	aDatetime.weekday() == 0
ISO8601形式の文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
TSVファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
中央値でデータ列をビン分割する	pd.qcut(ds, 2)
0で全要素を初期化した配列	np.zeros(要素数)
データフレームの中にいくつ欠損値が存在するか数える	df.isna().sum()
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
データフレームから重複した行をインプレイスで消す	df.drop_duplicates(inplace=True)
option: 文字列の示すエンコーディングを使う	encoding = s
散布図をゴーストホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
縦棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
option: オリーブにグラフの色をセットする	color = 'olive'
両端キューが空でないかどうか	len(deq) != 0
▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
リストとリストについての散布図に赤い▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
ファイルパスの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
データフレームの重複した行数のマスク	df.duplicated()
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
データフレームの各グループ毎の最大値を求める	df.groupby(column).max()
ヒストグラムの色を黄色に指定する	plt.hist(データ列, color='yellow')
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
ケンドール順位相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
トマト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
データフレームの先頭の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
NaN	math.nan
散布図にダイアモンド印を使う	plt.scatter(データ列x, データ列y, marker='D')
整数nがタプルのどれかか調べる	n in aTuple
タイムスタンプデータををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
option: ディムグレー色を使う	color = 'dimgrey'
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
横棒グラフをペールグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='palegreen')
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
赤色としてヒストグラムを描画する	plt.hist(データ列, color='red')
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
縦棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
option: 改行をセパレータで使う	sep = '\n'
データ列を1000の位で丸める	ds.round(-3)
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
横棒グラフを青色として描画する	plt.barh(データ列x, データ列y, color='blue')
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
文字列を区切りで分割する	s.split(sub)
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
option: 色をプラムに設定する	color = 'plum'
空のカウンタ	collections.Counter()
折れ線グラフの色をコーンフラワーブルーに変更する	plt.plot(データ列x, データ列y, color='cornflowerblue')
数列とリストについて散布図を描画して左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
データフレームから重複を削除する	df.drop_duplicates()
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
キーが辞書上で定義されているか	key in aDict
赤い丸マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='o', c='r')
線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームのリストカラムを十の位で四捨五入する	df[aList].round(-1)
折れ線グラフの大バツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
日付時刻データが何日か知る	aDatetime.day
option: マーカーの大きさを設定する	markersize = 2.0
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
option: グラフの色をブラックに指定する	color = 'black'
両端キューから最初の要素を取り除く	deq.remove(element)
整数nがセットのどれかか調べる	n in aSet
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
グラフに目盛り線を加える	plt.grid(True)
折れ線グラフの色をピーチパフに変更する	plt.plot(データ列x, データ列y, color='peachpuff')
エンコーディングを使う	sys.getdefaultencoding()
折れ線グラフのダイアモンド印の大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
データフレームのリストカラムの中の未入力値の合計を数える	df[aList].isna().sum()
データフレームからn行、ランダムサンプリングする	df.sample(n)
折れ線グラフの色をハニーデューにする	plt.plot(データ列x, データ列y, color='honeydew')
菱形印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
日付をインポートする	import datetime
リストを青色化する	f'\033[34m{value}\033[0m'
プラムにヒストグラムの色を設定する	plt.hist(データ列, color='plum')
折れ線グラフの色をダークターコイズに指定する	plt.plot(データ列x, データ列y, color='darkturquoise')
文字列の右側から空白を取り除く	s.rstrip()
折れ線グラフをフクシア色を用いて描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ミディアムスプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
二つのベクトルを横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
nがn2よりも大きいか調べる	n > n2
本日の年数	datetime.datetime.today().year
散布図の四角印を赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
文字列を空白で分割して、文字列リストにする	s.split()
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
TSVをヘッダを指定せず読む	pd.read_csv(filename, header=None)
option: 欠損値も無視しない	dropna = True
折れ線グラフに三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
配列を平坦にする	aArray.flatten()
折れ線グラフの色をパープルに指定する	plt.plot(データ列x, データ列y, color='purple')
赤いポイントマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線プロットのラベルを変更する	plt.plot(データ列x, データ列y, label='ラベル')
８ビット整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int8)
折れ線グラフの色をペールグリーンに指定する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
配列とリストについての散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
プラットフォームの文字コードの最大値を知る	sys.maxunicode
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
ヒストグラムの色をブルーバイオレットに指定する	plt.hist(データ列, color='blueviolet')
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
インデックスを付けずにデータフレームをJSONLファイルに保存する	df.to_csv(filename, index=None)
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
データを最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
双方向キューの右にイテラブルの要素を順に追加する	deq.extend(iterable)
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データ列がどれだけ、分散しているか調べる	ds.var()
option: 色をダークカーキに設定する	color = 'darkkhaki'
折れ線グラフに左三角マーカーを加える	plt.plot(データ列x, データ列y, marker='<')
グレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
グラフ中の(x,y)の位置に補足を表示する	plt.legend(loc=(x, y))
option: ダークグレー色を使う	color = 'darkgray'
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
折れ線グラフの▽マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: パールバイオレットレッド色を使う	color = 'palevioletred'
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
ヒストグラムをやわらかい青色として描画する	plt.hist(データ列, color='cornflowerblue')
ビン数nで配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
整数nの十六進表記	hex(n)
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
データフレームの列を1000の位で丸める	df[col].round(-3)
データフレームの列のNaNをxで埋める	df[col].fillna(x)
折れ線グラフをホワイト色として描画する	plt.plot(データ列x, データ列y, color='white')
横棒グラフを描画し、、中央寄せする	plt.barh(ラベル列, データ列, align='center')
データフレームのリストカラムを10の位で丸めて整数にする	df[aList].round(-1).astype(int)
データフレームの列を文字列に名前変更する	df.rename(columns={column: name})
線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
多次元尺度構成法で多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
横棒グラフをパールバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='palevioletred')
縦棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ダークサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
nをn2乗に増やす	n **= n2
リストとリストの散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームを'A'列と'B'列によって昇順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームをまとめて四捨五入する	df.round()
option: シアン色を使う	color = 'cyan'
実数が整数かどうか調べる	x.is_integer()
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
option: パパイヤウィップにフォントの色を設定する	color = 'papayawhip'
リストの出現頻度を可視化する	plt.hist(データ列)
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
グループ化してデータフレームの散布図を横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
イテラブルとしてカウンタを更新する	aCounter.update(iterable)
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
最大長を指定して両端キュー	collections.deque(maxlen=n)
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
実行時に標準出力がパイプかどうか	not sys.stdout.isatty()
ヒストグラムの色をアクアに変更する	plt.hist(データ列, color='aqua')
実数の小数点を丸める	round(x)
縦棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
スカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
文字列の開始位置から部分文字列を探す	s.find(sub, start)
図の縦横を設定する	plt.figure(figsize=(横幅, 高さ))
辞書からキーの値か、もしくは要素を見る	aDict.get(key, element)
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
配列とリストについての散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
行列の要素ごとの積を求める	np.multiply(aArray, aArray2)
数式を簡単にする	sympy.sympify(e)
option: 色をシルバーに設定する	color = 'silver'
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
データフレームのカラムの中にいくつ文字列が存在するか数える	df[col].isin([value]).sum()
半透明の破線を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ライトゴールドロディイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
オブジェクトの属性の値	getattr(obj, プロパティ名)
折れ線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
option: パープル色を使う	color = 'purple'
ダークターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
マッピングの項目名一覧	list(aDict)
option: グラフの色をライトスチールブルーに指定する	color = 'lightsteelblue'
イテラブルの各要素を関数でフィルタする	map(func, iterable)
有理数をインポートする	import fractions
オブジェクトの型	type(obj)
文字列中の文字を列挙する	list(s)
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
データフレームの下位25%	df.quantile(0.75)
ブルーバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
データ列の欠損値をxに設定する	ds.fillna(x)
ビン数nとして列をビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
データ列の秒	ds.dt.second
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
データフレームのリストカラムのNaNを最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
option: 紺碧を使う	color = 'azure'
option: グラフの色をピンクに変更する	color = 'pink'
散布図のポイントマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
1からnまでの整数リストを作る	list(range(1, n+1))
両端キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
散布図の菱形マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
ラベンダーブラッシュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
正規表現で文字列を分ける	re.split(pattern, s)
グラフを論文に設定する	sns.set(context='paper')
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
縦棒グラフをライトコーラル色として描画する	plt.bar(データ列x, データ列y, color='lightcoral')
文字列を最後の部分文字列で二分し後半の文字列を見る	s.rpartition(sub)[-1]
リストの値のみプリントする	print(*aList)
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgrey')
数値の平方根を求める	sympy.sqrt(e)
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
ヒストグラムの色を紺碧に指定する	plt.hist(データ列, color='azure')
ヒストグラムの線の種類を一点鎖線に変更する	plt.hist(データ列, linestyle='dashbot')
マッピングをJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
散布図のダイアモンド印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
パレットトルコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
ライトスチールブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
データフレームを表示するときカラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
nの十六進表記を使う	hex(n)
折れ線グラフの色をタンにする	plt.plot(データ列x, データ列y, color='tan')
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
option: グラフの色を青緑に設定する	color = 'teal'
線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
整数nの八進文字列	oct(n)[2:]
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
ローングリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データ列の未入力値を最頻値に指定する	ds.fillna(ds.mode().iloc[0])
散布図をアイボリー色を用いて描画する	plt.scatter(データ列x, データ列y, color='ivory')
データ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
折れ線グラフの三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
列によってデータフレームをグループ化して、それぞれのグループの最小値を求める	df.groupby(column).min()
アルファベットの大文字を全部使う	string.ascii_uppercase
書き込みできるようにファイルパスをオープンする]	open(filepath, mode='w')
文字列が全てアスキー文字	s.isascii()
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
散布図の丸マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
整数nのバイト長を見る	(n.bit_length() + 7) // 8
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
小麦色色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
文字列リストを一つにする	''.join(aStringList)
データフレームの中のカラムを等量でn個にビン分割する	pd.qcut(df[col], n)
option: 論理値型を使う	dtype = np.int32
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
ユーザが整数を入力する	int(input())
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
プラットフォームの符号付き整数の最大値	sys.maxsize
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
散布図をrgbの四角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
タプルを逆さにする	reversed(aTuple)
日付時刻データをタプルに変換する	aDatetime.timetuple()
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
グリーン色でヒストグラムを描画する	plt.hist(データ列, color='green')
セットから値を除く	aSet.remove(element)
日付データが日曜日	aDate.weekday() == 6
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
option: ダークマゼンタ色を用いる	color = 'darkmagenta'
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
ひとつでもアルファベットが文字列内に含まれるかどうか調べる	any(c.isalpha() for c in s)
グラフに水平方向の実線を設定する	plt.axhline(y=0, linestyle='solid')
折れ線グラフの色をハニーデューに変更する	plt.plot(データ列x, データ列y, color='honeydew')
option: ダークマゼンタを用いる	color = 'darkmagenta'
option: グラフの色をコーラルに設定する	color = 'coral'
ベクトルの形状を計算する	aArray.shape
プロットのパレットを濃くする	sns.set(pallete='deep')
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
全般的にカラーパレットを暗くする	sns.set(pallete='dark')
線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
option: グレーにグラフの色を設定する	color = 'gray'
Pandasで、日付データのデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
実数の絶対値	math.fabs(x)
ヒストグラムを複数横に並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
option: UTF8を使う	encoding = 'utf-8'
折れ線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
ファイルから読み込みストリームを見る	open(filepath)
正規化された度数分布図を描画する	plt.hist(データ列, density=True)
棒グラフをミディアムスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
実数を浮動小数点数で割って、切り捨てる	x // y
ファイルをバイナリ書き込みモードを用いて開いて]fとする	f = open(filepath, mode='wb')
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
散布図の右三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
プラム色でヒストグラムを描画する	plt.hist(データ列, color='plum')
option: コーラルにグラフの色を設定する	color = 'coral'
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
カテゴリで色付けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
グラフで使える色名の一覧	matplotlib.colors.cnames
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
両端キューの長さを制限する	collections.deque(maxlen=n)
データフレームのインデックスの名前を、nameからname2に付け直す	df.rename(index={name: name2})
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
option: フォントの色をミスティローズに指定する	color = 'mistyrose'
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
option: ライムにグラフの色を変更する	color = 'lime'
折れ線グラフをスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='slateblue')
折れ線グラフをフォレストグリーン色として描画する	plt.plot(データ列x, データ列y, color='forestgreen')
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
整数を小数点以下第一位で丸める	round(x, 1)
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
リストの要素を昇順にソートする	sorted(aList, reverse=True)
四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: シーグリーン色を使う	color = 'seagreen'
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
option: 下三角マーカーを使う	marker = 'v'
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
データフレームの列の欠損値をxに設定する	df[col].fillna(x)
イテラブルのコンビネーション	itertools.combinations(iterable, n)
オブジェクトがフィールドを持つか確認する	hasattr(obj, プロパティ名)
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
タン色でヒストグラムを描画する	plt.hist(データ列, color='tan')
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
グリッドを破線にする	plt.grid(linestyle='dashed')
データフレームの指定された列だけ抽出する	df[[column]]
実数を十六進表記の文字列にする	x.hex()
データフレームのグループ毎の平均値	df.groupby(column).mean()
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
列の値によってデータフレームをまとめた表	df.groupby(column)
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
数を小数点以下第一位で丸める	round(x, 1)
文字列のサフィックスが部分文字列か調べる	s.endswith(sub)
縦棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
キーが辞書に存在するか調べる	key not in aDict
データフレームの空文字をNaNに変換し、ドロップする	df.replace('', np.nan).dropna()
縦棒グラフをプロットする	plt.bar(ラベル列, データ列)
リストに文字列を追加する	aList.append(element)
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
事前に大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
option: ダークマゼンタ色を使う	color = 'darkmagenta'
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
タプルの最後を取り除く	aTuple[:-1]
小数点数の平方根	math.sqrt(x)
データフレームのカラムを丸める	df[col].round()
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
実数を実数で割る	x / y
カウンタを多い順に列挙する	aCounter.most_common()
折れ線グラフの下三角印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
リストから文字列を捨てる	aList.remove(element)
mathをインポートする	import math
ヒストグラムをパパイヤウィップ色を用いて描画する	plt.hist(データ列, color='papayawhip')
散布図のマーカーをポイント印にする	plt.scatter(データ列x, データ列y, marker='.')
option: ライム色を使う	color = 'lime'
文字列をシンボルにする	sympy.Symbol(s)
option: モカシン色を使用する	color = 'moccasin'
ヒストグラムをゴーストホワイト色を用いて描画する	plt.hist(データ列, color='ghostwhite')
option: どのカラムもインデックスに設定しない	index_col = None
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
文字列の末尾から空白を取り除く	s.rstrip(' ')
カウンタ同士で和集合演算する	aCounter | aCounter2
ホールドアウトを用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
マルーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
データフレームの列がx未満の行を取り出す	df[df[column] < x]
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
文字列の中で複数行対応として正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
降順でインデックスによってデータフレームを並べる	df.sort_index(ascending=False)
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
縦棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
数値を白色にする	f'\033[37m{value}\033[0m'
折れ線グラフをミディアムスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
横棒グラフをグリーンイエロー色を使って描画する	plt.barh(データ列x, データ列y, color='greenyellow')
option: 改行しない	end = ''
データフレームを各列と列の組み合わせ毎に集計し、、分散を求める	df.groupby([column, column2], as_index=False).var()
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
データフレームのリストカラムの未入力値をxに設定する	df[aList].fillna(x)
線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
数列と配列についての散布図に赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
青いヒストグラムを描画する	plt.hist(データ列, color='b')
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
データフレームの列の値がxより大きい行を抽出する	df[df[column] > x]
ダークバイオレット色としてヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
タプルの最初の文字列を探す	aTuple.index(element)
タイムスタンプデータの日付を使う	aDatetime.date()
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
option: グラフの色を貝殻に指定する	color = 'seashell'
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
ゴーストホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
コーンズシルク色として線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
リストから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
折れ線グラフのマーカーを上三角にする	plt.plot(データ列x, データ列y, marker='^')
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
散布図の右三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
辞書をJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
nの二進文字列	bin(n)[2:]
option: 読み込まないフッタをnに設定する	skipfooter = n
リネン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
複数のシートをエクセルファイルファイルから読む	pd.read_excel(filename, sheet_name=[n, n2])
棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
データフレームを複数の列によって昇順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームの列がxの行を取り出す	df[df[column] == x]
タン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
暗くカラーパレットをプロットの描画で用いる	sns.set(pallete='dark')
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
ミッドナイトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
散布図に青い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
option: 色をスラグレーに設定する	color = 'slategrey'
option: エラーを無視するように指定する	errors = 'ignore'
空のタプル	()
データフレームのカラムの欠損値をモードで埋める	df[col].fillna(df[col].mode().iloc[0])
配列とリストの散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
文字列中に部分文字列が含まれないか調べる	sub not in s
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
データフレームのリストカラムの中に文字列と文字列がいくつあるかカウントする	df[aList].isin([value, value2]).sum()
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
t-SNEで多次元データをパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
データフレームの指定された列をリストに変換する	df[column].values.tolist()
ダークスラテグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
辞書のキーを列挙する	aDict.keys()
新しいリッジ回帰モデルを新規作成する	model = sklearn.linear_model.Ridge(alpha=正則化項)
nが3で割り切れるか調べる	n % 3 == 0
列から重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
データフレームを各列と列の組み合わせ毎に集約して、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
nが奇数	n % 2 == 1
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
オブジェクトのハッシュ値を計算する	hash(obj)
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
双方向キューの要素を左にn個分輪番で回す	deq.rotate(-n)
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
データフレームのポイントプロットを描く	sns.pairplot(hue='カテゴリ列', data=df)
変数について数式を積分する	sympy.integrate(e, z)
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
リストのn番目以降の部分を抽出する	aList[n:]
回帰分析をガウス過程としてする	model = sklearn.gaussian_process.GaussianProcessRegressor()
データフレームの列の中にと文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
データ列を日付データに変換する	pd.to_datetime(ds)
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
直後の値でデータフレームのNaNを埋める	df.fillna(method='bfill')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
散布図の△印の色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームの相関行列ケンドール順位相関係数で	df.corr(method='kendall')
棒グラフをマゼンタ色を使って描画する	plt.bar(データ列x, データ列y, color='magenta')
option: 欠損値を含める	dropna = True
データフレームの中の列を分割数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: グラフの色を濃い青に変更する	color = 'darkblue'
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
要素がセットに含まれる	element in aSet
文字コードを文字に変換する	chr(unicode)
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
散布図をダークシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
predicateFuncが真となる列の要素	itertools.takewhile(predicateFunc, iterable)
predicateFuncが真とならないイテラブルの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
散布図に赤い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
淡いピンク色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
ヒートマップとして混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
データフレームの列がリストに含まれる行を取り出す	df[df[column].isin(aList)]
n割るn2を求める	n / n2
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgrey')
option: フォントの色をブラックに変更する	color = 'black'
新しい文字列で正規表現にマッチした文字列を置換する	re.sub(pattern, newsub, s)
コーンフラワーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
配列の列ごとの最小	np.min(aArray, axis=0)
カラーバーを付ける	plt.colorbar()
折れ線グラフの色を深紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
文字列を空白によって分割して、整数リストに変換する	map(int, s.split())
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
データフレームのインデックスがnの行を抽出する	df.loc[n]
パールバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
グラフの凡例を表示する	plt.legend()
リッジ回帰とロッソ回帰のハイブリッド分析を行う	model = sklearn.linear_model.ElasticNet()
nがn2で割り切れないかどうか調べる	n % n2 != 0
日付データが土曜日かどうか確認する	aDate.weekday() == 5
インディアンレッドにヒストグラムの色を変更する	plt.hist(データ列, color='indianred')
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
実数の床	math.floor(x)
点線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
横棒グラフをフォレストグリーン色として描画する	plt.barh(データ列x, データ列y, color='forestgreen')
エラーを出力する	sys.stderr
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
折れ線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
文字列の中でASCII限定として正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
option: プラム色を使用する	color = 'plum'
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
データフレームの平均	df.mean()
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
nが一桁の整数	0 <= n <= 9
実数を数に加える	x + y
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
option: ディープスカイブルー色を用いる	color = 'deepskyblue'
ペアリストpairsからカウンタを生成する	collections.Counter(dict(pairs))
積み上げ棒グラフを描く	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームの欠損値をxに変更する	df.fillna(x)
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
折れ線グラフの丸印の色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
実数を切り上げる	math.ceil(x)
文字列を部分文字列で二分し、後半の文字列を見る	s.partition(sub)[-1]
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: 青紫色を使う	color = 'violet'
折れ線グラフの三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
リストをn回、接続する	aList * n
散布図のダイアモンド印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
オプションで標準エラーを使う	file = sys.stderr
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
ビン数nで配列をビン分割する	pd.cut(aArray, n)
リストとリストについての散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
xが一桁の数か調べる	-9 <= x <= 9
ディレクトリをPythonパスに追加する	sys.path.append(dir)
実行時の標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
option: グラフの色を珊瑚に設定する	color = 'coral'
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
全印字できる文字	string.printable
散布図に赤い▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図のポイントマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
配列から重複を除いた配列を作る	np.unique(aArray)
英字を全部使う	string.ascii_letters
nを符号付きで長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データ列の曜日名を使う	ds.dt.weekday_name
データフレームのリストカラムの記述統計量	df[aList].describe()
option: ネイビーを使用する	color = 'navy'
列と列を連結する	itertools.chain(iterable, iterable2)
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
書き込み用にEUCとしてファイルパスを開く]	open(filepath, mode='w', encoding='euc_jp')
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
リストが少なくともひとつ真かどうか確認する	any(aList)
option: 説明変数を事前に正規化する	normalize = True
16進文字列をバイナリにする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
データフレームのリストカラムがどの程度分散しているか見る	df[aList].var()
オブジェクトが論理値クラス	isinstance(obj, bool)
option: グラフの種類を一点鎖線に指定する	linestyle = 'dashbot'
複数の列によってデータフレームを並べ直して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
ロードしたモジュールの一覧を調べる	sys.modules
ライムグリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
縦に３つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
折れ線グラフをホワイトスモーク色として描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームのリストカラムの中に存在する文字列と文字列の数を数える	df[aList].isin([value, value2]).sum()
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
数値を数値計算する	float(e)
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
散布図をミディアムシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
現在を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
option: グラフの色をスノーに指定する	color = 'snow'
データフレームからランダムに選択する	df.sample()
回帰モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
イテラブルとデータ列について散布図を描いて、文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
nが2で割り切れない	n % 2 == 1
辞書を複製する	aDict.copy()
散布図をハニーデュー色として描画する	plt.scatter(データ列x, データ列y, color='honeydew')
自然数の並べ方の総数	math.perm(n)
小数点数のk進対数を算出する	math.log(x, k)
option: マーカーの色を青にする	markerfacecolor = 'blue'
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
モデルの平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
２つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
モカシン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
0から始まる無限数列	itertools.count()
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
データフレームを二つの列ごとにグループ化し、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
データ列の平均	ds.mean()
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
配列の次元を変形する	aArray.reshape(行数, 列数)
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ヒストグラムの色をオリベドラブに変更する	plt.hist(データ列, color='olivedrab')
option: アクアマリンにフォントの色を設定する	color = 'aquamarine'
横方向に三つのデータフレームをつなぐ	pd.concat([df, df2, df3], axis=1)
行列の演算を行う	import numpy as np
縦棒グラフをティール色で描画する	plt.bar(データ列x, データ列y, color='teal')
線グラフの色をシスルに変更する	plt.plot(データ列x, データ列y, color='thistle')
散布図に黒いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの中にいくつがあるか数える	df.isin([value]).sum()
ロバストな単クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
文字列の左端から部分文字列を探す	s.find(sub)
縦棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
本日の日数	datetime.datetime.today().day
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()//60
リストのオブジェクトの位置をエラーなく見る	aList.index(element) if element in aList else -1
赤い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
タプルを逆順にする	aTuple[::-1]
プログラムの実行をエラーとして停止する	sys.exit(1)
行列の行ごとの平均	np.mean(aArray, axis=1)
パラメータについて数式の積分を求める	sympy.integrate(e, z)
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
コマンドの第２引数	sys.argv[1]
イテラブルの集合	set(iterable)
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
計算機イプシロン	sys.float_info.epsilon
横棒グラフをインディアンレッド色として描画する	plt.barh(データ列x, データ列y, color='indianred')
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
散布図に黒い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
赤い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
散布図の▽マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
横棒グラフをスプリンググリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='springgreen')
ミディアムスプリンググリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
ベージュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
option: マーカーをダイアモンドに変更する	marker = 'D'
データフレームのカラムのpercentパーセンタイル	df[col].quantile(percent/100)
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
散布図の星印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
整数nを二進表現に変換する	bin(n)
文字列が文字列リストのいづれか調べる	s in aStringList
散布図の左三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
データフレームを'A'列の値でグループ化し、記述統計量を求める	df.groupby('A').describe()
折れ線グラフのクロスマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
整数nの二進数表現	bin(n)
option: フローラルホワイト色を用いる	color = 'floralwhite'
ファイルパスをオープンして]バイナリ書き込みストリームを求める	open(filepath, mode='wb')
三自然数の最大公約数を求める	math.gcd(n, n2, n3)
行列のスカラー倍	aArray * n
多次元データをMSDでパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
グラフの描画で色差別なくカラーパレットを使用する	sns.set(pallete='colorblind')
ミディアムシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
紺色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
非数値データ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
イテラブルを文字列に変換して空白で一つにする	' '.join(map(str, iterable))
現在のエポック秒	int(time.time())
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
タプルの中の最小値を求める	min(aTuple)
ファイルパスをSJISでオープンする]	open(filepath, encoding='shift_jis')
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
折れ線グラフの菱形印を赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームのリストカラムの未入力値を平均に指定する	df[aList].fillna(df[aList].mean())
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
nがn2以下か調べる	n <= n2
nとn2の値を足してnに代入する	n += n2
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
書式を辞書でフォーマットする	formatText.format_map(aDict)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
floatの最大値	sys.float_info.max
データフレームを各カテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
マップのキーに対応した値	aDict.get(key)
折れ線グラフを実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
クラス分類の適合率を算出する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
データ列を100の位で丸める	ds.round(-2)
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
nかけるn2	n * n2
文字列の先頭だけ大文字化する	s.capitalize()
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
データフレームの列の中にある文字列の合計を求める	df[col].isin([value]).sum()
option: グラフの色をピンクに設定する	color = 'pink'
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
タプルをひとつ置きに取り出す	aTuple[::2]
ファイルパスから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgrey')
変数について数値の微分を算出する	sympy.diff(e, z)
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
散布図に上三角印を使う	plt.scatter(データ列x, データ列y, marker='^')
文字列のケースを入れ替える	s.swapcase()
文字コードに対応する文字	chr(unicode)
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
現在処理中の例外を情報	sys.exc_info()
ミスティローズにヒストグラムの色をセットする	plt.hist(データ列, color='mistyrose')
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
グリッド線	plt.grid(alpha=0.5)
リストの先頭を取り除く	aList[1:]
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
折れ線グラフの色をベージュにする	plt.plot(データ列x, データ列y, color='beige')
平均線付き箱髭図をプロットする	plt.boxplot(データ列, meanline=True)
縦棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
オリーブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
二つ並べてデータ列を度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
暗い赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
線形モデルの回帰変数を使う	model.coef_
シエナ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
二つの列によってデータフレームをまとめたグループを見る	df.groupby(['A', 'B'])
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
ファイルが存在するか調べる	os.path.exists(filepath)
線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
タイムスタンプデータの時間数	aDatetime.hour
プロット中のフォントをセットする	sns.set(font=フォント名)
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
折れ線グラフの▲マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームを列名リストで小さい順にソートする	df.sort_values(by=column, ascending=True)
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
文字列の開始位置からと終了位置の間に部分文字列があるか調べる	s.find(sub, start, end) != -1
データフレームのリストカラムの中央値	df[aList].median()
紺碧色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
ファイルを書き込みできるように開く]	open(filepath, mode='w')
小数点数のハイパボリック・コサイン	math.cosh(x)
タプルの末尾のn要素を取り除く	aTuple[:-n]
要素∈セット	element in aSet
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
左三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
現在は何分か知る	datetime.date.today().minute
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
第２コマンド引数を確認する	sys.argv[1]
データ列の欠損値を直後の値で補う	ds.fillna(method='bfill')
標準入力を使う	sys.stdin
散布図のバツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
option: フォントの色をブラウンに設定する	color = 'brown'
ダークオリーブグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
正規表現でreplにまとめてデータフレームのカラムの値を置換する	df[col].replace(pattern, repl, regex=True)
キーが辞書上で定義済みか調べる	key in aDict
サポートベクトル分類モデルを準備する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データ列をn個に等間隔でビニングし、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
データフレームの列のメディアン	df[col].median()
データフレームの列をヒストグラムにする	plt.hist(df[column])
イテラブルとリストの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
option: ダークバイオレット色を使う	color = 'darkviolet'
配列の行ごとの合計値	np.sum(aArray, axis=1)
オプションで、ファイルを用いる	file = sys.open(filename, 'w')
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
浮動小数点数の最小値を計算する	sys.float_info.min
文字列はタイトルケース	s.istitle()
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
折れ線グラフをダークシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
黒いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
タイムスタンプデータが何時か知る	aDatetime.hour
データ列のタイムゾーンを文字列に指定する	ds.tz_convert(s)
rgbの右三角マーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
行列の最小値	np.min(aArray)
リストとリストについての散布図に左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<')
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
配列の型	aArray.dtype()
Pandasでデータ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
option: namesをカラム名に設定する	names = names
配列は何次元か調べる	aArray.ndim
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(データ列)
空のリストを作る	[]
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
赤い一点鎖線でイテラブルの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
自然数の階乗	math.factorial(n)
散布図をサドルブラウン色として描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
option: グラフの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
TSVファイルを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
nがn2以上か調べる	n >= n2
Pandasでフォーマットでデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームを散布図で可視化して、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
単回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
データ列の欠損値をxに減らす	ds.fillna(x)
空のロジスティック回帰モデルを用意する	model = sklearn.linear_model.LogisticRegression()
option: 線の種類を点線に設定する	linestyle = 'dotted'
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
実数の絶対値を求める	math.fabs(x)
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
option: 赤を使う	color = 'red'
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
タプルから重複を取り除く	set(iterable)
イテラブルを文字列リストに変換して、カンマでつなげる	','.join(map(str, iterable))
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
option: ダークオーキッド色を使う	color = 'darkorchid'
列からひとつランダムに選ぶ	random.choice(iterable)
句点文字を全て求める	string.punctuation
線グラフをフクシア色を使って描画する	plt.plot(データ列x, データ列y, color='fuchsia')
散布図の印を左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
文字列の開始位置番目と終了位置番目の間に部分文字列がない	s.find(sub, start, end) == -1
浮動小数点数で数を整数除算する	x // y
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
カウンタの最頻出な項目	aCounter.most_common()[0]
option: フォントの色をライトグレーに設定する	color = 'lightgray'
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
リストをn回、加える	aList * n
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
前の値でデータフレームの列の欠損値を埋める	df[col].fillna(method='ffill')
グローバル変数の一覧を見る	globals()
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
option: EUCを用いる	encoding = 'euc_jp'
文字列の先頭から余分な空白を取り除く	s.lstrip()
ケンドール相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
ライトグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
最初の要素を両端キューから取り除く	deq.remove(element)
両端キューの最後に数値を追加する	deq.append(element)
折れ線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
オプションで、標準出力を使用する	file = sys.stdout
赤い実線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
棒グラフをネイビー色を用いて描画する	plt.bar(データ列x, データ列y, color='navy')
文字列は識別子名	s.isidentifier()
棒グラフをライトグレー色を使って描画する	plt.bar(データ列x, データ列y, color='lightgrey')
小麦色にヒストグラムの色を変更する	plt.hist(データ列, color='wheat')
文字列を太文字でプリントする	print(f'\033[1m{value}\033[0m')
option: ダークブルー色を使う	color = 'darkblue'
JSONフォーマットのバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
option: スノー色を使う	color = 'snow'
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
円プロットにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
実数の自然対数	math.log(x)
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
option: プラム色を用いる	color = 'plum'
部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームのカラムは何月か確認する	df[col].dt.month
長さが一致しないときのzip	itertools.zip_longest(iterable, iterable2)
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
ベクトルの形状	aArray.shape
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
実数以上の最小の整数	math.ceil(x)
ヒストグラムをターコイズ色として描画する	plt.hist(データ列, color='turquoise')
option: フォントの色をライトグレーに変更する	color = 'lightgray'
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
データフレームの標準偏差を求める	df.std()
折れ線グラフをブルーバイオレット色として描画する	plt.plot(データ列x, データ列y, color='blueviolet')
箱ヒゲ図を描いて、平均値を加える	plt.boxplot(データ列, showmeans=True)
nにn2を掛ける	n * n2
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: ダークスレートブルー色を使用する	color = 'darkslateblue'
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
グラフの色を暗くする	sns.set(pallete='dark')
データフレームをJSONLファイルにインデックスを付けずに書き込む	df.to_csv(filename, index=None)
データフレームのリスト列の中に文字列があるかどうかテストする	df[aList].isin([value])
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
現在の秒を使う	datetime.date.today().second
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
床数	math.floor(x)
データフレームの平均と信頼区間を描く	sns.pairplot(hue='カテゴリ列', data=df)
ダークグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
カンマで文字列を分割し、、文字列リストにする	s.split(',')
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
シエナ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
リストを引数として展開してプリントする	print(*aList)
option: シルバー色を使う	color = 'silver'
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
折れ線グラフをブラウン色で描画する	plt.plot(データ列x, データ列y, color='brown')
タプルを反転する	reversed(aTuple)
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
option: 整数型を使う	dtype = np.int
本日は何日か知る	datetime.datetime.today().day
線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの▲印の色を変える	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
データフレームの指定された列を抽出する	df[[column]]
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
横棒グラフの色を濃いシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
option: ヘッダを自動的な連番に増やす	header = None
配列の最小値	np.min(aArray)
データフレームのNaNをモードに指定する	df.fillna(df.mode().iloc[0])
縦棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
データフレームを欠損値を含めてカラムの値で集約する	df.groupby(column, dropna=False)
現在の分数	datetime.date.today().minute
カウンタからリストをカウントして引く	aCounter.subtract(iterable)
実数のkを底とする対数	math.log(x, k)
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
option: 色をサンディーブラウンに設定する	color = 'sandybrown'
データフレームのカラムをカテゴリデータに変換する	df[col].astype(object)
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightgreen')
両端キューの最大長を使う	deq.maxlen
バギングとしてクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
配列の次元の数	aArray.ndim
本日が水曜日か判定する	datetime.datetime.today().weekday() == 2
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
option: 先頭のカラムをインデックスに指定する	index_col = 0
折れ線グラフの色をホットピンクに指定する	plt.plot(データ列x, データ列y, color='hotpink')
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
線グラフの色をオレンジに変更する	plt.plot(データ列x, データ列y, color='orange')
青い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
散布図に黒い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
タプルに辞書の項目を更新する	aDict.update(aDict2)
箱髭図を描画して平均線を加える	plt.boxplot(データ列, meanline=True)
option: セパレータをカンマにする	sep = ','
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
書き込み用にファイルをBOM付きで開く]	open(filepath, mode='w', encoding='utf_8_sig')
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
ライトコーラルにヒストグラムの色を設定する	plt.hist(データ列, color='lightcoral')
論文用にグラフを設定する	sns.set(context='paper')
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
文字列をn回だけ置換する	s.replace(sub, newsub, n)
配列の要素ごとの積を求める	np.multiply(aArray, aArray2)
ダークスレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
文字列をケースを無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
データフレームのカラムの尖度	df[col].skew()
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='grey')
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームのカラムの時	df[col].dt.hour
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
ファイルをバイナリモードを用いてオープンする]	open(filepath, mode='rb')
リストを集合に追加更新する	aSet.update(iterable)
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
配列とイテラブルについての散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
全要素を０で初期化した行列を作る	np.zeros(行数, 列数)
データフレームの列を欠損値も加えてダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
折れ線グラフの右三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
nで乱数シードを初期化する	random.seed(n)
列を無限に繰り返す	itertools.cycle(iterable)
折れ線グラフの色をダークゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
多次元データを多次元尺度構成法としてパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
分類モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
カウンタを低頻度な方から列挙する	aCounter.most_common()[::-1]
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
折れ線グラフの色をアイボリーに指定する	plt.plot(データ列x, データ列y, color='ivory')
バリーウッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
図のサイズを指定する	plt.figure(figsize=(横幅, 高さ))
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
ファイル名がテキストファイルかどうか	filename.endswith('.txt')
今日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
option: マーカーを大バツに変更する	marker = 'X'
option: グラフの線の種類を点線に設定する	linestyle = 'dotted'
黄色にヒストグラムの色を設定する	plt.hist(データ列, color='yellow')
ブルーバイオレット色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ベクトルのムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
高頻出方からカウンタを列挙する	aCounter.most_common()
2つのマッピングをネスト化する	collections.ChainMap(aDict, aDict2)
ヒストグラムの色をホワイトに設定する	plt.hist(データ列, color='white')
n割るn2の切り上げ	(n + n2 - 1) // n2
リストと配列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
縦棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
日付時刻データは何月か知る	aDatetime.month
横棒グラフをダークカーキ色を使って描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
非数値データを連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
散布図のポイント印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
2を底とする対数を計算する	math.log2(x)
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
データフレームの列の名前一覧で指定されたカラムを消す	df.drop(columns, axis=1)
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
データ列の欠損値を第二四分位数に指定する	ds.fillna(ds.median())
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
散布図をブランチドアーモンド色として描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
散布図をサンディーブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
両端キュー中の文字列を数える	deq.count(element)
option: マーカーの色を白にする	markerfacecolor = 'white'
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
データフレームの指定された列を配列に変換する	df[column].values
グラフをPNGファイルとして保存する	plt.savefig('foo.png')
データフレームのカラムの中にいくつ欠損値があるか求める	df[col].isna().sum()
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
option: 色をダークスラテグレーにセットする	color = 'darkslategray'
折れ線グラフに大バツマーカーを加える	plt.plot(データ列x, データ列y, marker='X')
線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフの色をスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='springgreen')
折れ線グラフの左三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
nがタプルのどれかかどうか	n in aTuple
実数を浮動小数点数で除算する	x / y
データ列が正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
データフレームの指定された列を抽出する	df[column]
プロットから格子を消す	plt.grid(False)
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
紺色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
書式をマッピングでフォーマットする	formatText.format_map(aDict)
文字列のケースを交換する	s.swapcase()
折れ線プロットをプロットする	plt.plot(データ列x, データ列y)
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
リストから配列を作る	np.array(aList)
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
option: オーキッド色を使う	color = 'orchid'
データ列のpercent分位数	ds.quantile(percent/100)
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ファイルパスからディレクトリ名取り出す	os.path.dirname(filepath)
青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
文字列がリストに含まれないかどうか調べる	element not in aList
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
nの無限数列	itertools.repeat(n)
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
大きさnでリストと数列についての散布図を描く	plt.scatter(データ列x, データ列y, s=n)
ロバストな線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
散布図にrgbの菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ホワイトスモークにヒストグラムの色を設定する	plt.hist(データ列, color='whitesmoke')
リストの値を逆順にする	aList[::-1]
データフレームの未入力値を最小値で埋める	df.fillna(df.min())
列とリストをペアリングする	itertools.zip_longest(iterable, iterable2)
配列を中央値でビン分割する	pd.qcut(aArray, 2)
数値を因数分解する	sympy.factor(e)
散布図に星印を使う	plt.scatter(データ列x, データ列y, marker='*')
実数は無限大かどうか調べる	math.isinf(x)
文字列をフォーマットfmtを使ってdatetime64型に変換する	pd.to_datetime(s, format=fmt)
表データの中のカラムと列に重複があれば削除する	df.drop_duplicates(subset=column)
ダークオレンジ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
行列を平坦化する	aArray.flatten()
リストを展開してプリントする	print(*aList)
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategray')
文字列リストをsepを区切りとして一つにする	sep.join(aStringList)
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
option: 読み込まないフッタをnに変更する	skipfooter = n
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
nとn2が等しいか調べる	n == n2
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
折れ線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
OSがMacOSかどうか	sys.platform.startswith('darwin')
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: ホワイトスモーク色を使う	color = 'whitesmoke'
線グラフをダークシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
縦棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
リストの中の最小値を計算する	min(aList)
赤い右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
データ列が何月か見る	ds.dt.month
データフレームのカラムの中に存在する文字列の数を数える	df[col].isin([value]).sum()
n番目のシートをエクセルファイルファイルのデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームから重複した行をドロップする	df.drop_duplicates()
正規表現に文字列全体を複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフのマーカーを大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
複数の列でデータフレームを並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
ひとつでも非大文字が文字列中に含まれるか調べる	any(not c.isupper() for c in s)
数式の積分を行う	sympy.integrate(e)
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
文字列の先頭から空白を取り除く	s.lstrip(' ')
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
option: バイナリモードを使う	mode = 'rb'
xが一桁の正の数か調べる	0 <= x <= 9
線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
折れ線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ダークバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='darkviolet')
下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v')
データフレームの内のNaNを消す	df.dropna()
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
棒グラフの色をティールにする	plt.bar(データ列x, データ列y, color='teal')
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
実数の双曲線正接	math.tanh(x)
文字列中にひとつでも非ASCII文字が含まれるか調べる	any(not c.isascii() for c in s)
データ列を正規表現patternでreplに置き換える	ds.replace(pattern, repl, regex=True)
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
文字列の先頭の文字	s[0]
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
ダークバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
黒いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
黒いポイントマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームを列名リストによって整列する	df.sort_values(by=column)
データフレームの列と列に重複があれば、落とす	df.drop_duplicates(subset=column)
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
サドルブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
ライトシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
文字列中のタブ文字を空白に置換する	s.expandtabs(tabsize=n)
データフレームを'A'列によってグループ分けする	df.groupby('A')
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
カウンタのそれぞれの文字列をカウントだけ列挙する	aCounter.elements()
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
ベクトルと同じ大きさの空配列を作る	np.empty_like(aArray)
散布図に星マーカーを用いる	plt.scatter(データ列x, データ列y, marker='*')
散布図のマーカーの線幅を変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
文字列の先頭の空白を除く	s.lstrip()
ファイルを追加できるように文字列の示すエンコーディングでオープンする]	open(filepath, mode='a', encoding=s)
散布図をリネン色を使って描画する	plt.scatter(データ列x, データ列y, color='linen')
option: 紺色を用いる	color = 'darkblue'
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
２つの変数をそれぞれ定義する	x, y = i, j
棒グラフをミディアムターコイズ色として描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
'A'列と'B'列によってデータフレームをまとめたグループ	df.groupby(['A', 'B'])
ヒストグラムをパレットトルコイズ色として描画する	plt.hist(データ列, color='paleturquoise')
グリッド線を黒くする	plt.grid(color='k')
オブジェクトが辞書型かどうか調べる	isinstance(obj, dict)
データフレームのリストカラムの値がNaN	df[aList].isna()
シーケンスとイテラブルをつなぐ	itertools.chain(iterable, iterable2)
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
ファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
データフレームの欠損値を最小値に指定する	df.fillna(df.min())
データ列間の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
二つのカウンタの共通する要素を算出する	aCounter & aCounter2
集合の全ての要素が別のセットに含まれるかどうか調べる	aSet.issubset(aSet2)
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
列名リストを用いてによって大きい順にデータフレームを並べる	df.sort_values(by=column, ascending=False)
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
プログラムの実行を異常終了する	sys.exit(1)
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
フォレストグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
まとめてValueMapでデータフレームを置き換える	df.replace(ValueMap)
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
赤い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
日付時刻データからn分減らす	aDatetime - datetime.timedelta(minutes=n)
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
option: NaNは無視する	dropna = True
データフレームから列を４つのみ選択する	df[[column, column2, column3, column4]]
オブジェクトは数値かどうか調べる	isinstance(obj, (int,float))
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
値をプリントする	print(value)
データ列の要約統計量	ds.describe()
縦棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データを最大最小として正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
文字列の最後から改行を除く	s.rstrip('\n')
データ列を四捨五入して、整数型にする	ds.round().astype(int)
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
データフレームを各列毎にグループ化して、列の合計を算出する	df.groupby(column)[column2].sum()
横棒グラフをターコイズ色として描画する	plt.barh(データ列x, データ列y, color='turquoise')
最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
日付データが何月か知る	aDate.month
折れ線グラフのダイアモンド印の線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
イテラブルを折れ線グラフとして描画する	plt.plot(データ列x, データ列y)
空行をプリントする	print()
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
棒グラフをサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='salmon')
ミントクリーム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
option: コーラルを使う	color = 'coral'
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
行列計算をする	import numpy as np
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
白い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
文字列を文字リストに変換する	list(s)
ホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
散布図に赤い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='r')
配列のスカラー倍	aArray * n
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
データフレームの列の種類	df.info()
マルーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
今日をタプルに変換する	datetime.datetime.today().timetuple()
タプルを展開してプリントする	print(*aTuple)
散布図をパープル色を使って描画する	plt.scatter(データ列x, データ列y, color='purple')
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
文字列を正規表現によって置換する	re.sub(pattern, newsub, s)
部分文字列が文字列の開始位置からと終了位置の間に含まれるか調べる	s.find(sub, start, end) != -1
レベッカパープル色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
PLSとして回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフのバツマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
カウンタのキーとカウントを列挙する	aCounter.items()
変数について数式の微分を求める	sympy.diff(e, z)
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
印字を全て見る	string.printable
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
ブランチドアーモンド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
xの小数点以下'4'桁までプリントする	print(':.4f'.format(x))
option: エラーがあるとき例外を発生させるように設定する	errors = 'strict'
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図の印をダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
青紫にヒストグラムの色を設定する	plt.hist(データ列, color='violet')
グラフの縦軸を対数に変更する	plt.yscale('log')
アルファベットの大文字を全て使う	string.ascii_uppercase
別の文字列に回数を制限して文字列中の部分文字列を置き換える	s.replace(sub, newsub, n)
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
文字列中にひとつでも非英数字があるか調べる	any(not c.isalnum() for c in s)
日付時刻データの時刻	aDatetime.time()
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ヒストグラムベースの勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.HistGradientBoostingClassifier()
ゼロ埋めされたベクトル	np.zeros(要素数)
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
ファイル全体をリストに変換する	[s.strip() for s in f.readlines()]
option: 分割記号をコロンにする	sep = ':'
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
グラフの縦軸の軸名をuntitledに設定する	plt.ylabel('y軸ラベル')
８ビット整数型のゼロ埋めした行列	np.zeros(要素数, dtype=np.int8)
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
データフレームを二つの列によってソートし、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
option: ブラックにグラフの色をする	color = 'black'
文字列を全て大文字に変換する	s.upper()
データフレームのインデックスの一覧	df.index
パールゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
PandasでデータフレームのcollのUNIX時間からdatetime64型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
新しい線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression()
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
データフレームの欠損値を平均値に指定する	df.fillna(df.mean())
データ列は正規分布からどれだけ、歪んでいるか見る	ds.kurt()
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
データフレームの列の値がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
三自然数の最小公倍数を計算する	math.lcm(n, n2, n3)
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
データフレームが重複しているかどうか調べる	df.duplicated()
データフレームのリストカラムの欠損値を最小値で補う	df[aList].fillna(df[aList].min())
青い大バツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
サイコロを振る	random.randint(1, 6)
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
カテゴリで色分けして、データフレームをに箱ひげ図で描画する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフのポイントマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
縦棒グラフをスノー色として描画する	plt.bar(データ列x, データ列y, color='snow')
グラフのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
データ列間の平方根平均二乗誤差を計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
散布図を左三角印を使って描画する	plt.scatter(データ列x, データ列y, marker='<')
option: 四角印を描画する	marker = 's'
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
データフレームの尖度を算出する	df.skew()
option: ヘッダをnamesに指定する	header = names
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
線グラフをローングリーン色として描画する	plt.plot(データ列x, データ列y, color='lawngreen')
二つの変数を改行で区切ってプリントする	print(value, value2, sep='\n')
行列の演算をする	import numpy as np
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
二つのオブジェクトが等しい	obj == obj2
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
文字列の開始位置番目と終了位置番目の間に部分文字列がないか	s.find(sub, start, end) == -1
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
文字列が文字列より辞書順で前か調べる	s < s2
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
ファイルを全て読む	f.read()
option: シエナ色を使う	color = 'sienna'
シーケンスのイミュータブルな集合	frozenset(iterable)
棒グラフをライトグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
黒いバツマーカーを数列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
ダークゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
nの三乗	n ** 3
セットにイテラブルの要素を全て追加する	aSet.update(iterable)
読み込み用にファイルをオープンして]、fとする	f = open(filepath, mode='r')
表をグループ化し列に対し最大値を求める	df.groupby(column)[column2].max()
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
ベクトルの転置行列	aArray.T
option: フォントの色をパールゴールデンロッドに指定する	color = 'palegoldenrod'
nを十六進表記に変換する	hex(n)
フォーマットfmtとしてデータ列を日付データにする	pd.to_datetime(ds, format=fmt)
2つのデータフレームを縦方向につなぐ	pd.concat([df, df2])
表データをグループ化し、それぞれの列に対し標準偏差を計算する	df.groupby(column)[column2].std()
紺碧色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
両端キュー中の要素のインデックス	deq.index(element)
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
横棒グラフを青紫色として描画する	plt.barh(データ列x, データ列y, color='violet')
破壊的に列によって降順にデータフレームを並べる	df.sort_values(by=column, ascending=False, inplace=True)
データ列の中に文字列とがあるか調べる	ds.isin([value, value2])
rgbの四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: フォントの色をドジャーブルーに設定する	color = 'dodgerblue'
データ列を10の位で丸める	ds.round(-1)
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
プロットの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
ヒストグラムの色をライトゴールドロディイエローに指定する	plt.hist(データ列, color='lightgoldenrodyellow')
両端キューの要素を逆順にする	deq.reverse()
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
ヒストグラムをバイオレット色で描画する	plt.hist(データ列, color='violet')
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
オリベドラブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
ファイルをSJISとしてオープンする]	open(filepath, encoding='shift_jis')
逆順の両端キュー	reversed(deq)
option: 星マーカーを使う	marker = '*'
データフレームからランダムに抽出する	df.sample()
option: 大バツマーカーを描画する	marker = 'X'
縦棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
グラフにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
ダークシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームを列によってまとめたグループを使う	df.groupby(column)
整数nのビット長	n.bit_length()
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
option: 青緑色を使う	color = 'teal'
nの桁数	len(str(n))
折れ線グラフの下三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データ列は何秒か見る	ds.dt.second
FIXME:カテゴリーデータを出現頻度順に並べる	df['A'].value_counts().sort_index().index
文字列の最後から空白を取り除く	s.rstrip(' ')
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
変数を黄色にする	f'\033[33m{value}\033[0m'
データ列の推移を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
シーグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
要素∈集合	element in aSet
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
option: ライムグリーン色を使う	color = 'limegreen'
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
option: ホットピンク色を使う	color = 'hotpink'
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
文字列の先頭から部分文字列を消す	s.removeprefix(sub)
option: フォントの色をゲインズボロにする	color = 'gainsboro'
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
キューのstart番目からendの部分値を使う	collections.deque(itertools.islice(deq, start, end))
行列の列ごとの標準偏差を求める	np.std(aArray, axis=0)
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
イテラブルとリストについて散布図を描画して四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
変数を緑色にする	f'\033[32m{value}\033[0m'
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
predicateFuncを適用したとき真とならない列の要素を求める	itertools.dropwhile(predicateFunc, iterable)
ダークグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
折れ線グラフにクロス印を用いる	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
ヒストグラムをモカシン色を用いて描画する	plt.hist(データ列, color='moccasin')
シンボル計算を使う	import sympy
ミディアムオーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='mediumorchid')
リストを分割数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームをJSONLファイルに小数点以下3桁まで書き込む	df.to_csv(filename, float_format='%.3f')
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
マゼンタにヒストグラムの色を変更する	plt.hist(データ列, color='magenta')
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
ハッシュ値	hash(x)
横棒グラフをライトイエロー色を使って描画する	plt.barh(データ列x, データ列y, color='lightyellow')
グラフをスライド用に設定する	sns.set(context='talk')
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
折れ線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
データフレームの数値をまとめて整数に丸める	df.round()
文字列を空白で分割して、文字列リストに変換する	s.split()
ライトイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
作画のフォントを日本語表示に指定する	sns.set(font='IPAexGothic')
データフレームの列の各データ値の出現回数	df[col].value_counts()
浮動小数点数を文字列にする	str(x)
線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
ゲインズボロ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
レベッカパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
二つのデータ列の残差を散布図としてプロットする	sns.residplot(x=データ列, y=データ列)
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
横棒グラフの縦幅をする	plt.barh(ラベル列, データ列, width=0.5)
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
オブジェクトはリストクラスかどうか判定する	isinstance(obj, list)
組とタプルを結合する	aTuple + aTuple2
青いグリッド線を引く	plt.grid(color='b')
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
マッピングから項目名の値を得る	aDict.get(key)
辞書をネスト化する	collections.ChainMap(aDict)
既存の配列をベースに全要素が1の配列	np.ones_like(aArray)
散布図のマーカーを四角印にする	plt.scatter(データ列x, データ列y, marker='s')
縦棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
アンティークホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ヒストグラムの色をパールバイオレットレッドに指定する	plt.hist(データ列, color='palevioletred')
データフレームの列の未入力値をxにセットする	df[col].fillna(x)
最後の部分文字列で文字列を二分し、最初の文字列を使う	s.rpartition(sub)[0]
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
Pythonのバージョンを知る	sys.version
値を青色にする	f'\033[34m{value}\033[0m'
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
カテゴリで色付けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
ヒストグラムの色を濃いシアンに変更する	plt.hist(データ列, color='darkcyan')
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
折れ線グラフの色をダークサーモンにセットする	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームの中のカラムをビン数nとしてビン分割する	pd.cut(df[col], n)
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
ダークシアンにヒストグラムの色を指定する	plt.hist(データ列, color='darkcyan')
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
グラフの縦横比を等しくする	plt.axis('equals')
線グラフをナバホホワイト色として描画する	plt.plot(データ列x, データ列y, color='navajowhite')
グラフの背景色を白くする	sns.set(style='whitegrid')
ホットピンク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
日付時刻データからn日分、減らす	aDatetime - datetime.timedelta(days=n)
option: マーカーを大バツに変える	marker = 'X'
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
データフレームを列によってグループ化して、合計を計算する	df.groupby(column).sum()
リストをビン数nで分割する	pd.cut(aList, n)
sepを区切りにして文字列リストを一つの文字列にする	sep.join(aStringList)
データフレームを列の値でグループ化して、それぞれのグループ毎の件数を知る	df.groupby(column).size()
文字列を全て小文字にする	s.lower()
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
データ列を十の位で丸めて、整数型にする	ds.round(-1).astype(int)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
データフレームを列の値によってグループ化する	df.groupby(column)
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
折れ線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
nが一桁の数	0 <= n <= 9
配列の差	aArray - aArray2
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
データフレームのカラムが正規分布からどの程度歪んでいるか調べる	df[col].kurt()
グリッド線を青くする	plt.grid(color='b')
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
列にイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ファイル名がTSVファイルかどうか調べる	filename.endswith('.tsv')
要素が集合に含まれないか調べる	element not in aSet
リストが空でないか調べる	len(aList) != 0
カラーバーを横向きでつける	plt.colorbar(orientation='horizontal')
xを印字できる文字列にする	ascii(x)
option: 欠損値を先頭にする	na_position = 'first'
1からnまでの整数列	list(range(1, n+1))
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
データフレームを各列毎にグループ化し、、文字列という名前のグループを求める	df.groupby(column).get_group(s)
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
イテラブルをダミー変数にする	pd.get_dummies(iterable)
option: グラフの種類を破線に指定する	linestyle = 'dashed'
散布図の左三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ミディアムスプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
日付データからn日分、引く	aDate - datetime.timedelta(days=n)
紺碧色でヒストグラムを描画する	plt.hist(データ列, color='azure')
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームを降順に列によってによって並べる	df.sort_values(by=column, ascending=False)
線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームをNaNを含めて列の値でグループ化する	df.groupby(column, dropna=False)
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
データフレームの中に文字列があるか調べる	df.isin([value])
ダークターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='darkturquoise')
データフレームのリストで指定された列の相関行列ケンドール順位相関係数で	df[aList].corr(method='kendall')
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
データ列間の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
ミッドナイトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
ディープスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
option: フォントの色をシスルに変更する	color = 'thistle'
日付時刻データのタイムゾーンを求める	aDatetime.timetz()
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
棒グラフの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
データフレームを転置する	df.T
回帰分析をパーセプトロンで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
option: チョコレートにグラフの色を指定する	color = 'chocolate'
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
リストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームを各カラム毎にグループ化し、、列の平均値を求める	df.groupby(column)[column2].mean()
データフレームを'A'列と'B'列によってまとめたグループ	df.groupby(['A', 'B'])
縦棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
表データを使う	import pandas as pd
バイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
オブジェクトは数値か確認する	isinstance(obj, (int,float))
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
モカシン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
データフレームのカラムが何分か見る	df[col].dt.minute
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
ホットピンク色でヒストグラムを描画する	plt.hist(データ列, color='hotpink')
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
タプルのオブジェクトが最初に見つかる位置	aTuple.index(element)
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
オブジェクトがリストの要素か調べる	element in aList
ヒストグラムをスチールブルー色を用いて描画する	plt.hist(データ列, color='steelblue')
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
線グラフをダークゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: ライトブルー色を使用する	color = 'lightblue'
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
配列とデータ列について散布図を描いて、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
ミスティローズ色でヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
option: サーモンにグラフの色を指定する	color = 'salmon'
黒いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
改行で文字列を区切る	s.splitlines()
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
文字列を最後の部分文字列で分けたときの前半の文字列を取り出す	s.rpartition(sub)[0]
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
option: グラフの色をタンに設定する	color = 'tan'
スピアマンの相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
データフレームのNaNを前の値に設定する	df.fillna(method='ffill')
折れ線グラフの色をトマトに変更する	plt.plot(データ列x, データ列y, color='tomato')
散布図を暗い赤色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkred')
文字列を太字にする	f'\033[1m{value}\033[0m'
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: ラベンダー色を用いる	color = 'lavender'
追加できるようにSJISとして既存のファイルを開く]	open(filepath, mode='a', encoding='shift_jis')
データフレームの指定された列	df[column]
タイムスタンプデータの日数	aDatetime.day
ヒストグラムをコーンズシルク色として描画する	plt.hist(データ列, color='cornsilk')
nが無限に続く数列	itertools.repeat(n)
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
散布図の左三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
数列と配列について散布図を描画して、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ビン数nを用いてリストを分割する	pd.cut(aList, n)
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームのリストカラムの中に日付データと文字列があるかどうか確認する	df[aList].isin([value, value2])
データフレームのリストカラムの中にいくつ文字列が含まれるか求める	df[aList].isin([value]).sum()
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
回帰モデルをクロスバリデーションする	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
日付データが木曜日か調べる	aDate.weekday() == 3
天井	math.ceil(x)
二つのオブジェクトが同じ参照か調べる	obj is obj2
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
日付時刻データにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
行列と同じ大きさの空配列を作る	np.empty_like(aArray)
スノー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
横棒グラフを描画して中央寄せする	plt.barh(ラベル列, データ列, align='center')
行列の行	aArray[行番号]
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
日付データが月曜日	aDate.weekday() == 0
棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
オブジェクトはリストクラスか調べる	isinstance(obj, list)
赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
シアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
オプションで、出力先を標準出力に変更する	file = sys.stdout
option: ライトシアン色を使用する	color = 'lightcyan'
２つの行列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
ゲインズボロ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
データフレームを列によって昇順に破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
option: スチールブルー色を使う	color = 'steelblue'
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
モデルを当てはめる	model.fit(説明変数, 目的変数)
Pandasでエポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
Pandasで日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
PNGファイルとしてグラフを保存する	plt.savefig('foo.png')
ヒストグラムを上限から下限の範囲で描画する	plt.hist(データ列, range=(start, end))
文字列が全てアルファベット	s.isalpha()
リストを順に表示する	print(*aList)
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
英字が文字列内にある	any(c.isalpha() for c in s)
０で全要素を初期化した行列を作る	np.zeros(行数, 列数)
データフレームの列名一覧で指定された列を取り除く	df.drop(columns, axis=1)
二つの浮動小数点数がほぼ等しいか調べる	math.isclose(x, x2)
データフレームのカラムの正規分布に対する上下広がり	df[col].skew()
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
数値の出力を改行なしに行う	print(value, end='')
option: ディープスカイブルー色を使う	color = 'deepskyblue'
列の各要素に対して、predicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
グリーンイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
option: フォントの色をハニーデューに指定する	color = 'honeydew'
スピアマンの順位相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
無限大を使う	math.inf
文字列内にひとつでも大文字が含まれるかどうか調べる	any(c.isupper() for c in s)
折れ線グラフのダイアモンドマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
データフレームから列を１つのみ選択する	df[[column]]
バリーウッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
リストを等間隔でn個に分割する	pd.cut(aList, n)
データ列とリストについて散布図をプロットし、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
要素がセットの要素に含まれない	element not in aSet
アクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
行列の列ごとの最大	np.max(aArray, axis=0)
option: ライトスレイグレーを使う	color = 'lightslategrey'
データフレームの信頼区間を描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
日付時刻データは何日か知る	aDatetime.day
パーセント付きの円グラフをプロットする	plt.pie(データ列, startangle=90, autopct='%.2f%%')
縦棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
今日の日付時刻	datetime.datetime.today()
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
整数nのバイト長	(n.bit_length() + 7) // 8
特異値分解を用いて多次元データを濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
ヒストグラムの色を紺に変更する	plt.hist(データ列, color='darkblue')
四分位点として標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
集合から要素を除く	aSet.remove(element)
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
データフレームを複数の列で小さい順にソートし、更新する	df.sort_values(by=column, ascending=True, inplace=True)
線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
option: グラフの色をオールドレースに設定する	color = 'oldlace'
アンティークホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
辞書を浅くコピーする	aDict.copy()
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
カウンタをクリアする	aCounter.clear()
折れ線グラフを左三角印で描画する	plt.plot(データ列x, データ列y, marker='<')
ファイルパスの拡張子を見る	os.path.splitext(filepath)[1].lstrip('.')
アンティークホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
オプションでファイルを出力にする	file = sys.open(filename, 'w')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
三自然数の最小公倍数	math.lcm(n, n2, n3)
方程式として数式の変数の解を求める	sympy.solve(e, z)
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
グラフに水平方向の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
オレンジ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
データフレームの指定された列を取り出す	df[column]
ダーク・スラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategrey')
データフレームのリストカラムの標本標準偏差	df[aList].std()
多次元データをMSDで濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
option: 色をピーチパフに変更する	color = 'peachpuff'
データフレームから列を２つのみ選択する	df[[column, column2]]
option: カデットブルー色を使う	color = 'cadetblue'
ブラック色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
辞書をチェーンマップにする	collections.ChainMap(aDict)
辞書からキーの値をエラーなく得る	aDict.get(key, None)
文字列を別の文字列で置き換える	s.replace(sub, newsub)
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
データフレームを散布図で可視化してカテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データ列を箱ひげ図にする	plt.boxplot(データ列)
数列とリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
日付データの月数	aDate.month
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
タン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
異なる列をキーとして2つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
末尾から文字列を空白で分割する	s.rsplit()
n個に配列をビニングし、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: ミディアムブルーに色を設定する	color = 'mediumblue'
黒色で文字列を出力する	print(f'\033[30m{value}\033[0m')
黒い△印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
項目名が辞書にあるか調べる	key not in aDict
自然数の最大公約数	math.gcd(n, n2)
横棒グラフを黄緑色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームのカラムの最頻値	df[col].mode()
ダークグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
データ列を使う	import pandas as pd
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
実数の天井	math.ceil(x)
黄色い線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
逆順の両端キューを使う	reversed(deq)
横棒グラフを黄色色として描画する	plt.barh(データ列x, データ列y, color='yellow')
折れ線グラフをダークブルー色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
数字を全部使う	string.digits
主成分分析で多次元データを濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
2つの数値をカンマで区切って表示する	print(value, value2, sep=',')
タプルのオブジェクトが最初に見つかるインデックス	aTuple.index(element)
線形モデルの回帰変数	model.coef_
横棒グラフの縦幅を指定する	plt.barh(ラベル列, データ列, width=0.5)
ふたつの集合が共通の要素を持たないかどうか調べる	aSet.isdisjoint(aSet2)
データ列の時を使う	ds.dt.hour
ホワイトスモーク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
nをn2倍にする	n *= n2
n2がn以上、かつ、n3以下か確認する	n <= n2 and n2 <= n3
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
辞書の項目名とその値をペアとして取り出す	aDict.items()
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
タイムスタンプデータの年数	aDatetime.year
変数を緑色でプリントする	print(f'\033[32m{value}\033[0m')
データフレームの中で、列の重複を調べる	df.duplicated(subset=column)
xの小数点以下'5'桁までの文字列にする	':.5f'.format(x)
棒グラフをスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='slateblue')
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
破線でリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
option: ピーチパフに色を設定する	color = 'peachpuff'
折れ線グラフの色をナバホホワイトに指定する	plt.plot(データ列x, データ列y, color='navajowhite')
線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
option: グラフの色をシスルに設定する	color = 'thistle'
ミディアムアクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
色名とカラーコードの対応表を見る	matplotlib.colors.cnames
ダークスラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
データフレームを表示するとき、最大列数を変更する	pd.set_option('display.max_columns', n)
リストの各値を関数に適用した結果で並べ直す	sorted(aList, key=func)
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
文字列から部分文字列を全て除去する	s.replace(sub, '')
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
整数nを8進文字列に変換する	oct(n)[2:]
決定木をグラフにする	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
実線を用いてデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid')
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
option: グラフの色をチョコレートに設定する	color = 'chocolate'
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
option: 色を半透明にする	alpha = 0.5
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
ファイルのディレクトリ名	os.path.dirname(filepath)
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
マルーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
ファイルパスからベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
オブジェクトのイテレータ	iter(obj)
データ列のどの値が頻出か見る	ds.mode()
グラフを濃くする	sns.set(pallete='deep')
ダークバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
文字列をプリントする	print(value)
データ列の折れ線グラフを星印で描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームを'A'列と'B'列の値でグループ化し、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
カラムの各データ値の出現数	df[col].value_counts()
横棒グラフをグリーンイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='greenyellow')
実数に整数を加える	x + y
整数nを八進文字列に変換する	oct(n)[2:]
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
棒グラフを耐火レンガ色を用いて描画する	plt.bar(データ列x, データ列y, color='firebrick')
線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
辞書にキーワード引数として追加する	aDict.update(**kwargs)
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
実数を万の位で丸める	round(x, -4)
option: マーカーの大きさを変更する	markersize = 2.0
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
データフレームを複数の列によってソートする	df.sort_values(by=column)
リストとデータ列についての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
データフレームを'A'列によってで降順にソートする	df.sort_values(by='A', ascending=False)
要素が全て1の配列	np.ones(要素数, dtype=np.int)
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
双曲線余弦の逆数	math.acosh(x)
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
珊瑚色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
データフレームのカラムの値が欠損値か調べる	df[col].isna()
文字列をシアンにする	f'\033[36m{value}\033[0m'
データフレームを表示するとき、小数点以下をn桁にする	pd.set_option('precision', n)
データフレームのどの値が頻出か確認する	df.mode()
散布図をレモンシフォン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
やわらかい青色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
データフレームを'A'列の値ごとにグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
データフレームのリストカラムの最頻値	df[aList].mode()
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
データフレームのカラムの年を求める	df[col].dt.year
ひとつでも非大文字が文字列中に含まれるか	any(not c.isupper() for c in s)
リストを順序付けする	enumerate(aList)
option: グラフの色をシエナに設定する	color = 'sienna'
ヒストグラムの色をスレートブルーに指定する	plt.hist(データ列, color='slateblue')
エポック秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
等しい量になるようにデータ列をn個に分割する	pd.qcut(ds, n)
ロバストな重回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
データ列を箱ヒゲ図で描画する	plt.boxplot(データ列)
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
ファイルから1文字読み込む	f.read(1)
option: ブラック色を使う	color = 'black'
タイムスタンプデータが金曜日	aDatetime.weekday() == 4
黒い右三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='>', c='k')
option: サンディーブラウン色を使う	color = 'sandybrown'
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
文字列を正規表現で分割する	re.split(pattern, s)
実数を実数で割った余り	x % y
整数をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
整数の並べ方の総数	math.perm(n)
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
xの小数点以下'3'桁までの文字列にする	':.3f'.format(x)
option: エンコーディングをBOM付きに指定する	encoding = 'utf_8_sig'
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
オブジェクトが名前付きタプルのインスタンス	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
配列をビン数nで等しい量になるようにビン分割する	pd.qcut(aArray, n)
折れ線グラフの四角印を赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
折れ線グラフに黒い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
既存の行列をベースに全要素が1の配列	np.ones_like(aArray)
整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int)
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
入力ストリームを改行除外して一行ずつ読み込む	f.readline()
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
散布図にrgbのバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
散布図に黒い菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムの色をピンクに変更する	plt.hist(データ列, color='pink')
スタックの先頭から値を取り除く	deq.popleft()
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
ヒストグラムをダークシアグリーン色として描画する	plt.hist(データ列, color='darkseagreen')
折れ線グラフの色をフローラルホワイトに指定する	plt.plot(データ列x, データ列y, color='floralwhite')
データフレームの列が文字列で終わるデータを抽出する	df[df[column].str.endswith(s)]
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
タプルのn番目のの要素を使う	aTuple[n]
重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
グラフの色を淡くする	sns.set(pallete='muted')
縦棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
データフレームのリストカラムの平均値を求める	df[aList].mean()
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
アルファベットの小文字列	string.ascii_lowercase
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
データ列が何曜日か調べる	ds.dt.weekday_name
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
n個の集まりからk個重複なく選ぶ方法を求める	math.comb(n, k)
折れ線グラフの色をライトイエローに変更する	plt.plot(データ列x, データ列y, color='lightyellow')
パレットトルコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
双方向キューをタプルにする	tuple(deq)
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
eの乗数	math.exp(x)
プログラムの実行を正常に終了する	sys.exit(0)
option: グラフの色を真紅に変更する	color = 'crimson'
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
両端キューの左に要素を追加する	deq.appendleft(element)
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームを複数の列の値でグループ化し、要約統計量を求める	df.groupby(columns).describe()
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
option: 左三角印を使う	marker = '<'
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
行列の行ごとの最大値を計算する	np.max(aArray, axis=1)
ふたつのリストの共通りストを求める	list(set(aList) & set(aList2))
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
変数をシアンにする	f'\033[36m{value}\033[0m'
散布図をマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='magenta')
モジュールとして自分自身を	sys.modules[__name__]
タプルの中の最大値	max(aTuple)
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
ダークグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
日付データにn秒分、加える	aDate + datetime.timedelta(seconds=n)
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
データフレームから重複した行を削除する	df.drop_duplicates()
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
nのn2乗	n ** n2
データフレームを複数の列の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
文字列中の小文字を大文字に変換する	s.upper()
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
組の末尾を使う	aTuple[-1]
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
option: タブをセパレータで使用する	sep = '\t'
赤いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='r')
商と余りを同時に求める	divmod(x, y)
散布図に四角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='s')
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
空の集合	set()
データフレームの中にと文字列がいくつ含まれるか数える	df.isin([value, value2]).sum()
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
カラムが正規分布からどの程度、歪んでいるか確認する	ds.kurt()
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
option: 印を大バツに設定する	marker = 'X'
折れ線グラフの色をミディアムシアグリーンに指定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
xを浮動小数点数に変換する	float(x)
データフレームのカラムはどの程度分散しているか見る	df[col].var()
option: 改行コードをUNIXに設定する	newline = '\n'
実線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
数列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
散布図の右三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
最大長nの両端キューを用意する	collections.deque(maxlen=n)
データフレームを複数の列の値によって集約する	df.groupby(columns)
ミディアムスレートブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
データフレームから数値データの列を選択する	df.select_dtypes('number')
データフレームの列名を指定された名前リストに置き換える	df.columns = columns
nullに等しい値	None
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
Pandasで、データフレームのcollを日付データにする	pd.to_datetime(df[col])
タプルのn番目以降の部分を取り出す	aTuple[n:]
x,y,zをそれぞれn,n2,n3にセットする	x, y, z = n, n2, n3
数値の積分を算出する	sympy.integrate(e)
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
散布図をミディアムスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
線グラフの線種を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
ヒストグラムの色をシスルに指定する	plt.hist(データ列, color='thistle')
option: ダークターコイズにグラフの色を設定する	color = 'darkturquoise'
rgbの丸マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
平均値でデータフレームのカラムのNaNを埋める	df[col].fillna(df[col].mean())
縦棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームから最後の列を除く	df[df.columns[:-1]]
文字列をバイト列にする	bytes(s)
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
option: ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
データフレームを各列毎にグループ化して文字列というグループの個数を算出する	df.groupby(column).size()[s]
データフレームのカラムが正規分布からどれだけ、尖っているか見る	df[col].skew()
ライトゴールドロディイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: レモンシフォンを使う	color = 'lemonchiffon'
option: ▽マーカーを描画する	marker = 'v'
ロードされたモジュールの一覧	sys.modules
0からnの範囲	range(n)
データ列のNaNを直後の値に減らす	ds.fillna(method='bfill')
データフレームを各列毎に集計し、、列の最大値を計算する	df.groupby(column)[column2].max()
オブジェクトをイテラブルに変換する	iter(obj)
データフレームを列によって小さい順に破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
option: 紺碧を使用する	color = 'azure'
日付データが何年か知る	aDate.year
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
グラフの色をパステル調にする	sns.set(pallete='pastel')
文字列が全て英数字か調べる	s.isalnum()
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
文字列のn番目の文字	s[n]
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
やわらかい青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
８進数字を使う	string.octdigits
ミディアムブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームの未入力値をメディアンに設定する	df.fillna(df.median())
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
n個の数値イテラブルを求める	range(n)
ミディアムバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
データフレームの中の列を中央値でビニングする	pd.qcut(df[col], 2)
ファイルを一行ずつ読み込む	f.readline()
データ列の推移を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
ヒストグラムをミディアムバイオレットレッド色として描画する	plt.hist(データ列, color='mediumvioletred')
カンマ区切りのファイルからデータフレームを読む	pd.read_csv(filename, sep=',')
両端キューをdequeue	deq.popleft()
データフレームのカラムと列の相関行列ピアソン相関係数で	df[[column, column2]].corr(method='pearson')
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
散布図の大バツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
nからn2までのスライス	slice(n, n2)
デピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
配列とリストについて散布図を描画して、マーカーをバツにセットする	plt.plot(データ列x, データ列y, marker='x')
配列の出現頻度を可視化する	plt.hist(データ列)
データフレームを使う	import pandas as pd
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
タイムスタンプデータが火曜日	aDatetime.weekday() == 1
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
データ列をインポートする	import pandas as pd
ヒストグラムをディムグレー色として描画する	plt.hist(データ列, color='dimgray')
昇順にデータフレームを行でソートする	df.sort_index(ascending=True)
貝殻色で線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
データフレームの中に文字列が含まれる	df.isin([value])
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
タプルを階層化マップに変換する	collections.ChainMap(aDict)
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
データフレームを'A'列の値によってグループ化し、要約統計量を算出する	df.groupby('A').describe()
option: 小麦色を使う	color = 'wheat'
カウンタのユニークな項目を列挙する	list(aCounter)
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
黒い上三角マーカーを配列とイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図をオリーブ色を使って描画する	plt.scatter(データ列x, データ列y, color='olive')
箱ひげ図として数列を描画する	plt.boxplot(データ列)
黒いダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
グラフを描画する準備をする	import matplotlib.pyplot as plt
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
データフレームからn行、サンプリングする	df.sample(n)
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
xが一桁の整数か	-9 <= x <= 9
option: ダークオリーブグリーンに色を設定する	color = 'darkolivegreen'
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
散布図をプラム色を用いて描画する	plt.scatter(データ列x, データ列y, color='plum')
option: EUCを使用する	encoding = 'euc_jp'
option: ミッドナイトブルーを使う	color = 'midnightblue'
x軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
ポイントマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='.')
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
組とタプルを加える	aTuple + aTuple2
文字列の変数名を数式に変換する	sympy.Symbol(s)
散布図のダイアモンドマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
y座標の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
現在が水曜日か調べる	datetime.datetime.today().weekday() == 2
棒グラフをグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='gray')
データフレームの未入力値を最大値で埋める	df.fillna(df.max())
イテラブルとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: フクシアを使う	color = 'fuchsia'
最頻値でカラムの欠損値を補う	ds.fillna(ds.mode().iloc[0])
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
横棒グラフをインディゴ色として描画する	plt.barh(データ列x, データ列y, color='indigo')
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
縦棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
プロット中で日本語を使えるようにする	sns.set(font='IPAexGothic')
インデント幅nで、辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
option: エンコーディングをSJISに指定する	encoding = 'shift_jis'
option: 降順にする	ascending = False
文字列の開始位置と終了位置の間に部分文字列が存在するか調べる	s.find(sub, start, end) != -1
文字列がリストの要素	element in aList
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
データフレームのリストカラムの平均値を計算する	df[aList].mean()
本日の曜日を整数で使う	datetime.datetime.today().weekday()
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
読み込みモードを使ってファイルをオープンして]fとする	f = open(filepath, mode='r')
データ列の第三四分位数	ds.quantile(0.75)
option: フォントの色をバリーウッドに設定する	color = 'burlywood'
ファイルパスのディレクトリ名	os.path.dirname(filepath)
データフレームの中で列と列に重複があるか調べる	df.duplicated(subset=[column, column2])
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
データフレームを'A'列によってによって大きい順に整列する	df.sort_values(by='A', ascending=False)
グラフのフォントを日本語表示に変更する	sns.set(font='IPAexGothic')
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X')
option: エラーがあるとき、例外を発生させるように指定する	errors = 'strict'
ダークターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
配列と配列について散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームの棒プロットを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
タプル上で項目名が定義済みかどうか調べる	key in aDict
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
縦棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列内にひとつでも空白があるかどうか調べる	any(c.isspace() for c in s)
文字列中にひとつでも非大文字が含まれるかどうか確認する	any(not c.isupper() for c in s)
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
nの十六進数リテラル	hex(n)
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
option: 色のアルファ値を設定する	alpha = 0.5
データフレームの列の未入力値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
散布図に右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
散布図をローングリーン色として描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
スレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
option: グラフの色をオーキッドに指定する	color = 'orchid'
本日をISO形式の文字列にする	datetime.datetime.today().isoformat()
option: 印の色を変更する	markerfacecolor = '#800080'
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
行列の行ごとの平均値	np.mean(aArray, axis=1)
全数字	string.digits
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
キューの最後から値を削除する	deq.pop()
折れ線グラフの大バツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
option: グラフの色を紺に設定する	color = 'darkblue'
ペールグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='palegreen')
部分文字列を文字列の最初から見つける	s.find(sub)
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
リストを境界値として列を分割する	pd.cut(ds, aList)
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
ビスク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
データフレームのカラムのユニークな要素数	df[col].nunique()
タブ区切りのファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
オブジェクトは数値か調べる	isinstance(obj, (int,float))
文字列の無限イテラブル	itertools.repeat(element)
折れ線グラフの上三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
実数を小数点以下で丸める	round(x, n)
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ミディアムアクアマリン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
文字列が全てアスキー文字か	s.isascii()
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
オブジェクトは浮動小数点数クラスのインスタンスか調べる	isinstance(obj, float)
タプルを順にプリントする	print(*aTuple)
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
JSONファイルのファイルを読み込んでdataとする	data = json.load(fin)
折れ線グラフをライトイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightyellow')
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
文字列を部分文字列で二つに区切って、前半の文字列を見る	s.partition(sub)[0]
データフレームのカラムが何年か調べる	df[col].dt.year
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図のダイアモンドマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ライムグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
ペルー色としてヒストグラムを描画する	plt.hist(データ列, color='peru')
文字列が平仮名かどうか調べる	('ぁ' <= ch <= 'ん')
ミディアムシアグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
折れ線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
プログラムを即座に終了する	sys.exit()
option: フォントの色をタンに設定する	color = 'tan'
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
縦棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
散布図の星マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ヒストグラムをレベッカパープル色として描画する	plt.hist(データ列, color='rebeccapurple')
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
データフレームを列の値によってグループ分けしてグループの標準偏差を求める	df.groupby(column).std()
ヒストグラムの描いて、正規化する	plt.hist(データ列, density=True)
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
ライトサーモン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームのリスト列の欠損値を最小値に変更する	df[aList].fillna(df[aList].min())
データフレームを複数の列で集約する	df.groupby(columns)
ダークグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
０で全要素を初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
データフレームをグループ化して、ヒストグラムを用いて描画する	sns.histplot(df, x='列名', hue='カテゴリ名')
文字列の右側から改行を取り除く	s.rstrip('\n')
赤いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
オブジェクトをデバッグ向けの文字列にする	repr(obj)
option: ホワイトスモークを使う	color = 'whitesmoke'
ダークブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
Pandasでフォーマットとしてデータ列をdatetime64型にする	pd.to_datetime(ds, format='%Y-%m-%d')
nがn2で割り切れないかどうか	n % n2 != 0
ピンクにヒストグラムの色を設定する	plt.hist(データ列, color='pink')
データフレームのカラムの各データ値の出現数	df[col].value_counts()
数式を浮動小数点数にする	float(e)
ファイル名がテキストファイルか	filename.endswith('.txt')
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
組をリストに変換する	list(aTuple)
リストと配列の散布図を描画して、▲マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
入力ストリームを解放する	f.close()
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
青い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
グラフの色を濃くする	sns.set(pallete='deep')
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
折れ線グラフの印を右三角にする	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフの四角印の太さを変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
折れ線グラフの色をカラーコードを用いて設定する	plt.plot(データ列x, データ列y, color='#800080')
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
辞書のキーを列挙する	list(aDict)
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
複数の列でデータフレームを昇順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
浮動小数点数を複素数に変換する	complex(x)
カテゴリ別で色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
数値を赤色でプリントする	print(f'\033[31m{value}\033[0m')
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
マルーン色としてヒストグラムを描画する	plt.hist(データ列, color='maroon')
集合の補集合	aSet.difference(aSet2)
散布図をディープスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
散布図にバツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='x')
散布図をシアン色として描画する	plt.scatter(データ列x, データ列y, color='cyan')
文字列はPythonのキーワードか	keyword.iskeyword(s)
データ列の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
option: グラフの色をミントクリームに設定する	color = 'mintcream'
コマンドtextを実行する	os.system(text)
マッピングをソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
赤い三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図のマーカーを三角印にする	plt.scatter(データ列x, データ列y, marker='^')
棒グラフをデピンク色として描画する	plt.bar(データ列x, データ列y, color='deeppink')
実行結果を白色で出力する	print(f'\033[37m{value}\033[0m')
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
ヒストグラムをゴールデンロッド色として描画する	plt.hist(データ列, color='goldenrod')
ミディアムターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
ダークターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
赤い▲マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図を大バツ印を使って描画する	plt.scatter(データ列x, データ列y, marker='X')
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
イテラブルとデータ列の散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
実数がNaNか調べる	math.isnan(x)
データフレームを'A'列を用いてソートして更新する	df.sort_values(by='A', inplace=True)
データフレームのn番目の行を抽出する	df.loc[n]
ライムグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
縦棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
データフレームを表示するとき、表示できる列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
青い△マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
赤い破線を用いて線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
折れ線グラフをホットピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='hotpink')
二つの変数をそれぞれ定義する	x, y = i, j
カンマ区切りのファイルTSVファイルをn番目の列をインデックスにして読む	pd.read_csv(filename, index_col=n)
リストとリストの散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
日本語をグラフ中で表示できるようにする	sns.set(font='IPAexGothic')
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
縦棒プロットを描いて、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームのカラムの曜日数を見る	df[col].dt.dayofweek
エクセルデータファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
実数のtan	math.tan(x)
ライム色としてヒストグラムを描画する	plt.hist(データ列, color='lime')
デピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
数値を簡単にする	sympy.sympify(e)
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
線グラフの色をパールバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームを列でで大きい順にソートする	df.sort_values(by=column, ascending=False)
実行環境の再帰の最大回数	sys.getrecursionlimit()
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
アルファベットを全て使う	string.ascii_letters
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
文字列を隔離する	sys.intern(s)
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
option: マーカーの色を真紅にする	markerfacecolor = 'crimson'
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
データフレームのリスト列の相関行列ピアソン相関係数で	df[aList].corr(method='pearson')
n個の集まりからk個選ぶ方法	math.comb(n, k)
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
データフレームを十の位で丸めて、整数型にする	df.round(-1).astype(int)
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
列をキーとして２つのデータフレームを内部ジョインする	pd.merge(df, df2, on=column, how='inner')
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームがどの程度、分散しているか確認する	df.var()
数列とデータ列について散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
クラスが名前付きタプルか調べる	issubclass(C, tuple)
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
散布図としてデータフレームのカラムを可視化する	sns.scatterplot(data=df, x='列名', y='列名')
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
option: フォレストグリーン色を使う	color = 'forestgreen'
文字列を小文字に変換する	s.casefold()
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
▲マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
昇順にタプルを並べ変える	sorted(aTuple, reverse=True)
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
ヒストグラムの色をティールに設定する	plt.hist(データ列, color='teal')
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
NaNも加えてデータフレームの列をワンホット・ベクトルにする	pd.get_dummies(df[column], dummy_na=True)
集合から別のセットとの共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
ふたつのリストの積集合	list(set(aList) & set(aList2))
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
プラットフォームの文字コードの最大値	sys.maxunicode
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
2つの文字列は等しくないか判定する	s != s2
データ列をビン数nとしてビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
縦棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
数式の数値	float(e)
option: グラフの色をライトグリーンに指定する	color = 'lightgreen'
ASCII限定として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
折れ線グラフの下三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
option: グラフの色をラベンダーに設定する	color = 'lavender'
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
カウンタ同士で∪	aCounter | aCounter2
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
折れ線グラフの丸マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
デピンクにヒストグラムの色を指定する	plt.hist(データ列, color='deeppink')
文字列をバイト配列に変換する	bytearray(s)
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
nからいつまでも数え上げるする	itertools.count(start=n)
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
最大値・最小値の範囲を用いて一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
ふたつの集合が互いに素かテストする	aSet.isdisjoint(aSet2)
ヒストグラムにカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
文字列を右トリムする	s.rstrip()
データフレームのリストカラムの未入力値を中央値に設定する	df[aList].fillna(df[aList].median())
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
実数は無限大か	math.isinf(x)
データフレームの列の名前をカラムから文字列に変更する	df.rename(columns={column: name})
書き込みできるようにBOM付きでファイルを開く]	open(filepath, mode='w', encoding='utf_8_sig')
ラインを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
折れ線プロットでリストを作図する	plt.plot(データ列x, データ列y)
データフレームの歪度	df.kurt()
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
ヒストグラムを青色として描画する	plt.hist(データ列, color='blue')
文字列は平仮名	('ぁ' <= ch <= 'ん')
option: ダークグレー色を使う	color = 'darkgrey'
▼マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v')
option: グレー色を使用する	color = 'grey'
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
リストを逆順にする	aList[::-1]
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
要素一つのタプルを作る	(element,)
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
option: ライトスレイグレーに色を設定する	color = 'lightslategrey'
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒートマップでデータフレームのリスト列の相関行列を描画する	sns.heatmap(df[aList].corr())
配列とリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
文字列が平仮名か	('ぁ' <= ch <= 'ん')
配列とリストについて散布図を描画し、、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
配列とリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
ガンマ関数の値	math.gamma(x)
ペルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
nがn2以下、またはn3以上かどうか	n <= n2 or n >= n3
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
空の両端キュー	collections.deque()
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
日付データが日付データより後ろ	aDate > aDate2
ゴールド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
文字列の左側から空白を除去する	s.lstrip(' ')
数を文字列にする	str(x)
棒グラフをフォレストグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='forestgreen')
行列の列ごとの最大値	np.max(aArray, axis=0)
ターコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
横棒グラフをロイヤルブルー色として描画する	plt.barh(データ列x, データ列y, color='royalblue')
ライトスレイグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
変数を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
オリベドラブ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
ラインを赤い一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ひとつでも空白が文字列内にある	any(c.isspace() for c in s)
散布図をライム色を使って描画する	plt.scatter(データ列x, データ列y, color='lime')
オプションで、ファイルを使う	file = sys.open(filename, 'w')
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
円グラフを正確な円にする	plt.axis('equals')
数式の変数を数式で置き換える	e.subs(z, e2)
option: やわらかい青に色を設定する	color = 'cornflowerblue'
データフレームのカラムの中にいくつ欠損値があるかカウントする	df[col].isna().sum()
文字列が全て空白文字からなるかどうか調べる	s.isspace()
折れ線グラフの色をプラムに指定する	plt.plot(データ列x, データ列y, color='plum')
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
データ列の中にと文字列があるか確認する	ds.isin([value, value2])
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
8進文字列をbytesizeバイトのバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
縦棒グラフをスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='skyblue')
文字列をカンマで区切って、列挙する	s.split(',')
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームの列のモード	df[col].mode()
option: 青にフォントの色を指定する	color = 'blue'
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
データフレームのインデックスの名前をまとめて、nameからname2に変更する	df.rename(index={name: name2})
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
グラフの描画で暗くカラーパレットを用いる	sns.set(pallete='dark')
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
データフレームからランダムにn行を抽出する	df.sample(n)
option: 未入力値は無視する	dropna = True
点線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
小数点数以上の最小の整数	math.ceil(x)
文字列が部分文字列で終わるか調べる	s.endswith(sub)
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
耐火レンガにヒストグラムの色を変更する	plt.hist(データ列, color='firebrick')
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
データフレームのそれぞれのグループ毎の合計	df.groupby(column).sum()
配列のデータ型	aArray.dtype()
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
縦棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
option: グラフの色をハニーデューに設定する	color = 'honeydew'
ゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
option: フォントの色をナバホホワイトに指定する	color = 'navajowhite'
黒い上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
文字列の開始位置以降が部分文字列で始まるかどうか	s.startswith(sub, start)
データフレームから破壊的に重複したデータを削除する	df.drop_duplicates(inplace=True)
option: フォントの色を黄色にセットする	color = 'yellow'
データフレームのカラムの下位25%	df[col].quantile(0.75)
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
データフレームの中に存在する日付データの合計を求める	df.isin([value]).sum()
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
PandasでdateStringをPandasの日付型に変換する	pd.to_datetime(dateString)
データフレームを二つの列によってで破壊的に並べる	df.sort_values(by=['A', 'B'], inplace=True)
スクリプトファイルのフォルダパスを使う	os.path.dirname(os.path.abspath(__file__))
Pandasで、UNIX秒のデータフレームのcollからdatetime64型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
カウンタから最頻出な項目の件数を計算する	aCounter.most_common()[1]
要素をデックにスタックする	deq.append(element)
option: グラフの色をライトシアンに指定する	color = 'lightcyan'
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightgreen')
データフレームをインポートする	import pandas as pd
行列の分散	np.var(aArray)
片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データフレームの平均値	df.mean()
数値の部分分数化を行う	sympy.apart(e)
散布図にrgbの星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: オリベドラブ色を使用する	color = 'olivedrab'
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
赤い下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
サポートベクター回帰モデルを準備する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
option: 色をダーク・スラテグレーに設定する	color = 'darkslategrey'
日付データが日付データより後ろか調べる	aDate > aDate2
UTF8を用いてファイルを書き込みできるように開く]	open(filepath, mode='w', encoding='utf-8')
線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
要素が集合の要素	element in aSet
自然数最小公倍数	math.lcm(n, n2)
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
option: 赤色を用いる	color = 'red'
ブランチドアーモンド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
アイボリー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
文字列リストを連結し、一つの文字列にする	''.join(aStringList)
両端キューの末尾を使う	deq[-1]
文字列リストを連結して一つの文字列にする	''.join(map(str, iterable))
データフレームのカラムをタイムスタンプ型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
マッピング上で項目名がまだ定義されていないか	key not in aDict
パープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
散布図に黒い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
イテラブルと列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
データ列のRMSEを計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
option: ミディアムスレートブルーにフォントの色を変更する	color = 'mediumslateblue'
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
やわらかい青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
両端キューの先頭を使う	deq[0]
n個分右に双方向キューの順序を回転させる	deq.rotate(n)
文字列を太字で出力する	print(f'\033[1m{value}\033[0m')
データ列の曜日は何日目か見る	ds.dt.dayofweek
option: グラフの線の種類を実線に設定する	linestyle = 'solid'
option: 配列のデータ型を指定する	dtype = np.uint8
option: 色をドジャーブルーにセットする	color = 'dodgerblue'
線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
rgbの菱形マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ファイルをバイナリ書き込み用に開く]	open(filepath, mode='wb')
タブ区切りとしてデータフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
オブジェクトがリストか	isinstance(obj, list)
option: グラフの色を紺碧に変更する	color = 'azure'
データフレームの2つの列を並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
データフレームの末尾n行を取り出す	df.tail(n)
プロットの描画で暗くカラーパレットを使用する	sns.set(pallete='dark')
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
2つのデータフレームをジョインする	pd.merge(df, df2)
文字列を評価する	eval(s)
小数点数とyの斜辺	math.hypot(x, y)
option: フォントの色をライトスレイグレーに変更する	color = 'lightslategrey'
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
ヒストグラムの線の種類を破線に変更する	plt.hist(データ列, linestyle='dashed')
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
赤い一点鎖線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<')
イテラブルから重複を取り除く	set(iterable)
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
データフレームを10の位で丸める	df.round(-1)
option: マーカーを四角に変える	marker = 's'
二次元タプルをflattenする	sum(aTuple)
ホワイトスモーク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
文字列のサフィックスから部分文字列を取り除く	s.removesuffix(sub)
全十六進数字	string.hexdigits
茶色色としてヒストグラムを描画する	plt.hist(データ列, color='brown')
配列のユニークな要素とその位置を算出する	u, indices = np.unique(aArray, return_index=True)
option: グラフの色をホットピンクに設定する	color = 'hotpink'
散布図の左三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
整数nがセットのどれか	n in aSet
option: スノー色を使用する	color = 'snow'
文字列はPythonのキーワードかテストする	keyword.iskeyword(s)
nというシートをファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
中央値でリストをビンニングする	pd.qcut(aList, 2)
ゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
フクシアにヒストグラムの色をする	plt.hist(データ列, color='fuchsia')
データフレームのリストカラムを千の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
リッジ回帰とロッソ回帰の組み合わせた分析の準備をする	model = sklearn.linear_model.ElasticNet()
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
配列とリストについて散布図を描画し、、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
項目名で指定された値を辞書からポップする	aDict.pop(key)
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
シルバー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
option: 青紫を使う	color = 'violet'
ヒストグラムの色をタンにセットする	plt.hist(データ列, color='tan')
リストをn回、結合する	aList * n
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
オプションで標準エラーに出力する	file = sys.stderr
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
option: 表示を半透明にする	alpha = 0.5
改行文字	'\n'
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
option: 黄緑色を用いる	color = 'chartreuse'
青色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
散布図の左三角印を青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
パウダーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
日付データが金曜日か調べる	aDate.weekday() == 4
データ列を十の位で四捨五入して整数にする	ds.round(-1).astype(int)
カラーバーを水平で付ける	plt.colorbar(orientation='horizontal')
タプルの要素を逆順にする	aTuple[::-1]
option: ナバホホワイト色を使う	color = 'navajowhite'
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgrey')
ホールドアウト法を使用する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
行列の行ごとの最小値	np.min(aArray, axis=1)
option: NaNを先頭に来るようにする	na_position = 'first'
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ファイルを書き込みモードを用いてオープンする]	open(filepath, mode='w')
データ列と配列の散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
リストの出力を改行しないで行う	print(value, end='')
散布図をアリスブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
実数のアークタンジェント	math.atan(x)
データフレームを二つの列によって並べ直す	df.sort_values(by=['A', 'B'])
タプルの先頭	aTuple[0]
散布図を淡いピンク色色を使って描画する	plt.scatter(データ列x, データ列y, color='lightpink')
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
マッピングから最後に追加したエントリをポップする	aDict.popitem()
ライトサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データ列の値が正規分布にしたがって発生する確率を算出する	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
二つの集合の差	aSet.difference(aSet2)
本日の年数を求める	datetime.datetime.today().year
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
要素が集合に含まれるか調べる	element in aSet
円グラフを時計回りに描く	plt.pie(データ列, startangle=90, counterclock=False)
データ列を丸めて、整数型にする	ds.round().astype(int)
乱数の配列	np.random.random(N)
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
リストの値のみ出力する	print(*aList)
データフレームをTSVから読み込む	pd.read_csv(filename, sep='\t')
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
データ列のNaNを直前の値で埋める	ds.fillna(method='ffill')
耐火レンガにヒストグラムの色を設定する	plt.hist(データ列, color='firebrick')
折れ線グラフの色をホワイトにする	plt.plot(データ列x, データ列y, color='white')
横向きに三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
散布図のバツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
日付時刻データが何分か知る	aDatetime.minute
最大値でデータフレームの欠損値を置換する	df.fillna(df.max())
綺麗なグラフを描画する準備をする	import seaborn as sns
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
棒グラフをダークオリーブグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
白色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
NULLに等しい値	None
書き込み用に文字列の示すエンコーディングでファイルをオープンする]	open(filepath, mode='w', encoding=s)
option: 下三角印を使う	marker = 'v'
散布図の下三角印の色を指定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
オブジェクトは数値	isinstance(obj, (int,float))
折れ線グラフの色をオレンジレッドに変更する	plt.plot(データ列x, データ列y, color='orangered')
イテラブルを文字列に変換して結合する	''.join(map(str, iterable))
日付時刻データが何時か知る	aDatetime.hour
option: グラフの色をアンティークホワイトに指定する	color = 'antiquewhite'
ヒストグラムを描画して、ビン数を指定する	plt.hist(データ列, bins=区関数)
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
文字列がリストの要素でないか確認する	element not in aList
文字列の右側から空白を除く	s.rstrip(' ')
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
y軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
データフレームの各次元のサイズ	df.shape
折れ線グラフの大バツ印の色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
タイムスタンプデータをn日前にする	aDatetime - datetime.timedelta(days=n)
カテゴリごとにデータフレームの棒グラフを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
ヒストグラムの色をライムに指定する	plt.hist(データ列, color='lime')
集合をイミュータブルに変換する	frozenset(aSet)
ユニコードを文字に変換する	chr(unicode)
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
option: スチールブルーにフォントの色を設定する	color = 'steelblue'
折れ線グラフに菱形印を用いる	plt.plot(データ列x, データ列y, marker='D')
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
データフレームを'A'列によってで大きい順にソートする	df.sort_values(by='A', ascending=False)
ヒストグラムの色をブランチドアーモンドに指定する	plt.hist(データ列, color='blanchedalmond')
実数から実数を引く	x - y
マップの項目名を列挙する	list(aDict)
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
箱髭図を横方向にする	plt.boxplot(データ列, vert=False)
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームを行によって整列する	df.sort_index()
列から最大長nのキューを作る	collections.deque(iterable, maxlen=n)
日付データの日数を使う	aDate.day
リストをイミュータブルにする	tuple(aList)
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
シエナ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
マップを複製する	dict(aDict)
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
データフレームを各列と列の組み合わせ毎に集約して最大値を求める	df.groupby([column, column2], as_index=False).max()
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームの列が正規表現文字列にマッチしない行を取り出す	df[not df[column].str.match(s)]
文字列全体がパターンに複数行対応としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
折れ線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームからランダムにn行を取り出す	df.sample(n)
数値を微分する	sympy.diff(e)
改行なしに二つの文字列をプリントする	print(value, value2, end='')
横棒グラフをドジャーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
option: ダークグレーを用いる	color = 'darkgray'
リストをn倍する	aList * n
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgray')
有理数の分母	q.denominator
棒グラフをリネン色として描画する	plt.bar(データ列x, データ列y, color='linen')
文字列内にひとつでも数字が含まれるか	any(c.isdigit() for c in s)
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
パパイヤウィップ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
青色で実行結果を出力する	print(f'\033[34m{value}\033[0m')
現在が何分か知る	datetime.date.today().minute
ペルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
データフレームの母標準偏差を求める	df.std(ddof=0)
インデント幅nで、辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: ゴールド色を使う	color = 'gold'
印字できる文字列にする	ascii(x)
棒グラフをダークスレートブルー色を使って描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
データフレームのカラムを1000の位で四捨五入して、整数型にする	df[col].round(-3).astype(int)
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
本日が何曜日か知る	datetime.datetime.today().weekday()
リストとデータ列について散布図を描画して、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
まとめてデータフレームのリスト列を正規表現でreplに置換する	df[aList].replace(pattern, repl, regex=True)
option: スラグレーを使用する	color = 'slategray'
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
折れ線グラフを色付きの点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
nが1、もしくは2	n == 1 or n == 2
折れ線グラフの色をゲインズボロに指定する	plt.plot(データ列x, データ列y, color='gainsboro')
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
文字列の大文字と小文字を交換する	s.swapcase()
ヒストグラムの色をマゼンタにセットする	plt.hist(データ列, color='magenta')
紺色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
実数の常用対数	math.log10(x)
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
グリーンイエロー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データ列の中央値	ds.median()
データフレームを列によってソートする	df.sort_values(by=column)
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
ダーク・スラテグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
データフレームをランダムサンプリングする	df.sample()
データフレームのn行目を削除する	df.drop(n, axis=0)
青い破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
配列と配列の散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームの列を散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
列の文字列長を列として使う	ds.str.len()
option: ダークターコイズを用いる	color = 'darkturquoise'
文字列をカンマで分割し、、文字列リストに変換する	s.split(',')
ロバストな線形分類モデルを準備する	model = sklearn.linear_model.HuberClassifier()
文字列の後ろから範囲を指定して部分文字列を探す	s.find(sub, start, end)
option: 大きい順にする	ascending = False
別の文字列に文字列中の部分文字列を全て置換する	s.replace(sub, newsub)
折れ線グラフをハニーデュー色として描画する	plt.plot(データ列x, データ列y, color='honeydew')
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
レモンシフォン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
ラベンダー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
option: ライトグレー色を使う	color = 'lightgray'
2つの文字列が同じ	s == s2
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
２つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
円グラフのパーセントを表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
プログラムのファイルの名前	sys.argv[0]
ブランチドアーモンド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
ふたつの集合が集合と互いに素か	aSet.isdisjoint(aSet2)
nがn2未満、またはn3以上か	n < n2 or n >= n3
折れ線グラフのクロスマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ゴーストホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
実数を十六進表記の文字列に変換する	x.hex()
option: ダークオレンジ色を使う	color = 'darkorange'
分数の分母	q.denominator
nをn2だけ小さくする	n -= n2
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
option: グラフの色をマルーンに設定する	color = 'maroon'
整数nの八進文字列を使う	oct(n)[2:]
option: 箱ひげ図を横方向にする	vert = False
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ライトシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
nとn2の排他的論理和	n ^ n2
赤いダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
数で実数を割る	x / y
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
棒グラフをバイオレット色を用いて描画する	plt.bar(データ列x, データ列y, color='violet')
option: ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
変数が0に近づくときの数式の極限値を計算する	sympy.limit(e, z, 0)
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
nがn2の倍数か調べる	n % n2 == 0
ダーク・スラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
散布図の印を青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
ヒストグラムの色をダークスラテグレーにセットする	plt.hist(データ列, color='darkslategray')
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
nとn2の論理積	n & n2
ターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
nが負の整数	n < 0
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
オプションで、標準出力に出力する	file = sys.stdout
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
オブジェクトはタプルクラスのインスタンスか調べる	isinstance(obj, tuple)
ブラック色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
タイムスタンプデータの時間を使う	aDatetime.time()
オブジェクトは整数クラスか調べる	isinstance(obj, int)
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
ゴールド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
データフレームの未入力値を中央値に増やす	df.fillna(df.median())
イテラブルを2回あわせたデカルト積	itertools.product(iterable, repeat=2)
x軸とy軸の比率を同じする	plt.axis('equals')
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
ヒストグラムをミディアムバイオレットレッド色を用いて描画する	plt.hist(データ列, color='mediumvioletred')
スクリプトファイルの絶対パスを見る	os.path.abspath(__file__)
散布図をペールグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegreen')
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
作画の背景色を暗くする	sns.set(style='darkgrid')
折れ線グラフの色をグレーにセットする	plt.plot(データ列x, データ列y, color='grey')
JSONフォーマットのバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
データフレームの正規分布に対する上下広がり	df.skew()
散布図をライトゴールドロディイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
グレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
オプションでファイルに出力する	file = sys.open(filename, 'w')
option: スカイブルーにフォントの色を設定する	color = 'skyblue'
黒い▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムを黄緑色で描画する	plt.hist(データ列, color='chartreuse')
'A'列でデータフレームをまとめたグループを見る	df.groupby('A')
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
リストの個数	len(aList)
データフレームのリストカラムの中央値を求める	df[aList].median()
部分文字列によって文字列を二分する	s.partition(sub)
カテゴリに並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
散布図の三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの列で文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
折れ線グラフをミッドナイトブルー色として描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームの相関行列を求める	df.corr()
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
現在のモジュール	sys.modules[__name__]
配列の合計値	np.sum(aArray)
三自然数の最大公約数	math.gcd(n, n2, n3)
ダークターコイズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
実数が正の数か調べる	x > 0
option: マーカーの大きさを変える	markersize = 2.0
データ列をカテゴリデータに変換する	ds.astype(object)
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
配列の列ごとの合計値	np.sum(aArray, axis=0)
option: ダークカーキに色を設定する	color = 'darkkhaki'
データフレームを'A'列によって並べ、更新する	df.sort_values(by='A', inplace=True)
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: どの行もカラムの名前に設定しない	header = None
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
option: グラフの線種を実線に設定する	linestyle = 'solid'
ヒストグラムをラベンダー色として描画する	plt.hist(データ列, color='lavender')
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
option: 色をパパイヤウィップに設定する	color = 'papayawhip'
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
リストの最初の文字列を探す	aList.index(element)
二つのリストの積集合を使う	list(set(aList) & set(aList2))
nを否定する	not n
option: EUCを使う	encoding = 'euc_jp'
散布図に黒い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
折れ線グラフの丸マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
タイムスタンプデータが土曜日	aDatetime.weekday() == 5
データフレームのリスト列を10の位で四捨五入する	df[aList].round(-1)
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
青い上三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
折れ線グラフにダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
option: パウダーブルー色を使う	color = 'powderblue'
散布図に赤い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームをJSONLファイルにタブ区切りとして保存する	df.to_csv(filename, sep='\t')
マッピングの全項目を空にする	aDict.clear()
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
縦棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
option: グラフの色を黄色に設定する	color = 'yellow'
両端キューの要素をインプレースに反転する	deq.reverse()
ファイルを絶対パスに変換する	os.path.abspath(filepath)
グラフの描画で明るく色を使う	sns.set(pallete='bright')
ファイルを文字列の示すエンコーディングで書き込み用に開く]	open(filepath, mode='w', encoding=s)
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
データ列が何時か見る	ds.dt.hour
option: 大文字・小文字を無視する	flag = re.IGNORECASE
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
データフレームのヒストグラムを横に並べて図示する	sns.displot(df, x='列名', col='カテゴリ名')
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
行列の行ごとの最大値	np.max(aArray, axis=1)
二つのオブジェクトが同一参照か調べる	obj is obj2
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
線グラフの色を濃いシアンに変更する	plt.plot(データ列x, データ列y, color='darkcyan')
グラフで使うフォントを日本語に設定する	sns.set(font='IPAexGothic')
二つの関係がスーパーセットもしくは等しい	aSet > aSet2
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
数値を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
プロットの色を全般的に明るくする	sns.set(pallete='bright')
n個の数値イテラブル	range(n)
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
文字列が全て数字か調べる	s.isdigit()
正規分布によるパーセント・ポイント関数を用いる	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ロバストな単回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
option: リネン色を使用する	color = 'linen'
文字列が全て大文字か	s.isupper()
シアンで文字列をプリントする	print(f'\033[36m{value}\033[0m')
表示可能な最大行数をnに指定する	pd.set_option('display.max_rows', n)
option: フォントの色をライトグレーに変更する	color = 'lightgrey'
ヒストグラムの色をロージーブラウンに指定する	plt.hist(データ列, color='rosybrown')
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
黒い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategray')
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
３つの文字列を順にプリントする	print(value, value2, value3)
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
リストの先頭のn要素を取り除く	aList[n:]
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
棒グラフを貝殻色として描画する	plt.bar(データ列x, データ列y, color='seashell')
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
ライム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
中央値でデータフレームの欠損値を補う	df.fillna(df.median())
データフレームの中で、列と列の重複を消す	df.drop_duplicates(subset=column)
ロージーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
原点から(実数,y)の距離	math.hypot(x, y)
データフレームの中にと文字列がいくつあるか数える	df.isin([value, value2]).sum()
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
nとn2のビット和を求める	n | n2
配列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
散布図を下三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='v')
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
option: 線の種類を点線にする	linestyle = 'dotted'
表データからランダムに取り出す	df.sample()
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
データフレームのリストカラムの上位25%	df[aList].quantile(0.25)
ファイルをクローズする	f.close()
'A'列によってデータフレームをまとめたグループ	df.groupby('A')
データ列の母標準偏差	ds.std(ddof=0)
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
黒い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームの中の欠損値をドロップする	df.dropna()
横棒グラフをタン色を使って描画する	plt.barh(データ列x, データ列y, color='tan')
option: 色をゴーストホワイトに変更する	color = 'ghostwhite'
ヒストグラムを描画して、半透明化にする	plt.hist(データ列x, alpha=0.5)
散布図に黒い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='k')
ダークグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkgray')
リストの末尾にリストを加える	aList.extend(aList2)
データフレームをに箱ひげ図を用いてプロットする	sns.boxplot(x='カテゴリ列', y='列', data=df)
クリムゾン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
データフレームの全カラムの相関をグラフ化する	sns.pairplot(df)
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
折れ線グラフの色をビスクにする	plt.plot(データ列x, データ列y, color='bisque')
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
空白で文字列を分割して文字列リストにする	s.split()
ふたつの集合の差集合	aSet.difference(aSet2)
option: パレットトルコイズにグラフの色を変更する	color = 'paleturquoise'
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
option: 欠損値は無視する	dropna = True
シーケンスを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
option: ネイビー色を使う	color = 'navy'
option: グラフの色をミディアムスレートブルーにセットする	color = 'mediumslateblue'
折れ線グラフの色をシャルトリューズにセットする	plt.plot(データ列x, データ列y, color='chartreuse')
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
ナバホホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
赤い菱形マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
数式を因数分解する	sympy.factor(e)
文字列の出力を改行なしに行う	print(value, end='')
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
n進文字列を整数に変換する	int(s, n)
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
option: グラフの色をダークグレーにする	color = 'darkgray'
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
組の合計値	sum(aTuple)
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
散布図のバツ印の色を指定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
シャルトリューズ色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
日付時刻データのタイムゾーン	aDatetime.timetz()
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgray')
データフレームのインデックスをリセットする	df.reset_index()
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
ファイルをバイナリ書き込み用にオープンして]、fとする	f = open(filepath, mode='wb')
ヒストグラムを実線として描画する	plt.hist(データ列, linestyle='solid')
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
日付データからn日分減らす	aDate - datetime.timedelta(days=n)
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
両端キューの中に要素が含まれてるか調べる	element in deq
文字列の示すエンコーディングでファイルをオープンする]	open(filepath, encoding=s)
浮動小数点数を切り下げる	math.floor(x)
をPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
正規分布にしたがってデータ列の値が発生する累積確率を算出する	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
縦棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
option: エクセルデータのシートの名前をnamesに設定する	sheet_name = names
日付時刻データをタプルにする	aDatetime.timetuple()
破壊的にデータフレームの列を削除する	df.drop(column, axis=1, inplace=True)
データフレームを列の値によってグループ化し要約統計量を算出する	df.groupby(column).describe()
散布図の印をクロス印にする	plt.scatter(データ列x, データ列y, marker='x')
データフレームを'A'列の値でグループ化する	df.groupby('A')
散布図をダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D')
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: データ型として三２ビット整数型を使う	dtype = np.int16
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
nとkのコンビネーション	math.comb(n, k)
配列の要素ごとの積	np.multiply(aArray, aArray2)
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
縦棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
要素が全て初期値の行列	np.full(要素数, 初期値, dtype=np.int)
項目名がマッピングに存在するか調べる	key in aDict
散布図を濃いシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
リストの要素を並べる	sorted(aList)
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
日付時刻データの曜日を使う	aDatetime.weekday()
縦棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
nの八進表現	oct(n)
線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
列によってデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
列をリストとして抽出する	df[column].values.tolist()
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
サドルブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
ヒストグラムの線種を点線に設定する	plt.hist(データ列, linestyle='dotted')
文字列が全て空白文字か調べる	s.isspace()
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
ミディアムパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
ヒストグラムの色を淡いピンク色に変更する	plt.hist(データ列, color='lightpink')
データフレームの列をカテゴリデータにする	df[col].astype(object)
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
タプルの要素をソートする	sorted(aTuple)
データ列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
option: ライトブルーを使う	color = 'lightblue'
最大長を指定して、両端キューを生成する	collections.deque(maxlen=n)
ユニークな値を要素とする行列	np.unique(aArray)
プロットにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
散布図の菱形マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームを列によってグループ化して、各グループごとの平均値を計算する	df.groupby(column).mean()
文字列が全て大文字か調べる	s.isupper()
数式を積分する	sympy.integrate(e)
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
現在が何時か知る	datetime.date.today().hour
列によってデータフレームをまとめたグループを使う	df.groupby(column)
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
八進数文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データ列の文字列長を列として使う	ds.str.len()
組の平均値	sum(aTuple)/len(aTuple)
全ての八進数字	string.octdigits
全要素を０で初期化した符号なし８ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.uint8)
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
イテラブルと配列をペアリングする	itertools.zip_longest(iterable, iterable2)
オブジェクトがタプルに含まれないか調べる	element not in aTuple
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
option: 色をブラウンに設定する	color = 'brown'
ミスティローズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
option: アリスブルー色を使う	color = 'aliceblue'
データ列の年	ds.dt.year
折れ線グラフの左三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
データフレームを列によってソートし、下位n件を取り出す	df.sort_values(columns).tail(n)
ゴーストホワイト色でヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
データフレームの列の中にいくつ欠損値があるか数える	df[col].isna().sum()
日付データが火曜日か調べる	aDate.weekday() == 1
黒い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフに黒い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
nがn2以下	n <= n2
リストを配列にする	np.array(aList)
データ列を平方根する	np.sqrt(データ列)
データ列の欠損値をxで埋める	ds.fillna(x)
option: グリーン色を使う	color = 'green'
リストとリストについて散布図を描画し、、右三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのリスト列の中の欠損値の合計をカウントする	df[aList].isna().sum()
オリベドラブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
散布図に赤い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
散布図を四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列を記号にして、変数にする	z = sympy.Symbol(s)
ライトスチールブルー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データ列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
option: グラフの種類を点線に設定する	linestyle = 'dotted'
縦棒グラフをピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='pink')
ヒストグラムを白色を使って描画する	plt.hist(データ列, color='white')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
実数以上の最小の整数を求める	math.ceil(x)
方程式として数式を解く	sympy.solve(e)
範囲を指定して乱数を発生させる	random.randint(最小値, 最大値)
nまでのスライス	slice(n)
日付データが月曜日か調べる	aDate.weekday() == 0
リストから双方向キューを作成する	collections.deque(iterable)
データフレームを行を用いて降順で並べ直す	df.sort_index(ascending=False)
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
今日の日付時刻を求める	datetime.datetime.now()
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
ヒストグラムの色をスラグレーにセットする	plt.hist(データ列, color='slategrey')
左三角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
コーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
ファイルパスをオープンして]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
predicateFuncが真となるイテラブルの要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
コマンドラインフラグの状態	sys.flags
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
クラス分類をSDGとしてする	model = sklearn.linear_model.SGDClassifier()
文字列を走査し、正規表現にマッチするか調べる	re.search(pattern, s)
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
データフレームの最後n行を抽出する	df.tail(n)
線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
色付きの実線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
アリスブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
リストを紫色にする	f'\033[35m{value}\033[0m'
option: カデットブルーにグラフの色を設定する	color = 'cadetblue'
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
x軸だけ目盛線	plt.grid(axis='x')
変数の出力を改行なしに行う	print(value, end='')
空のキュー	collections.deque()
y座標の目盛りを表示しない	plt.yticks([])
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
カウンタを多い方から列挙する	aCounter.most_common()
多次元データをt-SNEとして淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
配列から重複を除いた配列を作成する	np.unique(aArray)
数値の変数にnを代入する	e.subs(z, n)
折れ線グラフの三角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
青い一点鎖線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームの列の欠損値をモードで補う	df[col].fillna(df[col].mode().iloc[0])
横軸の目盛を非表示にする	plt.xticks([])
option: パールバイオレットレッドにグラフの色を設定する	color = 'palevioletred'
実数を実数で割った剰余	math.remainder(x, x2)
ピーチパフ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
パラメータについて数式を微分する	sympy.diff(e, z)
サンディーブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='sandybrown')
option: グラフの色をスラグレーに指定する	color = 'slategrey'
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データ列のユニークな要素数	ds.nunique()
オブジェクトは整数クラスのインスタンスか調べる	isinstance(obj, int)
データフレームの列のユニークな要素数を確認する	df[col].nunique()
データフレームの中の列を等しい量になるようにn個にビニングする	pd.qcut(df[col], n)
折れ線グラフに青いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
t-SNEとして多次元データを淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
実数を実数で割って、切り捨てる	x // y
ピアソン積率相関係数としてデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
ヒストグラムの色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
rgbに棒グラフの色を指定する	plt.bar(ラベル列, データ列, color=rgb)
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームの中のNaNの合計をカウントする	df.isna().sum()
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
データフレームを関数によってグループ化し基本統計量を計算する	df.groupby(関数).describe()
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
フクシア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
散布図の四角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ハイパボリック・サインの逆数	math.asinh(x)
半透明の実線としてイテラブルの変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
rgbのダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ファイルにxを文字列に変換して書き込む	f.write(str(x))
勾配ブースティングでクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
両端キューをポップする	deq.pop()
ダークサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='darksalmon')
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
昇順にリストの値をソートする	sorted(aList, reverse=True)
棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
散布図の下三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
辞書の浅いコピーを作る	aDict.copy()
データから名前付きタプルをインスタンス化する	C._make(パラメータ)
実数を二乗する	x ** 2
散布図のポイント印の太さを変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
コマンド引数を列挙する	sys.argv[1:]
線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
ゴールド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
既存の行列を元に全要素が0の行列	np.zeros_like(aArray)
文字列リストを連結する	''.join(aStringList)
文字列内にひとつでもASCII文字が含まれるか調べる	any(c.isascii() for c in s)
option: n番目の列をインデックスに設定する	index_col = n
n個に配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
サポートベクターマシンで回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
カラムの正規分布に対する上下広がりを求める	ds.skew()
ファイルをオープンする]	open(filepath)
行列と同じ大きさの空行列を作る	np.empty_like(aArray)
option: バッファを使わない	buffering = 0
リストの最初	aList[0]
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
データフレームの列の一覧	df.info()
折れ線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列x, データ列y, color='mediumorchid')
辞書にキーワード引数で追加する	aDict.update(**kwargs)
両端キューから最初の数値を取り出す	deq.remove(element)
option: マルーンにグラフの色を設定する	color = 'maroon'
連立方程式を解く	sympy.solve([e, e2])
ヒストグラムを描画して半透明ににする	plt.hist(データ列x, alpha=0.5)
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
データフレームの中に日付データが含まれるか調べる	df.isin([value])
データフレームが正規分布からどの程度尖っているか確認する	df.skew()
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
データフレームの先頭n行	df.head(n)
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgray')
ファイルからn番目のシートを読む	pd.read_excel(filename, sheet_name=n)
辞書のキーの一覧	aDict.keys()
データフレームの列がxでない行を消す	df[df[column] == x]
文字列の大きさ	len(s)
マッピングのキー一覧を得る	list(aDict)
option: グラフの色をコーラルに変更する	color = 'coral'
異なる列をキーとして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
option: グラフの色をゴールドにセットする	color = 'gold'
文字列が文字列リストに含まれる	s in aStringList
option: シーグリーンを使用する	color = 'seagreen'
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
ライトブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightblue')
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
ミディアムパープル色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
数式を展開する	sympy.expand(e)
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
文字列リストを一つの文字列にする	''.join(map(str, iterable))
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
環境がMacOSか調べる	sys.platform.startswith('darwin')
配列をn個にビン分割する	pd.cut(aArray, n)
ペルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
ラベンダー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
文字列はタプルの要素か調べる	element in aTuple
横棒グラフをリネン色を用いて描画する	plt.barh(データ列x, データ列y, color='linen')
オブジェクトはタプル	isinstance(obj, tuple)
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
option: ３二ビット整数型を使う	dtype = np.int16
option: コーンフラワーブルーを使用する	color = 'cornflowerblue'
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
option: インディゴ色を使う	color = 'indigo'
線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
カラムの値をまとめてValueMapで変更する	ds.replace(ValueMap)
ヒストグラムの線種を一点鎖線にセットする	plt.hist(データ列, linestyle='dashbot')
option: ライム色を用いる	color = 'lime'
n番目のカラムをインデックスにしてCSVファイルTSVファイルを読む	pd.read_csv(filename, index_col=n)
書き込みできるようにファイルをオープンする]	open(filepath, mode='w')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
データフレームからカテゴリデータの列名の一覧を見る	df.select_dtypes('object').columns
要素がタプルの値に含まれていない	element not in aDict.values()
散布図をパウダーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='powderblue')
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
option: ヘッダをnamesに設定する	header = names
折れ線グラフの大バツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
nがn2と等しいかどうか調べる	n == n2
option: 星マーカーを加える	marker = '*'
縦棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
データフレームのNaNをxに設定する	df.fillna(x)
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
縦棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ラベンダー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
散布図の大バツマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
縦棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
スタックの先頭から要素を取り除く	deq.popleft()
線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
散布図に星マーカーを使用する	plt.scatter(データ列x, データ列y, marker='*')
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
データフレームの中の列を分割数nで等量でビン分割する	pd.qcut(df[col], n)
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
全ての句読点文字	string.punctuation
リストと数列についての散布図に黒い菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの列の欠損値を平均値に設定する	df[col].fillna(df[col].mean())
セットが空か確認する	len(aSet) == 0
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
ラベンダーブラッシュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
散布図にダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
ファイルパスをオープンする]	open(filepath)
nが5の倍数か調べる	n % 5 == 0
ダークグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
リストの末尾から値を取り出す	aList.pop()
predicateFuncがtrueとなる列の要素	itertools.takewhile(predicateFunc, iterable)
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
タプルの項目名とその値を列挙する	aDict.items()
日付データは何月か知る	aDate.month
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
option: 色を紺に設定する	color = 'darkblue'
常用対数	math.log10(x)
データフレームのn行目を削除して、インプレイスする	df.drop(n, axis=0, inplace=True)
n個にリストを等量でビン分割する	pd.qcut(aList, n)
複数行対応として事前に正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
JSONファイルのファイル入力を辞書にする	json.load(fin)
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの中の列と列に重複があれば削除する	df.drop_duplicates(subset=[column, column2])
実数の平方根	math.sqrt(x)
2を底とする小数点数の対数	math.log2(x)
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
文字列中の部分文字列の出現	s.count(sub)
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
タプルをnからナンバリングする	enumerate(aTuple, start=n)
1からNまでの配列	np.arange(1, N+1)
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
折れ線グラフのクロスマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
正規表現をASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
最初のプログラムを書く	print('Hello World')
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
option: 符号なし８ビット整数型を使う	dtype = np.uint8
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
ビスク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
ブランチドアーモンド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: 色をフクシアに変更する	color = 'fuchsia'
ライトシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
ダークブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
乱数で要素を埋めた行列	np.random.random((行数, 列数))
両端キュー中の要素の数を数える	deq.count(element)
折れ線グラフをアクア色として描画する	plt.plot(データ列x, データ列y, color='aqua')
四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をパールバイオレットレッドにする	plt.plot(データ列x, データ列y, color='palevioletred')
リストをn個に等量でビン分割する	pd.qcut(aList, n)
ライトグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
リストをリバースする	reversed(aList)
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
散布図にポイントマーカーを加える	plt.scatter(データ列x, データ列y, marker='.')
半透明の一点鎖線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
オレンジレッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
棒グラフをライトゴールドロディイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
散布図のバツ印を黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
線グラフをダークゴールデンロッド色を使って描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
ファイルに文字列を書き込む	f.write(s)
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
データフレームを複数の列で昇順に並べる	df.sort_values(by=column, ascending=True)
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームを二つの列で並べる	df.sort_values(by=['A', 'B'])
イテラブルからカウンタを作る	collections.Counter(iterable)
破壊的に昇順にデータフレームを２つの列によってソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
クリムゾンにヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
ASCII限定としてパターンで文字列を分割する	re.split(pattern, s, flags=re.ASCI)
値は集合のメンバーに含まれないかどうか	element not in aSet
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
散布図をインディゴ色として描画する	plt.scatter(データ列x, データ列y, color='indigo')
配列とリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: グラフの色をネイビーに設定する	color = 'navy'
要素ひとつのタプルを作る	(element,)
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
ヒストグラムをダークシアン色を使って描画する	plt.hist(データ列, color='darkcyan')
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
Pandasでエポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
データフレームをグループ化し、各列に対し最小値を求める	df.groupby(column)[column2].min()
ロバスト分類モデルを準備する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームの列の分散	df[col].var()
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
ペルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
option: バリーウッド色を使う	color = 'burlywood'
日付データをn時間前にする	aDate - datetime.timedelta(hours=n)
タイムスタンプデータをISO8601形式の文字列に変換する	aDatetime.isoformat()
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
一点鎖線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
入力ストリームから1バイト読み込む	f.read(1)
option: 線の種類を破線にセットする	linestyle = 'dashed'
箱ひげ図を描画して平均値を加える	plt.boxplot(データ列, showmeans=True)
配列を平坦化する	aArray.flatten()
nかつn2	n and n2
データ列の値は欠損値か調べる	ds.isna()
代数計算を使う	import sympy
実数の正接の逆数	math.atan(x)
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
スタック中の要素のインデックス	deq.index(element)
横棒グラフを描く	plt.barh(ラベル列, データ列)
コーンフラワーブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームの列がどれだけ、分散しているか見る	df[col].var()
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ヒストグラムの色をインディアンレッドにセットする	plt.hist(データ列, color='indianred')
グラフの縦横を指定する	plt.figure(figsize=(横幅, 高さ))
行列の列ごとの分散	np.var(aArray, axis=0)
ヒストグラムをコーンズシルク色を用いて描画する	plt.hist(データ列, color='cornsilk')
option: ロイヤルブルー色を使う	color = 'royalblue'
配列のイミュータブルな集合	frozenset(iterable)
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
実数のk進対数を求める	math.log(x, k)
実行結果を水色にする	f'\033[36m{value}\033[0m'
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
黒い星印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
日付時刻データをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
ヒストグラムの色をミディアムブルーに指定する	plt.hist(データ列, color='mediumblue')
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
リストの末尾のn要素を取り除く	aList[:-n]
データ列の曜日数	ds.dt.dayofweek
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
列の中にある文字列と日付データの合計を数える	ds.isin([value, value2]).sum()
日付データをタプルに変換する	aDate.timetuple()
赤いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
複数行対応としてあらかじめ正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
散布図をダークグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
option: 配列のデータ型を指定する	dtype = np.int
データフレームのカテゴリデータをワンホット・ベクトルに変換する	pd.get_dummies(df)
ユニークな値を要素とする配列を見る	np.unique(aArray)
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
横棒グラフをライトイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightyellow')
既にロードされたモジュールを列挙する	sys.modules
本日をタプルに変換する	datetime.datetime.today().timetuple()
四分位数ごとにデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
データフレームを列によってグループ化して、それぞれのグループ毎の最大値を求める	df.groupby(column).max()
nがn2よりも大きい	n > n2
option: 茶色色を使う	color = 'brown'
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
スチールブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
ダークレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
option: グラフの色をフクシアに設定する	color = 'fuchsia'
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
スカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
縦棒プロットを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
データ列の折れ線グラフを大バツ印として描画する	plt.plot(データ列x, データ列y, marker='X')
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
空の階層化マップを作成する	collections.ChainMap()
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
文字列リストを結合してひとつの文字列にする	''.join(aStringList)
縦棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
連続したベクトルの自動作成する	np.arange(開始値, 終了値, 等差)
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
ミスティローズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
部分文字列が文字列の開始位置以降に含まれないか調べる	s.find(sub, start) == -1
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
黒い▲マーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
横棒グラフをスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='steelblue')
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
シエナ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
データフレームのカラムが何日か調べる	df[col].dt.day
バイナリ書き込みできるようにファイルをオープンする]	open(filepath, mode='wb')
ベージュ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
Pandasで日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
日付時刻データの秒数	aDatetime.second
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの列の一意な要素	df[col].unique()
データをL2ノルムを用いて正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
データフレームの列の名前を列挙する	df.columns
option: 文字列の示すエンコーディングを用いる	encoding = s
option: ロージーブラウン色を使う	color = 'rosybrown'
文字列の中の大文字・小文字を無視してパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
リストとリストの散布図を描画して、文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
option: スラグレー色を使う	color = 'slategrey'
最大最小で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
グラフの描画を綺麗にする	import seaborn as sns
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
option: レモンシフォンにグラフの色を設定する	color = 'lemonchiffon'
option: ヘッダを自動的な連番に変更する	header = None
青紫色として散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
ブルーバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
nからn2を引いてnにする	n -= n2
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
配列をn個に等間隔で分割する	pd.cut(aArray, n)
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
組の要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
プラットホームの名前	sys.platform
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
ヒートマップとしてデータフレームのリスト列の相関行列を描画する	sns.heatmap(df[aList].corr())
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームのリストカラムの母標準偏差を求める	df[aList].std(ddof=0)
マップのキーを列挙する	aDict.keys()
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
折れ線グラフをサーモン色として描画する	plt.plot(データ列x, データ列y, color='salmon')
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
縦棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
文字列を走査しパターンに複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
散布図の左三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='turquoise')
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
部分集合か調べる	aSet.issubset(aSet2)
棒グラフの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
データ列の折れ線グラフを下三角印として描画する	plt.plot(データ列x, データ列y, marker='v')
データ列を２つ並べて箱髭図にする	plt.boxplot([データ列, データ列])
nをn2分の一にする	n /= n2
option: ダークカーキを用いる	color = 'darkkhaki'
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
カラムを100の位で丸めて、整数型にする	ds.round(-2).astype(int)
データフレームの列の名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
オリベドラブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
リストの平均値を求める	sum(aList)/len(aList)
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
ダークオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ヒストグラムをスカイブルー色を用いて描画する	plt.hist(データ列, color='skyblue')
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
入力から２つの整数を読む	A, B = map(int, input().split())
二つのデータフレームを異なるカラムをキーにして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
option: フォントの色をシーグリーンに設定する	color = 'seagreen'
散布図の印を黒色にする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
xの小数点以下'1'桁までを表示する	print(':.1f'.format(x))
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
UTF8を用いてファイルを追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
改行付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
データフレームのリストカラムの歪度	df[aList].kurt()
year年month月day日のタイムスタンプ	datetime.datetime(year=year, month=month, day=day)
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
黒い右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
mathモジュールをインポートする	import math
プロットの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
回帰木の重要度をグラフ化する	plt.barh(X.columns, model.feature_importances_)
option: マーカーを▲に指定する	marker = '^'
option: ライトグリーンを使う	color = 'lightgreen'
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
ナバホホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
要素が集合のメンバーかどうか	element in aSet
異なる列をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
ピンクにヒストグラムの色を変更する	plt.hist(データ列, color='pink')
数列と配列について散布図を描画して文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
第二引数で指定されたファイルの名前	sys.argv[1]
リストの各値を関数に適用した結果でソートする	sorted(aList, key=func)
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
多次元データを主成分分析を用いて淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
整数を整数に変換する	int(x)
タプル内の要素が全て真か調べる	all(aTuple)
折れ線グラフを黄緑色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
L1ノルムとしてデータを正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
勾配ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
折れ線グラフに左三角印を加える	plt.plot(データ列x, データ列y, marker='<')
option: 色をパレットトルコイズに変更する	color = 'paleturquoise'
クリムゾン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームのリストカラムの分散	df[aList].var()
現在実行中の例外を情報	sys.exc_info()
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
積み上げ横棒グラフを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
データフレームのカラムの値を正規表現patternで置換する	df[col].replace(pattern, repl, regex=True)
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
縦棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
ファイル名がCSVファイル	filename.endswith('.csv')
整数を小数点以下で丸める	round(x, n)
日付データが火曜日	aDate.weekday() == 1
実部と虚部から複素数	complex(x, y)
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
option: フォントの色をサンディーブラウンにする	color = 'sandybrown'
縦棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightgreen')
符号なしで整数nをバイナリにする	n.to_bytes(length=bytesize, byteorder='big')
グリッドの線スタイルを一点鎖線に変更する	plt.grid(linestyle='dashbot')
rgbの三角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
線グラフをミディアムアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
文字列が漢字かテストする	('\u4E00' <= ch <= '\u9FD0')
タイムスタンプデータは日付時刻データより前かどうか調べる	aDatetime < aDatetime2
option: バイナリ書き込みモードに変更する	mode = 'wb'
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
option: 四角印を使う	marker = 's'
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
散布図に赤い三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='r')
要素一つのりスト	[element]
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
xを浮動小数点数に変換する	float(x)
回帰分析をヒストグラムと勾配ブースティングを用いて行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
散布図の四角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
文字列がリストに含まれるか調べる	element in aList
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
option: シャルトリューズ色を使用する	color = 'chartreuse'
折れ線グラフの色をドジャーブルーに指定する	plt.plot(データ列x, データ列y, color='dodgerblue')
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
部分文字列か	sub in s
シスル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
ファイルを書き込み用に開き]、fとする	f = open(filepath, mode='w')
option: マーカーを下三角に変更する	marker = 'v'
データフレームから重複を消す	df.drop_duplicates()
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
リネン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
eの実数乗	math.exp(x)
文字列が文字列より辞書順で前	s < s2
ミディアムオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
文字列をセパレータで分割し、、文字列リストに変換する	s.split(sep)
option: ミッドナイトブルーにグラフの色を設定する	color = 'midnightblue'
文字列を左寄せにする	s.ljust(文字列幅)
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
折れ線グラフに星印を使う	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
文字列を改行で分割し文字列リストにする	s.splitlines()
両端キューのn番目	deq[n]
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
散布図に丸印を用いる	plt.scatter(データ列x, データ列y, marker='o')
option: グラフの色をサーモンに設定する	color = 'salmon'
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
線グラフをダークオリーブグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
英字を全部求める	string.ascii_letters
散布図にポイント印を使う	plt.scatter(データ列x, データ列y, marker='.')
ヒストグラムをレモンシフォン色を用いて描画する	plt.hist(データ列, color='lemonchiffon')
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
option: ミディアムスプリンググリーン色を用いる	color = 'mediumspringgreen'
カラムの中に日付データと文字列が存在するか確認する	ds.isin([value, value2])
円グラフを真円にする	plt.axis('equals')
データフレームのカラムを千の位で丸める	df[col].round(-3)
辞書を階層化する	collections.ChainMap(aDict)
フローラルホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
行列の列ごとの最小値	np.min(aArray, axis=0)
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
option: マーカーの色をダークブルーにする	markerfacecolor = 'darkblue'
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
データフレームのリストカラムのNaNを平均で埋める	df[aList].fillna(df[aList].mean())
文字列がタプルに含まれるか調べる	element in aTuple
実数が負	x < 0
rgbの大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
新しいサポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームのpercentパーセンタイル	df.quantile(percent/100)
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
カラムをリストにする	df[column].values.tolist()
文字列がn回繰り返す列	itertools.repeat(element, n)
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
データ列のpercentパーセンタイルを計算する	ds.quantile(percent/100)
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
ライトグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
パレットトルコイズ色でヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
データフレームの列の中に日付データと文字列がいくつ含まれるか数える	df[col].isin([value, value2]).sum()
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
クラス分類の予測精度をヒートマップとして確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
option: サドルブラウンにフォントの色を設定する	color = 'saddlebrown'
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
余弦	math.cos(x)
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
タン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ナバホホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='navajowhite')
文字列を最後の部分文字列で二つに分ける	s.rpartition(sub)
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
データ列の中にいくつ文字列が存在するかカウントする	ds.isin([value]).sum()
表データのカラム一覧を見る	df.info()
n2がn以上、かつn3以下かどうか	n <= n2 and n2 <= n3
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列x, データ列y, marker='D')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
珊瑚色のヒストグラムを描画する	plt.hist(データ列, color='coral')
リストを横棒グラフにする	plt.barh(ラベル列, データ列)
黒いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
リストのn番目以降の部分を取り出す	aList[n:]
一点鎖線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
イテラブルからサンプリングする	random.sample(iterable)
ミスティローズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
ユニコードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
分子n、分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
リストと配列についての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
行列の列ごとの標準偏差	np.std(aArray, axis=0)
両端キューの末尾から要素を取り除く	deq.pop()
折れ線グラフの色を青に指定する	plt.plot(データ列x, データ列y, color='blue')
折れ線グラフを青い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
実数が無限大かどうか調べる	math.isinf(x)
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
データフレームの上n行を見る	df.head(n)
実数の二進対数	math.log2(x)
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
タプルの先頭を除く	aTuple[1:]
option: フォントの色を淡いピンク色に指定する	color = 'lightpink'
option: エンコーディングを文字コードtextに変更する	encoding = text
文字列の開始位置からと終了位置の範囲に部分文字列があるかどうか	s.find(sub, start, end) != -1
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
ビスクにヒストグラムの色を指定する	plt.hist(データ列, color='bisque')
option: エンコーディングをEUCに変更する	encoding = 'euc_jp'
エクセルファイルファイルから複数のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
３変数の最小値	min(x, y, z)
縦棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
散布図の左三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームを各列と列の組み合わせ毎に集約し、、個数を求める	df.groupby([column, column2], as_index=False).count()
ライトスカイブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
平均値でデータフレームの欠損値を埋める	df.fillna(df.mean())
本日が何日か知る	datetime.datetime.today().day
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
3整数の最大公約数	math.gcd(n, n2, n3)
オブジェクトの属性を値に設定する	setattr(obj, プロパティ名, 値)
ファイルのファイル名	os.path.basename(filepath)
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
option: 箱ひげ図に平均を追記する	showmeans = False
散布図のマーカーを青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
プログラムの実行を強制的に終了する	sys.exit()
stringをインポートする	import string
タプルをソートしてJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
データフレームとしてタブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
浮動小数点数を十の位で丸める	round(x, -1)
縦棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
文字列の右端から余分な空白を取り除く	s.rstrip()
データフレームから破壊的に重複した行をドロップする	df.drop_duplicates(inplace=True)
データフレームから数値データの列のみ取り出す	df.select_dtypes('number')
破壊的に複数の列で降順にデータフレームをソートする	df.sort_values(by=column, ascending=False, inplace=True)
改行なしに二つの文字列を表示する	print(value, value2, end='')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
黒い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
タブ区切りでJSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
変数がマイナス無限大に近づくときの数値の極限値を算出する	sympy.limit(e, z, -oo)
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
データフレームの中にある文字列との合計を求める	df.isin([value, value2]).sum()
ヒストグラムの線のスタイルを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
バギングでクラス分類をする	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ライトゴールドロディイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
数式の因数分解を行う	sympy.factor(e)
オブジェクトの種類を調べる	type(obj)
折れ線グラフの星マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
文字列の開始位置以降が部分文字列で始まる	s.startswith(sub, start)
線グラフの色をシエナにセットする	plt.plot(データ列x, データ列y, color='sienna')
折れ線グラフに▼マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
珊瑚色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
リストの先頭を使う	aList[0]
データフレームから指定した４列のみ抽出する	df[[column, column2, column3, column4]]
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
グラフを見やすくする	import seaborn as sns
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
青色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
モデルの残差を算出する	目的変数 - model.predict(説明変数)
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
散布図に青い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
option: ベージュにフォントの色を指定する	color = 'beige'
行列の行列式	np.linalg.det(aArray)
折れ線グラフをラベンダーブラッシュ色として描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
分類モデルの正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
シルバー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
非数字が文字列中に含まれる	any(not c.isdigit() for c in s)
実数が負の数か調べる	x < 0
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
2つの整数のGCD	math.gcd(n, n2)
折れ線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
一点鎖線でヒストグラムをプロットする	plt.hist(データ列, linestyle='dashbot')
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームを列によってグループ化し、、グループごとの標準偏差を求める	df.groupby(column).std()
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
SJISで書き込み用にファイルを開く]	open(filepath, mode='w', encoding='shift_jis')
1からNまでの行列	np.arange(1, N+1)
日付を使用する	import datetime
フクシア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
データ列をビン数nで分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームの中の列を分割数nでビン分割する	pd.cut(df[col], n)
空の双方向キューを作成する	collections.deque()
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
ヒストグラムの色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
折れ線グラフの色をスチールブルーに変更する	plt.plot(データ列x, データ列y, color='steelblue')
データ列の離れ具合を描画する	sns.residplot(x=データ列, y=データ列)
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
カテゴリ別で色分けして、データフレームをに箱ひげ図で見る	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
横棒グラフの色を黄緑にする	plt.barh(データ列x, データ列y, color='chartreuse')
文字列リストを連結し、ひとつの文字列にする	''.join(map(str, iterable))
データ列を十の位で丸める	ds.round(-1)
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
データ列の中に存在すると文字列の数を求める	ds.isin([value, value2]).sum()
パパイヤウィップ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
２つの変数を順にプリントする	print(value, value2)
ファイルからエクセルファイルを読む	pd.read_excel(filename)
標準入力から1行分読み込む	sys.stdin.readline()
option: マーカーを星に変更する	marker = '*'
縦棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
重複する行のみを抽出する	df[df.duplicated(keep=False)]
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
ベクトルのユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
文字列の両端から部分文字列を取り除く	s.strip(sub)
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
回帰分析をブースティングを用いて行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
データフレームを表示するとき列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
横棒グラフをペールグリーン色として描画する	plt.barh(データ列x, データ列y, color='palegreen')
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
オブジェクトがプロパティを持つか	hasattr(obj, プロパティ名)
ふたつの集合が集合と交わりを持たないかどうかテストする	aSet.isdisjoint(aSet2)
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
option: 青緑にグラフの色を設定する	color = 'teal'
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
表データを使用する	import pandas as pd
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
n2がn以上、かつn3以下か	n <= n2 and n2 <= n3
配列とリストについての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
グリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
タプルのキーの値	aDict[key]
グラフのデザインをデフォルトでいい感じに指定する	sns.set()
濃いシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
nの十六進文字列	hex(n)[2:]
線グラフをスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='springgreen')
実数を実数から引く	x - y
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
ヒストグラムをミディアムブルー色として描画する	plt.hist(データ列, color='mediumblue')
option: UTF8を使用する	encoding = 'utf-8'
実線にヒストグラムを設定する	plt.hist(データ列, linestyle='solid')
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
赤い実線として線を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
標準出力を得る	sys.stdout
折れ線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームのカラムの値がNaNかどうか調べる	df[col].isna()
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
option: 真紅色を使う	color = 'crimson'
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
散布図をパパイヤウィップ色を用いて描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
散布図をスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='springgreen')
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
折れ線グラフをコーンフラワーブルー色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
データフレームからカテゴリデータの列名の一覧	df.select_dtypes('object').columns
データフレームのリスト列の値をValueMapで一度に置換する	df[aList].replace(ValueMap)
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
双方向キューの大きさを求める	len(deq)
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
折れ線グラフのダイアモンドマーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
バイナリ用にファイルをオープンして]fとする	f = open(filepath, mode='rb')
データフレームのカウントプロットをプロットする	sns.countplot(x='列名', data=df)
データフレームのリストカラムの値がNaNか	df[aList].isna()
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
回帰分析をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
option: バイナリモードに設定する	mode = 'rb'
組の最初の文字列を探す	aTuple.index(element)
表データに重複があるか見る	df.duplicated()
二つの文字列は同じかどうか調べる	s == s2
文字列中の部分文字列をカウントする	s.count(sub)
黒い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
散布図の印をクロスにする	plt.scatter(データ列x, データ列y, marker='x')
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
折れ線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
option: フォントの色をイエローグリーンに設定する	color = 'yellowgreen'
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図をスラグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slategrey')
option: グラフの種類を実線に変更する	linestyle = 'solid'
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
option: コーラル色を使う	color = 'coral'
リストの中の最大値	max(aList)
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
リストを組に変換する	tuple(aList)
データ列のユニークな値	ds.unique()
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
アヤメのデータセットをデータフレームとしてロードする	sns.load_dataset('iris')
文字列の両端から空白を取り除く	s.strip()
データ列の推移を半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
nからいつまでもカウントアップする	itertools.count(start=n)
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
コマンドの第一引数を調べる	sys.argv[1]
棒グラフをディープスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
ライトイエロー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
行列の次元数	aArray.ndim
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
部分文字列が文字列の開始位置より後に存在するか調べる	s.find(sub, start) != -1
データフレームの指定された列名一覧の列を抽出する	df[columns]
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
option: ライトサーモンにグラフの色を指定する	color = 'lightsalmon'
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
プロットの描画で明るく色を使う	sns.set(pallete='bright')
パレットトルコイズにヒストグラムの色を設定する	plt.hist(データ列, color='paleturquoise')
データフレームの列の空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
カウンタの項目をリストとして得る	aCounter.keys()
折れ線グラフをミッドナイトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='midnightblue')
option: 黄色を使う	color = 'yellow'
ベクトルのスカラー倍を求める	aArray * n
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
縦棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データフレームを散布図でグラフ化して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
値が集合に含まれないかどうか	element not in aSet
nからn2までのひとつ飛ばしの整数リスト	list(range(n, n2+1, 2))
散布図のダイアモンドマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームのカラムの未入力値を後の行の値に減らす	df[col].fillna(method='bfill')
データ列の曜日数を使う	ds.dt.dayofweek
折れ線グラフの▲マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
リストの変遷を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
二進文字列をbytesizeバイトのバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
データフレームの欠損値をxに設定する	df.fillna(x)
データフレームをグループ化し、それぞれの列に対し分散を算出する	df.groupby(column)[column2].var()
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
データフレームの列の欠損値を前の行の値に変更する	df[col].fillna(method='ffill')
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
色付きの実線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: シアンを使う	color = 'cyan'
フクシア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームから指定された3つの列を取り出す	df[[column, column2, column3]]
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
JSONLファイルにデータフレームをSJISで書き込む	df.to_csv(filename, encoding='shift_jis')
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
データフレームの列がxより多くx2より小さいデータを取り出す	df[(x < df[column]) & (df[column] < x2)]
option: スプリンググリーン色を用いる	color = 'springgreen'
標準入力から1文字読む	sys.stdin.read(1)
線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
シーグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
テンプレートをマッピングで文字列整形する	formatText.format_map(aDict)
rgbの丸マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
散布図をダークゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
辞書の値として要素が含まれているか判定する	element in aDict.values()
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
ヒストグラムの色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
option: クリムゾン色を使う	color = 'crimson'
正則化付き線形モデルを作る	model = sklearn.linear_model.ElasticNet()
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
ヒストグラムを横に並べてプロットする	plt.hist([データ列, データ列], color=['b', 'r'])
何か試しに動かしてみる	print('Hello World')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t')
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
黒い左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
青いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
現在の時間を見る	datetime.date.today().hour
option: ライトグレー色を使用する	color = 'lightgray'
折れ線グラフを点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
stringモジュールをインポートする	import string
実数とyの斜辺を求める	math.hypot(x, y)
変数をマゼンタで表示できる文字列にする	f'\033[35m{value}\033[0m'
黄色色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
パールゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
プロットをスライド用に設定する	sns.set(context='talk')
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
ビン数nを用いて等量で列をビン分割する	pd.qcut(ds, n)
商と余りを同時に計算する	divmod(x, y)
ヒストグラムをオレンジレッド色を用いて描画する	plt.hist(データ列, color='orangered')
行列の行列積を求める	np.matmul(aArray, aArray2)
option: オリーブ色を使う	color = 'olive'
新しい文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
オブジェクトはリストクラスかどうか調べる	isinstance(obj, list)
変数をスワップする	x, y = y, x
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
リストを四分位数ごとにビニングする	pd.qcut(aList, 4)
黄色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフをミディアムオーキッド色を使って描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
ミディアムバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
昨日の日付を見る	datetime.date.today() - datetime.timedelta(days=1)
インデックスを付けずにJSONLファイルにデータフレームを保存する	df.to_csv(filename, index=None)
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
赤いダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームを丸める	df.round()
ミディアムバイオレットレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
option: 行列のデータ型を指定する	dtype = np.int8
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
ヒストグラムの描いて正規化する	plt.hist(データ列, density=True)
日付時刻データのタイムゾーンを使う	aDatetime.timetz()
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
目盛り線	plt.grid(alpha=0.5)
空のロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
option: グラフの色をミディアムバイオレットレッドに指定する	color = 'mediumvioletred'
データ列の日にちを使う	ds.dt.day
散布図の大バツ印を赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
ヒストグラムをドジャーブルー色として描画する	plt.hist(データ列, color='dodgerblue')
集合からエラーなく要素を取り除く	aSet.discard(element)
option: グラフの色をライムに変更する	color = 'lime'
空のロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
散布図の▲印を青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフを紺色を用いて描画する	plt.plot(データ列x, データ列y, color='darkblue')
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
タブ	'\t'
再帰エラーを防ぐ	sys.setrecursionlimit(1000000)
実数の余弦	math.cos(x)
データフレームを1000の位で四捨五入する	df.round(-3)
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
連立方程式の解を求める	sympy.solve([e, e2])
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
ヒストグラムをタン色を用いて描画する	plt.hist(データ列, color='tan')
度数分布図の描画して、正規化する	plt.hist(データ列, density=True)
折れ線グラフの色をシアンに指定する	plt.plot(データ列x, データ列y, color='cyan')
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
入力から二つの浮動小数数を読む	A, B = map(float, input().split())
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
xでデータフレームのカラムのNaNを埋める	df[col].fillna(x)
赤い丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
半透明の破線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データ列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
各列毎にデータフレームをグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
ヒストグラムの色をタンに変更する	plt.hist(データ列, color='tan')
横棒プロットの色をrgbに指定する	plt.barh(ラベル列, データ列, color=rgb)
文字列の示すエンコーディングで書き込み用にファイルパスをオープンする]	open(filepath, mode='w', encoding=s)
右にn個分双方向キューの値をローテンションする	deq.rotate(n)
タプルのn番目の	aTuple[n]
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
リストとリストについての散布図にポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.')
データフレームをTSV形式でJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
タイムスタンプデータが土曜日かどうか調べる	aDatetime.weekday() == 5
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
グリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='green')
タイムスタンプデータが木曜日か調べる	aDatetime.weekday() == 3
リストの推移を色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
x座標を対数に変更する	plt.xscale('log')
折れ線グラフに下三角印を使う	plt.plot(データ列x, データ列y, marker='v')
両端キューのn番目に要素を挿入する	deq.insert(n, element)
データフレームのリスト列のNaNを平均値で補う	df[aList].fillna(df[aList].mean())
nマイナスn2	n - n2
データフレームの欠損値を平均に増やす	df.fillna(df.mean())
行列の列ごとの合計値を求める	np.sum(aArray, axis=0)
フォレストグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
リストの長さを知る	len(aList)
データフレームを表示するとき、折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
辞書からキーの値	aDict.get(key)
ブースティングを使ってクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
option: ターコイズ色を使用する	color = 'turquoise'
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
赤いポイントマーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
データフレームの中に日付データと文字列が含まれるかどうか調べる	df.isin([value, value2])
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
option: オレンジに色を設定する	color = 'orange'
白色で値をプリントする	print(f'\033[37m{value}\033[0m')
散布図のバツ印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
ディレクトリ	os.getcwd()
色付きの一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームから重複する行をドロップして、インプレイスする	df.drop_duplicates(inplace=True)
日付時刻データの日付を使う	aDatetime.date()
カラムの欠損値を最頻値に変更する	ds.fillna(ds.mode().iloc[0])
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
Pandasで、エポック秒の文字列からタイムスタンプに変換する	pd.to_datetime(s, unit='s', utc=True)
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
ポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.')
小文字を大文字に変換する	s.upper()
データフレームを関数の値によってグループ化する	df.groupby(関数)
辞書の値の一覧	aDict.values()
データフレームを各列毎にグループ化し、列の標準偏差を計算する	df.groupby(column)[column2].std()
データ列の時	ds.dt.hour
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
本日が日曜日か	datetime.datetime.today().weekday() == 6
折れ線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
リストのn番目からn2番目までの部分	aList[n:n2]
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
option: オレンジレッドを用いる	color = 'orangered'
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
option: 暗い赤色を用いる	color = 'darkred'
タブを見る	'\t'
バギングを用いて回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
ヒストグラムを破線に設定する	plt.hist(データ列, linestyle='dashed')
バイナリ書き込み用にファイルパスをオープンする]	open(filepath, mode='wb')
数を万の位で丸める	round(x, -4)
ファイルをデータフレームとして読み込む	pd.read_excel(filename)
辞書のキーとその値をペアとして取り出す	aDict.items()
列の値でデータフレームを欠損値を含めて分類する	df.groupby(column, dropna=False)
配列の分散	np.var(aArray)
文字列は片仮名か	('ァ' <= ch <= 'ン')
文字列にリストを変換して、部分文字列によってつなげる	sub.join(map(str, iterable))
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
両端キュー	collections.deque()
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
データフレームの第一四分位数	df.quantile(0.25)
ヒストグラムの色をドジャーブルーに指定する	plt.hist(データ列, color='dodgerblue')
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
文字列の左側からタブを取り除く	s.lstrip('\t')
日付時刻データが何月か知る	aDatetime.month
ヒストグラムを描画する	plt.hist(データ列)
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
実数の複素数を求める	complex(x)
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
エクセルデータファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
ユニコードに対応する文字を使う	chr(unicode)
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
リストと数列についての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
option: フォントの色をミディアムオーキッドにする	color = 'mediumorchid'
折れ線グラフの色をライムに指定する	plt.plot(データ列x, データ列y, color='lime')
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
option: 紺碧色を使う	color = 'azure'
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
横棒グラフをダークオリーブグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
整数nを十六進文字列にする	hex(n)[2:]
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
辞書のエントリ数	len(aDict)
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
破線に折れ線グラフのスタイルを設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームのカラムの標本標準偏差	df[col].std()
折れ線グラフを色付きの点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
option: レベッカパープルにグラフの色を設定する	color = 'rebeccapurple'
変数について数式のインテグラルを求める	sympy.integrate(e, z)
多次元データをt-SNEでパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
ユーザから入力される	input()
散布図の丸印を青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
文字列内に大文字が含まれる	any(c.isupper() for c in s)
平均線付きボックスチャートを描画する	plt.boxplot(データ列, meanline=True)
nがn2よりも大きいか	n > n2
散布図をrgbの△マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
一点鎖線にヒストグラムの線の種類を指定する	plt.hist(データ列, linestyle='dashbot')
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
option: コロンをセパレータで使う	sep = ':'
sepを区切りとして文字列リストを連結する	sep.join(aStringList)
option: 星マーカーを使用する	marker = '*'
データフレームの中のカラムを中央値でビン分割する	pd.qcut(df[col], 2)
データラベルの位置を(x,y)に設定する	plt.legend(loc=(x, y))
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
実数を切り下げて整数に変換する	math.floor(x)
ロイヤルブルーにヒストグラムの色を変更する	plt.hist(データ列, color='royalblue')
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
文字列が全てアスキー文字か調べる	s.isascii()
ターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
黒い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
グラフにグリッド線を入れる	plt.grid(True)
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
option: 線の種類を実線に設定する	linestyle = 'solid'
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
日付時刻データの日	aDatetime.day
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
データフレームを'A'列をキーにして並べる	df.sort_values(by='A')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
三つのデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
ファイルからエクセルデータを読む	pd.read_excel(filename)
コレクションを使う	import collections
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
リストを境界値としてデータフレームの中の列をビン分割する	pd.cut(df[col], aList)
ディープスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
データフレームの列を最初のカテゴリーを除いてダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームのカラムをワンホット・ベクトルに変換する	pd.get_dummies(df[column])
散布図をサドルブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
数のn乗	x ** n
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
文字列がリストに含まれないか調べる	element not in aList
タプルのキーを列挙する	list(aDict)
option: マゼンタにグラフの色を設定する	color = 'magenta'
リストの個数だけ繰り返す	range(len(aList))
縦棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
全ての印字可能な文字	string.printable
option: フォントの色を暗い赤に指定する	color = 'darkred'
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの各グループ毎の個数	df.groupby(column).count()
折れ線グラフのアルファを設定する	plt.plot(データ列x, データ列y, alpha=0.5)
パラメータについて数値の微分を行う	sympy.diff(e, z)
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
リストの中の最小値	min(aList)
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
option: 行を連番にセットする	index_col = None
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
配列の列ごとの平均値	np.mean(aArray, axis=0)
タイムスタンプデータが土曜日か調べる	aDatetime.weekday() == 5
横棒プロットを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
辞書のコピー	dict(aDict)
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
option: スカイブルー色を使う	color = 'skyblue'
データフレームのリストカラムの値をValueMapで置き換える	df[aList].replace(ValueMap)
option: オレンジを使用する	color = 'orange'
データフレームのリストカラムを四捨五入して、整数型にする	df[aList].round().astype(int)
カラムの欠損値を最大値に設定する	ds.fillna(ds.max())
散布図の右三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
集合をリストに変換する	list(aSet)
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
データフレームが正規分布からどの程度、歪んでいるか調べる	df.kurt()
散布図のバツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームを'A'列の値によってグループ化し要約統計量を求める	df.groupby('A').describe()
文字列中のひらがなをカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
日付データが日付データより後ろかどうか	aDate > aDate2
リストの要素を逆順にする	aList[::-1]
改行なしに2つの文字列をプリントする	print(value, value2, end='')
option: フォントの色をスチールブルーに設定する	color = 'steelblue'
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの列の文字列長を列として使う	df[col].str.len()
縦棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
タプルのn番目以降の部分を抽出する	aTuple[n:]
横棒グラフを茶色色を用いて描画する	plt.barh(データ列x, データ列y, color='brown')
配列と数列について散布図をプロットしてマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
外れ値に強い線形回帰モデルを新規作成する	model = sklearn.linear_model.HuberRegressor()
ゴーストホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
リストを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
カウンタを高頻度な方から列挙する	aCounter.most_common()
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムの色をバリーウッドに指定する	plt.hist(データ列, color='burlywood')
再帰の上限を上げる	sys.setrecursionlimit(1000000)
ファイルパスの区切り記号	os.sep
データ列の偏りを対数する	np.log(データ列)
カウンタから列をカウントして引く	aCounter.subtract(iterable)
自然対数	math.log(x)
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
乱数の行列	np.random.random((行数, 列数))
折れ線プロットのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
日付時刻データが日付時刻データより前	aDatetime < aDatetime2
ライトグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
列でデータフレームを集計し、平均値を求める	df.groupby(column).mean()
スレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
nプラスn2	n + n2
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
二つのオブジェクトは同一か調べる	obj is obj2
ファイルパスの拡張子	os.path.splitext(filepath)[1].lstrip('.')
２つのデータフレームを異なる列をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
整数nがリストのどれかか調べる	n in aList
数式の平方根を求める	sympy.sqrt(e)
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
リストの値のみ表示する	print(*aList)
ミスティローズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
データフレームを関数の値で集約する	df.groupby(関数)
ダークターコイズ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
列と列の重複を消す	df.drop_duplicates(subset=column)
データフレームのヒストグラムを横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名')
グリッド線	plt.grid(linewidth=3.0)
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
文字列リストを結合してひとつの文字列にする	''.join(map(str, iterable))
散布図をホットピンク色を使って描画する	plt.scatter(データ列x, データ列y, color='hotpink')
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
有理数を使う	import fractions
折れ線グラフをオレンジ色として描画する	plt.plot(データ列x, データ列y, color='orange')
シーケンスから配列を作成する	np.array(iterable)
オブジェクトは辞書クラスのインスタンスかどうか調べる	isinstance(obj, dict)
散布図のマーカーを菱形にする	plt.scatter(データ列x, データ列y, marker='D')
option: マーカーを右三角に変更する	marker = '>'
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
整数nがタプルのどれかか	n in aTuple
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
ヒストグラムをダークサーモン色を使って描画する	plt.hist(データ列, color='darksalmon')
option: ゲインズボロにグラフの色を設定する	color = 'gainsboro'
nの無限のリスト	itertools.repeat(n)
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: 読み込みモードを使う	mode = 'r'
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
ダークゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
データフレームのカラムを1000の位で丸める	df[col].round(-3)
リストにリストを追加して拡張する	aList.extend(aList2)
option: グラフの色をパパイヤウィップにセットする	color = 'papayawhip'
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
整数個のものからk個取り出したときの並べ方	math.perm(n, k)
リストとイテラブルについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
折れ線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='grey')
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
スチールブルーにヒストグラムの色を指定する	plt.hist(データ列, color='steelblue')
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
横棒グラフをライトゴールドロディイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
散布図をダークシアグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
データフレームの文字列を欠損値にする	df.replace(s, np.nan)
三つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: グラフの色をライトブルーに設定する	color = 'lightblue'
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
行列のデータ型	aArray.dtype()
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
リストのn番目の要素を消す	del aList[n]
最大長nの両端キューを新規生成する	collections.deque(maxlen=n)
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
JSONファイルの入力を辞書に変換する	json.load(fin)
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
データフレームの各グループごとの合計	df.groupby(column).sum()
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
option: ３２ビット整数型を使用する	dtype = np.int16
散布図の印を四角にする	plt.scatter(データ列x, データ列y, marker='s')
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
フローラルホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: 白色を用いる	color = 'white'
option: ダークスラテグレー色を使う	color = 'darkslategray'
散布図の丸マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
グラフに鉛直方向の実線をつける	plt.axvline(x=0, linestyle='solid')
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
データフレームのn行目を抽出する	df.loc[n]
２つのカウンタの共通する要素	aCounter & aCounter2
行列の標準偏差を求める	np.std(aArray)
データフレームの各次元の大きさを見る	df.shape
データフレームの重複する行を数える	df.duplicated().sum()
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
option: サーモン色を使う	color = 'salmon'
二つの集合の和集合	aSet.union(aSet2)
縦棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームをに箱ひげ図でグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
コマンドの第二引数を知る	sys.argv[1]
イテラブルのセットを使う	set(iterable)
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
多次元データをt-SNEを用いて濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
ヒストグラムをアンティークホワイト色として描画する	plt.hist(データ列, color='antiquewhite')
タイムスタンプデータにn分を加える	aDatetime + datetime.timedelta(minutes=n)
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
データフレームの列が正規表現文字列にマッチしないデータを抽出する	df[not df[column].str.match(s)]
option: ダークサーモン色を使う	color = 'darksalmon'
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
データフレームを表示するとき、列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
FIXME	np.linalg.eig(aArray)
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
ファイルをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
縦棒グラフをペルー色として描画する	plt.bar(データ列x, データ列y, color='peru')
線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightgreen')
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
散布図の大バツ印の色を指定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
option: 左三角マーカーを用いる	marker = '<'
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
グラフの使途をポスターに設定する	sns.set(context='poster')
縦棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
データフレームの中央値を求める	df.median()
データ列の中にある文字列と文字列の合計を求める	ds.isin([value, value2]).sum()
実数を切り下げて整数にする	math.floor(x)
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
パパイヤウィップ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
ユニークな値を要素とする行列を使う	np.unique(aArray)
文字列を全て大文字にする	s.upper()
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
TSVからCSVをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
最大長を指定して、両端キュー	collections.deque(maxlen=n)
列'A'と列'B'をキーとして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
option: アクアマリンを使う	color = 'aquamarine'
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
option: 三角マーカーを使う	marker = '^'
option: アイボリーを使用する	color = 'ivory'
横軸の最大・最小値を変更する	plt.xlim(最小値, 最大値)
ライトコーラル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
データフレームの中の列をn個にビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの列の値がNaNか判定する	df[col].isna()
空行を表示する	print()
ビスク色でヒストグラムを描画する	plt.hist(データ列, color='bisque')
クラス分類をランダムフォレストで行う	model = sklearn.ensemble.RandomForestClassifier()
データフレームのカラムのタイムゾーンを文字列に指定する	df[col].tz_convert(s)
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
集合をタプルに変換する	tuple(aSet)
option: 青色を使用する	color = 'blue'
マップのキーとそのエントリをペアとして取り出す	aDict.items()
星印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
カラムの中に存在する文字列の数をカウントする	ds.isin([value]).sum()
文字列を右寄せする	s.rjust(文字列幅)
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
nがn2よりも大きいかどうか調べる	n > n2
横棒グラフをアイボリー色を用いて描画する	plt.barh(データ列x, データ列y, color='ivory')
データ列の中に文字列とがいくつあるか数える	ds.isin([value, value2]).sum()
散布図をゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
グラフのx軸とy軸の比率を同じする	plt.axis('equals')
ライトイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
配列をリストを境界値としてビニングする	pd.cut(aArray, aList)
リストとイテラブルについての散布図にrgbのダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
L2ノルムで正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
青い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームのカラムの月	df[col].dt.month
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
数字を全部見る	string.digits
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
option: 改行コードを動作環境依存に設定する	newline = None
データフレームの中のカラムをビン分割する	pd.cut(df[col], aList)
rgbの▲マーカーを数列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを二つの列で降順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
ファイルからを読み込む	pd.read_excel(filename)
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
データ列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
ヒストグラムをラベンダーブラッシュ色を使って描画する	plt.hist(データ列, color='lavenderblush')
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
配列を縦棒グラフにする	plt.bar(ラベル列, データ列)
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
リストの末尾からn番目以前の部分を抽出する	aList[:-n]
ダークレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
イテラブルと配列の散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
文字列内に小文字が含まれるかどうか確認する	any(c.islower() for c in s)
黒い菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: 先頭の行をヘッダに設定する	header = 0
縦棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
データ列の中に文字列があるか調べる	ds.isin([value])
option: オリーブを使う	color = 'olive'
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: やわらかい青にグラフの色を設定する	color = 'cornflowerblue'
option: フォントの色をオリベドラブに指定する	color = 'olivedrab'
２つのデータフレームを異なる列をキーとして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
変数をシアンで表示する	print(f'\033[36m{value}\033[0m')
散布図をバツマーカーとして描く	plt.plot(データ列x, データ列y, marker='x')
縦棒グラフをパールゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
データ列のユニークな要素	ds.unique()
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
整数nがリストのいづれかか調べる	n in aList
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
青色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
1行から二つの自然数値を読む	A, B = map(int, input().split())
クリムゾン色でヒストグラムを描画する	plt.hist(データ列, color='crimson')
カテゴリ別でグループ化してにバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームの列名を指定した列名一覧に置き換える	df.columns = columns
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
マッピングを階層化する	collections.ChainMap(aDict)
エンコーディング	sys.getdefaultencoding()
実数のタンジェントを求める	math.tan(x)
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
ヒストグラムをミディアムターコイズ色を用いて描画する	plt.hist(データ列, color='mediumturquoise')
既存の配列を元にして全要素が1の配列	np.ones_like(aArray)
列をキーにして2つのデータフレームを外部ジョインする	pd.merge(df, df2, on=column, how='outer')
スタックの先頭	deq[0]
データフレームのカラムを十の位で丸める	df[col].round(-1)
列を配列に変換する	np.array(iterable)
散布図の下三角印を青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームの列で文字列が含まれないデータを選択する	df[not df[column].str.contains(s)]
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
ホワイトスモーク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
nが一桁の数か調べる	0 <= n <= 9
パープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
度数分布図の上限下限を設定する	plt.hist(データ列, range=(start, end))
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
リストの先頭のn要素を捨てる	aList[n:]
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
真部分集合か調べる	aSet < aSet2
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
ヒストグラムの区間を設定する	plt.hist(データ列, range=(start, end))
option: 半透明にする	alpha = 0.5
文字列をエンコーディングを用いてバイト列に変換する	s.encode(encoding=encoding)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
rgbの四角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
ケンドールの相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
ライトゴールドロディイエロー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
文字列の先頭でパターンにASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
散布図にrgbの四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ミッドナイトブルー色でヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
ベストな位置に凡例を表示する	plt.legend(loc='best')
option: 配列のデータ型を指定する	dtype = bool
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
散布図に青いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ヒストグラムをカーキ色を使って描画する	plt.hist(データ列, color='khaki')
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
ファイルの拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
option: グラフの色をビスクに設定する	color = 'bisque'
xの小数点以下'2'桁までを出力する	print(':.2f'.format(x))
黒いポイントマーカーをデータ列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
日付時刻データが日付時刻データよりあとか調べる	aDatetime > aDatetime2
リストとリストについて散布図を描き、、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
データフレームの中にいくつ文字列があるかカウントする	df.isin([value]).sum()
データフレームを表示するときn列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
1からnまでの整数列を作る	list(range(1, n+1))
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
タイムスタンプデータを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
両端キューをイテラブルから生成する	collections.deque(iterable)
ヒストグラムの色をスプリンググリーンに変更する	plt.hist(データ列, color='springgreen')
データフレームのカラムの欠損値を前の行の値で埋める	df[col].fillna(method='ffill')
JSON形式の文字列を読み込む	json.loads(jsonString)
数式の簡略化を行う	sympy.sympify(e)
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
ヒストグラムの色を青に指定する	plt.hist(データ列, color='blue')
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='turquoise')
aListn番目から要素をポップする	aList.pop(n)
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
option: カーキにグラフの色を設定する	color = 'khaki'
新しい文字列で文字列を置き換える	s.replace(sub, newsub)
線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
データフレームを10の位で四捨五入して整数型にする	df.round(-1).astype(int)
year年month月day日hour時minute分を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
ヘッダを付けずにデータフレームをJSONLファイルに書き込む	df.to_csv(filename, header=None)
カウンタの項目をひとつ増やす	aCounter[element] += 1
データ列の正規分布を判定する	scipy.stats.shapiro(データ列)
リストとリストについて散布図を描画して、バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データ列とリストについて散布図をプロットして、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
日付データが日曜日か調べる	aDate.weekday() == 6
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
データフレームの列を100の位で四捨五入して、整数型にする	df[col].round(-2).astype(int)
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
分類結果の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
option: グラフの色を青緑に指定する	color = 'teal'
各列毎にデータフレームをグループ化して、列の個数を求める	df.groupby(column)[column2].count()
option: フォントの色をバリーウッドに指定する	color = 'burlywood'
日付データの日数を求める	aDate.day
スタックをポップする	deq.pop()
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
散布図の印を下三角にする	plt.scatter(データ列x, データ列y, marker='v')
偽陽性を避けたい指標を用いる	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図をrgbの丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
データ列の中にいくつ欠損値が存在するか数える	ds.isna().sum()
横棒グラフの色をバイオレットにする	plt.barh(データ列x, データ列y, color='violet')
データフレームの欠損値がある行を削除する	df.dropna()
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
イテラブルの出現頻度を描画する	plt.hist(データ列)
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
バイアスなしの重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
option: 淡いピンク色色を用いる	color = 'lightpink'
整数nを16進表現に変換する	hex(n)
データフレームを列によって並べて、下の方n件を取り出す	df.sort_values(columns).tail(n)
折れ線グラフをブルーバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='blueviolet')
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
タプルの平均値	sum(aTuple)/len(aTuple)
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
カウンタを高頻出方から列挙する	aCounter.most_common()
折れ線グラフに黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
マッピングをJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
ミディアムシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
青い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
２つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
折れ線グラフを暗い赤色を用いて描画する	plt.plot(データ列x, データ列y, color='darkred')
コロンによって文字列を区切り、、列挙する	s.split(':')
データフレームのカラムが正規分布からどの程度尖っているか見る	df[col].skew()
補足をグラフ中の(x,y)の場所に表示する	plt.legend(loc=(x, y))
データフレームのカラムが何時か見る	df[col].dt.hour
リストを逆順にする	reversed(aList)
データフレームは正規分布からどの程度、尖っているか確認する	df.skew()
数列と配列についての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
２変数の最大値を算出する	max(x, y)
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
UTF8で既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
データフレームとデータフレームの列を合体させる	pd.concat([df, ds], axis=1)
データフレームのリスト列のモードを算出する	df[aList].mode()
８ビット整数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int8)
集合から要素を全て取り除く	aSet.clear()
option: 最初の行をヘッダに設定する	header = 0
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
複数の列の値によってデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby(columns)]
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
単位行列	np.eye(行数, 列数)
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
文字列の先頭	s[0]
データ列の文字列を欠損値にする	ds.replace(s, np.nan)
ドジャーブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
データフレームのリストカラムの中にいくつNaNがあるか数える	df[aList].isna().sum()
データフレームの欠損値を50パーセンタイルで埋める	df.fillna(df.median())
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列x, データ列y, color='darksalmon')
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
表データを用いる	import pandas as pd
文字列を黒色で表示できる文字列にする	f'\033[30m{value}\033[0m'
プロットのx座標を対数目盛に変更する	plt.xscale('log')
option: ダークスラテグレーにフォントの色を設定する	color = 'darkslategray'
ロイヤルブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='royalblue')
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
データフレームのリスト列の相関行列	df[aList].corr()
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
option: ミッドナイトブルーにグラフの色をセットする	color = 'midnightblue'
線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
縦棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
横棒グラフをライトイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightyellow')
文字列をエラーを無視してバイト列に変換する	s.encode(errors='ignore')
散布図の丸マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
ファイルから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
ヒストグラムの色をダークオーキッドにする	plt.hist(データ列, color='darkorchid')
Pandasで、データ列をタイムスタンプにする	pd.to_datetime(ds)
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
データフレームのカラムの欠損値をメディアンに設定する	df[col].fillna(df[col].median())
データフレームのリストカラムを千の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
標準エラーを使う	sys.stderr
リストとリストについての散布図にrgbの下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
画像ファイルとしてグラフを保存する	plt.savefig('foo.png')
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
option: ダークスラテグレーにグラフの色を変更する	color = 'darkslategray'
カラムの未入力値を最大値で埋める	ds.fillna(ds.max())
データフレームの列の値がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
年月日と時間からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
日付データをn分前にする	aDate - datetime.timedelta(minutes=n)
貝殻にヒストグラムの色をする	plt.hist(データ列, color='seashell')
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
文字列の左側から空白を消す	s.lstrip(' ')
option: ハニーデューを用いる	color = 'honeydew'
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
option: ベージュにグラフの色を変更する	color = 'beige'
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
データ列を二つ並べて箱髭図にする	plt.boxplot([データ列, データ列])
実数のn乗して実数による余り	pow(x, n, y)
ふたつの集合が互いに素か	aSet.isdisjoint(aSet2)
散布図を青緑色を用いて描画する	plt.scatter(データ列x, データ列y, color='turquoise')
配列を元に全要素が1の行列	np.ones_like(aArray)
ピアソンの相関係数を算出する	scipy.stats.pearsonr(データ列, データ列2)
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
縦棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
貝殻にヒストグラムの色を変更する	plt.hist(データ列, color='seashell')
縦棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
10を底とする実数の対数	math.log10(x)
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
数列の推移を半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
青い線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
データフレームのNaNを直後の値で補う	df.fillna(method='bfill')
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
データフレームのリスト列のヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
データフレームのカラムのどの値が頻出か見る	df[col].mode()
値が集合に含まれない	element not in aSet
option: 読み込む行番号をnamesで指定する	usecols = names
option: ダークグリーン色を用いる	color = 'darkgreen'
折れ線グラフの丸マーカーを青色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
棒グラフをシルバー色として描画する	plt.bar(データ列x, データ列y, color='silver')
option: グラフの色をダークグレーに変更する	color = 'darkgray'
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
文字列が全て小文字か調べる	s.islower()
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
行列のユニークな要素	np.unique(aArray)
部分文字列を文字列の最後から見つける	s.rfind(sub)
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
ダークオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
カラムの中にがあるか調べる	ds.isin([value])
option: 配列のデータ型を指定する	dtype = np.int32
nが3で割り切れるかどうか調べる	n % 3 == 0
データフレームのヒストグラムを縦横に並べて描画する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
nにn2を加算する	n + n2
符号なし８ビット整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
標準入力を得る	sys.stdin
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
複数の数列を箱ひげ図にする	plt.boxplot([データ列, データ列])
ヒストグラムをパールバイオレットレッド色として描画する	plt.hist(データ列, color='palevioletred')
組を引数として展開してプリントする	print(*aTuple)
ホットピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
データフレームの列の欠損値を直前の値に設定する	df[col].fillna(method='ffill')
線グラフをハニーデュー色として描画する	plt.plot(データ列x, データ列y, color='honeydew')
データ列の偏りを平方根変換する	np.sqrt(データ列)
データフレームの二つのカラムを並べて箱髭図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
二つの集合の積集合を計算する	aSet.intersection(aSet2)
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
文字列の末尾	s[-1]
ミディアムスプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
書式をマッピングで文字列整形する	formatText.format_map(aDict)
リストとリストの散布図に黒い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
カラムを100の位で丸める	ds.round(-2)
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
option: ディープスカイブルーを使う	color = 'deepskyblue'
option: 区切りを文字列にする	sep = s
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
データフレームのカラムの中に文字列と文字列が含まれるか判定する	df[col].isin([value, value2])
深紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
箱ひげ図でデータフレームの二つのカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
集合にイテラブルを追加更新する	aSet.update(iterable)
データフレームのカラムの第二四分位数	df[col].median()
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
リストをシアンでプリントする	print(f'\033[36m{value}\033[0m')
マップをコピーする	aDict.copy()
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図に赤い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
折れ線グラフのバツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
オブジェクトはバイト列クラスかどうか	isinstance(obj, bytes)
列をキーにして2つのデータフレームを結合する	pd.merge(df, df2, on=column)
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
option: バイナリ用に設定する	mode = 'rb'
option: グラフの色をパールバイオレットレッドにセットする	color = 'palevioletred'
データフレームの列の文字列が文字列が含まれない行を取り出す	df[not df[column].str.contains(s)]
タイムスタンプデータにn日分、加える	aDatetime + datetime.timedelta(days=n)
nが無限に続く数列を求める	itertools.repeat(n)
option: ローングリーン色を使う	color = 'lawngreen'
データフレームの欠損値を平均で補う	df.fillna(df.mean())
2数の最小の値を算出する	min(x, y)
データフレームの指定された列名一覧の列を取り出す	df[columns]
縦棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgray')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
キーがタプルに存在しないとき、要素を追加する	aDict.setdefault(key, element)
イテラブルとリストについて散布図を描画し、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
option: 三二ビット整数型を使う	dtype = np.int16
行列の値を求める	aArray[行番号, 列番号]
formatパターンの文字列を日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
option: エンコーディングをUTF8に変更する	encoding = 'utf-8'
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
ペルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
option: ミディアムスプリンググリーンにグラフの色を設定する	color = 'mediumspringgreen'
ゲインズボロにヒストグラムの色を設定する	plt.hist(データ列, color='gainsboro')
散布図に青い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
リストを等量でn個にビン分割する	pd.qcut(aList, n)
option: グラフの色を青緑に設定する	color = 'turquoise'
散布図をオレンジレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orangered')
データフレームのリストカラムの中にある日付データとの合計を数える	df[aList].isin([value, value2]).sum()
文字列の末尾から部分文字列を探す	s.rfind(sub)
option: ゲインズボロを使う	color = 'gainsboro'
キューの末尾から要素を取り除く	deq.pop()
棒グラフをモカシン色を用いて描画する	plt.bar(データ列x, データ列y, color='moccasin')
データ列のNaNを最小値に設定する	ds.fillna(ds.min())
データフレームの全カラムの散らばりを可視化する	sns.pairplot(df)
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
オプションで、標準エラーに出力する	file = sys.stderr
破線に折れ線グラフの線の種類を変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームを各列毎にグループ化し、、列の個数を求める	df.groupby(column)[column2].count()
疑似乱数を正規分布で生成する	random.normalvariate(mu=0.5, sigma=0.2)
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
リストとリストの散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフに大バツ印を使う	plt.plot(データ列x, データ列y, marker='X')
option: グラフの色をコーンズシルクに変更する	color = 'cornsilk'
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
デフォルトでプロットをイイ感じに設定する	sns.set()
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
二つのデータフレームを縦方向に合体させる	pd.concat([df, df2])
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
折れ線グラフを描画して、色をカラーコードを用いて変更する	plt.plot(データ列x, データ列y, color='#800080')
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
リストを等量でn個に分割する	pd.qcut(aList, n)
データフレームを関数によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
nをn2で割る	n / n2
黒い左三角マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
小数点数がNaNか調べる	math.isnan(x)
線グラフの色をプラムに変更する	plt.plot(データ列x, データ列y, color='plum')
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
２変数の最大の値を求める	max(x, y)
ブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
データフレームをにバイオリン図で描く	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
デックをデキューする	deq.popleft()
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
八進数字を全部見る	string.octdigits
グリッド線を黄色くする	plt.grid(color='y')
文字列が漢字か確認する	('\u4E00' <= ch <= '\u9FD0')
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
セパレータによって文字列を分割して、列挙する	s.split(sep)
データフレームのカラムが何日か見る	df[col].dt.day
シルバー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
カラムの値をValueMapで一度に置き換える	ds.replace(ValueMap)
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
ヒストグラムをナバホホワイト色を用いて描画する	plt.hist(データ列, color='navajowhite')
日付データにn分を加算する	aDate + datetime.timedelta(minutes=n)
リストを2回あわせたデカルト積を得る	itertools.product(iterable, repeat=2)
データフレームの列を十の位で丸める	df[col].round(-1)
データフレームの列を消す	df.drop(column, axis=1)
ヒストグラムを濃いシアン色を使って描画する	plt.hist(データ列, color='darkcyan')
プロットを使用する準備をする	import matplotlib.pyplot as plt
イテラブルとデータ列についての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
option: グラフの色をアンティークホワイトにする	color = 'antiquewhite'
数式を数値計算する	float(e)
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
折れ線グラフの上三角印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの各次元の大きさを確認する	df.shape
オブジェクトは整数か	isinstance(obj, int)
日付データの月数を見る	aDate.month
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
配列とリストの散布図を描いて、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
FIXME:カテゴリーデータを出現頻度順に並べ直す	df['A'].value_counts().sort_index().index
option: 追加モードに指定する	mode = 'a'
十六進数字を全部使う	string.hexdigits
option: グラフを点線にする	linestyle = 'dotted'
保存するCSVファイルの小数点以下の桁数を変更する	df.to_csv(filename, float_format='%.3f')
option: フォントの色をライムグリーンに設定する	color = 'limegreen'
ゼロ埋めした行列	np.zeros(行数, 列数)
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
色付きの実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
横棒グラフをアクア色として描画する	plt.barh(データ列x, データ列y, color='aqua')
ダークオーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
文字列を二つに分ける	s.partition(sep)
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
パールバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='palevioletred')
データフレームを二つの列によってソートし、更新する	df.sort_values(by=['A', 'B'], inplace=True)
リストとリストについての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの平均を計算する	df.mean()
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
標準入力から1行読み取る	input()
プラム色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
文字列全体が正規表現にASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
配列の最大値を使う	np.max(aArray)
空文字	''
ファイルパスがあるか調べる	os.path.exists(filepath)
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
タプルをn回、連結する	aTuple * n
ヒストグラムをカデットブルー色として描画する	plt.hist(データ列, color='cadetblue')
1行だけカラムをデータフレームから除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
option: フォントの色をディープスカイブルーに設定する	color = 'deepskyblue'
青い点線を用いて配列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
option: ダークオーキッド色を用いる	color = 'darkorchid'
折れ線グラフをビスク色を用いて描画する	plt.plot(データ列x, データ列y, color='bisque')
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
折れ線グラフのバツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
空白文字を全部見る	string.whitespace
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
option: グラフの色を黄色にセットする	color = 'yellow'
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
データフレームのポイントプロットをプロットする	sns.pairplot(hue='カテゴリ列', data=df)
データフレームを列でグループ化し、列の要約統計量を求める	df.groupby(column).describe()[column2]
データ列のユニークな値の個数	ds.nunique()
棒グラフをダークスラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategray')
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
データフレームから列を一つ選択する	df[[column]]
３変数の一番小さい値	min(x, y, z)
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
変数を黄色でプリントする	print(f'\033[33m{value}\033[0m')
ブルーバイオレット色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
イエローグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
文字列の両端から空白を消す	s.strip()
縦棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
現在の時間数	datetime.date.today().hour
文字列の中の複数行対応としてパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
データフレームで、列と列の重複を見る	df.duplicated(subset=[column, column2])
オリーブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
option: グラフの色をライトグレーに設定する	color = 'lightgray'
nがn2で割り切れるか確認する	n % n2 == 0
option: ダークグリーン色を使う	color = 'darkgreen'
データフレームがどの程度、分散しているか調べる	df.var()
グラフの色を全般的に濃くする	sns.set(pallete='deep')
散布図のポイントマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
リネンにヒストグラムの色を設定する	plt.hist(データ列, color='linen')
日付データを文字列としてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
データフレームを列の値によって集約して、各グループごとの合計を求める	df.groupby(column).sum()
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
赤い三角マーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームから最初の列を除く	df[df.columns[1:]]
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
標準出力のバッファを強制表示する	sys.stdout.flush()
本日の曜日を求める	datetime.datetime.today().weekday()
ヒストグラムの色をダークブルーに指定する	plt.hist(データ列, color='darkblue')
オブジェクトが論理値か調べる	isinstance(obj, bool)
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
option: ダークシアグリーン色を使う	color = 'darkseagreen'
プラム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
乱数シードをnで初期化する	random.seed(n)
双方向キューに要素をエンキューする	deq.appendleft(element)
イテラブルをカウンタに変換する	collections.Counter(iterable)
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
データ列をビン数nでビン分割する	pd.cut(ds, n)
インデックスによって降順でデータフレームをソートする	df.sort_index(ascending=False)
option: ゴーストホワイトにグラフの色を設定する	color = 'ghostwhite'
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
タプル中の要素が少なくともひとつ真か調べる	any(aTuple)
データフレームのリスト列の相関行列を計算する	df[aList].corr()
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
ヒストグラムの色をペルーに指定する	plt.hist(データ列, color='peru')
イテラブルのイミュータブルな集合	frozenset(iterable)
文字列にイテラブルを変換して、'改行で連結する	'\n'.join(map(str, iterable))
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
数列と配列についての散布図に赤いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
mathモジュールを使う	import math
カウンタからゼロカウントを削除する	+aCounter
線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
スクリプトファイルの絶対パス	os.path.abspath(__file__)
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
文字列を走査し、パターンにASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
スタックの末尾から要素を取り除く	deq.pop()
折れ線グラフの丸印の大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
列を2回あわせた直積	itertools.product(iterable, repeat=2)
黒いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
option: フォントの色をマルーンに設定する	color = 'maroon'
文字列が正規表現にマッチさせる	re.match(pattern, s)
文字列が全て英数字か	s.isalnum()
折れ線グラフのダイアモンド印を青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
文字列は全て印字できるか調べる	s.isprintable()
リストを黄色化する	f'\033[33m{value}\033[0m'
ヒストグラムを真紅色で描画する	plt.hist(データ列, color='crimson')
線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
浮動小数点数を実数で除する	x / y
データフレームの中で列とカラムの重複をドロップする	df.drop_duplicates(subset=[column, column2])
新しいロッソ回帰モデルを作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
バツマーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
データフレームの列をダミー変数にする	pd.get_dummies(df[column])
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
小数点数の仮数	math.frexp(x)[0]
折れ線グラフの色をグリーンに指定する	plt.plot(データ列x, データ列y, color='green')
カラムの第三四分位数	ds.quantile(0.75)
文字列をセパレータで区切る	s.split(sub)
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
ライトグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
データフレームのカラムの文字列長を列として見る	df[col].str.len()
棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
ヒストグラムの色をライトスレイグレーにする	plt.hist(データ列, color='lightslategrey')
ファイルをバイナリモードでオープンして]fとする	f = open(filepath, mode='rb')
Pandasでデータ列を日付データに変換する	pd.to_datetime(ds)
スラッシュで区切って二つの値をプリントする	print(value, value2, sep='/')
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
日付時刻データが水曜日かどうか確認する	aDatetime.weekday() == 2
データフレームの指定された二つの列を抽出する	df[[column, column2]]
棒グラフをインディアンレッド色として描画する	plt.bar(データ列x, データ列y, color='indianred')
データ列をインポートする	import pandas as pd
数列とデータ列についてリストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ヒストグラムの色をダークゴールデンロッドに変更する	plt.hist(データ列, color='darkgoldenrod')
カテゴリで色分けして、データフレームの全カラムの散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
無限大	math.inf
option: ラベンダー色を使う	color = 'lavender'
SDGで回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
辞書に要素をキーとして加える	aDict[key] = element
星印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
データフレームの平均と信頼区間をプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
値が集合の要素に含まれる	element in aSet
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
n行をランダムにデータフレームから重複を認めてサンプリングする	df.sample(n, replace=True)
列名リストによって破壊的にデータフレームを昇順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
折れ線グラフの色をシスルに指定する	plt.plot(データ列x, データ列y, color='thistle')
乱数の配列を作る	np.random.random(N)
文字列は全て十進数字か調べる	s.isdecimal()
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
リストとリストについての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
リストの平均	sum(aList)/len(aList)
データフレームの要約統計量	df.describe()
最大値・最小値で乱数を発生させる	random.randint(最小値, 最大値)
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
ヒストグラムを三つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
option: ８ビット整数型を使う	dtype = np.int8
グリーンイエローにヒストグラムの色を設定する	plt.hist(データ列, color='greenyellow')
整数に変換する	int(x)
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
option: インディゴを使用する	color = 'indigo'
両端キューの最大長	deq.maxlen
データフレームのカラムの中に含まれる日付データと日付データの合計を数える	df[col].isin([value, value2]).sum()
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
option: ピンク色を使う	color = 'pink'
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
option: パールバイオレットレッドにフォントの色を指定する	color = 'palevioletred'
散布図を赤い下三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
2つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
option: ダイアモンドマーカーを描画する	marker = 'D'
データフレームのリスト列は正規分布からどの程度尖っているか調べる	df[aList].skew()
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
追加モードとしてファイルを開いて]fとする	f = open(filepath, mode='a')
文字列の左側から部分文字列を消す	s.lstrip(sub)
データフレームを二つの列を用いてソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
折れ線グラフのダイアモンドマーカーの太さを変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
濃いシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
リストの末尾を取り除く	aList[:-1]
ダークカーキ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
リストの文字列が最初に見つかる場所を探す	aList.index(element)
柱状図を描画し、合計を1にする	plt.hist(データ列, density=True)
グラフで用いるy座標にラベルを付ける	plt.ylabel('y軸ラベル')
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
nが一桁の数か調べる	-9 <= n <= 9
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームのカラムの中にいくつ文字列があるか求める	df[col].isin([value]).sum()
データフレームの指定された列を配列として抽出する	df[column].values
データフレームのリストカラムの分散を求める	df[aList].var()
集合に要素を追加する	aSet.add(element)
データフレームの列を削除する	df.drop(column, axis=1)
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
スピアマン相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
日付データが日付データより遅いか	aDate > aDate2
option: スノーを使用する	color = 'snow'
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
option: ライトスチールブルーを用いる	color = 'lightsteelblue'
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
データフレームの中のカラムを等間隔でn個にビン分割する	pd.cut(df[col], n)
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
文字列を記号に変換する	sympy.Symbol(s)
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
グラフからグリッド線を消す	plt.grid(False)
データフレームのリストカラムの中に日付データが存在するかどうか調べる	df[aList].isin([value])
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
オブジェクトはバイト列型か	isinstance(obj, bytes)
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
ミディアムターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='mediumturquoise')
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
イテラブルから1個ランダムに選ぶ	random.choice(iterable)
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
ダークグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
ランダムフォレストで回帰分析をする	model = sklearn.ensemble.RandomForestRegressor()
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
文字列中にひとつでも非空白が含まれる	any(not c.isspace() for c in s)
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
日付時刻データをn時間前にする	aDatetime - datetime.timedelta(hours=n)
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
組の要素を昇順に並べ直す	sorted(aTuple, reverse=False)
ダークシアグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
グラフを色差別なくする	sns.set(pallete='colorblind')
マッピングに項目名が存在しないとき、要素を追加する	aDict.setdefault(key, element)
option: ライトゴールドロディイエローに色を設定する	color = 'lightgoldenrodyellow'
ミディアムパープル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
空白を使う	' '
データフレームのカラムの中に存在する文字列の合計を数える	df[col].isin([value]).sum()
浮動小数点数のn乗して整数による余り	pow(x, n, y)
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
整数nの2進表現	bin(n)
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
リストとリストについて散布図を描いて、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ダークレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
コードポイントの最大値を知る	sys.maxunicode
マッピングをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
ヒストグラムの色をゴールデンロッドに指定する	plt.hist(データ列, color='goldenrod')
黒い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
データフレームの中の列をリストを境界値として分割する	pd.cut(df[col], aList)
option: 改行なし	end = ''
折れ線グラフを一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
カラムのNaNを中央値で補う	ds.fillna(ds.median())
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
デピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
nとn2の和	n + n2
スノー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
option: 読み込みモードに設定する	mode = 'r'
線グラフの色をオレンジレッドに指定する	plt.plot(データ列x, データ列y, color='orangered')
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
S-W検定を行う	scipy.stats.shapiro(データ列)
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
二つの文字列は等しくないか調べる	s != s2
縦軸の目盛を対数に変更する	plt.yscale('log')
データフレームを列によってグループ化し、、各グループごとの最大値を求める	df.groupby(column).max()
ふたつの集合の和集合を使う	aSet.union(aSet2)
option: ロイヤルブルーを使う	color = 'royalblue'
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
箱髭図としてデータ列を作図する	plt.boxplot(データ列)
option: リネンを使う	color = 'linen'
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
日付データを文字列でフォーマットして文字列にする	"aDate.strftime(""%d/%m/%y"")"
データフレームを'A'列の値によってグループ化し、記述統計量を求める	df.groupby('A').describe()
option: タン色を使う	color = 'tan'
組の末尾を除く	aTuple[:-1]
線グラフをシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='cyan')
データフレームを表示するとき、行数を変更する	pd.set_option('display.max_rows', n)
データフレームのカラムの中に日付データと文字列がある	df[col].isin([value, value2])
ローングリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
ヒストグラムの色をライトコーラルにする	plt.hist(データ列, color='lightcoral')
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
データ列のRMSEを求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
文字列のプレフィックスが部分文字列か調べる	s.startswith(sub)
列をワンホット・ベクトルに変換する	pd.get_dummies(iterable)
縦棒グラフをホットピンク色として描画する	plt.bar(データ列x, データ列y, color='hotpink')
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
辞書をインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
セットをリストに変換する	list(aSet)
x,yの複素数を計算する	complex(x, y)
線グラフを淡いピンク色色として描画する	plt.plot(データ列x, データ列y, color='lightpink')
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
散布図をラベンダー色を使って描画する	plt.scatter(データ列x, データ列y, color='lavender')
データ列が何分か見る	ds.dt.minute
辞書の項目名とその値を列挙する	aDict.items()
データ列をインポートする	import pandas as pd
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
実数の逆正接	math.atan(x)
線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
データフレームの標本標準偏差	df.std()
文字列は全て数値か判定する	s.isnumeric()
浮動小数点数を3乗する	x ** 3
マッピングからキーの値をエラーなく参照する	aDict.get(key, None)
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ファイルからディレクトリ名を求める	os.path.dirname(filepath)
nをn2で割った余りをnに代入する	n %= n2
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
二進数文字列を整数にする	int(s, 2)
現在の時刻	datetime.date.today().hour
データフレームから重複した行を削除して、更新する	df.drop_duplicates(inplace=True)
ヒストグラムの色をホットピンクに指定する	plt.hist(データ列, color='hotpink')
文字列を走査し、パターンにケースを無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームのリスト列は正規分布からどの程度歪んでいるか見る	df[aList].kurt()
option: マーカーの色を珊瑚にする	markerfacecolor = 'coral'
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
データフレームを列でソートして、上位n件を取り出す	df.sort_values(columns).head(n)
配列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
option: ブランチドアーモンドにグラフの色を設定する	color = 'blanchedalmond'
暗い赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
散布図をゴールド色として描画する	plt.scatter(データ列x, データ列y, color='gold')
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
散布図のバツ印の太さを指定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームのカラムは何分か確認する	df[col].dt.minute
ミディアムターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
データフレームの列の尖度	df[col].skew()
文字列は漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
option: フォントの色をコーンフラワーブルーに指定する	color = 'cornflowerblue'
データフレームを破壊的に'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True, inplace=True)
ヒストグラムの色をパープルに指定する	plt.hist(データ列, color='purple')
散布図を赤い下三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
option: 色を赤に設定する	color = 'red'
折れ線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
実数を小数点以下第一位で四捨五入する	round(x, 1)
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
文字列をセンタリングにする	s.center(文字列幅)
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
浮動小数点数が正か判定する	x > 0
縦棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
option: グラフの色をダークグレーに設定する	color = 'darkgray'
グローバル変数の一覧	globals()
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
option: オールドレースを用いる	color = 'oldlace'
文字のASCIIコードを使う	ord(ch)
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
リストと配列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
整数nを二進数表現に変換する	bin(n)
星マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
折れ線グラフの色をターコイズに指定する	plt.plot(データ列x, データ列y, color='turquoise')
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
文字列の長さ	len(s)
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ライトグレーにヒストグラムの色を指定する	plt.hist(データ列, color='lightgrey')
ナバホホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
二つのオブジェクトは同じか確認する	obj is obj2
自然数個からk個取り出したときの並べ方の総数	math.perm(n, k)
option: グラフの色をレベッカパープルに指定する	color = 'rebeccapurple'
折れ線グラフを赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
文字列をキャピタライズする	s.capitalize()
散布図の▽印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
線グラフを赤い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームを二つの列を用いて整列して、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
データ列の第一四分位数	ds.quantile(0.25)
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
リストとリストについての散布図にrgbの右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
リストの重複を取り除く	sorted(set(aList), key=aList.index)
カテゴリ列でグループ化して、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
リストの先頭	aList[0]
rgbの▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: フォントの色をオーキッドに指定する	color = 'orchid'
数式のパラメータに数値を代入する	e.subs(z, e2)
option: グレー色を使用する	color = 'gray'
配列とイテラブルについて散布図を描画し、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフを赤い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ストリームから1文字、読む	f.read(1)
エラーなく集合から要素を除く	aSet.discard(element)
ピーチパフ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
線グラフの色を淡い茶色に設定する	plt.plot(データ列x, データ列y, color='tan')
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
option: グラフの色をシエナに変更する	color = 'sienna'
半透明の点線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
日付データの年	aDate.year
棒グラフの色を真紅にする	plt.bar(データ列x, データ列y, color='crimson')
本日が何年か知る	datetime.datetime.today().year
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
ゴールド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
数列とデータ列の散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
option: ライトスカイブルーを使う	color = 'lightskyblue'
データフレームから指定されたデータ型の列名の一覧を使う	df.select_dtypes(型).columns
折れ線グラフをダークゴールデンロッド色を使って描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
リストのオブジェクトが最初に見つかる位置	aList.index(element)
option: セパレータをスラッシュにする	sep = '/'
レベッカパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
スノーにヒストグラムの色を設定する	plt.hist(データ列, color='snow')
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
リストのn番目の	aList[n]
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
option: 色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: ケースを無視する	flag = re.IGNORECASE
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
n割るn2	n / n2
マップのキー一覧	list(aDict)
L1ノルムでデータを正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
保存するカンマ区切りのファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
両端キューの末尾に要素をつけ加える	deq.append(element)
カウンタの上位を列挙する	aCounter.most_common(k)
散布図の△マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
リストの長さだけ繰り返す	range(len(aList))
日付時刻データが水曜日か	aDatetime.weekday() == 2
option: ライトコーラル色を使う	color = 'lightcoral'
option: ポイントマーカーを使う	marker = '.'
現在は何秒か知る	datetime.date.today().second
リストと数列について散布図を描画して大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
実数の正弦	math.sin(x)
データ列の変遷を半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
文字列を最後の部分文字列で分割したときの後半の文字列を取り出す	s.rpartition(sub)[-1]
データフレームのリストカラムの欠損値を平均値にセットする	df[aList].fillna(df[aList].mean())
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
option: 改行コードをWindowsに設定する	newline = '\r\n'
文字列が全てアスキー文字か判定する	s.isascii()
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
option: グラフの線種を一点鎖線に設定する	linestyle = 'dashbot'
データ列の歪度を求める	ds.kurt()
本日のタイムスタンプ	datetime.datetime.today()
棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
文字列中の部分文字列の登場回数	s.count(sub)
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
ダークグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
nがn2の倍数でないか調べる	n % n2 != 0
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
折れ線グラフの色をミディアムシアグリーンにセットする	plt.plot(データ列x, データ列y, color='mediumseagreen')
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
実数の双曲線正弦	math.sinh(x)
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
カウンタのktopをリストとして得る	aCounter.most_common(k)
散布図に赤いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
行列を横ベクトルに変形する	aArray.reshape(1, -1)
数式をパラメータについてn階微分する	sympy.diff(e, z, n)
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
カウンタから辞書を引く	aCounter.subtract(aDict)
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
リストの要素を昇順にソートする	sorted(aList, reverse=False)
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
データ列の欠損値を第二四分位数に設定する	ds.fillna(ds.median())
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
データフレームのリスト列の中にと文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
折れ線グラフの色をプラムに変更する	plt.plot(データ列x, データ列y, color='plum')
スタックを用いる	import collections
リストと配列の散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
文字列TSVからn番目のカラムをインデックスとしてカンマ区切りのファイルを読む	pd.read_csv(filename, index_col=n)
棒グラフをゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='goldenrod')
ピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
オブジェクトは集合クラスのインスタンスか調べる	isinstance(obj, set)
ライトコーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
ヒストグラムの色をオールドレースにする	plt.hist(データ列, color='oldlace')
option: 星マーカーを描画する	marker = '*'
数列とリストの散布図を描画してマーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
散布図に赤いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='r')
オールドレース色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
nまたはn2	n or n2
組の各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
nが一桁の数か	0 <= n <= 9
各列毎にデータフレームをグループ化して、列の分散を求める	df.groupby(column)[column2].var()
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの大バツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
option: サンディーブラウンを使用する	color = 'sandybrown'
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
折れ線グラフをダークグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgreen')
真上位集合かどうか確認する	aSet > aSet2
正規分布にしたがってデータ列の値が発生する累積確率を計算する	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
数列の変化を赤い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
データ列が何日か見る	ds.dt.day
四分位数ごとにリストをビニングする	pd.qcut(aList, 4)
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
配列の累積積	np.cumprod(aArray)
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフのバツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
折れ線グラフの色をライムグリーンに指定する	plt.plot(データ列x, データ列y, color='limegreen')
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
ヒストグラムをオーキッド色として描画する	plt.hist(データ列, color='orchid')
グラフ中のフォントを設定する	sns.set(font=フォント名)
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
データフレームの列と列の相関行列	df[[column, column2]].corr()
配列の型を計算する	aArray.dtype()
データフレームの末尾	df.tail()
ロージーブラウン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
オブジェクトの種類	type(obj)
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
棒グラフをアイボリー色を用いて描画する	plt.bar(データ列x, データ列y, color='ivory')
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
データフレームの列の未入力値をxで埋める	df[col].fillna(x)
折れ線グラフに右三角印を使う	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをオーキッド色として描画する	plt.plot(データ列x, データ列y, color='orchid')
最大値・最小値の範囲を用いて一様な乱数を生成する	random.uniform(最小値, 最大値)
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
グラフの描画で色差別なく色テーマを用いる	sns.set(pallete='colorblind')
縦棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
ゴーストホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
部分文字列が文字列の終了位置より前に含まれる	s.find(sub, 0, end) != -1
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
ダークオレンジ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
データフレームの中に文字列がある	df.isin([value])
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
ライム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
option: フォントの色をグリーンイエローに変更する	color = 'greenyellow'
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
カウンタからマッピングを引く	aCounter.subtract(aDict)
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ヒストグラムをトマト色として描画する	plt.hist(データ列, color='tomato')
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
データフレームを'A'列の値によってグループ化する	df.groupby('A')
データフレームの列がxの行を抽出する	df[df[column] == x]
データフレームの列名を一度に文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
データフレームからカテゴリデータの列名リスト	df.select_dtypes('object').columns
要素ひとつのタプル	(element,)
ケンドール相関係数を用いてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
折れ線グラフをレモンシフォン色として描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
データフレームの列を柱状図を用いて描画する	plt.hist(df[column])
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
CSVファイルからデータフレームを読む	pd.read_csv(filename, sep=',')
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
散布図を右三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='>')
ファイルが存在するか確認する	os.path.exists(filepath)
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
nの十六進数表記	hex(n)
タイムスタンプデータが水曜日か調べる	aDatetime.weekday() == 2
線グラフの色をマゼンタに指定する	plt.plot(データ列x, データ列y, color='magenta')
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
2つの変数を改行で区切ってプリントする	print(value, value2, sep='\n')
xをブール値に変換する	bool(x)
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
シルバー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
文字列が文字列リストにあるかどうか調べる	s in aStringList
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
rangeの無限版	itertools.count(start=n, step=step)
オプションでファイルを使う	file = sys.open(filename, 'w')
タプル内の要素が全て真か	all(aTuple)
ヒストグラムの色をダークオレンジに変更する	plt.hist(データ列, color='darkorange')
数値を青色でプリントする	print(f'\033[34m{value}\033[0m')
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
グラフを用いる準備をする	import matplotlib.pyplot as plt
データフレームを'A'列でまとめた表	df.groupby('A')
ヒストグラムをダークスレートブルー色を使って描画する	plt.hist(データ列, color='darkslateblue')
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
要素が集合のメンバーでないか調べる	element not in aSet
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
行列の内積	np.dot(aArray, aArray2)
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
線形モデルの切片	model.intercept_
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
折れ線グラフでデータフレームの列を可視化する	plt.plot(df[column], df[column])
オリーブにヒストグラムの色を設定する	plt.hist(データ列, color='olive')
TSVファイルファイル名が	filename.endswith('.tsv')
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
タイムスタンプデータと日付時刻データの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
データフレームのリストカラムを1000の位で四捨五入して、整数にする	df[aList].round(-3).astype(int)
昨日の日付を使う	datetime.date.today() - datetime.timedelta(days=1)
50パーセンタイルでデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].median())
散布図のクロス印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームのカラムの文字列をNaNに変換する	df[col].replace(s, np.nan)
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
表データを用いる	import pandas as pd
データフレームを各列毎に集約し、、文字列というグループの個数を求める	df.groupby(column).size()[s]
散布図に四角印を使う	plt.scatter(データ列x, データ列y, marker='s')
棒グラフの色を濃い青にする	plt.bar(データ列x, データ列y, color='darkblue')
折れ線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
散布図をrgbのバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
コマンドの第２引数を確認する	sys.argv[1]
ライトスカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightskyblue')
option: シルバーを用いる	color = 'silver'
データフレームのカラムのNaNを直前の値に変更する	df[col].fillna(method='ffill')
ヒストグラムの色を青紫に変更する	plt.hist(データ列, color='violet')
折れ線グラフの色をアクアマリンに変更する	plt.plot(データ列x, データ列y, color='aquamarine')
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
カウンタからタプルを減らす	aCounter.subtract(aDict)
option: グラフの色をオレンジに変更する	color = 'orange'
nをn2で割ったモジュロ	n % n2
縦棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
コマンドフラグの状態	sys.flags
ヒストグラムの色をミディアムバイオレットレッドにセットする	plt.hist(データ列, color='mediumvioletred')
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
左三角マーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
日付データからn秒分、減らす	aDate - datetime.timedelta(seconds=n)
散布図をrgbの▽マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
日付データと日付データの時間差	aDate - aDate2
データフレームを千の位で丸める	df.round(-3)
文字列を部分文字列で区切り、、文字列リストに変換する	s.split(sub)
縦棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
スクリプトのファイルの名前	sys.argv[0]
２つの列の値によってデータフレームを集計して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
データフレームのカラムを削除する	df.drop(column, axis=1)
折れ線グラフをブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='brown')
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
部分文字列を文字列の接尾辞から消す	s.removesuffix(sub)
ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
散布図の色を珊瑚にする	plt.scatter(データ列x, データ列y, color='coral')
ダークカーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
option: コロンを区切りで使う	sep = ':'
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
nまでの奇整数列を作る	list(range(1, n, 2))
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
逆正弦を算出する	math.asin(x)
rangeの無限バージョン	itertools.count(start=n, step=step)
データフレームのリストカラムをValueMapでまとめて置き換える	df[aList].replace(ValueMap)
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
シーケンスとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
カテゴリデータ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
データ列の折れ線グラフを四角印で描画する	plt.plot(データ列x, データ列y, marker='s')
集合をイミュータブルなセットに変換する	frozenset(aSet)
横棒グラフをビスク色を使って描画する	plt.barh(データ列x, データ列y, color='bisque')
折れ線グラフの三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: グラフの色を真紅にする	color = 'crimson'
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
最初のカラムをデータフレームから消す	df[df.columns[1:]]
データフレームから型の列を抽出する	df.select_dtypes(ty)
文字列を空白で区切って、整数のリストに変換する	map(int, s.split())
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
オーキッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
ミントクリーム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
横棒グラフをライトコーラル色として描画する	plt.barh(データ列x, データ列y, color='lightcoral')
散布図をラベンダーブラッシュ色として描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
オブジェクトのバイト長	sys.getsizeof(obj)
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
インデックスによって小さい順にデータフレームをソートする	df.sort_index(ascending=True)
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
文字列を最初の部分文字列で分けたときの残りの文字列	s.partition(sub)[-1]
散布図をパールバイオレットレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
option: シエナ色を用いる	color = 'sienna'
リストの値を昇順にソートする	sorted(aList, reverse=True)
option: スノー色を用いる	color = 'snow'
データフレームのリスト列の欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
イテラブルとデータ列について散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
縦棒グラフをアイボリー色を使って描画する	plt.bar(データ列x, データ列y, color='ivory')
文字列が文字列リストに存在するか調べる	s in aStringList
データフレームを列で整列して、行を振り直す	df.sort_values(columns).reset_index(drop=True)
データフレームのリスト列を丸めて整数型にする	df[aList].round().astype(int)
あらかじめ正規表現を複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データフレームから型を抽出する	df.select_dtypes(ty)
既存のファイルを文字列の示すエンコーディングで追加できるように開く]	open(filepath, mode='a', encoding=s)
アイリスのデータセットをロードする	sns.load_dataset('iris')
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
文字列を最初の部分文字列で分けたときの前半の文字列を使う	s.partition(sub)[0]
プロットの目的をスライドに変更する	sns.set(context='talk')
現在の曜日を整数で使う	datetime.datetime.today().weekday()
ピアソン積率相関係数でデータフレームのリスト列の相関行列を計算する	df[aList].corr(method='pearson')
タイムスタンプデータとタイムスタンプデータの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
データフレームのカラムをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
オブジェクトが集合か調べる	isinstance(obj, set)
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
ロイヤルブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
リストと配列についての散布図に赤いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
ヒストグラムの色をミディアムスレートブルーに指定する	plt.hist(データ列, color='mediumslateblue')
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
n個の整数リストを作る	list(range(n))
ブラック色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
赤い点線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
横棒グラフの色をやわらかい青にする	plt.barh(データ列x, データ列y, color='cornflowerblue')
nからn2の範囲を使う	range(n, n2)
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
事前に正規表現をコンパイルする	re.compile(pattern)
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
ヒストグラムの色をビスクに変更する	plt.hist(データ列, color='bisque')
ペールグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
データフレームのカラムを度数分布図にする	plt.hist(df[column])
パレットトルコイズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
ひとつでも小文字が文字列内にある	any(c.islower() for c in s)
リストが少なくとも一つ真か調べる	any(aList)
データフレームのカラムの時刻	df[col].dt.hour
数列とリストについての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームを各列毎に集約して、文字列というグループの個数を求める	df.groupby(column).size()[s]
表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームから重複を破壊的にドロップする	df.drop_duplicates(inplace=True)
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
線グラフの色をゲインズボロにする	plt.plot(データ列x, データ列y, color='gainsboro')
モジュールを検索するパス	sys.path
論理値型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int32)
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
分類結果の真陽性を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
折れ線グラフの色をスラグレーにセットする	plt.plot(データ列x, データ列y, color='slategrey')
データフレームの行と列をひっくり返す	df.T
線グラフの色をダークオーキッドにする	plt.plot(データ列x, データ列y, color='darkorchid')
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
フクシア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
赤い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='r')
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
データ列の曜日名	ds.dt.weekday_name
折れ線グラフの色をデピンクにセットする	plt.plot(データ列x, データ列y, color='deeppink')
文字列の左側から空白を取り除く	s.lstrip(' ')
出力ストリームにxを文字列に変換して書き込む	f.write(str(x))
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
二つのデータフレームを横向きにマージする	pd.merge(df, df2)
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
数式を簡単化する	sympy.sympify(e)
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームを列名リストによってを用いて大きい順にソートする	df.sort_values(by=column, ascending=False)
グラフの描画で色差別なく色使いを用いる	sns.set(pallete='colorblind')
文字列を最後の部分文字列で分割した時の前半の文字列を使う	s.rpartition(sub)[0]
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
データフレームのpercent分位数	df.quantile(percent/100)
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
既存のファイルをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
nの二進表現を使う	bin(n)
データフレームから列を３つ選択する	df[[column, column2, column3]]
スレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
プロットに凡例を加える	plt.legend(['凡例A', '凡例B'])
日付時刻データからn日分減らす	aDatetime - datetime.timedelta(days=n)
option: ロイヤルブルーを用いる	color = 'royalblue'
凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
データフレームの列の名前一覧で指定した列を削除する	df.drop(columns, axis=1)
Pandasで文字列を日付データにする	pd.to_datetime(s)
折れ線グラフの色をゴーストホワイトにする	plt.plot(データ列x, データ列y, color='ghostwhite')
正則化付き単回帰モデルを用意する	model = sklearn.linear_model.ElasticNet()
整数nを二進文字列に変換する	bin(n)[2:]
データフレームの中の列を分割数nでビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
棒グラフを小麦色色として描画する	plt.bar(データ列x, データ列y, color='wheat')
複数の列の値によってデータフレームを集計し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
プロット中のフォントを指定する	sns.set(font=フォント名)
option: フォントの色をビスクに設定する	color = 'bisque'
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
データ列の欠損値を最小値に指定する	ds.fillna(ds.min())
散布図にクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
列ごとにデータフレームをグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
option: 色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
辞書順で二つの文字列を比較する	s < s2
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
リストにリストを追加する	aList.extend(aList2)
両端キューの先頭に列の各要素を順に追加する	deq.extendleft(iterable)
文字列の終了位置以前に部分文字列が含まれないか確認する	s.find(sub, 0, end) == -1
改行なしに文字列をプリントする	print(value, end='')
option: ゲインズボロ色を用いる	color = 'gainsboro'
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
タイムスタンプデータにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
option: ライムグリーンに色を指定する	color = 'limegreen'
データフレームから列を三つ選択する	df[[column, column2, column3]]
option: ライトゴールドロディイエロー色を用いる	color = 'lightgoldenrodyellow'
カウンタを辞書にする	dict(aCounter)
'A'列によってデータフレームを並べて、NaNを先頭にする	df.sort_values(by='A', na_position='first')
グラフをポスター用に設定する	sns.set(context='poster')
数式のインテグラルを行う	sympy.integrate(e)
散布図を四角マーカーで描画する	plt.scatter(データ列x, データ列y, marker='s')
マゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
本日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
二つのリストを順に表示する	print(value, value2)
カウンタの正の数のみ残す	+aCounter
リストと数列の散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
配列にはいくつ要素があるか調べる	aArray.size
整数を十の位で四捨五入する	round(x, -1)
小数点数の余弦の逆数	math.acos(x)
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
縦軸の目盛を非表示にする	plt.yticks([])
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
範囲を指定して乱数を求める	random.randint(最小値, 最大値)
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
散布図を黒い三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ガンマ関数	math.gamma(x)
文字列でフォーマットして日付データを文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
カウンタの項目数	len(aCounter)
ファイルからの入力ストリームを使う	open(filepath)
二つの集合に共通する要素からなる集合を求める	aSet.intersection(aSet2)
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
横軸の目盛を対数に変更する	plt.xscale('log')
多次元データをSVDでパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
option: ロイヤルブルー色を使用する	color = 'royalblue'
破壊的に二つの列によってデータフレームを降順に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
ダークレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
青いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
文字列は全て数値か調べる	s.isnumeric()
データフレームを10の位で丸めて整数型にする	df.round(-1).astype(int)
レモンシフォン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
option: フォントの色をモカシンに変更する	color = 'moccasin'
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
今日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
文字列が文字列リストのいづれか	s in aStringList
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図をrgbの大バツマーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフのバツ印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームのカラムを並べてボックスチャートにする	plt.boxplot([df['カラム'], df['カラム']])
データフレームを２つの列によって破壊的に昇順に並べる	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
option: ブランチドアーモンドを使う	color = 'blanchedalmond'
散布図を大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X')
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
option: 赤にグラフの色を指定する	color = 'red'
実数が整数か調べる	x.is_integer()
ビスク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
ダークシアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
n進文字列をbytesizeバイトのバイト列にする	int(s, n).to_bytes(length=bytesize, byteorder='big')
option: ダークグレー色を用いる	color = 'darkgray'
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
赤い破線でリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
データフレームのカラムの日	df[col].dt.day
ファイルパスをEUCでオープンする]	open(filepath, encoding='euc_jp')
英文字からひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
アルファベットから一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
実数の３乗	x ** 3
option: 黄色色を使う	color = 'yellow'
2つのカウンタの共通する要素を求める	aCounter & aCounter2
日付時刻データの時間数	aDatetime.hour
option: ミスティローズ色を使う	color = 'mistyrose'
２つのデータフレームを列'A'と列'B'をキーにして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームの各グループごとの平均値を計算する	df.groupby(column).mean()
多次元データを多次元尺度構成法としてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
右三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
実数の角度	math.degrees(x)
option: 書き込みモードにセットする	mode = 'w'
タイムスタンプデータからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
双方向キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
多次元データをt-SNEとしてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
データ列は何曜日か確認する	ds.dt.weekday_name
文字列が全て空白文字かどうか調べる	s.isspace()
黒い右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c='k')
点線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
アリスブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
棒グラフをハニーデュー色を用いて描画する	plt.bar(データ列x, データ列y, color='honeydew')
縦棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ミディアムパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
1からnまでの整数リスト	list(range(1, n+1))
文字列全体がパターンにケースを無視してマッチするか調べる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ヒストグラムの色を白に変更する	plt.hist(データ列, color='white')
ランダム性を追加したランダムフォレストで回帰分析をする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
option: ロージーブラウンにグラフの色を設定する	color = 'rosybrown'
ハローワールドをプリントする	print('Hello World')
データフレームから重複を残さず削除する	df.drop_duplicates(keep=False)
青緑色でヒストグラムを描画する	plt.hist(データ列, color='teal')
コマンドラインフラグの状態を知る	sys.flags
ふたつの関係が上位集合か調べる	aSet.issuperset(aSet2)
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
データ列を整数に四捨五入する	ds.round()
nがn2より小さいか	n < n2
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
データ列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
日付時刻データが日付時刻データと同時か判定する	aDatetime == aDatetime2
option: ライトイエローを使う	color = 'lightyellow'
option: ダークスレートブルー色を使う	color = 'darkslateblue'
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
データフレームの列の名前の一覧を使う	df.columns
辞書のキーの値	aDict[key]
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
option: グラフの色を淡いピンク色にセットする	color = 'lightpink'
縦棒グラフをホワイト色で描画する	plt.bar(データ列x, データ列y, color='white')
浮動小数点数の符号を同じにする	math.copysign(x, x2)
二変数の最小値	min(x, y)
タプルをナンバリングする	enumerate(aTuple)
ミディアムバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumvioletred')
疑似乱数平均と標準偏差からを求める	random.normalvariate(mu=0.5, sigma=0.2)
散布図に黒い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
青紫色でヒストグラムを描画する	plt.hist(データ列, color='violet')
option: グラフの色を紺碧に設定する	color = 'azure'
データフレームの各グループごとの分散	df.groupby(column).var()
option: グラフの色をゴールドに変更する	color = 'gold'
日付データにn時間を加える	aDate + datetime.timedelta(hours=n)
グラフ中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
文字列をISO8601で日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
タプルのn番目からn2番目まで	aTuple[n:n2]
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
データフレームをタブ区切りのファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
列を四分位数でビン分割する	pd.qcut(ds, 4)
2進文字列をbytesizeバイトのバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ブランチドアーモンド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
ファイルパスからフォルダ名取り出す	os.path.dirname(filepath)
棒グラフをライトブルー色として描画する	plt.bar(データ列x, データ列y, color='lightblue')
タプルのn番目のを使う	aTuple[n]
ダーク・スラテグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
カラーバーをつける	plt.colorbar()
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
ラインを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ホットピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
リストとリストについて散布図を描画してバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ブランチドアーモンド色でヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
散布図の三角印を黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
カラムの母標準偏差	ds.std(ddof=0)
データフレームを散布図で可視化して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフをライトスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ランダムフォレストでクラス分類をする	model = sklearn.ensemble.RandomForestClassifier()
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
散布図をピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='pink')
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
低頻出な方からカウンタを列挙する	aCounter.most_common()[::-1]
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
ハニーデュー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
オブジェクトの無限列	itertools.repeat(element)
option: ▲印を使う	marker = '^'
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
ホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
option: オレンジ色を使う	color = 'orange'
偽陰性を抑えたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
グリッドの線種を実線に変更する	plt.grid(linestyle='solid')
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
nをn2で割った余りを計算する	n % n2
インディアンレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
実数のn乗	x ** n
半透明の点線としてラインを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: ライトサーモンを用いる	color = 'lightsalmon'
文字列をバイト配列にする	bytearray(s)
option: グラフの色をブラックに設定する	color = 'black'
option: インディアンレッド色を使う	color = 'indianred'
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
キューの長さ	len(deq)
プロットにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
イテラブルを文字列リストに変換して、部分文字列で結合する	sub.join(map(str, iterable))
オブジェクトをイテラブルにする	iter(obj)
ダークサーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
全８進数字	string.octdigits
ヒストグラムをオールドレース色として描画する	plt.hist(データ列, color='oldlace')
データ列の出現頻度を描画する	plt.hist(データ列)
プロットの中のy軸にラベルを設定する	plt.ylabel('y軸ラベル')
淡い茶色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
縦棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
今日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
縦棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
ライトコーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
コーンフラワーブルー色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
option: オールドレース色を使う	color = 'oldlace'
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
赤い星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
ホワイト色のヒストグラムを描画する	plt.hist(データ列, color='white')
カテゴリでグループ化して、に箱ひげ図でデータフレームをグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
組の値を逆順にする	aTuple[::-1]
ラインを赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームのカラムを10の位で丸める	df[col].round(-1)
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
データフレームのカラムをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
折れ線グラフの四角印の大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
スカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
配列とリストについて散布図を描画して、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
カウンタの項目を列挙する	aCounter.keys()
組を昇順にソートする	sorted(aTuple, reverse=True)
データフレームが重複しているか調べる	df.duplicated()
２つの変数をタブで区切ってプリントする	print(value, value2, sep='\t')
コンビネーション	math.comb(n, k)
リストを複製する	aList.copy()
列'A'と列'B'をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
option: バツ印を使う	marker = 'x'
スカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
キーがタプルに存在しているか	key not in aDict
縦棒グラフをバイオレット色で描画する	plt.bar(データ列x, データ列y, color='violet')
セットをイミュータブルに変換する	frozenset(aSet)
等間隔の行列を作る＼	np.arange(開始値, 終了値, 等差)
未初期化の配列	np.empty(要素数, dtype=np.int)
データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
ファイルをBOM付きを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
降順に列でによってデータフレームをソートする	df.sort_values(by=column, ascending=False)
書き込みモードでファイルパスを開く]	open(filepath, mode='w')
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
横棒グラフをレモンシフォン色として描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
セットから全ての要素を取り除く	aSet.clear()
プラットホームはMacOSかどうか調べる	sys.platform.startswith('darwin')
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
データフレームのカラムを10の位で丸めて整数にする	df[col].round(-1).astype(int)
整数nは配列のどれかか	n in aArray
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
文字列を空白で区切って、文字列リストに変換する	s.split()
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
トマト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
散布図の△マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
両端キューの値をインプレースに反転する	deq.reverse()
モジュールを検索するパスにを追加する	sys.path.append(dir)
Pandasで、フォーマットfmtを使ってデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
実数が無限大	math.isinf(x)
真下位集合か調べる	aSet < aSet2
日付データが日付データより前か調べる	aDate < aDate2
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
option: ディムグレー色を使用する	color = 'dimgrey'
option: ブルーバイオレット色を使う	color = 'blueviolet'
データフレームのリストカラムのNaNをxに設定する	df[aList].fillna(x)
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
データフレームの中に文字列があるかどうか調べる	df.isin([value])
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
option: データ型を指定する	dtype = np.int16
逆行列	np.linalg.inv(aArray)
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
各列毎にデータフレームをグループ化して列の合計を計算する	df.groupby(column)[column2].sum()
year年month月day日hour時minute分の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
文字コードtextで書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding=text)
配列とリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
データフレームを各列毎に集約して、列の最大値を求める	df.groupby(column)[column2].max()
10を底とする対数	math.log10(x)
データフレームの中で列に重複があるか調べる	df.duplicated(subset=column)
縦棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
分類モデル教師データでを学習する	model.fit(説明変数, 目的変数)
option: 色をパープルに設定する	color = 'purple'
散布図を描画する	plt.scatter(データ列x, データ列y)
上位集合もしくは等しいか調べる	aSet > aSet2
option: ミントクリームにグラフの色を設定する	color = 'mintcream'
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
リストと配列についての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
グリッド線	plt.grid(alpha=0.5)
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
コーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
縦棒グラフをミディアムブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumblue')
折れ線グラフの四角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
辞書に辞書の項目を更新する	aDict.update(aDict2)
JSONフォーマットの文字列を辞書に変換する	json.loads(jsonString)
横棒グラフをスラグレー色を使って描画する	plt.barh(データ列x, データ列y, color='slategrey')
データフレームのカラムの秒	df[col].dt.second
改行を用いて文字列を区切る	s.splitlines()
option: ベクトルのデータ型を指定する	dtype = np.int16
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
文字をASCIIコードに変換する	ord(ch)
主成分分析でパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
データフレームの中に日付データと文字列がいくつあるかカウントする	df.isin([value, value2]).sum()
option: フォレストグリーン色を使用する	color = 'forestgreen'
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
横棒グラフをシルバー色として描画する	plt.barh(データ列x, データ列y, color='silver')
改行を取り除いて入力ストリームを一行ずつ読み込む	f.readline()
データフレームを100の位で丸める	df.round(-2)
ファイルからストリームをオープンして]fileとする	file = open(filepath)
option: ミディアムパープル色を使う	color = 'mediumpurple'
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ヒストグラムの色をアクアマリンに変更する	plt.hist(データ列, color='aquamarine')
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
option: グラフの色をグレーに設定する	color = 'gray'
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
モカシンにヒストグラムの色を指定する	plt.hist(データ列, color='moccasin')
プラムにヒストグラムの色をする	plt.hist(データ列, color='plum')
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
ブルーバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
データフレームから指定した列名リストの列のみ抽出する	df[columns]
行列の行ごとの最小値を求める	np.min(aArray, axis=1)
ヒストグラムの色をパパイヤウィップに変更する	plt.hist(データ列, color='papayawhip')
リストをタプルに変換する	tuple(aList)
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
文字列を置き換える	s.replace(sub, newsub)
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
カウンタの正の数だけ残す	+aCounter
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
option: グラフの色をフローラルホワイトに変更する	color = 'floralwhite'
二つの数値をスラッシュで区切って表示する	print(value, value2, sep='/')
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
オブジェクトがリストに含まれるか調べる	element in aList
ダークゴールデンロッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
データフレームの中の列をビン数nとしてビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
赤い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
折れ線グラフの色をミッドナイトブルーにする	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームのn行目まで抽出する	df[:n]
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
イテラブル自身の長さnの順列	itertools.permutations(iterable, n)
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
散布図を黒い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
Pandasのバージョンを見る	print(pd.__version__)
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
文字列は片仮名か確認する	('ァ' <= ch <= 'ン')
option: フローラルホワイト色を使う	color = 'floralwhite'
横棒プロットを描画して、バーの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
option: 改行の代わりに文字列を用いる	end = s
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategray')
データフレームの列が文字列が含まれないデータを選択する	df[not df[column].str.contains(s)]
トマト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
破線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ファイルパスを開いて]、読み込みストリームを使う	open(filepath, mode='r')
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
回帰モデルをあてはめる	model.fit(説明変数, 目的変数)
散布図をアリスブルー色として描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
ダークブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
破壊的にデータフレームを複数の列によってによってソートする	df.sort_values(by=column, inplace=True)
二つのデータフレームを縦方向に一つにまとめる	pd.concat([df, df2], axis=0)
グリーンイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
いつまでもnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
三変数の最小値	min(x, y, z)
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
集合をリストにする	list(aSet)
新しい計数器をイテラブルから作る	collections.Counter(iterable)
クラス分類の適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
option: スラグレーにグラフの色を変更する	color = 'slategray'
折れ線グラフの色をミディアムブルーに変更する	plt.plot(データ列x, データ列y, color='mediumblue')
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
文字列を緑色化する	f'\033[32m{value}\033[0m'
縦棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
余弦の逆数	math.acos(x)
整数にする	int(x)
線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
辞書の項目名に対応した値	aDict.get(key)
配列の次元数	aArray.ndim
ふたつの集合が集合と交わりを持たないかどうか調べる	aSet.isdisjoint(aSet2)
横棒グラフを珊瑚色として描画する	plt.barh(データ列x, データ列y, color='coral')
要素が全て1のベクトル	np.ones(要素数, dtype=np.int)
option: 色をサーモンに設定する	color = 'salmon'
カーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
句読点文字を全部使う	string.punctuation
第二四分位数でデータ列の欠損値を埋める	ds.fillna(ds.median())
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
データフレームの値を正規表現patternで一度に置換する	df.replace(pattern, repl, regex=True)
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
データフレームのカラムの年	df[col].dt.year
エクセルデータファイルをデータフレームとして読む	pd.read_excel(filename)
表から指定された４つの列だけ抽出する	df[[column, column2, column3, column4]]
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データ列の折れ線グラフを丸印で描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
ヒストグラムをオレンジ色を用いて描画する	plt.hist(データ列, color='orange')
option: ライトサーモンを使う	color = 'lightsalmon'
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
option: フォントの色をロイヤルブルーにセットする	color = 'royalblue'
文字列内にひとつでも大文字が含まれる	any(c.isupper() for c in s)
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
横棒グラフをホワイト色として描画する	plt.barh(データ列x, データ列y, color='white')
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
棒グラフの色をrgbに変更する	plt.bar(ラベル列, データ列, color=rgb)
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
線グラフの色をダーク・スラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategrey')
配列の行ごとの合計値を求める	np.sum(aArray, axis=1)
ライトスレイグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームの列の欠損値を前の行の値で埋める	df[col].fillna(method='ffill')
nの二乗を算出する	n ** 2
淡いピンク色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
データフレームを'A'列によってで破壊的に並べる	df.sort_values(by='A', inplace=True)
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
縦棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
シーグリーン色でヒストグラムを描画する	plt.hist(データ列, color='seagreen')
option: ペルー色を使う	color = 'peru'
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
カウンタ同士で交わりを計算する	aCounter & aCounter2
グレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
RANSACで回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ヒストグラムの色をライトブルーに変更する	plt.hist(データ列, color='lightblue')
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
リストのn番目からn2番目まで	aList[n:n2]
実数を三乗する	x ** 3
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
データフレームのカラムが何秒か確認する	df[col].dt.second
線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
option: ダークグリーン色を使用する	color = 'darkgreen'
回帰分析をアンサンブル学習で行う	sklearn.ensemble.VotingRegressor()
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
双方向キューの左側の要素	deq[0]
浮動小数点数を小数点以下で丸める	round(x, n)
要素ひとつのりスト	[element]
nまでの偶整数列	list(range(2, n, 2))
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
nullに等しいもの	None
ヒストグラムをパウダーブルー色を用いて描画する	plt.hist(データ列, color='powderblue')
二つの変数を文字列で区切ってプリントする	print(value, value2, sep=s)
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
nからn2の範囲	range(n, n2)
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
ヒストグラムの色をダークレッドに設定する	plt.hist(データ列, color='darkred')
データフレームの各グループごとの最大値	df.groupby(column).max()
線グラフをラベンダー色を用いて描画する	plt.plot(データ列x, データ列y, color='lavender')
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
ヒストグラムの色をデピンクにセットする	plt.hist(データ列, color='deeppink')
ファイルに文字列を書く	f.write(s)
▽印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
書き込むCSVファイルの小数点以下の桁数をセットする	df.to_csv(filename, float_format='%.3f')
ミディアムアクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
縦棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
option: 丸印を描画する	marker = 'o'
赤い▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
折れ線グラフの色をパパイヤウィップに変更する	plt.plot(データ列x, データ列y, color='papayawhip')
option: フォントの色をディムグレーに設定する	color = 'dimgrey'
実数のn乗して浮動小数点数による余りを求める	pow(x, n, y)
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
最後の部分文字列で文字列を分けた場合の最初の文字列	s.rpartition(sub)[0]
option: ライトシアンに色を設定する	color = 'lightcyan'
ベクトルの演算をする	import numpy as np
両端キューのデータをインプレースに反転する	deq.reverse()
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
データフレームの文字列をNaNに変換する	df.replace(s, np.nan)
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
日付時刻データが月曜日か	aDatetime.weekday() == 0
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
データ列を２つ並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
青い実線でリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
ヒストグラムを実線を用いて描画する	plt.hist(データ列, linestyle='solid')
行列の要素ごとの積	np.multiply(aArray, aArray2)
ポイントマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='.')
散布図のマーカーの色を指定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
option: グラフの色をグレーに変更する	color = 'grey'
キューを列から作成する	collections.deque(iterable)
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
データフレームの列の値がxのデータを抽出する	df[df[column] == x]
データフレームのリストカラムの中に文字列とがいくつあるか数える	df[aList].isin([value, value2]).sum()
文字列がタプルに含まれないか調べる	element not in aTuple
多次元データを特異値分解でパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
文字列内にひとつでもアルファベットが含まれる	any(c.isalpha() for c in s)
縦軸の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
本日は何曜日か知る	datetime.datetime.today().weekday()
二つのカウンタの共通する要素を計算する	aCounter & aCounter2
option: マーカーを丸に変える	marker = 'o'
xを整数にする	int(x)
ヒストグラムをダークブルー色を用いて描画する	plt.hist(データ列, color='darkblue')
データ列とリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームのリストカラムを100の位で四捨五入して、整数型にする	df[aList].round(-2).astype(int)
データフレームのカラムが何曜日か調べる	df[col].dt.weekday_name
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
数値の因数分解を行う	sympy.factor(e)
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
データ列の欠損値を最大値で補う	ds.fillna(ds.max())
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
リストとリストの散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
縦棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
縦棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
データフレームから指定した列を抽出する	df[[column]]
配列とリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
osモジュールをインポートする	import os
データフレームの列を折れ線グラフで作図する	plt.plot(df[column], df[column])
データフレームの列が文字列で始まらない行を選択する	df[not df[column].str.startswith(s)]
列にタプルを続ける	itertools.chain(iterable, iterable2)
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームのn行目をインプレイスで落とす	df.drop(n, axis=0, inplace=True)
データフレームの列を百の位で丸めて、整数型にする	df[col].round(-2).astype(int)
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgray')
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
横棒グラフをオレンジレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='orangered')
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
kを底とする実数の対数	math.log(x, k)
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
新しいガウス過程回帰モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
実行結果を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')

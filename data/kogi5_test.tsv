オブジェクトは文字列クラスかどうか調べる	isinstance(obj, str)
線グラフの色をダークオレンジに指定する	plt.plot(データ列x, データ列y, color='darkorange')
ヒートマップで混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
文字列にシーケンスを変換して、タブで結合する	'\t'.join(map(str, iterable))
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
キューからポップする	deq.pop()
赤いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図を黄緑色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
ヒストグラムの色をライトイエローに変更する	plt.hist(データ列, color='lightyellow')
折れ線グラフをダークターコイズ色を使って描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
赤いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
option: ダークサーモン色を使用する	color = 'darksalmon'
データフレームの列がどれだけ、分散しているか見る	df[col].var()
棒グラフをロージーブラウン色として描画する	plt.bar(データ列x, データ列y, color='rosybrown')
実行環境がLinuxか調べる	sys.platform.startswith('linux')
ファイルパスを読み込みモードとして開く]	open(filepath, mode='r')
列をセットに変換する	set(iterable)
日付時刻データの日付を見る	aDatetime.date()
今日をタプルにする	datetime.datetime.today().timetuple()
散布図の▲印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームのn行目まで取り出す	df[:n]
option: グラフの色をデピンクに指定する	color = 'deeppink'
ゼロ埋めされた論理値型の配列	np.zeros(要素数, dtype=np.int32)
折れ線グラフの色をオールドレースに指定する	plt.plot(データ列x, データ列y, color='oldlace')
ミディアムブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
カウンタの項目の出現回数	aCounter[element]
折れ線グラフのクロス印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
文字列が大文字か調べる	s.isupper()
変数を太文字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
option: ライトサーモンに色を設定する	color = 'lightsalmon'
散布図にrgbのバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ファイルパスを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
データフレームを破壊的に列で小さい順に整列する	df.sort_values(by=column, ascending=True, inplace=True)
バイトオーダを調べる	sys.byteorder
データフレームを列によって並べて、行を振り直す	df.sort_values(columns).reset_index(drop=True)
列を文字列リストに変換して、カンマによって連結する	','.join(map(str, iterable))
ファイルから1バイト、読み込む	f.read(1)
文字列を走査し正規表現にマッチするか見る	re.search(pattern, s)
xが一桁の正の数	0 <= x <= 9
タプルの要素を昇順に並べる	sorted(aTuple, reverse=False)
タプルの最後を使う	aTuple[-1]
文字列を青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
整数nの16進文字列	hex(n)[2:]
横棒グラフを真紅色として描画する	plt.barh(データ列x, データ列y, color='crimson')
グラフの使途を論文に変更する	sns.set(context='paper')
本日が火曜日かどうか	datetime.datetime.today().weekday() == 1
option: 暗い赤色を用いる	color = 'darkred'
y軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
散布図の上三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
option: ライトスチールブルーにフォントの色をする	color = 'lightsteelblue'
文字列は平仮名か	('ぁ' <= ch <= 'ん')
横棒グラフをブラック色を用いて描画する	plt.barh(データ列x, データ列y, color='black')
黒いダイアモンドマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: エンコーディングを文字コードtextにセットする	encoding = text
ピーチパフにヒストグラムの色を設定する	plt.hist(データ列, color='peachpuff')
最大値でデータ列の未入力値を置換する	ds.fillna(ds.max())
ゲインズボロ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
文字列中にひとつでも非英数字が含まれるかどうか調べる	any(not c.isalnum() for c in s)
カウンタの和集合	aCounter | aCounter2
横棒グラフをグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='green')
データフレームのリストカラムの欠損値をメディアンに設定する	df[aList].fillna(df[aList].median())
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームを千の位で丸める	df.round(-3)
ヒストグラムを真紅色で描画する	plt.hist(データ列, color='crimson')
赤いクロスマーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
文字列の先頭の不要な空白やタブを取り除く	s.lstrip()
ヒストグラムの色をホワイトスモークに変更する	plt.hist(データ列, color='whitesmoke')
データフレームのヒストグラムを縦横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
コマンドラインフラグの状態を確める	sys.flags
文字列をカンマで分割して文字列リストに変換する	s.split(',')
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
実線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
列をリストを境界値としてビン分割する	pd.cut(ds, aList)
option: グラフの色を濃いシアンに設定する	color = 'darkcyan'
列を等量でビン数nでビン分割する	pd.qcut(ds, n)
最頻値でデータ列のNaNを埋める	ds.fillna(ds.mode().iloc[0])
ファイルパスをオープンして]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
横棒グラフをネイビー色を使って描画する	plt.barh(データ列x, データ列y, color='navy')
ラベンダーブラッシュ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
TSVをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
大量のデータ列が正規分布に従うか調べる	scipy.stats.kstest(データ列, 'norm')
option: ライトブルー色を使用する	color = 'lightblue'
両端キューのn番目の要素	deq[n]
option: ロイヤルブルーにフォントの色を設定する	color = 'royalblue'
散布図の△マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
小数点数の双曲線正接	math.tanh(x)
変数を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
JSONLファイルにデータフレームをファイルを用いて保存する	df.to_excel(filename)
ラジアンの角度を求める	math.degrees(x)
部分集合かどうか確認する	aSet.issubset(aSet2)
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
option: リネンに色を設定する	color = 'linen'
データフレームから先頭のカラムを除く	df[df.columns[1:]]
線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
散布図をゴールド色を使って描画する	plt.scatter(データ列x, データ列y, color='gold')
文字列中に非アスキー文字があるか調べる	any(not c.isascii() for c in s)
データ列間の決定係数を算出する	sklearn.metrics.r2_score(データ列, データ列2)
２つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
データフレームのリストカラムの欠損値を平均で補う	df[aList].fillna(df[aList].mean())
リストとリストについて散布図を描き、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
ベクトルの計算を行う	import numpy as np
一点鎖線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dashbot')
列'A'と列'B'をキーとして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
標準出力の出力先がターミナルかどうか	os.isatty(sys.stdin.fileno())
逆双曲線正弦	math.asinh(x)
列の値でNaNを含めてデータフレームをグループ化する	df.groupby(column, dropna=False)
カラムのモード	ds.mode()
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
グラフの色を濃くする	sns.set(pallete='deep')
列の各要素に対して、predicateFuncがTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
線形回帰モデルの回帰変数を使う	model.coef_
黒い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
ヒストグラムをパレットトルコイズ色を用いて描画する	plt.hist(データ列, color='paleturquoise')
双方向キューの先頭にシーケンスの各要素を追加する	deq.extendleft(iterable)
option: ブルーバイオレットを使う	color = 'blueviolet'
データフレームからカラムを三つ選択する	df[[column, column2, column3]]
データフレームの列が正規分布からどの程度、歪んでいるか見る	df[col].kurt()
大バツマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
オレンジレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
黒い丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
耐火レンガにヒストグラムの色を設定する	plt.hist(データ列, color='firebrick')
カーキ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
ファイル名がテキストファイルか	filename.endswith('.txt')
赤い下三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
組の長さを知る	len(aTuple)
実数を3乗する	x ** 3
グリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
横棒グラフをプラム色を用いて描画する	plt.barh(データ列x, データ列y, color='plum')
データフレームの列をグループ化して、ヒストグラムを用いて見る	sns.histplot(df, x='列名', hue='カテゴリ名')
ダーク・スラテグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
文字列を走査し、正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
文字列の最初	s[0]
ゴールド色でヒストグラムを描画する	plt.hist(データ列, color='gold')
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
文字列内にアルファベットが含まれる	any(c.isalpha() for c in s)
何回まで再帰ができるかを知る	sys.getrecursionlimit()
数列とリストの散布図を描画して、右三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
赤い破線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ケンドールでデータフレームの相関行列	df.corr(method='kendall')
option: ミディアムスレートブルーを使う	color = 'mediumslateblue'
ミスティローズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームを'A'列によって並べる	df.sort_values(by='A')
ひとつでも非小文字が文字列中に含まれるかどうか確認する	any(not c.islower() for c in s)
option: ボックスチャートに平均を追記する	showmeans = False
option: フォントの色を青緑に指定する	color = 'turquoise'
文字列の無限の列	itertools.repeat(element)
バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x')
ディープスカイブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームを列によってまとめたグループを見る	df.groupby(column)
データフレームのカラムの文字列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
option: フォントの色をライトイエローに指定する	color = 'lightyellow'
数列を複数横に並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
nを符号なしでバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
正規分布として疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
縦棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
データフレームから重複する行を破壊的に消す	df.drop_duplicates(inplace=True)
データフレームを昇順に'A'列と'B'列によってソートする	df.sort_values(by=['A', 'B'], ascending=True)
回帰分析を部分的最小二乗法で行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
横棒グラフをミディアムターコイズ色として描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
データフレームを四捨五入して、整数型にする	df.round().astype(int)
データフレームを列によってソートして、下位を取り出す	df.sort_values(columns).tail(n)
option: フォントの色をネイビーにセットする	color = 'navy'
option: カラムの名前を自動的な連番に設定する	header = None
n＋n2	n + n2
折れ線グラフの大バツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
データフレームを各列毎にグループ化してカラムの最小値を計算する	df.groupby(column)[column2].min()
オプションで、出力先をファイルに指定する	file = sys.open(filename, 'w')
ヒストグラムの色をゴールドにセットする	plt.hist(データ列, color='gold')
タプルのn番目からn2番目の部分	aTuple[n:n2]
赤いダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
プロットのタイトルを変更する	plt.title('グラフの名称')
ファイルからディレクトリ名を求める	os.path.dirname(filepath)
option: ライトグレーにグラフの色を指定する	color = 'lightgray'
データフレームの列がxである行を選択する	df[df[column] == x]
rgbの▽マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: ミスティローズ色を使用する	color = 'mistyrose'
option: シャルトリューズにグラフの色を設定する	color = 'chartreuse'
日付時刻データが木曜日かどうか	aDatetime.weekday() == 3
文字列の右端から部分文字列を除く	s.rstrip(sub)
二つのデータフレームを異なる列をキーとして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
option: マーカーを丸に変える	marker = 'o'
数値を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
データフレームを'A'列によってまとめたグループを見る	df.groupby('A')
モデルの訓練を開始する	model.fit(説明変数, 目的変数)
グラフの描画で淡く色テーマを使う	sns.set(pallete='muted')
フクシア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
列を10の位で四捨五入する	ds.round(-1)
データフレームのリストカラムを1000の位で四捨五入して整数にする	df[aList].round(-3).astype(int)
配列を変形する	aArray.reshape(行数, 列数)
文字列内にひとつでもASCII文字が含まれる	any(c.isascii() for c in s)
カウンタの積集合演算する	aCounter & aCounter2
部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgray')
出力ストリームを一行ずつ読み込む	f.readline()
データフレームのカラムは何分か見る	df[col].dt.minute
横棒グラフをベージュ色として描画する	plt.barh(データ列x, データ列y, color='beige')
ファイルを開いて]、バイナリストリームを使う	open(filepath, mode='rb')
縦棒グラフをフローラルホワイト色として描画する	plt.bar(データ列x, データ列y, color='floralwhite')
option: フォントの色をミディアムスプリンググリーンに指定する	color = 'mediumspringgreen'
符号付きで整数nを長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
変数をアンダーライン付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
小数点数の余弦の逆数	math.acos(x)
散布図をダークカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
カテゴリで色分けして、カーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図をrgbの右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
プロットに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
折れ線グラフに左三角印を使用する	plt.plot(データ列x, データ列y, marker='<')
option: フォントの色をパールバイオレットレッドにセットする	color = 'palevioletred'
データフレームを列名リストによってソートして、更新する	df.sort_values(by=column, inplace=True)
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
データフレームを'A'列の値で集約して、列挙する	[(name, group) for name, group in df.groupby('A')]
集合にイテラブルの要素を追加する	aSet.update(iterable)
データフレームとしてTSVファイルを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
平均値付き箱ひげ図を描く	plt.boxplot(データ列, showmeans=True)
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
横棒グラフをラベンダー色を使って描画する	plt.barh(データ列x, データ列y, color='lavender')
文字列をコロンを用いて区切り、、列挙する	s.split(':')
組の合計値を算出する	sum(aTuple)
データフレームの列の値がリストに含まれる行を抽出する	df[df[column].isin(aList)]
リストが空でないか判定する	len(aList) != 0
散布図の印を▲印にする	plt.scatter(データ列x, データ列y, marker='^')
サーモン色でヒストグラムを描画する	plt.hist(データ列, color='salmon')
データフレームを列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
折れ線グラフに赤い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
三角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
文字列中に部分文字列が含まれない	sub not in s
データフレームを列で昇順に並べ直す	df.sort_values(by=column, ascending=True)
線グラフの色をネイビーにセットする	plt.plot(データ列x, データ列y, color='navy')
折れ線グラフをホワイト色として描画する	plt.plot(データ列x, データ列y, color='white')
カラムの中に文字列があるかテストする	ds.isin([value])
グラフの補足を表示する	plt.legend()
オリベドラブにヒストグラムの色をセットする	plt.hist(データ列, color='olivedrab')
ゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
ふたつの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
option: グラフの色をラベンダーブラッシュに変更する	color = 'lavenderblush'
余弦	math.cos(x)
マッピングのキー一覧	list(aDict)
一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
リストと数列についての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
データフレームで、列の重複を見る	df.duplicated(subset=column)
option: マゼンタにグラフの色を設定する	color = 'magenta'
タプルの中の最も大きい値	max(aTuple)
マゼンタにヒストグラムの色を変更する	plt.hist(データ列, color='magenta')
リストと数列について散布図を描画して、文字列という短い説明用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
英文字から一つランダムに選ぶ	random.choice(string.ascii_uppercase)
折れ線グラフをミディアムアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
カウンタから最も頻出な項目の件数	aCounter.most_common()[1]
グラフを暗くする	sns.set(pallete='dark')
Pandasでデータ列を日付データに変換する	pd.to_datetime(ds)
集合の全ての要素が別の集合に含まれる	aSet.issubset(aSet2)
データフレームのNaNをxにする	df.fillna(x)
小文字を全部使う	string.ascii_lowercase
リストとリストを接続する	aList + aList2
データフレームを表示するときヘッダー行を左寄せにセットする	pd.set_option('colheader_justify', 'left')
閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
rgbのポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: データ型を指定する	dtype = np.int32
ベクトルのユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
折れ線グラフの左三角印を青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
リストと配列について散布図をプロットして、左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
縦棒プロットを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
実数のアークコサインを求める	math.acos(x)
二つの集合はセットと交わりを持たないか調べる	aSet.isdisjoint(aSet2)
オブジェクトは辞書型のインスタンスか調べる	isinstance(obj, dict)
シーケンスから双方向キューを作る	collections.deque(iterable)
日付データは日付データより先	aDate < aDate2
折れ線グラフの色をチョコレートにセットする	plt.plot(データ列x, データ列y, color='chocolate')
組をnから番号付けする	enumerate(aTuple, start=n)
データフレームを表示するとき小数点以下の表示精度をn桁にセットする	pd.set_option('precision', n)
データフレームの未入力値がある行を落とす	df.dropna()
タイムスタンプデータが土曜日か判定する	aDatetime.weekday() == 5
タン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
下三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
文字列の最初から部分文字列を探す	s.find(sub)
カラーバーを水平で付ける	plt.colorbar(orientation='horizontal')
横棒グラフをインディアンレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='indianred')
折れ線グラフの色をダークオリーブグリーンにする	plt.plot(データ列x, データ列y, color='darkolivegreen')
ミディアムターコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
ライトグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightgray')
ポイント印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
両端キューの最初に要素をつけ加える	deq.appendleft(element)
２つのデータフレームを列'A'と列'B'をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
マッピングをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
データフレームのリストカラムの相関行列をヒートマップとして描画する	sns.heatmap(df[aList].corr())
データフレームの列がx、かつ列がx2である行を取り出す	df[(df[column] == x) & (df[column2] == x2)]
データフレームのリストカラムの値をValueMapで置き換える	df[aList].replace(ValueMap)
option: 欠損値を先頭に来るようにする	na_position = 'first'
ロバスト分類モデルを用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームのリスト列の値が未入力値	df[aList].isna()
改行文字	'\n'
実数が負の数かどうか調べる	x < 0
8進文字列を整数に変換する	int(s, 8)
赤い大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
option: 改行をセパレータで用いる	sep = '\n'
文字列内に大文字が含まれるかどうか	any(c.isupper() for c in s)
option: 菱形マーカーを使う	marker = 'D'
ヒストグラムの描いて、正規化する	plt.hist(データ列, density=True)
データ列を箱ひげ図として可視化する	plt.boxplot(データ列)
リストと数列の散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
nをn2で割った値の切り上げ	(n + n2 - 1) // n2
ヒストグラムを暗い赤色を用いて描画する	plt.hist(データ列, color='darkred')
データフレームの各グループごとの標準偏差	df.groupby(column).std()
第一コマンド引数	sys.argv[1]
データフレームのカラムのNaNを最頻値に指定する	df[col].fillna(df[col].mode().iloc[0])
浮動小数点数を十の位で四捨五入する	round(x, -1)
タプル中の要素が全て真かどうか	all(aTuple)
淡いピンク色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
ロバスト推定を用いてクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
既存の配列を元にして全要素が初期値の配列	np.full_like(aArray, 初期値)
二つの変数をスラッシュで区切って出力する	print(value, value2, sep='/')
データ列がどれだけ、分散しているか確認する	ds.var()
棒グラフをデピンク色として描画する	plt.bar(データ列x, データ列y, color='deeppink')
オブジェクトがプロパティを持つ	hasattr(obj, プロパティ名)
マッピングをJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
横棒グラフをプロットしてラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
ダークオリーブグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
行列を横ベクトルに変形する	aArray.reshape(1, -1)
回帰直線データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
option: 分割記号をコロンにする	sep = ':'
データフレームのリスト列の最頻値	df[aList].mode()
組の最初	aTuple[0]
棒グラフをライトコーラル色として描画する	plt.bar(データ列x, データ列y, color='lightcoral')
線グラフをオールドレース色を用いて描画する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームで、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
データフレームからカラムを二つのみ選択する	df[[column, column2]]
TSVファイルファイル名が	filename.endswith('.tsv')
option: ダークマゼンタ色を用いる	color = 'darkmagenta'
リストとデータ列についての散布図に黒い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ホワイト色でヒストグラムを描画する	plt.hist(データ列, color='white')
option: フォントの色をライトスレイグレーに変更する	color = 'lightslategray'
データフレームの列をドロップする	df.drop(column, axis=1)
新しい回帰木モデルを準備する	model = sklearn.tree.DecisionTreeRegressor()
option: ライトグレーを使用する	color = 'lightgray'
データフレームの列が正規表現文字列にマッチしないデータを抽出する	df[not df[column].str.match(s)]
データフレームの指定された列を配列にする	df[column].values
バリーウッドにヒストグラムの色を指定する	plt.hist(データ列, color='burlywood')
データフレームを複数の列にグループ化して列挙する	[(name, group) for name, group in df.groupby(columns)]
棒グラフをパールバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='palevioletred')
棒グラフをアイボリー色として描画する	plt.bar(データ列x, データ列y, color='ivory')
書式をタプルでフォーマットする	formatText.format_map(aDict)
列の値でデータフレームを集計し、、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
データフレームのカラムの値をValueMapで置き換える	df[col].replace(ValueMap)
散布図の右三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
オブジェクトがあるクラスのインスタンスか調べる	isinstance(obj, クラス)
option: グラフの色をダークブルーに設定する	color = 'darkblue'
option: 色をシアンに設定する	color = 'cyan'
バイオレット色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
プロットの縦軸を対数に変更する	plt.yscale('log')
option: 色をパープルに設定する	color = 'purple'
ビン数nとして配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
散布図に黒い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
今日は何曜日か知る	datetime.datetime.today().weekday()
折れ線グラフのバツ印を青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
option: グレーにグラフの色を設定する	color = 'gray'
データフレームを各列と列の組み合わせ毎にグループ分けして、個数を求める	df.groupby([column, column2], as_index=False).count()
折れ線グラフのクロス印の色を指定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
NaNを使用する	math.nan
L1ノルムを用いてデータを正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
散布図を黒い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
一点鎖線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
上限から下限の範囲でヒストグラムをプロットする	plt.hist(データ列, range=(start, end))
折れ線グラフの色をスラグレーにセットする	plt.plot(データ列x, データ列y, color='slategray')
文字列中の部分文字列の登場を数える	s.count(sub)
ヒストグラムの色を青緑にセットする	plt.hist(データ列, color='teal')
データフレームを二つの列を用いて昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
重複をデータフレームから破壊的に消す	df.drop_duplicates(inplace=True)
紺碧色として線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
論文用にグラフを設定する	sns.set(context='paper')
ヒストグラムの色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
パターンで文字列を分割する	re.split(pattern, s)
第一引数で指定したファイル名	sys.argv[1]
option: 色をライトブルーに設定する	color = 'lightblue'
今日が土曜日	datetime.datetime.today().weekday() == 5
データ列とリストについての散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
棒グラフをラベンダー色を使って描画する	plt.bar(データ列x, データ列y, color='lavender')
追加できるようにファイルをオープンする]	open(filepath, mode='a')
データフレームをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
タプルを展開して表示する	print(*aTuple)
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
配列が何次元か調べる	aArray.ndim
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, N)
タイムスタンプデータの時間	aDatetime.hour
赤い三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームのリスト列の中央値を計算する	df[aList].median()
データフレームの中にある文字列と日付データの合計を数える	df.isin([value, value2]).sum()
ファイルパスをオープンして]追加ストリームを使う	open(filepath, mode='a')
散布図に星印を使う	plt.scatter(データ列x, データ列y, marker='*')
棒グラフをピンク色を使って描画する	plt.bar(データ列x, データ列y, color='pink')
オブジェクトが関数	callable(obj)
辞書の項目名の値	aDict[key]
データフレームから型のカラムを抽出する	df.select_dtypes(ty)
棒グラフをダークブルー色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
円グラフのパーセントを表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
シーケンスを無限に繰り返す	itertools.cycle(iterable)
ブランチドアーモンド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
オブジェクトはリスト型かどうか	isinstance(obj, list)
列によってデータフレームをソートし、、更新する	df.sort_values(by=column, inplace=True)
データフレームの列のユニークな要素数	df[col].nunique()
option: スキップするフッタをnにする	skipfooter = n
列を用いてデータフレームを並べて、上位n件を取り出す	df.sort_values(columns).head(n)
パラメータがマイナス無限大に近づくとき、数式の極限値を求める	sympy.limit(e, z, -oo)
ヒストグラムをパウダーブルー色を用いて描画する	plt.hist(データ列, color='powderblue')
nが3で割り切れる	n % 3 == 0
セットに値を追加する	aSet.add(element)
線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
横棒グラフの色をrgbに指定する	plt.barh(ラベル列, データ列, color=rgb)
黒い大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
２つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
時計回りに円グラフをプロットする	plt.pie(データ列, startangle=90, counterclock=False)
文字列が文字列リストのいづれかどうかテストする	s in aStringList
リストとイテラブルについて散布図を描画し、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフを青い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
折れ線グラフの色をスラグレーにセットする	plt.plot(データ列x, データ列y, color='slategrey')
折れ線グラフの▽印の線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
文字列のの開始位置から終了位置までの間に部分文字列がいくつかあるか調べる	s.count(sub, start, end)
フォーマットとしてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
折れ線グラフをチョコレート色を用いて描画する	plt.plot(データ列x, データ列y, color='chocolate')
線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
二つの列の値によってデータフレームをグループ化し要約統計量を求める	df.groupby(['A', 'B']).describe()
紺色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
バリーウッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
rgbの左三角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: ターコイズを使う	color = 'turquoise'
ベクトルにはいくつ要素が含まれるか調べる	aArray.size
レベッカパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームの中にいくつ欠損値が含まれるか数える	df.isna().sum()
キューの大きさ	len(deq)
積み上げ横棒プロットを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
行列の要素ごとの積を求める	np.multiply(aArray, aArray2)
変数を白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
本日のローカルな日付時刻	datetime.datetime.today()
文字列は識別子名か	s.isidentifier()
散布図の菱形マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
青い実線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
部分文字列が文字列中に含まれるか調べる	sub in s
文字列の接尾辞が部分文字列かどうか確認する	s.endswith(sub)
黒い左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
赤い丸マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
チョコレート色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
文字列が英数字かどうか確認する	s.isalnum()
散布図をデピンク色を使って描画する	plt.scatter(データ列x, データ列y, color='deeppink')
option: 色をパパイヤウィップに設定する	color = 'papayawhip'
整数を二乗する	x ** 2
文字列を改行によって区切る	s.splitlines()
折れ線グラフをダークグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgreen')
ファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
データフレームのリスト列の中にある文字列と文字列の個数を数える	df[aList].isin([value, value2]).sum()
数列とイテラブルについての散布図に凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
全要素を1で初期化した行列	np.ones(要素数, dtype=np.int)
箱ヒゲ図を横に並べて描画する	plt.boxplot([データ列, データ列])
t-SNEとしてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
option: グラフの色をダークオレンジに指定する	color = 'darkorange'
カウンタの最も頻出なキー	aCounter.most_common()[0]
option: 印を▲に変更する	marker = '^'
ヒストグラムの色をローングリーンに変更する	plt.hist(データ列, color='lawngreen')
アンダーライン付きで文字列を出力する	print(f'\033[4m{value}\033[0m')
配列の行列式を計算する	np.linalg.det(aArray)
option: ダークゴールデンロッドにグラフの色を設定する	color = 'darkgoldenrod'
option: グラフの種類を点線に変更する	linestyle = 'dotted'
行列演算をする	import numpy as np
淡いピンク色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
散布図の丸印の色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
縦棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
キーがマッピング上で未定義	key not in aDict
リストとリストの散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームのNaNをモードに設定する	df.fillna(df.mode().iloc[0])
option: 色をスカイブルーに設定する	color = 'skyblue'
文字列をdatetime64型に変換する	pd.to_datetime(s)
散布図をブラウン色として描画する	plt.scatter(データ列x, データ列y, color='brown')
リストのn番目からn2番目	aList[n:n2]
ヒストグラムを点線に変更する	plt.hist(データ列, linestyle='dotted')
option: グラフの色をスラグレーに変更する	color = 'slategray'
option: トマトを使用する	color = 'tomato'
option: 書き込み用に設定する	mode = 'w'
散布図に赤い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
散布図の下三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
列を文字列リストに変換して空白によって連結する	' '.join(map(str, iterable))
エクセルデータファイルからを読み込む	pd.read_excel(filename)
データフレームをに箱ひげ図として描画する	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: 色をダークターコイズに設定する	color = 'darkturquoise'
数列とデータ列の散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
縦棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
行列の形状	aArray.shape
データフレームの列の欠損値をメディアンで埋める	df[col].fillna(df[col].median())
折れ線グラフの色をミディアムスプリンググリーンにセットする	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ヒストグラムをライトイエロー色を使って描画する	plt.hist(データ列, color='lightyellow')
データ列の各データ値の出現数を算出する	ds.value_counts()
実数が有限かどうか調べる	math.isfinite(x)
option: 青を使用する	color = 'blue'
nが3の倍数か判定する	n % 3 == 0
カテゴリ別で色分けして、データフレームの全カラムの相関を図示する	sns.pairplot(df, hue='カテゴリ列')
データフレームを列でグループ分けして列の要約統計量を求める	df.groupby(column).describe()[column2]
折れ線グラフの色をターコイズに指定する	plt.plot(データ列x, データ列y, color='turquoise')
散布図をディムグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dimgray')
異なるカラムをキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
辞書上でキーが定義済みか調べる	key in aDict
パーセプトロンを用いてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
黒い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
リストのn番目のの要素を求める	aList[n]
0で全要素を初期化した配列	np.zeros(要素数)
線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
折れ線グラフのポイント印の大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
オブジェクトがn回繰り返すイテラブルを得る	itertools.repeat(element, n)
度数分布図を３つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ファイルパスを追加できるようにUTF8で開く]	open(filepath, mode='a', encoding='utf-8')
1行標準入力から改行なしで読む	sys.stdin.readline().rstrip()
option: ドジャーブルーに色を設定する	color = 'dodgerblue'
データフレームのリストカラムを四捨五入する	df[aList].round()
option: ゴーストホワイトにグラフの色を指定する	color = 'ghostwhite'
データフレームから重複を取り除く	df.drop_duplicates()
データフレームのリストカラムのヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
ヒストグラムをレモンシフォン色を使って描画する	plt.hist(データ列, color='lemonchiffon')
2つのリストを順にプリントする	print(value, value2)
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
データフレームの中の列を等しい量になるようにビン数nを使って分割する	pd.qcut(df[col], n)
平均値でデータフレームのカラムのNaNを埋める	df[col].fillna(df[col].mean())
option: フォントの色をバリーウッドに設定する	color = 'burlywood'
タブ区切りのファイルをカラムの名前を指定せず読み込む	pd.read_csv(filename, header=None)
ミディアムスプリンググリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
データフレームを各列毎に集計し、、列の平均値を求める	df.groupby(column)[column2].mean()
折れ線グラフに青い△印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
option: コーンズシルクにグラフの色を設定する	color = 'cornsilk'
データフレームから指定された２つの列を抽出する	df[[column, column2]]
二ベクトル間のユークリッド距離	math.dist(point, point2)
改行なしに二つの変数をプリントする	print(value, value2, end='')
カラムの中にいくつ文字列があるか求める	ds.isin([value]).sum()
データフレームのカラムのNaNを最大値に設定する	df[col].fillna(df[col].max())
書き込みできるようにファイルを開く]	open(filepath, mode='w')
文字列はカタカナ	('ァ' <= ch <= 'ン')
ファイルをバイナリ書き込み用にオープンして]、fとする	f = open(filepath, mode='wb')
クラスは名前付きタプルか調べる	issubclass(C, tuple)
データフレームの数値を丸める	df.round()
クラス分類の偽陽性をヒートマップで調べる	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
グラフにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
値を両端キューの先頭から取り出す	deq.popleft()
データフレームをJSONLファイルに行を付けずに書き込む	df.to_csv(filename, index=None)
JSON文字列をデータにする	json.loads(b.decode('unicode-escape'))
データフレームの欠損値を直前の値で補う	df.fillna(method='ffill')
縦棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
リストをnから順序付けする	enumerate(aList, start=n)
option: パールゴールデンロッドに色を指定する	color = 'palegoldenrod'
option: インディアンレッドを使う	color = 'indianred'
リストと数列についての散布図にrgbの菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ロイヤルブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
棒グラフをスラグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='slategray')
データフレームを確認する	df.head()
折れ線グラフの色を真紅に変更する	plt.plot(データ列x, データ列y, color='crimson')
データフレームのカラムの中にある日付データと日付データの合計を数える	df[col].isin([value, value2]).sum()
双曲線正弦の逆数	math.asinh(x)
ヒストグラムをローングリーン色を使って描画する	plt.hist(データ列, color='lawngreen')
日付データが月曜日かどうか調べる	aDate.weekday() == 0
項目名ワード引数として辞書に更新する	aDict.update(**kwargs)
縦棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
オブジェクトはタプルか調べる	isinstance(obj, tuple)
折れ線グラフの三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
エラーなく辞書から項目名の値を得る	aDict.get(key, None)
耐火レンガ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='turquoise')
多次元データをMSDを用いてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
青い破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームで、列と列の重複をドロップする	df.drop_duplicates(subset=[column, column2])
文字列中にひとつでも非数字が含まれるかどうか調べる	any(not c.isdigit() for c in s)
データフレームのカラムを10の位で丸めて整数型にする	df[col].round(-1).astype(int)
カラムのメディアンを算出する	ds.median()
nがn2以下、それか、n3以上	n <= n2 or n >= n3
データ列の平均値を求める	ds.mean()
ヒストグラムをダーク・スラテグレー色を使って描画する	plt.hist(データ列, color='darkslategrey')
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
散布図をロージーブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
範囲からベクトル	np.linspace(最小値, 最大値, 要素数)
パールゴールデンロッドにヒストグラムの色を指定する	plt.hist(データ列, color='palegoldenrod')
実数に浮動小数点数を加算する	x + y
縦棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
option: グラフの色をナバホホワイトにセットする	color = 'navajowhite'
画像ファイルとしてプロットを保存する	plt.savefig('foo.png')
分子n、分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
リストとリストについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
辞書から計数器を作る	collections.Counter(aDict)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ヒストグラムを紺碧色を使って描画する	plt.hist(データ列, color='azure')
option: カーキに色を変更する	color = 'khaki'
折れ線グラフの色をダークサーモンに指定する	plt.plot(データ列x, データ列y, color='darksalmon')
棒グラフをクリムゾン色を用いて描画する	plt.bar(データ列x, データ列y, color='crimson')
縦軸だけ目盛線	plt.grid(axis='y')
新しいガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
リストのヒストグラムをプロットする	plt.hist(データ列)
折れ線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
サブクラスかどうか調べる	issubclass(サブクラス, クラス)
線グラフをパールバイオレットレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データ列とリストについて散布図を描画してマーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
集合から別の集合との共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
やわらかい青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
カラムの未入力値を中央値で埋める	ds.fillna(ds.median())
横棒グラフを紺色を使って描画する	plt.barh(データ列x, データ列y, color='darkblue')
option: ポイントマーカーを用いる	marker = '.'
ターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
option: ミディアムターコイズにフォントの色を変更する	color = 'mediumturquoise'
データ列の割合を円グラフとして可視化する	plt.pie(データ列, startangle=90)
ヒストグラムの色をディープスカイブルーに変更する	plt.hist(データ列, color='deepskyblue')
実線を使って配列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
タイムスタンプデータをn分前にする	aDatetime - datetime.timedelta(minutes=n)
黒い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
nを十六進数表記に変換する	hex(n)
回帰分析をアンサンブル学習を用いて行う	sklearn.ensemble.VotingRegressor()
predicateFuncが真となるシーケンスの要素	itertools.dropwhile(predicateFunc, iterable)
データ列の折れ線グラフを左三角印で描画する	plt.plot(データ列x, データ列y, marker='<')
option: スカイブルーを使用する	color = 'skyblue'
option: ライトグレーを使う	color = 'lightgrey'
折れ線グラフの下三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
折れ線グラフをミディアムスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ラベンダーブラッシュ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
要素を両端キューの最後から削除する	deq.pop()
数が正の数か	x > 0
二進対数を算出する	math.log2(x)
散布図をピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='pink')
データフレームを昇順にインデックスによって並べる	df.sort_index(ascending=True)
散布図をオリーブ色として描画する	plt.scatter(データ列x, データ列y, color='olive')
数値をパラメータについて微分する	sympy.diff(e, z)
本日が水曜日かどうか	datetime.datetime.today().weekday() == 2
ラインの線の種類を破線にする	plt.plot(データ列x, データ列y, linestyle='dashed')
リストが全て真かどうか	all(aList)
ゼロ埋めされた配列を作る	np.zeros(要素数)
オブジェクトの属性の値を値に設定する	setattr(obj, プロパティ名, 値)
紺色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
カウンタのキー数	len(aCounter)
実数以上の最小の整数を求める	math.ceil(x)
文字列のn番目の文字	s[n]
散布図を下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v')
散布図をミディアムブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
散布図に丸マーカーを用いる	plt.scatter(データ列x, データ列y, marker='o')
t-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
列から配列を作る	np.array(iterable)
折れ線グラフの三角印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
モカシン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
カウンタの文字列を増やす	aCounter[element] += 1
アルファベットを全て使う	string.ascii_letters
線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
縦棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
rgbのクロスマーカーを配列とデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームを複数の列でまとめたグループ	df.groupby(columns)
n進数の文字列をバイト列にする	int(s, n).to_bytes(length=bytesize, byteorder='big')
文字列の右側	s[-1]
データフレームの列の欠損値を最小値で埋める	df[col].fillna(df[col].min())
データフレームの列が文字列で終わる行を選ぶ	df[df[column].str.endswith(s)]
データフレームをカラムの名前を付けずにJSONLファイルに保存する	df.to_csv(filename, header=None)
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategrey')
数列とリストについての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
クラス分類のF値を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
nを十六進文字列に変換する	hex(n)[2:]
縦棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
option: ミディアムスレートブルーにグラフの色をする	color = 'mediumslateblue'
折れ線グラフのクロスマーカーの太さを変える	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
nの3乗	n ** 3
ヒストグラムの色をパウダーブルーにする	plt.hist(データ列, color='powderblue')
変数をマゼンタにする	f'\033[35m{value}\033[0m'
入力ストリームを全部読む	f.read()
折れ線グラフの色をブランチドアーモンドにセットする	plt.plot(データ列x, データ列y, color='blanchedalmond')
ミントクリーム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
散布図の▽マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
カラーマップでヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
横棒グラフをペルー色を使って描画する	plt.barh(データ列x, データ列y, color='peru')
option: グラフの色をホワイトに設定する	color = 'white'
リストを円グラフにする	plt.pie(データ列, startangle=90)
配列を等しい量になるようにビン数nで分割する	pd.qcut(aArray, n)
1行だけ標準入力から読み込む	sys.stdin.readline()
線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
option: イエローグリーンにフォントの色を変更する	color = 'yellowgreen'
option: ゲインズボロにグラフの色を指定する	color = 'gainsboro'
リストと数列の散布図に黒い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
データフレームのリスト列の未入力値をxで埋める	df[aList].fillna(x)
リストの末尾を使う	aList[-1]
バイアスなしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
配列を元にして全要素が1のベクトルを初期化する	np.ones_like(aArray)
配列の列ごとの平均	np.mean(aArray, axis=0)
データフレームのリスト列のどの値が頻出か見る	df[aList].mode()
白色で文字列をプリントする	print(f'\033[37m{value}\033[0m')
配列をビニングする	pd.cut(aArray, aList)
線グラフの色をミディアムターコイズに変更する	plt.plot(データ列x, データ列y, color='mediumturquoise')
オレンジ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
nがn2か	n == n2
マッピングのキーとその項目を列挙する	aDict.items()
２つの文字列が同じ	s == s2
本日の日	datetime.datetime.today().day
部分文字列が文字列の開始位置からと終了位置の間に存在するか調べる	s.find(sub, start, end) != -1
データフレームのリスト列の尖度	df[aList].skew()
nの無限なリスト	itertools.repeat(n)
option: 3二ビット整数型を用いる	dtype = np.int16
option: 紺を使う	color = 'darkblue'
データフレームのカラムの欠損値を前の行の値にする	df[col].fillna(method='ffill')
縦棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
データフレームのカラムを並べてボックスチャートにする	plt.boxplot([df['カラム'], df['カラム']])
リストと配列について散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
文字列を太字化する	f'\033[1m{value}\033[0m'
option: ミディアムシアグリーンにグラフの色を指定する	color = 'mediumseagreen'
半透明の破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
xの小数点以下'5'桁までプリントする	print(':.5f'.format(x))
リストの各要素を関数に適用した結果で並べる	sorted(aList, key=func)
データフレームの列の名前の一覧	df.columns
データ列の正規分布に対する左右対称性	ds.kurt()
折れ線グラフの上三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
配列の内積を使う	np.dot(aArray, aArray2)
回帰モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
散布図を星マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='*')
カウンタの値一覧	aCounter.keys()
データフレームの中にいくつ日付データがあるかカウントする	df.isin([value]).sum()
部分文字列か確認する	sub in s
イテラブルの重複コンビネーションを求める	itertools.combinations_with_replacement(iterable, n)
黒い右三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
変数を緑色化する	f'\033[32m{value}\033[0m'
データフレームを表示するとき、カラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
赤い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='r')
青い一点鎖線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームを２つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
文字列がタプルに含まれないか	element not in aTuple
データフレームの列名一覧で指定された列を取り除く	df.drop(columns, axis=1)
二つのデータフレームを異なる列をキーにして結合する	pd.merge(df, df2, left_on='A', right_on='B')
オプションで標準出力を使用する	file = sys.stdout
線グラフをライトブルー色を使って描画する	plt.plot(データ列x, データ列y, color='lightblue')
珊瑚色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
ケンドールでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
横棒グラフをロイヤルブルー色として描画する	plt.barh(データ列x, データ列y, color='royalblue')
Pandasでデータフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
線グラフをティール色で描画する	plt.plot(データ列x, データ列y, color='teal')
オブジェクトがバイト列クラスのインスタンス	isinstance(obj, bytes)
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームの中の列をn個にビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの末尾を確認する	df.tail()
option: 色をオーキッドに設定する	color = 'orchid'
浮動小数点数から実数を減算する	x - y
option: グラフの色をスラグレーにする	color = 'slategrey'
rgbの△マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの色をミディアムオーキッドにセットする	plt.plot(データ列x, データ列y, color='mediumorchid')
棒グラフを小麦色色を使って描画する	plt.bar(データ列x, データ列y, color='wheat')
折れ線グラフでイテラブルの推移を可視化する	plt.plot(range(len(データ列)), データ列)
タイムスタンプデータの日数	aDatetime.day
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
x座標だけグリッド線	plt.grid(axis='x')
横軸の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
散布図のマーカーの色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
タイムスタンプデータからn日を減算する	aDatetime - datetime.timedelta(days=n)
線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
パラメータについて数式の微分を行う	sympy.diff(e, z)
フォレストグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
option: ペールグリーン色を用いる	color = 'palegreen'
線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
option: 小麦色にグラフの色を設定する	color = 'wheat'
データフレームを表示するとき、折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
データフレームの列の値はNaNか調べる	df[col].isna()
折れ線グラフの菱形マーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ヒストグラムをオレンジレッド色として描画する	plt.hist(データ列, color='orangered')
茶色色を用いてヒストグラムを描画する	plt.hist(データ列, color='brown')
折れ線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='gray')
第二コマンド引数を知る	sys.argv[1]
nからn2までのひとつ飛ばしの整数リスト	list(range(n, n2+1, 2))
option: グラフの色をダークスラテグレーにセットする	color = 'darkslategray'
option: サンディーブラウンを使う	color = 'sandybrown'
散布図をライトスチールブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
日付データからn時間分減らす	aDate - datetime.timedelta(hours=n)
列をダミー変数にする	pd.get_dummies(iterable)
数値の変数を数式で置き換える	e.subs(z, e2)
大文字と小文字を交換する	s.swapcase()
折れ線グラフの色をホワイトに指定する	plt.plot(データ列x, データ列y, color='white')
アクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
黒いバツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフの星マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
ヒストグラムでデータ列を描画する	plt.hist(データ列)
option: グラフの色をブルーバイオレットに指定する	color = 'blueviolet'
二つの集合の差集合	aSet.difference(aSet2)
ファイルをUTF8としてオープンする]	open(filepath, encoding='utf-8')
インディゴ色でヒストグラムを描画する	plt.hist(データ列, color='indigo')
折れ線グラフの色をディムグレーにセットする	plt.plot(データ列x, データ列y, color='dimgray')
線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
散布図をコーンズシルク色を使って描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
データフレームのデータ型一覧	df.dtypes
n個にデータフレームの中のカラムをビン分割する	pd.cut(df[col], n)
ひとつでも非空白が文字列中に含まれるか調べる	any(not c.isspace() for c in s)
黒い左三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='<', c='k')
折れ線グラフの左三角マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
列をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, on=column, how='inner')
option: グラフの色をライムに変更する	color = 'lime'
環境の名前	sys.platform
レモンシフォン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
日付データからn日を引く	aDate - datetime.timedelta(days=n)
スカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
データフレームのリスト列のNaNを最大値に設定する	df[aList].fillna(df[aList].max())
実数のn乗を求める	pow(x, n)
折れ線グラフに赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
option: グラフの色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
棒グラフを黄色色を使って描画する	plt.bar(データ列x, データ列y, color='yellow')
パレットトルコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
option: 線幅を設定する	linewidth = 3.0
rgbの大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
黒い上三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームの全列の相関を可視化する	sns.pairplot(df)
データフレームの内の列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
要素は集合に含まれないか判定する	element not in aSet
xの小数点以下'3'桁までプリントする	print(':.3f'.format(x))
スカイブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
行列の分散を求める	np.var(aArray)
小数点数を切り下げて整数に変換する	math.floor(x)
ファイル全体をリストにする	[s.strip() for s in f.readlines()]
配列とイテラブルについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
タプルにタプルの値を更新する	aDict.update(aDict2)
文字列を紫色でプリントする	print(f'\033[35m{value}\033[0m')
二つのデータフレームを縦向きに連結する	pd.concat([df, df2], axis=0)
折れ線グラフをオリーブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olive')
多次元尺度構成法で多次元データを濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
option: マーカーを左三角に指定する	marker = '<'
文字列を下線付き化する	f'\033[4m{value}\033[0m'
データフレームのインデックスの名前をまとめて、nameからname2に変更する	df.rename(index={name: name2})
option: 丸マーカーを用いる	marker = 'o'
綺麗なグラフを描画する	import seaborn as sns
グレー色でヒストグラムを描画する	plt.hist(データ列, color='grey')
列のユニークな要素	ds.unique()
散布図をアイボリー色として描画する	plt.scatter(データ列x, データ列y, color='ivory')
行列の行ごとの合計	np.sum(aArray, axis=1)
赤い点線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
色付きの破線としてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
今日の日付時刻	datetime.datetime.now()
カテゴリ列で色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
レベッカパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ファイルの拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
分割数nとして配列をビニングする	pd.cut(aArray, n)
ファイルパスのファイル名	os.path.basename(filepath)
option: エンコーディングをBOM付きに変更する	encoding = 'utf_8_sig'
折れ線グラフをレモンシフォン色として描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
数式の積分を行う	sympy.integrate(e)
Pandasで、データフレームのカラムを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
散布図をバリーウッド色として描画する	plt.scatter(データ列x, データ列y, color='burlywood')
辞書のコピーを作る	dict(aDict)
配列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
ヒストグラムの色をマルーンにする	plt.hist(データ列, color='maroon')
文字列の中の大文字・小文字を無視して正規表現による全マッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
配列とリストの散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
日付時刻データをISO書式の文字列に変換する	aDatetime.isoformat()
nまでの偶整数列を作る	list(range(2, n, 2))
データフレームがどれだけ、分散しているか見る	df.var()
ファイルパスを読み込みできるように開く]	open(filepath, mode='r')
箱ひげ図をプロットし、、平均線を加える	plt.boxplot(データ列, meanline=True)
ヒストグラムを実線に設定する	plt.hist(データ列, linestyle='solid')
データフレームのリストカラムを四捨五入して、整数型にする	df[aList].round().astype(int)
タプルと組を連結する	aTuple + aTuple2
日付データの日	aDate.day
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
浮動小数点数の三乗	x ** 3
整数nを8進表現に変換する	oct(n)
折れ線グラフの右三角印を青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ファイルからバイナリストリームを開いて]、fとする	f = open(filepath, mode='rb')
文字列の終了位置以前に部分文字列がないか	s.find(sub, 0, end) == -1
折れ線グラフをカデットブルー色として描画する	plt.plot(データ列x, データ列y, color='cadetblue')
線グラフをコーンフラワーブルー色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームからランダムに重複ありでn行をサンプリングする	df.sample(n, replace=True)
データフレームの列の各値の出現数を算出する	df[col].value_counts()
文字列の開始位置から終了位置の間で部分文字列の出現をカウントする	s.count(sub, start, end)
n個分右にスタックの順をローテンションする	deq.rotate(n)
ヒストグラムの色をダーク・スラテグレーに指定する	plt.hist(データ列, color='darkslategrey')
紺色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
正規表現を事前に複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ダークグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
折れ線グラフの右三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
文字列中の部分文字列を新しい文字列に全部置き換える	s.replace(sub, newsub)
主成分分析で多次元データをパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
option: namesを列の名前に設定する	names = names
option: ホワイトスモーク色を使用する	color = 'whitesmoke'
散布図をダークオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
散布図を紺色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
散布図を四角印で描画する	plt.scatter(データ列x, データ列y, marker='s')
データフレームの中に日付データがあるか調べる	df.isin([value])
option: チョコレート色を用いる	color = 'chocolate'
部分文字列が文字列の開始位置と終了位置の間にあるかどうか調べる	s.find(sub, start, end) != -1
データフレームの中のカラムを中央値でビン分割する	pd.qcut(df[col], 2)
横棒グラフをカーキ色として描画する	plt.barh(データ列x, データ列y, color='khaki')
表データを二つの列によってまとめた表を求める	df.groupby(['A', 'B'])
アイボリー色としてヒストグラムを描画する	plt.hist(データ列, color='ivory')
棒グラフをミッドナイトブルー色として描画する	plt.bar(データ列x, データ列y, color='midnightblue')
データフレームのNaNを中央値で置き換える	df.fillna(df.median())
散布図の左三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
イテラブルの各要素を関数でフィルタする	map(func, iterable)
文字列を部分文字列で二つに区切って、先頭の文字列を使う	s.partition(sub)[0]
オブジェクトがリストに含まれないか判定する	element not in aList
散布図の左三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
２つの列によってデータフレームを破壊的に大きい順にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
文字列をセパレータで分割して文字列リストに変換する	s.split(sep)
データフレームをグループ化し、それぞれの列に対し標準偏差を算出する	df.groupby(column)[column2].std()
部分文字列で文字列が終わるかどうか判定する	s.endswith(sub)
データフレームのカラムの名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
バツマーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
黒いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
こんにちは世界とプリントする	print('Hello World')
CSVファイルファイル名が	filename.endswith('.csv')
ミディアムスレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='mediumslateblue')
二つの列の値によってデータフレームをグループ化して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
option: レベッカパープル色を用いる	color = 'rebeccapurple'
整数nの16進表現	hex(n)
オブジェクトが整数クラスのインスタンスか	isinstance(obj, int)
一点鎖線でヒストグラムをプロットする	plt.hist(データ列, linestyle='dashbot')
プロットの色を全般的に明るくする	sns.set(pallete='bright')
データフレームの中の列を分割数nとしてビン分割する	pd.cut(df[col], n)
二つのデータ列の散布図として残差を描画する	sns.residplot(x=データ列, y=データ列)
ヒストグラムの色をミディアムシアグリーンにセットする	plt.hist(データ列, color='mediumseagreen')
3つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
赤色を用いてヒストグラムを描画する	plt.hist(データ列, color='red')
棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
小数点数とyの斜辺	math.hypot(x, y)
縦棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
nがn2の倍数	n % n2 == 0
option: ラベンダーブラッシュを使う	color = 'lavenderblush'
ベクトルの和を求める	aArray + aArray2
データフレームの２つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
赤にヒストグラムの色を変更する	plt.hist(データ列, color='red')
TSVファイルからSJISでCSVファイルを読む	pd.read_csv(filename, encoding='shift_jis')
データフレームのリストカラムの正規分布に対する左右対称性を求める	df[aList].kurt()
プロットの描画で濃くカラーパレットを用いる	sns.set(pallete='deep')
主成分分析として多次元データを濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
折れ線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
入力ストリーム全体をリストとして読み込む	f.readlines()
折れ線グラフをネイビー色を用いて描画する	plt.plot(データ列x, データ列y, color='navy')
部分文字列で文字列を分割したときの前半の文字列	s.partition(sub)[0]
データフレームを'A'列と'B'列でを用いて降順に並べる	df.sort_values(by=['A', 'B'], ascending=False)
カラムの中の欠損値の数をカウントする	ds.isna().sum()
昇順に'A'列で破壊的にデータフレームをソートする	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
青紫色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
ライトスチールブルーにヒストグラムの色をする	plt.hist(データ列, color='lightsteelblue')
イテラブルでカウンタを更新する	aCounter.update(iterable)
データフレームのリスト列の記述統計量を計算する	df[aList].describe()
二つのデータフレームを横方向につなぐ	pd.concat([df, df2], axis=1)
データフレームのカラムを100の位で四捨五入して、整数にする	df[col].round(-2).astype(int)
リストと数列の散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
各列毎にデータフレームをグループ化して列の標準偏差を算出する	df.groupby(column)[column2].std()
折れ線グラフの色をブルーバイオレットにセットする	plt.plot(データ列x, データ列y, color='blueviolet')
折れ線グラフの上三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
CSVファイルTSVファイルをn番目の列をインデックスにして読み込む	pd.read_csv(filename, index_col=n)
折れ線グラフに四角印を使う	plt.plot(データ列x, データ列y, marker='s')
棒グラフをチョコレート色を用いて描画する	plt.bar(データ列x, データ列y, color='chocolate')
縦方向に3つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
文字列リストを連結して一つの文字列にする	''.join(aStringList)
アンティークホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
折れ線グラフの色を淡い茶色にする	plt.plot(データ列x, データ列y, color='tan')
データ列の折れ線プロットを描画し、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
折れ線グラフの星マーカーの色を変える	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
option: マーカーの線幅を変える	markeredgewidth = 2.5
線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
小数点数のハイパボリック・サインを求める	math.sinh(x)
書き込むカンマ区切りのファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
耐火レンガ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
データフレームのリストカラムの欠損値を最頻値で置き換える	df[aList].fillna(df[aList].mode().iloc[0])
ヒストグラムをコーラル色を用いて描画する	plt.hist(データ列, color='coral')
実数のルート	math.sqrt(x)
データフレームの列の文字列を欠損値にする	df[col].replace(s, np.nan)
文字列の文字数	len(s)
線グラフをミディアムオーキッド色として描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
option: n番目のカラムをインデックスに変更する	index_col = n
option: ラインスタイルを実線に設定する	linestyle = 'solid'
文字列はPythonのキーワードかどうか調べる	keyword.iskeyword(s)
nが一桁の数かどうか調べる	0 <= n <= 9
データフレームの指定した3つの列を選ぶ	df[[column, column2, column3]]
折れ線グラフに簡単な説明を付ける	plt.plot(データ列x, データ列y, label='ラベル')
文字列をシアン化する	f'\033[36m{value}\033[0m'
ヒストグラムをスノー色として描画する	plt.hist(データ列, color='snow')
２つの文字列が等しくない	s != s2
折れ線グラフを淡いピンク色色を用いて描画する	plt.plot(データ列x, データ列y, color='lightpink')
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
逆順のキューを使う	reversed(deq)
オブジェクトをイテレータにする	iter(obj)
スピアマン相関係数でデータフレームのリストで指定した列の相関行列	df[aList].corr(method='spearman')
散布図を白色を使って描画する	plt.scatter(データ列x, データ列y, color='white')
数を数で除算して、切り捨てる	x // y
線グラフの色をダークレッドに設定する	plt.plot(データ列x, データ列y, color='darkred')
散布図に下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
標準出力	sys.stdout
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
nからn2までの整数列を使う	list(range(n, n2+1))
文字列を走査し、パターンに大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
ファイルパスを追加モードでオープンして]fとする	f = open(filepath, mode='a')
option: インデックスを連番にセットする	index_col = None
散布図を赤い三角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
JSONLファイルにデータフレームをタブ区切りを使って保存する	df.to_csv(filename, sep='\t')
ヒストグラムの色をダークバイオレットに変更する	plt.hist(データ列, color='darkviolet')
集合から要素を全て消す	aSet.clear()
等差数列を行列に変換する	np.arange(開始値, 終了値, 等差)
線グラフをロージーブラウン色として描画する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームをTSVファイルを使ってJSONLファイルに保存する	df.to_csv(filename, sep='\t')
散布図を左三角マーカーで描く	plt.plot(データ列x, データ列y, marker='<')
線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
データフレームのカラムをカテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: ▲マーカーを使用する	marker = '^'
データ列は正規分布からどの程度、歪んでいるか見る	ds.kurt()
折れ線グラフの印を大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
ファイルパスをSJISでオープンする]	open(filepath, encoding='shift_jis')
option: 先頭の列をインデックスに設定する	index_col = 0
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
セットが空でないか調べる	len(aSet) != 0
列をカウントしてカウンタから引く	aCounter.subtract(iterable)
nまでの奇整数リスト	list(range(1, n, 2))
ヒストグラムの色をオールドレースに変更する	plt.hist(データ列, color='oldlace')
データフレームの文字列を未入力値に変換する	df.replace(s, np.nan)
option: グラフの線の種類を点線に設定する	linestyle = 'dotted'
十六進数の文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
option: オリーブを使う	color = 'olive'
Pandasで、文字列のUNIX時間からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームの列をドロップして入れ替える	df.drop(column, axis=1, inplace=True)
行列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
option: 貝殻色を使用する	color = 'seashell'
ヒストグラムをピーチパフ色を用いて描画する	plt.hist(データ列, color='peachpuff')
グラフ中のフォントを変更する	sns.set(font=フォント名)
RANSACで回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
文字列を青色で出力する	print(f'\033[34m{value}\033[0m')
散布図をインディゴ色として描画する	plt.scatter(データ列x, データ列y, color='indigo')
文字列を部分文字列で区切って文字列リストに変換する	s.split(sub)
2つのリストから辞書	dict(zip(aList, aList2))
データ列を等間隔でn個にビニングする	pd.cut(ds, n)
全要素を０で初期化した論理値型の行列を作成する	np.zeros(行数, 列数, dtype=np.int32)
データフレームの重複する行数のマスクを求める	df.duplicated()
イテラブルとリストについての散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
文字列を最後の部分文字列で分割したときの後半の文字列	s.rpartition(sub)[-1]
文字列の両端から空白を除く	s.strip()
回帰分析を勾配ブースティングで行う	model = sklearn.ensemble.GradientBoostingRegressor()
nをn2で割ったモジュロを求める	n % n2
リストとリストの散布図を描画して、バツマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
アクアマリンにヒストグラムの色を変更する	plt.hist(データ列, color='aquamarine')
ファイルパスをバイナリ書き込みできるように開く]	open(filepath, mode='wb')
option: グラフの色を青に指定する	color = 'blue'
棒グラフをミディアムブルー色を使って描画する	plt.bar(データ列x, データ列y, color='mediumblue')
データフレームを各列と列の組み合わせ毎にグループ化して標準偏差を求める	df.groupby([column, column2], as_index=False).std()
折れ線グラフをペールグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームの列を1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
集合の補集合を算出する	aSet.difference(aSet2)
部分文字列で文字列を最後から区切る	s.rsplit(sub)
データ列の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
線グラフを青い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームのそれぞれのグループごとの分散を算出する	df.groupby(column).var()
xが一桁の数	-9 <= x <= 9
数列とリストについての散布図に赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
度数分布図を二つ並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームの列と列に重複があれば、消す	df.drop_duplicates(subset=column)
シスルにヒストグラムの色をセットする	plt.hist(データ列, color='thistle')
option: ダークサーモンにグラフの色を設定する	color = 'darksalmon'
最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
文字列を改行で分割し文字列リストに変換する	s.splitlines()
グラフの色テーマを指定する	sns.set(pallete=パレット名)
データ列の欠損値を最小値に増やす	ds.fillna(ds.min())
データフレームを'A'列で昇順に並べる	df.sort_values(by='A', ascending=True)
縦棒グラフを青色を用いて描画する	plt.bar(データ列x, データ列y, color='blue')
ペアリストpairsからカウンタを作成する	collections.Counter(dict(pairs))
赤い右三角マーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
SVDでパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
折れ線グラフの色をホットピンクにセットする	plt.plot(データ列x, データ列y, color='hotpink')
グラフの全般的にカラーテーマを暗くする	sns.set(pallete='dark')
データフレームを列名リストによってによって破壊的に並べる	df.sort_values(by=column, inplace=True)
赤い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='r')
エクセルファイルファイルから全シートを読み込む	pd.read_excel(filename, sheet_name=None)
プログラムの実行をここで終了する	sys.exit()
赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
スタッキングを使ってクラス分類をする	sklearn.ensemble.StackingClassifier()
浮動小数点数のsin	math.sin(x)
散布図をミディアムスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
本日が木曜日か	datetime.datetime.today().weekday() == 3
日付時刻データが日付時刻データと同時か	aDatetime == aDatetime2
散布図をフォレストグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
キューを要素を出す	deq.popleft()
データフレームから指定された名前リストの列を選択する	df[columns]
シルバー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
OSがWindowsか	sys.platform.startswith('win32')
データフレームの中で列に重複があるか確認する	df.duplicated(subset=column)
データ列とリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
パールゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
option: フォントの色を紺碧に変更する	color = 'azure'
イテラブルからn要素サンプリングする	random.sample(iterable, k=n)
棒グラフをタン色として描画する	plt.bar(データ列x, データ列y, color='tan')
option: 色をダークレッドに指定する	color = 'darkred'
ローングリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
要素が集合のメンバーでないか	element not in aSet
ヒストグラムの色をロージーブラウンに指定する	plt.hist(データ列, color='rosybrown')
option: ミディアムアクアマリンにグラフの色を設定する	color = 'mediumaquamarine'
文字列は組の要素か調べる	element in aTuple
デフォルトのエンコーディング	sys.getdefaultencoding()
折れ線グラフを暗い赤色として描画する	plt.plot(データ列x, データ列y, color='darkred')
実線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
浮動小数点数を実数で割った余り	x % y
二つのタプルを階層化する	collections.ChainMap(aDict, aDict2)
異なる列をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ベクトルの差を求める	aArray - aArray2
二つの集合の対称差集合を使う	aSet.symmetric_difference(aSet2)
データフレームが正規分布からどの程度歪んでいるか確認する	df.kurt()
アンサンブル学習としてクラス分類をする	sklearn.ensemble.VotingClassifier()
データ列のパーセンタイルを可視化する	plt.boxplot(データ列)
リストとデータ列について散布図をプロットして、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
縦軸の目盛りを対数に変更する	plt.yscale('log')
リストをシアンでプリントする	print(f'\033[36m{value}\033[0m')
BOM付きで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>')
分類モデルのアキュレシーを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
整数nが集合のひとつである	n in aSet
線形回帰モデルの切片	model.intercept_
表データからランダムに取り出す	df.sample()
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t')
データフレームの列の未入力値を直前の値で埋める	df[col].fillna(method='ffill')
折れ線グラフの色をパールバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='palevioletred')
実行結果をマゼンタで表示できる文字列に変換する	f'\033[35m{value}\033[0m'
散布図の菱形印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: ベクトルのデータ型を指定する	dtype = bool
散布図をダークシアグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ボックスチャートを横向きにする	plt.boxplot(データ列, vert=False)
データフレームをグループ化し、それぞれの列に対し個数を算出する	df.groupby(column)[column2].count()
タプルをカウンタにする	collections.Counter(aDict)
線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
行列のスカラー倍を求める	aArray * n
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategrey')
ファイルをBOM付きで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
キューをリストにする	list(deq)
実数のハイパボリック・タンジェントの逆数	math.atanh(x)
クラス分類の予測精度を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
クラス分類をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
列'A'と列'B'をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
色付きの破線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
n2がn以上、かつ、n3以下かどうか調べる	n <= n2 and n2 <= n3
データ列の欠損値を直後の値にする	ds.fillna(method='bfill')
空の階層化マップを作成する	collections.ChainMap()
縦棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
データフレームをJSONLファイルにWindowsで文字化けしないように保存する	df.to_csv(filename, encoding='utf_8_sig')
データフレームのリストカラムの欠損値を前の行の値で置換する	df[aList].fillna(method='ffill')
predicateFuncが真とならないイテラブルの部分を取り出す	itertools.dropwhile(predicateFunc, iterable)
散布図を丸印を使用して描画する	plt.scatter(データ列x, データ列y, marker='o')
新しい勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
データフレームのカラムを散布図として図示する	sns.scatterplot(data=df, x='列名', y='列名')
辞書順で文字列は文字列より後	s > s2
整数個からk個取り出したときの順列の総数	math.perm(n, k)
ヒストグラムをピンク色を用いて描画する	plt.hist(データ列, color='pink')
折れ線グラフをミッドナイトブルー色として描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームの列の値がxでない行を消す	df[df[column] == x]
線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
行列の列ごとの最小値を計算する	np.min(aArray, axis=0)
行列の合計値	np.sum(aArray)
文字列の最後から空白を除く	s.rstrip(' ')
データフレームの全カラムを散布図で見る	sns.pairplot(df)
パーセント付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
文字列の中の複数行対応として正規表現による全マッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
今日の日付	datetime.date.today()
縦棒グラフをパールゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
データ列の折れ線グラフを描いて、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームのカラムが何曜日か確認する	df[col].dt.weekday_name
グラフに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
グリーンイエロー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
縦棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
色付きの実線を用いてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
option: パウダーブルーにグラフの色を設定する	color = 'powderblue'
データフレームのリストカラムの空文字をNaNに変換し、ドロップする	df[aList].replace('', np.nan).dropna()
データフレームの列を最初のカテゴリーを除外してダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
セットからエラーなく要素を取り除く	aSet.discard(element)
データフレームのリスト列の中にと日付データがいくつあるかカウントする	df[aList].isin([value, value2]).sum()
リストを緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
データ列を百の位で丸める	ds.round(-2)
ヒストグラムをカデットブルー色として描画する	plt.hist(データ列, color='cadetblue')
縦棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
データフレームの空文字を未入力値に変換し、ドロップする	df.replace('', np.nan).dropna()
三つの最小値を求める	min(x, y, z)
データフレームを表示するとき、表示可能な行数を変更する	pd.set_option('display.max_rows', n)
リストにオブジェクトを加える	aList.append(element)
ベクトルの最小値を求める	np.min(aArray)
集合が空	len(aSet) == 0
ヒストグラムをブルーバイオレット色として描画する	plt.hist(データ列, color='blueviolet')
ブランチドアーモンドにヒストグラムの色を変更する	plt.hist(データ列, color='blanchedalmond')
データフレームを各列毎にグループ化して列の合計を計算する	df.groupby(column)[column2].sum()
リストとリストの散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
大バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='X')
新しい文字列で文字列を全て置き換える	s.replace(sub, newsub)
K最近傍法を使ってクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
オブジェクト一つのタプル	(element,)
Pandasで、エポック秒のデータ列からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
ヒストグラムをスプリンググリーン色を使って描画する	plt.hist(データ列, color='springgreen')
シャルトリューズ色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
書き込みモードとしてファイルをオープンする]	open(filepath, mode='w')
プログラムのファイルの名前を調べる	sys.argv[0]
option: フォントの色をマルーンに設定する	color = 'maroon'
インディゴ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
カラムを10の位で四捨五入して、整数型にする	ds.round(-1).astype(int)
データフレームの各グループの個数	df.groupby(column).count()
タブ文字	'\t'
option: グラフの色をレベッカパープルに指定する	color = 'rebeccapurple'
データフレームの列名を指定された列名一覧に置き換える	df.columns = columns
浮動小数点数のn乗	x ** n
predicateFuncが真となる列の部分	itertools.takewhile(predicateFunc, iterable)
データフレームの列がx以下のデータを抽出する	df[df[column] <= x]
縦棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
カウンタの正のカウントだけ残す	+aCounter
nという名前のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=n)
イテラブルにリストを続ける	itertools.chain(iterable, iterable2)
option: データ型としてブール型を使う	dtype = np.int32
数式の平方根を計算する	sympy.sqrt(e)
データフレームの列が文字列が含まれるデータを抽出する	df[df[column].str.contains(s)]
データフレームの未入力値を最小値で埋める	df.fillna(df.min())
数値を双方向キューの末尾に付け加える	deq.append(element)
データフレームのカラムの値をまとめてreplに正規表現patternで置換する	df[col].replace(pattern, repl, regex=True)
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
option: ナバホホワイトを使用する	color = 'navajowhite'
サポートベクターマシンでクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
度数分布図の範囲を変更する	plt.hist(データ列, range=(start, end))
棒グラフをダークレッド色で描画する	plt.bar(データ列x, データ列y, color='darkred')
option: 文字列の示す文字コードを使う	encoding = s
線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
nがn2より大きい	n > n2
切り上げて整数にする	math.ceil(x)
紺にヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
半透明の一点鎖線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
青い実線を使ってデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
まとめてValueMapでデータフレームの値を置き換える	df.replace(ValueMap)
単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
棒グラフをミスティローズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mistyrose')
データフレームをグループ化し、各列に対し最小値を求める	df.groupby(column)[column2].min()
最初の文字列をキューから取り除く	deq.remove(element)
数式を簡単化する	sympy.sympify(e)
等差数列から乱数を発生させる	random.randrange(start, end, step)
横棒グラフをオリーブ色として描画する	plt.barh(データ列x, データ列y, color='olive')
淡いピンク色色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
シスル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
空のタプルを作る	()
Pandasでdatetime64型のデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
キューのn番目に要素を挿入する	deq.insert(n, element)
実測値をモデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
折れ線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
データ列の未入力値をxで置き換える	ds.fillna(x)
区切りによって文字列を分割して、列挙する	s.split(sep)
ブランチドアーモンド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
四分位点でデータをスケーリングする	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: ホットピンクにグラフの色を設定する	color = 'hotpink'
データ列の25パーセンタイル	ds.quantile(0.25)
文字列の中のASCII限定として正規表現による全マッチを求める	re.findall(pattern, s, flags=re.ASCI)
データフレームを列でグループ化して、グループ毎の件数を知る	df.groupby(column).size()
データフレームをJSONL形式のファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
データフレームを各列毎に集約して、列の最大値を求める	df.groupby(column)[column2].max()
既存のファイルパスをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
option: マーカーを四角に指定する	marker = 's'
nがn2で割り切れない	n % n2 != 0
データフレームの列の名前をカラムから文字列に付け直す	df.rename(columns={column: name})
いつまでもnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
折れ線グラフをプラム色を用いて描画する	plt.plot(データ列x, データ列y, color='plum')
Pandasで、フォーマットで文字列を日付データにする	pd.to_datetime(s, format='%Y-%m-%d')
ファイルをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
データフレームの列の値がxより小さい行を抽出する	df[df[column] < x]
カラムの標本標準偏差	ds.std()
バリーウッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
列を等量でn個にビン分割する	pd.qcut(ds, n)
横棒グラフをコーンズシルク色として描画する	plt.barh(データ列x, データ列y, color='cornsilk')
エポック秒のデータフレームのcollから日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
タイムスタンプデータの分数	aDatetime.minute
浮動小数点数を千の位で四捨五入する	round(x, -3)
色名からカラーコードを見る	matplotlib.colors.cnames[色名]
文字列の開始位置番目からと終了位置番目までの間に部分文字列が含まれないか	s.find(sub, start, end) == -1
データフレームのカラムの中にいくつNaNがあるか数える	df[col].isna().sum()
ベクトルの標準偏差	np.std(aArray)
正規表現をコンパイルする	re.compile(pattern)
データフレームから数値データの列だけ抽出する	df.select_dtypes('number')
文字列中にひとつでも非大文字が含まれるかどうか調べる	any(not c.isupper() for c in s)
option: グレー色を使用する	color = 'gray'
データフレームの中に存在する日付データの合計を数える	df.isin([value]).sum()
円グラフを正円にする	plt.axis('equals')
散布図を赤い▽マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームのヒストグラムを横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名')
ヒストグラムを描画し、、ビン数を設定する	plt.hist(データ列, bins=区関数)
ダークカーキ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
折れ線グラフを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームを小数点以下n桁で丸める	df.round(n)
カテゴリで色分けして、にバイオリン図としてデータフレームを描画する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データ列の散らばりを作図する	plt.scatter(データ列x, データ列y)
２つの整数最小公倍数を求める	math.lcm(n, n2)
データフレームのリスト列はどの程度、分散しているか見る	df[aList].var()
主成分分析で淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
新しいヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームのリストカラムのNaNを最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
データフレームのリスト列の中の欠損値の合計をカウントする	df[aList].isna().sum()
新しい文字列に回数を制限して文字列中の部分文字列を置き換える	s.replace(sub, newsub, n)
データフレームを'A'列によってで破壊的にソートする	df.sort_values(by='A', inplace=True)
日付データの年数を使う	aDate.year
データフレームのリスト列の中に含まれる文字列の合計を数える	df[aList].isin([value]).sum()
リストの文字列の位置をエラーなく求める	aList.index(element) if element in aList else -1
データフレームを関数の値でグループ化する	df.groupby(関数)
0から始まる無限の数列	itertools.count()
データフレームを複数の列によって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
空のスタック	collections.deque()
線を赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
分類モデルの再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ティール色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
データフレームを1000の位で四捨五入して、整数型にする	df.round(-3).astype(int)
折れ線グラフをハニーデュー色として描画する	plt.plot(データ列x, データ列y, color='honeydew')
横棒グラフをスプリンググリーン色を使って描画する	plt.barh(データ列x, データ列y, color='springgreen')
ミスティローズにヒストグラムの色を設定する	plt.hist(データ列, color='mistyrose')
データフレームの内の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
JSON形式の入力を読み込んで、dataとする	data = json.load(fin)
散布図をフクシア色として描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
グラフの描画で暗くパレットを用いる	sns.set(pallete='dark')
リストとイテラブルについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
青色を使ってヒストグラムを描画する	plt.hist(データ列, color='blue')
ヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
データフレームの列と列の相関行列をヒートマップを用いてグラフ化する	sns.heatmap(df[[column, column2]].corr())
ふたつの集合がセットと互いに素かどうか確認する	aSet.isdisjoint(aSet2)
option: グレーにグラフの色を設定する	color = 'grey'
option: サドルブラウン色を用いる	color = 'saddlebrown'
散布図の上三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームのリストカラムの中に文字列があるか	df[aList].isin([value])
ミントクリーム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
散布図に▽マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
2進数文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
配列と同じ大きさの空行列を作る	np.empty_like(aArray)
ライムグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
プロットにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
文字列が全て数字	s.isdigit()
区切りで文字列を分割する	s.split(sub)
カラムの未入力値をxに設定する	ds.fillna(x)
サーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
縦棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
折れ線グラフに黒い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
パープル色を使ってヒストグラムを描画する	plt.hist(データ列, color='purple')
棒グラフをリネン色として描画する	plt.bar(データ列x, データ列y, color='linen')
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgray')
散布図の大バツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
タプルの全エントリを空にする	aDict.clear()
文字列に日本語が含まれるか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データフレームのカラムは何年か見る	df[col].dt.year
オーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
ヒストグラムをパールゴールデンロッド色として描画する	plt.hist(データ列, color='palegoldenrod')
データ列の移り変わりを折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
option: ミディアムアクアマリンを使う	color = 'mediumaquamarine'
ミディアムターコイズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
データフレームのそれぞれのグループの平均値	df.groupby(column).mean()
データフレームを破壊的に列名リストによって大きい順に並べる	df.sort_values(by=column, ascending=False, inplace=True)
カラムの各値が何回出現するか見る	df[col].value_counts()
折れ線グラフをタン色を用いて描画する	plt.plot(データ列x, データ列y, color='tan')
安全に文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
縦棒グラフをコーンズシルク色を用いて描画する	plt.bar(データ列x, データ列y, color='cornsilk')
ニューラルネットで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
データフレームのリスト列が正規分布からどれだけ、尖っているか見る	df[aList].skew()
全要素を０で初期化した８ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int8)
データフレームを'A'列の値によってグループ化し要約統計量を求める	df.groupby('A').describe()
グラフで利用可能な色の一覧を知る	matplotlib.colors.cnames
データフレームを列によってグループ化して各グループごとの最大値を求める	df.groupby(column).max()
データフレームを各列毎にグループ化して、文字列という名前のグループを使う	df.groupby(column).get_group(s)
'A'列と'B'列でデータフレームをソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
散布図をゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
アンティークホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='antiquewhite')
ファイルパスをUTF8を用いて書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
散布図の星印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
辞書をコピーする	dict(aDict)
データフレームの中の欠損値を落とす	df.dropna()
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
ダークゴールデンロッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
xが-9以上、9以下かどうか調べる	-9 <= x <= 9
ダークマゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
横棒グラフをライトシアン色として描画する	plt.barh(データ列x, データ列y, color='lightcyan')
データフレームのリストカラムを正規表現patternでまとめて置き換える	df[aList].replace(pattern, repl, regex=True)
既存のファイルを文字コードtextとして追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
option: ネイビー色を用いる	color = 'navy'
外れ値に強い線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
ミディアムブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumblue')
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
散布図にダイアモンドマーカーを使用する	plt.scatter(データ列x, データ列y, marker='D')
散布図をミディアムオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
文字列TSVファイルからn番目のカラムをインデックスとしてCSVファイルを読み込む	pd.read_csv(filename, index_col=n)
横棒グラフを白色を用いて描画する	plt.barh(データ列x, データ列y, color='white')
縦棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ピーチパフ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
棒グラフをダークスレートブルー色を使って描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
プロット描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
線グラフの色をダークシアグリーンに変更する	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレームから一番右側の列を除く	df[df.columns[:-1]]
option: 青緑色を使用する	color = 'teal'
option: アイボリーに色を設定する	color = 'ivory'
カラーコードとして折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
本日が月曜日	datetime.datetime.today().weekday() == 0
書式fmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
option: グラフの色をカデットブルーにセットする	color = 'cadetblue'
ピアソン相関係数を用いてデータフレームの列と列の相関行列を計算する	df[[column, column2]].corr(method='pearson')
データフレームのカラムの中に日付データが存在するかどうか調べる	df[col].isin([value])
マッピングに要素をキーとして加える	aDict[key] = element
散布図に赤いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: フォントの色をフクシアに指定する	color = 'fuchsia'
横棒グラフをミディアムオーキッド色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
横棒グラフをレベッカパープル色として描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
整数の値が整数か調べる	x.is_integer()
散布図の印を赤色にする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
エクセルファイルからデータフレームを読む	pd.read_excel(filename)
折れ線グラフに星印を使う	plt.plot(データ列x, データ列y, marker='*')
option: トマトにグラフの色を設定する	color = 'tomato'
浮動小数点数の仮数	math.frexp(x)[0]
マップの項目名の一覧を得る	aDict.keys()
データフレームを表示するとき、表示する列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
ファイルパスからのストリームを使う	open(filepath)
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
ローングリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
option: フォントの色をスレートブルーに設定する	color = 'slateblue'
アンティークホワイト色でヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
データフレームを表示するとき、最大行数をnに設定する	pd.set_option('display.max_rows', n)
折れ線グラフの色をモカシンにセットする	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフのマーカーを▲印にする	plt.plot(データ列x, データ列y, marker='^')
リストと配列についての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
散布図をミディアムシアグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
配列の列ごとの合計値を求める	np.sum(aArray, axis=0)
ビン数を設定してヒストグラムをプロットする	plt.hist(データ列, bins=区関数)
データフレームを列によってソートし、、新しいインデックスを加える	df.sort_values(columns).reset_index()
CSVを読み込む	pd.read_csv(filename, sep=',')
散布図に黒い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフのクロス印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ヒストグラムの色をパープルに指定する	plt.hist(データ列, color='purple')
横方向に二つのデータフレームを一つにする	pd.merge(df, df2)
折れ線グラフをイエローグリーン色として描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
データ列の欠損値を平均値で置換する	ds.fillna(ds.mean())
データフレームのリスト列のNaNを第二四分位数で補う	df[aList].fillna(df[aList].median())
柱状図でデータフレームの列を描画する	plt.hist(df[column])
アクアマリン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
実数を十六進表記の文字列にする	x.hex()
散布図をインディアンレッド色として描画する	plt.scatter(データ列x, データ列y, color='indianred')
データ列の欠損値を第二四分位数に設定する	ds.fillna(ds.median())
線グラフをブラウン色で描画する	plt.plot(データ列x, データ列y, color='brown')
カウンタの各要素を、そのカウントだけ列挙する	aCounter.elements()
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
上位集合もしくは等しいかどうか調べる	aSet > aSet2
ラインを点線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ふたつの集合の共通部分を使う	aSet.intersection(aSet2)
配列とリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
縦棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
リストとリストについて散布図を描き、、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
赤いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
折れ線グラフの色をラベンダーブラッシュにする	plt.plot(データ列x, データ列y, color='lavenderblush')
変数をシアンで表示できる文字列にする	f'\033[36m{value}\033[0m'
列のユニークな要素数	ds.nunique()
ミッドナイトブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
散布図に三角印を用いる	plt.scatter(データ列x, データ列y, marker='^')
本日をISO書式の文字列に変換する	datetime.datetime.today().isoformat()
数列の推移を色付きの一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
棒グラフをドジャーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
データフレームのカーネル密度分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
横棒グラフをサドルブラウン色を使って描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
option: グラフの色をパレットトルコイズに指定する	color = 'paleturquoise'
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
オプションで、出力先を標準エラーに変更する	file = sys.stderr
折れ線グラフに黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
トマト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
双方向キューのstart番目からend番目までの要素	collections.deque(itertools.islice(deq, start, end))
option: ライトシアンにグラフの色を設定する	color = 'lightcyan'
データフレームのカラムが正規分布からどの程度、尖っているか確認する	df[col].skew()
カーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
上位集合か	aSet.issuperset(aSet2)
option: グラフを破線に設定する	linestyle = 'dashed'
行列の行ごとの標準偏差を算出する	np.std(aArray, axis=1)
option: グリーンにグラフの色を変更する	color = 'green'
四分位数ごとにデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
折れ線グラフの色をマゼンタにセットする	plt.plot(データ列x, データ列y, color='magenta')
キューの中に値が含まれてるか調べる	element in deq
双方向キューの値をインプレースに反転する	deq.reverse()
現在実行中の例外を情報	sys.exc_info()
イテラブルを集合に追加する	aSet.update(iterable)
カウンタのユニークな要素をリストとして得る	list(aCounter)
タイムスタンプデータは何秒か知る	aDatetime.second
option: ダークスレートブルーにグラフの色を設定する	color = 'darkslateblue'
数値の数値を求める	float(e)
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
辞書にキーが存在しない時、要素を追加する	aDict.setdefault(key, element)
マッピングのキーを要素に設定する	aDict[key] = element
横軸の軸名を設定する	plt.xlabel('x軸ラベル')
棒グラフをマルーン色として描画する	plt.bar(データ列x, データ列y, color='maroon')
クリムゾン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
データフレームの列の文字列が文字列で終わらないデータを取り出す	df[not df[column].str.endswith(s)]
表の指定された列を配列として選択する	df[column].values
整数個のものからk個取り出した時の並べ方	math.perm(n, k)
option: シーグリーンにグラフの色を設定する	color = 'seagreen'
標準入力から1文字読む	sys.stdin.read(1)
散布図をミディアムターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
文字列がアルファベットか	s.isalpha()
データフレームから重複する行を削除する	df.drop_duplicates()
折れ線グラフにポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームから型リストで指定されたデータ型の列のみ抽出する	df.select_dtypes(include=typeList)
変数が0に近づく場合、数値の極限値を求める	sympy.limit(e, z, 0)
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
縦棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
データ列間の平均絶対誤差を計算する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
縦棒プロットを描画してバーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
句点文字を全部見る	string.punctuation
等間隔の行列を作る＼	np.arange(開始値, 終了値, 等差)
データフレームの列からユニークな値を抽出しリスト化する	df[col].unique().tolist()
赤い大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
イテラブルとリストについての散布図に赤い△マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図にポイント印を使う	plt.scatter(データ列x, データ列y, marker='.')
リストを四分位数ごとにビニングする	pd.qcut(aList, 4)
タプルをn回、結合する	aTuple * n
ラベンダーブラッシュ色としてヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
後の値でデータフレームのカラムの欠損値を補う	df[col].fillna(method='bfill')
タンジェントの逆数を求める	math.atan(x)
小さい順にリストをソートする	sorted(aList, reverse=False)
option: スプリンググリーンを使用する	color = 'springgreen'
option: ボックスチャートを水平方向にする	vert = False
整数nの八進数リテラル	oct(n)
データ列のNaNを平均に設定する	ds.fillna(ds.mean())
列に列を続けたイテラブル	itertools.chain(iterable, iterable2)
切片なしの線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームを列の値でグループ化する	df.groupby(column)
option: フォントの色をアリスブルーに設定する	color = 'aliceblue'
ヒストグラムの色を白に指定する	plt.hist(データ列, color='white')
空のセット	set()
方程式として数値の変数の解を計算する	sympy.solve(e, z)
散布図の上三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
ヒストグラムをフォレストグリーン色を用いて描画する	plt.hist(データ列, color='forestgreen')
表データから重複する行を残さず、落とす	df.drop_duplicates(keep=False)
文字列の中の正規表現による全マッチを見る	re.findall(pattern, s)
線グラフをアンティークホワイト色として描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
データフレームのリスト列の欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
option: ミントクリームにグラフの色を設定する	color = 'mintcream'
t-SNEとして多次元データを淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
散布図をロイヤルブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='royalblue')
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
データ列の推移を青い点線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
日付時刻データがタイムスタンプデータより前	aDatetime < aDatetime2
辞書をチェーンマップにする	collections.ChainMap(aDict)
データフレームを各列毎にグループ分けして、列の分散を求める	df.groupby(column)[column2].var()
option: グラフの色を珊瑚に設定する	color = 'coral'
線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgreen')
文字列が漢字かどうか調べる	('\u4E00' <= ch <= '\u9FD0')
イテラブルを文字列リストに変換して、'改行で結合する	'\n'.join(map(str, iterable))
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgray')
実数の床数	math.floor(x)
ケンドール相関係数でデータフレームのリストで指定された列の相関行列	df[aList].corr(method='kendall')
折れ線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
重複していない行だけ	df[not df.duplicated(keep=False)]
ファイルが存在するかどうか調べる	os.path.exists(filepath)
リストと数列について散布図を描画して、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
２つのカウンタの共通する要素	aCounter & aCounter2
折れ線プロットをプロットする	plt.plot(データ列x, データ列y)
日付データが日付データと同時か確認する	aDate == aDate2
縦棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
ミディアムアクアマリン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
行列の累積積	np.cumprod(aArray)
切り捨てながらnをn2分の一にする	n //= n2
実数が無限大か確認する	math.isinf(x)
出力ストリームにxを文字列に変換して書く	f.write(str(x))
文字列を最後の部分文字列で二分し、前半の文字列を見る	s.rpartition(sub)[0]
カデットブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
リストと配列について散布図を描画して、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
スクリプト名	sys.argv[0]
赤いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図にバツ印を使う	plt.scatter(データ列x, データ列y, marker='x')
eの乗数を算出する	math.exp(x)
棒グラフを珊瑚色で描画する	plt.bar(データ列x, データ列y, color='coral')
データフレームの値が未入力値かどうか調べる	df.isna()
データフレームが正規分布からどの程度尖っているか確認する	df.skew()
折れ線グラフの色をアンティークホワイトに指定する	plt.plot(データ列x, データ列y, color='antiquewhite')
ロイヤルブルーにヒストグラムの色を指定する	plt.hist(データ列, color='royalblue')
濃いシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ASCII限定としてパターンで文字列を区切る	re.split(pattern, s, flags=re.ASCI)
列によって表データをグループ化し記述統計量を計算する	df.groupby(column).describe()
折れ線グラフをライム色を使って描画する	plt.plot(データ列x, データ列y, color='lime')
散布図を淡い茶色色で描画する	plt.scatter(データ列x, データ列y, color='tan')
横棒グラフの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
線グラフの色をシアンにする	plt.plot(データ列x, データ列y, color='cyan')
ヒートマップで表データの相関行列を描画する	sns.heatmap(df.corr())
option: グラフの線の種類を破線に設定する	linestyle = 'dashed'
ケンドールの相関係数を使う	scipy.stats.kendalltau(データ列, データ列2)
ライトグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームのカラムの欠損値を最大値で置換する	df[col].fillna(df[col].max())
Pandasで、フォーマットfmtでデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col], format=fmt)
nが正の数か	n > 0
イテラブルのイミュータブルな集合を使う	frozenset(iterable)
線グラフの色をインディゴに変更する	plt.plot(データ列x, データ列y, color='indigo')
ナバホホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
実数のn乗の整数剰余を求める	pow(x, n, y)
自分自身をモジュールとしてを得る	sys.modules[__name__]
行列の要素ごとの最大公約数を求める	np.gcd(aArray, aArray2)
色付きの点線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
スピアマンの相関係数を使う	scipy.stats.spearmanr(データ列, データ列2)
右三角マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
本日が金曜日か	datetime.datetime.today().weekday() == 4
データフレームを表示するとき小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
最後に追加した項目を辞書から取り出す	aDict.popitem()
グラフのフォントを日本語に指定する	sns.set(font='IPAexGothic')
文字列の開始位置より後に部分文字列が含まれるか	s.find(sub, start) != -1
option: エンコーディングをEUCに変更する	encoding = 'euc_jp'
nが2で割り切れるかどうか確認する	n % 2 == 0
ホットピンクにヒストグラムの色をする	plt.hist(データ列, color='hotpink')
文字列内にひとつでも数字が含まれるかどうか	any(c.isdigit() for c in s)
データ列間の平均２乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
ポイントマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
辞書にキーが存在するかどうか調べる	key not in aDict
実数の整数部を求める	math.modf(x)[1]
データフレームのリスト列の相関行列ピアソン積率相関係数で	df[aList].corr(method='pearson')
ヒストグラムの色をシーグリーンにする	plt.hist(データ列, color='seagreen')
グラフから格子を表示しない	plt.grid(False)
2つ並べて配列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
オブジェクトは集合クラス	isinstance(obj, set)
option: ディープスカイブルーを用いる	color = 'deepskyblue'
データフレームの列の中に日付データとがあるか調べる	df[col].isin([value, value2])
2つのデータフレームを結合する	pd.merge(df, df2)
文字列の接頭辞から部分文字列を消す	s.removeprefix(sub)
ヒストグラムをフクシア色として描画する	plt.hist(データ列, color='fuchsia')
option: ライムグリーンにフォントの色をセットする	color = 'limegreen'
散布図を赤い星マーカーでプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
フローラルホワイト色を使ってヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
散布図のダイアモンド印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ラインを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
縦棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ドジャーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
option: グラフの色をオールドレースにセットする	color = 'oldlace'
ダークスラテグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
小数点数の双曲線余弦の逆数を求める	math.acosh(x)
データフレームを各列と列の組み合わせ毎に集約して、最小値を求める	df.groupby([column, column2], as_index=False).min()
ロバストな回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
データ列とイテラブルの散布図を描いて、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ピアソン積率相関係数を用いてデータフレームの相関行列を求める	df.corr(method='pearson')
散布図をコーラル色として描画する	plt.scatter(データ列x, データ列y, color='coral')
配列をリストを境界値として分割する	pd.cut(aArray, aList)
option: フォントの色をフローラルホワイトに設定する	color = 'floralwhite'
ヒストグラムをライトコーラル色を使って描画する	plt.hist(データ列, color='lightcoral')
ファイルパスが存在しないか調べる	not os.path.exists(filepath)
文字列を改行なしに表示する	print(value, end='')
最大値でデータフレームのNaNを埋める	df.fillna(df.max())
日付時刻データからn秒を減算する	aDatetime - datetime.timedelta(seconds=n)
横棒グラフをパールバイオレットレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='palevioletred')
２つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
データフレームの列名を付け直す	df.rename(columns={column: name})
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightgreen')
整数の最大公約数を算出する	math.gcd(n, n2)
横棒グラフをモカシン色として描画する	plt.barh(データ列x, データ列y, color='moccasin')
横棒グラフをミディアムブルー色を使って描画する	plt.barh(データ列x, データ列y, color='mediumblue')
データフレームのカラムを四捨五入して、整数型にする	df[col].round().astype(int)
タプルをソートする	sorted(aTuple)
文字列は全て印字できる	s.isprintable()
リストが空かどうか	len(aList) == 0
折れ線グラフをダークスレートブルー色を使って描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
縦棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
折れ線グラフに黒い▽印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
マッピングの項目名と値を入れ替える	{v: k for k, v in aDict.items()}
option: ダークシアグリーンにグラフの色を設定する	color = 'darkseagreen'
データフレームのリスト列の各列間の相関係数	df[aList].corr()
三整数の最大公約数	math.gcd(n, n2, n3)
折れ線グラフの色をロイヤルブルーに変更する	plt.plot(データ列x, データ列y, color='royalblue')
ふたつのリストのインターセクションを使う	list(set(aList) & set(aList2))
双方向キューを空にする	deq.clear()
1行分標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
プロットの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
データフレームのリスト列を10の位で丸めて、整数にする	df[aList].round(-1).astype(int)
数列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
シーケンスから重複なく、n個選ぶ	random.sample(iterable, k=n)
ラベンダー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
横棒グラフをオレンジ色を使って描画する	plt.barh(データ列x, データ列y, color='orange')
散布図を描く	plt.scatter(データ列x, データ列y)
散布図に左三角印を使う	plt.scatter(データ列x, データ列y, marker='<')
ヒストグラムをホワイトスモーク色として描画する	plt.hist(データ列, color='whitesmoke')
縦棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: フォントの色をディムグレーに設定する	color = 'dimgray'
データ列のタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
２つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
データフレームを各カラムと列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
データ列を中央値で分割する	pd.qcut(ds, 2)
カテゴリでグループ化して、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データフレームを各列と列の組み合わせ毎に集約して、合計を計算する	df.groupby([column, column2], as_index=False).sum()
日付データにn週間を加算する	aDate + datetime.timedelta(weeks=n)
nの二進表現	bin(n)
BOM付きでファイルをオープンする]	open(filepath, encoding='utf_8_sig')
名前付きタプルをデータからインスタンス化する	C._make(パラメータ)
Pandasで、dateStringをタイムスタンプ型に変換する	pd.to_datetime(dateString)
オプションで、出力先を標準出力にセットする	file = sys.stdout
バツ印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
実線にラインを設定する	plt.plot(データ列x, データ列y, linestyle='solid')
エンコーディングによって文字列をバイト列にする	s.encode(encoding=encoding)
nが1もしくは2、もしくは3に等しいかどうか調べる	n == 1 or n == 2 or n == 3
インディアンレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
データフレームのリストカラムの未入力値を平均値に増やす	df[aList].fillna(df[aList].mean())
赤いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
ファイルパスをバイナリできるようにオープンする]	open(filepath, mode='rb')
データフレームのリストカラムの平均	df[aList].mean()
ヒストグラムの色をスノーに指定する	plt.hist(データ列, color='snow')
文字列を表示する	print(value)
ダークスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
データ列の値がNaN	ds.isna()
黒色で実行結果をプリントする	print(f'\033[30m{value}\033[0m')
横棒グラフをダークシアグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
折れ線グラフの色をナバホホワイトに変更する	plt.plot(データ列x, データ列y, color='navajowhite')
ホットピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
グラフの用途を画面にセットする	sns.set(context='notebook')
双方向キューをタプルにする	tuple(deq)
リストをn個に分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームのカラムの中にいくつ日付データがあるか数える	df[col].isin([value]).sum()
ヒストグラムの色をイエローグリーンに変更する	plt.hist(データ列, color='yellowgreen')
二つの数値をタブで区切って表示する	print(value, value2, sep='\t')
日付時刻データを浮動小数点数にする	aDatetime.timestamp()
データフレームのカラムの正規分布に対する上下広がり	df[col].skew()
ミディアムスプリンググリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
シーケンスからひとつランダムに選ぶ	random.choice(iterable)
散布図をダークサーモン色として描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
散布図にrgbの右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
リストとリストについて散布図を描画してマーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
実数の天井数	math.ceil(x)
散布図のバツ印を青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
配列と配列について散布図を描いてマーカーを▽に変更する	plt.plot(データ列x, データ列y, marker='v')
nからいつまでもカウントアップする	itertools.count(start=n)
コーンフラワーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
日付時刻データにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
データ列を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
文字列の中でパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
列の長さnの順列	itertools.permutations(iterable, n)
星印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
データ構造を用いる	import collections
赤い左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
ミディアムターコイズ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: ダークスレートブルー色を用いる	color = 'darkslateblue'
ファイルを書き込み用にEUCでオープンする]	open(filepath, mode='w', encoding='euc_jp')
折れ線グラフをライトスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
イテラブルとリストの散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
ファイルをバイナリ書き込みモードを用いてオープンする]	open(filepath, mode='wb')
横棒グラフをミディアムアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
棒グラフの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
データフレームの列の平均	df[col].mean()
スプリンググリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームの中に文字列と文字列がある	df.isin([value, value2])
データフレームを列の値ごとにグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
ベストな位置に補足を表示する	plt.legend(loc='best')
パパイヤウィップ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
変数を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
データフレームからn番目のカラムを除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
カラムの第三四分位数	ds.quantile(0.75)
折れ線グラフをアリスブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='aliceblue')
option: フォントの色をホワイトスモークに設定する	color = 'whitesmoke'
データフレームを表示するとき小数点以下の表示精度を設定する	pd.set_option('precision', n)
データフレームを複数の列を用いてソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データ列をビン数nで分割する	pd.cut(ds, n)
データフレームのカラムのどの値が最も現れるか見る	df[col].mode()
option: シエナにフォントの色を設定する	color = 'sienna'
データフレームを'A'列と'B'列の値でグループ分けする	df.groupby(['A', 'B'])
数値を赤色でプリントする	print(f'\033[31m{value}\033[0m')
イテラブルとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
文字列から部分文字列を取り除く	s.replace(sub, '')
折れ線グラフの色を赤に指定する	plt.plot(データ列x, データ列y, color='red')
縦棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
文字列の左側から部分文字列を消す	s.lstrip(sub)
option: ブラックにグラフの色を設定する	color = 'black'
配列とリストの散布図を描いて、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
nの八進文字列を使う	oct(n)[2:]
文字列の接頭辞は部分文字列か調べる	s.startswith(sub)
列を配列に変換する	np.array(iterable)
データフレームのカラムの中のNaNの合計を数える	df[col].isna().sum()
両端キューの最後の要素	deq[-1]
折れ線グラフの色をオリーブに指定する	plt.plot(データ列x, データ列y, color='olive')
辞書から項目名の値	aDict.get(key)
option: クロスマーカーを使う	marker = 'x'
文字列をファイルに書き込む	f.write(s)
ファイルをEUCで開く]	open(filepath, encoding='euc_jp')
横棒グラフをピンク色として描画する	plt.barh(データ列x, データ列y, color='pink')
ファイルをオープンして]、読み込みストリームを見る	open(filepath, mode='r')
option: アクアマリンに色を設定する	color = 'aquamarine'
データ列の欠損値を前の行の値に設定する	ds.fillna(method='ffill')
線グラフの色を濃い青に設定する	plt.plot(データ列x, データ列y, color='darkblue')
option: 黄緑色を使う	color = 'chartreuse'
集合から何でもいいからひとつ取り出す	aSet.pop()
半透明の実線で配列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームを列名リストでソートする	df.sort_values(by=column)
リストとリストについて散布図を描き、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
降順でデータフレーム全体をインデックスでソートする	df.sort_index(ascending=False)
浮動小数点数の指数	math.frexp(x)[1]
折れ線グラフに青いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ライトサーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
実数を整数で割る	x / y
ダークサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='darksalmon')
ヒストグラムの色をライトコーラルに変更する	plt.hist(データ列, color='lightcoral')
多次元データを特異値分解で淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
縦棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
最大値・最小値として整数乱数を生成する	random.randint(最小値, 最大値)
データフレームを複数の列によって昇順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
列とシーケンスをチェインする	itertools.chain(iterable, iterable2)
初期値で全要素を初期化した配列	np.full(要素数, 初期値, dtype=np.int)
折れ線グラフをダークマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
小数点数の逆双曲線正接	math.atanh(x)
データフレームのカラムの時刻を使う	df[col].dt.hour
線グラフの色をペルーにする	plt.plot(データ列x, データ列y, color='peru')
データフレームから指定されたデータ型の列名の一覧を使う	df.select_dtypes(型).columns
データフレームの列の文字列が文字列で始まらないデータを取り出す	df[not df[column].str.startswith(s)]
リストと配列の散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ライトスレイグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
ミディアムパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
データ列とリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフの色をライムグリーンに指定する	plt.plot(データ列x, データ列y, color='limegreen')
rgbの星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
TSVをデータフレームとして読み込む	pd.read_csv(filename, sep='\t')
キューが空であるか調べる	len(deq) == 0
実数で浮動小数点数を整数除算する	x // y
データ列の文字列をNaNに変換する	ds.replace(s, np.nan)
リストと数列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: グラフの色を黄色に指定する	color = 'yellow'
option: ダークグレーにグラフの色を設定する	color = 'darkgray'
option: フォントの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
rgbの三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの大バツマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
折れ線グラフの四角印の線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
現在の年数	datetime.datetime.today().year
ふたつの集合は互いに素か調べる	aSet.isdisjoint(aSet2)
線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
文字列を最初の部分文字列で二つに区切って、後半の文字列を求める	s.partition(sub)[-1]
n2がnより大きく、かつ、n3未満かどうか調べる	n < n2 and n2 < n3
データフレームを列名リストによってで降順に並べ直す	df.sort_values(by=column, ascending=False)
ゼロ埋めされた複素数型の行列	np.zeros(要素数, dtype=bool)
行列の逆行列を使う	np.linalg.inv(aArray)
十六進数字を全部求める	string.hexdigits
データフレームの列を折れ線グラフとして可視化する	plt.plot(df[column], df[column])
折れ線グラフのマーカーをクロスにする	plt.plot(データ列x, データ列y, marker='x')
option: データ型を指定する	dtype = np.int
リスト中の文字列が最初に見つかるインデックス	aList.index(element)
浮動小数点数以下の最大の整数	math.floor(x)
option: グラフの色をライトグリーンに変更する	color = 'lightseagreen'
スピアマン順位相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
データフレームを関数の値で分類して、列挙する	[(name, group) for name, group in df.groupby(関数)]
option: フォントの色を貝殻に変更する	color = 'seashell'
プロットの中に枠なしの凡例を入れる	plt.legend(frameon=False)
破線にヒストグラムのラインスタイルを設定する	plt.hist(データ列, linestyle='dashed')
イテラブルを変更不能な集合に変換する	frozenset(iterable)
散布図の四角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
要素がマッピングの値に含まれていないか	element not in aDict.values()
文字列がリストの要素でない	element not in aList
相関係数と有意確率を使う	scipy.stats.pearsonr(データ列, データ列2)
縦棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
リストを縦軸、リストをx座標として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ファイルパスのフォルダ名	os.path.dirname(filepath)
マップにキーが存在しているいる	key in aDict
データフレームの列の値がxより大きくx2より少ない行を取り出す	df[(x < df[column]) & (df[column] < x2)]
イテラブルを文字列に変換して結合する	''.join(map(str, iterable))
データフレームのNaNを直後の値に指定する	df.fillna(method='bfill')
ダークスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslateblue')
リストの中の最大値を計算する	max(aList)
データフレームのカラムを十の位で四捨五入する	df[col].round(-1)
八進数の文字列をbytesizeバイトのバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
直後の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
赤い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
クロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x')
散布図をライトスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
日付データが日付データより後ろかどうか	aDate > aDate2
ふたつの集合の∪	aSet.union(aSet2)
option: 色をミディアムパープルに指定する	color = 'mediumpurple'
線グラフの色をゲインズボロに変更する	plt.plot(データ列x, データ列y, color='gainsboro')
日付時刻データが日付時刻データより遅いか調べる	aDatetime > aDatetime2
プラットフォームの符号付き整数の最大値を確認する	sys.maxsize
濃いシアン色でヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
グラフで用いる横軸に軸名をつける	plt.xlabel('x軸ラベル')
配列と数列についての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
文字列がタプルの要素でないか確認する	element not in aTuple
ミディアムスプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
option: 大バツ印を用いる	marker = 'X'
バリーウッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
横棒グラフを青色として描画する	plt.barh(データ列x, データ列y, color='blue')
マッピングからキーの値か、もしくは要素を得る	aDict.get(key, element)
右側から空白で文字列を区切る	s.rsplit()
イテラブルとリストの散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
日付時刻データが水曜日か	aDatetime.weekday() == 2
ファイルを文字コードtextとしてオープンする]	open(filepath, encoding=text)
option: ▽印を使う	marker = 'v'
両端キューの先頭を求める	deq[0]
option: グラフの色をライトグレーに変更する	color = 'lightgrey'
ターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
2進文字列を整数に変換する	int(s, 2)
実数はNaN	math.isnan(x)
散布図に四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s')
オブジェクトにプロパティがあるか	hasattr(obj, プロパティ名)
折れ線グラフの△マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
ヒストグラムの色をディムグレーにセットする	plt.hist(データ列, color='dimgrey')
双方向キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
ゼロ埋めされた三二ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
データフレームのそれぞれのグループ毎の最小値	df.groupby(column).min()
ペルー色でヒストグラムを描画する	plt.hist(データ列, color='peru')
ヒストグラムの色をインディアンレッドに変更する	plt.hist(データ列, color='indianred')
option: 色をビスクに設定する	color = 'bisque'
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
リストから文字列と等しい最初の要素を取り除く	aList.remove(element)
青い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
オレンジ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
読み込みモードとしてファイルパスをオープンして]、fとする	f = open(filepath, mode='r')
線グラフをダークシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ヒストグラムの色をゴールデンロッドに指定する	plt.hist(データ列, color='goldenrod')
nがn2より小さい	n < n2
日付時刻データを文字列を用いてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
プロットの色を全般的に濃くする	sns.set(pallete='deep')
タイムスタンプデータからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
文字列リストを結合し、ひとつの文字列にする	''.join(map(str, iterable))
nが負の整数か	n < 0
ヒストグラムの色をミディアムバイオレットレッドにする	plt.hist(データ列, color='mediumvioletred')
ヒストグラムの色をグリーンに指定する	plt.hist(データ列, color='green')
折れ線グラフを点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームのNaNを最小値に指定する	df.fillna(df.min())
リストを太字で表示する	print(f'\033[1m{value}\033[0m')
日付時刻データの月数を見る	aDatetime.month
散布図のクロスマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
組の末尾からn番目以前の要素を得る	aTuple[:-n]
ファイルから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
折れ線グラフをシャルトリューズ色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
パラメータが無限大に近づく時数値の極限値を計算する	sympy.limit(e, z, oo)
xが1、もしくは2か判定する	x == 1 or x == 2
折れ線グラフの菱形マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
Pythonパス	sys.path
2つのオブジェクトは同じ参照か確認する	obj is obj2
線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
辞書のエントリ数	len(aDict)
データフレームの列の一意な値	df[col].unique()
イテラブルを2回あわせたデカルト積	itertools.product(iterable, repeat=2)
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
option: グラフの色を淡い茶色に設定する	color = 'tan'
n個に等間隔で配列をビン分割する	pd.cut(aArray, n)
データフレームを'A'列によってソートし、、更新する	df.sort_values(by='A', inplace=True)
option: 印を下三角に変更する	marker = 'v'
ファイルの絶対パスを使う	os.path.abspath(filepath)
ASCII限定として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームを'A'列によって小さい順に並べて、更新する	df.sort_values(by='A', ascending=True, inplace=True)
線グラフの色をホワイトスモークにする	plt.plot(データ列x, データ列y, color='whitesmoke')
option: グラフの色をチョコレートにセットする	color = 'chocolate'
2つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
パターンに文字列全体を複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
散布図のクロスマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
ミントクリームにヒストグラムの色を設定する	plt.hist(データ列, color='mintcream')
実行結果を赤色にする	f'\033[31m{value}\033[0m'
整数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.int)
線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
棒グラフをフクシア色として描画する	plt.bar(データ列x, データ列y, color='fuchsia')
文字列内にひとつでも空白が含まれるか確認する	any(c.isspace() for c in s)
分類モデル教師データでを学習する	model.fit(説明変数, 目的変数)
データ列の欠損値をモードにセットする	ds.fillna(ds.mode().iloc[0])
全要素を０で初期化した三二ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int16)
グリーンイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
縦棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
横棒グラフをダークレッド色として描画する	plt.barh(データ列x, データ列y, color='darkred')
散布図のダイアモンド印を青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
整数nを二進数表現にする	bin(n)
データ列の記述統計量	ds.describe()
上限を指定して、両端キュー	collections.deque(maxlen=n)
リストを黄色でプリントする	print(f'\033[33m{value}\033[0m')
散布図のマーカーをダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
棒グラフをゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='goldenrod')
黄色色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
Pandasで書式fmtとして文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
グラフの見た目をデフォルトでいい感じに設定する	sns.set()
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
カラムの欠損値を直後の値で埋める	ds.fillna(method='bfill')
列とカラムの重複を消す	df.drop_duplicates(subset=column)
ファイルからn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
option: リネン色を使用する	color = 'linen'
データフレームの上位25%を求める	df.quantile(0.25)
グラフの縦軸の軸ラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
異なるカラムをキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
辞書をインデント幅nのJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
n×n2の２次元リスト	[[0] * n for _ in range(n2)]
データフレームの値を正規表現patternでまとめて置換する	df.replace(pattern, repl, regex=True)
データフレームを'A'列によって降順に破壊的に並べる	df.sort_values(by='A', ascending=False, inplace=True)
散布図をダークターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
横棒グラフを描画し、、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
二次元タプルをflattenする	sum(aTuple)
データ列は何年か確認する	ds.dt.year
option: 淡いピンク色にグラフの色を変更する	color = 'lightpink'
現在が何日か知る	datetime.datetime.today().day
実数を浮動小数点数で割った剰余を求める	math.remainder(x, x2)
部分文字列が文字列の開始位置より後に含まれないかどうか調べる	s.find(sub, start) == -1
要素は集合のメンバー	element in aSet
散布図を紺碧色として描画する	plt.scatter(データ列x, データ列y, color='azure')
散布図をバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='violet')
マップの項目名に対応した値	aDict.get(key)
縦棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
ヒストグラムをペールグリーン色として描画する	plt.hist(データ列, color='palegreen')
ブラック色でヒストグラムを描画する	plt.hist(データ列, color='black')
データフレームの中のNaNの個数をカウントする	df.isna().sum()
折れ線グラフをスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='slateblue')
ベクトルの平均値	np.mean(aArray)
折れ線グラフの色をブラックにする	plt.plot(データ列x, データ列y, color='black')
関数によって表データをまとめたグループ	df.groupby(関数)
スライド用にグラフを指定する	sns.set(context='talk')
rgbの丸マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
数列とリストについて散布図を描画し、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
データフレームのシェイプを見る	df.shape
配列を度数分布図にする	plt.hist(データ列)
データフレームの列の空文字を未入力値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
データフレームの中で列と列の重複を調べる	df.duplicated(subset=[column, column2])
▼印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
最後の部分文字列によって文字列を二分割する	s.rpartition(sub)
符号なし８ビット整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
文字列を緑色で出力する	print(f'\033[32m{value}\033[0m')
リストと数列の散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ファイルを閉じる	f.close()
折れ線グラフに右三角印を用いる	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフの色をダークターコイズにする	plt.plot(データ列x, データ列y, color='darkturquoise')
行列の型	aArray.dtype()
データフレームのリスト列の中にいくつ未入力値が存在するかカウントする	df[aList].isna().sum()
横棒グラフをマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='magenta')
行列の行ごとの最小	np.min(aArray, axis=1)
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgray')
乱数で要素を埋めた行列を作る	np.random.random((行数, 列数))
x軸の目盛に文字列を設定する	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
折れ線グラフをベージュ色として描画する	plt.plot(データ列x, データ列y, color='beige')
日付時刻データにn時間分、足す	aDatetime + datetime.timedelta(hours=n)
大文字・小文字を無視して事前に正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データフレームを百の位で丸めて、整数にする	df.round(-2).astype(int)
option: ダークバイオレットに色を指定する	color = 'darkviolet'
ファイルを改行を取り除いて一行ずつ読む	f.readline()
イテラブルとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームを表示するとき折り返しをオフに変更する	pd.set_option('expand_frame_repr', False)
線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
nがn2よりも小さいかどうか調べる	n < n2
データフレームのカラムのNaNを平均に変更する	df[col].fillna(df[col].mean())
データフレームをグループ化し列に対し平均値を計算する	df.groupby(column)[column2].mean()
赤いダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
JSON形式のファイル入力を辞書に変換する	json.load(fin)
文字列の終了位置以前に部分文字列があるか確認する	s.find(sub, 0, end) != -1
赤い大バツマーカーをリストとデータ列の散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
横棒グラフをライトゴールドロディイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
イテラブルとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
JSON文字列を読み込む	json.loads(jsonString)
データフレームから列を一つだけ選択する	df[[column]]
データ列をビン数nで分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
線グラフをライトスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームを小さい順に列で並べ直して、更新する	df.sort_values(by=column, ascending=True, inplace=True)
カラムを1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
2つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
空の多重集合を用意する	collections.Counter()
文字列が全て十進数字かどうか調べる	s.isdecimal()
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
折れ線グラフの色をオレンジレッドに変更する	plt.plot(データ列x, データ列y, color='orangered')
option: サーモンにグラフの色を設定する	color = 'salmon'
ヒストグラムの色をライムに変更する	plt.hist(データ列, color='lime')
上限長nの両端キューを生成する	collections.deque(maxlen=n)
整数の順列の総数	math.perm(n)
カレント作業ディレクトリをfilepathにする	os.chdir(os.dirname(filepath))
日付時刻データが金曜日	aDatetime.weekday() == 4
実数を小数点第一位で丸める	round(x, 1)
2つの数値をカンマで区切って表示する	print(value, value2, sep=',')
数値を方程式として解く	sympy.solve(e)
集合を変更不能な集合に変換する	frozenset(aSet)
option: マーカーをダイアモンドに変える	marker = 'D'
フォレストグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
回帰モデルを訓練する	model.fit(説明変数, 目的変数)
半透明の一点鎖線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
タプルから項目名で指定された項目を取り出す	aDict.pop(key)
seabornのデフォルト見た目を適用する	sns.set()
データフレームを列ごとにグループ化し、、分散を計算する	df.groupby(column).var()
データ列の中にいくつNaNが含まれるか数える	ds.isna().sum()
データフレームのリストカラムのNaNを前の値に設定する	df[aList].fillna(method='ffill')
option: 最初の行をヘッダに設定する	header = 0
縦棒グラフをライトスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの大バツ印を青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
データフレームのリストカラムの中に文字列と日付データがあるか	df[aList].isin([value, value2])
option: グラフの色をアクアにセットする	color = 'aqua'
10を底とする対数を算出する	math.log10(x)
文字列をカンマで分割して、列挙する	s.split(',')
線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
データフレームの欠損値を平均で埋める	df.fillna(df.mean())
折れ線グラフに青い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
整数nがタプルのどれかかどうか調べる	n in aTuple
スラグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
散布図の四角印の色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
等量でn個にデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
ペルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
線グラフの色をスチールブルーに変更する	plt.plot(データ列x, データ列y, color='steelblue')
要素がセットに含まれるか確認する	element in aSet
データ列の未入力値を最大値に設定する	ds.fillna(ds.max())
散布図を黒い四角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
グラフの描画で色差別なく色を使用する	sns.set(pallete='colorblind')
列によってで降順にデータフレームを並べ直す	df.sort_values(by=column, ascending=False)
散布図の▽マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
有理数モジュールをインポートする	import fractions
折れ線グラフの色をミディアムバイオレットレッドにセットする	plt.plot(データ列x, データ列y, color='mediumvioletred')
マゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='magenta')
カラムの中にと文字列がいくつあるか数える	ds.isin([value, value2]).sum()
乱数で要素を埋めた配列を作成する	np.random.random(N)
正規分布による累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ゼロ埋めされた８ビット整数型の行列	np.zeros(要素数, dtype=np.int8)
縦棒グラフをインディゴ色を使って描画する	plt.bar(データ列x, データ列y, color='indigo')
折れ線グラフをカーキ色として描画する	plt.plot(データ列x, データ列y, color='khaki')
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='gray')
配列とリストについて散布図を描画し、、ポイントマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: ピーチパフにグラフの色を設定する	color = 'peachpuff'
文字列を最後の部分文字列で分割したときの前半の文字列を見る	s.rpartition(sub)[0]
方程式の解を計算する	sympy.solve(e)
本日の曜日を整数で見る	datetime.datetime.today().weekday()
点線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列はリストに含まれるか	element in aList
データフレームのカラムの欠損値をメディアンに変更する	df[col].fillna(df[col].median())
実数を万の位で四捨五入する	round(x, -4)
列でデータフレームをソートする	df.sort_values(by=column)
文字列を空白を使って区切り、、整数リストに変換する	map(int, s.split())
option: オリーブにグラフの色をセットする	color = 'olive'
商と余りを同時に求める	divmod(x, y)
横棒グラフを紺碧色を使って描画する	plt.barh(データ列x, データ列y, color='azure')
縦棒グラフをマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='magenta')
option: グラフの色をスチールブルーに変更する	color = 'steelblue'
数式のパラメータについてのn階微分を計算する	sympy.diff(e, z, n)
フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
データフレームのn行目を破壊的に消す	df.drop(n, axis=0, inplace=True)
カウンタを低頻度方から列挙する	aCounter.most_common()[::-1]
スタック中の値の数を数える	deq.count(element)
タイムスタンプデータと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()
ランダムにn行をデータフレームから抽出する	df.sample(n)
棒グラフをゴールド色を用いて描画する	plt.bar(データ列x, データ列y, color='gold')
折れ線グラフの色をサーモンに指定する	plt.plot(データ列x, データ列y, color='salmon')
x座標の目盛の値を変更する	plt.xticks(目盛りの値リスト)
実数の小数部を求める	math.modf(x)[0]
散布図をターコイズ色を使って描画する	plt.scatter(データ列x, データ列y, color='turquoise')
横棒グラフを描いて、中央寄せする	plt.barh(ラベル列, データ列, align='center')
回帰分析をバギングで行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
箱ひげ図を描画して、平均を追加する	plt.boxplot(データ列, showmeans=True)
シスル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ライトシアン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
小さい方からタプルの要素をソートする	sorted(aTuple, reverse=True)
回帰分析をスタッキングで行う	sklearn.ensemble.StackingRegressor()
パステル調にカラーパレットをグラフの描画で用いる	sns.set(pallete='pastel')
アイボリー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
横棒グラフをオールドレース色を使って描画する	plt.barh(データ列x, データ列y, color='oldlace')
空白で文字列を分割し、、文字列リストに変換する	s.split()
option: 青緑に色を設定する	color = 'teal'
スピアマン順位相関係数としてデータフレームの相関行列	df.corr(method='spearman')
部分文字列が部分文字列で開始するか調べる	s.startswith(sub)
散布図にrgbの丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
線グラフの色をダークスラテグレーにセットする	plt.plot(データ列x, データ列y, color='darkslategray')
四角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをフローラルホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='floralwhite')
文字列の大文字小文字を変換する	s.casefold()
option: 白色を用いる	color = 'white'
文字列をISO書式として日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: どのカラムも行にしない	index_col = None
データフレームの最後n行を抽出する	df.tail(n)
データフレームのリストカラムの中にいくつ文字列があるかカウントする	df[aList].isin([value]).sum()
rgbの左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
リストをビン数nを用いてビン分割する	pd.cut(aList, n)
コーラル色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
オレンジ色を用いてヒストグラムを描画する	plt.hist(データ列, color='orange')
本日が日曜日か	datetime.datetime.today().weekday() == 6
昇順にリストの要素をソートする	sorted(aList, reverse=True)
二つのデータフレームを列'A'と列'B'をキーにして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
縦棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームをカラムによってグループ化し、、個数を算出する	df.groupby(column).count()
イテラブルを出現回数して、カウンタを更新する	aCounter.update(iterable)
オリーブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
カラムをキーにして2つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
平均と標準偏差から乱数を発生させる	random.normalvariate(mu=0.5, sigma=0.2)
四角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
縦棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
ダークターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
タイムスタンプデータにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフの印を下三角にする	plt.plot(データ列x, データ列y, marker='v')
option: ブラウンを使用する	color = 'brown'
タイムスタンプデータと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
データフレームのそれぞれのグループ毎の最大値を算出する	df.groupby(column).max()
文字列が文字列リストに存在するかどうか調べる	s in aStringList
N未満までの配列	np.arange(N)
option: 色をライトスカイブルーに指定する	color = 'lightskyblue'
文字列リストをsepを区切りとして結合する	sep.join(aStringList)
表データを列でグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
作画に使用するフォントを指定する	sns.set(font=フォント名)
列概要	df.info()
データフレームの欠損値を前の行の値に設定する	df.fillna(method='ffill')
集合から別のセットの要素を除く	aSet.difference_update(aSet2)
データフレームのリストカラムの欠損値を後の行の値で補う	df[aList].fillna(method='bfill')
option: オレンジにグラフの色をする	color = 'orange'
線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
散布図をイエローグリーン色として描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
データフレームをCSVでJSONLファイルに保存する	df.to_csv(filename)
データ列のNaNを最小値で埋める	ds.fillna(ds.min())
ファイルを文字列の示すエンコーディングを用いてオープンする]	open(filepath, encoding=s)
青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
プロットに凡例を追記する	plt.legend(['凡例A', '凡例B'])
option: スラッシュをセパレータで用いる	sep = '/'
option: エラーを無視する	errors = 'ignore'
データ列の中にある日付データの合計を数える	ds.isin([value]).sum()
散布図の丸印の太さを変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
SJISでデータフレームをJSONLファイルに保存する	df.to_csv(filename, encoding='shift_jis')
ミディアムシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
option: マーカーをバツに指定する	marker = 'x'
折れ線グラフの星印の線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
データフレームのリスト列の第三四分位数	df[aList].quantile(0.75)
散布図の大バツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
日本語をプロット中で表示できるようにする	sns.set(font='IPAexGothic')
グラフの全般的に色を明るくする	sns.set(pallete='bright')
漢字が文字列にあるか調べる	re.search('[\u4E00-\u9FD0]', s)
ヒストグラムをミディアムアクアマリン色として描画する	plt.hist(データ列, color='mediumaquamarine')
文字列を部分文字列によって二分する	s.partition(sub)
リストの個数	len(aList)
ヒストグラムをオーキッド色として描画する	plt.hist(データ列, color='orchid')
縦棒グラフをシアン色として描画する	plt.bar(データ列x, データ列y, color='cyan')
文字列の先頭でケースを無視してパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
散布図の▼マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
year年day月を日付時刻にする	datetime.datetime(year=year, month=month, day=1)
インデント幅nで、辞書をJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームを表示するとき、表示される最大列数を増やす	pd.set_option('display.max_columns', n)
数列を横棒グラフにする	plt.barh(ラベル列, データ列)
リストとリストについての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
追加できるように文字列の示すエンコーディングで既存のファイルをオープンする]	open(filepath, mode='a', encoding=s)
文字列の出力を改行せず行う	print(value, end='')
ヒストグラムの色をベージュに指定する	plt.hist(データ列, color='beige')
nullに等しいもの	None
タイムスタンプデータをn日前にする	aDatetime - datetime.timedelta(days=n)
ファイルを追加モードとしてオープンする]	open(filepath, mode='a')
データフレームを'A'列によって集約する	df.groupby('A')
データフレームのリスト列を1000の位で丸める	df[aList].round(-3)
散布図の印を星印にする	plt.scatter(データ列x, データ列y, marker='*')
タプルを順に表示する	print(*aTuple)
モデルの精度を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
縦方向に二つのデータフレームを連結する	pd.concat([df, df2])
日付データの月数を見る	aDate.month
文字列をコロンで分割して文字列リストにする	s.split(':')
オレンジレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
option: 青紫を使う	color = 'violet'
散布図を▲印で描画する	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムをサンディーブラウン色として描画する	plt.hist(データ列, color='sandybrown')
珊瑚色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
赤い一点鎖線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
縦棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
配列と数列の散布図に左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<')
赤い実線を用いてデータ列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
Pandasで、データ列を日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
セットのイミュータブル版	frozenset(aSet)
タプルの最後を取り除く	aTuple[:-1]
option: グラフの種類を一点鎖線にセットする	linestyle = 'dashbot'
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しないか調べる	s.find(sub, start, end) == -1
線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
リストとリストについての散布図にrgbの右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データ列のエポック秒から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
横棒グラフをビスク色として描画する	plt.barh(データ列x, データ列y, color='bisque')
空のロバスト回帰モデルを準備する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
日付データにn秒分加算する	aDate + datetime.timedelta(seconds=n)
データフレームをグループ化し列に対し最大値を求める	df.groupby(column)[column2].max()
3つの変数を順にプリントする	print(value, value2, value3)
線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
赤い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
文字列をシンボル化して、パラメータにする	z = sympy.Symbol(s)
実数を百の位で四捨五入する	round(x, -2)
ヒストグラムの色をオレンジにセットする	plt.hist(データ列, color='orange')
option: グラフの線の種類を一点鎖線に設定する	linestyle = 'dashbot'
文字列がいつまでも繰り返すイテラブル	itertools.repeat(element)
整数nの二進数文字列を使う	bin(n)[2:]
最頻値でデータフレームの列の欠損値を埋める	df[col].fillna(df[col].mode().iloc[0])
線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
option: ▽マーカーを描画する	marker = 'v'
折れ線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
折れ線グラフをスノー色として描画する	plt.plot(データ列x, データ列y, color='snow')
rgbのポイントマーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
リストをビン数nとして等量でビン分割する	pd.qcut(aList, n)
ヒストグラムを実線でプロットする	plt.hist(データ列, linestyle='solid')
線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームの中に日付データと日付データがいくつあるか求める	df.isin([value, value2]).sum()
ヒストグラムをダークスラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategray')
縦棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
PandasでUNIX秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
ヒストグラムの色をサドルブラウンに指定する	plt.hist(データ列, color='saddlebrown')
データフレームの未入力値を平均値に設定する	df.fillna(df.mean())
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
２つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
文字列全体を正規表現に大文字・小文字を無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
文字列をパターンによって置き換える	re.sub(pattern, newsub, s)
フクシア色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
option: ミディアムターコイズ色を用いる	color = 'mediumturquoise'
ファイルを文字コードtextで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
散布図をアクア色として描画する	plt.scatter(データ列x, データ列y, color='aqua')
文字列が全てアスキー文字かどうか調べる	s.isascii()
日付時刻データをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
重複した行のみを抽出する	df[df.duplicated(keep=False)]
リストと配列について散布図を描いて、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
データフレームのリスト列が正規分布からどれだけ歪んでいるか調べる	df[aList].kurt()
nがn2と等しい	n == n2
散布図をrgbのポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
組のn番目以降の部分を取り出す	aTuple[n:]
グラフにグリッド線を付ける	plt.grid(True)
option: インディゴにフォントの色を指定する	color = 'indigo'
nをバイナリにする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
rgbの四角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
プロットの色をパステル調にする	sns.set(pallete='pastel')
データフレームのNaNを最頻値で埋める	df.fillna(df.mode().iloc[0])
データフレームのNaNを50パーセンタイルに設定する	df.fillna(df.median())
option: 文字コードを文字列の示すエンコーディングに設定する	encoding = s
データフレームのカラムは何時か調べる	df[col].dt.hour
円グラフにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
実数のkを底とする対数	math.log(x, k)
最大長nの双方向キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
データフレームを'A'列によってで大きい順に並べ直す	df.sort_values(by='A', ascending=False)
nが5の倍数	n % 5 == 0
黒い▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
option: ライム色を用いる	color = 'lime'
K最近傍法として回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
値∈セット	element in aSet
option: ライトコーラルにグラフの色を変更する	color = 'lightcoral'
配列を箱ひげ図で描画する	plt.boxplot(データ列)
ダークシアンにヒストグラムの色を指定する	plt.hist(データ列, color='darkcyan')
横棒グラフをハニーデュー色として描画する	plt.barh(データ列x, データ列y, color='honeydew')
折れ線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
option: グラフの色をゴールドに指定する	color = 'gold'
真スーパーセットか調べる	aSet > aSet2
折れ線グラフを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
双方向キューは空でないか	len(deq) != 0
両端キューの末尾にイテラブルの要素を追加する	deq.extend(iterable)
ヒストグラムにカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
カウンタ同士でインターセクションを求める	aCounter & aCounter2
分類木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
等量でリストをn個にビン分割する	pd.qcut(aList, n)
列が正規分布からどれだけ、尖っているか調べる	ds.skew()
グラフの中の縦軸に説明を付ける	plt.ylabel('y軸ラベル')
丸印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
点線でヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
列の組み合わせ	itertools.combinations(iterable, n)
SJISとしてファイルパスを書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
データフレームの最初n行	df.head(n)
散布図に赤い▼マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='r')
組のオブジェクトが最初に見つかる位置	aTuple.index(element)
ドジャーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
nでシードを固定化する	random.seed(n)
データフレームの列と列をドロップする	df.drop([column, column2], axis=1)
疑似乱数を算出する	random.random()
配列とリストの散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
Pandasでデータフレームのcollをdatetime64型にする	pd.to_datetime(df[col])
ペールグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データフレームの欠損値が含まれる箇所を	df.style.highlight_null()
散布図に赤い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='r')
双方向キューに要素をエンキューする	deq.appendleft(element)
ヒストグラムの色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
最大値と最小値としてデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: フォントの色をダークマゼンタに設定する	color = 'darkmagenta'
データフレームの列を散布図で可視化してカテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
SDGとしてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
nがn2未満またはn3以上か	n < n2 or n >= n3
ヒストグラムをライム色として描画する	plt.hist(データ列, color='lime')
rgbの▽マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ミディアムバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
折れ線グラフをゲインズボロ色を用いて描画する	plt.plot(データ列x, データ列y, color='gainsboro')
データ列の各値が何回出現するか見る	ds.value_counts()
x軸の目盛を表示しない	plt.xticks([])
列を累積した列	itertools.accumulate(iterable, operator.mul)
ゴーストホワイト色として線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
二つのカウンタのいずれかに含まれる値	aCounter | aCounter2
スチールブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
option: ラベンダーにグラフの色を設定する	color = 'lavender'
連番の配列の作成する	np.arange(開始値, 終了値, 等差)
破線でヒストグラムを描く	plt.hist(データ列, linestyle='dashed')
既存の行列をベースに全要素が0の配列を作る	np.zeros_like(aArray)
データフレームのインデックスの名前リスト	df.index
リストをn回結合する	aList * n
赤い一点鎖線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
n個に配列を分割し、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームのリスト列を百の位で丸めて、整数にする	df[aList].round(-2).astype(int)
アイボリーにヒストグラムの色を設定する	plt.hist(データ列, color='ivory')
option: アイボリーを用いる	color = 'ivory'
ヒストグラムを耐火レンガ色として描画する	plt.hist(データ列, color='firebrick')
偽陽性を抑えたい指標を用いる	sklearn.metrics.precision_score(正解データ列, 予測データ列)
折れ線グラフの下三角印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
数値のパラメータに数値を代入する	e.subs(z, e2)
option: ミスティローズにグラフの色を指定する	color = 'mistyrose'
リストと数列についてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
実行を正常停止する	sys.exit(0)
文字列全体がパターンにASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
プロットを描画する準備をする	import matplotlib.pyplot as plt
行によってデータフレームを整列する	df.sort_index()
文字列内にひとつでも小文字が含まれる	any(c.islower() for c in s)
リストとデータ列の散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
リストの先頭を捨てる	aList[1:]
散布図の印の線幅を変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
黒い下三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームとデータ列を横方向につなぐ	pd.concat([df, ds], axis=1)
y座標の目盛の値を変更する	plt.yticks(目盛りの値リスト)
xの小数点以下'4'桁までを出力する	print(':.4f'.format(x))
双方向キューに値をプッシュする	deq.append(element)
option: ダークオレンジ色を使用する	color = 'darkorange'
最大値・最小値の範囲で一様な乱数を生成する	random.uniform(最小値, 最大値)
浮動小数点数の小数点以下を丸める	round(x)
ヒストグラムの色を茶色にセットする	plt.hist(データ列, color='brown')
色を色差別なくする	sns.set(pallete='colorblind')
組内の要素は少なくともひとつ真か調べる	any(aTuple)
散布図のマーカーを下三角印にする	plt.scatter(データ列x, データ列y, marker='v')
データフレームを列によってによって破壊的に並べる	df.sort_values(by=column, inplace=True)
文字列リストにイテラブルを変換して、部分文字列によって連結する	sub.join(map(str, iterable))
日付データが水曜日かどうか	aDate.weekday() == 2
文字コードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
マッピングの値の一覧	aDict.values()
option: ミディアムスプリンググリーンを使用する	color = 'mediumspringgreen'
option: グラフを実線に指定する	linestyle = 'solid'
文字列の中で複数行対応としてパターンにマッチした文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
散布図をダーク・スラテグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
縦棒グラフを描いて、左寄せする	plt.bar(ラベル列, データ列, align='edge')
データフレームを複数の列の値によって集約する	df.groupby(columns)
数列の移り変わりを半透明の点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ラインを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
散布図を濃いシアン色として描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
文字の文字コードを見る	ord(ch)
折れ線グラフの色をライトグレーにセットする	plt.plot(データ列x, データ列y, color='lightgray')
線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームのカラムを千の位で丸める	df[col].round(-3)
ヒストグラムをインディアンレッド色として描画する	plt.hist(データ列, color='indianred')
リストにリストを展開する	aList.extend(aList2)
option: フォントの色をインディアンレッドに変更する	color = 'indianred'
散布図にダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
option: マーカーの色を設定する	markerfacecolor = '#800080'
オブジェクトの型	type(obj)
option: やわらかい青を使用する	color = 'cornflowerblue'
nとn2が等しい	n == n2
折れ線グラフの色をスノーに指定する	plt.plot(データ列x, データ列y, color='snow')
横軸を対数に変更する	plt.xscale('log')
データフレームとデータフレームの列を横向きに連結する	pd.concat([df, ds], axis=1)
rgbの下三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
数式をパラメータについてn階微分する	sympy.diff(e, z, n)
ヒストグラムをゴーストホワイト色を使って描画する	plt.hist(データ列, color='ghostwhite')
データフレームの行をリセットする	df.reset_index()
新しいロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
折れ線グラフの丸マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
文字列の右端からタブを消す	s.rstrip('\t')
ダークシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図をハニーデュー色として描画する	plt.scatter(データ列x, データ列y, color='honeydew')
マップの項目名を列挙する	aDict.keys()
黒いダイアモンドマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
ディムグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
データフレームを表示するとき、データフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
ダイアモンド印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
option: フォントの色をレモンシフォンに変更する	color = 'lemonchiffon'
スカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
アルファベットの大文字を全部求める	string.ascii_uppercase
リストをベクトルに変換する	np.array(aList)
オブジェクトはリストかタプルかどうか	isinstance(obj, (list)
option: 右三角印を使う	marker = '>'
散布図の印をバツにする	plt.scatter(データ列x, データ列y, marker='x')
２つのオブジェクトが等しいかどうか確認する	obj == obj2
折れ線グラフの大バツ印を黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
rgbのバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: 読み込むシート名をnamesに設定する	sheet_name = names
リストとリストについて散布図を描いて、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
変数について数式のインテグラルを行う	sympy.integrate(e, z)
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
プレゼンにグラフを設定する	sns.set(context='talk')
データフレームをTSVから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
コーンフラワーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
CSVからデータフレームを読み込む	pd.read_csv(filename, sep=',')
option: ブラウンに色を設定する	color = 'brown'
option: エンコーディングをSJISにする	encoding = 'shift_jis'
オブジェクトは論理値か調べる	isinstance(obj, bool)
表データから指定された列を抽出する	df[[column]]
ヒストグラムをゲインズボロ色として描画する	plt.hist(データ列, color='gainsboro')
データフレームのカラムが何秒か調べる	df[col].dt.second
折れ線グラフの色を茶色に指定する	plt.plot(データ列x, データ列y, color='brown')
勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
列の空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
数列の出現頻度を可視化する	plt.hist(データ列)
散布図の左三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
タイムスタンプデータをタプルにする	aDatetime.timetuple()
折れ線グラフの色をダークグリーンに指定する	plt.plot(データ列x, データ列y, color='darkgreen')
ライトスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightskyblue')
nが無限に続く数列を得る	itertools.repeat(n)
option: 色をダークオリーブグリーンに変更する	color = 'darkolivegreen'
整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int)
option: ダークグレーにグラフの色を設定する	color = 'darkgrey'
データフレームから指定された４列のみ取り出す	df[[column, column2, column3, column4]]
昇順にデータフレームを複数の列によって整列する	df.sort_values(by=column, ascending=True)
ヒストグラムの色をクリムゾンにセットする	plt.hist(データ列, color='crimson')
散布図の四角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
日付時刻データが月曜日か判定する	aDatetime.weekday() == 0
線グラフの色をダークオーキッドにセットする	plt.plot(データ列x, データ列y, color='darkorchid')
スノー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
日付データにn分分足す	aDate + datetime.timedelta(minutes=n)
等間隔でデータ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
リストの末尾から要素を捨てる	aList.pop()
折れ線グラフの色をハニーデューにセットする	plt.plot(データ列x, データ列y, color='honeydew')
データ列を100の位で四捨五入して整数型にする	ds.round(-2).astype(int)
文字列内にひとつでも英数字が含まれるかどうか調べる	any(c.isalnum() for c in s)
ヒストグラムをやわらかい青色で描画する	plt.hist(データ列, color='cornflowerblue')
データフレームを列によって整列し、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
ダークオレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
データ列を千の位で四捨五入する	ds.round(-3)
追加できるようにSJISとして既存のファイルをオープンする]	open(filepath, mode='a', encoding='shift_jis')
データフレームのカラムは何月か調べる	df[col].dt.month
オブジェクトから属性を削除する	delattr(obj, プロパティ名)
データフレームからカテゴリデータの列名リストを見る	df.select_dtypes('object').columns
印字を全て使う	string.printable
ダークオーキッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ひとつ置きにタプルを取り出す	aTuple[::2]
回数を制限して文字列を置換する	s.replace(sub, newsub, n)
線グラフの色をシルバーに変更する	plt.plot(データ列x, データ列y, color='silver')
線グラフを色付きの実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
折れ線グラフを青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ヒストグラムの色をトマトに指定する	plt.hist(データ列, color='tomato')
実数のサインの逆数を計算する	math.asin(x)
空白文字を全て使う	string.whitespace
真部分集合か確認する	aSet < aSet2
option: フォントの色をミディアムブルーに設定する	color = 'mediumblue'
ユニークな値を要素とするベクトルを使う	np.unique(aArray)
ヒストグラムの色をダークカーキに変更する	plt.hist(データ列, color='darkkhaki')
ファイルから読み込みストリームを開いて]fとする	f = open(filepath, mode='r')
ダークシアン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
説明変数と目的変数で分類モデルを学習する	model.fit(説明変数, 目的変数)
リッジ回帰とロッソ回帰のハイブリットモデルを新規作成する	model = sklearn.linear_model.ElasticNet()
ライトコーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
データフレームの列で文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
データフレームを各列毎にグループ化し、、文字列というグループの個数を計算する	df.groupby(column).size()[s]
散布図のポイントマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
横棒グラフをスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='slateblue')
カテゴリでグループ化して、に箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
デックから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
赤いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームを各列と列の組み合わせ毎にグループ化し、、平均値を求める	df.groupby([column, column2], as_index=False).mean()
タプルとイテラブルの直積	itertools.product(iterable, iterable2)
option: ライトスレイグレーに色を設定する	color = 'lightslategrey'
配列の次元の数	aArray.ndim
データフレームを列によってグループ化し、、各グループごとの合計を算出する	df.groupby(column).sum()
散布図に青い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
黄緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
ヒストグラムをディープスカイブルー色を用いて描画する	plt.hist(データ列, color='deepskyblue')
rgbの大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
リストとリストについての散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
黒いバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
グラフのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
データフレームの列の中に日付データと文字列がいくつ存在するか求める	df[col].isin([value, value2]).sum()
実数のアークサイン	math.asin(x)
リストを分割数nとしてビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームを列名リストの値によってグループ化し、要約統計量を計算する	df.groupby(columns).describe()
赤い点線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
綺麗なグラフを使用する準備をする	import seaborn as sns
折れ線グラフの四角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
グラフをポスター用にセットする	sns.set(context='poster')
文字列の開始位置以降が部分文字列で始まるか	s.startswith(sub, start)
平均と分散でデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
散布図に左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
シャルトリューズにヒストグラムの色を変更する	plt.hist(データ列, color='chartreuse')
シルバー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
列をキーにして二つの表データを外部結合する	pd.merge(df, df2, on=column, how='outer')
タプルの最初を除く	aTuple[1:]
データフレームのそれぞれのグループ毎の合計を求める	df.groupby(column).sum()
データフレームの列のメディアン	df[col].median()
デピンクにヒストグラムの色を設定する	plt.hist(データ列, color='deeppink')
折れ線グラフの△印の線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームの列の中に含まれるの個数を数える	df[col].isin([value]).sum()
ASCII限定として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
ヒストグラムの色をインディゴにする	plt.hist(データ列, color='indigo')
文字列が文字列より辞書順で前	s < s2
横棒グラフをラベンダーブラッシュ色として描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
行列をフラット化する	aArray.flatten()
ダークグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
1からnまでの整数列を得る	list(range(1, n+1))
カラムを丸める	ds.round()
文字列は数値	s.isnumeric()
算術計算ライブラリをインポートする	import math
リストの推移を半透明の破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
折れ線グラフに青い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
二変数の最も小さい値を計算する	min(x, y)
散布図の大バツマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
イテラブルのセットを見る	set(iterable)
ヒストグラムの色をパレットトルコイズにする	plt.hist(データ列, color='paleturquoise')
要素がタプルの値として含まれているか調べる	element in aDict.values()
三整数の最小公倍数	math.lcm(n, n2, n3)
散布図に▲マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
二つの配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
データフレームの列を行に指定する	df.set_index(column)
一点鎖線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの列の最頻値を求める	df[col].mode()
縦棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
オブジェクトがリストの要素か調べる	element in aList
ダイアモンド印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
二つの文字列を改行で区切って表示する	print(value, value2, sep='\n')
ヒストグラムを青紫色を使って描画する	plt.hist(データ列, color='violet')
散布図でデータフレームを可視化し、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
散布図に右三角印を加える	plt.scatter(データ列x, データ列y, marker='>')
ヒストグラムの色をスラグレーにする	plt.hist(データ列, color='slategray')
辞書としてカウンタを更新する	aCounter.update(aDict)
表データを列を用いて大きい順に破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
データフレームとしてエクセルファイルファイルを読む	pd.read_excel(filename)
データフレームを2つの列によって小さい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データ列の中にと文字列がある	ds.isin([value, value2])
formatパターンの文字列をタイムスタンプにする	datetime.datetime.strptime(日付の書かれた文字列, format)
棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームを各列と列の組み合わせ毎に集計して、分散を求める	df.groupby([column, column2], as_index=False).var()
カウンタを少ない順にリストとして得る	aCounter.most_common()[::-1]
折れ線グラフの左三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
配列のユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
'A'列と'B'列でデータフレームをソートしてNaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
データフレームの平均値を求める	df.mean()
偽陰性を避けたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
表のstart行目からend行目まで抽出する	df[start:end]
option: ペールグリーンにフォントの色を設定する	color = 'palegreen'
最小値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].min())
フローラルホワイト色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
nはリストのどれかかどうか	n in aList
オブジェクトが組に含まれるか調べる	element in aTuple
ヒストグラムの色をミディアムスプリンググリーンに変更する	plt.hist(データ列, color='mediumspringgreen')
２変数の最大値を求める	max(x, y)
option: 追加モードに指定する	mode = 'a'
線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
リストとしてデータフレームの指定された列を抽出する	df[column].values.tolist()
ファイルパスからファイル名を取り出す	os.path.basename(filepath)
option: ディムグレーにグラフの色を設定する	color = 'dimgrey'
逆双曲線余弦	math.acosh(x)
タプルの最初のn要素を取り除く	aTuple[n:]
配列の行ごとの平均値を計算する	np.mean(aArray, axis=1)
ロバストなクラス分類を行う	model = sklearn.linear_model.HuberClassifier()
ゼロ埋めされた符号なし８ビット整数型の行列	np.zeros(要素数, dtype=np.uint8)
ASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
文字列が全て空白文字からなるかどうか調べる	s.isspace()
折れ線グラフを色付きの一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームから型リストのデータ型の列を除外する	df.select_dtypes(exclude=typeList)
タプルの平均	sum(aTuple)/len(aTuple)
文字列の中で大文字・小文字を無視してパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
縦軸の目盛りに文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
ピーチパフ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
文字列の末尾から改行を取り除く	s.rstrip('\n')
折れ線グラフの右三角印の線幅を設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームの列の欠損値を最小値に設定する	df[col].fillna(df[col].min())
補足の位置を指定する	plt.legend(loc=(x, y))
ライトスレイグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ライトゴールドロディイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
辞書をソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
リストとリストの散布図を描き、、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
option: オレンジレッド色を用いる	color = 'orangered'
環境がMacOSか調べる	sys.platform.startswith('darwin')
横棒グラフをトマト色を使って描画する	plt.barh(データ列x, データ列y, color='tomato')
option: グラフの色をミディアムバイオレットレッドに指定する	color = 'mediumvioletred'
オブジェクトは浮動小数点数型かどうか確認する	isinstance(obj, float)
ヒストグラムをミディアムオーキッド色として描画する	plt.hist(データ列, color='mediumorchid')
文字列中にひとつでも非アルファベットがあるか調べる	any(not c.isalpha() for c in s)
ブラック色で散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgrey')
ミディアムアクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
数式を浮動小数点数にする	float(e)
書き込みモードでファイルパスを開いて]、fとする	f = open(filepath, mode='w')
ミスティローズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
option: 四角マーカーを用いる	marker = 's'
正則化付き線形回帰モデルを準備する	model = sklearn.linear_model.ElasticNet()
ベクトルの列ごとの標準偏差	np.std(aArray, axis=0)
16進数文字列を整数に変換する	int(s, 16)
プロットのx軸とy軸の比率を等しくする	plt.axis('equals')
データフレームのn行目より後ろ抽出する	df[n:]
データフレームのリストカラムを10の位で四捨五入する	df[aList].round(-1)
ベクトルの個数を見る	aArray.size
option: モカシンにフォントの色を変更する	color = 'moccasin'
ダークスラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategray')
集合をタプルにする	tuple(aSet)
データフレームのリスト列の欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
データフレームの先頭のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
大バツマーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
データ列のNaNを直前の値で補う	ds.fillna(method='ffill')
浮動小数点数の逆正接	math.atan(x)
代数計算を使用する	import sympy
組の最初の文字列を探す	aTuple.index(element)
ネイビーにヒストグラムの色をする	plt.hist(データ列, color='navy')
両端キュー中の値の位置	deq.index(element)
リスト中の要素が少なくともひとつ真か調べる	any(aList)
青いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
棒グラフをダークオリーブグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
折れ線グラフに△マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
範囲を指定して部分文字列を文字列の末尾から探す	s.find(sub, start, end)
アンティークホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
リストにリストを追加し、広げる	aList.extend(aList2)
文字列からformatのパターンを用いて日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
横棒グラフをティール色で描画する	plt.barh(データ列x, データ列y, color='teal')
nが1、もしくは2か	n == 1 or n == 2
チョコレート色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
グラフを淡くする	sns.set(pallete='muted')
データフレームをグループ列ごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
シーケンスからカウンタを作成する	collections.Counter(iterable)
option: コーンズシルク色を用いる	color = 'cornsilk'
ベクトルの各要素に加算する	aArray + aArray2
プロットの凡例の場所を(x,y)に指定する	plt.legend(loc=(x, y))
エポック秒をタイムスタンプにする	datetime.datetime.fromtimestamp(timestamp)
横棒グラフをゲインズボロ色を使って描画する	plt.barh(データ列x, データ列y, color='gainsboro')
ライトシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
ライトシアンにヒストグラムの色を指定する	plt.hist(データ列, color='lightcyan')
散布図に大バツ印を用いる	plt.scatter(データ列x, データ列y, marker='X')
option: フォントの色をオレンジレッドに指定する	color = 'orangered'
option: フォントの色をロージーブラウンに変更する	color = 'rosybrown'
nが5で割り切れるかどうか	n % 5 == 0
option: 色をシルバーに設定する	color = 'silver'
データフレームのリストカラムのNaNをxにする	df[aList].fillna(x)
プロットの目的をポスターに設定する	sns.set(context='poster')
折れ線グラフのアルファをする	plt.plot(データ列x, データ列y, alpha=0.5)
option: ダークグリーンを使う	color = 'darkgreen'
nとn2のビット和を求める	n | n2
整数nが配列のどれか	n in aArray
一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
多次元データを多次元尺度構成法で淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
カウンタからタプルを引く	aCounter.subtract(aDict)
option: 珊瑚色を使う	color = 'coral'
データフレームを'A'列を用いてソートし、NaNを先頭にする	df.sort_values(by='A', na_position='first')
option: 文字列を区切りで使う	sep = s
明るく色をグラフの描画で使う	sns.set(pallete='bright')
option: ダークカーキに色を指定する	color = 'darkkhaki'
文字列をケースを無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
カラムの中にある文字列と文字列の個数をカウントする	ds.isin([value, value2]).sum()
実数に実数を乗算する	x * y
文字列を最後の部分文字列で二つに区切って、後半の文字列を使う	s.rpartition(sub)[-1]
データフレームの列の欠損値をxで置換する	df[col].fillna(x)
散布図に丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
リストをひとつ置きに抽出する	aList[::2]
四分位数で列を分割する	pd.qcut(ds, 4)
ふたつの集合のインターセクションのみに更新する	aSet.intersection_update(aSet2)
n個分左にデックの要素をローテンションする	deq.rotate(-n)
option: 深紅にフォントの色を設定する	color = 'crimson'
分類結果の適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図に青い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
文字列を最初の部分文字列で分けたときの後半の文字列を使う	s.partition(sub)[-1]
組み合わせを計算する	math.comb(n, k)
option: コーンフラワーブルーにグラフの色を設定する	color = 'cornflowerblue'
線グラフの色を珊瑚に設定する	plt.plot(データ列x, データ列y, color='coral')
マップの浅いコピーを準備する	aDict.copy()
タイムスタンプデータが日曜日	aDatetime.weekday() == 6
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
折れ線グラフの色をダークバイオレットに変更する	plt.plot(データ列x, データ列y, color='darkviolet')
リストの全ての値を取り除く	aList.clear()
データ列を丸めて、整数にする	ds.round().astype(int)
option: 色を青紫に設定する	color = 'violet'
シーケンスと列をzipする	itertools.zip_longest(iterable, iterable2)
配列をn個に等しい量になるようにビン分割する	pd.qcut(aArray, n)
シーケンスを累加したイテラブル	itertools.accumulate(iterable)
数字を全部見る	string.digits
横棒グラフをライトスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
列'A'と列'B'をキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームの列をNaNも加えてワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
ヒストグラムをミディアムブルー色を用いて描画する	plt.hist(データ列, color='mediumblue')
折れ線グラフのダイアモンド印の大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: フォレストグリーンにグラフの色を設定する	color = 'forestgreen'
データフレームを２つの列で並べる	df.sort_values(by=['A', 'B'])
option: バッファリングのサイズを大きくする	buffering = 4096
option: グラフの色をアンティークホワイトに指定する	color = 'antiquewhite'
ロードされたモジュールのリスト	sys.modules
option: ダークターコイズ色を使用する	color = 'darkturquoise'
rgbに棒グラフの色を指定する	plt.bar(ラベル列, データ列, color=rgb)
データフレームを関数によってグループ化し、基本統計量を計算する	df.groupby(関数).describe()
リストの先頭を使う	aList[0]
折れ線グラフの色をライトシアンに変更する	plt.plot(データ列x, データ列y, color='lightcyan')
データ列が何分か調べる	ds.dt.minute
option: マーカーの大きさを設定する	markersize = 2.0
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ファイルを開き]、書き込みストリームを見る	open(filepath, mode='w')
ガウス過程回帰モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
配列とデータ列についての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
配列から重複を除いた配列を作成する	np.unique(aArray)
分割数nでデータフレームの中の列をビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
データフレームの列のNaNを直後の値に設定する	df[col].fillna(method='bfill')
イテラブルをカウンタにする	collections.Counter(iterable)

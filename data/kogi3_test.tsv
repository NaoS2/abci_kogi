xが真かどうか調べる	bool(x)
実数の３乗を求める	x ** 3
行列のユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
横棒グラフをスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='springgreen')
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
日付時刻データにn日分加算する	aDatetime + datetime.timedelta(days=n)
散布図をクロスマーカーで描画する	plt.scatter(データ列x, データ列y, marker='x')
線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
ストリーム全体を行単位で分割して読み込む	f.readlines()
1行分標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
option: スラッシュをセパレータで使用する	sep = '/'
重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
横棒グラフを描画し、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
カラムの未入力値をメディアンに変更する	ds.fillna(ds.median())
ミディアムブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
シーケンスからベクトルを作る	np.array(iterable)
リストをビン数nとして分割する	pd.cut(aList, n)
線グラフの色をパレットトルコイズに指定する	plt.plot(データ列x, データ列y, color='paleturquoise')
ValueMapで一度にデータフレームの値を置き換える	df.replace(ValueMap)
データ列とリストについて散布図を描き、、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
辞書のキーを要素に変更する	aDict[key] = element
グラフをプレゼンに設定する	sns.set(context='talk')
2つの文字列は同じでないかどうか調べる	s != s2
変数を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
集合から全要素を除く	aSet.clear()
現在が木曜日か調べる	datetime.datetime.today().weekday() == 3
データフレームをTSVから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームの列で文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
多次元データをt-SNEを用いてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
ビン数nで等量で配列をビン分割する	pd.qcut(aArray, n)
実数の平方根を算出する	math.sqrt(x)
トマト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
ファイルからnバイト、読み込む	f.read(n)
文字列を部分文字列を用いて区切る	s.split(sub)
値を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
イテラブルと列をつなぐ	itertools.chain(iterable, iterable2)
オブジェクトは集合クラスかどうか調べる	isinstance(obj, set)
浮動小数点数を実数で整数除算する	x // y
文字列をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
整数nの十六進文字列を使う	hex(n)[2:]
バギングを用いて回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
グラフのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
データフレームのn行より後ろ抽出する	df[n:]
赤いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
フォーマットでデータフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
散布図をダークオリーブグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
Pandasで、データ列のエポック秒からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
ローングリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
option: マーカーを上三角に設定する	marker = '^'
option: 三二ビット整数型を用いる	dtype = np.int16
option: グラフの色をダークスラテグレーに変更する	color = 'darkslategray'
双方向キューの最後に列の各値を追加する	deq.extend(iterable)
データ列と配列の散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
棒グラフをライトコーラル色を用いて描画する	plt.bar(データ列x, データ列y, color='lightcoral')
散布図をrgbの△マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
タプルの中の最小値を求める	min(aTuple)
関数の値によってデータフレームをまとめたグループを使う	df.groupby(関数)
キューに要素をプッシュする	deq.append(element)
昇順にリストの要素を並べ変える	sorted(aList, reverse=True)
オブジェクトがリストの要素でない	element not in aList
縦棒グラフをダークカーキ色を使って描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
option: 改行を分割記号で使う	sep = '\n'
横棒プロットの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データ列の欠損値を最頻値に減らす	ds.fillna(ds.mode().iloc[0])
整数nをバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
データフレームを複数の列でによって破壊的にソートする	df.sort_values(by=column, inplace=True)
データフレームを列で大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームが正規分布からどの程度、尖っているか調べる	df.skew()
タプルのコピーを作成する	aDict.copy()
線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
文字列の先頭から部分文字列を除く	s.lstrip(sub)
空のリッジ回帰モデルを用意する	model = sklearn.linear_model.Ridge(alpha=正則化項)
折れ線グラフを青い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
オブジェクトは辞書型	isinstance(obj, dict)
option: 平均を加える	showmeans = False
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='grey')
二つの文字列を文字列で区切って表示する	print(value, value2, sep=s)
黒い星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームの内容を見る	df.head()
カテゴリで色分けして、に箱ひげ図でデータフレームを描画する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: アクアマリンにグラフの色を設定する	color = 'aquamarine'
1行だけ標準入力から読む	sys.stdin.readline()
文字列の示す文字コードで書き込み用にファイルを開く]	open(filepath, mode='w', encoding=s)
プロットのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
二つのデータフレームを異なる列をキーにして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
リストとイテラブルについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
シャルトリューズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
組の最後を取り除く	aTuple[:-1]
散布図を黒い丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
散布図に黒い上三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
現在が水曜日か調べる	datetime.datetime.today().weekday() == 2
浮動小数点数が正か	x > 0
option: ミディアムパープルを使用する	color = 'mediumpurple'
散布図を赤い四角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
第２引数で指定されたファイル名	sys.argv[1]
クラス分類の真陽性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
n×n2	n * n2
タプルをダミー変数に変換する	pd.get_dummies(iterable)
文字列の中の正規表現による全てのマッチを求める	re.findall(pattern, s)
既存のベクトルを元に全要素が0の配列	np.zeros_like(aArray)
nの十六進表記	hex(n)
option: 色をインディゴにセットする	color = 'indigo'
折れ線グラフをフクシア色を用いて描画する	plt.plot(データ列x, データ列y, color='fuchsia')
折れ線グラフをカデットブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='cadetblue')
文字列を太字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
文字列の右側が部分文字列か	s.endswith(sub)
真下位集合	aSet < aSet2
三つのデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
文字列の先頭で正規表現にケースを無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
nがn2で割り切れるかどうか調べる	n % n2 == 0
データフレームの中のカラムと列に重複があれば、ドロップする	df.drop_duplicates(subset=[column, column2])
散布図に下三角印を使用する	plt.scatter(データ列x, データ列y, marker='v')
配列の折れ線グラフを描画してカラーコードとして色を設定する	plt.plot(データ列x, データ列y, color='#800080')
色付きの破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
部分文字列が文字列の終了位置より前に含まれる	s.find(sub, 0, end) != -1
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
度数分布図のビン数を変更する	plt.hist(データ列, bins=区関数)
ラベンダー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
二つの列によって破壊的に昇順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
オブジェクトが属性を持つかどうか調べる	hasattr(obj, プロパティ名)
文字列中からパターンにケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
サーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
集合が空集合	len(aSet) == 0
データフレームの先頭のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
rgbの左三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
区間を設定して度数分布図を描画する	plt.hist(データ列, bins=区関数)
線グラフをインディゴ色を用いて描画する	plt.plot(データ列x, データ列y, color='indigo')
部分集合	aSet.issubset(aSet2)
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategray')
カウンタのそれぞれの項目をカウントだけ列挙する	aCounter.elements()
折れ線グラフの三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
数値を出力する	print(value)
黒いポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='k')
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
カラーバーを横向きでつける	plt.colorbar(orientation='horizontal')
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategray'
散布図の上三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: フォレストグリーンにフォントの色を指定する	color = 'forestgreen'
option: ホワイトスモーク色を用いる	color = 'whitesmoke'
文字列から部分文字列を除く	s.replace(sub, '')
option: 青にグラフの色を指定する	color = 'blue'
実線にヒストグラムを設定する	plt.hist(データ列, linestyle='solid')
散布図をrgbのクロスマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのカラムのpercentパーセンタイル	df[col].quantile(percent/100)
リストの折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
列名リストによってデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
ホワイトスモーク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
option: 色をマゼンタに設定する	color = 'magenta'
関数の値によってデータフレームをグループ化し要約統計量を算出する	df.groupby(関数).describe()
データ列の折れ線グラフを左三角印を用いて描画する	plt.plot(データ列x, データ列y, marker='<')
複数の列の値によって表データを集計する	df.groupby(columns)
データ列を四捨五入して整数型にする	ds.round().astype(int)
黒い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='k')
文字列の先頭が部分文字列	s.startswith(sub)
改行なしで1行だけ標準入力から読み込む	sys.stdin.readline().rstrip()
データフレームのNaNを直前の値に設定する	df.fillna(method='ffill')
ファイルをUTF8で書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
ユークリッド距離	math.dist(point, point2)
正規表現に文字列の先頭で複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データフレームを'A'列でによって破壊的に並べる	df.sort_values(by='A', inplace=True)
option: 色をレベッカパープルに設定する	color = 'rebeccapurple'
文字列が組に含まれないかどうか	element not in aTuple
option: ブラウンにグラフの色を設定する	color = 'brown'
データフレームの中の列を等量でビン数nを用いて分割する	pd.qcut(df[col], n)
文字列が全て大文字かどうか調べる	s.isupper()
散布図の星マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームから型型のカラムを抽出する	df.select_dtypes(ty)
option: 回帰木の最大深さを設定する	maxdepth = n
プロット中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
オレンジ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
数式を部分分数として展開する	sympy.apart(e)
標準出力のバッファを強制表示する	sys.stdout.flush()
散布図のダイアモンドマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
ヒストグラムをライトサーモン色を使って描画する	plt.hist(データ列, color='lightsalmon')
カテゴリで色分けして、データフレームの全列の相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
列から最大長nのキューを作る	collections.deque(iterable, maxlen=n)
ファイルにxを文字列にして書き込む	f.write(str(x))
データフレームのリスト列を百の位で丸めて整数型にする	df[aList].round(-2).astype(int)
追加できるように既存のファイルをEUCを使って開く]	open(filepath, mode='a', encoding='euc_jp')
オブジェクトはバイト列クラスかどうか調べる	isinstance(obj, bytes)
rgbに棒グラフの色を指定する	plt.bar(ラベル列, データ列, color=rgb)
データフレームの中の欠損値の数を求める	df.isna().sum()
CSVからデータフレームを読み込む	pd.read_csv(filename, sep=',')
y軸の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
ブランチドアーモンド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
配列をビン数nで分割する	pd.cut(aArray, n)
リストと数列についての散布図に△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームを表示するとき、折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
データフレームの行の名前を一度にnameからname2に付け直す	df.rename(index={name: name2})
集合を変更不能なセットに変換する	frozenset(aSet)
折れ線グラフの色をプラムに変更する	plt.plot(データ列x, データ列y, color='plum')
ダークカーキにヒストグラムの色を指定する	plt.hist(データ列, color='darkkhaki')
ダークシアグリーン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
コーンフラワーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
リストと数列について散布図を描画して、星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
イテラブルをぐるぐると繰り返す	itertools.cycle(iterable)
rgbの星マーカーをイテラブルとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフの色をミディアムアクアマリンに指定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
ペルーにヒストグラムの色を変更する	plt.hist(データ列, color='peru')
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
option: フォントの色をダーク・スラテグレーに指定する	color = 'darkslategrey'
データフレームの列の文字列長を列として求める	df[col].str.len()
rgbの右三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのリストカラムの欠損値を第二四分位数で埋める	df[aList].fillna(df[aList].median())
折れ線グラフの色をスチールブルーに変更する	plt.plot(データ列x, データ列y, color='steelblue')
セットから別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
パーセプトロンを用いて回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
縦棒グラフをグレー色を使って描画する	plt.bar(データ列x, データ列y, color='gray')
データフレームの各グループごとの平均値	df.groupby(column).mean()
option: スカイブルーにグラフの色を設定する	color = 'skyblue'
折れ線グラフをティール色として描画する	plt.plot(データ列x, データ列y, color='teal')
列によってデータフレームをグループ化して、それぞれのグループ毎の標準偏差を求める	df.groupby(column).std()
要素がタプルの値として含まれているかどうか調べる	element in aDict.values()
オブジェクトのクラスを求める	type(obj)
イテラブルとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
リストとリストについての散布図に下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v')
データ列と配列について散布図を描画して三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: ダークグリーンにグラフの色を設定する	color = 'darkgreen'
折れ線グラフの印を△にする	plt.plot(データ列x, データ列y, marker='^')
データフレームの列の欠損値を最小値に設定する	df[col].fillna(df[col].min())
xが-9以上、9以下かどうか調べる	-9 <= x <= 9
シーケンスを文字列リストに変換してカンマで連結する	','.join(map(str, iterable))
データフレームの列を取り除く	df.drop(column, axis=1)
ASCII限定として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
option: グラフの色を貝殻に変更する	color = 'seashell'
ヒストグラムの色をバイオレットに設定する	plt.hist(データ列, color='violet')
'A'列によってによって降順にデータフレームをソートする	df.sort_values(by='A', ascending=False)
ファイルをバイナリモードとしてオープンする]	open(filepath, mode='rb')
データフレームのカラムの欠損値を50パーセンタイルに指定する	df[col].fillna(df[col].median())
折れ線グラフの左三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
option: ブランチドアーモンドにフォントの色を変更する	color = 'blanchedalmond'
片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データフレームの列と列の相関行列スピアマン順位相関係数を用いて	df[[column, column2]].corr(method='spearman')
データフレームの各グループごとの合計を計算する	df.groupby(column).sum()
データ列間のR2を求める	sklearn.metrics.r2_score(データ列, データ列2)
色付きの破線で線を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフの色をカラーコードを用いて指定する	plt.plot(データ列x, データ列y, color='#800080')
option: パールバイオレットレッド色を用いる	color = 'palevioletred'
データフレームのカラムの名前を列から文字列に付け直す	df.rename(columns={column: name})
xでデータフレームの欠損値を埋める	df.fillna(x)
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
要素が集合に含まれるか	element in aSet
ファイルをデータフレームとして読み込む	pd.read_excel(filename)
タイムスタンプデータが火曜日	aDatetime.weekday() == 1
ホワイトスモーク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
整数nはリストのどれかか調べる	n in aList
散布図に赤い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='r')
ミントクリームにヒストグラムの色を設定する	plt.hist(データ列, color='mintcream')
ヒストグラムをカーキ色として描画する	plt.hist(データ列, color='khaki')
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
ふたつの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
表データを列でソートする	df.sort_values(by=column)
ベクトル計算を行う	import numpy as np
赤い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
カウンタ同士で共通部分	aCounter & aCounter2
縦棒グラフを青緑色を用いて描画する	plt.bar(データ列x, データ列y, color='teal')
コマンドの第２引数を確認する	sys.argv[1]
リストとリストの散布図を描画して丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
浮動小数点数に実数を乗算する	x * y
三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^')
ライトスチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
２つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
データフレームのリスト列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[aList].corr())
rgbのポイントマーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームの列の欠損値を最大値にセットする	df[col].fillna(df[col].max())
option: マーカーの線幅を変える	markeredgewidth = 2.5
文字列を末尾から空白で分割する	s.rsplit()
データフレームのリストカラムの中にいくつ欠損値が含まれるか数える	df[aList].isna().sum()
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='grey')
データ列の各データ値の出現回数を算出する	ds.value_counts()
ファイルパスからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
ダークグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
ひとつでも小文字が文字列内に含まれるか調べる	any(c.islower() for c in s)
CSVファイルファイル名がか調べる	filename.endswith('.csv')
データ列のNaNを平均値で埋める	ds.fillna(ds.mean())
option: ブルーバイオレットを使う	color = 'blueviolet'
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図にポイントマーカーを加える	plt.scatter(データ列x, データ列y, marker='.')
二つの関係がスーパーセットか調べる	aSet.issuperset(aSet2)
折れ線グラフの印を大バツにする	plt.plot(データ列x, データ列y, marker='X')
部分文字列が文字列中に存在するかどうか調べる	sub in s
ブラウン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
赤い丸マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
散布図の右三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームをJSONLファイルにTSVファイルを用いて保存する	df.to_csv(filename, sep='\t')
データ列は何日か調べる	ds.dt.day
タプルをひとつ置きに得る	aTuple[::2]
ファイル名がTSVファイルか	filename.endswith('.tsv')
CSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep=',')
行列の分散	np.var(aArray)
折れ線グラフをスノー色を用いて描画する	plt.plot(データ列x, データ列y, color='snow')
折れ線グラフの三角印の色を変える	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
日付データにn週間分加える	aDate + datetime.timedelta(weeks=n)
シエナ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
バイナリできるようにファイルパスを開く]	open(filepath, mode='rb')
データフレームのカラムの中のNaNの数を数える	df[col].isna().sum()
貝殻色として散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
時間を用いる	import time
データフレームを列を用いて分類し、、それぞれのグループごとの件数を知る	df.groupby(column).size()
辞書に別のタプルの項目を更新する	aDict.update(aDict2)
多次元データを主成分分析として淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
最大長nの両端キューを新規生成する	collections.deque(maxlen=n)
ファイルを書き込み用に文字コードtextでオープンする]	open(filepath, mode='w', encoding=text)
データフレームのカラムがどれだけ分散しているか見る	df[col].var()
データフレームの列が正規表現文字列にマッチする行を取り出す	df[df[column].str.match(s)]
グラフ中のフォントを指定する	sns.set(font=フォント名)
横棒グラフをタン色として描画する	plt.barh(データ列x, データ列y, color='tan')
ファイルからのストリームを使う	open(filepath)
ラベンダーにヒストグラムの色を指定する	plt.hist(データ列, color='lavender')
nが一桁の数かどうか調べる	0 <= n <= 9
オブジェクトは文字列かどうか調べる	isinstance(obj, str)
散布図を淡いピンク色色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightpink')
データ列の未入力値をxで埋める	ds.fillna(x)
列の値によってデータフレームをグループ化し、要約統計量を算出する	df.groupby(column).describe()
スピアマン順位相関係数でデータフレームの相関行列	df.corr(method='spearman')
ファイルを書き込み用にSJISでオープンする]	open(filepath, mode='w', encoding='shift_jis')
列'A'と列'B'をキーとして2つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
option: ライトグレーにグラフの色を設定する	color = 'lightgray'
データフレームを列を用いて昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
度数分布図を描画する	plt.hist(データ列)
option: グラフの線の幅を3.0ポイントにセットする	linewidth = 3.0
ライムグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームを表示するとき、表示する最大行数を増やす	pd.set_option('display.max_rows', n)
タイムスタンプデータからn日分、減算する	aDatetime - datetime.timedelta(days=n)
シーケンスを変更不能なセットに変換する	frozenset(iterable)
option: ミディアムバイオレットレッドを使用する	color = 'mediumvioletred'
現在の時刻	datetime.date.today().hour
散布図にrgbの△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
パールバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
最大値・最小値の範囲で一様な乱数を生成する	random.uniform(最小値, 最大値)
赤い菱形印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
リストの散布図をプロットする	plt.scatter(データ列x, データ列y)
両端キュー中の文字列の出現数を数える	deq.count(element)
縦軸に説明を付ける	plt.ylabel('y軸ラベル')
ダークターコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
option: グラフの色を暗い赤に変更する	color = 'darkred'
日付データが金曜日か	aDate.weekday() == 4
データフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
データフレームの列と列の相関行列を計算する	df[[column, column2]].corr()
線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
散布図を△印で描画する	plt.scatter(データ列x, データ列y, marker='^')
文字列は全て十進数字かどうか調べる	s.isdecimal()
ダークターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
option: 下三角マーカーを用いる	marker = 'v'
文字列を走査し、パターンにマッチするか見る	re.search(pattern, s)
乱数で要素を埋めたベクトルを作る	np.random.random(N)
実数を数に加える	x + y
破線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームを複数の列によって昇順に整列する	df.sort_values(by=column, ascending=True)
折れ線グラフの右三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ファイル名の区切り記号を見る	os.sep
線形回帰モデルの切片	model.intercept_
破壊的に降順にデータフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームの中に含まれる文字列と文字列の合計を数える	df.isin([value, value2]).sum()
青い破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームから指定された４つの列だけ選択する	df[[column, column2, column3, column4]]
n2がn以上、かつ、n3以下か	n <= n2 and n2 <= n3
菱形マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムの色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
SVDで多次元データを淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
データフレームのカラムの未入力値を中央値で埋める	df[col].fillna(df[col].median())
散布図をバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
ダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
マッピングから項目名の値かもしくは要素を得る	aDict.get(key, element)
新しい回帰木モデルを用意する	model = sklearn.tree.DecisionTreeRegressor()
真上位集合か確認する	aSet > aSet2
パールバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='palevioletred')
データフレームのリスト列を1000の位で四捨五入して、整数にする	df[aList].round(-3).astype(int)
散布図の四角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
散布図に青い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
オブジェクトのオブジェクト識別子を見る	id(obj)
ふたつの集合の対称差集合を使う	aSet.symmetric_difference(aSet2)
散布図の大バツマーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
数列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
散布図をライムグリーン色として描画する	plt.scatter(データ列x, データ列y, color='limegreen')
散布図を黒い三角マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
書き込み用にファイルをBOM付きでオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
行列の計算をする	import numpy as np
ハニーデュー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
option: スラグレーにフォントの色を変更する	color = 'slategray'
項目名が辞書上でまだ定義されていないかどうか調べる	key not in aDict
二つの文字列を改行で区切って出力する	print(value, value2, sep='\n')
option: マーカーをバツに指定する	marker = 'x'
文字列が数字か	s.isdigit()
散布図の▽マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
キューの中に要素が含まれてる	element in deq
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかテストする	s.find(sub, start, end) == -1
nを十六進表記に変換する	hex(n)
グリッド線をプロットから消す	plt.grid(False)
文字列が全て空白文字	s.isspace()
option: アンティークホワイト色を用いる	color = 'antiquewhite'
データフレームのリストカラムの中に存在する日付データと文字列の合計を求める	df[aList].isin([value, value2]).sum()
データフレームのリストカラムの中に文字列があるかどうか	df[aList].isin([value])
文字列がタプルの要素でないかどうか	element not in aTuple
イテラブルとイテラブルについての散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
表データの列が正規表現文字列にマッチしない行を取り出す	df[not df[column].str.match(s)]
データフレームを大きい順に複数の列を用いて破壊的に整列する	df.sort_values(by=column, ascending=False, inplace=True)
配列の最小	np.min(aArray)
部分文字列を文字列の接尾辞から除く	s.removesuffix(sub)
ヒストグラムをフォレストグリーン色として描画する	plt.hist(データ列, color='forestgreen')
option: サドルブラウンにフォントの色を設定する	color = 'saddlebrown'
プログラムを適切に終了する	sys.exit(0)
線グラフをパパイヤウィップ色を使って描画する	plt.plot(データ列x, データ列y, color='papayawhip')
リストを展開して表示する	print(*aList)
既存のファイルをSJISで追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
フォレストグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
文字列リストをつなげるひとつの文字列にする	''.join(map(str, iterable))
リストとリストについての散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
ベクトルの行ごとの合計値	np.sum(aArray, axis=1)
SJISでJSONLファイルにデータフレームを保存する	df.to_csv(filename, encoding='shift_jis')
option: グラフの色を青緑に変更する	color = 'turquoise'
ダークサーモン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
散布図にポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
リストの変化を色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームのカラムを散布図でグラフ化する	sns.scatterplot(data=df, x='列名', y='列名')
文字列TSVからCSVファイルをn番目のカラムをインデックスにして読み込む	pd.read_csv(filename, index_col=n)
データフレームの列の各データ値の出現数を算出する	df[col].value_counts()
折れ線グラフに黒いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
nが-9以上、9以下かどうか調べる	-9 <= n <= 9
rgbの丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ダークターコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
ファイルパスを書き込みできるようにオープンする]	open(filepath, mode='w')
'A'列の値によってデータフレームをグループ化する	df.groupby('A')
横棒グラフをオレンジレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='orangered')
option: グラフの色をダークシアグリーンに指定する	color = 'darkseagreen'
上限を指定して両端キューを用意する	collections.deque(maxlen=n)
列でデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
縦棒プロットを描画して、バーの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
option: 色をダークグレーに設定する	color = 'darkgray'
nが5の倍数かどうか	n % 5 == 0
双方向キューの要素をn個分ローテンションする	deq.rotate(n)
option: ターコイズを使う	color = 'turquoise'
配列とリストについての散布図に黒い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフの色をサーモンに指定する	plt.plot(データ列x, データ列y, color='salmon')
実数を数で割った余り	x % y
データフレームを昇順に破壊的に列によって整列する	df.sort_values(by=column, ascending=True, inplace=True)
回帰モデルの残差を計算する	目的変数 - model.predict(説明変数)
赤い▽マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
折れ線グラフの下三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategrey'
データフレームの列の文字列をNaNにする	df[col].replace(s, np.nan)
ケンドール順位相関係数で表データのリスト列の相関行列	df[aList].corr(method='kendall')
列を等間隔でn個に分割する	pd.cut(ds, n)
データフレームのそれぞれのグループ毎の標準偏差	df.groupby(column).std()
配列をn個に等間隔でビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
データ列の割合を円プロットで図示する	plt.pie(データ列, startangle=90)
データフレームを丸めて整数にする	df.round().astype(int)
青いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データ列をビン数nでビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
列に列を続ける	itertools.chain(iterable, iterable2)
option: グラフの色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
折れ線グラフを色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
リストを等量でn個にビニングする	pd.qcut(aList, n)
ダークレッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームから型リストで指定されたデータ型の列だけ選択する	df.select_dtypes(include=typeList)
データ列のユニークな要素数	ds.nunique()
データフレームの指定された列を配列として取り出す	df[column].values
異なる列をキーとして２つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
散布図の▲マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
コマンド引数の一覧を得る	sys.argv[1:]
ハニーデュー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
初期値で全要素を初期化したベクトル	np.full(要素数, 初期値, dtype=np.int)
文字列を部分文字列で二分し、後半の文字列を見る	s.partition(sub)[-1]
▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
散布図のマーカーを下三角印にする	plt.scatter(データ列x, データ列y, marker='v')
データフレームのリスト列の欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
標準入力から1文字だけ読み込む	sys.stdin.read(1)
八進文字列をbytesizeバイトのバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データフレームをグループ化し、各列に対し合計を計算する	df.groupby(column)[column2].sum()
変数を白色で表示できる文字列にする	f'\033[37m{value}\033[0m'
エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
データフレームの中央値を求める	df.median()
ヒストグラムをアンティークホワイト色を用いて描画する	plt.hist(データ列, color='antiquewhite')
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
三数の最も小さい値	min(x, y, z)
データフレームから指定された二つの列だけ抽出する	df[[column, column2]]
カテゴリでグループ化して、カーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ミッドナイトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
文字列中にひとつでも非大文字が含まれるかどうか調べる	any(not c.isupper() for c in s)
折れ線グラフにポイントマーカーを加える	plt.plot(データ列x, データ列y, marker='.')
文字列でフォーマットして日付時刻データを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
配列間の各要素の最大公約数	np.gcd(aArray, aArray2)
綺麗なグラフを使用する準備をする	import seaborn as sns
データ列が正規分布かどうか仮説検定する	scipy.stats.shapiro(データ列)
ヒストグラムを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
リストを順にプリントする	print(*aList)
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
プロット中の(x,y)の位置にデータラベルを表示する	plt.legend(loc=(x, y))
3二ビット整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
option: 色をライトグレーに変更する	color = 'lightgrey'
option: グラフの色をカーキに指定する	color = 'khaki'
日付時刻データをISO8601書式の文字列に変換する	aDatetime.isoformat()
カテゴリごとにデータフレームの棒グラフを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
多次元尺度構成法で多次元データを濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
集合から要素を除く	aSet.remove(element)
option: スチールブルーにグラフの色を設定する	color = 'steelblue'
既存の配列をベースに全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
ダークゴールデンロッド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
現在の再帰の上限	sys.getrecursionlimit()
文字列はキーワードか調べる	keyword.iskeyword(s)
配列とリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
グラフのx軸を対数目盛に変更する	plt.xscale('log')
ヒストグラムの色をシスルに変更する	plt.hist(データ列, color='thistle')
棒グラフをデピンク色を使って描画する	plt.bar(データ列x, データ列y, color='deeppink')
グラフの色を全般的に淡くする	sns.set(pallete='muted')
数値を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
文字列内にひとつでも大文字があるかどうか調べる	any(c.isupper() for c in s)
青い点線で配列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
数式の変数の解を方程式として求める	sympy.solve(e, z)
ファイルパスからディレクトリ名取り出す	os.path.dirname(filepath)
データフレームのカラムの曜日名を使う	df[col].dt.weekday_name
データフレームを各列毎にグループ分けし、、文字列というグループを見る	df.groupby(column).get_group(s)
赤い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図を深紅色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
文字列を新しい文字列で全て置き換える	s.replace(sub, newsub)
option: ダイアモンド印を使用する	marker = 'D'
文字列は印字できるか調べる	s.isprintable()
Pandasで、文字列のUNIX秒からdatetime64型に変換する	pd.to_datetime(s, unit='s', utc=True)
青色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
'A'列によってデータフレームを並べ、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
線グラフをシルバー色として描画する	plt.plot(データ列x, データ列y, color='silver')
日付時刻データと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()//60
option: レモンシフォンを用いる	color = 'lemonchiffon'
ミディアムバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
変数を黄色にする	f'\033[33m{value}\033[0m'
文字列の終了位置より前に部分文字列が含まれないかどうか	s.find(sub, 0, end) == -1
文字列が文字列リストに含まれるかどうか調べる	s in aStringList
option: フォントの色をカデットブルーに設定する	color = 'cadetblue'
表示可能な列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
option: ロイヤルブルーにグラフの色を設定する	color = 'royalblue'
タブで区切って２つの文字列を表示する	print(value, value2, sep='\t')
横棒グラフをシアン色として描画する	plt.barh(データ列x, データ列y, color='cyan')
十六進文字列をバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
データフレームの指定された名前リストの列を抽出する	df[columns]
データフレームの列の名前一覧を使う	df.columns
文字列が片仮名	('ァ' <= ch <= 'ン')
新しいガウス過程分類モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
集合から別のセットの要素を取り除く	aSet.difference_update(aSet2)
データフレームをグループ化し、列に対し個数を算出する	df.groupby(column)[column2].count()
白色でヒストグラムを描画する	plt.hist(データ列, color='white')
ダークサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='darksalmon')
降順に複数の列ででデータフレームをソートする	df.sort_values(by=column, ascending=False)
折れ線グラフを上三角印で描画する	plt.plot(データ列x, データ列y, marker='^')
nがn2以下それか、n3以上か	n <= n2 or n >= n3
データ列とリストについて散布図をプロットし、文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフをベージュ色として描画する	plt.plot(データ列x, データ列y, color='beige')
ファイルパスの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
二つのオブジェクトが同一参照か	obj is obj2
パールゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
組内の要素が少なくともひとつ真か確認する	any(aTuple)
データ列とリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
列をキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
ロイヤルブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
グラフの見栄えをよくする	import seaborn as sns
スクリプトのファイルの名前	sys.argv[0]
リストと配列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
列の欠損値を平均に設定する	ds.fillna(ds.mean())
縦棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
散布図のマーカーを四角印にする	plt.scatter(データ列x, データ列y, marker='s')
option: 先頭列をインデックスに設定する	index_col = 0
最大値でデータ列の欠損値を埋める	ds.fillna(ds.max())
散布図をミスティローズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
散布図に大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
データフレームのリストカラムの中に日付データと文字列がいくつあるかカウントする	df[aList].isin([value, value2]).sum()
複数の列でデータフレームをソートする	df.sort_values(by=column)
整数nを2進数表現にする	bin(n)
option: フォントの色を淡いピンク色に指定する	color = 'lightpink'
文字列の開始位置からと終了位置の範囲に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
option: ナバホホワイトを使う	color = 'navajowhite'
実数を文字列にする	str(x)
縦棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
データフレームのリストカラムの中にと文字列がある	df[aList].isin([value, value2])
ミスティローズ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
分類モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
データフレームのリストカラムは正規分布からどれだけ、尖っているか見る	df[aList].skew()
辞書をインデント幅nのJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
オブジェクトはクラスか調べる	isinstance(obj, クラス)
画面用にプロットを設定する	sns.set(context='notebook')
データフレームを列の値ごとにグループ化して列挙する	[(name, group) for name, group in df.groupby(column)]
縦棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
数列の四分位を可視化する	plt.boxplot(データ列)
２つの浮動小数点数が近似値か	math.isclose(x, x2)
データ列の推移を半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
文字列が文字列リストのいづれかどうか調べる	s in aStringList
ヒストグラムの色をダークマゼンタに指定する	plt.hist(データ列, color='darkmagenta')
リストとリストについての散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
オプションで出力先をファイルに設定する	file = sys.open(filename, 'w')
棒グラフをカデットブルー色として描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームを列によってによって降順に整列する	df.sort_values(by=column, ascending=False)
黒い▽マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
スノー色でヒストグラムを描画する	plt.hist(データ列, color='snow')
２つのリストから辞書	dict(zip(aList, aList2))
option: フォントの色をライムグリーンに変更する	color = 'limegreen'
代数計算モジュールを使用する	import sympy
データフレームの中のカラムをビン数nでビニングする	pd.cut(df[col], n)
option: アクアを用いる	color = 'aqua'
シアンでリストをプリントする	print(f'\033[36m{value}\033[0m')
ヒストグラムをレベッカパープル色として描画する	plt.hist(データ列, color='rebeccapurple')
ベクトルの行ごとの平均値	np.mean(aArray, axis=1)
option: フォントの色をクリムゾンに設定する	color = 'crimson'
実数を十六進表記の文字列にする	x.hex()
黄色色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
predicateFuncがTrueとなるリストの要素	itertools.dropwhile(predicateFunc, iterable)
四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s')
option: フォントの色をモカシンにセットする	color = 'moccasin'
線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: 色をローングリーンにする	color = 'lawngreen'
option: 色をグレーに設定する	color = 'gray'
nullに等しい識別子	None
棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
データ列の中にある日付データの合計をカウントする	ds.isin([value]).sum()
黒い下三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
option: 淡いピンク色色を用いる	color = 'lightpink'
データフレームのカラムの中にとがあるか調べる	df[col].isin([value, value2])
option: 読み込むシート名をnamesに指定する	sheet_name = names
イテラブルを回数してカウンタを更新する	aCounter.update(iterable)
破線に折れ線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
今日の曜日を整数で使う	datetime.datetime.today().weekday()
折れ線グラフのダイアモンドマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
オブジェクトが数値かどうか調べる	isinstance(obj, (int,float))
option: 珊瑚を使う	color = 'coral'
データフレームをグループ化し、列に対し平均値を算出する	df.groupby(column)[column2].mean()
ファイルをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
折れ線グラフの△印を黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームのカラムの中に文字列が含まれるか	df[col].isin([value])
黄色で文字列を出力する	print(f'\033[33m{value}\033[0m')
散布図のダイアモンド印を黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
rgbの▲マーカーを数列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: サドルブラウンを使用する	color = 'saddlebrown'
データフレームを列ごとにグループ化して、各グループ毎の平均値を求める	df.groupby(column).mean()
データ列の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
正規表現を事前にASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
カラムの欠損値を最小値に指定する	ds.fillna(ds.min())
ヒストグラムを描画して、ビン数をする	plt.hist(データ列, bins=区関数)
グラフのx軸にラベルを付ける	plt.xlabel('x軸ラベル')
nが負の整数	n < 0
ハニーデュー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
シーケンスにリストを続けた列	itertools.chain(iterable, iterable2)
タプル内の要素が全て真か確認する	all(aTuple)
組をソートする	sorted(aTuple)
色を全般的に暗くする	sns.set(pallete='dark')
等間隔の配列を初期化する＼	np.arange(開始値, 終了値, 等差)
マップ上で項目名が定義されている	key in aDict
ミントクリーム色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
実数のタンジェントの逆数	math.atan(x)
rgbの四角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
リストと数列について散布図を描画してマーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をパパイヤウィップに変更する	plt.hist(データ列, color='papayawhip')
option: エンコーディングを文字列の示す文字コードに設定する	encoding = s
折れ線グラフを半透明の実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
改行を取り除いてファイルを一行ずつ読み込む	f.readline()
option: グラフの色を淡い茶色に指定する	color = 'tan'
データ列の欠損値を最小値で置換する	ds.fillna(ds.min())
日付データが日付データと同時かどうか	aDate == aDate2
データフレームを各列毎にグループ分けして、列の最小値を算出する	df.groupby(column)[column2].min()
option: スラグレーに色を設定する	color = 'slategrey'
ファイルが存在するか	os.path.exists(filepath)
ブラック色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
文字列を部分文字列で二分し前半の文字列を求める	s.partition(sub)[0]
新しい文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
折れ線グラフにラベルをつける	plt.plot(データ列x, データ列y, label='ラベル')
カーキ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
新しい勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
nからstep間隔でいつまでも数え上げるする	itertools.count(start=n, step=step)
二つのデータフレームを縦方向に合体させる	pd.concat([df, df2])
文字列内にアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
データフレームのリスト列の文字列を欠損値にする	df[aList].replace(s, np.nan)
追加できるように既存のファイルを文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
データフレームの列名一覧で指定した列を削除する	df.drop(columns, axis=1)
行列の内積	np.dot(aArray, aArray2)
赤い一点鎖線を用いてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
1からnまでの整数列を使う	list(range(1, n+1))
タプルの項目数を見る	len(aDict)
データフレームのNaNがある行を消す	df.dropna()
ダークゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
データフレームのカラムを100の位で四捨五入する	df[col].round(-2)
データフレームのカラムの値をValueMapで一度に置き換える	df[col].replace(ValueMap)
option: フォントの色をミディアムシアグリーンに指定する	color = 'mediumseagreen'
散布図をrgbの菱形マーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
Pandasで、UNIX秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
小数点数の逆双曲線正弦を求める	math.asinh(x)
データフレームのカラムの中に文字列と日付データがいくつあるか数える	df[col].isin([value, value2]).sum()
データフレームの各グループごとの最大値	df.groupby(column).max()
データ列のNaNを直後の値で埋める	ds.fillna(method='bfill')
行列の列ごとの合計値	np.sum(aArray, axis=0)
リストの全ての要素を消去する	aList.clear()
文字列の左端から空白を取り除く	s.lstrip(' ')
リストと配列の散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: オレンジレッドにグラフの色を設定する	color = 'orangered'
ファイルからnという名前のシートを読み込む	pd.read_excel(filename, sheet_name=n)
散布図を赤い左三角マーカーで描く	plt.plot(データ列x, データ列y, marker='<', c='r')
カンマ区切りのファイルタブ区切りのファイルをn番目のカラムをインデックスとして読む	pd.read_csv(filename, index_col=n)
辞書の値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
最小値でデータフレームのカラムの未入力値を埋める	df[col].fillna(df[col].min())
ヒストグラムを3つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: 色をミディアムパープルに変更する	color = 'mediumpurple'
四分位数ごとにデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
散布図の下三角印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
nがn2以下かどうか調べる	n <= n2
線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列x, データ列y, color='lavenderblush')
データ列とリストについて散布図をプロットし、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
データフレームの列のNaNを平均値に設定する	df[col].fillna(df[col].mean())
option: フォントの色をスノーに設定する	color = 'snow'
t-SNEを用いて淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームのリスト列の欠損値を最大値で補う	df[aList].fillna(df[aList].max())
列の各データが何回出現するか調べる	df[col].value_counts()
データフレームをにバイオリン図でプロット化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
タン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
列'A'と列'B'をキーにして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
カウンタの文字列を増やす	aCounter[element] += 1
部分文字列で文字列を区切って、文字列リストに変換する	s.split(sub)
折れ線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
データフレームのリスト列を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
正規表現を事前に複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
赤い点線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
オブジェクトは整数クラスか	isinstance(obj, int)
データフレームの全列を散布図を用いて可視化する	sns.pairplot(df)
ベクトルが何のデータ型か調べる	aArray.dtype()
option: グラフの色をスプリンググリーンに指定する	color = 'springgreen'
データフレームから指定した３つの列を取り出す	df[[column, column2, column3]]
option: ダークオリーブグリーンにグラフの色を設定する	color = 'darkolivegreen'
最大値と最小値として正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
破壊的にデータフレームの列を消す	df.drop(column, axis=1, inplace=True)
折れ線グラフの丸印の大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
プラットホームがLinuxか	sys.platform.startswith('linux')
オブジェクトはリストか調べる	isinstance(obj, list)
折れ線グラフのクロス印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
ふたつの集合の共通部分	aSet.intersection(aSet2)
option: バツ印を用いる	marker = 'x'
データフレームの列の値がxより大きくx2より小さいデータを取り出す	df[(x < df[column]) & (df[column] < x2)]
ベクトルの累積和	np.cumsum(aArray)
グラフの使途を論文に設定する	sns.set(context='paper')
スプリンググリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
珊瑚にヒストグラムの色を指定する	plt.hist(データ列, color='coral')
option: スチールブルー色を用いる	color = 'steelblue'
データフレームの列がxより多いデータを取り出す	df[df[column] > x]
ペールグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
改行なしに二つの値をプリントする	print(value, value2, end='')
option: グラフの色をライトイエローに指定する	color = 'lightyellow'
配列を四分位数でビン分割する	pd.qcut(aArray, 4)
nの8進表記を使う	oct(n)
データフレームのリスト列の中にいくつ日付データがあるかカウントする	df[aList].isin([value]).sum()
データフレームの列の値がx以下のデータを抽出する	df[df[column] <= x]
ヒストグラムの色をミディアムスプリンググリーンに指定する	plt.hist(データ列, color='mediumspringgreen')
リストと配列についての散布図にrgbのバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームを列でソートし、下位n件を取り出す	df.sort_values(columns).tail(n)
シエナ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
ゼロ埋めした三二ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
分子n、分母mの分数を作成する	fractions.Fraction(numerator=n, denominator=m)
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
文字列を最後の部分文字列で分割したときの最初の文字列	s.rpartition(sub)[0]
整数LCMを求める	math.lcm(n, n2)
散布図にクロスマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
ヒストグラムを珊瑚色で描画する	plt.hist(データ列, color='coral')
データフレームを二つの列によってソートしてNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
Pandasで、データ列をdatetime64型にする	pd.to_datetime(ds)
データ列をビン数nとしてビン分割する	pd.cut(ds, n)
option: フォントの色をナバホホワイトに設定する	color = 'navajowhite'
データフレームを正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
データフレームのリスト列のモード	df[aList].mode()
オブジェクトはタプルクラスか	isinstance(obj, tuple)
文字列内にひとつでも数字が含まれるかどうか調べる	any(c.isdigit() for c in s)
グラフの中に枠なしのデータラベルを入れる	plt.legend(frameon=False)
ヒストグラムの色をダークスレートブルーに指定する	plt.hist(データ列, color='darkslateblue')
散布図の星印の太さを変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ダークゴールデンロッドにヒストグラムの色をする	plt.hist(データ列, color='darkgoldenrod')
ファイルをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
nとn2のビット積を求める	n & n2
双方向キューの先頭	deq[0]
箱髭図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
option: 追加用に設定する	mode = 'a'
rgbの大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: ライトスチールブルーにグラフの色を変更する	color = 'lightsteelblue'
キーが辞書に存在しないとき要素を追加する	aDict.setdefault(key, element)
リストを両端キューに変換する	collections.deque(iterable)
配列とリストについて散布図をプロットしてマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategray')
グラフで使う横軸の名前を設定する	plt.xlabel('x軸ラベル')
リスト中の文字列が最初に見つかる位置	aList.index(element)
リストの移り変わりを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
数列とデータ列についての散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームの欠損値を平均値で補う	df.fillna(df.mean())
ハローワールドを表示する	print('Hello World')
散布図をミディアムシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
配列をy座標、数列をx軸として大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
ネイビー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
データフレームの列と列の相関行列をヒートマップを用いて描画する	sns.heatmap(df[[column, column2]].corr())
有理数をインポートする	import fractions
UTF8としてファイルをオープンする]	open(filepath, encoding='utf-8')
モデルの当てはまりの良さを算出する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
文字列の開始位置以降に部分文字列が含まれるか	s.find(sub, start) != -1
n個にリストを等間隔で分割する	pd.cut(aList, n)
ミディアムスレートブルーにヒストグラムの色をセットする	plt.hist(データ列, color='mediumslateblue')
nとn2の論理和を計算する	n | n2
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
余弦の逆数	math.acos(x)
ケンドールとしてデータフレームの相関行列	df.corr(method='kendall')
パープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
多い順にカウンタをリストとして得る	aCounter.most_common()
コーンズシルク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
散布図をサーモン色として描画する	plt.scatter(データ列x, データ列y, color='salmon')
変数を赤色にする	f'\033[31m{value}\033[0m'
半透明の一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームを列ごとにグループ分けしてそれぞれのグループごとの合計を算出する	df.groupby(column).sum()
黒い左三角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
文字列リストにシーケンスを変換して空白で一つにする	' '.join(map(str, iterable))
nがn2の倍数でない	n % n2 != 0
棒グラフをバリーウッド色を用いて描画する	plt.bar(データ列x, データ列y, color='burlywood')
赤いダイアモンドマーカーをデータ列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='r')
eの実数乗を計算する	math.exp(x)
option: オリベドラブ色を用いる	color = 'olivedrab'
データフレームを各カテゴリごとにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
縦軸の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
論理値型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int32)
ペールグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
option: バッファのサイズを大きくする	buffering = 4096
実数のsin	math.sin(x)
リスト内の要素が少なくとも一つ真か	any(aList)
折れ線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
リストとリストの散布図を描画し、、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データ列を十の位で四捨五入して、整数型にする	ds.round(-1).astype(int)
データフレームをインデックスで降順で並べ直す	df.sort_index(ascending=False)
option: ライムを用いる	color = 'lime'
データフレームを散布図で可視化し、、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
文字列を空白で分割して、列挙する	s.split()
option: グレーを使う	color = 'grey'
xが1、もしくは2、もしくは3に等しいかどうか調べる	x == 1 or x == 2 or x == 3
インデックスによって昇順に表データを並べ直す	df.sort_index(ascending=True)
に箱ひげ図としてデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: グラフを点線に変更する	linestyle = 'dotted'
列とイテラブルの直積	itertools.product(iterable, iterable2)
xでデータフレームのリストカラムの欠損値を置き換える	df[aList].fillna(x)
option: △印を使う	marker = '^'
データフレームのカラムを丸めて、整数にする	df[col].round().astype(int)
リストとリストについて散布図をプロットし、その大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
二つのデータフレームを縦に連結する	pd.concat([df, df2], axis=0)
ブースティングを用いてクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
2を底とする浮動小数点数の対数	math.log2(x)
ヒストグラムの色をトマトにセットする	plt.hist(データ列, color='tomato')
オブジェクトが論理値クラス	isinstance(obj, bool)
等量でビン数nを使ってリストをビン分割する	pd.qcut(aList, n)
シーケンスとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
データフレームを表示するとき、表示可能な最大列数を増やす	pd.set_option('display.max_columns', n)
リストの出現頻度を作図する	plt.hist(データ列)
折れ線グラフをライトイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightyellow')
option: フォントの色をレモンシフォンに変更する	color = 'lemonchiffon'
実線を用いてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
ラベンダーブラッシュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームを'A'列と'B'列で昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
ゴーストホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
ダークオレンジ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
TSVファイルからCSVファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
紺碧色で散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
散布図にrgbのダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データ列を箱ひげ図として描画する	plt.boxplot(データ列)
プロットの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
列によってによってデータフレームを破壊的に並べる	df.sort_values(by=column, inplace=True)
横棒グラフを描いて、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
黒色で数値をプリントする	print(f'\033[30m{value}\033[0m')
行列をリストから作成する	np.array(aList)
nとkの組み合わせ	math.comb(n, k)
列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
データフレームのリスト列の相関行列スピアマン相関係数として	df[aList].corr(method='spearman')
EUCを使って書き込みできるようにファイルをオープンする]	open(filepath, mode='w', encoding='euc_jp')
本日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
ヒストグラムの色をモカシンに指定する	plt.hist(データ列, color='moccasin')
ヒストグラムをビスク色として描画する	plt.hist(データ列, color='bisque')
文字列は組の要素	element in aTuple
コーンフラワーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
円プロットの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
タプルをJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
複数の列によって小さい順に破壊的にデータフレームを並べる	df.sort_values(by=column, ascending=True, inplace=True)
シーグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
ブール型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int32)
データフレームの列がxである行を抽出する	df[df[column] == x]
横棒グラフを描画して棒の縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
データフレームからインプレイスで重複を消す	df.drop_duplicates(inplace=True)
日付データにn日を加算する	aDate + datetime.timedelta(days=n)
ライトスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
半透明の一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
折れ線グラフの▼印の線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
赤いバツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
縦棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
option: オレンジレッドを使う	color = 'orangered'
縦棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
両端キューを全て取り除く	deq.clear()
やわらかい青色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
要素を両端キューの先頭から削除する	deq.popleft()
文字列全体を大文字・小文字を無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
左三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='<')
シエナ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
ヒストグラムの色を赤に指定する	plt.hist(データ列, color='red')
最適な場所に短い説明を表示する	plt.legend(loc='best')
データフレームのリストカラムの欠損値を最小値で置換する	df[aList].fillna(df[aList].min())
リストとリストについての散布図に黒いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームの列を百の位で四捨五入して整数型にする	df[col].round(-2).astype(int)
保存するCSVファイルの小数点以下の桁数を変更する	df.to_csv(filename, float_format='%.3f')
データ列を日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ゴーストホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
本日の日付を使う	datetime.date.today()
両端キューのstart〜endの部分要素を求める	collections.deque(itertools.islice(deq, start, end))
option: オーキッドを使う	color = 'orchid'
リストとリストについて散布図を描いて、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
浮動小数点数の双曲線正接	math.tanh(x)
列の値でデータフレームを欠損値を含めてグループ化する	df.groupby(column, dropna=False)
色付きの一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: 色をコーラルにする	color = 'coral'
クラス分類をヒストグラムと勾配ブースティングとして行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
要素を双方向キューにエンキューする	deq.appendleft(element)
文字列を最後から部分文字列で分割する	s.rsplit(sub)
タプルからキーの値を得る	aDict.get(key)
配列とリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームの中で何行、重複するか調べる	df.duplicated().sum()
ファイルパスを文字コードtextでオープンする]	open(filepath, encoding=text)
イテラブルの変遷を色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
列でデータフレームをグループ化して、個数を求める	df.groupby(column).count()
グラフに格子を入れる	plt.grid(True)
リストの末尾に文字列を追加する	aList.append(element)
ダーク・スラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategrey')
ファイルを開く]	open(filepath)
散布図をダイアモンド印で描画する	plt.scatter(データ列x, データ列y, marker='D')
データフレームのリストカラムが正規分布からどの程度、歪んでいるか確認する	df[aList].kurt()
ヒストグラムの色をハニーデューに指定する	plt.hist(データ列, color='honeydew')
プロットを描画する準備をする	import matplotlib.pyplot as plt
右三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームのn番目の行を選択する	df.loc[n]
自然数個のものからk個取り出した時の並べ方の総数	math.perm(n, k)
貝殻色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
データフレームの列がxかつ列がx2であるデータを抽出する	df[(df[column] == x) & (df[column2] == x2)]
データフレームのカラムのタイムゾーンを東京にセットする	df[col].tz_convert('Asia/Tokyo')
文字列が全て英数字かどうか	s.isalnum()
破壊的に二つの列を用いてによってデータフレームをソートする	df.sort_values(by=['A', 'B'], inplace=True)
文字列内にひとつでも英数字が含まれる	any(c.isalnum() for c in s)
等間隔でn個にデータフレームの中の列をビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
棒グラフをビスク色を用いて描画する	plt.bar(データ列x, データ列y, color='bisque')
イテラブルから重複なくn個選ぶ	random.sample(iterable, k=n)
データ列の折れ線グラフをバツ印で描画する	plt.plot(データ列x, データ列y, marker='x')
コロンで区切って二つの変数をプリントする	print(value, value2, sep=':')
リストの末尾の要素	aList[-1]
青い一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
破線にヒストグラムを変更する	plt.hist(データ列, linestyle='dashed')
カラムの上位25%	ds.quantile(0.25)
濃いシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
rgbの大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
二進文字列をbytesizeバイトのバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
カテゴリで色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
option: ダークスラテグレー色を使用する	color = 'darkslategray'
オブジェクトにプロパティがあるかどうか調べる	hasattr(obj, プロパティ名)
複数のシートをファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
列を集合にする	set(iterable)
ゼロ埋めされた符号なし８ビット整数型の行列を作成する	np.zeros(要素数, dtype=np.uint8)
数列と数列についてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: フォントの色を白にセットする	color = 'white'
メディアンでデータフレームの欠損値を埋める	df.fillna(df.median())
クラス分類を確率的勾配降下でする	model = sklearn.linear_model.SGDClassifier()
線グラフの色をアクアマリンに変更する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームを各列と列の組み合わせ毎に集約して、最小値を求める	df.groupby([column, column2], as_index=False).min()
特異値分解で多次元データをパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
両端キューが空か確認する	len(deq) == 0
スタッキングを用いて回帰分析をする	sklearn.ensemble.StackingRegressor()
'A'列と'B'列でデータフレームを並べ直す	df.sort_values(by=['A', 'B'])
あらかじめ大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
複数のデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
グラフのデータラベルの位置を(x,y)に指定する	plt.legend(loc=(x, y))
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
散布図の▼マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームを列名リストによって小さい順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを各列と列の組み合わせ毎にグループ化して平均値を計算する	df.groupby([column, column2], as_index=False).mean()
ヒストグラムを黄緑色で描画する	plt.hist(データ列, color='chartreuse')
文字列を最初の部分文字列で分けた時の前半の文字列を使う	s.partition(sub)[0]
文字列リストにイテラブルを変換して、タブで連結する	'\t'.join(map(str, iterable))
データフレームのヒストグラムを縦横に並べて、プロット化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
変数が無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, oo)
散布図をライム色として描画する	plt.scatter(データ列x, データ列y, color='lime')
組をnからナンバリングする	enumerate(aTuple, start=n)
option: グラフの色をシエナに変更する	color = 'sienna'
option: ペールグリーンにグラフの色を指定する	color = 'palegreen'
タプルの全項目をクリアする	aDict.clear()
文字列はタイトルケース	s.istitle()
ベージュ色としてヒストグラムを描画する	plt.hist(データ列, color='beige')
option: ダークスレートブルーにグラフの色を設定する	color = 'darkslateblue'
データフレームをエクセルデータファイルを用いてJSONLファイルに保存する	df.to_excel(filename)
rgbのポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
Pandasで、文字列をタイムスタンプにする	pd.to_datetime(s)
部分文字列が部分文字列で始まるか確認する	s.startswith(sub)
ファイルパスをバイナリ書き込み用に開く]	open(filepath, mode='wb')
文字列はリストの要素かどうか調べる	element in aList
ゲインズボロ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
Pandasで文字列をフォーマットfmtとしてタイムスタンプ型に変換する	pd.to_datetime(s, format=fmt)
左三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
3つの文字列を順に表示する	print(value, value2, value3)
列'A'と列'B'をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
グラフに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
データフレームのリストカラムのNaNを最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
データフレームを各列と列の組み合わせ毎に集約して、合計を計算する	df.groupby([column, column2], as_index=False).sum()
データフレームを'A'列と'B'列で並べ、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
散布図に赤い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategray')
option: フォントの色をグリーンイエローに設定する	color = 'greenyellow'
ダークレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
カラムの標準偏差	ds.std()
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
散布図にダイアモンド印を加える	plt.scatter(データ列x, データ列y, marker='D')
両端キューの要素数を求める	len(deq)
文字列はリストに含まれないか調べる	element not in aList
文字列を文字コードでバイト列に変換する	s.encode(encoding=encoding)
selectorsでマスクされたリストの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
データフレームから最後のカラムを除く	df[df.columns[:-1]]
文字列をシアンで表示できる文字列にする	f'\033[36m{value}\033[0m'
リストが全て真かどうか確認する	all(aList)
データフレームのインデックス一覧を見る	df.index
option: 線種を破線に設定する	linestyle = 'dashed'
文字列を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
カラムの歪度	ds.kurt()
文字列の中のASCII限定として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
データフレームの未入力値を直後の値で埋める	df.fillna(method='bfill')
option: グリーンイエローを用いる	color = 'greenyellow'
散布図を茶色色を用いて描画する	plt.scatter(データ列x, データ列y, color='brown')
データフレームを表示するとき、ヘッダー行を右寄せにセットする	pd.set_option('colheader_justify', 'right')
二つの変数をスラッシュで区切って出力する	print(value, value2, sep='/')
データ列の欠損値を直後の値に指定する	ds.fillna(method='bfill')
線グラフの色をゴールドに変更する	plt.plot(データ列x, データ列y, color='gold')
リストから文字列と等しい最初の要素を取り除く	aList.remove(element)
散布図を黒い大バツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの文字列を未入力値に変換する	df.replace(s, np.nan)
分子と分母から有理数を新規生成する	fractions.Fraction(分子, 分母)
option: ラベンダーにフォントの色を設定する	color = 'lavender'
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategrey')
文字列内に空白が含まれるか調べる	any(c.isspace() for c in s)
ケンドール相関係数でデータフレームの列と列の相関行列を算出する	df[[column, column2]].corr(method='kendall')
折れ線グラフをダークスラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ライトグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
リストと配列の散布図をプロットして、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列を改行で分割し、文字列リストにする	s.splitlines()
プロットの凡例の場所を指定する	plt.legend(loc=(x, y))
クラス分類の適合率と再現率の調和平均を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
文字列内にひとつでもアスキー文字がある	any(c.isascii() for c in s)
タイムスタンプデータの年数を使う	aDatetime.year
文字列の中の複数行対応としてパターンによる全マッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
データ列を３つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
日本語が文字列に含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
部分文字列で文字列を分けたときの後半の文字列	s.partition(sub)[-1]
プロットのx軸とy軸の比率を等しくする	plt.axis('equals')
第一引数のファイルの名前	sys.argv[1]
オレンジ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
ファイルパスからストリームをオープンして]fileとする	file = open(filepath)
ヒストグラムの色をシーグリーンにする	plt.hist(データ列, color='seagreen')
変数について数値の積分を求める	sympy.integrate(e, z)
モカシン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
一度にreplに正規表現patternでカラムの値を置き換える	ds.replace(pattern, repl, regex=True)
データ列の移り変わりを赤い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
各列毎にデータフレームを集約して、カラムの個数を計算する	df.groupby(column)[column2].count()
線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
今日の年	datetime.datetime.today().year
縦棒グラフを描画し、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
浮動小数点数で浮動小数点数を割って、切り捨てる	x // y
横棒グラフをダークゴールデンロッド色を使って描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
英文字からひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
二つの列の値によってデータフレームをグループ化し、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
nがn2と等しいか	n == n2
折れ線グラフを大バツ印で描画する	plt.plot(データ列x, データ列y, marker='X')
トマト色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
赤い三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ピーチパフ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
暗い赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
リストとリストについて散布図を描いて、▽マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図にrgbの丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
リストをn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
カウンタを高頻度な方からリストとして得る	aCounter.most_common()
ゴールデンロッド色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
ファイルパスから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
データフレームを千の位で四捨五入して整数型にする	df.round(-3).astype(int)
正弦の逆数を求める	math.asin(x)
実数が無限大	math.isinf(x)
折れ線グラフを青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
リストをビン数nでビニングし、、namesのラベルをつける	pd.cut(aList, n, labels=names)
正則化付き線形回帰モデルを用意する	model = sklearn.linear_model.ElasticNet()
散布図を赤いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
nが正の数か確認する	n > 0
フォーマットを用いて文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
ホワイトスモーク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
ダークオレンジ色でヒストグラムを描画する	plt.hist(データ列, color='darkorange')
リストとイテラブルについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームを各列と列の組み合わせ毎にグループ化して分散を計算する	df.groupby([column, column2], as_index=False).var()
ミディアムバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
リストと配列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
赤い星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='r')
本日が金曜日か判定する	datetime.datetime.today().weekday() == 4
実数から浮動小数点数を引く	x - y
棒グラフを珊瑚色で描画する	plt.bar(データ列x, データ列y, color='coral')
散布図の丸マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
辞書の項目名の一覧を見る	aDict.keys()
名前付きタプルを使う	import collections
データフレームを複数の列の値でグループ分けして、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームの列と列の相関行列ピアソンとして	df[[column, column2]].corr(method='pearson')
ライトサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='lightsalmon')
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
データフレームから型リストで指定したデータ型の列を除外する	df.select_dtypes(exclude=typeList)
ピアソンでデータフレームの相関行列を求める	df.corr(method='pearson')
OSはウィンドウズか確認する	sys.platform.startswith('win32')
データフレームの重複した行のみを取り出す	df[df.duplicated(keep=False)]
小さい方からリストの要素をソートする	sorted(aList, reverse=False)
折れ線グラフを青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
配列をビン数nでビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
横軸の目盛りの表示値を変更する	plt.xticks(目盛りの値リスト)
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
パールゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
プラム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
折れ線グラフの菱形マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
折れ線グラフをクリムゾン色として描画する	plt.plot(データ列x, データ列y, color='crimson')
option: グラフの色をダークブルーに設定する	color = 'darkblue'
紺色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
ファイルを開いて]読み込みストリームを使う	open(filepath, mode='r')
option: マーカーを▼に変更する	marker = 'v'
データフレームの中に文字列とがいくつ含まれるか数える	df.isin([value, value2]).sum()
スレートブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
部分文字列を文字列の接頭辞から除く	s.removeprefix(sub)
変数名をキーとして辞書	dict(name=element)
ライトスカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
既にロードされたモジュールを列挙する	sys.modules
データ列の中に文字列と文字列がいくつあるか求める	ds.isin([value, value2]).sum()
option: アンティークホワイトにグラフの色を設定する	color = 'antiquewhite'
平均線付き箱ひげ図をプロットする	plt.boxplot(データ列, meanline=True)
ひとつでも非英数字が文字列中に含まれるか調べる	any(not c.isalnum() for c in s)
度数分布図を上限から下限までの範囲でプロットする	plt.hist(データ列, range=(start, end))
文字列を走査し、パターンにケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
リストの最初を使う	aList[0]
nが1、もしくは2かどうか	n == 1 or n == 2
データフレームを列の値ごとにグループ化し、、それぞれのグループごとの最大値を求める	df.groupby(column).max()
option: 読み込み用に設定する	mode = 'r'
正規表現を事前にコンパイルする	re.compile(pattern)
イテラブルを文字列リストに変換して、部分文字列を用いて結合する	sub.join(map(str, iterable))
option: ダークシアンにフォントの色を設定する	color = 'darkcyan'
エクセルファイルファイルからn番目のシートを読む	pd.read_excel(filename, sheet_name=n)
表データからランダムに抽出する	df.sample()
既存のファイルを追加できるように文字列の示すエンコーディングを用いて開く]	open(filepath, mode='a', encoding=s)
データフレームを列名リストによってまとめたグループ	df.groupby(columns)
二変数の一番小さい値	min(x, y)
グラフの描画でパステル調にカラーパレットを用いる	sns.set(pallete='pastel')
線グラフをグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='green')
最初の列をデータフレームから除く	df[df.columns[1:]]
option: ベクトルのデータ型を指定する	dtype = np.int
折れ線グラフを色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームのリストカラムのNaNを中央値に設定する	df[aList].fillna(df[aList].median())
ケンドールの順位相関係数を計算する	scipy.stats.kendalltau(データ列, データ列2)
プロットで用いるフォントを日本語に変更する	sns.set(font='IPAexGothic')
ファイルを読み込みモードとしてオープンして]、fとする	f = open(filepath, mode='r')
Pandasで、フォーマットfmtを用いてデータ列をタイムスタンプに変換する	pd.to_datetime(ds, format=fmt)
緑色でリストを出力する	print(f'\033[32m{value}\033[0m')
文字列の左側から空白を除去する	s.lstrip()
データフレームの平均と信頼区間をプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ヒストグラムを実線として描画する	plt.hist(データ列, linestyle='solid')
実数の指数を求める	math.frexp(x)[1]
イテラブルを文字列リストに変換して'改行によって連結する	'\n'.join(map(str, iterable))
option: ライトグリーンを使う	color = 'lightgreen'
二つの集合の差集合	aSet.difference(aSet2)
横棒グラフをクリムゾン色を用いて描画する	plt.barh(データ列x, データ列y, color='crimson')
option: グラフの色をシスルに変更する	color = 'thistle'
データフレームのリスト列の中のNaNの合計をカウントする	df[aList].isna().sum()
イテラブルとリストの散布図を描いて、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
ファイルをオープンして]書き込みストリームを使う	open(filepath, mode='w')
option: グラフの色をライムに指定する	color = 'lime'
二つの行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X')
option: 色をサンディーブラウンに設定する	color = 'sandybrown'
データフレームのリストカラムがどの程度分散しているか見る	df[aList].var()
プラットホームの名前を調べる	sys.platform
折れ線グラフの色をミディアムシアグリーンにセットする	plt.plot(データ列x, データ列y, color='mediumseagreen')
文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: 黄色にグラフの色をする	color = 'yellow'
値が集合のメンバーか調べる	element in aSet
二つのオブジェクトは等しいか調べる	obj == obj2
option: 赤色を使用する	color = 'red'
ヒストグラムの色をスノーにセットする	plt.hist(データ列, color='snow')
データ列の中に文字列が存在する	ds.isin([value])
線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
タイムスタンプデータを浮動小数点数にする	aDatetime.timestamp()
スタックをポップする	deq.pop()
ライトシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
折れ線グラフの三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
実行時に標準出力がパイプか	not sys.stdout.isatty()
predicateFuncが真とならないイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
JSONLファイルにデータフレームを書き込む	df.to_csv(filename, sep='\t')
散布図をダークシアン色を使って描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
カテゴリで色分けして、データフレームをにバイオリン図でグラフ化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
辞書から計数器を作る	collections.Counter(aDict)
ヒストグラムの描画し、、正規化する	plt.hist(データ列, density=True)
ベクトルから重複を除いた配列を作る	np.unique(aArray)
各列毎にデータフレームを集計し、、列の標準偏差を求める	df.groupby(column)[column2].std()
黒い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
カラムのNaNを最頻値で置換する	ds.fillna(ds.mode().iloc[0])
２つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
文字列の開始位置から終了位置までの範囲で部分文字列の登場回数をカウントする	s.count(sub, start, end)
オプションで、標準エラーを出力先にする	file = sys.stderr
option: 色をゴールデンロッドにする	color = 'goldenrod'
辞書の項目名とその値を列挙する	aDict.items()
数列の相関係数と有意確率を計算する	scipy.stats.pearsonr(データ列, データ列2)
リストの文字列の位置をエラーなく見る	aList.index(element) if element in aList else -1
オリーブ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
データ列を等量で分割数nでビン分割する	pd.qcut(ds, n)
マップを浅く複製する	dict(aDict)
データフレームの中に日付データがあるかどうか調べる	df.isin([value])
文字列を太文字で表示する	print(f'\033[1m{value}\033[0m')
ヒストグラムの色をダークオレンジに変更する	plt.hist(データ列, color='darkorange')
データフレームをグループ化して、ヒストグラムとして可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
データ列がどれだけ分散しているか調べる	ds.var()
フォレストグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
データ列をボックスチャートを用いて可視化する	plt.boxplot(データ列)
データフレームの列の値がx以上かつx2未満のデータを抽出する	df[(x <= df[column]) & (df[column] < x2)]
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームを複数の列の値によってグループ化し要約統計量を算出する	df.groupby(columns).describe()
JSONLファイルに小数点以下3桁までデータフレームを書き込む	df.to_csv(filename, float_format='%.3f')
データ列とリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
組の先頭	aTuple[0]
分類結果の正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
縦棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
ゴールド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
文字列の先頭を使う	s[0]
折れ線グラフをレベッカパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
３自然数の最大公約数	math.gcd(n, n2, n3)
MLPでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
青い実線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームの列名を指定された名前リストに置き換える	df.columns = columns
追加できるようにBOM付きで既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
折れ線グラフを赤い破線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
オリーブ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
文字列をシンボルにする	sympy.Symbol(s)
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を算出する	df.groupby([column, column2], as_index=False).max()
データフレームのカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
既存の配列をベースに全要素が1の配列を作成する	np.ones_like(aArray)
散布図のバツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
列の値でデータフレームをまとめたグループ	df.groupby(column)
データフレームのリストカラムのNaNを最大値に指定する	df[aList].fillna(df[aList].max())
カラムをキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
折れ線グラフのポイント印の線幅を指定する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
散布図の下三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
凡例を加える	plt.legend(['凡例A', '凡例B'])
線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
イテラブルの各値を両端キューの先頭に追加する	deq.extendleft(iterable)
スノー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
キーが辞書に存在しているかどうか調べる	key not in aDict
データ列とリストの散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
散布図をダークブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
折れ線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
二つのデータフレームを異なる列をキーにして全ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
Pandasで、データ列を書式で日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
option: 色をダークターコイズにセットする	color = 'darkturquoise'
データフレームを各列毎に集約して、列の分散を計算する	df.groupby(column)[column2].var()
データフレームの列の中にある文字列の合計を数える	df[col].isin([value]).sum()
データフレームのn行目をインプレイスで削除する	df.drop(n, axis=0, inplace=True)
2つのデータフレームを横方向に合体させる	pd.merge(df, df2)
プログラムを異常終了する	sys.exit(1)
無限に文字列が続くイテラブルを得る	itertools.repeat(element)
真紅色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
棒グラフをサンディーブラウン色として描画する	plt.bar(データ列x, データ列y, color='sandybrown')
option: グラフの色をドジャーブルーにセットする	color = 'dodgerblue'
文字列の両端から不要な空白を取り除く	s.strip()
データフレームを'A'列の値によってグループ化し、記述統計量を求める	df.groupby('A').describe()
複数の列によってデータフレームを並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
小数点数が有限	math.isfinite(x)
データフレームを二つの列によってまとめた表を使う	df.groupby(['A', 'B'])
区切りで文字列を分割して文字列リストに変換する	s.split(sep)
折れ線グラフに赤い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
列でデータフレームを集計して、列の要約統計量を求める	df.groupby(column).describe()[column2]
複数のデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
バリーウッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
青色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
データフレームの列の欠損値を直後の値にセットする	df[col].fillna(method='bfill')
データフレームの列をヒストグラムで描く	plt.hist(df[column])
配列と数列について散布図を描画して、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
グラフで使う縦軸の説明をuntitledに変更する	plt.ylabel('y軸ラベル')
ダーク・スラテグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: マーカーを右三角に指定する	marker = '>'
正規分布の累積分布関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームの列で文字列が含まれる行を選択する	df[df[column].str.contains(s)]
ダークオーキッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
option: フォントの色をパープルに設定する	color = 'purple'
白色で散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
散布図に黒い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
非ASCII文字が文字列中に含まれるか調べる	any(not c.isascii() for c in s)
option: シャルトリューズにグラフの色を設定する	color = 'chartreuse'
オレンジレッドにヒストグラムの色を変更する	plt.hist(データ列, color='orangered')
タプルの末尾からn番目以前の要素を取り出す	aTuple[:-n]
option: サーモン色を用いる	color = 'salmon'
最大値でデータフレームのカラムの未入力値を補う	df[col].fillna(df[col].max())
行列と同じ大きさの空のベクトルを作る	np.empty_like(aArray)
散布図に▼マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
リストとリストの散布図を描画して、マーカーをダイアモンドに変更する	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムを真紅色を用いて描画する	plt.hist(データ列, color='crimson')
ダークカーキ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
オブジェクトの属性の値を設定する	setattr(obj, プロパティ名, 値)
カテゴリ列で色分けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ファイルからファイル名を求める	os.path.basename(filepath)
nまでの奇整数リストを作る	list(range(1, n, 2))
文字列は文字列より辞書順で後か調べる	s > s2
散布図に四角マーカーを加える	plt.scatter(データ列x, データ列y, marker='s')
ヒストグラムをマルーン色として描画する	plt.hist(データ列, color='maroon')
縦棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
データフレームのリストカラムのNaNを直前の値で埋める	df[aList].fillna(method='ffill')
折れ線グラフの色をチョコレートにセットする	plt.plot(データ列x, データ列y, color='chocolate')
折れ線グラフの色を珊瑚に設定する	plt.plot(データ列x, データ列y, color='coral')
散布図に赤い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
部分文字列を文字列の後ろから探す	s.rfind(sub)
点線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
作画で用いるフォントを指定する	sns.set(font=フォント名)
プラム色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
'A'列と'B'列によってデータフレームをグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
箱髭図でデータフレームの二つのカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
データフレームのヒストグラムを横に並べて、見る	sns.displot(df, x='列名', col='カテゴリ名')
マッピングから最後に追加した値をポップする	aDict.popitem()
Pandasで、dateStringをタイムスタンプ型に変換する	pd.to_datetime(dateString)
データフレームの末尾n行を取り出す	df.tail(n)
データフレームの中にある文字列の合計を求める	df.isin([value]).sum()
データフレームを列で並べて、上の方n件を取り出す	df.sort_values(columns).head(n)
filepathに現在のワーキングディレクトリを変更する	os.chdir(os.dirname(filepath))
要素はマッピングの値に含まれていないか調べる	element not in aDict.values()
エクセルファイルをエクセルファイルファイルから読み込む	pd.read_excel(filename)
リストを青色化する	f'\033[34m{value}\033[0m'
多次元データを多次元尺度構成法として淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
option: 四角印を加える	marker = 's'
カウンタから最も頻出な項目の件数	aCounter.most_common()[1]
散布図のポイント印の色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
主成分分析で多次元データを濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データフレームのカラムは何日か見る	df[col].dt.day
predicateFuncが真となるリストの要素	itertools.takewhile(predicateFunc, iterable)
数列とリストについての散布図に黒い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
ライトコーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
カウンタの最頻出な値	aCounter.most_common()[0]
option: グラフの色をやわらかい青に指定する	color = 'cornflowerblue'
option: グリーン色を使用する	color = 'green'
option: フクシアにグラフの色を設定する	color = 'fuchsia'
カウンタをタプルで更新する	aCounter.update(aDict)
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
棒グラフを貝殻色として描画する	plt.bar(データ列x, データ列y, color='seashell')
t-SNEで多次元データを濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
星マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
数列とリストについての散布図に黒い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
グラフにx=0の実線を設定する	plt.axvline(x=0, linestyle='solid')
マップのコピー	dict(aDict)
変数が0に近づくとき、数式の極限値を求める	sympy.limit(e, z, 0)
空のチェーンマップを作る	collections.ChainMap()
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
インディゴ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
折れ線グラフをドジャーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
最大最小からベクトル	np.linspace(最小値, 最大値, 要素数)
二つの文字列は同じ	s == s2
紺色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
リストをヒストグラムで作図する	plt.hist(データ列)
カラムの文字列を欠損値に変換する	ds.replace(s, np.nan)
データ列の各データは何回出現するか調べる	ds.value_counts()
要素を双方向キューの末尾に追加する	deq.append(element)
タイムスタンプデータにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
行列の列ごとの最大値を調べる	np.max(aArray, axis=0)
option: グリーンに色を設定する	color = 'green'
nがn2より大きい	n > n2
青い破線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
自然数個からk個取り出したときの並べ方の総数	math.perm(n, k)
データフレームを'A'列によって小さい順にソートし、、更新する	df.sort_values(by='A', ascending=True, inplace=True)
option: n番目のカラムをインデックスに減らす	index_col = n
option: シルバーに色を設定する	color = 'silver'
タプルの各要素を関数に適用した結果で並べ変える	sorted(aTuple, key=func)
折れ線グラフをミディアムアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
カテゴリデータをワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
散布図に黒い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
option: ラインスタイルを実線に設定する	linestyle = 'solid'
データフレームをCSVファイルとしてJSONLファイルに保存する	df.to_csv(filename)
option: フォントの色を紺碧に指定する	color = 'azure'
線グラフの色をグリーンイエローにセットする	plt.plot(データ列x, データ列y, color='greenyellow')
グラフの見た目を綺麗にする	import seaborn as sns
リストとリストについて散布図を描き、四角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
箱ひげ図を横に並べて描画する	plt.boxplot([データ列, データ列])
イエローグリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
ドジャーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
勾配ブースティングで回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
整数nがタプルのいづれかか	n in aTuple
データフレームを各列と列の組み合わせ毎にグループ化し、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
ペルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
データフレームの数値を丸める	df.round()
黄緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
点線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
線グラフをミッドナイトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='midnightblue')
option: マゼンタ色を用いる	color = 'magenta'
アイボリー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
データフレームを各列毎に集計して、列の最大値を計算する	df.groupby(column)[column2].max()
日付と時刻からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
色付きの実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: グラフの色をダークバイオレットに指定する	color = 'darkviolet'
部分文字列かどうか確認する	sub in s
文字列の中の大文字・小文字を無視してパターンによる全マッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgrey')
破壊的に重複した行をデータフレームから削除する	df.drop_duplicates(inplace=True)
表データとデータ列を連結する	pd.concat([df, ds], axis=1)
組中のオブジェクトが最初に見つかる場所	aTuple.index(element)
▽マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='v')
データ列の中にと文字列がある	ds.isin([value, value2])
やわらかい青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
折れ線グラフに丸印を使う	plt.plot(データ列x, データ列y, marker='o')
データフレームを列を用いて昇順にソートする	df.sort_values(by=column, ascending=True)
option: フォントの色をライトシアンに変更する	color = 'lightcyan'
折れ線グラフの色をリネンに指定する	plt.plot(データ列x, データ列y, color='linen')
JSON形式のファイル入力を辞書にする	json.load(fin)
ヒストグラムの色をライムに指定する	plt.hist(データ列, color='lime')
昇順にタプルの要素をソートする	sorted(aTuple, reverse=True)
丸マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフをビスク色を使って描画する	plt.plot(データ列x, データ列y, color='bisque')
今日の月数を見る	datetime.datetime.today().month
1で全要素を初期化したベクトル	np.ones(要素数, dtype=np.int)
数値を紫色でプリントできる文字列にする	f'\033[35m{value}\033[0m'
ファイルパスから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
線グラフをミディアムパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
縦棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
ファイルパスをEUCでオープンする]	open(filepath, encoding='euc_jp')
分類モデルを作る	model.fit(説明変数, 目的変数)
データフレームから数値データの列を取り出す	df.select_dtypes('number')
折れ線グラフを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
マップからキーの値をエラーなく得る	aDict.get(key, None)
両端キューのstart番目からend番目までの部分要素	collections.deque(itertools.islice(deq, start, end))
実数のtan	math.tan(x)
文字列が全て英字	s.isalpha()
データフレームをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
下三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームのリスト列の中にある日付データの合計をカウントする	df[aList].isin([value]).sum()
整数nを十六進数文字列に変換する	hex(n)[2:]
縦軸を対数に変更する	plt.yscale('log')
バイナリ書き込みモードでファイルパスをオープンして]、fとする	f = open(filepath, mode='wb')
コーンフラワーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
淡く色をプロットの描画で使う	sns.set(pallete='muted')
グラフを論文用に指定する	sns.set(context='paper')
データフレーム全体を行でソートする	df.sort_index()
データフレームを'A'列と'B'列でグループ化する	df.groupby(['A', 'B'])
文字列を空白で区切って、整数のリストに変換する	map(int, s.split())
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
線形判別分類の準備をする	model = sklearn.manifold.TSNE(n_components=n)
ダークブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームをJSONLファイルにヘッダを付けずに書き込む	df.to_csv(filename, header=None)
回帰分析をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームのn行目まで抽出する	df[:n]
二つのデータフレームを列をキーにして左結合する	pd.merge(df, df2, on=column, how='left')
日付時刻データが日付時刻データより前かどうか調べる	aDatetime < aDatetime2
バイトオーダを使う	sys.byteorder
JSONLファイルにタブ区切りでデータフレームを保存する	df.to_csv(filename, sep='\t')
各列毎にデータフレームをグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
線グラフの色をダークブルーに設定する	plt.plot(データ列x, データ列y, color='darkblue')
折れ線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
nの2進表記	bin(n)
黒い菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
ダークグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
双方向キューの要素を反転する	deq.reverse()
グレー色としてヒストグラムを描画する	plt.hist(データ列, color='gray')
0から始まる無限数列を得る	itertools.count()
データフレームを列を用いてソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
データフレームとデータ列を連結する	pd.concat([df, ds], axis=1)
データフレームを列によってグループ化して各グループごとの分散を求める	df.groupby(column).var()
文字列を走査し、正規表現にASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
辞書にキーが存在するか	key in aDict
淡いピンク色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
散布図をゲインズボロ色を用いて描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
両端キューから最初の数値を取り除く	deq.remove(element)
リストを赤色で出力する	print(f'\033[31m{value}\033[0m')
黒い▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
L1ノルムとして正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
２つの列によってで降順にデータフレームを整列する	df.sort_values(by=['A', 'B'], ascending=False)
データフレームを散布図で可視化してカテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: グラフの色をバイオレットに設定する	color = 'violet'
ふたつの集合が集合と互いに素	aSet.isdisjoint(aSet2)
散布図をポイント印で描画する	plt.scatter(データ列x, データ列y, marker='.')
データフレームの中で、列と列の重複を調べる	df.duplicated(subset=[column, column2])
データフレームの列の欠損値を前の行の値に指定する	df[col].fillna(method='ffill')
リストとイテラブルについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
棒グラフをダークオリーブグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
データフレームのリストカラムの未入力値を平均値に設定する	df[aList].fillna(df[aList].mean())
折れ線グラフの下三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
Pandasで、UNIX秒の文字列からdatetime64型に変換する	pd.to_datetime(s, unit='s', utc=True)
大文字・小文字を無視して正規表現で文字列を分ける	re.split(pattern, s, flags=re.IGNORECASE)
黒い右三角マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
配列と数列について散布図を描画し、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
文字列を改行によって分割する	s.splitlines()
紺碧色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
データフレームのリストカラムの値をValueMapで一度に置換する	df[aList].replace(ValueMap)
グラフの色を全般的に暗くする	sns.set(pallete='dark')
配列の要素ごとのアダマール積	np.multiply(aArray, aArray2)
組のn番目からn2番目までの部分	aTuple[n:n2]
ファイルをバイナリモードとしてオープンして]fとする	f = open(filepath, mode='rb')
列を2回あわせた直積	itertools.product(iterable, repeat=2)
データフレームのカラムの欠損値を直前の値で補う	df[col].fillna(method='ffill')
双方向キューの末尾から要素を取り出す	deq.pop()
データフレームのリスト列を丸める	df[aList].round()
折れ線グラフをタン色として描画する	plt.plot(データ列x, データ列y, color='tan')
作画のカラーパレットを指定する	sns.set(pallete=パレット名)
ファイル全体を行ごとに分割してリストにする	[s.strip() for s in f.readlines()]
nはセットのいづれかか調べる	n in aSet
実測値を分類モデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
折れ線グラフの色を真紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
文字列をカンマで区切り、、列挙する	s.split(',')
散布図のバツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
縦棒グラフをハニーデュー色として描画する	plt.bar(データ列x, データ列y, color='honeydew')
線グラフをダークオレンジ色を使って描画する	plt.plot(データ列x, データ列y, color='darkorange')
読み込みモードとしてファイルパスをオープンする]	open(filepath, mode='r')
nがn2未満それかn3以上か確認する	n < n2 or n >= n3
回帰分析をロバスト推定で行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
列によってデータフレームを並べて、行を振り直す	df.sort_values(columns).reset_index(drop=True)
散布図をrgbの四角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの列の最頻値	df[col].mode()
横棒グラフをダークスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
グラフのパレットを全般的に明るくする	sns.set(pallete='bright')
二つの最も大きい値	max(x, y)
ヒストグラムの色を耐火レンガにセットする	plt.hist(データ列, color='firebrick')
nがn2	n == n2
最初のカテゴリーを無視し、データフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
ヒストグラムをカデットブルー色を用いて描画する	plt.hist(データ列, color='cadetblue')
変数がマイナス無限大に近づく際の数値の極限値を求める	sympy.limit(e, z, -oo)
異なるカラムをキーにして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgray')
特異値分解として濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
散布図に赤い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
箱髭図を描いて、平均値を加える	plt.boxplot(データ列, showmeans=True)
ベクトルの要素ごとの最小公倍数	np.lcm(aArray, aArray2)
双方向キューの値をn個分左に回転させる	deq.rotate(-n)
Pandasでデータフレームのcollのエポック秒からタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
リストと配列についての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの色をレベッカパープルに指定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
シャルトリューズにヒストグラムの色を指定する	plt.hist(データ列, color='chartreuse')
option: 色をピーチパフに設定する	color = 'peachpuff'
コーンズシルク色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
データ列の中にある文字列との数を数える	ds.isin([value, value2]).sum()
日付時刻データは日付時刻データより後ろか調べる	aDatetime > aDatetime2
データフレームのカラムのNaNを最頻値で置き換える	df[col].fillna(df[col].mode().iloc[0])
データフレームを各列毎にグループ分けして文字列というグループの個数を求める	df.groupby(column).size()[s]
折れ線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
データフレームを各列と列の組み合わせ毎にグループ化して個数を計算する	df.groupby([column, column2], as_index=False).count()
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
両端キューを列から作る	collections.deque(iterable)
線グラフの色をオレンジに指定する	plt.plot(データ列x, データ列y, color='orange')
データフレームの空文字をNaNに変換し、ドロップする	df.replace('', np.nan).dropna()
option: ベクトルのデータ型を指定する	dtype = np.int32
タイムスタンプデータが日曜日	aDatetime.weekday() == 6
xでデータフレームのカラムの欠損値を埋める	df[col].fillna(x)
改行なしに数値をプリントする	print(value, end='')
折れ線グラフのクロスマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
配列の差を算出する	aArray - aArray2
実数の床数	math.floor(x)
破線として配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
赤い星マーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
実数の天井数	math.ceil(x)
コーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
日付時刻データが日付時刻データと同時	aDatetime == aDatetime2
option: ディムグレーに色を指定する	color = 'dimgray'
正規表現patternでまとめてreplにデータフレームのカラムの値を置き換える	df[col].replace(pattern, repl, regex=True)
要素を両端キューのn番目に追加する	deq.insert(n, element)
双曲線余弦の逆数	math.acosh(x)
n番目のシートをエクセルファイルファイルの読み込む	pd.read_excel(filename, sheet_name=n)
今日が月曜日	datetime.datetime.today().weekday() == 0
辞書からキーで指定された値をポップする	aDict.pop(key)
ファイルパスのディレクトリ名	os.path.dirname(filepath)
データフレームの列の欠損値を直後の値で埋める	df[col].fillna(method='bfill')
ヒストグラムを点線を用いて描く	plt.hist(データ列, linestyle='dotted')
データフレームのNaNを平均値に設定する	df.fillna(df.mean())
集合に列を追加する	aSet.update(iterable)
散布図に上三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
ロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
ファイルを追加モードで開いて]、fとする	f = open(filepath, mode='a')
データフレームの欠損値を最頻値で置き換える	df.fillna(df.mode().iloc[0])
タプルの要素を昇順に並べ変える	sorted(aTuple, reverse=False)
文字列の開始位置以降が部分文字列で始まるか	s.startswith(sub, start)
オブジェクトが名前付きタプルか	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データフレームを関数の値で集計して、列挙する	[(name, group) for name, group in df.groupby(関数)]
日付データと日付データの時間差を秒で算出する	(aDate - aDate2).total_seconds()
要素がセットのメンバーでないかどうか	element not in aSet
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
ゴールド色でヒストグラムを描画する	plt.hist(データ列, color='gold')
データフレームの欠損値を前の行の値で埋める	df.fillna(method='ffill')
データ列を等しい量になるようにn個に分割する	pd.qcut(ds, n)
option: ブルーバイオレットにグラフの色を設定する	color = 'blueviolet'
データフレームの列を1000の位で四捨五入して整数にする	df[col].round(-3).astype(int)
折れ線グラフの線種を実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
option: フォントの色をディムグレーに設定する	color = 'dimgrey'
ヒストグラムの色をスカイブルーにする	plt.hist(データ列, color='skyblue')
データフレームの列を折れ線グラフを用いて作図する	plt.plot(df[column], df[column])
n×n2の2次元リスト	[[0] * n for _ in range(n2)]
四角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
値をキューの最初に追加する	deq.appendleft(element)
コロンで文字列を分割して文字列リストに変換する	s.split(':')
表データを列によって並べてNaNを先頭にする	df.sort_values(by=column, na_position='first')
スクリプトファイルと同じフォルダのファイルパスのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
option: パウダーブルー色を使用する	color = 'powderblue'
option: フォントの色をパウダーブルーに指定する	color = 'powderblue'
日付時刻データの時刻を見る	aDatetime.time()
カラムを10の位で四捨五入する	ds.round(-1)
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
縦棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
各列毎にデータフレームを集計して列の合計を算出する	df.groupby(column)[column2].sum()
データフレームをグループ化しそれぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
データフレームを列によってグループ化して、最小値を算出する	df.groupby(column).min()
データ列とリストの散布図を描画して、マーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
データフレームの未入力値が含まれる箇所に	df.style.highlight_null()
リストとデータ列についての散布図に文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
小麦色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
データフレームのカラムが何曜日か確認する	df[col].dt.weekday_name
ライトゴールドロディイエロー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
文字列リストをsepを区切りとして結合する	sep.join(aStringList)
棒グラフをグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='green')
８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int8)
辞書に項目名ワード引数で追加する	aDict.update(**kwargs)
'A'列と'B'列によってデータフレームを昇順に並べ、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
option: グラフの色をトマトに指定する	color = 'tomato'
データフレームのリストカラムの75パーセンタイル	df[aList].quantile(0.75)
option: ゲインズボロにグラフの色を設定する	color = 'gainsboro'
折れ線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
SJISでTSVを読み込む	pd.read_csv(filename, encoding='shift_jis')
日付データが日付データより遅いかどうか調べる	aDate > aDate2
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
データフレームのカラムの値が欠損値	df[col].isna()
ロバストな線形回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
既存のファイルをUTF8として追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
タプルをJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
ローングリーンにヒストグラムの色を変更する	plt.hist(データ列, color='lawngreen')
データ列とリストについて散布図をプロットしてマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
ファイルパスが存在しない	not os.path.exists(filepath)
option: NaNを含めない	dropna = True
ライトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームのリスト列の相関行列ピアソン相関係数でを計算する	df[aList].corr(method='pearson')
ダークマゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
rgbの大バツマーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データ列の推移を折れ線グラフとして可視化する	plt.plot(range(len(データ列)), データ列)
option: 色をミッドナイトブルーに設定する	color = 'midnightblue'
クラス分類の予測精度をヒートマップとして見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
散布図を黒いバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
実数の２乗を求める	x ** 2
折れ線グラフの三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
配列とリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
イテラブルを折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
option: 青緑にグラフの色を設定する	color = 'teal'
データ列の値がNaNか	ds.isna()
前の値でデータ列の欠損値を補う	ds.fillna(method='ffill')
平均と標準偏差から乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
配列とリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
箱ひげ図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
データフレームを表示するときヘッダー行を左寄せに指定する	pd.set_option('colheader_justify', 'left')
クラス分類をスタッキングで行う	sklearn.ensemble.StackingClassifier()
新しいロバスト分類器を用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
リストとリストの散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
二つの文字列を順に表示する	print(value, value2)
今日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
実数が整数か確認する	x.is_integer()
折れ線グラフのバツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
リストのn番目の要素を消す	del aList[n]
option: エンコーディングをSJISに変更する	encoding = 'shift_jis'
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
要素一つのりスト	[element]
線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
ペルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
オーキッド色でヒストグラムを描画する	plt.hist(データ列, color='orchid')
文字列を最後の部分文字列で二分し、前半の文字列を求める	s.rpartition(sub)[0]
英字の大文字を全部見る	string.ascii_uppercase
画面にグラフの目的を設定する	sns.set(context='notebook')
散布図の四角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)

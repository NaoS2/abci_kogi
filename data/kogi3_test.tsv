＜オプション＞ミディアムブルーに色を設定する	color = 'mediumblue'
ヒストグラムの線のスタイルを実線にする	plt.hist(データ列, linestyle='solid')
ヒストグラムを描画して、その色をダークカーキに変更する	plt.hist(データ列, color='darkkhaki')
柱状グラフを濃い色を使ってプロットする	plt.hist(xdata, color='deep')
ヒストグラムを描画して、その色をインディアンレッドに変更する	plt.hist(データ列, color='indianred')
マッピングから項目名の値か、もしくは要素を得る	aDict.get(key, element)
Pandasで文字列をフォーマットでタイムスタンプ型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
第一コマンド引数を調べる	sys.argv[1]
nが一桁の数かどうか調べる	0 <= n <= 9
色差別ない色で散布図をプロットする	plt.plot(xdata, ydata, c='colorblind')
折れ線グラフを描画して、色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
折れ線グラフの△マーカーを黄色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
明るいの色を黒色に変更する	plt.plot(xdata, ydata, linestyle='bright', color='k')
値が集合に含まれるか	element in aSet
タプルのキーと値を入れ替える	{v: k for k, v in aDict.items()}
文字列の開始位置以降に部分文字列が含まれない	s.find(sub, start) == -1
＜オプション＞色をブランチドアーモンドに変更する	color = 'blanchedalmond'
数値を赤色でプリントする	print(f'\033[31m{value}\033[0m')
線グラフを描画して、その色をラベンダーに変更する	plt.plot(データ列, データ列2, color='lavender')
ヒストグラムを描画してその色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
シーケンスを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
本日のローカルな日付	datetime.date.today()
＜オプション＞色を貝殻に設定する	color = 'seashell'
文字列を紫色化する	f'\033[35m{value}\033[0m'
実数が正か	x > 0
タプルの文字列が最初に見つかる位置	aTuple.index(element)
中央値でデータフレームの中のカラムをビン分割する	pd.qcut(df[col], 2)
＜オプション＞淡いピンク色を使用する	color = 'lightpink'
ファイルパスをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
実数のk進対数を求める	math.log(x, k)
＜オプション＞先頭のカラムを行に設定する	index_col = 0
＜オプション＞色を紺碧に設定する	color = 'azure'
データフレームを'A'列によってソートし、NaNを先頭にする	df.sort_values(by='A', na_position='first')
線グラフを描画して、色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
ヒストグラムを描画してその色をペールグリーンに指定する	plt.hist(データ列, color='palegreen')
オブジェクトからプロパティを削除する	delattr(obj, プロパティ名)
小数点数の余弦の逆数	math.acos(x)
タプルの値を関数に適用した結果でソートする	sorted(aTuple, key=func)
カラムの欠損値を第二四分位数に設定する	ds.fillna(ds.median())
＜オプション＞黄色にグラフの色を設定する	color = 'yellow'
データフレームを百の位で丸めて、整数型にする	df.round(-2).astype(int)
ヒストグラムを描画して、その色をディープスカイブルーに変更する	plt.hist(データ列, color='deepskyblue')
＜オプション＞行を自動的な連番に設定する	index_col = None
文字列のプレフィックスから部分文字列を取り除く	s.removeprefix(sub)
データフレームの列のNaNを第二四分位数に変更する	df[col].fillna(df[col].median())
濃い色のマーカーで散布図を重なりを見やすくプロットする	plt.plot(xdata, ydata, c='deep', alpha=0.5)
NaNを使う	math.nan
文字列を記号にする	sympy.Symbol(s)
線グラフを描画して、その色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
データ列をstartからendの範囲の度数分布図を用いてプロットする	plt.hist(データ列, range=(start, end))
ファイルを文字列の示すエンコーディングとしてオープンする]	open(filepath, encoding=s)
数列とデータ列について相関を可視化する	plt.scatter(xdata, ydata)
綺麗なグラフを使用する準備をする	import seaborn as sns
実数のタンジェントの逆数	math.atan(x)
ヒストグラムを描画してその色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
データ列の中にある文字列と日付データの個数を求める	ds.isin([value, value2]).sum()
＜オプション＞グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
ValueMapでまとめてデータフレームの値を変更する	df.replace(ValueMap)
複数の列によってデータフレームを並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
黄緑にヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
リストとリストについて青い明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='b')
文字列を部分文字列で区切って、列挙する	s.split(sub)
黒い右三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='>', c='k')
大文字と小文字を交換する	s.swapcase()
文字列はタイトル大文字小文字	s.istitle()
日付時刻データからn日分、減らす	aDatetime - datetime.timedelta(days=n)
リストと配列の青い濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
＜オプション＞グレーにグラフの色を設定する	color = 'gray'
リストと配列の散布図にバツマーカーを描く	plt.plot(xdata, ydata, marker='x')
３つの最小値	min(x, y, z)
データ列と配列で淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
16進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームを表示するとき、列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
リストとリストの散布図に赤い▲マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='r')
＜オプション＞色を赤に設定する	color = 'red'
折れ線グラフのマーカーを上三角にする	plt.plot(データ列, データ列2, marker='^')
線グラフの色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
複数行対応として正規表現で文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
文字列中にひとつでも非アスキー文字が含まれる	any(not c.isascii() for c in s)
プログラムの実行を異常停止する	sys.exit(1)
ファイル全体をリストとして読む	f.readlines()
＜オプション＞ミディアムアクアマリン色を用いる	color = 'mediumaquamarine'
折れ線グラフを描画して色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
要素が全て1の行列	np.ones(要素数, dtype=np.int)
マッピングの項目名一覧	list(aDict)
プロットをスライドに設定する	sns.set(context='talk')
文字列中にひとつでも非数字があるか	any(not c.isdigit() for c in s)
ヒストグラムを描画して、色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
現在が何日か知る	datetime.datetime.today().day
最大値・最小値の範囲で一様な乱数を算出する	random.uniform(最小値, 最大値)
データ列を中央値で分割する	pd.qcut(ds, 2)
ヒストグラムを描画してその色をライトコーラルにセットする	plt.hist(データ列, color='lightcoral')
データフレームを関数で集約する	df.groupby(関数)
データフレームから型リストで指定されたデータ型の列だけ除外する	df.select_dtypes(exclude=typeList)
＜オプション＞オリーブに色を変更する	color = 'olive'
辞書のキーの値を得る	aDict[key]
文字列を区切りで区切って、列挙する	s.split(sep)
日付データは日付データと同時	aDate == aDate2
二つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
横棒グラフを描画して、グラフ幅をxに変更する	plt.barh(ラベル列, データ列, width=x)
折れ線グラフを描画して、色をグリーンイエローに変更する	plt.plot(データ列, データ列2, color='greenyellow')
数値を青色にする	f'\033[34m{value}\033[0m'
柱状図の描画して、正規化する	plt.hist(データ列, density=True)
ゼロ埋めされた符号なし８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.uint8)
書式をタプルでフォーマットする	formatText.format_map(aDict)
データ列を分割数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ヒストグラムを描画して、色をミッドナイトブルーに変更する	plt.hist(データ列, color='midnightblue')
散布図をパステル調の色のマーカーとして描画する	plt.plot(xdata, ydata, c='pastel')
データフレームのカラムのNaNを最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
赤色の大バツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='X', c='r')
折れ線グラフを描画して、その色をダークバイオレットにセットする	plt.plot(データ列, データ列2, color='darkviolet')
プロットの描画で淡いパレットを使う	sns.set(pallete='muted')
浮動小数点数を３乗する	x ** 3
ヘッダー行を右寄せに変更する	pd.set_option('colheader_justify', 'right')
ファイルをEUCで開く]	open(filepath, encoding='euc_jp')
折れ線グラフを描画してその色をミッドナイトブルーに変更する	plt.plot(データ列, データ列2, color='midnightblue')
ヒストグラムをカラーマップとして描画する	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
ファイルを書き込みモードとして開き]、fとする	f = open(filepath, mode='w')
＜オプション＞グラフの色をスレートブルーにする	color = 'slateblue'
分子n、分母mの分数を用意する	fractions.Fraction(numerator=n, denominator=m)
文字列はタプルの要素でないか	element not in aTuple
データフレームのリストカラムの欠損値を中央値で置き換える	df[aList].fillna(df[aList].median())
ファイルをバイナリ書き込みモードとしてオープンする]	open(filepath, mode='wb')
グラフの用途を画面に指定する	sns.set(context='notebook')
実行結果をシアンでプリントする	print(f'\033[36m{value}\033[0m')
リストとリストについて散布図をプロットして、上三角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='^', c=rgb)
色差別ない色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
データ列をn個にビンニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列, データ列2, color='lightslategray')
列をキーとして２つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
ベクトルの差を求める	aArray - aArray2
nがn2	n == n2
既存のベクトルを元に全要素が0の配列	np.zeros_like(aArray)
リストとイテラブルの散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
複数の列をキーにしてデータフレームをソートする	df.sort_values(by=column)
線グラフの色を濃いシアンに指定する	plt.plot(データ列, データ列2, color='darkcyan')
＜オプション＞色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
＜オプション＞文字コードをSJISに変更する	encoding = 'shift_jis'
列の値によってデータフレームをグループ化し、要約統計量を求める	df.groupby(column).describe()
色差別ないグラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='^')
データフレームのリスト列の文字列を未入力値にする	df[aList].replace(s, np.nan)
リストを文字列に変換してカンマで連結する	','.join(map(str, iterable))
ヒストグラムを描画してその色を茶色に指定する	plt.hist(データ列, color='brown')
＜オプション＞色を黄緑に設定する	color = 'chartreuse'
棒グラフを描画して、幅をxに指定する	plt.bar(ラベル列, データ列, width=x)
折れ線グラフを描画して、色を青緑に指定する	plt.plot(データ列, データ列2, color='teal')
赤いダイアモンドマーカーをイテラブルとリストの散布図に描画する	plt.plot(xdata, ydata, marker='D', c='r')
ValueMapでデータフレームのリストカラムの値を一度に置換する	df[aList].replace(ValueMap)
サブクラスかどうか調べる	issubclass(サブクラス, クラス)
部分文字列が文字列の終了位置より前に存在しないか	s.find(sub, 0, end) == -1
データフレームのカラム名を列挙する	df.columns
行列の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
赤い星マーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='*', c='r')
マッピングからカウンタを生成する	collections.Counter(aDict)
両端キューの右にイテラブルの各要素を追加する	deq.extend(iterable)
値が集合のメンバーか調べる	element in aSet
緑色で変数をプリントする	print(f'\033[32m{value}\033[0m')
ヒストグラムを描画して、色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
リストとイテラブルで色差別ないの折れ線グラフを描画し、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
辞書からキーで指定した項目をポップする	aDict.pop(key)
標準エラー	sys.stderr
リストとデータ列の散布図を重なりを見やすく色差別ない色で描く	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
文字列が大文字か調べる	s.isupper()
ヒストグラムを描画してその色を貝殻に設定する	plt.hist(データ列, color='seashell')
線グラフを描画してその色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
配列と数列について色差別ない色の折れ線をプロットして、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
折れ線グラフを描画して、色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
データ列とラベルを指定して、縦棒を描画する	plt.bar(ラベル列, データ列)
折れ線グラフを描画して、その色をカーキに指定する	plt.plot(データ列, データ列2, color='khaki')
折れ線グラフを描画して色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
xに横棒の幅を指定する	plt.barh(ラベル列, データ列, width=x)
折れ線グラフに青いクロスマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
集合の要素数を求める	len(aSet)
文字列内に数字が含まれる	any(c.isdigit() for c in s)
ヒストグラムとしてデータフレームの列を可視化する	plt.hist(df[column])
＜オプション＞グラフの色をコーラルにする	color = 'coral'
最初の部分文字列で文字列を分割した時の前半の文字列	s.partition(sub)[0]
二次元組をフラット化する	sum(aTuple)
＜オプション＞バッファリングのサイズを小さくする	buffering = 4096
リストとデータ列について暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
明るいカラーパレットをグラフの描画で用いる	sns.set(pallete='bright')
ひとつでもアルファベットが文字列内に含まれるかどうか判定する	any(c.isalpha() for c in s)
データフレームのリストカラムを十の位で四捨五入して、整数型にする	df[aList].round(-1).astype(int)
＜オプション＞ダークバイオレットにグラフの色を指定する	color = 'darkviolet'
パレットを全般的に濃くする	sns.set(pallete='deep')
文字列の大文字小文字を逆にする	s.swapcase()
データフレームを'A'列によって昇順に破壊的に整列する	df.sort_values(by='A', ascending=True, inplace=True)
双方向キュー中の要素の位置	deq.index(element)
表をグループ化し、それぞれの列に対し最小値を算出する	df.groupby(column)[column2].min()
配列と配列で暗いの折れ線グラフを描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
散布図に赤い▲マーカーを用いる	plt.plot(xdata, ydata, marker='^', c='r')
マッピングを階層化する	collections.ChainMap(aDict)
イテラブルを周期的に繰り返す	itertools.cycle(iterable)
シーケンスとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
データ列とリストについて黒色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
配列とリストについて散布図を描き、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
ビン数nでデータフレームの中のカラムをビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
リストを境界値としてデータ列をビン分割する	pd.cut(ds, aList)
＜オプション＞ディムグレーにグラフの色をセットする	color = 'dimgray'
データフレームからランダムに一行を抽出する	df.sample()
ファイルをバイナリモードで開く]	open(filepath, mode='rb')
折れ線グラフに青い菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
データフレームの列が正規表現文字列にマッチしないデータを抽出する	df[not df[column].str.match(s)]
nがn2より大きいかどうか調べる	n > n2
＜オプション＞色をマゼンタに指定する	color = 'magenta'
配列と配列について破線を描画して、色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
組の要素を昇順にソートする	sorted(aTuple, reverse=False)
平均値でデータフレームのリスト列のNaNを埋める	df[aList].fillna(df[aList].mean())
色をパステル調にする	sns.set(pallete='pastel')
列を1000の位で丸める	ds.round(-3)
折れ線グラフを描画して、その色をゴールデンロッドに指定する	plt.plot(データ列, データ列2, color='goldenrod')
浮動小数点数を実数で整数除算する	x // y
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
ヒストグラムを描画してその色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
実数のアークサイン	math.asin(x)
既存の配列をベースに全要素が1の配列	np.ones_like(aArray)
Pandasで、dateStringをタイムスタンプに変換する	pd.to_datetime(dateString)
オブジェクトがプロパティを持つか	hasattr(obj, プロパティ名)
マッピングから最後に追加した項目をポップする	aDict.popitem()
TSVからカンマ区切りのファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
ヒストグラムを描画して、色をゴールドに変更する	plt.hist(データ列, color='gold')
リストとリストの暗いを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
横に並べてボックスチャートを描く	plt.boxplot([データ列, データ列2])
データフレームを各列毎にグループ化し、列の最小値を求める	df.groupby(column)[column2].min()
二つのカウンタのいずれかに含まれる値を計算する	aCounter | aCounter2
書式を引数としてargsをフォーマットする	formatText.format(*args)
昇順にデータフレームを列で破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
データフレームをBOMを付けてJSONLファイルに書き込む	df.to_csv(filename, encoding='utf_8_sig')
散布図をクロスマーカーで描画する	plt.plot(xdata, ydata, marker='x')
nがn2未満、またはn3以上	n < n2 or n >= n3
グラフのx軸にラベルを付ける	plt.xlabel(untitled)
改行しなくてリストを出力する	print(value, end='')
イテラブルの集合を使う	set(iterable)
ヒストグラムを描画して、色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
折れ線グラフの色をティールにする	plt.plot(データ列, データ列2, color='teal')
真⊂	aSet < aSet2
リストの値を小さい順に並べる	sorted(aList, reverse=False)
リストを四分位数でビン分割する	pd.qcut(aList, 4)
＜オプション＞ミディアムターコイズに色を設定する	color = 'mediumturquoise'
折れ線グラフを描画してその色を淡いピンク色に変更する	plt.plot(データ列, データ列2, color='lightpink')
データ列の中に文字列と文字列がいくつ含まれるか数える	ds.isin([value, value2]).sum()
リストの総和を計算する	sum(aList)
ファイルパスのベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
実数に数を掛ける	x * y
文字列を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
データ列とイテラブルの濃いグラフを描画し、、色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
折れ線グラフの上三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
Pandasで、文字列を日付データにする	pd.to_datetime(s)
データ列の中にあるの合計をカウントする	ds.isin([value]).sum()
データフレームの列を10の位で四捨五入する	df[col].round(-1)
カラムの第一四分位数	ds.quantile(0.25)
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
グラフの横軸のラベルをuntitledに指定する	plt.xlabel(untitled)
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
ひとつ置きにリストを取り出す	aList[::2]
＜オプション＞イエローグリーンに色を設定する	color = 'yellowgreen'
n2がn以上かつ、n3以下か調べる	n <= n2 and n2 <= n3
数値を簡単にする	sympy.sympify(e)
ファイルから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
文字列が空白からなるかどうか調べる	s.isspace()
データフレームのリストカラムの未入力値を最大値で置換する	df[aList].fillna(df[aList].max())
カウンタ同士で∪演算する	aCounter | aCounter2
散布図に下三角マーカーを用いる	plt.plot(xdata, ydata, marker='v')
複数の列によってによってデータフレームを降順にソートする	df.sort_values(by=column, ascending=False)
赤い丸マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
赤色の四角マーカーを配列と配列についての散布図に描く	plt.plot(xdata, ydata, marker='s', c='r')
＜オプション＞ライムにグラフの色を設定する	color = 'lime'
2つの浮動小数点数が十分に近いかどうか	math.isclose(x, x2)
データフレームをタブ区切りとしてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
折れ線グラフの色をサンディーブラウンに変更する	plt.plot(データ列, データ列2, color='sandybrown')
実数の小数点を丸める	round(x)
データフレームを二つの列によって降順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
配列と配列について散布図を描画し、、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
一点鎖線にヒストグラムを設定する	plt.hist(データ列, linestyle='dashbot')
ヒストグラムを描画して、その色をシャルトリューズに指定する	plt.hist(データ列, color='chartreuse')
文字列内にひとつでも英数字があるかテストする	any(c.isalnum() for c in s)
カラーコードの星マーカーをデータ列と数列についての散布図に描く	plt.plot(xdata, ydata, marker='*', c=rgb)
文字列が全て小文字かどうか	s.islower()
＜オプション＞デピンクを使う	color = 'deeppink'
折れ線グラフに緑色の上三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
小数点数の双曲線正弦を求める	math.sinh(x)
配列とリストについての散布図に黒い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
リストと配列について散布図を描画して、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
データ列の値がNaN	ds.isna()
＜オプション＞色をライムグリーンに変更する	color = 'limegreen'
折れ線グラフを描画してその色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
セットから別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
文字列が片仮名かどうか調べる	('ァ' <= ch <= 'ン')
折れ線グラフに描画して、マーカーを下三角印にする	plt.plot(データ列, データ列2, marker='v')
標準入力から1行分改行なしで読み込む	sys.stdin.readline().rstrip()
折れ線グラフの色を珊瑚に設定する	plt.plot(データ列, データ列2, color='coral')
整数nを二進表記に変換する	bin(n)
折れ線グラフを点線を用いて描画する	plt.plot(データ列, データ列2, linestyle='dotted')
直前の値でデータ列の欠損値を補う	ds.fillna(method='ffill')
ヒストグラムを描画して、その色をグリーンに変更する	plt.hist(データ列, color='green')
配列とイテラブルについて散布図を描いて菱形マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='D', c=rgb)
ヒストグラムを描画して、色をミディアムバイオレットレッドに指定する	plt.hist(データ列, color='mediumvioletred')
ヒストグラムを描画して、色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
データフレームのカラムの値をValueMapで置き換える	df[col].replace(ValueMap)
コサインを求める	math.cos(x)
デフォルトでグラフの見栄えをいい感じにする	sns.set()
濃いの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
オブジェクトがタプル	isinstance(obj, tuple)
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
リストとリストの青色の暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='b')
文字列からISO書式でタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
数列と配列についての散布図にカラーコードのバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
表示可能な最大行数をnに指定する	pd.set_option('display.max_rows', n)
プロットの用途をポスターに設定する	sns.set(context='poster')
変数がマイナス無限大に近づくときの数式の極限値を計算する	sympy.limit(e, z, -oo)
十六進数字を全て見る	string.hexdigits
複数の列で降順にデータフレームを破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
データフレームから重複した行を残さず、消す	df.drop_duplicates(keep=False)
日付データをISO8601書式の文字列に変換する	aDate.isoformat()
文字列リストを連結し、ひとつの文字列にする	''.join(aStringList)
日付データにn日分加算する	aDate + datetime.timedelta(days=n)
＜オプション＞ライトゴールドロディイエローにグラフの色を設定する	color = 'lightgoldenrodyellow'
実数で実数を割って、切り捨てる	x // y
折れ線グラフを描画して、その色をオレンジレッドに変更する	plt.plot(データ列, データ列2, color='orangered')
双方向キュー	collections.deque()
配列とリストの色差別ないグラフを描き、、その色を黒くする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
日付と時刻から日付時刻を生成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
＜オプション＞色をライトシアンに設定する	color = 'lightcyan'
リストは少なくとも一つ真	any(aList)
リストと数列のカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
辞書のキーとその項目を列挙する	aDict.items()
表データの数値をまとめて丸める	df.round()
リストとリストについて散布図を描画して文字列という凡例用のラベルをつける	plt.scatter(xdata, xdata, label=s)
線グラフを描画して、その色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
カラムの値をValueMapでまとめて変更する	ds.replace(ValueMap)
線幅nのバツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
データ列をn個に等間隔でビン分割する	pd.cut(ds, n)
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
＜オプション＞ダークグレーにグラフの色を設定する	color = 'darkgrey'
Pandasで、データ列のUNIX時間から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
リストの末尾からn番目以前の要素を取り出す	aList[:-n]
ヒストグラムを描画して色をモカシンに設定する	plt.hist(データ列, color='moccasin')
＜オプション＞色をライトグリーンに設定する	color = 'lightgreen'
ヒストグラムを描画して、その色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
＜オプション＞カデットブルーを用いる	color = 'cadetblue'
ふたつの関係が部分集合か	aSet.issubset(aSet2)
折れ線グラフの四角マーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='s', markersize=n)
二つの集合の和集合を使う	aSet.union(aSet2)
淡い色を用いて散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
データ列を折れ線グラフに描画してマーカーを右三角印にする	plt.plot(データ列, データ列2, marker='>')
格子をグラフに付ける	plt.grid(True)
リストを淡い色のヒストグラムとしてプロットする	plt.hist(xdata, color='muted')
変数名をキーとして辞書	dict(name=element)
散布図を黒い星マーカーで描画する	plt.plot(xdata, ydata, marker='*', c='k')
数列とリストについて散布図を描いて右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
データフレームを列によってグループ化し、、各グループ毎の標準偏差を求める	df.groupby(column).std()
ヒストグラムを描画して、その色をブルーバイオレットに指定する	plt.hist(データ列, color='blueviolet')
ファイルをオープンして]、追加ストリームを見る	open(filepath, mode='a')
濃いの折れ線の線幅を指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
イテラブル自身を2回あわせたデカルト積を算出する	itertools.product(iterable, repeat=2)
２つのリストをプリントする	print(value, value2)
＜オプション＞色をドジャーブルーに変更する	color = 'dodgerblue'
二進文字列をバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
黒い下三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='v', c='k')
配列をn個にビニングし、namesのラベルをつける	pd.cut(aArray, n, labels=names)
配列と配列について淡い色の折れ線を描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
データフレームのカラムの中に文字列が存在するか	df[col].isin([value])
オブジェクトが文字列クラスのインスタンスか調べる	isinstance(obj, str)
nが正の数か	n > 0
線グラフの色を黄緑に指定する	plt.plot(データ列, データ列2, color='chartreuse')
ファイルパスをSJISを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
空白が文字列内にあるか	any(c.isspace() for c in s)
タイムスタンプデータと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
折れ線グラフの菱形マーカーを黄色くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
数値を太字にする	f'\033[1m{value}\033[0m'
折れ線グラフを描画して、色を真紅に設定する	plt.plot(データ列, データ列2, color='crimson')
モカシンにヒストグラムの色を設定する	plt.hist(データ列, color='moccasin')
リストと配列についての散布図を重なりを見やすく淡い色で描く	plt.plot(xdata, ydata, c='muted', alpha=0.5)
列概要	df.info()
配列と数列についての散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
散布図を黒色のダイアモンドマーカーを用いて描画する	plt.plot(xdata, ydata, marker='D', c='k')
カンマで区切って二つの実行結果を出力する	print(value, value2, sep=',')
データフレームを各列毎にグループ化して、文字列というグループの大きさを求める	df.groupby(column).size()[s]
データフレームの列名一覧で指定されたカラムを削除する	df.drop(columns, axis=1)
データフレームを列の値によって集約する	df.groupby(column)
＜オプション＞貝殻色を使用する	color = 'seashell'
ファイルパスを書き込みモードでオープンする]	open(filepath, mode='w')
Pandasで、データフレームのcollの数値時刻から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
ヒストグラムを描画して、色をライトシアンに指定する	plt.hist(データ列, color='lightcyan')
データ列の中のNaNの合計を数える	ds.isna().sum()
折れ線グラフのクロスマーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
JSONファイルのファイルを読み込んで、dataとする	data = json.load(fin)
表全体を行を用いて降順で整列する	df.sort_index(ascending=False)
大きい順に'A'列を用いて破壊的にデータフレームをソートする	df.sort_values(by='A', ascending=False, inplace=True)
データフレームのカテゴリデータをベクトルにする	pd.get_dummies(df)
線グラフを描画して、その色をシエナに指定する	plt.plot(データ列, データ列2, color='sienna')
マッピングの全を消去する	aDict.clear()
既存のファイルをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
線グラフを描画して、色をサーモンにする	plt.plot(データ列, データ列2, color='salmon')
折れ線グラフに三角マーカーを用いる	plt.plot(データ列, データ列2, marker='^')
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
カラーコードの右三角マーカーをリストとイテラブルについての散布図に描く	plt.plot(xdata, ydata, marker='>', c=rgb)
辞書の値に要素は含まれていないか調べる	element not in aDict.values()
ヒストグラムを描画して、その色をコーンフラワーブルーに指定する	plt.hist(データ列, color='cornflowerblue')
リストとリストでパステル調のグラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
文字列の中のケースを無視して正規表現による全マッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
ファイルパスをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
赤色の右三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='>', c='r')
グラフにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
データフレームを列ごとにグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
集合を組に変換する	tuple(aSet)
＜オプション＞リネンにグラフの色を設定する	color = 'linen'
暗い色で散布図を描画する	plt.plot(xdata, ydata, c='dark')
線グラフを描画して、その色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
線グラフの色をブルーバイオレットに変更する	plt.plot(データ列, データ列2, color='blueviolet')
折れ線グラフを描画して、その色をリネンに変更する	plt.plot(データ列, データ列2, color='linen')
＜オプション＞ダークシアグリーンにグラフの色を設定する	color = 'darkseagreen'
印字できる文字を全て使う	string.printable
＜オプション＞ライトスチールブルーに色を設定する	color = 'lightsteelblue'
横棒グラフの色を変更する	plt.barh(ラベル列, データ列, color=rgb)
散布図をカラーコードの四角マーカーで描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
部分文字列が文字列の開始位置からと終了位置までの間に存在しないか判定する	s.find(sub, start, end) == -1
Pandasで、UNIX時間のデータ列からdatetime64型にする	pd.to_datetime(ds, unit='s', utc=True)
文字列をユニコード列に変換する	[ord(ch) for ch in s]
散布図にクロスマーカーを使う	plt.plot(xdata, ydata, marker='x')
△マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='^')
データ列とリストの折れ線グラフを描いて、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
日付時刻データが日付時刻データより早いか	aDatetime < aDatetime2
配列をベースにして全要素が初期値の配列	np.full_like(aArray, 初期値)
複数の列によってデータフレームを昇順にソートする	df.sort_values(by=column, ascending=True)
配列とリストの散布図に星マーカーをプロットする	plt.plot(xdata, ydata, marker='*')
＜オプション＞色をミディアムパープルに設定する	color = 'mediumpurple'
ベクトルの要素ごとの最大公約数を求める	np.gcd(aArray, aArray2)
数列と数列について青色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
タプルを並べ直してJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
ヒストグラムを描画して色をライトイエローに変更する	plt.hist(データ列, color='lightyellow')
データフレームを列によって集約してそれぞれのグループ毎の最大値を求める	df.groupby(column).max()
折れ線グラフの色をブラックにする	plt.plot(データ列, データ列2, color='black')
ヒストグラムを描画して、色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
プロットのパレットを色差別なくする	sns.set(pallete='colorblind')
データフレームを'A'列でで破壊的にソートする	df.sort_values(by='A', inplace=True)
折れ線グラフを描画してその色をホワイトに設定する	plt.plot(データ列, データ列2, color='white')
データフレームの中で、列に重複があるか確認する	df.duplicated(subset=column)
青い暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='b')
デピンクにヒストグラムの色をセットする	plt.hist(データ列, color='deeppink')
明るい色の折れ線グラフを描画してその線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='bright')
nが偶数かどうか調べる	n % 2 == 0
＜オプション＞色をロイヤルブルーに変更する	color = 'royalblue'
整数nを8進数文字列に変換する	oct(n)[2:]
新しい文字列を使って文字列を置き換える	s.replace(sub, newsub)
データフレームの中に日付データとがあるか調べる	df.isin([value, value2])
折れ線グラフの色をカラーコードにセットする	plt.plot(xdata, ydata, color=rgb)
データ列と配列についての散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
オブジェクトの属性の値を値に設定する	setattr(obj, プロパティ名, 値)
リストとイテラブルの黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
等差数列から整数乱数を発生させる	random.randrange(start, end, step)
折り返しをオフに変更する	pd.set_option('expand_frame_repr', False)
＜オプション＞デピンクにグラフの色を設定する	color = 'deeppink'
リストと配列について淡いを描画して、色を青くする	plt.plot(xdata, ydata, linestyle='muted', color='b')
データフレームの未入力値を最大値で補う	df.fillna(df.max())
＜オプション＞色をライトサーモンに設定する	color = 'lightsalmon'
線グラフの色をゲインズボロに指定する	plt.plot(データ列, データ列2, color='gainsboro')
マッピングをチェーンマップに変換する	collections.ChainMap(aDict)
集合を変更不能なセットに変換する	frozenset(aSet)
赤い暗いの折れ線を描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
リストのn番目からn2番目までを取り出す	aList[n:n2]
ヒストグラムを描画して、色を淡い茶色に指定する	plt.hist(データ列, color='tan')
リストとデータ列の散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
折れ線グラフを描画して、その色をサドルブラウンに指定する	plt.plot(データ列, データ列2, color='saddlebrown')
異なるカラムをキーとして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
ヒストグラムを描画して、その色をシエナに変更する	plt.hist(データ列, color='sienna')
線グラフを描画して、色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
数列とリストの散布図を描いてマーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
文字列を下線付きで出力する	print(f'\033[4m{value}\033[0m')
整数nの十六進表現を使う	hex(n)
線グラフの色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
グラフ中の(x,y)の場所にデータラベルを描画する	plt.legend(loc=(x, y))
重複をデータフレームから破壊的に削除する	df.drop_duplicates(inplace=True)
データフレームのカラムのNaNを直後の値で埋める	df[col].fillna(method='bfill')
集合にイテラブルを追加する	aSet.update(iterable)
データフレームから列を１つ選択する	df[[column]]
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
＜オプション＞色をサンディーブラウンに設定する	color = 'sandybrown'
線グラフを描画して、その色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
＜オプション＞ライトスカイブルーを使用する	color = 'lightskyblue'
ヒストグラムを描画して、色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
'A'列によって表データをグループ化する	df.groupby('A')
要素は集合のメンバーでないかどうか調べる	element not in aSet
横方向に二つの表データを合体させる	pd.concat([df, df2], axis=1)
線グラフを描画して、その色をミントクリームに変更する	plt.plot(データ列, データ列2, color='mintcream')
日付データが日付データよりあと	aDate > aDate2
カラムの中に文字列が存在するか調べる	ds.isin([value])
ゼロ埋めされた行列	np.zeros(要素数)
整数nをバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big')
スピアマンでデータフレームのリストカラムの相関行列	df[aList].corr(method='spearman')
データ列を丸めて整数型にする	ds.round().astype(int)
'A'列の値によって表をグループ化して列挙する	[(name, group) for name, group in df.groupby('A')]
イテラブルとリストについてパステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
オールドレースにヒストグラムの色を指定する	plt.hist(データ列, color='oldlace')
データフレームのカラムは正規分布からどの程度、尖っているか調べる	df[col].skew()
文字列の両端から不要な空白を取り除く	s.strip()
小数点数のアークタンジェントを求める	math.atan(x)
データフレームのデータ型の一覧を求める	df.dtypes
列と列の重複を消す	df.drop_duplicates(subset=[column, column2])
データ列とリストの散布図を描いて、マーカーをクロスに設定する	plt.plot(xdata, ydata, marker='x')
濃い色の折れ線を描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
データフレームの列がxより多くx2より小さいデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
線グラフの色をライトグレーにする	plt.plot(データ列, データ列2, color='lightgray')
文字列の最初から空白を除く	s.lstrip()
文字列を積極的に小文字にする	s.casefold()
イテラブルと配列の散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
８進数字を全て使う	string.octdigits
データフレームがどれだけ分散しているか見る	df.var()
ヒストグラムを描画して、その色をスカイブルーに変更する	plt.hist(データ列, color='skyblue')
文字列を走査し正規表現にマッチするか確認する	re.search(pattern, s)
色差別ない色で数列とデータ列についての散布図をプロットする	plt.plot(xdata, ydata, c='colorblind')
データフレームの最後を見る	df.tail()
折れ線グラフを描画して、その色をロイヤルブルーに指定する	plt.plot(データ列, データ列2, color='royalblue')
xを文字列に変換してファイルに書き込む	f.write(str(x))
デフォルトのエンコーディング	sys.getdefaultencoding()
Pandasで、フォーマットを使ってデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
n個に等量でデータ列をビン分割する	pd.qcut(ds, n)
ヒストグラムを描画して、その色をダークマゼンタにセットする	plt.hist(データ列, color='darkmagenta')
色差別ない色で散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
折れ線グラフを描画して、色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
折れ線グラフの△マーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
折れ線グラフを描画して色をライトゴールドロディイエローに変更する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
キューをタプルにする	tuple(deq)
配列と配列の青いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='b')
ヒストグラムを描画してその色をローングリーンに変更する	plt.hist(データ列, color='lawngreen')
明るい色で重なりを見やすく散布図を描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
データ列とイテラブルとして折れ線グラフを描画し、、線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n)
数列と配列の濃いグラフをプロットして、色を黒くする	plt.plot(xdata, ydata, linestyle='deep', color='k')
パステル調の色でデータ列についての柱状図を描画する	plt.hist(xdata, color='pastel')
折れ線グラフを描画して、その色をペールグリーンに変更する	plt.plot(データ列, データ列2, color='palegreen')
リストとリストの破線グラフを描画し、その色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
イテラブルとリストの散布図を描いて、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
折れ線グラフの色をパールバイオレットレッドに変更する	plt.plot(データ列, データ列2, color='palevioletred')
赤色の左三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='<', c='r')
後の値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(method='bfill')
ヒストグラムを描画して、その色をレモンシフォンに指定する	plt.hist(データ列, color='lemonchiffon')
リストと数列のカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
＜オプション＞グラフの色をシーグリーンに指定する	color = 'seagreen'
最頻値でデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
n個の整数リスト	list(range(n))
数値時刻のデータフレームのcollからタイムスタンプに変換する	pd.to_datetime(df[col], unit='s', utc=True)
オブジェクトがいつまでも続くイテラブル	itertools.repeat(element)
ヒストグラムを描画して、その色をライトゴールドロディイエローにセットする	plt.hist(データ列, color='lightgoldenrodyellow')
リストとイテラブルの散布図を描き、、マーカーを四角にセットする	plt.plot(xdata, ydata, marker='s')
＜オプション＞ライトブルーを用いる	color = 'lightblue'
数列とリストの散布図をプロットしてマーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
乱数を正規分布を使って生成する	random.normalvariate(mu=0.5, sigma=0.2)
＜オプション＞サーモンにグラフの色を設定する	color = 'salmon'
＜オプション＞ダークレッドを使う	color = 'darkred'
実数の指数を算出する	math.frexp(x)[1]
データフレームを表示するとき、表示可能な列数を増やす	pd.set_option('display.max_columns', n)
データフレームを列で並べる	df.sort_values(by=column)
データフレームとデータフレームの列を横向きに連結する	pd.concat([df, ds], axis=1)
散布図をパステル調の色のマーカーで重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
列をキーにして２つのデータフレームを全結合する	pd.merge(df, df2, on=column, how='outer')
列でデータフレームを集約して、各グループの件数を知る	df.groupby(column).size()
＜オプション＞ダークターコイズにグラフの色を変更する	color = 'darkturquoise'
リストとリストを用いて濃いグラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
ファイルをバイナリ用にオープンして]、fとする	f = open(filepath, mode='rb')
＜オプション＞ダークグレー色を用いる	color = 'darkgray'
カウンタを列で更新する	aCounter.update(iterable)
行列式	np.linalg.det(aArray)
イテラブルとリストの黒い色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
データフレームを列によって降順に破壊的に整列する	df.sort_values(by=column, ascending=False, inplace=True)
データ列の75パーセンタイル	ds.quantile(0.75)
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を算出する	df.groupby([column, column2], as_index=False).min()
折れ線グラフを描画して、その色をスラグレーに指定する	plt.plot(データ列, データ列2, color='slategray')
文字列がn回続くイテラブル	itertools.repeat(element, n)
＜オプション＞ミディアムシアグリーン色を使用する	color = 'mediumseagreen'
コレクションを用いる	import collections
文字列中に部分文字列がない	sub not in s
重なりを見やすく散布図を暗い色のマーカーで描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
＜オプション＞改行コードを旧Macに変更する	newline = '\r'
リストを縦軸、配列を横軸と指定して、折れ線を描画する	plt.plot(xdata, ydata)
データフレーム全体をインデックスを用いて昇順に並べる	df.sort_index(ascending=True)
文字列を空白で区切って列挙する	s.split()
データ列の各データは何回出現するか見る	ds.value_counts()
グラフのパレットを色差別なくする	sns.set(pallete='colorblind')
＜オプション＞ベージュを用いる	color = 'beige'
パラメータが0に近づくときの数値の極限値を求める	sympy.limit(e, z, 0)
タイムスタンプデータが日付時刻データと同時か調べる	aDatetime == aDatetime2
データフレームの列の欠損値を後の行の値に設定する	df[col].fillna(method='bfill')
二つのカウンタの共通するデータ	aCounter & aCounter2
データフレームを列によってグループ化し、、平均値を求める	df.groupby(column).mean()
リストとリストについての散布図に黒色の左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='k')
要素を両端キューの最初に付け加える	deq.appendleft(element)
黒いクロスマーカーをデータ列と数列についての散布図に描画する	plt.plot(xdata, ydata, marker='x', c='k')
＜オプション＞タン色を用いる	color = 'tan'
リストとリストについて散布図を描き、、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
データラベルを文字列と文字列とプロットに加える	plt.legend([s, s2])
データフレームの列の中にいくつ欠損値が含まれるか数える	df[col].isna().sum()
変数を黒色にする	f'\033[30m{value}\033[0m'
データフレームを'A'列と'B'列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
折れ線グラフを描画してその色をインディアンレッドに指定する	plt.plot(データ列, データ列2, color='indianred')
黒い下三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='v', c='k')
標準出力の出力先がターミナルか確認する	sys.stdout.isatty()
線グラフを描画して、その色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
辞書に要素を項目名として加える	aDict[key] = element
折れ線グラフの色をライトイエローに指定する	plt.plot(データ列, データ列2, color='lightyellow')
カラムの中にいくつ欠損値が存在するかカウントする	ds.isna().sum()
OSがマック	sys.platform.startswith('darwin')
＜オプション＞ビスクにグラフの色を変更する	color = 'bisque'
ヒストグラムを描画して、その色を紺碧に指定する	plt.hist(データ列, color='azure')
整数nが組のどれかか調べる	n in aTuple
文字列を最後の部分文字列で分割した場合の後半の文字列	s.rpartition(sub)[-1]
データフレームの内で、列の重複を見る	df.duplicated(subset=column)
グラフを論文用に指定する	sns.set(context='paper')
線グラフを描画して、その色をビスクに指定する	plt.plot(データ列, データ列2, color='bisque')
＜オプション＞エラーがあるとき例外を発生させるように設定する	errors = 'strict'
データフレームの欠損値を平均に増やす	df.fillna(df.mean())
リストとリストで色差別ないグラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
＜オプション＞色をダークシアンに指定する	color = 'darkcyan'
データフレームを1000の位で四捨五入して整数にする	df.round(-3).astype(int)
＜オプション＞色をブラウンに設定する	color = 'brown'
ファイルパスからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
実行を正常終了する	sys.exit(0)
オブジェクトがリストに含まれないかどうか調べる	element not in aList
＜オプション＞三角印を用いる	marker = '^'
ヒストグラムの色をサドルブラウンに変更する	plt.hist(データ列, color='saddlebrown')
ヒストグラムをプロットし、、アルファをxに設定する	plt.hist(データ列, alpha=x)
データフレームから型の列を取り出す	df.select_dtypes(ty)
Pandasで、文字列のUNIX秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
ライトブルーにヒストグラムの色をセットする	plt.hist(データ列, color='lightblue')
折れ線グラフを描画して、その色をダークシアンに変更する	plt.plot(データ列, データ列2, color='darkcyan')
プロットの色を全般的に淡くする	sns.set(pallete='muted')
文字列はリストの要素でないかどうか調べる	element not in aList
文字列が全てアルファベットか	s.isalpha()
リストとリストについての散布図に赤い▼マーカーをプロットする	plt.plot(xdata, ydata, marker='v', c='r')
リストとリストについての散布図に四角マーカーを描く	plt.plot(xdata, ydata, marker='s')
行列の形	aArray.shape
オブジェクトは論理値クラスのインスタンス	isinstance(obj, bool)
データ列とリストで淡いをプロットしてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
列のイミュータブルな集合	frozenset(iterable)
行列の分散	np.var(aArray)
リストとリストの散布図を描画し、、その大きさをnに指定する	plt.scatter(xdata, ydata, s=n)
暗い色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
線グラフを描画して、その色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
組を小さい順にソートする	sorted(aTuple, reverse=True)
Pandasで、データフレームのcollをフォーマットで日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
日付時刻データが木曜日かテストする	aDatetime.weekday() == 3
代数計算ライブラリを使う	import sympy
データフレームの中の欠損値が存在する行を削除する	df.dropna()
折れ線グラフに大バツ印を加える	plt.plot(データ列, データ列2, marker='X')
グラフの中の縦軸のラベルをuntitledに指定する	plt.ylabel(untitled)
リストと配列の淡いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
日付データからn週間分、引く	aDate - datetime.timedelta(weeks=n)
８ビット整数型の全要素を０で初期化された行列	np.zeros(行数, 列数, dtype=np.int8)
データフレームのリストカラムの50パーセンタイル	df[aList].median()
パラメータについて数式を積分する	sympy.integrate(e, z)
文字列の先頭でパターンにマッチするか調べる	re.match(pattern, s)
データフレームを各列毎に集約して列の分散を求める	df.groupby(column)[column2].var()
折れ線グラフを描画してその色をバリーウッドに指定する	plt.plot(データ列, データ列2, color='burlywood')
＜オプション＞色を淡いピンク色に設定する	color = 'lightpink'
ヒストグラムを描画して色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
＜オプション＞色をダークグリーンにセットする	color = 'darkgreen'
Pandasで、データ列をdatetime64型に変換する	pd.to_datetime(ds)
データフレームをTSV形式としてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
データフレームのそれぞれのグループ毎の平均値を求める	df.groupby(column).mean()
積み上げ横棒グラフを描画する	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
実数の複素数を計算する	complex(x)
列を百の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
自然数個のものからk個取り出した時の並べ方の総数	math.perm(n, k)
データフレームのリストカラムの未入力値を最小値に変更する	df[aList].fillna(df[aList].min())
＜オプション＞グラフの色を小麦色に変更する	color = 'wheat'
両端キューの値を左にn個分回転させる	deq.rotate(-n)
両端キューの末尾を使う	deq[-1]
タイムスタンプデータの曜日を求める	aDatetime.weekday()
ヒストグラムを描画して、色をサドルブラウンにセットする	plt.hist(データ列, color='saddlebrown')
オブジェクトが名前付きタプルかどうか確認する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
タプルをひとつ飛ばしで得る	aTuple[::2]
線グラフを描画してその色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
変数について数式のインテグラルを求める	sympy.integrate(e, z)
文字列の接尾辞から部分文字列を除く	s.removesuffix(sub)
＜オプション＞ピーチパフ色を使用する	color = 'peachpuff'
データフレームを列でグループ化し、、列の要約統計量を求める	df.groupby(column).describe()[column2]
＜オプション＞グラフの色をモカシンにする	color = 'moccasin'
折れ線グラフを描画して、色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
ファイルからファイル名を求める	os.path.basename(filepath)
整数nが配列のひとつであるか調べる	n in aArray
グラフを描く	from sympy import N
二つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
スピアマンでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
列名を指定された列名一覧に置き換える	df.columns = columns
データフレームを各列と列の組み合わせ毎にグループ化して、合計を算出する	df.groupby([column, column2], as_index=False).sum()
データフレームの指定された二つの列を抽出する	df[[column, column2]]
文字列全体がパターンに大文字・小文字を無視してマッチするか調べる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
折れ線グラフを描画してその色をオリベドラブに指定する	plt.plot(データ列, データ列2, color='olivedrab')
部分文字列を文字列の後ろから探す	s.rfind(sub)
２つのデータフレームを縦方向に連結する	pd.concat([df, df2])
整数のn乗して実数による余り	pow(x, n, y)
タイムスタンプデータをISO書式の文字列に変換する	aDatetime.isoformat()
マップの値の一覧	aDict.values()
配列とリストで暗いグラフを描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
文字列が部分文字列で終わるかどうか調べる	s.endswith(sub)
リストをシアン化する	f'\033[36m{value}\033[0m'
データ列を箱髭図で可視化する	plt.boxplot(データ列)
ピアソン積率相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
リストを配列にする	np.array(aList)
二変数の最も大きい値を求める	max(x, y)
折れ線のラベルをuntitledに設定する	plt.plot(xdata, ydata, label=untitled)
ファイルパスを追加モードで開く]	open(filepath, mode='a')
データ列を折れ線グラフに描画して、マーカーを上三角にする	plt.plot(データ列, データ列2, marker='^')
データフレームの最頻値を計算する	df.mode()
＜オプション＞ピンクにグラフの色を設定する	color = 'pink'
シーグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='seagreen')
データフレームを各列と列の組み合わせ毎にグループ化して、個数を計算する	df.groupby([column, column2], as_index=False).count()
データフレームのn行目を削除して、入れ替える	df.drop(n, axis=0, inplace=True)
グラフのフォントを日本語に設定する	sns.set(font='IPAexGothic')
柱状グラフをプロットして、ビンをnに設定する	plt.hist(データ列, bins=n)
集合から全ての要素を除去する	aSet.clear()
辞書の項目名とその値をペアとして取り出す	aDict.items()
＜オプション＞ナバホホワイトにグラフの色を変更する	color = 'navajowhite'
配列の行ごとの合計値を計算する	np.sum(aArray, axis=1)
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
ベクトルの次元数	aArray.ndim
値を両端キューのn番目に挿入する	deq.insert(n, element)
データフレームを列によってグループ化して、それぞれのグループ毎の合計を求める	df.groupby(column).sum()
線グラフを描画してその色をグレーに変更する	plt.plot(データ列, データ列2, color='gray')
ファイルを全て読み込む	f.read()
実行環境のエンディアン	sys.byteorder
複素数	complex(x, y)
配列と数列の散布図をプロットして、四角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='s', c=rgb)
xが1もしくは2、もしくは3に等しい	x == 1 or x == 2 or x == 3
データフレームの指定された列を配列にする	df[column].values
タイムスタンプデータの年	aDatetime.year
データフレームのリスト列のNaNを中央値に設定する	df[aList].fillna(df[aList].median())
＜オプション＞色をトマトに指定する	color = 'tomato'
値を緑色で表示できる文字列に変換する	f'\033[32m{value}\033[0m'
＜オプション＞カデットブルーに色を指定する	color = 'cadetblue'
データフレームのリスト列の値が未入力値	df[aList].isna()
２つの文字列は同じでないか調べる	s != s2
文字列が平仮名	('ぁ' <= ch <= 'ん')
シーケンスからn要素サンプリングする	random.sample(iterable, k=n)
折れ線グラフを描画して、その色をシャルトリューズに変更する	plt.plot(データ列, データ列2, color='chartreuse')
折れ線グラフのポイントマーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='.', markersize=n)
文字列はキーワードかどうか	keyword.iskeyword(s)
黄色で文字列を表示する	print(f'\033[33m{value}\033[0m')
バイナリできるようにファイルを開く]	open(filepath, mode='rb')
文字列がタプルに含まれない	element not in aTuple
＜オプション＞色をシアンに変更する	color = 'cyan'
データフレームの列の文字列が文字列で始まらないデータを選択する	df[not df[column].str.startswith(s)]
リストをマゼンタで表示できる文字列にする	f'\033[35m{value}\033[0m'
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列, データ列2, color='slategray')
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
線グラフを描画してその色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
データフレームの列を1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
改行なしに2つの文字列をプリントする	print(value, value2, end='')
リストと配列のパステル調のグラフを描いて、色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフを描画して色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
暗い色で配列についての柱状グラフを描画する	plt.hist(xdata, color='dark')
リストをn回連結する	aList * n
３整数の最小公倍数を計算する	math.lcm(n, n2, n3)
列によってデータフレームを集約して、分散を求める	df.groupby(column).var()
＜オプション＞グラフの色を青緑に変更する	color = 'teal'
双方向キューが空でない	len(deq) != 0
要素ひとつの組	(element,)
今日の年	datetime.datetime.today().year
データフレームのカラムの未入力値を平均値で補う	df[col].fillna(df[col].mean())
二つの列を用いてデータフレームを並べる	df.sort_values(by=['A', 'B'])
データフレームの列を10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
日付データにn時間を加算する	aDate + datetime.timedelta(hours=n)
グラフで使用するパレットをpalleteNameで指定する	sns.set(pallete=palleteName)
表データを二つの列の値によってグループ化し要約統計量を計算する	df.groupby(['A', 'B']).describe()
＜オプション＞色をネイビーに変更する	color = 'navy'
ファイルを改行なしで一行ずつ読む	f.readline()
データ列の中に文字列とが存在するか調べる	ds.isin([value, value2])
大文字を全部使う	string.ascii_uppercase
折れ線グラフに星マーカーを用いる	plt.plot(データ列, データ列2, marker='*')
リストが空	len(aList) == 0
ファイルパスをBOM付きとしてオープンする]	open(filepath, encoding='utf_8_sig')
カウンタのそれぞれの項目をカウントだけリストとして得る	aCounter.elements()
データフレームを列によって並べ直してインデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
日付時刻データがタイムスタンプデータより後ろか調べる	aDatetime > aDatetime2
タプルの先頭を使う	aTuple[0]
折れ線グラフを描画して、色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
リストとイテラブルの色差別ないグラフを描いて、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
パレットトルコイズにヒストグラムの色を設定する	plt.hist(データ列, color='paleturquoise')
線グラフを描画してその色を赤に設定する	plt.plot(データ列, データ列2, color='red')
二次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
折れ線グラフを描画してその色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
リストを分割数nを用いて分割する	pd.cut(aList, n)
nからn2を引いてnにする	n -= n2
折れ線グラフを描画して、その色をライトスレイグレーに変更する	plt.plot(データ列, データ列2, color='lightslategray')
項目名が辞書上で未定義かどうか調べる	key not in aDict
折れ線グラフを描画して、色をアリスブルーにする	plt.plot(データ列, データ列2, color='aliceblue')
折れ線グラフを描画してその色をダークオリーブグリーンに指定する	plt.plot(データ列, データ列2, color='darkolivegreen')
ヒストグラムの色をミスティローズにセットする	plt.hist(データ列, color='mistyrose')
ヒストグラムを描画してその色をパレットトルコイズにセットする	plt.hist(データ列, color='paleturquoise')
データフレームの列名をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
ビン数nで配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
UNIX時間の文字列からタイムスタンプに変換する	pd.to_datetime(s, unit='s', utc=True)
イテラブルとリストで暗いグラフを描いて、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
ヒストグラムを描画してその色を深紅に設定する	plt.hist(データ列, color='crimson')
文字列が全て数字か	s.isdigit()
線グラフを描画して、その色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
データフレームのカラムの名前一覧を求める	df.columns
線グラフを描画してその色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
データフレームを関数の値によってグループ分けして列挙する	[(name, group) for name, group in df.groupby(関数)]
データ列の未入力値を前の行の値に設定する	ds.fillna(method='ffill')
配列とリストでパステル調のグラフをプロットし、その線幅をnにセットする	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
パープルにヒストグラムの色を設定する	plt.hist(データ列, color='purple')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか確認する	s.find(sub, start, end) == -1
ヒストグラムを描画して、色をインディゴに指定する	plt.hist(データ列, color='indigo')
nを八進表現に変換する	oct(n)
にy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
データフレームの列の25パーセンタイルを求める	df[col].quantile(0.25)
カウンタの文字列のカウント	aCounter[element]
データフレームのカラムのNaNを最小値に減らす	df[col].fillna(df[col].min())
＜オプション＞読み込むシート名をnamesに設定する	sheet_name = names
＜オプション＞ゴールドに色を設定する	color = 'gold'
散布図をカラーコードの▽マーカーを用いて描く	plt.plot(xdata, ydata, marker='v', c=rgb)
データフレームのリストカラムの最頻値を求める	df[aList].mode()
＜オプション＞色をライトグリーンに設定する	color = 'lightseagreen'
赤い下三角マーカーを使って散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
イテラブルと数列の折れ線グラフを描画して、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
折れ線グラフを描画して、その色を紺にセットする	plt.plot(データ列, データ列2, color='darkblue')
上位集合もしくは等しいかどうか調べる	aSet > aSet2
現在の再帰の上限	sys.getrecursionlimit()
数列とリストについて散布図を描画してマーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
ヒストグラムを描画して、色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
データ列とリストについての散布図にカラーコードの上三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
列を1000の位で四捨五入して、整数にする	ds.round(-3).astype(int)
グラフの描画で暗い色を使う	sns.set(pallete='dark')
＜オプション＞ディープスカイブルーにグラフの色をする	color = 'deepskyblue'
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
データフレームのリスト列のNaNを最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
マッピングを浅くコピーする	dict(aDict)
書式fmtを使って文字列を日付データにする	pd.to_datetime(s, format=fmt)
イテラブルを文字列に変換して、タブによって連結する	'\t'.join(map(str, iterable))
濃いの色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
データフレームの欠損値をxに変更する	df.fillna(x)
文字列リストを連結し、一つの文字列にする	''.join(map(str, iterable))
折れ線グラフを描画して、その色をダークゴールデンロッドにする	plt.plot(データ列, データ列2, color='darkgoldenrod')
リストの各要素を関数に適用した結果で並べる	sorted(aList, key=func)
リストとリストの破線グラフを描画して、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
データフレームをエクセルデータ形式でJSONLファイルに保存する	df.to_excel(filename)
＜オプション＞スカイブルー色を使用する	color = 'skyblue'
折れ線グラフに下三角マーカーを用いる	plt.plot(データ列, データ列2, marker='v')
リストとリストについて明るいグラフを描画してその色を黒色に変更する	plt.plot(xdata, ydata, linestyle='bright', color='k')
ヒストグラムの色をマゼンタに指定する	plt.hist(データ列, color='magenta')
折れ線グラフを描画して色をライトスレイグレーにセットする	plt.plot(データ列, データ列2, color='lightslategrey')
＜オプション＞グラフの線種を一点鎖線に変更する	linestyle = 'dashbot'
データフレームのNaNを最小値で埋める	df.fillna(df.min())
折れ線グラフを描画して、その色をパパイヤウィップに変更する	plt.plot(データ列, データ列2, color='papayawhip')
辞書を浅くコピーする	aDict.copy()
シーケンスを累加したイテラブル	itertools.accumulate(iterable)
散布図を下三角マーカーとして描画する	plt.plot(xdata, ydata, marker='v')
文字列は文字列より辞書順で前か	s < s2
リストとリストの散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
データフレームの中の列をn個に分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
イテラブルと数列の折れ線グラフをカラーコードでプロットする	plt.plot(xdata, ydata, color=rgb)
双方向キューの最初から要素を取り出す	deq.popleft()
縦棒を描画し、、中央寄せする	plt.bar(ラベル列, データ列, align='center')
実数の逆余弦を求める	math.acos(x)
項目名がマップに存在するかどうか	key not in aDict
カウンタの値を増やす	aCounter[element] += 1
ケンドール順位相関係数でデータフレームの相関行列	df.corr(method='kendall')
nはセットの一つであるか調べる	n in aSet
文字列中にひとつでも非小文字がある	any(not c.islower() for c in s)
データフレームのn行目を選択する	df.loc[n]
リストと配列についての散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
空白によって文字列を分割して数列に変換する	map(int, s.split())
行列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
色差別ないの折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
三つの実行結果を順にプリントする	print(value, value2, value3)
追加できるように既存のファイルパスを文字コードtextとして開く]	open(filepath, mode='a', encoding=text)
ファイルから読み込みストリームを見る	open(filepath)
＜オプション＞グラフの色をシエナに変更する	color = 'sienna'
ヒストグラムを描画して、色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
カラムのモード	ds.mode()
イテラブルと列を連結する	itertools.chain(iterable, iterable2)
10を底とする浮動小数点数の対数	math.log10(x)
データフレームのカラムの秒を求める	df[col].dt.second
formatのパターンとして文字列からタイムスタンプにする	datetime.datetime.strptime(日付の書かれた文字列, format)
ハローワールドと表示する	print('Hello World')
データフレームを列でソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
リストとリストの青色の色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
データフレームをグループ化し、それぞれの列に対し個数を算出する	df.groupby(column)[column2].count()
数値をアンダーライン付きにする	f'\033[4m{value}\033[0m'
データフレームを表示するとき、表示可能な行数を変更する	pd.set_option('display.max_rows', n)
折れ線グラフを描画して、その色をレベッカパープルに変更する	plt.plot(データ列, データ列2, color='rebeccapurple')
ヒストグラムを描画して、その色をブランチドアーモンドに変更する	plt.hist(データ列, color='blanchedalmond')
オブジェクトは辞書クラスか確認する	isinstance(obj, dict)
現在が水曜日	datetime.datetime.today().weekday() == 2
文字列を太文字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
２つのオブジェクトが等しいか調べる	obj == obj2
データフレームを各列と列の組み合わせ毎に集約し、、平均値を求める	df.groupby([column, column2], as_index=False).mean()
折れ線グラフを描画してその色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
リストのすべての値を取り除く	aList.clear()
空白で文字列を右から区切る	s.rsplit()
列の中にいくつ文字列があるかカウントする	ds.isin([value]).sum()
データフレームを'A'列で小さい順に並べ直す	df.sort_values(by='A', ascending=True)
データフレームのリストカラムの中にある日付データの合計を数える	df[aList].isin([value]).sum()
nがn2以下または、n3以上か	n <= n2 or n >= n3
データフレームを各列毎に集約して、文字列というグループを求める	df.groupby(column).get_group(s)
マッピングをJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
文字列が文字列リストに含まれる	s in aStringList
ファイルをオープンして]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
データ列の記述統計量	ds.describe()
青色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
nが奇数か	n % 2 == 1
線幅nのダイアモンド印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
データフレームの列の中に日付データと文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
淡いグラフの色を青色に指定する	plt.plot(xdata, ydata, linestyle='muted', color='b')
リストを白色化する	f'\033[37m{value}\033[0m'
ヒストグラムを描画して、その色をティールに指定する	plt.hist(データ列, color='teal')
データフレームから重複した行を取り除いて更新する	df.drop_duplicates(inplace=True)
異なる列をキーとして2つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ダイアモンドマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='D')
改行で文字列を分割し、文字列リストに変換する	s.splitlines()
暗いの折れ線の色を赤くする	plt.plot(xdata, ydata, linestyle='dark', color='r')
プロットの色テーマを淡くする	sns.set(pallete='muted')
浮動小数点数を複素数に変換する	complex(x)
JSON形式の文字列をデータにする	json.loads(jsonString)
折れ線グラフを描画して、色を青に設定する	plt.plot(データ列, データ列2, color='blue')
ふたつの集合は互いに素かどうか	aSet.isdisjoint(aSet2)
列を100の位で四捨五入する	ds.round(-2)
線グラフを描画して、色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
nが一桁の数	-9 <= n <= 9
データフレームの中にいくつ文字列が含まれるか数える	df.isin([value]).sum()
nが3の倍数	n % 3 == 0
データフレームを'A'列によって小さい順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
グラフのデータラベルの場所を(x,y)に設定する	plt.legend(loc=(x, y))
文字列は全て印字できるかどうか調べる	s.isprintable()
イテラブルとリストについて破線を描画して、その色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
＜オプション＞グラフの色をグリーンイエローにセットする	color = 'greenyellow'
黒い菱形マーカーをリストとデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='D', c='k')
ファイルパスのディレクトリ名	os.path.dirname(filepath)
ベクトルのユニークな値を要素とする配列	np.unique(aArray)
エクセルデータファイルからnというシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
双方向キューのstart番目からend番目までの値	collections.deque(itertools.islice(deq, start, end))
最頻値でカラムのNaNを置換する	ds.fillna(ds.mode().iloc[0])
折れ線グラフの三角マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
リストを縦軸数列を横軸として大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
文字列を太字で表示する	print(f'\033[1m{value}\033[0m')
折れ線グラフを点線にセットする	plt.plot(データ列, データ列2, linestyle='dotted')
ひとつでも小文字が文字列内に含まれるか調べる	any(c.islower() for c in s)
＜オプション＞グラフの色をダークグレーにセットする	color = 'darkgray'
折れ線グラフを描画して、色を黄色にセットする	plt.plot(データ列, データ列2, color='yellow')
データフレームから重複したデータを削除する	df.drop_duplicates()
赤い丸マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='o', c='r')
データ列の未入力値を平均で埋める	ds.fillna(ds.mean())
データ列が何日か調べる	ds.dt.day
2変数の最小の値	min(x, y)
黒い明るいを描く	plt.plot(xdata, ydata, linestyle='bright', color='k')
重複ありでランダムにn行をデータフレームからサンプリングする	df.sample(n, replace=True)
データフレームのカラムの中に文字列と日付データが存在するか調べる	df[col].isin([value, value2])
マップに項目名ワード引数として追加する	aDict.update(**kwargs)
折れ線グラフを描画して、その色をライトスカイブルーに指定する	plt.plot(データ列, データ列2, color='lightskyblue')
変数の値を入れ替える	x, y = y, x
データフレームの中の列を等量でn個に分割する	pd.qcut(df[col], n)
リストとリストの暗いを描画して、その色を黒くする	plt.plot(xdata, ydata, linestyle='dark', color='k')
文字コードtextでファイルをオープンする]	open(filepath, encoding=text)
＜オプション＞グラフの色を濃い青に設定する	color = 'darkblue'
高頻出方からカウンタを列挙する	aCounter.most_common()
最大長nのキューをイテラブルから用意する	collections.deque(iterable, maxlen=n)
標準出力を即時表示する	sys.stdout.flush()
折れ線グラフに描画して、マーカーを星印にする	plt.plot(データ列, データ列2, marker='*')
リストとリストについての散布図に赤い右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>', c='r')
＜オプション＞暗い赤にグラフの色を設定する	color = 'darkred'
濃いグラフをイテラブルと数列で描画して、線幅をnにセットする	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
折れ線グラフを描画してその色をシルバーに変更する	plt.plot(データ列, データ列2, color='silver')
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
タプル内の要素が少なくとも一つ真	any(aTuple)
線グラフを描画して、その色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
線グラフを描画して、その色をパールバイオレットレッドにする	plt.plot(データ列, データ列2, color='palevioletred')
キューの値を右にn個分輪番で回す	deq.rotate(n)
要素がセットに含まれない	element not in aSet
＜オプション＞アイボリーに色を設定する	color = 'ivory'
文字列は漢字かどうか調べる	('\u4E00' <= ch <= '\u9FD0')
ファイルパスが存在する	os.path.exists(filepath)
破壊的に重複する行をデータフレームから削除する	df.drop_duplicates(inplace=True)
タイムスタンプデータは何秒か知る	aDatetime.second
データフレームのカラムの中のNaNの数を求める	df[col].isna().sum()
折れ線グラフを描画して、その色をフローラルホワイトに変更する	plt.plot(データ列, データ列2, color='floralwhite')
折れ線グラフの色をモカシンにセットする	plt.plot(データ列, データ列2, color='moccasin')
線グラフを描画して、その色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
nとkのコンビネーションを計算する	math.comb(n, k)
散布図を赤いポイントマーカーとして描画する	plt.plot(xdata, ydata, marker='.', c='r')
タブで区切って二つの数値をプリントする	print(value, value2, sep='\t')
データフレームのリストカラムの欠損値を直後の値に指定する	df[aList].fillna(method='bfill')
3つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
ヒストグラムを描画して、その色を黄色に変更する	plt.hist(データ列, color='yellow')
列を文字列に変換してつなげる	''.join(map(str, iterable))
データフレームの中の列を四分位数でビン分割する	pd.qcut(df[col], 4)
データフレームを表示するとき、表示可能な列数の最大値をnに変更する	pd.set_option('display.max_columns', n)
昇順にデータフレームを二つの列によって破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
線グラフを描画して、その色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
データフレームを２つの列によってまとめたグループ	df.groupby(['A', 'B'])
配列とリストについて散布図を描いてマーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
実行結果を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
オブジェクトがリストの要素	element in aList
バイオレット色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='violet')
データフレームを各列と列の組み合わせ毎にグループ化して分散を計算する	df.groupby([column, column2], as_index=False).var()
散布図をカラーコードの丸マーカーでプロットする	plt.plot(xdata, ydata, marker='o', c=rgb)
文字列中にひとつでも非英字が含まれる	any(not c.isalpha() for c in s)
列をカウンタに変換する	collections.Counter(iterable)
イテラブルとシーケンスの直積を得る	itertools.product(iterable, iterable2)
Pythonパスのリスト	sys.path
ファイルをBOM付きで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
データフレームを列によってグループ化し、各グループごとの最小値を求める	df.groupby(column).min()
ヒストグラムの色をペールグリーンに指定する	plt.hist(データ列, color='palegreen')
＜オプション＞先頭の行をカラムの名前に設定する	header = 0
有理数モジュールを使う	import fractions
等しい量になるようにビン数nでリストをビン分割する	pd.qcut(aList, n)
データフレームの列がxより大きい行を選択する	df[df[column] > x]
プロットの描画で濃いカラーパレットを使う	sns.set(pallete='deep')
グラフの見た目を綺麗にする	import seaborn as sns
n個にリストをビン分割する	pd.cut(aList, n)
棒の色をカラーコードに設定する	plt.bar(ラベル列, データ列, color=rgb)
新しいカウンタをイテラブルから作る	collections.Counter(iterable)
列をカウントして、カウンタを更新する	aCounter.update(iterable)
データフレームを二つの列の値によってグループ分けして、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
自然数の最大公約数を計算する	math.gcd(n, n2)
ピアソン積率相関係数を用いてデータフレームの相関行列	df.corr(method='pearson')
配列と配列について散布図を描画して、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
リストと数列の散布図を描き、、マーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
リストとリストについて散布図を描画して、色を暗いに変更する	plt.plot(xdata, ydata, c='dark')
現在実行中の例外を情報を知る	sys.exc_info()
コードポイントの最大値	sys.maxunicode
タプルの最後の要素	aTuple[-1]
辞書に項目名が存在するかどうか調べる	key in aDict
ヒストグラムの色を青にセットする	plt.hist(データ列, color='blue')
プラットフォームの整数の最大値	sys.maxsize
イテラブルとリストについて散布図をプロットし、、マーカーを▼に設定する	plt.plot(xdata, ydata, marker='v')
オブジェクトはタプルに含まれるか確認する	element in aTuple
線グラフの色をサドルブラウンに指定する	plt.plot(データ列, データ列2, color='saddlebrown')
データフレームの列の文字列が正規表現文字列にマッチする行を取り出す	df[df[column].str.match(s)]
データフレームで、列と列の重複を調べる	df.duplicated(subset=[column, column2])
year年month月day日hour時のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour)
ヒストグラムを描画して、その色をコーラルに変更する	plt.hist(データ列, color='coral')
折れ線グラフのマーカーをクロスにする	plt.plot(データ列, データ列2, marker='x')
プロットの描画で色差別ない色を使う	sns.set(pallete='colorblind')
リストを暗い色のヒストグラムを用いてプロットする	plt.hist(xdata, color='dark')
データ列と配列について散布図を描画して色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
カウンタから最頻出の文字列の件数	aCounter.most_common()[1]
文字列TSVファイルからCSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データフレームを各列毎にグループ化して列の最大値を求める	df.groupby(column)[column2].max()
赤い明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='r')
イテラブルをセットに変換する	set(iterable)
データフレームの列がxでない行を取り除く	df[df[column] == x]
ふたつの集合の差	aSet.difference(aSet2)
データフレームを各列毎に集計して、列の標準偏差を求める	df.groupby(column)[column2].std()
実数のハイパボリック・サインの逆数	math.asinh(x)
グラフをプレゼン用に設定する	sns.set(context='talk')
リストを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
データフレームの列と列の相関行列をヒートマップを用いてグラフ化する	sns.heatmap(df[[column, column2]].corr())
＜オプション＞線幅をnに指定する	linewidth = n
暗いグラフの色を青色に設定する	plt.plot(xdata, ydata, linestyle='dark', color='b')
文字列をシンボルにしてパラメータにする	z = sympy.Symbol(s)
エクセルデータファイルをデータフレームとして読む	pd.read_excel(filename)
ライトサーモンにヒストグラムの色を変更する	plt.hist(データ列, color='lightsalmon')
ヒストグラムを描画して、色を耐火レンガに指定する	plt.hist(データ列, color='firebrick')
複数のデータフレームを縦向きに連結する	pd.concat([df, df2, df3], axis=0)
上限nの両端キューを作る	collections.deque(maxlen=n)
数列と配列についての散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
＜オプション＞三2ビット整数型を用いる	dtype = np.int16
＜オプション＞オールドレースにグラフの色を指定する	color = 'oldlace'
文字列に漢字が使われているか	re.search('[\u4E00-\u9FD0]', s)
エラーなく辞書からキーの値を得る	aDict.get(key, None)
数列の変化を折れ線グラフで描画する	plt.plot(range(len(xdata)), xdata)
＜オプション＞クリムゾンを使う	color = 'crimson'
配列とリストについてリストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
カウンタの文字列一覧	aCounter.keys()
ファイルパスをオープンして]、書き込みストリームを見る	open(filepath, mode='w')
ヒストグラムを描画して、その色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
ヒストグラムの色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
折れ線グラフの線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n)
n個に等しい量になるように配列をビン分割する	pd.qcut(aArray, n)
データフレームを二つの列によって小さい順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
ひとつでも非大文字が文字列中に含まれるか判定する	any(not c.isupper() for c in s)
データ列とラベル列を指定して積み上げ棒グラフを描画する	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
ヒストグラムの色を紺碧に指定する	plt.hist(データ列, color='azure')
＜オプション＞チョコレートにグラフの色を設定する	color = 'chocolate'
グラフで使うy軸にラベルをつける	plt.ylabel(untitled)
データフレームの列の値をreplに正規表現patternで置き換える	df[col].replace(pattern, repl, regex=True)
暗いグラフの色を黒色に設定する	plt.plot(xdata, ydata, linestyle='dark', color='k')
明るい色でリストとリストについての散布図を描画する	plt.plot(xdata, ydata, c='bright')
実行時の標準出力の出力先がターミナルかどうか確認する	os.isatty(sys.stdin.fileno())
折れ線グラフの色をミディアムパープルに指定する	plt.plot(データ列, データ列2, color='mediumpurple')
折れ線グラフにサイズnのポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markersize=n)
データフレームを2つの列を用いてソートしてNaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
最初のカテゴリーを除き、データフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
両端キューをシーケンスから作る	collections.deque(iterable)
日付時刻データが水曜日かどうか調べる	aDatetime.weekday() == 2
データフレームの列の欠損値を直前の値に設定する	df[col].fillna(method='ffill')
リストとリストについての散布図を重なりを見やすくパステル調の色として描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
折れ線グラフの丸マーカーのサイズをnに指定する	plt.plot(データ列, データ列2, marker='o', markersize=n)
ふたつの集合はセットと互いに素か調べる	aSet.isdisjoint(aSet2)
イテラブルとデータ列のカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
新しい文字列で文字列中の正規表現を置き換える	re.sub(pattern, newsub, s)
＜オプション＞コロンを区切りで用いる	sep = ':'
文字列を部分文字列で二分し、前半の文字列を求める	s.partition(sub)[0]
ベクトルのスカラー倍を求める	aArray * n
データ列の欠損値を直後の値にセットする	ds.fillna(method='bfill')
＜オプション＞ミディアムオーキッドに色を設定する	color = 'mediumorchid'
プラットホームがLinuxかどうか確認する	sys.platform.startswith('linux')
折れ線グラフに赤いダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
＜オプション＞カーキにグラフの色を設定する	color = 'khaki'
＜オプション＞色をスラグレーに設定する	color = 'slategrey'
データフレームのリストカラムが正規分布からどの程度歪んでいるか確認する	df[aList].kurt()
組の最初のn要素を取り除く	aTuple[n:]
ヒストグラムの色をローングリーンに指定する	plt.hist(データ列, color='lawngreen')
データフレームを列によってソートして、上の方n件を取り出す	df.sort_values(columns).head(n)
列の値を正規表現でまとめて置き換える	ds.replace(pattern, repl, regex=True)
三整数のGCDを求める	math.gcd(n, n2, n3)
ファイルパスを絶対パスにする	os.path.abspath(filepath)
最小値でデータ列のNaNを補う	ds.fillna(ds.min())
要素がマッピングの値として含まれているか調べる	element in aDict.values()
グラフの目的を論文に変更する	sns.set(context='paper')
散布図を黒い丸マーカーを使って描画する	plt.plot(xdata, ydata, marker='o', c='k')
配列と配列の散布図を描画して▽マーカーの色をカラーコードにする	plt.plot(xdata, ydata, marker='v', c=rgb)
リストを明るい色のヒストグラムを用いて描画する	plt.hist(xdata, color='bright')
文字列のの開始位置から終了位置までの間に部分文字列がいくつかあるか調べる	s.count(sub, start, end)
＜オプション＞ミディアムスプリンググリーン色を使用する	color = 'mediumspringgreen'
線グラフを描画してその色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
データ列と数列についての散布図に下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v')
本日が土曜日	datetime.datetime.today().weekday() == 5
カラムを十の位で丸めて整数型にする	ds.round(-1).astype(int)
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データ列の欠損値を中央値で置換する	ds.fillna(ds.median())
カラーコードの右三角マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
マッピングにマッピングの値を加えて、更新する	aDict.update(aDict2)
小数点数の正弦を求める	math.sin(x)
データフレームのそれぞれのグループごとの標準偏差を求める	df.groupby(column).std()
ヒストグラムの色をオーキッドに変更する	plt.hist(データ列, color='orchid')
文字列の先頭で正規表現に大文字・小文字を無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
二つの列によってデータフレームをグループ分けする	df.groupby(['A', 'B'])
集合をイミュータブルにする	frozenset(aSet)
平均値でデータフレームの欠損値を補う	df.fillna(df.mean())
数列と配列についての散布図を重なりを見やすく明るい色として描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
＜オプション＞ミディアムオーキッドを用いる	color = 'mediumorchid'
データフレームのリストカラムの中にある文字列と日付データの合計をカウントする	df[aList].isin([value, value2]).sum()
データフレームを正規表現patternで一度に置き換える	df.replace(pattern, repl, regex=True)
データ列とリストの散布図に黒い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
オプションで標準エラーを使う	file = sys.stderr
リストと数列について破線を描画して、色を濃いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
＜オプション＞エンコーディングを文字コードtextにする	encoding = text
カンマ区切りのファイルを読み込む	pd.read_csv(filename, sep=',')
データフレームのカラムを千の位で丸める	df[col].round(-3)
列自身の長さnの順列	itertools.permutations(iterable, n)
実数のn乗の数剰余を求める	pow(x, n, y)
折れ線グラフを描画して、色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
データフレームの相関行列スピアマン相関係数として	df.corr(method='spearman')
折れ線グラフのバツマーカーの大きさをnにセットする	plt.plot(データ列, データ列2, marker='x', markersize=n)
要素が双方向キューの中に含まれてるか	element in deq
2つのデータフレームを縦に連結する	pd.concat([df, df2], axis=0)
ヒストグラムとしてデータ列を可視化する	plt.hist(ds)
折れ線グラフに右三角マーカーを用いる	plt.plot(データ列, データ列2, marker='>')
配列をビン数nで分割する	pd.cut(aArray, n)
データフレームのリスト列を1000の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
データ列と配列について破線グラフを描画して、その色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
異なる列をキーとして2つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
リストと配列についてカラーコードの暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
マップのキーに対応した値	aDict.get(key)
リストと配列について散布図を描いてバツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
データフレームの内の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
整数最小公倍数	math.lcm(n, n2)
黒いポイントマーカーで散布図を描く	plt.plot(xdata, ydata, marker='.', c='k')
平均値と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
＜オプション＞グラフの色をコーンズシルクに変更する	color = 'cornsilk'
＜オプション＞色をパールゴールデンロッドに変更する	color = 'palegoldenrod'
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を求める	df.groupby([column, column2], as_index=False).max()
今日が火曜日か調べる	datetime.datetime.today().weekday() == 1
辞書の項目名を列挙する	aDict.keys()
配列と数列について濃い色の折れ線を描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='deep')
行列を横ベクトルに変形する	aArray.reshape(1, -1)
データ列の平均値を求める	ds.mean()
折れ線グラフに黄色いダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
真スーパーセットかどうか	aSet > aSet2
2つの文字列は等しいかどうか調べる	s == s2
ふたつの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
数値の積分を計算する	sympy.integrate(e)
カラムの標本標準偏差を求める	ds.std()
スチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='steelblue')
整数nがリストのいづれかか調べる	n in aList
＜オプション＞ライトグリーンを用いる	color = 'lightseagreen'
＜オプション＞ヘッダをnamesに増やす	header = names
列と列の重複を削除する	df.drop_duplicates(subset=column)
逆順のキューを使う	reversed(deq)
データフレームを列でによって破壊的に並べる	df.sort_values(by=column, inplace=True)
青紫にヒストグラムの色を変更する	plt.hist(データ列, color='violet')
ヒストグラムを描画して、色をライトスレイグレーにセットする	plt.hist(データ列, color='lightslategrey')
＜オプション＞スキップするフッタをnに変更する	skipfooter = n
赤い丸マーカーをリストとリストについての散布図に描く	plt.plot(xdata, ydata, marker='o', c='r')
プロットのサイズを設定する	plt.figure(figsize=(width, height))
スタックが空か	len(deq) == 0
二進対数	math.log2(x)
＜オプション＞色をダークオーキッドにセットする	color = 'darkorchid'
非空白が文字列中に含まれるか調べる	any(not c.isspace() for c in s)
折れ線グラフを描画して、その色をミディアムブルーにセットする	plt.plot(データ列, データ列2, color='mediumblue')
マッピングのコピーを生成する	aDict.copy()
データフレームのリスト列のNaNを前の行の値で埋める	df[aList].fillna(method='ffill')
列の全順列	itertools.permutations(iterable)
折れ線グラフの色をブラウンに変更する	plt.plot(データ列, データ列2, color='brown')
nのビット長を確認する	n.bit_length()
ヒストグラムの色を濃いシアンに設定する	plt.hist(データ列, color='darkcyan')
＜オプション＞ダイアモンドマーカーを使用する	marker = 'D'
キューの先頭	deq[0]
現在を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データフレームの中の列を等間隔でn個に分割する	pd.cut(df[col], n)
イテラブルを文字列リストに変換して、部分文字列でつなげる	sub.join(map(str, iterable))
キーが辞書上で既に定義されているかどうか確認する	key in aDict
データフレームのカラムの欠損値をxで補う	df[col].fillna(x)
リストと配列で明るいの折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
本日の日数を使う	datetime.datetime.today().day
複数の列によってデータフレームを昇順に並べ、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフの色をオールドレースに変更する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフの上三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
データフレームの欠損値を前の値に増やす	df.fillna(method='ffill')
表から型リストデータ型の列を選択する	df.select_dtypes(include=typeList)
カウンタ	collections.Counter()
カラムが正規分布からどの程度、尖っているか見る	ds.skew()
オブジェクトは集合クラスかどうか確認する	isinstance(obj, set)
データフレームの中にある日付データの合計を数える	df.isin([value]).sum()
昇順にデータフレームを2つの列によって並べ直して、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
行列の平均値を算出する	np.mean(aArray)
二つの表データを列'A'と列'B'をキーにして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
文字列のサフィックスは部分文字列か	s.endswith(sub)
タプルの末尾からn番目以前の部分を得る	aTuple[:-n]
n進数文字列をバイナリにする	int(s, n).to_bytes(length=bytesize, byteorder='big')
ビン数nでデータ列を等量でビン分割する	pd.qcut(ds, n)
＜オプション＞色をターコイズに設定する	color = 'turquoise'
明るい色で柱状グラフを描く	plt.hist(xdata, color='bright')
データフレームのカラムの中に存在する日付データの合計を数える	df[col].isin([value]).sum()
データフレームのインデックスの名前をまとめて、nameからname2に変更する	df.rename(index={name: name2})
度数分布図を描画し、、半透明ににする	plt.hist(データ列, alpha=0.5)
ファイルをバイナリ書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='wb')
リストと配列について明るいグラフをプロットし、、色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
ファイルパスを追加モードで開いて]、fとする	f = open(filepath, mode='a')
２つの変数を改行で区切って表示する	print(value, value2, sep='\n')
ヒストグラムの色をダークスレートブルーに指定する	plt.hist(データ列, color='darkslateblue')
リストとイテラブルについての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
で使える色名の一覧を知る	matplotlib.colors.cnames
散布図をカラーコードの三角マーカーで描く	plt.plot(xdata, ydata, marker='^', c=rgb)
データフレームのどの値が最も現れるか確認する	df.mode()
データ列とリストについての散布図を暗い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
日付データが金曜日	aDate.weekday() == 4
日付時刻データにn日分、加える	aDatetime + datetime.timedelta(days=n)
データフレームのリスト列の中に文字列が存在するか調べる	df[aList].isin([value])
表データを'A'列の値でグループ化し要約統計量を求める	df.groupby('A').describe()
散布図にカラーコードの△マーカーを使う	plt.plot(xdata, ydata, marker='^', c=rgb)
淡い色として散布図を描画する	plt.plot(xdata, ydata, c='muted')
整数nを16進表現に変換する	hex(n)
標準出力を使用する	sys.stdout
折れ線グラフの▼印のサイズをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
ヒストグラムを描画してその色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
実数を小数点以下で四捨五入する	round(x, n)
文字列の開始位置と終了位置の間に部分文字列が存在するか調べる	s.find(sub, start, end) != -1
折れ線グラフを描画して、色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
オブジェクトが数値	isinstance(obj, (int,float))
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
イテラブルにイテラブルを続けたイテラブルを得る	itertools.chain(iterable, iterable2)
データ列がどれだけ、分散しているか見る	ds.var()
赤い左三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='<', c='r')
データフレームを列を用いてソートして、更新する	df.sort_values(by=column, inplace=True)
nまでの奇整数リスト	list(range(1, n, 2))
文字列の開始位置から終了位置までの範囲で部分文字列の出現	s.count(sub, start, end)
パターンに文字列全体を大文字・小文字を無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
散布図に赤いダイアモンドマーカーを用いる	plt.plot(xdata, ydata, marker='D', c='r')
折れ線グラフに大きさnの下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
無限リスト	itertools.count()
表データの列が文字列で終わらない行を取り出す	df[not df[column].str.endswith(s)]
折れ線グラフの色をフローラルホワイトに変更する	plt.plot(データ列, データ列2, color='floralwhite')
データ列のNaNを最大値で埋める	ds.fillna(ds.max())
エクセルファイルファイルのn番目のシートを読む	pd.read_excel(filename, sheet_name=n)
今日が木曜日かどうか確認する	datetime.datetime.today().weekday() == 3
データフレームを複数の列によってを用いて破壊的にソートする	df.sort_values(by=column, inplace=True)
リストとデータ列の散布図に右三角マーカーを描く	plt.plot(xdata, ydata, marker='>')
赤い三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^', c='r')
両端キューから最初の要素を削除する	deq.remove(element)
文字列の中でパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s)
折れ線グラフにサイズnの大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markersize=n)
表の中で、列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
マッピングの項目名の一覧	aDict.keys()
データ列とリストを折れ線で描く	plt.plot(xdata, ydata)
実行結果を緑色化する	f'\033[32m{value}\033[0m'
タプルをカウントしてカウンタから引く	aCounter.subtract(iterable)
リストを昇順にソートする	sorted(aList, reverse=True)
カウンタのユニークなキーを列挙する	list(aCounter)
配列の行ごとの最大を求める	np.max(aArray, axis=1)
組の値を並べ直す	sorted(aTuple)
二つのカラムを並べてボックスチャートにする	plt.boxplot([df[column], df[column2]])
ファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
predicateFuncを適用したとき真となる列の要素	itertools.dropwhile(predicateFunc, iterable)
整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int)
まとめてreplに正規表現patternでデータフレームのリストカラムの値を置き換える	df[aList].replace(pattern, repl, regex=True)
リストとデータ列の散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
丸マーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='o')
nが5で割り切れるか判定する	n % 5 == 0
文字列中にひとつでも非英数字が含まれるかどうか調べる	any(not c.isalnum() for c in s)
表データを列を用いてソートして下位を取り出す	df.sort_values(columns).tail(n)
黒いポイントマーカーをリストと配列についての散布図に描画する	plt.plot(xdata, ydata, marker='.', c='k')
双方向キューに要素をエンキューする	deq.appendleft(element)
リストの最初を取り除く	aList[1:]
数列とリストについての散布図を淡い色で描画する	plt.plot(xdata, ydata, c='muted')
リストと数列を用いて明るいを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
カレント作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
＜オプション＞ライトスレイグレー色を用いる	color = 'lightslategrey'
文字列中に日本語が使われているかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
行列と同じ大きさの空行列を作る	np.empty_like(aArray)
ヒストグラムをビンをnに設定して描画する	plt.hist(データ列, bins=n)
＜オプション＞スラッシュを分割記号で使う	sep = '/'
リストとリストについて明るい色の折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
＜オプション＞ミディアムバイオレットレッド色を使用する	color = 'mediumvioletred'
タイムスタンプデータとタイムスタンプデータの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
ヒストグラムを描画してその色をミスティローズにセットする	plt.hist(データ列, color='mistyrose')
＜オプション＞ブラック色を用いる	color = 'black'
データフレームの列と列に重複があればドロップする	df.drop_duplicates(subset=[column, column2])
整数nを16進文字列に変換する	hex(n)[2:]
データ列とリストについての散布図に黒い▽マーカーを描く	plt.plot(xdata, ydata, marker='v', c='k')
UTF8を用いてファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
プロットのテーマをpalleteNameに指定する	sns.set(pallete=palleteName)
淡い色の折れ線グラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
ゼロ埋めされた三２ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
配列の最小を求める	np.min(aArray)
データフレームのカラムの中に含まれる文字列との数を求める	df[col].isin([value, value2]).sum()
値を双方向キューの末尾に追加する	deq.append(element)
シーケンスから配列を作る	np.array(iterable)
日付データが木曜日かテストする	aDate.weekday() == 3
２つの列でで破壊的にデータフレームをソートする	df.sort_values(by=['A', 'B'], inplace=True)
n2がnより大きく、かつ、n3未満かどうか調べる	n < n2 and n2 < n3
ルート	math.sqrt(x)
線グラフを描画してその色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
実数のハイパボリック・コサインの逆数を求める	math.acosh(x)
日付データが日付データより先か確認する	aDate < aDate2
データフレームのNaNを第二四分位数に設定する	df.fillna(df.median())
JSONファイルの入力ストリームを辞書に変換する	json.load(fin)
イテラブルと配列のカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
文字列を部分文字列で分けたときの残りの文字列	s.partition(sub)[-1]
'A'列と'B'列を用いてデータフレームを並べて、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームのカラムの度数分布図をプロットする	plt.hist(df[column])
配列とリストについて散布図を描画して、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
二つのデータフレームをジョインする	pd.merge(df, df2)
日付時刻データからn秒分、引く	aDatetime - datetime.timedelta(seconds=n)
折れ線グラフに線幅nの▲マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
行列の列ごとの最大	np.max(aArray, axis=0)
データ列をフォーマットfmtでタイムスタンプ型に変換する	pd.to_datetime(ds, format=fmt)
データフレームの列の値が欠損値	df[col].isna()
散布図を明るい色として描く	plt.plot(xdata, ydata, c='bright')
ヒストグラムの色をフローラルホワイトにする	plt.hist(データ列, color='floralwhite')
nがn2で割り切れる	n % n2 == 0
イテラブルを双方向キューにする	collections.deque(iterable)
数が負の数か確認する	x < 0
行列の列ごとの合計	np.sum(aArray, axis=0)
配列とリストについての散布図を濃い色で描く	plt.plot(xdata, ydata, c='deep')
＜オプション＞色をフローラルホワイトにする	color = 'floralwhite'
配列とリストで淡いの折れ線グラフを描画し、、その線幅をnにセットする	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
リストと数列について散布図を描き、、星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
xにヒストグラムのアルファを設定する	plt.hist(データ列, alpha=x)
部分文字列で文字列の開始位置以降が始まるか確認する	s.startswith(sub, start)
データ列が正規分布からどの程度歪んでいるか見る	ds.kurt()
startからendの範囲で度数分布図を描画する	plt.hist(データ列, range=(start, end))
nの無限の整数イテラブル	itertools.repeat(n)
インプレースに双方向キューの値を反転する	deq.reverse()
データフレームを複数の列の値によって集約して、列挙する	[(name, group) for name, group in df.groupby(columns)]
数字を全部求める	string.digits
折れ線グラフを描画して、色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
＜オプション＞アンティークホワイトを使用する	color = 'antiquewhite'
データフレームを関数の値でまとめた表	df.groupby(関数)
セットの全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
ビン数nで配列を等量でビン分割する	pd.qcut(aArray, n)
グラフに補足を加える	plt.legend()
ふたつの集合の積集合を使う	aSet.intersection(aSet2)
データフレーム全体をインデックスを用いて並べる	df.sort_index()
データフレームを'A'列でソートする	df.sort_values(by='A')
seabornのデフォルト見栄えを適用する	sns.set()
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
行列を平坦化する	aArray.flatten()
ヒストグラムを描画して、その色をライトスカイブルーに指定する	plt.hist(データ列, color='lightskyblue')
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
ファイルパスからバイナリ書き込みストリームを開き]、fとする	f = open(filepath, mode='wb')
＜オプション＞欠損値を含める	dropna = True
折れ線グラフのダイアモンド印を緑色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
データフレームのn行以降を抽出する	df[n:]
データフレームを列によってソートして新しいインデックスを加える	df.sort_values(columns).reset_index()
実数の三乗を算出する	x ** 3
ゴールドにヒストグラムの色を指定する	plt.hist(データ列, color='gold')
データフレームからランダムにn行を取り出す	df.sample(n)
正規化したヒストグラムを描画する	plt.hist(データ列, density=True)
日付時刻データが日曜日かどうか調べる	aDatetime.weekday() == 6
リストの組み合わせ	itertools.combinations(iterable, n)
ヒストグラムの色をレモンシフォンに指定する	plt.hist(データ列, color='lemonchiffon')
棒グラフを描画して中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームの中に文字列があるかテストする	df.isin([value])
データフレームのリスト列の中に文字列と文字列がいくつ存在するか数える	df[aList].isin([value, value2]).sum()
データフレームを列によってグループ分けし、それぞれのグループ毎の個数を求める	df.groupby(column).count()
折れ線グラフを描画して、色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
predicateFuncが真となるイテラブルの部分	itertools.takewhile(predicateFunc, iterable)
折れ線グラフに描画して、マーカーを大バツ印にする	plt.plot(データ列, データ列2, marker='X')
データフレームのそれぞれのグループ毎の個数を求める	df.groupby(column).count()
プログラムを強制的に終了する	sys.exit()
＜オプション＞色をレモンシフォンに設定する	color = 'lemonchiffon'
ケンドールでデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
実数の2乗	x ** 2
＜オプション＞グラフの色をシスルに指定する	color = 'thistle'
n足すn2を求める	n + n2
＜オプション＞オレンジ色を使用する	color = 'orange'
散布図を赤色の四角マーカーで描く	plt.plot(xdata, ydata, marker='s', c='r')
＜オプション＞右三角マーカーを加える	marker = '>'
黒い上三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='^', c='k')
ファイルパスを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
三二ビット整数型の全要素を０で初期化された行列を作成する	np.zeros(行数, 列数, dtype=np.int16)
グラフの題名をuntitledに設定する	plt.title(untitled)
データフレームを列名リストの値によってグループ化し、要約統計量を計算する	df.groupby(columns).describe()
Pandasで、データフレームのカラムをPandasの日付型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
小数点数が無限大かどうか調べる	math.isinf(x)
部分文字列が部分文字列で始まる	s.startswith(sub)
データ列の欠損値を平均値にする	ds.fillna(ds.mean())
散布図を四角マーカーで描画する	plt.plot(xdata, ydata, marker='s')
ヒストグラムを描画して、その色をダークシアグリーンにセットする	plt.hist(データ列, color='darkseagreen')
データフレームの列の各データは何回出現するか見る	df[col].value_counts()
カラーバーを水平で設定する	plt.colorbar(orientation='horizontal')
淡い色として数列についてのヒストグラムを描く	plt.hist(xdata, color='muted')
両端キューからポップする	deq.pop()
文字列はタプルの要素	element in aTuple
配列とリストの黒い濃いをプロットする	plt.plot(xdata, ydata, linestyle='deep', color='k')
散布図に黒い三角マーカーを使用する	plt.plot(xdata, ydata, marker='^', c='k')
オブジェクトが浮動小数点数クラスか確認する	isinstance(obj, float)
破線グラフの色を濃いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
TSVファイルを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
オブジェクトは整数クラス	isinstance(obj, int)
赤い菱形マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
オブジェクトはリスト型のインスタンスかどうか調べる	isinstance(obj, list)
オブジェクトにフィールドが存在する	hasattr(obj, プロパティ名)
赤い△マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
現在の秒数を見る	datetime.date.today().second
データフレームのカラムとカラムを折れ線グラフとして描く	plt.plot(df[col], df[col2])
＜オプション＞色をピーチパフに指定する	color = 'peachpuff'
kを底とする対数	math.log(x, k)
データフレームを関数によってグループ化し、要約統計量を算出する	df.groupby(関数).describe()
線グラフを描画して、その色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
線グラフを描画してその色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
ヒストグラムを描画してその色をサーモンにセットする	plt.hist(データ列, color='salmon')
実数がNaNかどうか調べる	math.isnan(x)
折れ線グラフを描画してその色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
nが1もしくは2か確認する	n == 1 or n == 2
折れ線グラフに黒い三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
コロンによって文字列を区切って、列挙する	s.split(':')
データフレームの列をドロップして、インプレイスする	df.drop(column, axis=1, inplace=True)
ヒストグラムを描画して、その色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
追加できるようにBOM付きで既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
データ列を分割数nで分割する	pd.cut(ds, n)
折れ線グラフの色をパウダーブルーに指定する	plt.plot(データ列, データ列2, color='powderblue')
行列の内積を求める	np.dot(aArray, aArray2)
データフレームの指定された3つの列だけ抽出する	df[[column, column2, column3]]
最大値・最小値で整数乱数を求める	random.randint(最小値, 最大値)
配列とリストについての散布図にカラーコードのダイアモンドマーカーを描く	plt.plot(xdata, ydata, marker='D', c=rgb)
本日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
コマンドの第２引数を知る	sys.argv[1]
データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
イテラブルとリストについての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
実数に数を加える	x + y
リストとリストについて散布図を描画してマーカーを三角に変更する	plt.plot(xdata, ydata, marker='^')
文字列が全てASCII文字か調べる	s.isascii()
赤いパステル調のの折れ線を描画する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
イテラブルの各要素に対して、predicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
実数のsinの逆数を求める	math.asin(x)
実数を浮動小数点数から引く	x - y
四角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='s')
ファイルをSJISで開く]	open(filepath, encoding='shift_jis')
配列と数列についてパステル調のを描画し、、色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
淡いの折れ線グラフの色を赤くする	plt.plot(xdata, ydata, linestyle='muted', color='r')
データ列の欠損値をxにセットする	ds.fillna(x)
最大長を指定して両端キューを作成する	collections.deque(maxlen=n)
パステル調の色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
＜オプション＞ダークグリーンを使用する	color = 'darkgreen'
両端キューをリストにする	list(deq)
リストのn番目のを使う	aList[n]
文字列の開始位置からと終了位置の範囲に部分文字列が含まれる	s.find(sub, start, end) != -1
数を整数にする	int(x)
辞書をJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
データフレームを各列毎にグループ化して列の平均値を求める	df.groupby(column)[column2].mean()
ヒストグラムを描画して、その色をペルーに指定する	plt.hist(データ列, color='peru')
＜オプション＞ブラックに色を設定する	color = 'black'
データフレームのリストカラムの中にと文字列が含まれるか調べる	df[aList].isin([value, value2])
明るいの折れ線の色を赤にする	plt.plot(xdata, ydata, linestyle='bright', color='r')
データフレームのNaNを直前の値で置き換える	df.fillna(method='ffill')
データフレームをグループ化し、列に対し合計を求める	df.groupby(column)[column2].sum()
フクシアにヒストグラムの色をする	plt.hist(データ列, color='fuchsia')
本日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
最小値でデータフレームのカラムのNaNを埋める	df[col].fillna(df[col].min())
＜オプション＞色をライトコーラルに変更する	color = 'lightcoral'
xが真	bool(x)
データフレームのリストカラムの中にいくつ日付データがあるか数える	df[aList].isin([value]).sum()
明るいグラフを描いて、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
文字列が全て数値か調べる	s.isnumeric()
リストを濃い色の柱状図で描画する	plt.hist(xdata, color='deep')
ヒストグラムを描画して、その色をダークオレンジに指定する	plt.hist(データ列, color='darkorange')
SJISで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='shift_jis')
文字列の中の複数行対応としてパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフを描画して、色をピーチパフに変更する	plt.plot(データ列, データ列2, color='peachpuff')
プロットのカラーパレットを暗くする	sns.set(pallete='dark')
＜オプション＞アクア色を用いる	color = 'aqua'
データフレームの指定された列を抽出する	df[[column]]
データフレームの中にいくつ欠損値が含まれるか求める	df.isna().sum()
リストと配列についての散布図に赤い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
データフレームからカテゴリデータの列名の一覧を見る	df.select_dtypes('object').columns
変数を青色でプリントする	print(f'\033[34m{value}\033[0m')
配列とリストについての散布図に黒い大バツマーカーを描く	plt.plot(xdata, ydata, marker='X', c='k')
リストをビン数nを用いてビン分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
列'A'と列'B'をキーとして二つのデータフレームを全ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
二つのデータフレームを異なる列をキーにして全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
エクセルデータファイルからすべてのシートを読む	pd.read_excel(filename, sheet_name=None)
データフレームのリストカラムの欠損値を前の行の値に設定する	df[aList].fillna(method='ffill')
赤いポイントマーカーをリストとリストの散布図に描画する	plt.plot(xdata, ydata, marker='.', c='r')
データを両端キューの右側から取り除く	deq.pop()
二つのデータフレームを列'A'と列'B'をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
リストと配列についての散布図に文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
折れ線グラフを描画して、その色を茶色に変更する	plt.plot(データ列, データ列2, color='brown')
最大値でデータフレームのカラムのNaNを埋める	df[col].fillna(df[col].max())
折れ線グラフの下三角マーカーを黄色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
柱状グラフのビンの数を設定する	plt.hist(データ列, bins=n)
データ列の空文字をNaNに変換し、ドロップする	ds.replace('', np.nan).dropna()
配列とデータ列の折れ線グラフをプロットして、アルファをalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
行列の要素ごとの積	np.multiply(aArray, aArray2)
データフレームのカラムのpercent分位数を計算する	df[col].quantile(percent/100)
ヒストグラムを描画して、色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
ファイルを読み込みモードで開いて]、fとする	f = open(filepath, mode='r')
線グラフを描画して、色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
両端キューの左にリストの各要素を順に追加する	deq.extendleft(iterable)
配列のユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
整数nの2進表現	bin(n)
折れ線グラフを描画して、その色をダークグリーンに指定する	plt.plot(データ列, データ列2, color='darkgreen')
リストとデータ列についての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
行列の和を求める	aArray + aArray2
カウンタを多い方からリストとして得る	aCounter.most_common()
データフレームの行リスト	df.index
折れ線グラフを描画して色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
パステル調のカラーパレットをプロットの描画で用いる	sns.set(pallete='pastel')
今日をISO形式の文字列にする	datetime.datetime.today().isoformat()
横棒を描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
＜オプション＞グラフの色をオリベドラブに指定する	color = 'olivedrab'
ヒストグラムを描画して、その色をレベッカパープルに指定する	plt.hist(データ列, color='rebeccapurple')
マッピングからキーの値を得る	aDict.get(key)
リストとリストについての散布図に赤い左三角マーカーを描く	plt.plot(xdata, ydata, marker='<', c='r')
データフレームの列のユニークな値の個数を見る	df[col].nunique()
untitledとラベル付けして数列とデータ列の折れ線を描く	plt.plot(xdata, ydata, label=untitled)
両端キューのデータ数を計算する	len(deq)
文字列を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
データフレームの列がx、かつカラムがx2であるデータを取り出す	df[(df[column] == x) & (df[column2] == x2)]
文字列の色でリストとリストの折れ線を描く	plt.plot(xdata, ydata, color=s)
ヒストグラムを描画して、色を青にセットする	plt.hist(データ列, color='blue')
折れ線グラフを描画して、色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
配列とリストについての散布図に赤いバツマーカーを描く	plt.plot(xdata, ydata, marker='x', c='r')
濃いグラフをリストと配列として描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
ヒストグラムを描画して色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
ヒストグラムの色をプラムにセットする	plt.hist(データ列, color='plum')
折れ線グラフの色をライトシアンにする	plt.plot(データ列, データ列2, color='lightcyan')
文字列を最後の部分文字列で分割した時の前半の文字列	s.rpartition(sub)[0]
タプル中の要素は全て真かどうか	all(aTuple)
TSVファイルを文字化けしないように読む	pd.read_csv(filename, encoding='shift_jis')
折れ線グラフのダイアモンド印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
データフレームを'A'列を用いてによって降順にソートする	df.sort_values(by='A', ascending=False)
２つの文字列をスラッシュで区切って表示する	print(value, value2, sep='/')
ファイルパスのファイル名を見る	os.path.basename(filepath)
散布図を左三角マーカーで描画する	plt.plot(xdata, ydata, marker='<')
ケンドール順位相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
線グラフを描画してその色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
タプルにキーが存在しないとき、要素を追加する	aDict.setdefault(key, element)
折れ線グラフの色をスノーにセットする	plt.plot(データ列, データ列2, color='snow')
＜オプション＞大バツマーカーを使用する	marker = 'X'
折れ線グラフを描画してその色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
ヒストグラムを描画して、その色を暗い赤にセットする	plt.hist(データ列, color='darkred')
黄色いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
リストとリストとしてパステル調のを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
異なる列をキーとして2つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
リストとデータ列についての散布図を濃い色として重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
文字列の最後からタブを消す	s.rstrip('\t')
線グラフを描画して、色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
小数点数の双曲線正接の逆数	math.atanh(x)
ASCII限定としてパターンで文字列を分ける	re.split(pattern, s, flags=re.ASCI)
透明度alphaでデータ列とリストの折れ線グラフを描画する	plt.plot(xdata, ydata, alpha=alpha)
nが3で割り切れる	n % 3 == 0
データフレームの内の欠損値を削除する	df.dropna()
データフレームの列を100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
英字を全部使う	string.ascii_letters
nとn2が等しいかテストする	n == n2
ファイルを文字コードtextとして書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
折れ線グラフを描画して色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
ヒストグラムを描画して、色をナバホホワイトに指定する	plt.hist(データ列, color='navajowhite')
リストと配列の散布図をプロットして、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
線グラフの色をライトスチールブルーにする	plt.plot(データ列, データ列2, color='lightsteelblue')
スクリプトファイルのパスを見る	os.path.abspath(__file__)
データフレームのリスト列を100の位で丸めて整数型にする	df[aList].round(-2).astype(int)
後の行の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
折れ線グラフを描画して、色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
値を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
数列とリストのカラーコードの明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
データフレームを列で昇順に並べ直して更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを表示するとき、データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
nが5の倍数	n % 5 == 0
折れ線グラフを描画してその色をプラムに指定する	plt.plot(データ列, データ列2, color='plum')
表データを列を用いてで大きい順にソートする	df.sort_values(by=column, ascending=False)
濃いの線幅をnに指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
線グラフの色をネイビーに指定する	plt.plot(データ列, データ列2, color='navy')
ファイル名がCSVファイル	filename.endswith('.csv')
リストを黒色で表示する	print(f'\033[30m{value}\033[0m')
配列とリストについての散布図に赤い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='r')
nの八進文字列を使う	oct(n)[2:]
二つの値を文字列で区切って表示する	print(value, value2, sep=s)
リストの末尾の要素	aList[-1]
ビン数nの柱状グラフを描く	plt.hist(データ列, bins=n)
＜オプション＞フォレストグリーンを使う	color = 'forestgreen'
イテラブルをダミー変数にする	pd.get_dummies(iterable)
リストとデータ列の黒色のパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
文字列の示すエンコーディングで書き込みできるようにファイルを開く]	open(filepath, mode='w', encoding=s)
タプルの総和	sum(aTuple)
＜オプション＞ミディアムシアグリーンにグラフの色を設定する	color = 'mediumseagreen'
インプレイスでデータフレームのn行目を落とす	df.drop(n, axis=0, inplace=True)
濃い青色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkblue')
文字列全体がパターンにASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
折れ線グラフに青い▼マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
0からNまでのベクトル	np.arange(N)
複数列の関係性を一度に描く	sns.pairplot(df[[column, column2, column3]])
文字列を最後の部分文字列で二つに区切って、後半の文字列を使う	s.rpartition(sub)[-1]
＜オプション＞オレンジレッド色を使用する	color = 'orangered'
データフレームの列で文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
データフレームから指定された４つの列のみ取り出す	df[[column, column2, column3, column4]]
折れ線グラフを描画して、その色をアンティークホワイトに指定する	plt.plot(データ列, データ列2, color='antiquewhite')
散布図をポイントマーカーで描く	plt.plot(xdata, ydata, marker='.')
データフレームから指定された列の名前一覧の列のみ抽出する	df[columns]
データフレームを'A'列の値によってまとめた表	df.groupby('A')
ベクトル計算を行う	import numpy as np
線グラフを描画して、その色をホットピンクに変更する	plt.plot(データ列, データ列2, color='hotpink')
＜オプション＞色をダークスレートブルーに設定する	color = 'darkslateblue'
配列と配列についての散布図を暗い色で描く	plt.plot(xdata, ydata, c='dark')
文字列のカタカナをひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
2つのデータフレームを列をキーとして結合する	pd.merge(df, df2, on=column)
散布図を黒色の大バツマーカーで描画する	plt.plot(xdata, ydata, marker='X', c='k')
文字列の開始位置以降に部分文字列があるか調べる	s.find(sub, start) != -1
線グラフを描画して色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
CSVTSVをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
クラスは名前付きタプルか調べる	issubclass(C, tuple)
文字列の先頭の文字	s[0]
スタック中の要素の数を数える	deq.count(element)
日付時刻データからn週間分、減らす	aDatetime - datetime.timedelta(weeks=n)
配列とデータ列についての散布図をパステル調の色として描画する	plt.plot(xdata, ydata, c='pastel')
データフレームのカラムの欠損値を直前の値で補う	df[col].fillna(method='ffill')
リストとデータ列の散布図に黒い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
日付時刻データが火曜日か	aDatetime.weekday() == 1
散布図を黒いバツマーカーで描画する	plt.plot(xdata, ydata, marker='x', c='k')
折れ線グラフの下三角マーカーを青色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
折れ線グラフを描画して、その色をペルーに変更する	plt.plot(データ列, データ列2, color='peru')
ヒストグラムを描画して、色をターコイズに設定する	plt.hist(データ列, color='turquoise')
プラットホームはWindowsかどうか確認する	sys.platform.startswith('win32')
nがn2より小さいかどうか調べる	n < n2
青色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
データフレームから数値データのみ選択する	df.select_dtypes('number')
リストとリストについて散布図を描画し、、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
自然数個からk個取り出したときの順列の総数を求める	math.perm(n, k)
＜オプション＞紺色を使用する	color = 'darkblue'
データ列のNaNを最頻値に設定する	ds.fillna(ds.mode().iloc[0])
インデント幅nで辞書をJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
列名リストによってデータフレームを並べて更新する	df.sort_values(by=column, inplace=True)
折れ線グラフを描画してその色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
リストとリストの黒色の暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='k')
2つのオブジェクトは同一参照	obj is obj2
書式fmtでデータフレームのcollを日付データにする	pd.to_datetime(df[col], format=fmt)

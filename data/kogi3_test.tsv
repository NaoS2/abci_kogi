数値をプリントする	print(value)
二つの文字列をプリントする	print(value, value2)
三つの文字列を順に表示する	print(value, value2, value3)
改行なしに二つの変数を表示する	print(value, value2, end='')
タプルを展開して表示する	print(*aTuple)
＜オプション＞コロンをセパレータで用いる	sep = ':'
＜オプション＞文字列を区切りで使う	sep = s
カンマで区切って二つの文字列をプリントする	print(value, value2, sep=',')
二つの値をタブで区切って表示する	print(value, value2, sep='\t')
２つの実行結果をスラッシュで区切って表示する	print(value, value2, sep='/')
２つのリストを改行で区切って表示する	print(value, value2, sep='\n')
二つの文字列を文字列で区切って表示する	print(value, value2, sep=s)
数値を黒色でプリントする	print(f'\033[30m{value}\033[0m')
文字列を赤色で出力する	print(f'\033[31m{value}\033[0m')
変数を黄色で表示する	print(f'\033[33m{value}\033[0m')
青色でリストをプリントする	print(f'\033[34m{value}\033[0m')
変数をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
文字列をシアンで表示する	print(f'\033[36m{value}\033[0m')
数値を白色でプリントする	print(f'\033[37m{value}\033[0m')
太文字で文字列を表示する	print(f'\033[1m{value}\033[0m')
変数を下線付きで出力する	print(f'\033[4m{value}\033[0m')
値を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
リストを赤色にする	f'\033[31m{value}\033[0m'
変数を緑色で表示できる文字列にする	f'\033[32m{value}\033[0m'
文字列を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
数値を黄色にする	f'\033[33m{value}\033[0m'
実行結果を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
実行結果を紫色にする	f'\033[35m{value}\033[0m'
値をシアンでプリントできる文字列にする	f'\033[36m{value}\033[0m'
数値をシアンにする	f'\033[36m{value}\033[0m'
変数を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
文字列をアンダーライン付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
数値を下線付きにする	f'\033[4m{value}\033[0m'
xの小数点以下'2'桁までを表示する	print(':.2f'.format(x))
xの小数点以下'3'桁までを表示する	print(':.3f'.format(x))
xが真	bool(x)
xとyの商と余りを同時に計算する	divmod(x, y)
二変数の一番小さい値を求める	max(x, y)
２数の最小の値	min(x, y)
３変数の最小値	min(x, y, z)
コレクションを用いる	import collections
列から両端キューを作る	collections.deque(iterable)
イテラブルを両端キューにする	collections.deque(iterable)
最大長nの両端キューを用意する	collections.deque(maxlen=n)
最大長nの両端キューをイテラブルから作成する	collections.deque(iterable, maxlen=n)
双方向キューの最初に要素を追加する	deq.appendleft(element)
双方向キューの末尾に文字列を追加する	deq.append(element)
キューに文字列をプッシュする	deq.append(element)
イテラブルの各要素を双方向キューの先頭に追加する	deq.extendleft(iterable)
双方向キューの最後に列の各値を追加する	deq.extend(iterable)
要素をデックのn番目に差し込む	deq.insert(n, element)
要素を両端キューの先頭から取り除く	deq.popleft()
双方向キューの末尾から要素を取り除く	deq.pop()
最初の要素を双方向キューから取り出す	deq.remove(element)
双方向キューを全て取り除く	deq.clear()
右に双方向キューの要素をn個分ローテンションする	deq.rotate(n)
左にn個分双方向キューの要素をローテンションする	deq.rotate(-n)
双方向キューは空かどうか調べる	len(deq) == 0
双方向キューが空でないか	len(deq) != 0
両端キューの中に値が含まれてるかどうか調べる	element in deq
双方向キューの左	deq[0]
双方向キューの右側の要素	deq[-1]
両端キューのstart〜endの部分要素を見る	collections.deque(itertools.islice(deq, start, end))
双方向キューのstart番目からend番目までの値	collections.deque(itertools.islice(deq, start, end))
スタック中の要素のインデックス	deq.index(element)
スタック中の文字列の数をカウントする	deq.count(element)
双方向キューの要素を反転する	deq.reverse()
逆順のキューを見る	reversed(deq)
両端キューをタプルにする	tuple(deq)
カウンタをイテラブルから作成する	collections.Counter(iterable)
辞書から多重集合を用意する	collections.Counter(aDict)
カウンタのそれぞれのキーを、そのカウントだけ列挙する	aCounter.elements()
カウンタを高頻出な方からリストとして得る	aCounter.most_common()
カウンタを多い順番にリストとして得る	aCounter.most_common()
カウンタを少ない順にリストとして得る	aCounter.most_common()[::-1]
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
カウンタから列をカウントして引く	aCounter.subtract(iterable)
カウンタの文字列を増やす	aCounter[element] += 1
カウンタの要素のカウント	aCounter[element]
カウンタの文字列一覧	aCounter.keys()
カウンタ同士で積集合を算出する	aCounter & aCounter2
２つのカウンタの共通するデータを求める	aCounter & aCounter2
カウンタ同士で∪を算出する	aCounter | aCounter2
オブジェクトが名前付きタプル型か	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
year年month月day日のタイムスタンプ	datetime.datetime(year=year, month=month, day=day)
年月日と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
formatのパターンで文字列からタイムスタンプにする	datetime.datetime.strptime(日付の書かれた文字列, format)
本日の日付時刻を使う	datetime.datetime.today()
今日の年	datetime.datetime.today().year
本日の日	datetime.datetime.today().day
日付時刻データの曜日を整数で見る	aDatetime.weekday()
本日の曜日を求める	datetime.datetime.today().weekday()
タイムスタンプデータが月曜日	aDatetime.weekday() == 0
日付時刻データが火曜日か	aDatetime.weekday() == 1
日付データが火曜日かテストする	aDate.weekday() == 1
今日が水曜日か調べる	datetime.datetime.today().weekday() == 2
タイムスタンプデータが木曜日	aDatetime.weekday() == 3
現在が木曜日	datetime.datetime.today().weekday() == 3
日付データが金曜日	aDate.weekday() == 4
本日が金曜日か確認する	datetime.datetime.today().weekday() == 4
日付データが土曜日か判定する	aDate.weekday() == 5
日付時刻データをISO8601書式の文字列にする	aDatetime.isoformat()
日付データをISO書式の文字列に変換する	aDate.isoformat()
本日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
タイムスタンプデータの時間を使う	aDatetime.hour
タイムスタンプデータからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
日付時刻データにn時間分、足す	aDatetime + datetime.timedelta(hours=n)
日付時刻データからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
日付時刻データにn分分加算する	aDatetime + datetime.timedelta(minutes=n)
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
タイムスタンプデータにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
日付データにn秒分、足す	aDate + datetime.timedelta(seconds=n)
日付時刻データからn秒を減算する	aDatetime - datetime.timedelta(seconds=n)
日付時刻データが日付時刻データより前かどうか調べる	aDatetime < aDatetime2
日付データは日付データより早いか調べる	aDate < aDate2
日付時刻データが日付時刻データより後ろかテストする	aDatetime > aDatetime2
日付データが日付データより後ろかどうか	aDate > aDate2
日付時刻データが日付時刻データと同時か	aDatetime == aDatetime2
日付時刻データとタイムスタンプデータの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
タイムスタンプデータとタイムスタンプデータの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
タイムスタンプデータと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
空の辞書を作成する	{}
タプルの項目名一覧を参照する	list(aDict)
タプルを空にする	aDict.clear()
タプルをコピーする	aDict.copy()
タプルの浅いコピーを作る	aDict.copy()
辞書からキーの値を得る	aDict.get(key)
タプルから項目名の値をエラーなく参照する	aDict.get(key, None)
マッピングから項目名の値か、もしくは要素を得る	aDict.get(key, element)
キーがマップに存在するか調べる	key in aDict
キーがマッピング上で定義されている	key in aDict
キーが辞書にあるいるかどうか調べる	key not in aDict
項目名が辞書上で未定義かどうか調べる	key not in aDict
辞書の項目名とその値をペアとして取り出す	aDict.items()
辞書のキーの一覧を得る	aDict.keys()
マッピングの値に要素が含まれていないか調べる	element not in aDict.values()
辞書の項目名を要素に設定する	aDict[key] = element
項目名がマッピングに存在しないとき要素を追加する	aDict.setdefault(key, element)
辞書に別の辞書の値を更新する	aDict.update(aDict2)
キーワード引数として辞書に更新する	aDict.update(**kwargs)
マップからキーで指定されたエントリを取り出す	aDict.pop(key)
マップから最後のエントリをポップする	aDict.popitem()
2つのリストから辞書	dict(zip(aList, aList2))
マップを浅くコピーする	dict(aDict)
filepathにディレクトリを変更する	os.chdir(os.dirname(filepath))
ファイルパスからファイル名を使う	os.path.basename(filepath)
ファイルパスの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ファイルからベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ファイルパスからディレクトリ名を使う	os.path.dirname(filepath)
ファイルパスを絶対パスにする	os.path.abspath(filepath)
ファイルがないかどうか判定する	not os.path.exists(filepath)
スクリプトファイルのディレクトリパス	os.path.dirname(os.path.abspath(__file__))
ファイルパスをオープンする]	open(filepath)
ファイルの入力ストリームを求める	open(filepath)
ファイルパスからストリームをオープンして]fileとする	file = open(filepath)
読み込み用にファイルをオープンする]	open(filepath, mode='r')
ファイルを開き]、読み込みストリームを使う	open(filepath, mode='r')
ファイルをバイナリ用に開く]	open(filepath, mode='rb')
ファイルパスを開き]、バイナリストリームを使う	open(filepath, mode='rb')
ファイルを書き込み用にオープンする]	open(filepath, mode='w')
ファイルを開いて]、書き込みストリームを見る	open(filepath, mode='w')
ファイルをバイナリ書き込みモードとしてオープンする]	open(filepath, mode='wb')
ファイルを追加用にオープンする]	open(filepath, mode='a')
ファイルパスをオープンして]、追加ストリームを見る	open(filepath, mode='a')
読み込み用にファイルをオープンして]、fとする	f = open(filepath, mode='r')
ファイルをバイナリモードでオープンして]fとする	f = open(filepath, mode='rb')
書き込みモードとしてファイルをオープンして]、fとする	f = open(filepath, mode='w')
ファイルをバイナリ書き込み用に開き]、fとする	f = open(filepath, mode='wb')
ファイルを追加用にオープンして]、fとする	f = open(filepath, mode='a')
UTF8を用いてファイルパスを開く]	open(filepath, encoding='utf-8')
ファイルをEUCを用いてオープンする]	open(filepath, encoding='euc_jp')
文字コードtextを用いてファイルを開く]	open(filepath, encoding=text)
ファイルをUTF8として書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
書き込み用にSJISとしてファイルをオープンする]	open(filepath, mode='w', encoding='shift_jis')
書き込み用にファイルをEUCとしてオープンする]	open(filepath, mode='w', encoding='euc_jp')
ファイルをBOM付きで書き込み用に開く]	open(filepath, mode='w', encoding='utf_8_sig')
ファイルパスを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
ファイルを文字列の示すエンコーディングを用いて書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
既存のファイルを追加できるようにUTF8を使ってオープンする]	open(filepath, mode='a', encoding='utf-8')
ファイルをSJISを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
既存のファイルをEUCとして追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
既存のファイルをBOM付きとして追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
ファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
既存のファイルを文字列の示すエンコーディングとして追加できるように開く]	open(filepath, mode='a', encoding=s)
＜オプション＞エンコーディングを文字列の示す文字コードに設定する	encoding = s
＜オプション＞文字列の示す文字コードを用いる	encoding = s
＜オプション＞バッファリングのサイズを小さくする	buffering = 4096
ファイルから1バイト、読み込む	f.read(1)
ファイルからnバイト、読み込む	f.read(n)
ファイル全体を行分割して読み込む	f.readlines()
浮動小数点数が正の数か調べる	x > 0
実数が負か調べる	x < 0
実数の３乗	x ** 3
実数から浮動小数点数を引く	x - y
実数を数に掛ける	x * y
数を実数で割って、切り捨てる	x // y
浮動小数点数を浮動小数点数で	x // y
実数を実数で除した余り	x % y
浮動小数点数のn乗	pow(x, n)
実数を小数点以下第一位で四捨五入する	round(x, 1)
整数が整数か調べる	x.is_integer()
浮動小数点数を十六進文字列にする	x.hex()
有理数モジュールを使用する	import fractions
n進文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
2進数の文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
八進文字列をバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
16進数の文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
整数nの二進表記	bin(n)
整数nを二進数リテラルに変換する	bin(n)
nの八進数表現	oct(n)
nを8進リテラルに変換する	oct(n)
整数nの十六進表記	hex(n)
整数nを十六進リテラルにする	hex(n)
整数nの二進数文字列を見る	bin(n)[2:]
nの八進文字列	oct(n)[2:]
整数nの16進文字列	hex(n)[2:]
整数nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
整数nを符号なしでバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
nの三乗を算出する	n ** 3
nとn2の論理積を計算する	n & n2
nはn2と等しいか確認する	n == n2
nがn2よりも大きいかどうか調べる	n > n2
nがn2以下かどうか	n <= n2
nがn2未満またはn3以上かどうか調べる	n < n2 or n >= n3
nがn2以下または、n3以上かどうか調べる	n <= n2 or n >= n3
n2がnより大きくかつn3未満か調べる	n < n2 and n2 < n3
nが偶数か判定する	n % 2 == 0
nが2で割り切れない	n % 2 == 1
nが5で割り切れるか	n % 5 == 0
nがn2で割り切れるかどうか調べる	n % n2 == 0
nがn2で割り切れない	n % n2 != 0
nが正の整数か調べる	n > 0
nが一桁の数かどうか調べる	-9 <= n <= 9
nが一桁の整数	0 <= n <= 9
整数nはリストのどれかか調べる	n in aList
nが集合のいづれか	n in aSet
整数nがタプルのどれか	n in aTuple
整数nは配列のどれかか調べる	n in aArray
nが1、もしくは2かどうか調べる	n == 1 or n == 2
xが-9以上、9以下か確認する	-9 <= x <= 9
nの無限整数リスト	itertools.repeat(n)
無限に文字列が続くイテラブル	itertools.repeat(element)
文字列がn回繰り返すイテラブルを得る	itertools.repeat(element, n)
いつまでも数え上げるする	itertools.count()
イテラブルをぐるぐると繰り返す	itertools.cycle(iterable)
列を累加したイテラブルを求める	itertools.accumulate(iterable)
列を累積した列	itertools.accumulate(iterable, operator.mul)
列に列を続ける	itertools.chain(iterable, iterable2)
列に列を続けたイテラブルを得る	itertools.chain(iterable, iterable2)
列の各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
predicateFuncが真となるイテラブルの部分	itertools.takewhile(predicateFunc, iterable)
predicateFuncがTrueになるイテラブルの要素を消す	itertools.dropwhile(predicateFunc, iterable)
列と列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
イテラブルとイテラブルのデカルト積	itertools.product(iterable, iterable2)
列を2回あわせた直積を算出する	itertools.product(iterable, repeat=2)
配列自身の長さnの順列	itertools.permutations(iterable, n)
列の重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
JSONファイルのファイル入力を辞書にする	json.load(fin)
インデント付きで辞書を文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
辞書をインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
インデント幅nで、タプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
マッピングをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
辞書をJSONフォーマットでファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
タプルの個数	len(aTuple)
タプルの最初	aTuple[0]
タプルの最初を取り除く	aTuple[1:]
組の先頭のn要素を取り除く	aTuple[n:]
タプルのn番目以降の要素を取り出す	aTuple[n:]
リストの末尾を捨てる	aList[:-1]
組の末尾を取り除く	aTuple[:-1]
リストの末尾のn要素を除く	aList[:-n]
タプルの最後のn要素を除く	aTuple[:-n]
タプルのn番目からn2番目の部分	aTuple[n:n2]
リストの中の最小値を算出する	min(aList)
タプルの中の一番小さい値	min(aTuple)
組の中の最大値	max(aTuple)
nからn2までの一つ置きの整数列を作る	list(range(n, n2+1, 2))
リストにリストを加える	aList.extend(aList2)
リストにリストを加えて拡張する	aList.extend(aList2)
リストの最後から値をポップする	aList.pop()
リストの要素を取り除く	aList.clear()
リストから文字列と等しい最初の要素を取り除く	aList.remove(element)
文字列はリストの要素か確認する	element in aList
オブジェクトがリストに含まれるかどうか調べる	element in aList
文字列がタプルに含まれる	element in aTuple
オブジェクトがリストの要素でない	element not in aList
オブジェクトがリストに含まれないか調べる	element not in aList
文字列は組の要素でないか調べる	element not in aTuple
文字列はタプルに含まれないか調べる	element not in aTuple
タプル中の文字列が最初に見つかるインデックス	aTuple.index(element)
リストの要素を並べ変える	sorted(aList)
組の要素を並べる	sorted(aTuple)
リストの要素を昇順に並べ変える	sorted(aList, reverse=False)
小さい順にタプルの要素をソートする	sorted(aTuple, reverse=False)
リストを昇順に並べ変える	sorted(aList, reverse=True)
昇順にタプルを並べる	sorted(aTuple, reverse=True)
リストの文字列の位置をエラーなく求める	aList.index(element) if element in aList else -1
リストが全て真か調べる	all(aList)
組内の要素が全て真	all(aTuple)
リストが少なくとも一つ真かどうか調べる	any(aList)
タプルが少なくともひとつ真か調べる	any(aTuple)
組を引数として展開して出力する	print(*aTuple)
タプルをnから順番付けする	enumerate(aTuple, start=n)
小数点数の平方根	math.sqrt(x)
実数の床を求める	math.floor(x)
整数の最大公約数を計算する	math.gcd(n, n2)
二つの整数最小公倍数	math.lcm(n, n2)
3整数の最大公約数	math.gcd(n, n2, n3)
nとkの組合せ	math.comb(n, k)
２つの浮動小数点数は十分に近い	math.isclose(x, x2)
実数が無限大	math.isinf(x)
浮動小数点数がNaNか確認する	math.isnan(x)
自然数個のものからk個取り出したときの並べ方を計算する	math.perm(n, k)
実数のkを底とする対数を求める	math.log(x, k)
二進対数を求める	math.log2(x)
常用対数	math.log10(x)
実数のコサイン	math.cos(x)
実数のsinを求める	math.sin(x)
正接を求める	math.tan(x)
逆余弦	math.acos(x)
実数のコサインの逆数を求める	math.acos(x)
小数点数の正弦の逆数	math.asin(x)
逆正接	math.atan(x)
小数点数の逆双曲線余弦	math.acosh(x)
浮動小数点数の逆双曲線正弦	math.asinh(x)
実数のハイパボリック・サインの逆数を求める	math.asinh(x)
実数の双曲線余弦を求める	math.cosh(x)
小数点数のハイパボリック・サインを求める	math.sinh(x)
グラフを描く準備をする	from sympy import N
綺麗なグラフを用いる準備をする	import seaborn as sns
seabornのデフォルト見た目を適用する	sns.set()
グラフのデザインをデフォルトでいい感じに指定する	sns.set()
論文にプロットの目的を設定する	sns.set(context='paper')
グラフの用途を画面に指定する	sns.set(context='notebook')
グラフの目的をプレゼンにセットする	sns.set(context='talk')
グラフの目的をポスターに指定する	sns.set(context='poster')
グラフのパレットを濃くする	sns.set(pallete='deep')
プロットのカラーパレットを濃くする	sns.set(pallete='deep')
プロットのカラーパレットを淡くする	sns.set(pallete='muted')
グラフの色を淡くする	sns.set(pallete='muted')
グラフの全般的にカラーパレットをパステル調にする	sns.set(pallete='pastel')
色を暗くする	sns.set(pallete='dark')
グラフの色テーマを色差別なくする	sns.set(pallete='colorblind')
グラフの色使いを色差別なくする	sns.set(pallete='colorblind')
濃いカラーパレットをグラフの描画で使用する	sns.set(pallete='deep')
グラフの描画で淡いカラーパレットを使用する	sns.set(pallete='muted')
パステル調のパレットをグラフの描画で用いる	sns.set(pallete='pastel')
プロットの描画で暗いカラーパレットを用いる	sns.set(pallete='dark')
明るいカラーパレットをグラフの描画で用いる	sns.set(pallete='bright')
プロットの描画で色差別ないパレットを使う	sns.set(pallete='colorblind')
グラフの色テーマをpalleteNameで指定する	sns.set(pallete=palleteName)
プロットの色をpalleteNameに設定する	sns.set(pallete=palleteName)
日本語をグラフで使えるようにする	sns.set(font='IPAexGothic')
グラフのフォントを日本語に設定する	sns.set(font='IPAexGothic')
グラフの題名をuntitledにする	plt.title(untitled)
グラフのサイズを指定する	plt.figure(figsize=(width, height))
グラフの横軸の説明をuntitledに設定する	plt.xlabel(untitled)
グラフのx座標にuntitledという名前をつける	plt.xlabel(untitled)
グラフで用いる縦軸の軸名をuntitledに指定する	plt.ylabel(untitled)
グラフで使うy座標にuntitledという名前を付ける	plt.ylabel(untitled)
グラフにグリッド線を加える	plt.grid(True)
グラフに凡例を文字列と文字列と表示する	plt.legend([s, s2])
凡例の位置を指定する	plt.legend(loc=(x, y))
グラフの凡例の場所を(x,y)に設定する	plt.legend(loc=(x, y))
グラフ中の(x,y)の位置に凡例を付ける	plt.legend(loc=(x, y))
枠なしのデータラベルを加える	plt.legend(frameon=False)
イテラブルとイテラブルの折れ線グラフを描画する	plt.plot(xdata, ydata)
イテラブルと配列を折れ線グラフで描く	plt.plot(xdata, ydata)
数列を縦軸、リストをx座標と指定して、折れ線グラフを描く	plt.plot(xdata, ydata)
データ列の変遷を折れ線グラフで描画する	plt.plot(range(len(xdata)), xdata)
リストを横軸と指定して折れ線グラフを描画する	plt.plot(range(len(xdata)), xdata)
データフレームのカラムとカラムを折れ線で描画する	plt.plot(df[col], df[col2])
透明度alphaの折れ線を描画する	plt.plot(xdata, ydata, alpha=alpha)
リストとイテラブルの折れ線グラフを透明度alphaで描く	plt.plot(xdata, ydata, alpha=alpha)
リストとリストの折れ線グラフを描画して、アルファをalphaにセットする	plt.plot(xdata, ydata, alpha=alpha)
文字列の色で配列とリストの折れ線グラフを描画する	plt.plot(xdata, ydata, color=s)
データ列と配列の折れ線をプロットして、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
折れ線グラフの色をカラーコードに変更する	plt.plot(xdata, ydata, color=rgb)
カラーコードで数列とリストの折れ線グラフを描画する	plt.plot(xdata, ydata, color=rgb)
配列とデータ列の折れ線をプロットして、その色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
リストとリストについて破線グラフを描画し、、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
配列とリストについて破線グラフを描いて、その色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
リストと配列について破線グラフを描いてその色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
データ列とリストについて破線グラフを描画して色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
破線の色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
リストと数列について破線を描画して、その色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
リストとイテラブルについて破線をプロットしてその色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
濃い色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
リストとリストについて濃い色の折れ線を描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
淡い色の折れ線グラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='muted')
数列とリストについて淡い色の折れ線グラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
パステル調の色の折れ線を描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
データ列とリストについてパステル調の色の折れ線グラフを描画し、、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
暗い色の折れ線グラフを描画して線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
リストと配列について暗い色の折れ線グラフを描画して線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='dark')
リストとデータ列について明るい色の折れ線グラフを描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
色差別ない色の折れ線グラフを描いて、線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
リストとリストについて色差別ない色の折れ線を描画して、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
散布図を濃い色のマーカーで描画する	plt.plot(xdata, ydata, c='deep')
リストとリストの散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
配列と数列の散布図を描き、、色を濃いにする	plt.plot(xdata, ydata, c='deep')
淡い色のマーカーとして散布図を描画する	plt.plot(xdata, ydata, c='muted')
リストとリストの散布図を淡い色でプロットする	plt.plot(xdata, ydata, c='muted')
配列と配列の散布図を描画してマーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
データ列とリストについての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
数列とリストについて散布図を描画し、、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
配列とリストの散布図を暗い色でプロットする	plt.plot(xdata, ydata, c='dark')
リストと数列の散布図を描画して、色を暗いにセットする	plt.plot(xdata, ydata, c='dark')
リストとリストについての散布図を明るい色を用いて描画する	plt.plot(xdata, ydata, c='bright')
リストとデータ列について散布図を描き、、色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
色差別ない色で散布図を描く	plt.plot(xdata, ydata, c='colorblind')
色差別ない色でリストとリストの散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
数列とリストについて散布図を描いて、マーカーの色を色差別ないに変更する	plt.plot(xdata, ydata, c='colorblind')
重なりを見やすく濃い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
配列とリストの散布図を重なりを見やすく濃い色で描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
淡い色のマーカーで重なりを見やすく散布図を描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
数列とリストの散布図を淡い色で重なりを見やすく描く	plt.plot(xdata, ydata, c='muted', alpha=0.5)
散布図をパステル調の色のマーカーで重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
重なりを見やすく配列とリストについての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
暗い色を用いて重なりを見やすく散布図をプロットする	plt.plot(xdata, ydata, c='dark', alpha=0.5)
イテラブルと配列についての散布図を暗い色を用いて重なりを見やすく描く	plt.plot(xdata, ydata, c='dark', alpha=0.5)
明るい色で散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
配列とリストについての散布図を明るい色として重なりを見やすく描く	plt.plot(xdata, ydata, c='bright', alpha=0.5)
重なりを見やすく色差別ない色としてリストとリストの散布図を描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
リストについての柱状図を濃い色として描画する	plt.hist(xdata, color='deep')
リストを濃い色のヒストグラムを用いて描く	plt.hist(xdata, color='deep')
リストについてのヒストグラムを淡いを使って描画する	plt.hist(xdata, color='muted')
配列を淡い色の柱状図で描画する	plt.hist(xdata, color='muted')
パステル調のでデータ列についてのヒストグラムを描画する	plt.hist(xdata, color='pastel')
パステル調の色の柱状図でリストをプロットする	plt.hist(xdata, color='pastel')
リストについてのヒストグラムを暗い色で描画する	plt.hist(xdata, color='dark')
数列を暗い色のヒストグラムを用いて描画する	plt.hist(xdata, color='dark')
明るい色を用いてリストについての柱状図を描画する	plt.hist(xdata, color='bright')
リストを明るい色のヒストグラムで描く	plt.hist(xdata, color='bright')
色差別ないでリストについての柱状図を描画する	plt.hist(xdata, color='colorblind')
リストを色差別ない色のヒストグラムとして描画する	plt.hist(xdata, color='colorblind')
データ列とリストの折れ線グラフを描画して、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
折れ線グラフの線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n)
折れ線グラフをデータ列とリストで描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
濃いグラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
リストとリストで淡いグラフをプロットし、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
リストとリストでパステル調のグラフを描画して、線幅をnに指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
暗いの折れ線グラフを描いて、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
明るいグラフの線幅をnに指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
リストとデータ列を使って明るいの折れ線グラフを描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
色差別ないグラフの線幅をnに指定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
データ列とリストで色差別ないを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
濃いの折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
数列とリストのカラーコードの濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
配列と配列で濃いの折れ線グラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
配列とリストのカラーコードの淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
数列とデータ列で淡いグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
パステル調のグラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
リストと配列のカラーコードのパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
リストとデータ列でパステル調のの折れ線グラフをプロットしてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
暗いの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
リストとリストについてカラーコードの暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
暗いの折れ線グラフをイテラブルと数列として描画して、その線幅をnにセットする	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
リストと数列のカラーコードの明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
明るいグラフをリストとリストで描き、、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
色差別ないの折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
リストとイテラブルのカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
色差別ないグラフを描いてその線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
赤い濃いの折れ線を描画する	plt.plot(xdata, ydata, linestyle='deep', color='r')
リストとリストで濃いの折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
イテラブルと配列で淡いグラフを描いてその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
赤いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='r')
パステル調のグラフを描画して、線幅をnに指定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
暗いの折れ線をリストと数列で描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
数列とリストで明るいを描画し、、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
配列とリストで色差別ないグラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
配列とデータ列の青色の濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
リストと配列の濃いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
青い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
イテラブルとリストの青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
リストとデータ列の淡いを描き、、色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
パステル調のグラフの色を青くする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
データ列とリストの青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
配列とリストのパステル調のを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
配列とリストについて青い暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='b')
数列と配列の暗いグラフを描画してその色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
リストと数列について青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
リストとリストの明るいグラフを描いて、その色を青色に設定する	plt.plot(xdata, ydata, linestyle='bright', color='b')
データ列とリストの青色の色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
データ列とリストの色差別ないグラフを描画し、、色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
数列と配列について黒色の濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
データ列と配列の濃いグラフを描画して、色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
淡いグラフの色を黒くする	plt.plot(xdata, ydata, linestyle='muted', color='k')
データ列とリストの黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
リストとリストについて淡いグラフを描画し、、その色を黒色に設定する	plt.plot(xdata, ydata, linestyle='muted', color='k')
黒色のパステル調のをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
配列とリストについて黒いパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
数列と配列のパステル調のグラフを描画し、、その色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
黒い暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='k')
データ列とリストについて黒い暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='k')
データ列と配列の暗いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
黒い明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='k')
リストとデータ列の黒い明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
リストとリストについて明るいグラフをプロットして色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
黒色の色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
イテラブルとイテラブルについて黒い色差別ないを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
配列とイテラブルの色差別ないグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
リストと配列について散布図を描く	plt.scatter(xdata, ydata)
リストと数列について散らばりを可視化する	plt.scatter(xdata, ydata)
配列を縦軸リストを横軸として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
リストと数列についての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
データ列とリストの散布図を描画して、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
リストとリストについて散布図を描き、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
データ列とリストの散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
丸マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='o')
データ列とリストについて散布図を描画し、、マーカーを丸にセットする	plt.plot(xdata, ydata, marker='o')
散布図を上三角マーカーとして描画する	plt.plot(xdata, ydata, marker='^')
配列とデータ列について散布図を描画して、マーカーを三角に設定する	plt.plot(xdata, ydata, marker='^')
数列とイテラブルについての散布図に三角マーカーを描画する	plt.plot(xdata, ydata, marker='^')
下三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='v')
リストとリストについて散布図を描き、、マーカーを下三角に設定する	plt.plot(xdata, ydata, marker='v')
リストと配列についての散布図に下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v')
左三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='<')
リストとリストの散布図を描画し、、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
リストと配列についての散布図に左三角マーカーを描く	plt.plot(xdata, ydata, marker='<')
散布図に右三角マーカーを用いる	plt.plot(xdata, ydata, marker='>')
リストとリストの散布図を描画し、、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
散布図にバツマーカーを用いる	plt.plot(xdata, ydata, marker='x')
バツマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='x')
数列とリストについて散布図を描画して、マーカーをバツに指定する	plt.plot(xdata, ydata, marker='x')
数列とリストについての散布図にバツマーカーを描画する	plt.plot(xdata, ydata, marker='x')
イテラブルと数列について散布図を描画して、マーカーを大バツに指定する	plt.plot(xdata, ydata, marker='X')
リストと数列についての散布図に大バツマーカーをプロットする	plt.plot(xdata, ydata, marker='X')
リストとイテラブルについて散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
配列とリストについての散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
リストとイテラブルについて散布図を描画してマーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
配列とリストについての散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
星マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='*')
数列とイテラブルについて散布図をプロットして、マーカーを星に指定する	plt.plot(xdata, ydata, marker='*')
リストと配列についての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
カラーコードのポイントマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='.', c=rgb)
イテラブルとリストについての散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
リストとリストについて散布図を描画し、、ポイントマーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='.', c=rgb)
カラーコードの丸マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='o', c=rgb)
リストと配列の散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
リストとリストの散布図を描画して、丸マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='o', c=rgb)
散布図にカラーコードの▲マーカーを用いる	plt.plot(xdata, ydata, marker='^', c=rgb)
カラーコードの上三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
イテラブルとデータ列についての散布図にカラーコードの▲マーカーを描く	plt.plot(xdata, ydata, marker='^', c=rgb)
イテラブルと配列について散布図を描画して、三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='^', c=rgb)
散布図をカラーコードの下三角マーカーで描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
配列とリストについての散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
データ列とリストの散布図を描画し、▽マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='v', c=rgb)
カラーコードの左三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='<', c=rgb)
カラーコードの左三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
リストと数列についての散布図にカラーコードの左三角マーカーをプロットする	plt.plot(xdata, ydata, marker='<', c=rgb)
配列とリストについて散布図を描いて、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
データ列と配列についての散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
リストとイテラブルの散布図を描画して、右三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='>', c=rgb)
リストと数列についての散布図にカラーコードのクロスマーカーをプロットする	plt.plot(xdata, ydata, marker='x', c=rgb)
配列とリストについて散布図を描き、バツマーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='x', c=rgb)
カラーコードの大バツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
データ列とイテラブルについての散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
配列とリストの散布図を描画して、大バツマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='X', c=rgb)
カラーコードの四角マーカーをイテラブルとデータ列についての散布図に描く	plt.plot(xdata, ydata, marker='s', c=rgb)
リストとリストについて散布図を描いて、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
散布図をカラーコードのダイアモンドマーカーとして描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
リストとイテラブルについての散布図にカラーコードの菱形マーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
リストと配列について散布図を描画して菱形マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
カラーコードの星マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
データ列とリストの散布図にカラーコードの星マーカーを描く	plt.plot(xdata, ydata, marker='*', c=rgb)
配列と数列の散布図をプロットし、星マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='*', c=rgb)
赤色のポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='r')
配列とリストの散布図に赤いポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.', c='r')
赤い丸マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='o', c='r')
配列とデータ列の散布図に赤い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='r')
散布図に赤い▲マーカーを使う	plt.plot(xdata, ydata, marker='^', c='r')
赤い▲マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^', c='r')
赤色の上三角マーカーを配列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='^', c='r')
赤い下三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='v', c='r')
赤い▽マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='v', c='r')
データ列とリストについての散布図に赤い▽マーカーをプロットする	plt.plot(xdata, ydata, marker='v', c='r')
散布図に赤色の左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='r')
赤い左三角マーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='<', c='r')
リストとリストの散布図に赤い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='r')
赤い右三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='>', c='r')
赤色の右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='r')
データ列とリストについての散布図に赤い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='r')
散布図に赤いバツマーカーを用いる	plt.plot(xdata, ydata, marker='x', c='r')
配列とイテラブルについての散布図に赤いクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
赤い大バツマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='X', c='r')
赤い大バツマーカーをイテラブルとリストの散布図に描く	plt.plot(xdata, ydata, marker='X', c='r')
リストとデータ列の散布図に赤色の四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
散布図に赤色の菱形マーカーを用いる	plt.plot(xdata, ydata, marker='D', c='r')
赤い菱形マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='D', c='r')
リストとデータ列についての散布図に赤いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='r')
散布図に赤色の星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='r')
赤い星マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='*', c='r')
リストとイテラブルについての散布図に赤い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
リストとデータ列についての散布図に黒色のポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.', c='k')
データ列と配列の散布図に黒い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
黒い上三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='^', c='k')
黒い三角マーカーを使って散布図を描く	plt.plot(xdata, ydata, marker='^', c='k')
リストと数列の散布図に黒い三角マーカーをプロットする	plt.plot(xdata, ydata, marker='^', c='k')
黒い下三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='v', c='k')
黒い▼マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='k')
リストとリストについての散布図に黒い▼マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
数列とイテラブルについての散布図に黒い左三角マーカーを描く	plt.plot(xdata, ydata, marker='<', c='k')
リストとリストの散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
散布図を黒色のバツマーカーとして描画する	plt.plot(xdata, ydata, marker='x', c='k')
配列とリストについての散布図に黒いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
散布図に黒色の大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='k')
リストと配列についての散布図に黒い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
黒い四角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='s', c='k')
リストとリストについての散布図に黒色の四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
散布図に黒色の菱形マーカーを使う	plt.plot(xdata, ydata, marker='D', c='k')
黒いダイアモンドマーカーで散布図を描く	plt.plot(xdata, ydata, marker='D', c='k')
黒色の菱形マーカーをリストとデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='D', c='k')
黒い星マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='*', c='k')
散布図を黒い星マーカーとしてプロットする	plt.plot(xdata, ydata, marker='*', c='k')
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
グラフにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
グラフにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
にy=0の点線を設定する	plt.axhline(y=0, linestyle='dotted')
グラフにy=0の実線を設定する	plt.axhline(y=0, linestyle='solid')
リストとリストについてリストに応じて散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
カラーバーを水平に付ける	plt.colorbar(orientation='horizontal')
リストと配列についての散布図に文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
データ列とリストについて散布図を描画して文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
柱状図を描画する	plt.hist(データ列)
リストをヒストグラムを用いて可視化する	plt.hist(aList)
配列のヒストグラムを描く	plt.hist(aArray)
データフレームのカラムのヒストグラムを描画する	plt.hist(df[column])
データフレームの列をヒストグラムとして可視化する	plt.hist(df[column])
ヒストグラムを描画し、、半透明ににする	plt.hist(データ列, alpha=0.5)
ヒストグラムを描いて、xに透明度を設定する	plt.hist(データ列, alpha=x)
ヒストグラムをビン数をnに設定して描画する	plt.hist(データ列, bins=n)
ビン数nのヒストグラムをプロットする	plt.hist(データ列, bins=n)
ヒストグラムを描画して、ビン数をnに指定する	plt.hist(データ列, bins=n)
柱状図の範囲を変更する	plt.hist(データ列, range=(start, end))
ヒストグラムをstartからendまでの区間で描く	plt.hist(データ列, range=(start, end))
startからendの範囲のヒストグラムを用いてリストを描く	plt.hist(データ列, range=(start, end))
正規化された度数分布図を描画する	plt.hist(データ列, density=True)
２つのデータ列を並べてヒストグラムにする	plt.hist([データ列, データ列2], color=['b', 'r'])
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
箱ひげ図としてデータ列を可視化する	plt.boxplot(データ列)
箱ひげ図を横に並べて描画する	plt.boxplot([データ列, データ列2])
二つのカラムを並べて箱ヒゲ図にする	plt.boxplot([df[column], df[column2]])
データ列とラベルを指定して、縦棒を描画する	plt.bar(ラベル列, データ列)
データ列とラベル列を指定して、横棒を描画する	plt.barh(ラベル列, データ列)
棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
カラーコードに横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
積み上げ横棒をプロットする	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
棒グラフを描画して、棒の幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
棒グラフの幅をxに変更する	plt.bar(ラベル列, データ列, width=x)
横棒グラフを描画してグラフ幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
横棒グラフの幅をxに変更する	plt.barh(ラベル列, データ列, width=x)
＜オプション＞アクアを使用する	color = 'aqua'
＜オプション＞アクアにグラフの色をセットする	color = 'aqua'
＜オプション＞色をアクアマリンに設定する	color = 'aquamarine'
＜オプション＞紺碧にグラフの色を指定する	color = 'azure'
＜オプション＞ビスクに色を設定する	color = 'bisque'
＜オプション＞グラフの色をブランチドアーモンドに変更する	color = 'blanchedalmond'
＜オプション＞グラフの色をブルーバイオレットにセットする	color = 'blueviolet'
＜オプション＞バリーウッドにグラフの色を指定する	color = 'burlywood'
＜オプション＞グラフの色をシャルトリューズに変更する	color = 'chartreuse'
＜オプション＞やわらかい青に色をセットする	color = 'cornflowerblue'
＜オプション＞クリムゾン色を用いる	color = 'crimson'
＜オプション＞グラフの色を深紅に設定する	color = 'crimson'
＜オプション＞シアン色を使用する	color = 'cyan'
＜オプション＞ダークブルー色を用いる	color = 'darkblue'
＜オプション＞グラフの色を紺に指定する	color = 'darkblue'
＜オプション＞ダークゴールデンロッド色を用いる	color = 'darkgoldenrod'
＜オプション＞色をダークゴールデンロッドにする	color = 'darkgoldenrod'
＜オプション＞ダークグレーを用いる	color = 'darkgray'
＜オプション＞ダークカーキ色を使用する	color = 'darkkhaki'
＜オプション＞ダークカーキにグラフの色を設定する	color = 'darkkhaki'
＜オプション＞グラフの色をダークマゼンタに指定する	color = 'darkmagenta'
＜オプション＞ダークオリーブグリーンを使う	color = 'darkolivegreen'
＜オプション＞色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
＜オプション＞グラフの色をダークオレンジに変更する	color = 'darkorange'
＜オプション＞暗い赤に色を変更する	color = 'darkred'
＜オプション＞ダークスラテグレーにグラフの色を設定する	color = 'darkslategray'
＜オプション＞ダークバイオレットに色を設定する	color = 'darkviolet'
＜オプション＞グラフの色をデピンクにする	color = 'deeppink'
＜オプション＞グラフの色を耐火レンガに変更する	color = 'firebrick'
＜オプション＞フローラルホワイトに色を指定する	color = 'floralwhite'
＜オプション＞ゲインズボロにグラフの色を指定する	color = 'gainsboro'
＜オプション＞ゴーストホワイト色を使用する	color = 'ghostwhite'
＜オプション＞ゴールドにグラフの色を指定する	color = 'gold'
＜オプション＞グレー色を用いる	color = 'gray'
＜オプション＞グリーンにグラフの色を設定する	color = 'green'
＜オプション＞グリーンイエローを用いる	color = 'greenyellow'
＜オプション＞色をハニーデューに設定する	color = 'honeydew'
＜オプション＞グラフの色をインディゴに変更する	color = 'indigo'
＜オプション＞アイボリーを用いる	color = 'ivory'
＜オプション＞色をアイボリーに設定する	color = 'ivory'
＜オプション＞グラフの色をカーキに変更する	color = 'khaki'
＜オプション＞ラベンダーブラッシュを用いる	color = 'lavenderblush'
＜オプション＞グラフの色をラベンダーブラッシュに指定する	color = 'lavenderblush'
＜オプション＞色をレモンシフォンに設定する	color = 'lemonchiffon'
＜オプション＞ライトブルーを使う	color = 'lightblue'
＜オプション＞グラフの色をライトシアンに指定する	color = 'lightcyan'
＜オプション＞グラフの色をライトグレーに変更する	color = 'lightgray'
＜オプション＞グラフの色をライトグリーンに変更する	color = 'lightgreen'
＜オプション＞色をライトグレーに指定する	color = 'lightgrey'
＜オプション＞グラフの色をライトスカイブルーにする	color = 'lightskyblue'
＜オプション＞色をライトスレイグレーに変更する	color = 'lightslategray'
＜オプション＞色をライトスレイグレーにする	color = 'lightslategrey'
＜オプション＞色をライムグリーンに変更する	color = 'limegreen'
＜オプション＞マゼンタを使用する	color = 'magenta'
＜オプション＞色をマゼンタに変更する	color = 'magenta'
＜オプション＞グラフの色をミディアムパープルに指定する	color = 'mediumpurple'
＜オプション＞ミディアムスプリンググリーンに色を変更する	color = 'mediumspringgreen'
＜オプション＞ミディアムバイオレットレッドにグラフの色を指定する	color = 'mediumvioletred'
＜オプション＞ミントクリーム色を使用する	color = 'mintcream'
＜オプション＞グラフの色をミントクリームに指定する	color = 'mintcream'
＜オプション＞モカシンを使う	color = 'moccasin'
＜オプション＞モカシンに色を設定する	color = 'moccasin'
＜オプション＞色をオリーブにセットする	color = 'olive'
＜オプション＞グラフの色をオーキッドに変更する	color = 'orchid'
＜オプション＞パールバイオレットレッド色を使用する	color = 'palevioletred'
＜オプション＞パパイヤウィップにグラフの色を指定する	color = 'papayawhip'
＜オプション＞ペルーを用いる	color = 'peru'
＜オプション＞色をペルーに設定する	color = 'peru'
＜オプション＞色をピンクに指定する	color = 'pink'
＜オプション＞プラム色を用いる	color = 'plum'
＜オプション＞色をプラムに指定する	color = 'plum'
＜オプション＞パウダーブルー色を使用する	color = 'powderblue'
＜オプション＞グラフの色をパウダーブルーに指定する	color = 'powderblue'
＜オプション＞グラフの色を赤に指定する	color = 'red'
＜オプション＞サーモンにグラフの色を設定する	color = 'salmon'
＜オプション＞サンディーブラウンを用いる	color = 'sandybrown'
＜オプション＞シーグリーンに色を設定する	color = 'seagreen'
＜オプション＞シエナを使う	color = 'sienna'
＜オプション＞色をシエナに設定する	color = 'sienna'
＜オプション＞色をシルバーに設定する	color = 'silver'
＜オプション＞スレートブルー色を用いる	color = 'slateblue'
＜オプション＞グラフの色をスレートブルーに変更する	color = 'slateblue'
＜オプション＞スノーを使う	color = 'snow'
＜オプション＞グラフの色をスノーに変更する	color = 'snow'
＜オプション＞色をスプリンググリーンに変更する	color = 'springgreen'
＜オプション＞タンを使う	color = 'tan'
＜オプション＞青緑色を使用する	color = 'teal'
＜オプション＞グラフの色をティールに変更する	color = 'teal'
＜オプション＞色をトマトに設定する	color = 'tomato'
＜オプション＞青緑にグラフの色を設定する	color = 'turquoise'
＜オプション＞青紫を用いる	color = 'violet'
＜オプション＞青紫にグラフの色を設定する	color = 'violet'
＜オプション＞色を小麦色に変更する	color = 'wheat'
＜オプション＞白を使う	color = 'white'
＜オプション＞色を白に設定する	color = 'white'
＜オプション＞グラフの色をホワイトスモークに指定する	color = 'whitesmoke'
＜オプション＞色を黄色に設定する	color = 'yellow'
＜オプション＞イエローグリーン色を用いる	color = 'yellowgreen'
折れ線グラフの色をアリスブルーに変更する	plt.plot(データ列, データ列2, color='aliceblue')
線グラフを描画して色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
線グラフを描画して、色をアンティークホワイトに変更する	plt.plot(データ列, データ列2, color='antiquewhite')
折れ線グラフを描画して、その色をアクアに変更する	plt.plot(データ列, データ列2, color='aqua')
線グラフを描画して色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
折れ線グラフを描画してその色を紺碧にセットする	plt.plot(データ列, データ列2, color='azure')
折れ線グラフの色をビスクに変更する	plt.plot(データ列, データ列2, color='bisque')
線グラフを描画してその色をブラックに変更する	plt.plot(データ列, データ列2, color='black')
折れ線グラフを描画してその色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
折れ線グラフの色をブラウンに設定する	plt.plot(データ列, データ列2, color='brown')
線グラフを描画して、色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
折れ線グラフを描画してその色をバリーウッドにセットする	plt.plot(データ列, データ列2, color='burlywood')
線グラフの色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
折れ線グラフを描画してその色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
折れ線グラフの色をシャルトリューズに変更する	plt.plot(データ列, データ列2, color='chartreuse')
線グラフを描画して、その色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
線グラフを描画して色をチョコレートに指定する	plt.plot(データ列, データ列2, color='chocolate')
線グラフの色をコーラルに変更する	plt.plot(データ列, データ列2, color='coral')
線グラフを描画してその色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
線グラフの色をコーンズシルクにする	plt.plot(データ列, データ列2, color='cornsilk')
折れ線グラフを描画してその色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
真紅色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
折れ線グラフを描画してその色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
折れ線グラフを描画して、その色をシアンに変更する	plt.plot(データ列, データ列2, color='cyan')
折れ線グラフの色を濃い青に設定する	plt.plot(データ列, データ列2, color='darkblue')
ダークブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkblue')
折れ線グラフを描画してその色を紺に指定する	plt.plot(データ列, データ列2, color='darkblue')
線グラフを描画して、色をダークシアンにする	plt.plot(データ列, データ列2, color='darkcyan')
線グラフを描画して、その色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
線グラフの色をダークグレーに指定する	plt.plot(データ列, データ列2, color='darkgray')
折れ線グラフを描画して、色をダークグレーに指定する	plt.plot(データ列, データ列2, color='darkgray')
線グラフを描画して、その色をダークグリーンに指定する	plt.plot(データ列, データ列2, color='darkgreen')
線グラフの色をダークグレーにする	plt.plot(データ列, データ列2, color='darkgrey')
折れ線グラフを描画して、色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
折れ線グラフを描画してその色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
折れ線グラフを描画してその色をダークマゼンタに指定する	plt.plot(データ列, データ列2, color='darkmagenta')
線グラフを描画して、色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
線グラフの色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
折れ線グラフを描画して、色をダークオレンジに変更する	plt.plot(データ列, データ列2, color='darkorange')
折れ線グラフの色をダークオーキッドにセットする	plt.plot(データ列, データ列2, color='darkorchid')
線グラフを描画して、その色をダークオーキッドにセットする	plt.plot(データ列, データ列2, color='darkorchid')
折れ線グラフの色を暗い赤に変更する	plt.plot(データ列, データ列2, color='darkred')
折れ線グラフを描画してその色を暗い赤に指定する	plt.plot(データ列, データ列2, color='darkred')
線グラフの色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
折れ線グラフを描画して、色をダークサーモンにセットする	plt.plot(データ列, データ列2, color='darksalmon')
折れ線グラフを描画して、色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
線グラフを描画して、その色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
線グラフの色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
線グラフを描画して、色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
折れ線グラフを描画してその色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
折れ線グラフの色をデピンクにセットする	plt.plot(データ列, データ列2, color='deeppink')
折れ線グラフを描画して、その色をデピンクにセットする	plt.plot(データ列, データ列2, color='deeppink')
折れ線グラフを描画して、色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
折れ線グラフを描画してその色をディムグレーに指定する	plt.plot(データ列, データ列2, color='dimgray')
折れ線グラフを描画して色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
折れ線グラフの色をドジャーブルーに指定する	plt.plot(データ列, データ列2, color='dodgerblue')
線グラフの色をフローラルホワイトに指定する	plt.plot(データ列, データ列2, color='floralwhite')
折れ線グラフを描画して、色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
線グラフの色をフクシアに指定する	plt.plot(データ列, データ列2, color='fuchsia')
折れ線グラフを描画して、色をゲインズボロに変更する	plt.plot(データ列, データ列2, color='gainsboro')
線グラフを描画して、その色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
線グラフを描画して、その色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
線グラフを描画してその色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
折れ線グラフの色をグリーンに変更する	plt.plot(データ列, データ列2, color='green')
線グラフを描画して、その色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
折れ線グラフを描画して、色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
折れ線グラフの色をグレーに変更する	plt.plot(データ列, データ列2, color='grey')
折れ線グラフを描画して、色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
折れ線グラフの色をホットピンクに変更する	plt.plot(データ列, データ列2, color='hotpink')
折れ線グラフを描画して、その色をホットピンクに指定する	plt.plot(データ列, データ列2, color='hotpink')
線グラフを描画して、その色をインディアンレッドに変更する	plt.plot(データ列, データ列2, color='indianred')
折れ線グラフを描画して、色をインディゴにする	plt.plot(データ列, データ列2, color='indigo')
折れ線グラフの色をアイボリーに指定する	plt.plot(データ列, データ列2, color='ivory')
折れ線グラフを描画してその色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
折れ線グラフの色をカーキにする	plt.plot(データ列, データ列2, color='khaki')
線グラフを描画して、その色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
折れ線グラフの色をラベンダーブラッシュにする	plt.plot(データ列, データ列2, color='lavenderblush')
線グラフを描画して、色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
折れ線グラフの色をローングリーンにセットする	plt.plot(データ列, データ列2, color='lawngreen')
線グラフを描画して、色をローングリーンに指定する	plt.plot(データ列, データ列2, color='lawngreen')
線グラフを描画してその色をレモンシフォンに変更する	plt.plot(データ列, データ列2, color='lemonchiffon')
折れ線グラフを描画してその色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
折れ線グラフを描画してその色をライトコーラルに指定する	plt.plot(データ列, データ列2, color='lightcoral')
折れ線グラフを描画して、その色をライトゴールドロディイエローに変更する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
折れ線グラフを描画して、色をライトグレーに変更する	plt.plot(データ列, データ列2, color='lightgray')
線グラフを描画して、色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
折れ線グラフを描画して、その色をライトグレーに指定する	plt.plot(データ列, データ列2, color='lightgrey')
折れ線グラフを描画して、色を淡いピンク色に指定する	plt.plot(データ列, データ列2, color='lightpink')
線グラフを描画して、色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
折れ線グラフを描画して、その色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightseagreen')
線グラフを描画して、その色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
折れ線グラフを描画してその色をライトスレイグレーに指定する	plt.plot(データ列, データ列2, color='lightslategray')
線グラフを描画して、その色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
折れ線グラフの色をライムに指定する	plt.plot(データ列, データ列2, color='lime')
線グラフを描画して、色をライムにする	plt.plot(データ列, データ列2, color='lime')
線グラフを描画してその色をリネンに変更する	plt.plot(データ列, データ列2, color='linen')
線グラフを描画して、色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
折れ線グラフを描画して、色をマルーンにセットする	plt.plot(データ列, データ列2, color='maroon')
折れ線グラフを描画してその色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
折れ線グラフを描画してその色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
線グラフの色をミディアムシアグリーンに指定する	plt.plot(データ列, データ列2, color='mediumseagreen')
線グラフを描画して、その色をミディアムシアグリーンに指定する	plt.plot(データ列, データ列2, color='mediumseagreen')
線グラフを描画して、その色をミディアムスプリンググリーンにする	plt.plot(データ列, データ列2, color='mediumspringgreen')
折れ線グラフの色をミディアムターコイズに指定する	plt.plot(データ列, データ列2, color='mediumturquoise')
線グラフを描画して、色をミディアムターコイズに変更する	plt.plot(データ列, データ列2, color='mediumturquoise')
折れ線グラフを描画して、その色をミスティローズにセットする	plt.plot(データ列, データ列2, color='mistyrose')
線グラフを描画してその色をモカシンに変更する	plt.plot(データ列, データ列2, color='moccasin')
折れ線グラフを描画して、色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
線グラフを描画して、色をオールドレースに変更する	plt.plot(データ列, データ列2, color='oldlace')
線グラフを描画してその色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
折れ線グラフを描画して、その色をオレンジに変更する	plt.plot(データ列, データ列2, color='orange')
線グラフの色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
線グラフを描画して、その色をオレンジレッドにセットする	plt.plot(データ列, データ列2, color='orangered')
折れ線グラフを描画して色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
折れ線グラフを描画してその色をペールグリーンに指定する	plt.plot(データ列, データ列2, color='palegreen')
線グラフを描画して、その色をパレットトルコイズに変更する	plt.plot(データ列, データ列2, color='paleturquoise')
折れ線グラフを描画して、その色をパールバイオレットレッドにセットする	plt.plot(データ列, データ列2, color='palevioletred')
線グラフを描画してその色をパパイヤウィップに変更する	plt.plot(データ列, データ列2, color='papayawhip')
折れ線グラフの色をピーチパフに指定する	plt.plot(データ列, データ列2, color='peachpuff')
折れ線グラフを描画してその色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
線グラフを描画して、色をペルーにセットする	plt.plot(データ列, データ列2, color='peru')
折れ線グラフの色をプラムに指定する	plt.plot(データ列, データ列2, color='plum')
線グラフを描画してその色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
折れ線グラフを描画して、その色をパウダーブルーに変更する	plt.plot(データ列, データ列2, color='powderblue')
折れ線グラフを描画して、色をパープルに変更する	plt.plot(データ列, データ列2, color='purple')
折れ線グラフの色をレベッカパープルに指定する	plt.plot(データ列, データ列2, color='rebeccapurple')
折れ線グラフを描画して、その色を赤に指定する	plt.plot(データ列, データ列2, color='red')
折れ線グラフの色をロイヤルブルーに変更する	plt.plot(データ列, データ列2, color='royalblue')
線グラフの色をサドルブラウンに変更する	plt.plot(データ列, データ列2, color='saddlebrown')
折れ線グラフを描画して、その色をサーモンに変更する	plt.plot(データ列, データ列2, color='salmon')
線グラフの色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
線グラフを描画して、その色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
線グラフの色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
折れ線グラフを描画して、その色を貝殻に指定する	plt.plot(データ列, データ列2, color='seashell')
線グラフの色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
折れ線グラフを描画してその色をシエナにセットする	plt.plot(データ列, データ列2, color='sienna')
折れ線グラフを描画して色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
線グラフを描画して、色をスラグレーに指定する	plt.plot(データ列, データ列2, color='slategrey')
線グラフの色をスノーにセットする	plt.plot(データ列, データ列2, color='snow')
線グラフを描画して、その色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
折れ線グラフを描画してその色をスプリンググリーンに変更する	plt.plot(データ列, データ列2, color='springgreen')
線グラフを描画してその色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
折れ線グラフを描画して色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
折れ線グラフを描画して色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
折れ線グラフを描画してその色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
線グラフを描画して、その色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
折れ線グラフの色をバイオレットに設定する	plt.plot(データ列, データ列2, color='violet')
折れ線グラフを描画して色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
折れ線グラフを描画して、その色を白に指定する	plt.plot(データ列, データ列2, color='white')
線グラフを描画して、その色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
アリスブルーにヒストグラムの色を設定する	plt.hist(データ列, color='aliceblue')
紺碧にヒストグラムの色を指定する	plt.hist(データ列, color='azure')
ヒストグラムを描画してその色をベージュに設定する	plt.hist(データ列, color='beige')
ブラックにヒストグラムの色を変更する	plt.hist(データ列, color='black')
ヒストグラムを描画して、その色を茶色に指定する	plt.hist(データ列, color='brown')
ヒストグラムの色をシャルトリューズに指定する	plt.hist(データ列, color='chartreuse')
ヒストグラムを描画して、その色を黄緑に指定する	plt.hist(データ列, color='chartreuse')
ヒストグラムを描画してその色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
コーラルにヒストグラムの色をセットする	plt.hist(データ列, color='coral')
ヒストグラムを描画してその色をやわらかい青に変更する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムを描画して、その色を真紅に設定する	plt.hist(データ列, color='crimson')
ヒストグラムの色をシアンにセットする	plt.hist(データ列, color='cyan')
ヒストグラムを描画して、その色をシアンにセットする	plt.hist(データ列, color='cyan')
ヒストグラムを描画して色を紺に指定する	plt.hist(データ列, color='darkblue')
ダークゴールデンロッドにヒストグラムの色をセットする	plt.hist(データ列, color='darkgoldenrod')
ヒストグラムを描画してその色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
ヒストグラムを描画して、その色をダークグリーンにセットする	plt.hist(データ列, color='darkgreen')
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
ヒストグラムを描画して、その色をダークグレーに変更する	plt.hist(データ列, color='darkgrey')
ヒストグラムを描画して、色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
ヒストグラムを描画して、その色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
ヒストグラムを描画して、色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
ヒストグラムを描画してその色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
ヒストグラムを描画して、その色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
ヒストグラムを描画して、色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
ヒストグラムを描画して、色をダークターコイズにする	plt.hist(データ列, color='darkturquoise')
ヒストグラムの色をダークバイオレットに変更する	plt.hist(データ列, color='darkviolet')
ヒストグラムを描画してその色をデピンクに変更する	plt.hist(データ列, color='deeppink')
ヒストグラムを描画して、その色をディムグレーにセットする	plt.hist(データ列, color='dimgrey')
ヒストグラムを描画して色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
ヒストグラムを描画して、色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
ヒストグラムを描画してその色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
ヒストグラムを描画して、その色をフォレストグリーンにセットする	plt.hist(データ列, color='forestgreen')
ゲインズボロにヒストグラムの色を設定する	plt.hist(データ列, color='gainsboro')
ヒストグラムを描画して、色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
ヒストグラムを描画して、色をグリーンに設定する	plt.hist(データ列, color='green')
ヒストグラムを描画してその色をハニーデューに変更する	plt.hist(データ列, color='honeydew')
ヒストグラムを描画して、その色をインディアンレッドに変更する	plt.hist(データ列, color='indianred')
インディゴにヒストグラムの色を設定する	plt.hist(データ列, color='indigo')
ヒストグラムを描画して、その色をカーキに指定する	plt.hist(データ列, color='khaki')
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
ヒストグラムを描画してその色をラベンダーに設定する	plt.hist(データ列, color='lavender')
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
ヒストグラムを描画してその色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
ヒストグラムを描画してその色をライトコーラルに変更する	plt.hist(データ列, color='lightcoral')
ヒストグラムを描画してその色をライトシアンに指定する	plt.hist(データ列, color='lightcyan')
ヒストグラムを描画して、色をライトゴールドロディイエローに変更する	plt.hist(データ列, color='lightgoldenrodyellow')
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightgreen')
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgrey')
ヒストグラムを描画してその色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
ヒストグラムを描画して、その色を淡いピンク色に変更する	plt.hist(データ列, color='lightpink')
ライトスレイグレーにヒストグラムの色を指定する	plt.hist(データ列, color='lightslategrey')
ヒストグラムを描画して、色をライトスレイグレーにセットする	plt.hist(データ列, color='lightslategrey')
ヒストグラムを描画してその色をライトイエローに変更する	plt.hist(データ列, color='lightyellow')
ヒストグラムの色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
ミディアムスレートブルーにヒストグラムの色をセットする	plt.hist(データ列, color='mediumslateblue')
ヒストグラムを描画して色をミディアムスプリンググリーンに指定する	plt.hist(データ列, color='mediumspringgreen')
ヒストグラムを描画して、その色をミディアムバイオレットレッドにセットする	plt.hist(データ列, color='mediumvioletred')
ヒストグラムの色をミッドナイトブルーに変更する	plt.hist(データ列, color='midnightblue')
ヒストグラムの色をモカシンにセットする	plt.hist(データ列, color='moccasin')
ヒストグラムを描画してその色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
ヒストグラムの色をネイビーに指定する	plt.hist(データ列, color='navy')
ヒストグラムを描画して、色をネイビーに指定する	plt.hist(データ列, color='navy')
オールドレースにヒストグラムの色を設定する	plt.hist(データ列, color='oldlace')
ヒストグラムを描画してその色をオールドレースに指定する	plt.hist(データ列, color='oldlace')
ヒストグラムの色をオリベドラブに変更する	plt.hist(データ列, color='olivedrab')
ヒストグラムを描画して、色をパールゴールデンロッドに指定する	plt.hist(データ列, color='palegoldenrod')
ヒストグラムを描画して色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
ヒストグラムを描画してその色をペルーに設定する	plt.hist(データ列, color='peru')
ピンクにヒストグラムの色をする	plt.hist(データ列, color='pink')
ヒストグラムを描画して色をピンクに設定する	plt.hist(データ列, color='pink')
ヒストグラムの色をプラムに変更する	plt.hist(データ列, color='plum')
ヒストグラムを描画して、色をプラムに変更する	plt.hist(データ列, color='plum')
ヒストグラムの色をパープルに変更する	plt.hist(データ列, color='purple')
ヒストグラムを描画してその色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
ヒストグラムの色を赤に変更する	plt.hist(データ列, color='red')
ヒストグラムを描画して、色をサドルブラウンにセットする	plt.hist(データ列, color='saddlebrown')
ヒストグラムを描画して、その色をシーグリーンに変更する	plt.hist(データ列, color='seagreen')
ヒストグラムの色をシエナに指定する	plt.hist(データ列, color='sienna')
ヒストグラムを描画して、その色をスカイブルーに指定する	plt.hist(データ列, color='skyblue')
ヒストグラムを描画して色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategray')
ヒストグラムを描画してその色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
ヒストグラムを描画してその色をスチールブルーに変更する	plt.hist(データ列, color='steelblue')
ティールにヒストグラムの色を変更する	plt.hist(データ列, color='teal')
ヒストグラムを描画して、色をシスルに変更する	plt.hist(データ列, color='thistle')
ヒストグラムを描画して、その色をトマトにセットする	plt.hist(データ列, color='tomato')
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
ヒストグラムを描画して、その色をターコイズに指定する	plt.hist(データ列, color='turquoise')
青紫にヒストグラムの色を設定する	plt.hist(データ列, color='violet')
ヒストグラムを描画して、色を青紫にする	plt.hist(データ列, color='violet')
ヒストグラムを描画してその色を小麦色に指定する	plt.hist(データ列, color='wheat')
ヒストグラムの色を白に変更する	plt.hist(データ列, color='white')
ヒストグラムを描画してその色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
線グラフを描画して、色を白くする	plt.plot(データ列, データ列2, color='w')
＜オプション＞グラフの種類を破線に変更する	linestyle = 'dashed'
＜オプション＞線種を破線に変更する	linestyle = 'dashed'
＜オプション＞グラフの種類を一点鎖線に変更する	linestyle = 'dashbot'
＜オプション＞グラフの線種を点線に設定する	linestyle = 'dotted'
＜オプション＞グラフの線種を実線に変更する	linestyle = 'solid'
折れ線グラフのスタイルを点線に変更する	plt.plot(データ列, データ列2, linestyle='dotted')
実線に折れ線グラフを設定する	plt.plot(データ列, データ列2, linestyle='solid')
ヒストグラムの線のスタイルを破線にセットする	plt.hist(データ列, linestyle='dashed')
ヒストグラムの線のスタイルを点線に指定する	plt.hist(データ列, linestyle='dotted')
＜オプション＞ポイントマーカーを加える	marker = '.'
＜オプション＞三角マーカーを加える	marker = '^'
＜オプション＞上三角マーカーを描画する	marker = '^'
＜オプション＞▼マーカーを加える	marker = 'v'
＜オプション＞バツ印を使う	marker = 'x'
＜オプション＞大バツマーカーを使用する	marker = 'X'
＜オプション＞四角マーカーを用いる	marker = 's'
データ列を折れ線グラフに描画して、印をポイント印にする	plt.plot(データ列, データ列2, marker='.')
折れ線グラフに三角印を加える	plt.plot(データ列, データ列2, marker='^')
データ列を折れ線グラフに描画してマーカーを三角にする	plt.plot(データ列, データ列2, marker='^')
折れ線グラフに▽印を用いる	plt.plot(データ列, データ列2, marker='v')
折れ線グラフのマーカーを下三角印にする	plt.plot(データ列, データ列2, marker='v')
折れ線グラフに描画して、マーカーを下三角にする	plt.plot(データ列, データ列2, marker='v')
データ列を折れ線グラフに描画して、印を左三角印にする	plt.plot(データ列, データ列2, marker='<')
データ列を折れ線グラフに描画してマーカーを右三角にする	plt.plot(データ列, データ列2, marker='>')
データ列を折れ線グラフに描画して、マーカーをクロス印にする	plt.plot(データ列, データ列2, marker='x')
データ列を折れ線グラフに描画して印を大バツ印にする	plt.plot(データ列, データ列2, marker='X')
折れ線グラフに四角印を使う	plt.plot(データ列, データ列2, marker='s')
データ列を折れ線グラフに描画して、印を四角印にする	plt.plot(データ列, データ列2, marker='s')
折れ線グラフにダイアモンドマーカーを用いる	plt.plot(データ列, データ列2, marker='D')
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
折れ線グラフに星印を使う	plt.plot(データ列, データ列2, marker='*')
折れ線グラフに描画して、マーカーを星印にする	plt.plot(データ列, データ列2, marker='*')
赤い丸印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
赤い△マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
折れ線グラフに青い丸印を描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
折れ線グラフのバツ印を青くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
黒い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
折れ線グラフに黄色い▲マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
折れ線グラフの▲マーカーを黄色くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
折れ線グラフの▼マーカーを黄色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
折れ線グラフのクロス印を黄色くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
折れ線グラフに黄色い四角印を描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
折れ線グラフの上三角印を緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
折れ線グラフに緑色の下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
折れ線グラフのポイントマーカーの大きさをnにする	plt.plot(データ列, データ列2, marker='.', markersize=n)
折れ線グラフの丸印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='o', markersize=n)
折れ線グラフにサイズnの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
折れ線グラフの三角マーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='^', markersize=n)
折れ線グラフに大きさnの下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
折れ線グラフの下三角マーカーの大きさをnにセットする	plt.plot(データ列, データ列2, marker='v', markersize=n)
折れ線グラフの左三角印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='<', markersize=n)
折れ線グラフに大きさnのバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
折れ線グラフの大バツ印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='X', markersize=n)
折れ線グラフの四角マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='s', markersize=n)
折れ線グラフに大きさnの菱形印を描画する	plt.plot(データ列, データ列2, marker='D', markersize=n)
折れ線グラフのダイアモンド印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
折れ線グラフの上三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
折れ線グラフの右三角マーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
折れ線グラフに線幅nのバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
折れ線グラフのバツマーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
折れ線グラフの四角マーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
折れ線グラフのダイアモンド印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
折れ線グラフの星印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
行列演算を行う	import numpy as np
＜オプション＞３二ビット整数型を使用する	dtype = np.int16
リストから行列を作る	np.array(aList)
リストから配列を作成する	np.array(iterable)
全要素を0で初期化された配列を作る	np.zeros(要素数)
符号なし８ビット整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.uint8)
ゼロ埋めされた３2ビット整数型のベクトルを作成する	np.zeros(要素数, dtype=np.int16)
ブール型のゼロ埋めした配列を作る	np.zeros(要素数, dtype=np.int32)
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
三二ビット整数型の０で全要素を初期化された行列	np.zeros(行数, 列数, dtype=np.int16)
０で全要素を初期化された論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
全要素を1で初期化されたベクトルを作成する	np.ones(要素数, dtype=np.int)
初期値で全要素を初期化された配列	np.full(要素数, 初期値, dtype=np.int)
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
未初期化のベクトル	np.empty(要素数, dtype=np.int)
ベクトルと同じ大きさの空配列を初期化する	np.empty_like(aArray)
0からNまでの行列を初期化する	np.arange(N)
配列を縦ベクトルに変形する	aArray.reshape(-1, 1)
配列を元に全要素が0の配列	np.zeros_like(aArray)
既存の配列をベースにして全要素が1のベクトル	np.ones_like(aArray)
行列の行を選択する	aArray[行番号]
配列のユニークな値を要素とする行列	np.unique(aArray)
行列の差	aArray - aArray2
ベクトルのスカラー倍を計算する	aArray * n
ベクトルの各要素の積を算出する	np.multiply(aArray, aArray2)
ベクトルの内積	np.dot(aArray, aArray2)
配列の行列積を計算する	np.matmul(aArray, aArray2)
行列の行列式を求める	np.linalg.det(aArray)
行列間の各要素の最大公約数	np.gcd(aArray, aArray2)
行列間の要素ごとの最小公倍数を計算する	np.lcm(aArray, aArray2)
行列のデータ型	aArray.dtype()
ベクトルの次元数	aArray.ndim
行列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
配列の合計値を求める	np.sum(aArray)
行列の行ごとの合計	np.sum(aArray, axis=1)
配列の列ごとの平均	np.mean(aArray, axis=0)
配列の行ごとの最小値	np.min(aArray, axis=1)
行列の最大値	np.max(aArray)
配列の行ごとの標準偏差を算出する	np.std(aArray, axis=1)
ベクトルの累積和	np.cumsum(aArray)
ベクトルから重複を除いた配列を作成する	np.unique(aArray)
ベクトルのユニークな要素とその個数を計算する	u, counts = np.unique(aArray, return_counts=True)
２つのオブジェクトが等しいか確認する	obj == obj2
二つのオブジェクトが同一参照	obj is obj2
オブジェクトを文字列にする	str(obj)
オブジェクトが関数かテストする	callable(obj)
オブジェクトに属性が存在するか確認する	hasattr(obj, プロパティ名)
オブジェクトは整数クラスのインスタンス	isinstance(obj, int)
オブジェクトは浮動小数点数クラスかどうか	isinstance(obj, float)
オブジェクトは論理値	isinstance(obj, bool)
オブジェクトはリストか判定する	isinstance(obj, list)
オブジェクトがタプルクラス	isinstance(obj, tuple)
オブジェクトが辞書クラスか調べる	isinstance(obj, dict)
オブジェクトは集合クラスか確認する	isinstance(obj, set)
オブジェクトはバイト列	isinstance(obj, bytes)
オブジェクトはリストかタプル	isinstance(obj, (list)
クラスのサブ型	issubclass(サブクラス, クラス)
オブジェクトのオブジェクト識別子を使う	id(obj)
列の要約統計量	ds.describe()
データフレームの列の要約統計量	df[col].describe()
データ列の平均値を計算する	ds.mean()
データフレームのリストカラムのメディアン	df[aList].median()
データ列の50パーセンタイルを求める	ds.median()
データフレームのカラムの第二四分位数	df[col].median()
データフレームの25パーセンタイル	df.quantile(0.25)
カラムの第一四分位数	ds.quantile(0.25)
データフレームのリスト列のどの値が最も現れるか見る	df[aList].mode()
データ列のモード	ds.mode()
データフレームの列の最頻値を求める	df[col].mode()
データフレームのカラムのどの値が最も現れるか見る	df[col].mode()
データフレームのリスト列の母標準偏差を求める	df[aList].std(ddof=0)
データフレームはどの程度、分散しているか見る	df.var()
データフレームのリスト列の分散	df[aList].var()
データ列がどれだけ、分散しているか見る	ds.var()
データフレームのカラムがどの程度分散しているか見る	df[col].var()
データフレームのリスト列が正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
データフレームのカラムは正規分布からどの程度、歪んでいるか見る	df[col].kurt()
データフレームが正規分布からどの程度尖っているか確認する	df.skew()
データフレームのリストカラムが正規分布からどの程度尖っているか確認する	df[aList].skew()
データ列の正規分布に対する上下広がりを算出する	ds.skew()
データ列が正規分布からどれだけ、尖っているか見る	ds.skew()
データフレームの列が正規分布からどの程度尖っているか見る	df[col].skew()
データフレームのリストカラムを百の位で丸める	df[aList].round(-2)
データ列を千の位で丸める	ds.round(-3)
データ列を丸めて整数型にする	ds.round().astype(int)
データフレームのカラムを四捨五入して、整数型にする	df[col].round().astype(int)
データフレームのリスト列を10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
データ列を十の位で丸めて、整数型にする	ds.round(-1).astype(int)
データフレームのカラムを10の位で丸めて整数型にする	df[col].round(-1).astype(int)
データフレームのリストカラムを100の位で丸めて整数型にする	df[aList].round(-2).astype(int)
データ列を100の位で丸めて整数にする	ds.round(-2).astype(int)
データフレームのカラムを百の位で四捨五入して整数型にする	df[col].round(-2).astype(int)
データフレームのリストカラムを1000の位で丸めて、整数にする	df[aList].round(-3).astype(int)
データフレームの列を千の位で丸めて、整数にする	df[col].round(-3).astype(int)
xでデータフレームのNaNを埋める	df.fillna(x)
データフレームのリストカラムのNaNをxで置き換える	df[aList].fillna(x)
データ列の未入力値をxに指定する	ds.fillna(x)
データフレームの列の欠損値をxに減らす	df[col].fillna(x)
データフレームのリストカラムの未入力値を平均値に設定する	df[aList].fillna(df[aList].mean())
平均値でデータ列の欠損値を埋める	ds.fillna(ds.mean())
データ列の未入力値を平均値に設定する	ds.fillna(ds.mean())
データフレームの列のNaNを平均値に設定する	df[col].fillna(df[col].mean())
最頻値でデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
データフレームのリスト列の欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
データフレームのリスト列の未入力値を最頻値に指定する	df[aList].fillna(df[aList].mode().iloc[0])
データ列の未入力値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
カラムのNaNを最頻値に設定する	ds.fillna(ds.mode().iloc[0])
データフレームのカラムの未入力値を最頻値で置換する	df[col].fillna(df[col].mode().iloc[0])
データフレームの列の未入力値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
データフレームのNaNをメディアンで埋める	df.fillna(df.median())
データフレームのリストカラムの欠損値をメディアンで補う	df[aList].fillna(df[aList].median())
データフレームのリスト列の欠損値をメディアンに設定する	df[aList].fillna(df[aList].median())
列のNaNを50パーセンタイルで埋める	ds.fillna(ds.median())
データ列の未入力値を50パーセンタイルに設定する	ds.fillna(ds.median())
データフレームのカラムの欠損値を中央値で補う	df[col].fillna(df[col].median())
データフレームの欠損値を最大値に変更する	df.fillna(df.max())
データフレームのリスト列の欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
データフレームのリストカラムの欠損値を最大値に変更する	df[aList].fillna(df[aList].max())
データ列のNaNを最大値で埋める	ds.fillna(ds.max())
データ列の未入力値を最大値に設定する	ds.fillna(ds.max())
データフレームの列の欠損値を最大値で補う	df[col].fillna(df[col].max())
最小値でデータフレームの欠損値を埋める	df.fillna(df.min())
データフレームのリスト列の欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
カラムの欠損値を最小値にセットする	ds.fillna(ds.min())
データフレームのカラムの未入力値を最小値で埋める	df[col].fillna(df[col].min())
データフレームの列の欠損値を最小値に設定する	df[col].fillna(df[col].min())
データフレームの欠損値を直前の値に変更する	df.fillna(method='ffill')
直前の値でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(method='ffill')
データフレームのリストカラムの未入力値を前の行の値に変更する	df[aList].fillna(method='ffill')
データ列のNaNを直前の値で埋める	ds.fillna(method='ffill')
カラムの欠損値を前の値に設定する	ds.fillna(method='ffill')
データフレームのカラムのNaNを前の値で埋める	df[col].fillna(method='ffill')
データフレームのカラムのNaNを前の行の値に設定する	df[col].fillna(method='ffill')
データフレームの欠損値を後の行の値で埋める	df.fillna(method='bfill')
データフレームのリストカラムの欠損値を後の行の値に設定する	df[aList].fillna(method='bfill')
データ列の未入力値を直後の値で埋める	ds.fillna(method='bfill')
データフレームのカラムのNaNを直後の値に指定する	df[col].fillna(method='bfill')
カラムの文字列をNaNに変換する	ds.replace(s, np.nan)
データフレームのカラムの文字列をNaNに変換する	df[col].replace(s, np.nan)
まとめてValueMapでデータフレームの値を変更する	df.replace(ValueMap)
データフレームのリスト列の値をValueMapでまとめて置換する	df[aList].replace(ValueMap)
一度にValueMapでカラムを変更する	ds.replace(ValueMap)
一度にValueMapでデータフレームのカラムの値を置換する	df[col].replace(ValueMap)
データフレームの値を正規表現でreplに置換する	df.replace(pattern, repl, regex=True)
replに正規表現でデータフレームのリストカラムを置き換える	df[aList].replace(pattern, repl, regex=True)
カラムの値を正規表現で一度にreplに置き換える	ds.replace(pattern, repl, regex=True)
まとめてreplに正規表現でデータフレームのカラムの値を置き換える	df[col].replace(pattern, repl, regex=True)
データフレームの値は欠損値か調べる	df.isna()
データフレームのリストカラムの値が欠損値	df[aList].isna()
データ列の値が欠損値	ds.isna()
データフレームのカラムの値がNaNか	df[col].isna()
データフレームの中のNaNの合計を数える	df.isna().sum()
データフレームのリストカラムの中の未入力値の合計をカウントする	df[aList].isna().sum()
データフレームのリスト列の中にいくつ欠損値があるかカウントする	df[aList].isna().sum()
データ列の中の欠損値の合計をカウントする	ds.isna().sum()
データ列の中にいくつ欠損値があるか求める	ds.isna().sum()
データフレームの列の中の欠損値の合計を数える	df[col].isna().sum()
データフレームのカラムの中にいくつ未入力値があるかカウントする	df[col].isna().sum()
データフレームの中に日付データが存在するか判定する	df.isin([value])
データフレームのリストカラムの中にがあるかどうか調べる	df[aList].isin([value])
データ列の中にが含まれるか確認する	ds.isin([value])
データフレームの列の中に文字列が存在するか判定する	df[col].isin([value])
データフレームの中にあるの合計をカウントする	df.isin([value]).sum()
データフレームのリストカラムの中にある文字列の合計をカウントする	df[aList].isin([value]).sum()
データフレームのリストカラムの中にいくつ文字列が含まれるかカウントする	df[aList].isin([value]).sum()
データ列の中にあるの合計を数える	ds.isin([value]).sum()
データ列の中にいくつが存在するか数える	ds.isin([value]).sum()
データフレームのカラムの中に含まれる日付データの合計をカウントする	df[col].isin([value]).sum()
データフレームのリスト列の中にと日付データが存在するかどうか調べる	df[aList].isin([value, value2])
データ列の中に文字列と日付データが存在するか調べる	ds.isin([value, value2])
データフレームのカラムの中に文字列と日付データが含まれる	df[col].isin([value, value2])
データフレームの中に存在する日付データと文字列の合計を数える	df.isin([value, value2]).sum()
データフレームの中にと日付データがいくつ含まれるか数える	df.isin([value, value2]).sum()
データフレームのリストカラムの中に存在する文字列と日付データの合計を数える	df[aList].isin([value, value2]).sum()
データフレームのリストカラムの中に日付データと日付データがいくつあるかカウントする	df[aList].isin([value, value2]).sum()
データ列の中にある日付データと文字列の数を数える	ds.isin([value, value2]).sum()
データ列の中に文字列とがいくつあるか数える	ds.isin([value, value2]).sum()
データフレームの列の中にある日付データと文字列の合計を数える	df[col].isin([value, value2]).sum()
データフレームの列の中に日付データとがいくつあるか数える	df[col].isin([value, value2]).sum()
2つのデータフレームを縦方向につなぐ	pd.concat([df, df2], axis=0)
2つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
縦方向に三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
複数のデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
データフレームとデータ列をくっつける	pd.concat([df, ds], axis=1)
最後の列をデータフレームから消す	df[df.columns[:-1]]
データフレームから1行だけ列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
異なる列をキーとして2つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
２つのデータフレームを列をキーとして左ジョインする	pd.merge(df, df2, on=column, how='left')
列をキーにして２つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
列をキーにして2つのデータフレームを内部ジョインする	pd.merge(df, df2, on=column, how='inner')
列'A'と列'B'をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
二つのデータフレームを列'A'と列'B'をキーにして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
二つのデータフレームを異なる列をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
異なるカラムをキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
シーケンスをダミー変数に変換する	pd.get_dummies(iterable)
最初のカテゴリーを無視し、データフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], drop_first=True)
データフレームの上n行を抽出する	df.head(n)
データフレームの最後n行を抽出する	df.tail(n)
データフレームから一行をランダムに抽出する	df.sample()
データフレームからn行サンプリングする	df.sample(n)
範囲指定してデータフレームの行を抽出する	df[start:end]
データフレームのn行より前を選択する	df[:n]
列を配列として取り出す	df[column].values
列をリストに変換する	df[column].values.tolist()
列をリストとして取り出す	df[column].values.tolist()
データフレームからカラムを１つだけ選択する	df[[column]]
データフレームから指定された列のみ抽出する	df[[column]]
データフレームから指定された二つの列のみ取り出す	df[[column, column2]]
データフレームから列を三つだけ選択する	df[[column, column2, column3]]
データフレームから指定された3つの列を抽出する	df[[column, column2, column3]]
データフレームから指定された４つの列のみ抽出する	df[[column, column2, column3, column4]]
データフレームの指定した列の名前一覧の列を抽出する	df[columns]
データフレームの列一覧	df.info()
列の名前リスト	df.columns
データフレームの列名を指定された列名一覧に置き換える	df.columns = columns
データフレームからカテゴリデータの列名の一覧を求める	df.select_dtypes('object').columns
データフレームのデータ型一覧	df.dtypes
データフレームから型リストのデータ型のカラムを除外する	df.select_dtypes(exclude=typeList)
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
データフレームから数値データの列だけ取り出す	df.select_dtypes('number')
表から型の列を抽出する	df.select_dtypes(ty)
データフレームの各列間の相関係数を計算する	df.corr()
データフレームのリスト列の各列間の相関係数を算出する	df[aList].corr()
ピアソン積率相関係数でデータフレームの相関行列	df.corr(method='pearson')
ピアソン相関係数として表データの列と列の相関行列	df[[column, column2]].corr(method='pearson')
ピアソン相関係数でデータフレームのリストで指定された列の相関行列	df[aList].corr(method='pearson')
ケンドールでデータフレームの相関行列	df.corr(method='kendall')
ケンドール順位相関係数としてデータフレームの列と列の相関行列を計算する	df[[column, column2]].corr(method='kendall')
ケンドール順位相関係数で表データのリストで指定された列の相関行列	df[aList].corr(method='kendall')
スピアマンとしてデータフレームの列とカラムの相関行列	df[[column, column2]].corr(method='spearman')
スピアマンでデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
データフレームの相関行列をヒートマップでグラフ化する	sns.heatmap(df.corr())
ヒートマップを使ってデータフレームのカラムと列の相関行列を描画する	sns.heatmap(df[[column, column2]].corr())
データフレームのリストカラムの相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
データフレームのリストで指定された列のヒートマップを描画する	sns.heatmap(df[aList].corr())
データフレームの数値を丸める	df.round()
まとめてデータフレームの列名を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
データフレームの行名をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
データフレームの列がxの行を選択する	df[df[column] == x]
データフレームの列がxかつ列がx2である行を取り出す	df[(df[column] == x) & (df[column2] == x2)]
データフレームの列がx未満の行を抽出する	df[df[column] < x]
データフレームの列がx以上の行を取り出す	df[df[column] >= x]
データフレームの列がxより大きくx2より小さい行を選択する	df[(x < df[column]) & (df[column] < x2)]
データフレームの列がリストに含まれるデータを抽出する	df[df[column].isin(aList)]
データフレームのカラムの文字列で文字列が含まれる行を取り出す	df[df[column].str.contains(s)]
データフレームの列が文字列が含まれないデータを取り出す	df[not df[column].str.contains(s)]
データフレームの列が正規表現文字列にマッチする行を選択する	df[df[column].str.match(s)]
データフレームの列が文字列で始まるデータを選択する	df[df[column].str.startswith(s)]
データフレームの列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
データフレームのNaNが含まれる部分に	df.style.highlight_null()
破壊的にデータフレームのn行目を削除する	df.drop(n, axis=0, inplace=True)
データフレームのn行目をドロップして、インプレイスする	df.drop(n, axis=0, inplace=True)
表の列をドロップして、入れ替える	df.drop(column, axis=1, inplace=True)
データフレームの列の名前一覧で指定した列を消す	df.drop(columns, axis=1)
データフレームの中の欠損値を落とす	df.dropna()
データフレームで何行、重複するか見る	df.duplicated().sum()
データフレームの重複した行を抽出する	df[df.duplicated(keep=False)]
データフレームの内で列に重複があるか確認する	df.duplicated(subset=column)
データフレームの中で列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
データフレームから重複した行を消す	df.drop_duplicates()
データフレームから破壊的に重複を消す	df.drop_duplicates(inplace=True)
データフレームから破壊的に重複した行を消す	df.drop_duplicates(inplace=True)
データフレームから重複したデータを残さず削除する	df.drop_duplicates(keep=False)
列と列の重複をドロップする	df.drop_duplicates(subset=column)
データフレームの列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
データフレームの内の列と列に重複があれば、消す	df.drop_duplicates(subset=[column, column2])
dateStringを日付データにする	pd.to_datetime(dateString)
Pandasで、データフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col])
文字列を日付データにする	pd.to_datetime(s)
フォーマットでデータフレームのcollを日付データにする	pd.to_datetime(df[col], format='%Y-%m-%d')
Pandasでデータ列を書式で日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
Pandasで、フォーマットを用いて文字列をPandasの日付型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
Pandasで、書式fmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
フォーマットfmtを使ってデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format=fmt)
Pandasで書式fmtとして文字列をdatetime64型に変換する	pd.to_datetime(s, format=fmt)
Pandasでエポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
Pandasで、UNIX秒のデータ列からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
Pandasでエポック秒の文字列からdatetime64型に変換する	pd.to_datetime(s, unit='s', utc=True)
Pandasで、文字列のエポック秒からタイムスタンプに変換する	pd.to_datetime(s, unit='s', utc=True)
Pandasで、タイムスタンプ型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
日付データのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
Pandasでデータフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
Pandasで、データ列を日付データに変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームのカラムは何年か見る	df[col].dt.year
データフレームのカラムが何月か調べる	df[col].dt.month
データフレームのカラムは何時か確認する	df[col].dt.hour
データフレームのカラムは何分か確認する	df[col].dt.minute
データ列の分を使う	ds.dt.minute
データフレームのカラムの曜日の名前を使う	df[col].dt.weekday_name
データフレームのカラムの曜日が何日目か確認する	df[col].dt.dayofweek
表示可能な列数を増やす	pd.set_option('display.max_columns', n)
列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームを表示するとき、n列までデータフレームを表示されるようにする	pd.set_option('display.max_columns', n)
表示可能な行数を増やす	pd.set_option('display.max_rows', n)
最大行数をnに変更する	pd.set_option('display.max_rows', n)
データフレームを表示するとき、小数点以下の表示精度をn桁に指定する	pd.set_option('precision', n)
データフレームを表示するとき、小数点以下n桁まで表示されるようにする	pd.set_option('precision', n)
データフレームを表示するとき、ヘッダー行を左寄せに変更する	pd.set_option('colheader_justify', 'left')
エクセルファイルからデータフレームを読む	pd.read_excel(filename)
データフレームとしてファイルを読み込む	pd.read_excel(filename)
ファイルからエクセルファイルを読み込む	pd.read_excel(filename)
ファイルからn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
エクセルデータファイルのn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
エクセルデータファイルからnとn2のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
すべてのシートをファイルから読み込む	pd.read_excel(filename, sheet_name=None)
CSVをデータフレームとして読み込む	pd.read_csv(filename, sep=',')
TSVファイルをデータフレームとして読む	pd.read_csv(filename, sep='\t')
＜オプション＞シートの名前をnamesに設定する	sheet_name = names
＜オプション＞先頭の列をインデックスにする	index_col = 0
＜オプション＞先頭の行をヘッダに変更する	header = 0
＜オプション＞ヘッダを自動的な連番に指定する	header = None
CSVファイルTSVファイルをn番目のカラムを行として読み込む	pd.read_csv(filename, index_col=n)
文字列TSVからカンマ区切りのファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
TSVを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームを形式としてJSONLファイルに保存する	df.to_excel(filename)
データフレームをCSVとしてJSONLファイルに保存する	df.to_csv(filename)
JSONLファイルにデータフレームをタブ区切りで保存する	df.to_csv(filename, sep='\t')
データフレームをTSVファイルでJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
データフレームをJSONLファイルに行を付けずに保存する	df.to_csv(filename, index=None)
保存するCSVの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
データフレームを小数点以下3桁までJSONLファイルに保存する	df.to_csv(filename, float_format='%.3f')
データフレームを列の値によってまとめた表	df.groupby(column)
データフレームを2つのカラムで集約する	df.groupby(['A', 'B'])
二つの列の値によってデータフレームをまとめた表	df.groupby(['A', 'B'])
データフレームを列名リストの値でグループ化する	df.groupby(columns)
列名リストによってデータフレームをまとめたグループ	df.groupby(columns)
データフレームを関数でまとめた表を見る	df.groupby(関数)
データフレームを'A'列によってグループ化し、要約統計量を求める	df.groupby('A').describe()
二つの列の値でデータフレームをグループ化し、要約統計量を算出する	df.groupby(['A', 'B']).describe()
データフレームを複数の列の値によってグループ化し基本統計量を計算する	df.groupby(columns).describe()
表を関数の値でグループ化し基本統計量を求める	df.groupby(関数).describe()
NaNを含めて列の値でデータフレームをグループ分けする	df.groupby(column, dropna=False)
データフレームを列の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby(column)]
データフレームを'A'列によって分類して列挙する	[(name, group) for name, group in df.groupby('A')]
２つの列によってデータフレームをグループ分けし、、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームを列名リストの値によってグループ分けして、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームを関数によってグループ化し、列挙する	[(name, group) for name, group in df.groupby(関数)]
データフレームを各列毎に集計して、文字列というグループを見る	df.groupby(column).get_group(s)
列としてデータフレームをグループ化して、各グループごとの件数を知る	df.groupby(column).size()
データフレームを各列毎にグループ化して、文字列というグループの大きさを求める	df.groupby(column).size()[s]
データフレームのそれぞれのグループごとの合計を求める	df.groupby(column).sum()
データフレームを列によってグループ化して、合計を求める	df.groupby(column).sum()
データフレームを列によってグループ化してそれぞれのグループの平均値を求める	df.groupby(column).mean()
データフレームの各グループの個数	df.groupby(column).count()
データフレームを列で集計して、グループごとの個数を求める	df.groupby(column).count()
データフレームの各グループごとの最大値を求める	df.groupby(column).max()
データフレームを列の値によってグループ化し、、それぞれのグループごとの最大値を求める	df.groupby(column).max()
データフレームを列によってグループ分けし、、それぞれのグループ毎の最小値を算出する	df.groupby(column).min()
データフレームのそれぞれのグループごとの分散を計算する	df.groupby(column).var()
列によってデータフレームをグループ化して、グループごとの分散を算出する	df.groupby(column).var()
データフレームの各グループごとの標準偏差を算出する	df.groupby(column).std()
列にデータフレームをグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
データフレームを各列と列の組み合わせ毎にグループ化して最大値を計算する	df.groupby([column, column2], as_index=False).max()
データフレームを各列とカラムの組み合わせ毎に集約して、最小値を算出する	df.groupby([column, column2], as_index=False).min()
データフレームを各列と列の組み合わせ毎にグループ化して分散を求める	df.groupby([column, column2], as_index=False).var()
データフレームを各列と列の組み合わせ毎に集約し、、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
データフレームをグループ化し、それぞれの列に対し平均値を計算する	df.groupby(column)[column2].mean()
データフレームを各列毎にグループ化して列の平均値を求める	df.groupby(column)[column2].mean()
データフレームを各カラム毎にグループ化し、列の個数を求める	df.groupby(column)[column2].count()
データフレームをグループ化し列に対し最大値を求める	df.groupby(column)[column2].max()
データフレームを各列毎にグループ化し、、列の最大値を計算する	df.groupby(column)[column2].max()
データフレームをグループ化し各列に対し最小値を求める	df.groupby(column)[column2].min()
表データを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
データフレームをグループ化し列に対し分散を求める	df.groupby(column)[column2].var()
データフレームを各列毎に集約して、列の分散を計算する	df.groupby(column)[column2].var()
データフレームを各列毎にグループ化し、、列の標準偏差を求める	df.groupby(column)[column2].std()
列の各データ値の出現数を求める	ds.value_counts()
データ列のユニークな要素数を確認する	ds.nunique()
データフレームの列のユニークな要素数	df[col].nunique()
データフレームの列からユニークな要素を抽出しリスト化する	df[col].unique().tolist()
データ列を分割数nでビン分割する	pd.cut(ds, n)
データ列をn個にビニングする	pd.cut(ds, n)
データフレームの中の列をビン数nを用いてビン分割する	pd.cut(df[col], n)
等間隔でn個にデータフレームの中のカラムを分割する	pd.cut(df[col], n)
ビン数nでリストをビン分割する	pd.cut(aList, n)
等間隔でn個にリストをビンニングする	pd.cut(aList, n)
配列をビン数nを使ってビン分割する	pd.cut(aArray, n)
n個に等間隔で配列をビン分割する	pd.cut(aArray, n)
データ列をビン数nとしてビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
等間隔で列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームの中の列を分割数nでビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの中の列をn個にビンニングし、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ビン数nでリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
n個にリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
分割数nとして列を等量でビン分割する	pd.qcut(ds, n)
データ列をn個に等量で分割する	pd.qcut(ds, n)
データフレームの中のカラムを等しい量になるように分割数nとしてビン分割する	pd.qcut(df[col], n)
リストをビン数nとして等量でビニングする	pd.qcut(aList, n)
等量でリストをn個にビニングする	pd.qcut(aList, n)
配列を等量でビン数nとしてビン分割する	pd.qcut(aArray, n)
n個に配列を等量で分割する	pd.qcut(aArray, n)
データ列を分割する	pd.cut(ds, aList)
データ列をリストを境界値として分割する	pd.cut(ds, aList)
配列をリストを境界値として分割する	pd.cut(aArray, aList)
中央値でデータ列をビニングする	pd.qcut(ds, 2)
データフレームの中の列を中央値でビンニングする	pd.qcut(df[col], 2)
列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
四分位数ごとにデータフレームの中の列を分割する	pd.qcut(df[col], 4)
データフレームを'A'列でソートする	df.sort_values(by='A')
データフレームを二つの列によって整列する	df.sort_values(by=['A', 'B'])
複数の列を用いてデータフレームを並べ直す	df.sort_values(by=column)
'A'列によってデータフレームを昇順にソートする	df.sort_values(by='A', ascending=True)
昇順にデータフレームを'A'列と'B'列でソートする	df.sort_values(by=['A', 'B'], ascending=True)
データフレームを列名リストによって昇順にソートする	df.sort_values(by=column, ascending=True)
表データを列によってで大きい順に整列する	df.sort_values(by=column, ascending=False)
降順にデータフレームを'A'列によってによってソートする	df.sort_values(by='A', ascending=False)
データフレームを二つの列によってで降順に並べる	df.sort_values(by=['A', 'B'], ascending=False)
降順に列名リストを用いてでデータフレームをソートする	df.sort_values(by=column, ascending=False)
列でデータフレームをソートして更新する	df.sort_values(by=column, inplace=True)
列ででデータフレームを破壊的に並べ直す	df.sort_values(by=column, inplace=True)
データフレームを'A'列によってで破壊的にソートする	df.sort_values(by='A', inplace=True)
２つの列によってデータフレームを整列して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
表を２つの列でで破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
複数の列を用いてデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
データフレームを列名リストを用いてで破壊的に並べる	df.sort_values(by=column, inplace=True)
データフレームを列によって小さい順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
破壊的に小さい順に列を用いてデータフレームをソートする	df.sort_values(by=column, ascending=True, inplace=True)
昇順に'A'列を用いてデータフレームをソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームを'A'列によって昇順に破壊的に整列する	df.sort_values(by='A', ascending=True, inplace=True)
二つの列によって昇順にデータフレームを並べ直し、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
表を二つの列で昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
昇順に複数の列を用いてデータフレームを整列して、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを列名リストを用いて小さい順に破壊的に整列する	df.sort_values(by=column, ascending=True, inplace=True)
降順にデータフレームを破壊的に列で並べる	df.sort_values(by=column, ascending=False, inplace=True)
データフレームを'A'列によって大きい順に破壊的に並べ直す	df.sort_values(by='A', ascending=False, inplace=True)
データフレームを'A'列と'B'列によって大きい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームを複数の列で降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームを列によって並べ直し、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
'A'列によってデータフレームをソートし、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
二つの列によってデータフレームを並べてNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
データフレームを列名リストで並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
列を用いてデータフレームをソートして、上位n件を取り出す	df.sort_values(columns).head(n)
データフレームを列によって並べて、下の方n件を取り出す	df.sort_values(columns).tail(n)
データフレームを列によってソートし、新しいインデックスを加える	df.sort_values(columns).reset_index()
表を行によってソートする	df.sort_index()
データフレーム全体を行によって小さい順にソートする	df.sort_index(ascending=True)
データフレーム全体をインデックスで降順で整列する	df.sort_index(ascending=False)
等差数列から整数乱数を発生させる	random.randrange(start, end, step)
疑似乱数を得る	random.random()
最大値・最小値の範囲で一様な乱数	random.uniform(最小値, 最大値)
正規分布で疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
列からひとつランダムに選ぶ	random.choice(iterable)
アルファベットから一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
列から複数個ランダムに選ぶ	random.choices(iterable, k=n)
配列からn個、サンプリングする	random.sample(iterable, k=n)
イテラブルから重複なくn要素ランダムに選ぶ	random.sample(iterable, k=n)
事前にASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
あらかじめ複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
大文字・小文字を無視して文字列の先頭でパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
文字列の中でASCII限定として正規表現にマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
文字列の中の大文字・小文字を無視してパターンによるマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
文字列の中でケースを無視して正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
文字列の中の複数行対応として正規表現による全マッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
文字列の中で複数行対応として正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
正規表現によって文字列を置換する	re.sub(pattern, newsub, s)
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
列の集合を使う	set(iterable)
イテラブルの要素を全てセットに追加する	aSet.update(iterable)
イテラブルを集合に追加更新する	aSet.update(iterable)
集合から要素を除く	aSet.remove(element)
集合から別の集合の要素を除く	aSet.difference_update(aSet2)
セットから任意の要素を取り除く	aSet.pop()
ふたつの集合の∩を求める	aSet.intersection(aSet2)
ふたつの集合の対称差集合を使う	aSet.symmetric_difference(aSet2)
要素が集合の要素か調べる	element in aSet
要素が集合に含まれる	element in aSet
値が集合のメンバーに含まれないかどうか	element not in aSet
値がセットに含まれない	element not in aSet
サブセット	aSet.issubset(aSet2)
集合のすべての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
真サブセットかどうか確認する	aSet < aSet2
上位集合か	aSet.issuperset(aSet2)
二つの関係が真スーパーセットか調べる	aSet > aSet2
スーパーセットもしくは等しいかどうか判定する	aSet > aSet2
ふたつの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
二つの集合がセットと交わりを持たないか調べる	aSet.isdisjoint(aSet2)
セットが空集合か調べる	len(aSet) == 0
集合が空集合でないか確認する	len(aSet) != 0
セットをイミュータブルに変換する	frozenset(aSet)
空白を求める	' '
アルファベットを使う	string.ascii_letters
英字の小文字を全部求める	string.ascii_lowercase
アルファベットの大文字を全部求める	string.ascii_uppercase
八進数字を全て使う	string.octdigits
句読点文字を見る	string.punctuation
印字可能な文字を使う	string.printable
空白文字を使う	string.whitespace
文字列を空白で分割し、、文字列リストに変換する	s.split()
空白で文字列を区切って、整数のリストに変換する	map(int, s.split())
文字列をセパレータで区切って、文字列リストにする	s.split(sub)
文字列を区切りによって区切る	s.split(sub)
文字列をカンマで分割して文字列リストに変換する	s.split(',')
文字列をカンマによって分割して、列挙する	s.split(',')
コロンで文字列を分割して、文字列リストにする	s.split(':')
コロンで文字列を区切り、列挙する	s.split(':')
文字列を区切り記号で区切って文字列リストに変換する	s.split(sep)
区切り記号で文字列を区切り、列挙する	s.split(sep)
文字列を末尾から空白で分割する	s.rsplit()
文字列を最後から部分文字列で区切る	s.rsplit(sub)
文字列を最初の部分文字列で二つに分ける	s.partition(sub)
文字列を最後の部分文字列を用いて二分割する	s.rpartition(sub)
部分文字列で文字列を二分し前半の文字列を使う	s.partition(sub)[0]
最初の部分文字列で文字列を分けたときの最初の文字列	s.partition(sub)[0]
文字列を部分文字列で分けたときの後半の文字列を取り出す	s.partition(sub)[-1]
文字列を最後の部分文字列で二分し前半の文字列を使う	s.rpartition(sub)[0]
文字列を最後の部分文字列で分けたときの前半の文字列を使う	s.rpartition(sub)[0]
文字列を最後の部分文字列で二分し、残りの文字列を求める	s.rpartition(sub)[-1]
文字列を最後の部分文字列で分けたときの後半の文字列を取り出す	s.rpartition(sub)[-1]
文字列を別の文字列で置き換える	s.replace(sub, newsub)
文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub)
回数を制限して文字列を置換する	s.replace(sub, newsub, n)
文字列中の部分文字列を回数を制限して別の文字列に置き換える	s.replace(sub, newsub, n)
文字列の両端から空白を除く	s.strip()
文字列の先頭から空白を消す	s.lstrip()
文字列の右側から部分文字列を除去する	s.rstrip(sub)
文字列の最後から改行を消す	s.rstrip('\n')
文字列が文字列リストに存在するか判定する	s in aStringList
部分文字列が文字列中に含まれるか	sub in s
文字列中に部分文字列が含まれない	sub not in s
文字列の左側から部分文字列を探す	s.find(sub)
部分文字列が文字列の開始位置以降に含まれる	s.find(sub, start) != -1
文字列の開始位置以降に部分文字列がない	s.find(sub, start) == -1
文字列の終了位置以前に部分文字列があるか調べる	s.find(sub, 0, end) != -1
部分文字列が文字列の終了位置より前に含まれないかどうか調べる	s.find(sub, 0, end) == -1
文字列の開始位置と終了位置の間に部分文字列が含まれるか	s.find(sub, start, end) != -1
文字列の開始位置からと終了位置の間に部分文字列があるか調べる	s.find(sub, start, end) != -1
部分文字列が文字列の開始位置からと終了位置までの間に含まれないか調べる	s.find(sub, start, end) == -1
文字列の最後から部分文字列を見つける	s.rfind(sub)
文字列リストをつなげるひとつの文字列にする	''.join(aStringList)
イテラブルを文字列に変換して結合する	''.join(map(str, iterable))
文字列リストをつなげる一つの文字列にする	''.join(map(str, iterable))
列を文字列リストに変換して空白で連結する	' '.join(map(str, iterable))
イテラブルを文字列リストに変換して、カンマによってつなげる	','.join(map(str, iterable))
イテラブルを文字列リストに変換して、タブによって結合する	'\t'.join(map(str, iterable))
イテラブルを文字列リストに変換して、'改行によって連結する	'\n'.join(map(str, iterable))
文字列中の部分文字列の出現	s.count(sub)
文字列の開始位置から終了位置の間で部分文字列をカウントする	s.count(sub, start, end)
部分文字列が部分文字列で始まるかどうか	s.startswith(sub)
文字列のプレフィックスは部分文字列か調べる	s.startswith(sub)
文字列の接尾辞が部分文字列かどうか調べる	s.endswith(sub)
エラーなく文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
安全に文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
文字列が全て小文字かどうか調べる	s.islower()
文字列が英数字かどうか調べる	s.isalnum()
文字列がアスキー文字か調べる	s.isascii()
文字列は全て数値かどうか	s.isnumeric()
文字列内にひとつでも大文字がある	any(c.isupper() for c in s)
文字列内にひとつでも小文字が含まれるか	any(c.islower() for c in s)
文字列内に数字が含まれるか調べる	any(c.isdigit() for c in s)
文字列内にひとつでも英字が含まれる	any(c.isalpha() for c in s)
文字列内に英数字が含まれるか調べる	any(c.isalnum() for c in s)
文字列内にひとつでも空白が含まれるか確認する	any(c.isspace() for c in s)
文字列内にASCII文字が含まれるか判定する	any(c.isascii() for c in s)
ひとつでも非小文字が文字列中に含まれるか調べる	any(not c.islower() for c in s)
非数字が文字列中に含まれるか調べる	any(not c.isdigit() for c in s)
文字列中にひとつでも非アルファベットが含まれるかどうか調べる	any(not c.isalpha() for c in s)
文字列中にひとつでも非英数字が含まれるかどうか調べる	any(not c.isalnum() for c in s)
文字列中にひとつでも非空白が含まれるか	any(not c.isspace() for c in s)
文字列中に非ASCII文字があるか	any(not c.isascii() for c in s)
文字列は全て識別子名か確認する	s.isidentifier()
文字列はPythonのキーワードかどうか判定する	keyword.iskeyword(s)
文字列が全て印字できるかどうか	s.isprintable()
文字列はタイトルケースか確認する	s.istitle()
ASCIIコードエスケープで文字列をバイト列にする	s.encode(encoding='unicode_escape')
文字列を文字コードを用いてバイト列にする	s.encode(encoding=encoding)
書式をargsを引数として文字列整形する	formatText.format(*args)
文字列の先頭を使う	s[0]
二つの文字列が等しくないか確認する	s != s2
辞書順で二つの文字列を比較する	s < s2
文字列は文字列より辞書順で前か調べる	s < s2
文字列が文字列より辞書順で後	s > s2
文字列がカタカナか	('ァ' <= ch <= 'ン')
文字列が平仮名	('ぁ' <= ch <= 'ん')
文字列は漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
文字列の片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
文字列の平仮名を片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
代数計算モジュールを使う	import sympy
文字列を記号化して、変数にする	z = sympy.Symbol(s)
変数が0に近づくときの数式の極限値を計算する	sympy.limit(e, z, 0)
パラメータが無限大に近づく時の数式の極限値を求める	sympy.limit(e, z, oo)
変数がマイナス無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, -oo)
パラメータについて数式の積分を求める	sympy.integrate(e, z)
数値の数値を求める	float(e)
プラットホームの名前を調べる	sys.platform
プラットホームがマック	sys.platform.startswith('darwin')
環境がWindowsかどうか	sys.platform.startswith('win32')
スクリプトの名前を確認する	sys.argv[0]
第二引数で指定したファイル名	sys.argv[1]
ディレクトリをモジュールを検索するパスに追加する	sys.path.append(dir)
ロードされたモジュールの一覧を確める	sys.modules
標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
オプションで出力先を標準エラーに設定する	file = sys.stderr
標準入力から1行だけ改行なしに読む	sys.stdin.readline().rstrip()
プログラムの実行を即座に止める	sys.exit()

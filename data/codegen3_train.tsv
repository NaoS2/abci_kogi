書き込みできるように文字列の示す文字コードでファイルをオープンする]	open(filepath, mode='w', encoding=s)
線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
option: 右三角マーカーを使用する	marker = '>'
散布図の▽マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの列の中に文字列が存在するか調べる	df[col].isin([value])
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
表データのn行までを抽出する	df[:n]
option: グラフの色をデピンクに設定する	color = 'deeppink'
ブルーバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
データフレームを十の位で丸めて整数にする	df.round(-1).astype(int)
option: フォントの色をコーンフラワーブルーに指定する	color = 'cornflowerblue'
整数nの十六進文字列	hex(n)[2:]
文字列全体が正規表現に複数行対応としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームを列名リストを用いて降順に破壊的に並べる	df.sort_values(by=column, ascending=False, inplace=True)
散布図に青い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
辞書にキーが存在しているいる	key not in aDict
データフレームの中で列と列の重複を削除する	df.drop_duplicates(subset=column)
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
option: バイナリモードを使う	mode = 'rb'
データフレームの列がxより大きくx2より少ない行を抽出する	df[(x < df[column]) & (df[column] < x2)]
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
グラフのx軸とy軸の比率を同じする	plt.axis('equals')
year年をタイムスタンプに変換する	datetime.datetime(year=year, month=1, day=1)
option: グラフの色をダークグリーンに指定する	color = 'darkgreen'
本日は何月か知る	datetime.datetime.today().month
青い大バツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームを列によって分類して、それぞれのグループの最大値を計算する	df.groupby(column).max()
データ列の中の未入力値の合計を数える	ds.isna().sum()
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
nをn2だけ増加させる	n += n2
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
タプルをn回、接続する	aTuple * n
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
option: スラグレー色を用いる	color = 'slategray'
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
散布図のポイントマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
option: グラフの色をミッドナイトブルーに指定する	color = 'midnightblue'
option: セパレータを文字列にする	sep = s
線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
アルファベットの文字列	string.ascii_letters
線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
縦軸の目盛りに文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
データ列をヒストグラムにする	plt.hist(データ列)
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
赤色で文字列を出力する	print(f'\033[31m{value}\033[0m')
nがn2以下または、n3以上	n <= n2 or n >= n3
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
アンティークホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
文字列が全て小文字か	s.islower()
オブジェクトが名前付きタプルかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
二数の最小値	min(x, y)
option: ミディアムブルー色を使う	color = 'mediumblue'
データ列を等量でビン数nで分割する	pd.qcut(ds, n)
折れ線グラフをスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='skyblue')
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightgreen')
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
nが3で割り切れるかどうか調べる	n % 3 == 0
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
データフレームを2つの列によって並べ直して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
現在の再帰の最大回数	sys.getrecursionlimit()
補足を加える	plt.legend(['凡例A', '凡例B'])
ナバホホワイト色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
データフレームの中で列と列に重複があるか見る	df.duplicated(subset=[column, column2])
折れ線グラフを半透明の一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
リストを引数として展開して出力する	print(*aList)
リストとリストの散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
Pandasで、文字列のUNIX秒からタイムスタンプ型にする	pd.to_datetime(s, unit='s', utc=True)
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
二つの列でデータフレームを並べ直して、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
カデットブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
option: フォントの色をパパイヤウィップに設定する	color = 'papayawhip'
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
データフレームを列によって小さい順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームのリストカラムのどの値が最も現れるか見る	df[aList].mode()
ファイルからの入力ストリームを求める	open(filepath)
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
ヒストグラムをスプリンググリーン色を使って描画する	plt.hist(データ列, color='springgreen')
配列を等量でビン数nとしてビン分割する	pd.qcut(aArray, n)
縦棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
回帰分析をKNNで行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
リストと配列について散布図をプロットして、マーカーを大バツに変更する	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムをダークバイオレット色として描画する	plt.hist(データ列, color='darkviolet')
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
データフレームのリスト列の欠損値をxで埋める	df[aList].fillna(x)
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
ヒストグラムの色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
データフレームの列を目的変数にする	目的変数 = df['列名']
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
タプルをn回連結する	aTuple * n
nがn2	n == n2
昇順にデータフレームを'A'列によってソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフの大バツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
イテラブルを配列に変換する	np.array(iterable)
ヒストグラムをミディアムバイオレットレッド色として描画する	plt.hist(データ列, color='mediumvioletred')
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: 符号なし８ビット整数型を用いる	dtype = np.uint8
実数を実数で割った余り	x % y
ピーチパフ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
関数でデータフレームをまとめたグループを見る	df.groupby(関数)
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図をコーラル色として描画する	plt.scatter(データ列x, データ列y, color='coral')
ミディアムシアグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
文字列が文字列リストのいづれ	s in aStringList
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
option: 色をレベッカパープルにセットする	color = 'rebeccapurple'
ライムグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
タプルを反転する	reversed(aTuple)
データフレームのカラムの日を見る	df[col].dt.day
option: マゼンタ色を使う	color = 'magenta'
改行なしに二つの文字列をプリントする	print(value, value2, end='')
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
配列と配列についての散布図に黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
横棒グラフを茶色色を用いて描画する	plt.barh(データ列x, データ列y, color='brown')
option: ベージュを使う	color = 'beige'
カラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
option: 文字列の示すエンコーディングを使用する	encoding = s
データフレームの列がリストに含まれるデータを取り出す	df[df[column].isin(aList)]
データ列のNaNをxで補う	ds.fillna(x)
ヒストグラムをライトサーモン色として描画する	plt.hist(データ列, color='lightsalmon')
実線にヒストグラムを変更する	plt.hist(データ列, linestyle='solid')
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
データフレームの列をダミー変数にする	pd.get_dummies(df[column])
option: スチールブルーにフォントの色を設定する	color = 'steelblue'
バイアスなしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
横棒グラフをシーグリーン色として描画する	plt.barh(データ列x, データ列y, color='seagreen')
ダークシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
option: グラフの色をグリーンに設定する	color = 'green'
散布図のバツ印を赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
棒グラフをグリーンイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='greenyellow')
リストを縦軸、リストを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
書き込み用に文字列の示すエンコーディングでファイルパスをオープンする]	open(filepath, mode='w', encoding=s)
option: 小麦色を用いる	color = 'wheat'
option: マーカーの線幅を変更する	markeredgewidth = 2.5
線グラフの色をドジャーブルーにセットする	plt.plot(データ列x, データ列y, color='dodgerblue')
折れ線グラフの三角印の色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
データフレームのカラムは何秒か確認する	df[col].dt.second
散布図を赤い三角マーカーで描く	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームの空文字を未入力値に変換し、ドロップする	df.replace('', np.nan).dropna()
文字列の文字数	len(s)
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
アクア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
耐火レンガ色でヒストグラムを描画する	plt.hist(データ列, color='firebrick')
オブジェクトは数値かどうか調べる	isinstance(obj, (int,float))
大量のデータ列が正規分布か仮説検定する	scipy.stats.kstest(データ列, 'norm')
線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
散布図をライムグリーン色として描画する	plt.scatter(データ列x, データ列y, color='limegreen')
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
データフレームの列の歪度	df[col].kurt()
ダークオレンジにヒストグラムの色をする	plt.hist(データ列, color='darkorange')
日付時刻データは何日か知る	aDatetime.day
データ列の変遷を青い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
イテラブルを2回あわせたデカルト積	itertools.product(iterable, repeat=2)
辞書にタプルの項目を更新する	aDict.update(aDict2)
変数が無限大に近づく場合の数値の極限値を計算する	sympy.limit(e, z, oo)
ラインを赤い破線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
列によって昇順に破壊的にデータフレームを整列する	df.sort_values(by=column, ascending=True, inplace=True)
散布図のマーカーの太さを変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
折れ線グラフに四角印を使う	plt.plot(データ列x, データ列y, marker='s')
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
ミディアムスプリンググリーン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
option: 書き込みモードを用いる	mode = 'w'
文字列の右端から空白を消す	s.rstrip()
黒い星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
２つの文字列を順にプリントする	print(value, value2)
ライトスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
バギングで回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
散布図をダークターコイズ色を使って描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
数列とリストについて散布図を描いて、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
配列と配列についての散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
双方向キューのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
option: ダークゴールデンロッドにグラフの色を設定する	color = 'darkgoldenrod'
エクセルデータファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
option: ブランチドアーモンドにグラフの色をセットする	color = 'blanchedalmond'
最大最小で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
アンティークホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
データフレームのカラムの中に含まれる文字列との合計を数える	df[col].isin([value, value2]).sum()
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
印字可能な文字を全て使う	string.printable
イエローグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
散布図を四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフをダーク・スラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
プログラムを異常終了する	sys.exit(1)
二つのリストから辞書	dict(zip(aList, aList2))
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
散布図に黒い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
列の値でNaNを含めてデータフレームをグループ化する	df.groupby(column, dropna=False)
散布図のクロスマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
配列の列ごとの合計値を計算する	np.sum(aArray, axis=0)
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
横軸の目盛に文字列を設定する	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
SDGで回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
日付時刻データは日付時刻データよりあと	aDatetime > aDatetime2
両端キューの末尾に値を付け加える	deq.append(element)
option: 改行コードをWindowsに設定する	newline = '\r\n'
列を双方向キューに変換する	collections.deque(iterable)
縦棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
変数を太文字にする	f'\033[1m{value}\033[0m'
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
データフレームの文字列を欠損値にする	df.replace(s, np.nan)
グラフをデフォルトでいい感じに設定する	sns.set()
option: グラフの色をミディアムスプリンググリーンに指定する	color = 'mediumspringgreen'
行列の差	aArray - aArray2
データ列とリストについて散布図を描いて、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
乱数生成系列をnで固定する	random.seed(n)
データフレームのリスト列の欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
nの16進文字列	hex(n)[2:]
両端キューのstart〜endの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
y座標だけグリッド線	plt.grid(axis='y')
二つの列でデータフレームをソートする	df.sort_values(by=['A', 'B'])
トマト色としてヒストグラムを描画する	plt.hist(データ列, color='tomato')
データ列をn個に等量でビン分割する	pd.qcut(ds, n)
横棒グラフをペールグリーン色として描画する	plt.barh(データ列x, データ列y, color='palegreen')
数式を微分する	sympy.diff(e)
全要素を０で初期化した行列	np.zeros(行数, 列数)
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
option: ロイヤルブルーにグラフの色を指定する	color = 'royalblue'
option: フォントの色をダークオレンジに設定する	color = 'darkorange'
ダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D')
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
散布図をマゼンタ色を用いて描画する	plt.scatter(データ列x, データ列y, color='magenta')
横棒グラフをオリベドラブ色として描画する	plt.barh(データ列x, データ列y, color='olivedrab')
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: ミントクリーム色を用いる	color = 'mintcream'
データフレームの中の列をn個に等間隔でビンニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
グラフの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
データをL2ノルムを使って正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
データフレームの値が欠損値かどうか調べる	df.isna()
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
データフレームの列の値がx以下の行を抽出する	df[df[column] <= x]
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
プラットホームがLinuxか	sys.platform.startswith('linux')
ファイルパスを書き込みできるようにオープンする]	open(filepath, mode='w')
option: フォントの色をディープスカイブルーに指定する	color = 'deepskyblue'
floatの最小値	sys.float_info.min
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
option: パレットトルコイズ色を使う	color = 'paleturquoise'
ベクトルの最小値を計算する	np.min(aArray)
グリッド線	plt.grid(color='#800080')
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
円グラフでデータ列のパーセントを作図する	plt.pie(データ列, startangle=90)
日付データが月曜日か	aDate.weekday() == 0
縦棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
小麦色色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
原点から(小数点数,y)の距離	math.hypot(x, y)
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategray')
データフレームのカラムと列の相関行列スピアマンを使って	df[[column, column2]].corr(method='spearman')
三自然数の最大公約数	math.gcd(n, n2, n3)
データフレームの中の列をリストを境界値として分割する	pd.cut(df[col], aList)
イテラブルの変遷を色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
日付データにn日分、加える	aDate + datetime.timedelta(days=n)
浮動小数点数の最大値を計算する	sys.float_info.max
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
新しいヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
グラフを画面に設定する	sns.set(context='notebook')
option: 大バツ印を使う	marker = 'X'
データフレームの平均値を計算する	df.mean()
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
多次元尺度構成法の準備をする	model = sklearn.manifold.MSD(n_components=n)
バリーウッド色でヒストグラムを描画する	plt.hist(データ列, color='burlywood')
空白文字を全て求める	string.whitespace
データフレームのn行目より前取り出す	df[:n]
option: 色を赤に設定する	color = 'red'
アクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
赤い実線としてデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
データフレームのリストカラムの中に文字列と日付データがあるか確認する	df[aList].isin([value, value2])
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
双方向キューをポップする	deq.pop()
赤い点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
折れ線グラフをシーグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='seagreen')
確率的勾配降下として回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
辞書からキーの値をエラーなく得る	aDict.get(key, None)
自然対数の底を使用する	math.e
option: ピーチパフ色を使用する	color = 'peachpuff'
nが1、もしくは2かどうか	n == 1 or n == 2
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
文字列をキャピタライズする	s.capitalize()
３つの文字列を順にプリントする	print(value, value2, value3)
青い一点鎖線として数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: ライトサーモンにフォントの色を指定する	color = 'lightsalmon'
散布図をダークカーキ色として描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
ヒストグラムをチョコレート色を使って描画する	plt.hist(データ列, color='chocolate')
スタッキングを用いてクラス分類を行う	sklearn.ensemble.StackingClassifier()
プラム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
ライトイエロー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
option: スラグレーを用いる	color = 'slategray'
文字列を最後の部分文字列で二分し、残りの文字列を使う	s.rpartition(sub)[-1]
データフレームの値は欠損値かどうか調べる	df.isna()
データフレームを各列毎に集計して列の最小値を算出する	df.groupby(column)[column2].min()
データ列の未入力値を最小値に設定する	ds.fillna(ds.min())
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
カラムの空文字をドロップする	ds.replace('', np.nan).dropna()
シャルトリューズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
列をキーにして二つのデータフレームを全ジョインする	pd.merge(df, df2, on=column, how='outer')
option: データ型として複素数型を使う	dtype = bool
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='gray')
ヒストグラムをライトゴールドロディイエロー色を使って描画する	plt.hist(データ列, color='lightgoldenrodyellow')
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
option: データ型を指定する	dtype = np.int16
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
option: 濃いシアン色を使う	color = 'darkcyan'
文字列が全て空白文字からなるか調べる	s.isspace()
サーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
区切りで文字列を分割して、文字列リストに変換する	s.split(sep)
シアン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
散布図をプラム色を用いて描画する	plt.scatter(データ列x, データ列y, color='plum')
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
リストをタプルにする	tuple(aList)
散布図をrgbのポイントマーカーとして描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
横棒グラフをフォレストグリーン色として描画する	plt.barh(データ列x, データ列y, color='forestgreen')
データフレームをグループ化しそれぞれの列に対し合計を計算する	df.groupby(column)[column2].sum()
リストとイテラブルについて散布図を描いて、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
二つのデータフレームを列'A'と列'B'をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
線グラフをピンク色として描画する	plt.plot(データ列x, データ列y, color='pink')
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategrey')
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
ターコイズ色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
ターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
実数の双曲線余弦を求める	math.cosh(x)
データフレームの欠損値を平均値に変更する	df.fillna(df.mean())
折れ線グラフの色をロイヤルブルーに変更する	plt.plot(データ列x, データ列y, color='royalblue')
線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
ヒストグラムの色をパールバイオレットレッドに指定する	plt.hist(データ列, color='palevioletred')
貝殻色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
散布図に青いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
option: グラフの色をハニーデューに指定する	color = 'honeydew'
縦棒グラフをミディアムシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
淡いピンク色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
TSVからデータフレームを読む	pd.read_csv(filename, sep='\t')
option: ダークシアグリーンにフォントの色を設定する	color = 'darkseagreen'
データフレームを'A'列によってまとめたグループ	df.groupby('A')
折れ線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
散布図のポイント印を黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
イテラブルと配列についての散布図に黒い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='k')
線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
option: シアン色を使う	color = 'cyan'
棒グラフをフォレストグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='forestgreen')
オブジェクトひとつのタプルを作る	(element,)
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
黒いポイントマーカーをデータ列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
データ列の中にいくつ日付データが存在するかカウントする	ds.isin([value]).sum()
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
辞書の項目を列挙する	aDict.values()
データフレームのリストカラムの値を正規表現patternで一度に変更する	df[aList].replace(pattern, repl, regex=True)
関数でデータフレームをまとめた表	df.groupby(関数)
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
モカシン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
折れ線グラフのポイントマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
リストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
rgbの下三角マーカーをイテラブルとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
データ列のNaNを後の行の値に設定する	ds.fillna(method='bfill')
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
スクリプトの名前を知る	sys.argv[0]
データフレームのカラムの中に文字列と文字列が存在するか調べる	df[col].isin([value, value2])
文字列をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
降順に列によってでデータフレームをソートする	df.sort_values(by=column, ascending=False)
データフレームのn行目より前抽出する	df[:n]
インディゴ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
rgbに横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
t-SNEで多次元データをパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
option: マゼンタを使う	color = 'magenta'
値を緑色でプリントする	print(f'\033[32m{value}\033[0m')
平均と標準偏差から疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
データフレームのカラムのNaNをモードで置換する	df[col].fillna(df[col].mode().iloc[0])
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
アルファベットの小文字を全部求める	string.ascii_lowercase
線グラフの色をカーキに変更する	plt.plot(データ列x, データ列y, color='khaki')
nをn2でわる	n / n2
文字列が英数字かどうか	s.isalnum()
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
日付データにn時間を加算する	aDate + datetime.timedelta(hours=n)
データフレームをJSONLファイルにインデックスを付けずに書き込む	df.to_csv(filename, index=None)
ポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
文字列が漢字かどうか調べる	('\u4E00' <= ch <= '\u9FD0')
真上位集合	aSet > aSet2
データフレームを列によって昇順に整列して、更新する	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムをライム色として描画する	plt.hist(データ列, color='lime')
パーセプトロンを用いてクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
データフレームのリストカラムの欠損値を平均で置換する	df[aList].fillna(df[aList].mean())
リストと配列について散布図を描画し、、マーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
文字列が文字列リストにあるか調べる	s in aStringList
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
マッピングのキーを列挙する	list(aDict)
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
単位行列	np.eye(行数, 列数)
プラットフォームの符号付き整数の最大値	sys.maxsize
eの乗数を算出する	math.exp(x)
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
グラフの色を濃くする	sns.set(pallete='deep')
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
散布図をミディアムオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
option: クリムゾンを使う	color = 'crimson'
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
二つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
ヒストグラムをライトスレイグレー色を用いて描画する	plt.hist(データ列, color='lightslategray')
浮動小数点数の双曲線正弦	math.sinh(x)
nが1、もしくは2もしくは3に等しいかどうか調べる	n == 1 or n == 2 or n == 3
折れ線グラフをドジャーブルー色として描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
オレンジ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
集合から要素を取り除く	aSet.remove(element)
データフレームを各列毎にグループ化して列の分散を算出する	df.groupby(column)[column2].var()
両端キューに文字列をプッシュする	deq.append(element)
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
ヒストグラムを実線にセットする	plt.hist(データ列, linestyle='solid')
ビン数nを使って等量で配列をビン分割する	pd.qcut(aArray, n)
散布図をモカシン色として描画する	plt.scatter(データ列x, データ列y, color='moccasin')
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
データフレームのリストカラムをValueMapでまとめて置換する	df[aList].replace(ValueMap)
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
折れ線グラフの丸印の線幅を指定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
辞書を空にする	aDict.clear()
option: 欠損値を先頭に来るようにする	na_position = 'first'
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
目盛り線	plt.grid(alpha=0.5)
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
データフレームのカラム概要	df.info()
ファイルをバイナリ用にオープンして]、fとする	f = open(filepath, mode='rb')
部分文字列が文字列中に含まれる	sub in s
xとyの商と余りを同時に求める	divmod(x, y)
折れ線グラフの菱形マーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
箱ヒゲ図を描画し、、平均値を追加する	plt.boxplot(データ列, showmeans=True)
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
散布図の大バツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgray')
L2ノルムとしてデータを正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
スチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='steelblue')
option: 色をライトスレイグレーに指定する	color = 'lightslategrey'
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームからカテゴリデータの列名の一覧	df.select_dtypes('object').columns
文字列を空白で区切って、文字列リストに変換する	s.split()
縦棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
イエローグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
ファイルのディレクトリ名	os.path.dirname(filepath)
要素は集合のメンバー	element in aSet
オブジェクトのフィールドの値	getattr(obj, プロパティ名)
nプラスn2	n + n2
閾値でデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
プロットに鉛直方向の点線を設定する	plt.axvline(x=0, linestyle='dotted')
縦棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
リストとリストの散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
文字列の先頭から部分文字列を見つける	s.find(sub)
作画のx軸とy軸の比率を同じする	plt.axis('equals')
文字列が文字列リストに存在するかどうか調べる	s in aStringList
変数を青色にする	f'\033[34m{value}\033[0m'
濃いシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
option: 印をバツに変更する	marker = 'x'
最小値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(df[aList].min())
ふたつの集合が互いに素か	aSet.isdisjoint(aSet2)
文字列を部分文字列で二つに区切って、前半の文字列を使う	s.partition(sub)[0]
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
データフレームのカラムが何年か調べる	df[col].dt.year
nにn2をかける	n * n2
option: グラフの色をインディゴに設定する	color = 'indigo'
文字列中にひとつでも非空白が含まれるかどうか調べる	any(not c.isspace() for c in s)
実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
実数で浮動小数点数を除する	x / y
グラフ中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
リストをビン数nを用いてビン分割する	pd.cut(aList, n)
縦棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
データフレームのカラムの要約統計量	df[col].describe()
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
option: グラフの色をビスクに設定する	color = 'bisque'
まとめてデータフレームの列の名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
option: 色をゴーストホワイトに設定する	color = 'ghostwhite'
option: バツマーカーを描画する	marker = 'x'
nから無限にカウントアップする	itertools.count(start=n)
option: 改行コードをUNIXに設定する	newline = '\n'
ヒストグラムの色をベージュにする	plt.hist(データ列, color='beige')
データフレームのインデックスを振り直す	df.reset_index()
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategray')
データ列が何秒か見る	ds.dt.second
出力ストリームにxを文字列にして書き込む	f.write(str(x))
ピンク色を用いてヒストグラムを描画する	plt.hist(データ列, color='pink')
カテゴリで色分けして、に箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
行列の列ごとの標準偏差	np.std(aArray, axis=0)
線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
散布図に赤いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
'A'列と'B'列によってによってデータフレームを降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
プラム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
キーが辞書に存在しているか判定する	key in aDict
グラフの用途を論文に設定する	sns.set(context='paper')
日付時刻データが何時か知る	aDatetime.hour
スプリンググリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
正規分布の累積分布関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ミッドナイトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
表データの列リストを見る	df.info()
セットの濃度	len(aSet)
タプルをnからナンバリングする	enumerate(aTuple, start=n)
折れ線グラフの色をローングリーンに指定する	plt.plot(データ列x, データ列y, color='lawngreen')
行列の転置行列	aArray.T
ケースを無視して文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームのリスト列を10の位で丸める	df[aList].round(-1)
行列のムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
カラムの値をまとめてreplに正規表現で置き換える	ds.replace(pattern, repl, regex=True)
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
文字列を部分文字列で区切る	s.split(sub)
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
プロットで使うフォントを指定する	sns.set(font=フォント名)
文字列を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
クラス分類をバギングで行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
折れ線グラフの印を四角にする	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムを紺色として描画する	plt.hist(データ列, color='darkblue')
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
イテラブルから両端キューを作る	collections.deque(iterable)
データフレームから列を三つのみ選択する	df[[column, column2, column3]]
再帰の上限を増やす	sys.setrecursionlimit(1000000)
データフレームの累積分布を描く	sns.ecdfplot(x='列名', data=df)
自然数の階乗を求める	math.factorial(n)
データフレームの列が文字列が含まれない行を取り出す	df[not df[column].str.contains(s)]
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
データフレームの文字列をNaNに変換する	df.replace(s, np.nan)
配列から重複を除いた配列を作成する	np.unique(aArray)
カンマで文字列を分割して、列挙する	s.split(',')
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
日付データをn秒前にする	aDate - datetime.timedelta(seconds=n)
二つの集合は互いに素か調べる	aSet.isdisjoint(aSet2)
配列と配列についての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
両端キューの中に要素が含まれてるか調べる	element in deq
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
数値の因数分解を行う	sympy.factor(e)
n2がn以上、かつ、n3以下	n <= n2 and n2 <= n3
白色を用いてヒストグラムを描画する	plt.hist(データ列, color='white')
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
要素ひとつの組	(element,)
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
現在の分数	datetime.date.today().minute
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
縦軸の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
option: グラフの色をローングリーンに変更する	color = 'lawngreen'
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
縦棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
ヒストグラムを上限から下限までの上限下限で描く	plt.hist(データ列, range=(start, end))
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
丸印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
浮動小数点数の最小値	sys.float_info.min
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
配列をn個にビニングしてnamesのラベルをつける	pd.cut(aArray, n, labels=names)
折れ線グラフの色を紺に変更する	plt.plot(データ列x, データ列y, color='darkblue')
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
nがn2と等しいかどうか確認する	n == n2
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
シーケンスのイミュータブルな集合	frozenset(iterable)
セットに列の要素を追加する	aSet.update(iterable)
データフレームの列と列の相関行列	df[[column, column2]].corr()
タプルからキーの値か、もしくは要素を得る	aDict.get(key, element)
データ列の中に文字列があるか確認する	ds.isin([value])
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategray')
ファイル名がCSVファイル	filename.endswith('.csv')
Pandasで書式fmtを用いてデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format=fmt)
ヒストグラムの色をディムグレーにする	plt.hist(データ列, color='dimgray')
折れ線グラフの色を茶色に変更する	plt.plot(データ列x, データ列y, color='brown')
データフレームのカラムのNaNを最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
データ列をインポートする	import pandas as pd
ヒストグラムの色を赤にセットする	plt.hist(データ列, color='red')
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
リストとリストの散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
配列を列から作る	np.array(iterable)
オプションで、出力先を標準エラーに指定する	file = sys.stderr
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
オリーブにヒストグラムの色を設定する	plt.hist(データ列, color='olive')
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームから数値データを抽出する	df.select_dtypes('number')
散布図に四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
日付データが火曜日かどうか調べる	aDate.weekday() == 1
データフレームのカラムの中央値	df[col].median()
シーケンスから複数個ランダムに選ぶ	random.choices(iterable, k=n)
文字列がリストに含まれないか判定する	element not in aList
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
データフレームの列のNaNを最大値に設定する	df[col].fillna(df[col].max())
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
オブジェクトはリストクラスか	isinstance(obj, list)
折れ線グラフの色をミディアムブルーにセットする	plt.plot(データ列x, データ列y, color='mediumblue')
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
データフレームを表示するときヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
散布図をサーモン色を使って描画する	plt.scatter(データ列x, データ列y, color='salmon')
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
ファイルパスをオープンする]	open(filepath)
ラインを赤い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
日付データは何月か知る	aDate.month
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
点線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
グラフをプレゼンてション用に設定する	sns.set(context='talk')
要素がセットの要素でない	element not in aSet
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
option: グラフの色をブランチドアーモンドに指定する	color = 'blanchedalmond'
今日の曜日を使う	datetime.datetime.today().weekday()
散布図にバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
データフレームの列の欠損値を直後の値で埋める	df[col].fillna(method='bfill')
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
実数とyのノルム	math.hypot(x, y)
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
ディープスカイブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
折れ線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
PandasでdateStringを日付データに変換する	pd.to_datetime(dateString)
日付時刻データの秒を使う	aDatetime.second
データフレームを千の位で四捨五入して、整数にする	df.round(-3).astype(int)
データフレームの列の文字列が文字列で終わる行を取り出す	df[df[column].str.endswith(s)]
フォレストグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
平方根	math.sqrt(x)
データフレームを関数の値でグループ化する	df.groupby(関数)
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
データフレームのカラムが何月か調べる	df[col].dt.month
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
データフレームを列で整列し、下位を取り出す	df.sort_values(columns).tail(n)
無限にオブジェクトが続くイテラブル	itertools.repeat(element)
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数	s.count(sub, start, end)
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
eの実数乗を求める	math.exp(x)
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
散布図を深紅色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
最頻値でデータ列の欠損値を置換する	ds.fillna(ds.mode().iloc[0])
データフレームを列の値でNaNを含めてグループ化する	df.groupby(column, dropna=False)
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
PandasでdateStringをタイムスタンプ型に変換する	pd.to_datetime(dateString)
カラムは正規分布からどの程度、歪んでいるか見る	ds.kurt()
線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
ヒストグラムの色をダークオリーブグリーンに変更する	plt.hist(データ列, color='darkolivegreen')
データフレームのリストカラムの標本標準偏差	df[aList].std()
横棒グラフをグリーン色として描画する	plt.barh(データ列x, データ列y, color='green')
データフレームの未入力値を平均値で埋める	df.fillna(df.mean())
自然数最小公倍数を求める	math.lcm(n, n2)
両端キューの末尾からデータを取り出す	deq.pop()
コーンズシルクにヒストグラムの色を設定する	plt.hist(データ列, color='cornsilk')
オブジェクトのポインタ	id(obj)
option: 箱ひげ図を水平方向にする	vert = False
線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
リスト内の要素が全て真	all(aList)
イテラブルとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgray')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
リストの合計値を求める	sum(aList)
要素を集合から取り除く	aSet.remove(element)
データ列の月	ds.dt.month
横棒グラフの色を深紅にする	plt.barh(データ列x, データ列y, color='crimson')
n個の集まりからk個選ぶ方法を計算する	math.comb(n, k)
グラフのパレットを全般的に暗くする	sns.set(pallete='dark')
散布図を淡い茶色色で描画する	plt.scatter(データ列x, データ列y, color='tan')
最大長nの両端キューを作る	collections.deque(maxlen=n)
データフレームで、カラムと列の重複を見る	df.duplicated(subset=[column, column2])
option: ミディアムシアグリーン色を用いる	color = 'mediumseagreen'
列を累加したイテラブル	itertools.accumulate(iterable)
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
棒グラフを小麦色色として描画する	plt.bar(データ列x, データ列y, color='wheat')
データ列の平均値を計算する	ds.mean()
データフレームの各グループごとの平均値	df.groupby(column).mean()
データフレームからランダムに取り出す	df.sample()
データフレームのリストカラムの平均値	df[aList].mean()
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgray')
ラベンダーにヒストグラムの色をセットする	plt.hist(データ列, color='lavender')
散布図のマーカーを黒色にする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
option: フォントの色をサドルブラウンにセットする	color = 'saddlebrown'
ダークシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
入力から2つの文字列を読み込む	A, B = map(str, input().split())
日付時刻データの日付を求める	aDatetime.date()
データフレームのインデックスをリセットする	df.reset_index()
整数nを8進文字列にする	oct(n)[2:]
ペールグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='palegreen')
nが3の倍数か調べる	n % 3 == 0
実数を実数に掛ける	x * y
データフレームのカラムのNaNを直後の値に設定する	df[col].fillna(method='bfill')
日付データを文字列でフォーマットして文字列にする	"aDate.strftime(""%d/%m/%y"")"
散布図をrgbの星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
列にリストを続けたイテラブル	itertools.chain(iterable, iterable2)
ハニーデュー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
散布図の左三角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
タプルの項目数	len(aDict)
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
option: 丸印を描画する	marker = 'o'
クラス分類を確率的勾配降下で行う	model = sklearn.linear_model.SGDClassifier()
文字列全体が正規表現にASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
x軸とy軸の比率を同じする	plt.axis('equals')
円プロットの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
二つのデータフレームを列'A'と列'B'をキーにしてジョインする	pd.merge(df, df2, left_on='A', right_on='B')
nとn2が同じ値か調べる	n == n2
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
両端キューをリストに変換する	list(deq)
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
折れ線グラフをゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='goldenrod')
棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
縦棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
マッピングの浅いコピーを作る	aDict.copy()
データフレームの列を100の位で四捨五入する	df[col].round(-2)
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
部分集合か調べる	aSet.issubset(aSet2)
ファイルパスをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
オブジェクトは数値か調べる	isinstance(obj, (int,float))
カウンタの正の数だけ残す	+aCounter
オールドレース色で散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
ベクトルの逆行列を求める	np.linalg.inv(aArray)
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
nが一桁の整数かどうか確認する	-9 <= n <= 9
散布図のダイアモンド印を黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
散布図をフクシア色を使って描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
折れ線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
カウンタのユニークな項目を列挙する	list(aCounter)
xが真	bool(x)
線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
データフレームの数値を一度に丸める	df.round()
文字列をシアンにする	f'\033[36m{value}\033[0m'
ValueMapでデータフレームのリストカラムの値をまとめて置き換える	df[aList].replace(ValueMap)
下線付きで文字列をプリントする	print(f'\033[4m{value}\033[0m')
データフレームを表示するとき最大行数を変更する	pd.set_option('display.max_rows', n)
線グラフを赤い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
option: カンマを区切りで使う	sep = ','
配列とリストについて散布図を描いて、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフをブランチドアーモンド色を用いて描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
グラフを描画する準備をする	import matplotlib.pyplot as plt
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
文字列を大文字に変換する	s.upper()
ダークオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkorchid')
既存のベクトルを元に全要素が初期値のベクトル	np.full_like(aArray, 初期値)
nからn2の範囲を見る	range(n, n2)
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
整数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.int)
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
ヒストグラムの色をミディアムオーキッドに指定する	plt.hist(データ列, color='mediumorchid')
option: ライトゴールドロディイエローを使う	color = 'lightgoldenrodyellow'
色付きの一点鎖線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
タプル中の要素が少なくとも一つ真かどうか	any(aTuple)
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
実数を切り下げて整数に変換する	math.floor(x)
option: エンコーディングをUTF8に指定する	encoding = 'utf-8'
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
折れ線グラフのマーカーを大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
ベクトルの累積和を計算する	np.cumsum(aArray)
値をシアンでプリントする	print(f'\033[36m{value}\033[0m')
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
option: フォントの色をピンクに設定する	color = 'pink'
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
オブジェクトの属性の値を値にする	setattr(obj, プロパティ名, 値)
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
ベクトルの内積	np.dot(aArray, aArray2)
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: グラフの色をレベッカパープルに変更する	color = 'rebeccapurple'
イテラブルとリストの散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
シーケンスから最大長nの両端キューを作る	collections.deque(iterable, maxlen=n)
リストと数列の散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
option: グラフの色をダークグレーに指定する	color = 'darkgray'
データ列の各データ値の出現数	ds.value_counts()
折れ線グラフの色をライムグリーンに変更する	plt.plot(データ列x, データ列y, color='limegreen')
option: フォントの色をミスティローズに設定する	color = 'mistyrose'
n2がn以上かつ、n3以下	n <= n2 and n2 <= n3
nがn2より小さい	n < n2
option: ティール色を用いる	color = 'teal'
文字列がリストの要素か調べる	element in aList
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
データフレームの列名を列から文字列に付け直す	df.rename(columns={column: name})
折れ線グラフを点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームをインデックスで小さい順に並べる	df.sort_index(ascending=True)
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
折れ線グラフの色をブラウンに指定する	plt.plot(データ列x, データ列y, color='brown')
回帰分析を多層パーセプトロンを用いて行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
日付時刻データとタイムスタンプデータの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
グラフで使える色の一覧	matplotlib.colors.cnames
year年month月day日hour時を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour)
折れ線グラフの印を丸にする	plt.plot(データ列x, データ列y, marker='o')
カラムのNaNを中央値にセットする	ds.fillna(ds.median())
オプションでファイルを出力にする	file = sys.open(filename, 'w')
線グラフをミッドナイトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='midnightblue')
赤いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
プロットで使うタイトルを設定する	plt.title('グラフの名称')
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
option: アクア色を使う	color = 'aqua'
データフレームのカラムの中に存在する文字列と文字列の合計をカウントする	df[col].isin([value, value2]).sum()
パラメータについて数式の微分を行う	sympy.diff(e, z)
option: 菱形マーカーを使う	marker = 'D'
散布図を濃い青色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
ひとつ飛ばしでリストを取り出す	aList[::2]
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
上位集合もしくは等しい	aSet > aSet2
列をキーにして２つのデータフレームを結合する	pd.merge(df, df2, on=column)
折れ線グラフに丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o')
ベクトルの最大値を求める	np.max(aArray)
日付データが日付データより後ろか調べる	aDate > aDate2
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
シスル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
rgbのダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: グラフの色をディムグレーに変更する	color = 'dimgrey'
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
縦棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
一点鎖線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームのカラムの中に日付データがある	df[col].isin([value])
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
列のユニークな要素数	ds.nunique()
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
双方向キューのn番目に数値を挿入する	deq.insert(n, element)
横棒グラフをローングリーン色として描画する	plt.barh(データ列x, データ列y, color='lawngreen')
配列をビン数nでビニングする	pd.cut(aArray, n)
option: 欠損値は無視する	dropna = True
縦棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
部分文字列が文字列の終了位置より前に存在するか調べる	s.find(sub, 0, end) != -1
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
ヒストグラムの色をレベッカパープルに指定する	plt.hist(データ列, color='rebeccapurple')
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
横棒グラフをベージュ色として描画する	plt.barh(データ列x, データ列y, color='beige')
変数を水色でプリントできる文字列にする	f'\033[36m{value}\033[0m'
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
多次元データをt分布型確率的近傍埋め込み法で淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
タイムスタンプデータの時間数を使う	aDatetime.hour
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームのカラムの日にち	df[col].dt.day
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
JSON形式のfをデータに変換する	json.load(fin)
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
棒グラフをコーンズシルク色として描画する	plt.bar(データ列x, データ列y, color='cornsilk')
カテゴリデータ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
リストの末尾から値をポップする	aList.pop()
option: マーカーの太さを変更する	markeredgewidth = 2.5
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ホットピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
ダークグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
半透明の破線としてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムの線の種類を破線に指定する	plt.hist(データ列, linestyle='dashed')
要素は両端キューの中に含まれてるか調べる	element in deq
ヒストグラムの色を暗い赤に指定する	plt.hist(データ列, color='darkred')
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
散布図の下三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
折れ線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
データ列のモード	ds.mode()
二つの変数を順に表示する	print(value, value2)
散布図に赤い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ヒストグラムの線の種類を一点鎖線に変更する	plt.hist(データ列, linestyle='dashbot')
作画のフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
両端キューの先頭	deq[0]
nがn2以下か確認する	n <= n2
option: 大文字・小文字を無視する	flag = re.IGNORECASE
サポートベクターマシンでクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ダークスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslateblue')
全ての十六進数字	string.hexdigits
ヒストグラムの色をブルーバイオレットに変更する	plt.hist(データ列, color='blueviolet')
０で全要素を初期化した行列を作る	np.zeros(行数, 列数)
二つのデータフレームを結合する	pd.merge(df, df2)
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
データフレームのリスト列の中のNaNの合計を数える	df[aList].isna().sum()
文字列リストを結合してひとつの文字列にする	''.join(aStringList)
rgbの四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: ミディアムオーキッドに色を設定する	color = 'mediumorchid'
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
△マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='^')
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
year年month月day日hour時の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
散布図のポイント印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
正規表現に複数行対応として文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームのカラムの尖度	df[col].skew()
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
option: ピンクを使用する	color = 'pink'
プラム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
折れ線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ダークオリーブグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
折れ線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
リストのn番目の要素を消す	del aList[n]
option: ライトスレイグレー色を用いる	color = 'lightslategray'
データフレームのカラムがどれだけ、分散しているか見る	df[col].var()
データフレームのリストカラムの下位25%	df[aList].quantile(0.75)
フォレストグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='forestgreen')
文字列をゼロ埋めする	s.zfill(文字列幅)
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
散布図をコーンフラワーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
イテラブルと列をペア化する	itertools.zip_longest(iterable, iterable2)
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームを列によってグループ化し、、それぞれのグループ毎の合計を求める	df.groupby(column).sum()
折れ線グラフの色をパープルに変更する	plt.plot(データ列x, データ列y, color='purple')
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ユーザの入力を整数として受け取る	int(input())
ミディアムスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
計算機イプシロン	sys.float_info.epsilon
option: カーキ色を使う	color = 'khaki'
配列とリストの散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
オブジェクトを文字列に変換する	str(obj)
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
入力ストリームを解放する	f.close()
ヒストグラムの色をミディアムアクアマリンに指定する	plt.hist(データ列, color='mediumaquamarine')
リストの文字列の位置をエラーなく見る	aList.index(element) if element in aList else -1
散布図をラベンダーブラッシュ色として描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
双方向キューのstart〜endの値を使う	collections.deque(itertools.islice(deq, start, end))
インデックスによってデータフレーム全体を降順で並べ直す	df.sort_index(ascending=False)
赤い破線として配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
散布図をライムグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='limegreen')
ミディアムバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ミスティローズにヒストグラムの色を変更する	plt.hist(データ列, color='mistyrose')
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
改行を取り除いて1行だけ標準入力から読む	sys.stdin.readline().rstrip()
データフレームの複数のカラムを並べて箱ひげ図を用いて可視化する	plt.boxplot([df['カラム'], df['カラム']])
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
文字コードに対応する文字	chr(unicode)
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
リストをビン数nでビン分割する	pd.cut(aList, n)
数値の微分を求める	sympy.diff(e)
option: ライトサーモン色を使用する	color = 'lightsalmon'
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
散布図に赤いポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフを色付きの実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ダークオレンジ色でヒストグラムを描画する	plt.hist(データ列, color='darkorange')
ラインを破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームのカラムを整数に丸める	df[col].round()
nをn2で割った値の切り上げ	(n + n2 - 1) // n2
データフレームのリストカラムの中に日付データと日付データがいくつあるか数える	df[aList].isin([value, value2]).sum()
標準入力を得る	sys.stdin
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
黒いグリッド線を引く	plt.grid(color='k')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
ファイルをバイナリできるように開く]	open(filepath, mode='rb')
散布図にrgbの四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
疑似乱数	random.random()
option: サーモン色を使用する	color = 'salmon'
折れ線グラフを赤い実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
実数以上の最小の整数	math.ceil(x)
option: グラフの色をインディアンレッドに指定する	color = 'indianred'
真上位集合か	aSet > aSet2
ライトスチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
option: コーンズシルクを使う	color = 'cornsilk'
文字列の先頭だけ大文字化する	s.capitalize()
option: グラフの色をリネンにセットする	color = 'linen'
データ列のユニークな値を調べる	ds.unique()
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
既存のファイルをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
散布図の星印の太さを指定する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
タプルをひとつ飛ばしで得る	aTuple[::2]
option: 紺碧を使う	color = 'azure'
折れ線グラフの色をブランチドアーモンドにする	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームのカラムは何秒か調べる	df[col].dt.second
２つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
ファイルをBOM付きを用いてオープンする]	open(filepath, encoding='utf_8_sig')
データフレームを２つの列でソートする	df.sort_values(by=['A', 'B'])
イテラブルからサンプリングする	random.sample(iterable)
文字列の出力を改行なしに行う	print(value, end='')
option: フォントの色をロイヤルブルーに指定する	color = 'royalblue'
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
データ列が何日か調べる	ds.dt.day
ヒストグラムをパレットトルコイズ色を使って描画する	plt.hist(データ列, color='paleturquoise')
組の最後を取り除く	aTuple[:-1]
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
リストの中の一番大きい値	max(aList)
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
option: ダークグリーン色を使う	color = 'darkgreen'
xが1、もしくは2、もしくは3に等しいかどうか調べる	x == 1 or x == 2 or x == 3
縦棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
カウンタ同士で共通部分	aCounter & aCounter2
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
イテラブルのイミュータブルな集合	frozenset(iterable)
ブルーバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
文字列中にひとつでも非アルファベットが含まれる	any(not c.isalpha() for c in s)
y軸だけグリッド線	plt.grid(axis='y')
データフレームを各列と列の組み合わせ毎にグループ化し、、合計を算出する	df.groupby([column, column2], as_index=False).sum()
データフレームのリストカラムの中にとがいくつあるか数える	df[aList].isin([value, value2]).sum()
線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
散布図をブルーバイオレット色を用いて描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
option: 改行を区切り記号で使う	sep = '\n'
year年を日付時刻にする	datetime.datetime(year=year, month=1, day=1)
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
カウンタを少ない順にリストとして得る	aCounter.most_common()[::-1]
セットのイミュータブル版	frozenset(aSet)
データフレームから列名を複数指定して選択する	df[columns]
キーがマッピング上で定義済みか確認する	key in aDict
折れ線グラフの丸マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
ヒストグラムの色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
データフレームのリスト列の欠損値を直後の値にする	df[aList].fillna(method='bfill')
option: ターコイズ色を用いる	color = 'turquoise'
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
2つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
青い上三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフの▽マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
実数の逆双曲線余弦を求める	math.acosh(x)
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
リストを分割数nで等しい量になるようにビン分割する	pd.qcut(aList, n)
折れ線グラフの下三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
線グラフの色をミントクリームにセットする	plt.plot(データ列x, データ列y, color='mintcream')
部分文字列で部分文字列が始まる	s.startswith(sub)
折れ線グラフにクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
黒いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
青い▲印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
リストとリストについての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
二つのデータフレームを列'A'と列'B'をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
データ列の折れ線グラフを左三角印で描画する	plt.plot(データ列x, データ列y, marker='<')
ファイルパスを書き込み用に文字コードtextでオープンする]	open(filepath, mode='w', encoding=text)
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
表データをNaNを含めて列の値で集計する	df.groupby(column, dropna=False)
タプルのコピーを作成する	dict(aDict)
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
ヒストグラムをブルーバイオレット色を用いて描画する	plt.hist(データ列, color='blueviolet')
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
列を千の位で丸める	ds.round(-3)
折れ線グラフに星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
書き込むCSVの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
折れ線グラフの▲印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
データフレームのリストカラムの値は欠損値か調べる	df[aList].isna()
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフをホワイト色で描画する	plt.plot(データ列x, データ列y, color='white')
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
上位集合もしくは等しいか調べる	aSet > aSet2
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
ダークオレンジにヒストグラムの色をセットする	plt.hist(データ列, color='darkorange')
ディープスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
データフレームのリストカラムのNaNを最大値に設定する	df[aList].fillna(df[aList].max())
散布図を上三角マーカーで描く	plt.plot(データ列x, データ列y, marker='^')
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
データ列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
ヒストグラムを描画し合計を1にする	plt.hist(データ列, density=True)
リネン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
縦棒グラフをダークターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データ列を四捨五入して整数にする	ds.round().astype(int)
文字列の大文字と小文字を交換する	s.swapcase()
実線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='solid')
システム時刻で乱数を初期化する	random.seed()
散布図のバツ印を黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
グラフの色を色差別なくする	sns.set(pallete='colorblind')
2を底とする対数を求める	math.log2(x)
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
文字列を部分文字列で右側から分割する	s.rsplit(sub)
イエローグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
青い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: ブルーバイオレット色を使う	color = 'blueviolet'
ファイルパスをベース名と拡張子に分割する	os.path.splitext(filepath)
ファイルパスからディレクトリ名を使う	os.path.dirname(filepath)
イテラブルとリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
option: ポイントマーカーを描画する	marker = '.'
折れ線グラフの左三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
実数が負の数か調べる	x < 0
リストとイテラブルの散布図を描画して、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
option: フォントの色をライトグリーンに設定する	color = 'lightgreen'
ビスク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
オブジェクトは関数か調べる	callable(obj)
フォレストグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='forestgreen')
ファイルからn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
option: ホワイトスモーク色を使う	color = 'whitesmoke'
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
列から重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
アルファベットの大文字列	string.ascii_uppercase
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
レベッカパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
双方向キューから最初の文字列を取り出す	deq.remove(element)
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
縦棒グラフをティール色で描画する	plt.bar(データ列x, データ列y, color='teal')
option: フォントの色をライトスチールブルーに設定する	color = 'lightsteelblue'
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
データフレームをカテゴリごとにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
表データの列がx、かつ列がx2であるデータを抽出する	df[(df[column] == x) & (df[column2] == x2)]
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
プロットの描画で明るく色テーマを使う	sns.set(pallete='bright')
イテラブルをベクトルに変換する	np.array(iterable)
組の末尾を取り除く	aTuple[:-1]
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
ロードされたモジュールのリスト	sys.modules
棒グラフをクリムゾン色として描画する	plt.bar(データ列x, データ列y, color='crimson')
ダークシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
option: 色をゲインズボロに設定する	color = 'gainsboro'
データフレームのリスト列の中に日付データと文字列がある	df[aList].isin([value, value2])
紺碧色としてヒストグラムを描画する	plt.hist(データ列, color='azure')
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
行列のスカラー倍	aArray * n
ダークバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
データフレームの下n行を選ぶ	df.tail(n)
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームのカラムの尖度を算出する	df[col].skew()
未初期化のベクトル	np.empty(要素数, dtype=np.int)
オリーブにヒストグラムの色を指定する	plt.hist(データ列, color='olive')
乱数を正規分布として生成する	random.normalvariate(mu=0.5, sigma=0.2)
散布図に黒い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
数列と数列についての散布図にrgbの大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
辞書の全エントリを空にする	aDict.clear()
option: ダークオリーブグリーン色を用いる	color = 'darkolivegreen'
散布図に青い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
option: グラフの色を貝殻に変更する	color = 'seashell'
整数nの二進文字列	bin(n)[2:]
折れ線グラフの四角印を赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
option: スレートブルー色を使う	color = 'slateblue'
option: オレンジ色を使う	color = 'orange'
データフレームを関数の値でグループ化し要約統計量を求める	df.groupby(関数).describe()
option: グラフの色をトマトに指定する	color = 'tomato'
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
黒いダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
半透明の破線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: フォントの色をダークスレートブルーに変更する	color = 'darkslateblue'
クラス分類の予測精度をヒートマップで確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
新しい線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
データフレームを各列と列の組み合わせ毎にグループ分けして個数を求める	df.groupby([column, column2], as_index=False).count()
ヒストグラムを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
グラフに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: 先頭の行をカラムの名前に設定する	header = 0
日付データが水曜日	aDate.weekday() == 2
黄緑色としてヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
エクセルデータファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
白にヒストグラムの色を設定する	plt.hist(データ列, color='white')
組の各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
option: グレー色を使う	color = 'gray'
option: 配列のデータ型を指定する	dtype = np.int8
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
縦棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
辞書をJSONフォーマットのインデント幅nの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
文字列のケースを変換する	s.casefold()
バギングとして回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
イテラブルからカウンタを生成する	collections.Counter(iterable)
リストを行列に変換する	np.array(aList)
カウンタのキーと出現回数を列挙する	aCounter.items()
ビスク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
データフレームを各列毎にグループ分けして文字列というグループの個数を求める	df.groupby(column).size()[s]
option: 三二ビット整数型を使う	dtype = np.int16
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
列'A'と列'B'をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
option: ロイヤルブルー色を使う	color = 'royalblue'
option: パウダーブルー色を使う	color = 'powderblue'
縦棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
リストの中の最小値	min(aList)
現在処理中の例外を情報	sys.exc_info()
ピーチパフ色としてヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
横棒グラフをディープスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
シーグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
折れ線グラフの▲印を赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ヒストグラムの範囲を指定する	plt.hist(データ列, range=(start, end))
データ列の値が欠損値か調べる	ds.isna()
option: グラフの色をマゼンタに設定する	color = 'magenta'
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
オブジェクトがリストクラスかどうか調べる	isinstance(obj, list)
ヒストグラムをスカイブルー色として描画する	plt.hist(データ列, color='skyblue')
項目名が辞書に存在しないとき要素を追加する	aDict.setdefault(key, element)
散布図をゴールド色として描画する	plt.scatter(データ列x, データ列y, color='gold')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームを複数の列によって並べ直して更新する	df.sort_values(by=column, inplace=True)
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
カウンタの項目のカウント	aCounter[element]
茶色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
option: パールバイオレットレッド色を用いる	color = 'palevioletred'
文字列中に非小文字が含まれる	any(not c.islower() for c in s)
ネイビーにヒストグラムの色を変更する	plt.hist(データ列, color='navy')
option: フォントの色をインディアンレッドに変更する	color = 'indianred'
文字列中の正規表現を新しい文字列を用いて置き換える	re.sub(pattern, newsub, s)
日付時刻データが何月か知る	aDatetime.month
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
折れ線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
横軸の目盛を表示しない	plt.xticks([])
文字列が空白文字からなる	s.isspace()
列をイミュータブルな集合に変換する	frozenset(iterable)
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
縦棒グラフをロージーブラウン色として描画する	plt.bar(データ列x, データ列y, color='rosybrown')
黒い大バツマーカーをデータ列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
浮動小数点数を切り上げる	math.ceil(x)
プロットの色を色差別なくする	sns.set(pallete='colorblind')
グラフの描画を見やすくする	import seaborn as sns
コロンで文字列を区切って、列挙する	s.split(':')
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
配列をy軸、配列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
等差数列から整数乱数を生成する	random.randrange(start, end, step)
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
オールドレース色を使ってヒストグラムを描画する	plt.hist(データ列, color='oldlace')
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
リストから配列を作成する	np.array(aList)
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
散布図に黒い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
カラム名の一覧を使う	df.columns
青色でヒストグラムを描画する	plt.hist(データ列, color='blue')
リストの折れ線グラフを描いて、色をRGBとして設定する	plt.plot(データ列x, データ列y, color='#800080')
横棒グラフをミディアムスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
配列の要素ごとに加算する	aArray + aArray2
黒い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
データ列のNaNを最大値に設定する	ds.fillna(ds.max())
ミディアムターコイズ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: 色をダークバイオレットにセットする	color = 'darkviolet'
ミディアムブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
等量でビン数nでデータ列をビニングする	pd.qcut(ds, n)
実数を十六進表記の文字列にする	x.hex()
折れ線グラフに黒い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
option: グラフの色をディムグレーに変更する	color = 'dimgray'
横軸の目盛りに文字列を設定する	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
部分文字列が文字列の開始位置からと終了位置の間に含まれるか調べる	s.find(sub, start, end) != -1
ファイルパスをバイナリできるようにオープンする]	open(filepath, mode='rb')
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
変数名をキーとして辞書	dict(name=element)
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
ゲインズボロにヒストグラムの色を設定する	plt.hist(データ列, color='gainsboro')
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
ファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
青紫色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
辞書をネスト化する	collections.ChainMap(aDict)
データフレームの末尾	df.tail()
option: 菱形マーカーを描画する	marker = 'D'
正規表現でデータフレームの値をまとめて置換する	df.replace(pattern, repl, regex=True)
折れ線グラフのラインスタイルを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
横棒グラフを青色として描画する	plt.barh(データ列x, データ列y, color='blue')
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
散布図を四角印で描画する	plt.scatter(データ列x, データ列y, marker='s')
パールバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
nがn2以上か確認する	n >= n2
数のn乗	pow(x, n)
データフレームの列が文字列で終わらない行を選択する	df[not df[column].str.endswith(s)]
データフレームを表示するときカラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
小麦色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
option: ブール型を使う	dtype = np.int32
プロットのグリッドを白くする	sns.set(style='whitegrid')
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームのカラムの歪度を求める	df[col].kurt()
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
データフレームの値が欠損値か調べる	df.isna()
散布図の下三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
クラス分類の偽陽性をヒートマップで確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
リストと数列についてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
縦棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
SJISを用いてファイルパスをオープンする]	open(filepath, encoding='shift_jis')
データフレームを各列毎にグループ化して、列の最小値を算出する	df.groupby(column)[column2].min()
t分布型確率的近傍埋め込み法でパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
ホットピンクにヒストグラムの色を変更する	plt.hist(データ列, color='hotpink')
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
キューの先頭の要素	deq[0]
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
データをスケーリングする	sklearn.preprocessing.StandardScaler().fit_transform(データ)
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
二つの文字列を改行で区切って表示する	print(value, value2, sep='\n')
現在を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データフレームから重複を残さず削除する	df.drop_duplicates(keep=False)
ティール色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
タプルの最初の要素を求める	aTuple[0]
茶色にヒストグラムの色を指定する	plt.hist(データ列, color='brown')
ヒストグラムを描画して半透明ににする	plt.hist(データ列x, alpha=0.5)
区間から配列	np.linspace(最小値, 最大値, 要素数)
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
折れ線グラフの色をシルバーに指定する	plt.plot(データ列x, データ列y, color='silver')
データフレームの中の列を分割数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームを各列毎にグループ化し、列の最大値を求める	df.groupby(column)[column2].max()
シーケンスにシーケンスを続ける	itertools.chain(iterable, iterable2)
配列とリストの散布図をプロットして、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを複数の列によってで降順にソートする	df.sort_values(by=column, ascending=False)
現在が何分か知る	datetime.date.today().minute
データ列の平均値	ds.mean()
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
折れ線グラフをターコイズ色を使って描画する	plt.plot(データ列x, データ列y, color='turquoise')
紺碧色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データフレームの列と列に重複があれば削除する	df.drop_duplicates(subset=[column, column2])
データフレームのカラムの日	df[col].dt.day
ヒストグラムをオーキッド色として描画する	plt.hist(データ列, color='orchid')
回数を制限して別の文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub, n)
グラフの目的を論文に変更する	sns.set(context='paper')
イテラブルとイテラブルをチェインする	itertools.chain(iterable, iterable2)
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームを列によってソートし、、上の方n件を取り出す	df.sort_values(columns).head(n)
トマトにヒストグラムの色を指定する	plt.hist(データ列, color='tomato')
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
option: エラーを無視するように指定する	errors = 'ignore'
エクセルファイルファイルからnというシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
第一引数のファイルの名前	sys.argv[1]
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
黒い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
nがn2以下か調べる	n <= n2
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
両端キューの要素をn個分右に輪番で回す	deq.rotate(n)
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
プログラムの実行を強制的に停止する	sys.exit()
線グラフの色をダークブルーに指定する	plt.plot(データ列x, データ列y, color='darkblue')
ミディアムターコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
回帰モデルの訓練を開始する	model.fit(説明変数, 目的変数)
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
option: 印を四角に変更する	marker = 's'
0からnまでのスライス	slice(n)
ダークグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
データフレームのカラムは何月か調べる	df[col].dt.month
データフレームの列がxより小さいデータを取り出す	df[df[column] < x]
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
option: グラフの色をスラグレーに設定する	color = 'slategrey'
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
2進対数	math.log2(x)
データフレームの列名を指定したカラムの名前一覧に置き換える	df.columns = columns
線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
フクシア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
option: フォントの色をフクシアに変更する	color = 'fuchsia'
数式の変数を数式で置き換える	e.subs(z, e2)
散布図をシャルトリューズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
カウンタ間で積集合演算する	aCounter & aCounter2
中央値で配列をビン分割する	pd.qcut(aArray, 2)
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
option: ネイビーを使う	color = 'navy'
文字列の両端から余分な空白と改行を取り除く	s.strip()
ヒストグラムの色をミディアムパープルに指定する	plt.hist(データ列, color='mediumpurple')
文字列の末尾から改行を取り除く	s.rstrip('\n')
散布図のダイアモンド印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
昇順に'A'列を用いてデータフレームを並べ直す	df.sort_values(by='A', ascending=True)
データフレームのカラムの母標準偏差を求める	df[col].std(ddof=0)
データ列の中に含まれる文字列の合計をカウントする	ds.isin([value]).sum()
黒い大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
散布図のマーカーを▲印にする	plt.scatter(データ列x, データ列y, marker='^')
option: 色をライトスチールブルーに設定する	color = 'lightsteelblue'
線グラフをインディアンレッド色を使って描画する	plt.plot(データ列x, データ列y, color='indianred')
option: 読み込まないフッタをnに設定する	skipfooter = n
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
タプルをリストに変換する	list(aTuple)
変数について数式を微分する	sympy.diff(e, z)
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
ミディアムブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
文字列を走査し正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
n番目の列を行としてCSVファイルTSVを読み込む	pd.read_csv(filename, index_col=n)
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='teal')
option: グラフの色をシルバーに変更する	color = 'silver'
プロットを全般的に明るくする	sns.set(pallete='bright')
数値を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
折れ線グラフを濃いシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームのリストカラムのNaNを前の行の値に設定する	df[aList].fillna(method='ffill')
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
散布図を右三角印で描画する	plt.scatter(データ列x, データ列y, marker='>')
実行結果を緑色にする	f'\033[32m{value}\033[0m'
線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
文字列中の部分文字列の出現をカウントする	s.count(sub)
option: ライトシアンにグラフの色を設定する	color = 'lightcyan'
データフレームの指定された名前リストの列を選択する	df[columns]
データフレームの欠損値を削除する	df.dropna()
セットにイテラブルの要素を全て追加する	aSet.update(iterable)
データ列の欠損値を最大値に増やす	ds.fillna(ds.max())
TSVからカンマ区切りのファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
option: フォントの色をオーキッドに変更する	color = 'orchid'
見やすいグラフを使う準備をする	import seaborn as sns
ディープスカイブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームから指定された列の名前一覧の列を抽出する	df[columns]
nを切り捨てながらn2分の１にする	n //= n2
文字列全体をパターンにマッチさせる	re.fullmatch(pattern, s)
ライトスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
日付データをn時間前にする	aDate - datetime.timedelta(hours=n)
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
タプルからカウンタを生成する	collections.Counter(aDict)
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
新しいロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
データフレームの列の要約統計量を算出する	df[col].describe()
数式を簡略にする	sympy.sympify(e)
文字列の先頭で正規表現に複数行対応としてマッチするか確認する	re.match(pattern, s, flags=re.MULTILINE)
列でデータフレームを集約して、列の要約統計量を算出する	df.groupby(column).describe()[column2]
分類モデルの残差を求める	目的変数 - model.predict(説明変数)
暗い赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
リネン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
最大値でデータフレームのNaNを埋める	df.fillna(df.max())
線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
部分文字列が文字列の開始位置からと終了位置までの間に含まれないか調べる	s.find(sub, start, end) == -1
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
棒グラフの色を濃い青にする	plt.bar(データ列x, データ列y, color='darkblue')
option: ダイアモンドマーカーを使う	marker = 'D'
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
データフレームの未入力値を最大値で埋める	df.fillna(df.max())
表データを各列と列の組み合わせ毎に集約して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
散布図のポイント印の色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
カウンタをイテラブルで更新する	aCounter.update(iterable)
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
option: マーカーの色を真紅にする	markerfacecolor = 'crimson'
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
option: セパレータをスラッシュにする	sep = '/'
散布図にダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
グラフの凡例の場所を指定する	plt.legend(loc=(x, y))
カウンタの項目一覧	aCounter.keys()
タイムスタンプデータの年	aDatetime.year
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
棒グラフをターコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='turquoise')
option: ライトグレー色を使う	color = 'lightgray'
データ列を箱髭図にする	plt.boxplot(データ列)
散布図をベージュ色として描画する	plt.scatter(データ列x, データ列y, color='beige')
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
ライム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
option: 改行コードを旧Macに設定する	newline = '\r'
縦棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
option: フォレストグリーンにフォントの色を設定する	color = 'forestgreen'
option: ダークカーキ色を使う	color = 'darkkhaki'
option: ヘッダを連番に設定する	header = None
option: 右三角マーカーを描画する	marker = '>'
option: オリーブを用いる	color = 'olive'
option: スプリンググリーンにフォントの色を設定する	color = 'springgreen'
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
折れ線グラフのクロス印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
縦棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
綺麗なグラフを用いる	import seaborn as sns
データフレームの列の中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
option: 色をライトグレーに設定する	color = 'lightgray'
データ列の上位25%を算出する	ds.quantile(0.25)
シスル色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
円グラフにラベルを設定する	plt.pie(データ列, startangle=90, labels=ラベル列)
文字列の中の大文字・小文字を無視してパターンによるマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データフレームのカラムを説明変数にする	説明変数 = df[['列名', '列名2']]
文字列が片仮名かどうか調べる	('ァ' <= ch <= 'ン')
最初の列をデータフレームから除く	df[df.columns[1:]]
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
リストのn番目に文字列を差し込む	aList.insert(n, element)
線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
ロイヤルブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
散布図をペールグリーン色として描画する	plt.scatter(データ列x, データ列y, color='palegreen')
データフレームを列によって整列し、、更新する	df.sort_values(by=column, inplace=True)
データフレームの列の欠損値を最大値に指定する	df[col].fillna(df[col].max())
２つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
ライトイエロー色を使ってヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgray')
行列の行列式を求める	np.linalg.det(aArray)
線形回帰モデルの回帰変数	model.coef_
xの小数点以下'3'桁までを出力する	print(':.3f'.format(x))
オブジェクトがリストの要素か調べる	element in aList
option: マーカーを下三角に設定する	marker = 'v'
ファイルパスの拡張子付きのファイル名	os.path.basename(filepath)
rgbの大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
黒い左三角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
棒グラフの色をrgbに変更する	plt.bar(ラベル列, データ列, color=rgb)
データフレームとデータフレームの列を合体させる	pd.concat([df, ds], axis=1)
option: ダークシアン色を使う	color = 'darkcyan'
数列と配列についての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
補助目盛を有効にする	plt.minorticks_on()
ローングリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
データフレームの列を度数分布図にする	plt.hist(df[column])
データフレームのそれぞれのグループ毎の分散	df.groupby(column).var()
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
緑色で数値をプリントする	print(f'\033[32m{value}\033[0m')
ファイルを文字コードtextを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
列をキーにして２つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
文字の文字コード	ord(ch)
データフレームを各列とカラムの組み合わせ毎にグループ化し、、最大値を計算する	df.groupby([column, column2], as_index=False).max()
rgbに棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
データフレームをJSONLファイルに保存する	df.to_csv(filename)
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
赤いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
option: 文字列を区切りで使う	sep = s
ライトスレイグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
複数の列の値でデータフレームをグループ化し、要約統計量を求める	df.groupby(columns).describe()
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
データフレームの文字列を未入力値に変換する	df.replace(s, np.nan)
option: グラフの色を青緑に変更する	color = 'teal'
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
散布図の上三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図を星マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='*')
カウンタを多い順番にリストとして得る	aCounter.most_common()
ライトコーラルにヒストグラムの色を変更する	plt.hist(データ列, color='lightcoral')
文字列内に小文字がある	any(c.islower() for c in s)
疑似乱数を求める	random.random()
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
データフレームの欠損値を前の値に指定する	df.fillna(method='ffill')
データフレームをグループ化し、各列に対し最小値を算出する	df.groupby(column)[column2].min()
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
ファイルを一行ずつ読む	f.readline()
データフレームの欠損値をモードに設定する	df.fillna(df.mode().iloc[0])
option: ローングリーンにグラフの色を設定する	color = 'lawngreen'
シーグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='seagreen')
散布図をダークターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
整数nの十六進数表記	hex(n)
データフレームから重複した行をドロップして、インプレイスする	df.drop_duplicates(inplace=True)
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
小数点以下n桁まで表示するようにする	pd.set_option('precision', n)
ヒストグラムの色をアリスブルーに変更する	plt.hist(データ列, color='aliceblue')
データフレームをカラムによってグループ化して、それぞれのグループごとの最小値を算出する	df.groupby(column).min()
折れ線グラフの色をインディゴに変更する	plt.plot(データ列x, データ列y, color='indigo')
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
データ列のNaNを中央値に設定する	ds.fillna(ds.median())
nの2進数文字列を使う	bin(n)[2:]
色付きの破線としてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
カウンタをマッピングとして更新する	aCounter.update(aDict)
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
双方向キューが空でないか調べる	len(deq) != 0
オブジェクトをイテラブルにする	iter(obj)
集合のすべての要素が別の集合に含まれる	aSet.issubset(aSet2)
データ列の欠損値を後の行の値に指定する	ds.fillna(method='bfill')
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
ラベンダーブラッシュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
文字列が文字列より辞書順で後か調べる	s > s2
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
リストとリストについて散布図を描画して、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
整数nのバイト長	(n.bit_length() + 7) // 8
複数の列の値によってデータフレームをまとめたグループ	df.groupby(columns)
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
option: ライトグレーにフォントの色を変更する	color = 'lightgray'
データフレームをJSONLファイルに小数点以下3桁まで書き込む	df.to_csv(filename, float_format='%.3f')
n個にデータフレームの中の列をビン分割する	pd.cut(df[col], n)
箱ひげ図を使ってデータ列を描く	plt.boxplot(データ列)
option: ダークサーモン色を使用する	color = 'darksalmon'
黒い左三角マーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: 紺を使う	color = 'darkblue'
リストの平均を算出する	sum(aList)/len(aList)
グラフのパレットを淡くする	sns.set(pallete='muted')
option: 右三角印を使う	marker = '>'
数式の微分を計算する	sympy.diff(e)
データ列の欠損値を直後の値で補う	ds.fillna(method='bfill')
データフレームをエクセルファイルファイルでJSONLファイルに書き込む	df.to_excel(filename)
データフレームのリストで指定されたカラムのヒートマップを描画する	sns.heatmap(df[aList].corr())
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
縦棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
k進対数	math.log(x, k)
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
折れ線グラフをインディアンレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='indianred')
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
オブジェクトの型	type(obj)
option: 線の種類を破線に設定する	linestyle = 'dashed'
n2がnより大きく、かつ、n3未満	n < n2 and n2 < n3
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
棒グラフをフローラルホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='floralwhite')
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
文字列の後ろを求める	s[-1]
option: 印をバツに変える	marker = 'x'
黄色にヒストグラムの色を設定する	plt.hist(データ列, color='yellow')
折れ線グラフの色をミッドナイトブルーに変更する	plt.plot(データ列x, データ列y, color='midnightblue')
線グラフのラインスタイルを点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
xを整数にする	int(x)
リストの末尾から値を取り出す	aList.pop()
標準入力から1行だけ読む	sys.stdin.readline()
データフレームがどの程度、分散しているか見る	df.var()
インディゴにヒストグラムの色を設定する	plt.hist(データ列, color='indigo')
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
データフレームのカラムを丸めて整数型にする	df[col].round().astype(int)
散布図に四角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='s')
オブジェクトはタプルクラスのインスタンス	isinstance(obj, tuple)
リストとリストについて散布図を描いて、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ライトグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='lightseagreen')
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
数式の展開を行う	sympy.expand(e)
ヒストグラムをライトイエロー色を使って描画する	plt.hist(データ列, color='lightyellow')
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
前もってASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
赤い大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
集合から任意の要素を除く	aSet.pop()
コマンドの第一引数を調べる	sys.argv[1]
ナバホホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
折れ線グラフの色をライムグリーンに指定する	plt.plot(データ列x, データ列y, color='limegreen')
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
データフレームをグループ化し、列に対し合計を求める	df.groupby(column)[column2].sum()
リストとリストの散布図に左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<')
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
日付データの日数	aDate.day
option: マーカーの色を淡い茶色にする	markerfacecolor = 'tan'
option: ミディアムアクアマリンに色を設定する	color = 'mediumaquamarine'
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
散布図の丸マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
線グラフをハニーデュー色として描画する	plt.plot(データ列x, データ列y, color='honeydew')
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
配列は何次元か調べる	aArray.ndim
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
ふたつの集合のインターセクション	aSet.intersection(aSet2)
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
空の集合を用意する	set()
乱数生成系列を初期化する	random.seed()
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
数値のパラメータにnを代入する	e.subs(z, n)
ロバストな単クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
横棒プロットを描画し、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
小さい順に二つの列によってデータフレームをソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
文字列が大文字か調べる	s.isupper()
ラインの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: グラフの色をスチールブルーに指定する	color = 'steelblue'
ヒストグラムの色をパウダーブルーに変更する	plt.hist(データ列, color='powderblue')
プログラムの実行を正常に終了する	sys.exit(0)
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
貝殻色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
パールバイオレットレッド色としてヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
データ列を四捨五入して、整数型にする	ds.round().astype(int)
文字列がリストの要素でないか調べる	element not in aList
縦棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
モデルを学習する	model.fit(説明変数, 目的変数)
正規化されたヒストグラムをプロットする	plt.hist(データ列, density=True)
双方向キューは空でないかどうか調べる	len(deq) != 0
文字列中に非英数字が含まれるかどうか調べる	any(not c.isalnum() for c in s)
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
折れ線グラフに右三角印を加える	plt.plot(データ列x, データ列y, marker='>')
ダークオレンジ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
天井	math.ceil(x)
データフレームの重複した行数のマスクを使う	df.duplicated()
ゴーストホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightgreen')
配列とデータ列について散布図を描いてマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
部分文字列か調べる	sub in s
option: ゴーストホワイトを使用する	color = 'ghostwhite'
ヒストグラムをゴールデンロッド色として描画する	plt.hist(データ列, color='goldenrod')
バリーウッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
option: グラフの色をライムグリーンに変更する	color = 'limegreen'
Pandasで、エポック秒のデータ列からタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
散布図に赤い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
option: 青緑を使用する	color = 'turquoise'
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
option: 左三角マーカーを用いる	marker = '<'
2を底とする実数の対数	math.log2(x)
option: フォントの色をアクアマリンに設定する	color = 'aquamarine'
データフレームのリストカラムの未入力値を直前の値に設定する	df[aList].fillna(method='ffill')
データフレームのカラムが何曜日か調べる	df[col].dt.weekday_name
データフレームの列名リストを見る	df.columns
option: パープル色を使う	color = 'purple'
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
文字列を中央寄せする	s.center(文字列幅)
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
カテゴリ列でグループ化して、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
折れ線グラフを青い実線を使って描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
タプルの中の一番大きい値を算出する	max(aTuple)
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
現在の時刻を求める	datetime.date.today().hour
全要素を０で初期化した三２ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
データフレームを1000の位で丸める	df.round(-3)
折れ線グラフに赤い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
散布図をカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='khaki')
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
文字列を式として評価する	eval(s)
option: ライトグレーを使う	color = 'lightgray'
深紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
データフレームとしてCSVファイルを読み込む	pd.read_csv(filename, sep=',')
イテラブルの長さnの順列	itertools.permutations(iterable, n)
option: 暗い赤色を使う	color = 'darkred'
昇順に2つの列でデータフレームをソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
nとn2が等しい	n == n2
option: グレーを使う	color = 'gray'
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
タブで区切って二つの文字列をプリントする	print(value, value2, sep='\t')
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: 色をミッドナイトブルーに設定する	color = 'midnightblue'
option: グラフの色を黄色にする	color = 'yellow'
方程式として数式を解く	sympy.solve(e)
まとめてValueMapでデータフレームの値を置き換える	df.replace(ValueMap)
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
出力ストリームに文字列を書き込む	f.write(s)
option: グリーン色を使う	color = 'green'
タイムスタンプデータの日数を使う	aDatetime.day
実数以下の最大の整数を求める	math.floor(x)
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
データフレームの列がxでない行を消す	df[df[column] == x]
正規分布として疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
データフレームを列名リストによってで破壊的に並べ直す	df.sort_values(by=column, inplace=True)
option: フォントの色をディムグレーに設定する	color = 'dimgrey'
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
両端キューの要素をインプレースに反転する	deq.reverse()
折れ線グラフにポイント印を加える	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフをダークグレー色を使って描画する	plt.plot(データ列x, データ列y, color='darkgray')
option: 白色を使用する	color = 'white'
'A'列でデータフレームをまとめた表	df.groupby('A')
マップに要素をキーとして加える	aDict[key] = element
折れ線グラフに黒い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
列を累積する	itertools.accumulate(iterable, operator.mul)
文字列は全て数値	s.isnumeric()
グラフの見た目をデフォルトでいい感じに設定する	sns.set()
折れ線グラフの色を小麦色に変更する	plt.plot(データ列x, データ列y, color='wheat')
重複した行を破壊的にデータフレームからドロップする	df.drop_duplicates(inplace=True)
データフレームを列によってグループ化して、各グループごとの合計を計算する	df.groupby(column).sum()
文字列を緑色にする	f'\033[32m{value}\033[0m'
空の単回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
ベストな位置に簡単な説明を表示する	plt.legend(loc='best')
二つのデータフレームを縦方向に合体させる	pd.concat([df, df2], axis=0)
aListn番目から要素を取り出す	aList.pop(n)
データフレームは正規分布からどの程度尖っているか確認する	df.skew()
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
配列を四分位数でビン分割する	pd.qcut(aArray, 4)
option: 区切り記号をタブにする	sep = '\t'
ファイルパスをオープンして]追加ストリームを求める	open(filepath, mode='a')
散布図の下三角印の色を指定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
日付データが日付データと同時か	aDate == aDate2
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
n進数文字列を整数に変換する	int(s, n)
表を各カラム毎にグループ化して、列の合計を計算する	df.groupby(column)[column2].sum()
二進文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
データフレームのリストカラムが正規分布からどれだけ、尖っているか確認する	df[aList].skew()
データフレームのリストカラムの中にいくつ文字列があるかカウントする	df[aList].isin([value]).sum()
ヒストグラムの色をスチールブルーに指定する	plt.hist(データ列, color='steelblue')
nが3で割り切れるか調べる	n % 3 == 0
折れ線グラフの色をダークシアグリーンに変更する	plt.plot(データ列x, データ列y, color='darkseagreen')
青緑色でヒストグラムを描画する	plt.hist(データ列, color='teal')
データフレームの列の標本標準偏差	df[col].std()
option: 印の色を変更する	markerfacecolor = '#800080'
散布図をミディアムターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
最大値・最小値の範囲で一様な疑似乱数を求める	random.uniform(最小値, 最大値)
イテラブルを縦軸、配列をx座標として大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
option: 星マーカーを描画する	marker = '*'
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
ケンドールの相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
三変数の最も大きい値	max(x, y, z)
実数の小数点以下を丸める	round(x)
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
縦棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
散布図にrgbの左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データ列の分	ds.dt.minute
シーケンスにシーケンスを続けたイテラブルを求める	itertools.chain(iterable, iterable2)
空のガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
ゴールド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
データ列間の平均２乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
平均絶対誤差を算出する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
両端キューから数値を取り出す	deq.remove(element)
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
半透明の一点鎖線を用いてデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ファイルから拡張子付きのファイル名を使う	os.path.basename(filepath)
オブジェクトは論理値クラスのインスタンス	isinstance(obj, bool)
偽陰性を抑えたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
散布図をビスク色を用いて描画する	plt.scatter(データ列x, データ列y, color='bisque')
データフレームを複数の列で昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
やわらかい青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
青緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
nがn2以上か調べる	n >= n2
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
データフレームの欠損値を最小値に減らす	df.fillna(df.min())
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
データフレームのリストカラムのNaNを中央値で置換する	df[aList].fillna(df[aList].median())
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
プロットの補助目盛を有効にする	plt.minorticks_on()
ふたつの関係が真上位集合か	aSet > aSet2
イテラブルの推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
option: フォントの色を淡いピンク色に変更する	color = 'lightpink'
データフレームのインデックス名リストを使う	df.index
データラベルの場所を指定する	plt.legend(loc=(x, y))
集合＼セット	aSet.difference(aSet2)
option: マゼンタ色を用いる	color = 'magenta'
線グラフを色付きの破線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: 色をシスルに変更する	color = 'thistle'
破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームを表示するとき表示する最大行数をnに設定する	pd.set_option('display.max_rows', n)
option: サドルブラウンに色を設定する	color = 'saddlebrown'
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
レモンシフォン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
タプルの値の一覧を得る	aDict.values()
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
第二引数のファイル名	sys.argv[1]
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
option: ミディアムブルー色を使用する	color = 'mediumblue'
インディアンレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
変数の出力を改行なしに行う	print(value, end='')
データフレームのリスト列の中に含まれる日付データの合計をカウントする	df[aList].isin([value]).sum()
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
折れ線グラフの色をオリベドラブに指定する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームのNaNを最大値に変更する	df.fillna(df.max())
ヒストグラムの色をライトスカイブルーにする	plt.hist(データ列, color='lightskyblue')
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
option: 線を太くする	linewidth = 3.0
データフレームの欠損値を最小値に指定する	df.fillna(df.min())
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
スノー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
グリーン色を使ってヒストグラムを描画する	plt.hist(データ列, color='green')
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
オレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
シーケンスに列を続けたイテラブル	itertools.chain(iterable, iterable2)
rgbの左三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームの中に文字列が存在する	df.isin([value])
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
数式の微分を求める	sympy.diff(e)
タン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
ベクトルの列ごとの標準偏差	np.std(aArray, axis=0)
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
ラジアンの角度	math.degrees(x)
リストから重複を取り除く	set(iterable)
文字列を右トリムする	s.rstrip()
赤い一点鎖線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
外れ値に強い線形回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
イテラブルとイテラブルについての散布図にダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
option: ダークグレー色を用いる	color = 'darkgray'
ライトスチールブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
option: ミディアムスレートブルーを使う	color = 'mediumslateblue'
折れ線グラフの色をライトスカイブルーに変更する	plt.plot(データ列x, データ列y, color='lightskyblue')
リストの最後	aList[-1]
散布図でデータフレームの全列を可視化する	sns.pairplot(df)
文字列の左側が部分文字列か調べる	s.startswith(sub)
option: マーカーを三角に変更する	marker = '^'
リストをひとつ飛ばしで得る	aList[::2]
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
配列と配列の散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームのリストカラムの歪度	df[aList].kurt()
ファイルが存在しないか調べる	not os.path.exists(filepath)
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
混同行列を計算する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
折れ線グラフの印を右三角にする	plt.plot(データ列x, データ列y, marker='>')
データ列のヒストグラムを描画する	plt.hist(データ列)
タブ区切りとしてデータフレームをJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
日付時刻データにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
散布図をスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='skyblue')
日付時刻データの曜日を整数で使う	aDatetime.weekday()
散布図の丸印の線幅を変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
nが1もしくは2もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
ペールグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='palegreen')
文字列のn番目	s[n]
データフレームをグループ化し、列に対し分散を計算する	df.groupby(column)[column2].var()
ミディアムシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
ダークグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
組を反転する	reversed(aTuple)
文字列を変数にする	sympy.Symbol(s)
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
空のヒストグラムベースの勾配ブースティング回帰木を準備する	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: 切片を計算しない	fit_intercept = False
ファイル名がテキストファイル	filename.endswith('.txt')
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
ファイルから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
データフレームのリストで指定された列の相関行列ケンドール相関係数で	df[aList].corr(method='kendall')
両端キューが空か調べる	len(deq) == 0
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
リストとイテラブルについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
サイコロと同じ乱数	random.randint(1, 6)
散布図のマーカーを星印にする	plt.scatter(データ列x, データ列y, marker='*')
散布図をプロットする	plt.scatter(データ列x, データ列y)
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
文字列をカンマで分割して、文字列リストにする	s.split(',')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
日付データを文字列としてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
フォレストグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
option: 色をグレーに変更する	color = 'grey'
option: 読み込まないフッタをnに指定する	skipfooter = n
option: 大バツマーカーを加える	marker = 'X'
本日が木曜日か	datetime.datetime.today().weekday() == 3
散布図の▼マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
折れ線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
タプルをカウンタに変換する	collections.Counter(aDict)
option: アリスブルーを使う	color = 'aliceblue'
カデットブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
文字列をシアンで表示する	print(f'\033[36m{value}\033[0m')
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
キューをリストに変換する	list(deq)
半透明の点線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
変数について数式を積分する	sympy.integrate(e, z)
option: パープルを用いる	color = 'purple'
データフレームの各グループごとの個数	df.groupby(column).count()
リストとデータ列についての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの色をコーンズシルクに指定する	plt.plot(データ列x, データ列y, color='cornsilk')
文字列を走査し正規表現にマッチするか調べる	re.search(pattern, s)
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
配列の和	aArray + aArray2
部分文字列か	sub in s
変数が無限大に近づく時の数式の極限値を求める	sympy.limit(e, z, oo)
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
黒い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
option: 印を星に変更する	marker = '*'
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
データフレームを表示するとき、折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
データフレームからカラムを一つだけ選択する	df[[column]]
日付データが金曜日	aDate.weekday() == 4
データフレームの重複した行だけ	df[df.duplicated(keep=False)]
nというシートをエクセルファイルファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームをグループ化し、列に対し分散を求める	df.groupby(column)[column2].var()
ピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
タプルとタプルを接続する	aTuple + aTuple2
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: フォントの色をスノーにセットする	color = 'snow'
option: ブランチドアーモンド色を使用する	color = 'blanchedalmond'
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
散布図をオレンジレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orangered')
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
トマト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
データフレームのcollをフォーマットを用いてタイムスタンプ型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
浮動小数点数を実数で割った剰余	math.remainder(x, x2)
option: グラフの色をスノーに指定する	color = 'snow'
日付データの年	aDate.year
ファイル名がJSONファイルかどうか	filename.endswith('.json')
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
二つの浮動小数点数が十分に近いかどうか調べる	math.isclose(x, x2)
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
折れ線グラフのクロスマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
列のユニークな値の個数を見る	df[col].nunique()
線グラフの色をシルバーに変更する	plt.plot(データ列x, データ列y, color='silver')
整数乱数で要素を埋めた配列を作成する	np.random.randint(開始値, 終了値, N)
タイムスタンプを使う	import time
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
低頻度方からカウンタをリストとして得る	aCounter.most_common()[::-1]
データフレームの各グループの最小値	df.groupby(column).min()
チョコレート色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
有理数を使う	import fractions
文字列中の正規表現を新しい文字列で置換する	re.sub(pattern, newsub, s)
バギングでクラス分類をする	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
文字列中のタブ文字をn個の空白に置き換える	s.expandtabs(tabsize=n)
集合をイミュータブルなセットに変換する	frozenset(aSet)
リストとリストについての散布図に赤い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
関数でデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby(関数)]
線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
文字列が数値か	s.isnumeric()
黒い▽マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
rgbのダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
実数のn乗して実数による余りを計算する	pow(x, n, y)
ディムグレー色としてヒストグラムを描画する	plt.hist(データ列, color='dimgray')
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
日付時刻データが水曜日か判定する	aDatetime.weekday() == 2
n÷n2	n / n2
インデント幅nで、辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
グラフの色を暗くする	sns.set(pallete='dark')
分子割る分母	fractions.Fraction(分子, 分母)
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
棒グラフを淡いピンク色色を用いて描画する	plt.bar(データ列x, データ列y, color='lightpink')
オブジェクトは辞書型	isinstance(obj, dict)
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
縦棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
凡例を表示する	plt.legend()
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
複数のデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
オレンジ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
整数nのビット長	n.bit_length()
配列を円グラフにする	plt.pie(データ列, startangle=90)
折れ線グラフの▼マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
フォレストグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
ヒストグラムをミディアムバイオレットレッド色を用いて描画する	plt.hist(データ列, color='mediumvioletred')
ヒストグラムの色を珊瑚に指定する	plt.hist(データ列, color='coral')
折れ線グラフの丸マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
文字列を最後から空白で分割する	s.rsplit()
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
浮動小数点数を三乗する	x ** 3
データフレームのデータ型の一覧	df.dtypes
列を文字列に変換して、'改行で連結する	'\n'.join(map(str, iterable))
kを底とする実数の対数	math.log(x, k)
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
リストを白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
半透明の点線として線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
散布図の▲マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
散布図をシルバー色を用いて描画する	plt.scatter(データ列x, データ列y, color='silver')
nがn2の倍数でないか調べる	n % n2 != 0
nにn2を加える	n + n2
横棒グラフを貝殻色を使って描画する	plt.barh(データ列x, データ列y, color='seashell')
真スーパーセットか調べる	aSet > aSet2
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
グラフのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
nが何桁か	len(str(n))
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
タイムスタンプデータが金曜日か	aDatetime.weekday() == 4
2つの列の値によってデータフレームをグループ化し、記述統計量を求める	df.groupby(['A', 'B']).describe()
２つの列によってデータフレームをソートし、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
ピンク色でヒストグラムを描画する	plt.hist(データ列, color='pink')
文字列を空白を用いて区切る	s.split()
option: 降順にする	ascending = False
ファイルパスをオープンして]、追加ストリームを使う	open(filepath, mode='a')
箱ひげ図で数列を図示する	plt.boxplot(データ列)
二つのタプルをチェーンする	collections.ChainMap(aDict, aDict2)
現在の再帰の上限	sys.getrecursionlimit()
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
ふたつの集合のユニオンを求める	aSet.union(aSet2)
オールドレース色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
タプルの値を列挙する	aDict.values()
行列の各要素の最大公約数	np.gcd(aArray, aArray2)
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ドジャーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
JSON文字列をデータにする	json.loads(jsonString)
カウンタからゼロカウントを取り除く	+aCounter
オブジェクトは文字列か確認する	isinstance(obj, str)
線の線の種類を点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
カウンタのそれぞれの要素を、そのカウントだけ列挙する	aCounter.elements()
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
リストとしてデータフレームの指定された列を抽出する	df[column].values.tolist()
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
標準入力から入力される	input()
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
折れ線グラフの星印の色を設定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
データ列を円グラフにする	plt.pie(データ列, startangle=90)
ファイルを書き込みできるように開く]	open(filepath, mode='w')
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
データフレームの内の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
折れ線グラフの右三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
散布図をチョコレート色を使って描画する	plt.scatter(データ列x, データ列y, color='chocolate')
縦棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
option: 文字コードtextを使う	encoding = text
散布図にバツマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
プログラムのファイルの名前	sys.argv[0]
イテラブルとシーケンスの直積	itertools.product(iterable, iterable2)
シーグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
データフレームの列と列の相関行列ケンドールとして	df[[column, column2]].corr(method='kendall')
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
データフレームのカラムの欠損値を平均値で補う	df[col].fillna(df[col].mean())
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
棒グラフをチョコレート色を用いて描画する	plt.bar(データ列x, データ列y, color='chocolate')
データフレームのカラムの欠損値を前の行の値で埋める	df[col].fillna(method='ffill')
列の欠損値を第二四分位数に設定する	ds.fillna(ds.median())
オブジェクトの種類を求める	type(obj)
リッジ回帰とロッソ回帰のハイブリッド分析を行う	model = sklearn.linear_model.ElasticNet()
オブジェクトのオブジェクト識別子	id(obj)
option: バイナリモードを使用する	mode = 'rb'
標準入力から1行受け取る	input()
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
集合を組にする	tuple(aSet)
データフレームをグループ化して、ヒストグラムとして可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
Pandasで、データ列をタイムスタンプにする	pd.to_datetime(ds)
文字列中から部分文字列を見つける	s.find(sub)
線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
青緑色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
タプルを引数として展開して出力する	print(*aTuple)
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
行列の列ごとの最小値	np.min(aArray, axis=0)
横棒グラフをラベンダーブラッシュ色を用いて描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
option: 追加モードに設定する	mode = 'a'
option: 深紅色を使う	color = 'crimson'
リストのn番目のを使う	aList[n]
最初の要素をキューから取り出す	deq.remove(element)
データフレームの列をドロップして入れ替える	df.drop(column, axis=1, inplace=True)
折れ線グラフをアイボリー色を用いて描画する	plt.plot(データ列x, データ列y, color='ivory')
縦棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームを列を用いて降順に破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
リストを順に表示する	print(*aList)
辞書のキーを列挙する	list(aDict)
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
プロットの用途を画面に変更する	sns.set(context='notebook')
n個の集まりからk個重複なく選ぶ方法を求める	math.comb(n, k)
２つの数値をカンマで区切って表示する	print(value, value2, sep=',')
変数を白色にする	f'\033[37m{value}\033[0m'
整数を百の位で丸める	round(x, -2)
リストのn番目以降の部分を取り出す	aList[n:]
ヒストグラムをモカシン色として描画する	plt.hist(データ列, color='moccasin')
nがn2で割り切れるか調べる	n % n2 == 0
画面にグラフの用途を設定する	sns.set(context='notebook')
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
option: データ型として論理値型を使用する	dtype = np.int32
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
線グラフをパールゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
多次元データを特異値分解を用いて淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
線グラフの色をゲインズボロにする	plt.plot(データ列x, データ列y, color='gainsboro')
option: マゼンタにフォントの色を変更する	color = 'magenta'
データフレームのリスト列の欠損値をxに指定する	df[aList].fillna(x)
ライトゴールドロディイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: 印を左三角に変更する	marker = '<'
散布図をダーク・スラテグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
カーキ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
プロットのグリッドを暗くする	sns.set(style='darkgrid')
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
半透明の点線を使って数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
フォレストグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ライトグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
折れ線グラフの上三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
nとn2が同じ値	n == n2
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
option: グラフの色をクリムゾンに設定する	color = 'crimson'
Pandasで、書式を使ってデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
データフレームの行一覧	df.index
データフレームの列の種類を見る	df.info()
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
散布図のマーカーを赤色にする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
データフレームを列名リストで降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
stringをインポートする	import string
プロットにy=0の点線を設定する	plt.axhline(y=0, linestyle='dotted')
最頻値でカラムの欠損値を埋める	ds.fillna(ds.mode().iloc[0])
データフレームを'A'列と'B'列によってで破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
option: ミディアムシアグリーンにフォントの色を指定する	color = 'mediumseagreen'
Pandasで、UNIX秒の文字列からdatetime64型にする	pd.to_datetime(s, unit='s', utc=True)
配列の要素ごとのアダマール積	np.multiply(aArray, aArray2)
データフレームの列名リストで指定された列をドロップする	df.drop(columns, axis=1)
線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
整数nのビット長を見る	n.bit_length()
データフレームを配列に変換する	df.values
トマトにヒストグラムの色を変更する	plt.hist(データ列, color='tomato')
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
プラム色でヒストグラムを描画する	plt.hist(データ列, color='plum')
一点鎖線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
縦棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
option: サーモンにグラフの色を変更する	color = 'salmon'
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
文字列を最後の部分文字列で二つに区切って、最初の文字列を使う	s.rpartition(sub)[0]
ヒストグラムの色をライトシアンに指定する	plt.hist(データ列, color='lightcyan')
option: 読み込む行番号をnamesで指定する	usecols = names
文字列がリストに含まれないか確認する	element not in aList
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
現在が何月か知る	datetime.datetime.today().month
データフレームから一番左側の列を除く	df[df.columns[1:]]
ミスティローズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
option: ゴールドにグラフの色を設定する	color = 'gold'
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
実数の仮数	math.frexp(x)[0]
日付データからn日分減算する	aDate - datetime.timedelta(days=n)
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
PandasでUNIX秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
プロットの描画で淡くカラーパレットを使用する	sns.set(pallete='muted')
グラフをスライド用にセットする	sns.set(context='talk')
暗い赤色でヒストグラムを描画する	plt.hist(データ列, color='darkred')
文字列の中の複数行対応として正規表現によるマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
横棒グラフをゴールド色を使って描画する	plt.barh(データ列x, データ列y, color='gold')
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
リストをn回連結する	aList * n
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
nが奇数か調べる	n % 2 == 1
文字列が組の要素か調べる	element in aTuple
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
n引くn2を求める	n - n2
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
数式を簡単にする	sympy.sympify(e)
データフレームのn行目をドロップする	df.drop(n, axis=0)
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
option: ダークシアンにグラフの色を設定する	color = 'darkcyan'
オブジェクトの種類を調べる	type(obj)
データフレームを表示するとき、小数点以下の表示精度をn桁にセットする	pd.set_option('precision', n)
JSON形式のファイル入力を辞書にする	json.load(fin)
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
耐火レンガ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
eの小数点数乗	math.exp(x)
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
オブジェクトはタプルクラスか確認する	isinstance(obj, tuple)
option: フォントの色を小麦色に設定する	color = 'wheat'
データ列をdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
配列の行ごとの最大値を求める	np.max(aArray, axis=1)
二数の一番小さい値	min(x, y)
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
スラグレーにヒストグラムの色をセットする	plt.hist(データ列, color='slategray')
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
棒グラフをフクシア色として描画する	plt.bar(データ列x, データ列y, color='fuchsia')
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
リストをビン分割する	pd.cut(aList, aList)
option: シスルにグラフの色を変更する	color = 'thistle'
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
散布図をパウダーブルー色として描画する	plt.scatter(データ列x, データ列y, color='powderblue')
データフレームのカラムの名前を付け直す	df.rename(columns={column: name})
現在の日付時刻	datetime.datetime.now()
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
乱数で要素を埋めた行列	np.random.random(N)
文字列のの開始位置から終了位置までの間に部分文字列がいくつかあるか調べる	s.count(sub, start, end)
要素∈セット	element in aSet
option: スノーを用いる	color = 'snow'
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
スラグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームのカラムの曜日数	df[col].dt.dayofweek
折れ線グラフの▲マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
折れ線グラフで数列を可視化する	plt.plot(データ列x, データ列y)
option: 配列のデータ型を指定する	dtype = np.int
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
標準入力から1行だけ改行なしで読み込む	sys.stdin.readline().rstrip()
スタッキングとしてクラス分類を行う	sklearn.ensemble.StackingClassifier()
漢字が文字列に使われている	re.search('[\u4E00-\u9FD0]', s)
破線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
淡い茶色にヒストグラムの色を設定する	plt.hist(データ列, color='tan')
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
大文字・小文字を無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
文字列が全て空白文字からなるかどうか調べる	s.isspace()
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
SJISでファイルを開く]	open(filepath, encoding='shift_jis')
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームのカラムのNaNを最大値で埋める	df[col].fillna(df[col].max())
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
折れ線グラフをダークマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
ブランチドアーモンド色としてヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
ダークカーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
ヒストグラムをライトブルー色として描画する	plt.hist(データ列, color='lightblue')
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
option: BOM付きを使う	encoding = 'utf_8_sig'
組を順序付けする	enumerate(aTuple)
バイナリ書き込みできるようにファイルをオープンする]	open(filepath, mode='wb')
セットから別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
等量でビン数nを用いて配列をビン分割する	pd.qcut(aArray, n)
昇順に列によってデータフレームをソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
配列の合計	np.sum(aArray)
option: チョコレート色を使用する	color = 'chocolate'
線グラフの色をローングリーンに変更する	plt.plot(データ列x, データ列y, color='lawngreen')
option: グラフの色をフォレストグリーンに変更する	color = 'forestgreen'
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
両端キューをタプルに変換する	tuple(deq)
棒グラフを貝殻色として描画する	plt.bar(データ列x, データ列y, color='seashell')
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
色付きの破線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
小数点数のハイパボリック・コサイン	math.cosh(x)
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
二つのデータフレームを列'A'と列'B'をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
OSの名前を知る	sys.platform
ガウス過程分類モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
浮動小数点数の最大値を求める	sys.float_info.max
データフレームを各列毎にグループ化して、文字列という名前のグループを使う	df.groupby(column).get_group(s)
プログラムを正しく止める	sys.exit(0)
ブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
option: グラフの色をアリスブルーに指定する	color = 'aliceblue'
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
マッピングのキー一覧	list(aDict)
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
option: フローラルホワイトにフォントの色を設定する	color = 'floralwhite'
nの十六進表現	hex(n)
縦棒グラフをプロットする	plt.bar(ラベル列, データ列)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
リストを箱ひげ図を用いて描画する	plt.boxplot(データ列)
今日の日付時刻	datetime.datetime.now()
option: フォントの色をゲインズボロに設定する	color = 'gainsboro'
オプションで、ファイルを用いる	file = sys.open(filename, 'w')
Pandasでデータフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
タイムスタンプデータの秒数を使う	aDatetime.second
ヒストグラムの色をシャルトリューズに変更する	plt.hist(データ列, color='chartreuse')
データフレームを転置する	df.T
文字列で区切って二つの文字列を出力する	print(value, value2, sep=s)
列'A'と列'B'をキーにして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
option: パープルを使う	color = 'purple'
ゼロ埋めしたブール型の配列を作る	np.zeros(要素数, dtype=np.int32)
数値を下線付きにする	f'\033[4m{value}\033[0m'
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
option: スチールブルー色を使う	color = 'steelblue'
値を黄色化する	f'\033[33m{value}\033[0m'
データフレームの列と列の相関行列を計算する	df[[column, column2]].corr()
データフレームのリスト列の相関行列スピアマンで	df[aList].corr(method='spearman')
option: サンディーブラウン色を使う	color = 'sandybrown'
option: ミディアムパープルにグラフの色を設定する	color = 'mediumpurple'
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
実数がNaNか調べる	math.isnan(x)
三つのデータフレームを縦方向に合体させる	pd.concat([df, df2, df3], axis=0)
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
ロージーブラウン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
データフレームのカラム名一覧を使う	df.columns
散布図を赤い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
数列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
散布図に青い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
列'A'と列'B'をキーにして二つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
option: ゴールデンロッド色を使う	color = 'goldenrod'
option: スプリンググリーンにグラフの色を設定する	color = 'springgreen'
グラフの使途をスライドに変更する	sns.set(context='talk')
ヒストグラムの色を青に変更する	plt.hist(データ列, color='blue')
データフレームの代表値	df.describe()
データフレームのリスト列の値が欠損値	df[aList].isna()
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
nが無限に続く数列	itertools.repeat(n)
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
折れ線グラフをペールグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='palegreen')
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ダークシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
データフレームを表示するとき最大列数を変更する	pd.set_option('display.max_columns', n)
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
リストとしてデータフレームの指定された列を選ぶ	df[column].values.tolist()
文字列を積極的に小文字に変換する	s.casefold()
ベクトルの列ごとの平均	np.mean(aArray, axis=0)
縦棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
xが1もしくは2か調べる	x == 1 or x == 2
nの桁数	len(str(n))
ベクトルの合計値を使う	np.sum(aArray)
CSVからデータフレームを読み込む	pd.read_csv(filename, sep=',')
リストが少なくとも一つ真か調べる	any(aList)
JSONフォーマットのファイル入力を読み込んで、dataとする	data = json.load(fin)
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
真紅にヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
option: 小麦色にフォントの色を設定する	color = 'wheat'
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
option: どのカラムも行に設定しない	index_col = None
ポイントマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='.')
配列の行ごとの合計値	np.sum(aArray, axis=1)
折れ線グラフにラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
バイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
ライトイエローにヒストグラムの色を変更する	plt.hist(データ列, color='lightyellow')
縦棒グラフをマルーン色として描画する	plt.bar(データ列x, データ列y, color='maroon')
コーンズシルク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
option: 線の種類を破線に指定する	linestyle = 'dashed'
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
option: サドルブラウン色を使う	color = 'saddlebrown'
ふたつの集合の差集合	aSet.difference(aSet2)
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
実数が正か調べる	x > 0
分類モデルの適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
折れ線グラフの色をゴーストホワイトに変更する	plt.plot(データ列x, データ列y, color='ghostwhite')
要素が集合のメンバーでないか調べる	element not in aSet
データ列とリストについての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフのポイントマーカーの色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: フォントの色をシアンにセットする	color = 'cyan'
等量でデータフレームの中の列をn個にビン分割する	pd.qcut(df[col], n)
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ゼロ埋めされた３二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
折れ線グラフをチョコレート色を使って描画する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームのリスト列の正規分布に対する上下広がり	df[aList].skew()
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
正弦	math.sin(x)
文字列の先頭で正規表現に複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
マッピングの値に要素が含まれていないか確認する	element not in aDict.values()
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
二つの集合が共通の要素を持たないか判定する	aSet.isdisjoint(aSet2)
配列を分割する	pd.cut(aArray, aList)
縦棒グラフを描いてラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
ヒストグラムをバリーウッド色を用いて描画する	plt.hist(データ列, color='burlywood')
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
複数のデータフレームを縦向きに連結する	pd.concat([df, df2, df3], axis=0)
両端キューの先頭の要素	deq[0]
棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
データフレームのカラムのNaNを直後の値に指定する	df[col].fillna(method='bfill')
赤いポイントマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフの色をスレートブルーに指定する	plt.plot(データ列x, データ列y, color='slateblue')
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
文字列の終了位置より前に部分文字列があるかどうか判定する	s.find(sub, 0, end) != -1
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
グラフで使える色名の一覧を使う	matplotlib.colors.cnames
ヒストグラムをイエローグリーン色として描画する	plt.hist(データ列, color='yellowgreen')
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
折れ線グラフの色をラベンダーブラッシュにする	plt.plot(データ列x, データ列y, color='lavenderblush')
ValueMapでデータフレームの値を置換する	df.replace(ValueMap)
表データの列概要を確認する	df.info()
変数を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
rgbの丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
エンディアンを調べる	sys.byteorder
日付データにn秒を加える	aDate + datetime.timedelta(seconds=n)
ピーチパフ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームの中にいくつ文字列があるかカウントする	df.isin([value]).sum()
数式処理を使う	import sympy
option: ペルー色を使う	color = 'peru'
空の両端キュー	collections.deque()
option: グラフの色をダークカーキにセットする	color = 'darkkhaki'
散布図をrgbのポイントマーカーとして描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
数列とリストについての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
option: 先頭のカラムを行に設定する	index_col = 0
option: コロンをセパレータで用いる	sep = ':'
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
辞書の浅いコピーを生成する	aDict.copy()
文字列をASCII限定としてパターンで区切る	re.split(pattern, s, flags=re.ASCI)
データフレームを列の値でグループ化し要約統計量を求める	df.groupby(column).describe()
タンにヒストグラムの色を設定する	plt.hist(データ列, color='tan')
文字列が無限に続くイテラブルを得る	itertools.repeat(element)
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
マッピングの値の一覧	aDict.values()
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
データフレームの列の文字列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
折れ線グラフの色をラベンダーブラッシュに変更する	plt.plot(データ列x, データ列y, color='lavenderblush')
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
配列の要素数	aArray.size
実線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
文字列を複数行対応としてパターンで分割する	re.split(pattern, s, flags=re.MULTILINE)
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
赤いポイントマーカーをデータ列とイテラブルについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
データフレームの欠損値が含まれる部分を色付けする	df.style.highlight_null()
右から部分文字列で文字列を分割する	s.rsplit(sub)
縦棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
文字列はリストの要素か調べる	element in aList
散布図を白色を使って描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームのカラムの値を正規表現patternで一度にreplに置き換える	df[col].replace(pattern, repl, regex=True)
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
option: EUCを使う	encoding = 'euc_jp'
折れ線グラフを青い実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
キューの最後	deq[-1]
配列をビン数nとして分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
２つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
option: プラム色を使う	color = 'plum'
リストの各値を関数に適用した結果で並べ直す	sorted(aList, key=func)
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
データフレームのリストカラムの最頻値	df[aList].mode()
文字列全体がパターンにケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
列とリストのデカルト積	itertools.product(iterable, iterable2)
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
２つのリストから辞書	dict(zip(aList, aList2))
1からNまでの行列	np.arange(1, N+1)
線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
xが一桁の数か調べる	-9 <= x <= 9
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
option: マーカーを丸に変更する	marker = 'o'
特異値分解を用いて淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
ナバホホワイト色でヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
リストをボックスチャートにする	plt.boxplot(データ列)
文字列の接頭辞から安全に部分文字列を除去する	s.removeprefix(sub)
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
文字列中から部分文字列を探す	s.find(sub)
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
カウンタの最頻出な値	aCounter.most_common()[0]
データフレームを'A'列と'B'列で昇順に並べる	df.sort_values(by=['A', 'B'], ascending=True)
カテゴリデータをベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
配列とリストについての散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
year年month月day日のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
ヒストグラムの色をパレットトルコイズに指定する	plt.hist(データ列, color='paleturquoise')
実数以上の最小の整数を求める	math.ceil(x)
折れ線グラフに赤い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
ファイルのn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
ナバホホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
リストと配列について散布図を描画して星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームを列によってによって大きい順にソートする	df.sort_values(by=column, ascending=False)
文字列の中の正規表現によるすべてのマッチを使う	re.findall(pattern, s)
双方向キューの要素をインプレースに逆順にする	deq.reverse()
option: ダークマゼンタ色を用いる	color = 'darkmagenta'
散布図に大バツ印を使う	plt.scatter(データ列x, データ列y, marker='X')
縦棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
ヒストグラムの色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
データフレームの中の欠損値を削除する	df.dropna()
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
各カテゴリごとにデータフレームの棒プロットを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
両端キューの右側	deq[-1]
コーンフラワーブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
タプルを展開してプリントする	print(*aTuple)
折れ線グラフの色をブランチドアーモンドに変更する	plt.plot(データ列x, データ列y, color='blanchedalmond')
折れ線グラフをロージーブラウン色として描画する	plt.plot(データ列x, データ列y, color='rosybrown')
横棒グラフをダークグレー色を使って描画する	plt.barh(データ列x, データ列y, color='darkgrey')
ヒストグラムをライトシアン色として描画する	plt.hist(データ列, color='lightcyan')
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
0から始まる無限数列	itertools.count()
茶色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
option: プラムを使用する	color = 'plum'
ヒストグラムをダークスレートブルー色として描画する	plt.hist(データ列, color='darkslateblue')
列とイテラブルをペア化する	itertools.zip_longest(iterable, iterable2)
option: インディアンレッドに色をする	color = 'indianred'
カラムの中にいくつ欠損値が存在するかカウントする	ds.isna().sum()
データフレームをインポートする	import pandas as pd
散布図をダイアモンド印で描画する	plt.scatter(データ列x, データ列y, marker='D')
文字列中に非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
データフレームのリスト列の中に文字列と日付データがあるか調べる	df[aList].isin([value, value2])
縦棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
四分位数ごとにデータ列を分割する	pd.qcut(ds, 4)
横棒グラフをパウダーブルー色として描画する	plt.barh(データ列x, データ列y, color='powderblue')
データ列の秒	ds.dt.second
タプルの要素を並べ変える	sorted(aTuple)
パールバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
ヒストグラムを点線として描く	plt.hist(データ列, linestyle='dotted')
データフレームを列によってグループ化して、グループ毎の標準偏差を求める	df.groupby(column).std()
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
散布図をミディアムパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
option: グリーンにグラフの色を設定する	color = 'green'
データフレームの列をインデックスに設定する	df.set_index(column)
データ列のNaNを直前の値に設定する	ds.fillna(method='ffill')
ヒストグラムをミディアムスプリンググリーン色を用いて描画する	plt.hist(データ列, color='mediumspringgreen')
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
二つのベクトルを列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
タプルを逆順にする	reversed(aTuple)
事前に正規表現をコンパイルする	re.compile(pattern)
部分文字列を文字列の末尾から探す	s.rfind(sub)
文字列の両端から部分文字列を除去する	s.strip(sub)
散布図をrgbの左三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ファイルパスのセパレータ記号	os.sep
白い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ひとつでも非空白が文字列中に含まれる	any(not c.isspace() for c in s)
データ列の変遷を青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
リストの値を小さい順に並べ直す	sorted(aList, reverse=True)
二つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
rangeの無限版	itertools.count(start=n, step=step)
リストとリストについて散布図を描画し、、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
year年day月を日付時刻にする	datetime.datetime(year=year, month=month, day=1)
今日が月曜日か調べる	datetime.datetime.today().weekday() == 0
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームのリストカラムの値が欠損値かどうか	df[aList].isna()
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
データフレームのカラムの標準偏差	df[col].std()
オブジェクトは整数クラスか調べる	isinstance(obj, int)
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
散布図に赤いバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='r')
標準出力のバッファをフラッシュする	sys.stdout.flush()
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームのリストカラムの欠損値をxで置換する	df[aList].fillna(x)
TSVファイルファイル名がか調べる	filename.endswith('.tsv')
集合をタプルに変換する	tuple(aSet)
リストとリストの散布図を描いて、下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
xが真か調べる	bool(x)
リストの先頭	aList[0]
ピアソンの相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
データフレームのカラムの曜日名	df[col].dt.weekday_name
決定木をグラフ化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
縦棒グラフを暗い赤色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
UTF8で文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
データフレームのn行目を消して、更新する	df.drop(n, axis=0, inplace=True)
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
正則化付き単回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
データフレームのカラムをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
散布図のポイントマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
列の値によってデータフレームをグループ化し、要約統計量を計算する	df.groupby(column).describe()
イテラブルの各要素を順にスタックの最初に追加する	deq.extendleft(iterable)
データフレームの中の列を等量でビン数nで分割する	pd.qcut(df[col], n)
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
最初のカテゴリーを無視してデータフレームの列をダミー変数にする	pd.get_dummies(df[column], drop_first=True)
タプルにキーワード引数として更新する	aDict.update(**kwargs)
赤い右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
文字列をASCII限定としてパターンで分割する	re.split(pattern, s, flags=re.ASCI)
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
option: グラフの色をアリスブルーに変更する	color = 'aliceblue'
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
文字列中に非アスキー文字があるかどうかテストする	any(not c.isascii() for c in s)
mathモジュールをインポートする	import math
黄色で変数をプリントする	print(f'\033[33m{value}\033[0m')
整数nの八進表現	oct(n)
自然数のGCDを求める	math.gcd(n, n2)
散布図をカーキ色として描画する	plt.scatter(データ列x, データ列y, color='khaki')
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
ミディアムスレートブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
データフレームが正規分布からどの程度尖っているか確認する	df.skew()
nがn2よりも小さいか確認する	n < n2
データフレームの列の中にいくつ文字列があるかカウントする	df[col].isin([value]).sum()
配列をフラット化する	aArray.flatten()
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
ヒストグラムの色をコーラルにセットする	plt.hist(データ列, color='coral')
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をミッドナイトブルーに指定する	plt.hist(データ列, color='midnightblue')
パステル調にカラーパレットをグラフの描画で使用する	sns.set(pallete='pastel')
折れ線グラフの星印の色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
列'A'と列'B'をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
折れ線グラフの四角印の線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
option: ▲マーカーを描画する	marker = '^'
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
値を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
列の各値が何回出現するか確認する	ds.value_counts()
データフレームの中にと文字列がある	df.isin([value, value2])
デピンク色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
無限にnからカウントアップする	itertools.count(start=n)
ヒストグラムの色をミディアムスプリンググリーンに指定する	plt.hist(データ列, color='mediumspringgreen')
データフレームの列と列の相関行列スピアマン相関係数で	df[[column, column2]].corr(method='spearman')
棒グラフをサーモン色を使って描画する	plt.bar(データ列x, データ列y, color='salmon')
option: 色を青緑に設定する	color = 'teal'
カラムの母標準偏差を求める	ds.std(ddof=0)
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
nをn2だけ減らす	n -= n2
配列を元に全要素が1の行列	np.ones_like(aArray)
option: ゴーストホワイト色を用いる	color = 'ghostwhite'
option: ダーク・スラテグレー色を使用する	color = 'darkslategrey'
option: 貝殻色を用いる	color = 'seashell'
option: グラフの色をオーキッドに変更する	color = 'orchid'
サイコロと同じ乱数を得る	random.randint(1, 6)
option: 色を紺に設定する	color = 'darkblue'
データ列の空文字を未入力値に変換しドロップする	ds.replace('', np.nan).dropna()
列の各データが何回出現するか見る	df[col].value_counts()
青紫色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームを'A'列によってソートする	df.sort_values(by='A')
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
タン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
リストの長さ	len(aList)
リスト自身を2回あわせたデカルト積を求める	itertools.product(iterable, repeat=2)
リストを配列に変換する	np.array(aList)
リストと配列についての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームの全列の相関を可視化する	sns.pairplot(df)
データフレームの列のどの値が最も現れるか確認する	df[col].mode()
文字列を最後の部分文字列で分割したときの前半の文字列	s.rpartition(sub)[0]
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
モカシン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
散布図の大バツ印を赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
折れ線グラフを色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
二つの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
赤い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
最大長を指定して、双方向キュー	collections.deque(maxlen=n)
標準出力を使う	sys.stdout
nがn2より小さいか調べる	n < n2
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
二点間のユークリッド距離	math.dist(point, point2)
縦棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
文字列中に部分文字列が含まれないか確認する	sub not in s
グラフのx軸のラベルを設定する	plt.xlabel('x軸ラベル')
数値を改行なしにプリントする	print(value, end='')
２つのオブジェクトが等しいか	obj == obj2
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
文字列をシアンで表示できる文字列にする	f'\033[36m{value}\033[0m'
ファイルに文字列を書き込む	f.write(s)
日付時刻データからn時間分、減らす	aDatetime - datetime.timedelta(hours=n)
KNNとして回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
折れ線グラフをダークサーモン色として描画する	plt.plot(データ列x, データ列y, color='darksalmon')
散布図の丸印の大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
トマト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
折れ線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームの欠損値がある箇所に色を付ける	df.style.highlight_null()
閾値を用いてバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
グリッド線を白くする	plt.grid(color='w')
グラフで用いるフォントを日本語に指定する	sns.set(font='IPAexGothic')
太字で変数をプリントする	print(f'\033[1m{value}\033[0m')
ゼロ埋めされた整数型の行列	np.zeros(要素数, dtype=np.int)
パレットトルコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
nにn2を加算する	n + n2
マッピングからキーの値か、もしくは要素を得る	aDict.get(key, element)
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
整数乱数で要素を埋めた行列を作る	np.random.randint(開始値, 終了値, (行数, 列数))
文字列を改行で区切る	s.splitlines()
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
オリーブ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
リストと数列についての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
青い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
散布図の菱形マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
縦棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
option: グラフの色をサーモンに設定する	color = 'salmon'
ラベンダー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
値が集合に含まれない	element not in aSet
option: ライトスカイブルー色を使う	color = 'lightskyblue'
エラーなく集合から値を除く	aSet.discard(element)
option: グラフの種類を一点鎖線に変更する	linestyle = 'dashbot'
option: 紺碧色を使う	color = 'azure'
option: グラフの色をマルーンに設定する	color = 'maroon'
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: ダークシアグリーン色を使う	color = 'darkseagreen'
nullに等しい識別子	None
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
データフレームの列が正規分布からどの程度、尖っているか見る	df[col].skew()
オブジェクトが辞書型かどうか	isinstance(obj, dict)
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
xの小数点以下'2'桁までプリントする	print(':.2f'.format(x))
パールゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
正規分布を判定する	scipy.stats.shapiro(データ列)
データフレームのリストカラムの欠損値を平均で埋める	df[aList].fillna(df[aList].mean())
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
全ての空白文字	string.whitespace
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
ゲインズボロ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
赤い菱形印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
データフレームの値は欠損値かどうかテストする	df.isna()
配列の分散	np.var(aArray)
replにデータフレームのカラムの値を正規表現patternで置換する	df[col].replace(pattern, repl, regex=True)
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
option: オリーブを使う	color = 'olive'
折れ線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
文字列の最初の文字	s[0]
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
nが一桁の整数かどうか	-9 <= n <= 9
データフレームのリスト列のNaNを第二四分位数に指定する	df[aList].fillna(df[aList].median())
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
オブジェクトは集合クラスか調べる	isinstance(obj, set)
option: マーカーを▽に変える	marker = 'v'
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
スカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
option: ゴールデンロッドにグラフの色を変更する	color = 'goldenrod'
空白文字を使う	' '
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
上限長nの両端キューを作る	collections.deque(maxlen=n)
グラフ中のフォントを設定する	sns.set(font=フォント名)
RGBで折れ線プロットの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
ブランチドアーモンド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
1からNまでのベクトル	np.arange(1, N+1)
文字列の先頭で正規表現にケースを無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
option: 色をスレートブルーに設定する	color = 'slateblue'
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
黒いポイントマーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
option: サドルブラウン色を使用する	color = 'saddlebrown'
ダークグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
option: スラグレー色を使う	color = 'slategrey'
EUCでファイルを開く]	open(filepath, encoding='euc_jp')
ファイルパスをバイナリモードでオープンする]	open(filepath, mode='rb')
折れ線グラフの三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
ミディアムターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
文字列の接頭辞が部分文字列かどうか	s.startswith(sub)
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
散布図を黒い右三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
イテラブルと数列についての散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフの上三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
プロット中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データフレームのデータ型一覧	df.dtypes
ヒストグラムの色をダークグリーンに変更する	plt.hist(データ列, color='darkgreen')
折れ線グラフの四角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
オブジェクトは集合か調べる	isinstance(obj, set)
nが-9以上、9以下か	-9 <= n <= 9
文字列をコロンを使って区切って列挙する	s.split(':')
オブジェクトの参照カウントを知る	sys.getrefcount(obj)
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
option: ゲインズボロ色を使う	color = 'gainsboro'
タプルのn番目以降の部分を得る	aTuple[n:]
二つの文字列は同じか調べる	s == s2
カラムを1000の位で四捨五入して整数にする	ds.round(-3).astype(int)
実行時の標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
option: フォントの色をミディアムパープルに設定する	color = 'mediumpurple'
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
試しに何か動かす	print('Hello World')
折れ線グラフの星マーカーを青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
最大値でカラムの未入力値を補う	ds.fillna(ds.max())
赤い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
マップから項目名の値をエラーなく得る	aDict.get(key, None)
見やすいグラフを描画する準備をする	import seaborn as sns
散布図の四角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
データフレームの列が文字列で始まるデータを抽出する	df[df[column].str.startswith(s)]
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
option: 耐火レンガ色を用いる	color = 'firebrick'
データフレームのリストカラムがどの程度分散しているか見る	df[aList].var()
縦棒グラフを淡いピンク色色として描画する	plt.bar(データ列x, データ列y, color='lightpink')
option: フォントの色をダークマゼンタに変更する	color = 'darkmagenta'
option: オレンジ色を用いる	color = 'orange'
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
データフレームのカラムを千の位で丸める	df[col].round(-3)
リストと配列についての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: 先頭の列をインデックスに設定する	index_col = 0
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列が全てアスキー文字か調べる	s.isascii()
データフレームの列がxより大きいデータを抽出する	df[df[column] > x]
2つのカウンタの共通する値を計算する	aCounter & aCounter2
文字列はリストに含まれる	element in aList
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
ターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
イテラブルと列の直積	itertools.product(iterable, iterable2)
option: 色をインディゴに設定する	color = 'indigo'
ふたつの集合の共通要素だけにする	aSet.intersection_update(aSet2)
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
青緑色としてヒストグラムを描画する	plt.hist(データ列, color='turquoise')
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
データフレームの中に含まれる文字列の合計をカウントする	df.isin([value]).sum()
ふたつの集合のいずれか一方だけの集合を求める	aSet.symmetric_difference(aSet2)
多次元データを特異値分解でパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
option: 先頭の行をヘッダに設定する	header = 0
option: 大バツマーカーを使う	marker = 'X'
要素を集合に追加する	aSet.add(element)
ダークターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
縦棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
データ列の中にある文字列と日付データの個数を数える	ds.isin([value, value2]).sum()
リストと配列リストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
n個の整数リスト	list(range(n))
箱ひげ図をプロットして、平均値を追加する	plt.boxplot(データ列, showmeans=True)
option: グラフの色をミディアムバイオレットレッドにする	color = 'mediumvioletred'
ケンドール相関係数としてデータフレームのリストで指定されたカラムの相関行列を求める	df[aList].corr(method='kendall')
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
散布図をダークグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
リストとリストについての散布図にポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.')
option: ゲインズボロを使う	color = 'gainsboro'
パターンをケースを無視して前もってコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
整数nがセットのどれかか調べる	n in aSet
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
折れ線グラフにポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
上位集合か調べる	aSet.issuperset(aSet2)
option: マーカーを右三角に設定する	marker = '>'
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
散布図をカデットブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
集合から値を除去する	aSet.remove(element)
色付きの一点鎖線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
リストと数列について散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データ列の中の欠損値の合計を数える	ds.isna().sum()
シスル色でヒストグラムを描画する	plt.hist(データ列, color='thistle')
option: 四角マーカーを使う	marker = 's'
行列から重複を除いたベクトルを作る	np.unique(aArray)
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
整数nの2進文字列を使う	bin(n)[2:]
実数を実数で割る	x / y
マルーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
ピアソンでデータフレームの相関行列	df.corr(method='pearson')
イテラブルとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
ダークゴールデンロッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
散布図をパールゴールデンロッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
横棒グラフをダーク・スラテグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
リスト内の要素が少なくともひとつ真か	any(aList)
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
予測結果の真陽性率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
表データから指定した４つの列を取り出す	df[[column, column2, column3, column4]]
辞書順で二つの文字列を比較する	s < s2
配列の行ごとの平均値を計算する	np.mean(aArray, axis=1)
マッピングからキーで指定された項目をポップする	aDict.pop(key)
アンティークホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
JSON形式のバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
オブジェクトがある型のインスタンスか	isinstance(obj, クラス)
データフレームをエクセルファイルファイルとしてJSONLファイルに保存する	df.to_excel(filename)
棒グラフをシルバー色として描画する	plt.bar(データ列x, データ列y, color='silver')
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
リストが空でないかどうか調べる	len(aList) != 0
折れ線グラフの四角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
回帰分析を勾配ブースティングで行う	model = sklearn.ensemble.GradientBoostingRegressor()
正則化付き単回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
カウンタのユニオン	aCounter | aCounter2
配列を分割数nで分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
分類モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
数値の数値を求める	float(e)
データフレームから最後の列を除く	df[df.columns[:-1]]
要素一つの組	(element,)
カーキ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
文字列の開始位置からと終了位置番目までの範囲に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
ダークカーキ色としてヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
縦棒グラフをプロットして、バーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
nが一桁の整数か調べる	0 <= n <= 9
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
データフレームの列をヒストグラムにする	plt.hist(df[column])
全要素を1で初期化した配列を作る	np.ones(要素数, dtype=np.int)
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
散布図に黒い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
ライトゴールドロディイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightgoldenrodyellow')
折れ線グラフを破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフの右三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ダークオレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
紺碧色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
文字列を空白で区切って、整数リストにする	map(int, s.split())
小数点数の逆正弦	math.asin(x)
列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
ワーキングディレクトリを求める	os.getcwd()
ファイルからn文字、読み込む	f.read(n)
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
散布図の星印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
nのn2乗	n ** n2
黒いバツマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
配列から重複を除いた配列を作る	np.unique(aArray)
折れ線グラフの▲マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
青いバツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
無限大を使う	math.inf
データフレームを列によって並べ直して下の方n件を取り出す	df.sort_values(columns).tail(n)
線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
浮動小数点数を３乗する	x ** 3
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
分数の分子	q.numerator
両端キューのstart番目からend番目までの部分要素	collections.deque(itertools.islice(deq, start, end))
nが1、もしくは2	n == 1 or n == 2
データフレームのリストカラムの中に日付データが含まれるかどうか調べる	df[aList].isin([value])
文字列リストを結合する	''.join(aStringList)
データフレームのカラムの欠損値を直前の値で置換する	df[col].fillna(method='ffill')
辞書から項目名の値か、もしくは要素を得る	aDict.get(key, element)
散布図をサンディーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
カウンタ同士でユニオン演算する	aCounter | aCounter2
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
ファイルを追加できるように開く]	open(filepath, mode='a')
一点鎖線としてデータ列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図を星印を使い、描画する	plt.scatter(データ列x, データ列y, marker='*')
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
データフレームの未入力値を最大値に指定する	df.fillna(df.max())
データフレームのカラムの中のNaNの数を数える	df[col].isna().sum()
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
関数の値によってデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby(関数)]
リストをn回、連結する	aList * n
リストをダミー変数に変換する	pd.get_dummies(iterable)
JSON形式の文字列を辞書にする	json.loads(jsonString)
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
ヒストグラムの色をグリーンに指定する	plt.hist(データ列, color='green')
ファイルからストリームを開いて]、fileとする	file = open(filepath)
文字列が無限に繰り返す列	itertools.repeat(element)
文字列の最後から部分文字列を探す	s.rfind(sub)
文字列内にひとつでも数字がある	any(c.isdigit() for c in s)
折れ線グラフに黒い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
option: マーカーの色をバイオレットにする	markerfacecolor = 'violet'
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
サーモン色でヒストグラムを描画する	plt.hist(データ列, color='salmon')
時間を使う	import time
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
リストとリストについての散布図に赤いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
ディープスカイブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
二つの文字列を順にプリントする	print(value, value2)
折れ線グラフの右三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
スタックの最後の要素	deq[-1]
文字列が文字列リストに含まれる	s in aStringList
option: 左三角マーカーを加える	marker = '<'
線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
数値を太字で出力する	print(f'\033[1m{value}\033[0m')
横棒グラフを青色を使って描画する	plt.barh(データ列x, データ列y, color='blue')
コンビネーション	math.comb(n, k)
グラフで使う縦軸の軸名をuntitledに設定する	plt.ylabel('y軸ラベル')
ヒストグラムの色をサーモンにする	plt.hist(データ列, color='salmon')
標準入力から1行だけ改行なしに読む	sys.stdin.readline().rstrip()
ティール色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
オブジェクトのハッシュ値を求める	hash(obj)
データフレームを'A'列で昇順に破壊的に並べ直す	df.sort_values(by='A', ascending=True, inplace=True)
カウンタから辞書を減らす	aCounter.subtract(aDict)
リストをn個に等量でビン分割する	pd.qcut(aList, n)
データフレームをグループ化しそれぞれの列に対し分散を計算する	df.groupby(column)[column2].var()
行列の形を計算する	aArray.shape
option: 色をシエナに設定する	color = 'sienna'
文字列の中の複数行対応として正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
データフレームのそれぞれのグループの平均値を計算する	df.groupby(column).mean()
日付データにn週間分、加える	aDate + datetime.timedelta(weeks=n)
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
データフレームのリスト列の中にいくつ文字列が存在するか数える	df[aList].isin([value]).sum()
スクリプトのファイルの名前を知る	sys.argv[0]
データフレームをにバイオリン図でグラフ化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: ライトスレイグレー色を用いる	color = 'lightslategrey'
ヒストグラムの色をラベンダーに指定する	plt.hist(データ列, color='lavender')
ルートのチェーンマップ	collections.ChainMap()
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
散布図の右三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
実数の指数	math.frexp(x)[1]
モードでデータフレームのリストカラムのNaNを置き換える	df[aList].fillna(df[aList].mode().iloc[0])
ヒストグラムをダーク・スラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategrey')
ダークオーキッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
option: 色を黄色に設定する	color = 'yellow'
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
パレットトルコイズにヒストグラムの色を設定する	plt.hist(データ列, color='paleturquoise')
本日が日曜日か	datetime.datetime.today().weekday() == 6
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
option: グラフの色をホットピンクにセットする	color = 'hotpink'
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
nとkのnCk	math.comb(n, k)
文字列の末尾から部分文字列を探す	s.rfind(sub)
ヒストグラムの色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
JSONを用いる	import json
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
データフレームの文字列をNaNにする	df.replace(s, np.nan)
リストが空でない	len(aList) != 0
データフレームのcollのUNIX秒からPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
データ列を使用する	import pandas as pd
横棒グラフをゴーストホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
option: フローラルホワイト色を使用する	color = 'floralwhite'
散布図に黒い三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
ミディアムスプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
文字列が文字列より辞書順で前	s < s2
データフレームを二つの列によって昇順にソートして更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
n個にデータ列を等しい量になるように分割する	pd.qcut(ds, n)
option: エクセルデータのシートの名前をnamesに設定する	sheet_name = names
線グラフを濃いシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ファイルパスを文字コードtextでオープンする]	open(filepath, encoding=text)
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームの列の文字列をNaNに変換する	df[col].replace(s, np.nan)
ヒストグラムをカデットブルー色を使って描画する	plt.hist(データ列, color='cadetblue')
ディムグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
配列とデータ列についての散布図に赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
option: フォントの色をオリベドラブに設定する	color = 'olivedrab'
リストの全ての要素をクリアにする	aList.clear()
nプラスn2を計算する	n + n2
折れ線グラフを実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
ナバホホワイト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
赤い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
表データを２つの列の値によってグループ化する	df.groupby(['A', 'B'])
列によってによって破壊的にデータフレームをソートする	df.sort_values(by=column, inplace=True)
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: グラフの種類を破線に設定する	linestyle = 'dashed'
ヒストグラムの色を淡い茶色に設定する	plt.hist(データ列, color='tan')
散布図を大バツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='X')
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
散布図の上三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームのリストカラムの分散	df[aList].var()
文字列はタイトル大文字小文字かどうか確認する	s.istitle()
小数点数がNaNか	math.isnan(x)
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの内で列と列に重複があるか調べる	df.duplicated(subset=[column, column2])
TSVファイルからCSVを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
データフレームの中にいくつNaNが存在するか数える	df.isna().sum()
マゼンタで数値をプリントする	print(f'\033[35m{value}\033[0m')
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
ファイルを追加モードとしてオープンする]	open(filepath, mode='a')
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
列の各値の出現回数	df[col].value_counts()
option: スラグレーにグラフの色を設定する	color = 'slategrey'
タプルを逆順にする	aTuple[::-1]
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
赤い右三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
積み上げ棒プロットを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategray')
中央値でリストをビン分割する	pd.qcut(aList, 2)
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
データフレームの母標準偏差	df.std(ddof=0)
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
データ列とイテラブルの散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
整数nを符号付きで長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
スプリンググリーンにヒストグラムの色を変更する	plt.hist(データ列, color='springgreen')
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
変数をシアンにする	f'\033[36m{value}\033[0m'
明るくカラーパレットをグラフの描画で使う	sns.set(pallete='bright')
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
year年day月のタイムスタンプ	datetime.datetime(year=year, month=month, day=1)
アクアマリン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームのリストカラムの平均を求める	df[aList].mean()
Pandasでエポック秒のデータフレームのcollからPandasの日付型にする	pd.to_datetime(df[col], unit='s', utc=True)
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
タイムスタンプデータが木曜日か調べる	aDatetime.weekday() == 3
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
折れ線グラフの大バツ印の大きさを変える	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
両端キューを使う	import collections
nが5で割り切れる	n % 5 == 0
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
線の線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: マーカーを右三角に変える	marker = '>'
ミディアムオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
nが一桁の数	-9 <= n <= 9
nとn2の値を足してnとする	n += n2
リストから行列を作る	np.array(aList)
option: レベッカパープルにグラフの色を変更する	color = 'rebeccapurple'
カラムを10の位で丸める	ds.round(-1)
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
折れ線グラフの色をフォレストグリーンに指定する	plt.plot(データ列x, データ列y, color='forestgreen')
散布図のマーカーをクロスにする	plt.scatter(データ列x, データ列y, marker='x')
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
日付データの月数を見る	aDate.month
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
option: チョコレートにグラフの色をする	color = 'chocolate'
オプションで、標準出力を使う	file = sys.stdout
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
縦棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
数式の因数分解を行う	sympy.factor(e)
option: 色をグレーに設定する	color = 'gray'
散布図に黒い四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c='k')
タプルの要素をソートする	sorted(aTuple)
散布図をオリーブ色として描画する	plt.scatter(データ列x, データ列y, color='olive')
カウンタから最も頻出な項目の件数	aCounter.most_common()[1]
ロイヤルブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
赤い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
option: グラフの色をペルーにする	color = 'peru'
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を算出する	df.groupby([column, column2], as_index=False).max()
データフレームのNaNを最大値で置換する	df.fillna(df.max())
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームのリストカラムを10の位で四捨五入する	df[aList].round(-1)
散布図に赤い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
代数計算を用いる	import sympy
データフレームの列の最頻値を求める	df[col].mode()
ヒストグラムの色をアクアマリンに変更する	plt.hist(データ列, color='aquamarine')
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
セットの補集合	aSet.difference(aSet2)
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
黒い四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
文字列中に部分文字列が含まれない	sub not in s
データ列の中央値	ds.median()
日付時刻データのタイムゾーン	aDatetime.timetz()
ミディアムバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
データフレームを表示するとき、小数点以下の表示精度を指定する	pd.set_option('precision', n)
カテゴリで色分けしてデータフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
縦棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
ロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
グリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
配列の平均	np.mean(aArray)
データフレームの列のユニークな値	df[col].unique()
データフレームの各次元の大きさを見る	df.shape
キューのn番目の要素	deq[n]
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
rgbの▼マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの列の一意な値	df[col].unique()
文字列は全て識別子名かどうか調べる	s.isidentifier()
小数点数の逆双曲線正弦	math.asinh(x)
散布図に赤い三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='r')
ヒストグラムの色をライトブルーに変更する	plt.hist(データ列, color='lightblue')
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
文字列の開始位置から部分文字列を探す	s.find(sub, start)
データフレームの列の値がリストに含まれる行を抽出する	df[df[column].isin(aList)]
折れ線グラフをピーチパフ色を使って描画する	plt.plot(データ列x, データ列y, color='peachpuff')
タプル中の要素は少なくとも一つ真かどうか調べる	any(aTuple)
データフレームを各列と列の組み合わせ毎にグループ分けして最小値を求める	df.groupby([column, column2], as_index=False).min()
両端キューからポップする	deq.pop()
一度にデータ列の値をValueMapで置き換える	ds.replace(ValueMap)
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
ヒストグラムをブラック色を用いて描画する	plt.hist(データ列, color='black')
複数のデータ列を箱ヒゲ図にする	plt.boxplot([データ列, データ列])
青い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
枠なしの凡例を加える	plt.legend(frameon=False)
折れ線グラフの色をカラーコードでセットする	plt.plot(データ列x, データ列y, color='#800080')
nが一桁の整数	0 <= n <= 9
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
キューの大きさ	len(deq)
実数の三乗	x ** 3
ディムグレーにヒストグラムの色を指定する	plt.hist(データ列, color='dimgrey')
二つのオブジェクトが同一参照か調べる	obj is obj2
折れ線グラフの三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
折れ線グラフに三角マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
度数分布図を描画する	plt.hist(データ列)
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: ライトグリーンに色を設定する	color = 'lightgreen'
日付時刻データにn日分加算する	aDatetime + datetime.timedelta(days=n)
黒い上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図にrgbのポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
カウンタのktopをリストとして得る	aCounter.most_common(k)
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ハッシュ値	hash(x)
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
空のリッジ回帰とロッソ回帰のハイブリットモデルを用意する	model = sklearn.linear_model.ElasticNet()
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
配列の平均値	np.mean(aArray)
オブジェクトがバイト列クラスかどうか調べる	isinstance(obj, bytes)
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
縦棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
散布図にポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
トマト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
データフレームのリストカラムを100の位で四捨五入して、整数にする	df[aList].round(-2).astype(int)
option: マーカーの色をブラウンにする	markerfacecolor = 'brown'
カラムの文字列を欠損値に変換する	ds.replace(s, np.nan)
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
二つ並べて数列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
タプルとタプルを連結する	aTuple + aTuple2
リストとリストの散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
折れ線プロットを描く	plt.plot(データ列x, データ列y)
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
カラムの値が欠損値か調べる	ds.isna()
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
リストをひとつ置きに取り出す	aList[::2]
データフレームのリストカラムの中に含まれる文字列と日付データの合計を数える	df[aList].isin([value, value2]).sum()
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
S-W検定を行う	scipy.stats.shapiro(データ列)
両端キューが空でない	len(deq) != 0
黒い三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
option: 色をダーク・スラテグレーに設定する	color = 'darkslategrey'
n2がnより大きく、かつ、n3より小さいかどうか調べる	n < n2 and n2 < n3
十六進数字を全部見る	string.hexdigits
散布図を小麦色色を用いて描画する	plt.scatter(データ列x, データ列y, color='wheat')
データフレームの欠損値を直前の値で補う	df.fillna(method='ffill')
データフレームの中に文字列がある	df.isin([value])
折れ線グラフのダイアモンドマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
折れ線グラフの色をミディアムシアグリーンに指定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
数式を数値にする	float(e)
データ列の折れ線グラフを四角印で描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームのどの値が最も現れるか見る	df.mode()
スチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
データフレームのカラムのタイムゾーンを文字列にする	df[col].tz_convert(s)
データフレームのカラムの年	df[col].dt.year
ヒストグラムをオレンジ色を用いて描画する	plt.hist(データ列, color='orange')
ファイルを全部、読み込む	f.read()
リストと配列についての散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
オブジェクトのクラス	type(obj)
列'A'と列'B'をキーにして2つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
散布図の左三角印を赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
ヒストグラムをパープル色として描画する	plt.hist(データ列, color='purple')
文字列の開始位置と終了位置の間に部分文字列が存在するか判定する	s.find(sub, start, end) != -1
四角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
グリッドの線種を一点鎖線に変更する	plt.grid(linestyle='dashbot')
データフレームの2つのカラムを並べて箱ひげ図として描画する	plt.boxplot([df['カラム'], df['カラム']])
行列の行ごとの平均	np.mean(aArray, axis=1)
辞書の浅いコピーを作る	aDict.copy()
データフレームを各列毎にグループ化し、、列の平均値を計算する	df.groupby(column)[column2].mean()
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
折れ線グラフに凡例を設定する	plt.plot(データ列x, データ列y, label='ラベル')
ミントクリーム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
データフレームのカラムの中に文字列とが存在するか調べる	df[col].isin([value, value2])
折れ線グラフをブランチドアーモンド色を使って描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
両端キューの先頭から要素を取り除く	deq.popleft()
xの小数点以下'2'桁までの文字列にする	':.2f'.format(x)
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
文字列の左側からタブを取り除く	s.lstrip('\t')
配列と配列について散布図を描画して、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
ダークブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
方程式の解を計算する	sympy.solve(e)
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
データフレームの列がxより多くx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
グラフを綺麗にする	import seaborn as sns
xを浮動小数点数型に変換する	float(x)
８ビット整数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.int8)
折れ線グラフをアイボリー色として描画する	plt.plot(データ列x, データ列y, color='ivory')
データフレームを列によって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
縦棒グラフを描画し、棒の幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
ファイルを書き込み用にUTF8で開く]	open(filepath, mode='w', encoding='utf-8')
白色で文字列を表示する	print(f'\033[37m{value}\033[0m')
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
option: 色をダークグリーンに変更する	color = 'darkgreen'
リストをコピーする	aList.copy()
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
線グラフの色をロージーブラウンにする	plt.plot(データ列x, データ列y, color='rosybrown')
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
線グラフを半透明の一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
文字列が文字列より辞書順で前か調べる	s < s2
データ列を1000の位で丸めて整数型にする	ds.round(-3).astype(int)
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
カウンタから辞書を引く	aCounter.subtract(aDict)
ペルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
中央値でデータ列の欠損値を埋める	ds.fillna(ds.median())
実数で実数を割って切り捨てる	x // y
自然数最小公倍数を算出する	math.lcm(n, n2)
option: やわらかい青色を使う	color = 'cornflowerblue'
線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
正規分布の確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
リストの要素数	len(aList)
option: グラフの色を黄色に指定する	color = 'yellow'
両端キューの最大長	deq.maxlen
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
カラーマップを用いてヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ダークターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
実数をn乗する	x ** n
ヒストグラムをビスク色を用いて描画する	plt.hist(データ列, color='bisque')
実数の整数部	math.modf(x)[1]
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
リストとリストについての散布図に黒い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
ファイルパスを開き]、バイナリストリームを見る	open(filepath, mode='rb')
縦棒グラフをライトコーラル色として描画する	plt.bar(データ列x, データ列y, color='lightcoral')
データフレームを列の値毎にグループ化して、個数を算出する	df.groupby(column).count()
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
時間を用いる	import time
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
２つのデータフレームを異なる列をキーとして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
二つの表データを横向きに合体させる	pd.merge(df, df2)
option: UTF8を使う	encoding = 'utf-8'
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
散布図にポイントマーカーを加える	plt.scatter(データ列x, データ列y, marker='.')
正則化付き線形モデルを作る	model = sklearn.linear_model.ElasticNet()
rgbのポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
行列の行ごとの最大値を求める	np.max(aArray, axis=1)
線グラフを色付きの破線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
option: 改行を分割記号で使う	sep = '\n'
option: フローラルホワイト色を使う	color = 'floralwhite'
小数点数のタンジェントの逆数	math.atan(x)
グラフの見栄えを綺麗にする	import seaborn as sns
グループ化してデータフレームの散布図を縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
偽陽性を抑えたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
ゴーストホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgray')
データフレームの上位25%	df.quantile(0.25)
単回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
option: 色をライトスレイグレーに設定する	color = 'lightslategray'
サポートベクトル分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフに大バツ印を加える	plt.plot(データ列x, データ列y, marker='X')
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
散布図の下三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
グリーンイエロー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
option: セパレータをコロンにする	sep = ':'
Pythonパスにディレクトリを追加する	sys.path.append(dir)
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
ファイルのベースファイル名	os.path.splitext(os.path.basename(filepath))[0]
散布図の丸マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
文字列はリストの要素でない	element not in aList
キューをタプルに変換する	tuple(deq)
クラス分類をランダム性を強化したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
ベクトルの演算をする	import numpy as np
実数から実数を引く	x - y
'A'列によってデータフレームを昇順にソートする	df.sort_values(by='A', ascending=True)
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
小数点以下の表示精度を設定する	pd.set_option('precision', n)
新しいガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: ライムにグラフの色を変更する	color = 'lime'
線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
カウンタを辞書で更新する	aCounter.update(aDict)
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
横棒グラフを描画する	plt.barh(ラベル列, データ列)
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
0からN未満までのベクトル	np.arange(N)
option: デピンクにグラフの色を変更する	color = 'deeppink'
ベクトルのスカラー倍を求める	aArray * n
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
分類結果の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
横棒グラフをカーキ色として描画する	plt.barh(データ列x, データ列y, color='khaki')
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
nがn2で割り切れる	n % n2 == 0
option: サドルブラウンにグラフの色を設定する	color = 'saddlebrown'
エクセルデータファイルからnという名前のシートを読み込む	pd.read_excel(filename, sheet_name=n)
暗い赤色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
コーラル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
カテゴリで色分けして、データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
option: グラフの色をハニーデューに設定する	color = 'honeydew'
文字列を部分文字列で二分し前半の文字列を求める	s.partition(sub)[0]
散布図を赤い左三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='<', c='r')
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
option: グラフの色を小麦色に設定する	color = 'wheat'
スクリプトの名前	sys.argv[0]
データフレームを列を用いてグループ化し、、それぞれのグループごとの件数を知る	df.groupby(column).size()
option: マーカーをポイントに変更する	marker = '.'
棒グラフをレモンシフォン色を用いて描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
カウンタからゼロカウントを取り出す	+aCounter
日付時刻データが金曜日	aDatetime.weekday() == 4
濃い青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgrey')
t-SNEで多次元データを淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
日付時刻データの秒数を使う	aDatetime.second
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
xが1もしくは2	x == 1 or x == 2
リストの先頭を使う	aList[0]
option: ダイアモンドマーカーを描画する	marker = 'D'
データ列とリストについて散布図を描いてマーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
両端キューから最初の要素を取り除く	deq.remove(element)
nを符号付きで長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
option: タブを区切りで使う	sep = '\t'
データフレーム全体をインデックスによってソートする	df.sort_index()
線グラフの色をスカイブルーに変更する	plt.plot(データ列x, データ列y, color='skyblue')
文字列の開始位置から終了位置の範囲で部分文字列の登場回数をカウントする	s.count(sub, start, end)
文字列を黒色で出力する	print(f'\033[30m{value}\033[0m')
数式の変数にnを代入する	e.subs(z, n)
折れ線グラフに左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
今日は何曜日か知る	datetime.datetime.today().weekday()
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
線グラフの色をオレンジレッドにする	plt.plot(データ列x, データ列y, color='orangered')
データフレームを複数の列によって大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
データフレームのカラムの歪度	df[col].kurt()
色付きの破線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
リストを引数として展開して表示する	print(*aList)
カウンタの項目を列挙する	aCounter.keys()
一点鎖線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dashbot')
実行を異常終了する	sys.exit(1)
浮動小数点数に数を掛ける	x * y
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
オブジェクトは辞書型か調べる	isinstance(obj, dict)
タプルを引数として展開して表示する	print(*aTuple, sep=',')
option: ホットピンクを使う	color = 'hotpink'
nまたはn2	n or n2
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
データフレームの列の欠損値を直後の値に設定する	df[col].fillna(method='bfill')
データフレームを破壊的に列によってによってソートする	df.sort_values(by=column, inplace=True)
日付時刻データからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
各列毎にデータフレームを集計して、列の最大値を算出する	df.groupby(column)[column2].max()
option: 紺に色を設定する	color = 'darkblue'
nからいつまでもカウントアップする	itertools.count(start=n)
option: ライトゴールドロディイエロー色を用いる	color = 'lightgoldenrodyellow'
折れ線グラフを青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
実数のn乗	pow(x, n)
データ列の欠損値を最小値で置換する	ds.fillna(ds.min())
リストとイテラブルについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
カテゴリに並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
連立方程式の解を求める	sympy.solve([e, e2])
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
リストにリストを加えて拡張する	aList.extend(aList2)
棒グラフをゴールド色として描画する	plt.bar(データ列x, データ列y, color='gold')
折れ線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
option: モカシンを使う	color = 'moccasin'
ディムグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
黒い三角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
グラフ中のフォントを指定する	sns.set(font=フォント名)
option: グラフの色を暗い赤に設定する	color = 'darkred'
表データを列の値によってグループ化し要約統計量を求める	df.groupby(column).describe()
サンディーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
JSONLファイルにエクセルファイルファイルでデータフレームを保存する	df.to_excel(filename)
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
要素が集合のメンバーに含まれない	element not in aSet
部分文字列で文字列を区切る	s.split(sub)
グラフに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
多重集合を辞書から作る	collections.Counter(aDict)
グラフのy軸を対数目盛に変更する	plt.yscale('log')
散布図を▲印で描画する	plt.scatter(データ列x, データ列y, marker='^')
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
ラベンダー色でヒストグラムを描画する	plt.hist(データ列, color='lavender')
ブランチドアーモンド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
データフレームのカラムを並べてボックスチャートにする	plt.boxplot([df['カラム'], df['カラム']])
八進文字列を整数に変換する	int(s, 8)
角度のラジアン	math.radians(degree)
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
nがn2以上かどうか調べる	n >= n2
折れ線グラフをデピンク色として描画する	plt.plot(データ列x, データ列y, color='deeppink')
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
Pythonパスの一覧	sys.path
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgray')
折れ線グラフに青い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
アリスブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
option: コーンズシルク色を使う	color = 'cornsilk'
折れ線グラフの色をターコイズに変更する	plt.plot(データ列x, データ列y, color='turquoise')
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
カウンタの交わり演算する	aCounter & aCounter2
データフレームの二つのカラムを並べて箱ひげ図として描画する	plt.boxplot([df['カラム'], df['カラム']])
データフレームのリストカラムの欠損値を後の行の値に設定する	df[aList].fillna(method='bfill')
マッピングからキーの値をエラーなく見る	aDict.get(key, None)
データフレームのリストカラムを100の位で四捨五入する	df[aList].round(-2)
日付データからn日を減算する	aDate - datetime.timedelta(days=n)
nを否定する	not n
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
横棒グラフをダークシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ファイルをBOM付きとして追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
回帰木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
新しいリッジ回帰とロッソ回帰のハイブリットモデルを用意する	model = sklearn.linear_model.ElasticNet()
小数点数以下の最大の整数	math.floor(x)
トマト色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
データ列とリストについての散布図に黒い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームから一行をランダムに抽出する	df.sample()
回帰モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
書き込むCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
文字列を走査し、パターンにASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
グラフの横軸を対数に変更する	plt.xscale('log')
区間数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
実数の平方根を求める	math.sqrt(x)
データフレームのリスト列を正規表現patternでまとめて置き換える	df[aList].replace(pattern, repl, regex=True)
キーが辞書に存在するか調べる	key in aDict
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
リストの最初	aList[0]
NULLに等しい値	None
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
散布図の丸マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
双方向キューの要素をインプレースに反転する	deq.reverse()
実数の余弦	math.cos(x)
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
option: エラーがあるとき、例外を発生させるようにする	errors = 'strict'
折れ線グラフにダイアモンドマーカーを加える	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムを一点鎖線として描画する	plt.hist(データ列, linestyle='dashbot')
文字列の両端から空白と改行を除く	s.strip()
回帰分析を勾配ブースティングでする	model = sklearn.ensemble.GradientBoostingRegressor()
データフレームのpercent分位数	df.quantile(percent/100)
列をキーにして2つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
ピンク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
配列を転置する	aArray.T
データ列のUNIX秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
option: 大バツマーカーを描画する	marker = 'X'
データフレームのリストカラムの欠損値を平均にする	df[aList].fillna(df[aList].mean())
自然数LCM	math.lcm(n, n2)
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
タプルの先頭を除く	aTuple[1:]
option: ミディアムブルーを使う	color = 'mediumblue'
リストとリストについて散布図をプロットして、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
ファイルパスをUTF8でオープンする]	open(filepath, encoding='utf-8')
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を計算する	df.groupby([column, column2], as_index=False).max()
配列とデータ列の散布図を描画してダイアモンドマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
切り捨てながらnをn2分の一にする	n //= n2
文字列を小文字に変換する	s.lower()
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
上位集合	aSet.issuperset(aSet2)
値を白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
半透明の破線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
リストとリストについて散布図を描画して、マーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
option: 複数行に対応する	flag = re.MULTILINE
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
プロットをポスター用に設定する	sns.set(context='poster')
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
option: ダークバイオレット色を使う	color = 'darkviolet'
縦棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
棒グラフをシャルトリューズ色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
ベクトルと同じ大きさの空ベクトルを初期化する	np.empty_like(aArray)
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データ列の欠損値をxに変更する	ds.fillna(x)
option: ゴールド色を使う	color = 'gold'
リストをビン数nでビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
コレクションを使う	import collections
文字列の中の正規表現による全マッチを求める	re.findall(pattern, s)
データ列が正規分布からどの程度、歪んでいるか調べる	ds.kurt()
データフレームのカラムの値が未入力値かどうか調べる	df[col].isna()
横棒グラフをラベンダー色として描画する	plt.barh(データ列x, データ列y, color='lavender')
青紫色でヒストグラムを描画する	plt.hist(データ列, color='violet')
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
オプションで、標準エラーを使う	file = sys.stderr
線グラフの色をイエローグリーンに指定する	plt.plot(データ列x, データ列y, color='yellowgreen')
ケンドール相関係数でデータフレームのリストで指定された列の相関行列を求める	df[aList].corr(method='kendall')
棒グラフをミディアムターコイズ色として描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
日付時刻データは日付時刻データより前かどうか調べる	aDatetime < aDatetime2
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
小数点数はNaNか調べる	math.isnan(x)
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
タイムスタンプデータが何分か知る	aDatetime.minute
ライム色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
リストの末尾を使う	aList[-1]
配列をビン数nでビン分割する	pd.cut(aArray, n)
線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ポスター用にグラフを設定する	sns.set(context='poster')
折れ線グラフのマーカーを▽にする	plt.plot(データ列x, データ列y, marker='v')
コマンド引数の一覧	sys.argv[1:]
プラム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
色調をパステル調にする	sns.set(pallete='pastel')
ライトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
option: 欠損値を含めない	dropna = True
文字列を区切りで分割して、文字列リストに変換する	s.split(sep)
配列の要素数を求める	aArray.size
正規表現に文字列がマッチさせる	re.match(pattern, s)
nとn2の値を足してnに代入する	n += n2
文字列の両端から余分な空白と改行を除く	s.strip()
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
列の欠損値をxで置換する	ds.fillna(x)
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
option: 色をディープスカイブルーに設定する	color = 'deepskyblue'
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
L2ノルムを用いてデータを正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
散布図をダーク・スラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
実数の整数部を計算する	math.modf(x)[1]
横棒グラフをダークマゼンタ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
ダークレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
文字列が全て小文字	s.islower()
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
option: サンディーブラウンを使用する	color = 'sandybrown'
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列内にひとつでも小文字が含まれるかどうか調べる	any(c.islower() for c in s)
nとn2のXOR	n ^ n2
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
リストとリストの散布図を描いて大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データ列の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
日付データは何曜日か知る	aDate.weekday()
option: フクシア色を使用する	color = 'fuchsia'
散布図の▽マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
リストを折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
カウンタの要素の出現回数	aCounter[element]
棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
折れ線グラフの色をオレンジレッドに指定する	plt.plot(データ列x, データ列y, color='orangered')
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgrey')
リストをビン数nとしてビニングする	pd.cut(aList, n)
パスの区切り記号を用いる	os.sep
リストが全て真かどうか調べる	all(aList)
散布図の三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
コマンドフラグの状態	sys.flags
横棒グラフをダークシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkcyan')
白色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
データフレームのデータを条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
イテラブルの重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームを百の位で丸めて整数型にする	df.round(-2).astype(int)
マゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='magenta')
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
グラフにグリッド線を加える	plt.grid(True)
ヒストグラムの色をピーチパフに指定する	plt.hist(データ列, color='peachpuff')
データ列の要約統計量	ds.describe()
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
option: 改行コードを動作環境依存に指定する	newline = None
分類モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
option: グラフの色をミントクリームに指定する	color = 'mintcream'
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
文字列を左トリムする	s.lstrip()
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
データ列の第一四分位数	ds.quantile(0.25)
option: グラフの色をアクアにセットする	color = 'aqua'
浮動小数点数を百の位で丸める	round(x, -2)
データフレームとデータ列を横方向にくっつける	pd.concat([df, ds], axis=1)
カラムの歪度	ds.kurt()
行列演算を行う	import numpy as np
year年month月を日付にする	datetime.date(year=year, month=month, day=1)
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
option: 大バツ印を描画する	marker = 'X'
エンコーディング	sys.getdefaultencoding()
折れ線グラフの右三角印の色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データ列のNaNを直後の値に変更する	ds.fillna(method='bfill')
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
option: ナバホホワイト色を使用する	color = 'navajowhite'
リストとリストの散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
データ列の記述統計量	ds.describe()
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
日付データが木曜日かどうか調べる	aDate.weekday() == 3
option: マーカーの色を黄緑にする	markerfacecolor = 'chartreuse'
データフレームのそれぞれのグループ毎の最小値	df.groupby(column).min()
棒グラフをミディアムスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
要素が集合に含まれないかどうか	element not in aSet
リストを黄色にする	f'\033[33m{value}\033[0m'
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
変数を黄色にする	f'\033[33m{value}\033[0m'
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
データフレームの欠損値をモードに指定する	df.fillna(df.mode().iloc[0])
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
データフレームを'A'列と'B'列によって小さい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
文字列をパターンによって置き換える	re.sub(pattern, newsub, s)
パレットトルコイズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
rgbの丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
アンティークホワイト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
列の空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
主成分分析の準備をする	model = sklearn.decomposition.PCA(n_components=n)
rgbの菱形マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データを最大最小値として標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
組をn回結合する	aTuple * n
オブジェクトがプロパティを持つか	hasattr(obj, プロパティ名)
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
データフレームを二つの列の値でグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
折れ線グラフの色を青緑に変更する	plt.plot(データ列x, データ列y, color='teal')
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
データフレームの列のNaNをモードで補う	df[col].fillna(df[col].mode().iloc[0])
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
ふたつの集合の共通部分	aSet.intersection(aSet2)
線グラフを半透明の破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ヒストグラムの色を濃いシアンに指定する	plt.hist(データ列, color='darkcyan')
option: インディゴにフォントの色を設定する	color = 'indigo'
点線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
プラットホームはウィンドウズか調べる	sys.platform.startswith('win32')
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
ファイルを開いて]バイナリストリームを使う	open(filepath, mode='rb')
折れ線グラフの△マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームのカラムの中に文字列と文字列がいくつあるかカウントする	df[col].isin([value, value2]).sum()
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ゼロ埋めされた８ビット整数型の配列を初期化する	np.zeros(要素数, dtype=np.int8)
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列を走査し、正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
option: 分割記号をスラッシュにする	sep = '/'
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
rgbの左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列の最初だけ大文字化する	s.capitalize()
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
赤い右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
折れ線プロットの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
リスト内の要素が全て真か調べる	all(aList)
散布図に黒い右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフの菱形印を黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
rgbの星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
縦棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
option: 青緑を用いる	color = 'turquoise'
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
option: ダークスレートブルー色を使う	color = 'darkslateblue'
実部と虚部から複素数	complex(x, y)
文字列がタプルに含まれないかテストする	element not in aTuple
データフレームを列の値でグループ化して列挙する	[(name, group) for name, group in df.groupby(column)]
パパイヤウィップ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
カラーバーを描画する	plt.colorbar()
実数を文字列に変換する	str(x)
ディープスカイブルーにヒストグラムの色を指定する	plt.hist(データ列, color='deepskyblue')
ヒストグラムをマゼンタ色を用いて描画する	plt.hist(データ列, color='magenta')
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
本日をタプルに変換する	datetime.datetime.today().timetuple()
データフレームのリスト列の欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
折れ線グラフをミディアムバイオレットレッド色を使って描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
カラーバーを横向きで描く	plt.colorbar(orientation='horizontal')
部分文字列で文字列が終わるか調べる	s.endswith(sub)
ファイルをバイナリ書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='wb')
第二コマンド引数	sys.argv[1]
オブジェクトがあるクラスかテストする	isinstance(obj, クラス)
文字列を最後の部分文字列で分割したときの後半の文字列	s.rpartition(sub)[-1]
ヒストグラムをベージュ色を用いて描画する	plt.hist(データ列, color='beige')
1行だけ改行なしで標準入力から読む	sys.stdin.readline().rstrip()
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
データフレームの列をヒストグラムで描く	plt.hist(df[column])
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
リストを緑色でプリントする	print(f'\033[32m{value}\033[0m')
データ列の曜日数	ds.dt.dayofweek
散布図をマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='magenta')
option: フォントの色をライトグレーに指定する	color = 'lightgray'
option: シエナ色を使用する	color = 'sienna'
黒い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
シエナにヒストグラムの色を設定する	plt.hist(データ列, color='sienna')
ミディアムパープル色でヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
日付データの日数を見る	aDate.day
赤い△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
カラムの中に文字列とがいくつ存在するかカウントする	ds.isin([value, value2]).sum()
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
データ列を平方根変換する	np.sqrt(データ列)
文字列を区切りで区切って、文字列リストにする	s.split(sub)
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
値を太文字にする	f'\033[1m{value}\033[0m'
横棒グラフをミディアムバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
正規分布として乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
数式の部分分数化を行う	sympy.apart(e)
option: オリベドラブ色を使用する	color = 'olivedrab'
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
部分文字列で文字列を分けたときの前半の文字列	s.partition(sub)[0]
散布図の大バツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
要素をデックの先頭に追加する	deq.appendleft(element)
配列にはいくつ要素があるか調べる	aArray.size
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
実数の天井数	math.ceil(x)
option: クロスマーカーを使う	marker = 'x'
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int)
二数の最小値を算出する	min(x, y)
ヒストグラムをダークゴールデンロッド色を用いて描画する	plt.hist(データ列, color='darkgoldenrod')
nの各桁の総和	sum(map(int, str(n)))
ヒストグラムの色をコーンズシルクに指定する	plt.hist(データ列, color='cornsilk')
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
オプションで、ファイルを出力先にする	file = sys.open(filename, 'w')
ゲインズボロ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
最大長のある両端キュー	collections.deque(maxlen=n)
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
散布図のポイント印を青色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
nがn2の倍数	n % n2 == 0
折れ線グラフのダイアモンドマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
切り捨てながらnをn2分の1にする	n //= n2
option: 小麦色色を使用する	color = 'wheat'
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
イテラブルにタプルを続けた列	itertools.chain(iterable, iterable2)
折れ線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
タプルの要素を小さい方からソートする	sorted(aTuple, reverse=True)
Pandasで、エポック秒の文字列からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
ヒストグラムの上限下限を設定する	plt.hist(データ列, range=(start, end))
変数を入れ替える	x, y = y, x
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
option: 色をオールドレースに変更する	color = 'oldlace'
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
option: シルバーに色を設定する	color = 'silver'
空のヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: グラフの色をディムグレーに指定する	color = 'dimgray'
タイムスタンプデータを浮動小数点数に変換する	aDatetime.timestamp()
ライトイエロー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
option: ビスク色を使う	color = 'bisque'
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
折れ線グラフの色をタンに変更する	plt.plot(データ列x, データ列y, color='tan')
option: ダークグレー色を使う	color = 'darkgrey'
option: ミッドナイトブルー色を使う	color = 'midnightblue'
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
option: ライトスチールブルー色を使用する	color = 'lightsteelblue'
折れ線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
カラーバーを横向きにつける	plt.colorbar(orientation='horizontal')
option: フォントの色をやわらかい青に変更する	color = 'cornflowerblue'
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
ライトコーラル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
オーキッド色でヒストグラムを描画する	plt.hist(データ列, color='orchid')
折れ線グラフの色をオールドレースに指定する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
TSVファイルからCSVをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
option: バッファのサイズを指定する	buffering = 4096
オブジェクトはリストかタプル	isinstance(obj, (list)
ゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='goldenrod')
rgbの四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列をn回繰り返す列	itertools.repeat(element, n)
データフレームを確認する	df.head()
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
列から計数器を作る	collections.Counter(iterable)
ゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
データ列のpercent分位数を計算する	ds.quantile(percent/100)
option: ブラック色を使う	color = 'black'
赤いダイアモンドマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='r')
黒いバツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データ列を2つ並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
ファイルのディレクトリ名を使う	os.path.dirname(filepath)
データフレームの列を削除して、入れ替える	df.drop(column, axis=1, inplace=True)
ファイルパスを書き込みモードとしてオープンする]	open(filepath, mode='w')
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
データ列の中に日付データと文字列がいくつ存在するか求める	ds.isin([value, value2]).sum()
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
散布図に赤い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
イテラブルとリストについての散布図に赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: 色をゴールドに設定する	color = 'gold'
セットの浅いコピー	aSet.copy()
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
ミディアムバイオレットレッドにヒストグラムの色を指定する	plt.hist(データ列, color='mediumvioletred')
データフレームの中にあるの合計を数える	df.isin([value]).sum()
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
文字列の末尾が部分文字列か調べる	s.endswith(sub)
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
タイムスタンプデータのタイムゾーンを使う	aDatetime.timetz()
整数乱数で要素を埋めたベクトル	np.random.randint(開始値, 終了値, N)
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームを各列毎に集約して、列の最小値を算出する	df.groupby(column)[column2].min()
オブジェクトが集合型のインスタンスか確認する	isinstance(obj, set)
option: ライトブルー色を用いる	color = 'lightblue'
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
option: グリーンイエロー色を使う	color = 'greenyellow'
セットからエラーなく値を取り除く	aSet.discard(element)
データフレームを100の位で丸める	df.round(-2)
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
イエローグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
日付時刻データにn分分、足す	aDatetime + datetime.timedelta(minutes=n)
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
カウンタの積集合を求める	aCounter & aCounter2
平均値でデータフレームの列のNaNを補う	df[col].fillna(df[col].mean())
データフレームの先頭n行	df.head(n)
棒グラフの色をティールにする	plt.bar(データ列x, データ列y, color='teal')
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
ダークスレートブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
option: 読み込まない列番号をnamesで指定する	skiprows = names
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
rgbの下三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: 区切りをスラッシュにする	sep = '/'
nの3乗	n ** 3
散布図に▼印を使う	plt.scatter(データ列x, データ列y, marker='v')
散布図の星マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
データ列の曜日が何日目か見る	ds.dt.dayofweek
データフレームをCSVから読み込む	pd.read_csv(filename, sep=',')
nの無限イテラブルを求める	itertools.repeat(n)
タプルの末尾	aTuple[-1]
option: グラフの色を紺に設定する	color = 'darkblue'
文字列をコロンで分割して、列挙する	s.split(':')
２次元リストを転置する	[list(x) for x in list(zip(*aList))]
nがn2と等しいか調べる	n == n2
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
シアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
文字列を区切りで分割して、文字列リストにする	s.split(sep)
データフレームの重複していない行のみ	df[not df.duplicated(keep=False)]
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
文字列を太字にする	f'\033[1m{value}\033[0m'
ヒストグラムを２つ並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
リストをn個にビン分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
横棒グラフをアクア色として描画する	plt.barh(データ列x, データ列y, color='aqua')
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
配列は何のデータ型か調べる	aArray.dtype()
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
文字列を部分文字列で分けたときの残りの文字列を取り出す	s.partition(sub)[-1]
スタックのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
データフレームのカラムを散布図として可視化する	sns.scatterplot(data=df, x='列名', y='列名')
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
ヒストグラムの色をグレーにする	plt.hist(データ列, color='grey')
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
ヒストグラムを一点鎖線でプロットする	plt.hist(データ列, linestyle='dashbot')
文字列を改行で区切り、文字列リストにする	s.splitlines()
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
ヒストグラムを黄緑色で描画する	plt.hist(データ列, color='chartreuse')
アルファベットの大文字を全て使う	string.ascii_uppercase
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
レベッカパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
棒グラフの色をバイオレットにする	plt.bar(データ列x, データ列y, color='violet')
要素が集合に含まれないか調べる	element not in aSet
データフレームのカラムの欠損値をxに指定する	df[col].fillna(x)
ひとつでも空白が文字列内に含まれるか調べる	any(c.isspace() for c in s)
カラムの欠損値を平均で補う	ds.fillna(ds.mean())
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
星マーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
組の先頭を使う	aTuple[0]
option: フォントの色をダークレッドにする	color = 'darkred'
データ列のユニークな値の個数	ds.nunique()
ディムグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
year年month月の日付	datetime.date(year=year, month=month, day=1)
線グラフの色をミントクリームに指定する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームのカラムが文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
SJISで文字列をバイト列にする	s.encode(encoding='sjis', errors='ignore')
nまでの偶整数列を得る	list(range(2, n, 2))
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
文字列の最後から空白を取り除く	s.rstrip()
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
データフレームの中の列をビン数nを用いてビンニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
浮動小数点数を実数で割った余り	x % y
リストと配列についての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
文字列を区切りで区切って、列挙する	s.split(sep)
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
柱状図を上限から下限までの区間で描く	plt.hist(データ列, range=(start, end))
データフレームを各列と列の組み合わせ毎にグループ化して、合計を計算する	df.groupby([column, column2], as_index=False).sum()
文字列中に非大文字が含まれるか	any(not c.isupper() for c in s)
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
クラス分類をガウス過程でする	model = sklearn.gaussian_process.GaussianProcessClassifier()
棒グラフをアイボリー色として描画する	plt.bar(データ列x, データ列y, color='ivory')
SJISで文字列をバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
ヒストグラムの色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
データフレームの列をインデックスに指定する	df.set_index(column)
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
option: フォントの色をパープルに設定する	color = 'purple'
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
縦棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
線グラフをライトイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームのNaNを第二四分位数に設定する	df.fillna(df.median())
散布図に赤い▽マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='r')
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
文字列の開始位置番目と終了位置番目の間に部分文字列がないか	s.find(sub, start, end) == -1
option: 黄色を使う	color = 'yellow'
ヒストグラムをローングリーン色を用いて描画する	plt.hist(データ列, color='lawngreen')
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
データフレームの中にとが存在するか調べる	df.isin([value, value2])
０で全要素を初期化した複素数型の行列を作る	np.zeros(行数, 列数, dtype=bool)
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
ゴーストホワイト色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
option: ライトイエロー色を用いる	color = 'lightyellow'
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
リストをn個に等間隔で分割する	pd.cut(aList, n)
option: バイナリ用に指定する	mode = 'rb'
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
黒い星マーカーを配列と数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: ダークスラテグレーを使用する	color = 'darkslategray'
オブジェクトがタプルの要素でないか	element not in aTuple
クラス分類のリコールを算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
真紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
四角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
文字列の接頭辞は部分文字列	s.startswith(sub)
option: 色を白に設定する	color = 'white'
日付時刻データが日曜日かどうか調べる	aDatetime.weekday() == 6
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
折れ線グラフをミッドナイトブルー色として描画する	plt.plot(データ列x, データ列y, color='midnightblue')
カウンタの最頻出な要素を算出する	aCounter.most_common()[0]
データ列は何月か見る	ds.dt.month
リスト中の文字列が最初に見つかる位置	aList.index(element)
折れ線グラフの右三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
多次元データを多次元尺度構成法で淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
表の中の列と列に重複があれば、消す	df.drop_duplicates(subset=column)
連立方程式の解を計算する	sympy.solve([e, e2])
折れ線グラフの大バツマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
整数nをバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgrey')
文字列をケースを無視してパターンで分割する	re.split(pattern, s, flags=re.IGNORECASE)
右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
ミディアムアクアマリンにヒストグラムの色を変更する	plt.hist(データ列, color='mediumaquamarine')
変数を赤色でプリントする	print(f'\033[31m{value}\033[0m')
データ列の未入力値を直前の値に設定する	ds.fillna(method='ffill')
散布図をrgbの丸マーカーとして描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
辞書から項目名の値を得る	aDict.get(key)
箱ひげ図でデータフレームの二つの列を並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
year年のタイムスタンプ	datetime.datetime(year=year, month=1, day=1)
nを符号なしでバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
データフレームの先頭n行を確認する	df.head(n)
ヒストグラムをミスティローズ色として描画する	plt.hist(データ列, color='mistyrose')
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
2数の最大値	max(x, y)
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
列とイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
option: サンディーブラウン色を用いる	color = 'sandybrown'
文字列を白色で出力する	print(f'\033[37m{value}\033[0m')
データフレームの累積分布をプロットする	sns.ecdfplot(x='列名', data=df)
タブ区切りのファイルからCSVファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
option: マルーンを使う	color = 'maroon'
データフレームを複数の列を用いて並べ、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
集合を変更不能に変換する	frozenset(aSet)
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
縦棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
ベクトルが何のデータ型か調べる	aArray.dtype()
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
タイムスタンプデータが火曜日か調べる	aDatetime.weekday() == 1
ダークマゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
タプルの平均値	sum(aTuple)/len(aTuple)
ファイルパスとfilenameを結合する	os.path.join(filepath, filename)
列の名前を列挙する	df.columns
多次元データをt-SNEとして濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
データフレームを列によって昇順に整列する	df.sort_values(by=column, ascending=True)
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
散布図に左三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='<')
横棒グラフをオリーブ色として描画する	plt.barh(データ列x, データ列y, color='olive')
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
イテラブルから重複なく、n要素ランダムに選ぶ	random.sample(iterable, k=n)
折れ線グラフの線の種類を実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
カテゴリで色付けしてデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
データフレームを２つの列によってソートして更新する	df.sort_values(by=['A', 'B'], inplace=True)
文字列は全て印字できるか調べる	s.isprintable()
タイムスタンプデータと日付時刻データの時間差	aDatetime - aDatetime2
二つの浮動小数点数は十分に近い	math.isclose(x, x2)
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
フクシア色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
入力ストリームを全部読み込む	f.read()
ピアソン積率相関係数でデータフレームの相関行列を求める	df.corr(method='pearson')
散布図の△マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームを'A'列と'B'列の値によってグループ化し、基本統計量を求める	df.groupby(['A', 'B']).describe()
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
散布図をゴールド色を使って描画する	plt.scatter(データ列x, データ列y, color='gold')
文字のユニコード	ord(ch)
折れ線グラフの大バツマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
配列と同じ大きさの空の配列を初期化する	np.empty_like(aArray)
文字列リストを連結し、一つの文字列にする	''.join(map(str, iterable))
折れ線グラフに丸印を使う	plt.plot(データ列x, データ列y, marker='o')
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
プラットフォームのコードポイントの最大値	sys.maxunicode
ヒストグラムをダークグレー色を使って描画する	plt.hist(データ列, color='darkgrey')
線グラフの色をミスティローズに変更する	plt.plot(データ列x, データ列y, color='mistyrose')
散布図の右三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
option: グラフの色をアイボリーに変更する	color = 'ivory'
ヒストグラムの色を淡いピンク色に指定する	plt.hist(データ列, color='lightpink')
散布図の▽マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームのカラムを百の位で丸めて、整数型にする	df[col].round(-2).astype(int)
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
Pandasでデータフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
相関係数を計算する	scipy.stats.pearsonr(データ列, データ列2)
棒グラフをインディゴ色として描画する	plt.bar(データ列x, データ列y, color='indigo')
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
ダークグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
点線を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
リストのn番目からn2番目までを取り出す	aList[n:n2]
青い実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: ダークバイオレットにグラフの色を設定する	color = 'darkviolet'
option: オールドレース色を使う	color = 'oldlace'
小文字を全部使う	string.ascii_lowercase
データフレームの列をにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
シーグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
散布図のポイントマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
プロットの背景色を暗くする	sns.set(style='darkgrid')
実数のn乗	x ** n
option: タブをセパレータで使う	sep = '\t'
値がセットのメンバーに含まれないか	element not in aSet
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
行列の次元数	aArray.ndim
双方向キューのサイズ	len(deq)
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
文字列はPythonのキーワードか確認する	keyword.iskeyword(s)
データフレームのリスト列が正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
分類モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
変数が無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, oo)
行列の演算を行う	import numpy as np
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
数値を数値に変換する	float(e)
折れ線グラフを青い実線を使って描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
折れ線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
カテゴリ列でグループ化して、データフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
文字列の最初から部分文字列を探す	s.find(sub)
ライトゴールドロディイエロー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
オブジェクトのプロパティを値に指定する	setattr(obj, プロパティ名, 値)
特異値分解で多次元データを濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
大量のデータ列が正規分布に従うか仮説検定する	scipy.stats.kstest(データ列, 'norm')
データフレームのカラムの秒を見る	df[col].dt.second
最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
線グラフの色を青緑に変更する	plt.plot(データ列x, データ列y, color='teal')
折れ線グラフを半透明の点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: フォントの色をシエナに指定する	color = 'sienna'
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
二つのリストから辞書を作る	dict(zip(aList, aList2))
ヒストグラムをライムグリーン色として描画する	plt.hist(データ列, color='limegreen')
データフレームのリスト列の欠損値を前の行の値で置換する	df[aList].fillna(method='ffill')
アリスブルー色でヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
option: フォレストグリーンにグラフの色を指定する	color = 'forestgreen'
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
バリーウッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
折れ線グラフのマーカーを右三角印にする	plt.plot(データ列x, データ列y, marker='>')
ひとつでも空白が文字列内に含まれる	any(c.isspace() for c in s)
線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
option: ダークオリーブグリーン色を使用する	color = 'darkolivegreen'
option: 珊瑚色を用いる	color = 'coral'
線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
クラス分類のリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
rgbの四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
二つのデータフレームを縦方向につなぐ	pd.concat([df, df2], axis=0)
ヒストグラムをシーグリーン色を使って描画する	plt.hist(データ列, color='seagreen')
文字列を最後の部分文字列で分けた時の前半の文字列	s.rpartition(sub)[0]
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
フローラルホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
小数点数とyのノルム	math.hypot(x, y)
小麦色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
文字列がひらがなか	('ぁ' <= ch <= 'ん')
横棒グラフをダークシアグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
データフレームのNaNを最小値で補う	df.fillna(df.min())
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
線グラフを青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
データ列とデータ列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ヒストグラムをアリスブルー色として描画する	plt.hist(データ列, color='aliceblue')
ダークグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
オブジェクトの参照カウント	sys.getrefcount(obj)
option: 改行しない	end = ''
ヒストグラムをレモンシフォン色として描画する	plt.hist(データ列, color='lemonchiffon')
濃い青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
データフレームを'A'列の値によって集約して、列挙する	[(name, group) for name, group in df.groupby('A')]
ロージーブラウン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データフレームから重複を残さず、消す	df.drop_duplicates(keep=False)
線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>')
数値を積分する	sympy.integrate(e)
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
イテラブルを文字列に変換して空白で一つにする	' '.join(map(str, iterable))
標準入力を用いる	sys.stdin
二つのデータフレームを異なる列をキーにして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
option: フォントの色をフローラルホワイトに設定する	color = 'floralwhite'
ヒストグラムをリネン色を用いて描画する	plt.hist(データ列, color='linen')
縦棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
辞書の値も複製する	{k: copy.copy(v) for k, v in aDict.items()}
線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
option: 改行コードをWindowsに変更する	newline = '\r\n'
コーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
文字列をセパレータを用いて分割して、列挙する	s.split(sep)
option: カーキを使う	color = 'khaki'
option: マーカーを星に変更する	marker = '*'
列をキーにして二つのデータフレームを内部ジョインする	pd.merge(df, df2, on=column, how='inner')
データフレームの中にある日付データと日付データの個数をカウントする	df.isin([value, value2]).sum()
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データ列の変遷を半透明の点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: 改行コードを旧Macにする	newline = '\r'
青い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
option: ダークグリーンにフォントの色を設定する	color = 'darkgreen'
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
変数を白色で出力する	print(f'\033[37m{value}\033[0m')
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データ列の折れ線グラフを丸印で描画する	plt.plot(データ列x, データ列y, marker='o')
両端キューの末尾にシーケンスの各要素を付け加える	deq.extend(iterable)
option: 青色を用いる	color = 'blue'
文字列の両端から余分な空白を除去する	s.strip()
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
変数が0に近づくときの数式の極限値を計算する	sympy.limit(e, z, 0)
ブラック色として線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
縦棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
ヒストグラムとして配列を可視化する	plt.hist(データ列)
散布図をミディアムアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
円グラフでデータ列の割合を作図する	plt.pie(データ列, startangle=90)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
赤い破線で線を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
配列の推移を色付きの一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ダークカーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
グラフを見やすくする	import seaborn as sns
線グラフの色をベージュにセットする	plt.plot(データ列x, データ列y, color='beige')
勾配ブースティングでクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
リストをひとつ飛ばしで抽出する	aList[::2]
整数の順列の総数を求める	math.perm(n)
データ列の推移を色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームのリスト列の中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
パラメータが0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
縦棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
Pandasで、書式fmtでデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col], format=fmt)
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
ヒストグラムの色をオリベドラブにセットする	plt.hist(データ列, color='olivedrab')
全ての句読点文字	string.punctuation
ファイルパスをBOM付きとしてオープンする]	open(filepath, encoding='utf_8_sig')
正規分布による累積分布関数の逆関数を用いる	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
散布図を赤い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
配列とリストの散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームを1000の位で四捨五入して、整数型にする	df.round(-3).astype(int)
option: カデットブルーを使う	color = 'cadetblue'
黄色色として線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
空列	[]
赤いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
横棒グラフをゴールド色として描画する	plt.barh(データ列x, データ列y, color='gold')
タプルの末尾を使う	aTuple[-1]
散布図を右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>')
1行だけ標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
文字列からformatのパターンでタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
カウンタの∪演算する	aCounter | aCounter2
ファイルパスを追加できるようにオープンする]	open(filepath, mode='a')
双方向キュー中の数値のインデックス	deq.index(element)
ボックスチャートに簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
縦方向に二つのデータフレームを連結する	pd.concat([df, df2], axis=0)
ティール色でヒストグラムを描画する	plt.hist(データ列, color='teal')
自然数個のものからk個取り出した場合の並べ方	math.perm(n, k)
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
カウンタのキーとカウントを列挙する	aCounter.items()
小数点数を実数で割った剰余	math.remainder(x, x2)
ホワイトスモーク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
ファイルパスのセパレータ記号を使う	os.sep
カウンタ同士で和集合演算する	aCounter | aCounter2
データ列の標準偏差	ds.std()
珊瑚色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
文字列に漢字が含まれる	re.search('[\u4E00-\u9FD0]', s)
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
option: グラフの色をライトブルーに設定する	color = 'lightblue'
option: 先頭カラムをインデックスに設定する	index_col = 0
に箱ひげ図でデータフレームを見る	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: サドルブラウンを使う	color = 'saddlebrown'
部分文字列で文字列を分けたときの前半の文字列を使う	s.partition(sub)[0]
データフレームの列の文字列が文字列が含まれないデータを取り出す	df[not df[column].str.contains(s)]
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
nが1、もしくは2もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
集合に列を追加する	aSet.update(iterable)
整数nを二進表現に変換する	bin(n)
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データフレームのリストカラムの25パーセンタイルを求める	df[aList].quantile(0.25)
折れ線グラフをゴールド色を用いて描画する	plt.plot(データ列x, データ列y, color='gold')
値は集合に含まれないか	element not in aSet
折れ線グラフをミディアムパープル色を使って描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
ミディアムスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
整数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
マッピングの値を列挙する	aDict.values()
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
シーグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
横棒グラフをマゼンタ色を使って描画する	plt.barh(データ列x, データ列y, color='magenta')
データフレームを表示するとき、列の最大幅をnに変更する	pd.set_option('max_colwidth', n)
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
辞書のコピーを作る	dict(aDict)
マゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
現在が火曜日	datetime.datetime.today().weekday() == 1
クラス分類のPPVを求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
線グラフをダークブルー色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
散布図に赤い左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c='r')
グラフに鉛直方向の破線を付ける	plt.axvline(x=0, linestyle='dashed')
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームを二つの列で並べる	df.sort_values(by=['A', 'B'])
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
option: フォントの色をサンディーブラウンに設定する	color = 'sandybrown'
散布図に星マーカーを加える	plt.scatter(データ列x, データ列y, marker='*')
タプルのn番目以降の部分を取り出す	aTuple[n:]
アンティークホワイト色でヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
数式の積分を計算する	sympy.integrate(e)
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
集合からエラーなく値を取り除く	aSet.discard(element)
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
折れ線グラフの▼マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
正規分布にしたがってデータ列の値が発生する確率を算出する	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
option: ディムグレーを使用する	color = 'dimgray'
ゴールデンロッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
データフレームを各列と列の組み合わせ毎にグループ分けして、分散を求める	df.groupby([column, column2], as_index=False).var()
リストとリストの散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
大バツ印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
散布図のクロスマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
option: フォントの色をグレーにセットする	color = 'gray'
列を等量でn個にビン分割する	pd.qcut(ds, n)
データフレームのインデックスの名前を、nameからname2に付け直す	df.rename(index={name: name2})
数が正の数か調べる	x > 0
散布図を黒いバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
データフレームから散布図を作り、線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
カテゴリでグループ化して、にバイオリン図でデータフレームをプロットする	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
y軸の目盛を対数に変更する	plt.yscale('log')
スタックの先頭	deq[0]
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
整数nは組のどれか	n in aTuple
書式を辞書でフォーマットする	formatText.format_map(aDict)
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
リストとリストの散布図を描画して▼マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
タイムスタンプデータを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
データフレームを列によってグループ分けし、、各グループ毎の最大値を求める	df.groupby(column).max()
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
オブジェクトがリストの要素でないかどうか	element not in aList
列名を指定された列の名前一覧に置き換える	df.columns = columns
２つのデータフレームを列をキーにして内部結合する	pd.merge(df, df2, on=column, how='inner')
エラーなく文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
縦棒グラフの色をダークブルーにする	plt.bar(データ列x, データ列y, color='darkblue')
二つの集合が集合と互いに素か	aSet.isdisjoint(aSet2)
データフレームの指定された列	df[column]
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
option: 書き込みモードを使う	mode = 'w'
グラフのグリッドを暗くする	sns.set(style='darkgrid')
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
データ列のユニークな値	ds.unique()
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
option: 読み込みモードを使う	mode = 'r'
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
rgbのダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
option: ライムグリーン色を使う	color = 'limegreen'
データフレームの列の一意な値を見る	df[col].unique()
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームの列を10の位で丸める	df[col].round(-1)
リストとリストについて散布図を描いてマーカーをクロスに変更する	plt.plot(データ列x, データ列y, marker='x')
最大値・最小値として乱数を求める	random.randint(最小値, 最大値)
全数字	string.digits
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
両端キューの長さを制限する	collections.deque(maxlen=n)
データフレームを列によってグループ化し、分散を求める	df.groupby(column).var()
option: スラグレー色を使う	color = 'slategray'
ユニコードを文字にする	chr(unicode)
option: 色をマルーンに指定する	color = 'maroon'
データフレームの歪度	df.kurt()
Pythonパスの一覧を調べる	sys.path
option: ピンク色を使う	color = 'pink'
データフレームのリスト列の欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
xを論理値に変換する	bool(x)
双方向キューの最初に数値を追加する	deq.appendleft(element)
シエナにヒストグラムの色を変更する	plt.hist(データ列, color='sienna')
二つのデータフレームを列'A'と列'B'をキーにして全ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
オールドレース色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
綺麗なグラフを使う準備をする	import seaborn as sns
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
二つのカウンタの共通する要素を求める	aCounter & aCounter2
コギーくんを使いたい	import kogi
横棒グラフをライム色として描画する	plt.barh(データ列x, データ列y, color='lime')
レベッカパープル色でヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
ヒストグラムの色をプラムに変更する	plt.hist(データ列, color='plum')
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ビン数nを使ってデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
破壊的にデータフレームを二つの列によってによって整列する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームを複数の列によってソートする	df.sort_values(by=column)
データフレームの平均値を求める	df.mean()
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
option: ライトスカイブルー色を用いる	color = 'lightskyblue'
整数を万の位で丸める	round(x, -4)
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
実数の床数	math.floor(x)
バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x')
文字列の先頭から空白を取り除く	s.lstrip(' ')
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
データフレームのインデックスの名前をnameからname2に付け直す	df.rename(index={name: name2})
列数の最大値をnに変更する	pd.set_option('display.max_columns', n)
ファイルから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
線グラフをパウダーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='powderblue')
縦棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
文字列をユニコード列にする	[ord(ch) for ch in s]
rgbの星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
グリーンにヒストグラムの色を変更する	plt.hist(データ列, color='green')
横棒グラフの色をダークレッドにする	plt.barh(データ列x, データ列y, color='darkred')
赤い上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
割合付きの円プロットを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
タプルを展開して表示する	print(*aTuple)
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategray')
カテゴリデータを連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
配列を分割数nでビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
実数の絶対値	math.fabs(x)
カンマで区切って二つの変数をプリントする	print(value, value2, sep=',')
変数をスワップする	x, y = y, x
小数点数は無限大	math.isinf(x)
文字列を後ろから部分文字列で区切る	s.rsplit(sub)
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
縦棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフを左三角印で描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームのリスト列の中にいくつ欠損値が存在するか求める	df[aList].isna().sum()
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
パラメータについて数値のインテグラルを求める	sympy.integrate(e, z)
リストとリストの散布図を描画してマーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
両端キューに数値をプッシュする	deq.append(element)
散布図をrgbの大バツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
コマンドの第二引数	sys.argv[1]
日付データが火曜日か調べる	aDate.weekday() == 1
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
文字列がタプルの要素か調べる	element in aTuple
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
棒グラフをコーンフラワーブルー色として描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
折れ線グラフをミディアムバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
データフレームの指定された４つの列のみ抽出する	df[[column, column2, column3, column4]]
データフレームとデータ列をつなぐ	pd.concat([df, ds], axis=1)
データ列の値は欠損値か	ds.isna()
ダークゴールデンロッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
Pandasで、文字列のエポック秒から日付データにする	pd.to_datetime(s, unit='s', utc=True)
予測値とデータの離れ具合をグラフ化する	sns.residplot(x='列名', y='列名', data=df)
データ列の年を見る	ds.dt.year
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
option: ミディアムアクアマリンを使う	color = 'mediumaquamarine'
配列間の要素ごとの最小公倍数を求める	np.lcm(aArray, aArray2)
棒グラフをアリスブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='aliceblue')
実数の双曲線正接	math.tanh(x)
シーケンスから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
縦棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
最初のプログラムを書く	print('Hello World')
1からnまでの整数リスト	list(range(1, n+1))
横棒グラフをダークスラテグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslategray')
列でデータフレームをグループ化し、それぞれのグループ毎の件数を知る	df.groupby(column).size()
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
オブジェクトの無限なイテラブル	itertools.repeat(element)
option: ポイントマーカーを加える	marker = '.'
二進文字列を整数にする	int(s, 2)
文字列はリストに含まれないかどうかテストする	element not in aList
赤い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='r')
ビスク色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
option: 青緑色を用いる	color = 'teal'
option: インディゴを使う	color = 'indigo'
青い実線を用いてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
空白によって文字列を区切る	s.split()
整数nを十六進文字列に変換する	hex(n)[2:]
文字列がタイトル大文字小文字	s.istitle()
データフレームのn番目の行を抽出する	df.loc[n]
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
文字列の先頭を使う	s[0]
Pandasで、フォーマットfmtで文字列をPandasの日付型にする	pd.to_datetime(s, format=fmt)
ヒストグラムの色をダークバイオレットに変更する	plt.hist(データ列, color='darkviolet')
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
option: ディープスカイブルー色を用いる	color = 'deepskyblue'
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームのリストカラムの未入力値を直後の値で埋める	df[aList].fillna(method='bfill')
グラフの中に枠なしのデータラベルを入れる	plt.legend(frameon=False)
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
アイボリーにヒストグラムの色を変更する	plt.hist(データ列, color='ivory')
データフレームのカラムが何月か見る	df[col].dt.month
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
オブジェクトのバイト長を知る	sys.getsizeof(obj)
正方単位行列を作成する	np.identity(n)
変数について数式の積分を求める	sympy.integrate(e, z)
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
淡い茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
グラフの背景色を暗くする	sns.set(style='darkgrid')
綺麗なグラフを描画する準備をする	import seaborn as sns
ファイルが存在するか確認する	os.path.exists(filepath)
option: ホットピンク色を使う	color = 'hotpink'
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
option: ライトコーラルを使う	color = 'lightcoral'
ミディアムスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
データフレームの列の名前の一覧	df.columns
rgbのバツマーカーを配列とイテラブルについての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフの色をペールグリーンに変更する	plt.plot(データ列x, データ列y, color='palegreen')
ゼロ埋めされた符号なし８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.uint8)
オブジェクトはタプル型か調べる	isinstance(obj, tuple)
データフレームの列のNaNをxで補う	df[col].fillna(x)
nがn2以下か判定する	n <= n2
データフレームの中で何行重複するか見る	df.duplicated().sum()
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
リストとリストを連結する	aList + aList2
option: シーグリーン色を用いる	color = 'seagreen'
異なる列をキーとして２つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
辞書をカウンタにする	collections.Counter(aDict)
棒グラフをライトサーモン色として描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
nがn2以下、または、n3以上かどうか調べる	n <= n2 or n >= n3
オブジェクトが関数	callable(obj)
両端キューのstart〜endの部分データ	collections.deque(itertools.islice(deq, start, end))
未初期化の行列を作る	np.empty((行数, 列数), dtype=np.int)
データフレームの尖度を算出する	df.skew()
データフレームのカラムの中にいくつ欠損値が含まれるか数える	df[col].isna().sum()
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
option: 上三角印を使う	marker = '^'
正接	math.tan(x)
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
暗く色テーマをプロットの描画で使用する	sns.set(pallete='dark')
散布図に赤い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
数列を箱ひげ図で描く	plt.boxplot(データ列)
浮動小数点数の自然対数	math.log(x)
option: 紺色を使う	color = 'darkblue'
縦棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
タプルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームの中に文字列と日付データがいくつあるか求める	df.isin([value, value2]).sum()
データフレームの中の列をビン数nで分割する	pd.cut(df[col], n)
ダークオリーブグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
昇順にデータフレームを二つの列で整列する	df.sort_values(by=['A', 'B'], ascending=True)
ホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
オプションで、出力先を標準エラーに変更する	file = sys.stderr
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
option: グラフの色をアイボリーに設定する	color = 'ivory'
ヒストグラムをダークサーモン色として描画する	plt.hist(データ列, color='darksalmon')
折れ線グラフをライトコーラル色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcoral')
散布図の四角印を青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
整数nをn2分の１にする	n //= n2
option: △マーカーを使う	marker = '^'
ゼロ埋めされた行列を作成する	np.zeros(行数, 列数)
カデットブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
オブジェクトのメモリビュー	memoryview(obj)
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
文字列の先頭でパターンにASCII限定としてマッチするか調べる	re.match(pattern, s, flags=re.ASCI)
行列の逆行列	np.linalg.inv(aArray)
データ列を使う	import pandas as pd
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
グラフの描画で淡くパレットを使う	sns.set(pallete='muted')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
多次元データを主成分分析でパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
分類モデルの訓練を開始する	model.fit(説明変数, 目的変数)
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
ヒストグラムを青紫色として描画する	plt.hist(データ列, color='violet')
n個の文字列があるリスト	[element] * n
オブジェクトのオブジェクト識別子を見る	id(obj)
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
ヒストグラムをゴールド色として描画する	plt.hist(データ列, color='gold')
文字列を左寄せする	s.ljust(文字列幅)
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
SVDを行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
nが5で割り切れるか	n % 5 == 0
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
横棒グラフをダークレッド色で描画する	plt.barh(データ列x, データ列y, color='darkred')
ミントクリーム色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
列を用いてデータフレームを並べる	df.sort_values(by=column)
option: ミディアムパープルにグラフの色を指定する	color = 'mediumpurple'
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
行列のムーア・ペンローズの擬似逆行列を算出する	np.linalg.pinv(aArray)
データフレームの列名を付け直す	df.rename(columns={column: name})
散布図をポイントマーカーで描画する	plt.scatter(データ列x, データ列y, marker='.')
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
各グループ列ごとに色分けしてデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
スプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームの列が文字列が含まれないデータを選択する	df[not df[column].str.contains(s)]
データ列を等しい量になるようにn個に分割する	pd.qcut(ds, n)
option: ネイビー色を使う	color = 'navy'
ゲインズボロ色としてヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
オプションでファイルを使う	file = sys.open(filename, 'w')
日付データが日付データより前かどうか調べる	aDate < aDate2
棒グラフをダークスラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategray')
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
オブジェクトは整数クラスかどうか調べる	isinstance(obj, int)
色名をからコードに変換する	matplotlib.colors.cnames[色名]
ダークゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
散布図に丸マーカーを使用する	plt.scatter(データ列x, データ列y, marker='o')
option: 先頭のカラムをインデックスにする	index_col = 0
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
option: グラフの色をライトシアンに変更する	color = 'lightcyan'
主成分分析で多次元データを淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
行列の行ごとの最小値を求める	np.min(aArray, axis=1)
未定値	None
ファイルパスから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
グリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
データフレームの値を正規表現patternで一度にreplに置き換える	df.replace(pattern, repl, regex=True)
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
集合から全要素を取り除く	aSet.clear()
グラフの色テーマを全般的にパステル調にする	sns.set(pallete='pastel')
文字列の両端から部分文字列を取り除く	s.strip(sub)
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
数値をマゼンタにする	f'\033[35m{value}\033[0m'
小数点数の余弦の逆数	math.acos(x)
プロットのx軸とy軸の比率を等しくする	plt.axis('equals')
横棒グラフの色をティールにする	plt.barh(データ列x, データ列y, color='teal')
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
散布図にクロスマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
辞書の全項目をクリアする	aDict.clear()
タプルをn回、連結する	aTuple * n
黒い菱形マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの列で文字列が含まれない行を取り出す	df[not df[column].str.contains(s)]
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
数の３乗	x ** 3
option: 未入力値を先頭にする	na_position = 'first'
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
0からnまでの整数列を得る	list(range(n+1))
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
配列を中央値でビン分割する	pd.qcut(aArray, 2)
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
スラグレー色としてヒストグラムを描画する	plt.hist(データ列, color='slategray')
度数分布図のビン数を指定する	plt.hist(データ列, bins=区関数)
データフレームの列の欠損値を最小値で補う	df[col].fillna(df[col].min())
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
ファイルを追加用にオープンして]、fとする	f = open(filepath, mode='a')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
データフレームのヒストグラムを横に並べて、プロット化する	sns.displot(df, x='列名', col='カテゴリ名')
横棒グラフをダークブルー色として描画する	plt.barh(データ列x, データ列y, color='darkblue')
nがセットのひとつか調べる	n in aSet
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgrey')
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
リストから配列を作る	np.array(aList)
データ列を10の位で丸める	ds.round(-1)
リストのn番目に文字列を挿入する	aList.insert(n, element)
文字列を空白で区切って、数列に変換する	map(int, s.split())
ミディアムターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
辞書のコピーを生成する	dict(aDict)
折れ線グラフをダークサーモン色を使って描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
棒グラフを濃い青色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: 印を右三角に設定する	marker = '>'
option: 丸印を加える	marker = 'o'
空の集合	set()
option: グラフの色をダークスラテグレーにする	color = 'darkslategray'
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
データフレームの中央値	df.median()
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
TSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
横棒グラフをアクア色を使って描画する	plt.barh(データ列x, データ列y, color='aqua')
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
リストとイテラブルについての散布図にrgbの▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
日付時刻データが日付時刻データと同時かどうか確認する	aDatetime == aDatetime2
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
サンディーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
option: 文字列の示すエンコーディングを用いる	encoding = s
データフレームの要約統計量を求める	df.describe()
ファイル名がテキストファイルかどうか確認する	filename.endswith('.txt')
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
リストの全順列を求める	itertools.permutations(iterable)
線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
ヒストグラムの色をインディゴに変更する	plt.hist(データ列, color='indigo')
低頻出な方からカウンタを列挙する	aCounter.most_common()[::-1]
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
折れ線グラフを青い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
２つのデータフレームを縦方向に連結する	pd.concat([df, df2])
xを整数に変換する	int(x)
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
列を四分位数ごとにビニングする	pd.qcut(ds, 4)
コマンドライン引数	sys.argv
縦棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームを列の値でグループ化し、、それぞれのグループ毎の件数を知る	df.groupby(column).size()
変数について数値を積分する	sympy.integrate(e, z)
項目名が辞書に存在するかどうかテストする	key in aDict
option: 線の種類を点線に変更する	linestyle = 'dotted'
ヒストグラムの色をアイボリーに指定する	plt.hist(データ列, color='ivory')
マルーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
縦棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
ヒストグラムをフクシア色として描画する	plt.hist(データ列, color='fuchsia')
日付データが日付データより前か確認する	aDate < aDate2
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
散布図でデータフレームを可視化して、カテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
空の勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
グレーにヒストグラムの色を指定する	plt.hist(データ列, color='grey')
配列の累積積	np.cumprod(aArray)
配列の個数を求める	aArray.size
option: シャルトリューズにグラフの色を設定する	color = 'chartreuse'
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
正規表現によって文字列を置き換える	re.sub(pattern, newsub, s)
ライトスチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
耐火レンガ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
辞書のキーを要素に設定する	aDict[key] = element
配列とリストの散布図を描画し、、マーカーを三角に変更する	plt.plot(データ列x, データ列y, marker='^')
ベクトルのスカラー倍	aArray * n
データフレームのリスト列の最頻値	df[aList].mode()
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
文字列が全て数字	s.isdigit()
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
２つのデータフレームを列'A'と列'B'をキーにして左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
カテゴリで色分けして、データフレームの全カラムの散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
文字列からタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ネイビー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
データフレームを各列毎に集計して列の個数を求める	df.groupby(column)[column2].count()
三自然数の最小公倍数	math.lcm(n, n2, n3)
タプルにキーワード引数で更新する	aDict.update(**kwargs)
データ列の偏りを対数変換する	np.log(データ列)
大文字・小文字を無視してパターンで文字列を分ける	re.split(pattern, s, flags=re.IGNORECASE)
要素が集合に含まれるか	element in aSet
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
nが正の数か調べる	n > 0
赤いバツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c='r')
線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
黄色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
文字列中からパターンに大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
文字列の示す文字コードで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
データフレームの列の値がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
本日のタイムスタンプ	datetime.datetime.now()
option: 色をディムグレーに設定する	color = 'dimgray'
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
ダークゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
ファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
nにn2をかけた値をnに代入する	n *= n2
文字列の中の複数行対応として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
ライトスレイグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
実行結果を黄色で出力する	print(f'\033[33m{value}\033[0m')
データフレームの指定した列を配列として抽出する	df[column].values
データフレームを表示するとき折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
データ列は何時か見る	ds.dt.hour
データフレームを表示するときn行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
縦棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
散布図にrgbの▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列を青色で表示する	print(f'\033[34m{value}\033[0m')
オリベドラブにヒストグラムの色をセットする	plt.hist(データ列, color='olivedrab')
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
散布図をダークシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
RGBで折れ線グラフの色を指定する	plt.plot(データ列x, データ列y, color='#800080')
option: ライトグレーにグラフの色を設定する	color = 'lightgrey'
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
データフレームを破壊的に'A'列によってによってソートする	df.sort_values(by='A', inplace=True)
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
option: データ型を指定する	dtype = np.uint8
散布図の▼マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームを'A'列の値によってまとめたグループ	df.groupby('A')
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
横棒グラフをダークオレンジ色として描画する	plt.barh(データ列x, データ列y, color='darkorange')
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
三自然数の最小公倍数を求める	math.lcm(n, n2, n3)
散布図に四角印を使う	plt.scatter(データ列x, データ列y, marker='s')
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
option: グラフの色をミディアムブルーに変更する	color = 'mediumblue'
ヒストグラムの色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
青にヒストグラムの色を設定する	plt.hist(データ列, color='blue')
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
タイムスタンプデータが何月か知る	aDatetime.month
xが一桁の整数かどうかテストする	-9 <= x <= 9
ヒストグラムの色をパウダーブルーにセットする	plt.hist(データ列, color='powderblue')
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
文字列中に非大文字が含まれる	any(not c.isupper() for c in s)
散布図の印を星印にする	plt.scatter(データ列x, データ列y, marker='*')
Pandasで、データフレームのカラムをPandasの日付型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
ヒストグラムの色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
縦軸の目盛りを整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
散布図のクロスマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
リストとリストについて散布図をプロットし、、マーカーをバツに指定する	plt.plot(データ列x, データ列y, marker='x')
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
双方向キューに数値をエンキューする	deq.appendleft(element)
整数nがリストのいづれかか調べる	n in aList
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
タイムスタンプデータをISO8601形式の文字列に変換する	aDatetime.isoformat()
オブジェクトはタプルクラスのインスタンスかどうか調べる	isinstance(obj, tuple)
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
散布図に赤い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
配列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
グラフの背景色を白くする	sns.set(style='whitegrid')
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
option: ディープスカイブルーにグラフの色を設定する	color = 'deepskyblue'
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
散布図をオールドレース色として描画する	plt.scatter(データ列x, データ列y, color='oldlace')
縦棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
色付きの実線を用いてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ファイルパスからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
option: グラフの色をラベンダーにセットする	color = 'lavender'
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
グリーンイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
線形のクラス分類を行う	model = sklearn.linear_model.LogisticRegression()
n×n2	n * n2
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
二つの列によって降順に破壊的にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
二つの文字列を文字列で区切って出力する	print(value, value2, sep=s)
折れ線グラフの▽マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
クラス分類の偽陰性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
横棒グラフを描いて、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
散布図のダイアモンドマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
最大長のある両端キューを作る	collections.deque(maxlen=n)
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
データ列の変化を青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o')
表示できる最大行数を変更する	pd.set_option('display.max_rows', n)
配列を等間隔でn個にビニングする	pd.cut(aArray, n)
文字列中の部分文字列の登場回数をカウントする	s.count(sub)
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
リストをヒストグラムにする	plt.hist(データ列)
ファイルパスをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
option: グラフの色をゴールドに設定する	color = 'gold'
nが一桁の数か調べる	0 <= n <= 9
ケンドール相関係数を用いてデータフレームの相関行列を求める	df.corr(method='kendall')
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
実数を３乗する	x ** 3
実数に実数を加える	x + y
ライトサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
多次元データをMSDで淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームの中の未入力値がある行を削除する	df.dropna()
折れ線グラフの色を暗い赤に変更する	plt.plot(データ列x, データ列y, color='darkred')
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
リストをカウンタにする	collections.Counter(iterable)
カデットブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
日付データが日曜日	aDate.weekday() == 6
option: UTF8を用いる	encoding = 'utf-8'
サイコロ	random.randint(1, 6)
データフレームをインデックスを用いて並べ直す	df.sort_index()
棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
縦棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
ミディアムパープル色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
表データから重複した行を残さず削除する	df.drop_duplicates(keep=False)
文字列をセパレータで分割して文字列リストに変換する	s.split(sep)
データフレームを列によってグループ化する	df.groupby(column)
線グラフを深紅色を用いて描画する	plt.plot(データ列x, データ列y, color='crimson')
浮動小数点数を切り下げて整数にする	math.floor(x)
option: ネイビーを使用する	color = 'navy'
nをn2で結果の切り上げ	(n + n2 - 1) // n2
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
MSDで多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
スクリプトファイルのフォルダパス	os.path.dirname(os.path.abspath(__file__))
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
ヒストグラムの色を紺に指定する	plt.hist(データ列, color='darkblue')
データフレームのリスト列の中に日付データと文字列が存在する	df[aList].isin([value, value2])
折れ線グラフの透明度を指定する	plt.plot(データ列x, データ列y, alpha=0.5)
option: ゴーストホワイト色を使用する	color = 'ghostwhite'
ふたつの集合は互いに素か調べる	aSet.isdisjoint(aSet2)
折れ線グラフの色をピーチパフに変更する	plt.plot(データ列x, データ列y, color='peachpuff')
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
縦棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
実数を実数にかける	x * y
リストとデータ列についての散布図に△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
表データを列によってまとめたグループ	df.groupby(column)
nが5の倍数か確認する	n % 5 == 0
オレンジ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
折れ線グラフのポイント印を青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
最小値でデータフレームのカラムの未入力値を埋める	df[col].fillna(df[col].min())
フォレストグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
SJISでTSVファイルを読む	pd.read_csv(filename, encoding='shift_jis')
散布図をグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='gray')
散布図を紺碧色として描画する	plt.scatter(データ列x, データ列y, color='azure')
辞書のキーの値	aDict[key]
棒グラフをイエローグリーン色として描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
グラフで利用可能な色名の一覧	matplotlib.colors.cnames
組の最後からn番目以前の部分を得る	aTuple[:-n]
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
分類モデルのF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
オブジェクトのプロパティの値をする	setattr(obj, プロパティ名, 値)
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
実数のk進対数	math.log(x, k)
ファイルを追加モードでオープンする]	open(filepath, mode='a')
乱数	random.random()
ライトゴールドロディイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
n個の要素があるリスト	[element] * n
タイムスタンプデータの日数	aDatetime.day
線グラフの色をスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='springgreen')
カテゴリごとにデータフレームの棒プロットを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
リストと配列についての散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
日付時刻データの時間数を使う	aDatetime.hour
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
青色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
文字列内に数字が含まれるか	any(c.isdigit() for c in s)
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
辞書に辞書の値を更新する	aDict.update(aDict2)
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
散布図をサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='salmon')
ガンマ関数の値	math.gamma(x)
データ列の欠損値を最大値で置き換える	ds.fillna(ds.max())
要素が全て初期値の行列	np.full(要素数, 初期値, dtype=np.int)
上限長を指定して、双方向キュー	collections.deque(maxlen=n)
シードをnで固定化する	random.seed(n)
タプル内の要素が少なくともひとつ真	any(aTuple)
マップのキーを要素に設定する	aDict[key] = element
一番左側の列をデータフレームから除く	df[df.columns[1:]]
一度にデータフレームのリスト列の値を正規表現patternでreplに置き換える	df[aList].replace(pattern, repl, regex=True)
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
リストと配列について散布図を描き、マーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
NaNを使用する	math.nan
option: グラフの色をベージュに設定する	color = 'beige'
option: 行を自動的な連番に設定する	index_col = None
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
データ列を1000の位で四捨五入して整数にする	ds.round(-3).astype(int)
ナバホホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
高頻出方からカウンタを列挙する	aCounter.most_common()
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
分類木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
リストと配列の散布図を描画して、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
ロバストな線形回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
option: アクアにグラフの色を変更する	color = 'aqua'
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
ミディアムアクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
tanを求める	math.tan(x)
データフレームを昇順に列によってソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
折れ線グラフの色を貝殻にセットする	plt.plot(データ列x, データ列y, color='seashell')
２つのリストから辞書を新規生成する	dict(zip(aList, aList2))
ディムグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
横軸だけグリッド線	plt.grid(axis='x')
原点から(小数点数,y)の距離を算出する	math.hypot(x, y)
三つの最大値	max(x, y, z)
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
データフレームのリストカラムのメディアン	df[aList].median()
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
option: パールバイオレットレッドを使う	color = 'palevioletred'
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
散布図に黒い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
実数の双曲線正弦の逆数を計算する	math.asinh(x)
バイナリ書き込みモードでファイルをオープンして]、fとする	f = open(filepath, mode='wb')
自然数個からk個取り出したときの順列の総数を算出する	math.perm(n, k)
文字列を走査し、パターンに複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
データフレームのリスト列の未入力値を最小値で置換する	df[aList].fillna(df[aList].min())
赤い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
実数を三乗する	x ** 3
スケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
二つのデータフレームを異なる列をキーとして内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
文字列からformatのパターンで日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
データフレームの列を行に設定する	df.set_index(column)
行列の行ごとの標準偏差	np.std(aArray, axis=1)
データフレームからカテゴリデータの列名一覧を見る	df.select_dtypes('object').columns
折れ線グラフの色を黄緑に設定する	plt.plot(データ列x, データ列y, color='chartreuse')
散布図にrgbの下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
ローングリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
option: マーカーを四角に指定する	marker = 's'
行列の列ごとの最小値を求める	np.min(aArray, axis=0)
リストの先頭のn要素を捨てる	aList[n:]
線グラフをシスル色を用いて描画する	plt.plot(データ列x, データ列y, color='thistle')
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
折れ線グラフをダークスレートブルー色を使って描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
色名からカラーコードを求める	matplotlib.colors.cnames[色名]
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
紺色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
ポイントマーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
組が全て真か調べる	all(aTuple)
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
日付時刻データが何秒か知る	aDatetime.second
長さnのリスト	[0] * n
複数の列を用いて昇順にデータフレームをソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
データフレームをCSVファイルを用いてJSONLファイルに保存する	df.to_csv(filename)
文字列全体がパターンにマッチするか確認する	re.fullmatch(pattern, s)
ダークシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
ヒストグラムの色をピンクに指定する	plt.hist(データ列, color='pink')
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
カラムの欠損値を前の行の値に設定する	ds.fillna(method='ffill')
データフレームをJSONLファイルにタブ区切りで書き込む	df.to_csv(filename, sep='\t')
option: グラフの色を青に変更する	color = 'blue'
nをn2で整数除算する	n // n2
option: 印を右三角に変更する	marker = '>'
ユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
データフレームを関数でグループ化し、要約統計量を算出する	df.groupby(関数).describe()
散布図をスプリンググリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='springgreen')
ヒストグラムの色を紺にする	plt.hist(データ列, color='darkblue')
線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
データフレームのNaNを平均値で埋める	df.fillna(df.mean())
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
option: ポイントマーカーを使う	marker = '.'
要素がセットのメンバーか調べる	element in aSet
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
小数点数のハイパボリック・タンジェントの逆数	math.atanh(x)
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
数値を簡略化する	sympy.sympify(e)
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
ヒストグラムの色をスラグレーにする	plt.hist(データ列, color='slategray')
データフレームを列毎にグループ化し、、各グループごとの分散を求める	df.groupby(column).var()
線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: グラフの色をグレーに変更する	color = 'gray'
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
データフレームの列の中に文字列があるか	df[col].isin([value])
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
ピーチパフ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
多次元データをt-SNEとしてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
カウンタをリセットする	aCounter.clear()
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
列のpercent分位数	ds.quantile(percent/100)
データフレームを散布図で可視化してカテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
パパイヤウィップにヒストグラムの色を設定する	plt.hist(データ列, color='papayawhip')
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
データフレームのグループ毎の最大値	df.groupby(column).max()
標準入力から1文字だけ読む	sys.stdin.read(1)
タプルのキー一覧	list(aDict)
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
折れ線グラフをライトイエロー色を使って描画する	plt.plot(データ列x, データ列y, color='lightyellow')
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
クロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x')
線形モデルの切片	model.intercept_
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
ミディアムシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
二つの数値を順にプリントする	print(value, value2)
実数が無限大か調べる	math.isinf(x)
無限にオブジェクトが繰り返す列	itertools.repeat(element)
データ列の値は欠損値か調べる	ds.isna()
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
リストとリストの散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列中の部分文字列を数える	s.count(sub)
option: 箱ひげ図を横方向にする	vert = False
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
option: ミディアムシアグリーン色を使用する	color = 'mediumseagreen'
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
回帰モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
ユークリッド距離を求める	math.dist(point, point2)
option: フォントの色をディープスカイブルーに設定する	color = 'deepskyblue'
option: グラフの色をダークシアグリーンに変更する	color = 'darkseagreen'
散布図をマルーン色を使って描画する	plt.scatter(データ列x, データ列y, color='maroon')
列'A'と列'B'をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
タプルを順序付けする	enumerate(aTuple)
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
本日は何曜日か知る	datetime.datetime.today().weekday()
カウンタの全数	aCounter.total()
ヒストグラムの色をダークオーキッドに指定する	plt.hist(データ列, color='darkorchid')
option: シエナ色を使う	color = 'sienna'
リストのn番目からn2番目の部分	aList[n:n2]
自然対数の底	math.e
三変数の最大値	max(x, y, z)
リストとリストについての散布図にrgbのバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
横棒グラフをライトコーラル色を用いて描画する	plt.barh(データ列x, データ列y, color='lightcoral')
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
option: スノーを使う	color = 'snow'
値∉集合	element not in aSet
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
偽陰性を避けたい指標を使用する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ダークシアグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='darkseagreen')
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
ライトコーラル色でヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
一点鎖線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: フォントの色をモカシンに設定する	color = 'moccasin'
入力ストリームを全部、読み込む	f.read()
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか	s.find(sub, start, end) == -1
option: グラフを実線に変更する	linestyle = 'solid'
文字列はタプルに含まれないかどうか確認する	element not in aTuple
option: ドジャーブルーを使う	color = 'dodgerblue'
ラインを赤い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
配列を平坦化する	aArray.flatten()
オブジェクトはバイト列型かどうか	isinstance(obj, bytes)
データフレームのカラムをヒストグラムで描く	plt.hist(df[column])
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
線グラフをグリーンイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ヒストグラムの色をダーク・スラテグレーに変更する	plt.hist(データ列, color='darkslategrey')
折れ線グラフをゴーストホワイト色として描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
KNNとしてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
二つのオブジェクトが等しいか調べる	obj == obj2
データフレームを列でグループ化して、それぞれのグループの件数を知る	df.groupby(column).size()
option: ダークシアンを用いる	color = 'darkcyan'
白色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
箱ひげ図でリストを描画する	plt.boxplot(データ列)
option: インディゴ色を使う	color = 'indigo'
新しい回帰木モデルを用意する	model = sklearn.tree.DecisionTreeRegressor()
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
50パーセンタイルでデータ列の未入力値を置換する	ds.fillna(ds.median())
数値の変数を数式で置き換える	e.subs(z, e2)
文字列の先頭から部分文字列を探す	s.find(sub)
変数の値をスワップする	x, y = y, x
データ列の変遷を実線として描く	plt.plot(データ列x, データ列y, linestyle='solid')
ライムグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='limegreen')
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
データフレームの欠損値をxで置換する	df.fillna(x)
リストを文字列に変換して、カンマで連結する	','.join(map(str, iterable))
平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
配列と数列について散布図を描いて、マーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
現在のワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
線グラフをイエローグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
スタック中の値の位置	deq.index(element)
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
グラフを使用する	import matplotlib.pyplot as plt
データフレームのリストカラムの正規分布に対する上下広がり	df[aList].skew()
横棒グラフを描く	plt.barh(ラベル列, データ列)
リスト内の要素が全て真かどうか調べる	all(aList)
データ列をビン数nを使ってビンニングしてnamesのラベルをつける	pd.cut(ds, n, labels=names)
nがn2の倍数でない	n % n2 != 0
文字列を二つに分ける	s.partition(sep)
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
nがn2以下かどうか	n <= n2
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
option: フォントの色をシアンに変更する	color = 'cyan'
データフレームを'A'列と'B'列でグループ化し、記述統計量を算出する	df.groupby(['A', 'B']).describe()
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
eの乗数を計算する	math.exp(x)
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
ファイルを読み込み用にオープンして]fとする	f = open(filepath, mode='r')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
組が全て真か	all(aTuple)
整数をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
option: ミディアムオーキッドを使用する	color = 'mediumorchid'
散布図をダークゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
データフレームのn行以降抽出する	df[n:]
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
データフレームの列を散布図で可視化してカテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
バリーウッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
year年month月の日付をオブジェクト化する	datetime.date(year=year, month=month, day=1)
日付時刻データの時間数	aDatetime.hour
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
オブジェクトはリストの要素でないか調べる	element not in aList
文字列の開始位置と終了位置の間に部分文字列があるかどうか確認する	s.find(sub, start, end) != -1
ライトグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
データ列とリストについて散布図を描画し、マーカーを左三角に指定する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: グラフの色をライトコーラルにセットする	color = 'lightcoral'
rgbのポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
文字列をプリントする	print(value)
データフレームから列を４つだけ選択する	df[[column, column2, column3, column4]]
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
文字列の終了位置以前に部分文字列が存在しないかどうか調べる	s.find(sub, 0, end) == -1
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
リストを境界値としてリストをビン分割する	pd.cut(aList, aList)
ダークオリーブグリーン色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
リストの値を小さい順に並べ変える	sorted(aList, reverse=False)
データ列の折れ線グラフを下三角印で描画する	plt.plot(データ列x, データ列y, marker='v')
箱ひげ図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
リストをn倍する	aList * n
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
option: 色をターコイズに設定する	color = 'turquoise'
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
データフレームの中の欠損値の合計をカウントする	df.isna().sum()
ダークブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
ゼロ埋めされた複素数型の配列を作る	np.zeros(要素数, dtype=bool)
整数nがリストのいづれかかどうか調べる	n in aList
データフレームのカラムの中に文字列がある	df[col].isin([value])
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
二つの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
変数名をキーとして、マップ	dict(name=element)
真紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
コマンドラインフラグの状態	sys.flags
option: 書き込み用に設定する	mode = 'w'
xが-9以上、9以下かどうか調べる	-9 <= x <= 9
双方向キューに要素をenqueueする	deq.appendleft(element)
深紅色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
線グラフの色をフローラルホワイトに変更する	plt.plot(データ列x, データ列y, color='floralwhite')
日付時刻データにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
横棒グラフをオーキッド色として描画する	plt.barh(データ列x, データ列y, color='orchid')
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
ヒストグラムをパウダーブルー色として描画する	plt.hist(データ列, color='powderblue')
タプルをカンマ区切りでプリントする	print(*aTuple, sep=',')
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
代数計算を使う	import sympy
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
線グラフの色をホワイトスモークに指定する	plt.plot(データ列x, データ列y, color='whitesmoke')
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
ヒストグラムの色をスノーに指定する	plt.hist(データ列, color='snow')
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
表の内で、列と列の重複を消す	df.drop_duplicates(subset=column)
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
option: フローラルホワイト色を用いる	color = 'floralwhite'
現在が何曜日か知る	datetime.datetime.today().weekday()
文字列を改行で分割し文字列リストに変換する	s.splitlines()
option: フォントの色を耐火レンガに設定する	color = 'firebrick'
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
配列とリストについての散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
現在が何秒か知る	datetime.date.today().second
折れ線グラフをグリーンイエロー色を使って描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームを'A'列によって並べて、NaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
縦棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
折れ線グラフの色を深紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
部分文字列で文字列の開始位置以降が始まるか確認する	s.startswith(sub, start)
縦棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
整数nを十六進表現に変換する	hex(n)
カウンタの項目数	len(aCounter)
縦棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
パープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
散布図の色を深紅にする	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフの色をプラムにする	plt.plot(データ列x, データ列y, color='plum')
標準エラー	sys.stderr
データフレームを'A'列によってによって降順に並べる	df.sort_values(by='A', ascending=False)
トマト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
オリーブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
入力から二つの浮動小数数を読む	A, B = map(float, input().split())
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
option: グラフの色をシーグリーンに指定する	color = 'seagreen'
アルファベットの小文字列	string.ascii_lowercase
クリムゾン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
カデットブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
青い破線として数列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
プロットの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
シーケンスの各データをデックの先頭につけ加える	deq.extendleft(iterable)
データフレームの指定された列を抽出する	df[column]
折れ線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
横棒グラフをミディアムアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
半透明の一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データ列を分割する	pd.cut(ds, aList)
ヒストグラムをグリーンイエロー色を用いて描画する	plt.hist(データ列, color='greenyellow')
RANSACでクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
itertoolsモジュールをインポートする	import itertools
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
タプルの先頭	aTuple[0]
リストの要素をクリアにする	aList.clear()
初期値で全要素を初期化した行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
二つの行列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
数式を浮動小数点数にする	float(e)
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
ベージュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
イテラブルとリストについての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
青緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
配列の列ごとの合計値	np.sum(aArray, axis=0)
ダークシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ラベンダー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
データフレームを'A'列によって小さい順に並べる	df.sort_values(by='A', ascending=True)
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: グラフの線の種類を一点鎖線に設定する	linestyle = 'dashbot'
散布図をコーラル色を使って描画する	plt.scatter(データ列x, データ列y, color='coral')
データフレーム全体をインデックスによって並べる	df.sort_index()
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
回帰分析をパーセプトロンで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
組の末尾のn要素を捨てる	aTuple[:-n]
option: ダークバイオレット色を使用する	color = 'darkviolet'
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
多次元データをt分布型確率的近傍埋め込み法を用いてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
実数の二進対数	math.log2(x)
縦棒グラフをインディゴ色を使って描画する	plt.bar(データ列x, データ列y, color='indigo')
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データ列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
黒い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図に赤い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='r')
文字列の末尾	s[-1]
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
アリスブルーにヒストグラムの色を設定する	plt.hist(データ列, color='aliceblue')
データフレームの文字列を未入力値にする	df.replace(s, np.nan)
データフレームのカラムを10の位で丸める	df[col].round(-1)
データフレームをValueMapで一度に置き換える	df.replace(ValueMap)
モデルを訓練する	model.fit(説明変数, 目的変数)
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
折れ線グラフを赤い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ファイルパスの絶対ファイルパス	os.path.abspath(filepath)
線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
スピアマン相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
オブジェクトがプロパティを持つかどうか確認する	hasattr(obj, プロパティ名)
option: 色をミスティローズにする	color = 'mistyrose'
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
n列までデータフレームを表示できるようにする	pd.set_option('display.max_columns', n)
option: 淡いピンク色にフォントの色を設定する	color = 'lightpink'
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
散布図をレベッカパープル色として描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
両端キュー	collections.deque()
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
アンサンブル学習として回帰分析を行う	sklearn.ensemble.VotingRegressor()
スクリプトファイルのディレクトリ名を見る	os.path.dirname(os.path.abspath(__file__))
列でデータフレームをグループ化する	df.groupby(column)
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データ列が何時か確認する	ds.dt.hour
データフレームのリストカラムの最頻値を求める	df[aList].mode()
option: エンコーディングを文字列の示す文字コードに指定する	encoding = s
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームのカラムを10の位で四捨五入する	df[col].round(-1)
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
折れ線グラフに赤いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
画面用にプロットを変更する	sns.set(context='notebook')
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
リストを中央値でビン分割する	pd.qcut(aList, 2)
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
オリベドラブにヒストグラムの色を設定する	plt.hist(データ列, color='olivedrab')
option: フォントの色をコーンズシルクにセットする	color = 'cornsilk'
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
整数nの十六進表現	hex(n)
二つの変数を同じ値にする	x = y = n
横棒グラフをモカシン色として描画する	plt.barh(データ列x, データ列y, color='moccasin')
現在が木曜日	datetime.datetime.today().weekday() == 3
option: アクアマリンを用いる	color = 'aquamarine'
リストの末尾からn番目以前の部分を得る	aList[:-n]
実数のサイン	math.sin(x)
ヒストグラムの線の種類を点線にする	plt.hist(データ列, linestyle='dotted')
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
リストをソートする	sorted(aList)
データフレームを列によってソートし、、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ヒストグラムの色をミディアムスプリンググリーンに変更する	plt.hist(データ列, color='mediumspringgreen')
データフレームの列と列の相関行列を求める	df[[column, column2]].corr()
散布図を赤い菱形マーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データ列の平均	ds.mean()
棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
データ列のpercent分位数	ds.quantile(percent/100)
両端キューの先頭に要素を追加する	deq.appendleft(element)
データフレームの中のカラムを中央値でビニングする	pd.qcut(df[col], 2)
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
データフレームのカラムの25パーセンタイル	df[col].quantile(0.25)
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
線グラフの線種を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
データ列のNaNを平均値で埋める	ds.fillna(ds.mean())
行列の行ごとの最小	np.min(aArray, axis=1)
option: 最初の行をヘッダにセットする	header = 0
データフレームをTSVファイルとしてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
改行なしに二つの変数を出力する	print(value, value2, end='')
乱数で要素を埋めた配列を作成する	np.random.random(N)
バイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
フォレストグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
文字列の終了位置より前に部分文字列があるか	s.find(sub, 0, end) != -1
ベクトルの差	aArray - aArray2
列と列の重複を削除する	df.drop_duplicates(subset=column)
散布図に赤い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
ヒストグラムをスカイブルー色を用いて描画する	plt.hist(データ列, color='skyblue')
データフレームのリスト列の中に文字列があるか調べる	df[aList].isin([value])
横棒グラフをグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='green')
ベクトルの次元を変形する	aArray.reshape(行数, 列数)
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
横棒グラフをパレットトルコイズ色として描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
縦棒プロットを描画し、、バーの横幅を変更する	plt.bar(ラベル列, データ列, width=0.5)
option: ダークゴールデンロッド色を用いる	color = 'darkgoldenrod'
マッピングのキー一覧を得る	list(aDict)
データフレームのカラムを四捨五入して、整数型にする	df[col].round().astype(int)
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームを複数の列でソートして、更新する	df.sort_values(by=column, inplace=True)
下三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
２つのデータフレームを横に合体させる	pd.concat([df, df2], axis=1)
データフレームを表示するとき、ヘッダー行を左寄せに指定する	pd.set_option('colheader_justify', 'left')
横棒グラフをネイビー色を用いて描画する	plt.barh(データ列x, データ列y, color='navy')
部分文字列が文字列の開始位置と終了位置の間にある	s.find(sub, start, end) != -1
rgbのダイアモンドマーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
追加モードでファイルをオープンする]	open(filepath, mode='a')
黒い三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
テンプレートを辞書でフォーマットする	formatText.format_map(aDict)
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
option: ピーチパフにグラフの色をセットする	color = 'peachpuff'
横棒グラフを茶色色として描画する	plt.barh(データ列x, データ列y, color='brown')
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
淡い茶色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
データフレームのリストカラムの中央値	df[aList].median()
計算機イプシロンを求める	sys.float_info.epsilon
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
値を赤色でプリントする	print(f'\033[31m{value}\033[0m')
動作環境名	sys.platform
リストの中の最小値を計算する	min(aList)
option: グラフの色をオリーブに設定する	color = 'olive'
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
option: 色をイエローグリーンに設定する	color = 'yellowgreen'
タイムスタンプデータからn秒分、引く	aDatetime - datetime.timedelta(seconds=n)
0から始まるn個の整数列	list(range(n))
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ラインを一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
まとめてデータフレームの値をValueMapで置き換える	df.replace(ValueMap)
書き込み用にUTF8でファイルをオープンする]	open(filepath, mode='w', encoding='utf-8')
散布図のクロス印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
文字列の示すエンコーディングで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding=s)
半透明の点線としてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームのリストカラムの欠損値を最小値に指定する	df[aList].fillna(df[aList].min())
ロバストなクラス分類を行う	model = sklearn.linear_model.HuberClassifier()
option: ミディアムパープル色を使う	color = 'mediumpurple'
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
配列のパーセンタイルを作図する	plt.boxplot(データ列)
option: グラフの色をオーキッドに指定する	color = 'orchid'
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
ライトシアン色としてヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
numpyを使う	import numpy as np
データフレームのカラムをreplに一度に正規表現patternで置き換える	df[col].replace(pattern, repl, regex=True)
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
折れ線グラフをカーキ色として描画する	plt.plot(データ列x, データ列y, color='khaki')
CSVTSVファイルをn番目のカラムをインデックスとして読む	pd.read_csv(filename, index_col=n)
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
散布図に赤い四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c='r')
一点鎖線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
リネン色としてヒストグラムを描画する	plt.hist(データ列, color='linen')
茶色色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
ケンドール相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
option: フォントの色をナバホホワイトに変更する	color = 'navajowhite'
option: バッファのサイズをする	buffering = 4096
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
ブルーバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
option: マーカーの色を赤にする	markerfacecolor = 'red'
日付時刻データの日付を使う	aDatetime.date()
option: エンコーディングを文字コードtextに設定する	encoding = text
棒グラフをモカシン色を使って描画する	plt.bar(データ列x, データ列y, color='moccasin')
散布図をグリーン色として描画する	plt.scatter(データ列x, データ列y, color='green')
横棒グラフをマゼンタ色を用いて描画する	plt.barh(データ列x, データ列y, color='magenta')
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
日付データの日を求める	aDate.day
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
オブジェクトがリストかタプルか	isinstance(obj, (list)
CSVファイルタブ区切りのファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
ビン数nを用いてデータフレームの中のカラムを等量でビン分割する	pd.qcut(df[col], n)
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
縦棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
パラメータについて数式を積分する	sympy.integrate(e, z)
データを双方向キューの最初から取り除く	deq.popleft()
集合の補集合を使う	aSet.difference(aSet2)
データフレームのリスト列の標本標準偏差	df[aList].std()
散布図に黒い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームのリストカラムの欠損値を最大値で置き換える	df[aList].fillna(df[aList].max())
配列と配列の散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
横棒グラフを黄色色を用いて描画する	plt.barh(データ列x, データ列y, color='yellow')
散布図をサドルブラウン色として描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
折れ線グラフに赤い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
横棒グラフをミディアムブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumblue')
散布図に赤い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
option: 色をダークスラテグレーに設定する	color = 'darkslategray'
横棒グラフをベージュ色を用いて描画する	plt.barh(データ列x, データ列y, color='beige')
スピアマン相関係数でデータフレームのリストで指定された列の相関行列	df[aList].corr(method='spearman')
ベクトルを平坦化する	aArray.flatten()
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
option: 紺色を用いる	color = 'darkblue'
文字列から部分文字列を全て除去する	s.replace(sub, '')
データ列と配列の散布図をプロットして、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフのポイントマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ヒストグラムの色をマルーンに指定する	plt.hist(データ列, color='maroon')
文字列の先頭でケースを無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
青い破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
上位集合かどうか	aSet.issuperset(aSet2)
データフレームを列の値によって集計して、最小値を求める	df.groupby(column).min()
option: カラムの名前を自動的な連番に増やす	header = None
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
数列とリストについて散布図を描画し、、マーカーを右三角に変更する	plt.plot(データ列x, データ列y, marker='>')
nを八進文字列に変換する	oct(n)[2:]
散布図の下三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
アクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='aquamarine')
データフレームのリストカラムの値はNaNかどうか調べる	df[aList].isna()
表データを'A'列の値によってグループ化し、要約統計量を計算する	df.groupby('A').describe()
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
データフレームのリスト列の各列間の相関係数	df[aList].corr()
やわらかい青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
日付時刻データからn分減算する	aDatetime - datetime.timedelta(minutes=n)
最大値・最小値で乱数を求める	random.randint(最小値, 最大値)
部分文字列を文字列の開始位置から終了位置まで探す	s.find(sub, start, end)
option: パパイヤウィップにグラフの色を変更する	color = 'papayawhip'
青い実線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
分類モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
入力ストリームから1文字、読み込む	f.read(1)
折れ線グラフの色を濃い青に変更する	plt.plot(データ列x, データ列y, color='darkblue')
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
option: グラフの色をネイビーにセットする	color = 'navy'
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
要素が双方向キューの中に存在するか調べる	element in deq
ダークスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
ライトコーラル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームの中にいくつが存在するか求める	df.isin([value]).sum()
バイトオーダを知る	sys.byteorder
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
折れ線グラフの色をグリーンに指定する	plt.plot(データ列x, データ列y, color='green')
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
パールバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
要素は集合の要素でない	element not in aSet
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
文字列の左端から空白を除く	s.lstrip(' ')
文字列をバイト列に変換する	bytes(s)
文字列の左端から部分文字列を取り除く	s.lstrip(sub)
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
option: バッファリングのサイズを設定する	buffering = 4096
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
辞書の全エントリをクリアする	aDict.clear()
データフレームから重複した行をドロップして、入れ替える	df.drop_duplicates(inplace=True)
黒い四角マーカーを数列とイテラブルについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
グリッド線	plt.grid(alpha=0.5)
predicateFuncを適用したとき真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
リストと数列についての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
イテラブルとリストの散布図を描画し、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
線グラフの色を濃い青に設定する	plt.plot(データ列x, データ列y, color='darkblue')
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
データフレームの列の中の欠損値の合計を数える	df[col].isna().sum()
year年month月day日hour時minute分を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
シルバー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
組をミュータブルにする	list(aTuple)
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
キーがマップ上で定義済み	key in aDict
ファイルパスをオープンして]、書き込みストリームを求める	open(filepath, mode='w')
配列を等しい量になるようにn個に分割する	pd.qcut(aArray, n)
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
データフレームの列を丸める	df[col].round()
データ列を十の位で丸めて、整数にする	ds.round(-1).astype(int)
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
データフレームを列によってソートする	df.sort_values(by=column)
両端キューが空か	len(deq) == 0
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
偽	False
文字列が全て英数字か調べる	s.isalnum()
nが負の整数かどうか調べる	n < 0
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
データフレームをJSONLファイルにTSVファイルで保存する	df.to_csv(filename, sep='\t')
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
データフレームの列が文字列で始まる行を取り出す	df[df[column].str.startswith(s)]
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
ダークスラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
パステル調にカラーパレットをグラフの描画で用いる	sns.set(pallete='pastel')
外れ値に強い重回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
データフレームを関数の値によってグループ分けし、、列挙する	[(name, group) for name, group in df.groupby(関数)]
nとn2の積	n * n2
文字列を小文字に変換する	s.casefold()
データ列の曜日が何日目か確認する	ds.dt.dayofweek
データフレームのNaNをxで置換する	df.fillna(x)
プロットの凡例の位置を(x,y)に変更する	plt.legend(loc=(x, y))
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
データフレームのそれぞれのグループ毎の標準偏差	df.groupby(column).std()
実数のn乗して実数による余り	pow(x, n, y)
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
オブジェクトのプロパティを取り除く	delattr(obj, プロパティ名)
配列の行列式	np.linalg.det(aArray)
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
option: グラフの色をベージュにセットする	color = 'beige'
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
デピンクにヒストグラムの色を設定する	plt.hist(データ列, color='deeppink')
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
データフレームを２つの列によってまとめた表	df.groupby(['A', 'B'])
折れ線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
カンマ区切りのファイルを読み込む	pd.read_csv(filename, sep=',')
横方向に2つのデータフレームをマージする	pd.merge(df, df2)
グリッド線を黄色くする	plt.grid(color='y')
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
正規表現でデータフレームの値をreplにまとめて置き換える	df.replace(pattern, repl, regex=True)
折れ線グラフのポイントマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データフレームからカテゴリデータのカラムを取り出す	df.select_dtypes('object')
option: 追加用に設定する	mode = 'a'
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
散布図にrgbのダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
日付データが何曜日か知る	aDate.weekday()
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
文字列をセンタリングにする	s.center(文字列幅)
線グラフの色をラベンダーブラッシュにする	plt.plot(データ列x, データ列y, color='lavenderblush')
option: ミディアムオーキッドを用いる	color = 'mediumorchid'
リストの要素を昇順にソートする	sorted(aList, reverse=False)
折れ線グラフに青い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ライトスチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
日付時刻データがタイムスタンプデータと同時か調べる	aDatetime == aDatetime2
ダークサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
破線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
無限リスト	itertools.count()
横棒グラフをライトサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
本日が木曜日か判定する	datetime.datetime.today().weekday() == 3
縦棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
棒グラフをコーラル色として描画する	plt.bar(データ列x, データ列y, color='coral')
option: 色をフォレストグリーンに設定する	color = 'forestgreen'
ヒストグラムをブランチドアーモンド色を用いて描画する	plt.hist(データ列, color='blanchedalmond')
データフレームのカラムを1000の位で丸めて整数型にする	df[col].round(-3).astype(int)
青いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
散布図に赤い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
重回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
散布図のバツマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームの中の列を等しい量になるようにn個にビン分割する	pd.qcut(df[col], n)
option: ミディアムスプリンググリーンにグラフの色を指定する	color = 'mediumspringgreen'
整数のn乗を算出する	x ** n
option: 色をゴールドにする	color = 'gold'
データ列の折れ線グラフを描いて、色をカラーコードでセットする	plt.plot(データ列x, データ列y, color='#800080')
ダークスレートブルーにヒストグラムの色をセットする	plt.hist(データ列, color='darkslateblue')
論理値型のゼロ埋めした配列	np.zeros(要素数, dtype=np.int32)
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
グラフを画面に変更する	sns.set(context='notebook')
データ列を2つ並べて箱ヒゲ図にする	plt.boxplot([データ列, データ列])
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
ユニークな値を要素とするベクトル	np.unique(aArray)
線グラフの色をベージュに指定する	plt.plot(データ列x, データ列y, color='beige')
表データを列によってまとめた表	df.groupby(column)
データフレームの列を落とす	df.drop(column, axis=1)
折れ線プロットのラベルを指定する	plt.plot(データ列x, データ列y, label='ラベル')
線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
列でカウンタを更新する	aCounter.update(iterable)
option: 青を使う	color = 'blue'
option: トマトにグラフの色を設定する	color = 'tomato'
year年の日付	datetime.date(year=year, month=1, day=1)
データフレームからランダムに抽出する	df.sample()
辞書のコピーを新規生成する	aDict.copy()
option: 色をライトシアンに設定する	color = 'lightcyan'
文字列はキーワードかどうか	keyword.iskeyword(s)
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
option: 未入力値を先頭に来るようにする	na_position = 'first'
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
今日が水曜日か	datetime.datetime.today().weekday() == 2
実数の双曲線余弦の逆数	math.acosh(x)
カテゴリで色分けしてデータフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
文字列リストにイテラブルを変換して、空白によって結合する	' '.join(map(str, iterable))
データフレームの列の文字列が文字列で始まるデータを取り出す	df[df[column].str.startswith(s)]
option: 線の種類を点線に設定する	linestyle = 'dotted'
特異値分解でパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
option: グラフの色をライムに設定する	color = 'lime'
option: ライムを使う	color = 'lime'
降順に列名リストによってによってデータフレームをソートする	df.sort_values(by=column, ascending=False)
ヒストグラムで配列を可視化する	plt.hist(データ列)
現在のモジュール	sys.modules[__name__]
キーが辞書上で定義済みか調べる	key in aDict
データフレームの列を柱状図を用いて描画する	plt.hist(df[column])
データフレームのリストカラムが正規分布からどの程度、尖っているか調べる	df[aList].skew()
イテラブルと列を連結する	itertools.chain(iterable, iterable2)
折れ線グラフにダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
データフレームの列名の一覧を使う	df.columns
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
データフレームから重複する行を削除して、更新する	df.drop_duplicates(inplace=True)
サポートベクターマシンで回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図に菱形印を使用する	plt.scatter(データ列x, データ列y, marker='D')
本日が金曜日か確認する	datetime.datetime.today().weekday() == 4
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
論文にグラフの用途を設定する	sns.set(context='paper')
確率的勾配降下として回帰分析をする	model = sklearn.linear_model.SGDRegressor()
イテラブルとリストについて散布図を描画して丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ミッドナイトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<')
ミディアムアクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
ヒストグラムをブラウン色で描画する	plt.hist(データ列, color='brown')
タプルをひとつ飛ばしで取り出す	aTuple[::2]
データフレームの分散	df.var()
日付データと日付データの時間差を計算する	aDate - aDate2
行列の列を選択する	aArray[:, 列番号]
散布図に青いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
柱状グラフを複数横に並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームの平均と信頼区間を描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームをJSONLファイルにカラムの名前を付けずに保存する	df.to_csv(filename, header=None)
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
イテラブルを文字列に変換してつなげる	''.join(map(str, iterable))
文字列内にひとつでも大文字が含まれるか確認する	any(c.isupper() for c in s)
散布図の▽マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
文字列を空白で区切り、文字列リストに変換する	s.split()
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データ列の要約統計量を求める	ds.describe()
棒グラフをミスティローズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mistyrose')
データフレームのカラムは何分か見る	df[col].dt.minute
ヒストグラムをダークオリーブグリーン色として描画する	plt.hist(データ列, color='darkolivegreen')
ファイルが存在しないかどうか調べる	not os.path.exists(filepath)
xの小数点以下'5'桁までプリントする	print(':.5f'.format(x))
ヒストグラムをディムグレー色を使って描画する	plt.hist(データ列, color='dimgrey')
ベクトルのユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
文字列の後ろ	s[-1]
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
データ列が正規分布からどれだけ、尖っているか確認する	ds.skew()
ボックスチャートでデータ列を描画する	plt.boxplot(データ列)
データフレームのインデックス名をまとめて、nameからname2に変更する	df.rename(index={name: name2})
クラス分類をロバスト推定を用いて行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
文字列を文字コード列に変換する	[ord(ch) for ch in s]
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
配列の最小値	np.min(aArray)
データフレームからインプレイスで重複を消す	df.drop_duplicates(inplace=True)
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
縦棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
真部分集合か	aSet < aSet2
折れ線グラフに星印を使用する	plt.plot(データ列x, データ列y, marker='*')
横棒グラフをオレンジ色を使って描画する	plt.barh(データ列x, データ列y, color='orange')
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
option: パールゴールデンロッド色を使用する	color = 'palegoldenrod'
日付データが月曜日	aDate.weekday() == 0
日付データが水曜日か調べる	aDate.weekday() == 2
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
データフレームの列の中央値	df[col].median()
集合が空でないか	len(aSet) != 0
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
ライトイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
データフレームのカラムの分を使う	df[col].dt.minute
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
データ列の日を使う	ds.dt.day
データ列のNaNをメディアンで補う	ds.fillna(ds.median())
option: パールバイオレットレッドにグラフの色を指定する	color = 'palevioletred'
クラスが名前付きタプルかどうか調べる	issubclass(C, tuple)
ストリームを閉じる	f.close()
データフレームから重複したデータを削除する	df.drop_duplicates()
option: グラフの色をネイビーに設定する	color = 'navy'
イテラブルとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
折れ線グラフの色をインディゴに指定する	plt.plot(データ列x, データ列y, color='indigo')
データフレームのリストカラムの欠損値を最小値に減らす	df[aList].fillna(df[aList].min())
ヒストグラムの色を小麦色に指定する	plt.hist(データ列, color='wheat')
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
プロットのタイトルを設定する	plt.title('グラフの名称')
ドジャーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
淡いピンク色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
ダイアモンドマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
列をカウントしてカウンタから引く	aCounter.subtract(iterable)
ライトシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
最初のカテゴリーを除いてデータフレームの列をワンホット・ベクトルにする	pd.get_dummies(df[column], drop_first=True)
実行結果を赤色にする	f'\033[31m{value}\033[0m'
option: グラフの色をスノーに設定する	color = 'snow'
浮動小数点数の複素数を算出する	complex(x)
プラットホームの名前を知る	sys.platform
データ列が何曜日か見る	ds.dt.weekday_name
xの小数点以下'1'桁までの文字列にする	':.1f'.format(x)
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
茶色色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
option: ダークシアグリーンを使う	color = 'darkseagreen'
数式の簡単化を行う	sympy.sympify(e)
ヒストグラムをダークターコイズ色を用いて描画する	plt.hist(データ列, color='darkturquoise')
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
カラーバーを付ける	plt.colorbar()
option: 複素数型を使用する	dtype = bool
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
option: ASCII文字に限定する	flag = re.ASCII
データフレームのヒストグラムを横に並べて、図示する	sns.displot(df, x='列名', col='カテゴリ名')
リストとリストについて散布図をプロットして、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図を濃いシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
コロンで文字列を分割して、列挙する	s.split(':')
ディムグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
各列毎にデータフレームをグループ化し、、列の最大値を算出する	df.groupby(column)[column2].max()
組の末尾のn要素を除く	aTuple[:-n]
eの実数乗	math.exp(x)
コマンドの第二引数を確認する	sys.argv[1]
赤い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
非数値データを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データフレームを'A'列と'B'列を用いて並べ、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
二次元タプルをフラット化する	sum(aTuple)
日付データが月曜日か調べる	aDate.weekday() == 0
rgbに横棒グラフの色を変更する	plt.barh(ラベル列, データ列, color=rgb)
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
ネイビー色としてヒストグラムを描画する	plt.hist(データ列, color='navy')
散布図を小麦色色として描画する	plt.scatter(データ列x, データ列y, color='wheat')
ミディアムバイオレットレッドにヒストグラムの色を変更する	plt.hist(データ列, color='mediumvioletred')
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
散布図に黒いポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c='k')
データ列の中に日付データと文字列がいくつあるか数える	ds.isin([value, value2]).sum()
散布図に菱形印を用いる	plt.scatter(データ列x, データ列y, marker='D')
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
option: ダーク・スラテグレーにグラフの色を設定する	color = 'darkslategrey'
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
ゴールドにヒストグラムの色をセットする	plt.hist(データ列, color='gold')
イテラブルからカウンタを作る	collections.Counter(iterable)
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
文字列を置換する	s.replace(sub, newsub)
散布図を丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o')
数列とデータ列についての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
辞書をソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームの行の名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
文字列の中でASCII限定として正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
部分文字列を文字列の末尾から除去する	s.removesuffix(sub)
標準出力の出力先がターミナル	sys.stdout.isatty()
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
ヒストグラムをパパイヤウィップ色を用いて描画する	plt.hist(データ列, color='papayawhip')
ファイルを読み込みモードで開く]	open(filepath, mode='r')
カラムを100の位で丸める	ds.round(-2)
散布図をインディゴ色として描画する	plt.scatter(データ列x, データ列y, color='indigo')
ファイル全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
'A'列の値によってデータフレームをグループ化し、基本統計量を求める	df.groupby('A').describe()
散布図をオレンジレッド色として描画する	plt.scatter(データ列x, データ列y, color='orangered')
n2がnより大きくかつ、n3未満かテストする	n < n2 and n2 < n3
要素が集合の要素か調べる	element in aSet
縦棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
色付きの破線を用いて数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ダイアモンドマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='D')
組内の要素が少なくともひとつ真か調べる	any(aTuple)
ライムグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
浮動小数点数が整数か調べる	x.is_integer()
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
グラフで用いるパレットを指定する	sns.set(pallete=パレット名)
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
乱数シードをnで固定する	random.seed(n)
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
タプルの末尾を取り除く	aTuple[:-1]
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
スクリプトファイルの絶対パス	os.path.abspath(__file__)
ベクトルを2次元1行に変形する	aArray.reshape(1, -1)
リストとリストの散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
ヒストグラムを青色を用いて描画する	plt.hist(データ列, color='blue')
散布図に赤いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
集合の全ての要素が別のセットに含まれるかどうか調べる	aSet.issubset(aSet2)
折れ線グラフに黒い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
リストとリストの散布図に黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
option: 色をダークグレーに変更する	color = 'darkgray'
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
データフレームを表示するときヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
データ列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
パールバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
空の多重集合	collections.Counter()
実数のアークタンジェント	math.atan(x)
カラーバーを横向きで設定する	plt.colorbar(orientation='horizontal')
モカシン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
縦棒グラフをライトスレイグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightslategray')
多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
入力ストリームを一行ずつ読み込む	f.readline()
目盛線	plt.grid(linewidth=3.0)
八進文字列を整数にする	int(s, 8)
黒いポイントマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ヒストグラムをオリーブ色として描画する	plt.hist(データ列, color='olive')
nとkのコンビネーション	math.comb(n, k)
線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
標準エラーを	sys.stderr
option: グラフの色をグレーに設定する	color = 'grey'
変数を太字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
ベクトルを縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
日付時刻データの年	aDatetime.year
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
日付データをISO書式の文字列に変換する	aDate.isoformat()
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
オリーブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
ダークグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
文字列を変数化して、変数にする	z = sympy.Symbol(s)
線グラフの色をオレンジレッドに指定する	plt.plot(データ列x, データ列y, color='orangered')
option: ダークブルーを用いる	color = 'darkblue'
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
option: ディムグレー色を使う	color = 'dimgrey'
散布図の三角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
分割数nでデータフレームの中のカラムをビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
配列とイテラブルについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフに赤い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
赤い大バツマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
リストとリストについて散布図を描画してマーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
option: グラフの色を紺碧に変更する	color = 'azure'
ホワイト色でヒストグラムを描画する	plt.hist(データ列, color='white')
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
横棒グラフをトマト色として描画する	plt.barh(データ列x, データ列y, color='tomato')
実数の双曲線正弦の逆数	math.asinh(x)
データ列を中央値でビン分割する	pd.qcut(ds, 2)
データ列をビン数nを用いてビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
句読点文字を全部使う	string.punctuation
データフレームをグループ化し、列に対し最大値を算出する	df.groupby(column)[column2].max()
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
度数分布図でデータフレームの列を描画する	plt.hist(df[column])
ピアソン積率相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
珊瑚色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
オプションでファイルに出力する	file = sys.open(filename, 'w')
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
スカイブルー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
棒グラフをブランチドアーモンド色として描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
列の欠損値を中央値に設定する	ds.fillna(ds.median())
部分文字列が部分文字列で始まる	s.startswith(sub)
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
横棒グラフをデピンク色として描画する	plt.barh(データ列x, データ列y, color='deeppink')
タプルを文字列に変換して、'改行によって連結する	'\n'.join(map(str, iterable))
文字列を末尾から空白で区切る	s.rsplit()
リストとリストの散布図を描いて、△マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
ビン数を設定してヒストグラムを描く	plt.hist(データ列, bins=区関数)
横棒グラフを紺碧色を用いて描画する	plt.barh(データ列x, データ列y, color='azure')
ライトグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
ブール型のゼロ埋めされた配列を作成する	np.zeros(要素数, dtype=np.int32)
データフレームの中にいくつ欠損値が存在するかカウントする	df.isna().sum()
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
プロットを明るくする	sns.set(pallete='bright')
option: 決定木の最大深さを設定する	maxdepth = n
カラーバーを横向きでつける	plt.colorbar(orientation='horizontal')
predicateFuncが真となるイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
無限大	math.inf
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
ヒストグラムをパパイヤウィップ色として描画する	plt.hist(データ列, color='papayawhip')
option: マゼンタにグラフの色を設定する	color = 'magenta'
漢字が文字列に含まれるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
データフレームの値を正規表現で一度に変更する	df.replace(pattern, repl, regex=True)
ふたつのリストの積集合	list(set(aList) & set(aList2))
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
オブジェクトが組の要素でないか調べる	element not in aTuple
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
option: アイボリー色を使う	color = 'ivory'
日付時刻データの月数を見る	aDatetime.month
リストとリストについての散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
プロットをデフォルトでいい感じにする	sns.set()
試しに何か動かしてみる	print('Hello World')
数の小数点以下を丸める	round(x)
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
ライトサーモン色でヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
ゴールデンロッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
双方向キューの中に数値が含まれてる	element in deq
option: フォントの色をオレンジレッドに設定する	color = 'orangered'
スピアマンの相関係数を使う	scipy.stats.spearmanr(データ列, データ列2)
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
値が集合のメンバーか調べる	element in aSet
区切りによって文字列を分割し、、列挙する	s.split(sep)
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: 色を赤に指定する	color = 'red'
タイムスタンプデータの分数を使う	aDatetime.minute
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
データフレームを降順に二つの列によってによってソートする	df.sort_values(by=['A', 'B'], ascending=False)
ヒストグラムの色を紺に変更する	plt.hist(データ列, color='darkblue')
option: フォントの色をアリスブルーに指定する	color = 'aliceblue'
標準エラーを得る	sys.stderr
区切りで文字列を区切り、文字列リストに変換する	s.split(sep)
option: 黄色色を使用する	color = 'yellow'
リストとリストについての散布図に赤い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームのリスト列の中央値	df[aList].median()
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
青い点線としてデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ファイルが存在するか調べる	os.path.exists(filepath)
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
option: フォントの色をクリムゾンに指定する	color = 'crimson'
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
データ列を丸めて整数型にする	ds.round().astype(int)
折れ線グラフを下三角印を用いて描画する	plt.plot(データ列x, データ列y, marker='v')
2つのデータフレームを結合する	pd.merge(df, df2)
行列の要素数を求める	aArray.size
データフレームを複数の列でソートし、、更新する	df.sort_values(by=column, inplace=True)
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
option: グラフの色をシアンに設定する	color = 'cyan'
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
ナバホホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
グラフの横軸の軸名を指定する	plt.xlabel('x軸ラベル')
散布図の丸マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
点線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
タプルの中の最小値	min(aTuple)
ファイルパスを追加モードで開いて]fとする	f = open(filepath, mode='a')
赤い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
グラフからグリッド線を消す	plt.grid(False)
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
折れ線グラフをスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='springgreen')
散布図をミッドナイトブルー色として描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
option: フクシアにグラフの色を設定する	color = 'fuchsia'
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
文字列は全て十進数字か調べる	s.isdecimal()
横棒グラフを描いて、下寄せする	plt.barh(ラベル列, データ列, align='edge')
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
オブジェクトの種類を見る	type(obj)
option: ダークオリーブグリーンに色を設定する	color = 'darkolivegreen'
データフレームを'A'列を用いてソートする	df.sort_values(by='A')
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
リストの移り変わりを色付きの実線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
データフレームのリスト列が正規分布からどれだけ尖っているか見る	df[aList].skew()
文字列の後ろから改行を取り除く	s.rstrip('\n')
浮動小数点数が負か調べる	x < 0
文字列の中の複数行対応としてパターンによる全マッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
文字列中の部分文字列を新しい文字列に回数を制限して置換する	s.replace(sub, newsub, n)
列の値で欠損値を含めて表データをグループ化する	df.groupby(column, dropna=False)
グリッド線を青くする	plt.grid(color='b')
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
option: アンティークホワイト色を用いる	color = 'antiquewhite'
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
option: 改行を区切り記号で用いる	sep = '\n'
ふたつの集合のユニオンを使う	aSet.union(aSet2)
実数とyの斜辺	math.hypot(x, y)
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
二次元組をフラット化する	sum(aTuple)
行列の内積	np.dot(aArray, aArray2)
部分文字列が部分文字列で開始する	s.startswith(sub)
文字列の大文字小文字を変換する	s.casefold()
散布図に黒い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
配列をn個に等しい量になるようにビン分割する	pd.qcut(aArray, n)
ハローワールドとプリントする	print('Hello World')
行列を縦ベクトルに変形する	aArray.reshape(-1, 1)
データフレームをTSV形式のファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: タン色を使う	color = 'tan'
整数nを十六進数表記に変換する	hex(n)
折れ線グラフの左三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
文字列の開始位置から終了位置までの範囲で部分文字列の登場をカウントする	s.count(sub, start, end)
二つの変数をそれぞれ定義する	x, y = i, j
横棒グラフをダークオリーブグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
数値を方程式として解く	sympy.solve(e)
折れ線グラフのバツ印の色を指定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ロバストな線形分類モデルを新規作成する	model = sklearn.linear_model.HuberClassifier()
散布図をゴールデンロッド色を使って描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
データフレームを'A'列を用いて並べる	df.sort_values(by='A')
大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X')
データフレームの列を文字列に名前変更する	df.rename(columns={column: name})
異なるカラムをキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
Pythonパスにを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
配列を縦ベクトルに変形する	aArray.reshape(-1, 1)
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
赤い▼マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームのリスト列の欠損値を第二四分位数に設定する	df[aList].fillna(df[aList].median())
グラフをポスター用に設定する	sns.set(context='poster')
option: バイナリ書き込みモードを使う	mode = 'wb'
文字列をカンマで区切って、文字列リストに変換する	s.split(',')
ヒストグラムと勾配ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
パパイヤウィップ色でヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
タプルを引数として展開して表示する	print(*aTuple)
散布図をレベッカパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
データフレームのインデックスがnの行を抽出する	df.loc[n]
option: ビスク色を用いる	color = 'bisque'
イテラブルから双方向キューを生成する	collections.deque(iterable)
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
ミディアムスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
option: シャルトリューズ色を使う	color = 'chartreuse'
アークコサイン	math.acos(x)
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リストのn番目からn2番目の部分を取り出す	aList[n:n2]
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
棒グラフをパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='purple')
ヒストグラムをカーキ色を用いて描画する	plt.hist(データ列, color='khaki')
option: エラーを無視する	errors = 'ignore'
オプションで、出力先を標準出力に変更する	file = sys.stdout
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
データフレームのリスト列の50パーセンタイルを計算する	df[aList].median()
点線に線グラフの線種をセットする	plt.plot(データ列x, データ列y, linestyle='dotted')
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
散布図にrgbの菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
複数の列によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
option: ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
イテラブルから双方向キューを新規生成する	collections.deque(iterable)
縦棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
自然数の順列の総数	math.perm(n)
イテラブルの各要素を双方向キューの右側に追加する	deq.extend(iterable)
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
スピアマン順位相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
縦棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
ゴールド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
回帰モデルをクロスバリデーションする	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
配列を2次元1列に変形する	aArray.reshape(-1, 1)
フクシア色でヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
predicateFuncが真とならない列の部分	itertools.dropwhile(predicateFunc, iterable)
日付時刻データは日付時刻データと同時	aDatetime == aDatetime2
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
カテゴリでグループ化してデータフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームのNaNを直後の値で補う	df.fillna(method='bfill')
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
実数を実数で整数除算する	x // y
折れ線グラフの印を下三角にする	plt.plot(データ列x, データ列y, marker='v')
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
横棒グラフをライトサーモン色として描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
カウンタの正のカウントだけ残す	+aCounter
整数nを2進数文字列に変換する	bin(n)[2:]
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
青いヒストグラムを描画する	plt.hist(データ列, color='b')
データ列を100の位で丸める	ds.round(-2)
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
sepを区切りとして文字列リストを結合する	sep.join(aStringList)
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
パウダーブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
option: コロンを分割記号で用いる	sep = ':'
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
破壊的にデータフレームを昇順に列によって並べる	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
グラフにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
まとめてreplにデータフレームの列を正規表現patternで置換する	df[col].replace(pattern, repl, regex=True)
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
変数を改行なしにプリントする	print(value, end='')
列をキーにして2つのデータフレームを左ジョインする	pd.merge(df, df2, on=column, how='left')
nがn2未満、またはn3以上か	n < n2 or n >= n3
option: 欠損値も無視しない	dropna = True
オリベドラブ色としてヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
折れ線グラフをマルーン色を使って描画する	plt.plot(データ列x, データ列y, color='maroon')
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
ヒストグラムをフクシア色を用いて描画する	plt.hist(データ列, color='fuchsia')
option: グラフの線の幅を3.0ポイントに設定する	linewidth = 3.0
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
TSVファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
データフレームのカラムの記述統計量	df[col].describe()
option: カデットブルーにグラフの色を変更する	color = 'cadetblue'
整数nの十六進数文字列	hex(n)[2:]
option: グラフの色をゴーストホワイトに変更する	color = 'ghostwhite'
再帰エラーを防ぐ	sys.setrecursionlimit(1000000)
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
option: マーカーの色を白にする	markerfacecolor = 'white'
データフレームのリストカラムが正規分布からどれだけ尖っているか確認する	df[aList].skew()
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
ライトスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
現在処理中の例外を情報を知る	sys.exc_info()
主成分分析として濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
ヒストグラムをラベンダー色として描画する	plt.hist(データ列, color='lavender')
ダークマゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
日付データと日付データの時間差	aDate - aDate2
再帰の上限を上げる	sys.setrecursionlimit(1000000)
縦棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
二つのオブジェクトは等しい	obj == obj2
option: ハニーデュー色を使う	color = 'honeydew'
データフレームのリストカラムの欠損値をメディアンで補う	df[aList].fillna(df[aList].median())
散布図の右三角印を青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
ファイルから追加ストリームを開いて]fとする	f = open(filepath, mode='a')
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
組のn番目の	aTuple[n]
列の中に存在する文字列の合計をカウントする	ds.isin([value]).sum()
リストが全て真	all(aList)
カラムのpercent分位数	ds.quantile(percent/100)
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
実数の逆正接を求める	math.atan(x)
option: スラグレー色を使用する	color = 'slategrey'
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
option: ライトグリーンを使う	color = 'lightseagreen'
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
データフレームを列ごとにグループ化してそれぞれのグループごとの分散を求める	df.groupby(column).var()
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
データフレームを関数の値によって集約する	df.groupby(関数)
文字列中の部分文字列の出現を数える	s.count(sub)
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
文字列内にひとつでもアスキー文字が含まれるか	any(c.isascii() for c in s)
n割るmの分数表現	fractions.Fraction(numerator=n, denominator=m)
ファイルをBOM付きで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
データフレームから指定された三つの列だけ取り出す	df[[column, column2, column3]]
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
文字列の長さ	len(s)
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
文字列で区切って二つの文字列を表示する	print(value, value2, sep=s)
複数行対応としてパターンで文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
大量のデータ列が正規分布かどうか調べる	scipy.stats.kstest(データ列, 'norm')
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
オブジェクトがある型のインスタンスか調べる	isinstance(obj, クラス)
数値を黒色にする	f'\033[30m{value}\033[0m'
option: 切片を算出しない	fit_intercept = False
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
マッピングの浅いコピーを生成する	aDict.copy()
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
散布図の印を左三角にする	plt.scatter(データ列x, データ列y, marker='<')
一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの列の名前を付け直す	df.rename(columns={column: name})
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
option: データ型として三二ビット整数型を用いる	dtype = np.int16
折れ線グラフの色をパウダーブルーに指定する	plt.plot(データ列x, データ列y, color='powderblue')
本日の年数	datetime.datetime.today().year
データフレームのカラムのタイムゾーンを日本に指定する	df[col].tz_convert('Asia/Tokyo')
ライトシアンにヒストグラムの色を変更する	plt.hist(データ列, color='lightcyan')
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
タプルの最初のn要素を除く	aTuple[n:]
データフレームのカラムの時	df[col].dt.hour
行列の累積和を求める	np.cumsum(aArray)
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
ヒストグラムをドジャーブルー色として描画する	plt.hist(データ列, color='dodgerblue')
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
ヒストグラムと勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
本日の日数	datetime.datetime.today().day
option: フクシア色を使う	color = 'fuchsia'
2つのタプルをチェーンする	collections.ChainMap(aDict, aDict2)
コマンドtextを実行する	os.system(text)
option: パールバイオレットレッド色を使う	color = 'palevioletred'
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームをJSONLファイルにカラムの名前を付けずに書き込む	df.to_csv(filename, header=None)
三つの文字列を順にプリントする	print(value, value2, value3)
複数の列でデータフレームを並べる	df.sort_values(by=column)
データフレームのカラムの値が欠損値か調べる	df[col].isna()
データ列と数列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
ミディアムオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
横棒グラフをデピンク色を使って描画する	plt.barh(データ列x, データ列y, color='deeppink')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
リストとリストについて散布図を描画して三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
現在の秒数を見る	datetime.date.today().second
xの絶対値	abs(x)
日付時刻データが日曜日か	aDatetime.weekday() == 6
プロットで使うフォントを日本語表示に変更する	sns.set(font='IPAexGothic')
option: ダークカーキ色を用いる	color = 'darkkhaki'
散布図を大バツ印を使って描画する	plt.scatter(データ列x, データ列y, marker='X')
クラスのサブ型か	issubclass(サブクラス, クラス)
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
文字列はリストに含まれるか調べる	element in aList
リストとリストについての散布図に黒い三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
文字列の接尾辞は部分文字列かどうか	s.endswith(sub)
線グラフの色をハニーデューにセットする	plt.plot(データ列x, データ列y, color='honeydew')
イテラブルと数列リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
書き込み用にファイルをSJISでオープンする]	open(filepath, mode='w', encoding='shift_jis')
エポック秒の文字列からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
option: コーンズシルクにグラフの色を指定する	color = 'cornsilk'
データフレームを小数点以下n桁で丸める	df.round(n)
1からNまでの配列	np.arange(1, N+1)
option: イエローグリーン色を用いる	color = 'yellowgreen'
データフレームとデータ列を横方向につなぐ	pd.concat([df, ds], axis=1)
実数を実数で割って、小数点以下を切り捨てる	x // y
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
option: 配列のデータ型を指定する	dtype = np.int16
散布図を赤い右三角マーカーを使ってプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
正規分布による累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
配列と配列について散布図をプロットしてマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
イテラブルとシーケンスをペアのリストにする	itertools.zip_longest(iterable, iterable2)
度数分布図を三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
標準入力	sys.stdin
配列と配列についての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
データフレームのリスト列のヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
表示する最大列数を増やす	pd.set_option('display.max_columns', n)
フクシア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
数値のパラメータについてのn階微分を求める	sympy.diff(e, z, n)
ふたつの関係が上位集合もしくは等しい	aSet > aSet2
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
縦棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームの列の値がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
文字列を部分文字列で分割した場合の残りの文字列	s.partition(sub)[-1]
範囲を指定して部分文字列を文字列の最後から探す	s.find(sub, start, end)
赤い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列の右側から改行を除去する	s.rstrip('\n')
ミッドナイトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='midnightblue')
bとn2から成るペア	(n, n2)
データフレームの列と列を消す	df.drop([column, column2], axis=1)
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgreen')
リストのn番目の要素を削除する	del aList[n]
線グラフの色をミディアムパープルにする	plt.plot(データ列x, データ列y, color='mediumpurple')
双方向キューの要素を右にn個分輪番で回す	deq.rotate(n)
前もってパターンをASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
xが一桁の正の数	0 <= x <= 9
日付データの月数	aDate.month
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
option: オリーブにグラフの色を指定する	color = 'olive'
option: 破壊的に操作する	inplace = True
データフレームを散布図で可視化して、カテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
データフレームをグループ化して、ヒストグラムを使って可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
データフレームの尖度を求める	df.skew()
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
黒い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='k')
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
ヒストグラムの色を貝殻に指定する	plt.hist(データ列, color='seashell')
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
列をビン数nでビン分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
リストとリストについての散布図に赤い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
横棒グラフを小麦色色を用いて描画する	plt.barh(データ列x, データ列y, color='wheat')
数値を緑色でプリントする	print(f'\033[32m{value}\033[0m')
イエローグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
文字列を下線付きにする	f'\033[4m{value}\033[0m'
リストと配列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
乱数生成系列をnで固定化する	random.seed(n)
文字列を最後の部分文字列で分けたときの前半の文字列を使う	s.rpartition(sub)[0]
データ列のNaNを最小値に指定する	ds.fillna(ds.min())
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
ペアリストpairsからカウンタを生成する	collections.Counter(dict(pairs))
線グラフの色をブラックにセットする	plt.plot(データ列x, データ列y, color='black')
線グラフの色をトマトに変更する	plt.plot(データ列x, データ列y, color='tomato')
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
データフレームのカラムを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
表データの数値を小数点以下n桁で丸める	df.round(n)
タプルの先頭を取り除く	aTuple[1:]
縦棒グラフをライトイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightyellow')
グラフをPNGファイルとして保存する	plt.savefig('foo.png')
文字列を緑色で表示できる文字列にする	f'\033[32m{value}\033[0m'
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
実数がNaNか	math.isnan(x)
折れ線グラフとしてデータフレームのカラムを可視化する	plt.plot(df[column], df[column])
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
部分文字列で文字列を区切って、文字列リストに変換する	s.split(sub)
ガウス過程で回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
マップにキーワード引数で追加する	aDict.update(**kwargs)
データ列を小数点以下n桁で丸める	ds.round(n)
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
option: マーカーをバツに変更する	marker = 'x'
リストを組に変換する	tuple(aList)
カテゴリ別で色付けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
縦棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
タイムスタンプデータの日付	aDatetime.date()
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
カウンタを辞書から作る	collections.Counter(aDict)
棒グラフの色をセットする	plt.bar(ラベル列, データ列, color=rgb)
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
最大値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].max())
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
日付データをISO形式の文字列に変換する	aDate.isoformat()
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
線グラフをスラグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='slategray')
ヒストグラムと勾配ブースティングで回帰分析をする	model = sklearn.ensemble.HistGradientBoostingRegressor()
リストとリストについて散布図を描いて、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
線グラフの色をスラグレーにする	plt.plot(データ列x, データ列y, color='slategrey')
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
タプルをひとつ置きに取り出す	aTuple[::2]
列でデータフレームを集約して、それぞれのグループの合計を算出する	df.groupby(column).sum()
nからn2の値を引いてnとする	n -= n2
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
散布図の色を濃い青にする	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームの相関行列ケンドール順位相関係数で	df.corr(method='kendall')
正規分布の累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
集合が空でない	len(aSet) != 0
折れ線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
カラムを十の位で丸める	ds.round(-1)
ケンドールの順位相関係数を算出する	scipy.stats.kendalltau(データ列, データ列2)
文字列の開始位置から終了位置までの範囲で部分文字列を数える	s.count(sub, start, end)
データ列の未入力値をメディアンに設定する	ds.fillna(ds.median())
カウンタの項目のカウントを求める	aCounter[element]
数を百の位で丸める	round(x, -2)
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
列の値でデータフレームをグループ化して、分散を求める	df.groupby(column).var()
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
セットが空か調べる	len(aSet) == 0
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
n行をデータフレームからランダムに抽出する	df.sample(n)
作画の背景色を暗くする	sns.set(style='darkgrid')
option: ライトブルーに色を設定する	color = 'lightblue'
線形回帰モデルを当てはめる	model.fit(説明変数, 目的変数)
黒い星マーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
配列の全要素の値を変更する	aArray[:, :] = 指定の値
折れ線グラフをミントクリーム色を用いて描画する	plt.plot(データ列x, データ列y, color='mintcream')
配列をビン数nとしてビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
グラフにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
散布図の大バツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
nがn2よりも大きいかどうか調べる	n > n2
リストとリストの散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
列をキーにして二つの表データを結合する	pd.merge(df, df2, on=column)
逆順の両端キューを使う	reversed(deq)
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
浮動小数点数を実数で割る	x / y
データフレームの列の欠損値を最大値で埋める	df[col].fillna(df[col].max())
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
カウンタからゼロカウントを削除する	+aCounter
ファイルを読み込みモードで開いて]、fとする	f = open(filepath, mode='r')
year年month月day日を日付時刻にする	datetime.datetime(year=year, month=month, day=day)
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
青いグリッド線を引く	plt.grid(color='b')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
データフレームのカラムの最頻値	df[col].mode()
配列とリストの散布図をプロットして、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
英字を全て使う	string.ascii_letters
データフレームのカラムの欠損値を最大値で置き換える	df[col].fillna(df[col].max())
ヒストグラムの色をライトブルーに指定する	plt.hist(データ列, color='lightblue')
横軸の目盛に文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
組をひとつ置きに抽出する	aTuple[::2]
日付データが日曜日か	aDate.weekday() == 6
データフレームが重複している	df.duplicated()
線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
カテゴリ列に並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
nをn2だけ左シフトする	n << n2
散布図をカデットブルー色として描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
横棒グラフをブルーバイオレット色として描画する	plt.barh(データ列x, データ列y, color='blueviolet')
ファイルパスから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
折れ線グラフの右三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
データフレームの列の名前を変更する	df.rename(columns={column: name})
コーンフラワーブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
多次元データを多次元尺度構成法でパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
option: 黄色色を用いる	color = 'yellow'
ヒストグラムをブラウン色を用いて描画する	plt.hist(データ列, color='brown')
ダークバイオレット色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
折れ線グラフの色をスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
シャルトリューズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
option: オリーブ色を使用する	color = 'olive'
n番目の列をデータフレームから除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
option: 大バツマーカーを用いる	marker = 'X'
辞書をクリアする	aDict.clear()
文字列を黄色にする	f'\033[33m{value}\033[0m'
option: グラフの色を赤に設定する	color = 'red'
小数点数の常用対数	math.log10(x)
横軸の目盛を非表示にする	plt.xticks([])
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
ファイルパスから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
コマンドの第一引数を知る	sys.argv[1]
文字列はリストに含まれないか調べる	element not in aList
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
イエローグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='yellowgreen')
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='gray')
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
データ列間の平方根平均二乗誤差を算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
文字列が空白文字からなるか確認する	s.isspace()
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
色付きの点線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
スクリプトファイルと同じフォルダのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
option: アイボリー色を用いる	color = 'ivory'
円グラフを真円にする	plt.axis('equals')
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
日付時刻データからn秒を減算する	aDatetime - datetime.timedelta(seconds=n)
option: エラーを無視するように変更する	errors = 'ignore'
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
新しい単回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
折れ線グラフの菱形マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
散布図の丸印の色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
小麦色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームの末尾n行を抽出する	df.tail(n)
文字列の最後	s[-1]
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
データ列のNaNをxで埋める	ds.fillna(x)
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
カラムがどの程度、分散しているか見る	ds.var()
既存の配列を元に全要素が初期値の行列	np.full_like(aArray, 初期値)
option: ライトグリーン色を使用する	color = 'lightseagreen'
辞書からカウンタを作る	collections.Counter(aDict)
散布図をライトサーモン色として描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
インデックスを用いてデータフレームを小さい順に並べる	df.sort_index(ascending=True)
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
JSON文字列をデータにする	json.loads(b.decode('unicode-escape'))
データフレームから指定された2つの列を取り出す	df[[column, column2]]
イテラブルを文字列リストに変換してカンマでつなげる	','.join(map(str, iterable))
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
グラフに簡単な説明を加える	plt.legend(['凡例A', '凡例B'])
ミディアムスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumslateblue')
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
ダークオレンジ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
Pandasで、エポック秒のデータフレームのcollからタイムスタンプに変換する	pd.to_datetime(df[col], unit='s', utc=True)
タプルのキーの一覧を得る	aDict.keys()
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
データを最大値として正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
データフレームを'A'列によって昇順にソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
option: ダークカーキにグラフの色を設定する	color = 'darkkhaki'
棒グラフをプラム色として描画する	plt.bar(データ列x, データ列y, color='plum')
ライトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
日付時刻データにn時間を加える	aDatetime + datetime.timedelta(hours=n)
ファイルパスをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
スラグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
部分文字列が文字列の終了位置より前に含まれないか調べる	s.find(sub, 0, end) == -1
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
淡いピンク色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
散布図の四角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
データフレームを表示するときカラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
オブジェクトは関数か確認する	callable(obj)
行列の標準偏差	np.std(aArray)
行列の列ごとの分散を求める	np.var(aArray, axis=0)
データフレームを複数の列でソートしてNaNを先頭にする	df.sort_values(by=column, na_position='first')
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
オーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
縦軸の目盛りを対数に変更する	plt.yscale('log')
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
オブジェクトが文字列か調べる	isinstance(obj, str)
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
データフレームの中の列を等しい量になるようにビン数nでビン分割する	pd.qcut(df[col], n)
横棒グラフをアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='aquamarine')
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
散布図に△マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
データフレームのひとつのカラムだけ説明変数にする	説明変数 = df[['列名']]
カデットブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cadetblue')
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
ゴーストホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
グラフを表示する	plt.show()
ファイル名がJSONファイル	filename.endswith('.json')
データ列のNaNを直後の値で補う	ds.fillna(method='bfill')
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
option: ミディアムターコイズに色を変更する	color = 'mediumturquoise'
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
散布図をライトサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
ヒストグラムの色をミディアムアクアマリンに変更する	plt.hist(データ列, color='mediumaquamarine')
真部分集合か調べる	aSet < aSet2
エラーなく集合から要素を取り除く	aSet.discard(element)
タン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
x,yの複素数を求める	complex(x, y)
モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
双方向キューからポップする	deq.pop()
nからn2までの整数列を使う	list(range(n, n2+1))
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームの列と列のヒートマップをグラフ化する	sns.heatmap(df[[column, column2]].corr())
option: 読み込むシートの名前をnamesに設定する	sheet_name = names
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
リッジ回帰とロッソ回帰の組み合わせた分析を行う	model = sklearn.linear_model.ElasticNet()
ネイピア数	math.e
折れ線グラフの色をパールゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='palegoldenrod')
グラフにx=0の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
文字列を青色にする	f'\033[34m{value}\033[0m'
シーケンスからカウンタを作る	collections.Counter(iterable)
データフレームを複数の列によって昇順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
グラフの描画で暗くカラーパレットを使用する	sns.set(pallete='dark')
option: 線の種類を実線に指定する	linestyle = 'solid'
option: エンコーディングを文字列の示すエンコーディングに指定する	encoding = s
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
データフレームから指定された二つの列を抽出する	df[[column, column2]]
データフレームの列の名前の一覧を使う	df.columns
ヒートマップとしてデータフレームのリスト列の相関行列をグラフ化する	sns.heatmap(df[aList].corr())
等しい量になるようにビン数nでリストをビン分割する	pd.qcut(aList, n)
option: 濃いシアンに色を変更する	color = 'darkcyan'
option: グラフの色をダークサーモンに変更する	color = 'darksalmon'
破壊的に昇順に二つの列によってデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームを破壊的に昇順に複数の列によって並べる	df.sort_values(by=column, ascending=True, inplace=True)
データフレームの中の欠損値がある行を削除する	df.dropna()
プロットの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
データフレームから1行だけ列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
丸マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='o')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
option: オリーブ色を使う	color = 'olive'
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
プロットに用いるフォントを指定する	sns.set(font=フォント名)
正規表現に大文字・小文字を無視して文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: ライトコーラル色を使う	color = 'lightcoral'
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
nからn2までのstepごとによるスライス	slice(n, n2, step)
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
横棒グラフをダークレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='darkred')
正規表現を使用する	import re
データフレームのリスト列の相関行列ケンドール相関係数でを求める	df[aList].corr(method='kendall')
横棒グラフの色をバイオレットにする	plt.barh(データ列x, データ列y, color='violet')
データフレームを列によってグループ化して列挙する	[(name, group) for name, group in df.groupby(column)]
ダークターコイズ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
オブジェクトのメモリビューを使う	memoryview(obj)
確率的勾配降下としてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
縦棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
上限制限された長さを指定して、両端キュー	collections.deque(maxlen=n)
データフレームの指定された列を配列に変換する	df[column].values
縦棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
格子をグラフに表示する	plt.grid(True)
データフレームを二つの列を用いてで破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
option: シルバー色を使う	color = 'silver'
重複した行をデータフレームから破壊的に削除する	df.drop_duplicates(inplace=True)
rgbの左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列を末尾から部分文字列で分割する	s.rsplit(sub)
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストとリストの散布図に黒い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
option: 赤にグラフの色を設定する	color = 'red'
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
縦棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
日付時刻データをISO8601形式の文字列に変換する	aDatetime.isoformat()
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
ファイルがない	not os.path.exists(filepath)
折れ線グラフを赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
数列と数列の散布図を描画して大バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
線グラフをダークブルー色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
黒い左三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
オブジェクトのフィールドの値を使う	getattr(obj, プロパティ名)
プロットからグリッド線を消す	plt.grid(False)
リストを引数として展開して表示する	print(*aList, sep=',')
データフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column])
リストを昇順に並べ直す	sorted(aList, reverse=True)
option: グラフの色をレモンシフォンに変更する	color = 'lemonchiffon'
印字可能な文字を全部使う	string.printable
点間のユークリッド距離	math.dist(point, point2)
文字列を最初の部分文字列で二分し、後半の文字列を見る	s.partition(sub)[-1]
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
データフレームを列でグループ化し、、それぞれのグループごとの件数を知る	df.groupby(column).size()
ダークスラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ヒストグラムを描画して、ビンを変更する	plt.hist(データ列, bins=区関数)
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
黒い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
行列の行ごとの標準偏差を求める	np.std(aArray, axis=1)
イテラブルの推移を折れ線グラフで図示する	plt.plot(range(len(データ列)), データ列)
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
option: 読み込み用に変更する	mode = 'r'
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
小数点数の正弦の逆数	math.asin(x)
列の組み合わせ	itertools.combinations(iterable, n)
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t')
オブジェクトのバイトサイズを知る	sys.getsizeof(obj)
縦棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
半透明の点線としてデータ列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データフレームをタブ区切りでJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
option: ダークカーキを使う	color = 'darkkhaki'
一点鎖線でリストの移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
箱ひげ図でデータ列を描画する	plt.boxplot(データ列)
データフレームのカラムを型に変換する	df[col] = df[col].astype(ty)
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
散布図をドジャーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
文字列を最後の部分文字列を使って二分する	s.rpartition(sub)
option: 右三角印を描画する	marker = '>'
三つの変数を順にプリントする	print(value, value2, value3)
赤い点線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
カラーパレットを明るくする	sns.set(pallete='bright')
表データのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
改行除外して入力ストリームを一行ずつ読む	f.readline()
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
option: グラフの色をライトグリーンに指定する	color = 'lightseagreen'
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
文字列が文字列より辞書順で前かどうか調べる	s < s2
実数を小数点数で割った剰余	math.remainder(x, x2)
データ列の歪度	ds.kurt()
option: 淡いピンク色色を使う	color = 'lightpink'
option: ゴールデンロッドを使用する	color = 'goldenrod'
ベクトルの要素数	aArray.size
データフレームを列によってソートして、行を振り直す	df.sort_values(columns).reset_index(drop=True)
グラフの横軸を対数目盛に変更する	plt.xscale('log')
option: オレンジにグラフの色を設定する	color = 'orange'
文字列中の部分文字列を新しい文字列に全て置き換える	s.replace(sub, newsub)
ヘッダを付けずにデータフレームをJSONLファイルに保存する	df.to_csv(filename, header=None)
option: フォントの色をミディアムパープルに指定する	color = 'mediumpurple'
ファイルパスの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
縦棒グラフを紺碧色を使って描画する	plt.bar(データ列x, データ列y, color='azure')
データフレームの全カラムの散らばりをプロット化する	sns.pairplot(df)
option: ダークスラテグレー色を使う	color = 'darkslategray'
カウンタを高頻出な方から列挙する	aCounter.most_common()
文字列を空白で区切り、、整数リストに変換する	map(int, s.split())
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
ヒストグラムをパープル色を用いて描画する	plt.hist(データ列, color='purple')
ダークグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
組を逆順にする	aTuple[::-1]
凡例をグラフに被らない場所に表示する	plt.legend(loc='best')
折れ線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
追加モードを用いてファイルをオープンする]	open(filepath, mode='a')
nがn2以下かどうか調べる	n <= n2
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
スタックの最大長を使う	deq.maxlen
インプレイスでデータフレームのn行目を消す	df.drop(n, axis=0, inplace=True)
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
最初のコマンド引数	sys.argv[1]
折れ線グラフをダークグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgreen')
データ列をビン数nを用いてビン分割する	pd.cut(ds, n)
option: ダークオーキッドを使う	color = 'darkorchid'
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
配列を折れ線プロットとして描画する	plt.plot(データ列x, データ列y)
アンサンブル学習でクラス分類をする	sklearn.ensemble.VotingClassifier()
リストを複数横に並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
モカシン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
option: 暗い赤を使う	color = 'darkred'
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
データフレームをインポートする	import pandas as pd
初めてのプログラムを書く	print('Hello World')
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
リストを等間隔でn個に分割する	pd.cut(aList, n)
パープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
今日が土曜日か調べる	datetime.datetime.today().weekday() == 5
option: フォレストグリーン色を使う	color = 'forestgreen'
横方向に二つのデータフレームを一つにする	pd.merge(df, df2)
折れ線グラフの右三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
文字列を最後の部分文字列で分けた場合の後半の文字列	s.rpartition(sub)[-1]
データフレームの列のリスト	df.info()
マッピングをチェーンマップに変換する	collections.ChainMap(aDict)
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
文字列の中の大文字・小文字を無視して正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
文字列をセパレータで区切って、列挙する	s.split(sep)
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
全要素を０で初期化した複素数型の行列を作成する	np.zeros(行数, 列数, dtype=bool)
ブランチドアーモンド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームを列で並べて下位n件を取り出す	df.sort_values(columns).tail(n)
小数点数の天井を求める	math.ceil(x)
空の単回帰モデルを作成する	model = sklearn.linear_model.LinearRegression()
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
モデルを当てはめる	model.fit(説明変数, 目的変数)
折れ線グラフの△マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
ヒストグラムの線のスタイルを一点鎖線に指定する	plt.hist(データ列, linestyle='dashbot')
イテラブルをカウンタに変換する	collections.Counter(iterable)
ファイルを追加用にオープンする]	open(filepath, mode='a')
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
句読点文字を全て使う	string.punctuation
オプションで、標準エラーを使用する	file = sys.stderr
棒グラフをダークグレー色を使って描画する	plt.bar(データ列x, データ列y, color='darkgrey')
折れ線グラフを青い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームのグループ化した散布図に線形回帰を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
シアン色でヒストグラムを描画する	plt.hist(データ列, color='cyan')
多い方からカウンタを列挙する	aCounter.most_common()
線グラフをライトスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
ローングリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lawngreen')
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
option: 色をアイボリーに設定する	color = 'ivory'
カラムが正規分布からどの程度、尖っているか見る	ds.skew()
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
rgbのバツマーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図のダイアモンド印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
イテラブルと配列について散布図を描画して、下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
線グラフの色をオールドレースに変更する	plt.plot(データ列x, データ列y, color='oldlace')
文字列はタイトル大文字小文字か調べる	s.istitle()
データフレームを関数の値毎にグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
文字列はリストに含まれないか確認する	element not in aList
日付データが何日か知る	aDate.day
データフレームのカラムの平均を求める	df[col].mean()
追加できるように既存のファイルをSJISで開く]	open(filepath, mode='a', encoding='shift_jis')
ピアソン相関係数でデータフレームのリストで指定したカラムの相関行列	df[aList].corr(method='pearson')
折れ線グラフをミッドナイトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='midnightblue')
option: フローラルホワイトを使う	color = 'floralwhite'
散布図のダイアモンドマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフのバツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
日付時刻データとタイムスタンプデータの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
日付データが土曜日か判定する	aDate.weekday() == 5
バイナリモードとしてファイルパスをオープンする]	open(filepath, mode='rb')
散布図をチョコレート色として描画する	plt.scatter(データ列x, データ列y, color='chocolate')
値を黒色でプリントする	print(f'\033[30m{value}\033[0m')
縦棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
フォーマットを用いて文字列をdatetime64型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
データフレームのリストカラムの中にいくつNaNが含まれるかカウントする	df[aList].isna().sum()
カウンタを高頻出方から列挙する	aCounter.most_common()
Pandasで、データ列をPandasの日付型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームのn行目以降取り出す	df[n:]
ヒストグラムをミディアムターコイズ色として描画する	plt.hist(データ列, color='mediumturquoise')
文字列中の文字を列挙する	list(s)
データフレームのリストカラムの値が欠損値	df[aList].isna()
ダークターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
データ列の値をまとめてValueMapで変更する	ds.replace(ValueMap)
縦棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
option: グラフの色をプラムに設定する	color = 'plum'
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
データフレームの歪度を計算する	df.kurt()
ふたつの集合は共通の要素を持たないか	aSet.isdisjoint(aSet2)
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
option: スラグレーにグラフの色をする	color = 'slategrey'
行列の最大値	np.max(aArray)
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
行列の行ごとの合計	np.sum(aArray, axis=1)
ヒストグラムの色をオリーブにセットする	plt.hist(データ列, color='olive')
option: カーキにグラフの色を設定する	color = 'khaki'
散布図のマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
散布図を赤いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームを表示するとき表示可能な最大行数をnに減らす	pd.set_option('display.max_rows', n)
option: 色をミディアムターコイズに設定する	color = 'mediumturquoise'
円プロットにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
折れ線グラフを青い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
formatパターンの文字列をタイムスタンプにする	datetime.datetime.strptime(日付の書かれた文字列, format)
散布図を黒い大バツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
青紫色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
小数点数がNaNかどうか判定する	math.isnan(x)
ライトスレイグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
プログラムの実行を正しく止める	sys.exit(0)
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
データフレームを表示するとき、小数点以下の表示精度を変更する	pd.set_option('precision', n)
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
列によってデータフレームを並べ直して、下位n件を取り出す	df.sort_values(columns).tail(n)
折れ線グラフの丸印の大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
複数行対応として正規表現を事前にコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データフレームのカラムを100の位で四捨五入して、整数型にする	df[col].round(-2).astype(int)
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
データフレームの指定された列を抽出する	df[[column]]
ナバホホワイト色を用いてヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
文字列を部分文字列によって区切る	s.split(sub)
データフレームの中の列を等量でビン数nとして分割する	pd.qcut(df[col], n)
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
マップのキーと値を入れ替える	{v: k for k, v in aDict.items()}
データフレームの列が正規表現文字列にマッチする行を選択する	df[df[column].str.match(s)]
nを符号なしでバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
散布図のバツ印の色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
パールバイオレットレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
グラフのタイトルを指定する	plt.title('グラフの名称')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
コマンドの第２引数を知る	sys.argv[1]
セットをタプルに変換する	tuple(aSet)
文字列を最後の部分文字列によって二分する	s.rpartition(sub)
ヒストグラムの色をビスクに指定する	plt.hist(データ列, color='bisque')
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフを深紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
配列とリストの散布図をプロットして、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: ダークオーキッド色を使う	color = 'darkorchid'
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
データ列を二つ並べて箱髭図にする	plt.boxplot([データ列, データ列])
空のタプル	()
option: 行列のデータ型を指定する	dtype = np.uint8
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
重複を認めてn行をランダムにデータフレームからサンプリングする	df.sample(n, replace=True)
データフレームを'A'列と'B'列でソートして更新する	df.sort_values(by=['A', 'B'], inplace=True)
表データを二つの列を用いてによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
データフレームの相関行列スピアマン順位相関係数でを求める	df.corr(method='spearman')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
データフレームのNaNを中央値にセットする	df.fillna(df.median())
二つのオブジェクトは同一参照か調べる	obj is obj2
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
切り上げて整数に変換する	math.ceil(x)
ヒストグラムをピンク色として描画する	plt.hist(データ列, color='pink')
option: ライトサーモン色を使う	color = 'lightsalmon'
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
ブランチドアーモンド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
線グラフの色を淡いピンク色に指定する	plt.plot(データ列x, データ列y, color='lightpink')
option: マーカーを大バツに変更する	marker = 'X'
データ列の変化を色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: バツマーカーを使う	marker = 'x'
集合＼集合	aSet.difference(aSet2)
実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
変数が0に近づく場合、数式の極限値を求める	sympy.limit(e, z, 0)
option: マーカーを下三角に変更する	marker = 'v'
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームを'A'列によって並べて、更新する	df.sort_values(by='A', inplace=True)
書式fmtとしてデータ列を日付データにする	pd.to_datetime(ds, format=fmt)
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
小数点数を切り下げる	math.floor(x)
データフレームのカラムからユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
option: 色をライトスレイグレーに設定する	color = 'lightslategrey'
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
散布図をスプリンググリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='springgreen')
文字列を緑色化する	f'\033[32m{value}\033[0m'
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
小数点数の平方根	math.sqrt(x)
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
回帰分析をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
データフレームのリスト列を1000の位で四捨五入する	df[aList].round(-3)
イテラブルを文字列に変換してタブによって一つにする	'\t'.join(map(str, iterable))
ファイルからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
nが3の倍数	n % 3 == 0
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームのカラムが何分か見る	df[col].dt.minute
変数を太字でプリントする	print(f'\033[1m{value}\033[0m')
横棒プロットを描いて、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
データフレームのリスト列の未入力値をxで埋める	df[aList].fillna(x)
データフレームのカラムの標本標準偏差	df[col].std()
折れ線グラフに赤い▲印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
データフレームの重複を確認する	df.duplicated()
nullに等しい値	None
文字列を最後の部分文字列で二分する	s.rpartition(sub)
折れ線グラフの色をゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='goldenrod')
カラムの欠損値を最大値に変更する	ds.fillna(ds.max())
折れ線グラフの色をライトスレイグレーにする	plt.plot(データ列x, データ列y, color='lightslategray')
ふたつの集合のユニオンを算出する	aSet.union(aSet2)
タプルをn倍する	aTuple * n
日付時刻データが何日か知る	aDatetime.day
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
文字列を最後の部分文字列で分けたときの最初の文字列	s.rpartition(sub)[0]
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
データ列の推移を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをライム色を用いて描画する	plt.barh(データ列x, データ列y, color='lime')
文字列一つのりスト	[element]
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
自然数最小公倍数	math.lcm(n, n2)
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
ピーチパフ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
行列の列	aArray[:, 列番号]
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
タイムスタンプデータををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
入力から2つの整数を読む	A, B = map(int, input().split())
行列のユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
辞書をJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
ファイルパスの拡張子を求める	os.path.splitext(filepath)[1].lstrip('.')
散布図の丸印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
日付時刻データは何時か知る	aDatetime.hour
option: グラフの色をブラックに設定する	color = 'black'
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
文字列中に部分文字列が含まれないか調べる	sub not in s
線グラフの色をティールに変更する	plt.plot(データ列x, データ列y, color='teal')
文字列を最初の部分文字列で二分割する	s.partition(sub)
分数の分母	q.denominator
データフレームをCSVファイルでJSONLファイルに書き込む	df.to_csv(filename)
文字列をコロンで分割して、文字列リストにする	s.split(':')
淡いピンク色色でヒストグラムを描画する	plt.hist(データ列, color='lightpink')
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
option: サーモンを使用する	color = 'salmon'
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
JSON形式のファイル入力を読み込んで、dataとする	data = json.load(fin)
xが一桁の数か	-9 <= x <= 9
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
データ列の各データが何回出現するか見る	ds.value_counts()
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
option: ライトグレーにグラフの色を設定する	color = 'lightgray'
散布図に黒いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
横棒グラフをアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='aquamarine')
双方向キューは空でないか調べる	len(deq) != 0
スチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
棒グラフをバリーウッド色を用いて描画する	plt.bar(データ列x, データ列y, color='burlywood')
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
2を底とする浮動小数点数の対数	math.log2(x)
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
文字列が文字列リストに含まれるかどうか調べる	s in aStringList
データフレームのリストで指定された列の相関行列を求める	df[aList].corr()
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
リストとデータ列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
Pandasでデータ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
シャルトリューズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: ダークグレーを使う	color = 'darkgray'
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
線グラフの色をスチールブルーに指定する	plt.plot(データ列x, データ列y, color='steelblue')
xの小数点以下'4'桁の文字列に変換する	':.4f'.format(x)
xでデータフレームのカラムの欠損値を埋める	df[col].fillna(x)
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームを使う	import pandas as pd
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
option: グラフの色をディムグレーに設定する	color = 'dimgray'
行列の行ごとの合計値	np.sum(aArray, axis=1)
文字列を太文字で出力する	print(f'\033[1m{value}\033[0m')
多次元データをSVDで淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
データフレームの中にある日付データと日付データの数をカウントする	df.isin([value, value2]).sum()
データフレームのカラムの平均値	df[col].mean()
option: namesをカラムの名前に設定する	names = names
ミディアムオーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
変数がマイナス無限大に近づく際の数式の極限値を求める	sympy.limit(e, z, -oo)
xを浮動小数点数に変換する	float(x)
配列間の要素ごとの最大公約数を使う	np.gcd(aArray, aArray2)
文字列は全て数値か調べる	s.isnumeric()
option: グラフの色をグレーに変更する	color = 'grey'
ダークスラテグレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
折れ線グラフの印をポイントにする	plt.plot(データ列x, データ列y, marker='.')
タプル内の要素が全て真か	all(aTuple)
ヒストグラムを小麦色色を用いて描画する	plt.hist(データ列, color='wheat')
option: スカイブルーにフォントの色を設定する	color = 'skyblue'
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
データフレームから指定された三つの列を選択する	df[[column, column2, column3]]
ダークサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
option: EUCを用いる	encoding = 'euc_jp'
ロバストな線形回帰モデルを準備する	model = sklearn.linear_model.HuberRegressor()
スノー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
データフレームを各列毎にグループ化して文字列というグループの個数を求める	df.groupby(column).size()[s]
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
データ列が何時か調べる	ds.dt.hour
線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
グリッドの線種を破線に変更する	plt.grid(linestyle='dashed')
縦棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
トマト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
データフレームのカラムの分散を求める	df[col].var()
時刻を使用する	import datetime
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
ヒストグラムをダークサーモン色を用いて描画する	plt.hist(データ列, color='darksalmon')
横軸の目盛りを非表示にする	plt.xticks([])
行列の最大を求める	np.max(aArray)
データフレームの列の値がxより大きい行を抽出する	df[df[column] > x]
データフレームのリスト列のpercent分位数を計算する	df[aList].quantile(percent/100)
ダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D')
アリスブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
パウダーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='powderblue')
リストの要素を並べ直す	sorted(aList)
空のマップを作る	{}
nがn2の倍数でないかどうか	n % n2 != 0
デックが空	len(deq) == 0
多次元データをt-SNEで濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
データフレームが重複しているか	df.duplicated()
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
ダークカーキ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
データフレームをインデックスで昇順にソートする	df.sort_index(ascending=True)
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
散布図を左三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='<')
行列の行	aArray[行番号]
ヒストグラムの色をナバホホワイトにセットする	plt.hist(データ列, color='navajowhite')
データ列を整数に丸める	ds.round()
現在は何秒か知る	datetime.date.today().second
プロットを画面に設定する	sns.set(context='notebook')
データフレームの末尾n行を取り出す	df.tail(n)
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
データフレームの欠損値を最頻値に減らす	df.fillna(df.mode().iloc[0])
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
リネン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
文字列の中で正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s)
データフレームを二つの列によってを用いて降順に並べる	df.sort_values(by=['A', 'B'], ascending=False)
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
ダークオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
コーンズシルク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
空文字	''
二つのデータフレームを列をキーとして左結合する	pd.merge(df, df2, on=column, how='left')
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
数列とイテラブルについての散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
カラーパレットを全般的に明るくする	sns.set(pallete='bright')
データフレームのリスト列の値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
▼印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
リストとリストの散布図にrgbのダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgray')
ダークオレンジにヒストグラムの色を変更する	plt.hist(データ列, color='darkorange')
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
イテラブルを両端キューに変換する	collections.deque(iterable)
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
n個の数値イテラブル	range(n)
ファイルをバイナリモードを用いて開く]	open(filepath, mode='rb')
折れ線グラフに▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
rgbの三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
日付データにn分分、加える	aDate + datetime.timedelta(minutes=n)
nがn2よりも小さい	n < n2
度数分布図を二つ並べてプロットする	plt.hist([データ列, データ列], color=['b', 'r'])
カウンタから最頻出な要素の件数	aCounter.most_common()[1]
インディゴ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
データフレームから破壊的に重複したデータをドロップする	df.drop_duplicates(inplace=True)
文字列が部分文字列で終わるか調べる	s.endswith(sub)
option: ディープスカイブルー色を使用する	color = 'deepskyblue'
折れ線グラフをダークマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームのリストカラムを四捨五入して、整数型にする	df[aList].round().astype(int)
ヒストグラムの色をモカシンにセットする	plt.hist(データ列, color='moccasin')
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
縦棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
紺碧にヒストグラムの色を指定する	plt.hist(データ列, color='azure')
データフレームから列を3つ選択する	df[[column, column2, column3]]
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
黒い▼マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
カウンタをイテラブルをカウントして更新する	aCounter.update(iterable)
グラフに鉛直方向の実線をつける	plt.axvline(x=0, linestyle='solid')
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
文字列が全てアスキー文字	s.isascii()
n個に等間隔でリストをビン分割する	pd.cut(aList, n)
配列とリストの散布図を描画し、、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
文字列に列を変換して、カンマによって一つにする	','.join(map(str, iterable))
赤い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
行列の全要素の値を変更する	aArray[:, :] = 指定の値
文字列中に部分文字列がいくつか存在するか調べる	s.count(sub)
ロイヤルブルー色でヒストグラムを描画する	plt.hist(データ列, color='royalblue')
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
全要素を0で初期化した行列	np.zeros(要素数)
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
浮動小数点数の二乗を求める	x ** 2
オブジェクトがバイト列型かどうか	isinstance(obj, bytes)
データフレームのカラムの欠損値を平均値に指定する	df[col].fillna(df[col].mean())
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
ハニーデュー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
折り返しを無効にセットする	pd.set_option('expand_frame_repr', False)
折れ線グラフの色をダークシアンに指定する	plt.plot(データ列x, データ列y, color='darkcyan')
nからn2までのスライス	slice(n, n2)
縦棒グラフをミントクリーム色として描画する	plt.bar(データ列x, データ列y, color='mintcream')
文字列内に空白がある	any(c.isspace() for c in s)
横棒グラフをプラム色として描画する	plt.barh(データ列x, データ列y, color='plum')
折れ線グラフに赤い▼印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
両端キューをポップする	deq.pop()
データフレームのリストカラムの中に文字列と日付データがいくつあるか数える	df[aList].isin([value, value2]).sum()
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
ミスティローズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
横棒グラフをペールグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='palegreen')
データフレームのリストカラムの未入力値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
縦棒グラフをプロットして棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフの▼マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
クラス分類のF値を計算する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
カラムの欠損値をxに増やす	ds.fillna(x)
文字列の変数名を数式にする	sympy.Symbol(s)
ローングリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
option: 印の大きさを指定する	markersize = 2.0
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
３つの実行結果を順にプリントする	print(value, value2, value3)
縦棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
データフレームを表示するとき、小数点以下の表示精度をn桁に減らす	pd.set_option('precision', n)
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
ファイル全体をリストとして読み込む	f.readlines()
列をリストにする	df[column].values.tolist()
グローバル変数の一覧を見る	globals()
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
折れ線グラフの下三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
黒い丸マーカーを数列と数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームのカラムの中にある日付データの合計を数える	df[col].isin([value]).sum()
n2行n列の二次元リストを得る	[[0] * n for _ in range(n2)]
2つの変数をそれぞれ定義する	x, y = i, j
データフレームを列によって並べ直して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
option: 色をスレートブルーに変更する	color = 'slateblue'
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
値を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
実数の二乗	x ** 2
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
サポートベクトル分類器を新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
日本語をプロット中で表示できるようにする	sns.set(font='IPAexGothic')
要素がマップの値に含まれていないかどうか調べる	element not in aDict.values()
ヒストグラムの色をダークゴールデンロッドにする	plt.hist(データ列, color='darkgoldenrod')
列の第三四分位数	ds.quantile(0.75)
マップを浅く複製する	aDict.copy()
カウンタの項目を、その回数だけ列挙する	aCounter.elements()
データ列の第三四分位数	ds.quantile(0.75)
変数をマゼンタで出力する	print(f'\033[35m{value}\033[0m')
横棒グラフをダークマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
tanの逆数	math.atan(x)
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
ヒストグラムをアクアマリン色を使って描画する	plt.hist(データ列, color='aquamarine')
双方向キューをクリアする	deq.clear()
option: 改行の代わりに文字列を用いる	end = s
組の中の最大値	max(aTuple)
データフレームを千の位で四捨五入して、整数型にする	df.round(-3).astype(int)
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
リストを縦軸、配列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
紺碧にヒストグラムの色を設定する	plt.hist(データ列, color='azure')
option: ダークグリーン色を用いる	color = 'darkgreen'
データ列の一意な要素	ds.unique()
文字列中の部分文字列の出現	s.count(sub)
ユニークな要素ごとの出現回数	np.unique(aArray, return_counts=True)
黄緑色で線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
文字列を全て小文字にする	s.casefold()
データフレームの列と列に重複があれば、消す	df.drop_duplicates(subset=column)
nがn2で割り切れないか調べる	n % n2 != 0
配列とリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
option: ロイヤルブルー色を用いる	color = 'royalblue'
リストとリストの散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
オブジェクトのバイト長	sys.getsizeof(obj)
option: ライムグリーンに色をセットする	color = 'limegreen'
option: ライムグリーンを使用する	color = 'limegreen'
表データから重複するデータを残さず消す	df.drop_duplicates(keep=False)
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
要素がマップの値に含まれていないか確認する	element not in aDict.values()
タプル中の最初の文字列を探す	aTuple.index(element)
NaN	math.nan
組をカンマ区切りで表示する	print(*aTuple, sep=',')
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
データフレームを百の位で四捨五入して、整数型にする	df.round(-2).astype(int)
predicateFuncが真となる列の要素を得る	itertools.takewhile(predicateFunc, iterable)
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
シアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
散布図の丸印を青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
option: フォントの色を青に設定する	color = 'blue'
データフレームを各列毎にグループ分けして、列の個数を求める	df.groupby(column)[column2].count()
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
option: フォントの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
ヒストグラムの色をゲインズボロに変更する	plt.hist(データ列, color='gainsboro')
散布図の印を右三角にする	plt.scatter(データ列x, データ列y, marker='>')
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
分子n、分母mの有理数を用意する	fractions.Fraction(numerator=n, denominator=m)
真上位集合か確認する	aSet > aSet2
実数が整数か調べる	x.is_integer()
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
option: 文字列の示すエンコーディングを使う	encoding = s
ヒストグラムを点線でプロットする	plt.hist(データ列, linestyle='dotted')
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
パウダーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='powderblue')
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムを破線にする	plt.hist(データ列, linestyle='dashed')
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
文字列を複数行対応としてパターンで区切る	re.split(pattern, s, flags=re.MULTILINE)
カラーバーを横向きに描画する	plt.colorbar(orientation='horizontal')
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
散布図の菱形マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
グラフをスライド用に設定する	sns.set(context='talk')
二つのデータフレームをジョインする	pd.merge(df, df2)
日付データからn時間分減算する	aDate - datetime.timedelta(hours=n)
option: ライトグリーン色を使う	color = 'lightseagreen'
赤い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
等量で配列をビン数nでビン分割する	pd.qcut(aArray, n)
既存のベクトルを元に全要素が1の配列	np.ones_like(aArray)
カデットブルー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
インディアンレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
nがn2より大きいかどうか	n > n2
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
等しい量になるようにビン数nで列を分割する	pd.qcut(ds, n)
数を整数に変換する	int(x)
カラムを小数点以下n桁で四捨五入する	ds.round(n)
データフレームのリストカラムを丸めて整数にする	df[aList].round().astype(int)
新しいガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
カウンタのキーを増やす	aCounter[element] += 1
1行分標準入力から改行なしで読み込む	sys.stdin.readline().rstrip()
ファイルを文字列の示すエンコーディングで開く]	open(filepath, encoding=s)
ロバスト推定を使って回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
散布図の印を下三角印にする	plt.scatter(データ列x, データ列y, marker='v')
実数のアークサイン	math.asin(x)
三整数のLCMを計算する	math.lcm(n, n2, n3)
棒グラフをライムグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='limegreen')
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
配列とリストについて散布図をプロットして、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
二つのリストからマップを作成する	dict(zip(aList, aList2))
実数を整数に変換する	int(x)
データフレームを列によって並べ直し、上位n件を取り出す	df.sort_values(columns).head(n)
データフレームのリストカラムの中にいくつ欠損値があるか求める	df[aList].isna().sum()
実数が非数か確認する	math.isnan(x)
文字列の開始位置以降に部分文字列が含まれないか判定する	s.find(sub, start) == -1
代数計算ライブラリを使う	import sympy
勾配ブースティングで回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
リストのn番目以降の要素を取り出す	aList[n:]
日付データが水曜日かどうか確認する	aDate.weekday() == 2
ヒストグラムをダークスラテグレー色として描画する	plt.hist(データ列, color='darkslategray')
キーで指定された項目をタプルからポップする	aDict.pop(key)
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
部分文字列を文字列中から探す	s.find(sub)
折れ線グラフをペールグリーン色として描画する	plt.plot(データ列x, データ列y, color='palegreen')
タイムスタンプデータが何秒か知る	aDatetime.second
黒いダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
イテラブルをカウントしてカウンタから引く	aCounter.subtract(iterable)
ライトスレイグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightslategrey')
折れ線グラフの下三角印を黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
オブジェクトはバイト列クラス	isinstance(obj, bytes)
値を白色化する	f'\033[37m{value}\033[0m'
データフレームを'A'列によって昇順に破壊的に並べる	df.sort_values(by='A', ascending=True, inplace=True)
線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
データフレームのリスト列の文字列をNaNに変換する	df[aList].replace(s, np.nan)
折れ線グラフの色をパールバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='palevioletred')
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
文字列内にひとつでも大文字があるか	any(c.isupper() for c in s)
文字列を区切りで区切り、、列挙する	s.split(sep)
ライトシアン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
辞書にマッピングの項目を更新する	aDict.update(aDict2)
カウンタの要素を列挙する	aCounter.keys()
文字列を文字リストに変換する	list(s)
数値を太字でプリントする	print(f'\033[1m{value}\033[0m')
日付データにn週間分加算する	aDate + datetime.timedelta(weeks=n)
原点から(実数,y)の距離を求める	math.hypot(x, y)
実数を実数で割って切り捨てる	x // y
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
ヒストグラムの色をパールゴールデンロッドに指定する	plt.hist(データ列, color='palegoldenrod')
折れ線グラフの色をスノーにセットする	plt.plot(データ列x, データ列y, color='snow')
等差数列をベクトルに変換する	np.arange(開始値, 終了値, 等差)
データフレームの数値をまとめて丸める	df.round()
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
外れ値に強い線形分類器を新規作成する	model = sklearn.linear_model.HuberClassifier()
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
nが2で割り切れないか調べる	n % 2 == 1
双方向キューの要素を逆に並べ直す	deq.reverse()
カラムの第三四分位数	ds.quantile(0.75)
option: フォントの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
単回帰モデルを学習する	model.fit(説明変数, 目的変数)
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
グレー色でヒストグラムを描画する	plt.hist(データ列, color='gray')
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
プロットのカラーパレットを暗くする	sns.set(pallete='dark')
データフレームの列を千の位で丸めて、整数型にする	df[col].round(-3).astype(int)
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
カデットブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
SJISでタブ区切りのファイルを読む	pd.read_csv(filename, encoding='shift_jis')
行列の列ごとの分散	np.var(aArray, axis=0)
数式のインテグラルを計算する	sympy.integrate(e)
黒いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
10を底とする実数の対数を算出する	math.log10(x)
option: フォントの色をスプリンググリーンに設定する	color = 'springgreen'
実数の余弦の逆数	math.acos(x)
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
オブジェクトがリストに含まれる	element in aList
色付きの破線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: インディアンレッド色を使う	color = 'indianred'
実数の指数を求める	math.frexp(x)[1]
トマト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
文字列の接尾辞から部分文字列を除く	s.removesuffix(sub)
データ列のNaNを直前の値で埋める	ds.fillna(method='ffill')
文字列の示すエンコーディングでファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub)
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
３変数の最大値	max(x, y, z)
黄色いグリッド線を引く	plt.grid(color='y')
データフレームから重複する行を残さず、落とす	df.drop_duplicates(keep=False)
データフレームのカラムの曜日が何日目か確認する	df[col].dt.dayofweek
文字列の終了位置より前に部分文字列があるか調べる	s.find(sub, 0, end) != -1
データフレームのリスト列の中に存在する日付データと文字列の個数を数える	df[aList].isin([value, value2]).sum()
データ列の中にある文字列と日付データの数を数える	ds.isin([value, value2]).sum()
option: ライトイエロー色を使用する	color = 'lightyellow'
ダークオーキッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
折れ線グラフの線の種類を一点鎖線にセットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームを関数によってグループ化し、記述統計量を求める	df.groupby(関数).describe()
データ列の欠損値をxに設定する	ds.fillna(x)
option: インディアンレッド色を用いる	color = 'indianred'
散布図に下三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='v')
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
option: グラフの色をダークオリーブグリーンに指定する	color = 'darkolivegreen'
キューから最初の要素を削除する	deq.remove(element)
折れ線グラフの▼マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
青い破線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
昇順に列によってデータフレームを並べ直す	df.sort_values(by=column, ascending=True)
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
折れ線グラフの下三角印の大きさを設定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
オブジェクトの属性を削除する	delattr(obj, プロパティ名)
ミスティローズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
グリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
文字列はキーワード	keyword.iskeyword(s)
option: 欠損値を含める	dropna = True
データフレームのリストカラムの分散を求める	df[aList].var()
ASCII限定として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
折れ線グラフの印を菱形にする	plt.plot(データ列x, データ列y, marker='D')
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
option: グラフの色をダークスレートブルーに変更する	color = 'darkslateblue'
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
'A'列の値によってデータフレームをグループ化し、記述統計量を算出する	df.groupby('A').describe()
ヒストグラムの色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
日付データと日付データの時間差を秒で計算する	(aDate - aDate2).total_seconds()
昇順に破壊的に'A'列によってデータフレームをソートする	df.sort_values(by='A', ascending=True, inplace=True)
赤い左三角マーカーをリストと数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
option: フォントの色をライトコーラルにセットする	color = 'lightcoral'
横棒グラフをロージーブラウン色を使って描画する	plt.barh(データ列x, データ列y, color='rosybrown')
ヒストグラムの色をロージーブラウンに指定する	plt.hist(データ列, color='rosybrown')
新しい文字列に文字列中の部分文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
ロバストな重クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
グラフのy軸を対数に変更する	plt.yscale('log')
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
ダーク・スラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
プロット中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
サポートベクターマシンとしてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図の三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データ列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
データフレームのn行より後ろ抽出する	df[n:]
option: ケースを無視する	flag = re.IGNORECASE
変数名をキーとして、辞書	dict(name=element)
ヒストグラムをラベンダーブラッシュ色を用いて描画する	plt.hist(データ列, color='lavenderblush')
option: オレンジを使用する	color = 'orange'
変数について数式をn階微分する	sympy.diff(e, z, n)
x座標にラベルを付ける	plt.xlabel('x軸ラベル')
リストとリストについて散布図を描いてマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
実数に実数を掛ける	x * y
黒い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
文字列内にひとつでも英数字が含まれるかどうか調べる	any(c.isalnum() for c in s)
ライトスカイブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
アルファベットの大文字を使う	string.ascii_uppercase
option: ラベンダーを用いる	color = 'lavender'
データフレームを表示するとき小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
真	True
実数を複素数に変換する	complex(x)
色付きの一点鎖線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
カウンタの正の数のみ残す	+aCounter
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
折れ線グラフの色をダークカーキに指定する	plt.plot(データ列x, データ列y, color='darkkhaki')
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
データ列の折れ線グラフを描いて、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
データフレームのカラムの曜日の名前を使う	df[col].dt.weekday_name
nの8進文字列を使う	oct(n)[2:]
赤い破線を使って数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
縦棒グラフをミディアムスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データフレームのカラムをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
ピンクにヒストグラムの色を指定する	plt.hist(データ列, color='pink')
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
単回帰モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
xを浮動小数点数に変換する	float(x)
データフレームの列の平均	df[col].mean()
散布図を赤いダイアモンドマーカーで描く	plt.plot(データ列x, データ列y, marker='D', c='r')
ふたつのリストの共通りスト	list(set(aList) & set(aList2))
行列の列ごとの平均値	np.mean(aArray, axis=0)
ダークカーキ色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
集合の要素数	len(aSet)
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
データフレームのカラムの中に文字列と文字列がいくつ存在するか数える	df[col].isin([value, value2]).sum()
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
平均と標準偏差から乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームを100の位で丸めて整数にする	df.round(-2).astype(int)
サイコロを振る	random.randint(1, 6)
日付データをISO書式の文字列にする	aDate.isoformat()
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
折れ線グラフの大バツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
最大値でデータフレームのリスト列のNaNを置き換える	df[aList].fillna(df[aList].max())
線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
option: 区切りをコロンにする	sep = ':'
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
データフレームのカラムが何時か見る	df[col].dt.hour
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
変数について数式の積分を行う	sympy.integrate(e, z)
データ列をビン数nでビン分割する	pd.cut(ds, n)
線を青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: ホットピンクを使用する	color = 'hotpink'
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
イエローグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームの中に日付データと文字列がいくつ存在するか求める	df.isin([value, value2]).sum()
year年month月day日hour時をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day, hour=hour)
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
ふたつの関係が上位集合	aSet.issuperset(aSet2)
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
折れ線グラフのポイントマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
ヒストグラムの色をオレンジレッドに指定する	plt.hist(データ列, color='orangered')
棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
折れ線グラフの左三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
スタッキングでクラス分類をする	sklearn.ensemble.StackingClassifier()
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
商と余りを同時に計算する	divmod(x, y)
リストとリストについて散布図を描画し、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムの色をアンティークホワイトに指定する	plt.hist(データ列, color='antiquewhite')
プログラムの実行を強制的に終了する	sys.exit()
イテラブルのコンビネーション	itertools.combinations(iterable, n)
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
ヒストグラムの色をゴールデンロッドに変更する	plt.hist(データ列, color='goldenrod')
文字列を全て小文字に変換する	s.lower()
線グラフをサンディーブラウン色を使って描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの75パーセンタイル	df.quantile(0.75)
2つの数値をスラッシュで区切って出力する	print(value, value2, sep='/')
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
グラフの補助目盛を有効にする	plt.minorticks_on()
折れ線グラフの丸印の大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
棒グラフをミディアムスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
青紫色として散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
耐火レンガ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
データフレームの列の空文字をドロップする	df[col].replace('', np.nan).dropna()
シスル色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームを列の値ごとにグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
ミディアムシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームの中の欠損値の合計を数える	df.isna().sum()
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
エンディアンを知る	sys.byteorder
option: ゴーストホワイトにフォントの色を設定する	color = 'ghostwhite'
線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
ファイル全体をリストに変換する	[s.strip() for s in f.readlines()]
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
折れ線グラフの左三角印を赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
分割数nでデータフレームの中の列をビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
集合の全ての要素が別の集合に含まれるか確認する	aSet.issubset(aSet2)
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
ヒストグラムをダークグリーン色を用いて描画する	plt.hist(データ列, color='darkgreen')
データフレームの歪度を求める	df.kurt()
小麦色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
リストをビン数nでビニングしてnamesのラベルをつける	pd.cut(aList, n, labels=names)
ヒストグラムをミディアムオーキッド色を用いて描画する	plt.hist(データ列, color='mediumorchid')
ヒストグラムの色をシルバーに指定する	plt.hist(データ列, color='silver')
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
リストとリストについての散布図にrgbのダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
赤色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
辞書順で文字列は文字列より後	s > s2
現在の再帰の最大回数を調べる	sys.getrecursionlimit()
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
リストから文字列を捨てる	aList.remove(element)
組をソートする	sorted(aTuple)
データフレームのそれぞれのグループごとの分散を求める	df.groupby(column).var()
タプル内の要素が少なくともひとつ真かどうか判定する	any(aTuple)
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
データフレームの各グループの標準偏差	df.groupby(column).std()
データフレームを'A'列の値によってグループ化する	df.groupby('A')
option: ミディアムスプリンググリーン色を使用する	color = 'mediumspringgreen'
乱数シードをnで初期化する	random.seed(n)
データ列が正規分布からどれだけ、歪んでいるか見る	ds.kurt()
option: グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
横棒グラフをアリスブルー色として描画する	plt.barh(データ列x, データ列y, color='aliceblue')
option: グラフの色をシアンにする	color = 'cyan'
横棒プロットの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
ドジャーブルー色でヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
ダークバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
option: 色をサンディーブラウンに設定する	color = 'sandybrown'
散布図を描画する	plt.scatter(データ列x, データ列y)
インデックスによって降順でデータフレーム全体を並べ直す	df.sort_index(ascending=False)
option: フォントの色をライトゴールドロディイエローにする	color = 'lightgoldenrodyellow'
文字列がタイトル大文字小文字かどうか調べる	s.istitle()
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
円グラフの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
リストが空でないか調べる	len(aList) != 0
線グラフをミディアムバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
配列の要素ごとの積	np.multiply(aArray, aArray2)
タン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
青い点線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
データフレームの列の文字列が文字列で始まるデータを抽出する	df[df[column].str.startswith(s)]
赤い大バツマーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
２次元リストの転置行列	[list(x) for x in list(zip(*aList))]
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
データフレームのリスト列の正規分布に対する左右対称性	df[aList].kurt()
ダークシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
ヒストグラムをホワイト色で描画する	plt.hist(データ列, color='white')
option: グラフの色をダークバイオレットに指定する	color = 'darkviolet'
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
文字列中の大文字を小文字に変換する	s.lower()
option: バイナリ書き込みモードを用いる	mode = 'wb'
オプションで、出力先を標準出力に設定する	file = sys.stdout
折れ線グラフを半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
option: 色をスレートブルーに指定する	color = 'slateblue'
グラフの描画で色差別なく色を使う	sns.set(pallete='colorblind')
ファイルパスが存在しないかどうか調べる	not os.path.exists(filepath)
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
組をn回、連結する	aTuple * n
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
option: ダイアモンド印を使う	marker = 'D'
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
乱数で要素を埋めた行列を初期化する	np.random.random(N)
縦棒グラフをライトシアン色として描画する	plt.bar(データ列x, データ列y, color='lightcyan')
nとn2の商を求める	n / n2
線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
nが-9以上、9以下かどうか調べる	-9 <= n <= 9
データフレームを列名リストによって降順に破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
rgbの四角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
表データのカラムの名前を付け直す	df.rename(columns={column: name})
option: コーラル色を使う	color = 'coral'
数列と配列の散布図を描き、、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
散布図の色をやわらかい青にする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
線グラフの色をプラムにする	plt.plot(データ列x, データ列y, color='plum')
平均値でデータ列の欠損値を埋める	ds.fillna(ds.mean())
両端キューの最大長を使う	deq.maxlen
ダークバイオレット色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
数式の積分を行う	sympy.integrate(e)
棒グラフをタン色として描画する	plt.bar(データ列x, データ列y, color='tan')
最初の要素を両端キューから取り除く	deq.remove(element)
データフレームの指定された三列のみ抽出する	df[[column, column2, column3]]
日付データの曜日を使う	aDate.weekday()
棒グラフをライトサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
ビスク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
nからn2を減算する	n - n2
最大値を用いて正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
option: 改行コードを動作環境依存に設定する	newline = None
ヒストグラムをライトスカイブルー色を用いて描画する	plt.hist(データ列, color='lightskyblue')
配列の内積	np.dot(aArray, aArray2)
表データのデータ型リスト	df.dtypes
option: △印を用いる	marker = '^'
スピアマンの相関係数を算出する	scipy.stats.spearmanr(データ列, データ列2)
データをL1ノルムで正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
赤い実線としてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
文字列内にひとつでも英数字があるか調べる	any(c.isalnum() for c in s)
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
option: レモンシフォンにグラフの色を設定する	color = 'lemonchiffon'
二つの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
option: 三角マーカーを使用する	marker = '^'
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
リッジ回帰分析を行う	model = sklearn.linear_model.Ridge(alpha=正則化項)
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
データフレームを表示するとき小数点以下の表示精度を変更する	pd.set_option('precision', n)
データフレームを'A'列によって昇順にソートし、、更新する	df.sort_values(by='A', ascending=True, inplace=True)
option: フォントの色をピーチパフに指定する	color = 'peachpuff'
リストにリストを追加して拡張する	aList.extend(aList2)
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
複数行対応としてパターンに文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
イエローグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
ファイル名がJSONファイルか調べる	filename.endswith('.json')
日付データが金曜日か調べる	aDate.weekday() == 4
文字列はタプルの要素か判定する	element in aTuple
ヒストグラムの色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
最適な位置に凡例を表示する	plt.legend(loc='best')
散布図の上三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
折れ線グラフにポイント印を使う	plt.plot(データ列x, データ列y, marker='.')
文字列の右側から改行を除く	s.rstrip('\n')
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
データフレームの未入力値を最小値に増やす	df.fillna(df.min())
オプションで標準エラーに出力する	file = sys.stderr
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
文字列にシーケンスを変換して、カンマで結合する	','.join(map(str, iterable))
実数を小数点で丸める	round(x, n)
赤い右三角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
変数を青色で表示する	print(f'\033[34m{value}\033[0m')
タプルを階層化する	collections.ChainMap(aDict)
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
option: グラフの色をトマトに設定する	color = 'tomato'
文字列の開始位置以降に部分文字列が含まれるかどうか	s.find(sub, start) != -1
セットから要素を取り除く	aSet.remove(element)
データフレームからカテゴリデータを抽出する	df.select_dtypes('object')
縦棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
option: エンコーディングをBOM付きにセットする	encoding = 'utf_8_sig'
縦棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
マッピングをJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
説明変数と目的変数として分類モデルを学習する	model.fit(説明変数, 目的変数)
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
ガンマ関数の値を算出する	math.gamma(x)
イテラブルを更新不能な集合に変換する	frozenset(iterable)
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
文字列が大文字か確認する	s.isupper()
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
既存の行列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
1からnまでの整数列	list(range(1, n+1))
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
グラフで用いる縦軸に軸ラベルをつける	plt.ylabel('y軸ラベル')
ゴーストホワイト色として線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
データフレームのリストカラムの中に文字列と文字列がいくつ含まれるかカウントする	df[aList].isin([value, value2]).sum()
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色を耐火レンガに指定する	plt.plot(データ列x, データ列y, color='firebrick')
両端キューの先頭に要素を入れる	deq.appendleft(element)
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
カラムの正規分布に対する左右対称性	ds.kurt()
ベクトルのデータ型を求める	aArray.dtype()
option: 真紅にフォントの色を設定する	color = 'crimson'
変数がマイナス無限大に近づく場合の数値の極限値を求める	sympy.limit(e, z, -oo)
集合の濃度を求める	len(aSet)
整数のGCDを求める	math.gcd(n, n2)
rgbの四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
値は集合に含まれるか調べる	element in aSet
option: デピンク色を使用する	color = 'deeppink'
ヒストグラムを3つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームのカラムの標準偏差を求める	df[col].std()
データフレームの列を小数点以下n桁で丸める	df[col].round(n)
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
列のユニークな値の個数を確認する	ds.nunique()
ヒストグラムを深紅色で描画する	plt.hist(データ列, color='crimson')
組の合計	sum(aTuple)
ロバスト分類器を新規作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
凡例を最適な位置に表示する	plt.legend(loc='best')
パープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
文字列が全て小文字か調べる	s.islower()
データ列の中に日付データと文字列がある	ds.isin([value, value2])
散布図をライトブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightblue')
nがn2で割り切れないか	n % n2 != 0
データフレームの各次元の大きさを確認する	df.shape
Pandasで文字列をタイムスタンプ型にする	pd.to_datetime(s)
折れ線グラフの▽マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
折れ線グラフにバツ印を使用する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをミディアムスレートブルー色を使って描画する	plt.hist(データ列, color='mediumslateblue')
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='grey')
文字列がリストに含まれないか調べる	element not in aList
ファイルをBOM付きとして開く]	open(filepath, encoding='utf_8_sig')
データフレームの中に文字列があるか調べる	df.isin([value])
横棒グラフをスチールブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='steelblue')
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightseagreen')
書式を引数としてargsをフォーマットする	formatText.format(*args)
バイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
nの無限なイテラブル	itertools.repeat(n)
Pandasで、データ列を日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
実数のハイパボリック・サインの逆数を求める	math.asinh(x)
パパイヤウィップ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
nとn2の積を求める	n * n2
二つの文字列を出力する	print(value, value2)
カウンタの値を列挙する	aCounter.keys()
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
方程式として数値のパラメータの解を求める	sympy.solve(e, z)
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
マッピングの項目名を列挙する	aDict.keys()
リストとデータ列についての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
文字列を走査し、正規表現にASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
ファイルのファイル名	os.path.basename(filepath)
数値を青色でプリントする	print(f'\033[34m{value}\033[0m')
棒グラフをホワイトスモーク色を用いて描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
折れ線グラフを色付きの実線を使って描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
パラメータについて数式の微分を求める	sympy.diff(e, z)
折れ線グラフに赤い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
ヒストグラムの色をデピンクに指定する	plt.hist(データ列, color='deeppink')
文字列の末尾は部分文字列か	s.endswith(sub)
ヒストグラムを３つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームから最初のカラムを除く	df[df.columns[1:]]
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
オブジェクトの属性の値を値に設定する	setattr(obj, プロパティ名, 値)
散布図のポイントマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
回帰分析をK最近傍法でする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
データフレームの重複した行を数える	df.duplicated().sum()
部分文字列か確認する	sub in s
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
リストをnからナンバリングする	enumerate(aList, start=n)
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
CSVファイルファイル名が	filename.endswith('.csv')
整数nが配列のどれかか調べる	n in aArray
双方向キューをタプルに変換する	tuple(deq)
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
無限にカウントアップする	itertools.count()
プロットのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
赤い菱形マーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームのリストで指定された列のヒートマップを描画する	sns.heatmap(df[aList].corr())
option: ダークオレンジを使用する	color = 'darkorange'
データ列が何分か調べる	ds.dt.minute
文字列がパターンにマッチさせる	re.match(pattern, s)
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
option: ダークマゼンタを用いる	color = 'darkmagenta'
スカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='skyblue')
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
配列をn個にビン分割する	pd.cut(aArray, n)
値を青色で表示する	print(f'\033[34m{value}\033[0m')
データフレームから重複したデータをドロップして、インプレイスする	df.drop_duplicates(inplace=True)
モデルのR2を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
ヒストグラムをミディアムパープル色を用いて描画する	plt.hist(データ列, color='mediumpurple')
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: ライトスレイグレーを用いる	color = 'lightslategrey'
変数が無限大に近づくとき、数値の極限値を計算する	sympy.limit(e, z, oo)
option: パープルにグラフの色を設定する	color = 'purple'
辞書を階層化マップに変換する	collections.ChainMap(aDict)
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
何回まで再帰ができるかを	sys.getrecursionlimit()
データフレームの先頭	df.head()
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
データフレームを各列毎にグループ化して文字列というグループを使う	df.groupby(column).get_group(s)
直前の値でデータフレームの欠損値を埋める	df.fillna(method='ffill')
aListn番目から値を捨てる	aList.pop(n)
データフレームの各列間の相関係数を求める	df.corr()
option: バッファリングを無効にする	buffering = 0
折れ線グラフの四角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
グラフで用いるy軸に名称をつける	plt.ylabel('y軸ラベル')
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
xを文字列にする	str(x)
文字列を改行を用いて分割する	s.splitlines()
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
リストと配列についての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフの色をオレンジレッドに変更する	plt.plot(データ列x, データ列y, color='orangered')
整数nのバイト長を見る	(n.bit_length() + 7) // 8
▲マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
マッピングをJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
実数のハイパボリック・タンジェント	math.tanh(x)
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームを列の値によってグループ化し、要約統計量を算出する	df.groupby(column).describe()
サポートベクターマシンを使って回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
散布図の上三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
データフレームを列によって集約する	df.groupby(column)
データ列の文字列長を列として使う	ds.str.len()
ヒストグラムをミッドナイトブルー色を用いて描画する	plt.hist(データ列, color='midnightblue')
データフレームの指定された列を配列にする	df[column].values
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
データフレームの複数の列を並べてボックスチャートで可視化する	plt.boxplot([df['カラム'], df['カラム']])
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
ファイルをオープンして]書き込みストリームを使う	open(filepath, mode='w')
x,yの複素数	complex(x, y)
option: データ型として複素数型を用いる	dtype = bool
横棒グラフをホワイトスモーク色として描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
データフレームをに箱ひげ図でグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
イテラブルをワンホット・ベクトルに変換する	pd.get_dummies(iterable)
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
変数について数式の積分を計算する	sympy.integrate(e, z)
グラフを使う準備をする	import matplotlib.pyplot as plt
組をn回、結合する	aTuple * n
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
配列をn個にビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
2進文字列を整数にする	int(s, 2)
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
ヒストグラムの色をアリスブルーに指定する	plt.hist(データ列, color='aliceblue')
横棒グラフを黄緑色を用いて描画する	plt.barh(データ列x, データ列y, color='chartreuse')
折れ線グラフをレモンシフォン色を使って描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
ファイルからファイル名を使う	os.path.basename(filepath)
バリーウッドにヒストグラムの色を変更する	plt.hist(データ列, color='burlywood')
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
リストをカンマ区切りで出力する	print(*aList, sep=',')
最後の部分文字列で文字列を二分割する	s.rpartition(sub)
n個にリストを分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームの列を折れ線グラフで図示する	plt.plot(df[column], df[column])
ダークスラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
配列をy軸、リストをx軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
小数点数の指数部	math.frexp(x)[1]
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
下位集合か調べる	aSet.issubset(aSet2)
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
縦棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
ヒストグラムの色をカーキに変更する	plt.hist(データ列, color='khaki')
赤い線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
マップの値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
データフレームを各列と列の組み合わせ毎に集計して、分散を計算する	df.groupby([column, column2], as_index=False).var()
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
文字列の開始位置からと終了位置までの範囲に部分文字列が含まれないか	s.find(sub, start, end) == -1
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
数式の数値を求める	float(e)
円グラフとしてデータ列の比率を可視化する	plt.pie(データ列, startangle=90)
オブジェクトが名前付きタプルかどうか判定する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
nがセットのどれか	n in aSet
第二コマンド引数を調べる	sys.argv[1]
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
イテラブルと配列について散布図を描画してマーカーを左三角に指定する	plt.plot(データ列x, データ列y, marker='<')
'A'列でデータフレームをソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
xが1、もしくは2もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
option: パウダーブルーを使う	color = 'powderblue'
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
分数をインポートする	import fractions
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='gray')
データフレームの列のどの値が頻出か見る	df[col].mode()
文字列の右端から部分文字列を取り除く	s.rstrip(sub)
両端キューのn番目に値を挿入する	deq.insert(n, element)
option: ヘッダをnamesに設定する	header = names
疑似乱数を生成する	random.random()
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
データフレームからカテゴリデータの列名一覧	df.select_dtypes('object').columns
横方向に三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
算術計算ライブラリを使う	import math
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
各列毎にデータフレームをグループ化して列の個数を求める	df.groupby(column)[column2].count()
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
ファイルパスをバイナリ書き込みモードで開いて]fとする	f = open(filepath, mode='wb')
散布図を用いてデータフレームのカラムを可視化する	sns.scatterplot(data=df, x='列名', y='列名')
黒いダイアモンドマーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
option: スプリンググリーン色を用いる	color = 'springgreen'
辞書をカウンタに変換する	collections.Counter(aDict)
ふたつの集合の積集合	aSet.intersection(aSet2)
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
散布図のポイントマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
整数nはタプルのひとつか判定する	n in aTuple
縦棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
データフレームの各列間の相関係数を計算する	df.corr()
折れ線グラフの大バツ印を赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
イテラブルの散布図を描画する	plt.scatter(データ列x, データ列y)
Pandasで、フォーマットとしてデータ列をdatetime64型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
散布図の右三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
散布図の左三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データ列の尖度	ds.skew()
数列とイテラブルについて散布図を描画してマーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
プロットをポスター用に変更する	sns.set(context='poster')
散布図に黒いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgrey')
option: 区切りを改行にする	sep = '\n'
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
option: ライトグリーンを使用する	color = 'lightseagreen'
nからn2までの整数列	list(range(n, n2+1))
数列とリストについて散布図を描いて、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
n2行n列の２次元リスト	[[0] * n for _ in range(n2)]
データフレームを関数でまとめたグループ	df.groupby(関数)
散布図のポイントマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
回帰分析を部分的最小二乗法で行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
n×n2の二次元リストを作る	[[0] * n for _ in range(n2)]
ふたつのリストの積集合を求める	list(set(aList) & set(aList2))
青い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
文字列がアルファベットか	s.isalpha()
最大長nの双方向キューを列から作る	collections.deque(iterable, maxlen=n)
データフレームの列の名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
ダークブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
マッピングをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
既存のファイルを文字列の示す文字コードを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
option: グラフを破線に指定する	linestyle = 'dashed'
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
Pandasで、タイムスタンプ型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
JSONフォーマットの文字列を読み込む	json.loads(jsonString)
自然数の最大公約数を求める	math.gcd(n, n2)
配列とリストの散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
日付データが木曜日か調べる	aDate.weekday() == 3
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
数列とイテラブルについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの色をコーラルに指定する	plt.plot(データ列x, データ列y, color='coral')
データフレームのリスト列の平均値	df[aList].mean()
xを整数に変換する	int(x)
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
リストの最後のn要素を除く	aList[:-n]
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
リストと数列の散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
ヒストグラムの色をクリムゾンに変更する	plt.hist(データ列, color='crimson')
実線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームをJSONLファイルにTSVで保存する	df.to_csv(filename, sep='\t')
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
要素はタプルの値として含まれている	element in aDict.values()
データフレームの平均と信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
リストと配列の散布図をプロットして、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
option: グラフの色をアンティークホワイトに指定する	color = 'antiquewhite'
ファイルの拡張子付きのファイル名を使う	os.path.basename(filepath)
折れ線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
ダークゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
書式をargsを引数としてフォーマットする	formatText.format(*args)
分子n、分母mの分数を作る	fractions.Fraction(numerator=n, denominator=m)
rgbの丸マーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームの中のNaNを削除する	df.dropna()
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
数字を使う	string.digits
option: 丸マーカーを使う	marker = 'o'
タイムスタンプデータが何年か知る	aDatetime.year
説明変数と目的変数としてモデルを学習する	model.fit(説明変数, 目的変数)
棒グラフを茶色色を用いて描画する	plt.bar(データ列x, データ列y, color='brown')
ピーチパフ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
折れ線グラフに赤い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
散布図を赤い四角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
ヒストグラムの色をパレットトルコイズに変更する	plt.hist(データ列, color='paleturquoise')
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
チョコレート色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
数のn乗	x ** n
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
等間隔でn個にデータフレームの中の列をビン分割する	pd.cut(df[col], n)
ふたつの集合が集合と互いに素	aSet.isdisjoint(aSet2)
列とイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
ダークバイオレット色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
散布図をバツマーカーで描画する	plt.scatter(データ列x, データ列y, marker='x')
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
回帰木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
横棒グラフをレベッカパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
横棒グラフを紺碧色を使って描画する	plt.barh(データ列x, データ列y, color='azure')
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
実行結果をプリントする	print(value)
xでデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(x)
整数nをn2分の1にする	n //= n2
データフレームを十の位で丸めて、整数型にする	df.round(-1).astype(int)
バイナリ用にファイルをオープンする]	open(filepath, mode='rb')
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgrey')
整数nがセットのどれか	n in aSet
ダークシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
文字列は十進数字	s.isdecimal()
散布図をライトゴールドロディイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの列の文字列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
菱形マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D')
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
デピンク色を使ってヒストグラムを描画する	plt.hist(データ列, color='deeppink')
データ列の一意な値	ds.unique()
データフレームのリストカラムの未入力値を直前の値で埋める	df[aList].fillna(method='ffill')
パープルにヒストグラムの色を指定する	plt.hist(データ列, color='purple')
縦棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
実数を十六進表記の文字列に変換する	x.hex()
列をキーにして2つのデータフレームを全結合する	pd.merge(df, df2, on=column, how='outer')
option: 書き込みモードに設定する	mode = 'w'
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
日付時刻データの時間数を求める	aDatetime.hour
データフレームからランダムにn行を抽出する	df.sample(n)
ミディアムバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
折れ線グラフの下三角印の色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ベージュ色としてヒストグラムを描画する	plt.hist(データ列, color='beige')
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
折れ線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
本日が何月か知る	datetime.datetime.today().month
文字列をシアンで出力する	print(f'\033[36m{value}\033[0m')
option: 下三角マーカーを使用する	marker = 'v'
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
双方向キューの左から要素を取り除く	deq.popleft()
切片なしの線形モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
nが正の整数	n > 0
リストのn番目の	aList[n]
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
分類モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
リストの要素をソートする	sorted(aList)
異なるカラムをキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
スノーにヒストグラムの色を設定する	plt.hist(データ列, color='snow')
option: フォントの色をチョコレートに設定する	color = 'chocolate'
日付時刻データが日付時刻データより早いか調べる	aDatetime < aDatetime2
標準入力から1行読み込む	sys.stdin.readline()
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
データ列は何年か確認する	ds.dt.year
3つのデータフレームを横向きに連結する	pd.concat([df, df2, df3], axis=1)
標準入力を使う	sys.stdin
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
option: オレンジレッド色を使用する	color = 'orangered'
option: 更新する	inplace = True
折れ線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
濃くカラーパレットをプロットの描画で用いる	sns.set(pallete='deep')
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
自然対数	math.log(x)
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
カラムを丸める	ds.round()
双方向キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
option: シエナ色を用いる	color = 'sienna'
データフレームのNaNを最大値に設定する	df.fillna(df.max())
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
散布図をrgbの大バツマーカーでプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムをハニーデュー色として描画する	plt.hist(データ列, color='honeydew')
正則化付き重回帰モデルを用意する	model = sklearn.linear_model.ElasticNet()
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
nの無限数列	itertools.repeat(n)
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
nを切り捨てながらn2分の1にする	n //= n2
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
データフレームのインデックスの一覧	df.index
タイムスタンプデータの曜日を整数で使う	aDatetime.weekday()
データフレームの列がxでないデータをフィルタする	df[df[column] == x]
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
折れ線グラフのクロス印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
二つの文字列を辞書順で比較する	s < s2
カウンタのユニークな要素をリストとして得る	list(aCounter)
コーンフラワーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
インデント幅nでマッピングをJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
両端キューの末尾から要素を取り除く	deq.pop()
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
ヒストグラムの描いて正規化する	plt.hist(データ列, density=True)
縦棒プロットをプロットする	plt.bar(ラベル列, データ列)
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
サンディーブラウン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームのリストカラムの尖度を計算する	df[aList].skew()
昇順にデータフレームを２つの列によって整列する	df.sort_values(by=['A', 'B'], ascending=True)
ヒストグラムの色をミディアムオーキッドに変更する	plt.hist(データ列, color='mediumorchid')
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
折れ線グラフの菱形印を赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: フォントの色をダークグリーンに指定する	color = 'darkgreen'
縦棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
ベクトルの差を調べる	aArray - aArray2
データフレームに重複があるか見る	df.duplicated()
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
データ列をビン数nとしてビン分割する	pd.cut(ds, n)
散布図をラベンダー色として描画する	plt.scatter(データ列x, データ列y, color='lavender')
文字列を空白で分割して、文字列リストに変換する	s.split()
option: チョコレートを用いる	color = 'chocolate'
オブジェクトをイテラブルに変換する	iter(obj)
データフレームの列の種類	df.info()
青い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
データフレームから列を三つ選択する	df[[column, column2, column3]]
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
リストにリストを追加して広げる	aList.extend(aList2)
データフレームを各列毎にグループ化して、列の最大値を計算する	df.groupby(column)[column2].max()
データフレームを2つの列によって降順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
標準正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x)
縦棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
option: マーカーの大きさを変更する	markersize = 2.0
線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
option: ディムグレー色を使用する	color = 'dimgray'
データフレームのカラムの中にある文字列の数をカウントする	df[col].isin([value]).sum()
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
縦棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
ヒストグラムをディープスカイブルー色として描画する	plt.hist(データ列, color='deepskyblue')
紺色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
折れ線グラフを実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid')
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
データフレームを降順に'A'列によってによって並べる	df.sort_values(by='A', ascending=False)
縦棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
行列の行列積	np.matmul(aArray, aArray2)
データフレームが正規分布からどの程度、歪んでいるか調べる	df.kurt()
タイムスタンプデータからn日分、減算する	aDatetime - datetime.timedelta(days=n)
要素∉セット	element not in aSet
リストとリストの散布図を描画し、、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
縦棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
グリッドの線スタイルを一点鎖線に変更する	plt.grid(linestyle='dashbot')
x軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
小文字列	string.ascii_lowercase
ヒストグラムを点線を用いてプロットする	plt.hist(データ列, linestyle='dotted')
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
散布図をゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
ヒストグラムの色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
サポートベクター分類モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
線グラフの色をターコイズにセットする	plt.plot(データ列x, データ列y, color='turquoise')
データフレームから指定されたデータ型の列名一覧	df.select_dtypes(型).columns
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
縦棒グラフを描く	plt.bar(ラベル列, データ列)
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
珊瑚色のヒストグラムを描画する	plt.hist(データ列, color='coral')
リストとリストについての散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
プラットホームがリナックスか調べる	sys.platform.startswith('linux')
配列を等しい量になるようにビン数nでビン分割する	pd.qcut(aArray, n)
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
二つの浮動小数点数が十分に近い	math.isclose(x, x2)
Pandasで文字列を日付データに変換する	pd.to_datetime(s)
棒グラフをミッドナイトブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='midnightblue')
文字列をシンボルに変換する	sympy.Symbol(s)
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
ひとつでも小文字が文字列内に含まれる	any(c.islower() for c in s)
赤いバツマーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='x', c='r')
option: 三2ビット整数型を使う	dtype = np.int16
UTF8で追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf-8')
ファイルをEUCを用いてオープンする]	open(filepath, encoding='euc_jp')
散布図に黒い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
ガウス過程回帰モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
パラメータが0に近づく場合、数式の極限値を求める	sympy.limit(e, z, 0)
option: グラフの色を紺碧に設定する	color = 'azure'
ダークグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
ゼロ埋めした行列を初期化する	np.zeros(行数, 列数)
リストの末尾からn番目以前の要素を抽出する	aList[:-n]
サドルブラウン色を用いてヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
キーがマッピング上で未定義	key not in aDict
列の各要素に対して、predicateFuncの適用が真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
線グラフをゴーストホワイト色を使って描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
タプルの要素を逆順にする	aTuple[::-1]
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
空列を作る	[]
横棒グラフをライトスレイグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
データフレームを'A'列でによって破壊的にソートする	df.sort_values(by='A', inplace=True)
丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフを色付きの一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ディープスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
タイムスタンプデータををn日後に進める	aDatetime + datetime.timedelta(days=n)
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
option: グラフの色をシスルに設定する	color = 'thistle'
ロバスト推定として回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
nがn2で割り切れない	n % n2 != 0
イテラブルとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
option: グラフの色をローングリーンにする	color = 'lawngreen'
シードを初期化する	random.seed()
折れ線グラフのポイント印の大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
0で全要素を初期化した配列	np.zeros(要素数)
option: 昇順にする	ascending = True
日付時刻データをタプルにする	aDatetime.timetuple()
データフレームからカテゴリデータの列名のリスト	df.select_dtypes('object').columns
縦棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
ミディアムオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
データ列の欠損値を最大値で置換する	ds.fillna(ds.max())
辞書でカウンタを更新する	aCounter.update(aDict)
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
ヒストグラムをトマト色を用いて描画する	plt.hist(データ列, color='tomato')
option: どの行もヘッダにしない	header = None
データフレームから指定された列だけ選ぶ	df[[column]]
横棒グラフをダーク・スラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
データフレームを二つの列でによって破壊的に並べる	df.sort_values(by=['A', 'B'], inplace=True)
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
option: ミディアムシアグリーンを使う	color = 'mediumseagreen'
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
カテゴリデータを連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
実数の逆正接	math.atan(x)
列のそれぞれを関数でフィルタする	filter(func, iterable)
散布図の△印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
横棒プロットを描き、、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
ロバスト分類モデルを新規作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ライトグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
option: ミディアムスプリンググリーンを使う	color = 'mediumspringgreen'
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
文字列の開始位置以降が部分文字列で始まるかどうか調べる	s.startswith(sub, start)
文字列を区切りを用いて区切り、、列挙する	s.split(sep)
今日の年	datetime.datetime.today().year
ヒストグラムの色をアクアマリンにセットする	plt.hist(データ列, color='aquamarine')
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
データフレームのカラムの中にいくつが含まれるか求める	df[col].isin([value]).sum()
イテラブルから集合	set(iterable)
二つの文字列は等しくないか	s != s2
option: フォントの色をグレーにセットする	color = 'grey'
散布図をバツ印を使い、描画する	plt.scatter(データ列x, データ列y, marker='x')
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
ライム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
英字を全部使う	string.ascii_letters
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
option: フォントの色をオレンジに変更する	color = 'orange'
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
列にイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
折れ線グラフの色をリネンに指定する	plt.plot(データ列x, データ列y, color='linen')
文字化けを防ぐ	sns.set(font='IPAexGothic')
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
ミディアムパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
集合の濃度	len(aSet)
文字列を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
データフレームのリストカラムのNaNを平均値に設定する	df[aList].fillna(df[aList].mean())
縦棒グラフをスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='springgreen')
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: フォントの色をペルーに設定する	color = 'peru'
シスル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
配列をn個に等間隔でビンニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
配列とリストについての散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
散布図をオレンジ色を用いて描画する	plt.scatter(データ列x, データ列y, color='orange')
データフレームを各列と列の組み合わせ毎に集計し、個数を計算する	df.groupby([column, column2], as_index=False).count()
ダークマゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
カラーパレットを濃くする	sns.set(pallete='deep')
赤い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
グラフにx=0の実線を設定する	plt.axvline(x=0, linestyle='solid')
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
クラスは名前付きタプルか	issubclass(C, tuple)
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
グラフのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
両端キューに要素をエンキューする	deq.appendleft(element)
キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: イエローグリーンを使う	color = 'yellowgreen'
データフレームの列を小数点以下n桁で四捨五入する	df[col].round(n)
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
折れ線グラフに大バツマーカーを加える	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
ゼロ埋めされた配列	np.zeros(要素数)
option: 読み込みモードを使用する	mode = 'r'
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
縦棒グラフをライトグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgrey')
折れ線グラフの大バツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
チョコレート色でヒストグラムを描画する	plt.hist(データ列, color='chocolate')
リストと配列について散布図を描画して丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
行列のデータ型	aArray.dtype()
ピンク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
グラフの縦横比を等しくする	plt.axis('equals')
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
option: ディープスカイブルーにフォントの色を設定する	color = 'deepskyblue'
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームが重複しているか確認する	df.duplicated()
リストから文字列を取り除く	aList.remove(element)
タプルをナンバリングする	enumerate(aTuple)
option: ホワイトスモークに色を設定する	color = 'whitesmoke'
散布図をディープスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
データ列の変遷を赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
オブジェクトが関数かどうか調べる	callable(obj)
データフレームを列によってグループ化し、、各グループごとの最大値を算出する	df.groupby(column).max()
ヒストグラムをやわらかい青色で描画する	plt.hist(データ列, color='cornflowerblue')
線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
option: クロス印を加える	marker = 'x'
ハニーデュー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
カラムの各値が何回出現するか見る	df[col].value_counts()
option: グラフの色を青緑に指定する	color = 'teal'
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
小麦色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
横棒グラフをホワイト色で描画する	plt.barh(データ列x, データ列y, color='white')
欠損値も加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
実数のn乗の数剰余を求める	pow(x, n, y)
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
配列とリストについて散布図を描画し、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: ペールグリーン色を使う	color = 'palegreen'
クリムゾン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
グラフの見た目をよくする	import seaborn as sns
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
文字列がタプルに含まれないか	element not in aTuple
線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの列の中に文字列が含まれるか調べる	df[col].isin([value])
ライム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
実数は有限か調べる	math.isfinite(x)
縦棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
組の先頭のn要素を取り除く	aTuple[n:]
ファイルをオープンして]追加ストリームを使う	open(filepath, mode='a')
エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
文字列の左側を使う	s[0]
直前の値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(method='ffill')
Pandasでデータフレームのcollをフォーマットfmtで日付データに変換する	pd.to_datetime(df[col], format=fmt)
データ列の標本標準偏差を求める	ds.std()
文字列を空白で区切って、文字列リストにする	s.split()
フクシアにヒストグラムの色を変更する	plt.hist(データ列, color='fuchsia')
表データをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
文字列リストを連結する	''.join(aStringList)
文字列中の部分文字列を別の文字列に全部置き換える	s.replace(sub, newsub)
リストの先頭を除く	aList[1:]
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
二つの列の値によってデータフレームをまとめたグループ	df.groupby(['A', 'B'])
下位集合か判定する	aSet.issubset(aSet2)
両端キューのn番目に要素を挿入する	deq.insert(n, element)
文字列は全て識別子名か調べる	s.isidentifier()
データ列の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
nとkの組合せ	math.comb(n, k)
シエナ色でヒストグラムを描画する	plt.hist(データ列, color='sienna')
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
複数行対応として文字列の先頭でパターンにマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
日付データが水曜日かどうか調べる	aDate.weekday() == 2
線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
数列の推移を半透明の実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
部分文字列が文字列の終了位置より前に含まれるか	s.find(sub, 0, end) != -1
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
プロットで使うy軸の軸ラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
ダークオリーブグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
集合の補集合	aSet.difference(aSet2)
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
折れ線グラフの色をリネンにする	plt.plot(データ列x, データ列y, color='linen')
ファイルのファイル名を使う	os.path.basename(filepath)
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
nとn2が等しいか調べる	n == n2
折れ線グラフの色をタンに指定する	plt.plot(データ列x, データ列y, color='tan')
行列積を求める	np.matmul(aArray, aArray2)
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
ふたつの集合の共通要素のみに更新する	aSet.intersection_update(aSet2)
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
option: 右三角マーカーを使う	marker = '>'
グラフの縦軸の軸ラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
棒グラフをブラウン色を使って描画する	plt.bar(データ列x, データ列y, color='brown')
実数のk進対数を求める	math.log(x, k)
真紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
文字列を最後の部分文字列で二分し残りの文字列を使う	s.rpartition(sub)[-1]
カラーマップでヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
列の歪度	ds.kurt()
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v')
部分文字列で文字列を二分する	s.partition(sub)
データフレームから重複した行をドロップして更新する	df.drop_duplicates(inplace=True)
データフレームのリストカラムの未入力値を前の値にする	df[aList].fillna(method='ffill')
折れ線グラフに四角印を加える	plt.plot(データ列x, データ列y, marker='s')
データ列の中にいくつ日付データがあるか求める	ds.isin([value]).sum()
実数を数で	x // y
タプルの全順列	itertools.permutations(iterable)
グラフの用途をスライドに設定する	sns.set(context='talk')
折れ線グラフの大バツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
配列をリストを境界値として分割する	pd.cut(aArray, aList)
最適な場所に凡例を表示する	plt.legend(loc='best')
option: マーカーをバツに変える	marker = 'x'
データフレームを表示するときデータフレームをn列まで表示できるようにする	pd.set_option('display.max_columns', n)
データフレームの内で何行、重複するか調べる	df.duplicated().sum()
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
チョコレート色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ヒストグラムの色をミディアムブルーにセットする	plt.hist(データ列, color='mediumblue')
レベッカパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
option: グラフの色をライトブルーに指定する	color = 'lightblue'
文字列の末尾からタブを取り除く	s.rstrip('\t')
列を両端キューに変換する	collections.deque(iterable)
実行結果を赤色でプリントする	print(f'\033[31m{value}\033[0m')
日付データの曜日を整数で使う	aDate.weekday()
２つの浮動小数点数はほぼ等しい	math.isclose(x, x2)
データフレームの列が文字列で終わる行を選ぶ	df[df[column].str.endswith(s)]
アクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
作画の背景色を暗くする	sns.set(style='darkgrid')
option: プラムにグラフの色を変更する	color = 'plum'
ライトゴールドロディイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
辞書のキーの一覧を見る	aDict.keys()
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
折れ線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
横棒グラフを淡いピンク色色を用いて描画する	plt.barh(データ列x, データ列y, color='lightpink')
文字列をパディングする	s.zfill(文字列幅)
ふたつの辞書を合体する	aDict | aDict2
変数名を項目名として、マップ	dict(name=element)
文字列内にひとつでも空白が含まれるか	any(c.isspace() for c in s)
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
多次元尺度構成法で濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
nで乱数シードを初期化する	random.seed(n)
nはn2と等しいか調べる	n == n2
データフレームをグループ化し各列に対し合計を求める	df.groupby(column)[column2].sum()
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
2変数の最小値を求める	min(x, y)
予測値とデータの離れ具合をプロットする	sns.residplot(x='列名', y='列名', data=df)
表データのn番目の行を抽出する	df.loc[n]
赤い一点鎖線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
文字列ひとつの組を得る	(element,)
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
option: フォントの色をターコイズに指定する	color = 'turquoise'
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
折れ線グラフの色をゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='goldenrod')
文字列の接尾辞が部分文字列	s.endswith(sub)
２つのデータフレームを列'A'と列'B'をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
パターンを事前にASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
データ列の出現頻度を図示する	plt.hist(データ列)
列の各データが何回出現するか見る	ds.value_counts()
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
黒い三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
n番目のシートをファイルの読み込む	pd.read_excel(filename, sheet_name=n)
ヒストグラムの色をライトグリーンにセットする	plt.hist(データ列, color='lightseagreen')
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
折れ線グラフのクロス印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
横棒グラフをブランチドアーモンド色を用いて描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
イテラブルとリストについての散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
リストの全要素をクリアにする	aList.clear()
乱数で要素を埋めた配列	np.random.random(N)
xが真かどうか	bool(x)
rgbの▼マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
青い線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
オブジェクトは論理値クラス	isinstance(obj, bool)
option: ロージーブラウンにグラフの色を指定する	color = 'rosybrown'
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
直後の値でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(method='bfill')
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
数を十六進表記の文字列にする	x.hex()
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
n個の数値イテラブルを見る	range(n)
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
散布図をブルーバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
t-SNEを行う	model = sklearn.manifold.TSNE(n_components=n)
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
データフレームの指定された三つの列を抽出する	df[[column, column2, column3]]
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
JSONファイルファイル名がか	filename.endswith('.json')
パープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
数式を積分する	sympy.integrate(e)
option: 茶色色を使う	color = 'brown'
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
折れ線グラフの色をオリーブに指定する	plt.plot(データ列x, データ列y, color='olive')
小数点数の仮数	math.frexp(x)[0]
列の未入力値をモードで埋める	ds.fillna(ds.mode().iloc[0])
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
散布図をライトグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
要素が全て初期値の配列を作る	np.full(要素数, 初期値, dtype=np.int)
双方向キューの末尾に要素を追加する	deq.append(element)
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
TSVを読み込む	pd.read_csv(filename, sep='\t')
データでモデルを学習する	model.fit(説明変数, 目的変数)
ヒストグラムでリストを描画する	plt.hist(データ列)
文字列が全てアスキー文字か	s.isascii()
ミディアムシアグリーン色を使ってヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
横棒グラフを描画し、、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ディレクトリ	os.getcwd()
データフレームの値を正規表現patternでまとめて置き換える	df.replace(pattern, repl, regex=True)
option: どの行もカラムの名前にしない	header = None
やわらかい青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
散布図の三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
文字列の開始位置番目と終了位置番目の間に部分文字列がないか調べる	s.find(sub, start, end) == -1
散布図に黒い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
文字列を走査し、パターンにマッチするか見る	re.search(pattern, s)
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
OSがWindowsか	sys.platform.startswith('win32')
入力から二つの文字列を読む	A, B = map(str, input().split())
文字列を部分文字列で分けたときの先頭の文字列を求める	s.partition(sub)[0]
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームの列とカラムをドロップする	df.drop([column, column2], axis=1)
散布図をダークオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='darkorange')
日付時刻データの日数	aDatetime.day
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
option: スキップするフッタをnに変更する	skipfooter = n
方程式の解を算出する	sympy.solve(e)
option: シスル色を用いる	color = 'thistle'
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
リストとリストについて散布図を描画し、、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
データフレームとデータ列を横方向にくっつける	pd.concat([df, ds], axis=1)
0からnまでの整数列	list(range(n+1))
スノー色でヒストグラムを描画する	plt.hist(データ列, color='snow')
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
n引くn2	n - n2
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
ゼロ埋めされた行列	np.zeros(行数, 列数)
rgbの三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
表データから指定された列を抽出する	df[[column]]
ASCII限定として正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
ふたつの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
グラフの横軸の説明を設定する	plt.xlabel('x軸ラベル')
棒グラフをライトスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
ヒストグラムの範囲をセットする	plt.hist(データ列, range=(start, end))
回帰分析を勾配ブースティングとしてする	model = sklearn.ensemble.GradientBoostingRegressor()
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
データフレームの相関行列をヒートマップとして描画する	sns.heatmap(df.corr())
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
表データの列が文字列で終わらない行を取り出す	df[not df[column].str.endswith(s)]
データ列をビニングする	pd.cut(ds, aList)
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
モデルの精度を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
マッピングを階層化する	collections.ChainMap(aDict)
データフレームを丸めて整数にする	df.round().astype(int)
散布図をアンティークホワイト色として描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
予測データの混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
横棒グラフをスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='steelblue')
線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgray')
折れ線グラフの下三角印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
option: 左三角マーカーを使用する	marker = '<'
option: マーカーの色を濃いシアンにする	markerfacecolor = 'darkcyan'
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
ヒストグラムを茶色色として描画する	plt.hist(データ列, color='brown')
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
本日をタプルにする	datetime.datetime.today().timetuple()
特異値分解の準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
日付時刻データが月曜日か	aDatetime.weekday() == 0
Pandasで、データ列のUNIX秒からタイムスタンプにする	pd.to_datetime(ds, unit='s', utc=True)
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
リストの合計値	sum(aList)
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
線グラフの色をインディアンレッドに変更する	plt.plot(データ列x, データ列y, color='indianred')
ホットピンクにヒストグラムの色を設定する	plt.hist(データ列, color='hotpink')
ファイルをUTF8を用いて書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
オレンジレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
データフレームを'A'列でソートする	df.sort_values(by='A')
option: カデットブルーに色をセットする	color = 'cadetblue'
option: グラフの線の種類を破線に設定する	linestyle = 'dashed'
列をビン数nで分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
オブジェクトの無限のイテラブル	itertools.repeat(element)
散布図としてデータフレームの全カラムを可視化する	sns.pairplot(df)
今日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
ファイルから1バイト、読み込む	f.read(1)
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
option: 色をターコイズに変更する	color = 'turquoise'
線グラフの色をダークシアグリーンにセットする	plt.plot(データ列x, データ列y, color='darkseagreen')
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
データフレームの列の最頻値	df[col].mode()
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
棒グラフをライトサーモン色を使って描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームから指定した二つの列だけ抽出する	df[[column, column2]]
ヒストグラムの色をミディアムスレートブルーに指定する	plt.hist(データ列, color='mediumslateblue')
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
オブジェクトのバイトサイズ	sys.getsizeof(obj)
文字列がリストの要素でないかどうか調べる	element not in aList
文字をASCIIコードに変換する	ord(ch)
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
タプルの末尾からn番目以前の部分を得る	aTuple[:-n]
データフレームの中の欠損値がある行を消す	df.dropna()
ヒストグラムの色をフォレストグリーンに指定する	plt.hist(データ列, color='forestgreen')
データフレームの列の平均値	df[col].mean()
option: ライトシアンにフォントの色を指定する	color = 'lightcyan'
変数をシアン化する	f'\033[36m{value}\033[0m'
行列の行ごとの分散	np.var(aArray, axis=1)
プロットを論文用に設定する	sns.set(context='paper')
xのハッシュ値を求める	hash(x)
オブジェクトは整数型か調べる	isinstance(obj, int)
分類モデルの偽陽性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
レモンシフォン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
ヒストグラムをダークターコイズ色として描画する	plt.hist(データ列, color='darkturquoise')
散布図をライトスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
貝殻色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
度数分布図を描画し、合計を1にする	plt.hist(データ列, density=True)
黒い左三角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ファイルを読み込みできるように開く]	open(filepath, mode='r')
チョコレート色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
グラフの描画で濃く色を使う	sns.set(pallete='deep')
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='turquoise')
option: ミディアムターコイズにフォントの色を設定する	color = 'mediumturquoise'
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
データフレームのリスト列の中に存在する文字列と日付データの合計を数える	df[aList].isin([value, value2]).sum()
データフレームを表示するとき小数点以下の表示精度をn桁に指定する	pd.set_option('precision', n)
データフレームを列で並べてインデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
nをn2だけ右シフトする	n >> n2
リストと配列の散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
列でデータフレームをグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
数値の簡単化を行う	sympy.sympify(e)
ファイルパスが存在するか調べる	os.path.exists(filepath)
新しい勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
ブラウン色のヒストグラムを描画する	plt.hist(データ列, color='brown')
浮動小数点数の複素数	complex(x)
カラムのメディアン	ds.median()
コーンズシルク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
エクセルファイルファイルからエクセルファイルを読む	pd.read_excel(filename)
スカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
データフレームのカラムの値を正規表現patternでまとめてreplに変更する	df[col].replace(pattern, repl, regex=True)
データフレームのカラムのNaNを前の値に指定する	df[col].fillna(method='ffill')
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
折れ線グラフの線種を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
ダークオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
十六進文字列をバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
50パーセンタイルでデータフレームの欠損値を埋める	df.fillna(df.median())
セットから別の集合との共通要素を除去する	aSet.symmetric_difference_update(aSet2)
データフレームを'A'列によって並べ、NaNを先頭にする	df.sort_values(by='A', na_position='first')
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
黒いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図に赤い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
ティール色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
縦棒グラフを描画してラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
リストとリストの散布図を描画してポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
文字列内にひとつでも大文字があるかどうか調べる	any(c.isupper() for c in s)
データフレームを'A'列を用いて降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
シスル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
両端キューの大きさ	len(deq)
データフレームの列のNaNを最小値にセットする	df[col].fillna(df[col].min())
縦方向に複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
青い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ヒストグラムでデータ列を描画する	plt.hist(データ列)
オブジェクトがリストクラスのインスタンスか調べる	isinstance(obj, list)
ベクトルの演算を行う	import numpy as np
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
カウンタの項目をリストとして得る	aCounter.keys()
文字列を空白によって分割して、数列に変換する	map(int, s.split())
棒グラフをリネン色として描画する	plt.bar(データ列x, データ列y, color='linen')
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
グラフにy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
多次元データを主成分分析を用いて濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データフレームの欠損値を直後の値に増やす	df.fillna(method='bfill')
ヒストグラムの色をミントクリームに変更する	plt.hist(データ列, color='mintcream')
タイムスタンプデータのタイムゾーン	aDatetime.timetz()
option: ダークバイオレットを使用する	color = 'darkviolet'
スタックの先頭のデータ	deq[0]
データをL1ノルムを用いて正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
マッピングから多重集合を作成する	collections.Counter(aDict)
データフレームのリスト列が正規分布からどれだけ、歪んでいるか見る	df[aList].kurt()
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
データフレームの行を範囲指定して抽出する	df[start:end]
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ヒストグラムをロージーブラウン色として描画する	plt.hist(データ列, color='rosybrown')
方程式として数値の変数の解を算出する	sympy.solve(e, z)
グラフにグリッド線を入れる	plt.grid(True)
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
option: グラフの色をライトグリーンに変更する	color = 'lightgreen'
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
異なる列をキーにして2つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
イテラブルを無限に繰り返す	itertools.cycle(iterable)
文字列を最後の部分文字列で分けた時の前半の文字列を使う	s.rpartition(sub)[0]
データフレームの列のNaNを最小値に設定する	df[col].fillna(df[col].min())
ガウス過程回帰モデルを作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
カウンタのユニークな文字列を列挙する	list(aCounter)
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
ヒストグラムの色をシアンに変更する	plt.hist(データ列, color='cyan')
散布図の▼印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
2進文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
カラーバーをプロットする	plt.colorbar()
線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
nがn2より大きいかどうか確認する	n > n2
スラグレーにヒストグラムの色を指定する	plt.hist(データ列, color='slategrey')
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
データフレームをCSVから読み込む	pd.read_csv(filename, sep=',')
データフレームのリスト列の欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
二次元リストをフラット化する	sum(aList)
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
散布図の印を黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
文字列にイテラブルを変換して、タブによって連結する	'\t'.join(map(str, iterable))
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
option: フォントの色をライトサーモンに設定する	color = 'lightsalmon'
データフレームの列の名前一覧	df.columns
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
option: 色のアルファを設定する	alpha = 0.5
折れ線グラフのマーカーを丸印にする	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: ホットピンクにフォントの色を設定する	color = 'hotpink'
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
数列とリストの散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
空のガウス過程分類モデルを準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
option: シルバー色を用いる	color = 'silver'
文字列リストを一つの文字列にする	''.join(aStringList)
データフレームの指定されたカラムを抽出する	df[column]
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
option: グラフの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
nとn2の排他的論理和	n ^ n2
nがn2以下、またはn3以上か	n <= n2 or n >= n3
サドルブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='saddlebrown')
箱髭図を描画し、、平均線を追加する	plt.boxplot(データ列, meanline=True)
データフレームを各列と列の組み合わせ毎にグループ分けして、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
散布図をバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='violet')
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
ロージーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データフレームを'A'列によって集約して列挙する	[(name, group) for name, group in df.groupby('A')]
サブセットか調べる	aSet.issubset(aSet2)
タイムスタンプデータををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
列を双方向キューにする	collections.deque(iterable)
文字列を特殊文字も含め小文字にする	s.casefold()
ライトスレイグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
カウンタ同士で交わり	aCounter & aCounter2
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
２つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
折れ線グラフをオレンジ色として描画する	plt.plot(データ列x, データ列y, color='orange')
文字列が全てアルファベットか調べる	s.isalpha()
ヘッダを付けずにデータフレームをJSONLファイルに書き込む	df.to_csv(filename, header=None)
整数nを8進数表現にする	oct(n)
線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
option: 色を紺碧に設定する	color = 'azure'
小数点数の双曲線余弦の逆数	math.acosh(x)
スタックをポップする	deq.pop()
データ列をフォーマットfmtとしてPandasの日付型に変換する	pd.to_datetime(ds, format=fmt)
縦棒グラフをカーキ色を用いて描画する	plt.bar(データ列x, データ列y, color='khaki')
デックをリストに変換する	list(deq)
ベクトルの分散を求める	np.var(aArray)
データ列を1000の位で丸める	ds.round(-3)
option: 耐火レンガ色を使用する	color = 'firebrick'
ファイルパスを絶対パスにする	os.path.abspath(filepath)
データフレームの相関行列スピアマンを用いて	df.corr(method='spearman')
配列とリストについての散布図に黒いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
日付時刻データが日付時刻データより遅いか調べる	aDatetime > aDatetime2
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
三整数のLCM	math.lcm(n, n2, n3)
新しいヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列の右側から改行を取り除く	s.rstrip('\n')
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
JSONファイルのfをデータにする	json.load(fin)
ケンドールでデータフレームの相関行列	df.corr(method='kendall')
両端キューの先頭からデータを取り除く	deq.popleft()
プロットの描画で淡く色を使用する	sns.set(pallete='muted')
コマンド引数を列挙する	sys.argv[1:]
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
2つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
リストの最後のn要素を取り除く	aList[:-n]
option: スチールブルー色を用いる	color = 'steelblue'
線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
ヒストグラムの色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
Pandasでエポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
プロットの色を全般的にパステル調にする	sns.set(pallete='pastel')
predicateFuncが真とならないイテラブルの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
横棒グラフをバイオレット色で描画する	plt.barh(データ列x, データ列y, color='violet')
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
nは集合のどれかかどうか調べる	n in aSet
nの2進文字列	bin(n)[2:]
データフレームを表示するとき、小数点以下n桁まで表示されるようにする	pd.set_option('precision', n)
フクシア色で線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
option: マゼンタにフォントの色を設定する	color = 'magenta'
ダークマゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
マッピングを浅く複製する	dict(aDict)
文字列が組に含まれるか調べる	element in aTuple
配列の行ごとの平均を算出する	np.mean(aArray, axis=1)
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
option: 丸マーカーを描画する	marker = 'o'
データ列の時刻を使う	ds.dt.hour
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
線グラフの色をマゼンタに変更する	plt.plot(データ列x, データ列y, color='magenta')
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
数式の積分を求める	sympy.integrate(e)
ラベンダー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
option: 茶色を用いる	color = 'brown'
データフレームのNaNが含まれる部分に色を付ける	df.style.highlight_null()
option: レモンシフォンを用いる	color = 'lemonchiffon'
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
option: グラフの色をライトイエローにする	color = 'lightyellow'
ファイルパスからストリームをオープンして]、fileとする	file = open(filepath)
nからn2までのひとつ飛ばしの整数列を作る	list(range(n, n2+1, 2))
文字のユニコードを使う	ord(ch)
真部分集合かどうか	aSet < aSet2
option: ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
option: トマト色を使う	color = 'tomato'
データフレームのリスト列の値は欠損値かどうか確認する	df[aList].isna()
リストをリストを境界値としてビニングする	pd.cut(aList, aList)
nをn2で割った余りをnとする	n %= n2
二進文字列を整数に変換する	int(s, 2)
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
オブジェクトは辞書クラス	isinstance(obj, dict)
option: ミディアムスレートブルーを用いる	color = 'mediumslateblue'
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
横棒グラフをゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='goldenrod')
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
option: マーカーを四角に変更する	marker = 's'
棒グラフをゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='goldenrod')
シーケンスを文字列リストに変換して、タブで結合する	'\t'.join(map(str, iterable))
長さが一致しないバージョンのzip	itertools.zip_longest(iterable, iterable2)
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図の上三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
横棒グラフを黄色色を使って描画する	plt.barh(データ列x, データ列y, color='yellow')
列の各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
正則化付き単回帰分析を行う	model = sklearn.linear_model.ElasticNet()
散布図の上三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームのグループごとの個数	df.groupby(column).count()
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
ダークカーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
文字列内にひとつでも英字が含まれるかどうか	any(c.isalpha() for c in s)
ユニークな値を要素とする配列	np.unique(aArray)
文字列をSJISでバイト列にする	s.encode(encoding='sjis', errors='ignore')
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
シルバーにヒストグラムの色を設定する	plt.hist(データ列, color='silver')
n個の整数列	list(range(n))
ヒストグラムを淡いピンク色色として描画する	plt.hist(データ列, color='lightpink')
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
実数を百の位で丸める	round(x, -2)
文字列を部分文字列で二分し最初の文字列を使う	s.partition(sub)[0]
日付時刻データとタイムスタンプデータの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()//60
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
option: ペールグリーンにグラフの色を設定する	color = 'palegreen'
option: グラフの色を白に設定する	color = 'white'
データフレームを表示するとき、ヘッダー行を右寄せに減らす	pd.set_option('colheader_justify', 'right')
データフレームを複数の列によって小さい順に整列する	df.sort_values(by=column, ascending=True)
データ列の曜日	ds.dt.weekday_name
行列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
データ列を平方根する	np.sqrt(データ列)
浮動小数点数を切り下げて整数に変換する	math.floor(x)
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
カラムの中にいくつ日付データがあるか求める	ds.isin([value]).sum()
文字列を書式で日付データにする	pd.to_datetime(s, format='%Y-%m-%d')
Pandasで、Pandasの日付型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
散布図をカーキ色を使って描画する	plt.scatter(データ列x, データ列y, color='khaki')
整数のn乗して実数による余り	pow(x, n, y)
黒いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
マッピングを浅くコピーする	dict(aDict)
リストと配列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
列の全順列	itertools.permutations(iterable)
データフレームのリストカラムのNaNを中央値に設定する	df[aList].fillna(df[aList].median())
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
タプルの最後のn要素を捨てる	aTuple[:-n]
ピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
実行結果を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
スピアマン相関係数を使ってデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
リストが空か調べる	len(aList) == 0
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
データフレームのn行以降選択する	df[n:]
列を用いてデータフレームをソートし、、上位を取り出す	df.sort_values(columns).head(n)
本日の月数を使う	datetime.datetime.today().month
組をリストにする	list(aTuple)
データフレームを列によって整列して、新しいインデックスを加える	df.sort_values(columns).reset_index()
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ダークシアグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
列の各値が何回出現するか見る	ds.value_counts()
option: 白色を用いる	color = 'white'
ミントクリーム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
option: マーカーを下三角に変える	marker = 'v'
データフレームのリストカラムの代表値を求める	df[aList].describe()
データフレームの列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
折れ線グラフの大バツ印の太さを変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
配列をリストを境界値としてビンニングする	pd.cut(aArray, aList)
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
リストの文字列が最初に見つかる位置	aList.index(element)
文字列は印字できるか調べる	s.isprintable()
日付データからn時間分減らす	aDate - datetime.timedelta(hours=n)
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
リストの最初の文字列を探す	aList.index(element)
散布図の四角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
option: エンコーディングを文字コードtextに変更する	encoding = text
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
ヒストグラムの色をインディゴに指定する	plt.hist(データ列, color='indigo')
配列をn個に分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
正規表現をケースを無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
折れ線グラフの大バツ印の色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
option: ナバホホワイト色を使う	color = 'navajowhite'
nが5の倍数かどうか	n % 5 == 0
行列の値	aArray[行番号, 列番号]
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
n個分両端キューの要素を左にローテンションする	deq.rotate(-n)
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
新しい文字列として文字列中の正規表現を置き換える	re.sub(pattern, newsub, s)
モジュールを検索するパスにを追加する	sys.path.append(dir)
ヒストグラムをゴーストホワイト色として描画する	plt.hist(データ列, color='ghostwhite')
カウンタ間で和集合を求める	aCounter | aCounter2
イテラブルを累加する	itertools.accumulate(iterable)
データフレームのリスト列の相関行列ケンドール相関係数で	df[aList].corr(method='kendall')
option: グリーンイエローに色を設定する	color = 'greenyellow'
浮動小数点数を小数点第一位で丸める	round(x, 1)
データフレームから型を抽出する	df.select_dtypes(ty)
整数nを半分にする	n //= 2
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
マルーン色としてヒストグラムを描画する	plt.hist(データ列, color='maroon')
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
データフレームのリスト列の未入力値を最大値に設定する	df[aList].fillna(df[aList].max())
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
縦棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
ミディアムバイオレットレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
コマンドの第2引数を確認する	sys.argv[1]
データフレームのリストカラムの中にある日付データと文字列の合計を数える	df[aList].isin([value, value2]).sum()
折れ線グラフの色をホットピンクに変更する	plt.plot(データ列x, データ列y, color='hotpink')
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
ヒストグラムを青くする	plt.hist(データ列, color='b')
リストの文字列が最初に見つかるインデックス	aList.index(element)
TSVファイルからSJISでカンマ区切りのファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
配列とデータ列の散布図を描画し、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: 左三角印を描画する	marker = '<'
ファイル全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
線グラフの色をデピンクに変更する	plt.plot(データ列x, データ列y, color='deeppink')
UNIXコマンドtextを実行する	os.system(text)
データフレームを'A'列の値毎にグループ分けし、、列挙する	[(name, group) for name, group in df.groupby('A')]
データフレームのリストカラムの中に文字列と文字列がある	df[aList].isin([value, value2])
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
今日をタプルに変換する	datetime.datetime.today().timetuple()
option: ゴールドを使用する	color = 'gold'
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
モカシン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
option: フォントの色をシャルトリューズに指定する	color = 'chartreuse'
整数nを16進文字列に変換する	hex(n)[2:]
折れ線グラフをミディアムオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ヒストグラムを破線を用いてプロットする	plt.hist(データ列, linestyle='dashed')
データフレームの列と列の相関行列ピアソンで	df[[column, column2]].corr(method='pearson')
ミディアムアクアマリン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
に箱ひげ図でデータフレームのカラムをグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームの指定された列をリストに変換する	df[column].values.tolist()
積み上げ横棒プロットを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
実数の双曲線余弦	math.cosh(x)
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
数列とイテラブルについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームの列の各値の出現数	df[col].value_counts()
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
データフレームの列がxより大きくx2より小さい行を取り出す	df[(x < df[column]) & (df[column] < x2)]
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
二つの文字列をタブで区切って表示する	print(value, value2, sep='\t')
整数から数を減算する	x - y
散布図に黒いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
10を底とする対数	math.log10(x)
ファイルをBOM付きを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
折れ線グラフをミディアムアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
散布図を赤い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
モデルデータでを学習する	model.fit(説明変数, 目的変数)
リストを境界値としてデータフレームの中のカラムを分割する	pd.cut(df[col], aList)
折れ線グラフの色をコーンフラワーブルーに指定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
seabornのデフォルトを適用する	sns.set()
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
リストからベクトルを作る	np.array(aList)
黒いバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
折れ線グラフの▽印の色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: ダークシアグリーンにグラフの色を設定する	color = 'darkseagreen'
オブジェクトはリストクラスか調べる	isinstance(obj, list)
UTF8としてファイルパスをオープンする]	open(filepath, encoding='utf-8')
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
オブジェクトは集合クラスのインスタンスか	isinstance(obj, set)
option: 配列のデータ型を指定する	dtype = np.uint8
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
散布図にrgbの三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの最初	df.head()
データフレームをNaNを含めて列の値でグループ化する	df.groupby(column, dropna=False)
N未満までの行列	np.arange(N)
カウンタを列として更新する	aCounter.update(iterable)
データ列の分布を図示する	plt.scatter(データ列x, データ列y)
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
リストと数列についての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
折れ線グラフのダイアモンド印の大きさを設定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
データフレームのリストカラムの中に文字列と日付データが存在するか確認する	df[aList].isin([value, value2])
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
列をキーとして2つのデータフレームを左ジョインする	pd.merge(df, df2, on=column, how='left')
今日をISO形式の文字列にする	datetime.datetime.today().isoformat()
大量のデータ列が正規分布に従うか調べる	scipy.stats.kstest(データ列, 'norm')
ファイルを読み込み用に開く]	open(filepath, mode='r')
シャルトリューズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
空のヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: フォントの色をペールグリーンに変更する	color = 'palegreen'
棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
要素が集合のメンバーか調べる	element in aSet
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
データフレームをグループ化し、それぞれの列に対し標準偏差を算出する	df.groupby(column)[column2].std()
データフレームの名前リストで指定された列を取り除く	df.drop(columns, axis=1)
配列の標準偏差	np.std(aArray)
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
グラフの描画でパステル調に色テーマを使う	sns.set(pallete='pastel')
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
散布図をフォレストグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
文字列から部分文字列を全て除く	s.replace(sub, '')
赤い下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
パターンを事前にコンパイルする	re.compile(pattern)
線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフの色をダークシアンにセットする	plt.plot(データ列x, データ列y, color='darkcyan')
nからn2までの整数列を作る	list(range(n, n2+1))
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
ヒストグラムを青緑色を用いて描画する	plt.hist(データ列, color='teal')
デピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームの列が正規分布からどれだけ、歪んでいるか見る	df[col].kurt()
リストとリストについて散布図を描き、、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
双方向キュー	collections.deque()
Pandasで、データ列をdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
オールドレース色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
折れ線グラフの右三角印の色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
辞書から最後の項目をポップする	aDict.popitem()
折れ線グラフのバツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
option: ライトグリーンに色を設定する	color = 'lightseagreen'
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
文字列が全て大文字か調べる	s.isupper()
赤い丸マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
整数nはリストの一つである	n in aList
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
マップのキーを列挙する	aDict.keys()
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
カラムの欠損値を最小値に設定する	ds.fillna(ds.min())
データフレームのstart行目からend行目まで抽出する	df[start:end]
棒グラフをクリムゾン色を用いて描画する	plt.bar(データ列x, データ列y, color='crimson')
赤い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
文字列を最後から部分文字列で区切る	s.rsplit(sub)
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
全ての数字	string.digits
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
読み込みモードを使ってファイルパスをオープンする]	open(filepath, mode='r')
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
option: 事前に説明変数を正規化する	normalize = True
nをn2分の１にする	n /= n2
文字列中の小文字を大文字に変換する	s.upper()
文字列をパターンで分ける	re.split(pattern, s)
縦棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
縦棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
データフレームのカラムのNaNを平均値で埋める	df[col].fillna(df[col].mean())
表のリストカラムのヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
列名リストを用いて昇順にデータフレームをソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
データ列が何月か調べる	ds.dt.month
文字列の中のASCII限定としてパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
ダークスラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
値を双方向キューのn番目に追加する	deq.insert(n, element)
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
散布図を赤い▲マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ヒストグラムの色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
既存のファイルを追加できるように文字列の示す文字コードで開く]	open(filepath, mode='a', encoding=s)
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgrey')
リストと数列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ミディアムバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
文字列をマゼンタでプリントできる文字列にする	f'\033[35m{value}\033[0m'
散布図の大バツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ヒストグラムの色をグリーンイエローに変更する	plt.hist(データ列, color='greenyellow')
散布図をダークブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkblue')
日付データにn時間を加える	aDate + datetime.timedelta(hours=n)
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
option: ダークレッド色を使う	color = 'darkred'
文字列の変数名を数式に変換する	sympy.Symbol(s)
option: グラフの色をシエナに設定する	color = 'sienna'
ゲインズボロ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: グラフの色をアイボリーに指定する	color = 'ivory'
セットを組に変換する	tuple(aSet)
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
黒い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
列を文字列に変換して、タブで結合する	'\t'.join(map(str, iterable))
ラベル付きの円グラフを描く	plt.pie(データ列, startangle=90, labels=ラベル列)
データフレームを各列と列の組み合わせ毎にグループ化し、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
データフレームを関数によってまとめたグループを使う	df.groupby(関数)
nがn2未満、それかn3以上	n < n2 or n >= n3
黒い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='k')
双方向キューの長さを制限する	collections.deque(maxlen=n)
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
最大値・最小値の範囲として一様な乱数を発生させる	random.uniform(最小値, 最大値)
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームの列の中に含まれる文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
文字列中からパターンにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
option: ライトスレイグレーを使用する	color = 'lightslategray'
ヒストグラムの色をビスクにセットする	plt.hist(データ列, color='bisque')
カーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
文字列中に非英数字がある	any(not c.isalnum() for c in s)
データフレームのカラムを丸める	df[col].round()
データフレームのリストカラムを丸める	df[aList].round()
散布図の星マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
数列とイテラブルについて散布図をプロットし、、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
辞書の項目名一覧	list(aDict)
組の値だけプリントする	print(*aTuple)
データフレームのリスト列を四捨五入する	df[aList].round()
右三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
データフレームの行と列を入れ替える	df.T
データ列をインポートする	import pandas as pd
space	' '
キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
マッピングのコピーを作成する	dict(aDict)
実数を切り上げて整数に変換する	math.ceil(x)
三変数の最小値	min(x, y, z)
複数のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
黒い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームのカラムは何時か確認する	df[col].dt.hour
option: インディアンレッドにフォントの色を変更する	color = 'indianred'
赤い右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
配列をフラットにする	aArray.flatten()
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
整数nを十六進数文字列に変換する	hex(n)[2:]
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
nが2で割り切れない	n % 2 == 1
文字列の右側から余分な空白を除去する	s.rstrip()
データフレームの列がx以下の行を取り出す	df[df[column] <= x]
option: ビスクに色を設定する	color = 'bisque'
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
option: ▲マーカーを用いる	marker = '^'
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
option: セパレータを使わない	sep = ''
ダークレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
ヒストグラムを実線に設定する	plt.hist(データ列, linestyle='solid')
データフレームを関数によってまとめたグループ	df.groupby(関数)
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
セットにイテラブルを追加更新する	aSet.update(iterable)
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
文字列の接頭辞が部分文字列かどうか調べる	s.startswith(sub)
バイオレット色として線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
データフレームの列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
ティール色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
イテラブルとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
option: グリーンイエロー色を用いる	color = 'greenyellow'
インディゴ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
カウンタの項目を増やす	aCounter[element] += 1
折れ線グラフをミディアムオーキッド色として描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データフレームを散布図で描画し、、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
四分位数ごとにデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
横軸の目盛を対数に変更する	plt.xscale('log')
双方向キューに要素を積む	deq.append(element)
再帰が何回までできるかを	sys.getrecursionlimit()
ユニークな値を要素とする配列を求める	np.unique(aArray)
データフレームから指定した三つの列のみ抽出する	df[[column, column2, column3]]
データフレームのリストカラムを10の位で丸めて整数型にする	df[aList].round(-1).astype(int)
データフレームのn行以降を抽出する	df[n:]
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
表データの指定された２つの列を抽出する	df[[column, column2]]
変数を太文字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
配列を四分位数で分割する	pd.qcut(aArray, 4)
縦棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
等差数列を配列にする	np.arange(開始値, 終了値, 等差)
行列の累積積を求める	np.cumprod(aArray)
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
ライトイエロー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
オプションで出力先を標準出力に設定する	file = sys.stdout
数式を部分分数として展開する	sympy.apart(e)
スレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームを各列と列の組み合わせ毎に集約して標準偏差を求める	df.groupby([column, column2], as_index=False).std()
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
配列の最大値	np.max(aArray)
option: 下三角マーカーを加える	marker = 'v'
本日の日付時刻	datetime.datetime.today()
散布図の右三角印を青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
option: グラフの色をバリーウッドに指定する	color = 'burlywood'
データ列のRMSEを計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
折れ線グラフに左三角印を使う	plt.plot(データ列x, データ列y, marker='<')
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
折れ線グラフをカデットブルー色として描画する	plt.plot(データ列x, データ列y, color='cadetblue')
縦棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
標準入力を使用する	sys.stdin
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
グリッドを実線にする	plt.grid(linestyle='solid')
サドルブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
マッピングをカウンタにする	collections.Counter(aDict)
文字列の右側から空白を取り除く	s.rstrip(' ')
キーで指定された値をタプルからポップする	aDict.pop(key)
列によってデータフレームをまとめたグループ	df.groupby(column)
現在のワーキングディレクトリ	os.getcwd()
最大最小でデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
折れ線グラフのダイアモンド印の線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
ゼロ埋めされた整数型のベクトルを作成する	np.zeros(要素数, dtype=np.int)
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
文字列をバイト列にする	bytes(s)
グリッド線を黒くする	plt.grid(color='k')
option: シーグリーン色を使う	color = 'seagreen'
option: グラフの色をダークシアンに指定する	color = 'darkcyan'
データフレームの列のユニークな値の個数	df[col].nunique()
散布図のクロスマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ファイルを書き込みモードを用いて開いて]、fとする	f = open(filepath, mode='w')
リストの最後を捨てる	aList[:-1]
オブジェクトが名前付きタプル	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データフレームの列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
暗い赤色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
縦棒グラフをコーンズシルク色を用いて描画する	plt.bar(データ列x, データ列y, color='cornsilk')
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
データフレームを列で昇順に並べ直す	df.sort_values(by=column, ascending=True)
データフレームのカラムと列を消す	df.drop([column, column2], axis=1)
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームのリストカラムを小数点以下n桁で四捨五入する	df[aList].round(n)
黒い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='k')
option: 茶色を使う	color = 'brown'
リストの折れ線プロットを描いて、カラーコードを用いて色を指定する	plt.plot(データ列x, データ列y, color='#800080')
option: 読むシートの名前をnamesに設定する	sheet_name = names
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
option: 文字コードを文字コードtextに設定する	encoding = text
option: ブルーバイオレットにグラフの色を指定する	color = 'blueviolet'
配列を元に全要素が0の配列	np.zeros_like(aArray)
エクセルファイルファイルをデータフレームとして読む	pd.read_excel(filename)
イテラブルから双方向キューを作る	collections.deque(iterable)
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
アクアにヒストグラムの色を指定する	plt.hist(データ列, color='aqua')
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
列をキューに変換する	collections.deque(iterable)
nが1、もしくは2か調べる	n == 1 or n == 2
データフレームを2つの列で整列する	df.sort_values(by=['A', 'B'])
散布図の▽マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
両端キューをリストにする	list(deq)
数を２乗する	x ** 2
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
コロンで文字列を分割して、文字列リストに変換する	s.split(':')
三自然数のLCM	math.lcm(n, n2, n3)
行列の行ごとの最大値を見る	np.max(aArray, axis=1)
ミディアムシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ヒストグラムを貝殻色として描画する	plt.hist(データ列, color='seashell')
データフレームのカラムを100の位で四捨五入する	df[col].round(-2)
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
黒いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
最大値でデータを正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
option: ダークターコイズ色を用いる	color = 'darkturquoise'
グラフに水平方向の破線を付ける	plt.axhline(y=0, linestyle='dashed')
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
タプルの値だけ出力する	print(*aTuple)
データフレームを各列毎にグループ化して列の平均値を算出する	df.groupby(column)[column2].mean()
散布図を青紫色として描画する	plt.scatter(データ列x, データ列y, color='violet')
オプションで出力先をファイルにセットする	file = sys.open(filename, 'w')
横棒グラフを白色として描画する	plt.barh(データ列x, データ列y, color='white')
文字列が正規表現にマッチさせる	re.match(pattern, s)
データフレームのカラムの中にある日付データと日付データの合計を数える	df[col].isin([value, value2]).sum()
ミディアムアクアマリン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
集合から別のセットとの共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
文字列を変数にして、パラメータにする	z = sympy.Symbol(s)
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
要素が集合に含まれるか判定する	element in aSet
線グラフの色をブルーバイオレットに変更する	plt.plot(データ列x, データ列y, color='blueviolet')
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
散布図に星印を使う	plt.scatter(データ列x, データ列y, marker='*')
線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
折れ線グラフの印を星にする	plt.plot(データ列x, データ列y, marker='*')
日付時刻データが木曜日	aDatetime.weekday() == 3
option: インデックスを自動的な連番に指定する	index_col = None
散布図をミディアムシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
多次元データを特異値分解として濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
両端キューを空にする	deq.clear()
データフレームを列によって並べ、、更新する	df.sort_values(by=column, inplace=True)
option: サンディーブラウンに色を設定する	color = 'sandybrown'
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
データフレームの列をNaNも加えてダミー変数にする	pd.get_dummies(df[column], dummy_na=True)
xを文字列に変換してファイルに書き込む	f.write(str(x))
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
棒グラフをアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='aquamarine')
折れ線グラフの▼マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
nが無限に続くイテラブル	itertools.repeat(n)
実数はNaNか調べる	math.isnan(x)
option: 青緑を使用する	color = 'teal'
エラーなく文字列の接尾辞から部分文字列を除去する	s.removesuffix(sub)
紺にヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
ヒストグラムをバイオレット色で描画する	plt.hist(データ列, color='violet')
データ列を丸める	ds.round()
データフレームのカラムの正規分布に対する左右対称性を計算する	df[col].kurt()
散布図を黒い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
黒い右三角マーカーをデータ列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
イテラブルとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
文字列を全て大文字に変換する	s.upper()
暗い赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
x軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
折れ線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
散布図をシエナ色として描画する	plt.scatter(データ列x, データ列y, color='sienna')
マゼンタ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
折れ線グラフの色をコーンズシルクにする	plt.plot(データ列x, データ列y, color='cornsilk')
ミディアムアクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
散布図にダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
変数名を項目名として、辞書	dict(name=element)
散布図に黒いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
棒グラフを貝殻色を用いて描画する	plt.bar(データ列x, データ列y, color='seashell')
青色で文字列を出力する	print(f'\033[34m{value}\033[0m')
データ列が何日か見る	ds.dt.day
rangeの無限バージョン	itertools.count(start=n, step=step)
両端キューのn番目の要素	deq[n]
データフレームを複数の列によってソートし、、更新する	df.sort_values(by=column, inplace=True)
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
ダークレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
新しいヒストグラムベースの勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: サドルブラウン色を用いる	color = 'saddlebrown'
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
半透明の破線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
横棒グラフをロイヤルブルー色として描画する	plt.barh(データ列x, データ列y, color='royalblue')
文字列が漢字か判定する	('\u4E00' <= ch <= '\u9FD0')
ロージーブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='rosybrown')
データ列の文字列を欠損値にする	ds.replace(s, np.nan)
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
文字列を白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
データフレームのリストカラムを千の位で丸める	df[aList].round(-3)
要素をセットから取り除く	aSet.remove(element)
nが-9以上、9以下か調べる	-9 <= n <= 9
データフレームの列が文字列が含まれる行を取り出す	df[df[column].str.contains(s)]
最大値・最小値を用いて整数乱数を得る	random.randint(最小値, 最大値)
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
ファイルからフォルダ名を見る	os.path.dirname(filepath)
データフレームの未入力値が含まれる箇所を色付けする	df.style.highlight_null()
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
ファイルを追加できるように文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
まとめてデータフレームのカラムの値をValueMapで置き換える	df[col].replace(ValueMap)
降順にデータフレームを列によってによって整列する	df.sort_values(by=column, ascending=False)
線グラフの色を青にセットする	plt.plot(データ列x, データ列y, color='blue')
列によって破壊的にデータフレームを大きい順にソートする	df.sort_values(by=column, ascending=False, inplace=True)
rgbの三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
プロットを暗くする	sns.set(pallete='dark')
プロットを使う	import matplotlib.pyplot as plt
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
マッピングのエントリ数を見る	len(aDict)
縦棒グラフをピーチパフ色として描画する	plt.bar(データ列x, データ列y, color='peachpuff')
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
JSONLファイルをデータフレームとして読む	pd.read_json(filename, orient='records', lines=True)
現在は何日か知る	datetime.datetime.today().day
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームのn行目を破壊的にドロップする	df.drop(n, axis=0, inplace=True)
option: フォントの色をカーキにセットする	color = 'khaki'
option: 最大深さを設定する	maxdepth = n
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
nからn2を引く	n - n2
有理数をインポートする	import fractions
リストを箱ひげ図にする	plt.boxplot(データ列)
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
新しい文字列で正規表現にマッチした文字列を置換する	re.sub(pattern, newsub, s)
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
既存のファイルをUTF8として追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
nが5で割り切れるかどうか調べる	n % 5 == 0
折れ線グラフの下三角印を青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
nがn2未満、またはn3以上かどうか調べる	n < n2 or n >= n3
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
カウンタから最頻出な文字列の件数を計算する	aCounter.most_common()[1]
各グループ列ごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
データ列と配列の散布図に文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
グリッド線	plt.grid(alpha=0.5)
リストと数列についての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
行列の行ごとの最大	np.max(aArray, axis=1)
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
RGBとして折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームの指定された列を配列として抽出する	df[column].values
ヒストグラムを半透明化する	plt.hist(データ列x, alpha=0.5)
配列の度数分布図を描画する	plt.hist(データ列)
⊆かどうか調べる	aSet.issubset(aSet2)
辞書の項目名の値	aDict[key]
昇順にデータフレームを複数の列によってソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: 決定木の深さを制限する	maxdepth = n
リストの文字列が最初に見つかる場所	aList.index(element)
シスルにヒストグラムの色を設定する	plt.hist(データ列, color='thistle')
ピーチパフ色を用いてヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
折れ線グラフの右三角印を青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
プロット描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
句読点文字を使う	string.punctuation
ファイルパスのファイルサイズ	os.path.get_size(filepath)
オブジェクトは数値かどうか	isinstance(obj, (int,float))
option: 文字コードtextを用いる	encoding = text
ブラック色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
数値を太文字にする	f'\033[1m{value}\033[0m'
option: オリベドラブ色を用いる	color = 'olivedrab'
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
nではない	not n
データフレームのカラムの中にいくつNaNが含まれるかカウントする	df[col].isna().sum()
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
リストの要素を並べ変える	sorted(aList)
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
パターンを前もってコンパイルする	re.compile(pattern)
option: 青緑色を使う	color = 'teal'
行列の標準偏差を求める	np.std(aArray)
折れ線グラフの色をシエナに変更する	plt.plot(データ列x, データ列y, color='sienna')
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
二つのデータフレームを異なる列をキーにして左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
折れ線グラフをパールバイオレットレッド色を使って描画する	plt.plot(データ列x, データ列y, color='palevioletred')
散布図にクロス印を使う	plt.scatter(データ列x, データ列y, marker='x')
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
タイムスタンプデータにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
数を数で除算する	x / y
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
実数のn乗の実数剰余を算出する	pow(x, n, y)
列と列の重複を消す	df.drop_duplicates(subset=[column, column2])
マゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
データ列のNaNを最頻値にセットする	ds.fillna(ds.mode().iloc[0])
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
余弦の逆数	math.acos(x)
オプションで標準出力を使う	file = sys.stdout
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
リストのオブジェクトが最初に見つかるインデックスを見る	aList.index(element)
日付データは日付データより後ろかどうか調べる	aDate > aDate2
配列と配列について散布図をプロットして、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
分類木をグラフ化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
option: 黄色にグラフの色をセットする	color = 'yellow'
データフレームをカンマ区切りのファイルから読み込む	pd.read_csv(filename, sep=',')
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
散布図の△印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
データフレームを各列と列の組み合わせ毎にグループ化し、、分散を求める	df.groupby([column, column2], as_index=False).var()
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='gray')
ヒストグラムをビン数を設定して描画する	plt.hist(データ列, bins=区関数)
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
浮動小数点数を２乗する	x ** 2
正規分布によるパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
predicateFuncが真となるイテラブルの要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
JSONLファイルに小数点以下3桁までデータフレームを保存する	df.to_csv(filename, float_format='%.3f')
ミディアムスレートブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
標準出力を強制表示する	sys.stdout.flush()
xが1、もしくは2、もしくは3に等しいかどうか	x == 1 or x == 2 or x == 3
横棒グラフをフローラルホワイト色として描画する	plt.barh(データ列x, データ列y, color='floralwhite')
オブジェクトは整数	isinstance(obj, int)
本日が水曜日か確認する	datetime.datetime.today().weekday() == 2
グリッド線	plt.grid(linewidth=3.0)
浮動小数点数をn乗する	x ** n
option: オーキッドにグラフの色を設定する	color = 'orchid'
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
文字列を紫色にする	f'\033[35m{value}\033[0m'
タプルのn番目からn2番目まで	aTuple[n:n2]
辞書に辞書の項目を更新する	aDict.update(aDict2)
ベージュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
データフレームを各列と列の組み合わせ毎にグループ化して、個数を計算する	df.groupby([column, column2], as_index=False).count()
赤い一点鎖線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
散布図を黒い左三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='<', c='k')
棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
option: 左三角印を加える	marker = '<'
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
option: 線の幅を設定する	linewidth = 3.0
勾配ブースティング分類木を準備する	model = sklearn.ensemble.GradientBoostingClassifier()
行列の列ごとの最大	np.max(aArray, axis=0)
オブジェクトがバイト列か調べる	isinstance(obj, bytes)
マルーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
リストと配列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフをゲインズボロ色を用いて描画する	plt.plot(データ列x, データ列y, color='gainsboro')
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
ライトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightblue')
nをn2で割った余り	n % n2
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
rgbの右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
タイムスタンプデータにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
イテラブルの要素をセットに追加する	aSet.update(iterable)
線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
今日の年数	datetime.datetime.today().year
option: 色を半透明にする	alpha = 0.5
option: フォントの色をライトスカイブルーに設定する	color = 'lightskyblue'
オブジェクトはリスト	isinstance(obj, list)
本日を文字列でフォーマットして文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
タプルの項目名を要素に設定する	aDict[key] = element
データフレームをグループ化し、各列に対し最大値を求める	df.groupby(column)[column2].max()
データフレームのモード	df.mode()
ダークマゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
要素∈集合	element in aSet
縦棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
配列とリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ホットピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
折れ線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
列'A'と列'B'をキーとして2つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
散布図に赤い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
散布図のクロス印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ヒストグラムの色をシエナに指定する	plt.hist(データ列, color='sienna')
数列の推移を破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
テンプレートをargsを引数としてフォーマットする	formatText.format(*args)
option: グラフの色をダークスレートブルーにセットする	color = 'darkslateblue'
ミディアムアクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
文字列の後ろの文字を見る	s[-1]
option: ダークゴールデンロッドを用いる	color = 'darkgoldenrod'
有理数の分母	q.denominator
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
JSONファイルのfをデータに変換する	json.load(fin)
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
データ列の欠損値を最小値で補う	ds.fillna(ds.min())
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
辞書を改行付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
行列の要素数	aArray.size
折れ線グラフに大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
日付データの年数	aDate.year
文字列中の平仮名を片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
オブジェクトが数値か調べる	isinstance(obj, (int,float))
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データフレームを各列と列の組み合わせ毎にグループ分けして合計を計算する	df.groupby([column, column2], as_index=False).sum()
耐火レンガにヒストグラムの色を設定する	plt.hist(データ列, color='firebrick')
文字コードに対応する文字を使う	chr(unicode)
option: グラフの線の種類を実線に設定する	linestyle = 'solid'
リネン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
行列の列ごとの最大値	np.max(aArray, axis=0)
データフレームを複数の列でソートする	df.sort_values(by=column)
option: 色をシルバーに設定する	color = 'silver'
ミディアムターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
線形モデルの回帰変数	model.coef_
ヒストグラムの色をパープルにする	plt.hist(データ列, color='purple')
JSONフォーマットのファイル入力を辞書に変換する	json.load(fin)
データフレームの欠損値がある行を削除する	df.dropna()
文字列は全て印字できるかどうか調べる	s.isprintable()
実数の床	math.floor(x)
ダークオレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
変数をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
numpyを入れる	import numpy as np
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
データフレームを'A'列で降順に破壊的に並べ直す	df.sort_values(by='A', ascending=False, inplace=True)
データ列間の平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
日付時刻データの日を使う	aDatetime.day
散布図をローングリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
リストとリストの散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
文字を文字コードに変換する	ord(ch)
英字の文字列	string.ascii_letters
データ列の折れ線グラフを大バツ印を使って描画する	plt.plot(データ列x, データ列y, marker='X')
閾値として二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
折れ線グラフのマーカーを三角印にする	plt.plot(データ列x, データ列y, marker='^')
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
散布図に赤い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='r')
リストからオブジェクトを取り除く	aList.remove(element)
集合の全ての要素が別のセットに含まれる	aSet.issubset(aSet2)
リストの先頭を取り除く	aList[1:]
文字列の末尾から部分文字列を見つける	s.rfind(sub)
ラジアンの角度を求める	math.degrees(x)
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
十六進数字を全て使う	string.hexdigits
淡い茶色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
コマンドの第二引数を知る	sys.argv[1]
柱状図を描画し、ビン数を設定する	plt.hist(データ列, bins=区関数)
カラム名リストをデータ型でフィルタする	df.select_dtypes(型).columns
ニューラルネットでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
データフレームの各列間の相関係数	df.corr()
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: ダークスレートブルーを用いる	color = 'darkslateblue'
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
濃いシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
淡いピンク色にヒストグラムの色を設定する	plt.hist(データ列, color='lightpink')
ファイルを文字列の示す文字コードとして書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
nを十六進数文字列にする	hex(n)[2:]
リストを横棒プロットにする	plt.barh(ラベル列, データ列)
データフレームを列によってソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
プロットの補助目盛りを有効にする	plt.minorticks_on()
ロードされたモジュールの一覧	sys.modules
データフレームのリスト列の分散を求める	df[aList].var()
既存のファイルをUTF8を用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
nが5の倍数かどうか調べる	n % 5 == 0
タプルのオブジェクトが最初に見つかるインデックスを使う	aTuple.index(element)
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
文字列内にひとつでも小文字が含まれる	any(c.islower() for c in s)
データフレームのリストカラムの中にいくつ未入力値があるかカウントする	df[aList].isna().sum()
PLSとして回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
nをn2で割ったモジュロを求める	n % n2
ヒストグラムの色をダークレッドに設定する	plt.hist(データ列, color='darkred')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
箱ひげ図を描き、、平均線を加える	plt.boxplot(データ列, meanline=True)
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
非数値データを連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
スクリプトファイルのパス	os.path.abspath(__file__)
インプレイスでデータフレームから重複を削除する	df.drop_duplicates(inplace=True)
配列の相関係数と有意確率を求める	scipy.stats.pearsonr(データ列, データ列2)
option: ホットピンク色を用いる	color = 'hotpink'
印字可能な文字列	ascii(x)
散布図の下三角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
ライトスカイブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
Pandasでフォーマットfmtで文字列をタイムスタンプ型に変換する	pd.to_datetime(s, format=fmt)
2次元リストをflattenする	sum(aList)
目盛線	plt.grid(alpha=0.5)
カラムを百の位で丸めて整数型にする	ds.round(-2).astype(int)
データフレームを'A'列によってグループ化する	df.groupby('A')
数値を黄色でプリントする	print(f'\033[33m{value}\033[0m')
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
列を中央値で分割する	pd.qcut(ds, 2)
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
日付データと日付データの時間差は何分か知る	(aDate - aDate2).total_seconds()//60
データ列が何曜日か確認する	ds.dt.weekday_name
option: オリベドラブ色を使う	color = 'olivedrab'
日付データは何年か知る	aDate.year
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
option: マーカーをダイアモンドに変更する	marker = 'D'
option: 箱髭図に平均を加える	showmeans = False
符号付きで整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
ペルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
option: 色をシャルトリューズに変更する	color = 'chartreuse'
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
線グラフをロージーブラウン色として描画する	plt.plot(データ列x, データ列y, color='rosybrown')
リストと配列について散布図をプロットして、四角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
ヒストグラムをフォレストグリーン色として描画する	plt.hist(データ列, color='forestgreen')
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
サーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
0から始まる無限な数列	itertools.count()
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
データ列の中にある文字列の個数を数える	ds.isin([value]).sum()
n個分左に双方向キューの順を回転させる	deq.rotate(-n)
空文字を使う	''
データフレームを複数の列を用いてソートする	df.sort_values(by=column)
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
ハニーデュー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
文字列の左端が部分文字列かどうか調べる	s.startswith(sub)
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: 読み込みモードに指定する	mode = 'r'
クラスが名前付きタプルか調べる	issubclass(C, tuple)
線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
JSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
枠なしの凡例を付ける	plt.legend(frameon=False)
option: どの列もインデックスにしない	index_col = None
ライトスレイグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
option: フォントの色をレベッカパープルに設定する	color = 'rebeccapurple'
データフレームの指定された列をリストにする	df[column].values.tolist()
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
ベクトルの行列式	np.linalg.det(aArray)
option: オリベドラブにグラフの色を指定する	color = 'olivedrab'
文字列中に部分文字列が含まれるか調べる	sub in s
折れ線グラフをタン色として描画する	plt.plot(データ列x, データ列y, color='tan')
option: パールバイオレットレッドにグラフの色をセットする	color = 'palevioletred'
option: どのカラムもインデックスに設定しない	index_col = None
エクセルファイルファイルから全シートを読み込む	pd.read_excel(filename, sheet_name=None)
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
文字列の右側から範囲を指定して部分文字列を探す	s.find(sub, start, end)
option: ライトゴールドロディイエローを用いる	color = 'lightgoldenrodyellow'
データフレームの各グループごとの合計	df.groupby(column).sum()
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
整数nの八進文字列	oct(n)[2:]
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
文字列がいつまでも繰り返すイテラブル	itertools.repeat(element)
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
アルファベットの大文字を全部使う	string.ascii_uppercase
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
ライトシアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
ヒストグラムをスラグレー色を使って描画する	plt.hist(データ列, color='slategray')
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
option: ゴーストホワイトを使う	color = 'ghostwhite'
グラフの補足の位置を(x,y)に設定する	plt.legend(loc=(x, y))
option: グラフの色をデピンクに指定する	color = 'deeppink'
日付データが日付データより後ろか確認する	aDate > aDate2
作画で用いるカラーパレットを指定する	sns.set(pallete=パレット名)
ダークグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkgrey')
グリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
データフレームの値は欠損値かどうか	df.isna()
整数が正	x > 0
データフレームを列の値によってグループ分けする	df.groupby(column)
ミントクリーム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
折れ線グラフの色をシーグリーンに指定する	plt.plot(データ列x, データ列y, color='seagreen')
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームの列が文字列で終わるデータを抽出する	df[df[column].str.endswith(s)]
データ列の折れ線グラフをプロットして、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
折れ線グラフの色をプラムに変更する	plt.plot(データ列x, データ列y, color='plum')
集合からエラーなく要素を取り除く	aSet.discard(element)
ファイルパスをバイナリモードで開く]	open(filepath, mode='rb')
イテラブルとリストの散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
option: 三角マーカーを使う	marker = '^'
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフの色をカデットブルーに指定する	plt.plot(データ列x, データ列y, color='cadetblue')
日付データを文字列を使ってフォーマットする	"aDate.strftime(""%d/%m/%y"")"
文字列を部分文字列で分けたときの前半の文字列を取り出す	s.partition(sub)[0]
option: グラフの色をミッドナイトブルーに変更する	color = 'midnightblue'
要素が全て初期値のベクトル	np.full(要素数, 初期値, dtype=np.int)
実数の自然対数を計算する	math.log(x)
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
両端キューの末尾にイテラブルの各値を入れる	deq.extend(iterable)
折れ線グラフをダークスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
option: 色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
データフレームの中にいくつNaNが含まれるか数える	df.isna().sum()
列を文字列リストに変換してカンマで結合する	','.join(map(str, iterable))
実数の自然対数	math.log(x)
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読む	pd.read_csv(filename, index_col=n)
データフレームの列がxより多くx2より少ないデータを取り出す	df[(x < df[column]) & (df[column] < x2)]
データフレームを配列にする	df.values
イテラブルをヒストグラムにする	plt.hist(データ列)
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
ライトグリーンにヒストグラムの色をする	plt.hist(データ列, color='lightgreen')
rgbの大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムの色をダークターコイズにする	plt.hist(データ列, color='darkturquoise')
配列と配列についての散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
複数行対応として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
イエローグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
option: ペルー色を使用する	color = 'peru'
全要素を1で初期化した行列を作る	np.ones(要素数, dtype=np.int)
カウンタのユニオンを求める	aCounter | aCounter2
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategrey')
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
データフレームを関数の値によってグループ化する	df.groupby(関数)
option: マーカーの色を変更する	markerfacecolor = '#800080'
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
オレンジレッドにヒストグラムの色を設定する	plt.hist(データ列, color='orangered')
データフレームのリストカラムのどの値が頻出か調べる	df[aList].mode()
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
小数点数を切り上げて整数に変換する	math.ceil(x)
文字列を正規表現で分割する	re.split(pattern, s)
本日の曜日を整数で使う	datetime.datetime.today().weekday()
nとn2のビット和	n | n2
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
データフレームから重複を残さず取り除く	df.drop_duplicates(keep=False)
書き込み用にSJISでファイルを開く]	open(filepath, mode='w', encoding='shift_jis')
日付データにn時間分、加える	aDate + datetime.timedelta(hours=n)
黒いポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
整数nを2進文字列に変換する	bin(n)[2:]
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
スタックのstart〜endの部分値	collections.deque(itertools.islice(deq, start, end))
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
逆順の両端キュー	reversed(deq)
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
箱髭図を描いて、平均線を加える	plt.boxplot(データ列, meanline=True)
線グラフを青い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
縦棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
シエナ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
乱数の行列	np.random.random((行数, 列数))
折れ線グラフの色をダークスラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategray')
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
オブジェクトの属性の値を設定する	setattr(obj, プロパティ名, 値)
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
パールゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
空のチェーンマップ	collections.ChainMap()
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
データ列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
正規分布に基づく確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
オリベドラブ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
データ列の移り変わりを折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
xが真かどうか確認する	bool(x)
浮動小数点数が負の数か確認する	x < 0
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
既存のファイルをUTF8で追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
option: ゴールデンロッド色を使用する	color = 'goldenrod'
印字できる文字を全部使う	string.printable
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
ヒストグラムの色を貝殻に変更する	plt.hist(データ列, color='seashell')
ドジャーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
option: ゴールドを使う	color = 'gold'
'A'列と'B'列によって小さい順に破壊的にデータフレームを並べる	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
フローラルホワイト色でヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
マッピングに項目名が存在するか	key in aDict
データ列を柱状図にする	plt.hist(データ列)
ライトスレイグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
ケンドールの相関係数を算出する	scipy.stats.kendalltau(データ列, データ列2)
スノー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
データフレームからランダムにn行を重複ありでサンプリングする	df.sample(n, replace=True)
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
rgbの三角マーカーをリストとデータ列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
nにn2を足して代入する	n += n2
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
シーケンスを多重集合にする	collections.Counter(iterable)
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
文字列の中のケースを無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
配列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
実数の３乗	x ** 3
データフレームのカラムの文字列をNaNに変換する	df[col].replace(s, np.nan)
option: マーカーを三角に指定する	marker = '^'
文字列を特殊文字も含め小文字に変換する	s.casefold()
option: ホワイトスモーク色を使用する	color = 'whitesmoke'
データフレームがどれだけ、分散しているか見る	df.var()
ディレクトリを使う	os.getcwd()
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
エポック秒から日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
モードでデータフレームの列の欠損値を埋める	df[col].fillna(df[col].mode().iloc[0])
2つのデータフレームを縦方向に合体させる	pd.concat([df, df2], axis=0)
文字列が全て大文字かテストする	s.isupper()
配列の行ごとの分散を求める	np.var(aArray, axis=1)
インディゴ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
データ列の中にいくつが存在するか求める	ds.isin([value]).sum()
シーケンスを文字列リストに変換して空白を用いて連結する	' '.join(map(str, iterable))
部分文字列で文字列が終了するかどうか調べる	s.endswith(sub)
グラフを描く準備をする	import matplotlib.pyplot as plt
列名リストによって破壊的にデータフレームを昇順に並べる	df.sort_values(by=column, ascending=True, inplace=True)
データを四分位点として標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
列'A'と列'B'をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
rgbの右三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
縦軸の目盛を対数に変更する	plt.yscale('log')
折れ線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
配列を一次元化する	aArray.flatten()
option: フォントの色をダークグレーに設定する	color = 'darkgray'
プラム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
サーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
n番目のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=n)
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
横棒グラフをパールゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
マッピングのキーの一覧	aDict.keys()
単位行列を作る	np.eye(行数, 列数)
option: ライトグレー色を使う	color = 'lightgrey'
ミスティローズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
柱状図を描画して区間数を設定する	plt.hist(データ列, bins=区関数)
双方向キューのn番目を使う	deq[n]
整数の並べ方の総数を計算する	math.perm(n)
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
カウンタ間で積集合を求める	aCounter & aCounter2
文字列は数値	s.isnumeric()
データフレームを列を用いてソートする	df.sort_values(by=column)
折れ線グラフの左三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
組のn番目以降の部分を取り出す	aTuple[n:]
マルーンにヒストグラムの色を設定する	plt.hist(データ列, color='maroon')
縦棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
リストを等量で分割数nとしてビン分割する	pd.qcut(aList, n)
option: アクアマリンにグラフの色を設定する	color = 'aquamarine'
ゴールデンロッドにヒストグラムの色を変更する	plt.hist(データ列, color='goldenrod')
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
２数の最大値	max(x, y)
ヒストグラムをビスク色として描画する	plt.hist(データ列, color='bisque')
データ列をカテゴリデータに変換する	ds.astype(object)
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
両端キュー中の要素のインデックス	deq.index(element)
ファイルをオープンする]	open(filepath)
横棒グラフを紺色を使って描画する	plt.barh(データ列x, データ列y, color='darkblue')
データフレームをグループ化しそれぞれの列に対し最小値を計算する	df.groupby(column)[column2].min()
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
グラフの題名を変更する	plt.title('グラフの名称')
option: グラフの色をスラグレーに設定する	color = 'slategray'
空のリストを作る	[]
ファイルパスをバイナリ書き込みモードで開く]	open(filepath, mode='wb')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
option: ホワイトスモークを使う	color = 'whitesmoke'
n進数文字列をbytesizeバイトのバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
ヒストグラムをサンディーブラウン色として描画する	plt.hist(データ列, color='sandybrown')
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
リストとリストの散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図をマルーン色として描画する	plt.scatter(データ列x, データ列y, color='maroon')
文字列全体が正規表現に複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームを'A'列によってによって大きい順に並べる	df.sort_values(by='A', ascending=False)
青い一点鎖線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
正規分布として乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
数式の部分分数化する	sympy.apart(e)
ファイルパスをバイナリ用にオープンして]、fとする	f = open(filepath, mode='rb')
横棒グラフを描画して、バーの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームのリストカラムのNaNをxで埋める	df[aList].fillna(x)
リストとデータ列についての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
数列とデータ列についての散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
10を底とする対数を求める	math.log10(x)
option: グラフの色をシエナに指定する	color = 'sienna'
散布図を▼印を使って描画する	plt.scatter(データ列x, データ列y, marker='v')
折れ線グラフをブラック色を使って描画する	plt.plot(データ列x, データ列y, color='black')
破壊的に複数の列で昇順にデータフレームをソートする	df.sort_values(by=column, ascending=True, inplace=True)
配列とリストについての散布図に赤い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
option: グラフの種類を点線に指定する	linestyle = 'dotted'
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
数字を全部使う	string.digits
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
ヒストグラムの色をフローラルホワイトにする	plt.hist(データ列, color='floralwhite')
表データを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
predicateFuncが真とならないイテラブルの部分を求める	itertools.dropwhile(predicateFunc, iterable)
option: アリスブルー色を使う	color = 'aliceblue'
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
列のpercentパーセンタイル	ds.quantile(percent/100)
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
バイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
データフレームのn行目をドロップして、インプレイスする	df.drop(n, axis=0, inplace=True)
x,y,zをそれぞれn,n2,n3に変更する	x, y, z = n, n2, n3
プロット中の(x,y)の位置に補足を表示する	plt.legend(loc=(x, y))
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
文字列はタイトルケース	s.istitle()
データフレームのカラムの日を使う	df[col].dt.day
カラムのどの値が頻出か確認する	ds.mode()
浮動小数点数の三乗	x ** 3
項目名が辞書上で未定義か調べる	key not in aDict
グレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
コーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
リストにリストを追加する	aList.extend(aList2)
ファイルパスをSJISとして書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
散布図をフォレストグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
ヒストグラムを描画して、半透明化にする	plt.hist(データ列x, alpha=0.5)
散布図の右三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
線グラフを赤い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームの列の欠損値を平均値に変更する	df[col].fillna(df[col].mean())
オールドレース色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
文字列の開始位置以降が部分文字列で開始するか調べる	s.startswith(sub, start)
日付時刻データをn分前にする	aDatetime - datetime.timedelta(minutes=n)
正規分布にしたがってランダムにデータ列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
折れ線グラフの四角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
option: ミディアムオーキッド色を用いる	color = 'mediumorchid'
サーモン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
プログラムの実行を正しく終了する	sys.exit(0)
散布図のバツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
nがn2と等しいかどうか	n == n2
アンティークホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
部分文字列	sub in s
要素ひとつのりスト	[element]
文字列内にひとつでも数字が含まれる	any(c.isdigit() for c in s)
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
option: ダークマゼンタを使う	color = 'darkmagenta'
散布図をミントクリーム色として描画する	plt.scatter(データ列x, データ列y, color='mintcream')
縦棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
柱状図のビン数を設定する	plt.hist(データ列, bins=区関数)
rgbの下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームのカラムのNaNを第二四分位数にする	df[col].fillna(df[col].median())
文字列を最後の部分文字列で分割した時の後半の文字列を取り出す	s.rpartition(sub)[-1]
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
データフレームのリストカラムの未入力値を平均値に設定する	df[aList].fillna(df[aList].mean())
タプルをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
降順に列名リストででデータフレームをソートする	df.sort_values(by=column, ascending=False)
エンコーディングを確認する	sys.getdefaultencoding()
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
インデント幅nで、タプルをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
散布図の右三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
ペールグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
折れ線グラフに青い▲印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
線グラフをローングリーン色として描画する	plt.plot(データ列x, データ列y, color='lawngreen')
散布図に赤い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
データフレームのリストカラムの中にいくつ文字列があるか求める	df[aList].isin([value]).sum()
棒グラフをブラック色として描画する	plt.bar(データ列x, データ列y, color='black')
現在が火曜日か確認する	datetime.datetime.today().weekday() == 1
項目名が辞書にあるか調べる	key not in aDict
option: トマト色を用いる	color = 'tomato'
ゼロ埋めされたブール型の配列を作成する	np.zeros(要素数, dtype=np.int32)
線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
2つのデータフレームを横向きにマージする	pd.merge(df, df2)
縦棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
上限nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
二つの文字列をスラッシュで区切って出力する	print(value, value2, sep='/')
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ハニーデュー色でヒストグラムを描画する	plt.hist(データ列, color='honeydew')
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
nがn2よりも小さいか調べる	n < n2
option: グレーを使う	color = 'grey'
ベクトルと同じ大きさの空の配列を作成する	np.empty_like(aArray)
ファイルパスから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
日付データが木曜日かテストする	aDate.weekday() == 3
ベクトルの計算をする	import numpy as np
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
実数の逆余弦を求める	math.acos(x)
各列毎にデータフレームをグループ化し、列の合計を算出する	df.groupby(column)[column2].sum()
option: グラフの色をダークグレーに設定する	color = 'darkgray'
辞書をコピーする	aDict.copy()
ブラック色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
折れ線グラフの下三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
列によってデータフレームをソートして、新しいインデックスを振り直す	df.sort_values(columns).reset_index()
学習データのバージョン	version = 'wcce2022-0.1'
散布図のマーカーの大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
year年の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
折れ線グラフのクロスマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
項目名が辞書上で定義済み	key in aDict
縦軸の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
データフレームを散布図として可視化する	sns.scatterplot(data=df, x='列名', y='列名')
折れ線グラフの色をスラグレーにセットする	plt.plot(データ列x, データ列y, color='slategrey')
データフレームのリスト列を1000の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
タプルをイミュータブルな集合に変換する	frozenset(iterable)
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
シスル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
散布図の△印の大きさを変える	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
データフレームを二つの列の値ごとにグループ分けして、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフを真紅色を用いて描画する	plt.plot(データ列x, データ列y, color='crimson')
ハニーデュー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
オーキッド色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
nがn2の倍数か	n % n2 == 0
日付時刻データにn日を加算する	aDatetime + datetime.timedelta(days=n)
黄色い線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
option: フォントの色をライムグリーンに変更する	color = 'limegreen'
日付データが火曜日か	aDate.weekday() == 1
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
プロットのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
配列と同じ大きさの空の配列を作る	np.empty_like(aArray)
ヒストグラムの色をダークオレンジに指定する	plt.hist(データ列, color='darkorange')
ひとつでも非英字が文字列中に含まれるかどうか調べる	any(not c.isalpha() for c in s)
コマンド引数のリスト	sys.argv[1:]
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
ライトゴールドロディイエロー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
青いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
リストをシャッフルする	random.shuffle(aList)
カウンタを集合に変換する	set(aCounter)
日付データが日付データと同時か調べる	aDate == aDate2
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
データフレームを列名リストの値によってグループ化し、記述統計量を求める	df.groupby(columns).describe()
黄緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
凡例をベストな位置に表示する	plt.legend(loc='best')
日付時刻データの秒数	aDatetime.second
文字列が平仮名	('ぁ' <= ch <= 'ん')
辞書上でキーがまだ定義されていないか調べる	key not in aDict
文字列が文字列リストのいづれか調べる	s in aStringList
option: グラフの色を茶色に設定する	color = 'brown'
xを整数にする	int(x)
データ列を箱ひげ図にする	plt.boxplot(データ列)
数列の散らばりを作図する	plt.scatter(データ列x, データ列y)
カーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
整数nの2進リテラル	bin(n)
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
ミディアムバイオレットレッド色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
文字列TSVファイルからカンマ区切りのファイルをn番目のカラムをインデックスにして読む	pd.read_csv(filename, index_col=n)
赤い点線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ふたつの関係が真部分集合	aSet < aSet2
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
option: グレーにフォントの色を設定する	color = 'gray'
ヒストグラムの色をゴーストホワイトにする	plt.hist(データ列, color='ghostwhite')
ペールグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
option: グラフの色をホワイトスモークに指定する	color = 'whitesmoke'
カウンタの上位を列挙する	aCounter.most_common(k)
最大長nの双方向キューを新規生成する	collections.deque(maxlen=n)
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
nが一桁の数か調べる	-9 <= n <= 9
タイムスタンプデータと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
データフレームの値が未入力値かどうか	df.isna()
縦棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
グラフの描画を綺麗にする	import seaborn as sns
日付データからn秒分減算する	aDate - datetime.timedelta(seconds=n)
データ列の変遷を赤い一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
文字列の後ろからタブを取り除く	s.rstrip('\t')
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
散布図をクロス印で描画する	plt.scatter(データ列x, データ列y, marker='x')
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームのカラムは何曜日か見る	df[col].dt.weekday_name
ヒストグラムをダークオレンジ色として描画する	plt.hist(データ列, color='darkorange')
線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: 読むシートの名前をnamesにセットする	sheet_name = names
作画に使うフォントを指定する	sns.set(font=フォント名)
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
データ列のユニークな要素数	ds.nunique()
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
option: グラフの色をシルバーに設定する	color = 'silver'
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
折れ線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
ダークサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
ヒストグラムの色をパープルに変更する	plt.hist(データ列, color='purple')
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
２点間のユークリッド距離	math.dist(point, point2)
文字列がリストの要素か	element in aList
エクセルファイルファイルのn番目のシートを読む	pd.read_excel(filename, sheet_name=n)
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
ペアリストpairsからカウンタを構築する	collections.Counter(dict(pairs))
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgray')
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
option: 星マーカーを加える	marker = '*'
シーケンスから重複なくn個選ぶ	random.sample(iterable, k=n)
データフレームの全カラムの相関をプロット化する	sns.pairplot(df)
メディアンでデータフレームのリスト列の未入力値を埋める	df[aList].fillna(df[aList].median())
スーパーセットもしくは等しいか判定する	aSet > aSet2
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
データフレームのカラムが何時か確認する	df[col].dt.hour
配列とリストについての散布図にポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.')
option: クリムゾン色を使う	color = 'crimson'
組の要素を小さい方からソートする	sorted(aTuple, reverse=True)
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームの列の欠損値を直前の値に設定する	df[col].fillna(method='ffill')
データフレームのカラム名一覧で指定されたカラムを消す	df.drop(columns, axis=1)
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
ミスティローズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
折れ線グラフの大バツ印を黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
ヒストグラムの色をゴールドに変更する	plt.hist(データ列, color='gold')
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
浮動小数点数を小数点以下で四捨五入する	round(x, n)
インデント付きでマッピングを文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
ふたつの集合の和集合	aSet.union(aSet2)
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
小数点数の小数部	math.modf(x)[0]
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
後の行の値でデータ列の欠損値を埋める	ds.fillna(method='bfill')
横方向に二つのデータフレームを連結する	pd.concat([df, df2], axis=1)
オブジェクトからフィールドを消す	delattr(obj, プロパティ名)
線グラフの色をミディアムターコイズに指定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
ホットピンク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
回帰分析をMLPで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
縦棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
要素が全て1の配列	np.ones(要素数, dtype=np.int)
リストを等量で分割数nで分割する	pd.qcut(aList, n)
n個分キューの要素を左にローテンションする	deq.rotate(-n)
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
オブジェクトはリストクラス	isinstance(obj, list)
整数nは配列のどれかかどうか確認する	n in aArray
option: 整数型を使う	dtype = np.int
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
ヒストグラムをグリーン色を用いて描画する	plt.hist(データ列, color='green')
黒いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
ヒストグラムをスプリンググリーン色を用いて描画する	plt.hist(データ列, color='springgreen')
ヒストグラムの色をオレンジに変更する	plt.hist(データ列, color='orange')
データ列の散布を可視化する	plt.scatter(データ列x, データ列y)
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
配列が何のデータ型か調べる	aArray.dtype()
バリーウッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
格子をグラフから消す	plt.grid(False)
option: レベッカパープル色を使う	color = 'rebeccapurple'
行列は何のデータ型か調べる	aArray.dtype()
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
縦棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgray')
シャルトリューズ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
nが正の整数か調べる	n > 0
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
option: 下三角マーカーを使う	marker = 'v'
双方向キューの末尾	deq[-1]
文字列の中のASCII限定として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
データフレームの列の欠損値を中央値に設定する	df[col].fillna(df[col].median())
実数を実数で割った剰余	math.remainder(x, x2)
等差数列から乱数を生成する	random.randrange(start, end, step)
8進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
縦棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
散布図をイエローグリーン色として描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
option: パールバイオレットレッドにフォントの色を設定する	color = 'palevioletred'
データフレームを二つの列の値でグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
横棒グラフを濃いシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
集合から別のセットの要素を除去する	aSet.difference_update(aSet2)
nはn2かどうか調べる	n == n2
オブジェクトをユーザ向けの文字列に変換する	str(obj)
タプルのキーの一覧	aDict.keys()
文字列の最後から部分文字列を取り除く	s.rstrip(sub)
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
数列とリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
集合をリストにする	list(aSet)
最大値・最小値の範囲を用いて一様な乱数	random.uniform(最小値, 最大値)
実数を整数にする	int(x)
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
少ない順にカウンタを列挙する	aCounter.most_common()[::-1]
散布図をネイビー色として描画する	plt.scatter(データ列x, データ列y, color='navy')
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
データフレームから列を二つ選択する	df[[column, column2]]
シーケンスを文字列リストに変換して、空白によって連結する	' '.join(map(str, iterable))
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
浮動小数点数の小数点を丸める	round(x)
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
xが一桁の正の数か	0 <= x <= 9
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
ヒストグラムをゲインズボロ色として描画する	plt.hist(データ列, color='gainsboro')
上限nの双方向キューをシーケンスから作る	collections.deque(iterable, maxlen=n)
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データフレームを散布図で図示して、カテゴリごとに色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
アルファベットから一つランダムに選ぶ	random.choice(string.ascii_uppercase)
ファイルをオープンして]、追加ストリームを見る	open(filepath, mode='a')
データフレームの列の各データ値の出現数	df[col].value_counts()
再帰の最大回数を上げる	sys.setrecursionlimit(1000000)
疑似乱数平均と標準偏差からを生成する	random.normalvariate(mu=0.5, sigma=0.2)
折れ線プロットを描いて、色をカラーコードでセットする	plt.plot(データ列x, データ列y, color='#800080')
ダイアモンドマーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
タイムスタンプデータが何時か知る	aDatetime.hour
実行結果を黄色でプリントする	print(f'\033[33m{value}\033[0m')
グラフの描画で暗くカラーパレットを用いる	sns.set(pallete='dark')
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
空行を表示する	print()
縦棒グラフの色を真紅にする	plt.bar(データ列x, データ列y, color='crimson')
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
二進対数	math.log2(x)
破壊的に'A'列と'B'列によってデータフレームを降順に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
option: ダークオーキッドを用いる	color = 'darkorchid'
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
棒グラフをミッドナイトブルー色として描画する	plt.bar(データ列x, データ列y, color='midnightblue')
折れ線グラフの印を大バツにする	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムの色をオレンジに指定する	plt.hist(データ列, color='orange')
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
棒グラフをライトスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
今日が木曜日か調べる	datetime.datetime.today().weekday() == 3
配列の最小値を使う	np.min(aArray)
縦棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
nを十六進表現に変換する	hex(n)
シエナ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
分子と分母から分数を作る	fractions.Fraction(分子, 分母)
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
折れ線グラフの色をビスクに指定する	plt.plot(データ列x, データ列y, color='bisque')
折れ線グラフの△マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
やわらかい青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
コーラルにヒストグラムの色を指定する	plt.hist(データ列, color='coral')
浮動小数点数に数を加える	x + y
オブジェクトは集合型か調べる	isinstance(obj, set)
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
本日が何日か知る	datetime.datetime.today().day
棒グラフをライトグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgray')
アクア色として散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
文字列が数字	s.isdigit()
option: ペルーを使用する	color = 'peru'
散布図を赤い丸マーカーで描く	plt.plot(データ列x, データ列y, marker='o', c='r')
辞書のキー一覧	list(aDict)
小麦色色を用いてヒストグラムを描画する	plt.hist(データ列, color='wheat')
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
多次元尺度構成法で多次元データを淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
行列をリストから作る	np.array(aList)
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
文字列の開始位置以降に部分文字列が含まれる	s.find(sub, start) != -1
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
2次元リストの転置行列	[list(x) for x in list(zip(*aList))]
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
縦棒グラフをサンディーブラウン色として描画する	plt.bar(データ列x, データ列y, color='sandybrown')
ファイルが存在しないかどうか	not os.path.exists(filepath)
二つの集合に共通する要素からなる集合	aSet.intersection(aSet2)
option: ロージーブラウンを用いる	color = 'rosybrown'
数式の変数に数値を代入する	e.subs(z, e2)
データフレームのリスト列の第二四分位数	df[aList].median()
棒グラフの色を指定する	plt.bar(ラベル列, データ列, color=rgb)
折れ線グラフの色をマゼンタに指定する	plt.plot(データ列x, データ列y, color='magenta')
データフレームを昇順に'A'列と'B'列によって破壊的に整列する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
option: ダークオリーブグリーンを使用する	color = 'darkolivegreen'
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
データフレームをJSONLファイルにBOMを付けて保存する	df.to_csv(filename, encoding='utf_8_sig')
変数を表示する	print(value)
リストをビン数nでビニングする	pd.cut(aList, n)
データフレームの複数のカラムを並べて箱ひげ図として作図する	plt.boxplot([df['カラム'], df['カラム']])
縦棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
nを十六進文字列に変換する	hex(n)[2:]
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
文字を文字コードにする	ord(ch)
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
整数nのビット長を確認する	n.bit_length()
option: グラフの色を黄色に設定する	color = 'yellow'
暗い赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
データフレームの列の欠損値を最小値で埋める	df[col].fillna(df[col].min())
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
n割るn2の切り上げ	(n + n2 - 1) // n2
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
折れ線グラフに上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
ダークレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
配列とリストの散布図に赤い▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
カウンタを多い順に列挙する	aCounter.most_common()
nを切り捨てながらn2分の一にする	n //= n2
RANSACで回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
パープル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
二つの数列を箱ひげ図にする	plt.boxplot([データ列, データ列])
option: グラフの色をシエナに変更する	color = 'sienna'
出力ストリームにxを文字列に変換して書き込む	f.write(str(x))
option: 読む行番号をnamesで指定する	usecols = names
文字列内にアスキー文字が含まれるか	any(c.isascii() for c in s)
データフレームから型リストデータ型の列だけ抽出する	df.select_dtypes(include=typeList)
日付データを文字列を用いてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
nマイナスn2	n - n2
シーケンスをいつまでも繰り返す	itertools.cycle(iterable)
逆双曲線余弦を算出する	math.acosh(x)
データフレームを列によってグループ化してそれぞれのグループの平均値を計算する	df.groupby(column).mean()
横棒グラフをピーチパフ色として描画する	plt.barh(データ列x, データ列y, color='peachpuff')
空の計数器	collections.Counter()
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データフレームのリストカラムの欠損値を最小値で置換する	df[aList].fillna(df[aList].min())
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
散布図の色を珊瑚にする	plt.scatter(データ列x, データ列y, color='coral')
列の欠損値を直前の値で置換する	ds.fillna(method='ffill')
縦棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
ダークターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフを小麦色色として描画する	plt.plot(データ列x, データ列y, color='wheat')
左にn個分双方向キューの順序をローテンションする	deq.rotate(-n)
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
キューの最大長を使う	deq.maxlen
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
棒グラフをダークマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
option: コーンフラワーブルー色を使用する	color = 'cornflowerblue'
日付と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
option: グラフを一点鎖線に設定する	linestyle = 'dashbot'
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
ファイルから1バイト読み込む	f.read(1)
マップからキーの値を得る	aDict.get(key)
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
列'A'と列'B'をキーにして２つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
predicateFuncがTrueとなるシーケンスの部分	itertools.takewhile(predicateFunc, iterable)
双方向キューのデータを右にn個分ローテンションする	deq.rotate(n)
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='teal')
クリムゾン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
配列とリストの散布図にrgbの大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: ダークシアグリーン色を使用する	color = 'darkseagreen'
ファイルからファイル名を見る	os.path.basename(filepath)
ファイルパスから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
データフレームを表示するとき、n列までデータフレームを表示できるようにする	pd.set_option('display.max_columns', n)
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
option: スラッシュをセパレータで用いる	sep = '/'
第２引数で指定したファイルの名前	sys.argv[1]
データフレームを'A'列によってを用いて破壊的にソートする	df.sort_values(by='A', inplace=True)
option: パールバイオレットレッドにグラフの色を変更する	color = 'palevioletred'
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
折れ線グラフをシエナ色として描画する	plt.plot(データ列x, データ列y, color='sienna')
部分的最小二乗法で回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
オールドレース色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
小数点数の正接の逆数	math.atan(x)
空行をプリントする	print()
ピアソンでデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
散布図を左三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='<')
線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
バイナリモードを使ってファイルをオープンして]、fとする	f = open(filepath, mode='rb')
データ列の一意な要素数	ds.nunique()
散布図をダークオリーブグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データフレームのポイントプロットを描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
モカシン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
ラインの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
変数について数式の微分を行う	sympy.diff(e, z)
nがn2よりも大きい	n > n2
データフレームの列がxでない行をフィルタする	df[df[column] == x]
option: 箱ひげ図に平均を加える	showmeans = False
タプルの値を並べ変える	sorted(aTuple)
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
データを最大値と最小値を使って正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
表データの列の文字列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
折れ線グラフに黒い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
ヒストグラムを黒くする	plt.hist(データ列, color='k')
Pythonのバージョン	sys.version
配列と数列の散布図に黒いクロスマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
データフレームのモードを求める	df.mode()
棒グラフをライトゴールドロディイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
両端キューの末尾に要素を追加する	deq.append(element)
二数の最大値	max(x, y)
棒グラフをライムグリーン色として描画する	plt.bar(データ列x, データ列y, color='limegreen')
option: 色をダークマゼンタにセットする	color = 'darkmagenta'
t-SNEで多次元データを淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
カウンタ同士で和集合	aCounter | aCounter2
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
データフレームの欠損値をxにする	df.fillna(x)
縦棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
ホワイト色のヒストグラムを描画する	plt.hist(データ列, color='white')
ファイルからバイナリ書き込みストリームを開いて]fとする	f = open(filepath, mode='wb')
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
チョコレート色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
縦棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データフレームを複数の列で整列して、更新する	df.sort_values(by=column, inplace=True)
日本語をグラフ中で表示できるようにする	sns.set(font='IPAexGothic')
行列を転置する	aArray.T
貝殻色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
複数横に並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
nがn2より大きい	n > n2
グラフの見栄えを良くする	import seaborn as sns
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ライトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
散布図に星マーカーを使用する	plt.scatter(データ列x, データ列y, marker='*')
データフレームのカラムの欠損値を最頻値に変更する	df[col].fillna(df[col].mode().iloc[0])
赤い一点鎖線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
セットから別のセットを除く	aSet.difference_update(aSet2)
整数nの二進表現	bin(n)
文字列の右側から空白を取り除く	s.rstrip()
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
整数nがリストのどれかか調べる	n in aList
リストの合計	sum(aList)
option: ゴールデンロッドにグラフの色を設定する	color = 'goldenrod'
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
データフレームの列がどの程度、分散しているか見る	df[col].var()
カウンタの各文字列を、そのカウントだけ列挙する	aCounter.elements()
データフレームの列の各データ値の出現回数を求める	df[col].value_counts()
小さい順にリストの要素を並べる	sorted(aList, reverse=True)
ブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
option: マーカーの色をタンにする	markerfacecolor = 'tan'
両端キューの要素をn個分左にローテンションする	deq.rotate(-n)
アヤメのデータセットをロードする	sns.load_dataset('iris')
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
文字列を回数を制限して置換する	s.replace(sub, newsub, n)
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
データフレームを用いる	import pandas as pd
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
option: セパレータをタブにする	sep = '\t'
縦棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
散布図を赤色として描画する	plt.scatter(データ列x, データ列y, color='red')
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
行列の行ごとの最大値	np.max(aArray, axis=1)
文字列がアスキー文字か	s.isascii()
文字列の先頭から不要な空白を取り除く	s.lstrip()
配列のデータ型を計算する	aArray.dtype()
option: 色をサーモンに指定する	color = 'salmon'
実行結果を黄色化する	f'\033[33m{value}\033[0m'
リストと配列の散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
現在の時間数	datetime.date.today().hour
オブジェクトのイテレータ	iter(obj)
ヒストグラムをホットピンク色として描画する	plt.hist(データ列, color='hotpink')
データフレームを列名リストを用いて昇順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
キーがタプルに存在するか調べる	key not in aDict
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
パラメータがマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
ナバホホワイト色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
プロットをスライドに設定する	sns.set(context='talk')
ヒストグラムの色をタンに指定する	plt.hist(データ列, color='tan')
耐火レンガ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
ブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
option: グラフの色をホットピンクにする	color = 'hotpink'
option: ダークブルーにグラフの色を指定する	color = 'darkblue'
ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
データフレームのNaNを直前の値に指定する	df.fillna(method='ffill')
データ列の折れ線グラフを描画して、色をカラーコードとして変更する	plt.plot(データ列x, データ列y, color='#800080')
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
小麦色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
数列とリストの散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
ケンドール順位相関係数を用いてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
整数nを八進文字列に変換する	oct(n)[2:]
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
棒グラフをチョコレート色として描画する	plt.bar(データ列x, データ列y, color='chocolate')
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームを各列毎に集約して列の標準偏差を求める	df.groupby(column)[column2].std()
option: デピンク色を用いる	color = 'deeppink'
ポイントマーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
縦棒グラフをライトスチールブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
データフレームの列をカテゴリデータにする	df[col].astype(object)
option: ライトグリーン色を使う	color = 'lightgreen'
データフレームのカラムを10の位で丸めて整数にする	df[col].round(-1).astype(int)
データ列と配列について散布図を描いて、マーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
行列の次元数を使う	aArray.ndim
折れ線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightgreen')
option: パパイヤウィップを使用する	color = 'papayawhip'
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
２つの変数をそれぞれ定義する	x, y = i, j
option: フォントの色をディムグレーに変更する	color = 'dimgray'
緑色で実行結果を出力する	print(f'\033[32m{value}\033[0m')
浮動小数点数の符号を同じにする	math.copysign(x, x2)
nが2で割り切れるか調べる	n % 2 == 0
グラフ描画でカーネル密度推定を使用する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
両端キューのn番目	deq[n]
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
変数を黒色化する	f'\033[30m{value}\033[0m'
タイムスタンプデータの時間	aDatetime.time()
option: バリーウッドを用いる	color = 'burlywood'
辞書のコピー	dict(aDict)
カテゴリでグループ化して、カーネル密度分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
nまでの偶整数列	list(range(2, n, 2))
小麦色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
nとn2のビット積を算出する	n & n2
等差数列から整数乱数を発生させる	random.randrange(start, end, step)
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
option: ピーチパフ色を用いる	color = 'peachpuff'
日付時刻データが金曜日かどうか	aDatetime.weekday() == 4
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
配列と配列についての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
データフレームのカラムの空文字を未入力値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
プロットを全般的に色差別なくする	sns.set(pallete='colorblind')
集合から全ての要素を取り除く	aSet.clear()
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
ファイルをバイナリ書き込みモードで開いて]、fとする	f = open(filepath, mode='wb')
option: 線を細くする	linewidth = 3.0
別の文字列に文字列中の部分文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
列でデータフレームをソートして新しいインデックスを加える	df.sort_values(columns).reset_index()
データフレームの列の値は欠損値かどうか調べる	df[col].isna()
データ列の欠損値を直前の値にセットする	ds.fillna(method='ffill')
列を1000の位で丸める	ds.round(-3)
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
読み込みモードでファイルパスをオープンして]、fとする	f = open(filepath, mode='r')
文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
文字列をインターンする	sys.intern(s)
タプルをnから順番付けする	enumerate(aTuple, start=n)
データフレームをグループ化して、ヒストグラムでグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
散布図の色を淡い茶色にする	plt.scatter(データ列x, データ列y, color='tan')
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
散布図を黒い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフの丸マーカーの色を変える	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
線グラフの色を耐火レンガに変更する	plt.plot(データ列x, データ列y, color='firebrick')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
オーキッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
折れ線グラフの上三角印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
回数を制限して文字列を置き換える	s.replace(sub, newsub, n)
折れ線グラフの色をミディアムパープルに変更する	plt.plot(データ列x, データ列y, color='mediumpurple')
スピアマン相関係数としてデータフレームの相関行列	df.corr(method='spearman')
リストを累積する	itertools.accumulate(iterable, operator.mul)
データフレームの列の中のNaNの合計を数える	df[col].isna().sum()
破線を使って数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
回帰分析をランダム性を追加したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
option: グラフの色をミディアムターコイズに指定する	color = 'mediumturquoise'
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
非数値データ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
コーンズシルク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
文字列を左寄せにする	s.ljust(文字列幅)
データフレームを一度にValueMapで置き換える	df.replace(ValueMap)
英字の大文字列	string.ascii_uppercase
散布図を黒いダイアモンドマーカーでプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
辞書のキーの値を見る	aDict[key]
ヒストグラムをオレンジ色として描画する	plt.hist(データ列, color='orange')
折れ線グラフを耐火レンガ色を用いて描画する	plt.plot(データ列x, データ列y, color='firebrick')
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
星印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
option: デピンクにグラフの色を指定する	color = 'deeppink'
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
n進文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='grey')
折れ線グラフに星印を使う	plt.plot(データ列x, データ列y, marker='*')
文字列を大文字にする	s.upper()
配列の列ごとの平均値を求める	np.mean(aArray, axis=0)
メディアンでデータ列の欠損値を埋める	ds.fillna(ds.median())
モデルの正確さを求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ダークサーモン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
バギングを使ってクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
浮動小数点数に変換する	float(x)
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
2つの変数をタブで区切ってプリントする	print(value, value2, sep='\t')
rgbの右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図のダイアモンドマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
イテラブルから重複を取り除く	set(iterable)
本日の日付	datetime.date.today()
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
文字列内に小文字があるか確認する	any(c.islower() for c in s)
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
nxn2の二次元リストを作る	[[0] * n for _ in range(n2)]
nが1、もしくは2か	n == 1 or n == 2
折れ線グラフを赤い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
データフレームの列名一覧で指定された列を削除する	df.drop(columns, axis=1)
グループ化してデータフレームの散布図を横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
ひとつでもアスキー文字が文字列内に含まれるか調べる	any(c.isascii() for c in s)
日付を使う	import datetime
イテラブルとリストについて散布図を描画し、、マーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
option: マーカーをポイントに設定する	marker = '.'
16進数文字列を整数に変換する	int(s, 16)
二つのデータフレームを縦方向につなぐ	pd.concat([df, df2])
データフレームの列がx、かつ列がx2である行を選択する	df[(df[column] == x) & (df[column2] == x2)]
数値を簡略にする	sympy.sympify(e)
データフレームを'A'列で昇順にソートする	df.sort_values(by='A', ascending=True)
データフレームを'A'列の値でグループ化する	df.groupby('A')
option: ライトスレイグレーにフォントの色を設定する	color = 'lightslategray'
実数の指数部	math.frexp(x)[1]
二つの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
ライトシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
リストのオブジェクトの位置をエラーなく使う	aList.index(element) if element in aList else -1
データフレームを各列毎にグループ化して列の合計を求める	df.groupby(column)[column2].sum()
エクセルファイル形式としてデータフレームをJSONLファイルに書き込む	df.to_excel(filename)
option: ライトサーモン色を用いる	color = 'lightsalmon'
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データ列を指定した値を用いて二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
データフレームの列の各データ値の出現回数	df[col].value_counts()
新しいロッソ回帰モデルを新規作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
リストとリストの散布図をプロットし、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
クラス分類をMLPで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
option: プラム色を用いる	color = 'plum'
実行結果を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
リネン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
SDGでクラス分類をする	model = sklearn.linear_model.SGDClassifier()
辞書にキーが存在するか調べる	key in aDict
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
イテラブルからベクトルを作成する	np.array(iterable)
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
データフレームのカラムが何分か調べる	df[col].dt.minute
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
プログラムをエラーとして終了する	sys.exit(1)
データフレームのカウントプロットをプロットする	sns.countplot(x='列名', data=df)
文字列を太文字化する	f'\033[1m{value}\033[0m'
横棒プロットの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
半透明の点線を使ってデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
タプルをJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
数値の符号を同じにする	math.copysign(x, x2)
散布図をアイボリー色として描画する	plt.scatter(データ列x, データ列y, color='ivory')
散布図のクロスマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: ターコイズ色を使う	color = 'turquoise'
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
文字列の先頭でパターンにASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
パターンに文字列の先頭でASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
データフレームの重複した行数のマスクを求める	df.duplicated()
プロットの中の縦軸に軸ラベルをつける	plt.ylabel('y軸ラベル')
十六進数字を見る	string.hexdigits
配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
クラス分類をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
横棒グラフをライトスカイブルー色を使って描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
データフレームを丸める	df.round()
配列とリストの散布図を描画し、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
カウンタの要素を増やす	aCounter[element] += 1
option: グラフの色をサンディーブラウンにセットする	color = 'sandybrown'
折れ線グラフの色を青緑にする	plt.plot(データ列x, データ列y, color='turquoise')
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
縦棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
ヒストグラムの色をコーラルに指定する	plt.hist(データ列, color='coral')
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
日付データからn分減算する	aDate - datetime.timedelta(minutes=n)
option: マゼンタを使用する	color = 'magenta'
実数の常用対数	math.log10(x)
セットを空集合にする	aSet.clear()
色差別なくカラーパレットをプロットの描画で用いる	sns.set(pallete='colorblind')
赤い星マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='r')
グラフの色を淡くする	sns.set(pallete='muted')
データ列の柱状図を描く	plt.hist(データ列)
タプルをミュータブルにする	list(aTuple)
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
実数の正接	math.tan(x)
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategray')
数列を箱ひげ図を用いて可視化する	plt.boxplot(データ列)
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
Pandasでデータ列を日付データに変換する	pd.to_datetime(ds)
二つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
タイムスタンプデータの月数	aDatetime.month
散布図をダークオリーブグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
アルファベットを全部見る	string.ascii_letters
データ列がどれだけ分散しているか見る	ds.var()
オブジェクトは整数クラスのインスタンス	isinstance(obj, int)
ファイルを文字コードtextを使ってオープンする]	open(filepath, encoding=text)
棒グラフをティール色で描画する	plt.bar(データ列x, データ列y, color='teal')
線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
マゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='magenta')
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
線形回帰モデルの係数を使う	model.coef_
表データから末尾のカラムを除く	df[df.columns[:-1]]
option: グラフの色をダークターコイズにセットする	color = 'darkturquoise'
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
アクア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
ロジスティック回帰データフレームの散布図にを加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
データフレームをエクセルファイル形式でJSONLファイルに保存する	df.to_excel(filename)
散布図の四角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
散布図の印を四角にする	plt.scatter(データ列x, データ列y, marker='s')
文字列内にひとつでも英数字が含まれる	any(c.isalnum() for c in s)
線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
option: ポイント印を描画する	marker = '.'
option: グラフの色をフローラルホワイトに指定する	color = 'floralwhite'
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
データフレームのリストカラムの中にある文字列の合計をカウントする	df[aList].isin([value]).sum()
折れ線グラフをブルーバイオレット色として描画する	plt.plot(データ列x, データ列y, color='blueviolet')
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
整数nの8進リテラル	oct(n)
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
標準出力がパイプか調べる	not sys.stdout.isatty()
線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
赤いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='r')
option: 四角マーカーを描画する	marker = 's'
Pandasで、書式でデータフレームのcollを日付データにする	pd.to_datetime(df[col], format='%Y-%m-%d')
オブジェクトのクラスを調べる	type(obj)
散布図のダイアモンド印の太さを変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
文字列がリストに含まれるか調べる	element in aList
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
正規表現にASCII限定として文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
リストと配列の散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフをオリベドラブ色を使って描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: グラフの色を青緑に設定する	color = 'teal'
データフレームのリストカラムの値を一度にValueMapで置換する	df[aList].replace(ValueMap)
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
配列をビン分割する	pd.cut(aArray, aList)
ダークシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ライトスレイグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
データフレームの中で、列と列の重複をドロップする	df.drop_duplicates(subset=column)
クラス分類をRANSACを用いて行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームのリストカラムの欠損値を中央値に増やす	df[aList].fillna(df[aList].median())
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
replに一度に列を正規表現patternで置き換える	ds.replace(pattern, repl, regex=True)
マッピングに要素を項目名として加える	aDict[key] = element
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
折れ線グラフをシャルトリューズ色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
黒い菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
option: ライトサーモンを用いる	color = 'lightsalmon'
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
文字列の中の複数行対応としてパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフの色を黄色に指定する	plt.plot(データ列x, データ列y, color='yellow')
ヒストグラムの色をライトブルーにセットする	plt.hist(データ列, color='lightblue')
オブジェクトが論理値クラス	isinstance(obj, bool)
プラットフォームの文字コードの最大値	sys.maxunicode
データフレームからn行、サンプリングする	df.sample(n)
option: パールゴールデンロッドにグラフの色を指定する	color = 'palegoldenrod'
データフレームを列毎に集約してそれぞれのグループ毎の標準偏差を計算する	df.groupby(column).std()
散布図に青い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフをブラウン色を使って描画する	plt.plot(データ列x, データ列y, color='brown')
縦棒プロットを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
折れ線グラフをパールゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
空のカウンタ	collections.Counter()
自分自身をモジュールとして	sys.modules[__name__]
option: ミディアムターコイズを使う	color = 'mediumturquoise'
ベクトルの次元の数を計算する	aArray.ndim
ダークターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
文字列中に非アルファベットが含まれる	any(not c.isalpha() for c in s)
option: マーカーを▲に変更する	marker = '^'
辞書のキーとその値を列挙する	aDict.items()
option: マーカーを四角に設定する	marker = 's'
カテゴリ別で色分けしてデータフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: シルバーを用いる	color = 'silver'
文字列はひらがなか	('ぁ' <= ch <= 'ん')
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
棒グラフを真紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
赤いポイントマーカーをデータ列と配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームを二つの列を用いてソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
イテラブルの各要素に対してpredicateFuncがTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
実数の逆双曲線余弦	math.acosh(x)
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
表データの列とカラムの相関行列	df[[column, column2]].corr()
ヒストグラムの色をフクシアにセットする	plt.hist(データ列, color='fuchsia')
option: ライトグレーにフォントの色を設定する	color = 'lightgray'
ASCII限定として正規表現を事前にコンパイルする	re.compile(pattern, flag=re.ASCI)
データ列を10の位で丸めて整数にする	ds.round(-1).astype(int)
option: 欠損値を先頭にする	na_position = 'first'
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
タン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
ヒストグラムをライトスレイグレー色を用いて描画する	plt.hist(データ列, color='lightslategrey')
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
option: 複素数型を使う	dtype = bool
折れ線グラフの色をアクアに指定する	plt.plot(データ列x, データ列y, color='aqua')
ユーザから入力される	input()
折れ線グラフのマーカーを▼にする	plt.plot(データ列x, データ列y, marker='v')
赤いポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列をカンマによって分割し、、列挙する	s.split(',')
イテラブルとリストについて散布図を描き、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
有理数を使用する	import fractions
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
データフレームの中のNaNの合計を数える	df.isna().sum()
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
縦棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
ふたつの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
二つの関係が上位集合もしくは等しいか調べる	aSet > aSet2
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
辞書を階層化する	collections.ChainMap(aDict)
nの2乗	n ** 2
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
文字列を白色にする	f'\033[37m{value}\033[0m'
数列を箱ひげ図として可視化する	plt.boxplot(データ列)
名前からカラーマップを求める	"plt.get_cmap(""カラーマップ名"")"
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
option: マーカーをダイアモンドに設定する	marker = 'D'
文字列を最後の部分文字列で二分し最初の文字列を使う	s.rpartition(sub)[0]
データフレームから数値データの列のみ抽出する	df.select_dtypes('number')
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
スカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
データ列をビン数nでビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
JSON形式の文字列を読み込む	json.loads(jsonString)
実数の小数点以下を四捨五入する	round(x)
option: 赤色を使う	color = 'red'
線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
列の分散を求める	ds.var()
データフレームから指定されたデータ型の列名の一覧を使う	df.select_dtypes(型).columns
折れ線グラフの上三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
文字列中の部分文字列の登場を数える	s.count(sub)
文字列を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
縦棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
グラフの色をパステル調にする	sns.set(pallete='pastel')
線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
データ列の折れ線グラフを下三角印として描画する	plt.plot(データ列x, データ列y, marker='v')
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ヒストグラムをパレットトルコイズ色を用いて描画する	plt.hist(データ列, color='paleturquoise')
横軸の目盛りを対数に変更する	plt.xscale('log')
ライトグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
カラムの中にあるの合計を数える	ds.isin([value]).sum()
横棒グラフの色をダークブルーにする	plt.barh(データ列x, データ列y, color='darkblue')
option: ペールグリーンにグラフの色をセットする	color = 'palegreen'
option: ペールグリーン色を用いる	color = 'palegreen'
データフレームからカテゴリデータの列を選ぶ	df.select_dtypes('object')
データフレームの中で列と列に重複があるか調べる	df.duplicated(subset=[column, column2])
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
文字列を文字コード列にする	[ord(ch) for ch in s]
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
文字列はタプルの要素でないか調べる	element not in aTuple
文字列を部分文字列で分割したときの前半の文字列	s.partition(sub)[0]
文字列の右端からタブを取り除く	s.rstrip('\t')
option: 白に色を設定する	color = 'white'
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
本日の曜日を使う	datetime.datetime.today().weekday()
列'A'と列'B'をキーにして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
JSONフォーマットの文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
シエナ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
円グラフでデータ列の比率を可視化する	plt.pie(データ列, startangle=90)
スピアマンでデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='spearman')
データフレームの未入力値を直後の値で埋める	df.fillna(method='bfill')
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
本日が木曜日	datetime.datetime.today().weekday() == 3
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
データ列の曜日の名前	ds.dt.weekday_name
サンディーブラウンにヒストグラムの色をセットする	plt.hist(データ列, color='sandybrown')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
ゼロ埋めされたベクトル	np.zeros(要素数)
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
データフレームの中にがあるか調べる	df.isin([value])
データフレームの列がx以上かつx2未満の行を選択する	df[(x <= df[column]) & (df[column] < x2)]
データフレームをタブ区切りのファイルから読み込む	pd.read_csv(filename, sep='\t')
本日は何日か知る	datetime.datetime.today().day
正規表現に文字列の先頭で大文字・小文字を無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
まとめてデータ列の値をValueMapで置き換える	ds.replace(ValueMap)
正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(データ列)
option: マーカーを左三角に設定する	marker = '<'
区切りで文字列を区切り、、文字列リストに変換する	s.split(sub)
両端キュー中の要素の数を数える	deq.count(element)
データフレームをインデックスによってソートする	df.sort_index()
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
散布図に下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
ティールにヒストグラムの色を設定する	plt.hist(データ列, color='teal')
列'A'と列'B'をキーとして2つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
折れ線グラフに黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの中で何行、重複するか見る	df.duplicated().sum()
マップの全項目を消去する	aDict.clear()
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
数式を変数について微分する	sympy.diff(e, z)
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
配列とリストについて散布図をプロットして、マーカーを四角にセットする	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をコーンフラワーブルーに指定する	plt.hist(データ列, color='cornflowerblue')
文字列を置き換える	s.replace(sub, newsub)
ライトブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
option: 改行するの代わりに文字列を用いる	end = s
nを切り捨てながら半分にする	n //= 2
折れ線グラフの▽マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
nが偶数か確認する	n % 2 == 0
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgrey')
option: インディゴ色を用いる	color = 'indigo'
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
タプルの最初の文字列を探す	aTuple.index(element)
二つのデータフレームを列をキーにして右ジョインする	pd.merge(df, df2, on=column, how='right')
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
横棒グラフをライム色を使って描画する	plt.barh(データ列x, データ列y, color='lime')
散布図に大バツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='X')
リストとリストについての散布図に文字列という補足用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
等しい量になるようにn個に配列をビニングする	pd.qcut(aArray, n)
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
列を用いて表データを並べる	df.sort_values(by=column)
Pandasで、文字列のUNIX秒からPandasの日付型にする	pd.to_datetime(s, unit='s', utc=True)
散布図のクロスマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
'A'列と'B'列によって昇順にデータフレームを並べて、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
option: グラフの色をモカシンにセットする	color = 'moccasin'
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
カラムの値を正規表現patternでまとめて置き換える	ds.replace(pattern, repl, regex=True)
集合を組に変換する	tuple(aSet)
棒グラフをシエナ色として描画する	plt.bar(データ列x, データ列y, color='sienna')
ロバスト推定でクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
部分的最小二乗法として回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
文字列中の大文字を小文字にする	s.lower()
Pandasで、フォーマットfmtでデータ列をdatetime64型に変換する	pd.to_datetime(ds, format=fmt)
日付時刻データからn分、減らす	aDatetime - datetime.timedelta(minutes=n)
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
option: 先頭のカラムをインデックスに指定する	index_col = 0
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
浮動小数点数が負か	x < 0
データ列の中に日付データが存在するかどうか調べる	ds.isin([value])
データフレームの列の要約統計量を計算する	df[col].describe()
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
縦棒グラフをライトブルー色として描画する	plt.bar(データ列x, データ列y, color='lightblue')
option: ダークスラテグレーを使う	color = 'darkslategray'
データフレームを関数の値によってグループ化し、基本統計量を求める	df.groupby(関数).describe()
年月日と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightseagreen')
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
本日が金曜日	datetime.datetime.today().weekday() == 4
変数を黒色にする	f'\033[30m{value}\033[0m'
最小値でデータ列の未入力値を埋める	ds.fillna(ds.min())
イテラブルとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
自然数の順列の総数を求める	math.perm(n)
散布図の左三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームの列が正規分布からどれだけ、尖っているか確認する	df[col].skew()
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
空白文字を全て使う	string.whitespace
青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
データフレームから破壊的に重複を消す	df.drop_duplicates(inplace=True)
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
ピーチパフ色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
折れ線グラフの左三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
棒グラフをブラック色を用いて描画する	plt.bar(データ列x, データ列y, color='black')
イテラブルを累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
横棒グラフをブランチドアーモンド色として描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
データフレームを百の位で四捨五入する	df.round(-2)
オプションで、ファイルを使う	file = sys.open(filename, 'w')
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
xの小数点以下'1'桁の文字列にする	':.1f'.format(x)
ダークスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
折れ線グラフを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
option: 左三角マーカーを使う	marker = '<'
rgbのバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
二数の最大値を計算する	max(x, y)
イテラブルの集合	set(iterable)
グリッドを破線にする	plt.grid(linestyle='dashed')
散布図に下三角印を使う	plt.scatter(データ列x, データ列y, marker='v')
白いグリッド線を引く	plt.grid(color='w')
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
リストとリストについての散布図に赤い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
データフレームのリスト列の相関行列をヒートマップとして描画する	sns.heatmap(df[aList].corr())
数を実数から引く	x - y
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレームのカラムは正規分布からどの程度歪んでいるか見る	df[col].kurt()
option: 色をロイヤルブルーに設定する	color = 'royalblue'
option: グラフの色をオレンジに設定する	color = 'orange'
ダークオリーブグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
option: ダークマゼンタ色を使う	color = 'darkmagenta'
ダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D')
nが-9以上9以下か調べる	-9 <= n <= 9
日付データが土曜日	aDate.weekday() == 5
多次元データをt-SNEで淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
ひとつでもアルファベットが文字列内に含まれる	any(c.isalpha() for c in s)
リネン色を用いてヒストグラムを描画する	plt.hist(データ列, color='linen')
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
データフレームのリスト列の母標準偏差	df[aList].std(ddof=0)
option: オレンジレッド色を使う	color = 'orangered'
イエローグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='yellowgreen')
線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
コマンドの第２引数を確認する	sys.argv[1]
線グラフをオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='orchid')
データフレームを列によってグループ化して、それぞれのグループごとの平均値を算出する	df.groupby(column).mean()
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
列の各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
変数を緑色でプリントする	print(f'\033[32m{value}\033[0m')
棒グラフをピンク色として描画する	plt.bar(データ列x, データ列y, color='pink')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
線グラフをミッドナイトブルー色として描画する	plt.plot(データ列x, データ列y, color='midnightblue')
パレットトルコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
データフレームのリストカラムのNaNを平均値で置き換える	df[aList].fillna(df[aList].mean())
縦棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
ヒストグラムの色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
最初のコマンド引数を調べる	sys.argv[1]
データフレームのカラムが何年か見る	df[col].dt.year
データフレームの列の値がxより小さいデータを抽出する	df[df[column] < x]
数値を双方向キューの先頭に付け加える	deq.appendleft(element)
データフレームを各列と列の組み合わせ毎にグループ化し、分散を求める	df.groupby([column, column2], as_index=False).var()
データフレームの欠損値を平均値にセットする	df.fillna(df.mean())
二つの文字列は等しくないか調べる	s != s2
option: ブラックを用いる	color = 'black'
ポスターにグラフの用途を設定する	sns.set(context='poster')
option: レモンシフォン色を使う	color = 'lemonchiffon'
赤い星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
option: 追加モードを使用する	mode = 'a'
データフレームの行を抽出する	df[start:end]
ロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
オブジェクトのプロパティの値を指定する	setattr(obj, プロパティ名, 値)
データフレームのどの値が頻出か見る	df.mode()
option: ライトスレイグレー色を使う	color = 'lightslategrey'
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
折れ線グラフに下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
行列の行列式	np.linalg.det(aArray)
データフレームのリストカラムの文字列を未入力値にする	df[aList].replace(s, np.nan)
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
ターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームのリスト列が正規分布からどの程度歪んでいるか見る	df[aList].kurt()
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
クリムゾン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
バリーウッドにヒストグラムの色を設定する	plt.hist(データ列, color='burlywood')
ティール色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
数で実数を整数除算する	x // y
option: ライム色を使う	color = 'lime'
0からN未満までの配列	np.arange(N)
列名一覧をデータ型でフィルタする	df.select_dtypes(型).columns
実数の逆正弦	math.asin(x)
新しいロバスト回帰モデルを作成する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
八進数字を全て使う	string.octdigits
ファイルパスをオープンして]、バイナリストリームを見る	open(filepath, mode='rb')
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
入力から２つの文字列値を読む	A, B = map(str, input().split())
Pandasで書式でデータ列をPandasの日付型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
ゼロ埋めされた８ビット整数型の行列	np.zeros(要素数, dtype=np.int8)
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
ミディアムパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
辞書を階層化辞書に変換する	collections.ChainMap(aDict)
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
レベッカパープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
インデント幅nで辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
列によってデータフレームを集計し、、グループ毎の個数を算出する	df.groupby(column).count()
実数の天井を求める	math.ceil(x)
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
データフレームの列の中に日付データがあるかどうか判定する	df[col].isin([value])
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
データ列の欠損値を平均に設定する	ds.fillna(ds.mean())
option: インディアンレッドを使う	color = 'indianred'
文字列を最初の部分文字列で二分し後半の文字列を求める	s.partition(sub)[-1]
グローバル変数の一覧	globals()
オプションで、出力先を標準エラーに設定する	file = sys.stderr
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
リストを分割数nで分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
表示可能な列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
項目名が辞書上で定義済みかどうか調べる	key in aDict
文字列の無限イテラブル	itertools.repeat(element)
ミディアムブルーにヒストグラムの色を指定する	plt.hist(データ列, color='mediumblue')
データ列の中に文字列と日付データがいくつ含まれるか数える	ds.isin([value, value2]).sum()
散布図をrgbのバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのカラムの一意な値の個数	df[col].nunique()
スノー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
暗い赤色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
option: ブランチドアーモンドを使用する	color = 'blanchedalmond'
データフレームの列の欠損値をxで埋める	df[col].fillna(x)
半透明の破線を用いてリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
オーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
配列のデータ型	aArray.dtype()
文字列はタプルの要素か調べる	element in aTuple
option: グラフの色をハニーデューにする	color = 'honeydew'
アイボリー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
リストの各要素を両端キューの最初に追加する	deq.extendleft(iterable)
散布図をサーモン色として描画する	plt.scatter(データ列x, データ列y, color='salmon')
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgrey')
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
二つのデータフレームを横向きにつなぐ	pd.concat([df, df2], axis=1)
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
現在の秒数	datetime.date.today().second
実数で実数を割る	x / y
データフレームの列の各値が何回出現するか見る	df[col].value_counts()
ヒストグラムをライトイエロー色として描画する	plt.hist(データ列, color='lightyellow')
リストとリストについて散布図を描いて四角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: ブラックを使う	color = 'black'
option: フォントの色をチョコレートにセットする	color = 'chocolate'
データフレームの中で列の重複を見る	df.duplicated(subset=column)
キーが辞書にないとき要素を追加する	aDict.setdefault(key, element)
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
リストを分割する	pd.cut(aList, aList)
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
ミッドナイトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
直前の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='ffill')
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
赤い一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
行列の和	aArray + aArray2
真紅色でヒストグラムを描画する	plt.hist(データ列, color='crimson')
縦棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
連続した行列の自動作成する	np.arange(開始値, 終了値, 等差)
パウダーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
イテラブルのイミュータブルなセット	frozenset(iterable)
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
棒グラフをバイオレット色を使って描画する	plt.bar(データ列x, データ列y, color='violet')
全要素を初期値で初期化した行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
日付時刻データは日付時刻データより後ろか調べる	aDatetime > aDatetime2
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
ライトスチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
紫色で数値をプリントする	print(f'\033[35m{value}\033[0m')
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
横に三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
データ列が何月か見る	ds.dt.month
nからn2までの一つ置きの整数リスト	list(range(n, n2+1, 2))
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t')
文字列を代数計算の変数に変換する	sympy.Symbol(s)
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgray')
option: サーモンにグラフの色を設定する	color = 'salmon'
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
配列の最小を求める	np.min(aArray)
タプルの先頭のn要素を取り除く	aTuple[n:]
折れ線グラフのポイントマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
整数nの八進数表現	oct(n)
日付時刻データは何月か知る	aDatetime.month
リストを三つ並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
黒い▼マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
ダーク・スラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ティール色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
標準出力を使用する	sys.stdout
anemptystring	''
線グラフの色をライトコーラルに指定する	plt.plot(データ列x, データ列y, color='lightcoral')
散布図に下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
データフレームを列の値によってまとめたグループ	df.groupby(column)
折れ線グラフをブラウン色で描画する	plt.plot(データ列x, データ列y, color='brown')
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
実線に折れ線グラフの線種を指定する	plt.plot(データ列x, データ列y, linestyle='solid')
option: ダークサーモンにグラフの色を設定する	color = 'darksalmon'
文字列の中で大文字・小文字を無視して正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
環境がMacOS	sys.platform.startswith('darwin')
表の先頭n行を取り出す	df.head(n)
切片なしの単回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
折れ線グラフに四角マーカーを加える	plt.plot(データ列x, データ列y, marker='s')
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
xの小数点以下'2'桁の文字列に変換する	':.2f'.format(x)
xをブール値に変換する	bool(x)
タプルを階層化辞書に変換する	collections.ChainMap(aDict)
データフレームの重複していない行を抽出する	df[not df.duplicated(keep=False)]
文字列が全て空白文字か調べる	s.isspace()
ValueMapで一度にデータフレームのカラムの値を置き換える	df[col].replace(ValueMap)
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
セットが空でないかどうか調べる	len(aSet) != 0
横棒グラフをベージュ色を使って描画する	plt.barh(データ列x, データ列y, color='beige')
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
インプレイスでデータフレームから重複したデータを削除する	df.drop_duplicates(inplace=True)
辞書上でキーが未定義	key not in aDict
数列と数列の散布図を描画して、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
辞書に要素を項目名として加える	aDict[key] = element
option: グラフの色をミントクリームに設定する	color = 'mintcream'
リストとリストを結合する	aList + aList2
折れ線グラフの丸マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
シャルトリューズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
符号なし８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.uint8)
横棒グラフを青紫色として描画する	plt.barh(データ列x, データ列y, color='violet')
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
空の辞書	{}
数値をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
配列の和を求める	aArray + aArray2
ゴールド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
データフレームの列の欠損値を第二四分位数に設定する	df[col].fillna(df[col].median())
データフレームを使用する	import pandas as pd
リストにリストを展開する	aList.extend(aList2)
タプルのキーと値を入れ替える	{v: k for k, v in aDict.items()}
黒い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
散布図をパープル色として描画する	plt.scatter(データ列x, データ列y, color='purple')
線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
既存の行列を元に全要素が1の配列	np.ones_like(aArray)
リストを逆順にする	aList[::-1]
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
RANSACを使って回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
リストの値を逆順にする	aList[::-1]
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
辞書のキーに対応した値	aDict.get(key)
辞書のキーの一覧	aDict.keys()
タプルを昇順に並べる	sorted(aTuple, reverse=True)
実数の逆双曲線正接	math.atanh(x)
横棒グラフの色を淡い茶色にする	plt.barh(データ列x, データ列y, color='tan')
nにn2を掛ける	n * n2
option: ミスティローズ色を使う	color = 'mistyrose'
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
数列の折れ線グラフを描画し、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
棒グラフをダークシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ディープスカイブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
オプションで、標準エラーを出力先にする	file = sys.stderr
最頻値でデータ列の欠損値を埋める	ds.fillna(ds.mode().iloc[0])
グラフで用いる縦軸に名前を設定する	plt.ylabel('y軸ラベル')
折れ線グラフの星印の大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
option: スカイブルー色を使用する	color = 'skyblue'
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
日付時刻データの分数	aDatetime.minute
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
オプションで出力先を標準出力に指定する	file = sys.stdout
オブジェクトが名前付きタプルのインスタンスかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
option: n番目のカラムを行に指定する	index_col = n
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
option: エンコーディングをSJISに指定する	encoding = 'shift_jis'
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
本日の日数を使う	datetime.datetime.today().day
option: マーカーの色を珊瑚にする	markerfacecolor = 'coral'
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
散布図をライトスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
散布図に右三角印を使用する	plt.scatter(データ列x, データ列y, marker='>')
組の先頭を取り除く	aTuple[1:]
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
データフレームから先頭の列を除く	df[df.columns[1:]]
二つのデータフレームを列をキーにして左結合する	pd.merge(df, df2, on=column, how='left')
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
option: 文字コードをUTF8に設定する	encoding = 'utf-8'
回帰分析をスタッキングで行う	sklearn.ensemble.StackingRegressor()
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
カテゴリ列でグループ化して、データフレームをにバイオリン図を使って可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データ列と数列について散布図を描画し、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
目盛線	plt.grid(linestyle='--')
option: デピンク色を使う	color = 'deeppink'
option: 色をオレンジに設定する	color = 'orange'
リストの中の最小値を算出する	min(aList)
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
折れ線グラフに青い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
折れ線グラフの色をゴールドに指定する	plt.plot(データ列x, データ列y, color='gold')
option: ディープスカイブルー色を使う	color = 'deepskyblue'
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
二変数の最も小さい値	min(x, y)
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
1行から二つの浮動小数数を読む	A, B = map(float, input().split())
グラフをパステル調にする	sns.set(pallete='pastel')
カラムの欠損値を中央値で埋める	ds.fillna(ds.median())
整数個からk個取り出した場合の順列の総数	math.perm(n, k)
データフレームを'A'列で大きい順に破壊的に並べ直す	df.sort_values(by='A', ascending=False, inplace=True)
option: 線幅を3.0ポイントに設定する	linewidth = 3.0
カテゴリで色付けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
ヒストグラムをインディアンレッド色として描画する	plt.hist(データ列, color='indianred')
折れ線グラフの下三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
既存のファイルをSJISを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
グラフの見た目を良くする	import seaborn as sns
各列毎にデータフレームをグループ化して、列の分散を求める	df.groupby(column)[column2].var()
リストと数列の散布図をプロットして、マーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムをディムグレー色を用いて描画する	plt.hist(データ列, color='dimgray')
ミディアムオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
横軸の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
ヒストグラムの色をゴーストホワイトに変更する	plt.hist(データ列, color='ghostwhite')
数が負の数か調べる	x < 0
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
クラス分類の偽陰性をヒートマップを用いて見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
散布図をコーンズシルク色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
option: グラフの種類を点線にセットする	linestyle = 'dotted'
option: 先頭のカラムをインデックスに増やす	index_col = 0
辞書を階層化マップにする	collections.ChainMap(aDict)
配列の次元数	aArray.ndim
データフレームを百の位で丸める	df.round(-2)
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
バイナリ用にファイルパスをオープンして]、fとする	f = open(filepath, mode='rb')
線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
実行時の標準出力の出力先がターミナルかどうか調べる	sys.stdout.isatty()
2進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ファイルを書き込み用にEUCを用いてオープンする]	open(filepath, mode='w', encoding='euc_jp')
変数をアンダーライン付きにする	f'\033[4m{value}\033[0m'
昇順にデータフレームを破壊的に'A'列でソートする	df.sort_values(by='A', ascending=True, inplace=True)
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
集合が空でないか調べる	len(aSet) != 0
データフレームの値は欠損値か	df.isna()
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
実数を複素数にする	complex(x)
文字列に漢字が含まれるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
ビスク色でヒストグラムを描画する	plt.hist(データ列, color='bisque')
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
デフォルトでグラフの見た目をいい感じに設定する	sns.set()
配列の列ごとの合計値を求める	np.sum(aArray, axis=0)
n割るn2を切り上げる	(n + n2 - 1) // n2
折れ線グラフをパパイヤウィップ色を用いて描画する	plt.plot(データ列x, データ列y, color='papayawhip')
実数は有限かどうか確認する	math.isfinite(x)
リストの長さだけ繰り返す	range(len(aList))
y座標を対数に変更する	plt.yscale('log')
ベクトルの次元数	aArray.ndim
実数の逆余弦	math.acos(x)
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
列を等間隔でn個にビン分割する	pd.cut(ds, n)
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(データ列, 'norm')
リストと数列の散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムをスラグレー色を用いて描画する	plt.hist(データ列, color='slategray')
イテラブルと配列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
データフレームを列の値でグループ化し、、それぞれのグループごとの最小値を求める	df.groupby(column).min()
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームに重複があるか確認する	df.duplicated()
option: グラフの色をオールドレースに指定する	color = 'oldlace'
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
二つの関係が部分集合か	aSet.issubset(aSet2)
行列の演算をする	import numpy as np
線を点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
カラーバーを横向きに描く	plt.colorbar(orientation='horizontal')
文字列の左側からタブを除く	s.lstrip('\t')
option: スレートブルー色を使用する	color = 'slateblue'
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
データ列の標本標準偏差	ds.std()
３つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
文字列中の片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データフレームの列を削除する	df.drop(column, axis=1)
データフレームを各列毎に集計して、列の最小値を算出する	df.groupby(column)[column2].min()
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
散布図を黒い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
リストと数列の散布図を大きさnでプロットする	plt.scatter(データ列x, データ列y, s=n)
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
棒グラフをバイオレット色で描画する	plt.bar(データ列x, データ列y, color='violet')
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
グレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
option: ミディアムアクアマリンにグラフの色を指定する	color = 'mediumaquamarine'
データフレームの指定された３つの列だけ抽出する	df[[column, column2, column3]]
ヒストグラムをゴールド色を使って描画する	plt.hist(データ列, color='gold')
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
配列の列ごとの合計	np.sum(aArray, axis=0)
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームを各カテゴリにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
黒い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームのカラムは何時か見る	df[col].dt.hour
データ列のタイムゾーンを日本に指定する	ds.tz_convert('Asia/Tokyo')
Pandasで、日付データのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
rgbの△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図の上三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列の末尾を使う	s[-1]
折れ線グラフをゴールド色を使って描画する	plt.plot(データ列x, データ列y, color='gold')
option: グレー色を使う	color = 'grey'
グラフのカラーテーマを色差別なくする	sns.set(pallete='colorblind')
線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
文字列を文字リストにする	list(s)
ヒストグラムをアンティークホワイト色を用いて描画する	plt.hist(データ列, color='antiquewhite')
データフレームを列でグループ分けして、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
図の縦横を設定する	plt.figure(figsize=(横幅, 高さ))
option: バイナリ書き込みモードに設定する	mode = 'wb'
変数を定義する	x = n
折れ線グラフの色を淡い茶色に設定する	plt.plot(データ列x, データ列y, color='tan')
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
データフレームのNaNを中央値に設定する	df.fillna(df.median())
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
option: チョコレート色を使う	color = 'chocolate'
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
データ列のNaNを最大値で埋める	ds.fillna(ds.max())
アクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
シードをnで初期化する	random.seed(n)
データ列を横棒プロットにする	plt.barh(ラベル列, データ列)
最大値・最小値の範囲として一様な疑似乱数を算出する	random.uniform(最小値, 最大値)
Pandasで、データ列のUNIX秒からタイムスタンプに変換する	pd.to_datetime(ds, unit='s', utc=True)
ヒストグラムの色をダークゴールデンロッドに指定する	plt.hist(データ列, color='darkgoldenrod')
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
option: スラグレーを使う	color = 'slategray'
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
円周率	math.pi
データフレームのNaNを最小値で埋める	df.fillna(df.min())
カウンタ同士でユニオン	aCounter | aCounter2
現在をISO形式の文字列にする	datetime.datetime.today().isoformat()
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
サーモンにヒストグラムの色を指定する	plt.hist(データ列, color='salmon')
実数の複素数	complex(x)
データフレームの欠損値を中央値で置換する	df.fillna(df.median())
折れ線グラフの色をネイビーに指定する	plt.plot(データ列x, データ列y, color='navy')
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
rgbの星マーカーを配列と配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
日付時刻データが日付時刻データと同時	aDatetime == aDatetime2
折れ線グラフの色をライトイエローに変更する	plt.plot(データ列x, データ列y, color='lightyellow')
カラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
折れ線グラフの印を三角にする	plt.plot(データ列x, データ列y, marker='^')
option: フォントの色を貝殻に変更する	color = 'seashell'
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
ファイルとfilenameを結合する	os.path.join(filepath, filename)
グラフの背景色を暗くする	sns.set(style='darkgrid')
データフレームのリスト列の空文字を欠損値に変換しドロップする	df[aList].replace('', np.nan).dropna()
中央値でデータフレームの欠損値を埋める	df.fillna(df.median())
破壊的に'A'列を用いてデータフレームを降順にソートする	df.sort_values(by='A', ascending=False, inplace=True)
option: ゴールデンロッドにフォントの色を設定する	color = 'goldenrod'
行列の平均値	np.mean(aArray)
実数を実数で割って小数点以下を切り捨てる	x // y
論文にプロットをする	sns.set(context='paper')
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
nがn2以下、または、n3以上	n <= n2 or n >= n3
紺碧色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
データフレームを各列毎に集計して、文字列というグループを使う	df.groupby(column).get_group(s)
option: ヘッダを自動的な連番にする	header = None
黒い右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c='k')
タプルの値に要素は含まれていないかどうか確認する	element not in aDict.values()
横棒グラフをシスル色として描画する	plt.barh(データ列x, データ列y, color='thistle')
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
配列の平均を求める	np.mean(aArray)
データフレームをグループ化しそれぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
シアン色としてヒストグラムを描画する	plt.hist(データ列, color='cyan')
nがn2未満、それかn3以上か調べる	n < n2 or n >= n3
文字列に変換してリストを連結する	''.join(map(str, iterable))
リストのn番目のの要素を使う	aList[n]
データフレームの値をまとめてValueMapで置換する	df.replace(ValueMap)
option: ダークグレーを使う	color = 'darkgrey'
整数nを符号付きで長さn2のバイナリにする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
文字列全体がパターンにASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
ベクトルにはいくつ要素があるか調べる	aArray.size
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
option: トマトを使う	color = 'tomato'
option: ミディアムオーキッドにフォントの色を変更する	color = 'mediumorchid'
ヒストグラムの色をモカシンに指定する	plt.hist(データ列, color='moccasin')
文字列内にひとつでも英数字があるかどうか調べる	any(c.isalnum() for c in s)
ホワイトスモーク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
文字列をn回だけ置き換える	s.replace(sub, newsub, n)
数から浮動小数点数を減算する	x - y
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
option: プラムを使う	color = 'plum'
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
リストにオブジェクトを加える	aList.append(element)
縦棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
コマンドの第一引数を確認する	sys.argv[1]
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
n2分のn	n / n2
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
レモンシフォン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
Pandasでデータ列をdatetime64型に変換する	pd.to_datetime(ds)
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
縦棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
オリーブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
option: モカシンにグラフの色を設定する	color = 'moccasin'
option: ミディアムアクアマリン色を使用する	color = 'mediumaquamarine'
option: グラフの色をトマトに変更する	color = 'tomato'
データ列の代表値	ds.describe()
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
アンサンブル学習としてクラス分類をする	sklearn.ensemble.VotingClassifier()
実数のcos	math.cos(x)
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
２つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
カラムを10の位で四捨五入する	ds.round(-1)
データフレームのカラムの中にいくつ未入力値が存在するかカウントする	df[col].isna().sum()
データフレームのリストカラムを十の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームの中のカラムを中央値でビンニングする	pd.qcut(df[col], 2)
二つのオブジェクトが同一かどうか調べる	obj is obj2
集合を更新不能に変換する	frozenset(aSet)
option: フォントの色を茶色に設定する	color = 'brown'
ビスク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
文字列は全て数値か	s.isnumeric()
Pandasで、フォーマットでデータ列をdatetime64型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
正規化されたヒストグラムを描く	plt.hist(データ列, density=True)
option: ライトブルーにフォントの色を変更する	color = 'lightblue'
数列をボックスチャートにする	plt.boxplot(データ列)
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
データフレームのカラムが何日か確認する	df[col].dt.day
xを浮動小数点数型にする	float(x)
タプルの合計値	sum(aTuple)
データフレームのリストカラムの中に文字列とがいくつ存在するかカウントする	df[aList].isin([value, value2]).sum()
数式の変数に数式を代入する	e.subs(z, e2)
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
option: データ型を指定する	dtype = np.int
スライド用にグラフを変更する	sns.set(context='talk')
実数の逆双曲線正接を求める	math.atanh(x)
データ列の欠損値を直前の値で置き換える	ds.fillna(method='ffill')
データ列をカテゴリデータにする	ds.astype(object)
整数乱数の行列	np.random.randint(開始値, 終了値, (行数, 列数))
複数の列によってデータフレームをグループ化し要約統計量を求める	df.groupby(columns).describe()
ヒストグラムの色をダークスレートブルーにする	plt.hist(データ列, color='darkslateblue')
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
ファイルパスをSJISを用いて追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
文字列をアンダーライン付きにする	f'\033[4m{value}\033[0m'
ラベンダーブラッシュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームのカラムがどの程度、分散しているか確認する	df[col].var()
キーが辞書上で未定義か調べる	key not in aDict
右三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
八進数文字列を整数に変換する	int(s, 8)
文字列が全て大文字かどうか調べる	s.isupper()
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
散布図の菱形印の線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
数列を縦棒プロットにする	plt.bar(ラベル列, データ列)
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
散布図をリネン色を用いて描画する	plt.scatter(データ列x, データ列y, color='linen')
文字列は印字できる	s.isprintable()
文字列がタプルに含まれる	element in aTuple
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
nが偶数か	n % 2 == 0
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
線グラフの色をダークオレンジに指定する	plt.plot(データ列x, データ列y, color='darkorange')
配列と数列についての散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
option: フォントの色をスカイブルーに設定する	color = 'skyblue'
ヒートマップで混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
データフレームのリスト列のNaNを平均値に設定する	df[aList].fillna(df[aList].mean())
データフレームの全カラムの散らばりを図示する	sns.pairplot(df)
データ列の中央値を計算する	ds.median()
折れ線グラフの星マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ファイルにxを文字列に変換して書き込む	f.write(str(x))
多層パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
散布図に三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='^')
現在が何時か知る	datetime.date.today().hour
複数の列の値でデータフレームをまとめたグループ	df.groupby(columns)
カウンタの要素数	len(aCounter)
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
16進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
コレクションを使用する	import collections
データフレームから重複を消す	df.drop_duplicates()
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
option: ピーチパフを使う	color = 'peachpuff'
列を2回あわせた直積を得る	itertools.product(iterable, repeat=2)
データフレームのn行目を抽出する	df.loc[n]
赤い△マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
横棒グラフを描画して中央寄せする	plt.barh(ラベル列, データ列, align='center')
縦棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
散布図の四角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
予測データのコンフュージョン・マトリックスを計算する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ライム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
最大値・最小値の範囲で一様な疑似乱数	random.uniform(最小値, 最大値)
データフレームの尖度	df.skew()
option: 色をサドルブラウンに設定する	color = 'saddlebrown'
オプションで、標準出力に出力する	file = sys.stdout
組の要素をソートする	sorted(aTuple)
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
既存のファイルパスをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
プロットをポスターに設定する	sns.set(context='poster')
十六進文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
表データの列の値がxより多い行を抽出する	df[df[column] > x]
リストを境界値として配列をビン分割する	pd.cut(aArray, aList)
ミディアムアクアマリン色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
データフレームから列を一つのみ選択する	df[[column]]
文字列のケースを入れ替える	s.swapcase()
ヒストグラムをライトスチールブルー色を使って描画する	plt.hist(データ列, color='lightsteelblue')
ヒストグラムを黄色色として描画する	plt.hist(データ列, color='yellow')
散布図の大バツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
標準出力	sys.stdout
データフレームを複数の列の値によって集計する	df.groupby(columns)
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームの列を各カテゴリにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: グラフの色をスカイブルーに指定する	color = 'skyblue'
文字コードtextでファイルパスをオープンする]	open(filepath, encoding=text)
実数を百の位で四捨五入する	round(x, -2)
option: グラフの色をシャルトリューズに変更する	color = 'chartreuse'
option: ミントクリームにグラフの色を変更する	color = 'mintcream'
シーケンスからn個、ランダムに選ぶ	random.choices(iterable, k=n)
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
データフレームを各列毎に分類して、列の分散を求める	df.groupby(column)[column2].var()
棒グラフを青色として描画する	plt.bar(データ列x, データ列y, color='blue')
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
縦方向に3つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgray')
リストを逆さにする	reversed(aList)
折れ線グラフをパールバイオレットレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='palevioletred')
線グラフの色をゴールドに指定する	plt.plot(データ列x, データ列y, color='gold')
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
xとyの商と余りを同時に計算する	divmod(x, y)
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
折れ線グラフの星マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
リストを複製する	aList.copy()
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
ダークシアグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
Pandasで、データフレームのcollをdatetime64型に変換する	pd.to_datetime(df[col])
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
パールバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='palevioletred')
option: モカシン色を使う	color = 'moccasin'
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
小数点数の整数部	math.modf(x)[1]
nをn2分の1にする	n /= n2
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
文字列をエラーを無視してバイト列に変換する	s.encode(errors='ignore')
実行結果をシアンでプリントする	print(f'\033[36m{value}\033[0m')
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
文字列を走査し、パターンにマッチするか確認する	re.search(pattern, s)
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
リストの要素を並べる	sorted(aList)
option: 色の透明度をセットする	alpha = 0.5
組の平均を求める	sum(aTuple)/len(aTuple)
線グラフをダークグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgreen')
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
option: ネイビー色を用いる	color = 'navy'
レモンシフォン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
横軸を対数に変更する	plt.xscale('log')
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
データ列を横に並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
option: 黄色色を使う	color = 'yellow'
データ列の母標準偏差	ds.std(ddof=0)
option: 符号なし８ビット整数型を使う	dtype = np.uint8
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
option: エンコーディングをBOM付きに変更する	encoding = 'utf_8_sig'
ネイビー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
特異値分解で多次元データを濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
赤いグリッド線を引く	plt.grid(color='r')
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
配列とリストについて散布図を描画して、マーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
データフレームを千の位で丸める	df.round(-3)
ホットピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
ゴールド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
データフレームの列の欠損値をモードで置き換える	df[col].fillna(df[col].mode().iloc[0])
ターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
ゼロ埋めされた三2ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
データフレームのカラムの各データ値の出現数	df[col].value_counts()
rgbのバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
表データを列によってグループ分けして、それぞれのグループ毎の個数を計算する	df.groupby(column).count()
rgbの下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: バイアスを算出しない	fit_intercept = False
nまでの偶整数リスト	list(range(2, n, 2))
データフレームを関数でまとめたグループを使う	df.groupby(関数)
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
現在の秒数を使う	datetime.date.today().second
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
タプルの要素を昇順に並べる	sorted(aTuple, reverse=True)
option: 下三角マーカーを描画する	marker = 'v'
ラベンダー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
データ列の値が欠損値	ds.isna()
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
ガウス過程でクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
実数を十六進文字列にする	x.hex()
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
書き込むCSVファイルの小数点以下の桁数を変更する	df.to_csv(filename, float_format='%.3f')
書式fmtでデータ列をdatetime64型に変換する	pd.to_datetime(ds, format=fmt)
10を底とする実数の対数を計算する	math.log10(x)
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を計算する	df.groupby([column, column2], as_index=False).min()
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
数値を緑色にする	f'\033[32m{value}\033[0m'
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
散布図のポイントマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
実数が有限かどうか判定する	math.isfinite(x)
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
行列の列ごとの標準偏差を求める	np.std(aArray, axis=0)
２つのデータ列を箱髭図にする	plt.boxplot([データ列, データ列])
option: 改行なし	end = ''
option: グラフの色をライトスレイグレーにセットする	color = 'lightslategray'
option: グラフの色をライトコーラルに変更する	color = 'lightcoral'
rgbの左三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
二つの集合に共通する要素からなる集合を算出する	aSet.intersection(aSet2)
最後の項目を辞書からポップする	aDict.popitem()
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
菱形マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='D')
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
列の一意な要素を見る	ds.unique()
ディープスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
nの各桁の和	sum(map(int, str(n)))
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
プログラムの実行を異常終了する	sys.exit(1)
データフレームのリストカラムの母標準偏差を算出する	df[aList].std(ddof=0)
データを最大最小で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: 黄色にグラフの色を変更する	color = 'yellow'
実数を小数点以下で丸める	round(x, n)
データフレームの相関行列ケンドール相関係数でを求める	df.corr(method='kendall')
スクリプトファイルの絶対パスを見る	os.path.abspath(__file__)
データフレームの列を折れ線プロットとして作図する	plt.plot(df[column], df[column])
文字列内にひとつでもアスキー文字が含まれる	any(c.isascii() for c in s)
データフレームの相関行列スピアマン相関係数で	df.corr(method='spearman')
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
日付データが金曜日かどうか調べる	aDate.weekday() == 4
文字列を部分文字列で二つに区切って、後半の文字列を求める	s.partition(sub)[-1]
横棒グラフをオリベドラブ色を用いて描画する	plt.barh(データ列x, データ列y, color='olivedrab')
predicateFuncを適用したときTrueとならないシーケンスの要素	itertools.dropwhile(predicateFunc, iterable)
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
散布図の星印を青色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
数式を部分分数に展開する	sympy.apart(e)
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
データ列が何年か確認する	ds.dt.year
要素一つのりスト	[element]
year年month月day日hour時のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour)
横棒グラフをパパイヤウィップ色を用いて描画する	plt.barh(データ列x, データ列y, color='papayawhip')
複数の列の値によってデータフレームをグループ化する	df.groupby(columns)
2つの文字列は等しいかどうか	s == s2
数式を展開する	sympy.expand(e)
キーがマッピングに存在しないとき、要素を追加する	aDict.setdefault(key, element)
カラムを1000の位で四捨五入して整数型にする	ds.round(-3).astype(int)
データフレームの列の値を正規表現で一度にreplに変更する	df[col].replace(pattern, repl, regex=True)
散布図の四角印を黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
改行を取り除いてファイルを一行ずつ読む	f.readline()
ディープスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
集合が空集合かテストする	len(aSet) == 0
黒い下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ゴールデンロッド色を使ってヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
数列とリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
横棒グラフをパパイヤウィップ色として描画する	plt.barh(データ列x, データ列y, color='papayawhip')
赤い右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
option: バツマーカーを用いる	marker = 'x'
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
nとn2のシートをエクセルデータファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
集合の浅いコピー	aSet.copy()
縦棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
データフレームのn行目を削除し、、更新する	df.drop(n, axis=0, inplace=True)
本日が日曜日	datetime.datetime.today().weekday() == 6
折れ線グラフを色付きの実線を使って描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
リストとデータ列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームのカラムの曜日が何日目か調べる	df[col].dt.dayofweek
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
option: マーカーを左三角に変更する	marker = '<'
目盛線	plt.grid(alpha=0.5)
表データをインポートする	import pandas as pd
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='gray')
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
リストを組にする	tuple(aList)
リストにリストを追加し、拡張する	aList.extend(aList2)
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
散布図の色をブラウンにする	plt.scatter(データ列x, データ列y, color='brown')
多重集合を作成する	collections.Counter()
option: アリスブルー色を用いる	color = 'aliceblue'
列'A'と列'B'をキーとして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
青紫色としてヒストグラムを描画する	plt.hist(データ列, color='violet')
積立相関係数を計算する	scipy.stats.pearsonr(データ列, データ列2)
option: マーカーの色をライムにする	markerfacecolor = 'lime'
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
横棒グラフの色を真紅にする	plt.barh(データ列x, データ列y, color='crimson')
JSON文字列をロードする	json.loads(jsonString)
データフレームから列を２つ選択する	df[[column, column2]]
文字列が全て識別子名か調べる	s.isidentifier()
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
option: 文字コードをUTF8に指定する	encoding = 'utf-8'
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
線グラフをターコイズ色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
ファイルを一行ずつ読み込む	f.readline()
グラフの凡例の場所を(x,y)にセットする	plt.legend(loc=(x, y))
グラフで使うフォントを指定する	sns.set(font=フォント名)
ライムグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
文字列を代数計算の変数にする	sympy.Symbol(s)
option: 白にグラフの色を設定する	color = 'white'
ミントクリーム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
rgbの大バツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ティール色のヒストグラムを描画する	plt.hist(データ列, color='teal')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
日付時刻データが何年か知る	aDatetime.year
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
データフレームのヒストグラム付き散布図を描く	sns.jointplot(x='列名', y='列名', data=df)
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
最大長を指定して、両端キュー	collections.deque(maxlen=n)
ファイルを文字コードtextとして書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
集合に要素を追加する	aSet.add(element)
データフレームの列がxの行を取り出す	df[df[column] == x]
データフレームを各列と列の組み合わせ毎にグループ化し、、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: 線の種類を破線に変更する	linestyle = 'dashed'
データ列と配列の散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
大バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
両端キューの末尾	deq[-1]
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
二進数文字列をbytesizeバイトのバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
日付時刻データをタプルに変換する	aDatetime.timetuple()
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
日付データが何月か知る	aDate.month
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
カテゴリ列で色分けしてデータフレームの全列の散布図を描画する	sns.pairplot(df, hue='カテゴリ列')
折れ線グラフの大バツマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
MSDで多次元データを濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
データフレームの記述統計量	df.describe()
データフレームの列が文字列で終わる行を取り出す	df[df[column].str.endswith(s)]
グラフ中の(x,y)の位置にデータラベルを表示する	plt.legend(loc=(x, y))
配列を縦棒グラフにする	plt.bar(ラベル列, データ列)
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
散布図の丸印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
青緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームの列名を指定された列名リストに置き換える	df.columns = columns
数列と配列について散布図を描いて、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
グラフを画面用に設定する	sns.set(context='notebook')
数式を簡略化する	sympy.sympify(e)
代数計算モジュールを使う	import sympy
文字列の中でASCII限定としてパターンにマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
ペルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
実数のsinの逆数	math.asin(x)
データフレームの中の列を等量でn個にビンニングする	pd.qcut(df[col], n)
ビン数nでデータ列を等量で分割する	pd.qcut(ds, n)
折れ線グラフの左三角印の太さを変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
散布図に大バツ印を加える	plt.scatter(データ列x, データ列y, marker='X')
タプルの要素を小さい順にソートする	sorted(aTuple, reverse=False)
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
現在の時間	datetime.date.today().hour
配列とリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
回帰木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
集合が空	len(aSet) == 0
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
散布図をポイント印で描画する	plt.scatter(データ列x, データ列y, marker='.')
option: フォントの色をティールに設定する	color = 'teal'
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
データ列の下位25%	ds.quantile(0.75)
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
データフレームのNaNをxに設定する	df.fillna(x)
nがn2より大きいか調べる	n > n2
option: オリベドラブにグラフの色を設定する	color = 'olivedrab'
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
カテゴリでグループ化して、にバイオリン図でデータフレームをグラフ化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフの印をクロスにする	plt.plot(データ列x, データ列y, marker='x')
option: ヘッダを自動的な連番に設定する	header = None
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
グラフのx軸の軸ラベルを変更する	plt.xlabel('x軸ラベル')
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
プラットホームがMacOSかどうか調べる	sys.platform.startswith('darwin')
右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
option: グラフの色をインディゴに変更する	color = 'indigo'
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
商と余りを同時に求める	divmod(x, y)
表データを使う	import pandas as pd
データフレームを各列と列の組み合わせ毎にグループ化して合計を求める	df.groupby([column, column2], as_index=False).sum()
xが一桁の正の数かどうか確認する	0 <= x <= 9
日付時刻データが金曜日か	aDatetime.weekday() == 4
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
文字列を右寄せにする	s.rjust(文字列幅)
文字列が文字列より辞書順で後か確認する	s > s2
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
リストとデータ列について散布図を描いて、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
カウンタの要素一覧	aCounter.keys()
パールゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
列をキーにして2つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
現在実行中の例外を情報	sys.exc_info()
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
グループ化してデータフレームの散布図を横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(データ列)
整数nの八進数文字列を求める	oct(n)[2:]
option: グラフの色をターコイズに設定する	color = 'turquoise'
下線付きでリストをプリントする	print(f'\033[4m{value}\033[0m')
折れ線グラフの色をペールグリーンにセットする	plt.plot(データ列x, データ列y, color='palegreen')
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
タプルの要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
データ列の分散を算出する	ds.var()
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
タイムスタンプデータにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
xでデータ列のNaNを補う	ds.fillna(x)
実数の正接の逆数を求める	math.atan(x)
横棒グラフをラベンダーブラッシュ色を使って描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
散布図に三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
nが一桁の数か	-9 <= n <= 9
デフォルトを適用する	sns.set()
文字列はタイトルケースか調べる	s.istitle()
文字列が片仮名	('ァ' <= ch <= 'ン')
グリッドの線スタイルを実線に変更する	plt.grid(linestyle='solid')
リストの先頭のn要素を取り除く	aList[n:]
いつまでもカウントアップする	itertools.count()
空のガウス過程回帰モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
option: グラフの色を小麦色に変更する	color = 'wheat'
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
散布図をダークグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkgray')
ピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
散布図のダイアモンドマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
データフレームを列の値によってグループ化する	df.groupby(column)
日付時刻データは何年か知る	aDatetime.year
散布図をアクア色を用いて描画する	plt.scatter(データ列x, データ列y, color='aqua')
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
リストの出現頻度を可視化する	plt.hist(データ列)
ダークレッド色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
枠なしの補足を入れる	plt.legend(frameon=False)
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
縦棒プロットを描画し、、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
数式の変数を数値で置き換える	e.subs(z, e2)
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
グラフのタイトルを設定する	plt.title('グラフの名称')
折れ線グラフをライトシアン色として描画する	plt.plot(データ列x, データ列y, color='lightcyan')
配列をビン数nとしてビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: 色をホットピンクに指定する	color = 'hotpink'
配列の累積和	np.cumsum(aArray)
ダークグレーにヒストグラムの色をセットする	plt.hist(データ列, color='darkgray')
縦棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
縦棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
実数の正接の逆数	math.atan(x)
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
データフレームで、列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
整数nの八進文字列を使う	oct(n)[2:]
整数nはタプルのどれかかどうか	n in aTuple
option: ブランチドアーモンドにフォントの色を設定する	color = 'blanchedalmond'
2つのカウンタの共通するデータを求める	aCounter & aCounter2
日付時刻データと日付時刻データの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
折れ線グラフをフォレストグリーン色として描画する	plt.plot(データ列x, データ列y, color='forestgreen')
データ列をビン分割する	pd.cut(ds, aList)
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
オブジェクトは文字列型かどうか調べる	isinstance(obj, str)
三つのデータフレームを縦方向にくっつける	pd.concat([df, df2, df3], axis=0)
データフレームのカラムの月	df[col].dt.month
線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='gray')
データフレームの数値を丸める	df.round()
JSONLファイルにデータフレームをSJISで保存する	df.to_csv(filename, encoding='shift_jis')
入力から２つの整数を読む	A, B = map(int, input().split())
アルファベットの小文字を使う	string.ascii_lowercase
ふたつの集合の∪	aSet.union(aSet2)
分子と分母から分数を新規生成する	fractions.Fraction(分子, 分母)
棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
データフレームのリストカラムはどれだけ、分散しているか見る	df[aList].var()
イテラブルの値をスタックの末尾に付け加える	deq.extend(iterable)
配列とリストの散布図を描いて大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームを二つの列の値によってグループ化し、記述統計量を求める	df.groupby(['A', 'B']).describe()
イテラブルを文字列として連結する	''.join(map(str, iterable))
ダークオリーブグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
option: 印の色を指定する	markerfacecolor = '#800080'
文字列の示すエンコーディングでファイルをオープンする]	open(filepath, encoding=s)
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
option: グラフの色をオールドレースに設定する	color = 'oldlace'
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
横棒グラフを青緑色として描画する	plt.barh(データ列x, データ列y, color='teal')
文字列を正規表現で分ける	re.split(pattern, s)
y軸の目盛を表示しない	plt.yticks([])
イテラブルからn個、ランダムに選ぶ	random.choices(iterable, k=n)
折れ線グラフの色をローングリーンに変更する	plt.plot(データ列x, データ列y, color='lawngreen')
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
クラス分類の適合率と再現率の調和平均を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
データフレームの重複していない行を取り出す	df[not df.duplicated(keep=False)]
オプションで、標準出力を出力先にする	file = sys.stdout
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
多次元データを主成分分析としてパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
option: グラフの色をラベンダーに設定する	color = 'lavender'
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
追加できるようにEUCで既存のファイルをオープンする]	open(filepath, mode='a', encoding='euc_jp')
ファイルを全部読む	f.read()
ライトコーラル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
値を両端キューの最初に付け加える	deq.appendleft(element)
小さい順に列名リストによってデータフレームをソートする	df.sort_values(by=column, ascending=True)
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
マッピングのキーとその値を列挙する	aDict.items()
option: スプリンググリーンを使う	color = 'springgreen'
リストの重複を取り除く	sorted(set(aList), key=aList.index)
折れ線グラフの四角印を黒色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
option: 値を置き換える	inplace = True
ふたつの集合のいずれか一方だけの集合を算出する	aSet.symmetric_difference(aSet2)
option: グラフの色をアクアマリンに変更する	color = 'aquamarine'
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
アリスブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
option: ロージーブラウン色を使う	color = 'rosybrown'
半透明の実線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
option: リネン色を使う	color = 'linen'
option: ライトスレイグレー色を使う	color = 'lightslategray'
データフレームのNaNを最大値にセットする	df.fillna(df.max())
データフレームの欠損値を最大値に指定する	df.fillna(df.max())
散布図に黒い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='k')
要素が全て1の行列	np.ones(要素数, dtype=np.int)
データ列を使う	import pandas as pd
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
ビン数nでデータフレームの中のカラムを等量でビン分割する	pd.qcut(df[col], n)
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
折れ線グラフの色をオレンジに変更する	plt.plot(データ列x, データ列y, color='orange')
正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームのカラムの空文字を未入力値に変換しドロップする	df[col].replace('', np.nan).dropna()
option: 線の種類を一点鎖線にセットする	linestyle = 'dashbot'
散布図を耐火レンガ色を用いて描画する	plt.scatter(データ列x, データ列y, color='firebrick')
多次元データをSVDとしてパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
データフレームのカラムの値をValueMapで一度に変更する	df[col].replace(ValueMap)
option: ライムグリーンにグラフの色を設定する	color = 'limegreen'
論文にグラフを設定する	sns.set(context='paper')
集合を変更不能な集合にする	frozenset(aSet)
印字可能な文字を全部求める	string.printable
数値の数値を計算する	float(e)
option: ディープスカイブルーにグラフの色をセットする	color = 'deepskyblue'
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: ライトグレーにグラフの色を変更する	color = 'lightgrey'
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
option: グラフの色を青に設定する	color = 'blue'
nとn2の和を求める	n + n2
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
実数の正接を求める	math.tan(x)
行列演算をする	import numpy as np
データフレームの中にと文字列がいくつあるか数える	df.isin([value, value2]).sum()
貝殻色で線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
option: 青色を使用する	color = 'blue'
紺碧色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
折れ線グラフの色をホワイトに指定する	plt.plot(データ列x, データ列y, color='white')
箱ひげ図を２つ並べて描く	plt.boxplot([データ列, データ列])
新しいガウス過程分類モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
ヒストグラムをコーンフラワーブルー色を用いて描画する	plt.hist(データ列, color='cornflowerblue')
散布図を青緑色を用いて描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データフレームの重複した行をマスクする	df.duplicated()
option: ライトシアンを使う	color = 'lightcyan'
ボックスチャートでリストを可視化する	plt.boxplot(データ列)
実数のアークコサイン	math.acos(x)
タプルの最後からn番目以前の部分を取り出す	aTuple[:-n]
option: 左三角マーカーを描画する	marker = '<'
タブ区切りのファイルをヘッダを指定せず読む	pd.read_csv(filename, header=None)
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
散布図の四角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
リストが空かどうか	len(aList) == 0
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
色名とカラーコードの対応表を見る	matplotlib.colors.cnames
文字列を部分文字列で分割する	s.split(sub)
ライトブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightblue')
決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
option: パパイヤウィップにグラフの色を設定する	color = 'papayawhip'
貝殻色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
JSON形式の文字列をロードする	json.loads(jsonString)
データフレームのカラムが何日か見る	df[col].dt.day
アイボリー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
既存の配列をベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
折れ線グラフをシスル色を用いて描画する	plt.plot(データ列x, データ列y, color='thistle')
リストを変更不能な集合に変換する	frozenset(iterable)
タン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
データ列が何年か見る	ds.dt.year
表データをインポートする	import pandas as pd
配列とリストについての散布図にデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームを二つの列によって昇順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームをCSVでJSONLファイルに保存する	df.to_csv(filename)
イテラブルと配列の散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
縦棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
nの桁数を求める	len(str(n))
データ列を100の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
文字列が全て大文字か	s.isupper()
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
両端キューの右側に要素を追加する	deq.append(element)
CSVをデータフレームとして読み込む	pd.read_csv(filename, sep=',')
縦棒グラフをシーグリーン色として描画する	plt.bar(データ列x, データ列y, color='seagreen')
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
データフレームの欠損値を後の行の値に設定する	df.fillna(method='bfill')
option: ダイアモンドマーカーを使用する	marker = 'D'
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
スカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ファイルから拡張子付きのファイル名を見る	os.path.basename(filepath)
イテラブルとリストについての散布図に赤い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームの欠損値を前の値にセットする	df.fillna(method='ffill')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
色を濃くする	sns.set(pallete='deep')
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
Pandasで、書式fmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
ヒストグラムをラベンダーブラッシュ色として描画する	plt.hist(データ列, color='lavenderblush')
正規表現を使う	import re
ヒストグラムを破線として描画する	plt.hist(データ列, linestyle='dashed')
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
線グラフをオリーブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olive')
散布図のマーカーの大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
option: オリベドラブを使用する	color = 'olivedrab'
散布図の右三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
横棒グラフをダークカーキ色として描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
複数の列を用いてデータフレームを破壊的に昇順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
複数の列の値によってデータフレームをグループ化して列挙する	[(name, group) for name, group in df.groupby(columns)]
文字列をファイルに書く	f.write(s)
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
データフレームの列がx以上のデータを選ぶ	df[df[column] >= x]
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
サドルブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
データフレームを大きい順に列によってを用いてソートする	df.sort_values(by=column, ascending=False)
散布図をローングリーン色として描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
リストの最初を除く	aList[1:]
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
最大値でデータフレームのカラムのNaNを埋める	df[col].fillna(df[col].max())
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
淡いピンク色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
散布図のダイアモンド印を赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
配列とリストについて散布図を描画して、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='gray')
色使いを暗くする	sns.set(pallete='dark')
option: 書き込みモードにする	mode = 'w'
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
平均線付き箱ひげ図をプロットする	plt.boxplot(データ列, meanline=True)
縦棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
文字列を白色化する	f'\033[37m{value}\033[0m'
横棒グラフをダークサーモン色を使って描画する	plt.barh(データ列x, データ列y, color='darksalmon')
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
ベクトルの和	aArray + aArray2
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
折れ線グラフの色をロージーブラウンに変更する	plt.plot(データ列x, データ列y, color='rosybrown')
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
ファイルを文字コードtextを使って書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
ラインを色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
日付データが日付データより早いかどうか調べる	aDate < aDate2
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
実数を実数で割って、切り捨てる	x // y
option: ダークターコイズを使う	color = 'darkturquoise'
ライトスチールブルーにヒストグラムの色をする	plt.hist(データ列, color='lightsteelblue')
パールゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
option: グリーンイエローにグラフの色を変更する	color = 'greenyellow'
イテラブルを集合にする	set(iterable)
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
配列をビニングする	pd.cut(aArray, aList)
option: スラッシュをセパレータで使う	sep = '/'
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームをグループ化し、各列に対し標準偏差を算出する	df.groupby(column)[column2].std()
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
nが一桁の整数	-9 <= n <= 9
縦棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
ドジャーブルー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
データフレームのカラムの未入力値を前の行の値に指定する	df[col].fillna(method='ffill')
xの小数点以下'1'桁の文字列に変換する	':.1f'.format(x)
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
縦棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
カウンタの積集合	aCounter & aCounter2
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
マルーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
リストが全て真か調べる	all(aList)
nがn2の倍数か判定する	n % n2 == 0
option: 色をブルーバイオレットに指定する	color = 'blueviolet'
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
nにn2をかけた値をnにする	n *= n2
カウンタのそれぞれの要素をカウントだけ列挙する	aCounter.elements()
デフォルトデザインを適用する	sns.set()
オリベドラブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
ブルーバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
データフレームのn行目まで抽出する	df[:n]
値は集合のメンバーに含まれるかどうか確認する	element in aSet
タイムスタンプデータが金曜日か調べる	aDatetime.weekday() == 4
ライトブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームをカラムによって分類してそれぞれのグループ毎の最小値を計算する	df.groupby(column).min()
日付時刻データが何曜日か知る	aDatetime.weekday()
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
縦棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
ヒストグラムをマルーン色として描画する	plt.hist(データ列, color='maroon')
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
フローラルホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
スレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
ヒストグラムの色をレモンシフォンに指定する	plt.hist(データ列, color='lemonchiffon')
ダークスラテグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
青い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの未入力値をメディアンに設定する	df.fillna(df.median())
数式を数値に変換する	float(e)
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
オプションで出力先を標準エラーに設定する	file = sys.stderr
棒グラフをペルー色として描画する	plt.bar(データ列x, データ列y, color='peru')
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
星マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='*')
ディープスカイブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
ファイルをバイナリ書き込み用にオープンして]、fとする	f = open(filepath, mode='wb')
カテゴリ別でグループ化して、データフレームをに箱ひげ図で描く	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
列からユニークな値を抽出しリスト化する	ds.unique().tolist()
データ列を対数する	np.log(データ列)
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
文字列をバイト配列に変換する	bytearray(s)
データ列のユニークな値を見る	ds.unique()
eの浮動小数点数乗	math.exp(x)
option: 説明変数を事前に正規化する	normalize = True
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
option: マルーン色を使用する	color = 'maroon'
列'A'と列'B'をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
折れ線グラフをロージーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='rosybrown')
ティール色として散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームを列で昇順に破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
データフレームのリストカラムの欠損値をモードで埋める	df[aList].fillna(df[aList].mode().iloc[0])
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
option: グラフの色をシルバーに指定する	color = 'silver'
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
二つの配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
実数の整数部を求める	math.modf(x)[1]
グラフを色差別なくする	sns.set(pallete='colorblind')
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
リストと数列についての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
三つ並べてヒストグラムを描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
スタックの右に値を追加する	deq.append(element)
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
option: フォントの色を淡い茶色に設定する	color = 'tan'
ライトスカイブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
ヒストグラムの色をハニーデューに指定する	plt.hist(データ列, color='honeydew')
nが5で割り切れるか調べる	n % 5 == 0
タイムスタンプデータを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
データフレームの列と列の相関行列ピアソン相関係数として	df[[column, column2]].corr(method='pearson')
範囲から配列	np.linspace(最小値, 最大値, 要素数)
サイコロと同じ乱数を発生させる	random.randint(1, 6)
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ラベル付きの円プロットを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
マッピングをインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
列の値によってデータフレームを集約して、最大値を計算する	df.groupby(column).max()
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
option: グラフの色をリネンに設定する	color = 'linen'
黒い菱形マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
option: ダークスラテグレー色を用いる	color = 'darkslategray'
コマンドの第二引数を調べる	sys.argv[1]
ファイルからベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
折れ線グラフの星印を黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
option: ライトグリーンにグラフの色を指定する	color = 'lightseagreen'
配列と配列の散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
option: 配列のデータ型を指定する	dtype = bool
リストとリストについての散布図に上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
aListn番目から値を得る	aList.pop(n)
折れ線グラフをロイヤルブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='royalblue')
散布図の星印の色を設定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
散布図を四角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの描いて、正規化する	plt.hist(データ列, density=True)
データ列の中に文字列が存在するかどうか確認する	ds.isin([value])
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
縦棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
点線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
データフレームを整数に丸める	df.round()
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
1行から2つの文字列を読む	A, B = map(str, input().split())
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
日付データをタプルに変換する	aDate.timetuple()
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
オブジェクトは浮動小数点数か調べる	isinstance(obj, float)
option: ライトイエローに色を設定する	color = 'lightyellow'
データフレームの欠損値を最頻値で置換する	df.fillna(df.mode().iloc[0])
ヘッダー行を左寄せに指定する	pd.set_option('colheader_justify', 'left')
option: グラフの色をスラグレーに指定する	color = 'slategrey'
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
日付データからn日分減らす	aDate - datetime.timedelta(days=n)
プロットにグリッド線を入れる	plt.grid(True)
シーケンスを文字列に変換して、空白で結合する	' '.join(map(str, iterable))
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
ライトブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightblue')
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
標準出力を得る	sys.stdout
データフレームの指定された４つの列を取り出す	df[[column, column2, column3, column4]]
集合から任意の要素を取り出す	aSet.pop()
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
レモンシフォン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
黄色い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
rgbの丸マーカーをリストとデータ列についての散布図に描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: グラフの色をパープルに設定する	color = 'purple'
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
データフレームの末尾を見る	df.tail()
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
双方向キューをdequeue	deq.popleft()
項目名がタプル上で定義済みかどうか調べる	key in aDict
線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
データフレームを複数の列によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
option: ダーク・スラテグレーを用いる	color = 'darkslategrey'
文字列を複数行対応として正規表現で区切る	re.split(pattern, s, flags=re.MULTILINE)
グラフの縦軸を対数に変更する	plt.yscale('log')
▼印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
青い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
ヒストグラムの色をインディアンレッドに変更する	plt.hist(データ列, color='indianred')
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
モデルの残差を計算する	目的変数 - model.predict(説明変数)
option: パパイヤウィップ色を用いる	color = 'papayawhip'
散布図をrgbの丸マーカーで描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
組の各値を関数に適用した結果でソートする	sorted(aTuple, key=func)
リストと数列について散布図を描画して、マーカーをダイアモンドに指定する	plt.plot(データ列x, データ列y, marker='D')
option: マーカーを△に変更する	marker = '^'
option: ライトスカイブルーにフォントの色を設定する	color = 'lightskyblue'
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームを降順に'A'列でによって並べる	df.sort_values(by='A', ascending=False)
option: ロイヤルブルーにグラフの色を変更する	color = 'royalblue'
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
データ列の変遷を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
線グラフの色をレモンシフォンに指定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
option: ディープスカイブルーを使う	color = 'deepskyblue'
組の値を昇順に並べ直す	sorted(aTuple, reverse=False)
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ヒストグラムを一点鎖線を使って描画する	plt.hist(データ列, linestyle='dashbot')
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームを二つの列で並べ直す	df.sort_values(by=['A', 'B'])
追加できるように文字コードtextで既存のファイルをオープンする]	open(filepath, mode='a', encoding=text)
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
option: 紺碧にグラフの色を設定する	color = 'azure'
ファイルからエクセルファイルを読み込む	pd.read_excel(filename)
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
線グラフをオーキッド色として描画する	plt.plot(データ列x, データ列y, color='orchid')
option: フォントの色をダークオーキッドに設定する	color = 'darkorchid'
本日が火曜日か	datetime.datetime.today().weekday() == 1
UNIX秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
縦棒グラフをラベンダーブラッシュ色として描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
プロットの色を全般的に明るくする	sns.set(pallete='bright')
option: グラフの色をピンクに設定する	color = 'pink'
文字列中に漢字がある	re.search('[\u4E00-\u9FD0]', s)
リストと配列についての散布図に左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<')
赤色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
スチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ファイルの絶対パス	os.path.abspath(filepath)
棒グラフをパールゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
折れ線グラフの色をフローラルホワイトに変更する	plt.plot(データ列x, データ列y, color='floralwhite')
逆双曲線正弦	math.asinh(x)
データフレームの欠損値を平均値で置換する	df.fillna(df.mean())
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
リストとリストについて散布図をプロットして、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列の先頭から空白を取り除く	s.lstrip()
オブジェクトにプロパティがあるか調べる	hasattr(obj, プロパティ名)
option: グラフの色をチョコレートに設定する	color = 'chocolate'
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
option: 分割記号をコロンにする	sep = ':'
要素がマップの値として含まれている	element in aDict.values()
分類木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
option: ゴールド色を使用する	color = 'gold'
赤い▼マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
文字列リストを結合して一つの文字列にする	''.join(map(str, iterable))
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
アンダーライン付きで文字列を出力する	print(f'\033[4m{value}\033[0m')
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
散布図の三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
クラス分類をランダムフォレストで行う	model = sklearn.ensemble.RandomForestClassifier()
データフレームのカラムのNaNを直前の値にセットする	df[col].fillna(method='ffill')
半透明の破線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ヒストグラムの色をビスクに変更する	plt.hist(データ列, color='bisque')
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
カウンタ間でインターセクション演算する	aCounter & aCounter2
option: 貝殻色を使う	color = 'seashell'
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
option: 配列のデータ型を指定する	dtype = np.int32
nの三乗	n ** 3
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
ヒストグラムの色をディープスカイブルーに変更する	plt.hist(データ列, color='deepskyblue')
データフレームを列によって集約して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
option: ライトグレー色を使用する	color = 'lightgrey'
ランダムにn行をデータフレームから取り出す	df.sample(n)
辞書からキーで指定された項目をポップする	aDict.pop(key)
formatのパターンを用いて文字列から日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
option: 色をダークグリーンに設定する	color = 'darkgreen'
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
整数nはリストのどれかか調べる	n in aList
データフレームのポイントプロットをプロットする	sns.pairplot(hue='カテゴリ列', data=df)
折れ線グラフをラベンダー色を用いて描画する	plt.plot(データ列x, データ列y, color='lavender')
折れ線グラフを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
ライトスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
dateStringをタイムスタンプに変換する	pd.to_datetime(dateString)
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
タプルの項目名とそのエントリをペアとして取り出す	aDict.items()
線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
option: 色をラベンダーブラッシュにする	color = 'lavenderblush'
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
円周率を使う	math.pi
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
option: パウダーブルーにグラフの色を設定する	color = 'powderblue'
やわらかい青色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
縦棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データフレーム全体をインデックスでソートする	df.sort_index()
平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
データフレームのリスト列の相関行列	df[aList].corr()
kを底とする実数の対数を求める	math.log(x, k)
リストを等量でn個にビン分割する	pd.qcut(aList, n)
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
散布図を赤い三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
タプルのn番目からn2番目の部分を取り出す	aTuple[n:n2]
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
rgbの大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
オブジェクトが関数か調べる	callable(obj)
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
ゲインズボロ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: カデットブルー色を使う	color = 'cadetblue'
ファイルを追加モードで開いて]、fとする	f = open(filepath, mode='a')
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
文字列の開始位置から終了位置までの範囲で部分文字列の出現	s.count(sub, start, end)
数値をパラメータについてn階微分する	sympy.diff(e, z, n)
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
option: グラフの種類を実線に変更する	linestyle = 'solid'
データフレームの列の欠損値を直後の値に変更する	df[col].fillna(method='bfill')
柱状図の描き、、正規化する	plt.hist(データ列, density=True)
ファイルパスを文字列の示す文字コードで書き込み用に開く]	open(filepath, mode='w', encoding=s)
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
データフレームの列がxより少ない行を抽出する	df[df[column] < x]
データフレームのカラムをヒストグラムを用いて描画する	plt.hist(df[column])
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
実線としてヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
実数の双曲線正弦	math.sinh(x)
データフレームのNaNを平均値に設定する	df.fillna(df.mean())
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
グラフにy=0の実線を設定する	plt.axhline(y=0, linestyle='solid')
散布図をフクシア色として描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
行列の累積積を計算する	np.cumprod(aArray)
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
option: 印の大きさを変更する	markersize = 2.0
プラットホームはマック	sys.platform.startswith('darwin')
プロットの背景色を暗くする	sns.set(style='darkgrid')
緑色で文字列を出力する	print(f'\033[32m{value}\033[0m')
散布図を赤いクロスマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームの第一四分位数	df.quantile(0.25)
棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
集合にイテラブルを追加更新する	aSet.update(iterable)
柱状図を描画して、ビンをセットする	plt.hist(データ列, bins=区関数)
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
部分文字列によって文字列を二分する	s.partition(sub)
データフレームのカラムを四捨五入して、整数にする	df[col].round().astype(int)
リストとデータ列の散布図に文字列という短い説明用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
縦棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
ロイヤルブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
option: ネイビーにグラフの色を指定する	color = 'navy'
スピアマンの相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
マッピングのキーを列挙する	aDict.keys()
リストの要素を逆順にする	aList[::-1]
横棒グラフをアイボリー色として描画する	plt.barh(データ列x, データ列y, color='ivory')
文字列中に非数字があるか調べる	any(not c.isdigit() for c in s)
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
円プロットの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
小数点数は有限	math.isfinite(x)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
グラフのカラーテーマを濃くする	sns.set(pallete='deep')
ミディアムアクアマリン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
option: フローラルホワイトにグラフの色を設定する	color = 'floralwhite'
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
散布図に青い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ミスティローズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
データフレームを列でグループ化して各グループごとの平均値を計算する	df.groupby(column).mean()
option: バツマーカーを加える	marker = 'x'
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
nかけるn2	n * n2
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
0から始まる無限の整数リスト	itertools.count()
フォーマットfmtとして文字列をdatetime64型に変換する	pd.to_datetime(s, format=fmt)
データフレームの重複した行数のマスク	df.duplicated()
黒い▼マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
列を丸めて整数型にする	ds.round().astype(int)
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
タプルの平均値を求める	sum(aTuple)/len(aTuple)
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
イテラブルとイテラブルについての散布図にrgbのバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列を紫色で表示できる文字列に変換する	f'\033[35m{value}\033[0m'
データフレームの指定した列	df[column]
日付データが木曜日か	aDate.weekday() == 3
正規表現でreplにデータ列の値をまとめて置き換える	ds.replace(pattern, repl, regex=True)
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o')
リストにオブジェクトを追加する	aList.append(element)
nわるn2	n / n2
連立方程式を解く	sympy.solve([e, e2])
縦棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
赤い左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
線グラフをダークシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
option: フォントの色をピンクにセットする	color = 'pink'
ヒストグラムの色をロイヤルブルーにセットする	plt.hist(データ列, color='royalblue')
ヒストグラムをライトスチールブルー色として描画する	plt.hist(データ列, color='lightsteelblue')
辞書をJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
部分文字列で文字列の開始位置以降が開始するかどうか調べる	s.startswith(sub, start)
作画の背景色を白くする	sns.set(style='whitegrid')
散布図の三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームが正規分布からどの程度尖っているか見る	df.skew()
文字列をASCII限定として正規表現で分ける	re.split(pattern, s, flags=re.ASCI)
三変数の最大値を求める	max(x, y, z)
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
データフレームを列名リストを用いてで破壊的に並べる	df.sort_values(by=column, inplace=True)
セットが空でないか	len(aSet) != 0
文字列から部分文字列を全て取り除く	s.replace(sub, '')
リストを配列に変換する	np.array(iterable)
データフレームの列の歪度を計算する	df[col].kurt()
rgbの大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
文字列の両端から不要な空白と改行を取り除く	s.strip()
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
文字列の右端から空白を取り除く	s.rstrip()
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
文字列がタプルに含まれないか調べる	element not in aTuple
タイムスタンプデータを数値に変換する	aDatetime.timestamp()
要素はマッピングの値として含まれているかどうか調べる	element in aDict.values()
ダークスラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
オブジェクトのハッシュ値を計算する	hash(obj)
option: クリムゾンにグラフの色を設定する	color = 'crimson'
二変数の最小値	min(x, y)
タプルの中の最も小さい値	min(aTuple)
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
option: グラフの色をオーキッドに設定する	color = 'orchid'
ライム色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
現在のミリ秒	int(time.time() * 1000)
散布図をパープル色を使って描画する	plt.scatter(データ列x, データ列y, color='purple')
ダークオリーブグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkolivegreen')
データフレームの内容を確認する	df.head()
option: 文字コードを文字列の示すエンコーディングに設定する	encoding = s
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
横軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
スカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='skyblue')
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
モデルを作る	model.fit(説明変数, 目的変数)
実行結果を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
2つのオブジェクトが同一か調べる	obj is obj2
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
横棒グラフをナバホホワイト色として描画する	plt.barh(データ列x, データ列y, color='navajowhite')
散布図をダークマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
xを文字列に変換する	str(x)
カラムの欠損値を最大値で補う	ds.fillna(ds.max())
二次元タプルをflattenする	sum(aTuple)
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
option: 真紅色を使う	color = 'crimson'
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
データフレームのリスト列の中に文字列とがあるかどうか調べる	df[aList].isin([value, value2])
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
n個にリストを等量でビン分割する	pd.qcut(aList, n)
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムの色をミディアムパープルに変更する	plt.hist(データ列, color='mediumpurple')
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
数値の符号をコピーにする	math.copysign(x, x2)
nの16進表記	hex(n)
文字列全体が正規表現にマッチするか調べる	re.fullmatch(pattern, s)
横棒グラフを暗い赤色を用いて描画する	plt.barh(データ列x, データ列y, color='darkred')
シアン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
カラムの欠損値を最小値に増やす	ds.fillna(ds.min())
リストと配列についてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
文字コードの最大値を知る	sys.maxunicode
折れ線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='grey')
文字列を黒色にする	f'\033[30m{value}\033[0m'
ペルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
ミディアムターコイズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: 区切りをカンマにする	sep = ','
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
xが1、もしくは2、もしくは3に等しい	x == 1 or x == 2 or x == 3
n個にデータ列をビン分割する	pd.cut(ds, n)
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ガンマ関数を使う	math.gamma(x)
データ列の年を使う	ds.dt.year
線グラフの色を赤に指定する	plt.plot(データ列x, データ列y, color='red')
ピアソンの積立相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
TSVを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
option: アンティークホワイトにグラフの色をセットする	color = 'antiquewhite'
棒グラフをトマト色として描画する	plt.bar(データ列x, データ列y, color='tomato')
日付時刻データにn分分加算する	aDatetime + datetime.timedelta(minutes=n)
リストとリストの散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
n進文字列をバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
イテラブルとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムの色をミディアムターコイズに変更する	plt.hist(データ列, color='mediumturquoise')
散布図をrgbのクロスマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのカラムを散布図で可視化してカテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ライトコーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームの欠損値をxで埋める	df.fillna(x)
貝殻色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
散布図に四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s')
縦棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
option: 文字列の示す文字コードを使用する	encoding = s
データ列の折れ線グラフをポイント印を用いて描画する	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフをライム色として描画する	plt.plot(データ列x, データ列y, color='lime')
ヒストグラムをオリベドラブ色として描画する	plt.hist(データ列, color='olivedrab')
赤い点線を用いてデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
文字列モジュールをインポートする	import string
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
逆順のキュー	reversed(deq)
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
option: フクシアにグラフの色をセットする	color = 'fuchsia'
双方向キューは空か	len(deq) == 0
英文字から一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
ヒストグラムの色をミディアムブルーに指定する	plt.hist(データ列, color='mediumblue')
タプルの値を昇順に並べる	sorted(aTuple, reverse=False)
縦棒グラフをライトグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgreen')
ディープスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: スノー色を使う	color = 'snow'
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
JSONLファイルにインデックスを付けずにデータフレームを保存する	df.to_csv(filename, index=None)
ダークスレートブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
文字列をカンマによって区切って列挙する	s.split(',')
名前付きタプルを辞書にする	aNamedTupleObject._asdict()
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
縦棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
option: フォントの色をライトグレーに指定する	color = 'lightgrey'
ヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
列によってでデータフレームを破壊的に並べ直す	df.sort_values(by=column, inplace=True)
リスト中の要素が少なくともひとつ真か調べる	any(aList)
日付時刻データが木曜日かどうか	aDatetime.weekday() == 3
一点鎖線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
キューをクリアする	deq.clear()
日付時刻データがタイムスタンプデータより先か調べる	aDatetime < aDatetime2
データフレームの中のNaNが存在する行を削除する	df.dropna()
実線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ヒートマップでデータフレームの相関行列を描画する	sns.heatmap(df.corr())
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
ハニーデューにヒストグラムの色を設定する	plt.hist(データ列, color='honeydew')
データフレームの中で列とカラムの重複を削除する	df.drop_duplicates(subset=[column, column2])
改行なしに文字列をプリントする	print(value, end='')
列を累加する	itertools.accumulate(iterable)
棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
行列の行ごとの最小値	np.min(aArray, axis=1)
オブジェクトのプロパティの値を値にセットする	setattr(obj, プロパティ名, 値)
文字列は全て識別子名か確認する	s.isidentifier()
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
第二コマンド引数を確認する	sys.argv[1]
数に実数を掛ける	x * y
n個にデータフレームの中の列を等量で分割する	pd.qcut(df[col], n)
option: 色を青紫に変更する	color = 'violet'
行数をnに変更する	pd.set_option('display.max_rows', n)
線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
線グラフの色をライトグリーンにする	plt.plot(データ列x, データ列y, color='lightgreen')
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
標準出力	sys.stdout
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
散布図に青い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
option: ミディアムブルーを用いる	color = 'mediumblue'
変数をプリントする	print(value)
カウンタの全数を使う	aCounter.total()
option: 改行コードをWindowsに指定する	newline = '\r\n'
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
データフレームの平均値	df.mean()
ナバホホワイト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
二つの値を改行で区切って表示する	print(value, value2, sep='\n')
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
赤い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
'A'列によってデータフレームを小さい順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
最大値と最小値として正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
nからn2の範囲	range(n, n2)
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
小数点以下の表示精度をn桁にセットする	pd.set_option('precision', n)
実数の逆双曲線余弦を算出する	math.acosh(x)
重複ありでn行をデータフレームからランダムにサンプリングする	df.sample(n, replace=True)
エクセルファイルからデータフレームを読む	pd.read_excel(filename)
データフレームを列によって集約して、最大値を求める	df.groupby(column).max()
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
両端キューの中に値が含まれてるか調べる	element in deq
リストの要素を昇順にソートする	sorted(aList, reverse=True)
カラーバーを横向きに設定する	plt.colorbar(orientation='horizontal')
カウンタを低頻度方から列挙する	aCounter.most_common()[::-1]
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
リストの末尾の要素	aList[-1]
列をビン数nを使って分割する	pd.cut(ds, n)
散布図の大バツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
色名からカラーコードを見る	matplotlib.colors.cnames[色名]
縦棒グラフを紺色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームの中に文字列と文字列がいくつ含まれるか数える	df.isin([value, value2]).sum()
日付時刻データが日曜日	aDatetime.weekday() == 6
option: マーカーを左三角に変える	marker = '<'
実数が正の数	x > 0
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
棒グラフをデピンク色として描画する	plt.bar(データ列x, データ列y, color='deeppink')
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
ふたつのリストのインターセクションを計算する	list(set(aList) & set(aList2))
辞書の値の一覧	aDict.values()
xの小数点以下'4'桁までの文字列にする	':.4f'.format(x)
線グラフの色をパウダーブルーに変更する	plt.plot(データ列x, データ列y, color='powderblue')
option: 色をレベッカパープルに設定する	color = 'rebeccapurple'
横棒グラフの色を変更する	plt.barh(ラベル列, データ列, color=rgb)
文字列は全て印字できるか	s.isprintable()
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
データフレームの標準偏差を求める	df.std()
黒い星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*', c='k')
ダークバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='darkviolet')
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
option: ラベンダーに色を設定する	color = 'lavender'
パーセプトロンとしてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
文字列を最後の部分文字列で分割した場合の前半の文字列	s.rpartition(sub)[0]
文字列がタプルの要素か	element in aTuple
リストとリストについての散布図にrgbの星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフのマーカーを星印にする	plt.plot(データ列x, データ列y, marker='*')
文字列を部分文字列で二分し、残りの文字列を使う	s.partition(sub)[-1]
折れ線グラフの色をミントクリームに変更する	plt.plot(データ列x, データ列y, color='mintcream')
書き込み用にEUCでファイルパスを開く]	open(filepath, mode='w', encoding='euc_jp')
データフレームを関数の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby(関数)]
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
プロットの簡単な説明を表示する	plt.legend()
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
ホットピンク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
二つ並べてリストをヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
実数のn乗を計算する	x ** n
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
option: ペールグリーンを使う	color = 'palegreen'
散布図の四角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
カデットブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
option: 右三角マーカーを加える	marker = '>'
データフレームの列の名前を列挙する	df.columns
配列とリストの散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
マップの項目名の値	aDict[key]
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
折れ線グラフの色をミディアムスレートブルーにセットする	plt.plot(データ列x, データ列y, color='mediumslateblue')
xが1、もしくは2か調べる	x == 1 or x == 2
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
option: 箱ヒゲ図に平均を加える	showmeans = False
スタックの要素数	len(deq)
折れ線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
eの乗数	math.exp(x)
実数が無限大か	math.isinf(x)
文字列を走査し、パターンに複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
パールバイオレットレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
グラフの色をパステル調にする	sns.set(pallete='pastel')
日付時刻データの分	aDatetime.minute
ヒストグラムの色をバイオレットに指定する	plt.hist(データ列, color='violet')
option: ダークグリーンを使う	color = 'darkgreen'
データフレームとデータ列をつなぐ	pd.concat([df, ds], axis=1)
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
データフレーム全体をインデックスによって昇順に並べる	df.sort_index(ascending=True)
プロットの描画で暗くカラーパレットを使用する	sns.set(pallete='dark')
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
ブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
パウダーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
ファイルパスをディレクトリ名とファイル名に分割する	os.path.split(filepath)
ミディアムブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
簡単な説明を加える	plt.legend(['凡例A', '凡例B'])
配列のスカラー倍	aArray * n
option: ダークスレートブルー色を用いる	color = 'darkslateblue'
小数点数の指数部を計算する	math.frexp(x)[1]
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
イテラブルの推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
データフレームとデータ列を横方向に一つにまとめる	pd.concat([df, ds], axis=1)
option: バイナリモードに設定する	mode = 'rb'
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
配列とイテラブルについての散布図に菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
タイムスタンプデータをエポック秒に変換する	aDatetime.timestamp()
データフレームの重複する行をマスクする	df.duplicated()
2つの文字列が同じか調べる	s == s2
option: 追加モードを使う	mode = 'a'
直後の値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(method='bfill')
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
小数点数のサインの逆数	math.asin(x)
オブジェクトが数値か	isinstance(obj, (int,float))
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
数列とイテラブルについての散布図に上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
散らばりを可視化する	plt.scatter(データ列x, データ列y)
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
線グラフをグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='gray')
データ列の尖度を求める	ds.skew()
option: ミディアムブルー色を用いる	color = 'mediumblue'
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
データフレームのリストカラムのpercent分位数を計算する	df[aList].quantile(percent/100)
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
データフレームのリストカラムを百の位で丸める	df[aList].round(-2)
赤い下三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
イテラブルの集合を使う	set(iterable)
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
折れ線グラフにダイアモンド印を使う	plt.plot(データ列x, データ列y, marker='D')
データフレームが重複しているかどうか	df.duplicated()
データフレームのカラムの未入力値を中央値で埋める	df[col].fillna(df[col].median())
散布図の四角印の色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
アルファベットを全部使う	string.ascii_letters
未初期化の配列	np.empty(要素数, dtype=np.int)
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
浮動小数点数で数を整数除算する	x // y
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
数列と数列の散布図に文字列という補足用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
クラス分類の正確さを計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
osモジュールをインポートする	import os
棒グラフをオールドレース色を用いて描画する	plt.bar(データ列x, データ列y, color='oldlace')
いつまでもシーケンスを繰り返す	itertools.cycle(iterable)
option: ライトイエロー色を使う	color = 'lightyellow'
折れ線グラフを赤色として描画する	plt.plot(データ列x, データ列y, color='red')
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
小数点数以上の最小の整数	math.ceil(x)
辞書からキーの値	aDict.get(key)
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
イテラブルをイミュータブルな集合にする	frozenset(iterable)
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
データ列とリストについて散布図を描画して、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
破線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図を赤い星マーカーとして描く	plt.plot(データ列x, データ列y, marker='*', c='r')
nが奇数	n % 2 == 1
リストをリストを境界値としてビンニングする	pd.cut(aList, aList)
データフレームのリストカラムがどれだけ分散しているか調べる	df[aList].var()
縦棒グラフを描いてバーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
数値の変数にnを代入する	e.subs(z, n)
コマンドラインフラグの状態を確認する	sys.flags
option: グラフの色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
回数を制限して文字列中の部分文字列を別の文字列に置き換える	s.replace(sub, newsub, n)
n個にリストを等量でビニングする	pd.qcut(aList, n)
線グラフをダークシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ロイヤルブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
グラフの色を明るくする	sns.set(pallete='bright')
option: グラフの色をタンに設定する	color = 'tan'
オプションで、出力先をファイルに変更する	file = sys.open(filename, 'w')
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
折れ線グラフを色付きの一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
option: ダークマゼンタにグラフの色を設定する	color = 'darkmagenta'
データフレーム全体をインデックスで降順で整列する	df.sort_index(ascending=False)
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
折れ線グラフの色をロージーブラウンにする	plt.plot(データ列x, データ列y, color='rosybrown')
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
グリッドを点線にする	plt.grid(linestyle='dotted')
切り捨てながらnを半分にする	n //= 2
リストをシアンにする	f'\033[36m{value}\033[0m'
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
ローングリーンにヒストグラムの色を変更する	plt.hist(データ列, color='lawngreen')
文字列のケースを逆にする	s.swapcase()
データフレームのカラムの中に存在する日付データと文字列の合計を求める	df[col].isin([value, value2]).sum()
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
オプションで、出力先を標準出力に指定する	file = sys.stdout
ダーク・スラテグレー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
データフレームの数値をまとめて四捨五入する	df.round()
散布図に上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
全要素が初期値の行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
青紫色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
日付時刻データの日数を見る	aDatetime.day
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
縦棒グラフをダークオリーブグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
データフレームのn行目を削除する	df.drop(n, axis=0)
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
データ列の曜日は何日目か見る	ds.dt.dayofweek
横棒グラフをやわらかい青色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
浮動小数点数の最大値	sys.float_info.max
タイムスタンプデータをn日前に戻す	aDatetime - datetime.timedelta(days=n)
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームの重複を見る	df.duplicated()
折れ線グラフの色をダークオーキッドに指定する	plt.plot(データ列x, データ列y, color='darkorchid')
散布図を左三角マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='<')
マルーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
データフレームから数値データの列を抽出する	df.select_dtypes('number')
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
カウンタをクリアする	aCounter.clear()
数式を因数分解する	sympy.factor(e)
論理値型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int32)
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
カラムの中に文字列と文字列が存在する	ds.isin([value, value2])
nが一桁の整数か調べる	-9 <= n <= 9
日付データにn秒分、加える	aDate + datetime.timedelta(seconds=n)
タプルの先頭を捨てる	aTuple[1:]
組の平均値	sum(aTuple)/len(aTuple)
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
インディアンレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
線グラフの色をゲインズボロに変更する	plt.plot(データ列x, データ列y, color='gainsboro')
ヒストグラムをダークレッド色で描画する	plt.hist(データ列, color='darkred')
データ列のpercentパーセンタイルを計算する	ds.quantile(percent/100)
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
線グラフをダークサーモン色として描画する	plt.plot(データ列x, データ列y, color='darksalmon')
散布図に▼マーカーを使用する	plt.scatter(データ列x, データ列y, marker='v')
日付データと日付データの時間差は何秒か知る	(aDate - aDate2).total_seconds()
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgray')
散布図にrgbの右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列をカンマで区切り、、文字列リストに変換する	s.split(',')
回帰分析をランダムフォレストでする	model = sklearn.ensemble.RandomForestRegressor()
横棒グラフをピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='pink')
プロットの用途を論文に設定する	sns.set(context='paper')
クラス分類をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
辞書のキーとその値をペアとして取り出す	aDict.items()
パターンにマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
淡い茶色色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
横棒グラフを黄色色として描画する	plt.barh(データ列x, データ列y, color='yellow')
変数をアンダーライン付きでプリントする	print(f'\033[4m{value}\033[0m')
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
option: 色をオレンジレッドに指定する	color = 'orangered'
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
アイボリー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
データフレームの中にがあるかどうか調べる	df.isin([value])
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
シスル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
ライム色でヒストグラムを描画する	plt.hist(データ列, color='lime')
ピンク色としてヒストグラムを描画する	plt.hist(データ列, color='pink')
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
散布図の大バツ印を黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
オブジェクトがいつまでも繰り返す列	itertools.repeat(element)
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
ライム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
nまでの奇整数列	list(range(1, n, 2))
インプレースに両端キューの要素を逆に並べ直す	deq.reverse()
データ列をインポートする	import pandas as pd
ラベンダーブラッシュにヒストグラムの色を設定する	plt.hist(データ列, color='lavenderblush')
エクセルデータファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
散布図に黒いダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: バリーウッド色を使う	color = 'burlywood'
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
データフレームを破壊的に昇順に'A'列によってソートする	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフの色をパールゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
エクセルファイルファイルでJSONLファイルにデータフレームを書き込む	df.to_excel(filename)
赤い丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームを各列と列の組み合わせ毎にグループ化し、、個数を求める	df.groupby([column, column2], as_index=False).count()
横棒グラフをオリーブ色を用いて描画する	plt.barh(データ列x, データ列y, color='olive')
散布図の印をダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
option: 読み込まないフッタをnに変更する	skipfooter = n
双方向キュー中の要素のインデックス	deq.index(element)
データ列の出現頻度を可視化する	plt.hist(データ列)
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームを'A'列を用いてによって降順に整列する	df.sort_values(by='A', ascending=False)
黒い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
xが一桁の正の数か調べる	0 <= x <= 9
データフレームのリストカラムの欠損値を最小値にする	df[aList].fillna(df[aList].min())
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
散布図に菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
カウンタ間で和集合	aCounter | aCounter2
ブラック色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
データ列の四分位を作図する	plt.boxplot(データ列)
複素数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=bool)
option: セパレータを改行にする	sep = '\n'
ファイルを書き込み用にオープンする]	open(filepath, mode='w')
データフレームを'A'列と'B'列の値によってグループ化し記述統計量を求める	df.groupby(['A', 'B']).describe()
コマンドライン引数を列挙する	sys.argv
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
多次元データを主成分分析として淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
データフレームの欠損値を後の行の値で埋める	df.fillna(method='bfill')
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
双方向キューの末尾から要素を取り除く	deq.pop()
文字列を隔離する	sys.intern(s)
サーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
データフレームのカラムのタイムゾーンを日本に変更する	df[col].tz_convert('Asia/Tokyo')
文字列の中で大文字・小文字を無視して正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
表データとデータ列を横向きに連結する	pd.concat([df, ds], axis=1)
縦棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
空のチェーンマップを生成する	collections.ChainMap()
インディアンレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
多次元データを特異値分解として淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
データフレームのn行より前抽出する	df[:n]
縦棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
現在が水曜日か	datetime.datetime.today().weekday() == 2
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
アルファベットの小文字を全部使う	string.ascii_lowercase
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
散布図の右三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='teal')
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
横棒グラフの色を濃い青にする	plt.barh(データ列x, データ列y, color='darkblue')
データフレームのカラムのNaNを最小値に設定する	df[col].fillna(df[col].min())
リストの要素を昇順に並べ変える	sorted(aList, reverse=True)
データフレームから型のみ抽出する	df.select_dtypes(ty)
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
タプルをコピーする	aDict.copy()
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
option: グラフを点線に設定する	linestyle = 'dotted'
散布図をパパイヤウィップ色として描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
正規表現モジュールをインポートする	import re
ダークオーキッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
日付データからn週間を引く	aDate - datetime.timedelta(weeks=n)
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
２つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
列の各データ値の出現数を求める	ds.value_counts()
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
option: ドジャーブルー色を使う	color = 'dodgerblue'
ベージュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
モデルのバージョン	version = 'wcce2022-0.1'
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ライムグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
実数が整数	x.is_integer()
散布図の色を濃いシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
option: ダークグレー色を使用する	color = 'darkgray'
青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
データ列の値がNaNかどうか調べる	ds.isna()
データフレームの末尾n行を選択する	df.tail(n)
散布図の△マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
文字列の両端から部分文字列を消す	s.strip(sub)
散布図を青緑色として描画する	plt.scatter(データ列x, データ列y, color='turquoise')
実数の正接の逆数を算出する	math.atan(x)
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
option: トマトに色を設定する	color = 'tomato'
カラーバーを水平で描画する	plt.colorbar(orientation='horizontal')
折れ線グラフの色をフローラルホワイトにセットする	plt.plot(データ列x, データ列y, color='floralwhite')
リストを順番付けする	enumerate(aList)
十六進数文字列をbytesizeバイトのバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
データフレームのカラムの欠損値を最大値に変更する	df[col].fillna(df[col].max())
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
要素∉集合	element not in aSet
折れ線グラフの四角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
グラフの中に枠なしの補足を入れる	plt.legend(frameon=False)
リストの中の最小値を求める	min(aList)
リストが空	len(aList) == 0
棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
ミディアムシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
データ列を10の位で四捨五入する	ds.round(-1)
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
ディレクトリをモジュールを検索するパスに追加する	sys.path.append(dir)
破線に線グラフのラインスタイルを設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
配列の推移を青い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
プロットの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
データフレームのカラムの分散	df[col].var()
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
文字列リストを連結して一つの文字列にする	''.join(map(str, iterable))
リストの要素数だけ繰り返す	range(len(aList))
ファイルのファイルサイズ	os.path.get_size(filepath)
option: ダークオリーブグリーンにフォントの色を設定する	color = 'darkolivegreen'
実数のn乗の浮動小数点数剰余	pow(x, n, y)
新しい文字列で文字列を置換する	s.replace(sub, newsub)
0からnの範囲で	range(n)
折れ線グラフをポイント印を用いて描画する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをイエローグリーン色として描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
mathモジュールを使う	import math
データフレームのどの値が頻出か調べる	df.mode()
データフレームの中で何行、重複するか確認する	df.duplicated().sum()
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
データフレームを各列毎にグループ化して列の標準偏差を求める	df.groupby(column)[column2].std()
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
横棒プロットをプロットし、、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
最頻値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mode().iloc[0])
n個にリストを等間隔で分割する	pd.cut(aList, n)
option: オーキッドにフォントの色を設定する	color = 'orchid'
青い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
線グラフの色を青緑に指定する	plt.plot(データ列x, データ列y, color='teal')
カウンタの最頻出なキーを計算する	aCounter.most_common()[0]
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
折れ線グラフの大バツ印の大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
スクリプトファイルと同じディレクトリのファイルパスのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
データフレームを列によって並べて、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
nをn2で割った余りをnに代入する	n %= n2
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
リストの末尾のn要素を取り除く	aList[:-n]
リストとデータ列について散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: ８ビット整数型を用いる	dtype = np.int8
散布図の丸印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
グラフの色を指定する	sns.set(pallete=パレット名)
縦棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
文字列を黒色化する	f'\033[30m{value}\033[0m'
標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
実数が無限大かどうか調べる	math.isinf(x)
イテラブルとイテラブルについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列が全て印字できるか調べる	s.isprintable()
▲印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームのポイントプロットを描く	sns.pairplot(hue='カテゴリ列', data=df)
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
配列とイテラブルの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
グラフの色を全般的に淡くする	sns.set(pallete='muted')
両端キュー中の値の数を数える	deq.count(element)
日付時刻データの時刻	aDatetime.time()
コサインを計算する	math.cos(x)
列とイテラブルを連結する	itertools.chain(iterable, iterable2)
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
折れ線グラフの左三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: ライトスカイブルーにグラフの色を変更する	color = 'lightskyblue'
オブジェクトはタプルの要素かどうか調べる	element in aTuple
０で全要素を初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
オリーブ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
折れ線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
カウンタの最頻出な項目を求める	aCounter.most_common()[0]
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
折れ線グラフのクロスマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
nが偶数かどうか調べる	n % 2 == 0
ダークシアグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
ふたつの集合のユニオン	aSet.union(aSet2)
グラフの用途を画面に設定する	sns.set(context='notebook')
JSONを使う	import json
OSはマック	sys.platform.startswith('darwin')
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
option: 色をロージーブラウンに設定する	color = 'rosybrown'
文字列を大文字・小文字を無視して正規表現で分ける	re.split(pattern, s, flags=re.IGNORECASE)
データフレームを表示するとき、小数点以下n桁まで表示するようにする	pd.set_option('precision', n)
option: グラフの色を青紫に設定する	color = 'violet'
二つの数値を順に出力する	print(value, value2)
データフレームの内容を見る	df.head()
折れ線グラフのバツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
散布図に黒い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
カテゴリデータを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
option: グラフの色をゴールドにする	color = 'gold'
日付時刻データからn日分減らす	aDatetime - datetime.timedelta(days=n)
データフレームを散布図で描画して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
改行する	print()
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
文字列が部分文字列で終了するかどうか	s.endswith(sub)
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
折れ線グラフのダイアモンドマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームを列でグループ分けしてそれぞれのグループ毎の件数を知る	df.groupby(column).size()
グラフを論文用に設定する	sns.set(context='paper')
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
option: ライトゴールドロディイエローに色を設定する	color = 'lightgoldenrodyellow'
カラーマップとしてヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
option: ライトスチールブルーを使う	color = 'lightsteelblue'
データ列を分割数nでビン分割する	pd.cut(ds, n)
ホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
グラフの描画で色差別なくカラーパレットを用いる	sns.set(pallete='colorblind')
option: グラフの色をダークグレーに変更する	color = 'darkgray'
教師データで分類モデルを学習する	model.fit(説明変数, 目的変数)
ピアソンとして表データの列と列の相関行列を算出する	df[[column, column2]].corr(method='pearson')
nがn2か調べる	n == n2
option: ミッドナイトブルー色を用いる	color = 'midnightblue'
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
option: ミディアムバイオレットレッドに色を設定する	color = 'mediumvioletred'
タイムスタンプデータの時刻	aDatetime.hour
文字列が小文字か確認する	s.islower()
カウンタをリストに変換する	list(aCounter)
ファイル名がJSONファイルか	filename.endswith('.json')
カウンタの上位をリストとして得る	aCounter.most_common(k)
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
nの無限の数列	itertools.repeat(n)
option: 四角印を加える	marker = 's'
option: グラフの種類を実線に設定する	linestyle = 'solid'
散布図に大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
日付データは日付データと同時かどうか調べる	aDate == aDate2
nとn2の論理和を求める	n | n2
文字列が全て英数字かどうか調べる	s.isalnum()
数列とリストについて散布図を描画して、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
縦棒グラフをライトブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightblue')
データ列間の平均絶対誤差を計算する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
ペルー色でヒストグラムを描画する	plt.hist(データ列, color='peru')
二つの列でデータフレームをソートし、、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
線グラフをインディゴ色を用いて描画する	plt.plot(データ列x, データ列y, color='indigo')
ひとつでも大文字が文字列内に含まれる	any(c.isupper() for c in s)
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフのダイアモンドマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
データフレームのカラムの欠損値をモードで補う	df[col].fillna(df[col].mode().iloc[0])
リッジ回帰とロッソ回帰のハイブリットモデルを作成する	model = sklearn.linear_model.ElasticNet()
散布図をアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
深紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
データフレームの中にある日付データと文字列の数をカウントする	df.isin([value, value2]).sum()
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
nがn2よりも小さいかどうか調べる	n < n2
データフレームを列によってグループ化し、、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
配列の分散を求める	np.var(aArray)
リストとリストの散布図をプロットして、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
配列を平坦にする	aArray.flatten()
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
配列の形	aArray.shape
データフレームを２つの列によって降順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
カテゴリ列でグループ化して、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
データ列を使用する	import pandas as pd
オレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
折れ線グラフに黒いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
文字列は十進数字かどうか確認する	s.isdecimal()
リッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
箱ひげ図を描画し、、平均値を追加する	plt.boxplot(データ列, showmeans=True)
データフレームから型リストで指定されたデータ型の列だけ除外する	df.select_dtypes(exclude=typeList)
両端キューが空でないか調べる	len(deq) != 0
紺色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
マッピングのコピー	dict(aDict)
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
実数を万の位で丸める	round(x, -4)
ライトスチールブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
散布図の星印の大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
文字列が文字列リストに含まれるか調べる	s in aStringList
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
文字列は文字列より辞書順で前	s < s2
タイムスタンプデータは何時か知る	aDatetime.hour
データフレームを複数の列の値によってグループ化し要約統計量を求める	df.groupby(columns).describe()
n2がnより大きく、かつ、n3より小さいか調べる	n < n2 and n2 < n3
日付データをn週間前にする	aDate - datetime.timedelta(weeks=n)
ファイルをEUCとして開く]	open(filepath, encoding='euc_jp')
ファイルからディレクトリ名取り出す	os.path.dirname(filepath)
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ヒストグラムを実線としてプロットする	plt.hist(データ列, linestyle='solid')
部分文字列で文字列の開始位置以降が始まるかどうか確認する	s.startswith(sub, start)
縦軸の目盛を表示しない	plt.yticks([])
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
入力ストリーム全体を行単位で分割して読み込む	f.readlines()
散布図の左三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
黒い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
文字列タブ区切りのファイルからn番目のカラムを行としてCSVファイルを読み込む	pd.read_csv(filename, index_col=n)
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
両端キューをデキューする	deq.popleft()
データ列とリストについて散布図を描画して丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ダークオレンジ色としてヒストグラムを描画する	plt.hist(データ列, color='darkorange')
アイリスのデータセットをデータフレームとしてロードする	sns.load_dataset('iris')
文字列がタプルに含まれるか調べる	element in aTuple
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
チョコレート色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
フォレストグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをパープル色として描画する	plt.barh(データ列x, データ列y, color='purple')
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
線グラフの色をパールゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
nからn2を引いてnに代入する	n -= n2
ダークシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
縦棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
プロットを正方形にする	plt.axis('equals')
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
散布図のダイアモンドマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
辞書から項目名の値	aDict.get(key)
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
回帰分析をバギングとして行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
折れ線グラフに右三角印を使う	plt.plot(データ列x, データ列y, marker='>')
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
区切りで文字列を区切って列挙する	s.split(sep)
二つの文字列が等しくない	s != s2
タプルから最後に追加した項目をポップする	aDict.popitem()
option: グレー色を用いる	color = 'grey'
折れ線グラフの印を△印にする	plt.plot(データ列x, データ列y, marker='^')
列を10の位で四捨五入する	ds.round(-1)
ヒストグラムの色をネイビーにする	plt.hist(データ列, color='navy')
データフレームの値をValueMapでまとめて置換する	df.replace(ValueMap)
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
散布図をダークレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkred')
黒い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
折れ線グラフをシーグリーン色として描画する	plt.plot(データ列x, データ列y, color='seagreen')
option: パパイヤウィップに色を設定する	color = 'papayawhip'
データフレームのpercentパーセンタイル	df.quantile(percent/100)
白色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
第一引数で指定されたファイルの名前	sys.argv[1]
データ列は何日か見る	ds.dt.day
ヒストグラムを一点鎖線を用いて描画する	plt.hist(データ列, linestyle='dashbot')
ヒストグラムを上限から下限までの区間で描画する	plt.hist(データ列, range=(start, end))
リストの最後から値を得る	aList.pop()
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ミディアムターコイズにヒストグラムの色を変更する	plt.hist(データ列, color='mediumturquoise')
実数の絶対値を求める	math.fabs(x)
データフレームのリスト列の欠損値を平均で補う	df[aList].fillna(df[aList].mean())
行列の累積積	np.cumprod(aArray)
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
option: バッファリングのサイズを指定する	buffering = 4096
横棒グラフをミディアムターコイズ色として描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
データフレームの列が文字列で始まらない行を取り出す	df[not df[column].str.startswith(s)]
正則化付き線形回帰モデルを準備する	model = sklearn.linear_model.ElasticNet()
データ列が何分か確認する	ds.dt.minute
散布図にバツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='x')
文字列が全て英数字	s.isalnum()
２つのデータフレームを結合する	pd.merge(df, df2)
横棒グラフを小麦色色として描画する	plt.barh(データ列x, データ列y, color='wheat')
データフレームのリスト列の欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
破壊的にデータフレームを'A'列を用いてでソートする	df.sort_values(by='A', inplace=True)
マップから最後に追加した項目をポップする	aDict.popitem()
列をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
エクセルファイルファイルからを読み込む	pd.read_excel(filename)
データフレームの値を正規表現でまとめてreplに置換する	df.replace(pattern, repl, regex=True)
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
ヒストグラムをプラム色を使って描画する	plt.hist(データ列, color='plum')
option: コーンフラワーブルー色を用いる	color = 'cornflowerblue'
散布図をミディアムブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ミディアムシアグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: ダークターコイズ色を使用する	color = 'darkturquoise'
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
十六進数文字列を整数に変換する	int(s, 16)
ファイルを全部読み込む	f.read()
ロバストな線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
折れ線グラフのマーカーを上三角にする	plt.plot(データ列x, データ列y, marker='^')
散布図に青い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
コーンズシルク色でヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
サドルブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームのグループ毎の個数	df.groupby(column).count()
x座標の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
本日のタイムスタンプを使う	datetime.datetime.today()
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
サポートベクターマシンとして回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームのカラムの欠損値を最頻値にする	df[col].fillna(df[col].mode().iloc[0])
スクリプトファイルと同じディレクトリのファイルのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
イテラブルのセット	set(iterable)
ラベンダーブラッシュ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
菱形マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
浮動小数点数が負の数か判定する	x < 0
散布図に右三角印を加える	plt.scatter(データ列x, データ列y, marker='>')
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
日付データは何日か知る	aDate.day
タイムスタンプデータが日付時刻データと同時かどうか判定する	aDatetime == aDatetime2
要素がマッピングの値として含まれているか確認する	element in aDict.values()
データフレームの最初n行	df.head(n)
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
データフレームのカラムが何秒か見る	df[col].dt.second
組の合計値	sum(aTuple)
変数について数値の微分を行う	sympy.diff(e, z)
耐火レンガ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
データフレームを'A'列でまとめたグループを使う	df.groupby('A')
日付時刻をインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
縦棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
実数を文字列にする	str(x)
カンマで文字列を区切って、文字列リストにする	s.split(',')
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
rgbの菱形マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
文字列中の部分文字列を文字列に置換する	s.replace(sub, newsub)
データフレームのカラムのpercentパーセンタイル	df[col].quantile(percent/100)
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
option: フォントの色をダークオーキッドに指定する	color = 'darkorchid'
配列の合計値	np.sum(aArray)
イテラブルを文字列に変換して、'改行で連結する	'\n'.join(map(str, iterable))
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
既存のファイルをBOM付きとして追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
option: ダークオレンジ色を使う	color = 'darkorange'
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
データフレームの先頭n行を見る	df.head(n)
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
ブルーバイオレット色で線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
こんにちは世界と出力する	print('Hello World')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
n進文字列を整数に変換する	int(s, n)
縦棒グラフをパールバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='palevioletred')
棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
配列の形状	aArray.shape
データ列を丸めて、整数型にする	ds.round().astype(int)
要素がタプルの値に含まれていない	element not in aDict.values()
黄色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
リストのn番目以降の部分を抽出する	aList[n:]
ヒストグラムの色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
数値の簡略化を行う	sympy.sympify(e)
nをn2で割る	n / n2
ヒストグラムを茶色色を使って描画する	plt.hist(データ列, color='brown')
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
データフレームを関数の値でグループ化し、要約統計量を求める	df.groupby(関数).describe()
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
全要素を０で初期化した論理値型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
データ列の秒を見る	ds.dt.second
日付データの曜日を求める	aDate.weekday()
折れ線グラフを青い一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ベクトルの値を変更する	aArray[行番号, 列番号] = 指定の値
横棒グラフをミスティローズ色を用いて描画する	plt.barh(データ列x, データ列y, color='mistyrose')
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
インディアンレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
モカシン色でヒストグラムを描画する	plt.hist(データ列, color='moccasin')
データ列の折れ線グラフをダイアモンド印として描画する	plt.plot(データ列x, データ列y, marker='D')
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
option: カーキ色を用いる	color = 'khaki'
ヒストグラムを暗い赤色として描画する	plt.hist(データ列, color='darkred')
データフレームのリストカラムの要約統計量	df[aList].describe()
option: 三角マーカーを描画する	marker = '^'
辞書のキーを列挙する	aDict.keys()
散布図の左三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
縦棒グラフを描画して左寄せする	plt.bar(ラベル列, データ列, align='edge')
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
オブジェクトのハッシュ値を算出する	hash(obj)
リストを多重集合に変換する	collections.Counter(iterable)
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
リストをシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
イテラブルから重複なくn要素ランダムに選ぶ	random.sample(iterable, k=n)
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
ホットピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
xを印字できる文字列にする	ascii(x)
折れ線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
散布図をロージーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
横棒グラフをダークターコイズ色を使って描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
nが負の整数か調べる	n < 0
ヒストグラムをカラーマップとして描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
nかけるn2を求める	n * n2
ガンマ関数	math.gamma(x)
option: 色をミスティローズに変更する	color = 'mistyrose'
折れ線グラフの上三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
ゴールド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
option: マーカーの色を変える	markerfacecolor = '#800080'
横棒グラフをダークサーモン色として描画する	plt.barh(データ列x, データ列y, color='darksalmon')
全ての印字可能な文字	string.printable
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
方程式の解	sympy.solve(e)
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
散布図をブランチドアーモンド色を使って描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
正規分布のパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
Pandasでデータ列のエポック秒からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
リネン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
データフレームを昇順に列で並べる	df.sort_values(by=column, ascending=True)
散布図にダイアモンド印を用いる	plt.scatter(データ列x, データ列y, marker='D')
クラス分類の真陽性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データ列が正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
xが-9以上、9以下か調べる	-9 <= x <= 9
辞書順で文字列が文字列より前か確認する	s < s2
プログラムの実行をエラーとして止める	sys.exit(1)
散布図の星印を青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
イテラブルを縦軸、リストをx軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
行列を平坦にする	aArray.flatten()
文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
横棒グラフをロージーブラウン色として描画する	plt.barh(データ列x, データ列y, color='rosybrown')
列によってデータフレームをソートし、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
０で全要素を初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
ダークシアン色としてヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
回帰モデルを学習する	model.fit(説明変数, 目的変数)
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
データフレームを列によってグループ分けして、グループの最大値を算出する	df.groupby(column).max()
ヒストグラムの色をダークオーキッドにセットする	plt.hist(データ列, color='darkorchid')
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームのリストカラムの未入力値を直後の値で補う	df[aList].fillna(method='bfill')
イテラブルから配列を作る	np.array(iterable)
nとn2のビット積	n & n2
確率的勾配降下でクラス分類をする	model = sklearn.linear_model.SGDClassifier()
option: ダークオレンジを使う	color = 'darkorange'
オリベドラブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
折れ線グラフの色をシエナにする	plt.plot(データ列x, データ列y, color='sienna')
データフレームを2つの列で並べ直し、、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
折れ線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
option: 線の種類を一点鎖線に変更する	linestyle = 'dashbot'
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
実数を小数点以下第一位で丸める	round(x, 1)
aListn番目から要素をポップする	aList.pop(n)
キーワード引数で辞書に更新する	aDict.update(**kwargs)
折れ線グラフの大バツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
三整数のGCD	math.gcd(n, n2, n3)
数式の平方根を求める	sympy.sqrt(e)
辞書順で文字列が文字列より前か調べる	s < s2
横軸の最大・最小値を変更する	plt.xlim(最小値, 最大値)
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: グレーにフォントの色をセットする	color = 'gray'
option: グラフの色をビスクに指定する	color = 'bisque'
多次元データをSVDで濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
スラグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='slategray')
アクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
横棒グラフをコーンフラワーブルー色として描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
シーグリーン色でヒストグラムを描画する	plt.hist(データ列, color='seagreen')
縦棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
データフレームの全カラムを散布図で見る	sns.pairplot(df)
データフレームのひとつの列のみ説明変数にする	説明変数 = df[['列名']]
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
日付データが日付データより早いか調べる	aDate < aDate2
リストの末尾に文字列を追加する	aList.append(element)
破壊的に昇順に列名リストによってデータフレームを並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
有理数モジュールを使用する	import fractions
黄色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
エラーを出力する	sys.stderr
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
タプルのn番目からn2番目までの部分	aTuple[n:n2]
逆双曲線余弦	math.acosh(x)
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
列を関数でフィルタする	map(func, iterable)
ファイルパスから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
データ列の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
アンティークホワイト色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
散布図を黒い下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
画面用にグラフを変更する	sns.set(context='notebook')
散布図の左三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
xの小数点以下'4'桁までを表示する	print(':.4f'.format(x))
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
バギングとしてクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
データフレームを散布図で図示する	sns.scatterplot(data=df, x='列名', y='列名')
クラス分類の再現率を算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
データフレームを丸めて、整数にする	df.round().astype(int)
データフレームのNaNを後の値に設定する	df.fillna(method='bfill')
リストの出力を改行なしに行う	print(value, end='')
option: 淡いピンク色色を用いる	color = 'lightpink'
既存のベクトルを元に全要素が1の配列を作る	np.ones_like(aArray)
データフレームのリスト列の中にいくつNaNが存在するか数える	df[aList].isna().sum()
ヒストグラムの色をライトゴールドロディイエローに変更する	plt.hist(データ列, color='lightgoldenrodyellow')
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
常用対数	math.log10(x)
デフォルトでグラフをいい感じに指定する	sns.set()
モデルの残差を求める	目的変数 - model.predict(説明変数)
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
クラス分類のリコールを計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
シーケンスの重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
PandasでデータフレームのcollのUNIX時間からdatetime64型にする	pd.to_datetime(df[col], unit='s', utc=True)
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
ヒストグラムの色をミディアムバイオレットレッドに指定する	plt.hist(データ列, color='mediumvioletred')
nとn2の論理積	n & n2
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
ファイルの入力ストリームを求める	open(filepath)
折れ線グラフに青い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
文字列中にひとつでも非英数字があるか調べる	any(not c.isalnum() for c in s)
デピンク色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
ファイルを書き込みモードでオープンして]fとする	f = open(filepath, mode='w')
折れ線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
JSONを使用する	import json
時計回りに円グラフを描画する	plt.pie(データ列, startangle=90, counterclock=False)
両端キューの末尾から値を取り除く	deq.pop()
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
リストとリストについての散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
昇順にデータフレームを'A'列を用いて並べ直して、更新する	df.sort_values(by='A', ascending=True, inplace=True)
option: ライトグリーンにグラフの色を設定する	color = 'lightseagreen'
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
スレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
折れ線グラフの上三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: 印をダイアモンドに変更する	marker = 'D'
0からN未満までの行列	np.arange(N)
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
追加モードとしてファイルをオープンする]	open(filepath, mode='a')
x座標だけ目盛り線	plt.grid(axis='x')
棒グラフをダークスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
平均値付き箱ひげ図を描く	plt.boxplot(データ列, showmeans=True)
プロットのカラーパレットを淡くする	sns.set(pallete='muted')
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ダークスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
リストの末尾を取り除く	aList[:-1]
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
データフレームのリストカラムの中のNaNの合計をカウントする	df[aList].isna().sum()
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
線グラフを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
文字列をシンボルにして変数にする	z = sympy.Symbol(s)
散布図をフォレストグリーン色として描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
折れ線グラフの色をダークブルーにセットする	plt.plot(データ列x, データ列y, color='darkblue')
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
配列とリストの散布図に黒い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
凡例の場所を(x,y)に指定する	plt.legend(loc=(x, y))
ラベンダーブラッシュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
書き込みできるようにファイルを開く]	open(filepath, mode='w')
option: フローラルホワイトに色を設定する	color = 'floralwhite'
現在のタイムスタンプ	int(time.time())
option: イエローグリーン色を使う	color = 'yellowgreen'
option: グリーンにフォントの色を変更する	color = 'green'
ライトスチールブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
リストの中の一番小さい値	min(aList)
データ列の秒を使う	ds.dt.second
クラス分類をサポートベクターマシンを使って行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ダークバイオレット色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
option: グラフの色を貝殻に設定する	color = 'seashell'
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームを列によって並べ直して新しいインデックスを加える	df.sort_values(columns).reset_index()
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
集合から別の集合の要素を全て除く	aSet.difference_update(aSet2)
実数の平方根	math.sqrt(x)
データフレームの指定された列を取り出す	df[column]
列によってデータフレームを集約してそれぞれのグループごとの最小値を求める	df.groupby(column).min()
nをn2だけ増やす	n += n2
ミディアムシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
ディープスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: グラフの色を小麦色に指定する	color = 'wheat'
データ列を四捨五入する	ds.round()
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
ラベンダー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
折れ線グラフの左三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
カテゴリ別で色付けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
オーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
データフレームのリストカラムの尖度	df[aList].skew()
表を'A'列をキーにして並べる	df.sort_values(by='A')
option: スプリンググリーン色を使う	color = 'springgreen'
凡例の位置を(x,y)に変更する	plt.legend(loc=(x, y))
主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgray')
折れ線グラフに黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
列の各データ値の出現回数	ds.value_counts()
文字列を最後の部分文字列で二分し、後半の文字列を見る	s.rpartition(sub)[-1]
縦棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
二つの行列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
現在は何分か知る	datetime.date.today().minute
データ列の中にいくつNaNがあるか数える	ds.isna().sum()
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: オールドレースにフォントの色を設定する	color = 'oldlace'
ユニークな値を要素とする行列を見る	np.unique(aArray)
文字列を部分文字列で二分し、最初の文字列を見る	s.partition(sub)[0]
改行	'\n'
データフレームからn行サンプリングする	df.sample(n)
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
n2分のnを計算する	n / n2
リストと配列についての散布図にrgbの▼マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列を空白によって区切って、整数のリストに変換する	map(int, s.split())
option: マーカーを丸に指定する	marker = 'o'
両端キューに値をスタックする	deq.append(element)
整数nを二進文字列に変換する	bin(n)[2:]
折れ線グラフの菱形印を青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
タイムスタンプデータが土曜日か調べる	aDatetime.weekday() == 5
ヒストグラムを赤色として描画する	plt.hist(データ列, color='red')
線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームをグループ化し、それぞれの列に対し平均値を算出する	df.groupby(column)[column2].mean()
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームの列の一意な値の個数	df[col].nunique()
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
グラフに目盛線を入れる	plt.grid(True)
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
スクリプトのファイルの名前	sys.argv[0]
スタックの先頭を見る	deq[0]
ベージュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
option: フォレストグリーン色を使用する	color = 'forestgreen'
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
オーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
option: ピーチパフ色を使う	color = 'peachpuff'
option: フォントの色をアンティークホワイトに指定する	color = 'antiquewhite'
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
ライムグリーン色でヒストグラムを描画する	plt.hist(データ列, color='limegreen')
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
実数は有限	math.isfinite(x)
大バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
クラス分類をRANSACでする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
Pandasで、エポック秒のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
本日が何年か知る	datetime.datetime.today().year
option: 色を暗い赤に変更する	color = 'darkred'
文字列全体を複数行対応としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データ列の移り変わりを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
丸印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
浮動小数点数のn乗	pow(x, n)
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
option: パパイヤウィップ色を使う	color = 'papayawhip'
文字列中にひとつでも非数字が含まれるか	any(not c.isdigit() for c in s)
イテラブルを累積した列	itertools.accumulate(iterable, operator.mul)
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
option: 色をやわらかい青に設定する	color = 'cornflowerblue'
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームのカラムを10の位で四捨五入して、整数型にする	df[col].round(-1).astype(int)
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
リストとデータ列について散布図を描画し、、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
データフレームを２つの列の値ごとにグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
データフレームの列と列の相関行列をヒートマップを使って描画する	sns.heatmap(df[[column, column2]].corr())
nがn2よりも大きいか調べる	n > n2
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategrey')
リストをnから番号付けする	enumerate(aList, start=n)
線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
セットをリストに変換する	list(aSet)
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
データフレームのリストカラムの平均値を算出する	df[aList].mean()
文字列はPythonのキーワード	keyword.iskeyword(s)
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
nが正の数	n > 0
カテゴリでグループ化してデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
option: チョコレートを使う	color = 'chocolate'
option: イエローグリーンにフォントの色を設定する	color = 'yellowgreen'
option: 色をピンクに指定する	color = 'pink'
データフレームの列に重複があればマスクする	df.duplicated(subset=column)
データフレームの中の欠損値を消す	df.dropna()
第一コマンド引数	sys.argv[1]
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
グラフを暗くする	sns.set(pallete='dark')
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
データ列とリストについて散布図を描き、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
実数の小数部	math.modf(x)[0]
折れ線グラフの▽印の太さを変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
四角マーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームのリストカラムはどの程度分散しているか見る	df[aList].var()
菱形印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
option: シャルトリューズを使う	color = 'chartreuse'
文字列が全てアルファベットか判定する	s.isalpha()
折れ線グラフの色をレベッカパープルにする	plt.plot(データ列x, データ列y, color='rebeccapurple')
リストの最初を捨てる	aList[1:]
縦棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
ローングリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
データフレームを10の位で丸める	df.round(-1)
散布図を赤い大バツマーカーとして描く	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
散布図のマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
リストと配列の散布図を描き、、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データ列の中に文字列があるか調べる	ds.isin([value])
文字列中に非数字が含まれるか	any(not c.isdigit() for c in s)
データ列の中のNaNの数を数える	ds.isna().sum()
疑似乱数を発生させる	random.random()
MeanSquaredErrorを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
タブ	'\t'
日付データからn週間分減算する	aDate - datetime.timedelta(weeks=n)
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
データフレームを二つの列でソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフの色をコーンフラワーブルーにセットする	plt.plot(データ列x, データ列y, color='cornflowerblue')
オブジェクトの固有のIDを使う	id(obj)
nがn2未満、それかn3以上か確認する	n < n2 or n >= n3
線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
パラメータについて数式の積分を計算する	sympy.integrate(e, z)
データ列が正規分布からどれだけ尖っているか見る	ds.skew()
円プロットの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
xの小数点以下'3'桁までを表示する	print(':.3f'.format(x))
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
２つのデータフレームを列をキーにして結合する	pd.merge(df, df2, on=column)
データフレームのカテゴリデータをワンホット・ベクトルに変換する	pd.get_dummies(df)
タプルの末尾のn要素を取り除く	aTuple[:-n]
折れ線グラフに四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s')
実数を十の位で丸める	round(x, -1)
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
二つのリストを文字列で区切って出力する	print(value, value2, sep=s)
ValueMapで一度にデータフレームの列の値を置き換える	df[col].replace(ValueMap)
文字列の中でパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s)
横棒グラフを黄緑色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
２つの文字列を辞書順で比較する	s < s2
折れ線グラフに四角印を用いる	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
ダークレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
リストを小さい方からソートする	sorted(aList, reverse=True)
option: 改行コードを動作環境依存にセットする	newline = None
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
データフレームのグループ化した散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
棒グラフをダークグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgreen')
KNNで回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
rgbの三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
nをn2倍にする	n *= n2
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
一方に含まれ他方に含まれない集合を見る	aSet.difference(aSet2)
オブジェクトは論理値クラスのインスタンスか調べる	isinstance(obj, bool)
データ列のどの値が頻出か見る	ds.mode()
円周率を使用する	math.pi
データ列の日	ds.dt.day
nが負の数か調べる	n < 0
散布図の右三角印を黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
日付時刻データからn日を減らす	aDatetime - datetime.timedelta(days=n)
線グラフの色をサンディーブラウンに指定する	plt.plot(データ列x, データ列y, color='sandybrown')
散布図を赤い右三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
タプルの最後を見る	aTuple[-1]
データフレームのカラムを100の位で丸める	df[col].round(-2)
xでデータフレームのカラムの欠損値を置換する	df[col].fillna(x)
文字列を走査し、正規表現にケースを無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
数列とリストの散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
option: ダークグレー色を使う	color = 'darkgray'
平均でデータフレームのリストカラムの欠損値を置換する	df[aList].fillna(df[aList].mean())
シーケンスに列を続ける	itertools.chain(iterable, iterable2)
十六進数字を全部使う	string.hexdigits
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
横棒グラフをミディアムパープル色として描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
ベクトルの各要素のアダマール積	np.multiply(aArray, aArray2)
ヒストグラムの色をライムに指定する	plt.hist(データ列, color='lime')
折れ線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
黒い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームの列がxの行を選ぶ	df[df[column] == x]
ローングリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
option: グラフの色をミディアムオーキッドにセットする	color = 'mediumorchid'
分類モデルの予測値と実測値を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームのカラムの時を使う	df[col].dt.hour
ファイルを書き込みできるようにUTF8としてオープンする]	open(filepath, mode='w', encoding='utf-8')
日付データが日曜日か調べる	aDate.weekday() == 6
プロットにy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ヒストグラムをダークマゼンタ色として描画する	plt.hist(データ列, color='darkmagenta')
列をn個にビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
カウンタから列を出現回数して引く	aCounter.subtract(iterable)
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
クラス分類をランダムフォレストでする	model = sklearn.ensemble.RandomForestClassifier()
predicateFuncを適用したとき真とならない列の要素	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムの色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
タイムスタンプデータがタイムスタンプデータより先か	aDatetime < aDatetime2
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
option: スラッシュを分割記号で使う	sep = '/'
双方向キューが空	len(deq) == 0
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgrey')
日付時刻データとタイムスタンプデータの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()//60
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
既存の配列をベースに全要素が1の行列	np.ones_like(aArray)
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
正規表現に文字列全体を大文字・小文字を無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データフレームから指定された列を抽出する	df[[column]]
ファイルからフォルダ名を求める	os.path.dirname(filepath)
今日の日数を求める	datetime.datetime.today().day
線グラフの色をダークサーモンにする	plt.plot(データ列x, データ列y, color='darksalmon')
散布図を三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムをシスル色として描画する	plt.hist(データ列, color='thistle')
現在の作業ディレクトリ	os.getcwd()
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
縦棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
散布図の下三角印の太さを指定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
データフレームを1000の位で四捨五入して整数型にする	df.round(-3).astype(int)
データフレームから列を一つ選択する	df[[column]]
折れ線グラフの色をサドルブラウンに指定する	plt.plot(データ列x, データ列y, color='saddlebrown')
折れ線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームの中に存在する日付データの合計を数える	df.isin([value]).sum()
xの絶対値を求める	abs(x)
散布図の色をダークブルーにする	plt.scatter(データ列x, データ列y, color='darkblue')
ファイルパスの拡張子	os.path.splitext(filepath)[1].lstrip('.')
列の各データ値の出現数	ds.value_counts()
半透明の破線を用いてリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
エンディアンを見る	sys.byteorder
散布図に上三角印を使う	plt.scatter(データ列x, データ列y, marker='^')
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
実数の双曲線正接の逆数	math.atanh(x)
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
サポートベクターマシンを使って回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
nが1、もしくは2、もしくは3に等しいかどうか調べる	n == 1 or n == 2 or n == 3
クリムゾン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
option: NaNは無視する	dropna = True
option: 先頭のカラムをインデックスに設定する	index_col = 0
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
実数に数を掛ける	x * y
ヒストグラムをシエナ色として描画する	plt.hist(データ列, color='sienna')
乱数を計算する	random.random()
固有値分解を行う	model = sklearn.decomposition.PCA(n_components=n)
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
二つの実行結果をコロンで区切ってプリントする	print(value, value2, sep=':')
線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
option: 印の線幅を変更する	markeredgewidth = 2.5
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
レベッカパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
数値を白色で表示する	print(f'\033[37m{value}\033[0m')
スタッキングで回帰分析をする	sklearn.ensemble.StackingRegressor()
折れ線グラフの右三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
青紫色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
列を累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
全空白文字	string.whitespace
散布図の印をポイントにする	plt.scatter(データ列x, データ列y, marker='.')
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
データ列の未入力値を後の行の値で補う	ds.fillna(method='bfill')
文字列は漢字かどうか調べる	('\u4E00' <= ch <= '\u9FD0')
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
文字列でフォーマットして本日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
散布図にrgbの丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
nがn2以上	n >= n2
文字列中に非空白が含まれる	any(not c.isspace() for c in s)
カラムの中にある日付データの数をカウントする	ds.isin([value]).sum()
ヒストグラムの色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
データ列をリストを境界値としてビニングする	pd.cut(ds, aList)
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
ハローワールドと出力する	print('Hello World')
既存のベクトルを元にして全要素が初期値のベクトル	np.full_like(aArray, 初期値)
散布図に黒い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
既存のベクトルを元にして全要素が0の配列	np.zeros_like(aArray)
赤い実線を用いてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, markersize=2.0)
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
横方向に二つのデータフレームを一つにまとめる	pd.merge(df, df2)
nをn2で割ったモジュロ	n % n2
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
チョコレート色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
無限にnからカウントダウンする	itertools.count(start=n, step=-1)
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
黒いダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
オブジェクトひとつのりスト	[element]
eの小数点数乗を計算する	math.exp(x)
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
線グラフをコーンフラワーブルー色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
データフレームの列の一覧	df.info()
縦棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
縦棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
アクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
オブジェクトは文字列か調べる	isinstance(obj, str)
データ列とデータ列の散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
整数nを8進表現にする	oct(n)
折れ線グラフの線の種類を破線にセットする	plt.plot(データ列x, データ列y, linestyle='dashed')
日付時刻データを数値に変換する	aDatetime.timestamp()
集合のイミュータブル版	frozenset(aSet)
データフレームのリスト列のどの値が頻出か見る	df[aList].mode()
ホワイトスモークにヒストグラムの色を設定する	plt.hist(データ列, color='whitesmoke')
クラスが名前付きタプルかどうか	issubclass(C, tuple)
リストをランダムにシャッフルする	random.shuffle(aList)
カラーバーをつける	plt.colorbar()
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
option: ダークサーモンに色を設定する	color = 'darksalmon'
折れ線グラフのダイアモンド印の色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
本日が何曜日か知る	datetime.datetime.today().weekday()
線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
リストと数列についての散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図の△マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
日付データにn週間分、足す	aDate + datetime.timedelta(weeks=n)
n番目のシートをエクセルデータファイルの読み込む	pd.read_excel(filename, sheet_name=n)
散布図の下三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
BOM付きでファイルをオープンする]	open(filepath, encoding='utf_8_sig')
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
nとn2の論理和	n | n2
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
データフレームから列を１つ選択する	df[[column]]
要素が集合に含まれるか調べる	element in aSet
数をn乗する	x ** n
キーワード引数でタプルに加えて、更新する	aDict.update(**kwargs)
両端キューに要素をプッシュする	deq.append(element)
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
クラスのサブクラスかどうか調べる	issubclass(サブクラス, クラス)
データフレームの指定された列をリストとして取り出す	df[column].values.tolist()
selectorsでマスクした列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
文字列はリストの要素	element in aList
option: 星印を加える	marker = '*'
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
リストを反転する	reversed(aList)
データフレームの中にいくつ日付データがあるか数える	df.isin([value]).sum()
option: 分割記号を改行にする	sep = '\n'
option: グラフの色をミディアムブルーに指定する	color = 'mediumblue'
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
ペールグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
折れ線グラフの丸印を黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
文字列がひらがな	('ぁ' <= ch <= 'ん')
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
辞書から多重集合を準備する	collections.Counter(aDict)
リスト内の要素が少なくともひとつ真か調べる	any(aList)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
アリスブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームのstart行目からend行目まで取り出す	df[start:end]
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
散布図をrgbの右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
シーケンスをカウントして、カウンタを更新する	aCounter.update(iterable)
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
データ列の中のNaNの合計をカウントする	ds.isna().sum()
文字列の開始位置からと終了位置の範囲に部分文字列が存在するかどうか確認する	s.find(sub, start, end) != -1
rgbの星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
一度にデータフレームの列の名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
ライトシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
リストを中央値で分割する	pd.qcut(aList, 2)
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
option: フォントの色を青緑に指定する	color = 'teal'
表データのリストで指定したカラムのヒートマップを描画する	sns.heatmap(df[aList].corr())
データフレームのカラムを百の位で丸めて、整数にする	df[col].round(-2).astype(int)
表示可能な列数を変更する	pd.set_option('display.max_columns', n)
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
文字列リストをsepを区切りにして一つの文字列にする	sep.join(aStringList)
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
実数の正弦	math.sin(x)
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
列でデータフレームをソートし、、行を振り直す	df.sort_values(columns).reset_index(drop=True)
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
▲マーカーを使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームのリストカラムの中にいくつ文字列が存在するか数える	df[aList].isin([value]).sum()
アンサンブル学習を用いて回帰分析をする	sklearn.ensemble.VotingRegressor()
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
何か試しに動かす	print('Hello World')
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
三二ビット整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int16)
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データフレームの標準偏差	df.std()
option: 色の透明度を設定する	alpha = 0.5
ヒストグラムの色をホワイトに設定する	plt.hist(データ列, color='white')
散布図をシーグリーン色として描画する	plt.scatter(データ列x, データ列y, color='seagreen')
データ列の曜日の名前を使う	ds.dt.weekday_name
リストの移り変わりを色付きの点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
option: フォントの色をダークシアンに変更する	color = 'darkcyan'
データ列の正規分布に対する上下広がりを求める	ds.skew()
カラムの中にいくつ未入力値があるか数える	ds.isna().sum()
グラフの使途をスライドに設定する	sns.set(context='talk')
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
データフレームを二つのカラムの値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
散布図の▽マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
ライトグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
ひとつでも英数字が文字列内に含まれるかどうか調べる	any(c.isalnum() for c in s)
横棒グラフをスノー色として描画する	plt.barh(データ列x, データ列y, color='snow')
リストと配列の散布図を描いて、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
表のカラムの名前を列から文字列に付け直す	df.rename(columns={column: name})
散布図をナバホホワイト色として描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
線グラフの色をピーチパフにセットする	plt.plot(データ列x, データ列y, color='peachpuff')
文字列内にひとつでもASCII文字が含まれるか調べる	any(c.isascii() for c in s)
シーケンスを集合に変換する	set(iterable)
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
アクア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
をPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
等量でリストをn個にビン分割する	pd.qcut(aList, n)
双方向キューのn番目に要素を挿入する	deq.insert(n, element)
データ列のNaNを最小値にする	ds.fillna(ds.min())
option: カンマをセパレータで使う	sep = ','
ゼロ埋めされた行列	np.zeros(要素数)
半透明の実線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
プロットに使うフォントを指定する	sns.set(font=フォント名)
マゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
データ構造を使う	import collections
横棒グラフの色を珊瑚にする	plt.barh(データ列x, データ列y, color='coral')
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
option: 色をダークサーモンに設定する	color = 'darksalmon'
option: マーカーを星に指定する	marker = '*'
キューをデキューする	deq.popleft()
縦棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
option: グラフの色をコーラルに指定する	color = 'coral'
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
配列と配列についての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列を走査し正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
option: パールゴールデンロッドを使う	color = 'palegoldenrod'
nが2で割り切れないかどうか調べる	n % 2 == 1
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
nが一桁の数かどうか調べる	-9 <= n <= 9
year年month月day日hour時minute分のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
nにn2をかけた値をnとする	n *= n2
文字列の中で複数行対応として正規表現にマッチした文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
パパイヤウィップ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
タイムスタンプデータからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
日付時刻データが何分か知る	aDatetime.minute
オプションで、標準エラーを出力にする	file = sys.stderr
整数nがタプルのどれかか調べる	n in aTuple
主成分分析として多次元データをパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
日付データのデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
option: サンディーブラウンに色を変更する	color = 'sandybrown'
データ列の分散	ds.var()
点線としてリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
列の値によってデータフレームを分類して、それぞれのグループごとの分散を求める	df.groupby(column).var()
外れ値に強い線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
複素数を計算する	complex(x, y)
インディアンレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
option: ミディアムブルーにグラフの色を設定する	color = 'mediumblue'
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
正規分布にしたがってデータ列の値が発生する累積確率を計算する	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
データ列の推移を半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
散布図の星印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
ダークグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
箱ひげ図をプロットして、平均線を加える	plt.boxplot(データ列, meanline=True)
option: フォントの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
タプル内の要素は全て真か	all(aTuple)
ヒストグラムをフローラルホワイト色として描画する	plt.hist(データ列, color='floralwhite')
データ列の正規分布を判定する	scipy.stats.shapiro(データ列)
option: 茶色色を用いる	color = 'brown'
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
エクセルデータからデータフレームを読み込む	pd.read_excel(filename)
赤い点線を用いてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
スタックの末尾にイテラブルの各要素をつけ加える	deq.extend(iterable)
折れ線グラフをダークオーキッド色を使って描画する	plt.plot(データ列x, データ列y, color='darkorchid')
rgbの星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: ホワイトスモーク色を用いる	color = 'whitesmoke'
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
option: ダークカーキ色を使用する	color = 'darkkhaki'
行列をフラット化する	aArray.flatten()
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
FIXME:カテゴリーデータを出現頻度順に整列する	df['A'].value_counts().sort_index().index
ファイルの拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
全ての八進数字	string.octdigits
オリーブ色でヒストグラムを描画する	plt.hist(データ列, color='olive')
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
棒グラフをシアン色として描画する	plt.bar(データ列x, データ列y, color='cyan')
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
数列を折れ線プロットで描画する	plt.plot(データ列x, データ列y)
キーがタプル上で定義されていない	key not in aDict
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
リストをナンバリングする	enumerate(aList)
データフレームの列がx以下のデータを抽出する	df[df[column] <= x]
表を列によってソートする	df.sort_values(by=column)
イテラブルから集合を使う	set(iterable)
ペールグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
ダークオレンジ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
配列の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
JSON形式の文字列をデータに変換する	json.loads(jsonString)
ブラック色で散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
データフレームから列を二つのみ選択する	df[[column, column2]]
日付データからn秒を減算する	aDate - datetime.timedelta(seconds=n)
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
option: 区切りを文字列にする	sep = s
折れ線グラフに黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
列のモード	ds.mode()
散布図をサンディーブラウン色を使って描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
日付データの月	aDate.month
散布図をブラック色として描画する	plt.scatter(データ列x, データ列y, color='black')
文字コードを文字に変換する	chr(unicode)
option: シアンにグラフの色を設定する	color = 'cyan'
線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
折れ線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
アイボリー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
option: ダークバイオレット色を用いる	color = 'darkviolet'
データフレームを列によって破壊的に降順に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
データ列とデータ列について散布図をプロットして、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データ列の曜日は何日目か確認する	ds.dt.dayofweek
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
10を底とする実数の対数	math.log10(x)
ファイルパスを書き込みモードでオープンする]	open(filepath, mode='w')
option: ラベンダー色を使う	color = 'lavender'
散布図の印の大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフをミディアムパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
有理数の分子	q.numerator
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
データフレームの列を100の位で丸める	df[col].round(-2)
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
option: アクアマリンを使う	color = 'aquamarine'
線グラフの色をロイヤルブルーにセットする	plt.plot(データ列x, データ列y, color='royalblue')
リストの値を昇順に並べ変える	sorted(aList, reverse=True)
線グラフを赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
線グラフの色を青緑に指定する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームを表示するとき、列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
教師データで線形回帰モデルを学習する	model.fit(説明変数, 目的変数)
データフレームのカラムが何秒か確認する	df[col].dt.second
二つのオブジェクトが等しいかどうか調べる	obj == obj2
データ列の日を求める	ds.dt.day
データフレームの空文字を欠損値に変換しドロップする	df.replace('', np.nan).dropna()
本日の月数を求める	datetime.datetime.today().month
タプルの各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
データフレームの列をドロップして、入れ替える	df.drop(column, axis=1, inplace=True)
グラフからグリッド線を表示しない	plt.grid(False)
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
散布図に四角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='s')
ヒストグラムの色をシーグリーンに変更する	plt.hist(データ列, color='seagreen')
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
文字列リストにイテラブルを変換して、部分文字列で結合する	sub.join(map(str, iterable))
自然数の最大公約数	math.gcd(n, n2)
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
デピンク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
折れ線グラフの右三角印の太さを変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームの列の文字列が正規表現文字列にマッチする行を取り出す	df[df[column].str.match(s)]
実数を切り下げる	math.floor(x)
線グラフをミスティローズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mistyrose')
正規表現patternでreplにデータフレームのリストカラムの値を置き換える	df[aList].replace(pattern, repl, regex=True)
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
スピアマン順位相関係数でデータフレームのリストで指定された列の相関行列	df[aList].corr(method='spearman')
タプルのキーとその値をペアとして取り出す	aDict.items()
文字列を空白で区切る	s.split()
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
改行なしに文字列を表示する	print(value, end='')
２変数の最小値	min(x, y)
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
option: のシートの名前をnamesに増やす	sheet_name = names
サンディーブラウン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
浮動小数点数は無限大か調べる	math.isinf(x)
データフレームの中に文字列とがいくつあるか数える	df.isin([value, value2]).sum()
線グラフの色をビスクに変更する	plt.plot(データ列x, データ列y, color='bisque')
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
データフレームの欠損値がある箇所を色付けする	df.style.highlight_null()
K-S検定を行う	scipy.stats.kstest(データ列, 'norm')
option: グラフの色をティールに設定する	color = 'teal'
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームの列の欠損値を最小値にセットする	df[col].fillna(df[col].min())
データ列の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
ランダム性を強化したランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
option: グラフの色をグレーに設定する	color = 'gray'
ファイルパスからストリームを読み込み、fileとする	file = open(filepath)
散布図の▼マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データ列の偏りを平方根変換する	np.sqrt(データ列)
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
予測値とデータの離れ具合を図示する	sns.residplot(x='列名', y='列名', data=df)
option: フォントの色をスノーに設定する	color = 'snow'
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
データフレームの標本標準偏差	df.std()
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
散布図の▲印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
縦棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
日付時刻データをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
データフレームとデータフレームの列を連結する	pd.concat([df, ds], axis=1)
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
データフレームのリスト列の中のNaNの数を数える	df[aList].isna().sum()
実数のハイパボリック・サインの逆数	math.asinh(x)
リストの要素を入れ替える	aList[i], aList[j] = aList[j], aList[i]
数値を太字にする	f'\033[1m{value}\033[0m'
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
ピアソン相関係数としてデータフレームのリストで指定された列の相関行列を求める	df[aList].corr(method='pearson')
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
連続した配列の作成する	np.arange(開始値, 終了値, 等差)
線を半透明の実線として描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
データフレームのカラムのNaNをxで埋める	df[col].fillna(x)
n2がnより大きくかつ、n3未満かどうか調べる	n < n2 and n2 < n3
散布図をダークスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
ターコイズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
散布図を赤い下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
nがn2の倍数か調べる	n % n2 == 0
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
データ列と配列について散布図をプロットして、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
データフレームのリスト列の欠損値を最小値に変更する	df[aList].fillna(df[aList].min())
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
半透明の実線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
縦棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ファイルをクローズする	f.close()
数式を方程式として解く	sympy.solve(e)
プラットフォームの整数の最大値	sys.maxsize
プロットのパレットを濃くする	sns.set(pallete='deep')
ゲインズボロ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
行列から重複を除いた配列を作成する	np.unique(aArray)
ベージュ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
オブジェクトがリストかタプルか調べる	isinstance(obj, (list)
２つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
option: セパレータをカンマにする	sep = ','
横棒グラフを描画し、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
▽マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v')
空のロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
Pandasのバージョンを表示する	print(pd.__version__)
nが2で割り切れるかどうか調べる	n % 2 == 0
色付きの一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ライトサーモンにヒストグラムの色を指定する	plt.hist(データ列, color='lightsalmon')
データフレームのカラムの最頻値を算出する	df[col].mode()
実数の常用対数を計算する	math.log10(x)
ヒストグラムをミディアムスプリンググリーン色として描画する	plt.hist(データ列, color='mediumspringgreen')
浮動小数点数のサインの逆数を求める	math.asin(x)
option: ベージュ色を使う	color = 'beige'
部分集合かテストする	aSet.issubset(aSet2)
縦棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
ファイルパスを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
データ列の中にいくつ日付データがあるか数える	ds.isin([value]).sum()
縦棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
モジュールを検索するパス	sys.path
option: 色をグリーンイエローに設定する	color = 'greenyellow'
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
列を累加したイテラブルを求める	itertools.accumulate(iterable)
降順にデータフレームを'A'列で破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
整数nを八進表現に変換する	oct(n)
ミディアムパープル色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
値を赤色で表示する	print(f'\033[31m{value}\033[0m')
ファイルパスを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
n番目のシートをファイルのデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
xが-9以上、9以下か	-9 <= x <= 9
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='grey')
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
文字列中に部分文字列が含まれないかどうか調べる	sub not in s
Pandasで、フォーマットfmtを用いて文字列をPandasの日付型に変換する	pd.to_datetime(s, format=fmt)
データフレームの指定した列をリストに変換する	df[column].values.tolist()
ファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
散布図の三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
文字列の開始位置から終了位置の間で部分文字列をカウントする	s.count(sub, start, end)
nとn2の和	n + n2
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
折れ線グラフの色をダークターコイズにセットする	plt.plot(データ列x, データ列y, color='darkturquoise')
データフレームのリスト列のpercent分位数	df[aList].quantile(percent/100)
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームの中にある文字列と文字列の数を数える	df.isin([value, value2]).sum()
option: アンティークホワイト色を使用する	color = 'antiquewhite'
目盛り線	plt.grid(color='#800080')
初期値で全要素を初期化した配列	np.full(要素数, 初期値, dtype=np.int)
行列間の各要素の最大公約数	np.gcd(aArray, aArray2)
ヒストグラムをハニーデュー色を用いて描画する	plt.hist(データ列, color='honeydew')
スレートブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
ファイルから1文字、読み込む	f.read(1)
option: コロンをセパレータで使う	sep = ':'
散布図のマーカーを三角印にする	plt.scatter(データ列x, データ列y, marker='^')
シスル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
タプルの長さ	len(aTuple)
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
整数nをn2分の一にする	n //= n2
散布図をプラム色を使って描画する	plt.scatter(データ列x, データ列y, color='plum')
耐火レンガ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
データフレームの全列を散布図を用いて可視化する	sns.pairplot(df)
二つのデータフレームを縦方向にくっつける	pd.concat([df, df2])
データフレームの列の中にいくつ文字列が含まれるか数える	df[col].isin([value]).sum()
本日の日付時刻を使う	datetime.datetime.today()
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
プラットホーム名	sys.platform
option: グラフの色をネイビーに変更する	color = 'navy'
option: フォントの色をオレンジに設定する	color = 'orange'
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
シルバー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
カウンタを高頻出な方からリストとして得る	aCounter.most_common()
等間隔でn個に配列をビン分割する	pd.cut(aArray, n)
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
データフレームを列によって小さい順に並べ、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
文字列の先頭で複数行対応としてパターンにマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
バリーウッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
ヒストグラムの色を深紅に設定する	plt.hist(データ列, color='crimson')
Pandasで文字列をフォーマットとしてPandasの日付型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
ブースティングとして回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
option: 耐火レンガ色を使う	color = 'firebrick'
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
両端キューの末尾を求める	deq[-1]
縦棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
ファイルがないか調べる	not os.path.exists(filepath)
シャルトリューズにヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
散布図を赤い丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
タプルのn番目の	aTuple[n]
option: 文字列を区切り記号で使用する	sep = s
出力ストリームに文字列を書く	f.write(s)
集合を空にする	aSet.clear()
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
数式の積分を算出する	sympy.integrate(e)
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
リストとイテラブルのデカルト積	itertools.product(iterable, iterable2)
列によってデータフレームをグループ化し、基本統計量を算出する	df.groupby(column).describe()
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
option: フォントの色を貝殻にセットする	color = 'seashell'
リストとリストについてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データ列の分散を求める	ds.var()
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
が名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
データ列の中にいくつ欠損値が存在するか数える	ds.isna().sum()
日付時刻データにn分を加える	aDatetime + datetime.timedelta(minutes=n)
日付データの曜日を整数で求める	aDate.weekday()
タプルの値を昇順にソートする	sorted(aTuple, reverse=True)
オプションで、標準出力を出力にする	file = sys.stdout
option: グラフの色をインディゴにセットする	color = 'indigo'
行列の合計値	np.sum(aArray)
散布図をロイヤルブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='royalblue')
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
シルバー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
ヒストグラムの色をダークゴールデンロッドにセットする	plt.hist(データ列, color='darkgoldenrod')
option: namesをカラム名に設定する	names = names
グリーンイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ポイントマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
リストとリストについての散布図に星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*')
列の欠損値を平均値で埋める	ds.fillna(ds.mean())
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
アンティークホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
リストの各値を関数に適用した結果でソートする	sorted(aList, key=func)
データ列と配列について散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
タイムスタンプデータが金曜日	aDatetime.weekday() == 4
データ列のヒストグラムをプロットする	plt.hist(データ列)
データフレームの列がxの行を抽出する	df[df[column] == x]
散布図に黒い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
タイムスタンプデータからn日分減算する	aDatetime - datetime.timedelta(days=n)
ミスティローズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
サブクラスか調べる	issubclass(サブクラス, クラス)
文字列を全て小文字に変換する	s.casefold()
データフレームのリストカラムのNaNをxに設定する	df[aList].fillna(x)
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
データフレームの列がxより小さいデータを抽出する	df[df[column] < x]
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
カウンタを使う	import collections
ブラック色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
両端キューの最後から要素を取り除く	deq.pop()
nが偶数か調べる	n % 2 == 0
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
クラス分類を勾配ブースティングでする	model = sklearn.ensemble.GradientBoostingClassifier()
現在の月数	datetime.datetime.today().month
実数を浮動小数点数で除算して切り捨てる	x // y
xが-9以上9以下	-9 <= x <= 9
ヒストグラムをライトシアン色を使って描画する	plt.hist(データ列, color='lightcyan')
実数が有限か調べる	math.isfinite(x)
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
配列の行ごとの平均	np.mean(aArray, axis=1)
データ列の月を使う	ds.dt.month
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
数値の展開を行う	sympy.expand(e)
日付時刻データが水曜日かどうか調べる	aDatetime.weekday() == 2
option: 色をホワイトスモークに変更する	color = 'whitesmoke'
データフレームの全カラムの散らばりを描く	sns.pairplot(df)
オブジェクトはリストかタプルかどうか確認する	isinstance(obj, (list)
線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
タイムスタンプデータをタプルに変換する	aDatetime.timetuple()
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
数式の簡略化を行う	sympy.sympify(e)
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
実数はNaNか	math.isnan(x)
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
サンディーブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
グラフの縦軸の名前をuntitledにセットする	plt.ylabel('y軸ラベル')
整数乱数で要素を埋めた配列を初期化する	np.random.randint(開始値, 終了値, N)
配列と配列の散布図を描画して、文字列という簡単な説明用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データ列のNaNをxに設定する	ds.fillna(x)
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
option: 線種を実線に設定する	linestyle = 'solid'
２つの列の値によってデータフレームをグループ化し、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
等量でn個にデータフレームの中のカラムをビン分割する	pd.qcut(df[col], n)
データ列がどの程度、分散しているか見る	ds.var()
データフレームの列とカラムのヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
折れ線グラフのバツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
二つの文字列は大文字小文字を無視して同じか	s.casefold() == s2.casefold()
浮動小数点数を整数にする	int(x)
現在のモジュールを得る	sys.modules[__name__]
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
新しい回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
option: ヘッダをnamesに増やす	header = names
データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
データフレームのカラムの時刻	df[col].dt.hour
文字列の出力を改行しないで行う	print(value, end='')
ミスティローズ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
実数のkを底とする対数	math.log(x, k)
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
縦横比を等しくする	plt.axis('equals')
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
再帰の最大回数を増やす	sys.setrecursionlimit(1000000)
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
配列と数列について散布図を描画して、マーカーをダイアモンドに変更する	plt.plot(データ列x, データ列y, marker='D')
実数を切り上げる	math.ceil(x)
option: フォントの色をビスクに指定する	color = 'bisque'
option: フォントの色をホワイトスモークに設定する	color = 'whitesmoke'
縦棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
文字列の中で正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s)
カーキ色でヒストグラムを描画する	plt.hist(データ列, color='khaki')
折れ線グラフに右三角印を用いる	plt.plot(データ列x, データ列y, marker='>')
グラフのカラーパレットを全般的に淡くする	sns.set(pallete='muted')
未初期化の行列を初期化する	np.empty((行数, 列数), dtype=np.int)
データフレームの未入力値を最小値に設定する	df.fillna(df.min())
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
マッピングの項目名に対応した値を得る	aDict.get(key)
方程式の解を求める	sympy.solve(e)
数式を変数についてn階微分する	sympy.diff(e, z, n)
option: プラム色を使用する	color = 'plum'
折れ線グラフの色をダークオーキッドに変更する	plt.plot(データ列x, データ列y, color='darkorchid')
線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームを'A'列で集約する	df.groupby('A')
縦棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
棒グラフをシアン色を使って描画する	plt.bar(データ列x, データ列y, color='cyan')
散布図の星印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
カテゴリで色付けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
折れ線グラフのポイント印の線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
option: グラフの色をアクアに設定する	color = 'aqua'
折れ線グラフに下三角印を使う	plt.plot(データ列x, データ列y, marker='v')
オブジェクトがn回繰り返す列を得る	itertools.repeat(element, n)
改行せず文字列を出力する	print(value, end='')
空のリスト	[]
二つのデータフレームを異なる列をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
データフレーム全体をインデックスで降順でソートする	df.sort_index(ascending=False)
複数のシートをエクセルファイルファイルから読む	pd.read_excel(filename, sheet_name=[n, n2])
セットから何でもいいから一つ取り出す	aSet.pop()
棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
ヒストグラムの色をダークブルーに変更する	plt.hist(データ列, color='darkblue')
赤いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
option: 改行をセパレータで使う	sep = '\n'
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
'A'列を用いてデータフレームを並べ直し、NaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
散布図をrgbの上三角マーカーで描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: グラフの色を紺碧にセットする	color = 'azure'
折れ線グラフの右三角印を赤色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
今日が何月か知る	datetime.datetime.today().month
リストとイテラブルの散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをデピンク色を使って描画する	plt.plot(データ列x, データ列y, color='deeppink')
折れ線グラフを半透明の一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
散布図の印を大バツにする	plt.scatter(データ列x, データ列y, marker='X')
nがn2の倍数でないかどうか確認する	n % n2 != 0
インデント付きで辞書を文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
横棒グラフをスラグレー色を使って描画する	plt.barh(データ列x, データ列y, color='slategrey')
本日は何年か知る	datetime.datetime.today().year
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
カウンタを辞書にする	dict(aCounter)
データ列を等しい量になるように分割数nで分割する	pd.qcut(ds, n)
二つのマッピングをネスト化する	collections.ChainMap(aDict, aDict2)
線形回帰モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
半透明の実線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: ダークオレンジにグラフの色を設定する	color = 'darkorange'
棒グラフをダークマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
リストのn番目からn2番目までの部分	aList[n:n2]
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
辞書を浅くコピーする	dict(aDict)
データフレームの中に文字列があるか	df.isin([value])
nが2で割り切れる	n % 2 == 0
平均と分散でデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
両端キューに要素を積む	deq.append(element)
ファイルをSJISで追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
option: SJISを使う	encoding = 'shift_jis'
線グラフをロイヤルブルー色を使って描画する	plt.plot(データ列x, データ列y, color='royalblue')
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
実数のコサインの逆数	math.acos(x)
ファイルを読み込む	pd.read_excel(filename)
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
折れ線グラフのバツ印を赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
紺碧色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
縦棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
散布図を大バツマーカーで描画する	plt.scatter(データ列x, データ列y, marker='X')
濃いシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
縦棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
タイムスタンプデータの時刻	aDatetime.time()
データフレームからランダムにn行を取り出す	df.sample(n)
option: フォントの色をブランチドアーモンドにセットする	color = 'blanchedalmond'
データフレームを複数の列によって昇順に並べ直す	df.sort_values(by=column, ascending=True)
黒い▽マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームを100の位で四捨五入する	df.round(-2)
ペルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
UNIX秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
要素を両端キューにプッシュする	deq.append(element)
option: ダークオレンジ色を使用する	color = 'darkorange'
タプルの値をソートする	sorted(aTuple)
option: 符号なし８ビット整数型を使用する	dtype = np.uint8
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
白いヒストグラムを描画する	plt.hist(データ列, color='w')
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
ダークシアン色でヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
第二引数で指定されたファイルの名前	sys.argv[1]
データフレームのカーネル密度による分布を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
散布図のクロス印を青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
リストの重複を除く	sorted(set(aList), key=aList.index)
今日をISO書式の文字列に変換する	datetime.datetime.today().isoformat()
実部と虚部から複素数を用意する	complex(x, y)
Pandasのバージョンを調べる	print(pd.__version__)
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
集合から全ての要素を消す	aSet.clear()
行列の列ごとの合計	np.sum(aArray, axis=0)
option: チョコレートにグラフの色を設定する	color = 'chocolate'
option: 改行コードを旧Macに指定する	newline = '\r'
配列の行ごとの平均値	np.mean(aArray, axis=1)
データ列の折れ線グラフをバツ印で描画する	plt.plot(データ列x, データ列y, marker='x')
二つの文字列は等しいかテストする	s == s2
option: マーカーをクロスに変更する	marker = 'x'
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
CSVファイルをデータフレームとして読む	pd.read_csv(filename, sep=',')
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
データフレームのそれぞれのグループごとの平均値を求める	df.groupby(column).mean()
日付データが土曜日か調べる	aDate.weekday() == 5
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームの第三四分位数	df.quantile(0.75)
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
折れ線グラフの三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
データフレームの列のNaNを前の行の値で補う	df[col].fillna(method='ffill')
タプルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
データフレームのリスト列の歪度を求める	df[aList].kurt()
リストを境界値としてデータフレームの中の列をビンニングする	pd.cut(df[col], aList)
マゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
色付きの点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
フクシア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
ヒストグラムを破線に変更する	plt.hist(データ列, linestyle='dashed')
散布図を赤いポイントマーカーを用いて描く	plt.plot(データ列x, データ列y, marker='.', c='r')
option: ピンクにグラフの色を設定する	color = 'pink'
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
データフレームのインデックスの名前リスト	df.index
ヒストグラムをミディアムシアグリーン色を使って描画する	plt.hist(データ列, color='mediumseagreen')
配列のユニークな要素を算出する	np.unique(aArray)
散布図を左三角印を使い、描画する	plt.scatter(データ列x, データ列y, marker='<')
配列をヒストグラムで作図する	plt.hist(データ列)
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
本日の月数	datetime.datetime.today().month
ミディアムスレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='mediumslateblue')
ヒストグラムをスレートブルー色として描画する	plt.hist(データ列, color='slateblue')
バイナリ書き込みできるようにファイルパスをオープンする]	open(filepath, mode='wb')
要素が集合のメンバーか確認する	element in aSet
散布図のバツ印を青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
半透明の破線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
イテラブルをベクトルにする	np.array(iterable)
シーケンスのコンビネーション	itertools.combinations(iterable, n)
マッピングから項目名の値をエラーなく見る	aDict.get(key, None)
散布図に下三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='v')
文字列が印字できる	s.isprintable()
何か試しに動かしてみる	print('Hello World')
折れ線グラフをミディアムシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
ペールグリーン色でヒストグラムを描画する	plt.hist(データ列, color='palegreen')
1行標準入力から読む	sys.stdin.readline()
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
データフレームの中の列と列に重複があれば消す	df.drop_duplicates(subset=column)
縦棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
折れ線グラフのクロスマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ドジャーブルーにヒストグラムの色を指定する	plt.hist(データ列, color='dodgerblue')
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
文字列を新しい文字列で全部置き換える	s.replace(sub, newsub)
二次元リストの転置行列を使う	[list(x) for x in list(zip(*aList))]
折れ線グラフを青い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
データフレームのカラムの一意な値を確認する	df[col].unique()
データフレームの列の欠損値を平均値で埋める	df[col].fillna(df[col].mean())
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
option: グラフの色をシアンにセットする	color = 'cyan'
オブジェクトはリストクラスかどうか調べる	isinstance(obj, list)
JSONファイルファイル名がかどうか調べる	filename.endswith('.json')
昨日の日付を求める	datetime.date.today() - datetime.timedelta(days=1)
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームを各カテゴリに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ブランチドアーモンドにヒストグラムの色を設定する	plt.hist(データ列, color='blanchedalmond')
カウンタの最頻出な項目	aCounter.most_common()[0]
タプルの内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
文字列は全て十進数字か	s.isdecimal()
option: マーカーを右三角に変更する	marker = '>'
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
文字列をASCII限定として正規表現で区切る	re.split(pattern, s, flags=re.ASCI)
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
データ列を閾値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
三整数の最小公倍数を求める	math.lcm(n, n2, n3)
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
小数点数の床	math.floor(x)
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
KNNで回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
データフレームのn行まで抽出する	df[:n]
アークサイン	math.asin(x)
データフレームの列が正規分布からどの程度、歪んでいるか調べる	df[col].kurt()
複数行対応として正規表現で文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
ファイルパスを読み込みモードを使って開く]	open(filepath, mode='r')
青い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
option: アクアマリン色を使う	color = 'aquamarine'
等量でビン数nでデータフレームの中の列を分割する	pd.qcut(df[col], n)
クラス分類の偽陰性を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
縦棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
タプルの合計	sum(aTuple)
タプルの平均	sum(aTuple)/len(aTuple)
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
数式の平方根を算出する	sympy.sqrt(e)
ファイルが存在するかどうか調べる	os.path.exists(filepath)
縦棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
表データとデータ列を連結する	pd.concat([df, ds], axis=1)
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
列の種類	df.info()
タイムスタンプデータををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
ヒストグラムをコーラル色として描画する	plt.hist(データ列, color='coral')
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
ライトコーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
現在が何日か知る	datetime.datetime.today().day
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
KNNでクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
二つの文字列は等しいか調べる	s == s2
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
タプル内の要素が全て真か調べる	all(aTuple)
ヒストグラムの色を黄緑に指定する	plt.hist(データ列, color='chartreuse')
タイムスタンプデータが火曜日かどうか調べる	aDatetime.weekday() == 1
折れ線グラフの色をダークシアンに変更する	plt.plot(データ列x, データ列y, color='darkcyan')
要素が辞書の値として含まれているか調べる	element in aDict.values()
リストから文字列と等しい最初の要素を取り除く	aList.remove(element)
ふたつの関係がスーパーセットもしくは等しい	aSet > aSet2
データ列の50パーセンタイル	ds.median()
散布図をパレットトルコイズ色として描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
ミスティローズ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
フローラルホワイト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
nilに等しい値	None
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
２つの文字列が等しくない	s != s2
折れ線グラフのダイアモンドマーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
数の二乗	x ** 2
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
データ列のタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
xのハッシュ値	hash(x)
データフレームの相関行列	df.corr()
辞書から項目名で指定された項目をポップする	aDict.pop(key)
二つの集合の共通部分	aSet.intersection(aSet2)
option: 線の種類を一点鎖線に指定する	linestyle = 'dashbot'
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
文字列を部分文字列で二分する	s.partition(sub)
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
option: ヘッダを自動的な連番に減らす	header = None
文字列の大文字小文字を整える	s.casefold()
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
データフレームを列でによって破壊的にソートする	df.sort_values(by=column, inplace=True)
データフレームのカラムの分	df[col].dt.minute
棒グラフを紺碧色を使って描画する	plt.bar(データ列x, データ列y, color='azure')
カウンタを辞書に変換する	dict(aCounter)
画面用にグラフをセットする	sns.set(context='notebook')
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
リストの中の最大値を求める	max(aList)
環境がMacOSかどうか調べる	sys.platform.startswith('darwin')
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
nとn2の差	n - n2
書き込みモードを用いてファイルを開く]	open(filepath, mode='w')
破線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dashed')
異なる列をキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
スラグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
ロバストな線形回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
集合に値を追加する	aSet.add(element)
リストをビン数nでビニングし、、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図の星マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
黒い▽印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
インディゴにヒストグラムの色を変更する	plt.hist(データ列, color='indigo')
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
データフレームで列の重複を見る	df.duplicated(subset=column)
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ファイルからの入力ストリームを使う	open(filepath)
イテラブルから最大長nのキューを作る	collections.deque(iterable, maxlen=n)
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
双方向キューに要素をプッシュする	deq.append(element)
Pandasで書式fmtでデータフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col], format=fmt)
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
文字列が組に含まれないか調べる	element not in aTuple
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
データフレームを表示するとき、折り返しをオフに変更する	pd.set_option('expand_frame_repr', False)
データフレームの中に日付データと文字列が含まれるか調べる	df.isin([value, value2])
option: ミスティローズにフォントの色を変更する	color = 'mistyrose'
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
真紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
両端キューの要素数	len(deq)
標準エラーを使う	sys.stderr
黒い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
'A'列によってデータフレームを並べ直して、更新する	df.sort_values(by='A', inplace=True)
文字列の先頭で正規表現にASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
折れ線グラフのバツ印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
文字列が文字列リストのいづれかどうか調べる	s in aStringList
データフレームから列を３つ選択する	df[[column, column2, column3]]
マップの全をクリアする	aDict.clear()
文字列の無限のイテラブル	itertools.repeat(element)
ふたつの集合が集合と交わりを持たないかどうか調べる	aSet.isdisjoint(aSet2)
現在を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
配列と配列の散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
辞書順で文字列が文字列より前か	s < s2
データフレームのリストカラムは正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
数式のパラメータを数値で置き換える	e.subs(z, e2)
ラインを色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームのカラムを1000の位で丸める	df[col].round(-3)
配列をn個に等間隔でビン分割する	pd.cut(aArray, n)
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
デピンク色でヒストグラムを描画する	plt.hist(データ列, color='deeppink')
散布図の左三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
グラフの凡例を表示する	plt.legend()
ディムグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
option: 色をオリーブに設定する	color = 'olive'
縦棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
文字列が組に含まれるか	element in aTuple
リストのn番目のの値	aList[n]
ホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
文字列全体がパターンにマッチするか見る	re.fullmatch(pattern, s)
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
サーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
データ列と数列について散布図を描画して文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ポイント印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
データフレームのリストカラムの中にある文字列の数を数える	df[aList].isin([value]).sum()
末尾から空白で文字列を分割する	s.rsplit()
リストをカンマ区切りで表示する	print(*aList, sep=',')
sepを区切りとして文字列リストをつなげる	sep.join(aStringList)
ダークオレンジにヒストグラムの色を指定する	plt.hist(データ列, color='darkorange')
option: ベージュにグラフの色を指定する	color = 'beige'
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
浮動小数点数の仮数部	math.frexp(x)[0]
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
nまでの奇整数列を作る	list(range(1, n, 2))
データフレームをグループ化し、それぞれの列に対し最小値を算出する	df.groupby(column)[column2].min()
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
正規分布で疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
アリスブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
散布図を暗い赤色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームのリスト列を小数点以下n桁で丸める	df[aList].round(n)
十六進文字列を整数に変換する	int(s, 16)
option: 読み込みモードに設定する	mode = 'r'
ファイルをEUCで開く]	open(filepath, encoding='euc_jp')
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
集合をイミュータブルな集合に変換する	frozenset(aSet)
リストとリストについての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
タン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
option: オレンジレッドにグラフの色を設定する	color = 'orangered'
折れ線グラフの色をグリーンイエローに指定する	plt.plot(データ列x, データ列y, color='greenyellow')
日付時刻データの時刻を使う	aDatetime.time()
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
下線付きでリストを表示する	print(f'\033[4m{value}\033[0m')
option: マーカーの色を青にする	markerfacecolor = 'blue'
ファイルパスをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
四分位点でデータを標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
要素を双方向キューの先頭から削除する	deq.popleft()
Pandasで、フォーマットfmtとしてデータフレームのcollをタイムスタンプ型にする	pd.to_datetime(df[col], format=fmt)
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
グラフをプレゼン用にする	sns.set(context='talk')
集合から値を取り除く	aSet.remove(element)
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
ヒストグラムの色をオリーブに変更する	plt.hist(データ列, color='olive')
プロットのx座標にラベルを付ける	plt.xlabel('x軸ラベル')
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
黒いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームを列名リストによってソートしてNaNを先頭にする	df.sort_values(by=column, na_position='first')
散布図をライトイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
真部分集合か確認する	aSet < aSet2
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
キュー中の要素のインデックス	deq.index(element)
縦棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
オブジェクトの固有のID	id(obj)
散布図に黒い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
option: ▲印を描画する	marker = '^'
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
JSON形式の文字列をデータにする	json.loads(jsonString)
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
実数のcosの逆数	math.acos(x)
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
option: アクア色を使用する	color = 'aqua'
空のロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
データフレームから重複した行を残さず削除する	df.drop_duplicates(keep=False)
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
データ列のNaNをモードで埋める	ds.fillna(ds.mode().iloc[0])
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
option: グラフの色をライトサーモンに変更する	color = 'lightsalmon'
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
折れ線グラフを青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
文字列の先頭	s[0]
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
線グラフの色をシエナに変更する	plt.plot(データ列x, データ列y, color='sienna')
データフレームを列によって並べ直してインデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
文字列が文字列より辞書順で後	s > s2
散布図をゲインズボロ色を用いて描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
ライトサーモン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
リストを紫色にする	f'\033[35m{value}\033[0m'
線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
ヒストグラムをミディアムオーキッド色として描画する	plt.hist(データ列, color='mediumorchid')
データフレームの欠損値をxに設定する	df.fillna(x)
ヒストグラムの色をラベンダーブラッシュに指定する	plt.hist(データ列, color='lavenderblush')
縦棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
データフレームの列を千の位で丸める	df[col].round(-3)
xの小数点以下'2'桁までを表示する	print(':.2f'.format(x))
nが1、もしくは2かどうか調べる	n == 1 or n == 2
三つの数値を順にプリントする	print(value, value2, value3)
option: 分類木の深さを制限する	maxdepth = n
option: フォントの色を青緑に設定する	color = 'turquoise'
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
空の辞書を生成する	{}
何回まで再帰ができるかを知る	sys.getrecursionlimit()
折れ線グラフの四角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
タイムスタンプデータが何日か知る	aDatetime.day
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
書き込み用にファイルパスをBOM付きを使ってオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
データ列を小数点以下n桁で四捨五入する	ds.round(n)
線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
文字列を空白を用いて分割する	s.split()
dateStringを日付データにする	pd.to_datetime(dateString)
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
実数に浮動小数点数をかける	x * y
カラムのモード	ds.mode()
データ列の中に文字列と文字列がいくつ含まれるか数える	ds.isin([value, value2]).sum()
印字できる文字列にする	ascii(x)
集合にリストの要素を全て追加する	aSet.update(iterable)
赤い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
散布図に四角マーカーを加える	plt.scatter(データ列x, データ列y, marker='s')
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: マーカーを三角に設定する	marker = '^'
折れ線グラフの四角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
オリベドラブ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
文字列を最後の部分文字列で二つに区切って、残りの文字列を使う	s.rpartition(sub)[-1]
散布図を赤い星マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
外れ値に強い線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
濃いシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
文字列が全て数字か調べる	s.isdigit()
データフレームのインデックスの名前の一覧	df.index
列でデータフレームを分類して、列の要約統計量を算出する	df.groupby(column).describe()[column2]
イテラブルの全順列	itertools.permutations(iterable)
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
option: 色をライトスレイグレーにセットする	color = 'lightslategray'
散布図をピーチパフ色として描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
nが負の数か	n < 0
折れ線グラフに右三角マーカーを加える	plt.plot(データ列x, データ列y, marker='>')
データフレームを2つの列の値によってグループ化し、要約統計量を計算する	df.groupby(['A', 'B']).describe()
標準エラーを使用する	sys.stderr
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
赤い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: フォントの色をスチールブルーに設定する	color = 'steelblue'
チョコレート色で線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
option: ロイヤルブルー色を使用する	color = 'royalblue'
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
データフレームの指定した列をリストとして選択する	df[column].values.tolist()
データ列のどの値が最も現れるか見る	ds.mode()
option: 論理値型を使用する	dtype = np.int32
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
データフレームの相関行列を求める	df.corr()
option: フォントの色を耐火レンガに変更する	color = 'firebrick'
プロットの色を全般的に濃くする	sns.set(pallete='deep')
二つのデータフレームを列をキーとして内部ジョインする	pd.merge(df, df2, on=column, how='inner')
データ列が何時か見る	ds.dt.hour
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
option: グラフの色をビスクに変更する	color = 'bisque'
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
シーケンスを累積する	itertools.accumulate(iterable, operator.mul)
散布図をモカシン色を用いて描画する	plt.scatter(データ列x, データ列y, color='moccasin')
度数分布図の描画して、正規化する	plt.hist(データ列, density=True)
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
option: シエナを使う	color = 'sienna'
双方向キューに値をenqueueする	deq.appendleft(element)
配列のユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
option: グラフの色をコーラルに設定する	color = 'coral'
データフレームの欠損値を直前の値に指定する	df.fillna(method='ffill')
nからn2の値を引いてnにする	n -= n2
option: 星マーカーを使う	marker = '*'
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
ヒストグラムをカーキ色として描画する	plt.hist(データ列, color='khaki')
カウンタを辞書として更新する	aCounter.update(aDict)
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
マップの項目名に対応した値	aDict.get(key)
破線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
option: シーグリーンにフォントの色を指定する	color = 'seagreen'
グレーにヒストグラムの色をセットする	plt.hist(データ列, color='gray')
predicateFuncが真になるシーケンスの部分を得る	itertools.takewhile(predicateFunc, iterable)
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
オブジェクトがフィールドを持つか調べる	hasattr(obj, プロパティ名)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
option: フォントの色をインディアンレッドに設定する	color = 'indianred'
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
文字列の示すエンコーディングで書き込みできるようにファイルを開く]	open(filepath, mode='w', encoding=s)
カウンタのボトムを列挙する	aCounter.most_common()[:-n-1:-1]
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
2つの数値をコロンで区切ってプリントする	print(value, value2, sep=':')
ベクトルは何次元か調べる	aArray.ndim
データ列を縦棒プロットにする	plt.bar(ラベル列, データ列)
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
データフレームの最初の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
棒プロットの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
実数の双曲線正接を求める	math.tanh(x)
リストの推移を折れ線グラフとして可視化する	plt.plot(range(len(データ列)), データ列)
目盛り線	plt.grid(linestyle='--')
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
nは何桁か	len(str(n))
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
自然数の階乗	math.factorial(n)
散布図をダークオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
ナバホホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データフレームのカラムのユニークな値	df[col].unique()
リストの長さnの順列	itertools.permutations(iterable, n)
ファイルパスをバイナリ書き込み用にオープンして]fとする	f = open(filepath, mode='wb')
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームを列名リストによって並べて、更新する	df.sort_values(by=column, inplace=True)
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
データフレームのNaNをxで埋める	df.fillna(x)
破線を用いてヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
入力ストリームからn文字読み込む	f.read(n)
ファイルパスからバイナリ書き込みストリームを開いて]、fとする	f = open(filepath, mode='wb')
配列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
分子と分母から有理数を作成する	fractions.Fraction(分子, 分母)
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
predicateFuncがTrueとならない列の部分	itertools.dropwhile(predicateFunc, iterable)
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
データ列が何分か見る	ds.dt.minute
線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
リストを展開してプリントする	print(*aList)
ゼロ埋めされた複素数型のベクトル	np.zeros(要素数, dtype=bool)
option: グラフのラインスタイルを破線に設定する	linestyle = 'dashed'
タイムスタンプデータと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
数字を全部求める	string.digits
折れ線グラフに赤いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
横棒グラフをダークターコイズ色として描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
全要素を０で初期化した三二ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int16)
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
グリッド線	plt.grid(linewidth=3.0)
棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
日付データからn日分、引く	aDate - datetime.timedelta(days=n)
option: 色をライトイエローにする	color = 'lightyellow'
リストをイミュータブルにする	tuple(aList)
折れ線グラフの右三角印を黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
ベクトルを転置する	aArray.T
コーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
行によってデータフレームをソートする	df.sort_index()
option: フォントの色をネイビーに設定する	color = 'navy'
縦棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
option: データ型として三２ビット整数型を使う	dtype = np.int16
シーケンスをワンホット・ベクトルに変換する	pd.get_dummies(iterable)
実数を2乗する	x ** 2
折れ線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgrey')
option: ダークシアンを使う	color = 'darkcyan'
組をn倍する	aTuple * n
マップの値を列挙する	aDict.values()
棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
イテラブルを文字列リストに変換して、カンマを使って一つにする	','.join(map(str, iterable))
実数が正の数か調べる	x > 0
データフレームの相関行列をヒートマップを用いてグラフ化する	sns.heatmap(df.corr())
オールドレースにヒストグラムの色を設定する	plt.hist(データ列, color='oldlace')
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
タブで区切って２つの文字列を表示する	print(value, value2, sep='\t')
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
折れ線グラフの色をバイオレットに指定する	plt.plot(データ列x, データ列y, color='violet')
データ列とリストについての散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
イテラブルを集合に変換する	set(iterable)
データフレームを列でソートして、更新する	df.sort_values(by=column, inplace=True)
文字列をトリムする	s.strip()
書式をタプルでフォーマットする	formatText.format_map(aDict)
黒い▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
散布図の△マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
文字列の両端から空白を取り除く	s.strip()
データフレームのNaNをxに変更する	df.fillna(x)
半透明の一点鎖線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
小数点数のサイン	math.sin(x)
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
下三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='v')
二つのリストの積集合を求める	list(set(aList) & set(aList2))
インデント幅nで、タプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
タイムスタンプデータが火曜日	aDatetime.weekday() == 1
二つのカウンタの共通する要素	aCounter & aCounter2
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
データフレームをグループ化しそれぞれの列に対し分散を求める	df.groupby(column)[column2].var()
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
数列とリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
浮動小数点数の最小値を求める	sys.float_info.min
カウンタ同士で積集合	aCounter & aCounter2
ファイルをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
データフレームのリストカラムの中にいくつが存在するかカウントする	df[aList].isin([value]).sum()
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
バイナリ書き込みできるようにファイルを開く]	open(filepath, mode='wb')
青い下三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
文字列をコロンで分割して文字列リストに変換する	s.split(':')
option: グラフの色をカーキに設定する	color = 'khaki'
ミディアムスプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumspringgreen')
日付時刻データをエポック秒にする	aDatetime.timestamp()
変数を緑色にする	f'\033[32m{value}\033[0m'
文字列を部分文字列で二分し、最初の文字列を使う	s.partition(sub)[0]
列をセットに変換する	set(iterable)
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
MSDを行う	model = sklearn.manifold.MSD(n_components=n)
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
黒いクロスマーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c='k')
茶色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフに赤い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームの列の文字列が正規表現文字列にマッチしない行を選ぶ	df[not df[column].str.match(s)]
データフレームの列のNaNを最小値に指定する	df[col].fillna(df[col].min())
実数を二乗する	x ** 2
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
option: スラグレーを使う	color = 'slategrey'
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
横棒グラフをダークバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='darkviolet')
タプルの各要素を関数に適用した結果で並べ直す	sorted(aTuple, key=func)
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
option: アンティークホワイト色を使う	color = 'antiquewhite'
option: スカイブルー色を用いる	color = 'skyblue'
配列から重複を除いた行列を作る	np.unique(aArray)
タイムスタンプデータが日付時刻データと同時か確認する	aDatetime == aDatetime2
データフレームからn行をランダムに取り出す	df.sample(n)
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
option: インデックスを自動的な連番に設定する	index_col = None
赤い一点鎖線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ミディアムオーキッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
ビン数nで配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
オブジェクトがリストの要素でないか	element not in aList
ビン数nを用いてデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
データ列の離れ具合を図示する	sns.residplot(x=データ列, y=データ列)
データフレームを各列と列の組み合わせ毎にグループ化して分散を求める	df.groupby([column, column2], as_index=False).var()
グラフで使える色名の一覧	matplotlib.colors.cnames
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
ベクトルの累積積	np.cumprod(aArray)
option: ミッドナイトブルーにグラフの色を設定する	color = 'midnightblue'
n列までデータフレームを表示されるようにする	pd.set_option('display.max_columns', n)
サポートベクター回帰モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データ列の年	ds.dt.year
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
日付データにn時間分、足す	aDate + datetime.timedelta(hours=n)
ヒストグラムを赤くする	plt.hist(データ列, color='r')
文字列タブ区切りのファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
データフレームを複数の列によってで破壊的に並べる	df.sort_values(by=column, inplace=True)
データフレームから型型を抽出する	df.select_dtypes(ty)
ゼロ埋めされた論理値型の配列	np.zeros(要素数, dtype=np.int32)
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
グリッドの線スタイルを破線に変更する	plt.grid(linestyle='dashed')
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
部分文字列で文字列が終了するか調べる	s.endswith(sub)
リストとリストについて散布図を描画し、、大バツマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
散布図を赤い▲マーカーとして描く	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームの値が未入力値か調べる	df.isna()
ロイヤルブルーにヒストグラムの色をする	plt.hist(データ列, color='royalblue')
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
パスのセパレータ記号	os.sep
データフレームを複数の列でによって大きい順にソートする	df.sort_values(by=column, ascending=False)
折れ線グラフの色をダークバイオレットに指定する	plt.plot(データ列x, データ列y, color='darkviolet')
折れ線グラフの色をマゼンタにセットする	plt.plot(データ列x, データ列y, color='magenta')
ヒストグラムの色を赤に指定する	plt.hist(データ列, color='red')
リストを等量で分割数nでビンニングする	pd.qcut(aList, n)
表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
入力から二つの整数値を読む	A, B = map(int, input().split())
データフレームのカラムの秒	df[col].dt.second
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
ゴールド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
option: グラフの色をスラグレーに変更する	color = 'slategray'
データフレームを表示するとき小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
実数の正弦の逆数	math.asin(x)
辞書のキーの値を得る	aDict[key]
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
▽マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v')
配列と数列について散布図を描画して左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
グラフのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
日付データが何年か知る	aDate.year
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
等差数列を行列に変換する	np.arange(開始値, 終了値, 等差)
パレットトルコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
横棒グラフをダークオーキッド色として描画する	plt.barh(データ列x, データ列y, color='darkorchid')
文字列を空白で後ろから分割する	s.rsplit()
option: 色をライトコーラルに指定する	color = 'lightcoral'
ケースを無視してパターンに文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
ミディアムオーキッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
option: ミディアムバイオレットレッド色を用いる	color = 'mediumvioletred'
データ列を10の位で丸めて、整数にする	ds.round(-1).astype(int)
n個に配列をビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームを'A'列でによって破壊的に並べ直す	df.sort_values(by='A', inplace=True)
折れ線グラフの星印を赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
散布図の丸マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
列'A'と列'B'をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ミントクリーム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
option: グラフの色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
小麦色色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
タプルの中の最大値	max(aTuple)
配列の行ごとの合計	np.sum(aArray, axis=1)
折れ線グラフを青緑色を用いて描画する	plt.plot(データ列x, データ列y, color='teal')
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
実数の天井	math.ceil(x)
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
グリーンイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
文字列の開始位置以降に部分文字列が含まれないかどうか調べる	s.find(sub, start) == -1
データフレームの列の欠損値をxに変更する	df[col].fillna(x)
ピーチパフ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームを二つの列によってで降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
データフレームのリストカラムの未入力値を中央値に設定する	df[aList].fillna(df[aList].median())
散布図をラベンダー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavender')
y軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
文字列を最後の部分文字列で分けたときの後半の文字列を取り出す	s.rpartition(sub)[-1]
日付時刻データの年数	aDatetime.year
グラフの用途をポスターに設定する	sns.set(context='poster')
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
淡い茶色色のヒストグラムを描画する	plt.hist(データ列, color='tan')
データ列の出現頻度を作図する	plt.hist(データ列)
浮動小数点数のハイパボリック・サイン	math.sinh(x)
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
デック中の要素の数をカウントする	deq.count(element)
ヒストグラムの色をシルバーに変更する	plt.hist(データ列, color='silver')
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
割合付きの円グラフをプロットする	plt.pie(データ列, startangle=90, autopct='%.2f%%')
option: ダイアモンドマーカーを用いる	marker = 'D'
option: フォントの色を青紫に設定する	color = 'violet'
文字列が全て識別子名かどうか調べる	s.isidentifier()
option: 耐火レンガを使う	color = 'firebrick'
データ列のNaNを直後の値で埋める	ds.fillna(method='bfill')
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
散布図をスノー色を用いて描画する	plt.scatter(データ列x, データ列y, color='snow')
データフレームのリストカラムを百の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
現在が日曜日か確認する	datetime.datetime.today().weekday() == 6
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()//60
option: オリーブにフォントの色を設定する	color = 'olive'
文字列が文字列リストのいづれか判定する	s in aStringList
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
option: オリベドラブを使う	color = 'olivedrab'
棒グラフをダークオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkorchid')
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ライトブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
predicateFuncがTrueとなる列の要素	itertools.takewhile(predicateFunc, iterable)
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
数列とリストについての散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
スプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
横棒グラフをシエナ色として描画する	plt.barh(データ列x, データ列y, color='sienna')
折れ線グラフをアリスブルー色として描画する	plt.plot(データ列x, データ列y, color='aliceblue')
散布図の印をバツにする	plt.scatter(データ列x, データ列y, marker='x')
nの二乗	n ** 2
列名リストの値でデータフレームをグループ化する	df.groupby(columns)
データフレームの下n行を抽出する	df.tail(n)
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
rgbの上三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: ブラウン色を使用する	color = 'brown'
部分文字列が文字列の開始位置からと終了位置までの間に含まれない	s.find(sub, start, end) == -1
文字列が全てアルファベット	s.isalpha()
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
部分文字列で文字列を区切って文字列リストにする	s.split(sub)
茶色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
配列のユニークな要素	np.unique(aArray)
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
集合をリストに変換する	list(aSet)
２つの列の値によってデータフレームをグループ化する	df.groupby(['A', 'B'])
列を用いて小さい順に表をソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
ミディアムパープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
分類モデルから目的変数を予測する	y_pred = model.predict(説明変数)
横棒グラフをゲインズボロ色として描画する	plt.barh(データ列x, データ列y, color='gainsboro')
JSONフォーマットの文字列をデータにする	json.loads(jsonString)
組をナンバリングする	enumerate(aTuple)
タプルをソートする	sorted(aTuple)
黄緑色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
タイムスタンプデータの秒を使う	aDatetime.second
散布図に星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
大きさnで数列と数列についての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
辞書を並べ直してJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
赤い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
option: スカイブルー色を使う	color = 'skyblue'
整数nが配列のいづれか	n in aArray
nかつn2	n and n2
ヒストグラムの色をバリーウッドにセットする	plt.hist(データ列, color='burlywood')
モカシンにヒストグラムの色を設定する	plt.hist(データ列, color='moccasin')
option: グラフの色をリネンに変更する	color = 'linen'
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
デックの大きさ	len(deq)
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
集合の補集合を求める	aSet.difference(aSet2)
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
本日が水曜日か	datetime.datetime.today().weekday() == 2
エポック秒を日付時刻にする	datetime.datetime.fromtimestamp(timestamp)
データフレームのカラムの中に文字列とが含まれるか	df[col].isin([value, value2])
nからn2までの整数リスト	list(range(n, n2+1))
表データの列を取り除く	df.drop(column, axis=1)
ダークオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
縦棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
リストとリストについて散布図を描画して、菱形マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: グレー色を使用する	color = 'grey'
現在を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ダークオリーブグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
データ列の折れ線プロットを描き、、カラーコードとして色を設定する	plt.plot(データ列x, データ列y, color='#800080')
行列のユニークな要素	np.unique(aArray)
全要素が1の行列を作る	np.ones(行数, 列数, dtype=np.int)
日付時刻データは何秒か知る	aDatetime.second
散布図をダークカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
横棒グラフをディムグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='dimgrey')
文字列の最後から空白を取り除く	s.rstrip(' ')
filepathに現在の作業ディレクトリを設定する	os.chdir(os.dirname(filepath))
横方向に２つのデータフレームを連結する	pd.concat([df, df2], axis=1)
rgbの四角マーカーをリストとイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列を二分する	s.partition(sep)
配列を2次元1行に変形する	aArray.reshape(1, -1)
ユニコードを文字に変換する	chr(unicode)
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
トマト色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
数列とリストについて散布図をプロットして、丸マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
色付きの一点鎖線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
rgbの▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
フローラルホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
折れ線グラフの色をパパイヤウィップにする	plt.plot(データ列x, データ列y, color='papayawhip')
option: オールドレースにグラフの色を設定する	color = 'oldlace'
option: ディムグレー色を用いる	color = 'dimgrey'
半透明の点線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
データフレームのそれぞれのグループ毎の最大値	df.groupby(column).max()
オレンジレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
ホワイトスモーク色でヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
データフレームのそれぞれのグループ毎の平均値	df.groupby(column).mean()
option: マルーンを使用する	color = 'maroon'
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
ネイビー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
option: ダークサーモン色を用いる	color = 'darksalmon'
データフレームを列ごとにグループ化してそれぞれのグループごとの合計を求める	df.groupby(column).sum()
データ列は何秒か見る	ds.dt.second
タイムスタンプデータの年数	aDatetime.year
最小値でデータフレームの欠損値を埋める	df.fillna(df.min())
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
赤いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ひとつでも非大文字が文字列中に含まれるか	any(not c.isupper() for c in s)
折れ線グラフの菱形印を黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
データ列と配列について散布図を描画して、マーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
文字列リストをひとつの文字列にする	''.join(map(str, iterable))
nをn2だけ減少させる	n -= n2
赤いバツマーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c='r')
データ列のパーセンタイルを描画する	plt.boxplot(データ列)
双方向キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
二つのリストをスラッシュで区切ってプリントする	print(value, value2, sep='/')
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
データフレームの列名一覧で指定された列をドロップする	df.drop(columns, axis=1)
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
ライトグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
オブジェクトがタプルの要素でないか調べる	element not in aTuple
カウンタのキーを列挙する	aCounter.keys()
イテラブルを文字列に変換して、空白を用いて連結する	' '.join(map(str, iterable))
文字列の開始位置からと終了位置の間に部分文字列があるかどうか確認する	s.find(sub, start, end) != -1
データフレームの列の欠損値を平均値に指定する	df[col].fillna(df[col].mean())
カンマ区切りのファイルTSVファイルをn番目の列を行として読み込む	pd.read_csv(filename, index_col=n)
切片なしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ラインを青い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
マッピングから最後に追加した項目を取り出す	aDict.popitem()
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフの下三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
ロージーブラウン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
option: グリーンを用いる	color = 'green'
カウンタをマッピングで更新する	aCounter.update(aDict)
ライトサーモン色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
色付きの破線でデータ列の移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: ライトブルー色を使う	color = 'lightblue'
散布図の下三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: 印を▲に指定する	marker = '^'
文字列の大文字小文字を交換する	s.swapcase()
散布図の▲マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: ダークサーモン色を使う	color = 'darksalmon'
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
エラーなくマッピングから項目名の値を得る	aDict.get(key, None)
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
option: ゴーストホワイト色を使う	color = 'ghostwhite'
変数を下線付きにする	f'\033[4m{value}\033[0m'
重複した行のみを選択する	df[df.duplicated(keep=False)]
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
option: ベクトルのデータ型を指定する	dtype = bool
列概要を見る	df.info()
線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
配列の差	aArray - aArray2
ヒストグラムを実線で描く	plt.hist(データ列, linestyle='solid')
ボックスチャートをプロットして、平均値を加える	plt.boxplot(データ列, showmeans=True)
折れ線グラフを右三角印として描画する	plt.plot(データ列x, データ列y, marker='>')
辞書順で文字列が文字列より後か調べる	s > s2
散布図をフクシア色を用いて描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
配列の次元を変形する	aArray.reshape(行数, 列数)
グラフの色テーマを色差別なくする	sns.set(pallete='colorblind')
文字列の開始位置からと終了位置の間に部分文字列が含まれるか	s.find(sub, start, end) != -1
オブジェクトは浮動小数点数	isinstance(obj, float)
配列とリストの散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
横棒グラフをブラック色として描画する	plt.barh(データ列x, データ列y, color='black')
アリスブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
サーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
option: ピンク色を用いる	color = 'pink'
n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
option: 色をダークバイオレットに設定する	color = 'darkviolet'
データフレームのリスト列の未入力値を最大値で補う	df[aList].fillna(df[aList].max())
アクアにヒストグラムの色を設定する	plt.hist(データ列, color='aqua')
データフレームのリストカラムの中にある文字列と文字列の合計を求める	df[aList].isin([value, value2]).sum()
コーパスのバージョン	version = 'wcce2022-0.1'
t分布型確率的近傍埋め込み法で濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
option: ドジャーブルーにグラフの色を指定する	color = 'dodgerblue'
データフレームを列名リストによってまとめたグループを使う	df.groupby(columns)
実部と虚部から複素数を作る	complex(x, y)
option: フォントの色をダークバイオレットに設定する	color = 'darkviolet'
オブジェクトに属性があるか調べる	hasattr(obj, プロパティ名)
ホールドアウトを用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
リストとリストについての散布図にrgbの左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフの▽印の線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
入力ストリームを閉じる	f.close()
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
線グラフの色をダーク・スラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: グラフの色をフクシアに設定する	color = 'fuchsia'
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
カラムの空文字をNaNに変換しドロップする	ds.replace('', np.nan).dropna()
データフレームを関数の値によってグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
y軸の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
要素が辞書の値として含まれている	element in aDict.values()
黒いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
散布図の色をダークレッドにする	plt.scatter(データ列x, データ列y, color='darkred')
ヒストグラムを濃いシアン色で描画する	plt.hist(データ列, color='darkcyan')
nからn2の値を引いてnに代入する	n -= n2
オリベドラブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
データフレームのカラムの各値の出現数	df[col].value_counts()
リストからサンプリングする	random.sample(iterable)
辞書の項目名とその値をペアとして取り出す	aDict.items()
整数nの十六進数表現	hex(n)
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
カテゴリで色分けして、データフレームをにバイオリン図としてグラフ化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
日付時刻データが土曜日	aDatetime.weekday() == 5
option: グラフの色をライトグレーに指定する	color = 'lightgray'
データフレームが正規分布からどの程度歪んでいるか見る	df.kurt()
オプションで、標準出力を使用する	file = sys.stdout
データフレームのリストカラムを千の位で丸めて整数型にする	df[aList].round(-3).astype(int)
散布図の上三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
深紅色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームのpercentパーセンタイルを計算する	df.quantile(percent/100)
ライトスレイグレーにヒストグラムの色を変更する	plt.hist(データ列, color='lightslategrey')
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
折れ線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
ミディアムアクアマリン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
リストの末尾	aList[-1]
文字列の末尾の文字	s[-1]
貝殻色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
二つの値を改行で区切ってプリントする	print(value, value2, sep='\n')
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
ゼロ埋めした行列	np.zeros(行数, 列数)
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
データフレームのヒストグラム付き散布図をプロットする	sns.jointplot(x='列名', y='列名', data=df)
グラフを正方形にする	plt.axis('equals')
横棒グラフをスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='skyblue')
option: グラフの種類を点線に設定する	linestyle = 'dotted'
year年month月day日のタイムスタンプ	datetime.datetime(year=year, month=month, day=day)
データフレームの信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
変数を下線付きで表示する	print(f'\033[4m{value}\033[0m')
option: マーカーを菱形に設定する	marker = 'D'
マッピングからキーで指定されたエントリをポップする	aDict.pop(key)
パーセント付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
見やすいグラフを描画する	import seaborn as sns
option: 四角印を描画する	marker = 's'
値を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
option: アリスブルーにグラフの色を設定する	color = 'aliceblue'
散布図の右三角印を赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
option: ダークターコイズ色を使う	color = 'darkturquoise'
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
散布図をデピンク色として描画する	plt.scatter(データ列x, データ列y, color='deeppink')
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
色付きの点線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
集合が空か調べる	len(aSet) == 0
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
深紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
新しいリッジ回帰モデルを新規作成する	model = sklearn.linear_model.Ridge(alpha=正則化項)
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
表データをグループ化し、各列に対し平均値を求める	df.groupby(column)[column2].mean()
ミスティローズ色でヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ヒストグラムをコーンズシルク色として描画する	plt.hist(データ列, color='cornsilk')
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
配列をビン数nを用いてビニングする	pd.cut(aArray, n)
半透明の実線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
nとn2の排他的論理和を計算する	n ^ n2
青いダイアモンド印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
option: ダークゴールデンロッド色を使用する	color = 'darkgoldenrod'
データ列の変遷を赤い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: 文字列をセパレータで使う	sep = s
データ列のノルムをそろえる	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
２つ並べてデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
2次元リストを転置する	[list(x) for x in list(zip(*aList))]
数値を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
散布図をペルー色として描画する	plt.scatter(データ列x, データ列y, color='peru')
option: 色をライムに設定する	color = 'lime'
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
棒グラフを紺色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
紺碧色で散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
n足すn2	n + n2
JSONフォーマットのバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
浮動小数点数のn乗の実数剰余	pow(x, n, y)
数値をシアンにする	f'\033[36m{value}\033[0m'
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
グラフに水平方向の点線をつける	plt.axhline(y=0, linestyle='dotted')
ダークオレンジ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
ペルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
リストとリストの散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
リストを境界値としてデータフレームの中の列を分割する	pd.cut(df[col], aList)
散布図でデータフレームを可視化し、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
データフレームの各次元の大きさ	df.shape
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
論文用にプロットを設定する	sns.set(context='paper')
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
配列の行ごとの最小値を求める	np.min(aArray, axis=1)
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
option: ディムグレー色を使う	color = 'dimgray'
赤いバツマーカーをデータ列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
xが一桁の数	-9 <= x <= 9
両端キューをクリアする	deq.clear()
ひとつ置きにタプルを取り出す	aTuple[::2]
辞書の値を列挙する	aDict.values()
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
データフレームのカラムの曜日数を求める	df[col].dt.dayofweek
プロットのy軸の説明をuntitledに指定する	plt.ylabel('y軸ラベル')
ピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
全要素を０で初期化した3２ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
散布図のポイント印を青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
Pandasでフォーマットfmtで文字列をPandasの日付型に変換する	pd.to_datetime(s, format=fmt)
数列とリストについての散布図に黒い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
ラインを色付きの一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ヒートマップでデータフレームのリスト列の相関行列をグラフ化する	sns.heatmap(df[aList].corr())
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
黄色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
シルバー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
折れ線グラフの色をシーグリーンにする	plt.plot(データ列x, データ列y, color='seagreen')
標準出力を用いる	sys.stdout
円プロットとしてデータ列の割合を作図する	plt.pie(データ列, startangle=90)
nが5の倍数か調べる	n % 5 == 0
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
ファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
十六進表記の文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
列によってデータフレームを並べ、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データフレームの各次元のサイズ	df.shape
オブジェクトはタプルか	isinstance(obj, tuple)
全要素を０で初期化した符号なし８ビット整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.uint8)
組の中の一番小さい値	min(aTuple)
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
データフレームの列がx以上かつx2未満の行を取り出す	df[(x <= df[column]) & (df[column] < x2)]
入力から２つの浮動小数数を読む	A, B = map(float, input().split())
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
データフレームの中の欠損値がある行を落とす	df.dropna()
ダークカーキ色でヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
option: マーカーの色を深紅にする	markerfacecolor = 'crimson'
文字列全体をケースを無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: グラフの色をペルーに設定する	color = 'peru'
数列とリストについての散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
現在の再帰の上限を知る	sys.getrecursionlimit()
複数のデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
カウンタの項目一覧を求める	aCounter.keys()
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
横棒グラフをグリーンイエロー色として描画する	plt.barh(データ列x, データ列y, color='greenyellow')
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
本日が月曜日	datetime.datetime.today().weekday() == 0
ユーザから入力される	int(input())
シーケンスと列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
文字列を最後の部分文字列で二つに区切って、前半の文字列を使う	s.rpartition(sub)[0]
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
既存のベクトルを元に全要素が0の行列を作成する	np.zeros_like(aArray)
データフレームのそれぞれのグループの標準偏差	df.groupby(column).std()
文字列の左端からタブを取り除く	s.lstrip('\t')
データ列の日にち	ds.dt.day
グラフの描画でパステル調に色を使う	sns.set(pallete='pastel')
option: 白色を使う	color = 'white'
option: グラフの色をダークグレーにセットする	color = 'darkgray'
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
option: 印を丸に変更する	marker = 'o'
リストをリバースする	reversed(aList)
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
今日の日を見る	datetime.datetime.today().day
2つのデータフレームを異なる列をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームを複数の列の値ごとに集約し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームから指定された４列のみ選択する	df[[column, column2, column3, column4]]
グラフで利用可能な色の一覧	matplotlib.colors.cnames
option: ８ビット整数型を使う	dtype = np.int8
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
ロバストな線形分類器を準備する	model = sklearn.linear_model.HuberClassifier()
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
Pandasで、データフレームのcollをフォーマットを用いてPandasの日付型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
線グラフの色をミディアムターコイズに変更する	plt.plot(データ列x, データ列y, color='mediumturquoise')
方程式として数式の変数の解を求める	sympy.solve(e, z)
整数nを符号付きでバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
折れ線グラフの色をカーキに変更する	plt.plot(データ列x, データ列y, color='khaki')
散布図をrgbの左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
データフレームとデータフレームの列を横方向につなぐ	pd.concat([df, ds], axis=1)
変数を赤色にする	f'\033[31m{value}\033[0m'
文字をASCIIコードにする	ord(ch)
平均線付き箱ひげ図を描く	plt.boxplot(データ列, meanline=True)
線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
option: ライトシアン色を使う	color = 'lightcyan'
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
黒い右三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
Pandasで、データフレームのcollをフォーマットfmtでタイムスタンプ型に変換する	pd.to_datetime(df[col], format=fmt)
FIXME	np.linalg.eig(aArray)
マッピングをコピーする	dict(aDict)
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
すべてのシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=None)
option: ロージーブラウンにフォントの色を設定する	color = 'rosybrown'
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
実線を使って数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
既存のベクトルを元に全要素が0のベクトル	np.zeros_like(aArray)
ナバホホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
ピーチパフにヒストグラムの色を設定する	plt.hist(データ列, color='peachpuff')
文字列を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
日付データの日	aDate.day
縦棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
option: ダークスレートブルーにフォントの色を変更する	color = 'darkslateblue'
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
二つの浮動小数点数がほぼ等しいか調べる	math.isclose(x, x2)
1行から二つの自然数値を読む	A, B = map(int, input().split())
データフレームを列でソートする	df.sort_values(by=column)
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
数列の相関係数と有意確率を求める	scipy.stats.pearsonr(データ列, データ列2)
option: アクアにグラフの色を設定する	color = 'aqua'
散布図に左三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='<')
実数を小数点以下第一位で四捨五入する	round(x, 1)
データフレームから重複を削除する	df.drop_duplicates()
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
散布図に赤い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
横棒グラフをミントクリーム色として描画する	plt.barh(データ列x, データ列y, color='mintcream')
文字列はリストに含まれるか	element in aList
データフレームの列概要	df.info()
option: オーキッド色を使う	color = 'orchid'
実数を千の位で丸める	round(x, -3)
option: 貝殻を使う	color = 'seashell'
配列の型	aArray.dtype()
各列毎にデータフレームをグループ化して列の最大値を算出する	df.groupby(column)[column2].max()
実数のn乗の実数剰余	pow(x, n, y)
横棒グラフを紺色として描画する	plt.barh(データ列x, データ列y, color='darkblue')
整数nを16進文字列にする	hex(n)[2:]
option: バツ印を加える	marker = 'x'
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
option: フォントの色を黄色に設定する	color = 'yellow'
線グラフを青い点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
フォレストグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
下三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='v')
ファイルからn文字、読む	f.read(n)
ふたつの集合の差	aSet.difference(aSet2)
左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<')
オールドレース色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
ビン数nで配列をビン分割する	pd.cut(aArray, n)
文字列を走査しパターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
ラインの線の種類を一点鎖線に指定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームを列によって集約し、、それぞれのグループごとの個数を計算する	df.groupby(column).count()
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
nとn2の商	n / n2
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
パールバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
赤い丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
データフレームの列の文字列長を列として使う	df[col].str.len()
赤い一点鎖線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
線グラフをミディアムターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ヒストグラムの色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
option: ブラウンに色を変更する	color = 'brown'
列を等しい量になるようにビン数nでビニングする	pd.qcut(ds, n)
オレンジレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
ヒストグラムの色をオールドレースに指定する	plt.hist(データ列, color='oldlace')
データ列の四分位を可視化する	plt.boxplot(データ列)
散布図に青い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
日付時刻データが火曜日かどうか調べる	aDatetime.weekday() == 1
JSONLファイルにSJISでデータフレームを保存する	df.to_csv(filename, encoding='shift_jis')
横棒グラフを貝殻色として描画する	plt.barh(データ列x, データ列y, color='seashell')
xの小数点以下'5'桁までを表示する	print(':.5f'.format(x))
データフレームのリストカラムの上位25%を求める	df[aList].quantile(0.25)
option: フクシアを使う	color = 'fuchsia'
右三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
データフレーム全体をインデックスによって小さい順にソートする	df.sort_index(ascending=True)
タイムスタンプデータからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
エラーなくタプルからキーの値を得る	aDict.get(key, None)
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
カテゴリで色付けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
カラムの中に文字列と文字列が存在するか	ds.isin([value, value2])
線グラフの色をシスルにする	plt.plot(データ列x, データ列y, color='thistle')
日付時刻データが水曜日	aDatetime.weekday() == 2
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
プログラムの実行を正常に止める	sys.exit(0)
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
ランダムにデータフレームから抽出する	df.sample()
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
スチールブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
2つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
横棒グラフをミディアムバイオレットレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列x, データ列y, marker='D')
シーケンスを文字列リストに変換して'改行によって連結する	'\n'.join(map(str, iterable))
数列と配列について散布図を描画し、、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
回帰モデルの残差を算出する	目的変数 - model.predict(説明変数)
黄色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
文字列がタプルの要素でないか調べる	element not in aTuple
データフレームをCSV形式でJSONLファイルに保存する	df.to_csv(filename)
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
ファイルパスをバイナリモードで開いて]、fとする	f = open(filepath, mode='rb')
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
折れ線グラフの色をレモンシフォンに指定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
UNIX秒のデータフレームのcollからタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
データ列の欠損値をxにセットする	ds.fillna(x)
双方向キューの先頭に要素を追加する	deq.appendleft(element)
点線でヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
実行時の標準出力の出力先がターミナルか	os.isatty(sys.stdin.fileno())
濃い青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
リストのすべての要素をクリアにする	aList.clear()
ベクトルの標準偏差を計算する	np.std(aArray)
option: 行列のデータ型を指定する	dtype = np.int16
散布図のポイント印の色を変える	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
option: グラフの色をインディゴに指定する	color = 'indigo'
データフレームが重複しているか調べる	df.duplicated()
dateStringをdatetime64型に変換する	pd.to_datetime(dateString)
ベクトルの最小	np.min(aArray)
JSONLファイルにデータフレームをBOMを付けて保存する	df.to_csv(filename, encoding='utf_8_sig')
ゼロ埋めされた３２ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
浮動小数点数の双曲線余弦	math.cosh(x)
散布図をミントクリーム色を用いて描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データフレームを列によって集約し、、それぞれのグループごとの最大値を求める	df.groupby(column).max()
イテラブルからn個サンプリングする	random.sample(iterable, k=n)
ヒストグラムを淡いピンク色色を用いて描画する	plt.hist(データ列, color='lightpink')
データフレームから重複した行を落とす	df.drop_duplicates()
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
配列とリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
ヒストグラムの色をローングリーンにセットする	plt.hist(データ列, color='lawngreen')
カウントプロットを描画する	sns.countplot(x='列名', data=df)
ファイルを絶対パスに変換する	os.path.abspath(filepath)
日付データの月を見る	aDate.month
ベクトルのユニークな要素	np.unique(aArray)
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
実数の仮数部	math.frexp(x)[0]
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
日付時刻データが月曜日かどうか調べる	aDatetime.weekday() == 0
アイリスのデータセットをロードする	sns.load_dataset('iris')
ヒストグラムをプラム色として描画する	plt.hist(データ列, color='plum')
option: ローングリーン色を使う	color = 'lawngreen'
データフレームの欠損値を平均に設定する	df.fillna(df.mean())
縦軸だけグリッド線	plt.grid(axis='y')
データフレームのリスト列の中に存在する日付データの数をカウントする	df[aList].isin([value]).sum()
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
リストとリストの散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
ビスクにヒストグラムの色を設定する	plt.hist(データ列, color='bisque')
option: パープル色を用いる	color = 'purple'
タプルの最初	aTuple[0]
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
ユーザが整数を入力する	int(input())
線グラフの色をシスルに変更する	plt.plot(データ列x, データ列y, color='thistle')
ビン数nで配列をビンニングしてnamesのラベルをつける	pd.cut(aArray, n, labels=names)
横棒グラフをホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='white')
星マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
option: リネン色を用いる	color = 'linen'
キュー中の要素の出現数を数える	deq.count(element)
option: ダークブルー色を使う	color = 'darkblue'
データフレームを表示するとき表示できる列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
1行から二つの自然数を読む	A, B = map(int, input().split())
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
ヒストグラムをゲインズボロ色を用いて描画する	plt.hist(データ列, color='gainsboro')
option: 青色を使う	color = 'blue'
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
option: n番目のカラムをインデックスに設定する	index_col = n
全要素を0で初期化した配列	np.zeros(要素数)
線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
縦棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
イテラブルをぐるぐると繰り返す	itertools.cycle(iterable)
最初のカテゴリーを除外して表データの列をワンホット・ベクトルにする	pd.get_dummies(df[column], drop_first=True)
プロットの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
２つの文字列が同じか調べる	s == s2
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
折れ線グラフを一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
アルファベットを全て使う	string.ascii_letters
プロットの横軸に名称をつける	plt.xlabel('x軸ラベル')
データフレームを丸めて、整数型にする	df.round().astype(int)
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
データフレームから重複する行を削除する	df.drop_duplicates()
option: 黄緑を用いる	color = 'chartreuse'
ライトゴールドロディイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームをJSONLファイルに行を付けずに書き込む	df.to_csv(filename, index=None)
二変数の最大の値	max(x, y)
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームの中で列に重複があるか確認する	df.duplicated(subset=column)
横棒グラフの色を黄緑にする	plt.barh(データ列x, データ列y, color='chartreuse')
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
折れ線グラフの右三角印の線幅を設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
変数が0に近づくときの数値の極限値を算出する	sympy.limit(e, z, 0)
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
文字列の開始位置と終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
ライトゴールドロディイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
リストを黄色で出力する	print(f'\033[33m{value}\033[0m')
ライトサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
データ列の離れ具合をプロット化する	sns.residplot(x=データ列, y=データ列)
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
文字列の最初から部分文字列を除去する	s.lstrip(sub)
実数を実数から減算する	x - y
折れ線グラフの色をペルーに変更する	plt.plot(データ列x, データ列y, color='peru')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
関数の値によってデータフレームをグループ分けして列挙する	[(name, group) for name, group in df.groupby(関数)]
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
リストの末尾からn番目以前の部分を抽出する	aList[:-n]
横棒グラフをスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='slateblue')
表の内の未入力値を削除する	df.dropna()
リストの中の最大値	max(aList)
ヒストグラムをグレー色を用いて描画する	plt.hist(データ列, color='gray')
作業ディレクトリ	os.getcwd()
ローングリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
コレクションを用いる	import collections
データ列は何曜日か見る	ds.dt.weekday_name
グリッド線を赤くする	plt.grid(color='r')
二進文字列をbytesizeバイトのバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
リストを2回あわせた直積	itertools.product(iterable, repeat=2)
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
表データの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
文字列をn回続くイテラブル	itertools.repeat(element, n)
原点から(実数,y)の距離	math.hypot(x, y)
サイコロと同じ乱数を生成する	random.randint(1, 6)
二つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
nからn2の範囲で	range(n, n2)
配列にはいくつ要素が存在するか調べる	aArray.size
option: フォントの色をダークシアンに設定する	color = 'darkcyan'
線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
パウダーブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
データフレームのカラムの値を正規表現patternでまとめて変更する	df[col].replace(pattern, repl, regex=True)
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
正規分布に基づくパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
option: ▼マーカーを描画する	marker = 'v'
データフレームの中にいくつ文字列が存在するか数える	df.isin([value]).sum()
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
文字列を区切り記号で分割し、、列挙する	s.split(sep)
option: グラフの色を貝殻に指定する	color = 'seashell'
イテラブルと配列についての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
アリスブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
option: ライトグリーン色を用いる	color = 'lightseagreen'
降順に列によってによってデータフレームを並べ直す	df.sort_values(by=column, ascending=False)
データフレームのリストカラムを百の位で四捨五入する	df[aList].round(-2)
リストをビン数nを用いて分割する	pd.cut(aList, n)
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
折れ線グラフの丸印の太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
行列の和を求める	aArray + aArray2
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
耐火レンガ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
柱状グラフを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
横棒グラフをライトスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
タプルの値の一覧	aDict.values()
データフレームのカラムを千の位で丸めて、整数型にする	df[col].round(-3).astype(int)
折れ線グラフをダークゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフに下三角印を使用する	plt.plot(データ列x, データ列y, marker='v')
ゼロ埋めした三二ビット整数型のベクトル	np.zeros(要素数, dtype=np.int16)
option: ブール型を用いる	dtype = np.int32
標準入力から1行分読み込んで改行を取り除く	sys.stdin.readline().rstrip()
双方向キューの中に値が含まれてるか調べる	element in deq
データ列の欠損値をxで埋める	ds.fillna(x)
option: グラフの色をホットピンクに設定する	color = 'hotpink'
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
ヒストグラムの色を黄緑に設定する	plt.hist(データ列, color='chartreuse')
実数以下の最大の整数	math.floor(x)
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
数値を展開する	sympy.expand(e)
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
双曲線余弦の逆数	math.acosh(x)
折れ線グラフのマーカーを△にする	plt.plot(データ列x, データ列y, marker='^')
オレンジレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
横棒グラフをホットピンク色として描画する	plt.barh(データ列x, データ列y, color='hotpink')
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
大文字列	string.ascii_uppercase
文字列を赤色にする	f'\033[31m{value}\033[0m'
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
option: ハニーデュー色を用いる	color = 'honeydew'
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ダークグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
データフレームとしてJSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
ファイル名がテキストファイルか	filename.endswith('.txt')
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
データフレームのカラムのどの値が頻出か見る	df[col].mode()
折れ線グラフの色をドジャーブルーに変更する	plt.plot(データ列x, データ列y, color='dodgerblue')
日付データにn日分足す	aDate + datetime.timedelta(days=n)
xの小数点以下'5'桁の文字列に変換する	':.5f'.format(x)
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
データ列を10の位で四捨五入して整数にする	ds.round(-1).astype(int)
文字コードの最大値	sys.maxunicode
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
左三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
二変数の最大値	max(x, y)
スプリンググリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
リストの末尾から要素をポップする	aList.pop()
符号付きでnを長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
ファイルを書き込み用にEUCでオープンする]	open(filepath, mode='w', encoding='euc_jp')
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
option: 小麦色色を使う	color = 'wheat'
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
CSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep=',')
数列とリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームを２つの列によってグループ化する	df.groupby(['A', 'B'])
データフレームの指定した名前リストの列を抽出する	df[columns]
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
最大値でデータフレームのカラムの欠損値を補う	df[col].fillna(df[col].max())
リストと配列についての散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
ブランチドアーモンド色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
二つのオブジェクトが同じ参照	obj is obj2
文字列は数値か調べる	s.isnumeric()
散布図の▼印を青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
アンティークホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='antiquewhite')
ハローワールドと表示する	print('Hello World')
option: エンコーディングを文字列の示す文字コードに設定する	encoding = s
名前付きタプルをデータからインスタンス化する	C._make(パラメータ)
標準入力から1行読み取る	input()
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
マッピングをソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
データ列の偏りを対数する	np.log(データ列)
option: ミントクリームを使う	color = 'mintcream'
辞書にキーワード引数で更新する	aDict.update(**kwargs)
２つの数値を順にプリントする	print(value, value2)
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
バイナリ書き込みモードでファイルをオープンする]	open(filepath, mode='wb')
データフレームのリストカラムの空文字を欠損値に変換しドロップする	df[aList].replace('', np.nan).dropna()
カウンタ同士で積集合演算する	aCounter & aCounter2
数値の部分分数化を行う	sympy.apart(e)
縦棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
Pandasでデータフレームのcollを日付データにする	pd.to_datetime(df[col])
値を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
Pandasでフォーマットとして文字列をタイムスタンプに変換する	pd.to_datetime(s, format='%Y-%m-%d')
リストとイテラブルについての散布図に黒い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
ミディアムスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
文字列をエンコーディングでバイト列にする	s.encode(encoding=encoding)
option: グラフの色をモカシンに設定する	color = 'moccasin'
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
文字列をコロンで区切って、列挙する	s.split(':')
グラフの色を淡くする	sns.set(pallete='muted')
リストとリストについての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
データフレームを各列毎にグループ化して列の個数を求める	df.groupby(column)[column2].count()
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategrey')
データフレームの中で列に重複があるか見る	df.duplicated(subset=column)
n÷n2を計算する	n / n2
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
折れ線グラフの四角印の色を設定する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
データフレームを各列毎にグループ化して文字列というグループの大きさを求める	df.groupby(column).size()[s]
セットに配列を追加更新する	aSet.update(iterable)
rgbの星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*', c=rgb)
グラフで用いる縦軸にラベルを設定する	plt.ylabel('y軸ラベル')
列から最大長nのキューを作成する	collections.deque(iterable, maxlen=n)
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
配列の標準偏差を計算する	np.std(aArray)
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
文字列の先頭で正規表現に大文字・小文字を無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームから型の列を抽出する	df.select_dtypes(ty)
JSONLファイルにデータフレームをTSVファイルで保存する	df.to_csv(filename, sep='\t')
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
プロットの補足の場所を指定する	plt.legend(loc=(x, y))
ヒストグラムをオールドレース色を用いて描画する	plt.hist(データ列, color='oldlace')
カデットブルーにヒストグラムの色をする	plt.hist(データ列, color='cadetblue')
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
赤い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
文字列をISO書式として日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
配列の列ごとの平均値	np.mean(aArray, axis=0)
散布図の▲マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
データフレームを使う	import pandas as pd
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
ゴールド色としてヒストグラムを描画する	plt.hist(データ列, color='gold')
ふたつのマップを合体する	aDict | aDict2
formatのパターンで文字列からタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
ヒストグラムをライトシアン色を用いて描画する	plt.hist(データ列, color='lightcyan')
本日の日	datetime.datetime.today().day
ヒストグラムの色をライトコーラルにセットする	plt.hist(データ列, color='lightcoral')
データフレームのcollのエポック秒からPandasの日付型にする	pd.to_datetime(df[col], unit='s', utc=True)
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
レベッカパープルにヒストグラムの色を指定する	plt.hist(データ列, color='rebeccapurple')
データフレームをJSONLファイルに行を付けずに保存する	df.to_csv(filename, index=None)
データ列の時	ds.dt.hour
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
折れ線グラフの大バツ印を青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
勾配ブースティング回帰木を作成する	model = sklearn.ensemble.GradientBoostingRegressor()
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
整数nを8進数文字列に変換する	oct(n)[2:]
option: 読み込まないフッタをnにセットする	skipfooter = n
白い線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
ピアソンとしてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
右三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
クリムゾン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
小文字を見る	string.ascii_lowercase
リストとリストについて散布図を描画して、右三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列リストをsepを区切りとして一つにする	sep.join(aStringList)
文字列をタイムスタンプ型に変換する	pd.to_datetime(s)
データフレームをグループ化してヒストグラムで見る	sns.histplot(df, x='列名', hue='カテゴリ名')
双方向キューのstart番目からend番目の部分値を使う	collections.deque(itertools.islice(deq, start, end))
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
日付データが日付データより前か調べる	aDate < aDate2
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
本日が土曜日	datetime.datetime.today().weekday() == 5
浮動小数点数を十六進表記の文字列にする	x.hex()
散布図をドジャーブルー色として描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
カンマ区切りのファイルTSVをn番目のカラムをインデックスとして読む	pd.read_csv(filename, index_col=n)
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
0からnの範囲	range(n)
八進数文字列を整数にする	int(s, 8)
x,y,zをそれぞれn,n2,n3に指定する	x, y, z = n, n2, n3
タイムスタンプデータが土曜日かどうか調べる	aDatetime.weekday() == 5
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
n個分右に両端キューの順序を回転させる	deq.rotate(n)
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
丸マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
オレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
日付時刻データの日付	aDatetime.date()
直前の値でデータフレームのNaNを補う	df.fillna(method='ffill')
データフレームの各グループごとの標準偏差	df.groupby(column).std()
配列とリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
直後の値でデータフレームのカラムのNaNを補う	df[col].fillna(method='bfill')
横棒グラフの色をホワイトにする	plt.barh(データ列x, データ列y, color='white')
折れ線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgreen')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
キューの最大長を見る	deq.maxlen
リストと配列について散布図をプロットし、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
赤い左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
ダークオリーブグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
セットから全ての要素を取り除く	aSet.clear()
二つの列によって昇順にデータフレームを並べる	df.sort_values(by=['A', 'B'], ascending=True)
データフレームを二つの列を用いてソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
昇順にデータフレームを複数の列によって破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
列に列を続ける	itertools.chain(iterable, iterable2)
散布図の右三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
数式を数値計算する	float(e)
半透明の点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
異なるカラムをキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
棒グラフをパレットトルコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
オプションで、標準エラーに出力する	file = sys.stderr
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
ベクトルの個数を求める	aArray.size
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームの欠損値を直後の値で補う	df.fillna(method='bfill')
縦棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
パールゴールデンロッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
イテラブルとデータ列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
カラムは正規分布からどれだけ、尖っているか見る	ds.skew()
xの小数点以下'1'桁までを表示する	print(':.1f'.format(x))
空白	' '
データフレームのカラムの未入力値を最小値で埋める	df[col].fillna(df[col].min())
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
双方向キューの最初にシーケンスの各要素を付け加える	deq.extendleft(iterable)
option: ライムグリーン色を用いる	color = 'limegreen'
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
文字列を最後の部分文字列で分割した時の残りの文字列	s.rpartition(sub)[-1]
データフレームを列の値として集約して、それぞれのグループごとの件数を知る	df.groupby(column).size()
文字列の無限イテラブルを得る	itertools.repeat(element)
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
option: ミントクリーム色を使う	color = 'mintcream'
グラフにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
最大値と最小値を用いて正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
日付時刻データの月数	aDatetime.month
ダークゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
本日の年数を見る	datetime.datetime.today().year
日付時刻データが日付時刻データよりあとか	aDatetime > aDatetime2
ValueMapでカラムを置換する	ds.replace(ValueMap)
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
多次元データをMSDでパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
リストのn番目からn2番目まで	aList[n:n2]
オブジェクトは浮動小数点数クラスのインスタンス	isinstance(obj, float)
数を小数点以下第一位で丸める	round(x, 1)
キーが辞書に存在するか調べる	key not in aDict
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
折れ線グラフのダイアモンド印を青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
線グラフの色をシーグリーンにセットする	plt.plot(データ列x, データ列y, color='seagreen')
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
書き込みできるようにファイルをオープンする]	open(filepath, mode='w')
色付きの実線を用いてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
データフレームのリスト列の中に存在する文字列の合計を数える	df[aList].isin([value]).sum()
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
赤い左三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
データ列を百の位で丸める	ds.round(-2)
配列のそれぞれを関数でフィルタする	map(func, iterable)
組の先頭のn要素を除く	aTuple[n:]
グリッドの線種を実線に変更する	plt.grid(linestyle='solid')
グラフの色を濃くする	sns.set(pallete='deep')
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
option: ダークスレートブルーを使用する	color = 'darkslateblue'
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
データフレームのカラムの欠損値を直前の値で補う	df[col].fillna(method='ffill')
リストのそれぞれを関数でフィルタする	filter(func, iterable)
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
option: 色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
option: 淡い茶色色を用いる	color = 'tan'
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
行列の要素ごとに加算する	aArray + aArray2
データフレームのリストカラムは正規分布からどの程度、尖っているか調べる	df[aList].skew()
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
回帰分析をランダムフォレストで行う	model = sklearn.ensemble.RandomForestRegressor()
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
列のユニークな値	ds.unique()
各列毎にデータフレームをグループ化して列の分散を求める	df.groupby(column)[column2].var()
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
勾配ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
ダークグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
イエローグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
option: エラーを無視するように設定する	errors = 'ignore'
オレンジレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
option: グラフの色をライトグレーに設定する	color = 'lightgray'
ゼロ埋めした符号なし８ビット整数型のベクトル	np.zeros(要素数, dtype=np.uint8)
データフレームに重複があるか調べる	df.duplicated()
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
ダークターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='darkturquoise')
折れ線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列x, データ列y, color='mediumorchid')
辞書に要素をキーとして加える	aDict[key] = element
データフレームをJSONLファイルに保存する	df.to_excel(filename)
データ列を分割数nとしてビン分割する	pd.cut(ds, n)
縦棒プロットを描画してラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
option: マルーン色を使う	color = 'maroon'
データフレームのリストカラムの欠損値を最大値に指定する	df[aList].fillna(df[aList].max())
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
数値を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
y軸の目盛りを表示しない	plt.yticks([])
ヒストグラムのビンを設定する	plt.hist(データ列, bins=区関数)
option: タブをセパレータで用いる	sep = '\t'
折れ線グラフの色をリネンに変更する	plt.plot(データ列x, データ列y, color='linen')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
データフレームを列で並べ直して、更新する	df.sort_values(by=column, inplace=True)
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
ライトグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
散布図のマーカーの大きさを変える	plt.scatter(データ列x, データ列y, markersize=2.0)
散布図を黒い丸マーカーで描く	plt.plot(データ列x, データ列y, marker='o', c='k')
パウダーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgrey')
フォレストグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
文字列中の部分文字列を別の文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
線グラフの色をグリーンにセットする	plt.plot(データ列x, データ列y, color='green')
リストの要素を昇順に並べる	sorted(aList, reverse=False)
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
プラットホームの名前	sys.platform
ベージュにヒストグラムの色を設定する	plt.hist(データ列, color='beige')
バツ印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
ミディアムオーキッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
折れ線グラフの透明度をセットする	plt.plot(データ列x, データ列y, alpha=0.5)
書式で文字列をdatetime64型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
option: ライトグリーンを使う	color = 'lightgreen'
棒グラフをハニーデュー色を用いて描画する	plt.bar(データ列x, データ列y, color='honeydew')
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
日付データは日付データよりあとかどうか調べる	aDate > aDate2
文字列を走査し、正規表現にマッチするか調べる	re.search(pattern, s)
エクセルデータファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
配列の行列積	np.matmul(aArray, aArray2)
データ列の最頻値	ds.mode()
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
空白文字を全部使う	string.whitespace
回帰モデルの残差を計算する	目的変数 - model.predict(説明変数)
箱ひげ図を描画し、、平均線を加える	plt.boxplot(データ列, meanline=True)
option: フォントの色をオリーブに変更する	color = 'olive'
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
ラインを青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: 線の種類を実線に設定する	linestyle = 'solid'
グラフの色を全般的に明るくする	sns.set(pallete='bright')
ケンドールの順位相関係数を計算する	scipy.stats.kendalltau(データ列, データ列2)
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
折れ線グラフのバツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
改行文字	'\n'
行列の列ごとの最小値を算出する	np.min(aArray, axis=0)
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
グラフの補足の場所を(x,y)に設定する	plt.legend(loc=(x, y))
option: グラフの色をホワイトスモークに変更する	color = 'whitesmoke'
アクア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
文字列の右側からタブを取り除く	s.rstrip('\t')
データフレームを見る	df.head()
線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
▽マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v')
文字列の先頭でパターンにケースを無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
上位集合かどうか調べる	aSet.issuperset(aSet2)
ファイル名がCSVファイルか	filename.endswith('.csv')
ヒストグラムを描画し、、ビン数を設定する	plt.hist(データ列, bins=区関数)
ヒストグラムの色をパパイヤウィップに指定する	plt.hist(データ列, color='papayawhip')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
セット＼集合	aSet.difference(aSet2)
リストを青色で出力する	print(f'\033[34m{value}\033[0m')
データ列を使う	import pandas as pd
データフレームの要約統計量	df.describe()
ブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
オブジェクトのハッシュ値	hash(obj)
データフレームのn行目を破壊的に消す	df.drop(n, axis=0, inplace=True)
データフレームの各グループごとの分散	df.groupby(column).var()
二つのベクトルを行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
ファイルからバイナリストリームをオープンして]fとする	f = open(filepath, mode='rb')
配列と配列についての散布図にrgbの丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列は全て数値か確認する	s.isnumeric()
データフレームから最初の列を除く	df[df.columns[1:]]
nを半分にする	n /= 2
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
option: ディムグレーを使う	color = 'dimgrey'
タプルの末尾のn要素を捨てる	aTuple[:-n]
複数行対応として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
リストとリストについての散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ファイルをEUCとしてオープンする]	open(filepath, encoding='euc_jp')
辞書から最後に追加した項目をポップする	aDict.popitem()
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフの色をフクシアに指定する	plt.plot(データ列x, データ列y, color='fuchsia')
option: 青紫色を使う	color = 'violet'
文字列の左側から空白を取り除く	s.lstrip(' ')
n個の数値イテラブルを使う	range(n)
変数をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
要素ひとつのタプル	(element,)
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
ファイル全体を行単位で分割して読み込む	f.readlines()
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
黒い三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
文字列中の部分文字列をカウントする	s.count(sub)
option: 青にグラフの色を変更する	color = 'blue'
ヒストグラムの色をオリベドラブに指定する	plt.hist(データ列, color='olivedrab')
整数nを2進数表現にする	bin(n)
連番の配列の自動作成する	np.arange(開始値, 終了値, 等差)
平均線付きボックスチャートをプロットする	plt.boxplot(データ列, meanline=True)
データフレームの列が文字列が含まれるデータを抽出する	df[df[column].str.contains(s)]
データ列を円プロットにする	plt.pie(データ列, startangle=90)
色付きの一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
リストの平均値	sum(aList)/len(aList)
データ列の偏りを平方根する	np.sqrt(データ列)
option: パレットトルコイズにグラフの色を設定する	color = 'paleturquoise'
折れ線グラフにバツマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
ライトコーラル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
円グラフを正確な円にする	plt.axis('equals')
集合をイミュータブルに変換する	frozenset(aSet)
option: グラフの色をプラムにセットする	color = 'plum'
ケンドール相関係数としてデータフレームの列と列の相関行列を計算する	df[[column, column2]].corr(method='kendall')
パールゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
文字列を変数にして変数にする	z = sympy.Symbol(s)
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
ミディアムパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
option: グラフの色をシャルトリューズに指定する	color = 'chartreuse'
nをn2乗に増やす	n **= n2
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
変数を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
JSONLファイルにデータフレームを保存する	df.to_excel(filename)
nがn2以下、それか、n3以上か	n <= n2 or n >= n3
８進数字を全部使う	string.octdigits
タプルを展開して出力する	print(*aTuple)
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategray')
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
ヒストグラムを淡い茶色色で描画する	plt.hist(データ列, color='tan')
貝殻色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
折れ線グラフに菱形印を加える	plt.plot(データ列x, データ列y, marker='D')
フローラルホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
柱状図を描画し、合計を1にする	plt.hist(データ列, density=True)
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
散布図のマーカーを丸印にする	plt.scatter(データ列x, データ列y, marker='o')
実測値をモデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
既存のファイルを文字コードtextを使って追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
クリムゾンにヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
データフレームのカラムのNaNを最頻値で置換する	df[col].fillna(df[col].mode().iloc[0])
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
ヒストグラムを白くする	plt.hist(データ列, color='w')
折れ線グラフの丸印の色を設定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
文字列を部分文字列で二分し最初の文字列を見る	s.partition(sub)[0]
珊瑚色で散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
真上位集合か調べる	aSet > aSet2
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
棒グラフをミディアムシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
クラス分類をK最近傍法として行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
縦棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
サドルブラウン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
nの8進数リテラル	oct(n)
横棒グラフをドジャーブルー色として描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
リネンにヒストグラムの色を設定する	plt.hist(データ列, color='linen')
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
数式の平方根を計算する	sympy.sqrt(e)
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
option: ダークシアン色を用いる	color = 'darkcyan'
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
ゼロ埋めされた符号なし８ビット整数型の行列	np.zeros(要素数, dtype=np.uint8)
スライドにプロットの目的を設定する	sns.set(context='talk')
散布図のポイントマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
option: 白にグラフの色をセットする	color = 'white'
Pandasのバージョンを見る	print(pd.__version__)
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
mathをインポートする	import math
option: グラフの色を淡い茶色にセットする	color = 'tan'
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
xの印字可能な文字列	ascii(x)
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
ヒストグラムを描画して、区間数を設定する	plt.hist(データ列, bins=区関数)
縦棒グラフをダークスラテグレー色を使って描画する	plt.bar(データ列x, データ列y, color='darkslategray')
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
データフレームを列によってまとめたグループ	df.groupby(column)
option: マーカーの色をブラックにする	markerfacecolor = 'black'
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
option: サーモン色を使う	color = 'salmon'
リストを番号付けする	enumerate(aList)
本日の日付時刻	datetime.datetime.now()
二つのデータフレームを異なる列をキーとして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームのカラムの中にがあるか確認する	df[col].isin([value])
データフレームをサンプリングする	df.sample()
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
イテラブルから複数個ランダムに選ぶ	random.choices(iterable, k=n)
値∈集合	element in aSet
縦棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
赤い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
入力から二つの整数を読む	A, B = map(int, input().split())
散布図に黒いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
散布図にポイントマーカーを使用する	plt.scatter(データ列x, データ列y, marker='.')
option: シスル色を使う	color = 'thistle'
散布図に赤い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
散布図の星マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
データフレームの列の文字列が文字列で終わらない行を取り出す	df[not df[column].str.endswith(s)]
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
データフレームのカラムの欠損値をモードに設定する	df[col].fillna(df[col].mode().iloc[0])
折れ線グラフの透明度を変更する	plt.plot(データ列x, データ列y, alpha=0.5)
データフレームのカラムの中央値を求める	df[col].median()
実数の逆双曲線正弦	math.asinh(x)
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
折れ線グラフの星マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
全ての８進数字	string.octdigits
折れ線グラフの色をやわらかい青にする	plt.plot(データ列x, データ列y, color='cornflowerblue')
日付時刻データをn時間前にする	aDatetime - datetime.timedelta(hours=n)
データフレームの指定された列名一覧の列を選択する	df[columns]
ヒストグラムをディムグレー色を用いて描画する	plt.hist(データ列, color='dimgrey')
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
ふたつの集合がセットと互いに素	aSet.isdisjoint(aSet2)
淡くカラーパレットをグラフの描画で使う	sns.set(pallete='muted')
新しい多重集合をイテラブルから生成する	collections.Counter(iterable)
リストを引数として展開して出力する	print(*aList, sep=',')
データフレームの指定した列を配列として取り出す	df[column].values
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
黒い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='k')
リストをタプルに変換する	tuple(aList)
入力から二つの文字列を取り出す	A, B = map(str, input().split())
ヒストグラムをミディアムスレートブルー色を用いて描画する	plt.hist(データ列, color='mediumslateblue')
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームからカテゴリデータの列のみ取り出す	df.select_dtypes('object')
データフレームを列でまとめたグループ	df.groupby(column)
列を集合に変換する	set(iterable)
タプルの合計値を計算する	sum(aTuple)
降順にデータフレームを複数の列でで並べ直す	df.sort_values(by=column, ascending=False)
カウンタを高頻度な方から列挙する	aCounter.most_common()
リストとリストについての散布図にrgbの三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: 深紅を使う	color = 'crimson'
散布図に菱形マーカーを用いる	plt.scatter(データ列x, データ列y, marker='D')
ヒストグラムの色をデピンクに変更する	plt.hist(データ列, color='deeppink')
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
散布図をパレットトルコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
青い点線で線をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
折れ線グラフのバツ印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
両端キューの要素をn個分ローテンションする	deq.rotate(n)
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
プロットのパレットを全般的に淡くする	sns.set(pallete='muted')
最大長nの両端キューを用意する	collections.deque(maxlen=n)
リストに文字列を追加する	aList.append(element)
折れ線グラフを赤い点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームの棒プロットをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
データフレームのカラムの曜日	df[col].dt.weekday_name
配列が何次元か調べる	aArray.ndim
シスル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
データフレームを二つの列の値でグループ分けする	df.groupby(['A', 'B'])
ミスティローズにヒストグラムの色を設定する	plt.hist(データ列, color='mistyrose')
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
赤いバツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
option: マーカーの線幅を変える	markeredgewidth = 2.5
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
横軸のラベルを設定する	plt.xlabel('x軸ラベル')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
散布図に青い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
2つ並べて柱状グラフを描画する	plt.hist([データ列, データ列], color=['b', 'r'])
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='gray')
パラメータが0に近づくときの数式の極限値を算出する	sympy.limit(e, z, 0)
データフレームを各列とカラムの組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
オブジェクトがタプルに含まれないか調べる	element not in aTuple
列のコンビネーション	itertools.combinations(iterable, n)
データフレームの先頭n行	df.head(n)
タプルの末尾のn要素を除く	aTuple[:-n]
列を用いてデータフレームをソートして、下の方n件を取り出す	df.sort_values(columns).tail(n)
縦棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
nをn2分の一にする	n /= n2
nがリストのどれか	n in aList
データフレームを'A'列によって昇順に並べて、更新する	df.sort_values(by='A', ascending=True, inplace=True)
線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
データフレームの列の文字列長を列として見る	df[col].str.len()
TSVファイルをカラムの名前を指定せず読み込む	pd.read_csv(filename, header=None)
カーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ゲインズボロ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
バイオレット色のヒストグラムを描画する	plt.hist(データ列, color='violet')
ひとつでも非大文字が文字列中に含まれるか調べる	any(not c.isupper() for c in s)
ベージュ色でヒストグラムを描画する	plt.hist(データ列, color='beige')
グリッド線	plt.grid(linestyle='--')
option: フォントの色をシーグリーンに設定する	color = 'seagreen'
辞書の項目数	len(aDict)
データフレームのグループ毎の最小値	df.groupby(column).min()
分類木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
範囲指定してデータフレームの行を取り出す	df[start:end]
回帰分析をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
多次元データを特異値分解を用いてパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームをまとめて丸める	df.round()
リストの先頭の要素	aList[0]
ヒストグラムの色を茶色に変更する	plt.hist(データ列, color='brown')
'A'列の値によってデータフレームをまとめたグループを見る	df.groupby('A')
紺碧色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
縦棒グラフを描画して、左寄せする	plt.bar(ラベル列, データ列, align='edge')
折れ線グラフの色を赤にする	plt.plot(データ列x, データ列y, color='red')
折れ線グラフの色をマゼンタに変更する	plt.plot(データ列x, データ列y, color='magenta')
データフレームを各列毎に集約して、列の分散を求める	df.groupby(column)[column2].var()
散布図をデピンク色を使って描画する	plt.scatter(データ列x, データ列y, color='deeppink')
option: 印を大バツに指定する	marker = 'X'
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
配列と数列について散布図をプロットして、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図の大バツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
リネン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
折れ線グラフにポイントマーカーを加える	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムをナバホホワイト色として描画する	plt.hist(データ列, color='navajowhite')
グラフを画面用に指定する	sns.set(context='notebook')
辞書をJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
横棒グラフをサンディーブラウン色として描画する	plt.barh(データ列x, データ列y, color='sandybrown')
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
パパイヤウィップ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
文字列の開始位置先に部分文字列がある	s.find(sub, start) != -1
円グラフを時計回りに描く	plt.pie(データ列, startangle=90, counterclock=False)
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
縦棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
スカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
option: 追加モードを用いる	mode = 'a'
単位正方行列	np.identity(n)
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データフレームから指定されたデータ型のカラム名の一覧	df.select_dtypes(型).columns
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
データフレームから重複した行を削除する	df.drop_duplicates()
最初のカテゴリーを無視してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
オリーブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
データフレームの中に文字列と文字列が存在するか調べる	df.isin([value, value2])
文字列をカンマで区切って、列挙する	s.split(',')
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s')
CSVファイルTSVファイルをn番目のカラムを行として読み込む	pd.read_csv(filename, index_col=n)
文字列の開始位置番目と終了位置番目の間に部分文字列がないかどうか調べる	s.find(sub, start, end) == -1
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
行列の形状	aArray.shape
既存の配列をベースに全要素が1の配列を作る	np.ones_like(aArray)
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
実数を小数点以下で四捨五入する	round(x, n)
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
赤い上三角マーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='r')
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
データフレームの最頻値	df.mode()
xの小数点以下'5'桁までの文字列にする	':.5f'.format(x)
データフレームのリスト列の未入力値をxに設定する	df[aList].fillna(x)
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
白色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
日付時刻データとタイムスタンプデータの時間差	aDatetime - aDatetime2
辞書をチェーンマップにする	collections.ChainMap(aDict)
範囲を指定して部分文字列を文字列の末尾から探す	s.find(sub, start, end)
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
グレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
縦棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
最後の部分文字列で文字列を二分し前半の文字列を使う	s.rpartition(sub)[0]
データフレームのリスト列は正規分布からどの程度歪んでいるか見る	df[aList].kurt()
散布図の左三角印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
タイムスタンプデータからn週間分、引く	aDatetime - datetime.timedelta(weeks=n)
データフレームのn行目を取り除いて更新する	df.drop(n, axis=0, inplace=True)
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
数列の変化を一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームのカラムの正規分布に対する左右対称性を求める	df[col].kurt()
折れ線グラフの左三角印を青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
データ列を用いる	import pandas as pd
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
度数分布図の範囲を指定する	plt.hist(データ列, range=(start, end))
データ列を四分位数で分割する	pd.qcut(ds, 4)
乱数シードを初期化する	random.seed()

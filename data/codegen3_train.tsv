線グラフの色をブランチドアーモンドに指定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームをある列によってグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
リストと配列について散布図をプロットしてマーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
サーモン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
ラベンダーブラッシュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームのn行以降取り出す	df[n:]
数式を微分する	sympy.diff(e)
文字列でフォーマットして本日を文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
プロットのパレットをパステル調にする	sns.set(pallete='pastel')
散布図をダークシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
データシリーズを千の位で丸める	ds.round(-3)
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームの中の列を等しい量になるようにビン数nとしてビニングする	pd.qcut(df[col], n)
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームからランダムに100行を重複を認めてサンプリングする	df.sample(100, replace=True)
文字列を全て大文字に変換する	s.upper()
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
折れ線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
大バツマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='X')
リストをビン数nで分割する	pd.cut(aList, n)
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
ベクトルの行	aArray[行番号]
option: 印を▽に変更する	marker = 'v'
指定したカラムの分散	df['列A'].var()
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
option: ミディアムオーキッドを用いる	color = 'mediumorchid'
option: ダークグレーにグラフの色を設定する	color = 'darkgray'
option: スレートブルーにグラフの色をセットする	color = 'slateblue'
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
データフレームの選択した列の統計量	df[['列A', '列B']].describe()
折れ線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
文字列の末尾から改行を除く	s.rstrip('\n')
二つの列のカテゴリによってデータフレームをグループ化する	df.groupby(['列A', '列B'])
配列のn次モーメント	scipy.stats.moment(配列, moment=n)
散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
option: スキップする列番号をnamesで指定する	skiprows = names
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
データフレームの列を並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
ラジアンの角度を求める	math.degrees(x)
実数の三乗	x ** 3
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
実数の常用対数	math.log10(x)
折れ線グラフをサンディーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='sandybrown')
列を2回あわせたデカルト積	itertools.product(iterable, repeat=2)
option: セパレータをコロンにする	sep = ':'
オレンジにヒストグラムの色を変更する	plt.hist(データ列, color='orange')
折れ線グラフのダイアモンド印を赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
スノーにヒストグラムの色を設定する	plt.hist(データ列, color='snow')
散布図を深紅色として描画する	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフに黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームの指定したカラムの欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
オブジェクトのメモリビューを見る	memoryview(obj)
オブジェクトのイテレータ	iter(obj)
折れ線グラフの色をペルーに指定する	plt.plot(データ列x, データ列y, color='peru')
ふたつの関係が上位集合もしくは等しいか確認する	aSet > aSet2
ヒストグラムの色をターコイズにセットする	plt.hist(データ列, color='turquoise')
バイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
データフレームをグループ化し、ある列に対し合計を求める	df.groupby('列A')['列B'].sum()
データフレームのインデックスの名前を全て付け直す	df.rename(index={x: y})
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか	s.find(sub, start, end) == -1
ヒストグラムの色を黄色に変更する	plt.hist(データ列, color='yellow')
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
あるカラムの中の欠損値の合計を数える	df['列A'].isna().sum()
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
データシリーズを千の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
組は全て真か調べる	all(aTuple)
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
セパレータで文字列を分割して、文字列リストに変換する	s.split(sep)
ValueMapでデータフレームの値をまとめて置換する	df.replace(ValueMap)
ベクトルから重複を除いた行列を作る	np.unique(aArray)
nがn2で割り切れるかテストする	n % n2 == 0
折れ線グラフのマーカーを菱形にする	plt.plot(データ列x, データ列y, marker='D')
本日のタイムスタンプを算出する	datetime.datetime.now()
文字列を部分文字列を用いて二分する	s.partition(sub)
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
中央値でデータ列をビン分割する	pd.qcut(ds, 2)
散布図に赤い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
option: グラフの色をサーモンに変更する	color = 'salmon'
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
棒プロットの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
option: 淡いピンク色色を使う	color = 'lightpink'
2つの数値をプリントする	print(value, value2)
option: 最初のカラムをインデックスに設定する	index_col = 0
データフレームからカテゴリデータの列名の一覧を求める	df.select_dtypes('object').columns
辞書のキー一覧	list(aDict)
option: 平均を加える	showmeans = False
オプションで、ファイルを用いる	file = sys.open(filename, 'w')
数列とリストについて散布図を描画してマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
option: レモンシフォンを用いる	color = 'lemonchiffon'
赤い破線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
データフレーム中の欠損値をドロップし、みる	df.dropna()
カラーバーを描画する	plt.colorbar()
最後の項目を辞書からポップする	aDict.popitem()
指定したカラムのNaNをxに指定する	df['列A'].fillna(x)
タイムスタンプデータがタイムスタンプデータより前かどうか調べる	aDatetime < aDatetime2
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ラベンダーブラッシュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
イテラブルとイテラブルの散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフをコーンフラワーブルー色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
リストをコピーする	aList.copy()
部分文字列が文字列の終了位置より前に含まれない	s.find(sub, 0, end) == -1
要素は集合の要素	element in aSet
予測値とデータの離れ具合を描画する	sns.residplot(x='列名', y='列名', data=df)
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
データフレームを指定した列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
等差数列から乱数を生成する	random.randrange(start, end, step)
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
ヒストグラムで配列を可視化する	plt.hist(データ列)
横棒グラフを描いて棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのインデックスの名前を一度に付け直す	df.rename(index={x: y})
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
符号なしでnをバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big')
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
配列に列を続ける	itertools.chain(iterable, iterable2)
option: エンコーディングをSJISに変更する	encoding = 'shift_jis'
セットから任意の要素を取り出す	aSet.pop()
あるカラムの文字列に部分文字列が含まれる行を抽出する	df[df['列A'].str.contains(部分文字列)]
指定したカラムが正規分布からどの程度尖っているか見る	df['列A'].skew()
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
option: スプリンググリーンに色を変更する	color = 'springgreen'
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
コロンで文字列を分割して、文字列リストに変換する	s.split(':')
黒い菱形マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
箱髭図を描画して、平均を追加する	plt.boxplot(データ列, showmeans=True)
イテラブルを関数でフィルタする	map(func, iterable)
データフレームから一つの列を抽出する	df[['列A']]
データフレームを異なる列をキーとして左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
配列の調和平均を算出する	scipy.stats.hmean(配列)
データフレームのある列の標準偏差	df['列A'].std()
散布図に星印を使う	plt.scatter(データ列x, データ列y, marker='*')
文字列の右端から空白を取り除く	s.rstrip(' ')
文字列の先頭で正規表現にマッチするか確認する	re.match(pattern, s)
データフレームをCSVファイルから読む	pd.read_csv('file.csv', sep=',')
配列を等量でビン数nとしてビン分割する	pd.qcut(aArray, n)
option: 色を耐火レンガに設定する	color = 'firebrick'
要素が双方向キューの中に存在する	element in deq
散布図をダークスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
リストを展開してプリントする	print(*aList)
option: グラフの色をゴールドに設定する	color = 'gold'
横棒プロットの色をrgbに変更する	plt.barh(ラベル列, データ列, color=rgb)
配列の最頻値を使う	mode, count = scipy.stats.mode(配列)
バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x')
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
nがn2以上	n >= n2
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
データフレームの列名を列挙する	df.columns
前もって大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
折れ線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
nがn2よりも大きいか調べる	n > n2
折れ線グラフの色を珊瑚に設定する	plt.plot(データ列x, データ列y, color='coral')
ヒストグラムをオールドレース色として描画する	plt.hist(データ列, color='oldlace')
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
配列のピアソンの相関係数	scipy.stats.pearsonr(配列, 配列2)
散布図の左三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
リストと配列についての散布図に上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
パウダーブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='powderblue')
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
データフレームから散布図を作り、線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
データシリーズの未入力値を前の行の値に設定する	ds.fillna(method='ffill')
非数値データ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
追加できるように文字コードtextとしてファイルを開く]	open(filepath, mode='a', encoding=text)
データシリーズの欠損値を直後の値に設定する	ds.fillna(method='bfill')
データフレームをある列のカテゴリによって集約する	df.groupby('列A')
配列の偏差値を算出する	50 + 10 * scipy.stats.zscore(配列)
クラス分類の予測精度をヒートマップで確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
配列とリストについての散布図にrgbの大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
マッピングのエントリ数	len(aDict)
リストと配列の散布図に赤い三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームの指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
option: 印をダイアモンドに変更する	marker = 'D'
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
リストを縦軸リストをx軸として大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
データフレームを10の位で四捨五入する	df.round(-1)
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
option: 貝殻を使う	color = 'seashell'
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
列を累積する	itertools.accumulate(iterable, operator.mul)
データフレームの指定したカラムの中に文字列と文字列がいくつあるかカウントする	df['列A'].isin([value, value2]).sum()
ミディアムスプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
縦棒グラフをミディアムアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategray')
option: フォントの色をオレンジレッドに設定する	color = 'orangered'
グラフの描画で色差別なく色テーマを使用する	sns.set(pallete='colorblind')
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
nとn2の商を求める	n / n2
ライトサーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
グループ化してデータフレームの散布図を横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
option: グラフの色を白に設定する	color = 'white'
黒い▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: 色をライトグレーに設定する	color = 'lightgray'
ふたつの列でグループ化し最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
複数のカラムからグループ化し標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
切片なしの回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームから重複を残さず重複をドロップする	df.drop_duplicates(keep=False)
ファイルからn文字読む	f.read(n)
日付時刻データが木曜日かどうか	aDatetime.weekday() == 3
ひとつでもアスキー文字が文字列内に含まれるかどうか調べる	any(c.isascii() for c in s)
option: マーカーの色を青にする	markerfacecolor = 'blue'
散布図のバツマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データフレームの選択した列を100の位で丸める	df[['列A', '列B']].round(-2)
大量のデータが正規分布に従うか調べる	scipy.stats.kstest(df['列A'], 'norm')
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
マップに項目名が存在しているか確認する	key not in aDict
線グラフをアクア色を用いて描画する	plt.plot(データ列x, データ列y, color='aqua')
option: 色をミディアムオーキッドに設定する	color = 'mediumorchid'
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
重回帰モデルを学習する	model.fit(説明変数, 目的変数)
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
赤い星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
option: サドルブラウンにグラフの色を変更する	color = 'saddlebrown'
文字列の中のパターンによるすべてのマッチを使う	re.findall(pattern, s)
option: ナバホホワイト色を用いる	color = 'navajowhite'
フローラルホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='floralwhite')
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
黒いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
横棒グラフをコーンズシルク色として描画する	plt.barh(データ列x, データ列y, color='cornsilk')
キューの上限を使う	deq.maxlen
濃いシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームの指定したカラムのNaNを最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
データシリーズは何分か見る	ds.dt.minute
データフレームの指定したカラムの中に文字列と文字列がある	df['列A'].isin([value, value2])
真紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
集合を空集合にする	aSet.clear()
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
全要素を０で初期化した整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int)
集合が空集合かテストする	len(aSet) == 0
nとn2の排他的論理和	n ^ n2
ペルーにヒストグラムの色を変更する	plt.hist(データ列, color='peru')
トマト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
タプルの値として要素が含まれているかどうか調べる	element in aDict.values()
分割数nとしてデータ列をビニングする	pd.cut(ds, n)
要素が集合のメンバーでないかどうか	element not in aSet
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
セットを変更不能な集合にする	frozenset(aSet)
空の組	()
プラム色としてヒストグラムを描画する	plt.hist(データ列, color='plum')
ふたつの関係が部分集合か確認する	aSet.issubset(aSet2)
折れ線グラフの色をゲインズボロにする	plt.plot(データ列x, データ列y, color='gainsboro')
option: フォントの色をアリスブルーに設定する	color = 'aliceblue'
エクセルファイルファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
小数点数の双曲線正弦を求める	math.sinh(x)
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
データフレームの欠損値を後の値で補う	df.fillna(method='bfill')
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
横棒グラフをインディゴ色を用いて描画する	plt.barh(データ列x, データ列y, color='indigo')
折れ線グラフのラインスタイルを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
行列の合計値	np.sum(aArray)
リストと数列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
ダークバイオレット色としてヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
option: 欠損値も無視しない	dropna = True
折れ線グラフを点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
辞書のキーに対応した値	aDict.get(key)
今日が日曜日かどうか	datetime.datetime.today().weekday() == 6
まとめてデータフレームの列の名前を文字列置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
インディアンレッド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
折れ線グラフの丸マーカーの色を変える	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
option: グラフの色をチョコレートに指定する	color = 'chocolate'
データフレームをある列の値でグループ化して、それぞれのグループ毎の件数を知る	df.groupby('列A').size()
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
現在の再帰の上限	sys.getrecursionlimit()
option: モカシン色を使う	color = 'moccasin'
ふたつの列からグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
線グラフの色をパウダーブルーに指定する	plt.plot(データ列x, データ列y, color='powderblue')
紺色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
グラフを全般的に明るくする	sns.set(pallete='bright')
大量のデータが正規分布か仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
option: 配列のデータ型を指定する	dtype = np.uint8
赤いバツマーカーを配列とデータ列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームから指定した２つのカラムを抽出する	df[['列A', '列B']]
ライトスチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームの列の各データ値の出現回数	df[col].value_counts()
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
ホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームを整列する	df.sort_values('キーとなる列')
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
数式の積分を求める	sympy.integrate(e)
option: グラフの色を紺に設定する	color = 'darkblue'
線グラフをビスク色を使って描画する	plt.plot(データ列x, データ列y, color='bisque')
整数nを符号付きで長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
文字列の末尾からタブを除く	s.rstrip('\t')
グラフの色を暗くする	sns.set(pallete='dark')
数式を変数についてn階微分する	sympy.diff(e, z, n)
浮動小数点数の最小値を求める	sys.float_info.min
データフレームを未入力値を含めてある列の値でグループ化する	df.groupby('列A', dropna=False)
赤いバツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームの選択したカラムの中央値	df[['列A', '列B']].median()
無限にnからカウントアップする	itertools.count(start=n)
クラス分類をロバスト推定として行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
option: 改行の代わりに文字列を用いる	end = s
棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgray')
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
ライトグリーン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
あるカラムを除く	df.drop('列A', axis=1, inplace=True)
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
数列とリストの散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
文字列の先頭は部分文字列か調べる	s.startswith(sub)
データフレームの棒プロットを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
本日が月曜日かどうか判定する	datetime.datetime.today().weekday() == 0
タプルをひとつ置きに取り出す	aTuple[::2]
イテラブルから集合	set(iterable)
option: バツマーカーを使用する	marker = 'x'
円グラフを時計回りに描く	plt.pie(データ列, startangle=90, counterclock=False)
散布図をパールゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データシリーズの欠損値を最大値に設定する	ds.fillna(ds.max())
縦軸の目盛の表示値を変更する	plt.yticks(目盛りの値リスト)
縦棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
縦棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
ダークスレートブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレーム全体をインデックスによって降順でソートする	df.sort_index(ascending=False)
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
タプルをn回、連結する	aTuple * n
ガンマ関数の絶対値に自然対数をとった値を求める	math.lgamma(x)
グラフを用いる準備をする	import matplotlib.pyplot as plt
オールドレースにヒストグラムの色を設定する	plt.hist(データ列, color='oldlace')
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
縦棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
データシリーズを丸める	ds.round()
折れ線グラフの星印を赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
ヒストグラムをミディアムスプリンググリーン色を用いて描画する	plt.hist(データ列, color='mediumspringgreen')
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
分子n、分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
入力から二つの自然数を読む	A, B = map(int, input().split())
グラフの中のy軸にラベルをつける	plt.ylabel('y軸ラベル')
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
x座標の目盛を対数に変更する	plt.xscale('log')
n進数の文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
データフレームのあるカラムを十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
オブジェクトのメモリビューを使う	memoryview(obj)
データフレームのあるカラムは何年か見る	df['列A'].dt.year
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
option: ミントクリームにフォントの色を変更する	color = 'mintcream'
線形回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
平均線付きボックスチャートを描画する	plt.boxplot(データ列, meanline=True)
ラベンダー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
区間数を設定して度数分布図を描画する	plt.hist(データ列, bins=区関数)
コロンで文字列を区切って、列挙する	s.split(':')
実数の逆双曲線正弦	math.asinh(x)
ヒストグラムをシルバー色を用いて描画する	plt.hist(データ列, color='silver')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
色テーマを濃くする	sns.set(pallete='deep')
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
xを整数に変換する	int(x)
縦棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
数値を太字化する	f'\033[1m{value}\033[0m'
日付データの年を求める	aDate.year
データフレームの中に日付データと文字列がいくつ存在するか数える	df.isin([value, value2]).sum()
現在の再帰の最大回数	sys.getrecursionlimit()
ある列の文字列に部分文字列があるデータを抽出する	df[df['列A'].str.contains(部分文字列)]
L2ノルムでデータを正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
標準エラー	sys.stderr
最適な位置に補足を表示する	plt.legend(loc='best')
option: スラグレーにグラフの色を設定する	color = 'slategray'
データフレームのインデックス一覧を求める	df.index
文字列に変換してシーケンスを連結する	''.join(map(str, iterable))
nが2で割り切れるか	n % 2 == 0
棒グラフをライトスレイグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームのあるカラムをドロップしてみる	df.drop('列A', axis=1)
線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
赤い星マーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムの色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
データシリーズの未入力値を最小値で埋める	ds.fillna(ds.min())
文字列は片仮名	('ァ' <= ch <= 'ン')
文字列の中でケースを無視してパターンにマッチした文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
option: 改行コードを動作環境依存に設定する	newline = None
option: グラフの色をミディアムパープルに変更する	color = 'mediumpurple'
配列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
散布図に青いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
日付データを文字列を用いてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
オブジェクトが辞書型のインスタンスか	isinstance(obj, dict)
実行結果を赤色でプリントする	print(f'\033[31m{value}\033[0m')
オブジェクトの参照カウントを知る	sys.getrefcount(obj)
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
データフレームの選択したカラムの中にいくつ日付データが含まれるか求める	df[['列A', '列B']].isin([value]).sum()
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
文字列を最後の部分文字列で二つに区切って、後半の文字列を使う	s.rpartition(sub)[-1]
リストが空でない	len(aList) != 0
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
散布図のダイアモンドマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
option: グレーにグラフの色を設定する	color = 'gray'
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
データフレームの一部のカラムを千の位で四捨五入する	df[['列A', '列B']].round(-3)
n個の要素があるリストを得る	[element] * n
ヒストグラムの色をレベッカパープルに変更する	plt.hist(データ列, color='rebeccapurple')
データフレームの最初100行	df.head(100)
データフレームを二つの列によってグループ化し、要約統計量を計算する	df.groupby(['列A', '列B']).describe()
グラフの描画で淡くパレットを用いる	sns.set(pallete='muted')
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
option: デピンクを使用する	color = 'deeppink'
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
データフレームを指定したカラムをキーにして大きい順にソートする	df.sort_values(by='列A', ascending=False)
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: ライトコーラル色を使う	color = 'lightcoral'
線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(df['列A'], 'norm')
日付データからn日分引く	aDate - datetime.timedelta(days=n)
要素が集合のメンバーか調べる	element in aSet
データフレームの分散	df.var()
option: インディアンレッドを使う	color = 'indianred'
文字列の後ろから部分文字列を探す	s.rfind(sub)
縦棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
データフレームの一部のカラムの値が欠損値か調べる	df[['列A', '列B']].isna()
イテラブルから重複なく、n個選ぶ	random.sample(iterable, k=n)
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
パールバイオレットレッドにヒストグラムの色を変更する	plt.hist(データ列, color='palevioletred')
option: グラフの色をオーキッドに設定する	color = 'orchid'
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
棒グラフの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
ロージーブラウン色としてヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
方程式の解を求める	sympy.solve(e)
文字列が文字列リストのいづれか調べる	s in aStringList
BOM付きでデータフレームを書き出す	df.to_csv('file.csv', encoding='utf_8_sig')
タン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
部分文字列で文字列を区切って、文字列リストに変換する	s.split(sub)
偽陰性を抑えたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
マッピング上で項目名が未定義か調べる	key not in aDict
文字列の開始位置より後に部分文字列が含まれる	s.find(sub, start) != -1
nを八進文字列に変換する	oct(n)[2:]
列を指定して重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
浮動小数点数で実数を割る	x / y
パレットを淡くする	sns.set(pallete='muted')
n回文字列が繰り返す列を得る	itertools.repeat(element, n)
折れ線グラフの色をシエナに指定する	plt.plot(データ列x, データ列y, color='sienna')
日付データは日付データより前かどうか調べる	aDate < aDate2
リストを黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
option: グラフの色を真紅に設定する	color = 'crimson'
散布図をラベンダーブラッシュ色として描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
文字列を文字リストにする	list(s)
option: ナバホホワイトにグラフの色を設定する	color = 'navajowhite'
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
nをn2だけ左シフトする	n << n2
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
グレー色でヒストグラムを描画する	plt.hist(データ列, color='gray')
データフレームをグループ化し、ある列の統計量を求める	df.groupby('列A').describe()['列B']
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
配列とリストの散布図をプロットして、▲マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの選択したカラムの75パーセンタイル	df[['列A', '列B']].quantile(0.75)
第二コマンド引数	sys.argv[1]
データフレームの指定したカラムの中にある文字列の合計を数える	df['列A'].isin([value]).sum()
折れ線グラフの左三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
大量のデータが正規分布に従うか仮説検定する	scipy.stats.kstest(配列, 'norm')
縦棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
値を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
リッジ回帰分析を行う	model = sklearn.linear_model.Ridge(alpha=正則化項)
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
組の最初の文字列を探す	aTuple.index(element)
n進文字列を整数に変換する	int(s, n)
データフレームの中の列をn個に分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列にイテラブルを変換して、'改行で連結する	'\n'.join(map(str, iterable))
辞書のキーとその値を列挙する	aDict.items()
配列の値を求める	aArray[行番号, 列番号]
時間を使う	import time
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
カウンタの項目を増やす	aCounter[element] += 1
option: 回帰木の深さを制限する	maxdepth = n
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
短い説明の位置を(x,y)に設定する	plt.legend(loc=(x, y))
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
ブール型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int32)
バリーウッドにヒストグラムの色を変更する	plt.hist(データ列, color='burlywood')
列と列をペアリングする	itertools.zip_longest(iterable, iterable2)
上限nの両端キューを作成する	collections.deque(maxlen=n)
option: 色をブラックに設定する	color = 'black'
データシリーズのNaNを後の値に増やす	ds.fillna(method='bfill')
option: 印を丸に変更する	marker = 'o'
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
配列をダミー変数に変換する	pd.get_dummies(配列)
SJISで文字列をバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
データシリーズの欠損値を直前の値に設定する	ds.fillna(method='ffill')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
データフレームのふたつの列をドロップしてみる	df.drop(['列A', '列B'], axis=1)
赤い一点鎖線としてリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
線グラフをプラム色として描画する	plt.plot(データ列x, データ列y, color='plum')
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
option: フォントの色をサドルブラウンに設定する	color = 'saddlebrown'
表データのあるカラムの曜日数	df['列A'].dt.dayofweek
文字列中にひとつでも非空白が含まれるかどうか調べる	any(not c.isspace() for c in s)
ヒストグラムを赤くする	plt.hist(データ列, color='r')
散布図にダイアモンドマーカーを使用する	plt.scatter(データ列x, データ列y, marker='D')
現在のモジュール	sys.modules[__name__]
データフレームのあるカラムのNaNを最小値で埋める	df['列A'].fillna(df['列A'].min())
データフレームの一部のカラムの不偏標準偏差	df[['列A', '列B']].std()
データフレームの相関行列をヒートマップとして描画する	sns.heatmap(df.corr())
二つのオブジェクトが等しい	obj == obj2
データフレームが正規分布からどれだけ歪んでいるか見る	df.kurt()
MSDとしてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
option: グラフの色を紺碧に設定する	color = 'azure'
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
印字可能な文字を全部使う	string.printable
文字列が文字列より辞書順で前か調べる	s < s2
option: カデットブルー色を使う	color = 'cadetblue'
今日が何年か知る	datetime.datetime.today().year
グレー色としてヒストグラムを描画する	plt.hist(データ列, color='grey')
配列とリストについての散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
ある列の値がxより大きく、yより小さい行を取り出す	df[(x < df['列A']) & (df['列A'] < y)]
ダークスラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データフレームの列の文字列長を列として使う	df[col].str.len()
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
文字コードに対応する文字	chr(unicode)
option: NaNは無視する	dropna = True
文字を文字コードにする	ord(ch)
四分位数でデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
二つのオブジェクトが同一参照か調べる	obj is obj2
プラットホームはMacOS	sys.platform.startswith('darwin')
折れ線グラフを貝殻色を用いて描画する	plt.plot(データ列x, データ列y, color='seashell')
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
オブジェクトはリスト型のインスタンス	isinstance(obj, list)
横棒グラフをビスク色として描画する	plt.barh(データ列x, データ列y, color='bisque')
データフレームの未入力値を最頻値に設定する	df.fillna(df.mode().iloc[0])
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
縦棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
option: ターコイズ色を使う	color = 'turquoise'
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
学習データのバージョン	version = 'wcce2022-0.1'
option: ライトコーラルを使用する	color = 'lightcoral'
エクセルファイルからシートの名前を指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
折れ線グラフをゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='goldenrod')
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
option: 改行コードを動作環境依存にする	newline = None
今日のローカルな日付	datetime.date.today()
線グラフの色をスチールブルーに指定する	plt.plot(データ列x, データ列y, color='steelblue')
アルファベットの大文字列	string.ascii_uppercase
option: フォントの色をダークターコイズに変更する	color = 'darkturquoise'
option: グラフの色をシルバーに設定する	color = 'silver'
線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
option: スノー色を使う	color = 'snow'
CSV形式にデータフレームをSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
折れ線グラフの星マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
option: グラフの色をアンティークホワイトに指定する	color = 'antiquewhite'
実数の2乗を求める	x ** 2
指定したカラムの値は欠損値	df['列A'].isna()
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
句点文字を全部使う	string.punctuation
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームのn行目を削除してみる	df.drop(n, axis=0)
折れ線グラフの丸印を黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの色をチョコレートにする	plt.plot(データ列x, データ列y, color='chocolate')
データシリーズのNaNを直後の値で埋める	ds.fillna(method='bfill')
リストの要素を関数に適用した結果で並べる	sorted(aList, key=func)
データフレームの欠損値をxで補う	df.fillna(x)
カウンタを多い方からリストとして得る	aCounter.most_common()
option: 青緑色を使用する	color = 'turquoise'
２つのリストを改行しないでプリントする	print(value, value2, end='')
ヒストグラムの色をミディアムシアグリーンに変更する	plt.hist(データ列, color='mediumseagreen')
パレットトルコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
データシリーズが何年か見る	ds.dt.year
横棒グラフをオリベドラブ色として描画する	plt.barh(データ列x, データ列y, color='olivedrab')
option: 改行コードを動作環境依存に変更する	newline = None
グリッド線を黄色くする	plt.grid(color='y')
option: 三二ビット整数型を使う	dtype = np.int16
リストを緑色にする	f'\033[32m{value}\033[0m'
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
セットからエラーなく要素を取り除く	aSet.discard(element)
ユニコードに対応する文字	chr(unicode)
ヒストグラムの色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
折れ線グラフをミディアムアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
ライトスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームのある列のNaNを直後の値に設定する	df['列A'].fillna(method='bfill')
あるカラムの文字列に部分文字列が含まれない行を取り出す	df[~df['列A'].str.contains(部分文字列)]
主成分分析を用いて濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
option: グラフの色をシエナに設定する	color = 'sienna'
データフレームの未入力値をメディアンで補う	df.fillna(df.median())
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
黒いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
実行結果を下線付きで出力する	print(f'\033[4m{value}\033[0m')
折れ線グラフのバツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
データフレームのデータ型リスト	df.dtypes
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
option: パレットトルコイズにグラフの色を設定する	color = 'paleturquoise'
イテラブルを行列にする	np.array(iterable)
現在の時間数	datetime.date.today().hour
ヒストグラムをスカイブルー色として描画する	plt.hist(データ列, color='skyblue')
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
主成分分析で濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データフレームの値が欠損値か調べる	df.isna()
イテラブルと配列について散布図を描画して▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの列を指定して重複を取り除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
全要素を０で初期化した行列を作る	np.zeros(行数, 列数)
パレットを暗くする	sns.set(pallete='dark')
２つのタプルをチェーンする	collections.ChainMap(aDict, aDict2)
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
データシリーズの平均を求める	ds.mean()
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
ファイルパスを書き込みモードでオープンする]	open(filepath, mode='w')
option: 平均を追記する	showmeans = False
データフレームを各カテゴリにグループ化してバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
データシリーズの尖度を求める	ds.skew()
外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
文字コードを指定してタブ区切りのファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
数値を青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
リストを黄色にする	f'\033[33m{value}\033[0m'
ネイピア数を使用する	math.e
こんにちは世界を出力する	print('Hello World')
データフレームの選択したカラムの不偏分散を求める	df[['列A', '列B']].var(ddof=1)
データフレームの不偏標準偏差を求める	df.std()
カウンタの項目をカウントだけ列挙する	aCounter.elements()
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
折れ線グラフの右三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
実数の小数点を丸める	round(x)
横棒グラフをプロットして、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
折れ線グラフをスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='springgreen')
最大行数をnに設定する	pd.set_option('display.max_rows', n)
ペールグリーン色でヒストグラムを描画する	plt.hist(データ列, color='palegreen')
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
データ列の移り変わりを点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
二つの変数をカンマで区切ってプリントする	print(value, value2, sep=',')
イテラブルを文字列リストに変換して、'改行によって連結する	'\n'.join(map(str, iterable))
値を黒色にする	f'\033[30m{value}\033[0m'
option: ライムグリーンを使う	color = 'limegreen'
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データ列間の平均絶対誤差を算出する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
黒い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
列名を指定して２つのデータフレームをジョインする	pd.merge(df, df2, on='列A')
散布図をポイント印で描画する	plt.scatter(データ列x, データ列y, marker='.')
カラムの積立相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
文字列を部分文字列で末尾から区切る	s.rsplit(sub)
黒い菱形マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
オブジェクトがあるクラスのインスタンスか	isinstance(obj, クラス)
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
option: ビスクを使う	color = 'bisque'
ライトゴールドロディイエローにヒストグラムの色をセットする	plt.hist(データ列, color='lightgoldenrodyellow')
折れ線グラフの色をライトコーラルに指定する	plt.plot(データ列x, データ列y, color='lightcoral')
標準出力を即時表示する	sys.stdout.flush()
ダークグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
行列を平坦にする	aArray.flatten()
線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
作画のフォントを日本語に設定する	sns.set(font='IPAexGothic')
option: エンコーディングを文字コードtextに設定する	encoding = text
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データフレームのあるカラムを万の位で丸める	df['列A'].round(-4)
イエローグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='yellowgreen')
データフレームの母標準偏差を求める	df.std(ddof=0)
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
データ列の推移を青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
配列とリストについて散布図を描画し、、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
データ列のノルムをそろえる	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
縦に二つのデータフレームを一つにする	pd.concat([df, df2], axis=0)
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
指定した列の値で集計し、最小値を求める	df.groupby('列A').min()
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
セットに配列を追加更新する	aSet.update(iterable)
勾配ブースティングでクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
データフレームをグループ化し、あるカラムに対し標準偏差を求める	df.groupby('列A')['列B'].std()
折れ線グラフの印を大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
リストのn番目のを使う	aList[n]
データフレームの選択したカラムの空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
文字列が正規表現にマッチさせる	re.match(pattern, s)
文字列全体を正規表現に複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
option: どのカラムもインデックスに設定しない	index_col = None
折れ線グラフに黒い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
option: 色を淡い茶色に設定する	color = 'tan'
nを切り捨てながらn2分の１にする	n //= n2
最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
1で全要素を初期化した行列を作成する	np.ones(要素数, dtype=np.int)
ライトスレイグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
箱ひげ図を二つ並べてプロットする	plt.boxplot([データ列, データ列])
紺碧色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
カラムの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
折れ線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
CSVファイルをn番目の列をインデックスにして読む	pd.read_csv('file.csv', index_col=n)
クラス分類をパーセプトロンとしてする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ミディアムパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
二進文字列を整数に変換する	int(s, 2)
ベクトルの行列式を求める	np.linalg.det(aArray)
星印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームの列を千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
項目名が辞書に存在するかどうか確認する	key in aDict
リストの値をソートする	sorted(aList)
文字列を最後の部分文字列で二分し、最初の文字列を求める	s.rpartition(sub)[0]
ヒストグラムを描画し合計を1にする	plt.hist(データ列, density=True)
option: プラムにグラフの色を設定する	color = 'plum'
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しないかどうか	s.find(sub, start, end) == -1
ラベル付きの円グラフを描く	plt.pie(データ列, startangle=90, labels=ラベル列)
行列の列ごとの平均を計算する	np.mean(aArray, axis=0)
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
線グラフを小麦色色を使って描画する	plt.plot(データ列x, データ列y, color='wheat')
リストを白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
切片なしの単回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データシリーズが何年か知る	ds.dt.year
データフレームから10行、サンプリングする	df.sample(10)
折れ線グラフの色をマルーンに変更する	plt.plot(データ列x, データ列y, color='maroon')
option: フォントの色をデピンクに設定する	color = 'deeppink'
タプルの要素数	len(aTuple)
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
nを二進数文字列に変換する	bin(n)[2:]
日付データにn時間分、加える	aDate + datetime.timedelta(hours=n)
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
データフレームの中に存在する文字列の合計を数える	df.isin([value]).sum()
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
ブルーバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
折れ線グラフの色をライムグリーンにする	plt.plot(データ列x, データ列y, color='limegreen')
折れ線グラフをダークオレンジ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorange')
CSVファイルファイル名がか調べる	filename.endswith('.csv')
分類木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
データフレームからランダムに選択する	df.sample()
xのハッシュ値	hash(x)
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
データシリーズの欠損値を最頻値にセットする	ds.fillna(ds.mode().iloc[0])
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
縦軸の目盛りに文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
タプルのn番目のの値を求める	aTuple[n]
option: ミッドナイトブルーを使用する	color = 'midnightblue'
ファイルをEUCを用いてオープンする]	open(filepath, encoding='euc_jp')
散布図をスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='steelblue')
平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
赤い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの選択したカラムを百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
カウンタの項目を列挙する	aCounter.keys()
xが一桁の整数	-9 <= x <= 9
空の組を作る	()
ミディアムターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
二つのデータ列の散布図として残差を描く	sns.residplot(x=データ列, y=データ列)
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
データフレームのカラムをヒストグラムで描画する	plt.hist(df[column])
option: ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
option: ダークスレートブルーにグラフの色を設定する	color = 'darkslateblue'
タプルをナンバリングする	enumerate(aTuple)
縦棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
文字列の先頭から部分文字列を除く	s.lstrip(sub)
実数のn乗を計算する	pow(x, n)
イテラブルをベクトルに変換する	np.array(iterable)
nの3乗	n ** 3
2進数文字列をbytesizeバイトのバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
縦棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
n番目の列を行にしてCSVファイルをロードする	pd.read_csv('file.csv', index_col=n)
あるカラムの値がx以上y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
２つの列毎にデータフレームを集計し、、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
option: 改行コードを旧Macにセットする	newline = '\r'
空のロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
ふたつの集合のいずれか一方だけの集合を求める	aSet.symmetric_difference(aSet2)
option: 黄色にグラフの色を設定する	color = 'yellow'
代数計算を使う	import sympy
配列間の相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
データフレームを1000の位で丸める	df.round(-3)
文字列が部分文字列で終了する	s.endswith(sub)
折れ線グラフにダイアモンドマーカーを加える	plt.plot(データ列x, データ列y, marker='D')
option: BOM付きを使う	encoding = 'utf_8_sig'
option: データ型を指定する	dtype = bool
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
マッピングの項目名の一覧	aDict.keys()
折れ線グラフの色をダークシアンに変更する	plt.plot(データ列x, データ列y, color='darkcyan')
option: 青紫にフォントの色をする	color = 'violet'
データフレームのあるカラムの曜日は何日目か知る	df['列A'].dt.dayofweek
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
option: バッファリングのサイズを設定する	buffering = 4096
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgrey')
配列の最頻値	mode, count = scipy.stats.mode(配列)
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
全印字可能な文字	string.printable
リストをビン数nでビン分割する	pd.cut(aList, n)
データフレームを表示するとき、折り返しをオフに指定する	pd.set_option('expand_frame_repr', False)
データフレームのn行目を削除して	df.drop(n, axis=0)
データフレームを使用する	import pandas as pd
option: グラフの色をタンに設定する	color = 'tan'
２つのデータフレームを列名を指定して左ジョインする	pd.merge(df, df2, on='列A', how='left')
x座標だけグリッド線	plt.grid(axis='x')
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
データフレームの指定した列のパーセンタイルを算出する	df['列A'].quantile(パーセント/100)
option: ブルーバイオレット色を用いる	color = 'blueviolet'
折れ線グラフの△印の色を指定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
黒い左三角マーカーをリストとイテラブルの散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームの25パーセンタイルを計算する	df.quantile(0.25)
縦棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
二つの文字列を辞書順で比較する	s < s2
スチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='steelblue')
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
クラス分類のリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
データシリーズの欠損値を50パーセンタイルで埋める	ds.fillna(ds.median())
読み込みできるようにファイルをオープンする]	open(filepath, mode='r')
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
ピアソンの積立相関係数	scipy.stats.pearsonr(配列, 配列2)
option: 色をライムに設定する	color = 'lime'
項目名が辞書に存在するか調べる	key not in aDict
マッピングから最後のエントリをポップする	aDict.popitem()
折れ線プロットを使ってリストを可視化する	plt.plot(データ列x, データ列y)
乱数シードを初期化する	random.seed()
ダークオーキッド色でヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
option: フォントの色をダークバイオレットに設定する	color = 'darkviolet'
線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
option: 読み込み用に指定する	mode = 'r'
線の線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
リストとリストの散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
option: グラフの色をダークグレーに設定する	color = 'darkgray'
▽印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
一点鎖線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
表データから重複を残さず重複をドロップする	df.drop_duplicates(keep=False)
行列をベースにして全要素が初期値の配列	np.full_like(aArray, 初期値)
折れ線グラフをシーグリーン色として描画する	plt.plot(データ列x, データ列y, color='seagreen')
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
集合からエラーなく要素を取り除く	aSet.discard(element)
ヒストグラムを上限から下限までの区間で描画する	plt.hist(データ列, range=(start, end))
データフレームの指定したカラムの欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
色付きの破線でリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
散布図に赤いバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='r')
青色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
折れ線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
データフレームをWindowsで文字化けしないように保存する	df.to_csv('file.csv', encoding='utf_8_sig')
クラス分類をブースティングでする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
黒色で数値をプリントする	print(f'\033[30m{value}\033[0m')
カウンタを低頻度方からリストとして得る	aCounter.most_common()[::-1]
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
データフレームのある列をインデックスに設定する	df.set_index('列A')
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
横棒グラフをダークバイオレット色として描画する	plt.barh(データ列x, データ列y, color='darkviolet')
凡例をグラフの表示する	plt.legend()
データシリーズの値をValueMapでまとめて変更する	ds.replace(ValueMap)
データシリーズの欠損値を平均値に設定する	ds.fillna(ds.mean())
縦軸の目盛を対数に変更する	plt.yscale('log')
折れ線グラフの色をダークグリーンに指定する	plt.plot(データ列x, データ列y, color='darkgreen')
散布図をミディアムバイオレットレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
日付データの曜日を見る	aDate.weekday()
整数個からk個取り出したときの順列の総数	math.perm(n, k)
ミディアムブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
日付データは何月か知る	aDate.month
横棒グラフを赤色を使って描画する	plt.barh(データ列x, データ列y, color='red')
リストを太字化する	f'\033[1m{value}\033[0m'
rgbの上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
数式の数値	float(e)
nが偶数か	n % 2 == 0
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームの指定したカラムの欠損値をメディアンに指定する	df['列A'].fillna(df['列A'].median())
実数の床	math.floor(x)
データ列のユニークな値	ds.unique()
書き込みできるようにファイルを開く]	open(filepath, mode='w')
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
データフレームの一部のカラムの空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの次元数	df.shape
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
文字列を二分割する	s.partition(sep)
データフレームの列の名前一覧	df.columns
ライトイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
データフレームの欠損値を削除してみる	df.dropna()
シルバー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
有理数をインポートする	import fractions
整数nを二進数文字列にする	bin(n)[2:]
option: シーグリーン色を用いる	color = 'seagreen'
日付データのデータシリーズをインデックスにする	df.index = pd.DatetimeIndex(ds)
ライトゴールドロディイエロー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
縦棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
データフレームのカーネル密度による分布図をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データシリーズの曜日数	ds.dt.dayofweek
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
文字列の先頭で正規表現に複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
ヒストグラムをアイボリー色を用いて描画する	plt.hist(データ列, color='ivory')
option: UTF8を用いる	encoding = 'utf-8'
散布図をダークレッド色として描画する	plt.scatter(データ列x, データ列y, color='darkred')
行列演算を行う	import numpy as np
散布図の丸マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
xをブール値に変換する	bool(x)
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データフレームを関数によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
第二引数で指定されたファイルの名前	sys.argv[1]
データフレームをグループ化しある列に対し個数を求める	df.groupby('列A')['列B'].count()
ゲインズボロ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
ライム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
八進文字列を整数に変換する	int(s, 8)
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
外れ値を除いた配列の算術平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
カウンタの上位をリストとして得る	aCounter.most_common(k)
プロットをPNGファイルとして保存する	plt.savefig('foo.png')
シスル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
デフォルトのエンコーディング	sys.getdefaultencoding()
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
ケースを無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
データフレームの指定したカラムの欠損値を最頻値に指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
単位行列を作成する	np.eye(行数, 列数)
両端キュー中の要素の数を数える	deq.count(element)
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
ゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
小数点数の指数部	math.frexp(x)[1]
nが3で割り切れるか	n % 3 == 0
データフレームを1000の位で四捨五入して、整数型にする	df.round(-3).astype(int)
折れ線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データシリーズを1000の位で丸める	ds.round(-3)
キューの末尾に値を追加する	deq.append(element)
リストとリストについてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
rgbの丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
プロットの大きさを指定する	plt.figure(figsize=(横幅, 高さ))
データフレームの選択したカラムの歪度	df[['列A', '列B']].kurt()
文字列を最後の部分文字列で分けた時の残りの文字列を使う	s.rpartition(sub)[-1]
表データのn行目を削除し、	df.drop(n, axis=0)
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
データフレームから指定した二つの列を抽出する	df[['列A', '列B']]
ファイルから追加ストリームを開いて]fとする	f = open(filepath, mode='a')
暗い赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
モデルの精度を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
イテラブルを円プロットにする	plt.pie(データ列, startangle=90)
ホールドアウト法を用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
ゲインズボロ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
predicateFuncが真とならないタプルの要素	itertools.dropwhile(predicateFunc, iterable)
実数のk進対数	math.log(x, k)
整数nを十六進文字列に変換する	hex(n)[2:]
ベクトルの行ごとの標準偏差	np.std(aArray, axis=1)
両端キューの中に要素が含まれてるか調べる	element in deq
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
見やすいグラフを描画する準備をする	import seaborn as sns
折れ線グラフをライムグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='limegreen')
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
ベクトルを平坦化する	aArray.flatten()
マップの値に要素が含まれていないか調べる	element not in aDict.values()
文字列がタプルに含まれるかどうか確認する	element in aTuple
option: 配列のデータ型を指定する	dtype = np.int8
部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームのNaNをxに設定する	df.fillna(x)
散布図のクロス印を青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
折れ線グラフの色をシスルにする	plt.plot(データ列x, データ列y, color='thistle')
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
集合の変更不能版	frozenset(aSet)
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
黒い丸マーカーを配列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
折れ線グラフに右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
タイムスタンプデータは日付時刻データより後ろかどうか	aDatetime > aDatetime2
行列間の各要素の最小公倍数を求める	np.lcm(aArray, aArray2)
option: 改行をセパレータで用いる	sep = '\n'
縦棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
正規分布の確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
シーケンスのセット	set(iterable)
文字列全体をASCII限定としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
縦棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
option: マゼンタ色を使用する	color = 'magenta'
データフレームのカラムのスピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
option: 色をライトスレイグレーに設定する	color = 'lightslategray'
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
option: グラフの色をパレットトルコイズに指定する	color = 'paleturquoise'
データフレームは何行重複するか見る	df.duplicated().sum()
option: ロージーブラウン色を用いる	color = 'rosybrown'
ValueMapでデータシリーズの値を一度に置き換える	ds.replace(ValueMap)
リストをシアンでプリントする	print(f'\033[36m{value}\033[0m')
タイムスタンプデータをISO形式の文字列に変換する	aDatetime.isoformat()
rgbの左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
クラス分類をヒストグラムと勾配ブースティングとしてする	model = sklearn.ensemble.HistGradientBoostingClassifier()
実数が有限か	math.isfinite(x)
現在の日	datetime.datetime.today().day
ヒストグラムをミディアムブルー色として描画する	plt.hist(データ列, color='mediumblue')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
値をキューのn番目に挿入する	deq.insert(n, element)
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
縦棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
パラメータが0に近づく場合の数式の極限値を計算する	sympy.limit(e, z, 0)
ある列のカテゴリごとの最小値	df.groupby('列A').min()
グラフの背景色を暗くする	sns.set(style='darkgrid')
ベージュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
プロットで用いるフォントを指定する	sns.set(font=フォント名)
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
rgbの▽マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
データシリーズを小数点以下n桁で丸める	ds.round(n)
実数を百の位で丸める	round(x, -2)
表データが重なるいる	df.duplicated()
黒い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
散布図を青緑色として描画する	plt.scatter(データ列x, データ列y, color='teal')
プラム色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
ヒストグラムの色をライトグリーンにセットする	plt.hist(データ列, color='lightseagreen')
散布図の大バツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
整数の階乗	math.factorial(n)
リスト間のピアソンの相関係数を算出する	scipy.stats.pearsonr(数列, 数列2)
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
実数のタンジェント	math.tan(x)
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
赤いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
itertoolsモジュールをインポートする	import itertools
option: 茶色を用いる	color = 'brown'
符号付き整数の最大値を確認する	sys.maxsize
実数を十六進表記の文字列にする	x.hex()
半透明の実線として数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
リストのn番目の値を削除する	del aList[n]
散布図の丸印を青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
カウントプロットを描画する	sns.countplot(x='列名', data=df)
ダークグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
option: n番目のカラムを行に設定する	index_col = n
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()//60
option: ポイント印を使う	marker = '.'
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
日付時刻データをISO8601書式の文字列に変換する	aDatetime.isoformat()
新しい文字列に回数を制限して文字列中の部分文字列を置き換える	s.replace(sub, newsub, n)
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
散布図に星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
エクセルファイルファイルからカンマ区切りのファイルを文字化けしないようにロードする	pd.read_csv('file.csv', encoding='shift_jis')
日付時刻データと日付時刻データの時間差を秒で算出する	(aDatetime - aDatetime2).total_seconds()//60
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
分子n、分母mの有理数を作成する	fractions.Fraction(numerator=n, denominator=m)
option: 印を星に設定する	marker = '*'
nからいつまでも数え上げるする	itertools.count(start=n)
データフレームをグループ化しそれぞれの標準偏差を計算する	df.groupby('列A').std()
シャルトリューズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
多次元データをt-SNEでパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
配列の列ごとの最小値	np.min(aArray, axis=0)
タプルの先頭の要素	aTuple[0]
縦棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
折れ線グラフの印をダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
データ列の移り変わりを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ハローワールドとプリントする	print('Hello World')
option: 四角印を描画する	marker = 's'
箱ヒゲ図を描画し、、平均線を加える	plt.boxplot(データ列, meanline=True)
フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
散布図をトマト色を使って描画する	plt.scatter(データ列x, データ列y, color='tomato')
リストの要素を小さい順に並べ直す	sorted(aList, reverse=True)
辞書をJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
文字列中に部分文字列が含まれる	sub in s
コーンズシルクにヒストグラムの色をセットする	plt.hist(データ列, color='cornsilk')
縦棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
データフレームをエクセルファイルファイルで保存する	df.to_excel('file.xlsx')
データ列の推移を色付きの一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
青い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
日付データが日付データと同時かどうか	aDate == aDate2
タプルを配列に変換する	np.array(iterable)
リストと数列について散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: マーカーの色をダークレッドにする	markerfacecolor = 'darkred'
縦棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
option: マーカーの色を変える	markerfacecolor = '#800080'
データフレームの指定したカラムはどの程度分散しているか確認する	df['列A'].var()
option: ディムグレー色を使う	color = 'dimgray'
現在が土曜日かどうか調べる	datetime.datetime.today().weekday() == 5
option: モカシンにグラフの色を設定する	color = 'moccasin'
列を累積したイテラブルを得る	itertools.accumulate(iterable, operator.mul)
option: エクセルファイルシート名を減らす	sheet_name = ['A', 'B']
アンサンブル学習を用いて回帰分析をする	sklearn.ensemble.VotingRegressor()
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
集合をイミュータブルな集合に変換する	frozenset(aSet)
整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int)
小数点以下の表示精度を指定する	pd.set_option('precision', n)
赤い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='r')
要素ひとつの組	(element,)
多次元尺度構成法を用いて淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
数値を紫色にする	f'\033[35m{value}\033[0m'
リストが空か	len(aList) == 0
線グラフの色をディープスカイブルーに指定する	plt.plot(データ列x, データ列y, color='deepskyblue')
異なるカラムをキーとして２つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
n個に列を等間隔でビン分割する	pd.cut(ds, n)
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
指定した列の値で集計し、それぞれの個数を計算する	df.groupby('列A').count()
スノー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
列の各値が何回出現するか見る	ds.value_counts()
配列の全要素の値を変更する	aArray[:, :] = 指定の値
データフレームの選択したカラムの欠損値をxに設定する	df[['列A', '列B']].fillna(x)
列のエポック秒を日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
ヒストグラムの色をインディアンレッドに変更する	plt.hist(データ列, color='indianred')
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームの下5行を抽出する	df.tail(5)
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
空のヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
ヒストグラムの色をシャルトリューズにセットする	plt.hist(データ列, color='chartreuse')
option: マーカーの色を赤にする	markerfacecolor = 'red'
指定したカラムだけデータフレームの重複を見る	df.duplicated(subset='列A')
パウダーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
集合が空でないか調べる	len(aSet) != 0
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
リストをn個にビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
三整数のGCD	math.gcd(n, n2, n3)
ふたつの関係が真部分集合かどうか調べる	aSet < aSet2
インディゴ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
option: カンマを区切りで用いる	sep = ','
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
プロット描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
ダークレッド色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
整数nがタプルのどれかか	n in aTuple
option: ティール色を使う	color = 'teal'
表示できる最大行数を増やす	pd.set_option('display.max_rows', n)
暗くパレットをグラフの描画で使う	sns.set(pallete='dark')
ヒストグラムを用いてデータ列を図示する	plt.hist(データ列)
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
ピンクにヒストグラムの色を設定する	plt.hist(データ列, color='pink')
縦棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
商と余りを同時に求める	divmod(x, y)
データフレームのカラムのNaNを平均値に指定する	df['列A'].fillna(df['列A'].mean())
配列とリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
option: グラフの色をブラックに設定する	color = 'black'
BOM付きとして追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
シーケンスを文字列に変換して、部分文字列で連結する	sub.join(map(str, iterable))
日付データからn秒分減算する	aDate - datetime.timedelta(seconds=n)
アクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
predicateFuncがTrueとなる列の要素	itertools.takewhile(predicateFunc, iterable)
回帰分析をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
データシリーズの不偏標準偏差を求める	ds.std()
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図の大バツ印を黒色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
option: ディープスカイブルー色を用いる	color = 'deepskyblue'
リストの全ての要素を取り除く	aList.clear()
option: 貝殻にフォントの色を変更する	color = 'seashell'
オブジェクトが論理値型か確認する	isinstance(obj, bool)
文字列を走査し、正規表現にマッチするか確認する	re.search(pattern, s)
タン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
option: ハニーデュー色を使う	color = 'honeydew'
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
新しいサポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
option: 色をアクアに設定する	color = 'aqua'
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
折れ線グラフの大バツ印を赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
標準エラーを得る	sys.stderr
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
イエローグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
数列とリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
青い下三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
当てはまりの良さを求める	sklearn.metrics.r2_score(データ列, データ列2)
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
折れ線グラフのスタイルを点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
グラフの中に枠なしの簡単な説明を付ける	plt.legend(frameon=False)
コーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
カテゴリでグループ化して、データフレームをに箱ひげ図を用いてグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列中に非アルファベットがある	any(not c.isalpha() for c in s)
データフレームの指定したカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
ファイルパスを読み込み用にオープンする]	open(filepath, mode='r')
option: 右三角マーカーを使用する	marker = '>'
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
横棒グラフの色をrgbに変更する	plt.barh(ラベル列, データ列, color=rgb)
指定した列の値で集計し、最大値を計算する	df.groupby('列A').max()
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
折れ線グラフをナバホホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームの指定したカラムのNaNを最大値に設定する	df['列A'].fillna(df['列A'].max())
棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
タプルを反転する	reversed(aTuple)
線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
横棒グラフをミディアムターコイズ色を使って描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
日付時刻データにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
ヒストグラムをカラーマップを使って描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
データシリーズの50パーセンタイル	ds.median()
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
データフレームの値を一度にValueMapで置き換える	df.replace(ValueMap)
リストの相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
データ列の各データが何回出現するか確認する	ds.value_counts()
データフレームの中の欠損値の合計を数える	df.isna().sum()
日付時刻データが何日か知る	aDatetime.day
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
データシリーズを10000の位で四捨五入する	ds.round(-4)
データ列のパーセンタイルを可視化する	plt.boxplot(データ列)
オブジェクトはリストかタプル	isinstance(obj, (list)
データシリーズの中にいくつ欠損値があるか数える	ds.isna().sum()
縦棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
横棒グラフをオレンジ色を使って描画する	plt.barh(データ列x, データ列y, color='orange')
タイムスタンプデータの時間を見る	aDatetime.time()
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
option: グラフの色を小麦色にする	color = 'wheat'
イテラブルをいつまでも繰り返す	itertools.cycle(iterable)
散布図をミディアムシアグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ヒストグラムの色をパパイヤウィップに変更する	plt.hist(データ列, color='papayawhip')
ターコイズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
縦向きに二つのデータフレームを一つにする	pd.concat([df, df2], axis=0)
散布図をフクシア色として描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
データフレームを表示するとき、小数点以下n桁まで表示するようにする	pd.set_option('precision', n)
option: パパイヤウィップを用いる	color = 'papayawhip'
option: 複数行に対応する	flag = re.MULTILINE
組の先頭のn要素を取り除く	aTuple[n:]
ゲインズボロ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
文字列の最後	s[-1]
青紫色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
上位集合	aSet.issuperset(aSet2)
分類結果のF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
列のコンビネーションを得る	itertools.combinations(iterable, n)
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームをBOMを付けて保存する	df.to_csv('file.csv', encoding='utf_8_sig')
スチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
集合が空でないか確認する	len(aSet) != 0
文字列の先頭でパターンに大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
ダークシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
option: 行列のデータ型を指定する	dtype = np.int16
seabornのデフォルトを適用する	sns.set()
文字列をカンマによって区切って、列挙する	s.split(',')
変数について数式の微分を行う	sympy.diff(e, z)
散布図のバツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
16進数文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
データフレームを表示するとき、小数点以下の表示精度を指定する	pd.set_option('precision', n)
集合が空か	len(aSet) == 0
白い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
ホワイトスモーク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
文字列がタプルに含まれないか確認する	element not in aTuple
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
ヒストグラムをライトスチールブルー色を用いて描画する	plt.hist(データ列, color='lightsteelblue')
ヒストグラムの色をブランチドアーモンドに指定する	plt.hist(データ列, color='blanchedalmond')
データシリーズのNaNを直前の値で埋める	ds.fillna(method='ffill')
ある列の値がxより大きく、yより小さいデータを抽出する	df[(x < df['列A']) & (df['列A'] < y)]
プログラムを正しく終了する	sys.exit(0)
文字のユニコード	ord(ch)
option: マーカーの色をバイオレットにする	markerfacecolor = 'violet'
option: マーカーの色を白にする	markerfacecolor = 'white'
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
アイボリー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
ある列のどの値が頻出か見る	df['列A'].mode()
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
ダークカーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
option: リネン色を使う	color = 'linen'
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
フォーマットを用いてデータ列をタイムスタンプ型にする	pd.to_datetime(ds, format='%Y-%m-%d')
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
散布図をミスティローズ色として描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
イテラブルの長さnの順列	itertools.permutations(iterable, n)
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
自然数の階乗を計算する	math.factorial(n)
option: マーカーを大バツに変える	marker = 'X'
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightgreen')
箱髭図をプロットし、、平均線を追加する	plt.boxplot(データ列, meanline=True)
ひとつ置きにリストを得る	aList[::2]
データフレームのあるカラムの曜日が何日目か見る	df['列A'].dt.dayofweek
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
option: ゲインズボロにフォントの色を設定する	color = 'gainsboro'
パールゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
リストとリストについての散布図に▼マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
四分位数で配列をビニングする	pd.qcut(aArray, 4)
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
散布図の△マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
黒い右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
数値でデータフレームのあるカラムの未入力値を埋める	df['列A'].fillna(x)
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
リストとリストを加える	aList + aList2
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ヒストグラムの色をライトコーラルにセットする	plt.hist(データ列, color='lightcoral')
組のn番目からn2番目の部分	aTuple[n:n2]
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
要素が集合に含まれる	element in aSet
option: グラフの色をミスティローズにセットする	color = 'mistyrose'
データフレームのあるカラムの時刻を使う	df['列A'].dt.hour
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
オブジェクトはリストかタプルかどうか調べる	isinstance(obj, (list)
データフレームの選択したカラムのパーセンタイル	df[['列A', '列B']].quantile(パーセント/100)
浮動小数点数を三乗する	x ** 3
データ列と配列について散布図をプロットして、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの選択した列の文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
数列の折れ線グラフを描画し、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
配列の平均の標準誤差	scipy.stats.sem(配列)
スクリプトファイルと同じフォルダのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
折れ線グラフの色をマルーンにセットする	plt.plot(データ列x, データ列y, color='maroon')
データ列の散布図として残差を描画する	sns.residplot(x=データ列, y=データ列)
イエローグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
ガンマ関数	math.gamma(x)
option: グリーン色を使う	color = 'green'
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
下限指定をした配列の算術平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
year年をタイムスタンプにする	datetime.datetime(year=year, month=1, day=1)
データフレームから指定した三つの列を選ぶ	df[['列A', '列B', '列C']]
文字列を走査し正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
変数が0に近づく時の数式の極限値を求める	sympy.limit(e, z, 0)
散布図を赤色として描画する	plt.scatter(データ列x, データ列y, color='red')
文字列の先頭だけ大文字化する	s.capitalize()
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
キューの末尾にイテラブルの各値を追加する	deq.extend(iterable)
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
option: ダークサーモン色を使う	color = 'darksalmon'
ハニーデュー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
列名を指定して2つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
xを印字できる文字列にする	ascii(x)
ダークカーキ色でヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
散布図の右三角印の色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
黒い四角マーカーをデータ列と配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
ライトゴールドロディイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームをあるカラムの値によってグループ化し、要約統計量を算出する	df.groupby('列A').describe()
option: マーカーの線幅を変更する	markeredgewidth = 2.5
線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
文字列中のカタカナをひらがなにする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
縦棒グラフの色を濃い青にする	plt.bar(データ列x, データ列y, color='darkblue')
外れ値を除いたデータフレームのカラムの分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
nがn2かどうか	n == n2
配列間のピアソンの相関係数	scipy.stats.pearsonr(配列, 配列2)
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
折れ線グラフを描いて、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
ガンマ関数を用いる	math.gamma(x)
リストと数列について散布図を描いて▼マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームのstart行目からend行目まで抽出する	df[start:end]
nを切り捨てながら半分にする	n //= 2
折れ線グラフを赤い一点鎖線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームを配列に変換する	df.values
バイナリ書き込み用にファイルをオープンして]fとする	f = open(filepath, mode='wb')
書き込みできるように文字列の示すエンコーディングでファイルパスをオープンする]	open(filepath, mode='w', encoding=s)
ダークオレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
出力ストリームにxを文字列に変換して書き込む	f.write(str(x))
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
散布図に黒い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='k')
n2がnより大きくかつ、n3より小さい	n < n2 and n2 < n3
ミディアムスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
二つのデータフレームを横向きに合体させる	pd.merge(df, df2)
辞書をネスト化する	collections.ChainMap(aDict)
データフレームのあるカラムの欠損値を数値で補う	df['列A'].fillna(x)
option: アンティークホワイトに色を設定する	color = 'antiquewhite'
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
横棒グラフをパレットトルコイズ色として描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
グラフで使うフォントを日本語に設定する	sns.set(font='IPAexGothic')
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
ヒストグラムをフローラルホワイト色を用いて描画する	plt.hist(データ列, color='floralwhite')
縦棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
散布図をグリーンイエロー色として描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームのあるカラムの欠損値をメディアンに設定する	df['列A'].fillna(df['列A'].median())
横棒グラフをやわらかい青色として描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
文字列が全てアルファベットかどうか調べる	s.isalpha()
データシリーズの欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
実行結果を緑色でプリントする	print(f'\033[32m{value}\033[0m')
データフレームのあるカラムのタイムゾーンを日本に指定する	df['列A'].tz_convert('Asia/Tokyo')
セットからエラーなく要素を除く	aSet.discard(element)
シーグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='seagreen')
英数字が文字列内に含まれるか調べる	any(c.isalnum() for c in s)
今日をISO8601書式の文字列にする	datetime.datetime.today().isoformat()
文字列を改行で分割し、文字列リストにする	s.splitlines()
ダークスラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
文字列でフォーマットしてタイムスタンプデータを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
指定した列の値で集計し、合計を計算する	df.groupby('列A').sum()
昇順にデータフレームを二つの列をキーにして整列して、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
カウンタから最頻出の項目の件数	aCounter.most_common()[1]
関数の値によってデータフレームをグループ化し、記述統計量を算出する	df.groupby(関数).describe()
option: グラフの色をダークシアンに変更する	color = 'darkcyan'
データフレームの列のユニークな値の個数	df[col].nunique()
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
パープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
nにn2を加える	n + n2
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
横棒グラフをライトブルー色として描画する	plt.barh(データ列x, データ列y, color='lightblue')
option: ライトグリーン色を用いる	color = 'lightseagreen'
option: ヘッダを自動的な連番に変更する	header = None
ブルーバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
option: ８ビット整数型を用いる	dtype = np.int8
両端キューの先頭に要素を追加する	deq.appendleft(element)
データ列とデータ列について散布図をプロットして、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
タプルからキーで指定された項目をポップする	aDict.pop(key)
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
option: タブをセパレータで使用する	sep = '\t'
アンサンブル学習としてクラス分類をする	sklearn.ensemble.VotingClassifier()
２つの数値をスラッシュで区切ってプリントする	print(value, value2, sep='/')
青緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
一度にデータフレームの選択したカラムをValueMapで置き換える	df[['列A', '列B']].replace(ValueMap)
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
ドジャーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
データフレームの中の列を中央値で分割する	pd.qcut(df[col], 2)
散布図の右三角マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
オールドレース色としてヒストグラムを描画する	plt.hist(データ列, color='oldlace')
タイムスタンプデータが水曜日か調べる	aDatetime.weekday() == 2
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
xとyの商と余りを同時に求める	divmod(x, y)
データフレームの信頼区間を描く	sns.pairplot(hue='カテゴリ列', data=df)
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
組の中の一番小さい値を求める	min(aTuple)
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
option: バツ印を用いる	marker = 'x'
散布図のダイアモンドマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
パウダーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
縦棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ローングリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
option: 改行コードをWindowsに指定する	newline = '\r\n'
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
ポイント印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
実数のn乗	x ** n
ファイルをバイナリモードで開いて]、fとする	f = open(filepath, mode='rb')
配列のトリム分散を計算する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
option: グラフの色をトマトに設定する	color = 'tomato'
データフレームの選択した列を万の位で丸める	df[['列A', '列B']].round(-4)
データフレームのあるカラムが何秒か見る	df['列A'].dt.second
オプションで、標準エラーを使う	file = sys.stderr
ヒストグラムの色をオレンジレッドに指定する	plt.hist(データ列, color='orangered')
データフレームのある列の値がxに等しくないデータを取り出す	df[df['列A'] != x]
耐火レンガ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
option: 印をポイントに指定する	marker = '.'
組の個数	len(aTuple)
棒グラフをシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='cyan')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
折れ線グラフの色をベージュに変更する	plt.plot(データ列x, データ列y, color='beige')
折れ線グラフの星印の色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
日付データの表データのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: グラフの色をオリーブに設定する	color = 'olive'
プロットを論文用に設定する	sns.set(context='paper')
データフレームの列間の相関行列を算出する	df.corr()
データフレームのカラムを柱状図としてプロットする	plt.hist(df[column])
データ列の偏りを平方根する	np.sqrt(データ列)
カラムのKurtosis	scipy.stats.kurtosis(df['列A'], bias=False)
列からn個、サンプリングする	random.sample(iterable, k=n)
ダークスラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
ライトスレイグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
データフレームの指定した名前リストの列のみ抽出する	df[columns]
データフレームの平均と信頼区間をプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列の末尾を見る	s[-1]
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
タプルの要素を小さい順に並べ直す	sorted(aTuple, reverse=False)
表データを横方向に結合する	pd.concat([df, df2], axis=1)
棒グラフをデピンク色として描画する	plt.bar(データ列x, データ列y, color='deeppink')
折れ線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
データ列の各値の出現回数を求める	ds.value_counts()
スクリプトの名前を確認する	sys.argv[0]
コマンド引数の一覧	sys.argv[1:]
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
サンディーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図をビスク色として描画する	plt.scatter(データ列x, データ列y, color='bisque')
マッピングの値を列挙する	aDict.values()
双方向キューが空か	len(deq) == 0
散布図に赤い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ヒストグラムをデピンク色として描画する	plt.hist(データ列, color='deeppink')
オーキッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
データフレームの選択したカラムの文字列を欠損値にする	df[['列A', '列B']].replace(値, np.nan)
option: アンティークホワイトを使う	color = 'antiquewhite'
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
青色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
空のリッジ回帰モデルを用意する	model = sklearn.linear_model.Ridge(alpha=正則化項)
プロットに目盛線を描画する	plt.grid(True)
option: 読み込みモードを用いる	mode = 'r'
データシリーズを四捨五入して、整数型にする	ds.round().astype(int)
データフレームの選択したカラムの欠損値を最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
折れ線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
新しいサポートベクター回帰モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
イテラブルから両端キューを作る	collections.deque(iterable)
キーが辞書上で定義済みか調べる	key in aDict
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgray')
いつまでもカウントアップする	itertools.count()
実数の二進対数を求める	math.log2(x)
棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
データフレームの一部のカラムの中にいくつNaNがあるか調べる	df[['列A', '列B']].isna().sum()
実数をn乗する	x ** n
文字列の開始位置以降に部分文字列が含まれないかどうか調べる	s.find(sub, start) == -1
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
ヒストグラムの色を小麦色に変更する	plt.hist(データ列, color='wheat')
散布図の▼マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームを並べて下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
リストの長さ	len(aList)
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
アクアマリンにヒストグラムの色を指定する	plt.hist(データ列, color='aquamarine')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
カテゴリに並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
折れ線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
x,y,zをそれぞれn,n2,n3に変更する	x, y, z = n, n2, n3
十六進文字列を整数に変換する	int(s, 16)
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
リストから文字列を捨てる	aList.remove(element)
option: 大バツ印を描画する	marker = 'X'
データフレームから型の列を取り出す	df.select_dtypes(ty)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
リストの全要素を消す	aList.clear()
組を反転する	reversed(aTuple)
散布図の印を丸にする	plt.scatter(データ列x, データ列y, marker='o')
タイタニック号のデータセットをロードする	df = sns.load_dataset('titanic')
データフレームの指定したカラムの中にいくつNaNがあるか数える	df['列A'].isna().sum()
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
option: ライトサーモン色を使う	color = 'lightsalmon'
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
データフレームの記述統計量	df.describe()
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
実数の符号を同じにする	math.copysign(x, x2)
データシリーズのKurtosisを求める	ds.kurt()
option: ディムグレー色を使用する	color = 'dimgray'
リストのn番目に文字列を挿入する	aList.insert(n, element)
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
目盛線	plt.grid(color='#800080')
リストをカウンタにする	collections.Counter(iterable)
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
部分文字列が部分文字列で開始するかどうか調べる	s.startswith(sub)
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
浮動小数点数の小数点以下を丸める	round(x)
リストとリストについて散布図を描いて、マーカーを左三角に指定する	plt.plot(データ列x, データ列y, marker='<')
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データフレームの一部のカラムを四捨五入する	df[['列A', '列B']].round()
グラフのグリッドを暗くする	sns.set(style='darkgrid')
option: 未入力値も含める	dropna = True
黒い四角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームの複数の列を削除してみる	df.drop(['列A', '列B'], axis=1)
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
option: ディムグレー色を使用する	color = 'dimgrey'
横棒グラフを茶色色を用いて描画する	plt.barh(データ列x, データ列y, color='brown')
未初期化の行列を作る	np.empty(要素数, dtype=np.int)
データフレームをグループ化し、平均値を求める	df.groupby('列A').mean()
本日を文字列でフォーマットして文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データフレームの一部のカラムの分散を計算する	df[['列A', '列B']].var()
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
データフレームを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
折れ線グラフのクロスマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
option: アクアにグラフの色を変更する	color = 'aqua'
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: シアンを使う	color = 'cyan'
エクセルファイルを読み込む	pd.read_excel('file.xlsx')
棒グラフをミディアムシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
棒グラフをゴールド色として描画する	plt.bar(データ列x, データ列y, color='gold')
option: 色をモカシンに設定する	color = 'moccasin'
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
イエローグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
整数nのビット長を見る	n.bit_length()
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
最頻値でデータシリーズのNaNを埋める	ds.fillna(ds.mode().iloc[0])
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
列をビン分割する	pd.cut(ds, aList)
異なる列をキーとして2つのデータフレームを結合する	pd.merge(df, df2, left_on='列A', right_on='列B')
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
グレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
ヒストグラムをカデットブルー色として描画する	plt.hist(データ列, color='cadetblue')
縦棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
配列とリストについて散布図を描画して、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
データフレームを各列毎にグループ化して、文字列というグループの個数を算出する	df.groupby(column).size()[s]
散布図のマーカーの色を設定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
ヒストグラムをフォレストグリーン色を用いて描画する	plt.hist(データ列, color='forestgreen')
タプル内の要素が全て真	all(aTuple)
文字列をシアン化する	f'\033[36m{value}\033[0m'
シーケンスのイミュータブルなセット	frozenset(iterable)
今日の年数	datetime.datetime.today().year
nがn2より小さいか	n < n2
option: フォントの色をミディアムブルーに設定する	color = 'mediumblue'
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
棒グラフをティール色で描画する	plt.bar(データ列x, データ列y, color='teal')
日付時刻データからn秒を減算する	aDatetime - datetime.timedelta(seconds=n)
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
オプションで標準エラーを使う	file = sys.stderr
ヒストグラムをライムグリーン色として描画する	plt.hist(データ列, color='limegreen')
数列と数列についての散布図にrgbの左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
現在の時間	datetime.date.today().hour
列を双方向キューに変換する	collections.deque(iterable)
SJISを使ってファイルをオープンする]	open(filepath, encoding='shift_jis')
アクアにヒストグラムの色をする	plt.hist(データ列, color='aqua')
データフレームをグループ化し、合計を計算する	df.groupby('列A').sum()
nがn2の倍数	n % n2 == 0
xが1もしくは2か確認する	x == 1 or x == 2
ヒストグラムの色をライトスカイブルーに変更する	plt.hist(データ列, color='lightskyblue')
折れ線グラフにポイント印を加える	plt.plot(データ列x, データ列y, marker='.')
集合をリストにする	list(aSet)
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
rgbの右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
標準入力から1行だけ改行なしで読み込む	sys.stdin.readline().rstrip()
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
文字列の開始位置から終了位置の範囲で部分文字列をカウントする	s.count(sub, start, end)
マルーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
表データのあるカラムをPandasの日付型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
最初のカテゴリーを除外し、データフレームのあるカラムをワンホット・ベクトルにする	pd.get_dummies(df['列A'], drop_first=True)
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
タプルのセット	set(iterable)
文字列の左端から部分文字列を除く	s.lstrip(sub)
ファイルを追加モードでオープンする]	open(filepath, mode='a')
空のロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
オブジェクトの参照カウント	sys.getrefcount(obj)
確率的勾配降下として回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
option: UTF8を使う	encoding = 'utf-8'
ファイルをBOM付きとして書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
散布図の色を珊瑚にする	plt.scatter(データ列x, データ列y, color='coral')
option: スレートブルーにフォントの色をする	color = 'slateblue'
ピーチパフ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
文字列を文字コード列に変換する	[ord(ch) for ch in s]
部分文字列を範囲を指定して探す	s.find(sub, start, end)
文字列を大文字にする	s.upper()
折れ線グラフの▽マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
カラムの尖り	df['列A'].skew()
イテラブルとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
option: クロス印を描画する	marker = 'x'
関数によってデータフレームをまとめたグループ	df.groupby(関数)
縦棒プロットを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
カテゴリ別でグループ化してに箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
値を青色にする	f'\033[34m{value}\033[0m'
平均線付き箱髭図を描画する	plt.boxplot(データ列, meanline=True)
タプルの要素をソートする	sorted(aTuple)
年月日と時間から日付時刻を作成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
平均値と標準偏差から疑似乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
option: フォントの色をロイヤルブルーに指定する	color = 'royalblue'
ダークターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
実数の双曲線正接	math.tanh(x)
要素∈集合	element in aSet
折れ線グラフをミディアムスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
xでデータフレームの欠損値を埋める	df.fillna(x)
両端キューを全て取り除く	deq.clear()
折れ線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
データシリーズがどの程度、分散しているか確認する	ds.var()
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
折れ線グラフの色をロージーブラウンに変更する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームの先頭を確認する	df.head()
日付時刻データがタイムスタンプデータより前かどうか調べる	aDatetime < aDatetime2
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
折れ線グラフの四角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
ヒストグラムの色をインディゴにセットする	plt.hist(データ列, color='indigo')
option: ミントクリーム色を使う	color = 'mintcream'
プロットのパレットを淡くする	sns.set(pallete='muted')
オブジェクトは辞書	isinstance(obj, dict)
文字コードを指定してTSVファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
ダークシアグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
文字列が全て英数字かどうか調べる	s.isalnum()
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
散布図を黒いバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
リストとリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
ヒストグラムをシャルトリューズ色として描画する	plt.hist(データ列, color='chartreuse')
要素が集合に含まれるか	element in aSet
データフレームの選択したカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
行列の行ごとの最小値	np.min(aArray, axis=1)
リストの先頭を捨てる	aList[1:]
データフレームのあるカラムが何分か調べる	df['列A'].dt.minute
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
散布図の印を▲印にする	plt.scatter(データ列x, データ列y, marker='^')
option: ホットピンク色を使う	color = 'hotpink'
最小値でデータフレームのあるカラムの欠損値を置換する	df['列A'].fillna(df['列A'].min())
縦棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
データフレームの数値を全部、小数点以下n桁で丸める	df.round(n)
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
ヒストグラムをライムグリーン色を用いて描画する	plt.hist(データ列, color='limegreen')
イテラブルとリストの散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
散布図をブラウン色で描画する	plt.scatter(データ列x, データ列y, color='brown')
モデル教師データでを学習する	model.fit(説明変数, 目的変数)
データフレームを指定した列によってソートしてNaNを先頭にする	df.sort_values(by='列A', na_position='first')
辞書の浅いコピーを作る	aDict.copy()
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
列の数値時刻を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
変数をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
プロットの補助目盛りを有効にする	plt.minorticks_on()
データフレームのあるカラムが何年か見る	df['列A'].dt.year
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
バツマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='x')
リストの末尾にオブジェクトを加える	aList.append(element)
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
option: ホットピンクを用いる	color = 'hotpink'
散布図をバツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームの指定したカラムが正規分布からどの程度、尖っているか見る	df['列A'].skew()
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
ネイビー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
コレクションを使用する	import collections
データフレームをTSVファイルを用いて保存する	df.to_csv('file.tsv', sep='\t')
ライトシアンにヒストグラムの色を指定する	plt.hist(データ列, color='lightcyan')
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
横棒グラフをレモンシフォン色として描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
散布図のポイントマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
ダークブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
ファイル名がJSONファイル	filename.endswith('.json')
行列の列ごとの合計値	np.sum(aArray, axis=0)
複数横に並べてイテラブルをヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
スタックから最初の要素を取り除く	deq.remove(element)
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
option: 複素数型を使う	dtype = bool
option: レモンシフォン色を用いる	color = 'lemonchiffon'
ファイルパスのセパレータ記号	os.sep
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
整数乱数の行列を作る	np.random.randint(開始値, 終了値, (行数, 列数))
キューのstart番目からendの部分要素を見る	collections.deque(itertools.islice(deq, start, end))
散布図に大バツマーカーを加える	plt.scatter(データ列x, データ列y, marker='X')
リストをn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
タプルをミュータブルにする	list(aTuple)
ファイルパスから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
データフレームからランダムに5行を抽出する	df.sample(5)
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
データフレームをTSVファイルで保存する	df.to_csv('file.tsv', sep='\t')
線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
指定した列の値で集計し、各合計を求める	df.groupby('列A').sum()
浮動小数点数から実数を引く	x - y
環境がWindowsか調べる	sys.platform.startswith('win32')
anemptystring	''
データフレームのあるカラムの年	df['列A'].dt.year
データシリーズが正規分布からどれだけ尖っているか見る	ds.skew()
イテラブルとイテラブルについて散布図を描画し、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
option: NaNを無視する	nan_policy = 'omit'
ミディアムアクアマリン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データシリーズのNaNをxに指定する	ds.fillna(x)
タプルをリストに変換する	list(aTuple)
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
option: ホワイトスモークを使う	color = 'whitesmoke'
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
エクセルからシート名を指定して読む	pd.read_excel('file.xlsx', sheet_name=シート名)
散布図でデータフレームをグラフ化してカテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
データフレームを列名を指定して左ジョインする	pd.merge(df, df2, on='列A', how='left')
配列をn個にビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームの先頭100行	df.head(100)
データフレームの中の欠損値の数を数える	df.isna().sum()
黒い大バツマーカーをイテラブルとイテラブルの散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
クリムゾンにヒストグラムの色を変更する	plt.hist(データ列, color='crimson')
セットの濃度	len(aSet)
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
ダークサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='darksalmon')
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
データシリーズの歪度	ds.kurt()
文字列を部分文字列で二つに区切って後半の文字列を使う	s.partition(sub)[-1]
折れ線グラフの大バツマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
ゲインズボロにヒストグラムの色を設定する	plt.hist(データ列, color='gainsboro')
線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
タイムスタンプデータが火曜日かどうか調べる	aDatetime.weekday() == 1
JSONフォーマットの文字列を読み込む	json.loads(jsonString)
文字列をシンボルに変換する	sympy.Symbol(s)
実行環境の再帰の最大回数を調べる	sys.getrecursionlimit()
一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
日付データの月数を使う	aDate.month
データフレームの指定したカラムの第一四分位数	df['列A'].quantile(0.25)
option: 値を置き換える	inplace = True
エンコーディングで文字列をバイト列に変換する	s.encode(encoding=encoding)
セットの補集合を求める	aSet.difference(aSet2)
OSがLinuxか	sys.platform.startswith('linux')
データ列をタイムスタンプに変換する	pd.to_datetime(ds)
▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v')
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
指定した列のカテゴリで集計し、各個数を計算する	df.groupby('列A').count()
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
データフレームを指定したカラムで昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
option: インデックスを自動的な連番に指定する	index_col = None
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
2つのデータフレームを結合する	pd.merge(df, df2)
二つのデータフレームを縦に連結する	pd.concat([df, df2], axis=0)
辞書からキーの値	aDict.get(key)
実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
縦棒グラフをダークオリーブグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
散布図にrgbの四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データシリーズを10の位で四捨五入する	ds.round(-1)
要素をキューの末尾に付け加える	deq.append(element)
縦棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
散布図のマーカーをポイント印にする	plt.scatter(データ列x, データ列y, marker='.')
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
白い線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
リストをy座標リストをx軸として、大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
データフレームから列を二つのみ選択する	df[['列A', '列B']]
ヒストグラムの色をミディアムオーキッドに指定する	plt.hist(データ列, color='mediumorchid')
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
辞書からキーの値をエラーなく得る	aDict.get(key, None)
リストとリストについて散布図を描画してマーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
データフレームの未入力値を最大値に増やす	df.fillna(df.max())
文字列の開始位置と終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
二つの列からグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
空白文字を全部使う	string.whitespace
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
辞書に項目名が存在するかどうか調べる	key in aDict
青いグリッド線を引く	plt.grid(color='b')
行列の列を選択する	aArray[:, 列番号]
option: ベージュ色を用いる	color = 'beige'
option: ダークマゼンタを用いる	color = 'darkmagenta'
全ての八進数字	string.octdigits
データフレームの相関行列を可視化する	sns.heatmap(df.corr())
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
双方向キューをイテラブルから作る	collections.deque(iterable)
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
データフレームのカラムのトリム分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
整数nを二進表記にする	bin(n)
整数の最大値を調べる	sys.maxsize
文字列の先頭から余分な空白を除く	s.lstrip()
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
option: ミントクリームにグラフの色を設定する	color = 'mintcream'
改行で文字列を区切り文字列リストに変換する	s.splitlines()
ベクトルから重複を除いた配列を作る	np.unique(aArray)
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
変数が無限大に近づくとき、数値の極限値を求める	sympy.limit(e, z, oo)
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
イテラブルとデータ列の散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
タプルの末尾の要素	aTuple[-1]
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
option: 表示を半透明にする	alpha = 0.5
列を文字列リストに変換して、空白で結合する	' '.join(map(str, iterable))
オレンジレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
分類モデルの残差を求める	目的変数 - model.predict(説明変数)
日付時刻データが日付時刻データと同時かどうか	aDatetime == aDatetime2
自然対数	math.log(x)
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
option: 丸印を使う	marker = 'o'
ヒストグラムの色をシアンに変更する	plt.hist(データ列, color='cyan')
折れ線グラフのポイント印の色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
折れ線グラフのダイアモンドマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームを千の位で丸めて、整数型にする	df.round(-3).astype(int)
本日の日数	datetime.datetime.today().day
カテゴリで色付けして、データフレームの全カラムの散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
ダークグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
値を赤色にする	f'\033[31m{value}\033[0m'
文字列中に部分文字列が存在しないか調べる	sub not in s
横棒グラフを描き、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
データフレームの一部のカラムの不偏分散を算出する	df[['列A', '列B']].var(ddof=1)
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
折れ線グラフの大バツ印の色を変える	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
配列の値が正規分布にしたがって発生する累積確率を計算する	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
黒い三角マーカーを配列と配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='k')
辞書をインデント幅nのJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
ファイルをオープンして]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
環境の名前	sys.platform
ヒストグラムをミントクリーム色として描画する	plt.hist(データ列, color='mintcream')
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
回帰木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
平均値付き箱ひげ図をプロットする	plt.boxplot(データ列, showmeans=True)
指定したカラムを万の位で丸める	df['列A'].round(-4)
棒グラフをパールゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
データシリーズの中に文字列と文字列があるか調べる	ds.isin([value, value2])
グラフで使う縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
デフォルトのエンコーディングを使う	sys.getdefaultencoding()
折れ線グラフに▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
文字列がリストに含まれる	element in aList
線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategrey'
nが配列のどれかかどうか調べる	n in aArray
浮動小数点数のn乗して実数による余り	pow(x, n, y)
ヒストグラムをパールゴールデンロッド色を用いて描画する	plt.hist(データ列, color='palegoldenrod')
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
小文字が文字列内にあるかどうか調べる	any(c.islower() for c in s)
日付時刻データは何時か知る	aDatetime.hour
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
ある列の文字列に部分文字列が含まれない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
二つのオブジェクトは等しいかどうか調べる	obj == obj2
円グラフでデータ列の比率を可視化する	plt.pie(データ列, startangle=90)
赤い破線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
散布図の右三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
線グラフを一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
リストとリストの散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
ヒストグラムをアクア色として描画する	plt.hist(データ列, color='aqua')
文字列を部分文字列で二分し、後半の文字列を求める	s.partition(sub)[-1]
option: ミディアムアクアマリン色を用いる	color = 'mediumaquamarine'
option: グラフの色をディープスカイブルーに指定する	color = 'deepskyblue'
タプルからキーの値かもしくは要素を得る	aDict.get(key, element)
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
散布図に黒い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
データフレームをある列の値として集約して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
行列の列ごとの標準偏差	np.std(aArray, axis=0)
スプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
ヒストグラムの色を濃い青に設定する	plt.hist(データ列, color='darkblue')
タプルの総和	sum(aTuple)
データフレームの選択したカラムの中にいくつ欠損値があるか数える	df[['列A', '列B']].isna().sum()
小数点数を切り下げる	math.floor(x)
データフレームの末尾10行を抽出する	df.tail(10)
データフレームをグループ化し、それぞれの個数を求める	df.groupby('列A').count()
赤色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
二つの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
散布図をシャルトリューズ色として描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
折れ線グラフの大バツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
リストとイテラブルについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
散布図のマーカーを上三角印にする	plt.scatter(データ列x, データ列y, marker='^')
漢字が文字列内に使われているか調べる	re.search('[\u4E00-\u9FD0]', s)
縦棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
データフレームの選択したカラムのNaNをメディアンに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
文字列がリストに含まれるか調べる	element in aList
xの小数点以下'4'桁までを出力する	print(':.4f'.format(x))
ヒストグラムの色をレモンシフォンに変更する	plt.hist(データ列, color='lemonchiffon')
文字列中にひとつでも非空白があるか確認する	any(not c.isspace() for c in s)
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
データフレームを２つの列でグループ化し、基本統計量を求める	df.groupby(['列A', '列B']).describe()
リストと数列について散布図を描き、三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
二つのカウンタのいずれかに含まれる値を求める	aCounter | aCounter2
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
グリッド線を青くする	plt.grid(color='b')
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
パールバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
データフレームの一部のカラムの欠損値を最大値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
データフレームをグループ化し、それぞれの最大値を求める	df.groupby('列A').max()
1行だけ標準入力から読み込む	sys.stdin.readline()
エクセルファイルから複数のシートを指定してデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームの中にと文字列が存在する	df.isin([value, value2])
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='grey')
半透明の破線で配列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ミディアムブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
ヒストグラムをターコイズ色として描画する	plt.hist(データ列, color='turquoise')
線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgrey')
データフレームのある列の値がxに等しい行を抽出する	df[df['列A'] == x]
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
指定した値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
縦棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
データフレームの中の列を分割する	pd.cut(df[col], aList)
青い一点鎖線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ファイルを追加モードを用いて開く]	open(filepath, mode='a')
filepathに現在の作業ディレクトリを変更する	os.chdir(os.dirname(filepath))
棒グラフをシアン色を使って描画する	plt.bar(データ列x, データ列y, color='cyan')
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
option: グラフの色をシルバーに指定する	color = 'silver'
縦棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
本日の年	datetime.datetime.today().year
本日が金曜日	datetime.datetime.today().weekday() == 4
リストとイテラブルについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
辞書を並べ直してJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
青い▼印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
棒グラフをライトスレイグレー色を使って描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
実数の天井	math.ceil(x)
スカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
最大値・最小値を用いて整数乱数を求める	random.randint(最小値, 最大値)
オブジェクトのバイトサイズ	sys.getsizeof(obj)
棒グラフをオールドレース色を用いて描画する	plt.bar(データ列x, データ列y, color='oldlace')
文字列中の文字を列挙する	list(s)
グラフに凡例を追記する	plt.legend(['凡例A', '凡例B'])
ダークゴールデンロッドにヒストグラムの色を指定する	plt.hist(データ列, color='darkgoldenrod')
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
入力ストリームを一行ずつ読む	f.readline()
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
集合の補集合を計算する	aSet.difference(aSet2)
改行で文字列を分割し、文字列リストに変換する	s.splitlines()
やわらかい青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: マーカーを右三角に指定する	marker = '>'
sepを区切りとして文字列リストを連結する	sep.join(aStringList)
nの二進表現	bin(n)
散布図の丸マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
大文字を小文字にする	s.lower()
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
キーが辞書に存在している	key in aDict
カウンタから最頻出な項目の件数を求める	aCounter.most_common()[1]
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
option: 丸印を使用する	marker = 'o'
ファイルのファイル名	os.path.basename(filepath)
集合をイミュータブルにする	frozenset(aSet)
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
列名を指定して二つの表データを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
散布図のマーカーを菱形にする	plt.scatter(データ列x, データ列y, marker='D')
縦軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
option: シエナ色を用いる	color = 'sienna'
データフレームの先頭n行	df.head(n)
折れ線グラフの▼マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ファイルからフォルダ名を見る	os.path.dirname(filepath)
両端キューをリストにする	list(deq)
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
n個にデータフレームの中の列をビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ヒストグラムの線の種類を破線に指定する	plt.hist(データ列, linestyle='dashed')
ファイルから1バイト読み込む	f.read(1)
option: グラフの色をオレンジレッドに変更する	color = 'orangered'
オブジェクトがタプルクラスか調べる	isinstance(obj, tuple)
データフレームの選択した列の欠損値を数値で埋める	df[['列A', '列B']].fillna(x)
標準正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x)
ポスター用にプロットを設定する	sns.set(context='poster')
データ列の折れ線グラフを星印で描画する	plt.plot(データ列x, データ列y, marker='*')
２次元リストの転置行列	[list(x) for x in list(zip(*aList))]
リストをダミー変数にする	pd.get_dummies(リスト)
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
option: ライトスカイブルー色を使う	color = 'lightskyblue'
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
プロットのデータラベルの位置を指定する	plt.legend(loc=(x, y))
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
散布図を黒いポイントマーカーを用いて描く	plt.plot(データ列x, データ列y, marker='.', c='k')
数を文字列に変換する	str(x)
リストと配列について散布図をプロットして、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
データフレームの重複を数える	df.duplicated().sum()
データフレームの選択したカラムの文字列をNaNに変換する	df[['列A', '列B']].replace(値, np.nan)
シーケンスの各要素に対してpredicateFuncの適用が真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
列の名前の一覧	df.columns
ダークオレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
option: 改行コードを旧Macにする	newline = '\r'
特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
option: ダイアモンド印を用いる	marker = 'D'
整数nが配列のいづれか	n in aArray
実数の双曲線正接の逆数を求める	math.atanh(x)
数列とリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
要素がセットに含まれないか調べる	element not in aSet
折れ線グラフをダークグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='darkgreen')
浮動小数点数の三乗	x ** 3
教師データで回帰モデルを学習する	model.fit(説明変数, 目的変数)
ダークバイオレットにヒストグラムの色を指定する	plt.hist(データ列, color='darkviolet')
赤い▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
グラフの背景色を暗くする	sns.set(style='darkgrid')
データフレームのある列の値がx以上の行を抽出する	df[df['列A'] >= x]
フォレストグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
バイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
アクア色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
タプルをJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
棒グラフを黄緑色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データ列を全て日付データに変換する	pd.to_datetime(ds)
小数点数の仮数	math.frexp(x)[0]
実数の小数点以下を丸める	round(x)
y軸の目盛りを対数に変更する	plt.yscale('log')
カウンタを多い順に列挙する	aCounter.most_common()
文字列中に部分文字列が含まれないか調べる	sub not in s
散布図にバツマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
散布図のダイアモンド印の色を指定する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
両端キューの末尾に列の各要素を追加する	deq.extend(iterable)
ヒストグラムを点線として描画する	plt.hist(データ列, linestyle='dotted')
ヒストグラムの色をミディアムアクアマリンにする	plt.hist(データ列, color='mediumaquamarine')
イテラブルから行列を初期化する	np.array(iterable)
関数によってデータフレームをグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
option: サンディーブラウン色を使う	color = 'sandybrown'
天井	math.ceil(x)
データフレームの選択したカラムの中に文字列と文字列がいくつ存在するかカウントする	df[['列A', '列B']].isin([value, value2]).sum()
ヒストグラムを茶色色を使って描画する	plt.hist(データ列, color='brown')
文字列中からパターンにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
辞書の値を列挙する	aDict.values()
区切りで文字列を区切って文字列リストにする	s.split(sub)
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
オプションで、標準エラーを出力にする	file = sys.stderr
イテラブルと配列についての散布図に文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
文字列の最初だけ大文字化する	s.capitalize()
折れ線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
rgbの丸マーカーを数列とデータ列の散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ある列の値ごとの合計	df.groupby('列A').sum()
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
JSONファイルの入力を読み込んでdataとする	data = json.load(fin)
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
データフレームのn行目以降を選択する	df[n:]
現在の年数	datetime.datetime.today().year
文字列の開始位置番目と終了位置番目の間に部分文字列がないか調べる	s.find(sub, start, end) == -1
浮動小数点数を複素数に変換する	complex(x)
year年month月day日の日付をオブジェクト化する	datetime.date(year=year, month=month, day=day)
3つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=1)
指定したカラムにおいてどの値が頻出か確認する	df['列A'].mode()
濃くカラーパレットをプロットの描画で使う	sns.set(pallete='deep')
ラベンダーにヒストグラムの色を指定する	plt.hist(データ列, color='lavender')
L2ノルムを用いて正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
option: ASCII文字に限定する	flag = re.ASCII
珊瑚色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
option: グラフの色をディムグレーに変更する	color = 'dimgrey'
カデットブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
散布図を黒い左三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
横棒グラフをシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='cyan')
散布図の印を右三角印にする	plt.scatter(データ列x, データ列y, marker='>')
オブジェクトにプロパティがあるか調べる	hasattr(obj, プロパティ名)
イエローグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
等差数列をベクトルに変換する	np.arange(開始値, 終了値, 等差)
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
リストと配列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
文字列中の部分文字列を新しい文字列に全部置換する	s.replace(sub, newsub)
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
データフレームとデータフレームの列を横方向につなぐ	pd.concat([df, ds], axis=1)
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データフレームの指定した列の75パーセンタイル	df['列A'].quantile(0.75)
option: グラフの種類を点線に設定する	linestyle = 'dotted'
rgbの▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列の最後から改行を消す	s.rstrip('\n')
双方向キューが空でないかどうか調べる	len(deq) != 0
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
predicateFuncを適用したときtrueとなるタプルの要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
option: シアンに色を設定する	color = 'cyan'
n進数の文字列をバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
option: グラフの色をコーラルにセットする	color = 'coral'
データフレームから型リストで指定したデータ型の列を抽出する	df.select_dtypes(include=typeList)
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
クロスマーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
option: グラフの色を貝殻に変更する	color = 'seashell'
折れ線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
L1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
文字列を下線付きにする	f'\033[4m{value}\033[0m'
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
カーキ色を用いてヒストグラムを描画する	plt.hist(データ列, color='khaki')
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
片仮名をひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
文字列中の小文字を大文字に変換する	s.upper()
ヒストグラムの色をサドルブラウンに指定する	plt.hist(データ列, color='saddlebrown')
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
n個にリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
配列とリストの散布図に黒い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='k')
折れ線グラフを色付きの点線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightgreen')
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
リストとリストについての散布図にrgbのダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
新しいガウス過程回帰モデルを用意する	model = sklearn.gaussian_process.GaussianProcessRegressor()
多次元データを多次元尺度構成法を用いてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
実行結果をシアンでプリントする	print(f'\033[36m{value}\033[0m')
グラフの短い説明の位置を指定する	plt.legend(loc=(x, y))
勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
実数の逆双曲線正弦を求める	math.asinh(x)
データフレームをある列によって小さい順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
データフレームの指定したカラムの欠損値をxに設定する	df['列A'].fillna(x)
option: 色をライトスチールブルーに設定する	color = 'lightsteelblue'
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
サドルブラウン色を使ってヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
小麦色色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
行列の行ごとの最大	np.max(aArray, axis=1)
データフレームをBOMを付けてCSVファイルに保存する	df.to_csv('file.csv', encoding='utf_8_sig')
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
折れ線グラフの四角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
追加モードを用いてファイルを開き]、fとする	f = open(filepath, mode='a')
オブジェクトは文字列型のインスタンスか調べる	isinstance(obj, str)
文字列の開始位置より後に部分文字列が存在しないか	s.find(sub, start) == -1
クリムゾン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
イテラブルとリストの散布図をプロットしてマーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
文字列を文字コードでバイト列に変換する	s.encode(encoding=encoding)
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
データフレームの指定したカラムを百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
配列のKurtosisを求める	scipy.stats.kurtosis(配列, bias=False)
浮動小数点数を数で割った余り	x % y
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ライトグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
option: グラフの色をマルーンに設定する	color = 'maroon'
サドルブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ヒストグラムをダークグリーン色として描画する	plt.hist(データ列, color='darkgreen')
大量のデータが正規分布に従うか仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームを関数の値によってグループ化する	df.groupby(関数)
追加用にファイルパスをオープンして]fとする	f = open(filepath, mode='a')
数列と配列についての散布図に黒い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
両端キューをタプルに変換する	tuple(deq)
xの小数点以下'4'桁の文字列にする	':.4f'.format(x)
数値を因数分解する	sympy.factor(e)
ベクトルの標準偏差を調べる	np.std(aArray)
最大最小値でスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データ列をカテゴリデータに変換する	ds.astype(object)
0からnまでのスライス	slice(n)
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
n個の整数列	list(range(n))
乱数を発生させる	random.random()
option: エラーを無視するように変更する	errors = 'ignore'
option: 色をダークカーキに設定する	color = 'darkkhaki'
浮動小数点数が整数か調べる	x.is_integer()
指定したカラムリストついて、データフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
日付データにn時間分加算する	aDate + datetime.timedelta(hours=n)
文字列リストをsepを区切りとしてつなげる	sep.join(aStringList)
散布図に赤い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
タプルを順に出力する	print(*aTuple)
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
TSVを読む	pd.read_csv('file.tsv', sep='\t')
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
文字列がキーワード	keyword.iskeyword(s)
rgbのクロスマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: ゴールデンロッド色を使う	color = 'goldenrod'
配列とリストについての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
データフレームの指定した列を小数点以下n桁で丸める	df['列A'].round(n)
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
縦棒グラフをカデットブルー色として描画する	plt.bar(データ列x, データ列y, color='cadetblue')
列とイテラブルを連結する	itertools.chain(iterable, iterable2)
データシリーズの日	ds.dt.day
データシリーズを10の位で四捨五入して整数型にする	ds.round(-1).astype(int)
ヒストグラムの色をパウダーブルーにセットする	plt.hist(データ列, color='powderblue')
整数nのビット長	n.bit_length()
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
散布図のクロスマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
無限にカウントアップする	itertools.count()
リストと数列について散布図を描画してマーカーを三角に変更する	plt.plot(データ列x, データ列y, marker='^')
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
文字列をキャピタライズする	s.capitalize()
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームのカラムを並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
小数点数のルートを算出する	math.sqrt(x)
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
CSVファイルをヘッダなしで読み込む	pd.read_csv('file.csv', header=None)
３つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
アークタンジェント	math.atan(x)
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
データフレームの一部の列の中の欠損値の数を求める	df[['列A', '列B']].isna().sum()
ファイルパスを文字列の示す文字コードでオープンする]	open(filepath, encoding=s)
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
アヤメのデータセットからデータフレームを読み込む	df = sns.load_dataset('iris')
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
右三角マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='>')
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
列名を指定してデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
option: グラフの色をオレンジに設定する	color = 'orange'
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
option: ライトスレイグレーを使う	color = 'lightslategray'
リストとイテラブルについて散布図をプロットしてマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
折れ線グラフをスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='skyblue')
ある列のカテゴリの個数を求める	df.groupby('列A').count()
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
実数の余弦の逆数を求める	math.acos(x)
option: グラフの色を青緑に設定する	color = 'teal'
回帰木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
データフレームの内であるカラムに重複があればドロップする	df.drop_duplicates(subset='列A', inplace=True)
両端キューの値を反転する	deq.reverse()
線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
散布図をスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slateblue')
option: 改行コードをUNIXにセットする	newline = '\n'
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
青いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
option: 区切りを文字列にする	sep = s
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
floatの最大値	sys.float_info.max
option: オレンジレッドにグラフの色を設定する	color = 'orangered'
指定したカラムの不偏標準偏差	df['列A'].std()
配列のトリム分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
散布図のマーカーを左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
ロイヤルブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
両端キューをポップする	deq.pop()
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
オブジェクトのオブジェクト識別子を見る	id(obj)
ヒストグラムの色をミディアムスプリンググリーンにする	plt.hist(データ列, color='mediumspringgreen')
タプルをリストにする	list(aTuple)
ファイルのディレクトリ名を使う	os.path.dirname(filepath)
option: ベクトルのデータ型を指定する	dtype = np.int
日付時刻データの時間数を見る	aDatetime.hour
折れ線グラフに四角印を用いる	plt.plot(データ列x, データ列y, marker='s')
データフレームの列名を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
option: フォントの色を茶色に設定する	color = 'brown'
青緑色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
折れ線グラフの丸マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
横棒グラフをオレンジレッド色として描画する	plt.barh(データ列x, データ列y, color='orangered')
バリーウッドにヒストグラムの色を設定する	plt.hist(データ列, color='burlywood')
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
ベクトルの差を求める	aArray - aArray2
option: フォントの色をミディアムパープルに変更する	color = 'mediumpurple'
リスト内の要素が全て真かテストする	all(aList)
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: クリムゾン色を用いる	color = 'crimson'
option: カラムの名前をリストで設定する	names = 列名リスト
ライトスチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームから数値データの列を抽出する	df.select_dtypes('number')
データフレームの列を並べて箱ヒゲ図にする	plt.boxplot([df['カラム'], df['カラム']])
seabornのデフォルト見た目を適用する	sns.set()
折れ線グラフのクロス印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフをミディアムターコイズ色を使って描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
散布図をペールグリーン色として描画する	plt.scatter(データ列x, データ列y, color='palegreen')
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
option: カーキ色を使う	color = 'khaki'
双方向キューの右にシーケンスの各要素を順に追加する	deq.extend(iterable)
列に列を続ける	itertools.chain(iterable, iterable2)
データフレームの行数と列数	df.shape
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
L2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
option: 改行するの代わりに文字列を用いる	end = s
折れ線グラフをダークシアグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレーム中の未入力値をドロップしてみる	df.dropna()
option: NaNを先頭にする	na_position = 'first'
耐火レンガ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
配列のトリム平均	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
option: エンコーディングをBOM付きにセットする	encoding = 'utf_8_sig'
折れ線グラフの上三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
三変数の最小値	min(x, y, z)
データシリーズの欠損値を後の行の値で補完する	ds.fillna(method='bfill')
eの乗数	math.exp(x)
散布図の▲印の色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームを使う	import pandas as pd
リストの個数	len(aList)
ホワイト色でヒストグラムを描画する	plt.hist(データ列, color='white')
紺碧色で散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
赤い一点鎖線として線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
カーキ色を使ってヒストグラムを描画する	plt.hist(データ列, color='khaki')
option: 白色を用いる	color = 'white'
データシリーズのタイムゾーンを指定する	ds.tz_convert('Asia/Tokyo')
線グラフの色をダークシアンに変更する	plt.plot(データ列x, データ列y, color='darkcyan')
スチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
文字列がリストの要素でないか調べる	element not in aList
文字列が文字列より辞書順で前かどうか調べる	s < s2
スタッキングを使って回帰分析を行う	sklearn.ensemble.StackingRegressor()
赤い四角マーカーを配列と数列についての散布図に描く	plt.plot(データ列x, データ列y, marker='s', c='r')
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列x, データ列y, color='mediumorchid')
ファイルからファイル名を使う	os.path.basename(filepath)
列のエポック秒をPandasの日付型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
エポック秒の列からタイムスタンプ型にする	pd.to_datetime(df['列A'], unit='s', utc=True)
リストの出力を改行なしに行う	print(value, end='')
線グラフを点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
文字列中の部分文字列の登場を数える	s.count(sub)
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ダイアモンドマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
ユニコードに対応する文字を使う	chr(unicode)
nをn2で割る	n / n2
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
ヒストグラムを青紫色として描画する	plt.hist(データ列, color='violet')
カウンタのユニオン	aCounter | aCounter2
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
赤いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
改行なしに実行結果をプリントする	print(value, end='')
option: 四角マーカーを加える	marker = 's'
メディアンでデータフレームのNaNを補う	df.fillna(df.median())
左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
アリスブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
散布図をシルバー色を用いて描画する	plt.scatter(データ列x, データ列y, color='silver')
散布図のポイントマーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
データフレームのカラムの中に存在する文字列の合計を調べる	df['列A'].isin([value]).sum()
イテラブルを文字列に変換して、'改行で一つにする	'\n'.join(map(str, iterable))
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
option: グラフの色をダークグリーンに変更する	color = 'darkgreen'
星印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
文字列中から正規表現にケースを無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
オプションで、標準出力を出力先にする	file = sys.stdout
青紫色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
散布図にrgbの△マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
２つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
オブジェクトがプロパティを持つ	hasattr(obj, プロパティ名)
データフレームから重複ありでランダムに10行をサンプリングする	df.sample(10, replace=True)
改行	'\n'
ダークスラテグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkslategray')
option: フォントの色をフォレストグリーンに設定する	color = 'forestgreen'
散布図を紺碧色を用いて描画する	plt.scatter(データ列x, データ列y, color='azure')
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
日付時刻データを数値にする	aDatetime.timestamp()
行列の行を選択する	aArray[行番号]
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームの選択した列の尖度	df[['列A', '列B']].skew()
データフレームを丸めて、整数にする	df.round().astype(int)
散布図を紺碧色として描画する	plt.scatter(データ列x, データ列y, color='azure')
実数の双曲線正接の逆数	math.atanh(x)
日付データが月曜日かどうか調べる	aDate.weekday() == 0
option: レモンシフォン色を使う	color = 'lemonchiffon'
変数名を項目名としてマップ	dict(name=element)
列の長さを制限する	collections.deque(iterable, maxlen=n)
文字の文字コード	ord(ch)
ヒストグラムの色をライトグレーにする	plt.hist(データ列, color='lightgray')
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
指定したカラムの欠損値を中央値に減らす	df['列A'].fillna(df['列A'].median())
データシリーズを10の位で丸める	ds.round(-1)
折れ線グラフの▲マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
列を集合に追加更新する	aSet.update(iterable)
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
option: シャルトリューズ色を使う	color = 'chartreuse'
集合をタプルに変換する	tuple(aSet)
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
乱数の行列を作る	np.random.random((行数, 列数))
バイナリ書き込み用にファイルパスをオープンする]	open(filepath, mode='wb')
データフレームを関数の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
十六進表記の文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
小数点数の自然対数	math.log(x)
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
option: フクシア色を使う	color = 'fuchsia'
青い実線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
タプルのn番目からn2番目までの部分	aTuple[n:n2]
文字列内にひとつでも空白がある	any(c.isspace() for c in s)
デックの長さ	len(deq)
日付時刻データを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
カウンタをリストにする	list(aCounter)
ケンドール順位相関係数としてデータフレームの相関行列を求める	df.corr(method='kendall')
標準正規分布の確率密度関数を使用する	scipy.stats.norm.pdf(x)
ファイルパスを開いて]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
散布図を赤い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームの分位数	df.quantile(パーセント/100)
データシリーズは何日か見る	ds.dt.day
option: フォントの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
リストの末尾にオブジェクトを追加する	aList.append(element)
文字列リストをsepを区切りとして結合する	sep.join(aStringList)
ヒストグラムをラベンダーブラッシュ色を用いて描画する	plt.hist(データ列, color='lavenderblush')
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
棒グラフを淡いピンク色色として描画する	plt.bar(データ列x, データ列y, color='lightpink')
Pythonのバージョン	sys.version
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
棒グラフをピンク色として描画する	plt.bar(データ列x, データ列y, color='pink')
折れ線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
折れ線グラフに黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
グラフを淡くする	sns.set(pallete='muted')
線グラフをライトゴールドロディイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: ゲインズボロを用いる	color = 'gainsboro'
回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
ダークレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
実数の3乗	x ** 3
タイムスタンプデータからn週間を減算する	aDatetime - datetime.timedelta(weeks=n)
文字列がタイトルケースか	s.istitle()
option: グラフの色をアクアに設定する	color = 'aqua'
非数値データ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
組の要素を逆順にする	aTuple[::-1]
逆双曲線余弦を求める	math.acosh(x)
データフレームのカウントプロットをプロットする	sns.countplot(x='列名', data=df)
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
タン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
リスト中の最初の文字列を探す	aList.index(element)
option: 青にグラフの色をセットする	color = 'blue'
文字列は全て識別子名	s.isidentifier()
ホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
データフレームからカラムを1つ選択する	df[['列A']]
日付時刻データのタイムゾーン	aDatetime.timetz()
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
キーがマッピングに存在するかどうか調べる	key not in aDict
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
ヒストグラムの色をティールに設定する	plt.hist(データ列, color='teal')
データフレームの指定した列を丸める	df['列A'].round()
縦棒グラフをスチールブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='steelblue')
横軸を対数に変更する	plt.xscale('log')
option: グラフの色をコーンフラワーブルーに指定する	color = 'cornflowerblue'
散布図の印の色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
データシリーズの値がNaNか調べる	ds.isna()
リストをビン数nでビン分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
データ列を対数する	np.log(データ列)
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
リストと配列について散布図をプロットし、、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
ヒストグラムをライトブルー色として描画する	plt.hist(データ列, color='lightblue')
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
折れ線グラフの色をゴールドに変更する	plt.plot(データ列x, データ列y, color='gold')
nではない	not n
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
折れ線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
日付データが金曜日か調べる	aDate.weekday() == 4
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
データシリーズが何月か見る	ds.dt.month
グラフの横軸を対数に変更する	plt.xscale('log')
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
数値でデータシリーズの欠損値を埋める	ds.fillna(x)
ある列のカテゴリごとの合計	df.groupby('列A').sum()
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
データフレームの指定したカラムの中に文字列と文字列があるか調べる	df['列A'].isin([value, value2])
rgbの大バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムをミディアムターコイズ色として描画する	plt.hist(データ列, color='mediumturquoise')
データフレームの文字列を欠損値にする	df.replace(値, np.nan)
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ゼロ埋めされたブール型の配列を作る	np.zeros(要素数, dtype=np.int32)
option: 下三角マーカーを描画する	marker = 'v'
ヒストグラムを２つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
赤いダイアモンドマーカーをイテラブルとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
数列の折れ線グラフを描き、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: ダークオリーブグリーンにグラフの色をセットする	color = 'darkolivegreen'
文字列の終了位置より前に部分文字列が含まれる	s.find(sub, 0, end) != -1
２つの変数を同じ値にする	x = y = n
文字列がカタカナか調べる	('ァ' <= ch <= 'ン')
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
データフレームのカラムのモードを計算する	mode, count = scipy.stats.mode(df['列A'])
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
ふたつの列からグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
多い順にカウンタをリストとして得る	aCounter.most_common()
散布図のクロスマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
リストの合計値を求める	sum(aList)
データフレームのあるカラムを抽出する	df['列A']
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
配列にはいくつ要素が存在するか調べる	aArray.size
文字列の先頭から部分文字列を探す	s.find(sub)
option: 黄色に色を設定する	color = 'yellow'
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
パープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
グラフの見た目を良くする	import seaborn as sns
ロイヤルブルー色でヒストグラムを描画する	plt.hist(データ列, color='royalblue')
ライトサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
行列のスカラー倍	aArray * n
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
データフレームの指定した列の欠損値を前の値に指定する	df['列A'].fillna(method='ffill')
実数のタンジェントの逆数	math.atan(x)
option: ミッドナイトブルー色を用いる	color = 'midnightblue'
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
列を四分位数ごとにビニングする	pd.qcut(ds, 4)
データ列を等量でn個にビニングする	pd.qcut(ds, n)
実数のtanの逆数	math.atan(x)
色付きの破線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームの要約統計量	df.describe()
自然数の最大公約数を計算する	math.gcd(n, n2)
散布図のマーカーをクロスにする	plt.scatter(データ列x, データ列y, marker='x')
バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x')
リストと配列の散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの中のカラムをビン分割する	pd.cut(df[col], aList)
散布図の左三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: グラフの色をネイビーにする	color = 'navy'
散布図の丸印の大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
タプル中の要素は少なくとも一つ真	any(aTuple)
カウンタをタプルで更新する	aCounter.update(iterable)
折れ線グラフのクロス印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
nが-9以上、9以下かどうか	-9 <= n <= 9
二つの表データを横方向に連結する	pd.concat([df, df2], axis=1)
横棒グラフをスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='springgreen')
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データシリーズのNaNを直後の値で置き換える	ds.fillna(method='bfill')
横棒グラフの色をホワイトにする	plt.barh(データ列x, データ列y, color='white')
配列とリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
タプルとタプルを結合する	aTuple + aTuple2
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
タイムスタンプデータからn秒を減算する	aDatetime - datetime.timedelta(seconds=n)
ヒストグラムの色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
option: ダークオレンジ色を使う	color = 'darkorange'
ダークスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
レモンシフォン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
データフレームの選択したカラムの欠損値を最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
異なる列をキーとして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
紺色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
FIXME:カテゴリーデータを出現頻度順に並べ直す	df['列A'].value_counts().sort_index().index
イテラブルと列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
ベクトルの累積和を使う	np.cumsum(aArray)
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
列を分割する	pd.cut(ds, aList)
ヒストグラムをインディアンレッド色を用いて描画する	plt.hist(データ列, color='indianred')
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
散布図を赤い星マーカーとして描く	plt.plot(データ列x, データ列y, marker='*', c='r')
nをn2で割った余りをnにする	n %= n2
双方向キューの右に要素をつけ加える	deq.append(element)
散布図のポイント印を黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
K最近傍法を用いて回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
データフレームの選択したカラムを整数に丸める	df[['列A', '列B']].round()
option: フォントの色を貝殻に設定する	color = 'seashell'
指定したカラムの欠損値をxに増やす	df['列A'].fillna(x)
日付時刻データの日数を使う	aDatetime.day
線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
アルファベットを全部見る	string.ascii_letters
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='teal')
option: ゲインズボロを使う	color = 'gainsboro'
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
新しい回帰木モデルを用意する	model = sklearn.tree.DecisionTreeRegressor()
option: 分割記号を使わない	sep = ''
空のカウンタ	collections.Counter()
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
データフレームのあるカラムの標本標準偏差を求める	df['列A'].std(ddof=1)
カウンタの最頻出な文字列	aCounter.most_common()[0]
タプルとタプルを連結する	aTuple + aTuple2
ダークバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
スタックの値をインプレースに反転する	deq.reverse()
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をライトコーラルに変更する	plt.hist(データ列, color='lightcoral')
新しい文字列で正規表現にマッチした文字列を置換する	re.sub(pattern, newsub, s)
２つのデータフレームを異なる列をキーにしてジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
貝殻色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
等間隔の配列を作成する＼	np.arange(開始値, 終了値, 等差)
グラフの見栄えをデフォルトでいい感じに変更する	sns.set()
二つの変数を文字列で区切って出力する	print(value, value2, sep=s)
データフレームから列を一つ選択する	df[['列A']]
リストとリストの散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
データフレームの未入力値を最大値にする	df.fillna(df.max())
変数を紫色でプリントする	print(f'\033[35m{value}\033[0m')
散布図に青い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
散布図をピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='pink')
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
フォレストグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
菱形印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
表データは何行重複するか見る	df.duplicated().sum()
オブジェクトはバイト列クラスのインスタンスか調べる	isinstance(obj, bytes)
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
ロージーブラウン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
データフレームの一部のカラムはどの程度、正規分布から尖っているか見る	df[['列A', '列B']].skew()
データフレームのNaNを直後の値で埋める	df.fillna(method='bfill')
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
データフレームの列名一覧を見る	df.columns
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
データフレームの一部のカラムを10の位で丸める	df[['列A', '列B']].round(-1)
縦棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
赤い星マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
棒グラフを黄緑色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
棒グラフをダークスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレームの指定した列のNaNを最大値に指定する	df['列A'].fillna(df['列A'].max())
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
モデルの残差を求める	目的変数 - model.predict(説明変数)
浮動小数点数を百の位で四捨五入する	round(x, -2)
データフレームの一部のカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
柱状図を描画する	plt.hist(データ列)
散布図に左三角印を用いる	plt.scatter(データ列x, データ列y, marker='<')
文字列を最後の部分文字列で分割した時の前半の文字列	s.rpartition(sub)[0]
nの無限イテラブルを得る	itertools.repeat(n)
回帰木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
整数nを8進数表記にする	oct(n)
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
データフレームのある列の値がx以上のデータを抽出する	df[df['列A'] >= x]
線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
option: フォントの色をライトスチールブルーに設定する	color = 'lightsteelblue'
option: 白色を使う	color = 'white'
マッピングをカウンタに変換する	collections.Counter(aDict)
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
ティール色としてヒストグラムを描画する	plt.hist(データ列, color='teal')
リストにリストを追加して拡張する	aList.extend(aList2)
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
両端キューの末尾に列の各値を追加する	deq.extend(iterable)
nとn2の論理和	n | n2
カテゴリ別に並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームの中の列を四分位数ごとにビニングする	pd.qcut(df[col], 4)
実数の複素数	complex(x)
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
モカシンにヒストグラムの色を指定する	plt.hist(データ列, color='moccasin')
JSONLファイルをデータフレームとして読み込む	pd.read_json(filename, orient='records', lines=True)
データフレームの指定した列のモードを求める	df['列A'].mode()
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
リストを複製する	aList.copy()
散布図をダーク・スラテグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
カウンタをイテラブルとして更新する	aCounter.update(iterable)
散布図をピンク色として描画する	plt.scatter(データ列x, データ列y, color='pink')
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
option: グラフの色をラベンダーブラッシュに変更する	color = 'lavenderblush'
縦に三つのデータフレームをつなぐ	pd.concat([df, df2, df3], axis=0)
実数の双曲線余弦の逆数	math.acosh(x)
option: グラフの色をスプリンググリーンに変更する	color = 'springgreen'
正規表現によって文字列を置換する	re.sub(pattern, newsub, s)
棒グラフをミディアムパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
散布図のバツ印を赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
タブ区切りのファイルを読み込む	pd.read_csv('file.tsv', sep='\t')
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
本日が木曜日か	datetime.datetime.today().weekday() == 3
外れ値を除いたデータフレームのカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
データフレームを確認する	df.head()
year年month月day日hour時のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour)
実数の正接	math.tan(x)
イテラブルを双方向キューに変換する	collections.deque(iterable)
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
データフレームの選択したカラムの欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
option: 茶色にグラフの色を設定する	color = 'brown'
線グラフの色をタンに指定する	plt.plot(データ列x, データ列y, color='tan')
オリーブにヒストグラムの色を指定する	plt.hist(データ列, color='olive')
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
ダークスラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
ブランチドアーモンドにヒストグラムの色を指定する	plt.hist(データ列, color='blanchedalmond')
折れ線グラフの星印を黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
折れ線グラフの色を青紫にする	plt.plot(データ列x, データ列y, color='violet')
グラフで使用する色を指定する	sns.set(pallete=パレット名)
データフレームの選択したカラムの値をValueMapで全て置き換える	df[['列A', '列B']].replace(ValueMap)
標準入力から1行分改行を取り除いて読む	sys.stdin.readline().rstrip()
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
カウンタから辞書を引く	aCounter.subtract(aDict)
表データから重複する行を残さずドロップする	df.drop_duplicates(keep=False)
数列と配列の散布図を描画して四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの中にと文字列がいくつ存在するか数える	df.isin([value, value2]).sum()
折れ線グラフの三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
実数を小数点以下で丸める	round(x, n)
双方向キュー中の文字列の出現数を数える	deq.count(element)
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
nの8進表現	oct(n)
黒い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームのカラムを散布図で可視化し、、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
グラフを色差別なくする	sns.set(pallete='colorblind')
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームの散布図をグループ化して横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
データフレームを表示するときヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
option: グラフの色をペルーに設定する	color = 'peru'
整数nの二進文字列	bin(n)[2:]
散布図に黒い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの未入力値をxで埋める	df.fillna(x)
全要素を初期値で初期化したベクトル	np.full(要素数, 初期値, dtype=np.int)
ヒストグラムをレモンシフォン色として描画する	plt.hist(データ列, color='lemonchiffon')
変数の値を入れ替える	x, y = y, x
option: バリーウッドを使用する	color = 'burlywood'
本日の日数を見る	datetime.datetime.today().day
イテラブルを配列に変換する	np.array(iterable)
プラットフォームの文字コードの最大値	sys.maxunicode
グラフを論文用に設定する	sns.set(context='paper')
ライトサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
文字列中に部分文字列が存在する	sub in s
option: グラフの色をホワイトに設定する	color = 'white'
データフレームを小数点以下3桁まで書き出す	df.to_csv('file.csv', float_format='%.3f')
欠損値が存在する行をドロップする	df.dropna(inplace=True)
ValueMapでデータフレームの指定したカラムをまとめて置き換える	df['列A'].replace(ValueMap)
ある列の文字列に部分文字列が存在しないデータを抽出する	df[~df['列A'].str.contains(部分文字列)]
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
セットにイテラブルの要素を全て追加する	aSet.update(iterable)
option: グラフの色をシルバーに変更する	color = 'silver'
散布図をアイボリー色を使って描画する	plt.scatter(データ列x, データ列y, color='ivory')
データフレームとデータシリーズを連結する	pd.concat([df, ds], axis=1)
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
データフレームの行を条件で消す	df[(df['列A'] == x) & (df['列B'] == y)]
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
nの二進数表現	bin(n)
option: グラフの色をナバホホワイトにする	color = 'navajowhite'
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
データフレームの選択した列の統計量	df[['列A', '列B']].describe()
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
シーグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='seagreen')
黒いクロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
クラス分類をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
真紅色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
eの実数乗を求める	math.exp(x)
データフレームのある列	df['列A']
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
小文字を全部使う	string.ascii_lowercase
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
インデックスにしてCSVファイルのn行目をロードする	pd.read_csv('file.csv', index_col=n)
数のn乗して実数による余りを算出する	pow(x, n, y)
nが5で割り切れるか調べる	n % 5 == 0
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
データフレームの先頭5行	df.head(5)
データフレームの列をグループ化して、ヒストグラムとして可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームの指定したカラムの標本標準偏差を計算する	df['列A'].std(ddof=1)
文字列の末尾	s[-1]
データフレームのn行目を消して	df.drop(n, axis=0)
option: グラフの色をミディアムブルーに変更する	color = 'mediumblue'
ダークオリーブグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
インデント幅nでマッピングをJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
実数を実数で割った剰余を求める	math.remainder(x, x2)
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
option: デピンクにグラフの色を設定する	color = 'deeppink'
折れ線グラフの色をダークバイオレットに変更する	plt.plot(データ列x, データ列y, color='darkviolet')
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
縦棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
ゴールド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
縦棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
option: ライトブルー色を使う	color = 'lightblue'
option: グラフの色をアリスブルーに指定する	color = 'aliceblue'
正規分布のパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ヒストグラムを破線に設定する	plt.hist(データ列, linestyle='dashed')
線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
オリベドラブ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
折れ線グラフを青い点線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ヒストグラムを青くする	plt.hist(データ列, color='b')
option: ピンク色を用いる	color = 'pink'
日付時刻データの分数を使う	aDatetime.minute
行列と同じ大きさの空配列を作る	np.empty_like(aArray)
ヒストグラムをビスク色を用いて描画する	plt.hist(データ列, color='bisque')
文字列が文字列リストに含まれる	s in aStringList
データフレームの選択した列の標準偏差を計算する	df[['列A', '列B']].std()
実数で実数を整数除算する	x // y
カラムの統計量	df['列A'].describe()
分子と分母から有理数を新規生成する	fractions.Fraction(分子, 分母)
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
グラフ中のフォントをする	sns.set(font=フォント名)
棒グラフをアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='aquamarine')
数列とリストの散布図を描画して、マーカーを三角に変更する	plt.plot(データ列x, データ列y, marker='^')
正規表現を事前にコンパイルする	re.compile(pattern)
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
オレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
▽印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
データフレームのある列の欠損値を直後の値に設定する	df['列A'].fillna(method='bfill')
xを実数に変換する	float(x)
指定した列の中にいくつ日付データがあるか数える	df['列A'].isin([value]).sum()
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
ゼロ埋めされた複素数型の行列	np.zeros(要素数, dtype=bool)
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
アクアマリン色としてヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
option: 暗い赤色を使う	color = 'darkred'
データフレームの指定したカラムの欠損値を平均値で埋める	df['列A'].fillna(df['列A'].mean())
グラフ中の(x,y)の場所に補足を表示する	plt.legend(loc=(x, y))
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
実部と虚部から複素数	complex(x, y)
クラス分類をランダム性を強化したランダムフォレストでする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
黒い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームの一部のカラムが正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
散布図を赤い星マーカーでプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
メディアンでデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(df['列A'].median())
オプションでファイルに出力する	file = sys.open(filename, 'w')
辞書にキーワード引数で加えて、更新する	aDict.update(**kwargs)
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
文字列を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図を星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*')
散布図を下三角印を使い、描画する	plt.scatter(データ列x, データ列y, marker='v')
データフレームの選択したカラムのNaNを50パーセンタイルで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
実数がNaNかどうか調べる	math.isnan(x)
データフレームから重複ありでランダムに100行をサンプリングする	df.sample(100, replace=True)
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
文字列が平仮名かどうかテストする	('ぁ' <= ch <= 'ん')
白にヒストグラムの色を設定する	plt.hist(データ列, color='white')
文字列中に部分文字列がいくつか存在するかカウントする	s.count(sub)
文字列を末尾から空白で区切る	s.rsplit()
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
半透明の点線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
ユニークな値を要素とするベクトル	np.unique(aArray)
リストの散布図を描画する	plt.scatter(データ列x, データ列y)
横棒グラフをミッドナイトブルー色を使って描画する	plt.barh(データ列x, データ列y, color='midnightblue')
リストのオブジェクトの位置をエラーなく求める	aList.index(element) if element in aList else -1
三角印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
日付データの日	aDate.day
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
option: ダークオリーブグリーンを使う	color = 'darkolivegreen'
タプルのn番目からn2番目の部分	aTuple[n:n2]
日付時刻データにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
データフレームのKurtosis	df.kurt()
列をビン数nを用いてビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: ゴーストホワイトを用いる	color = 'ghostwhite'
青紫色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
グラフの用途をポスターにする	sns.set(context='poster')
データフレームの列を千の位で丸める	df['列A'].round(-3)
ある列で破壊的に昇順にデータフレームをソートする	df.sort_values(by='列A', ascending=True, inplace=True)
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
'A'列の値がxに等しい行を抽出する	df[df['列A'] == x]
ベクトルの列	aArray[:, 列番号]
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
option: 茶色色を使う	color = 'brown'
アルファベットから一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
縦軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
ダークスラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
ある列の文字列が部分文字列で終わる行を選ぶ	df[df['列A'].str.endswith(部分文字列)]
option: コーンズシルク色を用いる	color = 'cornsilk'
リストとしてデータフレームのある列を抽出する	df['列A'].values.tolist()
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
行列の和	aArray + aArray2
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
数列とリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
縦棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategray'
データ列のユニークな値を見る	ds.unique()
グラフの凡例の場所を指定する	plt.legend(loc=(x, y))
データフレームの選択したカラムの空文字を欠損値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
縦棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
option: ドジャーブルー色を使う	color = 'dodgerblue'
縦棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
ランダムにデータフレームから5行を取り出す	df.sample(5)
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()
リストとリストについての散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフの色を赤に変更する	plt.plot(データ列x, データ列y, color='red')
シルバー色としてヒストグラムを描画する	plt.hist(データ列, color='silver')
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
配列と配列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
リストと配列についての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
option: ロージーブラウン色を使う	color = 'rosybrown'
菱形マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
PLSで回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ヒストグラムの色をアクアマリンに指定する	plt.hist(データ列, color='aquamarine')
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
ファイルパスからストリームを読み込み、fileとする	file = open(filepath)
範囲から配列	np.linspace(最小値, 最大値, 要素数)
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
ヒストグラムの色をビスクに指定する	plt.hist(データ列, color='bisque')
リストとイテラブルについて散布図をプロットして、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
option: ミディアムスレートブルー色を用いる	color = 'mediumslateblue'
部分文字列か判定する	sub in s
日付データにn分分、加える	aDate + datetime.timedelta(minutes=n)
リストとイテラブルについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgrey')
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: スラグレー色を使用する	color = 'slategray'
数値を水色で表示できる文字列にする	f'\033[36m{value}\033[0m'
レモンシフォンにヒストグラムの色をする	plt.hist(データ列, color='lemonchiffon')
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
データフレームの指定の列に重複があれば、ドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ベージュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
黒い△マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
実数の正弦の逆数を計算する	math.asin(x)
折れ線グラフの色を深紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
nを八進表記に変換する	oct(n)
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
箱髭図を描画して平均線を加える	plt.boxplot(データ列, meanline=True)
データフレームの数値を一度に小数点以下n桁で四捨五入する	df.round(n)
二数の最大値	max(x, y)
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
文字列の開始位置以降が部分文字列で始まる	s.startswith(sub, start)
タイムスタンプデータの曜日を見る	aDatetime.weekday()
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
n2がnより大きくかつn3未満か確認する	n < n2 and n2 < n3
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
０で全要素を初期化した８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int8)
双方向キューのn番目を見る	deq[n]
グラフの凡例を表示する	plt.legend()
白色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
配列の移り変わりを色付きの破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
スクリプトの名前	sys.argv[0]
実行時に標準出力がパイプか確認する	not sys.stdout.isatty()
ファイルパスを文字列の示すエンコーディングを使って追加できるように開く]	open(filepath, mode='a', encoding=s)
双方向キューのn番目に要素を差し込む	deq.insert(n, element)
ブラウン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
折れ線グラフに左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
データシリーズの中にある文字列の合計を求める	ds.isin([value]).sum()
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
データフレームのあるカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
配列の型	aArray.dtype()
option: ライトイエローにフォントの色を設定する	color = 'lightyellow'
xを文字列にする	str(x)
折れ線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
英文字からひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
タプルとタプルを接続する	aTuple + aTuple2
フローラルホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
常用対数	math.log10(x)
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
プロットで使用するy座標のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
ロバストな単回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
ダークオレンジにヒストグラムの色を設定する	plt.hist(データ列, color='darkorange')
散布図に青い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
縦棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
散布図をライムグリーン色として描画する	plt.scatter(データ列x, データ列y, color='limegreen')
標準出力を使用する	sys.stdout
option: 区切り記号をカンマにする	sep = ','
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
文字列中に部分文字列が含まれないか	sub not in s
カウンタをセットにする	set(aCounter)
ヒストグラムをダークシアン色として描画する	plt.hist(データ列, color='darkcyan')
配列とリストについての散布図に黒い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームの選択したカラムが正規分布からどの程度、歪んでいるか見る	df[['列A', '列B']].kurt()
ホワイトスモークにヒストグラムの色を設定する	plt.hist(データ列, color='whitesmoke')
文字列はPythonのキーワードか	keyword.iskeyword(s)
データシリーズの分散	ds.var()
ふたつの集合に共通する要素からなる集合を求める	aSet.intersection(aSet2)
データフレームの中のカラムを等間隔でn個にビンニングする	pd.cut(df[col], n)
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
リストと配列についての散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
データフレームの棒グラフをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
最後のエントリを辞書から取り出す	aDict.popitem()
データ列を箱ひげ図として作図する	plt.boxplot(データ列)
赤い丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o', c='r')
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
リストをダミー変数に変換する	pd.get_dummies(リスト)
シルバー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
カウンタをリストをカウントして、更新する	aCounter.update(iterable)
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
書き込みモードでファイルをオープンする]	open(filepath, mode='w')
文字列中に部分文字列が含まれるか	sub in s
イテラブルとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
デピンク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
散布図のマーカーを下三角印にする	plt.scatter(データ列x, データ列y, marker='v')
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
二つのカウンタの共通する要素を求める	aCounter & aCounter2
文字列の中でケースを無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
線グラフの色をダークグリーンにする	plt.plot(データ列x, データ列y, color='darkgreen')
赤い左三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
2つの実行結果を改行せず出力する	print(value, value2, end='')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
リストのn番目以降の部分を取り出す	aList[n:]
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
辞書を多重集合に変換する	collections.Counter(aDict)
データシリーズの中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
option: バイオレット色を使用する	color = 'violet'
ヒストグラムをティール色として描画する	plt.hist(データ列, color='teal')
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
ヒストグラムの色をミディアムスレートブルーにする	plt.hist(データ列, color='mediumslateblue')
日付データが木曜日か調べる	aDate.weekday() == 3
リストをひとつ飛ばしで抽出する	aList[::2]
UTF8で既存のファイルパスを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
表計算ファイルからデータフレームを読む	pd.read_excel('file.xlsx')
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
セットをリストにする	list(aSet)
折れ線グラフのポイント印の色を指定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データフレームのカラムの積立相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
折れ線グラフを紺色を用いて描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: エンコーディングをEUCに指定する	encoding = 'euc_jp'
1文字分標準入力から読む	sys.stdin.read(1)
ヒストグラムをチョコレート色として描画する	plt.hist(データ列, color='chocolate')
フローラルホワイト色でヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
配列の各要素の積	np.multiply(aArray, aArray2)
線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgrey')
ファイルのストリームを使う	open(filepath)
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
nがn2未満またはn3以上か調べる	n < n2 or n >= n3
縦軸の目盛りを対数に変更する	plt.yscale('log')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
option: フォントの色をホワイトスモークに設定する	color = 'whitesmoke'
数のn乗	pow(x, n)
棒グラフをオレンジレッド色を使って描画する	plt.bar(データ列x, データ列y, color='orangered')
JSONを使用する	import json
option: 淡いピンク色にグラフの色を設定する	color = 'lightpink'
度数分布図の描画し、、正規化する	plt.hist(データ列, density=True)
データ列をビン数nでビン分割する	pd.cut(ds, n)
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
折れ線グラフの星マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ある列の文字列が部分文字列で終わる行を取り出す	df[df['列A'].str.endswith(部分文字列)]
rgbの四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
実数の整数部	math.modf(x)[1]
正規分布かどうか仮説検定する	scipy.stats.shapiro(df['列A'])
オブジェクトがバイト列型かどうか調べる	isinstance(obj, bytes)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
option: フォントの色をオーキッドに設定する	color = 'orchid'
option: サドルブラウン色を使用する	color = 'saddlebrown'
数列の出現頻度を作図する	plt.hist(データ列)
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
線グラフの色を赤に変更する	plt.plot(データ列x, データ列y, color='red')
ヒストグラムの色をブランチドアーモンドにセットする	plt.hist(データ列, color='blanchedalmond')
データフレームの列名をリストで置き換える	df.columns = columns
日付データにn週間を加算する	aDate + datetime.timedelta(weeks=n)
マップから最後に追加した項目をポップする	aDict.popitem()
ホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
ヒストグラムの色をサドルブラウンに変更する	plt.hist(データ列, color='saddlebrown')
文字列中のひらがなをカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
option: 決定木の深さを制限する	maxdepth = n
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: オレンジにフォントの色を設定する	color = 'orange'
エンコーディング	sys.getdefaultencoding()
ミディアムオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
横棒グラフを貝殻色を用いて描画する	plt.barh(データ列x, データ列y, color='seashell')
option: マーカーの色をブラウンにする	markerfacecolor = 'brown'
L1ノルムとして正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
実部と虚部から複素数を作る	complex(x, y)
ある列の値がxに等しく、かつ別の列の値がyに等しいデータを取り出す	df[(df['列A'] == x) & (df['列B'] == y)]
ファイルを開いて]、バイナリストリームを使う	open(filepath, mode='rb')
ベクトルの行ごとの平均値	np.mean(aArray, axis=1)
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
横棒グラフをダークゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
カラムの値が欠損値	df['列A'].isna()
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
文字列を左寄せにする	s.ljust(文字列幅)
カウンタ同士で積集合	aCounter & aCounter2
プロットを画面用に設定する	sns.set(context='notebook')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
実数の平方根を求める	math.sqrt(x)
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
散布図をシアン色として描画する	plt.scatter(データ列x, データ列y, color='cyan')
文字列を右寄せにする	s.rjust(文字列幅)
ファイルの拡張子付きのファイル名	os.path.basename(filepath)
８進数字を全部使う	string.octdigits
日付データが何年か知る	aDate.year
外れ値を除いたカラムの算術平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
パラメータから名前付きタプルをインスタンス化する	C._make(パラメータ)
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
区間から行列	np.linspace(最小値, 最大値, 要素数)
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
２つの列からグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
列の全順列	itertools.permutations(iterable)
option: ダークカーキに色を設定する	color = 'darkkhaki'
要素は集合のメンバーでないか調べる	element not in aSet
実数を実数で割って、切り捨てる	x // y
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgrey')
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
データフレームにおいてどの値が頻出か見る	df.mode()
列名を指定して二つのデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
整数nの二進表現	bin(n)
黒い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームの選択した列の欠損値をその最小値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
カウンタ	collections.Counter()
ひとつ置きにタプルを取り出す	aTuple[::2]
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
数値をキューの先頭に入れる	deq.appendleft(element)
データフレームを並べ、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
グラフの名前を指定する	plt.title('グラフの名称')
データ列のヒストグラムを描画する	plt.hist(データ列)
二つの実行結果をコロンで区切ってプリントする	print(value, value2, sep=':')
データ列とリストについての散布図にrgbのバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
配列を累積した列を得る	itertools.accumulate(iterable, operator.mul)
双方向キューの先頭にシーケンスの要素を追加する	deq.extendleft(iterable)
シスルにヒストグラムの色を設定する	plt.hist(データ列, color='thistle')
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
リストとリストの散布図を描いて、ダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
あるカラムの値がx以下の行を取り出す	df[df['列A'] <= x]
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
異なる列をキーとしてデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
浮動小数点数が正の数か	x > 0
グラフを表示する	plt.show()
数式の積分を行う	sympy.integrate(e)
option: スカイブルー色を使う	color = 'skyblue'
データフレームの選択した列の欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
区切りによって文字列を区切って、列挙する	s.split(sep)
配列の行ごとの合計値	np.sum(aArray, axis=1)
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
データフレームをカンマ区切りのファイルから読み込む	pd.read_csv('file.csv', sep=',')
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
リストを累積する	itertools.accumulate(iterable, operator.mul)
オブジェクトは辞書型か	isinstance(obj, dict)
線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
配列を2次元1行に変形する	aArray.reshape(1, -1)
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
ヒストグラムをシエナ色を用いて描画する	plt.hist(データ列, color='sienna')
リストの合計値	sum(aList)
列を無限に繰り返す	itertools.cycle(iterable)
値を紫色にする	f'\033[35m{value}\033[0m'
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
ダークシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
折れ線グラフの上三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ドジャーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
縦棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
折れ線グラフに青い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
リストの中の最大値	max(aList)
データフレームのカラムの一意な値の個数	df[col].nunique()
文字列を大文字に変換する	s.upper()
データシリーズの欠損値を後の行の値に設定する	ds.fillna(method='bfill')
指定した列のカテゴリで集計し、それぞれの標準偏差を求める	df.groupby('列A').std()
三数の最大値を算出する	max(x, y, z)
カラムの平均の標準誤差を計算する	scipy.stats.sem(df['列A'])
シーケンスを累加したイテラブル	itertools.accumulate(iterable)
非数を使う	math.nan
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
ファイルからの入力ストリームを使う	open(filepath)
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データフレームの選択したカラムの分散	df[['列A', '列B']].var()
文字列を白色にする	f'\033[37m{value}\033[0m'
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
グラフで使用するフォントを指定する	sns.set(font=フォント名)
タイタニックのデータセットをロードする	df = sns.load_dataset('titanic')
標準入力から1行受け取る	input()
データフレームの形状	df.shape
データフレームの一部の列のパーセンタイル	df[['列A', '列B']].quantile(パーセント/100)
ファイル全体を行分割して読み込む	f.readlines()
option: ミッドナイトブルー色を使う	color = 'midnightblue'
ファイルパスを追加モードを用いてオープンする]	open(filepath, mode='a')
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
入力から二つの浮動小数数値を読む	A, B = map(float, input().split())
散布図の印の線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
横棒グラフをシスル色を使って描画する	plt.barh(データ列x, データ列y, color='thistle')
有理数を使用する	import fractions
スピアマン順位相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
時刻をインポートする	import datetime
二次元リストをflattenする	sum(aList)
オブジェクトのプロパティの値を使う	getattr(obj, プロパティ名)
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
option: スラグレーを用いる	color = 'slategrey'
主成分分析で多次元データを淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
複数のデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
文字列の右端から空白を取り除く	s.rstrip()
n割るmの分数表現	fractions.Fraction(numerator=n, denominator=m)
線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームが重複しているかテストする	df.duplicated()
ミスティローズ色でヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
カウンタの全回数	aCounter.total()
イテラブルと配列について散布図を描画して、マーカーを右三角に変更する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
表データから一つのカラムのみ取り出す	df[['列A']]
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームの数値をまとめて整数に丸める	df.round()
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
マゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
オブジェクトはあるクラスか調べる	isinstance(obj, クラス)
option: 小麦色にグラフの色を変更する	color = 'wheat'
折れ線グラフの菱形マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
データフレームの選択したカラムの欠損値をxに増やす	df[['列A', '列B']].fillna(x)
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
TSVファイルから文字コードを指定してデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
散布図をミディアムアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
文字列を積極的に小文字にする	s.casefold()
nをn2でわる	n / n2
ペールグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
データフレームの選択した列の未入力値を前の行の値で埋める	df[['列A', '列B']].fillna(method='ffill')
縦棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
実数の自然対数を求める	math.log(x)
option: マーカーの色をダークブルーにする	markerfacecolor = 'darkblue'
縦軸の目盛を表示しない	plt.yticks([])
データフレームのあるカラムを十の位で丸める	df['列A'].round(-1)
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
option: 耐火レンガを使う	color = 'firebrick'
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgray')
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
文字列を部分文字列で分割して、文字列リストにする	s.split(sub)
データフレームの列の名前を列挙する	df.columns
指定した列のカテゴリで集計し、それぞれの最大値を求める	df.groupby('列A').max()
シート名を指定してデータフレームをエクセルから読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
カテゴリ別で色付けして、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
データシリーズの標本標準偏差	ds.std(ddof=1)
ゼロ埋めされた三二ビット整数型の配列を初期化する	np.zeros(要素数, dtype=np.int16)
nからn2までの整数列	list(range(n, n2+1))
日付時刻データが何分か知る	aDatetime.minute
円グラフの特定の要素だけ目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
x軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
データフレームがどの程度、正規分布から尖っているか見る	df.skew()
ゴールド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
青い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
インディゴ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
データシリーズの中にいくつが存在するか数える	ds.isin([value]).sum()
実数を千の位で四捨五入する	round(x, -3)
折れ線グラフに黒い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
配列と配列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
異なる列をキーとして２つの表データを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
チップのデータセットからデータフレームを読み込む	df = sns.load_dataset('tips')
データフレームの指定したカラムが正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
option: カーキに色を設定する	color = 'khaki'
カウンタ同士で交わり演算する	aCounter & aCounter2
小数点数の双曲線余弦の逆数	math.acosh(x)
浮動小数点数を２乗する	x ** 2
ファイルを追加用に開いて]fとする	f = open(filepath, mode='a')
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
文字列が全て大文字	s.isupper()
ロードされたモジュールの一覧	sys.modules
文字列が片仮名	('ァ' <= ch <= 'ン')
縦棒グラフをスノー色として描画する	plt.bar(データ列x, データ列y, color='snow')
コーパスのバージョン	version = 'wcce2022-0.1'
option: スラグレー色を使用する	color = 'slategrey'
ファイルから追加ストリームを開き]、fとする	f = open(filepath, mode='a')
文字列をASCIIコード列に変換する	[ord(ch) for ch in s]
option: 改行コードをWindowsに設定する	newline = '\r\n'
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレームの指定したカラムの中にある文字列と文字列の合計を数える	df['列A'].isin([value, value2]).sum()
本日が何日か知る	datetime.datetime.today().day
データフレームの75パーセンタイル	df.quantile(0.75)
一点鎖線の折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームの重複を見る	df.duplicated()
外れ値に強い重クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
パールバイオレットレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
多次元尺度構成法の準備をする	model = sklearn.manifold.MSD(n_components=n)
ブール型の０で全要素を初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int32)
部分文字列かどうか調べる	sub in s
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
配列と同じ大きさの空の行列を初期化する	np.empty_like(aArray)
散布図の大バツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
辞書の全項目をクリアする	aDict.clear()
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
日付データが日付データより先	aDate < aDate2
二つの集合が集合と互いに素か確認する	aSet.isdisjoint(aSet2)
ヒストグラムをダーク・スラテグレー色として描画する	plt.hist(データ列, color='darkslategrey')
カウンタの項目一覧	aCounter.keys()
データシリーズのNaNを直前の値で補完する	ds.fillna(method='ffill')
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
リストとイテラブルの直積	itertools.product(iterable, iterable2)
実数の逆双曲線正接	math.atanh(x)
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
データフレームを関数によって集約して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
折れ線グラフの▼印の大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
上位集合か調べる	aSet.issuperset(aSet2)
ダークシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ふたつの列からグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
データフレームのあるカラムの分	df['列A'].dt.minute
データシリーズのタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
データフレームの選択したカラムを正規表現でまとめて置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
線グラフの色をダークターコイズに指定する	plt.plot(データ列x, データ列y, color='darkturquoise')
option: 紺碧を使う	color = 'azure'
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
組のn番目以降の部分を取り出す	aTuple[n:]
未入力値がある行を削除し、みる	df.dropna()
散布図の左三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
散布図をゴールド色を使って描画する	plt.scatter(データ列x, データ列y, color='gold')
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
ファイルをバイナリ書き込みモードとして開いて]、fとする	f = open(filepath, mode='wb')
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
データフレームのNaNをモードに設定する	df.fillna(df.mode().iloc[0])
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
配列とリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: NaNを無視しない	nan_policy = 'propagate'
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
紺色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
コマンドtextを実行する	os.system(text)
データフレームを指定した列によってグループ化し、記述統計量を算出する	df.groupby('列A').describe()
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
指定した列のカテゴリで集計し最小値を求める	df.groupby('列A').min()
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
クラス分類をバギングで行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
ブラック色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
ダークレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
句点文字を全部見る	string.punctuation
n×n2の二次元リストを作る	[[0] * n for _ in range(n2)]
折れ線グラフのポイントマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
ライトゴールドロディイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightgoldenrodyellow')
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
数列のピアソンの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
NaNも加えてデータフレームのあるカラムをベクトルに変換する	pd.get_dummies(df['列A'], dummy_na=True)
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
スラグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
カウンタ間でユニオン演算する	aCounter | aCounter2
折れ線グラフをミディアムアクアマリン色を使って描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
nがリストのどれかか	n in aList
折れ線グラフをライトサーモン色を使って描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
タプルのn番目の	aTuple[n]
配列の形状	aArray.shape
ヒストグラムを貝殻色を用いて描画する	plt.hist(データ列, color='seashell')
ライトグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
本日をタプルに変換する	datetime.datetime.today().timetuple()
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
option: 色を半透明にする	alpha = 0.5
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
option: 色をライムグリーンに変更する	color = 'limegreen'
折れ線グラフをライトサーモン色として描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
シーケンスを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
散布図の▽印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
整数が正の数か	x > 0
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
リストの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
欠損値がある行をドロップしてみる	df.dropna()
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフに赤い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
指定した列の中にがあるか調べる	df['列A'].isin([value])
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
重複を認めてランダムに5行をデータフレームからサンプリングする	df.sample(5, replace=True)
データフレームのカラム名をリストで置き換える	df.columns = columns
option: ライトコーラルにグラフの色を指定する	color = 'lightcoral'
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
サイコロ	random.randint(1, 6)
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
formatのパターンで文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
タプルを浅くコピーする	dict(aDict)
ヒストグラムの色をゴーストホワイトに指定する	plt.hist(データ列, color='ghostwhite')
データシリーズのNaNをxで埋める	ds.fillna(x)
菱形印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフのバツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
JSON形式の文字列をロードする	json.loads(jsonString)
option: フォントの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
異なる列をキーとして二つのデータフレームを全ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
文字列中に非小文字が含まれるか	any(not c.islower() for c in s)
集合から要素を全て除く	aSet.clear()
折れ線グラフを点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted')
現在が何秒か知る	datetime.date.today().second
option: 追加モードを使う	mode = 'a'
散布図の色を濃いシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
赤い四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c='r')
新しいサポートベクター分類器を作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
最大最小でデータをスケーリングする	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: ライム色を用いる	color = 'lime'
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
タプルの最後からn番目以前の部分を抽出する	aTuple[:-n]
最初のを外したデータフレーム	df[df.columns[1:]]
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
ライトスカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
データフレームの中にある文字列と文字列の数を数える	df.isin([value, value2]).sum()
折れ線グラフの色をサーモンに指定する	plt.plot(データ列x, データ列y, color='salmon')
整数nが配列のどれかか調べる	n in aArray
データ列のエポック秒を日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
縦棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
変数を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
棒グラフをバイオレット色で描画する	plt.bar(データ列x, データ列y, color='violet')
データフレームの指定したカラムを百の位で四捨五入する	df['列A'].round(-2)
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
数値を簡略にする	sympy.sympify(e)
行列の値	aArray[行番号, 列番号]
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
小麦色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
アリスブルー色でヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
option: 色をゴールドに変更する	color = 'gold'
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
項目名がマップに存在していない時、要素を追加する	aDict.setdefault(key, element)
option: 赤色を用いる	color = 'red'
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
スレートブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
インディアンレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
散布図をホワイトスモーク色として描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
データフレームの選択したカラムの中にいくつ未入力値が含まれるか調べる	df[['列A', '列B']].isna().sum()
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
実部と虚部から複素数を新規生成する	complex(x, y)
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
option: ゴールデンロッドにグラフの色を設定する	color = 'goldenrod'
未初期化の配列	np.empty(要素数, dtype=np.int)
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
カウンタの項目一覧を使う	aCounter.keys()
枠なしのデータラベルを入れる	plt.legend(frameon=False)
データシリーズのメディアンを求める	ds.median()
データフレームを表示するときヘッダー行を右寄せにする	pd.set_option('colheader_justify', 'right')
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
インプレースにキューの要素を反転する	deq.reverse()
データフレームの列からユニークな要素を抽出しリスト化する	df[col].unique().tolist()
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
データフレームの選択したカラムがどの程度、分散しているか見る	df[['列A', '列B']].var()
二つのデータフレームを横向きに一つにする	pd.merge(df, df2)
二変数の最大値	max(x, y)
折れ線グラフでデータフレームの列を可視化する	plt.plot(df[column], df[column])
プラットホームがWindowsかどうか調べる	sys.platform.startswith('win32')
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
数列の相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
データフレームの指定したカラムの中に文字列が存在するか調べる	df['列A'].isin([value])
黒い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
配列を等量で分割数nとしてビン分割する	pd.qcut(aArray, n)
両端キューの先頭	deq[0]
ローングリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
xが1、もしくは2か確認する	x == 1 or x == 2
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームの形状を確認する	df.shape
代数計算モジュールを使用する	import sympy
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
リストの全要素を取り除く	aList.clear()
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
リストと配列についての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
ヒストグラムの色をオールドレースに指定する	plt.hist(データ列, color='oldlace')
入力から二つの整数を読む	A, B = map(int, input().split())
両端キューから最初のデータを取り除く	deq.remove(element)
データシリーズのタイムゾーンを変更する	ds.tz_convert('Asia/Tokyo')
レモンシフォン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
散布図のマーカーの色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
データフレームの中にある日付データと文字列の数を求める	df.isin([value, value2]).sum()
ダークサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
等しい量になるようにn個に列を分割する	pd.qcut(ds, n)
オレンジレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
ミスティローズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
表をインポートする	import pandas as pd
最頻値でデータフレームの一部のカラムの欠損値を補う	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
nわるn2	n / n2
全シートをExcelファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=None)
リストの先頭を取り除く	aList[1:]
リストを分割数nとしてビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
表データの列をリネームする	df.rename(columns={'列A': '列a', '列B': '列b'})
縦棒グラフをモカシン色として描画する	plt.bar(データ列x, データ列y, color='moccasin')
データフレームをグループ化し、それぞれの平均値を求める	df.groupby('列A').mean()
リストとリストについて散布図を描画し、、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
配列とリストの散布図をプロットし、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データシリーズのモード	ds.mode()
行列の逆行列	np.linalg.inv(aArray)
プログラムのファイル名	sys.argv[0]
横棒グラフを描いてバーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ある列のカテゴリの平均値	df.groupby('列A').mean()
クラス分類を多層パーセプトロンで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
色付きの一点鎖線で線をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
度数分布図の描画して正規化する	plt.hist(データ列, density=True)
浮動小数点数の天井を計算する	math.ceil(x)
折れ線グラフの色をクリムゾンに変更する	plt.plot(データ列x, データ列y, color='crimson')
アンサンブル学習としてクラス分類を行う	sklearn.ensemble.VotingClassifier()
データシリーズのNaNを平均値で埋める	ds.fillna(ds.mean())
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
nを切り捨てながらn2分の1にする	n //= n2
データ列の移り変わりを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの選択したカラムの中にある文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategrey')
線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
option: 色をダークサーモンに指定する	color = 'darksalmon'
文字列中の大文字を小文字に変換する	s.lower()
ハッシュ値	hash(x)
option: 色をインディゴに指定する	color = 'indigo'
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
ヒストグラムの色を青緑に変更する	plt.hist(データ列, color='teal')
option: グラフの色をグレーに設定する	color = 'gray'
データフレームの列の各データは何回出現するか見る	df[col].value_counts()
option: 文字コードをUTF8に指定する	encoding = 'utf-8'
1行から二つの実数を取り出す	A, B = map(float, input().split())
空の集合	set()
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
三二ビット整数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=np.int16)
部分文字列が文字列の開始位置から先に含まれない	s.find(sub, start) == -1
小数点数とyの斜辺	math.hypot(x, y)
データフレームの欠損値を消す	df.dropna(inplace=True)
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
データフレームから列を三つ選択する	df[['列A', '列B', '列C']]
縦棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
縦棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
折れ線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
ファイルからストリームを求める	open(filepath)
文字列内にひとつでも数字が含まれるかどうか調べる	any(c.isdigit() for c in s)
ベクトルの行ごとの合計	np.sum(aArray, axis=1)
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
部分文字列が文字列の開始位置からと終了位置の間にあるか調べる	s.find(sub, start, end) != -1
縦棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
全要素を０で初期化した行列	np.zeros(行数, 列数)
折れ線グラフに大バツマーカーを加える	plt.plot(データ列x, データ列y, marker='X')
散布図の△印の色を指定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列の右側から範囲を指定して部分文字列を探す	s.find(sub, start, end)
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームをグループ化し、あるカラムの要約統計量を計算する	df.groupby('列A').describe()['列B']
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
option: グラフの色をアイボリーに設定する	color = 'ivory'
実数の逆正接	math.atan(x)
行列の累積和	np.cumsum(aArray)
シルバー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
真スーパーセットかどうか確認する	aSet > aSet2
両端キューに要素をエンキューする	deq.appendleft(element)
フォーマットとしてデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
ヒストグラムの色をスラグレーにする	plt.hist(データ列, color='slategray')
タプルのそれぞれを関数でフィルタする	filter(func, iterable)
文字列の無限なイテラブル	itertools.repeat(element)
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
ある列に重複があれば、除く	df.drop_duplicates(subset='列A', inplace=True)
辞書からキーで指定された項目をポップする	aDict.pop(key)
CSVファイルを使ってデータフレームを出力する	df.to_csv('file.csv')
シーケンスを累加したイテラブルを得る	itertools.accumulate(iterable)
現在の秒数	datetime.date.today().second
散布図のバツ印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
データシリーズのタイムゾーンを日本に変更する	ds.tz_convert('Asia/Tokyo')
xが-9以上、9以下か調べる	-9 <= x <= 9
散布図の印を星にする	plt.scatter(データ列x, データ列y, marker='*')
n個の数値イテラブルを使う	range(n)
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
折れ線グラフの色をオレンジに指定する	plt.plot(データ列x, データ列y, color='orange')
八進数の文字列をbytesizeバイトのバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
散布図にクロスマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
option: ロイヤルブルーを使用する	color = 'royalblue'
数列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
一点鎖線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
二つの集合はセットと交わりを持たないかどうか	aSet.isdisjoint(aSet2)
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
データフレームをある列によって降順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
最初のコマンド引数	sys.argv[1]
option: 色をライトブルーに設定する	color = 'lightblue'
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
日付を表現した文字列をタイムスタンプ型に変換する	pd.to_datetime(日付を表現した文字列)
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
ライトシアンにヒストグラムの色を変更する	plt.hist(データ列, color='lightcyan')
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
線グラフをライム色として描画する	plt.plot(データ列x, データ列y, color='lime')
文字列から日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームの選択したカラムの欠損値を平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
書き込みモードを用いてファイルをオープンして]、fとする	f = open(filepath, mode='w')
配列と数列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
タプルのオブジェクトが最初に見つかる場所	aTuple.index(element)
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
箱ひげ図をプロットして平均線を追加する	plt.boxplot(データ列, meanline=True)
パールゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
スカイブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
データフレームから数値データの列だけ抽出する	df.select_dtypes('number')
データフレームの最初n行	df.head(n)
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
アルファベットの小文字を全部使う	string.ascii_lowercase
線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
データシリーズが正規分布からどの程度、尖っているか見る	ds.skew()
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
文字列がリストの要素か調べる	element in aList
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
文字列の中のASCII限定として正規表現による全マッチを使う	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
サドルブラウン色でヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
カテゴリ別で色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
option: グラフの種類を点線に変更する	linestyle = 'dotted'
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
データフレームのあるカラムを10の位で四捨五入する	df['列A'].round(-1)
現在のタイムスタンプ	int(time.time())
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
オプションで、出力先を標準エラーに指定する	file = sys.stderr
セットをタプルに変換する	tuple(aSet)
散布図を深紅色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
ある列ごとの平均値を求める	df.groupby('列A').mean()
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
配列と数列の散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
配列の歪みを計算する	scipy.stats.skew(配列, bias=False)
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
option: グラフの色をロージーブラウンに指定する	color = 'rosybrown'
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
データフレームのNaNを最小値に設定する	df.fillna(df.min())
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
option: アンティークホワイトを用いる	color = 'antiquewhite'
option: フォントの色をダークシアンに指定する	color = 'darkcyan'
データフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
option: フォントの色をフクシアに設定する	color = 'fuchsia'
行列の行列積	np.matmul(aArray, aArray2)
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
データフレームの中に含まれる日付データの合計を調べる	df.isin([value]).sum()
ヒストグラムにカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
文字列中に非数字が含まれるか判定する	any(not c.isdigit() for c in s)
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
スーパーセットもしくは等しいかテストする	aSet > aSet2
赤い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
スチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
リストは全て真か調べる	all(aList)
縦棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
現在の日付時刻	datetime.datetime.today()
option: ダークグリーン色を使用する	color = 'darkgreen'
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
シーケンスを配列にする	np.array(iterable)
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
データ列の推移を折れ線プロットとして作図する	plt.plot(range(len(データ列)), データ列)
ピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
横棒グラフをダーク・スラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
option: グラフの色をミスティローズに変更する	color = 'mistyrose'
折れ線グラフをディムグレー色を使って描画する	plt.plot(データ列x, データ列y, color='dimgray')
貝殻色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
リストを逆さにする	reversed(aList)
部分文字列を文字列の先頭から探す	s.find(sub)
変数を赤色にする	f'\033[31m{value}\033[0m'
データフレームの選択した列の中にある文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
整数nを八進文字列に変換する	oct(n)[2:]
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
正規分布にしたがって配列をランダムに生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
year年day月のタイムスタンプ	datetime.datetime(year=year, month=month, day=1)
データフレームの列の名前の一覧を使う	df.columns
多次元データを多次元尺度構成法で淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームをあるカラムによって整列する	df.sort_values(by='列A')
線グラフを半透明の一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
フォレストグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ミディアムオーキッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
折れ線グラフのダイアモンドマーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
暗く色をプロットの描画で用いる	sns.set(pallete='dark')
タイムスタンプデータの時間数	aDatetime.hour
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
カウンタの最も頻出のキー	aCounter.most_common()[0]
表データのあるカラムが何年か調べる	df['列A'].dt.year
コンビネーション	math.comb(n, k)
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
パウダーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
散布図を白色として描画する	plt.scatter(データ列x, データ列y, color='white')
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
nがn2よりも大きいか判定する	n > n2
組の中の一番大きい値	max(aTuple)
ヒストグラムをダークカーキ色として描画する	plt.hist(データ列, color='darkkhaki')
オブジェクトはリストに含まれるか調べる	element in aList
アクア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
option: マーカーの大きさを指定する	markersize = 2.0
ピーチパフ色でヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
xが1、もしくは2もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
追加モードとしてファイルをオープンする]	open(filepath, mode='a')
option: オリーブ色を使用する	color = 'olive'
ヒストグラムをライトブルー色を用いて描画する	plt.hist(データ列, color='lightblue')
文字列をプリントする	print(value)
縦棒グラフを描画して、棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフにバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
変数について数式を積分する	sympy.integrate(e, z)
ライトスレイグレー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
データ列と配列についての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
ヒストグラムを淡いピンク色色を用いて描画する	plt.hist(データ列, color='lightpink')
未定値	None
コーンズシルク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
nがn2よりも大きいかどうか調べる	n > n2
option: フォントの色をグリーンに変更する	color = 'green'
整数nがリストのどれかか調べる	n in aList
CSVからデータフレームを読み込む	pd.read_csv('file.csv', sep=',')
グラフにy=0の点線を設定する	plt.axhline(y=0, linestyle='dotted')
カウンタのユニークな値を列挙する	list(aCounter)
タイタニック号のデータセットからデータフレームを読み込む	df = sns.load_dataset('titanic')
文字列を部分文字列で分割した時の後半の文字列を取り出す	s.partition(sub)[-1]
ファイルをバイナリモードで開く]	open(filepath, mode='rb')
リストが空でないか	len(aList) != 0
インデント幅nで、辞書をJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
疑似乱数	random.random()
自然数最小公倍数	math.lcm(n, n2)
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
xが1、もしくは2か調べる	x == 1 or x == 2
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
イテラブルから多重集合を作る	collections.Counter(iterable)
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
データフレームをカンマ区切り形式にインデックスを付けず保存する	df.to_csv('file.csv', index=None)
線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
データシリーズの値が未入力値か	ds.isna()
日付時刻データが木曜日	aDatetime.weekday() == 3
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
option: オレンジ色を使用する	color = 'orange'
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
データフレームのカラムをリネームする	df.rename(columns={'列A': '列a', '列B': '列b'})
nのバイト長	(n.bit_length() + 7) // 8
ふたつの集合が互いに素	aSet.isdisjoint(aSet2)
オレンジ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
散布図をシーグリーン色として描画する	plt.scatter(データ列x, データ列y, color='seagreen')
パスのセパレータ記号を用いる	os.sep
option: 改行しないように設定する	end = ''
折れ線グラフを色付きの点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
各カテゴリごとにデータフレームの棒プロットを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
データフレームの一部の列の中に日付データとがある	df[['列A', '列B']].isin([value, value2])
データフレームの一部のカラムの第三四分位数	df[['列A', '列B']].quantile(0.75)
ファイルを絶対パスにする	os.path.abspath(filepath)
横棒グラフをライトグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightgray')
実線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
散布図の印の太さを変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
ある列の文字列が部分文字列で始まらない行を抽出する	df[~ df['列A'].str.startswith(部分文字列)]
option: シアン色を用いる	color = 'cyan'
nがn2以下	n <= n2
要素が辞書の値に含まれていない	element not in aDict.values()
ファイルを文字コードtextで書き込み用に開く]	open(filepath, mode='w', encoding=text)
単位行列を作る	np.eye(行数, 列数)
四角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
文字列を正規表現で分割する	re.split(pattern, s)
数列を箱ひげ図として描画する	plt.boxplot(データ列)
プログラムを強制的に止める	sys.exit()
現在が火曜日か確認する	datetime.datetime.today().weekday() == 1
黒い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
ゲインズボロ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
紺にヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
option: ダークオレンジを使う	color = 'darkorange'
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
ファイルから追加ストリームを開いて]、fとする	f = open(filepath, mode='a')
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
散布図の三角印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
カデットブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
2進数の文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
データフレームの値をValueMapで一度に置換する	df.replace(ValueMap)
文字列の右側から改行を取り除く	s.rstrip('\n')
ゴーストホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
ファイルを読み込みモードとしてオープンする]	open(filepath, mode='r')
文字列を最初の部分文字列で二つに区切って、前半の文字列を使う	s.partition(sub)[0]
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
散布図をドジャーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
入力ストリーム全体を行ごとに分割してリストにする	[s.strip() for s in f.readlines()]
整数を二乗する	x ** 2
ふたつの辞書を結合する	aDict | aDict2
option: 白を使う	color = 'white'
折れ線グラフの色をプラムに指定する	plt.plot(データ列x, データ列y, color='plum')
縦棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームの中の列をn個に等間隔でビン分割する	pd.cut(df[col], n)
データフレームのあるカラムの母標準偏差	df['列A'].std(ddof=0)
option: コーラル色を使う	color = 'coral'
線グラフの色をオレンジレッドに指定する	plt.plot(データ列x, データ列y, color='orangered')
データフレームのstart行目からend行目まで選択する	df[start:end]
option: グレー色を使う	color = 'gray'
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
ダークシアグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
円周率を使う	math.pi
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
縦軸だけグリッド線	plt.grid(axis='y')
option: フローラルホワイトに色を設定する	color = 'floralwhite'
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
折れ線グラフの色をネイビーに指定する	plt.plot(データ列x, データ列y, color='navy')
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
コマンドライン引数	sys.argv
空の双方向キューを準備する	collections.deque()
横棒プロットの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
チョコレート色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
符号付きでnをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
平均値と標準偏差から疑似乱数を計算する	random.normalvariate(mu=0.5, sigma=0.2)
折れ線グラフの色をゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='goldenrod')
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
アルファベットの大文字を全部使う	string.ascii_uppercase
列の一意な値の個数	df[col].nunique()
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
nが奇数か調べる	n % 2 == 1
日付データをISO8601書式の文字列にする	aDate.isoformat()
ダーク・スラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ロイヤルブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
集合の浅いコピーを作る	aSet.copy()
ISO書式の文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
横棒グラフを珊瑚色として描画する	plt.barh(データ列x, データ列y, color='coral')
データ列の偏りを対数変換する	np.log(データ列)
二つのデータフレームを列名を指定して内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
option: コーラルにグラフの色を設定する	color = 'coral'
データフレームの指定したカラムの未入力値を前の行の値に設定する	df['列A'].fillna(method='ffill')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
無限に文字列が繰り返すイテラブルを求める	itertools.repeat(element)
値をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
下三角印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
サポートベクターマシンで回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ホワイトスモーク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
大文字・小文字を無視してパターンを前もってコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データフレームを百の位で丸めて、整数型にする	df.round(-2).astype(int)
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
縦棒グラフをトマト色として描画する	plt.bar(データ列x, データ列y, color='tomato')
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
折れ線グラフの色をグリーンイエローに指定する	plt.plot(データ列x, データ列y, color='greenyellow')
option: どの列もインデックスに設定しない	index_col = None
データシリーズの欠損値を最小値に設定する	ds.fillna(ds.min())
本日が日曜日か確認する	datetime.datetime.today().weekday() == 6
回帰分析をロバスト推定として行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
線グラフの色をバリーウッドに変更する	plt.plot(データ列x, データ列y, color='burlywood')
データフレームが正規分布からどの程度歪んでいるか見る	df.kurt()
折れ線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
パターンに大文字・小文字を無視して文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
リストの最後を捨てる	aList[:-1]
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
リストをイミュータブルにする	tuple(aList)
オブジェクトの属性の値を指定する	setattr(obj, プロパティ名, 値)
ライトスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
データフレームのあるカラムの歪度	df['列A'].kurt()
ライトスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
文字列が全てアルファベットか調べる	s.isalpha()
option: ダークマゼンタ色を使う	color = 'darkmagenta'
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
数式を数値に変換する	float(e)
nが3の倍数かどうか判定する	n % 3 == 0
要素が集合の要素でないかどうか調べる	element not in aSet
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
データシリーズの文字列を欠損値に変換する	ds.replace(値, np.nan)
配列のピアソンの相関係数を計算する	scipy.stats.pearsonr(配列, 配列2)
データフレームのカラムの中に文字列とがいくつあるか数える	df['列A'].isin([value, value2]).sum()
線グラフの色をオールドレースに変更する	plt.plot(データ列x, データ列y, color='oldlace')
文字列の先頭から部分文字列を取り除く	s.lstrip(sub)
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
ヒストグラムの色をライトサーモンに変更する	plt.hist(データ列, color='lightsalmon')
０で全要素を初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
本日が木曜日かどうか	datetime.datetime.today().weekday() == 3
データフレームの中のカラムをリストを境界値としてビン分割する	pd.cut(df[col], aList)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
標準出力を使う	sys.stdout
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
最大長nの双方向キューを列から作る	collections.deque(iterable, maxlen=n)
イテラブルを無限に繰り返す	itertools.cycle(iterable)
リストとデータ列についての散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームの選択した列の不偏標準偏差を求める	df[['列A', '列B']].std()
option: グリーンイエロー色を用いる	color = 'greenyellow'
n×n2の２次元リスト	[[0] * n for _ in range(n2)]
カテゴリ列で色付けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
バギングを用いてクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
Pandasのバージョンを見る	print(pd.__version__)
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
option: △印を使う	marker = '^'
option: バイナリ用に設定する	mode = 'rb'
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
kを底とする対数	math.log(x, k)
データフレームの累積分布をプロットする	sns.ecdfplot(x='列名', data=df)
アリスブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
指定した列のカテゴリで集計し最大値を求める	df.groupby('列A').max()
rgbの左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
xの小数点以下'4'桁までプリントする	print(':.4f'.format(x))
クラスが名前付きタプルかどうか調べる	issubclass(C, tuple)
横棒グラフを暗い赤色を用いて描画する	plt.barh(データ列x, データ列y, color='darkred')
黒いダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
貝殻色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
折れ線グラフの丸印の色を変える	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
線グラフをナバホホワイト色として描画する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームを見る	df.head()
option: フォントの色をカデットブルーに設定する	color = 'cadetblue'
散布図をrgbのポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
指定したカラムの中に含まれる文字列の合計を数える	df['列A'].isin([value]).sum()
カウンタ同士で共通部分を求める	aCounter & aCounter2
イテラブルを多重集合に変換する	collections.Counter(iterable)
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
データシリーズの年度を使う	ds.dt.year
Pythonパスの一覧	sys.path
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
折れ線グラフをパールバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='palevioletred')
option: マーカーの色を真紅にする	markerfacecolor = 'crimson'
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
散布図のクロス印の大きさを変える	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
改行なしに変数を表示する	print(value, end='')
文字列の両端から不要な空白を取り除く	s.strip()
配列の標準誤差	scipy.stats.sem(配列)
ブランチドアーモンド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
グリッド線	plt.grid(alpha=0.5)
グラフ中の(x,y)の位置に簡単な説明を表示する	plt.legend(loc=(x, y))
算術計算ライブラリをインポートする	import math
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
範囲を指定して乱数を得る	random.randint(最小値, 最大値)
データを最大最小として標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: ミディアムターコイズ色を用いる	color = 'mediumturquoise'
線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
縦棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
option: ダークオーキッドを使う	color = 'darkorchid'
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategrey')
線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
predicateFuncが真となる列の要素	itertools.takewhile(predicateFunc, iterable)
第２引数で指定されたファイルの名前	sys.argv[1]
部分文字列を文字列中から見つける	s.find(sub)
実行時の標準出力の出力先がターミナルかどうか調べる	os.isatty(sys.stdin.fileno())
ダークマゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
実数の正接の逆数を求める	math.atan(x)
ヒストグラムの色をパレットトルコイズに変更する	plt.hist(データ列, color='paleturquoise')
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
文字列が全て識別子名か	s.isidentifier()
連続した配列の作成する	np.arange(開始値, 終了値, 等差)
マッピングからキーの値をエラーなく参照する	aDict.get(key, None)
データシリーズがどの程度、分散しているか見る	ds.var()
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
二つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
インディゴ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
散布図をブラック色として描画する	plt.scatter(データ列x, データ列y, color='black')
データフレームのカラムの不偏標準偏差を求める	df['列A'].std()
ミディアムスプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumspringgreen')
タプルをnから順序付けする	enumerate(aTuple, start=n)
要素をキューの最初から取り除く	deq.popleft()
データシリーズは何時か調べる	ds.dt.hour
実数が有限かどうか調べる	math.isfinite(x)
データシリーズの欠損値を中央値で置換する	ds.fillna(ds.median())
散布図の下三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: インディアンレッドを用いる	color = 'indianred'
グローバル変数の一覧	globals()
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
縦棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
変数について数式の積分を求める	sympy.integrate(e, z)
配列を等しい量になるようにビン数nで分割する	pd.qcut(aArray, n)
折れ線グラフの大バツマーカーの太さを変える	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
末尾から文字列を部分文字列で区切る	s.rsplit(sub)
データフレームの行リストを使う	df.index
データフレームの指定したカラムの中にいくつがあるかカウントする	df['列A'].isin([value]).sum()
option: デピンク色を使う	color = 'deeppink'
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームの列を目的変数にする	目的変数 = df['列名']
数字を全て見る	string.digits
整数の二乗	x ** 2
データフレームをグループ化し、ある列の要約統計量を計算する	df.groupby('列A').describe()['列B']
MeanSquaredErrorを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
配列の要素ごとに加算する	aArray + aArray2
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(配列)
option: ネイビーにグラフの色を指定する	color = 'navy'
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
option: 印をポイントに変える	marker = '.'
キューの値を左にn個分ローテンションする	deq.rotate(-n)
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
折れ線グラフに星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*')
データフレームを各列毎にグループ化して、文字列というグループの個数を計算する	df.groupby(column).size()[s]
データフレームのカラムを千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
横棒グラフの幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
データフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr()
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
辞書からキーの値か、もしくは要素を参照する	aDict.get(key, element)
データフレームの選択したカラムを千の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
ロバスト回帰モデルを準備する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
暗い赤色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
ヒストグラムをホワイトスモーク色として描画する	plt.hist(データ列, color='whitesmoke')
既存のファイルをUTF8で追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームを整列して下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
列を全て日付データに変換する	pd.to_datetime(df['列A'])
ベクトルの次元を変形する	aArray.reshape(行数, 列数)
日付時刻データが水曜日か	aDatetime.weekday() == 2
改行なしに文字列をプリントする	print(value, end='')
ヒストグラムを破線として描画する	plt.hist(データ列, linestyle='dashed')
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
文字列を特殊文字も含め小文字に変換する	s.casefold()
線グラフの色をミディアムオーキッドにセットする	plt.plot(データ列x, データ列y, color='mediumorchid')
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
JSONフォーマットのバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
横棒グラフをフォレストグリーン色として描画する	plt.barh(データ列x, データ列y, color='forestgreen')
option: マゼンタ色を使う	color = 'magenta'
0からnの範囲	range(n)
コマンド引数を列挙する	sys.argv[1:]
ガウス過程で回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
縦棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
配列とデータ列についての散布図に凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームを10の位で丸める	df.round(-1)
プロットを描画する	import matplotlib.pyplot as plt
ダーク・スラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
0から始まる無限整数イテラブル	itertools.count()
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
タプルの末尾のn要素を取り除く	aTuple[:-n]
データシリーズのNaNを後の行の値に指定する	ds.fillna(method='bfill')
標準入力から1行読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
列の各データ値の出現回数	df[col].value_counts()
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
イテラブルの各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
option: マーカーをバツに変更する	marker = 'x'
option: オリベドラブ色を使う	color = 'olivedrab'
大バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
商と余りを同時に計算する	divmod(x, y)
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
リストを緑色で表示できる文字列に変換する	f'\033[32m{value}\033[0m'
横棒グラフをロイヤルブルー色として描画する	plt.barh(データ列x, データ列y, color='royalblue')
データシリーズをタイムスタンプに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
棒グラフをインディアンレッド色として描画する	plt.bar(データ列x, データ列y, color='indianred')
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
符号なし８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
符号付きで整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
プロットのカラーパレットを濃くする	sns.set(pallete='deep')
ライトグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
option: 箱髭図に平均を加える	showmeans = False
ふたつの集合の和集合を使う	aSet.union(aSet2)
ディムグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
option: ダークスレートブルーに色を設定する	color = 'darkslateblue'
nを符号付きでバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
option: グラフの色をダークマゼンタに指定する	color = 'darkmagenta'
横棒グラフをモカシン色として描画する	plt.barh(データ列x, データ列y, color='moccasin')
option: ダークオリーブグリーンに色を指定する	color = 'darkolivegreen'
option: レベッカパープル色を用いる	color = 'rebeccapurple'
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
ゴーストホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
文字列が組に含まれるか確認する	element in aTuple
option: グラフの色をネイビーに設定する	color = 'navy'
リストのn番目以降の要素を取り出す	aList[n:]
xを文字列にしてファイルに書き込む	f.write(str(x))
データフレームの先頭100行	df.head(100)
グラフの縦軸を対数に変更する	plt.yscale('log')
データフレームの選択したカラムを小数点以下n桁で丸める	df[['列A', '列B']].round(n)
ファイルを書き込み用にEUCとして開く]	open(filepath, mode='w', encoding='euc_jp')
データフレームのある列の値がxに等しくない行を抽出する	df[df['列A'] != x]
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームをグループ化しある列に対し最大値を計算する	df.groupby('列A')['列B'].max()
ダークブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
連立方程式を解く	sympy.solve([e, e2])
ファイルパスをSJISでオープンする]	open(filepath, encoding='shift_jis')
データフレームの選択したカラムのどの値が頻出か見る	df[['列A', '列B']].mode()
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
データフレームのカラムが正規分布に従うか仮説検定する	scipy.stats.shapiro(df['列A'])
折れ線グラフをミディアムスプリンググリーン色を使って描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
散布図をダークバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
文字列の開始位置先に部分文字列が含まれるかどうか調べる	s.find(sub, start) != -1
黒い大バツマーカーをリストと配列の散布図に描く	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの列の名前一覧で指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
ダークグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
データフレームを二つの列によってまとめたグループを使う	df.groupby(['列A', '列B'])
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
浮動小数点数のn乗	x ** n
集合から全要素を消す	aSet.clear()
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
数式を浮動小数点数にする	float(e)
option: カラムの名前を自動的な連番に設定する	header = None
線グラフをダークサーモン色を使って描画する	plt.plot(データ列x, データ列y, color='darksalmon')
文字列をファイルに書き込む	f.write(s)
エラーなく辞書からキーの値を得る	aDict.get(key, None)
真紅色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
英字の文字列	string.ascii_letters
y軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
データフレームの相関行列をスピアマン相関係数として計算する	df.corr(method='spearman')
散布図にrgbの星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
両端キューの要素をインプレースに反転する	deq.reverse()
線グラフの色をアイボリーに指定する	plt.plot(データ列x, データ列y, color='ivory')
データフレームの欠損値を最小値で置換する	df.fillna(df.min())
グラフのx軸を対数に変更する	plt.xscale('log')
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
パーセント付きの円グラフをプロットする	plt.pie(データ列, startangle=90, autopct='%.2f%%')
オブジェクトのプロパティの値を指定する	setattr(obj, プロパティ名, 値)
散布図の星印を黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
ゼロ埋めした三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
オブジェクトは論理値クラスか	isinstance(obj, bool)
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
平均付き箱ひげ図を描く	plt.boxplot(データ列, showmeans=True)
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
データフレームをJSONL形式のファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
ミディアムオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
クラスが名前付きタプルか調べる	issubclass(C, tuple)
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
オーキッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
option: グラフを実線に設定する	linestyle = 'solid'
ダークシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
データフレームのNaNを最頻値で補う	df.fillna(df.mode().iloc[0])
option: ライトスレイグレー色を使う	color = 'lightslategrey'
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
option: 書き込みモードに設定する	mode = 'w'
n×n2の2次元リスト	[[0] * n for _ in range(n2)]
柱状グラフのビン数を設定する	plt.hist(データ列, bins=区関数)
折れ線グラフの色をパールゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
タイムスタンプデータが何秒か知る	aDatetime.second
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
ゼロ埋めされたブール型の行列を作る	np.zeros(要素数, dtype=np.int32)
空のリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ポイント印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
三自然数のLCM	math.lcm(n, n2, n3)
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
列名を指定して二つの表データを右ジョインする	pd.merge(df, df2, on='列A', how='right')
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
ゲインズボロ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
異なるカラムをキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
指定した列の空文字をドロップする	df['列A'].replace('', np.nan).dropna()
データフレームを配列にする	df.values
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
ヒストグラムの色をオレンジに指定する	plt.hist(データ列, color='orange')
空行をプリントする	print()
nをn2で結果の切り上げを求める	(n + n2 - 1) // n2
表を2つの列の値ごとにグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
グラフの見た目をイイ感じに設定する	sns.set()
データ列とデータ列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
スノー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
柱状図のビン数を変更する	plt.hist(データ列, bins=区関数)
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
グリッドの線スタイルを一点鎖線に変更する	plt.grid(linestyle='dashbot')
異なる列をキーとして2つのデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
本日の日を使う	datetime.datetime.today().day
データフレームの選択した列の上位25％	df[['列A', '列B']].quantile(0.25)
散布図を赤い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
OSはLinuxか調べる	sys.platform.startswith('linux')
数値を方程式として解く	sympy.solve(e)
データ列の推移を青い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: グラフの色をナバホホワイトに変更する	color = 'navajowhite'
option: スラグレー色を使う	color = 'slategrey'
棒グラフをシエナ色として描画する	plt.bar(データ列x, データ列y, color='sienna')
ファイルの拡張子を使う	os.path.splitext(filepath)[1].lstrip('.')
文字列中の部分文字列を文字列に全部置換する	s.replace(sub, newsub)
赤いポイントマーカーを配列とイテラブルについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームがどの程度、分散しているか調べる	df.var()
部分文字列を文字列の接尾辞から取り除く	s.removesuffix(sub)
サンディーブラウン色を用いてヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
ある列の文字列が正規表現文字列にマッチしない行を取り出す	df[~df['列A'].str.match(正規表現)]
option: 下三角マーカーを使う	marker = 'v'
文字列全体がパターンにASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
余弦	math.cos(x)
nからn2までのstepごとによるスライス	slice(n, n2, step)
文字コードに対応する文字を使う	chr(unicode)
デピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
文字列が平仮名か判定する	('ぁ' <= ch <= 'ん')
nが2で割り切れないか調べる	n % 2 == 1
分子と分母から分数を作る	fractions.Fraction(分子, 分母)
折れ線グラフに黒い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームの指定した列の欠損値を最小値にする	df['列A'].fillna(df['列A'].min())
タプルをn回、接続する	aTuple * n
ペールグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
日付時刻データが金曜日かどうか	aDatetime.weekday() == 4
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
ファイルからバイナリストリームをオープンして]fとする	f = open(filepath, mode='rb')
option: ベクトルのデータ型を指定する	dtype = np.int8
ヒストグラムの色をパープルに指定する	plt.hist(データ列, color='purple')
option: ８ビット整数型を使う	dtype = np.int8
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの色をバリーウッドに変更する	plt.plot(データ列x, データ列y, color='burlywood')
option: ヘッダを自動的な連番に減らす	header = None
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
option: ミディアムシアグリーン色を用いる	color = 'mediumseagreen'
option: 色をカーキに指定する	color = 'khaki'
リストの要素を昇順にソートする	sorted(aList, reverse=False)
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
カデットブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
xが一桁の正の整数	0 <= x <= 9
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
データフレームの選択したカラムにおいてどの値が頻出か見る	df[['列A', '列B']].mode()
グラフに鉛直方向の破線を付ける	plt.axvline(x=0, linestyle='dashed')
散布図の▲マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフに黒いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
縦棒グラフをミディアムバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
データフレームの選択した列の母標準偏差を求める	df[['列A', '列B']].std(ddof=0)
平均値と標準偏差から乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
グリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
option: ポイント印を用いる	marker = '.'
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
散布図にrgbのダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
option: ブルーバイオレットにフォントの色を指定する	color = 'blueviolet'
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
縦棒グラフをローングリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lawngreen')
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
上三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームの欠損値をモードで埋める	df.fillna(df.mode().iloc[0])
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
分子と分母から有理数を準備する	fractions.Fraction(分子, 分母)
値∉集合	element not in aSet
文字列を改行によって区切る	s.splitlines()
リストの中の最大値を求める	max(aList)
option: 三角マーカーを加える	marker = '^'
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
折れ線グラフの色をリネンに変更する	plt.plot(データ列x, データ列y, color='linen')
データフレームから指定した2つの列のみ抽出する	df[['列A', '列B']]
option: インディゴにフォントの色を設定する	color = 'indigo'
本日の日付時刻を算出する	datetime.datetime.now()
青い点線としてデータ列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ふたつの集合が共通の要素を持たないかどうか調べる	aSet.isdisjoint(aSet2)
整数nのバイト長	(n.bit_length() + 7) // 8
今日が土曜日か調べる	datetime.datetime.today().weekday() == 5
文字列がタプルの要素かどうか	element in aTuple
文字列のケースをする	s.casefold()
CSVファイルをヘッダを指定せず読み込む	pd.read_csv('file.csv', header=None)
データフレームをValueMapで一度に置き換える	df.replace(ValueMap)
リストとリストの散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフのポイントマーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
辞書の項目名を列挙する	list(aDict)
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
データフレームの歪度を計算する	df.kurt()
データシリーズの値が欠損値か	ds.isna()
データフレームのn行目を破壊的にドロップする	df.drop(n, axis=0, inplace=True)
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
三つのデータフレームを縦向きに一つにする	pd.concat([df, df2, df3], axis=1)
リストと配列についての散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: セパレータをスラッシュにする	sep = '/'
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
option: グラフの色をラベンダーに設定する	color = 'lavender'
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
集合から別のセットの要素を全て取り除く	aSet.difference_update(aSet2)
option: マーカーの色をブラックにする	markerfacecolor = 'black'
option: ミディアムシアグリーンにフォントの色を指定する	color = 'mediumseagreen'
色名とカラーコードの対応表を見る	matplotlib.colors.cnames
折れ線グラフでデータ列を可視化する	plt.plot(データ列x, データ列y)
データフレームのカラムの標本標準偏差	df['列A'].std(ddof=1)
option: 色をダークスレートブルーに設定する	color = 'darkslateblue'
データフレームをグループ化し、最小値を求める	df.groupby('列A').min()
指定したカラムの欠損値を直後の値に増やす	df['列A'].fillna(method='bfill')
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
データフレームから数値データを抽出する	df.select_dtypes('number')
２つのデータフレームを合体させる	pd.concat([df, df2])
データフレームとして複数のシートを指定してエクセルから読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
option: グラフの色をライムに設定する	color = 'lime'
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
散布図の四角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
predicateFuncが真となる列の部分	itertools.dropwhile(predicateFunc, iterable)
散布図の上三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
x軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
データシリーズの母標準偏差を算出する	ds.std(ddof=0)
option: 文字列の示すエンコーディングを使用する	encoding = s
文字列が全て大文字かどうか調べる	s.isupper()
ある列の文字列に部分文字列がない行を選択する	df[~df['列A'].str.contains(部分文字列)]
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
辞書をJSON形式のインデント幅nの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームの指定したカラムの中に文字列と文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
データをL2ノルムとして正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
第二引数で指定したファイル名	sys.argv[1]
折れ線グラフをパールゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
行列と同じ大きさの空ベクトルを作る	np.empty_like(aArray)
行列を転置する	aArray.T
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
方程式として数値の変数の解を計算する	sympy.solve(e, z)
ライムグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
xの小数点以下'1'桁までを出力する	print(':.1f'.format(x))
ディープスカイブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
ファイルをクローズする	f.close()
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
リストと数列の散布図にrgbの▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
最大長のある双方向キュー	collections.deque(maxlen=n)
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
標準入力から1行だけ改行なしに読む	sys.stdin.readline().rstrip()
データフレームが正規分布からどの程度、尖っているか調べる	df.skew()
option: 色をカデットブルーに設定する	color = 'cadetblue'
オブジェクトにプロパティが存在する	hasattr(obj, プロパティ名)
option: 色をミディアムターコイズに変更する	color = 'mediumturquoise'
実数の双曲線正弦を求める	math.sinh(x)
散布図の菱形マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
オブジェクトのハッシュ値を計算する	hash(obj)
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
両端キューの先頭に文字列を追加する	deq.appendleft(element)
データフレームの選択したカラムの欠損値をxで埋める	df[['列A', '列B']].fillna(x)
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
option: どのカラムも行に設定しない	index_col = None
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
option: 色をダークサーモンに設定する	color = 'darksalmon'
option: フォントの色をディムグレーに設定する	color = 'dimgrey'
option: ライトグリーンにグラフの色を設定する	color = 'lightgreen'
option: レモンシフォンにグラフの色をセットする	color = 'lemonchiffon'
コーラルにヒストグラムの色をセットする	plt.hist(データ列, color='coral')
日付時刻データの時間数	aDatetime.hour
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
二つの列の値でデータフレームをグループ化する	df.groupby(['列A', '列B'])
カラム名を指定してデータフレームをジョインする	pd.merge(df, df2, on='列A')
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
折れ線グラフの色をカラーコードとして設定する	plt.plot(データ列x, データ列y, color='#800080')
実数の仮数	math.frexp(x)[0]
変数について数式のインテグラルを求める	sympy.integrate(e, z)
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
折れ線グラフにダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
主成分分析で多次元データをパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
文字列リストをつなげるひとつの文字列にする	''.join(aStringList)
配列とリストについての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
option: 耐火レンガに色を設定する	color = 'firebrick'
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
複数の列からグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
辞書を階層化する	collections.ChainMap(aDict)
二つの文字列は等しくないか	s != s2
option: ミスティローズを用いる	color = 'mistyrose'
ある列の値ごとの最大値を求める	df.groupby('列A').max()
データフレームを100の位で四捨五入する	df.round(-2)
辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
リストの中の最小値を算出する	min(aList)
散布図の大バツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
日付データからn週間を減算する	aDate - datetime.timedelta(weeks=n)
ヒストグラムをサーモン色を用いて描画する	plt.hist(データ列, color='salmon')
データフレームのあるカラムのタイムゾーンを日本に設定する	df['列A'].tz_convert('Asia/Tokyo')
連続した行列の自動作成する	np.arange(開始値, 終了値, 等差)
茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
ファイルパスをバイナリ用に開く]	open(filepath, mode='rb')
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
ベクトル計算をする	import numpy as np
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
相関係数でデータフレームの相関行列を求める	df.corr(method='pearson')
カラーバーを描く	plt.colorbar()
Excelファイルから複数のシートを指定して読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
データフレームの選択したカラムの最頻値を計算する	df[['列A', '列B']].mode()
データフレームのカラムの相関係数を算出する	scipy.stats.pearsonr(df['列A'], df['列B'])
ファイル名がTSVファイル	filename.endswith('.tsv')
文字列の先頭から空白を消す	s.lstrip(' ')
option: マーカーの色を珊瑚にする	markerfacecolor = 'coral'
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
option: 星印を使用する	marker = '*'
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
文字コードtextとしてファイルをオープンする]	open(filepath, encoding=text)
データフレームの選択したカラムを丸める	df[['列A', '列B']].round()
nで乱数シードを固定する	random.seed(n)
ある列でデータフレームを未入力値を含めてグループ分けする	df.groupby('列A', dropna=False)
変数を黒色でプリントする	print(f'\033[30m{value}\033[0m')
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
n番目のカラムをインデックスとしてCSVファイルを読み込む	pd.read_csv('file.csv', index_col=n)
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
xが-9以上、9以下かどうか	-9 <= x <= 9
ピーチパフ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームのカラムのNaNを平均で補完する	df['列A'].fillna(df['列A'].mean())
組の最初のオブジェクトを探す	aTuple.index(element)
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
バイアスなしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ブランチドアーモンド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
イテラブルを横棒グラフにする	plt.barh(ラベル列, データ列)
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
四角マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームのn行まで抽出する	df[:n]
小数点数のcos	math.cos(x)
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
縦棒グラフを描画し、、バーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
辞書のキーの値	aDict[key]
折れ線グラフを色付きの点線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
nからn2までの整数列を作る	list(range(n, n2+1))
option: 色をラベンダーに設定する	color = 'lavender'
文字列の末尾から部分文字列を除く	s.rstrip(sub)
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの末尾	df.tail()
データフレームの選択したカラムのNaNを直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
縦棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
実数の複素数を算出する	complex(x)
nをn2だけ大きくする	n += n2
散布図に三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
option: 色をスレートブルーに設定する	color = 'slateblue'
ファイルから拡張子付きのファイル名を見る	os.path.basename(filepath)
二つのリストを順にプリントする	print(value, value2)
option: 菱形マーカーを加える	marker = 'D'
ベクトルの要素ごとに加算する	aArray + aArray2
ライトイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
配列の行ごとの合計	np.sum(aArray, axis=1)
option: ライトイエローにグラフの色を設定する	color = 'lightyellow'
リストは少なくともひとつ真	any(aList)
箱ひげ図でリストを可視化する	plt.boxplot(データ列)
option: オールドレースを使用する	color = 'oldlace'
ヒストグラムを青緑色を用いて描画する	plt.hist(データ列, color='teal')
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
カウンタの正のカウントのみ残す	+aCounter
nをn2だけ増加させる	n += n2
黒い▽マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
黒いクロスマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
option: ライトイエローを用いる	color = 'lightyellow'
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
文字列をマゼンタ化する	f'\033[35m{value}\033[0m'
スピアマンでデータフレームの相関行列を求める	df.corr(method='spearman')
データフレームの中に含まれる文字列と日付データの個数を数える	df.isin([value, value2]).sum()
行としてカンマ区切りのファイルのn行目をロードする	pd.read_csv('file.csv', index_col=n)
データフレームをある列によって小さい順にソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
ヒストグラムの色を青に指定する	plt.hist(データ列, color='blue')
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
シーグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
option: ミディアムパープルを用いる	color = 'mediumpurple'
オプションで、出力先を標準エラーに設定する	file = sys.stderr
文字列を空白で区切る	s.split()
option: レベッカパープルにグラフの色を設定する	color = 'rebeccapurple'
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
両端キューから最初の要素を削除する	deq.remove(element)
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
option: コロンをセパレータで使う	sep = ':'
縦棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
文字列の右側からタブを取り除く	s.rstrip('\t')
文字列の開始位置番目と終了位置番目の間に部分文字列がない	s.find(sub, start, end) == -1
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
データフレームを行によって並べる	df.sort_index()
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
大バツ印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
横棒グラフをダークスラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategray')
nがn2かどうか調べる	n == n2
外れ値を除いたデータフレームのカラムの分散を算出する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
角度のラジアン	math.radians(degree)
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
ヒストグラムの色をミディアムパープルに指定する	plt.hist(データ列, color='mediumpurple')
データフレームのカラムをヒストグラムにする	plt.hist(df[column])
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
ヒストグラムの色をスノーに指定する	plt.hist(データ列, color='snow')
データフレームのインデックスをリセットする	df.reset_index()
配列と配列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
リストに文字列を追加する	aList.append(element)
データフレームをある列によって大きい順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
option: グラフの色をビスクに変更する	color = 'bisque'
ライトシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
辞書にタプルの項目を更新する	aDict.update(aDict2)
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
ベクトルの標準偏差	np.std(aArray)
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
カラーバーを横向きに描く	plt.colorbar(orientation='horizontal')
タプルの中の最大値を計算する	max(aTuple)
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
ファイルに文字列を書き込む	f.write(s)
option: 大きい順にする	ascending = False
丸印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
実数に浮動小数点数をかける	x * y
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
文字列全体をケースを無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
辞書を浅くコピーする	dict(aDict)
データフレームの歪度を求める	df.kurt()
データフレームをに箱ひげ図で見る	sns.boxplot(x='カテゴリ列', y='列', data=df)
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
L1ノルムを使って正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
データフレームのインデックスの一覧	df.index
浮動小数点数を十の位で丸める	round(x, -1)
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
データフレームの選択したカラムの欠損値を第二四分位数に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
option: 全体を計算対象にする	axis = None
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
文字列を黒色にする	f'\033[30m{value}\033[0m'
アクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='aquamarine')
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
配列の行ごとの平均値	np.mean(aArray, axis=1)
JSON文字列を辞書にする	json.loads(jsonString)
カウンタ同士で積集合演算する	aCounter & aCounter2
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
折れ線グラフにダイアモンド印を加える	plt.plot(データ列x, データ列y, marker='D')
プロットの色を色差別なくする	sns.set(pallete='colorblind')
折れ線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
アイボリー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
option: スチールブルーを用いる	color = 'steelblue'
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
ライトゴールドロディイエロー色としてヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
文字列をISO8601を使って日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
日付データからn秒分、減らす	aDate - datetime.timedelta(seconds=n)
散布図に青い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
折れ線グラフの色をインディアンレッドにセットする	plt.plot(データ列x, データ列y, color='indianred')
文字列が空白文字からなるかどうかテストする	s.isspace()
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ある列のカテゴリ毎の最小値を計算する	df.groupby('列A').min()
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
折れ線グラフの色をマルーンに指定する	plt.plot(データ列x, データ列y, color='maroon')
ヒストグラムの色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
散布図をやわらかい青色として描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
文字列はタイトル大文字小文字か判定する	s.istitle()
option: スノーを用いる	color = 'snow'
エポック秒をタイムスタンプに変換する	datetime.datetime.fromtimestamp(timestamp)
アルファベットの小文字を全て求める	string.ascii_lowercase
タプルのn番目のの要素	aTuple[n]
ゲインズボロ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
横棒グラフをベージュ色として描画する	plt.barh(データ列x, データ列y, color='beige')
option: ダークサーモンを用いる	color = 'darksalmon'
黄緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
option: ディムグレーを使う	color = 'dimgrey'
安全に文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
二つの集合の対称差集合を計算する	aSet.symmetric_difference(aSet2)
データフレームをグループ化し、ある列に対し最大値を算出する	df.groupby('列A')['列B'].max()
数値を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
▽印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
淡いピンク色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
エクセルファイルからデータフレームを読み込む	pd.read_excel('file.xlsx')
リストを反転する	reversed(aList)
option: ダークスレートブルー色を使う	color = 'darkslateblue'
破線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
トマト色を使ってヒストグラムを描画する	plt.hist(データ列, color='tomato')
option: フォントの色をオリーブに設定する	color = 'olive'
入力から二つの浮動小数数を読む	A, B = map(float, input().split())
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
ある列の文字列が部分文字列で終わらないデータを抽出する	df[~ df['列A'].str.endswith(部分文字列)]
ミディアムパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
文字列を最後の部分文字列で分割する	s.rpartition(sub)
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
文字列を部分文字列で二分する	s.partition(sub)
組内の要素が少なくともひとつ真か調べる	any(aTuple)
スピアマン相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
ヒストグラムをスチールブルー色を用いて描画する	plt.hist(データ列, color='steelblue')
カウンタを使う	import collections
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
リストの平均値	sum(aList)/len(aList)
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データフレームのシェイプ	df.shape
ライム色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
ライムグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
組の平均値を算出する	sum(aTuple)/len(aTuple)
データフレームをある列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
option: フォントの色をゲインズボロに設定する	color = 'gainsboro'
ファイルをBOM付きを使って書き込み用に開く]	open(filepath, mode='w', encoding='utf_8_sig')
ヒストグラムの色をダークゴールデンロッドに指定する	plt.hist(データ列, color='darkgoldenrod')
文字列を最後の部分文字列で分割したときの後半の文字列	s.rpartition(sub)[-1]
データフレームのあるカラムの中に日付データと文字列があるかテストする	df['列A'].isin([value, value2])
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
nが3の倍数	n % 3 == 0
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
データフレームの指定したカラムの統計量	df['列A'].describe()
フォーマットとしてカラムを日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
nの三乗	n ** 3
十六進数字を求める	string.hexdigits
カウンタの項目の出現回数	aCounter[element]
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
option: 色をシーグリーンにセットする	color = 'seagreen'
折れ線グラフの丸印の色を設定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
配列のn次モーメントを求める	scipy.stats.moment(配列, moment=n)
文字列中にひとつでも非空白がある	any(not c.isspace() for c in s)
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
空白	' '
線グラフをバイオレット色で描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームの指定したカラムの未入力値を50パーセンタイルに設定する	df['列A'].fillna(df['列A'].median())
データフレームの列の名前を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
データフレームを千の位で四捨五入する	df.round(-3)
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
テンプレートをタプルでフォーマットする	formatText.format_map(aDict)
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
フォーマットで列を日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
データシリーズの中にある文字列の数をカウントする	ds.isin([value]).sum()
データシリーズの中にある文字列の合計を数える	ds.isin([value]).sum()
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
グラフの描画でパステル調に色テーマを使う	sns.set(pallete='pastel')
文字列を部分文字列で分割したときの先頭の文字列を見る	s.partition(sub)[0]
ダークシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
配列の調和平均を求める	scipy.stats.hmean(配列)
データシリーズの中に日付データと文字列がいくつ存在するか数える	ds.isin([value, value2]).sum()
シードをnで固定する	random.seed(n)
スタッキングでクラス分類をする	sklearn.ensemble.StackingClassifier()
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
データフレームをグループ化しある列に対し標準偏差を求める	df.groupby('列A')['列B'].std()
ファイルにxを文字列に変換して書く	f.write(str(x))
文字列の中で正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s)
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
縦軸だけ目盛り線	plt.grid(axis='y')
文字列が文字列リストに含まれるか判定する	s in aStringList
まとめて正規表現patternでデータフレームの選択した列の値をreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
三つのデータフレームを横方向につなぐ	pd.concat([df, df2, df3], axis=1)
データフレームをCSVファイルに小数点以下3桁まで出力する	df.to_csv('file.csv', float_format='%.3f')
文字列を紫色にする	f'\033[35m{value}\033[0m'
データフレームのヒストグラム付き散布図を描く	sns.jointplot(x='列名', y='列名', data=df)
整数nがセットのどれかか調べる	n in aSet
ファイルを開いて]バイナリストリームを使う	open(filepath, mode='rb')
option: 分割記号を文字列にする	sep = s
データフレームの平均値を求める	df.mean()
散布図にrgbの上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの列をグループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: グラフの色をバリーウッドに指定する	color = 'burlywood'
マップの内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
データフレームの末尾n行を取り出す	df.tail(n)
黒い▲マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
データシリーズの中に文字列と文字列が存在する	ds.isin([value, value2])
データシリーズの欠損値を直後の値で埋める	ds.fillna(method='bfill')
リストとリストの散布図を描き、マーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
自分自身をモジュールとして	sys.modules[__name__]
あるカラムの未入力値を平均値で埋める	df['列A'].fillna(df['列A'].mean())
イテラブルの組み合わせを求める	itertools.combinations(iterable, n)
縦棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
指定したカラムで集計し、平均値を求める	df.groupby('列A').mean()
option: ライトグレー色を用いる	color = 'lightgray'
散布図を黒い右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ヒストグラムを茶色色として描画する	plt.hist(データ列, color='brown')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
散布図に黒い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
nが2で割り切れるか調べる	n % 2 == 0
縦棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
nが5の倍数か調べる	n % 5 == 0
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightseagreen')
実数を実数で除する	x / y
option: グラフの色をミディアムスレートブルーに変更する	color = 'mediumslateblue'
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
リストとリストについての散布図に赤い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームの指定したカラムの欠損値をxで埋める	df['列A'].fillna(x)
ダークサーモン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
日付データが日付データより早いかどうか調べる	aDate < aDate2
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームの一部のカラムの欠損値を最大値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
折れ線プロットを描画して色をカラーコードとして指定する	plt.plot(データ列x, データ列y, color='#800080')
折れ線グラフをダークオレンジ色として描画する	plt.plot(データ列x, データ列y, color='darkorange')
折れ線グラフに青い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
タプルを引数として展開して表示する	print(*aTuple, sep=',')
全部カラムの値を正規表現で置換する	df['列A'].replace(pattern, repl, regex=True)
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
多層パーセプトロンでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
グラフで使うフォントを指定する	sns.set(font=フォント名)
線グラフの色をミントクリームに変更する	plt.plot(データ列x, データ列y, color='mintcream')
2つ並べてイテラブルを箱ひげ図にする	plt.boxplot([データ列, データ列])
option: フォントの色をオーキッドに変更する	color = 'orchid'
ヒストグラムの色をミスティローズにセットする	plt.hist(データ列, color='mistyrose')
ファイルパスからバイナリ書き込みストリームを開いて]、fとする	f = open(filepath, mode='wb')
二つの文字列が同じ	s == s2
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
単回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
棒グラフをシルバー色を用いて描画する	plt.bar(データ列x, データ列y, color='silver')
option: コーンフラワーブルーにフォントの色を設定する	color = 'cornflowerblue'
表データのあるカラムが何曜日か調べる	df['列A'].dt.weekday_name
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
変数について数式をn階微分する	sympy.diff(e, z, n)
データフレームの選択した列の第一四分位数	df[['列A', '列B']].quantile(0.25)
配列の形	aArray.shape
グラフで用いる縦軸に名前を付ける	plt.ylabel('y軸ラベル')
行列の列ごとの最大値	np.max(aArray, axis=0)
ヒストグラムの色をダークカーキに変更する	plt.hist(データ列, color='darkkhaki')
データフレームのn行以降抽出する	df[n:]
option: インディアンレッド色を使う	color = 'indianred'
デフォルトスタイルを適用する	sns.set()
折れ線グラフのポイントマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
option: グラフの色を赤に設定する	color = 'red'
グラフに格子線を入れる	plt.grid(True)
データフレームの一部のカラムの文字列をNaNに変換する	df[['列A', '列B']].replace(値, np.nan)
無限大を用いる	math.inf
option: グラフの色をサーモンに設定する	color = 'salmon'
シーケンスを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
二つのタプルを階層的につなぐ	collections.ChainMap(aDict, aDict2)
散布図をグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='green')
option: エンコーディングを文字列の示す文字コードに変更する	encoding = s
ダークサーモン色としてヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
nにn2を足して代入する	n += n2
データフレームをカテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
ティール色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
option: ダークシアグリーン色を使用する	color = 'darkseagreen'
配列をn個に等量で分割する	pd.qcut(aArray, n)
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
カラーマップでヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
あるカラムのカテゴリ毎の標準偏差	df.groupby('列A').std()
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
指定したカラムの中に文字列と文字列が存在するか	df['列A'].isin([value, value2])
option: パールゴールデンロッドを使う	color = 'palegoldenrod'
集合から別の集合を取り除く	aSet.difference_update(aSet2)
黄色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
部分文字列を文字列の末尾から探す	s.rfind(sub)
部分文字列が部分文字列で開始する	s.startswith(sub)
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
データ列の変化を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
縦棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
ヒストグラムの色をブラックに指定する	plt.hist(データ列, color='black')
ベクトルの分散	np.var(aArray)
値は集合に含まれないか調べる	element not in aSet
データフレームの選択した列の空文字をNaNに変換しドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
散布図の菱形マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
ラインを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフの色をホワイトに指定する	plt.plot(データ列x, データ列y, color='white')
アリスブルーにヒストグラムの色を設定する	plt.hist(データ列, color='aliceblue')
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
にバイオリン図でデータフレームをグラフ化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
ミディアムシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
数列の相関係数	scipy.stats.pearsonr(数列, 数列2)
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
データフレームの２つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
グラフを全般的に色差別なくする	sns.set(pallete='colorblind')
2つの数値を改行で区切ってプリントする	print(value, value2, sep='\n')
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
データフレームの平均値	df.mean()
option: 区切り記号を使わない	sep = ''
データフレームの選択したカラムの欠損値を中央値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
オブジェクトが関数かどうか調べる	callable(obj)
文字列が印字できるか調べる	s.isprintable()
サポートベクターマシンを用いてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの選択したカラムのNaNを最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
欠損値がある行を消してみる	df.dropna()
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
ゴーストホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
淡くカラーパレットをグラフの描画で用いる	sns.set(pallete='muted')
横に二つのデータフレームを合体させる	pd.merge(df, df2)
グリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
マッピングのキーを列挙する	aDict.keys()
データフレームのカラムの各値の出現数	df[col].value_counts()
バイトオーダを確める	sys.byteorder
箱ひげ図を使ってデータフレームの2つのカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
赤い実線としてラインを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
JSON形式の文字列をデータに変換する	json.loads(jsonString)
配列とリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
データフレームを並べて、下の方n件を取り出す	df.sort_values('キーとなる列').tail(n)
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
OSがMacOS	sys.platform.startswith('darwin')
散布図の三角印を黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
横棒グラフをミディアムシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
フクシア色でヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
option: 区切りを改行にする	sep = '\n'
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
文字列を代数計算の変数に変換する	sympy.Symbol(s)
散布図をオレンジレッド色として描画する	plt.scatter(データ列x, データ列y, color='orangered')
実行結果を白色化する	f'\033[37m{value}\033[0m'
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
縦棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
配列とリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
リストとリストの散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
値をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
空白を用いて文字列を区切る	s.split()
ふたつの列からグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
ミディアムスレートブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
2つのカウンタの共通する値を求める	aCounter & aCounter2
rgbの上三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図に丸印を使う	plt.scatter(データ列x, データ列y, marker='o')
リストとリストの散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
ターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
表データから型の列を抽出する	df.select_dtypes(ty)
パパイヤウィップ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームをサンプリングする	df.sample()
データフレームをエクセルファイルからロードする	pd.read_excel('file.xlsx')
ふたつの列からグループ化し標準偏差を算出する	df.groupby(['列A', '列B'], as_index=False).std()
データフレームの中に文字列と日付データがある	df.isin([value, value2])
白色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
辞書にキーワード引数で更新する	aDict.update(**kwargs)
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
クラス分類のF値を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
横棒グラフを真紅色で描画する	plt.barh(データ列x, データ列y, color='crimson')
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
縦棒グラフをプロットして、左寄せする	plt.bar(ラベル列, データ列, align='edge')
イテラブルと配列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームをCSVファイルとして出力する	df.to_csv('file.csv')
横棒グラフを描画して、バーの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
十六進文字列を浮動小数点数にする	float.fromhex(十六進表記の文字列)
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
プロットに水平方向の破線を付ける	plt.axhline(y=0, linestyle='dashed')
データフレームの一部のカラムのNaNを最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
xでデータシリーズの欠損値を埋める	ds.fillna(x)
表データのあるカラムの年	df['列A'].dt.year
線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
リストを中央値で分割する	pd.qcut(aList, 2)
リストと数列について散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
プロットのカラーパレットを指定する	sns.set(pallete=パレット名)
タイムスタンプデータのタイムゾーンを使う	aDatetime.timetz()
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
降順にある列でデータフレームを並べ直す	df.sort_values(by='列A', ascending=False)
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
文字列がタプルの要素でないか調べる	element not in aTuple
最大長のあるキュー	collections.deque(maxlen=n)
rgbのバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
数値を水色化する	f'\033[36m{value}\033[0m'
リストが空かどうか調べる	len(aList) == 0
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
辞書のキーの一覧	aDict.keys()
文字列の右端から部分文字列を除く	s.rstrip(sub)
option: 左三角マーカーを使う	marker = '<'
散布図を三角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='^')
オリベドラブ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
エラーなくリストの文字列の位置を求める	aList.index(element) if element in aList else -1
値をシアンで表示できる文字列にする	f'\033[36m{value}\033[0m'
文字列中の部分文字列を別の文字列に置き換える	s.replace(sub, newsub)
グラフにグリッド線を入れる	plt.grid(True)
線グラフをスラグレー色を使って描画する	plt.plot(データ列x, データ列y, color='slategrey')
実数がNaN	math.isnan(x)
ヒストグラムの色を濃いシアンに設定する	plt.hist(データ列, color='darkcyan')
散布図に赤い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='r')
一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフの三角印を赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームのあるカラムの空文字をNaNに変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
縦棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
外れ値を除いた配列の算術平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgrey')
データフレームを関数によって集計し、、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
リストを中央値でビン分割する	pd.qcut(aList, 2)
アクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
ミディアムオーキッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
文字列をISO書式でタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: 貝殻にグラフの色を指定する	color = 'seashell'
データフレームを万の位で四捨五入する	df.round(-4)
折れ線グラフを青い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ヒストグラムを上限から下限までの範囲で描く	plt.hist(データ列, range=(start, end))
データフレームをある列によって昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
縦棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
二つのリストをコロンで区切って表示する	print(value, value2, sep=':')
データフレームのカラム間のピアソンの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
シルバー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
折れ線グラフの色をオリベドラブに指定する	plt.plot(データ列x, データ列y, color='olivedrab')
カラムの標準誤差を求める	scipy.stats.sem(df['列A'])
オプションで、標準出力を使う	file = sys.stdout
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
option: どの行もヘッダに設定しない	header = None
文字列がリストに含まれないか調べる	element not in aList
nのn2乗	n ** n2
実数の指数	math.frexp(x)[1]
棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
縦棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
rgbの丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ブルーバイオレット色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
option: 昇順にする	ascending = True
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
表データのあるカラムの曜日の名前を見る	df['列A'].dt.weekday_name
データフレームの選択したカラムの欠損値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
因子分析を行う	model = sklearn.decomposition.PCA(n_components=n)
文字列が全て英字	s.isalpha()
データシリーズを整数に四捨五入する	ds.round()
プログラムの実行をここで終了する	sys.exit()
オブジェクトのメモリビュー	memoryview(obj)
キューの末尾の値	deq[-1]
日付データが日付データと同時	aDate == aDate2
option: 欠損値を含めない	dropna = True
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
ヒストグラムの色をホワイトに設定する	plt.hist(データ列, color='white')
文字列を区切りで分割して、文字列リストに変換する	s.split(sep)
最小値でデータフレームの一部のカラムのNaNを埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
横棒グラフを赤色を用いて描画する	plt.barh(データ列x, データ列y, color='red')
option: ミディアムバイオレットレッドにフォントの色を設定する	color = 'mediumvioletred'
日付時刻データが金曜日かどうか判定する	aDatetime.weekday() == 4
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
横方向に複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
オブジェクトが無限に繰り返すイテラブル	itertools.repeat(element)
文字列を走査し正規表現にマッチするか調べる	re.search(pattern, s)
option: フォントの色をスレートブルーに変更する	color = 'slateblue'
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
データフレームの指定したカラムの値をValueMapでまとめて置換する	df['列A'].replace(ValueMap)
文字列リストを結合してひとつの文字列にする	''.join(map(str, iterable))
rgbの下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
等量でデータ列をビン数nでビン分割する	pd.qcut(ds, n)
散布図のマーカーの大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
横棒グラフをダークターコイズ色として描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
線グラフの色をシアンに変更する	plt.plot(データ列x, データ列y, color='cyan')
二つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
UNIXコマンドtextを実行する	os.system(text)
データフレームの末尾を調べる	df.tail()
ファイルからディレクトリ名取り出す	os.path.dirname(filepath)
散布図の四角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
option: 色をグリーンイエローに設定する	color = 'greenyellow'
作画のグリッドを暗くする	sns.set(style='darkgrid')
明るくカラーパレットをグラフの描画で使う	sns.set(pallete='bright')
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
option: 星マーカーを描画する	marker = '*'
ヒストグラムをハニーデュー色を用いて描画する	plt.hist(データ列, color='honeydew')
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='gray')
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
配列の列ごとの合計値	np.sum(aArray, axis=0)
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
指定した列のカテゴリで集計し、平均値を計算する	df.groupby('列A').mean()
5行をデータフレームからランダムに重複ありでサンプリングする	df.sample(5, replace=True)
option: ダークサーモンにグラフの色を設定する	color = 'darksalmon'
二つのオブジェクトが同一か調べる	obj is obj2
プロットにグリッド線を付ける	plt.grid(True)
表データのあるカラムは何分か調べる	df['列A'].dt.minute
nを八進数リテラルに変換する	oct(n)
イテラブルをセットに変換する	set(iterable)
option: ティールにグラフの色を設定する	color = 'teal'
タイムスタンプデータの分数	aDatetime.minute
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightgreen')
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
最後から部分文字列で文字列を区切る	s.rsplit(sub)
データフレームを保存する	df.to_csv('file.csv')
散布図の丸印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
日付時刻データが何年か知る	aDatetime.year
データフレームをCSVファイルにSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
リストを太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
タプルの最初を取り除く	aTuple[1:]
リスト内の要素が少なくともひとつ真	any(aList)
散布図に黒い四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c='k')
option: ダークシアン色を使う	color = 'darkcyan'
option: カーキ色を使用する	color = 'khaki'
棒グラフをブラウン色で描画する	plt.bar(データ列x, データ列y, color='brown')
実数はNaNか調べる	math.isnan(x)
option: バイナリモードを使う	mode = 'rb'
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
option: 色をホットピンクにする	color = 'hotpink'
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
あるカラムの中にいくつNaNがあるかカウントする	df['列A'].isna().sum()
印字できる文字列にする	ascii(x)
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
濃くパレットをプロットの描画で用いる	sns.set(pallete='deep')
nがn2より小さいかどうか調べる	n < n2
線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
option: バイオレット色を使う	color = 'violet'
整数nの2進数リテラルを使う	bin(n)
コマンドの第一引数	sys.argv[1]
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
辞書のエントリを列挙する	aDict.values()
データ列の折れ線グラフを描画し、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
ブルーバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='blueviolet')
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
ある列の欠損値を平均で埋める	df['列A'].fillna(df['列A'].mean())
リストのスピアマンの相関係数	scipy.stats.spearmanr(数列, 数列2)
辞書にキーが存在しないとき要素を追加する	aDict.setdefault(key, element)
データフレームのカラムの標準誤差	scipy.stats.sem(df['列A'])
ライトイエロー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
配列をビン数nでビン分割する	pd.cut(aArray, n)
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
線グラフをローングリーン色を使って描画する	plt.plot(データ列x, データ列y, color='lawngreen')
ドジャーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
データフレームをある列をキーにしてソートしてNaNを先頭にする	df.sort_values(by='列A', na_position='first')
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
組の値を昇順にソートする	sorted(aTuple, reverse=True)
文字列中のひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
行列の列ごとの最小	np.min(aArray, axis=0)
カラムの欠損値を前の行の値で埋める	df['列A'].fillna(method='ffill')
option: ベクトルのデータ型を指定する	dtype = bool
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
option: ▼マーカーを描画する	marker = 'v'
パールゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
イテラブルとリストについての散布図に黒い三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
横棒グラフをライトコーラル色を用いて描画する	plt.barh(データ列x, データ列y, color='lightcoral')
縦棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
横棒グラフをミディアムブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumblue')
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
プロットの簡単な説明を表示する	plt.legend()
名前付きタプルを引数からインスタンス化する	C._make(パラメータ)
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
rgbのダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームのある列をリストとして選ぶ	df['列A'].values.tolist()
縦棒グラフの色をバイオレットにする	plt.bar(データ列x, データ列y, color='violet')
データフレームの選択したカラムを丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
option: グラフの色をトマトに指定する	color = 'tomato'
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
決定木をグラフ化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
option: ミディアムブルーにグラフの色を設定する	color = 'mediumblue'
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
横棒グラフをダークスラテグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslategray')
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
オプションで標準エラーに出力する	file = sys.stderr
指定のカラムに重複があれば、ドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
CSVファイルのn行目をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
縦棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
折れ線グラフのバツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
option: オリベドラブにグラフの色を設定する	color = 'olivedrab'
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
2つのリストからマップ	dict(zip(aList, aList2))
折れ線グラフの左三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームのあるカラムの曜日の名前を求める	df['列A'].dt.weekday_name
サンディーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
新しいガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
データフレームの選択したカラムは正規分布からどれだけ歪んでいるか見る	df[['列A', '列B']].kurt()
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
深紅にヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
オブジェクトが名前付きタプル型	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
SDGでクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
文字列中に漢字が含まれる	re.search('[\u4E00-\u9FD0]', s)
データフレームのカラムのケンドールの相関係数	scipy.stats.kendalltau(df['列A'], df['列B'])
データフレームのあるカラムをベクトルにする	pd.get_dummies(df['列A'])
既存の行列を元に全要素が0の配列を作る	np.zeros_like(aArray)
モカシン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
ヒストグラムを描画して、半透明化にする	plt.hist(データ列x, alpha=0.5)
深紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
ビスク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
黒いポイントマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='k')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
黒い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
ダークバイオレット色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームからランダムに100行を選択する	df.sample(100)
部分文字列を文字列の開始位置から終了位置まで探す	s.find(sub, start, end)
データフレームの指定したカラムの中の欠損値の合計をカウントする	df['列A'].isna().sum()
整数nを2進文字列にする	bin(n)[2:]
データフレームの選択したカラムの未入力値をxに設定する	df[['列A', '列B']].fillna(x)
n割るn2	n / n2
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
文字列がアルファベットかどうか確認する	s.isalpha()
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
要素ひとつのりストを得る	[element]
option: 色をマルーンに設定する	color = 'maroon'
部分文字列を安全に文字列の先頭から取り除く	s.removeprefix(sub)
今日が月曜日か調べる	datetime.datetime.today().weekday() == 0
散布図の丸マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
菱形印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
option: ミッドナイトブルーを使う	color = 'midnightblue'
二次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
勾配ブースティングで回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
横棒グラフをライトスレイグレー色を使って描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
実数の平方根	math.sqrt(x)
データ列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
データフレームを書き出す	df.to_csv('file.csv')
option: グラフの色をイエローグリーンに変更する	color = 'yellowgreen'
横棒グラフをスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='skyblue')
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
等間隔でn個に配列を分割する	pd.cut(aArray, n)
散布図の左三角印の色を指定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
横棒グラフをブランチドアーモンド色を用いて描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
option: 色をロージーブラウンに指定する	color = 'rosybrown'
数を万の位で四捨五入する	round(x, -4)
year年month月day日の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
データ列の各データ値の出現数	ds.value_counts()
配列の最小値	np.min(aArray)
データシリーズの記述統計量	ds.describe()
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
グリッド線を白くする	plt.grid(color='w')
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
青い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ベクトルを行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
散布図をサーモン色として描画する	plt.scatter(データ列x, データ列y, color='salmon')
散布図の三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
空の勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
リストと数列についての散布図に黒い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
option: 配列のデータ型を指定する	dtype = np.int16
ヒストグラムの色をハニーデューに指定する	plt.hist(データ列, color='honeydew')
option: ダークオーキッドにフォントの色を設定する	color = 'darkorchid'
辞書をカウンタに変換する	collections.Counter(aDict)
小さい方からリストの値を並べ直す	sorted(aList, reverse=False)
切片なしの重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
オブジェクトのフィールドの値を変更する	setattr(obj, プロパティ名, 値)
カラム名を指定して２つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
散布図の大バツ印を青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図をライトスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
ポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
表データを関数によってグループ化してグループ名を列挙する	[name for name, _ in df.groupby(関数)]
データフレームをある列の値によってグループ化し、統計量を求める	df.groupby('列A').describe()
データシリーズのタイムゾーンを日本に指定する	ds.tz_convert('Asia/Tokyo')
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
指定したカラムの値をValueMapで一度に置換する	df['列A'].replace(ValueMap)
ファイルを改行除外して一行ずつ読む	f.readline()
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
文字列の先頭でパターンに大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
折れ線グラフをカデットブルー色として描画する	plt.plot(データ列x, データ列y, color='cadetblue')
文字列の左端からタブを取り除く	s.lstrip('\t')
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
データシリーズの空文字をドロップする	ds.replace('', np.nan).dropna()
データシリーズの中に存在する文字列の合計を求める	ds.isin([value]).sum()
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
ファイルパスからディレクトリ名取り出す	os.path.dirname(filepath)
セットを組に変換する	tuple(aSet)
テンプレートをargsを引数としてフォーマットする	formatText.format(*args)
データフレームの中に日付データと日付データがいくつ含まれるか数える	df.isin([value, value2]).sum()
ファイルをオープンして]、追加ストリームを求める	open(filepath, mode='a')
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
データフレームの一部の列の値を正規表現patternで全部replに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
文字列をシンボル化して、変数にする	z = sympy.Symbol(s)
option: ダークカーキ色を使用する	color = 'darkkhaki'
ピーチパフ色としてヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
最後のカラムを除いたデータフレーム	df[df.columns[:-1]]
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
ヒストグラムの色をミディアムパープルにする	plt.hist(データ列, color='mediumpurple')
イテラブルを回数して、カウンタを更新する	aCounter.update(iterable)
散布図にrgbのバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
正規分布の累積分布関数を用いる	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
文字列が全て数字か調べる	s.isdigit()
option: ダークグリーン色を使う	color = 'darkgreen'
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
option: フォントの色をダークシアグリーンに設定する	color = 'darkseagreen'
nが5の倍数	n % 5 == 0
データフレームの列の一覧	df.info()
列の全順列を得る	itertools.permutations(iterable)
配列とリストの散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
表データのn行目を消して	df.drop(n, axis=0)
疑似乱数を計算する	random.random()
縦棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
散布図をスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='skyblue')
指定した列のカテゴリで集計し、最大値を算出する	df.groupby('列A').max()
ファイルを追加モードを用いてオープンする]	open(filepath, mode='a')
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
リストを番号付けする	enumerate(aList)
リストの末尾から要素をポップする	aList.pop()
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
書き込み用にファイルを文字コードtextでオープンする]	open(filepath, mode='w', encoding=text)
縦軸の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
ゼロ埋めされた符号なし８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.uint8)
異なる列をキーとしてデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
ダークカーキ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
タプルのキーと値を入れ替える	{v: k for k, v in aDict.items()}
サンディーブラウン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
y座標の目盛を対数に変更する	plt.yscale('log')
折れ線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
イテラブルからサンプリングする	random.sample(iterable)
散布図の印をポイントにする	plt.scatter(データ列x, データ列y, marker='.')
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
タプルの浅いコピーを作る	aDict.copy()
数値を浮動小数点数に変換する	float(e)
データフレームを複数の列によって小さい順に並べ、、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
横棒グラフを耐火レンガ色として描画する	plt.barh(データ列x, データ列y, color='firebrick')
ヒストグラムの色をコーンフラワーブルーに変更する	plt.hist(データ列, color='cornflowerblue')
指定したカラムの要約統計量を求める	df['列A'].describe()
配列のユニークな要素とそのインデックスを算出する	u, indices = np.unique(aArray, return_index=True)
散布図の右三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
⊆かどうか調べる	aSet.issubset(aSet2)
ダークサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
実数以下の最大の整数を求める	math.floor(x)
空の線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
折れ線プロットとしてデータ列の変化を作図する	plt.plot(range(len(データ列)), データ列)
実行結果を緑色にする	f'\033[32m{value}\033[0m'
線形モデルの係数を見る	model.coef_
二つの関係が真上位集合	aSet > aSet2
文字列を赤色化する	f'\033[31m{value}\033[0m'
データフレームとデータシリーズを横方向に合体させる	pd.concat([df, ds], axis=1)
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
両端キュー中の要素のインデックス	deq.index(element)
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
文字列が全てアスキー文字か	s.isascii()
逆双曲線正弦	math.asinh(x)
二つの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
データフレームの文字列を欠損値に変換する	df.replace(値, np.nan)
ダーク・スラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategrey')
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
option: 先頭の列をインデックスに設定する	index_col = 0
シアン色でヒストグラムを描画する	plt.hist(データ列, color='cyan')
option: 左三角マーカーを描画する	marker = '<'
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
nがn2以下か調べる	n <= n2
t-SNEで多次元データを濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
ヒストグラムの色をマルーンにする	plt.hist(データ列, color='maroon')
nをn2で結果の切り上げ	(n + n2 - 1) // n2
フォレストグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
フローラルホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
xが一桁の正の整数か調べる	0 <= x <= 9
横棒グラフをドジャーブルー色として描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
データフレームの指定した列の最頻値	df['列A'].mode()
option: フォントの色をミントクリームに設定する	color = 'mintcream'
箱ひげ図でデータフレームの二つのカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
タプルの最初のn要素を取り除く	aTuple[n:]
折れ線グラフの三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
グラフの使途を論文にセットする	sns.set(context='paper')
書き込み用にSJISでファイルパスを開く]	open(filepath, mode='w', encoding='shift_jis')
範囲指定をしたデータフレームのカラムの算術平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
逆行列を算出する	np.linalg.inv(aArray)
データフレームの中に文字列があるか調べる	df.isin([value])
nプラスn2を求める	n + n2
文字列にイテラブルを変換して、カンマで連結する	','.join(map(str, iterable))
リストが空か調べる	len(aList) == 0
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
整数の最大公約数を求める	math.gcd(n, n2)
日付時刻データからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
ヒストグラムの色をミッドナイトブルーに指定する	plt.hist(データ列, color='midnightblue')
ヒストグラムを黄緑色として描画する	plt.hist(データ列, color='chartreuse')
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
配列とリストの散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
ローングリーン色でヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
データフレームを二つの列によってグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
データフレームの選択したカラムのNaNを中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
ライトコーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
横棒グラフをビスク色を用いて描画する	plt.barh(データ列x, データ列y, color='bisque')
データフレームの一部のカラムの欠損値を50パーセンタイルに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
文字列の終了位置より前に部分文字列が含まれるか	s.find(sub, 0, end) != -1
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
xを文字列に変換してファイルに書く	f.write(str(x))
折れ線グラフに青い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
リストとデータ列についての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
グラフのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
カウンタをリセットする	aCounter.clear()
nをn2だけ小さくする	n -= n2
配列のKurtosis	scipy.stats.kurtosis(配列, bias=False)
線形回帰モデルの切片	model.intercept_
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
縦方向に三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
ある列の値がxに等しくない行を選択する	df[df['列A'] != x]
三数の最も大きい値	max(x, y, z)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
散布図の▲マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
option: ライトスチールブルーにグラフの色を設定する	color = 'lightsteelblue'
別の文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
データ列を平方根する	np.sqrt(データ列)
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データシリーズをdatetime64型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
散布図のクロスマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ナバホホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='navajowhite')
option: ポイント印を描画する	marker = '.'
文字列が組に含まれない	element not in aTuple
行列の演算を行う	import numpy as np
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフに青いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
昇順にタプルの要素をソートする	sorted(aTuple, reverse=False)
列にイテラブルを続ける	itertools.chain(iterable, iterable2)
データ列の折れ線グラフを描画して、RGBで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
日付時刻データが日付時刻データより前	aDatetime < aDatetime2
データフレーム中の欠損値をドロップする	df.dropna(inplace=True)
偽陽性を抑えたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
リストのn番目以降の部分を抽出する	aList[n:]
文字列を全て小文字に変換する	s.casefold()
多重集合をタプルから作成する	collections.Counter(aDict)
アンサンブル学習でクラス分類をする	sklearn.ensemble.VotingClassifier()
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
半透明の一点鎖線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
配列とリストの散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
棒グラフをミディアムターコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
配列の値が正規分布にしたがって発生する確率を計算する	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
データフレームの選択したカラムの標準偏差	df[['列A', '列B']].std()
０で全要素を初期化した複素数型の行列を作る	np.zeros(行数, 列数, dtype=bool)
ヒストグラムをラベンダー色を用いて描画する	plt.hist(データ列, color='lavender')
ヒストグラムをインディアンレッド色として描画する	plt.hist(データ列, color='indianred')
実数が非数かどうか調べる	math.isnan(x)
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
option: 線幅を3.0ポイントに設定する	linewidth = 3.0
文字列は全て印字できるかどうか	s.isprintable()
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
n2行n列の2次元リスト	[[0] * n for _ in range(n2)]
データフレームの欠損値を除いてみる	df.dropna()
option: ピンクを用いる	color = 'pink'
イテラブルを文字列に変換してつなげる	''.join(map(str, iterable))
双方向キューをリストに変換する	list(deq)
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
ある列の文字列が部分文字列で終わる行を選択する	df[df['列A'].str.endswith(部分文字列)]
リストの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
既存のファイルパスをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
CSVファイルをn番目の列をインデックスとして読む	pd.read_csv('file.csv', index_col=n)
ふたつのカラムを組み合わせてグループ化し平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
リストとリストの散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームのある列を丸めて、整数型にする	df['列A'].round().astype(int)
折れ線グラフの丸マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
データフレームの選択したカラムの中のNaNの合計を数える	df[['列A', '列B']].isna().sum()
文字列を新しい文字列で置換する	s.replace(sub, newsub)
データフレームをグループ化しある列に対し最小値を求める	df.groupby('列A')['列B'].min()
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
十六進数字を全部使う	string.hexdigits
ユーザから入力される	input()
棒グラフをタン色を使って描画する	plt.bar(データ列x, データ列y, color='tan')
線グラフの色をデピンクに変更する	plt.plot(データ列x, データ列y, color='deeppink')
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
option: ダークスレートブルー色を用いる	color = 'darkslateblue'
横棒グラフを描画して、下寄せする	plt.barh(ラベル列, データ列, align='edge')
グラフの題名をセットする	plt.title('グラフの名称')
option: 色をスノーに設定する	color = 'snow'
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
データフレームの未入力値を平均値に変更する	df.fillna(df.mean())
データフレームを並べ直して、上の方n件を取り出す	df.sort_values('キーとなる列').head(n)
カテゴリ列で色付けして、にバイオリン図でデータフレームを可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
配列の次元数	aArray.ndim
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
日付時刻データが何月か知る	aDatetime.month
データフレームから指定した三つの列を抽出する	df[['列A', '列B', '列C']]
部分文字列で文字列の開始位置以降が始まるか調べる	s.startswith(sub, start)
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
ふたつの列としてグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
2つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
データフレーム中の欠損値をドロップしてみる	df.dropna()
黒い右三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='>', c='k')
リストとリストについての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
タプルの先頭	aTuple[0]
データフレームの相関行列を描画する	sns.heatmap(df.corr())
線グラフをミディアムアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
nが一桁の数か確認する	-9 <= n <= 9
０で全要素を初期化した行列	np.zeros(行数, 列数)
option: グレー色を用いる	color = 'gray'
イテラブルを累加する	itertools.accumulate(iterable)
データ列の折れ線グラフをダイアモンド印で描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームの行を抽出する	df[start:end]
データシリーズの尖り	ds.skew()
数列とリストの散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
文字列は漢字か	('\u4E00' <= ch <= '\u9FD0')
オブジェクトをイテレータにする	iter(obj)
リッジ回帰モデルを用意する	model = sklearn.linear_model.Ridge(alpha=正則化項)
乱数生成系列をnで固定する	random.seed(n)
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
目盛り線	plt.grid(linewidth=3.0)
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
ペールグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
グリッドの線種を一点鎖線に変更する	plt.grid(linestyle='dashbot')
option: ミディアムブルー色を用いる	color = 'mediumblue'
データフレームの指定したカラムの欠損値を直後の値に設定する	df['列A'].fillna(method='bfill')
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
データフレームの数値を一度に丸める	df.round()
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
nがn2以下、もしくはn3以上か確認する	n <= n2 or n >= n3
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
ヒストグラムをダークゴールデンロッド色を使って描画する	plt.hist(データ列, color='darkgoldenrod')
ラジアンの角度	math.degrees(x)
ダークオーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
データフレームのある列の値がx以下の行を選択する	df[df['列A'] <= x]
変数の出力を改行せず行う	print(value, end='')
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
データフレームの指定したカラムの欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
データフレームからランダムに10行を抽出する	df.sample(10)
nが正の数	n > 0
プラットホームの名前	sys.platform
折れ線グラフの色をライトブルーにする	plt.plot(データ列x, データ列y, color='lightblue')
分類結果のアキュレシーを算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
本日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
option: 大文字・小文字を無視する	flag = re.IGNORECASE
既存の行列を元にして全要素が0の配列を作成する	np.zeros_like(aArray)
日付データと日付データの時間差を計算する	aDate - aDate2
辞書から項目名で指定された項目を取り出す	aDict.pop(key)
多次元尺度構成法でパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
コマンドの第2引数を知る	sys.argv[1]
サイコロと同じ乱数	random.randint(1, 6)
線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
ライトスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
ヒストグラムをゴールデンロッド色を使って描画する	plt.hist(データ列, color='goldenrod')
リスト内の要素は全て真か調べる	all(aList)
リストとイテラブルについて散布図をプロットし、、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームの中にいくつ文字列が存在するか数える	df.isin([value]).sum()
タプルと組を結合する	aTuple + aTuple2
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
ルートのチェーンマップ	collections.ChainMap()
イテラブルをぐるぐると繰り返す	itertools.cycle(iterable)
カウンタの共通部分	aCounter & aCounter2
整数最小公倍数	math.lcm(n, n2)
データフレームが何行重複するか見る	df.duplicated().sum()
折れ線グラフのポイントマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
プロットにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
文字列に日本語が使われているか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
1からNまでの配列	np.arange(1, N+1)
nから無限にカウントアップする	itertools.count(start=n)
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
縦棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
散布図をダークオリーブグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
最大最小値でデータをスケーリングする	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
データフレームの中に文字列があるか	df.isin([value])
配列とリストの散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
パープル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
グラフ中のフォントを指定する	sns.set(font=フォント名)
線グラフをミディアムブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumblue')
折れ線グラフの色をライトスチールブルーにセットする	plt.plot(データ列x, データ列y, color='lightsteelblue')
変数を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
指定した列のカテゴリで集計し、それぞれの平均値を求める	df.groupby('列A').mean()
ホワイト色のヒストグラムを描画する	plt.hist(データ列, color='white')
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
十六進文字列をバイト列にする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
nが1、もしくは2もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
横棒グラフを黄色色を用いて描画する	plt.barh(データ列x, データ列y, color='yellow')
テキストファイルファイル名が	filename.endswith('.txt')
ゲインズボロ色でヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
カウンタをマッピングを用いて更新する	aCounter.update(aDict)
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
列のユニークな要素	df[col].unique()
文字列からISO8601として日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
カデットブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
option: フォントの色をダークグリーンに設定する	color = 'darkgreen'
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
散布図にrgbのダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームの選択した列の中央値	df[['列A', '列B']].median()
本日が日曜日	datetime.datetime.today().weekday() == 6
option: ダークシアグリーンに色を指定する	color = 'darkseagreen'
データシリーズは何曜日か見る	ds.dt.weekday_name
option: グラフの色をゴーストホワイトに変更する	color = 'ghostwhite'
プログラムを異常停止する	sys.exit(1)
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
option: マーカーの大きさを設定する	markersize = 2.0
option: 符号なし８ビット整数型を使う	dtype = np.uint8
ASCII限定として正規表現をあらかじめコンパイルする	re.compile(pattern, flag=re.ASCI)
第２コマンド引数	sys.argv[1]
CSVを列名を指定せず読む	pd.read_csv('file.csv', header=None)
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
2を底とする実数の対数	math.log2(x)
等しい量になるようにデータフレームの中の列をビン数nで分割する	pd.qcut(df[col], n)
折れ線プロットをプロットする	plt.plot(データ列x, データ列y)
表データを整列し、、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
縦棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
ラインの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
散布図の△印の色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: グラフの色をフローラルホワイトに指定する	color = 'floralwhite'
キューに値をスタックする	deq.append(element)
組をナンバリングする	enumerate(aTuple)
標準出力のバッファをフラッシュする	sys.stdout.flush()
option: タブをセパレータで使う	sep = '\t'
横棒グラフをミディアムターコイズ色として描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
折れ線グラフのラベルを指定する	plt.plot(データ列x, データ列y, label='ラベル')
最初のを外したデータフレームを使う	df[df.columns[1:]]
線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategray')
データ列を中央値でビン分割する	pd.qcut(ds, 2)
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
散布図の△印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
option: シルバー色を使用する	color = 'silver'
グラフの描画で濃くカラーパレットを使用する	sns.set(pallete='deep')
データフレームをあるカラムを用いてソートし、、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
行列の行ごとの最大値	np.max(aArray, axis=1)
ヒストグラムをスプリンググリーン色を用いて描画する	plt.hist(データ列, color='springgreen')
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
実数を３乗する	x ** 3
縦棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
黒い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
nがn2以下、もしくはn3以上か調べる	n <= n2 or n >= n3
文字列をカンマで分割して、列挙する	s.split(',')
縦棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
パパイヤウィップにヒストグラムの色を指定する	plt.hist(データ列, color='papayawhip')
ミディアムパープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
珊瑚色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
散布図の丸印を黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
ヒストグラムの色をスラグレーにセットする	plt.hist(データ列, color='slategray')
数式の変数を数式で置き換える	e.subs(z, e2)
バギングを用いて回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
日付データからn時間分減算する	aDate - datetime.timedelta(hours=n)
データフレームをグループ化しそれぞれの合計を求める	df.groupby('列A').sum()
棒グラフをパールバイオレットレッド色を使って描画する	plt.bar(データ列x, データ列y, color='palevioletred')
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
日付データが水曜日	aDate.weekday() == 2
縦棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データフレームの選択した列の欠損値を最小値で置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
全要素が1の行列を作る	np.ones(行数, 列数, dtype=np.int)
散布図を右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>')
option: 決定木の最大深さを設定する	maxdepth = n
標準出力のバッファを強制表示する	sys.stdout.flush()
option: モカシン色を使用する	color = 'moccasin'
ローングリーンにヒストグラムの色を変更する	plt.hist(データ列, color='lawngreen')
option: 色を貝殻にセットする	color = 'seashell'
データ列の推移を赤い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
実数を十の位で四捨五入する	round(x, -1)
option: グラフの色をコーンズシルクにセットする	color = 'cornsilk'
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
表データのあるカラムの日	df['列A'].dt.day
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
データフレームを四捨五入して、整数型にする	df.round().astype(int)
rgbの△マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
既にロードされたモジュールの一覧を知る	sys.modules
ライトイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
option: フォントの色をシスルに設定する	color = 'thistle'
ヒストグラムをゴールデンロッド色を用いて描画する	plt.hist(データ列, color='goldenrod')
縦棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
黒い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
ヒストグラムの色をライトスレイグレーにセットする	plt.hist(データ列, color='lightslategray')
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
散布図に黒い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='k')
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
入力から２つの少数を読む	A, B = map(float, input().split())
option: 改行コードをUNIXに指定する	newline = '\n'
折れ線グラフの大バツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
要素が集合に含まれるか調べる	element in aSet
option: 先頭の行をヘッダに設定する	header = 0
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
横棒グラフをダークシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
ダークスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
散布図にポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
項目名が辞書上で未定義か調べる	key not in aDict
ヒストグラムの色をライトブルーに変更する	plt.hist(データ列, color='lightblue')
カウンタの最頻出な項目	aCounter.most_common()[0]
ミントクリーム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
option: マーカーを丸に変える	marker = 'o'
ある列の文字列が正規表現にマッチする行を取り出す	df[df['列A'].str.match(正規表現)]
ピアソンでデータフレームの相関行列を求める	df.corr(method='pearson')
実数のn乗を求める	x ** n
option: グラフの色をリネンに指定する	color = 'linen'
option: ロージーブラウンを用いる	color = 'rosybrown'
データフレームの指定したカラムの値が未入力値	df['列A'].isna()
1からnまでの整数列	list(range(1, n+1))
文字列は全て十進数字か調べる	s.isdecimal()
ブースティングを用いてクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームのデータを条件で取り除く	df[(df['列A'] == x) & (df['列B'] == y)]
数列とリストの散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
option: 行方向に計算する	axis = 1
データフレームを転置する	df.T
散布図に赤い△印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
t-SNEで淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
横棒グラフをブラウン色を使って描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームを二つの列の値によってグループ化する	df.groupby(['列A', '列B'])
option: グリーンイエローを使う	color = 'greenyellow'
option: 茶色色を用いる	color = 'brown'
option: アクア色を使う	color = 'aqua'
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
赤い実線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データシリーズの欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
ある列の文字列が部分文字列で終わる行を抽出する	df[df['列A'].str.endswith(部分文字列)]
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
散布図のマーカーを右三角印にする	plt.scatter(データ列x, データ列y, marker='>')
貝殻色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
横棒グラフをデピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='deeppink')
option: セパレータを使わない	sep = ''
双方向キューの最大長を求める	deq.maxlen
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
スカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
データフレームをCSV形式に小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
文字列が十進数字か調べる	s.isdecimal()
10を底とする実数の対数	math.log10(x)
データフレームのカラムを柱状図で描画する	plt.hist(df[column])
散布図に黒いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
デピンク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
option: グラフの色をダークターコイズにする	color = 'darkturquoise'
日付を表現した文字列をタイムスタンプにする	pd.to_datetime(日付を表現した文字列)
文字列のプレフィックスが部分文字列	s.startswith(sub)
option: ミディアムスプリンググリーン色を用いる	color = 'mediumspringgreen'
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
グリーンイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
縦棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
昇順にデータフレームをある列によって整列する	df.sort_values(by='列A', ascending=True)
文字列の右側から改行を除く	s.rstrip('\n')
２つの文字列を辞書順で比較する	s < s2
配列を分割数nで分割する	pd.cut(aArray, n)
ライトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
折れ線グラフの菱形印の色を指定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データフレームの選択した列がどの程度、分散しているか見る	df[['列A', '列B']].var()
データ列と配列についての散布図に黒い菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームのカラムのKurtosisを算出する	scipy.stats.kurtosis(df['列A'], bias=False)
文字列内に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
マップの項目名の一覧	aDict.keys()
データフレームのカラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
ファイルから書き込みストリームを開き]fとする	f = open(filepath, mode='w')
option: ダークオーキッド色を使う	color = 'darkorchid'
ケンドールの順位相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
行列を縦ベクトルに変形する	aArray.reshape(-1, 1)
散布図をダイアモンド印を使って描画する	plt.scatter(データ列x, データ列y, marker='D')
あるカラムを10000の位で丸める	df['列A'].round(-4)
項目名がタプル上で定義済み	key in aDict
要素が集合に含まれないか	element not in aSet
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
散布図をライトグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgray')
option: フローラルホワイト色を使う	color = 'floralwhite'
ドジャーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
option: ダークゴールデンロッドを用いる	color = 'darkgoldenrod'
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
空のリッジ回帰とロッソ回帰のハイブリットモデルを用意する	model = sklearn.linear_model.ElasticNet()
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
青い実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
タプルにキーワード引数として更新する	aDict.update(**kwargs)
実数を十六進表記の文字列に変換する	x.hex()
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データ列をn個にビン分割する	pd.cut(ds, n)
指定した列リストのみデータフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
リストとリストについて散布図を描画して、文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
ふたつの集合が集合と交わりを持たないか	aSet.isdisjoint(aSet2)
折れ線グラフに右三角マーカーを加える	plt.plot(データ列x, データ列y, marker='>')
ロッソ回帰分析を行う	model = sklearn.linear_model.Rosso(alpha=正則化項)
散布図をポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
線グラフの色をクリムゾンに変更する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの指定した列のパーセンタイルを計算する	df['列A'].quantile(パーセント/100)
分類モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
縦棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
日付データが月曜日	aDate.weekday() == 0
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
カテゴリ別で色付けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
２つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
option: エクセルシート名をする	sheet_name = ['A', 'B']
文字列をコロンで区切って、列挙する	s.split(':')
あるカラムのカテゴリごとの合計を求める	df.groupby('列A').sum()
カラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
リストを箱ひげ図で可視化する	plt.boxplot(データ列)
タプルの値を並べ直す	sorted(aTuple)
２つのリストから辞書を作成する	dict(zip(aList, aList2))
データフレームのあるカラムの年を使う	df['列A'].dt.year
数で実数を除する	x / y
データフレームの指定したカラムのNaNを平均に設定する	df['列A'].fillna(df['列A'].mean())
ゼロ埋めされた配列	np.zeros(要素数)
ヒストグラムの色をマルーンに変更する	plt.hist(データ列, color='maroon')
辞書の項目名を列挙する	aDict.keys()
新しいロッソ回帰モデルを新規作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
文字列内にひとつでも小文字があるか調べる	any(c.islower() for c in s)
青い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
文字列はリストに含まれるか	element in aList
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
カウンタ同士で∪演算する	aCounter | aCounter2
文字列中の部分文字列を新しい文字列に回数を制限して置換する	s.replace(sub, newsub, n)
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
文字列は印字できる	s.isprintable()
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
棒グラフをグリーンイエロー色として描画する	plt.bar(データ列x, データ列y, color='greenyellow')
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
青い点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
日付データにn分を加える	aDate + datetime.timedelta(minutes=n)
項目名が辞書上で定義済みか調べる	key in aDict
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
変数を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
実数を複素数に変換する	complex(x)
option: NaNも無視しない	dropna = True
文字列中にひとつでも非アスキー文字が含まれるか判定する	any(not c.isascii() for c in s)
option: 未入力値を先頭にする	na_position = 'first'
データフレームのカラムの歪度	scipy.stats.skew(df['列A'], bias=False)
データフレームの選択したカラムのNaNを直前の値に指定する	df[['列A', '列B']].fillna(method='ffill')
折れ線グラフを赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ブルーバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
リストを三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
両端キューの左から要素を取り除く	deq.popleft()
ヒストグラムの色をダークオーキッドに指定する	plt.hist(データ列, color='darkorchid')
実行結果を下線付きにする	f'\033[4m{value}\033[0m'
ミントクリーム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
データフレームをある列の値で集約して、各グループごとの件数を知る	df.groupby('列A').size()
実線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
線グラフの色をダークオリーブグリーンに指定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ファイルをオープンして]、読み込みストリームを求める	open(filepath, mode='r')
実行環境がLinuxかどうか調べる	sys.platform.startswith('linux')
アルファベットの文字列	string.ascii_letters
ある列のカテゴリ毎の個数を求める	df.groupby('列A').count()
本日が何月か知る	datetime.datetime.today().month
実行結果を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
ライトグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
nがn2と等しい	n == n2
末尾のカラムを除いたデータフレーム	df[df.columns[:-1]]
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
キーが辞書にあるか調べる	key in aDict
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
ヒストグラムをベージュ色として描画する	plt.hist(データ列, color='beige')
セットのイミュータブル版	frozenset(aSet)
２次元リストをflattenする	sum(aList)
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
配列の内積	np.dot(aArray, aArray2)
パウダーブルー色でヒストグラムを描画する	plt.hist(データ列, color='powderblue')
赤い実線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームの中である列に重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
文字列からタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
数値の部分分数化する	sympy.apart(e)
データフレームの最初100行を見る	df.head(100)
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
双方向キューの末尾から値を取り除く	deq.pop()
マッピングの項目名一覧を得る	list(aDict)
青色で変数をプリントする	print(f'\033[34m{value}\033[0m')
データフレームの中の列を等しい量になるようにビン数nで分割する	pd.qcut(df[col], n)
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
0からnまでの整数列を得る	list(range(n+1))
線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
行列の累積積を求める	np.cumprod(aArray)
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
リストを箱ひげ図で描画する	plt.boxplot(データ列)
ファイルパスをディレクトリ名とファイル名に分割する	os.path.split(filepath)
スレートブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
モデルを訓練する	model.fit(説明変数, 目的変数)
散布図に青い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
列のエポック秒を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
マルーン色でヒストグラムを描画する	plt.hist(データ列, color='maroon')
回帰分析をスタッキングで行う	sklearn.ensemble.StackingRegressor()
濃いシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
option: グラフの色をスノーに設定する	color = 'snow'
線グラフをライトスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
散布図を黒い大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフの下三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
日付時刻データとタイムスタンプデータの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
データフレームの指定の列に重複があれば除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
リストと配列についての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームを一度に丸める	df.round()
データシリーズが正規分布からどの程度、尖っているか確認する	ds.skew()
ある列をドロップする	df.drop('列A', axis=1, inplace=True)
データフレームのカラムのn次モーメントを求める	scipy.stats.moment(df['列A'], moment=n)
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
散布図をダークゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
ある列のカテゴリ毎の最大値	df.groupby('列A').max()
日付データの年数を使う	aDate.year
メディアンでデータフレームの欠損値を埋める	df.fillna(df.median())
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
SVDを行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
符号なしでnをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
データシリーズが何日か調べる	ds.dt.day
データシリーズの要約統計量	ds.describe()
散布図の四角印を青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
表データのあるカラムが何年か見る	df['列A'].dt.year
リストをシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
ダーク・スラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
横軸の目盛を対数に変更する	plt.xscale('log')
ライトシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
名前付きタプルを辞書にする	aNamedTupleObject._asdict()
データフレームの列の欠損値をxで補う	df['列A'].fillna(x)
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
文字列が数字か調べる	s.isdigit()
多重集合をイテラブルから作る	collections.Counter(iterable)
あるカラムの文字列が部分文字列で始まる行を取り出す	df[df['列A'].str.startswith(部分文字列)]
option: パレットトルコイズ色を用いる	color = 'paleturquoise'
option: グラフの色をミディアムシアグリーンにする	color = 'mediumseagreen'
珊瑚色のヒストグラムを描画する	plt.hist(データ列, color='coral')
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
option: トマトに色を設定する	color = 'tomato'
option: ダイアモンドマーカーを使う	marker = 'D'
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
散布図の上三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
横棒グラフをグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='grey')
実数のアークタンジェント	math.atan(x)
ある列の値がx以下の行を抽出する	df[df['列A'] <= x]
散布図の菱形マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
インディゴ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
インディゴにヒストグラムの色を設定する	plt.hist(データ列, color='indigo')
改行文字を使う	'\n'
クラス分類をサポートベクターマシンでする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列の開始位置から終了位置までの範囲で部分文字列の登場	s.count(sub, start, end)
ヒストグラムの色をドジャーブルーにセットする	plt.hist(データ列, color='dodgerblue')
ヒストグラムをマゼンタ色を用いて描画する	plt.hist(データ列, color='magenta')
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
折れ線グラフに黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフの色をパパイヤウィップにする	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームのあるカラムを日付データに変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
option: 色の透明度を変更する	alpha = 0.5
棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
データフレームのあるカラムの分位数	df['列A'].quantile(パーセント/100)
rgbの△マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
配列と数列についての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
パパイヤウィップ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
表データを使う	import pandas as pd
オブジェクトのオブジェクト識別子	id(obj)
データフレームの一部の列の最頻値	df[['列A', '列B']].mode()
折れ線グラフの色をブランチドアーモンドに指定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
折れ線グラフを半透明の一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
棒グラフをオリベドラブ色を用いて描画する	plt.bar(データ列x, データ列y, color='olivedrab')
option: ブランチドアーモンドに色を指定する	color = 'blanchedalmond'
ダークオリーブグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
両端キューのn番目に要素を挿入する	deq.insert(n, element)
現在のモジュールを得る	sys.modules[__name__]
主成分分析を使って淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
散布図を左三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='<')
リストが空でないか調べる	len(aList) != 0
平均線付き箱ひげ図をプロットする	plt.boxplot(データ列, meanline=True)
両端キューのn番目のデータを使う	deq[n]
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
一度に正規表現でreplにデータシリーズの値を変更する	ds.replace(pattern, repl, regex=True)
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームを指定した列の値によってグループ化し、要約統計量を求める	df.groupby('列A').describe()
横棒グラフをダークサーモン色として描画する	plt.barh(データ列x, データ列y, color='darksalmon')
散布図の下三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
散らばりを可視化する	plt.scatter(データ列x, データ列y)
ふたつの集合が共通の要素を持たないか判定する	aSet.isdisjoint(aSet2)
タイムスタンプ型のデータフレームのあるカラムをインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
ファイルを追加用に開く]	open(filepath, mode='a')
配列の列ごとの合計	np.sum(aArray, axis=0)
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
散布図の下三角印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
横棒グラフをダークシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
ヒストグラムの色をシスルに指定する	plt.hist(データ列, color='thistle')
折れ線グラフの色をダークカーキに指定する	plt.plot(データ列x, データ列y, color='darkkhaki')
無限大	math.inf
データフレームのNaNを平均値に指定する	df.fillna(df.mean())
横軸の目盛の値を変更する	plt.xticks(目盛りの値リスト)
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
マッピングのキー一覧	list(aDict)
グラフで利用可能な色名の一覧を使う	matplotlib.colors.cnames
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
文字列が識別子名か調べる	s.isidentifier()
ファイルパスからバイナリストリームを開き]、fとする	f = open(filepath, mode='rb')
円グラフを真円にする	plt.axis('equals')
要素が集合に含まれないか調べる	element not in aSet
option: グラフの色をグリーンに設定する	color = 'green'
データフレームのカラムの未入力値を後の値で補う	df['列A'].fillna(method='bfill')
標準入力から1行読み取る	input()
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
チップのデータセットをロードする	df = sns.load_dataset('tips')
リストを2回あわせた直積	itertools.product(iterable, repeat=2)
散布図の印を菱形にする	plt.scatter(データ列x, データ列y, marker='D')
リストとリストの散布図をプロットして左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
色名をからコードに変換する	matplotlib.colors.cnames[色名]
predicateFuncが真となる列の部分	itertools.takewhile(predicateFunc, iterable)
ダイアモンド印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
範囲を指定して部分文字列を文字列の末尾から探す	s.find(sub, start, end)
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
データフレームの標準偏差	df.std()
リストとリストについて散布図を描いて、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
option: 左三角印を描画する	marker = '<'
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
横棒グラフをダークオレンジ色を用いて描画する	plt.barh(データ列x, データ列y, color='darkorange')
option: ライム色を使う	color = 'lime'
option: どのカラムもインデックスにしない	index_col = None
縦棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
SJISとして既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
白いグリッド線を引く	plt.grid(color='w')
データフレームにおいてどの値が最も出現するか見る	df.mode()
サポートベクター分類モデルを準備する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ファイルを改行除外して一行ずつ読み込む	f.readline()
option: 符号なし８ビット整数型を使用する	dtype = np.uint8
データフレームを二つの列の値によってグループ化し、、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
ヒストグラムの色をダークブルーに指定する	plt.hist(データ列, color='darkblue')
nが正の数か調べる	n > 0
option: グラフの色をディムグレーにする	color = 'dimgrey'
折れ線グラフに黒い上三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
グレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
S-W検定を行う	scipy.stats.shapiro(df['列A'])
整数nを十六進表現に変換する	hex(n)
縦棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
デフォルトを適用する	sns.set()
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
辞書をインデント幅nのJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
散布図に赤い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='r')
配列を等しい量になるようにビン数nでビン分割する	pd.qcut(aArray, n)
散布図をダークマゼンタ色を使って描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
散布図をアリスブルー色として描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
文字列の右側からタブを消す	s.rstrip('\t')
option: マゼンタ色を用いる	color = 'magenta'
棒グラフをアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='aquamarine')
文字列中にひとつでも非数字が含まれるかどうか調べる	any(not c.isdigit() for c in s)
ライトコーラル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
リストの平均	sum(aList)/len(aList)
折れ線グラフをフォレストグリーン色として描画する	plt.plot(データ列x, データ列y, color='forestgreen')
リストをひとつ置きに取り出す	aList[::2]
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
グラフを使う準備をする	import matplotlib.pyplot as plt
option: ミディアムスレートブルーにグラフの色をする	color = 'mediumslateblue'
リストの最後にリストを展開する	aList.extend(aList2)
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
数列のパーセンタイルを描画する	plt.boxplot(データ列)
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
option: グラフの色をスラグレーに設定する	color = 'slategray'
折れ線グラフの色をミッドナイトブルーにする	plt.plot(データ列x, データ列y, color='midnightblue')
カーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数を数える	s.count(sub, start, end)
ロバストな線形回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
option: インデックスを連番に減らす	index_col = None
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
縦棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
year年month月day日のタイムスタンプ	datetime.datetime(year=year, month=month, day=day)
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
バリーウッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
全数字	string.digits
列名一覧をデータ型でフィルタする	df.select_dtypes(型).columns
実数を整数にする	int(x)
option: 文字コードtextを用いる	encoding = text
option: マーカーの色を濃いシアンにする	markerfacecolor = 'darkcyan'
データフレームから型を抽出する	df.select_dtypes(ty)
３つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=1)
option: ライトグリーンを使う	color = 'lightseagreen'
ひとつでも非アスキー文字が文字列中に含まれるか調べる	any(not c.isascii() for c in s)
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
配列とリストの散布図を描画してマーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
xの小数点以下'2'桁までプリントする	print(':.2f'.format(x))
要素∉集合	element not in aSet
ヒストグラムの区間を設定する	plt.hist(データ列, range=(start, end))
データフレームの選択したカラムの欠損値を最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
実数が有限	math.isfinite(x)
本日が月曜日か	datetime.datetime.today().weekday() == 0
正則化付き単回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
折れ線グラフのポイント印の色を設定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
オブジェクトにプロパティが存在するか	hasattr(obj, プロパティ名)
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
マルーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
をPythonパスに追加する	sys.path.append(dir)
配列の次元数を求める	aArray.ndim
黒い大バツマーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
ラベンダー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
データフレームの指定したカラムを千の位で丸める	df['列A'].round(-3)
日付時刻データの日数	aDatetime.day
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
ファイルを追加用にオープンして]fとする	f = open(filepath, mode='a')
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
列名を置き換える	df.columns = columns
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
シーグリーン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
データフレームの指定したカラムが正規分布からどれだけ尖っているか見る	df['列A'].skew()
データフレームの一部のカラムの平均値を求める	df[['列A', '列B']].mean()
文字列が全て英数字か調べる	s.isalnum()
n個にデータフレームの中の列を等しい量になるようにビン分割する	pd.qcut(df[col], n)
ヒストグラムを描いてビンを設定する	plt.hist(データ列, bins=区関数)
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
表データのあるカラムをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
データフレームのカラムの幾何平均	scipy.stats.gmean(df['列A'])
option: フォントの色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
二つの列からグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
アリスブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
カウンタのそれぞれの項目を、そのカウントだけリストとして得る	aCounter.elements()
データフレームのあるカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
nかけるn2	n * n2
散布図を赤い三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
列とシーケンスの直積	itertools.product(iterable, iterable2)
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
データフレームの先頭10行を取り出す	df.head(10)
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
データフレームのあるカラムの日	df['列A'].dt.day
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
ふたつの集合の積集合	aSet.intersection(aSet2)
文字列リストにイテラブルを変換して、カンマによって結合する	','.join(map(str, iterable))
両端キュー中の数値のインデックス	deq.index(element)
データフレームを二つの列によって小さい順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
option: ブール型を使う	dtype = np.int32
タイムスタンプデータをタプルに変換する	aDatetime.timetuple()
ホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
フクシア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
パレットをパステル調にする	sns.set(pallete='pastel')
配列を転置する	aArray.T
縦棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
線を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
nが奇数か	n % 2 == 1
データフレームを出力する	df.to_csv('file.csv')
組の先頭のn要素を除く	aTuple[n:]
文字列中の部分文字列の出現をカウントする	s.count(sub)
横棒グラフをピンク色を使って描画する	plt.barh(データ列x, データ列y, color='pink')
データ列を二つ並べてボックスチャートにする	plt.boxplot([データ列, データ列])
青い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
マップを浅くコピーする	dict(aDict)
線グラフをシスル色として描画する	plt.plot(データ列x, データ列y, color='thistle')
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
option: ダークカーキ色を使う	color = 'darkkhaki'
データフレームをCSV形式にSJISで書き出す	df.to_csv('file.csv', encoding='shift_jis')
ミスティローズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
散布図をカーキ色として描画する	plt.scatter(データ列x, データ列y, color='khaki')
データシリーズを一万の位で丸める	ds.round(-4)
option: ゲインズボロ色を用いる	color = 'gainsboro'
フクシア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(配列, 'norm')
折れ線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図をダークターコイズ色を使って描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
行列の列ごとの合計を求める	np.sum(aArray, axis=0)
ロバストな線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
ValueMapでまとめてデータシリーズを変更する	ds.replace(ValueMap)
カラーパレットを明るくする	sns.set(pallete='bright')
散布図に赤い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
縦棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
黄色いグリッド線を引く	plt.grid(color='y')
散布図にクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
空白文字を使う	string.whitespace
切り下げて整数に変換する	math.floor(x)
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ベクトルを元に全要素が0の配列	np.zeros_like(aArray)
リストと数列についての散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
指定した列のカテゴリで集計し、平均値を算出する	df.groupby('列A').mean()
縦棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
文字列から部分文字列を除去する	s.replace(sub, '')
イテラブルを文字列として結合する	''.join(map(str, iterable))
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
散布図をモカシン色を使って描画する	plt.scatter(データ列x, データ列y, color='moccasin')
コーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
カウンタの項目のカウント	aCounter[element]
シーケンスからひとつランダムに選ぶ	random.choice(iterable)
イテラブルをイミュータブルなセットに変換する	frozenset(iterable)
option: 文字コードをEUCに指定する	encoding = 'euc_jp'
プロットの使途をスライドに指定する	sns.set(context='talk')
グリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
リストとイテラブルについて散布図を描画して、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
xの小数点以下'5'桁の文字列に変換する	':.5f'.format(x)
option: 最初の行をヘッダにする	header = 0
集合の浅いコピー	aSet.copy()
散布図にダイアモンド印を使う	plt.scatter(データ列x, データ列y, marker='D')
データ列とリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
リストとリストについて散布図を描き、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
タイムスタンプデータにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
option: ディープスカイブルー色を使用する	color = 'deepskyblue'
折れ線グラフの印を丸にする	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
０で全要素を初期化した三２ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
折れ線グラフを黄色色を使って描画する	plt.plot(データ列x, データ列y, color='yellow')
赤色でヒストグラムを描画する	plt.hist(データ列, color='red')
ファイルがないか	not os.path.exists(filepath)
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
二次元タプルをflattenする	sum(aTuple)
formatのパターンを用いて文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
線形モデルの切片を求める	model.intercept_
本日が何曜日か知る	datetime.datetime.today().weekday()
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
option: エラーを無視するようにする	errors = 'ignore'
折れ線グラフを淡いピンク色色を用いて描画する	plt.plot(データ列x, データ列y, color='lightpink')
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
プロットにy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
辞書から項目名の値か、もしくは要素を参照する	aDict.get(key, element)
データフレームの指定した列の文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
折れ線グラフの色をダークオレンジに変更する	plt.plot(データ列x, データ列y, color='darkorange')
実行結果を太字で表示する	print(f'\033[1m{value}\033[0m')
nの十六進数文字列	hex(n)[2:]
実数に実数を掛ける	x * y
データフレームの値が未入力値か	df.isna()
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
n2行n列の２次元リスト	[[0] * n for _ in range(n2)]
オブジェクトは文字列	isinstance(obj, str)
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
散布図の大バツマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
リストの中の最小値	min(aList)
データ列とリストについて散布図をプロットし、、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: ミスティローズに色を指定する	color = 'mistyrose'
マルーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
棒グラフをアクア色を用いて描画する	plt.bar(データ列x, データ列y, color='aqua')
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
データフレームの一部のカラムの中にある文字列と文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
文字列中にひとつでも非英数字がある	any(not c.isalnum() for c in s)
指定した列を100の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
データフレームの行と列を入れ替える	df.T
折れ線グラフの大バツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
オブジェクトがプロパティを持つか	hasattr(obj, プロパティ名)
リストと配列についての散布図に△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
集合をリストに変換する	list(aSet)
option: サドルブラウンにグラフの色を設定する	color = 'saddlebrown'
カテゴリで色分けして、データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
線グラフの色をミディアムシアグリーンにする	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: パウダーブルー色を使う	color = 'powderblue'
nがn2よりも大きい	n > n2
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
ゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
現在が何分か知る	datetime.date.today().minute
カラムの平均の標準誤差を求める	scipy.stats.sem(df['列A'])
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
ランダムにデータフレームから重複を認めて100行をサンプリングする	df.sample(100, replace=True)
option: サーモンを用いる	color = 'salmon'
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
n2がnより大きく、かつ、n3未満かどうか	n < n2 and n2 < n3
nをn2分の一にする	n /= n2
大きさnでリストとリストについての散布図を描く	plt.scatter(データ列x, データ列y, s=n)
データフレームの一部のカラムのNaNをxで埋める	df[['列A', '列B']].fillna(x)
ディレクトリをモジュールを検索するパスに追加する	sys.path.append(dir)
グラフに使うフォントを指定する	sns.set(font=フォント名)
破線にヒストグラムを設定する	plt.hist(データ列, linestyle='dashed')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
散布図の左三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
等差数列から整数乱数を生成する	random.randrange(start, end, step)
実数を切り上げて整数に変換する	math.ceil(x)
組の要素を昇順にソートする	sorted(aTuple, reverse=False)
データフレームの列を指定して重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
グラフ中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
データフレームの欠損値をxに設定する	df.fillna(x)
文字列は全て十進数字かどうか調べる	s.isdecimal()
リストを行列にする	np.array(aList)
配列とデータ列について散布図を描画して、文字列というデータラベル用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
文字列が全て大文字か調べる	s.isupper()
ビスク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
集合から別の集合の要素を全て除く	aSet.difference_update(aSet2)
既存のファイルをSJISを使って追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
nとn2の和	n + n2
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
数列とリストについての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
ふたつの集合の差集合	aSet.difference(aSet2)
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
散布図をオールドレース色として描画する	plt.scatter(データ列x, データ列y, color='oldlace')
option: 大バツマーカーを使用する	marker = 'X'
データシリーズの曜日の名前を使う	ds.dt.weekday_name
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
横棒グラフをシルバー色として描画する	plt.barh(データ列x, データ列y, color='silver')
データフレームのカラムの不偏分散	df['列A'].var(ddof=1)
ファイルを文字列の示す文字コードで開く]	open(filepath, encoding=s)
データフレームのカラムのスピアマンの順位相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
option: 色をスラグレーにする	color = 'slategrey'
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
列名を指定して二つのデータフレームを右結合する	pd.merge(df, df2, on='列A', how='right')
データ列の散布図をプロットする	plt.scatter(データ列x, データ列y)
ティール色のヒストグラムを描画する	plt.hist(データ列, color='teal')
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
ヒストグラムをダークレッド色で描画する	plt.hist(データ列, color='darkred')
ブラックにヒストグラムの色を設定する	plt.hist(データ列, color='black')
折れ線グラフの色をゲインズボロに変更する	plt.plot(データ列x, データ列y, color='gainsboro')
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
option: フォントの色をインディアンレッドに設定する	color = 'indianred'
配列と配列についての散布図に赤いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
ある列の文字列が正規表現文字列にマッチしない行を抽出する	df[~df['列A'].str.match(正規表現)]
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
データフレームのあるカラムの秒	df['列A'].dt.second
データシリーズの標準偏差を求める	ds.std()
横棒グラフをゴールド色として描画する	plt.barh(データ列x, データ列y, color='gold')
自然数LCM	math.lcm(n, n2)
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
タプルの最後を取り除く	aTuple[:-1]
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
重複した行だけ	df[df.duplicated(keep=False)]
▲印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームの選択した列の相関行列	df[['列A', '列B']].corr()
線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
ライトシアン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
リストとリストの散布図を描いて星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
折れ線グラフを赤色として描画する	plt.plot(データ列x, データ列y, color='red')
文字列がn回続くイテラブル	itertools.repeat(element, n)
組のn番目からn2番目までの部分	aTuple[n:n2]
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: クリムゾンを使う	color = 'crimson'
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
ゼロ埋めされた整数型の行列	np.zeros(要素数, dtype=np.int)
回帰直線データフレームのグループ化した散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
option: マーカーを菱形に変える	marker = 'D'
指定した列のカテゴリで集計し、最小値を求める	df.groupby('列A').min()
黒いダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図の丸マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*')
データフレームのあるカラムをリストとして取り出す	df['列A'].values.tolist()
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
データフレームをある列の値でグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
ボックスチャートを二つ並べて描画する	plt.boxplot([データ列, データ列])
パラメータについて数式をn階微分する	sympy.diff(e, z, n)
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
option: カデットブルーを使用する	color = 'cadetblue'
タプルをネスト化する	collections.ChainMap(aDict)
点線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
型のサブクラスか調べる	issubclass(サブクラス, クラス)
パープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
データ列のエポック秒をタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
nullに等しいもの	None
ファイルパスをバイナリ書き込みできるように開く]	open(filepath, mode='wb')
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
リストのオブジェクトの位置をエラーなく使う	aList.index(element) if element in aList else -1
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
文字列が無限に続くイテラブル	itertools.repeat(element)
キーが辞書に存在するか調べる	key in aDict
option: グラフの色をタンに変更する	color = 'tan'
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
option: パパイヤウィップ色を使う	color = 'papayawhip'
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
指定した列のカテゴリで集計し、個数を求める	df.groupby('列A').count()
ヒストグラムを白色を用いて描画する	plt.hist(データ列, color='white')
グリッドを破線にする	plt.grid(linestyle='dashed')
データフレームから列を3つのみ選択する	df[['列A', '列B', '列C']]
カーキ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフの色をシーグリーンに指定する	plt.plot(データ列x, データ列y, color='seagreen')
折れ線グラフの色を暗い赤にセットする	plt.plot(データ列x, データ列y, color='darkred')
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
グラフの色を色差別なくする	sns.set(pallete='colorblind')
線の線種を一点鎖線に変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
配列の標準誤差を求める	scipy.stats.sem(配列)
小麦色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgray')
ヒストグラムの線種を実線に設定する	plt.hist(データ列, linestyle='solid')
option: エラーがあるとき、例外を発生させる	errors = 'strict'
集合の濃度	len(aSet)
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
配列と配列についての散布図に赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
モジュールとして自分自身をを得る	sys.modules[__name__]
データフレームのあるカラムを表データの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
データフレームをグループ化し、ある列の統計量を算出する	df.groupby('列A').describe()['列B']
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
MSEを算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
データフレームのあるカラムの尖度を算出する	df['列A'].skew()
配列とデータ列についての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
二つのオブジェクトが等しいか調べる	obj == obj2
をモジュールを検索するパスに追加する	sys.path.append(dir)
折れ線グラフの四角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
実数の双曲線正弦の逆数	math.asinh(x)
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
縦棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
折れ線グラフに赤いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
nが正の整数かどうか調べる	n > 0
グラフに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X')
文字列の中でASCII限定として正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
標準入力を使う	sys.stdin
ある列のカテゴリごとの個数	df.groupby('列A').count()
タプルの値を昇順にソートする	sorted(aTuple, reverse=True)
データフレームのカラムの不偏標準偏差	df['列A'].std()
既存のファイルをUTF8を用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
option: ダークターコイズ色を使用する	color = 'darkturquoise'
黒い▽マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データシリーズの中に含まれるの合計を数える	ds.isin([value]).sum()
折れ線グラフの色をカーキに変更する	plt.plot(データ列x, データ列y, color='khaki')
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
標準出力のバッファを即時表示する	sys.stdout.flush()
リストと数列についての散布図にバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
縦棒グラフをロージーブラウン色として描画する	plt.bar(データ列x, データ列y, color='rosybrown')
タイムスタンプデータををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
データフレームの選択した列の未入力値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
文字列の中のASCII限定として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
散布図の四角印を赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
option: 黄色色を使用する	color = 'yellow'
折れ線グラフの大バツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームの重複した行をマスクする	df.duplicated()
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
線グラフをダークオリーブグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
散布図を四角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='s')
既存のファイルを追加できるように文字列の示すエンコーディングを使ってオープンする]	open(filepath, mode='a', encoding=s)
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
散布図の右三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
nがn2以上かどうか調べる	n >= n2
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
nとkのコンビネーション	math.comb(n, k)
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
カラムのトリム分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
列一覧	df.info()
線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
データフレームの中にある文字列の合計をカウントする	df.isin([value]).sum()
データフレームをグループ化し、平均値を計算する	df.groupby('列A').mean()
線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ダークスラテグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
折れ線グラフをゴールド色を使って描画する	plt.plot(データ列x, データ列y, color='gold')
横棒グラフをミディアムバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
文字列を空白で区切り、、文字列リストに変換する	s.split()
真スーパーセットかどうか判定する	aSet > aSet2
グラフの用途を論文に設定する	sns.set(context='paper')
データフレームを横向きに連結する	pd.concat([df, df2], axis=1)
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
option: フォントの色をライトサーモンに設定する	color = 'lightsalmon'
option: 色をスカイブルーに設定する	color = 'skyblue'
データフレームのカラムを標準化する	scipy.stats.zscore(df['列A'])
文字列のケースを入れ替える	s.swapcase()
UTF8でファイルパスを書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
色付きの点線を用いてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
縦棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
option: エラーがあるとき例外を発生させる	errors = 'strict'
全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
双方向キューのn番目に要素を挿入する	deq.insert(n, element)
散布図にrgbの下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
線グラフの色をブランチドアーモンドに変更する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームの相関行列をヒートマップを用いて可視化する	sns.heatmap(df.corr())
縦棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
横軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
ヒストグラムをオリベドラブ色を使って描画する	plt.hist(データ列, color='olivedrab')
棒グラフをライトスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームの中に文字列とがあるか調べる	df.isin([value, value2])
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
二つのリストからマップ	dict(zip(aList, aList2))
nからn2の範囲で	range(n, n2)
データフレームのn行目を削除し、みる	df.drop(n, axis=0)
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
レベッカパープル色でヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
データフレームの選択したカラムの中に日付データと日付データがあるか調べる	df[['列A', '列B']].isin([value, value2])
デピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
データフレームを千の位で四捨五入して整数にする	df.round(-3).astype(int)
半透明の実線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
文字列の開始位置以降が部分文字列で始まるか	s.startswith(sub, start)
線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
全要素を0で初期化したベクトルを作る	np.zeros(要素数)
ライトスレイグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
行列の最小を求める	np.min(aArray)
ヒストグラムの色をベージュに指定する	plt.hist(データ列, color='beige')
y座標だけグリッド線	plt.grid(axis='y')
データフレームを2つの列で降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
ファイルの拡張子付きのファイル名を使う	os.path.basename(filepath)
変数を入れ替える	x, y = y, x
データフレームのカラムのケンドールの相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
カウンタのユニークな要素を列挙する	list(aCounter)
等差数列を配列にする	np.arange(開始値, 終了値, 等差)
現在が何時か知る	datetime.date.today().hour
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
整数nの八進表現	oct(n)
文字列の長さ	len(s)
オブジェクトがタプルに含まれないか調べる	element not in aTuple
配列の最大	np.max(aArray)
ブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
三つの文字列をプリントする	print(value, value2, value3)
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
グラフを画面用に指定する	sns.set(context='notebook')
散布図にrgbのバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図の右三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
データフレームのn行目以降抽出する	df[n:]
データフレームをある列でまとめたグループ	df.groupby('列A')
文字列のケースを逆にする	s.swapcase()
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
スチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
option: グラフの色をミディアムバイオレットレッドにセットする	color = 'mediumvioletred'
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
散布図の四角印を黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
文字列の末尾の文字	s[-1]
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
ロイヤルブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
破壊的にある列をキーにしてデータフレームを降順に並べ直す	df.sort_values(by='列A', ascending=False, inplace=True)
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
日付を用いる	import datetime
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
数列とイテラブルについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
データフレームの最後の列以外を説明変数にする	説明変数 = df[df.columns[:-1]]
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフの△マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームを二つの列の値によってグループ化し要約統計量を求める	df.groupby(['列A', '列B']).describe()
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ラベンダー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
カウンタを用いる	import collections
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
データシリーズの月を見る	ds.dt.month
データフレームの一部のカラムの記述統計量を求める	df[['列A', '列B']].describe()
データシリーズの値をValueMapでまとめて置き換える	ds.replace(ValueMap)
縦棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
ふたつのリストの積集合	list(set(aList) & set(aList2))
線形回帰モデルを当てはめる	model.fit(説明変数, 目的変数)
データシリーズの値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
スラッシュで区切って２つの文字列をプリントする	print(value, value2, sep='/')
rgbの丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームの選択したカラムの中に文字列と文字列があるか調べる	df[['列A', '列B']].isin([value, value2])
ベージュ色でヒストグラムを描画する	plt.hist(データ列, color='beige')
データフレームの指定したカラムの未入力値を平均に設定する	df['列A'].fillna(df['列A'].mean())
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
カーキ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データ列を度数分布図にする	plt.hist(データ列)
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
文字列が数字か確認する	s.isdigit()
行列の行ごとの分散	np.var(aArray, axis=1)
実数の2進対数	math.log2(x)
散布図の下三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
データフレームのカラムが正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(df['列A'])
表データを使用する	import pandas as pd
リストと数列についての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
異なる列をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
ヒストグラムを白くする	plt.hist(データ列, color='w')
ふたつの集合のいずれか一方だけの集合を算出する	aSet.symmetric_difference(aSet2)
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
データフレームのあるカラムの母標準偏差を求める	df['列A'].std(ddof=0)
リストから重複を取り除く	sorted(set(aList), key=aList.index)
プロットの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
option: サドルブラウン色を使う	color = 'saddlebrown'
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
関数によってデータフレームを集約して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
option: シャルトリューズ色を使用する	color = 'chartreuse'
データフレームを列毎にグループ化してグループ名を列挙する	[name for name, _ in df.groupby('列A')]
リストとリストの散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
青紫色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
文字列の右側から空白を取り除く	s.rstrip(' ')
option: ライトグレーを使う	color = 'lightgray'
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
データシリーズはどの程度、分散しているか見る	ds.var()
リストにオブジェクトを加える	aList.append(element)
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
コーンズシルク色としてヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
動作環境の名前を知る	sys.platform
数列を箱ひげ図にする	plt.boxplot(データ列)
列を計数器に変換する	collections.Counter(iterable)
ふたつの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategrey'
３つ並べてリストをヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ダークスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
リストを下線付きにする	f'\033[4m{value}\033[0m'
データフレームの上n行	df.head(n)
横軸だけグリッド線	plt.grid(axis='x')
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
データフレームの選択した列の空文字をNaNに変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
rgbのダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データシリーズの空文字を未入力値に変換しドロップする	ds.replace('', np.nan).dropna()
縦に二つのデータフレームを合体する	pd.concat([df, df2], axis=0)
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
文字列を部分文字列で区切る	s.split(sub)
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムをピーチパフ色を使って描画する	plt.hist(データ列, color='peachpuff')
n2がn以上、かつ、n3以下か	n <= n2 and n2 <= n3
小文字列	string.ascii_lowercase
ミディアムスプリンググリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
配列をダミー変数にする	pd.get_dummies(配列)
データフレームの指定したカラムの欠損値を第二四分位数で埋める	df['列A'].fillna(df['列A'].median())
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightgreen')
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
組中の要素が全て真	all(aTuple)
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
データフレームとデータシリーズを横方向に連結する	pd.concat([df, ds], axis=1)
グラフをポスターに設定する	sns.set(context='poster')
オブジェクトは論理値クラスか確認する	isinstance(obj, bool)
ファイルパスをEUCとして書き込みできるように開く]	open(filepath, mode='w', encoding='euc_jp')
データシリーズの欠損値を最頻値で補う	ds.fillna(ds.mode().iloc[0])
折れ線グラフをダークゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
トマトにヒストグラムの色を変更する	plt.hist(データ列, color='tomato')
データシリーズの未入力値を第二四分位数に設定する	ds.fillna(ds.median())
ライムグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='limegreen')
タプル内の要素が全て真か調べる	all(aTuple)
表データのあるカラムをインデックスにする	df.set_index('列A', inplace=True)
折れ線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
散布図に▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
整数nを半分にする	n //= 2
新しいガウス過程分類モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
nはn2かどうか	n == n2
日付時刻データをタプルに変換する	aDatetime.timetuple()
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
option: フォントの色をアクアマリンに設定する	color = 'aquamarine'
データシリーズの中に文字列と日付データが存在する	ds.isin([value, value2])
グリーンイエロー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ヒストグラムの色をスチールブルーに変更する	plt.hist(データ列, color='steelblue')
リストと数列についての散布図に▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
縦棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
配列をビン数nでビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
データフレームの指定したカラムの標本分散	df['列A'].var(ddof=0)
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
データフレームのあるカラムの時	df['列A'].dt.hour
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
辞書のコピーを作る	aDict.copy()
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
データフレームの列の不偏分散	df['列A'].var(ddof=1)
option: インディアンレッドに色を変更する	color = 'indianred'
第２コマンド引数を知る	sys.argv[1]
データフレームから指定した列の名前一覧の列を選択する	df[columns]
option: フォントの色をライムグリーンに変更する	color = 'limegreen'
配列の偏差値を求める	50 + 10 * scipy.stats.zscore(配列)
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
プロットを論文に指定する	sns.set(context='paper')
nの桁数を求める	len(str(n))
パラメータについて数値の積分を計算する	sympy.integrate(e, z)
棒グラフをオレンジ色を用いて描画する	plt.bar(データ列x, データ列y, color='orange')
折れ線グラフをラベンダーブラッシュ色として描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
カテゴリで色分けして、データフレームの全カラムの散布図を描く	sns.pairplot(df, hue='カテゴリ列')
行列の列ごとの平均	np.mean(aArray, axis=0)
ヒストグラムをダークレッド色を用いて描画する	plt.hist(データ列, color='darkred')
option: ペルーに色をセットする	color = 'peru'
重複していない行を抽出する	df[~ df.duplicated(keep=False)]
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
文字列を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
双方向キューの中に値が存在する	element in deq
数列とリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
option: 青緑色を使う	color = 'teal'
nをn2だけ減らす	n -= n2
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
３つの文字列を順にプリントする	print(value, value2, value3)
コマンドフラグの状態	sys.flags
シスル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフのポイントマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
折れ線グラフの大バツマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
文字列を太字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
縦棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgrey')
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
nとn2のXOR	n ^ n2
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
濃い青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
新しい勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.GradientBoostingClassifier()
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
文字列が数値か調べる	s.isnumeric()
データフレームの一部のカラムを千の位で四捨五入して整数型にする	df[['列A', '列B']].round(-3).astype(int)
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
データフレームをある列の値によってグループ化し、要約統計量を求める	df.groupby('列A').describe()
散布図の印を大バツにする	plt.scatter(データ列x, データ列y, marker='X')
第一コマンド引数	sys.argv[1]
淡いピンク色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームをCSVファイルにインデックスを付けず保存する	df.to_csv('file.csv', index=None)
データフレームの選択したカラムの第一四分位数	df[['列A', '列B']].quantile(0.25)
option: グラフの色を茶色に設定する	color = 'brown'
option: グラフの色をターコイズに指定する	color = 'turquoise'
ゼロ埋めされたブール型のベクトル	np.zeros(要素数, dtype=np.int32)
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
データフレームの欠損値をxにセットする	df.fillna(x)
回帰分析をバギングで行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
データフレームの選択したカラムの中にいくつNaNがあるか調べる	df[['列A', '列B']].isna().sum()
データフレームから5行、サンプリングする	df.sample(5)
ライムグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='limegreen')
option: グラフの色をフローラルホワイトにセットする	color = 'floralwhite'
データフレームの中である列に重複があれば、削除する	df.drop_duplicates(subset='列A', inplace=True)
グリッドを実線にする	plt.grid(linestyle='solid')
データフレームのカラムを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
黄色にヒストグラムの色を設定する	plt.hist(データ列, color='yellow')
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横棒グラフをミディアムスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
文字列の末尾から空白を消す	s.rstrip(' ')
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
カラーバーを水平に付ける	plt.colorbar(orientation='horizontal')
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
ファイルから入力ストリームを見る	open(filepath)
日付時刻データからn分減らす	aDatetime - datetime.timedelta(minutes=n)
ゼロ埋めされた3２ビット整数型の行列を作る	np.zeros(要素数, dtype=np.int16)
NULLに等しい値	None
リストをシャッフルする	random.shuffle(aList)
整数nを二進表記に変換する	bin(n)
文字列を走査し、パターンにマッチするか見る	re.search(pattern, s)
線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
線グラフの色を青紫に変更する	plt.plot(データ列x, データ列y, color='violet')
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
浮動小数点数を切り上げる	math.ceil(x)
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
option: フォントの色をスカイブルーに変更する	color = 'skyblue'
ヒストグラムをグレー色を用いて描画する	plt.hist(データ列, color='gray')
折れ線グラフのマーカーを▲にする	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフに赤い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
カウンタをイテラブルで更新する	aCounter.update(iterable)
整数nがリストのどれかかどうか調べる	n in aList
折れ線グラフを貝殻色として描画する	plt.plot(データ列x, データ列y, color='seashell')
文字列の右側からタブを除去する	s.rstrip('\t')
ゴールデンロッドにヒストグラムの色を指定する	plt.hist(データ列, color='goldenrod')
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
nからn2を引いてnに代入する	n -= n2
棒グラフをイエローグリーン色として描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
option: 紺にグラフの色をセットする	color = 'darkblue'
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データシリーズの第一四分位数を算出する	ds.quantile(0.25)
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
組を昇順に並べる	sorted(aTuple, reverse=False)
データフレームの選択した列を小数点以下n桁で丸める	df[['列A', '列B']].round(n)
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
横棒グラフをバリーウッド色として描画する	plt.barh(データ列x, データ列y, color='burlywood')
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
ベクトルの行列式	np.linalg.det(aArray)
option: 読み込まない列番号をnamesで指定する	skiprows = names
option: パレットトルコイズ色を使う	color = 'paleturquoise'
二変数の最小値	min(x, y)
カウントプロットをプロットする	sns.countplot(x='列名', data=df)
変数の値をスワップする	x, y = y, x
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategray')
ヒストグラムをシーグリーン色として描画する	plt.hist(データ列, color='seagreen')
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
リストから文字列を取り除く	aList.remove(element)
パーセント付きの円プロットを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
文字列の両端から不要な空白を除く	s.strip()
option: 書き込み用に設定する	mode = 'w'
ヒストグラムの線の種類を一点鎖線にする	plt.hist(データ列, linestyle='dashbot')
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
折れ線グラフを四角印を用いて描画する	plt.plot(データ列x, データ列y, marker='s')
エクセルファイルから複数のシートを指定してデータフレームとして読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
データ列を二つ並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
文字列が文字列リストに含まれるか調べる	s in aStringList
行列のムーア・ペンローズの擬似逆行列を使う	np.linalg.pinv(aArray)
データフレームをグループ化しある列に対し合計を求める	df.groupby('列A')['列B'].sum()
パステル調にカラーパレットをグラフの描画で使う	sns.set(pallete='pastel')
ダークオリーブグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkolivegreen')
データ列のユニークな値の個数	ds.nunique()
色付きの一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
データフレームのカラムの調和平均を求める	scipy.stats.hmean(df['列A'])
キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
折れ線グラフのポイント印を赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
現在が水曜日か	datetime.datetime.today().weekday() == 2
淡いピンク色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
カラムの尖りを求める	scipy.stats.kurtosis(df['列A'], bias=False)
文字列の大文字と小文字を逆にする	s.swapcase()
線グラフの色を真紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
縦棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
カウンタを低頻出な方からリストとして得る	aCounter.most_common()[::-1]
option: オレンジレッド色を使う	color = 'orangered'
２つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
データフレームの指定したカラムのNaNをxにセットする	df['列A'].fillna(x)
縦棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
グラフを明るくする	sns.set(pallete='bright')
文字列をファイルに書く	f.write(s)
散布図の印をポイント印にする	plt.scatter(データ列x, データ列y, marker='.')
データフレームの選択したカラムは正規分布からどの程度、歪んでいるか見る	df[['列A', '列B']].kurt()
seabornのデフォルトスタイルを適用する	sns.set()
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
配列のトリム平均を計算する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
option: グラフの色をスチールブルーに変更する	color = 'steelblue'
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
option: マゼンタにグラフの色を設定する	color = 'magenta'
イテラブルの各要素に対して、predicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームの中に日付データと文字列がある	df.isin([value, value2])
やわらかい青色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
散布図をダークオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
要素はセットのメンバーに含まれるかどうか	element in aSet
キューの先頭から要素を取り出す	deq.popleft()
文字列を空白で区切って、文字列リストに変換する	s.split()
文字列を左寄せする	s.ljust(文字列幅)
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
ライトスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
実数の双曲線正接を計算する	math.tanh(x)
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
オプションで、ファイルを使う	file = sys.open(filename, 'w')
折れ線グラフを半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
スノー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
正則化付き線形回帰モデルを新規作成する	model = sklearn.linear_model.ElasticNet()
クラス分類のPPVを求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
タプルの末尾を取り除く	aTuple[:-1]
データフレームのカラムの歪度	df['列A'].kurt()
再帰の上限を上げる	sys.setrecursionlimit(1000000)
要素ひとつのタプル	(element,)
全要素を初期値で初期化した行列を初期化する	np.full((行数, 列数), 初期値, dtype=np.int)
データフレームをグループ化し各分散を計算する	df.groupby('列A').var()
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
多次元データを特異値分解で濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
組の要素をソートする	sorted(aTuple)
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
日付データが土曜日かどうか調べる	aDate.weekday() == 5
t分布型確率的近傍埋め込み法で濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
黒いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
option: ライトブルーにグラフの色を指定する	color = 'lightblue'
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
短い説明の位置を指定する	plt.legend(loc=(x, y))
縦棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
リストから両端キューを生成する	collections.deque(iterable)
データを四分位点としてスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
リストの末尾を求める	aList[-1]
データフレームの中の未入力値の合計を調べる	df.isna().sum()
折れ線グラフのバツマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
部分文字列を文字列の左側から探す	s.find(sub)
データフレームをグループ化し、最小値を計算する	df.groupby('列A').min()
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
表データの先頭10行	df.head(10)
データフレームを四捨五入して、整数にする	df.round().astype(int)
UTF8を用いて追加できるようにファイルをオープンする]	open(filepath, mode='a', encoding='utf-8')
整数nの十六進数表記	hex(n)
データ列の推移を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームをCSV形式にインデックスを付けず保存する	df.to_csv('file.csv', index=None)
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
欠損値を含めてデータフレームをあるカラムの値でグループ化する	df.groupby('列A', dropna=False)
ある列のカテゴリごとの平均値	df.groupby('列A').mean()
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
グラフのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
両端キューから最初の要素を取り除く	deq.remove(element)
出力するCSV形式の小数点以下の桁数を変更する	df.to_csv('file.csv', float_format='%.3f')
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
ヒストグラムの範囲を指定する	plt.hist(データ列, range=(start, end))
データを最大値と最小値として正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
オリベドラブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
セパレータで文字列を区切り、、列挙する	s.split(sub)
option: グリーンを用いる	color = 'green'
辞書順で文字列が文字列より前	s < s2
分割数nとして等量でデータ列を分割する	pd.qcut(ds, n)
データフレームの選択した列においてどの値が頻出か見る	df[['列A', '列B']].mode()
昇順にある列を用いてデータフレームを破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
NaNを使う	math.nan
文字列ひとつのタプル	(element,)
アンティークホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
黄色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
両端キューが空でないか調べる	len(deq) != 0
option: ミディアムオーキッドにグラフの色を変更する	color = 'mediumorchid'
日付データが金曜日	aDate.weekday() == 4
クリムゾンにヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
nをバイナリにする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
option: 色をマゼンタに設定する	color = 'magenta'
データフレームから型リストで指定したデータ型の列を除外する	df.select_dtypes(exclude=typeList)
2つのデータフレームをカラム名を指定して左ジョインする	pd.merge(df, df2, on='列A', how='left')
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
縦棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
ふたつの列からグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
option: 星マーカーを使う	marker = '*'
option: レベッカパープルにグラフの色を指定する	color = 'rebeccapurple'
文字列リストを連結し、一つの文字列にする	''.join(aStringList)
凡例をプロット中の(x,y)の位置に表示する	plt.legend(loc=(x, y))
散布図の左三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
t分布型確率的近傍埋め込み法の準備をする	model = sklearn.manifold.TSNE(n_components=n)
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
縦棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
入力から二つの浮動小数数値を取り出す	A, B = map(float, input().split())
折れ線グラフのマーカーを星印にする	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
散布図の下三角印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
数値をプリントする	print(value)
改行を取り除いてファイルを一行ずつ読み込む	f.readline()
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
データフレームの欠損値をモードに設定する	df.fillna(df.mode().iloc[0])
折れ線グラフを赤い破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
option: ダークスラテグレー色を使う	color = 'darkslategray'
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
オブジェクトのクラス	type(obj)
ミッドナイトブルー色でヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
データフレームの欠損値をその平均で置換する	df.fillna(df.mean())
プラム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
ヒストグラムをミスティローズ色を用いて描画する	plt.hist(データ列, color='mistyrose')
割合付きの円グラフをプロットする	plt.pie(データ列, startangle=90, autopct='%.2f%%')
棒グラフをライトサーモン色として描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
ミディアムバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumvioletred')
nとn2の和を求める	n + n2
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
リストの値を関数に適用した結果でソートする	sorted(aList, key=func)
浮動小数点数のハイパボリック・コサインを求める	math.cosh(x)
赤い破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
新しいロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームが重複しているか調べる	df.duplicated()
カウンタのボトムを列挙する	aCounter.most_common()[:-n-1:-1]
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
nとkのnCk	math.comb(n, k)
縦棒グラフをダークグレー色を使って描画する	plt.bar(データ列x, データ列y, color='darkgray')
ヒストグラムを点線で描く	plt.hist(データ列, linestyle='dotted')
リスト内の要素が少なくともひとつ真かどうか調べる	any(aList)
ある列ごとの標準偏差を算出する	df.groupby('列A').std()
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: ダークゴールデンロッドに色を変更する	color = 'darkgoldenrod'
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
クラス分類の正確さを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
縦棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
散布図の右三角印を赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
データシリーズが正規分布からどの程度、歪んでいるか確認する	ds.kurt()
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
リストの最初の文字列を探す	aList.index(element)
データ列を箱ひげ図で描く	plt.boxplot(データ列)
線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
option: 左三角印を加える	marker = '<'
データフレームのある列をベクトルにする	pd.get_dummies(df['列A'])
コーンズシルク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
xが-9以上9以下か	-9 <= x <= 9
文字列の最初の文字を使う	s[0]
サンディーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
数値の簡略化を行う	sympy.sympify(e)
ミディアムアクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームのカラムのn次モーメントを計算する	scipy.stats.moment(df['列A'], moment=n)
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
リストとリストの散布図に黒い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
表データをインポートする	import pandas as pd
ゴールデンロッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームのあるカラムの平均値	df['列A'].mean()
小さい順にリストをソートする	sorted(aList, reverse=True)
データシリーズは何年か見る	ds.dt.year
折れ線グラフをロイヤルブルー色として描画する	plt.plot(データ列x, データ列y, color='royalblue')
オブジェクトが数値	isinstance(obj, (int,float))
線グラフの色をスラグレーにセットする	plt.plot(データ列x, データ列y, color='slategray')
option: グラフの色をライトサーモンに変更する	color = 'lightsalmon'
縦棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
プラットフォームのコードポイントの最大値	sys.maxunicode
指定したカラムの文字列をNaNにする	df['列A'].replace(値, np.nan)
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
文字列は組の要素でないかどうか	element not in aTuple
データフレームのあるカラムを丸めて整数型にする	df['列A'].round().astype(int)
グラフの横軸にラベルをつける	plt.xlabel('x軸ラベル')
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
半透明の一点鎖線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
option: マーカーの色を青緑にする	markerfacecolor = 'turquoise'
ヒストグラムの色を深紅に指定する	plt.hist(データ列, color='crimson')
カウンタのそれぞれの文字列を、その出現回数だけ列挙する	aCounter.elements()
データフレームのある列の値がxに等しくない行を取り出す	df[df['列A'] != x]
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
1文字だけ標準入力から読む	sys.stdin.read(1)
濃い青色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
nとn2のXORを求める	n ^ n2
データフレームのある列の中にいくつNaNがあるか数える	df['列A'].isna().sum()
option: 先頭の行をヘッダにセットする	header = 0
ビン数nでデータフレームの中の列をビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
辞書のキーとその項目をペアとして取り出す	aDict.items()
折れ線グラフをシアン色を使って描画する	plt.plot(データ列x, データ列y, color='cyan')
ASCII限定としてパターンで文字列を分割する	re.split(pattern, s, flags=re.ASCI)
データフレームの選択した列を丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
散布図をミッドナイトブルー色として描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームの選択したカラムのNaNをその第二四分位数で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
データフレームのカラムを丸めて、整数型にする	df['列A'].round().astype(int)
前もって正規表現をコンパイルする	re.compile(pattern)
散布図をハニーデュー色を用いて描画する	plt.scatter(データ列x, データ列y, color='honeydew')
ある列のカテゴリごとの標準偏差	df.groupby('列A').std()
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
n引くn2	n - n2
nが5で割り切れるかどうか調べる	n % 5 == 0
色付きの点線を使って線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
日付データが日付データと同時か調べる	aDate == aDate2
ヒストグラムの線の種類を実線に指定する	plt.hist(データ列, linestyle='solid')
最初の部分文字列で文字列を二分し前半の文字列を使う	s.partition(sub)[0]
点線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
nが3の倍数か調べる	n % 3 == 0
データフレームのカラムの文字列を未入力値に変換する	df['列A'].replace(値, np.nan)
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
option: カーキを使用する	color = 'khaki'
二点間のユークリッド距離	math.dist(point, point2)
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
ヒストグラムをダークマゼンタ色として描画する	plt.hist(データ列, color='darkmagenta')
８ビット整数型の全要素を０で初期化した行列を作成する	np.zeros(行数, 列数, dtype=np.int8)
リストを赤色でプリントする	print(f'\033[31m{value}\033[0m')
実行結果を白色でプリントする	print(f'\033[37m{value}\033[0m')
データフレームの先頭10行を見る	df.head(10)
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
浮動小数点数の平方根を求める	math.sqrt(x)
option: ダークオリーブグリーンを用いる	color = 'darkolivegreen'
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
option: シルバー色を使う	color = 'silver'
オブジェクトは数値	isinstance(obj, (int,float))
サンディーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
日付時刻データにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
リストと配列についての散布図に黒い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
散布図の▼マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
数式の平方根を求める	sympy.sqrt(e)
ヒストグラムの色をグレーに変更する	plt.hist(データ列, color='gray')
数値を下線付き化する	f'\033[4m{value}\033[0m'
プロットの色を全般的に淡くする	sns.set(pallete='muted')
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
双方向キューは空でない	len(deq) != 0
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
0からN未満までの配列	np.arange(N)
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
データフレームのカラムの調和平均	scipy.stats.hmean(df['列A'])
折れ線グラフのクロスマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ゼロ埋めされた複素数型のベクトルを初期化する	np.zeros(要素数, dtype=bool)
データフレームをあるカラムによって昇順に破壊的に並べる	df.sort_values(by='列A', ascending=True, inplace=True)
カウンタを高頻出方から列挙する	aCounter.most_common()
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
実線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
散布図に四角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='s')
データフレームからランダムにn行を抽出する	df.sample(n)
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
関数の値でデータフレームを集約する	df.groupby(関数)
散布図に左三角印を使う	plt.scatter(データ列x, データ列y, marker='<')
データフレームのあるカラムの歪度を求める	df['列A'].kurt()
赤い菱形マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
文字列が文字列より辞書順で後か調べる	s > s2
ヒストグラムの色を青に変更する	plt.hist(データ列, color='blue')
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
ライムグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
アルファベットを全部求める	string.ascii_letters
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
プロットのフォントを日本語に指定する	sns.set(font='IPAexGothic')
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
配列としてデータフレームのある列を抽出する	df['列A'].values
option: 半透明にする	alpha = 0.5
オブジェクトがフィールドを持つかどうか	hasattr(obj, プロパティ名)
線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
データフレームの指定したカラムの母標準偏差	df['列A'].std(ddof=0)
インデックスを付けずデータフレームを書き出す	df.to_csv('file.csv', index=None)
ダークカーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
プロットのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
データフレームの列の名前をまとめて置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
配列の累積和	np.cumsum(aArray)
二つの文字列をタブで区切って出力する	print(value, value2, sep='\t')
貝殻色でヒストグラムを描画する	plt.hist(データ列, color='seashell')
フォレストグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
option: 丸マーカーを描画する	marker = 'o'
最大長を指定して、双方向キューを生成する	collections.deque(maxlen=n)
データフレームを指定した列の値によってグループ化する	df.groupby('列A')
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
要素がセットに含まれるかどうか調べる	element in aSet
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
カラーパレットを淡くする	sns.set(pallete='muted')
文字列を空白によって分割し、、整数リストに変換する	map(int, s.split())
散布図をドジャーブルー色として描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
nがn2よりも大きいか	n > n2
モデルの訓練を開始する	model.fit(説明変数, 目的変数)
リストとリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ヒストグラムの色をナバホホワイトに指定する	plt.hist(データ列, color='navajowhite')
全ての印字	string.printable
リストをnから順序付けする	enumerate(aList, start=n)
実数のサインの逆数	math.asin(x)
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
複数の列からグループ化し最小値を計算する	df.groupby(['列A', '列B'], as_index=False).min()
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
主成分分析を用いて淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
プロットをポスター用に設定する	sns.set(context='poster')
浮動小数点数の符号を同じにする	math.copysign(x, x2)
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
データフレームをソートして、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
文字列をコロンで分割して、文字列リストにする	s.split(':')
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
全要素を０で初期化した複素数型の行列を作る	np.zeros(行数, 列数, dtype=bool)
計算機イプシロン	sys.float_info.epsilon
辞書順で文字列は文字列より後	s > s2
日付データにn秒分加算する	aDate + datetime.timedelta(seconds=n)
ダークオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
整数乱数の配列	np.random.randint(開始値, 終了値, N)
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
データフレームを丸めて整数にする	df.round().astype(int)
option: オーキッドを使用する	color = 'orchid'
ミディアムバイオレットレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
イテラブルを文字列に変換して、空白で連結する	' '.join(map(str, iterable))
データフレームを二つの列によってソートする	df.sort_values(by=['列A', '列B'])
黒い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='k')
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
要素が両端キューの中に含まれてるかどうか調べる	element in deq
カウンタのキーと出現回数を列挙する	aCounter.items()
二つの最小値	min(x, y)
option: ダークマゼンタにフォントの色を指定する	color = 'darkmagenta'
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームの指定したカラムの値が欠損値か調べる	df['列A'].isna()
リストを水色で出力する	print(f'\033[36m{value}\033[0m')
option: アンティークホワイト色を使う	color = 'antiquewhite'
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
year年の日付	datetime.date(year=year, month=1, day=1)
双方向キューに数値をプッシュする	deq.append(element)
折れ線グラフの大バツ印を青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
カウンタの各要素を、その出現回数だけ列挙する	aCounter.elements()
部分文字列か調べる	sub in s
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
ベクトルをフラット化する	aArray.flatten()
option: ライトイエロー色を用いる	color = 'lightyellow'
ゴールド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
option: ポイントマーカーを描画する	marker = '.'
データフレームの列の各値の出現数	df[col].value_counts()
nが偶数か調べる	n % 2 == 0
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
データフレームをグループ化し、それぞれの最小値を求める	df.groupby('列A').min()
TSVファイルを読み込む	pd.read_csv('file.tsv', sep='\t')
要素一つのりスト	[element]
数値を簡略化する	sympy.sympify(e)
カテゴリ列で色分けして、データフレームをにバイオリン図でプロットする	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列を最後の部分文字列で分けた場合の前半の文字列	s.rpartition(sub)[0]
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
シーケンスの重複組み合せ	itertools.combinations_with_replacement(iterable, n)
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
nの八進数文字列	oct(n)[2:]
サドルブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
グラフのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
アクア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
ふたつの列でグループ化し、最大値を計算する	df.groupby(['列A', '列B'], as_index=False).max()
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
ランダム性を追加したランダムフォレストで回帰分析をする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
日付時刻データからn分、減らす	aDatetime - datetime.timedelta(minutes=n)
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
折れ線グラフをベージュ色として描画する	plt.plot(データ列x, データ列y, color='beige')
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightseagreen')
データフレームのカラムの幾何平均を求める	scipy.stats.gmean(df['列A'])
プログラムを異常終了する	sys.exit(1)
指定した列で集計し、最大値を計算する	df.groupby('列A').max()
黒いダイアモンドマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: 青紫を使う	color = 'violet'
カウンタから最頻出な文字列の件数	aCounter.most_common()[1]
黒色で文字列をプリントする	print(f'\033[30m{value}\033[0m')
イテラブルと数列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームの一部のカラムを千の位で四捨五入して整数にする	df[['列A', '列B']].round(-3).astype(int)
タイムスタンプデータがタイムスタンプデータより先	aDatetime < aDatetime2
半透明の一点鎖線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
文字列リストにイテラブルを変換して、'改行を用いて連結する	'\n'.join(map(str, iterable))
縦棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
データフレームの中に日付データがあるかどうか調べる	df.isin([value])
データフレームの値を正規表現でまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
nまたはn2	n or n2
正規表現をあらかじめASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームの指定したカラムの中に文字列と文字列がいくつ含まれるか数える	df['列A'].isin([value, value2]).sum()
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
データフレームの相関行列	df.corr()
ヒストグラムをミディアムパープル色を使って描画する	plt.hist(データ列, color='mediumpurple')
option: フォントの色をオレンジに設定する	color = 'orange'
折れ線グラフの四角印を赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
閾値として二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
ヒストグラムの線種を一点鎖線にセットする	plt.hist(データ列, linestyle='dashbot')
半透明の一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
option: フォントの色をライトイエローに変更する	color = 'lightyellow'
日付データが火曜日か調べる	aDate.weekday() == 1
option: 文字コードtextを使う	encoding = text
グリッド線を黒くする	plt.grid(color='k')
タプルをカンマ区切りで出力する	print(*aTuple, sep=',')
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
グラフをスライド用に設定する	sns.set(context='talk')
最大最小値でスケーリングする	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ふたつの列からグループ化し、個数を計算する	df.groupby(['列A', '列B'], as_index=False).count()
縦棒グラフをビスク色を用いて描画する	plt.bar(データ列x, データ列y, color='bisque')
綺麗なグラフを用いる準備をする	import seaborn as sns
文字列の左側からタブを取り除く	s.lstrip('\t')
データフレームの選択したカラムの欠損値を最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
浮動小数点数を千の位で丸める	round(x, -3)
ロージーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
リストをタプルにする	tuple(aList)
option: モカシンを用いる	color = 'moccasin'
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
配列を一次元にする	aArray.flatten()
空の部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
nはリストのどれかか調べる	n in aList
辞書をクリアする	aDict.clear()
ヒストグラムの色をシエナに変更する	plt.hist(データ列, color='sienna')
正規分布か仮説検定する	scipy.stats.shapiro(df['列A'])
リネン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
列を指定して重複を消す	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
変数を黒色にする	f'\033[30m{value}\033[0m'
複素数を求める	complex(x, y)
中央値で配列をビン分割する	pd.qcut(aArray, 2)
エラーなく辞書からキーの値を参照する	aDict.get(key, None)
外れ値に強い単クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
グラフをプレゼン用に設定する	sns.set(context='talk')
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
表データの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
チョコレート色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
表データのデータ型の一覧	df.dtypes
横棒グラフの色をブラウンにする	plt.barh(データ列x, データ列y, color='brown')
リストから配列を初期化する	np.array(aList)
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
日付時刻データにn週間分、加える	aDatetime + datetime.timedelta(weeks=n)
平均と分散を使って標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データシリーズの不偏標準偏差	ds.std()
横棒グラフをバリーウッド色を用いて描画する	plt.barh(データ列x, データ列y, color='burlywood')
2つのオブジェクトが同一参照か調べる	obj is obj2
ポイント印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
option: ライトグリーンにグラフの色をセットする	color = 'lightgreen'
レベッカパープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームの一部の列を一万の位で丸める	df[['列A', '列B']].round(-4)
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
数値をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
二つの文字列は等しくないかどうか調べる	s != s2
リストとデータ列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームの指定したカラムの欠損値を後の行の値に設定する	df['列A'].fillna(method='bfill')
option: サンディーブラウン色を使用する	color = 'sandybrown'
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
データシリーズの欠損値を最大値で埋める	ds.fillna(ds.max())
option: 分割記号をカンマにする	sep = ','
オレンジレッド色でヒストグラムを描画する	plt.hist(データ列, color='orangered')
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
クラス分類のPPVを計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
２つのデータフレームを異なる列をキーとして右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
データフレームからn行サンプリングする	df.sample(n)
カテゴリ列でグループ化して、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
2次元タプルをフラット化する	sum(aTuple)
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
option: ダークターコイズ色を使う	color = 'darkturquoise'
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
２つのカウンタの共通する値	aCounter & aCounter2
何回まで再帰ができるかを確認する	sys.getrecursionlimit()
配列を等量でn個に分割する	pd.qcut(aArray, n)
option: シーグリーン色を使用する	color = 'seagreen'
補足を追記する	plt.legend(['凡例A', '凡例B'])
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
イテラブルの各値をキューの末尾に付け加える	deq.extend(iterable)
浮動小数点数を十六進表記の文字列にする	x.hex()
日付データからn日を減算する	aDate - datetime.timedelta(days=n)
nまでのスライス	slice(n)
列のユニークな要素	ds.unique()
実数の床を求める	math.floor(x)
線を半透明の破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームの一部のカラムの中に文字列とがある	df[['列A', '列B']].isin([value, value2])
ミディアムスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
データシリーズの月	ds.dt.month
予測結果の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
レベッカパープル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ふたつの集合の差を求める	aSet.difference(aSet2)
オブジェクトのハッシュ値	hash(obj)
部分文字列が文字列の終了位置より前にないか判定する	s.find(sub, 0, end) == -1
列名を指定してデータフレームをジョインする	pd.merge(df, df2, on='列A')
ロージーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの選択したカラムのNaNを直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
option: サンディーブラウン色を用いる	color = 'sandybrown'
データフレームを関数の値によって集約して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
データフレームの選択した列のNaNを直後の値で補う	df[['列A', '列B']].fillna(method='bfill')
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
option: ブルーバイオレットを使う	color = 'blueviolet'
試しに何か動かす	print('Hello World')
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
散布図の▽マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
縦棒グラフをミディアムスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
文字列が全て空白文字か調べる	s.isspace()
option: スカイブルーにグラフの色を設定する	color = 'skyblue'
データフレームの末尾n行を選ぶ	df.tail(n)
散布図をポイント印を使って描画する	plt.scatter(データ列x, データ列y, marker='.')
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
データフレーム中の未入力値を破壊的に除く	df.dropna(inplace=True)
散布図に赤い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
双方向キューのstart番目からendの要素	collections.deque(itertools.islice(deq, start, end))
option: ミディアムシアグリーンにグラフの色を変更する	color = 'mediumseagreen'
データフレームを表示するとき、n列までデータフレームを表示するようにする	pd.set_option('display.max_columns', n)
データフレームの指定したカラムを10の位で丸める	df['列A'].round(-1)
折れ線グラフの色をミディアムシアグリーンに変更する	plt.plot(データ列x, データ列y, color='mediumseagreen')
ライトブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightblue')
散布図の大バツマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
二つの関係が部分集合かどうか調べる	aSet.issubset(aSet2)
option: アクアマリン色を使う	color = 'aquamarine'
双方向キュー中の要素の数を数える	deq.count(element)
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
option: シエナを使う	color = 'sienna'
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
実数の絶対値を求める	math.fabs(x)
データ列の一意な要素数を見る	ds.nunique()
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームのある列を配列にする	df['列A'].values
縦棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
高頻出方からカウンタをリストとして得る	aCounter.most_common()
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
nが負の整数か調べる	n < 0
ふたつのリストの積集合を求める	list(set(aList) & set(aList2))
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
リストの先頭を除く	aList[1:]
マップを浅くコピーする	aDict.copy()
棒グラフをライトグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgreen')
タイムスタンプデータの月	aDatetime.month
文字列内にひとつでも空白があるか調べる	any(c.isspace() for c in s)
縦棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
文字列の先頭で正規表現にケースを無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームの指定したカラムを万の位で丸める	df['列A'].round(-4)
行列の標準偏差を求める	np.std(aArray)
option: グラフの色をダークオレンジにする	color = 'darkorange'
クラス分類をガウス過程を用いて行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
x座標の最大・最小を変更する	plt.xlim(最小値, 最大値)
xの小数点以下'3'桁までプリントする	print(':.3f'.format(x))
▽マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
日付時刻データが何秒か知る	aDatetime.second
option: ライトグレー色を使う	color = 'lightgrey'
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
option: グラフの色をペルーに変更する	color = 'peru'
オブジェクトの種類	type(obj)
カテゴリで色付けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
異なる列をキーとしてデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
赤い左三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列を最後の部分文字列で二分する	s.rpartition(sub)
散布図の色を淡い茶色にする	plt.scatter(データ列x, データ列y, color='tan')
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
ティール色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
データフレームのカテゴリごとの散布図に線形回帰を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
nが-9以上、9以下か調べる	-9 <= n <= 9
三変数の最も大きい値を計算する	max(x, y, z)
英字の小文字を使う	string.ascii_lowercase
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
分割数nとしてリストをビンニングする	pd.cut(aList, n)
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
ファイルを読み込み用に開く]	open(filepath, mode='r')
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
option: グレーを使う	color = 'gray'
配列の相乗平均を求める	scipy.stats.gmean(配列)
プロットのパレットを明るくする	sns.set(pallete='bright')
実数の指数を計算する	math.frexp(x)[1]
正規分布にしたがってランダムに配列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
表データのあるカラムの分を使う	df['列A'].dt.minute
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
データフレームの指定したカラムの中の欠損値の合計を数える	df['列A'].isna().sum()
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
データフレームの選択した列の未入力値をその平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
タイムスタンプデータが何時か知る	aDatetime.hour
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
ユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
option: スノーを使用する	color = 'snow'
データシリーズの欠損値を最大値に指定する	ds.fillna(ds.max())
半透明の一点鎖線としてリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ふたつの集合が集合と互いに素かどうか調べる	aSet.isdisjoint(aSet2)
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
xの小数点以下'5'桁までを表示する	print(':.5f'.format(x))
文字列の右側から改行を取り除く	s.rstrip()
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
正規分布として疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
ベクトルの演算をする	import numpy as np
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
要素ひとつのりストを作る	[element]
データ列の推移を青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
二つのデータフレームを横方向に結合する	pd.concat([df, df2], axis=1)
スラグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
タイムスタンプデータををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
線グラフをスノー色として描画する	plt.plot(データ列x, データ列y, color='snow')
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
青い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
アイボリー色でヒストグラムを描画する	plt.hist(データ列, color='ivory')
10を底とする浮動小数点数の対数	math.log10(x)
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
option: グラフの色をモカシンに設定する	color = 'moccasin'
データフレームの第二四分位数	df.median()
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
書き込み用に文字列の示す文字コードでファイルをオープンする]	open(filepath, mode='w', encoding=s)
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
散布図の星マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
option: ダーク・スラテグレーにグラフの色を設定する	color = 'darkslategrey'
ブルーバイオレット色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
グラフからグリッド線を消す	plt.grid(False)
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
n個分キューの値を左にローテンションする	deq.rotate(-n)
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
スタックの要素を右にn個分ローテンションする	deq.rotate(n)
2を底とする実数の対数を計算する	math.log2(x)
nが1、もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
データフレームのカラムのケンドールの順位相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
外れ値に強い回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
ラベンダーブラッシュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
散布図の大バツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
散布図の▽マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
等量でリストをn個にビン分割する	pd.qcut(aList, n)
カウンタ間で積集合演算する	aCounter & aCounter2
ダークオレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
散布図の星マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
ひとつでも非小文字が文字列中に含まれるか調べる	any(not c.islower() for c in s)
データフレームを並べ直す	df.sort_values('キーとなる列')
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
option: ポイントマーカーを使う	marker = '.'
二つの浮動小数点数は十分に近いか調べる	math.isclose(x, x2)
入力から二つの文字列を読む	A, B = map(str, input().split())
横棒プロットの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
黒い▲印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
列を全てdatetime64型に変換する	pd.to_datetime(df['列A'])
ゼロ埋めされた3二ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
イテラブルと数列についての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの指定した列の中にいくつ欠損値があるかカウントする	df['列A'].isna().sum()
小数点数以上の最小の整数	math.ceil(x)
ファイルパスを追加できるようにUTF8としてオープンする]	open(filepath, mode='a', encoding='utf-8')
データ列の折れ線グラフを描画し、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
単位正方行列	np.identity(n)
2つのデータフレームを縦に一つにする	pd.concat([df, df2], axis=0)
赤い四角マーカーをリストとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
リストが空でないかテストする	len(aList) != 0
散布図の▲マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
棒グラフをシーグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='seagreen')
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
マゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
折れ線グラフを青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ドジャーブルー色でヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
イテラブルをカウントしてカウンタから減らす	aCounter.subtract(iterable)
ミスティローズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
データフレームがどれだけ分散しているか見る	df.var()
データシリーズのNaNを最小値に設定する	ds.fillna(ds.min())
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
列を変更不能な集合に変換する	frozenset(iterable)
多項式回帰データフレームの散布図にを加える	sns.regplot(data=df, x='列名', y='列名', order=2)
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
逆双曲線正弦を求める	math.asinh(x)
全要素を０で初期化した符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
文字列を隔離する	sys.intern(s)
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
改行せず数値を出力する	print(value, end='')
リストの末尾を取り除く	aList[:-1]
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
データフレームのカラムの一覧を確認する	df.info()
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
データシリーズの中にがあるか	ds.isin([value])
ライムグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
option: バッファリングを無効にする	buffering = 0
キューの最大長を使う	deq.maxlen
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
文字列が全て数字か確認する	s.isdigit()
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
データフレームのあるカラムの曜日の名前	df['列A'].dt.weekday_name
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
ヒストグラムベースの勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
文字の文字コードを見る	ord(ch)
データフレームを万の位で丸める	df.round(-4)
n個にリストをビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
行列を2次元1行に変形する	aArray.reshape(1, -1)
データフレームを２つの列によって小さい順に破壊的に並べる	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
カレント作業ディレクトリ	os.getcwd()
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
ガンマ関数の値	math.gamma(x)
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
ファイルをバイナリ書き込み用にオープンして]、fとする	f = open(filepath, mode='wb')
分数の分子	q.numerator
TSVファイルを用いてデータフレームを保存する	df.to_csv('file.tsv', sep='\t')
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データ列の各データは何回出現するか見る	ds.value_counts()
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
折れ線グラフの菱形マーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
カウンタからマッピングを引く	aCounter.subtract(aDict)
散布図に大バツマーカーを使用する	plt.scatter(データ列x, データ列y, marker='X')
nが奇数	n % 2 == 1
事前に正規表現をコンパイルする	re.compile(pattern)
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
配列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
日付データが土曜日	aDate.weekday() == 5
データシリーズを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
データフレームから同じ内容の行をドロップする	df.drop_duplicates(inplace=True)
折れ線グラフに赤い▽印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
option: グラフの色を青緑にセットする	color = 'teal'
本日の日付時刻	datetime.datetime.today()
option: ピンク色を使う	color = 'pink'
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
折れ線グラフのマーカーを▼にする	plt.plot(データ列x, データ列y, marker='v')
出現頻度を可視化する	plt.hist(データ列)
option: 行方向に処理する	axis = 1
平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
プログラムの実行を強制的に止める	sys.exit()
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
文字列全体をパターンにマッチさせる	re.fullmatch(pattern, s)
option: 文字コードを文字コードtextに変更する	encoding = text
nがn2以下、それか、n3以上か	n <= n2 or n >= n3
ヒストグラムをライトイエロー色として描画する	plt.hist(データ列, color='lightyellow')
空のマッピングを生成する	{}
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
ダークターコイズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
リストの先頭の値	aList[0]
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
タプルの各値を関数に適用した結果でソートする	sorted(aTuple, key=func)
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
文字列リストをひとつの文字列にする	''.join(map(str, iterable))
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
記号計算モジュールを使う	import sympy
折れ線グラフを淡い茶色色で描画する	plt.plot(データ列x, データ列y, color='tan')
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
淡いピンク色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
整数nの2進表現	bin(n)
文字列中に漢字がある	re.search('[\u4E00-\u9FD0]', s)
配列の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
浮動小数点数の余弦の逆数	math.acos(x)
赤い▲マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ふたつのカラムを組み合わせてグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
正規表現patternで一度にデータフレームの選択した列の値を置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
プロットで使用する横軸のラベルを設定する	plt.xlabel('x軸ラベル')
標準入力から改行を取り除いて1行だけ読む	sys.stdin.readline().rstrip()
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
実数を十の位で丸める	round(x, -1)
ファイルパスから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
option: サドルブラウンにフォントの色を設定する	color = 'saddlebrown'
データフレームの選択したカラムの欠損値を中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
破壊的に複数の列によってデータフレームを大きい順にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
nが5で割り切れる	n % 5 == 0
データフレームの一部のカラムの尖度を計算する	df[['列A', '列B']].skew()
空白で文字列を分割して、文字列リストにする	s.split()
集合から別のセットとの共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
データフレームの尖度を求める	df.skew()
数列とリストの散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
FIXME:カテゴリーデータを出現頻度順にソートする	df['列A'].value_counts().sort_index().index
縦棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
ベージュ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
ファイルが存在するか確認する	os.path.exists(filepath)
クラス分類のリコールを計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ヒストグラムをパールバイオレットレッド色として描画する	plt.hist(データ列, color='palevioletred')
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
xが1、もしくは2	x == 1 or x == 2
全ての印字可能な文字	string.printable
option: ダークサーモン色を使用する	color = 'darksalmon'
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
イテラブルの全順列を求める	itertools.permutations(iterable)
等間隔のベクトルを初期化する＼	np.arange(開始値, 終了値, 等差)
実数の逆正弦	math.asin(x)
カウンタの要素一覧を使う	aCounter.keys()
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
year年month月の日付	datetime.date(year=year, month=month, day=1)
線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
黒い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
折れ線グラフの色をオリーブにする	plt.plot(データ列x, データ列y, color='olive')
空文字を使う	''
辞書を改行付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
シアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
option: マーカーの太さを変更する	markeredgewidth = 2.5
集合の補集合	aSet.difference(aSet2)
正規表現でカラムの値をまとめてreplに置換する	df['列A'].replace(pattern, repl, regex=True)
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
データフレームの記述統計量	df.describe()
option: グラフの色をマルーンに変更する	color = 'maroon'
リストを等量でn個にビン分割する	pd.qcut(aList, n)
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
バイアスなしの重回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ダークマゼンタ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
文字列を右トリムする	s.rstrip()
ライム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
ダークレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
文字列の開始位置から部分文字列を探す	s.find(sub, start)
ユニークな値を要素とする配列	np.unique(aArray)
option: 文字列の示す文字コードを使う	encoding = s
option: ライトスカイブルーを使う	color = 'lightskyblue'
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
黒い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
円グラフを正円にする	plt.axis('equals')
データシリーズが何秒か知る	ds.dt.second
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
ゼロ埋めされた整数型の配列を作る	np.zeros(要素数, dtype=np.int)
実数から整数を引く	x - y
リストとリストの散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの列のNaNを直前の値で埋める	df['列A'].fillna(method='ffill')
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
リストとリストについて散布図を描画してマーカーを▼にする	plt.plot(データ列x, データ列y, marker='v')
単位行列	np.eye(行数, 列数)
折れ線グラフに大バツ印を加える	plt.plot(データ列x, データ列y, marker='X')
nにn2をかける	n * n2
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
nを16進表現にする	hex(n)
スピアマンの相関係数を使う	scipy.stats.spearmanr(配列, 配列2)
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
ミディアムシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
データフレームをある列のカテゴリでグループ化する	df.groupby('列A')
文字列を走査し、パターンに複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
キーワード引数としてマッピングに更新する	aDict.update(**kwargs)
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
あるカラムの欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
黒い右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
データシリーズを千の位で丸めて、整数型にする	ds.round(-3).astype(int)
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームの中の列を分割数nとしてビニングする	pd.cut(df[col], n)
文字列が全てASCII文字	s.isascii()
エクセルファイルから複数のシートを読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
データフレームの選択した列のNaNをメディアンに指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
BOM付きで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
最大値・最小値を用いて整数乱数を生成する	random.randint(最小値, 最大値)
配列を四分位数でビン分割する	pd.qcut(aArray, 4)
データフレームをソートして下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
ヒストグラムの色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
数式のパラメータについてのn階微分を行う	sympy.diff(e, z, n)
スーパーセットか調べる	aSet.issuperset(aSet2)
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
option: グラフの色をミントクリームに設定する	color = 'mintcream'
option: グラフの色をライトグレーに設定する	color = 'lightgray'
としてデータフレームの相関行列を求める	df.corr(method='kendall')
線グラフをピンク色として描画する	plt.plot(データ列x, データ列y, color='pink')
データフレームの母標準偏差	df.std(ddof=0)
積み上げ横棒プロットを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
文字列の文字数	len(s)
データフレームの列間の相関行列をまとめて求める	df.corr()
アイボリー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
列名を指定して二つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
赤い上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ミディアムシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumseagreen')
配列をn個に等間隔でビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームを降順に二つの列でソートする	df.sort_values(by=['列A', '列B'], ascending=False)
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
文字列は全て数値かどうか調べる	s.isnumeric()
データフレームの列のユニークな要素	df[col].unique()
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
折れ線グラフをホワイトスモーク色として描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
最大長を指定して、双方向キュー	collections.deque(maxlen=n)
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
データフレームのインデックスの名前をまとめて付け直す	df.rename(index={x: y})
既存のファイルを追加できるようにSJISでオープンする]	open(filepath, mode='a', encoding='shift_jis')
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
空白で末尾から文字列を区切る	s.rsplit()
青色で散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
横棒グラフをグリーンイエロー色として描画する	plt.barh(データ列x, データ列y, color='greenyellow')
CSVを読む	pd.read_csv('file.csv', sep=',')
コロンで文字列を区切って、文字列リストに変換する	s.split(':')
浮動小数点数を百の位で丸める	round(x, -2)
線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
rgbの上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
オブジェクトは文字列か調べる	isinstance(obj, str)
データフレームのあるカラムを整数に丸める	df['列A'].round()
方程式として数式の変数の解を求める	sympy.solve(e, z)
暗い赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
今日が月曜日かどうか調べる	datetime.datetime.today().weekday() == 0
データシリーズの未入力値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
データシリーズの欠損値をxに設定する	ds.fillna(x)
タイムスタンプデータの秒数	aDatetime.second
散布図に赤いポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c='r')
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
オブジェクトはタプル	isinstance(obj, tuple)
ゼロ埋めされた行列	np.zeros(要素数)
ケンドール順位相関係数としてデータフレームの選択した列の相関行列を算出する	df[['列A', '列B']].corr(method='kendall')
折れ線グラフをシエナ色を使って描画する	plt.plot(データ列x, データ列y, color='sienna')
集合から何でもいいからひとつ取り除く	aSet.pop()
rgbの下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
実数が正の数	x > 0
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
データフレームを複数の列によって昇順に破壊的に整列する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
ヒートマップとして混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
ファイルを書き込みモードで開く]	open(filepath, mode='w')
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
option: グラフの色をラベンダーに変更する	color = 'lavender'
タブ区切りのファイルからデータフレームを読む	pd.read_csv('file.tsv', sep='\t')
データフレームのカラムの調和平均を使う	scipy.stats.hmean(df['列A'])
オプションでファイルを出力にする	file = sys.open(filename, 'w')
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
実数のハイパボリック・タンジェント	math.tanh(x)
折れ線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
コマンド引数の一覧を得る	sys.argv[1:]
日付データが日付データより前か調べる	aDate < aDate2
空の両端キューを作成する	collections.deque()
グラフのカラーパレットを全般的に暗くする	sns.set(pallete='dark')
散布図の星マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
値がセットに含まれるか調べる	element in aSet
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
option: マルーン色を使う	color = 'maroon'
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
ヒストグラムを耐火レンガ色を使って描画する	plt.hist(データ列, color='firebrick')
文字列を黄色にする	f'\033[33m{value}\033[0m'
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
ヒートマップとしてクラス分類の予測精度を確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
線グラフの色をライトサーモンにする	plt.plot(データ列x, データ列y, color='lightsalmon')
箱ひげ図に簡単な説明を設定する	plt.boxplot([データ列, データ列], labels=['A', 'B'])
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
range関数の無限バージョン	itertools.count(start=n, step=step)
二つの集合は互いに素	aSet.isdisjoint(aSet2)
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
リストの各値を関数に適用した結果で並べ直す	sorted(aList, key=func)
最大長nの両端キューを作る	collections.deque(maxlen=n)
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
n×n2	n * n2
文字列を改行で区切り、文字列リストに変換する	s.splitlines()
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
データシリーズが何曜日か見る	ds.dt.weekday_name
最大長nの両端キューを作成する	collections.deque(maxlen=n)
真部分集合か調べる	aSet < aSet2
日付データは日付データより後ろか	aDate > aDate2
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
二つのデータ列の残差を散布図としてプロットする	sns.residplot(x=データ列, y=データ列)
オリベドラブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
２つの列の値によってデータフレームを集計し、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
三２ビット整数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int16)
上限指定をしたデータフレームのカラムの分散を計算する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
縦棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
データフレームの選択した列を100の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
線グラフをオールドレース色を用いて描画する	plt.plot(データ列x, データ列y, color='oldlace')
表計算を読み込む	pd.read_excel('file.xlsx')
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
コーンズシルク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ヒストグラムをダークバイオレット色として描画する	plt.hist(データ列, color='darkviolet')
グラフをデフォルトでいい感じに設定する	sns.set()
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
リストと配列についての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
option: グラフの色をフローラルホワイトに変更する	color = 'floralwhite'
青緑色でヒストグラムを描画する	plt.hist(データ列, color='teal')
リストをプリントする	print(value)
濃くカラーパレットをグラフの描画で使う	sns.set(pallete='deep')
データフレームの指定したカラムの標準偏差	df['列A'].std()
縦方向に複数のデータフレームを結合する	pd.concat([df, df2, df3], axis=1)
ヒストグラムの色を茶色にセットする	plt.hist(データ列, color='brown')
ヒストグラムの色をマゼンタに変更する	plt.hist(データ列, color='magenta')
現在の作業ディレクトリ	os.getcwd()
リストの要素を関数に適用した結果で並べ変える	sorted(aList, key=func)
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
データシリーズの欠損値を中央値に設定する	ds.fillna(ds.median())
空の集合を使う	set()
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
文字列が全て空白文字からなるか調べる	s.isspace()
インデックスをキーにしてデータフレームをソートする	df.sort_index()
ミディアムシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
双方向キューの右からデータを取り出す	deq.pop()
データフレームの選択したカラムを100の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
散布図にrgbの丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
カラムの偏差値を算出する	50 + 10 * scipy.stats.zscore(df['列A'])
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
折れ線グラフの下三角印の色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
縦軸の目盛りを表示しない	plt.yticks([])
実数を三乗する	x ** 3
データフレームのn行までを選択する	df[:n]
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムをダークオリーブグリーン色を使って描画する	plt.hist(データ列, color='darkolivegreen')
散布図を紺色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
ブランチドアーモンドにヒストグラムの色を設定する	plt.hist(データ列, color='blanchedalmond')
左三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
ファイルパスをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
ダーク・スラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
ヒストグラムをローングリーン色として描画する	plt.hist(データ列, color='lawngreen')
データフレームの欠損値をxで埋める	df.fillna(x)
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
折れ線グラフの色をシャルトリューズにする	plt.plot(データ列x, データ列y, color='chartreuse')
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
二つの変数を同じ値にする	x = y = n
整数nが組のどれかかどうか調べる	n in aTuple
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
スレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
BOM付きでファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
２つの浮動小数点数が近似値か調べる	math.isclose(x, x2)
データフレームの中の列をn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
ファイルをUTF8を用いてオープンする]	open(filepath, encoding='utf-8')
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
配列を２つ並べてボックスチャートにする	plt.boxplot([データ列, データ列])
リストのn番目を削除する	del aList[n]
縦棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
三変数の最大値を求める	max(x, y, z)
マゼンタ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
散布図の下三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
配列の歪度を求める	scipy.stats.skew(配列, bias=False)
集合から全ての要素を取り除く	aSet.clear()
データフレームをソートする	df.sort_values('キーとなる列')
データシリーズが何月か知る	ds.dt.month
スチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
プロットで使用するタイトルを設定する	plt.title('グラフの名称')
二つのデータ列の散布図として残差をプロットする	sns.residplot(x=データ列, y=データ列)
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
小数点数を切り下げて整数に変換する	math.floor(x)
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの色をパウダーブルーに指定する	plt.plot(データ列x, データ列y, color='powderblue')
実線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのあるカラムのタイムゾーンを設定する	df['列A'].tz_convert('Asia/Tokyo')
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
option: 箱ひげ図に平均を追記する	showmeans = False
option: グラフの色をシエナに変更する	color = 'sienna'
実数とyの斜辺を求める	math.hypot(x, y)
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
オブジェクトが関数か調べる	callable(obj)
JSON形式のファイル入力を読み込んで、dataとする	data = json.load(fin)
オブジェクトが浮動小数点数クラスかどうか調べる	isinstance(obj, float)
ダークオーキッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
データフレームのカラムのn次モーメント	scipy.stats.moment(df['列A'], moment=n)
option: フォントの色をダークグレーに指定する	color = 'darkgray'
データ列の割合を円グラフで可視化する	plt.pie(データ列, startangle=90)
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
散布図の星マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
グラフの描画で明るくパレットを用いる	sns.set(pallete='bright')
option: ネイビーを使う	color = 'navy'
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
実数とyの斜辺	math.hypot(x, y)
文字列はリストの要素か調べる	element in aList
xの小数点以下'3'桁までを表示する	print(':.3f'.format(x))
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
散布図をオリベドラブ色として描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
リストと配列の散布図にダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
option: データ型として複素数型を用いる	dtype = bool
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
グラフを濃くする	sns.set(pallete='deep')
重回帰モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
黒いポイントマーカーを数列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームのある列を抽出する	df['列A']
辞書の項目名に対応した値を得る	aDict.get(key)
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
折れ線グラフをミスティローズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mistyrose')
レベッカパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
データフレーム中の未入力値をドロップする	df.dropna(inplace=True)
ミディアムシアグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
空のチェーンマップ	collections.ChainMap()
ダークターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
散布図に赤い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
データフレームの選択したカラムの欠損値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
文字列の右側から不要な空白を除く	s.rstrip()
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
2つ並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
JSONフォーマットの文字列をロードする	json.loads(jsonString)
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
実数を実数で除算した余り	x % y
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
ヒストグラムをラベンダー色として描画する	plt.hist(データ列, color='lavender')
データを四分位点でスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
両端キューが空であるかどうか調べる	len(deq) == 0
ベクトルの最大値	np.max(aArray)
option: グラフの色をビスクにする	color = 'bisque'
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
見やすいグラフを使用する	import seaborn as sns
横に並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列])
ダークブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
小数点数の常用対数を求める	math.log10(x)
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームのカラム間のピアソンの相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
データフレームの重複を確認する	df.duplicated()
nをn2で割ったmodを求める	n % n2
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
二つの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
列名を指定して表データを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
option: フォントの色をバリーウッドに変更する	color = 'burlywood'
外れ値を除いた配列の分散を計算する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
リストを展開して出力する	print(*aList)
文字列を空白で区切って、整数リストにする	map(int, s.split())
文字列がタプルに含まれるか調べる	element in aTuple
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
文字列中にひとつでも非数字があるか確認する	any(not c.isdigit() for c in s)
散布図の▲マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
辞書の項目名とその値をペアとして取り出す	aDict.items()
文字列が全て数字	s.isdigit()
option: 印の色を変更する	markerfacecolor = '#800080'
リストが空	len(aList) == 0
散布図を黒い三角マーカーを使ってプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
部分文字列を文字列の最後から見つける	s.rfind(sub)
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
データシリーズを丸めて、整数にする	ds.round().astype(int)
目盛線	plt.grid(linewidth=3.0)
正規表現モジュールをインポートする	import re
二つのオブジェクトが同一参照	obj is obj2
新しいリッジ回帰とロッソ回帰のハイブリットモデルを新規作成する	model = sklearn.linear_model.ElasticNet()
ヒストグラムの色をオリーブに指定する	plt.hist(データ列, color='olive')
あるカラムの欠損値を最大値に変更する	df['列A'].fillna(df['列A'].max())
option: ライトスレイグレー色を用いる	color = 'lightslategrey'
線を半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
文字列の両端から余分な空白と改行を消す	s.strip()
線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
二つのデータフレームを合体させる	pd.concat([df, df2])
ゴーストホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: ホワイトスモーク色を用いる	color = 'whitesmoke'
データフレームの選択したカラムの欠損値をメディアンで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
データフレームのカラムのトリム平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
濃いシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
乱数生成系列をnで初期化する	random.seed(n)
オプションで、出力先をファイルに指定する	file = sys.open(filename, 'w')
コーンズシルク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
折れ線グラフの色をグリーンに指定する	plt.plot(データ列x, データ列y, color='green')
データフレームの選択したカラムのSkewness	df[['列A', '列B']].skew()
データフレームの指定したカラムを丸める	df['列A'].round()
ハッシュ値を求める	hash(x)
棒グラフの色をrgbに変更する	plt.bar(ラベル列, データ列, color=rgb)
多次元データを主成分分析を使ってパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
文字列の中の大文字・小文字を無視してパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
横棒グラフをパールバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='palevioletred')
カウンタ間でユニオン	aCounter | aCounter2
指定した列のカテゴリで集計し、合計を計算する	df.groupby('列A').sum()
データフレームの値はNaNか調べる	df.isna()
散布図を淡いピンク色色として描画する	plt.scatter(データ列x, データ列y, color='lightpink')
option: オレンジレッドを使う	color = 'orangered'
最大値で指定したカラムの未入力値を埋める	df['列A'].fillna(df['列A'].max())
データフレームの選択したカラムの中にある文字列と文字列の数を数える	df[['列A', '列B']].isin([value, value2]).sum()
折れ線グラフの色をレベッカパープルに変更する	plt.plot(データ列x, データ列y, color='rebeccapurple')
xの小数点以下'2'桁までを出力する	print(':.2f'.format(x))
データフレームの選択した列のNaNを平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
ハローワールドと表示する	print('Hello World')
散布図の丸印を赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
散布図の上三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
n個の文字列があるリストを作る	[element] * n
要素∉セット	element not in aSet
option: 色を白に変更する	color = 'white'
折れ線グラフの菱形印を黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
リストを下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
文字列がタプルの要素か調べる	element in aTuple
データフレームの選択したカラムの尖りを計算する	df[['列A', '列B']].skew()
外れ値に強い線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
散布図を青紫色を用いて描画する	plt.scatter(データ列x, データ列y, color='violet')
ゴールデンロッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
option: 黄緑色を使う	color = 'chartreuse'
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='gray')
モカシン色でヒストグラムを描画する	plt.hist(データ列, color='moccasin')
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
指定したカラムの母標準偏差を求める	df['列A'].std(ddof=0)
データシリーズの中のNaNの合計を求める	ds.isna().sum()
データフレームを表示するとき、データフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
オブジェクトのポインタ	id(obj)
日付データが水曜日か	aDate.weekday() == 2
棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
赤いポイントマーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
改行なしに2つの数値をプリントする	print(value, value2, end='')
半透明の破線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
nまでの偶整数列	list(range(2, n, 2))
データフレームをグループ化し、それぞれの最大値を計算する	df.groupby('列A').max()
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
マッピングの全項目をクリアする	aDict.clear()
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
横棒グラフをミディアムブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumblue')
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
ゼロ埋めされた行列を作成する	np.zeros(行数, 列数)
配列と配列の散布図に▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームを指定した列で降順にソートする	df.sort_values(by='列A', ascending=False)
option: フォントの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
option: ゴールド色を使う	color = 'gold'
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
データフレームを２つの列によって並べ直す	df.sort_values(by=['列A', '列B'])
CSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
辞書から多重集合を作る	collections.Counter(aDict)
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
数値を数値計算する	float(e)
データシリーズを丸めて、整数型にする	ds.round().astype(int)
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
折れ線グラフの右三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
散布図に大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
イテラブルをセットにする	set(iterable)
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
option: 色をサンディーブラウンに指定する	color = 'sandybrown'
カウンタ同士で交わり	aCounter & aCounter2
数列のスピアマンの相関係数	scipy.stats.spearmanr(数列, 数列2)
文字列がPythonのキーワード	keyword.iskeyword(s)
データフレームの一部のカラムを百の位で丸める	df[['列A', '列B']].round(-2)
データシリーズを丸めて整数型にする	ds.round().astype(int)
option: サンディーブラウンにフォントの色を設定する	color = 'sandybrown'
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
整数nがリストのいづれかか調べる	n in aList
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
最初のを除いたデータフレーム	df[df.columns[1:]]
option: ダークグレー色を使用する	color = 'darkgray'
rgbの▼マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
数列と配列の散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ファイルをバイナリ書き込みできるように開く]	open(filepath, mode='wb')
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgray')
ヒストグラムの色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
双方向キューのデータ数を計算する	len(deq)
文字コードを用いて文字列をバイト列に変換する	s.encode(encoding=encoding)
二つの関係が下位集合か	aSet.issubset(aSet2)
リストとデータ列の散布図にrgbの大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
直後の値でデータフレームのNaNを埋める	df.fillna(method='bfill')
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
ある列の値の最大値	df.groupby('列A').max()
文字化けを防ぐ	sns.set(font='IPAexGothic')
xを論理値に変換する	bool(x)
ネイビー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
aListn番目から値をポップする	aList.pop(n)
リストをタプルに変換する	tuple(aList)
集合にイテラブルを追加更新する	aSet.update(iterable)
整数nが組のどれかか調べる	n in aTuple
折れ線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
パウダーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
option: ドジャーブルーに色を設定する	color = 'dodgerblue'
長さnのリスト	[0] * n
線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
イテラブルとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
縦棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームをグループ化し、ある列に対し平均値を求める	df.groupby('列A')['列B'].mean()
ハニーデュー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
option: 茶色色を使用する	color = 'brown'
横棒グラフを青緑色として描画する	plt.barh(データ列x, データ列y, color='turquoise')
バツ印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
散布図をミディアムターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
プロットを表示する	plt.show()
実数を整数に変換する	int(x)
耐火レンガ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
データフレームを指定した列の値によって集計し、、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
日付時刻データが何時か知る	aDatetime.hour
文字列中に非アスキー文字が含まれる	any(not c.isascii() for c in s)
真サブセットか調べる	aSet < aSet2
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
データフレームを表示するとき、表示可能な最大列数を減らす	pd.set_option('display.max_columns', n)
棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
スラグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
数値を青色にする	f'\033[34m{value}\033[0m'
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
ビン数nで等量でリストをビン分割する	pd.qcut(aList, n)
データフレームの中の列をビン数nを用いてビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
データフレームを欠損値を含めてある列でグループ分けする	df.groupby('列A', dropna=False)
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
データフレームのカラムを散布図で図示する	sns.scatterplot(data=df, x='列名', y='列名')
リストの相関係数	scipy.stats.pearsonr(数列, 数列2)
スピアマン相関係数でデータフレームの相関行列を算出する	df.corr(method='spearman')
二つの文字列は同じか調べる	s == s2
丸印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
カラムのケンドールの相関係数	scipy.stats.kendalltau(df['列A'], df['列B'])
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
option: フォントの色をコーンズシルクに設定する	color = 'cornsilk'
マップの項目数	len(aDict)
データフレームのn行目をドロップしてみる	df.drop(n, axis=0)
option: サーモン色を使う	color = 'salmon'
散布図の丸印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
xが一桁の整数かどうか調べる	-9 <= x <= 9
文字列の示すエンコーディングとしてファイルをオープンする]	open(filepath, encoding=s)
option: ミディアムスレートブルーにグラフの色を指定する	color = 'mediumslateblue'
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
リストをn倍する	aList * n
文字列の大文字と小文字を入れ替える	s.swapcase()
配列をビン数nで分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
折れ線グラフを色付きの点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データシリーズの平均値を算出する	ds.mean()
データフレームのある列の不偏分散	df['列A'].var(ddof=1)
ヒストグラムをタン色として描画する	plt.hist(データ列, color='tan')
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
ファイルをオープンして]書き込みストリームを使う	open(filepath, mode='w')
列の組み合せ	itertools.combinations(iterable, n)
JSONL形式のファイルからデータフレームをロードする	pd.read_json(filename, orient='records', lines=True)
配列の差	aArray - aArray2
棒グラフをミディアムバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
option: グラフの色をプラムに設定する	color = 'plum'
option: ライトシアン色を使用する	color = 'lightcyan'
option: ティール色を用いる	color = 'teal'
データフレームの一部の列を百の位で四捨五入する	df[['列A', '列B']].round(-2)
２つの表データをジョインする	pd.merge(df, df2)
ベクトルの列ごとの分散を計算する	np.var(aArray, axis=0)
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
nマイナスn2を計算する	n - n2
半透明の一点鎖線で線を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームの欠損値を前の行の値にセットする	df.fillna(method='ffill')
両端キューの最後のデータ	deq[-1]
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
実数が無限大か調べる	math.isinf(x)
まとめてValueMapでデータシリーズの値を置き換える	ds.replace(ValueMap)
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
データフレームの選択したカラムを千の位で四捨五入して整数型にする	df[['列A', '列B']].round(-3).astype(int)
分類モデルの予測値と目的変数を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
文字列の中で複数行対応として正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
option: 配列のデータ型を指定する	dtype = bool
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
線グラフを耐火レンガ色を使って描画する	plt.plot(データ列x, データ列y, color='firebrick')
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
リッジ回帰とロッソ回帰のハイブリッド分析を行う	model = sklearn.linear_model.ElasticNet()
option: 不偏分散を用いる	ddof = 1
縦棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
散布図をホットピンク色として描画する	plt.scatter(データ列x, データ列y, color='hotpink')
棒グラフを珊瑚色で描画する	plt.bar(データ列x, データ列y, color='coral')
折れ線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
辞書に要素をキーとして加える	aDict[key] = element
リストと数列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
ラベンダーブラッシュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
散布図の色を真紅にする	plt.scatter(データ列x, データ列y, color='crimson')
日付時刻データの日付を使う	aDatetime.date()
折れ線グラフの下三角印の太さを指定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
option: 色の透明度をセットする	alpha = 0.5
文字列が全て小文字か	s.islower()
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
文字列をn回繰り返すイテラブルを得る	itertools.repeat(element, n)
折れ線グラフの下三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
option: 色をブルーバイオレットに変更する	color = 'blueviolet'
フィシャー流の尖度を求める	scipy.stats.kurtosis(配列, fisher=True, bias=False)
事前に正規表現を複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データシリーズを百の位で丸めて、整数にする	ds.round(-2).astype(int)
折れ線グラフをブラウン色で描画する	plt.plot(データ列x, データ列y, color='brown')
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
ブランチドアーモンド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: 読み込む行番号をnamesで指定する	usecols = names
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
ブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
縦軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
縦棒プロットをプロットして、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
変数を赤色でプリントする	print(f'\033[31m{value}\033[0m')
option: オリーブ色を使う	color = 'olive'
タプルをn倍する	aTuple * n
イテラブルと数列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
散布図の上三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: 線の種類を破線に設定する	linestyle = 'dashed'
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
破壊的にデータフレームを二つの列で小さい順にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
データシリーズの中にいくつ文字列があるか数える	ds.isin([value]).sum()
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
昨日の日付を使う	datetime.date.today() - datetime.timedelta(days=1)
指定した列だけデータフレームの重複を見る	df.duplicated(subset='列A')
t-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームからランダムに取り出す	df.sample()
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
データシリーズの中にいくつNaNが含まれるか数える	ds.isna().sum()
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
列の一意な要素を見る	df[col].unique()
文字列は平仮名か確認する	('ぁ' <= ch <= 'ん')
文字列の接尾辞から部分文字列を消す	s.removesuffix(sub)
データフレームのあるカラムが正規分布からどれだけ、歪んでいるか確認する	df['列A'].kurt()
シーケンスとイテラブルをペア化する	itertools.zip_longest(iterable, iterable2)
リストとリストについて散布図をプロットしてマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
整数nを二進表現に変換する	bin(n)
日本語が文字列内にあるか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
全八進数字	string.octdigits
データシリーズの曜日の名前	ds.dt.weekday_name
カラーバーを付ける	plt.colorbar()
データフレームの指定したカラムの欠損値を最小値に指定する	df['列A'].fillna(df['列A'].min())
短い説明を表示する	plt.legend()
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
折れ線グラフの色をスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='springgreen')
xの小数点以下'5'桁までを出力する	print(':.5f'.format(x))
文字列を最後の部分文字列で二つに区切って、前半の文字列を使う	s.rpartition(sub)[0]
option: オールドレース色を使う	color = 'oldlace'
option: グラフの色をピンクに設定する	color = 'pink'
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
実数の自然対数	math.log(x)
option: 色をサーモンに設定する	color = 'salmon'
ライムにヒストグラムの色をセットする	plt.hist(データ列, color='lime')
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
rgbの四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
線グラフを赤い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: アクアマリンにグラフの色を指定する	color = 'aquamarine'
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
ファイルパスをEUCとして開く]	open(filepath, encoding='euc_jp')
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームをある列の値によってグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
データシリーズの年を使う	ds.dt.year
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
データフレームのあるカラムの最頻値	df['列A'].mode()
データフレームをソートし、、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
文字列を最後の部分文字列で分けた場合の後半の文字列を使う	s.rpartition(sub)[-1]
列をリストを境界値としてビン分割する	pd.cut(ds, aList)
データフレームをグループ化して、ヒストグラムで描画する	sns.histplot(df, x='列名', hue='カテゴリ名')
横棒グラフをパールバイオレットレッド色を使って描画する	plt.barh(データ列x, データ列y, color='palevioletred')
黒いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームのあるカラムを百の位で丸めて、整数にする	df['列A'].round(-2).astype(int)
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
タプルの合計値	sum(aTuple)
ヒストグラムを濃いシアン色を用いて描画する	plt.hist(データ列, color='darkcyan')
縦棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: ビスク色を使う	color = 'bisque'
イテラブルとリストについての散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
カウンタをマッピングで更新する	aCounter.update(aDict)
データフレームのある列を消す	df.drop('列A', axis=1, inplace=True)
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
散布図の星マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
サポートベクターマシンでクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
option: レベッカパープルを使用する	color = 'rebeccapurple'
チップのデータセットをデータフレームとしてロードする	df = sns.load_dataset('tips')
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データフレームを２つの列によってグループ化する	df.groupby(['列A', '列B'])
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
文字列のn番目	s[n]
棒グラフをオレンジレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orangered')
整数nはタプルのどれかか調べる	n in aTuple
赤いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
データフレームを２つの列の値によってグループ分けする	df.groupby(['列A', '列B'])
重複していない行のみ	df[~ df.duplicated(keep=False)]
横棒グラフを小麦色色として描画する	plt.barh(データ列x, データ列y, color='wheat')
全要素を1で初期化した行列を作成する	np.ones(行数, 列数, dtype=np.int)
データシリーズの統計量	ds.describe()
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
バギングで回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ベージュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
文字列がリストに含まれないか	element not in aList
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
スプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
青い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
イテラブルから一つランダムに選ぶ	random.choice(iterable)
線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
正規表現にマッチした文字列を新しい文字列で置換する	re.sub(pattern, newsub, s)
正弦	math.sin(x)
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
option: グラフを破線に変更する	linestyle = 'dashed'
文字列の無限のイテラブル	itertools.repeat(element)
集合に値を追加する	aSet.add(element)
複数のデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=1)
タプルでカウンタを更新する	aCounter.update(aDict)
四分位数ごとにリストを分割する	pd.qcut(aList, 4)
ファイル名がCSVファイルか確認する	filename.endswith('.csv')
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
option: バリーウッド色を用いる	color = 'burlywood'
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
リストにオブジェクトを追加する	aList.append(element)
インディアンレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
配列とリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームのあるカラムを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
散布図の四角マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
データフレームをインポートする	import pandas as pd
正規分布に従うか仮説検定する	scipy.stats.shapiro(配列)
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
散布図の色をブラウンにする	plt.scatter(データ列x, データ列y, color='brown')
floatの最小値を求める	sys.float_info.min
折れ線プロットの色をカラーコードとして変更する	plt.plot(データ列x, データ列y, color='#800080')
コーンフラワーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
データシリーズが何日か知る	ds.dt.day
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
散布図に右三角印を使う	plt.scatter(データ列x, データ列y, marker='>')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
指定した列の75パーセンタイル	df['列A'].quantile(0.75)
棒グラフをロージーブラウン色として描画する	plt.bar(データ列x, データ列y, color='rosybrown')
バイオレット色のヒストグラムを描画する	plt.hist(データ列, color='violet')
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
縦棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
ヒストグラムを青色として描画する	plt.hist(データ列, color='blue')
アルファベットを全部使う	string.ascii_letters
範囲を指定して乱数を生成する	random.randint(最小値, 最大値)
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
rgbの左三角マーカーをリストと配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームのn行目をドロップする	df.drop(n, axis=0, inplace=True)
formatパターンの文字列をタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
リストの末尾の要素	aList[-1]
棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
データフレームをグループ化し、それぞれの平均値を計算する	df.groupby('列A').mean()
ロバスト回帰モデルを作成する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
タイムスタンプデータををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
２つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
CSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
データシリーズの値が欠損値か調べる	ds.isna()
データフレームを指定したカラムを用いてソートする	df.sort_values(by='列A')
線グラフの色を濃い青に設定する	plt.plot(データ列x, データ列y, color='darkblue')
ホワイトスモーク色でヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
10を底とする対数を求める	math.log10(x)
データシリーズが正規分布からどれだけ歪んでいるか見る	ds.kurt()
実数のkを底とする対数	math.log(x, k)
バイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
組の合計値	sum(aTuple)
集合の浅いコピーを生成する	aSet.copy()
プロットのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
グラフにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
option: 無視するフッタをnに設定する	skipfooter = n
追加できるようにファイルをオープンする]	open(filepath, mode='a')
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
ローングリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
散布図のポイントマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
両端キューの長さを制限する	collections.deque(maxlen=n)
アンティークホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
二つの文字列が同じかどうか	s == s2
データフレームの重複した行のみ	df[df.duplicated(keep=False)]
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
ライトゴールドロディイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
option: 色をやわらかい青に指定する	color = 'cornflowerblue'
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
データシリーズをタイムスタンプ型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ヒストグラムをライム色を使って描画する	plt.hist(データ列, color='lime')
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
option: グラフの色をライトスカイブルーにする	color = 'lightskyblue'
線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
縦棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
データフレームはどの程度、正規分布から歪んでいるか見る	df.kurt()
オールドレース色でヒストグラムを描画する	plt.hist(データ列, color='oldlace')
リストの要素をソートする	sorted(aList)
イテラブルと数列について散布図を描き、、バツマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列の無限のイテラブルを得る	itertools.repeat(element)
暗い赤にヒストグラムの色を指定する	plt.hist(データ列, color='darkred')
2つのデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
縦棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
縦棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
データフレームの先頭n行を見る	df.head(n)
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
グラフの全般的にカラーパレットを濃くする	sns.set(pallete='deep')
TSVから文字エンコーディングを指定して読む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
option: グラフの色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
グリッド線を赤くする	plt.grid(color='r')
option: 色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
option: グラフの色をサドルブラウンに変更する	color = 'saddlebrown'
ゴールド色でヒストグラムを描画する	plt.hist(データ列, color='gold')
正接を求める	math.tan(x)
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
最大値・最小値の範囲として一様な疑似乱数	random.uniform(最小値, 最大値)
ひとつでも非英数字が文字列中に含まれるか調べる	any(not c.isalnum() for c in s)
グラフからグリッド線を表示しない	plt.grid(False)
折れ線グラフを破線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
整数nをn2分の一にする	n //= n2
グラフのタイトルを設定する	plt.title('グラフの名称')
ミディアムシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
ポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
モデルの平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
タプルの値を並べ変える	sorted(aTuple)
リストの中の一番小さい値	min(aList)
文字列を代数計算の変数にする	sympy.Symbol(s)
八進数字を全て見る	string.octdigits
ライトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
横棒グラフをディープスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
全要素を０で初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
nをn2だけ右シフトする	n >> n2
配列をイテラブルから作る	np.array(iterable)
データフレームを表示するとき、表示できる最大行数を変更する	pd.set_option('display.max_rows', n)
散布図をオレンジ色を用いて描画する	plt.scatter(データ列x, データ列y, color='orange')
表データの行と列をひっくり返す	df.T
線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
散布図の上三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
二つの最大値を求める	max(x, y)
option: マーカーを大バツに変更する	marker = 'X'
現在の年数を見る	datetime.datetime.today().year
文字列中に非空白が含まれる	any(not c.isspace() for c in s)
option: グラフの色をデピンクに設定する	color = 'deeppink'
グリッド線	plt.grid(linewidth=3.0)
日付データのデータフレームのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
リストからサンプリングする	random.sample(iterable)
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
指定したカラムを百の位で丸めて、整数にする	df['列A'].round(-2).astype(int)
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
option: バイナリモードに設定する	mode = 'rb'
ヒストグラムを半透明化する	plt.hist(データ列x, alpha=0.5)
ミディアムターコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
整数nの二進リテラル	bin(n)
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
データフレームの指定したカラムの値を正規表現patternでまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
トマト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
ダークゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データシリーズのタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
option: グラフの色をアイボリーに変更する	color = 'ivory'
option: ホットピンクにグラフの色を指定する	color = 'hotpink'
標準入力から入力される	input()
オレンジレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
新しい勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
ラベンダー色でヒストグラムを描画する	plt.hist(データ列, color='lavender')
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
option: ライトグリーンにグラフの色を変更する	color = 'lightseagreen'
折れ線グラフに青い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
グラフの題名を設定する	plt.title('グラフの名称')
フォレストグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='forestgreen')
散布図をオリベドラブ色を用いて描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
データフレームのカーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
既存のファイルをEUCとして追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
データシリーズの標本分散を求める	ds.var(ddof=0)
ヒストグラムをオリーブ色として描画する	plt.hist(データ列, color='olive')
ダークグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
カウンタの最頻出な項目を計算する	aCounter.most_common()[0]
データシリーズの平均値	ds.mean()
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategray')
option: 色の透明度を設定する	alpha = 0.5
グラフで用いるフォントを指定する	sns.set(font=フォント名)
データフレームの選択したカラムの中にある文字列の合計をカウントする	df[['列A', '列B']].isin([value]).sum()
データフレームをソートし、、下の方n件を取り出す	df.sort_values('キーとなる列').tail(n)
英数字が文字列内にあるか調べる	any(c.isalnum() for c in s)
リストの最後から要素を取り除く	aList.pop()
折れ線グラフの色をラベンダーに指定する	plt.plot(データ列x, データ列y, color='lavender')
rgbの右三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのカラムの文字列長を列として見る	df[col].str.len()
黒い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='k')
八進文字列をバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データフレームのあるカラムが何秒か知る	df['列A'].dt.second
柱状図を描画し、合計を1にする	plt.hist(データ列, density=True)
データフレームを二つの列ごとにグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
データフレームのカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
シスル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
option: エラーがあるとき、例外を発生させるように変更する	errors = 'strict'
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
辞書の項目数	len(aDict)
ベクトルの最小を求める	np.min(aArray)
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
最後の部分文字列で文字列を分けた場合の前半の文字列を使う	s.rpartition(sub)[0]
Excelファイルファイルを文字化けしないように読み込む	pd.read_csv('file.csv', encoding='shift_jis')
文字列を最後の部分文字列で二分し、残りの文字列を使う	s.rpartition(sub)[-1]
標準出力	sys.stdout
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
ファイルパスのファイル名	os.path.basename(filepath)
リッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
青いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
option: ライトスカイブルーを使用する	color = 'lightskyblue'
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
option: シアン色を使う	color = 'cyan'
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
データフレームを表示するとき列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
毎回異なるように乱数を初期化する	random.seed()
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
折れ線グラフをプロットする	plt.plot(データ列x, データ列y)
option: ダークシアグリーン色を使う	color = 'darkseagreen'
データフレームの第一四分位数を計算する	df.quantile(0.25)
option: グラフの線種を一点鎖線に設定する	linestyle = 'dashbot'
横棒グラフをローングリーン色として描画する	plt.barh(データ列x, データ列y, color='lawngreen')
グラフの補助目盛りを有効にする	plt.minorticks_on()
データフレームの一部の列の中にある日付データの合計を数える	df[['列A', '列B']].isin([value]).sum()
両端キューに要素をプッシュする	deq.append(element)
赤い実線として線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ディープスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
データフレームの末尾100行を抽出する	df.tail(100)
ミスティローズ色としてヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
計算機イプシロンを算出する	sys.float_info.epsilon
文字列内にひとつでも大文字が含まれる	any(c.isupper() for c in s)
データ列とデータ列についての散布図にrgbの△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
外れ値を除いた配列の算術平均を計算する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
組の要素を昇順に並べ変える	sorted(aTuple, reverse=True)
パープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
option: グラフの色をデピンクにセットする	color = 'deeppink'
日付データが木曜日か	aDate.weekday() == 3
ピーチパフ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
日付データの曜日を使う	aDate.weekday()
option: グラフの色を青紫に設定する	color = 'violet'
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
option: フォントの色をダーク・スラテグレーにセットする	color = 'darkslategrey'
ミディアムアクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumaquamarine')
最後の部分文字列で文字列を分けた時の先頭の文字列を取り出す	s.rpartition(sub)[0]
折れ線グラフの右三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームの標本標準偏差	df.std(ddof=1)
教師データとしてモデルを学習する	model.fit(説明変数, 目的変数)
下位集合	aSet.issubset(aSet2)
ある列の値毎の最小値を求める	df.groupby('列A').min()
ヒストグラムの色をネイビーにする	plt.hist(データ列, color='navy')
option: 三角マーカーを描画する	marker = '^'
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
配列をビン数nでビニングする	pd.cut(aArray, n)
棒グラフの横幅を指定する	plt.bar(ラベル列, データ列, width=0.5)
データフレームの選択した列の相関行列をケンドール順位相関係数として求める	df[['列A', '列B']].corr(method='kendall')
正方単位行列を作る	np.identity(n)
option: 文字列をセパレータで使う	sep = s
淡くパレットをグラフの描画で使う	sns.set(pallete='muted')
キーがタプルにあるいるか確認する	key in aDict
縦棒グラフをフクシア色として描画する	plt.bar(データ列x, データ列y, color='fuchsia')
スラグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
辞書を消去する	aDict.clear()
xでデータフレームの選択した列のNaNを置換する	df[['列A', '列B']].fillna(x)
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
option: 大バツ印を用いる	marker = 'X'
両端キューのstart〜endの部分値	collections.deque(itertools.islice(deq, start, end))
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
折れ線グラフの三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
散布図にバツ印を使う	plt.scatter(データ列x, データ列y, marker='x')
赤い印を散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
ドジャーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='dodgerblue')
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
ファイルを追加できるように開く]	open(filepath, mode='a')
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
モカシン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
文字列リストを連結する	''.join(aStringList)
棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
ある列のカテゴリごとの分散を算出する	df.groupby('列A').var()
option: バイナリ書き込み用に設定する	mode = 'wb'
データフレームの一部のカラムの欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
散布図のポイント印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
数列とリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
２つの文字列が同じかどうか	s == s2
折れ線グラフの色をアンティークホワイトに指定する	plt.plot(データ列x, データ列y, color='antiquewhite')
破線として線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
淡くカラーパレットをグラフの描画で使う	sns.set(pallete='muted')
rangeの無限バージョン	itertools.count(start=n, step=step)
縦棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
データシリーズを千の位で丸めて整数型にする	ds.round(-3).astype(int)
プログラムの実行を異常終了する	sys.exit(1)
現在は何時か知る	datetime.date.today().hour
行列の列ごとの分散	np.var(aArray, axis=0)
データフレームの一部の列を小数点以下n桁で丸める	df[['列A', '列B']].round(n)
線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
リストをランダムにシャッフルする	random.shuffle(aList)
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
カウンタのキーとカウントを列挙する	aCounter.items()
タプル上で項目名が定義済みか調べる	key in aDict
ペルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
ネイビーにヒストグラムの色をセットする	plt.hist(データ列, color='navy')
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
カウンタ間で積集合	aCounter & aCounter2
リストとリストについての散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
低頻出方からカウンタをリストとして得る	aCounter.most_common()[::-1]
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
赤い線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
y座標の最大・最小を変更する	plt.ylim(最小値, 最大値)
空列を得る	[]
二つのカラムによって破壊的にデータフレームを大きい順に並べ直す	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
カウンタの全数を使う	aCounter.total()
両端キュー中の値の出現数を数える	deq.count(element)
列から1個ランダムに選ぶ	random.choice(iterable)
ドジャーブルー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
浮動小数点数の分数近似	q.limit_denominator(max_denominator=1000000)
文字列が小文字	s.islower()
バイトオーダを知る	sys.byteorder
散布図をホワイトスモーク色を用いて描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
option: グラフの色をミッドナイトブルーに指定する	color = 'midnightblue'
散布図にダイアモンド印を加える	plt.scatter(データ列x, データ列y, marker='D')
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
赤い実線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: 星印を使う	marker = '*'
option: ヘッダを自動的な連番に設定する	header = None
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
横棒グラフを茶色色として描画する	plt.barh(データ列x, データ列y, color='brown')
ファイル全体を行単位で分割して読み込む	f.readlines()
折れ線グラフにポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
データフレームをグループ化し、ある列に対し個数を求める	df.groupby('列A')['列B'].count()
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
リストを展開して表示する	print(*aList)
ベクトルの個数を計算する	aArray.size
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
カンマで文字列を区切って、列挙する	s.split(',')
配列の偏差値を使う	50 + 10 * scipy.stats.zscore(配列)
空の線形モデルを作る	model = sklearn.linear_model.LinearRegression()
ミディアムアクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
表データのあるカラムのタイムゾーンをする	df['列A'].tz_convert('Asia/Tokyo')
ある列によってデータフレームを破壊的に昇順にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
等間隔の配列を初期化する＼	np.arange(開始値, 終了値, 等差)
オブジェクトがn回繰り返すイテラブルを得る	itertools.repeat(element, n)
折れ線グラフの三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
折れ線グラフの色をフクシアに変更する	plt.plot(データ列x, データ列y, color='fuchsia')
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
データフレームの指定したカラムの欠損値を直前の値に設定する	df['列A'].fillna(method='ffill')
データフレームをCSVファイルから読み込む	pd.read_csv('file.csv', sep=',')
ダークゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
option: セパレータをタブにする	sep = '\t'
データフレームの選択したカラムの第二四分位数	df[['列A', '列B']].median()
散布図をベージュ色として描画する	plt.scatter(データ列x, データ列y, color='beige')
option: 青色を使う	color = 'blue'
日付時刻データの月数	aDatetime.month
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
ベージュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
非数値データをワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
整数nの八進表現を使う	oct(n)
リストと配列について散布図を描いて、マーカーを右三角に変更する	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
nにn2をかけた値をnとする	n *= n2
データフレームのポイントプロットをプロットする	sns.pairplot(hue='カテゴリ列', data=df)
option: セパレータをカンマにする	sep = ','
ファイルから1文字、読み込む	f.read(1)
折れ線グラフのマーカーを△にする	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの色をオリーブにセットする	plt.plot(データ列x, データ列y, color='olive')
散布図を大バツマーカーで描画する	plt.scatter(データ列x, データ列y, marker='X')
nが負の整数かどうか	n < 0
グループ化してデータフレームの散布図を縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
データフレームの一部の列の相関行列	df[['列A', '列B']].corr()
配列を標準化する	scipy.stats.zscore(配列)
ダークグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
option: ダークグレー色を使う	color = 'darkgray'
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
nが3の倍数か確認する	n % 3 == 0
文字列内に小文字が含まれるかどうか調べる	any(c.islower() for c in s)
ポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
nが一桁の数か	-9 <= n <= 9
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
データフレームの選択した列の標準偏差	df[['列A', '列B']].std()
ビスク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
リストを度数分布図にする	plt.hist(データ列)
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
データフレームを表示するとき、小数点以下の表示精度をn桁に指定する	pd.set_option('precision', n)
パスのセパレータ記号	os.sep
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
散布図の四角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
折れ線グラフをハニーデュー色を用いて描画する	plt.plot(データ列x, データ列y, color='honeydew')
キューに要素をエンキューする	deq.appendleft(element)
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
Pythonインタプリタの実行ファイルの絶対パスを知る	sys.executable
データフレームの列を散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
二つの辞書をネストする	collections.ChainMap(aDict, aDict2)
グラフの描画で暗く色調を使用する	sns.set(pallete='dark')
折れ線グラフの透明度を変更する	plt.plot(データ列x, データ列y, alpha=0.5)
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
データシリーズのパーセンタイル	ds.quantile(パーセント/100)
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
データフレームのカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
縦棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
線グラフをスラグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='slategray')
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
折れ線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
赤いダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
データシリーズの75パーセンタイル	ds.quantile(0.75)
自然数の並べ方の総数	math.perm(n)
分数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
丸マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
部分集合か調べる	aSet.issubset(aSet2)
二つの変数をそれぞれ定義する	x, y = i, j
リストを縦軸、数列をx軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
プラットホームがウィンドウズか調べる	sys.platform.startswith('win32')
option: フォントの色をライトシアンに設定する	color = 'lightcyan'
カテゴリで色分けして、データフレームの全カラムの散布図を図示する	sns.pairplot(df, hue='カテゴリ列')
新しいロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
正規分布で乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
印字可能な文字を全て使う	string.printable
集合が空かどうか調べる	len(aSet) == 0
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
文字列が文字列リストのいづれかテストする	s in aStringList
year年day月の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
暗い赤色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*')
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
option: フォントの色をシスルに変更する	color = 'thistle'
リストの最初のn要素を取り除く	aList[n:]
書き込みできるようにSJISでファイルをオープンする]	open(filepath, mode='w', encoding='shift_jis')
ひとつでも空白が文字列内に含まれる	any(c.isspace() for c in s)
option: ラベンダーブラッシュにグラフの色をセットする	color = 'lavenderblush'
ダークシアグリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレームの選択したカラムの欠損値をモードに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
ファイルを書き込みできるように開く]	open(filepath, mode='w')
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
暗い赤色でヒストグラムを描画する	plt.hist(データ列, color='darkred')
文字列の両端から部分文字列を除く	s.strip(sub)
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
文字列の左端からタブを除く	s.lstrip('\t')
二つの列をキーにして昇順にデータフレームを破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
パールバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
配列間の相関係数を計算する	scipy.stats.pearsonr(配列, 配列2)
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
折れ線グラフの▼印の線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
正規表現を用いる	import re
配列の次元を変形する	aArray.reshape(行数, 列数)
option: 線種を一点鎖線に変更する	linestyle = 'dashbot'
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
ヒストグラムの色をミスティローズに変更する	plt.hist(データ列, color='mistyrose')
日付時刻データからn日を減らす	aDatetime - datetime.timedelta(days=n)
option: グラフの色をダークオレンジに変更する	color = 'darkorange'
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
グリーンイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
ヒストグラムをダークグレー色を使って描画する	plt.hist(データ列, color='darkgrey')
標準入力から1行分読む	sys.stdin.readline()
線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
ひとつでも非空白が文字列中に含まれるか確認する	any(not c.isspace() for c in s)
カテゴリ別で色付けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
説明変数と目的変数としてモデルを学習する	model.fit(説明変数, 目的変数)
year年をタイムスタンプに変換する	datetime.datetime(year=year, month=1, day=1)
nが偶数かどうか調べる	n % 2 == 0
option: フォントの色を青に設定する	color = 'blue'
行列の列ごとの標準偏差を計算する	np.std(aArray, axis=0)
option: ミディアムブルー色を使う	color = 'mediumblue'
option: データ型として８ビット整数型を使う	dtype = np.int8
option: スラグレーにグラフの色をする	color = 'slategrey'
イテラブルをカウンタに変換する	collections.Counter(iterable)
option: n番目のカラムをインデックスに設定する	index_col = n
データシリーズの中に文字列とがいくつあるかカウントする	ds.isin([value, value2]).sum()
左三角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='<')
セットから別の集合との共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
標準出力がパイプか調べる	not sys.stdout.isatty()
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
option: グラフの色をオレンジに変更する	color = 'orange'
▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
option: 色をライトスレイグレーに設定する	color = 'lightslategrey'
リストとリストの散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
辞書の項目名の値を見る	aDict[key]
タプルの要素だけプリントする	print(*aTuple)
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ヒストグラムの色をディムグレーにする	plt.hist(データ列, color='dimgrey')
リストのn番目の	aList[n]
折れ線グラフの色をピンクに指定する	plt.plot(データ列x, データ列y, color='pink')
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの丸印の太さを指定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
データシリーズが何時か見る	ds.dt.hour
床を求める	math.floor(x)
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
折れ線グラフを色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
線形回帰モデルのバイアス	model.intercept_
棒グラフをサドルブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
ライトスレイグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
辞書をJSON形式で出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
リストにリストを追加し、広げる	aList.extend(aList2)
本日が土曜日	datetime.datetime.today().weekday() == 5
ダークサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
縦棒グラフをマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='magenta')
2つのリストを箱ひげ図にする	plt.boxplot([データ列, データ列])
散布図をミディアムバイオレットレッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
option: フォントの色をレベッカパープルに設定する	color = 'rebeccapurple'
実数が負かどうか確認する	x < 0
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
シャルトリューズにヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
表データをある列で昇順に並べ直して、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
option: シアンにフォントの色を設定する	color = 'cyan'
書き込みできるようにファイルをUTF8でオープンする]	open(filepath, mode='w', encoding='utf-8')
散布図に青い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
option: フォントの色をミディアムオーキッドに設定する	color = 'mediumorchid'
文字列を表示する	print(value)
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
縦棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
濃いシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
赤い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
オールドレース色で線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
棒グラフをディープスカイブルー色を使って描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
横棒グラフをパパイヤウィップ色を用いて描画する	plt.barh(データ列x, データ列y, color='papayawhip')
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
ケンドール相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
カラーバーを設定する	plt.colorbar()
イテラブルでカウンタを更新する	aCounter.update(iterable)
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを関数の値によってまとめたグループ	df.groupby(関数)
折れ線グラフの色をティールに設定する	plt.plot(データ列x, データ列y, color='teal')
直後の値でデータフレームの選択したカラムのNaNを埋める	df[['列A', '列B']].fillna(method='bfill')
option: 赤にグラフの色を変更する	color = 'red'
組の最初の要素	aTuple[0]
データシリーズの中に文字列が存在するか調べる	ds.isin([value])
配列とイテラブルの散布図に赤い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
プロットの縦横の比率を同じする	plt.axis('equals')
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
データフレームをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
データフレームをある列によってグループ化し要約統計量を求める	df.groupby('列A').describe()
ヒストグラムをライトコーラル色として描画する	plt.hist(データ列, color='lightcoral')
グラフで使うy座標の名称をuntitledに設定する	plt.ylabel('y軸ラベル')
option: フォントの色をモカシンに設定する	color = 'moccasin'
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
x軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
ヒストグラムをコーラル色を用いて描画する	plt.hist(データ列, color='coral')
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
option: 紺碧色を使う	color = 'azure'
両端キューの末尾	deq[-1]
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
実数のn乗を求める	pow(x, n)
ライトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
リストと配列についての散布図に赤いクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
実行結果を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
カラム名を指定して２つのデータフレームを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
ディレクトリをPythonパスに追加する	sys.path.append(dir)
データフレームの一部のカラムの値をまとめてValueMapで置き換える	df[['列A', '列B']].replace(ValueMap)
ヒストグラムをペルー色を使って描画する	plt.hist(データ列, color='peru')
ミディアムターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
パープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームの一部のカラムがどの程度、分散しているか確認する	df[['列A', '列B']].var()
新しいリッジ回帰モデルを準備する	model = sklearn.linear_model.Ridge(alpha=正則化項)
切片なしの単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
全ての句読点文字	string.punctuation
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
nがn2の倍数でないか判定する	n % n2 != 0
nが一桁の数か調べる	-9 <= n <= 9
nをn2乗に増やす	n **= n2
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
日付を表現した文字列をタイムスタンプに変換する	pd.to_datetime(日付を表現した文字列)
折れ線グラフの大バツマーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
セットをリストに変換する	list(aSet)
折れ線グラフの色をダークスレートブルーに指定する	plt.plot(データ列x, データ列y, color='darkslateblue')
散布図をホワイト色で描画する	plt.scatter(データ列x, データ列y, color='white')
1からnまでの整数列を作る	list(range(1, n+1))
日付データをISO形式の文字列に変換する	aDate.isoformat()
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
データフレームの重複する行だけを抽出する	df[df.duplicated(keep=False)]
リストとリストについての散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
option: ネイビー色を用いる	color = 'navy'
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
ヒストグラムの色をゴールドにする	plt.hist(データ列, color='gold')
外れ値を除いたデータフレームのカラムの分散を使う	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
データフレームのふたつのカラムをドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
散布図に▽マーカーを使用する	plt.scatter(データ列x, データ列y, marker='v')
option: グラフの色を暗い赤に設定する	color = 'darkred'
データフレームの一部の列の不偏分散を計算する	df[['列A', '列B']].var(ddof=1)
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
実数を小数点以下第一位で四捨五入する	round(x, 1)
カタカナを平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
実数を実数で割る	x / y
線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
カンマ区切り形式に小数点以下3桁までデータフレームを書き出す	df.to_csv('file.csv', float_format='%.3f')
指定した列によってデータフレームを並べる	df.sort_values(by='列A')
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
データフレームを表示するとき小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
nを切り捨てながらn2分の一にする	n //= n2
リストをシアンにする	f'\033[36m{value}\033[0m'
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ヒストグラムの色をライムグリーンに変更する	plt.hist(データ列, color='limegreen')
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ホットピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
赤い点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
レベッカパープル色を用いてヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
非大文字が文字列中に含まれるか調べる	any(not c.isupper() for c in s)
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
折れ線グラフの四角印の色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
エラーなく集合から要素を除く	aSet.discard(element)
日付データの月数	aDate.month
グラフをスライド用にセットする	sns.set(context='talk')
固有値分解を行う	model = sklearn.decomposition.PCA(n_components=n)
option: 印の線幅を設定する	markeredgewidth = 2.5
両端キューをデキューする	deq.popleft()
０で全要素を初期化したブール型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
横棒グラフをミディアムスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
折れ線グラフの丸マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
データシリーズの未入力値を最大値に設定する	ds.fillna(ds.max())
グラフの色を色差別なくする	sns.set(pallete='colorblind')
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
データフレームのカラムの欠損値を後の行の値で埋める	df['列A'].fillna(method='bfill')
option: パールバイオレットレッド色を使う	color = 'palevioletred'
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
nとn2の商	n / n2
縦棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
nの16進表現	hex(n)
実数に数を乗算する	x * y
表データのあるカラムの分を求める	df['列A'].dt.minute
データフレームのあるカラムの標本分散	df['列A'].var(ddof=0)
数のn乗を算出する	pow(x, n)
ファイル全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
ダークカーキ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
イテラブルの各値をキューの先頭に入れる	deq.extendleft(iterable)
回帰分析をアンサンブル学習で行う	sklearn.ensemble.VotingRegressor()
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
重回帰モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
データフレームのカラムの要約統計量	df['列A'].describe()
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
部分文字列で文字列を二分する	s.partition(sub)
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
日本語フォントをグラフ中で表示できるようにする	sns.set(font='IPAexGothic')
線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
列から新しい多重集合を作成する	collections.Counter(iterable)
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
日付時刻データをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
データフレームがどの程度、分散しているか見る	df.var()
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
ある列の値がx以下の行を選ぶ	df[df['列A'] <= x]
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
プロット中の文字化けを防ぐ	sns.set(font='IPAexGothic')
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
option: 左三角マーカーを用いる	marker = '<'
文字コードを文字に変換する	chr(unicode)
リストとリストの散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
データフレームから重複した行を残さず取り除く	df.drop_duplicates(keep=False)
ヒストグラムをコーンズシルク色として描画する	plt.hist(データ列, color='cornsilk')
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
nが一桁の数	0 <= n <= 9
左三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='<')
データシリーズの中に含まれる文字列と文字列の合計を調べる	ds.isin([value, value2]).sum()
ひとつでもアスキー文字が文字列内に含まれるかどうか	any(c.isascii() for c in s)
データフレームをある列のカテゴリで集計し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
組をnから番号付けする	enumerate(aTuple, start=n)
ディムグレーにヒストグラムの色を変更する	plt.hist(データ列, color='dimgray')
グラフのデザインをデフォルトでいい感じに設定する	sns.set()
数列の度数分布図を描画する	plt.hist(データ列)
オブジェクトが名前付きタプルのインスタンスか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データフレームの一部のカラムの中にいくつNaNがあるか数える	df[['列A', '列B']].isna().sum()
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategray')
散布図をダークシアグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
パールバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
縦棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
線グラフをダーク・スラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
カーキ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
option: EUCを使う	encoding = 'euc_jp'
赤い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
折れ線グラフの色をピーチパフに変更する	plt.plot(データ列x, データ列y, color='peachpuff')
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategray')
横棒グラフの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
度数分布図のビン数を設定する	plt.hist(データ列, bins=区関数)
option: 線の種類を破線にする	linestyle = 'dashed'
ダークマゼンタにヒストグラムの色を指定する	plt.hist(データ列, color='darkmagenta')
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
空のロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
データフレームの指定した列を十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
配列間の要素ごとの最大公約数を求める	np.gcd(aArray, aArray2)
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
文字列がタプルに含まれないか調べる	element not in aTuple
散布図をrgbの丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
配列の累積積を求める	np.cumprod(aArray)
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
浮動小数点数に浮動小数点数を掛ける	x * y
リストが少なくともひとつ真か	any(aList)
要素が辞書の値として含まれているかどうか調べる	element in aDict.values()
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
データフレームの重複する行のみを抽出する	df[df.duplicated(keep=False)]
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
平均でデータシリーズのNaNを補う	ds.fillna(ds.mean())
ある列の文字列が部分文字列で始まる行を取り出す	df[df['列A'].str.startswith(部分文字列)]
フィシャー流の尖度を算出する	scipy.stats.kurtosis(配列, fisher=True, bias=False)
二つの文字列を順にプリントする	print(value, value2)
下三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
グラフの用途を画面に設定する	sns.set(context='notebook')
データフレームを複数の列によって昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
デック中の値のインデックスを使う	deq.index(element)
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
データフレームの行を範囲指定して取り出す	df[start:end]
データフレームのカラムの相乗平均を求める	scipy.stats.gmean(df['列A'])
マルーン色を使ってヒストグラムを描画する	plt.hist(データ列, color='maroon')
データフレームの指定したカラムのNaNを最大値で埋める	df['列A'].fillna(df['列A'].max())
データフレームの選択した列の中に存在する文字列の数をカウントする	df[['列A', '列B']].isin([value]).sum()
スーパーセットもしくは等しいか調べる	aSet > aSet2
現在の時刻を見る	datetime.date.today().hour
文字列の左側を見る	s[0]
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ファイルが存在しないか調べる	not os.path.exists(filepath)
全ての数字	string.digits
折れ線グラフの色をグリーンにセットする	plt.plot(データ列x, データ列y, color='green')
平均値でデータフレームの選択した列の欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
データフレームのあるカラムの欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
データフレームのあるカラムの中央値	df['列A'].median()
リストとリストの散布図を描いて、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列の最初から空白を取り除く	s.lstrip()
option: グラフの色をライトスチールブルーに指定する	color = 'lightsteelblue'
x座標の目盛りを表示しない	plt.xticks([])
option: 濃いシアン色を使用する	color = 'darkcyan'
kを底とする実数の対数	math.log(x, k)
折れ線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
ナバホホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
四分位数ごとにデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
データフレームの指定したカラムの文字列をNaNに変換する	df['列A'].replace(値, np.nan)
データフレームの選択したカラムのNaNを最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
エクセルファイルから全てのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
日付時刻データにn秒を加える	aDatetime + datetime.timedelta(seconds=n)
option: n番目の列をインデックスに設定する	index_col = n
カラーコードで折れ線プロットの色を変更する	plt.plot(データ列x, データ列y, color='#800080')
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
プログラムの実行を強制的に終了する	sys.exit()
散布図に赤いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
横棒グラフをやわらかい青色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
実数を浮動小数点数で割った余り	x % y
option: ダークスレートブルーを用いる	color = 'darkslateblue'
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームの列の名前の一覧を求める	df.columns
インデックスによってデータフレームを降順でソートする	df.sort_index(ascending=False)
option: 真紅色を用いる	color = 'crimson'
option: パウダーブルーにグラフの色を設定する	color = 'powderblue'
線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
バイナリ書き込み用にファイルをオープンする]	open(filepath, mode='wb')
データフレームを散布図で可視化して、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
オブジェクトはタプル型のインスタンス	isinstance(obj, tuple)
option: 追加用に設定する	mode = 'a'
直前の値でデータフレームの未入力値を置換する	df.fillna(method='ffill')
option: 文字列を分割記号で使う	sep = s
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
n個分右に両端キューの値をローテンションする	deq.rotate(n)
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
option: 改行をセパレータで使う	sep = '\n'
プロットをスライド用に指定する	sns.set(context='talk')
赤い星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategrey')
折れ線グラフをダークマゼンタ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
横棒グラフをフォレストグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='forestgreen')
option: 印を左三角に設定する	marker = '<'
二つの関係が真部分集合かどうか調べる	aSet < aSet2
option: 深さを制限する	maxdepth = n
データフレームの一部のカラムのNaNを最小値にセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
option: オリベドラブを使う	color = 'olivedrab'
整数nがタプルのどれかか調べる	n in aTuple
二進数文字列を整数に変換する	int(s, 2)
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
文字列を改行なしにプリントする	print(value, end='')
大文字・小文字を無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
数値を両端キューにプッシュする	deq.append(element)
nからいつまでもカウントダウンする	itertools.count(start=n, step=-1)
データフレームの指定したカラムの中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
データフレームを各列毎にグループ化して文字列というグループの個数を求める	df.groupby(column).size()[s]
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
データフレームを小数点以下n桁で丸める	df.round(n)
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
列名を指定してデータフレームを左結合する	pd.merge(df, df2, on='列A', how='left')
コーンフラワーブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
散布図をチョコレート色として描画する	plt.scatter(データ列x, データ列y, color='chocolate')
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
データフレームの指定したカラムの欠損値を最小値で埋める	df['列A'].fillna(df['列A'].min())
ライトスチールブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightsteelblue')
リストの個数だけ繰り返す	range(len(aList))
ヒストグラムを深紅色を使って描画する	plt.hist(データ列, color='crimson')
nを半分にする	n /= 2
データフレームのあるカラムの欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
事前に複数行対応としてパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データ列をdatetime64型に変換する	pd.to_datetime(ds)
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
option: 符号なし８ビット整数型を用いる	dtype = np.uint8
あるカラムの値をValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
中央値で列をビン分割する	pd.qcut(ds, 2)
インデックスとしてカンマ区切りのファイルのn行目を読み込む	pd.read_csv('file.csv', index_col=n)
項目名が辞書上で未定義か	key not in aDict
列の重複組み合せ	itertools.combinations_with_replacement(iterable, n)
タプルをインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
カテゴリで色分けしてデータフレームをにバイオリン図でグラフ化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
eの実数乗	math.exp(x)
データフレームのあるカラムが何分か見る	df['列A'].dt.minute
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
ヒストグラムの色を淡いピンク色にする	plt.hist(データ列, color='lightpink')
データフレームのあるカラムが何月か見る	df['列A'].dt.month
オブジェクトは整数型	isinstance(obj, int)
折れ線グラフの大バツ印を赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
線グラフの色をミディアムブルーに指定する	plt.plot(データ列x, データ列y, color='mediumblue')
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
組の末尾のn要素を取り除く	aTuple[:-n]
データ列の推移を青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
配列を2次元1列に変形する	aArray.reshape(-1, 1)
ライトサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
option: ライトシアン色を使う	color = 'lightcyan'
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
ファイルからディレクトリ名を見る	os.path.dirname(filepath)
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
散布図を大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X')
計算機イプシロンを計算する	sys.float_info.epsilon
option: シエナ色を使う	color = 'sienna'
OSがWindowsか確認する	sys.platform.startswith('win32')
option: マーカーを星に設定する	marker = '*'
カウンタの最頻出の項目	aCounter.most_common()[0]
option: ライムグリーン色を使う	color = 'limegreen'
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
カウンタから列をカウントして減らす	aCounter.subtract(iterable)
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ミディアムターコイズにヒストグラムの色をする	plt.hist(データ列, color='mediumturquoise')
リストを行列に変換する	np.array(aList)
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームの一部のカラムの記述統計量を見る	df[['列A', '列B']].describe()
文字列の先頭で正規表現にASCII限定としてマッチするか調べる	re.match(pattern, s, flags=re.ASCI)
横棒グラフをライトイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightyellow')
option: 箱ひげ図を水平方向にする	vert = False
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
フォーマットでカラムを日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
データフレームの選択した列の文字列をNaNに変換する	df[['列A', '列B']].replace(値, np.nan)
オブジェクトがタプルの要素でない	element not in aTuple
昇順にデータフレームをインデックスでソートする	df.sort_index(ascending=True)
文字列を最後から空白で分割する	s.rsplit()
棒グラフをライトシアン色として描画する	plt.bar(データ列x, データ列y, color='lightcyan')
カウンタから列をカウントして引く	aCounter.subtract(iterable)
黒いグリッド線を引く	plt.grid(color='k')
option: ミディアムアクアマリンにグラフの色を設定する	color = 'mediumaquamarine'
カテゴリで色分けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
辞書に別の辞書の項目を更新する	aDict.update(aDict2)
データ列間の当てはまりの良さを求める	sklearn.metrics.r2_score(データ列, データ列2)
四分位数ごとにデータ列を分割する	pd.qcut(ds, 4)
箱ひげ図を描画して平均を加える	plt.boxplot(データ列, showmeans=True)
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: フォントの色をマルーンに設定する	color = 'maroon'
ヒストグラムをカラーマップとして描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
JSONフォーマットのファイルを読み込んで、dataとする	data = json.load(fin)
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
スレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='slateblue')
リッジ回帰モデルを新規作成する	model = sklearn.linear_model.Ridge(alpha=正則化項)
数式の部分分数化を行う	sympy.apart(e)
文字列中の部分文字列を新しい文字列に置換する	s.replace(sub, newsub)
Pythonのバージョンを知る	sys.version
option: イエローグリーン色を用いる	color = 'yellowgreen'
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
辞書から最後に追加した項目をポップする	aDict.popitem()
CSVファイルでデータフレームを保存する	df.to_csv('file.csv')
未入力値がある行を除いてみる	df.dropna()
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
データフレームを線形回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
ファイルをバイナリ書き込みモードで開き]fとする	f = open(filepath, mode='wb')
散布図をrgbの星マーカーで描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフの大バツ印を黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
配列をn個にビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
文字を文字コードに変換する	ord(ch)
日付データが日曜日かどうか確認する	aDate.weekday() == 6
ライムグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='limegreen')
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
配列とリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
エポック秒の列から日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
ベクトルをフラットにする	aArray.flatten()
データフレームをある列によって小さい順にソートする	df.sort_values(by='列A', ascending=True)
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
散布図をゲインズボロ色を使って描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
ヒストグラムをライトスレイグレー色を用いて描画する	plt.hist(データ列, color='lightslategrey')
折れ線グラフの線種を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図を小麦色色を用いて描画する	plt.scatter(データ列x, データ列y, color='wheat')
直前の値でデータフレームの指定したカラムのNaNを埋める	df['列A'].fillna(method='ffill')
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
CSVファイルからデータフレームを読み込む	pd.read_csv('file.csv', sep=',')
二つのリストから辞書	dict(zip(aList, aList2))
option: フォントの色をロージーブラウンに設定する	color = 'rosybrown'
グラフから目盛線を表示しない	plt.grid(False)
箱ひげ図としてデータ列を描く	plt.boxplot(データ列)
集合が空か調べる	len(aSet) == 0
配列の尖度を求める	scipy.stats.kurtosis(配列, bias=False)
オーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='orchid')
配列のスピアマンの相関係数	scipy.stats.spearmanr(配列, 配列2)
データシリーズの中にある日付データと文字列の合計を数える	ds.isin([value, value2]).sum()
データフレームの列を並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
データフレームの信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
縦棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
floatの最小値	sys.float_info.min
指定した列の値で集計し、標準偏差を計算する	df.groupby('列A').std()
列をn個に等量でビン分割する	pd.qcut(ds, n)
リストの最後からn番目以前の要素を取り出す	aList[:-n]
ファイルを文字コードtextを使って書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
データ列を縦棒プロットにする	plt.bar(ラベル列, データ列)
ヒストグラムをコーンズシルク色を用いて描画する	plt.hist(データ列, color='cornsilk')
option: 配列のデータ型を指定する	dtype = np.int32
文字列を右寄せする	s.rjust(文字列幅)
ガウス過程として回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
タプルの値を逆順にする	aTuple[::-1]
グラフ中のフォントを設定する	sns.set(font=フォント名)
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: レベッカパープル色を使う	color = 'rebeccapurple'
データフレームの選択したカラムを10の位で四捨五入する	df[['列A', '列B']].round(-1)
二つ並べてヒストグラムを描画する	plt.hist([データ列, データ列], color=['b', 'r'])
両端キューの先頭に数値を追加する	deq.appendleft(element)
散布図に丸マーカーを使用する	plt.scatter(データ列x, データ列y, marker='o')
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
配列とリストについて散布図を描いて、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: 貝殻色を使う	color = 'seashell'
Pythonパス	sys.path
縦棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
辞書から項目名の値	aDict.get(key)
リストとリストについて散布図を描いて、右三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
小数点数を実数で割った剰余	math.remainder(x, x2)
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
ベクトルの次元数	aArray.ndim
標準出力を	sys.stdout
文字列をセパレータで区切って、列挙する	s.split(sep)
文字列がリストの要素	element in aList
リストとリストの散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列が部分文字列で終了するかどうか調べる	s.endswith(sub)
option: 先頭の行をカラムの名前に設定する	header = 0
散布図を描く	plt.scatter(データ列x, データ列y)
折れ線グラフの色をライトシアンに変更する	plt.plot(データ列x, データ列y, color='lightcyan')
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
指定した列の文字列を欠損値にする	df['列A'].replace(値, np.nan)
ゴールド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
文字列を最初の部分文字列を用いて二分割する	s.partition(sub)
画像ファイルとしてグラフを保存する	plt.savefig('foo.png')
xを整数に変換する	int(x)
データフレームをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
アンティークホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
折れ線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
option: 色をスラグレーに指定する	color = 'slategrey'
データフレームの選択したカラムを万の位で丸める	df[['列A', '列B']].round(-4)
平均値付きボックスチャートをプロットする	plt.boxplot(データ列, showmeans=True)
日付時刻データの分数	aDatetime.minute
横棒グラフをライトゴールドロディイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
配列の合計値	np.sum(aArray)
xが1、もしくは2かどうか調べる	x == 1 or x == 2
データフレームのある列をリストにする	df['列A'].values.tolist()
やわらかい青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
option: データ型を指定する	dtype = np.int
二つの集合の積集合	aSet.intersection(aSet2)
プロットのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
縦に三つのデータフレームを一つにする	pd.concat([df, df2, df3], axis=0)
クラス分類の偽陰性をヒートマップで確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
折れ線グラフに左三角マーカーを加える	plt.plot(データ列x, データ列y, marker='<')
実数の逆余弦を求める	math.acos(x)
ヒストグラムの色をシスルにする	plt.hist(データ列, color='thistle')
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
スカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
棒グラフをライトスレイグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightslategray')
全十六進数字	string.hexdigits
棒グラフを深紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
文字列のケースを交換する	s.swapcase()
赤いダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
ふたつの集合の和集合	aSet.union(aSet2)
option: 印を下三角に変える	marker = 'v'
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
整数nを八進数文字列に変換する	oct(n)[2:]
数を浮動小数点数で除する	x / y
横棒グラフをクリムゾン色として描画する	plt.barh(データ列x, データ列y, color='crimson')
option: 色をイエローグリーンに設定する	color = 'yellowgreen'
符号なし８ビット整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
データフレームのある列をリストとして抽出する	df['列A'].values.tolist()
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
縦棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
第一引数のファイルの名前	sys.argv[1]
データシリーズの第三四分位数	ds.quantile(0.75)
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
既存の配列をベースに全要素が1の配列を作る	np.ones_like(aArray)
インディアンレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
オレンジにヒストグラムの色を指定する	plt.hist(データ列, color='orange')
option: ホワイト色を使う	color = 'white'
今日の日付時刻	datetime.datetime.now()
データフレームをCSVファイルにヘッダを付けず保存する	df.to_csv('file.csv', header=None)
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
ディムグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
ヒストグラムの色をダークグリーンに変更する	plt.hist(データ列, color='darkgreen')
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
パレットトルコイズにヒストグラムの色を指定する	plt.hist(データ列, color='paleturquoise')
データフレームから同じ内容の行を破壊的に削除する	df.drop_duplicates(inplace=True)
グラフのデザインをデフォルトでいい感じにする	sns.set()
ヒストグラムの色をグリーンイエローに変更する	plt.hist(データ列, color='greenyellow')
ヒストグラムをブランチドアーモンド色として描画する	plt.hist(データ列, color='blanchedalmond')
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
option: グラフの色をグリーンイエローに指定する	color = 'greenyellow'
ベクトルを2次元1行に変形する	aArray.reshape(1, -1)
データシリーズの文字列をNaNに変換する	ds.replace(値, np.nan)
option: ライトグリーン色を使う	color = 'lightgreen'
文字列の左側からタブを消す	s.lstrip('\t')
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
文字列をマゼンタで表示できる文字列に変換する	f'\033[35m{value}\033[0m'
コマンドラインフラグの状態	sys.flags
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
全ての８進数字	string.octdigits
スレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
数列とリストについて散布図を描き、、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ライトサーモンにヒストグラムの色をする	plt.hist(データ列, color='lightsalmon')
縦方向に複数のデータフレームを結合する	pd.concat([df, df2, df3], axis=0)
ポイント印を使用してデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームのあるカラムの値がx以上の行を抽出する	df[df['列A'] >= x]
ヒストグラムをサドルブラウン色として描画する	plt.hist(データ列, color='saddlebrown')
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
グラフの用途をスライドに設定する	sns.set(context='talk')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
データフレームの選択したカラムのNaNをxに設定する	df[['列A', '列B']].fillna(x)
データフレームの列の種類を確認する	df.info()
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
ゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
上限から下限までの範囲でヒストグラムをプロットする	plt.hist(データ列, range=(start, end))
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
マッピングのコピー	dict(aDict)
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
ライトシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
ファイルパスをバイナリモードとしてオープンする]	open(filepath, mode='rb')
ヒストグラムをカーキ色として描画する	plt.hist(データ列, color='khaki')
棒グラフの横幅をセットする	plt.bar(ラベル列, データ列, width=0.5)
ヒストグラムを淡い茶色色で描画する	plt.hist(データ列, color='tan')
リストを文字列リストに変換して、タブで結合する	'\t'.join(map(str, iterable))
データフレームからランダムに5行を取り出す	df.sample(5)
貝殻色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
異なる列をキーとして2つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
option: ハニーデューを用いる	color = 'honeydew'
option: 紺碧にグラフの色を変更する	color = 'azure'
ふたつの列でグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
プラットホームがLinuxか	sys.platform.startswith('linux')
option: グラフの色を黄色に設定する	color = 'yellow'
データフレームの末尾n行を抽出する	df.tail(n)
補助目盛りを有効にする	plt.minorticks_on()
折れ線プロットを描画する	plt.plot(データ列x, データ列y)
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
折れ線グラフの三角印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフの左三角印の大きさを指定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
option: 青紫にグラフの色を変更する	color = 'violet'
回帰分析をKNNで行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
option: ライトシアンにグラフの色を設定する	color = 'lightcyan'
リストとデータ列についての散布図に▽マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
option: フォントの色をライトスレイグレーに変更する	color = 'lightslategray'
データフレームの欠損値を後の行の値に指定する	df.fillna(method='bfill')
茶色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
option: グラフの色をシアンに指定する	color = 'cyan'
空のロバスト分類器を作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
行列の行列式	np.linalg.det(aArray)
浮動小数点数を文字列に変換する	str(x)
データフレームの先頭10行	df.head(10)
データフレームの指定した列のモード	df['列A'].mode()
リストを二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームに重複があるか確認する	df.duplicated()
ミディアムスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
データフレームの選択したカラムがどの程度、分散しているか確認する	df[['列A', '列B']].var()
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
新しい文字列として文字列中の正規表現を置き換える	re.sub(pattern, newsub, s)
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データ列の各データが何回出現するか見る	ds.value_counts()
双方向キューの要素を反転する	deq.reverse()
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
最初のプログラムを書く	print('Hello World')
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
option: ラベンダーブラッシュに色を指定する	color = 'lavenderblush'
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
option: フォントの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
パープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
双方向キューの中に値が含まれてるか	element in deq
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
グラフにグリッド線を加える	plt.grid(True)
option: インディゴを用いる	color = 'indigo'
データフレームの選択したカラムの標本標準偏差	df[['列A', '列B']].std(ddof=1)
列を文字列リストに変換して部分文字列で結合する	sub.join(map(str, iterable))
リストの割合を円グラフで可視化する	plt.pie(データ列, startangle=90)
option: フォントの色をダークシアンに設定する	color = 'darkcyan'
フォーマットを用いてデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
ValueMapでデータフレームをまとめて置換する	df.replace(ValueMap)
ベクトルの最小値	np.min(aArray)
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
option: オーキッド色を使う	color = 'orchid'
データフレームからランダムに100行を抽出する	df.sample(100)
ヒストグラムをミディアムスレートブルー色として描画する	plt.hist(データ列, color='mediumslateblue')
色付きの実線を用いて線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ダークオーキッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
ファイルのファイル名を見る	os.path.basename(filepath)
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
イテラブルとリストの散布図を描いて、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
日付時刻データとタイムスタンプデータの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
ケンドール相関係数でデータフレームの相関行列を求める	df.corr(method='kendall')
option: 星マーカーを用いる	marker = '*'
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
option: デピンク色を用いる	color = 'deeppink'
重複ありでデータフレームからn行をランダムにサンプリングする	df.sample(n, replace=True)
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
横軸の目盛りを対数に変更する	plt.xscale('log')
黒色で変数をプリントする	print(f'\033[30m{value}\033[0m')
nをn2で整数除算する	n // n2
nからn2の範囲	range(n, n2)
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
ハニーデュー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
タプルをチェーンマップにする	collections.ChainMap(aDict)
グラフにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームのカラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
スピアマン相関係数としてデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
オレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
改行なしに二つの変数をプリントする	print(value, value2, end='')
実数の絶対値	math.fabs(x)
パーセプトロンとして回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
データフレームのインデックスがnの行を抽出する	df.loc[n]
両端キューをリストに変換する	list(deq)
散布図をハニーデュー色を使って描画する	plt.scatter(データ列x, データ列y, color='honeydew')
散布図をダークシアン色として描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
折れ線グラフのクロス印の色を指定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データフレームの一部の列の未入力値を前の行の値で埋める	df[['列A', '列B']].fillna(method='ffill')
エポック秒のカラムからタイムスタンプ型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
文字列をPandasの日付型に変換する	pd.to_datetime(日付を表現した文字列)
綺麗なグラフを使う準備をする	import seaborn as sns
集合に要素を追加する	aSet.add(element)
プラムにヒストグラムの色を変更する	plt.hist(データ列, color='plum')
オブジェクトは論理値型か	isinstance(obj, bool)
TSVファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
こんにちは世界をプリントする	print('Hello World')
数値の平方根を求める	sympy.sqrt(e)
散布図のバツ印の太さを変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
predicateFuncがtrueとなる列の部分を取り除く	itertools.dropwhile(predicateFunc, iterable)
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
横棒グラフを濃い青色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
パールゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
データフレームの中の列をビン数nとしてビン分割する	pd.cut(df[col], n)
数列の移り変わりを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
行列の次元数	aArray.ndim
入力から2つの文字列値を取り出す	A, B = map(str, input().split())
散布図を三角印で描画する	plt.scatter(データ列x, データ列y, marker='^')
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
縦棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
文字列の無限列	itertools.repeat(element)
数列の推移を一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
棒グラフを黄色色として描画する	plt.bar(データ列x, データ列y, color='yellow')
本日の年数	datetime.datetime.today().year
双方向キューの先頭にイテラブルの各要素を順に付け加える	deq.extendleft(iterable)
データシリーズの最頻値	ds.mode()
横棒グラフを描く	plt.barh(ラベル列, データ列)
カテゴリで色付けしてデータフレームの全列の相関を見る	sns.pairplot(df, hue='カテゴリ列')
パーセント付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
散布図の菱形マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
データ列の偏りを平方根変換する	np.sqrt(データ列)
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
マッピングをJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
黄緑色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
折れ線グラフの色をライトシアンにセットする	plt.plot(データ列x, データ列y, color='lightcyan')
プロットを色差別なくする	sns.set(pallete='colorblind')
タプル内の要素が少なくともひとつ真か	any(aTuple)
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
option: n番目のカラムをインデックスにセットする	index_col = n
option: ライトグレー色を使う	color = 'lightgray'
nがn2以下、またはn3以上か調べる	n <= n2 or n >= n3
文字列をトリムする	s.strip()
option: ラインを太くする	linewidth = 3.0
データフレームのモード	df.mode()
列名リストをデータ型でフィルタする	df.select_dtypes(型).columns
文字列を小文字に変換する	s.lower()
散布図をライトコーラル色として描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
データフレームをあるカラムによって大きい順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
実数の正弦の逆数を求める	math.asin(x)
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
スノー色でヒストグラムを描画する	plt.hist(データ列, color='snow')
nとn2の論理積を求める	n & n2
option: ミディアムターコイズにグラフの色を設定する	color = 'mediumturquoise'
表データのあるカラムは何月か見る	df['列A'].dt.month
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
ダークスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
シーケンスの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
青いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
全ての空白文字	string.whitespace
度数分布図を描画し、ビン数を変更する	plt.hist(データ列, bins=区関数)
リストをy軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
option: グラフの色をチョコレートに設定する	color = 'chocolate'
線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
option: 色を淡いピンク色に設定する	color = 'lightpink'
ヒストグラムをライトシアン色を用いて描画する	plt.hist(データ列, color='lightcyan')
option: フォントの色をパールバイオレットレッドに設定する	color = 'palevioletred'
フォレストグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='forestgreen')
データフレームのカラムの歪度を求める	scipy.stats.skew(df['列A'], bias=False)
縦棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
数値を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
データフレームの一部の列を百の位で丸める	df[['列A', '列B']].round(-2)
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
線グラフの色をダークブルーにする	plt.plot(データ列x, データ列y, color='darkblue')
option: ブルーバイオレット色を使用する	color = 'blueviolet'
データフレームの指定したカラムの欠損値を中央値に設定する	df['列A'].fillna(df['列A'].median())
線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームの先頭5行を抽出する	df.head(5)
リストの末尾に文字列を加える	aList.append(element)
option: グラフの色をダークカーキに変更する	color = 'darkkhaki'
折れ線グラフの三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
あるカラムの値がxに等しく、かつ別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
度数分布図の区間を設定する	plt.hist(データ列, range=(start, end))
線グラフの色をピーチパフに指定する	plt.plot(データ列x, データ列y, color='peachpuff')
0からnの範囲を見る	range(n)
文字列を空白で分割し、、文字列リストに変換する	s.split()
option: ライトサーモンを用いる	color = 'lightsalmon'
双方向キューをポップする	deq.pop()
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
アンティークホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='antiquewhite')
青いダイアモンド印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ペアリストpairsからカウンタを新規生成する	collections.Counter(dict(pairs))
rgbの左三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
インデックスで降順でデータフレームを整列する	df.sort_index(ascending=False)
データフレームの選択したカラムがどの程度分散しているか見る	df[['列A', '列B']].var()
辞書のキーを要素に設定する	aDict[key] = element
辞書順で2つの文字列を比較する	s < s2
データフレームの指定したカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
option: 改行コードを旧Macに指定する	newline = '\r'
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
option: 複素数型を使用する	dtype = bool
ファイルをUTF8を用いて書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
データフレームの選択したカラムの中に存在する日付データと文字列の数をカウントする	df[['列A', '列B']].isin([value, value2]).sum()
option: サンディーブラウンを用いる	color = 'sandybrown'
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームの先頭n行	df.head(n)
標準エラーを	sys.stderr
標準出力	sys.stdout
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
変数を青色にする	f'\033[34m{value}\033[0m'
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
散布図の下三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
実数を小数点で丸める	round(x, n)
ファイルを全て読み込む	f.read()
列を文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
データシリーズの年	ds.dt.year
行列の行ごとの最小値を算出する	np.min(aArray, axis=1)
折れ線グラフの丸マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
行列を横ベクトルに変形する	aArray.reshape(1, -1)
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
ふたつの列でグループ化し合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
option: グラフの色をダークグレーに変更する	color = 'darkgray'
option: フクシアにフォントの色を設定する	color = 'fuchsia'
三自然数の最小公倍数	math.lcm(n, n2, n3)
イテラブルから1個ランダムに選ぶ	random.choice(iterable)
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
x軸にラベルをつける	plt.xlabel('x軸ラベル')
データフレームのある列をダミー変数にする	pd.get_dummies(df['列A'])
大量のデータが正規分布に従うか調べる	scipy.stats.kstest(配列, 'norm')
最大値・最小値の範囲で一様な疑似乱数を計算する	random.uniform(最小値, 最大値)
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
2つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
散布図に▲マーカーを使用する	plt.scatter(データ列x, データ列y, marker='^')
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
リストの総和を計算する	sum(aList)
赤い点線でイテラブルの推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
小数点数の常用対数	math.log10(x)
実数の小数部	math.modf(x)[0]
棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
option: 色をライトグレーに設定する	color = 'lightgrey'
全句読点文字	string.punctuation
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
option: ライトスレイグレーを使う	color = 'lightslategrey'
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
文字列の末尾から部分文字列を探す	s.rfind(sub)
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームから数値データを選択する	df.select_dtypes('number')
コーラル色でヒストグラムを描画する	plt.hist(データ列, color='coral')
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
ベクトルの平均値	np.mean(aArray)
折れ線グラフを青い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ミディアムブルーにヒストグラムの色をする	plt.hist(データ列, color='mediumblue')
データフレームをある列のカテゴリでグループ化して、それぞれのグループ毎の件数を知る	df.groupby('列A').size()
折れ線グラフの下三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
データフレームをある列のカテゴリでグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int8)
文字列を大文字・小文字を無視して正規表現で分ける	re.split(pattern, s, flags=re.IGNORECASE)
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
option: ライトスレイグレーに色を変更する	color = 'lightslategray'
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: コロンを区切りで用いる	sep = ':'
指定した列で集計し、それぞれの標準偏差を計算する	df.groupby('列A').std()
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
横棒グラフをスチールブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='steelblue')
イテラブルにリストを続ける	itertools.chain(iterable, iterable2)
エクセルからすべてのシートを読む	pd.read_excel('file.xlsx', sheet_name=None)
nが一桁の整数かどうか	0 <= n <= 9
グリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
データフレームの選択したカラムの統計量	df[['列A', '列B']].describe()
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
option: グラフの色をシャルトリューズに変更する	color = 'chartreuse'
データフレームを降順に複数の列を用いて並べ直す	df.sort_values(by=['列A', '列B'], ascending=False)
文字列の中のASCII限定としてパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
リストのヒストグラムを描画する	plt.hist(データ列)
数式を積分する	sympy.integrate(e)
平均値付きボックスチャートを描画する	plt.boxplot(データ列, showmeans=True)
項目名が辞書に存在していない場合、要素を追加する	aDict.setdefault(key, element)
ふたつの集合のインターセクションのみにする	aSet.intersection_update(aSet2)
データフレームを1000の位で丸めて、整数にする	df.round(-3).astype(int)
散布図の星印の色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
横棒グラフをターコイズ色として描画する	plt.barh(データ列x, データ列y, color='turquoise')
表データのあるカラムの時	df['列A'].dt.hour
データフレームの一部のカラムの欠損値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
ヒストグラムの色をオレンジにセットする	plt.hist(データ列, color='orange')
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
表データのn行目を削除して	df.drop(n, axis=0)
文字列の先頭が部分文字列かどうか調べる	s.startswith(sub)
棒グラフをミディアムシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
小数点数の床	math.floor(x)
データフレームからランダムに抽出する	df.sample()
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
散布図のポイント印の色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
二つの列を組み合わせてグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
ターコイズ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
NaNも加えてデータフレームのある列をダミー変数にする	pd.get_dummies(df['列A'], dummy_na=True)
指定した列のみ、データフレームの重複を見る	df.duplicated(subset='列A')
縦棒グラフをビスク色として描画する	plt.bar(データ列x, データ列y, color='bisque')
グラフをパステル調にする	sns.set(pallete='pastel')
折れ線グラフの色をスノーに変更する	plt.plot(データ列x, データ列y, color='snow')
'A'カラムの値がxに等しい行を抽出する	df[df['列A'] == x]
青い点線を用いてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
option: マーカーの色をやわらかい青にする	markerfacecolor = 'cornflowerblue'
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
赤い一点鎖線でイテラブルの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
２つの文字列をカンマで区切って出力する	print(value, value2, sep=',')
データシリーズがどの程度、正規分布から尖っているか見る	ds.skew()
縦棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
散布図をインディアンレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='indianred')
線グラフをカデットブルー色として描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
円プロットにラベルを設定する	plt.pie(データ列, startangle=90, labels=ラベル列)
nとn2の積	n * n2
ゴールドにヒストグラムの色をセットする	plt.hist(データ列, color='gold')
SVDで淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
横棒グラフをゲインズボロ色を用いて描画する	plt.barh(データ列x, データ列y, color='gainsboro')
データフレームを列によって集計して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
データフレームの選択したカラムの中央値を計算する	df[['列A', '列B']].median()
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
カウンタの全数	aCounter.total()
データフレームのカラムの名前をまとめて置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
ダークオーキッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
散布図の印を四角にする	plt.scatter(データ列x, データ列y, marker='s')
指定した列は正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
イテラブルとリストについての散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームのある列の値がx以下のデータを選択する	df[df['列A'] <= x]
データフレームをソートして、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
横棒グラフをオレンジ色を用いて描画する	plt.barh(データ列x, データ列y, color='orange')
option: 下三角印を描画する	marker = 'v'
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgray')
t-SNEを用いて濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
データフレームの一部の列の尖度	df[['列A', '列B']].skew()
整数nを8進表現に変換する	oct(n)
キューの左に要素を追加する	deq.appendleft(element)
入力ストリーム全体をリストとして読み込む	f.readlines()
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
折れ線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
ヒストグラムのプロットし、、正規化する	plt.hist(データ列, density=True)
ファイルの絶対ファイルパス	os.path.abspath(filepath)
線グラフをペールグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームのインデックスの名前の一覧	df.index
プラム色でヒストグラムを描画する	plt.hist(データ列, color='plum')
日付時刻データの日付	aDatetime.date()
データフレームのある列を配列に変換する	df['列A'].values
日付データと日付データの時間差を求める	aDate - aDate2
xの小数点以下'4'桁までの文字列にする	':.4f'.format(x)
データ列の折れ線グラフを右三角印で描画する	plt.plot(データ列x, データ列y, marker='>')
二つの集合のインターセクション	aSet.intersection(aSet2)
平均と標準偏差から疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
文字列を走査し、正規表現にASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
rgbの丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
実数が正の数か調べる	x > 0
綺麗なグラフを描画する	import seaborn as sns
実数を実数で割った余り	x % y
クラス分類をスタッキングで行う	sklearn.ensemble.StackingClassifier()
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
option: マーカーを左三角に変更する	marker = '<'
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
何回まで再帰ができるかを	sys.getrecursionlimit()
書き込みできるようにファイルをEUCでオープンする]	open(filepath, mode='w', encoding='euc_jp')
散布図のクロスマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: グラフの色をグレーに設定する	color = 'grey'
ゼロ埋めされたブール型のベクトルを作る	np.zeros(要素数, dtype=np.int32)
option: ブランチドアーモンドを使う	color = 'blanchedalmond'
散布図のポイントマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
紺碧色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
グラフのカラーパレットを全般的に暗くする	sns.set(pallete='dark')
黒いポイントマーカーをリストとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームをCSVファイルにWindowsで文字化けしないように書き出す	df.to_csv('file.csv', encoding='utf_8_sig')
ファイルをUTF8で開く]	open(filepath, encoding='utf-8')
カラーバーをつける	plt.colorbar()
ダークレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
ファイルにxを文字列に変換して書き込む	f.write(str(x))
データフレームの選択した列の文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
折れ線グラフの色をミディアムブルーにする	plt.plot(データ列x, データ列y, color='mediumblue')
指定した列のカテゴリで集計し、それぞれの分散を求める	df.groupby('列A').var()
ヘッダー行を左寄せに増やす	pd.set_option('colheader_justify', 'left')
真	True
option: ロードする行番号をnamesで指定する	usecols = names
データフレームの指定した列が正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
ダークサーモン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
列名を指定してデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
横棒グラフをオリベドラブ色を用いて描画する	plt.barh(データ列x, データ列y, color='olivedrab')
暗い赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
option: ダークレッド色を用いる	color = 'darkred'
ホワイトスモーク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
ゼロ埋めされた行列	np.zeros(行数, 列数)
option: カンマを分割記号で使う	sep = ','
データフレームの一部のカラムの中にと日付データがいくつ存在するか求める	df[['列A', '列B']].isin([value, value2]).sum()
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ヒストグラムの色をコーラルに変更する	plt.hist(データ列, color='coral')
nの八進文字列を使う	oct(n)[2:]
範囲指定してデータフレームの行を取り出す	df[start:end]
自分自身をモジュールとしてを	sys.modules[__name__]
option: シーグリーン色を使う	color = 'seagreen'
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
文字列の開始位置と終了位置の間に部分文字列が存在するか確認する	s.find(sub, start, end) != -1
ディムグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
データフレームのn行目を選択する	df.loc[n]
あるカラムの文字列が部分文字列で終わる行を抽出する	df[df['列A'].str.endswith(部分文字列)]
データフレームの列を度数分布図として描画する	plt.hist(df[column])
折れ線グラフのマーカーをバツ印にする	plt.plot(データ列x, データ列y, marker='x')
SVDを用いてパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
折れ線グラフの色をオールドレースに変更する	plt.plot(データ列x, データ列y, color='oldlace')
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
散布図にrgbのポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
文字列の中の複数行対応としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
縦棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
データフレームの中の列をビニングする	pd.cut(df[col], aList)
線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
散布図の大バツマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データフレームをグループ化し、各平均値を求める	df.groupby('列A').mean()
組の値を並べ直す	sorted(aTuple)
option: ペルー色を使用する	color = 'peru'
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
指定した列で集計し、それぞれの標準偏差を求める	df.groupby('列A').std()
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
フローラルホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
文字列の終了位置以前に部分文字列が存在しないか確認する	s.find(sub, 0, end) == -1
タプルから項目名で指定された値を取り出す	aDict.pop(key)
シーケンスを関数でフィルタする	map(func, iterable)
線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
option: 色をターコイズに設定する	color = 'turquoise'
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
ヒストグラムの色をダークシアグリーンにセットする	plt.hist(データ列, color='darkseagreen')
データフレームを複数の列をキーにして昇順に並べ直して、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
datetime64型のデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
サドルブラウン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
直後の値でデータシリーズのNaNを埋める	ds.fillna(method='bfill')
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
棒グラフをライトゴールドロディイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
文字列を回数を制限して置換する	s.replace(sub, newsub, n)
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
散布図をアリスブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
ヒストグラムを一点鎖線で描く	plt.hist(データ列, linestyle='dashbot')
表計算ファイルをデータフレームとして読む	pd.read_excel('file.xlsx')
スタッキングとして回帰分析を行う	sklearn.ensemble.StackingRegressor()
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
シャルトリューズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
文字列をパターンによって置き換える	re.sub(pattern, newsub, s)
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
自然数個からk個取り出した時の順列の総数	math.perm(n, k)
標準出力を得る	sys.stdout
横軸のラベルを設定する	plt.xlabel('x軸ラベル')
日付データの曜日を整数で見る	aDate.weekday()
データフレームの指定したカラムを丸めて、整数にする	df['列A'].round().astype(int)
イテラブルから配列を作る	np.array(iterable)
クラス分類をブースティングで行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
データフレームの選択したカラムの上位25％を求める	df[['列A', '列B']].quantile(0.25)
データフレームの選択した列の相関行列を相関係数で算出する	df[['列A', '列B']].corr(method='pearson')
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームの数値をまとめて四捨五入する	df.round()
折れ線グラフの▽マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
回帰分析をサポートベクターマシンとして行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
配列の列ごとの平均	np.mean(aArray, axis=0)
現在のUNIX時間	int(time.time())
実数を万の位で丸める	round(x, -4)
option: エンコーディングを文字コードtextに指定する	encoding = text
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
グラフにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
データ列の変遷を色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
数列とリストについての散布図に黒い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='k')
イテラブルを累加した列を得る	itertools.accumulate(iterable)
タプル内の要素が少なくともひとつ真	any(aTuple)
year年month月の日付をオブジェクト化する	datetime.date(year=year, month=month, day=1)
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームの列を散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
縦棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
折れ線グラフの▽マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
散布図を赤い四角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
線グラフをパールバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='palevioletred')
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
両端キューの最大長	deq.maxlen
部分文字列で文字列が終了するか調べる	s.endswith(sub)
option: 色を白に指定する	color = 'white'
predicateFuncがTrueとならないシーケンスの部分	itertools.dropwhile(predicateFunc, iterable)
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
リストとリストについて散布図を描き、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
タプルをコピーする	aDict.copy()
横棒グラフをミディアムアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
グラフで使える色の一覧を知る	matplotlib.colors.cnames
赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
データフレームの列を散布図としてプロット化する	sns.scatterplot(data=df, x='列名', y='列名')
データフレームを並べて、上の方n件を取り出す	df.sort_values('キーとなる列').head(n)
列とイテラブルの直積	itertools.product(iterable, iterable2)
線グラフの色をラベンダーに変更する	plt.plot(データ列x, データ列y, color='lavender')
両端キューの大きさ	len(deq)
データ列のエポック秒をタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
浮動小数点数の最大値	sys.float_info.max
列の各データが何回出現するか調べる	df[col].value_counts()
option: 色をダーク・スラテグレーに指定する	color = 'darkslategrey'
散布図を濃い青色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
赤い三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
指定したカラムリストのみ、データフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
縦棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
文字列の先頭は部分文字列	s.startswith(sub)
文字列の接尾辞からエラーなく部分文字列を消す	s.removesuffix(sub)
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
文字列が文字列リストのいづれかどうか	s in aStringList
ライトゴールドロディイエロー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
配列と配列について散布図を描画して、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
n2がnより大きく、かつ、n3より小さいかどうか	n < n2 and n2 < n3
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
両端キューが空であるか調べる	len(deq) == 0
option: グラフの色をパレットトルコイズに変更する	color = 'paleturquoise'
双方向キューは空でないか	len(deq) != 0
nプラスn2	n + n2
ファイルを文字コードtextとして開く]	open(filepath, encoding=text)
ヒストグラムをピンク色を用いて描画する	plt.hist(データ列, color='pink')
タイムスタンプデータををn日後に進める	aDatetime + datetime.timedelta(days=n)
option: フォントの色をパパイヤウィップにする	color = 'papayawhip'
実数は無限大か	math.isinf(x)
一点鎖線にラインの線種を変更する	plt.plot(データ列x, データ列y, linestyle='dashbot')
茶色色を用いてヒストグラムを描画する	plt.hist(データ列, color='brown')
縦棒グラフを白色を使って描画する	plt.bar(データ列x, データ列y, color='white')
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
散布図の菱形マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='turquoise')
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
ミントクリーム色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
配列の尖度	scipy.stats.kurtosis(配列, bias=False)
ヒストグラムの色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
アクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
データフレームを複数の列によってソートしてNaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
縦棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
二次元リストをフラット化する	sum(aList)
浮動小数点数で実数を除算する	x / y
双方向キューの順序を左にn個分ローテンションする	deq.rotate(-n)
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
関数の値によってデータフレームをまとめたグループ	df.groupby(関数)
カウンタを集合に変換する	set(aCounter)
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
文字列をアンダーライン付きにする	f'\033[4m{value}\033[0m'
集合の更新不能版	frozenset(aSet)
縦棒プロットを描画して、棒の幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
複数横に並べてヒストグラムを描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
集合から要素を全て取り除く	aSet.clear()
1行から二つの文字列値を読む	A, B = map(str, input().split())
横棒グラフをオーキッド色を用いて描画する	plt.barh(データ列x, データ列y, color='orchid')
アンティークホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ヒストグラムの色をライトゴールドロディイエローにセットする	plt.hist(データ列, color='lightgoldenrodyellow')
オプションで、標準出力を出力にする	file = sys.stdout
データフレームを昇順にある列によってソートし、、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
追加できるように既存のファイルパスを文字列の示す文字コードでオープンする]	open(filepath, mode='a', encoding=s)
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
nが配列のどれか	n in aArray
数式を方程式として解く	sympy.solve(e)
サンディーブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームの選択したカラムの欠損値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
データフレームの一部の列を百の位で丸めて、整数にする	df[['列A', '列B']].round(-2).astype(int)
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
散布図のポイント印を青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
空の両端キュー	collections.deque()
文字列全体がパターンにASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
双方向キューの右側から値を取り除く	deq.pop()
データシリーズが何日か見る	ds.dt.day
ヒストグラムの色をバイオレットに設定する	plt.hist(データ列, color='violet')
n個の数値イテラブル	range(n)
赤い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='r')
データシリーズを1000の位で四捨五入する	ds.round(-3)
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をカデットブルーに変更する	plt.plot(データ列x, データ列y, color='cadetblue')
リストのn番目からn2番目まで	aList[n:n2]
option: グラフの色をパウダーブルーに指定する	color = 'powderblue'
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
辞書の項目名と値を入れ替える	{v: k for k, v in aDict.items()}
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
オブジェクトが名前付きタプル型か調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ふたつの列からグループ化し分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
ヒストグラムをリネン色を用いて描画する	plt.hist(データ列, color='linen')
リストの先頭のn要素を取り除く	aList[n:]
option: マーカーを下三角に変更する	marker = 'v'
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
option: ミッドナイトブルーに色を設定する	color = 'midnightblue'
実数を切り上げる	math.ceil(x)
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
文字列がアスキー文字	s.isascii()
文字列を太字化する	f'\033[1m{value}\033[0m'
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
最初のカテゴリーを除外してデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
データシリーズは何秒か知る	ds.dt.second
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
散布図を赤いダイアモンドマーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
バイアスなしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
nがn2以下かどうか調べる	n <= n2
全要素を0で初期化した配列	np.zeros(要素数)
option: ナバホホワイトにフォントの色を設定する	color = 'navajowhite'
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
タイムスタンプデータが月曜日か調べる	aDatetime.weekday() == 0
option: バリーウッド色を使う	color = 'burlywood'
データフレームのKurtosisを求める	df.kurt()
option: オレンジ色を使う	color = 'orange'
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
散布図に黒い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
option: やわらかい青色を使う	color = 'cornflowerblue'
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
ヒストグラムの色をオーキッドにする	plt.hist(データ列, color='orchid')
データフレームをある列によって降順にソートする	df.sort_values(by='列A', ascending=False)
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
データフレームの列をカテゴリデータにする	df[col].astype(object)
データフレームのカラムの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
データ列の出現頻度を図示する	plt.hist(データ列)
データフレームの列を度数分布図で描画する	plt.hist(df[column])
正規表現patternでreplに全部データシリーズの値を変更する	ds.replace(pattern, repl, regex=True)
option: スプリンググリーンを用いる	color = 'springgreen'
配列とリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
オブジェクトは整数クラスのインスタンス	isinstance(obj, int)
データフレームの選択したカラムの最頻値	df[['列A', '列B']].mode()
自然対数の底	math.e
ライトコーラル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
ライトイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
リストの末尾	aList[-1]
値を黄色にする	f'\033[33m{value}\033[0m'
変数を太字にする	f'\033[1m{value}\033[0m'
実数の正弦	math.sin(x)
リストを横棒グラフにする	plt.barh(ラベル列, データ列)
集合が空集合か判定する	len(aSet) == 0
折れ線グラフをチョコレート色として描画する	plt.plot(データ列x, データ列y, color='chocolate')
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
FIXME	np.linalg.eig(aArray)
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームの指定した列の値が欠損値か調べる	df['列A'].isna()
リストをn回、接続する	aList * n
データフレームの一部のカラムの不偏分散	df[['列A', '列B']].var(ddof=1)
散布図のダイアモンド印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
赤いクロスマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: 書き込みモードを用いる	mode = 'w'
option: スレートブルー色を使う	color = 'slateblue'
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
データフレームをグループ化し各標準偏差を求める	df.groupby('列A').std()
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列内に数字が含まれるか判定する	any(c.isdigit() for c in s)
縦棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
データフレームのカラムを折れ線グラフで描画する	plt.plot(df[column], df[column])
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
文字列を空白で右から分割する	s.rsplit()
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
データフレームの一部のカラムは正規分布からどの程度尖っているか調べる	df[['列A', '列B']].skew()
実数とyの斜辺を計算する	math.hypot(x, y)
日付時刻データからn日分減算する	aDatetime - datetime.timedelta(days=n)
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
文字列内にひとつでもアルファベットが含まれるかどうかテストする	any(c.isalpha() for c in s)
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
散布図に大バツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='X')
nを否定する	not n
データ列の出現頻度を可視化する	plt.hist(データ列)
コマンドの第一引数を知る	sys.argv[1]
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームをある列として集約して、それぞれのグループごとの件数を知る	df.groupby('列A').size()
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
ヒストグラムの色をブランチドアーモンドに変更する	plt.hist(データ列, color='blanchedalmond')
ひとつでも英数字が文字列内に含まれるか確認する	any(c.isalnum() for c in s)
縦棒グラフをターコイズ色として描画する	plt.bar(データ列x, データ列y, color='turquoise')
横棒グラフを描画する	plt.barh(ラベル列, データ列)
縦軸の軸ラベルをuntitledに指定する	plt.ylabel('y軸ラベル')
option: グラフの色をパパイヤウィップに指定する	color = 'papayawhip'
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
JSONファイルのfをデータに変換する	json.load(fin)
改行で区切って２つの変数をプリントする	print(value, value2, sep='\n')
散布図をスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='slateblue')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
option: イエローグリーンを用いる	color = 'yellowgreen'
データフレームを二つの列によって降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
指定したカラムの中に日付データと文字列があるか調べる	df['列A'].isin([value, value2])
ユニークな値を要素とする行列	np.unique(aArray)
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
ダークオリーブグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
option: 列の名前をリストで設定する	names = 列名リスト
ネイビーにヒストグラムの色を指定する	plt.hist(データ列, color='navy')
無限にnからカウントダウンする	itertools.count(start=n, step=-1)
空行を表示する	print()
数値でデータフレームのあるカラムの欠損値を埋める	df['列A'].fillna(x)
文字列はリストの要素	element in aList
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
レモンシフォン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ティール色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
オブジェクトはリスト型かどうか調べる	isinstance(obj, list)
トマト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
TSVファイルファイル名がかどうか	filename.endswith('.tsv')
ライトシアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
データシリーズの欠損値を最小値で埋める	ds.fillna(ds.min())
ASCII限定として正規表現を事前にコンパイルする	re.compile(pattern, flag=re.ASCI)
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
赤いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='r')
無限イテラブル	itertools.count()
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
スレートブルー色としてヒストグラムを描画する	plt.hist(データ列, color='slateblue')
横棒グラフをレモンシフォン色を使って描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
列の一覧を見る	df.info()
オブジェクトは数値か	isinstance(obj, (int,float))
数列の散らばりを描画する	plt.scatter(データ列x, データ列y)
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
折れ線グラフをカデットブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='cadetblue')
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
option: マーカーを右三角に変更する	marker = '>'
青い一点鎖線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
コーンフラワーブルー色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
option: バイナリモードに変更する	mode = 'rb'
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
ヒストグラムの色をチョコレートにセットする	plt.hist(データ列, color='chocolate')
上限nの双方向キューをタプルから作る	collections.deque(iterable, maxlen=n)
option: 改行を分割記号で使用する	sep = '\n'
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームのあるカラムの秒を使う	df['列A'].dt.second
option: 文字コードをSJISに設定する	encoding = 'shift_jis'
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
文字列中の部分文字列をカウントする	s.count(sub)
option: データ型を指定する	dtype = np.int16
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
データフレームを二つのカラムによってソートし、、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
フィシャー流の尖度	scipy.stats.kurtosis(配列, fisher=True, bias=False)
トマト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
option: ライトスレイグレーにフォントの色を指定する	color = 'lightslategrey'
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
日付時刻データの秒	aDatetime.second
データフレームのあるカラムの曜日数	df['列A'].dt.dayofweek
列を中央値でビン分割する	pd.qcut(ds, 2)
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
データフレームの選択したカラムの値が欠損値か調べる	df[['列A', '列B']].isna()
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
リストのn番目の要素を削除する	del aList[n]
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
リストを逆順にする	aList[::-1]
option: ミディアムブルーを使用する	color = 'mediumblue'
データフレームの選択したカラムの平均値	df[['列A', '列B']].mean()
棒グラフを紺碧色として描画する	plt.bar(データ列x, データ列y, color='azure')
データフレームの指定したカラムを丸めて、整数型にする	df['列A'].round().astype(int)
大文字・小文字を無視して正規表現を事前にコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
文字列は十進数字	s.isdecimal()
データフレームを表示するとき、データフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
横棒グラフをライトブルー色を使って描画する	plt.barh(データ列x, データ列y, color='lightblue')
文字列が空白からなるか確認する	s.isspace()
空の計数器	collections.Counter()
線グラフの色をダーク・スラテグレーにセットする	plt.plot(データ列x, データ列y, color='darkslategrey')
コーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
イテラブルとイテラブルについて散布図を描画し、、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
配列のスピアマンの順位相関係数を計算する	scipy.stats.spearmanr(配列, 配列2)
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
オブジェクトはリストクラスか調べる	isinstance(obj, list)
ヒストグラムをスチールブルー色として描画する	plt.hist(データ列, color='steelblue')
データフレームの全列を散布図を使って可視化する	sns.pairplot(df)
option: ミディアムシアグリーン色を使用する	color = 'mediumseagreen'
正規分布を判定する	scipy.stats.shapiro(df['列A'])
縦棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
データフレームの一部の列の中にがある	df[['列A', '列B']].isin([value])
マップのコピーを作成する	dict(aDict)
スカイブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
組のn番目からn2番目まで	aTuple[n:n2]
折れ線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列x, データ列y, color='mediumorchid')
ナバホホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
日付時刻データにn日分加算する	aDatetime + datetime.timedelta(days=n)
折れ線グラフを淡いピンク色色として描画する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームの一部のカラムの欠損値を直後の値で補完する	df[['列A', '列B']].fillna(method='bfill')
データフレームのあるカラムの中に文字列とが含まれる	df['列A'].isin([value, value2])
四分位点でデータをスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データフレームの選択したカラムの中にある文字列と文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
数式の変数にnを代入する	e.subs(z, n)
オブジェクトが関数かどうか確認する	callable(obj)
データ列の折れ線グラフをプロットして、カラーコードで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
双方向キューの要素を左にn個分ローテンションする	deq.rotate(-n)
散布図をライトブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightblue')
カラムを日付データに変換する	pd.to_datetime(df['列A'])
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
文字列が文字列リストのいづれかどうか調べる	s in aStringList
文字列を区切り記号で区切って、文字列リストに変換する	s.split(sub)
整数nを二進表現にする	bin(n)
データフレームの中の列を等量でビン数nを用いてビン分割する	pd.qcut(df[col], n)
三つの数値を順にプリントする	print(value, value2, value3)
赤にヒストグラムの色を設定する	plt.hist(データ列, color='red')
折れ線グラフの色をミッドナイトブルーに指定する	plt.plot(データ列x, データ列y, color='midnightblue')
折れ線グラフに星印を使う	plt.plot(データ列x, データ列y, marker='*')
何回まで再帰ができるかを確める	sys.getrecursionlimit()
外れ値を除いたデータフレームのカラムの分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
データフレームの指定したカラムにおいてどの値が頻出か見る	df['列A'].mode()
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
ミディアムアクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
指定したカラムの中にいくつ日付データが存在するかカウントする	df['列A'].isin([value]).sum()
n2がn以上、かつn3以下	n <= n2 and n2 <= n3
データフレームの未入力値を直後の値で埋める	df.fillna(method='bfill')
データフレームの指定したカラムの文字列を欠損値にする	df['列A'].replace(値, np.nan)
リストと配列について散布図を描画してマーカーを▼に設定する	plt.plot(データ列x, データ列y, marker='v')
option: ダークブルー色を用いる	color = 'darkblue'
グラフにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
折れ線グラフをマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='magenta')
データシリーズの下位25％	ds.quantile(0.75)
数値の展開を行う	sympy.expand(e)
タイムスタンプを使う	import time
散布図にrgbの菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
数のn乗の浮動小数点数剰余を求める	pow(x, n, y)
行列の列ごとの最大値を計算する	np.max(aArray, axis=0)
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
配列の幾何平均を使う	scipy.stats.gmean(配列)
最適な位置に凡例を表示する	plt.legend(loc='best')
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
散布図をrgbのダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
空の多重集合	collections.Counter()
折れ線グラフの色をコーンズシルクに変更する	plt.plot(データ列x, データ列y, color='cornsilk')
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
再帰が何回までできるか、	sys.getrecursionlimit()
折れ線グラフの丸マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
ヒストグラムの色をダークグレーに変更する	plt.hist(データ列, color='darkgrey')
スタックのstart番目からend番目までの要素	collections.deque(itertools.islice(deq, start, end))
縦棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
ある列のカテゴリごとの最大値を求める	df.groupby('列A').max()
折れ線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
カウンタをリストから作成する	collections.Counter(iterable)
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
option: マルーンを使う	color = 'maroon'
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
文字列の先頭で正規表現にケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
ロバストな線形分類器を準備する	model = sklearn.linear_model.HuberClassifier()
データフレームの最初のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
散布図を暗い赤色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkred')
ヒストグラムをパパイヤウィップ色として描画する	plt.hist(データ列, color='papayawhip')
ライトグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
青緑色として散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データフレームから型の列のみ抽出する	df.select_dtypes(ty)
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
等しい量になるようにビン数nでデータ列をビニングする	pd.qcut(ds, n)
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
０で全要素を初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
空の双方向キューを作る	collections.deque()
英字を全て使う	string.ascii_letters
赤いポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
ASCII限定としてパターンに文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
データシリーズの未入力値を平均値に設定する	ds.fillna(ds.mean())
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
散布図をパウダーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='powderblue')
本日の月数	datetime.datetime.today().month
縦棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
データ列をn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
線グラフをグリーンイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='greenyellow')
縦棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
option: 左三角マーカーを加える	marker = '<'
要素を両端キューの最初から取り除く	deq.popleft()
option: 文字コードをSJISに変更する	encoding = 'shift_jis'
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
ヒストグラムの色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
ファイル全体をリストに変換する	[s.strip() for s in f.readlines()]
文字列中に非ASCII文字がある	any(not c.isascii() for c in s)
option: 列方向に計算する	axis = 0
リストを縦軸リストを横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
option: グラフの種類を実線に設定する	linestyle = 'solid'
option: 右三角マーカーを加える	marker = '>'
折れ線グラフの色をディムグレーにセットする	plt.plot(データ列x, データ列y, color='dimgray')
文字列の中でパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s)
option: コロンを区切りで使用する	sep = ':'
本日が木曜日かどうか確認する	datetime.datetime.today().weekday() == 3
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
ファイルパスの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
インデント幅nで、辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
グラフの色を明るくする	sns.set(pallete='bright')
nがn2で割り切れるか調べる	n % n2 == 0
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
棒グラフをホワイトスモーク色を使って描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
オブジェクトはリストクラスのインスタンスかどうか調べる	isinstance(obj, list)
rgbのダイアモンドマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: ミスティローズ色を使う	color = 'mistyrose'
JSONフォーマットのバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
データフレームのあるカラムの分を求める	df['列A'].dt.minute
option: シアン色を使用する	color = 'cyan'
パールゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームをに箱ひげ図を使って可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
rgbの右三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
赤い破線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ドジャーブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
データフレームの選択したカラムを十の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
ライトイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
現在は何日か知る	datetime.datetime.today().day
文字列の最初から空白やタブを除く	s.lstrip()
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフの▲マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データシリーズのタイムゾーンを設定する	ds.tz_convert('Asia/Tokyo')
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
リストにリストを加える	aList.extend(aList2)
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
ファイルパスをUTF8でオープンする]	open(filepath, encoding='utf-8')
ケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
イテラブルとリストについての散布図に黒い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
縦棒グラフを珊瑚色で描画する	plt.bar(データ列x, データ列y, color='coral')
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
ファイルを書き込み用に文字コードtextでオープンする]	open(filepath, mode='w', encoding=text)
棒グラフをブルーバイオレット色を使って描画する	plt.bar(データ列x, データ列y, color='blueviolet')
nが3の倍数か	n % 3 == 0
option: カンマをセパレータで使う	sep = ','
option: グラフの色をアクアにする	color = 'aqua'
データ列の折れ線グラフを右三角印として描画する	plt.plot(データ列x, データ列y, marker='>')
右三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームの指定したカラムの中に文字列があるか調べる	df['列A'].isin([value])
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
データフレームの指定した列の名前一覧の列を抽出する	df[columns]
異なる列をキーとして表データを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
nが1、もしくは2	n == 1 or n == 2
列名を指定して二つのデータフレームを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
等間隔のベクトル	np.arange(開始値, 終了値, 等差)
データフレームの選択したカラムの中に文字列があるかどうか調べる	df[['列A', '列B']].isin([value])
ホットピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
option: パレットトルコイズにフォントの色を設定する	color = 'paleturquoise'
ASCII限定として正規表現で文字列を区切る	re.split(pattern, s, flags=re.ASCI)
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
データフレームを二つの列で昇順に整列して更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
グラフのデータラベルの位置を(x,y)に設定する	plt.legend(loc=(x, y))
ある列の値がxに等しい行を抽出する	df[df['列A'] == x]
データフレームをグループ化し、ある列に対し個数を算出する	df.groupby('列A')['列B'].count()
行列式	np.linalg.det(aArray)
文字列の先頭でケースを無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
year年month月day日hour時の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
スラグレーにヒストグラムの色を指定する	plt.hist(データ列, color='slategrey')
表計算ファイルからCSVをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
二つの浮動小数点数がほぼ等しいかどうか調べる	math.isclose(x, x2)
リストとリストを接続する	aList + aList2
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
ヒストグラムの色を青紫に指定する	plt.hist(データ列, color='violet')
year年の日付をオブジェクト化する	datetime.date(year=year, month=1, day=1)
イテラブルからn個サンプリングする	random.sample(iterable, k=n)
データフレームの一部のカラムを十の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
日付時刻データの秒数	aDatetime.second
散布図のバツ印の線幅を変える	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
option: ライトスレイグレー色を使う	color = 'lightslategray'
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
グラフを画面用に設定する	sns.set(context='notebook')
option: ペールグリーンにグラフの色をセットする	color = 'palegreen'
option: ブルーバイオレット色を使う	color = 'blueviolet'
数字を全部使う	string.digits
nが何桁か	len(str(n))
浮動小数点数を実数で割って切り捨てる	x // y
線グラフをライトコーラル色として描画する	plt.plot(データ列x, データ列y, color='lightcoral')
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
エクセルファイルから複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
実数を数で除した余り	x % y
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
要素が全て1の配列	np.ones(要素数, dtype=np.int)
辞書の全をクリアする	aDict.clear()
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
文字列の先頭でパターンに複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
数列とリストの散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
データフレームの中にいくつ欠損値が存在するか数える	df.isna().sum()
指定したカラムのカテゴリで集計し各個数を求める	df.groupby('列A').count()
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
データシリーズの欠損値を前の値に設定する	ds.fillna(method='ffill')
データフレームをCSVファイルにSJISで書き出す	df.to_csv('file.csv', encoding='shift_jis')
データフレームを千の位で丸める	df.round(-3)
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
nの二乗	n ** 2
TSVファイルファイル名がかどうか調べる	filename.endswith('.tsv')
データシリーズの中の欠損値の合計を数える	ds.isna().sum()
配列のピアソンの積立相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
ミッドナイトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
データフレームをある列をキーにして昇順にソートして更新する	df.sort_values(by='列A', ascending=True, inplace=True)
2つの最小値	min(x, y)
改行なしに文字列を表示する	print(value, end='')
実測値を重回帰モデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
縦棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
データフレームを異なる列をキーにしてジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
データフレームの指定したカラムの標本標準偏差	df['列A'].std(ddof=1)
行列の型	aArray.dtype()
プロットにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
文字列の変数名を数式に変換する	sympy.Symbol(s)
オリーブ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
グラフの色をパステル調にする	sns.set(pallete='pastel')
縦棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
ファイルをBOM付きとして書き込み用に開く]	open(filepath, mode='w', encoding='utf_8_sig')
option: グラフの色をホットピンクに設定する	color = 'hotpink'
三自然数のGCDを求める	math.gcd(n, n2, n3)
ある列の文字列が正規表現にマッチする行を抽出する	df[df['列A'].str.match(正規表現)]
ディムグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
ダークシアン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
赤い実線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ブラック色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
散布図に赤い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
1行標準入力から読み込んで改行を取り除く	sys.stdin.readline().rstrip()
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
データフレームの50パーセンタイル	df.median()
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
n2がn以上、かつ、n3以下	n <= n2 and n2 <= n3
リストから重複を除く	sorted(set(aList), key=aList.index)
２変数の最大値	max(x, y)
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
ヒストグラムの色をシルバーに変更する	plt.hist(データ列, color='silver')
文字列がタイトルケース	s.istitle()
ヒストグラムの色をインディゴに指定する	plt.hist(データ列, color='indigo')
ヒストグラムの色を紺に指定する	plt.hist(データ列, color='darkblue')
データフレームをあるカラムの値としてグループ化し、、それぞれのグループの件数を知る	df.groupby('列A').size()
rgbの星マーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
数列と配列について散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
リストとリストの散布図を描画し、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
ポスターにグラフを設定する	sns.set(context='poster')
点線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: バイアスを算出しない	fit_intercept = False
リストのn番目からn2番目までの部分を抽出する	aList[n:n2]
ヒストグラムをスラグレー色を用いて描画する	plt.hist(データ列, color='slategray')
配列の列ごとの平均値	np.mean(aArray, axis=0)
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折り返しをしない	pd.set_option('expand_frame_repr', False)
ファイルパスをUTF8を用いて書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
nがn2で割り切れるか	n % n2 == 0
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
説明変数と目的変数で線形回帰モデルを学習する	model.fit(説明変数, 目的変数)
スレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
エラーなく集合から値を除く	aSet.discard(element)
サポートベクトル分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列を空白を使って区切って整数のリストに変換する	map(int, s.split())
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
正規分布の累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
RANSACで回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
指定した列のカテゴリで集計し、それぞれの合計を求める	df.groupby('列A').sum()
文字列を走査し正規表現にマッチするか確認する	re.search(pattern, s)
十六進数字を全て求める	string.hexdigits
データフレームの指定したカラムがどの程度、分散しているか見る	df['列A'].var()
option: 改行を区切りで使う	sep = '\n'
文字列を白色化する	f'\033[37m{value}\033[0m'
縦棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
データフレームの列の各データ値の出現数	df[col].value_counts()
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
列のエポック秒をタイムスタンプ型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
表データのあるカラムのタイムゾーンを日本に変更する	df['列A'].tz_convert('Asia/Tokyo')
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
二つの集合の和集合	aSet.union(aSet2)
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
タプルの長さ	len(aTuple)
8進数文字列をbytesizeバイトのバイナリにする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
色付きの点線として数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ヒストグラムをパレットトルコイズ色を使って描画する	plt.hist(データ列, color='paleturquoise')
文字列の最後から部分文字列を取り除く	s.rstrip(sub)
文字列の右側からタブを除く	s.rstrip('\t')
新しい文字列で文字列を置換する	s.replace(sub, newsub)
折れ線グラフの印を大バツにする	plt.plot(データ列x, データ列y, marker='X')
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
線グラフを赤い一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
折れ線グラフにポイント印を用いる	plt.plot(データ列x, データ列y, marker='.')
文字列の右側から部分文字列を探す	s.rfind(sub)
CSVファイルでデータフレームを出力する	df.to_csv('file.csv')
グラフのデータラベルの位置を(x,y)に指定する	plt.legend(loc=(x, y))
紺碧色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
xとyの商と余りを同時に算出する	divmod(x, y)
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
option: フォントの色をダークスラテグレーに設定する	color = 'darkslategray'
プロットにx=0の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
棒グラフをダーク・スラテグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
データフレームの列名をまとめて文字列置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
rgbのバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: グラフの色をリネンにセットする	color = 'linen'
日付時刻データにn分分加算する	aDatetime + datetime.timedelta(minutes=n)
option: グラフの色を淡い茶色に設定する	color = 'tan'
ゼロ埋めした行列を初期化する	np.zeros(行数, 列数)
文字列をインターンする	sys.intern(s)
y座標の目盛の値を変更する	plt.yticks(目盛りの値リスト)
ダークグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
赤い一点鎖線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームの指定した列を1000の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
ある列の文字列が正規表現にマッチする行を選択する	df[df['列A'].str.match(正規表現)]
文字列内にひとつでも英数字があるか	any(c.isalnum() for c in s)
nまでの奇整数列	list(range(1, n, 2))
xの小数点以下'5'桁まで表示する	print(':.5f'.format(x))
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
整数を小数点で丸める	round(x, n)
棒グラフをゴールデンロッド色を使って描画する	plt.bar(データ列x, データ列y, color='goldenrod')
折れ線グラフを赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
線グラフをスノー色を用いて描画する	plt.plot(データ列x, データ列y, color='snow')
nがn2か	n == n2
option: イエローグリーン色を使う	color = 'yellowgreen'
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
文字列が文字列リストに含まれるかどうか調べる	s in aStringList
エクセルファイルファイルからCSVファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
データフレームをグループ化し、ある列に対し最大値を求める	df.groupby('列A')['列B'].max()
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
ミディアムターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='mediumturquoise')
データフレームを丸める	df.round()
データフレームの先頭10行を調べる	df.head(10)
マッピングの項目数を参照する	len(aDict)
散布図のポイント印を赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
値が集合のメンバーかどうか確認する	element in aSet
シエナ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
カウンタの項目数	len(aCounter)
空文字を求める	''
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
列をフォーマットとして日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
配列と配列の散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
リストから文字列を除く	aList.remove(element)
実数を実数で整数除算する	x // y
データフレームの値が欠損値	df.isna()
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームのあるカラムの曜日名	df['列A'].dt.weekday_name
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
replに正規表現patternでデータフレームの値を一度に置換する	df.replace(pattern, repl, regex=True)
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
キュー中のデータのインデックス	deq.index(element)
列名をリストで置き換える	df.columns = columns
小麦色にヒストグラムの色を変更する	plt.hist(データ列, color='wheat')
カテゴリデータを連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
折れ線グラフをペルー色を使って描画する	plt.plot(データ列x, データ列y, color='peru')
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
option: 線の幅を設定する	linewidth = 3.0
xが一桁の正の数か調べる	0 <= x <= 9
y座標の表示範囲を変更する	plt.ylim(最小値, 最大値)
フクシアにヒストグラムの色を変更する	plt.hist(データ列, color='fuchsia')
カウンタ同士で共通部分演算する	aCounter & aCounter2
変数を青色化する	f'\033[34m{value}\033[0m'
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
ミディアムスプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
ある列のカテゴリの個数	df.groupby('列A').count()
データフレームの指定したカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
データフレームのNaNを第二四分位数で埋める	df.fillna(df.median())
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
標準エラー	sys.stderr
nとn2のビット和を求める	n | n2
日付データが何日か知る	aDate.day
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
赤いクロスマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
option: ダークグリーンにグラフの色を指定する	color = 'darkgreen'
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
option: 読み込みモードを使用する	mode = 'r'
辞書から項目名の値をエラーなく得る	aDict.get(key, None)
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
折れ線グラフの色をナバホホワイトにする	plt.plot(データ列x, データ列y, color='navajowhite')
カテゴリで色付けしてデータフレームをに箱ひげ図で見る	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
リストとリストについて散布図を描いて、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
双方向キューが空でない	len(deq) != 0
データフレームをインデックスでソートする	df.sort_index()
SDGで回帰分析をする	model = sklearn.linear_model.SGDRegressor()
データフレームの指定したカラムの中の欠損値の合計を調べる	df['列A'].isna().sum()
イテラブルから最大長nの両端キューを作る	collections.deque(iterable, maxlen=n)
option: 色をダークターコイズに設定する	color = 'darkturquoise'
棒グラフを暗い赤色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
線グラフをライトサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
option: フォントの色をアイボリーに指定する	color = 'ivory'
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
散布図に黒い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
シーケンスのそれぞれを関数でフィルタする	map(func, iterable)
option: マーカーを星に変更する	marker = '*'
本日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
データフレームの行をリセットする	df.reset_index()
シートを指定してデータフレームをエクセルから読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
オプションで、標準出力に出力する	file = sys.stdout
プロットを画像ファイルとして保存する	plt.savefig('foo.png')
データフレームのあるカラムの欠損値を直前の値に指定する	df['列A'].fillna(method='ffill')
実数を十六進文字列に変換する	x.hex()
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
n割るn2の切り上げ	(n + n2 - 1) // n2
数列とイテラブルについての散布図にrgbの▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
文字列リストを一つにしてひとつの文字列にする	''.join(map(str, iterable))
データフレームを整数に丸める	df.round()
実数が整数か調べる	x.is_integer()
option: グラフの種類を破線に設定する	linestyle = 'dashed'
ファイル名がTSVファイルかどうか調べる	filename.endswith('.tsv')
デックに値をスタックする	deq.append(element)
ある列の空文字を未入力値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
パープル色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
option: ベージュ色を使う	color = 'beige'
実数の２乗を求める	x ** 2
リストの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
実行結果を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
ライトイエロー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
縦棒グラフを描画して、バーの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
リッジ回帰とロッソ回帰の組み合わせた分析の準備をする	model = sklearn.linear_model.ElasticNet()
タプルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
データフレームのパーセンタイル	df.quantile(パーセント/100)
文字列の接頭辞から部分文字列を消す	s.removeprefix(sub)
モカシン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
数式を簡単化する	sympy.sympify(e)
数式の積分を算出する	sympy.integrate(e)
配列の平均値	np.mean(aArray)
折れ線グラフの色をスレートブルーに変更する	plt.plot(データ列x, データ列y, color='slateblue')
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
アクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
サーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
option: 珊瑚色を使う	color = 'coral'
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
角度のラジアンを算出する	math.radians(degree)
実線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
文字列は全て識別子名か調べる	s.isidentifier()
三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
グリッドの線スタイルを破線に変更する	plt.grid(linestyle='dashed')
あるカラムの値ごとの標準偏差を算出する	df.groupby('列A').std()
データシリーズを万の位で四捨五入する	ds.round(-4)
データフレームの一部のカラムの値がNaN	df[['列A', '列B']].isna()
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
ファイルパスが存在しない	not os.path.exists(filepath)
正規分布による確率密度関数を使う	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
数式を数値計算する	float(e)
データフレームのある列を10の位で丸める	df['列A'].round(-1)
オプションで出力先を標準出力に変更する	file = sys.stdout
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
散布図のマーカーを大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
キーがマップに存在し、いるか調べる	key in aDict
配列を中央値でビン分割する	pd.qcut(aArray, 2)
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
実数を文字列にする	str(x)
ファイルをUTF8として書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
nの2乗	n ** 2
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
リストの全ての要素を空にする	aList.clear()
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
データシリーズの未入力値を最頻値に変更する	ds.fillna(ds.mode().iloc[0])
折れ線グラフの色をカラーコードで指定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームをあるカラムで昇順に並べ直す	df.sort_values(by='列A', ascending=True)
浮動小数点数の小数点を丸める	round(x)
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
値をスタックにエンキューする	deq.appendleft(element)
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
nが負の数か	n < 0
データフレームの選択したカラムの欠損値を第二四分位数にセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
浮動小数点数のsinの逆数	math.asin(x)
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
アクアマリンにヒストグラムの色を変更する	plt.hist(データ列, color='aquamarine')
ペールグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
xを論理値にする	bool(x)
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
データフレームをある列の値によってまとめたグループを見る	df.groupby('列A')
数値を浮動小数点数にする	float(e)
ライトコーラル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
ヒストグラムの色をディムグレーに変更する	plt.hist(データ列, color='dimgrey')
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
折れ線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
ライトゴールドロディイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
タプルを逆順にする	reversed(aTuple)
データフレームは正規分布からどの程度、尖っているか見る	df.skew()
データフレームの指定したカラムの第三四分位数	df['列A'].quantile(0.75)
数値の因数分解を行う	sympy.factor(e)
データフレームのカラムの標準偏差を算出する	df['列A'].std()
線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
偽陰性を避けたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
深紅色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
多次元データを主成分分析として淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
ブラック色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
目的変数をモデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
データフレームの次元の大きさ	df.shape
option: ドジャーブルー色を使用する	color = 'dodgerblue'
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの選択した列の標本分散を計算する	df[['列A', '列B']].var(ddof=0)
データフレームの一部のカラムがどの程度分散しているか見る	df[['列A', '列B']].var()
ヒストグラムの色をダーク・スラテグレーにセットする	plt.hist(データ列, color='darkslategrey')
データフレームのヒストグラムを縦横に並べて、図示する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
JSONファイルファイル名がか調べる	filename.endswith('.json')
横棒グラフをロージーブラウン色を使って描画する	plt.barh(データ列x, データ列y, color='rosybrown')
シャルトリューズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
リストとリストについての散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームの選択したカラムの中にいくつ欠損値があるか調べる	df[['列A', '列B']].isna().sum()
縦棒グラフをミディアムスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
option: ゴールデンロッドを使う	color = 'goldenrod'
データフレームの選択したカラムの未入力値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
タイムスタンプデータを数値に変換する	aDatetime.timestamp()
nのビット長を調べる	n.bit_length()
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
散布図をコーンズシルク色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
ファイルをバイナリモードを用いてオープンして]、fとする	f = open(filepath, mode='rb')
オブジェクトがリストクラスのインスタンスかどうか調べる	isinstance(obj, list)
ミディアムパープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
option: 印をダイアモンドに変える	marker = 'D'
TSVファイルからデータフレームを読む	pd.read_csv('file.tsv', sep='\t')
option: アンティークホワイト色を使用する	color = 'antiquewhite'
集合をイミュータブルなセットに変換する	frozenset(aSet)
ある列の文字列が部分文字列で始まらないデータを取り出す	df[~ df['列A'].str.startswith(部分文字列)]
データフレームを二つの列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
指定したカラムの中に日付データと文字列がいくつ含まれるか数える	df['列A'].isin([value, value2]).sum()
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
ミディアムブルー色としてヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
xが一桁の正の数か判定する	0 <= x <= 9
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
文字列の中の複数行対応として正規表現によるすべてのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
データフレームを散布図で可視化し、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
分類モデルの適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
モデルを作る	model.fit(説明変数, 目的変数)
折れ線グラフにクロス印を使用する	plt.plot(データ列x, データ列y, marker='x')
option: ダークオレンジにフォントの色を設定する	color = 'darkorange'
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
nが負の数かどうか	n < 0
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
タン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
乱数の行列	np.random.random((行数, 列数))
option: 文字コードをSJISに指定する	encoding = 'shift_jis'
データフレームの行名をまとめて変更する	df.rename(index={x: y})
リネン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
ヒストグラムをブルーバイオレット色を用いて描画する	plt.hist(データ列, color='blueviolet')
nをn2で割ったモジュロを求める	n % n2
データフレームの中である列に重複があれば、除く	df.drop_duplicates(subset='列A', inplace=True)
日付時刻データが水曜日かどうか調べる	aDatetime.weekday() == 2
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategray')
フォレストグリーン色でヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
指定したカラムの中にいくつ未入力値があるか数える	df['列A'].isna().sum()
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
リストの文字列の位置をエラーなく見る	aList.index(element) if element in aList else -1
option: ミディアムパープル色を使用する	color = 'mediumpurple'
要素がセットに含まれるか	element in aSet
折れ線グラフの丸マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
rgbの星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データ列の文字列長を列として使う	ds.str.len()
x軸のラベルを設定する	plt.xlabel('x軸ラベル')
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
ライトサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
データシリーズの空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
データフレームをある列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
数式を簡単にする	sympy.sympify(e)
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(df['列A'])
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
あるカラムのカテゴリごとの分散	df.groupby('列A').var()
散布図のダイアモンドマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図の四角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
全８進数字	string.octdigits
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
部分文字列を文字列の終了位置まで探す	s.find(sub, 0, end)
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
nからn2を引く	n - n2
文字列はPythonのキーワード	keyword.iskeyword(s)
折れ線グラフの印を▽にする	plt.plot(データ列x, データ列y, marker='v')
整数nの十六進表現	hex(n)
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
ダークレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
option: ダイアモンドマーカーを加える	marker = 'D'
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
インディアンレッドにヒストグラムの色を設定する	plt.hist(データ列, color='indianred')
縦棒グラフをプロットして、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
バイナリ書き込みモードでファイルをオープンして]、fとする	f = open(filepath, mode='wb')
グラフの描画でパステル調に色を用いる	sns.set(pallete='pastel')
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
折れ線グラフの下三角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
データフレームのあるカラムが何日か調べる	df['列A'].dt.day
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
option: ネイビー色を使用する	color = 'navy'
実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
nの二乗を算出する	n ** 2
ドジャーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
ファイルからファイル名を取り出す	os.path.basename(filepath)
option: ハニーデューにグラフの色を設定する	color = 'honeydew'
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
データフレームのカラムの正規分布を判定する	scipy.stats.shapiro(df['列A'])
配列の相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
組中の要素が少なくともひとつ真かどうか調べる	any(aTuple)
行列の列	aArray[:, 列番号]
option: バイナリ書き込みモードに設定する	mode = 'wb'
リストの推移を点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
一方に含まれ他方に含まれない集合を使う	aSet.difference(aSet2)
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
実数が無限大	math.isinf(x)
文字列全体がパターンにケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
折れ線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
折り返しを無効にセットする	pd.set_option('expand_frame_repr', False)
暗い赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
ASCII限定として文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
n個に配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
部分文字列で文字列を二つに区切って前半の文字列を求める	s.partition(sub)[0]
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
空のロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データフレームを２つの列によってソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームから型の列を抽出する	df.select_dtypes(ty)
option: 色をコーンフラワーブルーにする	color = 'cornflowerblue'
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ヒストグラムをオリベドラブ色を用いて描画する	plt.hist(データ列, color='olivedrab')
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
組の末尾のn要素を捨てる	aTuple[:-n]
タプルを引数として展開して表示する	print(*aTuple)
numpyを用いる	import numpy as np
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームから	df.select_dtypes(型).columns
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
行列のデータ型	aArray.dtype()
文字列を水色にする	f'\033[36m{value}\033[0m'
自然数の最大公約数	math.gcd(n, n2)
配列のトリム分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
指定した列のカテゴリで集計し、分散を求める	df.groupby('列A').var()
ひとつ置きにタプルを抽出する	aTuple[::2]
ライトサーモン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
ミスティローズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
列一覧を調べる	df.info()
リストの重複を取り除く	sorted(set(aList), key=aList.index)
データフレームから列を二つだけ選択する	df[['列A', '列B']]
データフレームからカラムを一つのみ選択する	df[['列A']]
オブジェクトのバイト長	sys.getsizeof(obj)
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
正規分布に基づく累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
リストの合計	sum(aList)
折れ線グラフの色をパールゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='palegoldenrod')
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
option: グラフの色を青に設定する	color = 'blue'
折れ線グラフのラインスタイルを点線に変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: グラフの色をパープルに設定する	color = 'purple'
ファイルをBOM付きとして書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
リストと数列についての散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
JSONフォーマットの文字列を辞書にする	json.loads(jsonString)
列を集合に変換する	set(iterable)
データシリーズの標準偏差	ds.std()
折れ線グラフの線の種類を実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
青い実線で線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームから型リストで指定したデータ型のカラムを除外する	df.select_dtypes(exclude=typeList)
データシリーズが正規分布からどれだけ、尖っているか見る	ds.skew()
双方向キューに要素を積む	deq.append(element)
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
CSVファイルをヘッダを指定せず読む	pd.read_csv('file.csv', header=None)
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
xが1もしくは2かどうか調べる	x == 1 or x == 2
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
エクセルファイルのシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
option: マーカーの色を変更する	markerfacecolor = '#800080'
リストのオブジェクトが最初に見つかるインデックス	aList.index(element)
option: ライトグレーを使用する	color = 'lightgrey'
データフレーム全体をインデックスによってソートする	df.sort_index()
乱数シードをnで固定する	random.seed(n)
年月日と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
コーンズシルク色でヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
折れ線グラフの色をイエローグリーンに変更する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームからカラムを二つだけ選択する	df[['列A', '列B']]
散布図をローングリーン色として描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
オブジェクトは集合クラスか調べる	isinstance(obj, set)
全空白文字	string.whitespace
イテラブル自身を2回あわせた直積	itertools.product(iterable, repeat=2)
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
nが3の倍数かどうか調べる	n % 3 == 0
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
二つの値を改行で区切ってプリントする	print(value, value2, sep='\n')
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
青い実線としてデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
赤い三角マーカーをイテラブルとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='r')
option: 破壊的に操作する	inplace = True
実行結果をシアンにする	f'\033[36m{value}\033[0m'
日付時刻データは何曜日か知る	aDatetime.weekday()
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
文字列を式として評価する	eval(s)
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
折れ線グラフをピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='pink')
行によってデータフレームを昇順にソートする	df.sort_index(ascending=True)
option: 改行コードを旧Macに設定する	newline = '\r'
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
散布図をスラグレー色として描画する	plt.scatter(データ列x, データ列y, color='slategray')
スタッキングを用いてクラス分類を行う	sklearn.ensemble.StackingClassifier()
リストとリストの散布図に三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
xの小数点以下'1'桁までを表示する	print(':.1f'.format(x))
散布図にポイントマーカーを用いる	plt.scatter(データ列x, データ列y, marker='.')
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
ファイルパスをBOM付きとして追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
グリッドを点線にする	plt.grid(linestyle='dotted')
折れ線グラフの菱形マーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフをイエローグリーン色として描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームの指定したカラムの歪度	df['列A'].kurt()
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
上限から下限までの範囲でヒストグラムを描画する	plt.hist(データ列, range=(start, end))
表データを全て丸める	df.round()
nが一桁の数かテストする	-9 <= n <= 9
表計算ファイルから複数のシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
線グラフの色を濃いシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームから重複を破壊的にドロップする	df.drop_duplicates(inplace=True)
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
オブジェクトを文字列に変換する	str(obj)
文字列の開始位置からと終了位置までの間に部分文字列が存在しないか調べる	s.find(sub, start, end) == -1
タイムスタンプデータが火曜日か確認する	aDatetime.weekday() == 1
線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
文字列中の部分文字列の登場をカウントする	s.count(sub)
x軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
option: ハニーデューを使う	color = 'honeydew'
既存のファイルを文字列の示す文字コードで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
実数から実数を引く	x - y
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
日付時刻データからn日分減らす	aDatetime - datetime.timedelta(days=n)
データ列を折れ線プロットで作図する	plt.plot(データ列x, データ列y)
半透明の実線を使ってデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームから列を二つ選択する	df[['列A', '列B']]
紺碧色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
データシリーズの要約統計量を算出する	ds.describe()
スカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='skyblue')
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
ある列にリストの値が含まれる行を抽出する	df[df['列A'].isin(リスト)]
折れ線グラフをアイボリー色として描画する	plt.plot(データ列x, データ列y, color='ivory')
ファイルからn文字、読み込む	f.read(n)
棒グラフをコーンズシルク色として描画する	plt.bar(データ列x, データ列y, color='cornsilk')
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
部分文字列で文字列を分けた時の前半の文字列を使う	s.partition(sub)[0]
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
折れ線グラフの色をライトイエローに指定する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームの選択した列の分位数を求める	df[['列A', '列B']].quantile(パーセント/100)
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
実線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
整数をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
十六進数文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
option: ディムグレー色を使う	color = 'dimgrey'
データシリーズの分	ds.dt.minute
option: ライトグリーンにグラフの色を設定する	color = 'lightseagreen'
ヒストグラムをドジャーブルー色を用いて描画する	plt.hist(データ列, color='dodgerblue')
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
オリベドラブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
正規化された度数分布図を描く	plt.hist(データ列, density=True)
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
option: エラーを無視する	errors = 'ignore'
リストから文字列と等しい最初の要素を取り除く	aList.remove(element)
黒い菱形印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
option: フォントの色をライトグリーンに設定する	color = 'lightseagreen'
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
文字列を部分文字列で区切って、列挙する	s.split(sub)
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
ヒストグラムをゴールド色として描画する	plt.hist(データ列, color='gold')
日付データの日数を使う	aDate.day
データフレームのカラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgrey')
option: グラフの色をゴールドに指定する	color = 'gold'
散布図をライトシアン色として描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
タプルを文字列に変換して、部分文字列によってつなげる	sub.join(map(str, iterable))
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
外れ値を除いた配列の分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
折れ線グラフの色をアクアマリンに指定する	plt.plot(データ列x, データ列y, color='aquamarine')
option: グレーに色を設定する	color = 'gray'
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
パレットトルコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
バイオリン図をプロットする	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図のポイント印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
数値の符号を同じにする	math.copysign(x, x2)
option: ミントクリームを用いる	color = 'mintcream'
変数がマイナス無限大に近づく際の数値の極限値を計算する	sympy.limit(e, z, -oo)
タプルに項目名がない場合、要素を追加する	aDict.setdefault(key, element)
データフレームの相関行列をヒートマップでグラフ化する	sns.heatmap(df.corr())
非大文字が文字列中にあるか	any(not c.isupper() for c in s)
バリーウッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
回帰分析を勾配ブースティングでする	model = sklearn.ensemble.GradientBoostingRegressor()
オリーブにヒストグラムの色を設定する	plt.hist(データ列, color='olive')
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
ふたつの列からグループ化し、最小値を算出する	df.groupby(['列A', '列B'], as_index=False).min()
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
プロットの色をパステル調にする	sns.set(pallete='pastel')
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
耐火レンガ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
コギーくんを使いたい	import kogi
数値の微分を求める	sympy.diff(e)
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
ヒストグラムの色をライトグリーンにセットする	plt.hist(データ列, color='lightgreen')
グラフで用いるタイトルを変更する	plt.title('グラフの名称')
アンサンブル学習を用いてクラス分類をする	sklearn.ensemble.VotingClassifier()
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
方程式の解	sympy.solve(e)
option: ゴーストホワイト色を使う	color = 'ghostwhite'
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
赤い右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>', c='r')
セットをイミュータブルに変換する	frozenset(aSet)
行列の列ごとの最小値	np.min(aArray, axis=0)
黒い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
横棒グラフを淡い茶色色として描画する	plt.barh(データ列x, データ列y, color='tan')
リストと配列について散布図を描いて、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
ファイルをバイナリ書き込み用にオープンする]	open(filepath, mode='wb')
両端キューのn番目	deq[n]
切り捨てながらnを半分にする	n //= 2
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
列の各データ値の出現回数	ds.value_counts()
配列のデータ型	aArray.dtype()
横棒グラフをミッドナイトブルー色として描画する	plt.barh(データ列x, データ列y, color='midnightblue')
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
ファイル名がテキストファイル	filename.endswith('.txt')
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
項目名がマッピング上で定義済み	key in aDict
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategray')
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
横棒グラフを描画し、、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
散布図をターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='turquoise')
nが2で割り切れるかどうか調べる	n % 2 == 0
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
データフレームのあるカラムの第三四分位数	df['列A'].quantile(0.75)
イテラブルからカウンタを準備する	collections.Counter(iterable)
折れ線グラフの色をミディアムスプリンググリーンにする	plt.plot(データ列x, データ列y, color='mediumspringgreen')
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
真紅色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
タイムスタンプデータをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
実数から数を引く	x - y
nをn2で割った余りをnとする	n %= n2
折れ線グラフをネイビー色を用いて描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームをBOM付きで保存する	df.to_csv('file.csv', encoding='utf_8_sig')
option: 箱ひげ図を横方向にする	vert = False
三整数の最小公倍数	math.lcm(n, n2, n3)
データシリーズの中に存在する文字列と文字列の数をカウントする	ds.isin([value, value2]).sum()
線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
文字列を空白で区切り、文字列リストに変換する	s.split()
複数のシートをエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
折れ線グラフの色をミスティローズに変更する	plt.plot(データ列x, データ列y, color='mistyrose')
ファイルを全部、読み込む	f.read()
ある列のNaNをそのメディアンで埋める	df['列A'].fillna(df['列A'].median())
データフレームの列を名前変更する	df.rename(columns={'列A': '列a', '列B': '列b'})
ペルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
実数の二乗	x ** 2
折れ線グラフを一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
配列の最大値	np.max(aArray)
ミディアムブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
リストの末尾からn番目以前の要素を取り出す	aList[:-n]
カラーバーを水平に描く	plt.colorbar(orientation='horizontal')
二つのデータフレームを縦に結合する	pd.concat([df, df2], axis=0)
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
円プロットを正確な円にする	plt.axis('equals')
行列をリストから作る	np.array(aList)
配列のケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
データフレームの選択したカラムを一万の位で丸める	df[['列A', '列B']].round(-4)
文字列の開始位置から終了位置の範囲で部分文字列の出現回数を数える	s.count(sub, start, end)
ファイルが存在する	os.path.exists(filepath)
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データ列の離れ具合をプロット化する	sns.residplot(x=データ列, y=データ列)
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
2を底とする対数	math.log2(x)
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
数に実数を加える	x + y
凡例を表示する	plt.legend()
文字列がリストの要素か	element in aList
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
表データのあるカラムが何月か見る	df['列A'].dt.month
整数nはタプルのどれかかどうか	n in aTuple
マルーンにヒストグラムの色を設定する	plt.hist(データ列, color='maroon')
タプルのn番目のを見る	aTuple[n]
日付をインポートする	import datetime
ラベンダーブラッシュ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
両端キューを空にする	deq.clear()
ダークオリーブグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
散布図のポイントマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図に上三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
ペアリストpairsからカウンタを生成する	collections.Counter(dict(pairs))
散布図に青いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
重複を認めてランダムに10行をデータフレームからサンプリングする	df.sample(10, replace=True)
散布図に下三角印を使う	plt.scatter(データ列x, データ列y, marker='v')
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
ヒストグラムをダークサーモン色として描画する	plt.hist(データ列, color='darksalmon')
数式のパラメータについてのn階微分を求める	sympy.diff(e, z, n)
オリベドラブ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
横棒グラフをリネン色を用いて描画する	plt.barh(データ列x, データ列y, color='linen')
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
日付データが金曜日か	aDate.weekday() == 4
option: ライトゴールドロディイエローを使用する	color = 'lightgoldenrodyellow'
データフレームの指定した2列だけ抽出する	df[['列A', '列B']]
マッピングの項目名一覧	list(aDict)
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
グラフを全般的に淡くする	sns.set(pallete='muted')
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
ISO書式の文字列からタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
ヒストグラムの色をパウダーブルーに指定する	plt.hist(データ列, color='powderblue')
option: ライトグリーンを使う	color = 'lightgreen'
データフレームの全列を散布図でグラフ化する	sns.pairplot(df)
整数の順列の総数	math.perm(n)
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフを青い破線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
こんにちは世界とプリントする	print('Hello World')
ダークスラテグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
データフレームの相関行列をピアソンで求める	df.corr(method='pearson')
配列の調和平均	scipy.stats.hmean(配列)
option: 読み込みモードを使う	mode = 'r'
option: 真紅色を使う	color = 'crimson'
配列とリストの散布図を描画して、マーカーを下三角に指定する	plt.plot(データ列x, データ列y, marker='v')
ある列のカテゴリ毎の平均値	df.groupby('列A').mean()
二つの文字列は等しくないか調べる	s != s2
option: ダークオリーブグリーンにグラフの色を設定する	color = 'darkolivegreen'
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
未初期化のベクトル	np.empty(要素数, dtype=np.int)
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
データフレームの欠損値を平均値で置換する	df.fillna(df.mean())
イエローグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
実数の床数	math.floor(x)
散布図の四角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
データフレームをシートを指定してエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
イテラブルのコンビネーション	itertools.combinations(iterable, n)
表データのある列をダミー変数にする	pd.get_dummies(df['列A'])
欠損値のある行をドロップする	df.dropna(inplace=True)
環境のバイトオーダを使用する	sys.byteorder
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
データフレームのn行目を抽出する	df.loc[n]
データ列の推移を赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
散布図に黒い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
カラムの幾何平均を求める	scipy.stats.gmean(df['列A'])
ラベンダーブラッシュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
折れ線グラフに青い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列中にひとつでも非アスキー文字があるかどうか調べる	any(not c.isascii() for c in s)
データフレームのカラムの尖度を使う	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームのカラムのトリム平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
ペールグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
散布図にバツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='x')
標準入力から1行だけ読む	sys.stdin.readline()
配列は何次元か調べる	aArray.ndim
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
非数値データ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ライトコーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
マゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='magenta')
ヒストグラムをダークオリーブグリーン色として描画する	plt.hist(データ列, color='darkolivegreen')
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
option: バイナリ書き込みモードを使う	mode = 'wb'
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
実数以下の最大の整数	math.floor(x)
黄緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
実数のn乗して実数による余り	pow(x, n, y)
データフレームを２つの列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
入力から２つの浮動小数数を読む	A, B = map(float, input().split())
ある列の値ごとの標準偏差	df.groupby('列A').std()
ヒストグラムを淡いピンク色色を使って描画する	plt.hist(データ列, color='lightpink')
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
配列にはいくつ要素があるか調べる	aArray.size
option: ダークグレーを用いる	color = 'darkgrey'
データフレームの末尾5行を抽出する	df.tail(5)
データフレームが正規分布からどの程度歪んでいるか調べる	df.kurt()
オブジェクトは整数クラス	isinstance(obj, int)
折れ線グラフの色をレベッカパープルにセットする	plt.plot(データ列x, データ列y, color='rebeccapurple')
タブ	'\t'
nからいつまでもカウントアップする	itertools.count(start=n)
下三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
ふたつの集合の共通要素のみに更新する	aSet.intersection_update(aSet2)
ヒストグラムの色をカーキに指定する	plt.hist(データ列, color='khaki')
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
データシリーズの曜日は何日目か見る	ds.dt.dayofweek
縦軸の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
折れ線グラフのバツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ヒストグラムの色をレベッカパープルに指定する	plt.hist(データ列, color='rebeccapurple')
ストリームを一行ずつ読み込む	f.readline()
nがn2よりも小さいかどうか調べる	n < n2
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
文字列全体がパターンにマッチするか確認する	re.fullmatch(pattern, s)
星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
実数のn乗を計算する	x ** n
リストを引数として展開して表示する	print(*aList)
option: フォントの色をダークグレーに設定する	color = 'darkgray'
配列の幾何平均を求める	scipy.stats.gmean(配列)
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
グラフの簡単な説明の位置を(x,y)に設定する	plt.legend(loc=(x, y))
CSVファイルファイル名がか判定する	filename.endswith('.csv')
ヒストグラムをクリムゾン色を用いて描画する	plt.hist(データ列, color='crimson')
線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
リストの最後からn番目以前の部分を取り出す	aList[:-n]
色名からカラーコードを見る	matplotlib.colors.cnames[色名]
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
ロードされたモジュールを列挙する	sys.modules
option: バッファリングのサイズを大きくする	buffering = 4096
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
指定したカラムのNaNをその最頻値で補完する	df['列A'].fillna(df['列A'].mode().iloc[0])
option: マーカーをダイアモンドに変更する	marker = 'D'
トマト色として線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
折れ線グラフの線の種類を一点鎖線にする	plt.plot(データ列x, データ列y, linestyle='dashbot')
大文字を全て求める	string.ascii_uppercase
CSVをデータフレームとして読む	pd.read_csv('file.csv', sep=',')
実数を浮動小数点数で割って、切り捨てる	x // y
空文字	''
データフレームの選択したカラムの標本標準偏差を求める	df[['列A', '列B']].std(ddof=1)
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
ゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
二つのデータフレームを横方向に一つにする	pd.merge(df, df2)
nが正の数かどうか調べる	n > 0
列を文字列に変換して、カンマを用いて連結する	','.join(map(str, iterable))
文字列のケースを変換する	s.casefold()
日付データの年数	aDate.year
option: グラフの色をマゼンタに設定する	color = 'magenta'
ASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
縦にデータフレームを合体する	pd.concat([df, df2], axis=0)
データフレームとしてエクセルを読む	pd.read_excel('file.xlsx')
データフレームの不偏分散	df.var(ddof=1)
option: ポイントマーカーを加える	marker = '.'
データフレームを降順にある列によって並べる	df.sort_values(by='列A', ascending=False)
データフレームのn行より前抽出する	df[:n]
option: グラフの色をダークスラテグレーに変更する	color = 'darkslategray'
option: グラフの色をダークゴールデンロッドにする	color = 'darkgoldenrod'
散布図を黒い右三角マーカーで描く	plt.plot(データ列x, データ列y, marker='>', c='k')
文字列を二分する	s.partition(sep)
TSVからデータフレームを読む	pd.read_csv('file.tsv', sep='\t')
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
データフレームのインデックス一覧	df.index
ヒートマップで混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
option: スレートブルーにグラフの色を設定する	color = 'slateblue'
既存の行列をベースにして全要素が初期値の配列	np.full_like(aArray, 初期値)
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
データフレームの中の列を分割数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ヒストグラムを濃いシアン色で描画する	plt.hist(データ列, color='darkcyan')
データフレームのあるカラムの月を使う	df['列A'].dt.month
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
タイムスタンプデータが木曜日か調べる	aDatetime.weekday() == 3
指定したカラムの中の欠損値の合計を数える	df['列A'].isna().sum()
option: グラフの色をミディアムシアグリーンに指定する	color = 'mediumseagreen'
ある列の中に文字列と文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
セットの浅いコピー	aSet.copy()
散布図に▽印を用いる	plt.scatter(データ列x, データ列y, marker='v')
本日が金曜日か	datetime.datetime.today().weekday() == 4
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
２つのデータフレームを異なる列をキーにして内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
データフレームをグループ化し、ある列に対し分散を求める	df.groupby('列A')['列B'].var()
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームの第一四分位数を算出する	df.quantile(0.25)
ヒストグラムをライトスレイグレー色として描画する	plt.hist(データ列, color='lightslategrey')
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
ダークブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
棒グラフをパウダーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='powderblue')
ホワイト色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
横棒グラフをアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='aquamarine')
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
折れ線グラフの印を丸印にする	plt.plot(データ列x, データ列y, marker='o')
nの各桁の和	sum(map(int, str(n)))
自然数LCMを求める	math.lcm(n, n2)
棒グラフをライトコーラル色を用いて描画する	plt.bar(データ列x, データ列y, color='lightcoral')
option: マーカーの色を黄緑にする	markerfacecolor = 'chartreuse'
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
option: ミスティローズを使う	color = 'mistyrose'
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
回帰モデルを学習する	model.fit(説明変数, 目的変数)
マッピングに要素をキーとして加える	aDict[key] = element
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図に▲マーカーを用いる	plt.scatter(データ列x, データ列y, marker='^')
nが-9以上9以下か調べる	-9 <= n <= 9
折れ線グラフに赤い▼印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図を▲マーカーで描く	plt.plot(データ列x, データ列y, marker='^')
線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
データフレームを各列毎にグループ化して文字列というグループの大きさを求める	df.groupby(column).size()[s]
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフの印を星にする	plt.plot(データ列x, データ列y, marker='*')
数式を数値にする	float(e)
データフレームのある列の値がx以上のデータを選択する	df[df['列A'] >= x]
棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
クラスのサブ型か調べる	issubclass(サブクラス, クラス)
option: グラフの色をネイビーにセットする	color = 'navy'
データフレームをグループ化し、最大値を計算する	df.groupby('列A').max()
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
イテラブルと列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
散布図をベージュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='beige')
配列のトリム平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
縦棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgray')
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
初期値で全要素を初期化した行列を作成する	np.full((行数, 列数), 初期値, dtype=np.int)
折れ線グラフの色をラベンダーブラッシュに変更する	plt.plot(データ列x, データ列y, color='lavenderblush')
option: 印を大バツに変更する	marker = 'X'
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
文字列を最後の部分文字列で分けた時の後半の文字列	s.rpartition(sub)[-1]
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
線グラフの色をコーラルに指定する	plt.plot(データ列x, データ列y, color='coral')
option: フォレストグリーンを使う	color = 'forestgreen'
整数nの2進文字列	bin(n)[2:]
nがn2以上か調べる	n >= n2
二つのオブジェクトが同じ参照か調べる	obj is obj2
実数の余弦の逆数	math.acos(x)
多次元データを主成分分析としてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
nが奇数か確認する	n % 2 == 1
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
二つのオブジェクトが等しいかどうか調べる	obj == obj2
丸印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
カラムの調和平均を求める	scipy.stats.hmean(df['列A'])
折れ線グラフをミディアムスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データフレームから型リストで指定したデータ型のカラムのみ取り出す	df.select_dtypes(include=typeList)
ブラック色でヒストグラムを描画する	plt.hist(データ列, color='black')
データフレームの先頭10行を抽出する	df.head(10)
一点鎖線に折れ線グラフの線のスタイルを設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
組をミュータブルにする	list(aTuple)
縦棒グラフをプラム色を使って描画する	plt.bar(データ列x, データ列y, color='plum')
ミディアムターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
データフレームの重複していない行だけを抽出する	df[~ df.duplicated(keep=False)]
棒グラフをスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='springgreen')
option: 線を太くする	linewidth = 3.0
リストとリストの散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
グラフの用途をポスターに設定する	sns.set(context='poster')
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
カウンタを辞書にする	dict(aCounter)
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
ゼロ埋めした符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
カラムの標準誤差	scipy.stats.sem(df['列A'])
xの絶対値を算出する	abs(x)
横棒グラフをミディアムオーキッド色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
一度にValueMapでデータシリーズの値を置き換える	ds.replace(ValueMap)
指定した列の不偏分散	df['列A'].var(ddof=1)
パパイヤウィップ色でヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームの尖度	df.skew()
データフレームの二つのカラムをドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
濃いシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
方程式として数式の変数の解を計算する	sympy.solve(e, z)
オブジェクトは整数クラスのインスタンスか調べる	isinstance(obj, int)
有理数を使う	import fractions
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
ファイルをオープンして]バイナリストリームを見る	open(filepath, mode='rb')
棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: インデックスを連番に変更する	index_col = None
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
箱髭図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
行列の演算をする	import numpy as np
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
散布図を赤いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
環境のバイトオーダを調べる	sys.byteorder
パールバイオレットレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
両端キューの先頭から要素を取り除く	deq.popleft()
三つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=1)
シアン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
year年のタイムスタンプ	datetime.datetime(year=year, month=1, day=1)
rangeの無限版	itertools.count(start=n, step=step)
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
散布図をマルーン色を使って描画する	plt.scatter(データ列x, データ列y, color='maroon')
データフレームの選択したカラムを千の位で丸める	df[['列A', '列B']].round(-3)
折れ線グラフを珊瑚色として描画する	plt.plot(データ列x, データ列y, color='coral')
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームの選択した列が正規分布からどの程度、歪んでいるか確認する	df[['列A', '列B']].kurt()
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
データをスケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
ロバストな単回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
部分文字列で文字列が終わるか調べる	s.endswith(sub)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
関数の値毎にデータフレームをグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
option: 右三角マーカーを使う	marker = '>'
option: アクアマリンを用いる	color = 'aquamarine'
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
ミディアムパープル色としてヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
option: 印を三角に変更する	marker = '^'
ヒストグラムの色を小麦色に指定する	plt.hist(データ列, color='wheat')
データ列を箱ひげ図にする	plt.boxplot(データ列)
タプル中の文字列が最初に見つかる位置を使う	aTuple.index(element)
日付時刻データにn分を足す	aDatetime + datetime.timedelta(minutes=n)
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
等量でデータフレームの中の列をビン数nでビン分割する	pd.qcut(df[col], n)
縦棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
配列としてデータフレームのあるカラムを選択する	df['列A'].values
変数がマイナス無限大に近づくとき、数式の極限値を求める	sympy.limit(e, z, -oo)
数を整数に変換する	int(x)
イテラブルとイテラブルについて散布図を描画して、マーカーを▲に変更する	plt.plot(データ列x, データ列y, marker='^')
文字列リストを一つにし、一つの文字列にする	''.join(aStringList)
option: 色の透明度を指定する	alpha = 0.5
実数が無限大か	math.isinf(x)
浮動小数点数が正の数	x > 0
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
実数のn乗の浮動小数点数剰余	pow(x, n, y)
グラフの縦横比を等しくする	plt.axis('equals')
ある列のカテゴリの合計	df.groupby('列A').sum()
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
n個にリストをビニングし、、namesのラベルをつける	pd.cut(aList, n, labels=names)
クラス分類をランダムフォレストで行う	model = sklearn.ensemble.RandomForestClassifier()
マッピングをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
散布図にrgbの右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
あるカラムの統計量	df['列A'].describe()
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
ライム色でヒストグラムを描画する	plt.hist(データ列, color='lime')
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
空白で文字列を区切る	s.split()
option: 文字コードをUTF8に設定する	encoding = 'utf-8'
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
計算機イプシロンを求める	sys.float_info.epsilon
配列をn個に分割する	pd.cut(aArray, n)
データシリーズの未入力値をxで置換する	ds.fillna(x)
折れ線グラフの菱形印を赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
線グラフをダークグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkgreen')
データシリーズの欠損値を中央値で埋める	ds.fillna(ds.median())
データフレームからカテゴリデータを抽出する	df.select_dtypes('object')
データ列を使う	import pandas as pd
エクセルファイルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
配列と同じ大きさの空配列を作成する	np.empty_like(aArray)
インタプリタの実行ファイルの絶対パス	sys.executable
データフレームのあるカラムをリストに変換する	df['列A'].values.tolist()
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
オブジェクトをユーザ向けの文字列に変換する	str(obj)
サドルブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
ミントクリーム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
文字列の最初から空白やタブを除去する	s.lstrip()
文字列の開始位置からと終了位置番目までの間に部分文字列が含まれないかどうか調べる	s.find(sub, start, end) == -1
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
アリスブルーにヒストグラムの色を指定する	plt.hist(データ列, color='aliceblue')
オブジェクトがリストの要素でないか調べる	element not in aList
特異値分解を使ってパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
データフレームの選択した列の値がNaNか	df[['列A', '列B']].isna()
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
2つのカウンタの共通する要素を計算する	aCounter & aCounter2
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
イテラブルのイミュータブルなセット	frozenset(iterable)
リストとリストの散布図をプロットしてマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
option: ビスクにグラフの色を設定する	color = 'bisque'
ロバスト分類モデルを用意する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
集合から別の集合との共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
日付データが日付データより後ろかどうか調べる	aDate > aDate2
データフレームの行列をひっくり返す	df.T
数を百の位で丸める	round(x, -2)
淡い茶色にヒストグラムの色を設定する	plt.hist(データ列, color='tan')
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
キューの長さ	len(deq)
option: 読み込みモードに設定する	mode = 'r'
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
行列を元にして全要素が1のベクトル	np.ones_like(aArray)
option: バイナリモードを使用する	mode = 'rb'
グラフの背景色を白くする	sns.set(style='whitegrid')
横棒グラフをブルーバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='blueviolet')
option: 白にグラフの色を設定する	color = 'white'
カウンタのユニークな項目を列挙する	list(aCounter)
分割数nで配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: パールゴールデンロッド色を使用する	color = 'palegoldenrod'
図の縦横を設定する	plt.figure(figsize=(横幅, 高さ))
option: ピーチパフにグラフの色を設定する	color = 'peachpuff'
グラフ中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
浮動小数点数を実数で整数除算する	x // y
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
マッピングから項目名の値か、もしくは要素を得る	aDict.get(key, element)
option: アイボリーを使う	color = 'ivory'
オブジェクトのバイト長を知る	sys.getsizeof(obj)
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
データフレームの選択した列においてどの値が最も出現するか調べる	df[['列A', '列B']].mode()
カーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
タプルのn番目のの要素を求める	aTuple[n]
異なる列をキーにして２つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
リストとイテラブルの散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
option: 右三角マーカーを描画する	marker = '>'
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
赤い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームをグループ化してヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
プロットの描画で淡く色テーマを使う	sns.set(pallete='muted')
線グラフの色をデピンクに指定する	plt.plot(データ列x, データ列y, color='deeppink')
option: ミディアムターコイズにグラフの色を指定する	color = 'mediumturquoise'
文字列を部分文字列で分けた時の前半の文字列	s.partition(sub)[0]
棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
ふたつの集合が互いに素か確認する	aSet.isdisjoint(aSet2)
紺色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
option: グラフの色を珊瑚に設定する	color = 'coral'
実数に浮動小数点数を加える	x + y
ヒストグラムの色をダークターコイズに変更する	plt.hist(データ列, color='darkturquoise')
データフレームの選択したカラムの欠損値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
縦棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
option: グラフの色をデピンクに変更する	color = 'deeppink'
ヒストグラムを淡いピンク色色として描画する	plt.hist(データ列, color='lightpink')
カテゴリ別で色付けして、データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
縦棒グラフの色を淡い茶色にする	plt.bar(データ列x, データ列y, color='tan')
イテラブルとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
リストと配列についての散布図に赤いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
青い一点鎖線を用いて折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図をダークブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: グラフの色をスラグレーに設定する	color = 'slategrey'
数列の四分位を作図する	plt.boxplot(データ列)
イテラブルとイテラブルの散布図を描画し、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
タイムスタンプデータからn秒分、減らす	aDatetime - datetime.timedelta(seconds=n)
文字列の終了位置以前に部分文字列があるか調べる	s.find(sub, 0, end) != -1
ライトイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightyellow')
データフレームのある列を配列として抽出する	df['列A'].values
時間をインポートする	import time
データフレームの指定したカラムを百の位で丸める	df['列A'].round(-2)
行列にはいくつ要素が含まれるか調べる	aArray.size
タプルの先頭のn要素を取り除く	aTuple[n:]
データフレームのあるカラムの欠損値をモードに減らす	df['列A'].fillna(df['列A'].mode().iloc[0])
rgbの大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
JSONを用いる	import json
オブジェクトのフィールドを値に設定する	setattr(obj, プロパティ名, 値)
指定した列のカテゴリで集計しそれぞれの分散を算出する	df.groupby('列A').var()
option: パールゴールデンロッドにグラフの色を設定する	color = 'palegoldenrod'
option: グラフの色をライトゴールドロディイエローに指定する	color = 'lightgoldenrodyellow'
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
データシリーズの欠損値をその最頻値で補う	ds.fillna(ds.mode().iloc[0])
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
リストと配列についての散布図にクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
option: グラフの色を貝殻に設定する	color = 'seashell'
実数を実数で	x // y
ラインを半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームの選択したカラムの欠損値を最頻値にセットする	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
データ列の推移を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
現在の分	datetime.date.today().minute
チョコレート色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
実数のバイナリ対数	math.log2(x)
指定したカラムのNaNを平均値で埋める	df['列A'].fillna(df['列A'].mean())
option: ラベンダーブラッシュ色を使用する	color = 'lavenderblush'
データフレームのあるカラムの第一四分位数	df['列A'].quantile(0.25)
カラムのスピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
データラベルを最適な場所に表示する	plt.legend(loc='best')
データシリーズの記述統計量を確認する	ds.describe()
配列が正規分布に従うか調べる	scipy.stats.shapiro(配列)
モードでデータフレームの指定した列の欠損値を補う	df['列A'].fillna(df['列A'].mode().iloc[0])
日付時刻データをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
オブジェクトがリストに含まれない	element not in aList
配列とリストについての散布図に黒い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
xでデータフレームのあるカラムの欠損値を補完する	df['列A'].fillna(x)
ライトグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
1行から２つの整数を読む	A, B = map(int, input().split())
ボックスチャートを横に並べて描く	plt.boxplot([データ列, データ列])
オレンジにヒストグラムの色を設定する	plt.hist(データ列, color='orange')
二つのデータフレームを縦方向につなぐ	pd.concat([df, df2], axis=0)
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
オブジェクトがフィールドを持つかどうか調べる	hasattr(obj, プロパティ名)
データフレームのNaNを最頻値に設定する	df.fillna(df.mode().iloc[0])
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
タプルの最初の文字列を探す	aTuple.index(element)
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
ヒストグラムベースの勾配ブースティング回帰木を作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgrey')
リストとイテラブルについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
ベージュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
折れ線グラフの色を青紫に指定する	plt.plot(データ列x, データ列y, color='violet')
折れ線グラフのポイント印を青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームからカテゴリデータのカラム名リストを使う	df.select_dtypes('object').columns
線グラフの色を紺碧に変更する	plt.plot(データ列x, データ列y, color='azure')
データフレームのNaNを中央値で補う	df.fillna(df.median())
二変数の最大値を算出する	max(x, y)
データフレームのカラムの尖り	scipy.stats.kurtosis(df['列A'], bias=False)
データフレームの指定したカラムの尖度	df['列A'].skew()
option: スレートブルーにグラフの色を指定する	color = 'slateblue'
配列としてデータフレームのある列を取り出す	df['列A'].values
option: ライトサーモン色を用いる	color = 'lightsalmon'
文字列の左側からタブを除去する	s.lstrip('\t')
双方向キューを要素を出す	deq.popleft()
option: カラム名をリストで設定する	names = 列名リスト
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
日付データからn時間分、引く	aDate - datetime.timedelta(hours=n)
option: グレーにフォントの色を設定する	color = 'grey'
クラス分類をパーセプトロンで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
集合の全ての要素が別の集合に含まれるか確認する	aSet.issubset(aSet2)
データフレームのヒストグラムを横に並べて、描画する	sns.displot(df, x='列名', col='カテゴリ名')
データフレームの選択したカラムの要約統計量	df[['列A', '列B']].describe()
プロットをパステル調にする	sns.set(pallete='pastel')
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
カウンタの要素一覧	aCounter.keys()
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
ヒストグラムをミントクリーム色を用いて描画する	plt.hist(データ列, color='mintcream')
option: グラフの色を小麦色に設定する	color = 'wheat'
ハニーデュー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
カウンタを辞書で更新する	aCounter.update(aDict)
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図の菱形マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
リストとリストについての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
option: 列方向に処理する	axis = 0
option: フォントの色をシエナに設定する	color = 'sienna'
散布図をダークサーモン色として描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
散布図にrgbのポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
黒い三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ヒストグラムの色を暗い赤に指定する	plt.hist(データ列, color='darkred')
numpyを使う	import numpy as np
リストのスピアマンの相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
タイムスタンプデータが日曜日か調べる	aDatetime.weekday() == 6
折れ線グラフをレベッカパープル色を使って描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
一番左側のを除いたデータフレーム	df[df.columns[1:]]
option: シルバー色を用いる	color = 'silver'
横棒グラフをシアン色として描画する	plt.barh(データ列x, データ列y, color='cyan')
ヒストグラムをペールグリーン色を用いて描画する	plt.hist(データ列, color='palegreen')
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
バイオレット色でヒストグラムを描画する	plt.hist(データ列, color='violet')
プロットにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
データフレームの尖度を算出する	df.skew()
option: オーキッドを使う	color = 'orchid'
最初のカテゴリーを無視してデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
グラフを正方形にする	plt.axis('equals')
データフレームの行を取り出す	df[start:end]
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
文字列を最後の部分文字列で二分し前半の文字列を使う	s.rpartition(sub)[0]
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
部分文字列で文字列が終わるか	s.endswith(sub)
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['列A', '列B']).describe()
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
option: ダイアモンドマーカーを描画する	marker = 'D'
データフレームの値がNaNか調べる	df.isna()
全要素を1で初期化した行列	np.ones(要素数, dtype=np.int)
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
日付時刻データからn時間分減らす	aDatetime - datetime.timedelta(hours=n)
指定した値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
nがn2未満またはn3以上かどうか調べる	n < n2 or n >= n3
折れ線グラフの色を白に指定する	plt.plot(データ列x, データ列y, color='white')
データフレームの数値を一度に小数点以下n桁で丸める	df.round(n)
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategray')
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
カテゴリでグループ化して、データフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ロージーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
最大長nの両端キューを列から作る	collections.deque(iterable, maxlen=n)
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
ファイルを書き込み用にオープンして]fとする	f = open(filepath, mode='w')
イテラブルと配列について散布図をプロットして、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
データフレームから重複した行を残さずドロップする	df.drop_duplicates(keep=False)
オールドレース色として線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
非数字が文字列中にあるか調べる	any(not c.isdigit() for c in s)
option: インデックスを自動的な連番に設定する	index_col = None
ヒストグラムをライトシアン色を使って描画する	plt.hist(データ列, color='lightcyan')
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
データフレームの二つのカラムを並べて箱ヒゲ図で作図する	plt.boxplot([df['カラム'], df['カラム']])
データシリーズを十の位で丸めて、整数型にする	ds.round(-1).astype(int)
多次元データをt-SNEで濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
option: ディムグレーを用いる	color = 'dimgray'
option: グラフの色をダークマゼンタに変更する	color = 'darkmagenta'
option: 線種を点線に変更する	linestyle = 'dotted'
散布図を黒い丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
リストと数列の散布図に右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>')
option: フォントの色をダークグレーに設定する	color = 'darkgrey'
データフレームのカラムのトリム分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
横棒グラフをダークスレートブルー色を使って描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
紺色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
データフレームを複数の列を用いて小さい順に並べ直し、、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
option: ミスティローズ色を用いる	color = 'mistyrose'
ヒストグラムの色をホットピンクに指定する	plt.hist(データ列, color='hotpink')
散布図をrgbの△マーカーでプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームの中の列をビン数nで分割する	pd.cut(df[col], n)
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データシリーズの欠損値を直前の値で埋める	ds.fillna(method='ffill')
リストとイテラブルの散布図を描画し、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図の印の線幅を変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
カーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
正規分布に基づく確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
タイムスタンプデータのタイムゾーン	aDatetime.timetz()
スピアマンの順位相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
数式を因数分解する	sympy.factor(e)
散布図の四角印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ファイルからストリームを読み込み、fileとする	file = open(filepath)
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ミスティローズ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
ダークシアン色でヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
黒いバツマーカーをデータ列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
カラムの中に日付データと日付データがいくつあるか数える	df['列A'].isin([value, value2]).sum()
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
データフレームの指定したデータ型のカラム名を列挙する	df.select_dtypes(型).columns
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
回帰分析をブースティングで行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
が名前付きタプルのインスタンスか確認する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データフレームの指定したカラムの欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
赤い丸印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
アリスブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
二つのタプルを階層化する	collections.ChainMap(aDict, aDict2)
横棒グラフを真紅色として描画する	plt.barh(データ列x, データ列y, color='crimson')
列の欠損値を平均値に増やす	df['列A'].fillna(df['列A'].mean())
option: 色をコーンフラワーブルーに変更する	color = 'cornflowerblue'
option: ホワイトスモーク色を使用する	color = 'whitesmoke'
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
文字列の接頭辞が部分文字列か	s.startswith(sub)
散布図に黒いクロス印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
青色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
赤い右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
二つのカウンタの共通する要素	aCounter & aCounter2
ヒストグラムの区間数を設定する	plt.hist(データ列, bins=区関数)
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
列から集合	set(iterable)
ランダムにデータフレームから取り出す	df.sample()
データフレームの指定したカラムの下位25％	df['列A'].quantile(0.75)
棒グラフをホワイトスモーク色を用いて描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
文字列を変数に変換する	sympy.Symbol(s)
predicateFuncがTrueとなるイテラブルの要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
リストにリストを追加する	aList.extend(aList2)
カラーパレットを暗くする	sns.set(pallete='dark')
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
グラフの描画を見やすくする	import seaborn as sns
option: グラフの色をピーチパフに変更する	color = 'peachpuff'
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
線グラフを破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
nがn2で割り切れるか確認する	n % n2 == 0
データフレームをグループ化し、それぞれの標準偏差を求める	df.groupby('列A').std()
回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
文字列内にひとつでも大文字が含まれるか	any(c.isupper() for c in s)
に箱ひげ図としてデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
配列と配列について散布図を描画してマーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
キーがマッピングにある	key not in aDict
横棒グラフを珊瑚色で描画する	plt.barh(データ列x, データ列y, color='coral')
色差別なく色調をプロットの描画で使う	sns.set(pallete='colorblind')
文字列を全て大文字にする	s.upper()
ロイヤルブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームのNaNを最小値で埋める	df.fillna(df.min())
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
ライムグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
セットに列を追加更新する	aSet.update(iterable)
nがn2以下、または、n3以上かどうか調べる	n <= n2 or n >= n3
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
nがn2以下、もしくはn3以上	n <= n2 or n >= n3
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
option: 行列のデータ型を指定する	dtype = np.int32
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
散布図に大バツ印を用いる	plt.scatter(データ列x, データ列y, marker='X')
配列が正規分布に従うか仮説検定する	scipy.stats.shapiro(配列)
正規表現を使う	import re
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
配列とリストについての散布図に赤い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
ダークレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
option: 色をスラグレーに設定する	color = 'slategray'
平方根	math.sqrt(x)
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
縦棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
year年month月day日hour時minute分のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
数式を展開する	sympy.expand(e)
タイムスタンプデータの分	aDatetime.minute
ランダムフォレストで回帰分析をする	model = sklearn.ensemble.RandomForestRegressor()
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
リストとリストの散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
符号付きで整数nを長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
散布図をrgbの丸マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
スプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
ある列の値がxより大きく、yより小さい行を抽出する	df[(x < df['列A']) & (df['列A'] < y)]
数列の移り変わりを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
折れ線グラフのダイアモンド印の色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
散布図を赤い菱形マーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
ダークオリーブグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
option: フォントの色をディムグレーに変更する	color = 'dimgrey'
option: ライトスカイブルー色を用いる	color = 'lightskyblue'
x座標の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
ファイルを追加できるように文字列の示すエンコーディングとしてオープンする]	open(filepath, mode='a', encoding=s)
一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
組の中の一番小さい値	min(aTuple)
ヒストグラムの色をカーキにセットする	plt.hist(データ列, color='khaki')
データフレームの指定したカラムの中央値	df['列A'].median()
タイムスタンプデータにn週間分足す	aDatetime + datetime.timedelta(weeks=n)
実数の逆双曲線余弦	math.acosh(x)
option: マーカーの色をライムにする	markerfacecolor = 'lime'
縦棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
一方に含まれ、他方に含まれない集合を見る	aSet.difference(aSet2)
データシリーズの時	ds.dt.hour
実数に実数を加える	x + y
ケンドール相関係数でデータフレームの相関行列を計算する	df.corr(method='kendall')
部分的最小二乗法として回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
イテラブルと列をジップする	itertools.zip_longest(iterable, iterable2)
配列とリストについての散布図に凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
△印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
データフレームの欠損値が含まれる部分を色付けする	df.style.highlight_null()
集合から任意の要素を取り出す	aSet.pop()
実数の正接の逆数	math.atan(x)
整数nの二進数表現を見る	bin(n)
ファイルをUTF8としてオープンする]	open(filepath, encoding='utf-8')
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
双方向キューをデキューする	deq.popleft()
日付時刻データからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
ロージーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='rosybrown')
線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
グラフの色を濃くする	sns.set(pallete='deep')
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
文字列が全て空白文字からなるかどうか調べる	s.isspace()
データフレームの選択した列の記述統計量	df[['列A', '列B']].describe()
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
option: マーカーを下三角に変える	marker = 'v'
表示可能な列数を変更する	pd.set_option('display.max_columns', n)
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
散布図の左三角印を赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
タプルに列を続けたイテラブルを得る	itertools.chain(iterable, iterable2)
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
ミディアムバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
データ列を円グラフにする	plt.pie(データ列, startangle=90)
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
カラムのスピアマンの相関係数を使う	scipy.stats.spearmanr(df['列A'], df['列B'])
オブジェクトが集合か調べる	isinstance(obj, set)
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
マッピングのコピーを作成する	aDict.copy()
横棒グラフをホワイトスモーク色として描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
ミッドナイトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
散布図に黒い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
バツ印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
ミディアムスプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
部分文字列	sub in s
テンプレートを辞書でフォーマットする	formatText.format_map(aDict)
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
ある列にリストの値が含まれる行を選択する	df[df['列A'].isin(リスト)]
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategray')
ライトゴールドロディイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
フクシア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
option: ブラックを使う	color = 'black'
折れ線グラフのクロスマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
横軸の目盛を非表示にする	plt.xticks([])
ヒストグラムを黄色色として描画する	plt.hist(データ列, color='yellow')
ユーザから入力される	int(input())
指定したカラムの歪度を求める	df['列A'].kurt()
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
シーケンスをカウントしてカウンタを更新する	aCounter.update(iterable)
折れ線グラフの色をラベンダーにセットする	plt.plot(データ列x, データ列y, color='lavender')
option: 色をパパイヤウィップに設定する	color = 'papayawhip'
線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
自然数個からk個取り出したときの並べ方の総数を計算する	math.perm(n, k)
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
実数の双曲線余弦	math.cosh(x)
データフレームを使う	import pandas as pd
カウンタを辞書に変換する	dict(aCounter)
横棒グラフをカデットブルー色として描画する	plt.barh(データ列x, データ列y, color='cadetblue')
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームを二つの列によって小さい順に破壊的に整列する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
ベクトルのスカラー倍	aArray * n
ブルーバイオレット色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
オレンジレッドにヒストグラムの色を指定する	plt.hist(データ列, color='orangered')
ローングリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
データシリーズの未入力値をその平均値で補う	ds.fillna(ds.mean())
グラフの見栄えを良くする	import seaborn as sns
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
ファイルをオープンして]、書き込みストリームを見る	open(filepath, mode='w')
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
やわらかい青にヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
黒いクロスマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームのカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
rgbの右三角マーカーをリストと配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
オーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
二つのデータフレームを縦方向に結合する	pd.concat([df, df2], axis=0)
線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
散布図の丸印の太さを変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
指定した列のカテゴリで集計しそれぞれの平均値を求める	df.groupby('列A').mean()
行列の形状を求める	aArray.shape
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
データフレームのメディアン	df.median()
nにn2を加算する	n + n2
文字列が十進数字かどうか確認する	s.isdecimal()
データシリーズを小数点以下n桁で四捨五入する	ds.round(n)
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフの色を貝殻に指定する	plt.plot(データ列x, データ列y, color='seashell')
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
リストの先頭	aList[0]
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
1からnまでの整数列を見る	list(range(1, n+1))
右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>')
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
整数nを十六進数表現にする	hex(n)
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
文字列が全て英字か調べる	s.isalpha()
option: 下三角マーカーを加える	marker = 'v'
1で全要素を初期化した行列	np.ones(行数, 列数, dtype=np.int)
option: グラフの色をダークシアグリーンに変更する	color = 'darkseagreen'
全てのシートをエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=None)
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
option: 文字列を分割記号で使用する	sep = s
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
データフレームの指定したカラムの欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
タプルを浅くコピーする	aDict.copy()
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
サーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
ヒストグラムの色をブルーバイオレットに変更する	plt.hist(データ列, color='blueviolet')
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
ネイピア数	math.e
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
リストをひとつ飛ばしで取り出す	aList[::2]
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
文字列内にひとつでもASCII文字が含まれるか	any(c.isascii() for c in s)
nがn2よりも小さいか調べる	n < n2
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
折れ線グラフの左三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
行列にはいくつ要素があるか調べる	aArray.size
整数nの16進文字列を使う	hex(n)[2:]
データフレームのある列を選ぶ	df['列A']
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
線グラフをアリスブルー色として描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームをインデックスによってソートする	df.sort_index()
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
データシリーズの未入力値を最頻値にする	ds.fillna(ds.mode().iloc[0])
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
データフレームをグループ化し各個数を計算する	df.groupby('列A').count()
タプルの最後からn番目以前の部分を取り出す	aTuple[:-n]
文字列として列を連結する	''.join(map(str, iterable))
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームを並べ直し、、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
nの十六進表現	hex(n)
グラフをポスター用に変更する	sns.set(context='poster')
全要素を０で初期化した３二ビット整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int16)
エクセルファイルからSJISでCSVをロードする	pd.read_csv('file.csv', encoding='shift_jis')
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
nがn2より大きいか調べる	n > n2
1行から二つの文字値を取り出す	A, B = map(str, input().split())
ミディアムターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
nとkの組合せ	math.comb(n, k)
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
nがn2か調べる	n == n2
小数点数を切り上げて整数に変換する	math.ceil(x)
散布図の△マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: フォントの色を青緑に変更する	color = 'turquoise'
option: 四角マーカーを使う	marker = 's'
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
モデルを学習する	model.fit(説明変数, 目的変数)
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
アンダーライン付きで変数をプリントする	print(f'\033[4m{value}\033[0m')
回帰分析をロバスト推定で行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ふたつの列からグループ化し、分散を計算する	df.groupby(['列A', '列B'], as_index=False).var()
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
線グラフをゲインズボロ色を用いて描画する	plt.plot(データ列x, データ列y, color='gainsboro')
小麦色にヒストグラムの色を設定する	plt.hist(データ列, color='wheat')
データフレームをグループ化し、分散を求める	df.groupby('列A').var()
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
データシリーズを正規表現patternでまとめて置換する	ds.replace(pattern, repl, regex=True)
縦棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
データフレームの選択したカラムの値は欠損値か調べる	df[['列A', '列B']].isna()
ヒストグラムの色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
y軸の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
横棒グラフをプラム色として描画する	plt.barh(データ列x, データ列y, color='plum')
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
横棒グラフをパウダーブルー色として描画する	plt.barh(データ列x, データ列y, color='powderblue')
タイムスタンプデータにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
指定した列で集計し、それぞれの平均値を求める	df.groupby('列A').mean()
データフレームの欠損値を中央値に指定する	df.fillna(df.median())
データフレームの指定したカラムはどの程度、正規分布から尖っているか見る	df['列A'].skew()
スプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='springgreen')
マッピングをコピーする	dict(aDict)
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
option: 欠損値を先頭にする	na_position = 'first'
TSVをデータフレームとして読み込む	pd.read_csv('file.tsv', sep='\t')
組を引数として展開して出力する	print(*aTuple, sep=',')
リストの重複を除く	sorted(set(aList), key=aList.index)
ヒストグラムをマゼンタ色として描画する	plt.hist(データ列, color='magenta')
option: 小麦色を用いる	color = 'wheat'
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
実数の双曲線正接の逆数を計算する	math.atanh(x)
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
文字列を青色化する	f'\033[34m{value}\033[0m'
ヒストグラムをパパイヤウィップ色を用いて描画する	plt.hist(データ列, color='papayawhip')
ある列のカテゴリごとの最大値	df.groupby('列A').max()
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの次元の大きさを見る	df.shape
nがリストのいづれか	n in aList
データフレームの選択したカラムの第三四分位数	df[['列A', '列B']].quantile(0.75)
option: コーンズシルク色を使う	color = 'cornsilk'
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
整数nの八進数文字列	oct(n)[2:]
双方向キューが空でないか調べる	len(deq) != 0
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
ある列の値がxに等しく別の列の値がyに等しい行を選ぶ	df[(df['列A'] == x) & (df['列B'] == y)]
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
組の平均値	sum(aTuple)/len(aTuple)
パレットトルコイズにヒストグラムの色をする	plt.hist(データ列, color='paleturquoise')
データ列とリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図の丸印の色を指定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
プラム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
option: パウダーブルー色を用いる	color = 'powderblue'
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
オプションで、標準エラーを出力先にする	file = sys.stderr
コロンによって文字列を区切り、列挙する	s.split(':')
集合の全ての要素が別のセットに含まれる	aSet.issubset(aSet2)
1行だけカラムを除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
option: シアンにグラフの色を指定する	color = 'cyan'
option: グラフの種類を破線に変更する	linestyle = 'dashed'
nからn2の値を引いてnとする	n -= n2
散布図に青い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
xが一桁の数か調べる	-9 <= x <= 9
配列のユニークな値を要素とする行列	np.unique(aArray)
双方向キューの要素をインプレースに反転する	deq.reverse()
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
データフレームのカラムを小数点以下n桁で丸める	df['列A'].round(n)
両端キューの先頭にイテラブルの各値を順に付け加える	deq.extendleft(iterable)
双方向キューをタプルに変換する	tuple(deq)
青い点線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
マッピングをJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
option: 印をポイントに設定する	marker = '.'
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームの先頭	df.head()
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
中央値でデータフレームの選択したカラムの未入力値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
カテゴリで色分けして、データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
クラス分類をブースティングとして行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
マッピングからキーで指定された項目をポップする	aDict.pop(key)
縦棒グラフを描く	plt.bar(ラベル列, データ列)
option: ロイヤルブルー色を使う	color = 'royalblue'
データフレームの指定したカラムの中のNaNの合計を数える	df['列A'].isna().sum()
破線に線グラフのラインスタイルを設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
一点鎖線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ブラウン色のヒストグラムを描画する	plt.hist(データ列, color='brown')
イエローグリーン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
データフレームの選択した列の相関行列をスピアマンで求める	df[['列A', '列B']].corr(method='spearman')
乱数で要素を埋めた配列	np.random.random(N)
0から始まる無限数列	itertools.count()
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの色をピーチパフに指定する	plt.plot(データ列x, データ列y, color='peachpuff')
ヒストグラムの色をダークサーモンに変更する	plt.hist(データ列, color='darksalmon')
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
列を全て日付データにする	pd.to_datetime(df['列A'])
コマンドラインフラグの状態を調べる	sys.flags
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
ミントクリーム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
折れ線グラフをライトシアン色を使って描画する	plt.plot(データ列x, データ列y, color='lightcyan')
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
文字列を空白を用いて分割して、整数リストに変換する	map(int, s.split())
option: グラフの色をやわらかい青に指定する	color = 'cornflowerblue'
option: ライトイエロー色を使う	color = 'lightyellow'
等しい量になるようにデータフレームの中の列をn個にビン分割する	pd.qcut(df[col], n)
文字列全体がパターンに大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
散布図のバツ印を青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
実数のn乗の実数剰余	pow(x, n, y)
列のコンビネーションを求める	itertools.combinations(iterable, n)
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
入力ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
エラーを出力する	sys.stderr
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
イテラブルの集合	set(iterable)
文字列の左側から空白を取り除く	s.lstrip(' ')
右三角印を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
ゼロ埋めした配列	np.zeros(要素数)
option: ボックスチャートを水平方向にする	vert = False
option: ダークゴールデンロッド色を使用する	color = 'darkgoldenrod'
折れ線グラフの色をローングリーンにする	plt.plot(データ列x, データ列y, color='lawngreen')
データシリーズの中の欠損値の数をカウントする	ds.isna().sum()
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
0で全要素を初期化した配列	np.zeros(要素数)
棒グラフをダークブルー色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
ハイパボリック・コサインの逆数	math.acosh(x)
n2分のn	n / n2
ピアソンを用いてデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
オブジェクトがリスト型か調べる	isinstance(obj, list)
現在の分数	datetime.date.today().minute
横棒グラフを青色として描画する	plt.barh(データ列x, データ列y, color='blue')
インディゴ色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
データフレームの指定したカラムが正規分布からどの程度歪んでいるか調べる	df['列A'].kurt()
データフレームを複数の列で降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
option: スチールブルーにフォントの色を設定する	color = 'steelblue'
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
タプルを引数として展開してプリントする	print(*aTuple)
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
n2分のnを求める	n / n2
日付データが月曜日か調べる	aDate.weekday() == 0
option: グラフの色を黄色に指定する	color = 'yellow'
データフレームをインデックスによって降順で整列する	df.sort_index(ascending=False)
辞書をコピーする	aDict.copy()
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
rgbのクロスマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
現在処理中の例外を情報	sys.exc_info()
option: 行列のデータ型を指定する	dtype = np.uint8
双方向キューのstart〜endの部分データ	collections.deque(itertools.islice(deq, start, end))
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
平方根平均二乗誤差を算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
option: グラフの色をシアンに設定する	color = 'cyan'
既存のファイルを追加できるようにBOM付きを用いて開く]	open(filepath, mode='a', encoding='utf_8_sig')
option: カーキを用いる	color = 'khaki'
floatの最大値を求める	sys.float_info.max
縦棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
リストの末尾から要素を捨てる	aList.pop()
配列が何のデータ型か調べる	aArray.dtype()
ベージュにヒストグラムの色を設定する	plt.hist(データ列, color='beige')
インデント幅nで辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
カウンタをクリアする	aCounter.clear()
日付時刻データが土曜日か	aDatetime.weekday() == 5
表から10行、ランダムサンプリングする	df.sample(10)
グリッド線	plt.grid(linewidth=3.0)
列からキューを作る	collections.deque(iterable)
option: フォレストグリーン色を使う	color = 'forestgreen'
リストの要素を昇順にソートする	sorted(aList, reverse=True)
ブラック色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
入力から２つの文字を読む	A, B = map(str, input().split())
ファイルパスを追加モードでオープンして]fとする	f = open(filepath, mode='a')
折れ線グラフの色をライトイエローに変更する	plt.plot(データ列x, データ列y, color='lightyellow')
配列とリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
nが無限に続くリスト	itertools.repeat(n)
棒グラフをやわらかい青色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
rgbの▼マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ふたつの集合のインターセクションを求める	aSet.intersection(aSet2)
データフレームのカラムを折れ線グラフで可視化する	plt.plot(df[column], df[column])
option: グラフの色をハニーデューに変更する	color = 'honeydew'
最大値でデータフレームの選択したカラムの未入力値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
グラフのフォントを日本語表示に指定する	sns.set(font='IPAexGothic')
指定したカラムの中に文字列と文字列があるかどうか確認する	df['列A'].isin([value, value2])
文字列をカンマで区切って、列挙する	s.split(',')
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
日付データが何曜日か知る	aDate.weekday()
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
ヒストグラムの色をオリベドラブに指定する	plt.hist(データ列, color='olivedrab')
データフレームの選択したカラムが正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
カウンタのキーを、そのカウントだけ列挙する	aCounter.elements()
数列とリストについて散布図をプロットして、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフの星マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
文字列の後ろから範囲を指定して部分文字列を探す	s.find(sub, start, end)
ヒストグラムを黄緑色で描画する	plt.hist(データ列, color='chartreuse')
n個にデータ列を分割する	pd.cut(ds, n)
三つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
データシリーズが正規分布からどの程度歪んでいるか確認する	ds.kurt()
デピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
空列	[]
縦棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
クリムゾン色としてヒストグラムを描画する	plt.hist(データ列, color='crimson')
スクリプトファイルと同じディレクトリのファイルのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
nの16進表現を使う	hex(n)
名前からカラーマップを見る	"plt.get_cmap(""カラーマップ名"")"
日付時刻データにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
システム時刻で乱数を初期化する	random.seed()
日本語をグラフ中で表示できるようにする	sns.set(font='IPAexGothic')
ラインを青い破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: 改行コードをUNIXに設定する	newline = '\n'
空のヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: フォントの色をシエナに変更する	color = 'sienna'
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
散布図の印の大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
option: EUCを使用する	encoding = 'euc_jp'
リストのn番目にオブジェクトを挿入する	aList.insert(n, element)
ヒストグラムを紺碧色として描画する	plt.hist(データ列, color='azure')
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
図の縦横を指定する	plt.figure(figsize=(横幅, 高さ))
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
二つの集合が集合と互いに素かどうか	aSet.isdisjoint(aSet2)
円プロットの百分率を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
ベージュ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
ターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
棒グラフを赤色を使って描画する	plt.bar(データ列x, データ列y, color='red')
タイムスタンプデータををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
スラグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
分類木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
双方向キューの最初にシーケンスの各値を付け加える	deq.extendleft(iterable)
貝殻にヒストグラムの色を設定する	plt.hist(データ列, color='seashell')
ヒストグラムの色をパウダーブルーに変更する	plt.hist(データ列, color='powderblue')
データ列をビン数nで分割し、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームのカラムのユニークな値の個数	df[col].nunique()
作画の背景色を暗くする	sns.set(style='darkgrid')
文字列の右端から部分文字列を取り除く	s.rstrip(sub)
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
青い一点鎖線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
横軸の目盛に文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
xの小数点以下'5'桁の文字列にする	':.5f'.format(x)
文字列モジュールをインポートする	import string
タイムスタンプデータを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
組の値を昇順に並べ直す	sorted(aTuple, reverse=False)
指定した列の値で集計し、それぞれの平均値を求める	df.groupby('列A').mean()
縦棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
列のユニークな値の個数	ds.nunique()
NaN	math.nan
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
option: バツマーカーを使う	marker = 'x'
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
ヒストグラムをオーキッド色として描画する	plt.hist(データ列, color='orchid')
実数を二乗する	x ** 2
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
JSONを使う	import json
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
折れ線グラフに△マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
黄色で実行結果を表示する	print(f'\033[33m{value}\033[0m')
シアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
イテラブルから両端キューを作成する	collections.deque(iterable)
表データから同じデータを除く	df.drop_duplicates(inplace=True)
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
文字列の無限イテラブル	itertools.repeat(element)
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
長さnのリストを得る	[0] * n
プロットの用途を論文に指定する	sns.set(context='paper')
イテラブルから重複を取り除く	set(iterable)
ファイルを文字列の示す文字コードで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
スピアマン相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
タプルを逆順にする	aTuple[::-1]
option: チョコレート色を使う	color = 'chocolate'
縦棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
正則化付き線形回帰モデルを用意する	model = sklearn.linear_model.ElasticNet()
オブジェクトが関数か判定する	callable(obj)
円プロットの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
書式を辞書でフォーマットする	formatText.format_map(aDict)
データ列をボックスチャートとして描く	plt.boxplot(データ列)
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
赤い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームのあるカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
プラットフォームの符号付き整数の最大値	sys.maxsize
データシリーズのNaNをメディアンに変更する	ds.fillna(ds.median())
線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
指定した列だけ、データフレームの重複を見る	df.duplicated(subset='列A')
グリーン色でヒストグラムを描画する	plt.hist(データ列, color='green')
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
ビン数nでデータフレームの中の列をビン分割する	pd.cut(df[col], n)
シーグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
集合をイミュータブルに変換する	frozenset(aSet)
データフレームの列の欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
ブルーバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
散布図にダイアモンドマーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
nがn2の倍数でないか調べる	n % n2 != 0
本日の日付時刻	datetime.datetime.now()
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
青い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
部分文字列が部分文字列で開始するかテストする	s.startswith(sub)
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
データシリーズの欠損値をxで埋める	ds.fillna(x)
散布図の大バツ印を黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
ヒストグラムの色をゲインズボロにセットする	plt.hist(データ列, color='gainsboro')
option: ダーク・スラテグレーを用いる	color = 'darkslategrey'
nの十六進文字列	hex(n)[2:]
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
確率的勾配降下を用いて回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
縦棒グラフをパールゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフをサーモン色として描画する	plt.plot(データ列x, データ列y, color='salmon')
データフレームのあるカラムが何時か見る	df['列A'].dt.hour
データフレームから散布図を作り回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
ヒストグラムの色をオリベドラブにセットする	plt.hist(データ列, color='olivedrab')
日付データが水曜日か調べる	aDate.weekday() == 2
データフレームの選択したカラムの不偏分散	df[['列A', '列B']].var(ddof=1)
大文字を全部求める	string.ascii_uppercase
プロット中のフォントを設定する	sns.set(font=フォント名)
縦棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
折れ線グラフの色をブラックにする	plt.plot(データ列x, データ列y, color='black')
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームから列を三つのみ選択する	df[['列A', '列B', '列C']]
双方向キューのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
データ列の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
データフレームのある列の値がxに等しいデータを抽出する	df[df['列A'] == x]
日付を表現した文字列を日付データに変換する	pd.to_datetime(日付を表現した文字列)
nが一桁の数か調べる	0 <= n <= 9
数値を青色でプリントする	print(f'\033[34m{value}\033[0m')
文字列中から部分文字列を探す	s.find(sub)
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームのカテゴリデータをダミー変数にする	pd.get_dummies(df)
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
データフレームの選択したカラムの値をValueMapでまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
チョコレート色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
黒いバツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
小数点数を小数点数で割った剰余	math.remainder(x, x2)
配列の尖度を求める	scipy.stats.kurtosis(配列, bias=False)
ふたつの列からグループ化し、平均値を計算する	df.groupby(['列A', '列B'], as_index=False).mean()
現在は何秒か知る	datetime.date.today().second
データフレームのシェイプを見る	df.shape
データフレームをある列の値によってグループ化する	df.groupby('列A')
データシリーズのNaNを直後の値に増やす	ds.fillna(method='bfill')
ホットピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
option: ナバホホワイトを使用する	color = 'navajowhite'
option: ローングリーン色を使う	color = 'lawngreen'
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
折れ線グラフに右三角印を加える	plt.plot(データ列x, データ列y, marker='>')
データシリーズの中に文字列と文字列があるか判定する	ds.isin([value, value2])
集合のイミュータブル版	frozenset(aSet)
グラフで使える色名の一覧を知る	matplotlib.colors.cnames
日付データをn秒前にする	aDate - datetime.timedelta(seconds=n)
表データのあるカラムの曜日が何日目か見る	df['列A'].dt.dayofweek
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
キューをタプルに変換する	tuple(deq)
実線でヒストグラムを描く	plt.hist(データ列, linestyle='solid')
データシリーズの標本標準偏差を求める	ds.std(ddof=1)
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
option: 三角マーカーを用いる	marker = '^'
連立方程式の解を求める	sympy.solve([e, e2])
ビン数nとしてデータフレームの中の列をビン分割する	pd.cut(df[col], n)
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
単回帰モデルの精度を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
数値の変数を数式で置き換える	e.subs(z, e2)
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
配列のKurtosisを計算する	scipy.stats.kurtosis(配列, bias=False)
option: マルーンを用いる	color = 'maroon'
データフレームのあるカラムを取り出す	df['列A']
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
データフレームの指定したカラムの欠損値をその最小値で埋める	df['列A'].fillna(df['列A'].min())
横棒グラフをフローラルホワイト色として描画する	plt.barh(データ列x, データ列y, color='floralwhite')
線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
option: 色をベージュに指定する	color = 'beige'
ガウス過程でクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
ファイルを開く]	open(filepath)
今日が何月か知る	datetime.datetime.today().month
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
散布図を青色を用いて描画する	plt.scatter(データ列x, データ列y, color='blue')
変数を水色でプリントできる文字列にする	f'\033[36m{value}\033[0m'
リストをn個に等量でビン分割する	pd.qcut(aList, n)
predicateFuncが真とならないイテラブルの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
折れ線グラフの色をミディアムブルーにセットする	plt.plot(データ列x, データ列y, color='mediumblue')
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列x, データ列y, marker='D')
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ベージュ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
xを浮動小数点数にする	float(x)
option: カーキにグラフの色を設定する	color = 'khaki'
マッピングの項目名を列挙する	aDict.keys()
グラフの用途を画面に変更する	sns.set(context='notebook')
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
色付きの一点鎖線として配列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ヒストグラムを破線でプロットする	plt.hist(データ列, linestyle='dashed')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
黒いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='k')
日付時刻データは何分か知る	aDatetime.minute
リストとリストについての散布図に黒いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
ある列にリストの値が含まれる行を取り出す	df[df['列A'].isin(リスト)]
option: 丸印を描画する	marker = 'o'
データシリーズの中に存在する文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
実数の双曲線余弦を計算する	math.cosh(x)
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
要素が全て1の行列	np.ones(要素数, dtype=np.int)
option: マーカーの色をホワイトにする	markerfacecolor = 'white'
option: 色をゴーストホワイトにする	color = 'ghostwhite'
オプションで、出力先をファイルに変更する	file = sys.open(filename, 'w')
配列とイテラブルについて散布図をプロットして星マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームをあるカラムのカテゴリとしてグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
上限nの両端キューをイテラブルから生成する	collections.deque(iterable, maxlen=n)
空の勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
データシリーズの母標準偏差	ds.std(ddof=0)
要素をキューの最後から取り除く	deq.pop()
ライトスカイブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
コーラル色として線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
リストの最初	aList[0]
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
文字列はタイトルケース	s.istitle()
まとめて正規表現patternでreplにデータフレームのあるカラムの値を置き換える	df['列A'].replace(pattern, repl, regex=True)
ワーキングディレクトリを見る	os.getcwd()
データフレームの文字列を欠損値に変換する	df.replace(値, np.nan)
折れ線グラフを左三角印で描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームをエクセルファイルで保存する	df.to_excel('file.xlsx')
散布図を丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o')
option: カンマをセパレータで使用する	sep = ','
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
option: グラフの色を濃い青に変更する	color = 'darkblue'
ヒストグラムを実線を用いて描画する	plt.hist(データ列, linestyle='solid')
指定した列リストのみ、データフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
option: ゴールデンロッド色を用いる	color = 'goldenrod'
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
数式の簡略化を行う	sympy.sympify(e)
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
year年day月をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=1)
関数の値によってデータフレームをグループ化する	df.groupby(関数)
配列と配列についての散布図に上三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
ロードされたモジュールの一覧を知る	sys.modules
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
ケースを無視して正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategrey')
散布図に黒い▽印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
指定したカラムの第一四分位数	df['列A'].quantile(0.25)
データフレームから10行、ランダムサンプリングする	df.sample(10)
option: 淡いピンク色を使う	color = 'lightpink'
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
option: 紺色を用いる	color = 'darkblue'
折れ線グラフの丸マーカーを青色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
既存の行列を元に全要素が1の行列	np.ones_like(aArray)
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
ダークスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
部分文字列を文字列の接頭辞から取り除く	s.removeprefix(sub)
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
折れ線グラフを半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
折れ線グラフの三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
データフレームの選択したカラムの中にいくつ日付データがあるかカウントする	df[['列A', '列B']].isin([value]).sum()
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: サンディーブラウンにグラフの色を設定する	color = 'sandybrown'
折れ線グラフの色をカーキに指定する	plt.plot(データ列x, データ列y, color='khaki')
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
イエローグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
マップに要素をキーとして加える	aDict[key] = element
rgbのダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: マーカーを丸に変更する	marker = 'o'
option: ゲインズボロにグラフの色を設定する	color = 'gainsboro'
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
リネン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
データシリーズがどの程度分散しているか見る	ds.var()
数式の微分を求める	sympy.diff(e)
文字列を青色にする	f'\033[34m{value}\033[0m'
ダークターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
エクセルファイルファイルからカンマ区切りのファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
リスト中の要素が少なくともひとつ真	any(aList)
データフレームのカラムの歪みを求める	scipy.stats.skew(df['列A'], bias=False)
ファイルをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
文字コードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
折れ線グラフをサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='salmon')
実数の余弦	math.cos(x)
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: フォントの色をライトスカイブルーに設定する	color = 'lightskyblue'
双方向キューに文字列をスタックする	deq.append(element)
散布図のマーカーの大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
データフレームを関数の値によってグループ化し、要約統計量を計算する	df.groupby(関数).describe()
表計算ファイルファイルでデータフレームを書き出す	df.to_excel('file.xlsx')
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
タプルのn番目以降の要素を取り出す	aTuple[n:]
グラフのデザインをイイ感じに設定する	sns.set()
ひとつでも非英字が文字列中にあるかテストする	any(not c.isalpha() for c in s)
カテゴリで色分けして、データフレームの全列の相関を図示する	sns.pairplot(df, hue='カテゴリ列')
組合せ	math.comb(n, k)
辞書を階層化辞書に変換する	collections.ChainMap(aDict)
データフレームを列のカテゴリでグループ化する	df.groupby('列A')
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
行列を2次元1列に変形する	aArray.reshape(-1, 1)
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
リストの末尾のn要素を取り除く	aList[:-n]
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
ラベンダー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
nがn2の倍数か調べる	n % n2 == 0
散布図に四角印を加える	plt.scatter(データ列x, データ列y, marker='s')
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
日付データが何月か知る	aDate.month
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
折れ線グラフに星マーカーを加える	plt.plot(データ列x, データ列y, marker='*')
データシリーズの尖度	ds.skew()
データフレームが重複しているか	df.duplicated()
option: 色をライトサーモンに変更する	color = 'lightsalmon'
文字列中に部分文字列が含まれるか調べる	sub in s
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
表データのカラム名を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
ダークターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
縦棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
折れ線グラフの丸印を青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
データフレームの指定したカラムの欠損値をその第二四分位数で埋める	df['列A'].fillna(df['列A'].median())
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
nマイナスn2	n - n2
指定したカラムを百の位で丸める	df['列A'].round(-2)
縦棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
グラフで使える色名の一覧	matplotlib.colors.cnames
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームのある列をドロップする	df.drop('列A', axis=1, inplace=True)
option: EUCを用いる	encoding = 'euc_jp'
エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
option: フォントの色をグリーンイエローにセットする	color = 'greenyellow'
nからn2までのスライス	slice(n, n2)
ファイルから1文字、読む	f.read(1)
線グラフをダークオーキッド色として描画する	plt.plot(データ列x, データ列y, color='darkorchid')
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
データフレームの重複していない行のみを抽出する	df[~ df.duplicated(keep=False)]
散布図に▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
日付時刻データが何曜日か知る	aDatetime.weekday()
グラフに被らない位置に凡例を表示する	plt.legend(loc='best')
線グラフの色を淡いピンク色にセットする	plt.plot(データ列x, データ列y, color='lightpink')
ライトスチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
文字列をエンコーディングを用いてバイト列にする	s.encode(encoding=encoding)
線グラフの色をゴーストホワイトに指定する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: グラフの色を濃い青にする	color = 'darkblue'
リストの推移を赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
表は何行重複するか見る	df.duplicated().sum()
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
データフレームの先頭10行	df.head(10)
横棒グラフをアリスブルー色を使って描画する	plt.barh(データ列x, データ列y, color='aliceblue')
ベクトルの行列積	np.matmul(aArray, aArray2)
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
データフレームの信頼区間を描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
棒グラフをゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームの指定した列のNaNを最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
option: ライトブルーに色を設定する	color = 'lightblue'
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
文字列全体が正規表現にケースを無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データフレームを２つの列によってソートする	df.sort_values(by=['列A', '列B'])
タイムスタンプデータにn日分加える	aDatetime + datetime.timedelta(days=n)
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
両端キューの末尾の値を求める	deq[-1]
カウンタの項目をひとつ増やす	aCounter[element] += 1
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
データフレームの列を型にする	df[col] = df[col].astype(ty)
ダーク・スラテグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkslategrey')
ある列によってデータフレームをグループ化し、記述統計量を求める	df.groupby('列A').describe()
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
SJISとして書き込み用にファイルをオープンする]	open(filepath, mode='w', encoding='shift_jis')
辞書の項目名の値	aDict[key]
ヒストグラムの色をコーンズシルクにセットする	plt.hist(データ列, color='cornsilk')
nの各桁の総和	sum(map(int, str(n)))
リストとイテラブルの散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
option: 四角マーカーを描画する	marker = 's'
option: グラフの色をオーキッドに変更する	color = 'orchid'
横棒グラフの幅を変更する	plt.barh(ラベル列, データ列, width=0.5)
部分文字列が文字列の開始位置からと終了位置の範囲に含まれる	s.find(sub, start, end) != -1
文字列の先頭の空白を除く	s.lstrip()
散布図に黒いポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームの指定したカラムの不偏分散	df['列A'].var(ddof=1)
最大値と最小値として揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
option: グラフを点線に設定する	linestyle = 'dotted'
部分文字列が文字列の開始位置から先に含まれないかどうか調べる	s.find(sub, start) == -1
データフレームをグループ化し、標準偏差を求める	df.groupby('列A').std()
文字列内に小文字があるか調べる	any(c.islower() for c in s)
今日の日付	datetime.date.today()
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
データフレームの中央値	df.median()
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
オリーブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
データフレームのある列を行に設定する	df.set_index('列A')
option: サンディーブラウンを使う	color = 'sandybrown'
スチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='steelblue')
ブラック色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
コロンで文字列を区切り、、列挙する	s.split(':')
濃い青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
option: グラフの色をミディアムアクアマリンに変更する	color = 'mediumaquamarine'
データフレームの中の未入力値の合計を数える	df.isna().sum()
option: 丸マーカーを使う	marker = 'o'
データフレームの行がnの行を抽出する	df.loc[n]
折れ線グラフのポイントマーカーを青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ヒストグラムの色をペールグリーンにセットする	plt.hist(データ列, color='palegreen')
折れ線グラフをミディアムバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
ファイルパスをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
文字列の左側から部分文字列を除去する	s.lstrip(sub)
rgbのポイントマーカーをデータ列とイテラブルの散布図に描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームの列の種類を見る	df.info()
リストの推移を色付きの点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
折れ線グラフの▽印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ブルーバイオレットにヒストグラムの色をセットする	plt.hist(データ列, color='blueviolet')
データフレームをある列によってまとめたグループ	df.groupby('列A')
文字列の中のASCII限定として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフをダークサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='darksalmon')
実数を実数で除した余り	x % y
ビスク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
ヒストグラムをコーンズシルク色を使って描画する	plt.hist(データ列, color='cornsilk')
で表の相関行列を求める	df.corr(method='kendall')
線グラフの色をレモンシフォンにする	plt.plot(データ列x, データ列y, color='lemonchiffon')
散布図にrgbの丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
数列と数列についてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
文字コードtextを使ってファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
t-SNEでパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
option: ミディアムシアグリーンに色を設定する	color = 'mediumseagreen'
データフレームを大きい順にある列によって並べ直す	df.sort_values(by='列A', ascending=False)
二つ並べてデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
データフレームの指定したカラムのNaNをその50パーセンタイルで置き換える	df['列A'].fillna(df['列A'].median())
ふたつの列からグループ化し、標準偏差を算出する	df.groupby(['列A', '列B'], as_index=False).std()
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
棒グラフを紺色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
アクアにヒストグラムの色を設定する	plt.hist(データ列, color='aqua')
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
縦棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
赤い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
折れ線グラフの色をパレットトルコイズにセットする	plt.plot(データ列x, データ列y, color='paleturquoise')
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
オプションで、出力先を標準出力に指定する	file = sys.stdout
縦棒グラフをハニーデュー色を用いて描画する	plt.bar(データ列x, データ列y, color='honeydew')
option: 黄色色を使う	color = 'yellow'
データフレームをグループ化し、それぞれの分散を求める	df.groupby('列A').var()
データフレームのあるカラムをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
色付きの実線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図をマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='magenta')
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの選択したカラムの欠損値を直後の値に指定する	df[['列A', '列B']].fillna(method='bfill')
オブジェクトがバイト列クラス	isinstance(obj, bytes)
リストの末尾から値をポップする	aList.pop()
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
散布図をイエローグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
最大値と最小値を用いてデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
分子と分母から有理数を用意する	fractions.Fraction(分子, 分母)
ハニーデュー色を用いてヒストグラムを描画する	plt.hist(データ列, color='honeydew')
日付データにn週間分足す	aDate + datetime.timedelta(weeks=n)
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
文字列が文字列リストのいづれ	s in aStringList
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
赤い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
浮動小数点数を小数点第一位で丸める	round(x, 1)
リストの末尾にリストを展開する	aList.extend(aList2)
xの印字可能な文字列	ascii(x)
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
年月日と時間からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
RANSACで回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
option: フォントの色をダークサーモンに変更する	color = 'darksalmon'
イテラブルの要素を順に両端キューの末尾に追加する	deq.extend(iterable)
折れ線グラフの印を右三角にする	plt.plot(データ列x, データ列y, marker='>')
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
オブジェクトが辞書型か	isinstance(obj, dict)
グラフから格子を消す	plt.grid(False)
棒グラフをバイオレット色を用いて描画する	plt.bar(データ列x, データ列y, color='violet')
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
イテラブルを集合に変換する	set(iterable)
option: グラフの色をディムグレーに設定する	color = 'dimgray'
配列間のケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
オールドレース色で散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
option: ペールグリーン色を使う	color = 'palegreen'
xの小数点以下'2'桁までの文字列にする	':.2f'.format(x)
サドルブラウン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
ミントクリーム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
データフレームの選択したカラムの不偏標準偏差	df[['列A', '列B']].std()
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
ダークターコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフに赤い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ミッドナイトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='midnightblue')
散布図をミディアムシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
データフレームの選択したカラムの欠損値を平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
積み上げ横棒グラフを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
まとめて正規表現patternでデータフレームをreplに置き換える	df.replace(pattern, repl, regex=True)
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
配列の尖り	scipy.stats.kurtosis(配列, bias=False)
縦棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
option: パープル色を使う	color = 'purple'
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
Pythonパスにを追加する	sys.path.append(dir)
ある列のカテゴリごとの分散	df.groupby('列A').var()
折れ線グラフの菱形マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームのカラムをカテゴリデータに変換する	df[col].astype(object)
特異値分解で多次元データを淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
クラス分類の真陽性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
配列のピアソンの相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
散布図の菱形マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
数値を白色でプリントする	print(f'\033[37m{value}\033[0m')
決定木の重要度をグラフにする	plt.barh(X.columns, model.feature_importances_)
ヒストグラムをミディアムパープル色を用いて描画する	plt.hist(データ列, color='mediumpurple')
文字列をカンマを使って区切り、、列挙する	s.split(',')
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
option: グラフの色をカーキに設定する	color = 'khaki'
辞書にキーワード引数を用いて追加する	aDict.update(**kwargs)
入力から２つの自然数を読み込む	A, B = map(int, input().split())
ファイル名がCSVファイルかどうか調べる	filename.endswith('.csv')
option: アクアマリンにグラフの色を設定する	color = 'aquamarine'
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
カウンタの全カウント	aCounter.total()
データフレームの中に文字列と文字列がいくつ存在するか数える	df.isin([value, value2]).sum()
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
文字列は全て数値か調べる	s.isnumeric()
リストを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
文字列が全て小文字か調べる	s.islower()
散布図のバツ印を黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
option: クリムゾン色を使う	color = 'crimson'
値が集合のメンバー	element in aSet
日付データが日付データより後ろか確認する	aDate > aDate2
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
option: ライトコーラルにフォントの色を設定する	color = 'lightcoral'
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
既存のファイルをBOM付きで追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
リストの散布図をプロットする	plt.scatter(データ列x, データ列y)
両端キューの最後	deq[-1]
横棒グラフを濃いシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
データフレームのカラムのピアソンの相関係数	scipy.stats.pearsonr(df['列A'], df['列B'])
散布図のマーカーの太さを変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
文字列の中の複数行対応として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
文字列をコロンを用いて区切って、列挙する	s.split(':')
タプルをひとつ飛ばしで取り出す	aTuple[::2]
サンディーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
n割るn2を切り上げる	(n + n2 - 1) // n2
ディープスカイブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
option: マーカーを四角に変更する	marker = 's'
配列を平坦化する	aArray.flatten()
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
既存のファイルを追加できるように文字コードtextとしてオープンする]	open(filepath, mode='a', encoding=text)
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
追加モードでファイルパスをオープンする]	open(filepath, mode='a')
データフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
option: マルーン色を用いる	color = 'maroon'
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
リストとリストについての散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
モカシンにヒストグラムの色を設定する	plt.hist(データ列, color='moccasin')
赤い▲印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: チョコレートにフォントの色を設定する	color = 'chocolate'
ブラック色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの▼印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: パールバイオレットレッドに色を設定する	color = 'palevioletred'
ヒストグラムをダークシアグリーン色として描画する	plt.hist(データ列, color='darkseagreen')
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
データフレームの欠損値が含まれる箇所に色をつける	df.style.highlight_null()
データフレームの最頻値を求める	df.mode()
日付時刻データは何月か知る	aDatetime.month
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
グラフの用途をポスターに変更する	sns.set(context='poster')
イテラブルから多重集合を準備する	collections.Counter(iterable)
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
散布図をラベンダー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavender')
リストのn番目からn2番目までの部分	aList[n:n2]
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
数式の展開を行う	sympy.expand(e)
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
イテラブルの全順列	itertools.permutations(iterable)
option: フォントの色をベージュに設定する	color = 'beige'
辞書を複製する	dict(aDict)
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
option: バリーウッド色を使用する	color = 'burlywood'
データフレームをある列のカテゴリでグループ化して、それぞれのグループごとの件数を知る	df.groupby('列A').size()
二進対数を計算する	math.log2(x)
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
ライトスチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
option: 分割記号をコロンにする	sep = ':'
大文字と小文字を交換する	s.swapcase()
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
JSONフォーマットの文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
グリッド線	plt.grid(alpha=0.5)
折れ線グラフの色をダークオレンジにセットする	plt.plot(データ列x, データ列y, color='darkorange')
昇順にタプルの値をソートする	sorted(aTuple, reverse=True)
option: 改行をセパレータで使用する	sep = '\n'
ドジャーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
縦棒グラフをドジャーブルー色として描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
青色で線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
散布図をブランチドアーモンド色を使って描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
プロットを画面に設定する	sns.set(context='notebook')
名前付きタプルを使う	import collections
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
ヒストグラムと勾配ブースティングで回帰分析をする	model = sklearn.ensemble.HistGradientBoostingRegressor()
散布図をバリーウッド色として描画する	plt.scatter(データ列x, データ列y, color='burlywood')
表の先頭10行	df.head(10)
option: ピンクにグラフの色を設定する	color = 'pink'
option: フォントの色をシャルトリューズに設定する	color = 'chartreuse'
折れ線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
折れ線グラフの色をデピンクにする	plt.plot(データ列x, データ列y, color='deeppink')
データフレームの列を千の位で四捨五入する	df['列A'].round(-3)
線グラフを点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
データ列をボックスチャートにする	plt.boxplot(データ列)
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
折れ線グラフの左三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
option: エンコーディングを文字列の示す文字コードに指定する	encoding = s
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
散布図のクロスマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ファイルパスからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
option: 印を左三角に変更する	marker = '<'
データフレームをソートして、行を振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
ミディアムブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
rgbの四角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ヒストグラムの色をピンクに変更する	plt.hist(データ列, color='pink')
折れ線グラフのポイントマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
半透明の破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
三つ並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームのカラムのピアソンの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
ある列によってデータフレームをまとめたグループ	df.groupby('列A')
option: ミディアムオーキッドにグラフの色を設定する	color = 'mediumorchid'
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
文字列を走査し、正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
ミディアムバイオレットレッド色でヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
棒グラフをカデットブルー色として描画する	plt.bar(データ列x, データ列y, color='cadetblue')
option: 青緑にフォントの色を設定する	color = 'teal'
外れ値を除いた配列の分散	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
K最近傍法を用いてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
折れ線グラフの色をオレンジレッドに指定する	plt.plot(データ列x, データ列y, color='orangered')
真上位集合か調べる	aSet > aSet2
ヒストグラムを紺碧色を用いて描画する	plt.hist(データ列, color='azure')
option: マーカーを四角に指定する	marker = 's'
データフレームの指定したカラムの値を正規表現patternでまとめて置き換える	df['列A'].replace(pattern, repl, regex=True)
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
横棒グラフをシャルトリューズ色として描画する	plt.barh(データ列x, データ列y, color='chartreuse')
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
リストの個数を見る	len(aList)
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
データフレームの標準偏差を計算する	df.std()
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='turquoise')
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
option: 色をミディアムターコイズに設定する	color = 'mediumturquoise'
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
書式をタプルで文字列整形する	formatText.format_map(aDict)
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
横棒グラフをミディアムオーキッド色として描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
折れ線グラフの色をダークゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの色をミントクリームにする	plt.plot(データ列x, データ列y, color='mintcream')
線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
カデットブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgrey')
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
配列とデータ列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
縦棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
日付データが日曜日か	aDate.weekday() == 6
散布図をダークスラテグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
データフレームを四捨五入する	df.round()
三つの文字列を順にプリントする	print(value, value2, value3)
数値を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
データシリーズを1000の位で四捨五入して、整数にする	ds.round(-3).astype(int)
青緑色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
線グラフの色をインディゴに変更する	plt.plot(データ列x, データ列y, color='indigo')
ファイル名がJSONファイルか調べる	filename.endswith('.json')
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
リストと配列についての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
赤い四角マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
縦棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
横棒グラフをトマト色として描画する	plt.barh(データ列x, データ列y, color='tomato')
変数の出力を改行しないで行う	print(value, end='')
縦棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
行列の転置行列	aArray.T
データシリーズの中に文字列と文字列がいくつ存在するか調べる	ds.isin([value, value2]).sum()
赤い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='r')
数列のピアソンの積立相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
小文字を大文字に変換する	s.upper()
タプルを展開してプリントする	print(*aTuple)
二つの数値を順にプリントする	print(value, value2)
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
日付データは日付データより遅いかどうか	aDate > aDate2
縦棒グラフをアクアマリン色を使って描画する	plt.bar(データ列x, データ列y, color='aquamarine')
折れ線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
実数が負の数かどうか調べる	x < 0
ペールグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
線グラフの色をライトスチールブルーに変更する	plt.plot(データ列x, データ列y, color='lightsteelblue')
JSONLファイルからデータフレームをロードする	pd.read_json(filename, orient='records', lines=True)
変数名をキーとして、辞書	dict(name=element)
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
リストから配列を作る	np.array(aList)
白色で線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
タイムスタンプデータの日数を求める	aDatetime.day
k進対数を計算する	math.log(x, k)
配列の平均の標準誤差を使う	scipy.stats.sem(配列)
ダークオリーブグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
アヤメのデータセットをロードする	df = sns.load_dataset('iris')
グループごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
文字列の出力を改行なしに行う	print(value, end='')
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
折れ線グラフに赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ヒストグラムの色をオーキッドに指定する	plt.hist(データ列, color='orchid')
赤いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
文字列をバイト配列に変換する	bytearray(s)
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
浮動小数点数が負の数かどうか調べる	x < 0
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
y軸の目盛の値を変更する	plt.yticks(目盛りの値リスト)
データフレームのあるカラムが何曜日か見る	df['列A'].dt.weekday_name
行列のユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
折れ線グラフをサドルブラウン色として描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
全要素を1で初期化した行列を作る	np.ones(行数, 列数, dtype=np.int)
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
辞書の値の一覧を得る	aDict.values()
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
折れ線グラフの▽マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフの色をロージーブラウンにする	plt.plot(データ列x, データ列y, color='rosybrown')
実数を千の位で丸める	round(x, -3)
昇順に組の要素を並べ変える	sorted(aTuple, reverse=False)
縦棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
小数点数の逆双曲線正接	math.atanh(x)
option: パパイヤウィップにフォントの色を設定する	color = 'papayawhip'
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
ゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
リストと配列について散布図を描画し、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ファイルを絶対ファイルパスに変換する	os.path.abspath(filepath)
文字列の中で大文字・小文字を無視してパターンにマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
x,yの複素数	complex(x, y)
折れ線グラフの菱形マーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
横方向に二つのデータフレームを結合する	pd.concat([df, df2], axis=1)
縦棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
縦棒グラフを濃い青色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
文字列を小文字に変換する	s.casefold()
ミディアムパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
２つの列からグループ化し、最小値を算出する	df.groupby(['列A', '列B'], as_index=False).min()
データフレームのカラム間のスピアマンの順位相関係数	scipy.stats.spearmanr(df['列A'], df['列B'])
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
パーセプトロンでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: マーカーを三角に変更する	marker = '^'
リストと配列について散布図を描画して、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフをネイビー色として描画する	plt.plot(データ列x, データ列y, color='navy')
文字列中の小文字を大文字にする	s.upper()
データフレームをグループ化し最大値を求める	df.groupby('列A').max()
数式をパラメータについて微分する	sympy.diff(e, z)
部分集合か判定する	aSet.issubset(aSet2)
文字列でフォーマットして本日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データシリーズは正規分布からどれだけ、歪んでいるか見る	ds.kurt()
数列と数列についての散布図に三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
プログラムの実行を正しく停止する	sys.exit(0)
UNIX時間のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームの中央値を計算する	df.median()
リスト内の要素が少なくともひとつ真か調べる	any(aList)
黄緑色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
option: ミディアムスレートブルーを使う	color = 'mediumslateblue'
option: グラフの色をサンディーブラウンに変更する	color = 'sandybrown'
オプションで、標準エラーに出力する	file = sys.stderr
nで乱数生成系列を初期化する	random.seed(n)
折れ線グラフの色をコーンフラワーブルーに変更する	plt.plot(データ列x, データ列y, color='cornflowerblue')
2つの文字列が等しくないか調べる	s != s2
線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
データフレームの欠損値を最大値に変更する	df.fillna(df.max())
ベクトルの列ごとの標準偏差	np.std(aArray, axis=0)
配列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
変数を水色にする	f'\033[36m{value}\033[0m'
option: チョコレートにグラフの色を設定する	color = 'chocolate'
折れ線グラフの下三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
rgbの丸マーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ダーク・スラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
nの無限な数列	itertools.repeat(n)
レベッカパープルにヒストグラムの色を変更する	plt.hist(データ列, color='rebeccapurple')
グリーンイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
JSON形式の文字列を読み込む	json.loads(jsonString)
option: グラフの色をオリベドラブに指定する	color = 'olivedrab'
列名を指定して二つの表データを右結合する	pd.merge(df, df2, on='列A', how='right')
nまでの奇整数リスト	list(range(1, n, 2))
タプルの浅いコピーを新規生成する	aDict.copy()
ASCII限定として事前にパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s')
nがn2の倍数か	n % n2 == 0
データフレームの選択したカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
時刻を用いる	import datetime
折れ線グラフの大バツ印の色を指定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
横棒グラフをアクア色として描画する	plt.barh(データ列x, データ列y, color='aqua')
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
折れ線グラフのポイントマーカーの色を指定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
option: 色をディープスカイブルーに指定する	color = 'deepskyblue'
平均値付き箱ヒゲ図を描く	plt.boxplot(データ列, showmeans=True)
線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
セットが空でないか調べる	len(aSet) != 0
パレットトルコイズ色でヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
ライトサーモン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
淡い茶色にヒストグラムの色を変更する	plt.hist(データ列, color='tan')
数式を変数について微分する	sympy.diff(e, z)
文字列をユニコード列にする	[ord(ch) for ch in s]
データフレームのカラムのスピアマンの相関係数を算出する	scipy.stats.spearmanr(df['列A'], df['列B'])
リストのn番目のの要素	aList[n]
タプルの値だけ表示する	print(*aTuple)
三自然数の最大公約数	math.gcd(n, n2, n3)
ローングリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
option: アイボリー色を使う	color = 'ivory'
ひとつでも数字が文字列内に含まれるか調べる	any(c.isdigit() for c in s)
シーケンスを両端キューに変換する	collections.deque(iterable)
レベッカパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
入力を整数として受け取る	int(input())
ダークオレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
散布図に右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
データフレームの選択した列の中に日付データがあるか調べる	df[['列A', '列B']].isin([value])
折れ線グラフの色をプラムに変更する	plt.plot(データ列x, データ列y, color='plum')
クラス分類をランダムフォレストでする	model = sklearn.ensemble.RandomForestClassifier()
マッピングのキーの一覧を見る	aDict.keys()
マップの値として要素が含まれているか調べる	element in aDict.values()
モデルを当てはめる	model.fit(説明変数, 目的変数)
両端キューの末尾から要素を取り除く	deq.pop()
ヒストグラムを一点鎖線に変更する	plt.hist(データ列, linestyle='dashbot')
option: コーンフラワーブルー色を用いる	color = 'cornflowerblue'
ある列を百の位で丸める	df['列A'].round(-2)
横棒グラフをパールバイオレットレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='palevioletred')
文字列の右端から空白を除去する	s.rstrip()
ヒストグラムをドジャーブルー色を使って描画する	plt.hist(データ列, color='dodgerblue')
配列とリストについて散布図を描いて、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームのある列のメディアン	df['列A'].median()
折れ線グラフの下三角印を黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
データフレームが正規分布からどれだけ、尖っているか見る	df.skew()
option: スカイブルーにグラフの色を変更する	color = 'skyblue'
ヒストグラムの色をシーグリーンにする	plt.hist(データ列, color='seagreen')
二つの数値をタブで区切って出力する	print(value, value2, sep='\t')
シスル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
option: SJISを用いる	encoding = 'shift_jis'
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
新しいリッジ回帰モデルを新規作成する	model = sklearn.linear_model.Ridge(alpha=正則化項)
タイムスタンプデータからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
ライムグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
nullに等しい値	None
日付時刻データと日付時刻データの時間差を秒で算出する	(aDatetime - aDatetime2).total_seconds()
データ列を使用する	import pandas as pd
ファイルをオープンして]、バイナリ書き込みストリームを求める	open(filepath, mode='wb')
データフレームの選択した列は正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
ミディアムシアグリーン色を使ってヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
パレットトルコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
散布図の大バツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
option: 貝殻にグラフの色を設定する	color = 'seashell'
折れ線グラフの▲マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
サブセットか	aSet.issubset(aSet2)
リストの文字列が最初に見つかる位置	aList.index(element)
ファイルパスを追加できるように開く]	open(filepath, mode='a')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
rgbの大バツマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
縦棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
散布図をフォレストグリーン色として描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
現在が火曜日かどうか調べる	datetime.datetime.today().weekday() == 1
オブジェクトが名前付きタプルかどうか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
折れ線グラフのバツ印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
組とタプルを加える	aTuple + aTuple2
option: グレー色を使う	color = 'grey'
y軸を対数に変更する	plt.yscale('log')
数値を簡単にする	sympy.sympify(e)
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
日付時刻データの時間	aDatetime.time()
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
線形モデルの切片	model.intercept_
散布図の▲印の太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
JSONLファイルをデータフレームとしてロードする	pd.read_json(filename, orient='records', lines=True)
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
双方向キューの左	deq[0]
指定した列の値で集計し、それぞれの最大値を求める	df.groupby('列A').max()
列を等量で分割数nでビン分割する	pd.qcut(ds, n)
データフレームの一部のカラムの中にある文字列と文字列の合計を調べる	df[['列A', '列B']].isin([value, value2]).sum()
指定したカラムのみ、データフレームの重複を調べる	df.duplicated(subset='列A')
データフレームから一つの列を選ぶ	df[['列A']]
カラーバーを横向きに付ける	plt.colorbar(orientation='horizontal')
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
スクリプトファイルの絶対パスを使う	os.path.abspath(__file__)
データフレームの上位25％を求める	df.quantile(0.25)
赤いバツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データシリーズの曜日が何日目か見る	ds.dt.dayofweek
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
データシリーズの中にいくつ未入力値があるか数える	ds.isna().sum()
option: オリベドラブにフォントの色をする	color = 'olivedrab'
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
リストの平均値を算出する	sum(aList)/len(aList)
option: 色をダークグリーンに設定する	color = 'darkgreen'
データフレームのNaNを直前の値で埋める	df.fillna(method='ffill')
データフレームのあるカラムは何分か見る	df['列A'].dt.minute
両端キューの順序を左にn個分ローテンションする	deq.rotate(-n)
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
xの絶対値	abs(x)
列をいつまでも繰り返す	itertools.cycle(iterable)
リネン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
option: ダークグレー色を使う	color = 'darkgrey'
データフレームのある列の値がxより大きいデータを抽出する	df[df['列A'] > x]
カラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
降順に２つの列でデータフレームをソートする	df.sort_values(by=['列A', '列B'], ascending=False)
データフレームの第一四分位数	df.quantile(0.25)
グリーンイエロー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
option: 三角マーカーを使う	marker = '^'
線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ある列の値がxより小さい行を抽出する	df[df['列A'] < x]
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
リストとリストについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
縦棒グラフをライトサーモン色として描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
rgbのポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームの選択したカラムの標本分散	df[['列A', '列B']].var(ddof=0)
ピンク色でヒストグラムを描画する	plt.hist(データ列, color='pink')
option: グラフの色をスチールブルーに指定する	color = 'steelblue'
データフレームを丸めて、整数型にする	df.round().astype(int)
列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
一点鎖線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dashbot')
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
その最小値でデータシリーズの欠損値を置換する	ds.fillna(ds.min())
新しいロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
日付データの曜日を整数で使う	aDate.weekday()
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
データフレームを関数によってまとめたグループ	df.groupby(関数)
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
option: n番目の列をインデックスに指定する	index_col = n
ヒストグラムの色をコーンフラワーブルーに指定する	plt.hist(データ列, color='cornflowerblue')
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
線グラフの色をフローラルホワイトにセットする	plt.plot(データ列x, データ列y, color='floralwhite')
データフレームが重複しているか調べる	df.duplicated()
ヒストグラムをフォレストグリーン色として描画する	plt.hist(データ列, color='forestgreen')
データフレームをある列で昇順にソートする	df.sort_values(by='列A', ascending=True)
データ列をビン分割する	pd.cut(ds, aList)
option: 線の種類を点線に設定する	linestyle = 'dotted'
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
データフレームの指定したカラムの不偏標準偏差	df['列A'].std()
列の組み合わせ	itertools.combinations(iterable, n)
線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgrey')
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
折れ線グラフに赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
ベクトルのユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
オブジェクトのプロパティを値に設定する	setattr(obj, プロパティ名, 値)
データフレームの一部のカラムを千の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
リストと配列の散布図を描いて、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
option: ライトスチールブルーを使う	color = 'lightsteelblue'
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
標準エラーを使う	sys.stderr
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
丸マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
データを四分位点を用いて標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
文字列は全て印字できる	s.isprintable()
折れ線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
マッピングの値として要素は含まれているかどうか確認する	element in aDict.values()
日付データは日付データより早いかどうか調べる	aDate < aDate2
マップのキー一覧	list(aDict)
文字列の最初	s[0]
二進文字列をバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
n個に等量で配列をビン分割する	pd.qcut(aArray, n)
CSVファイルをn番目のカラムを行として読み込む	pd.read_csv('file.csv', index_col=n)
option: アクア色を用いる	color = 'aqua'
線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
横棒グラフをスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='slateblue')
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
プロットの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
日付データのデータフレームのあるカラムを表データのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
日付データをn時間前にする	aDate - datetime.timedelta(hours=n)
実数のコサイン	math.cos(x)
日付時刻データからn日を減算する	aDatetime - datetime.timedelta(days=n)
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
グラフ中のフォントをセットする	sns.set(font=フォント名)
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
nとkのコンビネーションを求める	math.comb(n, k)
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
横棒グラフをダークブルー色として描画する	plt.barh(データ列x, データ列y, color='darkblue')
データフレームの指定したカラムの要約統計量	df['列A'].describe()
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
二つの集合が集合と交わりを持たない	aSet.isdisjoint(aSet2)
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
八進数字を全部見る	string.octdigits
データフレームのある列をインデックスに指定する	df.set_index('列A')
折れ線グラフに星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
データフレームの上100行	df.head(100)
折れ線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
エクセルファイルからSJISでCSVファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームをグループ化し、ある列に対し標準偏差を求める	df.groupby('列A')['列B'].std()
nのビット長	n.bit_length()
プロットに水平方向の実線をつける	plt.axhline(y=0, linestyle='solid')
option: 紺を用いる	color = 'darkblue'
散布図のマーカーを▽にする	plt.scatter(データ列x, データ列y, marker='v')
行列をフラットにする	aArray.flatten()
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
データフレームの選択したカラムの欠損値を前の値で補う	df[['列A', '列B']].fillna(method='ffill')
折れ線グラフをダークターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
データシリーズが何秒か見る	ds.dt.second
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
青い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
option: グリーンを使用する	color = 'green'
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
データフレームの列の種類	df.info()
1で全要素を初期化した配列	np.ones(要素数, dtype=np.int)
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: 色をロイヤルブルーに設定する	color = 'royalblue'
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
双方向キューの最初に要素を付け加える	deq.appendleft(element)
データフレームのあるカラムが何日か見る	df['列A'].dt.day
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
データシリーズの欠損値を平均値に変更する	ds.fillna(ds.mean())
データシリーズの未入力値を直前の値に設定する	ds.fillna(method='ffill')
赤い星マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='r')
棒グラフをサドルブラウン色として描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
ヒストグラムをミディアムスプリンググリーン色を使って描画する	plt.hist(データ列, color='mediumspringgreen')
bとn2から成るペア	(n, n2)
自然数個からk個取り出した時の並べ方の総数を求める	math.perm(n, k)
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
文字コードtextとして追加できるようにファイルパスを開く]	open(filepath, mode='a', encoding=text)
本日が何年か知る	datetime.datetime.today().year
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
ミッドナイトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
カラムが正規分布に従うか仮説検定する	scipy.stats.shapiro(df['列A'])
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
散布図をミディアムブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
option: オールドレース色を使用する	color = 'oldlace'
文字列を赤色にする	f'\033[31m{value}\033[0m'
数式を簡略にする	sympy.sympify(e)
クラス分類の感度を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
リストの要素を昇順に並べ変える	sorted(aList, reverse=False)
二進対数	math.log2(x)
データ列の一意な値	ds.unique()
クラスのサブクラスかどうか調べる	issubclass(サブクラス, クラス)
赤い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
nをn2で値の切り上げを求める	(n + n2 - 1) // n2
グラフのy軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
option: クロスマーカーを描画する	marker = 'x'
ディムグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
レモンシフォン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ペルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
option: カラムの名前をリストで指定する	names = 列名リスト
データフレームの分散を求める	df.var()
タプルの全順列	itertools.permutations(iterable)
事前にケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
ヒストグラムをドジャーブルー色として描画する	plt.hist(データ列, color='dodgerblue')
JSONLファイルをロードする	pd.read_json(filename, orient='records', lines=True)
グラフをポスター用に設定する	sns.set(context='poster')
日付時刻データの分数を求める	aDatetime.minute
2つの浮動小数点数が十分に近いかどうか調べる	math.isclose(x, x2)
文字列を最後の部分文字列で二分し後半の文字列を使う	s.rpartition(sub)[-1]
スピアマン相関係数としてデータフレームの相関行列を求める	df.corr(method='spearman')
n進文字列を整数にする	int(s, n)
黒色で実行結果を表示する	print(f'\033[30m{value}\033[0m')
アイボリー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
折れ線グラフの色をラベンダーに変更する	plt.plot(データ列x, データ列y, color='lavender')
実数のハイパボリック・コサインの逆数	math.acosh(x)
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
マッピングのキーを要素に設定する	aDict[key] = element
データフレームの選択したカラムの値を正規表現patternでまとめてreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
ヒストグラムの色をスレートブルーに変更する	plt.hist(データ列, color='slateblue')
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
文字列はタイトルケースか調べる	s.istitle()
option: フォレストグリーンにグラフの色を変更する	color = 'forestgreen'
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
データフレームの指定したカラムを十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
折れ線グラフの上三角印を青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
グラフのカラーテーマを指定する	sns.set(pallete=パレット名)
グラフの見栄えを綺麗にする	import seaborn as sns
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
データ列とデータ列の散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
ある列によってデータフレームをグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
折れ線グラフをグリーンイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームの信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: 色をナバホホワイトに指定する	color = 'navajowhite'
折れ線グラフの下三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
rgbの▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列全体が正規表現にASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
棒グラフをライトサーモン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
整数nを8進数リテラルに変換する	oct(n)
枠なしの補足をプロットの中に付ける	plt.legend(frameon=False)
文字列でフォーマットして日付時刻データを文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
JSON文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ユニークな各要素の出現回数を使う	np.unique(aArray, return_counts=True)
シアンにヒストグラムの色を設定する	plt.hist(データ列, color='cyan')
データフレームを指定した列によってグループ化してグループ名を列挙する	[name for name, _ in df.groupby('列A')]
散布図をパールゴールデンロッド色を使って描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
option: どの行もヘッダにしない	header = None
データフレームのNaNを直後の値にする	df.fillna(method='bfill')
データフレームをある列の値でグループ化し、、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
データフレームを丸めて整数型にする	df.round().astype(int)
縦棒グラフを暗い赤色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
ミディアムブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
カラムが正規分布からどの程度、尖っているか確認する	df['列A'].skew()
プラットホームがMacOSかどうか	sys.platform.startswith('darwin')
option: 色をダークオリーブグリーンに変更する	color = 'darkolivegreen'
赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
データフレームのあるカラムは何秒か調べる	df['列A'].dt.second
データフレームをある列でソートして、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
散布図をrgbの大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
本日の日数を求める	datetime.datetime.today().day
正規分布を用いて疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
線グラフをダークサーモン色として描画する	plt.plot(データ列x, データ列y, color='darksalmon')
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
変数を水色でプリントする	print(f'\033[36m{value}\033[0m')
文字列をカンマで分割して文字列リストに変換する	s.split(',')
折れ線グラフの色をダークグリーンにセットする	plt.plot(データ列x, データ列y, color='darkgreen')
データフレームのある列の値がxより大きい行を抽出する	df[df['列A'] > x]
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
文字列の先頭	s[0]
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
日付データと日付データの時間差	aDate - aDate2
棒グラフをダークスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
連番の配列の自動作成する	np.arange(開始値, 終了値, 等差)
カデットブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームのインデックス名を全て付け直す	df.rename(index={x: y})
黒い左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
option: グラフの線種を一点鎖線に変更する	linestyle = 'dashbot'
データフレームのある列を削除する	df.drop('列A', axis=1, inplace=True)
オブジェクトのプロパティを消す	delattr(obj, プロパティ名)
散布図をダークシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='teal')
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
散布図に黒い上三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
プロットに格子線を入れる	plt.grid(True)
リストとリストの散布図をプロットし、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: タン色を使う	color = 'tan'
表データの下5行を取り出す	df.tail(5)
折れ線グラフの色をアンティークホワイトにセットする	plt.plot(データ列x, データ列y, color='antiquewhite')
option: 配列のデータ型を指定する	dtype = np.int
option: 青緑色を使う	color = 'turquoise'
縦棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
option: パウダーブルー色を使用する	color = 'powderblue'
欠損値がある行をドロップし、みる	df.dropna()
カーキ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
ダークオレンジ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
トマト色としてヒストグラムを描画する	plt.hist(データ列, color='tomato')
日付時刻データの曜日を整数で使う	aDatetime.weekday()
マップのキーを列挙する	list(aDict)
文字列の右端から空白を除く	s.rstrip()
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ふたつの列からグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
リストと配列について散布図をプロットして、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
option: グラフの色をブラックに指定する	color = 'black'
ベクトル演算を行う	import numpy as np
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
シエナ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
ファイルを解放する	f.close()
縦棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
数列のケンドールの相関係数を計算する	scipy.stats.kendalltau(数列, 数列2)
表データをソートして新しい行を振り直す	df.sort_values('キーとなる列').reset_index()
データフレームを散布図で描画して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
NaNも加えてデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
散布図をタン色として描画する	plt.scatter(データ列x, データ列y, color='tan')
配列のユニークな要素を求める	np.unique(aArray)
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
赤いポイント印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
カテゴリ別で色分けしてデータフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
キューをリストに変換する	list(deq)
option: グラフの色をアクアに変更する	color = 'aqua'
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
整数nを十六進数リテラルに変換する	hex(n)
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
リスト内の要素が全て真か調べる	all(aList)
現在のミリ秒	int(time.time() * 1000)
データフレームの列の文字列長を列として見る	df[col].str.len()
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
ティール色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
ある列の文字列が部分文字列で始まる行を抽出する	df[df['列A'].str.startswith(部分文字列)]
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
文字列リストをsepを区切りにして一つの文字列にする	sep.join(aStringList)
ヒストグラムの描いて正規化する	plt.hist(データ列, density=True)
最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
リストと配列についての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
整数nを八進表現に変換する	oct(n)
プラットフォームの符号付き整数の最大値を知る	sys.maxsize
xを整数にする	int(x)
横棒グラフをピーチパフ色を使って描画する	plt.barh(データ列x, データ列y, color='peachpuff')
バリーウッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='burlywood')
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
折れ線グラフのポイントマーカーの色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
パールバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
ヒストグラムの色をシアンに指定する	plt.hist(データ列, color='cyan')
データ列の割合を円プロットで作図する	plt.pie(データ列, startangle=90)
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
タイムスタンプデータをn日前にする	aDatetime - datetime.timedelta(days=n)
リストと配列の散布図を描いて、大バツマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
プロットに水平方向の破線を設定する	plt.axhline(y=0, linestyle='dashed')
赤い実線を用いて数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
その最頻値でデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
データフレームのカラムの最頻値を求める	mode, count = scipy.stats.mode(df['列A'])
散布図でデータフレームの全カラムを図示する	sns.pairplot(df)
折れ線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
データシリーズの中に日付データとがいくつ含まれるか調べる	ds.isin([value, value2]).sum()
横棒グラフをタン色として描画する	plt.barh(データ列x, データ列y, color='tan')
散布図のポイントマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ヒストグラムの色をスプリンググリーンに変更する	plt.hist(データ列, color='springgreen')
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
整数nを二進文字列にする	bin(n)[2:]
フローラルホワイト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
部分文字列を文字列の接尾辞から除去する	s.removesuffix(sub)
文字をユニコードに変換する	ord(ch)
イテラブルをカウントしてカウンタから引く	aCounter.subtract(iterable)
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
option: 読み込まないフッタをnに設定する	skipfooter = n
三変数の最大値	max(x, y, z)
実数の双曲線正接の逆数を算出する	math.atanh(x)
英字の大文字列	string.ascii_uppercase
ラインを半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
日付データをISO形式の文字列にする	aDate.isoformat()
辞書上でキーが未定義かどうか調べる	key not in aDict
配列の差を求める	aArray - aArray2
二変数の最大の値	max(x, y)
散布図の左三角印を青色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
疑似乱数を生成する	random.random()
option: ロージーブラウンを使用する	color = 'rosybrown'
ファイルを文字列の示すエンコーディングを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
データフレームの下位25パーセント	df.quantile(0.75)
ヒストグラムを黒くする	plt.hist(データ列, color='k')
データフレームの基本統計量	df.describe()
実数がNaNか調べる	math.isnan(x)
数列のスピアマンの相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
nをn2倍にする	n *= n2
option: ディープスカイブルーに色を設定する	color = 'deepskyblue'
モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
折れ線グラフに下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
ダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D')
黒い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='k')
濃くパレットをグラフの描画で用いる	sns.set(pallete='deep')
ミディアムアクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
ミディアムパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
データシリーズの曜日が何日目か調べる	ds.dt.dayofweek
カウンタのktopを列挙する	aCounter.most_common(k)
配列の尖りを計算する	scipy.stats.kurtosis(配列, bias=False)
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
nかつn2	n and n2
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
データフレームの指定したカラムの平均を求める	df['列A'].mean()
カウンタの要素一覧を求める	aCounter.keys()
散布図に黒いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
n番目の列を除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
ヒストグラムの色をライトスカイブルーに指定する	plt.hist(データ列, color='lightskyblue')
ベクトルの和	aArray + aArray2
ファイルからnバイト、読み込む	f.read(n)
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
エポック秒のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
実数に実数を加算する	x + y
データシリーズの文字列を欠損値に変換する	ds.replace(値, np.nan)
最後の列を除いたデータフレーム	df[df.columns[:-1]]
タプルのの一覧を得る	aDict.values()
実数の絶対値を計算する	math.fabs(x)
双方向キューの最大長	deq.maxlen
スタックの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
散布図でデータフレームを可視化してカテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
nがリストのどれか	n in aList
データフレームが重なるいる	df.duplicated()
データフレームの指定したカラムの値をValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
円プロットにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
黒い▽マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
ラインを破線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashed')
リストとイテラブルについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
あるカラムの分散	df.groupby('列A').var()
行列のユニークな要素	np.unique(aArray)
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
凡例をグラフ中の(x,y)の場所に表示する	plt.legend(loc=(x, y))
ピーチパフ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
マップの値の一覧	aDict.values()
データフレームのカラムを千の位で丸めて整数型にする	df['列A'].round(-3).astype(int)
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列x, データ列y, color='darksalmon')
リストをnから番号付けする	enumerate(aList, start=n)
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
タイムスタンプデータは何時か知る	aDatetime.hour
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
データシリーズの未入力値を最小値に変更する	ds.fillna(ds.min())
表の最後10行を取り出す	df.tail(10)
マッピングをJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
グラフに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
文字列を全て小文字に変換する	s.lower()
データフレームのあるカラムの曜日の名前を使う	df['列A'].dt.weekday_name
最大値・最小値の範囲で一様な疑似乱数	random.uniform(最小値, 最大値)
本日の月を使う	datetime.datetime.today().month
ファイルパスを読み込みできるようにオープンする]	open(filepath, mode='r')
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
空の勾配ブースティング分類木を準備する	model = sklearn.ensemble.GradientBoostingClassifier()
折れ線グラフをダークシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
今日の日付時刻を見る	datetime.datetime.today()
データフレームの一部のカラムの欠損値をモードで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
2つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
文字列中の部分文字列を数える	s.count(sub)
option: ミディアムスプリンググリーンにフォントの色を設定する	color = 'mediumspringgreen'
数列とイテラブルについて散布図を描画してマーカーを三角に指定する	plt.plot(データ列x, データ列y, marker='^')
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
データフレームをある列によってまとめた表	df.groupby('列A')
0からnまでの整数リストを得る	list(range(n+1))
本日が日曜日か	datetime.datetime.today().weekday() == 6
グラフのテーマを明るくする	sns.set(pallete='bright')
ヒストグラムをロイヤルブルー色を用いて描画する	plt.hist(データ列, color='royalblue')
浮動小数点数の2乗を求める	x ** 2
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
分数の分母	q.denominator
線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
複数の表データを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
文字列中にひとつでも非アルファベットが含まれるか確認する	any(not c.isalpha() for c in s)
要素は集合に含まれるか調べる	element in aSet
文字列をカンマで区切り、、文字列リストに変換する	s.split(',')
データフレームを表示するときヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
データフレームの指定した列の中に文字列があるか調べる	df['列A'].isin([value])
データフレームから数値データの列のみ選ぶ	df.select_dtypes('number')
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
数列の変遷を青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: サーモン色を用いる	color = 'salmon'
赤い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
ファイルのベースファイル名	os.path.splitext(os.path.basename(filepath))[0]
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
折れ線グラフの四角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
マルーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
データ列とリストについて散布図を描いて、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
日付データが日付データより後ろか調べる	aDate > aDate2
ヒストグラムをブラック色を用いて描画する	plt.hist(データ列, color='black')
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
ヒストグラムをダークオーキッド色として描画する	plt.hist(データ列, color='darkorchid')
赤い大バツマーカーをデータ列と配列の散布図に描く	plt.plot(データ列x, データ列y, marker='X', c='r')
グラフにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
日付データが日付データと同時か確認する	aDate == aDate2
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
今日の日数	datetime.datetime.today().day
異なる列をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
データフレームの指定したカラムのNaNを直後の値で埋める	df['列A'].fillna(method='bfill')
データシリーズを百の位で丸めて、整数型にする	ds.round(-2).astype(int)
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
nとn2が同じ値か確認する	n == n2
実数の逆正接を計算する	math.atan(x)
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
二つの集合の差	aSet.difference(aSet2)
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
二つの列の値でデータフレームをグループ化し、基本統計量を求める	df.groupby(['列A', '列B']).describe()
疑似乱数を発生させる	random.random()
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
文字列を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
データフレームから数値データの列のみ抽出する	df.select_dtypes('number')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
データフレームの指定の列に重複があれば、消す	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
データフレームから重複をドロップする	df.drop_duplicates(inplace=True)
シーケンスを出現回数して、カウンタを更新する	aCounter.update(iterable)
コーンズシルク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
行列積を求める	np.matmul(aArray, aArray2)
多次元データを多次元尺度構成法として淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
データフレームをインデックスによって小さい順にソートする	df.sort_index(ascending=True)
実数を実数で割った剰余	math.remainder(x, x2)
全ての十六進数字	string.hexdigits
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
散布図に三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='^')
欠損値がある行を削除する	df.dropna(inplace=True)
線グラフの色をピンクに指定する	plt.plot(データ列x, データ列y, color='pink')
option: タンを使う	color = 'tan'
ラベンダーブラッシュ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ミディアムオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
リストのn番目の要素を消す	del aList[n]
指定した列の欠損値をxに設定する	df['列A'].fillna(x)
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
折れ線グラフの右三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
K-S検定を行う	scipy.stats.kstest(配列, 'norm')
データフレームの行を範囲指定して抽出する	df[start:end]
赤い点線を使ってデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
カテゴリデータ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
折れ線グラフをトマト色として描画する	plt.plot(データ列x, データ列y, color='tomato')
シアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
濃いシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
option: グラフの色をアイボリーにする	color = 'ivory'
文字列内にひとつでも英数字があるかどうか	any(c.isalnum() for c in s)
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
データフレームの先頭5行を見る	df.head(5)
文字列の後ろから余分な改行を除く	s.rstrip()
辞書から項目名で指定されたエントリをポップする	aDict.pop(key)
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
数値を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
タブを見る	'\t'
データフレームのある列の値がxより小さい行を取り出す	df[df['列A'] < x]
ゼロ埋めされた行列を作る	np.zeros(行数, 列数)
黄色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
余弦の逆数を求める	math.acos(x)
リストを配列にする	np.array(aList)
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
縦棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
データフレームが重複している	df.duplicated()
データフレームの選択したカラムの欠損値をその最小値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
ディープスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: ダークグレー色を用いる	color = 'darkgray'
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
option: マーカーをポイントに変更する	marker = '.'
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
散布図に▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
インディゴ色でヒストグラムを描画する	plt.hist(データ列, color='indigo')
実行時の標準出力の出力先がターミナルか確認する	sys.stdout.isatty()
データシリーズにおいてどの値が頻出か調べる	ds.mode()
実数の正弦の逆数	math.asin(x)
配列の累積積	np.cumprod(aArray)
黒い上三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
折れ線グラフのクロスマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
集合から任意の要素を取り除く	aSet.pop()
折れ線グラフの丸印を赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
列名を指定してデータフレームを全ジョインする	pd.merge(df, df2, on='列A', how='outer')
ヒストグラムをオレンジレッド色として描画する	plt.hist(データ列, color='orangered')
option: グラフの色をシャルトリューズにセットする	color = 'chartreuse'
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
日付時刻データがタイムスタンプデータより遅いか調べる	aDatetime > aDatetime2
棒グラフを青紫色として描画する	plt.bar(データ列x, データ列y, color='violet')
文字列の大きさ	len(s)
nが一桁の整数かどうか調べる	-9 <= n <= 9
データフレームのあるカラムの月	df['列A'].dt.month
イテラブルとイテラブルの散布図に大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X')
ローングリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
オブジェクトがあるクラスか	isinstance(obj, クラス)
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
データフレームのある列を削除してみる	df.drop('列A', axis=1)
文字列内にひとつでもASCII文字が含まれるかどうか	any(c.isascii() for c in s)
データ列のUNIX秒をタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
棒グラフをライトスチールブルー色を使って描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
集合にシーケンスを追加更新する	aSet.update(iterable)
リストをn個にビン分割する	pd.cut(aList, n)
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
コレクションを使う	import collections
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
データフレームから5行、ランダムサンプリングする	df.sample(5)
黄緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
配列間の相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
縦棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
数式の数値を求める	float(e)
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
行列の行ごとの標準偏差	np.std(aArray, axis=1)
棒プロットの色をrgbに変更する	plt.bar(ラベル列, データ列, color=rgb)
文字列を部分文字列で分けたときの残りの文字列を求める	s.partition(sub)[-1]
t-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
改行を取り除いてファイルを一行ずつ読む	f.readline()
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
散布図に左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
ふたつの列からグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
指定した列の中に存在する文字列と文字列の数を数える	df['列A'].isin([value, value2]).sum()
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
option: グラフの色をダークマゼンタにセットする	color = 'darkmagenta'
本日が月曜日	datetime.datetime.today().weekday() == 0
リストが空か確認する	len(aList) == 0
黒いバツマーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ユーザの入力を整数として受け取る	int(input())
トマト色でヒストグラムを描画する	plt.hist(データ列, color='tomato')
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: エラーを無視するように設定する	errors = 'ignore'
option: グラフの線の種類を一点鎖線に設定する	linestyle = 'dashbot'
ダークカーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
日付時刻データが月曜日かどうか調べる	aDatetime.weekday() == 0
ヒストグラムの色をハニーデューに変更する	plt.hist(データ列, color='honeydew')
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
データフレームのカラムの偏差値を求める	50 + 10 * scipy.stats.zscore(df['列A'])
パープル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
nがn2の倍数でない	n % n2 != 0
ヒストグラムをブランチドアーモンド色を用いて描画する	plt.hist(データ列, color='blanchedalmond')
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
折れ線グラフのポイント印を黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームを関数の値でグループ化し、記述統計量を計算する	df.groupby(関数).describe()
行列の平均を求める	np.mean(aArray)
ヒストグラムをネイビー色を用いて描画する	plt.hist(データ列, color='navy')
列を文字列に変換して連結する	''.join(map(str, iterable))
nの8進数表記を使う	oct(n)
行列の計算を行う	import numpy as np
数列とイテラブルの散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: チョコレート色を使用する	color = 'chocolate'
配列の最頻値を算出する	mode, count = scipy.stats.mode(配列)
データフレームのあるカラムの欠損値を直後の値に変更する	df['列A'].fillna(method='bfill')
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
変数が0に近づくときの数値の極限値を求める	sympy.limit(e, z, 0)
option: 大バツマーカーを用いる	marker = 'X'
ヒートマップでデータフレームの相関行列をグラフ化する	sns.heatmap(df.corr())
改行なしに二つの文字列をプリントする	print(value, value2, end='')
棒グラフをトマト色として描画する	plt.bar(データ列x, データ列y, color='tomato')
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
日付時刻データをエポック秒にする	aDatetime.timestamp()
文字列の両端から空白を取り除く	s.strip()
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: コーンズシルクを使う	color = 'cornsilk'
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
ホットピンク色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
リストを引数として展開してプリントする	print(*aList)
option: 大バツマーカーを描画する	marker = 'X'
赤い下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
文字列から部分文字列を全て取り除く	s.replace(sub, '')
線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
データフレームの中に存在する文字列と文字列の合計を数える	df.isin([value, value2]).sum()
リストを昇順にソートする	sorted(aList, reverse=True)
option: フォントの色をプラムに設定する	color = 'plum'
非英数字が文字列中に含まれるかどうか調べる	any(not c.isalnum() for c in s)
セットを空集合にする	aSet.clear()
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
option: ▲印を描画する	marker = '^'
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
キューをポップする	deq.pop()
折れ線グラフを実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid')
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
文字列を部分文字列で二分し前半の文字列を使う	s.partition(sub)[0]
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
実数が正か調べる	x > 0
文字列をセパレータで区切り、、列挙する	s.split(sep)
折れ線グラフの色をアクアに変更する	plt.plot(データ列x, データ列y, color='aqua')
折れ線グラフを色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
表データのあるカラムが何秒か知る	df['列A'].dt.second
フローラルホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
xが真か調べる	bool(x)
変数を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
本日をISO形式の文字列にする	datetime.datetime.today().isoformat()
黒い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: グラフの色をダークサーモンに指定する	color = 'darksalmon'
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
実数の逆双曲線正弦を算出する	math.asinh(x)
rgbの星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
昇順に組の要素を並べる	sorted(aTuple, reverse=True)
折れ線グラフの色を青に指定する	plt.plot(データ列x, データ列y, color='blue')
ベクトルの和を求める	aArray + aArray2
プラットホームがLinux	sys.platform.startswith('linux')
散布図に△マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
マップのコピー	dict(aDict)
散布図をクリムゾン色として描画する	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
ファイルパスをオープンして]、追加ストリームを使う	open(filepath, mode='a')
線グラフをブラック色として描画する	plt.plot(データ列x, データ列y, color='black')
散布図に三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='^')
プログラムの実行を正常に停止する	sys.exit(0)
折れ線グラフをターコイズ色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
データシリーズがどれだけ、分散しているか見る	ds.var()
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
データフレームの指定したデータ型の列名を列挙する	df.select_dtypes(型).columns
データフレームの指定したカラムのメディアンを求める	df['列A'].median()
丸マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='o')
rgbの四角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
オブジェクトは数値か調べる	isinstance(obj, (int,float))
キーが辞書上で未定義か調べる	key not in aDict
プラム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
あるカラムのカテゴリごとの平均値	df.groupby('列A').mean()
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
横軸を対数目盛に変更する	plt.xscale('log')
データシリーズの中に文字列とがいくつあるか数える	ds.isin([value, value2]).sum()
オリベドラブ色としてヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
文字列を文字リストに変換する	list(s)
アンティークホワイト色でヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
数式の因数分解を行う	sympy.factor(e)
データフレームのあるカラムのメディアンを計算する	df['列A'].median()
文字列リストにシーケンスを変換して、タブによって連結する	'\t'.join(map(str, iterable))
列のユニークな値の個数を見る	ds.nunique()
淡いピンク色にヒストグラムの色を設定する	plt.hist(データ列, color='lightpink')
自然数の最大公約数を求める	math.gcd(n, n2)
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
option: グラフの線の種類を実線に設定する	linestyle = 'solid'
アクア色を用いてヒストグラムを描画する	plt.hist(データ列, color='aqua')
青い一点鎖線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
一行、データフレームからランダムに抽出する	df.sample()
棒グラフを小麦色色を用いて描画する	plt.bar(データ列x, データ列y, color='wheat')
クラス分類をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
線グラフの色をライトスカイブルーにセットする	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームの先頭n行を抽出する	df.head(n)
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
表データのあるカラムの曜日は何日目か見る	df['列A'].dt.dayofweek
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データ列をn個に分割する	pd.cut(ds, n)
目盛り線	plt.grid(alpha=0.5)
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
ヒストグラムの色をラベンダーブラッシュに指定する	plt.hist(データ列, color='lavenderblush')
追加できるように既存のファイルパスを文字コードtextでオープンする]	open(filepath, mode='a', encoding=text)
折れ線グラフの色をペールグリーンにセットする	plt.plot(データ列x, データ列y, color='palegreen')
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
option: ダークスラテグレー色を用いる	color = 'darkslategray'
option: 印を左三角に変える	marker = '<'
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
option: モカシンを使う	color = 'moccasin'
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
既存のファイルパスをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
option: グレーを用いる	color = 'gray'
散布図をディムグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
折れ線グラフを色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
数値の変数にnを代入する	e.subs(z, n)
リストの文字列が最初に見つかるインデックス	aList.index(element)
n進文字列をバイト列にする	int(s, n).to_bytes(length=bytesize, byteorder='big')
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
ValueMapでまとめてデータフレームの値を置き換える	df.replace(ValueMap)
表データを二つの列で小さい順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
グラフのデータラベルの位置を(x,y)にする	plt.legend(loc=(x, y))
ふたつの集合の共通部分	aSet.intersection(aSet2)
ファイルを開き]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
option: ダークバイオレット色を用いる	color = 'darkviolet'
青い一点鎖線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
２つの変数をカンマで区切ってプリントする	print(value, value2, sep=',')
数列とリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
日付時刻データの時刻	aDatetime.time()
データフレームを二つの列によってまとめたグループ	df.groupby(['列A', '列B'])
データフレームの選択したカラムを百の位で丸める	df[['列A', '列B']].round(-2)
日付データにn日分加算する	aDate + datetime.timedelta(days=n)
タイムスタンプデータの時間を使う	aDatetime.time()
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
リストをカンマ区切りで表示する	print(*aList, sep=',')
文字列中にひとつでも非小文字がある	any(not c.islower() for c in s)
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
option: 降順にする	ascending = False
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
青紫色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
赤い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='r')
データ列間のRMSEを算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
カウンタの文字列を列挙する	aCounter.keys()
棒グラフを淡い茶色色を用いて描画する	plt.bar(データ列x, データ列y, color='tan')
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
配列を等量で分割数nで分割する	pd.qcut(aArray, n)
辞書の値の一覧	aDict.values()
再帰エラーを防ぐ	sys.setrecursionlimit(1000000)
貝殻色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
両端キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
option: やわらかい青を使う	color = 'cornflowerblue'
リストの最初を除く	aList[1:]
配列から重複を除いた配列を作成する	np.unique(aArray)
プロットの背景色を暗くする	sns.set(style='darkgrid')
縦棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
折れ線グラフに四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s')
散布図の大バツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
縦棒グラフをダークブルー色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
変数について数式の積分を計算する	sympy.integrate(e, z)
ふたつの辞書を合体する	aDict | aDict2
データフレームの選択したカラムの中に文字列があるか調べる	df[['列A', '列B']].isin([value])
棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
散布図に黒い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
棒グラフをラベンダーブラッシュ色として描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
文字列に日本語が含まれる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
'A'列の値がxに等しい行を取り出す	df[df['列A'] == x]
option: グラフの色をレベッカパープルに変更する	color = 'rebeccapurple'
option: グラフの色を真紅にセットする	color = 'crimson'
スライドにプロットの使途を設定する	sns.set(context='talk')
ヒストグラムの色をライトコーラルに指定する	plt.hist(データ列, color='lightcoral')
データ列の推移を色付きの実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
プログラムの実行を異常停止する	sys.exit(1)
散布図を黒い星マーカーでプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
カラーパレットをパステル調にする	sns.set(pallete='pastel')
リストの最初を捨てる	aList[1:]
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
ファイルが存在するか調べる	os.path.exists(filepath)
ビン数nでリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図の星マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
日付データが日曜日か調べる	aDate.weekday() == 6
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
列をイミュータブルな集合にする	frozenset(iterable)
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
option: 色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
option: エクセルファイルシートの名前を設定する	sheet_name = ['A', 'B']
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
辞書の値に要素が含まれていないか調べる	element not in aDict.values()
浮動小数点数を十六進表記の文字列に変換する	x.hex()
ダークマゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: ラベンダー色を使う	color = 'lavender'
データフレームの選択したカラムの尖度	df[['列A', '列B']].skew()
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
配列を四分位数ごとに分割する	pd.qcut(aArray, 4)
ベクトル間の各要素の最大公約数	np.gcd(aArray, aArray2)
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
大文字・小文字を無視して正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
行列の転置行列を求める	aArray.T
2つの文字列は等しくない	s != s2
棒グラフをブラック色を用いて描画する	plt.bar(データ列x, データ列y, color='black')
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームのカラムの欠損値を直後の値で埋める	df['列A'].fillna(method='bfill')
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
ライトサーモン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
オブジェクトは浮動小数点数	isinstance(obj, float)
折れ線グラフの四角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
option: ナバホホワイト色を使う	color = 'navajowhite'
リストの末尾のn要素を捨てる	aList[:-n]
四分位数ごとにリストをビン分割する	pd.qcut(aList, 4)
データフレームの選択したカラムの中にある日付データと文字列の合計を求める	df[['列A', '列B']].isin([value, value2]).sum()
数列とデータ列の散布図をプロットして左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
縦棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
ヒストグラムの色をトマトに指定する	plt.hist(データ列, color='tomato')
option: クリムゾンにグラフの色を設定する	color = 'crimson'
option: データ型としてブール型を使う	dtype = np.int32
マップのキーと値を入れ替える	{v: k for k, v in aDict.items()}
データフレームから同じ行をドロップする	df.drop_duplicates(inplace=True)
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
データフレームのカラムを度数分布図にする	plt.hist(df[column])
x軸だけグリッド線	plt.grid(axis='x')
n進文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
二つのデータフレームを連結する	pd.concat([df, df2])
日付を使う	import datetime
ライトスチールブルーにヒストグラムの色をする	plt.hist(データ列, color='lightsteelblue')
疑似乱数を正規分布で発生させる	random.normalvariate(mu=0.5, sigma=0.2)
option: ダークオレンジ色を使用する	color = 'darkorange'
ダークサーモン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
2進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
実数が負の数か調べる	x < 0
ヒストグラムを描画し、ビンを指定する	plt.hist(データ列, bins=区関数)
散布図を青紫色として描画する	plt.scatter(データ列x, データ列y, color='violet')
線グラフをスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='springgreen')
折れ線グラフのダイアモンドマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
ヒストグラムを赤色を使って描画する	plt.hist(データ列, color='red')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
横軸の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
線グラフをティール色を用いて描画する	plt.plot(データ列x, データ列y, color='teal')
データフレームの指定したカラムの記述統計量	df['列A'].describe()
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
配列の最小値を求める	np.min(aArray)
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
青紫にヒストグラムの色を設定する	plt.hist(データ列, color='violet')
option: サドルブラウン色を用いる	color = 'saddlebrown'
小さい順にデータフレームを二つのカラムをキーにしてソートする	df.sort_values(by=['列A', '列B'], ascending=True)
複数のデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
折れ線グラフの色をライムにセットする	plt.plot(データ列x, データ列y, color='lime')
ブースティングとしてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
コロンで区切って２つの変数をプリントする	print(value, value2, sep=':')
ヒストグラムの色をライトシアンに指定する	plt.hist(データ列, color='lightcyan')
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
組を順番付けする	enumerate(aTuple)
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
全要素を０で初期化した3２ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int16)
option: タブを区切り記号で使う	sep = '\t'
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
option: ブラウン色を使用する	color = 'brown'
クラス分類を確率的勾配降下として行う	model = sklearn.linear_model.SGDClassifier()
乱数シードをnで初期化する	random.seed(n)
データシリーズの中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
折れ線グラフの▽マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
リストをナンバリングする	enumerate(aList)
rgbの星マーカーをリストとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストのn番目からn2番目までを取り出す	aList[n:n2]
標準入力を得る	sys.stdin
ダークオレンジ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
縦棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
データフレームの選択したカラムのNaNを第二四分位数に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
散布図の丸印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
データフレームの中に文字列と文字列があるか	df.isin([value, value2])
赤い一点鎖線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
折れ線グラフのクロスマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
指定したカラムの記述統計量	df['列A'].describe()
分類結果の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
データフレームの選択したカラムの欠損値を最大値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
折れ線グラフのクロスマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
xが一桁の正の数か	0 <= x <= 9
折れ線グラフに青い上三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
MSEを計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
文字をASCIIコードに変換する	ord(ch)
クラス分類の偽陽性を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
スクリプトファイルの絶対パス	os.path.abspath(__file__)
オリーブ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
オレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
ユーザが整数を入力する	int(input())
ある列のNaNを前の行の値で埋める	df['列A'].fillna(method='ffill')
文字列内にひとつでも英字が含まれるか調べる	any(c.isalpha() for c in s)
ファイルをSJISで開く]	open(filepath, encoding='shift_jis')
データシリーズの中に文字列があるか調べる	ds.isin([value])
線グラフの色をライトシアンに指定する	plt.plot(データ列x, データ列y, color='lightcyan')
双方向キューをタプルにする	tuple(deq)
列名を指定して二つのデータフレームをジョインする	pd.merge(df, df2, on='列A')
モジュールを検索するパスにを追加する	sys.path.append(dir)
作画を正方形にする	plt.axis('equals')
option: グラフの色をドジャーブルーにセットする	color = 'dodgerblue'
option: トマト色を使う	color = 'tomato'
行列の平均	np.mean(aArray)
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
二つの集合の対称差集合	aSet.symmetric_difference(aSet2)
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
データフレームを関数でグループ化し、要約統計量を求める	df.groupby(関数).describe()
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
整数nを二進文字列に変換する	bin(n)[2:]
スラグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
データ列の一意な値の個数	ds.nunique()
折れ線グラフの左三角印を黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
データ列の推移を折れ線グラフとして可視化する	plt.plot(range(len(データ列)), データ列)
記号計算ライブラリを使う	import sympy
イテラブルのイミュータブルな集合	frozenset(iterable)
データ列の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
JSONファイルのファイル入力を辞書にする	json.load(fin)
重複ありでデータフレームから10行をランダムにサンプリングする	df.sample(10, replace=True)
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
データシリーズを万の位で丸める	ds.round(-4)
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
句読点文字を全部求める	string.punctuation
option: 菱形印を描画する	marker = 'D'
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
ガンマ関数の値を求める	math.gamma(x)
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
データシリーズの欠損値を平均値で埋める	ds.fillna(ds.mean())
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
変数を青色でプリントする	print(f'\033[34m{value}\033[0m')
option: イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
ピアソンでデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
タイムスタンプデータが金曜日か確認する	aDatetime.weekday() == 4
散布図に青い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
列を10の位で丸める	df['列A'].round(-1)
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
本日が火曜日か確認する	datetime.datetime.today().weekday() == 1
イテラブルを変更不能な集合に変換する	frozenset(iterable)
回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
ナバホホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
カウンタの文字列を増やす	aCounter[element] += 1
リストの要素のみ出力する	print(*aList)
ディムグレー色としてヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
1行だけ標準入力から読む	sys.stdin.readline()
列の文字列長を列として求める	ds.str.len()
データフレームの相関行列を積率相関係数として求める	df.corr(method='pearson')
黒い菱形マーカーをリストとイテラブルの散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ローングリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
縦棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
縦棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: どの行もカラムの名前にしない	header = None
赤いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
ヒストグラムの色を珊瑚に設定する	plt.hist(データ列, color='coral')
nとn2の論理積	n & n2
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
集合＼集合	aSet.difference(aSet2)
option: 色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
CSVファイルを読む	pd.read_csv('file.csv', sep=',')
赤い菱形マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='r')
データシリーズの欠損値を平均値にセットする	ds.fillna(ds.mean())
option: グラフの色をインディゴに設定する	color = 'indigo'
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
ゼロ埋めされた符号なし８ビット整数型のベクトル	np.zeros(要素数, dtype=np.uint8)
データ列の折れ線グラフをバツ印を用いて描画する	plt.plot(データ列x, データ列y, marker='x')
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
データフレームの選択したカラムの欠損値をxに指定する	df[['列A', '列B']].fillna(x)
辞書順で二つの文字列を比較する	s < s2
データフレームの指定した列のNaNを最大値で埋める	df['列A'].fillna(df['列A'].max())
イテラブルとリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
L2ノルムを用いて正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
最大値・最小値で整数乱数を発生させる	random.randint(最小値, 最大値)
点線としてヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
まとめてデータフレームの列の名前を置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
option: マーカーを上三角に指定する	marker = '^'
方程式として数値の変数の解を求める	sympy.solve(e, z)
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
option: フォントの色を青緑に指定する	color = 'turquoise'
カウンタの上位を列挙する	aCounter.most_common(k)
option: 文字列の示すエンコーディングを使う	encoding = s
option: 改行コードをUNIXに変更する	newline = '\n'
ダークターコイズ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
ホットピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
マッピングのキーとその値を列挙する	aDict.items()
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
ヒストグラムの色を赤に指定する	plt.hist(データ列, color='red')
文字列を左トリムする	s.lstrip()
イテラブルとリストの散布図にrgbの丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
辞書から最後の項目をポップする	aDict.popitem()
ロージーブラウン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
データフレームの選択したカラムの平均値を求める	df[['列A', '列B']].mean()
データフレームの数値をまとめて丸める	df.round()
パレットトルコイズにヒストグラムの色を設定する	plt.hist(データ列, color='paleturquoise')
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
行列の要素ごとに加算する	aArray + aArray2
配列とリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
グラフの描画で暗く色を使う	sns.set(pallete='dark')
ファイルを全部、読む	f.read()
option: ライムグリーンにフォントの色を設定する	color = 'limegreen'
本日の曜日を整数で使う	datetime.datetime.today().weekday()
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
散布図の丸マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
行列の要素ごとの積	np.multiply(aArray, aArray2)
スタッキングとしてクラス分類を行う	sklearn.ensemble.StackingClassifier()
データシリーズを百の位で四捨五入する	ds.round(-2)
option: グラフの色をパールバイオレットレッドにする	color = 'palevioletred'
線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ロバスト推定を用いて回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
option: ダークレッドにグラフの色を設定する	color = 'darkred'
三つのデータフレームを縦方向に合体させる	pd.concat([df, df2, df3], axis=0)
多次元データをMSDで濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
文字列を走査しパターンにケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
配列のスカラー倍	aArray * n
データフレームの欠損値をその中央値で埋める	df.fillna(df.median())
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームのデータ型の一覧	df.dtypes
データフレームのNaNが含まれる部分を色付けする	df.style.highlight_null()
標準入力から1文字分読む	sys.stdin.read(1)
ヒストグラムのラインスタイルを点線に指定する	plt.hist(データ列, linestyle='dotted')
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
ファイルをEUCを用いて書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
データフレームの指定したカラムの平均値	df['列A'].mean()
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
青色としてヒストグラムを描画する	plt.hist(データ列, color='blue')
カウンタを多い順番に列挙する	aCounter.most_common()
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
データシリーズの空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
破線としてイテラブルの移り変わりをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
表の一部の列の相関行列をピアソンとして求める	df[['列A', '列B']].corr(method='pearson')
タイムスタンプデータにn日分、加算する	aDatetime + datetime.timedelta(days=n)
パープル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
option: 小さい順にする	ascending = True
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
キーが辞書に存在するか調べる	key not in aDict
散布図の三角印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
縦棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
実数の双曲線正弦	math.sinh(x)
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
四分位数で配列をビン分割する	pd.qcut(aArray, 4)
ライトイエロー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
ゼロ埋めした整数型の行列	np.zeros(要素数, dtype=np.int)
option: ダークバイオレット色を使用する	color = 'darkviolet'
線グラフを色付きの破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
句読点文字を全部使う	string.punctuation
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
データフレームの一部のカラムの不偏分散を計算する	df[['列A', '列B']].var(ddof=1)
データフレームの中にいくつNaNがあるかカウントする	df.isna().sum()
ミントクリーム色でヒストグラムを描画する	plt.hist(データ列, color='mintcream')
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='gray')
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='grey')
棒グラフをイエローグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
棒グラフをラベンダーブラッシュ色を使って描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
要素一つの組を作る	(element,)
タプルをnからナンバリングする	enumerate(aTuple, start=n)
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
部分文字列が文字列中に含まれない	sub not in s
昇順にリストの要素を並べる	sorted(aList, reverse=False)
データフレームとデータフレームの列を横方向に合体させる	pd.concat([df, ds], axis=1)
縦棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
option: フォントの色をダークシアンに変更する	color = 'darkcyan'
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
最小値でデータフレームの欠損値を補完する	df.fillna(df.min())
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
半透明の破線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
数式の変数に数値を代入する	e.subs(z, e2)
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
値が集合に含まれないか確認する	element not in aSet
option: 印を右三角に変更する	marker = '>'
mathをインポートする	import math
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
ファイルからバイナリストリームを開いて]、fとする	f = open(filepath, mode='rb')
データフレームをカンマ区切り形式にSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
グラフをスライド用に変更する	sns.set(context='talk')
データフレームの列をヒストグラムにする	plt.hist(df[column])
折れ線グラフを使ってデータ列の推移を描画する	plt.plot(range(len(データ列)), データ列)
折れ線グラフでイテラブルを図示する	plt.plot(データ列x, データ列y)
現在の日付	datetime.date.today()
データ列を横に並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
紺色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: フォントの色を淡いピンク色に設定する	color = 'lightpink'
表示できる最大列数を変更する	pd.set_option('display.max_columns', n)
データフレームから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
文字列の中の正規表現によるマッチを使う	re.findall(pattern, s)
n個にデータフレームの中の列を等量でビンニングする	pd.qcut(df[col], n)
グラフの見栄えをデフォルトでイイ感じに設定する	sns.set()
をPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
折れ線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategrey')
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
自然数の順列の総数	math.perm(n)
データフレームの内である列に重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
アイボリー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
データフレームをある列によって昇順にソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
日付データを文字列でフォーマットして文字列にする	"aDate.strftime(""%d/%m/%y"")"
横棒グラフを赤色として描画する	plt.barh(データ列x, データ列y, color='red')
ペアリストpairsからカウンタを作成する	collections.Counter(dict(pairs))
ファイルからバイナリストリームを開いて]fとする	f = open(filepath, mode='rb')
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
option: グレー色を用いる	color = 'grey'
タプルの先頭を取り除く	aTuple[1:]
nがn2で割り切れないか調べる	n % n2 != 0
データフレームをある列によって並べる	df.sort_values(by='列A')
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
option: ダークグレーにグラフの色を設定する	color = 'darkgrey'
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
データフレームの列を指定して重複を除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
折れ線グラフに丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
変数について数式を微分する	sympy.diff(e, z)
文字列を部分文字列で二分し後半の文字列を使う	s.partition(sub)[-1]
ファイルを書き込み用に文字コードtextとして開く]	open(filepath, mode='w', encoding=text)
配列の分散	np.var(aArray)
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
option: ケースを無視する	flag = re.IGNORECASE
配列をビン分割する	pd.cut(aArray, aList)
文字列が無限に繰り返すイテラブルを得る	itertools.repeat(element)
文字列を改行で区切る	s.splitlines()
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
ヒストグラムの色をダークゴールデンロッドに変更する	plt.hist(データ列, color='darkgoldenrod')
option: マーカーの色をタンにする	markerfacecolor = 'tan'
データシリーズのどの値が頻出か見る	ds.mode()
データフレームの指定したカラムを小数点以下n桁で丸める	df['列A'].round(n)
散布図に下三角印を使用する	plt.scatter(データ列x, データ列y, marker='v')
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームのあるカラムをインデックスにする	df.set_index('列A', inplace=True)
空の辞書	{}
論文用にプロットを設定する	sns.set(context='paper')
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
文字列がリストの要素でない	element not in aList
散布図に丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
第2コマンド引数を知る	sys.argv[1]
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
カラーコードを使って折れ線グラフの色を変更する	plt.plot(データ列x, データ列y, color='#800080')
カーキ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
浮動小数点数の常用対数	math.log10(x)
ネイビーにヒストグラムの色を設定する	plt.hist(データ列, color='navy')
オブジェクトは集合クラスのインスタンスか調べる	isinstance(obj, set)
変数を定義する	x = n
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
パターンを前もって複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
option: NaNは例外を投げる	nan_policy = 'raise'
棒グラフをサンディーブラウン色として描画する	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームがどの程度、分散しているか確認する	df.var()
ファイルから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
データ列の推移を折れ線グラフを用いて可視化する	plt.plot(range(len(データ列)), データ列)
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
文字列の開始位置先に部分文字列が含まれる	s.find(sub, start) != -1
実数を実数で割った剰余を算出する	math.remainder(x, x2)
線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
option: セパレータを文字列にする	sep = s
散布図をペルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='peru')
実数の逆余弦	math.acos(x)
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
リストと配列についての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
コーンフラワーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
option: フォントの色をフクシアにセットする	color = 'fuchsia'
ゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
散布図をブラウン色として描画する	plt.scatter(データ列x, データ列y, color='brown')
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
ベージュ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
ベクトルは何次元か調べる	aArray.ndim
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
変数を太文字でプリントする	print(f'\033[1m{value}\033[0m')
配列の要素数	aArray.size
データフレームの最後100行を抽出する	df.tail(100)
option: グラフの色を赤に指定する	color = 'red'
変数を紫色にする	f'\033[35m{value}\033[0m'
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
データシリーズの文字列をNaNにする	ds.replace(値, np.nan)
散布図に四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
タプルの先頭を捨てる	aTuple[1:]
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
横棒グラフをアリスブルー色として描画する	plt.barh(データ列x, データ列y, color='aliceblue')
データフレームを表示するとき、行数を変更する	pd.set_option('display.max_rows', n)
FIXME:カテゴリーデータを出現頻度順に整列する	df['列A'].value_counts().sort_index().index
横棒グラフをインディゴ色を使って描画する	plt.barh(データ列x, データ列y, color='indigo')
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
データフレームの一部のカラムの中に存在する文字列と文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
シーケンスから両端キューを作る	collections.deque(iterable)
データフレームを並べ、、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
組中の最初の文字列を探す	aTuple.index(element)
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
マッピングのコピーを作る	aDict.copy()
フォーマットとして列をPandasの日付型にする	pd.to_datetime(df['列A'], format='%Y-%m-%d')
リストとリストを連結する	aList + aList2
BOM付きでファイルパスをオープンする]	open(filepath, encoding='utf_8_sig')
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフの色をシャルトリューズに指定する	plt.plot(データ列x, データ列y, color='chartreuse')
散布図の上三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
リストと配列の散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームの一部のカラムの中にいくつ文字列があるかカウントする	df[['列A', '列B']].isin([value]).sum()
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
リストと数列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
折れ線グラフの四角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
option: ホワイトスモーク色を使う	color = 'whitesmoke'
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
データフレームの指定したカラムの最頻値を求める	df['列A'].mode()
option: アリスブルーにグラフの色を設定する	color = 'aliceblue'
折れ線グラフの四角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
辞書のエントリ数	len(aDict)
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
散布図でデータフレームを図示して、カテゴリ別にマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
表の行の名前の一覧	df.index
データ列の各データ値の出現数を求める	ds.value_counts()
整数nは配列のどれか	n in aArray
リストを引数として展開して表示する	print(*aList, sep=',')
nを16進文字列に変換する	hex(n)[2:]
ヒストグラムの色を貝殻に指定する	plt.hist(データ列, color='seashell')
データフレームのあるカラムの値がxより小さい行を抽出する	df[df['列A'] < x]
option: ダイアモンド印を使う	marker = 'D'
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
データフレームのstart行目からend行目まで取り出す	df[start:end]
パターンを事前にASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームの選択した列の欠損値をモードで埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
リストをn回、連結する	aList * n
実数以上の最小の整数	math.ceil(x)
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
破線でヒストグラムをプロットする	plt.hist(データ列, linestyle='dashed')
option: ホワイトにグラフの色を設定する	color = 'white'
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
インディアンレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
散布図をクロスマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
リストを文字列リストに変換して、部分文字列を用いて一つにする	sub.join(map(str, iterable))
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
オブジェクトをイテラブルに変換する	iter(obj)
データフレームをCSVファイルにBOM付きで保存する	df.to_csv('file.csv', encoding='utf_8_sig')
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
正則化付き線形モデルを作る	model = sklearn.linear_model.ElasticNet()
option: ミントクリーム色を用いる	color = 'mintcream'
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
option: マーカーの大きさを変更する	markersize = 2.0
配列とリストについての散布図にrgbの右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横棒グラフをライトブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightblue')
ヒストグラムをダークカーキ色を用いて描画する	plt.hist(データ列, color='darkkhaki')
行列演算をする	import numpy as np
文字列がタプルに含まれる	element in aTuple
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
K最近傍法としてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
縦棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
横棒グラフをチョコレート色として描画する	plt.barh(データ列x, データ列y, color='chocolate')
日付時刻データが土曜日	aDatetime.weekday() == 5
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
option: グラフの色をターコイズに設定する	color = 'turquoise'
ふたつの列を組み合わせてグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
浮動小数点数の最小値	sys.float_info.min
option: 小麦色色を使う	color = 'wheat'
配列が何次元か調べる	aArray.ndim
option: ライムグリーンを用いる	color = 'limegreen'
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
線グラフを半透明の点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
ライム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
データフレームの複数の列を除く	df.drop(['列A', '列B'], axis=1, inplace=True)
データフレームの選択したカラムの中の未入力値の合計を数える	df[['列A', '列B']].isna().sum()
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
日付データをタプルに変換する	aDate.timetuple()
ファイルパスの拡張子を使う	os.path.splitext(filepath)[1].lstrip('.')
option: シルバーにフォントの色を設定する	color = 'silver'
実数の天井を計算する	math.ceil(x)
線グラフの色をイエローグリーンに指定する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームの最初	df.head()
辞書に別のタプルのエントリを更新する	aDict.update(aDict2)
数値をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
実数を小数点以下第一位で丸める	round(x, 1)
データフレームのあるカラムのタイムゾーンを東京に設定する	df['列A'].tz_convert('Asia/Tokyo')
折れ線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
折れ線グラフのポイント印の線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ヒストグラムをサンディーブラウン色として描画する	plt.hist(データ列, color='sandybrown')
実数から整数を減算する	x - y
縦棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
データシリーズをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
散布図をスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='slateblue')
列と列を連結する	itertools.chain(iterable, iterable2)
紺碧色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
辞書から最後の項目を取り出す	aDict.popitem()
日付時刻データは日付時刻データと同時か調べる	aDatetime == aDatetime2
黒いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
リストと数列の散布図を描画してその大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
散布図のバツマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
ネイビー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
ミディアムスプリンググリーン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
変数を黄色で表示できる文字列にする	f'\033[33m{value}\033[0m'
データシリーズの中にいくつNaNが含まれるか調べる	ds.isna().sum()
ニューラルネットで回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
stringをインポートする	import string
n2がn以上かつn3以下か	n <= n2 and n2 <= n3
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgrey')
カウンタからゼロカウントを取り除く	+aCounter
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データシリーズの秒	ds.dt.second
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
時計回りに円プロットを描画する	plt.pie(データ列, startangle=90, counterclock=False)
データフレームの選択したカラムの値をValueMapでまとめて置換する	df[['列A', '列B']].replace(ValueMap)
ある列でデータフレームをまとめたグループを使う	df.groupby('列A')
データフレームを表示するとき、ヘッダー行を左寄せにする	pd.set_option('colheader_justify', 'left')
option: バッファリングのサイズをする	buffering = 4096
縦棒グラフをダークシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
補足の場所を(x,y)に変更する	plt.legend(loc=(x, y))
nにn2をかけた値をnに代入する	n *= n2
入力から２つの文字列値を読む	A, B = map(str, input().split())
オプションで出力先を標準エラーに設定する	file = sys.stderr
文字列の両端から部分文字列を取り除く	s.strip(sub)
データ列の平方根平均二乗誤差を計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
リストとイテラブルの散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
配列とリストについて散布図をプロットしてマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
変数名をキーとしてマップ	dict(name=element)
nの8進表記	oct(n)
折れ線グラフをプロットして、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: フォントの色をペールグリーンに設定する	color = 'palegreen'
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
インディゴ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
option: 書き込みモードを使う	mode = 'w'
グラフで使う横軸のラベルを設定する	plt.xlabel('x軸ラベル')
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: アリスブルーを使う	color = 'aliceblue'
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
ある列の文字列に部分文字列が含まれる行を抽出する	df[df['列A'].str.contains(部分文字列)]
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
二つの集合が共通の要素を持たないかどうか調べる	aSet.isdisjoint(aSet2)
あるカラムをドロップしてみる	df.drop('列A', axis=1)
リストとリストについて散布図を描画して丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
要素ひとつのりスト	[element]
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
データフレームを二つの列の値によってまとめたグループを見る	df.groupby(['列A', '列B'])
整数nがセットのひとつ	n in aSet
nがn2より小さいか調べる	n < n2
option: フォントの色を赤に設定する	color = 'red'
nが一桁の整数か	0 <= n <= 9
データフレームを関数のカテゴリによってグループ化する	df.groupby(関数)
折れ線グラフの色をイエローグリーンにする	plt.plot(データ列x, データ列y, color='yellowgreen')
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
オブジェクトは整数クラスか調べる	isinstance(obj, int)
データフレームの選択したカラムの記述統計量を見る	df[['列A', '列B']].describe()
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
文字列の終了位置以前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
ナバホホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
タプルの末尾を除く	aTuple[:-1]
改行で区切って二つの文字列を表示する	print(value, value2, sep='\n')
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
組をn倍する	aTuple * n
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
モカシン色としてヒストグラムを描画する	plt.hist(データ列, color='moccasin')
nが無限に続く数列	itertools.repeat(n)
散布図の丸印を青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
縦棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
option: グラフの色を赤に変更する	color = 'red'
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
アクアマリン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
右三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='>')
option: アクアにフォントの色を設定する	color = 'aqua'
赤いクロスマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
日付時刻データが日曜日か確認する	aDatetime.weekday() == 6
改行文字	'\n'
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
データフレームをグループ化し、個数を求める	df.groupby('列A').count()
上限のある両端キュー	collections.deque(maxlen=n)
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
option: ダークオレンジを用いる	color = 'darkorange'
深紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
option: スラグレーを使う	color = 'slategray'
散布図のポイントマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
文字列が全て数値	s.isnumeric()
option: アイボリー色を用いる	color = 'ivory'
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
昨日の日付を見る	datetime.date.today() - datetime.timedelta(days=1)
ビスク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
option: アスキー文字に限定する	flag = re.ASCII
Pythonパスのリストを知る	sys.path
グラフをプレゼンに設定する	sns.set(context='talk')
データフレームをある列を用いてソートする	df.sort_values(by='列A')
散布図をペールグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegreen')
文字列を新しい文字列によって置き換える	s.replace(sub, newsub)
棒グラフを耐火レンガ色を使って描画する	plt.bar(データ列x, データ列y, color='firebrick')
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
option: シスル色を使う	color = 'thistle'
棒グラフの色を深紅にする	plt.bar(データ列x, データ列y, color='crimson')
指定したカラムの標本分散を算出する	df['列A'].var(ddof=0)
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
文字列中の部分文字列を文字列に全部置き換える	s.replace(sub, newsub)
文字列の開始位置と終了位置の間に部分文字列が存在する	s.find(sub, start, end) != -1
偽	False
線グラフの色をサドルブラウンに指定する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームの列をリネームする	df.rename(columns={'列A': '列a', '列B': '列b'})
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
option: 色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
option: ゲインズボロ色を使う	color = 'gainsboro'
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
列を文字列に変換して、カンマで結合する	','.join(map(str, iterable))
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
空のリスト	[]
ミディアムスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumslateblue')
縦棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
ヒストグラムをベージュ色を使って描画する	plt.hist(データ列, color='beige')
nの桁数	len(str(n))
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
カウンタの積集合	aCounter & aCounter2
横棒グラフをスカイブルー色を使って描画する	plt.barh(データ列x, データ列y, color='skyblue')
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの丸マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
文字列は全て識別子名か	s.isidentifier()
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
リストと数列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ふたつの列を組み合わせてグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
データフレームの指定したカラムの最頻値	df['列A'].mode()
データフレームの最頻値	df.mode()
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
散布図をミディアムスプリンググリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
オーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
表データが重複している	df.duplicated()
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
赤い▼印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームの選択したカラムの要約統計量を求める	df[['列A', '列B']].describe()
データを最大値と最小値を用いて揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
線グラフの色をコーンズシルクに指定する	plt.plot(データ列x, データ列y, color='cornsilk')
タプルの要素を並べる	sorted(aTuple)
折れ線グラフをシーグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='seagreen')
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
外れ値を除いたデータフレームのカラムの分散を計算する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
リストとイテラブルの散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
イテラブルの全順列を計算する	itertools.permutations(iterable)
棒グラフをペールグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='palegreen')
折れ線グラフの▼マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの標準偏差を求める	df.std()
nが一桁の数	-9 <= n <= 9
２つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
ビン数nで配列をビン分割する	pd.cut(aArray, n)
ヒストグラムの色をラベンダーに変更する	plt.hist(データ列, color='lavender')
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
option: 箱ヒゲ図を水平方向にする	vert = False
横棒グラフをネイビー色として描画する	plt.barh(データ列x, データ列y, color='navy')
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
リストを並べ変える	sorted(aList)
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
データフレームのカラムの調和平均を計算する	scipy.stats.hmean(df['列A'])
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
最初のカテゴリーを除外して表のある列をダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
データシリーズの欠損値を最小値に変更する	ds.fillna(ds.min())
option: グレーにグラフの色をセットする	color = 'gray'
データフレームをタブ区切り形式として保存する	df.to_csv('file.tsv', sep='\t')
データフレームの指定したカラムの標本分散を求める	df['列A'].var(ddof=0)
標準入力	sys.stdin
配列の最頻値を求める	mode, count = scipy.stats.mode(配列)
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
データフレームを複数の列によって並べる	df.sort_values(by=['列A', '列B'])
データフレームを列の値によってグループ化し、統計量を求める	df.groupby('列A').describe()
コーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
option: 線の種類を実線に設定する	linestyle = 'solid'
マゼンタで文字列をプリントする	print(f'\033[35m{value}\033[0m')
棒グラフをオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orchid')
データフレームの複数の列をドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
指定したカラムの欠損値を最小値で補完する	df['列A'].fillna(df['列A'].min())
列を中央値でビンニングする	pd.qcut(ds, 2)
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
2次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
四分位数でリストをビン分割する	pd.qcut(aList, 4)
option: フクシアを用いる	color = 'fuchsia'
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
ヒストグラムの色を耐火レンガに変更する	plt.hist(データ列, color='firebrick')
コマンドの第二引数を知る	sys.argv[1]
ある列の値がxに等しく、かつ別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
集合を変更不能な集合にする	frozenset(aSet)
散布図に青い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームを十の位で四捨五入して整数型にする	df.round(-1).astype(int)
最小値でデータシリーズの欠損値を補う	ds.fillna(ds.min())
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
リストとリストについて散布図を描いて、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
星マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
マッピングの値の一覧	aDict.values()
自然数の階乗	math.factorial(n)
ピアソンの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
複数のシートをデータフレームとしてエクセルファイルからロードする	pd.read_excel('file.xlsx', sheet_name=[0, 1])
プロット中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
データフレームを表示するとき、折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='gray')
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームの全カラムの散らばりをグラフ化する	sns.pairplot(df)
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
ヒストグラムの色をターコイズに変更する	plt.hist(データ列, color='turquoise')
リストを順番付けする	enumerate(aList)
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
データフレームをに箱ひげ図を用いて可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
一点鎖線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列の開始位置以降が部分文字列で開始するかどうか調べる	s.startswith(sub, start)
データフレームの指定したカラムの欠損値を直後の値で埋める	df['列A'].fillna(method='bfill')
データフレームの指定したカラムの欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
ライム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
日付時刻データの日	aDatetime.day
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
カラムを標準化する	scipy.stats.zscore(df['列A'])
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgray')
option: 赤色を使う	color = 'red'
フローラルホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='floralwhite')
データフレームをある列によって昇順に並べる	df.sort_values(by='列A', ascending=True)
折れ線グラフの色をフォレストグリーンに変更する	plt.plot(データ列x, データ列y, color='forestgreen')
データフレームのカラムのn次モーメントを算出する	scipy.stats.moment(df['列A'], moment=n)
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
カテゴリデータを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ファイルから拡張子付きのファイル名を取り出す	os.path.basename(filepath)
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
option: パレットトルコイズを使う	color = 'paleturquoise'
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
線グラフをゴールド色を用いて描画する	plt.plot(データ列x, データ列y, color='gold')
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
横方向に複数のデータフレームをつなぐ	pd.concat([df, df2, df3], axis=1)
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフをペルー色を用いて描画する	plt.plot(データ列x, データ列y, color='peru')
ラベンダー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
グラフのx座標を対数に変更する	plt.xscale('log')
折れ線グラフの右三角印の色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
option: 欠損値も含める	dropna = True
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
データシリーズの下位25パーセント	ds.quantile(0.75)
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
データフレームの一部のカラムの歪み	df[['列A', '列B']].kurt()
三変数の最小値を算出する	min(x, y, z)
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
データフレームの中に含まれる日付データの数を数える	df.isin([value]).sum()
棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
データフレームの選択したカラムの欠損値を直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
棒グラフをシスル色として描画する	plt.bar(データ列x, データ列y, color='thistle')
リストを分割数nを使ってビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
有理数の分子	q.numerator
ファイルパスをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
nからn2の範囲を使う	range(n, n2)
ミッドナイトブルー色としてヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
横軸の目盛りを非表示にする	plt.xticks([])
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
組の先頭を使う	aTuple[0]
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub)
実数の仮数を求める	math.frexp(x)[0]
データフレームの列のユニークな値	df[col].unique()
黒いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
ヒストグラムの色を茶色に変更する	plt.hist(データ列, color='brown')
文字列を緑色にする	f'\033[32m{value}\033[0m'
データ列の移り変わりを一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図を丸マーカーで描く	plt.plot(データ列x, データ列y, marker='o')
やわらかい青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
パラメータが0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
表データのあるカラムは何時か見る	df['列A'].dt.hour
文字列を最後から空白で区切る	s.rsplit()
option: ペルー色を用いる	color = 'peru'
表をグループ化しある列に対し個数を求める	df.groupby('列A')['列B'].count()
リストを分割数nでビニングする	pd.cut(aList, n)
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
色名をからコードにする	matplotlib.colors.cnames[色名]
option: 色をアンティークホワイトにする	color = 'antiquewhite'
長さnのリストを作る	[0] * n
option: 線の種類を実線に指定する	linestyle = 'solid'
スライドにグラフの用途を設定する	sns.set(context='talk')
データフレームを百の位で丸める	df.round(-2)
ローングリーンにヒストグラムの色を指定する	plt.hist(データ列, color='lawngreen')
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
データフレームをソートし、、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
ヒストグラムの色をダークグリーンに指定する	plt.hist(データ列, color='darkgreen')
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
赤い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
指定した列の空文字をNaNに変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
よりランダムなランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
データシリーズの中のNaNの合計をカウントする	ds.isna().sum()
線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
小麦色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
日付データのデータシリーズを表データのインデックスにする	df.index = pd.DatetimeIndex(ds)
リストを黒色化する	f'\033[30m{value}\033[0m'
データシリーズの曜日が何日目か知る	ds.dt.dayofweek
ミディアムアクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
ベクトルの計算をする	import numpy as np
データフレームを関数の値でグループ化し、記述統計量を求める	df.groupby(関数).describe()
単位正方行列を作る	np.identity(n)
データフレームから型リストデータ型の列を抽出する	df.select_dtypes(include=typeList)
折れ線グラフに▼マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
リストとリストについての散布図に赤い三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
option: グラフの色をイエローグリーンに指定する	color = 'yellowgreen'
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
ライトスカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
複数の列からグループ化し、平均値を算出する	df.groupby(['列A', '列B'], as_index=False).mean()
option: バイナリ書き込みモードを用いる	mode = 'wb'
赤い大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
二つの列によってデータフレームをソートする	df.sort_values(by=['列A', '列B'])
データシリーズが何年か調べる	ds.dt.year
日付データからn日分減算する	aDate - datetime.timedelta(days=n)
右三角マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
データフレームのある列をリストに変換する	df['列A'].values.tolist()
折れ線グラフの色をペールグリーンに変更する	plt.plot(データ列x, データ列y, color='palegreen')
ヒストグラムをやわらかい青色を用いて描画する	plt.hist(データ列, color='cornflowerblue')
データ列をビン数nで分割する	pd.cut(ds, n)
グラフをPNGファイルとして保存する	plt.savefig('foo.png')
ミントクリーム色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
ダークオレンジ色でヒストグラムを描画する	plt.hist(データ列, color='darkorange')
トマト色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
文字列が組の要素	element in aTuple
SJISで表計算ファイルファイルを読む	pd.read_csv('file.csv', encoding='shift_jis')
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
JSON文字列をデータにする	json.loads(b.decode('unicode-escape'))
散布図のバツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
クラスが名前付きタプルか確認する	issubclass(C, tuple)
あるカラムはどの程度、分散しているか確認する	df['列A'].var()
データフレームの最後n行を抽出する	df.tail(n)
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
最大長を指定して、両端キュー	collections.deque(maxlen=n)
データフレームの一部の列を丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
オブジェクトから属性を削除する	delattr(obj, プロパティ名)
データフレームを表示するとき表示できる列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
浮動小数点数が負の数か	x < 0
option: エンコーディングをUTF8に指定する	encoding = 'utf-8'
空白文字	' '
文字列全体が正規表現にASCII限定としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.ASCI)
ファイルパスから追加ストリームを開いて]、fとする	f = open(filepath, mode='a')
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
データフレームの相関行列をヒートマップで可視化する	sns.heatmap(df.corr())
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
数値の積分を算出する	sympy.integrate(e)
文字列を部分文字列で最後から区切る	s.rsplit(sub)
実数を文字列に変換する	str(x)
ヒストグラムをミディアムシアグリーン色として描画する	plt.hist(データ列, color='mediumseagreen')
ペルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='peru')
ファイルをオープンする]	open(filepath)
データシリーズの分位数	ds.quantile(パーセント/100)
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
線形モデルの回帰変数	model.coef_
option: レモンシフォンを使う	color = 'lemonchiffon'
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
文字列内にひとつでも数字があるか調べる	any(c.isdigit() for c in s)
縦棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
現在の時間を使う	datetime.date.today().hour
表データの列名を置き換える	df.columns = columns
ゴーストホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='ghostwhite')
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
エクセルから複数のシートを指定してデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームの指定したカラムを千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
組の合計値を求める	sum(aTuple)
ブラウン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
実数を切り下げて整数に変換する	math.floor(x)
実行時に標準出力がパイプか	not sys.stdout.isatty()
データフレームの一部のカラムを1000の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
データフレームの行を条件でフィルタする	df[(df['列A'] == x) & (df['列B'] == y)]
リストとリストの散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
タイムスタンプデータが火曜日	aDatetime.weekday() == 1
逆行列	np.linalg.inv(aArray)
aListn番目から要素をポップする	aList.pop(n)
ヒストグラムの色をスレートブルーにする	plt.hist(データ列, color='slateblue')
option: グラフの色をライムグリーンに変更する	color = 'limegreen'
リネン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
今日を文字列を用いてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データフレームを二つの列によって降順に破壊的に並べ直す	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
データシリーズが正規分布からどの程度歪んでいるか見る	ds.kurt()
データシリーズのNaNを最大値で埋める	ds.fillna(ds.max())
日付時刻データと日付時刻データの時間差を求める	aDatetime - aDatetime2
配列の推移を点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
配列とイテラブルの散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgrey')
行列の行列式を求める	np.linalg.det(aArray)
濃いシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
クリムゾン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
折れ線グラフの色を青紫に変更する	plt.plot(データ列x, データ列y, color='violet')
タプルをnから番号付けする	enumerate(aTuple, start=n)
散布図をミントクリーム色として描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データフレームを各列毎にグループ分けして、文字列というグループの個数を計算する	df.groupby(column).size()[s]
xが1もしくは2もしくは3に等しい	x == 1 or x == 2 or x == 3
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
ヒストグラムをナバホホワイト色を用いて描画する	plt.hist(データ列, color='navajowhite')
タプルの値数を得る	len(aDict)
データフレームを100の位で四捨五入して、整数型にする	df.round(-2).astype(int)
散布図をパパイヤウィップ色を用いて描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
option: ベクトルのデータ型を指定する	dtype = np.uint8
辞書の項目名とその値を列挙する	aDict.items()
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
ある列の文字列が部分文字列で終わらない行を抽出する	df[~ df['列A'].str.endswith(部分文字列)]
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームの指定した列の標本分散	df['列A'].var(ddof=0)
折れ線グラフに黒い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームをある列によってグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
指定した列のカテゴリで集計し、それぞれの個数を求める	df.groupby('列A').count()
デピンクにヒストグラムの色を設定する	plt.hist(データ列, color='deeppink')
データフレームを表示するとき、ヘッダー行を右寄せに指定する	pd.set_option('colheader_justify', 'right')
nが負の数か調べる	n < 0
スレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='slateblue')
rgbのポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
データフレームの不偏標準偏差	df.std()
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
折れ線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgrey')
折れ線グラフに赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
横棒グラフをピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='pink')
データフレームの一部のカラムのNaNを中央値で補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
ミディアムターコイズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
日付データの曜日を整数で求める	aDate.weekday()
列にシーケンスを続けたイテラブルを得る	itertools.chain(iterable, iterable2)
指定した列の欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
ふたつの集合のユニオン	aSet.union(aSet2)
プログラムのファイルの名前	sys.argv[0]
線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
レモンシフォン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
データフレームの選択したカラムの中にいくつ文字列があるか数える	df[['列A', '列B']].isin([value]).sum()
濃いシアン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
タプルのキーとその値を列挙する	aDict.items()
赤い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
縦棒グラフを貝殻色として描画する	plt.bar(データ列x, データ列y, color='seashell')
データフレームのあるカラムの曜日を使う	df['列A'].dt.weekday_name
行列の行ごとの分散を見る	np.var(aArray, axis=1)
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
ゼロ埋めされた３二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
データフレームをグループ化しある列に対し分散を計算する	df.groupby('列A')['列B'].var()
部分文字列が文字列の開始位置以降に存在しないかどうかテストする	s.find(sub, start) == -1
データフレームをグループ化し、ある列の要約統計量を求める	df.groupby('列A').describe()['列B']
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
原点から(小数点数,y)の距離	math.hypot(x, y)
ふたつの列でグループ化し合計を計算する	df.groupby(['列A', '列B'], as_index=False).sum()
データフレームのカラムをにバイオリン図として見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
空集合	set()
としてデータフレームの相関行列を算出する	df.corr(method='kendall')
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
配列の相関係数を計算する	scipy.stats.pearsonr(配列, 配列2)
文字列リストにイテラブルを変換してタブによって連結する	'\t'.join(map(str, iterable))
option: ミディアムパープルを使う	color = 'mediumpurple'
指定したカラムの値が未入力値	df['列A'].isna()
散布図をコーラル色を用いて描画する	plt.scatter(データ列x, データ列y, color='coral')
横棒グラフを濃いシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
データフレームの指定したカラムの分散	df['列A'].var()
ふたつのマッピングを合体する	aDict | aDict2
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
文字のASCIIコード	ord(ch)
棒グラフを貝殻色を用いて描画する	plt.bar(データ列x, データ列y, color='seashell')
データシリーズの文字列を欠損値にする	ds.replace(値, np.nan)
データフレームをグループ化してヒストグラムで描く	sns.histplot(df, x='列名', hue='カテゴリ名')
n個の要素があるリスト	[element] * n
option: ペルー色を使う	color = 'peru'
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
カーキ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
タイムスタンプデータがタイムスタンプデータより後ろか調べる	aDatetime > aDatetime2
データフレームの先頭5行	df.head(5)
赤い▲マーカーを配列と配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフを四角印で描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフに黒い▼印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
標準入力を	sys.stdin
日付データが日曜日	aDate.weekday() == 6
プロットのカラーパレットを暗くする	sns.set(pallete='dark')
散布図を珊瑚色で描画する	plt.scatter(データ列x, データ列y, color='coral')
指定したカラムのカテゴリで集計し、最小値を計算する	df.groupby('列A').min()
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
棒グラフの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
ホワイトスモーク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
データフレームのNaNを直前の値で補う	df.fillna(method='ffill')
データフレームのカラムの最頻値を使う	mode, count = scipy.stats.mode(df['列A'])
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
オブジェクトのクラスを調べる	type(obj)
データフレームの選択したカラムの文字列を未入力値に変換する	df[['列A', '列B']].replace(値, np.nan)
リストとデータ列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
組をリストにする	list(aTuple)
三自然数のGCD	math.gcd(n, n2, n3)
回帰分析をパーセプトロンとして行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
カウンタ同士で交差演算する	aCounter & aCounter2
データフレームから列名を複数指定して選択する	df[columns]
文字列リストを連結して一つの文字列にする	''.join(map(str, iterable))
データ列と配列について散布図を描画し、、マーカーを星にセットする	plt.plot(データ列x, データ列y, marker='*')
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
今日が水曜日	datetime.datetime.today().weekday() == 2
日付データをn分前にする	aDate - datetime.timedelta(minutes=n)
データフレームとしてCSVファイルを読む	pd.read_csv('file.csv', sep=',')
ヒストグラムの色をパールバイオレットレッドにする	plt.hist(データ列, color='palevioletred')
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
カウンタ同士でユニオン演算する	aCounter | aCounter2
nとn2の論理和を求める	n | n2
nからn2までの一つ置きの整数リスト	list(range(n, n2+1, 2))
option: インディアンレッドを使用する	color = 'indianred'
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
棒グラフをサーモン色を使って描画する	plt.bar(データ列x, データ列y, color='salmon')
データフレームを各列毎にグループ化し、、文字列というグループの個数を求める	df.groupby(column).size()[s]
データフレームの指定したカラムの中にいくつ欠損値があるか数える	df['列A'].isna().sum()
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
データ列とリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
実数を切り下げて整数にする	math.floor(x)
改行せずに2つの数値を表示する	print(value, value2, end='')
ヒストグラムをピーチパフ色として描画する	plt.hist(データ列, color='peachpuff')
データフレームをある列をキーにして昇順にソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
データフレームからn行、サンプリングする	df.sample(n)
配列の和	aArray + aArray2
nをn2で割った剰余を求める	n % n2
ゴールド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
フォレストグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
データフレームを各グループごとに色付けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
要素が全て初期値のベクトル	np.full(要素数, 初期値, dtype=np.int)
行列の値を使う	aArray[行番号, 列番号]
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
既存のベクトルを元にして全要素が0のベクトルを作成する	np.zeros_like(aArray)
外れ値に強い重回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
ラベル付きの円グラフをプロットする	plt.pie(データ列, startangle=90, labels=ラベル列)
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
浮動小数点数が整数か確認する	x.is_integer()
nとn2が等しいかどうか調べる	n == n2
option: フォントの色をスチールブルーにセットする	color = 'steelblue'
文字列を評価する	eval(s)
データフレームの指定したカラムの値をValueMapで全部置き換える	df['列A'].replace(ValueMap)
option: マーカーを大バツに設定する	marker = 'X'
縦棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
nをn2で割った剰余	n % n2
カウンタをシーケンスで更新する	aCounter.update(iterable)
カウンタの下位をリストとして得る	aCounter.most_common()[:-n-1:-1]
ダークオリーブグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
データフレームの最初5行を見る	df.head(5)
線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフの大バツ印の大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
リストの全ての要素をクリアにする	aList.clear()
三変数の最小値を求める	min(x, y, z)
データフレームの上5行	df.head(5)
文字列中の部分文字列の出現	s.count(sub)
逆順の両端キュー	reversed(deq)
文字列が文字列リストに存在するか調べる	s in aStringList
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
柱状図を描画し合計を1にする	plt.hist(データ列, density=True)
折れ線グラフを白色を用いて描画する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()//60
スライド用にグラフを設定する	sns.set(context='talk')
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
文字列の示すエンコーディングでファイルをオープンする]	open(filepath, encoding=s)
ミディアムパープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
TSVファイルとしてデータフレームを保存する	df.to_csv('file.tsv', sep='\t')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
ミディアムパープル色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
折れ線グラフの四角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ピアソンを使ってデータフレームの選択した列の相関行列を計算する	df[['列A', '列B']].corr(method='pearson')
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムの色をローングリーンにする	plt.hist(データ列, color='lawngreen')
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
双方向キューの末尾にイテラブルの要素を順に追加する	deq.extend(iterable)
nを八進数表現に変換する	oct(n)
マップからキーの値	aDict.get(key)
モジュールを検索するパス	sys.path
ダークシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
リストを縦軸、リストをx座標として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
option: 左三角印を使用する	marker = '<'
行列の列ごとの最小を求める	np.min(aArray, axis=0)
正規化されたヒストグラムを描く	plt.hist(データ列, density=True)
option: ネイビー色を使う	color = 'navy'
行列の行列積を使う	np.matmul(aArray, aArray2)
二次元タプルをフラット化する	sum(aTuple)
折れ線グラフのマーカーを右三角印にする	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データフレームをCSVファイルで保存する	df.to_csv('file.csv')
配列の標準偏差	np.std(aArray)
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
ファイルからストリームを読み込んでfileとする	file = open(filepath)
異なる列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
データ列を使う	import pandas as pd
ヒストグラムを描画して半透明ににする	plt.hist(データ列x, alpha=0.5)
指定した列の値がNaNか	df['列A'].isna()
データ列とリストの散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
赤い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データシリーズを百の位で丸める	ds.round(-2)
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
散布図をrgbの大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データでモデルを学習する	model.fit(説明変数, 目的変数)
配列の要素ごとの積	np.multiply(aArray, aArray2)
ダークカーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
option: 箱ひげ図に平均を加える	showmeans = False
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
グリッド線	plt.grid(linestyle='--')
オリーブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
配列のスピアマンの相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
ある列にリストの値が含まれるデータを抽出する	df[df['列A'].isin(リスト)]
散布図をパールバイオレットレッド色を使って描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
横棒グラフをカーキ色を用いて描画する	plt.barh(データ列x, データ列y, color='khaki')
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
小数点数の整数部	math.modf(x)[1]
多次元データを主成分分析を使ってパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
パラメータについて数値を微分する	sympy.diff(e, z)
アイボリー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
ファイルのフォルダ名	os.path.dirname(filepath)
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
nがn2と等しいか調べる	n == n2
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
紺碧色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
文字列をバイト列に変換する	bytes(s)
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
データフレームの中のカラムを分割数nでビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
リストの要素を逆順にする	aList[::-1]
数値のインテグラルを求める	sympy.integrate(e)
文字列のサフィックスが部分文字列かどうか調べる	s.endswith(sub)
文字列が組に含まれるか調べる	element in aTuple
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
option: 右三角印を加える	marker = '>'
二つの数値をカンマで区切ってプリントする	print(value, value2, sep=',')
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: マゼンタに色を設定する	color = 'magenta'
変数をアンダーライン付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
二つのデータフレームを異なる列をキーとして左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
ゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームから型リストで指定したデータ型の列のみ抽出する	df.select_dtypes(include=typeList)
マッピングから項目名の値をエラーなく得る	aDict.get(key, None)
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
マッピングのキーとそのエントリをペアとして取り出す	aDict.items()
エラーなくリストの文字列の位置を使う	aList.index(element) if element in aList else -1
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
色付きの点線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
nからn2までの整数リスト	list(range(n, n2+1))
データフレームの一部のカラムの中にある文字列の個数をカウントする	df[['列A', '列B']].isin([value]).sum()
数式のパラメータにnを代入する	e.subs(z, n)
option: 三2ビット整数型を使う	dtype = np.int16
散布図に赤い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ファイルからの読み込みストリームを求める	open(filepath)
日付時刻データの月	aDatetime.month
イテラブルからカウンタを作る	collections.Counter(iterable)
有理数の分母	q.denominator
リストとリストについて散布図を描き、、▲マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
横棒グラフをゴーストホワイト色として描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
商と余りを同時に計算する	divmod(x, y)
ヒストグラムの色をミディアムターコイズに変更する	plt.hist(データ列, color='mediumturquoise')
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
データフレームの選択したカラムの中に文字列と日付データがいくつあるかカウントする	df[['列A', '列B']].isin([value, value2]).sum()
ゴールド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
ゴールドにヒストグラムの色を指定する	plt.hist(データ列, color='gold')
真部分集合か判定する	aSet < aSet2
データフレームの中にが含まれるか調べる	df.isin([value])
文字列を走査し、パターンにケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
option: データ型を指定する	dtype = np.int32
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
整数nを二進数文字列に変換する	bin(n)[2:]
リストとデータ列の散布図を描画して、その大きさをnにする	plt.scatter(データ列x, データ列y, s=n)
データフレームの第三四分位数	df.quantile(0.75)
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
部分文字列を文字列中から探す	s.find(sub)
イテラブルとリストの散布図を描画して四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
大バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='X')
既存の行列を元に全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
リストをリストを境界値として分割する	pd.cut(aList, aList)
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategrey')
MSDで多次元データを濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
整数nがセットのいづれかかどうか調べる	n in aSet
データフレームの列をヒストグラムとしてプロットする	plt.hist(df[column])
xの小数点以下'2'桁の文字列に変換する	':.2f'.format(x)
option: フォントの色を黄色に設定する	color = 'yellow'
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
行列の列ごとの最大	np.max(aArray, axis=0)
データシリーズの欠損値をその中央値で補完する	ds.fillna(ds.median())
データフレームを二つの列の値でグループ化し要約統計量を求める	df.groupby(['列A', '列B']).describe()
サポートベクターマシンとして回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
分子割る分母	fractions.Fraction(分子, 分母)
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
茶色色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
半透明の点線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームに重複があるか見る	df.duplicated()
未入力値がある行を取り除く	df.dropna(inplace=True)
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
データフレームのある列をドロップしてみる	df.drop('列A', axis=1)
棒グラフをアリスブルー色として描画する	plt.bar(データ列x, データ列y, color='aliceblue')
データフレームの統計量	df.describe()
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
縦棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフの色をダークグレーにセットする	plt.plot(データ列x, データ列y, color='darkgrey')
プログラムの実行を正しく終了する	sys.exit(0)
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
赤い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフをダークカーキ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
二つの配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
折れ線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='gray')
ある列を小数点以下n桁で丸める	df['列A'].round(n)
ゴールド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
option: 大バツマーカーを加える	marker = 'X'
説明変数と目的変数で分類モデルを学習する	model.fit(説明変数, 目的変数)
淡いピンク色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
シエナ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
数値を太字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
option: フォントの色をライトグレーに設定する	color = 'lightgrey'
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
横棒グラフを黄緑色を用いて描画する	plt.barh(データ列x, データ列y, color='chartreuse')
マッピングのの一覧を得る	aDict.values()
x軸とy軸の比率を等しくする	plt.axis('equals')
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
散布図のバツ印の色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
option: ダークバイオレット色を使う	color = 'darkviolet'
リストを配列に変換する	np.array(aList)
リストと配列の散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
文字列を置き換える	s.replace(sub, newsub)
ヒストグラムの色を紺碧に指定する	plt.hist(データ列, color='azure')
日付時刻データの年数	aDatetime.year
二つのデータフレームを結合する	pd.merge(df, df2)
線グラフの色をブルーバイオレットにセットする	plt.plot(データ列x, データ列y, color='blueviolet')
浮動小数点数の逆正弦	math.asin(x)
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
ビン数nを用いて等量でデータ列をビニングする	pd.qcut(ds, n)
要素がマッピングの値に含まれていないかどうか	element not in aDict.values()
二つの文字列は同じでないか調べる	s != s2
option: スチールブルー色を使う	color = 'steelblue'
綺麗なグラフを描画する準備をする	import seaborn as sns
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
折れ線グラフを半透明の点線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データ列をヒストグラムにする	plt.hist(データ列)
散布図をダークスラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
スプリンググリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
赤い点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ひとつでも非大文字が文字列中にあるか調べる	any(not c.isupper() for c in s)
変数が無限大に近づく際の数値の極限値を算出する	sympy.limit(e, z, oo)
表データのあるカラムを日付データに変換し表データのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
データフレームの選択したカラムを整数に四捨五入する	df[['列A', '列B']].round()
赤い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
小数点数のアークタンジェント	math.atan(x)
プロットに凡例を加える	plt.legend(['凡例A', '凡例B'])
散布図のマーカーを三角印にする	plt.scatter(データ列x, データ列y, marker='^')
データフレームの一部のカラムの標本標準偏差	df[['列A', '列B']].std(ddof=1)
文字列を区切りで分割して、文字列リストにする	s.split(sep)
文字のASCIIコードを使う	ord(ch)
データフレームの欠損値を前の値に設定する	df.fillna(method='ffill')
ヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: ベクトルのデータ型を指定する	dtype = np.int16
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームの指定したカラムの欠損値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
配列とリストの散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
指定した列の値で集計しそれぞれの合計を求める	df.groupby('列A').sum()
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
データフレームの二つのカラムを並べてボックスチャートを用いて図示する	plt.boxplot([df['カラム'], df['カラム']])
棒グラフをグリーンイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='greenyellow')
nが1、もしくは2かテストする	n == 1 or n == 2
option: 耐火レンガ色を使う	color = 'firebrick'
文字列を黒色化する	f'\033[30m{value}\033[0m'
文字列が全て英数字かテストする	s.isalnum()
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
シアン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
option: フォントの色をオールドレースに設定する	color = 'oldlace'
xを浮動小数点数型に変換する	float(x)
データフレームのn行まで取り出す	df[:n]
線グラフのスタイルを一点鎖線に指定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
新しい文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
ライトスチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
数で実数を整数除算する	x // y
イテラブルを両端キューに変換する	collections.deque(iterable)
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
リストをビン分割する	pd.cut(aList, aList)
ファイルパスをバイナリ書き込み用にオープンする]	open(filepath, mode='wb')
データフレームのカラムを説明変数にする	説明変数 = df[['列名', '列名2']]
浮動小数点数が負	x < 0
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
ある列の値がx以上、y以下の行を抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
新しい文字列で正規表現にマッチした文字列を置き換える	re.sub(pattern, newsub, s)
既存の配列をベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
赤い△マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
何回まで再帰ができるかを知る	sys.getrecursionlimit()
日付データにn秒分、加える	aDate + datetime.timedelta(seconds=n)
ファイルからフォルダ名を使う	os.path.dirname(filepath)
データフレームの複数の列をドロップしてみる	df.drop(['列A', '列B'], axis=1)
option: ハニーデュー色を用いる	color = 'honeydew'
折れ線グラフをアクア色として描画する	plt.plot(データ列x, データ列y, color='aqua')
option: グラフの色をビスクに設定する	color = 'bisque'
ホワイトスモーク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
縦棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
散布図に星印を使用する	plt.scatter(データ列x, データ列y, marker='*')
バイナリモードでファイルをオープンする]	open(filepath, mode='rb')
組の末尾からn番目以前の部分を取り出す	aTuple[:-n]
重複ありでn行をランダムにデータフレームからサンプリングする	df.sample(n, replace=True)
option: グラフの色をオールドレースに設定する	color = 'oldlace'
タイタニックのデータセットからデータフレームをロードする	df = sns.load_dataset('titanic')
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
ピアソンを使ってデータフレームの相関行列を求める	df.corr(method='pearson')
ファイルのファイルサイズ	os.path.get_size(filepath)
クラス分類を確率的勾配降下を用いて行う	model = sklearn.linear_model.SGDClassifier()
ミディアムスレートブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
回帰モデルを当てはめる	model.fit(説明変数, 目的変数)
等間隔でn個にデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
option: ライトグリーン色を使う	color = 'lightseagreen'
データフレームの指定したカラムはどの程度分散しているか見る	df['列A'].var()
option: グラフの色をハニーデューに設定する	color = 'honeydew'
縦棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
実線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームをランダムサンプリングする	df.sample()
散布図を耐火レンガ色を用いて描画する	plt.scatter(データ列x, データ列y, color='firebrick')
ストリームからn文字、読み込む	f.read(n)
文字列を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
文字列を部分文字列で分割したときの後半の文字列を使う	s.partition(sub)[-1]
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
ベクトル間の要素ごとの最大公約数を調べる	np.gcd(aArray, aArray2)
変数をスワップする	x, y = y, x
データフレームの一部の列の中のNaNの合計をカウントする	df[['列A', '列B']].isna().sum()
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
ホットピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
配列から重複を除いた配列を作る	np.unique(aArray)
シーグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
データフレームのあるカラムの標本標準偏差	df['列A'].std(ddof=1)
リストとリストの散布図に赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームから同じ内容の行を削除する	df.drop_duplicates(inplace=True)
ひとつ飛ばしでタプルを取り出す	aTuple[::2]
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
'A'列の値がxに等しいデータを抽出する	df[df['列A'] == x]
ヒストグラムをペールグリーン色として描画する	plt.hist(データ列, color='palegreen')
データフレームのNaNを第二四分位数にセットする	df.fillna(df.median())
データフレームのあるカラムのNaNを最大値で置換する	df['列A'].fillna(df['列A'].max())
イテラブルの長さnの順列を求める	itertools.permutations(iterable, n)
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
日付データが火曜日か確認する	aDate.weekday() == 1
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
オブジェクトがタプルクラス	isinstance(obj, tuple)
折れ線グラフの菱形マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
散布図をリネン色として描画する	plt.scatter(データ列x, データ列y, color='linen')
集合から別の集合の要素を取り除く	aSet.difference_update(aSet2)
option: 追加モードに設定する	mode = 'a'
縦棒グラフを描画し、、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
縦棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
0からnまでの整数リストを作る	list(range(n+1))
ASCII限定として正規表現で文字列を分割する	re.split(pattern, s, flags=re.ASCI)
データフレームをグループ化し、ある列に対し最小値を求める	df.groupby('列A')['列B'].min()
オブジェクトは数値か確認する	isinstance(obj, (int,float))
線グラフをネイビー色を使って描画する	plt.plot(データ列x, データ列y, color='navy')
線グラフをサドルブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
入力から２つの文字列を読む	A, B = map(str, input().split())
option: 切片を算出しない	fit_intercept = False
option: 色をパパイヤウィップに指定する	color = 'papayawhip'
横棒グラフをロイヤルブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='royalblue')
変数名をキーとして辞書	dict(name=element)
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
クラス分類の予測精度を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: グレー色を使用する	color = 'grey'
改行なしで1行だけ標準入力から読む	sys.stdin.readline().rstrip()
option: ディムグレーにグラフの色を設定する	color = 'dimgrey'
グラフの色を淡くする	sns.set(pallete='muted')
データフレームのあるカラムを削除してみる	df.drop('列A', axis=1)
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
散布図をネイビー色を用いて描画する	plt.scatter(データ列x, データ列y, color='navy')
青い破線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
散布図をrgbの左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: 紺色を使う	color = 'darkblue'
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの▲印の色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
二つの列によってデータフレームを集約し、、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
ヒストグラムの色をホワイトスモークにセットする	plt.hist(データ列, color='whitesmoke')
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
データフレームの選択したカラムの母標準偏差	df[['列A', '列B']].std(ddof=0)
option: 色をミディアムブルーに変更する	color = 'mediumblue'
浮動小数点数を小数点以下で四捨五入する	round(x, n)
本日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
ファイルからストリームを読み込んで、fileとする	file = open(filepath)
文字列の開始位置から終了位置までの範囲で部分文字列の登場を数える	s.count(sub, start, end)
折れ線グラフをスレートブルー色を使って描画する	plt.plot(データ列x, データ列y, color='slateblue')
文字列を記号にして、パラメータにする	z = sympy.Symbol(s)
スクリプト名	sys.argv[0]
データフレームの歪度	df.kurt()
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
ダークスレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
配列とリストをチェインする	itertools.chain(iterable, iterable2)
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
データ列をn個に等間隔で分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
ひとつでも非数字が文字列中にあるかテストする	any(not c.isdigit() for c in s)
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
option: 印をバツに変える	marker = 'x'
option: グラフの色をシスルに設定する	color = 'thistle'
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
縦棒グラフをホットピンク色として描画する	plt.bar(データ列x, データ列y, color='hotpink')
縦棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
集合の要素が別の集合に含まれる	aSet.issubset(aSet2)
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
数値を赤色にする	f'\033[31m{value}\033[0m'
配列の要素ごとの積を算出する	np.multiply(aArray, aArray2)
範囲指定してデータフレームの行を抽出する	df[start:end]
書式をargsを引数としてフォーマットする	formatText.format(*args)
nがn2より大きいかどうか調べる	n > n2
ヒストグラムをライトゴールドロディイエロー色として描画する	plt.hist(データ列, color='lightgoldenrodyellow')
ファイルを改行なしで一行ずつ読み込む	f.readline()
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
赤い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
ファイルを一行ずつ読み込む	f.readline()
配列の分布を図示する	plt.scatter(データ列x, データ列y)
リストとデータ列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
新しい線形回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
テキストファイルファイル名がか調べる	filename.endswith('.txt')
year年month月day日hour時のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データ列とデータ列についての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
タプルの値を関数に適用した結果でソートする	sorted(aTuple, key=func)
ファイルがないかどうか	not os.path.exists(filepath)
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
シスル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
横棒グラフを青緑色として描画する	plt.barh(データ列x, データ列y, color='teal')
データフレームのあるカラムの尖度を求める	df['列A'].skew()
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
ダークターコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームの一部のカラムの第一四分位数	df[['列A', '列B']].quantile(0.25)
表データを用いる	import pandas as pd
option: ダーク・スラテグレー色を用いる	color = 'darkslategrey'
黒い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
青いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
散布図の星マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームの選択した列の中に文字列と文字列がいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
リストの末尾から要素を取り除く	aList.pop()
データフレームのあるカラムの中に文字列が存在するかどうか調べる	df['列A'].isin([value])
リストとイテラブルについて散布図を描き、、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
nのn2乗を求める	n ** n2
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
option: オリーブ色を用いる	color = 'olive'
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
縦棒グラフをフォレストグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='forestgreen')
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
日付データが日付データと同時か	aDate == aDate2
一番左のを除いたデータフレーム	df[df.columns[1:]]
コーンズシルク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
双方向キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
ブルーバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
淡い茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
データシリーズの第一四分位数	ds.quantile(0.25)
今日が火曜日か	datetime.datetime.today().weekday() == 1
option: グラフの色をインディゴに変更する	color = 'indigo'
データフレームをグループ化し、個数を算出する	df.groupby('列A').count()
集合を空にする	aSet.clear()
文字列の中の複数行対応としてパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
散布図に黒い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームから同じ内容のデータを破壊的に削除する	df.drop_duplicates(inplace=True)
散布図のマーカーを四角印にする	plt.scatter(データ列x, データ列y, marker='s')
整数乱数の配列を作る	np.random.randint(開始値, 終了値, N)
辞書順で文字列が文字列より前かどうか調べる	s < s2
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
option: ホットピンクを使う	color = 'hotpink'
option: スラグレーを使う	color = 'slategrey'
配列を平坦にする	aArray.flatten()
リストとデータ列について散布図を描き、、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
カラムのUNIX時間を日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
グラフのパレットを全般的に淡くする	sns.set(pallete='muted')
データフレームの一部のカラムの歪度	df[['列A', '列B']].kurt()
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
初期値で全要素を初期化した配列	np.full(要素数, 初期値, dtype=np.int)
散布図の下三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
カウンタの要素数	len(aCounter)
option: ロイヤルブルーにグラフの色を設定する	color = 'royalblue'
ヒストグラムの線の種類を破線に変更する	plt.hist(データ列, linestyle='dashed')
ヒストグラムの上限下限を設定する	plt.hist(データ列, range=(start, end))
タブで区切って二つの数値をプリントする	print(value, value2, sep='\t')
タン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
パウダーブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
データフレームから指定した３列を抽出する	df[['列A', '列B', '列C']]
グラフの用途をプレゼンに変更する	sns.set(context='talk')
実行時の標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
折れ線グラフにクロス印を使う	plt.plot(データ列x, データ列y, marker='x')
データフレームを関数の値によってグループ分けする	df.groupby(関数)
リストの最後のn要素を取り除く	aList[:-n]
option: フォントの色をアンティークホワイトにセットする	color = 'antiquewhite'
データフレームの一部の列の欠損値を最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
カラムのトリム平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
空白文字を全て見る	string.whitespace
option: グラフの色をパールゴールデンロッドに指定する	color = 'palegoldenrod'
タプルの各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
カウンタ間で和集合を求める	aCounter | aCounter2
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
リストとデータ列の散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
プロットの色を全般的に濃くする	sns.set(pallete='deep')
日付時刻データは何年か知る	aDatetime.year
マッピングを浅く複製する	dict(aDict)
集合から要素を取り除く	aSet.remove(element)
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
x座標の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
データフレームを並べて、新しい行を加える	df.sort_values('キーとなる列').reset_index()
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
プラム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
モカシン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
横棒グラフを描いて、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
オブジェクトは浮動小数点数か	isinstance(obj, float)
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
ダークゴールデンロッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
折れ線グラフの色をハニーデューに指定する	plt.plot(データ列x, データ列y, color='honeydew')
組をnからナンバリングする	enumerate(aTuple, start=n)
散布図に黒い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームの列名一覧で指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
縦軸を対数に変更する	plt.yscale('log')
マップに辞書の項目を更新する	aDict.update(aDict2)
文字列は全て印字できるか調べる	s.isprintable()
サブ型	issubclass(サブクラス, クラス)
データフレームのNaNをその最小値で埋める	df.fillna(df.min())
option: フォントの色をミディアムパープルに設定する	color = 'mediumpurple'
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
赤い右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームの選択したカラムのパーセンタイルを算出する	df[['列A', '列B']].quantile(パーセント/100)
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
リストとリストについての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
切片なしの線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
配列のユニークな要素	np.unique(aArray)
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
データフレームを表示するときカラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
スラグレー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
イテラブルとイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
文字列が部分文字列で終わるか確認する	s.endswith(sub)
データフレームの列のユニークな値を調べる	df[col].unique()
2つの変数をコロンで区切ってプリントする	print(value, value2, sep=':')
横棒グラフをアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='aquamarine')
数値の変数についてのn階微分を算出する	sympy.diff(e, z, n)
折れ線グラフの色をシスルに変更する	plt.plot(データ列x, データ列y, color='thistle')
星印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
リストを境界値としてデータフレームの中の列をビン分割する	pd.cut(df[col], aList)
青いヒストグラムを描画する	plt.hist(データ列, color='b')
列と列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
データフレームをある列のカテゴリでグループ化して、各グループごとの件数を知る	df.groupby('列A').size()
データフレームの選択したカラムの中に文字列と文字列がいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
新しいロジスティック回帰モデルを用意する	model = sklearn.linear_model.LogisticRegression()
数列のケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
ライトスレイグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
文字列が全て十進数字か調べる	s.isdecimal()
２つの列でデータフレームをグループ化し、要約統計量を算出する	df.groupby(['列A', '列B']).describe()
option: バイナリモードを用いる	mode = 'rb'
タイタニック号のデータセットをデータフレームとしてロードする	df = sns.load_dataset('titanic')
文字列をシンボルにする	sympy.Symbol(s)
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
タプルの要素を小さい方から並べ変える	sorted(aTuple, reverse=False)
縦棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
データフレームを表示するとき表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
配列とリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
リストと配列の散布図を描いて、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
コーンズシルク色として線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
日付データが火曜日かどうか調べる	aDate.weekday() == 1
nからn2の値を引いてnに代入する	n -= n2
辞書のキーとその値をペアとして取り出す	aDict.items()
実数の二進対数	math.log2(x)
リストを境界値としてリストを分割する	pd.cut(aList, aList)
双方向キューの最後から要素を取り除く	deq.pop()
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgrey')
データフレームをある列によって小さい順に並べ直す	df.sort_values(by='列A', ascending=True)
データフレームを表示するとき、表示可能な最大行数を増やす	pd.set_option('display.max_rows', n)
分子と分母から有理数を作成する	fractions.Fraction(分子, 分母)
棒グラフをピーチパフ色を用いて描画する	plt.bar(データ列x, データ列y, color='peachpuff')
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
データフレームの選択したカラムを丸めて、整数にする	df[['列A', '列B']].round().astype(int)
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
変数をアンダーライン付きでプリントする	print(f'\033[4m{value}\033[0m')
グラフの中のy軸にラベルを付ける	plt.ylabel('y軸ラベル')
データフレームから重複ありでランダムに5行をサンプリングする	df.sample(5, replace=True)
リストと配列の散布図を描画し、、マーカーを下三角に指定する	plt.plot(データ列x, データ列y, marker='v')
データフレームの選択したカラムの中にいくつ文字列が存在するか数える	df[['列A', '列B']].isin([value]).sum()
データシリーズの中の欠損値の数を調べる	ds.isna().sum()
データシリーズをタイムスタンプ型に変換し、表データのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ダークシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkseagreen')
ミディアムスプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データフレームの列をグループ化して、ヒストグラムでプロットする	sns.histplot(df, x='列名', hue='カテゴリ名')
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: ホットピンクを使用する	color = 'hotpink'
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
散布図をrgbの上三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
nはn2と等しいか調べる	n == n2
データフレームのデータを条件でフィルタする	df[(df['列A'] == x) & (df['列B'] == y)]
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
option: フォントの色をパウダーブルーに設定する	color = 'powderblue'
縦棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
ファイルを改行を取り除いて一行ずつ読む	f.readline()
空白で文字列を区切り、、文字列リストにする	s.split()
データフレームの統計量を一度に確認する	df.describe()
実数の正弦を求める	math.sin(x)
option: 印の色を設定する	markerfacecolor = '#800080'
Pythonパスのリスト	sys.path
xが一桁の数	-9 <= x <= 9
ヒストグラムの色をディープスカイブルーにセットする	plt.hist(データ列, color='deepskyblue')
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
ゴーストホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
option: ミディアムブルーを使う	color = 'mediumblue'
option: アリスブルー色を使う	color = 'aliceblue'
両端キューの中に値が含まれてるか調べる	element in deq
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
改行する	print()
n個に等間隔でリストをビン分割する	pd.cut(aList, n)
2つの行列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
ふたつの集合は集合と互いに素か調べる	aSet.isdisjoint(aSet2)
いつまでもオブジェクトが繰り返す列	itertools.repeat(element)
耐火レンガ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
組の長さ	len(aTuple)
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームのある列の値がx以下の行を抽出する	df[df['列A'] <= x]
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
表データを欠損値を含めてある列の値でグループ化する	df.groupby('列A', dropna=False)
option: ブラック色を使う	color = 'black'
散布図の四角マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データフレームのカラムの各値は何回出現するか見る	df[col].value_counts()
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
小数点数の双曲線正弦の逆数	math.asinh(x)
線グラフの色をダークスレートブルーにセットする	plt.plot(データ列x, データ列y, color='darkslateblue')
option: フォントの色をシーグリーンに設定する	color = 'seagreen'
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
散布図の右三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
散布図の下三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームのあるカラムの中にある文字列の合計を数える	df['列A'].isin([value]).sum()
オブジェクトは論理値	isinstance(obj, bool)
線グラフを色付きの実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図でデータフレームのカラムを可視化する	sns.scatterplot(data=df, x='列名', y='列名')
データフレームのある列の値がx以上の行を選択する	df[df['列A'] >= x]
小数点数のk進対数	math.log(x, k)
リストの中の最小値を求める	min(aList)
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()
折れ線グラフをリネン色を使って描画する	plt.plot(データ列x, データ列y, color='linen')
データフレームのある列を正規表現patternでまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
多次元データを主成分分析として濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
異なる列をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
入力ストリームから1バイト、読み込む	f.read(1)
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
rgbのポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
文字列をカンマを使って分割し、列挙する	s.split(',')
指定した列のカテゴリで集計しそれぞれの最小値を算出する	df.groupby('列A').min()
JSONフォーマットのfをデータにする	json.load(fin)
データフレームの選択したカラムを1000の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
option: 欠損値は無視する	dropna = True
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
データフレームの選択した列の歪みを求める	df[['列A', '列B']].kurt()
データフレームの選択した列を千の位で丸める	df[['列A', '列B']].round(-3)
カデットブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
複数のデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
行列が何次元か調べる	aArray.ndim
数式の変数の解を方程式として求める	sympy.solve(e, z)
nとn2が等しいか調べる	n == n2
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
データフレームの選択したカラムの欠損値を最大値に指定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
データフレームの選択したカラムの中の欠損値の合計を数える	df[['列A', '列B']].isna().sum()
散布図の三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
菱形印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
nがn2より小さい	n < n2
xを浮動小数点数に変換する	float(x)
データフレームからカラムを２つ選択する	df[['列A', '列B']]
両端キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
文字列を部分文字列で分けた場合の後半の文字列	s.partition(sub)[-1]
カウンタの正の数のみ残す	+aCounter
ホールドアウト法を使用する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
option: ライトグレーにグラフの色を変更する	color = 'lightgray'
option: グラフの色をコーラルに設定する	color = 'coral'
データフレームをある列によってソートする	df.sort_values(by='列A')
ファイルパスの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
折れ線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
逆双曲線余弦	math.acosh(x)
棒グラフをオリーブ色を用いて描画する	plt.bar(データ列x, データ列y, color='olive')
淡い茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
option: セパレータを改行にする	sep = '\n'
タプルのn番目以降の部分を取り出す	aTuple[n:]
JSONファイルのファイルを辞書に変換する	json.load(fin)
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
カテゴリで色付けして、カーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
rgbの下三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
イテラブルのイミュータブルな集合を用意する	frozenset(iterable)
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
アイボリー色としてヒストグラムを描画する	plt.hist(データ列, color='ivory')
文字列の開始位置からと終了位置の間に部分文字列があるか調べる	s.find(sub, start, end) != -1
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
グリッド線	plt.grid(color='#800080')
文字列中のパターンを新しい文字列で置き換える	re.sub(pattern, newsub, s)
データシリーズの中に文字列が含まれるかどうか調べる	ds.isin([value])
データフレームをグループ化し、それぞれの合計を求める	df.groupby('列A').sum()
折れ線グラフの色をビスクにする	plt.plot(データ列x, データ列y, color='bisque')
データフレームの標本分散	df.var(ddof=0)
ゼロ埋めした複素数型の行列	np.zeros(要素数, dtype=bool)
option: ブランチドアーモンドに色を設定する	color = 'blanchedalmond'
配列の正規分布を判定する	scipy.stats.shapiro(配列)
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
データフレームの全カラムを散布図として可視化する	sns.pairplot(df)
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
散布図の色を深紅にする	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
文字列をコロンで分割して文字列リストに変換する	s.split(':')
データフレームを指定した列によって降順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
散布図の菱形印を青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームの選択したカラムを100の位で丸める	df[['列A', '列B']].round(-2)
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
データ列をインポートする	import pandas as pd
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
option: イエローグリーンを使う	color = 'yellowgreen'
バリーウッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
ペールグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
二つの文字列は等しくないか判定する	s != s2
散布図の印の大きさを指定する	plt.scatter(データ列x, データ列y, markersize=2.0)
ピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
数値を展開する	sympy.expand(e)
横棒グラフをダークカーキ色として描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
現在の分を使う	datetime.date.today().minute
データシリーズの代表値	ds.describe()
option: エンコーディングを文字列の示すエンコーディングにセットする	encoding = s
カラムの中に含まれるの合計を数える	df['列A'].isin([value]).sum()
文字列内にひとつでも英数字があるかどうか調べる	any(c.isalnum() for c in s)
指定した列のカテゴリで集計し、それぞれの最小値を求める	df.groupby('列A').min()
n2がnより大きく、かつ、n3未満かどうか調べる	n < n2 and n2 < n3
二つの配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
文字列を積極的に小文字に変換する	s.casefold()
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
青緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
リストとリストの散布図を描画して星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ライトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightblue')
辞書からキーの値をエラーなく参照する	aDict.get(key, None)
辞書のキーを列挙する	aDict.keys()
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
リストとリストについての散布図に黒い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
データフレームを２つの列で集計する	df.groupby(['列A', '列B'])
リストと配列についての散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
リストを逆順にする	reversed(aList)
プロットの描画で色差別なく色を使用する	sns.set(pallete='colorblind')
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
二つのデータフレームを合体する	pd.concat([df, df2])
xを文字列に変換して出力ストリームに書き込む	f.write(str(x))
ファイルをオープンして]書き込みストリームを求める	open(filepath, mode='w')
文字列が全てアスキー文字か調べる	s.isascii()
オブジェクトが名前付きタプル	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
option: グラフの色をクリムゾンに設定する	color = 'crimson'
散布図を星マーカーで描画する	plt.scatter(データ列x, データ列y, marker='*')
横棒グラフをサドルブラウン色として描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
縦棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
デピンク色としてヒストグラムを描画する	plt.hist(データ列, color='deeppink')
折れ線グラフのクロスマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
space	' '
カウンタをリストに変換する	list(aCounter)
スタックの先頭	deq[0]
ブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
折れ線グラフをフローラルホワイト色として描画する	plt.plot(データ列x, データ列y, color='floralwhite')
作画のグリッドを白くする	sns.set(style='whitegrid')
nがn2以下か	n <= n2
文字列をゼロ埋めする	s.zfill(文字列幅)
ひとつでも英字が文字列内にある	any(c.isalpha() for c in s)
データフレームを表示するとき、表示できる列数を減らす	pd.set_option('display.max_columns', n)
データフレームをある列によってソートし、、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='gray')
データシリーズの中央値	ds.median()
オブジェクトは整数か	isinstance(obj, int)
文字列の先頭でパターンにケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
上限指定をした配列の算術平均を計算する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
行列の内積	np.dot(aArray, aArray2)
複数行対応として正規表現で文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
横棒グラフの色を淡い茶色にする	plt.barh(データ列x, データ列y, color='tan')
オリベドラブ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
縦棒グラフをティール色で描画する	plt.bar(データ列x, データ列y, color='teal')
実数以上の最小の整数を求める	math.ceil(x)
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムをコーラル色として描画する	plt.hist(データ列, color='coral')
小数点数のサイン	math.sin(x)
データフレームを十の位で丸めて、整数型にする	df.round(-1).astype(int)
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
赤い破線を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
デックをポップする	deq.pop()
ストリームを全部読み込む	f.read()
パレットトルコイズ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
nまでの偶整数リスト	list(range(2, n, 2))
option: グラフの色をロージーブラウンにセットする	color = 'rosybrown'
データフレームのカラムを百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
リストを組に変換する	tuple(aList)
文字列全体がパターンに複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
数式の変数に数式を代入する	e.subs(z, e2)
option: 青色を使用する	color = 'blue'
option: グラフのラインスタイルを点線に変更する	linestyle = 'dotted'
タプル内の要素が全て真かどうか調べる	all(aTuple)
行列の平均値	np.mean(aArray)
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
ある列の値がxに等しく、別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
縦棒プロットを描いてラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
変数を黄色で出力する	print(f'\033[33m{value}\033[0m')
ヒストグラムをミディアムアクアマリン色を用いて描画する	plt.hist(データ列, color='mediumaquamarine')
数字を全て使う	string.digits
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
リストとリストについて散布図を描画して、マーカーを上三角に設定する	plt.plot(データ列x, データ列y, marker='^')
昇順に複数の列をキーにしてデータフレームをソートする	df.sort_values(by=['列A', '列B'], ascending=True)
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
データフレームからカテゴリデータの列名のリストを使う	df.select_dtypes('object').columns
多次元データを多次元尺度構成法として濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
横棒グラフの色を黄緑にする	plt.barh(データ列x, データ列y, color='chartreuse')
シアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
実測値を重回帰モデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
文字列の中でASCII限定として正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
nが2で割り切れない	n % 2 == 1
散布図をrgbの丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフの色をライムに指定する	plt.plot(データ列x, データ列y, color='lime')
散布図をミディアムオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
回帰モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
データフレームを表示するとき小数点以下の表示精度を設定する	pd.set_option('precision', n)
アルファベットの小文字列	string.ascii_lowercase
データフレームを十の位で丸める	df.round(-1)
列の名前一覧を見る	df.columns
両端キューの末尾に要素を追加する	deq.append(element)
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
折れ線グラフの色をホットピンクにセットする	plt.plot(データ列x, データ列y, color='hotpink')
TSVファイルから文字エンコーディングを指定して読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
option: フォントの色を紺碧に設定する	color = 'azure'
小麦色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
シーケンスからサンプリングする	random.sample(iterable)
文字列中の部分文字列を新しい文字列に全部置き換える	s.replace(sub, newsub)
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
表データのあるカラムは何時か知る	df['列A'].dt.hour
2進数文字列を整数に変換する	int(s, 2)
双方向キューのサイズ	len(deq)
ある列の値がx以上、y以下のデータを選択する	df[(x <= df['列A']) & (df['列A'] <= y)]
option: 色をプラムに変更する	color = 'plum'
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
ガンマ関数の値を算出する	math.gamma(x)
データフレームを十の位で四捨五入して、整数にする	df.round(-1).astype(int)
新しい勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
データシリーズの未入力値を平均値で置き換える	ds.fillna(ds.mean())
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
箱ひげ図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
リストとリストの散布図を描画して、ポイントマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
作画のx軸とy軸の比率を同じする	plt.axis('equals')
リストとデータ列について散布図を描画して大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
全ての印字できる文字	string.printable
option: エンコーディングをBOM付きに指定する	encoding = 'utf_8_sig'
predicateFuncが真になる列の要素を取り出す	itertools.takewhile(predicateFunc, iterable)
縦棒グラフをベージュ色を使って描画する	plt.bar(データ列x, データ列y, color='beige')
色付きの点線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
二つの変数を改行で区切ってプリントする	print(value, value2, sep='\n')
ある列ごとの最大値	df.groupby('列A').max()
ヒストグラムの色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
双方向キューの大きさ	len(deq)
データシリーズを四捨五入する	ds.round()
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
プラットホームはWindowsかどうか調べる	sys.platform.startswith('win32')
データシリーズが何分か見る	ds.dt.minute
論文用にグラフを設定する	sns.set(context='paper')
JSON形式の文字列をデータにする	json.loads(jsonString)
データフレームのn行より前を抽出する	df[:n]
eの小数点数乗を求める	math.exp(x)
オプションで、出力先を標準出力に設定する	file = sys.stdout
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgrey')
デック中の要素の数を数える	deq.count(element)
リストを引数として展開して出力する	print(*aList, sep=',')
実数の逆正接を求める	math.atan(x)
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
option: グラフの色をバイオレットに変更する	color = 'violet'
散布図の左三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
線グラフをグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='green')
グリーンイエロー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームから一つの列のみ選択する	df[['列A']]
データフレームをある列をキーにして昇順にソートする	df.sort_values(by='列A', ascending=True)
n行をデータフレームからランダムに抽出する	df.sample(n)
配列を元に全要素が1の配列	np.ones_like(aArray)
ヒストグラムの色をカデットブルーにする	plt.hist(データ列, color='cadetblue')
色付きの実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
文字列の右側から空白を取り除く	s.rstrip()
文字列の中の大文字・小文字を無視して正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
ダークマゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
乱数を生成する	random.random()
ハニーデュー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
nが無限に続くイテラブル	itertools.repeat(n)
ファイルパスを開く]	open(filepath)
縦棒グラフをミディアムブルー色を使って描画する	plt.bar(データ列x, データ列y, color='mediumblue')
ヒストグラムをダークスレートブルー色を使って描画する	plt.hist(データ列, color='darkslateblue')
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
縦棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
文字列がリストに含まれるかどうか調べる	element in aList
線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
データを最大値を用いて正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
数列の折れ線プロットをプロットして、カラーコードで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
折れ線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
リストをnからナンバリングする	enumerate(aList, start=n)
散布図を星印で描画する	plt.scatter(データ列x, データ列y, marker='*')
降順に破壊的に複数の列によってデータフレームをソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
option: スラグレー色を使う	color = 'slategray'
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
nとn2の差を求める	n - n2
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
カラムの未入力値を最頻値で補う	df['列A'].fillna(df['列A'].mode().iloc[0])
散布図の四角印の色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
ライム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
データフレームから指定した二つのカラムのみ取り出す	df[['列A', '列B']]
ストリームに文字列を書く	f.write(s)
線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
閾値でデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
データシリーズの標本分散	ds.var(ddof=0)
指定した列を十の位で四捨五入して、整数にする	df['列A'].round(-1).astype(int)
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
ふたつの集合が集合と互いに素か確認する	aSet.isdisjoint(aSet2)
日付時刻データが金曜日か確認する	aDatetime.weekday() == 4
小麦色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
データシリーズの25パーセンタイル	ds.quantile(0.25)
淡い茶色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
二つの集合の差集合を使う	aSet.difference(aSet2)
デピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
指定した列で集計し、それぞれの分散を求める	df.groupby('列A').var()
ヒストグラムを実線に設定する	plt.hist(データ列, linestyle='solid')
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
ヒストグラムをマルーン色として描画する	plt.hist(データ列, color='maroon')
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
option: グラフの色をパープルに指定する	color = 'purple'
データフレームの選択したカラムのNaNを最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
データフレームから指定した二つの列を取り出す	df[['列A', '列B']]
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームをCSVファイルに小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
データフレームの各カテゴリごとの散布図に線形回帰を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
青紫色として線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
xを文字列に変換する	str(x)
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
指定したカラムのNaNをメディアンで埋める	df['列A'].fillna(df['列A'].median())
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
未初期化の行列を作る	np.empty((行数, 列数), dtype=np.int)
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
折れ線グラフを半透明の破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
散布図をブラック色を用いて描画する	plt.scatter(データ列x, データ列y, color='black')
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
データフレームのある列の値がxより多い行を抽出する	df[df['列A'] > x]
データシリーズの不偏分散	ds.var(ddof=1)
n個の集まりからk個選ぶ方法	math.comb(n, k)
option: 色をターコイズに指定する	color = 'turquoise'
線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
xを実数にする	float(x)
型が名前付きタプルかどうか調べる	issubclass(C, tuple)
散布図の△マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
最適な場所に凡例を表示する	plt.legend(loc='best')
値を両端キューのn番目に挿入する	deq.insert(n, element)
TSVファイルから文字コードを指定してデータフレームをロードする	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
淡い茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
折れ線グラフの色をサドルブラウンに指定する	plt.plot(データ列x, データ列y, color='saddlebrown')
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
UNIX時間の列から日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
散布図の左三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
黒いダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフの色をライトスカイブルーにする	plt.plot(データ列x, データ列y, color='lightskyblue')
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
ロイヤルブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
クリムゾン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
ファイルを読み込みモードとしてオープンして]、fとする	f = open(filepath, mode='r')
空のタプル	()
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
ヒストグラムの色をペールグリーンに指定する	plt.hist(データ列, color='palegreen')
縦棒プロットをプロットして中央寄せする	plt.bar(ラベル列, データ列, align='center')
ヒストグラムの色を貝殻にセットする	plt.hist(データ列, color='seashell')
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
ネイビー色でヒストグラムを描画する	plt.hist(データ列, color='navy')
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
データシリーズの中に文字列と日付データがあるかテストする	ds.isin([value, value2])
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
マッピングの項目名を列挙する	list(aDict)
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
折れ線グラフの色をオールドレースに指定する	plt.plot(データ列x, データ列y, color='oldlace')
横棒グラフをミディアムスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
データフレームの指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
二つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
文字列が小文字か確認する	s.islower()
実数を切り下げる	math.floor(x)
再帰の上限を増やす	sys.setrecursionlimit(1000000)
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
日付時刻データがタイムスタンプデータより後ろか	aDatetime > aDatetime2
横棒グラフの色をティールにする	plt.barh(データ列x, データ列y, color='teal')
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
組の先頭	aTuple[0]
実数の正接の逆数を計算する	math.atan(x)
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
タプルの平均値	sum(aTuple)/len(aTuple)
文字列の接頭辞は部分文字列か調べる	s.startswith(sub)
データフレームを十の位で四捨五入して、整数型にする	df.round(-1).astype(int)
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
グラフの中の縦軸に説明を付ける	plt.ylabel('y軸ラベル')
カウンタの文字列数	len(aCounter)
パステル調に色をプロットの描画で使用する	sns.set(pallete='pastel')
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
データフレームをある列によって昇順にソートする	df.sort_values(by='列A', ascending=True)
nとn2の差	n - n2
option: グラフの色をリネンに設定する	color = 'linen'
方程式の解を算出する	sympy.solve(e)
ロバストな単回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
タプルを並べ直してJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
ファイルとfilenameを結合する	os.path.join(filepath, filename)
散布図にダイアモンドマーカーを用いる	plt.scatter(データ列x, データ列y, marker='D')
文字列がタプルに含まれるか確認する	element in aTuple
辞書に辞書の項目を更新する	aDict.update(aDict2)
円周率	math.pi
データフレームの選択した列の欠損値を平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
文字列をセンタリングにする	s.center(文字列幅)
部分文字列で文字列の開始位置以降が開始するかどうか調べる	s.startswith(sub, start)
タイムスタンプデータと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
辞書からカウンタを作る	collections.Counter(aDict)
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
行列の次元を変形する	aArray.reshape(行数, 列数)
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
データフレームの一部のカラムのメディアン	df[['列A', '列B']].median()
option: 改行しない	end = ''
データフレームとしてTSVファイルを読み込む	pd.read_csv('file.tsv', sep='\t')
option: グラフの線の種類を破線に設定する	linestyle = 'dashed'
両端キュー中の要素の位置	deq.index(element)
データフレームから型を取り出す	df.select_dtypes(ty)
グラフの補助目盛を有効にする	plt.minorticks_on()
折れ線グラフに左三角印を使用する	plt.plot(データ列x, データ列y, marker='<')
異なる列をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
option: タブを分割記号で使う	sep = '\t'
アルファベットの大文字を全部見る	string.ascii_uppercase
オブジェクトは関数か調べる	callable(obj)
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの△マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームをソートして、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
option: グラフの色をフォレストグリーンに指定する	color = 'forestgreen'
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
グラフの色をパステル調にする	sns.set(pallete='pastel')
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
データ列をPandasの日付型に変換する	pd.to_datetime(ds)
白色で変数を表示する	print(f'\033[37m{value}\033[0m')
ミディアムターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
ミディアムバイオレットレッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
整数nの十六進文字列	hex(n)[2:]
エクセルからデータフレームを読み込む	pd.read_excel('file.xlsx')
折れ線グラフの色をダークマゼンタに指定する	plt.plot(データ列x, データ列y, color='darkmagenta')
散布図をポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.')
option: インディゴ色を使う	color = 'indigo'
ヒストグラムの色をパールバイオレットレッドに指定する	plt.hist(データ列, color='palevioletred')
表を用いる	import pandas as pd
折れ線グラフの印を四角印にする	plt.plot(データ列x, データ列y, marker='s')
option: 文字列を改行の代わりに用いる	end = s
８ビット整数型のゼロ埋めした配列	np.zeros(要素数, dtype=np.int8)
実数のtan	math.tan(x)
大バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
最大値・最小値の範囲として一様な乱数	random.uniform(最小値, 最大値)
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
データシリーズが正規分布からどの程度、歪んでいるか見る	ds.kurt()
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
タプルのキーとその値をペアとして取り出す	aDict.items()
散布図の三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ミスティローズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
小麦色色を用いてヒストグラムを描画する	plt.hist(データ列, color='wheat')
データフレームを合体させる	pd.concat([df, df2])
カウンタを高頻度方からリストとして得る	aCounter.most_common()
折れ線グラフをインディアンレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='indianred')
nをn2だけ減少させる	n -= n2
作画で使うフォントを指定する	sns.set(font=フォント名)
option: データ型として符号なし８ビット整数型を使う	dtype = np.uint8
データ列の折れ線グラフを描画して、色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
イテラブルと数列の散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
棒グラフをターコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='turquoise')
二つの整数最小公倍数を求める	math.lcm(n, n2)
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
ベージュ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
リストの長さだけ繰り返す	range(len(aList))
option: 大バツマーカーを使う	marker = 'X'
option: ピーチパフ色を使う	color = 'peachpuff'
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
両端キューが空であるか	len(deq) == 0
線グラフをブラック色を使って描画する	plt.plot(データ列x, データ列y, color='black')
文字列で区切って2つの文字列をプリントする	print(value, value2, sep=s)
フローラルホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
nがn2よりも小さい	n < n2
シアンで文字列をプリントする	print(f'\033[36m{value}\033[0m')
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
オブジェクトにフィールドが存在する	hasattr(obj, プロパティ名)
option: ラベンダーにグラフの色を変更する	color = 'lavender'
欠損値がある行を除く	df.dropna(inplace=True)
ベクトルのユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
nまでの偶整数列を作る	list(range(2, n, 2))
リストの値を並べる	sorted(aList)
散布図に赤い▼印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: グラフの色をディムグレーに変更する	color = 'dimgray'
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
数を実数から減ずる	x - y
文字列を複数行対応として正規表現で区切る	re.split(pattern, s, flags=re.MULTILINE)
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
横棒グラフを描いて下寄せする	plt.barh(ラベル列, データ列, align='edge')
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
ライトスカイブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
本日の日付	datetime.date.today()
タプルのイミュータブルなセット	frozenset(iterable)
アイボリー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
option: サンディーブラウンにフォントの色を指定する	color = 'sandybrown'
データフレームの重複した行を数える	df.duplicated().sum()
シートの名前を指定してエクセルファイルからロードする	pd.read_excel('file.xlsx', sheet_name=シート名)
横棒グラフをパレットトルコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
横棒グラフを描き、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
ヒストグラムの色をホットピンクにセットする	plt.hist(データ列, color='hotpink')
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
散布図のマーカーを菱形印にする	plt.scatter(データ列x, データ列y, marker='D')
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
データフレームの一部のカラムが正規分布からどの程度歪んでいるか見る	df[['列A', '列B']].kurt()
option: エンコーディングをBOM付きに変更する	encoding = 'utf_8_sig'
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
淡いピンク色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
nとn2の値を足してnに代入する	n += n2
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
配列の要素ごとの積を求める	np.multiply(aArray, aArray2)
青い破線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
部分文字列で文字列を区切って文字列リストに変換する	s.split(sub)
option: フォントの色をミディアムオーキッドに変更する	color = 'mediumorchid'
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
第２引数で指定されたファイル名	sys.argv[1]
データシリーズの値を正規表現patternで一度にreplに置き換える	ds.replace(pattern, repl, regex=True)
リネン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
折れ線グラフの色をパールバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='palevioletred')
option: 線幅を指定する	linewidth = 3.0
ヒストグラムをダークオレンジ色を用いて描画する	plt.hist(データ列, color='darkorange')
欠損値がある行をドロップする	df.dropna(inplace=True)
プロットの縦横比を等しくする	plt.axis('equals')
データフレームをグループ化し、ある列に対し合計を算出する	df.groupby('列A')['列B'].sum()
黒い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
黒い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
オプションで出力先をファイルに変更する	file = sys.open(filename, 'w')
スノー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
数値の微分を計算する	sympy.diff(e)
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
データフレームを100の位で丸める	df.round(-2)
配列とリストについての散布図に黒い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
縦棒グラフをアイボリー色を使って描画する	plt.bar(データ列x, データ列y, color='ivory')
option: トマトにグラフの色を設定する	color = 'tomato'
option: グラフの色をオレンジにする	color = 'orange'
項目名がタプル上で未定義	key not in aDict
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
ピーチパフ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
ティール色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
実数のn乗して浮動小数点数による余り	pow(x, n, y)
nわるn2を計算する	n / n2
option: フォントの色を青紫に設定する	color = 'violet'
データシリーズの記述統計量	ds.describe()
読み込みモードとしてファイルを開き]、fとする	f = open(filepath, mode='r')
配列の調和平均を計算する	scipy.stats.hmean(配列)
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
predicateFuncがTrueとならないイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムをゲインズボロ色を用いて描画する	plt.hist(データ列, color='gainsboro')
データフレームを欠損値を含めてある列の値でグループ化する	df.groupby('列A', dropna=False)
option: ライトシアンを使う	color = 'lightcyan'
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
データフレームの最後10行を抽出する	df.tail(10)
nが3で割り切れるか調べる	n % 3 == 0
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
データ列の四分位を可視化する	plt.boxplot(データ列)
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームを関数によって集計して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
組の要素を昇順にソートする	sorted(aTuple, reverse=True)
値を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
小数点以下をn桁に変更する	pd.set_option('precision', n)
辞書のコピー	dict(aDict)
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
オーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
option: 先頭のカラムをインデックスに設定する	index_col = 0
option: ミディアムパープル色を使う	color = 'mediumpurple'
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
リストの移り変わりを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
両端キュー中の値のインデックスを見る	deq.index(element)
両端キューの最後から値を取り出す	deq.pop()
配列の列	aArray[:, 列番号]
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
上位集合もしくは等しい	aSet > aSet2
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
シエナにヒストグラムの色を設定する	plt.hist(データ列, color='sienna')
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
ヒストグラムのラインスタイルを実線に設定する	plt.hist(データ列, linestyle='solid')
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
データフレームをある列によってソートして、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
Pythonパスにディレクトリを追加する	sys.path.append(dir)
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
タプルの末尾	aTuple[-1]
オブジェクトはタプルに含まれるか調べる	element in aTuple
year年month月day日を日付時刻にする	datetime.datetime(year=year, month=month, day=day)
データフレームのカラムの母標準偏差	df['列A'].std(ddof=0)
ミディアムスレートブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
集合＼セット	aSet.difference(aSet2)
リストとイテラブルについての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
数値を微分する	sympy.diff(e)
両端キューが空か調べる	len(deq) == 0
カテゴリデータ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
ヒストグラムをオレンジ色として描画する	plt.hist(データ列, color='orange')
データフレームをインデックスを付けず保存する	df.to_csv('file.csv', index=None)
横棒グラフをゴールデンロッド色を用いて描画する	plt.barh(データ列x, データ列y, color='goldenrod')
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
データフレームの列間の相関係数をまとめて求める	df.corr()
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
ライトコーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
option: 整数型を使う	dtype = np.int
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
option: ゴーストホワイトにグラフの色を設定する	color = 'ghostwhite'
カウンタ同士でユニオン	aCounter | aCounter2
option: 改行なし	end = ''
データフレームのNaNを最小値に指定する	df.fillna(df.min())
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
上位集合もしくは等しいか調べる	aSet > aSet2
折れ線グラフのクロスマーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
データ列の移り変わりを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
文字列を太字にする	f'\033[1m{value}\033[0m'
横棒グラフをグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='green')
データ列の推移を色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
タン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
オプションでファイルを用いる	file = sys.open(filename, 'w')
折れ線グラフのダイアモンドマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
option: グラフの色をフクシアに設定する	color = 'fuchsia'
option: スチールブルー色を用いる	color = 'steelblue'
文字列全体を複数行対応としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフをダークマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
全要素が1の行列を初期化する	np.ones(行数, 列数, dtype=np.int)
フォレストグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
データフレームの選択した列の値が未入力値	df[['列A', '列B']].isna()
文字列の中でパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s)
データフレームをカラムの名前を付けず書き出す	df.to_csv('file.csv', header=None)
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
赤いクロスマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
イテラブルとリストについて散布図を描画して、その大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフの丸印を黒色にする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
ファイルパスの区切り記号を確認する	os.sep
rgbの△マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを散布図で可視化して、カテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
棒グラフをミディアムスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
セパレータで文字列を区切る	s.split(sub)
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
白いヒストグラムを描画する	plt.hist(データ列, color='w')
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
赤い下三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データシリーズのNaNをxに設定する	ds.fillna(x)
リストの中の最も小さい値を求める	min(aList)
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
option: 表計算ファイルシートの名前を設定する	sheet_name = ['A', 'B']
二つのベクトルを縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
数のn乗を求める	x ** n
線グラフの色をバイオレットに変更する	plt.plot(データ列x, データ列y, color='violet')
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
縦棒グラフをホワイトスモーク色を使って描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
数値の符号をコピーにする	math.copysign(x, x2)
折れ線グラフの色をミディアムターコイズに指定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームから指定した三つの列を取り出す	df[['列A', '列B', '列C']]
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
カウンタのキー一覧	aCounter.keys()
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
ミディアムブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
option: ディープスカイブルー色を使う	color = 'deepskyblue'
列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データフレームをCSVファイルとして保存する	df.to_csv('file.csv')
黒い左三角マーカーをリストとデータ列の散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
上位集合かテストする	aSet.issuperset(aSet2)
度数分布図を三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
オプションで、ファイルを使用する	file = sys.open(filename, 'w')
実行をエラーとして終了する	sys.exit(1)
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
キーがマップに存在するか	key not in aDict
折れ線グラフをダークオリーブグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
散布図に赤い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
棒グラフをオレンジ色を使って描画する	plt.bar(データ列x, データ列y, color='orange')
線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgray')
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
タイムスタンプデータにn日分加算する	aDatetime + datetime.timedelta(days=n)
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
option: グラフの色をロイヤルブルーに変更する	color = 'royalblue'
線グラフの色をティールに指定する	plt.plot(データ列x, データ列y, color='teal')
ダーク・スラテグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: ミディアムバイオレットレッドにグラフの色を変更する	color = 'mediumvioletred'
破線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
リストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
棒グラフをレベッカパープル色として描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
アンティークホワイト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
保存するCSV形式の小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
option: データ型として整数型を使う	dtype = np.int
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
データシリーズの欠損値をモードで埋める	ds.fillna(ds.mode().iloc[0])
データフレームの選択したカラムを四捨五入する	df[['列A', '列B']].round()
データフレームをTSVファイルからロードする	pd.read_csv('file.tsv', sep='\t')
option: グリーンイエロー色を使う	color = 'greenyellow'
データフレームの一部のカラムの値が未入力値か調べる	df[['列A', '列B']].isna()
データフレームのあるカラムの時刻	df['列A'].dt.hour
データフレームのNaNが含まれる箇所に色を付ける	df.style.highlight_null()
タイムスタンプデータからn時間分減らす	aDatetime - datetime.timedelta(hours=n)
文字列中から正規表現に大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフの星マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
散布図に赤い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
リストの末尾のn要素を除く	aList[:-n]
文字列の出力を改行せず行う	print(value, end='')
キューのn番目	deq[n]
データフレームの未入力値を最頻値に指定する	df.fillna(df.mode().iloc[0])
numpyを使用する	import numpy as np
指定したカラムの欠損値をモードに指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
option: スプリンググリーン色を使う	color = 'springgreen'
折れ線グラフをミディアムシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
オブジェクトをデバッグ向けの文字列にする	repr(obj)
黒い左三角マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: カンマを分割記号で用いる	sep = ','
散布図を四角マーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
紺碧色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
データフレームの欠損値が含まれる箇所を色つけする	df.style.highlight_null()
nとn2が同じ値か	n == n2
指定したカラムの未入力値をxに設定する	df['列A'].fillna(x)
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ナバホホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
プロットの全般的にカラーパレットを暗くする	sns.set(pallete='dark')
データフレームのあるカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
ヘッダを付けずデータフレームを保存する	df.to_csv('file.csv', header=None)
配列をn個に等間隔でビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
2つの数値を順にプリントする	print(value, value2)
指定したカラムのどの値が頻出か見る	df['列A'].mode()
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
文字列内にひとつでも英数字が含まれる	any(c.isalnum() for c in s)
スーパーセットかどうか確認する	aSet.issuperset(aSet2)
y軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
組を逆さにする	reversed(aTuple)
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
日付データの日数	aDate.day
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームのある列の値がxより小さい行を抽出する	df[df['列A'] < x]
タプルの要素を逆順にする	aTuple[::-1]
Pandasのバージョンを表示する	print(pd.__version__)
プロットの描画で濃く色を使う	sns.set(pallete='deep')
データ列を指定した値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
タン色でヒストグラムを描画する	plt.hist(データ列, color='tan')
文字列はリストに含まれるかテストする	element in aList
線グラフをロージーブラウン色を使って描画する	plt.plot(データ列x, データ列y, color='rosybrown')
リストとリストについて散布図をプロットして▼マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームの一部のカラムの統計量	df[['列A', '列B']].describe()
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
列の第一四分位数を求める	df['列A'].quantile(0.25)
nをn2で割った余り	n % n2
option: トマト色を用いる	color = 'tomato'
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
グラフをプロットする準備をする	import matplotlib.pyplot as plt
ある列の値がx以上、y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
要素が集合のメンバーでないか調べる	element not in aSet
option: マーカーの大きさを変える	markersize = 2.0
折れ線グラフの色をデピンクに指定する	plt.plot(データ列x, データ列y, color='deeppink')
グリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
ファイルの絶対パス	os.path.abspath(filepath)
option: インデックスを連番に設定する	index_col = None
横棒グラフをダークスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
option: グラフの色をピンクに変更する	color = 'pink'
JSONフォーマットの文字列をデータにする	json.loads(jsonString)
UTF8でファイルをオープンする]	open(filepath, encoding='utf-8')
辞書のキーを列挙する	list(aDict)
nの無限数列	itertools.repeat(n)
ヒストグラムの色をホワイトスモークに指定する	plt.hist(データ列, color='whitesmoke')
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
表をある列を用いて昇順に並べて、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
ファイルをEUCを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
指定したカラムがどの程度、分散しているか調べる	df['列A'].var()
ダークバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='darkviolet')
データ列を平方根変換する	np.sqrt(データ列)
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
２つのオブジェクトが等しいか判定する	obj == obj2
数式を部分分数に展開する	sympy.apart(e)
option: バツマーカーを描画する	marker = 'x'
タプルの中の最大値	max(aTuple)
データフレームの重複を調べる	df.duplicated()
行列の列ごとの分散を求める	np.var(aArray, axis=0)
最後から文字列を部分文字列で分割する	s.rsplit(sub)
option: バリーウッドにグラフの色を設定する	color = 'burlywood'
ある列の欠損値を後の行の値で埋める	df['列A'].fillna(method='bfill')
横棒グラフをマゼンタ色を用いて描画する	plt.barh(データ列x, データ列y, color='magenta')
横棒グラフをオーキッド色として描画する	plt.barh(データ列x, データ列y, color='orchid')
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
シーケンスとシーケンスの直積	itertools.product(iterable, iterable2)
シーグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
折れ線グラフに三角マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
角度のラジアンを求める	math.radians(degree)
ダークグレーにヒストグラムの色をセットする	plt.hist(データ列, color='darkgray')
レベッカパープル色としてヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
ダークサーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
折れ線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
option: コロンをセパレータで用いる	sep = ':'
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
ヒストグラムを実線でプロットする	plt.hist(データ列, linestyle='solid')
ディムグレー色としてヒストグラムを描画する	plt.hist(データ列, color='dimgray')
ブースティングで回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
英文字から一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
ダークブルー色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
折れ線グラフの色をライムグリーンに指定する	plt.plot(データ列x, データ列y, color='limegreen')
要素が辞書の値として含まれているか調べる	element in aDict.values()
データフレームをソートして、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
行列の行	aArray[行番号]
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
option: 赤色を使用する	color = 'red'
折れ線グラフのポイントマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
データフレームの中にある文字列と日付データの数を調べる	df.isin([value, value2]).sum()
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
option: グラフの色をベージュに設定する	color = 'beige'
ヒストグラムの色を深紅に設定する	plt.hist(データ列, color='crimson')
日付データが木曜日	aDate.weekday() == 3
データ列をビン数nとしてビン分割する	pd.cut(ds, n)
直前の値でデータフレームの選択したカラムのNaNを埋める	df[['列A', '列B']].fillna(method='ffill')
ファイルを絶対パスに変換する	os.path.abspath(filepath)
赤いグリッド線を引く	plt.grid(color='r')
要素をキューにエンキューする	deq.appendleft(element)
データシリーズは正規分布からどの程度、尖っているか見る	ds.skew()
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
配列の尖度を使う	scipy.stats.kurtosis(配列, bias=False)
option: 色をレモンシフォンに設定する	color = 'lemonchiffon'
option: 色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
第一引数で指定されたファイルの名前	sys.argv[1]
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
タプルの最初を除く	aTuple[1:]
データフレームの空文字をNaNに変換し、ドロップする	df.replace('', np.nan).dropna()
データフレームのカラムの最頻値を算出する	mode, count = scipy.stats.mode(df['列A'])
option: ダークマゼンタにグラフの色を変更する	color = 'darkmagenta'
データフレームをグループ化し、それぞれの分散を算出する	df.groupby('列A').var()
データフレームの指定したカラムを小数点以下n桁で四捨五入する	df['列A'].round(n)
データフレームのある列を消してみる	df.drop('列A', axis=1)
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
数式処理を使う	import sympy
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームとデータシリーズを横向きに合体する	pd.concat([df, ds], axis=1)
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
折れ線グラフをシャルトリューズ色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
option: プラム色を使う	color = 'plum'
線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
sepを区切りにして文字列リストを一つの文字列にする	sep.join(aStringList)
既存のベクトルを元にして全要素が初期値の行列を作る	np.full_like(aArray, 初期値)
四角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
option: フォントの色をスノーに設定する	color = 'snow'
データシリーズは何月か見る	ds.dt.month
マッピングから項目名で指定された値をポップする	aDict.pop(key)
列名を指定して二つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
option: フォントの色をインディゴに指定する	color = 'indigo'
耐火レンガにヒストグラムの色を指定する	plt.hist(データ列, color='firebrick')
型は名前付きタプルか調べる	issubclass(C, tuple)
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
散布図を小麦色色として描画する	plt.scatter(データ列x, データ列y, color='wheat')
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
赤い四角マーカーをデータ列とデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データシリーズを100の位で丸めて、整数型にする	ds.round(-2).astype(int)
大文字・小文字を無視して正規表現で文字列を区切る	re.split(pattern, s, flags=re.IGNORECASE)
n個に等量でリストをビン分割する	pd.qcut(aList, n)
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
ロイヤルブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
option: 説明変数を事前に正規化する	normalize = True
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
バリーウッド色としてヒストグラムを描画する	plt.hist(データ列, color='burlywood')
二つのリストを改行せず表示する	print(value, value2, end='')
三整数の最小公倍数を求める	math.lcm(n, n2, n3)
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
nが1、もしくは2か調べる	n == 1 or n == 2
タブで区切って２つの文字列をプリントする	print(value, value2, sep='\t')
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
ふたつの集合の交わりを求める	aSet.intersection(aSet2)
縦棒プロットを描画する	plt.bar(ラベル列, データ列)
リストとリストの散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
ランダムにデータフレームからn行を抽出する	df.sample(n)
散布図の四角印の色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
n掛けるn2を計算する	n * n2
option: スラッシュをセパレータで使う	sep = '/'
散布図の上三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
有理数モジュールを使用する	import fractions
文字列の大文字と小文字を交換する	s.swapcase()
線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
データ列の偏りを対数する	np.log(データ列)
nを二進表現に変換する	bin(n)
二つのデータフレームをジョインする	pd.merge(df, df2)
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
文字列の中で複数行対応としてパターンにマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
原点から(実数,y)の距離	math.hypot(x, y)
option: ロージーブラウンにグラフの色を設定する	color = 'rosybrown'
ビン数nでデータ列をビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームの値を正規表現patternで一度にreplに置き換える	df.replace(pattern, repl, regex=True)
option: グラフの色をライトブルーに設定する	color = 'lightblue'
要素を双方向キューのn番目に追加する	deq.insert(n, element)
リストのn番目以降の要素を得る	aList[n:]
文字列を最後の部分文字列で分けたときの先頭の文字列	s.rpartition(sub)[0]
option: フォントの色をアンティークホワイトに設定する	color = 'antiquewhite'
ダークグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
nがn2の倍数でないかどうか	n % n2 != 0
データフレームのあるカラムは何日か見る	df['列A'].dt.day
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
行列の行ごとの合計	np.sum(aArray, axis=1)
データフレームの未入力値を直前の値で置換する	df.fillna(method='ffill')
option: 先頭のカラムをインデックスに増やす	index_col = 0
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
option: ミディアムアクアマリンを使う	color = 'mediumaquamarine'
文字列に日本語がある	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
赤いバツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図を黒い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: グラフの色をベージュに変更する	color = 'beige'
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
マッピングを複製する	dict(aDict)
整数nの八進文字列	oct(n)[2:]
線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
リストの先頭のn要素を捨てる	aList[n:]
osモジュールをインポートする	import os
行列の最大	np.max(aArray)
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: データ型を指定する	dtype = np.int8
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
縦棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
散布図をコーンズシルク色として描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
パラメータについて数式の微分を行う	sympy.diff(e, z)
クラス分類をヒストグラムと勾配ブースティングとして行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: シエナにグラフの色を指定する	color = 'sienna'
データフレームのSkewness	df.skew()
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
データシリーズを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
モデルのバージョンを知る	version = 'wcce2022-0.1'
全要素を初期値で初期化した行列	np.full(要素数, 初期値, dtype=np.int)
線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
データフレームの文字列をNaNにする	df.replace(値, np.nan)
散布図としてデータフレームの全カラムをグラフ化する	sns.pairplot(df)
辞書をインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
オブジェクトは集合クラスのインスタンス	isinstance(obj, set)
行列は何のデータ型か調べる	aArray.dtype()
ローングリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
データフレームの指定したカラムの中に文字列があるかどうか確認する	df['列A'].isin([value])
ファイルパスを文字コードtextで開く]	open(filepath, encoding=text)
折れ線グラフの色をクリムゾンにセットする	plt.plot(データ列x, データ列y, color='crimson')
データフレームの選択したカラムの空文字をNaNに変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
線形回帰分析を行う	model = sklearn.linear_model.LinearRegression()
散布図に黒い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
二つの列からグループ化し分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
option: フォントの色をターコイズに指定する	color = 'turquoise'
1からNまでの行列	np.arange(1, N+1)
predicateFuncがTrueとなるシーケンスの要素	itertools.dropwhile(predicateFunc, iterable)
行列の分散	np.var(aArray)
太文字で数値をプリントする	print(f'\033[1m{value}\033[0m')
データシリーズの中に文字列と文字列がいくつ存在するか数える	ds.isin([value, value2]).sum()
線グラフの色をミディアムアクアマリンにセットする	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
縦棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
日付データのデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
データフレームのカラムの文字列長を列として使う	df[col].str.len()
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
文字列をシアンにする	f'\033[36m{value}\033[0m'
リストの文字列が最初に見つかる場所	aList.index(element)
プログラムを強制的に終了する	sys.exit()
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ファイルパスを文字列の示す文字コードを使って書き込み用に開く]	open(filepath, mode='w', encoding=s)
カラムが正規分布か仮説検定する	scipy.stats.shapiro(df['列A'])
追加できるようにUTF8として既存のファイルを開く]	open(filepath, mode='a', encoding='utf-8')
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
タプルのキーを列挙する	aDict.keys()
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
数字を使う	string.digits
整数nがタプルのいづれか	n in aTuple
データシリーズにおいてどの値が頻出か見る	ds.mode()
option: 紺碧にグラフの色を指定する	color = 'azure'
データフレームのカラムの標準誤差を求める	scipy.stats.sem(df['列A'])
y軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
横棒グラフをアイボリー色として描画する	plt.barh(データ列x, データ列y, color='ivory')
option: ダークカーキ色を用いる	color = 'darkkhaki'
日付データが土曜日か調べる	aDate.weekday() == 5
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
パパイヤウィップ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
option: ブランチドアーモンド色を用いる	color = 'blanchedalmond'
option: ライトサーモンを使う	color = 'lightsalmon'
折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
数式のインテグラルを求める	sympy.integrate(e)
カーキ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
フローラルホワイト色を使ってヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
グラフのy座標を対数に変更する	plt.yscale('log')
ヒストグラムをパレットトルコイズ色として描画する	plt.hist(データ列, color='paleturquoise')
option: グラフの色をマゼンタに指定する	color = 'magenta'
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
正規表現patternでまとめてデータフレームの指定したカラムをreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
改行なしにリストを表示する	print(value, end='')
データフレームを二つのカラムによってグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
データ列を指定した値を用いて二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
文字列中から正規表現に複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
ガウス過程回帰モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
リストとデータ列の散布図を描画して、クロスマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
CSVファイルを読み込む	pd.read_csv('file.csv', sep=',')
データフレームの中にいくつ日付データが存在するか数える	df.isin([value]).sum()
データフレームの指定したカラムの欠損値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームから100行、サンプリングする	df.sample(100)
折れ線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームのカラムの各値が何回出現するか見る	df[col].value_counts()
数列とリストについて散布図を描いて、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
散布図の下三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データ列を円プロットにする	plt.pie(データ列, startangle=90)
データフレームを表計算ファイルで保存する	df.to_excel('file.xlsx')
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
データフレームの選択した列の欠損値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
横棒グラフをホットピンク色として描画する	plt.barh(データ列x, データ列y, color='hotpink')
データフレームから型リストで指定したデータ型のカラムだけ除外する	df.select_dtypes(exclude=typeList)
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
データ列を箱髭図にする	plt.boxplot(データ列)
グラフで用いるカラーパレットを指定する	sns.set(pallete=パレット名)
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
折れ線グラフの右三角印を青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
棒グラフをライトスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
グラフの描画で色差別なくパレットを使用する	sns.set(pallete='colorblind')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
option: パープルを使う	color = 'purple'
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
ひとつ置きにタプルを得る	aTuple[::2]
option: 色をライトイエローに設定する	color = 'lightyellow'
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
option: グラフの色をゴールデンロッドに変更する	color = 'goldenrod'
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームのある列の分散	df['列A'].var()
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
０で全要素を初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
オリーブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
文字列の開始位置と終了位置の間に部分文字列があるかどうか調べる	s.find(sub, start, end) != -1
指定した列のカテゴリで集計し、標準偏差を算出する	df.groupby('列A').std()
列を累加する	itertools.accumulate(iterable)
option: エラーを無視するように指定する	errors = 'ignore'
折り返しをオフに変更する	pd.set_option('expand_frame_repr', False)
リストを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
文字列の先頭から空白を取り除く	s.lstrip()
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
ポスター用にプロットを変更する	sns.set(context='poster')
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
文字列中の部分文字列の登場	s.count(sub)
文字列が部分文字列で終わるか調べる	s.endswith(sub)
縦棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
データフレームの一部の列の中に文字列があるかどうか	df[['列A', '列B']].isin([value])
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
ミスティローズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
キューの最後	deq[-1]
データフレームから重複を残さず重複を削除する	df.drop_duplicates(keep=False)
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
マルーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
ライトコーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
本日の曜日を使う	datetime.datetime.today().weekday()
数式の変数を数値で置き換える	e.subs(z, e2)
option: SJISを使う	encoding = 'shift_jis'
option: ライトコーラル色を用いる	color = 'lightcoral'
散布図の色をやわらかい青にする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
イテラブルを累加したイテラブルを求める	itertools.accumulate(iterable)
表データのあるカラムのタイムゾーンを指定する	df['列A'].tz_convert('Asia/Tokyo')
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
散布図をナバホホワイト色として描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
実数のn乗	pow(x, n)
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
耐火レンガ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategray')
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
データシリーズの時を使う	ds.dt.hour
ビスク色でヒストグラムを描画する	plt.hist(データ列, color='bisque')
リストをビン数nで分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
配列とリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
複素数型のゼロ埋めされた配列	np.zeros(要素数, dtype=bool)
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
文字列は漢字かどうか調べる	('\u4E00' <= ch <= '\u9FD0')
相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
横棒グラフをプラム色を用いて描画する	plt.barh(データ列x, データ列y, color='plum')
パパイヤウィップ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
多次元尺度構成法を用いて多次元データをパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフを真紅色として描画する	plt.plot(データ列x, データ列y, color='crimson')
標準入力から1文字だけ読む	sys.stdin.read(1)
８ビット整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int8)
xが一桁の正の数	0 <= x <= 9
配列の歪度を算出する	scipy.stats.skew(配列, bias=False)
散布図の▽マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
option: 濃い青にグラフの色を指定する	color = 'darkblue'
オブジェクトからプロパティを消す	delattr(obj, プロパティ名)
option: ダークターコイズを使う	color = 'darkturquoise'
青緑色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
データ列をインポートする	import pandas as pd
ヒストグラムを複数横に並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
折れ線グラフの四角マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
nが-9以上、9以下かどうか調べる	-9 <= n <= 9
ライムグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
紺碧にヒストグラムの色を設定する	plt.hist(データ列, color='azure')
データフレームの選択したカラムを10の位で丸める	df[['列A', '列B']].round(-1)
文字列をセンタリングする	s.center(文字列幅)
データフレームを各列毎にグループ化して文字列というグループの個数を算出する	df.groupby(column).size()[s]
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームのカラムの標準偏差	df['列A'].std()
データフレームが正規分布からどの程度、歪んでいるか調べる	df.kurt()
折れ線グラフの色をタンに変更する	plt.plot(データ列x, データ列y, color='tan')
カラム名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
文字列中からパターンにASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
変数を緑色で出力する	print(f'\033[32m{value}\033[0m')
カラーバーを水平でつける	plt.colorbar(orientation='horizontal')
option: ラベンダー色を用いる	color = 'lavender'
部分文字列が部分文字列で開始するか調べる	s.startswith(sub)
二進数文字列を整数にする	int(s, 2)
データフレームの選択したカラムの中に文字列があるか	df[['列A', '列B']].isin([value])
配列とリストについての散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
リストを白色化する	f'\033[37m{value}\033[0m'
option: 青紫色を使う	color = 'violet'
ドジャーブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
nがn2で割り切れる	n % n2 == 0
カラーバーを横向きで描く	plt.colorbar(orientation='horizontal')
ヒストグラムの色をアンティークホワイトにセットする	plt.hist(データ列, color='antiquewhite')
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
nを2進リテラルに変換する	bin(n)
カーネル密度推定グラフ描画でを使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
横棒グラフを紺碧色として描画する	plt.barh(データ列x, データ列y, color='azure')
option: ドジャーブルー色を用いる	color = 'dodgerblue'
データフレームの重複していない行だけを選ぶ	df[~ df.duplicated(keep=False)]
文字列を改行によって分割する	s.splitlines()
option: グラフの種類を一点鎖線に指定する	linestyle = 'dashbot'
文字列の左側から空白を消す	s.lstrip(' ')
ディレクトリをfilepathに設定する	os.chdir(os.dirname(filepath))
ファイルのディレクトリ名	os.path.dirname(filepath)
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
option: ダークバイオレットを使う	color = 'darkviolet'
option: パールゴールデンロッドを使用する	color = 'palegoldenrod'
グラフの目的を論文にする	sns.set(context='paper')
option: フォントの色をペルーに設定する	color = 'peru'
year年のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
文字列を空白によって区切って、整数リストに変換する	map(int, s.split())
データフレームのふたつの列をドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
option: プラム色を用いる	color = 'plum'
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
データフレームのある列の中にある日付データと日付データの数を数える	df['列A'].isin([value, value2]).sum()
マゼンタ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
データフレームから型リストのデータ型の列だけ除外する	df.select_dtypes(exclude=typeList)
処理中の例外を情報	sys.exc_info()
ヒストグラムをレモンシフォン色を用いて描画する	plt.hist(データ列, color='lemonchiffon')
nの二進数文字列	bin(n)[2:]
あるカラムの欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
ヒストグラムを小麦色色として描画する	plt.hist(データ列, color='wheat')
グラフを描画する準備をする	import matplotlib.pyplot as plt
折れ線グラフの下三角印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
オプションで標準出力に出力する	file = sys.stdout
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
パレットトルコイズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
ヒストグラムをフクシア色として描画する	plt.hist(データ列, color='fuchsia')
インタプリタの実行ファイルの絶対パスを知る	sys.executable
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
データフレームを欠損値を含めてあるカラムの値で集約する	df.groupby('列A', dropna=False)
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
n2がnより大きく、かつ、n3未満か	n < n2 and n2 < n3
nをn2で割った余りをnに代入する	n %= n2
タプルの中の最小値	min(aTuple)
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
プロットの背景色を暗くする	sns.set(style='darkgrid')
0からnまでの整数列	list(range(n+1))
ヒストグラムの色をタンに変更する	plt.hist(データ列, color='tan')
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
スクリプトのファイルの名前	sys.argv[0]
option: スラグレーにグラフの色を設定する	color = 'slategrey'
正規化された度数分布図を描画する	plt.hist(データ列, density=True)
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
ファイル名がJSONファイルか	filename.endswith('.json')
ミスティローズ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
文字列は文字列より辞書順で後か調べる	s > s2
JSONファイルのファイルを読み込んで、dataとする	data = json.load(fin)
データフレームを2つの列の値で分類して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
折れ線グラフの色を黄色に指定する	plt.plot(データ列x, データ列y, color='yellow')
L2ノルムでデータを正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
最大値・最小値の範囲を用いて一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
データフレームをグループ化し分散を求める	df.groupby('列A').var()
散布図の左三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
実数が有限か調べる	math.isfinite(x)
配列の尖りを求める	scipy.stats.kurtosis(配列, bias=False)
散布図を四角印を使って描画する	plt.scatter(データ列x, データ列y, marker='s')

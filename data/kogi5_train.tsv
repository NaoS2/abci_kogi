数列とリストについての散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
＜オプション＞グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
＜オプション＞シエナ色を使う	color = 'sienna'
データフレームを1000の位で丸めて、整数にする	df.round(-3).astype(int)
数式を数値にする	float(e)
リストから配列を作る	np.array(aList)
三変数の最小値を求める	min(x, y, z)
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
項目名ワード引数として辞書に更新する	aDict.update(**kwargs)
＜オプション＞グラフの色を白に設定する	color = 'white'
３二ビット整数型のゼロ埋めした配列を作る	np.zeros(要素数, dtype=np.int16)
ヒストグラムの色をブラックに変更する	plt.hist(データ列, color='black')
ヒストグラムの色をライトコーラルに変更する	plt.hist(データ列, color='lightcoral')
データフレームを列によってによって大きい順にソートする	df.sort_values(by=column, ascending=False)
＜オプション＞フォレストグリーン色を使う	color = 'forestgreen'
黒い右三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='>', c='k')
両端キューの右側	deq[-1]
列とイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
日付データは日付データと同時かどうか調べる	aDate == aDate2
折れ線グラフに右三角印を使う	plt.plot(データ列, データ列2, marker='>')
ファイルからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
＜オプション＞ライトグレー色を使う	color = 'lightgray'
＜オプション＞ミスティローズ色を使用する	color = 'mistyrose'
データフレームの欠損値を後の値で補う	df.fillna(method='bfill')
＜オプション＞赤を使用する	color = 'red'
折れ線グラフを描画して色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
データ列とリストについての散布図にカラーコードのバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
データフレームのカラムの値が欠損値	df[col].isna()
データフレームのリスト列のNaNを最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
＜オプション＞コーンズシルク色を用いる	color = 'cornsilk'
リストとイテラブルについての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
ファイルのファイル名を求める	os.path.basename(filepath)
リストの要素を小さい順に並べる	sorted(aList, reverse=True)
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
タプルの末尾を取り除く	aTuple[:-1]
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
グラフを使う	from sympy import N
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
線グラフの色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
リストをヒストグラムで可視化する	plt.hist(aList)
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
行列の行ごとの最小値	np.min(aArray, axis=1)
折れ線グラフを描画して、その色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
データフレームとデータ列を連結する	pd.concat([df, ds], axis=1)
＜オプション＞マゼンタ色を使う	color = 'magenta'
＜オプション＞パパイヤウィップ色を使う	color = 'papayawhip'
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
オブジェクトが整数クラスかどうか調べる	isinstance(obj, int)
ヒストグラムの色をアリスブルーに指定する	plt.hist(データ列, color='aliceblue')
プロットの描画で暗い色を使う	sns.set(pallete='dark')
文字列の中で複数行対応として正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
＜オプション＞ブラックを使う	color = 'black'
＜オプション＞グラフの色をミントクリームに変更する	color = 'mintcream'
＜オプション＞改行を区切り記号で使う	sep = '\n'
実数のタンジェントの逆数	math.atan(x)
＜オプション＞深紅を使う	color = 'crimson'
リストとイテラブルについて散布図を描画して、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
＜オプション＞ダークスレートブルー色を使う	color = 'darkslateblue'
データ列とリストの折れ線を描画する	plt.plot(xdata, ydata)
両端キューをタプルにする	tuple(deq)
＜オプション＞下三角マーカーを使う	marker = 'v'
文字列の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategray')
ファイルの絶対パス	os.path.abspath(filepath)
オーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='orchid')
データフレームの列の名前の一覧を使う	df.columns
組のn番目の	aTuple[n]
データフレームの列の平均	df[col].mean()
平均値でデータ列の欠損値を置換する	ds.fillna(ds.mean())
nが偶数か調べる	n % 2 == 0
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
＜オプション＞ターコイズ色を用いる	color = 'turquoise'
折れ線グラフのスタイルを実線に設定する	plt.plot(データ列, データ列2, linestyle='solid')
折れ線グラフに星マーカーを使う	plt.plot(データ列, データ列2, marker='*')
配列と配列で暗いの折れ線グラフを描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
配列とリストでパステル調のの折れ線を描画し、、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ベクトルを2次元1行に変形する	aArray.reshape(1, -1)
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
折れ線グラフの色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
折れ線グラフを描画して、その色をミディアムパープルに変更する	plt.plot(データ列, データ列2, color='mediumpurple')
名前付きタプルを使う	import collections
＜オプション＞パープルを使用する	color = 'purple'
日付データをISO8601書式の文字列に変換する	aDate.isoformat()
折れ線グラフを描画して、その色をスレートブルーに指定する	plt.plot(データ列, データ列2, color='slateblue')
＜オプション＞ラベンダー色を使う	color = 'lavender'
濃いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
折れ線グラフのアルファをalphaに変更する	plt.plot(xdata, ydata, alpha=alpha)
折れ線グラフに緑色の下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
イテラブルを文字列リストに変換して部分文字列で連結する	sub.join(map(str, iterable))
数列とリストについて散布図を描画し、、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
２つの数値を文字列で区切って出力する	print(value, value2, sep=s)
四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s')
配列の累積積	np.cumprod(aArray)
線グラフの色をパールゴールデンロッドにセットする	plt.plot(データ列, データ列2, color='palegoldenrod')
ヒストグラムを描画して、その色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
＜オプション＞先頭の行をカラムの名前にセットする	header = 0
スクリプトのファイル名	sys.argv[0]
＜オプション＞暗い赤色を使用する	color = 'darkred'
カウンタ同士で積集合	aCounter & aCounter2
イテラブルから最大長nの両端キューを生成する	collections.deque(iterable, maxlen=n)
データフレームからn行、サンプリングする	df.sample(n)
タプルの最後のn要素を取り除く	aTuple[:-n]
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
全要素を０で初期化された行列	np.zeros(行数, 列数)
散布図を黒いバツマーカーで描く	plt.plot(xdata, ydata, marker='x', c='k')
タイムスタンプデータを数値に変換する	aDatetime.timestamp()
リストの要素を小さい順にソートする	sorted(aList, reverse=False)
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
カラーパレットを淡くする	sns.set(pallete='muted')
ミスティローズにヒストグラムの色を設定する	plt.hist(データ列, color='mistyrose')
黒い左三角マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='<', c='k')
ヒストグラムを描画して、その色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
折れ線グラフの菱形マーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
線グラフの色を耐火レンガにセットする	plt.plot(データ列, データ列2, color='firebrick')
スクリプトファイルのフォルダ名	os.path.dirname(os.path.abspath(__file__))
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
ヒストグラムの透明度をxに設定する	plt.hist(データ列, alpha=x)
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
＜オプション＞エンコーディングを文字コードtextに指定する	encoding = text
淡い色の折れ線グラフを描画して、線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='muted')
データフレームをグループ化し各列に対し個数を求める	df.groupby(column)[column2].count()
黒色の下三角マーカーを配列とリストについての散布図にプロットする	plt.plot(xdata, ydata, marker='v', c='k')
色差別ない色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
ヒストグラムを描画して、その色をブラウンに設定する	plt.hist(データ列, color='brown')
折れ線グラフを描画してその色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x')
数値を太字化する	f'\033[1m{value}\033[0m'
配列とリストの散布図を描いて、マーカーを右三角に変更する	plt.plot(xdata, ydata, marker='>')
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
kを底とする小数点数の対数を計算する	math.log(x, k)
ヒストグラムの色を青くする	plt.hist(データ列, color='b')
＜オプション＞グリーンにグラフの色を指定する	color = 'green'
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
データ列の分	ds.dt.minute
データフレームからランダムにn行を選択する	df.sample(n)
文字列中の部分文字列を文字列に全部置き換える	s.replace(sub, newsub)
データ列を折れ線グラフに描画して、マーカーをポイント印にする	plt.plot(データ列, データ列2, marker='.')
プロットの用途を画面に設定する	sns.set(context='notebook')
＜オプション＞線幅をnに設定する	linewidth = n
変数をシアンで表示する	print(f'\033[36m{value}\033[0m')
折れ線グラフの四角印の線幅をnに変更する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
折れ線グラフを描画してその色をグレーに指定する	plt.plot(データ列, データ列2, color='gray')
青いバツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
折れ線グラフを描画して、その色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
実数の双曲線余弦を計算する	math.cosh(x)
本日が何曜日か知る	datetime.datetime.today().weekday()
集合のイミュータブル版	frozenset(aSet)
Pandasで、UNIX時間のデータフレームのcollからdatetime64型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
＜オプション＞ハニーデューにグラフの色を変更する	color = 'honeydew'
イテラブルとリストについての散布図に黒い丸マーカーを描く	plt.plot(xdata, ydata, marker='o', c='k')
折れ線グラフを描画して、その色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
ヒストグラムの色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
データフレームのカラムがどれだけ、分散しているか確認する	df[col].var()
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
＜オプション＞ダークオーキッドを使う	color = 'darkorchid'
淡いの折れ線の色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
データフレームから指定された二つの列を抽出する	df[[column, column2]]
変数名をキーとして辞書	dict(name=element)
折れ線グラフを描画して、その色をダークバイオレットにする	plt.plot(データ列, データ列2, color='darkviolet')
実数が正か	x > 0
表データの列がxでないデータをフィルタする	df[df[column] == x]
行列の標準偏差	np.std(aArray)
等差数列から整数乱数を発生させる	random.randrange(start, end, step)
リストをビン分割する	pd.cut(aList, aList)
表データの列をインデックスに設定する	df.set_index(column)
黒色の大バツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='X', c='k')
折れ線グラフの色をフローラルホワイトに変更する	plt.plot(データ列, データ列2, color='floralwhite')
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
データフレームの列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
折れ線グラフを描画して、その色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
リストが空かどうか調べる	len(aList) == 0
濃い色の折れ線グラフを描画し、、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='deep')
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数を数える	s.count(sub, start, end)
で使える色名の一覧を知る	matplotlib.colors.cnames
n回だけ文字列を置き換える	s.replace(sub, newsub, n)
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
カラーコードの右三角マーカーを配列と数列についての散布図に描く	plt.plot(xdata, ydata, marker='>', c=rgb)
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
ASCII限定としてパターンで文字列を分割する	re.split(pattern, s, flags=re.ASCI)
カラムの欠損値を最小値で置換する	ds.fillna(ds.min())
明るいグラフの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
データフレームの欠損値をモードに変更する	df.fillna(df.mode().iloc[0])
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
nがn2の倍数か	n % n2 == 0
文字列はキーワードか	keyword.iskeyword(s)
文字列がリストに含まれないかどうか調べる	element not in aList
カラーコードの下三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='v', c=rgb)
変数を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
黒色の丸マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='o', c='k')
配列としてデータフレームの指定された列を抽出する	df[column].values
＜オプション＞色をミディアムオーキッドに設定する	color = 'mediumorchid'
Pandasで書式でデータフレームのcollをタイムスタンプに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
実数の小数点以下を丸める	round(x)
折れ線グラフに黒い▽マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
日付データからn時間分減算する	aDate - datetime.timedelta(hours=n)
データ列が何日か見る	ds.dt.day
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
文字列を下線付きにする	f'\033[4m{value}\033[0m'
ヒストグラムを描画して、その色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
線幅nの四角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
リストとリストについて散布図を描画して、菱形マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
ヒストグラムを描画して、色をミディアムオーキッドに変更する	plt.hist(データ列, color='mediumorchid')
文字列中にひとつでも非英数字が含まれるかどうか調べる	any(not c.isalnum() for c in s)
＜オプション＞グラフの色をナバホホワイトに変更する	color = 'navajowhite'
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
文字列を部分文字列で二分する	s.partition(sub)
＜オプション＞グラフの色をライトイエローに設定する	color = 'lightyellow'
リストと配列についてパステル調の色の折れ線を描画し、、線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='pastel')
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
折れ線グラフを描画して、色をネイビーに指定する	plt.plot(データ列, データ列2, color='navy')
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
行列の行を選択する	aArray[行番号]
二つのオブジェクトが同一かどうか調べる	obj is obj2
折れ線グラフを描画して、その色をビスクに指定する	plt.plot(データ列, データ列2, color='bisque')
データフレームの中に日付データと文字列がある	df.isin([value, value2])
線グラフの色をオーキッドに変更する	plt.plot(データ列, データ列2, color='orchid')
nが-9以上9以下	-9 <= n <= 9
リストとデータ列についての散布図に三角マーカーをプロットする	plt.plot(xdata, ydata, marker='^')
ヒストグラムを描画して、色を赤くする	plt.hist(データ列, color='r')
n2がn以上、かつ、n3以下かどうか	n <= n2 and n2 <= n3
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
文字列がタプルの要素か調べる	element in aTuple
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
＜オプション＞グラフの色をダークオレンジに指定する	color = 'darkorange'
データフレームのカラムを小数点以下n桁で四捨五入する	df[col].round(n)
nとn2が等しい	n == n2
ファイルを改行を取り除いて一行ずつ読む	f.readline()
折れ線グラフを描画して色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
データフレームから数値データを抽出する	df.select_dtypes('number')
タイムスタンプデータが日付時刻データと同時か調べる	aDatetime == aDatetime2
xの小数点以下'3'桁までを表示する	print(':.3f'.format(x))
折れ線グラフに線幅nの大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
リストと数列の黒い明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
リストとリストについて散布図を描画して、マーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
折れ線グラフを描画して、その色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
タプルを展開して表示する	print(*aTuple)
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
文字列は十進数字か調べる	s.isdecimal()
整数nがリストのどれかか調べる	n in aList
集合＼集合	aSet.difference(aSet2)
データフレームの列の中にある日付データの合計をカウントする	df[col].isin([value]).sum()
カウンタをリストに変換する	list(aCounter)
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
＜オプション＞丸マーカーを用いる	marker = 'o'
データフレームのカラムの第一四分位数を求める	df[col].quantile(0.25)
データ列の欠損値を前の値に設定する	ds.fillna(method='ffill')
配列をビン数nで分割する	pd.cut(aArray, n)
現在を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
標準エラー	sys.stderr
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
文字列全体を正規表現に大文字・小文字を無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
折れ線グラフを描画して、その色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
整数nが配列のいづれかか調べる	n in aArray
データ列がどの程度、分散しているか見る	ds.var()
線グラフを描画して、色をライトスレイグレーに変更する	plt.plot(データ列, データ列2, color='lightslategrey')
折れ線グラフのポイントマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='.', markersize=n)
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()
浮動小数点数を実数で除算した余り	x % y
赤い淡いを描く	plt.plot(xdata, ydata, linestyle='muted', color='r')
Pandasで、フォーマットでデータフレームのcollをタイムスタンプ型にする	pd.to_datetime(df[col], format='%Y-%m-%d')
カウンタのそれぞれの項目を、そのカウントだけリストとして得る	aCounter.elements()
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
ファイルパスを書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='w')
ライトグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgreen')
本日をタプルにする	datetime.datetime.today().timetuple()
＜オプション＞ヘッダを連番に設定する	header = None
データ列を折れ線グラフに描画して、マーカーを下三角印にする	plt.plot(データ列, データ列2, marker='v')
整数で実数を割る	x / y
カラムの平均値	ds.mean()
文字列を末尾から空白で分割する	s.rsplit()
実数のn乗の数剰余	pow(x, n, y)
カラーコードの▲マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^', c=rgb)
整数から実数を引く	x - y
緑色のダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
文字列を最後の部分文字列で二分し後半の文字列を使う	s.rpartition(sub)[-1]
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
イテラブルから両端キューを用意する	collections.deque(iterable)
startからendの区間のヒストグラムを用いてリストを描画する	plt.hist(データ列, range=(start, end))
リストと数列の散布図に黒い星マーカーを描く	plt.plot(xdata, ydata, marker='*', c='k')
折れ線グラフを描画して色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
折れ線グラフにラベルを設定する	plt.plot(xdata, ydata, label=untitled)
＜オプション＞グラフの色をパレットトルコイズに指定する	color = 'paleturquoise'
破壊的にデータフレームを昇順に列名リストによってソートする	df.sort_values(by=column, ascending=True, inplace=True)
８進数字を全部見る	string.octdigits
データフレームのグループ毎の分散	df.groupby(column).var()
破線で折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashed')
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
＜オプション＞シャルトリューズに色を設定する	color = 'chartreuse'
文字列がリストに含まれる	element in aList
折れ線グラフの▽マーカーを青くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
ヒストグラムを描画して、その色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
折れ線グラフを描画して、その色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
列をキーにして2つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
データ列とリストの相関を可視化する	plt.scatter(xdata, ydata)
＜オプション＞グラフの色をサーモンにセットする	color = 'salmon'
逆行列	np.linalg.inv(aArray)
＜オプション＞タブを分割記号で使う	sep = '\t'
オブジェクトの参照カウントを使う	sys.getrefcount(obj)
bとn2から成るペア	(n, n2)
双方向キューのstart〜endの部分値	collections.deque(itertools.islice(deq, start, end))
列をキーにして二つのデータフレームを全ジョインする	pd.merge(df, df2, on=column, how='outer')
異なる列をキーとして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
折れ線グラフを描画して、その色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
折れ線グラフに線幅nのポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
全要素を1で初期化された行列	np.ones(行数, 列数, dtype=np.int)
＜オプション＞△マーカーを使用する	marker = '^'
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
折れ線グラフを描画して、その色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
データフレームのインデックスの名前を、nameからname2に付け直す	df.rename(index={name: name2})
折れ線グラフを描画して、その色をサドルブラウンに変更する	plt.plot(データ列, データ列2, color='saddlebrown')
リストの各要素を関数に適用した結果で並べる	sorted(aList, key=func)
＜オプション＞文字コードtextを使用する	encoding = text
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
nが-9以上、9以下かどうか調べる	-9 <= n <= 9
線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
データフレームを列によってソートしてNaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
ダークオーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkorchid')
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
＜オプション＞ゴールド色を用いる	color = 'gold'
＜オプション＞文字コードをEUCに変更する	encoding = 'euc_jp'
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
全般的に色を暗くする	sns.set(pallete='dark')
ヒストグラムを描画して、色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
折れ線グラフの左三角マーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='<', markersize=n)
nとn2の値を足してnにする	n += n2
データフレームの中にある文字列と文字列の個数を数える	df.isin([value, value2]).sum()
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
＜オプション＞ビスク色を使う	color = 'bisque'
赤いバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
文字列がn回繰り返すイテラブルを得る	itertools.repeat(element, n)
＜オプション＞グラフの色をダークグレーに指定する	color = 'darkgrey'
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
カウンタの正のカウントのみ残す	+aCounter
列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
ポイントマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='.')
n個にデータフレームの中の列を等間隔でビン分割する	pd.cut(df[col], n)
＜オプション＞バツマーカーを使う	marker = 'x'
ファイルの拡張子を見る	os.path.splitext(filepath)[1].lstrip('.')
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
折れ線グラフを描画して色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
オブジェクトはリストかタプル	isinstance(obj, (list)
カラムを100の位で丸めて、整数型にする	ds.round(-2).astype(int)
折れ線グラフの色をミディアムスプリンググリーンに変更する	plt.plot(データ列, データ列2, color='mediumspringgreen')
リストの先頭	aList[0]
＜オプション＞色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
データフレームをCSVから読む	pd.read_csv(filename, sep=',')
８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int8)
ヒストグラムを描画して、色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
ヒストグラムを描画してその色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
リストとリストの散布図を描画し、、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
デフォルトを適用する	sns.set()
散布図に△マーカーを使う	plt.plot(xdata, ydata, marker='^')
nが1、もしくは2か確認する	n == 1 or n == 2
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
分割数nでデータ列を分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
リストを逆順にする	aList[::-1]
タプルの中の最小値を求める	min(aTuple)
データ列と配列について散布図をプロットし、、大バツマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='X', c=rgb)
リストとリストについての散布図に黒色の大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
ファイルパスの拡張子付きのファイル名を見る	os.path.basename(filepath)
散布図を重なりを見やすくパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
リスト中の要素が全て真か調べる	all(aList)
リストをy軸配列をx軸として大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
ヒストグラムを描画して、その色をラベンダーに変更する	plt.hist(データ列, color='lavender')
＜オプション＞グラフの色をラベンダーに指定する	color = 'lavender'
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
ヒストグラムを描画して、色をシスルにセットする	plt.hist(データ列, color='thistle')
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
ヒストグラムを描画して、その色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
＜オプション＞ダークオーキッド色を使用する	color = 'darkorchid'
＜オプション＞グラフの色をライトシアンにセットする	color = 'lightcyan'
データフレームのそれぞれのグループの個数	df.groupby(column).count()
ピンクにヒストグラムの色をセットする	plt.hist(データ列, color='pink')
折れ線グラフのマーカーをバツにする	plt.plot(データ列, データ列2, marker='x')
ダークオレンジ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkorange')
＜オプション＞色をミディアムパープルに設定する	color = 'mediumpurple'
黒い濃いを描く	plt.plot(xdata, ydata, linestyle='deep', color='k')
マッピングにマップの項目を更新する	aDict.update(aDict2)
線グラフの色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
データフレームのリストカラムの最頻値	df[aList].mode()
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
ベクトル演算をする	import numpy as np
ヒストグラムを描画してその色を青緑に設定する	plt.hist(データ列, color='teal')
＜オプション＞シルバー色を使う	color = 'silver'
配列とリストについての散布図に赤い大バツマーカーを描く	plt.plot(xdata, ydata, marker='X', c='r')
折れ線グラフの色をロイヤルブルーに変更する	plt.plot(データ列, データ列2, color='royalblue')
折れ線グラフの色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
青紫色の線グラフを描画する	plt.plot(データ列, データ列2, color='violet')
スクリプトのファイルの名前	sys.argv[0]
データフレームのリストカラムの欠損値を最頻値に指定する	df[aList].fillna(df[aList].mode().iloc[0])
ファイルをクローズする	f.close()
タプルとタプルを結合する	aTuple + aTuple2
各列毎にデータフレームをグループ化して列の標準偏差を求める	df.groupby(column)[column2].std()
イテラブルに列を続けた列	itertools.chain(iterable, iterable2)
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkseagreen')
＜オプション＞グラフの色を小麦色に設定する	color = 'wheat'
日付データが何年か知る	aDate.year
データフレームのリストカラムは正規分布からどの程度、尖っているか調べる	df[aList].skew()
散布図をカラーコードの四角マーカーで描く	plt.plot(xdata, ydata, marker='s', c=rgb)
データフレームを各列と列の組み合わせ毎にグループ化し、合計を求める	df.groupby([column, column2], as_index=False).sum()
文字列を分割する	s.partition(sep)
データフレームの第一四分位数	df.quantile(0.25)
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
整数nを16進文字列に変換する	hex(n)[2:]
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
現在が何月か知る	datetime.datetime.today().month
nをn2だけ減少させる	n -= n2
実数を小数点以下第一位で四捨五入する	round(x, 1)
２つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
データ列を折れ線グラフに描画して、印を左三角印にする	plt.plot(データ列, データ列2, marker='<')
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
データフレームから重複する行を破壊的に削除する	df.drop_duplicates(inplace=True)
リストとリストについての散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
日付時刻データにn週間分、足す	aDatetime + datetime.timedelta(weeks=n)
濃いの色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
タブ区切りのファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
predicateFuncがTrueとなるイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
＜オプション＞グラフの色をモカシンに指定する	color = 'moccasin'
パステル調のグラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ASCII限定として正規表現を事前にコンパイルする	re.compile(pattern, flag=re.ASCI)
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
折れ線グラフの丸印を赤くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
列に配列を続けたイテラブル	itertools.chain(iterable, iterable2)
オブジェクトが文字列クラスのインスタンスか調べる	isinstance(obj, str)
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
リストとリストについて破線グラフを描画して、その色を明るいに指定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
データフレームのn行目まで取り出す	df[:n]
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
濃い色のマーカーを用いて散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
複数の列によって昇順にデータフレームを破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
配列とリストの黒い淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='k')
配列と配列の青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
データフレームを各列毎に集約して、列の標準偏差を求める	df.groupby(column)[column2].std()
データ列とイテラブルの散布図を描いて、マーカーを丸にセットする	plt.plot(xdata, ydata, marker='o')
整数nがタプルのどれかか調べる	n in aTuple
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
実数の双曲線余弦	math.cosh(x)
コードポイントの最大値	sys.maxunicode
入力ストリームからn文字、読む	f.read(n)
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
Pythonパスの一覧	sys.path
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
線グラフの色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
ヒストグラムを描画して、色をレベッカパープルに変更する	plt.hist(データ列, color='rebeccapurple')
区切りで文字列を区切って、列挙する	s.split(sep)
散布図を赤い大バツマーカーとして描画する	plt.plot(xdata, ydata, marker='X', c='r')
データフレームの中に文字列とがあるか調べる	df.isin([value, value2])
日付データにn秒を足す	aDate + datetime.timedelta(seconds=n)
空の階層化辞書を作る	collections.ChainMap()
データフレームのリストカラムの平均	df[aList].mean()
データフレームのリストカラムのNaNを直前の値に設定する	df[aList].fillna(method='ffill')
横棒を描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
リストと数列の暗いを描画し、、その色を黒色に設定する	plt.plot(xdata, ydata, linestyle='dark', color='k')
タプル中の最初の文字列を探す	aTuple.index(element)
日付データが日付データより前か調べる	aDate < aDate2
データフレームのn行まで取り出す	df[:n]
データ列の未入力値を第二四分位数で置換する	ds.fillna(ds.median())
線グラフを描画してその色をカデットブルーにする	plt.plot(データ列, データ列2, color='cadetblue')
データフレームの欠損値が存在する行をドロップする	df.dropna()
データ列を折れ線グラフに描画して、印を菱形印にする	plt.plot(データ列, データ列2, marker='D')
折れ線グラフを描画して、その色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
＜オプション＞エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
ヒストグラムの色をオレンジレッドに指定する	plt.hist(データ列, color='orangered')
浮動小数点数を文字列にする	str(x)
双曲線正弦の逆数	math.asinh(x)
全要素を０で初期化された整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int)
実数に実数を掛ける	x * y
文字列を部分文字列で二分し、先頭の文字列を使う	s.partition(sub)[0]
ヒストグラムを描画してその色を赤に設定する	plt.hist(データ列, color='red')
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
イテラブルとイテラブルの暗いグラフを描画してその色を黒くする	plt.plot(xdata, ydata, linestyle='dark', color='k')
既存のファイルをUTF8を用いて追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
リストをビン数nとしてビニングし、、namesのラベルをつける	pd.cut(aList, n, labels=names)
ペルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='peru')
実数のtanの逆数	math.atan(x)
ビン数nとして列をビンニングする	pd.cut(ds, n)
グラフで使うフォントをfontNameに指定する	sns.set(font=fontName)
マッピングの浅いコピーを用意する	aDict.copy()
＜オプション＞namesをカラムの名前に増やす	names = names
データ列と数列についての散布図に文字列という凡例用のラベルを設定する	plt.scatter(xdata, xdata, label=s)
折れ線グラフの▲マーカーを黒くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
＜オプション＞グラフの色を青に変更する	color = 'blue'
折れ線グラフを描画して、色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
ヒストグラムを描画してその色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
追加できるようにファイルを開く]	open(filepath, mode='a')
グラフの用途をプレゼンに設定する	sns.set(context='talk')
値を赤色で表示する	print(f'\033[31m{value}\033[0m')
変数を太字でプリントする	print(f'\033[1m{value}\033[0m')
ヒストグラムを描画して、その色をプラムに設定する	plt.hist(データ列, color='plum')
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
文字列中に非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
＜オプション＞改行コードをUNIXに設定する	newline = '\n'
折れ線グラフのポイント印のサイズをnにする	plt.plot(データ列, データ列2, marker='.', markersize=n)
データフレームの列名一覧で指定された列を消す	df.drop(columns, axis=1)
文字列が全て英数字かどうか調べる	s.isalnum()
パステル調のグラフの色を青くする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
文字列を右寄せにする	s.rjust(文字列幅)
文字列中にひとつでも非小文字が含まれるか確認する	any(not c.islower() for c in s)
＜オプション＞オレンジ色を使う	color = 'orange'
カラーコードの丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
線グラフを描画して、その色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
リストとリストを使ってパステル調のを描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
整数nをバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big')
nが一桁の整数か調べる	0 <= n <= 9
数列をy座標、リストをx軸と指定して、折れ線グラフをプロットする	plt.plot(xdata, ydata)
データフレームの行がnの行を取り出す	df.loc[n]
＜オプション＞プラムに色を設定する	color = 'plum'
日付データは日付データより後ろか調べる	aDate > aDate2
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
ヒストグラムを描画して、色をミディアムスレートブルーに変更する	plt.hist(データ列, color='mediumslateblue')
横棒グラフを描画し、、中央寄せする	plt.barh(ラベル列, データ列, align='center')
日付時刻データは何秒か知る	aDatetime.second
辞書から項目名の値を得る	aDict.get(key)
ビン数nを用いてリストをビン分割する	pd.cut(aList, n)
タプルの要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
折れ線グラフを描画して、その色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
ベクトルの内積	np.dot(aArray, aArray2)
'A'列と'B'列によってでデータフレームを破壊的に並べる	df.sort_values(by=['A', 'B'], inplace=True)
折れ線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
ヒストグラムを描画して、色をブラックに指定する	plt.hist(データ列, color='black')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
折れ線グラフの色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
リストの最後からn番目以前の部分を取り出す	aList[:-n]
マップのキーの一覧	aDict.keys()
カラーコードに横棒の色を変更する	plt.barh(ラベル列, データ列, color=rgb)
赤い濃いの折れ線グラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='r')
標準出力	sys.stdout
折れ線グラフに描画して、印を左三角印にする	plt.plot(データ列, データ列2, marker='<')
データフレームを列で昇順にソートする	df.sort_values(by=column, ascending=True)
二つの集合が集合と交わりを持たないかどうか	aSet.isdisjoint(aSet2)
イテラブル自身を2回あわせた直積を求める	itertools.product(iterable, repeat=2)
リストのn番目からn2番目までの部分	aList[n:n2]
リストを展開して出力する	print(*aList)
リストの各値を関数に適用した結果で並べ直す	sorted(aList, key=func)
キューが空でないか調べる	len(deq) != 0
今日のタイムスタンプ	datetime.datetime.today()
線幅nのクロスマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
浮動小数点数の二乗を求める	x ** 2
変数を青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
キーが辞書に存在するか調べる	key in aDict
SJISで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
データフレームを列によってグループ化してそれぞれのグループごとの最大値を求める	df.groupby(column).max()
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
マッピングから最後に追加した値をポップする	aDict.popitem()
リストの先頭の要素を見る	aList[0]
キーがマップに存在しないとき要素を追加する	aDict.setdefault(key, element)
線グラフの色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
データフレームのカラムの中の未入力値の合計を数える	df[col].isna().sum()
データフレームからn行、ランダムサンプリングする	df.sample(n)
＜オプション＞グレーを使う	color = 'grey'
折れ線グラフを描画して、その色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
辞書の浅いコピーを作る	aDict.copy()
数列とデータ列で淡いグラフを描いて線幅をnに指定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ヒストグラムの色をコーンフラワーブルーにセットする	plt.hist(データ列, color='cornflowerblue')
データ列を折れ線グラフに描画して、マーカーを▲印にする	plt.plot(データ列, データ列2, marker='^')
ヒストグラムを描画して、その色をディムグレーに変更する	plt.hist(データ列, color='dimgrey')
Pandasで、タイムスタンプのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
ヒストグラムを描画してその色をミディアムアクアマリンにセットする	plt.hist(データ列, color='mediumaquamarine')
データフレームのリストカラムが正規分布からどれだけ歪んでいるか確認する	df[aList].kurt()
データフレームのn行目を削除する	df.drop(n, axis=0)
自然数の最大公約数	math.gcd(n, n2)
サブクラスか調べる	issubclass(サブクラス, クラス)
nが1、もしくは2、もしくは3に等しいかどうか確認する	n == 1 or n == 2 or n == 3
表示可能な最大行数を増やす	pd.set_option('display.max_rows', n)
出力ストリーム全体をリストにする	[s.strip() for s in f.readlines()]
文字列がn回繰り返す列を求める	itertools.repeat(element, n)
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
両端キューのn番目に要素を挿入する	deq.insert(n, element)
ヒストグラムを描画して、その色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
ピアソン積率相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
ヒストグラムの色をカーキにセットする	plt.hist(データ列, color='khaki')
イテラブルとデータ列について淡いを描画し、、その色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
文字列をASCII限定としてパターンで分割する	re.split(pattern, s, flags=re.ASCI)
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
データフレームの欠損値を平均値で置き換える	df.fillna(df.mean())
ライトシアンにヒストグラムの色を変更する	plt.hist(データ列, color='lightcyan')
アルファベットの大文字を使う	string.ascii_uppercase
ヒストグラムの色をアンティークホワイトに変更する	plt.hist(データ列, color='antiquewhite')
要素∉セット	element not in aSet
分子割る分母	fractions.Fraction(分子, 分母)
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
改行なしに文字列をプリントする	print(value, end='')
タプルとタプルを連結する	aTuple + aTuple2
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
標準入力から1行読み取る	input()
データフレームを小数点以下n桁で丸める	df.round(n)
文字列が組に含まれない	element not in aTuple
Pandasでデータ列を日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
＜オプション＞ライトグレー色を用いる	color = 'lightgrey'
＜オプション＞グラフの色をブランチドアーモンドにする	color = 'blanchedalmond'
日付データの曜日を使う	aDate.weekday()
線グラフの色をゴーストホワイトに変更する	plt.plot(データ列, データ列2, color='ghostwhite')
折れ線グラフのポイントマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
散布図に濃い色のマーカーを使用する	plt.plot(xdata, ydata, c='deep')
イテラブルとイテラブルについて青い濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
横棒グラフを描画する	plt.barh(ラベル列, データ列)
データ列を折れ線グラフに描画して、印を大バツにする	plt.plot(データ列, データ列2, marker='X')
数列とリストについて散布図を描画して、マーカーを大バツに指定する	plt.plot(xdata, ydata, marker='X')
データ列の空文字をNaNに変換しドロップする	ds.replace('', np.nan).dropna()
２つのデータフレームを結合する	pd.merge(df, df2)
カラムの欠損値を直後の値に設定する	ds.fillna(method='bfill')
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
中央値でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(df[aList].median())
文字列の終了位置より前に部分文字列があるか調べる	s.find(sub, 0, end) != -1
数列と配列の青色の濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
文字列は十進数字	s.isdecimal()
日付時刻データにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を計算する	df.groupby([column, column2], as_index=False).max()
黒い四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='k')
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
文字列のn番目を使う	s[n]
疑似乱数を生成する	random.random()
ヒストグラムを描画してその色をリネンに指定する	plt.hist(データ列, color='linen')
自然対数を求める	math.log(x)
ヒストグラムを描画してその色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
リストと配列の青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
ヒストグラムを描画して色を紺に設定する	plt.hist(データ列, color='darkblue')
イテラブルを累積したイテラブルを求める	itertools.accumulate(iterable, operator.mul)
ヒストグラムを描画して、その色をオリーブに設定する	plt.hist(データ列, color='olive')
整数nを十六進表現にする	hex(n)
nからn2の値を引いてnに代入する	n -= n2
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
nが1もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
プロットの凡例の位置を(x,y)に指定する	plt.legend(loc=(x, y))
データフレームのカラムの一意な値の個数	df[col].nunique()
散布図を赤いダイアモンドマーカーとして描画する	plt.plot(xdata, ydata, marker='D', c='r')
ヒストグラムを描画して、その色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
実数を三乗する	x ** 3
折れ線グラフを描画して、色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
データ列の値が欠損値か調べる	ds.isna()
ビンnのヒストグラムを描画する	plt.hist(データ列, bins=n)
データ列の各データ値の出現数を算出する	ds.value_counts()
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
＜オプション＞バリーウッド色を使う	color = 'burlywood'
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
データフレームのリストカラムの空文字をNaNに変換し、ドロップする	df[aList].replace('', np.nan).dropna()
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
ユニークな各要素の出現回数	np.unique(aArray, return_counts=True)
２つのデータ列を並べて度数分布図にする	plt.hist([データ列, データ列2], color=['b', 'r'])
ヒストグラムを描画して、色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
配列と数列について散布図を描画して、下三角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='v', c=rgb)
改行せず2つの文字列をプリントする	print(value, value2, end='')
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
線グラフの色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
デピンクにヒストグラムの色を変更する	plt.hist(データ列, color='deeppink')
グラフの中の縦軸にラベルを設定する	plt.ylabel(untitled)
1行だけ標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
データフレームの列がx未満のデータを抽出する	df[df[column] < x]
実数を整数に変換する	int(x)
折れ線グラフの右三角マーカーの線幅をnにセットする	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
折れ線グラフを描画して、色をカーキに変更する	plt.plot(データ列, データ列2, color='khaki')
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ダークグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkgray')
色差別ないグラフをイテラブルとデータ列で描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
自然数の最大公約数を算出する	math.gcd(n, n2)
シーケンスを累加する	itertools.accumulate(iterable)
標準入力から1行読む	sys.stdin.readline()
折れ線グラフの色をペールグリーンに変更する	plt.plot(データ列, データ列2, color='palegreen')
文字列の右側は部分文字列	s.endswith(sub)
データフレームの列の欠損値を50パーセンタイルに設定する	df[col].fillna(df[col].median())
濃いの折れ線グラフの色を赤にする	plt.plot(xdata, ydata, linestyle='deep', color='r')
データフレームのNaNを最大値に設定する	df.fillna(df.max())
双方向キューの中に値が存在するかどうか確認する	element in deq
実数が無限大か	math.isinf(x)
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(xdata, ydata, marker='x')
文字列に漢字があるか調べる	re.search('[\u4E00-\u9FD0]', s)
折れ線グラフを描画して、その色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
本日の年数	datetime.datetime.today().year
ヒストグラムを描画して、その色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
ロードされたモジュールのリスト	sys.modules
データフレームをグループ化し列に対し標準偏差を計算する	df.groupby(column)[column2].std()
折れ線グラフを描画して、その色をオレンジに変更する	plt.plot(データ列, データ列2, color='orange')
折れ線グラフを描画して、その色をカーキに変更する	plt.plot(データ列, データ列2, color='khaki')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
配列とリストについてカラーコードの濃いをプロットする	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
数列とデータ列の黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
２つの数値をコロンで区切ってプリントする	print(value, value2, sep=':')
日付データにn時間を加算する	aDate + datetime.timedelta(hours=n)
＜オプション＞マルーン色を使う	color = 'maroon'
ヒストグラムの色をサンディーブラウンに変更する	plt.hist(データ列, color='sandybrown')
リストと配列の散布図を描画して、マーカーを△に指定する	plt.plot(xdata, ydata, marker='^')
折れ線グラフに星印を使用する	plt.plot(データ列, データ列2, marker='*')
赤い右三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='>', c='r')
データフレームを二つの列の値でグループ化し要約統計量を求める	df.groupby(['A', 'B']).describe()
列によってデータフレームをまとめたグループ	df.groupby(column)
ヒストグラムの色を赤くする	plt.hist(データ列, color='r')
辞書の全をクリアする	aDict.clear()
ビン数nとしてデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームのリスト列の欠損値をxに減らす	df[aList].fillna(x)
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
データ列のNaNをメディアンで埋める	ds.fillna(ds.median())
配列とイテラブルの破線グラフを描画してその色をパステル調のに変更する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
＜オプション＞三二ビット整数型を使う	dtype = np.int16
論文にプロットの用途を指定する	sns.set(context='paper')
リストと数列について明るい色の折れ線をプロットして、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='bright')
ふたつの辞書をマージする	aDict | aDict2
カウンタの項目を増やす	aCounter[element] += 1
赤い上三角マーカーをリストとイテラブルについての散布図にプロットする	plt.plot(xdata, ydata, marker='^', c='r')
折れ線グラフを描画して、色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
リストの全要素をクリアにする	aList.clear()
＜オプション＞グラフの色をターコイズに設定する	color = 'turquoise'
各列毎にデータフレームをグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
配列とリストについて散布図をプロットし、、下三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='v', c=rgb)
折れ線グラフを描画して、その色をダークブルーに設定する	plt.plot(データ列, データ列2, color='darkblue')
データフレームの列の欠損値を直前の値に設定する	df[col].fillna(method='ffill')
文字列が文字列リストに含まれるかどうか	s in aStringList
ヒストグラムを描画して色をライトブルーに指定する	plt.hist(データ列, color='lightblue')
データ列の欠損値を直後の値にする	ds.fillna(method='bfill')
文字列がタプルに含まれるか調べる	element in aTuple
文字列の示す文字コードで書き込み用にファイルを開く]	open(filepath, mode='w', encoding=s)
＜オプション＞シエナ色を用いる	color = 'sienna'
データフレームのリストカラムの欠損値をメディアンに設定する	df[aList].fillna(df[aList].median())
折れ線グラフに大きさnの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
ヒストグラムを描画して、その色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
データ列と配列について散布図を描画し、、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
データフレームの指定された列を取り出す	df[column]
単位正方行列	np.identity(N)
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
グラフの色を淡くする	sns.set(pallete='muted')
データ列を百の位で四捨五入して整数型にする	ds.round(-2).astype(int)
日付データをタプルに変換する	aDate.timetuple()
データフレームの未入力値を前の値で埋める	df.fillna(method='ffill')
n行をデータフレームから重複ありでランダムにサンプリングする	df.sample(n, replace=True)
オプションで、標準出力を用いる	file = sys.stdout
文字列内にひとつでも空白があるか調べる	any(c.isspace() for c in s)
辞書にマッピングの項目を追加する	aDict.update(aDict2)
nを16進表現に変換する	hex(n)
線グラフを描画して、その色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
集合を空にする	aSet.clear()
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
タプルの先頭を使う	aTuple[0]
データ列の各データが何回出現するか確認する	ds.value_counts()
折れ線グラフを描画して、その色をダークオレンジに指定する	plt.plot(データ列, データ列2, color='darkorange')
ファイルパスをUTF8を用いて書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
配列を平坦にする	aArray.flatten()
折れ線グラフの色をロージーブラウンに指定する	plt.plot(データ列, データ列2, color='rosybrown')
＜オプション＞オリーブにグラフの色を設定する	color = 'olive'
ビン数nで配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
＜オプション＞バリーウッドにグラフの色を設定する	color = 'burlywood'
折れ線グラフを描画して、その色をペールグリーンに指定する	plt.plot(データ列, データ列2, color='palegreen')
データフレームを関数の値でグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
＜オプション＞グラフの色をペールグリーンに設定する	color = 'palegreen'
データ列の中に文字列とがいくつあるか数える	ds.isin([value, value2]).sum()
データフレームのカラムの曜日数	df[col].dt.dayofweek
＜オプション＞線種を破線に設定する	linestyle = 'dashed'
折れ線グラフにサイズnの四角印を描画する	plt.plot(データ列, データ列2, marker='s', markersize=n)
＜オプション＞アクアマリンにグラフの色を設定する	color = 'aquamarine'
赤い▲印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データ列の中に文字列と日付データがある	ds.isin([value, value2])
散布図に丸マーカーを使う	plt.plot(xdata, ydata, marker='o')
文字列を空白で区切り、、数列に変換する	map(int, s.split())
赤い四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c='r')
＜オプション＞欠損値を先頭にする	na_position = 'first'
日付データからn日を減らす	aDate - datetime.timedelta(days=n)
線グラフを描画してその色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
データフレームを列でソートして、上位を取り出す	df.sort_values(columns).head(n)
＜オプション＞やわらかい青にグラフの色を設定する	color = 'cornflowerblue'
折れ線グラフの色をサドルブラウンにセットする	plt.plot(データ列, データ列2, color='saddlebrown')
＜オプション＞エンコーディングを文字コードtextに設定する	encoding = text
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
イテラブルから重複なく、n要素ランダムに選ぶ	random.sample(iterable, k=n)
折れ線グラフを描画してその色をイエローグリーンに変更する	plt.plot(データ列, データ列2, color='yellowgreen')
＜オプション＞改行をセパレータで用いる	sep = '\n'
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
カウンタから最頻出な項目の件数を求める	aCounter.most_common()[1]
折れ線グラフを描画してその色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
文字列の最後から改行を取り除く	s.rstrip('\n')
文字列を複数行対応として正規表現で区切る	re.split(pattern, s, flags=re.MULTILINE)
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
線グラフを描画して色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
折れ線グラフを描画して、色をミスティローズにセットする	plt.plot(データ列, データ列2, color='mistyrose')
キーが辞書に存在しない時、要素を追加する	aDict.setdefault(key, element)
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
赤色の星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='r')
エクセルデータファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
黒いクロスマーカーを散布図に使う	plt.plot(xdata, ydata, marker='x', c='k')
データフレームの母標準偏差	df.std(ddof=0)
折れ線グラフを描画してその色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
文字列リストに列を変換して、空白で連結する	' '.join(map(str, iterable))
＜オプション＞パールバイオレットレッドを使う	color = 'palevioletred'
二進数の文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
データフレームの未入力値を後の行の値で埋める	df.fillna(method='bfill')
リストとリストについての散布図に文字列という補足用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
折れ線グラフを描画して色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
綺麗なグラフを描く準備をする	import seaborn as sns
散布図に黒いバツマーカーを使用する	plt.plot(xdata, ydata, marker='x', c='k')
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
nがn2以下または、n3以上	n <= n2 or n >= n3
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
＜オプション＞区切り記号を文字列にする	sep = s
リストの要素数	len(aList)
事前にパターンを大文字・小文字を無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
正規表現を使う	import re
部分文字列で文字列を分割する	s.split(sub)
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
ビスク色の線グラフを描画する	plt.plot(データ列, データ列2, color='bisque')
ヒストグラムの色をフクシアに指定する	plt.hist(データ列, color='fuchsia')
データフレームのリストカラムの未入力値を直前の値で埋める	df[aList].fillna(method='ffill')
ベクトルの累積積	np.cumprod(aArray)
折れ線グラフを描画してその色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
xが一桁の数かどうか調べる	-9 <= x <= 9
stringをインポートする	import string
線グラフの色をレモンシフォンに変更する	plt.plot(データ列, データ列2, color='lemonchiffon')
＜オプション＞グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
折れ線グラフの色をアリスブルーに変更する	plt.plot(データ列, データ列2, color='aliceblue')
青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
リストとリストについて散布図を描画して、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
色差別ないの折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
リストと配列について散布図を描画して、マーカーを下三角に指定する	plt.plot(xdata, ydata, marker='v')
ヒストグラムを描画して、その色をライトグレーにセットする	plt.hist(データ列, color='lightgray')
2つのタプルを階層化する	collections.ChainMap(aDict, aDict2)
点線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dotted')
データフレームのカラムのヒストグラムを描画する	plt.hist(df[column])
２つのデータフレームを横方向に合体させる	pd.merge(df, df2)
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
タプルの要素を逆順にする	aTuple[::-1]
データ列のタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
＜オプション＞ミディアムターコイズに色を設定する	color = 'mediumturquoise'
文字列の示すエンコーディングでファイルパスを追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
データフレームのn行以降抽出する	df[n:]
集合が空でない	len(aSet) != 0
データフレームの重複した行を数える	df.duplicated().sum()
ハローワールドをプリントする	print('Hello World')
＜オプション＞グラフの色をダークカーキに指定する	color = 'darkkhaki'
ファイルを文字列の示す文字コードで開く]	open(filepath, encoding=s)
表の相関行列をヒートマップとして描画する	sns.heatmap(df.corr())
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
データフレームをJSONLファイルに書き込む	df.to_csv(filename)
リストとリストの折れ線グラフを文字列の色で描画する	plt.plot(xdata, ydata, color=s)
文字列リストを結合してひとつの文字列にする	''.join(aStringList)
＜オプション＞文字コードをBOM付きに設定する	encoding = 'utf_8_sig'
＜オプション＞赤色を使う	color = 'red'
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
データフレームを配列に変換する	df.values
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
データフレームの列のNaNを最頻値で補う	df[col].fillna(df[col].mode().iloc[0])
＜オプション＞読み込み用にセットする	mode = 'r'
グラフを画面用に指定する	sns.set(context='notebook')
ヒストグラムを描画して、その色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
カラーコードのダイアモンドマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='D', c=rgb)
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
プログラムのファイルの名前	sys.argv[0]
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
データフレームを破壊的に複数の列によってを用いてソートする	df.sort_values(by=column, inplace=True)
折れ線グラフのマーカーを三角にする	plt.plot(データ列, データ列2, marker='^')
リストの文字列の位置をエラーなく見る	aList.index(element) if element in aList else -1
文字列を黄色にする	f'\033[33m{value}\033[0m'
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
ヒストグラムを描画して、その色を暗い赤に設定する	plt.hist(データ列, color='darkred')
棒グラフを積み上げにする	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
グラフの描画で色差別ないカラーパレットを用いる	sns.set(pallete='colorblind')
ヒストグラムの色をネイビーに指定する	plt.hist(データ列, color='navy')
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
リストと数列について散布図を描画し、、大バツマーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='X', c=rgb)
折れ線グラフにポイント印を加える	plt.plot(データ列, データ列2, marker='.')
グラフの色調を明るくする	sns.set(pallete='bright')
実行結果を青色にする	f'\033[34m{value}\033[0m'
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
ライトコーラルにヒストグラムの色を設定する	plt.hist(データ列, color='lightcoral')
＜オプション＞ゴールド色を使う	color = 'gold'
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
＜オプション＞UTF8を使う	encoding = 'utf-8'
書き込み用にBOM付きでファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
パステル調のグラフの色を黒くする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
空白文字を全部使う	string.whitespace
リストと数列について散布図を描画して、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
リストの最後を除く	aList[:-1]
文字列を区切りで区切って列挙する	s.split(sep)
散布図にカラーコードのバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c=rgb)
複数の列ででデータフレームを破壊的に並べ直す	df.sort_values(by=column, inplace=True)
コマンド引数を一覧として	sys.argv[1:]
xの小数点以下'2'桁までを出力する	print(':.2f'.format(x))
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
リストとリストの暗いグラフを描画して、その色を黒くする	plt.plot(xdata, ydata, linestyle='dark', color='k')
文字列が全て数字か調べる	s.isdigit()
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
折れ線グラフのマーカーを▽にする	plt.plot(データ列, データ列2, marker='v')
実数はNaNか調べる	math.isnan(x)
実数の天井	math.ceil(x)
データ列の文字列をNaNにする	ds.replace(s, np.nan)
折れ線グラフを描画してその色をアンティークホワイトにセットする	plt.plot(データ列, データ列2, color='antiquewhite')
ケンドール順位相関係数でデータフレームのリスト列の相関行列を計算する	df[aList].corr(method='kendall')
列とリストをペアリングする	itertools.zip_longest(iterable, iterable2)
折れ線グラフの色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
＜オプション＞シャルトリューズを用いる	color = 'chartreuse'
データフレームを列を用いてソートして、下位を取り出す	df.sort_values(columns).tail(n)
オブジェクトが関数か調べる	callable(obj)
フローラルホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='floralwhite')
列自身の長さnの順列	itertools.permutations(iterable, n)
数列とイテラブルで暗いグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
昇順にデータフレームを複数の列によって並べ直して、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームのリスト列を1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
タプルの末尾からn番目以前の要素を抽出する	aTuple[:-n]
数列とリストについての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
折れ線グラフを描画して、その色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
組の末尾を取り除く	aTuple[:-1]
カラーコードのバツマーカーを配列とリストの散布図に描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
リストとイテラブルの散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
データ列とデータ列の青いパステル調のグラフをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
暗いの折れ線グラフの色をカラーコードに指定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
リストとデータ列を折れ線グラフで描画する	plt.plot(xdata, ydata)
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
ヒストグラムを描画してその色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
辞書のコピーを作る	dict(aDict)
＜オプション＞色をラベンダーブラッシュに変更する	color = 'lavenderblush'
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='cornflowerblue')
イテラブルとリストについてカラーコードの明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
ダイアモンドマーカーを用いて散布図をプロットする	plt.plot(xdata, ydata, marker='D')
＜オプション＞エンコーディングをEUCに設定する	encoding = 'euc_jp'
実数の三乗	x ** 3
文字列中に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
nではない	not n
最大値・最小値を用いて整数乱数を生成する	random.randint(最小値, 最大値)
入力ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
ヒストグラムを描画して、その色をサンディーブラウンにセットする	plt.hist(データ列, color='sandybrown')
データフレームの中にある日付データの合計をカウントする	df.isin([value]).sum()
小数点数の双曲線正接	math.tanh(x)
折れ線グラフを描画して、色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
＜オプション＞グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
暗い色のマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, c='dark')
リストの末尾	aList[-1]
凡例を表示する	plt.legend()
ファイル名がTSVファイル	filename.endswith('.tsv')
淡いの折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
キューをポップする	deq.pop()
リストとリストの濃いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
折れ線グラフを描画して、その色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
実数の指数部を計算する	math.frexp(x)[1]
データ列とリストについて散布図を描いて、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
辞書をソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
にx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
ファイルパスからストリームをオープンして]fileとする	file = open(filepath)
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
文字列を正規表現で区切る	re.split(pattern, s)
２ベクトル間のユークリッド距離を求める	math.dist(point, point2)
パラメータについて数式の微分を行う	sympy.diff(e, z)
最初のコマンド引数	sys.argv[1]
色差別ないグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
有理数を用いる	import fractions
データフレームをインポートする	import pandas as pd
データフレームの列の欠損値をxにセットする	df[col].fillna(x)
データ列とリストについて散布図を描画して、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
ふたつの集合の和集合	aSet.union(aSet2)
データフレームの中に文字列が含まれる	df.isin([value])
配列とリストの折れ線グラフを描画し、、透明度をalphaに変更する	plt.plot(xdata, ydata, alpha=alpha)
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
列を行列に変換する	np.array(iterable)
再帰の上限	sys.getrecursionlimit()
複数の列でデータフレームをソートする	df.sort_values(by=column)
折れ線グラフの色をコーラルに指定する	plt.plot(データ列, データ列2, color='coral')
データフレームの相関行列	df.corr()
折れ線グラフを描画して、色をダークゴールデンロッドにセットする	plt.plot(データ列, データ列2, color='darkgoldenrod')
リストとリストの破線グラフを描画して、色をパステル調のに変更する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
データフレームの欠損値をxに設定する	df.fillna(x)
数式の展開を行う	sympy.expand(e)
データフレームのカラムの未入力値を最大値に設定する	df[col].fillna(df[col].max())
文字列のサフィックスから部分文字列を除去する	s.removesuffix(sub)
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
コレクションを使用する	import collections
nを切り捨てながらn2分の一にする	n //= n2
パステル調のグラフの色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
プロットの色をパステル調にする	sns.set(pallete='pastel')
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
セパレータで文字列を分割して文字列リストに変換する	s.split(sep)
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
ヒストグラムを描画して、色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
＜オプション＞トマトに色を設定する	color = 'tomato'
文字列が印字できるかどうか調べる	s.isprintable()
startからendまでヒストグラムにする	plt.hist(データ列, range=(start, end))
nからn2までの整数リスト	list(range(n, n2+1))
データフレームの列の未入力値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
リストとリストの色差別ないグラフを描画し、、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
実数の双曲線正接	math.tanh(x)
＜オプション＞色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
＜オプション＞グラフの色をディープスカイブルーに変更する	color = 'deepskyblue'
数列とリストの濃いを描画してその色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
列を変更不能な集合に変換する	frozenset(iterable)
文字列が無限に続くイテラブル	itertools.repeat(element)
ヒストグラムを描画して、その色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
＜オプション＞ダークシアンにグラフの色を設定する	color = 'darkcyan'
文字列の左側からタブを取り除く	s.lstrip('\t')
＜オプション＞グラフの色をスノーに変更する	color = 'snow'
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
データフレームの重複した行数のマスクを使う	df.duplicated()
最小値で列のNaNを埋める	ds.fillna(ds.min())
行列の行ごとの分散	np.var(aArray, axis=1)
日付時刻データの日数を求める	aDatetime.day
＜オプション＞デピンク色を使用する	color = 'deeppink'
＜オプション＞グラフの色をオーキッドに設定する	color = 'orchid'
折れ線グラフを描画して、その色をブルーバイオレットに指定する	plt.plot(データ列, データ列2, color='blueviolet')
データフレームを関数の値でグループ化し、要約統計量を求める	df.groupby(関数).describe()
辞書に辞書のエントリを更新する	aDict.update(aDict2)
配列の全要素の値を変更する	aArray[:, :] = 指定の値
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
データフレームのカラムとカラムを折れ線を用いて描く	plt.plot(df[col], df[col2])
折れ線グラフの▼印のサイズをnに変更する	plt.plot(データ列, データ列2, marker='v', markersize=n)
エクセルデータファイルからエクセルデータを読み込む	pd.read_excel(filename)
シーグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='seagreen')
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
リストとリストについての散布図をパステル調の色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
リストとリストの折れ線グラフを文字列の色で描く	plt.plot(xdata, ydata, color=s)
実数をn乗する	x ** n
データフレームから列を１つのみ選択する	df[[column]]
ふたつの集合が集合と交わりを持たないか	aSet.isdisjoint(aSet2)
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
線グラフを描画して、色をホワイトスモークに変更する	plt.plot(データ列, データ列2, color='whitesmoke')
アークタンジェント	math.atan(x)
＜オプション＞青緑色を用いる	color = 'teal'
データ列の第一四分位数	ds.quantile(0.25)
＜オプション＞ホワイトスモーク色を用いる	color = 'whitesmoke'
表データの列に重複があれば、マスクする	df.duplicated(subset=column)
ヒストグラムを描画して色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
リストとリストについて散布図を描画して、四角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='s', c=rgb)
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
文字列は文字列より辞書順で前	s < s2
十六進数文字列を整数にする	int(s, 16)
各列毎にデータフレームを集約して、列の合計を求める	df.groupby(column)[column2].sum()
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
スピアマンでデータフレームのリスト列の相関行列を計算する	df[aList].corr(method='spearman')
＜オプション＞マーカーをダイアモンドに変更する	marker = 'D'
文字列中の大文字を小文字に変換する	s.lower()
ヒストグラムを描画して色を貝殻に指定する	plt.hist(データ列, color='seashell')
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
折れ線グラフを描画してその色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
線グラフを描画して色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
オブジェクトが浮動小数点数か調べる	isinstance(obj, float)
＜オプション＞グラフの色をディムグレーに変更する	color = 'dimgrey'
折れ線グラフを描画してその色をパパイヤウィップにセットする	plt.plot(データ列, データ列2, color='papayawhip')
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
文字列の先頭でパターンに大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列, データ列2, color='papayawhip')
日付データが日付データよりあとか調べる	aDate > aDate2
各列毎に表データをグループ化し、列の最大値を計算する	df.groupby(column)[column2].max()
格子線をプロットに入れる	plt.grid(True)
配列の合計値を計算する	np.sum(aArray)
散布図にカラーコードの三角マーカーを使用する	plt.plot(xdata, ydata, marker='^', c=rgb)
散布図に黒いバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='k')
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
線グラフの色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
Pandasで、データフレームのcollをdatetime64型にする	pd.to_datetime(df[col])
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
折れ線グラフの色を赤くする	plt.plot(データ列, データ列2, color='r')
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
キーが辞書上で定義済みか調べる	key in aDict
実行環境がマックかどうか	sys.platform.startswith('darwin')
ヒストグラムを描画して、色をアイボリーに設定する	plt.hist(データ列, color='ivory')
ヒストグラムを描画して、その色をライムに設定する	plt.hist(データ列, color='lime')
＜オプション＞論理値型を用いる	dtype = np.int32
グラフのカラーパレットをpalleteNameに設定する	sns.set(pallete=palleteName)
＜オプション＞グラフの色をパープルに変更する	color = 'purple'
色差別ない色のヒストグラムを用いて数列をプロットする	plt.hist(xdata, color='colorblind')
両端キュー中の値の数を数える	deq.count(element)
xが-9以上9以下か調べる	-9 <= x <= 9
ヒストグラムを描画して、色をコーラルにする	plt.hist(データ列, color='coral')
タプル内の要素が少なくともひとつ真	any(aTuple)
グラフの描画で暗い色を使う	sns.set(pallete='dark')
データフレームのリストカラムが正規分布からどの程度尖っているか確認する	df[aList].skew()
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
nをn2だけ左シフトする	n << n2
タイムスタンプデータにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
タイムスタンプデータをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
xが一桁の正の数か調べる	0 <= x <= 9
データフレームの値を正規表現patternでまとめて置き換える	df.replace(pattern, repl, regex=True)
＜オプション＞色をアクアにする	color = 'aqua'
最初のカテゴリーを除いてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
＜オプション＞色をレモンシフォンに指定する	color = 'lemonchiffon'
リストとリストについて黒色の暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='k')
見やすいグラフを使う準備をする	import seaborn as sns
横棒の幅をxに指定する	plt.barh(ラベル列, データ列, width=x)
表データの行列をひっくり返す	df.T
折れ線グラフに黄色い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
データフレームを各列と列の組み合わせ毎にグループ化して合計を計算する	df.groupby([column, column2], as_index=False).sum()
nからn2までの整数列	list(range(n, n2+1))
集合から任意の要素を取り除く	aSet.pop()
折れ線グラフのマーカーをポイントにする	plt.plot(データ列, データ列2, marker='.')
＜オプション＞グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
データフレームを'A'列によってソートし、更新する	df.sort_values(by='A', inplace=True)
ペールグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='palegreen')
配列と配列の青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
16進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
ピアソン相関係数でデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='pearson')
アヤメのデータセットをロードする	sns.load_dataset('iris')
データフレームを列ごとに集約し、、各グループごとの標準偏差を計算する	df.groupby(column).std()
データ列は正規分布からどの程度、歪んでいるか調べる	ds.kurt()
線グラフを描画して色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
赤いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='r')
データフレームのcollのUNIX秒から日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
リストの先頭を除く	aList[1:]
オールドレース色の線グラフを描画する	plt.plot(データ列, データ列2, color='oldlace')
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
イテラブルと配列の折れ線グラフを描いて、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
ヒストグラムを描画して、その色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
文字列の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
＜オプション＞改行コードを動作環境依存に設定する	newline = None
イテラブルと配列として濃いグラフを描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
集合から別の集合との共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
データフレームを複数の列で昇順に破壊的に整列する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームのカラムの中に日付データが存在するか調べる	df[col].isin([value])
線幅nのダイアモンド印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
黒い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='k')
リストとリストの散布図を描画する	plt.scatter(xdata, ydata)
イテラブルから双方向キューを作成する	collections.deque(iterable)
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
＜オプション＞色をダークオーキッドに設定する	color = 'darkorchid'
文字列をコロンで区切って、列挙する	s.split(':')
線グラフを描画して、その色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
文字列の両端から部分文字列を取り除く	s.strip(sub)
＜オプション＞ラベンダーを用いる	color = 'lavender'
データフレームを表示するとき、列の最大幅をnに減らす	pd.set_option('max_colwidth', n)
折れ線グラフの色をディープスカイブルーに変更する	plt.plot(データ列, データ列2, color='deepskyblue')
黄色い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='y')
ヒストグラムを描画してその色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
データフレームの列を破壊的に落とす	df.drop(column, axis=1, inplace=True)
ヒストグラムを描画して、その色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
集合から別の集合との共通要素を全て除去する	aSet.symmetric_difference_update(aSet2)
組のn番目からn2番目まで	aTuple[n:n2]
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
ヒストグラムを描画してその色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
カラーコードの左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
リストと数列の折れ線グラフを描画する	plt.plot(xdata, ydata)
実線に折れ線グラフを変更する	plt.plot(データ列, データ列2, linestyle='solid')
要素をスタックの左から取り除く	deq.popleft()
辞書をJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
データ列とリストについて散布図を描画して、マーカーを右三角に指定する	plt.plot(xdata, ydata, marker='>')
ベクトルの形状を変形する	aArray.reshape(行数, 列数)
データフレームのリストカラムの上位25%を求める	df[aList].quantile(0.25)
二つのオブジェクトが等しいか調べる	obj == obj2
セットを空集合にする	aSet.clear()
ファイルパスの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
配列と数列で明るいグラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D')
データフレームから重複した行を取り除く	df.drop_duplicates()
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
現在は何曜日か知る	datetime.datetime.today().weekday()
二つの集合の差を計算する	aSet.difference(aSet2)
配列とリストを用いて濃いグラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
暗いグラフの色を黒くする	plt.plot(xdata, ydata, linestyle='dark', color='k')
辞書をソートしてJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
散布図を黒い左三角マーカーを用いて描画する	plt.plot(xdata, ydata, marker='<', c='k')
データフレームを各列毎にグループ分けして、文字列というグループを使う	df.groupby(column).get_group(s)
ファイルをオープンして]書き込みストリームを求める	open(filepath, mode='w')
データフレームの列を消す	df.drop(column, axis=1)
既存の行列を元に全要素が1の配列	np.ones_like(aArray)
淡いグラフの線幅をnに指定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
nからn2までの一つ置きの整数列	list(range(n, n2+1, 2))
nまでの偶整数リスト	list(range(2, n, 2))
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
リストとデータ列についての散布図を色差別ない色としてプロットする	plt.plot(xdata, ydata, c='colorblind')
要素を双方向キューのn番目に挿入する	deq.insert(n, element)
辞書を階層化する	collections.ChainMap(aDict)
ヒストグラムを描画して、色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
n個の要素があるリスト	[element] * n
日付時刻データの月数	aDatetime.month
イテラブルとリストで濃いグラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
＜オプション＞先頭のカラムを行に設定する	index_col = 0
nの十六進数表現	hex(n)
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
折れ線グラフに大きさnの丸印を描画する	plt.plot(データ列, データ列2, marker='o', markersize=n)
ヒストグラムを描画して色をパープルに設定する	plt.hist(データ列, color='purple')
ファイルをオープンする]	open(filepath)
配列とリストについて散布図を描画し、、その大きさをnに変更する	plt.scatter(xdata, ydata, s=n)
ヒストグラムを描画して、その色をモカシンに設定する	plt.hist(データ列, color='moccasin')
データフレームの列の文字列を未入力値に変換する	df[col].replace(s, np.nan)
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
カウンタの最頻出な文字列	aCounter.most_common()[0]
リストと数列について散布図を描画し、、マーカーを上三角に設定する	plt.plot(xdata, ydata, marker='^')
配列のユニークな値を要素とする配列	np.unique(aArray)
変数名をキーとしてマップ	dict(name=element)
データフレームを複数の列によって並べ、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
折れ線グラフを描画して、その色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
行列を2次元1列に変形する	aArray.reshape(-1, 1)
線グラフを描画して、その色をスプリンググリーンに変更する	plt.plot(データ列, データ列2, color='springgreen')
＜オプション＞ダークオリーブグリーンを用いる	color = 'darkolivegreen'
＜オプション＞グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
データ列は何年か確認する	ds.dt.year
リストとリストについて散布図を描画して、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
最大値・最小値で乱数を生成する	random.randint(最小値, 最大値)
折れ線グラフを描画してその色を青紫に指定する	plt.plot(データ列, データ列2, color='violet')
カラーコードでリストとデータ列の折れ線グラフを描画する	plt.plot(xdata, ydata, color=rgb)
行列の最大	np.max(aArray)
列をイミュータブルな集合にする	frozenset(iterable)
濃い色の折れ線を描いて、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='deep')
リストをヒストグラムとして可視化する	plt.hist(aList)
データフレームを'A'列と'B'列で昇順に並べて、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
＜オプション＞スカイブルー色を使う	color = 'skyblue'
文字列をケースを無視してパターンで分割する	re.split(pattern, s, flags=re.IGNORECASE)
線グラフを描画してその色をシアンに指定する	plt.plot(データ列, データ列2, color='cyan')
折れ線グラフを描画して色をシルバーに指定する	plt.plot(データ列, データ列2, color='silver')
折れ線グラフの色をローングリーンに指定する	plt.plot(データ列, データ列2, color='lawngreen')
文字列が全て英数字か調べる	s.isalnum()
タイムスタンプデータと日付時刻データの時間差	aDatetime - aDatetime2
2つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
ヒストグラムの色を黄色くする	plt.hist(データ列, color='y')
表データを二つの列でグループ化する	df.groupby(['A', 'B'])
折れ線グラフの星マーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='*', markersize=n)
２つのデータフレームを縦方向に連結する	pd.concat([df, df2])
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
黄色い▽印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
自然数の並べ方の総数を求める	math.perm(n)
データフレームの列の未入力値を平均に指定する	df[col].fillna(df[col].mean())
ファイルのファイルサイズ	os.path.get_size(filepath)
＜オプション＞バイナリ書き込みモードを使う	mode = 'wb'
ヒストグラムを描画して、その色をスラグレーに指定する	plt.hist(データ列, color='slategray')
ヒストグラムを描画して、その色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
文字列の右側から範囲を指定して部分文字列を探す	s.find(sub, start, end)
＜オプション＞ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
プロットに補足を入れる	plt.legend()
n個の数値イテラブル	range(n)
デックの末尾にイテラブルの各要素を順に入れる	deq.extend(iterable)
データフレームのリスト列の未入力値を最大値に変更する	df[aList].fillna(df[aList].max())
散布図に赤い▼マーカーを使う	plt.plot(xdata, ydata, marker='v', c='r')
itertoolsモジュールをインポートする	import itertools
ValueMapでデータフレームの値をまとめて置き換える	df.replace(ValueMap)
タプルの値を並べ直す	sorted(aTuple)
文字列が文字列リストのいづれ	s in aStringList
データ列をn個にビン分割する	pd.cut(ds, n)
データフレームを'A'列によってで破壊的にソートする	df.sort_values(by='A', inplace=True)
散布図にカラーコードの下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c=rgb)
両端キューの末尾に要素を追加する	deq.append(element)
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
year年day月をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=1)
ファイルをUTF8を使ってオープンする]	open(filepath, encoding='utf-8')
明るいグラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
赤い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
ロードしたモジュールの一覧	sys.modules
配列の要素ごとに加算する	aArray + aArray2
整数nの十六進リテラル	hex(n)
赤色の線グラフを描画する	plt.plot(データ列, データ列2, color='red')
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
データ列の尖度	ds.skew()
数式のインテグラルを求める	sympy.integrate(e)
グラフを画面用に設定する	sns.set(context='notebook')
イテラブルと数列について散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
リストとリストの散布図を描画して、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
データフレームの未入力値を平均値で補う	df.fillna(df.mean())
２つのリストから辞書を作る	dict(zip(aList, aList2))
文字列の無限のイテラブル	itertools.repeat(element)
線グラフを描画して、その色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
カラーコードの大バツマーカーを散布図に使用する	plt.plot(xdata, ydata, marker='X', c=rgb)
淡いグラフの色を青くする	plt.plot(xdata, ydata, linestyle='muted', color='b')
小数点以下3桁までJSONLファイルにデータフレームを保存する	df.to_csv(filename, float_format='%.3f')
リストとリストの暗いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
＜オプション＞線幅をnに指定する	linewidth = n
＜オプション＞読み込まないフッタをnに指定する	skipfooter = n
データフレームのカラムが何年か確認する	df[col].dt.year
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
文字列が全て空白文字からなる	s.isspace()
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='r')
ヒストグラムの色を白くする	plt.hist(データ列, color='w')
イテラブルとリストについての散布図を色差別ない色として描画する	plt.plot(xdata, ydata, c='colorblind')
＜オプション＞色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
浮動小数点数の三乗	x ** 3
部分文字列が文字列の開始位置からと終了位置の間に存在するかどうか調べる	s.find(sub, start, end) != -1
リストとリストについて破線グラフを描画し、、その色を色差別ないに指定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
データフレームのそれぞれのグループの最大値	df.groupby(column).max()
折れ線グラフの大バツマーカーを緑色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
重なりを見やすく色差別ない色のマーカーで散布図を描く	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
＜オプション＞色をミディアムスレートブルーに変更する	color = 'mediumslateblue'
２つの列によってで破壊的にデータフレームを整列する	df.sort_values(by=['A', 'B'], inplace=True)
ディレクトリを使う	os.getcwd()
リストの重複を除く	sorted(set(aList), key=aList.index)
カウンタ同士で積集合演算する	aCounter & aCounter2
nわるn2を計算する	n / n2
リスト中の文字列が最初に見つかるインデックスを探す	aList.index(element)
折れ線グラフを描画して、その色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
リストが空でない	len(aList) != 0
ファイルから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
n掛けるn2	n * n2
折れ線グラフを描画して、その色をダークシアンに変更する	plt.plot(データ列, データ列2, color='darkcyan')
データフレームのリスト列の欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
リストを縦軸、イテラブルをx軸と指定して、折れ線を描画する	plt.plot(xdata, ydata)
実行結果を黄色にする	f'\033[33m{value}\033[0m'
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
＜オプション＞ダークグリーンを用いる	color = 'darkgreen'
データ列の中に文字列がある	ds.isin([value])
ヒストグラムの色を真紅に設定する	plt.hist(データ列, color='crimson')
表データからn行をランダムに抽出する	df.sample(n)
データフレームの各次元の大きさを見る	df.shape
データフレームの列の各データは何回出現するか確認する	df[col].value_counts()
データフレームの重複を確認する	df.duplicated()
文字列を最後の部分文字列で二分し最初の文字列を見る	s.rpartition(sub)[0]
リストとリストの散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
要素がマッピングの値に含まれていない	element not in aDict.values()
アルファベットを全部求める	string.ascii_letters
カウンタの全カウント	aCounter.total()
ヒストグラムを描画して、その色をパールバイオレットレッドに指定する	plt.hist(データ列, color='palevioletred')
左にn個分双方向キューの値をローテンションする	deq.rotate(-n)
データフレームの列はどれだけ、分散しているか調べる	df[col].var()
ヒストグラムを描画してその色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
データフレームの列のpercent分位数を求める	df[col].quantile(percent/100)
ファイルパスをEUCで開く]	open(filepath, encoding='euc_jp')
配列とイテラブルの淡いグラフを描画し、その色を黒くする	plt.plot(xdata, ydata, linestyle='muted', color='k')
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
赤い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
クラスは名前付きタプルか調べる	issubclass(C, tuple)
グリーンにヒストグラムの色をセットする	plt.hist(データ列, color='green')
データ列をインポートする	import pandas as pd
データフレームを列でグループ化して、それぞれのグループごとの標準偏差を計算する	df.groupby(column).std()
nはリストのいづれかかどうか調べる	n in aList
散布図に淡い色のマーカーを使用する	plt.plot(xdata, ydata, c='muted')
要素が辞書の値として含まれているか調べる	element in aDict.values()
実数がNaNか	math.isnan(x)
数値を水色化する	f'\033[36m{value}\033[0m'
シーケンスを文字列リストに変換してタブで連結する	'\t'.join(map(str, iterable))
二つの文字列が等しくないかどうか	s != s2
線グラフの色を黄色に指定する	plt.plot(データ列, データ列2, color='yellow')
浮動小数点数の3乗	x ** 3
リストとリストについて散布図を描画し、、マーカーの色を濃いにする	plt.plot(xdata, ydata, c='deep')
折れ線グラフにポイント印を使用する	plt.plot(データ列, データ列2, marker='.')
折れ線グラフの△印を黄色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
現在のワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumspringgreen')
折れ線グラフの色をゴーストホワイトに変更する	plt.plot(データ列, データ列2, color='ghostwhite')
リストとリストについての散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
本日をタプルに変換する	datetime.datetime.today().timetuple()
リストと配列の散布図を描き、、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
nがn2で割り切れないか	n % n2 != 0
＜オプション＞淡いピンク色色を使用する	color = 'lightpink'
データ列とラベルを指定して、縦棒グラフを描画する	plt.bar(ラベル列, データ列)
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
日付データと日付データの時間差	aDate - aDate2
データフレームのカラムの文字列を未入力値に変換する	df[col].replace(s, np.nan)
文字列がリストの要素か	element in aList
リストの合計	sum(aList)
折れ線グラフの色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
データ列を使う	import pandas as pd
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
大きさnでリストと数列についての散布図を描画する	plt.scatter(xdata, ydata, s=n)
文字列をカンマで分割して文字列リストに変換する	s.split(',')
行列の値	aArray[行番号, 列番号]
淡いの色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
Pandasでデータ列のエポック秒からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフの色を青緑に設定する	plt.plot(データ列, データ列2, color='turquoise')
タプルの合計	sum(aTuple)
データフレームをグループ化し、列に対し最大値を求める	df.groupby(column)[column2].max()
イテラブルを文字列リストに変換して、カンマで一つにする	','.join(map(str, iterable))
データ列の欠損値をモードに減らす	ds.fillna(ds.mode().iloc[0])
リストの要素をソートする	sorted(aList)
数列とイテラブルの散布図に三角マーカーをプロットする	plt.plot(xdata, ydata, marker='^')
データ列の値がNaNか調べる	ds.isna()
整数nの二進表記	bin(n)
数列とリストについて散布図を描画して、マーカーを星に指定する	plt.plot(xdata, ydata, marker='*')
＜オプション＞色をオーキッドに設定する	color = 'orchid'
折れ線グラフの右三角マーカーを青色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='goldenrod')
集合の要素数	len(aSet)
＜オプション＞無視する列番号をnamesで指定する	skiprows = names
ヒストグラムを描画して、その色をシーグリーンにする	plt.hist(データ列, color='seagreen')
ライトコーラル色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightcoral')
データフレームのカラムの未入力値を中央値で補う	df[col].fillna(df[col].median())
折れ線グラフを描画して、その色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
折れ線グラフの大バツ印を赤くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
文字列中から正規表現にASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
データフレームを'A'列の値でグループ化し記述統計量を求める	df.groupby('A').describe()
＜オプション＞プラムにグラフの色を設定する	color = 'plum'
データフレームの要約統計量	df.describe()
集合をイミュータブルに変換する	frozenset(aSet)
グラフの中の縦軸の軸ラベルをuntitledに設定する	plt.ylabel(untitled)
カウンタ同士で和集合演算する	aCounter | aCounter2
文字列TSVファイルからn番目のカラムをインデックスとしてCSVファイルを読み込む	pd.read_csv(filename, index_col=n)
数列と配列について散布図をプロットし、マーカーの色をパステル調のに変更する	plt.plot(xdata, ydata, c='pastel')
n2がn以上かつn3以下かどうか確認する	n <= n2 and n2 <= n3
実数のコサインの逆数	math.acos(x)
データフレームの中にいくつ欠損値が含まれるかカウントする	df.isna().sum()
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
値を緑色化する	f'\033[32m{value}\033[0m'
＜オプション＞ゴールデンロッドにグラフの色を指定する	color = 'goldenrod'
ヒストグラムの色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
数列とイテラブルについての散布図を濃い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
実数が正の数かどうか調べる	x > 0
赤色の暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='r')
＜オプション＞ダイアモンド印を使用する	marker = 'D'
xの小数点以下'4'桁まで出力する	print(':.4f'.format(x))
辞書から最後の項目をポップする	aDict.popitem()
リストと数列について色差別ない色の折れ線グラフを描画して、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
データフレームの中に文字列と日付データがいくつあるか数える	df.isin([value, value2]).sum()
＜オプション＞改行をセパレータで使う	sep = '\n'
３つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
タプルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
ヒストグラムを描画して、その色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
グラフの描画を見やすくする	import seaborn as sns
今日が火曜日か調べる	datetime.datetime.today().weekday() == 1
データフレームのグループごとの平均値	df.groupby(column).mean()
折れ線グラフを描画して、その色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
文字列を空白によって区切り、、整数のリストに変換する	map(int, s.split())
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
データフレームの文字列をNaNに変換する	df.replace(s, np.nan)
データフレームの列を文字列に名前を変更する	df.rename(columns={column: name})
浮動小数点数の指数部	math.frexp(x)[1]
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
＜オプション＞先頭のカラムをインデックスに設定する	index_col = 0
データフレームのリストカラムを千の位で丸める	df[aList].round(-3)
＜オプション＞色をダークスラテグレーに変更する	color = 'darkslategray'
表を各列毎に分類して文字列というグループの個数を計算する	df.groupby(column).size()[s]
nが奇数か調べる	n % 2 == 1
色差別ないグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
列を等間隔でn個にビン分割する	pd.cut(ds, n)
＜オプション＞グラフの色を濃い青に設定する	color = 'darkblue'
リストと配列について破線グラフを描いて、色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
＜オプション＞先頭の行をヘッダに設定する	header = 0
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
日付データが水曜日か調べる	aDate.weekday() == 2
線グラフの色をライトイエローにセットする	plt.plot(データ列, データ列2, color='lightyellow')
文字列の中の正規表現による全てのマッチを求める	re.findall(pattern, s)
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
文字列全体が正規表現に大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ヒストグラムの色をベージュにする	plt.hist(データ列, color='beige')
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
データフレームのリスト列の相関行列をヒートマップを使って描画する	sns.heatmap(df[aList].corr())
昇順にデータフレームを列名リストによってソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
要素を双方向キューにプッシュする	deq.append(element)
折れ線グラフを描画して、その色をディープスカイブルーに指定する	plt.plot(データ列, データ列2, color='deepskyblue')
イテラブルとイテラブルについてパステル調の色の折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
リストをプリントする	print(value)
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
折れ線グラフを描画して、色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
＜オプション＞グラフの色をライトコーラルに設定する	color = 'lightcoral'
小文字を全部使う	string.ascii_lowercase
データフレームを二つの列によって並べる	df.sort_values(by=['A', 'B'])
＜オプション＞グラフの色をイエローグリーンに指定する	color = 'yellowgreen'
実数の逆双曲線正接	math.atanh(x)
Pandasで、フォーマットfmtでデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col], format=fmt)
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgray')
ヒストグラムを描画して、その色をローングリーンにセットする	plt.hist(データ列, color='lawngreen')
データフレームのリストカラムの値は欠損値かどうか調べる	df[aList].isna()
リストとリストについて破線を描いて、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
＜オプション＞ダークカーキを使う	color = 'darkkhaki'
文字列の開始位置以降に部分文字列がない	s.find(sub, start) == -1
数列と配列について散布図を描いて、クロスマーカーの色をカラーコードにする	plt.plot(xdata, ydata, marker='x', c=rgb)
文字列の開始位置より後に部分文字列が含まれるかどうかテストする	s.find(sub, start) != -1
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
散布図に黒い右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c='k')
＜オプション＞下三角マーカーを加える	marker = 'v'
集合の浅いコピー	aSet.copy()
＜オプション＞グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
一点鎖線にヒストグラムを設定する	plt.hist(データ列, linestyle='dashbot')
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
＜オプション＞文字列をセパレータで用いる	sep = s
昨日の日付を使う	datetime.date.today() - datetime.timedelta(days=1)
＜オプション＞グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
数列とリストについて暗い色の折れ線グラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
リストと数列についての散布図に黒いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
数値を数値に変換する	float(e)
データフレームを列で分類し、、列の要約統計量を求める	df.groupby(column).describe()[column2]
xが-9以上9以下	-9 <= x <= 9
スピアマンとしてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
双方向キューの先頭を使う	deq[0]
ふたつの集合の共通要素だけにする	aSet.intersection_update(aSet2)
線グラフを描画して、色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
文字列がいつまでも繰り返すイテラブル	itertools.repeat(element)
nが一桁の数か調べる	0 <= n <= 9
日付データをISO形式の文字列に変換する	aDate.isoformat()
折れ線グラフを描画して、その色をライトサーモンにセットする	plt.plot(データ列, データ列2, color='lightsalmon')
フォーマットで文字列をタイムスタンプ型にする	pd.to_datetime(s, format='%Y-%m-%d')
折れ線グラフの星マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='*', markersize=n)
nの16進文字列	hex(n)[2:]
カウンタの正の数だけ残す	+aCounter
＜オプション＞グラフの色をオレンジレッドに指定する	color = 'orangered'
データフレームの列の文字列が文字列で終わらないデータを抽出する	df[not df[column].str.endswith(s)]
ファイルパスをSJISでオープンする]	open(filepath, encoding='shift_jis')
＜オプション＞グラフの色をコーンズシルクに設定する	color = 'cornsilk'
スラグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slategrey')
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
リストとリストの黒い色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
ヒストグラムを描画して、色をアクアに設定する	plt.hist(データ列, color='aqua')
グラフの横軸にuntitledというラベルを付ける	plt.xlabel(untitled)
ヒストグラムを描画して、その色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
データ列を10の位で丸める	ds.round(-1)
ロードしたモジュールを列挙する	sys.modules
右三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='>')
ヒストグラムをstartからendまでの範囲でプロットする	plt.hist(データ列, range=(start, end))
グラフの中に枠なしの凡例を付ける	plt.legend(frameon=False)
パステル調のグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
データフレームのリストカラムの中に日付データと日付データがいくつあるか求める	df[aList].isin([value, value2]).sum()
データフレームを列によってグループ化して、それぞれのグループごとの合計を計算する	df.groupby(column).sum()
ふたつのマップを合体する	aDict | aDict2
＜オプション＞ディムグレー色を使う	color = 'dimgrey'
＜オプション＞パレットトルコイズにグラフの色をする	color = 'paleturquoise'
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
ファイルパスのファイル名	os.path.basename(filepath)
オブジェクトを文字列に変換する	str(obj)
＜オプション＞色をバリーウッドに設定する	color = 'burlywood'
ヒストグラムを描画して、その色をリネンに設定する	plt.hist(データ列, color='linen')
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
黒い左三角マーカーをリストとリストの散布図に描画する	plt.plot(xdata, ydata, marker='<', c='k')
データ列を箱ひげ図にする	plt.boxplot(データ列)
データフレームのリスト列をValueMapで置き換える	df[aList].replace(ValueMap)
散布図に赤いクロスマーカーを使う	plt.plot(xdata, ydata, marker='x', c='r')
nがn2よりも小さいか判定する	n < n2
暗いの色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
カラムの各データが何回出現するか調べる	df[col].value_counts()
バイナリモードとしてファイルをオープンする]	open(filepath, mode='rb')
＜オプション＞グラフの色を淡い茶色に設定する	color = 'tan'
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
プログラムの実行を異常停止する	sys.exit(1)
文字列は文字列より辞書順で後	s > s2
切り下げて整数に変換する	math.floor(x)
辞書のキーとその値を列挙する	aDict.items()
列のそれぞれを関数でフィルタする	map(func, iterable)
折れ線グラフの右三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='>', markersize=n)
データ列を度数分布図として可視化する	plt.hist(ds)
表データから指定された列を抽出する	df[[column]]
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
グラフを明るくする	sns.set(pallete='bright')
データフレームのグループごとの個数を求める	df.groupby(column).count()
データフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
線グラフの色をイエローグリーンに指定する	plt.plot(データ列, データ列2, color='yellowgreen')
一点鎖線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
数値の出力を改行なしに行う	print(value, end='')
自分自身をモジュールとしてを	sys.modules[__name__]
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
複数の列によってデータフレームをまとめたグループ	df.groupby(columns)
＜オプション＞マーカーを星に変更する	marker = '*'
文字列が全てアルファベット	s.isalpha()
配列をビン分割する	pd.cut(aArray, aList)
n2分のnを算出する	n / n2
カラーコードの大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
ヒストグラムを描画して、その色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
＜オプション＞グラフの色を青緑に設定する	color = 'teal'
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
＜オプション＞四角マーカーを使う	marker = 's'
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
散布図にカラーコードの丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c=rgb)
＜オプション＞グラフの色をグリーンに設定する	color = 'green'
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
線グラフを描画して色をピーチパフに指定する	plt.plot(データ列, データ列2, color='peachpuff')
＜オプション＞色をシルバーに設定する	color = 'silver'
SJISで文字列をバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
JSONLファイルにデータフレームをインデックスを付けずに保存する	df.to_csv(filename, index=None)
文字列を代数計算の変数に変換する	sympy.Symbol(s)
文字列の先頭だけ大文字化する	s.capitalize()
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumturquoise')
リストと配列の散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
リストを縦軸配列を横軸と指定して折れ線グラフを描画する	plt.plot(xdata, ydata)
リストとリストの折れ線グラフを描画して、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
数を二乗する	x ** 2
データフレームを２つの列の値でまとめたグループ	df.groupby(['A', 'B'])
パレットトルコイズにヒストグラムの色をする	plt.hist(データ列, color='paleturquoise')
両端キューをポップする	deq.pop()
折れ線グラフのマーカーを右三角にする	plt.plot(データ列, データ列2, marker='>')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
現在が火曜日	datetime.datetime.today().weekday() == 1
実数で数を除算して、切り捨てる	x // y
nが一桁の整数	0 <= n <= 9
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
＜オプション＞紺を用いる	color = 'darkblue'
ベクトルと同じ大きさの空配列を作る	np.empty_like(aArray)
折れ線グラフを描画してその色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
文字列はリストの要素でないかどうか調べる	element not in aList
最初の要素を双方向キューから取り除く	deq.remove(element)
折れ線グラフを描画して、その色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
リストとリストについて散布図を描いて、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
文字列中にひとつでも非英数字があるか確認する	any(not c.isalnum() for c in s)
Pythonパスにディレクトリを追加する	sys.path.append(dir)
リストと数列のカラーコードの明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgrey')
配列の行ごとの合計値	np.sum(aArray, axis=1)
明るいをリストとデータ列としてプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
データフレームの列がxより多くx2より小さい行を取り出す	df[(x < df[column]) & (df[column] < x2)]
2つの変数を同じ値にする	x = y = n
ファイルからの入力ストリームを使う	open(filepath)
実数の常用対数	math.log10(x)
データフレームを一度に整数に丸める	df.round()
折れ線グラフを破線で描画する	plt.plot(データ列, データ列2, linestyle='dashed')
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
黒い三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='k')
ファイルのファイル名を使う	os.path.basename(filepath)
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
縦棒を描いて中央寄せする	plt.bar(ラベル列, データ列, align='center')
カウンタの項目一覧	aCounter.keys()
＜オプション＞ダークサーモンにグラフの色を設定する	color = 'darksalmon'
プロットの描画で色差別ない色テーマを用いる	sns.set(pallete='colorblind')
＜オプション＞右三角マーカーを描画する	marker = '>'
辞書にキーワード引数で更新する	aDict.update(**kwargs)
リストの個数	len(aList)
オブジェクトが関数かどうか調べる	callable(obj)
プロットの用途を画面に変更する	sns.set(context='notebook')
データフレームを列で分類して、グループごとの分散を求める	df.groupby(column).var()
集合を組に変換する	tuple(aSet)
淡いの色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
nが5で割り切れるかどうか	n % 5 == 0
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
明るい色のマーカーで散布図をプロットする	plt.plot(xdata, ydata, c='bright')
リストと配列についてカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
破壊的に重複をデータフレームから削除する	df.drop_duplicates(inplace=True)
データフレームのリストカラムを千の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
折れ線グラフを描画して、色をやわらかい青に指定する	plt.plot(データ列, データ列2, color='cornflowerblue')
nプラスn2	n + n2
折れ線グラフに黒いクロス印を描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
＜オプション＞ミッドナイトブルー色を用いる	color = 'midnightblue'
列から複数個ランダムに選ぶ	random.choices(iterable, k=n)
カウンタの値をひとつ増やす	aCounter[element] += 1
表を列によって整列して、下位を取り出す	df.sort_values(columns).tail(n)
散布図を黒い星マーカーで描画する	plt.plot(xdata, ydata, marker='*', c='k')
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
ヒストグラムとしてデータフレームのカラムを可視化する	plt.hist(df[column])
＜オプション＞グラフの色をミスティローズにセットする	color = 'mistyrose'
文字列リストを連結し、ひとつの文字列にする	''.join(aStringList)
折れ線グラフのスタイルを一点鎖線に指定する	plt.plot(データ列, データ列2, linestyle='dashbot')
ヒストグラムを描画して、その色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
リストをn個にビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
プログラムを異常終了する	sys.exit(1)
データ列の標本標準偏差	ds.std()
＜オプション＞読み込まないフッタをnに設定する	skipfooter = n
データフレームを列の値によってグループ化して列挙する	[(name, group) for name, group in df.groupby(column)]
EUCとしてファイルをオープンする]	open(filepath, encoding='euc_jp')
＜オプション＞グラフの色をチョコレートに設定する	color = 'chocolate'
要素が集合に含まれるか	element in aSet
パープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='purple')
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
コマンド引数の一覧	sys.argv[1:]
＜オプション＞ポイントマーカーを使う	marker = '.'
赤い△マーカーを数列とリストの散布図に描画する	plt.plot(xdata, ydata, marker='^', c='r')
TSVファイルファイル名がか調べる	filename.endswith('.tsv')
リストを縦軸リストを横軸と指定して、折れ線グラフを描画する	plt.plot(xdata, ydata)
横軸のラベルをuntitledに変更する	plt.xlabel(untitled)
ヒストグラムを描画して、その色を小麦色に設定する	plt.hist(データ列, color='wheat')
ヒストグラムを描画して、その色をバイオレットに設定する	plt.hist(データ列, color='violet')
全ての句点文字	string.punctuation
スチールブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='steelblue')
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
表データを列によってまとめたグループ	df.groupby(column)
折れ線グラフの色をシルバーに指定する	plt.plot(データ列, データ列2, color='silver')
日付データにn週間を加算する	aDate + datetime.timedelta(weeks=n)
十六進文字列を整数に変換する	int(s, 16)
ヒストグラムを描画してその色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
既存の行列をベースに全要素が初期値の配列	np.full_like(aArray, 初期値)
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
実数の2進対数	math.log2(x)
データフレームの列を正規表現patternでまとめてreplに置換する	df[col].replace(pattern, repl, regex=True)
＜オプション＞色をインディアンレッドにセットする	color = 'indianred'
バリーウッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='burlywood')
行列の計算をする	import numpy as np
グレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='gray')
nの8進文字列を見る	oct(n)[2:]
線グラフの色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
散布図を黒い右三角マーカーで描画する	plt.plot(xdata, ydata, marker='>', c='k')
リストとリストのパステル調のグラフを描いてその色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
データ列を分割する	pd.cut(ds, aList)
破線グラフの色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
二つのデータ列を並べて箱髭図にする	plt.boxplot([データ列, データ列2])
カラーコードの丸マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='o', c=rgb)
データ列と数列の散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
数式の部分分数化を行う	sympy.apart(e)
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
表データから数値データの列を取り出す	df.select_dtypes('number')
配列をビン数nでビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ヒストグラムを描画して、その色をディープスカイブルーに指定する	plt.hist(データ列, color='deepskyblue')
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
折れ線グラフに黄色いポイント印を描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
折れ線グラフを使ってデータフレームのカラムとカラムをプロットする	plt.plot(df[col], df[col2])
nが正の数か	n > 0
リストと数列について散布図を描いてマーカーを丸に変更する	plt.plot(xdata, ydata, marker='o')
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
折れ線グラフを描画して色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
リストと数列について散布図を描画して星マーカーの色をカラーコードにする	plt.plot(xdata, ydata, marker='*', c=rgb)
線グラフの色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
グラフに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
データフレームをグループ化しそれぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
最大長nの両端キューを用意する	collections.deque(maxlen=n)
データフレームのカラムの尖度	df[col].skew()
＜オプション＞グラフの色をカーキに変更する	color = 'khaki'
データフレームで何行重複するか確認する	df.duplicated().sum()
辞書の浅いコピーを生成する	aDict.copy()
日付データの月数	aDate.month
オプションで、出力先を標準エラーに設定する	file = sys.stderr
データフレームのリストカラムの中に文字列と文字列があるか確認する	df[aList].isin([value, value2])
データフレームのリスト列の相関行列ケンドール相関係数を用いてを計算する	df[aList].corr(method='kendall')
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='palegoldenrod')
プロットの見た目を綺麗にする	import seaborn as sns
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
ヒストグラムを描画して色を青紫に設定する	plt.hist(データ列, color='violet')
２つの列でデータフレームをソートする	df.sort_values(by=['A', 'B'])
辞書を浅く複製する	dict(aDict)
折れ線グラフを描画して、その色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
データフレームから指定されたデータ型の列名の一覧を使う	df.select_dtypes(型).columns
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
日付時刻データをタプルに変換する	aDatetime.timetuple()
整数nの八進文字列	oct(n)[2:]
リストと配列について破線グラフを描画して、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
値をセットに追加する	aSet.add(element)
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
線グラフを描画して、その色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
データフレームのインデックス名をまとめてnameからname2に付け直す	df.rename(index={name: name2})
データフレームの中にいくつ文字列が存在するかカウントする	df.isin([value]).sum()
部分文字列が文字列の終了位置より前に含まれるかどうか調べる	s.find(sub, 0, end) != -1
＜オプション＞色をスプリンググリーンに指定する	color = 'springgreen'
線グラフを描画して、その色を小麦色に指定する	plt.plot(データ列, データ列2, color='wheat')
＜オプション＞ロージーブラウン色を用いる	color = 'rosybrown'
データ列を折れ線グラフに描画して、マーカーをポイントにする	plt.plot(データ列, データ列2, marker='.')
折れ線グラフを描画して、色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
リストをソートする	sorted(aList)
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
初期値で全要素を初期化された行列	np.full((行数, 列数), 初期値, dtype=np.int)
シャルトリューズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='chartreuse')
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
日付時刻データが何時か知る	aDatetime.hour
折れ線グラフの色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
整数nを2進表現に変換する	bin(n)
データフレームの各グループ毎の合計	df.groupby(column).sum()
折れ線グラフの色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
スタックから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
初期値で全要素を初期化された行列	np.full(要素数, 初期値, dtype=np.int)
配列と配列の散布図を淡い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームの列と列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[[column, column2]].corr())
オプションでファイルを出力にする	file = sys.open(filename, 'w')
データフレームのリストカラムのNaNをxで埋める	df[aList].fillna(x)
コロンで区切って2つの文字列を表示する	print(value, value2, sep=':')
＜オプション＞スラッシュを区切り記号で使う	sep = '/'
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
タイムスタンプデータが木曜日	aDatetime.weekday() == 3
データフレームのそれぞれのグループごとの最小値を求める	df.groupby(column).min()
折れ線グラフを描画して、色をスレートブルーに変更する	plt.plot(データ列, データ列2, color='slateblue')
実数の余弦	math.cos(x)
パラメータについて数式を積分する	sympy.integrate(e, z)
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
線グラフを描画して、その色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
折れ線グラフに四角マーカーを使う	plt.plot(データ列, データ列2, marker='s')
＜オプション＞色をドジャーブルーに設定する	color = 'dodgerblue'
折れ線グラフを描画してその色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
＜オプション＞ポイントマーカーを描画する	marker = '.'
リストをn倍する	aList * n
Pandasでエポック秒の文字列からdatetime64型に変換する	pd.to_datetime(s, unit='s', utc=True)
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
ケースを無視してあらかじめ正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
破線グラフの色をパステル調のにする	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
データ列と配列の淡いグラフを描画して、その色を青くする	plt.plot(xdata, ydata, linestyle='muted', color='b')
データフレームのインデックスを振り直す	df.reset_index()
＜オプション＞ダークグレーを使う	color = 'darkgray'
＜オプション＞レモンシフォン色を用いる	color = 'lemonchiffon'
データフレームのcollのUNIX時間から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
色差別ないグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
リストの末尾のn要素を除く	aList[:-n]
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
＜オプション＞ミディアムパープル色を用いる	color = 'mediumpurple'
グラフの色を全般的にパステル調にする	sns.set(pallete='pastel')
データフレームのリストカラムの尖度	df[aList].skew()
文字列を部分文字列で区切る	s.split(sub)
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
ヒストグラムを描画して色をミディアムスプリンググリーンにセットする	plt.hist(データ列, color='mediumspringgreen')
＜オプション＞文字コードを文字列の示すエンコーディングに指定する	encoding = s
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
リストと数列について散布図を描画して、左三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='<', c=rgb)
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
実行環境がWindowsか調べる	sys.platform.startswith('win32')
配列の差を求める	aArray - aArray2
ファイルをSJISで追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
リストとリストについて黒色の色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
＜オプション＞ターコイズ色を使う	color = 'turquoise'
nの八進文字列を使う	oct(n)[2:]
文字列を最後の部分文字列で二つに区切って後半の文字列を求める	s.rpartition(sub)[-1]
＜オプション＞グラフの色をイエローグリーンに変更する	color = 'yellowgreen'
JSON形式の文字列を読み込む	json.loads(jsonString)
明るい色でリストとリストの散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
散布図を左三角マーカーで描画する	plt.plot(xdata, ydata, marker='<')
折れ線グラフを描画して、色をライトブルーに指定する	plt.plot(データ列, データ列2, color='lightblue')
データフレームのカラムを1000の位で丸める	df[col].round(-3)
濃い色として散布図を描く	plt.plot(xdata, ydata, c='deep')
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
xを整数に変換する	int(x)
二つのカラムを並べて箱ひげ図にする	plt.boxplot([df[column], df[column2]])
ヒストグラムを描画して、その色をダークオレンジに指定する	plt.hist(データ列, color='darkorange')
ヒストグラムを描画して、その色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
アンティークホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='antiquewhite')
nのn2乗を算出する	n ** n2
n割るn2の切り上げ	(n + n2 - 1) // n2
新しいカウンタをイテラブルから準備する	collections.Counter(iterable)
破線ヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
列名リストでデータフレームをソートし、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データフレームの列の種類	df.info()
折れ線グラフのバツマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='x', markersize=n)
線グラフを描画して、その色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
ValueMapでまとめてデータ列を置き換える	ds.replace(ValueMap)
列がどれだけ、分散しているか見る	ds.var()
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
日付時刻データが火曜日かどうか調べる	aDatetime.weekday() == 1
表データを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
＜オプション＞グラフの色をネイビーに変更する	color = 'navy'
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
配列を柱状図にする	plt.hist(aArray)
ネイビー色の線グラフを描画する	plt.plot(データ列, データ列2, color='navy')
双方向キュー中の要素の数を数える	deq.count(element)
暗い色のヒストグラムとしてリストをプロットする	plt.hist(xdata, color='dark')
色差別ない色でデータ列についての柱状グラフを描画する	plt.hist(xdata, color='colorblind')
破壊的にデータフレームの列を消す	df.drop(column, axis=1, inplace=True)
リストをヒストグラムにする	plt.hist(aList)
SJISでJSONLファイルにデータフレームを保存する	df.to_csv(filename, encoding='shift_jis')
数値を簡略にする	sympy.sympify(e)
組の最初を取り除く	aTuple[1:]
プラットホームがマックかどうか調べる	sys.platform.startswith('darwin')
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
改行を使う	'\n'
標準入力から1行だけ読む	sys.stdin.readline()
散布図に暗い色のマーカーを使う	plt.plot(xdata, ydata, c='dark')
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
線グラフを描画して、色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
折れ線グラフを描画して、その色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
第一引数のファイルの名前	sys.argv[1]
折れ線グラフを描画してその色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
濃いの折れ線グラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
Pandasで、フォーマットfmtで文字列をタイムスタンプ型に変換する	pd.to_datetime(s, format=fmt)
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
実数が負か調べる	x < 0
タプルを反転する	reversed(aTuple)
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
整数nを符号付きでバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
日付時刻データが土曜日かどうか	aDatetime.weekday() == 5
タプル上でキーが定義済みか調べる	key in aDict
イテラブルの長さnの順列	itertools.permutations(iterable, n)
リストが空でないか調べる	len(aList) != 0
折れ線グラフを描画して、色をダークオーキッドに指定する	plt.plot(データ列, データ列2, color='darkorchid')
＜オプション＞グラフの色を白にセットする	color = 'white'
折れ線グラフを描画して、その色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
データフレームを列によってグループ化し、、各グループごとの平均値を求める	df.groupby(column).mean()
データ列のpercent分位数を計算する	ds.quantile(percent/100)
度数分布図の透明度をxに設定する	plt.hist(データ列, alpha=x)
折れ線グラフの色をダークレッドに設定する	plt.plot(データ列, データ列2, color='darkred')
列の値ごとにデータフレームをグループ分けして、それぞれのグループごとの分散を求める	df.groupby(column).var()
ヒストグラムを描画して、その色をサーモンに設定する	plt.hist(データ列, color='salmon')
タプルのn番目からn2番目まで	aTuple[n:n2]
ヒストグラムを描画して、その色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
数列とリストの明るいを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='ghostwhite')
イテラブルの集合	set(iterable)
行列の行ごとの最大値	np.max(aArray, axis=1)
データフレームのNaNを平均値に増やす	df.fillna(df.mean())
折れ線グラフを描画して、その色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
データ列の月	ds.dt.month
カウンタをイテラブルとして更新する	aCounter.update(iterable)
整数nがセットのどれか	n in aSet
nとn2の論理積	n & n2
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
データフレームを表示するとき、表示可能な行数をnに変更する	pd.set_option('display.max_rows', n)
＜オプション＞マゼンタにグラフの色を設定する	color = 'magenta'
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
配列の最小値	np.min(aArray)
線グラフの色をライトスチールブルーにセットする	plt.plot(データ列, データ列2, color='lightsteelblue')
日付データが日付データより後ろか調べる	aDate > aDate2
データフレームを二つの列によってまとめた表	df.groupby(['A', 'B'])
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
現在の時間数	datetime.date.today().hour
ヒストグラムを描画して、その色をシルバーにセットする	plt.hist(データ列, color='silver')
リストとリストの青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
文字列内にひとつでも英数字があるか	any(c.isalnum() for c in s)
文字列中にひとつでも非空白があるかどうか調べる	any(not c.isspace() for c in s)
折れ線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
タプルをひとつ置きに取り出す	aTuple[::2]
タイムスタンプデータをISO形式の文字列に変換する	aDatetime.isoformat()
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
折れ線グラフを描画して、色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
＜オプション＞グラフの色をダークグリーンにする	color = 'darkgreen'
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
配列をヒストグラムで可視化する	plt.hist(aArray)
ファイルパスを文字列の示すエンコーディングで開く]	open(filepath, encoding=s)
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
文字列の右側から改行を取り除く	s.rstrip('\n')
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
＜オプション＞エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
折れ線グラフの色をトマトに指定する	plt.plot(データ列, データ列2, color='tomato')
データ列を折れ線グラフに描画して、印を右三角印にする	plt.plot(データ列, データ列2, marker='>')
データフレームの指定された列を配列にする	df[column].values
折れ線グラフに緑色の△マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
２つのオブジェクトが等しい	obj == obj2
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
ヒストグラムを描画して、色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
配列とリストの明るいグラフをプロットして色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
実行結果を太字で出力する	print(f'\033[1m{value}\033[0m')
文字列の開始位置からと終了位置の範囲に部分文字列が含まれるかどうか調べる	s.find(sub, start, end) != -1
ヒストグラムを描画して、その色をオレンジに設定する	plt.hist(データ列, color='orange')
ヒストグラムの線のスタイルを破線に設定する	plt.hist(データ列, linestyle='dashed')
文字列の右端から空白を除く	s.rstrip(' ')
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
＜オプション＞エンコーディングを文字列の示す文字コードに設定する	encoding = s
複数行対応として文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
＜オプション＞グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
タプルのn番目以降の部分を得る	aTuple[n:]
線グラフの色をオリーブに指定する	plt.plot(データ列, データ列2, color='olive')
＜オプション＞ターコイズにグラフの色を指定する	color = 'turquoise'
リストを等しい量になるようにn個にビン分割する	pd.qcut(aList, n)
二つの値を改行せずに出力する	print(value, value2, end='')
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
グラフの色テーマをpalleteNameに変更する	sns.set(pallete=palleteName)
２つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
データ列がどれだけ、分散しているか見る	ds.var()
＜オプション＞ネイビーを使う	color = 'navy'
文字列のケースを入れ替える	s.swapcase()
赤色の右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='r')
グラフの目的をポスターに設定する	sns.set(context='poster')
＜オプション＞ダークグレーにグラフの色を変更する	color = 'darkgray'
折れ線グラフを描画して、その色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
折れ線グラフの色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
折れ線グラフの色をブラックに指定する	plt.plot(データ列, データ列2, color='black')
データフレームの中に含まれる文字列の合計を数える	df.isin([value]).sum()
折れ線グラフを描画してその色をピーチパフに変更する	plt.plot(データ列, データ列2, color='peachpuff')
黒い淡いを描く	plt.plot(xdata, ydata, linestyle='muted', color='k')
Pandasで、フォーマットとして文字列をPandasの日付型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
折れ線グラフの色をインディアンレッドに指定する	plt.plot(データ列, データ列2, color='indianred')
Pandasで、フォーマットで文字列をdatetime64型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
＜オプション＞イエローグリーン色を使う	color = 'yellowgreen'
表データの中の未入力値を削除する	df.dropna()
マップの項目名の値を得る	aDict[key]
＜オプション＞パールバイオレットレッド色を使用する	color = 'palevioletred'
ヒストグラムの色をバイオレットに設定する	plt.hist(データ列, color='violet')
＜オプション＞ライトグリーンに色を変更する	color = 'lightseagreen'
日付データが何曜日か知る	aDate.weekday()
破壊的にデータフレームを降順に複数の列でソートする	df.sort_values(by=column, ascending=False, inplace=True)
折れ線グラフを描画して、その色をダークバイオレットに変更する	plt.plot(データ列, データ列2, color='darkviolet')
辞書からキーの値かもしくは要素を得る	aDict.get(key, element)
折れ線グラフの色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
行列から重複を除いた行列を初期化する	np.unique(aArray)
実数を十六進表記の文字列に変換する	x.hex()
グラフで用いるフォントをfontNameに指定する	sns.set(font=fontName)
オブジェクトがタプルか調べる	isinstance(obj, tuple)
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
ファイルをオープンして]、追加ストリームを求める	open(filepath, mode='a')
双方向キューの右側を使う	deq[-1]
折れ線グラフを描画してその色をミディアムターコイズに指定する	plt.plot(データ列, データ列2, color='mediumturquoise')
インディゴにヒストグラムの色を設定する	plt.hist(データ列, color='indigo')
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
青色の明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='b')
セットにイテラブルの要素を全て追加する	aSet.update(iterable)
データフレームの列の欠損値を第二四分位数に指定する	df[col].fillna(df[col].median())
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
実数が正の数か調べる	x > 0
折れ線グラフの色をシスルに変更する	plt.plot(データ列, データ列2, color='thistle')
nが正の整数か	n > 0
＜オプション＞グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
リストの移り変わりを折れ線グラフで描画する	plt.plot(range(len(xdata)), xdata)
ビン数nでリストをビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
二つのオブジェクトが同一参照か調べる	obj is obj2
リストとイテラブルについて暗い色の折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
ヒストグラムの色をモカシンに指定する	plt.hist(データ列, color='moccasin')
実数の双曲線正弦を算出する	math.sinh(x)
追加できるようにUTF8で既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf-8')
直後の値でデータ列の欠損値を埋める	ds.fillna(method='bfill')
文字列の先頭で大文字・小文字を無視してパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
タプルの中の一番大きい値	max(aTuple)
データ列の尖度を求める	ds.skew()
折れ線グラフを描画して、その色をアンティークホワイトに変更する	plt.plot(データ列, データ列2, color='antiquewhite')
グローバル変数の一覧	globals()
range関数の無限バージョン	itertools.count(start=n, step=step)
折れ線グラフの色をダークオーキッドに指定する	plt.plot(データ列, データ列2, color='darkorchid')
日付時刻データとタイムスタンプデータの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
＜オプション＞ライトコーラルを使用する	color = 'lightcoral'
実行時に標準出力がパイプかどうか調べる	not sys.stdout.isatty()
明るいの折れ線の線幅を指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
データフレームのリストカラムのNaNを最小値に設定する	df[aList].fillna(df[aList].min())
データ列の未入力値をxに設定する	ds.fillna(x)
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
トマトにヒストグラムの色をセットする	plt.hist(データ列, color='tomato')
データフレームのカラムの中にいくつ文字列が存在するか数える	df[col].isin([value]).sum()
折れ線グラフを描画してその色をライトスチールブルーに変更する	plt.plot(データ列, データ列2, color='lightsteelblue')
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
＜オプション＞シアン色を使う	color = 'cyan'
末尾から部分文字列で文字列を分割する	s.rsplit(sub)
折れ線グラフを描画して、その色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
ふたつの集合の共通要素のみにする	aSet.intersection_update(aSet2)
データフレームの空文字を欠損値に変換しドロップする	df.replace('', np.nan).dropna()
全要素を初期値で初期化された行列を作る	np.full((行数, 列数), 初期値, dtype=np.int)
データフレームの列の中のNaNの合計をカウントする	df[col].isna().sum()
＜オプション＞グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
リストの値のみ表示する	print(*aList)
n割るn2を切り上げる	(n + n2 - 1) // n2
文字列全体が正規表現にマッチするか調べる	re.fullmatch(pattern, s)
文字列の中でケースを無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
eの実数乗	math.exp(x)
折れ線グラフを描画して、色をダークグリーンに変更する	plt.plot(データ列, データ列2, color='darkgreen')
自然数の階乗を計算する	math.factorial(n)
＜オプション＞グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
データフレームを複数の列によって昇順に並べ直す	df.sort_values(by=column, ascending=True)
行列の形状を求める	aArray.shape
データフレームのcollをフォーマットとしてdatetime64型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
リストをイミュータブルにする	tuple(aList)
文字コードを文字にする	chr(unicode)
オブジェクトがリスト型のインスタンスか調べる	isinstance(obj, list)
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
折れ線グラフのスタイルを破線に設定する	plt.plot(データ列, データ列2, linestyle='dashed')
データ列とリストについての散布図を色差別ない色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
タプルの先頭を取り除く	aTuple[1:]
トマト色の線グラフを描画する	plt.plot(データ列, データ列2, color='tomato')
＜オプション＞８ビット整数型を使う	dtype = np.int8
データフレームのリスト列の欠損値をxで補う	df[aList].fillna(x)
データフレームの指定された列を抽出する	df[[column]]
データフレームのリスト列の中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
二つのデータフレームを列'A'と列'B'をキーにして結合する	pd.merge(df, df2, left_on='A', right_on='B')
ビン数を設定して度数分布図を描画する	plt.hist(データ列, bins=n)
色差別ないの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
折れ線グラフの△マーカーを緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
データフレームの分散	df.var()
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフを描画して、その色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
xの小数点以下'1'桁までを表示する	print(':.1f'.format(x))
ライトシアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightcyan')
predicateFuncがTrueとなる列の要素	itertools.takewhile(predicateFunc, iterable)
カウンタの正の数のみ残す	+aCounter
データ列と数列について散布図を描画して、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームの列の文字列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
リストと配列についての散布図に黒い左三角マーカーをプロットする	plt.plot(xdata, ydata, marker='<', c='k')
＜オプション＞ライトイエロー色を使用する	color = 'lightyellow'
データ列のどの値が最も現れるか確認する	ds.mode()
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
文字列に日本語が含まれる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
折れ線グラフに四角マーカーを用いる	plt.plot(データ列, データ列2, marker='s')
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
リストとリストについての散布図を暗い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
折れ線グラフを描画して色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
紺碧にヒストグラムの色を設定する	plt.hist(データ列, color='azure')
折れ線グラフの▲マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
折れ線グラフを描画して、その色をグレーに指定する	plt.plot(データ列, データ列2, color='gray')
文字列をコロンによって分割して、列挙する	s.split(':')
データフレームのカテゴリデータをワンホット・ベクトルにする	pd.get_dummies(df)
ヒストグラムをstartからendの範囲で描画する	plt.hist(データ列, range=(start, end))
折れ線グラフを描画して、その色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
文字列が全てアスキー文字かどうか調べる	s.isascii()
各列毎にデータフレームをグループ化し、、列の合計を求める	df.groupby(column)[column2].sum()
カンマ区切りのファイルTSVファイルをn番目のカラムを行として読み込む	pd.read_csv(filename, index_col=n)
＜オプション＞グラフの色をダークバイオレットに指定する	color = 'darkviolet'
データフレームのリストカラムの欠損値をxに指定する	df[aList].fillna(x)
＜オプション＞ベージュ色を使う	color = 'beige'
ラベンダーブラッシュにヒストグラムの色を設定する	plt.hist(データ列, color='lavenderblush')
カラムの欠損値を50パーセンタイルで埋める	ds.fillna(ds.median())
等差数列から整数乱数を求める	random.randrange(start, end, step)
オブジェクトが文字列か調べる	isinstance(obj, str)
浮動小数点数を3乗する	x ** 3
リストとリストについて散布図を描画し、、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
リストとリストを用いて明るいの折れ線を描画し、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
実数を切り下げて整数に変換する	math.floor(x)
複数カラムの散布図を一度に描画する	sns.pairplot(df[[column, column2, column3]])
ファイル名がCSVファイル	filename.endswith('.csv')
折れ線グラフを描画して、その色をオリーブに変更する	plt.plot(データ列, データ列2, color='olive')
折れ線グラフを描画してその色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
カウンタ同士で交わり	aCounter & aCounter2
散布図に赤い左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='r')
文字列中に非アスキー文字が含まれる	any(not c.isascii() for c in s)
オリベドラブ色の線グラフを描画する	plt.plot(データ列, データ列2, color='olivedrab')
今日は何年か知る	datetime.datetime.today().year
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
＜オプション＞グラフの色をカデットブルーに設定する	color = 'cadetblue'
標準エラーを得る	sys.stderr
＜オプション＞ライムグリーン色を使用する	color = 'limegreen'
＜オプション＞ライトグリーン色を使う	color = 'lightseagreen'
＜オプション＞マーカーをポイントに変更する	marker = '.'
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
xの小数点以下'1'桁までの文字列にする	':.1f'.format(x)
カウンタのktopを列挙する	aCounter.most_common(k)
折れ線グラフに緑色の右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='g')
ヒストグラムの線のスタイルを点線にする	plt.hist(データ列, linestyle='dotted')
グレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='grey')
ローングリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lawngreen')
折れ線グラフの上三角マーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
エンディアンを使う	sys.byteorder
線グラフを描画して、色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
ふたつの関係がサブセット	aSet.issubset(aSet2)
名前付きタプルをデータからインスタンス化する	C._make(パラメータ)
Pandasで、dateStringをPandasの日付型にする	pd.to_datetime(dateString)
nが一桁の数か確認する	-9 <= n <= 9
線グラフを描画して、その色をグリーンにする	plt.plot(データ列, データ列2, color='green')
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
リストとリストについての散布図にカラーコードの大バツマーカーをプロットする	plt.plot(xdata, ydata, marker='X', c=rgb)
＜オプション＞ブラック色を使う	color = 'black'
ファイルを一行ずつ読み込む	f.readline()
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
オブジェクトがタプルに含まれないかどうか	element not in aTuple
オブジェクトの無限のイテラブル	itertools.repeat(element)
データフレームのカラムがどの程度分散しているか見る	df[col].var()
文字列の末尾から余分な改行を除く	s.rstrip()
本日が木曜日	datetime.datetime.today().weekday() == 3
線グラフの色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
データフレームのカラムを丸める	df[col].round()
整数nの16進表現を使う	hex(n)
赤色の色差別ないの折れ線を描く	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
茶色色の線グラフを描画する	plt.plot(データ列, データ列2, color='brown')
リストとデータ列の折れ線を描画する	plt.plot(xdata, ydata)
プロットの背景色を暗くする	sns.set(style='darkgrid')
＜オプション＞グラフの色をオレンジに設定する	color = 'orange'
小麦色色の線グラフを描画する	plt.plot(データ列, データ列2, color='wheat')
黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
折れ線グラフを描画して色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
パステル調の色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='pastel')
リストの最初の文字列を探す	aList.index(element)
折れ線グラフの四角印を青くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
nをn2で整数除算する	n // n2
＜オプション＞スラグレーを使う	color = 'slategray'
データフレームの列の一意な値の個数を見る	df[col].nunique()
＜オプション＞読み込む行番号をnamesで指定する	usecols = names
マッピングのキーを要素に設定する	aDict[key] = element
データフレームを列によってグループ化し、、それぞれのグループごとの最小値を計算する	df.groupby(column).min()
要素が集合の要素でないかどうか調べる	element not in aSet
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
双方向キュー中の数値の出現数をカウントする	deq.count(element)
暗い色を用いてデータ列とイテラブルについての散布図を描く	plt.plot(xdata, ydata, c='dark')
配列を色差別ない色の度数分布図として描画する	plt.hist(xdata, color='colorblind')
数が正の数か確認する	x > 0
ヒストグラムを描画してその色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
線グラフを描画して、その色をディープスカイブルーに変更する	plt.plot(データ列, データ列2, color='deepskyblue')
データ列とリストの散布図を描画して、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
変数が0に近づく場合の数式の極限値を求める	sympy.limit(e, z, 0)
nがn2以下	n <= n2
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
＜オプション＞ダークグレー色を使う	color = 'darkgray'
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
タプルのn番目からn2番目までを取り出す	aTuple[n:n2]
配列と配列についての散布図を明るい色で描画する	plt.plot(xdata, ydata, c='bright')
データフレームの列名一覧で指定された列を削除する	df.drop(columns, axis=1)
タプルは少なくともひとつ真か	any(aTuple)
折れ線グラフを描画して、色をスラグレーにする	plt.plot(データ列, データ列2, color='slategrey')
データフレームを複数の列の値でグループ化する	df.groupby(columns)
＜オプション＞シスルにグラフの色を設定する	color = 'thistle'
データフレームのカラムの文字列を欠損値にする	df[col].replace(s, np.nan)
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
＜オプション＞色をミッドナイトブルーに指定する	color = 'midnightblue'
ヒストグラムを描画して、その色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
データフレームの相関行列ケンドールで	df.corr(method='kendall')
＜オプション＞白色を用いる	color = 'white'
'A'列によってでデータフレームを降順にソートする	df.sort_values(by='A', ascending=False)
データフレームのリスト列を100の位で四捨五入する	df[aList].round(-2)
0から始まる無限リスト	itertools.count()
濃いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
nはn2と等しい	n == n2
ヒストグラムの色を青にセットする	plt.hist(データ列, color='blue')
線グラフを描画して、その色をペールグリーンに変更する	plt.plot(データ列, データ列2, color='palegreen')
データフレームを各列毎に集約して、文字列というグループを見る	df.groupby(column).get_group(s)
カラーコードのバツマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='x', c=rgb)
カラーバーを描画する	plt.colorbar()
＜オプション＞区切り記号を改行にする	sep = '\n'
配列を一次元にする	aArray.flatten()
折れ線グラフの三角マーカーを青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
＜オプション＞珊瑚色を使う	color = 'coral'
データフレームのカラムのタイムゾーンを文字列にする	df[col].tz_convert(s)
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
ライムにヒストグラムの色を設定する	plt.hist(データ列, color='lime')
リストをn個に分割する	pd.cut(aList, n)
データフレームのリストカラムの欠損値を最大値にセットする	df[aList].fillna(df[aList].max())
配列を縦軸、リストを横軸として大きさnの散布図を描く	plt.scatter(xdata, ydata, s=n)
データフレームを列で昇順に破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
環境がMacOSか	sys.platform.startswith('darwin')
折れ線グラフを描画して、その色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
正規表現でまとめてデータ列を置き換える	ds.replace(pattern, repl, regex=True)
カラムの欠損値を直前の値で埋める	ds.fillna(method='ffill')
カデットブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='cadetblue')
黒い右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='k')
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
＜オプション＞ベージュ色を用いる	color = 'beige'
線グラフを描画して、その色をシスルに指定する	plt.plot(データ列, データ列2, color='thistle')
ISO書式の文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームの中の列を中央値でビンニングする	pd.qcut(df[col], 2)
データ列のメディアンを計算する	ds.median()
パラメータが0に近づく時の数式の極限値を算出する	sympy.limit(e, z, 0)
データフレームとしてTSVを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
線グラフを描画して、その色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
数値を黄色でプリントする	print(f'\033[33m{value}\033[0m')
複数の列によって小さい順にデータフレームをソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
リストとデータ列の破線をプロットし、、その色を淡いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
破壊的にデータフレームを列ででソートする	df.sort_values(by=column, inplace=True)
事前に大文字・小文字を無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データフレームを100の位で丸める	df.round(-2)
サイコロと同じ乱数	random.randint(1, 6)
＜オプション＞最初のカラムを行に設定する	index_col = 0
データフレームの行の一覧	df.index
赤い下三角マーカーをリストとデータ列についての散布図にプロットする	plt.plot(xdata, ydata, marker='v', c='r')
整数nを符号なしでバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big')
2つの最大値	max(x, y)
配列のヒストグラムをプロットする	plt.hist(aArray)
データフレームのリストカラムの中のNaNの合計をカウントする	df[aList].isna().sum()
xを浮動小数点数に変換する	float(x)
既存のファイルパスをUTF8として追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
文字列の開始位置より後に部分文字列が含まれないか調べる	s.find(sub, start) == -1
メディアンでデータ列の欠損値を埋める	ds.fillna(ds.median())
データフレームの未入力値をxで埋める	df.fillna(x)
線グラフの色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
中央値でリストをビン分割する	pd.qcut(aList, 2)
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
浮動小数点数を十の位で丸める	round(x, -1)
データフレームで、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
小数点数の余弦を求める	math.cos(x)
リスト内の要素は少なくとも一つ真か調べる	any(aList)
行列を一次元にする	aArray.flatten()
nかつn2	n and n2
列の中に文字列と日付データが含まれるか調べる	ds.isin([value, value2])
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
スクリプトファイルのフォルダパス	os.path.dirname(os.path.abspath(__file__))
データフレームを表示するとき折り返しをしない	pd.set_option('expand_frame_repr', False)
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='turquoise')
＜オプション＞モカシン色を使う	color = 'moccasin'
カウンタのキーと回数を列挙する	aCounter.items()
＜オプション＞グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
データ列のヒストグラムを描く	plt.hist(ds)
折れ線グラフの色をゴールドにセットする	plt.plot(データ列, データ列2, color='gold')
カラーコードの星マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
文字列の中でパターンにマッチした文字列をリストに変換する	re.findall(pattern, s)
文字列をセパレータで区切って、列挙する	s.split(sep)
データフレームのリストカラムのNaNを第二四分位数で埋める	df[aList].fillna(df[aList].median())
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
黒いバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='k')
リストとリストについて破線グラフを描画してその色を色差別ないに変更する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
数の二乗を求める	x ** 2
n番目のシートをエクセルデータファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
散布図を黒いポイントマーカーを用いて描く	plt.plot(xdata, ydata, marker='.', c='k')
ヒストグラムを描画して、その色を茶色に設定する	plt.hist(データ列, color='brown')
２つの値を改行しなくて表示する	print(value, value2, end='')
折れ線グラフの色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
２つの整数最小公倍数	math.lcm(n, n2)
データフレームを２つの列によってまとめたグループ	df.groupby(['A', 'B'])
データフレームの列の文字列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
nまたはn2	n or n2
データフレームのリストカラムの中にあるの合計を求める	df[aList].isin([value]).sum()
nをn2倍にする	n *= n2
実数がNaNか調べる	math.isnan(x)
＜オプション＞オーキッドを使用する	color = 'orchid'
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
ヒストグラムを描画して、その色を真紅に設定する	plt.hist(データ列, color='crimson')
データ列が正規分布からどの程度尖っているか見る	ds.skew()
書き込みモードでファイルパスをオープンする]	open(filepath, mode='w')
データフレームのカラムの欠損値を50パーセンタイルで埋める	df[col].fillna(df[col].median())
ヒストグラムを描画して、色をベージュに設定する	plt.hist(データ列, color='beige')
データフレームが正規分布からどの程度尖っているか見る	df.skew()
日付時刻データの秒数	aDatetime.second
日付時刻データが日付時刻データより前	aDatetime < aDatetime2
数式の数値を計算する	float(e)
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
TSVをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
n個に等間隔でデータフレームの中の列をビン分割する	pd.cut(df[col], n)
グラフの用途を画面に設定する	sns.set(context='notebook')
＜オプション＞ダークターコイズを用いる	color = 'darkturquoise'
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
文字列の開始位置から部分文字列を探す	s.find(sub, start)
カラーコードの四角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
双方向キューの最初から要素を取り出す	deq.popleft()
＜オプション＞色をダークグレーに設定する	color = 'darkgrey'
見やすいグラフを描画する	import seaborn as sns
ヒストグラムの色をダークオレンジに指定する	plt.hist(データ列, color='darkorange')
nまでの偶整数列	list(range(2, n, 2))
折れ線グラフに線幅nの左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
変数を定義する	x = n
データ列の標本標準偏差を求める	ds.std()
ヒストグラムを描画して、その色をミディアムバイオレットレッドに指定する	plt.hist(データ列, color='mediumvioletred')
ミディアムブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumblue')
＜オプション＞四角マーカーを加える	marker = 's'
線グラフを描画して、その色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
データフレームの中で、列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
ファイルを書き込みモードを用いてオープンして]、fとする	f = open(filepath, mode='w')
数列とリストについての散布図に赤いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
データフレームの欠損値をxで置換する	df.fillna(x)
リストとリストについて色差別ない色の折れ線グラフを描いて、線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
ケンドール相関係数としてデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='kendall')
＜オプション＞ミディアムスレートブルーにグラフの色を設定する	color = 'mediumslateblue'
データ列と数列の黒色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
日付時刻データが何月か知る	aDatetime.month
ヒストグラムを描画して、色をライトグレーに指定する	plt.hist(データ列, color='lightgray')
データフレームを列名リストを用いて並べ直して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
赤い星マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='*', c='r')
部分文字列で文字列を分割した時の前半の文字列	s.partition(sub)[0]
データフレームを二つの列で小さい順に破壊的に整列する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
＜オプション＞ペールグリーンにグラフの色を変更する	color = 'palegreen'
データフレームの内の列と列に重複があれば、消す	df.drop_duplicates(subset=column)
タプルを引数として展開して表示する	print(*aTuple, sep=',')
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
折れ線グラフを描画する	plt.plot(xdata, ydata)
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
ヒストグラムの色をロイヤルブルーに変更する	plt.hist(データ列, color='royalblue')
データフレームを1000の位で四捨五入して整数型にする	df.round(-3).astype(int)
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
データ列とリストの暗いグラフをプロットしてその色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
ゼロ埋めされた整数型の行列	np.zeros(要素数, dtype=np.int)
オブジェクトが名前付きタプルのインスタンスか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
＜オプション＞ダークオリーブグリーン色を使う	color = 'darkolivegreen'
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
文字列を積極的に小文字に変換する	s.casefold()
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumaquamarine')
折れ線グラフを描画して、その色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
配列の最小値を計算する	np.min(aArray)
列によってデータフレームをグループ化し、、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
マッピングのキー一覧	list(aDict)
新しい文字列で文字列中のパターンを置き換える	re.sub(pattern, newsub, s)
配列とリストについての散布図に赤色の下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
両端キューの長さを制限する	collections.deque(maxlen=n)
折れ線グラフの下三角マーカーを黄色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
文字列中の部分文字列の出現回数をカウントする	s.count(sub)
＜オプション＞サドルブラウンにグラフの色を指定する	color = 'saddlebrown'
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
配列とリストの折れ線グラフを描いて、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
今日の日付時刻	datetime.datetime.today()
配列を色差別ない色のヒストグラムとして描く	plt.hist(xdata, color='colorblind')
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
ヒストグラムでリストを可視化する	plt.hist(aList)
＜オプション＞大バツマーカーを使う	marker = 'X'
文字列の中のケースを無視してパターンによる全マッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
空の両端キューを生成する	collections.deque()
プロットのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
ファイルパスをBOM付きとして書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
＜オプション＞改行なし	end = ''
線グラフを描画して、その色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
散布図に黒いクロスマーカーを用いる	plt.plot(xdata, ydata, marker='x', c='k')
tanを求める	math.tan(x)
既存のファイルパスをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
ファイルを追加モードで開き]、fとする	f = open(filepath, mode='a')
線グラフの色をフローラルホワイトに変更する	plt.plot(データ列, データ列2, color='floralwhite')
文字列を部分文字列で区切って列挙する	s.split(sub)
'A'列によって降順にデータフレームを破壊的に並べ直す	df.sort_values(by='A', ascending=False, inplace=True)
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
EUCとしてファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフの色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
折れ線グラフの色を文字列にセットする	plt.plot(xdata, ydata, color=s)
配列とリストについての散布図に赤い大バツマーカーをプロットする	plt.plot(xdata, ydata, marker='X', c='r')
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
カラーコードの▼マーカーをリストとリストの散布図に描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
折れ線グラフを描画して、その色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
データフレームを1000の位で四捨五入して、整数型にする	df.round(-3).astype(int)
配列の変遷を折れ線グラフで描く	plt.plot(range(len(xdata)), xdata)
＜オプション＞赤にグラフの色を指定する	color = 'red'
文字列をASCII限定として正規表現で分ける	re.split(pattern, s, flags=re.ASCI)
ピアソンとしてデータフレームの相関行列	df.corr(method='pearson')
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
データフレームを複数の列によってを用いて降順に整列する	df.sort_values(by=column, ascending=False)
文字列を特殊文字も含め小文字に変換する	s.casefold()
実数が負の数か調べる	x < 0
線グラフの色をハニーデューにセットする	plt.plot(データ列, データ列2, color='honeydew')
実数のcosの逆数を計算する	math.acos(x)
最初のプログラムを書く	print('Hello World')
nが一桁の数	-9 <= n <= 9
イテラブルからサンプリングする	random.sample(iterable)
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
＜オプション＞グラフの色をグレーに指定する	color = 'gray'
＜オプション＞ダークオリーブグリーンにグラフの色をセットする	color = 'darkolivegreen'
実数が無限大か調べる	math.isinf(x)
カウンタからゼロ出現回数を取り除く	+aCounter
双方向キューに要素を積む	deq.append(element)
データフレームの未入力値を50パーセンタイルで埋める	df.fillna(df.median())
predicateFuncが真となるシーケンスの部分を消す	itertools.dropwhile(predicateFunc, iterable)
日付データは日付データより後ろ	aDate > aDate2
ユーザから入力される	int(input())
ヒストグラムを描画して、色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
変数が無限大に近づくとき、数値の極限値を算出する	sympy.limit(e, z, oo)
改行を取り除いて入力ストリームを一行ずつ読み込む	f.readline()
折れ線グラフを描画して、その色を赤に指定する	plt.plot(データ列, データ列2, color='red')
全ての十六進数字	string.hexdigits
＜オプション＞色をゲインズボロに設定する	color = 'gainsboro'
日付時刻データが何分か知る	aDatetime.minute
データフレームのリストカラムの中に文字列があるか	df[aList].isin([value])
ヒストグラムを描画して、その色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
線グラフの色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
カラーコードのバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
ヒストグラムを描画して、色を青緑に設定する	plt.hist(データ列, color='teal')
二つのデータ列を並べてヒストグラムにする	plt.hist([データ列, データ列2], color=['b', 'r'])
プログラムの実行をエラーとして終了する	sys.exit(1)
何回まで再帰ができるかを調べる	sys.getrecursionlimit()
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
リストの末尾から値をポップする	aList.pop()
＜オプション＞グラフの色をシルバーに指定する	color = 'silver'
タイムスタンプデータが火曜日	aDatetime.weekday() == 1
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
セットに値を追加する	aSet.add(element)
無限大	math.inf
＜オプション＞欠損値を先頭に来るようにする	na_position = 'first'
折れ線グラフを描画して色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
リストとリストについて破線グラフを描画して、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
線グラフを描画して、その色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightgreen')
＜オプション＞パパイヤウィップにグラフの色をセットする	color = 'papayawhip'
リストとリストを折れ線グラフで描画する	plt.plot(xdata, ydata)
データフレームの相関行列ケンドール相関係数で	df.corr(method='kendall')
＜オプション＞グラフの色をスラグレーに設定する	color = 'slategray'
カラーコードの左三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='<', c=rgb)
行列の演算をする	import numpy as np
マップに別の辞書の項目を加えて、更新する	aDict.update(aDict2)
ヒストグラムを描画して、色を黄色くする	plt.hist(データ列, color='y')
＜オプション＞チョコレートを用いる	color = 'chocolate'
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightslategray')
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
２つの文字列をタブで区切って表示する	print(value, value2, sep='\t')
＜オプション＞グラフの色をトマトに変更する	color = 'tomato'
明るいグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
線グラフを描画して、その色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
線グラフの色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
暗い色として散布図を重なりを見やすく描く	plt.plot(xdata, ydata, c='dark', alpha=0.5)
ヒストグラムを描画して、その色をディムグレーにする	plt.hist(データ列, color='dimgrey')
文字列の右側から部分文字列を除く	s.rstrip(sub)
データフレームのカラムの中に含まれる日付データと日付データの個数をカウントする	df[col].isin([value, value2]).sum()
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
リストと配列として淡いグラフを描画してその線幅をnに指定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
双方向キュー中の要素のインデックスを使う	deq.index(element)
印字を全部見る	string.printable
マッピングから多重集合を準備する	collections.Counter(aDict)
イテラブルを累加する	itertools.accumulate(iterable)
＜オプション＞コーラルにグラフの色を設定する	color = 'coral'
マップに要素を項目名として加える	aDict[key] = element
データ列と配列について破線グラフをプロットして、その色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
折れ線グラフの色をスチールブルーに指定する	plt.plot(データ列, データ列2, color='steelblue')
＜オプション＞グレー色を使用する	color = 'grey'
行列の各要素の最大公約数	np.gcd(aArray, aArray2)
列の値によってデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby(column)]
＜オプション＞スラグレーにグラフの色を設定する	color = 'slategray'
配列が何のデータ型か	aArray.dtype()
部分文字列をエラーなく文字列の末尾から除く	s.removesuffix(sub)
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
ヒストグラムの色をスプリンググリーンにセットする	plt.hist(データ列, color='springgreen')
配列をn個にビニングする	pd.cut(aArray, n)
データフレームの列に重複があればマスクする	df.duplicated(subset=column)
複数行対応として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
折れ線グラフを描画してその色をグリーンに変更する	plt.plot(データ列, データ列2, color='green')
データフレームをインデックスで並べる	df.sort_index()
文字列をセパレータで分割して文字列リストに変換する	s.split(sep)
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
折れ線グラフに黒い三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
ミディアムスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumslateblue')
浮動小数点数のn乗を求める	x ** n
0から始まる無限な整数リスト	itertools.count()
両端キューは空であるか判定する	len(deq) == 0
ヒストグラムを描画して、その色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
＜オプション＞グラフの色をシーグリーンに設定する	color = 'seagreen'
折れ線グラフを描画して、その色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
文字列の開始位置と終了位置の間に部分文字列が含まれるかどうか調べる	s.find(sub, start, end) != -1
明日の日付を見る	datetime.date.today() + datetime.timedelta(days=1)
十六進数字を全部求める	string.hexdigits
行列が何次元か	aArray.ndim
線グラフを描画して、その色をスカイブルーに変更する	plt.plot(データ列, データ列2, color='skyblue')
セパレータで文字列を区切る	s.split(sub)
＜オプション＞カンマを区切りで使う	sep = ','
現在処理中の例外を情報	sys.exc_info()
nが2で割り切れないか調べる	n % 2 == 1
データフレームのリスト列の欠損値を平均で埋める	df[aList].fillna(df[aList].mean())
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
折れ線グラフを描画して、その色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
リストとリストについて散布図を描画して、マーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
乱数シードを初期化する	random.seed()
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
＜オプション＞ミディアムターコイズを使う	color = 'mediumturquoise'
JSONフォーマットの文字列をデータにする	json.loads(b.decode('unicode-escape'))
濃いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
文字列を白色にする	f'\033[37m{value}\033[0m'
赤いバツマーカーを使って散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
折れ線グラフの色をトマトに変更する	plt.plot(データ列, データ列2, color='tomato')
ヒストグラムの色をパールバイオレットレッドにする	plt.hist(データ列, color='palevioletred')
折れ線グラフの色を紺に変更する	plt.plot(データ列, データ列2, color='darkblue')
日付データにn日を足す	aDate + datetime.timedelta(days=n)
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
列を累加した列	itertools.accumulate(iterable)
ファイルからの入力ストリームを見る	open(filepath)
ファイルからn文字、読み込む	f.read(n)
＜オプション＞小麦色色を使う	color = 'wheat'
ベクトルの列ごとの平均	np.mean(aArray, axis=0)
イテラブルとリストの折れ線グラフを描画してその色をカラーコードに変更する	plt.plot(xdata, ydata, color=rgb)
データフレームの中のカラムをn個にビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
ヒストグラムの色をパレットトルコイズに変更する	plt.hist(データ列, color='paleturquoise')
浮動小数点数の最小値	sys.float_info.min
自然対数の底	math.e
日付時刻データが日付時刻データよりあとか	aDatetime > aDatetime2
二つのデータフレームを列'A'と列'B'をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
数式を部分分数に展開する	sympy.apart(e)
リストのn番目以降の部分を取り出す	aList[n:]
nを二進文字列にする	bin(n)[2:]
データ列のNaNを平均値に指定する	ds.fillna(ds.mean())
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
データフレームを列によって並べて、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
要素∉集合	element not in aSet
破壊的に列によってでデータフレームをソートする	df.sort_values(by=column, inplace=True)
データ列の曜日は何日目か確認する	ds.dt.dayofweek
スクリプトファイルの絶対パスを使う	os.path.abspath(__file__)
＜オプション＞赤色を使用する	color = 'red'
＜オプション＞文字コードをSJISに設定する	encoding = 'shift_jis'
重なりを見やすくリストと配列の散布図を色差別ない色として描く	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
表データを降順に列名リストによってでソートする	df.sort_values(by=column, ascending=False)
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
折れ線グラフの色をグレーに指定する	plt.plot(データ列, データ列2, color='gray')
データフレームをインデックスを付けずにJSONLファイルに書き込む	df.to_csv(filename, index=None)
データフレームのカラムの最頻値	df[col].mode()
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
文字コードの最大値を調べる	sys.maxunicode
データフレームを複数の列を用いてソートし、、更新する	df.sort_values(by=column, inplace=True)
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
＜オプション＞レモンシフォン色を使用する	color = 'lemonchiffon'
リストの末尾から要素を取り出す	aList.pop()
数列とデータ列について色差別ない色の折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
ヒストグラムを描画して、その色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
マッピングの値として要素が含まれているかどうか調べる	element in aDict.values()
文字列を全て小文字に変換する	s.casefold()
折れ線グラフの色をダークサーモンにセットする	plt.plot(データ列, データ列2, color='darksalmon')
データ列を100の位で四捨五入する	ds.round(-2)
小数点以下の表示精度をn桁に変更する	pd.set_option('precision', n)
折れ線グラフのマーカーを丸にする	plt.plot(データ列, データ列2, marker='o')
破線グラフの色を明るいにする	plt.plot(xdata, ydata, linestyle='dash', color='bright')
折れ線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列, データ列2, color='mediumvioletred')
＜オプション＞グラフの色をディムグレーに設定する	color = 'dimgrey'
データフレームの列が正規表現文字列にマッチしない行を選ぶ	df[not df[column].str.match(s)]
列の各データが何回出現するか見る	ds.value_counts()
データフレームを二つの列を用いて昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
数の複素数	complex(x)
散布図を黒いバツマーカーで描画する	plt.plot(xdata, ydata, marker='x', c='k')
両端キューをタプルに変換する	tuple(deq)
行列の分散	np.var(aArray)
実行を強制的に終える	sys.exit()
カラーコードの下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
散布図に四角マーカーを用いる	plt.plot(xdata, ydata, marker='s')
リストと配列で淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
ライトスチールブルーにヒストグラムの色をする	plt.hist(データ列, color='lightsteelblue')
部分集合か調べる	aSet.issubset(aSet2)
黒い左三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
データフレームのリスト列の欠損値を後の値に設定する	df[aList].fillna(method='bfill')
データフレームのリストで指定されたカラムの相関行列を求める	df[aList].corr()
リストとリストの折れ線グラフをuntitledとラベル付けして描画する	plt.plot(xdata, ydata, label=untitled)
関数によってデータフレームをまとめたグループを使う	df.groupby(関数)
改行文字	'\n'
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
淡い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='muted')
プロットのカラーパレットをパステル調にする	sns.set(pallete='pastel')
＜オプション＞ロージーブラウンにグラフの色を変更する	color = 'rosybrown'
データフレームから型の列を抽出する	df.select_dtypes(ty)
ヒストグラムの区間を設定する	plt.hist(データ列, range=(start, end))
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
ベクトルの内積を計算する	np.dot(aArray, aArray2)
散布図に赤い丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c='r')
明るいの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
折れ線グラフを描画してその色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
グラフの見栄えを良くする	import seaborn as sns
棒グラフを描画する	plt.bar(ラベル列, データ列)
文字列の開始位置からと終了位置までの間に部分文字列がない	s.find(sub, start, end) == -1
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
両端キューの先頭から要素を取り除く	deq.popleft()
データフレームのカラムの値をまとめてValueMapで置き換える	df[col].replace(ValueMap)
折れ線グラフを描画して、その色をブラックに変更する	plt.plot(データ列, データ列2, color='black')
グラフのグリッドを暗くする	sns.set(style='darkgrid')
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列, データ列2, color='lightslategrey')
グラフの中の縦軸のラベルをuntitledに設定する	plt.ylabel(untitled)
データフレームの列がxより多い行を抽出する	df[df[column] > x]
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
＜オプション＞▲印を使う	marker = '^'
タイムスタンプデータからn秒分、減らす	aDatetime - datetime.timedelta(seconds=n)
データ列の要約統計量	ds.describe()
タイムスタンプデータからn時間分、引く	aDatetime - datetime.timedelta(hours=n)
リストとリストとして折れ線グラフを描き、、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n)
折れ線グラフを描画して、その色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
＜オプション＞グラフの色をコーラルに指定する	color = 'coral'
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
＜オプション＞データ型を指定する	dtype = np.int
文字列を空白で区切って、列挙する	s.split()
折れ線グラフの大バツマーカーを青色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
ふたつの集合のユニオンを求める	aSet.union(aSet2)
ビン数nで等量で配列をビン分割する	pd.qcut(aArray, n)
＜オプション＞グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
サブセットか	aSet.issubset(aSet2)
折れ線グラフの△印を赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
文字列は全て識別子名か調べる	s.isidentifier()
本日の月	datetime.datetime.today().month
ヒストグラムの色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
数列と配列の散布図に菱形マーカーを描画する	plt.plot(xdata, ydata, marker='D')
カラムの最頻値	ds.mode()
青色の色差別ないを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
折れ線グラフを描画して、その色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
データフレームを'A'列によってソートし、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
nから無限にカウントアップする	itertools.count(start=n)
データフレームをグループ化し、それぞれの列に対し最大値を算出する	df.groupby(column)[column2].max()
JSON形式のファイル入力を辞書に変換する	json.load(fin)
＜オプション＞グラフの種類を実線に指定する	linestyle = 'solid'
nを8進文字列に変換する	oct(n)[2:]
線グラフの色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
黒い下三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='v', c='k')
整数nを十六進表記に変換する	hex(n)
データ列の記述統計量	ds.describe()
空のリスト	[]
配列を分割数nでビン分割する	pd.cut(aArray, n)
折れ線グラフのマーカーを星にする	plt.plot(データ列, データ列2, marker='*')
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
＜オプション＞菱形マーカーを加える	marker = 'D'
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
オブジェクトが属性を持つか確認する	hasattr(obj, プロパティ名)
＜オプション＞ダークサーモンを用いる	color = 'darksalmon'
折れ線グラフを描画して、その色を赤に設定する	plt.plot(データ列, データ列2, color='red')
ヒストグラムを描画して、その色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
折れ線グラフの▲印を黄色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
文字列中に非空白がある	any(not c.isspace() for c in s)
折れ線グラフを描画して、色を青緑に設定する	plt.plot(データ列, データ列2, color='turquoise')
線グラフを描画して、色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
＜オプション＞グラフの色をライトスレイグレーに指定する	color = 'lightslategray'
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
データ列の時	ds.dt.hour
散布図に赤い下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='r')
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
イテラブルとリストの散布図を描画してマーカーを四角にする	plt.plot(xdata, ydata, marker='s')
データフレームのリストカラムの要約統計量を計算する	df[aList].describe()
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
ムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
タイムスタンプデータにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
オブジェクトが数値	isinstance(obj, (int,float))
行列の計算を行う	import numpy as np
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
双方向キューが空かどうか調べる	len(deq) == 0
赤い星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='r')
グラフの用途を論文に変更する	sns.set(context='paper')
線幅nの菱形マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
＜オプション＞インディアンレッド色を使う	color = 'indianred'
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
プラットホームはLinuxか	sys.platform.startswith('linux')
アルファalphaの折れ線グラフを描画する	plt.plot(xdata, ydata, alpha=alpha)
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
実数のk進対数	math.log(x, k)
文字列の左端から部分文字列を除く	s.removeprefix(sub)
＜オプション＞インディアンレッドにグラフの色を設定する	color = 'indianred'
文字列が英数字	s.isalnum()
折れ線グラフを描画して、その色をサドルブラウンに設定する	plt.plot(データ列, データ列2, color='saddlebrown')
折れ線グラフを描画して、その色をロージーブラウンに変更する	plt.plot(データ列, データ列2, color='rosybrown')
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
要素はタプルの値に含まれていないかどうか調べる	element not in aDict.values()
二つのデータフレームを異なるカラムをキーにして全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ヒストグラムを描画して、その色をミディアムシアグリーンにする	plt.hist(データ列, color='mediumseagreen')
ミディアムオーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='mediumorchid')
ヒストグラムを描画して、色をライトグリーンに変更する	plt.hist(データ列, color='lightseagreen')
xのハッシュ値	hash(x)
文字列の両端から空白と改行を取り除く	s.strip()
データフレームのリスト列の各列間の相関係数	df[aList].corr()
ヒストグラムの色をローングリーンにする	plt.hist(データ列, color='lawngreen')
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
データフレームのリスト列の中にいくつ日付データがあるかカウントする	df[aList].isin([value]).sum()
データフレームを各列毎に集約して、列の最小値を算出する	df.groupby(column)[column2].min()
＜オプション＞グラフの種類を実線に設定する	linestyle = 'solid'
プログラムを正常に終了する	sys.exit(0)
実数のハイパボリック・タンジェントの逆数	math.atanh(x)
＜オプション＞ライトスレイグレー色を使う	color = 'lightslategrey'
変数を太字にする	f'\033[1m{value}\033[0m'
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
グラフのサイズを指定する	plt.figure(figsize=(width, height))
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
正規表現patternでまとめてデータ列をreplに変更する	ds.replace(pattern, repl, regex=True)
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
グラフをポスター用にセットする	sns.set(context='poster')
オプションで、標準エラーに出力する	file = sys.stderr
四角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='s')
＜オプション＞ホットピンクを使う	color = 'hotpink'
データフレームの文字列を欠損値にする	df.replace(s, np.nan)
配列と配列として濃いグラフを描画して、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', color='r')
二つの列によってデータフレームをソートし、、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
要素が集合の要素に含まれるか調べる	element in aSet
タプルの個数を見る	len(aTuple)
データフレームをJSONLファイルに行を付けずに保存する	df.to_csv(filename, index=None)
リストの先頭を使う	aList[0]
配列を元に全要素が1の配列	np.ones_like(aArray)
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
リストとリストの散布図を淡い色で描く	plt.plot(xdata, ydata, c='muted')
データフレームを表示するとき、ヘッダー行を右寄せに指定する	pd.set_option('colheader_justify', 'right')
n個の数値イテラブルを使う	range(n)
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
列の欠損値を前の行の値で置換する	ds.fillna(method='ffill')
カラーコードのポイントマーカーをリストとデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
nを符号付きでバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
表データを列名リストを用いて整列して、更新する	df.sort_values(by=column, inplace=True)
明るい色の折れ線グラフを描画して線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
データフレームのリスト列の相関行列	df[aList].corr()
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
カラーコードに棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
列の正規分布に対する左右対称性	ds.kurt()
＜オプション＞グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
ホットピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='hotpink')
リストとリストについての散布図に黒色の右三角マーカーを描く	plt.plot(xdata, ydata, marker='>', c='k')
折れ線グラフを描画して、その色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
＜オプション＞グラフの色をライトグレーに変更する	color = 'lightgray'
cos	math.cos(x)
リストとリストの散布図にポイントマーカーを描く	plt.plot(xdata, ydata, marker='.')
＜オプション＞色をアンティークホワイトに設定する	color = 'antiquewhite'
辞書を浅くコピーする	dict(aDict)
＜オプション＞グラフの色をペルーに設定する	color = 'peru'
折れ線グラフを描画して、その色をライトブルーにセットする	plt.plot(データ列, データ列2, color='lightblue')
整数nが配列のどれかか調べる	n in aArray
双方向キューに要素をエンキューする	deq.appendleft(element)
配列とリストの折れ線を描き、色を文字列に指定する	plt.plot(xdata, ydata, color=s)
数値時刻のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
リストと配列についての散布図に大バツマーカーを描く	plt.plot(xdata, ydata, marker='X')
n個にリストをビン分割する	pd.cut(aList, n)
線グラフを描画して、その色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
辞書順で文字列が文字列より前か調べる	s < s2
散布図に黒い丸マーカーを使う	plt.plot(xdata, ydata, marker='o', c='k')
データフレームの指定された3つの列を取り出す	df[[column, column2, column3]]
常用対数を求める	math.log10(x)
リストの重複を取り除く	sorted(set(aList), key=aList.index)
リストとリストについて散布図を描画して、マーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
日付時刻データの日数を使う	aDatetime.day
文字列がリストの要素	element in aList
赤い上三角マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='^', c='r')
既存の行列をベースに全要素が初期値の行列	np.full_like(aArray, 初期値)
明るい色でヒストグラムを描画する	plt.hist(xdata, color='bright')
Pandasでデータフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
＜オプション＞マーカーを四角に変更する	marker = 's'
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
データフレームを'A'列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
日付データが日付データより先	aDate < aDate2
＜オプション＞グラフの種類を破線に設定する	linestyle = 'dashed'
データフレームを10の位で丸める	df.round(-1)
ヒストグラムの色をバリーウッドにする	plt.hist(データ列, color='burlywood')
＜オプション＞パールバイオレットレッドにグラフの色を指定する	color = 'palevioletred'
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
標準出力の出力先がターミナルか	sys.stdout.isatty()
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
日付時刻データがタイムスタンプデータと同時か調べる	aDatetime == aDatetime2
実数のn乗の実数剰余	pow(x, n, y)
実行時の標準出力の出力先がターミナルか	os.isatty(sys.stdin.fileno())
折れ線グラフの大バツ印を黄色くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
タプルの先頭のn要素を取り除く	aTuple[n:]
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
暗いの色を青色に変更する	plt.plot(xdata, ydata, linestyle='dark', color='b')
nが正の数かどうか判定する	n > 0
ヒストグラムを描画してその色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
＜オプション＞フクシアにグラフの色を設定する	color = 'fuchsia'
スタックの大きさ	len(deq)
配列とリストの散布図に三角マーカーをプロットする	plt.plot(xdata, ydata, marker='^')
セットに要素を追加する	aSet.add(element)
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
ヒストグラムの色をアクアマリンに指定する	plt.hist(データ列, color='aquamarine')
データフレームの上位25%を求める	df.quantile(0.25)
データフレームの列の尖度を求める	df[col].skew()
ヒストグラムを描画して色をシルバーに変更する	plt.hist(データ列, color='silver')
集合から全ての要素を取り除く	aSet.clear()
折れ線グラフの△マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
イテラブルとリストについての散布図に赤色の星マーカーをプロットする	plt.plot(xdata, ydata, marker='*', c='r')
文字列中の部分文字列の出現をカウントする	s.count(sub)
八進数字を全部見る	string.octdigits
青いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
データ列と数列の散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
折れ線グラフを描画して、その色をフォレストグリーンに指定する	plt.plot(データ列, データ列2, color='forestgreen')
折れ線グラフを描画して色を青に設定する	plt.plot(データ列, データ列2, color='blue')
カラムのpercent分位数	ds.quantile(percent/100)
日付と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
Pandasで、datetime64型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
TSVファイルをカラムの名前を指定せず読み込む	pd.read_csv(filename, header=None)
数値をキューの末尾につけ加える	deq.append(element)
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を求める	df.groupby([column, column2], as_index=False).max()
折れ線グラフを描画して、色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
データ列と配列について散布図を描画し、、マーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
複素数型のゼロ埋めされた配列	np.zeros(要素数, dtype=bool)
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
折れ線グラフに黒い菱形マーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
リストとイテラブルについての散布図にカラーコードのバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
文字列を全て小文字に変換する	s.lower()
今日の年数	datetime.datetime.today().year
切り捨てながらnをn2分の一にする	n //= n2
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
＜オプション＞淡いピンク色にグラフの色を設定する	color = 'lightpink'
イテラブルとリストについての散布図にポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.')
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
黄色い大バツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
全ての空白文字	string.whitespace
データフレームから破壊的に重複した行をドロップする	df.drop_duplicates(inplace=True)
折れ線グラフを描画して、その色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
ファイルにxを文字列に変換して書く	f.write(str(x))
折れ線グラフの透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
リストと配列について散布図を描き、、マーカーを星に設定する	plt.plot(xdata, ydata, marker='*')
タプルの値を並べる	sorted(aTuple)
表データで列に重複があるか調べる	df.duplicated(subset=column)
＜オプション＞グラフの色をダークサーモンに設定する	color = 'darksalmon'
データフレームのカラムの要約統計量	df[col].describe()
マッピングをインデント幅nのJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
配列とイテラブルについて散布図を描画し、、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
白い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='w')
三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^')
日付データの月	aDate.month
折れ線グラフに大バツマーカーを使う	plt.plot(データ列, データ列2, marker='X')
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
濃いカラーパレットをグラフの描画で使う	sns.set(pallete='deep')
＜オプション＞グラフの色を黄緑に設定する	color = 'chartreuse'
部分文字列が文字列中に存在しないかどうか調べる	sub not in s
オプションで、標準エラーを用いる	file = sys.stderr
折れ線グラフの四角印を黒色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
データ列は何分か調べる	ds.dt.minute
データフレームのリストカラムを100の位で四捨五入して、整数型にする	df[aList].round(-2).astype(int)
赤色の明るいの折れ線を描画する	plt.plot(xdata, ydata, linestyle='bright', color='r')
折れ線グラフを描画して、その色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
BOM付きとして追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
線グラフを描画して、その色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
リストの各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
リストは全て真	all(aList)
赤色のダイアモンドマーカーをリストとリストについての散布図にプロットする	plt.plot(xdata, ydata, marker='D', c='r')
折れ線グラフを描画して、その色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
＜オプション＞マーカーを下三角に変更する	marker = 'v'
データフレームのリストカラムを1000の位で丸めて整数型にする	df[aList].round(-3).astype(int)
カウンタをイテラブルから新規生成する	collections.Counter(iterable)
TSVファイルファイル名がか	filename.endswith('.tsv')
データ列のNaNを最大値で補う	ds.fillna(ds.max())
文字列を最初の部分文字列で二分する	s.partition(sub)
散布図にカラーコードのバツマーカーを使用する	plt.plot(xdata, ydata, marker='x', c=rgb)
predicateFuncを適用したとき真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
部分文字列が文字列中に存在するか調べる	sub in s
折れ線グラフを描画して、色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
全要素を０で初期化された複素数型の行列	np.zeros(行数, 列数, dtype=bool)
明るい色で重なりを見やすく配列とリストの散布図を描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
要素が集合のメンバーかどうか調べる	element in aSet
データフレームの中に存在する文字列の合計を数える	df.isin([value]).sum()
データ列の母標準偏差	ds.std(ddof=0)
ヒストグラムを描画してその色をライムに指定する	plt.hist(データ列, color='lime')
ふたつの集合の差集合を計算する	aSet.difference(aSet2)
実部と虚部から複素数	complex(x, y)
句読点文字を使う	string.punctuation
データフレームのリスト列を整数に丸める	df[aList].round()
＜オプション＞アクア色を使用する	color = 'aqua'
赤い三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='r')
線グラフの色をミディアムアクアマリンに指定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
リストと配列の折れ線グラフを描いて、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
文字列の両端から空白を除く	s.strip()
文字列のn番目	s[n]
nがn2以下それかn3以上か調べる	n <= n2 or n >= n3
xの小数点以下'2'桁までの文字列にする	':.2f'.format(x)
グラフに鉛直方向の破線を付ける	plt.axvline(x=0, linestyle='dashed')
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
折れ線グラフを描画して、色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
色差別ないの折れ線グラフの色を赤にする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
リネンにヒストグラムの色を指定する	plt.hist(データ列, color='linen')
＜オプション＞ライトシアン色を使う	color = 'lightcyan'
データ列を折れ線グラフに描画して、マーカーをダイアモンドにする	plt.plot(データ列, データ列2, marker='D')
日付時刻データはタイムスタンプデータより後ろかどうか調べる	aDatetime > aDatetime2
ヒストグラムを描画して、色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
実数の三乗を求める	x ** 3
データフレームの列をNaNも加えてワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
ファイルを絶対パスに変換する	os.path.abspath(filepath)
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
赤い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='r')
データ列を折れ線グラフに描画して、マーカーを丸印にする	plt.plot(データ列, データ列2, marker='o')
＜オプション＞インディゴを使う	color = 'indigo'
組のn番目からn2番目までの部分	aTuple[n:n2]
カウンタの最も頻出の項目	aCounter.most_common()[0]
折れ線グラフのバツマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
散布図をカラーコードのポイントマーカーで描く	plt.plot(xdata, ydata, marker='.', c=rgb)
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
両端キューのデータを右にn個分回転させる	deq.rotate(n)
タイムスタンプデータを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
折れ線グラフの右三角マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='>', markersize=n)
nがn2よりも大きいか調べる	n > n2
マップのキーを列挙する	aDict.keys()
リストを濃い色のヒストグラムで描画する	plt.hist(xdata, color='deep')
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
ヒストグラムを描画して色をパープルに変更する	plt.hist(データ列, color='purple')
データフレームを２つの列で並べ直す	df.sort_values(by=['A', 'B'])
コマンド引数を列挙する	sys.argv[1:]
リストとリストの青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
セットが空集合か	len(aSet) == 0
データフレームのn行まで選択する	df[:n]
折れ線グラフの色をグリーンに指定する	plt.plot(データ列, データ列2, color='green')
文字化けしないようにタブ区切りのファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
＜オプション＞シエナに色を指定する	color = 'sienna'
＜オプション＞青紫色を使う	color = 'violet'
ヒストグラムの色をゴールドにする	plt.hist(データ列, color='gold')
グラフの色をpalleteNameに変更する	sns.set(pallete=palleteName)
リストと配列について色差別ないグラフを描画して、その色を黒くする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
折れ線グラフの左三角印を黄色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
データフレームの列がx未満の行を抽出する	df[df[column] < x]
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
ヒストグラムを描画してその色をゴールドに変更する	plt.hist(データ列, color='gold')
日付データにn秒分加算する	aDate + datetime.timedelta(seconds=n)
nかけるn2を算出する	n * n2
データフレームのカラムの年	df[col].dt.year
折れ線グラフに黄色い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
折れ線グラフを描画してその色をスレートブルーに変更する	plt.plot(データ列, データ列2, color='slateblue')
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
リストとデータ列について散布図を描画して、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
暗い赤色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkred')
＜オプション＞データ型を指定する	dtype = np.uint8
整数最小公倍数	math.lcm(n, n2)
ストリーム全体をリストに変換する	[s.strip() for s in f.readlines()]
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
＜オプション＞どのカラムもインデックスにしない	index_col = None
＜オプション＞グラフの色をマゼンタに設定する	color = 'magenta'
全ての八進数字	string.octdigits
グラフに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
Pandasで文字列を日付データに変換する	pd.to_datetime(s)
パパイヤウィップにヒストグラムの色をセットする	plt.hist(データ列, color='papayawhip')
ヒストグラムを描画してその色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
＜オプション＞文字列の示すエンコーディングを使う	encoding = s
暗いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
日付データからn時間分、減らす	aDate - datetime.timedelta(hours=n)
二つの浮動小数点数は十分に近いか調べる	math.isclose(x, x2)
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
データフレームのカラムがxでない行をフィルタする	df[df[column] == x]
データフレームのリストカラムの中にいくつNaNが含まれるかカウントする	df[aList].isna().sum()
文字列がタプルに含まれるかどうかテストする	element in aTuple
＜オプション＞色をミッドナイトブルーに設定する	color = 'midnightblue'
インディアンレッドにヒストグラムの色を指定する	plt.hist(データ列, color='indianred')
データフレームの列のヒストグラムをプロットする	plt.hist(df[column])
重なりを見やすく散布図を色差別ない色のマーカーでプロットする	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
＜オプション＞グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
アルファベットの小文字を全部見る	string.ascii_lowercase
データフレームのカラムが何年か見る	df[col].dt.year
オプションで出力先を標準エラーに設定する	file = sys.stderr
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
＜オプション＞ポイントマーカーを用いる	marker = '.'
リストとデータ列について破線グラフを描画して、その色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
データフレームを各列毎に集約して列の標準偏差を計算する	df.groupby(column)[column2].std()
線グラフを描画して、その色を小麦色に変更する	plt.plot(データ列, データ列2, color='wheat')
データフレームを各列毎に分類して、文字列というグループの大きさを計算する	df.groupby(column).size()[s]
キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
赤い星マーカーをイテラブルとデータ列についての散布図にプロットする	plt.plot(xdata, ydata, marker='*', c='r')
タイムスタンプデータは何日か知る	aDatetime.day
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
集合に要素を追加する	aSet.add(element)
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
＜オプション＞線種を一点鎖線に変更する	linestyle = 'dashbot'
リストの各要素を関数に適用した結果で並べ変える	sorted(aList, key=func)
＜オプション＞タブを区切りで使う	sep = '\t'
データフレームのリストカラムのNaNを中央値で埋める	df[aList].fillna(df[aList].median())
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='r')
昇順にリストの要素をソートする	sorted(aList, reverse=True)
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
全要素を初期値で初期化された配列	np.full(要素数, 初期値, dtype=np.int)
ヒストグラムを描画してその色をグレーに指定する	plt.hist(データ列, color='gray')
2つのデータフレームを列'A'と列'B'をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
線グラフを描画して、色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
明るい色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
ヒストグラムを描画して、その色をライトグレーにする	plt.hist(データ列, color='lightgrey')
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
リストとリストのカラーコードの暗いをプロットする	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
ファイルを開いて]追加ストリームを使う	open(filepath, mode='a')
ヒストグラムを描画して、その色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
折れ線グラフに大きさnの三角印を描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
折れ線グラフの色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
＜オプション＞グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
リストとリストで折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
データ列からユニークな値を抽出し、リスト化する	ds.unique().tolist()
オブジェクトが関数か	callable(obj)
配列とリストの青い淡いを描く	plt.plot(xdata, ydata, linestyle='muted', color='b')
集合を更新不能に変換する	frozenset(aSet)
リストとリストについて散布図を描画して左三角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='<', c=rgb)
スクリプトファイルの絶対パス	os.path.abspath(__file__)
データフレームの中の列を中央値で分割する	pd.qcut(df[col], 2)
データフレームを表示するとき、列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
暗いを用いて柱状図を描画する	plt.hist(xdata, color='dark')
2つの変数を順にプリントする	print(value, value2)
＜オプション＞アイボリー色を使う	color = 'ivory'
データフレームのカラムが正規分布からどの程度尖っているか見る	df[col].skew()
辞書のの一覧	aDict.values()
暗い色で重なりを見やすく配列とリストについての散布図を描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
配列と配列について散布図をプロットして、その大きさをnに変更する	plt.scatter(xdata, ydata, s=n)
リストの末尾にリストを加え、拡張する	aList.extend(aList2)
データ列を1000の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
データフレームの列がx以上かつx2未満のデータを抽出する	df[(x <= df[column]) & (df[column] < x2)]
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
要素ひとつのりストを作る	[element]
アルファベットを全部見る	string.ascii_letters
印字可能な文字を全て使う	string.printable
列によってデータフレームを並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
リストとリストの破線グラフを描画してその色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
柱状図をstartからendの区間で描画する	plt.hist(データ列, range=(start, end))
折れ線グラフの上三角マーカーを青くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
相関を可視化する	plt.scatter(xdata, ydata)
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
赤い左三角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='<', c='r')
データフレームを列によってソートして、新しいインデックスを振り直す	df.sort_values(columns).reset_index()
変数を太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
散布図を左三角マーカーを用いて描く	plt.plot(xdata, ydata, marker='<')
＜オプション＞グラフの色をカーキに設定する	color = 'khaki'
リストとリストの暗いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
黒い濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
データ列を折れ線グラフに描画して、マーカーを左三角にする	plt.plot(データ列, データ列2, marker='<')
タイムスタンプデータをISO書式の文字列に変換する	aDatetime.isoformat()
暗いを用いてリストについてのヒストグラムを描く	plt.hist(xdata, color='dark')
リストをnからナンバリングする	enumerate(aList, start=n)
数列とリストについて濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
折れ線グラフの下三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
データフレームから重複した行を削除する	df.drop_duplicates()
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
文字列が全て大文字	s.isupper()
＜オプション＞ライトグリーンにグラフの色を設定する	color = 'lightseagreen'
小数点数の正弦を求める	math.sin(x)
数式を展開する	sympy.expand(e)
マップをコピーする	aDict.copy()
データフレームの指定した３つの列を抽出する	df[[column, column2, column3]]
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
実数の絶対値を算出する	math.fabs(x)
リストからn要素サンプリングする	random.sample(iterable, k=n)
赤色の濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='r')
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
データフレームからカラムを1つ選択する	df[[column]]
柱状図を半透明にする	plt.hist(データ列, alpha=0.5)
ヒストグラムを半透明にする	plt.hist(データ列, alpha=0.5)
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
折れ線グラフに線幅nの左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
複数の列の値によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
カウンタの文字列を一つ増やす	aCounter[element] += 1
＜オプション＞グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
データフレームで、列の重複を見る	df.duplicated(subset=column)
xが一桁の整数か調べる	-9 <= x <= 9
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
文字列を文字コード列に変換する	[ord(ch) for ch in s]
データフレームを各列と列の組み合わせ毎に集計して、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
＜オプション＞符号なし８ビット整数型を使う	dtype = np.uint8
データフレームのカラムの欠損値を最大値で補う	df[col].fillna(df[col].max())
xが1、もしくは2、もしくは3に等しいかどうか確認する	x == 1 or x == 2 or x == 3
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
整数nの二進表現を見る	bin(n)
データ列の中央値	ds.median()
折れ線グラフの左三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='<', markersize=n)
表データから重複した行を削除する	df.drop_duplicates()
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
散布図に黒いポイントマーカーを用いる	plt.plot(xdata, ydata, marker='.', c='k')
最大値でデータフレームの欠損値を補う	df.fillna(df.max())
xが一桁の正の数かどうか調べる	0 <= x <= 9
集合から何でもいいからひとつ取り出す	aSet.pop()
データ列を等量で分割数nとして分割する	pd.qcut(ds, n)
集合にリストを追加更新する	aSet.update(iterable)
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
オブジェクトは浮動小数点数	isinstance(obj, float)
標準入力	sys.stdin
＜オプション＞ロイヤルブルーを使う	color = 'royalblue'
グラフの中のy座標の説明をuntitledに設定する	plt.ylabel(untitled)
黄色で実行結果をプリントする	print(f'\033[33m{value}\033[0m')
データ列のどの値が頻出か見る	ds.mode()
列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
＜オプション＞グラフの色をライムグリーンに設定する	color = 'limegreen'
正規表現patternでまとめてデータフレームのカラムを置き換える	df[col].replace(pattern, repl, regex=True)
ファイルを開き]、読み込みストリームを使う	open(filepath, mode='r')
事前に複数行対応としてパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
データ列を10の位で四捨五入する	ds.round(-1)
0から始まる無限数列	itertools.count()
整数nの二進文字列	bin(n)[2:]
濃い色のマーカーで散布図を描く	plt.plot(xdata, ydata, c='deep')
折れ線グラフに緑色の三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
列の値によってデータフレームをグループ化する	df.groupby(column)
JSON文字列をデータにする	json.loads(b.decode('unicode-escape'))
マップから最後の項目をポップする	aDict.popitem()
オブジェクトはあるクラスか調べる	isinstance(obj, クラス)
アルファベットの大文字列	string.ascii_uppercase
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
濃い色のマーカーを散布図に用いる	plt.plot(xdata, ydata, c='deep')
データ列の日	ds.dt.day
ファイル名の区切り記号	os.sep
折れ線グラフを実線に変更する	plt.plot(データ列, データ列2, linestyle='solid')
線グラフを描画して、色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
折れ線グラフを描画して、色を白くする	plt.plot(データ列, データ列2, color='w')
二つの変数を同じ値にする	x = y = n
ファイルから拡張子付きのファイル名を取り出す	os.path.basename(filepath)
明るいの折れ線グラフを数列とリストで描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
折れ線グラフを描画して、その色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
Pythonパスにを追加する	sys.path.append(dir)
フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
データフレームを千の位で丸める	df.round(-3)
＜オプション＞スカイブルーを使用する	color = 'skyblue'
折れ線グラフを描画して、色をペルーにセットする	plt.plot(データ列, データ列2, color='peru')
＜オプション＞データ型を指定する	dtype = bool
リストとリストについて散布図をプロットし、、マーカーの色を色差別ないに指定する	plt.plot(xdata, ydata, c='colorblind')
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
＜オプション＞グラフの色をパープルに設定する	color = 'purple'
マップの値を列挙する	aDict.values()
ヒストグラムを描画してその色をピンクに設定する	plt.hist(データ列, color='pink')
ヒストグラムの色をタンに指定する	plt.hist(データ列, color='tan')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
実数が非数か調べる	math.isnan(x)
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
配列と数列の黒いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='k')
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
文字列をカンマで区切って、列挙する	s.split(',')
パステル調のグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
カラーコードの△マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='^', c=rgb)
＜オプション＞ライトグレー色を使う	color = 'lightgrey'
折れ線グラフの下三角印を赤くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
グラフで使える色の一覧	matplotlib.colors.cnames
ファイル全体を行単位で分割して読み込む	f.readlines()
線グラフを描画して、その色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
＜オプション＞セパレータをスラッシュにする	sep = '/'
ヒストグラムを描画して、その色をパープルに設定する	plt.hist(データ列, color='purple')
数列とリストの散布図に黒い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
データフレームの平均値を求める	df.mean()
ヒストグラムの色をピンクに変更する	plt.hist(データ列, color='pink')
＜オプション＞色をダークスラテグレーに指定する	color = 'darkslategray'
既存のファイルをEUCで追加できるように開く]	open(filepath, mode='a', encoding='euc_jp')
文字列をエンコーディングでバイト列にする	s.encode(encoding=encoding)
マッピングの全項目を消去する	aDict.clear()
リストと配列についての散布図を明るい色で描く	plt.plot(xdata, ydata, c='bright')
マッピングをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
ヒストグラムの色をディープスカイブルーにセットする	plt.hist(データ列, color='deepskyblue')
データフレームを列を用いてソートし、、新しいインデックスを加える	df.sort_values(columns).reset_index()
カラムのNaNを前の行の値に減らす	ds.fillna(method='ffill')
ヒストグラムを描画して、その色をトマトに設定する	plt.hist(データ列, color='tomato')
スクリプトの名前	sys.argv[0]
赤い下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
折れ線グラフのバツマーカーを緑色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
プレゼンにプロットの目的をセットする	sns.set(context='talk')
xに横棒の幅を設定する	plt.barh(ラベル列, データ列, width=x)
折れ線グラフに描画して、マーカーを大バツにする	plt.plot(データ列, データ列2, marker='X')
赤いポイントマーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='.', c='r')
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
青い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='b')
データフレームを'A'列と'B'列の値によってグループ化する	df.groupby(['A', 'B'])
列の各要素に対して、predicateFuncがtrueであればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
折れ線グラフの色をグリーンにセットする	plt.plot(データ列, データ列2, color='green')
タプル内の要素が全て真	all(aTuple)
モードでデータフレームの欠損値を埋める	df.fillna(df.mode().iloc[0])
集合が空かどうか調べる	len(aSet) == 0
ヒストグラムを描画して、その色をペルーに指定する	plt.hist(データ列, color='peru')
二つの表を縦に連結する	pd.concat([df, df2], axis=0)
ヒストグラムを描画してその色をサーモンに変更する	plt.hist(データ列, color='salmon')
データフレームのカラムの日を求める	df[col].dt.day
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
カウンタのキーとカウントを列挙する	aCounter.items()
リストとリストの折れ線グラフを描画して、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
線グラフを描画して、その色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
データフレームの行の名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
データフレームの列が正規分布からどれだけ尖っているか見る	df[col].skew()
中央値でデータフレームの中の列をビン分割する	pd.qcut(df[col], 2)
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
出力ストリームに文字列を書き込む	f.write(s)
ヒストグラムを描画して、その色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
折れ線グラフを描画して色をミディアムスレートブルーに変更する	plt.plot(データ列, データ列2, color='mediumslateblue')
色差別ないの色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
nがn2以下、または、n3以上か	n <= n2 or n >= n3
＜オプション＞ミディアムパープルにグラフの色を指定する	color = 'mediumpurple'
＜オプション＞グラフの色をシャルトリューズに設定する	color = 'chartreuse'
二つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
部分文字列が文字列の開始位置と終了位置の間に含まれる	s.find(sub, start, end) != -1
青い濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
文字列が全て大文字か調べる	s.isupper()
折れ線グラフを描画して、その色をゴーストホワイトに指定する	plt.plot(データ列, データ列2, color='ghostwhite')
データフレームの指定した列の名前一覧の列だけ取り出す	df[columns]
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
＜オプション＞スプリンググリーンを用いる	color = 'springgreen'
データ列とリストのカラーコードのパステル調のグラフをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ふたつの集合のいずれか一方だけの集合を使う	aSet.symmetric_difference(aSet2)
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
２つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
折れ線グラフを描画して、その色をコーンズシルクに変更する	plt.plot(データ列, データ列2, color='cornsilk')
片仮名をひらがなにする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
にx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
淡い色のマーカーで散布図をプロットする	plt.plot(xdata, ydata, c='muted')
＜オプション＞ダークターコイズにグラフの色を設定する	color = 'darkturquoise'
文字列をフォーマットfmtで日付データにする	pd.to_datetime(s, format=fmt)
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
データフレームのリスト列の未入力値を最小値で埋める	df[aList].fillna(df[aList].min())
＜オプション＞整数型を使う	dtype = np.int
リストと配列のカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
リストとリストについての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
折れ線グラフを描画して、その色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
折れ線グラフにバツマーカーを使う	plt.plot(データ列, データ列2, marker='x')
データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
データフレームを列の値によってグループ化し、要約統計量を算出する	df.groupby(column).describe()
からデータフレームを読む	pd.read_excel(filename)
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
＜オプション＞ブラックにグラフの色を設定する	color = 'black'
辞書からキーの値をエラーなく得る	aDict.get(key, None)
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
文字列を走査し、正規表現にASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムを描画してその色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
チョコレートにヒストグラムの色を設定する	plt.hist(データ列, color='chocolate')
リストをn個に等間隔でビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
赤い右三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
＜オプション＞サンディーブラウン色を使う	color = 'sandybrown'
＜オプション＞グラフの色をディープスカイブルーにセットする	color = 'deepskyblue'
データフレームのカラムは何時か見る	df[col].dt.hour
赤い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='r')
標準入力から1行だけ読み込んで改行を取り除く	sys.stdin.readline().rstrip()
折れ線グラフを描画して、その色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
ヒストグラムを描画してその色をミスティローズに指定する	plt.hist(データ列, color='mistyrose')
列の値でデータフレームをグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
折れ線グラフを描画して、その色をミディアムスプリンググリーンにする	plt.plot(データ列, データ列2, color='mediumspringgreen')
データフレームのカラムを四捨五入して、整数型にする	df[col].round().astype(int)
データフレームのリストカラムの中に存在する文字列との合計を求める	df[aList].isin([value, value2]).sum()
nが何桁か	len(str(n))
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
リストとリストについて黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
ダークバイオレット色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkviolet')
変数を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
イテラブルとリストのカラーコードの色差別ないグラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
データフレームを欠損値を含めて列の値で集計する	df.groupby(column, dropna=False)
データ列とリストについての散布図に▽マーカーを描画する	plt.plot(xdata, ydata, marker='v')
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
改行	'\n'
各列毎にデータフレームをグループ化して、列の分散を求める	df.groupby(column)[column2].var()
濃いの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
明るい色の折れ線を描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
＜オプション＞グラフの色をシーグリーンに変更する	color = 'seagreen'
ブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='brown')
マッピングを並べ直してJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
＜オプション＞サーモン色を用いる	color = 'salmon'
改行なしに二つの文字列をプリントする	print(value, value2, end='')
日付時刻データの日付を使う	aDatetime.date()
データフレームの上n行を抽出する	df.head(n)
リストが全て真かどうか調べる	all(aList)
グラフで用いるフォントを日本語表示に変更する	sns.set(font='IPAexGothic')
＜オプション＞ロイヤルブルーを用いる	color = 'royalblue'
データフレームの列の値がxでないデータをフィルタする	df[df[column] == x]
ヒストグラムの色をクリムゾンに指定する	plt.hist(データ列, color='crimson')
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
行列の転置行列を計算する	aArray.T
データ列とリストの明るいを描画して、色を黒くする	plt.plot(xdata, ydata, linestyle='bright', color='k')
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
グラフ中の(x,y)の場所に凡例を加える	plt.legend(loc=(x, y))
配列とリストについて散布図を描いて、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
双方向キューの先頭から値を取り除く	deq.popleft()
折れ線グラフを描画して、その色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
文字列を太字にする	f'\033[1m{value}\033[0m'
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
データフレームの列の値がリストに含まれるデータを取り出す	df[df[column].isin(aList)]
ヒストグラムを描画して、その色をダークグリーンにセットする	plt.hist(データ列, color='darkgreen')
データ列を100の位で丸める	ds.round(-2)
散布図に赤色のポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='r')
データフレームのグループごとの標準偏差	df.groupby(column).std()
xが真かどうか調べる	bool(x)
折れ線グラフを描画して、その色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
＜オプション＞オールドレース色を使う	color = 'oldlace'
バイナリモードとしてファイルをオープンして]、fとする	f = open(filepath, mode='rb')
小さい順に列で破壊的にデータフレームをソートする	df.sort_values(by=column, ascending=True, inplace=True)
＜オプション＞ライトシアン色を用いる	color = 'lightcyan'
フォレストグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='forestgreen')
リストと数列について濃い色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
既存の行列を元に全要素が0のベクトル	np.zeros_like(aArray)
ヒストグラムを描画して、その色をライトグレーに変更する	plt.hist(データ列, color='lightgrey')
折れ線グラフを描画して、その色をライトグレーに変更する	plt.plot(データ列, データ列2, color='lightgray')
両端キューの末尾に要素をつけ加える	deq.append(element)
データフレームのリストカラムの相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
ケンドール順位相関係数でデータフレームの相関行列	df.corr(method='kendall')
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
イテラブルを関数でフィルタする	map(func, iterable)
横方向に二つのデータフレームをつなぐ	pd.concat([df, df2], axis=1)
エクセルデータファイルを読み込む	pd.read_excel(filename)
オリーブ色の線グラフを描画する	plt.plot(データ列, データ列2, color='olive')
ヒストグラムを描画して、その色をダークカーキに変更する	plt.hist(データ列, color='darkkhaki')
JSONフォーマットの文字列をデータに変換する	json.loads(jsonString)
ヒストグラムを描画して、その色をパールゴールデンロッドに変更する	plt.hist(データ列, color='palegoldenrod')
データフレームの列の一意な値の個数	df[col].nunique()
リストとデータ列について散布図を描画し、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumseagreen')
＜オプション＞降順にする	ascending = False
ヒストグラムを描画してその色をモカシンに設定する	plt.hist(データ列, color='moccasin')
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
リストとリストについて散布図を描画して、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
折れ線グラフを描画してその色をダークブルーにセットする	plt.plot(データ列, データ列2, color='darkblue')
データフレームのリストカラムのメディアン	df[aList].median()
配列の分散	np.var(aArray)
データフレームの重複する行数のマスク	df.duplicated()
ValueMapでまとめてデータフレームのリストカラムの値を変更する	df[aList].replace(ValueMap)
配列とリストの散布図に赤いポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.', c='r')
散布図をパステル調の色で描く	plt.plot(xdata, ydata, c='pastel')
文字列をコロンを使って区切り、、列挙する	s.split(':')
折れ線グラフの星マーカーを黒くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
四角マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='s')
＜オプション＞グラフの色をシスルに指定する	color = 'thistle'
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
データフレームのどの値が頻出か見る	df.mode()
折れ線グラフに黄色い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
パステル調の色として数列についてのヒストグラムを描画する	plt.hist(xdata, color='pastel')
折れ線グラフを描画して、その色をシエナにする	plt.plot(データ列, データ列2, color='sienna')
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
文字コードに対応する文字を使う	chr(unicode)
リストの総和	sum(aList)
イテラブルとリストの散布図を描いて、色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
＜オプション＞グラフの線種を実線に指定する	linestyle = 'solid'
青い色差別ないを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
線グラフの色をアクアマリンに変更する	plt.plot(データ列, データ列2, color='aquamarine')
データフレームの最初n行	df.head(n)
実数の指数	math.frexp(x)[1]
データ列を丸めて、整数型にする	ds.round().astype(int)
データ列とデータ列についての散布図を淡い色を用いて描画する	plt.plot(xdata, ydata, c='muted')
＜オプション＞パウダーブルーを使う	color = 'powderblue'
データフレームの各列間の相関係数を求める	df.corr()
折れ線グラフの色を真紅に設定する	plt.plot(データ列, データ列2, color='crimson')
イテラブルとリストについての散布図に赤い右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>', c='r')
散布図に赤い菱形マーカーを使う	plt.plot(xdata, ydata, marker='D', c='r')
既存のファイルをSJISを使って追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
組を逆さにする	reversed(aTuple)
リストを柱状図で可視化する	plt.hist(aList)
配列をビニングする	pd.cut(aArray, aList)
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
２つの文字列は等しくないか確認する	s != s2
データフレームを列で並べて、下の方n件を取り出す	df.sort_values(columns).tail(n)
折れ線グラフの色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
少ない順番にカウンタをリストとして得る	aCounter.most_common()[::-1]
ふたつの関係が真部分集合	aSet < aSet2
＜オプション＞グラフの色をミディアムブルーに設定する	color = 'mediumblue'
nが-9以上、9以下	-9 <= n <= 9
値は集合に含まれるか	element in aSet
ヒストグラムを描画して色をサーモンに設定する	plt.hist(データ列, color='salmon')
グラフの中のy軸のキャプションをuntitledに設定する	plt.ylabel(untitled)
直後の値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(method='bfill')
マッピングにキーが存在するか判定する	key not in aDict
nが集合のどれかか調べる	n in aSet
線幅nの下三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
折れ線グラフを描画して色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
真部分集合かどうか調べる	aSet < aSet2
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
数式の変数に数値を代入する	e.subs(z, e2)
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
線グラフを描画して、色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
正規化された度数分布図を描く	plt.hist(データ列, density=True)
文字列を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
データフレームをグループ化しそれぞれの列に対し合計を算出する	df.groupby(column)[column2].sum()
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
折れ線グラフの色をゴールドにする	plt.plot(データ列, データ列2, color='gold')
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
nをn2で割った余り	n % n2
ヒストグラムを描画してその色をダークシアグリーンにセットする	plt.hist(データ列, color='darkseagreen')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
リストとイテラブルとして暗いグラフを描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
Pandasで、データフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col])
実数の床	math.floor(x)
数値を浮動小数点数に変換する	float(e)
＜オプション＞グラフの色をオールドレースに変更する	color = 'oldlace'
再帰の上限を上げる	sys.setrecursionlimit(1000000)
ヒストグラムを描画して、その色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
タプルの中の最小値	min(aTuple)
＜オプション＞無視するフッタをnに設定する	skipfooter = n
＜オプション＞ミディアムブルー色を使う	color = 'mediumblue'
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
＜オプション＞ゴールドにグラフの色を設定する	color = 'gold'
散布図に黒いポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='k')
折れ線グラフを描画して色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
データフレームを'A'列によってソートして更新する	df.sort_values(by='A', inplace=True)
カウンタ同士で和集合	aCounter | aCounter2
日付データの日	aDate.day
リストとデータ列についてパステル調のグラフを描画して、その色を青色に指定する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
＜オプション＞色をライトブルーに設定する	color = 'lightblue'
線グラフを描画して、その色をインディゴに変更する	plt.plot(データ列, データ列2, color='indigo')
データフレームの中に文字列と文字列があるか判定する	df.isin([value, value2])
xが一桁の数か調べる	-9 <= x <= 9
十六進数文字列を整数に変換する	int(s, 16)
集合を組にする	tuple(aSet)
文字列の変数名を数式に変換する	sympy.Symbol(s)
コロンで文字列を分割して列挙する	s.split(':')
ライトゴールドロディイエローにヒストグラムの色を指定する	plt.hist(データ列, color='lightgoldenrodyellow')
＜オプション＞グラフの色をスラグレーに設定する	color = 'slategrey'
複数の列によってデータフレームを昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームをJSONLファイルにエクセルデータファイルで保存する	df.to_excel(filename)
＜オプション＞スカイブルー色を用いる	color = 'skyblue'
データフレームの値が欠損値か調べる	df.isna()
モジュールを検索するパスにを追加する	sys.path.append(dir)
リストとリストについて散布図を描き、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
データ列とリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
＜オプション＞ホットピンクにグラフの色を変更する	color = 'hotpink'
折れ線グラフの色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
第二コマンド引数	sys.argv[1]
配列をn個に等間隔で分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
ファイルからバイナリストリームを開き]fとする	f = open(filepath, mode='rb')
サドルブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='saddlebrown')
折れ線グラフに黄色い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
集合をリストに変換する	list(aSet)
データフレームの中の欠損値がある行を削除する	df.dropna()
データ列とリストについての散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
nが負の数か調べる	n < 0
乱数シードをnで固定する	random.seed(n)
リストと数列で明るいグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
データフレームのカラムの中央値を求める	df[col].median()
数値を黒色でプリントする	print(f'\033[30m{value}\033[0m')
データフレームのカラムを100の位で四捨五入して、整数にする	df[col].round(-2).astype(int)
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
配列の行ごとの平均値	np.mean(aArray, axis=1)
折れ線グラフを描画して、色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
青い星マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
数式の簡略化を行う	sympy.sympify(e)
ラジアンの角度	math.degrees(x)
配列とリストの散布図を重なりを見やすく明るい色で描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
データフレームの列がx、かつ列がx2である行を選択する	df[(df[column] == x) & (df[column2] == x2)]
ゼロ埋めされた符号なし８ビット整数型の行列を初期化する	np.zeros(要素数, dtype=np.uint8)
文字列がリストの要素でないか確認する	element not in aList
シーケンス自身の長さnの順列	itertools.permutations(iterable, n)
辞書の値を列挙する	aDict.values()
イテラブルからn個、ランダムに選ぶ	random.choices(iterable, k=n)
aListn番目から値をポップする	aList.pop(n)
データフレームの列の各値は何回出現するか確認する	df[col].value_counts()
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
辞書からキーの値をエラーなく参照する	aDict.get(key, None)
数値の変数に数値を代入する	e.subs(z, e2)
明るいグラフの色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
赤いポイントマーカーで散布図を描く	plt.plot(xdata, ydata, marker='.', c='r')
データフレームの指定された列をリストとして取り出す	df[column].values.tolist()
折れ線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
ヒストグラムを描画して、その色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を計算する	df.groupby([column, column2], as_index=False).min()
明るい色のマーカーとして散布図を重なりを見やすくプロットする	plt.plot(xdata, ydata, c='bright', alpha=0.5)
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
空白文字を見る	string.whitespace
折れ線グラフを描画して、その色を耐火レンガに変更する	plt.plot(データ列, データ列2, color='firebrick')
改行なしに数値をプリントする	print(value, end='')
データフレームを各列毎に集約して、列の最大値を求める	df.groupby(column)[column2].max()
nがn2で割り切れる	n % n2 == 0
横棒グラフを描画してxに幅を設定する	plt.barh(ラベル列, データ列, width=x)
データフレームを'A'列を用いて昇順に破壊的に整列する	df.sort_values(by='A', ascending=True, inplace=True)
＜オプション＞ミディアムパープル色を使う	color = 'mediumpurple'
等量でn個にデータ列をビン分割する	pd.qcut(ds, n)
データ列の歪度	ds.kurt()
ヒストグラムを描画してその色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
データフレームの中にいくつ未入力値があるか数える	df.isna().sum()
ヒストグラムを描画して、その色をオレンジに変更する	plt.hist(データ列, color='orange')
＜オプション＞色をネイビーに設定する	color = 'navy'
辞書をJSON形式で出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
文字列をゼロ埋めする	s.zfill(文字列幅)
要素が双方向キューの中に存在するか調べる	element in deq
ヒストグラムを描画して、その色をダークゴールデンロッドに変更する	plt.hist(データ列, color='darkgoldenrod')
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
nがn2より大きいか調べる	n > n2
データフレームの列の名前一覧を見る	df.columns
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
リストとデータ列で濃いグラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
両端キューの値をインプレースに反転する	deq.reverse()
文字列を最後の部分文字列で二つに区切って、残りの文字列を使う	s.rpartition(sub)[-1]
ヒストグラムの色をピンクに指定する	plt.hist(データ列, color='pink')
データフレームを列でグループ化して、それぞれのグループごとの分散を算出する	df.groupby(column).var()
線グラフを描画して、色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
アルファベットから一つランダムに選ぶ	random.choice(string.ascii_uppercase)
エクセルファイルをファイルから読み込む	pd.read_excel(filename)
イテラブルをカウンタに変換する	collections.Counter(iterable)
文字列を太字で出力する	print(f'\033[1m{value}\033[0m')
列名一覧をデータ型でフィルタする	df.select_dtypes(型).columns
グラフに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
データフレームのstart行目からend行目まで抽出する	df[start:end]
配列と数列について散布図をプロットして、右三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='>', c=rgb)
データフレームの列がxより大きい行を取り出す	df[df[column] > x]
文字列の末尾から部分文字列を除く	s.removesuffix(sub)
文字列中にひとつでも非小文字が含まれる	any(not c.islower() for c in s)
折れ線グラフの色をダークグリーンにセットする	plt.plot(データ列, データ列2, color='darkgreen')
Pandasでフォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
部分文字列で文字列を区切って、文字列リストに変換する	s.split(sub)
配列をビン数nを用いてビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
変数を下線付きで表示できる文字列にする	f'\033[4m{value}\033[0m'
n個に配列を等間隔でビン分割する	pd.cut(aArray, n)
キーがタプルに存在する	key in aDict
＜オプション＞グラフの色をアリスブルーに設定する	color = 'aliceblue'
パステル調の色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
数式のパラメータについてのn階微分を計算する	sympy.diff(e, z, n)
＜オプション＞シャルトリューズを使う	color = 'chartreuse'
データフレームで列の重複を調べる	df.duplicated(subset=column)
黒いダイアモンドマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
複素数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=bool)
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()//60
＜オプション＞ダークシアグリーンにグラフの色を指定する	color = 'darkseagreen'
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
新しい文字列に文字列中の部分文字列を全部置換する	s.replace(sub, newsub)
リストとリストの黒いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
連立方程式の解を算出する	sympy.solve([e, e2])
線グラフを描画してその色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
データ列の中に存在する日付データと文字列の個数を数える	ds.isin([value, value2]).sum()
ダークターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkturquoise')
nがn2未満、それかn3以上かどうか	n < n2 or n >= n3
タイムスタンプデータとタイムスタンプデータの時間差	aDatetime - aDatetime2
データフレームの列名を列挙する	df.columns
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
ヒストグラムを描画して、その色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
ハローワールドを出力する	print('Hello World')
折れ線グラフを描画して、その色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ヒストグラムを描画して、その色をゴーストホワイトに指定する	plt.hist(データ列, color='ghostwhite')
Pandasで、dateStringをタイムスタンプ型に変換する	pd.to_datetime(dateString)
辞書の値数	len(aDict)
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
データフレームのリストカラムの欠損値を最大値に変更する	df[aList].fillna(df[aList].max())
全要素を０で初期化された論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
＜オプション＞ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
最大値・最小値の範囲で一様な乱数を得る	random.uniform(最小値, 最大値)
データ列の未入力値を後の行の値で埋める	ds.fillna(method='bfill')
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
線グラフを描画してその色をミディアムシアグリーンに変更する	plt.plot(データ列, データ列2, color='mediumseagreen')
＜オプション＞欠損値を含める	dropna = True
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
タプルの末尾からn番目以前の部分を得る	aTuple[:-n]
実数の整数部	math.modf(x)[1]
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
折れ線グラフの色をマルーンに変更する	plt.plot(データ列, データ列2, color='maroon')
現在のタイムスタンプ	int(time.time())
散布図に淡い色のマーカーを使う	plt.plot(xdata, ydata, c='muted')
整数nを8進数表現に変換する	oct(n)
浮動小数点数から実数を引く	x - y
整数の複素数	complex(x)
＜オプション＞ミディアムオーキッド色を用いる	color = 'mediumorchid'
線グラフを描画して、その色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
実数を二乗する	x ** 2
n個にデータフレームの中のカラムを等間隔でビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
ディムグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dimgray')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
リストとリストとして暗いの折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
リストとリストの明るいグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
＜オプション＞グラフの色を黄緑に指定する	color = 'chartreuse'
＜オプション＞ダークオリーブグリーン色を用いる	color = 'darkolivegreen'
データフレームのカラムのタイムゾーンを東京にセットする	df[col].tz_convert('Asia/Tokyo')
リストと配列のカラーコードの濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
データフレームの列の中央値	df[col].median()
折れ線グラフに描画して、マーカーを星印にする	plt.plot(データ列, データ列2, marker='*')
配列とリストについての散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
ダークサーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darksalmon')
＜オプション＞トマト色を使う	color = 'tomato'
データフレームのインデックスの一覧	df.index
文字列の終了位置より前に部分文字列が含まれない	s.find(sub, 0, end) == -1
predicateFuncが真とならないイテラブルの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
＜オプション＞グリーンイエローにグラフの色を設定する	color = 'greenyellow'
＜オプション＞グラフの色をライトサーモンに設定する	color = 'lightsalmon'
文字列の平仮名をカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
日付時刻データが火曜日かどうか確認する	aDatetime.weekday() == 1
データ列をカテゴリデータに変換する	ds.astype(object)
折れ線グラフに黄色いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
折れ線グラフを描画して、色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
ファイルをEUCとして書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
文字列の終了位置より前に部分文字列が含まれないかどうか確認する	s.find(sub, 0, end) == -1
カラーコードの星マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='*', c=rgb)
リストの要素を昇順にソートする	sorted(aList, reverse=False)
ファイルが存在しないか調べる	not os.path.exists(filepath)
パラメータについて数値の積分を求める	sympy.integrate(e, z)
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
黒い左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c='k')
集合の補集合を使う	aSet.difference(aSet2)
サブ型かどうか調べる	issubclass(サブクラス, クラス)
組の要素数	len(aTuple)
大文字・小文字を無視してパターンに文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
句読点文字を見る	string.punctuation
空集合を求める	set()
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='palevioletred')
文字列のUNIX時間から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
リストとデータ列の青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
二つの文字列は同じか調べる	s == s2
配列のユニークな要素	np.unique(aArray)
データフレームを列によってグループ化して、最大値を求める	df.groupby(column).max()
ファイルの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
浮動小数点数を複素数に変換する	complex(x)
折れ線グラフを描画してその色をアクアにセットする	plt.plot(データ列, データ列2, color='aqua')
文字列は全て識別子名かどうか判定する	s.isidentifier()
配列の次元を変形する	aArray.reshape(行数, 列数)
青色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
ヒストグラムを描画して、その色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
データフレームから最初のカラムを除く	df[df.columns[1:]]
データフレームの末尾	df.tail()
＜オプション＞ダークカーキにグラフの色を変更する	color = 'darkkhaki'
リストと配列としてパステル調のをプロットし、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
折れ線グラフの右三角印を黒くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
辞書に要素をキーとして加える	aDict[key] = element
データフレームを二つの列によってによって破壊的に並べる	df.sort_values(by=['A', 'B'], inplace=True)
＜オプション＞マルーン色を用いる	color = 'maroon'
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
カラーコードでリストとリストの折れ線をプロットする	plt.plot(xdata, ydata, color=rgb)
ヒストグラムを描画して、その色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
折れ線グラフに大きさnの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markersize=n)
辞書から多重集合を作成する	collections.Counter(aDict)
折れ線グラフの色をカーキに指定する	plt.plot(データ列, データ列2, color='khaki')
ファイルパスの拡張子を使う	os.path.splitext(filepath)[1].lstrip('.')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
実行時の標準出力の出力先がターミナルかどうか調べる	os.isatty(sys.stdin.fileno())
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
文字列はタプルに含まれる	element in aTuple
＜オプション＞線種を点線に設定する	linestyle = 'dotted'
スピアマンを用いてデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
集合から別のセットとの共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
折れ線グラフを描画してその色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
データフレームのカラムは何分か見る	df[col].dt.minute
＜オプション＞色をアリスブルーに指定する	color = 'aliceblue'
折れ線グラフを描画して、その色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
リストと数列で淡いグラフを描画して線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
配列とリストの黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
文字列をキャピタライズする	s.capitalize()
＜オプション＞青緑色を使う	color = 'teal'
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
第一引数で指定されたファイルの名前	sys.argv[1]
小数点数の余弦の逆数を求める	math.acos(x)
リストとリストの明るいを描画し、色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
データ列と配列についての散布図を淡い色で描画する	plt.plot(xdata, ydata, c='muted')
リストとリストで折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
数列とデータ列についての散布図をパステル調の色として描画する	plt.plot(xdata, ydata, c='pastel')
全ての８進数字	string.octdigits
線グラフを描画して、色をサドルブラウンに指定する	plt.plot(データ列, データ列2, color='saddlebrown')
データフレームを列を用いてグループ化してそれぞれのグループ毎の件数を知る	df.groupby(column).size()
データフレームの内で、列の重複を見る	df.duplicated(subset=column)
明るい色のマーカーとして重なりを見やすく散布図を描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
ヒストグラムを描画してその色を暗い赤に変更する	plt.hist(データ列, color='darkred')
昇順にデータフレームをインデックスによってソートする	df.sort_index(ascending=True)
オブジェクトの型	type(obj)
データ列の欠損値を最大値にする	ds.fillna(ds.max())
カウンタのキーの回数	aCounter[element]
＜オプション＞グラフの色をライムに設定する	color = 'lime'
印字を全部使う	string.printable
文字列リストを一つの文字列にする	''.join(aStringList)
データフレームの中で、列と列の重複を確認する	df.duplicated(subset=[column, column2])
配列とリストのパステル調のグラフを描画してその色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='cornflowerblue')
データフレームのカラムの欠損値を直後の値に指定する	df[col].fillna(method='bfill')
二つの最小値を求める	min(x, y)
データフレームのリストカラムの欠損値を平均で埋める	df[aList].fillna(df[aList].mean())
折れ線グラフを描画して色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
事前に正規表現をコンパイルする	re.compile(pattern)
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='gray')
リストの変化を折れ線グラフで描画する	plt.plot(range(len(xdata)), xdata)
文字列の先頭で正規表現にマッチするか確認する	re.match(pattern, s)
イテラブルとデータ列についての散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
＜オプション＞暗い赤にグラフの色を設定する	color = 'darkred'
折れ線グラフの▲マーカーを黄色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
現在のミリ秒	int(time.time() * 1000)
ヒストグラムを描画して、その色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
ヒストグラムを描画して、その色をグリーンに設定する	plt.hist(データ列, color='green')
バイナリできるようにファイルを開く]	open(filepath, mode='rb')
折れ線グラフの色をゲインズボロに指定する	plt.plot(データ列, データ列2, color='gainsboro')
折れ線グラフを描画してその色をグレーに指定する	plt.plot(データ列, データ列2, color='grey')
＜オプション＞ラベンダーブラッシュにグラフの色を指定する	color = 'lavenderblush'
イテラブルをセットに追加する	aSet.update(iterable)
タプルから最後の項目を取り出す	aDict.popitem()
ヒストグラムを描画して、その色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
赤い▽マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
列によってデータフレームを並べて更新する	df.sort_values(by=column, inplace=True)
折れ線グラフを描画して、色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
グラフの色を明るくする	sns.set(pallete='bright')
＜オプション＞追加モードに設定する	mode = 'a'
ダーク・スラテグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkslategrey')
日付データと日付データの時間差を秒で算出する	(aDate - aDate2).total_seconds()//60
２つのデータ列を並べて箱ひげ図にする	plt.boxplot([データ列, データ列2])
＜オプション＞パープルにグラフの色をする	color = 'purple'
データフレームを'A'列と'B'列で小さい順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
配列と数列の散布図を描画して、色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
文字列は全て印字できる	s.isprintable()
＜オプション＞グラフの色をオレンジレッドに設定する	color = 'orangered'
アリスブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='aliceblue')
データフレームの中の欠損値を削除する	df.dropna()
グラフで用いるy軸の名前をuntitledに設定する	plt.ylabel(untitled)
既存のファイルパスを文字コードtextとして追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
箱髭図でデータ列を可視化する	plt.boxplot(データ列)
ヒストグラムを描画して色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
実数の天井数	math.ceil(x)
＜オプション＞右三角印を用いる	marker = '>'
startからendの区間のヒストグラムを用いてリストを描く	plt.hist(データ列, range=(start, end))
数値の符号をコピーにする	math.copysign(x, x2)
組中のオブジェクトが最初に見つかる位置	aTuple.index(element)
真	True
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
折れ線グラフの色をダークシアンに指定する	plt.plot(データ列, データ列2, color='darkcyan')
データフレームのカラムが何秒か確認する	df[col].dt.second
データフレームとデータ列を横方向に一つにする	pd.concat([df, ds], axis=1)
＜オプション＞セパレータをタブにする	sep = '\t'
データフレームをグループ化し、各列に対し平均値を求める	df.groupby(column)[column2].mean()
predicateFuncが真になる配列の要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフを描画して、その色をパパイヤウィップに変更する	plt.plot(データ列, データ列2, color='papayawhip')
ふたつのリストの積集合を求める	list(set(aList) & set(aList2))
線グラフを描画して色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
最大値でデータフレームの列の未入力値を置換する	df[col].fillna(df[col].max())
データフレームの列の文字列長を列として求める	df[col].str.len()
リストのn番目に文字列を挿入する	aList.insert(n, element)
集合から値を除く	aSet.remove(element)
文字列は文字列より辞書順で前か調べる	s < s2
全要素を0で初期化された行列	np.zeros(要素数)
データフレームのリストカラムを百の位で丸めて整数型にする	df[aList].round(-2).astype(int)
ヒストグラムを描画して、その色をグレーにする	plt.hist(データ列, color='grey')
データフレームのインデックス名リスト	df.index
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
折れ線グラフの右三角印を黄色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
ファイル全体をリストとして読み込む	f.readlines()
文字列が無限に続く列	itertools.repeat(element)
列を四分位数ごとに分割する	pd.qcut(ds, 4)
リストから重複を取り除く	sorted(set(aList), key=aList.index)
データフレームから重複したデータを残さず、削除する	df.drop_duplicates(keep=False)
ヒストグラムを描画して、その色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
部分文字列か調べる	sub in s
明るいグラフを描画して、その線幅をnにする	plt.plot(xdata, ydata, linestyle='bright', color='r')
日本語をプロットで使えるようにする	sns.set(font='IPAexGothic')
折れ線グラフに描画して印を下三角印にする	plt.plot(データ列, データ列2, marker='v')
自然数の順列の総数	math.perm(n)
数式の積分を求める	sympy.integrate(e)
辞書の項目数を得る	len(aDict)
ヒストグラムを描画して、その色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
n×n2の二次元リストを得る	[[0] * n for _ in range(n2)]
ヒストグラムを描画してその色をシエナに変更する	plt.hist(データ列, color='sienna')
ユークリッド距離	math.dist(point, point2)
文字列からformatのパターンでタイムスタンプにする	datetime.datetime.strptime(日付の書かれた文字列, format)
＜オプション＞色をライトスレイグレーに変更する	color = 'lightslategrey'
リストとリストについて散布図を描画して、三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
リストに文字列を追加する	aList.append(element)
＜オプション＞ドジャーブルー色を使う	color = 'dodgerblue'
バイナリ書き込みできるようにファイルパスをオープンする]	open(filepath, mode='wb')
表データを二つの列で昇順に整列する	df.sort_values(by=['A', 'B'], ascending=True)
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
赤色のクロスマーカーをリストと配列についての散布図に描画する	plt.plot(xdata, ydata, marker='x', c='r')
散布図に黒いダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c='k')
文字列をエラーを無視してバイト列に変換する	s.encode(errors='ignore')
線グラフの色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
ヒストグラムを描画して、その色をパウダーブルーに指定する	plt.hist(データ列, color='powderblue')
散布図を明るい色のマーカーで描画する	plt.plot(xdata, ydata, c='bright')
データフレームの列をヒストグラムで可視化する	plt.hist(df[column])
データ列とラベルを指定して、棒グラフを描画する	plt.bar(ラベル列, データ列)
折れ線グラフを描画して、色をペルーに設定する	plt.plot(データ列, データ列2, color='peru')
折れ線グラフの大バツマーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
折れ線グラフを描画して、その色をパールバイオレットレッドにする	plt.plot(データ列, データ列2, color='palevioletred')
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
ヒストグラムの色を青に変更する	plt.hist(データ列, color='blue')
＜オプション＞小麦色色を用いる	color = 'wheat'
データフレームが重複しているか調べる	df.duplicated()
折れ線グラフを描画して、色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
折れ線グラフを描画してその色を淡いピンク色に指定する	plt.plot(データ列, データ列2, color='lightpink')
部分文字列が部分文字列で始まるかどうか	s.startswith(sub)
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
グラフにx=0の点線を設定する	plt.axvline(x=0, linestyle='dotted')
ヒストグラムを描画して、その色をスプリンググリーンにセットする	plt.hist(データ列, color='springgreen')
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
二つの文字列を順に出力する	print(value, value2)
行列の行ごとの標準偏差を計算する	np.std(aArray, axis=1)
ヒストグラムを描画して、その色をオレンジレッドにセットする	plt.hist(データ列, color='orangered')
タプルの中の最大値	max(aTuple)
データフレームからカテゴリデータの列名一覧を使う	df.select_dtypes('object').columns
文字列中にひとつでも非数字が含まれる	any(not c.isdigit() for c in s)
リストとリストの折れ線グラフを描画する	plt.plot(xdata, ydata)
折れ線グラフの三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
線グラフを描画して、その色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
リストとリストの黒色の明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
実数が有限か判定する	math.isfinite(x)
文字列内にひとつでも数字があるか調べる	any(c.isdigit() for c in s)
カウンタの各文字列をそのカウントだけ列挙する	aCounter.elements()
ヒストグラムを描画して、その色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
データフレームを複数の列によってソートする	df.sort_values(by=column)
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
実数以上の最小の整数	math.ceil(x)
データフレームからランダムに選択する	df.sample()
文字列が全て数字かどうか調べる	s.isdigit()
文字列中にひとつでも非アルファベットが含まれるかどうか確認する	any(not c.isalpha() for c in s)
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
データ列をインポートする	import pandas as pd
グラフの中のフォントをfontNameに設定する	sns.set(font=fontName)
折れ線グラフを描画して、色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
＜オプション＞ミントクリームを使う	color = 'mintcream'
スタックのstart番目からend番目までの要素を見る	collections.deque(itertools.islice(deq, start, end))
変数について数式の微分を行う	sympy.diff(e, z)
データ列を折れ線グラフに描画して、印を三角にする	plt.plot(データ列, データ列2, marker='^')
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
リストと数列を用いて淡いを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
色差別ない色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
整数個のものからk個取り出したときの並べ方を求める	math.perm(n, k)
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
データフレームを各列毎にグループ化して列の分散を計算する	df.groupby(column)[column2].var()
リストとリストの青色の暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
文字列をケースを無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
線グラフを描画して、その色を小麦色にする	plt.plot(データ列, データ列2, color='wheat')
部分文字列で文字列を二つに区切って、前半の文字列を使う	s.partition(sub)[0]
データフレームのリスト列のNaNを直前の値に設定する	df[aList].fillna(method='ffill')
▲マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^')
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='r')
本日の日付時刻	datetime.datetime.now()
配列のスカラー倍	aArray * n
辞書からキーで指定された項目をポップする	aDict.pop(key)
オブジェクトから属性を削除する	delattr(obj, プロパティ名)
＜オプション＞ゴーストホワイトを使う	color = 'ghostwhite'
整数nをn2分の一にする	n //= n2
リストとデータ列について濃い色の折れ線グラフを描いて、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
折れ線グラフを描画して、その色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
xが真か調べる	bool(x)
折れ線グラフの色をホットピンクに指定する	plt.plot(データ列, データ列2, color='hotpink')
改行なしに二つの値をプリントする	print(value, value2, end='')
パープルにヒストグラムの色をセットする	plt.hist(データ列, color='purple')
リストとデータ列の散布図に黒い下三角マーカーを描く	plt.plot(xdata, ydata, marker='v', c='k')
＜オプション＞グラフの色をフォレストグリーンに指定する	color = 'forestgreen'
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
小数点以下の表示精度をセットする	pd.set_option('precision', n)
データフレームのリストカラムの最頻値を求める	df[aList].mode()
マップにキーが存在するか判定する	key in aDict
破線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashed')
ヒストグラムの色をティールに設定する	plt.hist(データ列, color='teal')
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
nがn2か調べる	n == n2
グラフのカラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
折れ線グラフを描画して、色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
文字列をシンボルに変換する	sympy.Symbol(s)
文字列をASCIIコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
配列と配列についての散布図にカラーコードのポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
配列とリストを折れ線グラフに描画する	plt.plot(xdata, ydata)
棒グラフを描画して、グラフ幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
ヒストグラムを描画してその色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
色差別ないパレットをグラフの描画で使う	sns.set(pallete='colorblind')
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
散布図にカラーコードのダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c=rgb)
折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
キューが空	len(deq) == 0
数式を微分する	sympy.diff(e)
最大値・最小値で整数乱数を発生させる	random.randint(最小値, 最大値)
データフレームからカテゴリデータの列名の一覧を求める	df.select_dtypes('object').columns
色差別ないの折れ線グラフをイテラブルとリストで描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
ハローワールドとプリントする	print('Hello World')
暗いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
破壊的にデータフレームを列によってによって並べる	df.sort_values(by=column, inplace=True)
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
黄色い上三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
ヒストグラムを描画して、その色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
データフレームの中に文字列と日付データがいくつ存在するか数える	df.isin([value, value2]).sum()
＜オプション＞ミディアムスプリンググリーンに色を変更する	color = 'mediumspringgreen'
辞書の項目名とその値をペアとして取り出す	aDict.items()
文字列を太字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
折れ線グラフの色をゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='goldenrod')
折れ線グラフを描画して、色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
濃い色で数列とリストについての散布図を描く	plt.plot(xdata, ydata, c='deep')
複数カラムの度数分布図を一度にプロットする	sns.pairplot(df[[column, column2, column3]])
整数nの十六進表現	hex(n)
ヒストグラムを描画して、色をゴールデンロッドに変更する	plt.hist(データ列, color='goldenrod')
前の行の値でデータフレームの欠損値を補う	df.fillna(method='ffill')
濃いの色を青色に指定する	plt.plot(xdata, ydata, linestyle='deep', color='b')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t')
＜オプション＞カデットブルー色を使用する	color = 'cadetblue'
青い濃いを描く	plt.plot(xdata, ydata, linestyle='deep', color='b')
ヒストグラムを描画して、その色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
データフレームを'A'列と'B'列で大きい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
文字列を左トリムする	s.lstrip()
ヒストグラムを描画してその色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategray')
空白で文字列を区切って、数列にする	map(int, s.split())
散布図にダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D')
２つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
配列を2次元1列に変形する	aArray.reshape(-1, 1)
＜オプション＞文字列の示すエンコーディングを使用する	encoding = s
ランダムにn行をデータフレームから抽出する	df.sample(n)
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
8進文字列を整数に変換する	int(s, 8)
＜オプション＞グラフの色を貝殻に指定する	color = 'seashell'
カウンタを使う	import collections
折れ線グラフに大きさnの大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markersize=n)
カラーコードの星マーカーで散布図を描く	plt.plot(xdata, ydata, marker='*', c=rgb)
赤い▼マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
横棒を描画して、グラフ幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
イテラブルとリストについての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
＜オプション＞アイボリーに色を指定する	color = 'ivory'
折れ線グラフに三角マーカーを加える	plt.plot(データ列, データ列2, marker='^')
実数を切り上げて整数に変換する	math.ceil(x)
データフレームを列で整列し、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
リストとリストについての散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
折れ線グラフを描画して、色をダークゴールデンロッドにする	plt.plot(データ列, データ列2, color='darkgoldenrod')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
折れ線グラフを描画して、その色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
データフレームを列の値によってグループ化してそれぞれのグループの標準偏差を求める	df.groupby(column).std()
＜オプション＞セパレータをコロンにする	sep = ':'
データフレームを各列毎に集約し、、文字列というグループの大きさを計算する	df.groupby(column).size()[s]
パステル調の色のマーカーを使って散布図を描画する	plt.plot(xdata, ydata, c='pastel')
数列とリストの散布図に黒い▼マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='k')
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
データフレームを表示するとき、n列までデータフレームを表示できるようにする	pd.set_option('display.max_columns', n)
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
リストは少なくともひとつ真か調べる	any(aList)
データフレームの列の中にいくつ欠損値があるか数える	df[col].isna().sum()
配列のユニークな要素を求める	np.unique(aArray)
数を十の位で丸める	round(x, -1)
二進数文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ヒストグラムを描画して、その色をミディアムターコイズに指定する	plt.hist(データ列, color='mediumturquoise')
パステル調のの色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
2つの列でデータフレームを昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
グラフをパステル調にする	sns.set(pallete='pastel')
データ列が何曜日か調べる	ds.dt.weekday_name
ファイルパスを読み込みモードでオープンして]fとする	f = open(filepath, mode='r')
kを底とする実数の対数	math.log(x, k)
ファイル名がCSVファイルか判定する	filename.endswith('.csv')
ヒストグラムを描画して、その色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
リストとイテラブルで暗いの折れ線グラフを描画し、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
配列を等しい量になるようにビン数nでビン分割する	pd.qcut(aArray, n)
ヒストグラムを描画して色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
淡い色のマーカーを散布図に使用する	plt.plot(xdata, ydata, c='muted')
数列とリストについての散布図に赤い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
オブジェクトは辞書型か	isinstance(obj, dict)
データフレームをグループ化し、各列に対し個数を求める	df.groupby(column)[column2].count()
配列の合計値	np.sum(aArray)
ぐるぐるとイテラブルを繰り返す	itertools.cycle(iterable)
折れ線グラフを描画して、色をミディアムバイオレットレッドにセットする	plt.plot(データ列, データ列2, color='mediumvioletred')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
折れ線グラフにサイズnのダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markersize=n)
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
折れ線グラフの色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
黒い四角マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='s', c='k')
データフレームの列の中にいくつ欠損値が存在するか数える	df[col].isna().sum()
データフレームを列の値でグループ化して、それぞれのグループ毎の合計を求める	df.groupby(column).sum()
データフレームから末尾の列を消す	df[df.columns[:-1]]
ヒストグラムを描画して、その色をロージーブラウンに指定する	plt.hist(データ列, color='rosybrown')
ダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D')
散布図を黒色の右三角マーカーとして描画する	plt.plot(xdata, ydata, marker='>', c='k')
＜オプション＞クロス印を使う	marker = 'x'
データフレームを各列毎にグループ分けして、カラムの平均値を求める	df.groupby(column)[column2].mean()
辞書のキーとその値をペアとして取り出す	aDict.items()
コマンドの第二引数	sys.argv[1]
ファイルパスから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
ふたつの集合の交わり	aSet.intersection(aSet2)
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
リストとリストとして淡いをプロットして、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
＜オプション＞グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
プロットで日本語を使えるようにする	sns.set(font='IPAexGothic')
ヒストグラムを描画して色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
dateStringを日付データに変換する	pd.to_datetime(dateString)
データフレームの列を整数に丸める	df[col].round()
セットの浅いコピーを作る	aSet.copy()
πを使う	math.pi
ライムにヒストグラムの色をセットする	plt.hist(データ列, color='lime')
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
ヒストグラムを描画してその色をラベンダーに変更する	plt.hist(データ列, color='lavender')
文字列の右端から余分な空白を除く	s.rstrip()
ヒストグラムの色をミディアムブルーにセットする	plt.hist(データ列, color='mediumblue')
データフレームの未入力値を直後の値で補う	df.fillna(method='bfill')
リストのオブジェクトの位置をエラーなく使う	aList.index(element) if element in aList else -1
配列の形状	aArray.shape
ヒストグラムを描画して、その色を赤に設定する	plt.hist(データ列, color='red')
配列の各要素に加算する	aArray + aArray2
ふたつの集合の積集合	aSet.intersection(aSet2)
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
タン色の線グラフを描画する	plt.plot(データ列, データ列2, color='tan')
データフレームのリストカラムの欠損値をxで補う	df[aList].fillna(x)
データフレームから型リストで指定されたデータ型の列だけ抽出する	df.select_dtypes(include=typeList)
黒い丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c='k')
カンマで文字列を分割して、文字列リストに変換する	s.split(',')
＜オプション＞コーラル色を使用する	color = 'coral'
折れ線グラフの左三角印を赤くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
二つのデータフレームを横向きに合体させる	pd.concat([df, df2], axis=1)
組の先頭を除く	aTuple[1:]
折れ線グラフを描画してその色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
データフレームを10の位で丸めて、整数にする	df.round(-1).astype(int)
データ列の値は欠損値かどうか調べる	ds.isna()
グリッド線をグラフに付ける	plt.grid(True)
文字列の末尾	s[-1]
オブジェクトが集合クラスのインスタンスかどうか調べる	isinstance(obj, set)
データフレームのリスト列の平均値	df[aList].mean()
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslateblue')
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
シーケンスの各要素に対して、predicateFuncの適用がtrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
項目名がマップに存在するか	key in aDict
リストとイテラブルのカラーコードの色差別ないグラフをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
＜オプション＞ローングリーン色を使う	color = 'lawngreen'
イテラブルを文字列リストに変換して、カンマを用いて結合する	','.join(map(str, iterable))
eの実数乗を計算する	math.exp(x)
リストをナンバリングする	enumerate(aList)
データフレームを列によって昇順に並べ直し、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
行列の逆行列	np.linalg.inv(aArray)
データフレームを表示するとき行数をnに指定する	pd.set_option('display.max_rows', n)
線グラフを描画して、その色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
リストとリストで濃いグラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
nが負の整数か	n < 0
リストを展開して表示する	print(*aList)
折れ線グラフの色をダークバイオレットに変更する	plt.plot(データ列, データ列2, color='darkviolet')
カラーコードの左三角マーカーをリストとリストについての散布図に描く	plt.plot(xdata, ydata, marker='<', c=rgb)
データ列をインポートする	import pandas as pd
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
折れ線グラフの色をダークシアグリーンにする	plt.plot(データ列, データ列2, color='darkseagreen')
＜オプション＞ブール型を使う	dtype = np.int32
文字列全体をケースを無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
＜オプション＞グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
配列とリストについて散布図を描画してその大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
シーケンスから1個ランダムに選ぶ	random.choice(iterable)
ヒストグラムを描画して色をアイボリーに設定する	plt.hist(データ列, color='ivory')
凡例をグラフ中の(x,y)の場所に入れる	plt.legend(loc=(x, y))
ファイルパスをバイナリモードとしてオープンして]fとする	f = open(filepath, mode='rb')
文字列中に部分文字列が存在しない	sub not in s
要素が辞書の値として含まれているかどうか	element in aDict.values()
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='midnightblue')
折れ線グラフを描画してその色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
＜オプション＞色を耐火レンガに指定する	color = 'firebrick'
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
データフレームを列によってグループ化し基本統計量を求める	df.groupby(column).describe()
文字列中にひとつでも非アスキー文字が含まれる	any(not c.isascii() for c in s)
データフレームを列の値によって集約し、、各グループの最大値を求める	df.groupby(column).max()
データフレームの欠損値を第二四分位数に指定する	df.fillna(df.median())
オブジェクトがバイト列クラスのインスタンスか調べる	isinstance(obj, bytes)
折れ線グラフの色をやわらかい青に指定する	plt.plot(データ列, データ列2, color='cornflowerblue')
＜オプション＞グラフの色をピンクに設定する	color = 'pink'
データフレームを各列と列の組み合わせ毎にグループ化し、、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
散布図を暗い色のマーカーでプロットする	plt.plot(xdata, ydata, c='dark')
データフレームのカラムの欠損値を前の行の値で置換する	df[col].fillna(method='ffill')
小数点数の絶対値	math.fabs(x)
配列の差	aArray - aArray2
文字列を赤色で出力する	print(f'\033[31m{value}\033[0m')
原点から(実数,y)の距離	math.hypot(x, y)
日付データにn日分、加える	aDate + datetime.timedelta(days=n)
リストとリストについてパステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
データフレームのリスト列はどの程度、分散しているか確認する	df[aList].var()
日付時刻データの分数を見る	aDatetime.minute
オブジェクトは論理値	isinstance(obj, bool)
文字列中にひとつでも非小文字があるか調べる	any(not c.islower() for c in s)
データ列の欠損値を最頻値にする	ds.fillna(ds.mode().iloc[0])
ダークオレンジにヒストグラムの色をする	plt.hist(データ列, color='darkorange')
データフレームを各列と列の組み合わせ毎にグループ化し、、個数を算出する	df.groupby([column, column2], as_index=False).count()
＜オプション＞暗い赤色を使う	color = 'darkred'
＜オプション＞書き込み用に設定する	mode = 'w'
n2がn以上かつ、n3以下かどうか確認する	n <= n2 and n2 <= n3
真紅色の線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
文字列を黒色にする	f'\033[30m{value}\033[0m'
文字列の終了位置より前に部分文字列が含まれるか	s.find(sub, 0, end) != -1
三変数の最大値	max(x, y, z)
散布図を黒い下三角マーカーで描画する	plt.plot(xdata, ydata, marker='v', c='k')
タプルの値をソートする	sorted(aTuple)
データフレームのリストカラムの中に含まれる文字列の合計を数える	df[aList].isin([value]).sum()
日付時刻データはタイムスタンプデータより前	aDatetime < aDatetime2
nをn2で割った剰余	n % n2
＜オプション＞ディムグレーを使用する	color = 'dimgray'
文字列は全て印字できるか調べる	s.isprintable()
折れ線グラフを描画して、その色をラベンダーに指定する	plt.plot(データ列, データ列2, color='lavender')
実数の余弦の逆数	math.acos(x)
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
＜オプション＞グラフの色をプラムに設定する	color = 'plum'
リストとリストについて破線を描画して、色を濃いに変更する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
ヒストグラムの色を赤に変更する	plt.hist(データ列, color='red')
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
ダークシアン色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='darkcyan')
配列とリストについての散布図に黒いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
データフレームのカラムの各データ値の出現数を算出する	df[col].value_counts()
変数について数式の積分を求める	sympy.integrate(e, z)
フローラルホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='floralwhite')
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
リストとリストの散布図を描いてマーカーの色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
文字列を走査し、パターンに複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
文字列の右側から空白を取り除く	s.rstrip()
重なりを見やすく淡い色でリストとイテラブルの散布図を描く	plt.plot(xdata, ydata, c='muted', alpha=0.5)
＜オプション＞コーンズシルク色を使う	color = 'cornsilk'
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
＜オプション＞ダークスラテグレーを使用する	color = 'darkslategray'
折れ線グラフを描画して、その色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
Pandasのバージョンを見る	print(pd.__version__)
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
nまでの奇整数リスト	list(range(1, n, 2))
実数を浮動小数点数で割った余り	x % y
黒い上三角マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='^', c='k')
折れ線グラフを描画して、その色をゴーストホワイトにセットする	plt.plot(データ列, データ列2, color='ghostwhite')
アリスブルーにヒストグラムの色を設定する	plt.hist(データ列, color='aliceblue')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
データ列の第三四分位数	ds.quantile(0.75)
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
＜オプション＞グラフの色を耐火レンガに設定する	color = 'firebrick'
UTF8として書き込みできるようにファイルをオープンする]	open(filepath, mode='w', encoding='utf-8')
数式を方程式として解く	sympy.solve(e)
キーが辞書上で定義されているか調べる	key in aDict
等差数列から整数乱数を得る	random.randrange(start, end, step)
2次元リストの転置行列	[list(x) for x in list(zip(*aList))]
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
整数nを十六進文字列に変換する	hex(n)[2:]
配列とリストで明るいグラフを描いて、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
書式をタプルでフォーマットする	formatText.format_map(aDict)
データフレームのNaNを最大値で埋める	df.fillna(df.max())
nからn2までのスライス	slice(n, n2)
日付時刻データが日曜日かテストする	aDatetime.weekday() == 6
＜オプション＞色をアイボリーに変更する	color = 'ivory'
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
文字コードに対応する文字	chr(unicode)
文字列を水色でプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
マッピングのキーに対応した値を得る	aDict.get(key)
＜オプション＞ミディアムオーキッド色を使用する	color = 'mediumorchid'
ヒストグラムを描画して、その色を白に設定する	plt.hist(データ列, color='white')
＜オプション＞線種を破線に変更する	linestyle = 'dashed'
データフレームを列によってソートする	df.sort_values(by=column)
プログラムの実行をここで止める	sys.exit()
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
折れ線グラフの色をブラックに変更する	plt.plot(データ列, データ列2, color='black')
黒いクロスマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='k')
関数の値によってデータフレームをグループ化し、記述統計量を求める	df.groupby(関数).describe()
データフレームの中で、列とカラムに重複があるか見る	df.duplicated(subset=[column, column2])
タプルを引数として展開してプリントする	print(*aTuple, sep=',')
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
黒い▲マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^', c='k')
データフレームの列の中にいくつ日付データが存在するか求める	df[col].isin([value]).sum()
配列を濃い色のヒストグラムで描画する	plt.hist(xdata, color='deep')
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
集合からエラーなく要素を取り除く	aSet.discard(element)
リストとリストについて散布図を描画し、、マーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
赤い濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color='r')
リストとリストの散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフを描画して色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
コレクションを使う	import collections
ファイルから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
データフレームを表示するとき、小数点以下の表示精度を指定する	pd.set_option('precision', n)
列名を列挙する	df.columns
折れ線グラフを描画して、その色をミディアムバイオレットレッドに指定する	plt.plot(データ列, データ列2, color='mediumvioletred')
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
＜オプション＞グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
リストとリストについての散布図をパステル調の色で描画する	plt.plot(xdata, ydata, c='pastel')
エクセルファイルファイルからすべてのシートを読む	pd.read_excel(filename, sheet_name=None)
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
＜オプション＞アクア色を使う	color = 'aqua'
＜オプション＞改行コードをUNIXに変更する	newline = '\n'
リストとデータ列で色差別ないの折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
線グラフを描画して、その色をビスクに変更する	plt.plot(データ列, データ列2, color='bisque')
マッピングをインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
数列とリストの散布図にカラーコードの右三角マーカーを描く	plt.plot(xdata, ydata, marker='>', c=rgb)
折れ線グラフを描画して、色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
配列を平坦化する	aArray.flatten()
整数nを八進文字列に変換する	oct(n)[2:]
スピアマン相関係数でデータフレームのリスト列の相関行列を求める	df[aList].corr(method='spearman')
ライトグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgray')
データ列と配列についての散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
日付データが火曜日か調べる	aDate.weekday() == 1
＜オプション＞ゴールデンロッドにグラフの色を変更する	color = 'goldenrod'
＜オプション＞パールバイオレットレッド色を使う	color = 'palevioletred'
折れ線グラフを描画してその色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
プロットの色を淡くする	sns.set(pallete='muted')
ヒストグラムの線のスタイルを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
折れ線グラフを描画して、その色をゲインズボロに指定する	plt.plot(データ列, データ列2, color='gainsboro')
浮動小数点数のn乗を求める	pow(x, n)
折れ線グラフを描画して色をダークターコイズに変更する	plt.plot(データ列, データ列2, color='darkturquoise')
列をキーにして二つの表データを右結合する	pd.merge(df, df2, on=column, how='right')
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
入力ストリームから1文字、読み込む	f.read(1)
ヒストグラムを描画してその色をゴーストホワイトにセットする	plt.hist(データ列, color='ghostwhite')
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
本日の日数	datetime.datetime.today().day
カウンタの最も頻出な値	aCounter.most_common()[0]
＜オプション＞文字コードをUTF8に設定する	encoding = 'utf-8'
データフレームの各グループごとの個数	df.groupby(column).count()
＜オプション＞グラフの色を貝殻に設定する	color = 'seashell'
色差別ない色の折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
＜オプション＞ミディアムブルー色を使用する	color = 'mediumblue'
リストとイテラブルのパステル調のをプロットしてその色を黒色にセットする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
何回まで再帰ができるか調べる	sys.getrecursionlimit()
読み込みできるようにファイルをオープンする]	open(filepath, mode='r')
明るいグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
データ列が何曜日か見る	ds.dt.weekday_name
データフレームのリスト列を千の位で丸める	df[aList].round(-3)
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
データフレームの列の各データ値の出現数を求める	df[col].value_counts()
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
データフレームに重複があるか調べる	df.duplicated()
型が名前付きタプルかどうか調べる	issubclass(C, tuple)
CSVファイルをデータフレームとして読む	pd.read_csv(filename, sep=',')
predicateFuncを適用したときtrueとなるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
列をn個にビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
＜オプション＞ライトスカイブルー色を使う	color = 'lightskyblue'
グラフの背景色を暗くする	sns.set(style='darkgrid')
＜オプション＞色をダークグレーに設定する	color = 'darkgray'
＜オプション＞グラフの色をアクアに設定する	color = 'aqua'
全要素を０で初期化された三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
カラムの中の未入力値の合計を数える	ds.isna().sum()
アルファベットを全部使う	string.ascii_letters
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
リストと配列についての散布図に三角マーカーを描画する	plt.plot(xdata, ydata, marker='^')
ベクトルの累積積を求める	np.cumprod(aArray)
データ列の各データ値の出現回数	ds.value_counts()
整数を整数に変換する	int(x)
リストとリストについての散布図にカラーコードのバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
データ列の平均	ds.mean()
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
データフレームの列の文字列が文字列で終わらないデータを取り出す	df[not df[column].str.endswith(s)]
nとkのコンビネーション	math.comb(n, k)
ヒストグラムを描画して、色をパールゴールデンロッドに指定する	plt.hist(データ列, color='palegoldenrod')
にx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
最適な位置に凡例を加える	plt.legend(loc='best')
＜オプション＞ライトグリーンにグラフの色を指定する	color = 'lightgreen'
リストの先頭のn要素を取り除く	aList[n:]
書き込みできるように文字列の示すエンコーディングでファイルをオープンする]	open(filepath, mode='w', encoding=s)
列から配列を作成する	np.array(iterable)
実数の値が整数か確認する	x.is_integer()
文字列リストにイテラブルを変換して、部分文字列でつなげる	sub.join(map(str, iterable))
オブジェクトは浮動小数点数クラス	isinstance(obj, float)
小数点以下n桁まで表示するようにする	pd.set_option('precision', n)
線グラフの色をサドルブラウンにセットする	plt.plot(データ列, データ列2, color='saddlebrown')
折れ線グラフのバツ印の大きさをnに指定する	plt.plot(データ列, データ列2, marker='x', markersize=n)
キーが辞書に存在するか調べる	key not in aDict
折れ線グラフを描画して、その色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
データフレームのNaNを後の行の値に設定する	df.fillna(method='bfill')
データフレームからランダムに取り出す	df.sample()
散布図に暗い色のマーカーを用いる	plt.plot(xdata, ydata, c='dark')
整数nのバイト長	(n.bit_length() + 7) // 8
折れ線グラフの色をピーチパフに変更する	plt.plot(データ列, データ列2, color='peachpuff')
イテラブルを文字列リストに変換して、'改行でつなげる	'\n'.join(map(str, iterable))
オブジェクトが名前付きタプル型か	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ヒストグラムを描画してその色をミディアムバイオレットレッドに指定する	plt.hist(データ列, color='mediumvioletred')
重複した行をデータフレームから破壊的に削除する	df.drop_duplicates(inplace=True)
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
色差別ない色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='colorblind')
データフレームのそれぞれのグループ毎の個数	df.groupby(column).count()
イテラブルとリストの折れ線グラフを文字列の色で描画する	plt.plot(xdata, ydata, color=s)
列によって小さい順に破壊的にデータフレームをソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
データフレームを列の値ごとに集計し、、列挙する	[(name, group) for name, group in df.groupby(column)]
文字列を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
タプルのキーを列挙する	list(aDict)
データフレームのn行目を抽出する	df.loc[n]
＜オプション＞ライトサーモンにグラフの色を変更する	color = 'lightsalmon'
＜オプション＞プラム色を使う	color = 'plum'
タイムスタンプデータの月を使う	aDatetime.month
列によってデータフレームをグループ化し、、各グループごとの平均値を計算する	df.groupby(column).mean()
ヒストグラムを描画して色をマルーンに設定する	plt.hist(データ列, color='maroon')
青い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
散布図に黒い▲マーカーを使う	plt.plot(xdata, ydata, marker='^', c='k')
データフレームを列によって並べ直して、上位を取り出す	df.sort_values(columns).head(n)
リストと数列の青色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
両端キューの最大長	deq.maxlen
ヒストグラムを描画して、その色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
文字列の無限列	itertools.repeat(element)
＜オプション＞グラフの色を淡いピンク色に変更する	color = 'lightpink'
リストをパステル調の色の柱状図を用いて描画する	plt.hist(xdata, color='pastel')
散布図をダイアモンドマーカーとして描く	plt.plot(xdata, ydata, marker='D')
関数の値で表をグループ化する	df.groupby(関数)
要素が集合のメンバーでないか調べる	element not in aSet
グラフの用途をスライドに設定する	sns.set(context='talk')
要素ひとつのタプルを作る	(element,)
プログラムを強制的に終了する	sys.exit()
文字列の末尾から部分文字列を見つける	s.rfind(sub)
データフレームの欠損値をxに変更する	df.fillna(x)
表示する列数の最大値をnにセットする	pd.set_option('display.max_columns', n)
赤色の左三角マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='<', c='r')
xが一桁の正の整数かどうか調べる	0 <= x <= 9
日付を使う	import datetime
データフレームのカテゴリデータをベクトルに変換する	pd.get_dummies(df)
エクセルファイルファイルからnという名前のシートを読み込む	pd.read_excel(filename, sheet_name=n)
eの乗数	math.exp(x)
行列の行ごとの最大値を計算する	np.max(aArray, axis=1)
空のタプル	()
文字列をアンダーライン付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
時間を使う	import time
＜オプション＞グラフの色をブラックに設定する	color = 'black'
タプルの総和	sum(aTuple)
＜オプション＞ダークシアン色を使う	color = 'darkcyan'
折れ線グラフの色をシアンに変更する	plt.plot(データ列, データ列2, color='cyan')
データフレームの列と列の相関行列	df[[column, column2]].corr()
＜オプション＞グラフの色を小麦色に変更する	color = 'wheat'
淡いの折れ線グラフの色を赤色に設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
文字列中から部分文字列を見つける	s.find(sub)
データフレームをJSONLファイルにCSVファイルで保存する	df.to_csv(filename)
破線の色を色差別ないに変更する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
青色の色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
＜オプション＞ダークオレンジ色を使用する	color = 'darkorange'
データフレームの中にいくつ欠損値が存在するか求める	df.isna().sum()
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgray')
にy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
文字列が全て数字か	s.isdigit()
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
折れ線グラフの色をアクアに変更する	plt.plot(データ列, データ列2, color='aqua')
異なる列をキーとして2つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
線グラフを描画して、その色をバイオレットに設定する	plt.plot(データ列, データ列2, color='violet')
ヒストグラムを描画してその色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
二つのリストをコロンで区切ってプリントする	print(value, value2, sep=':')
リストの最後の要素	aList[-1]
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
赤い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='r')
xが1、もしくは2	x == 1 or x == 2
グラフの色を濃くする	sns.set(pallete='deep')
＜オプション＞ダーク・スラテグレーにグラフの色をする	color = 'darkslategrey'
折れ線グラフを描画して、色を珊瑚にする	plt.plot(データ列, データ列2, color='coral')
＜オプション＞グラフの色を紺に設定する	color = 'darkblue'
折れ線グラフを描画してその色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
値が集合のメンバーに含まれるか調べる	element in aSet
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
データフレームをタブ区切りのファイルから読む	pd.read_csv(filename, sep='\t')
下三角マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='v')
文字列の中で大文字・小文字を無視して正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
淡い色の柱状図としてリストをプロットする	plt.hist(xdata, color='muted')
濃いの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
リストと数列の濃いグラフを描画してその色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
折れ線グラフを描画して、その色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightgreen')
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslategray')
リストを分割数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
カラーコードの△マーカーを散布図に用いる	plt.plot(xdata, ydata, marker='^', c=rgb)
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
リストを横軸と指定して、折れ線グラフを描画する	plt.plot(range(len(xdata)), xdata)
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
nをn2で割った余りをnとする	n %= n2
データフレームをグループ化しそれぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
データフレームの列を削除する	df.drop(column, axis=1)
折れ線グラフを描画して、その色をスラグレーに変更する	plt.plot(データ列, データ列2, color='slategrey')
データフレームを表示するとき、最大行数を増やす	pd.set_option('display.max_rows', n)
線グラフの色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
マッピングの項目数	len(aDict)
ヒストグラムを描画して、色をピーチパフに変更する	plt.hist(データ列, color='peachpuff')
文字列を変数にして、変数にする	z = sympy.Symbol(s)
浮動小数点数を十六進表記の文字列にする	x.hex()
ヒストグラムを描画して、その色をアクアに設定する	plt.hist(データ列, color='aqua')
カウンタをイテラブルを用いて更新する	aCounter.update(iterable)
＜オプション＞クロスマーカーを用いる	marker = 'x'
濃いの折れ線グラフを数列とリストでプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
アルファベットの大文字を全部使う	string.ascii_uppercase
部分文字列で部分文字列が開始するか	s.startswith(sub)
ハイパボリック・コサインの逆数	math.acosh(x)
折れ線グラフのダイアモンドマーカーを黄色くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
折れ線グラフのスタイルを実線に変更する	plt.plot(データ列, データ列2, linestyle='solid')
部分文字列で部分文字列が始まるか	s.startswith(sub)
データフレームのリストカラムのNaNを最大値で置換する	df[aList].fillna(df[aList].max())
連立方程式の解を求める	sympy.solve([e, e2])
データフレームのリスト列の中に日付データと文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
文字列を空白で区切って、文字列リストに変換する	s.split()
レベッカパープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='rebeccapurple')
赤色の左三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='<', c='r')
ランダムに重複ありでn行を表データからサンプリングする	df.sample(n, replace=True)
ヒストグラムを描画して、その色を紺に変更する	plt.hist(データ列, color='darkblue')
重複した行	df[df.duplicated(keep=False)]
ゼロ埋めされた３２ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
＜オプション＞アクアマリン色を使用する	color = 'aquamarine'
データフレームが正規分布からどれだけ、尖っているか見る	df.skew()
0からnまでのスライス	slice(n)
ヒストグラムを描画して、その色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
＜オプション＞ダークシアグリーン色を使う	color = 'darkseagreen'
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
＜オプション＞ペルー色を用いる	color = 'peru'
リストとイテラブルの散布図を描画してマーカーを三角に指定する	plt.plot(xdata, ydata, marker='^')
キューが空でない	len(deq) != 0
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームから指定されたデータ型の列名リストを求める	df.select_dtypes(型).columns
リストとリストについて明るいを描画してその色を黒くする	plt.plot(xdata, ydata, linestyle='bright', color='k')
グラフで使う色をpalleteNameで指定する	sns.set(pallete=palleteName)
データフレームの列がx以上かつx2未満の行を取り出す	df[(x <= df[column]) & (df[column] < x2)]
＜オプション＞BOM付きを使う	encoding = 'utf_8_sig'
全句読点文字	string.punctuation
カラムの母標準偏差	ds.std(ddof=0)
日付時刻データの日付	aDatetime.date()
ビン数nとしてデータフレームの中の列をビニングし、namesのラベルをつける	pd.cut(df[col], n, labels=names)
'A'列と'B'列でデータフレームをソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
Pandasで、フォーマットを用いてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフを描画して、その色をパープルにセットする	plt.plot(データ列, データ列2, color='purple')
データフレームの列の分散	df[col].var()
ヒストグラムを描画して、その色をカーキに設定する	plt.hist(データ列, color='khaki')
データ列のpercentパーセンタイルを計算する	ds.quantile(percent/100)
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
リストを等量でn個に分割する	pd.qcut(aList, n)
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
＜オプション＞大バツマーカーを用いる	marker = 'X'
xが-9以上9以下か	-9 <= x <= 9
折れ線グラフを描画して、その色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
カラムの欠損値をxで埋める	ds.fillna(x)
線グラフを描画してその色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
データフレームの列の未入力値を最小値で補う	df[col].fillna(df[col].min())
Pythonパスにディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
＜オプション＞サドルブラウンに色を設定する	color = 'saddlebrown'
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
本日が何日か知る	datetime.datetime.today().day
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
暗い色でデータ列とデータ列の散布図を描画する	plt.plot(xdata, ydata, c='dark')
パステル調のの折れ線グラフをプロットし、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
自然数のGCD	math.gcd(n, n2)
1からNまでの行列を初期化する	np.arange(1, N+1)
淡いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームはどれだけ分散しているか調べる	df.var()
箱髭図を横に並べる	plt.boxplot([データ列, データ列2])
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
三つの文字列を順にプリントする	print(value, value2, value3)
実数を十の位で丸める	round(x, -1)
グラフで使用するフォントをfontNameに指定する	sns.set(font=fontName)
データフレームのカラムの中に日付データがあるか	df[col].isin([value])
配列とデータ列の散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
グラフの用途を論文に設定する	sns.set(context='paper')
ファイルをオープンして]バイナリ書き込みストリームを見る	open(filepath, mode='wb')
データフレームのカラムの欠損値を中央値に変更する	df[col].fillna(df[col].median())
文字列を空白によって区切る	s.split()
データフレームの下位25%	df.quantile(0.75)
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームを列を用いて並べ直して、新しいインデックスを振り直す	df.sort_values(columns).reset_index()
ヒストグラムを描画してその色をレモンシフォンに指定する	plt.hist(データ列, color='lemonchiffon')
リストの末尾にリストを追加して広げる	aList.extend(aList2)
二次元タプルをflattenする	sum(aTuple)
折れ線グラフを描画して、色をラベンダーブラッシュに指定する	plt.plot(データ列, データ列2, color='lavenderblush')
ヒストグラムを描画してその色をライムに設定する	plt.hist(データ列, color='lime')
マップから項目名の値か、もしくは要素を得る	aDict.get(key, element)
Pandasで、日付データのデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
データフレームを列ごとにグループ化して、各グループの個数を算出する	df.groupby(column).count()
リストを分割数nでビン分割する	pd.cut(aList, n)
ボックスチャートでデータ列を可視化する	plt.boxplot(データ列)
シルバー色の線グラフを描画する	plt.plot(データ列, データ列2, color='silver')
＜オプション＞改行コードを旧Macに設定する	newline = '\r'
データ列とリストを折れ線グラフで描く	plt.plot(xdata, ydata)
＜オプション＞ミントクリーム色を使う	color = 'mintcream'
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
プロットに格子を付ける	plt.grid(True)
文字列を最後の部分文字列を用いて二分する	s.rpartition(sub)
＜オプション＞色をシーグリーンに変更する	color = 'seagreen'
プログラムをここで終了する	sys.exit()
折れ線グラフを描画して、その色をダークレッドに指定する	plt.plot(データ列, データ列2, color='darkred')
画面にプロットの用途をセットする	sns.set(context='notebook')
＜オプション＞グラフの色をオリベドラブに変更する	color = 'olivedrab'
xが一桁の数かどうかテストする	-9 <= x <= 9
追加モードでファイルをオープンする]	open(filepath, mode='a')
リストとリストの明るいグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
オプションで、ファイルを使用する	file = sys.open(filename, 'w')
リストとデータ列の散布図に黒い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
データフレームの列リスト	df.info()
タプルに項目名ワード引数で更新する	aDict.update(**kwargs)
データ列の中にいくつNaNがあるか数える	ds.isna().sum()
＜オプション＞グラフの色をダークスラテグレーに指定する	color = 'darkslategray'
印字できる文字を全て使う	string.printable
配列と同じ大きさの空配列を作成する	np.empty_like(aArray)
2つの値をコロンで区切ってプリントする	print(value, value2, sep=':')
＜オプション＞色をインディアンレッドに設定する	color = 'indianred'
小数点数の逆正弦	math.asin(x)
全ての句読点文字	string.punctuation
＜オプション＞色をロイヤルブルーに設定する	color = 'royalblue'
２つの変数を改行で区切ってプリントする	print(value, value2, sep='\n')
単位行列	np.eye(行数, 列数)
データフレームの標準偏差を計算する	df.std()
＜オプション＞▲マーカーを描画する	marker = '^'
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
データフレームを列によってグループ化して各グループの最小値を計算する	df.groupby(column).min()
列名リストをデータ型でフィルタする	df.select_dtypes(型).columns
要素は辞書の値として含まれているかどうか調べる	element in aDict.values()
データフレームのカラムが何月か確認する	df[col].dt.month
オブジェクトが名前付きタプルか	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データ列の秒を使う	ds.dt.second
二つのリストから辞書	dict(zip(aList, aList2))
折れ線グラフの三角印を赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
両端キューから最初の要素を取り除く	deq.remove(element)
文字列がタプルの要素でないか	element not in aTuple
イテラブルとリストについての散布図に黒色のポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='k')
リストと配列の淡いグラフを描画し、、その色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
＜オプション＞淡い茶色を使う	color = 'tan'
ヒストグラムを描画して、その色をスチールブルーに変更する	plt.hist(データ列, color='steelblue')
＜オプション＞オーキッド色を用いる	color = 'orchid'
折れ線グラフの色をダークスラテグレーに変更する	plt.plot(データ列, データ列2, color='darkslategray')
線グラフの色をライトグレーに変更する	plt.plot(データ列, データ列2, color='lightgray')
ヒストグラムを描画して、その色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
折れ線グラフに赤い上三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
列をカテゴリデータにする	ds.astype(object)
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
グラフを論文用に指定する	sns.set(context='paper')
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
見やすいグラフを使用する準備をする	import seaborn as sns
データフレームの中の列をビン数nとして等量でビン分割する	pd.qcut(df[col], n)
データフレームを各列毎にグループ化し、、文字列というグループを見る	df.groupby(column).get_group(s)
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
リストをパステル調の色のヒストグラムとしてプロットする	plt.hist(xdata, color='pastel')
中央値で配列を分割する	pd.qcut(aArray, 2)
＜オプション＞グラフの色をマルーンに設定する	color = 'maroon'
文字列に漢字が使われているかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
実数のn乗	pow(x, n)
実線に折れ線グラフのスタイルを変更する	plt.plot(データ列, データ列2, linestyle='solid')
リストとリストについての散布図を濃い色を使って重なりを見やすくプロットする	plt.plot(xdata, ydata, c='deep', alpha=0.5)
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
データフレームの中の列と列に重複があれば削除する	df.drop_duplicates(subset=[column, column2])
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
リストと配列についての散布図に赤いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
データフレームを複数の列で並べて、更新する	df.sort_values(by=column, inplace=True)
リストとリストで濃いの折れ線を描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
データフレームの中の欠損値の合計をカウントする	df.isna().sum()
直後の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='bfill')
箱ひげ図としてデータ列を可視化する	plt.boxplot(データ列)
太字で変数をプリントする	print(f'\033[1m{value}\033[0m')
データフレームをグループ化しそれぞれの列に対し標準偏差を計算する	df.groupby(column)[column2].std()
データフレームの値を正規表現patternで一度にreplに置き換える	df.replace(pattern, repl, regex=True)
黒色の星マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='*', c='k')
数列とリストについての散布図にバツマーカーを描く	plt.plot(xdata, ydata, marker='x')
文字列を区切りによって区切って、列挙する	s.split(sep)
折れ線グラフを描画して、色を黒くする	plt.plot(データ列, データ列2, color='k')
今日の日付時刻	datetime.datetime.now()
＜オプション＞バイナリモードに指定する	mode = 'rb'
＜オプション＞ゴールデンロッドを使う	color = 'goldenrod'
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
＜オプション＞ゲインズボロ色を使う	color = 'gainsboro'
ヒストグラムの線のスタイルを実線に設定する	plt.hist(データ列, linestyle='solid')
柱状図の区間を設定する	plt.hist(データ列, range=(start, end))
リストと配列について散布図をプロットして、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
折れ線グラフに左三角マーカーを使う	plt.plot(データ列, データ列2, marker='<')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
リストの最後を取り除く	aList[:-1]
nとn2のXOR	n ^ n2
データフレームの歪度を求める	df.kurt()
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
折れ線グラフを描画してその色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
2を底とする対数を求める	math.log2(x)
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
データフレームを丸めて、整数型にする	df.round().astype(int)
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
nが5で割り切れる	n % 5 == 0
データ列を等量でビン数nとしてビン分割する	pd.qcut(ds, n)
データフレームのカラムの未入力値を平均に設定する	df[col].fillna(df[col].mean())
データフレームの中の列をn個にビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
線幅nの菱形印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
スカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='skyblue')
文字列が文字列より辞書順で前か調べる	s < s2
折れ線にラベルを付ける	plt.plot(xdata, ydata, label=untitled)
ひとつでも非アルファベットが文字列中にある	any(not c.isalpha() for c in s)
折れ線グラフに緑色の四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
xが1、もしくは2、もしくは3に等しいかどうか調べる	x == 1 or x == 2 or x == 3
'A'列によってデータフレームをまとめた表を使う	df.groupby('A')
データフレームをJSONLファイルにインデックスを付けずに書き込む	df.to_csv(filename, index=None)
ヒストグラムを描画してその色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
文字列を全て大文字に変換する	s.upper()
全要素を０で初期化された三二ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
散布図に右三角マーカーを使う	plt.plot(xdata, ydata, marker='>')
データフレームを列を用いて並べる	df.sort_values(by=column)
タプルのキー一覧を得る	list(aDict)
データ列と配列についてカラーコードの明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
＜オプション＞パールゴールデンロッドに色を指定する	color = 'palegoldenrod'
ベクトルが何のデータ型か	aArray.dtype()
キューをリストに変換する	list(deq)
データ列をリストを境界値としてビニングする	pd.cut(ds, aList)
データ列はどれだけ、分散しているか見る	ds.var()
データ列とラベル列を指定して、積み上げ棒グラフを描画する	"plt.bar(ラベル列, データ列, bottom=データ列2, color=""red"")"
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
横棒グラフの色をカラーコードに設定する	plt.barh(ラベル列, データ列, color=rgb)
＜オプション＞紺色を使用する	color = 'darkblue'
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
パターンに複数行対応として文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームのモード	df.mode()
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
変数について数値を微分する	sympy.diff(e, z)
折れ線グラフを描画して、その色をダークバイオレットに指定する	plt.plot(データ列, データ列2, color='darkviolet')
リストと配列について色差別ない色の折れ線グラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
複数の列の値毎にデータフレームをグループ化して列挙する	[(name, group) for name, group in df.groupby(columns)]
タプルの平均を算出する	sum(aTuple)/len(aTuple)
折れ線グラフの色をダークターコイズに変更する	plt.plot(データ列, データ列2, color='darkturquoise')
データフレームの各次元の大きさを確認する	df.shape
配列とリストの折れ線を透明度alphaで描く	plt.plot(xdata, ydata, alpha=alpha)
データフレームの値は欠損値	df.isna()
データフレームのカラムのどの値が最も現れるか確認する	df[col].mode()
折れ線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列, データ列2, color='mediumorchid')
データフレームから重複を残さず削除する	df.drop_duplicates(keep=False)
＜オプション＞グラフの色をスレートブルーに設定する	color = 'slateblue'
リストとリストについて散布図をプロットして、星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
＜オプション＞深紅にグラフの色を設定する	color = 'crimson'
データフレームのリストカラムの欠損値を中央値で補う	df[aList].fillna(df[aList].median())
赤い三角マーカーを配列と配列についての散布図にプロットする	plt.plot(xdata, ydata, marker='^', c='r')
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
データ列の各値が何回出現するか確認する	ds.value_counts()
今日が日曜日か	datetime.datetime.today().weekday() == 6
データフレームの未入力値を平均値に指定する	df.fillna(df.mean())
＜オプション＞レベッカパープルを使用する	color = 'rebeccapurple'
折れ線グラフの三角印を緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
暗いの線幅を指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
＜オプション＞シエナを使用する	color = 'sienna'
文字列を赤色にする	f'\033[31m{value}\033[0m'
オブジェクトのポインタ	id(obj)
符号なし８ビット整数型の全要素を０で初期化された行列を作成する	np.zeros(行数, 列数, dtype=np.uint8)
文字列は全て識別子名かどうか調べる	s.isidentifier()
2を底とする実数の対数	math.log2(x)
タプルを小さい順にソートする	sorted(aTuple, reverse=False)
折れ線グラフに赤い大バツ印を描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
実数は無限大か	math.isinf(x)
データフレームのカラムは正規分布からどの程度、歪んでいるか見る	df[col].kurt()
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
データフレームの標本標準偏差	df.std()
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
リストとリストについて散布図を描画して、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
リストと配列として色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
暗いグラフを描画してその線幅をnに指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
タプルをn回連結する	aTuple * n
線グラフの色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
＜オプション＞バイナリモードに設定する	mode = 'rb'
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
ヒストグラムを描画して、その色をマゼンタに設定する	plt.hist(データ列, color='magenta')
データフレームを二つの列の値によって集約して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
カラーパレットを暗くする	sns.set(pallete='dark')
散布図をクロスマーカーとしてプロットする	plt.plot(xdata, ydata, marker='x')
スタックのstart〜endの部分データ	collections.deque(itertools.islice(deq, start, end))
カラーコードの大バツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='X', c=rgb)
グラフの目的を画面に設定する	sns.set(context='notebook')
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
n番目のシートをエクセルファイルファイルから読む	pd.read_excel(filename, sheet_name=n)
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
ふたつのリストの共通りスト	list(set(aList) & set(aList2))
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
パステル調のの折れ線グラフをプロットし、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
折れ線グラフに緑色の丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
集合から要素を全て消す	aSet.clear()
文字列中に部分文字列がないかテストする	sub not in s
＜オプション＞▲印を加える	marker = '^'
グリーンイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='greenyellow')
配列とデータ列について色差別ない色の折れ線グラフを描画し、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
nから無限に数え上げるする	itertools.count(start=n)
カラムを10の位で四捨五入する	ds.round(-1)
データ列の値をValueMapで置き換える	ds.replace(ValueMap)
書式を辞書でフォーマットする	formatText.format_map(aDict)
イテラブルを集合にする	set(iterable)
十六進数字を全部使う	string.hexdigits
文字列中の大文字を小文字にする	s.lower()
線グラフの色をミスティローズに変更する	plt.plot(データ列, データ列2, color='mistyrose')
データフレームを'A'列でまとめたグループ	df.groupby('A')
n2行n列の2次元リスト	[[0] * n for _ in range(n2)]
三数の一番小さい値	min(x, y, z)
ヒストグラムを描画して、半透明ににする	plt.hist(データ列, alpha=0.5)
破壊的に重複をデータフレームから落とす	df.drop_duplicates(inplace=True)
数列と配列の散布図を描画して、ポイントマーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='.', c=rgb)
リストとデータ列について散布図をプロットし、、三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='^', c=rgb)
異なるカラムをキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
nが1、もしくは2もしくは3に等しい	n == 1 or n == 2 or n == 3
双方向キューに値をエンキューする	deq.appendleft(element)
リストとリストについて破線グラフを描画して、その色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
データフレームを関数によってまとめたグループ	df.groupby(関数)
オブジェクトはタプルか調べる	isinstance(obj, tuple)
折れ線グラフの星マーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='*', markersize=n)
＜オプション＞グラフの色をビスクに変更する	color = 'bisque'
リストについてのヒストグラムを色差別ない色を用いて描画する	plt.hist(xdata, color='colorblind')
ふたつの辞書を合体する	aDict | aDict2
青色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
書き込みモードを用いてファイルをオープンする]	open(filepath, mode='w')
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
カラーコードの▽マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='v', c=rgb)
折れ線グラフを描画して、その色をライトサーモンにする	plt.plot(データ列, データ列2, color='lightsalmon')
両端キューからポップする	deq.pop()
散布図にカラーコードの四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c=rgb)
実数の逆双曲線余弦を求める	math.acosh(x)
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
浮動小数点数から浮動小数点数を引く	x - y
セットをイミュータブルなセットに変換する	frozenset(aSet)
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
赤い明るいの折れ線グラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='r')
線グラフの色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
実数に数を掛ける	x * y
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
配列の行列式	np.linalg.det(aArray)
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
predicateFuncがTrueとなるイテラブルの要素を得る	itertools.takewhile(predicateFunc, iterable)
ファイルにxを文字列に変換して書き込む	f.write(str(x))
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
文字列中に部分文字列が含まれるか	sub in s
ゼロ埋めした論理値型のベクトル	np.zeros(要素数, dtype=np.int32)
両端キューのstart番目からend番目の要素を使う	collections.deque(itertools.islice(deq, start, end))
＜オプション＞エンコーディングをUTF8に設定する	encoding = 'utf-8'
列でデータフレームをグループ化して、それぞれのグループ毎の件数を知る	df.groupby(column).size()
データフレームの重複していない行だけ	df[not df.duplicated(keep=False)]
折れ線グラフを描画して、その色を青紫に設定する	plt.plot(データ列, データ列2, color='violet')
凡例の位置を指定する	plt.legend(loc=(x, y))
変数がマイナス無限大に近づく時の数式の極限値を求める	sympy.limit(e, z, -oo)
横棒グラフの幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
イテラブルから集合	set(iterable)
集合から値を除去する	aSet.remove(element)
折れ線グラフを描画して、色をオレンジレッドに指定する	plt.plot(データ列, データ列2, color='orangered')
折れ線グラフを描画して、その色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
カンマによって文字列を区切って、列挙する	s.split(',')
長さnのリスト	[0] * n
折れ線グラフを描画してその色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
折れ線グラフのクロス印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
ヒストグラムを描画して、その色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
ヒストグラムを描画して、その色をダークターコイズに指定する	plt.hist(データ列, color='darkturquoise')
配列と配列のカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
データフレームを破壊的に列名リストによってでソートする	df.sort_values(by=column, inplace=True)
行列のムーア・ペンローズの擬似逆行列を計算する	np.linalg.pinv(aArray)
nのバイト長を見る	(n.bit_length() + 7) // 8
文字列中に非英数字が含まれるかどうか調べる	any(not c.isalnum() for c in s)
＜オプション＞グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
データフレームのカラムの秒	df[col].dt.second
データフレームを各列毎に集約して、カラムの最大値を計算する	df.groupby(column)[column2].max()
線グラフを描画して、色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
折れ線グラフに黄色い三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
色差別ないグラフを描画し、、線幅をnに指定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
データ列のNaNを最大値に設定する	ds.fillna(ds.max())
ヒストグラムを描画して、色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
マップの項目名に対応した値	aDict.get(key)
配列をヒストグラムとして可視化する	plt.hist(aArray)
文字列から部分文字列を全て除去する	s.replace(sub, '')
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
パステル調のの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
データフレームを'A'列でによって降順に並べる	df.sort_values(by='A', ascending=False)
文字列を置き換える	s.replace(sub, newsub)
実数の逆正弦	math.asin(x)
Pandasで、文字列をタイムスタンプに変換する	pd.to_datetime(s)
ヒストグラムを描画してその色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
リストをランダムにシャッフルする	random.shuffle(aList)
文字列は漢字	('\u4E00' <= ch <= '\u9FD0')
データフレームの列の文字列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
非アルファベットが文字列中に含まれる	any(not c.isalpha() for c in s)
折れ線グラフに線幅nの三角印を描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
線グラフを描画して、その色をハニーデューに変更する	plt.plot(データ列, データ列2, color='honeydew')
カウンタを作る	collections.Counter()
プロットに凡例を付ける	plt.legend()
折れ線グラフを描画してその色をスラグレーに指定する	plt.plot(データ列, データ列2, color='slategray')
折れ線グラフの丸マーカーを青くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
＜オプション＞ダークスレートブルーを使う	color = 'darkslateblue'
パープルにヒストグラムの色を設定する	plt.hist(データ列, color='purple')
データフレームを2つの列によってソートする	df.sort_values(by=['A', 'B'])
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
nをn2だけ増加させる	n += n2
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ファイルパスを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
データフレームのリスト列のどの値が頻出か見る	df[aList].mode()
折れ線グラフを描画してその色を黄色に指定する	plt.plot(データ列, データ列2, color='yellow')
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
数列と配列の散布図に赤い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
＜オプション＞ミディアムターコイズを使用する	color = 'mediumturquoise'
組の先頭を取り除く	aTuple[1:]
データフレームが正規分布からどの程度歪んでいるか見る	df.kurt()
配列の列ごとの分散	np.var(aArray, axis=0)
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
文字列がリストの要素でないかどうか調べる	element not in aList
整数の順列の総数	math.perm(n)
実数を実数で割って、切り捨てる	x // y
黒い下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v', c='k')
実数のn乗して実数による余り	pow(x, n, y)
タプルを順に表示する	print(*aTuple)
折れ線グラフのラベルをuntitledに設定する	plt.plot(xdata, ydata, label=untitled)
リストにリストを追加する	aList.extend(aList2)
リストのn番目の	aList[n]
右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>')
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
データフレームのリストカラムの欠損値を平均に設定する	df[aList].fillna(df[aList].mean())
セット＼集合	aSet.difference(aSet2)
線グラフの色を白に変更する	plt.plot(データ列, データ列2, color='white')
実数を小数点第一位で丸める	round(x, 1)
丸マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='o')
データ列の文字列を欠損値にする	ds.replace(s, np.nan)
折れ線グラフを描画して、色をライトグリーンにセットする	plt.plot(データ列, データ列2, color='lightseagreen')
十六進文字列をバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
グラフの用途をポスターに指定する	sns.set(context='poster')
ヒストグラムを描画して、その色をサンディーブラウンにする	plt.hist(データ列, color='sandybrown')
赤色の右三角マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='>', c='r')
明るいグラフをリストと配列としてプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
文字列を小文字にする	s.casefold()
黒い上三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^', c='k')
データフレームを列を用いてソートして新しい行を加える	df.sort_values(columns).reset_index()
折れ線グラフに青い▼マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
ヒストグラムの色をダークシアンにする	plt.hist(データ列, color='darkcyan')
異なる列をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
日付データが月曜日か	aDate.weekday() == 0
パステル調の色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='pastel')
データフレームを二つの列によってソートし、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームの値をreplに一度に正規表現patternで置換する	df.replace(pattern, repl, regex=True)
ヒストグラムの色を濃い青に設定する	plt.hist(データ列, color='darkblue')
文字列の右側から空白を取り除く	s.rstrip(' ')
＜オプション＞色をミディアムバイオレットレッドに指定する	color = 'mediumvioletred'
＜オプション＞色をペールグリーンに変更する	color = 'palegreen'
折れ線グラフを描画して、その色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
今日が金曜日か調べる	datetime.datetime.today().weekday() == 4
日付データが何日か知る	aDate.day
＜オプション＞ダークシアグリーン色を用いる	color = 'darkseagreen'
各列毎にデータフレームを分類して、列の平均値を求める	df.groupby(column)[column2].mean()
データフレームのリストカラムを1000の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列, データ列2, color='lightgray')
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
カラーコードのポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
色を全般的に明るくする	sns.set(pallete='bright')
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
nにn2をかけた値をnに代入する	n *= n2
データフレームのリストカラムの中にある文字列と日付データの合計をカウントする	df[aList].isin([value, value2]).sum()
＜オプション＞色をアクアマリンに設定する	color = 'aquamarine'
多い順にカウンタをリストとして得る	aCounter.most_common()
データフレームの列の欠損値を直後の値に変更する	df[col].fillna(method='bfill')
赤色の左三角マーカーをリストと配列についての散布図に描画する	plt.plot(xdata, ydata, marker='<', c='r')
ヒストグラムの色をペールグリーンに指定する	plt.hist(データ列, color='palegreen')
2つの浮動小数点数が十分に近いかどうか調べる	math.isclose(x, x2)
＜オプション＞丸マーカーを描画する	marker = 'o'
線グラフを描画して色を黄色くする	plt.plot(データ列, データ列2, color='y')
＜オプション＞グラフの色を赤に指定する	color = 'red'
Pandasでフォーマットfmtとしてデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
スライドにプロットの用途をセットする	sns.set(context='talk')
ビンの数を設定してヒストグラムをプロットする	plt.hist(データ列, bins=n)
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
文字列を走査し正規表現にマッチするか見る	re.search(pattern, s)
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
追加できるように文字列の示す文字コードで既存のファイルをオープンする]	open(filepath, mode='a', encoding=s)
タイムスタンプデータからn日を減算する	aDatetime - datetime.timedelta(days=n)
ミントクリームにヒストグラムの色を変更する	plt.hist(データ列, color='mintcream')
データフレームをタブ区切りとしてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
要素ひとつのタプル	(element,)
線グラフを描画してその色を黄緑に設定する	plt.plot(データ列, データ列2, color='chartreuse')
リストとリストの散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind')
リストとリストの暗いグラフを描き、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
色差別ないグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
リストと数列についての散布図を暗い色として描画する	plt.plot(xdata, ydata, c='dark')
キーが辞書上で未定義か調べる	key not in aDict
オブジェクトは集合	isinstance(obj, set)
配列の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
数式を数値に変換する	float(e)
nがリストのいづれか	n in aList
エクセルファイルファイルから全シートを読み込む	pd.read_excel(filename, sheet_name=None)
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
データフレームを各列毎にグループ化し、列の最小値を算出する	df.groupby(column)[column2].min()
ヒストグラムの色をホワイトに設定する	plt.hist(データ列, color='white')
データフレームの中に文字列があるか調べる	df.isin([value])
サーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='salmon')
セットから何でもいいからひとつ取り出す	aSet.pop()
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='deepskyblue')
ヒストグラムの色をコーンズシルクに指定する	plt.hist(データ列, color='cornsilk')
ヒストグラムを描画して、その色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
折れ線グラフの色を茶色に指定する	plt.plot(データ列, データ列2, color='brown')
フクシア色の線グラフを描画する	plt.plot(データ列, データ列2, color='fuchsia')
常用対数を算出する	math.log10(x)
列名リストの値によってデータフレームをグループ化し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
ヒストグラムを描画して、その色をシーグリーンに変更する	plt.hist(データ列, color='seagreen')
インデント幅nでタプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
二つの文字列が同じ	s == s2
＜オプション＞グラフの色をミスティローズに設定する	color = 'mistyrose'
Pandasの日付型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
＜オプション＞マーカーを▲に変更する	marker = '^'
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
カウンタ	collections.Counter()
折れ線グラフを描画して、その色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
折れ線グラフに描画して印を上三角印にする	plt.plot(データ列, データ列2, marker='^')
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
組をカンマ区切りで出力する	print(*aTuple, sep=',')
ミディアムブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumblue')
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
濃いグラフをリストとリストで描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
折れ線グラフのダイアモンドマーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
折れ線グラフの▽マーカーの線幅をnにする	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
データ列とリストの折れ線グラフを描画し、その色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
データフレームから指定された４つの列を取り出す	df[[column, column2, column3, column4]]
折れ線グラフに黒い上三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
Pandasでデータフレームのカラムをタイムスタンプ型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
ヒストグラムを描画して、その色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
整数nの十六進数文字列	hex(n)[2:]
データフレームのカラムを千の位で丸めて整数にする	df[col].round(-3).astype(int)
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
テンプレートを辞書で文字列整形する	formatText.format_map(aDict)
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
イテラブルとリストについてカラーコードの暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
リストのn番目のの要素	aList[n]
グラフに鉛直方向の破線をつける	plt.axvline(x=0, linestyle='dashed')
配列とリストについて散布図をプロットし、、マーカーを丸に指定する	plt.plot(xdata, ydata, marker='o')
＜オプション＞ダークオリーブグリーンに色を変更する	color = 'darkolivegreen'
折れ線グラフの星マーカーを緑色にする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
カラムは正規分布からどれだけ、歪んでいるか見る	ds.kurt()
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
文字列はタイトルケースか調べる	s.istitle()
行列の最小値	np.min(aArray)
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
グラフを濃くする	sns.set(pallete='deep')
リストとリストについて濃いグラフを描画して色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
ダークスラテグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkslategray')
＜オプション＞どの行もヘッダにしない	header = None
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
ホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='white')
色差別ない色の折れ線グラフを描いて、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
折れ線グラフを描画して、その色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
predicateFuncがTrueとならない列の要素	itertools.dropwhile(predicateFunc, iterable)
ダークグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgreen')
データフレームの中で列に重複があるか見る	df.duplicated(subset=column)
折れ線グラフを描画して、その色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列, データ列2, color='slategray')
データフレームのNaNを直前の値に設定する	df.fillna(method='ffill')
散布図を描画する	plt.scatter(xdata, ydata)
線グラフを描画して、色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
プログラムを正常終了する	sys.exit(0)
文字列がリストの要素か調べる	element in aList
折れ線グラフに丸マーカーを用いる	plt.plot(データ列, データ列2, marker='o')
配列をリストから作る	np.array(aList)
数値を赤色にする	f'\033[31m{value}\033[0m'
配列の標準偏差	np.std(aArray)
リストをリストを境界値として分割する	pd.cut(aList, aList)
横軸のラベルをuntitledに設定する	plt.xlabel(untitled)
二次元リストをフラット化する	sum(aList)
ミディアムターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='mediumturquoise')
リストを淡い色のヒストグラムで描画する	plt.hist(xdata, color='muted')
文字列を最後の部分文字列で二分し最初の文字列を使う	s.rpartition(sub)[0]
リストとデータ列について散布図を描画して、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
nがn2以上か調べる	n >= n2
＜オプション＞グラフの色をダークオーキッドに設定する	color = 'darkorchid'
＜オプション＞色をパールバイオレットレッドにセットする	color = 'palevioletred'
配列とデータ列についての散布図にカラーコードの四角マーカーを描く	plt.plot(xdata, ydata, marker='s', c=rgb)
本日が何月か知る	datetime.datetime.today().month
リストとリストについての散布図を淡い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
ヒストグラムを描画して、色をネイビーに設定する	plt.hist(データ列, color='navy')
リストと配列についてカラーコードのパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
ヒストグラムの描画し、正規化する	plt.hist(データ列, density=True)
データフレームからカテゴリデータのカラムのみ抽出する	df.select_dtypes('object')
データフレームの未入力値を最大値に設定する	df.fillna(df.max())
文字列を走査し、正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
棒グラフをプロットしてxにグラフ幅を設定する	plt.bar(ラベル列, データ列, width=x)
データフレームのリストカラムの中に日付データと文字列があるか確認する	df[aList].isin([value, value2])
文字列は十進数字かどうか調べる	s.isdecimal()
ヒストグラムの色をコーラルにする	plt.hist(データ列, color='coral')
ひとつでもアスキー文字が文字列内に含まれるか	any(c.isascii() for c in s)
実数のサイン	math.sin(x)
重なりを見やすく濃い色のマーカーとして散布図をプロットする	plt.plot(xdata, ydata, c='deep', alpha=0.5)
ファイルをバイナリモードを用いてオープンする]	open(filepath, mode='rb')
折れ線グラフを描画して、その色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
＜オプション＞追加用に設定する	mode = 'a'
データフレームを降順に破壊的に複数の列によってソートする	df.sort_values(by=column, ascending=False, inplace=True)
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
nかけるn2	n * n2
TSVからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
全角数字を半角数字にする	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
シードを初期化する	random.seed()
nを二進数リテラルにする	bin(n)
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
計算機イプシロン	sys.float_info.epsilon
ベクトルの標準偏差を計算する	np.std(aArray)
＜オプション＞グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
ヒストグラムを描画して、その色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
横棒の幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
＜オプション＞丸マーカーを加える	marker = 'o'
散布図に黒い大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='k')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
カウンタをイテラブルで更新する	aCounter.update(iterable)
データフレームを見る	df.head()
＜オプション＞グラフの色をイエローグリーンにセットする	color = 'yellowgreen'
データフレームのNaNをxに設定する	df.fillna(x)
nがn2よりも大きい	n > n2
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
データフレームのNaNをメディアンに設定する	df.fillna(df.median())
データ列をヒストグラムとして可視化する	plt.hist(ds)
オブジェクトのハッシュ値	hash(obj)
プロットを論文用に変更する	sns.set(context='paper')
辞書からキーの値	aDict.get(key)
数式の微分を計算する	sympy.diff(e)
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
整数nがタプルのいづれかか	n in aTuple
ユーザから入力される	input()
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
折れ線グラフを描画してその色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
折れ線グラフのダイアモンドマーカーを青色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
折れ線グラフの大バツマーカーの大きさをnに指定する	plt.plot(データ列, データ列2, marker='X', markersize=n)
オブジェクトがバイト列クラスか調べる	isinstance(obj, bytes)
＜オプション＞グラフの色をアクアに変更する	color = 'aqua'
ヒストグラムを描画して、色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
配列をリストを境界値として分割する	pd.cut(aArray, aList)
ヒストグラムの色を濃い青に指定する	plt.hist(データ列, color='darkblue')
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
整数個からk個取り出したときの順列の総数	math.perm(n, k)
＜オプション＞オリベドラブを使う	color = 'olivedrab'
データフレームのリスト列の欠損値をxで埋める	df[aList].fillna(x)
折れ線グラフの丸印を黒色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
データ列を折れ線グラフに描画してマーカーを丸にする	plt.plot(データ列, データ列2, marker='o')
棒の色を設定する	plt.bar(ラベル列, データ列, color=rgb)
リストから文字列を除く	aList.remove(element)
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
線グラフを描画して、色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
散布図に黒い星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='k')
データ列の値をまとめて正規表現patternでreplに変更する	ds.replace(pattern, repl, regex=True)
＜オプション＞グラフの色をスレートブルーにセットする	color = 'slateblue'
＜オプション＞カーキ色を用いる	color = 'khaki'
リストと配列のカラーコードの淡いを描く	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
整数nを2進リテラルにする	bin(n)
実数とyのノルムを算出する	math.hypot(x, y)
２つの辞書をネストする	collections.ChainMap(aDict, aDict2)
配列の行ごとの標準偏差	np.std(aArray, axis=1)
リストとリストの散布図に四角マーカーを描く	plt.plot(xdata, ydata, marker='s')
ふたつの関係が真下位集合かどうか	aSet < aSet2
JSONLファイルにインデックスを付けずにデータフレームを保存する	df.to_csv(filename, index=None)
n個の文字列があるリスト	[element] * n
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
データフレームの列の一意な値	df[col].unique()
データ列とイテラブルの色差別ないグラフを描画して、その色を青くする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
タプルからキーの値をエラーなく得る	aDict.get(key, None)
配列の平均	np.mean(aArray)
データフレームの列とカラムを消す	df.drop([column, column2], axis=1)
＜オプション＞ゲインズボロにグラフの色を変更する	color = 'gainsboro'
データ列と数列の折れ線グラフを描画して、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
組をリストにする	list(aTuple)
空の辞書	{}
xが-9以上、9以下か調べる	-9 <= x <= 9
ヒストグラムを描画して、その色をアイボリーに設定する	plt.hist(データ列, color='ivory')
シーケンスの全順列	itertools.permutations(iterable)
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
リストとリストについて散布図を描画して、マーカーを△に設定する	plt.plot(xdata, ydata, marker='^')
データフレームのカラムの日	df[col].dt.day
nとn2の論理和を算出する	n | n2
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
ヒストグラムを描画して、その色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
＜オプション＞グラフの色をシエナに変更する	color = 'sienna'
リストの変化を折れ線グラフに描く	plt.plot(range(len(xdata)), xdata)
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
カウンタの上位を列挙する	aCounter.most_common(k)
タプルから項目名の値	aDict.get(key)
天井数を求める	math.ceil(x)
折れ線グラフの左三角マーカーを黒色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='k')
イテラブルから新しいカウンタを生成する	collections.Counter(iterable)
グラフの中の縦軸にラベルを付ける	plt.ylabel(untitled)
リストを等量でn個にビン分割する	pd.qcut(aList, n)
＜オプション＞ネイビーに色を設定する	color = 'navy'
リストの最初	aList[0]
散布図を黒色の丸マーカーで描く	plt.plot(xdata, ydata, marker='o', c='k')
最大列数を増やす	pd.set_option('display.max_columns', n)
ハローワールドと表示する	print('Hello World')
データフレームを列の値によってグループ化して合計を計算する	df.groupby(column).sum()
配列とイテラブルの淡いグラフを描いて、その色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
数が整数	x.is_integer()
縦棒グラフを描画し、、中央寄せする	plt.bar(ラベル列, データ列, align='center')
辞書のキーを要素に変更する	aDict[key] = element
マップの項目名一覧	list(aDict)
データフレームの中にあると日付データの合計をカウントする	df.isin([value, value2]).sum()
データフレームのstart行目からend行目までを抽出する	df[start:end]
平方根	math.sqrt(x)
データフレームのカラムの未入力値をxに設定する	df[col].fillna(x)
データフレームのカラムのNaNを直後の値に変更する	df[col].fillna(method='bfill')
ヒストグラムの色をマルーンに変更する	plt.hist(データ列, color='maroon')
自分自身をモジュールとして	sys.modules[__name__]
データフレームを列の値によってグループ化し、基本統計量を求める	df.groupby(column).describe()
線グラフを描画してその色をライムにセットする	plt.plot(データ列, データ列2, color='lime')
まとめてデータフレームのカラムをValueMapで置換する	df[col].replace(ValueMap)
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
＜オプション＞色をシャルトリューズにセットする	color = 'chartreuse'
正規分布として疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
行列の要素ごとに加算する	aArray + aArray2
リストとリストの折れ線グラフを描画して、その色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
ヒストグラムの色を暗い赤に変更する	plt.hist(データ列, color='darkred')
折れ線グラフを描画して、その色をオーキッドに変更する	plt.plot(データ列, データ列2, color='orchid')
黒いダイアモンドマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='D', c='k')
テンプレートをargsを引数としてフォーマットする	formatText.format(*args)
＜オプション＞エンコーディングをSJISに設定する	encoding = 'shift_jis'
実数以下の最大の整数	math.floor(x)
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
整数nの2進文字列を使う	bin(n)[2:]
折れ線グラフを描画して、その色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
リストとリストについての散布図に▽マーカーを描画する	plt.plot(xdata, ydata, marker='v')
リストを両端キューにする	collections.deque(iterable)
データフレームの列の値がx未満の行を抽出する	df[df[column] < x]
データフレームのカラムを整数に丸める	df[col].round()
＜オプション＞改行の代わりに文字列を用いる	end = s
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
日付データが何月か知る	aDate.month
リストとリストについての散布図に黒い大バツマーカーを描く	plt.plot(xdata, ydata, marker='X', c='k')
濃いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
異なる列をキーにして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
大きさnでリストと配列の散布図を描画する	plt.scatter(xdata, ydata, s=n)
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
行列の行ごとの平均値を計算する	np.mean(aArray, axis=1)
文字列の先頭から部分文字列を取り除く	s.removeprefix(sub)
データフレームを列で降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
ヒストグラムを描画して色をペルーに設定する	plt.hist(データ列, color='peru')
数字を全部見る	string.digits
データフレームを100の位で丸めて、整数にする	df.round(-2).astype(int)
データフレームのリスト列の正規分布に対する左右対称性を算出する	df[aList].kurt()
＜オプション＞ピンクにグラフの色を設定する	color = 'pink'
JSONLファイルにSJISでデータフレームを保存する	df.to_csv(filename, encoding='shift_jis')
現在処理中の例外を情報を調べる	sys.exc_info()
行列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
CSVをデータフレームとして読み込む	pd.read_csv(filename, sep=',')
追加できるようにファイルパスをEUCでオープンする]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフを描画して、その色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
＜オプション＞ミッドナイトブルー色を使う	color = 'midnightblue'
nをn2で割った値の切り上げを求める	(n + n2 - 1) // n2
散布図を三角マーカーで描く	plt.plot(xdata, ydata, marker='^')
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
双方向キューの上限	deq.maxlen
プロットの描画で濃い色を使う	sns.set(pallete='deep')
JSONLファイルにデータフレームをタブ区切りで保存する	df.to_csv(filename, sep='\t')
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
文字列の終了位置以前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
カウンタから列をカウントして引く	aCounter.subtract(iterable)
データフレームのカラムの標本標準偏差	df[col].std()
明るいの色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
＜オプション＞書き込みモードを使う	mode = 'w'
文字列が全て小文字か調べる	s.islower()
データフレームを正規表現patternで置換する	df.replace(pattern, repl, regex=True)
三つのデータフレームを横方向に一つにする	pd.concat([df, df2, df3], axis=1)
文字列は印字できるかどうか調べる	s.isprintable()
nの桁数	len(str(n))
実数を小数点数で割った剰余	math.remainder(x, x2)
ファイルのフォルダ名	os.path.dirname(filepath)
ヒストグラムを描画して、色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumslateblue')
８進数字を全部使う	string.octdigits
折れ線グラフの色を深紅に設定する	plt.plot(データ列, データ列2, color='crimson')
nがn2より小さいか調べる	n < n2
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
＜オプション＞n番目のカラムを行に設定する	index_col = n
データ列は何秒か見る	ds.dt.second
大きさnでリストとリストについての散布図を描画する	plt.scatter(xdata, ydata, s=n)
データ列とリストについて破線グラフを描画し、その色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
データフレームの列からユニークな値を抽出し、リスト化する	df[col].unique().tolist()
カラムの中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
折れ線グラフを描画して、その色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
ヒストグラムの色をピーチパフに変更する	plt.hist(データ列, color='peachpuff')
データフレームのリストカラムのNaNを平均値で補う	df[aList].fillna(df[aList].mean())
文字列をコロンで区切って、文字列リストに変換する	s.split(':')
ヒストグラムを描画してその色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
散布図を赤いクロスマーカーで描画する	plt.plot(xdata, ydata, marker='x', c='r')
破壊的に降順にデータフレームを'A'列を用いてソートする	df.sort_values(by='A', ascending=False, inplace=True)
イテラブルの各要素を双方向キューの最初に追加する	deq.extendleft(iterable)
データフレームから指定された列を抽出する	df[[column]]
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
入力ストリーム全体を行単位で分割して読む	f.readlines()
ファイルから拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
文字列を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
自然数の階乗	math.factorial(n)
トマトにヒストグラムの色を指定する	plt.hist(データ列, color='tomato')
カウンタの要素を列挙する	aCounter.keys()
赤い左三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='<', c='r')
淡いピンク色にヒストグラムの色を変更する	plt.hist(データ列, color='lightpink')
タプルの要素をソートする	sorted(aTuple)
折れ線グラフを描画して、色をピーチパフに変更する	plt.plot(データ列, データ列2, color='peachpuff')
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
双方向キューの大きさを算出する	len(deq)
折れ線グラフを描画してその色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
ヒストグラムを描画して、その色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
＜オプション＞ダークグレー色を使用する	color = 'darkgrey'
データフレームの指定されたカラムを配列として取り出す	df[column].values
データフレームのカラムを1000の位で四捨五入する	df[col].round(-3)
ファイルパスをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
２つの文字列を辞書順で比較する	s < s2
データ列とデータ列の青い淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='b')
ユニークな値を要素とするベクトル	np.unique(aArray)
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
線グラフを描画して、その色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
下三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='v')
データフレームを各カラムと列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
グラフのタイトルを指定する	plt.title(untitled)
クリムゾン色の線グラフを描画する	plt.plot(データ列, データ列2, color='crimson')
データフレームを各列と列の組み合わせ毎にグループ化して平均値を求める	df.groupby([column, column2], as_index=False).mean()
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
＜オプション＞スレートブルーに色をセットする	color = 'slateblue'
イテラブルとリストのパステル調のグラフを描画し、、その色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列, データ列2, color='dimgrey')
実数のサインの逆数を求める	math.asin(x)
リストとリストの散布図に黒いポイントマーカーを描く	plt.plot(xdata, ydata, marker='.', c='k')
JSON形式のfをデータに変換する	json.load(fin)
等量で配列をn個にビン分割する	pd.qcut(aArray, n)
折れ線グラフに大きさnの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markersize=n)
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
データフレームを列で整列し、、更新する	df.sort_values(by=column, inplace=True)
データフレームのリスト列のNaNを最小値に設定する	df[aList].fillna(df[aList].min())
NaN	math.nan
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
＜オプション＞グラフの色をライトシアンにする	color = 'lightcyan'
＜オプション＞グラフの色をスプリンググリーンに設定する	color = 'springgreen'
淡い色のマーカーとして散布図をプロットする	plt.plot(xdata, ydata, c='muted')
ヒストグラムを描画してその色をネイビーに設定する	plt.hist(データ列, color='navy')
プラットホームの名前	sys.platform
カラムのどの値が頻出か見る	ds.mode()
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列2])
リストをタプルにする	tuple(aList)
データフレームの最頻値	df.mode()
＜オプション＞ピンク色を使う	color = 'pink'
クラスが名前付きタプル	issubclass(C, tuple)
カウンタ間で交わり演算する	aCounter & aCounter2
データフレームのリストカラムの欠損値を直後の値で補う	df[aList].fillna(method='bfill')
逆双曲線余弦	math.acosh(x)
線グラフの色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
＜オプション＞グラフの色を赤に設定する	color = 'red'
リストと配列の散布図を重なりを見やすく暗い色として描く	plt.plot(xdata, ydata, c='dark', alpha=0.5)
リストと配列の散布図を描画し、、マーカーをダイアモンドに変更する	plt.plot(xdata, ydata, marker='D')
淡いの折れ線グラフをリストとリストで描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
データフレームのカラムからユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
折れ線グラフを一点鎖線に設定する	plt.plot(データ列, データ列2, linestyle='dashbot')
安全に文字列の先頭から部分文字列を除去する	s.removeprefix(sub)
＜オプション＞オリベドラブ色を使う	color = 'olivedrab'
プラットホームはWindows	sys.platform.startswith('win32')
列をビン数nでビンニングしてnamesのラベルをつける	pd.cut(ds, n, labels=names)
＜オプション＞グラフの色をスチールブルーに変更する	color = 'steelblue'
タプルに辞書の値を追加する	aDict.update(aDict2)
カラーコードの▲マーカーをリストとデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
散布図にバツマーカーを用いる	plt.plot(xdata, ydata, marker='x')
タプルの先頭を除く	aTuple[1:]
タプルをひとつ飛ばしで得る	aTuple[::2]
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
疑似乱数を得る	random.random()
折れ線グラフの色をスカイブルーにセットする	plt.plot(データ列, データ列2, color='skyblue')
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
nを16進リテラルに変換する	hex(n)
マップにキーが存在しない時、要素を追加する	aDict.setdefault(key, element)
＜オプション＞グラフの色をシャルトリューズに指定する	color = 'chartreuse'
ヒストグラムを描画して、その色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
イテラブルと配列についての散布図に赤色のポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='r')
折れ線グラフの色をバイオレットに設定する	plt.plot(データ列, データ列2, color='violet')
タプルの平均値を計算する	sum(aTuple)/len(aTuple)
本日が何年か知る	datetime.datetime.today().year
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
リストとリストについて散布図を描画し、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='r')
線グラフを描画して、その色をオールドレースに設定する	plt.plot(データ列, データ列2, color='oldlace')
リストと配列の散布図を描いて、色を濃いに設定する	plt.plot(xdata, ydata, c='deep')
折れ線グラフを描画して、その色を黄色に変更する	plt.plot(データ列, データ列2, color='yellow')
折れ線グラフを描画して、その色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
破線グラフの色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
ベクトルを列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
データフレームの列の歪度を求める	df[col].kurt()
＜オプション＞グラフの種類を実線に変更する	linestyle = 'solid'
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<')
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
＜オプション＞グラフの色をダークグリーンに設定する	color = 'darkgreen'
今日の日数を使う	datetime.datetime.today().day
文字列の色でデータ列と配列の折れ線を描画する	plt.plot(xdata, ydata, color=s)
テキストファイルファイル名がか	filename.endswith('.txt')
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
データフレームで何行、重複するか確認する	df.duplicated().sum()
文字列を最後の部分文字列で分割した時の最初の文字列を使う	s.rpartition(sub)[0]
列をキーにして２つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
データフレームを列によってまとめたグループを使う	df.groupby(column)
ライトイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightyellow')
＜オプション＞ローングリーンにグラフの色を設定する	color = 'lawngreen'
オブジェクトがリストかタプルか調べる	isinstance(obj, (list)
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
リストとリストについての散布図に黒色の右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>', c='k')
文字列中に非英数字が含まれる	any(not c.isalnum() for c in s)
暗いグラフを描画して、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
折れ線グラフを描画して、その色をスプリンググリーンにする	plt.plot(データ列, データ列2, color='springgreen')
リストとリストのパステル調のグラフを描いて、その色を青くする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
パステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
数の小数点以下を丸める	round(x)
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
文字列の右側から部分文字列を消す	s.rstrip(sub)
破線の色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
折れ線グラフの色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
ヒストグラムを濃いで描画する	plt.hist(xdata, color='deep')
折れ線グラフの色をアクアに指定する	plt.plot(データ列, データ列2, color='aqua')
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
赤いダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
小数点数が有限か調べる	math.isfinite(x)
データ列の中に文字列が含まれるか調べる	ds.isin([value])
折れ線グラフを描画して、色をディープスカイブルーに変更する	plt.plot(データ列, データ列2, color='deepskyblue')
データフレームの指定した列を抽出する	df[column]
nがn2で割り切れるか調べる	n % n2 == 0
ピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='pink')
データフレームを表示するとき表示する最大行数をnに設定する	pd.set_option('display.max_rows', n)
ヒストグラムをプロットし、、アルファをxに指定する	plt.hist(データ列, alpha=x)
ファイル全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
折れ線グラフを描画してその色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
データフレームのカラムの値を正規表現でまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
実行結果を太字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
nがセットのどれかか調べる	n in aSet
リストとリストについて濃い色の折れ線を描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
Pandasでデータ列をdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームを表示するとき、小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
凡例を最適な位置に入れる	plt.legend(loc='best')
行列の列ごとの分散	np.var(aArray, axis=0)
折れ線グラフを描画してその色をダークレッドに設定する	plt.plot(データ列, データ列2, color='darkred')
セットが空集合でない	len(aSet) != 0
データフレームのカラムの時刻	df[col].dt.hour
文字列の中でパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
＜オプション＞ミスティローズ色を使う	color = 'mistyrose'
赤色の淡いを描く	plt.plot(xdata, ydata, linestyle='muted', color='r')
リストにリストを追加して拡張する	aList.extend(aList2)
nが1、もしくは2もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
ヒストグラムを描いて、区間の数をnに変更する	plt.hist(データ列, bins=n)
折れ線グラフを描画して、その色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
データフレームの列のどの値が頻出か見る	df[col].mode()
データフレームの列の下位25%	df[col].quantile(0.75)
文字列を特殊文字も含め小文字にする	s.casefold()
ヒストグラムを描画して、その色をライトゴールドロディイエローに変更する	plt.hist(データ列, color='lightgoldenrodyellow')
折れ線グラフを描画して、色を青くする	plt.plot(データ列, データ列2, color='b')
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
線グラフの色をライトサーモンに指定する	plt.plot(データ列, データ列2, color='lightsalmon')
二進文字列を整数に変換する	int(s, 2)
Pandasで文字列のUNIX秒からタイムスタンプに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームのカラムの中にいくつ文字列が含まれるか数える	df[col].isin([value]).sum()
配列とリストの折れ線グラフを文字列の色で描画する	plt.plot(xdata, ydata, color=s)
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
オブジェクトがプロパティを持つ	hasattr(obj, プロパティ名)
文字列を部分文字列で二分し、最初の文字列を見る	s.partition(sub)[0]
文字列を表示する	print(value)
文字列内にひとつでもアスキー文字があるか	any(c.isascii() for c in s)
データフレームの指定された列をリストに変換する	df[column].values.tolist()
疑似乱数を正規分布で生成する	random.normalvariate(mu=0.5, sigma=0.2)
線グラフの色を白に指定する	plt.plot(データ列, データ列2, color='white')
整数nを八進表現に変換する	oct(n)
スラグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slategray')
ヒストグラムを描画して、その色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
行列の和	aArray + aArray2
両端キューの先頭に要素を追加する	deq.appendleft(element)
線グラフの色を貝殻にセットする	plt.plot(データ列, データ列2, color='seashell')
文字列を二分する	s.partition(sep)
リストとリストの色差別ないグラフを描き、、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
折れ線グラフの上三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
折れ線グラフの菱形印を黄色くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
ファイルからファイル名を使う	os.path.basename(filepath)
nがn2より小さいかテストする	n < n2
文字列の末尾からタブを取り除く	s.rstrip('\t')
実数を実数で割った剰余	math.remainder(x, x2)
ピアソンでデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
空白によって文字列を区切り、、整数リストに変換する	map(int, s.split())
データ列を横軸と指定して、折れ線グラフをプロットする	plt.plot(range(len(xdata)), xdata)
＜オプション＞マーカーをバツに変更する	marker = 'x'
列名リストによってデータフレームを並べ直して、更新する	df.sort_values(by=column, inplace=True)
折れ線グラフにサイズnの上三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
データフレームから列を二つのみ選択する	df[[column, column2]]
ファイルパスを絶対ファイルパスにする	os.path.abspath(filepath)
折れ線グラフを点線で描画する	plt.plot(データ列, データ列2, linestyle='dotted')
nが偶数か確認する	n % 2 == 0
データ列を等しい量になるようにビン数nとしてビン分割する	pd.qcut(ds, n)
データ列の未入力値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
折れ線グラフを描画して、その色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
折れ線グラフの左三角マーカーの線幅をnにする	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
イテラブルと数列でパステル調のの折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
辞書をJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
シーケンスから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
線グラフの色をダークグレーに指定する	plt.plot(データ列, データ列2, color='darkgray')
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
データフレームの欠損値を最頻値で置換する	df.fillna(df.mode().iloc[0])
異なる列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
データフレームから列を一つ選択する	df[[column]]
カラーパレットを濃くする	sns.set(pallete='deep')
JSONファイルのfをデータに変換する	json.load(fin)
nが無限に続くリスト	itertools.repeat(n)
折れ線グラフに黄色い四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
集合をイミュータブルにする	frozenset(aSet)
＜オプション＞グラフの色を青に設定する	color = 'blue'
折れ線グラフに下三角印を加える	plt.plot(データ列, データ列2, marker='v')
データフレームを関数の値によってグループ化する	df.groupby(関数)
オブジェクトがタプルの要素か調べる	element in aTuple
折れ線グラフの色を淡いピンク色に指定する	plt.plot(データ列, データ列2, color='lightpink')
散布図を黒色の四角マーカーで描画する	plt.plot(xdata, ydata, marker='s', c='k')
配列をn個にビンニングし、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
リストを緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
標準入力から1文字分読む	sys.stdin.read(1)
後の値でデータフレームのリストカラムのNaNを補う	df[aList].fillna(method='bfill')
＜オプション＞グラフの色を茶色に設定する	color = 'brown'
＜オプション＞ダークスレートブルー色を用いる	color = 'darkslateblue'
標準出力の出力先がターミナルか確認する	os.isatty(sys.stdin.fileno())
日付データが水曜日	aDate.weekday() == 2
二変数の最小値	min(x, y)
浮動小数点数の正接を求める	math.tan(x)
赤い星印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
ヒストグラムを描画して色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
明るい色の柱状図で配列をプロットする	plt.hist(xdata, color='bright')
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
nにn2を加える	n + n2
文字列内に小文字が含まれるか確認する	any(c.islower() for c in s)
シーケンスと列の直積	itertools.product(iterable, iterable2)
データフレームの列の文字列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
データ列の欠損値を第二四分位数に設定する	ds.fillna(ds.median())
列からひとつランダムに選ぶ	random.choice(iterable)
＜オプション＞ピーチパフにグラフの色を設定する	color = 'peachpuff'
色差別ないの色を青くする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
オプションで、ファイルを使う	file = sys.open(filename, 'w')
文字列は全て数値	s.isnumeric()
２つのカラムを並べて箱ひげ図にする	plt.boxplot([df[column], df[column2]])
数値をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
散布図にカラーコードの上三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c=rgb)
リストとリストについての散布図に菱形マーカーを描く	plt.plot(xdata, ydata, marker='D')
折れ線グラフを描画して、その色をサーモンに変更する	plt.plot(データ列, データ列2, color='salmon')
折れ線グラフを描画してその色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
明るい色でデータ列と配列の散布図を描画する	plt.plot(xdata, ydata, c='bright')
折れ線グラフを描画してその色をドジャーブルーに指定する	plt.plot(データ列, データ列2, color='dodgerblue')
ヒストグラムを描画して、色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
文字列の開始位置からと終了位置の間に部分文字列があるか	s.find(sub, start, end) != -1
現在の日付	datetime.date.today()
データフレームから重複を削除する	df.drop_duplicates()
ヒストグラムを描画して、その色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
列からユニークな値を抽出し、リスト化する	ds.unique().tolist()
パステル調の色としてリストとリストについての散布図を描画する	plt.plot(xdata, ydata, c='pastel')
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
枠なしの凡例を表示する	plt.legend(frameon=False)
暗いの線幅をnに指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
インディアンレッドにヒストグラムの色を設定する	plt.hist(データ列, color='indianred')
リストを配列に変換する	np.array(aList)
ベクトルのユニークな要素を求める	np.unique(aArray)
データフレームの中の列をビン数nとして分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
'A'列と'B'列で昇順にデータフレームを並べて、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
自然数個のものからk個取り出したときの並べ方	math.perm(n, k)
グラフの色をpalleteNameで指定する	sns.set(pallete=palleteName)
＜オプション＞オレンジレッドにグラフの色を変更する	color = 'orangered'
リストとリストの淡いグラフを描画して、色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
ファイルパスが存在するか調べる	os.path.exists(filepath)
破線に折れ線グラフのスタイルを変更する	plt.plot(データ列, データ列2, linestyle='dashed')
プロットにデータラベルを表示する	plt.legend()
＜オプション＞ダークバイオレット色を使用する	color = 'darkviolet'
散布図を赤い上三角マーカーでプロットする	plt.plot(xdata, ydata, marker='^', c='r')
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
ファイルのディレクトリ名	os.path.dirname(filepath)
nからn2までのstepごとによるスライス	slice(n, n2, step)
列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
パレットを暗くする	sns.set(pallete='dark')
現在が何曜日か知る	datetime.datetime.today().weekday()
折れ線グラフを描画して、その色をゲインズボロにセットする	plt.plot(データ列, データ列2, color='gainsboro')
実数を実数で割った余り	x % y
文字を文字コードに変換する	ord(ch)
日付データは日付データより後ろかどうか調べる	aDate > aDate2
二つのデータフレームを列'A'と列'B'をキーにして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
パターンに文字列の先頭で複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
データ列と配列についてリストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
折れ線グラフを描画して、その色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
双方向キューの要素をn個分左にローテンションする	deq.rotate(-n)
両端キューをデキューする	deq.popleft()
変数がマイナス無限大に近づくとき、数値の極限値を求める	sympy.limit(e, z, -oo)
データ列を百の位で丸める	ds.round(-2)
タプルの長さ	len(aTuple)
リストをx軸にして折れ線をプロットする	plt.plot(range(len(xdata)), xdata)
リストとリストの散布図を描画し、、丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
nまでの奇整数列	list(range(1, n, 2))
文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフを実線で描画する	plt.plot(データ列, データ列2, linestyle='solid')
リストとリストとして色差別ないの折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
シーケンスにイテラブルを続ける	itertools.chain(iterable, iterable2)
折れ線グラフを描画して、その色を白に設定する	plt.plot(データ列, データ列2, color='white')
ヒストグラムを描画して、色をロージーブラウンに指定する	plt.hist(データ列, color='rosybrown')
数列についての柱状図を淡い色を用いて描画する	plt.hist(xdata, color='muted')
データフレームのリストカラムの文字列を未入力値に変換する	df[aList].replace(s, np.nan)
配列とリストについて散布図を描画し、、マーカーを▼に設定する	plt.plot(xdata, ydata, marker='v')
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
＜オプション＞グラフの色をホワイトに変更する	color = 'white'
ターコイズにヒストグラムの色を変更する	plt.hist(データ列, color='turquoise')
文字列をコロンで分割して、列挙する	s.split(':')
nがn2未満またはn3以上か調べる	n < n2 or n >= n3
整数nが配列のどれかかどうか調べる	n in aArray
データフレームの値はNaNかどうか調べる	df.isna()
システム時刻で乱数を初期化する	random.seed()
双方向キューの右側	deq[-1]
整数nがセットのどれかか調べる	n in aSet
標準出力をフラッシュする	sys.stdout.flush()
グラフに補足を入れる	plt.legend()
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
nとn2のビット和を求める	n | n2
グラフを描画する	from sympy import N
ヒストグラムを描画して、その色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
柱状グラフをプロットする	plt.hist(データ列)
ヒストグラムを描画して、その色をタンに設定する	plt.hist(データ列, color='tan')
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
線グラフの色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
折れ線グラフを描画して、その色をグリーンイエローにセットする	plt.plot(データ列, データ列2, color='greenyellow')
昇順にデータフレームを'A'列によって整列する	df.sort_values(by='A', ascending=True)
データフレームのリスト列の基本統計量	df[aList].describe()
Pandasで、数値時刻のデータフレームのcollからタイムスタンプ型にする	pd.to_datetime(df[col], unit='s', utc=True)
パステル調の色のマーカーを使って散布図を重なりを見やすくプロットする	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
ふたつの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
改行する	print()
黒色の暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
コマンドの第一引数	sys.argv[1]
数列と配列についてカラーコードの色差別ないを描く	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
折れ線グラフを描画して、その色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
折れ線グラフを描画して、色を黄色くする	plt.plot(データ列, データ列2, color='y')
濃いシアン色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='darkcyan')
データフレームの列の名前を付け直す	df.rename(columns={column: name})
ヒストグラムの色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
文字列を最後の部分文字列で分割したときの後半の文字列	s.rpartition(sub)[-1]
折れ線グラフを描画して、色を淡い茶色にする	plt.plot(データ列, データ列2, color='tan')
浮動小数点数を実数で割って、切り捨てる	x // y
データフレームのカラムが何分か見る	df[col].dt.minute
折れ線グラフにラベルを付ける	plt.plot(xdata, ydata, label=untitled)
ロージーブラウンにヒストグラムの色をする	plt.hist(データ列, color='rosybrown')
データフレームのカラムの名前一覧で指定された列を削除する	df.drop(columns, axis=1)
折れ線グラフを描画して、その色を珊瑚に設定する	plt.plot(データ列, データ列2, color='coral')
黒い四角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='s', c='k')
リストとリストの黒い濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='k')
横棒を描き、中央寄せする	plt.barh(ラベル列, データ列, align='center')
文字列が片仮名か	('ァ' <= ch <= 'ン')
線グラフを描画して、その色をカーキに変更する	plt.plot(データ列, データ列2, color='khaki')
横棒グラフを描画して、グラフ幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
リストと配列の散布図に赤い左三角マーカーを描く	plt.plot(xdata, ydata, marker='<', c='r')
データフレームのリスト列のNaNを直後の値にセットする	df[aList].fillna(method='bfill')
今日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
明るい色で重なりを見やすくイテラブルとリストについての散布図を描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
ヒストグラムを描画する	plt.hist(データ列)
データフレームのリストカラムを10の位で四捨五入する	df[aList].round(-1)
＜オプション＞グラフの色をコーラルに設定する	color = 'coral'
数列とリストについての散布図を暗い色で描く	plt.plot(xdata, ydata, c='dark')
カラムの欠損値を最大値に変更する	ds.fillna(ds.max())
折れ線グラフの透明度をalphaに指定する	plt.plot(xdata, ydata, alpha=alpha)
＜オプション＞カンマを分割記号で使う	sep = ','
タイムスタンプデータの時刻を使う	aDatetime.hour
ライトゴールドロディイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightgoldenrodyellow')
最大値・最小値で整数乱数を得る	random.randint(最小値, 最大値)
データフレームのリストカラムの標本標準偏差	df[aList].std()
両端キューの要素をインプレースに反転する	deq.reverse()
グラフに水平方向の点線を設定する	plt.axhline(y=0, linestyle='dotted')
ヒストグラムを描画して、その色を耐火レンガに指定する	plt.hist(データ列, color='firebrick')
グラフの色をパステル調にする	sns.set(pallete='pastel')
データフレームの列を十の位で丸めて、整数にする	df[col].round(-1).astype(int)
両端キューに要素をプッシュする	deq.append(element)
データフレームを2つの列によって昇順にソートし、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
デックをデキューする	deq.popleft()
プロットの目的をスライドに設定する	sns.set(context='talk')
日付時刻データの時間数	aDatetime.hour
行列の行ごとの合計値	np.sum(aArray, axis=1)
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
ふたつの集合のいずれか一方だけの集合を算出する	aSet.symmetric_difference(aSet2)
折れ線グラフを描画して、その色をミディアムスレートブルーにセットする	plt.plot(データ列, データ列2, color='mediumslateblue')
データ列とリストの青い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
ヒストグラムを描画してその色をブラウンに設定する	plt.hist(データ列, color='brown')
行列のユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
オブジェクトはあるクラスのインスタンス	isinstance(obj, クラス)
タプルが少なくともひとつ真か	any(aTuple)
＜オプション＞ライトスチールブルーにグラフの色を指定する	color = 'lightsteelblue'
データフレームを列名リストによってを用いて破壊的に整列する	df.sort_values(by=column, inplace=True)
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
破壊的にデータフレームを昇順に'A'列によって整列する	df.sort_values(by='A', ascending=True, inplace=True)
線グラフを描画して、その色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
商と余りを同時に計算する	divmod(x, y)
折れ線グラフに星マーカーを用いる	plt.plot(データ列, データ列2, marker='*')
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
TSVファイルからSJISでCSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
散布図に星マーカーを使う	plt.plot(xdata, ydata, marker='*')
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
三自然数の最大公約数	math.gcd(n, n2, n3)
＜オプション＞グラフの色をダークバイオレットに設定する	color = 'darkviolet'
散布図に▲マーカーを用いる	plt.plot(xdata, ydata, marker='^')
ヒストグラムを描画して、その色をネイビーに設定する	plt.hist(データ列, color='navy')
線グラフを描画して色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
線グラフを描画して、その色をホットピンクに指定する	plt.plot(データ列, データ列2, color='hotpink')
ヒストグラムの色をフローラルホワイトに変更する	plt.hist(データ列, color='floralwhite')
線グラフを描画して、その色をディムグレーに指定する	plt.plot(データ列, データ列2, color='dimgray')
リストとリストについて散布図を描き、、マーカーを▽に設定する	plt.plot(xdata, ydata, marker='v')
2を底とする浮動小数点数の対数を求める	math.log2(x)
＜オプション＞印を下三角に変更する	marker = 'v'
Pandasでデータフレームのcollを書式で日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
折れ線グラフを描画して、その色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
データ列の未入力値を平均値に指定する	ds.fillna(ds.mean())
下線付きで変数をプリントする	print(f'\033[4m{value}\033[0m')
折れ線グラフのバツ印を赤くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
データフレームを列でグループ化して列の要約統計量を算出する	df.groupby(column).describe()[column2]
データフレームのカラムの最頻値を求める	df[col].mode()
データフレームのカラムを100の位で丸める	df[col].round(-2)
ファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
淡い色のマーカーを用いて散布図を描く	plt.plot(xdata, ydata, c='muted')
カーキ色の線グラフを描画する	plt.plot(データ列, データ列2, color='khaki')
暗いを用いてイテラブルについての柱状図を描画する	plt.hist(xdata, color='dark')
行列の列ごとの最小	np.min(aArray, axis=0)
第二コマンド引数を知る	sys.argv[1]
＜オプション＞スラッシュをセパレータで使う	sep = '/'
カラムの中にがあるか	ds.isin([value])
データフレームのリストカラムの中に文字列が含まれるか調べる	df[aList].isin([value])
線グラフを描画してその色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
データフレームのリスト列の欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
部分文字列が文字列中に存在しない	sub not in s
散布図に赤い▽マーカーを用いる	plt.plot(xdata, ydata, marker='v', c='r')
ヒストグラムを描画して、色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
＜オプション＞マーカーを丸に変更する	marker = 'o'
折れ線グラフに大きさnのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
折れ線グラフを描画して、色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
横棒の色をカラーコードに設定する	plt.barh(ラベル列, データ列, color=rgb)
nが負の数かどうか調べる	n < 0
デックが空でないか調べる	len(deq) != 0
濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
行列のデータ型	aArray.dtype()
データフレームの列の欠損値を平均値で埋める	df[col].fillna(df[col].mean())
ヒストグラムを描画して、その色をダークグレーに指定する	plt.hist(データ列, color='darkgray')
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
＜オプション＞グラフの色をミディアムシアグリーンにセットする	color = 'mediumseagreen'
リストとリストについて散布図を描画する	plt.scatter(xdata, ydata)
ヒストグラムを描画して、その色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
タプルのn番目以降の部分を抽出する	aTuple[n:]
ヒストグラムを描画して、色をグレーに設定する	plt.hist(データ列, color='gray')
＜オプション＞紺碧にグラフの色を設定する	color = 'azure'
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
列によって破壊的にデータフレームを大きい順に並べる	df.sort_values(by=column, ascending=False, inplace=True)
文字列が平仮名	('ぁ' <= ch <= 'ん')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
＜オプション＞イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
ヒストグラムを描画して、その色をオリーブに変更する	plt.hist(データ列, color='olive')
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
＜オプション＞カラムの名前を自動的な連番に設定する	header = None
イテラブル自身を2回あわせた直積	itertools.product(iterable, repeat=2)
＜オプション＞読み込みモードに設定する	mode = 'r'
原点から(小数点数,y)の距離	math.hypot(x, y)
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
タプルの先頭を求める	aTuple[0]
イテラブルとイテラブルをチェインする	itertools.chain(iterable, iterable2)
ヒストグラムの色をゴーストホワイトに指定する	plt.hist(データ列, color='ghostwhite')
データフレームをCSVファイルでJSONLファイルに書き込む	df.to_csv(filename)
UTF8を使ってファイルパスをオープンする]	open(filepath, encoding='utf-8')
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
データフレームのNaNを平均値に指定する	df.fillna(df.mean())
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
二つのカウンタの共通する要素	aCounter & aCounter2
＜オプション＞グレー色を使う	color = 'grey'
リストの文字列が最初に見つかるインデックス	aList.index(element)
startからendまでの範囲で柱状図をプロットする	plt.hist(データ列, range=(start, end))
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
ベクトルの行ごとの平均値	np.mean(aArray, axis=1)
データフレームの列を消し、、入れ替える	df.drop(column, axis=1, inplace=True)
暗いの色を赤にする	plt.plot(xdata, ydata, linestyle='dark', color='r')
ヒストグラムを描画して、その色をプラムに変更する	plt.hist(データ列, color='plum')
日付時刻データが月曜日か	aDatetime.weekday() == 0
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
散布図にカラーコードのポイントマーカーを用いる	plt.plot(xdata, ydata, marker='.', c=rgb)
ミッドナイトブルーにヒストグラムの色を変更する	plt.hist(データ列, color='midnightblue')
オブジェクトが集合型かどうか調べる	isinstance(obj, set)
折れ線グラフのマーカーを下三角にする	plt.plot(データ列, データ列2, marker='v')
タプルのn番目以降の要素を取り出す	aTuple[n:]
線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
ASCII限定としてパターンに文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
文字列を区切り記号で分割して列挙する	s.split(sep)
カウンタの文字列をひとつ増やす	aCounter[element] += 1
データフレームの列がxより大きくx2より少ないデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
データフレームの列で文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
データフレームのカラムの中の未入力値の合計をカウントする	df[col].isna().sum()
標準出力を得る	sys.stdout
双方向キュー中の要素の位置	deq.index(element)
青色の線グラフを描画する	plt.plot(データ列, データ列2, color='blue')
部分文字列が部分文字列で始まるかどうか調べる	s.startswith(sub)
＜オプション＞色をアリスブルーに変更する	color = 'aliceblue'
線グラフの色をブランチドアーモンドに指定する	plt.plot(データ列, データ列2, color='blanchedalmond')
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
符号付きで整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
ヒストグラムを描画してその色をダーク・スラテグレーに指定する	plt.hist(データ列, color='darkslategrey')
リストと配列の破線グラフを描いて、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
変数が0に近づく時数式の極限値を求める	sympy.limit(e, z, 0)
折れ線グラフの色をライトスレイグレーにセットする	plt.plot(データ列, データ列2, color='lightslategrey')
列'A'と列'B'をキーとして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
nがn2よりも大きいかどうか	n > n2
nが3で割り切れるか調べる	n % 3 == 0
散布図に黒い下三角マーカーを用いる	plt.plot(xdata, ydata, marker='v', c='k')
カウンタを高頻出方から列挙する	aCounter.most_common()
ヒストグラムを描画して、その色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
線グラフを描画して、色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
データフレームの列の一意な要素を見る	df[col].unique()
データ列の第二四分位数	ds.median()
オブジェクトをユーザ向けの文字列に変換する	str(obj)
折れ線グラフのマーカーをクロス印にする	plt.plot(データ列, データ列2, marker='x')
カウンタをクリアする	aCounter.clear()
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
実行結果を白色にする	f'\033[37m{value}\033[0m'
日付データからn分減らす	aDate - datetime.timedelta(minutes=n)
ヒストグラムを描画して、その色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
データフレームの列がxの行を抽出する	df[df[column] == x]
二つの数値を文字列で区切って表示する	print(value, value2, sep=s)
列の名前の一覧を見る	df.columns
カラムのNaNを直後の値に設定する	ds.fillna(method='bfill')
データ列は正規分布からどの程度尖っているか見る	ds.skew()
文字列内にひとつでも空白が含まれるかどうか調べる	any(c.isspace() for c in s)
タイムスタンプデータが日曜日か調べる	aDatetime.weekday() == 6
線グラフを描画して、その色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
二つの関係が真部分集合か調べる	aSet < aSet2
＜オプション＞色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
リストとリストのカラーコードのパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
数列とリストの折れ線をプロットし、、色を文字列に設定する	plt.plot(xdata, ydata, color=s)
ベクトルの要素ごとの積	np.multiply(aArray, aArray2)
＜オプション＞ライトサーモン色を使う	color = 'lightsalmon'
nがリストのひとつかどうか調べる	n in aList
折れ線グラフのダイアモンドマーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
列によって表データを並べ直し、、新しいインデックスを加える	df.sort_values(columns).reset_index()
データフレームのそれぞれのグループ毎の分散を求める	df.groupby(column).var()
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
赤い淡いの折れ線グラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='r')
色差別ない色の折れ線をプロットして、その線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
ヒストグラムを描画して、その色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
＜オプション＞グラフの色をダークグレーに設定する	color = 'darkgray'
列から両端キューを作る	collections.deque(iterable)
数式の因数分解を行う	sympy.factor(e)
部分文字列	sub in s
折れ線グラフの左三角マーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
シエナ色の線グラフを描画する	plt.plot(データ列, データ列2, color='sienna')
実数を実数に加算する	x + y
第2コマンド引数	sys.argv[1]
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
濃いの色を赤にする	plt.plot(xdata, ydata, linestyle='deep', color='r')
タブ区切りのファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
ヒストグラムを描画して、その色をオーキッドに設定する	plt.hist(データ列, color='orchid')
データ列の中にある文字列と日付データの合計を求める	ds.isin([value, value2]).sum()
リストにリストを展開する	aList.extend(aList2)
ヒストグラムを描画して、その色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
折れ線グラフの色をコーンフラワーブルーに指定する	plt.plot(データ列, データ列2, color='cornflowerblue')
双方向キューのn番目を見る	deq[n]
箱ひげ図を二つ並べて描く	plt.boxplot([データ列, データ列2])
グラフで用いるタイトルを設定する	plt.title(untitled)
ファイル全体を行ごとに分割してリストに変換する	[s.strip() for s in f.readlines()]
データフレームを表示するとき、カラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
ダーク・スラテグレーにヒストグラムの色を変更する	plt.hist(データ列, color='darkslategrey')
＜オプション＞フローラルホワイト色を使う	color = 'floralwhite'
プログラムの実行を正しく終える	sys.exit(0)
＜オプション＞セパレータを使わない	sep = ''
明るいでヒストグラムを描画する	plt.hist(xdata, color='bright')
エクセルデータファイルからn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
データ列の欠損値をxで埋める	ds.fillna(x)
データ列のNaNを直前の値で埋める	ds.fillna(method='ffill')
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
ヒストグラムを描画して、その色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
マッピングからキーの値か、もしくは要素を見る	aDict.get(key, element)
＜オプション＞区切りをスラッシュにする	sep = '/'
折れ線グラフの大バツマーカーを黄色くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
折れ線グラフを描画して、その色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
データフレームを表示するとき、ヘッダー行を右寄せに変更する	pd.set_option('colheader_justify', 'right')
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
データフレームのリストカラムは正規分布からどの程度、尖っているか見る	df[aList].skew()
データ列とリストについての散布図に下三角マーカーを描く	plt.plot(xdata, ydata, marker='v')
リストとリストの散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
スピアマン相関係数を使ってデータフレームの相関行列	df.corr(method='spearman')
線グラフの色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
カラーコードの丸マーカーを散布図に使う	plt.plot(xdata, ydata, marker='o', c=rgb)
ヒストグラムを描画して、その色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
折れ線グラフの色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
折れ線グラフの印を四角にする	plt.plot(データ列, データ列2, marker='s')
＜オプション＞サドルブラウン色を使う	color = 'saddlebrown'
最大値・最小値の範囲で一様な疑似乱数を得る	random.uniform(最小値, 最大値)
nの無限な数列を得る	itertools.repeat(n)
データフレームを関数の値でグループ化する	df.groupby(関数)
イテラブルのイミュータブルな集合	frozenset(iterable)
イテラブルとデータ列について散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
nが-9以上、9以下か	-9 <= n <= 9
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
散布図に四角マーカーを使う	plt.plot(xdata, ydata, marker='s')
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
折れ線グラフを描画して、その色をダークグリーンに設定する	plt.plot(データ列, データ列2, color='darkgreen')
回数を制限して新しい文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub, n)
リストとリストについて破線グラフを描画して、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
方程式として数式の変数の解を算出する	sympy.solve(e, z)
ベクトルの行列積を計算する	np.matmul(aArray, aArray2)
ハニーデュー色の線グラフを描画する	plt.plot(データ列, データ列2, color='honeydew')
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
パステル調のグラフをリストとデータ列としてプロットして線幅をnに指定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
データフレームをグループ化し各列に対し最大値を求める	df.groupby(column)[column2].max()
文字列にシーケンスを変換して、タブで連結する	'\t'.join(map(str, iterable))
'A'列によって昇順にデータフレームを破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
文字列を区切りで区切る	s.split(sub)
ディレクトリ	os.getcwd()
ファイルが存在するか調べる	os.path.exists(filepath)
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
ファイルを文字コードtextとして開く]	open(filepath, encoding=text)
全要素を０で初期化された３二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
FIXME:カテゴリーデータを出現頻度順に並べ直す	df['A'].value_counts().sort_index().index
リストとイテラブルについての散布図に赤い星マーカーを描く	plt.plot(xdata, ydata, marker='*', c='r')
＜オプション＞グラフの色をピーチパフに設定する	color = 'peachpuff'
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
データフレームのn行目を取り出す	df.loc[n]
淡いグラフをイテラブルとリストとして描画して線幅をnに指定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
折れ線グラフを描画して色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
ファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
文字列内に英数字が含まれるかどうか	any(c.isalnum() for c in s)
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
ファイルからファイル名を取り出す	os.path.basename(filepath)
nとn2の和	n + n2
表データを'A'列で昇順に並べ直し、更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightgreen')
ヒストグラムを描画して、その色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
プロットの凡例の場所を(x,y)に設定する	plt.legend(loc=(x, y))
nが偶数かどうか	n % 2 == 0
ゲインズボロ色の線グラフを描画する	plt.plot(データ列, データ列2, color='gainsboro')
ビンをnに設定して度数分布図を描画する	plt.hist(データ列, bins=n)
データフレームの列の値がxでない行をフィルタする	df[df[column] == x]
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
配列とリストについて破線グラフを描いて、その色を色差別ないに変更する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
カウンタからゼロカウントを取り除く	+aCounter
＜オプション＞色をオールドレースにセットする	color = 'oldlace'
ヒストグラムを描画して、その色を青緑に設定する	plt.hist(データ列, color='teal')
オブジェクトはリストクラスか調べる	isinstance(obj, list)
＜オプション＞バツマーカーを描画する	marker = 'x'
日付時刻データをタプルにする	aDatetime.timetuple()
黄色いバツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
startからendの区間のヒストグラムを用いて配列を描画する	plt.hist(データ列, range=(start, end))
文字列をファイルに書き込む	f.write(s)
＜オプション＞ライトスチールブルーにグラフの色を設定する	color = 'lightsteelblue'
両端キューが空でない	len(deq) != 0
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
＜オプション＞グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
データフレームのカラムを正規表現でまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
ヒストグラムの色をライトブルーに変更する	plt.hist(データ列, color='lightblue')
行列の差	aArray - aArray2
＜オプション＞エラーがあるとき、例外を発生させる	errors = 'strict'
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(xdata, ydata, marker='v')
折れ線グラフを描画して、色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
ヒストグラムを描画してその色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
＜オプション＞パレットトルコイズ色を使う	color = 'paleturquoise'
ヒストグラムを描画してその色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
クラス名が名前付きタプルか調べる	issubclass(C, tuple)
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
＜オプション＞オレンジレッド色を使用する	color = 'orangered'
オブジェクトのメモリビューを使う	memoryview(obj)
文字列がリストに含まれるか調べる	element in aList
色差別ないグラフを配列とリストで描画して線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
二つの数値をカンマで区切ってプリントする	print(value, value2, sep=',')
配列を変形する	aArray.reshape(行数, 列数)
黒色の丸マーカーを数列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='o', c='k')
データフレームを表示するとき折り返しをオフに指定する	pd.set_option('expand_frame_repr', False)
赤い左三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='<', c='r')
データフレームのカラムの中に日付データと日付データがいくつ存在するかカウントする	df[col].isin([value, value2]).sum()
折れ線グラフの▼マーカーを黒色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
データ列についてのヒストグラムを濃い色として描く	plt.hist(xdata, color='deep')
折れ線グラフの四角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
折れ線の透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
グリーンにヒストグラムの色を指定する	plt.hist(データ列, color='green')
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightskyblue')
イテラブルをいつまでも繰り返す	itertools.cycle(iterable)
＜オプション＞マーカーを上三角に変更する	marker = '^'
ヒストグラムを描画して、色をアクアマリンに変更する	plt.hist(データ列, color='aquamarine')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
nが2で割り切れるか調べる	n % 2 == 0
ファイルがないかどうか調べる	not os.path.exists(filepath)
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
単位正方行列を作る	np.identity(N)
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
JSON文字列をデータに変換する	json.loads(jsonString)
実数の正弦	math.sin(x)
ヒストグラムの色をシエナにセットする	plt.hist(データ列, color='sienna')
＜オプション＞耐火レンガに色を設定する	color = 'firebrick'
ヒストグラムを描画してその色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
実線グラフを描画する	plt.plot(データ列, データ列2, linestyle='solid')
文字列中の文字を列挙する	list(s)
データフレームの列がx、かつ列がx2である行を取り出す	df[(df[column] == x) & (df[column2] == x2)]
タイムスタンプデータが火曜日か調べる	aDatetime.weekday() == 1
文字列が部分文字列で終わるかどうか判定する	s.endswith(sub)
リストをn回、連結する	aList * n
日付データの日数	aDate.day
データフレームのそれぞれのグループ毎の平均値	df.groupby(column).mean()
折れ線グラフの大バツマーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='X', markersize=n)
nをn2分の一にする	n /= n2
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
ヒストグラムを描画して、色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
データフレームの列の各データ値の出現数	df[col].value_counts()
入力ストリームから1バイト、読み込む	f.read(1)
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='paleturquoise')
折れ線グラフを描画して、色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
日付時刻データがタイムスタンプデータより後ろ	aDatetime > aDatetime2
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
＜オプション＞SJISを使う	encoding = 'shift_jis'
数値を簡単化する	sympy.sympify(e)
折れ線グラフの色を青に設定する	plt.plot(データ列, データ列2, color='blue')
＜オプション＞ダークスラテグレー色を使用する	color = 'darkslategray'
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
リストの中の一番小さい値	min(aList)
明るいの折れ線を描画し、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
＜オプション＞ミディアムバイオレットレッド色を使用する	color = 'mediumvioletred'
データフレームをJSONLファイルに保存する	df.to_csv(filename)
マップにキーワード引数で更新する	aDict.update(**kwargs)
データフレームを各列毎にグループ化し、、列の個数を求める	df.groupby(column)[column2].count()
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
ヒストグラムを描画して、その色をシエナに設定する	plt.hist(データ列, color='sienna')
ビンの数nのヒストグラムをプロットする	plt.hist(データ列, bins=n)
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
データフレームがどの程度、分散しているか見る	df.var()
折れ線グラフを描画してその色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
線グラフを描画して、その色をミディアムシアグリーンにする	plt.plot(データ列, データ列2, color='mediumseagreen')
n個に等量で列をビニングする	pd.qcut(ds, n)
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
線グラフを描画して、その色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
データフレームを各列と列の組み合わせ毎にグループ化し、、標準偏差を算出する	df.groupby([column, column2], as_index=False).std()
リストとリストについて破線グラフを描画し、その色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
n2がnより大きくかつ、n3未満	n < n2 and n2 < n3
綺麗なプロットを使う準備をする	import seaborn as sns
データ列を中央値でビン分割する	pd.qcut(ds, 2)
リストと配列を使って折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
３二ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int16)
デックの中に文字列があるか調べる	element in deq
xとyの商と余りを同時に求める	divmod(x, y)
折れ線グラフに描画してマーカーを丸印にする	plt.plot(データ列, データ列2, marker='o')
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
＜オプション＞ミディアムオーキッドに色をセットする	color = 'mediumorchid'
シーケンスの長さを制限する	collections.deque(iterable, maxlen=n)
赤色の左三角マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='<', c='r')
＜オプション＞オレンジレッド色を使う	color = 'orangered'
リストをx軸と指定して、折れ線グラフを描画する	plt.plot(range(len(xdata)), xdata)
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
ヒストグラムを描画して、その色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
＜オプション＞濃い青を用いる	color = 'darkblue'
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
実数を切り上げる	math.ceil(x)
文字列の中の複数行対応としてパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
折れ線グラフを描画して色をティールに設定する	plt.plot(データ列, データ列2, color='teal')
カレントワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
ヒストグラムを描画して、その色を紺に指定する	plt.hist(データ列, color='darkblue')
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()
ヒストグラムの色をアクアに指定する	plt.hist(データ列, color='aqua')
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
黒いポイントマーカーを散布図に使う	plt.plot(xdata, ydata, marker='.', c='k')
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
折れ線グラフの大バツ印を黒くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
データフレームのリストカラムの値は欠損値か	df[aList].isna()
ヒストグラムを実線に指定する	plt.hist(データ列, linestyle='solid')
Pythonのバージョン	sys.version
配列のユニークな値を要素とする配列を使う	np.unique(aArray)
エクセルファイルをエクセルデータファイルから読む	pd.read_excel(filename)
データフレームのカラムの値が欠損値か調べる	df[col].isna()
マッピングの値を列挙する	aDict.values()
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
＜オプション＞青緑にグラフの色を設定する	color = 'turquoise'
＜オプション＞コーラル色を使う	color = 'coral'
大バツマーカーを用いて散布図をプロットする	plt.plot(xdata, ydata, marker='X')
n番目のシートをエクセルファイルファイルの読み込む	pd.read_excel(filename, sheet_name=n)
イテラブルを配列に変換する	np.array(iterable)
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
折れ線グラフに緑色の左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
＜オプション＞色をライトコーラルに設定する	color = 'lightcoral'
透明度alphaの折れ線を描く	plt.plot(xdata, ydata, alpha=alpha)
折れ線グラフを描画して、色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
＜オプション＞namesをカラム名に設定する	names = names
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
データフレームを表示するとき、表示する最大列数を変更する	pd.set_option('display.max_columns', n)
キーで指定されたエントリをマッピングからポップする	aDict.pop(key)
＜オプション＞ディムグレーを用いる	color = 'dimgrey'
線グラフを描画してその色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
データフレームのリストカラムのpercentパーセンタイル	df[aList].quantile(percent/100)
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
列のコンビネーションを得る	itertools.combinations(iterable, n)
nの八進数表現	oct(n)
列の名前の一覧	df.columns
変数を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
黒い星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c='k')
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
カラーコードの星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
折れ線グラフに緑色の下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
濃い色で配列についての柱状図を描画する	plt.hist(xdata, color='deep')
散布図にカラーコードの大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c=rgb)
二つの文字列は等しくないか調べる	s != s2
文字列を最後の部分文字列で二つに区切って、前半の文字列を使う	s.rpartition(sub)[0]
小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
データフレームのリストカラムの正規分布に対する上下広がり	df[aList].skew()
折れ線グラフのダイアモンドマーカーを黄色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
ボックスチャートを横に並べて描画する	plt.boxplot([データ列, データ列2])
ヒストグラムを描画して、色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
２変数の最大値を求める	max(x, y)
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
要素ひとつのりスト	[element]
データ列は何分か確認する	ds.dt.minute
星マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='*')
イテラブルを多重集合に変換する	collections.Counter(iterable)
折れ線グラフを描画して、色をミディアムスプリンググリーンに指定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
＜オプション＞ペールグリーンにグラフの色を設定する	color = 'palegreen'
イテラブルとデータ列について散布図を描画し、、マーカーの色を濃いに指定する	plt.plot(xdata, ydata, c='deep')
折れ線グラフにポイントマーカーを使う	plt.plot(データ列, データ列2, marker='.')
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
カラムの中にある日付データと文字列の合計を数える	ds.isin([value, value2]).sum()
データフレームからカテゴリデータの列を取り出す	df.select_dtypes('object')
＜オプション＞オリーブを使う	color = 'olive'
文字列を区切りで分割して、文字列リストにする	s.split(sep)
グラフにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
文字列の左側からタブを消す	s.lstrip('\t')
二つのデータ列を並べて箱ひげ図にする	plt.boxplot([データ列, データ列2])
配列とリストのカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
'A'列でデータフレームを破壊的に降順に並べ直す	df.sort_values(by='A', ascending=False, inplace=True)
文字列の最後の文字	s[-1]
シーケンスを文字列に変換して連結する	''.join(map(str, iterable))
分数を使う	import fractions
＜オプション＞グラフの線種を破線にセットする	linestyle = 'dashed'
配列と配列についての散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
データフレームのリストカラムの中にいくつ文字列が含まれるか数える	df[aList].isin([value]).sum()
データフレームのカラムは何分か確認する	df[col].dt.minute
暗いグラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
データフレームを列によってソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
部分文字列で文字列の開始位置以降が開始するか調べる	s.startswith(sub, start)
線グラフを描画して、その色を白に設定する	plt.plot(データ列, データ列2, color='white')
リストとリストで暗いを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
イテラブルとリストについて散布図を描画し、、三角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='^', c=rgb)
ヒストグラムの色を青紫に指定する	plt.hist(データ列, color='violet')
赤い星マーカーで散布図を描く	plt.plot(xdata, ydata, marker='*', c='r')
淡い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
最大長を指定して、両端キュー	collections.deque(maxlen=n)
文字列を最後の部分文字列で分けた時の後半の文字列を使う	s.rpartition(sub)[-1]
ひとつでも英数字が文字列内に含まれる	any(c.isalnum() for c in s)
列と列をペアリングする	itertools.zip_longest(iterable, iterable2)
文字列の右側から部分文字列を除去する	s.rstrip(sub)
折れ線グラフを破線に変更する	plt.plot(データ列, データ列2, linestyle='dashed')
リストとリストについて明るい色の折れ線グラフを描いて線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
折れ線グラフを描画してその色をミディアムシアグリーンに変更する	plt.plot(データ列, データ列2, color='mediumseagreen')
暗い色のヒストグラムでイテラブルを描く	plt.hist(xdata, color='dark')
リストと配列についての散布図に黒い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='k')
データフレームの列のNaNをxにセットする	df[col].fillna(x)
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
二つの列を用いてによって降順にデータフレームを並べる	df.sort_values(by=['A', 'B'], ascending=False)
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkmagenta')
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列, データ列2, color='dimgray')
折れ線グラフの色をゲインズボロにする	plt.plot(データ列, データ列2, color='gainsboro')
表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
データ列とリストについて暗い色の折れ線をプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
折れ線グラフのバツマーカーのサイズをnに変更する	plt.plot(データ列, データ列2, marker='x', markersize=n)
線グラフを描画して色を淡いピンク色に指定する	plt.plot(データ列, データ列2, color='lightpink')
ふたつの集合の交差	aSet.intersection(aSet2)
データフレームを二つの列を用いてによって破壊的に整列する	df.sort_values(by=['A', 'B'], inplace=True)
列のユニークな要素を調べる	df[col].unique()
文字列がリストの要素でないか	element not in aList
データフレームから数値データのみ抽出する	df.select_dtypes('number')
全ての印字可能な文字	string.printable
現在の秒数	datetime.date.today().second
＜オプション＞グラフの色をオリベドラブに設定する	color = 'olivedrab'
JSON形式の文字列をデータに変換する	json.loads(jsonString)
＜オプション＞グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
凡例をプロットに文字列と文字列と表示する	plt.legend([s, s2])
シスル色の線グラフを描画する	plt.plot(データ列, データ列2, color='thistle')
アクア色の線グラフを描画する	plt.plot(データ列, データ列2, color='aqua')
折れ線グラフを描画して、その色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
ヒストグラムを描画してその色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
＜オプション＞グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
データフレームを関数の値でグループ化し、要約統計量を計算する	df.groupby(関数).describe()
二つのオブジェクトが同一参照	obj is obj2
列のNaNを最小値に設定する	ds.fillna(ds.min())
折れ線グラフを描画して、その色をライトスレイグレーに変更する	plt.plot(データ列, データ列2, color='lightslategray')
赤色の色差別ないの折れ線グラフを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
リストと配列について淡い色の折れ線グラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
カウンタの最も頻出の項目を求める	aCounter.most_common()[0]
nをn2で割った結果の切り上げを算出する	(n + n2 - 1) // n2
＜オプション＞グラフの色をライムに変更する	color = 'lime'
文字列をトリムする	s.strip()
データフレームがどの程度、分散しているか調べる	df.var()
ファイルを全て読み込む	f.read()
ヒストグラムの色をミディアムアクアマリンに指定する	plt.hist(データ列, color='mediumaquamarine')
折れ線グラフに大きさnのバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
＜オプション＞ダークオリーブグリーンにグラフの色を設定する	color = 'darkolivegreen'
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
＜オプション＞レベッカパープル色を使う	color = 'rebeccapurple'
下位集合か確認する	aSet.issubset(aSet2)
再帰が何回までできるか知る	sys.getrecursionlimit()
散布図に赤いバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='r')
文字列がタプルに含まれないか調べる	element not in aTuple
散布図に左三角マーカーを用いる	plt.plot(xdata, ydata, marker='<')
ヒストグラムの色をトマトに変更する	plt.hist(データ列, color='tomato')
文字列の中でケースを無視してパターンにマッチした文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
ヒストグラムを描画してその色をライトグリーンに指定する	plt.hist(データ列, color='lightgreen')
グラフの中のy軸に軸名を付ける	plt.ylabel(untitled)
＜オプション＞リネンを使う	color = 'linen'
データフレームを二つの列で大きい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
グラフの描画で淡いカラーパレットを使う	sns.set(pallete='muted')
文字列から部分文字列を全て取り除く	s.replace(sub, '')
ヒストグラムを描画して色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
文字列はタプルに含まれるか調べる	element in aTuple
ライム色の線グラフを描画する	plt.plot(データ列, データ列2, color='lime')
列'A'と列'B'をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
リストのn番目の要素を削除する	del aList[n]
＜オプション＞ハニーデューに色を設定する	color = 'honeydew'
リストとリストについての散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind')
散布図を濃い色を用いて重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
折れ線グラフを描画して、その色をペルーに指定する	plt.plot(データ列, データ列2, color='peru')
オブジェクトの属性の値を指定する	setattr(obj, プロパティ名, 値)
リストとリストリストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
組の最後	aTuple[-1]
散布図に赤い丸マーカーを用いる	plt.plot(xdata, ydata, marker='o', c='r')
配列の次元数	aArray.ndim
データ列とリストについての散布図に赤色の丸マーカーを描く	plt.plot(xdata, ydata, marker='o', c='r')
グラフで日本語を表示できるようにする	sns.set(font='IPAexGothic')
データフレームの列のヒストグラムを描く	plt.hist(df[column])
文字列を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
データフレームのリストカラムの中に文字列と日付データがいくつ含まれるか求める	df[aList].isin([value, value2]).sum()
エクセルファイルファイルからnとn2のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
nがn2よりも小さいか	n < n2
数値の積分を求める	sympy.integrate(e)
文字列の中の複数行対応として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
文字列の大文字小文字を入れ替える	s.swapcase()
カラーコードの▲マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^', c=rgb)
暗いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
折れ線グラフに線幅nの星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
グラフの描画で明るいカラーパレットを使う	sns.set(pallete='bright')
文字列内にひとつでも空白が含まれる	any(c.isspace() for c in s)
今日が土曜日	datetime.datetime.today().weekday() == 5
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
＜オプション＞サンディーブラウンにグラフの色を指定する	color = 'sandybrown'
データフレームのリストカラムがどれだけ、分散しているか見る	df[aList].var()
要素が集合に含まれるか調べる	element in aSet
データ列をパステル調の色のヒストグラムで描く	plt.hist(xdata, color='pastel')
＜オプション＞星マーカーを使用する	marker = '*'
データ列のユニークな値	ds.unique()
オブジェクトがリストに含まれないか調べる	element not in aList
文字列中の小文字を大文字にする	s.upper()
全要素を０で初期化されたブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
オブジェクトが関数かどうかテストする	callable(obj)
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
データフレームを列によって昇順に並べる	df.sort_values(by=column, ascending=True)
折れ線グラフを描画して、その色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームを10の位で丸めて整数型にする	df.round(-1).astype(int)
xが一桁の正の整数かテストする	0 <= x <= 9
実行結果をマゼンタでプリントできる文字列にする	f'\033[35m{value}\033[0m'
文字列をマゼンタ化する	f'\033[35m{value}\033[0m'
折れ線グラフの色をスカイブルーに指定する	plt.plot(データ列, データ列2, color='skyblue')
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
リストを濃い色の柱状図を用いて描画する	plt.hist(xdata, color='deep')
リストを縦軸、リストを横軸と指定して、折れ線グラフを描画する	plt.plot(xdata, ydata)
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
＜オプション＞改行しない	end = ''
折れ線グラフを描画して、その色をコーラルに設定する	plt.plot(データ列, データ列2, color='coral')
双方向キューのn番目の要素	deq[n]
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
＜オプション＞namesをカラムの名前に指定する	names = names
小数点数の双曲線正弦の逆数を求める	math.asinh(x)
両端キューに文字列をエンキューする	deq.appendleft(element)
データフレームのカラムの欠損値をxで補う	df[col].fillna(x)
列でデータフレームをグループ化して、それぞれのグループごとの標準偏差を算出する	df.groupby(column).std()
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
列をビン数nでビン分割する	pd.cut(ds, n)
ヒストグラムを描画してその色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
柱状図を二つ並べて描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
イテラブルのイミュータブルなセット	frozenset(iterable)
データ列とラベルを指定して、棒グラフを描く	plt.bar(ラベル列, データ列)
今日の日数	datetime.datetime.today().day
リストとリストの黒い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
整数nを二進文字列に変換する	bin(n)[2:]
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列, データ列2, color='limegreen')
自然対数の底を使う	math.e
リストと配列についての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
ブラックにヒストグラムの色を変更する	plt.hist(データ列, color='black')
データフレームを'A'列によってまとめたグループ	df.groupby('A')
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
＜オプション＞ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
リストと配列についての散布図に右三角マーカーを描く	plt.plot(xdata, ydata, marker='>')
グラフの描画で暗いカラーパレットを使う	sns.set(pallete='dark')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
ファイルパスを読み込みモードとしてオープンする]	open(filepath, mode='r')
折れ線グラフを描画して、その色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
配列とリストについての散布図に赤色の大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='r')
データフレームの列と列の各列間の相関係数を求める	df[[column, column2]].corr()
黒色のバツマーカーを配列とリストについての散布図にプロットする	plt.plot(xdata, ydata, marker='x', c='k')
散布図に赤色の右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c='r')
マッピングをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
TSVファイルからSJISでCSVファイルを読む	pd.read_csv(filename, encoding='shift_jis')
追加モードとしてファイルパスをオープンして]、fとする	f = open(filepath, mode='a')
ヒストグラムの色をシーグリーンに変更する	plt.hist(データ列, color='seagreen')
文字コードを文字に変換する	chr(unicode)
カラーコードの大バツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
両端キューの最初に値を付け加える	deq.appendleft(element)
折れ線グラフの線幅を指定する	plt.plot(xdata, ydata, linewidth=n)
日付時刻データと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()//60
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列, データ列2, color='blueviolet')
空白によって文字列を区切る	s.split()
オブジェクトがあるクラス	isinstance(obj, クラス)
折れ線グラフに黒い丸印を描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
四分位数ごとに配列をビン分割する	pd.qcut(aArray, 4)
線グラフを描画してその色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
＜オプション＞グレー色を使う	color = 'gray'
リストの要素を逆順にする	aList[::-1]
ゼロ埋めされた三２ビット整数型のベクトル	np.zeros(要素数, dtype=np.int16)
折れ線グラフに青い△マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
文字列中にひとつでも非数字が含まれるかどうか調べる	any(not c.isdigit() for c in s)
ひとつでも数字が文字列内に含まれる	any(c.isdigit() for c in s)
ライトブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightblue')
データフレームの各グループの最大値	df.groupby(column).max()
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
ヒストグラムを描画して、色をダークシアグリーンに変更する	plt.hist(データ列, color='darkseagreen')
配列の差を計算する	aArray - aArray2
ヒストグラムを描画してその色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
ボックスチャートを二つ並べる	plt.boxplot([データ列, データ列2])
＜オプション＞▽印を描画する	marker = 'v'
線グラフの色を白に設定する	plt.plot(データ列, データ列2, color='white')
線幅nの大バツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
値∈セット	element in aSet
グラフの見た目を綺麗にする	import seaborn as sns
変数をシアンにする	f'\033[36m{value}\033[0m'
黒色のバツマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='x', c='k')
日付時刻データの分数	aDatetime.minute
＜オプション＞ホワイトスモーク色を使う	color = 'whitesmoke'
折れ線グラフのポイントマーカーを黄色くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
ヒストグラムを描画してその色をグレーに設定する	plt.hist(データ列, color='gray')
配列と配列の折れ線グラフを透明度alphaで描く	plt.plot(xdata, ydata, alpha=alpha)
折れ線グラフを描画して、その色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
データフレームの重複する行数を数える	df.duplicated().sum()
ヒストグラムを描画して、色をスラグレーに設定する	plt.hist(データ列, color='slategray')
＜オプション＞インデックスを連番に設定する	index_col = None
リストと配列について淡いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
ヒストグラムを描画してその色をゴールドに設定する	plt.hist(データ列, color='gold')
データ列を四分位数でビン分割する	pd.qcut(ds, 4)
折れ線グラフを描画して、その色をコーラルにセットする	plt.plot(データ列, データ列2, color='coral')
数列と配列の黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
三数の最大値	max(x, y, z)
ヒストグラムの色をアクアマリンに変更する	plt.hist(データ列, color='aquamarine')
要素がタプルの値に含まれていないかどうか調べる	element not in aDict.values()
データフレームのリストカラムの相関行列をヒートマップとして描画する	sns.heatmap(df[aList].corr())
＜オプション＞ペルーにグラフの色を設定する	color = 'peru'
nからn2を引く	n - n2
リストと配列についての散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
コマンドの第一引数を知る	sys.argv[1]
グラフの描画で濃いカラーパレットを使う	sns.set(pallete='deep')
リストとリストについて色差別ないグラフをプロットして、色を黒色に設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
ヒストグラムを描画して、その色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
'A'列でを用いてデータフレームを大きい順にソートする	df.sort_values(by='A', ascending=False)
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
データフレームのリストカラムがどの程度、分散しているか調べる	df[aList].var()
プレゼン用にプロットを変更する	sns.set(context='talk')
＜オプション＞三二ビット整数型を使用する	dtype = np.int16
データフレームのリストカラムの未入力値を中央値に設定する	df[aList].fillna(df[aList].median())
リストとリストについて破線グラフを描画して、色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
イテラブルとリストについて相関を可視化する	plt.scatter(xdata, ydata)
イテラブルを累積した列	itertools.accumulate(iterable, operator.mul)
ファイルを文字コードtextで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
データフレームをタブ区切りを用いてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
モードでデータフレームのカラムの未入力値を埋める	df[col].fillna(df[col].mode().iloc[0])
リストをビン数nでビン分割する	pd.cut(aList, n)
ダークオーキッドにヒストグラムの色を指定する	plt.hist(データ列, color='darkorchid')
リストとリストとしてパステル調のの折れ線を描いて、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
列からn個サンプリングする	random.sample(iterable, k=n)
データフレームの欠損値を最大値で置換する	df.fillna(df.max())
線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
ルートの階層化マップ	collections.ChainMap()
データフレームのカラムが何曜日か調べる	df[col].dt.weekday_name
数列と配列について散布図を描画して、マーカーの色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
データフレームを'A'列で整列する	df.sort_values(by='A')
0からnの範囲	range(n)
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
グラフに凡例を入れる	plt.legend()
＜オプション＞どの行もヘッダに設定しない	header = None
リストとリストについてパステル調の色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
リストの要素を並べる	sorted(aList)
列の中に文字列が含まれるか	ds.isin([value])
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
変数について数式を積分する	sympy.integrate(e, z)
ヒストグラムを描画して、その色をターコイズに設定する	plt.hist(データ列, color='turquoise')
ヒストグラムを描画してその色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
行列の形状	aArray.shape
リストを展開してプリントする	print(*aList)
浮動小数点数を万の位で丸める	round(x, -4)
＜オプション＞グラフの色を青紫に設定する	color = 'violet'
折れ線グラフを描画してその色をスラグレーにする	plt.plot(データ列, データ列2, color='slategray')
既存のファイルを文字コードtextとして追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
データフレームから指定された三つの列を取り出す	df[[column, column2, column3]]
暗い色の折れ線グラフを描画して、線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='dark')
データフレームの列の文字列長を列として使う	df[col].str.len()
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()//60
データフレームのリストカラムのモードを計算する	df[aList].mode()
等差数列をベクトルにする	np.arange(開始値, 終端値, 等差)
小数点数のハイパボリック・コサインを計算する	math.cosh(x)
折れ線グラフを描画してその色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
折れ線グラフを描画して、その色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
タプルをnからナンバリングする	enumerate(aTuple, start=n)
データ列の中の欠損値の合計をカウントする	ds.isna().sum()
変数をスワップする	x, y = y, x
イテラブルとリストについて青い暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
リストとイテラブルのパステル調のグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
＜オプション＞耐火レンガ色を用いる	color = 'firebrick'
データフレームを複数の列によってによって破壊的に並べ直す	df.sort_values(by=column, inplace=True)
データ列を折れ線グラフに描画して、マーカーを三角印にする	plt.plot(データ列, データ列2, marker='^')
コマンドの第二引数を調べる	sys.argv[1]
n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
変数を下線付き化する	f'\033[4m{value}\033[0m'
rangeの無限バージョン	itertools.count(start=n, step=step)
リストとリストについての散布図にカラーコードの下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
折れ線グラフを描画して、色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
nがn2で割り切れるか	n % n2 == 0
xの小数点以下'4'桁までの文字列にする	':.4f'.format(x)
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
データ列の各データが何回出現するか見る	ds.value_counts()
ヒストグラムの色をダークターコイズにする	plt.hist(データ列, color='darkturquoise')
データフレームを'A'列によってで降順にソートする	df.sort_values(by='A', ascending=False)
正規表現に文字列がマッチさせる	re.match(pattern, s)
＜オプション＞改行を区切りで用いる	sep = '\n'
折れ線グラフの星マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='*', markersize=n)
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
ヒストグラムを描画して、その色をミントクリームにする	plt.hist(データ列, color='mintcream')
折れ線の色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
nからn2の範囲	range(n, n2)
ヒストグラムの色をダークグリーンに指定する	plt.hist(データ列, color='darkgreen')
カウンタを辞書に変換する	dict(aCounter)
カウンタから最頻出の要素の件数を求める	aCounter.most_common()[1]
＜オプション＞シーグリーン色を用いる	color = 'seagreen'
折れ線グラフを描画して、色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
キューを全て取り除く	deq.clear()
ミスティローズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='mistyrose')
配列と配列でパステル調のグラフを描画して線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
折れ線グラフを描画して、その色をアクアマリンに設定する	plt.plot(データ列, データ列2, color='aquamarine')
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
＜オプション＞スラグレーを使用する	color = 'slategray'
色を濃くする	sns.set(pallete='deep')
ヒストグラムの色を黄色に変更する	plt.hist(データ列, color='yellow')
線グラフを描画してその色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
イテラブルのデータを双方向キューの左側に追加する	deq.extendleft(iterable)
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
淡い色の折れ線グラフを描画してその線幅をnに変更する	plt.plot(xdata, ydata, linewidth=n, color='muted')
＜オプション＞グラフの色をライトスチールブルーに変更する	color = 'lightsteelblue'
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
グラフで用いるタイトルをuntitledに変更する	plt.title(untitled)
＜オプション＞レベッカパープルにグラフの色を変更する	color = 'rebeccapurple'
行列の累積積	np.cumprod(aArray)
辞書に辞書の項目を更新する	aDict.update(aDict2)
カラムの正規分布に対する上下広がり	ds.skew()
データフレームのカラムの母標準偏差を求める	df[col].std(ddof=0)
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
現在のエポック	int(time.time())
データフレームの列の文字列が文字列で始まるデータを選択する	df[df[column].str.startswith(s)]
リストをパステル調の色のヒストグラムで描画する	plt.hist(xdata, color='pastel')
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
タプルをひとつ置きに抽出する	aTuple[::2]
散布図に菱形マーカーを使う	plt.plot(xdata, ydata, marker='D')
nを半分にする	n /= 2
nとn2の論理和	n | n2
ヒストグラムを描画して、その色を青に設定する	plt.hist(データ列, color='blue')
データフレームの行を範囲指定して抽出する	df[start:end]
線グラフの色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
等間隔でn個にデータフレームの中のカラムを分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
タプルのn番目からn2番目までの部分	aTuple[n:n2]
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
リスト内の要素が全て真か調べる	all(aList)
二つのリストの積集合	list(set(aList) & set(aList2))
散布図を赤い四角マーカーで描画する	plt.plot(xdata, ydata, marker='s', c='r')
データ列を折れ線グラフに描画して印を大バツ印にする	plt.plot(データ列, データ列2, marker='X')
year年の日付	datetime.date(year=year, month=1, day=1)
データ列と配列の散布図を描画して▽マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='v', c=rgb)
ベクトルのユニークな要素とその位置を計算する	u, indices = np.unique(aArray, return_index=True)
配列を一次元化する	aArray.flatten()
０で全要素を初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
＜オプション＞グラフの色をインディゴに設定する	color = 'indigo'
ヒストグラムを描画してその色をマゼンタに変更する	plt.hist(データ列, color='magenta')
行列の列	aArray[:, 列番号]
＜オプション＞バイナリ書き込み用にする	mode = 'wb'
自然数最小公倍数を求める	math.lcm(n, n2)
マッピングを多重集合に変換する	collections.Counter(aDict)
小数点以下3桁までデータフレームをJSONLファイルに保存する	df.to_csv(filename, float_format='%.3f')
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
折れ線グラフを描画して色をミディアムアクアマリンに指定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
＜オプション＞グラフの色をライトシアンに設定する	color = 'lightcyan'
＜オプション＞ライトブルーにグラフの色を設定する	color = 'lightblue'
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
データ列の欠損値をxに設定する	ds.fillna(x)
文字列中からパターンに複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
折れ線グラフの色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
PandasでPandasの日付型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
散布図に黒い下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='k')
＜オプション＞ミディアムオーキッド色を使う	color = 'mediumorchid'
＜オプション＞レモンシフォンにグラフの色を変更する	color = 'lemonchiffon'
レモンシフォン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lemonchiffon')
文字列の開始位置以降に部分文字列が含まれない	s.find(sub, start) == -1
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
文字列を最初の部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
表の列の値がxより大きい行を取り出す	df[df[column] > x]
ファイルから複数のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
データフレームをエクセルデータから読む	pd.read_excel(filename)
配列とリストについてパステル調の色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
ヒストグラムを描画して、その色をダークスラテグレーに変更する	plt.hist(データ列, color='darkslategray')
カラーパレットをパステル調にする	sns.set(pallete='pastel')
配列の分散を計算する	np.var(aArray)
データフレームのインデックスをリセットする	df.reset_index()
＜オプション＞ディムグレー色を用いる	color = 'dimgray'
スノー色の線グラフを描画する	plt.plot(データ列, データ列2, color='snow')
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
データ列と数列についての散布図に赤色の▽マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
文字列中にひとつでも非空白がある	any(not c.isspace() for c in s)
折れ線グラフのポイントマーカーの線幅をnにセットする	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
データフレームがどれだけ、分散しているか調べる	df.var()
＜オプション＞色をダークオレンジに設定する	color = 'darkorange'
n進数文字列を整数にする	int(s, n)
nがn2で割り切れないか調べる	n % n2 != 0
ヒストグラムを描画して、色をゴールドに設定する	plt.hist(データ列, color='gold')
二つの文字列を辞書順で比較する	s < s2
配列のデータ型	aArray.dtype()
プラットフォームの符号付き整数の最大値	sys.maxsize
カウンタの項目の回数	aCounter[element]
データ列の一意な値	ds.unique()
文字列を文字コード列にする	[ord(ch) for ch in s]
一方に含まれ、他方に含まれない集合を使う	aSet.difference(aSet2)
ヒストグラムの色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
＜オプション＞シルバーを用いる	color = 'silver'
グラフの中の縦軸にキャプションを付ける	plt.ylabel(untitled)
淡いの色をカラーコードに指定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
ヒストグラムの色をオールドレースにする	plt.hist(データ列, color='oldlace')
部分文字列で文字列を分けたときの前半の文字列	s.partition(sub)[0]
データフレームを大きい順に列ででソートする	df.sort_values(by=column, ascending=False)
集合が空か調べる	len(aSet) == 0
部分文字列が文字列の開始位置番目からと終了位置番目までの間に含まれないか調べる	s.find(sub, start, end) == -1
浮動小数点数のサインの逆数	math.asin(x)
リストとリストについての散布図にバツマーカーを描画する	plt.plot(xdata, ydata, marker='x')
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
データフレームの行列を入れ替える	df.T
折れ線グラフに大きさnの▲マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markersize=n)
カウンタから辞書を引く	aCounter.subtract(aDict)
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
ヒストグラムを描画して、色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
データフレームから指定された４列を抽出する	df[[column, column2, column3, column4]]
バリーウッドにヒストグラムの色をセットする	plt.hist(データ列, color='burlywood')
データフレームから重複した行を消す	df.drop_duplicates()
データフレームの中のカラムを四分位数ごとにビン分割する	pd.qcut(df[col], 4)
＜オプション＞色をカデットブルーに変更する	color = 'cadetblue'
線グラフを描画して、その色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
ゼロ埋めされた配列	np.zeros(要素数)
イテラブルと配列について散布図を描画して、文字列というデータラベル用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
リストを引数として展開して出力する	print(*aList)
データ列の曜日	ds.dt.weekday_name
データ列を折れ線グラフに描画して、印を下三角印にする	plt.plot(データ列, データ列2, marker='v')
折れ線グラフを描画して、その色をインディゴに設定する	plt.plot(データ列, データ列2, color='indigo')
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
データフレームの中にいくつ欠損値があるかカウントする	df.isna().sum()
データフレームの指定した二つの列を抽出する	df[[column, column2]]
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
＜オプション＞読むシートの名前をnamesに増やす	sheet_name = names
日付と時刻からタイムスタンプを生成する	datetime.datetime(年, 月, 日, 時, 分, 秒)
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
実数の複素数を計算する	complex(x)
折れ線グラフの色をライトシアンに変更する	plt.plot(データ列, データ列2, color='lightcyan')
線グラフを描画して、その色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
リストにリストを追加して広げる	aList.extend(aList2)
２つの列を用いてデータフレームを並べてNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
2つ並べてヒストグラムを描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
文字列をバイト配列に変換する	bytearray(s)
赤い左三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
データ列を折れ線グラフに描画して印をポイント印にする	plt.plot(データ列, データ列2, marker='.')
行列の列ごとの合計値	np.sum(aArray, axis=0)
黒いポイントマーカーとして散布図を描く	plt.plot(xdata, ydata, marker='.', c='k')
＜オプション＞ロージーブラウン色を使う	color = 'rosybrown'
日付データの年数	aDate.year
nとn2の値を足してnに代入する	n += n2
明るい色の折れ線グラフをプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
アルファ値alphaの折れ線グラフを描画する	plt.plot(xdata, ydata, alpha=alpha)
イテラブルを集合に変換する	set(iterable)
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
実数の小数部	math.modf(x)[0]
線グラフを描画して、色をアンティークホワイトに指定する	plt.plot(データ列, データ列2, color='antiquewhite')
カラムの中にいくつがあるか数える	ds.isin([value]).sum()
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
黄色い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
データフレームから列を三つ選択する	df[[column, column2, column3]]
文字列の右側から余分な空白を取り除く	s.rstrip()
ドジャーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dodgerblue')
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
データフレームを複数の列を用いて降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
折れ線グラフを描画して、色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
リストと数列の明るいグラフを描画してその色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
データフレームを'A'列によってソートする	df.sort_values(by='A')
ヒストグラムをプロットして半透明ににする	plt.hist(データ列, alpha=0.5)
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
等量でn個にデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
データフレームを'A'列と'B'列によって昇順に破壊的に整列する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
折れ線グラフの左三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='g')
nがn2以上かどうか調べる	n >= n2
xでデータフレームの欠損値を埋める	df.fillna(x)
データフレーム全体を行によってソートする	df.sort_index()
ファイルパスのディレクトリ名を見る	os.path.dirname(filepath)
行列を平坦にする	aArray.flatten()
折れ線グラフに線幅nのバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
折れ線グラフを点線に指定する	plt.plot(データ列, データ列2, linestyle='dotted')
列からカウンタを用意する	collections.Counter(iterable)
異なる列をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
カウンタの正の出現回数だけ残す	+aCounter
文字列を部分文字列で分けたときの後半の文字列を取り出す	s.partition(sub)[-1]
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
折れ線グラフの色をミディアムスレートブルーに指定する	plt.plot(データ列, データ列2, color='mediumslateblue')
ヒストグラムを描画してその色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
＜オプション＞右三角印を使う	marker = '>'
線グラフを描画して、その色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
折れ線グラフに大きさnの右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markersize=n)
＜オプション＞文字コードをEUCに設定する	encoding = 'euc_jp'
折れ線グラフにサイズnの右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markersize=n)
＜オプション＞ゴールデンロッドに色を変更する	color = 'goldenrod'
ヒストグラムの線のスタイルを点線に設定する	plt.hist(データ列, linestyle='dotted')
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
線グラフを描画して、その色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
組の文字列が最初に見つかる場所	aTuple.index(element)
インプレースに両端キューの要素を逆に並べ直す	deq.reverse()
データフレームの列の名前一覧で指定された列を消す	df.drop(columns, axis=1)
実数のn乗の浮動小数点数剰余	pow(x, n, y)
折れ線グラフを描画して、その色をグリーンに変更する	plt.plot(データ列, データ列2, color='green')
データフレームのカラムの時	df[col].dt.hour
プログラムの実行を異常終了する	sys.exit(1)
データフレームを二つの列を用いてで降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
折れ線グラフを描画して、その色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
データフレームのインデックス一覧を使う	df.index
数列とリストの散布図を描いてマーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
データフレームを複数の列でソートする	df.sort_values(by=column)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
＜オプション＞色をミントクリームに設定する	color = 'mintcream'
SJISとしてファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
イテラブルとイテラブルをつなぐ	itertools.chain(iterable, iterable2)
文字列は全て数値か調べる	s.isnumeric()
線グラフを描画して、その色をダークゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='darkgoldenrod')
列をキーにして二つのデータフレームを全結合する	pd.merge(df, df2, on=column, how='outer')
点線でヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
データフレームのそれぞれのグループの合計	df.groupby(column).sum()
＜オプション＞色をダークシアンに設定する	color = 'darkcyan'
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
ヒストグラムを描画して、色をディムグレーにセットする	plt.hist(データ列, color='dimgray')
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
文字列の末尾が部分文字列か調べる	s.endswith(sub)
リストのn番目を削除する	del aList[n]
表示可能な行数をnに設定する	pd.set_option('display.max_rows', n)
ファイルパスの絶対パス	os.path.abspath(filepath)
ヒストグラムを描画してその色をサドルブラウンにする	plt.hist(データ列, color='saddlebrown')
＜オプション＞ダークマゼンタを使う	color = 'darkmagenta'
リストとリストの青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
文字列の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
黒色のポイントマーカーを散布図に使う	plt.plot(xdata, ydata, marker='.', c='k')
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
データフレームの相関行列スピアマンとして	df.corr(method='spearman')
赤色のバツマーカーをデータ列とリストの散布図に描く	plt.plot(xdata, ydata, marker='x', c='r')
＜オプション＞ライトブルー色を使用する	color = 'lightblue'
ひとつでも大文字が文字列内に含まれるかどうか調べる	any(c.isupper() for c in s)
オレンジレッドにヒストグラムの色を設定する	plt.hist(データ列, color='orangered')
要素はマッピングの値として含まれているか	element in aDict.values()
モカシンにヒストグラムの色を設定する	plt.hist(データ列, color='moccasin')
xが-9以上、9以下かテストする	-9 <= x <= 9
データフレームの列が文字列で終わらない行を選択する	df[not df[column].str.endswith(s)]
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
暗いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
＜オプション＞マーカーを三角に変更する	marker = '^'
双方向キューを要素を出す	deq.popleft()
集合から別の集合を全て取り除く	aSet.difference_update(aSet2)
折れ線グラフの色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
再帰の最大回数を上げる	sys.setrecursionlimit(1000000)
ファイル名がCSVファイルか	filename.endswith('.csv')
1からnまでの整数リスト	list(range(1, n+1))
データ列を千の位で丸める	ds.round(-3)
リストの長さだけ繰り返す	range(len(aList))
データフレームから重複する行をドロップして更新する	df.drop_duplicates(inplace=True)
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
文字列内にひとつでも英字が含まれる	any(c.isalpha() for c in s)
イテラブルを両端キューに変換する	collections.deque(iterable)
シアンにヒストグラムの色を指定する	plt.hist(データ列, color='cyan')
データフレームで列とカラムの重複を削除する	df.drop_duplicates(subset=column)
実線ヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
２つの値をタブで区切って出力する	print(value, value2, sep='\t')
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
＜オプション＞カンマをセパレータで使う	sep = ','
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
日付時刻データが何秒か知る	aDatetime.second
実数の逆余弦	math.acos(x)
文字列を部分文字列で分割したときの前半の文字列	s.partition(sub)[0]
既存の配列をベースに全要素が0の配列	np.zeros_like(aArray)
データフレームから重複を破壊的に削除する	df.drop_duplicates(inplace=True)
データフレームの列と列の相関行列ピアソン相関係数として	df[[column, column2]].corr(method='pearson')
線グラフの色をイエローグリーンに変更する	plt.plot(データ列, データ列2, color='yellowgreen')
散布図に右三角マーカーを用いる	plt.plot(xdata, ydata, marker='>')
折れ線グラフを描画して、色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
1行標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
リストをn個にビンニングする	pd.cut(aList, n)
ファイル名がテキストファイル	filename.endswith('.txt')
数列とデータ列の散布図に右三角マーカーを描く	plt.plot(xdata, ydata, marker='>')
明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
書き込みできるようにUTF8でファイルをオープンする]	open(filepath, mode='w', encoding='utf-8')
＜オプション＞スノー色を使う	color = 'snow'
濃いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
線グラフを描画して、その色をシスルに変更する	plt.plot(データ列, データ列2, color='thistle')
リストとリストのカラーコードの明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
数式の変数を数式で置き換える	e.subs(z, e2)
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
散布図にカラーコードの右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c=rgb)
データ列を箱髭図でプロットする	plt.boxplot(データ列)
データフレームの値を正規表現でまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
赤い色差別ないグラフをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
ポイントマーカーで散布図を描く	plt.plot(xdata, ydata, marker='.')
折れ線グラフのクロスマーカーを黄色くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
＜オプション＞グラフの色をライトブルーに設定する	color = 'lightblue'
集合をリストにする	list(aSet)
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightgreen')
ゼロ埋めした複素数型の配列を作成する	np.zeros(要素数, dtype=bool)
本日の日付時刻	datetime.datetime.today()
折れ線グラフに線幅nのバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
＜オプション＞白色を使う	color = 'white'
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を算出する	df.groupby([column, column2], as_index=False).max()
折れ線グラフを描画して、その色をミディアムオーキッドにセットする	plt.plot(データ列, データ列2, color='mediumorchid')
＜オプション＞シャルトリューズ色を使う	color = 'chartreuse'
散布図に大バツマーカーを使う	plt.plot(xdata, ydata, marker='X')
整数nの8進表現	oct(n)
＜オプション＞オーキッド色を使う	color = 'orchid'
＜オプション＞ディムグレーを使う	color = 'dimgrey'
折れ線グラフを描画して、その色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
折れ線グラフに黄色い星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
＜オプション＞セパレータをカンマにする	sep = ','
データフレームの指定された列名一覧の列を抽出する	df[columns]
日付時刻データをISO書式の文字列に変換する	aDatetime.isoformat()
最初のカテゴリーを除外して表データの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
紺碧色の線グラフを描画する	plt.plot(データ列, データ列2, color='azure')
折れ線グラフに右三角マーカーを使う	plt.plot(データ列, データ列2, marker='>')
棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
データフレームのカラムの中にある文字列の合計をカウントする	df[col].isin([value]).sum()
Pandasで、データフレームのカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
日付時刻データが日付時刻データより先かどうか	aDatetime < aDatetime2
散布図に赤い大バツマーカーを使用する	plt.plot(xdata, ydata, marker='X', c='r')
折れ線グラフの色をパールゴールデンロッドに指定する	plt.plot(データ列, データ列2, color='palegoldenrod')
＜オプション＞複素数型を用いる	dtype = bool
異なる列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
濃い色の折れ線グラフをプロットしてその線幅をnにする	plt.plot(xdata, ydata, linewidth=n, color='deep')
線グラフを描画して色をローングリーンに変更する	plt.plot(データ列, データ列2, color='lawngreen')
ふたつの集合が集合と交わりを持たない	aSet.isdisjoint(aSet2)
折れ線グラフを描画して、色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
ファイルをBOM付きを用いてオープンする]	open(filepath, encoding='utf_8_sig')
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
データフレームを欠損値を含めて列の値で集約する	df.groupby(column, dropna=False)
＜オプション＞ラベンダーブラッシュ色を使う	color = 'lavenderblush'
折れ線グラフの星マーカーを青色にする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
ヒストグラムを描画してその色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
カウンタをタプルとして更新する	aCounter.update(iterable)
＜オプション＞△マーカーを描画する	marker = '^'
配列をヒストグラムを用いて可視化する	plt.hist(aArray)
折れ線グラフの色をミディアムブルーに指定する	plt.plot(データ列, データ列2, color='mediumblue')
ヒストグラムを描画してその色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
ヒストグラムの色をクリムゾンに変更する	plt.hist(データ列, color='crimson')
文字列がタプルの要素でないか調べる	element not in aTuple
範囲指定してデータフレームの行を選択する	df[start:end]
リストとデータ列について散布図を描画してマーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
値がセットのメンバーでないかどうか調べる	element not in aSet
散布図に濃い色のマーカーを使う	plt.plot(xdata, ydata, c='deep')
データフレームをまとめて小数点以下n桁で丸める	df.round(n)
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
列によってデータフレームを並べ直してインデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
折れ線グラフを描画してその色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
折れ線グラフの色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
データフレームのリストカラムを10の位で丸めて、整数にする	df[aList].round(-1).astype(int)
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
全要素を1で初期化された配列を初期化する	np.ones(要素数, dtype=np.int)
＜オプション＞グラフの色をラベンダーに設定する	color = 'lavender'
折れ線グラフの色を小麦色に設定する	plt.plot(データ列, データ列2, color='wheat')
カラーバーを横向きで描く	plt.colorbar(orientation='horizontal')
＜オプション＞グラフの色をリネンに設定する	color = 'linen'
双方向キューの末尾にイテラブルの各要素を順に付け加える	deq.extend(iterable)
折れ線グラフの色をホワイトスモークに指定する	plt.plot(データ列, データ列2, color='whitesmoke')
nが偶数かどうか調べる	n % 2 == 0
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
＜オプション＞コーンフラワーブルーにグラフの色を設定する	color = 'cornflowerblue'
＜オプション＞コロンを区切りで使う	sep = ':'
文字列はタプルに含まれないか調べる	element not in aTuple
＜オプション＞グラフの色をミントクリームに設定する	color = 'mintcream'
折れ線グラフのマーカーを△にする	plt.plot(データ列, データ列2, marker='^')
＜オプション＞色を茶色に設定する	color = 'brown'
nとn2の論理和を計算する	n | n2
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
データフレームのデータ型の一覧	df.dtypes
リストの先頭のn要素を捨てる	aList[n:]
濃い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='deep')
全要素を初期値で初期化された行列を作る	np.full(要素数, 初期値, dtype=np.int)
＜オプション＞ブラック色を用いる	color = 'black'
破線グラフの色を淡いにセットする	plt.plot(xdata, ydata, linestyle='dash', color='muted')
リストにオブジェクトを追加する	aList.append(element)
データフレームのカラムを10の位で丸める	df[col].round(-1)
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
＜オプション＞色をライムグリーンに設定する	color = 'limegreen'
プラットフォームのコードポイントの最大値を知る	sys.maxunicode
データフレームを複数の列で整列する	df.sort_values(by=column)
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
折れ線グラフを描画して、その色を貝殻に指定する	plt.plot(データ列, データ列2, color='seashell')
＜オプション＞ダークゴールデンロッドを使う	color = 'darkgoldenrod'
データフレームの列がx以上かつx2未満のデータを取り出す	df[(x <= df[column]) & (df[column] < x2)]
データフレームから列を1つ選択する	df[[column]]
＜オプション＞ハニーデュー色を使う	color = 'honeydew'
＜オプション＞複素数型を使う	dtype = bool
折れ線グラフを描画して、色をグレーに指定する	plt.plot(データ列, データ列2, color='grey')
折れ線グラフを描画して、その色をライトゴールドロディイエローにセットする	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
1からNまでのベクトル	np.arange(1, N+1)
データフレームのリスト列の歪度を計算する	df[aList].kurt()
折れ線グラフに緑色のダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
＜オプション＞ダークグレー色を使う	color = 'darkgrey'
二つのデータフレームを列'A'と列'B'をキーとして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
黒い大バツマーカーとして散布図を描く	plt.plot(xdata, ydata, marker='X', c='k')
数式の平方根を求める	sympy.sqrt(e)
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
＜オプション＞コーンフラワーブルー色を用いる	color = 'cornflowerblue'
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
双方向キューの値をインプレースに反転する	deq.reverse()
リストとリストについての散布図を濃い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
ヒストグラムを描画して色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
組をnからナンバリングする	enumerate(aTuple, start=n)
リストとリストについての散布図に黒色のポイントマーカーを描く	plt.plot(xdata, ydata, marker='.', c='k')
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
折れ線グラフを描画して、色をスラグレーに指定する	plt.plot(データ列, データ列2, color='slategray')
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
赤い▼マーカーを配列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='v', c='r')
Pandasで、UNIX秒の文字列からタイムスタンプ型にする	pd.to_datetime(s, unit='s', utc=True)
カラムの中に文字列と文字列がいくつあるかカウントする	ds.isin([value, value2]).sum()
＜オプション＞グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
1行だけ標準入力から読み込んで改行を取り除く	sys.stdin.readline().rstrip()
ヒストグラムを描画して、その色をティールに設定する	plt.hist(データ列, color='teal')
ヒストグラムを一点鎖線に変更する	plt.hist(データ列, linestyle='dashbot')
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
タプルの合計値を計算する	sum(aTuple)
タプル内の要素が全て真か調べる	all(aTuple)
配列と数列について破線グラフを描画して、その色をパステル調のにする	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
ヒストグラムを描画して、その色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
リストとリストについての散布図をパステル調の色を用いて重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
数で実数を整数除算する	x // y
今日が水曜日か調べる	datetime.datetime.today().weekday() == 2
セットの全ての要素が別の集合に含まれるかどうか	aSet.issubset(aSet2)
タブ	'\t'
明るいグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='bright', color='k')
ヒストグラムの色を黒くする	plt.hist(データ列, color='k')
オブジェクトは論理値かテストする	isinstance(obj, bool)
データフレームをTSVから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
散布図に赤色の四角マーカーを用いる	plt.plot(xdata, ydata, marker='s', c='r')
既存の行列を元にして全要素が0のベクトル	np.zeros_like(aArray)
実行結果を紫色でプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
＜オプション＞青色を使う	color = 'blue'
＜オプション＞グラフの色をシエナに設定する	color = 'sienna'
データ列をヒストグラムにする	plt.hist(ds)
ふたつの集合が互いに素か確認する	aSet.isdisjoint(aSet2)
書き込みできるようにファイルパスをEUCを用いてオープンする]	open(filepath, mode='w', encoding='euc_jp')
＜オプション＞ライトコーラルにグラフの色を設定する	color = 'lightcoral'
リストを色差別ない色のヒストグラムで描画する	plt.hist(xdata, color='colorblind')
リストをn個にビニングしてnamesのラベルをつける	pd.cut(aList, n, labels=names)
オブジェクトは数値か調べる	isinstance(obj, (int,float))
＜オプション＞ベージュにグラフの色を変更する	color = 'beige'
イテラブルとリストの青色の濃いを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
＜オプション＞グラフの色をスノーに設定する	color = 'snow'
シーケンスを両端キューに変換する	collections.deque(iterable)
＜オプション＞スプリンググリーンを使う	color = 'springgreen'
句読点文字を全部見る	string.punctuation
データ列は何時か見る	ds.dt.hour
データ列の正規分布に対する上下広がりを算出する	ds.skew()
リストとリストの色差別ないグラフを描画して、その色を黒色に指定する	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
変数を緑色で出力する	print(f'\033[32m{value}\033[0m')
折れ線グラフの色を淡い茶色に設定する	plt.plot(データ列, データ列2, color='tan')
折れ線グラフの色を黒くする	plt.plot(データ列, データ列2, color='k')
FIXME	np.linalg.eig(aArray)
本日の曜日を求める	datetime.datetime.today().weekday()
３つのデータフレームを横向きに合体させる	pd.concat([df, df2, df3], axis=1)
マップを浅く複製する	dict(aDict)
散布図を▼マーカーを使って描画する	plt.plot(xdata, ydata, marker='v')
数式の数値を求める	float(e)
配列と数列について散布図をプロットしてマーカーを下三角に設定する	plt.plot(xdata, ydata, marker='v')
リストとリストについての散布図を明るい色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
折れ線グラフに四角印を加える	plt.plot(データ列, データ列2, marker='s')
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
折れ線グラフに黄色いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
折れ線グラフを描画して、その色をゴーストホワイトに設定する	plt.plot(データ列, データ列2, color='ghostwhite')
文字列の先頭で正規表現に複数行対応としてマッチするか確認する	re.match(pattern, s, flags=re.MULTILINE)
ヒストグラムを描画して、その色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
データ列と数列についての散布図に赤い下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v', c='r')
プロットの中のフォントをfontNameに設定する	sns.set(font=fontName)
データフレームの列がリストに含まれる行を選択する	df[df[column].isin(aList)]
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
黒色の丸マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='o', c='k')
数式の微分を求める	sympy.diff(e)
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
文字列の出力を改行なしに行う	print(value, end='')
データフレームを関数によってまとめた表	df.groupby(関数)
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
小数点数の絶対値を求める	math.fabs(x)
データ列の時を使う	ds.dt.hour
リストとリストについての散布図にクロスマーカーをプロットする	plt.plot(xdata, ydata, marker='x')
ヒストグラムを描画してその色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
ゼロ埋めされた複素数型の配列を作る	np.zeros(要素数, dtype=bool)
＜オプション＞スラグレー色を使う	color = 'slategray'
二つのデータフレームを異なる列をキーとして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
線グラフを描画して、その色をシアンに設定する	plt.plot(データ列, データ列2, color='cyan')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
文字列中の部分文字列を別の文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
JSONLファイルにBOMを付けてデータフレームを保存する	df.to_csv(filename, encoding='utf_8_sig')
文字列リストにシーケンスを変換してタブでつなげる	'\t'.join(map(str, iterable))
ファイルを読み込みモードを用いてオープンする]	open(filepath, mode='r')
nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
データフレームを表示するとき、折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
＜オプション＞グラフの色をパパイヤウィップに指定する	color = 'papayawhip'
＜オプション＞グラフの色をハニーデューに設定する	color = 'honeydew'
線グラフの色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
行列を2次元1行に変形する	aArray.reshape(1, -1)
折れ線グラフの▲マーカーの大きさをnに変更する	plt.plot(データ列, データ列2, marker='^', markersize=n)
ヒストグラムの色をパレットトルコイズに指定する	plt.hist(データ列, color='paleturquoise')
データフレームをグループ化し各列に対し標準偏差を求める	df.groupby(column)[column2].std()
折れ線グラフに青い▲印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
四角マーカーを散布図に使用する	plt.plot(xdata, ydata, marker='s')
折れ線グラフのポイントマーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='.', markeredgewidth=n)
オブジェクトをイテラブルに変換する	iter(obj)
カウンタのユニークな項目を列挙する	list(aCounter)
日付時刻データが何曜日か知る	aDatetime.weekday()
ブランチドアーモンドにヒストグラムの色をセットする	plt.hist(データ列, color='blanchedalmond')
タイムスタンプデータにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
配列と数列の青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
実数を万の位で丸める	round(x, -4)
分子n、分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
パレットを色差別なくする	sns.set(pallete='colorblind')
イテラブルを文字列に変換して、カンマで連結する	','.join(map(str, iterable))
＜オプション＞グラフの色をミディアムアクアマリンに指定する	color = 'mediumaquamarine'
実数を実数から引く	x - y
カウンタの項目のカウント	aCounter[element]
黄緑にヒストグラムの色を変更する	plt.hist(データ列, color='chartreuse')
n行をランダムに重複ありでデータフレームからサンプリングする	df.sample(n, replace=True)
タプルの最初の文字列を探す	aTuple.index(element)
配列と配列の暗いを描画してその色を青くする	plt.plot(xdata, ydata, linestyle='dark', color='b')
辞書から項目名で指定された項目をポップする	aDict.pop(key)
数値を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
青い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
データフレームを欠損値を含めて列でグループ化する	df.groupby(column, dropna=False)
ヒストグラムを描画して、その色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
セットの浅いコピー	aSet.copy()
データ列を折れ線グラフに描画して、マーカーを星印にする	plt.plot(データ列, データ列2, marker='*')
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
イテラブルを文字列に変換して、空白で連結する	' '.join(map(str, iterable))
＜オプション＞グラフの色をダークオレンジに設定する	color = 'darkorange'
カラムの下位25%	ds.quantile(0.75)
右三角マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='>')
データフレームをグループ化し、各列に対し合計を算出する	df.groupby(column)[column2].sum()
文字列を黒色化する	f'\033[30m{value}\033[0m'
二つの集合が集合と互いに素か	aSet.isdisjoint(aSet2)
折れ線グラフを描画して、その色を青に設定する	plt.plot(データ列, データ列2, color='blue')
折れ線グラフの色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
配列のヒストグラムを描く	plt.hist(aArray)
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
データフレームの欠損値を削除する	df.dropna()
折れ線グラフの色を黄色くする	plt.plot(データ列, データ列2, color='y')
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
サンディーブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='sandybrown')
＜オプション＞ライトグリーンに色を設定する	color = 'lightseagreen'
両端キューの最後の要素	deq[-1]
文字列の開始位置からと終了位置までの間に部分文字列がないか	s.find(sub, start, end) == -1
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=n)
＜オプション＞色を青緑に設定する	color = 'teal'
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
データフレームのカラムの名前を列挙する	df.columns
数列と配列についての散布図に黒い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='k')
BOM付きとして書き込みできるようにファイルパスを開く]	open(filepath, mode='w', encoding='utf_8_sig')
数列とリストのカラーコードの暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
nの二進リテラル	bin(n)
配列とリストについての散布図に赤い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='r')
集合の補集合	aSet.difference(aSet2)
ファイルパスのセパレータ記号	os.sep
数のn乗	pow(x, n)
＜オプション＞ミディアムバイオレットレッドを使う	color = 'mediumvioletred'
リストを白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
シーケンスを文字列リストに変換して、空白で一つにする	' '.join(map(str, iterable))
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='b')
パステル調の色の折れ線グラフを描画し、、その線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
イテラブルを文字列に変換して、空白を用いて結合する	' '.join(map(str, iterable))
集合から全ての要素を除去する	aSet.clear()
赤い菱形マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
kを底とする小数点数の対数を求める	math.log(x, k)
線グラフを描画して、色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
＜オプション＞ミディアムスプリンググリーン色を使用する	color = 'mediumspringgreen'
＜オプション＞シスル色を用いる	color = 'thistle'
データフレームの中の列をビン数nとしてビン分割する	pd.cut(df[col], n)
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
オレンジ色の線グラフを描画する	plt.plot(データ列, データ列2, color='orange')
カラーバーを水平で付ける	plt.colorbar(orientation='horizontal')
散布図を黒いポイントマーカーで描画する	plt.plot(xdata, ydata, marker='.', c='k')
リストをy座標、リストを横軸として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
カウンタの全数を使う	aCounter.total()
nとn2のビット積	n & n2
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
ヒストグラムを描画してその色を白に設定する	plt.hist(データ列, color='white')
＜オプション＞グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
SJISでファイルパスをオープンする]	open(filepath, encoding='shift_jis')
集合から要素を取り除く	aSet.remove(element)
＜オプション＞黄色色を使う	color = 'yellow'
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
辞書のキー一覧	list(aDict)
＜オプション＞セパレータを文字列にする	sep = s
データフレームの指定された列を配列として抽出する	df[column].values
＜オプション＞オレンジに色を変更する	color = 'orange'
0からnまでの整数列	list(range(n+1))
＜オプション＞グラフの色をローングリーンに設定する	color = 'lawngreen'
ヒストグラムを描画して、色をミントクリームに変更する	plt.hist(データ列, color='mintcream')
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
文字列をシアンにする	f'\033[36m{value}\033[0m'
データフレームのカラムは正規分布からどの程度、尖っているか見る	df[col].skew()
折れ線グラフの右三角印の線幅をnにする	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
データフレームのカラムの中に日付データと日付データがあるか確認する	df[col].isin([value, value2])
未初期化のベクトル	np.empty(要素数, dtype=np.int)
ラジアンの角度を求める	math.degrees(x)
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか調べる	s.find(sub, start, end) == -1
タプル上で項目名が未定義	key not in aDict
＜オプション＞グラフの色をアイボリーに設定する	color = 'ivory'
文字列ひとつのタプル	(element,)
グラフにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
辞書の項目数	len(aDict)
バイナリ用にファイルパスを開き]、fとする	f = open(filepath, mode='rb')
線グラフを描画して、色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
箱ひげ図を二つ並べる	plt.boxplot([データ列, データ列2])
＜オプション＞グラフの色をデピンクに設定する	color = 'deeppink'
文字列をシンボル化して、変数にする	z = sympy.Symbol(s)
＜オプション＞グラフの色をアリスブルーにセットする	color = 'aliceblue'
ヒストグラムの線のスタイルを実線にする	plt.hist(データ列, linestyle='solid')
散布図をカラーコードの左三角マーカーを用いて描く	plt.plot(xdata, ydata, marker='<', c=rgb)
折れ線グラフを描画して、その色を濃いシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
セットの変更不能版	frozenset(aSet)
最頻値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].mode().iloc[0])
データフレームから列を三つのみ選択する	df[[column, column2, column3]]
折れ線グラフの色をゴールデンロッドに指定する	plt.plot(データ列, データ列2, color='goldenrod')
データ列を折れ線グラフに描画して、マーカーを丸にする	plt.plot(データ列, データ列2, marker='o')
白いヒストグラムを描画する	plt.hist(データ列, color='w')
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
リストとリストについての散布図に黒色の星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
折れ線グラフのダイアモンド印のサイズをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
データフレームを行によって降順で並べる	df.sort_index(ascending=False)
データフレームのカラムの最頻値を計算する	df[col].mode()
小数点数のハイパボリック・コサインの逆数	math.acosh(x)
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
折れ線グラフの色をミディアムブルーに変更する	plt.plot(データ列, データ列2, color='mediumblue')
カラムの値をValueMapで一度に置き換える	ds.replace(ValueMap)
グラフの横軸の説明をuntitledに設定する	plt.xlabel(untitled)
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
リストとリストの折れ線グラフを透明度alphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
ヒストグラムを描画して、その色をホワイトスモークにする	plt.hist(データ列, color='whitesmoke')
折れ線グラフに線幅nの丸印を描画する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
文字列の先頭の文字	s[0]
日付データが金曜日	aDate.weekday() == 4
イテラブルとリストの散布図にカラーコードの星マーカーを描く	plt.plot(xdata, ydata, marker='*', c=rgb)
一点鎖線ヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
リストと数列について散布図を描画し、、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
マルーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='maroon')
オプションでファイルを使う	file = sys.open(filename, 'w')
データフレームの重複する行のみを抽出する	df[df.duplicated(keep=False)]
線グラフを描画して色をグレーに設定する	plt.plot(データ列, データ列2, color='gray')
最初の部分文字列で文字列を分けたときの後半の文字列	s.partition(sub)[-1]
線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
折れ線グラフを描画して、その色をライトグリーンに設定する	plt.plot(データ列, データ列2, color='lightseagreen')
淡いピンク色色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightpink')
リストとリストについて破線グラフを描画してその色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
＜オプション＞改行コードをWindowsに設定する	newline = '\r\n'
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
データフレームの列の欠損値をxで補う	df[col].fillna(x)
セットが空集合かどうか判定する	len(aSet) == 0
n個にデータ列をビニングしてnamesのラベルをつける	pd.cut(ds, n, labels=names)
ISO8601の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフを描画して、色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
折れ線グラフの右三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
＜オプション＞マゼンタを用いる	color = 'magenta'
データフレームの先頭n行	df.head(n)
折れ線グラフの色をロージーブラウンにする	plt.plot(データ列, データ列2, color='rosybrown')
イテラブルとリストの散布図にカラーコードの上三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
異なる列をキーとして２つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
名前からカラーマップを見る	"plt.get_cmap(""カラーマップ名"")"
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
ヒストグラムを描画して、色をデピンクに設定する	plt.hist(データ列, color='deeppink')
＜オプション＞色をナバホホワイトに設定する	color = 'navajowhite'
リストと数列の散布図に黒い右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>', c='k')
線グラフの色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
最大長nの双方向キューを列から作る	collections.deque(iterable, maxlen=n)
データフレームのリストカラムの中にある文字列の合計を求める	df[aList].isin([value]).sum()
データフレームをまとめて丸める	df.round()
ファイルパスから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
ヒストグラムの色をパールバイオレットレッドに変更する	plt.hist(データ列, color='palevioletred')
配列とデータ列の折れ線グラフをuntitledとラベル付けして描画する	plt.plot(xdata, ydata, label=untitled)
エラーなく辞書からキーの値を得る	aDict.get(key, None)
ヒストグラムを描画して、その色をシスルに設定する	plt.hist(データ列, color='thistle')
プロットの描画で淡い色使いを使う	sns.set(pallete='muted')
線グラフの色をペルーに変更する	plt.plot(データ列, データ列2, color='peru')
＜オプション＞タブを分割記号で用いる	sep = '\t'
行列の行	aArray[行番号]
ヒストグラムを描画して、色をフローラルホワイトに変更する	plt.hist(データ列, color='floralwhite')
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
カウンタのキー数	len(aCounter)
折れ線グラフの線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n)
淡いの折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
ヒストグラムを描画して、色をマゼンタに設定する	plt.hist(データ列, color='magenta')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
濃い色としてリストについてのヒストグラムを描画する	plt.hist(xdata, color='deep')
データフレームを二つの列の値によってまとめたグループ	df.groupby(['A', 'B'])
色を色差別なくする	sns.set(pallete='colorblind')
パステル調のの折れ線グラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
リストとリストの黒色の濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='k')
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
リストと配列についての散布図にバツマーカーを描く	plt.plot(xdata, ydata, marker='x')
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
データフレームの中の欠損値の合計を数える	df.isna().sum()
線グラフを描画してその色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
プログラムの実行を強制的に終了する	sys.exit()
ヒストグラムを描画して、色をコーンズシルクに指定する	plt.hist(データ列, color='cornsilk')
折り返しをしない	pd.set_option('expand_frame_repr', False)
表データのn行以降取り出す	df[n:]
リストとリストについて淡い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
リストの長さを見る	len(aList)
データフレームを列の値によって集約して、各グループごとの最小値を求める	df.groupby(column).min()
散布図を星マーカーとして描画する	plt.plot(xdata, ydata, marker='*')
セットから全ての要素を取り除く	aSet.clear()
変数を赤色でプリントする	print(f'\033[31m{value}\033[0m')
＜オプション＞グラフの色をダークオレンジにセットする	color = 'darkorange'
＜オプション＞ミディアムスレートブルーを使用する	color = 'mediumslateblue'
データフレームのリストカラムのNaNを中央値に設定する	df[aList].fillna(df[aList].median())
整数nの八進表現	oct(n)
データ列の値を正規表現patternでまとめて置き換える	ds.replace(pattern, repl, regex=True)
データフレームから列名を複数指定して選択する	df[columns]
データフレームの列の未入力値を平均で置換する	df[col].fillna(df[col].mean())
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
改行を取り除いて標準入力から1行分読み込む	sys.stdin.readline().rstrip()
折れ線グラフに描画して、印を四角印にする	plt.plot(データ列, データ列2, marker='s')
散布図を四角マーカーで描画する	plt.plot(xdata, ydata, marker='s')
ゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='goldenrod')
２つの実行結果を改行で区切って出力する	print(value, value2, sep='\n')
赤色のポイントマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='.', c='r')
度数分布図を描画して、nにビン数を指定する	plt.hist(データ列, bins=n)
＜オプション＞アイボリーに色を設定する	color = 'ivory'
二つのデータフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
文字列を最初の部分文字列で二分し、先頭の文字列を使う	s.partition(sub)[0]
文字列中に部分文字列が含まれるか調べる	sub in s
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
＜オプション＞ダーク・スラテグレー色を使う	color = 'darkslategrey'
データ列とリストで折れ線を描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
▽マーカーを散布図に使う	plt.plot(xdata, ydata, marker='v')
文字列を走査しパターンに大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
第二引数のファイルの名前	sys.argv[1]
折れ線グラフの四角マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='s', markersize=n)
黒いダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
オブジェクトは辞書クラスかどうか調べる	isinstance(obj, dict)
文字列中に部分文字列が含まれる	sub in s
シスルにヒストグラムの色を設定する	plt.hist(データ列, color='thistle')
＜オプション＞ピンクを使う	color = 'pink'
等しい量になるようにn個にデータフレームの中の列を分割する	pd.qcut(df[col], n)
リストを分割数nとして分割する	pd.cut(aList, n)
＜オプション＞グラフの色をベージュに設定する	color = 'beige'
スピアマンを用いてデータフレームの相関行列	df.corr(method='spearman')
折れ線グラフの色をネイビーに指定する	plt.plot(データ列, データ列2, color='navy')
データ列とリストの暗いグラフを描いて、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
ヒストグラムを描画して、色を青に設定する	plt.hist(データ列, color='blue')
線グラフを描画してその色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
日付データが金曜日か調べる	aDate.weekday() == 4
'A'列と'B'列によってによってデータフレームを降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
配列の行ごとの合計値を算出する	np.sum(aArray, axis=1)
文字列の示すエンコーディングで追加できるように既存のファイルを開く]	open(filepath, mode='a', encoding=s)
カラムの歪度	ds.kurt()
線グラフを描画して、その色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
表データの列の値がxより多くx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
赤いパステル調のを描く	plt.plot(xdata, ydata, linestyle='pastel', color='r')
日付時刻データをエポック秒にする	aDatetime.timestamp()
列とリストの直積を求める	itertools.product(iterable, iterable2)
逆順の両端キューを使う	reversed(deq)
双方向キューのstart番目からendの要素	collections.deque(itertools.islice(deq, start, end))
リストとリストの散布図に赤い丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='r')
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
データフレームの列概要	df.info()
n×n2の２次元リスト	[[0] * n for _ in range(n2)]
ヒストグラムを描画して、その色を黄色に変更する	plt.hist(データ列, color='yellow')
双方向キューの最後の要素	deq[-1]
黒い暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='k')
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
折れ線グラフを描画して、その色をロイヤルブルーに設定する	plt.plot(データ列, データ列2, color='royalblue')
ヒストグラムを描画して、色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
＜オプション＞ブルーバイオレット色を使う	color = 'blueviolet'
折れ線グラフの色をシエナにする	plt.plot(データ列, データ列2, color='sienna')
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
リストとデータ列について破線グラフを描き、、その色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
データフレームを複数の列によって並べ直して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
リストとリストについて青色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
文字列を記号に変換する	sympy.Symbol(s)
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
空行を出力する	print()
＜オプション＞ラベンダーブラッシュに色を設定する	color = 'lavenderblush'
ヒストグラムを描画して、その色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
＜オプション＞グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
日付データが月曜日か調べる	aDate.weekday() == 0
グラフの描画でパステル調のカラーパレットを使う	sns.set(pallete='pastel')
線グラフの色をオールドレースに指定する	plt.plot(データ列, データ列2, color='oldlace')
ガンマ関数の絶対値に自然対数をとった値を求める	math.lgamma(x)
データフレームを'A'列によってグループ化し、列挙する	[(name, group) for name, group in df.groupby('A')]
線グラフの色を黄色にセットする	plt.plot(データ列, データ列2, color='yellow')
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
nがn2と等しいか調べる	n == n2
現在が何時か知る	datetime.date.today().hour
リストとデータ列の散布図をプロットし、、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
オブジェクトのメモリビュー	memoryview(obj)
＜オプション＞グラフの色をホットピンクに設定する	color = 'hotpink'
パステル調のグラフを配列とリストを用いて描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
＜オプション＞ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
コーラル色の線グラフを描画する	plt.plot(データ列, データ列2, color='coral')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
0からNまでの配列	np.arange(N)
ネイビーにヒストグラムの色を設定する	plt.hist(データ列, color='navy')
キュー中の要素のインデックス	deq.index(element)
データフレームを各列毎に集約して、文字列という名前のグループを見る	df.groupby(column).get_group(s)
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
nがn2よりも小さいか確認する	n < n2
折れ線グラフのダイアモンドマーカーの線幅をnにセットする	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
文字列がリストに含まれるか	element in aList
散布図をダイアモンドマーカーで描画する	plt.plot(xdata, ydata, marker='D')
データ列と配列についての散布図に赤色の右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='r')
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
＜オプション＞スプリンググリーン色を使う	color = 'springgreen'
折れ線グラフのスタイルを実線にセットする	plt.plot(データ列, データ列2, linestyle='solid')
青い濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='b')
折れ線グラフの▽印を緑色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか存在するか調べる	s.count(sub, start, end)
＜オプション＞グラフの色を黄色に設定する	color = 'yellow'
＜オプション＞オレンジを使う	color = 'orange'
折れ線グラフの左三角印を赤色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
ふたつの集合が共通の要素を持たないかどうか	aSet.isdisjoint(aSet2)
＜オプション＞貝殻色を使用する	color = 'seashell'
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
破線を用いて折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashed')
折れ線グラフを描画して、色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
'A'列によってデータフレームをソートし、NaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
＜オプション＞タブをセパレータで使う	sep = '\t'
グラフをデフォルトでイイ感じに設定する	sns.set()
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
線グラフを描画して、その色をチョコレートにする	plt.plot(データ列, データ列2, color='chocolate')
変数をマゼンタにする	f'\033[35m{value}\033[0m'
nが2で割り切れるかテストする	n % 2 == 0
標準出力の出力先がターミナルかどうかテストする	os.isatty(sys.stdin.fileno())
昇順にリストの要素を並べ直す	sorted(aList, reverse=False)
データ列を等量でn個にビニングする	pd.qcut(ds, n)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
データフレームをインデックスによって降順で並べる	df.sort_index(ascending=False)
データ列の中に文字列と文字列がある	ds.isin([value, value2])
文字列に日本語が使われているかどうか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
＜オプション＞ミディアムパープルにグラフの色を設定する	color = 'mediumpurple'
文字列を最後の部分文字列によって二分する	s.rpartition(sub)
既存のファイルを文字列の示す文字コードで追加できるように開く]	open(filepath, mode='a', encoding=s)
色差別ない色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
nがn2	n == n2
タプルをリストにする	list(aTuple)
カラーコードの四角マーカーとして散布図をプロットする	plt.plot(xdata, ydata, marker='s', c=rgb)
ヒストグラムの色を青緑に指定する	plt.hist(データ列, color='teal')
'A'列によってデータフレームを並べて、更新する	df.sort_values(by='A', inplace=True)
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
カウンタ間でユニオン	aCounter | aCounter2
日付時刻データが金曜日	aDatetime.weekday() == 4
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
横棒グラフを描画して、中央寄せする	plt.barh(ラベル列, データ列, align='center')
＜オプション＞コロンをセパレータで用いる	sep = ':'
オブジェクトがリストクラスかどうか	isinstance(obj, list)
散布図を赤色のポイントマーカーで描画する	plt.plot(xdata, ydata, marker='.', c='r')
＜オプション＞大バツマーカーを描画する	marker = 'X'
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
環境の名前を確める	sys.platform
データフレームを２つの列によってグループ化し、記述統計量を計算する	df.groupby(['A', 'B']).describe()
列からn個、サンプリングする	random.sample(iterable, k=n)
nとkの組み合わせ	math.comb(n, k)
グラフの描画で明るい色を使用する	sns.set(pallete='bright')
＜オプション＞ペールグリーン色を使う	color = 'palegreen'
日付時刻データをn分前にする	aDatetime - datetime.timedelta(minutes=n)
ヒストグラムの色を珊瑚に変更する	plt.hist(データ列, color='coral')
辞書をカウンタに変換する	collections.Counter(aDict)
データフレームから型の列のみ抽出する	df.select_dtypes(ty)
ヒストグラムを破線に指定する	plt.hist(データ列, linestyle='dashed')
＜オプション＞パールゴールデンロッド色を用いる	color = 'palegoldenrod'
anemptystring	''
＜オプション＞最初の行をヘッダに設定する	header = 0
折れ線グラフを描画して、色をダークグレーにする	plt.plot(データ列, データ列2, color='darkgrey')
行列の列ごとの最小を計算する	np.min(aArray, axis=0)
列'A'と列'B'をキーとして２つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
文字列に漢字が含まれる	re.search('[\u4E00-\u9FD0]', s)
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
要素が全て1の配列を初期化する	np.ones(要素数, dtype=np.int)
赤いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
データフレームの列をヒストグラムにする	plt.hist(df[column])
Pandasで、文字列を日付データにする	pd.to_datetime(s)
タプルを引数として展開して表示する	print(*aTuple)
折れ線グラフを描画して、色をゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='goldenrod')
データフレームから型を抽出する	df.select_dtypes(ty)
＜オプション＞文字コードtextを使う	encoding = text
文字列を末尾から空白で区切る	s.rsplit()
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
データフレームの中のカラムを四分位数ごとに分割する	pd.qcut(df[col], 4)
文字列の左側から空白を取り除く	s.lstrip(' ')
nがn2の倍数か調べる	n % n2 == 0
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='r')
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
データフレームのリストカラムのNaNを最頻値に変更する	df[aList].fillna(df[aList].mode().iloc[0])
暗い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='dark')
＜オプション＞ブランチドアーモンドに色を設定する	color = 'blanchedalmond'
データフレームを表示するとき、表示可能な列数の最大値をnに変更する	pd.set_option('display.max_columns', n)
＜オプション＞色をターコイズに設定する	color = 'turquoise'
イテラブルと配列についての散布図にカラーコードの▽マーカーを描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
データフレームの中にある日付データの合計を求める	df.isin([value]).sum()
＜オプション＞ミディアムスプリンググリーン色を用いる	color = 'mediumspringgreen'
実線にヒストグラムの線のスタイルを変更する	plt.hist(データ列, linestyle='solid')
ヒストグラムを描画してその色を黄色に設定する	plt.hist(データ列, color='yellow')
整数nを8進表現に変換する	oct(n)
整数nを16進数文字列に変換する	hex(n)[2:]
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
文字列が全て大文字かどうか調べる	s.isupper()
データ列を箱ヒゲ図にする	plt.boxplot(データ列)
データフレームを転置する	df.T
行列の行列積	np.matmul(aArray, aArray2)
ヒストグラムを描画して、色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
イテラブルとリストについての散布図に黒い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
リストの文字列が最初に見つかるインデックスを探す	aList.index(element)
タイムスタンプデータの秒数	aDatetime.second
データフレームの列の歪度	df[col].kurt()
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
折れ線グラフの菱形マーカーを青くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='b')
リストとリストを用いて暗いの折れ線をプロットして、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
カラムの欠損値をxで補う	ds.fillna(x)
データフレームの第三四分位数	df.quantile(0.75)
ヒストグラムを描画してその色をスラグレーに設定する	plt.hist(データ列, color='slategray')
三変数の最も小さい値	min(x, y, z)
xが1もしくは2	x == 1 or x == 2
無限な数列	itertools.count()
折れ線グラフのアルファをalphaに指定する	plt.plot(xdata, ydata, alpha=alpha)
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
折れ線グラフの色をグレーにセットする	plt.plot(データ列, データ列2, color='gray')
リストとイテラブルについてパステル調の色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
グリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='green')
線グラフを描画して、色をロイヤルブルーに変更する	plt.plot(データ列, データ列2, color='royalblue')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
ヒストグラムを描画してその色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
データフレームの末尾n行を抽出する	df.tail(n)
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
リストとリストについて破線グラフを描画して、その色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
ライトグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgrey')
折れ線グラフを描画して、その色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
折れ線グラフを描画して、その色をスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='springgreen')
データフレームのリスト列の中の欠損値の合計を数える	df[aList].isna().sum()
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
ティール色の線グラフを描画する	plt.plot(データ列, データ列2, color='teal')
Pandasで、エポック秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
データフレームを表示するとき、行数を変更する	pd.set_option('display.max_rows', n)
ヒストグラムを描画してその色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
実数が整数かどうか調べる	x.is_integer()
組内の要素が全て真か確認する	all(aTuple)
リストの長さ	len(aList)
データフレーム全体をインデックスによって小さい順に並べる	df.sort_index(ascending=True)
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
２つの最大値	max(x, y)
イテラブルからカウンタを作る	collections.Counter(iterable)
ヒストグラムを描画して、色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
ヒストグラムを描画して色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
分子n分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
折れ線グラフを描画してその色をゴールドに変更する	plt.plot(データ列, データ列2, color='gold')
ヒストグラムの色を白にセットする	plt.hist(データ列, color='white')
オプションで、標準出力に出力する	file = sys.stdout
双方向キューの末尾にイテラブルの値を付け加える	deq.extend(iterable)
リストが少なくとも一つ真	any(aList)
＜オプション＞サーモンにグラフの色を設定する	color = 'salmon'
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
nというシートをエクセルファイルファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ヒストグラムを描画して、その色をダークスラテグレーに指定する	plt.hist(データ列, color='darkslategray')
列をキーにして２つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
データフレームのカラムの中に含まれる日付データと文字列の合計を数える	df[col].isin([value, value2]).sum()
データフレームから重複する行を削除して、更新する	df.drop_duplicates(inplace=True)
全要素を０で初期化された８ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int8)
グラフ中の(x,y)の位置に凡例を入れる	plt.legend(loc=(x, y))
データ列が何分か調べる	ds.dt.minute
パステル調のの折れ線グラフを描画し、、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
ファイルパスを読み込み用にオープンして]、fとする	f = open(filepath, mode='r')
＜オプション＞ミディアムアクアマリンを使う	color = 'mediumaquamarine'
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
データフレームをJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
リストを引数として展開して表示する	print(*aList)
整数nがタプルのいづれかか調べる	n in aTuple
＜オプション＞グラフの色をパールゴールデンロッドに変更する	color = 'palegoldenrod'
リストとデータ列の濃いグラフを描画し、、色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
ランダムにデータフレームから抽出する	df.sample()
シーケンスを更新不能な集合にする	frozenset(iterable)
点線に折れ線グラフのスタイルをセットする	plt.plot(データ列, データ列2, linestyle='dotted')
データフレームのリストカラムのpercentパーセンタイルを計算する	df[aList].quantile(percent/100)
折れ線グラフを描画して、その色をライトコーラルに指定する	plt.plot(データ列, データ列2, color='lightcoral')
配列を淡い色のヒストグラムを用いて描画する	plt.hist(xdata, color='muted')
逆余弦	math.acos(x)
現在が何日か知る	datetime.datetime.today().day
ヒストグラムを描画して、色をダークターコイズに変更する	plt.hist(データ列, color='darkturquoise')
折れ線グラフの▲マーカーを赤色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
スクリプトの名前を知る	sys.argv[0]
文字列をパターンによって置き換える	re.sub(pattern, newsub, s)
文字列を全て大文字にする	s.upper()
データフレームのリストカラムのNaNをモードで埋める	df[aList].fillna(df[aList].mode().iloc[0])
リストとリストについての散布図にカラーコードの三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
異なる列をキーにして２つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームのカラムのNaNを平均値で埋める	df[col].fillna(df[col].mean())
破線グラフの色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
データフレームの中にいくつ日付データがあるか数える	df.isin([value]).sum()
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
データフレームの列がxより大きくx2より小さい行を選択する	df[(x < df[column]) & (df[column] < x2)]
＜オプション＞グラフの色をタンに設定する	color = 'tan'
データフレームを列の値にグループ化し、、標準偏差を求める	df.groupby(column).std()
カウンタ同士で∩	aCounter & aCounter2
等量でリストをn個にビン分割する	pd.qcut(aList, n)
列をキーにして２つのデータフレームを結合する	pd.merge(df, df2, on=column)
両端キューを使う	import collections
タイムスタンプデータの日数を見る	aDatetime.day
カウンタ同士でユニオンを求める	aCounter | aCounter2
＜オプション＞オレンジ色を使用する	color = 'orange'
ヒストグラムのプロットし、、正規化する	plt.hist(データ列, density=True)
横棒グラフを積み上げにする	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
データフレームのリストカラムの中にいくつ欠損値が存在するかカウントする	df[aList].isna().sum()
データフレームのインデックス名をまとめてnameからname2に変更する	df.rename(index={name: name2})
赤い星マーカーをリストと配列についての散布図に描画する	plt.plot(xdata, ydata, marker='*', c='r')
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
＜オプション＞赤に色を設定する	color = 'red'
データフレームの列が正規表現文字列にマッチする行を選ぶ	df[df[column].str.match(s)]
上限nの双方向キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
リストの度数分布図を描画する	plt.hist(aList)
折れ線グラフの色をローングリーンに変更する	plt.plot(データ列, データ列2, color='lawngreen')
黒い色差別ないを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
データフレームのn行以降選択する	df[n:]
＜オプション＞文字列を分割記号で使う	sep = s
折れ線グラフを描画して、その色をシアンに変更する	plt.plot(データ列, データ列2, color='cyan')
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
データフレームを'A'列と'B'列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
リストとリストの折れ線をプロットして、その色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
線グラフを描画して、その色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
ヒストグラムを描画して、その色をスノーに設定する	plt.hist(データ列, color='snow')
＜オプション＞グラフの色をデピンクに指定する	color = 'deeppink'
データフレームのリスト列の文字列を欠損値にする	df[aList].replace(s, np.nan)
英字を全部使う	string.ascii_letters
＜オプション＞色をダークターコイズに指定する	color = 'darkturquoise'
データフレームの列を十の位で丸める	df[col].round(-1)
ヒストグラムを描画してその色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
全要素を1で初期化された配列	np.ones(要素数, dtype=np.int)
散布図を黒い丸マーカーで描画する	plt.plot(xdata, ydata, marker='o', c='k')
nを切り捨てながら半分にする	n //= 2
ヒストグラムを描画してその色を暗い赤に設定する	plt.hist(データ列, color='darkred')
折れ線グラフに黒い下三角印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='k')
データフレームの列の中に日付データがあるか	df[col].isin([value])
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
逆双曲線正弦を求める	math.asinh(x)
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
空の集合	set()
算術計算ライブラリをインポートする	import math
デピンク色の線グラフを描画する	plt.plot(データ列, データ列2, color='deeppink')
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
折れ線グラフの星マーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
データ列を折れ線グラフに描画して、マーカーを大バツ印にする	plt.plot(データ列, データ列2, marker='X')
数列とリストについての散布図に黒いクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
ふたつの関係がスーパーセットもしくは等しい	aSet > aSet2
配列の累積積を計算する	np.cumprod(aArray)
リストとリストの淡いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
リストとリストの折れ線グラフを描画して色を文字列に指定する	plt.plot(xdata, ydata, color=s)
文字列を改行で区切る	s.splitlines()
＜オプション＞色をダークサーモンに変更する	color = 'darksalmon'
淡い色として配列とリストについての散布図を描画する	plt.plot(xdata, ydata, c='muted')
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='royalblue')
列'A'と列'B'をキーとして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームのカラムの平均値	df[col].mean()
nの十六進文字列	hex(n)[2:]
nが5の倍数かどうか調べる	n % 5 == 0
ファイルパスをオープンして]追加ストリームを見る	open(filepath, mode='a')
ファイルからエクセルデータを読む	pd.read_excel(filename)
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
線グラフの色をライトサーモンに設定する	plt.plot(データ列, データ列2, color='lightsalmon')
＜オプション＞グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
文字列リストを結合してひとつの文字列にする	''.join(map(str, iterable))
文字列に漢字が含まれるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
データフレームの重複していない行のみを取り出す	df[not df.duplicated(keep=False)]
データ列とリストの淡いグラフを描画して、色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
＜オプション＞ライムグリーンにグラフの色をセットする	color = 'limegreen'
データフレームのカラムの中に日付データと日付データが含まれるか確認する	df[col].isin([value, value2])
データフレームの中に文字列がある	df.isin([value])
データ列を折れ線グラフに描画して印を四角印にする	plt.plot(データ列, データ列2, marker='s')
リストの要素を昇順にソートする	sorted(aList, reverse=True)
モードでデータ列の欠損値を置換する	ds.fillna(ds.mode().iloc[0])
＜オプション＞グラフの色をバリーウッドに設定する	color = 'burlywood'
折れ線グラフを描画してその色をパパイヤウィップに変更する	plt.plot(データ列, データ列2, color='papayawhip')
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
集合が空でないか調べる	len(aSet) != 0
集合に配列の要素を全て追加する	aSet.update(iterable)
文字列をマゼンタで出力する	print(f'\033[35m{value}\033[0m')
折れ線グラフを描画してその色をアクアマリンに指定する	plt.plot(データ列, データ列2, color='aquamarine')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
文字列はタイトルケース	s.istitle()
データフレームのリストカラムの分散	df[aList].var()
ヒストグラムを描画してその色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
柱状グラフを色差別ない色で描画する	plt.hist(xdata, color='colorblind')
ひとつでも非大文字が文字列中に含まれる	any(not c.isupper() for c in s)
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
＜オプション＞グリーン色を使用する	color = 'green'
入力ストリームからnバイト読み込む	f.read(n)
両端キュー中の要素の数を数える	deq.count(element)
JSONLファイルにデータフレームを書き込む	df.to_excel(filename)
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
データフレームを列の値によってグループ化して、合計を求める	df.groupby(column).sum()
折れ線グラフの丸マーカーを黄色くする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
＜オプション＞濃いシアンにグラフの色を設定する	color = 'darkcyan'
ファイルを全部、読み込む	f.read()
行列の列ごとの標準偏差	np.std(aArray, axis=0)
プラム色の線グラフを描画する	plt.plot(データ列, データ列2, color='plum')
赤い下三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='v', c='r')
標準出力のバッファを強制表示する	sys.stdout.flush()
文字列の末尾から空白を取り除く	s.rstrip(' ')
データフレームの列名を列から文字列に付け直す	df.rename(columns={column: name})
リストと配列の黒色の暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='k')
データ列の文字列長を列として使う	ds.str.len()
項目名が辞書にあるか	key not in aDict
リストとリストの色差別ないグラフを描いてその色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
xの小数点以下'3'桁までの文字列にする	':.3f'.format(x)
＜オプション＞グラフの色をオリーブに設定する	color = 'olive'
印字可能な文字を全部使う	string.printable
nとn2の商	n / n2
線幅nの左三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
＜オプション＞ホットピンク色を使う	color = 'hotpink'
データフレームの中の列を四分位数でビンニングする	pd.qcut(df[col], 4)
黒い三角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='^', c='k')
＜オプション＞アクアマリンを使用する	color = 'aquamarine'
データフレームを二つの列の値でグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
イテラブルとリストの散布図に赤い四角マーカーを描く	plt.plot(xdata, ydata, marker='s', c='r')
＜オプション＞グラフの色をゴーストホワイトに変更する	color = 'ghostwhite'
マッピングから多重集合を生成する	collections.Counter(aDict)
オブジェクトは関数か	callable(obj)
xが1、もしくは2、もしくは3に等しい	x == 1 or x == 2 or x == 3
昇順に列によってデータフレームを整列して更新する	df.sort_values(by=column, ascending=True, inplace=True)
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
数式を簡単にする	sympy.sympify(e)
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
線グラフの色を青緑に変更する	plt.plot(データ列, データ列2, color='turquoise')
非大文字が文字列中に含まれるか調べる	any(not c.isupper() for c in s)
入力ストリームを一行ずつ読み込む	f.readline()
列をカテゴリデータに変換する	ds.astype(object)
ヒストグラムを描画してその色をアイボリーに変更する	plt.hist(データ列, color='ivory')
＜オプション＞ダークサーモン色を使う	color = 'darksalmon'
ヒストグラムを描画して、その色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
データ列を等しい量になるようにビン数nで分割する	pd.qcut(ds, n)
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
データフレームを'A'列を用いて降順に破壊的に並べ直す	df.sort_values(by='A', ascending=False, inplace=True)
データ列を折れ線グラフに描画してマーカーを三角印にする	plt.plot(データ列, データ列2, marker='^')
＜オプション＞ロイヤルブルーにグラフの色を変更する	color = 'royalblue'
データフレームの最頻値を計算する	df.mode()
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
黒色の淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
空文字	''
グラフをポスター用に指定する	sns.set(context='poster')
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列, データ列2, color='chartreuse')
二変数の最大値	max(x, y)
データ列とイテラブルについて淡いグラフを描画してその色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
データフレームを２つの列で大きい順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
＜オプション＞真紅色を用いる	color = 'crimson'
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
コロンで文字列を分割して、文字列リストに変換する	s.split(':')
折れ線グラフを描画して、その色をイエローグリーンに変更する	plt.plot(データ列, データ列2, color='yellowgreen')
オブジェクトは集合クラスか調べる	isinstance(obj, set)
floatの最大値	sys.float_info.max
リストを等量でビン数nで分割する	pd.qcut(aList, n)
＜オプション＞ビスクを用いる	color = 'bisque'
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
データフレームの列がx以上のデータを取り出す	df[df[column] >= x]
折れ線グラフの大バツ印のサイズをnに変更する	plt.plot(データ列, データ列2, marker='X', markersize=n)
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
＜オプション＞イエローグリーン色を用いる	color = 'yellowgreen'
ファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームの列の代表値	df[col].describe()
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
データフレームのNaNを最頻値で埋める	df.fillna(df.mode().iloc[0])
日付データは日付データよりあと	aDate > aDate2
文字列を最後の部分文字列で分割した場合の最初の文字列	s.rpartition(sub)[0]
列でデータフレームをソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
データフレームの列の値が欠損値か調べる	df[col].isna()
ファイルの読み込みストリームを使う	open(filepath)
データ列とリストで明るいグラフを描いて線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
＜オプション＞デピンク色を使う	color = 'deeppink'
データフレームを各列毎にグループ化して、列の最大値を算出する	df.groupby(column)[column2].max()
リストと数列についてリストに応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
双方向キューの末尾に値を入れる	deq.append(element)
配列をn個にビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
散布図にカラーコードの菱形マーカーを使う	plt.plot(xdata, ydata, marker='D', c=rgb)
オブジェクトが名前付きタプルか確認する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データフレームをカラムによってグループ化して各グループの合計を求める	df.groupby(column).sum()
両端キュー中の要素のインデックス	deq.index(element)
＜オプション＞色をスカイブルーに設定する	color = 'skyblue'
折れ線グラフのダイアモンド印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
数列とリストの散布図を描画して、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
黒い三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^', c='k')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
カラムの欠損値を平均値に設定する	ds.fillna(ds.mean())
折れ線グラフの色をダークバイオレットに指定する	plt.plot(データ列, データ列2, color='darkviolet')
表データの中で、列に重複があるか見る	df.duplicated(subset=column)
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
両端キューのn番目を使う	deq[n]
日付時刻データが水曜日か確認する	aDatetime.weekday() == 2
タプルの値を並べ変える	sorted(aTuple)
配列とリストの黒色のパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
８ビット整数型の０で全要素を初期化された行列	np.zeros(行数, 列数, dtype=np.int8)
データ列を折れ線グラフに描画して、マーカーをバツ印にする	plt.plot(データ列, データ列2, marker='x')
折れ線グラフの色をダークオレンジに変更する	plt.plot(データ列, データ列2, color='darkorange')
変数を白色でプリントする	print(f'\033[37m{value}\033[0m')
データフレームの列の欠損値を中央値に設定する	df[col].fillna(df[col].median())
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
データフレームの欠損値を最小値に指定する	df.fillna(df.min())
データフレームの列の欠損値を最大値に設定する	df[col].fillna(df[col].max())
パステル調のグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgray')
JSON形式の文字列を辞書にする	json.loads(jsonString)
マルーンにヒストグラムの色を設定する	plt.hist(データ列, color='maroon')
データフレームの尖度	df.skew()
データフレームのカラムのタイムゾーンを東京に設定する	df[col].tz_convert('Asia/Tokyo')
データ列を折れ線グラフに描画して、印をダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
明るい色をグラフの描画で使う	sns.set(pallete='bright')
フォレストグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='forestgreen')
データフレームのリストカラムを1000の位で四捨五入する	df[aList].round(-3)
リストとリストの色差別ないグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
データフレームの内の列と列に重複があれば、落とす	df.drop_duplicates(subset=column)
ファイルをバイナリ書き込みできるように開く]	open(filepath, mode='wb')
ヒストグラムをstartからendまでの範囲で描画する	plt.hist(データ列, range=(start, end))
データフレームの列を10の位で四捨五入する	df[col].round(-1)
浮動小数点数以上の最小の整数	math.ceil(x)
ファイルからnバイト、読む	f.read(n)
各カラム毎にデータフレームをグループ化して列の個数を求める	df.groupby(column)[column2].count()
ヒストグラムを描画して、色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
データフレームのリストカラムの欠損値を直後の値に指定する	df[aList].fillna(method='bfill')
折れ線グラフを描画してその色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
nが-9以上、9以下か調べる	-9 <= n <= 9
ヒストグラムを描画してその色をダークシアンにセットする	plt.hist(データ列, color='darkcyan')
パステル調のの折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
折れ線グラフに大きさnの菱形印を描画する	plt.plot(データ列, データ列2, marker='D', markersize=n)
実行環境のエンコーディング	sys.getdefaultencoding()
＜オプション＞グラフの色をフクシアに設定する	color = 'fuchsia'
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
ヒストグラムを描画して、その色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
ファイルをバイナリ書き込みモードとしてオープンする]	open(filepath, mode='wb')
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
辞書のキーに対応した値	aDict.get(key)
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
配列の要素ごとの積	np.multiply(aArray, aArray2)
データ列をヒストグラムを用いて可視化する	plt.hist(ds)
データフレームの中に存在する文字列と日付データの合計を数える	df.isin([value, value2]).sum()
ダークオーキッドにヒストグラムの色をセットする	plt.hist(データ列, color='darkorchid')
シアンにヒストグラムの色を設定する	plt.hist(データ列, color='cyan')
日付時刻データが木曜日か	aDatetime.weekday() == 3
データフレームの列の中に存在する文字列と文字列の数を数える	df[col].isin([value, value2]).sum()
箱ひげ図を横に並べてプロットする	plt.boxplot([データ列, データ列2])
線グラフを描画してその色をトマトに変更する	plt.plot(データ列, データ列2, color='tomato')
文字列を右トリムする	s.rstrip()
ヒストグラムを描画して色を青に指定する	plt.hist(データ列, color='blue')
折れ線グラフのマーカーを左三角印にする	plt.plot(データ列, データ列2, marker='<')
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
現在処理中の例外を情報を知る	sys.exc_info()
データ列を丸める	ds.round()
文字列中に非大文字があるか調べる	any(not c.isupper() for c in s)
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
改行で文字列を区切る	s.splitlines()
辞書のキーの値	aDict[key]
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
文字列モジュールをインポートする	import string
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
二つのデータ列を並べて柱状グラフにする	plt.hist([データ列, データ列2], color=['b', 'r'])
タイムスタンプデータは日付時刻データより早いか調べる	aDatetime < aDatetime2
散布図に黒い左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='k')
ヒストグラムの色をミッドナイトブルーにする	plt.hist(データ列, color='midnightblue')
データ列とラベルを指定して縦棒グラフを描画する	plt.bar(ラベル列, データ列)
数列とリストの散布図に赤いポイントマーカーを描く	plt.plot(xdata, ydata, marker='.', c='r')
マッピングからキーの値	aDict.get(key)
データフレームのカラムのNaNを平均値に設定する	df[col].fillna(df[col].mean())
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
リストとリストについて黒色の淡いグラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='k')
＜オプション＞シスルに色を変更する	color = 'thistle'
データ列のタイムゾーンを日本にセットする	ds.tz_convert('Asia/Tokyo')
ヒストグラムの線のスタイルを点線に指定する	plt.hist(データ列, linestyle='dotted')
データフレームの欠損値を直前の値に変更する	df.fillna(method='ffill')
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
配列とイテラブルで暗いの折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
レベッカパープルにヒストグラムの色を指定する	plt.hist(データ列, color='rebeccapurple')
リストの最初のn要素を取り除く	aList[n:]
オブジェクトは文字列クラスのインスタンス	isinstance(obj, str)
＜オプション＞フォレストグリーン色を用いる	color = 'forestgreen'
データフレームの欠損値が含まれる部分に	df.style.highlight_null()
文字列の末尾から部分文字列を探す	s.rfind(sub)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
折れ線グラフの色をシスルに指定する	plt.plot(データ列, データ列2, color='thistle')
配列をビン数nでビニングする	pd.cut(aArray, n)
データフレームのカラムの文字列長を列として使う	df[col].str.len()
線グラフの色をパレットトルコイズに設定する	plt.plot(データ列, データ列2, color='paleturquoise')
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
＜オプション＞パレットトルコイズを使う	color = 'paleturquoise'
ヒストグラムを描画してその色をティールに変更する	plt.hist(データ列, color='teal')
リストとリストについて破線グラフを描画して、その色を明るいに設定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
ヒストグラムの色をダークスラテグレーにする	plt.hist(データ列, color='darkslategray')
データフレームのカラムのNaNを直前の値に設定する	df[col].fillna(method='ffill')
赤色の丸マーカーを数列とデータ列についての散布図に描く	plt.plot(xdata, ydata, marker='o', c='r')
複数の列の値毎にデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
プロットの描画を綺麗にする	import seaborn as sns
イテラブルから両端キューを作る	collections.deque(iterable)
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
文字列TSVファイルからn番目の列をインデックスとしてCSVファイルを読み込む	pd.read_csv(filename, index_col=n)
ヒストグラムを描画して、その色をブランチドアーモンドに変更する	plt.hist(データ列, color='blanchedalmond')
ヒストグラムを描画して、その色をビスクにする	plt.hist(データ列, color='bisque')
タプルをセットに変換する	set(iterable)
折れ線グラフに緑色の星マーカーを描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
カラムの名前なしでTSVファイルを読む	pd.read_csv(filename, header=None)
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
散布図にカラーコードの左三角マーカーを用いる	plt.plot(xdata, ydata, marker='<', c=rgb)
データフレームのリストカラムの中にいくつ欠損値があるかカウントする	df[aList].isna().sum()
カウンタの値一覧を使う	aCounter.keys()
濃いグラフの色を青色に設定する	plt.plot(xdata, ydata, linestyle='deep', color='b')
ヒストグラムを描画して色を青に設定する	plt.hist(データ列, color='blue')
＜オプション＞ライトグレー色を使用する	color = 'lightgrey'
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
全要素を０で初期化された８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
文字列が組の要素かどうか調べる	element in aTuple
文字列中の小文字を大文字に変換する	s.upper()
0からnまでの整数列を作る	list(range(n+1))
nが集合のどれかかどうか調べる	n in aSet
文字列中に非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
ヒストグラムの色をグリーンイエローにセットする	plt.hist(データ列, color='greenyellow')
ヒストグラムを描画して、その色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
＜オプション＞グリーンにグラフの色をセットする	color = 'green'
正規表現をコンパイルする	re.compile(pattern)
データフレームの中で列と列の重複をドロップする	df.drop_duplicates(subset=[column, column2])
暗い色の折れ線を描いて、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
折れ線グラフを描画して、その色をベージュにセットする	plt.plot(データ列, データ列2, color='beige')
リストとリストについての散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
線グラフを描画して、色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
ヒストグラムを描画してその色をライトコーラルにする	plt.hist(データ列, color='lightcoral')
二つのデータフレームを列をキーにして結合する	pd.merge(df, df2, on=column)
辞書のコピー	dict(aDict)
データフレームのインデックスがnの行を取り出す	df.loc[n]
分割数nでデータ列をビン分割する	pd.cut(ds, n)
ヒストグラムを描画して、その色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
カラーコードの星マーカーを散布図に使う	plt.plot(xdata, ydata, marker='*', c=rgb)
＜オプション＞ダークマゼンタにグラフの色を指定する	color = 'darkmagenta'
列のコンビネーション	itertools.combinations(iterable, n)
タプルの末尾	aTuple[-1]
文字列の大文字と小文字を交換する	s.swapcase()
リストとリストについての散布図に四角マーカーを描く	plt.plot(xdata, ydata, marker='s')
配列と配列の暗いを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='dark', color='k')
折れ線グラフを描画して、色をミディアムスレートブルーに設定する	plt.plot(データ列, データ列2, color='mediumslateblue')
ふたつの集合の対称差	aSet.symmetric_difference(aSet2)
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
折れ線グラフを描画してその色をダークバイオレットにセットする	plt.plot(データ列, データ列2, color='darkviolet')
リストと配列の散布図を描画して、色を濃いに変更する	plt.plot(xdata, ydata, c='deep')
書き込みできるようにSJISでファイルをオープンする]	open(filepath, mode='w', encoding='shift_jis')
折れ線グラフを描画して、その色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
赤い丸マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='o', c='r')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
ファイルを追加用にオープンして]、fとする	f = open(filepath, mode='a')
グラフの描画で色差別ないカラーパレットを使う	sns.set(pallete='colorblind')
データフレームの最後n行を取り出す	df.tail(n)
折れ線グラフを描画して、その色をビスクに設定する	plt.plot(データ列, データ列2, color='bisque')
リストとリストについて暗い色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
列の一意な値を見る	ds.unique()
ヒストグラムを描画して、色を白に指定する	plt.hist(データ列, color='white')
グラフの中のy軸にuntitledというラベルを付ける	plt.ylabel(untitled)
要素がセットのメンバーか	element in aSet
ヒストグラムを描画して色を黄色に設定する	plt.hist(データ列, color='yellow')
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='r')
文字列の中のASCII限定としてパターンによるマッチを求める	re.findall(pattern, s, flags=re.ASCI)
整数nを二進表記に変換する	bin(n)
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='k')
オブジェクトはタプルに含まれない	element not in aTuple
ヒストグラムを描画してその色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
カラーコードの▽マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='v', c=rgb)
オブジェクトがタプルの要素でないか調べる	element not in aTuple
データフレームからカテゴリデータの列名一覧	df.select_dtypes('object').columns
丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o')
リストとリストのパステル調のを描き、、その色を黒くする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
縦棒グラフをプロットする	plt.bar(ラベル列, データ列)
ヒストグラムを描画して、色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
＜オプション＞グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
リストとリストを用いて濃いグラフをプロットして、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
折れ線グラフを描画して、色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
折れ線グラフを描画して色をアクアマリンに指定する	plt.plot(データ列, データ列2, color='aquamarine')
配列とリストについて淡い色の折れ線を描画して、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='muted')
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
データフレームを各列と列の組み合わせ毎に集約して、分散を求める	df.groupby([column, column2], as_index=False).var()
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
データ列の欠損値をモードに設定する	ds.fillna(ds.mode().iloc[0])
FIXME:カテゴリーデータを出現頻度順に並べる	df['A'].value_counts().sort_index().index
実数のn乗	x ** n
折れ線グラフに青い▲マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
線グラフを描画して、色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
＜オプション＞色をミディアムスプリンググリーンに変更する	color = 'mediumspringgreen'
配列とイテラブルについて明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
データフレームをエクセルファイルでJSONLファイルに保存する	df.to_excel(filename)
二変数の最も小さい値を計算する	min(x, y)
日付時刻データの曜日を使う	aDatetime.weekday()
リストの中の最小値を求める	min(aList)
リストと数列について散布図を描画して、マーカーをクロスにセットする	plt.plot(xdata, ydata, marker='x')
折れ線グラフの色をラベンダーに指定する	plt.plot(データ列, データ列2, color='lavender')
線グラフの色をダークグレーに変更する	plt.plot(データ列, データ列2, color='darkgray')
赤い色差別ないの折れ線グラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
nからn2までの一つ置きの整数列を作る	list(range(n, n2+1, 2))
折れ線グラフの星マーカーを青くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
浮動小数点数に実数を掛ける	x * y
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
クラスのサブクラスかどうか	issubclass(サブクラス, クラス)
＜オプション＞小麦色色を使用する	color = 'wheat'
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
ベクトルの最小値	np.min(aArray)
文字列を中央寄せにする	s.center(文字列幅)
ヒストグラムの色をモカシンに変更する	plt.hist(データ列, color='moccasin')
リストの平均値	sum(aList)/len(aList)
折れ線グラフを描画して、その色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
文字列の左端の空白を取り除く	s.lstrip()
キューの最初に値を追加する	deq.appendleft(element)
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
リストとリストで濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
ファイルを開き]、書き込みストリームを見る	open(filepath, mode='w')
文字列を改行によって区切る	s.splitlines()
データ列を使う	import pandas as pd
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
暗い色として散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
線グラフの色を赤に設定する	plt.plot(データ列, データ列2, color='red')
散布図に赤い右三角マーカーを使う	plt.plot(xdata, ydata, marker='>', c='r')
標準入力から1文字だけ読む	sys.stdin.read(1)
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
ふたつの集合のインターセクション	aSet.intersection(aSet2)
ヒストグラムを描画して、色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
データ列を明るい色のヒストグラムとして描画する	plt.hist(xdata, color='bright')
折れ線グラフの丸印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
＜オプション＞グレーを使用する	color = 'gray'
折れ線グラフの色をミディアムシアグリーンにする	plt.plot(データ列, データ列2, color='mediumseagreen')
折れ線グラフを描画して、その色をダークバイオレットに設定する	plt.plot(データ列, データ列2, color='darkviolet')
綺麗なグラフを描画する準備をする	import seaborn as sns
日付データの日数を使う	aDate.day
データフレームの重複した行数を数える	df.duplicated().sum()
辞書の浅いコピーを作成する	aDict.copy()
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
ヒストグラムを描画して、その色をダークレッドに設定する	plt.hist(データ列, color='darkred')
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
数列とリストについての散布図に赤い△マーカーをプロットする	plt.plot(xdata, ydata, marker='^', c='r')
多い順にカウンタを列挙する	aCounter.most_common()
＜オプション＞カデットブルー色を使う	color = 'cadetblue'
リストと数列について散布図を描いて、マーカーを星に変更する	plt.plot(xdata, ydata, marker='*')
リストのオブジェクトの位置をエラーなく求める	aList.index(element) if element in aList else -1
三数の最も小さい値	min(x, y, z)
日付データが日曜日か調べる	aDate.weekday() == 6
数列と配列についての散布図にカラーコードの丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c=rgb)
折れ線グラフを描画して、その色をミディアムアクアマリンに設定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
＜オプション＞大文字・小文字を無視する	flag = re.IGNORECASE
＜オプション＞ゴールデンロッド色を使う	color = 'goldenrod'
ヒストグラムの色をミディアムスプリンググリーンに指定する	plt.hist(データ列, color='mediumspringgreen')
配列についてのヒストグラムを明るい色を使って描画する	plt.hist(xdata, color='bright')
折れ線グラフの色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
データフレームのリストカラムのNaNを直前の値で埋める	df[aList].fillna(method='ffill')
最大長nの両端キューをリストから作る	collections.deque(iterable, maxlen=n)
列名リストによってデータフレームをまとめたグループ	df.groupby(columns)
大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X')
＜オプション＞ゴーストホワイトにグラフの色を指定する	color = 'ghostwhite'
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(xdata, ydata, marker='^')
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
変数を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
リストとイテラブルで明るいグラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
配列と数列でパステル調のグラフを描画してその線幅をnにセットする	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
線グラフの色をフクシアに設定する	plt.plot(データ列, データ列2, color='fuchsia')
データ列を使う	import pandas as pd
データフレームの内で何行、重複するか見る	df.duplicated().sum()
リストを更新不能な集合にする	frozenset(iterable)
各列毎にデータフレームをグループ化して列の個数を求める	df.groupby(column)[column2].count()
折れ線グラフに描画して、マーカーを左三角印にする	plt.plot(データ列, データ列2, marker='<')
空白文字を全部見る	string.whitespace
＜オプション＞ライム色を使う	color = 'lime'
データフレームを'A'列を用いてによって破壊的に並べる	df.sort_values(by='A', inplace=True)
＜オプション＞パウダーブルー色を使う	color = 'powderblue'
＜オプション＞カーキ色を使う	color = 'khaki'
データフレームの列の各データは何回出現するか見る	df[col].value_counts()
配列の最大値	np.max(aArray)
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
JSONファイルの入力を読み込んでdataとする	data = json.load(fin)
等差数列から整数乱数を生成する	random.randrange(start, end, step)
リストとデータ列についての散布図に赤い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
データフレームを表示するときヘッダー行を右寄せにセットする	pd.set_option('colheader_justify', 'right')
ライムグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='limegreen')
折れ線グラフを描画して、その色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
散布図にポイントマーカーを使う	plt.plot(xdata, ydata, marker='.')
データフレームを列で昇順に並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
セットから別の集合との共通要素を除く	aSet.symmetric_difference_update(aSet2)
文字列の右側から部分文字列を見つける	s.rfind(sub)
ベクトルの各要素のアダマール積	np.multiply(aArray, aArray2)
データ列を折れ線グラフに描画して、印を星にする	plt.plot(データ列, データ列2, marker='*')
リストとリストのカラーコードの色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
リストとリストについて散布図を描画して、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
＜オプション＞ミディアムターコイズ色を使う	color = 'mediumturquoise'
折れ線グラフのスタイルを一点鎖線に設定する	plt.plot(データ列, データ列2, linestyle='dashbot')
＜オプション＞読み込むシートの名前をnamesに指定する	sheet_name = names
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
配列と配列のカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
列のユニークな値の個数を見る	ds.nunique()
折れ線グラフを描画して、その色をダークグリーンにする	plt.plot(データ列, データ列2, color='darkgreen')
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
列名リストでデータフレームをグループ化し、要約統計量を求める	df.groupby(columns).describe()
＜オプション＞ビスクにグラフの色をセットする	color = 'bisque'
シアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='cyan')
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
文字列を緑色にする	f'\033[32m{value}\033[0m'
重なりを見やすくリストと数列についての散布図を淡い色として描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
縦棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
ヒストグラムを描画して、その色をライトイエローに変更する	plt.hist(データ列, color='lightyellow')
ヒストグラムの色をディープスカイブルーにする	plt.hist(データ列, color='deepskyblue')
全要素を０で初期化された複素数型の行列を初期化する	np.zeros(行数, 列数, dtype=bool)
＜オプション＞グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
線幅nの折れ線をプロットする	plt.plot(xdata, ydata, linewidth=n)
散布図をパステル調の色のマーカーで描画する	plt.plot(xdata, ydata, c='pastel')
最大値でカラムのNaNを埋める	ds.fillna(ds.max())
リストとリストの青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
折れ線グラフにバツマーカーを加える	plt.plot(データ列, データ列2, marker='x')
折れ線グラフの星印を黒色にする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='k')
＜オプション＞チョコレート色を用いる	color = 'chocolate'
ヒストグラムを描画して、色をグレーに変更する	plt.hist(データ列, color='gray')
折れ線グラフに大きさnの左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markersize=n)
n個に配列を分割する	pd.cut(aArray, n)
ヒストグラムの色をスカイブルーにする	plt.hist(データ列, color='skyblue')
ヒストグラムの区間数を設定する	plt.hist(データ列, bins=n)
ファイルパスをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
オブジェクトが名前付きタプル	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
sepを区切りとして文字列リストを連結する	sep.join(aStringList)
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
折れ線グラフの四角マーカーを青くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='b')
ヒストグラムを描画して、その色をコーラルに設定する	plt.hist(データ列, color='coral')
暗い色としてリストと数列についての散布図を描画する	plt.plot(xdata, ydata, c='dark')
折れ線グラフを描画して、その色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
オブジェクトのクラス	type(obj)
無限にnから数え上げるする	itertools.count(start=n)
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
イテラブルとリストについての散布図に黒い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
ビン数nで等量でデータフレームの中の列を分割する	pd.qcut(df[col], n)
データフレームの値が欠損値かどうか調べる	df.isna()
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
棒グラフを描画し、、幅をxに変更する	plt.bar(ラベル列, データ列, width=x)
ファイルを書き込みモードで開き]、fとする	f = open(filepath, mode='w')
データ列の年を使う	ds.dt.year
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='k')
データ列とラベル列を指定して、横棒グラフを描画する	plt.barh(ラベル列, データ列)
アルファベットを使う	string.ascii_letters
ヒストグラムを描画してその色をライトコーラルにセットする	plt.hist(データ列, color='lightcoral')
列を両端キューに変換する	collections.deque(iterable)
線グラフを描画して、その色をスラグレーに指定する	plt.plot(データ列, データ列2, color='slategrey')
折れ線グラフを描画して、その色をブラックに指定する	plt.plot(データ列, データ列2, color='black')
ヒストグラムを描画して、色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
散布図を黒色の下三角マーカーとして描画する	plt.plot(xdata, ydata, marker='v', c='k')
＜オプション＞ライトスレイグレーに色を指定する	color = 'lightslategray'
句読点文字を全部求める	string.punctuation
行列の分散を求める	np.var(aArray)
タイムスタンプデータとタイムスタンプデータの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
Pandasで、フォーマットでデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
ひとつでも大文字が文字列内に含まれるか調べる	any(c.isupper() for c in s)
配列をビン数nで分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
点線ヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
既存のファイルを文字コードtextとして追加できるように開く]	open(filepath, mode='a', encoding=text)
実数を切り下げる	math.floor(x)
折れ線グラフに線幅nの四角マーカーを描画する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
グラフを描く準備をする	from sympy import N
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
データ列とリストについて散布図を描画し、、マーカーを菱形に設定する	plt.plot(xdata, ydata, marker='D')
nをn2で割る	n / n2
文字列内に大文字があるか	any(c.isupper() for c in s)
日付データをISO8601形式の文字列に変換する	aDate.isoformat()
異なる列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
2つの文字列が大文字小文字を無視して同じか	s.casefold() == s2.casefold()
＜オプション＞グラフの色をビスクに設定する	color = 'bisque'
２つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
ヒストグラムを描画して、その色をシルバーに設定する	plt.hist(データ列, color='silver')
データフレームの要約統計量を求める	df.describe()
分子と分母から有理数を用意する	fractions.Fraction(分子, 分母)
ヒストグラムを描画して、その色を紺碧に設定する	plt.hist(データ列, color='azure')
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(xdata, ydata, marker='s')
データ列の時刻を求める	ds.dt.hour
データフレームを列でソートする	df.sort_values(by=column)
辞書をチェーンマップにする	collections.ChainMap(aDict)
データフレームの重複していない行だけを抽出する	df[not df.duplicated(keep=False)]
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
データフレームの欠損値が含まれる部分を色つけする	df.style.highlight_null()
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
タイムスタンプデータが月曜日か調べる	aDatetime.weekday() == 0
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
散布図をカラーコードのポイントマーカーとして描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
＜オプション＞バリーウッドを使用する	color = 'burlywood'
折れ線グラフを描画して、色をアイボリーに変更する	plt.plot(データ列, データ列2, color='ivory')
黒い濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color='k')
折れ線グラフを描く	plt.plot(xdata, ydata)
nをn2乗に増やす	n **= n2
データ列の年	ds.dt.year
文字列の開始位置から先に部分文字列が含まれないか	s.find(sub, start) == -1
各列毎にデータフレームをグループ化して列の最小値を計算する	df.groupby(column)[column2].min()
色差別ないグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
＜オプション＞BOM付きを用いる	encoding = 'utf_8_sig'
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
ヒストグラムを描画して色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
データフレームの行と列を入れ替える	df.T
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
カラーバーを付ける	plt.colorbar()
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列, データ列2, color='lightskyblue')
＜オプション＞紺碧色を使う	color = 'azure'
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
＜オプション＞グラフの色をライトグレーに設定する	color = 'lightgrey'
シーグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='seagreen')
回数を制限して文字列中の部分文字列を新しい文字列に置換する	s.replace(sub, newsub, n)
折れ線グラフを描画して、その色を紺碧に変更する	plt.plot(データ列, データ列2, color='azure')
折れ線グラフにバツマーカーを用いる	plt.plot(データ列, データ列2, marker='x')
ファイルを解放する	f.close()
タプルの最初	aTuple[0]
散布図に黒色の△マーカーを使う	plt.plot(xdata, ydata, marker='^', c='k')
リストの全ての要素をクリアにする	aList.clear()
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
明るいの折れ線グラフをリストとリストで描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
データフレームのリスト列の中に文字列と文字列がいくつあるかカウントする	df[aList].isin([value, value2]).sum()
ファイルパスをバイナリできるようにオープンする]	open(filepath, mode='rb')
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
リストからオブジェクトを取り除く	aList.remove(element)
ファイルを開いて]バイナリストリームを見る	open(filepath, mode='rb')
オブジェクトの属性の値を値に設定する	setattr(obj, プロパティ名, 値)
列をn個に等間隔で分割する	pd.cut(ds, n)
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
＜オプション＞破壊的に操作する	inplace = True
＜オプション＞グラフの色をベージュに変更する	color = 'beige'
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
ヒートマップとして表データの相関行列を描画する	sns.heatmap(df.corr())
折れ線グラフに大きさnのポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markersize=n)
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
ヒストグラムの色をラベンダーに変更する	plt.hist(データ列, color='lavender')
散布図に赤い大バツマーカーを使う	plt.plot(xdata, ydata, marker='X', c='r')
日付時刻データが金曜日か	aDatetime.weekday() == 4
データフレームを整数に丸める	df.round()
タプルの中の最大値を計算する	max(aTuple)
xのハッシュ値を算出する	hash(x)
文字列内にひとつでも小文字があるかどうか	any(c.islower() for c in s)
nが3で割り切れる	n % 3 == 0
値が集合のメンバーに含まれないか調べる	element not in aSet
＜オプション＞色を青紫に変更する	color = 'violet'
タプルの最後のn要素を除く	aTuple[:-n]
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
リストに応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
日付データの曜日を整数で使う	aDate.weekday()
折れ線グラフを描画して、その色をパープルにする	plt.plot(データ列, データ列2, color='purple')
データ列とリストの散布図を描き、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
棒グラフをプロットし、棒の幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
文字列を隔離する	sys.intern(s)
データ列をビン数nを用いてビニングする	pd.cut(ds, n)
オブジェクトは数値か	isinstance(obj, (int,float))
配列の列ごとの合計値を求める	np.sum(aArray, axis=0)
折れ線グラフにバツ印を加える	plt.plot(データ列, データ列2, marker='x')
nの無限数列	itertools.repeat(n)
折れ線グラフを描画して、その色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
nをn2で割った剰余を求める	n % n2
列によってデータフレームをソートし、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
カウンタをリセットする	aCounter.clear()
データフレームのリストカラムのNaNを平均で埋める	df[aList].fillna(df[aList].mean())
データフレームのカラムが何時か見る	df[col].dt.hour
＜オプション＞ダークグリーン色を用いる	color = 'darkgreen'
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
フォーマットとしてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
青緑色の線グラフを描画する	plt.plot(データ列, データ列2, color='teal')
データフレームを各列と列の組み合わせ毎にグループ分けして、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
＜オプション＞グレーにグラフの色をセットする	color = 'grey'
グラフの描画でパステル調のカラーパレットを用いる	sns.set(pallete='pastel')
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
データフレームの列名を指定された列名一覧に置き換える	df.columns = columns
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
nが配列のひとつか調べる	n in aArray
＜オプション＞青紫を用いる	color = 'violet'
データフレームの列を欠損値も加えてワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
列を中央値でビン分割する	pd.qcut(ds, 2)
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
ライトイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightyellow')
＜オプション＞ネイビー色を使う	color = 'navy'
データフレームから重複したデータを取り除い、、更新する	df.drop_duplicates(inplace=True)
全要素を０で初期化した行列	np.zeros(行数, 列数)
タプルの中の最も大きい値を求める	max(aTuple)
黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
データフレームのリストカラムの中に文字列がある	df[aList].isin([value])
実数の二乗	x ** 2
データフレームのカラムの分散	df[col].var()
Pandasでエポック秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
データ列の欠損値をメディアンに設定する	ds.fillna(ds.median())
＜オプション＞ブランチドアーモンド色を使用する	color = 'blanchedalmond'
赤い明るいグラフを描く	plt.plot(xdata, ydata, linestyle='bright', color='r')
リストとリストについて散布図をプロットして、ポイントマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='.', c=rgb)
折れ線グラフのダイアモンド印を黄色くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
文字列の右側からタブを取り除く	s.rstrip('\t')
ファイルに文字列を書き込む	f.write(s)
双方向キューの先頭の要素	deq[0]
実数の逆双曲線正接を求める	math.atanh(x)
ヒストグラムの色を暗い赤に指定する	plt.hist(データ列, color='darkred')
本日が月曜日かどうか調べる	datetime.datetime.today().weekday() == 0
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
折れ線グラフを描画して、その色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
数列とリストについての散布図に黒い三角マーカーを描く	plt.plot(xdata, ydata, marker='^', c='k')
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
TSVファイルをデータフレームとして読む	pd.read_csv(filename, sep='\t')
空のマッピング	{}
文字列はリストの要素でないか調べる	element not in aList
折れ線グラフを描画して、その色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
＜オプション＞ホットピンクにグラフの色をする	color = 'hotpink'
リストとイテラブルの散布図にカラーコードの丸マーカーを描く	plt.plot(xdata, ydata, marker='o', c=rgb)
データフレームの正規分布に対する左右対称性	df.kurt()
＜オプション＞グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
文字列が文字列リストのいづれか調べる	s in aStringList
折れ線グラフを描画して、色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
折れ線グラフに線幅nの右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
nが3の倍数か調べる	n % 3 == 0
行列の累積和を求める	np.cumsum(aArray)
パステル調の色を使ってイテラブルについてのヒストグラムを描画する	plt.hist(xdata, color='pastel')
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
文字列のエポック秒からタイムスタンプ型にする	pd.to_datetime(s, unit='s', utc=True)
折れ線グラフを描画してその色をミディアムパープルに指定する	plt.plot(データ列, データ列2, color='mediumpurple')
ふたつの関係が真スーパーセットか調べる	aSet > aSet2
ファイルを書き込みモードでオープンして]fとする	f = open(filepath, mode='w')
データフレームのn行目をインプレイスで削除する	df.drop(n, axis=0, inplace=True)
ヒストグラムを描画して、その色をモカシンに変更する	plt.hist(データ列, color='moccasin')
まとめてValueMapでデータ列の値を置き換える	ds.replace(ValueMap)
浮動小数点数の双曲線余弦を求める	math.cosh(x)
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
ヒストグラムの色をライトグリーンにする	plt.hist(データ列, color='lightseagreen')
列を丸めて整数型にする	ds.round().astype(int)
折れ線グラフのポイント印を青くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
データフレームを各列と列の組み合わせ毎に集計して、最小値を求める	df.groupby([column, column2], as_index=False).min()
オブジェクトの固有のID	id(obj)
三変数の最小値	min(x, y, z)
横棒グラフの色を指定する	plt.barh(ラベル列, データ列, color=rgb)
空列	[]
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
青い色差別ないグラフをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
オプションで、標準エラーを使う	file = sys.stderr
現在は何月か知る	datetime.datetime.today().month
データ列と配列についての散布図を暗い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
折れ線グラフに黄色いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
データ列とリストについての散布図を淡い色で描く	plt.plot(xdata, ydata, c='muted')
配列とイテラブルについて色差別ないグラフを描画して、色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
nが負の数	n < 0
データ列とラベルを指定して、縦棒を描画する	plt.bar(ラベル列, データ列)
データフレームの指定された列を抽出する	df[column]
文字列中に非大文字が含まれるか	any(not c.isupper() for c in s)
データ列とラベル列を指定して、横棒を描画する	plt.barh(ラベル列, データ列)
ヒストグラムの色をオリベドラブにセットする	plt.hist(データ列, color='olivedrab')
データ列が何月か見る	ds.dt.month
データ列をビン数nで分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
配列とリストについて青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列, データ列2, color='lightcoral')
三整数の最小公倍数	math.lcm(n, n2, n3)
リストが空か調べる	len(aList) == 0
ヒストグラムの色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
ヒストグラムを描画して、その色をペルーに設定する	plt.hist(データ列, color='peru')
列数を変更する	pd.set_option('display.max_columns', n)
ヒストグラムを描画して、その色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
線幅nの折れ線グラフを描画する	plt.plot(xdata, ydata, linewidth=n)
線グラフを描画して、その色をティールにセットする	plt.plot(データ列, データ列2, color='teal')
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
線グラフの色をシーグリーンに指定する	plt.plot(データ列, データ列2, color='seagreen')
数を小数点以下で四捨五入する	round(x, n)
ファイルパスを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
ファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
＜オプション＞グラフの色をシアンに設定する	color = 'cyan'
文字列の先頭から空白を取り除く	s.lstrip()
本日の曜日を整数で使う	datetime.datetime.today().weekday()
ヒストグラムを描画してその色をデピンクに設定する	plt.hist(データ列, color='deeppink')
実行環境がLinux	sys.platform.startswith('linux')
日付データが土曜日かどうか調べる	aDate.weekday() == 5
赤いバツマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='x', c='r')
データ列とリストのカラーコードの濃いグラフをプロットする	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
エラーを出力する	sys.stderr
データフレームの中の列をビン数nを用いてビニングする	pd.cut(df[col], n)
＜オプション＞エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
＜オプション＞n番目のカラムをインデックスに設定する	index_col = n
＜オプション＞文字コードを文字コードtextに設定する	encoding = text
プロットの色テーマを濃くする	sns.set(pallete='deep')
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
ふたつの集合の差集合	aSet.difference(aSet2)
データフレームの内容を見る	df.head()
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
データフレームを列によってによって降順に並べ直す	df.sort_values(by=column, ascending=False)
文字列を文字リストに変換する	list(s)
データフレームの指定された列を配列に変換する	df[column].values
カウンタから最頻出な文字列の件数	aCounter.most_common()[1]
nとn2の積	n * n2
折れ線グラフを描画して、色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
暗いグラフをリストとリストで描画してその線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
折れ線グラフに赤い星印を描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
プロットにグリッド線を入れる	plt.grid(True)
集合から別の集合の要素を全て除く	aSet.difference_update(aSet2)
ファイルから1文字読み込む	f.read(1)
現在の分数	datetime.date.today().minute
十六進文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
＜オプション＞スレートブルー色を使う	color = 'slateblue'
新しい文字列で文字列を置換する	s.replace(sub, newsub)
ヒストグラムを描画して、色を赤に設定する	plt.hist(データ列, color='red')
ヒストグラムの色をゲインズボロに指定する	plt.hist(データ列, color='gainsboro')
サイコロ	random.randint(1, 6)
ロージーブラウン色の線グラフを描画する	plt.plot(データ列, データ列2, color='rosybrown')
データフレームをグループ化し列に対し最小値を計算する	df.groupby(column)[column2].min()
辞書の値の一覧	aDict.values()
データフレームのリスト列のNaNを直後の値に設定する	df[aList].fillna(method='bfill')
nの8進表現	oct(n)
データフレームを1000の位で丸めて整数型にする	df.round(-3).astype(int)
文字列で区切って二つの変数を表示する	print(value, value2, sep=s)
文字列中の部分文字列の登場をカウントする	s.count(sub)
濃いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='deep', color='r')
集合から任意の要素を取り出す	aSet.pop()
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
折れ線グラフの色をオリーブに設定する	plt.plot(データ列, データ列2, color='olive')
線グラフを描画して、その色を白に変更する	plt.plot(データ列, データ列2, color='white')
nからstep間隔でいつまでも数え上げるする	itertools.count(start=n, step=step)
線グラフを描画して色をミントクリームに設定する	plt.plot(データ列, データ列2, color='mintcream')
リストとリストについて散布図を描画して星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
＜オプション＞トマトを使用する	color = 'tomato'
淡い色で配列についてのヒストグラムを描画する	plt.hist(xdata, color='muted')
実数を実数で整数除算する	x // y
＜オプション＞コーンフラワーブルー色を使う	color = 'cornflowerblue'
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
Pandasで、フォーマットfmtで文字列をdatetime64型に変換する	pd.to_datetime(s, format=fmt)
乱数シードをnで初期化する	random.seed(n)
＜オプション＞グラフの色をミディアムバイオレットレッドにする	color = 'mediumvioletred'
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
折れ線グラフのマーカーを▲印にする	plt.plot(データ列, データ列2, marker='^')
nが3の倍数	n % 3 == 0
イテラブルのコンビネーション	itertools.combinations(iterable, n)
＜オプション＞シーグリーンにグラフの色を設定する	color = 'seagreen'
散布図に三角マーカーを使う	plt.plot(xdata, ydata, marker='^')
リストとリストの濃いを描いて、その色を青くする	plt.plot(xdata, ydata, linestyle='deep', color='b')
データフレームから数値データの列を取り出す	df.select_dtypes('number')
折れ線グラフを描画してその色をライトブルーに変更する	plt.plot(データ列, データ列2, color='lightblue')
グラフのカラーパレットを全般的に淡くする	sns.set(pallete='muted')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
リストの末尾に文字列を追加する	aList.append(element)
折れ線グラフの四角印を黒くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
＜オプション＞ペールグリーンを用いる	color = 'palegreen'
折れ線グラフを描画して、その色をアリスブルーに変更する	plt.plot(データ列, データ列2, color='aliceblue')
二次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
ベクトルの演算をする	import numpy as np
＜オプション＞ゴーストホワイト色を使う	color = 'ghostwhite'
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
日付データが木曜日か	aDate.weekday() == 3
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
折れ線グラフにダイアモンド印を加える	plt.plot(データ列, データ列2, marker='D')
nがn2よりも大きいかどうか調べる	n > n2
タイムスタンプデータの年数	aDatetime.year
リストとデータ列について散布図を描いてマーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
折れ線グラフの色をイエローグリーンに変更する	plt.plot(データ列, データ列2, color='yellowgreen')
データフレームを２つの列によってグループ化し、要約統計量を計算する	df.groupby(['A', 'B']).describe()
＜オプション＞貝殻色を使う	color = 'seashell'
文字列の接尾辞が部分文字列かどうか調べる	s.endswith(sub)
リストを暗い色のヒストグラムでプロットする	plt.hist(xdata, color='dark')
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列, データ列2, color='whitesmoke')
列の中の欠損値の合計を数える	ds.isna().sum()
配列から重複を除いた配列を作成する	np.unique(aArray)
＜オプション＞ドジャーブルーにグラフの色を指定する	color = 'dodgerblue'
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
両端キューの右にタプルの各要素を追加する	deq.extend(iterable)
文字列を左寄せにする	s.ljust(文字列幅)
データフレームの列がxでない行をフィルタする	df[df[column] == x]
線グラフの色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
nがn2の倍数でない	n % n2 != 0
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
行列の要素ごとの最大公約数	np.gcd(aArray, aArray2)
辞書の全項目をクリアする	aDict.clear()
リストとリストのカラーコードの暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
折れ線グラフの色を小麦色に変更する	plt.plot(データ列, データ列2, color='wheat')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
リストとリストについての散布図を暗い色で描画する	plt.plot(xdata, ydata, c='dark')
辞書をコピーする	aDict.copy()
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
線幅nの▽印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
浮動小数点数を十の位で四捨五入する	round(x, -1)
星マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='*')
ベージュ色の線グラフを描画する	plt.plot(データ列, データ列2, color='beige')
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
＜オプション＞インディアンレッド色を用いる	color = 'indianred'
折れ線グラフの色をインディゴに指定する	plt.plot(データ列, データ列2, color='indigo')
現在の作業ディレクトリ	os.getcwd()
リストの全要素を空にする	aList.clear()
ゲインズボロにヒストグラムの色を設定する	plt.hist(データ列, color='gainsboro')
暗い色の折れ線を描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
折れ線グラフを描画して、色をミディアムオーキッドに指定する	plt.plot(データ列, データ列2, color='mediumorchid')
列の値でデータフレームをまとめたグループ	df.groupby(column)
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
散布図に色差別ない色のマーカーを使う	plt.plot(xdata, ydata, c='colorblind')
＜オプション＞グラフの色を紺に指定する	color = 'darkblue'
データフレームを表示するときデータフレームをn行まで表示できるようにする	pd.set_option('display.max_rows', n)
オブジェクトのイテレータ	iter(obj)
配列とリストについて散布図をプロットして、色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
データフレームの中の列を等量で分割数nを用いてビン分割する	pd.qcut(df[col], n)
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列, データ列2, color='blanchedalmond')
データフレームを列名リストでグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
配列のイミュータブルな集合	frozenset(iterable)
データフレームのリスト列を10の位で丸める	df[aList].round(-1)
データ列のNaNを後の行の値にセットする	ds.fillna(method='bfill')
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
リストの末尾を使う	aList[-1]
小数点数の双曲線余弦の逆数	math.acosh(x)
全要素を０で初期化された三２ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
配列とデータ列の破線グラフを描画して、色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
明るいグラフの色を黒色に設定する	plt.plot(xdata, ydata, linestyle='bright', color='k')
最初の部分文字列で文字列を分けたときの先頭の文字列	s.partition(sub)[0]
データフレームをJSONLファイルに保存する	df.to_excel(filename)
線グラフを描画して、その色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
折れ線グラフの星マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='*', markeredgewidth=n)
散布図を濃い色のマーカーで重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
ヒストグラムを描画してその色をスプリンググリーンに指定する	plt.hist(データ列, color='springgreen')
データフレームのリストカラムの値が未入力値か調べる	df[aList].isna()
出力ストリームにxを文字列に変換して書き込む	f.write(str(x))
折れ線グラフを描画して色をスノーに設定する	plt.plot(データ列, データ列2, color='snow')
空のチェーンマップ	collections.ChainMap()
＜オプション＞コロンを区切りで用いる	sep = ':'
＜オプション＞インデックスを自動的な連番に設定する	index_col = None
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(xdata, ydata, marker='D')
＜オプション＞フォレストグリーンを使う	color = 'forestgreen'
赤い菱形マーカーで散布図を描く	plt.plot(xdata, ydata, marker='D', c='r')
折れ線グラフの色をピンクにセットする	plt.plot(データ列, データ列2, color='pink')
データフレームの第一四分位数を求める	df.quantile(0.25)
折れ線グラフを描画して、その色をサンディーブラウンにする	plt.plot(データ列, データ列2, color='sandybrown')
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
黒い下三角マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='v', c='k')
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
データ列の中に文字列があるか調べる	ds.isin([value])
リストとリストの折れ線グラフをカラーコードで描画する	plt.plot(xdata, ydata, color=rgb)
リストとリストの散布図を描画して、ポイントマーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='.', c=rgb)
n進文字列を整数に変換する	int(s, n)
データフレームの重複した行をマスクする	df.duplicated()
データフレームのカラムの中に文字列と日付データが含まれる	df[col].isin([value, value2])
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightgreen')
両端キューの順番をn個分右にローテンションする	deq.rotate(n)
＜オプション＞エンコーディングをBOM付きに変更する	encoding = 'utf_8_sig'
暗いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
折れ線グラフを描画して、その色をパパイヤウィップに指定する	plt.plot(データ列, データ列2, color='papayawhip')
折れ線グラフの菱形マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
数列とリストの折れ線グラフを透明度alphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
データ列をビン数nでビン分割する	pd.cut(ds, n)
データフレームを1000の位で丸める	df.round(-3)
ターコイズ色の線グラフを描画する	plt.plot(データ列, データ列2, color='turquoise')
データフレームの列の中に含まれる文字列の合計を数える	df[col].isin([value]).sum()
プロットに凡例を文字列と文字列と入れる	plt.legend([s, s2])
データフレームをTSV形式でJSONLファイルに保存する	df.to_csv(filename, sep='\t')
整数の最大値を知る	sys.maxsize
ヒストグラムの色をリネンに指定する	plt.hist(データ列, color='linen')
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
折れ線グラフを描画してその色をダークターコイズにセットする	plt.plot(データ列, データ列2, color='darkturquoise')
リストとリストについて散布図を描画し、、マーカーをバツに設定する	plt.plot(xdata, ydata, marker='x')
整数nがリストのどれかか	n in aList
２次元リストの転置行列	[list(x) for x in list(zip(*aList))]
nからn2の範囲を求める	range(n, n2)
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
マッピングの浅いコピーを作成する	aDict.copy()
データフレームのn行目をドロップしてインプレイスする	df.drop(n, axis=0, inplace=True)
二つの集合が互いに素	aSet.isdisjoint(aSet2)
整数nがセットのどれかかどうか調べる	n in aSet
配列とリストについて破線グラフを描画して、その色を濃いに指定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
小数点数の平方根	math.sqrt(x)
変数が0に近づく場合、数式の極限値を求める	sympy.limit(e, z, 0)
＜オプション＞デピンクを使う	color = 'deeppink'
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
折れ線グラフを描画して、その色をシルバーにする	plt.plot(データ列, データ列2, color='silver')
プロットの色を暗くする	sns.set(pallete='dark')
２つのデータフレームを異なる列をキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
データ列をValueMapで置換する	ds.replace(ValueMap)
要素が集合に含まれないかどうか調べる	element not in aSet
データフレームのリスト列の欠損値を最小値で置換する	df[aList].fillna(df[aList].min())
オブジェクトがリストかどうか調べる	isinstance(obj, list)
散布図に黒いダイアモンドマーカーを使用する	plt.plot(xdata, ydata, marker='D', c='k')
２つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
＜オプション＞スラグレー色を使う	color = 'slategrey'
文字列の中で複数行対応としてパターンにマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
リストとリストについて散布図を描画し、、星マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='*', c=rgb)
＜オプション＞ライトスレイグレーを使う	color = 'lightslategrey'
ファイルを書き込み用にオープンする]	open(filepath, mode='w')
2つのデータ列を並べてヒストグラムにする	plt.hist([データ列, データ列2], color=['b', 'r'])
白色の線グラフを描画する	plt.plot(データ列, データ列2, color='white')
n番目のカラムを行にしてCSVファイルタブ区切りのファイルを読む	pd.read_csv(filename, index_col=n)
データフレームをJSONLファイルから読む	pd.read_json(filename, orient='records', lines=True)
オブジェクトはバイト列クラスのインスタンスか	isinstance(obj, bytes)
ヒストグラムを描画して、その色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
リストが空でないかどうか	len(aList) != 0
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
リストとデータ列の黒い淡いを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
リストとデータ列について散布図を描画し、マーカーをバツに設定する	plt.plot(xdata, ydata, marker='x')
ヒストグラムを描画して、その色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
新しい文字列でパターンにマッチした文字列を置き換える	re.sub(pattern, newsub, s)
オブジェクトは文字列かどうか調べる	isinstance(obj, str)
線グラフを描画して色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
タプルを浅くコピーする	aDict.copy()
データフレームのカラムのNaNを最小値に設定する	df[col].fillna(df[col].min())
双方向キューの大きさ	len(deq)
関数ごとに表データをグループ化し、列挙する	[(name, group) for name, group in df.groupby(関数)]
日付データが日付データと同時か	aDate == aDate2
追加モードを用いてファイルをオープンする]	open(filepath, mode='a')
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
散布図にカラーコードの星マーカーを使う	plt.plot(xdata, ydata, marker='*', c=rgb)
ヒストグラムを描画してその色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
整数nをバイナリにする	n.to_bytes(length=bytesize, byteorder='big')
折れ線グラフの色をオリーブに指定する	plt.plot(データ列, データ列2, color='olive')
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
列と列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
データフレームをインデックスによってソートする	df.sort_index()
値が集合に含まれるかどうか調べる	element in aSet
線グラフの色をターコイズに変更する	plt.plot(データ列, データ列2, color='turquoise')
ヒストグラムの色をパールゴールデンロッドにセットする	plt.hist(データ列, color='palegoldenrod')
折れ線グラフを描画してその色を茶色に設定する	plt.plot(データ列, データ列2, color='brown')
文字列が小文字	s.islower()
ヒストグラムの色をリネンに変更する	plt.hist(データ列, color='linen')
明るい色でイテラブルについてのヒストグラムを描画する	plt.hist(xdata, color='bright')
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
データフレームとデータ列を合体させる	pd.concat([df, ds], axis=1)
列の未入力値を最小値で埋める	ds.fillna(ds.min())
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='k')
スタックのn番目に要素を差し込む	deq.insert(n, element)
xを文字列に変換する	str(x)
＜オプション＞モカシンを使う	color = 'moccasin'
日付時刻データの時間	aDatetime.hour
データフレームを複数の列によってを用いて降順に並べ直す	df.sort_values(by=column, ascending=False)
折れ線グラフの色を青緑に設定する	plt.plot(データ列, データ列2, color='teal')
＜オプション＞ライトスレイグレーを使う	color = 'lightslategray'
＜オプション＞色をホワイトスモークに設定する	color = 'whitesmoke'
データフレームの中央値	df.median()
＜オプション＞グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
文字列が部分文字列で終了する	s.endswith(sub)
折れ線グラフを描画して、色を真紅に設定する	plt.plot(データ列, データ列2, color='crimson')
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
スタックの値をインプレースに逆順にする	deq.reverse()
折れ線グラフの色をコーンズシルクに指定する	plt.plot(データ列, データ列2, color='cornsilk')
＜オプション＞アイボリーを用いる	color = 'ivory'
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
データフレームをTSV形式のファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
データフレームを各列毎にグループ化して文字列というグループを見る	df.groupby(column).get_group(s)
実数を実数で除した余り	x % y
双方向キュー中の値のインデックス	deq.index(element)
＜オプション＞ライトグリーン色を使う	color = 'lightgreen'
データフレームの行を条件で消すには	df[(df[column] == x) & (df[column2] == x2)]
追加モードとしてファイルをオープンして]、fとする	f = open(filepath, mode='a')
数式の変数にnを代入する	e.subs(z, n)
文字列が文字列リストに存在するか調べる	s in aStringList
リストとリストについての散布図に左三角マーカーをプロットする	plt.plot(xdata, ydata, marker='<')
データフレームの最初n行	df.head(n)
データフレームの内で列の重複を見る	df.duplicated(subset=column)
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
分割数nとしてデータフレームの中の列を分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
グラフを全般的に濃くする	sns.set(pallete='deep')
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
ユニークな値を要素とする配列	np.unique(aArray)
＜オプション＞バリーウッドにグラフの色を変更する	color = 'burlywood'
文字列の接尾辞から部分文字列を消す	s.removesuffix(sub)
配列とリストの散布図を描画して大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
折れ線グラフの下三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
ヒストグラムを描画して、その色をシアンに変更する	plt.hist(データ列, color='cyan')
日付データが日付データと同時かどうか調べる	aDate == aDate2
文字列を右側から空白で区切る	s.rsplit()
＜オプション＞バイナリ書き込みモードを使用する	mode = 'wb'
ヒストグラムの色をやわらかい青に指定する	plt.hist(データ列, color='cornflowerblue')
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
折れ線グラフに緑色の星印を描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='g')
パステル調の色で散布図を重なりを見やすく描く	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
＜オプション＞ダークオーキッド色を使う	color = 'darkorchid'
折れ線グラフの四角印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='s', markersize=n)
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
本日をISO形式の文字列にする	datetime.datetime.today().isoformat()
＜オプション＞スチールブルー色を使う	color = 'steelblue'
値を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
データフレームの列をドロップする	df.drop(column, axis=1)
データフレームのカラムの分	df[col].dt.minute
リストとリストの暗いを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
ヒストグラムを描画して、色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
＜オプション＞レベッカパープルを使う	color = 'rebeccapurple'
リストとリストについての散布図に右三角マーカーをプロットする	plt.plot(xdata, ydata, marker='>')
組の各値を関数に適用した結果で並べ変える	sorted(aTuple, key=func)
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
エクセルデータからデータフレームを読み込む	pd.read_excel(filename)
ファイルパスをバイナリ用にオープンする]	open(filepath, mode='rb')
デフォルトでプロットの見た目をいい感じに変更する	sns.set()
リストとリストについての散布図に四角マーカーを描画する	plt.plot(xdata, ydata, marker='s')
nがn2の倍数かどうか調べる	n % n2 == 0
＜オプション＞グラフの色をピンクにセットする	color = 'pink'
ヒストグラムを描画して、その色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
集合を変更不能なセットにする	frozenset(aSet)
＜オプション＞グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
データ列とラベルを指定して、縦棒グラフを描く	plt.bar(ラベル列, データ列)
＜オプション＞ゴールドを使う	color = 'gold'
リストの中の最大値	max(aList)
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
実数を浮動小数点数で整数除算する	x // y
オブジェクトは整数クラスか調べる	isinstance(obj, int)
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
リストの全ての要素を捨てる	aList.clear()
商と余りを同時に求める	divmod(x, y)
＜オプション＞星マーカーを加える	marker = '*'
ヒストグラムを描画して、その色を貝殻に設定する	plt.hist(データ列, color='seashell')
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='r')
ライトサーモン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightsalmon')
エクセルデータファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
＜オプション＞色をパールゴールデンロッドにセットする	color = 'palegoldenrod'
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
ファイルパスのフォルダ名を使う	os.path.dirname(filepath)
データフレームを各列毎にグループ分けして文字列というグループの個数を求める	df.groupby(column).size()[s]
数式の数値	float(e)
３つの文字列を順にプリントする	print(value, value2, value3)
データフレームのカラムの要約統計量を算出する	df[col].describe()
文字列の開始位置以降が部分文字列で開始するか	s.startswith(sub, start)
折れ線グラフを描画して、その色をダークマゼンタに指定する	plt.plot(データ列, データ列2, color='darkmagenta')
データフレームのリストカラムの中に文字列と日付データが含まれる	df[aList].isin([value, value2])
データフレームの列が文字列で終わるデータを取り出す	df[df[column].str.endswith(s)]
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を算出する	df.groupby([column, column2], as_index=False).min()
淡いでヒストグラムをプロットする	plt.hist(xdata, color='muted')
データフレームの中の列を四分位数で分割する	pd.qcut(df[col], 4)
カウンタの文字列をリストとして得る	aCounter.keys()
折れ線グラフに丸マーカーを使う	plt.plot(データ列, データ列2, marker='o')
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
＜オプション＞ライトゴールドロディイエローに色を設定する	color = 'lightgoldenrodyellow'
＜オプション＞ライム色を用いる	color = 'lime'
データフレームを列の値で集約し、、各グループ毎の個数を求める	df.groupby(column).count()
ファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
浮動小数点数を千の位で丸める	round(x, -3)
データフレームを確認する	df.head()
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
nがn2未満、またはn3以上か	n < n2 or n >= n3
折れ線グラフの△印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
配列とデータ列の青色の暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
文字列のプレフィックスから部分文字列を除く	s.removeprefix(sub)
折れ線グラフを破線にセットする	plt.plot(データ列, データ列2, linestyle='dashed')
データフレームの中の列を等量でn個に分割する	pd.qcut(df[col], n)
カラーコードの星マーカーをリストとデータ列についての散布図に描く	plt.plot(xdata, ydata, marker='*', c=rgb)
データフレームから重複した行をドロップして、インプレイスする	df.drop_duplicates(inplace=True)
行列をリストから作る	np.array(aList)
キューから要素を取り除く	deq.remove(element)
リストとリストについて青色の色差別ないグラフをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
＜オプション＞ピーチパフ色を用いる	color = 'peachpuff'
上位集合もしくは等しいか調べる	aSet > aSet2
日付時刻データは何月か知る	aDatetime.month
グラフをポスター用に設定する	sns.set(context='poster')
線グラフを描画して、その色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
nをn2で割った余りをnに代入する	n %= n2
ヒストグラムを描画して、色をカーキに変更する	plt.hist(データ列, color='khaki')
＜オプション＞グラフの色を青に指定する	color = 'blue'
リストの最後のn要素を捨てる	aList[:-n]
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
折れ線グラフの右三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<')
小数点数の双曲線余弦	math.cosh(x)
イテラブルとデータ列の青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
ダークグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgrey')
日付時刻データの秒	aDatetime.second
タプルをクリアする	aDict.clear()
＜オプション＞サーモン色を使用する	color = 'salmon'
散布図を黒色の四角マーカーを使って描画する	plt.plot(xdata, ydata, marker='s', c='k')
逆順の両端キュー	reversed(deq)
データフレームを列によってグループ化し、それぞれのグループごとの個数を計算する	df.groupby(column).count()
＜オプション＞グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
データ列を折れ線グラフに描画してマーカーを大バツ印にする	plt.plot(データ列, データ列2, marker='X')
折れ線グラフを描画して色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
数を実数で整数除算する	x // y
日付データが日曜日かどうか調べる	aDate.weekday() == 6
＜オプション＞ダークレッド色を使用する	color = 'darkred'
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
改行で区切って二つの数値を出力する	print(value, value2, sep='\n')
データ列が何年か調べる	ds.dt.year
ヒストグラムを描画して、色を青くする	plt.hist(データ列, color='b')
2を底とする対数	math.log2(x)
リストの合計値	sum(aList)
データフレームのn行目をドロップする	df.drop(n, axis=0)
リストとリストについての散布図にカラーコードの右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
グラフの中の日本語表示を利用可能にする	sns.set(font='IPAexGothic')
データフレームの中のNaNの合計をカウントする	df.isna().sum()
赤い折れ線グラフを描画する	plt.plot(データ列, データ列2, color='r')
線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
データ列とリストの青い暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color='b')
データフレームの中で、列と列の重複を落とす	df.drop_duplicates(subset=[column, column2])
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
データフレームの列の名前を一度に文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
ファイルを文字コードtextとしてオープンする]	open(filepath, encoding=text)
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
折れ線グラフの左三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
データフレームを列によってグループ分けし、、列挙する	[(name, group) for name, group in df.groupby(column)]
データフレームを列でグループ化し要約統計量を求める	df.groupby(column).describe()
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
リストとリストの散布図にダイアモンドマーカーを描く	plt.plot(xdata, ydata, marker='D')
黒色の丸マーカーで散布図を描く	plt.plot(xdata, ydata, marker='o', c='k')
行列の行ごとの最小を求める	np.min(aArray, axis=1)
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
＜オプション＞シーグリーン色を使う	color = 'seagreen'
リストの末尾にリストを加える	aList.extend(aList2)
二つのデータフレームを列をキーとして内部ジョインする	pd.merge(df, df2, on=column, how='inner')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか	s.find(sub, start, end) == -1
散布図に下三角マーカーを使う	plt.plot(xdata, ydata, marker='v')
グラフの描画で明るい色を用いる	sns.set(pallete='bright')
データ列の値が未入力値か	ds.isna()
モードでデータフレームのリスト列のNaNを置き換える	df[aList].fillna(df[aList].mode().iloc[0])
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
＜オプション＞グラフの色をディムグレーに設定する	color = 'dimgray'
文字列が組の要素でないか調べる	element not in aTuple
ヒストグラムの色を青に指定する	plt.hist(データ列, color='blue')
xが真か確認する	bool(x)
線幅nの△マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
データフレームのリストカラムを百の位で丸める	df[aList].round(-2)
折れ線グラフに青い丸印を描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
カラムを小数点以下n桁で丸める	ds.round(n)
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
淡い色のマーカーで散布図を描く	plt.plot(xdata, ydata, c='muted')
データ列の欠損値を最頻値で置換する	ds.fillna(ds.mode().iloc[0])
両端キューの先頭	deq[0]
線グラフの色を茶色に変更する	plt.plot(データ列, データ列2, color='brown')
カウンタを多い順に列挙する	aCounter.most_common()
タイムスタンプデータが日付時刻データより後ろか	aDatetime > aDatetime2
現在の秒を使う	datetime.date.today().second
濃いグラフの色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
＜オプション＞三角印を使う	marker = '^'
カラーパレットを明るくする	sns.set(pallete='bright')
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
カラーコードのダイアモンドマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
文字列が全てアスキー文字か調べる	s.isascii()
グラフの色を色差別なくする	sns.set(pallete='colorblind')
＜オプション＞ミッドナイトブルー色を使用する	color = 'midnightblue'
ダークグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='darkgreen')
非ASCII文字が文字列中にあるかどうか調べる	any(not c.isascii() for c in s)
リスト内の要素が少なくともひとつ真かどうか調べる	any(aList)
グラフに水平方向の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
＜オプション＞色をミディアムターコイズにする	color = 'mediumturquoise'
データフレームを'A'列で昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
文字列を区切りによって区切って列挙する	s.split(sep)
ランダムにデータフレームからn行を抽出する	df.sample(n)
ヒストグラムを描画して、その色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
データフレームの列がxである行を抽出する	df[df[column] == x]
モカシン色の線グラフを描画する	plt.plot(データ列, データ列2, color='moccasin')
コーンズシルクにヒストグラムの色を設定する	plt.hist(データ列, color='cornsilk')
折れ線グラフを描画してその色を淡い茶色に設定する	plt.plot(データ列, データ列2, color='tan')
＜オプション＞グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
リストとリストについての散布図に黒い四角マーカーを描く	plt.plot(xdata, ydata, marker='s', c='k')
データ列と配列の折れ線をプロットして、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
グラフのx軸にuntitledというラベルを付ける	plt.xlabel(untitled)
黒いパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
色差別ないの折れ線の色をカラーコードに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
イテラブルを出現回数して、カウンタを更新する	aCounter.update(iterable)
入力ストリームを閉じる	f.close()
ヒストグラムの色をグリーンに指定する	plt.hist(データ列, color='green')
＜オプション＞ヘッダを自動的な連番に設定する	header = None
データフレームのカラムの中の欠損値の合計を求める	df[col].isna().sum()
＜オプション＞ビスクを使う	color = 'bisque'
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
行列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
貝殻色の線グラフを描画する	plt.plot(データ列, データ列2, color='seashell')
線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategrey')
リストを黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
ヒストグラムを描画して、色をインディゴに指定する	plt.hist(データ列, color='indigo')
オブジェクトが辞書クラスか調べる	isinstance(obj, dict)
データフレームのリストカラムの未入力値を最小値に変更する	df[aList].fillna(df[aList].min())
表データから重複を消す	df.drop_duplicates()
ファイルパスから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
データフレームの列の欠損値をxに設定する	df[col].fillna(x)
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
seabornのデフォルト見た目を適用する	sns.set()
カウンタの要素のカウント	aCounter[element]
オブジェクトの型を見る	type(obj)
＜オプション＞n番目の列をインデックスにする	index_col = n
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
暗い色の折れ線グラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
データフレームを列によって整列して、上位n件を取り出す	df.sort_values(columns).head(n)
最後の部分文字列で文字列を分けたときの前半の文字列	s.rpartition(sub)[0]
＜オプション＞淡いピンク色色を使う	color = 'lightpink'
データフレームとデータ列を合体させる	pd.concat([df, ds], axis=1)
両端キューの要素をインプレースに逆に並べ直す	deq.reverse()
データフレームからランダムに抽出する	df.sample()
ダークグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgray')
データフレームの列が正規分布からどの程度、尖っているか調べる	df[col].skew()
緑色で文字列を表示する	print(f'\033[32m{value}\033[0m')
散布図に黒い大バツマーカーを用いる	plt.plot(xdata, ydata, marker='X', c='k')
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
リストとイテラブルについての散布図にカラーコードの▲マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
nが2で割り切れる	n % 2 == 0
日付データが火曜日	aDate.weekday() == 1
Pandasでデータ列を書式fmtで日付データに変換する	pd.to_datetime(ds, format=fmt)
線グラフを描画して、その色をダーク・スラテグレーに指定する	plt.plot(データ列, データ列2, color='darkslategrey')
折れ線グラフの大バツマーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='X', markersize=n)
線グラフを描画して、その色をグレーに変更する	plt.plot(データ列, データ列2, color='grey')
折れ線グラフを描画して色を黄色くする	plt.plot(データ列, データ列2, color='y')
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
にy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='r')
日付時刻データにn日分加える	aDatetime + datetime.timedelta(days=n)
リストとリストについて散布図をプロットして、菱形マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='D', c=rgb)
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
タイムスタンプを使う	import time
明るい色のマーカーとして散布図を重なりを見やすく描く	plt.plot(xdata, ydata, c='bright', alpha=0.5)
文字列を部分文字列で二つに区切って、後半の文字列を見る	s.partition(sub)[-1]
文字列の中のケースを無視してパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
＜オプション＞グラフの線種を実線に設定する	linestyle = 'solid'
リストについてのヒストグラムを淡い色で描画する	plt.hist(xdata, color='muted')
２つの文字列は同じ	s == s2
タプルの先頭	aTuple[0]
イテラブルを無限に繰り返す	itertools.cycle(iterable)
折れ線グラフを描画して色をタンに変更する	plt.plot(データ列, データ列2, color='tan')
データフレームをカラムでグループ化し、、グループの件数を知る	df.groupby(column).size()
タプルの要素数	len(aTuple)
データフレームのリストカラムの値をValueMapで置換する	df[aList].replace(ValueMap)
データフレームのリスト列を10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
＜オプション＞ダークカーキ色を使う	color = 'darkkhaki'
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
配列と数列について散布図を描いてマーカーの色を暗いに設定する	plt.plot(xdata, ydata, c='dark')
リストが空	len(aList) == 0
文字列全体がパターンに複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
リストの重複を除去する	sorted(set(aList), key=aList.index)
文字列はタプルの要素か調べる	element in aTuple
オブジェクトにフィールドが存在する	hasattr(obj, プロパティ名)
表データを使う	import pandas as pd
折れ線グラフを描画してその色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
数字を全部使う	string.digits
折れ線グラフを描画して、その色をアリスブルーに設定する	plt.plot(データ列, データ列2, color='aliceblue')
文字列を最初の部分文字列で二分し後半の文字列を求める	s.partition(sub)[-1]
グラフの色を全般的に明るくする	sns.set(pallete='bright')
データフレームに重複があるか見る	df.duplicated()
プラットフォームのコードポイントの最大値	sys.maxunicode
ピアソンとしてデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
タプルのコンビネーション	itertools.combinations(iterable, n)
三整数の最小公倍数を求める	math.lcm(n, n2, n3)
未初期化の配列	np.empty(要素数, dtype=np.int)
濃いグラフの色を青くする	plt.plot(xdata, ydata, linestyle='deep', color='b')
文字列を走査し、正規表現にマッチするか確認する	re.search(pattern, s)
nがn2以下か調べる	n <= n2
＜オプション＞色をライトスレイグレーに設定する	color = 'lightslategrey'
配列を中央値でビン分割する	pd.qcut(aArray, 2)
折れ線グラフの▲マーカーのサイズをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
リストとリストについての散布図をパステル調の色として描画する	plt.plot(xdata, ydata, c='pastel')
八進文字列を整数に変換する	int(s, 8)
折れ線グラフを描画して、色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
ベージュにヒストグラムの色を設定する	plt.hist(データ列, color='beige')
標準エラーを用いる	sys.stderr
折れ線グラフの色をダーク・スラテグレーに指定する	plt.plot(データ列, データ列2, color='darkslategrey')
淡いの折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
タプルの先頭のn要素を除く	aTuple[n:]
線グラフの色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
ビン数をnに設定してヒストグラムを描画する	plt.hist(データ列, bins=n)
データ列の中の欠損値の合計を数える	ds.isna().sum()
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
後の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
＜オプション＞改行コードを動作環境依存に変更する	newline = None
データ列の文字列を未入力値にする	ds.replace(s, np.nan)
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgray')
文字列を空白で区切り、、文字列リストに変換する	s.split()
ヒストグラムを描画して、その色をインディアンレッドに変更する	plt.hist(データ列, color='indianred')
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
プロットの全般的にカラーパレットを濃くする	sns.set(pallete='deep')
文字列の片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データフレームのリストカラムの下位25%	df[aList].quantile(0.75)
データフレームのカラムを十の位で丸めて、整数型にする	df[col].round(-1).astype(int)
ベクトルの合計	np.sum(aArray)
キーがマップ上で未定義か確認する	key not in aDict
リストから両端キューを用意する	collections.deque(iterable)
リストとリストで明るいグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
ヒストグラムを描画してその色を青に設定する	plt.hist(データ列, color='blue')
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
ヒストグラムを描画して、その色をスラグレーに設定する	plt.hist(データ列, color='slategray')
折れ線グラフの色をコーンズシルクに変更する	plt.plot(データ列, データ列2, color='cornsilk')
データフレームの欠損値をxで埋める	df.fillna(x)
折れ線グラフの色をミディアムスレートブルーに変更する	plt.plot(データ列, データ列2, color='mediumslateblue')
タプルをJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
棒グラフを描いて、xに棒の幅を設定する	plt.bar(ラベル列, データ列, width=x)
ケンドール相関係数でデータフレームの相関行列を求める	df.corr(method='kendall')
データフレームから指定された４つの列だけ抽出する	df[[column, column2, column3, column4]]
緑色で変数をプリントする	print(f'\033[32m{value}\033[0m')
処理中の例外を情報	sys.exc_info()
リストとリストの黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
折れ線グラフの色を白に設定する	plt.plot(データ列, データ列2, color='white')
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
データフレームのカラムが何月か見る	df[col].dt.month
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
＜オプション＞シスル色を使用する	color = 'thistle'
データフレームのカラムの25パーセンタイルを算出する	df[col].quantile(0.25)
＜オプション＞ロイヤルブルー色を使う	color = 'royalblue'
ふたつの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
環境名	sys.platform
浮動小数点数のn乗して実数による余りを求める	pow(x, n, y)
ナバホホワイト色の線グラフを描画する	plt.plot(データ列, データ列2, color='navajowhite')
ヒストグラムを描画して、その色を小麦色にセットする	plt.hist(データ列, color='wheat')
＜オプション＞昇順にする	ascending = True
パラメータについて数式の積分を求める	sympy.integrate(e, z)
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
行列を元に全要素が1の行列を作る	np.ones_like(aArray)
UNIXコマンドtextを実行する	os.system(text)
行列の要素ごとの積	np.multiply(aArray, aArray2)
＜オプション＞グラフの色をクリムゾンにする	color = 'crimson'
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
グラフで使える色名の一覧を知る	matplotlib.colors.cnames
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
行列を転置する	aArray.T
文字列の先頭を使う	s[0]
二つの集合が共通の要素を持たないかどうか調べる	aSet.isdisjoint(aSet2)
標準出力を使用する	sys.stdout
モジュールを検索するパス	sys.path
実線にヒストグラムの線のスタイルを指定する	plt.hist(データ列, linestyle='solid')
辞書をカウンタにする	collections.Counter(aDict)
低頻度な方からカウンタをリストとして得る	aCounter.most_common()[::-1]
nがn2より小さい	n < n2
文字列を式として評価する	eval(s)
タプルのの一覧を得る	aDict.values()
文字列を正規表現で分割する	re.split(pattern, s)
列の最大幅をnに設定する	pd.set_option('max_colwidth', n)
カラーコードのポイントマーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='.', c=rgb)
ヒストグラムを描画してその色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
折れ線グラフを描画して色をダークオレンジに変更する	plt.plot(データ列, データ列2, color='darkorange')
aListn番目から要素を取り除く	aList.pop(n)
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
オブジェクトが関数	callable(obj)
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
データフレームを百の位で丸める	df.round(-2)
データフレームのn行以降を抽出する	df[n:]
列の欠損値をxに指定する	ds.fillna(x)
データ列の値は欠損値	ds.isna()
＜オプション＞データ型を指定する	dtype = np.int16
リストとリストについての散布図をパステル調の色で描く	plt.plot(xdata, ydata, c='pastel')
表の列がリストに含まれる行を選択する	df[df[column].isin(aList)]
折れ線グラフを描画してその色をバリーウッドに指定する	plt.plot(データ列, データ列2, color='burlywood')
ヒストグラムを描画してその色をアクアに設定する	plt.hist(データ列, color='aqua')
折れ線グラフを描画して、その色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
折れ線グラフを描画して、色をダークオーキッドに設定する	plt.plot(データ列, データ列2, color='darkorchid')
データフレームの行名一覧	df.index
グラフを描画する準備をする	from sympy import N
改行によって文字列を区切る	s.splitlines()
降順に列でによって表をソートする	df.sort_values(by=column, ascending=False)
ファイルパスをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
横棒グラフを描画して、幅をxに変更する	plt.barh(ラベル列, データ列, width=x)
アイボリー色の線グラフを描画する	plt.plot(データ列, データ列2, color='ivory')
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
ヒストグラムを描画して、その色を青緑にセットする	plt.hist(データ列, color='teal')
リストの文字列が最初に見つかるインデックスを使う	aList.index(element)
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
データフレームの分散を計算する	df.var()
リストのオブジェクトが最初に見つかるインデックスを探す	aList.index(element)
エクセルファイルファイルからn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
＜オプション＞追加モードを使う	mode = 'a'
Pandasでデータ列を日付データに変換する	pd.to_datetime(ds)
リストとリストでパステル調のグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color='r')
二次元タプルをフラット化する	sum(aTuple)
＜オプション＞グラフの色をライトスカイブルーにセットする	color = 'lightskyblue'
データフレームを列名リストの値によってグループ化する	df.groupby(columns)
タプルの要素を並べる	sorted(aTuple)
グラフをポスターに設定する	sns.set(context='poster')
数値の平方根を求める	sympy.sqrt(e)
青いヒストグラムを描画する	plt.hist(データ列, color='b')
＜オプション＞マゼンタを使う	color = 'magenta'
線グラフの色をシアンにする	plt.plot(データ列, データ列2, color='cyan')
折れ線グラフを描画して、その色をパールバイオレットレッドに変更する	plt.plot(データ列, データ列2, color='palevioletred')
線グラフを描画して色をダークオリーブグリーンに指定する	plt.plot(データ列, データ列2, color='darkolivegreen')
折れ線グラフを描画して、色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
リストとイテラブルについて散布図を描画してマーカーをポイントに変更する	plt.plot(xdata, ydata, marker='.')
＜オプション＞星マーカーを描画する	marker = '*'
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
棒グラフを描く	plt.bar(ラベル列, データ列)
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
＜オプション＞欠損値も無視しない	dropna = True
リストとリストの散布図に黒いダイアモンドマーカーをプロットする	plt.plot(xdata, ydata, marker='D', c='k')
線グラフの色をロイヤルブルーに変更する	plt.plot(データ列, データ列2, color='royalblue')
整数個のものからk個取り出したときの並べ方	math.perm(n, k)
折れ線グラフを描画して、その色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
ふたつの集合が共通の要素を持たないかどうか調べる	aSet.isdisjoint(aSet2)
＜オプション＞グラフの色をリネンにする	color = 'linen'
暗い色のヒストグラムでリストを描画する	plt.hist(xdata, color='dark')
＜オプション＞エラーを無視するように変更する	errors = 'ignore'
データ列を折れ線グラフに描画して、マーカーを下三角にする	plt.plot(データ列, データ列2, marker='v')
データフレームのリストカラムの中にがあるかどうか	df[aList].isin([value])
＜オプション＞小麦色に色を設定する	color = 'wheat'
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
データフレームを各列と列の組み合わせ毎にグループ化して分散を計算する	df.groupby([column, column2], as_index=False).var()
列の各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
実数は有限か調べる	math.isfinite(x)
リストとリストの散布図に黒色の丸マーカーを描画する	plt.plot(xdata, ydata, marker='o', c='k')
折れ線グラフの色をオリベドラブに指定する	plt.plot(データ列, データ列2, color='olivedrab')
ヒストグラムを描画して、色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
＜オプション＞色をビスクに設定する	color = 'bisque'
数式を積分する	sympy.integrate(e)
配列とデータ列の破線グラフをプロットして、その色を明るいに指定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
列を累積した列	itertools.accumulate(iterable, operator.mul)
論理値型のゼロ埋めされた配列を初期化する	np.zeros(要素数, dtype=np.int32)
数式を変数についてn階微分する	sympy.diff(e, z, n)
xをブール値にする	bool(x)
xの小数点以下'5'桁まで出力する	print(':.5f'.format(x))
折れ線グラフの色を紺に設定する	plt.plot(データ列, データ列2, color='darkblue')
ヒストグラムを描画してその色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
範囲を指定して整数乱数を発生させる	random.randint(最小値, 最大値)
列の分散	ds.var()
アルファベットの小文字列	string.ascii_lowercase
折れ線グラフを描画して、その色をスレートブルーに設定する	plt.plot(データ列, データ列2, color='slateblue')
数式をパラメータについてn階微分する	sympy.diff(e, z, n)
ヒストグラムを描画してその色をサーモンに設定する	plt.hist(データ列, color='salmon')
データフレームのカラムが何日か見る	df[col].dt.day
＜オプション＞ディープスカイブルー色を使う	color = 'deepskyblue'
文字列が文字列より辞書順で後か判定する	s > s2
データフレームを列ごとにグループ化して、各グループごとの分散を求める	df.groupby(column).var()
ベクトルの行ごとの合計値	np.sum(aArray, axis=1)
文字列全体を複数行対応としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
ラベンダー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lavender')
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
ヒストグラムを描画して、色を黒くする	plt.hist(データ列, color='k')
線グラフを描画して、その色をライトグレーに変更する	plt.plot(データ列, データ列2, color='lightgrey')
ヒストグラムを描画して、その色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
＜オプション＞フクシア色を使う	color = 'fuchsia'
データフレームのカラムのメディアン	df[col].median()
データフレームの列名一覧を使う	df.columns
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
ヒストグラムを描画して、その色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
数列とリストについての散布図を淡い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='muted', alpha=0.5)
リストとリストについての散布図に三角マーカーを描画する	plt.plot(xdata, ydata, marker='^')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるかカウントする	s.count(sub, start, end)
折れ線グラフの▽マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
ヒストグラムの色をオレンジに変更する	plt.hist(データ列, color='orange')
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
本日のタイムスタンプを算出する	datetime.datetime.now()
日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
パステル調の色の折れ線グラフを描き、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
赤色の三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c='r')
複数列のヒストグラムをまとめて描画する	sns.pairplot(df[[column, column2, column3]])
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkslategrey')
＜オプション＞線種を実線に設定する	linestyle = 'solid'
辞書のキーを列挙する	aDict.keys()
タプルの中の一番小さい値	min(aTuple)
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
マッピングの全をクリアする	aDict.clear()
文字列をセパレータで区切り、列挙する	s.split(sub)
＜オプション＞ダークマゼンタ色を使う	color = 'darkmagenta'
表データを関数の値によって集計して、列挙する	[(name, group) for name, group in df.groupby(関数)]
'A'列でデータフレームを並べて、NaNを先頭にする	df.sort_values(by='A', na_position='first')
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
配列と数列について黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
＜オプション＞サドルブラウン色を使用する	color = 'saddlebrown'
文字列を最後の部分文字列で二分する	s.rpartition(sub)
線グラフの色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
折れ線グラフを一点鎖線で描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
＜オプション＞ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
実数の双曲線余弦の逆数	math.acosh(x)
何か試しに動かしてみる	print('Hello World')
Pandasで、フォーマットfmtでデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format=fmt)
二ベクトル間のユークリッド距離	math.dist(point, point2)
乱数生成系列をnで固定化する	random.seed(n)
線グラフを描画して、色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
＜オプション＞ダークサーモン色を用いる	color = 'darksalmon'
線グラフの色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
赤い左三角マーカーをリストと数列についての散布図に描画する	plt.plot(xdata, ydata, marker='<', c='r')
破壊的にデータフレームの列を削除する	df.drop(column, axis=1, inplace=True)
＜オプション＞グラフの色をダークオーキッドに指定する	color = 'darkorchid'
折れ線グラフのバツマーカーの線幅をnにする	plt.plot(データ列, データ列2, marker='x', markeredgewidth=n)
配列とデータ列について散布図を描画して、大バツマーカーの色をカラーコードにセットする	plt.plot(xdata, ydata, marker='X', c=rgb)
最適な場所にデータラベルを入れる	plt.legend(loc='best')
カラーバーを横向きに設定する	plt.colorbar(orientation='horizontal')
nが正の数か調べる	n > 0
分割数nでデータフレームの中のカラムをビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列がカタカナ	('ァ' <= ch <= 'ン')
何回まで再帰ができるかを	sys.getrecursionlimit()
ヒストグラムを二つ並べて描く	plt.hist([データ列, データ列2], color=['b', 'r'])
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
タイムスタンプデータにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
xでデータフレームのカラムの欠損値を置換する	df[col].fillna(x)
実数のタンジェントの逆数を算出する	math.atan(x)
データフレームをJSONLファイルにヘッダを付けずに書き込む	df.to_csv(filename, header=None)
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列, データ列2, color='mediumorchid')
データフレームを十の位で丸めて整数型にする	df.round(-1).astype(int)
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
ヒストグラムを描画してその色をトマトに指定する	plt.hist(データ列, color='tomato')
ヒストグラムを描画して、その色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
ヒストグラムを描画してその色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
フォレストグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='forestgreen')
文字列からformatのパターンとしてタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
データ列の各データ値の出現数	ds.value_counts()
＜オプション＞グラフの色をスチールブルーに設定する	color = 'steelblue'
データフレームを'A'列の値によって集約する	df.groupby('A')
明るい色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='bright')
リストとリストの散布図を描画して、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
折れ線グラフを描画して、その色をオリベドラブに設定する	plt.plot(データ列, データ列2, color='olivedrab')
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
n2がnより大きく、かつ、n3未満	n < n2 and n2 < n3
整数nが組のひとつ	n in aTuple
＜オプション＞ダークオーキッドに色を変更する	color = 'darkorchid'
列から複数個、ランダムに選ぶ	random.choices(iterable, k=n)
nがn2以下、または、n3以上	n <= n2 or n >= n3
文字列が全てアルファベットか調べる	s.isalpha()
直後の値でカラムのNaNを補う	ds.fillna(method='bfill')
データフレームを列でソートして、下位を取り出す	df.sort_values(columns).tail(n)
＜オプション＞グラフの色をダークカーキに設定する	color = 'darkkhaki'
データフレームのカラムの値は欠損値かどうか	df[col].isna()
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
nとn2が同じ値かどうか調べる	n == n2
ヒストグラムを描画して、その色をグリーンに指定する	plt.hist(データ列, color='green')
＜オプション＞色をグレーに設定する	color = 'grey'
グラフに凡例を文字列と文字列と入れる	plt.legend([s, s2])
＜オプション＞ディムグレー色を使う	color = 'dimgray'
ベクトルの列ごとの最大値を求める	np.max(aArray, axis=0)
線グラフの色をカーキに設定する	plt.plot(データ列, データ列2, color='khaki')
nがn2以上か	n >= n2
データフレームを使う	import pandas as pd
実数の絶対値	math.fabs(x)
マッピングのキーとその項目をペアとして取り出す	aDict.items()
辞書のキーとその項目を列挙する	aDict.items()
辞書順で文字列が文字列より後かどうか調べる	s > s2
データ列の曜日が何日目か見る	ds.dt.dayofweek
マップの項目数を得る	len(aDict)
線グラフの色をダークオリーブグリーンに変更する	plt.plot(データ列, データ列2, color='darkolivegreen')
＜オプション＞グラフの色を暗い赤に設定する	color = 'darkred'
整数nを二進表現に変換する	bin(n)
折れ線グラフを描画して、その色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
データ列とデータ列についての散布図に赤いダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c='r')
値を緑色にする	f'\033[32m{value}\033[0m'
データフレームの50パーセンタイルを求める	df.median()
行列の形状を変形する	aArray.reshape(行数, 列数)
データフレームのリストカラムの中に存在する文字列と文字列の合計をカウントする	df[aList].isin([value, value2]).sum()
＜オプション＞マーカーを左三角に変更する	marker = '<'
データ列をヒストグラムで可視化する	plt.hist(ds)
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
整数nの十六進文字列	hex(n)[2:]
▼マーカーを使って散布図をプロットする	plt.plot(xdata, ydata, marker='v')
ヒストグラムを描画して、色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
二つの数値を改行で区切って表示する	print(value, value2, sep='\n')
文字列はリストの要素か調べる	element in aList
折れ線グラフの色を文字列に設定する	plt.plot(xdata, ydata, color=s)
ヒストグラムを描画して、その色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
折れ線グラフを描画して、その色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
三つの最大値を計算する	max(x, y, z)
＜オプション＞ライムグリーン色を使う	color = 'limegreen'
＜オプション＞やわらかい青色を使用する	color = 'cornflowerblue'
散布図に赤色のバツマーカーを使う	plt.plot(xdata, ydata, marker='x', c='r')
標準出力のバッファをフラッシュする	sys.stdout.flush()
ファイルがあるかどうか判定する	os.path.exists(filepath)
紺色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkblue')
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
＜オプション＞フォレストグリーンに色を設定する	color = 'forestgreen'
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
アルファベットの小文字を全部使う	string.ascii_lowercase
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
＜オプション＞色をピンクに指定する	color = 'pink'
＜オプション＞グラフの色をダークシアンに設定する	color = 'darkcyan'
＜オプション＞グラフの色をグリーンに指定する	color = 'green'
空のカウンタを作る	collections.Counter()
リストとリストについて散布図を描画して、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
集合の濃度	len(aSet)
＜オプション＞欠損値は無視する	dropna = True
配列の累積和を計算する	np.cumsum(aArray)
＜オプション＞ベージュに色を変更する	color = 'beige'
ファイルをSJISとして開く]	open(filepath, encoding='shift_jis')
インタプリタの実行ファイルの絶対パス	sys.executable
数列と数列の折れ線を描画して、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
日付データからn日分減算する	aDate - datetime.timedelta(days=n)
値を青色にする	f'\033[34m{value}\033[0m'
折れ線グラフを描画して、色をミディアムパープルに設定する	plt.plot(データ列, データ列2, color='mediumpurple')
グラフの色テーマを暗くする	sns.set(pallete='dark')
2つの数値を文字列で区切ってプリントする	print(value, value2, sep=s)
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
データフレームの指定されたカラムをリストに変換する	df[column].values.tolist()
列'A'と列'B'をキーとして2つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
カラムのNaNを最小値で補う	ds.fillna(ds.min())
データフレームのカラムの中にいくつ欠損値が存在するかカウントする	df[col].isna().sum()
色差別ないの折れ線グラフをリストとリストで描画してその線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
エクセルファイルからデータフレームを読む	pd.read_excel(filename)
両端キューが空でないか調べる	len(deq) != 0
二変数の最も小さい値	min(x, y)
折れ線グラフのダイアモンドマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
データフレームの内で、列と列の重複を削除する	df.drop_duplicates(subset=column)
データフレームの値が未入力値かどうか	df.isna()
リストとリストについて散布図を描画して、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
折れ線グラフを描画して、その色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
方程式として数式を解く	sympy.solve(e)
リストとリストについて散布図を描画して、バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
文字列リストに列を変換して、'改行を用いて結合する	'\n'.join(map(str, iterable))
浮動小数点数を小数点以下第一位で丸める	round(x, 1)
ダークスレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='darkslateblue')
グラフの用途を画面にする	sns.set(context='notebook')
xを浮動小数点数型に変換する	float(x)
折れ線グラフを描画してその色をディムグレーに設定する	plt.plot(データ列, データ列2, color='dimgrey')
データフレームのリスト列を整数に四捨五入する	df[aList].round()
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
第二コマンド引数を確認する	sys.argv[1]
xの小数点以下'2'桁まで表示する	print(':.2f'.format(x))
折れ線グラフを描画して、その色をスレートブルーに変更する	plt.plot(データ列, データ列2, color='slateblue')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
最大値でデータフレームの未入力値を置換する	df.fillna(df.max())
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
赤色のバツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='x', c='r')
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
リストとリストの散布図に黒色の右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
日付時刻データからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
インデックスによってデータフレーム全体をソートする	df.sort_index()
＜オプション＞グラフの色をシルバーに設定する	color = 'silver'
線グラフの色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
データフレームのn行まで抽出する	df[:n]
ふたつの集合は集合と互いに素か確認する	aSet.isdisjoint(aSet2)
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
データフレームのリストカラムの欠損値を最大値で補う	df[aList].fillna(df[aList].max())
＜オプション＞どの列も行にしない	index_col = None
ピアソン相関係数でデータフレームの相関行列を求める	df.corr(method='pearson')
散布図を色差別ない色のマーカーとして描画する	plt.plot(xdata, ydata, c='colorblind')
黒い右三角マーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='>', c='k')
方程式として数値のパラメータの解を求める	sympy.solve(e, z)
変数を緑色にする	f'\033[32m{value}\033[0m'
配列とリストについての散布図に黒い四角マーカーをプロットする	plt.plot(xdata, ydata, marker='s', c='k')
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
度数分布図の範囲を変更する	plt.hist(データ列, range=(start, end))
線グラフの色をコーラルに変更する	plt.plot(データ列, データ列2, color='coral')
本日の曜日を使う	datetime.datetime.today().weekday()
文字列の中のケースを無視して正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフを描画して、その色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
淡いを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
タイムスタンプデータにn週間分、加える	aDatetime + datetime.timedelta(weeks=n)
辞書の項目名とその値を列挙する	aDict.items()
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列, データ列2, color='lavenderblush')
線グラフを描画して、その色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
エラーなく文字列の接尾辞から部分文字列を除く	s.removesuffix(sub)
逆正弦	math.asin(x)
データフレームを各列と列の組み合わせ毎に集約して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
データフレームのカラムの母標準偏差を算出する	df[col].std(ddof=0)
リストの末尾からn番目以前の要素を得る	aList[:-n]
折れ線グラフの▽印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
リストを縦軸、配列を横軸と指定して、折れ線を描画する	plt.plot(xdata, ydata)
折れ線グラフを描画して、色をゴールドに指定する	plt.plot(データ列, データ列2, color='gold')
変数をシアンで出力する	print(f'\033[36m{value}\033[0m')
列のそれぞれを関数でフィルタする	filter(func, iterable)
＜オプション＞ダークオレンジ色を使う	color = 'darkorange'
データ列の未入力値を平均値に設定する	ds.fillna(ds.mean())
データフレームから型リストで指定されたデータ型の列のみ抽出する	df.select_dtypes(include=typeList)
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
文字列内にひとつでも数字が含まれる	any(c.isdigit() for c in s)
配列と配列についての散布図にカラーコードの右三角マーカーを描く	plt.plot(xdata, ydata, marker='>', c=rgb)
双方向キューの要素を左にn個分ローテンションする	deq.rotate(-n)
文字列を下線付きで表示する	print(f'\033[4m{value}\033[0m')
ヒストグラムを描画して、その色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
カラムのpercentパーセンタイルを求める	ds.quantile(percent/100)
タプルを浅くコピーする	dict(aDict)
辞書にキーワード引数で追加する	aDict.update(**kwargs)
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
線グラフの色を茶色に指定する	plt.plot(データ列, データ列2, color='brown')
ファイルパスが存在しないか調べる	not os.path.exists(filepath)
最大値・最小値の範囲で一様な乱数	random.uniform(最小値, 最大値)
リストとリストの濃いグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='r')
nがn2と等しいかどうか調べる	n == n2
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
辞書のキーを列挙する	list(aDict)
配列とリストの散布図を描画する	plt.scatter(xdata, ydata)
表データをインポートする	import pandas as pd
＜オプション＞三角マーカーを描画する	marker = '^'
データフレームを'A'列と'B'列の値によってグループ化し、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームのリストカラムが正規分布からどれだけ、歪んでいるか見る	df[aList].kurt()
折れ線グラフに緑色の四角印を描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='g')
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c='k')
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
配列を元に全要素が1の行列を作る	np.ones_like(aArray)
線グラフの色をライトブルーに設定する	plt.plot(データ列, データ列2, color='lightblue')
上位集合か調べる	aSet.issuperset(aSet2)
辞書のキー一覧を参照する	list(aDict)
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
ヒストグラムを描画して、その色をダークオリーブグリーンに変更する	plt.hist(データ列, color='darkolivegreen')
データフレームのカラムのタイムゾーンを日本にする	df[col].tz_convert('Asia/Tokyo')
線グラフを描画して色をアクアマリンに変更する	plt.plot(データ列, データ列2, color='aquamarine')
実数は有限	math.isfinite(x)
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
標準入力から1行分読む	sys.stdin.readline()
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
折れ線グラフの▲印を黒くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
＜オプション＞色をコーラルに設定する	color = 'coral'
データフレームの列の中の欠損値の合計を数える	df[col].isna().sum()
リストとリストについての散布図を色差別ない色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
バツマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='x')
データフレームの中で何行、重複するか見る	df.duplicated().sum()
2つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
グラフをスライド用に設定する	sns.set(context='talk')
折れ線グラフのバツ印を緑色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
データフレームのリスト列の第一四分位数	df[aList].quantile(0.25)
ファイルをオープンして]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
＜オプション＞区切りを使わない	sep = ''
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
データフレームを列ごとにグループ化して、それぞれのグループの平均値を求める	df.groupby(column).mean()
＜オプション＞ライムグリーンに色を設定する	color = 'limegreen'
横棒を描画して、xに幅を設定する	plt.barh(ラベル列, データ列, width=x)
データフレームのカラムが何秒か見る	df[col].dt.second
ファイルをオープンして]、バイナリストリームを見る	open(filepath, mode='rb')
nとn2の差を計算する	n - n2
カラムの中にが存在する	ds.isin([value])
二数の最大値	max(x, y)
リストと数列について黒色の色差別ないグラフをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
キーがマッピングにあるかどうか調べる	key in aDict
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
ヒストグラムを描画して、色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
補足を文字列と文字列と入れる	plt.legend([s, s2])
数列とリストの散布図に文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
文字列は識別子名か	s.isidentifier()
リストとリストについて破線グラフを描画して、その色を濃いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
辞書からカウンタを作る	collections.Counter(aDict)
データフレームの列をドロップして、インプレイスする	df.drop(column, axis=1, inplace=True)
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
文字列の最後からタブを除去する	s.rstrip('\t')
折れ線グラフを描画してその色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
n個の整数列を作る	list(range(n))
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
リストとリストの色差別ないグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
文字列をバイト列に変換する	bytes(s)
折れ線グラフを描画して、その色をミディアムオーキッドに設定する	plt.plot(データ列, データ列2, color='mediumorchid')
データフレームをグループ化し、各列に対し合計を計算する	df.groupby(column)[column2].sum()
n×n2	n * n2
タプルを逆順にする	aTuple[::-1]
折れ線グラフに線幅nのダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markeredgewidth=n)
実数とyの斜辺	math.hypot(x, y)
リネン色の線グラフを描画する	plt.plot(データ列, データ列2, color='linen')
折れ線グラフのクロスマーカーを黒くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
破壊的に複数の列でデータフレームを降順に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
n個にデータ列をビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
データ列とラベルを指定して、棒グラフをプロットする	plt.bar(ラベル列, データ列)
線グラフを描画してその色をダーク・スラテグレーに指定する	plt.plot(データ列, データ列2, color='darkslategrey')
バリーウッドにヒストグラムの色を設定する	plt.hist(データ列, color='burlywood')
データフレームを２つの列の値によって集約し、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
リストを中央値でビン分割する	pd.qcut(aList, 2)
＜オプション＞グラフの色をゴールドに設定する	color = 'gold'
数列の変化を折れ線グラフに描画する	plt.plot(range(len(xdata)), xdata)
デックのn番目の要素を使う	deq[n]
散布図に赤色の上三角マーカーを用いる	plt.plot(xdata, ydata, marker='^', c='r')
nがn2未満、それかn3以上かどうか確認する	n < n2 or n >= n3
データフレームを列の値でグループ化する	df.groupby(column)
ヒストグラムを描画して色をホットピンクに指定する	plt.hist(データ列, color='hotpink')
グラフのサイズを横width縦heightに設定する	plt.figure(figsize=(width, height))
パステル調のグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
折れ線グラフを描画してその色をシーグリーンに変更する	plt.plot(データ列, データ列2, color='seagreen')
線グラフを描画して、その色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
Pandasで、データフレームのcollを日付データにする	pd.to_datetime(df[col])
集合をイミュータブルなセットに変換する	frozenset(aSet)
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
データフレームの列と列に重複があれば、落とす	df.drop_duplicates(subset=column)
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='k')
部分文字列が文字列の開始位置以降にある	s.find(sub, start) != -1
データフレームの列の欠損値を直後の値で埋める	df[col].fillna(method='bfill')
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
ヒストグラムを描画して、色をアンティークホワイトに変更する	plt.hist(データ列, color='antiquewhite')
カラーコードの右三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='>', c=rgb)
ミディアムパープル色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumpurple')
列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
xが1、もしくは2もしくは3に等しい	x == 1 or x == 2 or x == 3
折れ線グラフを描画して、その色をシルバーに指定する	plt.plot(データ列, データ列2, color='silver')
実数の双曲線正弦の逆数を求める	math.asinh(x)
ヒストグラムを描画してその色を真紅に設定する	plt.hist(データ列, color='crimson')
実数を切り上げて整数にする	math.ceil(x)
＜オプション＞ミディアムシアグリーン色を使う	color = 'mediumseagreen'
データ列とリストについての散布図を暗い色で重なりを見やすく描く	plt.plot(xdata, ydata, c='dark', alpha=0.5)
複数の列でデータフレームを並べ、、更新する	df.sort_values(by=column, inplace=True)
＜オプション＞NaNも無視しない	dropna = True
折れ線グラフを描画してその色をハニーデューに設定する	plt.plot(データ列, データ列2, color='honeydew')
ファイルパスをオープンして]、バイナリストリームを求める	open(filepath, mode='rb')
グラフを論文用に設定する	sns.set(context='paper')
ふたつの集合が集合と交わりを持たないかどうか調べる	aSet.isdisjoint(aSet2)
折れ線グラフを描画して、色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
ヒストグラムを描画して、色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
ブラック色の線グラフを描画する	plt.plot(データ列, データ列2, color='black')
折れ線グラフに線幅nの丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
＜オプション＞ミディアムシアグリーン色を使用する	color = 'mediumseagreen'
文字列の文字数	len(s)
実数を数で割る	x / y
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
整数nを十六進表現に変換する	hex(n)
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
データフレームの中に文字列とがある	df.isin([value, value2])
リストとリストについて散布図を描画して、色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
折れ線グラフを描画して、その色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
列'A'と列'B'をキーとして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
濃い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
数値を表示する	print(value)
＜オプション＞グラフの色をシスルに設定する	color = 'thistle'
replに正規表現patternで一度にデータ列の値を置換する	ds.replace(pattern, repl, regex=True)
パステル調のグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='pastel', color='r')
＜オプション＞オレンジを用いる	color = 'orange'
折れ線のラベルをuntitledに設定する	plt.plot(xdata, ydata, label=untitled)
暗いの折れ線グラフの色を赤にする	plt.plot(xdata, ydata, linestyle='dark', color='r')
線グラフを描画して、色をイエローグリーンに指定する	plt.plot(データ列, データ列2, color='yellowgreen')
行列の要素ごとの積を求める	np.multiply(aArray, aArray2)
２つのオブジェクトが等しいか調べる	obj == obj2
本日が土曜日	datetime.datetime.today().weekday() == 5
データフレームのリストカラムのNaNを最頻値で置き換える	df[aList].fillna(df[aList].mode().iloc[0])
データフレームをエクセルファイルファイルを用いてJSONLファイルに保存する	df.to_excel(filename)
散布図に黒い三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='k')
＜オプション＞データ型を指定する	dtype = np.int32
暗いグラフをリストと数列で描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
暗い赤にヒストグラムの色を指定する	plt.hist(データ列, color='darkred')
青いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='b')
実数の仮数	math.frexp(x)[0]
ヒストグラムの色をライトスカイブルーに変更する	plt.hist(データ列, color='lightskyblue')
イテラブルを文字列に変換して、部分文字列を用いてつなげる	sub.join(map(str, iterable))
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
データフレームの中のカラムを中央値でビン分割する	pd.qcut(df[col], 2)
折れ線グラフの▼印を赤色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
グラフの描画で濃い色を使う	sns.set(pallete='deep')
インディゴ色の線グラフを描画する	plt.plot(データ列, データ列2, color='indigo')
ヒストグラムの色をローングリーンに指定する	plt.hist(データ列, color='lawngreen')
配列とリストについての散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
データ列を折れ線グラフに描画して、マーカーを△にする	plt.plot(データ列, データ列2, marker='^')
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
ヒストグラムを描画して、色をシスルに設定する	plt.hist(データ列, color='thistle')
散布図に左三角マーカーを使う	plt.plot(xdata, ydata, marker='<')
線グラフを描画して、その色をラベンダーに設定する	plt.plot(データ列, データ列2, color='lavender')
プログラムを異常止める	sys.exit(1)
折れ線グラフの色をペールグリーンに指定する	plt.plot(データ列, データ列2, color='palegreen')
データフレームのカラムの分散を計算する	df[col].var()
文字列を空白を用いて区切って、整数のリストに変換する	map(int, s.split())
文字列が文字列リストに含まれるか調べる	s in aStringList
折れ線グラフを描画して、色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
ファイル名がJSONファイル	filename.endswith('.json')
ヒストグラムを描画して、その色をゴールドに設定する	plt.hist(データ列, color='gold')
カラムを10の位で丸める	ds.round(-1)
改行で文字列を分割し、文字列リストに変換する	s.splitlines()
黒いバツマーカーを配列と数列についての散布図にプロットする	plt.plot(xdata, ydata, marker='x', c='k')
space	' '
データ列を折れ線グラフに描画して、マーカーをダイアモンド印にする	plt.plot(データ列, データ列2, marker='D')
回数を制限して文字列を置き換える	s.replace(sub, newsub, n)
データフレームのカラムの欠損値をモードで置き換える	df[col].fillna(df[col].mode().iloc[0])
明るいの折れ線グラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
グラフ中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
配列の行ごとの最小値	np.min(aArray, axis=1)
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
三自然数の最小公倍数	math.lcm(n, n2, n3)
データ列を折れ線グラフに描画して、マーカーを四角印にする	plt.plot(データ列, データ列2, marker='s')
n2分のn	n / n2
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
ヒストグラムの色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
最大長nのキューを作成する	collections.deque(maxlen=n)
実数を千の位で丸める	round(x, -3)
行列式	np.linalg.det(aArray)
グラフの大きさを変更する	plt.figure(figsize=(width, height))
＜オプション＞グラフの色をカデットブルーにセットする	color = 'cadetblue'
日付時刻データの時間を求める	aDatetime.hour
文字列の中の大文字・小文字を無視してパターンによるすべてのマッチを見る	re.findall(pattern, s, flags=re.IGNORECASE)
円周率	math.pi
数列とリストについてリストの値に応じて、散布図の色を変える	plt.scatter(xdata, ydata, c=aList, cmap='Blues')
ヒストグラムを描画して、その色をカーキにセットする	plt.hist(データ列, color='khaki')
日付データが火曜日か	aDate.weekday() == 1
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
ヒストグラムを描画して、色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
組中の要素が全て真	all(aTuple)
棒グラフを描画して幅をxに変更する	plt.bar(ラベル列, データ列, width=x)
データフレームのカラムの欠損値をxに増やす	df[col].fillna(x)
＜オプション＞左三角マーカーを使う	marker = '<'
折れ線グラフのアルファ値をalphaに変更する	plt.plot(xdata, ydata, alpha=alpha)
イテラブルとリストの散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
線グラフの色をオレンジレッドに変更する	plt.plot(データ列, データ列2, color='orangered')
全要素を０で初期化された整数型の行列	np.zeros(行数, 列数, dtype=np.int)
リストとイテラブルの淡いを描画し、、その色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
ふたつの集合のユニオン	aSet.union(aSet2)
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
データフレームの指定した列をリストとして抽出する	df[column].values.tolist()
データフレームの内で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
二進文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
色差別ないグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='colorblind', color='k')
＜オプション＞グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
文字列がタプルの要素かどうか	element in aTuple
＜オプション＞タン色を使う	color = 'tan'
＜オプション＞オーキッドにグラフの色を設定する	color = 'orchid'
＜オプション＞ダークグレー色を使用する	color = 'darkgray'
透明度alphaでリストとリストの折れ線グラフを描画する	plt.plot(xdata, ydata, alpha=alpha)
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
集合を更新不能にする	frozenset(aSet)
配列と配列の明るいグラフを描画し、、色を青色に設定する	plt.plot(xdata, ydata, linestyle='bright', color='b')
散布図にカラーコードのダイアモンドマーカーを用いる	plt.plot(xdata, ydata, marker='D', c=rgb)
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
未初期化の行列を作る	np.empty(要素数, dtype=np.int)
日付時刻データにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
nがn2か	n == n2
アルファalphaの折れ線グラフを描く	plt.plot(xdata, ydata, alpha=alpha)
昇順に組の要素を並べる	sorted(aTuple, reverse=True)
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
データフレームをカラムの名前を付けずにJSONLファイルに保存する	df.to_csv(filename, header=None)
n進数文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
実数の正接	math.tan(x)
データフレームのNaNをメディアンで埋める	df.fillna(df.median())
ユーザの入力を整数として受け取る	int(input())
データフレームの列がリストに含まれる行を取り出す	df[df[column].isin(aList)]
折れ線グラフの丸マーカーを緑色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='g')
ヒストグラムを描画して、色をパープルに設定する	plt.hist(データ列, color='purple')
データ列とデータ列の折れ線をカラーコードで描画する	plt.plot(xdata, ydata, color=rgb)
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
＜オプション＞ブランチドアーモンド色を使う	color = 'blanchedalmond'
＜オプション＞最初のカラムをインデックスに指定する	index_col = 0
データフレームの各グループごとの平均値	df.groupby(column).mean()
文字列を部分文字列で分割する	s.split(sub)
データフレームから1行だけカラムを除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
リストと配列についての散布図にカラーコードの左三角マーカーを描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
列の要約統計量	ds.describe()
暗いでヒストグラムを描画する	plt.hist(xdata, color='dark')
データフレームを列名リストの値によって集計する	df.groupby(columns)
散布図に黒い四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='k')
緑色の▲印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
日付データにn分を加算する	aDate + datetime.timedelta(minutes=n)
データフレームを'A'列と'B'列によって大きい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームのリスト列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[aList].corr())
リストと配列の散布図にカラーコードの△マーカーを描く	plt.plot(xdata, ydata, marker='^', c=rgb)
スチールブルーにヒストグラムの色をセットする	plt.hist(データ列, color='steelblue')
＜オプション＞アクアマリン色を使う	color = 'aquamarine'
散布図にカラーコードのポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c=rgb)
分子と分母から有理数を準備する	fractions.Fraction(分子, 分母)
部分文字列が文字列の開始位置番目からと終了位置までの範囲に含まれないか	s.find(sub, start, end) == -1
列の中にいくつ日付データが存在するか数える	ds.isin([value]).sum()
データフレームの中の列をn個にビニングする	pd.cut(df[col], n)
線グラフを描画してその色をプラムに設定する	plt.plot(データ列, データ列2, color='plum')
リストとデータ列について散布図を描画し、マーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
列でデータフレームを小さい順にソートする	df.sort_values(by=column, ascending=True)
ケンドール相関係数でデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='kendall')
列と列を連結する	itertools.chain(iterable, iterable2)
実数を浮動小数点数で割って、切り捨てる	x // y
ベクトルの次元数を求める	aArray.ndim
文字列のプレフィックスが部分文字列か調べる	s.startswith(sub)
折れ線グラフを描画してその色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
データ列と数列の散布図を描いて、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
カラーコードのバツマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
＜オプション＞グラフの線種を一点鎖線にセットする	linestyle = 'dashbot'
リストとリストの黒色のパステル調のを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
一度にデータフレームの列名を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
オブジェクトの属性を消す	delattr(obj, プロパティ名)
ヒストグラムを描画して、その色をレモンシフォンに変更する	plt.hist(データ列, color='lemonchiffon')
データフレームの列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
コマンドラインフラグの状態	sys.flags
破壊的に列によって昇順にデータフレームをソートする	df.sort_values(by=column, ascending=True, inplace=True)
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
リストを縦軸、データ列をx軸として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
散布図を暗い色のマーカーとして描画する	plt.plot(xdata, ydata, c='dark')
データフレームの列とカラムのヒートマップをグラフ化する	sns.heatmap(df[[column, column2]].corr())
＜オプション＞ダークバイオレット色を使う	color = 'darkviolet'
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
集合から別の集合の要素を除く	aSet.difference_update(aSet2)
黒いポイントマーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='.', c='k')
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
ファイルパスをUTF8でオープンする]	open(filepath, encoding='utf-8')
末尾から文字列を部分文字列で区切る	s.rsplit(sub)
配列とシーケンスのデカルト積	itertools.product(iterable, iterable2)
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
カラーコードの丸マーカーをリストとデータ列の散布図にプロットする	plt.plot(xdata, ydata, marker='o', c=rgb)
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
データフレームを昇順に列でソートする	df.sort_values(by=column, ascending=True)
データフレームの重複した行のみ	df[df.duplicated(keep=False)]
タイムスタンプデータからn日分、減算する	aDatetime - datetime.timedelta(days=n)
折れ線グラフを描画して、その色をリネンにセットする	plt.plot(データ列, データ列2, color='linen')
真上位集合か調べる	aSet > aSet2
リストと数列について散布図を描画して、ダイアモンドマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='D', c=rgb)
データフレームのリストカラムの欠損値を平均値に増やす	df[aList].fillna(df[aList].mean())
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列, データ列2, color='lightgrey')
＜オプション＞グラフの色をグレーに設定する	color = 'gray'
＜オプション＞クリムゾンを用いる	color = 'crimson'
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
nの三乗	n ** 3
配列と数列についての散布図を濃い色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
＜オプション＞グラフの色をシアンに指定する	color = 'cyan'
aListn番目から要素をポップする	aList.pop(n)
折れ線グラフを描画して、その色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
文字列が全て小文字	s.islower()
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
現在のモジュール	sys.modules[__name__]
折れ線グラフの下三角マーカーのサイズをnに指定する	plt.plot(データ列, データ列2, marker='v', markersize=n)
ヒストグラムを描画して、その色をスプリンググリーンに変更する	plt.hist(データ列, color='springgreen')
リストと数列について散布図を描画して、クロスマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='x', c=rgb)
ヒストグラムを描画して、その色をデピンクに設定する	plt.hist(データ列, color='deeppink')
データフレームの列のユニークな値の個数	df[col].nunique()
nとn2の差	n - n2
データフレームが重複しているか	df.duplicated()
カウンタを集合にする	set(aCounter)
データフレームの列名を指定した名前リストに置き換える	df.columns = columns
整数nを16進表現に変換する	hex(n)
平均値でデータ列の欠損値を補う	ds.fillna(ds.mean())
棒グラフを描画して、中央寄せする	plt.bar(ラベル列, データ列, align='center')
ヒストグラムの色をライトサーモンに変更する	plt.hist(データ列, color='lightsalmon')
nが一桁の数か調べる	-9 <= n <= 9
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
ふたつの関係が真部分集合か	aSet < aSet2
データフレームのカラムの中にいくつ欠損値が存在するか数える	df[col].isna().sum()
ヒストグラムを描画して、その色をグレーに設定する	plt.hist(データ列, color='grey')
文字列の中の複数行対応としてパターンによるすべてのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
文字列の先頭でパターンにASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
配列の次元の数	aArray.ndim
小数点数のk進対数	math.log(x, k)
赤色の大バツマーカーとして散布図を描く	plt.plot(xdata, ydata, marker='X', c='r')
＜オプション＞パールゴールデンロッド色を使う	color = 'palegoldenrod'
暗い色のヒストグラムで配列を描く	plt.hist(xdata, color='dark')
ファイルとfilenameを結合する	os.path.join(filepath, filename)
＜オプション＞紺色を用いる	color = 'darkblue'
データフレームのn行目をインプレイスで消す	df.drop(n, axis=0, inplace=True)
配列を転置する	aArray.T
グラフの横軸にuntitledというラベルをつける	plt.xlabel(untitled)
ゼロ埋めされた行列	np.zeros(行数, 列数)
'A'列の値によってデータフレームをグループ化する	df.groupby('A')
＜オプション＞ハニーデューにグラフの色を設定する	color = 'honeydew'
折れ線グラフのダイアモンド印を赤色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
データフレームの列のヒストグラムを描画する	plt.hist(df[column])
要素がセットに含まれる	element in aSet
文字列をユニコード列にする	[ord(ch) for ch in s]
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
数値のパラメータについてのn階微分を求める	sympy.diff(e, z, n)
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
イテラブルとイテラブルについての散布図に赤色の右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='r')
データ列を1000の位で丸める	ds.round(-3)
ファイルパスを文字列の示すエンコーディングとして書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
＜オプション＞グリーン色を使う	color = 'green'
ファイル名がJSONファイルか調べる	filename.endswith('.json')
列'A'と列'B'をキーとして2つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
実行環境がウィンドウズか確認する	sys.platform.startswith('win32')
データフレームのNaNを最頻値に設定する	df.fillna(df.mode().iloc[0])
リストとイテラブルについて散布図を描画し、、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
淡いグラフの線幅を指定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
CSVファイルTSVファイルをn番目の列を行として読み込む	pd.read_csv(filename, index_col=n)
データ列の文字列をNaNにする	ds.replace(s, np.nan)
ヒストグラムの色を茶色にする	plt.hist(データ列, color='brown')
ヒストグラムを描画してその色を貝殻に設定する	plt.hist(データ列, color='seashell')
折れ線グラフの色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
リストと配列の折れ線グラフを描画して、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
リストとリストのカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
黄色いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
キーワード引数でマッピングに更新する	aDict.update(**kwargs)
まとめてデータフレームをValueMapで置き換える	df.replace(ValueMap)
文字列を文字リストにする	list(s)
赤い丸マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='o', c='r')
折れ線グラフの星マーカーを黄色くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
赤い丸マーカーをリストと配列の散布図にプロットする	plt.plot(xdata, ydata, marker='o', c='r')
行列の行ごとの標準偏差	np.std(aArray, axis=1)
プロットのパレットをpalleteNameに設定する	sns.set(pallete=palleteName)
データフレームを列によって並べて、更新する	df.sort_values(by=column, inplace=True)
散布図にパステル調の色のマーカーを使う	plt.plot(xdata, ydata, c='pastel')
データフレームのリストカラムの未入力値を最大値で補う	df[aList].fillna(df[aList].max())
文字列リストをつなげるひとつの文字列にする	''.join(aStringList)
方程式として数式の変数の解を求める	sympy.solve(e, z)
カウンタから最頻出な要素の件数を求める	aCounter.most_common()[1]
ヒストグラムを描画して、その色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
nの二進文字列	bin(n)[2:]
リストとリストについて濃い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='deep')
データフレームのカラムは何日か見る	df[col].dt.day
xを論理値に変換する	bool(x)
数式を変数について微分する	sympy.diff(e, z)
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
データフレームを列でによって破壊的にソートする	df.sort_values(by=column, inplace=True)
項目名が辞書上で定義済みか調べる	key in aDict
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
列をキーにして2つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
＜オプション＞グラフの線幅をnに設定する	linewidth = n
暗い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='dark')
辞書の内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
文字列は印字できるかどうか確認する	s.isprintable()
文字列は全て数値かどうか	s.isnumeric()
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
配列の累積和	np.cumsum(aArray)
＜オプション＞ダークグリーン色を使う	color = 'darkgreen'
リストをマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
タプルをミュータブルにする	list(aTuple)
黄緑色の線グラフを描画する	plt.plot(データ列, データ列2, color='chartreuse')
ヒストグラムを破線に設定する	plt.hist(データ列, linestyle='dashed')
ヒストグラムを描画してその色をオーキッドにセットする	plt.hist(データ列, color='orchid')
nとn2の積を求める	n * n2
n2がn以上、かつn3以下か調べる	n <= n2 and n2 <= n3
折れ線グラフのクロスマーカーを赤くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
ヒストグラムを半透明化する	plt.hist(データ列, alpha=0.5)
xを浮動小数点数型にする	float(x)
散布図に黒色の大バツマーカーを用いる	plt.plot(xdata, ydata, marker='X', c='k')
データフレームから指定された二つの列だけ抽出する	df[[column, column2]]
浮動小数点数を整数に変換する	int(x)
３変数の最大値	max(x, y, z)
リストとリストについて相関を可視化する	plt.scatter(xdata, ydata)
JSONフォーマットの文字列を読み込む	json.loads(jsonString)
データ列を10の位で四捨五入して、整数型にする	ds.round(-1).astype(int)
白色で文字列をプリントする	print(f'\033[37m{value}\033[0m')
折れ線グラフを描画して、色をシーグリーンに指定する	plt.plot(データ列, データ列2, color='seagreen')
データフレームの行をリセットする	df.reset_index()
折れ線グラフの色をグリーンイエローに指定する	plt.plot(データ列, データ列2, color='greenyellow')
組の文字列が最初に見つかる位置	aTuple.index(element)
＜オプション＞グリーンイエローにグラフの色を変更する	color = 'greenyellow'
＜オプション＞グラフの色をグレーに設定する	color = 'grey'
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
カウンタ間で共通部分を計算する	aCounter & aCounter2
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
リストとイテラブルについて散布図を描画し、マーカーの色を淡いにセットする	plt.plot(xdata, ydata, c='muted')
イテラブルにシーケンスを続ける	itertools.chain(iterable, iterable2)
＜オプション＞改行コードを動作環境依存に指定する	newline = None
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
線グラフの色をフォレストグリーンに指定する	plt.plot(データ列, データ列2, color='forestgreen')
データフレームのリストカラムの値をreplに正規表現patternで一度に置換する	df[aList].replace(pattern, repl, regex=True)
＜オプション＞右三角マーカーを使う	marker = '>'
データフレームのリストカラムの要約統計量	df[aList].describe()
列によってデータフレームをソートして、上位n件を取り出す	df.sort_values(columns).head(n)
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
＜オプション＞ピーチパフを使う	color = 'peachpuff'
＜オプション＞▽印を加える	marker = 'v'
＜オプション＞データ型を指定する	dtype = np.int8
重なりを見やすく色差別ない色で配列とリストの散布図を描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
降順でデータフレーム全体をインデックスによって整列する	df.sort_index(ascending=False)
データフレームの先頭を見る	df.head()
1からnまでの整数列	list(range(1, n+1))
逆双曲線正弦	math.asinh(x)
1からNまでの配列を作る	np.arange(1, N+1)
＜オプション＞色を暗い赤に指定する	color = 'darkred'
線グラフを描画して、その色を濃い青に設定する	plt.plot(データ列, データ列2, color='darkblue')
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
ダークブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
線グラフを描画して、その色をブラウンに設定する	plt.plot(データ列, データ列2, color='brown')
折れ線グラフを一点鎖線にセットする	plt.plot(データ列, データ列2, linestyle='dashbot')
一点鎖線にヒストグラムの線のスタイルを指定する	plt.hist(データ列, linestyle='dashbot')
青色の暗いグラフを描く	plt.plot(xdata, ydata, linestyle='dark', color='b')
リストとリストの黒色の暗いグラフをプロットする	plt.plot(xdata, ydata, linestyle='dark', color='k')
ファイルパスを絶対パスにする	os.path.abspath(filepath)
数を十六進表記の文字列にする	x.hex()
＜オプション＞マルーンにグラフの色を設定する	color = 'maroon'
線グラフの色を耐火レンガに設定する	plt.plot(データ列, データ列2, color='firebrick')
配列とリストの濃いを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='deep', color='b')
折れ線グラフを描画して、その色をブラウンに指定する	plt.plot(データ列, データ列2, color='brown')
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
イテラブルとイテラブルについてパステル調のグラフを描画し、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
折れ線グラフの色を青くする	plt.plot(データ列, データ列2, color='b')
＜オプション＞大バツ印を使う	marker = 'X'
角度のラジアン	math.radians(degree)
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
オプションで、標準出力を出力にする	file = sys.stdout
リストと数列の散布図を明るい色でプロットする	plt.plot(xdata, ydata, c='bright')
＜オプション＞フクシアに色をセットする	color = 'fuchsia'
等量で配列をビン数nでビン分割する	pd.qcut(aArray, n)
＜オプション＞グラフの色をローングリーンに指定する	color = 'lawngreen'
データフレームのカラムの未入力値を平均値に設定する	df[col].fillna(df[col].mean())
ファイルをEUCで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
改行しないで文字列をプリントする	print(value, end='')
パステル調の色の度数分布図を使ってイテラブルを描く	plt.hist(xdata, color='pastel')
イテラブルの各要素を関数でフィルタする	filter(func, iterable)
データフレームの欠損値を平均値にセットする	df.fillna(df.mean())
グラフの見栄えを綺麗にする	import seaborn as sns
＜オプション＞どのカラムもインデックスに設定しない	index_col = None
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
Pandasで数値時刻のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームの列をインデックスに設定する	df.set_index(column)
配列を淡い色の度数分布図で描画する	plt.hist(xdata, color='muted')
配列と数列の青い色差別ないグラフをプロットする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
二つの列によってデータフレームをグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
保存するカンマ区切りのファイルの小数点以下の桁数を指定する	df.to_csv(filename, float_format='%.3f')
ヒストグラムを描画して、その色を紺に設定する	plt.hist(データ列, color='darkblue')
ファイルから1文字読む	f.read(1)
要素は集合に含まれるか調べる	element in aSet
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
データ列の曜日の名前	ds.dt.weekday_name
配列の形状を変形する	aArray.reshape(行数, 列数)
折れ線グラフの右三角印の大きさをnにする	plt.plot(データ列, データ列2, marker='>', markersize=n)
＜オプション＞グラフの色をナバホホワイトに設定する	color = 'navajowhite'
要素がマップの値として含まれているかどうか	element in aDict.values()
変数について数式の積分を行う	sympy.integrate(e, z)
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
黒い大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c='k')
長さが一致しないバージョンのzip	itertools.zip_longest(iterable, iterable2)
黄色い丸印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
黒いダイアモンドマーカーで散布図を描く	plt.plot(xdata, ydata, marker='D', c='k')
凡例の場所を指定する	plt.legend(loc=(x, y))
データフレームの列の名前を列挙する	df.columns
numpyを使う	import numpy as np
イテラブルとリストについて黒い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
オブジェクトをイテラブルにする	iter(obj)
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
折れ線グラフの▲マーカーのサイズをnに変更する	plt.plot(データ列, データ列2, marker='^', markersize=n)
折れ線グラフを描画して、色をシスルに変更する	plt.plot(データ列, データ列2, color='thistle')
＜オプション＞グラフの色をペルーに変更する	color = 'peru'
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
折れ線グラフに大きさnの下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
データフレームとデータフレームの列を横方向に連結する	pd.concat([df, ds], axis=1)
色差別ない色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
＜オプション＞グラフの色をスラグレーに指定する	color = 'slategrey'
イテラブルと配列についての散布図にカラーコードの▲マーカーを描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
折れ線グラフを描画して、その色をミッドナイトブルーに設定する	plt.plot(データ列, データ列2, color='midnightblue')
ヒストグラムを描画して、その色をダークバイオレットに指定する	plt.hist(データ列, color='darkviolet')
変数を赤色にする	f'\033[31m{value}\033[0m'
データフレームからランダムにn行を抽出する	df.sample(n)
行列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
データフレームの指定されたカラム	df[column]
辞書からキーで指定されたエントリをポップする	aDict.pop(key)
暗いの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
ヒストグラムを淡いとして描画する	plt.hist(xdata, color='muted')
リストのn番目以降の部分を得る	aList[n:]
小数点数の指数部	math.frexp(x)[1]
線グラフの色をベージュに変更する	plt.plot(データ列, データ列2, color='beige')
分子n分母mの有理数を新規生成する	fractions.Fraction(numerator=n, denominator=m)
＜オプション＞グラフの色をダークシアグリーンに変更する	color = 'darkseagreen'
データフレームを各列毎にグループ分けし、、列の合計を計算する	df.groupby(column)[column2].sum()
スレートブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='slateblue')
ヒストグラムの色をサンディーブラウンにセットする	plt.hist(データ列, color='sandybrown')
真部分集合か調べる	aSet < aSet2
カラーコードの左三角マーカーを配列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
マッピングから項目名の値かもしくは要素を得る	aDict.get(key, element)
配列と数列の破線グラフを描画して、その色を色差別ないに設定する	plt.plot(xdata, ydata, linestyle='dash', color='colorblind')
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
Pandasで、文字列のUNIX時間からタイムスタンプ型に変換する	pd.to_datetime(s, unit='s', utc=True)
行列の列ごとの最小値	np.min(aArray, axis=0)
データ列とリストについての散布図にクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x')
配列とリストの散布図をパステル調の色で重なりを見やすく描く	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
実数の角度	math.degrees(x)
ファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
棒グラフの幅をxに設定する	plt.bar(ラベル列, データ列, width=x)
リストと配列について明るいを描いて色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
データフレームを列名リストによって昇順に並べ直す	df.sort_values(by=column, ascending=True)
データフレームを各列毎にグループ化し、、文字列というグループの個数を計算する	df.groupby(column).size()[s]
日付時刻データの分	aDatetime.minute
折れ線グラフに大きさnのダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markersize=n)
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
データ列の中の未入力値の合計をカウントする	ds.isna().sum()
文字列から部分文字列を取り除く	s.replace(sub, '')
文字列がリストに含まれない	element not in aList
データフレームから型リストで指定されたデータ型の列だけ除外する	df.select_dtypes(exclude=typeList)
＜オプション＞インディアンレッドに色を指定する	color = 'indianred'
グラフのフォントを日本語表示に指定する	sns.set(font='IPAexGothic')
折れ線グラフを描画してその色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
イエローグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='yellowgreen')
文字列の右側からタブを除去する	s.rstrip('\t')
本日が水曜日	datetime.datetime.today().weekday() == 2
リストと配列についての散布図に黒い丸マーカーを描く	plt.plot(xdata, ydata, marker='o', c='k')
リストの中の最小値	min(aList)
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
データフレームの欠損値がある行を削除する	df.dropna()
マッピングを複製する	aDict.copy()
＜オプション＞シスル色を使う	color = 'thistle'
ヒストグラムを描画して、その色をターコイズに指定する	plt.hist(データ列, color='turquoise')
nが3の倍数かどうか調べる	n % 3 == 0
三自然数の最小公倍数を計算する	math.lcm(n, n2, n3)
＜オプション＞ライトゴールドロディイエローにグラフの色を設定する	color = 'lightgoldenrodyellow'
リストをn個に分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列, データ列2, color='rebeccapurple')
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
データフレームのカラムのNaNを最小値で埋める	df[col].fillna(df[col].min())
数式を因数分解する	sympy.factor(e)
時刻を使う	import datetime
非数を使う	math.nan
データ列の欠損値を直後の値で置換する	ds.fillna(method='bfill')
ヒストグラムを描画して、その色を淡い茶色に設定する	plt.hist(データ列, color='tan')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
ヒストグラムを描画して、その色をラベンダーに設定する	plt.hist(データ列, color='lavender')
リストを暗い色のヒストグラムで描画する	plt.hist(xdata, color='dark')
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
最小値でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(df[aList].min())
セットの全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
方程式として数式のパラメータの解を求める	sympy.solve(e, z)
10を底とする実数の対数	math.log10(x)
折れ線グラフの三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
疑似乱数平均と標準偏差からを算出する	random.normalvariate(mu=0.5, sigma=0.2)
現在の日数	datetime.datetime.today().day
縦方向に複数のデータフレームを一つにする	pd.concat([df, df2, df3], axis=0)
ヒストグラムを描画して、色をブラックに設定する	plt.hist(データ列, color='black')
辞書のキーの一覧	aDict.keys()
nで乱数シードを固定する	random.seed(n)
＜オプション＞ライトコーラル色を使う	color = 'lightcoral'
濃いをデータ列とリストで描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
＜オプション＞ミディアムブルーにグラフの色を設定する	color = 'mediumblue'
リストとリストの折れ線グラフを描画して、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
線グラフを描画して色をミディアムスプリンググリーンに変更する	plt.plot(データ列, データ列2, color='mediumspringgreen')
フォーマットでデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
文字列を改行なしにプリントする	print(value, end='')
ヒストグラムを描画してその色をシスルに指定する	plt.hist(データ列, color='thistle')
ヒストグラムを描画してその色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
実数の逆双曲線余弦	math.acosh(x)
ヒストグラムを描画して、色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
リストとリストの折れ線グラフをuntitledとラベル付けして描く	plt.plot(xdata, ydata, label=untitled)
スピアマン順位相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
大文字と小文字を入れ替える	s.swapcase()
＜オプション＞グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
日付データが日付データと同時か調べる	aDate == aDate2
部分文字列が文字列の開始位置先に含まれる	s.find(sub, start) != -1
ファイルパスを書き込みモードとしてオープンする]	open(filepath, mode='w')
データフレームの文字列をNaNにする	df.replace(s, np.nan)
マップのキーとその項目を列挙する	aDict.items()
イエローグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='yellowgreen')
線グラフを描画してその色をオレンジレッドに指定する	plt.plot(データ列, データ列2, color='orangered')
パステル調のの折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
配列とリストで色差別ないグラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color=rgb)
本日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
折れ線グラフに黄色い星印を描画する	plt.plot(データ列, データ列2, marker='*', markerfacecolor='y')
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
データ列の中に日付データと日付データがいくつあるかカウントする	ds.isin([value, value2]).sum()
折れ線グラフの色をライトコーラルに変更する	plt.plot(データ列, データ列2, color='lightcoral')
データフレームの列のpercentパーセンタイルを求める	df[col].quantile(percent/100)
配列とリストについての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
折れ線グラフに青い上三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='b')
数式の変数に数式を代入する	e.subs(z, e2)
プロットのタイトルをuntitledに設定する	plt.title(untitled)
＜オプション＞色をラベンダーブラッシュにセットする	color = 'lavenderblush'
文字列が全て英数字	s.isalnum()
ヒストグラムの色をカデットブルーに指定する	plt.hist(データ列, color='cadetblue')
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
＜オプション＞グラフの色をアイボリーに変更する	color = 'ivory'
暗いグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='dark', color='r')
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数	s.count(sub, start, end)
異なるカラムをキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームを列でグループ化して列の要約統計量を求める	df.groupby(column).describe()[column2]
リストとデータ列の散布図に文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
ふたつの集合が集合と互いに素か	aSet.isdisjoint(aSet2)
データフレームのカラムの曜日が何日目か確認する	df[col].dt.dayofweek
折れ線グラフの色をスプリンググリーンに変更する	plt.plot(データ列, データ列2, color='springgreen')
リストとリストについて散布図をプロットして、マーカーの色を暗いにする	plt.plot(xdata, ydata, c='dark')
線グラフの色をライトゴールドロディイエローに変更する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
＜オプション＞ライトスチールブルー色を使う	color = 'lightsteelblue'
リストと配列についての散布図にカラーコードのクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x', c=rgb)
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
折れ線グラフの色をディープスカイブルーに指定する	plt.plot(データ列, データ列2, color='deepskyblue')
＜オプション＞ミスティローズに色を変更する	color = 'mistyrose'
散布図に赤いポイントマーカーを使う	plt.plot(xdata, ydata, marker='.', c='r')
イテラブルから重複を取り除く	set(iterable)
２つのデータ列を並べて柱状図にする	plt.hist([データ列, データ列2], color=['b', 'r'])
データフレームのリストカラムを丸める	df[aList].round()
珊瑚にヒストグラムの色を設定する	plt.hist(データ列, color='coral')
データ列とイテラブルについて破線グラフを描画して、色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
0で全要素を初期化されたベクトルを初期化する	np.zeros(要素数)
データフレームを列によってによって破壊的に並べる	df.sort_values(by=column, inplace=True)
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightsteelblue')
列によってでデータフレームを大きい順にソートする	df.sort_values(by=column, ascending=False)
ダークサーモンにヒストグラムの色を設定する	plt.hist(データ列, color='darksalmon')
データフレームを'A'列と'B'列によって昇順にソートし、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
＜オプション＞ライトブルー色を使う	color = 'lightblue'
黒い三角マーカーを使って散布図を描く	plt.plot(xdata, ydata, marker='^', c='k')
データフレームの列のユニークな値	df[col].unique()
散布図を赤い丸マーカーでプロットする	plt.plot(xdata, ydata, marker='o', c='r')
列をキーにして二つのデータフレームを内部ジョインする	pd.merge(df, df2, on=column, how='inner')
赤いパステル調のグラフを描く	plt.plot(xdata, ydata, linestyle='pastel', color='r')
リストとリストについて散布図を描画し、右三角マーカーの色をカラーコードにする	plt.plot(xdata, ydata, marker='>', c=rgb)
データ列の最頻値	ds.mode()
データフレームからカテゴリデータを抽出する	df.select_dtypes('object')
Pandasで、エポック秒のデータフレームのcollからタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
データフレームから数値データの列を抽出する	df.select_dtypes('number')
ダークシアン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkcyan')
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
ヒストグラムを描画して、その色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
列を累加したイテラブルを得る	itertools.accumulate(iterable)
双方向キューをリストに変換する	list(deq)
＜オプション＞エラーがあるとき例外を発生させる	errors = 'strict'
折れ線グラフの色をライトシアンに指定する	plt.plot(データ列, データ列2, color='lightcyan')
赤い右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c='r')
オブジェクトが論理値クラスのインスタンス	isinstance(obj, bool)
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
折れ線グラフを描画して色をナバホホワイトに設定する	plt.plot(データ列, データ列2, color='navajowhite')
＜オプション＞インディゴ色を用いる	color = 'indigo'
ガンマ関数の値	math.gamma(x)
ヒストグラムを描画して、その色をプラムに指定する	plt.hist(データ列, color='plum')
文字列のひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
アルファベットの文字列	string.ascii_letters
ヒストグラムを描画して、その色をベージュに設定する	plt.hist(データ列, color='beige')
nが1、もしくは2か調べる	n == 1 or n == 2
オプションで、出力先を標準エラーに変更する	file = sys.stderr
数値を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
ヒストグラムを描画してその色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
折れ線グラフのマーカーを左三角にする	plt.plot(データ列, データ列2, marker='<')
文字列のサフィックスが部分文字列かテストする	s.endswith(sub)
配列とリストの折れ線グラフをアルファalphaで描画する	plt.plot(xdata, ydata, alpha=alpha)
データフレームのリストカラムの歪度	df[aList].kurt()
ライトサーモンにヒストグラムの色をセットする	plt.hist(データ列, color='lightsalmon')
折れ線グラフの丸マーカーを黄色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='palegoldenrod')
データフレームをJSONLファイルにTSVファイルを使って保存する	df.to_csv(filename, sep='\t')
インディアンレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='indianred')
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
折れ線グラフの色を濃いシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
データフレームのインデックスがnの行を抽出する	df.loc[n]
データ列とリストの散布図を描画してマーカーの色を明るいに変更する	plt.plot(xdata, ydata, c='bright')
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
商と余りを同時に計算する	divmod(x, y)
タブ文字	'\t'
リストと数列についての散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
実数の双曲線正接を求める	math.tanh(x)
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
タプル内の要素が少なくともひとつ真かどうか調べる	any(aTuple)
コマンドの第二引数を知る	sys.argv[1]
イテラブルの全順列	itertools.permutations(iterable)
第二引数で指定されたファイルの名前	sys.argv[1]
データフレームから重複した行を残さず削除する	df.drop_duplicates(keep=False)
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
＜オプション＞グラフの色を貝殻に変更する	color = 'seashell'
データフレームを関数の値に集約して、列挙する	[(name, group) for name, group in df.groupby(関数)]
＜オプション＞サドルブラウンに色をする	color = 'saddlebrown'
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
散布図を黒色のバツマーカーで描画する	plt.plot(xdata, ydata, marker='x', c='k')
折れ線グラフに緑色のポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
プロットで日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
折れ線グラフを描画して、色をダークカーキに指定する	plt.plot(データ列, データ列2, color='darkkhaki')
数式を簡略にする	sympy.sympify(e)
数を実数で割った余り	x % y
黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
折れ線グラフの大バツマーカーを黄色にする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
＜オプション＞オリーブ色を使う	color = 'olive'
文字列を空白で区切る	s.split()
床数	math.floor(x)
リストと配列の散布図を描画して、マーカーを菱形に設定する	plt.plot(xdata, ydata, marker='D')
実数に数を足す	x + y
カウンタの項目一覧を使う	aCounter.keys()
プロットの見栄えをいい感じにセットする	sns.set()
部分文字列を範囲を指定して探す	s.find(sub, start, end)
実数を百の位で丸める	round(x, -2)
数列とリストの散布図を描いて、ダイアモンドマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='D', c=rgb)
線グラフを描画して、その色をリネンに設定する	plt.plot(データ列, データ列2, color='linen')
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
プラットホームがWindowsかどうか調べる	sys.platform.startswith('win32')
ヒストグラムを描画して、その色をパープルに指定する	plt.hist(データ列, color='purple')
データ列とリストの散布図を描画して、マーカーを下三角に設定する	plt.plot(xdata, ydata, marker='v')
明るいグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
＜オプション＞ダイアモンドマーカーを使う	marker = 'D'
データフレームの列名を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
配列をイテラブルから初期化する	np.array(iterable)
リストの末尾から要素をポップする	aList.pop()
オブジェクトのオブジェクト識別子	id(obj)
フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
折れ線グラフに線幅nの右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
カウンタのボトムをリストとして得る	aCounter.most_common()[:-n-1:-1]
＜オプション＞茶色色を使う	color = 'brown'
ヒストグラムを描画して、その色を青紫にセットする	plt.hist(データ列, color='violet')
ヒストグラムの色をグリーンにする	plt.hist(データ列, color='green')
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
散布図に赤色のポイントマーカーを用いる	plt.plot(xdata, ydata, marker='.', c='r')
小数点数の逆双曲線正弦	math.asinh(x)
JSONLファイルをデータフレームとして読む	pd.read_json(filename, orient='records', lines=True)
リストとリストの散布図に大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X')
ヒストグラムを描画して、色をミディアムシアグリーンにする	plt.hist(データ列, color='mediumseagreen')
折れ線グラフの色をパウダーブルーにする	plt.plot(データ列, データ列2, color='powderblue')
行列の平均を計算する	np.mean(aArray)
散布図に赤色の三角マーカーを使用する	plt.plot(xdata, ydata, marker='^', c='r')
線グラフを描画して、色をライムグリーンに変更する	plt.plot(データ列, データ列2, color='limegreen')
色差別ない色を使ってリストについての柱状図を描く	plt.hist(xdata, color='colorblind')
リストを四分位数ごとに分割する	pd.qcut(aList, 4)
両端キューの末尾	deq[-1]
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
＜オプション＞スラグレーに色を設定する	color = 'slategrey'
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
オブジェクトが文字列クラス	isinstance(obj, str)
ヒストグラムを描画して、その色をスノーに指定する	plt.hist(データ列, color='snow')
キューのstart〜endの要素を見る	collections.deque(itertools.islice(deq, start, end))
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
部分文字列で文字列の開始位置以降が開始する	s.startswith(sub, start)
部分文字列が文字列の開始位置番目からと終了位置までの間に存在しないかどうか調べる	s.find(sub, start, end) == -1
改行付きでマッピングを文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
リストとリストの黒い暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
線グラフの色をインディアンレッドにセットする	plt.plot(データ列, データ列2, color='indianred')
実数の正接の逆数	math.atan(x)
折れ線グラフを描画して、その色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
線グラフの色をラベンダーブラッシュに変更する	plt.plot(データ列, データ列2, color='lavenderblush')
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
実数が有限か調べる	math.isfinite(x)
マップのキーに対応した値	aDict.get(key)
折れ線グラフを描画して、その色をサンディーブラウンに設定する	plt.plot(データ列, データ列2, color='sandybrown')
＜オプション＞グラフの色をゲインズボロに設定する	color = 'gainsboro'
行列の行ごとの最大を求める	np.max(aArray, axis=1)
＜オプション＞グラフの色をゴーストホワイトに指定する	color = 'ghostwhite'
折れ線グラフを描画して、色をオレンジレッドに設定する	plt.plot(データ列, データ列2, color='orangered')
xの小数点以下'4'桁まで表示する	print(':.4f'.format(x))
＜オプション＞レモンシフォン色を使う	color = 'lemonchiffon'
＜オプション＞チョコレート色を使う	color = 'chocolate'
実数が負の数	x < 0
折れ線グラフの色をミディアムターコイズに指定する	plt.plot(データ列, データ列2, color='mediumturquoise')
カラーバーを横向きにプロットする	plt.colorbar(orientation='horizontal')
折れ線グラフを描画して、その色をレベッカパープルにする	plt.plot(データ列, データ列2, color='rebeccapurple')
イテラブルをセットにする	set(iterable)
折れ線グラフを描画して、その色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
ヒストグラムを描画して、色をリネンに設定する	plt.hist(データ列, color='linen')
＜オプション＞色をゴールドに設定する	color = 'gold'
データフレームの列と列の相関行列をヒートマップとしてグラフ化する	sns.heatmap(df[[column, column2]].corr())
n÷n2を算出する	n / n2
＜オプション＞上三角マーカーを描画する	marker = '^'
2つのオブジェクトが等しいか調べる	obj == obj2
nーn2を求める	n - n2
折れ線グラフに△マーカーを加える	plt.plot(データ列, データ列2, marker='^')
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
折れ線グラフを描画して、その色を淡いピンク色に設定する	plt.plot(データ列, データ列2, color='lightpink')
リストとリストで暗いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
折れ線グラフに赤い丸印を描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
オブジェクトは集合クラスかどうか調べる	isinstance(obj, set)
カウンタからタプルをカウントして引く	aCounter.subtract(iterable)
列の組み合わせを求める	itertools.combinations(iterable, n)
タプルをn回、連結する	aTuple * n
文字列に文字列中の部分文字列を全部置き換える	s.replace(sub, newsub)
ヒストグラムをプロットして、透明度をxに設定する	plt.hist(データ列, alpha=x)
折れ線グラフを描画して、その色を濃いシアンに指定する	plt.plot(データ列, データ列2, color='darkcyan')
双方向キューが空でないか調べる	len(deq) != 0
ヒストグラムを描画してその色をペルーに設定する	plt.hist(データ列, color='peru')
リストとリストのパステル調のグラフを描画して、その色を青にする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
ヒストグラムを描画して、色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
エクセルファイルファイルからエクセルファイルを読む	pd.read_excel(filename)
リストとリストのカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
浮動小数点数の最大値	sys.float_info.max
文字列の開始位置以降が部分文字列で開始するかどうか調べる	s.startswith(sub, start)
折れ線グラフを描画してその色をフローラルホワイトに指定する	plt.plot(データ列, データ列2, color='floralwhite')
＜オプション＞カデットブルーに色を設定する	color = 'cadetblue'
十六進数字を全部見る	string.hexdigits
実数とyの斜辺を計算する	math.hypot(x, y)
nからn2までの整数列を求める	list(range(n, n2+1))
イテラブルと配列について散布図を描画して、三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
データ列を折れ線グラフに描画して、マーカーを右三角印にする	plt.plot(データ列, データ列2, marker='>')
折れ線グラフのポイントマーカーを緑色にする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
リストを引数として展開して表示する	print(*aList, sep=',')
数値の変数についてのn階微分を計算する	sympy.diff(e, z, n)
日付時刻データの時刻	aDatetime.time()
スラッシュで区切って二つの変数を表示する	print(value, value2, sep='/')
線グラフを描画して、その色をライトサーモンに指定する	plt.plot(データ列, データ列2, color='lightsalmon')
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列, データ列2, marker='D')
ヒストグラムを描画して、その色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
リストとリストについて色差別ない色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='colorblind')
黒い右三角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='>', c='k')
＜オプション＞サーモン色を使う	color = 'salmon'
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
プラットフォームの整数の最大値	sys.maxsize
折れ線グラフの色をダークゴールデンロッドに指定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
ヒストグラムを横に並べて描画する	plt.hist([データ列, データ列2], color=['b', 'r'])
折れ線グラフの丸マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='o', markersize=n)
折れ線グラフのクロス印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='x', markersize=n)
＜オプション＞サンディーブラウン色を使用する	color = 'sandybrown'
線グラフを描画して、その色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
散布図に赤色の右三角マーカーを用いる	plt.plot(xdata, ydata, marker='>', c='r')
データ列が正規分布からどれだけ、歪んでいるか見る	ds.kurt()
＜オプション＞ライトブルーを用いる	color = 'lightblue'
データフレームのリストカラムの欠損値を直後の値に変更する	df[aList].fillna(method='bfill')
nを二進数表現に変換する	bin(n)
文字列ひとつのりスト	[element]
データフレームを'A'列によって昇順にソートし、更新する	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフを描画して、その色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategrey')
列をぐるぐると繰り返す	itertools.cycle(iterable)
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
カウンタ間で∪演算する	aCounter | aCounter2
データフレームを二つの列によって昇順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データ列を箱髭図で描く	plt.boxplot(データ列)
最後の部分文字列で文字列を分けたときの最初の文字列	s.rpartition(sub)[0]
＜オプション＞下三角印を使用する	marker = 'v'
折れ線グラフのバツマーカーを黄色くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
タプルの最初の要素	aTuple[0]
現在が金曜日	datetime.datetime.today().weekday() == 4
配列とリストの散布図に黒い菱形マーカーを描画する	plt.plot(xdata, ydata, marker='D', c='k')
整数nの二進表現	bin(n)
値を下線付き化する	f'\033[4m{value}\033[0m'
表示可能な最大列数を減らす	pd.set_option('display.max_columns', n)
要素が全て1の配列	np.ones(要素数, dtype=np.int)
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
ヒストグラムを描画して、色をホワイトスモークに変更する	plt.hist(データ列, color='whitesmoke')
ヒストグラムを描画して、その色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
ヒストグラムの色をコーンズシルクにする	plt.hist(データ列, color='cornsilk')
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
＜オプション＞カラムの名前を連番に設定する	header = None
グラフの色を全般的に暗くする	sns.set(pallete='dark')
文字列の無限イテラブル	itertools.repeat(element)
UTF8でファイルをオープンする]	open(filepath, encoding='utf-8')
＜オプション＞ティール色を使う	color = 'teal'
双方向キューの先頭	deq[0]
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
濃い色としてリストとリストについての散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='deep', alpha=0.5)
ガンマ関数の絶対値に自然対数をとった値を算出する	math.lgamma(x)
predicateFuncが真となるイテラブルの部分	itertools.takewhile(predicateFunc, iterable)
リストとリストについての散布図を明るい色で描画する	plt.plot(xdata, ydata, c='bright')
標準入力から改行なしで1行だけ読む	sys.stdin.readline().rstrip()
キーがマッピングに存在しないとき、要素を追加する	aDict.setdefault(key, element)
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
タブ区切りのファイルをヘッダなしで読む	pd.read_csv(filename, header=None)
両端キューから最初の要素を取り出す	deq.remove(element)
データフレームを列名リストの値によってグループ化し、要約統計量を算出する	df.groupby(columns).describe()
リストと配列として色差別ないをプロットし、、その線幅をnに変更する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
ヒストグラムを描画して、色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
オブジェクトがタプルに含まれるか調べる	element in aTuple
コーンズシルク色の線グラフを描画する	plt.plot(データ列, データ列2, color='cornsilk')
大きさnでリストと配列についての散布図を描画する	plt.scatter(xdata, ydata, s=n)
ヒストグラムを描画して、その色をスラグレーに指定する	plt.hist(データ列, color='slategrey')
線グラフの色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
線グラフを描画して色を白くする	plt.plot(データ列, データ列2, color='w')
データフレームのカラムの未入力値を中央値で埋める	df[col].fillna(df[col].median())
＜オプション＞ライトスレイグレーにグラフの色をする	color = 'lightslategrey'
３2ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
折れ線グラフの菱形印を黒くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
ダークマゼンタにヒストグラムの色を変更する	plt.hist(データ列, color='darkmagenta')
Pandasで、データフレームのcollのエポック秒からタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
文字列が文字列リストに含まれるか	s in aStringList
緑色の右三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='g')
三つのデータフレームを縦方向につなぐ	pd.concat([df, df2, df3], axis=0)
多重集合をイテラブルから作成する	collections.Counter(iterable)
データフレームの行を抽出する	df[start:end]
文字列内にひとつでもASCII文字が含まれる	any(c.isascii() for c in s)
第二四分位数でデータフレームのカラムの欠損値を補う	df[col].fillna(df[col].median())
プラットホームのバイトオーダを使う	sys.byteorder
二つのデータフレームを横方向に合体させる	pd.merge(df, df2)
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
折れ線グラフに左三角マーカーを用いる	plt.plot(データ列, データ列2, marker='<')
要素を両端キューの先頭に追加する	deq.appendleft(element)
データフレームのカラムの欠損値を直後の値で補う	df[col].fillna(method='bfill')
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
ヒストグラムを描画して、その色をオーキッドにセットする	plt.hist(データ列, color='orchid')
ヒストグラムを描画して、透明度をxに設定する	plt.hist(データ列, alpha=x)
色差別ない色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='colorblind')
配列の行ごとの平均	np.mean(aArray, axis=1)
濃いの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
日付データからn週間分減算する	aDate - datetime.timedelta(weeks=n)
配列とリストについての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
数列とリストについての散布図に黒い▽マーカーを描く	plt.plot(xdata, ydata, marker='v', c='k')
リストから文字列を取り除く	aList.remove(element)
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
折れ線グラフを描画して、その色をピンクに指定する	plt.plot(データ列, データ列2, color='pink')
リストとリストについての散布図を大きさnで描画する	plt.scatter(xdata, ydata, s=n)
リストとリストで色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
ヒストグラムを描画して、色をオールドレースにセットする	plt.hist(データ列, color='oldlace')
重なりを見やすくリストとリストについての散布図をパステル調の色でプロットする	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
nにn2をかけた値をnとする	n *= n2
nの二乗	n ** 2
ヒストグラムを描画して、その色をミディアムスプリンググリーンにする	plt.hist(データ列, color='mediumspringgreen')
xの絶対値	abs(x)
文字列を部分文字列で分割したときの残りの文字列を使う	s.partition(sub)[-1]
折れ線グラフを描画して、その色をパウダーブルーに変更する	plt.plot(データ列, データ列2, color='powderblue')
データフレームを丸める	df.round()
配列と配列を用いて明るいを描画してその線幅をnにする	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
折れ線グラフを描画してその色をスカイブルーに設定する	plt.plot(データ列, データ列2, color='skyblue')
データフレームを各列と列の組み合わせ毎にグループ分けして合計を求める	df.groupby([column, column2], as_index=False).sum()
暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
散布図を黒い左三角マーカーで描画する	plt.plot(xdata, ydata, marker='<', c='k')
文字列を改行しないで表示する	print(value, end='')
複数の列によってデータフレームをまとめた表	df.groupby(columns)
＜オプション＞グラフの色を青緑に指定する	color = 'turquoise'
表のカテゴリデータをワンホット・ベクトルに変換する	pd.get_dummies(df)
散布図を赤色の下三角マーカーとして描く	plt.plot(xdata, ydata, marker='v', c='r')
'A'列でデータフレームを並べ直して、更新する	df.sort_values(by='A', inplace=True)
＜オプション＞グラフの色を紺碧に設定する	color = 'azure'
カウンタを多い順にリストとして得る	aCounter.most_common()
整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
＜オプション＞フローラルホワイト色を用いる	color = 'floralwhite'
散布図に赤いダイアモンドマーカーを使う	plt.plot(xdata, ydata, marker='D', c='r')
折れ線グラフに黄色い上三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
NULLに等しい値	None
日付時刻データを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
線グラフを描画して、色をミディアムブルーに設定する	plt.plot(データ列, データ列2, color='mediumblue')
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
リストとリストを使って明るいの折れ線グラフを描き、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='bright', linewidth=n)
最適な位置に凡例を描画する	plt.legend(loc='best')
項目名が辞書上で未定義かどうか	key not in aDict
マッピングにキーがない場合、要素を追加する	aDict.setdefault(key, element)
文字列の右端から空白を取り除く	s.rstrip(' ')
折れ線グラフの印をバツにする	plt.plot(データ列, データ列2, marker='x')
＜オプション＞カンマをセパレータで使用する	sep = ','
数式を数値計算する	float(e)
startからendの間のヒストグラムを用いてイテラブルを描画する	plt.hist(データ列, range=(start, end))
データフレームの各グループごとの最大値	df.groupby(column).max()
文字列の先頭から部分文字列を探す	s.find(sub)
ロードされたモジュールの一覧	sys.modules
折れ線グラフに黄色い大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='y')
＜オプション＞ライトゴールドロディイエローを使う	color = 'lightgoldenrodyellow'
色差別ないグラフの色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列, データ列2, color='darkolivegreen')
暗い色でリストについてのヒストグラムを描く	plt.hist(xdata, color='dark')
キューの最初にシーケンスの各値を追加する	deq.extendleft(iterable)
折れ線グラフを描画して、その色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='r')
グラフにx=0の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
数列とリストについて散布図を描き、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
プロットの描画でパステル調のテーマを使う	sns.set(pallete='pastel')
ヒストグラムを描画して色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
マッピングの項目名の一覧	aDict.keys()
ヒストグラムを描画してその色をアリスブルーに指定する	plt.hist(データ列, color='aliceblue')
リストをタプルに変換する	tuple(aList)
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
実数の二進対数	math.log2(x)
小数点数を切り上げて整数にする	math.ceil(x)
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
リストとリストの散布図を描画して、文字列という補足用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
赤い菱形マーカーをリストとデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='D', c='r')
ヒストグラムを描画して、その色を黄色に設定する	plt.hist(データ列, color='yellow')
折れ線グラフの印を下三角にする	plt.plot(データ列, データ列2, marker='v')
両端キューに値をenqueueする	deq.appendleft(element)
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
＜オプション＞カラムの名前をnamesに設定する	header = names
データフレームのカラムのどの値が頻出か調べる	df[col].mode()
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
nとkの組合せを求める	math.comb(n, k)
データ列とリストの濃いグラフをプロットして、その色を青くする	plt.plot(xdata, ydata, linestyle='deep', color='b')
＜オプション＞ディープスカイブルー色を用いる	color = 'deepskyblue'
散布図を描く	plt.scatter(xdata, ydata)
標準エラーを使う	sys.stderr
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
線グラフを描画して、その色をレモンシフォンに変更する	plt.plot(データ列, データ列2, color='lemonchiffon')
折れ線グラフを描画して色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
文字列中から部分文字列を探す	s.find(sub)
エンコーディング	sys.getdefaultencoding()
データ列のユニークな値の個数	ds.nunique()
現在の再帰の最大回数	sys.getrecursionlimit()
折れ線グラフを描画して色をマルーンに設定する	plt.plot(データ列, データ列2, color='maroon')
丸マーカーを散布図に使う	plt.plot(xdata, ydata, marker='o')
＜オプション＞スレートブルー色を使用する	color = 'slateblue'
データフレームのカラムの欠損値を最大値に指定する	df[col].fillna(df[col].max())
既存のファイルをSJISとして追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
配列をヒストグラムにする	plt.hist(aArray)
２つのデータフレームを列をキーにして左ジョインする	pd.merge(df, df2, on=column, how='left')
シーケンスをベクトルに変換する	np.array(iterable)
データフレームの列がx以下のデータを抽出する	df[df[column] <= x]
タイムスタンプデータが金曜日かどうか	aDatetime.weekday() == 4
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
カウンタを辞書で更新する	aCounter.update(aDict)
全要素を初期値で初期化された行列	np.full((行数, 列数), 初期値, dtype=np.int)
箱ひげ図を横に並べて描く	plt.boxplot([データ列, データ列2])
ヒストグラムを描画してその色をアンティークホワイトに変更する	plt.hist(データ列, color='antiquewhite')
日付時刻データの年数	aDatetime.year
n個に配列をビン分割する	pd.cut(aArray, n)
グラフの色を暗くする	sns.set(pallete='dark')
データフレームの列の文字列を未入力値に変換する	df[col].replace(s, np.nan)
両端キューに要素をエンキューする	deq.appendleft(element)
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列, データ列2, color='yellowgreen')
＜オプション＞改行を分割記号で使用する	sep = '\n'
データフレームのカラムの月	df[col].dt.month
データ列とリストについて散布図を描き、、マーカーの色を色差別ないに設定する	plt.plot(xdata, ydata, c='colorblind')
Pandasで、UNIX時間のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
キューの末尾から要素を取り除く	deq.pop()
タプルをナンバリングする	enumerate(aTuple)
ペアリストpairsからカウンタを準備する	collections.Counter(dict(pairs))
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
二進対数	math.log2(x)
＜オプション＞アイボリー色を用いる	color = 'ivory'
ヒストグラムの色を貝殻に変更する	plt.hist(データ列, color='seashell')
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
パステル調のの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='pastel', linewidth=n)
nがn2より大きいかどうか確認する	n > n2
両端キューをリストに変換する	list(deq)
リストとリストについての散布図に丸マーカーを描画する	plt.plot(xdata, ydata, marker='o')
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
マッピングの項目名を列挙する	list(aDict)
イテラブルとリストの黒い暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color='k')
データフレームの末尾n行を取り出す	df.tail(n)
実行結果を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
ヒストグラムの色をダークターコイズに指定する	plt.hist(データ列, color='darkturquoise')
ひとつ置きにリストを取り出す	aList[::2]
折れ線グラフを描画して、その色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
文字列中のタブ文字をn個の空白に置換する	s.expandtabs(tabsize=n)
ヒストグラムの色をブルーバイオレットに変更する	plt.hist(データ列, color='blueviolet')
表データを各列と列の組み合わせ毎に集約して、分散を求める	df.groupby([column, column2], as_index=False).var()
＜オプション＞四角マーカーを描画する	marker = 's'
実数の自然対数	math.log(x)
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列, データ列2, color='lawngreen')
＜オプション＞ダークスラテグレー色を使う	color = 'darkslategray'
淡いグラフの色を青にする	plt.plot(xdata, ydata, linestyle='muted', color='b')
＜オプション＞ミディアムオーキッドにグラフの色を設定する	color = 'mediumorchid'
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
折れ線グラフに▲印を使う	plt.plot(データ列, データ列2, marker='^')
＜オプション＞グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
濃い色でデータ列についてのヒストグラムを描画する	plt.hist(xdata, color='deep')
折れ線グラフを描画して、色をアンティークホワイトに設定する	plt.plot(データ列, データ列2, color='antiquewhite')
組を展開してプリントする	print(*aTuple)
折れ線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategrey')
ヒストグラムを描画して、色をライトグレーに変更する	plt.hist(データ列, color='lightgrey')
正規表現patternでデータフレームのカラムの値をreplに置換する	df[col].replace(pattern, repl, regex=True)
リストのヒストグラムを描画する	plt.hist(aList)
整数nを八進表記に変換する	oct(n)
データフレームの中の列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
折れ線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgrey')
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
＜オプション＞ダイアモンドマーカーを加える	marker = 'D'
ヒストグラムを描画して、色をオーキッドに設定する	plt.hist(データ列, color='orchid')
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
＜オプション＞グラフの色をフローラルホワイトに変更する	color = 'floralwhite'
BOM付きを用いて追加できるようにファイルを開く]	open(filepath, mode='a', encoding='utf_8_sig')
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
時刻を用いる	import datetime
リストと数列で淡いの折れ線グラフをプロットして、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color='r')
ヒストグラムを描画して、その色をフクシアにセットする	plt.hist(データ列, color='fuchsia')
xが1もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
関数によってデータフレームをまとめたグループ	df.groupby(関数)
データ列をビン分割する	pd.cut(ds, aList)
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列, データ列2, color='steelblue')
上限nの両端キューを新規生成する	collections.deque(maxlen=n)
＜オプション＞バッファのサイズを設定する	buffering = 4096
データフレームを２つの列によってまとめたグループを見る	df.groupby(['A', 'B'])
折れ線グラフを描画して、色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
グラフの描画で淡い色テーマを使う	sns.set(pallete='muted')
キーで指定された項目を辞書からポップする	aDict.pop(key)
n進文字列を整数にする	int(s, n)
折れ線グラフの色を赤に設定する	plt.plot(データ列, データ列2, color='red')
ヒストグラムの色をライトイエローに指定する	plt.hist(データ列, color='lightyellow')
データ列のタイムゾーンを日本に変更する	ds.tz_convert('Asia/Tokyo')
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
暗い色のマーカーで散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='dark', alpha=0.5)
データフレームを'A'列の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby('A')]
折れ線グラフの色をホワイトスモークにセットする	plt.plot(データ列, データ列2, color='whitesmoke')
＜オプション＞色をダークグリーンに変更する	color = 'darkgreen'
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
データフレームから重複する行を残さず、削除する	df.drop_duplicates(keep=False)
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
＜オプション＞グラフの色をモカシンにセットする	color = 'moccasin'
ヒストグラムの色をライトグリーンにセットする	plt.hist(データ列, color='lightgreen')
リストとリストの青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
逆順のキュー	reversed(deq)
両端キューの末尾から要素を取り除く	deq.pop()
折れ線グラフを描画して、その色をダークスラテグレーに指定する	plt.plot(データ列, データ列2, color='darkslategray')
線グラフを描画して、色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
ファイルパスの区切り記号を見る	os.sep
＜オプション＞青緑に色を指定する	color = 'teal'
線グラフの色をブラックに指定する	plt.plot(データ列, データ列2, color='black')
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
折れ線グラフの色をダークターコイズにする	plt.plot(データ列, データ列2, color='darkturquoise')
実数の双曲線正接の逆数	math.atanh(x)
菱形マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='D')
＜オプション＞スラグレー色を使用する	color = 'slategray'
キューの右側に数値を追加する	deq.append(element)
データフレームを複数の列によって昇順に並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
＜オプション＞トマトにグラフの色を指定する	color = 'tomato'
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
文字列にイテラブルを変換して、'改行で連結する	'\n'.join(map(str, iterable))
JSONを使う	import json
データフレームの中に日付データがあるか調べる	df.isin([value])
配列と配列についての散布図にカラーコードの菱形マーカーをプロットする	plt.plot(xdata, ydata, marker='D', c=rgb)
両端キューのstart番目からend番目の要素	collections.deque(itertools.islice(deq, start, end))
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
文字列の中でASCII限定としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフの色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
折れ線グラフを描画して、その色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
文字列をカンマで分割して、文字列リストにする	s.split(',')
リストとリストについて散布図を描画して、星マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='*', c=rgb)
文字列中の部分文字列をカウントする	s.count(sub)
＜オプション＞コーンズシルクにグラフの色を変更する	color = 'cornsilk'
配列の列ごとの合計値	np.sum(aArray, axis=0)
二つの文字列は同じでないか調べる	s != s2
辞書をインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
＜オプション＞色をプラムに設定する	color = 'plum'
データフレームを列で並べ、、上位n件を取り出す	df.sort_values(columns).head(n)
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
ふたつの関係が上位集合か調べる	aSet.issuperset(aSet2)
折れ線グラフに黄色いクロス印を描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
データフレームのリストカラムを小数点以下n桁で四捨五入する	df[aList].round(n)
文字列の左端から空白を除く	s.lstrip(' ')
リストをひとつ置きに得る	aList[::2]
データフレームのカラムの空文字をNaNに変換し、ドロップする	df[col].replace('', np.nan).dropna()
ヒストグラムを描画して色をコーラルに変更する	plt.hist(データ列, color='coral')
＜オプション＞バイナリ書き込み用に変更する	mode = 'wb'
リストとリストについて散布図を描画して、マーカーをバツにセットする	plt.plot(xdata, ydata, marker='x')
折れ線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
濃いの折れ線グラフを描画して、線幅をnにセットする	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
データフレームから先頭の列を消す	df[df.columns[1:]]
入力ストリーム全体を行分割して読み込む	f.readlines()
リストとリストの折れ線グラフを描いて、untitledとラベル付けする	plt.plot(xdata, ydata, label=untitled)
日付時刻データの曜日を整数で見る	aDatetime.weekday()
全要素を0で初期化された配列	np.zeros(要素数)
リストとリストの暗いをプロットしてその色を青にする	plt.plot(xdata, ydata, linestyle='dark', color='b')
散布図に赤い△マーカーを使う	plt.plot(xdata, ydata, marker='^', c='r')
真スーパーセットか	aSet > aSet2
＜オプション＞値を置き換える	inplace = True
リストとデータ列のカラーコードの明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
numpyを入れる	import numpy as np
三自然数のGCD	math.gcd(n, n2, n3)
明るいの折れ線の色を赤色に設定する	plt.plot(xdata, ydata, linestyle='bright', color='r')
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
配列と配列で淡いグラフを描いて、その線幅をnにセットする	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
浮動小数点数のn乗して浮動小数点数による余りを求める	pow(x, n, y)
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
＜オプション＞ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
n番目の列をデータフレームから除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
赤色の大バツマーカーをリストとリストについての散布図に描く	plt.plot(xdata, ydata, marker='X', c='r')
リストとリストの散布図にカラーコードのダイアモンドマーカーを描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
線グラフの色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
折れ線グラフを描画して、その色をディープスカイブルーに設定する	plt.plot(データ列, データ列2, color='deepskyblue')
データ列を折れ線グラフに描画して、マーカーを星にする	plt.plot(データ列, データ列2, marker='*')
折れ線グラフの色をミディアムターコイズに変更する	plt.plot(データ列, データ列2, color='mediumturquoise')
ヒストグラムを描画して、色をアイボリーに変更する	plt.hist(データ列, color='ivory')
破線の色を濃いに変更する	plt.plot(xdata, ydata, linestyle='dash', color='deep')
リストの末尾のn要素を取り除く	aList[:-n]
淡い色の折れ線グラフを描画して、線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
文字列の最後	s[-1]
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
nからn2の値を引いてnにする	n -= n2
ファイルを開く]	open(filepath)
折れ線グラフを描画して、色をブルーバイオレットに変更する	plt.plot(データ列, データ列2, color='blueviolet')
ヒストグラムの線のスタイルを一点鎖線に変更する	plt.hist(データ列, linestyle='dashbot')
Pandasで、文字列をdatetime64型にする	pd.to_datetime(s)
ヒストグラムの色をハニーデューに変更する	plt.hist(データ列, color='honeydew')
折れ線グラフに緑色の三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='g')
データフレームのリストカラムのNaNを平均に設定する	df[aList].fillna(df[aList].mean())
＜オプション＞ディープスカイブルーを使う	color = 'deepskyblue'
ヒストグラムを描画して、色をターコイズに設定する	plt.hist(データ列, color='turquoise')
データ列と配列の折れ線グラフを描画して色を文字列に変更する	plt.plot(xdata, ydata, color=s)
淡い色の折れ線グラフを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
ヒストグラムを描画して、その色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
赤色の右三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='>', c='r')
散布図を赤色の三角マーカーを用いて描画する	plt.plot(xdata, ydata, marker='^', c='r')
二つの文字列を順にプリントする	print(value, value2)
リストをn回、接続する	aList * n
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
＜オプション＞ハニーデューを使う	color = 'honeydew'
Pandasで、フォーマットfmtを用いてデータフレームのcollを日付データにする	pd.to_datetime(df[col], format=fmt)
書き込みできるようにファイルパスを文字コードtextを用いてオープンする]	open(filepath, mode='w', encoding=text)
データフレームを各列と列の組み合わせ毎に集約して、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
折れ線グラフを描画してその色をダークターコイズに設定する	plt.plot(データ列, データ列2, color='darkturquoise')
追加モードでファイルをオープンして]、fとする	f = open(filepath, mode='a')
折れ線グラフを描画してその色をダークカーキに設定する	plt.plot(データ列, データ列2, color='darkkhaki')
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
ファイルを読み込みモードでオープンして]fとする	f = open(filepath, mode='r')
データフレームが正規分布からどれだけ歪んでいるか見る	df.kurt()
ファイルに文字列を書く	f.write(s)
今日が火曜日か確認する	datetime.datetime.today().weekday() == 1
変数計算モジュールを使う	import sympy
カラムの中の未入力値の数を数える	ds.isna().sum()
オブジェクトの参照カウント	sys.getrefcount(obj)
'A'列によってデータフレームをソートする	df.sort_values(by='A')
データ列とラベル列を指定して、積み上げ横棒グラフを描画する	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
日付時刻データは何曜日か知る	aDatetime.weekday()
xが1、もしくは2かどうか	x == 1 or x == 2
ヒストグラムの線のスタイルを破線に変更する	plt.hist(データ列, linestyle='dashed')
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
リストとデータ列で濃いグラフを描画して、線幅をnに変更する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
ファイルを追加モードでオープンする]	open(filepath, mode='a')
ふたつの集合が集合と互いに素	aSet.isdisjoint(aSet2)
変数名をキーとして、辞書	dict(name=element)
2つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
ヒストグラムを描画してその色をビスクに設定する	plt.hist(データ列, color='bisque')
三つのデータフレームを横方向に合体させる	pd.concat([df, df2, df3], axis=1)
year年month月の日付	datetime.date(year=year, month=month, day=1)
文字列の左側の不要な空白を除去する	s.lstrip()
日付時刻データにn週間分、加える	aDatetime + datetime.timedelta(weeks=n)
＜オプション＞分割記号をスラッシュにする	sep = '/'
ヒストグラムを描画して、色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
黄色色の線グラフを描画する	plt.plot(データ列, データ列2, color='yellow')
折れ線グラフに大バツマーカーを用いる	plt.plot(データ列, データ列2, marker='X')
明るいの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='bright', color=rgb)
黒い大バツマーカーを散布図に用いる	plt.plot(xdata, ydata, marker='X', c='k')
8進文字列をbytesizeバイトのバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
データフレームのカラムの歪度	df[col].kurt()
リストを文字列リストに変換して、タブで結合する	'\t'.join(map(str, iterable))
データ列とリストの色差別ないグラフをプロットし、、その色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
データフレームをエクセルファイルファイルとしてJSONLファイルに保存する	df.to_excel(filename)
データフレームを各列と列の組み合わせ毎に分類して合計を求める	df.groupby([column, column2], as_index=False).sum()
８ビット整数型のゼロ埋めした配列	np.zeros(要素数, dtype=np.int8)
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
データフレームを表示するとき、列数の最大値をnに変更する	pd.set_option('display.max_columns', n)
＜オプション＞下三角マーカーを描画する	marker = 'v'
表データの指定した名前リストの列を選択する	df[columns]
折れ線グラフのマーカーを星印にする	plt.plot(データ列, データ列2, marker='*')
ヒストグラムを描画して色をライトスチールブルーに指定する	plt.hist(データ列, color='lightsteelblue')
折れ線グラフを描画して、その色をライトスチールブルーにセットする	plt.plot(データ列, データ列2, color='lightsteelblue')
ピアソン相関係数でデータフレームの相関行列を計算する	df.corr(method='pearson')
日付時刻データにn分分、足す	aDatetime + datetime.timedelta(minutes=n)
両端キューの要素をn個分ローテンションする	deq.rotate(n)
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
ヒストグラムを描画して、nにビン数を設定する	plt.hist(データ列, bins=n)
グラフの背景色を白くする	sns.set(style='whitegrid')
データフレームのリストカラムの中に存在するとの合計を数える	df[aList].isin([value, value2]).sum()
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
エラーなく集合から値を取り除く	aSet.discard(element)
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
折れ線グラフに大きさnの▽マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markersize=n)
データフレームのカラムが正規分布からどれだけ、歪んでいるか見る	df[col].kurt()
浮動小数点数の双曲線正弦の逆数	math.asinh(x)
二つのデータフレームを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='A', right_on='B')
散布図に赤色の星マーカーを用いる	plt.plot(xdata, ydata, marker='*', c='r')
チョコレート色の線グラフを描画する	plt.plot(データ列, データ列2, color='chocolate')
日付時刻データが何日か知る	aDatetime.day
インデックスによって昇順にデータフレーム全体を並べ直す	df.sort_index(ascending=True)
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
カラーコードの三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
双方向キューのn番目に数値を挿入する	deq.insert(n, element)
キューの先頭から要素を取り除く	deq.popleft()
ヒストグラムを描画して、その色をインディゴに設定する	plt.hist(データ列, color='indigo')
折れ線グラフを描画して、その色をオールドレースに変更する	plt.plot(データ列, データ列2, color='oldlace')
データ列の未入力値を平均値で補う	ds.fillna(ds.mean())
一点鎖線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
データフレームを二つの列によってソートして、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
グラフのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
データ列とリストで色差別ないグラフを描き、、その線幅をnに指定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='r')
列のユニークな値	df[col].unique()
日付時刻データにn分分、加える	aDatetime + datetime.timedelta(minutes=n)
ファイルを開いて]、書き込みストリームを使う	open(filepath, mode='w')
浮動小数点数のn乗の実数剰余	pow(x, n, y)
ヒストグラムを描画して色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
カラムの欠損値を平均で埋める	ds.fillna(ds.mean())
＜オプション＞バイナリモードを使う	mode = 'rb'
折れ線グラフの色をオレンジレッドに変更する	plt.plot(データ列, データ列2, color='orangered')
文字列が全てASCII文字	s.isascii()
両端キューの最後から要素を取り出す	deq.pop()
＜オプション＞色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
要素は集合の要素でない	element not in aSet
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
n2がnより大きく、かつ、n3未満か確認する	n < n2 and n2 < n3
箱ひげ図を横に並べる	plt.boxplot([データ列, データ列2])
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列, データ列2, color='lightgreen')
カウンタ同士でユニオン	aCounter | aCounter2
データ列のNaNをモードで置換する	ds.fillna(ds.mode().iloc[0])
ベクトルの和を求める	aArray + aArray2
カラーコードのクロスマーカーを散布図に使用する	plt.plot(xdata, ydata, marker='x', c=rgb)
真スーパーセット	aSet > aSet2
表データを２つの列によってソートする	df.sort_values(by=['A', 'B'])
ヒストグラムを描画して、その色をグレーに変更する	plt.hist(データ列, color='grey')
ビン数nのヒストグラムを描画する	plt.hist(データ列, bins=n)
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
整数nをバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
折れ線グラフに線幅nの三角マーカーを描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
リストとリストについて散布図をプロットし、バツマーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='x', c=rgb)
リストと配列についての散布図に右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>')
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
書き込み用にファイルをオープンして]fとする	f = open(filepath, mode='w')
破線グラフの色を淡いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='muted')
表から指定された４つの列のみ抽出する	df[[column, column2, column3, column4]]
データフレームのリストカラムを丸めて整数型にする	df[aList].round().astype(int)
＜オプション＞グラフの色をダークスレートブルーに変更する	color = 'darkslateblue'
ファイルからストリームを読み込み、fileとする	file = open(filepath)
全ての数字	string.digits
組の最初の文字列を探す	aTuple.index(element)
ヒストグラムの色をライトシアンに指定する	plt.hist(データ列, color='lightcyan')
配列のヒストグラムを描画する	plt.hist(aArray)
ファイルパスから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
平均値でデータ列の欠損値を埋める	ds.fillna(ds.mean())
＜オプション＞namesをカラムの名前に設定する	names = names
カウンタのそれぞれの文字列をカウントだけ列挙する	aCounter.elements()
ピアソン相関係数としてデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
eの乗数を求める	math.exp(x)
タイムスタンプデータが日付時刻データと同時かどうか	aDatetime == aDatetime2
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列, データ列2, color='slategray')
データ列と数列について淡い色の折れ線グラフを描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
配列とデータ列について散布図を描画して丸マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='o', c=rgb)
セットから任意の要素を取り出す	aSet.pop()
データフレームのリスト列の欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
アークサイン	math.asin(x)
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
有理数の分母	q.denominator
ヒストグラムを描画して、その色を淡いピンク色に変更する	plt.hist(データ列, color='lightpink')
線グラフを描画してその色をライトゴールドロディイエローに設定する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
折れ線グラフの色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
折れ線グラフの星印を青色にする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='b')
散布図にカラーコードのクロスマーカーを使う	plt.plot(xdata, ydata, marker='x', c=rgb)
ヒストグラムを描画して、色をタンに設定する	plt.hist(データ列, color='tan')
データフレームを各列毎にグループ化して列の最小値を計算する	df.groupby(column)[column2].min()
＜オプション＞マーカーを右三角に変更する	marker = '>'
'A'列の値によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
直前の値でデータフレームのカラムの未入力値を埋める	df[col].fillna(method='ffill')
データフレームの歪度を計算する	df.kurt()
実数から実数を引く	x - y
リストをビン数nを使って分割する	pd.cut(aList, n)
配列の和	aArray + aArray2
本日の日付	datetime.date.today()
黒色の菱形マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='D', c='k')
線グラフを描画して、その色を紺碧に設定する	plt.plot(データ列, データ列2, color='azure')
両端キューの左を使う	deq[0]
ヒストグラムを描画して、色をラベンダーに設定する	plt.hist(データ列, color='lavender')
ヒストグラムの色をフローラルホワイトに指定する	plt.hist(データ列, color='floralwhite')
カラムの中に存在する文字列の数をカウントする	ds.isin([value]).sum()
オブジェクトにプロパティが存在する	hasattr(obj, プロパティ名)
リスト内の要素が全て真	all(aList)
プラットホームがマックか調べる	sys.platform.startswith('darwin')
カラムの空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
散布図に赤い三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c='r')
データフレームを'A'列によってソートして、NaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
タプルの要素を全て集合に追加する	aSet.update(iterable)
1からNまでの配列	np.arange(1, N+1)
ヒストグラムをカラーマップで描画する	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
データフレームのそれぞれのグループ毎の分散	df.groupby(column).var()
predicateFuncが真となる列の部分を取り出す	itertools.takewhile(predicateFunc, iterable)
データフレームの上n行	df.head(n)
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
折れ線グラフを描画して、色を赤くする	plt.plot(データ列, データ列2, color='r')
カラーコードのダイアモンドマーカーをデータ列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='D', c=rgb)
文字列がリストの要素でないか調べる	element not in aList
ヒストグラムを描画してその色をライトブルーにする	plt.hist(データ列, color='lightblue')
データ列の中にいくつNaNが存在するか数える	ds.isna().sum()
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
変数をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
線グラフを描画して、その色をライトサーモンに変更する	plt.plot(データ列, データ列2, color='lightsalmon')
データフレームの列の名前一覧で指定された列を落とす	df.drop(columns, axis=1)
プロットの横軸にuntitledという説明を付ける	plt.xlabel(untitled)
双方向キューの最大長	deq.maxlen
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
配列の平均値	np.mean(aArray)
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
ヒストグラムを描画して、色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
オブジェクトにプロパティがあるか	hasattr(obj, プロパティ名)
データフレームのカラムがxより大きくx2より少ないデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
＜オプション＞色をブルーバイオレットに設定する	color = 'blueviolet'
グラフの用途をポスターにセットする	sns.set(context='poster')
文字列がリストに含まれないか調べる	element not in aList
＜オプション＞グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
組をn回、連結する	aTuple * n
データフレームのn行目を削除して、更新する	df.drop(n, axis=0, inplace=True)
パステル調の色の折れ線グラフを描画し、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='pastel')
行列の平均値	np.mean(aArray)
リストを横軸として折れ線を描画する	plt.plot(range(len(xdata)), xdata)
nをn2だけ右シフトする	n >> n2
散布図のマーカーの大きさを指定する	plt.scatter(xdata, ydata, s=n)
イテラブルを文字列に変換して、部分文字列で結合する	sub.join(map(str, iterable))
折れ線グラフに下三角マーカーを使う	plt.plot(データ列, データ列2, marker='v')
折れ線グラフに緑色のポイント印を描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='g')
エンコーディングを知る	sys.getdefaultencoding()
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
＜オプション＞パパイヤウィップを使用する	color = 'papayawhip'
折れ線グラフの色をレベッカパープルに変更する	plt.plot(データ列, データ列2, color='rebeccapurple')
データフレームのリストカラムの値がNaNかどうか	df[aList].isna()
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
＜オプション＞色を白に指定する	color = 'white'
＜オプション＞色をライトスチールブルーに指定する	color = 'lightsteelblue'
配列の内積	np.dot(aArray, aArray2)
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
オブジェクトからフィールドを削除する	delattr(obj, プロパティ名)
＜オプション＞グラフの色をクリムゾンに設定する	color = 'crimson'
表データをグループ化し、列に対し分散を計算する	df.groupby(column)[column2].var()
数値をマゼンタにする	f'\033[35m{value}\033[0m'
今日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
データ列の中に存在する文字列の合計をカウントする	ds.isin([value]).sum()
数列とリストの散布図に黒い星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c='k')
データフレームはどの程度分散しているか見る	df.var()
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
Pandasでデータ列のUNIX秒から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
整数nを十六進数文字列に変換する	hex(n)[2:]
小数点数のアークサイン	math.asin(x)
折れ線グラフを描画してその色を青に変更する	plt.plot(データ列, データ列2, color='blue')
カラーコードの右三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='>', c=rgb)
線グラフを描画してその色を珊瑚にする	plt.plot(データ列, データ列2, color='coral')
キーがマップに存在するか	key not in aDict
＜オプション＞グラフの色をモカシンに設定する	color = 'moccasin'
文字列の両端から空白を取り除く	s.strip()
データ列の欠損値をxで補う	ds.fillna(x)
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列, データ列2, color='floralwhite')
重なりを見やすくリストとリストの散布図を明るい色で描画する	plt.plot(xdata, ydata, c='bright', alpha=0.5)
要素が全て初期値のベクトルを作成する	np.full(要素数, 初期値, dtype=np.int)
ベクトルの最大値	np.max(aArray)
両端キューが空	len(deq) == 0
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
床	math.floor(x)
リストを明るい色の柱状図を用いて描画する	plt.hist(xdata, color='bright')
リストと配列の散布図を描画してマーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
predicateFuncが真となるイテラブルの部分を消す	itertools.dropwhile(predicateFunc, iterable)
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
線グラフを描画して、色を青くする	plt.plot(データ列, データ列2, color='b')
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
折れ線グラフを描画して、その色をグリーンに指定する	plt.plot(データ列, データ列2, color='green')
線グラフを描画して、その色をサーモンに設定する	plt.plot(データ列, データ列2, color='salmon')
＜オプション＞ピーチパフ色を使う	color = 'peachpuff'
黄色いポイント印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='y')
折れ線グラフの印を▽にする	plt.plot(データ列, データ列2, marker='v')
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
nが5の倍数か	n % 5 == 0
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
リストの個数だけ繰り返す	range(len(aList))
実数の逆双曲線正弦	math.asinh(x)
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
線グラフを描画して、その色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
グラフで使うx軸のラベルをuntitledに設定する	plt.xlabel(untitled)
マッピングをJSON形式で出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
＜オプション＞グラフの色を濃いシアンに変更する	color = 'darkcyan'
折れ線グラフに線幅nの下三角マーカーを描画する	plt.plot(データ列, データ列2, marker='v', markeredgewidth=n)
変数をアンダーライン付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
ファイルパスを追加モードでオープンする]	open(filepath, mode='a')
＜オプション＞セパレータを改行にする	sep = '\n'
JSONフォーマットの文字列を辞書にする	json.loads(jsonString)
バイトオーダを知る	sys.byteorder
データフレームの平均値	df.mean()
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
リストとリストについての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
全要素を０で初期化された符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
グラフの文字化けを防ぐ	sns.set(font='IPAexGothic')
ユニークな各要素の頻度	np.unique(aArray, return_counts=True)
線グラフの色をミディアムブルーにセットする	plt.plot(データ列, データ列2, color='mediumblue')
イテラブルと数列の青いパステル調のグラフをプロットする	plt.plot(xdata, ydata, linestyle='pastel', color='b')
折れ線グラフを描画して色を貝殻に指定する	plt.plot(データ列, データ列2, color='seashell')
オブジェクトがタプルに含まれる	element in aTuple
グラフに被らない位置に補足を入れる	plt.legend(loc='best')
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
複数の列によってによってデータフレームを大きい順にソートする	df.sort_values(by=column, ascending=False)
折れ線グラフに描画して、印をバツ印にする	plt.plot(データ列, データ列2, marker='x')
折れ線グラフのクロスマーカーを青くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
イテラブルと数列について黒い濃いを描く	plt.plot(xdata, ydata, linestyle='deep', color='k')
バイナリ用にファイルを開く]	open(filepath, mode='rb')
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
リストのn番目からn2番目の部分	aList[n:n2]
データフレームのそれぞれのグループの最小値	df.groupby(column).min()
線グラフの色を青に設定する	plt.plot(データ列, データ列2, color='blue')
文字列中のタブ文字を空白にする	s.expandtabs(tabsize=n)
緑色のバツマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
折れ線グラフのマーカーを上三角にする	plt.plot(データ列, データ列2, marker='^')
データフレームの中の未入力値を削除する	df.dropna()
ヒストグラムの色をダーク・スラテグレーに指定する	plt.hist(データ列, color='darkslategrey')
＜オプション＞改行コードをWindowsに変更する	newline = '\r\n'
文字列リストにイテラブルを変換して、'改行を使って一つにする	'\n'.join(map(str, iterable))
変数が無限大に近づく際の数値の極限値を求める	sympy.limit(e, z, oo)
＜オプション＞ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
nを否定する	not n
π	math.pi
＜オプション＞ダイアモンドマーカーを使用する	marker = 'D'
ヒストグラムを描画して、色をダークカーキに指定する	plt.hist(データ列, color='darkkhaki')
データフレームのNaNが含まれる箇所を	df.style.highlight_null()
n個にデータフレームの中の列をビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームのそれぞれのグループの分散を求める	df.groupby(column).var()
濃い色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='deep')
ヒストグラムを描画して、その色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
文字列のケースを交換する	s.swapcase()
数値を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
配列の列ごとの平均値	np.mean(aArray, axis=0)
ファイルから1文字、読み込む	f.read(1)
タイムスタンプデータが日曜日かどうか	aDatetime.weekday() == 6
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
リストを累加したイテラブル	itertools.accumulate(iterable)
昇順にタプルをソートする	sorted(aTuple, reverse=True)
データフレームのそれぞれのグループの標準偏差	df.groupby(column).std()
実数が整数か調べる	x.is_integer()
三整数の最大公約数	math.gcd(n, n2, n3)
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列, データ列2, color='mediumseagreen')
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
集合の全ての要素が別の集合に含まれるか確認する	aSet.issubset(aSet2)
破壊的に列名リストを用いてデータフレームを降順に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
nの各桁の総和	sum(map(int, str(n)))
耐火レンガ色の線グラフを描画する	plt.plot(データ列, データ列2, color='firebrick')
折れ線グラフに黒いクロスマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
nにn2を足して代入する	n += n2
シーケンスを関数でフィルタする	filter(func, iterable)
ヒストグラムの色をグレーにセットする	plt.hist(データ列, color='grey')
折れ線グラフの右三角印の線幅をnに設定する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
データフレームの列が文字列で始まる行を取り出す	df[df[column].str.startswith(s)]
データフレームから指定された2つの列を抽出する	df[[column, column2]]
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
＜オプション＞ライトグリーン色を用いる	color = 'lightseagreen'
＜オプション＞バッファリングを無効にする	buffering = 0
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
＜オプション＞書き込みモードに設定する	mode = 'w'
列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
折れ線グラフのダイアモンドマーカーを緑色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
淡い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
組の値を昇順に並べる	sorted(aTuple, reverse=False)
文字列はPythonのキーワード	keyword.iskeyword(s)
リストを明るい色の度数分布図を用いて描画する	plt.hist(xdata, color='bright')
タイムスタンプデータがタイムスタンプデータと同時	aDatetime == aDatetime2
ブール型の全要素を０で初期化された行列を初期化する	np.zeros(行数, 列数, dtype=np.int32)
オブジェクトがあるクラスのインスタンスか調べる	isinstance(obj, クラス)
折れ線グラフを描画して、その色をティールに設定する	plt.plot(データ列, データ列2, color='teal')
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列, データ列2, marker='D')
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
折れ線グラフを描画して、その色をミディアムシアグリーンに指定する	plt.plot(データ列, データ列2, color='mediumseagreen')
両端キューの中に文字列が含まれてるか調べる	element in deq
nがn2の倍数でないか調べる	n % n2 != 0
ヒストグラムを描画して、その色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
乱数を生成する	random.random()
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
ヒストグラムを描画して色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
日付データにn時間を加える	aDate + datetime.timedelta(hours=n)
異なる列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
折れ線グラフの左三角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='<', markeredgewidth=n)
列の欠損値を直前の値で置き換える	ds.fillna(method='ffill')
ヒストグラムを描画して色をライトゴールドロディイエローにセットする	plt.hist(データ列, color='lightgoldenrodyellow')
折れ線をリストと数列で描いて、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
n個の整数列	list(range(n))
データフレームの列名の一覧	df.columns
＜オプション＞グラフの色をロイヤルブルーに設定する	color = 'royalblue'
データフレームのカラムのNaNを直前の値で補う	df[col].fillna(method='ffill')
線グラフの色をゴーストホワイトにする	plt.plot(データ列, データ列2, color='ghostwhite')
ディムグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='dimgrey')
三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^')
ファイルパスを文字コードtextを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
データフレームのインデックスの名前を一度にnameからname2に付け直す	df.rename(index={name: name2})
リストとリストで淡いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
二つのデータフレームを結合する	pd.merge(df, df2)
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
＜オプション＞コーラル色を用いる	color = 'coral'
＜オプション＞ペルー色を使う	color = 'peru'
タイムスタンプデータが何日か知る	aDatetime.day
タプルの文字列が最初に見つかるインデックスを使う	aTuple.index(element)
改行付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
ヒストグラムを描画して、色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
無限にカウントアップする	itertools.count()
全てのシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=None)
折れ線グラフの線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n)
組を順番付けする	enumerate(aTuple)
折れ線グラフを描画して、その色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
ファイルをSJISで書き込みできるように開く]	open(filepath, mode='w', encoding='shift_jis')
ファイルをオープンして]、バイナリ書き込みストリームを求める	open(filepath, mode='wb')
最大値・最小値の範囲として一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
部分文字列で文字列を分けたときの残りの文字列	s.partition(sub)[-1]
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
文字列の中でASCII限定としてパターンにマッチした全文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
ヒストグラムを描画して、その色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
文字列TSVからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データフレームのリスト列の値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
データフレームを２つの列を用いて昇順に整列して、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
データフレームのカラムの文字列をNaNにする	df[col].replace(s, np.nan)
実数は無限大	math.isinf(x)
タプルの末尾のn要素を取り除く	aTuple[:-n]
配列とデータ列について散布図をプロットし、マーカーをポイントに指定する	plt.plot(xdata, ydata, marker='.')
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
データフレームのカラムの中に日付データと文字列があるか	df[col].isin([value, value2])
＜オプション＞グラフの色をダークグレーに設定する	color = 'darkgrey'
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
サブクラスかどうか調べる	issubclass(サブクラス, クラス)
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
文字列中に非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
データ列のpercent分位数	ds.quantile(percent/100)
リストとデータ列の散布図にポイントマーカーをプロットする	plt.plot(xdata, ydata, marker='.')
日付時刻データのタイムゾーン	aDatetime.timetz()
ヒストグラムを描画して、その色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
整数の並べ方の総数を求める	math.perm(n)
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
３数の最も小さい値	min(x, y, z)
データ列の欠損値を最大値で置き換える	ds.fillna(ds.max())
折れ線グラフを描画して、その色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
自然数最小公倍数	math.lcm(n, n2)
ヒストグラムの色をプラムに指定する	plt.hist(データ列, color='plum')
リストとリストについての散布図に黒い△マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
ファイルを開いて]、バイナリ書き込みストリームを求める	open(filepath, mode='wb')
ヒストグラムを描画して、その色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
リストをヒストグラムを用いて可視化する	plt.hist(aList)
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumvioletred')
日付時刻データは日付時刻データと同時か調べる	aDatetime == aDatetime2
配列とリストについての散布図に黒い三角マーカーを描画する	plt.plot(xdata, ydata, marker='^', c='k')
黄色い右三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='y')
キーが辞書上で定義済み	key in aDict
列'A'と列'B'をキーとして２つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
各列毎にデータフレームを集計し、、列の個数を求める	df.groupby(column)[column2].count()
文字列を大文字・小文字を無視してパターンで区切る	re.split(pattern, s, flags=re.IGNORECASE)
偽	False
線グラフを描画して色をブラックに設定する	plt.plot(データ列, データ列2, color='black')
文字列中に部分文字列が含まれないか調べる	sub not in s
折れ線グラフを描画してその色をミッドナイトブルーに変更する	plt.plot(データ列, データ列2, color='midnightblue')
JSON形式のファイル入力を辞書にする	json.load(fin)
折れ線グラフを描画してその色をコーンズシルクに設定する	plt.plot(データ列, データ列2, color='cornsilk')
ヒストグラムを描画して、色を小麦色に設定する	plt.hist(データ列, color='wheat')
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
散布図に赤い四角マーカーを使う	plt.plot(xdata, ydata, marker='s', c='r')
列とイテラブルをペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
numpyを使用する	import numpy as np
タプルをn倍する	aTuple * n
折れ線グラフを描画して、その色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
＜オプション＞茶色にグラフの色をセットする	color = 'brown'
データ列とラベル列を指定して積み上げ横棒グラフをプロットする	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
＜オプション＞EUCを使う	encoding = 'euc_jp'
データフレームの歪度	df.kurt()
カラーコードの四角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='s', c=rgb)
データフレームの列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列, データ列2, color='darkred')
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列, データ列2, color='slategrey')
nが一桁の数かどうか調べる	-9 <= n <= 9
保存するCSVファイルの小数点以下の桁数をセットする	df.to_csv(filename, float_format='%.3f')
リストとリストについて暗い色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='dark')
方程式として数式の変数の解を計算する	sympy.solve(e, z)
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
折れ線グラフの色をデピンクに設定する	plt.plot(データ列, データ列2, color='deeppink')
＜オプション＞ダイアモンド印を使う	marker = 'D'
カウンタ間で∪	aCounter | aCounter2
カウンタ同士でユニオン演算する	aCounter | aCounter2
文字列を青色にする	f'\033[34m{value}\033[0m'
プロットの描画で明るい色を使う	sns.set(pallete='bright')
イテラブルをカウンタにする	collections.Counter(iterable)
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
＜オプション＞アリスブルーを用いる	color = 'aliceblue'
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
折れ線グラフの四角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='s', markersize=n)
淡いグラフの線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', linewidth=n)
表データをまとめて丸める	df.round()
本日の年	datetime.datetime.today().year
イテラブルから重複なくn個選ぶ	random.sample(iterable, k=n)
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データフレームのカラムの平均値を算出する	df[col].mean()
まとめてreplにデータフレームのリストカラムの値を正規表現patternで置換する	df[aList].replace(pattern, repl, regex=True)
リストと数列について散布図を描き、、色を明るいに設定する	plt.plot(xdata, ydata, c='bright')
＜オプション＞ライトグリーン色を用いる	color = 'lightgreen'
折れ線グラフを描画して、その色をやわらかい青に変更する	plt.plot(データ列, データ列2, color='cornflowerblue')
＜オプション＞色をディムグレーに設定する	color = 'dimgray'
データフレームをグループ化し、列に対し個数を求める	df.groupby(column)[column2].count()
色差別ないの線幅を指定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
折れ線グラフを描画してその色をゴーストホワイトに指定する	plt.plot(データ列, データ列2, color='ghostwhite')
列を等しい量になるようにビン数nを用いてビニングする	pd.qcut(ds, n)
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
値を双方向キューの先頭につけ加える	deq.appendleft(element)
データフレームのカラムを1000の位で丸めて、整数にする	df[col].round(-3).astype(int)
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
日付データが木曜日か調べる	aDate.weekday() == 3
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
要素が集合に含まれないか調べる	element not in aSet
線グラフを描画してその色をシエナに設定する	plt.plot(データ列, データ列2, color='sienna')
データフレームを二つの列の値ごとにグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
文字列でフォーマットして日付データを文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
リストとリストのパステル調のグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列, データ列2, color='darkseagreen')
ヒストグラムを描画してその色をカーキに指定する	plt.hist(データ列, color='khaki')
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
グラフのカラーパレットをpalleteNameで指定する	sns.set(pallete=palleteName)
文字列がアルファベットかどうか調べる	s.isalpha()
折れ線グラフの色をライムに変更する	plt.plot(データ列, データ列2, color='lime')
折れ線グラフの三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='y')
＜オプション＞複数行に対応する	flag = re.MULTILINE
大バツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='X')
全ての印字できる文字	string.printable
符号なし８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.uint8)
カウンタ間でインターセクション	aCounter & aCounter2
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='b')
＜オプション＞コロンをセパレータで使う	sep = ':'
データフレームのカラムを日付データに変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
黒いポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.', c='k')
現在のワーキングディレクトリ	os.getcwd()
日付時刻データからn秒分減算する	aDatetime - datetime.timedelta(seconds=n)
ヒストグラムを描画して、その色をペルーに変更する	plt.hist(データ列, color='peru')
データフレームをグループ化し、それぞれの列に対し平均値を計算する	df.groupby(column)[column2].mean()
折れ線グラフを描画して、その色をパパイヤウィップに設定する	plt.plot(データ列, データ列2, color='papayawhip')
ヒストグラムを描画して、色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
データ列のヒストグラムを描画する	plt.hist(ds)
＜オプション＞グラフの色をプラムにセットする	color = 'plum'
＜オプション＞色をクリムゾンに変更する	color = 'crimson'
ヒストグラムを描画して、その色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
データフレームのリストカラムが正規分布からどの程度尖っているか見る	df[aList].skew()
プロットで使うフォントを日本語表示にする	sns.set(font='IPAexGothic')
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(xdata, ydata, marker='o')
ヒストグラムを描画して、その色をブラウンにする	plt.hist(データ列, color='brown')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
イテラブルとイテラブルについて破線グラフを描いてその色を明るいに指定する	plt.plot(xdata, ydata, linestyle='dash', color='bright')
ヒストグラムを描画して、色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
等差数列を配列に変換する	np.arange(開始値, 終端値, 等差)
折れ線グラフの色をグリーンに設定する	plt.plot(データ列, データ列2, color='green')
＜オプション＞アンティークホワイト色を使う	color = 'antiquewhite'
リストと列の直積	itertools.product(iterable, iterable2)
アクアマリン色の線グラフを描画する	plt.plot(データ列, データ列2, color='aquamarine')
線グラフを描画してその色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
二つの変数をそれぞれ定義する	x, y = i, j
折れ線グラフを描画して、色をネイビーに設定する	plt.plot(データ列, データ列2, color='navy')
日付データが土曜日か調べる	aDate.weekday() == 5
＜オプション＞グラフの色をネイビーに設定する	color = 'navy'
両端キューの中に要素が含まれてるか調べる	element in deq
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
＜オプション＞ミッドナイトブルーを用いる	color = 'midnightblue'
文字列と文字列と凡例を加える	plt.legend([s, s2])
度数分布図を描画して、半透明ににする	plt.hist(データ列, alpha=0.5)
データフレームのリストカラムの値をValueMapで変更する	df[aList].replace(ValueMap)
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
両端キューのn番目に文字列を途中追加する	deq.insert(n, element)
データフレームのそれぞれのグループ毎の最大値	df.groupby(column).max()
折れ線グラフの菱形印を赤くする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
＜オプション＞グラフの色をピーチパフに指定する	color = 'peachpuff'
実行結果を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
散布図に黒色の下三角マーカーを使う	plt.plot(xdata, ydata, marker='v', c='k')
＜オプション＞耐火レンガを使う	color = 'firebrick'
カウンタを集合に変換する	set(aCounter)
組の各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
データフレームから最初の列を除く	df[df.columns[1:]]
データフレームのリストカラムのpercent分位数を算出する	df[aList].quantile(percent/100)
＜オプション＞アリスブルー色を使う	color = 'aliceblue'
データフレームを'A'列と'B'列でソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
オブジェクトは整数クラスか	isinstance(obj, int)
文字列の中の大文字・小文字を無視してパターンによる全マッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームを列の値でグループ化して、それぞれのグループごとの個数を計算する	df.groupby(column).count()
線グラフの色をダークグレーに変更する	plt.plot(データ列, データ列2, color='darkgrey')
データフレームの列の各値が何回出現するか見る	df[col].value_counts()
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
＜オプション＞線種を一点鎖線に設定する	linestyle = 'dashbot'
データフレームのカラムとカラムを折れ線グラフで描画する	plt.plot(df[col], df[col2])
データフレームのリスト列の中の欠損値の合計をカウントする	df[aList].isna().sum()
ヒストグラムを描画して、その色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
実数の仮数を求める	math.frexp(x)[0]
JSONファイルの入力を読み込んで、dataとする	data = json.load(fin)
リストとリストについて散布図を描いて、その大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
startからendの範囲で柱状グラフにする	plt.hist(データ列, range=(start, end))
データフレームのリストカラムを十の位で四捨五入する	df[aList].round(-1)
線グラフを描画して、色をロージーブラウンに設定する	plt.plot(データ列, データ列2, color='rosybrown')
ヒストグラムを描画して、その色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
＜オプション＞色をインディゴに設定する	color = 'indigo'
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
折れ線グラフのクロス印を黄色にする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='y')
ヒストグラムを描画して、その色をシエナに指定する	plt.hist(データ列, color='sienna')
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
オブジェクトはタプルか	isinstance(obj, tuple)
ヒストグラムを描画してその色を白に指定する	plt.hist(データ列, color='white')
データフレームの中のカラムをビン分割する	pd.cut(df[col], aList)
リストと配列のカラーコードの暗いを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
＜オプション＞リネン色を使う	color = 'linen'
データ列の中にいくつ欠損値があるかカウントする	ds.isna().sum()
空の両端キュー	collections.deque()
文字列の開始位置から終了位置の範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
折れ線グラフを描画して、その色をゴールドに設定する	plt.plot(データ列, データ列2, color='gold')
ヒストグラムを描画して、色をバリーウッドに指定する	plt.hist(データ列, color='burlywood')
＜オプション＞エラーを無視するように設定する	errors = 'ignore'
xが1、もしくは2か調べる	x == 1 or x == 2
nが一桁の整数かどうか調べる	0 <= n <= 9
データフレームの列の空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
折れ線グラフに緑色の大バツマーカーを描画する	plt.plot(データ列, データ列2, marker='X', markerfacecolor='g')
文字列が全て空白文字からなるか調べる	s.isspace()
リストと数列についての散布図に赤い菱形マーカーを描く	plt.plot(xdata, ydata, marker='D', c='r')
数列と数列について散布図を描画してマーカーをポイントに設定する	plt.plot(xdata, ydata, marker='.')
＜オプション＞トマトを用いる	color = 'tomato'
線グラフの色をネイビーに変更する	plt.plot(データ列, データ列2, color='navy')
カラムの欠損値を直前の値に設定する	ds.fillna(method='ffill')
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
ヒストグラムを描画して、透明度をxに指定する	plt.hist(データ列, alpha=x)
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
折れ線グラフのマーカーを四角にする	plt.plot(データ列, データ列2, marker='s')
ケンドール相関係数としてデータフレームのリスト列の相関行列を計算する	df[aList].corr(method='kendall')
列の要素を集合に追加する	aSet.update(iterable)
＜オプション＞グラフの色をパウダーブルーに設定する	color = 'powderblue'
黒色のポイントマーカーを配列とリストについての散布図に描画する	plt.plot(xdata, ydata, marker='.', c='k')
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgrey')
データフレームを関数によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
浮動小数点数の正接の逆数	math.atan(x)
折れ線グラフを描画して、その色をシーグリーンに指定する	plt.plot(データ列, データ列2, color='seagreen')
数列とイテラブルについての散布図に黒い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='k')
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
データ列を小数点以下n桁で丸める	ds.round(n)
ひとつでも小文字が文字列内にあるか調べる	any(c.islower() for c in s)
xの小数点以下'3'桁までプリントする	print(':.3f'.format(x))
折れ線グラフに大きさnのクロス印を描画する	plt.plot(データ列, データ列2, marker='x', markersize=n)
＜オプション＞ダークグレーに色を設定する	color = 'darkgrey'
データ列が何分か見る	ds.dt.minute
多重集合を辞書から作る	collections.Counter(aDict)
データフレームの指定された列名リストの列を抽出する	df[columns]
データフレームの各グループごとの合計を算出する	df.groupby(column).sum()
グラフの中の縦軸にuntitledというラベルを付ける	plt.ylabel(untitled)
折れ線グラフを描画して色をグレーに設定する	plt.plot(データ列, データ列2, color='grey')
＜オプション＞ダークオレンジを用いる	color = 'darkorange'
ヒストグラムを描画して、色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
乱数生成系列をnで固定する	random.seed(n)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
スライド用にプロットを設定する	sns.set(context='talk')
ライトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightblue')
データフレームを列ごとに集約して列挙する	[(name, group) for name, group in df.groupby(column)]
＜オプション＞色をフクシアに設定する	color = 'fuchsia'
ヒストグラムの色をベージュに変更する	plt.hist(データ列, color='beige')
nのn2乗	n ** n2
データフレームのn行より後ろを抽出する	df[n:]
ヒストグラムを描画して色をオレンジに変更する	plt.hist(データ列, color='orange')
折れ線グラフを描画して、その色をライトゴールドロディイエローに変更する	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
＜オプション＞どのカラムも行に設定しない	index_col = None
スクリプトファイルと同じディレクトリのファイルのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
データフレームから型リストのデータ型のカラムを除外する	df.select_dtypes(exclude=typeList)
上限制限された長さnの両端キューを作る	collections.deque(maxlen=n)
スピアマンでデータフレームのリスト列の相関行列を求める	df[aList].corr(method='spearman')
行列の要素ごとのアダマール積	np.multiply(aArray, aArray2)
データフレームの列の未入力値を最頻値に変更する	df[col].fillna(df[col].mode().iloc[0])
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
オプションで、標準エラーを出力にする	file = sys.stderr
折れ線グラフの大バツマーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='X', markeredgewidth=n)
折れ線グラフを描画して、色をバイオレットに設定する	plt.plot(データ列, データ列2, color='violet')
日付時刻データをISO書式の文字列にする	aDatetime.isoformat()
実数のアークサイン	math.asin(x)
オプションで、出力先を標準出力に設定する	file = sys.stdout
リストとリストの散布図を色差別ない色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
黒い大バツマーカーを用いて散布図をプロットする	plt.plot(xdata, ydata, marker='X', c='k')
データフレームを関数の値によってグループ化し要約統計量を算出する	df.groupby(関数).describe()
マッピングをネスト化する	collections.ChainMap(aDict)
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
データフレームを列によって集約して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
降順で行によってデータフレームを整列する	df.sort_index(ascending=False)
オブジェクトは整数型	isinstance(obj, int)
＜オプション＞ライトグリーン色を使用する	color = 'lightseagreen'
折れ線グラフに赤いクロス印を描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='r')
データフレームを列によってまとめたグループ	df.groupby(column)
プロットのサイズを横width縦heightに設定する	plt.figure(figsize=(width, height))
＜オプション＞文字コードをEUCに指定する	encoding = 'euc_jp'
折れ線グラフの色をゴールドに指定する	plt.plot(データ列, データ列2, color='gold')
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
＜オプション＞色をライトスチールブルーに設定する	color = 'lightsteelblue'
グラフの横軸にuntitledという説明を付ける	plt.xlabel(untitled)
二進文字列を整数にする	int(s, 2)
データフレームのカラムを丸めて整数にする	df[col].round().astype(int)
オブジェクトのフィールドの値を使う	getattr(obj, プロパティ名)
TSVファイルをヘッダなしで読む	pd.read_csv(filename, header=None)
行列の列ごとの平均値	np.mean(aArray, axis=0)
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
ヒストグラムを描画してその色をプラムに変更する	plt.hist(データ列, color='plum')
グラフにグリッド線を入れる	plt.grid(True)
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
数値を簡単にする	sympy.sympify(e)
実数の小数部を計算する	math.modf(x)[0]
コマンドライン引数	sys.argv
ヒストグラムを描画して、その色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
色差別ないグラフの色を青色に指定する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
ヒストグラムの色をスノーにセットする	plt.hist(データ列, color='snow')
配列とリストについて淡い色の折れ線を描いてその線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
＜オプション＞ライトイエロー色を使う	color = 'lightyellow'
ヒストグラムを描画して、その色をライトスカイブルーに変更する	plt.hist(データ列, color='lightskyblue')
データ列の月を見る	ds.dt.month
文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
ヒストグラムを描画して、その色をマルーンに設定する	plt.hist(データ列, color='maroon')
データ列を千の位で四捨五入する	ds.round(-3)
未定値	None
＜オプション＞ブルーバイオレットにグラフの色をセットする	color = 'blueviolet'
＜オプション＞パールバイオレットレッドにグラフの色を設定する	color = 'palevioletred'
色差別ない色で散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
リストの最後を使う	aList[-1]
文字列を走査し、正規表現にマッチするか調べる	re.search(pattern, s)
折れ線グラフの三角マーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='^', markersize=n)
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
横棒を描画して、棒の幅をxに設定する	plt.barh(ラベル列, データ列, width=x)
変数を黒色で出力する	print(f'\033[30m{value}\033[0m')
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
リストとリストの青い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='b')
空白で文字列を分割して、列挙する	s.split()
文字列をマゼンタで表示できる文字列に変換する	f'\033[35m{value}\033[0m'
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
赤い右三角マーカーをデータ列と数列についての散布図に描く	plt.plot(xdata, ydata, marker='>', c='r')
散布図に黒色の左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c='k')
キーがマッピングに存在するかどうか調べる	key in aDict
リストとリストについて明るい色の折れ線グラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
パウダーブルー色の線グラフを描画する	plt.plot(データ列, データ列2, color='powderblue')
折れ線グラフの色をサンディーブラウンに指定する	plt.plot(データ列, データ列2, color='sandybrown')
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列, データ列2, color='mediumspringgreen')
コンビネーション	math.comb(n, k)
折れ線グラフを描画して、色をピーチパフにする	plt.plot(データ列, データ列2, color='peachpuff')
２つのデータフレームを縦に連結する	pd.concat([df, df2], axis=0)
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
折れ線グラフの色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
データフレームのリスト列の尖度	df[aList].skew()
折れ線グラフの星マーカーを赤くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
折れ線グラフを描画して色をバリーウッドに設定する	plt.plot(データ列, データ列2, color='burlywood')
リストを横軸と設定して、折れ線グラフを描画する	plt.plot(range(len(xdata)), xdata)
折れ線グラフを描画して、その色をダークカーキに指定する	plt.plot(データ列, データ列2, color='darkkhaki')
要素をキューの末尾から取り除く	deq.pop()
リストとリストの青い濃いを描く	plt.plot(xdata, ydata, linestyle='deep', color='b')
折れ線グラフの右三角印のサイズをnに設定する	plt.plot(データ列, データ列2, marker='>', markersize=n)
文字列のケースを変換する	s.casefold()
＜オプション＞深紅色を使う	color = 'crimson'
黒色の星マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='*', c='k')
折れ線グラフのマーカーを大バツにする	plt.plot(データ列, データ列2, marker='X')
線幅nの三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markeredgewidth=n)
リストとリストの黒色の濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
データ列の平均値	ds.mean()
データフレームから型リストで指定されたデータ型の列を選択する	df.select_dtypes(include=typeList)
実数の正弦の逆数	math.asin(x)
折れ線グラフを描画してその色をパールバイオレットレッドに指定する	plt.plot(データ列, データ列2, color='palevioletred')
日付時刻データの年数を使う	aDatetime.year
文字列はタプルに含まれない	element not in aTuple
＜オプション＞ナバホホワイト色を使う	color = 'navajowhite'
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
ファイルパスから読み込みストリームを開いて]、fとする	f = open(filepath, mode='r')
リストとリストの濃いを描き、、色を黒にする	plt.plot(xdata, ydata, linestyle='deep', color='k')
リストとデータ列についての散布図に左三角マーカーをプロットする	plt.plot(xdata, ydata, marker='<')
イテラブルについてのヒストグラムを色差別ないとして描画する	plt.hist(xdata, color='colorblind')
ヒストグラムを描画して、その色をオリベドラブに指定する	plt.hist(データ列, color='olivedrab')
ValueMapでまとめてデータフレームのカラムの値を置き換える	df[col].replace(ValueMap)
n進文字列をバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ネイピア数	math.e
＜オプション＞色をミディアムターコイズに設定する	color = 'mediumturquoise'
タプルの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
ファイルからディレクトリ名取り出す	os.path.dirname(filepath)
ミディアムスレートブルーにヒストグラムの色をセットする	plt.hist(データ列, color='mediumslateblue')
色差別ないグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
CSVファイルからデータフレームを読む	pd.read_csv(filename, sep=',')
xの印字可能な文字列	ascii(x)
積み上げ横棒グラフを描く	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
ファイルから全てのシートを読む	pd.read_excel(filename, sheet_name=None)
有理数の分子	q.numerator
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
値をマゼンタにする	f'\033[35m{value}\033[0m'
リストとリストの折れ線をカラーコードで描画する	plt.plot(xdata, ydata, color=rgb)
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
度数分布図を描画し、、ビン数をnに指定する	plt.hist(データ列, bins=n)
データフレームの中に存在すると文字列の合計を数える	df.isin([value, value2]).sum()
エポック秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
折れ線グラフのダイアモンドマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='D', markersize=n)
文字列全体が正規表現に大文字・小文字を無視してマッチするか調べる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
タイムスタンプデータの時間	aDatetime.time()
ヒストグラムの色をライムにセットする	plt.hist(データ列, color='lime')
文字列からISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
データフレームの数値をまとめて整数に四捨五入する	df.round()
ヒストグラムの色を紺碧に変更する	plt.hist(データ列, color='azure')
八進数文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
カラーコードの四角マーカーをリストと配列の散布図に描く	plt.plot(xdata, ydata, marker='s', c=rgb)
データフレームの列の中にある文字列と文字列の数を数える	df[col].isin([value, value2]).sum()
リストとリストについて散布図を描画して、マーカーの色を色差別ないに変更する	plt.plot(xdata, ydata, c='colorblind')
ヒストグラムを描画して、色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
リストとリストのカラーコードの濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color=rgb)
リストとリストを連結する	aList + aList2
formatパターンの文字列を日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
配列としてデータフレームの指定した列を選択する	df[column].values
イテラブルとリストについて散布図を描いてマーカーを三角に変更する	plt.plot(xdata, ydata, marker='^')
前もってASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
文字列内にひとつでも空白があるかどうか	any(c.isspace() for c in s)
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
線グラフを描画して、その色をダークサーモンに指定する	plt.plot(データ列, データ列2, color='darksalmon')
ヒストグラムを描画してその色をライトスチールブルーに指定する	plt.hist(データ列, color='lightsteelblue')
枠なしの凡例を描画する	plt.legend(frameon=False)
シンボル計算を使う	import sympy
左三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='<')
折れ線グラフに緑色のダイアモンド印を描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='g')
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
実数を実数で割った剰余を求める	math.remainder(x, x2)
＜オプション＞グラフの色をライトグレーに設定する	color = 'lightgray'
＜オプション＞グラフの色をライトグレーに変更する	color = 'lightgrey'
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
データフレームの列の未入力値を最小値に設定する	df[col].fillna(df[col].min())
ファイルをEUCとして書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
nからn2までの整数リストを使う	list(range(n, n2+1))
重なりを見やすくリストと数列についての散布図を濃い色としてプロットする	plt.plot(xdata, ydata, c='deep', alpha=0.5)
リストを淡い色のヒストグラムとして描画する	plt.hist(xdata, color='muted')
淡いグラフの色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
３つのデータフレームを縦につなぐ	pd.concat([df, df2, df3], axis=0)
1行だけ改行を取り除いて標準入力から読む	sys.stdin.readline().rstrip()
＜オプション＞グラフの色をトマトに設定する	color = 'tomato'
データ列の上位25%	ds.quantile(0.25)
データフレームを'A'列と'B'列で昇順に並べる	df.sort_values(by=['A', 'B'], ascending=True)
文字列の先頭でパターンにASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
折れ線グラフを描画して、色をシャルトリューズに変更する	plt.plot(データ列, データ列2, color='chartreuse')
ヒストグラムを描画して、その色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
＜オプション＞グラフの色を淡いピンク色に設定する	color = 'lightpink'
文字列が文字列より辞書順で後か調べる	s > s2
＜オプション＞ダークターコイズ色を使う	color = 'darkturquoise'
ベクトルから重複を除いたベクトルを作る	np.unique(aArray)
＜オプション＞線種を点線に変更する	linestyle = 'dotted'
縦棒グラフを描く	plt.bar(ラベル列, データ列)
ヒストグラムを描画してその色をライトスカイブルーに指定する	plt.hist(データ列, color='lightskyblue')
一点鎖線で折れ線グラフを描画する	plt.plot(データ列, データ列2, linestyle='dashbot')
折れ線グラフの右三角マーカーの線幅をnに変更する	plt.plot(データ列, データ列2, marker='>', markeredgewidth=n)
nの二進表現	bin(n)
ヒストグラムを描画して、その色をブラックに指定する	plt.hist(データ列, color='black')
＜オプション＞グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
データフレームのカラムの未入力値を直前の値に設定する	df[col].fillna(method='ffill')
データフレームのカラムの中にと文字列がいくつ存在するか数える	df[col].isin([value, value2]).sum()
リストの値を昇順にソートする	sorted(aList, reverse=False)
項目名が辞書に存在するか	key not in aDict
正規分布として疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームの重複した行数のマスク	df.duplicated()
文字列は全て十進数字か調べる	s.isdecimal()
タプルの合計値	sum(aTuple)
データフレームのカラムの欠損値を前の行の値で補う	df[col].fillna(method='ffill')
集合にイテラブルを追加更新する	aSet.update(iterable)
＜オプション＞色をグレーに設定する	color = 'gray'
列にイテラブルを続けたイテラブルを得る	itertools.chain(iterable, iterable2)
タプルのキーとその値を列挙する	aDict.items()
ベクトルのスカラー倍	aArray * n
グラフの見た目をイイ感じに変更する	sns.set()
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
実行時の標準出力の出力先がターミナル	sys.stdout.isatty()
グラフのタイトルをuntitledに設定する	plt.title(untitled)
ヒストグラムを描画して、色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
折れ線グラフに青い左三角印を描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
散布図を▲マーカーで描画する	plt.plot(xdata, ydata, marker='^')
折れ線グラフを描画して、色をサーモンに指定する	plt.plot(データ列, データ列2, color='salmon')
文字列に列を変換してタブを用いてつなげる	'\t'.join(map(str, iterable))
イテラブルと数列の散布図を描いて、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
文字列を最初の部分文字列で二つに区切って残りの文字列を使う	s.partition(sub)[-1]
線グラフを描画して、その色をディムグレーに指定する	plt.plot(データ列, データ列2, color='dimgrey')
＜オプション＞ディムグレーを使う	color = 'dimgray'
データフレームの中に文字列と文字列があるかどうか調べる	df.isin([value, value2])
nからいつまでも数え上げるする	itertools.count(start=n)
ヒストグラムを描く	plt.hist(データ列)
日付時刻データからn秒分引く	aDatetime - datetime.timedelta(seconds=n)
キュー中の要素の位置	deq.index(element)
リストとリストについての散布図に星マーカーをプロットする	plt.plot(xdata, ydata, marker='*')
配列とリストの青い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='b')
パステル調の色で配列についてのヒストグラムを描画する	plt.hist(xdata, color='pastel')
散布図を▽マーカーとして描画する	plt.plot(xdata, ydata, marker='v')
データフレームのカラムを四捨五入する	df[col].round()
ファイルを全部読み込む	f.read()
ヒストグラムの色をレモンシフォンに変更する	plt.hist(データ列, color='lemonchiffon')
CSVからデータフレームを読み込む	pd.read_csv(filename, sep=',')
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
ポイントマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='.')
数式のインテグラルを行う	sympy.integrate(e)
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
JSONファイルのファイル入力を読み込んでdataとする	data = json.load(fin)
ヒストグラムを描画して、その色を濃い青に設定する	plt.hist(データ列, color='darkblue')
リストと配列について濃いグラフをプロットし、、その色を黒くする	plt.plot(xdata, ydata, linestyle='deep', color='k')
データフレームの中に存在する文字列の数を求める	df.isin([value]).sum()
今日をタプルに変換する	datetime.datetime.today().timetuple()
折れ線グラフの丸マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='o', markeredgewidth=n)
文字列を大文字に変換する	s.upper()
折れ線グラフを描画して、その色をホットピンクに設定する	plt.plot(データ列, データ列2, color='hotpink')
折れ線グラフの色をデピンクに指定する	plt.plot(データ列, データ列2, color='deeppink')
データフレームの内の未入力値がある行を削除する	df.dropna()
文字列の大文字と小文字を入れ替える	s.swapcase()
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markerfacecolor='r')
リストを縦軸、リストをx座標として、大きさnの散布図を描画する	plt.scatter(xdata, ydata, s=n)
日付時刻データからn分減算する	aDatetime - datetime.timedelta(minutes=n)
カラーコードの下三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='v', c=rgb)
ヒストグラムを描画してその色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
折れ線グラフの丸印の大きさをnに設定する	plt.plot(データ列, データ列2, marker='o', markersize=n)
n進文字列をバイト列にする	int(s, n).to_bytes(length=bytesize, byteorder='big')
16進文字列をバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
Pandasでデータ列のUNIX時間から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
xに棒グラフの幅を設定する	plt.bar(ラベル列, データ列, width=x)
CSVファイルTSVファイルをn番目のカラムを行として読み込む	pd.read_csv(filename, index_col=n)
＜オプション＞グラフの色をスプリンググリーンに指定する	color = 'springgreen'
破線グラフの色をパステル調のに指定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
淡い色でリストについてのヒストグラムを描画する	plt.hist(xdata, color='muted')
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
＜オプション＞色をホットピンクに指定する	color = 'hotpink'
TSVを文字化けしないように読む	pd.read_csv(filename, encoding='shift_jis')
文字列の長さ	len(s)
マゼンタ色の線グラフを描画する	plt.plot(データ列, データ列2, color='magenta')
折れ線グラフを描画して、その色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
実数を数に掛ける	x * y
淡いグラフの色を黒くする	plt.plot(xdata, ydata, linestyle='muted', color='k')
文字列がタイトルケース	s.istitle()
プロットの描画で色差別ないカラーパレットを使う	sns.set(pallete='colorblind')
配列を等しい量になるようにn個に分割する	pd.qcut(aArray, n)
文字列は全て印字できるか	s.isprintable()
配列の列ごとの最小	np.min(aArray, axis=0)
本日の年を使う	datetime.datetime.today().year
カウンタの項目数	len(aCounter)
折れ線グラフの色をベージュに変更する	plt.plot(データ列, データ列2, color='beige')
＜オプション＞色をマゼンタに指定する	color = 'magenta'
折れ線グラフの下三角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
日付時刻データが何年か知る	aDatetime.year
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
UTF8でファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
赤い左三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='<', c='r')
リストとリストについて散布図を描き、、マーカーを大バツにする	plt.plot(xdata, ydata, marker='X')
カラーコードの左三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='<', c=rgb)
文字列の開始位置から終了位置の範囲で部分文字列をカウントする	s.count(sub, start, end)
リストと配列の黒色のパステル調のを描く	plt.plot(xdata, ydata, linestyle='pastel', color='k')
有理数モジュールを使う	import fractions
整数nのビット長を見る	n.bit_length()
nマイナスn2	n - n2
データフレームから指定された２つの列を取り出す	df[[column, column2]]
データ列は何分か見る	ds.dt.minute
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列, データ列2, color='dodgerblue')
実数を小数点以下で丸める	round(x, n)
折れ線グラフを描画して、その色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
折れ線グラフに三角マーカーを使う	plt.plot(データ列, データ列2, marker='^')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
星マーカーを用いて散布図を描く	plt.plot(xdata, ydata, marker='*')
ミントクリーム色の線グラフを描画する	plt.plot(データ列, データ列2, color='mintcream')
暗いグラフをリストとイテラブルで描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
nがn2より大きいか	n > n2
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
線グラフの色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
カラムの欠損値をxに変更する	ds.fillna(x)
ヒストグラムを描画して、その色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
折れ線グラフを描画して、その色をライトコーラルに変更する	plt.plot(データ列, データ列2, color='lightcoral')
プロットの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
ヒストグラムを描画して、色をダークマゼンタにセットする	plt.hist(データ列, color='darkmagenta')
折れ線グラフを描画してその色をダークシアグリーンに変更する	plt.plot(データ列, データ列2, color='darkseagreen')
リストとリストについての散布図にカラーコードの四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
データフレームのリスト列の欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
日付時刻データからn時間を引く	aDatetime - datetime.timedelta(hours=n)
データ列と数列として濃いグラフを描き、その線幅をnにセットする	plt.plot(xdata, ydata, linestyle='deep', color='r')
組の要素を逆順にする	aTuple[::-1]
折れ線グラフを描画して、その色をベージュに設定する	plt.plot(データ列, データ列2, color='beige')
折れ線グラフの左三角マーカーを青色にする	plt.plot(データ列, データ列2, marker='<', markerfacecolor='b')
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
＜オプション＞右三角印を使用する	marker = '>'
＜オプション＞読み込みモードを使用する	mode = 'r'
リストとデータ列のカラーコードの淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
＜オプション＞印をダイアモンドに変更する	marker = 'D'
データ列とリストのカラーコードのパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color=rgb)
データフレームを'A'列の値によってグループ化する	df.groupby('A')
＜オプション＞グラフの線種を一点鎖線に設定する	linestyle = 'dashbot'
ヒストグラムを描画して、その色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
ヒストグラムを描画して、色をサーモンに指定する	plt.hist(データ列, color='salmon')
＜オプション＞パウダーブルーにグラフの色を指定する	color = 'powderblue'
線グラフの色をモカシンに変更する	plt.plot(データ列, データ列2, color='moccasin')
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
データフレームの重複を見る	df.duplicated()
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
折れ線グラフを描画して、その色をダークシアンに設定する	plt.plot(データ列, データ列2, color='darkcyan')
要素が集合のメンバーか調べる	element in aSet
データフレームのリストカラムは正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
＜オプション＞丸マーカーを使う	marker = 'o'
パステル調のパレットをプロットの描画で使う	sns.set(pallete='pastel')
データフレームのカラムのどの値が頻出か見る	df[col].mode()
＜オプション＞グラフの色をオールドレースに設定する	color = 'oldlace'
折れ線グラフを描画して、その色をライトスレイグレーに設定する	plt.plot(データ列, データ列2, color='lightslategray')
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
無限に文字列が繰り返すイテラブル	itertools.repeat(element)
データフレームの列の値が欠損値かどうか調べる	df[col].isna()
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
データフレームのカラムの中に日付データとがあるか調べる	df[col].isin([value, value2])
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
黒いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
集合をタプルに変換する	tuple(aSet)
列の値でデータフレームを集約する	df.groupby(column)
折れ線グラフを描画して、その色をクリムゾンに設定する	plt.plot(データ列, データ列2, color='crimson')
リストと数列についての散布図をパステル調の色で重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
折れ線グラフの▽マーカーを赤色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
正規表現モジュールをインポートする	import re
＜オプション＞サドルブラウンに色を指定する	color = 'saddlebrown'
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
nが無限に続く数列	itertools.repeat(n)
オプションで、標準出力を使う	file = sys.stdout
日付データからn分、引く	aDate - datetime.timedelta(minutes=n)
データフレームを複数の列の値によってグループ化し、記述統計量を求める	df.groupby(columns).describe()
nからn2までの整数リストを作る	list(range(n, n2+1))
辞書のキーを要素に設定する	aDict[key] = element
最適な位置に凡例を入れる	plt.legend(loc='best')
データフレームの列の一覧	df.info()
リストを複製する	aList.copy()
リストと配列についての散布図にカラーコードの大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
散布図に上三角マーカーを使う	plt.plot(xdata, ydata, marker='^')
イテラブルとイテラブルを折れ線で描画する	plt.plot(xdata, ydata)
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
黒色の大バツマーカーを配列とリストの散布図に描画する	plt.plot(xdata, ydata, marker='X', c='k')
降順に破壊的にデータフレームを列によってソートする	df.sort_values(by=column, ascending=False, inplace=True)
＜オプション＞グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
ファイルを追加モードとしてオープンする]	open(filepath, mode='a')
文字列からformatのパターンで日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
データフレームの指定した列を配列にする	df[column].values
タプルの末尾のn要素を除く	aTuple[:-n]
リストの最後にオブジェクトを加える	aList.append(element)
プログラムを強制的に終える	sys.exit()
散布図を濃い色のマーカーで描画する	plt.plot(xdata, ydata, c='deep')
＜オプション＞バイナリ書き込みモードに設定する	mode = 'wb'
ファイル名がテキストファイルか確認する	filename.endswith('.txt')
グラフにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
データフレームの列が文字列で終わるデータを抽出する	df[df[column].str.endswith(s)]
文字列内にひとつでも数字が含まれるか判定する	any(c.isdigit() for c in s)
n個の集まりからk個選ぶ方法	math.comb(n, k)
線グラフを描画して、色をダークグレーに変更する	plt.plot(データ列, データ列2, color='darkgrey')
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
リストとイテラブルについて散布図をプロットして、マーカーの色を淡いに設定する	plt.plot(xdata, ydata, c='muted')
データフレームの列と列の相関行列をヒートマップとして描画する	sns.heatmap(df[[column, column2]].corr())
＜オプション＞耐火レンガ色を使う	color = 'firebrick'
折れ線グラフの星印を赤くする	plt.plot(データ列, データ列2, marker='*', markerfacecolor='r')
実数の双曲線正弦を計算する	math.sinh(x)
ヒストグラムの色をブラウンに設定する	plt.hist(データ列, color='brown')
データフレームの指定された３つの列を取り出す	df[[column, column2, column3]]
３整数の最大公約数を求める	math.gcd(n, n2, n3)
行列の列ごとの合計値を求める	np.sum(aArray, axis=0)
リストとデータ列の散布図に丸マーカーをプロットする	plt.plot(xdata, ydata, marker='o')
データ列の分散	ds.var()
＜オプション＞グラフの色をディムグレーに変更する	color = 'dimgray'
折れ線グラフを描画して、その色をライトグリーンに指定する	plt.plot(データ列, データ列2, color='lightseagreen')
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
グラフのデータラベルの位置を(x,y)に変更する	plt.legend(loc=(x, y))
淡いグラフの色を赤くする	plt.plot(xdata, ydata, linestyle='muted', color='r')
データフレームの中の列をビンニングする	pd.cut(df[col], aList)
実数のコサイン	math.cos(x)
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
二つの数値をスラッシュで区切って出力する	print(value, value2, sep='/')
赤い濃いグラフを描く	plt.plot(xdata, ydata, linestyle='deep', color='r')
2つの文字列を順にプリントする	print(value, value2)
カラーコードの大バツマーカーをリストと数列についての散布図に描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
ヒストグラムの色をミスティローズに変更する	plt.hist(データ列, color='mistyrose')
データフレームのリストカラムの欠損値を前の行の値で置換する	df[aList].fillna(method='ffill')
＜オプション＞ホワイトにグラフの色を指定する	color = 'white'
折れ線グラフを描画して、その色をグリーンイエローに設定する	plt.plot(データ列, データ列2, color='greenyellow')
イテラブルを文字列として一つにする	''.join(map(str, iterable))
部分文字列を文字列の後ろから探す	s.rfind(sub)
暗い色のマーカーで散布図を描く	plt.plot(xdata, ydata, c='dark')
リストの先頭を取り除く	aList[1:]
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
数値を簡略化する	sympy.sympify(e)
複数の列によってデータフレームを昇順にソートする	df.sort_values(by=column, ascending=True)
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
データフレームのn行目をドロップして更新する	df.drop(n, axis=0, inplace=True)
変数が無限大に近づく場合の数式の極限値を求める	sympy.limit(e, z, oo)
ヒストグラムを描画してその色をシエナにセットする	plt.hist(データ列, color='sienna')
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
デックの末尾に要素を追加する	deq.append(element)
折れ線グラフを描画して、その色をミディアムターコイズに設定する	plt.plot(データ列, データ列2, color='mediumturquoise')
線グラフを描画してその色をベージュに変更する	plt.plot(データ列, データ列2, color='beige')
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
データフレーム全体をインデックスによって小さい順にソートする	df.sort_index(ascending=True)
データフレームのリスト列を丸める	df[aList].round()
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
文字列内にひとつでも英数字が含まれる	any(c.isalnum() for c in s)
折れ線グラフの色をダークブルーに変更する	plt.plot(データ列, データ列2, color='darkblue')
折れ線グラフを描画して、その色をフォレストグリーンに設定する	plt.plot(データ列, データ列2, color='forestgreen')
データ列の中に文字列と日付データがいくつあるか数える	ds.isin([value, value2]).sum()
大文字と小文字を交換する	s.swapcase()
二つのリストを改行で区切って表示する	print(value, value2, sep='\n')
線グラフの色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
データ列が何年か見る	ds.dt.year
線グラフを描画して色をディムグレーに変更する	plt.plot(データ列, データ列2, color='dimgray')
空のカウンタ	collections.Counter()
実行結果をシアンでプリントする	print(f'\033[36m{value}\033[0m')
タブで区切って２つの変数をプリントする	print(value, value2, sep='\t')
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
リストとデータ列の散布図を描画してマーカーの色をパステル調のに設定する	plt.plot(xdata, ydata, c='pastel')
項目名がマッピング上で未定義か	key not in aDict
ヒストグラムを描画して、その色をブラックに設定する	plt.hist(データ列, color='black')
nがn2よりも小さいか調べる	n < n2
整数nを半分にする	n //= 2
にy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
折れ線グラフを描画してその色をミディアムブルーにセットする	plt.plot(データ列, データ列2, color='mediumblue')
グラフの目的を論文に設定する	sns.set(context='paper')
折れ線グラフを描画して色をライトイエローに設定する	plt.plot(データ列, データ列2, color='lightyellow')
ヒストグラムを描画してその色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
辞書から項目名の値を見る	aDict.get(key)
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
折れ線グラフを描画して色をライトシアンに変更する	plt.plot(データ列, データ列2, color='lightcyan')
ヒストグラムを描画して、色をオリーブに設定する	plt.hist(データ列, color='olive')
リストの長さを求める	len(aList)
文字列をn回だけ置き換える	s.replace(sub, newsub, n)
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
リストを黒色でプリントする	print(f'\033[30m{value}\033[0m')
双方向キューから最初の値を取り除く	deq.remove(element)
ファイル全体をリストとして読む	f.readlines()
リストをカウントしてカウンタを更新する	aCounter.update(iterable)
空白	' '
ファイルを追加できるように開く]	open(filepath, mode='a')
＜オプション＞グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
ヒストグラムを描画して、その色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
データフレームを列の値でNaNを含めて集約する	df.groupby(column, dropna=False)
空行をプリントする	print()
ダークレッド色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='darkred')
黒い三角印を折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
二つの変数をタブで区切ってプリントする	print(value, value2, sep='\t')
x,yの複素数	complex(x, y)
集合が空集合でないかどうか	len(aSet) != 0
データフレームのリスト列の中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
昇順にデータフレームを'A'列と'B'列によって並べ直す	df.sort_values(by=['A', 'B'], ascending=True)
2つの変数をスラッシュで区切って表示する	print(value, value2, sep='/')
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
リストを反転する	reversed(aList)
棒グラフの色をカラーコードに設定する	plt.bar(ラベル列, データ列, color=rgb)
配列とデータ列の散布図に赤いクロスマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='r')
ヒストグラムの色をダークサーモンにする	plt.hist(データ列, color='darksalmon')
データ列とリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
列で表データをソートし、、下位n件を取り出す	df.sort_values(columns).tail(n)
データフレームを複数の列によってソートして、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
ふたつの集合が集合と互いに素かどうか調べる	aSet.isdisjoint(aSet2)
＜オプション＞文字列をセパレータで使う	sep = s
プロットの色を全般的に色差別なくする	sns.set(pallete='colorblind')
＜オプション＞区切りをカンマにする	sep = ','
表データを列によってグループ化する	df.groupby(column)
行列を平坦化する	aArray.flatten()
＜オプション＞三角マーカーを使う	marker = '^'
実数を文字列に変換する	str(x)
ファイルをバイナリ書き込み用にオープンして]、fとする	f = open(filepath, mode='wb')
折れ線グラフを描画してその色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列, データ列2, color='darkgoldenrod')
ヒストグラムを描画して、その色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
＜オプション＞グラフの色をライトグリーンに設定する	color = 'lightgreen'
折れ線グラフを描画して、その色をピーチパフに設定する	plt.plot(データ列, データ列2, color='peachpuff')
破線グラフの色を暗いに設定する	plt.plot(xdata, ydata, linestyle='dash', color='dark')
リストとリストについての散布図を淡い色で描画する	plt.plot(xdata, ydata, c='muted')
データフレームのインデックスがnの行を選ぶ	df.loc[n]
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightslategrey')
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='k')
自然数の階乗を算出する	math.factorial(n)
折れ線グラフの色をバリーウッドに指定する	plt.plot(データ列, データ列2, color='burlywood')
文字列が全てASCII文字かどうか調べる	s.isascii()
グラフの用途をポスターに設定する	sns.set(context='poster')
データ列のユニークな値の個数を調べる	ds.nunique()
グラフの見栄えをよくする	import seaborn as sns
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
文字列が片仮名かどうか調べる	('ァ' <= ch <= 'ン')
実数を複素数に変換する	complex(x)
折れ線グラフの色をフクシアに指定する	plt.plot(データ列, データ列2, color='fuchsia')
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
折れ線グラフに四角印を用いる	plt.plot(データ列, データ列2, marker='s')
ユニークな値を要素とする行列を使う	np.unique(aArray)
数字を全て見る	string.digits
リストをビン数nを使って等量でビン分割する	pd.qcut(aList, n)
折れ線グラフを描画して、その色をオーキッドにセットする	plt.plot(データ列, データ列2, color='orchid')
両端キューの大きさ	len(deq)
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
＜オプション＞エラーを無視するように指定する	errors = 'ignore'
配列が何次元か	aArray.ndim
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
データ列の曜日数	ds.dt.dayofweek
集合を更新不能なセットに変換する	frozenset(aSet)
データフレームのカラムをValueMapでまとめて置き換える	df[col].replace(ValueMap)
散布図を明るい色を用いて描画する	plt.plot(xdata, ydata, c='bright')
＜オプション＞トマトに色を指定する	color = 'tomato'
イテラブルをカウントしてカウンタを更新する	aCounter.update(iterable)
線グラフを描画して、その色をライムグリーンに指定する	plt.plot(データ列, データ列2, color='limegreen')
データ列を1000の位で丸めて整数型にする	ds.round(-3).astype(int)
＜オプション＞パープルを使う	color = 'purple'
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフの丸印を黄色にする	plt.plot(データ列, データ列2, marker='o', markerfacecolor='y')
データフレームを'A'列の値によってグループ化し要約統計量を計算する	df.groupby('A').describe()
ヒストグラムを描画して、色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategrey')
キューの順序を右にn個分ローテンションする	deq.rotate(n)
線グラフを描画して、その色をダークグレーに設定する	plt.plot(データ列, データ列2, color='darkgray')
変数の出力を改行なしに行う	print(value, end='')
データ列とリストのパステル調のグラフを描画してその色を黒にする	plt.plot(xdata, ydata, linestyle='pastel', color='k')
＜オプション＞グラフの色をバリーウッドに指定する	color = 'burlywood'
ダークカーキ色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkkhaki')
＜オプション＞淡い茶色にグラフの色を設定する	color = 'tan'
文字列が正規表現にマッチさせる	re.match(pattern, s)
分子と分母から有理数を生成する	fractions.Fraction(分子, 分母)
シーケンスを無限に繰り返す	itertools.cycle(iterable)
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.', c='k')
日付時刻データの時間を使う	aDatetime.time()
データフレームの指定した列を配列として抽出する	df[column].values
タプルの個数	len(aTuple)
リスト内の要素が少なくともひとつ真か調べる	any(aList)
シーケンスをキューにする	collections.deque(iterable)
色差別ないの折れ線グラフをリストと配列で描画し、、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', linewidth=n)
リストを分割する	pd.cut(aList, aList)
＜オプション＞ネイビーにグラフの色を設定する	color = 'navy'
各列毎にデータフレームをグループ化して列の合計を計算する	df.groupby(column)[column2].sum()
データフレームの中のカラムを等量でn個にビン分割する	pd.qcut(df[col], n)
スタックは空である	len(deq) == 0
数列とリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(xdata, ydata, marker='<')
ヒストグラムを描画して、その色をライトコーラルにセットする	plt.hist(データ列, color='lightcoral')
末尾から空白で文字列を分割する	s.rsplit()
データフレームから最後の列を除く	df[df.columns[:-1]]
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
配列を2次元1行に変形する	aArray.reshape(1, -1)
データフレームを各列と列の組み合わせ毎にグループ化し、、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
イテラブルの各要素に対して、predicateFuncがTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データ列とリストについての散布図に丸マーカーをプロットする	plt.plot(xdata, ydata, marker='o')
３自然数の最大公約数を計算する	math.gcd(n, n2, n3)
文字列はPythonのキーワードかどうか調べる	keyword.iskeyword(s)
ヒストグラムを描画して、その色をベージュに変更する	plt.hist(データ列, color='beige')
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
nullに等しい値	None
Pandasで、データ列をタイムスタンプに変換する	pd.to_datetime(ds)
文字列をセンタリングにする	s.center(文字列幅)
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
ヒストグラムを描画してその色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
関数の値によってデータフレームをグループ化する	df.groupby(関数)
表データの列が正規表現文字列にマッチする行を取り出す	df[df[column].str.match(s)]
タプルに項目名が存在する	key not in aDict
２つの文字列は等しくないかどうか確認する	s != s2
有理数を使う	import fractions
xの小数点以下'1'桁の文字列にする	':.1f'.format(x)
＜オプション＞ライトスレイグレーにグラフの色を指定する	color = 'lightslategray'
第一引数で指定されたファイル名	sys.argv[1]
配列とリストの散布図に三角マーカーを描画する	plt.plot(xdata, ydata, marker='^')
行列の列ごとの最大値	np.max(aArray, axis=0)
折れ線グラフを描画して、その色をデピンクに変更する	plt.plot(データ列, データ列2, color='deeppink')
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
グラフを使う準備をする	from sympy import N
一番右側の列をデータフレームから除く	df[df.columns[:-1]]
列と列の重複を削除する	df.drop_duplicates(subset=column)
パステル調の色のマーカーとして散布図を重なりを見やすく描画する	plt.plot(xdata, ydata, c='pastel', alpha=0.5)
句読点文字を全て使う	string.punctuation
折れ線グラフの四角マーカーの線幅をnに指定する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
散布図にカラーコードの右三角マーカーを使用する	plt.plot(xdata, ydata, marker='>', c=rgb)
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
折れ線グラフの色をダークサーモンに指定する	plt.plot(データ列, データ列2, color='darksalmon')
文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
バツマーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='x')
マッピングからキーの値をエラーなく得る	aDict.get(key, None)
＜オプション＞グラフの色をダークターコイズに設定する	color = 'darkturquoise'
データフレームのリストカラムのモードを求める	df[aList].mode()
データフレームの欠損値を直前の値に増やす	df.fillna(method='ffill')
オブジェクトは論理値か調べる	isinstance(obj, bool)
色差別ないの色を青色に設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
＜オプション＞文字コードを文字列の示す文字コードに指定する	encoding = s
データフレームを'A'列によって昇順にソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
グラフの補足の位置を指定する	plt.legend(loc=(x, y))
部分文字列が文字列の開始位置以降に存在するか判定する	s.find(sub, start) != -1
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
＜オプション＞ダークシアン色を用いる	color = 'darkcyan'
データフレームの未入力値をドロップする	df.dropna()
＜オプション＞ドジャーブルーにグラフの色を設定する	color = 'dodgerblue'
データフレームの欠損値をメディアンで埋める	df.fillna(df.median())
折れ線グラフの▽マーカーを黄色くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='y')
スプリンググリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='springgreen')
＜オプション＞色をスラグレーに設定する	color = 'slategrey'
ナバホホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='navajowhite')
二つの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
データフレームのリストカラムの値がNaNか	df[aList].isna()
Pandasで、フォーマットfmtを用いてデータ列をPandasの日付型にする	pd.to_datetime(ds, format=fmt)
文字列を部分文字列で分割した場合の最初の文字列	s.partition(sub)[0]
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
データフレームを複数の列によって小さい順に並べ直す	df.sort_values(by=column, ascending=True)
データフレームの列の欠損値を最大値で埋める	df[col].fillna(df[col].max())
配列の分散を求める	np.var(aArray)
線グラフを描画して、その色をゲインズボロに設定する	plt.plot(データ列, データ列2, color='gainsboro')
グラフのサイズを設定する	plt.figure(figsize=(width, height))
重なりを見やすく暗い色でイテラブルとリストについての散布図を描く	plt.plot(xdata, ydata, c='dark', alpha=0.5)
nを八進文字列に変換する	oct(n)[2:]
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(xdata, ydata, marker='X', c='k')
ベクトルの列ごとの平均値を求める	np.mean(aArray, axis=0)
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
ふたつの集合の共通部分	aSet.intersection(aSet2)
データフレームの空文字をNaNに変換し、ドロップする	df.replace('', np.nan).dropna()
データフレームのカラムをdatetime64型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
カウンタから最頻出な要素の件数	aCounter.most_common()[1]
データ列を丸めて、整数にする	ds.round().astype(int)
データ列の中にと文字列が存在するか確認する	ds.isin([value, value2])
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列, データ列2, marker='.', markerfacecolor='k')
ヒストグラムを描画して色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
データフレームの列は正規分布からどれだけ歪んでいるか見る	df[col].kurt()
本日が水曜日かどうか調べる	datetime.datetime.today().weekday() == 2
Pandasのバージョンを確認する	print(pd.__version__)
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列, データ列2, color='whitesmoke')
散布図にカラーコードの三角マーカーを使う	plt.plot(xdata, ydata, marker='^', c=rgb)
データフレームの列からユニークな要素を抽出しリスト化する	df[col].unique().tolist()
数値をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
二進文字列をbytesizeバイトのバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
標準出力を使う	sys.stdout
データ列を度数分布図で可視化する	plt.hist(ds)
逆順の双方向キュー	reversed(deq)
seabornのデフォルトを適用する	sns.set()
＜オプション＞パープル色を使う	color = 'purple'
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
黒い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='k')
データフレームを列で整列する	df.sort_values(by=column)
表を使う	import pandas as pd
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkolivegreen')
要素を双方向キューのn番目に途中追加する	deq.insert(n, element)
カラーコードに棒の色を設定する	plt.bar(ラベル列, データ列, color=rgb)
異なる列をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームの列の値がxより多い行を抽出する	df[df[column] > x]
小数点数の正接	math.tan(x)
リストとイテラブルについての散布図に黒色の四角マーカーを描く	plt.plot(xdata, ydata, marker='s', c='k')
一度にデータフレームの列の名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
現在のタイムスタンプ	datetime.datetime.now()
データフレームの先頭	df.head()
辞書の項目名を要素に設定する	aDict[key] = element
マッピングをカウンタに変換する	collections.Counter(aDict)
部分文字列を文字列の接頭辞から取り除く	s.removeprefix(sub)
整数nのビット長	n.bit_length()
空白で文字列を末尾から区切る	s.rsplit()
プロットの描画でパステル調のカラーパレットを使う	sns.set(pallete='pastel')
データフレームを'A'列の値でまとめた表を見る	df.groupby('A')
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='mediumvioletred')
赤い下三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='v', c='r')
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
リストを逆順にする	reversed(aList)
散布図に黒い丸マーカーを使用する	plt.plot(xdata, ydata, marker='o', c='k')
データフレームの列を最初のカテゴリーを除外してダミー変数にする	pd.get_dummies(df[column], drop_first=True)
データフレームからインプレイスで重複をドロップする	df.drop_duplicates(inplace=True)
startからendの間でヒストグラムをプロットする	plt.hist(データ列, range=(start, end))
データ列と配列の散布図に黒色のバツマーカーを描画する	plt.plot(xdata, ydata, marker='x', c='k')
折れ線グラフを描画して、その色をドジャーブルーにする	plt.plot(データ列, データ列2, color='dodgerblue')
Pandasで、データ列をPandasの日付型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
ファイルパスがある	os.path.exists(filepath)
＜オプション＞色をローングリーンに変更する	color = 'lawngreen'
文字列リストを連結し、一つの文字列にする	''.join(map(str, iterable))
データフレームを列によってグループ化して各グループごとの最大値を求める	df.groupby(column).max()
カラーコードの四角マーカーをリストと配列についての散布図に描画する	plt.plot(xdata, ydata, marker='s', c=rgb)
データフレームを'A'列でで降順に整列する	df.sort_values(by='A', ascending=False)
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
データフレームの列を柱状グラフで可視化する	plt.hist(df[column])
データ列を四分位数ごとに分割する	pd.qcut(ds, 4)
折れ線グラフを描画して、その色を暗い赤に指定する	plt.plot(データ列, データ列2, color='darkred')
データフレームから型リストのデータ型の列を除外する	df.select_dtypes(exclude=typeList)
折れ線グラフを描画してその色をバイオレットに設定する	plt.plot(データ列, データ列2, color='violet')
本日の月数	datetime.datetime.today().month
シーケンスを累積する	itertools.accumulate(iterable, operator.mul)
整数nの8進数表記を使う	oct(n)
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
ふたつのリストの積集合	list(set(aList) & set(aList2))
リストとデータ列についての散布図を色差別ない色で描画する	plt.plot(xdata, ydata, c='colorblind')
折れ線グラフを描画してその色をダークスレートブルーに設定する	plt.plot(データ列, データ列2, color='darkslateblue')
リストとリストについて散布図を描画して、大バツマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='X', c=rgb)
データフレームを列ごとにグループ化し、それぞれのグループの個数を求める	df.groupby(column).count()
＜オプション＞パールゴールデンロッドにグラフの色をセットする	color = 'palegoldenrod'
データ列を折れ線グラフに描画して、印をバツ印にする	plt.plot(データ列, データ列2, marker='x')
折れ線グラフのスタイルを点線に設定する	plt.plot(データ列, データ列2, linestyle='dotted')
文字列が全て英字か調べる	s.isalpha()
イテラブルとイテラブルの青い色差別ないを描く	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
データフレームを'A'列によってグループ化し、記述統計量を求める	df.groupby('A').describe()
データフレームのpercent分位数	df.quantile(percent/100)
コマンドラインフラグの状態を知る	sys.flags
線グラフを描画して、その色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
一行、ランダムにデータフレームから抽出する	df.sample()
数列とデータ列の折れ線グラフをuntitledとラベル付けして描画する	plt.plot(xdata, ydata, label=untitled)
正規分布を用いて疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
＜オプション＞グラフの色をレベッカパープルに指定する	color = 'rebeccapurple'
折れ線グラフのダイアモンドマーカーを赤色にする	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
折れ線グラフのバツマーカーを青くする	plt.plot(データ列, データ列2, marker='x', markerfacecolor='b')
'A'列を用いてデータフレームを並べる	df.sort_values(by='A')
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
既存の行列を元にして全要素が0の配列	np.zeros_like(aArray)
最大値でデータ列のNaNを埋める	ds.fillna(ds.max())
浮動小数点数に変換する	float(x)
ビン数nの柱状図を描画する	plt.hist(データ列, bins=n)
折れ線グラフの色を黄色に設定する	plt.plot(データ列, データ列2, color='yellow')
折れ線グラフを描画して、その色をチョコレートに変更する	plt.plot(データ列, データ列2, color='chocolate')
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='darkgoldenrod')
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
折れ線グラフを描画して色をナバホホワイトにする	plt.plot(データ列, データ列2, color='navajowhite')
リストと数列についての散布図に下三角マーカーを描く	plt.plot(xdata, ydata, marker='v')
折れ線グラフを描画して、その色をゲインズボロにする	plt.plot(データ列, データ列2, color='gainsboro')
データフレームの列のNaNを最小値に設定する	df[col].fillna(df[col].min())
列によってデータフレームをグループ分けして分散を計算する	df.groupby(column).var()
キュー中の数値の数を数える	deq.count(element)
いつまでもnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
データ列とラベルを指定して棒を描画する	plt.bar(ラベル列, データ列)
実数の逆正接	math.atan(x)
列の文字列を未入力値に変換する	ds.replace(s, np.nan)
データフレームのカラムの値は欠損値か確認する	df[col].isna()
ヒストグラムを描画して、その色をサドルブラウンに変更する	plt.hist(データ列, color='saddlebrown')
グラフのパレットを淡くする	sns.set(pallete='muted')
ヒストグラムを描画して色をブランチドアーモンドに変更する	plt.hist(データ列, color='blanchedalmond')
小麦色にヒストグラムの色を指定する	plt.hist(データ列, color='wheat')
データフレームの数値をまとめて丸める	df.round()
文字列の片仮名をひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データフレームの欠損値をメディアンで補う	df.fillna(df.median())
暗い色の折れ線グラフを描画し、、その線幅をnにセットする	plt.plot(xdata, ydata, linewidth=n, color='dark')
小数点数の余弦	math.cos(x)
タプルをリバースする	reversed(aTuple)
線グラフの色を淡い茶色に指定する	plt.plot(データ列, データ列2, color='tan')
＜オプション＞グラフの種類を点線に設定する	linestyle = 'dotted'
シルバーにヒストグラムの色を変更する	plt.hist(データ列, color='silver')
文字列の開始位置からと終了位置の範囲に部分文字列が存在するかどうか調べる	s.find(sub, start, end) != -1
文字コードtextとしてファイルを開く]	open(filepath, encoding=text)
タプルの平均値	sum(aTuple)/len(aTuple)
リストとリストについての散布図を濃い色で描画する	plt.plot(xdata, ydata, c='deep')
データ列を1000の位で四捨五入する	ds.round(-3)
折れ線グラフの色をモカシンに指定する	plt.plot(データ列, データ列2, color='moccasin')
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
＜オプション＞オーキッドを用いる	color = 'orchid'
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(xdata, ydata, marker='s', c='r')
ヒストグラムを描画してその色をダークスラテグレーに指定する	plt.hist(データ列, color='darkslategray')
列でデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
文字列の最初からタブを取り除く	s.lstrip('\t')
＜オプション＞グラフの色をスカイブルーに設定する	color = 'skyblue'
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
折れ線グラフの色をパレットトルコイズに指定する	plt.plot(データ列, データ列2, color='paleturquoise')
クラスが名前付きタプルか調べる	issubclass(C, tuple)
実数の複素数	complex(x)
ヒストグラムを描画して、その色をシアンに設定する	plt.hist(データ列, color='cyan')
イテラブルと配列についての散布図にデータラベル用のラベルを付ける	plt.scatter(xdata, xdata, label=s)
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
データフレームから重複した行を削除して、更新する	df.drop_duplicates(inplace=True)
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列, データ列2, color='palegreen')
リストとリストについての散布図にカラーコードの星マーカーを描画する	plt.plot(xdata, ydata, marker='*', c=rgb)
淡いグラフの色をカラーコードに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
リストとデータ列で濃いグラフを描画して、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='deep', color='r')
オプションで、標準出力を使用する	file = sys.stdout
ヒストグラムを描画して、色をバイオレットに変更する	plt.hist(データ列, color='violet')
散布図に明るい色のマーカーを使う	plt.plot(xdata, ydata, c='bright')
リストとリストについてカラーコードの暗いグラフを描画する	plt.plot(xdata, ydata, linestyle='dark', color=rgb)
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
リストと配列について散布図をプロットし、、下三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='v', c=rgb)
nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
EUCでファイルパスを開く]	open(filepath, encoding='euc_jp')
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
線グラフの色をライトスチールブルーに設定する	plt.plot(データ列, データ列2, color='lightsteelblue')
データフレームをグループ化し、それぞれの列に対し個数を算出する	df.groupby(column)[column2].count()
データフレームのリスト列の欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
＜オプション＞SJISを使用する	encoding = 'shift_jis'
両端キュー	collections.deque()
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
明るいグラフの色を赤にする	plt.plot(xdata, ydata, linestyle='bright', color='r')
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列, データ列2, color='darkorange')
ヒストグラムを描画して、色をミディアムアクアマリンに指定する	plt.hist(データ列, color='mediumaquamarine')
折れ線グラフに緑色のバツマーカーを描画する	plt.plot(データ列, データ列2, marker='x', markerfacecolor='g')
折れ線グラフに黄色い左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markerfacecolor='y')
dateStringをdatetime64型にする	pd.to_datetime(dateString)
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
散布図を下三角マーカーを使って描画する	plt.plot(xdata, ydata, marker='v')
キューの先頭にタプルの各要素を付け加える	deq.extendleft(iterable)
ベクトルの形状	aArray.shape
データフレームのカラムを十の位で丸める	df[col].round(-1)
データフレームの指定された２つの列を抽出する	df[[column, column2]]
日付データが月曜日かどうか調べる	aDate.weekday() == 0
データ列とリストの散布図を描画し、、右三角マーカーの色をカラーコードに指定する	plt.plot(xdata, ydata, marker='>', c=rgb)
ファイルを読み込みモードで開く]	open(filepath, mode='r')
カウンタからゼロカウントを削除する	+aCounter
分割数nとして等量で配列を分割する	pd.qcut(aArray, n)
aListn番目から要素を取り出す	aList.pop(n)
データフレームを各列と列の組み合わせ毎にグループ化し、、平均値を求める	df.groupby([column, column2], as_index=False).mean()
データ列の母標準偏差を求める	ds.std(ddof=0)
暗い色のマーカーを散布図に使う	plt.plot(xdata, ydata, c='dark')
散布図にカラーコードの左三角マーカーを使う	plt.plot(xdata, ydata, marker='<', c=rgb)
データフレームを'A'列によって並べ直す	df.sort_values(by='A')
データ列の50パーセンタイル	ds.median()
グラフの描画で暗いカラーテーマを使用する	sns.set(pallete='dark')
黄色いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='y')
文字列の先頭でパターンにケースを無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
ヒストグラムを描画して、その色をモカシンに指定する	plt.hist(データ列, color='moccasin')
列のモードを求める	ds.mode()
表データから型の列を取り出す	df.select_dtypes(ty)
折れ線グラフの四角マーカーの線幅をnに設定する	plt.plot(データ列, データ列2, marker='s', markeredgewidth=n)
データフレームの先頭n行	df.head(n)
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
文字列から部分文字列を除く	s.replace(sub, '')
データ列をパステル調の色のヒストグラムとして描く	plt.hist(xdata, color='pastel')
ピーチパフ色の線グラフを描画する	plt.plot(データ列, データ列2, color='peachpuff')
青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
今日の曜日を整数で使う	datetime.datetime.today().weekday()
折れ線グラフを描画してその色をターコイズにする	plt.plot(データ列, データ列2, color='turquoise')
＜オプション＞色をダークグレーにセットする	color = 'darkgray'
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
ビン数をnに設定してヒストグラムをプロットする	plt.hist(データ列, bins=n)
折れ線グラフを描画してその色をディムグレーに指定する	plt.plot(データ列, データ列2, color='dimgray')
nにn2をかける	n * n2
ファイルからの読み込みストリームを使う	open(filepath)
n回文字列が繰り返すイテラブルを求める	itertools.repeat(element, n)
リストとリストの淡いグラフを描画して、その色を黒にする	plt.plot(xdata, ydata, linestyle='muted', color='k')
赤い大バツマーカーを散布図に使う	plt.plot(xdata, ydata, marker='X', c='r')
データフレームのリストカラムの値を正規表現でまとめて置き換える	df[aList].replace(pattern, repl, regex=True)
列の文字列を欠損値に変換する	ds.replace(s, np.nan)
マップのキーと値を入れ替える	{v: k for k, v in aDict.items()}
カウンタの全数	aCounter.total()
折れ線グラフに大きさnの丸マーカーを描画する	plt.plot(データ列, データ列2, marker='o', markersize=n)
配列から重複を除いた配列を作る	np.unique(aArray)
データフレームをグループ化し列に対し分散を求める	df.groupby(column)[column2].var()
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
nがタプルのいづれかか調べる	n in aTuple
＜オプション＞グレー色を用いる	color = 'gray'
リストとデータ列の折れ線グラフを描画し、、透明度をalphaに設定する	plt.plot(xdata, ydata, alpha=alpha)
重なりを見やすく散布図を暗い色のマーカーで描く	plt.plot(xdata, ydata, c='dark', alpha=0.5)
両端キューの右にシーケンスの各要素を順に追加する	deq.extend(iterable)
両端キューのn番目	deq[n]
パステル調の色でリストについてのヒストグラムを描く	plt.hist(xdata, color='pastel')
＜オプション＞インディゴ色を使う	color = 'indigo'
折れ線グラフの色をアクアに設定する	plt.plot(データ列, データ列2, color='aqua')
文字列を最後の部分文字列によって二つに分ける	s.rpartition(sub)
データフレームを各列毎にグループ化して、列の個数を計算する	df.groupby(column)[column2].count()
リストと数列について淡い色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='muted')
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ヒストグラムでカラーマップを使う	"plt.hist(データ列, color=plt.get_cmap(""Spectral""))"
プラットフォームの文字コードの最大値を知る	sys.maxunicode
値をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
ピアソン相関係数としてデータフレームのリスト列の相関行列を算出する	df[aList].corr(method='pearson')
カウンタの要素数を使う	len(aCounter)
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
折れ線グラフを描画して、その色をダークオーキッドに変更する	plt.plot(データ列, データ列2, color='darkorchid')
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
タプルの項目名とその値をペアとして取り出す	aDict.items()
浮動小数点数を実数で除する	x / y
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
エンコーディングを用いて文字列をバイト列に変換する	s.encode(encoding=encoding)
ヒストグラムを描画して、その色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
リストのn番目に文字列を差し込む	aList.insert(n, element)
折れ線グラフの色をダークスラテグレーに指定する	plt.plot(データ列, データ列2, color='darkslategray')
書式をargsを引数としてフォーマットする	formatText.format(*args)
＜オプション＞ライトグレーを使う	color = 'lightgray'
点線に折れ線グラフのスタイルを設定する	plt.plot(データ列, データ列2, linestyle='dotted')
文字列としてイテラブルを連結する	''.join(map(str, iterable))
格子をグラフに表示する	plt.grid(True)
実行結果をシアンでプリントできる文字列にする	f'\033[36m{value}\033[0m'
＜オプション＞グラフの色をグリーンイエローに設定する	color = 'greenyellow'
二つの関係が上位集合か調べる	aSet.issuperset(aSet2)
折れ線グラフの下三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='g')
空の集合を使う	set()
＜オプション＞色をダークスラテグレーに設定する	color = 'darkslategray'
整数nの8進文字列	oct(n)[2:]
＜オプション＞星マーカーを使う	marker = '*'
折れ線グラフを描画して、その色を貝殻に設定する	plt.plot(データ列, データ列2, color='seashell')
現在が何分か知る	datetime.date.today().minute
文字列をn回繰り返すイテラブルを得る	itertools.repeat(element, n)
折れ線グラフの色をタンに設定する	plt.plot(データ列, データ列2, color='tan')
代数計算を使う	import sympy
両端キューの先頭に列の要素を追加する	deq.extendleft(iterable)
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(xdata, ydata, marker='v')
文字列リストを連結する	''.join(aStringList)
標準入力を	sys.stdin
データフレームから最後のカラムを消す	df[df.columns[:-1]]
＜オプション＞グラフの色をロージーブラウンに設定する	color = 'rosybrown'
折れ線グラフを描画して、その色をライムにする	plt.plot(データ列, データ列2, color='lime')
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
暗いグラフをリストとリストで描画し、、線幅をnに設定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
折れ線グラフの色をライムに設定する	plt.plot(データ列, データ列2, color='lime')
＜オプション＞左三角マーカーを描画する	marker = '<'
数値をシアンでプリントする	print(f'\033[36m{value}\033[0m')
赤い三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='^', c='r')
Pandasのバージョンを表示する	print(pd.__version__)
ヒストグラムを描画して、その色を青紫に設定する	plt.hist(データ列, color='violet')
＜オプション＞ライトサーモンを使う	color = 'lightsalmon'
＜オプション＞ダーク・スラテグレー色を使用する	color = 'darkslategrey'
折れ線グラフの大バツマーカーの大きさをnに設定する	plt.plot(データ列, データ列2, marker='X', markersize=n)
全要素を1で初期化されたベクトル	np.ones(要素数, dtype=np.int)
列を十の位で丸めて、整数にする	ds.round(-1).astype(int)
ファイルのファイル名	os.path.basename(filepath)
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
ヒストグラムを描画して、色をダークオーキッドに指定する	plt.hist(データ列, color='darkorchid')
'A'列と'B'列によってによって破壊的にデータフレームをソートする	df.sort_values(by=['A', 'B'], inplace=True)
文字列の開始位置番目と終了位置番目の間に部分文字列がないか調べる	s.find(sub, start, end) == -1
ライトグリーン色の線グラフを描画する	plt.plot(データ列, データ列2, color='lightseagreen')
文字列が部分文字列で終わるか調べる	s.endswith(sub)
タイムスタンプデータの分数を見る	aDatetime.minute
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
Pandasで、フォーマットで文字列をPandasの日付型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
グラフの横軸にラベルを付ける	plt.xlabel(untitled)
JSONLファイルに小数点以下3桁までデータフレームを保存する	df.to_csv(filename, float_format='%.3f')
透明度alphaの折れ線グラフを描画する	plt.plot(xdata, ydata, alpha=alpha)
データフレームのそれぞれのグループごとの標準偏差を求める	df.groupby(column).std()
データフレームの列が文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
リストとデータ列として淡いグラフを描画し、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='muted', color=rgb)
アルファベットから一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
色差別ないを描いて、その線幅をnに設定する	plt.plot(xdata, ydata, linestyle='colorblind', color='r')
散布図をバツマーカーで描画する	plt.plot(xdata, ydata, marker='x')
両端キュー中の数値を数える	deq.count(element)
データフレームを用いる	import pandas as pd
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
折れ線グラフを描画して、その色をパールゴールデンロッドに変更する	plt.plot(データ列, データ列2, color='palegoldenrod')
整数nはリストのどれか	n in aList
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
カンマで文字列を区切って列挙する	s.split(',')
配列のスカラー倍を求める	aArray * n
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
＜オプション＞グリーンイエロー色を使う	color = 'greenyellow'
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
線グラフを描画して、その色をライトグレーに変更する	plt.plot(データ列, データ列2, color='lightgray')
データフレームを'A'列によってグループ化し、要約統計量を計算する	df.groupby('A').describe()
＜オプション＞読み込むシートの名前をnamesに設定する	sheet_name = names
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
折れ線グラフを描画して、その色をパールゴールデンロッドにする	plt.plot(データ列, データ列2, color='palegoldenrod')
8進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
カウンタの全カウントを使う	aCounter.total()
折れ線グラフに赤い▽印を描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
全要素を初期値で初期化された配列を初期化する	np.full(要素数, 初期値, dtype=np.int)
2つの列を用いてデータフレームを並べ、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
＜オプション＞グラフの色を真紅にセットする	color = 'crimson'
折れ線グラフの三角マーカーを赤色にする	plt.plot(データ列, データ列2, marker='^', markerfacecolor='r')
＜オプション＞読み込まない列番号をnamesで指定する	skiprows = names
行列の転置行列	aArray.T
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
リストと数列の明るいグラフを描いてその色を青にする	plt.plot(xdata, ydata, linestyle='bright', color='b')
実数の双曲線正弦	math.sinh(x)
オブジェクトからプロパティを削除する	delattr(obj, プロパティ名)
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
＜オプション＞色をパウダーブルーに設定する	color = 'powderblue'
折れ線グラフを描画して、その色を淡いピンク色に指定する	plt.plot(データ列, データ列2, color='lightpink')
カラムの中にいくつ欠損値があるか数える	ds.isna().sum()
ヒストグラムを描画して、色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
行列の行ごとの最大	np.max(aArray, axis=1)
ヒストグラムを描画して、色をミッドナイトブルーに変更する	plt.hist(データ列, color='midnightblue')
カラーコードの大バツマーカーを配列とデータ列についての散布図に描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
線グラフの色を真紅に設定する	plt.plot(データ列, データ列2, color='crimson')
グラフの背景色を暗くする	sns.set(style='darkgrid')
折れ線グラフを描画して、色をレモンシフォンに設定する	plt.plot(データ列, データ列2, color='lemonchiffon')
リストとリストについて散布図を描き、、三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='^', c=rgb)
＜オプション＞紺碧にグラフの色を変更する	color = 'azure'
ヒストグラムを描画して、その色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
組の末尾からn番目以前の部分を取り出す	aTuple[:-n]
ヒストグラムを描画して、その色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategrey')
リストを2回あわせた直積を得る	itertools.product(iterable, repeat=2)
配列とリストの折れ線グラフを描画して、色をカラーコードに設定する	plt.plot(xdata, ydata, color=rgb)
折れ線グラフを描画して、色をライトシアンに設定する	plt.plot(データ列, データ列2, color='lightcyan')
データフレームを2つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
マッピングから項目名の値をエラーなく参照する	aDict.get(key, None)
折れ線グラフの色を白くする	plt.plot(データ列, データ列2, color='w')
二つの列を並べて箱ひげ図にする	plt.boxplot([df[column], df[column2]])
プロットの中のフォントをfontNameに指定する	sns.set(font=fontName)
折れ線グラフに描画してマーカーを右三角印にする	plt.plot(データ列, データ列2, marker='>')
２つのデータフレームを列'A'と列'B'をキーとして左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
リストの平均	sum(aList)/len(aList)
自然数の最大公約数を求める	math.gcd(n, n2)
折れ線グラフの色をグリーンイエローに変更する	plt.plot(データ列, データ列2, color='greenyellow')
ヒストグラムを描画して、その色をシャルトリューズに変更する	plt.hist(データ列, color='chartreuse')
本日の日を使う	datetime.datetime.today().day
＜オプション＞色をダークシアグリーンにセットする	color = 'darkseagreen'
リストとリストの散布図に下三角マーカーを描く	plt.plot(xdata, ydata, marker='v')
両端キューを空にする	deq.clear()
データフレームの未入力値を最小値で補う	df.fillna(df.min())
SJISとして追加できるように既存のファイルを開く]	open(filepath, mode='a', encoding='shift_jis')
データフレームをサンプリングする	df.sample()
ヒストグラムを描画して色をコーラルに設定する	plt.hist(データ列, color='coral')
＜オプション＞グラフの色をアクアにする	color = 'aqua'
＜オプション＞namesを列の名前に設定する	names = names
startからendの範囲のヒストグラムを用いてリストを描画する	plt.hist(データ列, range=(start, end))
改行しなくて変数を表示する	print(value, end='')
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
データフレームを列名リストで昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームをグループ化し、それぞれの列に対し最大値を計算する	df.groupby(column)[column2].max()
折れ線グラフを描画してその色をインディアンレッドに設定する	plt.plot(データ列, データ列2, color='indianred')
リストとリストの黒い濃いグラフを描画する	plt.plot(xdata, ydata, linestyle='deep', color='k')
折れ線グラフの色をターコイズに設定する	plt.plot(データ列, データ列2, color='turquoise')
散布図にバツマーカーを使う	plt.plot(xdata, ydata, marker='x')
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
データ列とイテラブルについての散布図に赤い右三角マーカーを描画する	plt.plot(xdata, ydata, marker='>', c='r')
本日が金曜日か	datetime.datetime.today().weekday() == 4
＜オプション＞ライトスレイグレー色を使う	color = 'lightslategray'
折れ線グラフを描画して色をペールグリーンにする	plt.plot(データ列, データ列2, color='palegreen')
イテラブルとイテラブルの散布図を濃い色でプロットする	plt.plot(xdata, ydata, c='deep')
ヒストグラムを描画してその色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
データフレームを列で昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
リストと配列について青い明るいグラフをプロットする	plt.plot(xdata, ydata, linestyle='bright', color='b')
データフレームを各列と列の組み合わせ毎に集約し、、最小値を求める	df.groupby([column, column2], as_index=False).min()
折れ線グラフに黒い四角印を描画する	plt.plot(データ列, データ列2, marker='s', markerfacecolor='k')
配列とリストについて散布図を描画し、マーカーを左三角に指定する	plt.plot(xdata, ydata, marker='<')
リストとリストについて散布図を描画して、左三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='<', c=rgb)
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
配列とリストについて散布図を描き、、マーカーを右三角に設定する	plt.plot(xdata, ydata, marker='>')
オブジェクトのバイトサイズ	sys.getsizeof(obj)
osモジュールをインポートする	import os
日付時刻データの日数	aDatetime.day
線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列, データ列2, color='mediumaquamarine')
JSONLファイルにデータフレームをBOMを付けて保存する	df.to_csv(filename, encoding='utf_8_sig')
ゴールド色の線グラフを描画する	plt.plot(データ列, データ列2, color='gold')
グラフにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
イテラブルとリストの色差別ないを描画して、色を青にする	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
部分文字列を文字列の末尾から見つける	s.rfind(sub)
＜オプション＞色をダークスレートブルーに変更する	color = 'darkslateblue'
＜オプション＞エンコーディングを文字列の示すエンコーディングに変更する	encoding = s
リストとリストの散布図に菱形マーカーを描画する	plt.plot(xdata, ydata, marker='D')
事前にケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
単位行列を作る	np.eye(行数, 列数)
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列, データ列2, color='lightgrey')
バイナリ書き込みモードでファイルを開く]	open(filepath, mode='wb')
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
データ列を折れ線グラフに描画して、マーカーを▼にする	plt.plot(データ列, データ列2, marker='v')
綺麗なグラフを使う準備をする	import seaborn as sns
折れ線グラフを描画して、その色をダークマゼンタに設定する	plt.plot(データ列, データ列2, color='darkmagenta')
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
暗いグラフをリストと配列で描画して、線幅をnに指定する	plt.plot(xdata, ydata, linestyle='dark', color='r')
JSONLファイルにデータフレームをヘッダを付けずに保存する	df.to_csv(filename, header=None)
ヒストグラムを描画して、その色をピンクに設定する	plt.hist(データ列, color='pink')
データフレームのリストカラムの中の欠損値の数をカウントする	df[aList].isna().sum()
暗いグラフの線幅をnに変更する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
あらかじめASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
データ列の各データ値の出現回数を求める	ds.value_counts()
凡例を文字列と文字列と入れる	plt.legend([s, s2])
明るい色のマーカーで散布図を描画する	plt.plot(xdata, ydata, c='bright')
オブジェクトの属性の値	getattr(obj, プロパティ名)
＜オプション＞改行コードを旧Macに指定する	newline = '\r'
JSONファイルファイル名が	filename.endswith('.json')
ヒストグラムの描画して正規化する	plt.hist(データ列, density=True)
リストとイテラブルについて散布図を描画し、右三角マーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='>', c=rgb)
リストを明るい色のヒストグラムで描画する	plt.hist(xdata, color='bright')
カンマで区切って２つのリストをプリントする	print(value, value2, sep=',')
リストの要素を並べ変える	sorted(aList)
上位集合か確認する	aSet.issuperset(aSet2)
ヒストグラムの間を設定する	plt.hist(データ列, range=(start, end))
文字列を最初の部分文字列で二分し、残りの文字列を使う	s.partition(sub)[-1]
ヒストグラムを描画して、色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
折れ線グラフを描画してその色をダークサーモンに変更する	plt.plot(データ列, データ列2, color='darksalmon')
濃いの線幅を指定する	plt.plot(xdata, ydata, linestyle='deep', linewidth=n)
線グラフの色をミディアムスプリンググリーンに変更する	plt.plot(データ列, データ列2, color='mediumspringgreen')
データフレームのリスト列を100の位で丸めて、整数にする	df[aList].round(-2).astype(int)
nが奇数	n % 2 == 1
文字列を最初の部分文字列で分けた場合の後半の文字列を見る	s.partition(sub)[-1]
折れ線グラフを描画して、色をブランチドアーモンドに設定する	plt.plot(データ列, データ列2, color='blanchedalmond')
＜オプション＞バッファリングのサイズを設定する	buffering = 4096
数値を両端キューにエンキューする	deq.appendleft(element)
折れ線グラフの右三角マーカーを緑色にする	plt.plot(データ列, データ列2, marker='>', markerfacecolor='g')
リストの末尾を取り除く	aList[:-1]
リストを表示する	print(value)
文字列をフォーマットを用いてdatetime64型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
nが5で割り切れるか調べる	n % 5 == 0
リストとリストについて明るい色の折れ線グラフを描き、線幅をnに指定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
折れ線グラフを描画して、色をマゼンタに設定する	plt.plot(データ列, データ列2, color='magenta')
mathをインポートする	import math
データフレームの列のNaNを平均で置換する	df[col].fillna(df[col].mean())
折れ線グラフの色を赤に指定する	plt.plot(データ列, データ列2, color='red')
組をナンバリングする	enumerate(aTuple)
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
データフレームから重複した行を残さず、落とす	df.drop_duplicates(keep=False)
ヒストグラムを描画して色をオリーブに設定する	plt.hist(データ列, color='olive')
文字列中からパターンにケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
＜オプション＞クリムゾン色を使う	color = 'crimson'
カラーコードの大バツマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='X', c=rgb)
異なる列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ベクトルの次元数	aArray.ndim
nが5で割り切れるか判定する	n % 5 == 0
カウンタの項目を列挙する	aCounter.keys()
値を両端キューの先頭から取り除く	deq.popleft()
データフレームの中で、列と列の重複を調べる	df.duplicated(subset=[column, column2])
データフレームから最初の列を消す	df[df.columns[1:]]
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
データ列をリストを境界値として分割する	pd.cut(ds, aList)
ファイルを文字列の示すエンコーディングを使ってオープンする]	open(filepath, encoding=s)
折れ線グラフの色を文字列に変更する	plt.plot(xdata, ydata, color=s)
重複したデータをデータフレームから破壊的に削除する	df.drop_duplicates(inplace=True)
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
n個にリストを等間隔で分割する	pd.cut(aList, n)
英字が文字列内に含まれる	any(c.isalpha() for c in s)
オブジェクトが論理値クラスか確認する	isinstance(obj, bool)
標準入力を使う	sys.stdin
ヒストグラムを描画して、ビン数をnに設定する	plt.hist(データ列, bins=n)
文字列を大文字・小文字を無視して正規表現で区切る	re.split(pattern, s, flags=re.IGNORECASE)
ベクトルの合計値を求める	np.sum(aArray)
折れ線グラフの色をピンクに変更する	plt.plot(データ列, データ列2, color='pink')
句読点文字を全部使う	string.punctuation
＜オプション＞オールドレースを用いる	color = 'oldlace'
二つのオブジェクトが等しいかどうか調べる	obj == obj2
データフレームのn行より前抽出する	df[:n]
実行結果を青色で出力する	print(f'\033[34m{value}\033[0m')
ヒストグラムをビン数を設定して描画する	plt.hist(データ列, bins=n)
ファイルを閉じる	f.close()
配列と配列について散布図を描画して、マーカーを大バツに設定する	plt.plot(xdata, ydata, marker='X')
データフレームの中の列を等間隔でn個に分割する	pd.cut(df[col], n)
ヒストグラムを描画して、その色をモカシンにセットする	plt.hist(データ列, color='moccasin')
ヒストグラムのアルファをxに変更する	plt.hist(データ列, alpha=x)
文字列をプリントする	print(value)
データフレームの列名を付け直す	df.rename(columns={column: name})
オブジェクトはバイト列か調べる	isinstance(obj, bytes)
データ列とデータ列の折れ線グラフを描画し、、その色をカラーコードに指定する	plt.plot(xdata, ydata, color=rgb)
折れ線グラフに▼マーカーを使う	plt.plot(データ列, データ列2, marker='v')
ヒストグラムを描画して、その色をハニーデューに変更する	plt.hist(データ列, color='honeydew')
リストの最後から要素をポップする	aList.pop()
複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
集合から要素を除去する	aSet.remove(element)
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
リストから1個ランダムに選ぶ	random.choice(iterable)
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
ヒストグラムを描画してその色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
ヒストグラムを描画して、その色をパレットトルコイズに変更する	plt.hist(データ列, color='paleturquoise')
青い▼マーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='v', markerfacecolor='b')
データ列はどれだけ分散しているか確認する	ds.var()
＜オプション＞紺色を使う	color = 'darkblue'
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
文字列を部分文字列で分割して文字列リストに変換する	s.split(sub)
折れ線グラフに青い右三角印を描画する	plt.plot(データ列, データ列2, marker='>', markerfacecolor='b')
赤色の右三角マーカーとして散布図を描く	plt.plot(xdata, ydata, marker='>', c='r')
部分文字列を用いて文字列を二分する	s.partition(sub)
赤い三角マーカーで散布図を描く	plt.plot(xdata, ydata, marker='^', c='r')
ライトスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightskyblue')
イテラブルから集合を使う	set(iterable)
データ列とラベル列を指定して、積み上げ横棒をプロットする	"plt.barh(ラベル列, データ列, bottom=データ列2, color=""red"")"
データ列とリストについての散布図に星マーカーを描画する	plt.plot(xdata, ydata, marker='*')
xを印字できる文字列にする	ascii(x)
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
組の各要素を関数に適用した結果で並べ直す	sorted(aTuple, key=func)
タプルのn番目の	aTuple[n]
オレンジレッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='orangered')
データ列を百の位で丸めて、整数型にする	ds.round(-2).astype(int)
ヒストグラムを描画して、その色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
データフレームのリスト列の中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
データ列が正規分布からどれだけ、尖っているか見る	ds.skew()
散布図にカラーコードの星マーカーを用いる	plt.plot(xdata, ydata, marker='*', c=rgb)
黒い星マーカーをリストとリストについての散布図に描画する	plt.plot(xdata, ydata, marker='*', c='k')
イテラブルをワンホット・ベクトルにする	pd.get_dummies(iterable)
線幅nの折れ線グラフをプロットする	plt.plot(xdata, ydata, linewidth=n)
散布図に赤色の菱形マーカーを使用する	plt.plot(xdata, ydata, marker='D', c='r')
タプルを展開してプリントする	print(*aTuple)
線グラフの色をミスティローズに設定する	plt.plot(データ列, データ列2, color='mistyrose')
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列, データ列2, color='powderblue')
イテラブルから配列を作る	np.array(iterable)
データフレームのカラムは正規分布からどの程度歪んでいるか確認する	df[col].kurt()
実数を実数で割る	x / y
列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
折れ線グラフの四角マーカーを黄色くする	plt.plot(データ列, データ列2, marker='s', markerfacecolor='y')
行列の行列式	np.linalg.det(aArray)
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
＜オプション＞黄色に色を設定する	color = 'yellow'
シーケンスと列をペアリングする	itertools.zip_longest(iterable, iterable2)
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
赤い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='r')
nが5の倍数か調べる	n % 5 == 0
配列を四分位数でビニングする	pd.qcut(aArray, 4)
データ列が正規分布からどの程度、歪んでいるか確認する	ds.kurt()
データフレームの列の中に存在すると文字列の合計を数える	df[col].isin([value, value2]).sum()
データフレームを'A'列によって昇順に並べ、、更新する	df.sort_values(by='A', ascending=True, inplace=True)
ヒストグラムを描画してその色をライトゴールドロディイエローに指定する	plt.hist(データ列, color='lightgoldenrodyellow')
赤いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='r')
データ列をビン数nとして分割する	pd.cut(ds, n)
リストが空か確認する	len(aList) == 0
自然数個からk個取り出したときの順列の総数を計算する	math.perm(n, k)
実数を実数に加える	x + y
折れ線グラフを描画して、色をフクシアに変更する	plt.plot(データ列, データ列2, color='fuchsia')
四分位数で配列をビン分割する	pd.qcut(aArray, 4)
＜オプション＞グラフの色をライトグリーンに設定する	color = 'lightseagreen'
コロンで区切って二つの実行結果を表示する	print(value, value2, sep=':')
本日の日付時刻を使う	datetime.datetime.today()
データフレームのリスト列がどの程度、分散しているか見る	df[aList].var()
数値を黒色にする	f'\033[30m{value}\033[0m'
行列の行ごとの平均値	np.mean(aArray, axis=1)
データフレームのリストカラムの中央値	df[aList].median()
グラフの横軸のラベルをuntitledに設定する	plt.xlabel(untitled)
文字列を全て小文字にする	s.lower()
リストの全順列を得る	itertools.permutations(iterable)
グラフで使う色テーマをpalleteNameで指定する	sns.set(pallete=palleteName)
xを整数に変換する	int(x)
ヒストグラムを描画して、その色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
データフレームの列の文字列が文字列で終わるデータを選択する	df[df[column].str.endswith(s)]
文字列の接頭辞は部分文字列か	s.startswith(sub)
折れ線グラフの色をダークオリーブグリーンに変更する	plt.plot(データ列, データ列2, color='darkolivegreen')
カウンタの最頻出な項目	aCounter.most_common()[0]
＜オプション＞ディムグレーにグラフの色を設定する	color = 'dimgray'
線グラフを描画して、その色をパープルに設定する	plt.plot(データ列, データ列2, color='purple')
＜オプション＞グラフの色をアクアマリンに設定する	color = 'aquamarine'
セットが空でないか調べる	len(aSet) != 0
破線グラフの色をパステル調のに設定する	plt.plot(xdata, ydata, linestyle='dash', color='pastel')
線グラフの色をライトゴールドロディイエローにセットする	plt.plot(データ列, データ列2, color='lightgoldenrodyellow')
ファイルが存在しないかどうか	not os.path.exists(filepath)
新しい文字列で文字列を置き換える	s.replace(sub, newsub)
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
データフレームのリストカラムの欠損値を前の行の値に変更する	df[aList].fillna(method='ffill')
青いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='.', markerfacecolor='b')
データフレームの欠損値を第二四分位数で補う	df.fillna(df.median())
リストを境界値としてデータフレームの中のカラムをビン分割する	pd.cut(df[col], aList)
最大長nの両端キューを作る	collections.deque(maxlen=n)
最頻値でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(df[aList].mode().iloc[0])
nとn2が等しいか調べる	n == n2
実数の平方根	math.sqrt(x)
year年month月day日hour時のタイムスタンプ	datetime.datetime(year=year, month=month, day=day, hour=hour)
タイムスタンプデータは何時か知る	aDatetime.hour
文字列の左端から空白を取り除く	s.lstrip()
タイムスタンプデータを浮動小数点数に変換する	aDatetime.timestamp()
イテラブルから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
折れ線グラフを描画して、その色をピンクに設定する	plt.plot(データ列, データ列2, color='pink')
スタックをタプルにする	tuple(deq)
最後の項目をタプルからポップする	aDict.popitem()
データフレームの相関行列ピアソン相関係数として	df.corr(method='pearson')
データフレームのリスト列の欠損値を前の行の値で埋める	df[aList].fillna(method='ffill')
小数点数を切り上げる	math.ceil(x)
日付時刻データの曜日を整数で使う	aDatetime.weekday()
データフレームの内の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
文字列が無限に繰り返すイテラブルを得る	itertools.repeat(element)
ヒストグラムを描画して、色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
折れ線グラフにポイントマーカーを加える	plt.plot(データ列, データ列2, marker='.')
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
部分文字列を文字列中から見つける	s.find(sub)
ファイルパスからファイル名を見る	os.path.basename(filepath)
データ列とリストについて散布図を描画し、、マーカーを星に指定する	plt.plot(xdata, ydata, marker='*')
赤い淡いの折れ線グラフをプロットする	plt.plot(xdata, ydata, linestyle='muted', color='r')
2つの文字列は同じ	s == s2
エクセルファイルファイルをデータフレームとして読む	pd.read_excel(filename)
カラーコードのバツマーカーで散布図を描く	plt.plot(xdata, ydata, marker='x', c=rgb)
実数の双曲線正弦の逆数	math.asinh(x)
＜オプション＞ヘッダをnamesに設定する	header = names
ユーザが整数を入力する	int(input())
データフレームをJSONL形式のファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
数値を青色でプリントする	print(f'\033[34m{value}\033[0m')
イテラブルとリストをペアのリストにする	itertools.zip_longest(iterable, iterable2)
二点間のユークリッド距離	math.dist(point, point2)
折れ線グラフの色をドジャーブルーに変更する	plt.plot(データ列, データ列2, color='dodgerblue')
配列の推移を折れ線グラフで描く	plt.plot(range(len(xdata)), xdata)
JSON形式の文字列をデータにする	json.loads(jsonString)
実数を実数に掛ける	x * y
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
グラフで使える色名の一覧	matplotlib.colors.cnames
データフレームを'A'列で昇順に並べる	df.sort_values(by='A', ascending=True)
データフレームのカラムの中央値	df[col].median()
折れ線グラフのマーカーを▽印にする	plt.plot(データ列, データ列2, marker='v')
最初のカテゴリーを除いてデータフレームの列をワンホット・ベクトルにする	pd.get_dummies(df[column], drop_first=True)
黒色の左三角マーカーとして散布図を描画する	plt.plot(xdata, ydata, marker='<', c='k')
配列と配列について散布図を描いて、ポイントマーカーの色をカラーコードに設定する	plt.plot(xdata, ydata, marker='.', c=rgb)
＜オプション＞バイナリ書き込みモードにセットする	mode = 'wb'
複数の列によってで降順にデータフレームを並べ直す	df.sort_values(by=column, ascending=False)
データ列の秒	ds.dt.second
グラフの中のフォントをfontNameに変更する	sns.set(font=fontName)
＜オプション＞マーカーを大バツに変更する	marker = 'X'
＜オプション＞グラフの種類を破線に指定する	linestyle = 'dashed'
折れ線グラフの色を淡い茶色に指定する	plt.plot(データ列, データ列2, color='tan')
折れ線グラフを描画して、色をチョコレートに設定する	plt.plot(データ列, データ列2, color='chocolate')
線グラフを描画して、その色を淡い茶色に設定する	plt.plot(データ列, データ列2, color='tan')
文字列の先頭	s[0]
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
明るい色の折れ線グラフを描画して、線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
データフレームのリストカラムの文字列をNaNに変換する	df[aList].replace(s, np.nan)
青い明るいグラフを描画する	plt.plot(xdata, ydata, linestyle='bright', color='b')
既存のファイルをEUCとして追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
文字列の末尾から改行を取り除く	s.rstrip('\n')
日付時刻データを数値に変換する	aDatetime.timestamp()
現在が土曜日か調べる	datetime.datetime.today().weekday() == 5
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列, データ列2, color='mediumorchid')
色差別ない色として重なりを見やすく配列と配列についての散布図を描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
文字列中にひとつでも非数字が含まれるか	any(not c.isdigit() for c in s)
nの3乗	n ** 3
リストとリストについて散布図を描画して、四角マーカーの色をカラーコードに変更する	plt.plot(xdata, ydata, marker='s', c=rgb)
折れ線グラフを描画して、その色をシルバーに設定する	plt.plot(データ列, データ列2, color='silver')
配列をビン数nでビン分割する	pd.cut(aArray, n)
現在の日付を求める	datetime.date.today()
日付データが土曜日	aDate.weekday() == 5
暗いの折れ線の線幅を指定する	plt.plot(xdata, ydata, linestyle='dark', linewidth=n)
文字列でフォーマットして日付時刻データを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
バイナリ書き込みモードでファイルをオープンする]	open(filepath, mode='wb')
線グラフの色をダークサーモンに設定する	plt.plot(データ列, データ列2, color='darksalmon')
ヒストグラムを描画して色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
標準入力を得る	sys.stdin
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
＜オプション＞グラフの色をサーモンに設定する	color = 'salmon'
折れ線グラフを描画して、その色をライトスカイブルーに変更する	plt.plot(データ列, データ列2, color='lightskyblue')
集合が空でないかどうか調べる	len(aSet) != 0
リスト内の要素が少なくともひとつ真	any(aList)
文字列を走査し正規表現にASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
配列と配列について黒い明るいを描画する	plt.plot(xdata, ydata, linestyle='bright', color='k')
リストと配列を折れ線グラフでプロットする	plt.plot(xdata, ydata)
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
関数によってデータフレームをまとめたグループを見る	df.groupby(関数)
データ列を折れ線グラフに描画して、マーカーを左三角印にする	plt.plot(データ列, データ列2, marker='<')
リストとデータ列の散布図に赤色の星マーカーをプロットする	plt.plot(xdata, ydata, marker='*', c='r')
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
リストをひとつ置きに取り出す	aList[::2]
線グラフの色をダークオーキッドに変更する	plt.plot(データ列, データ列2, color='darkorchid')
範囲を指定して整数乱数を得る	random.randint(最小値, 最大値)
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列, データ列2, marker='X', markerfacecolor='r')
オブジェクトが辞書クラスかどうか調べる	isinstance(obj, dict)
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
折れ線グラフを描画して、その色をミスティローズに変更する	plt.plot(データ列, データ列2, color='mistyrose')
折れ線グラフにサイズnの左三角マーカーを描画する	plt.plot(データ列, データ列2, marker='<', markersize=n)
昇順にデータフレームを複数の列によってソートし、更新する	df.sort_values(by=column, ascending=True, inplace=True)
TSVファイルをデータフレームとして読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
リストと配列の散布図にカラーコードのバツマーカーを描く	plt.plot(xdata, ydata, marker='x', c=rgb)
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
文字列の後ろから範囲を指定して部分文字列を探す	s.find(sub, start, end)
文字列に日本語が含まれるか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
グラフの大きさを設定する	plt.figure(figsize=(width, height))
配列とリストについて散布図を描画する	plt.scatter(xdata, ydata)
第二引数で指定したファイルの名前	sys.argv[1]
折れ線グラフに黒い上三角印を描画する	plt.plot(データ列, データ列2, marker='^', markerfacecolor='k')
折れ線グラフに下三角印を使う	plt.plot(データ列, データ列2, marker='v')
数値の符号を同じにする	math.copysign(x, x2)
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
データフレームからn番目のカラムを除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
いつまでもnから数え上げるする	itertools.count(start=n)
文字列の末尾から空白を除く	s.rstrip()
折れ線グラフの色をモカシンに設定する	plt.plot(データ列, データ列2, color='moccasin')
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
三数の最大値を求める	max(x, y, z)
折れ線グラフを描画して、その色をオーキッドに設定する	plt.plot(データ列, データ列2, color='orchid')
黒色のパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='k')
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列, データ列2, color='lavenderblush')
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
データフレームは正規分布からどれだけ、尖っているか見る	df.skew()
ヒストグラムを描画して、その色をオールドレースに指定する	plt.hist(データ列, color='oldlace')
実数を小数点以下第一位で丸める	round(x, 1)
赤色の四角マーカーで散布図をプロットする	plt.plot(xdata, ydata, marker='s', c='r')
タイムスタンプデータからn秒分減算する	aDatetime - datetime.timedelta(seconds=n)
データフレームのシェイプを確認する	df.shape
＜オプション＞ブルーバイオレットに色を設定する	color = 'blueviolet'
黒色の三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='^', c='k')
データフレームの列で文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
シーケンスから配列を作成する	np.array(iterable)
グラフのパレットをpalleteNameに変更する	sns.set(pallete=palleteName)
文字列内にひとつでもアスキー文字が含まれる	any(c.isascii() for c in s)
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
両端キューが空か調べる	len(deq) == 0
折れ線グラフの色をアリスブルーにセットする	plt.plot(データ列, データ列2, color='aliceblue')
連立方程式を解く	sympy.solve([e, e2])
タイムスタンプデータが水曜日か	aDatetime.weekday() == 2
ケンドール順位相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
タプルのn番目以降の部分を取り出す	aTuple[n:]
データ列の欠損値を中央値で置換する	ds.fillna(ds.median())
２つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
線グラフを描画してその色をライトスレイグレーにセットする	plt.plot(データ列, データ列2, color='lightslategrey')
プログラムの実行を正しく終了する	sys.exit(0)
小数点数の常用対数	math.log10(x)
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
二つのオブジェクトが同一か調べる	obj is obj2
データフレームを列の値によってグループ化する	df.groupby(column)
文字の文字コード	ord(ch)
折れ線グラフの色をやわらかい青に変更する	plt.plot(データ列, データ列2, color='cornflowerblue')
等間隔で配列をn個にビニングする	pd.cut(aArray, n)
表を二つの列でで降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
紺色の折れ線グラフを描画する	plt.plot(データ列, データ列2, color='darkblue')
文字列TSVファイルからn番目のカラムを行にしてカンマ区切りのファイルを読み込む	pd.read_csv(filename, index_col=n)
複数行対応として事前にパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
線グラフを描画して、その色をオレンジに設定する	plt.plot(データ列, データ列2, color='orange')
一点鎖線に折れ線グラフのスタイルを設定する	plt.plot(データ列, データ列2, linestyle='dashbot')
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
nがn2より大きい	n > n2
折れ線グラフを描画して、その色をブルーバイオレットに設定する	plt.plot(データ列, データ列2, color='blueviolet')
折れ線グラフを描画して色を白くする	plt.plot(データ列, データ列2, color='w')
文字列の中の複数行対応として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
データフレームを列によってグループ化し、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
＜オプション＞読み込みモードを使う	mode = 'r'
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
＜オプション＞コーンフラワーブルーにグラフの色を指定する	color = 'cornflowerblue'
ダークオレンジにヒストグラムの色を指定する	plt.hist(データ列, color='darkorange')
赤い大バツマーカーで散布図を描画する	plt.plot(xdata, ydata, marker='X', c='r')
文字列中に部分文字列が存在するか	sub in s
最初の部分文字列によって文字列を二分する	s.partition(sub)
リストをビン数nで分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
今日が月曜日	datetime.datetime.today().weekday() == 0
ヒストグラムを描画して、色を白くする	plt.hist(データ列, color='w')
ヒストグラムを描画して、その色をビスクに設定する	plt.hist(データ列, color='bisque')
アクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='aquamarine')
折れ線グラフを描画して、その色をミディアムアクアマリンに指定する	plt.plot(データ列, データ列2, color='mediumaquamarine')
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列, データ列2, marker='v', markerfacecolor='r')
データフレームのカラムの欠損値を前の行の値で埋める	df[col].fillna(method='ffill')
ファイルからストリームをオープンして]fileとする	file = open(filepath)
データフレームのリストカラムの平均値	df[aList].mean()
文字列でフォーマットして今日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフを描画して、色をシスルに設定する	plt.plot(データ列, データ列2, color='thistle')
＜オプション＞ホットピンクを用いる	color = 'hotpink'
セットからエラーなく要素を取り除く	aSet.discard(element)
折れ線グラフの色をトマトに設定する	plt.plot(データ列, データ列2, color='tomato')
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
文字列を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
データフレームを降順でインデックスで整列する	df.sort_index(ascending=False)
＜オプション＞ダークスレートブルーにグラフの色を設定する	color = 'darkslateblue'
行列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
＜オプション＞グラフの色をフローラルホワイトに指定する	color = 'floralwhite'
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
赤色のダイアモンドマーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='D', c='r')
度数分布図のプロットし、、正規化する	plt.hist(データ列, density=True)
＜オプション＞グリーンイエローを使用する	color = 'greenyellow'
データ列が何秒か見る	ds.dt.second
＜オプション＞ゲインズボロに色を変更する	color = 'gainsboro'
データフレームのカラムの値がリストに含まれるデータを選択する	df[df[column].isin(aList)]
明るいカラーパレットをプロットの描画で使う	sns.set(pallete='bright')
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
黄色で文字列をプリントする	print(f'\033[33m{value}\033[0m')
既存のベクトルをベースに全要素が0のベクトルを作る	np.zeros_like(aArray)
データフレームの中にいくつ日付データが存在するかカウントする	df.isin([value]).sum()
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
数列とイテラブルの青い色差別ないグラフを描画する	plt.plot(xdata, ydata, linestyle='colorblind', color='b')
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t')
タプルをリストに変換する	list(aTuple)
散布図を色差別ない色のマーカーを用いて重なりを見やすく描画する	plt.plot(xdata, ydata, c='colorblind', alpha=0.5)
変数を黄色にする	f'\033[33m{value}\033[0m'
二つの浮動小数点数が近似値か	math.isclose(x, x2)
ヒストグラムの色をダークバイオレットに変更する	plt.hist(データ列, color='darkviolet')
折れ線グラフを描画して、その色をトマトに変更する	plt.plot(データ列, データ列2, color='tomato')
試しに何か動かす	print('Hello World')
標準出力がパイプ	not sys.stdout.isatty()
データ列とリストについての散布図にポイントマーカーを描画する	plt.plot(xdata, ydata, marker='.')
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
列をリストとして取り出す	df[column].values.tolist()
ふたつの集合の対称差集合を使う	aSet.symmetric_difference(aSet2)
グラフのフォントを日本語に設定する	sns.set(font='IPAexGothic')
文字列が部分文字列で終わる	s.endswith(sub)
ヒストグラムの色をアイボリーに変更する	plt.hist(データ列, color='ivory')
データフレームを百の位で四捨五入して、整数型にする	df.round(-2).astype(int)
ベクトルの列ごとの最大	np.max(aArray, axis=0)
二つの集合のいずれか一方だけの集合を使う	aSet.symmetric_difference(aSet2)
あらかじめ正規表現をケースを無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
ファイルから書き込みストリームを開いて]、fとする	f = open(filepath, mode='w')
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
Pandasで、エポック秒のデータフレームのcollからタイムスタンプに変換する	pd.to_datetime(df[col], unit='s', utc=True)
現在が何秒か知る	datetime.date.today().second
＜オプション＞ダイアモンドマーカーを描画する	marker = 'D'
ヒストグラムを描画して、その色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
濃い色としてリストとリストについての散布図を描画する	plt.plot(xdata, ydata, c='deep')
データフレームのカラムの中に存在する文字列の個数を求める	df[col].isin([value]).sum()
xが一桁の整数か確認する	-9 <= x <= 9
データフレームのリストカラムのNaNを最頻値で補う	df[aList].fillna(df[aList].mode().iloc[0])
グラフの用途をスライドに指定する	sns.set(context='talk')
ヒストグラムを描画して、色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
実数に実数を加える	x + y
赤いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列, データ列2, marker='D', markerfacecolor='r')
nとn2の排他的論理和	n ^ n2
データ列を折れ線グラフに描画して、印をポイント印にする	plt.plot(データ列, データ列2, marker='.')
リストとリストについて明るい色の折れ線グラフを描画してその線幅をnに設定する	plt.plot(xdata, ydata, linewidth=n, color='bright')
文字列を新しい文字列を用いて置き換える	s.replace(sub, newsub)
データフレームの列と列を消す	df.drop([column, column2], axis=1)
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列, データ列2, color='cadetblue')
要素∈集合	element in aSet
文字列を最初の部分文字列で二つに区切って、前半の文字列を見る	s.partition(sub)[0]
リストを等量で分割数nでビン分割する	pd.qcut(aList, n)
辞書でカウンタを更新する	aCounter.update(aDict)
データフレームから列を二つ選択する	df[[column, column2]]
日付データが日付データより先か確認する	aDate < aDate2
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
ひとつでもアルファベットが文字列内に含まれるかテストする	any(c.isalpha() for c in s)
８ビット整数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=np.int8)
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
２つの変数をタブで区切ってプリントする	print(value, value2, sep='\t')
数が負かどうか調べる	x < 0
データフレームのリストカラムのNaNを前の行の値で置換する	df[aList].fillna(method='ffill')
ヒストグラムを描画して、その色を珊瑚にセットする	plt.hist(データ列, color='coral')
リストとリストの黒い淡いグラフを描画する	plt.plot(xdata, ydata, linestyle='muted', color='k')
カラムの欠損値を最頻値で補う	ds.fillna(ds.mode().iloc[0])
数列をstartからendの範囲の度数分布図を用いて描画する	plt.hist(データ列, range=(start, end))
表データを列でグループ化してそれぞれのグループごとの件数を知る	df.groupby(column).size()
＜オプション＞シアンを用いる	color = 'cyan'
二つの列によってデータフレームを並べて、更新する	df.sort_values(by=['A', 'B'], inplace=True)
散布図に赤い星マーカーを使う	plt.plot(xdata, ydata, marker='*', c='r')
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列, データ列2, color='seagreen')
リストにリストを加える	aList.extend(aList2)
整数nのバイト長を見る	(n.bit_length() + 7) // 8
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t')
カラーコードの上三角マーカーで散布図を描画する	plt.plot(xdata, ydata, marker='^', c=rgb)
＜オプション＞色をミディアムターコイズに指定する	color = 'mediumturquoise'
ヒストグラムを描画して、その色を淡いピンク色に指定する	plt.hist(データ列, color='lightpink')
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
最後の部分文字列で文字列を二つに区切って、前半の文字列を使う	s.rpartition(sub)[0]
グラフに水平方向の破線をつける	plt.axhline(y=0, linestyle='dashed')
＜オプション＞ASCII文字に限定する	flag = re.ASCII
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
データフレームの値が未入力値か調べる	df.isna()
折れ線グラフを描画してその色をパールバイオレットレッドに設定する	plt.plot(データ列, データ列2, color='palevioletred')
ひとつでも非空白が文字列中に含まれる	any(not c.isspace() for c in s)
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
ヒストグラムを描画して、その色をグレーに設定する	plt.hist(データ列, color='gray')
ファイルを読み込みモードで開いて]、fとする	f = open(filepath, mode='r')
ガンマ関数	math.gamma(x)
今日が水曜日かどうか調べる	datetime.datetime.today().weekday() == 2
文字列中に日本語が使われているかどうか判定する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
文字列が文字列リストのいづれか	s in aStringList
データ列が何時か見る	ds.dt.hour
＜オプション＞ミディアムスレートブルー色を使う	color = 'mediumslateblue'
列と列の重複を消す	df.drop_duplicates(subset=[column, column2])
＜オプション＞ペルー色を使用する	color = 'peru'
スーパーセットか調べる	aSet.issuperset(aSet2)
配列とデータ列の青いパステル調のグラフを描画する	plt.plot(xdata, ydata, linestyle='pastel', color='b')
スタックの中に数値が含まれてるか調べる	element in deq
プロットの描画で暗いカラーパレットを使う	sns.set(pallete='dark')
カラムのユニークな値	df[col].unique()
文字列を最後から部分文字列で区切る	s.rsplit(sub)
文字列が全て空白文字かどうか調べる	s.isspace()
黒い左三角マーカーを散布図に使う	plt.plot(xdata, ydata, marker='<', c='k')
＜オプション＞ミディアムスプリンググリーンにグラフの色を設定する	color = 'mediumspringgreen'
セットを変更不能なセットに変換する	frozenset(aSet)
ミントクリームにヒストグラムの色をする	plt.hist(データ列, color='mintcream')
データフレームの列が文字列で始まらない行を選ぶ	df[not df[column].str.startswith(s)]
小さい順にタプルを並べ変える	sorted(aTuple, reverse=False)
リストとリストについての散布図を色差別ない色としてプロットする	plt.plot(xdata, ydata, c='colorblind')
数列と配列の散布図に黒色の四角マーカーを描く	plt.plot(xdata, ydata, marker='s', c='k')
散布図のマーカーの大きさをnに設定する	plt.scatter(xdata, ydata, s=n)
線グラフを描画して、その色をコーンフラワーブルーに設定する	plt.plot(データ列, データ列2, color='cornflowerblue')
カラーコードの左三角マーカーを用いて散布図を描画する	plt.plot(xdata, ydata, marker='<', c=rgb)
データフレームの未入力値をモードで補う	df.fillna(df.mode().iloc[0])
色差別ない色のマーカーで散布図をプロットする	plt.plot(xdata, ydata, c='colorblind')
折れ線グラフを描画して、その色をライトイエローに変更する	plt.plot(データ列, データ列2, color='lightyellow')
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
ヒストグラムを描画して、その色をドジャーブルーに指定する	plt.hist(データ列, color='dodgerblue')
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
整数を千の位で四捨五入する	round(x, -3)
＜オプション＞グラフの色をインディアンレッドに設定する	color = 'indianred'
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
データフレームの各グループごとの合計	df.groupby(column).sum()
ヒストグラムを描画して、その色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
折れ線グラフを描画して、その色をアイボリーに設定する	plt.plot(データ列, データ列2, color='ivory')
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
各列毎にデータフレームを集計して列の標準偏差を求める	df.groupby(column)[column2].std()
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
方程式の解	sympy.solve(e)
ヒストグラムを描画して、その色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
文字列を走査し、パターンに大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列, データ列2, color='darkslategray')
nわるn2	n / n2

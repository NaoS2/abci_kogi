文字列全体がパターンに大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
組を引数として展開して表示する	print(*aTuple)
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
全てのシートをエクセルデータファイルから読む	pd.read_excel(filename, sheet_name=None)
等差数列をベクトルに変換する	np.arange(開始値, 終了値, 等差)
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
option: 丸マーカーを使う	marker = 'o'
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
レモンシフォン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
文字列を最初の部分文字列で分けた場合の後半の文字列を使う	s.partition(sub)[-1]
図の縦横を設定する	plt.figure(figsize=(横幅, 高さ))
データフレームの中の未入力値がある行を消す	df.dropna()
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
折れ線グラフの色をカーキに指定する	plt.plot(データ列x, データ列y, color='khaki')
データ列を中央値でビン分割する	pd.qcut(ds, 2)
柱状グラフの上限下限を設定する	plt.hist(データ列, range=(start, end))
nが5で割り切れるかどうか調べる	n % 5 == 0
データフレームのカラムの尖度を求める	df[col].skew()
ヒストグラムの描き、正規化する	plt.hist(データ列, density=True)
変数を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
Pandasで、データ列のUNIX秒から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
ピアソン相関係数でデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='pearson')
青い破線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
実数を複素数に変換する	complex(x)
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
ヒストグラムの区間を設定する	plt.hist(データ列, range=(start, end))
データフレームの列の中にある文字列の合計をカウントする	df[col].isin([value]).sum()
大文字と小文字を逆にする	s.swapcase()
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
ベクトルの列ごとの平均	np.mean(aArray, axis=0)
文字列が片仮名か	('ァ' <= ch <= 'ン')
option: ヘッダをnamesに設定する	header = names
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
イテラブルを文字列リストに変換して、空白でつなげる	' '.join(map(str, iterable))
データ列の推移を赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
option: ブラック色を使う	color = 'black'
リストの要素をソートする	sorted(aList)
折れ線グラフを紺碧色を用いて描画する	plt.plot(データ列x, データ列y, color='azure')
option: グラフの色をスチールブルーにセットする	color = 'steelblue'
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
文字列を左寄せにする	s.ljust(文字列幅)
n割るn2の切り上げ	(n + n2 - 1) // n2
青色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
時間を用いる	import time
折れ線グラフをダークスラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategray')
棒グラフをチョコレート色として描画する	plt.bar(データ列x, データ列y, color='chocolate')
辞書に要素をキーとして加える	aDict[key] = element
数式を部分分数として展開する	sympy.apart(e)
逆順の両端キュー	reversed(deq)
option: オリベドラブ色を使う	color = 'olivedrab'
棒グラフをダークターコイズ色として描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
option: セパレータをタブにする	sep = '\t'
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
データフレームを列によって集約して、それぞれのグループ毎の分散を求める	df.groupby(column).var()
文字列はリストの要素かどうか調べる	element in aList
nからn2の範囲	range(n, n2)
option: 色をブルーバイオレットに設定する	color = 'blueviolet'
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
オブジェクトはリスト型か確認する	isinstance(obj, list)
パラメータがマイナス無限大に近づくときの数値の極限値を計算する	sympy.limit(e, z, -oo)
文字列を水色化する	f'\033[36m{value}\033[0m'
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
散布図をrgbの▼マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
線グラフを青い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
折れ線グラフの左三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
nの2乗を求める	n ** 2
Pandasで、フォーマットfmtを用いてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
option: 色をカデットブルーに設定する	color = 'cadetblue'
散布図を耐火レンガ色を用いて描画する	plt.scatter(データ列x, データ列y, color='firebrick')
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
部分文字列が文字列の開始位置からと終了位置の間に含まれるか調べる	s.find(sub, start, end) != -1
黒色で文字列をプリントする	print(f'\033[30m{value}\033[0m')
横棒グラフをラベンダーブラッシュ色を用いて描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
回帰木の重要度をグラフにする	plt.barh(X.columns, model.feature_importances_)
ダークグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
組の末尾の値	aTuple[-1]
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
縦棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
データフレームを列名リストによってソートする	df.sort_values(by=column)
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
データフレームを関数でグループ化して列挙する	[(name, group) for name, group in df.groupby(関数)]
option: ライトグリーン色を使う	color = 'lightseagreen'
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
文字列の開始位置番目からと終了位置までの間に部分文字列が含まれない	s.find(sub, start, end) == -1
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
リストとリストについての散布図に四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s')
濃い青にヒストグラムの色を変更する	plt.hist(データ列, color='darkblue')
折れ線グラフの色をミントクリームにセットする	plt.plot(データ列x, データ列y, color='mintcream')
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
本日が土曜日か	datetime.datetime.today().weekday() == 5
データフレームのカラムが何分か見る	df[col].dt.minute
カウンタを辞書で更新する	aCounter.update(aDict)
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
折れ線グラフのポイント印の色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
空白で文字列を分割し、、文字列リストにする	s.split()
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
データ列とリストについて散布図を描画し、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
列の重複コンビネーションを計算する	itertools.combinations_with_replacement(iterable, n)
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
線グラフをラベンダー色を用いて描画する	plt.plot(データ列x, データ列y, color='lavender')
左三角マーカーを用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
数で実数を割って切り捨てる	x // y
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
リストと数列について散布図を描画して、マーカーを三角にセットする	plt.plot(データ列x, データ列y, marker='^')
ユーザから入力される	input()
二つのデータフレームを列'A'と列'B'をキーとして外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
折れ線グラフをアリスブルー色として描画する	plt.plot(データ列x, データ列y, color='aliceblue')
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
文字列中に部分文字列があるか調べる	sub in s
整数nを十六進表現に変換する	hex(n)
データ列の中にあるの合計を数える	ds.isin([value]).sum()
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームのカラムの欠損値を最大値に変更する	df[col].fillna(df[col].max())
実数を切り下げる	math.floor(x)
線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
縦棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
リネンにヒストグラムの色を設定する	plt.hist(データ列, color='linen')
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
リストとイテラブルについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
変数を水色で表示する	print(f'\033[36m{value}\033[0m')
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
ファイルが存在するか調べる	os.path.exists(filepath)
データフレームから指定された４列だけ抽出する	df[[column, column2, column3, column4]]
要素がセットの要素か	element in aSet
ヒストグラムの色をシルバーに指定する	plt.hist(データ列, color='silver')
折れ線グラフに黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
集合が空集合でないか調べる	len(aSet) != 0
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
散布図に赤い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
文字列を置き換える	s.replace(sub, newsub)
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
文字列は印字できるかどうか	s.isprintable()
実線に折れ線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='solid')
文字列中の部分文字列を新しい文字列に置換する	s.replace(sub, newsub)
ダークターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
ヒストグラムを暗い赤色として描画する	plt.hist(データ列, color='darkred')
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
文字列から部分文字列を全て除去する	s.replace(sub, '')
折れ線グラフに三角マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
列を1000の位で丸める	ds.round(-3)
箱ひげ図を横に並べて描画する	plt.boxplot([データ列, データ列])
データフレームの中に存在する文字列の合計を数える	df.isin([value]).sum()
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
棒グラフを赤色として描画する	plt.bar(データ列x, データ列y, color='red')
両端キュー中の要素の数を数える	deq.count(element)
option: ゴールデンロッド色を使う	color = 'goldenrod'
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
文字列から部分文字列を除去する	s.replace(sub, '')
option: ブラウンを使う	color = 'brown'
nがn2未満またはn3以上か調べる	n < n2 or n >= n3
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
データフレームの内で、列の重複を調べる	df.duplicated(subset=column)
データフレームの末尾n行を選択する	df.tail(n)
最適な位置に凡例を表示する	plt.legend(loc='best')
棒グラフをコーラル色として描画する	plt.bar(データ列x, データ列y, color='coral')
option: ドジャーブルーにグラフの色をする	color = 'dodgerblue'
データをキューの先頭から取り除く	deq.popleft()
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
横棒グラフを白色として描画する	plt.barh(データ列x, データ列y, color='white')
データフレームのカラムのどの値が最も現れるか調べる	df[col].mode()
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
ひとつでも非大文字が文字列中に含まれる	any(not c.isupper() for c in s)
変数をシアンでプリントする	print(f'\033[36m{value}\033[0m')
タブ区切りのファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t')
全ての十六進数字	string.hexdigits
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
出力ストリームに文字列を書き込む	f.write(s)
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
安全に文字列のサフィックスから部分文字列を取り除く	s.removesuffix(sub)
文字列リストを一つにしてひとつの文字列にする	''.join(aStringList)
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
ヒストグラムをパレットトルコイズ色として描画する	plt.hist(データ列, color='paleturquoise')
文字列でフォーマットして日付データを文字列にする	"aDate.strftime(""%d/%m/%y"")"
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
データフレームのヒストグラムを縦横に並べてプロットする	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
画面にグラフの用途を設定する	sns.set(context='notebook')
データフレームのリスト列の中にあるの合計を数える	df[aList].isin([value]).sum()
散布を可視化する	plt.scatter(データ列x, データ列y)
破線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
マップのキーに対応した値	aDict.get(key)
最大最小から配列を作成する	np.linspace(最小値, 最大値, 要素数)
'A'列を用いてデータフレームをソートする	df.sort_values(by='A')
まとめてデータフレームの値をValueMapで置き換える	df.replace(ValueMap)
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
rgbのポイントマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
ミディアムターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
線形モデルの回帰変数	model.coef_
文字列の左端から部分文字列を取り除く	s.lstrip(sub)
折れ線グラフをライトブルー色として描画する	plt.plot(データ列x, データ列y, color='lightblue')
nが1、もしくは2もしくは3に等しい	n == 1 or n == 2 or n == 3
棒グラフをシルバー色を用いて描画する	plt.bar(データ列x, データ列y, color='silver')
データフレームのリストカラムのモード	df[aList].mode()
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
データフレームのグループ化した散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ヘッダを指定せずTSVファイルを読む	pd.read_csv(filename, header=None)
マッピングのキーの値	aDict[key]
ミディアムオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
option: グラフの色をダークバイオレットに指定する	color = 'darkviolet'
行列と同じ大きさの空配列を作成する	np.empty_like(aArray)
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
リストとリストについての散布図にrgbの▼マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
文字列リストを連結して一つの文字列にする	''.join(map(str, iterable))
データフレームの各グループごとの個数	df.groupby(column).count()
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
改行なしに二つの文字列をプリントする	print(value, value2, end='')
データフレームの中の未入力値の合計を数える	df.isna().sum()
散布図をビスク色として描画する	plt.scatter(データ列x, データ列y, color='bisque')
散布図の▼マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ミディアムオーキッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
Pandasで、dateStringをPandasの日付型に変換する	pd.to_datetime(dateString)
データフレームのリストカラムを10の位で四捨五入して整数型にする	df[aList].round(-1).astype(int)
option: ゴーストホワイトを使う	color = 'ghostwhite'
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
直前の値でデータフレームのカラムの欠損値を補う	df[col].fillna(method='ffill')
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
データフレームのリストカラムの未入力値を平均値で埋める	df[aList].fillna(df[aList].mean())
データフレームの列がxでないデータを消す	df[df[column] == x]
線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
散布図の▲マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
深紅色でヒストグラムを描画する	plt.hist(データ列, color='crimson')
文字列リストを連結し、ひとつの文字列にする	''.join(aStringList)
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
ミディアムバイオレットレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
データフレームの中で列の重複を調べる	df.duplicated(subset=column)
散布図に丸印を使う	plt.scatter(データ列x, データ列y, marker='o')
折れ線グラフの色をイエローグリーンに変更する	plt.plot(データ列x, データ列y, color='yellowgreen')
円周率	math.pi
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
横棒グラフをライトグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
カウンタから列をカウントして減らす	aCounter.subtract(iterable)
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
eの乗数	math.exp(x)
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
行列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
オブジェクトがn回続くイテラブルを求める	itertools.repeat(element, n)
両端キュー中の値のインデックスを見る	deq.index(element)
ピアソンの相関係数を計算する	scipy.stats.pearsonr(データ列, データ列2)
グラフのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
データフレームの列の欠損値を直後の値に変更する	df[col].fillna(method='bfill')
x軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
option: 色をライトスレイグレーに設定する	color = 'lightslategrey'
option: トマトに色を設定する	color = 'tomato'
ひとつでも非アルファベットが文字列中に含まれるか調べる	any(not c.isalpha() for c in s)
書き込み用にファイルをSJISでオープンする]	open(filepath, mode='w', encoding='shift_jis')
xを整数にする	int(x)
整数nの八進文字列	oct(n)[2:]
文字列の中の複数行対応としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
option: 黄色にグラフの色をセットする	color = 'yellow'
ヒストグラムをアイボリー色を用いて描画する	plt.hist(データ列, color='ivory')
線形回帰モデルの切片を使う	model.intercept_
文字列中の部分文字列の登場	s.count(sub)
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
option: マーカーの大きさを指定する	markersize = 2.0
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
データフレームのリスト列の中央値	df[aList].median()
部分文字列が文字列の終了位置より前に含まれない	s.find(sub, 0, end) == -1
ビン数nでリストを分割する	pd.cut(aList, n)
ファイル名がJSONファイルか調べる	filename.endswith('.json')
折れ線グラフの色をグリーンイエローに指定する	plt.plot(データ列x, データ列y, color='greenyellow')
ベクトルの合計	np.sum(aArray)
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
変数を白色で出力する	print(f'\033[37m{value}\033[0m')
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
テンプレートをargsを引数として文字列整形する	formatText.format(*args)
リストの折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
ラベンダー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
散布図にrgbの大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
リストの推移を色付きの点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
データフレームで、カラムと列の重複を調べる	df.duplicated(subset=[column, column2])
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
インディゴ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
バイナリ書き込みモードでファイルパスを開く]	open(filepath, mode='wb')
option: 色をオレンジに指定する	color = 'orange'
データフレームのリスト列の欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
文字列を空白で区切って、数列にする	map(int, s.split())
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
散布図の印を△にする	plt.scatter(データ列x, データ列y, marker='^')
データフレームから重複を削除する	df.drop_duplicates()
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
option: クロスマーカーを描画する	marker = 'x'
option: 色をマルーンに設定する	color = 'maroon'
直前の値でデータフレームの列の未入力値を埋める	df[col].fillna(method='ffill')
配列の形状を求める	aArray.shape
縦棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
折れ線グラフの印を右三角印にする	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフの▽マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
横棒グラフをカーキ色を使って描画する	plt.barh(データ列x, データ列y, color='khaki')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
日付データが何年か知る	aDate.year
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
空のデックを作る	collections.deque()
書き込み用にファイルパスをオープンする]	open(filepath, mode='w')
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
option: スカイブルーを用いる	color = 'skyblue'
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
赤いグリッド線を引く	plt.grid(color='r')
実線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
散布図にポイント印を用いる	plt.scatter(データ列x, データ列y, marker='.')
ふたつの集合がセットと交わりを持たないか調べる	aSet.isdisjoint(aSet2)
カウンタからゼロ出現回数を削除する	+aCounter
ペアリストpairsからカウンタを準備する	collections.Counter(dict(pairs))
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
option: コーラルを使用する	color = 'coral'
散布図のマーカーをクロスにする	plt.scatter(データ列x, データ列y, marker='x')
ゼロ埋めされた整数型の行列	np.zeros(要素数, dtype=np.int)
データフレームのカラムを100の位で四捨五入して整数型にする	df[col].round(-2).astype(int)
線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
ヒストグラムの色をディムグレーにセットする	plt.hist(データ列, color='dimgray')
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
折れ線グラフの下三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
リストと配列についての散布図に文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
データフレームの列を折れ線プロットで可視化する	plt.plot(df[column], df[column])
ガウス過程回帰モデルを用意する	model = sklearn.gaussian_process.GaussianProcessRegressor()
ピアソンでデータフレームの列と列の相関行列を計算する	df[[column, column2]].corr(method='pearson')
option: 先頭のカラムをインデックスに設定する	index_col = 0
グラフを正方形にする	plt.axis('equals')
タプルをミュータブルにする	list(aTuple)
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
データフレームを各列毎にグループ化して、列の平均値を計算する	df.groupby(column)[column2].mean()
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ファイルからフォルダ名を求める	os.path.dirname(filepath)
データ列の推移を半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
半透明の点線でラインを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
データフレームを表示するとき、表示される最大列数を変更する	pd.set_option('display.max_columns', n)
option: モカシンにグラフの色を指定する	color = 'moccasin'
スタッキングとして回帰分析を行う	sklearn.ensemble.StackingRegressor()
データフレームのリストカラムの値をValueMapで一度に置き換える	df[aList].replace(ValueMap)
大バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
大きさnでリストと数列の散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
逆順のスタック	reversed(deq)
行列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
リストをn個にビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ヒストグラムを点線としてプロットする	plt.hist(データ列, linestyle='dotted')
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
配列とデータ列についての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
データ列の日	ds.dt.day
オブジェクトがタプルクラスのインスタンス	isinstance(obj, tuple)
option: 色をミディアムシアグリーンに指定する	color = 'mediumseagreen'
seabornのデフォルト見栄えを適用する	sns.set()
データフレームを二つの列の値でグループ化し要約統計量を求める	df.groupby(['A', 'B']).describe()
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
データフレームを各列毎にグループ分けし、列の合計を求める	df.groupby(column)[column2].sum()
インディゴにヒストグラムの色を設定する	plt.hist(データ列, color='indigo')
ふたつの集合は集合と交わりを持たないか	aSet.isdisjoint(aSet2)
上限から下限までの範囲で度数分布図を描画する	plt.hist(データ列, range=(start, end))
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
に箱ひげ図を用いてデータフレームをグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
スクリプトファイルのパスを使う	os.path.abspath(__file__)
配列の形を求める	aArray.shape
線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
降順に複数の列を用いてでデータフレームをソートする	df.sort_values(by=column, ascending=False)
リストと数列について散布図を描画して、マーカーを丸にセットする	plt.plot(データ列x, データ列y, marker='o')
実数を実数で割った剰余	math.remainder(x, x2)
option: 文字コードをUTF8に変更する	encoding = 'utf-8'
実数が正の数か調べる	x > 0
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
文字列内に数字が含まれる	any(c.isdigit() for c in s)
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
再帰が何回までできるかを知る	sys.getrecursionlimit()
チョコレート色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
option: サンディーブラウンを使用する	color = 'sandybrown'
縦棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
文字列を最後の部分文字列で分けた場合の先頭の文字列を使う	s.rpartition(sub)[0]
データフレームのリスト列のNaNを最大値に変更する	df[aList].fillna(df[aList].max())
配列を中央値でビニングする	pd.qcut(aArray, 2)
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
配列をビン数nとして分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
オブジェクトのバイトサイズ	sys.getsizeof(obj)
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
棒グラフをダークスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
ベクトルの要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームのリストカラムのNaNを平均値で埋める	df[aList].fillna(df[aList].mean())
文字列を下線付きにする	f'\033[4m{value}\033[0m'
整数nの八進文字列を見る	oct(n)[2:]
データフレームを丸めて、整数にする	df.round().astype(int)
イテラブルから最大長nの双方向キューを作る	collections.deque(iterable, maxlen=n)
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
ヒストグラムの色をロージーブラウンにする	plt.hist(データ列, color='rosybrown')
データフレームのstart行目からend行目まで取り出す	df[start:end]
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
BOM付きとしてファイルをオープンする]	open(filepath, encoding='utf_8_sig')
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
データフレームを二つの列によってによって破壊的に並べ直す	df.sort_values(by=['A', 'B'], inplace=True)
nが一桁の整数	0 <= n <= 9
線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
最大値でデータ列の欠損値を置き換える	ds.fillna(ds.max())
nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
リストをビン数nとしてビン分割する	pd.cut(aList, n)
option: ダークグリーン色を使う	color = 'darkgreen'
カウンタの正の数だけ残す	+aCounter
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
線グラフの色をインディアンレッドにセットする	plt.plot(データ列x, データ列y, color='indianred')
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
option: ホットピンクを使う	color = 'hotpink'
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
行列から重複を除いた行列を作る	np.unique(aArray)
追加できるように既存のファイルパスをBOM付きでオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
変数をスワップする	x, y = y, x
ベクトルの値	aArray[行番号, 列番号]
文字列が部分文字列で終わるか	s.endswith(sub)
配列とデータ列についての散布図に黒い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
棒グラフをダークシアン色として描画する	plt.bar(データ列x, データ列y, color='darkcyan')
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
散布図をブラウン色で描画する	plt.scatter(データ列x, データ列y, color='brown')
option: コーラル色を使う	color = 'coral'
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
JSON形式の文字列を読み込む	json.loads(jsonString)
n2がnより大きく、かつ、n3より小さいか	n < n2 and n2 < n3
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
縦棒グラフをカデットブルー色を使って描画する	plt.bar(データ列x, データ列y, color='cadetblue')
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
option: ブルーバイオレット色を使用する	color = 'blueviolet'
度数分布図を描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
タイムスタンプデータをn日前に戻す	aDatetime - datetime.timedelta(days=n)
イテラブルをイミュータブルな集合にする	frozenset(iterable)
平均値でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(df[aList].mean())
option: フォントの色をミディアムブルーに指定する	color = 'mediumblue'
ヒストグラムをライトコーラル色を用いて描画する	plt.hist(データ列, color='lightcoral')
データフレームを十の位で四捨五入する	df.round(-1)
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
行列の累積和	np.cumsum(aArray)
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
一点鎖線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
棒グラフをレベッカパープル色として描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
集合から任意の要素を取り出す	aSet.pop()
ふたつの集合は集合と互いに素か	aSet.isdisjoint(aSet2)
文字列のn番目	s[n]
文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: 先頭の行をカラムの名前に設定する	header = 0
空の勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
nが3で割り切れるか確認する	n % 3 == 0
追加モードでファイルパスをオープンする]	open(filepath, mode='a')
線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
option: パパイヤウィップにグラフの色を設定する	color = 'papayawhip'
ミスティローズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
日付データからn秒を減算する	aDate - datetime.timedelta(seconds=n)
データフレームの列を各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームのリストカラムの中にある文字列の合計をカウントする	df[aList].isin([value]).sum()
部分文字列	sub in s
日付データが火曜日	aDate.weekday() == 1
ヒストグラムをスカイブルー色として描画する	plt.hist(データ列, color='skyblue')
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
ヒストグラムをインディゴ色として描画する	plt.hist(データ列, color='indigo')
データ列の中に文字列があるか調べる	ds.isin([value])
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフをダークオレンジ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorange')
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
option: グラフの色をライトブルーにセットする	color = 'lightblue'
option: ミスティローズを使う	color = 'mistyrose'
黒いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='k')
組をn回、結合する	aTuple * n
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
折れ線グラフの星マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
文字列の先頭を使う	s[0]
データ列をビン数nでビン分割する	pd.cut(ds, n)
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
配列とリストの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
xの小数点以下'3'桁までを出力する	print(':.3f'.format(x))
ヒストグラムの色をミッドナイトブルーに変更する	plt.hist(データ列, color='midnightblue')
縦棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
グラフをプレゼン用に設定する	sns.set(context='talk')
nがn2で割り切れないか確認する	n % n2 != 0
散布図をポイントマーカーで描画する	plt.scatter(データ列x, データ列y, marker='.')
赤い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
option: グラフの色をダークオレンジに変更する	color = 'darkorange'
オブジェクトがある型のインスタンスかどうか調べる	isinstance(obj, クラス)
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
ゴールド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
データフレームの75パーセンタイル	df.quantile(0.75)
最大値・最小値の範囲で一様な疑似乱数を求める	random.uniform(最小値, 最大値)
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgray')
線形モデルの切片	model.intercept_
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
縦棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
実数以下の最大の整数	math.floor(x)
リストが空でないか調べる	len(aList) != 0
リストをy座標配列をx座標として、大きさnの散布図をプロットする	plt.scatter(データ列x, データ列y, s=n)
キーがマップに存在するか	key in aDict
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
ダークグレー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
表データのデータ型一覧	df.dtypes
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
浮動小数点数がNaNか調べる	math.isnan(x)
折れ線グラフをシスル色を用いて描画する	plt.plot(データ列x, データ列y, color='thistle')
パウダーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
データ列の各データ値の出現数を求める	ds.value_counts()
データフレームを'A'列によってによって大きい順に整列する	df.sort_values(by='A', ascending=False)
赤色で数値を表示する	print(f'\033[31m{value}\033[0m')
option: フォントの色をダークサーモンに設定する	color = 'darksalmon'
option: 印を丸に変更する	marker = 'o'
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
縦棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
イテラブルを集合に変換する	set(iterable)
データフレームのリストで指定された列のヒートマップを描画する	sns.heatmap(df[aList].corr())
折れ線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
バイナリ書き込み用にファイルをオープンする]	open(filepath, mode='wb')
ヒストグラムをオーキッド色を用いて描画する	plt.hist(データ列, color='orchid')
0からnまでのスライス	slice(n)
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
プログラムの実行を強制的に終了する	sys.exit()
整数nを16進数文字列にする	hex(n)[2:]
散布図をrgbの下三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リスト内の要素は少なくともひとつ真か調べる	any(aList)
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
ヒストグラムをディープスカイブルー色として描画する	plt.hist(データ列, color='deepskyblue')
十六進数字を全部見る	string.hexdigits
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
タプルから最後に追加した項目を取り出す	aDict.popitem()
データフレームを２つの列で整列し、、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
縦棒グラフをアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='aquamarine')
リストと配列について散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
散布図をブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='brown')
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
aListn番目から値をポップする	aList.pop(n)
データ列の正規分布を判定する	scipy.stats.shapiro(データ列)
二つのオブジェクトが同一	obj is obj2
ライトスチールブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
本日が何年か知る	datetime.datetime.today().year
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
線グラフの色をチョコレートに変更する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームのカラムのNaNを直後の値で埋める	df[col].fillna(method='bfill')
アクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
タプルの値に要素が含まれていない	element not in aDict.values()
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
文字列の最初から部分文字列を除去する	s.lstrip(sub)
option: コーンフラワーブルーを使用する	color = 'cornflowerblue'
データフレームのインデックスの一覧を使う	df.index
横棒グラフをコーラル色として描画する	plt.barh(データ列x, データ列y, color='coral')
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
日付時刻データが金曜日か	aDatetime.weekday() == 4
ビン数nでデータ列をビン分割する	pd.cut(ds, n)
ガウス過程を用いて回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
正則化付き線形回帰分析を行う	model = sklearn.linear_model.ElasticNet()
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフに左三角印を使う	plt.plot(データ列x, データ列y, marker='<')
散布図の▲マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: 改行コードをWindowsに設定する	newline = '\r\n'
グラフの凡例の場所を(x,y)に変更する	plt.legend(loc=(x, y))
nからn2を引く	n - n2
option: シルバーにグラフの色を指定する	color = 'silver'
データフレームの未入力値を中央値に設定する	df.fillna(df.median())
nから無限に数え上げるする	itertools.count(start=n)
rgbの大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
異なるカラムをキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
上位集合か調べる	aSet.issuperset(aSet2)
文字列の開始位置より後に部分文字列が含まれないか確認する	s.find(sub, start) == -1
棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
文字列はタプルに含まれるか調べる	element in aTuple
データフレームを'A'列の値によってグループ化する	df.groupby('A')
リストとリストの散布図をプロットし、マーカーを大バツに変更する	plt.plot(データ列x, データ列y, marker='X')
ダークシアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
文字列を空白で区切って、文字列リストに変換する	s.split()
リストとリストの散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
Pandasでエポック秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
nをn2で割った剰余	n % n2
0で全要素を初期化した行列	np.zeros(要素数)
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
配列とリストについて散布図を描いて、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
外れ値に強い回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
ヒストグラムの色をブラウンに設定する	plt.hist(データ列, color='brown')
現在のモジュール	sys.modules[__name__]
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
赤い丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフの色をライトサーモンにセットする	plt.plot(データ列x, データ列y, color='lightsalmon')
リストと数列の散布図に赤い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
折れ線グラフの△マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
データフレームを小数点以下n桁で丸める	df.round(n)
折れ線グラフを紺色を用いて描画する	plt.plot(データ列x, データ列y, color='darkblue')
浮動小数点数のn乗を計算する	x ** n
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
タプルをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
Pandasで、Pandasの日付型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
データフレームの列の名前の一覧を使う	df.columns
データフレームの平均	df.mean()
縦棒グラフをやわらかい青色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
値を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
option: ライトコーラルを用いる	color = 'lightcoral'
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
列の各値の出現数	ds.value_counts()
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
数値の数値を算出する	float(e)
最大長を指定して、キュー	collections.deque(maxlen=n)
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ヒストグラムの色をラベンダーブラッシュにセットする	plt.hist(データ列, color='lavenderblush')
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: グレーを使用する	color = 'gray'
ドジャーブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
既存の行列を元に全要素が1の配列を作る	np.ones_like(aArray)
オールドレース色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
数値をマゼンタでプリントできる文字列にする	f'\033[35m{value}\033[0m'
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
最大行数を変更する	pd.set_option('display.max_rows', n)
データフレームのリストカラムの値は欠損値	df[aList].isna()
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
option: 印を四角に変更する	marker = 's'
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
数式を微分する	sympy.diff(e)
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
縦棒グラフをライトゴールドロディイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
リストからn個サンプリングする	random.sample(iterable, k=n)
データ列の変化を赤い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
散布図に▲マーカーを用いる	plt.scatter(データ列x, データ列y, marker='^')
タプルをインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
横棒グラフを暗い赤色として描画する	plt.barh(データ列x, データ列y, color='darkred')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データ列を等量でn個にビニングする	pd.qcut(ds, n)
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
シーケンスを多重集合にする	collections.Counter(iterable)
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
リストの文字列が最初に見つかる位置	aList.index(element)
データフレームの中のカラムをビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
カウンタの項目をひとつ増やす	aCounter[element] += 1
データ列とリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
データ列の比率を円グラフで可視化する	plt.pie(データ列, startangle=90)
データ列とイテラブルについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
実数の逆正接	math.atan(x)
線グラフの色をホワイトスモークにセットする	plt.plot(データ列x, データ列y, color='whitesmoke')
プロットの色を指定する	sns.set(pallete=パレット名)
カウンタの項目を列挙する	aCounter.keys()
本日の年	datetime.datetime.today().year
タイムスタンプデータにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
アヤメのデータセットをデータフレームとしてロードする	sns.load_dataset('iris')
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
データフレームのそれぞれのグループの分散	df.groupby(column).var()
文字列の先頭	s[0]
ファイルパスをオープンして]追加ストリームを見る	open(filepath, mode='a')
データフレームを列でソートして、更新する	df.sort_values(by=column, inplace=True)
option: 複数行に対応する	flag = re.MULTILINE
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
option: ８ビット整数型を使う	dtype = np.int8
二進数文字列をバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データ列のpercentパーセンタイル	ds.quantile(percent/100)
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
文字列の中でケースを無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
線グラフの色をディープスカイブルーに変更する	plt.plot(データ列x, データ列y, color='deepskyblue')
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
濃いシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
青いグリッド線を引く	plt.grid(color='b')
データ列の中央値を計算する	ds.median()
色調をパステル調にする	sns.set(pallete='pastel')
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
option: 論理値型を使う	dtype = np.int32
データフレームの欠損値を後の行の値に指定する	df.fillna(method='bfill')
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
文字列全体をASCII限定としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
縦棒グラフをオリーブ色を用いて描画する	plt.bar(データ列x, データ列y, color='olive')
散布図をrgbの星マーカーとして描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
option: マーカーを右三角に変える	marker = '>'
データフレームのカラムのどの値が頻出か見る	df[col].mode()
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ヒストグラムの色をカデットブルーにする	plt.hist(データ列, color='cadetblue')
データフレームは正規分布からどの程度歪んでいるか見る	df.kurt()
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
散布図を淡い茶色色として描画する	plt.scatter(データ列x, データ列y, color='tan')
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
JSONファイルのファイル入力を読み込んでdataとする	data = json.load(fin)
ヒストグラムの色をマゼンタに変更する	plt.hist(データ列, color='magenta')
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
文字列の両端から空白を取り除く	s.strip()
データフレームの指定された三つの列のみ抽出する	df[[column, column2, column3]]
インディアンレッドにヒストグラムの色を設定する	plt.hist(データ列, color='indianred')
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
option: フォントの色を小麦色に設定する	color = 'wheat'
散布図を赤い三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='^', c='r')
rgbの丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフの右三角印を赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
n足すn2	n + n2
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
ハニーデュー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
変数が無限大に近づく場合数値の極限値を求める	sympy.limit(e, z, oo)
数列の推移を色付きの破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
最大最小値としてスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
無限にnからカウントアップする	itertools.count(start=n)
文字列の終了位置以前に部分文字列が含まれるか	s.find(sub, 0, end) != -1
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
データフレームの列がxでない行を消す	df[df[column] == x]
出現頻度を可視化する	plt.hist(データ列)
option: 右三角マーカーを使う	marker = '>'
ファイルがない	not os.path.exists(filepath)
散布図に赤い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
リストからオブジェクトを取り除く	aList.remove(element)
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
BOM付きでファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
0からnの範囲	range(n)
両端キューをタプルに変換する	tuple(deq)
文字列が全て英数字か調べる	s.isalnum()
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
行列の逆行列	np.linalg.inv(aArray)
nが一桁の整数か調べる	0 <= n <= 9
MSDを行う	model = sklearn.manifold.MSD(n_components=n)
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
散布図を赤い下三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
データ列とリストについての散布図にクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
データ列を箱髭図で可視化する	plt.boxplot(データ列)
二つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
データフレームを列でグループ化し、基本統計量を計算する	df.groupby(column).describe()
データフレームの列の中に文字列と文字列があるか調べる	df[col].isin([value, value2])
option: インディゴ色を使う	color = 'indigo'
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
組をカンマ区切りで表示する	print(*aTuple, sep=',')
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
オブジェクトがプロパティを持つか	hasattr(obj, プロパティ名)
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
predicateFuncが真になる列の要素	itertools.takewhile(predicateFunc, iterable)
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
書式をargsを引数としてフォーマットする	formatText.format(*args)
データ列が何日か確認する	ds.dt.day
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
データ列の折れ線グラフをポイント印を用いて描画する	plt.plot(データ列x, データ列y, marker='.')
リストの末尾から要素を取り除く	aList.pop()
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
データフレームを各列と列の組み合わせ毎にグループ化して最小値を求める	df.groupby([column, column2], as_index=False).min()
双方向キュー中の要素の出現数を数える	deq.count(element)
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
全ての空白文字	string.whitespace
箱ひげ図を描画し、、平均を追加する	plt.boxplot(データ列, showmeans=True)
データフレームのインデックス名をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
タイムスタンプデータの時間数を使う	aDatetime.hour
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
文字列を緑色化する	f'\033[32m{value}\033[0m'
集合の濃度	len(aSet)
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
行列の列ごとの最小値を求める	np.min(aArray, axis=0)
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
eの実数乗	math.exp(x)
積み上げ棒プロットを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
日付時刻データが金曜日かどうか調べる	aDatetime.weekday() == 4
nが負の数	n < 0
要素∉集合	element not in aSet
nというシートをエクセルデータファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
文字列の開始位置以降に部分文字列が含まれるかどうか調べる	s.find(sub, start) != -1
option: フォントの色をミッドナイトブルーに設定する	color = 'midnightblue'
option: グラフのラインスタイルを一点鎖線に変更する	linestyle = 'dashbot'
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
ヒストグラムの範囲を指定する	plt.hist(データ列, range=(start, end))
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
二つの文字列を文字列で区切って表示する	print(value, value2, sep=s)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
ロイヤルブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.IGNORECASE)
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列x, データ列y, color='mediumorchid')
ミスティローズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
文字列を空白で分割して、文字列リストに変換する	s.split()
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
マップから項目名の値	aDict.get(key)
文字列はタプルに含まれない	element not in aTuple
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
データフレームのカラムの日にち	df[col].dt.day
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
データフレームのカラムの未入力値を直前の値に増やす	df[col].fillna(method='ffill')
辞書から項目名の値か、もしくは要素を得る	aDict.get(key, element)
データ列を横棒プロットにする	plt.barh(ラベル列, データ列)
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
スクリプトファイルと同じディレクトリのファイルパスのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
ライトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
標準入力	sys.stdin
線グラフを色付きの実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図の印をクロスにする	plt.scatter(データ列x, データ列y, marker='x')
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
列によってデータフレームを並べて、新しいインデックスを加える	df.sort_values(columns).reset_index()
２つの文字列は等しくないかどうか調べる	s != s2
ヒストグラムにカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
折れ線グラフのマーカーを左三角印にする	plt.plot(データ列x, データ列y, marker='<')
棒グラフをデピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='deeppink')
実数の3乗	x ** 3
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
option: ミスティローズ色を使う	color = 'mistyrose'
データフレームの列の文字列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
書き込みできるようにEUCを用いてファイルをオープンする]	open(filepath, mode='w', encoding='euc_jp')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
anemptystring	''
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
option: レベッカパープル色を使用する	color = 'rebeccapurple'
既存のベクトルを元に全要素が0の配列を作成する	np.zeros_like(aArray)
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
棒グラフをグレー色を使って描画する	plt.bar(データ列x, データ列y, color='grey')
ポイント印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムの色をベージュにセットする	plt.hist(データ列, color='beige')
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
option: 印の大きさを変える	markersize = 2.0
option: イエローグリーン色を使う	color = 'yellowgreen'
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
データフレームのリストカラムの値は欠損値か調べる	df[aList].isna()
データフレームを破壊的に小さい順に複数の列でソートする	df.sort_values(by=column, ascending=True, inplace=True)
数列の移り変わりを半透明の一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
赤い破線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列中の片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
部分文字列を範囲を指定して探す	s.find(sub, start, end)
折れ線グラフの▲マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
配列とリストについて散布図を描画し、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
文字列を赤色化する	f'\033[31m{value}\033[0m'
上限nの双方向キューを列から作成する	collections.deque(iterable, maxlen=n)
データフレームのカラムを百の位で丸めて、整数にする	df[col].round(-2).astype(int)
グラフで利用可能な色名の一覧を見る	matplotlib.colors.cnames
option: グレーにグラフの色を変更する	color = 'grey'
データフレームのカラムの中にが存在するか調べる	df[col].isin([value])
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
組内の要素が少なくともひとつ真か確認する	any(aTuple)
縦棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
黒い四角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームを列の値によって集約して、平均値を求める	df.groupby(column).mean()
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
option: バイナリモードに設定する	mode = 'rb'
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
昇順にデータフレームを複数の列で整列する	df.sort_values(by=column, ascending=True)
データフレームのインデックス名をまとめてnameからname2に変更する	df.rename(index={name: name2})
オブジェクトのイテレータ	iter(obj)
データフレームのカラムは正規分布からどの程度、歪んでいるか確認する	df[col].kurt()
2つの文字列を順にプリントする	print(value, value2)
データフレームのカラムを100の位で丸める	df[col].round(-2)
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
文字列の終了位置以前に部分文字列が存在するかどうか調べる	s.find(sub, 0, end) != -1
option: トマトを使う	color = 'tomato'
日付時刻データからn時間を減らす	aDatetime - datetime.timedelta(hours=n)
タイムスタンプデータを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
乱数生成系列をnで固定する	random.seed(n)
文字列を最後の部分文字列で分けたときの後半の文字列を使う	s.rpartition(sub)[-1]
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
部分文字列で文字列を分割したときの後半の文字列	s.partition(sub)[-1]
option: 箱ひげ図を横方向にする	vert = False
option: 暗い赤色を使う	color = 'darkred'
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
nまでの奇整数列	list(range(1, n, 2))
option: 濃い青色を使う	color = 'darkblue'
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
切片なしの線形モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
縦棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
棒グラフを紺色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームのリスト列のどの値が頻出か調べる	df[aList].mode()
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
クラス分類をサポートベクターマシンとして行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
nが5で割り切れるか調べる	n % 5 == 0
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフを赤色を用いて描画する	plt.plot(データ列x, データ列y, color='red')
ラインを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
文字列の左側は部分文字列か	s.startswith(sub)
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
分子n分母mの分数を作成する	fractions.Fraction(numerator=n, denominator=m)
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
ファイルをUTF8として書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: フォントの色をロイヤルブルーに設定する	color = 'royalblue'
グラフで使える色名の一覧	matplotlib.colors.cnames
データフレームの最初のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
カウンタから辞書を引く	aCounter.subtract(aDict)
折れ線グラフをナバホホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='navajowhite')
option: フォントの色をブルーバイオレットに指定する	color = 'blueviolet'
プロットのパレットをパステル調にする	sns.set(pallete='pastel')
散布図にバツマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
散布図に黒いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
option: ライトスチールブルーにグラフの色を設定する	color = 'lightsteelblue'
整数nがタプルのいづれかか	n in aTuple
折れ線グラフの下三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
プロットにグリッド線を入れる	plt.grid(True)
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
実数の絶対値	math.fabs(x)
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
最大最小から行列	np.linspace(最小値, 最大値, 要素数)
折れ線グラフをダークオリーブグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データフレームを各列毎にグループ化して列の平均値を求める	df.groupby(column)[column2].mean()
文字列が全て数字か調べる	s.isdigit()
折れ線グラフの色をミディアムターコイズに変更する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: フォントの色をイエローグリーンに指定する	color = 'yellowgreen'
棒グラフをミディアムスレートブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データ列のヒストグラムをプロットする	plt.hist(データ列)
カデットブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
option: フォントの色をホットピンクに指定する	color = 'hotpink'
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
全要素を初期値で初期化したベクトル	np.full(要素数, 初期値, dtype=np.int)
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
リストの最後を使う	aList[-1]
オプションで、標準エラーに出力する	file = sys.stderr
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
エラーを出力する	sys.stderr
option: ナバホホワイト色を用いる	color = 'navajowhite'
キーワード引数を用いてマッピングに追加する	aDict.update(**kwargs)
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
x軸の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
散布図のバツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
オブジェクトはあるクラスのインスタンスか調べる	isinstance(obj, クラス)
ヒストグラムの色をライトスカイブルーにセットする	plt.hist(データ列, color='lightskyblue')
スラグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
タイムスタンプデータをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
カラーテーマを全般的に淡くする	sns.set(pallete='muted')
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
ヒストグラムの色をオールドレースにする	plt.hist(データ列, color='oldlace')
折れ線グラフのバツ印の線幅を設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
nをn2で整数除算する	n // n2
タプルから項目名の値か、もしくは要素を参照する	aDict.get(key, element)
option: グラフの色をスノーに設定する	color = 'snow'
列の一意な値	ds.unique()
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
データフレームのリストカラムの中央値を計算する	df[aList].median()
折れ線グラフをピーチパフ色を用いて描画する	plt.plot(データ列x, データ列y, color='peachpuff')
マッピングからキーの値をエラーなく得る	aDict.get(key, None)
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
日付データのデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
点線にヒストグラムの線の種類を指定する	plt.hist(データ列, linestyle='dotted')
符号付きで整数nを長さn2のバイト列にする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
文字列はひらがな	('ぁ' <= ch <= 'ん')
線グラフを赤い実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
リストを展開してプリントする	print(*aList)
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
ミディアムブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームから破壊的に重複する行を削除する	df.drop_duplicates(inplace=True)
option: 色をライムグリーンに変更する	color = 'limegreen'
K最近傍法を用いて回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
値を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
二つの集合の対称差集合を求める	aSet.symmetric_difference(aSet2)
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
'A'列の値によってデータフレームをグループ化し基本統計量を求める	df.groupby('A').describe()
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
データフレームを表示するとき、小数点以下をn桁に設定する	pd.set_option('precision', n)
文字列をユニコードエスケープでバイト列にする	s.encode(encoding='unicode_escape')
２つの文字列を順にプリントする	print(value, value2)
データ列の偏りを平方根変換する	np.sqrt(データ列)
データ列の偏りを対数変換する	np.log(データ列)
option: アクアマリン色を使用する	color = 'aquamarine'
正規表現patternでまとめてreplにデータフレームの列の値を置き換える	df[col].replace(pattern, repl, regex=True)
折れ線グラフの色を紺に変更する	plt.plot(データ列x, データ列y, color='darkblue')
option: フォントの色を紺碧に指定する	color = 'azure'
スピアマン相関係数を使ってデータフレームの相関行列	df.corr(method='spearman')
nを十六進表現に変換する	hex(n)
リストとリストの散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
データ列とリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
実数が有限かどうか	math.isfinite(x)
線グラフをダークオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorchid')
リストと配列についての散布図に赤いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
文字列の無限イテラブル	itertools.repeat(element)
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
文字列がPythonのキーワード	keyword.iskeyword(s)
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
二つの文字列は同じでないか調べる	s != s2
コーンフラワーブルー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
散布図に黒いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図をアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
組の先頭	aTuple[0]
データフレームのカラムが正規分布からどれだけ、歪んでいるか調べる	df[col].kurt()
散布図を青緑色として描画する	plt.scatter(データ列x, データ列y, color='teal')
データフレームの中のカラムを分割数nでビン分割する	pd.cut(df[col], n)
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
データフレームのリスト列のどの値が最も現れるか見る	df[aList].mode()
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
文字列が全て英数字かどうか調べる	s.isalnum()
option: グラフの色をアクアに設定する	color = 'aqua'
線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
ヒストグラムの色をミディアムオーキッドに指定する	plt.hist(データ列, color='mediumorchid')
データ列をn個に等間隔で分割する	pd.cut(ds, n)
ダークバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
フォレストグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='forestgreen')
カラーバーを設定する	plt.colorbar()
option: デピンクを使用する	color = 'deeppink'
配列のユニークな各要素の出現回数	np.unique(aArray, return_counts=True)
散布図の右三角印を黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
割合付きの円プロットをプロットする	plt.pie(データ列, startangle=90, autopct='%.2f%%')
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
option: オリーブに色を設定する	color = 'olive'
整数nを二進表現に変換する	bin(n)
折れ線グラフにポイント印を加える	plt.plot(データ列x, データ列y, marker='.')
ダークサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
折れ線グラフの色をドジャーブルーにセットする	plt.plot(データ列x, データ列y, color='dodgerblue')
データフレームのヒストグラムを縦横に並べて、図示する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
▼印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
nの8進表現を使う	oct(n)
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
散布図のポイント印を赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
ディムグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
コーンフラワーブルー色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの列の中に文字列があるか確認する	df[col].isin([value])
データを最大最小として正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
小数点数の双曲線余弦	math.cosh(x)
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
文字列内にひとつでもASCII文字があるか	any(c.isascii() for c in s)
サポートベクター分類モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データ列の中にと文字列が存在するかどうか調べる	ds.isin([value, value2])
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
散布図のマーカーの線幅を変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
分子割る分母	fractions.Fraction(分子, 分母)
集合の補集合を求める	aSet.difference(aSet2)
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
カウンタのユニークな要素を列挙する	list(aCounter)
データ列の値を正規表現patternで置き換える	ds.replace(pattern, repl, regex=True)
データ列がどの程度分散しているか見る	ds.var()
グラフの用途を論文に設定する	sns.set(context='paper')
option: ミディアムアクアマリンにグラフの色をセットする	color = 'mediumaquamarine'
カラーバーを水平でプロットする	plt.colorbar(orientation='horizontal')
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
小数点数を実数で割った剰余	math.remainder(x, x2)
無限にカウントアップする	itertools.count()
折れ線グラフの四角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
スピアマンの順位相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
option: マーカーを下三角に変更する	marker = 'v'
データ列の標本標準偏差を求める	ds.std()
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
レモンシフォン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
オプションで、出力先を標準出力に設定する	file = sys.stdout
データ列の中にある日付データと文字列の合計を数える	ds.isin([value, value2]).sum()
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: 色をフローラルホワイトに指定する	color = 'floralwhite'
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: グラフの色をダークグレーに設定する	color = 'darkgray'
ヒストグラムをコーンフラワーブルー色を用いて描画する	plt.hist(データ列, color='cornflowerblue')
横軸の目盛を対数に変更する	plt.xscale('log')
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
JSON文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
文字列を緑色で表示できる文字列に変換する	f'\033[32m{value}\033[0m'
文字列は数値か調べる	s.isnumeric()
文字列内にアスキー文字が含まれるか確認する	any(c.isascii() for c in s)
棒グラフを白色として描画する	plt.bar(データ列x, データ列y, color='white')
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームのNaNを最小値に設定する	df.fillna(df.min())
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
year年day月のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
フクシア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
ヒストグラムをライトイエロー色として描画する	plt.hist(データ列, color='lightyellow')
線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
破壊的に大きい順にデータフレームを複数の列によって並べる	df.sort_values(by=column, ascending=False, inplace=True)
リストと数列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
列の文字列長を列として見る	ds.str.len()
散布図の左三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
散布図の下三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
キーが辞書に存在するか調べる	key not in aDict
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
ファイルからファイル名を使う	os.path.basename(filepath)
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
ダークスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの色をシーグリーンに指定する	plt.plot(データ列x, データ列y, color='seagreen')
nを16進文字列に変換する	hex(n)[2:]
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
整数を百の位で丸める	round(x, -2)
データフレームの列の欠損値を中央値で埋める	df[col].fillna(df[col].median())
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
凡例を加える	plt.legend(['凡例A', '凡例B'])
配列の列ごとの標準偏差	np.std(aArray, axis=0)
xが一桁の正の整数	0 <= x <= 9
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
グラフのカラーパレットを全般的にパステル調にする	sns.set(pallete='pastel')
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
赤い星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
イテラブルを累積した列	itertools.accumulate(iterable, operator.mul)
データフレームのカラムが何年か調べる	df[col].dt.year
整数nの十六進表現を見る	hex(n)
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
option: グラフの色をチョコレートに設定する	color = 'chocolate'
散布図をミディアムブルー色として描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
配列をリストから作成する	np.array(iterable)
n進文字列を整数に変換する	int(s, n)
データフレームのカラムが何分か調べる	df[col].dt.minute
グラフの用途を画面に設定する	sns.set(context='notebook')
ライムにヒストグラムの色を設定する	plt.hist(データ列, color='lime')
option: 耐火レンガを使う	color = 'firebrick'
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
option: 線を太くする	linewidth = 3.0
ファイル名のセパレータ記号	os.sep
文字列リストをつなげる一つの文字列にする	''.join(aStringList)
nをn2乗に増やす	n **= n2
グラフのx軸のラベルを設定する	plt.xlabel('x軸ラベル')
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
データフレームを'A'列によって整列してNaNを先頭にする	df.sort_values(by='A', na_position='first')
リストの推移を色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
プラットホームがリナックスか確認する	sys.platform.startswith('linux')
option: リネンを使う	color = 'linen'
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
散布図の左三角印を青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
option: ダークスレートブルーを使用する	color = 'darkslateblue'
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
破線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='dashed')
データ列を丸める	ds.round()
データフレームの指定された列をリストに変換する	df[column].values.tolist()
データフレームの末尾n行を抽出する	df.tail(n)
ファイルパスを書き込み用に文字列の示す文字コードとしてオープンする]	open(filepath, mode='w', encoding=s)
ヒストグラムの色をクリムゾンに指定する	plt.hist(データ列, color='crimson')
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
横棒グラフをダークスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
折れ線グラフに赤い△印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
グラフの描画でパステル調にパレットを使う	sns.set(pallete='pastel')
文字列を正規表現によって置換する	re.sub(pattern, newsub, s)
グラフの目的を画面に設定する	sns.set(context='notebook')
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
nがn2で割り切れないかどうか	n % n2 != 0
数式の変数を数式で置き換える	e.subs(z, e2)
全ての８進数字	string.octdigits
列の欠損値をxで埋める	ds.fillna(x)
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
option: ミディアムスプリンググリーン色を使用する	color = 'mediumspringgreen'
データフレームを各列と列の組み合わせ毎にグループ化して標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
縦棒グラフをライトグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgrey')
双方向キューの最初から要素を取り除く	deq.popleft()
ヒストグラムをペルー色として描画する	plt.hist(データ列, color='peru')
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
線グラフを赤い点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
自然対数を求める	math.log(x)
丸マーカーを用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
リストの最初の文字列を探す	aList.index(element)
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
option: フォントの色をミディアムオーキッドに設定する	color = 'mediumorchid'
二つの集合がセットと互いに素か	aSet.isdisjoint(aSet2)
列でデータフレームをソートして更新する	df.sort_values(by=column, inplace=True)
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
option: ブルーバイオレット色を使う	color = 'blueviolet'
縦棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
モジュールを検索するパスにを追加する	sys.path.append(dir)
option: 青緑を使う	color = 'teal'
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
改行を見る	'\n'
リストの最初のn要素を取り除く	aList[n:]
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
option: ダークグレーにグラフの色をセットする	color = 'darkgrey'
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
散布図の印を星にする	plt.scatter(データ列x, データ列y, marker='*')
n2がn以上かつn3以下	n <= n2 and n2 <= n3
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
option: ダークシアグリーン色を使う	color = 'darkseagreen'
スタックのn番目	deq[n]
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
モカシン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
最頻値でデータフレームのカラムのNaNを置換する	df[col].fillna(df[col].mode().iloc[0])
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
横棒グラフをスノー色を用いて描画する	plt.barh(データ列x, データ列y, color='snow')
折れ線グラフの色をブラックにセットする	plt.plot(データ列x, データ列y, color='black')
四角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
折れ線グラフの色をスラグレーに指定する	plt.plot(データ列x, データ列y, color='slategray')
グラフの描画を見やすくする	import seaborn as sns
データ列の文字列長を列として使う	ds.str.len()
散布図をrgbの下三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()//60
折れ線グラフの印を▲にする	plt.plot(データ列x, データ列y, marker='^')
リネン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
データフレームのカラムのNaNを平均値で埋める	df[col].fillna(df[col].mean())
配列をベースに全要素が0の行列	np.zeros_like(aArray)
カラムの文字列をNaNにする	ds.replace(s, np.nan)
option: グラフの色を淡いピンク色に変更する	color = 'lightpink'
マッピングからカウンタを用意する	collections.Counter(aDict)
折れ線グラフを描画して、色をカラーコードを用いて設定する	plt.plot(データ列x, データ列y, color='#800080')
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームのカラムの文字列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
折れ線グラフの大バツ印の色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
縦棒グラフをフローラルホワイト色を使って描画する	plt.bar(データ列x, データ列y, color='floralwhite')
タイムスタンプデータと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()//60
数値をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
カラーバーを付ける	plt.colorbar()
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
綺麗なグラフを用いる準備をする	import seaborn as sns
偽陰性を抑えたい指標を使用する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
文字列の右端から部分文字列を取り除く	s.rstrip(sub)
整数nの十六進文字列を使う	hex(n)[2:]
タプルの末尾からn番目以前の要素を取り出す	aTuple[:-n]
折れ線グラフのアルファを設定する	plt.plot(データ列x, データ列y, alpha=0.5)
ミディアムオーキッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
折れ線グラフのポイントマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
ミディアムアクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
ミディアムスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
イテラブルの変遷を半透明の点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: どのカラムもインデックスにしない	index_col = None
nマイナスn2	n - n2
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
折れ線グラフを黄緑色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
ふたつの集合が互いに素	aSet.isdisjoint(aSet2)
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
文字列の後ろから範囲を指定して部分文字列を探す	s.find(sub, start, end)
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームのカラムの文字列を未入力値に変換する	df[col].replace(s, np.nan)
整数nがタプルのどれか	n in aTuple
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
散布図をシーグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='seagreen')
数式の変数の解を方程式として求める	sympy.solve(e, z)
文字列の末尾から部分文字列を見つける	s.rfind(sub)
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
option: ダイアモンドマーカーを使う	marker = 'D'
データフレームを'A'列と'B'列を用いてで破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
データフレームのカラムが正規分布からどの程度歪んでいるか見る	df[col].kurt()
折れ線グラフの丸印の太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
日付データが何曜日か知る	aDate.weekday()
データフレームのカラムが正規分布からどの程度、歪んでいるか確認する	df[col].kurt()
グリーンイエロー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
リストは少なくともひとつ真か調べる	any(aList)
Pandasで、数値時刻のデータフレームのcollから日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームを列でグループ化して列の要約統計量を求める	df.groupby(column).describe()[column2]
文字列全体が正規表現にマッチするか調べる	re.fullmatch(pattern, s)
リストの変遷を半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
数値の積分を算出する	sympy.integrate(e)
イテラブルを文字列に変換して、カンマによって結合する	','.join(map(str, iterable))
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
データフレームのリスト列の中に日付データと日付データがいくつあるか数える	df[aList].isin([value, value2]).sum()
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
文字列を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
小数点数の床	math.floor(x)
辞書の値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
nがn2以下、またはn3以上	n <= n2 or n >= n3
配列の全要素の値を変更する	aArray[:, :] = 指定の値
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
データフレームの中にある文字列の合計をカウントする	df.isin([value]).sum()
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(データ列)
実数がNaN	math.isnan(x)
列をキーにして二つの表データを全ジョインする	pd.merge(df, df2, on=column, how='outer')
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
n個にデータフレームの中のカラムを等量でビン分割する	pd.qcut(df[col], n)
option: グラフの色をコーラルにする	color = 'coral'
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
列'A'と列'B'をキーとして2つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
option: グラフの色をグレーに設定する	color = 'gray'
xが一桁の正の整数か調べる	0 <= x <= 9
カラーバーを横向きで設定する	plt.colorbar(orientation='horizontal')
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
ミスティローズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
最大長nのキューを作る	collections.deque(maxlen=n)
カラムの標準偏差	ds.std()
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
分類モデルの訓練を開始する	model.fit(説明変数, 目的変数)
ホワイトスモークにヒストグラムの色を設定する	plt.hist(データ列, color='whitesmoke')
散布図のマーカーを▲にする	plt.scatter(データ列x, データ列y, marker='^')
変数を下線付き化する	f'\033[4m{value}\033[0m'
数列の移り変わりを折れ線プロットとして描画する	plt.plot(range(len(データ列)), データ列)
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
棒グラフをリネン色を使って描画する	plt.bar(データ列x, データ列y, color='linen')
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
異なる列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
実線を使ってヒストグラムをプロットする	plt.hist(データ列, linestyle='solid')
線グラフを半透明の実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームのカラムの平均値	df[col].mean()
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
淡いピンク色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
折れ線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
option: データ型として三二ビット整数型を使う	dtype = np.int16
データ列を複数横に並べて柱状図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームのカラムを小数点以下n桁で四捨五入する	df[col].round(n)
辞書の値に要素が含まれていないかどうか調べる	element not in aDict.values()
辞書に辞書の項目を更新する	aDict.update(aDict2)
option: ライトスカイブルー色を使用する	color = 'lightskyblue'
青い上三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
option: コーラル色を使用する	color = 'coral'
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
データフレームからランダムに抽出する	df.sample()
option: グラフの色をダークブルーに変更する	color = 'darkblue'
ファイルパスをオープンして]、書き込みストリームを求める	open(filepath, mode='w')
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
横棒グラフを描画して、下寄せする	plt.barh(ラベル列, データ列, align='edge')
タブで区切って二つの数値をプリントする	print(value, value2, sep='\t')
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
option: ダイアモンドマーカーを描画する	marker = 'D'
回帰分析をPLSとして行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
降順に破壊的にデータフレームを'A'列を用いてソートする	df.sort_values(by='A', ascending=False, inplace=True)
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
データフレームのそれぞれのグループの標準偏差	df.groupby(column).std()
データフレームを列によって並べて、上の方n件を取り出す	df.sort_values(columns).head(n)
キューのn番目に要素を途中追加する	deq.insert(n, element)
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
カテゴリでグループ化して、データフレームをにバイオリン図で図示する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
データフレームのリストカラムの歪度を求める	df[aList].kurt()
xが1もしくは2か	x == 1 or x == 2
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
データフレームのカラムの中に存在する文字列の個数を数える	df[col].isin([value]).sum()
nが無限に続く数列	itertools.repeat(n)
横軸だけ目盛線	plt.grid(axis='x')
辞書をカウンタに変換する	collections.Counter(aDict)
色差別なくカラーパレットをグラフの描画で使う	sns.set(pallete='colorblind')
データフレームの列が文字列が含まれるデータを選ぶ	df[df[column].str.contains(s)]
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
ファイルパスを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
シーグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
変数がマイナス無限大に近づく時の数値の極限値を算出する	sympy.limit(e, z, -oo)
ファイル名がテキストファイルかどうか調べる	filename.endswith('.txt')
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
option: 読み込まない列番号をnamesで指定する	skiprows = names
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
値が集合に含まれないか調べる	element not in aSet
黒い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
イテラブルと配列について散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
JSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
ファイルをバイナリ書き込みモードを用いてオープンして]、fとする	f = open(filepath, mode='wb')
既存のファイルをEUCを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
ブラック色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
文字列を最後の部分文字列で二分し後半の文字列を見る	s.rpartition(sub)[-1]
option: どの行もヘッダにしない	header = None
データを外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: マーカーを左三角に変更する	marker = '<'
数式を数値にする	float(e)
option: フォントの色をライトグレーに指定する	color = 'lightgrey'
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
変数名をキーとして、辞書	dict(name=element)
option: グラフの線の種類を一点鎖線に指定する	linestyle = 'dashbot'
本日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
カラムの値ごとにデータフレームを集約し、、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
散布図をロイヤルブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='royalblue')
線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
切り下げて整数に変換する	math.floor(x)
空の集合	set()
ベクトルの行ごとの合計値を求める	np.sum(aArray, axis=1)
ファイルパスをオープンして]読み込みストリームを使う	open(filepath, mode='r')
折れ線グラフにダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
日付データが日付データより後ろかどうか調べる	aDate > aDate2
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
option: コーンフラワーブルーにフォントの色を指定する	color = 'cornflowerblue'
正規表現に文字列の先頭で大文字・小文字を無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームを列にグループ化して、標準偏差を求める	df.groupby(column).std()
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
現在が日曜日か調べる	datetime.datetime.today().weekday() == 6
データフレームのヒストグラムを横に並べて、見る	sns.displot(df, x='列名', col='カテゴリ名')
集合をイミュータブルなセットに変換する	frozenset(aSet)
xが一桁の正の数か調べる	0 <= x <= 9
半透明の破線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
フォレストグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
ダークオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
リストをひとつ置きに取り出す	aList[::2]
option: オリーブ色を用いる	color = 'olive'
引数から名前付きタプルをインスタンス化する	C._make(パラメータ)
一点鎖線にヒストグラムを変更する	plt.hist(データ列, linestyle='dashbot')
散布図をリネン色として描画する	plt.scatter(データ列x, データ列y, color='linen')
ホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
棒グラフの色を真紅にする	plt.bar(データ列x, データ列y, color='crimson')
データフレームの各グループ毎の分散	df.groupby(column).var()
プラットホームがMacOS	sys.platform.startswith('darwin')
データフレームの中の列をビン数nでビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
二つの列によってデータフレームを整列して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
option: ダークターコイズを使う	color = 'darkturquoise'
ライトコーラルにヒストグラムの色をする	plt.hist(データ列, color='lightcoral')
再帰の上限を増やす	sys.setrecursionlimit(1000000)
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームが重複しているか調べる	df.duplicated()
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
折れ線グラフの上三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームの信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
２つの列でデータフレームを昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
線を青い一点鎖線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
現在のワーキングディレクトリ	os.getcwd()
横棒グラフを青色を用いて描画する	plt.barh(データ列x, データ列y, color='blue')
菱形マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D')
option: 線の種類を実線に設定する	linestyle = 'solid'
分類モデルの予測値と実測値を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
列'A'と列'B'をキーとして二つの表データを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
列によってデータフレームを並べて、更新する	df.sort_values(by=column, inplace=True)
セットが空集合	len(aSet) == 0
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
スライド用にグラフを設定する	sns.set(context='talk')
書き込み用にファイルを開いて]、fとする	f = open(filepath, mode='w')
折れ線グラフのバツ印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
組の末尾	aTuple[-1]
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
縦棒グラフをコーラル色として描画する	plt.bar(データ列x, データ列y, color='coral')
イテラブルから新しいカウンタを作る	collections.Counter(iterable)
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
文字列の中の大文字・小文字を無視して正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
青いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データ列を箱ひげ図にする	plt.boxplot(データ列)
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
多次元データをt分布型確率的近傍埋め込み法でパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
折れ線グラフをゴーストホワイト色として描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
各列毎にデータフレームをグループ化し、、列の分散を求める	df.groupby(column)[column2].var()
ヒストグラムの線の種類を点線に指定する	plt.hist(データ列, linestyle='dotted')
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
データ列の四分位を図示する	plt.boxplot(データ列)
option: フォントの色をイエローグリーンに変更する	color = 'yellowgreen'
データ列をn個に等間隔でビン分割する	pd.cut(ds, n)
散布図のダイアモンドマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図にポイントマーカーを用いる	plt.scatter(データ列x, データ列y, marker='.')
二次元リストをフラット化する	sum(aList)
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
プロットをPNGファイルとして保存する	plt.savefig('foo.png')
横棒グラフをマゼンタ色を用いて描画する	plt.barh(データ列x, データ列y, color='magenta')
バリーウッド色としてヒストグラムを描画する	plt.hist(データ列, color='burlywood')
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
リストの末尾から値を取り除く	aList.pop()
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
データフレームの列がリストに含まれる行を取り出す	df[df[column].isin(aList)]
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
xが-9以上9以下か調べる	-9 <= x <= 9
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
リストの要素数だけ繰り返す	range(len(aList))
option: 色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
ダークレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
縦棒グラフをモカシン色を使って描画する	plt.bar(データ列x, データ列y, color='moccasin')
二つの文字列を辞書順で比較する	s < s2
実数の正弦の逆数	math.asin(x)
事前にケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
文字列は全て識別子名か確認する	s.isidentifier()
データ列の尖度	ds.skew()
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
データフレームのカラムの欠損値を直前の値に指定する	df[col].fillna(method='ffill')
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
書式でデータフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
option: マーカーを下三角に指定する	marker = 'v'
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
二つの文字列を順に表示する	print(value, value2)
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
イテラブルを配列に変換する	np.array(iterable)
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
列'A'と列'B'をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
逆順の双方向キューを使う	reversed(deq)
散布図の大バツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
リストとリストについて散布図を描いて、下三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
カラムを100の位で丸める	ds.round(-2)
ペルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
データフレームの内容を調べる	df.head()
実数の双曲線正接の逆数を求める	math.atanh(x)
ヒストグラムの色をシエナに変更する	plt.hist(データ列, color='sienna')
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
クラス分類の適合率を算出する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
長さnのリスト	[0] * n
ライトサーモン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
ヒストグラムをダークバイオレット色として描画する	plt.hist(データ列, color='darkviolet')
横棒グラフをスレートブルー色を使って描画する	plt.barh(データ列x, データ列y, color='slateblue')
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
データフレームの未入力値を最大値に指定する	df.fillna(df.max())
折れ線グラフをシルバー色を用いて描画する	plt.plot(データ列x, データ列y, color='silver')
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ダークシアグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
散布図に黒い三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
集合に列の要素を追加する	aSet.update(iterable)
コーンズシルク色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
縦棒グラフをミディアムアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
文字列を最後の部分文字列で二つに区切って前半の文字列を使う	s.rpartition(sub)[0]
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
散布図のポイント印の色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
nでシードを固定する	random.seed(n)
option: スプリンググリーンにフォントの色を指定する	color = 'springgreen'
リストとリストについて散布図を描画して、上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
option: グラフの色をミディアムバイオレットレッドにセットする	color = 'mediumvioletred'
option: フォントの色を赤に設定する	color = 'red'
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
データ列の中の未入力値の合計を数える	ds.isna().sum()
データフレームの列を削除する	df.drop(column, axis=1)
あらかじめ大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
データ列とリストについて散布図を描画し、マーカーをクロスに指定する	plt.plot(データ列x, データ列y, marker='x')
青い下三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
rgbのバツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
Pandasで文字列のUNIX時間からタイムスタンプ型に変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームをカテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームをサンプリングする	df.sample()
リストを等量でn個に分割する	pd.qcut(aList, n)
日付データが日付データと同時か調べる	aDate == aDate2
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
大量のデータ列が正規分布に従うか仮説検定する	scipy.stats.kstest(データ列, 'norm')
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
option: フォントの色をラベンダーに指定する	color = 'lavender'
オブジェクトの属性の値を設定する	setattr(obj, プロパティ名, 値)
ふたつの集合の対称差	aSet.symmetric_difference(aSet2)
散布図をダークブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkblue')
既存のファイルを追加できるようにSJISとしてオープンする]	open(filepath, mode='a', encoding='shift_jis')
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
実数を数で除した余り	x % y
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
オブジェクトは集合か	isinstance(obj, set)
nの桁数	len(str(n))
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
日付データにn週間分、足す	aDate + datetime.timedelta(weeks=n)
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
線グラフの色をダークグリーンに指定する	plt.plot(データ列x, データ列y, color='darkgreen')
JSON文字列をデータに変換する	json.loads(jsonString)
データ列の推移を青い一点鎖線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
カラムの第一四分位数を算出する	ds.quantile(0.25)
要素が全て初期値の行列	np.full(要素数, 初期値, dtype=np.int)
日付時刻データが何年か知る	aDatetime.year
リストの中の一番大きい値を求める	max(aList)
option: グラフの色をカーキに設定する	color = 'khaki'
配列とリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
ヒストグラムの色を赤に指定する	plt.hist(データ列, color='red')
マップの項目数	len(aDict)
xを浮動小数点数型に変換する	float(x)
カテゴリで色付けして、カーネル密度分布をプロットする	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
ターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
文字列は片仮名か確認する	('ァ' <= ch <= 'ン')
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
データフレームのリスト列を10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
nが一桁の整数かどうか調べる	0 <= n <= 9
標準入力から1文字分読み込む	sys.stdin.read(1)
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
文字列TSVファイルからカンマ区切りのファイルをn番目のカラムをインデックスとして読む	pd.read_csv(filename, index_col=n)
データフレームから最後の列を除く	df[df.columns[:-1]]
エンコーディング	sys.getdefaultencoding()
全要素を０で初期化した三二ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
ダークゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
オブジェクトは整数か調べる	isinstance(obj, int)
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データフレームの列がxかつ列がx2であるデータを抽出する	df[(df[column] == x) & (df[column2] == x2)]
本日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
連番のベクトルの作成する	np.arange(開始値, 終了値, 等差)
色付きの一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: グラフの色をライトグレーに設定する	color = 'lightgray'
折れ線グラフの色をミディアムパープルに変更する	plt.plot(データ列x, データ列y, color='mediumpurple')
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
カラムの歪度を求める	ds.kurt()
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
マップのキー一覧	list(aDict)
組中の最初の文字列を探す	aTuple.index(element)
文字列のケースを変換する	s.casefold()
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
散布図の菱形印を青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: バツマーカーを描画する	marker = 'x'
ブルーバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
淡い茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
乱数シードを初期化する	random.seed()
文字列を文字のリストに変換する	list(s)
グリーンイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームのリストカラムの下位25%	df[aList].quantile(0.75)
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
文字列が文字列リストに存在するか調べる	s in aStringList
option: ホワイトスモーク色を使う	color = 'whitesmoke'
データフレームを'A'列によってを用いて降順にソートする	df.sort_values(by='A', ascending=False)
インディゴ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
データフレームの母標準偏差	df.std(ddof=0)
JSONファイルの入力ストリームを辞書にする	json.load(fin)
読み込みモードでファイルをオープンして]fとする	f = open(filepath, mode='r')
線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
JSON文字列を辞書にする	json.loads(jsonString)
データ列を四分位数でビンニングする	pd.qcut(ds, 4)
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
データフレームのリストカラムの平均値	df[aList].mean()
option: ダークスレートブルー色を使う	color = 'darkslateblue'
ベージュ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
文字列中に非大文字が含まれるか	any(not c.isupper() for c in s)
ヒストグラムの色をライトシアンに変更する	plt.hist(データ列, color='lightcyan')
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
数字を全部使う	string.digits
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
option: ミディアムブルーを使う	color = 'mediumblue'
両端キューの最初に要素を付け加える	deq.appendleft(element)
回帰モデルを学習する	model.fit(説明変数, 目的変数)
クラス分類を確率的勾配降下として行う	model = sklearn.linear_model.SGDClassifier()
実数の三乗	x ** 3
option: 線の種類を破線にセットする	linestyle = 'dashed'
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
ひとつでもASCII文字が文字列内に含まれるか調べる	any(c.isascii() for c in s)
データフレームを列ごとにグループ化して、それぞれのグループ毎の最大値を求める	df.groupby(column).max()
option: アイボリー色を用いる	color = 'ivory'
辞書に別の辞書の項目を更新する	aDict.update(aDict2)
nからn2までの整数リスト	list(range(n, n2+1))
辞書のキーの値	aDict[key]
線グラフの色をブラウンに変更する	plt.plot(データ列x, データ列y, color='brown')
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
文字列は片仮名か	('ァ' <= ch <= 'ン')
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
文字列が印字できるか調べる	s.isprintable()
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
グラフの色を淡くする	sns.set(pallete='muted')
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
黒い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
JSONLファイルに文字化けしないようにデータフレームを書き込む	df.to_csv(filename, encoding='utf_8_sig')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
スピアマンの相関係数を計算する	scipy.stats.spearmanr(データ列, データ列2)
option: マーカーをバツに変更する	marker = 'x'
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
２つのオブジェクトが等しいかどうか調べる	obj == obj2
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
数式の変数に数式を代入する	e.subs(z, e2)
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
二つのリストを箱ひげ図にする	plt.boxplot([データ列, データ列])
横棒グラフをパープル色として描画する	plt.barh(データ列x, データ列y, color='purple')
RANSACで回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
2つの変数を改行で区切ってプリントする	print(value, value2, sep='\n')
nとn2の論理和を求める	n | n2
無限に数え上げるする	itertools.count()
線グラフをスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
ドジャーブルー色でヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
論文用にグラフをセットする	sns.set(context='paper')
データ列とリストの散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列を右トリムする	s.rstrip()
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: 色をダークシアグリーンに設定する	color = 'darkseagreen'
空のカウンタを作る	collections.Counter()
ファイルを読み込み用に開いて]、fとする	f = open(filepath, mode='r')
ふたつのリストのインターセクション	list(set(aList) & set(aList2))
配列の要素ごとの積	np.multiply(aArray, aArray2)
ヒストグラムをパレットトルコイズ色を使って描画する	plt.hist(データ列, color='paleturquoise')
散布図をホワイトスモーク色として描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
オブジェクトがリストクラスか調べる	isinstance(obj, list)
データ列の折れ線グラフを菱形印で描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームの列の未入力値を最小値に設定する	df[col].fillna(df[col].min())
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
色付きの点線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
カウンタを多い順に列挙する	aCounter.most_common()
縦棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
変数を太字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
部分文字列が文字列の終了位置より前に含まれるか調べる	s.find(sub, 0, end) != -1
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
文字列内に小文字が含まれる	any(c.islower() for c in s)
'A'列によってデータフレームを整列して更新する	df.sort_values(by='A', inplace=True)
配列の行ごとの平均値	np.mean(aArray, axis=1)
データフレームを列によってまとめたグループ	df.groupby(column)
option: ライムグリーンを使う	color = 'limegreen'
文字列の開始位置以降が部分文字列で始まるかどうか調べる	s.startswith(sub, start)
データフレームの値を正規表現patternでまとめてreplに置換する	df.replace(pattern, repl, regex=True)
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
行列のムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
本日の日付時刻	datetime.datetime.today()
異なる列をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データ列の時刻	ds.dt.hour
集合から任意の要素を取り除く	aSet.pop()
データフレームのリスト列の欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
ベクトルの行ごとの分散	np.var(aArray, axis=1)
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
スタックの最初から要素を取り除く	deq.popleft()
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
リストの末尾の要素	aList[-1]
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
文字列が全て大文字か	s.isupper()
行列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
カウンタの積集合を算出する	aCounter & aCounter2
実数の平方根	math.sqrt(x)
折れ線グラフを半透明の一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
数式をパラメータについて微分する	sympy.diff(e, z)
カウンタを辞書として更新する	aCounter.update(aDict)
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
新しい文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
変数について数値の微分を行う	sympy.diff(e, z)
黒い四角マーカーを数列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフをダークシアン色を使って描画する	plt.plot(データ列x, データ列y, color='darkcyan')
星マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
線グラフの色をレベッカパープルに変更する	plt.plot(データ列x, データ列y, color='rebeccapurple')
カウンタをタプルから作る	collections.Counter(aDict)
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
モデルを説明変数と目的変数として学習する	model.fit(説明変数, 目的変数)
nが1もしくは2か調べる	n == 1 or n == 2
option: 色をパレットトルコイズに設定する	color = 'paleturquoise'
組の先頭を除く	aTuple[1:]
1からNまでの行列	np.arange(1, N+1)
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
ファイルを読み込みモードとしてオープンする]	open(filepath, mode='r')
リストとリストの散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
イテラブルを2回あわせた直積を得る	itertools.product(iterable, repeat=2)
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
データフレームのリストカラムの歪度	df[aList].kurt()
全要素を初期値で初期化した行列を作成する	np.full(要素数, 初期値, dtype=np.int)
散布図をインディアンレッド色を使って描画する	plt.scatter(データ列x, データ列y, color='indianred')
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
ヒストグラムの色をグレーに指定する	plt.hist(データ列, color='gray')
破壊的にデータフレームのn行目を削除する	df.drop(n, axis=0, inplace=True)
ヒストグラムの色をバリーウッドに指定する	plt.hist(データ列, color='burlywood')
データフレームの列の各値の出現数を計算する	df[col].value_counts()
ベクトルの合計値を求める	np.sum(aArray)
回帰分析をアンサンブル学習で行う	sklearn.ensemble.VotingRegressor()
データフレームの列と列のヒートマップをグラフ化する	sns.heatmap(df[[column, column2]].corr())
データフレームの列の文字列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
２つのリストから辞書を準備する	dict(zip(aList, aList2))
データフレームをグループ化しそれぞれの列に対し分散を求める	df.groupby(column)[column2].var()
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
JSONLファイルにデータフレームを保存する	df.to_csv(filename)
文字列の中で正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s)
数式のn階微分を算出する	sympy.diff(e, z, n)
リストの最初を取り除く	aList[1:]
複数のデータフレームを横向きに連結する	pd.concat([df, df2, df3], axis=1)
プロットの色使いを指定する	sns.set(pallete=パレット名)
インディアンレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
デピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
黒い丸マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
オブジェクトのバイト長	sys.getsizeof(obj)
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
文字列をセンタリングする	s.center(文字列幅)
option: ディムグレーを使う	color = 'dimgray'
サドルブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
インデント幅nで、辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
リストのn番目からn2番目の部分を取り出す	aList[n:n2]
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
データフレームの列の値がx以上の行を抽出する	df[df[column] >= x]
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
1からnまでの整数列を使う	list(range(1, n+1))
グラフのデータラベルの位置を指定する	plt.legend(loc=(x, y))
フォレストグリーン色でヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
縦棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
正規表現モジュールをインポートする	import re
'A'列によってデータフレームを並べ直し、、更新する	df.sort_values(by='A', inplace=True)
データフレームの行を範囲指定して抽出する	df[start:end]
自分自身をモジュールとして	sys.modules[__name__]
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
行列の行ごとの分散	np.var(aArray, axis=1)
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
組の先頭のn要素を取り除く	aTuple[n:]
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
option: ダークスレートブルー色を使用する	color = 'darkslateblue'
グラフの横軸の軸名を設定する	plt.xlabel('x軸ラベル')
実数の逆双曲線正接を算出する	math.atanh(x)
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
データ列の中に存在するの合計を数える	ds.isin([value]).sum()
散布図をパープル色として描画する	plt.scatter(データ列x, データ列y, color='purple')
nが2で割り切れないか調べる	n % 2 == 1
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
option: グラフの色をグレーに変更する	color = 'grey'
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフをピーチパフ色を使って描画する	plt.plot(データ列x, データ列y, color='peachpuff')
スピアマンの順位相関係数を見る	scipy.stats.spearmanr(データ列, データ列2)
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
ヒストグラムを赤色を用いて描画する	plt.hist(データ列, color='red')
リストの要素を昇順にソートする	sorted(aList, reverse=False)
option: 色をスチールブルーに設定する	color = 'steelblue'
カウンタの最頻出のキーを求める	aCounter.most_common()[0]
コマンド引数のリスト	sys.argv[1:]
文字列の開始位置以降に部分文字列が含まれないかどうか調べる	s.find(sub, start) == -1
折れ線グラフのバツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
ダークゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームの列の文字列が文字列で終わらない行を選択する	df[not df[column].str.endswith(s)]
データフレームを千の位で四捨五入して、整数型にする	df.round(-3).astype(int)
複数行対応として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
option: マーカーの色をライムにする	markerfacecolor = 'lime'
option: 行を連番に設定する	index_col = None
option: ライムグリーン色を使う	color = 'limegreen'
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
option: カンマをセパレータで用いる	sep = ','
シスル色でヒストグラムを描画する	plt.hist(データ列, color='thistle')
option: 追加用に設定する	mode = 'a'
データフレームの指定された列を配列として取り出す	df[column].values
option: ライトグレー色を使う	color = 'lightgray'
データフレームのリストカラムがどれだけ、分散しているか見る	df[aList].var()
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
文字列を最後の部分文字列で分けたときの残りの文字列を取り出す	s.rpartition(sub)[-1]
データ列を四捨五入して、整数型にする	ds.round().astype(int)
データフレームのカラムの要約統計量	df[col].describe()
ファイル全体を行単位で分割して読み込む	f.readlines()
データフレームの中にある文字列と文字列の個数をカウントする	df.isin([value, value2]).sum()
文字列中のカタカナを平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
option: グラフの色をシスルに設定する	color = 'thistle'
文字列中のタブ文字をn個の空白に置き換える	s.expandtabs(tabsize=n)
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
タプルの末尾を除く	aTuple[:-1]
リストと配列についての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図の下三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
データ列を折れ線プロットで可視化する	plt.plot(データ列x, データ列y)
リストの移り変わりを色付きの点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
全般的にカラーパレットを色差別なくする	sns.set(pallete='colorblind')
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
イテラブルと列をペアリングする	itertools.zip_longest(iterable, iterable2)
文字列の右側から改行を消す	s.rstrip('\n')
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
xの小数点以下'1'桁まで表示する	print(':.1f'.format(x))
データフレームの列のリストを見る	df.info()
データを平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
円グラフを用いてリストの割合を可視化する	plt.pie(データ列, startangle=90)
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
データフレームの列を散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
クラス分類をアンサンブル学習としてする	sklearn.ensemble.VotingClassifier()
option: 配列のデータ型を指定する	dtype = np.uint8
option: フォントの色をパールバイオレットレッドに設定する	color = 'palevioletred'
有理数を使う	import fractions
文字列の後ろから改行を除く	s.rstrip('\n')
データ列のメディアン	ds.median()
nが3で割り切れるか調べる	n % 3 == 0
配列のスカラー倍	aArray * n
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
データフレームのカラムは正規分布からどの程度、尖っているか見る	df[col].skew()
縦棒グラフをオレンジ色を用いて描画する	plt.bar(データ列x, データ列y, color='orange')
行列の合計	np.sum(aArray)
散布図のマーカーの太さを変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
最初の要素をキューから取り除く	deq.remove(element)
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
双方向キュー中の文字列の数を数える	deq.count(element)
ペアリストpairsからカウンタを構築する	collections.Counter(dict(pairs))
option: フォントの色を青に指定する	color = 'blue'
黒色で文字列を出力する	print(f'\033[30m{value}\033[0m')
配列から重複を除いた配列を作る	np.unique(aArray)
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームのリストカラムを千の位で丸める	df[aList].round(-3)
あらかじめ複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
option: グラフの色をチョコレートに変更する	color = 'chocolate'
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
リストとリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
浮動小数点数を数に加算する	x + y
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: ASCII文字に限定する	flag = re.ASCII
データフレームを二つの列によって集約する	df.groupby(['A', 'B'])
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
折れ線グラフの四角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
タプルのn番目以降の要素を取り出す	aTuple[n:]
列から両端キューを生成する	collections.deque(iterable)
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
シアン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
option: EUCを使う	encoding = 'euc_jp'
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
nとn2が等しいか調べる	n == n2
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
n2がnより大きく、かつn3未満かどうか調べる	n < n2 and n2 < n3
ユーザが整数を入力する	int(input())
散布図に黒い▼印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
点線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
多次元データをt-SNEとして淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
option: オレンジレッドを用いる	color = 'orangered'
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
option: 青色を用いる	color = 'blue'
カウンタの項目のカウント	aCounter[element]
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
データフレームのリスト列の中にいくつ欠損値があるかカウントする	df[aList].isna().sum()
option: マーカーを大バツに変更する	marker = 'X'
線グラフをチョコレート色として描画する	plt.plot(データ列x, データ列y, color='chocolate')
折れ線グラフの四角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
リストにリストを加える	aList.extend(aList2)
option: 色をミディアムブルーに変更する	color = 'mediumblue'
nがn2よりも小さいか	n < n2
データフレームのカラムのNaNを平均で埋める	df[col].fillna(df[col].mean())
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
ピアソンでデータフレームの相関行列	df.corr(method='pearson')
グレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='gray')
折れ線グラフに赤いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
データフレームの中で、列と列の重複を調べる	df.duplicated(subset=[column, column2])
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
データフレームを列ごとに集約して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
ヒストグラムをダークオーキッド色として描画する	plt.hist(データ列, color='darkorchid')
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
二つの列によってデータフレームをまとめたグループ	df.groupby(['A', 'B'])
折れ線グラフをサドルブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
'A'列でデータフレームを並べる	df.sort_values(by='A')
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
散布図の印を右三角にする	plt.scatter(データ列x, データ列y, marker='>')
線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームのリスト列の欠損値をメディアンに変更する	df[aList].fillna(df[aList].median())
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
データフレームの欠損値をモードで埋める	df.fillna(df.mode().iloc[0])
カウンタの要素の出現回数	aCounter[element]
二つの文字列をタブで区切って表示する	print(value, value2, sep='\t')
散布図に左三角印を加える	plt.scatter(データ列x, データ列y, marker='<')
データフレームは正規分布からどの程度、歪んでいるか確認する	df.kurt()
数値を簡単化する	sympy.sympify(e)
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
こんにちは世界と表示する	print('Hello World')
PandasでdateStringをタイムスタンプにする	pd.to_datetime(dateString)
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
文字列はリストに含まれるかどうか	element in aList
タプルの中の最小値を計算する	min(aTuple)
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
行列の列ごとの最大値	np.max(aArray, axis=0)
正規表現でデータフレームの値をまとめて置き換える	df.replace(pattern, repl, regex=True)
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
辞書の項目数	len(aDict)
データフレームの列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図の星印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームのn行目を破壊的にドロップする	df.drop(n, axis=0, inplace=True)
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
列の中に日付データと文字列が存在するか調べる	ds.isin([value, value2])
行を付けずにデータフレームをJSONLファイルに保存する	df.to_csv(filename, index=None)
方程式として数式の変数の解を計算する	sympy.solve(e, z)
変数を定義する	x = n
データフレームから重複する行をドロップして、更新する	df.drop_duplicates(inplace=True)
グラフに鉛直方向の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
ヒストグラムをゴーストホワイト色を用いて描画する	plt.hist(データ列, color='ghostwhite')
分子n、分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
文字列内にアスキー文字があるか調べる	any(c.isascii() for c in s)
バイオレット色で線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
折れ線グラフのダイアモンド印を青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
変数が無限大に近づくときの数式の極限値を算出する	sympy.limit(e, z, oo)
横方向に複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
タプルからカウンタを作る	collections.Counter(iterable)
option: ダークシアグリーンにフォントの色を変更する	color = 'darkseagreen'
列のユニークな値	df[col].unique()
option: フォントの色をオレンジレッドにセットする	color = 'orangered'
散布図の上三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
データフレームからカラムを３つ選択する	df[[column, column2, column3]]
折れ線グラフの色をシアンに指定する	plt.plot(データ列x, データ列y, color='cyan')
データを最大最小で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
リストとリストについて散布図を描き、、マーカーを△に設定する	plt.plot(データ列x, データ列y, marker='^')
散布図をブルーバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
データフレームのデータを条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
本日のタイムスタンプ	datetime.datetime.now()
二つのデータフレームを異なる列をキーにして外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
二つ並べてイテラブルを柱状図にする	plt.hist([データ列, データ列], color=['b', 'r'])
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
データ列の移り変わりを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
上位集合もしくは等しい	aSet > aSet2
平均と分散を用いてデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データフレームから重複した行を残さずドロップする	df.drop_duplicates(keep=False)
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
コマンドフラグの状態	sys.flags
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
リストと配列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
トマト色でヒストグラムを描画する	plt.hist(データ列, color='tomato')
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
データフレームのカラムの分	df[col].dt.minute
折れ線グラフの上三角印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
整数nを8進文字列に変換する	oct(n)[2:]
option: 色をダークレッドに変更する	color = 'darkred'
オレンジにヒストグラムの色を設定する	plt.hist(データ列, color='orange')
オリベドラブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
文字列をエラーを無視してバイト列に変換する	s.encode(errors='ignore')
縦棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: 文字列の示すエンコーディングを用いる	encoding = s
グラフの縦横比を同じする	plt.axis('equals')
option: n番目のカラムを行に設定する	index_col = n
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
nを切り捨てながら半分にする	n //= 2
データフレームの列と列の相関行列	df[[column, column2]].corr()
option: バイナリ書き込みモードを使う	mode = 'wb'
option: シャルトリューズにグラフの色をする	color = 'chartreuse'
xの小数点以下'3'桁までを表示する	print(':.3f'.format(x))
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
切り下げて整数にする	math.floor(x)
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
本日の年数を使う	datetime.datetime.today().year
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
カウンタを高頻出方から列挙する	aCounter.most_common()
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
データフレームを列でグループ分けし、、それぞれのグループごとの件数を知る	df.groupby(column).size()
データフレームを'A'列の値によってグループ化し、要約統計量を計算する	df.groupby('A').describe()
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
文字列を青色にする	f'\033[34m{value}\033[0m'
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
データフレームを各列毎に集計して列の標準偏差を求める	df.groupby(column)[column2].std()
要素はセットのメンバーに含まれるか調べる	element in aSet
option: ▲印を加える	marker = '^'
値を両端キューの末尾から取り出す	deq.pop()
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
▲マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
文字列をプリントする	print(value)
縦棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
書式を辞書でフォーマットする	formatText.format_map(aDict)
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
折れ線グラフの丸印の大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
データ列の欠損値を直前の値にする	ds.fillna(method='ffill')
option: ミディアムスレートブルーにグラフの色を変更する	color = 'mediumslateblue'
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
option: マーカーを四角に変える	marker = 's'
リストとリストの散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
スピアマンでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
文字列の長さを使う	len(s)
棒グラフをパパイヤウィップ色を用いて描画する	plt.bar(データ列x, データ列y, color='papayawhip')
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
散布図をトマト色を用いて描画する	plt.scatter(データ列x, データ列y, color='tomato')
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
option: 線の種類を実線に変更する	linestyle = 'solid'
今日が何日か知る	datetime.datetime.today().day
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をミディアムターコイズに指定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
本日が何曜日か知る	datetime.datetime.today().weekday()
データ列のタイムゾーンを日本にセットする	ds.tz_convert('Asia/Tokyo')
配列の最小	np.min(aArray)
ピアソン相関係数でデータフレームの列と列の相関行列を算出する	df[[column, column2]].corr(method='pearson')
赤いバツマーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c='r')
ファイルをEUCとしてオープンする]	open(filepath, encoding='euc_jp')
第一引数のファイルの名前	sys.argv[1]
ユークリッド距離を求める	math.dist(point, point2)
sepを区切りにして文字列リストをひとつの文字列にする	sep.join(aStringList)
棒グラフの色をダークブルーにする	plt.bar(データ列x, データ列y, color='darkblue')
データフレームのカラムの時を見る	df[col].dt.hour
option: コロンをセパレータで使用する	sep = ':'
折り返しをオフにする	pd.set_option('expand_frame_repr', False)
実数のタンジェントの逆数	math.atan(x)
折れ線グラフに赤い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
二つの値をカンマで区切ってプリントする	print(value, value2, sep=',')
日付時刻データは日付時刻データより早いか確認する	aDatetime < aDatetime2
タプルからキーの値	aDict.get(key)
実行結果を緑色で表示できる文字列にする	f'\033[32m{value}\033[0m'
双方向キューの中に要素が存在するか調べる	element in deq
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
rgbの左三角マーカーを配列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
線グラフの色をタンにセットする	plt.plot(データ列x, データ列y, color='tan')
辞書を階層化辞書に変換する	collections.ChainMap(aDict)
データ列の中にいくつ日付データがあるか数える	ds.isin([value]).sum()
option: 色をパープルにする	color = 'purple'
ゲインズボロ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
キーがタプル上でまだ定義されていないか	key not in aDict
オブジェクトのハッシュ値	hash(obj)
横棒グラフをライトサーモン色として描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
文字列をバイト列に変換する	bytes(s)
option: グラフの色をシーグリーンに変更する	color = 'seagreen'
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
year年month月day日をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day)
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
リストを境界値としてリストをビニングする	pd.cut(aList, aList)
option: ミディアムスレートブルー色を使用する	color = 'mediumslateblue'
部分文字列で末尾から文字列を区切る	s.rsplit(sub)
散布図に赤い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
エクセルデータファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームの値が欠損値か調べる	df.isna()
数値を変数について微分する	sympy.diff(e, z)
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
option: ゴールデンロッド色を用いる	color = 'goldenrod'
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
データ列の要約統計量	ds.describe()
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
rgbの下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ネイピア数	math.e
データ列を使う	import pandas as pd
日付データと日付データの時間差	aDate - aDate2
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
空文字を使う	''
非英数字が文字列中に含まれる	any(not c.isalnum() for c in s)
ヒストグラムの色をやわらかい青に設定する	plt.hist(データ列, color='cornflowerblue')
データフレームをまとめて小数点以下n桁で丸める	df.round(n)
スノーにヒストグラムの色を指定する	plt.hist(データ列, color='snow')
リストの合計値	sum(aList)
オブジェクトは関数か調べる	callable(obj)
イテラブルの全順列	itertools.permutations(iterable)
折れ線グラフの丸マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
文字列を太文字で表示する	print(f'\033[1m{value}\033[0m')
データフレームのカラムの秒	df[col].dt.second
ヒストグラムを珊瑚色で描画する	plt.hist(データ列, color='coral')
赤い丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
option: 色をティールに設定する	color = 'teal'
option: スキップするフッタをnに設定する	skipfooter = n
ライトスチールブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
項目名がマッピングに存在するか調べる	key in aDict
行列式	np.linalg.det(aArray)
データフレームの列の欠損値をxで補う	df[col].fillna(x)
ファイルをSJISとして追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
データフレームから1行だけ列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
ヒストグラムの色をパウダーブルーに変更する	plt.hist(データ列, color='powderblue')
year年month月の日付	datetime.date(year=year, month=month, day=1)
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
グラフで使う横軸に説明をつける	plt.xlabel('x軸ラベル')
ファイルから1バイト読む	f.read(1)
散布図を左三角印で描画する	plt.scatter(データ列x, データ列y, marker='<')
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
option: 欠損値も無視しない	dropna = True
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
データフレームの列の一覧	df.info()
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
データフレームを表示するとき、ヘッダー行を左寄せにセットする	pd.set_option('colheader_justify', 'left')
カラムの名前なしでTSVファイルを読み込む	pd.read_csv(filename, header=None)
option: ライトブルー色を用いる	color = 'lightblue'
データフレームから重複した行をドロップする	df.drop_duplicates()
日付時刻データの日付を使う	aDatetime.date()
データフレームの列名の一覧を求める	df.columns
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
データフレームの重複する行のみを取り出す	df[df.duplicated(keep=False)]
散布図に▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
新しいロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
数列とリストの散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: 線を細くする	linewidth = 3.0
多次元データを多次元尺度構成法を用いて淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
配列の分散	np.var(aArray)
散布図をスラグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームの欠損値をxで補う	df.fillna(x)
ブラック色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t')
n番目のカラムをインデックスとしてCSVファイルTSVファイルを読む	pd.read_csv(filename, index_col=n)
ダークターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
データフレームから最後のカラムを消す	df[df.columns[:-1]]
ファイルパスをUTF8でオープンする]	open(filepath, encoding='utf-8')
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
option: ゲインズボロ色を使う	color = 'gainsboro'
option: やわらかい青を用いる	color = 'cornflowerblue'
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
option: グラフの色をシエナに設定する	color = 'sienna'
ヒストグラムをアクアマリン色として描画する	plt.hist(データ列, color='aquamarine')
option: フォントの色をホットピンクに設定する	color = 'hotpink'
0からnまでの整数列	list(range(n+1))
リストとデータ列の散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
縦軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
散布図をスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='skyblue')
文字列の右端から部分文字列を除去する	s.rstrip(sub)
実数から浮動小数点数を引く	x - y
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
黒い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
ベージュ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
列を用いてデータフレームをソートして新しいインデックスを振り直す	df.sort_values(columns).reset_index()
option: ネイビーにグラフの色を指定する	color = 'navy'
データフレームの列の文字列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
クラス分類の偽陽性を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
実数のn乗の実数剰余	pow(x, n, y)
グラフの大きさを設定する	plt.figure(figsize=(横幅, 高さ))
プロットのx座標を対数に変更する	plt.xscale('log')
タプルの先頭のn要素を取り除く	aTuple[n:]
見やすいグラフを使う準備をする	import seaborn as sns
データフレームのカラムの中にと文字列が存在するか調べる	df[col].isin([value, value2])
データフレームのリストカラムの代表値	df[aList].describe()
等間隔でn個にデータフレームの中の列をビンニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
文字列中のタブ文字を空白に置換する	s.expandtabs(tabsize=n)
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
rgbの星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
整数nの16進数表現	hex(n)
ベージュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
マルーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
nとkのnCk	math.comb(n, k)
predicateFuncが真とならない列の要素を得る	itertools.dropwhile(predicateFunc, iterable)
散布図の▲マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データ列の折れ線グラフをダイアモンド印として描画する	plt.plot(データ列x, データ列y, marker='D')
左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<')
横棒グラフをゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='goldenrod')
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
バギングで回帰分析をする	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
文字列を白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
カラーバーを水平で設定する	plt.colorbar(orientation='horizontal')
辞書をJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
数列とリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
ヒストグラムをスプリンググリーン色として描画する	plt.hist(データ列, color='springgreen')
option: ミッドナイトブルー色を用いる	color = 'midnightblue'
タプルの合計値を求める	sum(aTuple)
配列とリストの散布図を描き、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
データフレームのリストカラムを千の位で四捨五入する	df[aList].round(-3)
リストと配列の散布図をプロットしてその大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
実数の小数部を算出する	math.modf(x)[0]
xとyの商と余りを同時に求める	divmod(x, y)
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
シルバー色としてヒストグラムを描画する	plt.hist(データ列, color='silver')
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightgreen')
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
グラフの描画で明るく色を使う	sns.set(pallete='bright')
フォーマットfmtで文字列をPandasの日付型に変換する	pd.to_datetime(s, format=fmt)
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
オブジェクトのプロパティの値を値に変更する	setattr(obj, プロパティ名, 値)
ターコイズにヒストグラムの色を変更する	plt.hist(データ列, color='turquoise')
リストの各要素を関数に適用した結果で並べ変える	sorted(aList, key=func)
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
双方向キューをクリアする	deq.clear()
浮動小数点数を百の位で丸める	round(x, -2)
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
逆順の両端キューを使う	reversed(deq)
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
データ列の標準偏差	ds.std()
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
リストの文字列が最初に見つかるインデックス	aList.index(element)
配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
option: 色をサーモンに設定する	color = 'salmon'
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
ケンドール順位相関係数でデータフレームの相関行列	df.corr(method='kendall')
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
リストの先頭	aList[0]
option: 赤色を使う	color = 'red'
現在の再帰の最大回数	sys.getrecursionlimit()
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
データフレームを列によって昇順に並べ直す	df.sort_values(by=column, ascending=True)
データフレームのリストカラムの尖度を求める	df[aList].skew()
表データから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
プロットを暗くする	sns.set(pallete='dark')
菱形マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D')
nがn2と等しいかどうか確認する	n == n2
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
カーネル密度による分布図を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
データフレームをグループ化しそれぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
データフレームの列名を指定した列の名前一覧に置き換える	df.columns = columns
折れ線グラフの色をライトスチールブルーに指定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
プラム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
縦棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
項目名がマッピングにあるか	key not in aDict
文字列の開始位置から終了位置までの範囲で部分文字列を数える	s.count(sub, start, end)
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
外れ値に強い線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
シンボル計算を用いる	import sympy
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
改行除外してファイルを一行ずつ読み込む	f.readline()
辞書をJSON形式で出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
折れ線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ダークブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
ヒストグラムをミディアムターコイズ色として描画する	plt.hist(データ列, color='mediumturquoise')
折れ線グラフに左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<')
行列が何のデータ型か調べる	aArray.dtype()
日付データにn日分加える	aDate + datetime.timedelta(days=n)
predicateFuncを適用したときTrueとならないシーケンスの要素	itertools.dropwhile(predicateFunc, iterable)
文字列をユニコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
データフレームの先頭n行	df.head(n)
実数を切り下げて整数に変換する	math.floor(x)
双方向キューの左を使う	deq[0]
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
既存のファイルパスをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
リストとリストの散布図を描画して、丸マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='o', c=rgb)
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
リストとリストについて散布図を描いて、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
リストとリストについて散布図を描画して文字列というデータラベル用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
回帰分析をKNNを用いてする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
データ列を日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
option: アクアマリン色を使う	color = 'aquamarine'
データフレームから一番左側の列を除く	df[df.columns[1:]]
キーが辞書に存在しない場合、要素を追加する	aDict.setdefault(key, element)
データフレームを列名リストを用いて昇順に並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
ドジャーブルーにヒストグラムの色を変更する	plt.hist(データ列, color='dodgerblue')
文字列の開始位置以降に部分文字列が含まれないか判定する	s.find(sub, start) == -1
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
option: ゲインズボロにフォントの色をセットする	color = 'gainsboro'
日付データの曜日を整数で見る	aDate.weekday()
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
表データからランダムにn行を取り出す	df.sample(n)
文字列がタプルの要素	element in aTuple
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
散布図にrgbの大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
イテラブルから集合	set(iterable)
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
nから無限にカウントアップする	itertools.count(start=n)
現在の秒数	datetime.date.today().second
データフレームの指定された二つの列を抽出する	df[[column, column2]]
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
数式の微分を算出する	sympy.diff(e)
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
カウンタのインターセクション演算する	aCounter & aCounter2
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
折れ線グラフの右三角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームの中の列をビン数nとしてビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ヒストグラムの色をオレンジに変更する	plt.hist(データ列, color='orange')
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
CSVファイルファイル名がかどうか	filename.endswith('.csv')
プロットの色を全般的にパステル調にする	sns.set(pallete='pastel')
ファイルパスをEUCとして書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
ヒストグラムの色をオリーブに指定する	plt.hist(データ列, color='olive')
リストを境界値として配列をビン分割する	pd.cut(aArray, aList)
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
データフレームの重複した行数のマスク	df.duplicated()
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
タプルをナンバリングする	enumerate(aTuple)
データフレームから重複した行を削除する	df.drop_duplicates()
回帰モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
文字列の開始位置と終了位置の間に部分文字列があるかどうか調べる	s.find(sub, start, end) != -1
データ列の最頻値を求める	ds.mode()
bとn2から成るペア	(n, n2)
データ列の中に日付データと文字列がいくつ存在するかカウントする	ds.isin([value, value2]).sum()
異なる列をキーにして二つの表データを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
パウダーブルー色でヒストグラムを描画する	plt.hist(データ列, color='powderblue')
折れ線グラフの色を青にセットする	plt.plot(データ列x, データ列y, color='blue')
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
代数計算を使う	import sympy
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
方程式として数式の変数の解を求める	sympy.solve(e, z)
表データから指定した3つの列を抽出する	df[[column, column2, column3]]
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
ゼロ埋めされた整数型の配列を作成する	np.zeros(要素数, dtype=np.int)
カウンタの項目一覧	aCounter.keys()
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
文字列が全て小文字かどうか調べる	s.islower()
ダークグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
赤い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
ロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
option: フォントの色をカーキに設定する	color = 'khaki'
変数について数式のインテグラルを算出する	sympy.integrate(e, z)
アクア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
項目名が辞書に存在するか調べる	key not in aDict
データフレームの指定された列をリストとして取り出す	df[column].values.tolist()
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
入力ストリームを一行ずつ読み込む	f.readline()
タプルのコピー	dict(aDict)
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
文字列を全て小文字に変換する	s.lower()
散布図をナバホホワイト色として描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
option: グラフの色をゴールドに設定する	color = 'gold'
ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
プラットホームはMacOSかどうか確認する	sys.platform.startswith('darwin')
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
リスト中の文字列が最初に見つかる場所を探す	aList.index(element)
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
辞書の全エントリをクリアする	aDict.clear()
タイムスタンプデータにn週間分加算する	aDatetime + datetime.timedelta(weeks=n)
データフレームを関数の値によってグループ分けし、、列挙する	[(name, group) for name, group in df.groupby(関数)]
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
リストと数列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
nが一桁の数	-9 <= n <= 9
nullに等しい値	None
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
ミッドナイトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
option: スレートブルーにグラフの色を設定する	color = 'slateblue'
散布図の▼マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
グラフをポスター用に設定する	sns.set(context='poster')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgrey')
数値を簡単にする	sympy.sympify(e)
日付データの月	aDate.month
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
要素が集合に含まれないか調べる	element not in aSet
実数が整数か調べる	x.is_integer()
リストの末尾からn番目以前の部分を得る	aList[:-n]
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
データフレームのリストカラムの中に存在する日付データと日付データの合計を数える	df[aList].isin([value, value2]).sum()
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
散布図をミディアムスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
option: 三角マーカーを使う	marker = '^'
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
線グラフをビスク色として描画する	plt.plot(データ列x, データ列y, color='bisque')
一行をデータフレームからランダムに抽出する	df.sample()
折れ線グラフをプラム色として描画する	plt.plot(データ列x, データ列y, color='plum')
データフレームのカラムが何秒か見る	df[col].dt.second
要素が全て1の配列	np.ones(要素数, dtype=np.int)
データフレームのリストカラムの75パーセンタイル	df[aList].quantile(0.75)
両端キューは空でないか	len(deq) != 0
サンディーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
option: グラフの色をインディゴに設定する	color = 'indigo'
グラフ中で日本語を使えるようにする	sns.set(font='IPAexGothic')
両端キューの先頭に要素を追加する	deq.appendleft(element)
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ヒストグラムをダークスレートブルー色として描画する	plt.hist(データ列, color='darkslateblue')
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
option: ライトグリーンを使用する	color = 'lightgreen'
数値を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
イテラブルの長さnの順列	itertools.permutations(iterable, n)
ダークブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
実数を整数に変換する	int(x)
青い破線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームを調べる	df.head()
ファイルパスを追加できるようにオープンする]	open(filepath, mode='a')
文字列を部分文字列で区切り、、文字列リストにする	s.split(sub)
横棒グラフをバリーウッド色を用いて描画する	plt.barh(データ列x, データ列y, color='burlywood')
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
配列の形状を変形する	aArray.reshape(行数, 列数)
データ列の出現頻度を可視化する	plt.hist(データ列)
データフレームのカラムの中にいくつ文字列があるかカウントする	df[col].isin([value]).sum()
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
数式を数値計算する	float(e)
数式の部分分数化する	sympy.apart(e)
パープルにヒストグラムの色を指定する	plt.hist(データ列, color='purple')
テキストファイルファイル名が	filename.endswith('.txt')
データフレームを各列毎にグループ化し、、列の分散を算出する	df.groupby(column)[column2].var()
変数を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
データ列が何年か調べる	ds.dt.year
折れ線グラフの左三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
文字列は識別子名	s.isidentifier()
リストの要素数	len(aList)
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
今日の日付時刻	datetime.datetime.today()
ピーチパフ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
グラフの色を色差別なくする	sns.set(pallete='colorblind')
option: ディムグレー色を使う	color = 'dimgrey'
データフレームの列を1000の位で丸める	df[col].round(-3)
線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
ファイル全体を行分割して読む	f.readlines()
二つの最大値	max(x, y)
日付時刻データをn日前にする	aDatetime - datetime.timedelta(days=n)
線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
青い実線でリストの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: n番目のカラムを行に指定する	index_col = n
データフレームから指定した４列を抽出する	df[[column, column2, column3, column4]]
文字列の中の正規表現によるすべてのマッチを使う	re.findall(pattern, s)
シャルトリューズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
実数が有限か確認する	math.isfinite(x)
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
ゴールド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
option: フォントの色をゴールドに設定する	color = 'gold'
option: ポイント印を加える	marker = '.'
データフレームを行によって並べる	df.sort_index()
変数の値をスワップする	x, y = y, x
リストのn番目に文字列を挿入する	aList.insert(n, element)
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
部分文字列を文字列の接頭辞から取り除く	s.removeprefix(sub)
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
カウンタ同士で交差演算する	aCounter & aCounter2
ヒストグラムを耐火レンガ色を用いて描画する	plt.hist(データ列, color='firebrick')
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
アクア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
ベクトルの逆行列	np.linalg.inv(aArray)
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
小数点数の絶対値を求める	math.fabs(x)
データフレームを列によってソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
文字列は文字列より辞書順で前か調べる	s < s2
データフレームのリストカラムの値を正規表現でまとめて置き換える	df[aList].replace(pattern, repl, regex=True)
プロットに水平方向の破線を設定する	plt.axhline(y=0, linestyle='dashed')
データフレームを各列毎に集計して、文字列というグループの個数を求める	df.groupby(column).size()[s]
リスト内の要素が全て真か調べる	all(aList)
データフレームのリスト列の欠損値をxに設定する	df[aList].fillna(x)
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
列名リストの値によってデータフレームをグループ化する	df.groupby(columns)
データフレームの中のカラムを等量で分割数nで分割する	pd.qcut(df[col], n)
集合から全ての要素を取り除く	aSet.clear()
option: トマト色を使う	color = 'tomato'
部分文字列を文字列の左端から除去する	s.removeprefix(sub)
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
option: クリムゾンにグラフの色を設定する	color = 'crimson'
スラッシュで区切って２つの変数をプリントする	print(value, value2, sep='/')
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
nがn2で割り切れないか調べる	n % n2 != 0
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
横棒グラフを描いて中央寄せする	plt.barh(ラベル列, データ列, align='center')
両端キューの大きさ	len(deq)
データフレームの25パーセンタイル	df.quantile(0.25)
データフレームを表示するとき折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
整数nがタプルのどれかか調べる	n in aTuple
散布図を青色として描画する	plt.scatter(データ列x, データ列y, color='blue')
ロバストな線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
ミントクリーム色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
option: グラフの色をマゼンタに設定する	color = 'magenta'
イテラブルを文字列に変換して、'改行で結合する	'\n'.join(map(str, iterable))
表を複数の列によってまとめたグループを使う	df.groupby(columns)
プラットホームがLinuxか	sys.platform.startswith('linux')
データフレームの文字列を未入力値にする	df.replace(s, np.nan)
プロットで使うカラーパレットを指定する	sns.set(pallete=パレット名)
最初の部分文字列で文字列を分けたときの前半の文字列	s.partition(sub)[0]
文字列を代数計算の変数に変換する	sympy.Symbol(s)
実数のハイパボリック・サインの逆数を求める	math.asinh(x)
自然数LCM	math.lcm(n, n2)
データフレームのリストカラムの尖度	df[aList].skew()
タプルの最後からn番目以前の部分を取り出す	aTuple[:-n]
文字列を赤色にする	f'\033[31m{value}\033[0m'
句点文字を全て使う	string.punctuation
赤いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: 無視する列番号をnamesで指定する	skiprows = names
折れ線グラフの色をインディゴにセットする	plt.plot(データ列x, データ列y, color='indigo')
option: バリーウッド色を使う	color = 'burlywood'
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
配列のユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
折れ線グラフのマーカーを△印にする	plt.plot(データ列x, データ列y, marker='^')
有理数の分子	q.numerator
配列の平均値	np.mean(aArray)
横棒グラフをパールバイオレットレッド色を使って描画する	plt.barh(データ列x, データ列y, color='palevioletred')
エクセルファイルファイルからnというシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
線グラフを赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
データフレームを表示するとき、列の最大幅をnに増やす	pd.set_option('max_colwidth', n)
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
全要素を０で初期化した3二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
散らばりを可視化する	plt.scatter(データ列x, データ列y)
箱ヒゲ図に簡単な説明を付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
ひとつ置きにリストを得る	aList[::2]
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
データフレームのカラムを丸めて整数型にする	df[col].round().astype(int)
折れ線グラフの色をダーク・スラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategrey')
変数を赤色で表示できる文字列にする	f'\033[31m{value}\033[0m'
双方向キューは空か調べる	len(deq) == 0
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
y軸の目盛りに文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
データフレームを'A'列によって昇順に破壊的に整列する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
列と列の重複をドロップする	df.drop_duplicates(subset=column)
インディゴ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ナバホホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
表を二つの列によってソートして、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
アリスブルー色でヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
データフレームのリスト列を100の位で四捨五入する	df[aList].round(-2)
配列をビン数nを用いてビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
オプションで出力先を標準出力に設定する	file = sys.stdout
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データ列が正規分布からどの程度歪んでいるか見る	ds.kurt()
データ列の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
最頻値でカラムの欠損値を埋める	ds.fillna(ds.mode().iloc[0])
列とイテラブルをつなぐ	itertools.chain(iterable, iterable2)
option: ライム色を使用する	color = 'lime'
オブジェクトが辞書クラス	isinstance(obj, dict)
横棒プロットの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ビスク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
プロットをデフォルトでいい感じに設定する	sns.set()
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
リストをnからナンバリングする	enumerate(aList, start=n)
ファイルパスをオープンして]バイナリストリームを求める	open(filepath, mode='rb')
nの16進文字列	hex(n)[2:]
option: 色をライトスカイブルーに設定する	color = 'lightskyblue'
データフレームを列でグループ化し、、列の要約統計量を求める	df.groupby(column).describe()[column2]
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
option: ダークオレンジを用いる	color = 'darkorange'
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
折れ線グラフをローングリーン色を使って描画する	plt.plot(データ列x, データ列y, color='lawngreen')
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
紺碧色として散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
タイムスタンプデータをISO形式の文字列に変換する	aDatetime.isoformat()
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
ライトスレイグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
データフレームを複数の列によってまとめたグループを見る	df.groupby(columns)
折れ線グラフの色をミントクリームにする	plt.plot(データ列x, データ列y, color='mintcream')
リスト内の要素は全て真	all(aList)
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
横棒グラフをコーンズシルク色を用いて描画する	plt.barh(データ列x, データ列y, color='cornsilk')
xが一桁の数か調べる	-9 <= x <= 9
option: n番目のカラムをインデックスに設定する	index_col = n
ビスク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
列を集合に変換する	set(iterable)
三つの値を順に出力する	print(value, value2, value3)
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
乱数で要素を埋めたベクトルを作成する	np.random.random(N)
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
ベクトルの形状	aArray.shape
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
option: グラフの色をターコイズに変更する	color = 'turquoise'
最小値でデータフレームの欠損値を埋める	df.fillna(df.min())
散布図を右三角印で描画する	plt.scatter(データ列x, データ列y, marker='>')
リストと配列について散布図を描画して四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
横棒グラフをダークブルー色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
縦棒グラフをライトサーモン色として描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
リストをn個にビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: グラフの色をアクアマリンに指定する	color = 'aquamarine'
デックのstart〜endの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
全要素を1で初期化したベクトル	np.ones(要素数, dtype=np.int)
新しい勾配ブースティング分類木を新規作成する	model = sklearn.ensemble.GradientBoostingClassifier()
シーケンスのそれぞれを関数でフィルタする	map(func, iterable)
データフレームのリスト列の中の欠損値の数を数える	df[aList].isna().sum()
データフレームのリスト列のNaNを最小値で埋める	df[aList].fillna(df[aList].min())
折れ線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームのインデックスをリセットする	df.reset_index()
ファイルパスから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
データフレームのカラムの中の欠損値の個数を数える	df[col].isna().sum()
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
日付データの年を使う	aDate.year
線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
option: △マーカーを使う	marker = '^'
英字の小文字を全部使う	string.ascii_lowercase
小数点数のsin	math.sin(x)
マッピングをソートしてJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
パーセプトロンとしてクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
リストをビン数nでビンニングする	pd.cut(aList, n)
耐火レンガにヒストグラムの色を変更する	plt.hist(データ列, color='firebrick')
データフレームを丸めて、整数型にする	df.round().astype(int)
1で全要素を初期化した行列	np.ones(行数, 列数, dtype=np.int)
文字列がリストに含まれるか調べる	element in aList
実数を切り上げる	math.ceil(x)
JSON形式のファイル入力を読み込んで、dataとする	data = json.load(fin)
集合にリストの要素を追加する	aSet.update(iterable)
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
正規分布のパーセント・ポイント関数を用いる	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
nを十六進文字列にする	hex(n)[2:]
マッピングをチェーンマップにする	collections.ChainMap(aDict)
関数の値ごとにデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
正規分布として疑似乱数を発生させる	random.normalvariate(mu=0.5, sigma=0.2)
データフレームの中の列と列に重複があれば、ドロップする	df.drop_duplicates(subset=column)
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
option: ライトスカイブルーにグラフの色を指定する	color = 'lightskyblue'
文字列を区切りで分割して、文字列リストに変換する	s.split(sep)
option: ライムグリーンに色を指定する	color = 'limegreen'
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='grey')
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
シーケンスを配列に変換する	np.array(iterable)
データフレームから重複した行を残さず、消す	df.drop_duplicates(keep=False)
スクリプトの名前	sys.argv[0]
カラムは正規分布からどれだけ尖っているか見る	ds.skew()
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
option: グラフの色をグレーに指定する	color = 'gray'
分数をインポートする	import fractions
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
データフレームの列をダミー変数にする	pd.get_dummies(df[column])
パールゴールデンロッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
オブジェクトのプロパティの値をセットする	setattr(obj, プロパティ名, 値)
線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
文字列中に部分文字列がないか確認する	sub not in s
データフレームの列を並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
青い実線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データ列の月	ds.dt.month
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
複数の列によってデータフレームをソートして、更新する	df.sort_values(by=column, inplace=True)
文字列の開始位置からと終了位置までの範囲に部分文字列が含まれない	s.find(sub, start, end) == -1
グラフの見た目をデフォルトでイイ感じに設定する	sns.set()
配列を平坦化する	aArray.flatten()
データ列間のR2を求める	sklearn.metrics.r2_score(データ列, データ列2)
スタックが空かどうか	len(deq) == 0
折れ線グラフの大バツマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
日付データが日付データよりあとか調べる	aDate > aDate2
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
散布図をデピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='deeppink')
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
エラーなくリストのオブジェクトの位置を使う	aList.index(element) if element in aList else -1
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
カウンタ同士でユニオン	aCounter | aCounter2
option: スプリンググリーン色を使う	color = 'springgreen'
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
文字列を改行を用いて区切る	s.splitlines()
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
配列の平均値を求める	np.mean(aArray)
ロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
複数の列でデータフレームを並べ、、更新する	df.sort_values(by=column, inplace=True)
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームのリストカラムの中にいくつ文字列が存在するか数える	df[aList].isin([value]).sum()
option: コーンズシルクを使う	color = 'cornsilk'
option: namesをカラムの名前に変更する	names = names
データフレームをグループ化し列に対し最小値を求める	df.groupby(column)[column2].min()
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
浮動小数点数を千の位で丸める	round(x, -3)
折れ線グラフの色をレモンシフォンに指定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategray'
最適な場所に凡例を表示する	plt.legend(loc='best')
データ列の中にがあるかどうか調べる	ds.isin([value])
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
リストとリストについての散布図に下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v')
イテラブルのイミュータブルな集合	frozenset(iterable)
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
option: タブをセパレータで用いる	sep = '\t'
散布図のポイントマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームが重複している	df.duplicated()
多次元データをt-SNEとしてパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
データフレームからn行、サンプリングする	df.sample(n)
データ列とリストの散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
nプラスn2	n + n2
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
表データの中の欠損値を消す	df.dropna()
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
タプルの平均値	sum(aTuple)/len(aTuple)
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
データフレームをValueMapでまとめて置き換える	df.replace(ValueMap)
ミディアムスプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データフレームの列をインデックスに設定する	df.set_index(column)
データフレームのリストカラムを10の位で丸めて整数型にする	df[aList].round(-1).astype(int)
option: ライトコーラル色を使う	color = 'lightcoral'
xの小数点以下'2'桁までを出力する	print(':.2f'.format(x))
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
行列の行ごとの平均値	np.mean(aArray, axis=1)
新しいリッジ回帰とロッソ回帰のハイブリットモデルを用意する	model = sklearn.linear_model.ElasticNet()
ファイルをバイナリ書き込みモードでオープンして]fとする	f = open(filepath, mode='wb')
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
データフレームのカラムの中に存在する文字列の合計を数える	df[col].isin([value]).sum()
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
option: ブルーバイオレットに色を変更する	color = 'blueviolet'
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
辞書から項目名の値をエラーなく得る	aDict.get(key, None)
option: 色をディムグレーに設定する	color = 'dimgrey'
文字列が全てアルファベットか確認する	s.isalpha()
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgray')
整数nの二進表記を使う	bin(n)
実線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='solid')
ゼロ埋めしたブール型のベクトル	np.zeros(要素数, dtype=np.int32)
ファイルとfilenameを結合する	os.path.join(filepath, filename)
分数モジュールを使う	import fractions
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
データフレームの列の中にいくつ日付データがあるか数える	df[col].isin([value]).sum()
横棒グラフの色をrgbにする	plt.barh(ラベル列, データ列, color=rgb)
option: フォントの色を青紫に設定する	color = 'violet'
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
部分文字列が文字列の開始位置番目からと終了位置番目までの間に含まれないかどうか確認する	s.find(sub, start, end) == -1
文字列をシアンで出力する	print(f'\033[36m{value}\033[0m')
バツ印を使い、データ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームのカラムの時を使う	df[col].dt.hour
データフレームを関数によってまとめた表を使う	df.groupby(関数)
リストと配列についての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
横棒プロットを描いて、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
二つの浮動小数点数がほぼ等しいか調べる	math.isclose(x, x2)
option: 紺色を使う	color = 'darkblue'
データ列の未入力値を平均値で補う	ds.fillna(ds.mean())
円グラフを真円にする	plt.axis('equals')
ヒストグラムの描画して正規化する	plt.hist(データ列, density=True)
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
グリッドを点線にする	plt.grid(linestyle='dotted')
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
実数を十六進文字列に変換する	x.hex()
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
多次元データを多次元尺度構成法を用いて濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
option: ３二ビット整数型を用いる	dtype = np.int16
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
非数値データを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
辞書から項目名で指定された項目をポップする	aDict.pop(key)
折れ線プロットにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
エポック秒から日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
棒グラフをダークマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
文字列を黒色で表示する	print(f'\033[30m{value}\033[0m')
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
日付データが日付データより後ろか調べる	aDate > aDate2
モジュールとして自分自身を	sys.modules[__name__]
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
option: グリーンイエロー色を使う	color = 'greenyellow'
プラットフォームの整数の最大値	sys.maxsize
データフレームの列の中にある文字列との合計を求める	df[col].isin([value, value2]).sum()
データフレームをヘッダを付けずにJSONLファイルに保存する	df.to_csv(filename, header=None)
ラインを青い実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
n個に等しい量になるようにリストをビン分割する	pd.qcut(aList, n)
文字列の接尾辞からエラーなく部分文字列を取り除く	s.removesuffix(sub)
ポイントマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
イテラブルとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
Pandasでフォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
折れ線グラフの▼印の色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
小数点数のcosを求める	math.cos(x)
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
各列毎にデータフレームをグループ分けして、列の標準偏差を計算する	df.groupby(column)[column2].std()
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
データフレームのリストカラムの標本標準偏差	df[aList].std()
データ列を分割数nでビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
整数nの八進表現	oct(n)
option: グラフの色をピンクに設定する	color = 'pink'
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
数列とデータ列についての散布図にrgbのクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフの色をダークカーキに変更する	plt.plot(データ列x, データ列y, color='darkkhaki')
空の回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
線グラフをライトスカイブルー色を使って描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
option: グラフの色をダークグレーに変更する	color = 'darkgray'
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
ファイルの絶対ファイルパス	os.path.abspath(filepath)
マゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
中央値でデータフレームの中のカラムをビン分割する	pd.qcut(df[col], 2)
散布図をローングリーン色として描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
配列と配列の散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
リストの最初	aList[0]
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
データフレームの未入力値を最小値に設定する	df.fillna(df.min())
文字列を空白で分割して、文字列リストにする	s.split()
option: 文字コードをBOM付きに設定する	encoding = 'utf_8_sig'
データフレームのカラムが何月か見る	df[col].dt.month
散布図のマーカーを▽にする	plt.scatter(データ列x, データ列y, marker='v')
列のイミュータブルな集合	frozenset(iterable)
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
数値を浮動小数点数にする	float(e)
二つのデータフレームを横向きに連結する	pd.concat([df, df2], axis=1)
整数の最大公約数	math.gcd(n, n2)
線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
縦棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
option: フォントの色をライトブルーに設定する	color = 'lightblue'
分類モデルのF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
nがn2より小さいか	n < n2
option: パールバイオレットレッドにグラフの色を設定する	color = 'palevioletred'
三つの変数を順に表示する	print(value, value2, value3)
部分文字列で文字列を二分し、前半の文字列を見る	s.partition(sub)[0]
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
option: 文字列を分割記号で使う	sep = s
線グラフの色をダークカーキにする	plt.plot(データ列x, データ列y, color='darkkhaki')
キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
珊瑚色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
散布図を赤い三角マーカーで描く	plt.plot(データ列x, データ列y, marker='^', c='r')
ミディアムスプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumspringgreen')
ファイルを書き込み用にSJISでオープンする]	open(filepath, mode='w', encoding='shift_jis')
ヒストグラムを一点鎖線として描画する	plt.hist(データ列, linestyle='dashbot')
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
日付時刻データの日数	aDatetime.day
カウンタの各要素をその出現回数だけ列挙する	aCounter.elements()
スレートブルー色としてヒストグラムを描画する	plt.hist(データ列, color='slateblue')
方程式の解	sympy.solve(e)
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
複数の列によってデータフレームを並べて、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
クラスが名前付きタプルか調べる	issubclass(C, tuple)
ミディアムブルー色としてヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
データフレームの欠損値を第二四分位数で埋める	df.fillna(df.median())
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
データ列間のRMSEを求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
標準入力を得る	sys.stdin
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
線グラフの色を真紅に指定する	plt.plot(データ列x, データ列y, color='crimson')
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
option: 文字コードを文字コードtextに指定する	encoding = text
option: 三二ビット整数型を使う	dtype = np.int16
棒グラフをオレンジレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orangered')
ファイルから拡張子付きのファイル名を使う	os.path.basename(filepath)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
散布図の大バツ印の色を設定する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ダークシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
option: 文字列を改行の代わりに用いる	end = s
ヒストグラムをドジャーブルー色として描画する	plt.hist(データ列, color='dodgerblue')
option: エンコーディングをSJISに指定する	encoding = 'shift_jis'
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
データフレームのリストカラムの中央値	df[aList].median()
文字列の開始位置と終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
データフレームのカラムの空文字を欠損値に変換しドロップする	df[col].replace('', np.nan).dropna()
左三角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
あらかじめ正規表現をコンパイルする	re.compile(pattern)
シルバー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
マップから最後の値をポップする	aDict.popitem()
ヒストグラムの色をダークターコイズに変更する	plt.hist(データ列, color='darkturquoise')
option: 紺色を用いる	color = 'darkblue'
折れ線グラフをシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='cyan')
コーンズシルク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
リストとデータ列について散布図を描いて、マーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
プログラムのファイルの名前	sys.argv[0]
データフレームのNaNを最小値で埋める	df.fillna(df.min())
option: 白色を使う	color = 'white'
線グラフをライトコーラル色として描画する	plt.plot(データ列x, データ列y, color='lightcoral')
バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
タイムスタンプデータを浮動小数点数に変換する	aDatetime.timestamp()
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
実数の小数部	math.modf(x)[0]
option: フォントの色をタンに設定する	color = 'tan'
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
nがn2と等しいかどうか調べる	n == n2
データフレームを各列毎にグループ分けして、文字列という名前のグループを使う	df.groupby(column).get_group(s)
option: グラフの色をライトシアンに変更する	color = 'lightcyan'
文字列がキーワードか調べる	keyword.iskeyword(s)
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
列の組み合せ	itertools.combinations(iterable, n)
マルーンにヒストグラムの色を指定する	plt.hist(データ列, color='maroon')
組の中の最も大きい値	max(aTuple)
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
重複した行を破壊的にデータフレームから削除する	df.drop_duplicates(inplace=True)
ヒストグラムの色をシーグリーンにセットする	plt.hist(データ列, color='seagreen')
散布図を茶色色を用いて描画する	plt.scatter(データ列x, データ列y, color='brown')
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
実数に実数を加える	x + y
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
タブ区切りのファイルからCSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
option: インデックスを自動的な連番に設定する	index_col = None
縦棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
モードでデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mode().iloc[0])
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
ダークオーキッド色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
散布図の印を菱形印にする	plt.scatter(データ列x, データ列y, marker='D')
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
nにn2を足して代入する	n += n2
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
option: シアン色を使う	color = 'cyan'
アリスブルーにヒストグラムの色を変更する	plt.hist(データ列, color='aliceblue')
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
option: バッファリングのサイズを変更する	buffering = 4096
option: データ型を指定する	dtype = np.int8
黒い左三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
イテラブルから多重集合を作る	collections.Counter(iterable)
nを切り捨てながらn2分の一にする	n //= n2
日付と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
日付時刻データとタイムスタンプデータの時間差	aDatetime - aDatetime2
昇順に破壊的に'A'列でデータフレームをソートする	df.sort_values(by='A', ascending=True, inplace=True)
四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s')
最大長を指定して、両端キューを作る	collections.deque(maxlen=n)
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
xの小数点以下'5'桁までを表示する	print(':.5f'.format(x))
リストとイテラブルの散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
日付データの日を見る	aDate.day
データフレームをファイルでJSONLファイルに書き込む	df.to_excel(filename)
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
クラスが名前付きタプルか	issubclass(C, tuple)
空の階層化マップ	collections.ChainMap()
折れ線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
パラメータが0に近づくときの数式の極限値を計算する	sympy.limit(e, z, 0)
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
L1ノルムでデータを正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
データ列の曜日が何日目か調べる	ds.dt.dayofweek
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
浮動小数点数を十の位で丸める	round(x, -1)
データフレームを各列と列の組み合わせ毎にグループ化して個数を算出する	df.groupby([column, column2], as_index=False).count()
空白で文字列を末尾から区切る	s.rsplit()
option: グラフの種類を実線に指定する	linestyle = 'solid'
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
日付時刻データが何曜日か知る	aDatetime.weekday()
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
ひとつでも数字が文字列内に含まれる	any(c.isdigit() for c in s)
多次元尺度構成法で多次元データを濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
ファイルからエクセルデータを読む	pd.read_excel(filename)
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
データ列の欠損値をxで置換する	ds.fillna(x)
散布図に四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
データフレームのカラムの中にある文字列と日付データの合計をカウントする	df[col].isin([value, value2]).sum()
データフレームから数値データの列のみ抽出する	df.select_dtypes('number')
ヒストグラムをリネン色として描画する	plt.hist(データ列, color='linen')
折れ線グラフをロージーブラウン色として描画する	plt.plot(データ列x, データ列y, color='rosybrown')
ヒストグラムをインディゴ色を使って描画する	plt.hist(データ列, color='indigo')
▽マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v')
日付データからn時間を減らす	aDate - datetime.timedelta(hours=n)
グラフの描画で淡く色を使う	sns.set(pallete='muted')
変数について数式の微分を行う	sympy.diff(e, z)
ヒストグラムを赤くする	plt.hist(データ列, color='r')
データ列のヒストグラムを描画する	plt.hist(データ列)
散布図の▲マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームを列によって降順に破壊的に整列する	df.sort_values(by=column, ascending=False, inplace=True)
データフレームのリストカラムの中央値を求める	df[aList].median()
バイナリ書き込みモードでファイルをオープンする]	open(filepath, mode='wb')
option: 左三角マーカーを加える	marker = '<'
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
ケンドールの順位相関係数を使う	scipy.stats.kendalltau(データ列, データ列2)
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
レモンシフォン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームのリスト列を丸めて、整数にする	df[aList].round().astype(int)
ファイルを全て読み込む	f.read()
nが5の倍数か確認する	n % 5 == 0
二変数の最小値を求める	min(x, y)
実数のk進対数	math.log(x, k)
カラムを100の位で四捨五入する	ds.round(-2)
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
日付データが日曜日か調べる	aDate.weekday() == 6
折れ線グラフをライトグレー色を使って描画する	plt.plot(データ列x, データ列y, color='lightgray')
全要素を０で初期化した行列	np.zeros(行数, 列数)
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
八進文字列を整数に変換する	int(s, 8)
データフレームのリストカラムの中にある文字列と文字列の数を数える	df[aList].isin([value, value2]).sum()
option: 値を置き換える	inplace = True
データフレームをに箱ひげ図でグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
'A'列と'B'列で小さい順にデータフレームを並べる	df.sort_values(by=['A', 'B'], ascending=True)
横棒グラフをオレンジレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='orangered')
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
配列の変遷を半透明の一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
青紫色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
Pythonパスの一覧	sys.path
グラフを論文用にセットする	sns.set(context='paper')
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
現在処理中の例外を情報を知る	sys.exc_info()
ヒストグラムをライトイエロー色を用いて描画する	plt.hist(データ列, color='lightyellow')
グラフで利用可能な色の一覧	matplotlib.colors.cnames
0からN未満までの行列	np.arange(N)
option: ライトスレイグレーを使う	color = 'lightslategray'
データフレームを複数の列で昇順に並べ、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを'A'列を用いて並べ直して更新する	df.sort_values(by='A', inplace=True)
変数を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
リストと配列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
データフレームの各グループごとの平均値	df.groupby(column).mean()
option: マーカーの色をタンにする	markerfacecolor = 'tan'
棒グラフをライトスレイグレー色を使って描画する	plt.bar(データ列x, データ列y, color='lightslategray')
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
浮動小数点数の床	math.floor(x)
辞書にキーがないとき、要素を追加する	aDict.setdefault(key, element)
本日が水曜日かどうか調べる	datetime.datetime.today().weekday() == 2
データ列の曜日数	ds.dt.dayofweek
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
データフレームのリストカラムの欠損値を最頻値に変更する	df[aList].fillna(df[aList].mode().iloc[0])
データフレームをグループ化し、各列に対し個数を求める	df.groupby(column)[column2].count()
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
配列をn個に等間隔で分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
タプルを逆順にする	aTuple[::-1]
サポートベクターマシンとしてクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
文字列をコロンで分割して、文字列リストにする	s.split(':')
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
キーがタプル上で定義済み	key in aDict
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
ファイルから1文字、読む	f.read(1)
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
エクセルファイルファイルからnというシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
横軸だけグリッド線	plt.grid(axis='x')
実線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
グラフの補助目盛を有効にする	plt.minorticks_on()
列を配列に変換する	df[column].values
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
折れ線グラフの大バツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
両端キューの先頭の要素	deq[0]
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
タイムスタンプデータからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
ヒストグラムをアクア色として描画する	plt.hist(データ列, color='aqua')
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
バイナリモードでファイルパスをオープンする]	open(filepath, mode='rb')
リストをビン数nを用いて分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
リストを文字列リストに変換して、空白で結合する	' '.join(map(str, iterable))
グラフをスライド用に設定する	sns.set(context='talk')
タプルの末尾	aTuple[-1]
日付時刻データの月数を使う	aDatetime.month
文字列中に部分文字列がないか	sub not in s
リストとリストについての散布図に赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
リストとリストについての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
ラジアンの角度	math.degrees(x)
線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
折れ線グラフの左三角印の色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
n個に等間隔で配列を分割する	pd.cut(aArray, n)
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ふたつの集合がセットと互いに素か	aSet.isdisjoint(aSet2)
カテゴリで色分けしてデータフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
ふたつの関係が真部分集合か調べる	aSet < aSet2
配列とリストについて散布図を描画し、、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
option: シアン色を用いる	color = 'cyan'
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
option: 色をレベッカパープルに設定する	color = 'rebeccapurple'
リストの末尾にリストを展開する	aList.extend(aList2)
option: 最初の列をインデックスに指定する	index_col = 0
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
データフレームのリストカラムの未入力値を前の行の値で埋める	df[aList].fillna(method='ffill')
データフレームの列と列の各列間の相関係数を求める	df[[column, column2]].corr()
option: 色をロージーブラウンに変更する	color = 'rosybrown'
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
折れ線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
リストが空でないか	len(aList) != 0
作画の背景色を暗くする	sns.set(style='darkgrid')
実行時の標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
ヒストグラムをカラーマップとして描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
文字列のサフィックスは部分文字列	s.endswith(sub)
タプルの最初を求める	aTuple[0]
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
日付時刻データにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
データ列を等量でビン数nとしてビン分割する	pd.qcut(ds, n)
option: グラフの色を暗い赤に設定する	color = 'darkred'
ファイルパスをオープンして]、バイナリストリームを求める	open(filepath, mode='rb')
option: 色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
変数について数式の積分を行う	sympy.integrate(e, z)
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
サーモンにヒストグラムの色を変更する	plt.hist(データ列, color='salmon')
n2がn以上、かつ、n3以下かどうか	n <= n2 and n2 <= n3
線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
既存のベクトルをベースに全要素が0の配列	np.zeros_like(aArray)
横棒グラフを淡いピンク色色を用いて描画する	plt.barh(データ列x, データ列y, color='lightpink')
最大値・最小値の範囲で一様な乱数	random.uniform(最小値, 最大値)
全要素を0で初期化した行列	np.zeros(要素数)
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
上限から下限までの区間でヒストグラムを描画する	plt.hist(データ列, range=(start, end))
見やすいグラフを描画する準備をする	import seaborn as sns
option: 先頭のカラムをインデックスにセットする	index_col = 0
データフレーム全体をインデックスによって降順でソートする	df.sort_index(ascending=False)
コーラル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
赤い破線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
散布図に黒い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
nがn2か確認する	n == n2
オプションで、標準出力に出力する	file = sys.stdout
双方向キューが空でない	len(deq) != 0
リストとリストの散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
カウンタをイテラブルを使って更新する	aCounter.update(iterable)
文字列を黒色にする	f'\033[30m{value}\033[0m'
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
列を中央値でビン分割する	pd.qcut(ds, 2)
ファイルパスから読み込みストリームを開いて]fとする	f = open(filepath, mode='r')
実数を実数で割った余り	x % y
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームのリスト列の未入力値をモードで補う	df[aList].fillna(df[aList].mode().iloc[0])
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ふたつの集合が互いに素かどうか調べる	aSet.isdisjoint(aSet2)
option: ダークグリーン色を使用する	color = 'darkgreen'
データフレームのカラムが何時か見る	df[col].dt.hour
両端キューに要素をプッシュする	deq.append(element)
データフレームの中に存在するの合計を求める	df.isin([value]).sum()
散布図をティール色で描画する	plt.scatter(データ列x, データ列y, color='teal')
横棒グラフをミディアムスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
リストの末尾のn要素を除く	aList[:-n]
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
ヒストグラムの色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
ディムグレーにヒストグラムの色を変更する	plt.hist(データ列, color='dimgrey')
日付データが日付データより後ろ	aDate > aDate2
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
文字列をケースを無視して正規表現で区切る	re.split(pattern, s, flags=re.IGNORECASE)
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
折れ線グラフの▽印の色を指定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
ダイアモンド印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
折れ線グラフのバツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
nまでの奇整数列を得る	list(range(1, n, 2))
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
整数型の０で全要素を初期化した行列を作成する	np.zeros(行数, 列数, dtype=np.int)
ヒストグラムの色をピーチパフに変更する	plt.hist(データ列, color='peachpuff')
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
文字列を走査し、パターンにASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
マゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
散布図の丸マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
option: ライトグレーにフォントの色を変更する	color = 'lightgray'
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
ダークグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
縦棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームのカラムは何秒か見る	df[col].dt.second
改行なしに文字列をプリントする	print(value, end='')
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
降順に'A'列によって破壊的にデータフレームをソートする	df.sort_values(by='A', ascending=False, inplace=True)
3自然数の最大公約数	math.gcd(n, n2, n3)
インデント付きでマッピングを文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
折れ線グラフの大バツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
横棒グラフをロイヤルブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='royalblue')
組の末尾からn番目以前の要素を取り出す	aTuple[:-n]
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
スピアマンでデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
option: アクアにグラフの色を設定する	color = 'aqua'
option: ダークスラテグレーにフォントの色を設定する	color = 'darkslategray'
縦棒グラフをミディアムターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
タイムスタンプデータが日付時刻データより先	aDatetime < aDatetime2
データフレームを表示するとき、データフレームをn列まで表示するようにする	pd.set_option('display.max_columns', n)
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
二進文字列をバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
赤い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='r')
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
データフレームの行を振り直す	df.reset_index()
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
散布図に黒い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
year年month月day日hour時minute分の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
プロットのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
区切り記号で文字列を区切って、列挙する	s.split(sep)
文字列を赤色で表示する	print(f'\033[31m{value}\033[0m')
乱数で要素を埋めた行列	np.random.random(N)
タイムスタンプデータの日数を使う	aDatetime.day
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
エクセルファイルファイルからエクセルファイルを読む	pd.read_excel(filename)
アクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データフレームを複数の列でで破壊的にソートする	df.sort_values(by=column, inplace=True)
配列の合計値	np.sum(aArray)
option: グラフの色をカデットブルーに変更する	color = 'cadetblue'
データ列のタイムゾーンを文字列に指定する	ds.tz_convert(s)
折れ線グラフの色をダークグリーンに変更する	plt.plot(データ列x, データ列y, color='darkgreen')
nからn2までの整数リストを使う	list(range(n, n2+1))
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
両端キュー中の要素のインデックス	deq.index(element)
折れ線グラフの色をスノーに変更する	plt.plot(データ列x, データ列y, color='snow')
文字列をバイト列にする	s.encode(encoding='utf-8', errors='strict')
ヒストグラムの色をダークスラテグレーにする	plt.hist(データ列, color='darkslategray')
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
nをn2で割った余りをnに代入する	n %= n2
プロットを全般的に淡くする	sns.set(pallete='muted')
散布図をrgbの四角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
サドルブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームの列が文字列が含まれない行を取り出す	df[not df[column].str.contains(s)]
標準出力のバッファをフラッシュする	sys.stdout.flush()
やわらかい青色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
option: グラフの色をライムに設定する	color = 'lime'
折れ線グラフの大バツマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームのNaNを後の値で埋める	df.fillna(method='bfill')
カラムの中に文字列が含まれるか	ds.isin([value])
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
四分位数でリストをビン分割する	pd.qcut(aList, 4)
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
ヒストグラムをターコイズ色として描画する	plt.hist(データ列, color='turquoise')
ヒートマップでデータフレームの相関行列を描画する	sns.heatmap(df.corr())
配列と配列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームの列の中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
イテラブルを多重集合に変換する	collections.Counter(iterable)
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
棒グラフを茶色色として描画する	plt.bar(データ列x, データ列y, color='brown')
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
小数点数の仮数部	math.frexp(x)[0]
変数を黄色でプリントする	print(f'\033[33m{value}\033[0m')
データフレームから重複を消す	df.drop_duplicates()
データフレームの列の値がxより大きくx2より小さいデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
文字列の無限のイテラブル	itertools.repeat(element)
散布図の四角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
折れ線グラフの色をオリーブに変更する	plt.plot(データ列x, データ列y, color='olive')
散布図をモカシン色として描画する	plt.scatter(データ列x, データ列y, color='moccasin')
文字列をシンボルに変換する	sympy.Symbol(s)
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
実数の双曲線正弦	math.sinh(x)
オブジェクトのオブジェクト識別子	id(obj)
日付データにn週間を加える	aDate + datetime.timedelta(weeks=n)
破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
赤い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='r')
数列とイテラブルの散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
多次元尺度構成法でパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
リストと数列について散布図を描画して、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
スタックのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
リストをビン分割する	pd.cut(aList, aList)
データフレームからランダムにn行を抽出する	df.sample(n)
カラムの歪度	ds.kurt()
黒い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
平均付き箱髭図を描画する	plt.boxplot(データ列, showmeans=True)
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
組をひとつ置きに取り出す	aTuple[::2]
上三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
イテラブルを文字列に変換して'改行で連結する	'\n'.join(map(str, iterable))
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
集合に列を追加更新する	aSet.update(iterable)
散布図に黒い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図の左三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ロイヤルブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
データ列を閾値を使って二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
散布図に▽印を使用する	plt.scatter(データ列x, データ列y, marker='v')
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
グラフのy座標を対数目盛に変更する	plt.yscale('log')
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
ゼロ埋めした符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
折れ線グラフの色をマルーンに変更する	plt.plot(データ列x, データ列y, color='maroon')
プログラムを正常に停止する	sys.exit(0)
線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
空の単回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
データフレームの相関行列ピアソン相関係数として	df.corr(method='pearson')
値を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
双方向キューをリストに変換する	list(deq)
ボックスチャートをプロットし、平均線を加える	plt.boxplot(データ列, meanline=True)
前もってASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
ピアソンの相関係数を使う	scipy.stats.pearsonr(データ列, データ列2)
データフレームのインデックスを振り直す	df.reset_index()
散布図を淡いピンク色色として描画する	plt.scatter(データ列x, データ列y, color='lightpink')
改行する	print()
ヒストグラムの色をマゼンタに指定する	plt.hist(データ列, color='magenta')
シエナ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
文字列の左側の空白を除く	s.lstrip()
ライトコーラル色としてヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
formatパターンの文字列をタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
横棒グラフをスラグレー色を使って描画する	plt.barh(データ列x, データ列y, color='slategrey')
複数のシートをファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
option: ミディアムスレートブルーにフォントの色を設定する	color = 'mediumslateblue'
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
標準入力から1行だけ読む	sys.stdin.readline()
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
カウンタの項目一覧を求める	aCounter.keys()
nとn2の論理積	n & n2
イテラブルからサンプリングする	random.sample(iterable)
データフレームのリストカラムの中に存在すると文字列の合計を求める	df[aList].isin([value, value2]).sum()
ふたつのリストの共通りストを計算する	list(set(aList) & set(aList2))
ターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データフレームのstart行目からend行目まで抽出する	df[start:end]
実線に折れ線グラフのスタイルを設定する	plt.plot(データ列x, データ列y, linestyle='solid')
option: どのカラムもインデックスに設定しない	index_col = None
option: ダークサーモンを用いる	color = 'darksalmon'
列のユニークな値の個数	df[col].nunique()
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ヘッダを付けずにJSONLファイルにデータフレームを保存する	df.to_csv(filename, header=None)
option: 下三角印を使う	marker = 'v'
option: ピーチパフ色を使用する	color = 'peachpuff'
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
凡例の位置を指定する	plt.legend(loc=(x, y))
ベクトルのユニークな要素	np.unique(aArray)
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
縦棒グラフを描画し、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()//60
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
Pandasでフォーマットでデータ列をPandasの日付型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
option: 青色を使う	color = 'blue'
ファイルを書き込みモードを用いて開く]	open(filepath, mode='w')
文字列が文字列リストのいづれかテストする	s in aStringList
作画のカラーパレットを指定する	sns.set(pallete=パレット名)
データフレームのリストカラムの平均値を算出する	df[aList].mean()
組のn番目からn2番目までの部分を取り出す	aTuple[n:n2]
日付データの曜日を整数で使う	aDate.weekday()
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
散布図の▲印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
ゼロ埋めされたベクトル	np.zeros(要素数)
整数nを二進文字列に変換する	bin(n)[2:]
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
データフレーム全体を行によってソートする	df.sort_index()
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームのカラムは正規分布からどの程度歪んでいるか見る	df[col].kurt()
文字列が全て数字かどうか調べる	s.isdigit()
数値の出力を改行なしに行う	print(value, end='')
リストを縦軸、データ列をx軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
option: バツマーカーを使う	marker = 'x'
データフレーム全体をインデックスによってソートする	df.sort_index()
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
option: オリーブ色を使用する	color = 'olive'
横棒グラフをモカシン色を用いて描画する	plt.barh(データ列x, データ列y, color='moccasin')
線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
ファイルに文字列を書く	f.write(s)
文字列の出力を改行せずに行う	print(value, end='')
データ列の欠損値をメディアンに設定する	ds.fillna(ds.median())
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
ミッドナイトブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームの重複する行数のマスク	df.duplicated()
ゲインズボロ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
自然数の順列の総数	math.perm(n)
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームの列の値がxの行を抽出する	df[df[column] == x]
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
ヒストグラムをミディアムシアグリーン色を用いて描画する	plt.hist(データ列, color='mediumseagreen')
文字列の中で複数行対応としてパターンにマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
空の回帰木モデルを用意する	model = sklearn.tree.DecisionTreeRegressor()
ヒストグラムをサーモン色として描画する	plt.hist(データ列, color='salmon')
文字列をセパレータで区切る	s.split(sub)
モカシン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
文字列を改行で区切り、文字列リストに変換する	s.splitlines()
0からN未満までの配列	np.arange(N)
太字で変数をプリントする	print(f'\033[1m{value}\033[0m')
データフレームの分散	df.var()
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
散布図の上三角印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
整数nの二進文字列	bin(n)[2:]
黒い下三角マーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='v', c='k')
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
文字列内にひとつでも英数字がある	any(c.isalnum() for c in s)
データフレームのカラムを100の位で丸めて、整数にする	df[col].round(-2).astype(int)
四分位数ごとにデータ列を分割する	pd.qcut(ds, 4)
ケンドールの順位相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
データフレームの列の欠損値を中央値に指定する	df[col].fillna(df[col].median())
縦軸の目盛りの表示値を変更する	plt.yticks(目盛りの値リスト)
ヒストグラムを赤色として描画する	plt.hist(データ列, color='red')
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
偽陽性を避けたい指標を用いる	sklearn.metrics.precision_score(正解データ列, 予測データ列)
両端キューをポップする	deq.pop()
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
主成分分析で多次元データをパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
ファイルからの入力ストリームを見る	open(filepath)
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
データフレームから重複するデータを残さず、消す	df.drop_duplicates(keep=False)
データフレームを関数でまとめたグループ	df.groupby(関数)
横棒グラフを描いてバーの幅をセットする	plt.barh(ラベル列, データ列, width=0.5)
折れ線グラフのバツ印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ライトグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
サンディーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
数列と数列について散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
フクシア色として散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データ列の時	ds.dt.hour
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
折れ線グラフの色をミディアムスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
出現頻度を作図する	plt.hist(データ列)
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: ポイントマーカーを描画する	marker = '.'
option: グラフの色を青緑に変更する	color = 'teal'
リストとリストについての散布図に黒いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列がリストの要素でないか調べる	element not in aList
データフレームの中で、列の重複を調べる	df.duplicated(subset=column)
凡例をベストな位置に表示する	plt.legend(loc='best')
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: フォントの色をミディアムパープルに設定する	color = 'mediumpurple'
スノー色としてヒストグラムを描画する	plt.hist(データ列, color='snow')
option: マルーン色を用いる	color = 'maroon'
ミディアムアクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumaquamarine')
データ列は何年か見る	ds.dt.year
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
option: グラフの色をフォレストグリーンに指定する	color = 'forestgreen'
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
列のユニークな値の個数	ds.nunique()
nからn2までの一つ置きの整数列	list(range(n, n2+1, 2))
文字列を新しい文字列で全て置き換える	s.replace(sub, newsub)
ダークレッド色でヒストグラムを描画する	plt.hist(データ列, color='darkred')
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
データ列と配列についての散布図に▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフに四角印を加える	plt.plot(データ列x, データ列y, marker='s')
タプルをn倍する	aTuple * n
option: ライトスレイグレー色を使う	color = 'lightslategrey'
散布図にrgbのクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
option: 配列のデータ型を指定する	dtype = bool
表データの列が正規表現文字列にマッチしないデータを選択する	df[not df[column].str.match(s)]
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
文字列を末尾から空白で分割する	s.rsplit()
プロットを正方形にする	plt.axis('equals')
散布図をラベンダーブラッシュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
option: ▽マーカーを加える	marker = 'v'
散布図の△マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
実数を実数で割る	x / y
マッピングから最後の項目をポップする	aDict.popitem()
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
文字列をパターンで分割する	re.split(pattern, s)
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
紺色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
文字列がリストの要素でないか確認する	element not in aList
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
カラーパレットを色差別なくする	sns.set(pallete='colorblind')
文字列の左端から空白を除去する	s.lstrip(' ')
プロットをスライド用に設定する	sns.set(context='talk')
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
線グラフの色をライトスカイブルーにセットする	plt.plot(データ列x, データ列y, color='lightskyblue')
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
データフレームを未入力値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
集合が空でないかどうか調べる	len(aSet) != 0
グラフ中のフォントを設定する	sns.set(font=フォント名)
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
UNIXコマンドtextを実行する	os.system(text)
最後の部分文字列で文字列を分割したときの前半の文字列	s.rpartition(sub)[0]
現在の曜日を使う	datetime.datetime.today().weekday()
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
データフレームのリスト列の欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
グラフのタイトルを設定する	plt.title('グラフの名称')
文字列をカンマで分割して、文字列リストにする	s.split(',')
option: パープル色を使う	color = 'purple'
文字列の先頭の文字	s[0]
ファイルパスを書き込みモードで開く]	open(filepath, mode='w')
文字列をカンマで区切って、列挙する	s.split(',')
二つの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
棒グラフをシエナ色として描画する	plt.bar(データ列x, データ列y, color='sienna')
データフレームのカラムが文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
小さい順にデータフレームを'A'列と'B'列によってソートして更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ヒストグラムをダーク・スラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategrey')
ベクトルの内積	np.dot(aArray, aArray2)
黒い四角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームのインデックスがnの行を抽出する	df.loc[n]
ライトイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
文字列が文字列リストにあるか	s in aStringList
乱数の行列を作る	np.random.random((行数, 列数))
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
ヒストグラムの色をグリーンにセットする	plt.hist(データ列, color='green')
イテラブルのコンビネーションを得る	itertools.combinations(iterable, n)
文字列をエンコーディングによってバイト列に変換する	s.encode(encoding=encoding)
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
文字列が全て空白文字かどうか調べる	s.isspace()
xが一桁の数かどうか調べる	-9 <= x <= 9
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
リストとリストについての散布図に黒い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
タプルをひとつ置きに取り出す	aTuple[::2]
行列の要素ごとのアダマール積	np.multiply(aArray, aArray2)
エラーなく辞書からキーの値を得る	aDict.get(key, None)
配列とリストについて散布図をプロットして、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
データフレームのカラムの名前一覧で指定された列を落とす	df.drop(columns, axis=1)
オリーブ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
文字列の先頭で正規表現に複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか	s.find(sub, start, end) == -1
多い順にカウンタを列挙する	aCounter.most_common()
散布図に下三角印を使う	plt.scatter(データ列x, データ列y, marker='v')
xでデータフレームのリストカラムのNaNを補う	df[aList].fillna(x)
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
データフレームを列でで大きい順に並べる	df.sort_values(by=column, ascending=False)
丸マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
'A'列と'B'列によって破壊的にデータフレームを昇順に整列する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
両端キューのstart番目からend番目のデータを見る	collections.deque(itertools.islice(deq, start, end))
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
文字列中に非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
散布図を赤い丸マーカーとして描く	plt.plot(データ列x, データ列y, marker='o', c='r')
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
スチールブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
本日が土曜日か確認する	datetime.datetime.today().weekday() == 5
シーケンスを2回あわせたデカルト積	itertools.product(iterable, repeat=2)
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
数式を変数についてn階微分する	sympy.diff(e, z, n)
データ列の変遷を色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
option: 大バツマーカーを加える	marker = 'X'
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
グレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
データフレームを使う	import pandas as pd
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
現在が何分か知る	datetime.date.today().minute
線グラフを赤い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
option: 四角マーカーを描画する	marker = 's'
双方向キューの先頭にイテラブルの各要素を入れる	deq.extendleft(iterable)
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データフレームを列によって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
option: リネンにグラフの色を指定する	color = 'linen'
折れ線グラフを描画し、、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
カウンタからゼロカウントを取り除く	+aCounter
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
最大値と最小値を使って正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
カラムをキーにして2つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
データフレームを各カテゴリごとに色付けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データ列の一意な値の個数を見る	ds.nunique()
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
オブジェクトは文字列型	isinstance(obj, str)
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='turquoise')
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
データフレームを'A'列によってグループ化し、要約統計量を求める	df.groupby('A').describe()
クラス分類の偽陰性をヒートマップとして調べる	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
データフレームのリスト列の要約統計量	df[aList].describe()
８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int8)
文字列の開始位置から先に部分文字列が含まれないか	s.find(sub, start) == -1
四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
デックの末尾にリストの各要素を追加する	deq.extend(iterable)
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
列ごとにデータフレームをグループ化して、グループの最小値を求める	df.groupby(column).min()
ファイルからの読み込みストリームを使う	open(filepath)
ガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
スレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
部分文字列が文字列の開始位置と終了位置の間に含まれるか	s.find(sub, start, end) != -1
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
黒い丸マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='k')
データフレームの欠損値をメディアンに設定する	df.fillna(df.median())
折れ線グラフを丸印で描画する	plt.plot(データ列x, データ列y, marker='o')
空の辞書	{}
原点から点までの距離	math.hypot(x, y)
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
組の平均値	sum(aTuple)/len(aTuple)
Pandasで、文字列を書式でdatetime64型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
集合をイミュータブルな集合に変換する	frozenset(aSet)
option: ライトグレー色を使う	color = 'lightgrey'
縦棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
等間隔の配列を作成する＼	np.arange(開始値, 終了値, 等差)
option: コロンをセパレータで使う	sep = ':'
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
黒い三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームの中の欠損値の合計を数える	df.isna().sum()
RGBで折れ線プロットの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
option: パールゴールデンロッド色を使用する	color = 'palegoldenrod'
文字列内にひとつでも空白が含まれるかどうか	any(c.isspace() for c in s)
折れ線プロットにラベルをつける	plt.plot(データ列x, データ列y, label='ラベル')
ケンドールの相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
リストを反転する	reversed(aList)
珊瑚色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
列によってデータフレームをグループ化し、、それぞれのグループの個数を求める	df.groupby(column).count()
ベクトルの行ごとの平均	np.mean(aArray, axis=1)
option: ビスク色を使う	color = 'bisque'
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
ヒストグラムの色を黄色に変更する	plt.hist(データ列, color='yellow')
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
データフレームから型リストのデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
先頭の列をデータフレームから除く	df[df.columns[1:]]
数列とリストについて散布図を描画して、三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
イテラブルとリストの散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
リストを箱ヒゲ図で描く	plt.boxplot(データ列)
現在が何時か知る	datetime.date.today().hour
改行を使って文字列を区切る	s.splitlines()
実数の正接の逆数	math.atan(x)
散布図をダークカーキ色として描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
option: グラフの色をコーンズシルクに変更する	color = 'cornsilk'
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
折れ線グラフの色をスチールブルーにする	plt.plot(データ列x, データ列y, color='steelblue')
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
半透明の破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
横軸の目盛りを対数に変更する	plt.xscale('log')
辞書の項目名に対応した値	aDict.get(key)
オブジェクトの参照カウント	sys.getrefcount(obj)
スタッキングを用いてクラス分類を行う	sklearn.ensemble.StackingClassifier()
option: 色をシエナにする	color = 'sienna'
中央値でカラムの欠損値を埋める	ds.fillna(ds.median())
グラフの描画で濃く色調を用いる	sns.set(pallete='deep')
カンマで区切って二つの文字列をプリントする	print(value, value2, sep=',')
横棒グラフをアイボリー色を用いて描画する	plt.barh(データ列x, データ列y, color='ivory')
リストの長さを制限する	collections.deque(iterable, maxlen=n)
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
破壊的にデータフレームを複数の列を用いてによって並べる	df.sort_values(by=column, inplace=True)
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
集合のイミュータブル版	frozenset(aSet)
タイムスタンプデータを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
回帰モデル教師データとしてを学習する	model.fit(説明変数, 目的変数)
折れ線グラフの色をダークオリーブグリーンに指定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
数列と配列について散布図を描画してマーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
タプルのn番目の	aTuple[n]
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
nとn2の排他的論理和	n ^ n2
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
タイムスタンプデータが土曜日	aDatetime.weekday() == 5
データフレームのインデックスがnの行を取り出す	df.loc[n]
ヒストグラムの色をティールに設定する	plt.hist(データ列, color='teal')
スクリプトの名前を調べる	sys.argv[0]
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
赤い左三角マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列の左側からタブを取り除く	s.lstrip('\t')
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
データフレームをインデックスによってソートする	df.sort_index()
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
暗い赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
異なる列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
ヒストグラムを描画し、、区間数を設定する	plt.hist(データ列, bins=区関数)
２つのデータフレームを横方向にマージする	pd.merge(df, df2)
データフレームの中のカラムと列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
オブジェクトは集合クラスのインスタンス	isinstance(obj, set)
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
等差数列から整数乱数を算出する	random.randrange(start, end, step)
データフレームとデータ列を横方向に合体させる	pd.concat([df, ds], axis=1)
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
データフレームの数値を一度に丸める	df.round()
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
点線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
横棒グラフをダークオーキッド色として描画する	plt.barh(データ列x, データ列y, color='darkorchid')
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
シーケンスを行列に変換する	np.array(iterable)
折れ線グラフをミディアムブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumblue')
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
nをn2分の一にする	n /= n2
データフレームを複数の列の値によってグループ分けする	df.groupby(columns)
グリッド線を黄色くする	plt.grid(color='y')
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
両端キューの末尾の要素	deq[-1]
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
縦棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
バツマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
キーワード引数でマッピングに更新する	aDict.update(**kwargs)
データフレームのn行目をインプレイスで落とす	df.drop(n, axis=0, inplace=True)
散布図を下三角マーカーで描画する	plt.scatter(データ列x, データ列y, marker='v')
数式を積分する	sympy.integrate(e)
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
データフレームの指定された列を抽出する	df[column]
リストを縦軸、イテラブルを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
変数を白色でプリントする	print(f'\033[37m{value}\033[0m')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgrey')
option: ディープスカイブルーを使う	color = 'deepskyblue'
配列とリストについての散布図に赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
要素を双方向キューの末尾から削除する	deq.pop()
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームの尖度	df.skew()
棒グラフをスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='skyblue')
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
数列と数列について散布図を描いて、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
option: 改行の代わりに文字列を用いる	end = s
データフレームの列の文字列が文字列で終わるデータを取り出す	df[df[column].str.endswith(s)]
部分文字列が部分文字列で始まる	s.startswith(sub)
最大値・最小値の範囲で一様な疑似乱数を発生させる	random.uniform(最小値, 最大値)
option: 読み込まないフッタをnに設定する	skipfooter = n
データフレームのカラムの尖度	df[col].skew()
散布図に四角マーカーを加える	plt.scatter(データ列x, データ列y, marker='s')
散布図の丸マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
棒グラフをコーンズシルク色として描画する	plt.bar(データ列x, データ列y, color='cornsilk')
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
両端キューのデータをインプレースに反転する	deq.reverse()
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
ライトイエローにヒストグラムの色を変更する	plt.hist(データ列, color='lightyellow')
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
イテラブルとデータ列について散布図を描画して丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
横棒グラフをサドルブラウン色として描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
線グラフの色をマゼンタに変更する	plt.plot(データ列x, データ列y, color='magenta')
ラインを半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: フォントの色をブルーバイオレットに設定する	color = 'blueviolet'
散布図を大バツ印を使って描画する	plt.scatter(データ列x, データ列y, marker='X')
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
ヒストグラムを三つ並べてプロットする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ベクトルの要素ごとに加算する	aArray + aArray2
二つのデータフレームを列をキーにして内部ジョインする	pd.merge(df, df2, on=column, how='inner')
横棒グラフをオレンジ色を用いて描画する	plt.barh(データ列x, データ列y, color='orange')
replにデータフレームのカラムをまとめて正規表現patternで置き換える	df[col].replace(pattern, repl, regex=True)
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
データフレームの列概要	df.info()
三２ビット整数型のゼロ埋めした配列を作る	np.zeros(要素数, dtype=np.int16)
列によってデータフレームをグループ化して、グループ毎の個数を算出する	df.groupby(column).count()
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
リストを複製する	aList.copy()
データフレームの行を抽出する	df[start:end]
整数nがリストのどれかか調べる	n in aList
データフレームは正規分布からどれだけ歪んでいるか見る	df.kurt()
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
実数のkを底とする対数を求める	math.log(x, k)
線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームを列で並べる	df.sort_values(by=column)
データフレームの中に含まれる文字列の合計を数える	df.isin([value]).sum()
線グラフを赤い実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームを'A'列で昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
縦棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
サンディーブラウン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
ヒストグラムの色をダークブルーに指定する	plt.hist(データ列, color='darkblue')
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
バツマーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
イテラブルを文字列リストに変換して、タブによって連結する	'\t'.join(map(str, iterable))
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
組の中の最大値を求める	max(aTuple)
option: グラフの色をブランチドアーモンドに指定する	color = 'blanchedalmond'
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
タプルの末尾の要素	aTuple[-1]
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
双方向キューのデータをn個分ローテンションする	deq.rotate(n)
データフレームを複数の列の値によってグループ化し記述統計量を求める	df.groupby(columns).describe()
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
option: グラフの色をブラウンに設定する	color = 'brown'
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
散布図に右三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='>')
破壊的にデータフレームを二つの列で降順にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームの列をヒストグラムにする	plt.hist(df[column])
一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列を区切りで区切り、列挙する	s.split(sep)
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
プラム色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
option: フォントの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
option: バイナリ書き込みモードに設定する	mode = 'wb'
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
文字列中の部分文字列をカウントする	s.count(sub)
折れ線グラフのバツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
データフレームを各列と列の組み合わせ毎に集約し、、平均値を求める	df.groupby([column, column2], as_index=False).mean()
縦棒グラフをホットピンク色として描画する	plt.bar(データ列x, データ列y, color='hotpink')
散布図の四角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
両端キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
タプルを番号付けする	enumerate(aTuple)
折れ線グラフの色をライトブルーに指定する	plt.plot(データ列x, データ列y, color='lightblue')
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をライムグリーンに変更する	plt.hist(データ列, color='limegreen')
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='turquoise')
option: タン色を使用する	color = 'tan'
ファイルをオープンして]、バイナリ書き込みストリームを求める	open(filepath, mode='wb')
データフレームの列からユニークな値を抽出し、リスト化する	df[col].unique().tolist()
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
両端キューの先頭から要素を取り除く	deq.popleft()
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
文字列は全て十進数字か調べる	s.isdecimal()
データ列をビン数nでビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
文字列の中で複数行対応としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
option: アンティークホワイト色を使う	color = 'antiquewhite'
多次元データを主成分分析としてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
option: ダークターコイズ色を使う	color = 'darkturquoise'
文字列の開始位置以降に部分文字列が含まれる	s.find(sub, start) != -1
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: 青紫色を使う	color = 'violet'
ファイルにxを文字列にして書き込む	f.write(str(x))
日付時刻データの年数	aDatetime.year
option: ミッドナイトブルー色を使う	color = 'midnightblue'
数値の符号を同じにする	math.copysign(x, x2)
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
両端キュー中の要素の位置	deq.index(element)
辞書のキーとその値を列挙する	aDict.items()
nとn2が同じ値か調べる	n == n2
ダークシアン色でヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
option: フォントの色をコーンズシルクに変更する	color = 'cornsilk'
データフレームとデータ列を横方向にくっつける	pd.concat([df, ds], axis=1)
実数を実数で割って、切り捨てる	x // y
折れ線グラフの色をミディアムアクアマリンに指定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
縦軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
データ列を丸めて整数型にする	ds.round().astype(int)
折れ線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgrey')
散布図の丸印を青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
option: スラグレーにフォントの色を設定する	color = 'slategrey'
イテラブルを多重集合にする	collections.Counter(iterable)
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
要素がマッピングの値に含まれていない	element not in aDict.values()
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
イテラブルを文字列リストに変換して、カンマによってつなげる	','.join(map(str, iterable))
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームを'A'列の値によってまとめたグループ	df.groupby('A')
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
論文にプロットの用途を指定する	sns.set(context='paper')
オブジェクトが浮動小数点数クラスかどうか	isinstance(obj, float)
ゼロ埋めされたブール型の配列を作る	np.zeros(要素数, dtype=np.int32)
折れ線グラフの色をターコイズに変更する	plt.plot(データ列x, データ列y, color='turquoise')
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
青い点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
折れ線グラフをダーク・スラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
折れ線グラフの色をペルーに変更する	plt.plot(データ列x, データ列y, color='peru')
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
option: フォントの色をデピンクに変更する	color = 'deeppink'
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
xが一桁の数かどうか確認する	-9 <= x <= 9
ダークサーモン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
分類結果の偽陰性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
グラフの見栄えをデフォルトでいい感じに変更する	sns.set()
黄色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
タイムスタンプデータをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
部分文字列を範囲を指定して探す	s.find(sub, start, end)
タプルの値の一覧	aDict.values()
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
文字列モジュールをインポートする	import string
option: 印を三角に変更する	marker = '^'
平均でデータフレームのNaNを補う	df.fillna(df.mean())
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
青色でヒストグラムを描画する	plt.hist(データ列, color='blue')
赤い大バツマーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
標準入力	sys.stdin
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
実数の双曲線正接の逆数を算出する	math.atanh(x)
自然数個からk個取り出した時の順列の総数	math.perm(n, k)
rgbの△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームのカラムリスト	df.info()
データ列の第一四分位数	ds.quantile(0.25)
データフレームの相関行列ケンドールで	df.corr(method='kendall')
縦棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
RANSACとしてクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ヒストグラムの色をパレットトルコイズに指定する	plt.hist(データ列, color='paleturquoise')
ふたつの集合の対称差を算出する	aSet.symmetric_difference(aSet2)
スプリンググリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
グリッド線	plt.grid(alpha=0.5)
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
nがn2以上	n >= n2
ゼロ埋めされた行列	np.zeros(要素数)
option: ライトシアン色を使う	color = 'lightcyan'
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
文字列を黄色にする	f'\033[33m{value}\033[0m'
ライトサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
データフレームのcollをフォーマットfmtを用いてPandasの日付型にする	pd.to_datetime(df[col], format=fmt)
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
option: リネン色を使う	color = 'linen'
辞書をコピーする	aDict.copy()
ヒストグラムをパウダーブルー色として描画する	plt.hist(データ列, color='powderblue')
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
散布図をローングリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
文字列が文字列より辞書順で前か調べる	s < s2
カテゴリで色分けして、データフレームをに箱ひげ図としてプロット化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ライトコーラル色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
nからn2までの整数列を作る	list(range(n, n2+1))
文字列の両端から空白を消す	s.strip()
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームの列の母標準偏差を求める	df[col].std(ddof=0)
ブランチドアーモンド色でヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
データフレームから型リストで指定されたデータ型のカラムを抽出する	df.select_dtypes(include=typeList)
モデル教師データでを学習する	model.fit(説明変数, 目的変数)
折れ線グラフの色をダークレッドに設定する	plt.plot(データ列x, データ列y, color='darkred')
データ列の変遷を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
データ列の中にいくつ文字列があるかカウントする	ds.isin([value]).sum()
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
文字列リストにイテラブルを変換してタブで連結する	'\t'.join(map(str, iterable))
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
整数nのバイト長	(n.bit_length() + 7) // 8
小数点数以下の最大の整数	math.floor(x)
データフレームのリストカラムは正規分布からどの程度尖っているか見る	df[aList].skew()
異なる列をキーにして2つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
ダークターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
MSDで多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
リストの合計	sum(aList)
データ列の推移を半透明の点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ディープスカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
nがn2よりも小さいか確認する	n < n2
文字列を新しい文字列によって全て置換する	s.replace(sub, newsub)
L1ノルムで正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
キューの要素を左にn個分ローテンションする	deq.rotate(-n)
行列の個数	aArray.size
文字列リストを連結する	''.join(aStringList)
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
十六進文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
データフレームのリスト列の中に日付データが含まれる	df[aList].isin([value])
データフレームの列の中に文字列とがいくつ存在するか数える	df[col].isin([value, value2]).sum()
文字列が全てアルファベットか調べる	s.isalpha()
棒グラフをダークオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkorchid')
散布図を赤い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
データフレームのNaNを平均値に設定する	df.fillna(df.mean())
option: セパレータを使わない	sep = ''
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
部分集合か	aSet.issubset(aSet2)
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
濃いシアン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
折れ線グラフの下三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
ヒストグラムを黒くする	plt.hist(データ列, color='k')
行列のユニークな要素とその個数を計算する	u, counts = np.unique(aArray, return_counts=True)
パターンを事前にコンパイルする	re.compile(pattern)
option: グラフの色を貝殻に設定する	color = 'seashell'
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
シーケンスをカウントしてカウンタから減らす	aCounter.subtract(iterable)
option: フォントの色をシーグリーンに設定する	color = 'seagreen'
option: グラフの色をパウダーブルーにセットする	color = 'powderblue'
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
データフレームのリストカラムの中の欠損値の数を求める	df[aList].isna().sum()
option: 色をカデットブルーに指定する	color = 'cadetblue'
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
データ列の変遷を青い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
データ列の欠損値を平均値に指定する	ds.fillna(ds.mean())
データフレームのリストカラムの中に文字列と文字列が存在するか調べる	df[aList].isin([value, value2])
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
ミディアムシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumseagreen')
グリーンイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
空白で文字列を区切って、数列にする	map(int, s.split())
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
option: シャルトリューズ色を使う	color = 'chartreuse'
列の第一四分位数	ds.quantile(0.25)
ロードされたモジュールを列挙する	sys.modules
整数nが配列のどれかか調べる	n in aArray
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
二進文字列を整数に変換する	int(s, 2)
列を累積したイテラブル	itertools.accumulate(iterable, operator.mul)
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データフレームの各グループ毎の個数	df.groupby(column).count()
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategrey')
折れ線グラフの色をミディアムオーキッドに指定する	plt.plot(データ列x, データ列y, color='mediumorchid')
ヒストグラムの色をライムに指定する	plt.hist(データ列, color='lime')
ヒストグラムの色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
ヒストグラムをピーチパフ色として描画する	plt.hist(データ列, color='peachpuff')
棒グラフをバリーウッド色を用いて描画する	plt.bar(データ列x, データ列y, color='burlywood')
数列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
散布図を黒い大バツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
option: 色をライトコーラルに設定する	color = 'lightcoral'
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
今日が何曜日か知る	datetime.datetime.today().weekday()
ファイルを追加できるようにBOM付きでオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ファイルパスのディレクトリ名	os.path.dirname(filepath)
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
formatのパターンで文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
散布図をミントクリーム色を使って描画する	plt.scatter(データ列x, データ列y, color='mintcream')
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
印字を全部見る	string.printable
option: 大バツマーカーを描画する	marker = 'X'
ファイルパスをSJISとしてオープンする]	open(filepath, encoding='shift_jis')
NaN	math.nan
線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
ヒストグラムをライム色を用いて描画する	plt.hist(データ列, color='lime')
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
赤い上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフを色付きの一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
実数の常用対数	math.log10(x)
option: ダイアモンドマーカーを加える	marker = 'D'
パープル色としてヒストグラムを描画する	plt.hist(データ列, color='purple')
特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
データ列が何年か見る	ds.dt.year
タプルを昇順に並べる	sorted(aTuple, reverse=True)
ヒストグラムのラインスタイルを破線に変更する	plt.hist(データ列, linestyle='dashed')
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
折り返しを無効に変更する	pd.set_option('expand_frame_repr', False)
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
Pandasで、データ列をタイムスタンプ型に変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
リストと数列について散布図を描画して、マーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
Pandasで、文字列をタイムスタンプに変換する	pd.to_datetime(s)
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームのカラムの中に文字列と日付データが存在するか	df[col].isin([value, value2])
列のユニークな要素	df[col].unique()
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
イテラブルの各要素に対して、predicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
データフレームのリスト列の未入力値をxで置き換える	df[aList].fillna(x)
データフレームを二つの列の値によってグループ化し、記述統計量を求める	df.groupby(['A', 'B']).describe()
オブジェクトの種類	type(obj)
ふたつの集合は互いに素か判定する	aSet.isdisjoint(aSet2)
文字列を区切りで分割して、列挙する	s.split(sep)
データフレームの2つの列を並べて箱ヒゲ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
空の両端キュー	collections.deque()
option: グラフの線の種類を破線に指定する	linestyle = 'dashed'
ディムグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
option: 印を丸に指定する	marker = 'o'
スピアマン順位相関係数としてデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
紺碧色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームのカラムが何分か確認する	df[col].dt.minute
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
データフレームから指定された三つの列を取り出す	df[[column, column2, column3]]
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
横棒グラフをドジャーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
ハニーデュー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
データフレームの未入力値を最頻値に設定する	df.fillna(df.mode().iloc[0])
文字列は印字できるか調べる	s.isprintable()
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
リストが空でないか確認する	len(aList) != 0
正規分布に基づく累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
切片なしの重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
option: バッファリングのサイズを小さくする	buffering = 4096
データフレームとデータ列を連結する	pd.concat([df, ds], axis=1)
横棒グラフをスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='skyblue')
ブラック色としてヒストグラムを描画する	plt.hist(データ列, color='black')
改行なしに変数を表示する	print(value, end='')
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
空の双方向キュー	collections.deque()
データフレームを列によってグループ化して、それぞれのグループ毎の平均値を求める	df.groupby(column).mean()
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
データフレームの列が文字列で終わるデータを選択する	df[df[column].str.endswith(s)]
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
カウンタの全数	aCounter.total()
ダークシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
本日のローカルなタイムスタンプを使う	datetime.datetime.today()
散布図をダイアモンド印を使用して描画する	plt.scatter(データ列x, データ列y, marker='D')
まとめて正規表現patternでデータフレームのリスト列の値を置き換える	df[aList].replace(pattern, repl, regex=True)
シャルトリューズにヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
部分文字列で文字列を分割したときの前半の文字列を取り出す	s.partition(sub)[0]
データフレームのリストカラムの中に日付データが存在するか調べる	df[aList].isin([value])
半透明の点線を用いてデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
カラムが正規分布からどれだけ尖っているか確認する	ds.skew()
数を実数で	x // y
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
ヒストグラムをバイオレット色で描画する	plt.hist(データ列, color='violet')
コーパスのバージョン	version = 'wcce2022-0.1'
縦棒グラフをオールドレース色を用いて描画する	plt.bar(データ列x, データ列y, color='oldlace')
二変数の最小値	min(x, y)
option: ダークカーキを使用する	color = 'darkkhaki'
データ列の中にいくつ日付データがあるかカウントする	ds.isin([value]).sum()
文字列を改行で分割する	s.splitlines()
折れ線グラフをホワイト色で描画する	plt.plot(データ列x, データ列y, color='white')
黒い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
配列とリストについての散布図にrgbの右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
双方向キューをリストにする	list(deq)
行列の次元を変形する	aArray.reshape(行数, 列数)
rangeの無限バージョン	itertools.count(start=n, step=step)
リストをn個にビン分割する	pd.cut(aList, n)
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
グラフから目盛線を消す	plt.grid(False)
日付時刻データが水曜日かどうか	aDatetime.weekday() == 2
線グラフの色をバリーウッドにセットする	plt.plot(データ列x, データ列y, color='burlywood')
エンコーディングを用いて文字列をバイト列に変換する	s.encode(encoding=encoding)
2つの浮動小数点数が近似値か調べる	math.isclose(x, x2)
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
パパイヤウィップ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
両端キューの末尾から要素を取り除く	deq.pop()
データフレームのカラムを丸める	df[col].round()
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
折れ線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
ヒストグラムをダークマゼンタ色として描画する	plt.hist(データ列, color='darkmagenta')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
カウンタのKトップをリストとして得る	aCounter.most_common(k)
方程式の解を求める	sympy.solve(e)
option: シルバー色を使う	color = 'silver'
二つの集合が集合と交わりを持たないかどうか調べる	aSet.isdisjoint(aSet2)
赤い大バツマーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフをやわらかい青色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
変数について数値のインテグラルを求める	sympy.integrate(e, z)
折れ線グラフの色をグリーンイエローにする	plt.plot(データ列x, データ列y, color='greenyellow')
配列とリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
黒い左三角マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='<', c='k')
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
データフレームを列名リストによって昇順に並べ直す	df.sort_values(by=column, ascending=True)
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
凡例をグラフの表示する	plt.legend()
双方向キューをタプルに変換する	tuple(deq)
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
棒グラフをライトスレイグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
散布図に菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D')
配列の内積を算出する	np.dot(aArray, aArray2)
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
両端キューの末尾	deq[-1]
predicateFuncを適用したとき真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
データフレームの列の文字列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
オブジェクトはバイト列か調べる	isinstance(obj, bytes)
整数nはタプルのどれか	n in aTuple
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
非小文字が文字列中にあるか調べる	any(not c.islower() for c in s)
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
オブジェクトは関数かどうか	callable(obj)
配列とリストについて散布図を描いてダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図を貝殻色として描画する	plt.scatter(データ列x, データ列y, color='seashell')
辞書の項目数を見る	len(aDict)
option: 色をダークオーキッドに指定する	color = 'darkorchid'
ラベンダー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
折れ線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
辞書をカウンタにする	collections.Counter(aDict)
線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
文字列をコロンで区切り、、文字列リストに変換する	s.split(':')
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
カウンタの上位を列挙する	aCounter.most_common(k)
リストを等量でn個にビニングする	pd.qcut(aList, n)
オブジェクトはバイト列かどうか確認する	isinstance(obj, bytes)
文字列内にひとつでも英字が含まれるか確認する	any(c.isalpha() for c in s)
データフレームのカラムの欠損値を最頻値で補う	df[col].fillna(df[col].mode().iloc[0])
データフレームを転置する	df.T
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
タプルを展開してプリントする	print(*aTuple)
カラムでデータフレームをグループ化し、、それぞれのグループ毎の件数を知る	df.groupby(column).size()
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
▲マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^')
リストを箱髭図として描く	plt.boxplot(データ列)
配列を転置する	aArray.T
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
散布図のクロスマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
seabornのデフォルトを適用する	sns.set()
option: 黄緑色を用いる	color = 'chartreuse'
option: グレー色を使う	color = 'grey'
マップの浅いコピーを生成する	aDict.copy()
マゼンタで文字列を表示する	print(f'\033[35m{value}\033[0m')
棒グラフをモカシン色を用いて描画する	plt.bar(データ列x, データ列y, color='moccasin')
タプルのn番目からn2番目までの部分	aTuple[n:n2]
option: レベッカパープル色を使う	color = 'rebeccapurple'
両端キューの右側に列の各要素を追加する	deq.extend(iterable)
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
リストを白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
option: ブラウン色を使う	color = 'brown'
option: グラフの色をブラックに変更する	color = 'black'
クリムゾン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
辞書のの一覧	aDict.values()
乱数シードをnで固定する	random.seed(n)
パレットトルコイズにヒストグラムの色を変更する	plt.hist(データ列, color='paleturquoise')
n番目のカラムをインデックスとしてCSVファイルTSVファイルを読み込む	pd.read_csv(filename, index_col=n)
ゼロ埋めしたブール型の行列	np.zeros(要素数, dtype=np.int32)
折れ線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
文字列を末尾から空白で区切る	s.rsplit()
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
イテラブルとリストの散布図を描き、、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: 先頭カラムをインデックスに設定する	index_col = 0
折れ線グラフの色をロイヤルブルーにする	plt.plot(データ列x, データ列y, color='royalblue')
列名リストを用いてデータフレームを整列し、更新する	df.sort_values(by=column, inplace=True)
option: シルバーを用いる	color = 'silver'
option: 色をマゼンタに設定する	color = 'magenta'
Pandasで、データ列のUNIX時間からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
year年のタイムスタンプ	datetime.datetime(year=year, month=1, day=1)
データフレームのカラムの平均値を算出する	df[col].mean()
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
データフレームの中の列を等量で分割数nでビニングする	pd.qcut(df[col], n)
折れ線グラフの△印の大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームの列の値がxかつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
表データを列でグループ化してグループ毎の件数を知る	df.groupby(column).size()
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
８ビット整数型のゼロ埋めされたベクトルを作る	np.zeros(要素数, dtype=np.int8)
xで列の欠損値を埋める	ds.fillna(x)
縦軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
データフレームを列の値によってグループ化し要約統計量を求める	df.groupby(column).describe()
配列と配列の散布図にrgbの下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムをマルーン色として描画する	plt.hist(データ列, color='maroon')
ヒストグラムを紺色を用いて描画する	plt.hist(データ列, color='darkblue')
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームの複数の列を並べて箱髭図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
リストにリストを追加する	aList.extend(aList2)
パラメータが0に近づく時の数式の極限値を求める	sympy.limit(e, z, 0)
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
リストのn番目に文字列を差し込む	aList.insert(n, element)
縦棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
キューに文字列をプッシュする	deq.append(element)
散布図のマーカーを上三角にする	plt.scatter(データ列x, データ列y, marker='^')
リストの平均値	sum(aList)/len(aList)
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
散布図をバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='violet')
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
文字列内にひとつでも大文字が含まれるか	any(c.isupper() for c in s)
分類モデルの再現率を算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
文字列中の片仮名をひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
配列を分割する	pd.cut(aArray, aList)
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
二つのオブジェクトが等しいかどうか調べる	obj == obj2
スレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
option: ラベンダーブラッシュにフォントの色を設定する	color = 'lavenderblush'
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
ヒストグラムをグレー色を用いて描画する	plt.hist(データ列, color='grey')
ビン数nでデータ列を等量でビン分割する	pd.qcut(ds, n)
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
option: ディープスカイブルー色を用いる	color = 'deepskyblue'
文字列がタプルに含まれないか調べる	element not in aTuple
値を赤色でプリントする	print(f'\033[31m{value}\033[0m')
折れ線グラフの色をシルバーに指定する	plt.plot(データ列x, データ列y, color='silver')
最後の列をデータフレームから除く	df[df.columns[:-1]]
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
日付データの月数	aDate.month
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
マップに項目名ワード引数で追加する	aDict.update(**kwargs)
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
リストにリストを追加して拡張する	aList.extend(aList2)
データフレームから重複を破壊的に削除する	df.drop_duplicates(inplace=True)
データフレームをグループ化し列に対し平均値を求める	df.groupby(column)[column2].mean()
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
n回の数値イテラブル	range(n)
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
配列が何のデータ型か調べる	aArray.dtype()
ヒストグラムをカデットブルー色を用いて描画する	plt.hist(データ列, color='cadetblue')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
トマト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
ヒストグラムをティール色で描画する	plt.hist(データ列, color='teal')
データフレームを列毎に集約し、、それぞれのグループごとの最小値を計算する	df.groupby(column).min()
option: マーカーの色を青にする	markerfacecolor = 'blue'
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
ベクトルの行ごとの合計値	np.sum(aArray, axis=1)
赤い点線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
x軸だけグリッド線	plt.grid(axis='x')
データ列間の平方根平均二乗誤差を計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
ダーク・スラテグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
option: 貝殻を使う	color = 'seashell'
カウンタをイテラブルで更新する	aCounter.update(iterable)
データ列が何秒か確認する	ds.dt.second
タブ区切りのファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
文字列の出力を改行なしに行う	print(value, end='')
散布図に青い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームを関数によってグループ化し、記述統計量を求める	df.groupby(関数).describe()
本日が何月か知る	datetime.datetime.today().month
折れ線グラフの左三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
列の値ごとにデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
データフレームを表示するとき、小数点以下の表示精度を減らす	pd.set_option('precision', n)
データフレームのリスト列の空文字を未入力値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
変数をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
ファイルをクローズする	f.close()
ポスターにグラフの使途を設定する	sns.set(context='poster')
▲印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
縦棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
リストを引数として展開して出力する	print(*aList)
データフレームを列によって並べて、下位を取り出す	df.sort_values(columns).tail(n)
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームのリストカラムの正規分布に対する上下広がりを計算する	df[aList].skew()
横棒グラフをバイオレット色として描画する	plt.barh(データ列x, データ列y, color='violet')
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
破壊的に降順にデータフレームを'A'列でソートする	df.sort_values(by='A', ascending=False, inplace=True)
option: グラフの種類を実線に変更する	linestyle = 'solid'
ヒストグラムの色をパレットトルコイズに変更する	plt.hist(データ列, color='paleturquoise')
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
リストとリストについて散布図を描画して大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
配列をn個にビン分割する	pd.cut(aArray, n)
nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
リストとデータ列についての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを列を用いてソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
全要素を初期値で初期化した行列	np.full(要素数, 初期値, dtype=np.int)
プラットホームの名前	sys.platform
値を太字でプリントする	print(f'\033[1m{value}\033[0m')
ファイルのベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
データ列間の平方根平均二乗誤差を算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
折れ線グラフをプロットする	plt.plot(データ列x, データ列y)
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
nまでの偶整数リストを得る	list(range(2, n, 2))
プロットで用いるy座標にラベルを付ける	plt.ylabel('y軸ラベル')
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
表示可能な最大列数を減らす	pd.set_option('display.max_columns', n)
散布図を黒い△マーカーとして描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データ列をインポートする	import pandas as pd
出力ストリーム全体を行ごとに分割してリストにする	[s.strip() for s in f.readlines()]
リストのn番目からn2番目を得る	aList[n:n2]
表データの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
データフレームのリストカラムの空文字を未入力値に変換しドロップする	df[aList].replace('', np.nan).dropna()
データ列が正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
グラフの見栄えを綺麗にする	import seaborn as sns
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
黒いクロスマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
改行で文字列を区切り、文字列リストに変換する	s.splitlines()
日付時刻データが何分か知る	aDatetime.minute
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
データフレームの末尾	df.tail()
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
要素ひとつのりスト	[element]
L1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
浮動小数点数が正の数	x > 0
散布図の菱形マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
三変数の最も小さい値	min(x, y, z)
ミディアムパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
ポスターにグラフの用途を設定する	sns.set(context='poster')
分類モデルの正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
菱形印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームを散布図でグラフ化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
配列を縦軸配列を横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
実数が無限大か調べる	math.isinf(x)
横棒グラフをダークレッド色で描画する	plt.barh(データ列x, データ列y, color='darkred')
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
変数が無限大に近づく場合の数式の極限値を求める	sympy.limit(e, z, oo)
ダークシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
option: サドルブラウンを用いる	color = 'saddlebrown'
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
option: ミディアムブルー色を使う	color = 'mediumblue'
２つのオブジェクトが等しい	obj == obj2
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
ふたつの関係が上位集合	aSet.issuperset(aSet2)
フローラルホワイト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
option: チョコレートを使用する	color = 'chocolate'
実数の余弦	math.cos(x)
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
データフレームのリストカラムの平均値を計算する	df[aList].mean()
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='gray')
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
横棒グラフをミディアムスプリンググリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
数字を使う	string.digits
タン色でヒストグラムを描画する	plt.hist(データ列, color='tan')
文字列に文字列中の部分文字列を全部置き換える	s.replace(sub, newsub)
文字列は印字できる	s.isprintable()
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
ゼロ埋めされた８ビット整数型のベクトル	np.zeros(要素数, dtype=np.int8)
データフレームの末尾を調べる	df.tail()
option: グラフの種類を点線に設定する	linestyle = 'dotted'
データ列とリストについて散布図をプロットして、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
縦方向に三つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
縦棒グラフをミディアムスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
文字列を太字にする	f'\033[1m{value}\033[0m'
バイナリ書き込みできるようにファイルをオープンする]	open(filepath, mode='wb')
ヒストグラムを点線を用いて描画する	plt.hist(データ列, linestyle='dotted')
折れ線グラフを一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
文字列全体をケースを無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ゼロ埋めされた符号なし８ビット整数型のベクトルを初期化する	np.zeros(要素数, dtype=np.uint8)
カラムを100の位で丸めて整数にする	ds.round(-2).astype(int)
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
折れ線グラフの色をアクアマリンにする	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームの行と列をひっくり返す	df.T
行列の列	aArray[:, 列番号]
データ列と配列の散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: 濃いシアンに色を設定する	color = 'darkcyan'
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
空の部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: 茶色を使用する	color = 'brown'
アルファベットの文字列	string.ascii_letters
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
データ列をヒストグラムを用いて可視化する	plt.hist(データ列)
最大値・最小値の範囲として一様な疑似乱数	random.uniform(最小値, 最大値)
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
リストとイテラブルの散布図を描き、、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
option: グラフの色をライトゴールドロディイエローに指定する	color = 'lightgoldenrodyellow'
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
文字列をマゼンタで表示できる文字列に変換する	f'\033[35m{value}\033[0m'
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
ヒストグラムをライトスカイブルー色として描画する	plt.hist(データ列, color='lightskyblue')
現在のタイムスタンプ	datetime.datetime.now()
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
クリムゾン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
やわらかい青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
文字列の右端からタブを除去する	s.rstrip('\t')
option: 印の大きさを変更する	markersize = 2.0
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ヒストグラムの色をミディアムブルーにする	plt.hist(データ列, color='mediumblue')
option: 菱形印を描画する	marker = 'D'
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
リストの最後に文字列を追加する	aList.append(element)
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
option: グラフの色をグレーに設定する	color = 'grey'
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
ヒストグラムの色をロージーブラウンに変更する	plt.hist(データ列, color='rosybrown')
折れ線グラフに右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
数式の積分を求める	sympy.integrate(e)
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
集合の更新不能版	frozenset(aSet)
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
文字列を回数を制限して置換する	s.replace(sub, newsub, n)
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
数を千の位で丸める	round(x, -3)
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
ヒストグラムの色をシスルに指定する	plt.hist(データ列, color='thistle')
option: データ型を指定する	dtype = bool
ピアソン積率相関係数を用いてデータフレームのリストカラムの相関行列	df[aList].corr(method='pearson')
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
データフレームのカラムは何曜日か見る	df[col].dt.weekday_name
三自然数の最大公約数	math.gcd(n, n2, n3)
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
ヒストグラムをローングリーン色として描画する	plt.hist(データ列, color='lawngreen')
赤い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
標準出力を得る	sys.stdout
リストの先頭を取り除く	aList[1:]
実数に浮動小数点数を掛ける	x * y
文字列を走査し正規表現に複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
リストの要素を小さい順にソートする	sorted(aList, reverse=True)
文字列中からパターンにマッチする位置を探す	re.search(pattern, s)
散布図を四角印を使い、描画する	plt.scatter(データ列x, データ列y, marker='s')
option: 線の種類を破線に指定する	linestyle = 'dashed'
線グラフの色を小麦色にセットする	plt.plot(データ列x, データ列y, color='wheat')
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
クロス印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
データフレームの未入力値をモードで埋める	df.fillna(df.mode().iloc[0])
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
JSONを使う	import json
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
option: インディアンレッド色を使う	color = 'indianred'
option: グラフの色をオールドレースに指定する	color = 'oldlace'
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
データフレームの中の列を等量でn個にビニングする	pd.qcut(df[col], n)
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
最大値と最小値でデータを揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
option: マーカーを△に変更する	marker = '^'
横棒グラフをアンティークホワイト色として描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
option: スレートブルーに色を設定する	color = 'slateblue'
文字列が全て空白	s.isspace()
配列とリストについて散布図をプロットして、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
カウンタの最頻出の要素を求める	aCounter.most_common()[0]
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
Pandasで、データフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col])
コロンで文字列を分割して、列挙する	s.split(':')
option: 青紫にグラフの色を変更する	color = 'violet'
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
配列と配列の散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
キーが辞書上で定義済みか調べる	key in aDict
二つの浮動小数点数が十分に近いか確認する	math.isclose(x, x2)
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
配列の行ごとの合計値を求める	np.sum(aArray, axis=1)
組の要素を逆順にする	aTuple[::-1]
データフレームを複数の列で並べて、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
配列を分割数nを用いてビニングする	pd.cut(aArray, n)
option: グラフの色をサーモンに指定する	color = 'salmon'
折れ線グラフの印を大バツにする	plt.plot(データ列x, データ列y, marker='X')
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
実数の仮数	math.frexp(x)[0]
列の値によってデータフレームをグループ化する	df.groupby(column)
配列とリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
option: ミスティローズにグラフの色を変更する	color = 'mistyrose'
nがn2かどうか調べる	n == n2
データフレームからカラムを一つのみ選択する	df[[column]]
option: マーカーを右三角に変更する	marker = '>'
格子をプロットから消す	plt.grid(False)
横棒グラフをハニーデュー色を用いて描画する	plt.barh(データ列x, データ列y, color='honeydew')
データフレームの欠損値を最大値で置き換える	df.fillna(df.max())
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
中央値でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(df[aList].median())
現在が何秒か知る	datetime.date.today().second
オブジェクトは文字列	isinstance(obj, str)
option: ホワイトスモークにフォントの色を設定する	color = 'whitesmoke'
データフレームの中のカラムを四分位数ごとに分割する	pd.qcut(df[col], 4)
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
星印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームをCSV形式でJSONLファイルに保存する	df.to_csv(filename)
ヒストグラムの色をパールゴールデンロッドに指定する	plt.hist(データ列, color='palegoldenrod')
ダークマゼンタ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
配列と配列の散布図に赤い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='r')
option: ダークシアグリーン色を用いる	color = 'darkseagreen'
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
PandasでdateStringを日付データに変換する	pd.to_datetime(dateString)
スタックの長さを制限する	collections.deque(maxlen=n)
アクアマリン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
ミディアムブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
青い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
整数nがタプルのどれかか	n in aTuple
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
文字列をASCII限定としてパターンで分割する	re.split(pattern, s, flags=re.ASCI)
リストの四分位を可視化する	plt.boxplot(データ列)
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
ファイル名がTSVファイルか確認する	filename.endswith('.tsv')
二つの集合が互いに素かどうか調べる	aSet.isdisjoint(aSet2)
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
黒い上三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
二つのデータフレームを縦方向にくっつける	pd.concat([df, df2], axis=0)
データフレームを列によってで大きい順にソートする	df.sort_values(by=column, ascending=False)
タイムスタンプデータが日曜日か調べる	aDatetime.weekday() == 6
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
オリベドラブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
option: ロイヤルブルーにグラフの色を設定する	color = 'royalblue'
文字列の両端から余分な空白を取り除く	s.strip()
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
ピンク色を使ってヒストグラムを描画する	plt.hist(データ列, color='pink')
追加モードを用いてファイルをオープンして]、fとする	f = open(filepath, mode='a')
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategray')
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
実部と虚部から複素数を生成する	complex(x, y)
列の重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
nの八進表現	oct(n)
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
文字列を部分文字列で二つに区切って、後半の文字列を見る	s.partition(sub)[-1]
実数が負か調べる	x < 0
八進文字列をbytesizeバイトのバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
ヒストグラムの色をミディアムバイオレットレッドに変更する	plt.hist(データ列, color='mediumvioletred')
Pandasで文字列のUNIX秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
データフレームの中のカラムを等量でビン数nでビン分割する	pd.qcut(df[col], n)
データフレームのカラムのNaNをxで置き換える	df[col].fillna(x)
平均付きボックスチャートを描画する	plt.boxplot(データ列, showmeans=True)
データ列を10の位で丸める	ds.round(-1)
散布図をミディアムブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
配列を横棒グラフにする	plt.barh(ラベル列, データ列)
値がキューの中にあるか調べる	element in deq
アルファベットが文字列内に含まれるか調べる	any(c.isalpha() for c in s)
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
データフレームを各列毎にグループ化し、、列の合計を求める	df.groupby(column)[column2].sum()
箱ひげ図でデータ列を描画する	plt.boxplot(データ列)
option: ライトスチールブルーにフォントの色を変更する	color = 'lightsteelblue'
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
折れ線グラフの色をマゼンタにする	plt.plot(データ列x, データ列y, color='magenta')
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
データフレームの中の列をビン数nとして分割する	pd.cut(df[col], n)
データフレームのカラムの25パーセンタイル	df[col].quantile(0.25)
option: グラフの色をデピンクに設定する	color = 'deeppink'
第二四分位数でデータフレームの列の欠損値を埋める	df[col].fillna(df[col].median())
ビンを設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
eの実数乗を求める	math.exp(x)
出力ストリームをクローズする	f.close()
柱状図を描画する	plt.hist(データ列)
option: 星マーカーを描画する	marker = '*'
横棒グラフをトマト色として描画する	plt.barh(データ列x, データ列y, color='tomato')
折れ線グラフを半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
十六進数字を全部使う	string.hexdigits
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
カウンタ同士で積集合演算する	aCounter & aCounter2
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
データフレームを列によって並べ直して、行を振り直す	df.sort_values(columns).reset_index(drop=True)
折れ線グラフに右三角印を使う	plt.plot(データ列x, データ列y, marker='>')
白色で散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームのカラムを消す	df.drop(column, axis=1)
タイムスタンプデータにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
ライトグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
配列の要素数	aArray.size
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
シャルトリューズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
データフレームの中に文字列があるか調べる	df.isin([value])
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
イテラブルとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
青緑にヒストグラムの色を変更する	plt.hist(データ列, color='teal')
データ列を使う	import pandas as pd
散布図をスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='skyblue')
配列間の各要素の最小公倍数	np.lcm(aArray, aArray2)
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
データフレームのリスト列の中に文字列が存在するかどうか調べる	df[aList].isin([value])
リストとリストについて散布図をプロットして、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
青緑色として散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightseagreen')
新しい回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
option: ライム色を使う	color = 'lime'
タプルをn回、連結する	aTuple * n
配列と同じ大きさの空配列を初期化する	np.empty_like(aArray)
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
箱ヒゲ図を二つ並べてプロットする	plt.boxplot([データ列, データ列])
option: 区切り記号をコロンにする	sep = ':'
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
イテラブルに列を続けたイテラブル	itertools.chain(iterable, iterable2)
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
等量でビン数nとして配列をビン分割する	pd.qcut(aArray, n)
ふたつの関係が上位集合か調べる	aSet.issuperset(aSet2)
列'A'と列'B'をキーにして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームを各列毎にグループ化して文字列というグループを使う	df.groupby(column).get_group(s)
２変数の最大値	max(x, y)
ライトゴールドロディイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
余弦の逆数を算出する	math.acos(x)
option: 先頭の行をヘッダに設定する	header = 0
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
正規表現を使う	import re
キューをデキューする	deq.popleft()
実数がNaNか調べる	math.isnan(x)
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
文字列中にひとつでも非ASCII文字が含まれるか	any(not c.isascii() for c in s)
nとn2の和を計算する	n + n2
スクリプトファイルのディレクトリパス	os.path.dirname(os.path.abspath(__file__))
散布図に黒いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームの列がxより多くx2より小さいデータを取り出す	df[(x < df[column]) & (df[column] < x2)]
カラムを10の位で丸める	ds.round(-1)
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
日付データが土曜日か調べる	aDate.weekday() == 5
Pythonのバージョン	sys.version
カテゴリで色付けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データ列と数列の散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
ミディアムアクアマリン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
異なるカラムをキーにして２つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
マッピングのキーとその項目をペアとして取り出す	aDict.items()
nをn2だけ減少させる	n -= n2
散布図に星マーカーを使用する	plt.scatter(データ列x, データ列y, marker='*')
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
列によってデータフレームをグループ化して、それぞれのグループ毎の平均値を求める	df.groupby(column).mean()
option: ダークバイオレットに色を変更する	color = 'darkviolet'
縦軸の目盛を表示しない	plt.yticks([])
option: 印を左三角に指定する	marker = '<'
円プロットの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
イテラブルの長さnの順列を得る	itertools.permutations(iterable, n)
実数をn乗する	x ** n
折れ線グラフの色をライトシアンに指定する	plt.plot(データ列x, データ列y, color='lightcyan')
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
データフレームを列によってグループ化する	df.groupby(column)
データフレームの列と列の相関行列スピアマン相関係数で	df[[column, column2]].corr(method='spearman')
データフレームのリスト列を1000の位で四捨五入して整数型にする	df[aList].round(-3).astype(int)
列をリストに変換する	df[column].values.tolist()
折れ線グラフのマーカーを大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
プロットの横軸を対数目盛に変更する	plt.xscale('log')
シエナ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
文字列がリストに含まれる	element in aList
文字列ひとつのタプルを作る	(element,)
RANSACでクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームを'A'列によってソートする	df.sort_values(by='A')
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
二つの文字列は同じか調べる	s == s2
実数の小数点以下を丸める	round(x)
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
両端キューの先頭にリストの各要素を追加する	deq.extendleft(iterable)
項目名が辞書上で定義済み	key in aDict
文字列の先頭でパターンに大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
組のn番目のを使う	aTuple[n]
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
データ列とリストの散布図にデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
文字列の無限イテラブルを得る	itertools.repeat(element)
ヒストグラムの色をレベッカパープルに指定する	plt.hist(データ列, color='rebeccapurple')
プラットフォームの符号付き整数の最大値	sys.maxsize
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
横棒グラフをライトゴールドロディイエロー色を使って描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
プロットにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
option: コーンフラワーブルーを使う	color = 'cornflowerblue'
キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
ヒストグラムの色をインディゴに変更する	plt.hist(データ列, color='indigo')
切片なしの単回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
文字列が空白文字からなるか調べる	s.isspace()
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
option: 星マーカーを使う	marker = '*'
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
ファイルからバイナリストリームを開いて]fとする	f = open(filepath, mode='rb')
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
第一引数で指定されたファイルの名前	sys.argv[1]
集合から別の集合の要素を取り除く	aSet.difference_update(aSet2)
散布図の▽マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ミディアムターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
option: 無視するフッタをnに変更する	skipfooter = n
実数を百の位で丸める	round(x, -2)
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
データフレームをグループ化してヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
積み上げ横棒グラフをプロットする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
グラフの凡例を表示する	plt.legend()
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
配列のスカラー倍を求める	aArray * n
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
リストの末尾にリストを追加して拡張する	aList.extend(aList2)
配列をビン数nで分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
文字列の右側から改行を取り除く	s.rstrip('\n')
縦棒グラフをペルー色を用いて描画する	plt.bar(データ列x, データ列y, color='peru')
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
散布図でデータフレームを可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームを二つの列で昇順に整列する	df.sort_values(by=['A', 'B'], ascending=True)
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: ▼マーカーを使う	marker = 'v'
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
日付時刻データからn分引く	aDatetime - datetime.timedelta(minutes=n)
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
オブジェクトは浮動小数点数	isinstance(obj, float)
２つの浮動小数点数が近似値か調べる	math.isclose(x, x2)
実数が無限大かどうか調べる	math.isinf(x)
折れ線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
小文字を全部求める	string.ascii_lowercase
グレーにヒストグラムの色を指定する	plt.hist(データ列, color='grey')
ヒストグラムを描画し合計を1にする	plt.hist(データ列, density=True)
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
t分布型確率的近傍埋め込み法を用いて濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
黄緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
y座標の目盛を対数に変更する	plt.yscale('log')
数式のパラメータに数式を代入する	e.subs(z, e2)
実数の符号をコピーにする	math.copysign(x, x2)
rgbの右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのヒストグラム付き散布図を描く	sns.jointplot(x='列名', y='列名', data=df)
データフレームのカラムの値が欠損値か調べる	df[col].isna()
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
数値を変数についてn階微分する	sympy.diff(e, z, n)
イテラブルから配列を作成する	np.array(iterable)
nをn2で割った余り	n % n2
スカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
日付データが日付データより前か	aDate < aDate2
回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
option: グラフの色をブランチドアーモンドにセットする	color = 'blanchedalmond'
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
グラフの色を全般的に暗くする	sns.set(pallete='dark')
数を十六進表記の文字列に変換する	x.hex()
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: シスルを使う	color = 'thistle'
ライトスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
浮動小数点数の角度	math.degrees(x)
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
nがn2より大きいかどうか	n > n2
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
二つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
ミッドナイトブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
ヒストグラムをモカシン色として描画する	plt.hist(データ列, color='moccasin')
プログラムを強制的に止める	sys.exit()
リスト内の要素は全て真か調べる	all(aList)
predicateFuncを適用したときtrueとなるイテラブルの要素を除去する	itertools.dropwhile(predicateFunc, iterable)
option: 先頭のカラムをインデックスに指定する	index_col = 0
リストのn番目のの要素	aList[n]
ひとつでも非数字が文字列中に含まれる	any(not c.isdigit() for c in s)
option: 欠損値は無視する	dropna = True
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
正規分布による累積分布関数を使用する	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
クロスマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='x')
ふたつの集合の共通部分を求める	aSet.intersection(aSet2)
マゼンタ色としてヒストグラムを描画する	plt.hist(データ列, color='magenta')
文字列中に日本語が含まれるか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
データフレームの中にいくつがあるかカウントする	df.isin([value]).sum()
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
文字列を全て大文字に変換する	s.upper()
カテゴリで色付けして、データフレームの全カラムの相関をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
JSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
散布図の大バツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
2つのデータフレームを列をキーにして外部結合する	pd.merge(df, df2, on=column, how='outer')
データ列のユニークな要素	ds.unique()
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
データフレームを各列と列の組み合わせ毎に集約し、、最小値を計算する	df.groupby([column, column2], as_index=False).min()
列名リストで昇順にデータフレームをソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
改行なしに1行分標準入力から読む	sys.stdin.readline().rstrip()
コマンドの第二引数を知る	sys.argv[1]
オブジェクトは浮動小数点数型	isinstance(obj, float)
データフレームから型の列を抽出する	df.select_dtypes(ty)
実数に実数をかける	x * y
リストと数列についての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
コロンで文字列を分割して、文字列リストに変換する	s.split(':')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
option: 茶色色を使う	color = 'brown'
線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
行列と同じ大きさの空の配列を初期化する	np.empty_like(aArray)
ヒストグラムの描画し、、正規化する	plt.hist(データ列, density=True)
キューの左に値を追加する	deq.appendleft(element)
rgbの星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
範囲を指定して部分文字列を文字列の最後から探す	s.find(sub, start, end)
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
十六進文字列を整数に変換する	int(s, 16)
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
散布図に青いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
半透明の実線でリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: フォントの色をダークグレーに設定する	color = 'darkgray'
イテラブルを配列にする	np.array(iterable)
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
赤い▼マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
ヒストグラムの線種を実線に指定する	plt.hist(データ列, linestyle='solid')
日付時刻データが月曜日かテストする	aDatetime.weekday() == 0
データフレームの中の列をn個に分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
配列の要素ごとの最小公倍数を算出する	np.lcm(aArray, aArray2)
文字列が部分文字列で終わるか調べる	s.endswith(sub)
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
折れ線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgray')
option: 色をナバホホワイトに設定する	color = 'navajowhite'
データフレームの列を10の位で四捨五入して、整数型にする	df[col].round(-1).astype(int)
カラーコードを用いて折れ線プロットの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
option: スラグレーを使う	color = 'slategrey'
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
option: グラフの色をブラックに設定する	color = 'black'
２つの実行結果を文字列で区切って表示する	print(value, value2, sep=s)
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
ヒストグラムの色をチョコレートに指定する	plt.hist(データ列, color='chocolate')
両端キューが空でないか確認する	len(deq) != 0
実行時の標準出力の出力先がターミナルかどうか	sys.stdout.isatty()
文字列を正規表現で区切る	re.split(pattern, s)
文字列を区切り記号で区切って文字列リストに変換する	s.split(sub)
実数の天井を計算する	math.ceil(x)
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
option: ピンク色を使う	color = 'pink'
option: ローングリーン色を用いる	color = 'lawngreen'
要素が集合のメンバーでないか調べる	element not in aSet
折れ線グラフの色をゲインズボロに指定する	plt.plot(データ列x, データ列y, color='gainsboro')
ベクトルの計算をする	import numpy as np
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
散布図を黒い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データ列の推移を赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
レベッカパープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
散布図を星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムでカラーマップを用いる	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
データ列をdatetime64型にする	pd.to_datetime(ds)
option: 切片を算出しない	fit_intercept = False
グリッド線を白くする	plt.grid(color='w')
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
散布図にrgbの▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
黒い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='k')
ヒストグラムの色をブランチドアーモンドに変更する	plt.hist(データ列, color='blanchedalmond')
文字列をキャピタライズする	s.capitalize()
折れ線グラフをダークオレンジ色として描画する	plt.plot(データ列x, データ列y, color='darkorange')
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
円プロットを用いてデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
数式を数値に変換する	float(e)
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
option: スノー色を使用する	color = 'snow'
filepathに現在のワーキングディレクトリを変更する	os.chdir(os.dirname(filepath))
リストを多重集合に変換する	collections.Counter(iterable)
データフレームを各カラム毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
プロットの凡例を表示する	plt.legend()
nが2で割り切れないか確認する	n % 2 == 1
option: グラフの色をシーグリーンに指定する	color = 'seagreen'
オブジェクトにプロパティがあるか調べる	hasattr(obj, プロパティ名)
青紫色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
最後の部分文字列で文字列を分けたときの前半の文字列	s.rpartition(sub)[0]
イテラブルを文字列に変換して、空白で連結する	' '.join(map(str, iterable))
出力ストリームから1文字、読む	f.read(1)
折れ線グラフの色をパウダーブルーに変更する	plt.plot(データ列x, データ列y, color='powderblue')
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
ファイルからバイナリストリームをオープンして]fとする	f = open(filepath, mode='rb')
ゼロ埋めされた符号なし８ビット整数型の行列を作成する	np.zeros(要素数, dtype=np.uint8)
折れ線グラフの色をミントクリームに指定する	plt.plot(データ列x, データ列y, color='mintcream')
実数を２乗する	x ** 2
線グラフの色をハニーデューにセットする	plt.plot(データ列x, データ列y, color='honeydew')
日付時刻データからn時間分引く	aDatetime - datetime.timedelta(hours=n)
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
部分文字列が文字列の終了位置より前に含まれないか	s.find(sub, 0, end) == -1
リストと数列の散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
nが1、もしくは2、もしくは3に等しいかどうか調べる	n == 1 or n == 2 or n == 3
線形回帰データフレームのグループ化した散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
散布図を四角マーカーとして描く	plt.plot(データ列x, データ列y, marker='s')
実数のタンジェントを求める	math.tan(x)
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
実数の整数部	math.modf(x)[1]
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
三つの文字列を順にプリントする	print(value, value2, value3)
ファイルのファイル名	os.path.basename(filepath)
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
データ列の中にいくつ未入力値があるか求める	ds.isna().sum()
行列の個数を求める	aArray.size
縦棒グラフをシエナ色として描画する	plt.bar(データ列x, データ列y, color='sienna')
データフレームの相関行列ピアソンで	df.corr(method='pearson')
昇順にデータフレームを破壊的に'A'列と'B'列でソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
青緑色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
散布図をスラグレー色として描画する	plt.scatter(データ列x, データ列y, color='slategrey')
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
option: 箱ひげ図を水平方向にする	vert = False
option: ダークグレー色を使う	color = 'darkgrey'
nがn2よりも大きいか調べる	n > n2
小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
rgbの▲マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データ列が何曜日か見る	ds.dt.weekday_name
ファイルをBOM付きとしてオープンする]	open(filepath, encoding='utf_8_sig')
データフレームを複数の列によって昇順に破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
データフレームの列の名前を列から文字列に変更する	df.rename(columns={column: name})
データフレームのカラムを整数に丸める	df[col].round()
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
シーケンスから多重集合を生成する	collections.Counter(iterable)
珊瑚色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
データフレームのリストカラムのNaNを直前の値に設定する	df[aList].fillna(method='ffill')
赤い右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
二つのオブジェクトが同じ参照かどうか	obj is obj2
丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o')
option: ペルー色を使う	color = 'peru'
変数を白色化する	f'\033[37m{value}\033[0m'
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
nがn2の倍数か調べる	n % n2 == 0
CSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep=',')
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームから指定された列名一覧の列を選択する	df[columns]
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
日付データは日付データと同時か	aDate == aDate2
線グラフの色をアイボリーにする	plt.plot(データ列x, データ列y, color='ivory')
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(データ列, 'norm')
グラフのパレットを濃くする	sns.set(pallete='deep')
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
データ列の各データが何回出現するか見る	ds.value_counts()
回帰分析をロバスト推定として行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
整数nがセットのどれか	n in aSet
リストのn番目の	aList[n]
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
自然数最小公倍数	math.lcm(n, n2)
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
リストとリストについて散布図を描画してマーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
ライトグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
グラフの色を全般的に淡くする	sns.set(pallete='muted')
L2ノルムでデータを正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
英字を全部求める	string.ascii_letters
実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
日付データが火曜日か調べる	aDate.weekday() == 1
グラフの縦横をセットする	plt.figure(figsize=(横幅, 高さ))
タイムスタンプデータが何年か知る	aDatetime.year
ガンマ関数	math.gamma(x)
TSVファイルを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームのそれぞれのグループごとの合計を計算する	df.groupby(column).sum()
数の複素数	complex(x)
プロット中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
文字列に変換してシーケンスを連結する	''.join(map(str, iterable))
ヒストグラムをプラム色を用いて描画する	plt.hist(データ列, color='plum')
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
データフレームの2つの列を並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
option: グラフの色をミディアムブルーに指定する	color = 'mediumblue'
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
MLPを用いてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
グリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
アンティークホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
option: グラフの色を赤に設定する	color = 'red'
空白文字を使う	string.whitespace
データ列の未入力値を最小値に設定する	ds.fillna(ds.min())
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
グラフにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
文字列に日本語が使われているかどうか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
折れ線グラフをロージーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='rosybrown')
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
option: 色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
最頻値でデータフレームの欠損値を補う	df.fillna(df.mode().iloc[0])
文字列中の部分文字列の出現を数える	s.count(sub)
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
1行だけ標準入力から読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
散布図の下三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
option: ダークスレートブルーを用いる	color = 'darkslateblue'
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
ファイルをEUCで書き込み用に開く]	open(filepath, mode='w', encoding='euc_jp')
option: 未入力値を先頭にする	na_position = 'first'
リスト内の要素が全て真か	all(aList)
二つのオブジェクトが等しいか調べる	obj == obj2
データフレームのカラムのNaNを中央値で補う	df[col].fillna(df[col].median())
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
option: フォントの色をオレンジにセットする	color = 'orange'
option: 決定木の深さを制限する	maxdepth = n
option: オールドレース色を使う	color = 'oldlace'
データフレームをJSONLファイルに保存する	df.to_excel(filename)
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
JSONフォーマットの文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
整数nがリストのどれかかどうか調べる	n in aList
ファイルの絶対パス	os.path.abspath(filepath)
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
ヒストグラムをディムグレー色として描画する	plt.hist(データ列, color='dimgray')
JSON形式の文字列をデータに変換する	json.loads(jsonString)
ダークオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
データフレームのカラムは何曜日か調べる	df[col].dt.weekday_name
リストをマゼンタで表示する	print(f'\033[35m{value}\033[0m')
青い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: フォントの色をスカイブルーに設定する	color = 'skyblue'
グラフに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
イテラブルとリストについて散布図をプロットし、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
リストと配列について散布図を描画して、マーカーを左三角に変更する	plt.plot(データ列x, データ列y, marker='<')
本日が木曜日	datetime.datetime.today().weekday() == 3
option: サーモンを使う	color = 'salmon'
パープル色として線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
ヒストグラムを描画し、、ビン数を変更する	plt.hist(データ列, bins=区関数)
option: アイボリー色を使用する	color = 'ivory'
折れ線グラフをペールグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='palegreen')
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
オブジェクトは文字列型か	isinstance(obj, str)
nをn2で割った余りを計算する	n % n2
文字列中からパターンに複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
黒いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
２つの実行結果を文字列で区切ってプリントする	print(value, value2, sep=s)
グリッド線	plt.grid(alpha=0.5)
2つの変数をスラッシュで区切って表示する	print(value, value2, sep='/')
折れ線グラフの▼マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
カラムの中央値	ds.median()
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
縦棒グラフをライトシアン色として描画する	plt.bar(データ列x, データ列y, color='lightcyan')
データ列と配列について散布図を描画して、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
日付データを文字列を用いてフォーマットする	"aDate.strftime(""%d/%m/%y"")"
ファイルパスを文字列の示す文字コードを用いて開く]	open(filepath, encoding=s)
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
データフレームを列によってグループ化し、、標準偏差を求める	df.groupby(column).std()
正則化付き線形回帰モデルを新規作成する	model = sklearn.linear_model.ElasticNet()
ヒストグラムの色をダークスレートブルーに変更する	plt.hist(データ列, color='darkslateblue')
全ての印字可能な文字	string.printable
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
青い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
データフレームのNaNを平均値に指定する	df.fillna(df.mean())
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
カウントプロットを描く	sns.countplot(x='列名', data=df)
プログラムの実行を強制的に終える	sys.exit()
'A'列によってによってデータフレームを破壊的にソートする	df.sort_values(by='A', inplace=True)
データフレームの中に文字列と文字列があるか確認する	df.isin([value, value2])
TSVをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データフレームを各列毎にグループ化して列の最小値を求める	df.groupby(column)[column2].min()
タプルのキーを列挙する	aDict.keys()
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
データ列を分割する	pd.cut(ds, aList)
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
ボックスチャートをプロットして平均線を加える	plt.boxplot(データ列, meanline=True)
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgrey')
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
日本語が文字列に使われているかどうかテストする	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データフレームの代表値	df.describe()
横棒グラフをプロットして、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
データフレームの列と列の相関行列ケンドール順位相関係数として	df[[column, column2]].corr(method='kendall')
印字可能な文字を使う	string.printable
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
nの三乗を求める	n ** 3
行列の行ごとの最大	np.max(aArray, axis=1)
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
読み込みモードとしてファイルを開いて]、fとする	f = open(filepath, mode='r')
表から重複を残さず削除する	df.drop_duplicates(keep=False)
キューから最初の値を取り出す	deq.remove(element)
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームをSJISでJSONLファイルに書き込む	df.to_csv(filename, encoding='shift_jis')
オブジェクトがクラスのインスタンスか	isinstance(obj, クラス)
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
データフレームをグループ化し、それぞれの列に対し平均値を計算する	df.groupby(column)[column2].mean()
文字列の大文字と小文字を交換する	s.swapcase()
実数のコサインの逆数	math.acos(x)
実線で線をプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
nからn2の値を引いてnに代入する	n -= n2
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフに▽マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
option: ナバホホワイトを使う	color = 'navajowhite'
ヒストグラムをコーラル色として描画する	plt.hist(データ列, color='coral')
データ列を100の位で丸める	ds.round(-2)
書き込みできるようにBOM付きとしてファイルを開く]	open(filepath, mode='w', encoding='utf_8_sig')
散布図に星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
環境名	sys.platform
列を累加した列	itertools.accumulate(iterable)
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
ヒストグラムの色をラベンダーブラッシュにする	plt.hist(データ列, color='lavenderblush')
配列を2次元1行に変形する	aArray.reshape(1, -1)
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
ポスター用にプロットを設定する	sns.set(context='poster')
データフレームのカラムを10の位で丸めて整数にする	df[col].round(-1).astype(int)
折れ線グラフを半透明の破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ミディアムアクアマリン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームを列によってで破壊的に並べる	df.sort_values(by=column, inplace=True)
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
小数点数の逆双曲線余弦を計算する	math.acosh(x)
データフレームのカラムをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
グラフの見栄えをイイ感じにする	sns.set()
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
データフレームをNaNを含めて列でグループ分けする	df.groupby(column, dropna=False)
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
ストリームにxを文字列に変換して書く	f.write(str(x))
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
シアン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
色差別なくカラーパレットをプロットの描画で使う	sns.set(pallete='colorblind')
ネイビー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
折れ線グラフの上三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
ゼロ埋めされた行列を作る	np.zeros(要素数)
要素が辞書の値として含まれている	element in aDict.values()
等しい量になるように分割数nとして配列を分割する	pd.qcut(aArray, n)
整数LCM	math.lcm(n, n2)
文字列を最後から部分文字列で区切る	s.rsplit(sub)
データフレームを各列と列の組み合わせ毎にグループ化し、平均値を求める	df.groupby([column, column2], as_index=False).mean()
option: ブルーバイオレット色を用いる	color = 'blueviolet'
カラムの欠損値を最大値に設定する	ds.fillna(ds.max())
dateStringを日付データに変換する	pd.to_datetime(dateString)
データフレームを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
option: シーグリーン色を使う	color = 'seagreen'
十六進文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
２つの列でによって表データを降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
マッピングのキーの一覧を得る	aDict.keys()
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
横棒プロットを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
データフレームのリストカラムのどの値が頻出か確認する	df[aList].mode()
ミディアムスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
数列の推移を色付きの一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
本日が何日か知る	datetime.datetime.today().day
異なる列をキーとして2つの表データを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームのリストカラムを正規表現patternで一度にreplに置換する	df[aList].replace(pattern, repl, regex=True)
ヒストグラムの色をアンティークホワイトに指定する	plt.hist(データ列, color='antiquewhite')
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ライトブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightblue')
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
option: アイボリー色を使う	color = 'ivory'
組の要素を並べる	sorted(aTuple)
２つのオブジェクトは等しいか	obj == obj2
小数点数の逆双曲線正弦を計算する	math.asinh(x)
データフレームの平均値	df.mean()
線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの相関行列	df.corr()
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
文字列を部分文字列で分割し、、文字列リストに変換する	s.split(sub)
大文字・小文字を無視して正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
タプルを引数として展開して出力する	print(*aTuple)
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
option: グラフの色をマゼンタに変更する	color = 'magenta'
二つのデータフレームを列'A'と列'B'をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
ファイルをSJISを使って追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
ダークシアン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
文字列中に非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
ファイルを絶対パスに変換する	os.path.abspath(filepath)
xの小数点以下'5'桁の文字列にする	':.5f'.format(x)
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
赤い上三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
option: サンディーブラウン色を使う	color = 'sandybrown'
JSONファイルの入力を読み込んで、dataとする	data = json.load(fin)
option: オレンジレッド色を使用する	color = 'orangered'
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
x軸とy軸の比率を等しくする	plt.axis('equals')
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
日付時刻データが木曜日か	aDatetime.weekday() == 3
option: フォントの色をピーチパフに設定する	color = 'peachpuff'
中央値でデータフレームの中の列をビン分割する	pd.qcut(df[col], 2)
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
線グラフの色をオレンジレッドに指定する	plt.plot(データ列x, データ列y, color='orangered')
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
部分文字列で文字列を分割する	s.split(sub)
列の欠損値を最大値に設定する	ds.fillna(ds.max())
option: フォントの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
タイムスタンプデータが日付時刻データより前	aDatetime < aDatetime2
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
ペールグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
option: パールバイオレットレッド色を用いる	color = 'palevioletred'
点線に折れ線グラフの線種を設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
列によってデータフレームをグループ化し、、それぞれのグループごとの標準偏差を算出する	df.groupby(column).std()
データ列の残差を散布図として描く	sns.residplot(x=データ列, y=データ列)
ロバスト分類器を作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
リストを緑色にする	f'\033[32m{value}\033[0m'
データフレームから重複したデータを削除する	df.drop_duplicates()
２つのリストから辞書	dict(zip(aList, aList2))
リストを昇順に並べ直す	sorted(aList, reverse=False)
文字コードで文字列をバイト列に変換する	s.encode(encoding=encoding)
両端キューの長さを制限する	collections.deque(maxlen=n)
配列の次元を変形する	aArray.reshape(行数, 列数)
配列の標準偏差	np.std(aArray)
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
コーンフラワーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
整数nを八進文字列に変換する	oct(n)[2:]
データフレームの先頭n行を見る	df.head(n)
ヒストグラムを濃い青色で描画する	plt.hist(データ列, color='darkblue')
折れ線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
データを最大最小値を使って標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
折れ線グラフの左三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
ペールグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
データフレームのどの値が頻出か見る	df.mode()
ヒストグラムをダークブルー色で描画する	plt.hist(データ列, color='darkblue')
データフレームを列によってグループ化してそれぞれのグループ毎の個数を求める	df.groupby(column).count()
青い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームの欠損値が含まれる部分を色付けする	df.style.highlight_null()
折れ線グラフの▼マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
データ列間の平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
四角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
ファイルを追加できるように文字列の示すエンコーディングで開く]	open(filepath, mode='a', encoding=s)
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
異なる列をキーとして2つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ライムグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
棒グラフをミディアムバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
両端キューのn番目に要素を挿入する	deq.insert(n, element)
二つの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
インデント幅nで、辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
文字の文字コード	ord(ch)
データフレームのカラムをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
option: マーカーをダイアモンドに変更する	marker = 'D'
横棒グラフをティール色として描画する	plt.barh(データ列x, データ列y, color='teal')
option: グラフの色をラベンダーにセットする	color = 'lavender'
本日の日数	datetime.datetime.today().day
option: 改行コードをWindowsに変更する	newline = '\r\n'
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
1行だけカラムをデータフレームから除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
数を十の位で丸める	round(x, -1)
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
データ列を10の位で四捨五入する	ds.round(-1)
データフレームのそれぞれのグループごとの最大値を求める	df.groupby(column).max()
散布図の丸印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
ヒストグラムの色をカーキに指定する	plt.hist(データ列, color='khaki')
文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: ライトグリーンを用いる	color = 'lightseagreen'
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
リストとリストの散布図に黒い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
フォーマットfmtとしてデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col], format=fmt)
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
ロバスト推定としてクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ロージーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='rosybrown')
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
部分的最小二乗法として回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
文字列がカタカナ	('ァ' <= ch <= 'ン')
分数を用いる	import fractions
option: 色をグレーにセットする	color = 'gray'
サーモン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
散布図を下三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='v')
Pandasで、文字列をフォーマットfmtを用いて日付データに変換する	pd.to_datetime(s, format=fmt)
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
リストと配列について散布図をプロットしてマーカーを星に変更する	plt.plot(データ列x, データ列y, marker='*')
option: フォントの色を小麦色に指定する	color = 'wheat'
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
ダークグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
ファイルパスからファイル名を求める	os.path.basename(filepath)
文字列内にひとつでもアスキー文字があるか	any(c.isascii() for c in s)
今日をISO書式の文字列に変換する	datetime.datetime.today().isoformat()
柱状図の上限下限を設定する	plt.hist(データ列, range=(start, end))
option: ベクトルのデータ型を指定する	dtype = np.int
Pythonパスのリスト	sys.path
option: グラフの色をライトブルーに設定する	color = 'lightblue'
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
option: 区切りをコロンにする	sep = ':'
２つのカウンタのいずれかに含まれる値	aCounter | aCounter2
データフレームの未入力値をxに設定する	df.fillna(x)
文字列が文字列リストに含まれるか調べる	s in aStringList
option: ピンク色を用いる	color = 'pink'
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
n個にデータフレームの中の列をビン分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
カラムの要約統計量	ds.describe()
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
リストと数列について散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
グラフの横軸を対数に変更する	plt.xscale('log')
option: マーカーを三角に変更する	marker = '^'
棒グラフをゴールド色として描画する	plt.bar(データ列x, データ列y, color='gold')
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
何回まで再帰ができるかを	sys.getrecursionlimit()
昇順にタプルの要素をソートする	sorted(aTuple, reverse=True)
棒グラフをミディアムアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
データフレームのリスト列は正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
option: ネイビー色を使用する	color = 'navy'
辞書順で二つの文字列を比較する	s < s2
折れ線グラフの色をラベンダーブラッシュに指定する	plt.plot(データ列x, データ列y, color='lavenderblush')
x,yの複素数	complex(x, y)
option: ダークバイオレットにグラフの色を変更する	color = 'darkviolet'
xが-9以上、9以下かどうか	-9 <= x <= 9
縦棒プロットをプロットして、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
プログラムの実行を即座に終了する	sys.exit()
散布図を真紅色を用いて描画する	plt.scatter(データ列x, データ列y, color='crimson')
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
データ列を円プロットにする	plt.pie(データ列, startangle=90)
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
範囲から配列を作る	np.linspace(最小値, 最大値, 要素数)
辞書を階層化マップに変換する	collections.ChainMap(aDict)
リストと数列の散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームを列ごとにグループ化して、それぞれのグループごとの分散を計算する	df.groupby(column).var()
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
少ない順番にカウンタをリストとして得る	aCounter.most_common()[::-1]
データを最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
縦棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
グリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
青色で変数をプリントする	print(f'\033[34m{value}\033[0m')
リストと配列についての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
数列とデータ列の散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
option: namesを列名に設定する	names = names
ヒストグラムとしてデータ列を描画する	plt.hist(データ列)
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
formatパターンの文字列を日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
option: ホットピンク色を使う	color = 'hotpink'
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
option: ナバホホワイト色を使う	color = 'navajowhite'
2つのデータフレームを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='A', right_on='B')
縦棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
データフレームのカラムの下位25%	df[col].quantile(0.75)
二つの文字列は等しくないかどうか調べる	s != s2
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
option: 色をライトイエローに変更する	color = 'lightyellow'
プログラムの実行を異常終了する	sys.exit(1)
option: グラフの色をレモンシフォンにセットする	color = 'lemonchiffon'
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
数列とリストについての散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
各列毎にデータフレームを集約して、列の最小値を算出する	df.groupby(column)[column2].min()
縦棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
option: ライトグレー色を使用する	color = 'lightgrey'
文字列を水色にする	f'\033[36m{value}\033[0m'
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
文字列が正規表現にマッチさせる	re.match(pattern, s)
配列の形状	aArray.shape
円プロットにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
グラフにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
カテゴリで色分けしてデータフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
ファイルがあるかどうか確認する	os.path.exists(filepath)
実行結果をシアンで表示する	print(f'\033[36m{value}\033[0m')
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
データフレームを列の値でグループ分けして列挙する	[(name, group) for name, group in df.groupby(column)]
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
セット＼集合	aSet.difference(aSet2)
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
配列の列ごとの平均値	np.mean(aArray, axis=0)
両端キューに要素をエンキューする	deq.appendleft(element)
xでデータフレームのカラムのNaNを埋める	df[col].fillna(x)
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='teal')
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
ホワイト色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
option: 右三角印を加える	marker = '>'
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
データフレームのカラムの中にある日付データの数を数える	df[col].isin([value]).sum()
option: ナバホホワイトにグラフの色を設定する	color = 'navajowhite'
ファイルパスをバイナリできるように開く]	open(filepath, mode='rb')
折れ線グラフの色をドジャーブルーに指定する	plt.plot(データ列x, データ列y, color='dodgerblue')
横棒グラフをミディアムブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumblue')
青い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
横棒グラフの色を真紅にする	plt.barh(データ列x, データ列y, color='crimson')
mathを用いる	import math
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
項目名がタプル上で定義済みか	key in aDict
説明変数と目的変数で線形回帰モデルを学習する	model.fit(説明変数, 目的変数)
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
データ列の最頻値	ds.mode()
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
データフレームから数値データを抽出する	df.select_dtypes('number')
正規表現patternでまとめてreplに列を置き換える	ds.replace(pattern, repl, regex=True)
集合の補集合	aSet.difference(aSet2)
option: スカイブルーにグラフの色を設定する	color = 'skyblue'
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
SJISで追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='shift_jis')
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
辞書の項目を列挙する	aDict.values()
配列の列ごとの標準偏差を求める	np.std(aArray, axis=0)
最大値でデータフレームの欠損値を補う	df.fillna(df.max())
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
option: 下三角マーカーを使う	marker = 'v'
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightgreen')
year年month月day日の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
クラス分類をブースティングとして行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
BOM付きで書き込みできるようにファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
２つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
データフレームのカラムの曜日数	df[col].dt.dayofweek
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
ケンドール順位相関係数でデータフレームのリストで指定した列の相関行列を求める	df[aList].corr(method='kendall')
itertoolsモジュールをインポートする	import itertools
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
データフレームのカラムの月	df[col].dt.month
データフレームのカラムが文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
モデルを学習する	model.fit(説明変数, 目的変数)
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
year年の日付	datetime.date(year=year, month=1, day=1)
option: マーカーをポイントに変更する	marker = '.'
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
カラムの未入力値を直後の値で埋める	ds.fillna(method='bfill')
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
データフレームの列の欠損値を前の値に増やす	df[col].fillna(method='ffill')
折れ線グラフの菱形マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
option: ダークブルー色を使う	color = 'darkblue'
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
ミディアムパープル色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
縦棒グラフを茶色色として描画する	plt.bar(データ列x, データ列y, color='brown')
散布図をコーラル色を用いて描画する	plt.scatter(データ列x, データ列y, color='coral')
線グラフを青緑色を用いて描画する	plt.plot(データ列x, データ列y, color='teal')
イテラブルの集合	set(iterable)
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
散布図としてデータフレームの全カラムを可視化する	sns.pairplot(df)
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
折れ線グラフをフクシア色を用いて描画する	plt.plot(データ列x, データ列y, color='fuchsia')
タプルの最初の文字列を探す	aTuple.index(element)
箱髭図を横向きにする	plt.boxplot(データ列, vert=False)
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
0から始まる無限の数列を得る	itertools.count()
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
クラス分類の再現率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
組をnからナンバリングする	enumerate(aTuple, start=n)
データフレームから指定された列だけ取り出す	df[[column]]
バイオリン図を描く	sns.violinplot(x='カテゴリ列', y='列', data=df)
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
新しいロジスティック回帰モデルを作成する	model = sklearn.linear_model.LogisticRegression()
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
JSONLファイルにデータフレームを保存する	df.to_excel(filename)
リストと配列についての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフをライムグリーン色として描画する	plt.barh(データ列x, データ列y, color='limegreen')
両端キューをリストに変換する	list(deq)
文字列がタプルに含まれない	element not in aTuple
データフレームのリスト列のNaNを最大値で補う	df[aList].fillna(df[aList].max())
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
散布図の四角マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
日付データが土曜日かどうか調べる	aDate.weekday() == 5
option: マーカーの線幅を変更する	markeredgewidth = 2.5
ヒストグラムの色をディープスカイブルーにセットする	plt.hist(データ列, color='deepskyblue')
option: グラフの色をピンクに変更する	color = 'pink'
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
折れ線グラフの色をコーンズシルクに指定する	plt.plot(データ列x, データ列y, color='cornsilk')
列の各要素をスタックの末尾に追加する	deq.extend(iterable)
部分文字列で文字列を二分し最初の文字列を使う	s.partition(sub)[0]
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
ISO書式の文字列をタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
折れ線グラフのダイアモンド印の太さを指定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
nが2で割り切れる	n % 2 == 0
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
上限から下限までの範囲で度数分布図を描く	plt.hist(データ列, range=(start, end))
文字列を白色にする	f'\033[37m{value}\033[0m'
ヒストグラムベースの勾配ブースティング回帰木を作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
データフレームの列の中に文字列と日付データがいくつあるかカウントする	df[col].isin([value, value2]).sum()
nが正の整数か	n > 0
カウンタを集合に変換する	set(aCounter)
データ列を千の位で丸める	ds.round(-3)
タプル内の要素は全て真	all(aTuple)
データフレームから指定されたデータ型の列名一覧	df.select_dtypes(型).columns
ValueMapでデータフレームのカラムの値を置換する	df[col].replace(ValueMap)
オプションで、標準エラーを出力先にする	file = sys.stderr
文字列のプレフィックスから部分文字列を除去する	s.removeprefix(sub)
キーワード引数で辞書に更新する	aDict.update(**kwargs)
option: クリムゾン色を使う	color = 'crimson'
プログラムの実行を異常停止する	sys.exit(1)
データフレームを各列毎にグループ化し、文字列というグループの個数を計算する	df.groupby(column).size()[s]
文字列の中のASCII限定としてパターンによる全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
直前の値でデータフレームの欠損値を埋める	df.fillna(method='ffill')
ミディアムオーキッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
2つの文字列は等しい	s == s2
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
データフレームのカラムが何年か見る	df[col].dt.year
ファイルを読み込み用にオープンする]	open(filepath, mode='r')
ヒストグラムを2つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
要素ひとつのタプル	(element,)
ペールグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データフレームに重複があるか確認する	df.duplicated()
オブジェクトのクラスを調べる	type(obj)
紺碧色でヒストグラムを描画する	plt.hist(データ列, color='azure')
ダークオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
データ列がどれだけ、分散しているか見る	ds.var()
文字列をゼロ埋めする	s.zfill(文字列幅)
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
散布図を青緑色を用いて描画する	plt.scatter(データ列x, データ列y, color='teal')
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
散布図の△マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
青色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
散布図に赤いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: ▲マーカーを使う	marker = '^'
折れ線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
シーケンスから重複なくn個ランダムに選ぶ	random.sample(iterable, k=n)
nの各桁の総和	sum(map(int, str(n)))
辞書順で文字列が文字列より後かどうか	s > s2
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
アルファベットから一つランダムに選ぶ	random.choice(string.ascii_uppercase)
データフレームを関数によってまとめたグループ	df.groupby(関数)
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
浮動小数点数の最大値	sys.float_info.max
オブジェクトはバイト列クラス	isinstance(obj, bytes)
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
棒グラフをライトスレイグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightslategray')
データ列を10の位で四捨五入して、整数型にする	ds.round(-1).astype(int)
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
タイムスタンプデータをISO形式の文字列にする	aDatetime.isoformat()
option: マゼンタ色を使う	color = 'magenta'
リストとデータ列について散布図を描画してマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
文字列の右側から空白を取り除く	s.rstrip(' ')
イテラブルからカウンタを作る	collections.Counter(iterable)
組を引数として展開して出力する	print(*aTuple)
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
横棒グラフを白色を使って描画する	plt.barh(データ列x, データ列y, color='white')
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
縦棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
option: ミディアムスプリンググリーンに色を変更する	color = 'mediumspringgreen'
option: グラフの線種を実線に変更する	linestyle = 'solid'
データをスケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データ列の離れ具合を見る	sns.residplot(x=データ列, y=データ列)
標準出力を使う	sys.stdout
インディゴにヒストグラムの色を指定する	plt.hist(データ列, color='indigo')
文字列の右側からタブを消す	s.rstrip('\t')
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
イテラブルから重複なく、n個選ぶ	random.sample(iterable, k=n)
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
既にロードされたモジュールを列挙する	sys.modules
オブジェクトが集合クラスかどうか調べる	isinstance(obj, set)
ゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
赤い星マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='*', c='r')
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
変数について数式の積分を求める	sympy.integrate(e, z)
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
データフレームの列と列の相関行列をヒートマップを使って描画する	sns.heatmap(df[[column, column2]].corr())
青いヒストグラムを描画する	plt.hist(データ列, color='b')
文字列を走査し、パターンに複数行対応としてマッチするか調べる	re.search(pattern, s, flags=re.MULTILINE)
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgrey')
セットから何でもいいからひとつ取り出す	aSet.pop()
option: グラフの色をサーモンに設定する	color = 'salmon'
スクリプトファイルの絶対パス	os.path.abspath(__file__)
折れ線グラフに青い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データ列からユニークな値を抽出し、リスト化する	ds.unique().tolist()
ベクトルの和	aArray + aArray2
カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
option: グラフの色をサーモンにセットする	color = 'salmon'
線グラフの色をスチールブルーに指定する	plt.plot(データ列x, データ列y, color='steelblue')
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
アイボリー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
option: 書き込みモードを使う	mode = 'w'
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
散布図をミッドナイトブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
文字列中の文字を列挙する	list(s)
実数の自然対数	math.log(x)
カウンタのユニークな項目をリストとして得る	list(aCounter)
双方向キューの中に文字列が含まれてる	element in deq
線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
n割るn2を求める	n / n2
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
スクリプト名を確認する	sys.argv[0]
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
option: フォントの色をパールゴールデンロッドに指定する	color = 'palegoldenrod'
t分布型確率的近傍埋め込み法として濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
Pandasで、UNIX秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
空文字	''
散布図の▲印を赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
データ列の推移を赤い点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
1文字分標準入力から読む	sys.stdin.read(1)
折れ線グラフの星印の大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
全要素を1で初期化したベクトルを作る	np.ones(要素数, dtype=np.int)
カラムが正規分布からどの程度、歪んでいるか調べる	ds.kurt()
黒い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
タプルの先頭のn要素を捨てる	aTuple[n:]
クラス分類をスタッキングで行う	sklearn.ensemble.StackingClassifier()
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
文字列を新しい文字列で全部置換する	s.replace(sub, newsub)
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
現在の月数を使う	datetime.datetime.today().month
リストとリストについて散布図を描画して星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
グラフの色を全般的に濃くする	sns.set(pallete='deep')
数式を変数について微分する	sympy.diff(e, z)
option: パールバイオレットレッド色を使う	color = 'palevioletred'
データフレームを列で昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
散布図に赤い上三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
SVDで多次元データを濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
散布図の△マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
コンビネーション	math.comb(n, k)
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
option: グラフの色をダークターコイズに変更する	color = 'darkturquoise'
▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
オリーブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
横棒グラフをインディアンレッド色として描画する	plt.barh(データ列x, データ列y, color='indianred')
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
数式の数値を求める	float(e)
シアン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
データ列の変遷を破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: 青色を使用する	color = 'blue'
線グラフの色をダークグリーンにセットする	plt.plot(データ列x, データ列y, color='darkgreen')
文字列が文字列リストのいづれ	s in aStringList
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
ヒストグラムをシエナ色を用いて描画する	plt.hist(データ列, color='sienna')
実数とyの斜辺を求める	math.hypot(x, y)
散布図を黒い三角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='^', c='k')
最後から文字列を部分文字列で区切る	s.rsplit(sub)
ファイルが存在しない	not os.path.exists(filepath)
データフレームの列をインデックスに変更する	df.set_index(column)
リストのn番目のを使う	aList[n]
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
option: 配列のデータ型を指定する	dtype = np.int32
predicateFuncを適用したとき真とならない列の要素	itertools.dropwhile(predicateFunc, iterable)
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
ヒストグラムをロージーブラウン色として描画する	plt.hist(データ列, color='rosybrown')
'A'列と'B'列によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
標準入力から1行だけ改行なしに読む	sys.stdin.readline().rstrip()
データ列の中に文字列が含まれる	ds.isin([value])
散布図の下三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームのリスト列のNaNを最大値で埋める	df[aList].fillna(df[aList].max())
アクア色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
データフレームの行の一覧	df.index
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
配列の合計値を計算する	np.sum(aArray)
データフレームのカラムは何月か見る	df[col].dt.month
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
データ列をn個に分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームを各列と列の組み合わせ毎にグループ化し、、最小値を求める	df.groupby([column, column2], as_index=False).min()
フクシア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
ヒストグラムの色をダークグレーに指定する	plt.hist(データ列, color='darkgrey')
行列のユニークな要素ごとの出現回数	np.unique(aArray, return_counts=True)
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
データフレームの列に重複があればマスクする	df.duplicated(subset=column)
散布図に赤い三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='r')
option: ブランチドアーモンドにグラフの色を指定する	color = 'blanchedalmond'
行列の行列積	np.matmul(aArray, aArray2)
0から始まる無限数列	itertools.count()
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
ダークスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレームの未入力値を50パーセンタイルで埋める	df.fillna(df.median())
データフレームの中のカラムをn個に等量でビン分割する	pd.qcut(df[col], n)
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
列名リストによってデータフレームをソートする	df.sort_values(by=column)
線グラフの色をタンに変更する	plt.plot(データ列x, データ列y, color='tan')
データフレームのカラムが正規分布からどれだけ、尖っているか見る	df[col].skew()
文字列の最初から空白やタブを消す	s.lstrip()
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
要素がマッピングの値として含まれているか	element in aDict.values()
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
オブジェクトが論理値型のインスタンスか	isinstance(obj, bool)
ヒストグラムをアイボリー色を使って描画する	plt.hist(データ列, color='ivory')
rgbの四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列を大文字・小文字を無視して正規表現で区切る	re.split(pattern, s, flags=re.IGNORECASE)
プロットに凡例を加える	plt.legend(['凡例A', '凡例B'])
リストを中央値で分割する	pd.qcut(aList, 2)
リストとリストについて散布図を描き、下三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
ガンマ関数の値	math.gamma(x)
折れ線グラフの四角印の色を変える	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
散布図に赤いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
列をリストとして選択する	df[column].values.tolist()
空白文字を全部使う	string.whitespace
option: バッファのサイズを大きくする	buffering = 4096
線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームのカテゴリデータをダミー変数にする	pd.get_dummies(df)
イテラブルから複数個ランダムに選ぶ	random.choices(iterable, k=n)
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
グラフの色を全般的に明るくする	sns.set(pallete='bright')
グリーンにヒストグラムの色を設定する	plt.hist(データ列, color='green')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
option: 表示を半透明にする	alpha = 0.5
データフレームの列がx以上かつx2未満のデータを取り出す	df[(x <= df[column]) & (df[column] < x2)]
タイムスタンプデータをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
実数のcosの逆数	math.acos(x)
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
ライトスレイグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
データ列の変化を折れ線グラフとして可視化する	plt.plot(range(len(データ列)), データ列)
option: グラフの色をシルバーに指定する	color = 'silver'
ヒストグラムの色をベージュにする	plt.hist(データ列, color='beige')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
プロットの描画でパステル調にカラーパレットを用いる	sns.set(pallete='pastel')
データフレームのリストカラムが正規分布からどれだけ、歪んでいるか確認する	df[aList].kurt()
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
option: シャルトリューズ色を使用する	color = 'chartreuse'
値はセットに含まれないか調べる	element not in aSet
散布図の右三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
ブランチドアーモンド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
option: ゴーストホワイト色を使う	color = 'ghostwhite'
部分文字列で文字列を分けた時の最初の文字列を見る	s.partition(sub)[0]
ケンドールとしてデータフレームのリストで指定されたカラムの相関行列を求める	df[aList].corr(method='kendall')
キュー中の要素の位置	deq.index(element)
両端キューの末尾にイテラブルの要素を順に入れる	deq.extend(iterable)
折れ線グラフを白色を用いて描画する	plt.plot(データ列x, データ列y, color='white')
グラフの目的をスライドに設定する	sns.set(context='talk')
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
タプルの末尾のn要素を取り除く	aTuple[:-n]
rgbの大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームをJSONLファイルにSJISで書き込む	df.to_csv(filename, encoding='shift_jis')
ファイル全体をリストに変換する	[s.strip() for s in f.readlines()]
データフレームを各列毎にグループ化して、列の分散を計算する	df.groupby(column)[column2].var()
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
線グラフの色をネイビーに変更する	plt.plot(データ列x, データ列y, color='navy')
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
文字列を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
イテラブルの重複コンビネーションを得る	itertools.combinations_with_replacement(iterable, n)
赤い一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
改行	'\n'
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
保存するCSVファイルの小数点以下の桁数を指定する	df.to_csv(filename, float_format='%.3f')
データフレームの列名一覧で指定された列を削除する	df.drop(columns, axis=1)
横棒グラフを赤色を用いて描画する	plt.barh(データ列x, データ列y, color='red')
オブジェクトは整数型か調べる	isinstance(obj, int)
破壊的に2つの列で降順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームのカラムをタイムスタンプ型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
プロットのカラーパレットを明るくする	sns.set(pallete='bright')
データフレームから列を二つのみ選択する	df[[column, column2]]
散布図の丸印を黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
MLPとして回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
ISO8601の文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
マップの浅いコピーを作る	aDict.copy()
nをn2で割ったmod	n % n2
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
option: ダークマゼンタにグラフの色を設定する	color = 'darkmagenta'
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
二つの列の値でデータフレームを集約する	df.groupby(['A', 'B'])
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
文字列の中のケースを無視してパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
Pandasのバージョンを表示する	print(pd.__version__)
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
タイムスタンプデータが日付時刻データより前かどうか調べる	aDatetime < aDatetime2
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
列にイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
option: ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
散布図に青いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
カウンタから列をカウントして引く	aCounter.subtract(iterable)
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
赤いポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
タブ区切りのファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
日付時刻データの時刻	aDatetime.time()
実線にヒストグラムの線の種類を設定する	plt.hist(データ列, linestyle='solid')
タプル内の要素が少なくともひとつ真	any(aTuple)
折れ線グラフの色をダークバイオレットにセットする	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームを'A'列によってまとめた表を見る	df.groupby('A')
rgbの左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
タプルとタプルを加える	aTuple + aTuple2
日付時刻データの分	aDatetime.minute
option: ライムグリーンにグラフの色を設定する	color = 'limegreen'
リネン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
文字列を右寄せにする	s.rjust(文字列幅)
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
小数点数を切り上げて整数に変換する	math.ceil(x)
散布図の右三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
1からnまでの整数列	list(range(1, n+1))
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
ふたつの集合の積集合	aSet.intersection(aSet2)
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
ミディアムスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='mediumslateblue')
リストとリストの散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
データフレームを二つの列によってグループ化する	df.groupby(['A', 'B'])
ヒストグラムの区間数を変更する	plt.hist(データ列, bins=区関数)
ぐるぐるとイテラブルを繰り返す	itertools.cycle(iterable)
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
データフレームから指定された二つの列のみ抽出する	df[[column, column2]]
線グラフの色をグリーンイエローに変更する	plt.plot(データ列x, データ列y, color='greenyellow')
option: 色を半透明にする	alpha = 0.5
赤い破線で数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
横棒グラフをダークオレンジ色として描画する	plt.barh(データ列x, データ列y, color='darkorange')
パールゴールデンロッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
データを平均と分散を用いて標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
線グラフをカーキ色として描画する	plt.plot(データ列x, データ列y, color='khaki')
ラベンダーブラッシュ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームの指定した列をリストとして抽出する	df[column].values.tolist()
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
option: グラフを点線に変更する	linestyle = 'dotted'
折れ線グラフの色をラベンダーブラッシュに変更する	plt.plot(データ列x, データ列y, color='lavenderblush')
双方向キューの大きさ	len(deq)
ライトスチールブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
黒いダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データ列とリストの散布図に赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
整数nが配列のいづれかか調べる	n in aArray
データフレームのカラムの歪度	df[col].kurt()
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
nを二進表現に変換する	bin(n)
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
散布図をrgbの左三角マーカーで描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
縦方向に二つのデータフレームを合体させる	pd.concat([df, df2], axis=0)
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
数の小数点以下を丸める	round(x)
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
文字列が全て大文字か調べる	s.isupper()
白色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
n進文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
横棒グラフの色をrgbに変更する	plt.barh(ラベル列, データ列, color=rgb)
スーパーセットもしくは等しいか調べる	aSet > aSet2
ゴールドにヒストグラムの色を設定する	plt.hist(データ列, color='gold')
折れ線グラフのバツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
データフレームのそれぞれのグループ毎の標準偏差	df.groupby(column).std()
二次元タプルをフラット化する	sum(aTuple)
option: フォントの色をフォレストグリーンに設定する	color = 'forestgreen'
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
データ列を10の位で丸めて整数型にする	ds.round(-1).astype(int)
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
ピアソンとしてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
散布図をネイビー色を使って描画する	plt.scatter(データ列x, データ列y, color='navy')
グラフのカラーパレットを全般的に明るくする	sns.set(pallete='bright')
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
オブジェクトがバイト列クラスか	isinstance(obj, bytes)
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
行列を一次元化する	aArray.flatten()
rgbに棒プロットの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
日付時刻データが月曜日かどうか調べる	aDatetime.weekday() == 0
浮動小数点数が整数か調べる	x.is_integer()
正規表現を用いる	import re
option: 色をホワイトスモークに設定する	color = 'whitesmoke'
線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
データフレームの中に文字列と日付データがあるか調べる	df.isin([value, value2])
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
横棒グラフをオリーブ色を用いて描画する	plt.barh(データ列x, データ列y, color='olive')
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
散布図をミディアムスプリンググリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
現在処理中の例外を情報	sys.exc_info()
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
ミントクリーム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
折れ線グラフにポイント印を使う	plt.plot(データ列x, データ列y, marker='.')
データフレームから指定された列の名前一覧の列のみ選択する	df[columns]
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
暗くカラーパレットをグラフの描画で使う	sns.set(pallete='dark')
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
実数のn乗して浮動小数点数による余り	pow(x, n, y)
スノー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategray')
nがn2よりも小さいか調べる	n < n2
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
リストが少なくともひとつ真か調べる	any(aList)
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
長さが一致しないときのzip	itertools.zip_longest(iterable, iterable2)
２つのデータフレームを列'A'と列'B'をキーにして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
文字列が組に含まれないか調べる	element not in aTuple
数列をヒストグラムにする	plt.hist(データ列)
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: フォントの色をサーモンに設定する	color = 'salmon'
データフレームのカラムのNaNを平均に設定する	df[col].fillna(df[col].mean())
option: グリーン色を使う	color = 'green'
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
データフレームを列の値によってグループ分けする	df.groupby(column)
大きい順にデータフレームを複数の列を用いてでソートする	df.sort_values(by=column, ascending=False)
アンサンブル学習を使って回帰分析を行う	sklearn.ensemble.VotingRegressor()
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
パウダーブルーにヒストグラムの色を変更する	plt.hist(データ列, color='powderblue')
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
option: ナバホホワイトを用いる	color = 'navajowhite'
日付データをタプルに変換する	aDate.timetuple()
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ヒストグラムの色をレモンシフォンにセットする	plt.hist(データ列, color='lemonchiffon')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
日付時刻データにn週間を加算する	aDatetime + datetime.timedelta(weeks=n)
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
凡例を表示する	plt.legend()
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データ列を用いる	import pandas as pd
データ列の欠損値を最頻値に変更する	ds.fillna(ds.mode().iloc[0])
文字列内にひとつでも空白がある	any(c.isspace() for c in s)
横棒グラフをブランチドアーモンド色を使って描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
散布図の左三角印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
回帰分析をブースティングで行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
エクセルデータファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
データ列のNaNを最小値で置き換える	ds.fillna(ds.min())
option: ミントクリームに色を設定する	color = 'mintcream'
xが-9以上、9以下か調べる	-9 <= x <= 9
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
黒いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='k')
リストを行列に変換する	np.array(aList)
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
ヒストグラムをライトゴールドロディイエロー色として描画する	plt.hist(データ列, color='lightgoldenrodyellow')
option: グラフの色をシアンに設定する	color = 'cyan'
ヒストグラムを青色として描画する	plt.hist(データ列, color='blue')
空の勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
プラットフォームのコードポイントの最大値	sys.maxunicode
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
カウンタの要素を増やす	aCounter[element] += 1
データフレームを列によってまとめた表を使う	df.groupby(column)
散布図をオレンジレッド色として描画する	plt.scatter(データ列x, データ列y, color='orangered')
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
ファイルをバイナリ書き込みできるように開く]	open(filepath, mode='wb')
ハローワールドと出力する	print('Hello World')
横棒グラフの色を指定する	plt.barh(ラベル列, データ列, color=rgb)
箱ひげ図を用いてリストを描画する	plt.boxplot(データ列)
散布図に青い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
複数の列の値によってデータフレームを集約し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
オブジェクトが無限に続くイテラブル	itertools.repeat(element)
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
散布図を大バツマーカーとして描く	plt.plot(データ列x, データ列y, marker='X')
データ列が何秒か見る	ds.dt.second
文字列中に非小文字が含まれるか確認する	any(not c.islower() for c in s)
データフレームのリスト列の正規分布に対する左右対称性	df[aList].kurt()
日付データが水曜日か調べる	aDate.weekday() == 2
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
散布図をピンク色として描画する	plt.scatter(データ列x, データ列y, color='pink')
option: ライトスカイブルー色を使う	color = 'lightskyblue'
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
破壊的にデータフレームを二つの列によってで並べる	df.sort_values(by=['A', 'B'], inplace=True)
データフレームの内で、カラムと列に重複があるか見る	df.duplicated(subset=[column, column2])
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
タプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
オブジェクトはリストに含まれるか判定する	element in aList
双方向キューの順序を左にn個分ローテンションする	deq.rotate(-n)
日付データにn時間分加算する	aDate + datetime.timedelta(hours=n)
データフレームの中に文字列があるかどうか	df.isin([value])
nの無限数列を求める	itertools.repeat(n)
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
オプションで標準エラーを使用する	file = sys.stderr
日付時刻データと日付時刻データの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
折れ線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
実数の双曲線余弦の逆数	math.acosh(x)
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
option: トマトを用いる	color = 'tomato'
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
rgbの▼マーカーをリストとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの色を赤にする	plt.plot(データ列x, データ列y, color='red')
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ロバスト回帰モデルを準備する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
option: 無視するフッタをnに設定する	skipfooter = n
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
文字列はリストの要素でない	element not in aList
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
ファイルからの入力ストリームを使う	open(filepath)
折れ線グラフをダークターコイズ色として描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
要素∈集合	element in aSet
散布図のマーカーを四角印にする	plt.scatter(データ列x, データ列y, marker='s')
縦棒プロットを描画し、棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
オブジェクトを文字列に変換する	str(obj)
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
データフレームのカラムのどの値が最も現れるか確認する	df[col].mode()
十六進数字を全て求める	string.hexdigits
日付データが月曜日か調べる	aDate.weekday() == 0
モデルを訓練する	model.fit(説明変数, 目的変数)
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
箱ヒゲ図を横方向にする	plt.boxplot(データ列, vert=False)
最大値でデータフレームのカラムの欠損値を補う	df[col].fillna(df[col].max())
データフレームの列の欠損値を後の値で埋める	df[col].fillna(method='bfill')
option: 文字コードtextを使う	encoding = text
タプルのn番目以降の部分を得る	aTuple[n:]
青いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
辞書を複製する	aDict.copy()
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
リストからひとつランダムに選ぶ	random.choice(iterable)
ヒストグラムをビンを設定して描画する	plt.hist(データ列, bins=区関数)
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
チョコレート色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
option: ホワイトを用いる	color = 'white'
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
浮動小数点数が正の数かどうか調べる	x > 0
データフレームを行によってソートする	df.sort_index()
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
データフレームの重複した行数のマスクを使う	df.duplicated()
データ列は正規分布からどの程度、尖っているか調べる	ds.skew()
Pandasで、データフレームのcollのUNIX時間からdatetime64型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
ベクトルのデータ型	aArray.dtype()
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
option: マーカーを丸に指定する	marker = 'o'
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
リストとリストを結合する	aList + aList2
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
option: グラフの色をインディアンレッドにセットする	color = 'indianred'
両端キューが空か調べる	len(deq) == 0
nをn2だけ左シフトする	n << n2
本日をタプルに変換する	datetime.datetime.today().timetuple()
正規表現に大文字・小文字を無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
今日が月曜日か調べる	datetime.datetime.today().weekday() == 0
データ列の平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
等量でビン数nで配列をビン分割する	pd.qcut(aArray, n)
積み上げ横棒グラフを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
散布図をダークサーモン色を使って描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
タン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
アンティークホワイト色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
棒グラフをホワイト色で描画する	plt.bar(データ列x, データ列y, color='white')
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
データフレームの欠損値がある行を削除する	df.dropna()
option: ダークカーキにフォントの色を設定する	color = 'darkkhaki'
文字列全体が正規表現にASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
縦棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
多次元データを特異値分解で濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームのカラムの中に文字列と文字列がある	df[col].isin([value, value2])
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
Pandasでフォーマットで文字列をPandasの日付型にする	pd.to_datetime(s, format='%Y-%m-%d')
グラフの描画で暗くパレットを使う	sns.set(pallete='dark')
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
実数のn乗を計算する	x ** n
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
既存のファイルパスを文字コードtextとして追加できるように開く]	open(filepath, mode='a', encoding=text)
option: 青にフォントの色を変更する	color = 'blue'
折れ線グラフを色付きの実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
折れ線グラフのダイアモンドマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームの欠損値を直後の値に変更する	df.fillna(method='bfill')
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ホワイトスモーク色でヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
散布図に星マーカーを用いる	plt.scatter(データ列x, データ列y, marker='*')
n個に配列を等量でビン分割する	pd.qcut(aArray, n)
要素を両端キューの最初から取り出す	deq.popleft()
縦棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
option: マーカーを上三角に変更する	marker = '^'
リストが空か	len(aList) == 0
ヒストグラムをレベッカパープル色として描画する	plt.hist(データ列, color='rebeccapurple')
黒い四角マーカーを配列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
リストとイテラブルについて散布図を描画し、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
ピアソン積率相関係数としてデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='pearson')
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
2つの数値を文字列で区切ってプリントする	print(value, value2, sep=s)
データフレームを列によって大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
リストに列を続ける	itertools.chain(iterable, iterable2)
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
日付時刻データの秒数	aDatetime.second
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
ミディアムシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
スタッキングを用いて回帰分析を行う	sklearn.ensemble.StackingRegressor()
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
日付時刻データにn時間分加算する	aDatetime + datetime.timedelta(hours=n)
option: コーンズシルク色を使う	color = 'cornsilk'
データフレームのカラムがどれだけ、分散しているか見る	df[col].var()
ペルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='peru')
第一コマンド引数を知る	sys.argv[1]
option: スノー色を使う	color = 'snow'
文字列を走査し、正規表現にマッチするか確認する	re.search(pattern, s)
行列のユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
リストとリストの散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
t分布型確率的近傍埋め込み法として濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
グリッド線	plt.grid(linewidth=3.0)
本日の日付	datetime.date.today()
辞書からキーの値をエラーなく得る	aDict.get(key, None)
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
変数をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
二つの列によってデータフレームを集約する	df.groupby(['A', 'B'])
ヒストグラムをダークレッド色で描画する	plt.hist(データ列, color='darkred')
文字列が部分文字列で終了するかどうか調べる	s.endswith(sub)
モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームをTSVファイルから読む	pd.read_csv(filename, sep='\t')
データフレームの列の欠損値を第二四分位数に変更する	df[col].fillna(df[col].median())
グラフのパレットを全般的に暗くする	sns.set(pallete='dark')
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
ベクトルの累積積を求める	np.cumprod(aArray)
グラフからグリッド線を消す	plt.grid(False)
option: カデットブルー色を用いる	color = 'cadetblue'
ゴールデンロッドにヒストグラムの色を指定する	plt.hist(データ列, color='goldenrod')
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
四角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategray'
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
日付時刻データの日	aDatetime.day
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
空のロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
xを整数に変換する	int(x)
列をカテゴリデータに変換する	ds.astype(object)
t-SNEで多次元データを濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
nがn2か調べる	n == n2
データフレームから型型の列を抽出する	df.select_dtypes(ty)
イテラブルの重複組み合わせを求める	itertools.combinations_with_replacement(iterable, n)
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データフレームのカラムの未入力値を最小値で埋める	df[col].fillna(df[col].min())
データフレームのカラムをグループ化してヒストグラムでグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームを散布図で可視化して、カテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
データフレームのn行まで抽出する	df[:n]
文字列を最初の部分文字列で二つに区切って、前半の文字列を使う	s.partition(sub)[0]
ベージュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
データ列をヒストグラムにする	plt.hist(データ列)
白にヒストグラムの色を設定する	plt.hist(データ列, color='white')
横棒グラフを赤色として描画する	plt.barh(データ列x, データ列y, color='red')
組の文字列が最初に見つかるインデックスを使う	aTuple.index(element)
データフレームの第一四分位数を求める	df.quantile(0.25)
折れ線グラフの色をモカシンにする	plt.plot(データ列x, データ列y, color='moccasin')
小数点数の常用対数	math.log10(x)
option: シャルトリューズを使う	color = 'chartreuse'
option: アンティークホワイトを使う	color = 'antiquewhite'
データフレームを列でグループ化して、グループごとの平均値を計算する	df.groupby(column).mean()
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
両端キューをクリアする	deq.clear()
データ列の中にいくつ未入力値があるか数える	ds.isna().sum()
option: グラフの色をクリムゾンに設定する	color = 'crimson'
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: グラフの色を紺碧にセットする	color = 'azure'
リスト内の要素が少なくともひとつ真かどうか調べる	any(aList)
データ列を度数分布図にする	plt.hist(データ列)
列をキーにして2つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
ベクトルの要素ごとの最小公倍数	np.lcm(aArray, aArray2)
option: カーキ色を使う	color = 'khaki'
ヒストグラムの色をダークスレートブルーに指定する	plt.hist(データ列, color='darkslateblue')
横棒グラフをパウダーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='powderblue')
データフレームから型リストで指定したデータ型のカラムを選択する	df.select_dtypes(include=typeList)
文字列が全て空白からなるかどうか	s.isspace()
option: グラフの色をリネンに設定する	color = 'linen'
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
nが5の倍数かどうか調べる	n % 5 == 0
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
データフレームを'A'列で昇順に並べて更新する	df.sort_values(by='A', ascending=True, inplace=True)
ファイルパスからベースファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
option: デピンクにグラフの色を設定する	color = 'deeppink'
文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
文字列はリストの要素か	element in aList
option: バイナリ書き込み用に設定する	mode = 'wb'
配列の行ごとの最小値	np.min(aArray, axis=1)
データフレームの中に文字列と文字列が含まれる	df.isin([value, value2])
カテゴリ列でグループ化して、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
nが-9以上、9以下か調べる	-9 <= n <= 9
データ列の第三四分位数	ds.quantile(0.75)
ヒストグラムの色をピンクに指定する	plt.hist(データ列, color='pink')
実数のアークタンジェント	math.atan(x)
イテラブルを無限に繰り返す	itertools.cycle(iterable)
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
名前付きタプルを用いる	import collections
ベクトルのユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
nからstep間隔でいつまでも数え上げるする	itertools.count(start=n, step=step)
グラフのx軸にラベルをつける	plt.xlabel('x軸ラベル')
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
横棒グラフをフローラルホワイト色として描画する	plt.barh(データ列x, データ列y, color='floralwhite')
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
n2がnより大きくかつ、n3未満	n < n2 and n2 < n3
データフレームの列が文字列で終わらない行を選択する	df[not df[column].str.endswith(s)]
横棒グラフを描画する	plt.barh(ラベル列, データ列)
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームを'A'列によって小さい順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
rgbのポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
横棒グラフをディムグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='dimgray')
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
見やすいグラフを描画する	import seaborn as sns
ヒストグラムの色をアンティークホワイトにセットする	plt.hist(データ列, color='antiquewhite')
縦棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
文字列中の部分文字列を新しい文字列に回数を制限して置換する	s.replace(sub, newsub, n)
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
表データの内の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
試しに何か動かす	print('Hello World')
棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
表データのそれぞれのグループ毎の最大値を算出する	df.groupby(column).max()
第一引数のファイル名	sys.argv[1]
nが負の数か調べる	n < 0
データフレームのリスト列の中に日付データと文字列がいくつあるかカウントする	df[aList].isin([value, value2]).sum()
データフレームの中に文字列と文字列がいくつ含まれるか数える	df.isin([value, value2]).sum()
クリムゾンにヒストグラムの色を設定する	plt.hist(データ列, color='crimson')
データフレームの欠損値を最小値で置換する	df.fillna(df.min())
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
文字列は全て十進数字かどうか	s.isdecimal()
整数nがセットのどれかか調べる	n in aSet
文字列をセパレータで区切って、列挙する	s.split(sep)
オレンジレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
option: ゴーストホワイトにグラフの色を設定する	color = 'ghostwhite'
option: 行列のデータ型を指定する	dtype = np.int
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
データフレームのカラムの中央値	df[col].median()
option: ダークスラテグレーにグラフの色を変更する	color = 'darkslategray'
データフレームのカラムの中に文字列とがいくつあるか数える	df[col].isin([value, value2]).sum()
スクリプトのファイルの名前	sys.argv[0]
グラフの使途をポスターに変更する	sns.set(context='poster')
データフレームのカラムがどれだけ、分散しているか調べる	df[col].var()
文字列をバイト配列に変換する	bytearray(s)
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
文字列を右から空白で区切る	s.rsplit()
データフレームを関数の値によって集約して列挙する	[(name, group) for name, group in df.groupby(関数)]
データフレームのリストカラムの値を正規表現でまとめてreplに変更する	df[aList].replace(pattern, repl, regex=True)
自然数LCMを計算する	math.lcm(n, n2)
スタックの要素を左にn個分輪番で回す	deq.rotate(-n)
縦棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgrey')
option: グラフの種類を破線に変更する	linestyle = 'dashed'
タプルを並べる	sorted(aTuple)
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
ヒストグラムでカラーマップを使用する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームを表示するとき、表示できる最大行数をnに設定する	pd.set_option('display.max_rows', n)
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ヒストグラムの色をクリムゾンにする	plt.hist(データ列, color='crimson')
折れ線グラフの色をスプリンググリーンにセットする	plt.plot(データ列x, データ列y, color='springgreen')
横棒グラフをミスティローズ色として描画する	plt.barh(データ列x, データ列y, color='mistyrose')
三数の最も小さい値	min(x, y, z)
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgray')
データフレームの中にある日付データの合計を求める	df.isin([value]).sum()
カウンタを辞書から作る	collections.Counter(aDict)
二つのデータフレームを縦方向に合体させる	pd.concat([df, df2], axis=0)
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
青いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
散布図を赤い三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフをライトスレイグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightslategray')
行列を平坦化する	aArray.flatten()
タプルの項目名を列挙する	aDict.keys()
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
ダークグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkgreen')
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
nが奇数か調べる	n % 2 == 1
異なるカラムをキーにして2つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
option: グラフの色をトマトに設定する	color = 'tomato'
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
クラスのサブクラス	issubclass(サブクラス, クラス)
散布図を赤いクロスマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
文字列がASCII文字かどうか調べる	s.isascii()
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
平均でデータフレームのカラムの欠損値を補う	df[col].fillna(df[col].mean())
文字列に変換してイテラブルを連結する	''.join(map(str, iterable))
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ハニーデュー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
データ列のユニークな値を調べる	ds.unique()
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
散布図に赤い▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
データ列が何月か確認する	ds.dt.month
option: ダークオリーブグリーンにグラフの色を変更する	color = 'darkolivegreen'
横棒グラフをサーモン色として描画する	plt.barh(データ列x, データ列y, color='salmon')
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
データフレームのカラムが何日か確認する	df[col].dt.day
カラムを100の位で丸めて、整数にする	ds.round(-2).astype(int)
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgray')
option: フォントの色をロージーブラウンに設定する	color = 'rosybrown'
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
option: ペールグリーンを使う	color = 'palegreen'
折れ線グラフの色をパールゴールデンロッドにする	plt.plot(データ列x, データ列y, color='palegoldenrod')
rgbの右三角マーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのカラムの値が未入力値か確認する	df[col].isna()
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
多次元データを主成分分析としてパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
xのハッシュ値	hash(x)
複数の列の値でデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
線グラフを破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
列から集合	set(iterable)
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
印字できる文字を全部使う	string.printable
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
ファイルのファイル名を使う	os.path.basename(filepath)
option: フォントの色を黄色に設定する	color = 'yellow'
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
分類モデルから目的変数を予測する	y_pred = model.predict(説明変数)
散布図にrgbの△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
numpyを入れる	import numpy as np
列の欠損値を最大値で置換する	ds.fillna(ds.max())
nがn2の倍数かどうか調べる	n % n2 == 0
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
option: 改行をセパレータで使用する	sep = '\n'
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
浮動小数点数の平方根を求める	math.sqrt(x)
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
データフレームを昇順に二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
本日をタプルにする	datetime.datetime.today().timetuple()
淡いピンク色色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
ダークバイオレットにヒストグラムの色をする	plt.hist(データ列, color='darkviolet')
空白で文字列を分割して、整数列に変換する	map(int, s.split())
データフレームをTSV形式のファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
データフレームの列の未入力値を中央値で埋める	df[col].fillna(df[col].median())
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
実数から実数を減算する	x - y
データ列の分を使う	ds.dt.minute
句読点文字を全部使う	string.punctuation
ファイルを書き込みできるように開く]	open(filepath, mode='w')
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
グラフをパステル調にする	sns.set(pallete='pastel')
両端キューの末尾に要素を追加する	deq.append(element)
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
10を底とする実数の対数を算出する	math.log10(x)
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
二つの集合の積集合を使う	aSet.intersection(aSet2)
日付時刻データはタイムスタンプデータと同時かどうかテストする	aDatetime == aDatetime2
変数が無限大に近づく時の数値の極限値を求める	sympy.limit(e, z, oo)
折れ線グラフの色をバリーウッドに指定する	plt.plot(データ列x, データ列y, color='burlywood')
option: 読むシートの名前をnamesに設定する	sheet_name = names
TSVファイルをカラムの名前を指定せず読む	pd.read_csv(filename, header=None)
データフレームとデータ列を連結する	pd.concat([df, ds], axis=1)
箱髭図を描画して、平均線を追加する	plt.boxplot(データ列, meanline=True)
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
SJISでタブ区切りのファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
スタックのn番目に要素を挿入する	deq.insert(n, element)
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
マッピング上で項目名が未定義か調べる	key not in aDict
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
バイアスなしの単回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
ヒストグラムを破線でプロットする	plt.hist(データ列, linestyle='dashed')
８進数字を全部使う	string.octdigits
綺麗なグラフを描画する準備をする	import seaborn as sns
レモンシフォン色でヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
ピアソンを用いてデータフレームのリストカラムの相関行列	df[aList].corr(method='pearson')
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
データフレームの末尾n行を選ぶ	df.tail(n)
辞書から項目名で指定された値を取り出す	aDict.pop(key)
数列と配列について散布図を描画して四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
ファイルを文字列の示すエンコーディングとして書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
option: 白色を使用する	color = 'white'
既存のファイルパスをBOM付きとして追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
折れ線グラフの▲マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
文字列の最後から空白を取り除く	s.rstrip()
データフレームのリストカラムの中にと日付データが含まれるか調べる	df[aList].isin([value, value2])
filepathに現在の作業ディレクトリを変更する	os.chdir(os.dirname(filepath))
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
リストとリストについて散布図を描き、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
配列の列ごとの合計値	np.sum(aArray, axis=0)
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
緑色で文字列をプリントする	print(f'\033[32m{value}\033[0m')
イエローグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='yellowgreen')
カウンタ同士で共通部分演算する	aCounter & aCounter2
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
ヒストグラムの色をサドルブラウンに変更する	plt.hist(データ列, color='saddlebrown')
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
データフレームをTSVファイルから読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
縦棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
折れ線グラフをライトゴールドロディイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの列を削除し、、更新する	df.drop(column, axis=1, inplace=True)
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
ダークブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
行列計算をする	import numpy as np
文字列中から部分文字列を探す	s.find(sub)
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
データを四分位点でスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データフレームの欠損値を最頻値で置換する	df.fillna(df.mode().iloc[0])
データフレームを表示するとき、表示可能な行数をnに設定する	pd.set_option('display.max_rows', n)
nが正の整数か確認する	n > 0
実数のn乗	x ** n
データフレームのカラムの中に存在する日付データの合計を数える	df[col].isin([value]).sum()
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
option: フォントの色をオレンジレッドに設定する	color = 'orangered'
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
三つのデータフレームを縦方向につなぐ	pd.concat([df, df2, df3], axis=0)
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
ダークスラテグレーにヒストグラムの色を指定する	plt.hist(データ列, color='darkslategray')
本日の曜日を整数で求める	datetime.datetime.today().weekday()
データ列を小数点以下n桁で丸める	ds.round(n)
表示可能な行数をnに設定する	pd.set_option('display.max_rows', n)
プラットホームはWindows	sys.platform.startswith('win32')
スピアマン相関係数でデータフレームのリスト列の相関行列を計算する	df[aList].corr(method='spearman')
インディゴ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
黒いクロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='k')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
パーセント付きの円プロットを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
option: グラフの色をダークスレートブルーに指定する	color = 'darkslateblue'
淡い茶色色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
リストを境界値として配列を分割する	pd.cut(aArray, aList)
日付時刻データの分数	aDatetime.minute
アイボリーにヒストグラムの色を指定する	plt.hist(データ列, color='ivory')
データ列間の決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
数値をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
散布図をラベンダーブラッシュ色として描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
数式の積分を算出する	sympy.integrate(e)
ヒストグラムの色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
タプル中の最初の文字列を探す	aTuple.index(element)
散布図に黒いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
最後の列を表データから除く	df[df.columns[:-1]]
option: グラフの色をインディゴに変更する	color = 'indigo'
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
データフレームのstart行目からend行目までを取り出す	df[start:end]
セットの浅いコピーを新規生成する	aSet.copy()
データ列の変遷を青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
n個にデータフレームの中のカラムを分割する	pd.cut(df[col], n)
option: 丸マーカーを描画する	marker = 'o'
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームを列の値によってグループ化し、要約統計量を算出する	df.groupby(column).describe()
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
二つの変数を同じ値にする	x = y = n
文字列を左トリムする	s.lstrip()
文字列が数値か調べる	s.isnumeric()
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
option: グラフの種類を実線にセットする	linestyle = 'solid'
option: 改行しない	end = ''
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
実数のハイパボリック・サイン	math.sinh(x)
リストの出現頻度を可視化する	plt.hist(データ列)
アンサンブル学習でクラス分類をする	sklearn.ensemble.VotingClassifier()
線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データフレームのリストカラムの中のNaNの数を数える	df[aList].isna().sum()
nとn2の値を足してnとする	n += n2
データフレームのカラムからユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
折れ線グラフの丸印を黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
n個の集まりからk個選ぶ方法	math.comb(n, k)
option: フォントの色をシアンに設定する	color = 'cyan'
色付きの破線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
リストとイテラブルについての散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
やわらかい青にヒストグラムの色を変更する	plt.hist(データ列, color='cornflowerblue')
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
紺碧色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
option: ミントクリームにフォントの色を設定する	color = 'mintcream'
データフレームのカラム名を指定された列名一覧に置き換える	df.columns = columns
散布図の色をダークブルーにする	plt.scatter(データ列x, データ列y, color='darkblue')
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
イテラブルをカウントしてカウンタを更新する	aCounter.update(iterable)
文字列を右から部分文字列で区切る	s.rsplit(sub)
option: グラフの色をディムグレーに設定する	color = 'dimgray'
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
データフレームのリストカラムの欠損値を後の値に指定する	df[aList].fillna(method='bfill')
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
列の中にいくつNaNがあるか数える	ds.isna().sum()
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
オブジェクトのメモリビュー	memoryview(obj)
データフレームの列がxより大きいデータを抽出する	df[df[column] > x]
降順に複数の列によってでデータフレームをソートする	df.sort_values(by=column, ascending=False)
option: 平均を加える	showmeans = False
データフレームのリスト列が正規分布からどれだけ、尖っているか確認する	df[aList].skew()
両端キューの値をインプレースに逆に並べ直す	deq.reverse()
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
赤い四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
セットから別の集合を全て取り除く	aSet.difference_update(aSet2)
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
赤いポイントマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='.', c='r')
xを論理値に変換する	bool(x)
データフレームの指定された４つの列を抽出する	df[[column, column2, column3, column4]]
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
データフレームのリストカラムを1000の位で丸めて整数にする	df[aList].round(-3).astype(int)
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
ヒストグラムベースの勾配ブースティング分類木を準備する	model = sklearn.ensemble.HistGradientBoostingClassifier()
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
文字列の左側から空白を取り除く	s.lstrip(' ')
棒グラフをペルー色を用いて描画する	plt.bar(データ列x, データ列y, color='peru')
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
二つのデータフレームを列をキーにして全結合する	pd.merge(df, df2, on=column, how='outer')
線グラフの色をブランチドアーモンドに指定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
データフレームの列を行に設定する	df.set_index(column)
リストと配列について散布図を描画してその大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
リストの推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
オプションで、標準エラーを使う	file = sys.stderr
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
ユニークな各要素の頻度	np.unique(aArray, return_counts=True)
実数の逆正弦を求める	math.asin(x)
データフレームからインプレイスで重複した行を削除する	df.drop_duplicates(inplace=True)
ヒストグラムの色をサンディーブラウンに指定する	plt.hist(データ列, color='sandybrown')
セットから別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
データフレームのリスト列のヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
インディアンレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
option: ダークカーキ色を使う	color = 'darkkhaki'
縦棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
option: 印をバツに指定する	marker = 'x'
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
データ列の欠損値をxで埋める	ds.fillna(x)
nを半分にする	n /= 2
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
折れ線グラフに青い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
n個分双方向キューの順を右に回転させる	deq.rotate(n)
多次元データを特異値分解を用いて濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
データ列を100の位で丸めて、整数にする	ds.round(-2).astype(int)
3整数の最小公倍数	math.lcm(n, n2, n3)
折れ線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
ファイルから追加ストリームを開いて]、fとする	f = open(filepath, mode='a')
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
整数nを符号付きで長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
両端キューのstart番目からendの部分要素	collections.deque(itertools.islice(deq, start, end))
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
線グラフの色をライトサーモンに変更する	plt.plot(データ列x, データ列y, color='lightsalmon')
行列を元に全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
主成分分析で多次元データを濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
折れ線グラフをインディアンレッド色として描画する	plt.plot(データ列x, データ列y, color='indianred')
ライトグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
文字列の開始位置から終了位置の範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
データフレームをエクセルファイル形式としてJSONLファイルに保存する	df.to_excel(filename)
ピーチパフ色でヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
データフレームのリストカラムを丸める	df[aList].round()
散布図をミディアムシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
配列とイテラブルの散布図を描画して▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
セットから全要素を消す	aSet.clear()
データフレームをタブ区切りを用いてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
リストを黄色で出力する	print(f'\033[33m{value}\033[0m')
option: 色をアクアにする	color = 'aqua'
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
データフレームを列で昇順に並べる	df.sort_values(by=column, ascending=True)
折れ線グラフの▲印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
乱数の行列	np.random.random((行数, 列数))
赤いダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
xが一桁の整数か	-9 <= x <= 9
散布図の印をポイント印にする	plt.scatter(データ列x, データ列y, marker='.')
折れ線グラフの色をダークオーキッドに指定する	plt.plot(データ列x, データ列y, color='darkorchid')
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
文字列をn回だけ置き換える	s.replace(sub, newsub, n)
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
xが1もしくは2か調べる	x == 1 or x == 2
データフレームから数値データの列を抽出する	df.select_dtypes('number')
データフレームの中にいくつ欠損値があるか求める	df.isna().sum()
シーケンスを文字列リストに変換して、部分文字列を使って一つにする	sub.join(map(str, iterable))
データフレームを'A'列によって小さい順に並べる	df.sort_values(by='A', ascending=True)
データフレームのリストカラムを丸めて、整数にする	df[aList].round().astype(int)
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
実数の整数部を計算する	math.modf(x)[1]
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
option: グラフの色をホットピンクに設定する	color = 'hotpink'
青色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
色名とカラーコードの対応表を求める	matplotlib.colors.cnames
プロットにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
option: グラフの色をオレンジに設定する	color = 'orange'
文字列のケースを入れ替える	s.swapcase()
データフレームの列の文字列が文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
カラムの値が未入力値か	ds.isna()
option: ミディアムオーキッド色を用いる	color = 'mediumorchid'
ビスク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
バイナリできるようにファイルをオープンする]	open(filepath, mode='rb')
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
ファイルをオープンして]読み込みストリームを使う	open(filepath, mode='r')
実数のハイパボリック・タンジェント	math.tanh(x)
浮動小数点数を小数点以下第一位で四捨五入する	round(x, 1)
全要素を０で初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
Pandasで、書式としてデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
2変数の最大値	max(x, y)
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
n個分右に両端キューの要素をローテンションする	deq.rotate(n)
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
表データのカラムを削除する	df.drop(column, axis=1)
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
集合にイテラブルを追加更新する	aSet.update(iterable)
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
データフレームから散布図を作り、線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
ヒストグラムをイエローグリーン色として描画する	plt.hist(データ列, color='yellowgreen')
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
ディムグレー色としてヒストグラムを描画する	plt.hist(データ列, color='dimgray')
正規分布を用いて疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
option: ゴーストホワイトにグラフの色を変更する	color = 'ghostwhite'
十六進数文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
文字列は全て印字できるか調べる	s.isprintable()
カテゴリで色分けして、データフレームの全カラムの相関を見る	sns.pairplot(df, hue='カテゴリ列')
線グラフの色をビスクに指定する	plt.plot(データ列x, データ列y, color='bisque')
option: チョコレートにグラフの色を変更する	color = 'chocolate'
折れ線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
option: 文字列を区切り記号で用いる	sep = s
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
耐火レンガ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
折れ線グラフをミディアムパープル色として描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
ヒストグラムの色をホットピンクにする	plt.hist(データ列, color='hotpink')
線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
option: グラフの線の種類を実線に指定する	linestyle = 'solid'
option: ダークオーキッド色を使う	color = 'darkorchid'
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
データフレームから指定された列名一覧の列を抽出する	df[columns]
カウンタの項目数を使う	len(aCounter)
データ列のNaNを直前の値に設定する	ds.fillna(method='ffill')
ヒストグラムをゴールデンロッド色を用いて描画する	plt.hist(データ列, color='goldenrod')
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
カウンタ同士でインターセクション	aCounter & aCounter2
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightgreen')
option: フォントの色をペールグリーンに指定する	color = 'palegreen'
option: ダークマゼンタを使う	color = 'darkmagenta'
四角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
データフレームを降順に複数の列によってで並べ直す	df.sort_values(by=column, ascending=False)
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
文字列をマゼンタ化する	f'\033[35m{value}\033[0m'
二つの文字列が同じか調べる	s == s2
Pandasでフォーマットfmtでデータ列をdatetime64型に変換する	pd.to_datetime(ds, format=fmt)
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
文字列に漢字が使われている	re.search('[\u4E00-\u9FD0]', s)
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
暗く色をグラフの描画で使う	sns.set(pallete='dark')
option: NaNを含めない	dropna = True
小さい順に破壊的にデータフレームを'A'列と'B'列で並べ直す	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
数列の散らばりを描画する	plt.scatter(データ列x, データ列y)
赤い▲マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
TSVをヘッダを指定せず読む	pd.read_csv(filename, header=None)
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategrey'
カウンタの項目を一つ増やす	aCounter[element] += 1
コレクションを使う	import collections
日付データの年数を見る	aDate.year
辞書のキーを列挙する	aDict.keys()
カウンタから最頻出な項目の件数を計算する	aCounter.most_common()[1]
データフレームの中に文字列と文字列が存在する	df.isin([value, value2])
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
オリーブ色でヒストグラムを描画する	plt.hist(データ列, color='olive')
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
パーセプトロンで回帰分析をする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
option: シアンにグラフの色を設定する	color = 'cyan'
２つのカウンタの共通する値	aCounter & aCounter2
option: マーカーの色を白にする	markerfacecolor = 'white'
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
両端キューをデキューする	deq.popleft()
フォーマットfmtを使ってデータ列を日付データにする	pd.to_datetime(ds, format=fmt)
文字列全体がパターンにASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
ピーチパフ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
データ列の変遷を半透明の実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ブランチドアーモンド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
異なる列をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
プロットの中に枠なしのデータラベルを加える	plt.legend(frameon=False)
データフレームの列をValueMapで置換する	df[col].replace(ValueMap)
タプルのオブジェクトが最初に見つかる場所	aTuple.index(element)
データフレームのNaNを直前の値に指定する	df.fillna(method='ffill')
データフレームから列を１つ選択する	df[[column]]
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
多次元データをMSDで濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
散布図に黒い▽印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
JSONフォーマットのファイルを辞書に変換する	json.load(fin)
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
線グラフをライム色を用いて描画する	plt.plot(データ列x, データ列y, color='lime')
実数を十六進表記の文字列に変換する	x.hex()
文字列を紫色で表示できる文字列に変換する	f'\033[35m{value}\033[0m'
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
ダークシアンにヒストグラムの色を変更する	plt.hist(データ列, color='darkcyan')
データ列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
option: スラッシュをセパレータで使用する	sep = '/'
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
行列の行ごとの標準偏差	np.std(aArray, axis=1)
横棒グラフを描画し、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
二つのデータフレームを列をキーにして右結合する	pd.merge(df, df2, on=column, how='right')
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
赤い破線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
option: マーカーの色を変更する	markerfacecolor = '#800080'
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
最初のカテゴリーを除き、データフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
行列の列ごとの分散を計算する	np.var(aArray, axis=0)
option: フォントの色をダークグレーに設定する	color = 'darkgrey'
日付データが木曜日か調べる	aDate.weekday() == 3
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
特異値分解として淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
タイムスタンプデータからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
データフレームの中の列を四分位数でビン分割する	pd.qcut(df[col], 4)
ヒストグラムの色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
nが-9以上、9以下	-9 <= n <= 9
赤色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
option: グラフの色を青緑に設定する	color = 'teal'
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
シスル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
カラムの欠損値をモードに設定する	ds.fillna(ds.mode().iloc[0])
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
タイムスタンプデータの時刻を使う	aDatetime.time()
オプションで、標準エラーを出力にする	file = sys.stderr
折れ線グラフの左三角印を青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
数式を部分分数に展開する	sympy.apart(e)
黒い三角マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='k')
2つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
折れ線グラフを赤い破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
横棒グラフをゴーストホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
標準出力を使用する	sys.stdout
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
横棒グラフをライトシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightcyan')
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
option: パウダーブルー色を使う	color = 'powderblue'
データフレームを昇順にインデックスによって並べ直す	df.sort_index(ascending=True)
リストとリストについて散布図を描いて、マーカーを▲にする	plt.plot(データ列x, データ列y, marker='^')
散布図の印の大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
nが2で割り切れるか	n % 2 == 0
環境がMacOSかどうか	sys.platform.startswith('darwin')
行列を2次元1行に変形する	aArray.reshape(1, -1)
データフレームのリストカラムの中にいくつ未入力値があるか数える	df[aList].isna().sum()
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
xを浮動小数点数に変換する	float(x)
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
決定木の重要度をグラフ化する	plt.barh(X.columns, model.feature_importances_)
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
文字列の開始位置から部分文字列を探す	s.find(sub, start)
配列とリストについて散布図を描いて、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
からデータフレームを読む	pd.read_excel(filename)
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
データフレームのカラムの欠損値を直前の値で置換する	df[col].fillna(method='ffill')
辞書のキーに対応した値	aDict.get(key)
散布図のポイント印を赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
配列をビン数nとして分割する	pd.cut(aArray, n)
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
配列のユニークな値を要素とする配列を使う	np.unique(aArray)
文字列の両端から空白を除去する	s.strip()
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
折れ線グラフに上三角印を使用する	plt.plot(データ列x, データ列y, marker='^')
option: グラフの種類を実線に設定する	linestyle = 'solid'
文字列は全て数値か調べる	s.isnumeric()
バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
rgbの△マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
キーが辞書に存在するか調べる	key in aDict
option: グラフの色をフクシアに変更する	color = 'fuchsia'
option: スラグレー色を使う	color = 'slategrey'
nをn2だけ右シフトする	n >> n2
データフレームの列を1000の位で丸めて整数型にする	df[col].round(-3).astype(int)
横棒グラフをピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='pink')
データフレームを各列毎にグループ分けして、列の標準偏差を算出する	df.groupby(column)[column2].std()
ヒストグラムをプロットする	plt.hist(データ列)
辞書からキーの値	aDict.get(key)
散布図に赤い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ふたつの集合の差集合を使う	aSet.difference(aSet2)
両端キューの先頭の値	deq[0]
ダークターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
ファイルパスを文字列の示す文字コードでオープンする]	open(filepath, encoding=s)
円グラフを完全な円にする	plt.axis('equals')
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: 書き込み用にセットする	mode = 'w'
２つのリストをコロンで区切って出力する	print(value, value2, sep=':')
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
現在の作業ディレクトリ	os.getcwd()
option: タンに色を設定する	color = 'tan'
タイムスタンプデータからn日分、減らす	aDatetime - datetime.timedelta(days=n)
タプルの先頭を取り除く	aTuple[1:]
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
デピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
グラフで使える色名の一覧を見る	matplotlib.colors.cnames
集合から別のセットの要素を全て除く	aSet.difference_update(aSet2)
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
黒い▼印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
nとn2の積	n * n2
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
複数のデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
option: 小麦色色を使う	color = 'wheat'
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
データフレームからカテゴリデータの列名の一覧	df.select_dtypes('object').columns
棒グラフをライトスチールブルー色を使って描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームの欠損値を直後の値で置き換える	df.fillna(method='bfill')
文字列はリストの要素か調べる	element in aList
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
カウンタの全数を使う	aCounter.total()
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
データ列を千の位で丸めて、整数型にする	ds.round(-3).astype(int)
折れ線グラフを濃い青色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
nを八進表現にする	oct(n)
配列をビンニングする	pd.cut(aArray, aList)
実数を実数で割った剰余を求める	math.remainder(x, x2)
データフレームの列がx未満の行を取り出す	df[df[column] < x]
option: 淡いピンク色色を使う	color = 'lightpink'
低頻出方からカウンタをリストとして得る	aCounter.most_common()[::-1]
データフレームをJSONLファイルにインデックスを付けずに書き込む	df.to_csv(filename, index=None)
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
option: ブランチドアーモンドに色を設定する	color = 'blanchedalmond'
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
サドルブラウン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
要素は集合の要素に含まれないか調べる	element not in aSet
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
カウンタのキー一覧	aCounter.keys()
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
カラーバーを描画する	plt.colorbar()
散布図をタン色として描画する	plt.scatter(データ列x, データ列y, color='tan')
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
辞書の浅いコピーを作る	aDict.copy()
二つのデータフレームを縦方向に合体させる	pd.concat([df, df2])
アークサインを算出する	math.asin(x)
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
散布図を濃いシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
ヒストグラムの色をオリベドラブに変更する	plt.hist(データ列, color='olivedrab')
ファイルパスがない	not os.path.exists(filepath)
折れ線グラフの▲マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
横棒グラフをオールドレース色を用いて描画する	plt.barh(データ列x, データ列y, color='oldlace')
実数を千の位で丸める	round(x, -3)
句読点文字を使う	string.punctuation
カラムの空文字を未入力値に変換し、ドロップする	ds.replace('', np.nan).dropna()
日付時刻データが何月か知る	aDatetime.month
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
option: エラーがあるとき例外を発生させるように設定する	errors = 'strict'
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
データフレームを破壊的に複数の列で降順に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
指定した値でデータ列を二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
グリーンイエロー色でヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
オプションで、ファイルを使う	file = sys.open(filename, 'w')
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
カテゴリで色付けしてデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
折れ線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
option: マーカーの太さを変える	markeredgewidth = 2.5
文字列の中で大文字・小文字を無視してパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
日付時刻データが月曜日	aDatetime.weekday() == 0
線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
昇順にデータフレームを行を用いてソートする	df.sort_index(ascending=True)
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
マッピングのの一覧を得る	aDict.values()
棒グラフをスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='skyblue')
実数を万の位で丸める	round(x, -4)
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
実数の正弦	math.sin(x)
組中の文字列が最初に見つかるインデックス	aTuple.index(element)
option: 区切りを改行にする	sep = '\n'
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
クリムゾン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
折れ線グラフの上三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームのリスト列の欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
アンティークホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
散布図をダイアモンド印で描画する	plt.scatter(データ列x, データ列y, marker='D')
プロットにx=0の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
折れ線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
データ列の未入力値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
option: ダークオリーブグリーンにグラフの色を設定する	color = 'darkolivegreen'
ライトグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
ミントクリームにヒストグラムの色をセットする	plt.hist(データ列, color='mintcream')
縦棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
nがn2以下、または、n3以上か	n <= n2 or n >= n3
nが1、もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
ロバスト推定として回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
option: 紺碧を使用する	color = 'azure'
eの乗数を求める	math.exp(x)
SJISでJSONLファイルにデータフレームを保存する	df.to_csv(filename, encoding='shift_jis')
ダークシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
データフレームの各グループごとの標準偏差を算出する	df.groupby(column).std()
option: グラフの色をマゼンタにする	color = 'magenta'
二つの変数をそれぞれ定義する	x, y = i, j
option: ブール型を用いる	dtype = np.int32
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
option: ダークバイオレット色を使う	color = 'darkviolet'
淡いピンク色にヒストグラムの色を設定する	plt.hist(データ列, color='lightpink')
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
浮動小数点数を二乗する	x ** 2
xの小数点以下'5'桁までを出力する	print(':.5f'.format(x))
nとkのコンビネーション	math.comb(n, k)
データフレームがどの程度、分散しているか見る	df.var()
データフレームのヒストグラムを縦横に並べて、描画する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
データフレームの列の中央値を計算する	df[col].median()
予測値とデータの離れ具合をプロットする	sns.residplot(x='列名', y='列名', data=df)
option: ダークレッド色を使う	color = 'darkred'
文字列中の大文字を小文字に変換する	s.lower()
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
option: 読み込みモードに設定する	mode = 'r'
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
リストをカウントして、カウンタを更新する	aCounter.update(iterable)
データフレームの第一四分位数	df.quantile(0.25)
option: 紺碧にグラフの色を設定する	color = 'azure'
データフレームをJSONLファイルにCSV形式として保存する	df.to_csv(filename)
散布図の菱形マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
リストとリストの散布図をプロットして、マーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
option: 破壊的に操作する	inplace = True
集合を更新不能な集合に変換する	frozenset(aSet)
nをn2だけ増加させる	n += n2
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
option: 色をグリーンに設定する	color = 'green'
タイムスタンプデータにn時間を加算する	aDatetime + datetime.timedelta(hours=n)
数列とリストの散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
線グラフをオリーブ色として描画する	plt.plot(データ列x, データ列y, color='olive')
option: 色をライトグリーンに指定する	color = 'lightseagreen'
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
ライトサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データフレームを散布図でグラフ化してカテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
黒い丸マーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
赤いダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
option: マーカーを丸に変更する	marker = 'o'
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
エンディアンを用いる	sys.byteorder
データフレームの各グループごとの最小値	df.groupby(column).min()
データフレームの中で、列と列の重複を消す	df.drop_duplicates(subset=[column, column2])
黒い四角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
要素が集合に含まれないかどうか調べる	element not in aSet
本日をISO書式の文字列にする	datetime.datetime.today().isoformat()
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
実数のsin	math.sin(x)
双方向キューの末尾から要素を取り除く	deq.pop()
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
データフレームの欠損値を前の値で埋める	df.fillna(method='ffill')
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
データ列の四分位を可視化する	plt.boxplot(データ列)
実数の逆双曲線正接	math.atanh(x)
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
0からN未満までのベクトル	np.arange(N)
文字列が全てアスキー文字	s.isascii()
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームから指定された列だけ抽出する	df[[column]]
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
ファイルパスがあるか調べる	os.path.exists(filepath)
整数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int)
グラフの中に枠なしの凡例を加える	plt.legend(frameon=False)
'A'列を用いてデータフレームを整列する	df.sort_values(by='A')
グラフを使う準備をする	import matplotlib.pyplot as plt
データフレームのそれぞれのグループごとの分散を求める	df.groupby(column).var()
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
折れ線グラフの星印の色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
option: 改行コードを旧Macに設定する	newline = '\r'
クロス印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
option: グレーを使う	color = 'gray'
カテゴリ別で色分けして、に箱ひげ図を用いてデータフレームをグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
既存の配列をベースにして全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
折れ線グラフの色をダークレッドに指定する	plt.plot(データ列x, データ列y, color='darkred')
option: ペールグリーン色を使う	color = 'palegreen'
データフレームのカラムの中にと文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
文字列の中の複数行対応として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
option: マーカーをダイアモンドに指定する	marker = 'D'
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
棒グラフをゴーストホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
日付時刻データのタイムゾーンを使う	aDatetime.timetz()
プログラムを正しく終了する	sys.exit(0)
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
折れ線グラフのバツ印の大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
データフレームを各列毎にグループ化して、列の合計を算出する	df.groupby(column)[column2].sum()
回帰分析をK最近傍法で行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
タプルのn番目以降の部分を取り出す	aTuple[n:]
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
文字列の無限イテラブルを求める	itertools.repeat(element)
option: グリーンイエロー色を用いる	color = 'greenyellow'
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
データフレームを列でグループ化して、グループの最小値を算出する	df.groupby(column).min()
列の値でNaNを含めてデータフレームを集約する	df.groupby(column, dropna=False)
数値の符号をコピーにする	math.copysign(x, x2)
数値の変数についてのn階微分を求める	sympy.diff(e, z, n)
ダークスラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
option: グラフの色をハニーデューに設定する	color = 'honeydew'
線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
文字列が文字列リストに含まれる	s in aStringList
option: グラフの色をオリーブに設定する	color = 'olive'
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
符号なしで整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
数字を全部求める	string.digits
データフレームを関数でグループ化し、要約統計量を求める	df.groupby(関数).describe()
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
リストをn回、結合する	aList * n
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
文字列を太字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
option: 改行コードをUNIXに設定する	newline = '\n'
option: 文字コードを文字コードtextに変更する	encoding = text
option: 文字列の示すエンコーディングを使う	encoding = s
散布図の▽マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
小文字列	string.ascii_lowercase
データフレームを複数の列でソートする	df.sort_values(by=column)
マッピングのキーに対応した値	aDict.get(key)
year年day月をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=1)
角度のラジアンを求める	math.radians(degree)
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
データフレームの列を10の位で丸める	df[col].round(-1)
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
集合をリストに変換する	list(aSet)
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
分類結果の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
改行なしに値をプリントする	print(value, end='')
集合から全ての要素を消す	aSet.clear()
インプレイスで重複をデータフレームから削除する	df.drop_duplicates(inplace=True)
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
横棒グラフをプロットして、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
線グラフの色をダークグレーにセットする	plt.plot(データ列x, データ列y, color='darkgrey')
要素が集合のメンバー	element in aSet
棒グラフをグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='gray')
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
標準エラーを	sys.stderr
紺碧にヒストグラムの色を変更する	plt.hist(データ列, color='azure')
列を用いてデータフレームをソートし、、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
データ列の各データ値の出現数	ds.value_counts()
区間から行列	np.linspace(最小値, 最大値, 要素数)
列数の最大値をnに減らす	pd.set_option('display.max_columns', n)
y軸だけグリッド線	plt.grid(axis='y')
ナバホホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
列の全順列を得る	itertools.permutations(iterable)
データ列は正規分布からどの程度、尖っているか見る	ds.skew()
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
折れ線グラフの色をホワイトスモークに変更する	plt.plot(データ列x, データ列y, color='whitesmoke')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
nが5の倍数かどうか	n % 5 == 0
カウンタの要素のカウントを見る	aCounter[element]
ヒストグラムをホワイト色を用いて描画する	plt.hist(データ列, color='white')
二つの列によってによって破壊的にデータフレームをソートする	df.sort_values(by=['A', 'B'], inplace=True)
option: サドルブラウンにフォントの色を設定する	color = 'saddlebrown'
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
データフレームのリストカラムの中にいくつが含まれるか数える	df[aList].isin([value]).sum()
ヒストグラムをラベンダーブラッシュ色を用いて描画する	plt.hist(データ列, color='lavenderblush')
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
縦棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データフレームで、列と列に重複があるか確認する	df.duplicated(subset=[column, column2])
option: グラフの色をバイオレットに設定する	color = 'violet'
カウンタの要素数を使う	len(aCounter)
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
データフレームを列を用いて昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
列と列をペアリングする	itertools.zip_longest(iterable, iterable2)
option: 青を使う	color = 'blue'
両端キューの末尾から要素を取り出す	deq.pop()
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
文字列が全て英字か確認する	s.isalpha()
ヒストグラムと勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
辞書をJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
データフレームを２つの列によってソートしてNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
ファイルパスをUTF8として書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
グリッド線	plt.grid(color='#800080')
option: スカイブルーに色を指定する	color = 'skyblue'
ケンドールを使ってデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
散布図をサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='salmon')
option: ゴールデンロッドに色を変更する	color = 'goldenrod'
整数nを八進表現に変換する	oct(n)
表データとデータ列を一つにする	pd.concat([df, ds], axis=1)
マッピングを多重集合に変換する	collections.Counter(aDict)
グリッドを破線にする	plt.grid(linestyle='dashed')
縦棒プロットをプロットし、、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームを複数の列を用いて降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
option: 追加モードに設定する	mode = 'a'
分類モデルの正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
赤いバツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
整数nを符号なしでバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big')
パウダーブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
折れ線グラフの大バツ印を黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
nが5の倍数か	n % 5 == 0
データフレームのカーネル密度による分布図を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
データフレームのカラムの中に文字列とがいくつ存在するか数える	df[col].isin([value, value2]).sum()
データフレームのカラムの尖度を計算する	df[col].skew()
キーがタプルに存在しているいるか	key not in aDict
整数nの二進数表現を使う	bin(n)
文字列が組に含まれるか調べる	element in aTuple
日付データにn秒を加える	aDate + datetime.timedelta(seconds=n)
文字列はタイトル大文字小文字	s.istitle()
ヒストグラムの色をグリーンに変更する	plt.hist(データ列, color='green')
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
柱状図としてリストを可視化する	plt.hist(データ列)
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
散布図にrgbの△マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
イテラブルとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
グラフで使う横軸の軸ラベルを設定する	plt.xlabel('x軸ラベル')
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
リストの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
配列と配列について散布図をプロットして、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
ドジャーブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
データ列の欠損値を前の行の値で埋める	ds.fillna(method='ffill')
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
n進文字列をbytesizeバイトのバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
アンティークホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
option: 読み込むシートの名前をnamesに設定する	sheet_name = names
n進文字列をバイト列にする	int(s, n).to_bytes(length=bytesize, byteorder='big')
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
文字列中にひとつでも非小文字が含まれるかどうか調べる	any(not c.islower() for c in s)
option: グラフの色を茶色に設定する	color = 'brown'
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightgreen')
縦棒グラフをフォレストグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='forestgreen')
線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
赤色としてヒストグラムを描画する	plt.hist(データ列, color='red')
ホットピンク色でヒストグラムを描画する	plt.hist(データ列, color='hotpink')
辞書でカウンタを更新する	aCounter.update(aDict)
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
セットからエラーなく値を取り除く	aSet.discard(element)
空のセットを使う	set()
リストとリストについて散布図を描いて、マーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
データフレームのカラムが何年か確認する	df[col].dt.year
ファイルが存在しないか調べる	not os.path.exists(filepath)
読み込みできるようにファイルを開く]	open(filepath, mode='r')
配列自身の長さnの順列	itertools.permutations(iterable, n)
ラインを青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: SJISを使う	encoding = 'shift_jis'
リストを四分位数でビン分割する	pd.qcut(aList, 4)
データフレームの列の名前を変更する	df.rename(columns={column: name})
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
文字列がリストの要素か調べる	element in aList
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
線形モデルの切片を使う	model.intercept_
標準入力から1行分読む	sys.stdin.readline()
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
コマンドラインフラグの状態を知る	sys.flags
浮動小数点数のsinの逆数	math.asin(x)
データフレームのカラムのpercent分位数を求める	df[col].quantile(percent/100)
rgbのバツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームを各列と列の組み合わせ毎にグループ分けして、平均値を求める	df.groupby([column, column2], as_index=False).mean()
JSONフォーマットの文字列をロードする	json.loads(jsonString)
文字列からformatのパターンを用いてタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
3つの変数を順に出力する	print(value, value2, value3)
文字列の開始位置から終了位置までの範囲で部分文字列の登場	s.count(sub, start, end)
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: 色をトマトに指定する	color = 'tomato'
データフレームのリストカラムがどの程度分散しているか見る	df[aList].var()
辞書の全項目をクリアする	aDict.clear()
option: エンコーディングをEUCにセットする	encoding = 'euc_jp'
配列をビン分割する	pd.cut(aArray, aList)
列ごとにデータフレームをグループ化して標準偏差を求める	df.groupby(column).std()
option: ライムにグラフの色を設定する	color = 'lime'
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
折れ線グラフをダークオーキッド色として描画する	plt.plot(データ列x, データ列y, color='darkorchid')
折れ線グラフの三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
本日が水曜日	datetime.datetime.today().weekday() == 2
日付データにn分を加算する	aDate + datetime.timedelta(minutes=n)
option: レモンシフォンにグラフの色を指定する	color = 'lemonchiffon'
本日の年数を求める	datetime.datetime.today().year
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
散布図をイエローグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
日付データが水曜日かどうか調べる	aDate.weekday() == 2
辞書から最後の項目をポップする	aDict.popitem()
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
イテラブルを文字列リストに変換してカンマによって連結する	','.join(map(str, iterable))
リストと配列について散布図を描画して、菱形マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストをnから番号付けする	enumerate(aList, start=n)
２つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
リストの折れ線グラフを描画し、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
破壊的に二つの列によって降順にデータフレームをソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
折れ線グラフに▼マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
予測データの混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
折れ線グラフの色をスチールブルーに指定する	plt.plot(データ列x, データ列y, color='steelblue')
両端キューのn番目	deq[n]
棒プロットの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
散布図の右三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
option: ライトゴールドロディイエローにフォントの色を設定する	color = 'lightgoldenrodyellow'
散布図のマーカーを▼にする	plt.scatter(データ列x, データ列y, marker='v')
配列の行ごとの合計値	np.sum(aArray, axis=1)
縦棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
標準エラーを使う	sys.stderr
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
option: カーキにグラフの色を設定する	color = 'khaki'
縦棒グラフをロージーブラウン色として描画する	plt.bar(データ列x, データ列y, color='rosybrown')
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
実数の逆双曲線正弦	math.asinh(x)
実数の天井を算出する	math.ceil(x)
疑似乱数を発生させる	random.random()
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
option: △印を描画する	marker = '^'
行列の累積積を計算する	np.cumprod(aArray)
折れ線グラフをダークシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
nが3で割り切れるか	n % 3 == 0
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
縦棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
辞書にキーが存在しているいるか調べる	key in aDict
ヒストグラムと勾配ブースティングで回帰分析をする	model = sklearn.ensemble.HistGradientBoostingRegressor()
ベクトルの平均を算出する	np.mean(aArray)
文字列中に部分文字列が含まれないか調べる	sub not in s
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
商と余りを同時に計算する	divmod(x, y)
データフレームのカラムの欠損値を最小値に指定する	df[col].fillna(df[col].min())
option: グラフの色を濃い青に設定する	color = 'darkblue'
追加できるようにファイルパスをオープンする]	open(filepath, mode='a')
オプションで出力先を標準エラーに変更する	file = sys.stderr
整数nを十六進文字列に変換する	hex(n)[2:]
縦棒グラフを描いて、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
ムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
縦棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
option: ダークグレー色を用いる	color = 'darkgrey'
データフレームのリスト列の相関行列ピアソン相関係数として	df[aList].corr(method='pearson')
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
ラベンダー色としてヒストグラムを描画する	plt.hist(データ列, color='lavender')
文字列が組の要素	element in aTuple
option: グラフの色をスラグレーに指定する	color = 'slategray'
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
option: グラフの色をアリスブルーに指定する	color = 'aliceblue'
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
option: 整数型を使う	dtype = np.int
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
黒い上三角マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='k')
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
散布図に黒い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
実数を小数点以下第一位で丸める	round(x, 1)
データフレームを'A'列によってまとめたグループ	df.groupby('A')
タプルの先頭のn要素を除く	aTuple[n:]
nをn2で割った剰余を計算する	n % n2
データフレームを'A'列でソートして更新する	df.sort_values(by='A', inplace=True)
値を双方向キューのn番目に挿入する	deq.insert(n, element)
文字列の中でASCII限定としてパターンにマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
16進文字列を整数にする	int(s, 16)
バイトオーダを確認する	sys.byteorder
リストとリストを連結する	aList + aList2
スチールブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
データを四分位点として標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
日付時刻データからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
列によってデータフレームをソートして、行を振り直す	df.sort_values(columns).reset_index(drop=True)
ヒストグラムをライトコーラル色として描画する	plt.hist(データ列, color='lightcoral')
集合を空にする	aSet.clear()
BOM付きとしてファイルパスをオープンする]	open(filepath, encoding='utf_8_sig')
タプルの最後の要素	aTuple[-1]
クラス分類の分類精度を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
option: パレットトルコイズ色を使う	color = 'paleturquoise'
option: グラフの色をゴールドに変更する	color = 'gold'
棒グラフをオレンジレッド色を使って描画する	plt.bar(データ列x, データ列y, color='orangered')
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
カテゴリでグループ化して、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
横棒グラフをゲインズボロ色として描画する	plt.barh(データ列x, データ列y, color='gainsboro')
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
Pandasで、文字列のUNIX秒から日付データにする	pd.to_datetime(s, unit='s', utc=True)
多次元尺度構成法を用いて多次元データを淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
小数点数のハイパボリック・タンジェント	math.tanh(x)
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
データフレームの列の欠損値をxに増やす	df[col].fillna(x)
配列と配列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
文字列の終了位置より前に部分文字列が含まれないかどうか確認する	s.find(sub, 0, end) == -1
option: シスル色を使う	color = 'thistle'
散布図の大バツマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
データフレームのリストカラムの要約統計量を求める	df[aList].describe()
データフレームの棒プロットを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgrey')
データフレームのリスト列の相関行列を求める	df[aList].corr()
シーケンスを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
線グラフのスタイルを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
2つのカウンタの共通する要素	aCounter & aCounter2
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
実数を文字列に変換する	str(x)
データフレームを各列毎にグループ化し、、列の平均値を求める	df.groupby(column)[column2].mean()
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
書き込みモードを用いてファイルをオープンする]	open(filepath, mode='w')
ヒストグラムの色をバリーウッドに変更する	plt.hist(データ列, color='burlywood')
アルファベットから一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
空の組	()
option: ダークシアンに色を変更する	color = 'darkcyan'
リストを四分位数ごとに分割する	pd.qcut(aList, 4)
画面用にグラフを設定する	sns.set(context='notebook')
オブジェクトがタプルの要素でないか調べる	element not in aTuple
データフレームの上位25%	df.quantile(0.25)
option: 改行なし	end = ''
データフレームのカラムの中に日付データがあるか調べる	df[col].isin([value])
円プロットを真円にする	plt.axis('equals')
イテラブルとリストの散布図を描画して、マーカーをダイアモンドに変更する	plt.plot(データ列x, データ列y, marker='D')
散布図をダークバイオレット色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
実数が整数	x.is_integer()
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
大バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
グリッド線	plt.grid(linestyle='--')
文字列中に非英数字が含まれるか判定する	any(not c.isalnum() for c in s)
タプルから項目名の値か、もしくは要素を得る	aDict.get(key, element)
列ごとにデータフレームをグループ化し、、最小値を計算する	df.groupby(column).min()
データフレームの中のNaNの個数を数える	df.isna().sum()
イテラブルのコンビネーション	itertools.combinations(iterable, n)
option: ダークシアン色を使う	color = 'darkcyan'
整数nの2進数表記	bin(n)
棒グラフを耐火レンガ色を用いて描画する	plt.bar(データ列x, データ列y, color='firebrick')
オプションで、標準出力を出力にする	file = sys.stdout
CSVファイルをデータフレームとして読む	pd.read_csv(filename, sep=',')
nを16進表記にする	hex(n)
option: ダークオリーブグリーンにフォントの色を設定する	color = 'darkolivegreen'
棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
グローバル変数の一覧	globals()
データフレームの列を度数分布図を用いて描く	plt.hist(df[column])
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
グラフの色を色差別なくする	sns.set(pallete='colorblind')
三つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
データ列の欠損値を平均値で補う	ds.fillna(ds.mean())
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
文字列の先頭から余分な空白を取り除く	s.lstrip()
オリベドラブにヒストグラムの色を変更する	plt.hist(データ列, color='olivedrab')
英字を全て使う	string.ascii_letters
よりランダムなランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
nの3乗を求める	n ** 3
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
横棒グラフをフクシア色を用いて描画する	plt.barh(データ列x, データ列y, color='fuchsia')
外れ値に強い単回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
直前の値でデータ列の欠損値を補う	ds.fillna(method='ffill')
データフレームのカラムの秒を使う	df[col].dt.second
パウダーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
データフレームの列の中にいくつ日付データが存在するか求める	df[col].isin([value]).sum()
ヒストグラムの色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
ヒストグラムをアンティークホワイト色として描画する	plt.hist(データ列, color='antiquewhite')
プロットをパステル調にする	sns.set(pallete='pastel')
赤い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
タイムスタンプデータの月を見る	aDatetime.month
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームのリスト列の相関行列ピアソン相関係数で	df[aList].corr(method='pearson')
データフレームの相関行列スピアマンとして	df.corr(method='spearman')
リストからオブジェクトと等しい最初の要素を取り除く	aList.remove(element)
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
リストの長さ	len(aList)
オブジェクトが辞書型のインスタンスか調べる	isinstance(obj, dict)
線グラフを半透明の破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
タブを見る	'\t'
実数は無限大か	math.isinf(x)
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
ミッドナイトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
リストの末尾から要素をポップする	aList.pop()
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
パレットを暗くする	sns.set(pallete='dark')
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
文字列を二分する	s.partition(sep)
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
追加用にファイルを開いて]、fとする	f = open(filepath, mode='a')
棒グラフを黄色色を用いて描画する	plt.bar(データ列x, データ列y, color='yellow')
2つの列によってデータフレームを並べる	df.sort_values(by=['A', 'B'])
rgbの▲マーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
フォーマットでデータフレームのcollを日付データにする	pd.to_datetime(df[col], format='%Y-%m-%d')
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
折れ線グラフの四角印の線幅を設定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
数値を青色にする	f'\033[34m{value}\033[0m'
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
整数nの8進文字列	oct(n)[2:]
分子n、分母mの有理数を新規生成する	fractions.Fraction(numerator=n, denominator=m)
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
データフレームの中に文字列と文字列がいくつ含まれるかカウントする	df.isin([value, value2]).sum()
配列の最大値を算出する	np.max(aArray)
折れ線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
散布図の丸マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
リストとイテラブルについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
グラフの色を暗くする	sns.set(pallete='dark')
データフレームのカラムは何秒か確認する	df[col].dt.second
データフレームから重複を落とす	df.drop_duplicates()
文字列中の正規表現を新しい文字列として置き換える	re.sub(pattern, newsub, s)
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
オレンジレッド色として線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
データフレームを'A'列によって並べ、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
本日は何曜日か知る	datetime.datetime.today().weekday()
折れ線グラフの透明度を指定する	plt.plot(データ列x, データ列y, alpha=0.5)
線グラフの色をダークブルーに指定する	plt.plot(データ列x, データ列y, color='darkblue')
未定値	None
横棒グラフを青緑色を使って描画する	plt.barh(データ列x, データ列y, color='teal')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
データフレームが正規分布からどれだけ、尖っているか見る	df.skew()
文字列を部分文字列で二分する	s.partition(sub)
二つのデータフレームを列'A'と列'B'をキーにして右ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
キューに要素をenqueueする	deq.appendleft(element)
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
折れ線グラフをクリムゾン色として描画する	plt.plot(データ列x, データ列y, color='crimson')
現在のタイムスタンプ	int(time.time())
Pandasでタイムスタンプ型のデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
ミディアムシアグリーンにヒストグラムの色をセットする	plt.hist(データ列, color='mediumseagreen')
option: ティールを使う	color = 'teal'
小数点数を実数で割った剰余を求める	math.remainder(x, x2)
ブルーバイオレット色を用いてヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
nとn2のXOR	n ^ n2
option: ターコイズ色を用いる	color = 'turquoise'
アルファベットの小文字を全部使う	string.ascii_lowercase
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
数値を白色でプリントする	print(f'\033[37m{value}\033[0m')
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
浮動小数点数を十六進表記の文字列にする	x.hex()
線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
ローングリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lawngreen')
散布図に丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o')
棒グラフを深紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームのリスト列は正規分布からどの程度、尖っているか見る	df[aList].skew()
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
行列の行列積を求める	np.matmul(aArray, aArray2)
等間隔で列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
日付時刻データが何時か知る	aDatetime.hour
値を赤色にする	f'\033[31m{value}\033[0m'
option: ダークサーモンに色を設定する	color = 'darksalmon'
日付データが何日か知る	aDate.day
カウンタを少ない順番に列挙する	aCounter.most_common()[::-1]
集合から別の集合を全て取り除く	aSet.difference_update(aSet2)
option: タン色を使う	color = 'tan'
線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームを列の値で欠損値を含めて集約する	df.groupby(column, dropna=False)
散布図を淡いピンク色色を使って描画する	plt.scatter(データ列x, データ列y, color='lightpink')
双方向キューのn番目に要素を差し込む	deq.insert(n, element)
option: ヘッダを連番にセットする	header = None
ヒストグラムの色をデピンクに変更する	plt.hist(データ列, color='deeppink')
タイムスタンプデータの時間数	aDatetime.hour
データフレームのそれぞれのグループごとの個数を計算する	df.groupby(column).count()
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
日付データが日曜日か	aDate.weekday() == 6
y軸の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
rgbの右三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのカラムを千の位で丸めて、整数型にする	df[col].round(-3).astype(int)
ヒストグラムをサドルブラウン色として描画する	plt.hist(データ列, color='saddlebrown')
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
option: フォントの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
option: 配列のデータ型を指定する	dtype = np.int8
改行しなくて二つの変数をプリントする	print(value, value2, end='')
option: 菱形印を加える	marker = 'D'
折れ線グラフをゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='goldenrod')
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
option: ペールグリーンを使用する	color = 'palegreen'
タイムスタンプデータが何分か知る	aDatetime.minute
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
オーキッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
データフレームから列を２つ選択する	df[[column, column2]]
nからn2までのひとつ飛ばしの整数列を作る	list(range(n, n2+1, 2))
辞書に要素を項目名として加える	aDict[key] = element
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
折れ線グラフの大バツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
オプションで、出力先を標準エラーに指定する	file = sys.stderr
カウンタを使う	import collections
ヒストグラムをハニーデュー色を用いて描画する	plt.hist(データ列, color='honeydew')
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
作画の背景色を白くする	sns.set(style='whitegrid')
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
印字可能な文字を全部使う	string.printable
部分文字列が文字列の開始位置と終了位置の間に存在するか調べる	s.find(sub, start, end) != -1
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
nの2進文字列を使う	bin(n)[2:]
最大長を指定して、両端キュー	collections.deque(maxlen=n)
空行をプリントする	print()
両端キューの最大長	deq.maxlen
折れ線グラフの色をネイビーに指定する	plt.plot(データ列x, データ列y, color='navy')
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
浮動小数点数を３乗する	x ** 3
option: フォントの色をペルーに設定する	color = 'peru'
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
時間を使う	import time
リストとリストについて散布図をプロットして、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフのダイアモンド印の大きさを設定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
オレンジ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
エクセルファイルファイルから全てのシートを読む	pd.read_excel(filename, sheet_name=None)
option: ブランチドアーモンドにグラフの色を設定する	color = 'blanchedalmond'
コーンズシルク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
円プロットを完全な円にする	plt.axis('equals')
リストを箱ひげ図で描画する	plt.boxplot(データ列)
線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
マッピングの浅いコピーを生成する	aDict.copy()
option: カーキ色を使用する	color = 'khaki'
二つの集合のユニオンを使う	aSet.union(aSet2)
データ列の曜日が何日目か見る	ds.dt.dayofweek
線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
散布図をコーンズシルク色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
散布図のバツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
option: フォントの色をライトスレイグレーに変更する	color = 'lightslategrey'
文字列が文字列リストにあるか調べる	s in aStringList
グレー色としてヒストグラムを描画する	plt.hist(データ列, color='gray')
データフレームを'A'列の値ごとにグループ化して列挙する	[(name, group) for name, group in df.groupby('A')]
option: サーモン色を使う	color = 'salmon'
リストと配列について散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
改行なしに２つの実行結果をプリントする	print(value, value2, end='')
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
平均でカラムの未入力値を置換する	ds.fillna(ds.mean())
option: グラフの色をホットピンクにセットする	color = 'hotpink'
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategrey')
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
ダークグリーン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
ファイルパスを文字コードtextで書き込み用に開く]	open(filepath, mode='w', encoding=text)
データ列を千の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: ライトスチールブルーを使う	color = 'lightsteelblue'
データフレームを1000の位で丸めて整数型にする	df.round(-3).astype(int)
折れ線グラフをフォレストグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='forestgreen')
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
リストと配列について散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
行列の行ごとの最小値	np.min(aArray, axis=1)
nの無限数列	itertools.repeat(n)
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
option: レベッカパープルにグラフの色を変更する	color = 'rebeccapurple'
option: グラフの色をプラムに設定する	color = 'plum'
n2がn以上かつn3以下か	n <= n2 and n2 <= n3
既存のベクトルを元に全要素が1のベクトル	np.ones_like(aArray)
option: シートの名前をnamesに設定する	sheet_name = names
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
散布図をダーク・スラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
2つの列の値によってデータフレームをまとめたグループ	df.groupby(['A', 'B'])
日付時刻データの年数を使う	aDatetime.year
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
2つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
マッピングをインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
nからn2までのスライス	slice(n, n2)
リストをイミュータブルにする	tuple(aList)
散布図の印をダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
データフレームの列を目的変数にする	目的変数 = df['列名']
二つのデータフレームを列をキーとして右ジョインする	pd.merge(df, df2, on=column, how='right')
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
表データを'A'列の値で集計する	df.groupby('A')
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
折れ線グラフの上三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ライトスチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフに赤い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ファイルパスを書き込みできるように文字列の示す文字コードでオープンする]	open(filepath, mode='w', encoding=s)
ホワイトスモークにヒストグラムの色を変更する	plt.hist(データ列, color='whitesmoke')
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
ゴーストホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
リストとリストを加える	aList + aList2
散布図に左三角印を用いる	plt.scatter(データ列x, データ列y, marker='<')
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
option: グラフの色を白に指定する	color = 'white'
浮動小数点数を小数点第一位で丸める	round(x, 1)
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
カラムの下位25%	ds.quantile(0.75)
nがリストのどれかか調べる	n in aList
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
ストリームを改行を取り除いて一行ずつ読み込む	f.readline()
配列の行ごとの合計	np.sum(aArray, axis=1)
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
コマンドの第二引数	sys.argv[1]
データフレームのカラムがどの程度分散しているか見る	df[col].var()
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
線グラフの色をダークオレンジに変更する	plt.plot(データ列x, データ列y, color='darkorange')
Pandasで、タイムスタンプ型のデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
TSVからカンマ区切りのファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
画像ファイルとしてグラフを保存する	plt.savefig('foo.png')
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
ダークレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
option: 印をダイアモンドに設定する	marker = 'D'
データフレーム全体をインデックスによって降順で並べる	df.sort_index(ascending=False)
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
ファイルパスの絶対パス	os.path.abspath(filepath)
黒い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
カテゴリ列で色付けして、に箱ひげ図を用いてデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: フォントの色を淡いピンク色に設定する	color = 'lightpink'
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
散布図をライトサーモン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
ダークスラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
散布図に▲印を使う	plt.scatter(データ列x, データ列y, marker='^')
データフレームのリストカラムの中にいくつ日付データが存在するか数える	df[aList].isin([value]).sum()
数列とリストについての散布図に赤い▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
ファイルを文字列の示すエンコーディングを用いて追加できるように開く]	open(filepath, mode='a', encoding=s)
データフレームの列をNaNも加えてダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
線グラフをラベンダーブラッシュ色を用いて描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
プロットの描画で明るく色テーマを使う	sns.set(pallete='bright')
黒い右三角マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
リスト中の要素が全て真か確認する	all(aList)
リストとリストの散布図にデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データ列は何分か確認する	ds.dt.minute
文字列の先頭でパターンにASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
実数のn乗	pow(x, n)
リストとイテラブルについての散布図にクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
ゴーストホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
option: フォントの色をイエローグリーンに設定する	color = 'yellowgreen'
複素数型のゼロ埋めされたベクトルを作る	np.zeros(要素数, dtype=bool)
カーネル密度推定グラフ描画でを用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
オプションで出力先をファイルに設定する	file = sys.open(filename, 'w')
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
プロットの中の縦軸にラベルをつける	plt.ylabel('y軸ラベル')
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
分数を使う	import fractions
option: アンティークホワイトにフォントの色を設定する	color = 'antiquewhite'
多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
プロット中のフォントを設定する	sns.set(font=フォント名)
データフレームを'A'列の値でグループ化する	df.groupby('A')
option: グラフの色を黄緑に変更する	color = 'chartreuse'
データフレームを各列毎にグループ分けして文字列というグループを見る	df.groupby(column).get_group(s)
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
rgbの星マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
青い破線を用いて数列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
2つのデータフレームを異なる列をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データフレームのリスト列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[aList].corr())
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームを複数の列によってソートする	df.sort_values(by=column)
mathをインポートする	import math
ヒストグラムの線の種類を破線に変更する	plt.hist(データ列, linestyle='dashed')
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
n割るn2を切り上げる	(n + n2 - 1) // n2
'A'列によってで降順にデータフレームをソートする	df.sort_values(by='A', ascending=False)
データフレームの最初を見る	df.head()
データフレームの重複した行だけを抽出する	df[df.duplicated(keep=False)]
ヒストグラムの色をトマトにセットする	plt.hist(データ列, color='tomato')
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ファイルからディレクトリ名を見る	os.path.dirname(filepath)
文字列としてリストを結合する	''.join(map(str, iterable))
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
predicateFuncが真になるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
論文用にプロットを変更する	sns.set(context='paper')
エクセルデータファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図に赤いバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='r')
文字列は組に含まれる	element in aTuple
カラーバーを描く	plt.colorbar()
線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
データフレームを二つのカラムによってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームの先頭の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
全印字可能な文字	string.printable
パールバイオレットレッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
列によってデータフレームをまとめたグループを使う	df.groupby(column)
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
データフレームのカラムの標本標準偏差	df[col].std()
折れ線グラフの星印を青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
配列の各要素に加算する	aArray + aArray2
実数を切り上げて整数に変換する	math.ceil(x)
文字列をセパレータで分割して、文字列リストにする	s.split(sep)
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
option: フォントの色をプラムに設定する	color = 'plum'
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
データフレームの未入力値が含まれる箇所に色を付ける	df.style.highlight_null()
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
折れ線グラフの色をホットピンクに指定する	plt.plot(データ列x, データ列y, color='hotpink')
JSONLファイルにデータフレームをタブ区切りで保存する	df.to_csv(filename, sep='\t')
長さnのリストを作る	[0] * n
文字列を部分文字列で区切る	s.split(sub)
ピンク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
小数点数の逆双曲線正弦	math.asinh(x)
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
オブジェクトがリストに含まれないか	element not in aList
データフレームから指定した２つの列を抽出する	df[[column, column2]]
option: 文字コードtextを用いる	encoding = text
カテゴリ別に並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: 符号なし８ビット整数型を使う	dtype = np.uint8
折り返しをしない	pd.set_option('expand_frame_repr', False)
option: NaNを先頭にする	na_position = 'first'
日付データは日付データより前	aDate < aDate2
データフレームの重複を確認する	df.duplicated()
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
一度に正規表現patternでreplにデータフレームのリストカラムを置き換える	df[aList].replace(pattern, repl, regex=True)
ヒートマップでクラス分類の予測精度を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
空のヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
カラーコードで折れ線グラフの色をする	plt.plot(データ列x, データ列y, color='#800080')
option: マーカーの色を指定する	markerfacecolor = '#800080'
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
データフレームから型型の列を取り出す	df.select_dtypes(ty)
日付時刻データの月を見る	aDatetime.month
グリーンイエロー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
変数を緑色にする	f'\033[32m{value}\033[0m'
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
棒グラフをディープスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
日付データが何月か知る	aDate.month
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
option: グラフの色をマルーンに設定する	color = 'maroon'
データフレームの列と列に重複があれば削除する	df.drop_duplicates(subset=column)
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
option: 書き込みモードに変更する	mode = 'w'
棒グラフをシスル色として描画する	plt.bar(データ列x, データ列y, color='thistle')
キューのstart〜endの部分データ	collections.deque(itertools.islice(deq, start, end))
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
コーンフラワーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
タイムスタンプデータからn秒分、減らす	aDatetime - datetime.timedelta(seconds=n)
option: ダークオレンジに色を設定する	color = 'darkorange'
サーモン色を用いてヒストグラムを描画する	plt.hist(データ列, color='salmon')
散布図の三角印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
日付データが金曜日か調べる	aDate.weekday() == 4
option: 黄色色を使う	color = 'yellow'
データフレームの歪度	df.kurt()
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
ヒストグラムを実線として描画する	plt.hist(データ列, linestyle='solid')
ヒストグラムの色をミディアムブルーに変更する	plt.hist(データ列, color='mediumblue')
日付データをISO8601形式の文字列にする	aDate.isoformat()
実数の余弦を求める	math.cos(x)
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
行列の値	aArray[行番号, 列番号]
集合からエラーなく要素を除去する	aSet.discard(element)
線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
キューのn番目	deq[n]
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
ネイビー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
ファイル全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフの色をダークオリーブグリーンに変更する	plt.plot(データ列x, データ列y, color='darkolivegreen')
多次元データを多次元尺度構成法を使ってパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
文字列を文字コード列に変換する	[ord(ch) for ch in s]
数値を水色で表示できる文字列に変換する	f'\033[36m{value}\033[0m'
切片なしの単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
タプル内の要素が全て真	all(aTuple)
データフレームの列がxでない行をフィルタする	df[df[column] == x]
option: 四角マーカーを使う	marker = 's'
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
折れ線グラフの下三角印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
イテラブルから重複を取り除く	set(iterable)
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
タプルから項目名の値	aDict.get(key)
変数名をキーとして辞書を作成する	dict(name=element)
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
ヒストグラムの色を白に変更する	plt.hist(データ列, color='white')
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
真上位集合	aSet > aSet2
文字列TSVファイルからn番目のカラムをインデックスとしてCSVファイルを読む	pd.read_csv(filename, index_col=n)
散布図に大バツマーカーを用いる	plt.scatter(データ列x, データ列y, marker='X')
散布図にクロス印を使う	plt.scatter(データ列x, データ列y, marker='x')
option: ゴールド色を使う	color = 'gold'
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
ミッドナイトブルー色でヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
今日が火曜日か調べる	datetime.datetime.today().weekday() == 1
リストの中の最大値	max(aList)
棒グラフをカーキ色として描画する	plt.bar(データ列x, データ列y, color='khaki')
リストを引数として展開して表示する	print(*aList)
三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
データフレームのカラムの欠損値をモードで置換する	df[col].fillna(df[col].mode().iloc[0])
折れ線グラフに四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s')
文字列リストを結合し、一つの文字列にする	''.join(aStringList)
ヒストグラムの色を耐火レンガにする	plt.hist(データ列, color='firebrick')
NaNを使う	math.nan
データフレームのカラムの中にとが存在するか調べる	df[col].isin([value, value2])
実数の双曲線余弦	math.cosh(x)
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
オブジェクトはタプルクラス	isinstance(obj, tuple)
線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
左にキューの順序をn個分ローテンションする	deq.rotate(-n)
2つの文字列は同じか調べる	s == s2
option: ライトスチールブルーにグラフの色を変更する	color = 'lightsteelblue'
文字列を積極的に小文字に変換する	s.casefold()
Pandasで、datetime64型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
ルート	math.sqrt(x)
文字列の最初から部分文字列を見つける	s.find(sub)
データフレームを複数の列によって集約する	df.groupby(columns)
option: 文字コードを文字列の示す文字コードに設定する	encoding = s
タプルをひとつ飛ばしで取り出す	aTuple[::2]
データフレームの最後を見る	df.tail()
ラベンダー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
２つのデータフレームを結合する	pd.merge(df, df2)
浮動小数点数はNaNか確認する	math.isnan(x)
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
option: サドルブラウン色を使う	color = 'saddlebrown'
一点鎖線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの列がどの程度、分散しているか確認する	df[col].var()
データフレームのカラムのNaNを平均値に設定する	df[col].fillna(df[col].mean())
縦棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
ヒストグラムの色をミディアムターコイズに指定する	plt.hist(データ列, color='mediumturquoise')
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
option: ダークサーモン色を使う	color = 'darksalmon'
クラス分類をロバスト推定で行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
nを十六進表記にする	hex(n)
カデットブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
多次元データを特異値分解として淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
新しいガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
option: マルーンにグラフの色をする	color = 'maroon'
箱ひげ図としてデータフレームの複数の列を並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
両端キュー中の文字列を数える	deq.count(element)
文字列内に大文字が含まれるか調べる	any(c.isupper() for c in s)
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
数から実数を引く	x - y
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
縦軸の目盛りを非表示にする	plt.yticks([])
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
マッピングをJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
n進数文字列を整数に変換する	int(s, n)
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
部分文字列かどうか調べる	sub in s
淡いピンク色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
xが真かどうか調べる	bool(x)
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
ヒストグラムをプロットしてビン数を設定する	plt.hist(データ列, bins=区関数)
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
グラフに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
二つのデータフレームをジョインする	pd.merge(df, df2)
回帰分析を部分的最小二乗法を用いて行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: ライトサーモンに色を変更する	color = 'lightsalmon'
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
数列とイテラブルについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフを赤色を使って描画する	plt.plot(データ列x, データ列y, color='red')
日付データが木曜日	aDate.weekday() == 3
ファイルをバイナリ書き込み用に開く]	open(filepath, mode='wb')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
データフレームのリストカラムの中にいくつ未入力値が存在するか数える	df[aList].isna().sum()
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
option: ブランチドアーモンド色を用いる	color = 'blanchedalmond'
縦棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
辞書のキーの一覧	aDict.keys()
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
商と余りを同時に計算する	divmod(x, y)
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: n番目のカラムをインデックスに指定する	index_col = n
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
折れ線グラフを濃いシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
日付時刻データからn時間分、引く	aDatetime - datetime.timedelta(hours=n)
データフレームの中の列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
ヒストグラムをゲインズボロ色を使って描画する	plt.hist(データ列, color='gainsboro')
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
破壊的に'A'列でデータフレームを昇順にソートする	df.sort_values(by='A', ascending=True, inplace=True)
折れ線グラフの三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
箱髭図を二つ並べて描く	plt.boxplot([データ列, データ列])
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
散布図の星印の色を指定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
データ列の推移を青い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフのポイント印を黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
文字列のケースを整える	s.casefold()
散布図の下三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
黒いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
青い点線でリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: グラフの色をクリムゾンに指定する	color = 'crimson'
真下位集合か	aSet < aSet2
16進数文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
option: プラム色を使う	color = 'plum'
データ列が何月か見る	ds.dt.month
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
黒い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームを表示するときヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
option: ロージーブラウン色を使う	color = 'rosybrown'
グリッド線を赤くする	plt.grid(color='r')
パラメータについて数値の微分を行う	sympy.diff(e, z)
文字列をパターンによって置換する	re.sub(pattern, newsub, s)
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
ダークサーモン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
散布図を黒い大バツマーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの列の欠損値を最大値で埋める	df[col].fillna(df[col].max())
線形回帰モデルの回帰変数	model.coef_
ケンドール相関係数でデータフレームのリスト列の相関行列を求める	df[aList].corr(method='kendall')
NaNも加えて表データの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
データフレームの中にいくつNaNが存在するか数える	df.isna().sum()
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
スレートブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
データフレームのリスト列の欠損値を後の行の値に設定する	df[aList].fillna(method='bfill')
散布図をライトスレイグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
xが一桁の正の数かどうか調べる	0 <= x <= 9
データフレームの各次元の大きさ	df.shape
辞書のキーの値を得る	aDict[key]
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o')
平均線付き箱ひげ図を描く	plt.boxplot(データ列, meanline=True)
数を小数点以下第一位で四捨五入する	round(x, 1)
リストをn倍する	aList * n
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
カウンタの正の数のみ残す	+aCounter
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
青いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
最大値・最小値で整数乱数を得る	random.randint(最小値, 最大値)
確率的勾配降下としてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
データフレームを列で並べ直して、上位n件を取り出す	df.sort_values(columns).head(n)
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
option: ホワイトスモークを用いる	color = 'whitesmoke'
新しいロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
option: 改行を区切り記号で用いる	sep = '\n'
日付データが日付データより前か調べる	aDate < aDate2
データフレームの内容を確認する	df.head()
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
イテラブルを両端キューに変換する	collections.deque(iterable)
option: 配列のデータ型を指定する	dtype = np.int
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
option: 紺を使用する	color = 'darkblue'
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
両端キューに数値をプッシュする	deq.append(element)
ふたつの集合がセットと互いに素か調べる	aSet.isdisjoint(aSet2)
nわるn2	n / n2
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
縦棒グラフをダークブルー色として描画する	plt.bar(データ列x, データ列y, color='darkblue')
折れ線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: エンコーディングを文字列の示す文字コードに設定する	encoding = s
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
イエローグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='yellowgreen')
option: 線の種類を破線に変更する	linestyle = 'dashed'
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
文字列中に部分文字列が存在しないか調べる	sub not in s
折れ線グラフをシャルトリューズ色を使って描画する	plt.plot(データ列x, データ列y, color='chartreuse')
プロットを使う	import matplotlib.pyplot as plt
線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
データフレームのカラムをValueMapで一度に置き換える	df[col].replace(ValueMap)
整数を万の位で四捨五入する	round(x, -4)
文字列中に部分文字列が含まれるか調べる	sub in s
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
実数以上の最小の整数	math.ceil(x)
事前にASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
モードでデータ列の欠損値を補う	ds.fillna(ds.mode().iloc[0])
列によってデータフレームをソートして、上位n件を取り出す	df.sort_values(columns).head(n)
リストとリストの散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームのカラムを度数分布図にする	plt.hist(df[column])
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
列'A'と列'B'をキーとして2つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
リストと配列についての散布図にダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
折れ線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
グラフの描画でパステル調に色を使用する	sns.set(pallete='pastel')
シーケンスから配列を作る	np.array(iterable)
データ列の欠損値をメディアンで埋める	ds.fillna(ds.median())
space	' '
option: スラッシュをセパレータで使う	sep = '/'
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
ベクトルにはいくつ要素が存在するか調べる	aArray.size
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
散布図に赤いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データ列の折れ線グラフを△印で描画する	plt.plot(データ列x, データ列y, marker='^')
グラフの用途をポスターに設定する	sns.set(context='poster')
折れ線グラフの大バツ印の線幅を設定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データ列の文字列を欠損値にする	ds.replace(s, np.nan)
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
データフレームの列がxであるデータを抽出する	df[df[column] == x]
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
折れ線グラフのダイアモンドマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
データフレームの列の欠損値を最大値に設定する	df[col].fillna(df[col].max())
タイムスタンプデータを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
文字列の接尾辞から部分文字列を消す	s.removesuffix(sub)
赤い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
データフレームから列を３つのみ選択する	df[[column, column2, column3]]
サーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
数式の変数に数値を代入する	e.subs(z, e2)
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
円プロットの特定の要素を目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
ファイルをオープンして]書き込みストリームを求める	open(filepath, mode='w')
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
option: ダーク・スラテグレーを使う	color = 'darkslategrey'
多次元データを特異値分解として濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
option: 四角印を使う	marker = 's'
半透明の実線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
'A'列によってデータフレームをソートする	df.sort_values(by='A')
文字列を複数行対応として正規表現で区切る	re.split(pattern, s, flags=re.MULTILINE)
3自然数の最小公倍数	math.lcm(n, n2, n3)
ヒストグラムの色をダークグレーにセットする	plt.hist(データ列, color='darkgrey')
リストとイテラブルについての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
集合に要素を追加する	aSet.add(element)
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
リストのn番目からn2番目の部分	aList[n:n2]
集合を変更不能にする	frozenset(aSet)
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
組を展開してプリントする	print(*aTuple)
コマンド引数を列挙する	sys.argv[1:]
二つのデータフレームを列をキーとして左結合する	pd.merge(df, df2, on=column, how='left')
線グラフを色付きの実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
タン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
nxn2の二次元リスト	[[0] * n for _ in range(n2)]
データ列の折れ線グラフを四角印で描画する	plt.plot(データ列x, データ列y, marker='s')
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
変数を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
線グラフをダークマゼンタ色を使って描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームのカラムのNaNを平均値で置換する	df[col].fillna(df[col].mean())
イテラブルとデータ列についての散布図にrgbのクロスマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
両端キューの要素をインプレースに反転する	deq.reverse()
データフレームの指定した列を配列として抽出する	df[column].values
折れ線グラフの色をゴールデンロッドにする	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームのカラムの欠損値を最大値に減らす	df[col].fillna(df[col].max())
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
文字列が全て英数字か	s.isalnum()
縦棒グラフを描画して中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームの列の欠損値を直前の値で補う	df[col].fillna(method='ffill')
リストとリストの散布図を描画してマーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
デックからポップする	deq.pop()
線グラフの線の種類を実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
キューをタプルに変換する	tuple(deq)
散布図を星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*')
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
データフレームを'A'列で降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
データ列の中に日付データと文字列がいくつあるか数える	ds.isin([value, value2]).sum()
散布図をrgbのダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
option: 行を自動的な連番に設定する	index_col = None
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
散布図を赤い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
実数とyのノルム	math.hypot(x, y)
折れ線グラフの色をダークオレンジに変更する	plt.plot(データ列x, データ列y, color='darkorange')
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
option: 線の種類を点線に変更する	linestyle = 'dotted'
部分文字列が文字列の開始位置より後に含まれる	s.find(sub, start) != -1
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
散布図を黒いバツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームのカラムの標準偏差を算出する	df[col].std()
option: アリスブルーにグラフの色を設定する	color = 'aliceblue'
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
小麦色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
ヒストグラムを破線に設定する	plt.hist(データ列, linestyle='dashed')
サポートベクター回帰モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
列を累加したイテラブル	itertools.accumulate(iterable)
最大長のある両端キュー	collections.deque(maxlen=n)
散布図の大バツマーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
自然数個のものからk個取り出した時の並べ方の総数を算出する	math.perm(n, k)
データフレームからカラムを一つ選択する	df[[column]]
マッピングをカウンタにする	collections.Counter(aDict)
xの小数点以下'1'桁の文字列に変換する	':.1f'.format(x)
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データフレームの文字列をNaNに変換する	df.replace(s, np.nan)
文字列のn番目を見る	s[n]
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
タプルの末尾からn番目以前の部分を抽出する	aTuple[:-n]
散布図をカーキ色として描画する	plt.scatter(データ列x, データ列y, color='khaki')
数値を緑色で表示する	print(f'\033[32m{value}\033[0m')
大バツ印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
データフレームの内のNaNを削除する	df.dropna()
赤い▼マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
赤い一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
タプルの平均値を求める	sum(aTuple)/len(aTuple)
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
連立方程式の解を求める	sympy.solve([e, e2])
データフレームの列の各値が何回出現するか見る	df[col].value_counts()
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
ヒストグラムをベージュ色として描画する	plt.hist(データ列, color='beige')
整数乱数の配列を作る	np.random.randint(開始値, 終了値, N)
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
データ列のpercent分位数	ds.quantile(percent/100)
データフレームを千の位で四捨五入する	df.round(-3)
option: グラフの色をオールドレースに設定する	color = 'oldlace'
組の要素を昇順にソートする	sorted(aTuple, reverse=False)
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
データフレームの列の欠損値を中央値に設定する	df[col].fillna(df[col].median())
オブジェクトがタプルクラスか調べる	isinstance(obj, tuple)
データフレームのカラムを各グループ列ごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
nがn2より大きいかどうか調べる	n > n2
棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
複数の列によって破壊的に昇順にデータフレームを並べる	df.sort_values(by=column, ascending=True, inplace=True)
点線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの平均値を算出する	df.mean()
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ライトスチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightsteelblue')
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
サブクラス	issubclass(サブクラス, クラス)
色付きの破線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
度数分布図を上限から下限までの範囲で描く	plt.hist(データ列, range=(start, end))
文字列の末尾は部分文字列か	s.endswith(sub)
ヒストグラムの色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
赤い丸マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
青い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
スタックをクリアする	deq.clear()
正則化付き重回帰モデルを新規作成する	model = sklearn.linear_model.ElasticNet()
ブルーバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='blueviolet')
ISO書式の文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
赤い左三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='<', c='r')
三二ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
option: 配列のデータ型を指定する	dtype = np.int16
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategray')
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
散布図を黒い星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
二つの文字列をプリントする	print(value, value2)
ライトスレイグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
偽陽性を抑えたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
配列とリストについて散布図を描いて菱形マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
本日のローカルな日付	datetime.date.today()
データフレームから重複する行を残さず落とす	df.drop_duplicates(keep=False)
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
カウンタの最頻出な項目	aCounter.most_common()[0]
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
データフレームの重複する行を数える	df.duplicated().sum()
データフレームをJSONLファイルに小数点以下3桁まで書き込む	df.to_csv(filename, float_format='%.3f')
データフレームのカラムの平均	df[col].mean()
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
既存のベクトルを元に全要素が初期値の行列を作る	np.full_like(aArray, 初期値)
データフレームのカラムの名前を付け直す	df.rename(columns={column: name})
キーがマッピング上で未定義かどうか調べる	key not in aDict
nという名前のシートをエクセルファイルファイルからデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
日付データが日付データより前か判定する	aDate < aDate2
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
Pandasで、データフレームのcollのUNIX時間からPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
散布図の△マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
データフレームを列の値で集約し、、各グループごとの個数を計算する	df.groupby(column).count()
散布図のポイントマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
ファイルからn文字、読み込む	f.read(n)
データフレームを'A'列と'B'列で昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
データ列を使う	import pandas as pd
option: グラフの色を黄緑に設定する	color = 'chartreuse'
オブジェクトがタプルクラス	isinstance(obj, tuple)
データ列とリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ハニーデュー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
セットが空かどうか調べる	len(aSet) == 0
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
カウンタの最も頻出の項目	aCounter.most_common()[0]
データフレームを破壊的に'A'列でで整列する	df.sort_values(by='A', inplace=True)
データフレームのリストカラムを1000の位で丸めて、整数にする	df[aList].round(-3).astype(int)
列の値でデータフレームをグループ化して、それぞれのグループごとの最大値を計算する	df.groupby(column).max()
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
横棒グラフをダークスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
カウンタのユニークな項目を列挙する	list(aCounter)
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
文字列を緑色にする	f'\033[32m{value}\033[0m'
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
折れ線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームの値を正規表現patternで一度に置換する	df.replace(pattern, repl, regex=True)
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
option: インディゴに色を変更する	color = 'indigo'
ヒストグラムを描画して半透明ににする	plt.hist(データ列x, alpha=0.5)
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ヒストグラムの色をオリベドラブにセットする	plt.hist(データ列, color='olivedrab')
実数の逆双曲線余弦	math.acosh(x)
ベクトル演算をする	import numpy as np
データフレームのカラムの欠損値を最大値で補う	df[col].fillna(df[col].max())
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
黒い右三角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
折れ線グラフをローングリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データ列の中にいくつNaNがあるかカウントする	ds.isna().sum()
データフレームのカラムの欠損値をモードに設定する	df[col].fillna(df[col].mode().iloc[0])
option: アリスブルーに色をセットする	color = 'aliceblue'
データフレームを複数の列によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
部分文字列で文字列を分割する	s.partition(sub)
配列と数列の散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
棒グラフをシーグリーン色として描画する	plt.bar(データ列x, データ列y, color='seagreen')
クロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
データ列の空文字をNaNに変換しドロップする	ds.replace('', np.nan).dropna()
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
option: 大バツマーカーを使用する	marker = 'X'
整数nの十六進リテラル	hex(n)
リストを分割数nとしてビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
横棒グラフをフクシア色として描画する	plt.barh(データ列x, データ列y, color='fuchsia')
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
ヒストグラムの色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
ヒストグラムを黄緑色として描画する	plt.hist(データ列, color='chartreuse')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
配列の累積積	np.cumprod(aArray)
データ列をビン数nを用いて分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
文字列の先頭だけ大文字化する	s.capitalize()
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
シスルにヒストグラムの色を設定する	plt.hist(データ列, color='thistle')
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
option: ミントクリーム色を使う	color = 'mintcream'
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
モデルの正確さを求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームのカラムを1000の位で丸めて、整数にする	df[col].round(-3).astype(int)
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
シャルトリューズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
線グラフをイエローグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
符号付き整数の最大値	sys.maxsize
nが3で割り切れるかどうか	n % 3 == 0
ヒストグラムの色をサーモンに指定する	plt.hist(データ列, color='salmon')
イテラブルを文字列に変換して、カンマを用いて一つにする	','.join(map(str, iterable))
まとめてデータフレームのカラムの名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
散布図に赤い▲マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
小数点数の逆双曲線余弦	math.acosh(x)
折れ線プロットを描画する	plt.plot(データ列x, データ列y)
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
文字列の右側からタブを取り除く	s.rstrip('\t')
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
タイムスタンプデータの時刻を求める	aDatetime.hour
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
要素は集合のメンバーかどうか調べる	element in aSet
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
RGBで折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
nがn2以下、または、n3以上	n <= n2 or n >= n3
ひとつでも非アルファベットが文字列中に含まれるか確認する	any(not c.isalpha() for c in s)
キーがマッピングに存在しない場合、要素を追加する	aDict.setdefault(key, element)
文字をASCIIコードに変換する	ord(ch)
option: ポイントマーカーを使う	marker = '.'
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
クラス分類の再現率を算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
イテラブルとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
リストと配列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
option: 色をビスクに指定する	color = 'bisque'
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
列を無限に繰り返す	itertools.cycle(iterable)
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
データフレームを見る	df.head()
option: ダークスラテグレー色を使う	color = 'darkslategray'
アリスブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
nが正の数か調べる	n > 0
オレンジレッド色でヒストグラムを描画する	plt.hist(データ列, color='orangered')
文字列の末尾を使う	s[-1]
データフレームの中にあると文字列の数を数える	df.isin([value, value2]).sum()
最大最小値でスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
二変数の最大値を求める	max(x, y)
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
カウンタをセットに変換する	set(aCounter)
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
ヒストグラムの色をスノーに変更する	plt.hist(データ列, color='snow')
方程式として数式のパラメータの解を求める	sympy.solve(e, z)
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
データフレームからランダムに取り出す	df.sample()
双方向キューに要素をenqueueする	deq.appendleft(element)
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
option: 貝殻にグラフの色を設定する	color = 'seashell'
データフレームの中で、列と列の重複を確認する	df.duplicated(subset=[column, column2])
辞書に別の辞書の項目を追加する	aDict.update(aDict2)
リストの中の最大値を求める	max(aList)
実数の余弦を算出する	math.cos(x)
整数nをn2分の一にする	n //= n2
線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
クラス分類をブースティングでする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
破壊的にデータフレームを複数の列でによってソートする	df.sort_values(by=column, inplace=True)
インディアンレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
データフレームからカテゴリデータのカラム名リスト	df.select_dtypes('object').columns
配列を等量でビン数nで分割する	pd.qcut(aArray, n)
データフレームの中の欠損値を削除する	df.dropna()
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
option: ミディアムアクアマリンを用いる	color = 'mediumaquamarine'
オプションでファイルを出力にする	file = sys.open(filename, 'w')
新しいヒストグラムベースの勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
データフレームの数値を一度に整数に丸める	df.round()
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
nをn2で割る	n / n2
線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
連続した配列の作成する	np.arange(開始値, 終了値, 等差)
タプルをひとつ置きに抽出する	aTuple[::2]
オブジェクトの無限なイテラブル	itertools.repeat(element)
散布図の左三角印の色を設定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
option: フォントの色をインディゴにする	color = 'indigo'
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
option: ダークターコイズを用いる	color = 'darkturquoise'
データフレームをタブ区切りとしてJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
predicateFuncが真になるシーケンスの要素	itertools.dropwhile(predicateFunc, iterable)
数値を黄色で表示する	print(f'\033[33m{value}\033[0m')
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
option: 線の種類を点線にする	linestyle = 'dotted'
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
データフレームを列を用いて並べて更新する	df.sort_values(by=column, inplace=True)
キューのstart番目からend番目の部分要素を見る	collections.deque(itertools.islice(deq, start, end))
値をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
ベクトルの分散	np.var(aArray)
JSONLファイルにBOMを付けてデータフレームを書き込む	df.to_csv(filename, encoding='utf_8_sig')
カテゴリで色分けしてデータフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
ヒストグラムをミディアムアクアマリン色を用いて描画する	plt.hist(データ列, color='mediumaquamarine')
線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
作画のフォントを日本語に変更する	sns.set(font='IPAexGothic')
リストとイテラブルについて散布図をプロットして、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
横棒グラフをオーキッド色として描画する	plt.barh(データ列x, データ列y, color='orchid')
プログラムをここで止める	sys.exit()
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
データ列のユニークな値の個数	ds.nunique()
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
横に並べてヒストグラムを描く	plt.hist([データ列, データ列], color=['b', 'r'])
option: スレートブルー色を使う	color = 'slateblue'
両端キューの中に要素が含まれてるか調べる	element in deq
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
n個の整数列	list(range(n))
データフレームのリスト列の欠損値をxに指定する	df[aList].fillna(x)
データフレームの最頻値	df.mode()
nの三乗	n ** 3
最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgrey')
オブジェクトは集合クラスか調べる	isinstance(obj, set)
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
横棒グラフをドジャーブルー色として描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
データフレームはどれだけ、分散しているか確認する	df.var()
折れ線プロットの色をカラーコードで指定する	plt.plot(データ列x, データ列y, color='#800080')
追加できるように既存のファイルパスを文字列の示すエンコーディングで開く]	open(filepath, mode='a', encoding=s)
option: マーカーを左三角に設定する	marker = '<'
ヒストグラムを紺碧色を用いて描画する	plt.hist(データ列, color='azure')
タイムスタンプデータの日付	aDatetime.date()
option: フォントの色をアクアにセットする	color = 'aqua'
要素はセットに含まれないか調べる	element not in aSet
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
ゲインズボロ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: シエナにグラフの色を設定する	color = 'sienna'
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
辞書からキーの値をエラーなく参照する	aDict.get(key, None)
スプリンググリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
nとn2のビット和	n | n2
データフレームを各列毎に集約して列の個数を計算する	df.groupby(column)[column2].count()
option: 下三角印を描画する	marker = 'v'
オブジェクトのクラス	type(obj)
赤い左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
タプルの要素を昇順に並べ変える	sorted(aTuple, reverse=True)
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
option: マーカーを下三角に変える	marker = 'v'
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
日付時刻データからn秒分、減らす	aDatetime - datetime.timedelta(seconds=n)
データフレームのリストカラムを十の位で丸める	df[aList].round(-1)
文字列を部分文字列で分割したときの後半の文字列	s.partition(sub)[-1]
全要素を０で初期化した符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
今日をタプルに変換する	datetime.datetime.today().timetuple()
横棒グラフを描いて、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
データフレームから列名を複数指定して選択する	df[columns]
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
ガウス過程分類器を作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
散布図をスノー色として描画する	plt.scatter(データ列x, データ列y, color='snow')
列の各データ値の出現回数を算出する	df[col].value_counts()
データフレームの欠損値を最大値で補う	df.fillna(df.max())
option: フォントの色をパレットトルコイズにセットする	color = 'paleturquoise'
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームを'A'列でによって大きい順にソートする	df.sort_values(by='A', ascending=False)
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
データフレームのカラムの時	df[col].dt.hour
マップの全項目をクリアする	aDict.clear()
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
データフレームのn行以降取り出す	df[n:]
データ列の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
縦棒グラフを描き、、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
ファイルを追加モードとして開いて]fとする	f = open(filepath, mode='a')
データフレームのn行目まで抽出する	df[:n]
文字列全体をパターンにケースを無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データ列を等しい量になるようにn個にビン分割する	pd.qcut(ds, n)
棒グラフをブラウン色で描画する	plt.bar(データ列x, データ列y, color='brown')
option: 色をインディアンレッドに変更する	color = 'indianred'
折れ線グラフの星マーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
折れ線グラフを半透明の点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
タイムスタンプデータと日付時刻データの時間差を秒で算出する	(aDatetime - aDatetime2).total_seconds()//60
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
マッピングの項目名を列挙する	list(aDict)
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームのカラムを丸めて、整数にする	df[col].round().astype(int)
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
オブジェクトは辞書型か調べる	isinstance(obj, dict)
ふたつの集合は集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
グループ化してデータフレームの散布図を縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
集合の浅いコピー	aSet.copy()
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
標準出力のバッファを強制表示する	sys.stdout.flush()
パールゴールデンロッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='teal')
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
オブジェクトはバイト列かどうか調べる	isinstance(obj, bytes)
折れ線グラフの右三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
既存のファイルを文字コードtextで追加できるように開く]	open(filepath, mode='a', encoding=text)
option: セパレータを文字列にする	sep = s
文字列を太文字でプリントする	print(f'\033[1m{value}\033[0m')
グラフに目盛線を加える	plt.grid(True)
データフレームのグループ毎の合計	df.groupby(column).sum()
関数によってデータフレームをグループ化し、要約統計量を求める	df.groupby(関数).describe()
option: BOM付きを使う	encoding = 'utf_8_sig'
カーキ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
文字列を最後の部分文字列で分割したときの残りの文字列	s.rpartition(sub)[-1]
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
各列毎にデータフレームをグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
ネイビー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
整数型のゼロ埋めしたベクトル	np.zeros(要素数, dtype=np.int)
イテラブルを累加した列	itertools.accumulate(iterable)
日付時刻データと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
全要素を０で初期化した３二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
ダークサーモン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームを各列と列の組み合わせ毎に集約して最大値を求める	df.groupby([column, column2], as_index=False).max()
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
日付時刻データの月数	aDatetime.month
配列は何次元か調べる	aArray.ndim
線形モデルの回帰変数を使う	model.coef_
データフレームのリストカラムが正規分布からどの程度尖っているか見る	df[aList].skew()
データフレームから指定された三つの列のみ抽出する	df[[column, column2, column3]]
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
二つのリストから辞書	dict(zip(aList, aList2))
青紫色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
データ列をPandasの日付型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
ヒストグラムの色をブラックにセットする	plt.hist(データ列, color='black')
ラベル付きの円プロットを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
行列の列を選択する	aArray[:, 列番号]
ヒストグラムをダークサーモン色として描画する	plt.hist(データ列, color='darksalmon')
辞書のキーを要素に設定する	aDict[key] = element
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
マッピングのキーの一覧	aDict.keys()
折れ線グラフの三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
プログラムのファイル名	sys.argv[0]
赤い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
option: エンコーディングを文字列の示すエンコーディングに指定する	encoding = s
カラムの中にある文字列と文字列の数を数える	ds.isin([value, value2]).sum()
option: ライトスレイグレーに色をセットする	color = 'lightslategray'
データフレームのカラムのメディアンを求める	df[col].median()
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
option: スカイブルー色を使用する	color = 'skyblue'
データフレームの中に文字列とがあるか調べる	df.isin([value, value2])
データ列の中央値	ds.median()
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
データフレームを関数の値によってグループ化する	df.groupby(関数)
散布図の▲マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
双方向キューの先頭から要素を取り除く	deq.popleft()
両端キューの最後から要素を取り出す	deq.pop()
ファイルが存在しないかどうか	not os.path.exists(filepath)
横棒グラフを青紫色として描画する	plt.barh(データ列x, データ列y, color='violet')
小数点数の天井	math.ceil(x)
SVDで淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
配列の差を求める	aArray - aArray2
折れ線グラフの星マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
option: 色をゴールドに変更する	color = 'gold'
赤い点線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
カウンタのキーと出現回数をリストとして得る	aCounter.items()
散布図を黒いダイアモンドマーカーで描く	plt.plot(データ列x, データ列y, marker='D', c='k')
双方向キューからポップする	deq.pop()
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
リストとリストについて散布図を描画し、、バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのカラムの中の欠損値の合計をカウントする	df[col].isna().sum()
n2分のn	n / n2
赤いポイントマーカーをイテラブルと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
ファイルを文字コードtextで開く]	open(filepath, encoding=text)
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
データフレームをグループ化し、列に対し合計を求める	df.groupby(column)[column2].sum()
データ列が何日か見る	ds.dt.day
option: 下三角マーカーを描画する	marker = 'v'
線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
行列の列ごとの分散	np.var(aArray, axis=0)
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
パラメータから名前付きタプルをインスタンス化する	C._make(パラメータ)
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
PandasでUNIX秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
本日が月曜日か	datetime.datetime.today().weekday() == 0
option: 読み込みモードを使う	mode = 'r'
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
逆余弦	math.acos(x)
赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
ファイル名がテキストファイル	filename.endswith('.txt')
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
等間隔のベクトルを作る＼	np.arange(開始値, 終了値, 等差)
オブジェクトは辞書クラスか	isinstance(obj, dict)
散布図のポイントマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
青い実線でイテラブルの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
列の文字列をNaNに変換する	ds.replace(s, np.nan)
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
ふたつの集合はセットと互いに素	aSet.isdisjoint(aSet2)
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
データフレームを各列毎に集約して列の最大値を求める	df.groupby(column)[column2].max()
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
文字列全体が正規表現に複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
データ列を箱髭図にする	plt.boxplot(データ列)
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
データフレームを列の値によって集約して列挙する	[(name, group) for name, group in df.groupby(column)]
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
option: UTF8を使う	encoding = 'utf-8'
option: マーカーの大きさを変更する	markersize = 2.0
文字列の接頭辞から部分文字列を除く	s.removeprefix(sub)
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
多次元データを主成分分析で淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
option: ブルーバイオレットに色を設定する	color = 'blueviolet'
一点鎖線にヒストグラムの線の種類を変更する	plt.hist(データ列, linestyle='dashbot')
最後の部分文字列を用いて文字列を分割する	s.rpartition(sub)
データフレームのカラムをカテゴリデータに変換する	df[col].astype(object)
データフレームを関数によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
折れ線グラフに下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
実数の余弦の逆数	math.acos(x)
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
MLPでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
データフレームの列の値をまとめてValueMapで置換する	df[col].replace(ValueMap)
破壊的に大きい順にデータフレームを複数の列を用いてソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
横棒グラフをグリーンイエロー色を用いて描画する	plt.barh(データ列x, データ列y, color='greenyellow')
ペールグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
集合からエラーなく要素を除く	aSet.discard(element)
option: フォントの色をライムに設定する	color = 'lime'
option: バッファリングのサイズを設定する	buffering = 4096
最初の部分文字列によって文字列を二つに分ける	s.partition(sub)
パターンを複数行対応としてあらかじめコンパイルする	re.compile(pattern, flag=re.MULTILINE)
折れ線グラフに黒い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
データフレームのカラムをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
リストを逆順にする	aList[::-1]
ヒストグラムをペールグリーン色を用いて描画する	plt.hist(データ列, color='palegreen')
リストとイテラブルについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
option: 紺碧色を使う	color = 'azure'
ファイル名がTSVファイルかどうか調べる	filename.endswith('.tsv')
全句点文字	string.punctuation
ミントクリームにヒストグラムの色を指定する	plt.hist(データ列, color='mintcream')
リストの中の最小値	min(aList)
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
数値を黒色で表示する	print(f'\033[30m{value}\033[0m')
option: ミディアムターコイズ色を使用する	color = 'mediumturquoise'
配列の内積	np.dot(aArray, aArray2)
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
option: グラフの色をモカシンに設定する	color = 'moccasin'
ゼロ埋めされた複素数型の行列を作る	np.zeros(要素数, dtype=bool)
青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
四分位数でデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
散布図にポイントマーカーを加える	plt.scatter(データ列x, データ列y, marker='.')
タブで区切って二つの文字列をプリントする	print(value, value2, sep='\t')
ラベンダーブラッシュ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
横棒グラフをミディアムターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
ファイルの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
option: グラフの色をナバホホワイトに変更する	color = 'navajowhite'
縦軸の目盛に文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
データフレームを列によって小さい順にソートする	df.sort_values(by=column, ascending=True)
ヒストグラムの色をサーモンに変更する	plt.hist(データ列, color='salmon')
黒いクロスマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
option: 区切り記号をカンマにする	sep = ','
組を展開して出力する	print(*aTuple)
ファイル名がCSVファイル	filename.endswith('.csv')
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
ベクトルを2次元1行に変形する	aArray.reshape(1, -1)
真下位集合か調べる	aSet < aSet2
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
日付データのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
option: スラッシュを分割記号で使う	sep = '/'
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
リストに要素を追加する	aList.append(element)
色名をからコードに変換する	matplotlib.colors.cnames[色名]
標準入力から1行だけ読み込む	sys.stdin.readline()
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
グラフのタイトルを変更する	plt.title('グラフの名称')
データ列の値が欠損値か調べる	ds.isna()
ASCII限定として文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
配列とイテラブルの散布図を描いて、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
エクセルデータファイルからn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
整数乱数の行列を作成する	np.random.randint(開始値, 終了値, (行数, 列数))
ライトシアンにヒストグラムの色を設定する	plt.hist(データ列, color='lightcyan')
濃い青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
データフレームを列で並べ直して、下の方n件を取り出す	df.sort_values(columns).tail(n)
option: グラフの色を白に設定する	color = 'white'
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
異なる列をキーとして二つの表データを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
ダークグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
変数を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
配列とリストの散布図を描画して、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
リストとリストの散布図に星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*')
二つの集合が互いに素	aSet.isdisjoint(aSet2)
リストの値を昇順にソートする	sorted(aList, reverse=True)
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
データ列の中に文字列がある	ds.isin([value])
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
predicateFuncがTrueになるタプルの要素	itertools.dropwhile(predicateFunc, iterable)
リストと配列についての散布図にrgbのダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
改行せず二つのリストを出力する	print(value, value2, end='')
カラムのどの値が頻出か見る	ds.mode()
部分文字列が文字列中に含まれるかどうか確認する	sub in s
折れ線グラフの三角印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
縦棒プロットを描き、、バーの幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
両端キュー中の要素の出現数を数える	deq.count(element)
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
耐火レンガ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
折れ線グラフのバツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
整数nをn2分の1にする	n //= n2
グラフを論文用に変更する	sns.set(context='paper')
ケースを無視して文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
option: ラベンダー色を使う	color = 'lavender'
直前の値でデータフレームのリストカラムの欠損値を置き換える	df[aList].fillna(method='ffill')
床	math.floor(x)
最大値と最小値を用いて正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ファイルを開いて]読み込みストリームを求める	open(filepath, mode='r')
ヒストグラムの色を青紫に指定する	plt.hist(データ列, color='violet')
データフレームの列の文字列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
アヤメのデータセットをロードする	sns.load_dataset('iris')
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
本日のタイムスタンプ	datetime.datetime.today()
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか	s.find(sub, start, end) == -1
ライトイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightyellow')
データ列とデータ列についての散布図に下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v')
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
データフレームを'A'列と'B'列の値によってグループ化し、記述統計量を計算する	df.groupby(['A', 'B']).describe()
グラフ中の(x,y)の位置にデータラベルを表示する	plt.legend(loc=(x, y))
日付データが月曜日かどうか	aDate.weekday() == 0
option: データ型として三２ビット整数型を用いる	dtype = np.int16
散布図のマーカーを赤色にする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
Pandasで、UNIX秒のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
リストと配列についてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
エクセルデータファイルをデータフレームとして読み込む	pd.read_excel(filename)
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームのカラムのモード	df[col].mode()
実数の天井	math.ceil(x)
データフレームの第三四分位数	df.quantile(0.75)
数列とリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: グラフの色をライトグリーンに変更する	color = 'lightgreen'
折れ線グラフの色をアンティークホワイトに変更する	plt.plot(データ列x, データ列y, color='antiquewhite')
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
標準出力の出力先がターミナルか	sys.stdout.isatty()
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgray')
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
散布図の星マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
kを底とする対数を計算する	math.log(x, k)
整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
ミディアムブルーにヒストグラムの色を変更する	plt.hist(データ列, color='mediumblue')
２つの文字列は同じでない	s != s2
正規分布にしたがってランダムにデータ列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
グラフの縦横比を等しくする	plt.axis('equals')
折れ線グラフにポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
青い菱形印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図のダイアモンド印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
辞書を階層化する	collections.ChainMap(aDict)
小さい方からリストの要素をソートする	sorted(aList, reverse=True)
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
分類モデルを当てはめる	model.fit(説明変数, 目的変数)
混同行列をヒートマップを用いて確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
データフレームの中のNaNの数を数える	df.isna().sum()
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
文字列が全て小文字か調べる	s.islower()
xを印字できる文字列にする	ascii(x)
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
文字列が英数字かどうか	s.isalnum()
option: ターコイズ色を使う	color = 'turquoise'
行列の要素ごとに加算する	aArray + aArray2
オブジェクトは数値か調べる	isinstance(obj, (int,float))
実数のバイナリ対数	math.log2(x)
符号付きで整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
option: フォントの色をコーンズシルクに設定する	color = 'cornsilk'
ファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
ライトスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
モカシン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をダークオレンジに変更する	plt.hist(データ列, color='darkorange')
リストをナンバリングする	enumerate(aList)
ふたつの集合の和集合	aSet.union(aSet2)
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
データフレームを複数の列ごとに分類して、列挙する	[(name, group) for name, group in df.groupby(columns)]
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
option: 三角マーカーを描画する	marker = '^'
ターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
折れ線グラフに青い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
平均と標準偏差から疑似乱数を得る	random.normalvariate(mu=0.5, sigma=0.2)
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
折れ線グラフの▲マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
リストの全要素を空にする	aList.clear()
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
度数分布図を横に並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
ファイルを開いて]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
シアンにヒストグラムの色を変更する	plt.hist(データ列, color='cyan')
リストとリストについて散布図を描いて三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムをマゼンタ色として描画する	plt.hist(データ列, color='magenta')
配列と配列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ダークバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
リストとリストについての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
▼マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='v')
numpyを使う	import numpy as np
データフレームを列で小さい順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
本日の月数	datetime.datetime.today().month
グラフのy軸を対数に変更する	plt.yscale('log')
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
切り上げて整数に変換する	math.ceil(x)
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
線グラフをダークサーモン色を使って描画する	plt.plot(データ列x, データ列y, color='darksalmon')
黄色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
散布図に黒いクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
横棒グラフをネイビー色として描画する	plt.barh(データ列x, データ列y, color='navy')
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
上位集合	aSet.issuperset(aSet2)
文字列の右側から改行を除く	s.rstrip('\n')
クラス分類の正解率を計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
スラグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
両端キューからポップする	deq.pop()
自然数個からk個取り出したときの順列の総数を算出する	math.perm(n, k)
データフレームを複数の列によって大きい順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
n2がn以上、かつ、n3以下か	n <= n2 and n2 <= n3
データフレームのカラムの名前の一覧を使う	df.columns
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図に左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
散布図のクロスマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データ列を四分位数ごとにビンニングする	pd.qcut(ds, 4)
現在の時間数	datetime.date.today().hour
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
option: 追加モードを使う	mode = 'a'
データフレームをグループ化し、列に対し標準偏差を求める	df.groupby(column)[column2].std()
データフレームのリスト列の文字列を欠損値にする	df[aList].replace(s, np.nan)
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
文字列のn番目を使う	s[n]
二つのデータフレームを列'A'と列'B'をキーとして外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
前の値でデータフレームのリストカラムの未入力値を埋める	df[aList].fillna(method='ffill')
データ列と数列についての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
棒グラフをアクア色を用いて描画する	plt.bar(データ列x, データ列y, color='aqua')
option: 印の色を指定する	markerfacecolor = '#800080'
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
ヒストグラムの色をミディアムスプリンググリーンにセットする	plt.hist(データ列, color='mediumspringgreen')
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
ファイルから拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
折れ線グラフの色をダークターコイズに変更する	plt.plot(データ列x, データ列y, color='darkturquoise')
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
偽陰性を抑えたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
タイムスタンプデータが日付時刻データと同時かどうかテストする	aDatetime == aDatetime2
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
棒グラフをトマト色として描画する	plt.bar(データ列x, データ列y, color='tomato')
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
説明変数と目的変数として分類モデルを学習する	model.fit(説明変数, 目的変数)
色付きの一点鎖線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
リストの末尾を取り除く	aList[:-1]
線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
列名リストの値でデータフレームをグループ化する	df.groupby(columns)
データフレームの中の列を等量で分割数nを用いてビンニングする	pd.qcut(df[col], n)
データ列の標本標準偏差を算出する	ds.std()
実数の双曲線正接	math.tanh(x)
空白文字を全部見る	string.whitespace
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
option: ダークレッドにフォントの色を設定する	color = 'darkred'
二つの文字列を順にプリントする	print(value, value2)
日付データの月数を使う	aDate.month
青い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
Pandasでデータ列をdatetime64型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
縦棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
散布図の星マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
JSON形式の文字列をロードする	json.loads(jsonString)
リストと配列についての散布図に赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
セットの要素数	len(aSet)
折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
小麦色色でヒストグラムを描画する	plt.hist(データ列, color='wheat')
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
プロットの色を明るくする	sns.set(pallete='bright')
ライトスレイグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
バギングとして回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
棒グラフをシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='cyan')
nとn2の和	n + n2
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
データ列のユニークな要素数を見る	ds.nunique()
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データ列を1000の位で丸める	ds.round(-3)
データフレームの内の欠損値を削除する	df.dropna()
year年day月をタイムスタンプにする	datetime.datetime(year=year, month=month, day=1)
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
アイボリー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
実数のn乗の数剰余	pow(x, n, y)
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
rgbの三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
データフレームのリストカラムの未入力値を最小値に設定する	df[aList].fillna(df[aList].min())
データフレームから指定された４つの列だけ取り出す	df[[column, column2, column3, column4]]
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
折れ線グラフを茶色色を用いて描画する	plt.plot(データ列x, データ列y, color='brown')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
散布図の▽印の線幅を変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ヒストグラムの色をゴールデンロッドにセットする	plt.hist(データ列, color='goldenrod')
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
二つのデータフレームを異なる列をキーとして全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
柱状グラフを描画する	plt.hist(データ列)
横棒グラフをアクア色として描画する	plt.barh(データ列x, データ列y, color='aqua')
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
線グラフの色をダークグレーにする	plt.plot(データ列x, データ列y, color='darkgrey')
option: ディムグレーを使う	color = 'dimgrey'
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
データフレームの列の正規分布に対する上下広がり	df[col].skew()
折れ線グラフの大バツ印の大きさを設定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
線グラフを実線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
ヒストグラムをレモンシフォン色を用いて描画する	plt.hist(データ列, color='lemonchiffon')
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
データフレームを'A'列の値でまとめたグループ	df.groupby('A')
リスト内の要素が少なくともひとつ真か調べる	any(aList)
左三角マーカーとして折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
折れ線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
option: 四角マーカーを加える	marker = 's'
要素∉セット	element not in aSet
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
辞書のキーを列挙する	list(aDict)
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
折れ線グラフに三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
カラムの欠損値を直後の値に指定する	ds.fillna(method='bfill')
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
オブジェクトは論理値クラスか	isinstance(obj, bool)
ファイルパスをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
データフレームの先頭	df.head()
ヒストグラムの色をグレーに変更する	plt.hist(データ列, color='grey')
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
インディアンレッド色としてヒストグラムを描画する	plt.hist(データ列, color='indianred')
２次元リストを転置する	[list(x) for x in list(zip(*aList))]
リストとリストの散布図にrgbの四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
ディムグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
16進文字列を整数に変換する	int(s, 16)
データフレームをにバイオリン図を使って見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: グラフの色をゲインズボロに変更する	color = 'gainsboro'
ミディアムパープルにヒストグラムの色を変更する	plt.hist(データ列, color='mediumpurple')
nではない	not n
ロージーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
TSVファイルから文字化けしないようにCSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
線グラフを色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
文字列の大文字と小文字を逆にする	s.swapcase()
行列の標準偏差	np.std(aArray)
折れ線グラフのバツ印の線幅を指定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームのリストカラムのNaNをxで埋める	df[aList].fillna(x)
xの小数点以下'4'桁までを表示する	print(':.4f'.format(x))
データフレームのカラムの値を正規表現patternで変更する	df[col].replace(pattern, repl, regex=True)
組の中の最大値	max(aTuple)
option: ポイント印を使う	marker = '.'
オレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
フローラルホワイト色で線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
option: グラフの色をミディアムパープルに変更する	color = 'mediumpurple'
option: コーンズシルク色を使用する	color = 'cornsilk'
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
プロットの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
折れ線グラフの色をミッドナイトブルーに指定する	plt.plot(データ列x, データ列y, color='midnightblue')
辞書の項目数を得る	len(aDict)
最大長nの両端キューを生成する	collections.deque(maxlen=n)
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
option: ヘッダを連番にする	header = None
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
データフレームのリスト列の値がNaNか	df[aList].isna()
本日の日数を見る	datetime.datetime.today().day
折れ線グラフの透明度を変更する	plt.plot(データ列x, データ列y, alpha=0.5)
オブジェクトは整数クラスか調べる	isinstance(obj, int)
option: どの列もインデックスに設定しない	index_col = None
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
文字の文字コードを使う	ord(ch)
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
折れ線グラフを▼印で描画する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムベースの勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
散布図をグリーンイエロー色として描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
日付時刻データが何日か知る	aDatetime.day
黒い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
文字列を正規表現で分割する	re.split(pattern, s)
グラフの縦軸を対数に変更する	plt.yscale('log')
折れ線グラフの色をコーラルに指定する	plt.plot(データ列x, データ列y, color='coral')
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
モデルの残差を計算する	目的変数 - model.predict(説明変数)
プロットを描く準備をする	import matplotlib.pyplot as plt
多次元データをt-SNEを用いて淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームの中で、列と列に重複があるか調べる	df.duplicated(subset=[column, column2])
散布図をパールゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
ヒストグラムをパープル色として描画する	plt.hist(データ列, color='purple')
型のサブクラスか	issubclass(サブクラス, クラス)
データフレームから指定した名前リストの列のみ抽出する	df[columns]
２つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
1からnまでの整数リストを作る	list(range(1, n+1))
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
配列の四分位を作図する	plt.boxplot(データ列)
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgray')
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
線グラフをピンク色として描画する	plt.plot(データ列x, データ列y, color='pink')
タプルを並べ直す	sorted(aTuple)
データフレームのカラムを十の位で丸める	df[col].round(-1)
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
データフレームは正規分布からどれだけ、歪んでいるか調べる	df.kurt()
option: フォントの色をミディアムブルーに変更する	color = 'mediumblue'
要素はセットに含まれるかどうか調べる	element in aSet
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
ファイルパスを書き込み用にBOM付きでオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
行列の次元の数	aArray.ndim
シスル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
正規化されたヒストグラムを描く	plt.hist(データ列, density=True)
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
本日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
散布図をゴールド色として描画する	plt.scatter(データ列x, データ列y, color='gold')
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
データフレームの列の文字列長を列として見る	df[col].str.len()
テンプレートを辞書でフォーマットする	formatText.format_map(aDict)
データフレームの中に含まれる日付データと文字列の数を数える	df.isin([value, value2]).sum()
星マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='*')
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
リストとリストについて散布図を描いて、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
ファイルパスをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
▽マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
データフレームを昇順に2つの列で破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
散布図に赤いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
部分文字列で文字列を分割して文字列リストに変換する	s.split(sub)
データフレームを列で並べて、上の方を取り出す	df.sort_values(columns).head(n)
実測値を分類モデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
option: バイナリモードを使用する	mode = 'rb'
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
出力ストリームを一行ずつ読む	f.readline()
データフレーム全体を行によって昇順にソートする	df.sort_index(ascending=True)
最初のコマンド引数	sys.argv[1]
カテゴリ別で色分けして、データフレームの全列の相関をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
配列をビン数nでビン分割する	pd.cut(aArray, n)
前もって正規表現をコンパイルする	re.compile(pattern)
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
タプルの要素をソートする	sorted(aTuple)
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
二進数文字列を整数に変換する	int(s, 2)
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
Pandasで書式fmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
option: グラフの色をフローラルホワイトに指定する	color = 'floralwhite'
配列の次元数を求める	aArray.ndim
ヒストグラムの色をスラグレーにする	plt.hist(データ列, color='slategrey')
インディアンレッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='indianred')
データフレームの中に文字列が存在する	df.isin([value])
データフレームを正規表現でまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
コーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
イテラブルに列を続ける	itertools.chain(iterable, iterable2)
第２コマンド引数	sys.argv[1]
リストのn番目の要素を削除する	del aList[n]
列のNaNを平均値に設定する	ds.fillna(ds.mean())
option: グラフの色をライトグリーンに指定する	color = 'lightseagreen'
折れ線グラフの△マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
要素がセットのメンバーでない	element not in aSet
データフレームのカラムの未入力値を平均値に変更する	df[col].fillna(df[col].mean())
空の組を作る	()
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
平均値付き箱ひげ図をプロットする	plt.boxplot(データ列, showmeans=True)
ダークバイオレット色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
データフレームの列の名前一覧で指定した列をドロップする	df.drop(columns, axis=1)
スラッシュで区切って二つの数値をプリントする	print(value, value2, sep='/')
nが3の倍数か確認する	n % 3 == 0
データフレームのn行目をドロップして、入れ替える	df.drop(n, axis=0, inplace=True)
option: ダークマゼンタを用いる	color = 'darkmagenta'
option: グラフの色を青紫に変更する	color = 'violet'
option: スチールブルーを使う	color = 'steelblue'
rgbの大バツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
カウンタから最頻出な要素の件数	aCounter.most_common()[1]
ファイルをSJISで追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
データフレームを破壊的に二つの列で降順にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
n個の数値イテラブル	range(n)
option: トマト色を使用する	color = 'tomato'
Pandasの日付型のデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
散布図の▽マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
タイムスタンプデータにn時間を足す	aDatetime + datetime.timedelta(hours=n)
option: アクアにフォントの色を指定する	color = 'aqua'
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
option: フォレストグリーン色を使う	color = 'forestgreen'
折れ線グラフをデピンク色を使って描画する	plt.plot(データ列x, データ列y, color='deeppink')
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
少ない順番にカウンタを列挙する	aCounter.most_common()[::-1]
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
リストの値を関数に適用した結果で並べる	sorted(aList, key=func)
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
データフレームから列を一つ選択する	df[[column]]
プロットを描画する	import matplotlib.pyplot as plt
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
低頻出方からカウンタを列挙する	aCounter.most_common()[::-1]
option: フクシア色を使う	color = 'fuchsia'
折れ線グラフの△マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームを丸めて整数型にする	df.round().astype(int)
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
グリッド線を青くする	plt.grid(color='b')
データフレームの列を折れ線グラフとして描画する	plt.plot(df[column], df[column])
データフレームのn行より後ろ抽出する	df[n:]
option: 色を深紅に設定する	color = 'crimson'
二つのデータフレームを列'A'と列'B'をキーとしてジョインする	pd.merge(df, df2, left_on='A', right_on='B')
バイアスなしの回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
散布図に右三角印を用いる	plt.scatter(データ列x, データ列y, marker='>')
マゼンタ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
データ列の欠損値をモードにする	ds.fillna(ds.mode().iloc[0])
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
ファイルパスから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
ビスク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
部分文字列を文字列の先頭から見つける	s.find(sub)
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
option: マーカーを四角に設定する	marker = 's'
データ列の中に文字列とがいくつ含まれるか数える	ds.isin([value, value2]).sum()
floatの最大値	sys.float_info.max
縦軸の目盛を対数に変更する	plt.yscale('log')
空のカウンタ	collections.Counter()
文字列を空白によって区切って整数リストに変換する	map(int, s.split())
環境のバイトオーダを知る	sys.byteorder
option: 色を小麦色に設定する	color = 'wheat'
赤い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
イテラブルと配列についての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
option: グラフの色をロージーブラウンに指定する	color = 'rosybrown'
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='grey')
ヒストグラムをシーグリーン色を用いて描画する	plt.hist(データ列, color='seagreen')
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
ファイルのディレクトリ名を使う	os.path.dirname(filepath)
横棒グラフをシルバー色を用いて描画する	plt.barh(データ列x, データ列y, color='silver')
グラフに水平方向の破線を付ける	plt.axhline(y=0, linestyle='dashed')
リストを昇順に並べ変える	sorted(aList, reverse=False)
データ列のユニークな値	ds.unique()
散布図のマーカーを星印にする	plt.scatter(データ列x, データ列y, marker='*')
データフレームのカラムのNaNを最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
赤い丸マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
紺碧色で散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
ファイルをSJISで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
横棒グラフをベージュ色を使って描画する	plt.barh(データ列x, データ列y, color='beige')
カテゴリで色分けして、データフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームを列によってグループ化して分散を求める	df.groupby(column).var()
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
Pandasで、エポック秒の文字列からdatetime64型に変換する	pd.to_datetime(s, unit='s', utc=True)
グラフのカラーパレットを全般的に淡くする	sns.set(pallete='muted')
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
文字列が組の要素でない	element not in aTuple
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
縦棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
文字列の示すエンコーディングを用いて書き込みできるようにファイルを開く]	open(filepath, mode='w', encoding=s)
複数のリストをボックスチャートにする	plt.boxplot([データ列, データ列])
ライム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
option: ライトサーモン色を使う	color = 'lightsalmon'
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
option: フォントの色を貝殻に指定する	color = 'seashell'
青い破線として線をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
データフレームのヒストグラムを縦横に並べて、見る	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
option: ダークターコイズにグラフの色を設定する	color = 'darkturquoise'
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
散布図をインディゴ色を用いて描画する	plt.scatter(データ列x, データ列y, color='indigo')
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
文字列の先頭で大文字・小文字を無視してパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
列と列の重複を削除する	df.drop_duplicates(subset=column)
option: 青紫を用いる	color = 'violet'
データフレームのどの値が頻出か調べる	df.mode()
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
データフレームのリストカラムの中に文字列と日付データがいくつあるかカウントする	df[aList].isin([value, value2]).sum()
淡いピンク色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
文字化けしないようにTSVファイルを読む	pd.read_csv(filename, encoding='shift_jis')
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
nの8進リテラル	oct(n)
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
nにn2をかけた値をnに代入する	n *= n2
データフレームをグループ化し、列に対し最小値を求める	df.groupby(column)[column2].min()
データフレームの重複を見る	df.duplicated()
グリッド線	plt.grid(linewidth=3.0)
散布図をライトブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightblue')
データフレームの中に存在する文字列と文字列の合計を数える	df.isin([value, value2]).sum()
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
破壊的にデータフレームのn行目を落とす	df.drop(n, axis=0, inplace=True)
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
Pandasで、タイムスタンプ型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
データフレームのそれぞれのグループの個数	df.groupby(column).count()
両端キューの先頭に列の要素を入れる	deq.extendleft(iterable)
データ列をビン数nとしてビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
プロット中のフォントをする	sns.set(font=フォント名)
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
option: グラフの色をスノーに指定する	color = 'snow'
文字列は平仮名か調べる	('ぁ' <= ch <= 'ん')
実行時の標準出力の出力先がターミナルか	os.isatty(sys.stdin.fileno())
データフレームのカラムの分散	df[col].var()
黒い星印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
青い破線を用いてリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
イテラブルから配列を作る	np.array(iterable)
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
カラムの欠損値を平均値に設定する	ds.fillna(ds.mean())
線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
ヒストグラムをオリベドラブ色として描画する	plt.hist(データ列, color='olivedrab')
データフレームを100の位で四捨五入して整数型にする	df.round(-2).astype(int)
ローングリーンにヒストグラムの色を変更する	plt.hist(データ列, color='lawngreen')
エクセルファイルファイルからn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
値∈集合	element in aSet
データフレームのカラムを10の位で丸めて、整数にする	df[col].round(-1).astype(int)
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
棒グラフを紺碧色を用いて描画する	plt.bar(データ列x, データ列y, color='azure')
option: 線種を破線に設定する	linestyle = 'dashed'
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
リストとリストリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
nとn2が同じ値	n == n2
破線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: サドルブラウンを使う	color = 'saddlebrown'
行列を縦ベクトルに変形する	aArray.reshape(-1, 1)
グラフに鉛直方向の破線を付ける	plt.axvline(x=0, linestyle='dashed')
データフレームを各列と列の組み合わせ毎に集約して、最小値を計算する	df.groupby([column, column2], as_index=False).min()
散布図の左三角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
option: アリスブルー色を使う	color = 'aliceblue'
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
異なる列をキーとして2つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
エポック秒をタイムスタンプに変換する	datetime.datetime.fromtimestamp(timestamp)
シアン色としてヒストグラムを描画する	plt.hist(データ列, color='cyan')
配列とリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
集合に値を追加する	aSet.add(element)
nを切り捨てながらn2分の１にする	n //= n2
破壊的に大きい順にデータフレームを列によって並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
要素が集合に含まれるか調べる	element in aSet
パープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
option: グラフの色をクリムゾンにセットする	color = 'crimson'
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
散布図のバツマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
文字列の長さ	len(s)
リストとリストについて散布図を描画して、星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
数列と数列について散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
カウンタを高頻出方からリストとして得る	aCounter.most_common()
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームを表示するとき折り返しをしない	pd.set_option('expand_frame_repr', False)
ヒストグラムの色を青に変更する	plt.hist(データ列, color='blue')
バギングを用いて回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
Pandasで、書式fmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
縦棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
配列をビン数nで分割する	pd.cut(aArray, n)
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
文字コードtextで書き込みできるようにファイルを開く]	open(filepath, mode='w', encoding=text)
Pandasで、フォーマットfmtを用いて文字列をタイムスタンプに変換する	pd.to_datetime(s, format=fmt)
リストの中の最小値を求める	min(aList)
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
現在の日数	datetime.datetime.today().day
option: シエナ色を用いる	color = 'sienna'
データフレームをグループ化し、それぞれの列に対し最小値を計算する	df.groupby(column)[column2].min()
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
ファイルパスの拡張子付きのファイル名	os.path.basename(filepath)
リストとリストについて散布図を描き、、マーカーをポイントに指定する	plt.plot(データ列x, データ列y, marker='.')
中央値で列を分割する	pd.qcut(ds, 2)
線グラフの色をシルバーにする	plt.plot(データ列x, データ列y, color='silver')
データフレームのカラムの中にある文字列と日付データの数を求める	df[col].isin([value, value2]).sum()
標準入力から1行読み取る	input()
プロットをポスター用に変更する	sns.set(context='poster')
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
コマンドの第一引数を知る	sys.argv[1]
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
文字列をデックの先頭に追加する	deq.appendleft(element)
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
nまでの偶整数リスト	list(range(2, n, 2))
データフレームのヒストグラムを横に並べて、描画する	sns.displot(df, x='列名', col='カテゴリ名')
option: グラフの色をペールグリーンに変更する	color = 'palegreen'
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
option: ダークスレートブルーを使う	color = 'darkslateblue'
黒い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='k')
散布図のマーカーを黒色にする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
日付データの日数	aDate.day
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
折れ線グラフに四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
データフレームのリスト列の相関行列	df[aList].corr()
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
データフレームの列が正規分布からどの程度尖っているか確認する	df[col].skew()
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
データフレームの列の未入力値を直後の値に増やす	df[col].fillna(method='bfill')
option: グラフを一点鎖線に設定する	linestyle = 'dashbot'
option: フローラルホワイト色を使う	color = 'floralwhite'
データ列の折れ線グラフを星印として描画する	plt.plot(データ列x, データ列y, marker='*')
棒グラフを淡い茶色色で描画する	plt.bar(データ列x, データ列y, color='tan')
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
珊瑚色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
変数を太字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
文字列をシアンで表示する	print(f'\033[36m{value}\033[0m')
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
実数の逆余弦	math.acos(x)
ハローワールドとプリントする	print('Hello World')
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgrey')
二つの列によってでデータフレームを大きい順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
ヒストグラムを暗い赤色を使って描画する	plt.hist(データ列, color='darkred')
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
データフレームをTSV形式のファイルから読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: 説明変数を事前に正規化する	normalize = True
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: スカイブルー色を用いる	color = 'skyblue'
散布図を右三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
option: グラフの色をオーキッドに設定する	color = 'orchid'
アクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='aquamarine')
縦棒プロットを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
ヒストグラムの色をホットピンクに指定する	plt.hist(データ列, color='hotpink')
データ列を四捨五入して、整数にする	ds.round().astype(int)
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
kを底とする対数	math.log(x, k)
option: グラフの色をグリーンに設定する	color = 'green'
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
配列をリストを境界値としてビニングする	pd.cut(aArray, aList)
カウンタ同士で∩	aCounter & aCounter2
配列を2次元1列に変形する	aArray.reshape(-1, 1)
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
デックに値をenqueueする	deq.appendleft(element)
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
リストと配列についての散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
組内の要素が少なくともひとつ真か調べる	any(aTuple)
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
二ベクトル間のユークリッド距離を算出する	math.dist(point, point2)
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
散布図に▽マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
ガンマ関数を使う	math.gamma(x)
折れ線グラフを色付きの一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
option: グラフの色をドジャーブルーにする	color = 'dodgerblue'
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: 箱髭図を横方向にする	vert = False
文字列中の部分文字列の出現	s.count(sub)
数式のインテグラルを求める	sympy.integrate(e)
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
Pythonパスのリストを知る	sys.path
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
双方向キューをポップする	deq.pop()
データフレームのカラムの名前を列挙する	df.columns
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
折れ線グラフに青い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
▼マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
option: グラフの色をコーラルに設定する	color = 'coral'
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
ダークバイオレット色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
文字列内に英数字がある	any(c.isalnum() for c in s)
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
文字列の先頭で正規表現に複数行対応としてマッチするか確認する	re.match(pattern, s, flags=re.MULTILINE)
文字列内に空白が含まれる	any(c.isspace() for c in s)
option: マーカーをバツに変える	marker = 'x'
データフレームのカラムの最頻値	df[col].mode()
ストリームを解放する	f.close()
数式を簡単にする	sympy.sympify(e)
散布図に青い上三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
八進数字を全部見る	string.octdigits
ヒストグラムを一点鎖線として描く	plt.hist(データ列, linestyle='dashbot')
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
文字列の末尾の文字	s[-1]
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
option: ミディアムパープルにグラフの色を設定する	color = 'mediumpurple'
データフレームの欠損値をxにセットする	df.fillna(x)
モカシンにヒストグラムの色を設定する	plt.hist(データ列, color='moccasin')
nはn2と等しいか調べる	n == n2
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
グラフの見た目をいい感じに設定する	sns.set()
実行環境がリナックスかどうか調べる	sys.platform.startswith('linux')
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
事前に正規表現をコンパイルする	re.compile(pattern)
ヒートマップを用いてクラス分類の予測精度を確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
縦棒グラフを耐火レンガ色を用いて描画する	plt.bar(データ列x, データ列y, color='firebrick')
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
リストと配列についての散布図に右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>')
ファイルを全部、読む	f.read()
部分文字列が文字列の開始位置から先に含まれないか調べる	s.find(sub, start) == -1
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
数値を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
パールバイオレットレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
折れ線グラフの大バツ印の太さを変える	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
nを八進表現に変換する	oct(n)
行列の計算をする	import numpy as np
縦棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
縦棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
文字列を走査し、正規表現にケースを無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
オブジェクトは辞書クラス	isinstance(obj, dict)
データフレームの指定された列を配列として抽出する	df[column].values
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
データフレームのカラムのユニークな値の個数	df[col].nunique()
文字列リストをつなげるひとつの文字列にする	''.join(aStringList)
文字列の大文字小文字を整える	s.casefold()
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
グラフの凡例の位置を(x,y)に変更する	plt.legend(loc=(x, y))
ヒストグラムの色をミディアムバイオレットレッドにセットする	plt.hist(データ列, color='mediumvioletred')
デックのn番目	deq[n]
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
データフレームの指定した列を配列に変換する	df[column].values
列'A'と列'B'をキーにして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データ列が何曜日か確認する	ds.dt.weekday_name
オブジェクトが関数か調べる	callable(obj)
データ列の未入力値を直前の値で埋める	ds.fillna(method='ffill')
タプル内の要素が全て真か調べる	all(aTuple)
数値をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
option: スラグレーにグラフの色を設定する	color = 'slategrey'
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
文字列をアンダーライン付きにする	f'\033[4m{value}\033[0m'
option: グラフの色をパールゴールデンロッドに指定する	color = 'palegoldenrod'
縦棒グラフをプロットする	plt.bar(ラベル列, データ列)
ファイルをSJISで書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
option: グラフの色をコーラルに指定する	color = 'coral'
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
リストの先頭を除く	aList[1:]
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
標準出力を	sys.stdout
ヒストグラムの色をダーク・スラテグレーにする	plt.hist(データ列, color='darkslategrey')
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
文字列の文字数を見る	len(s)
配列のデータ型を計算する	aArray.dtype()
ヒストグラムの色をアイボリーにする	plt.hist(データ列, color='ivory')
文字列が全て印字できるか調べる	s.isprintable()
オブジェクトが属性を持つか	hasattr(obj, プロパティ名)
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
option: フォントの色をペールグリーンに設定する	color = 'palegreen'
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
option: チョコレート色を使う	color = 'chocolate'
rgbの上三角マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
文字列を全て小文字にする	s.lower()
折れ線グラフの色をロイヤルブルーに指定する	plt.plot(データ列x, データ列y, color='royalblue')
耐火レンガ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
option: ハニーデュー色を使う	color = 'honeydew'
データフレームを列によって並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
文字列のエポック秒から日付データにする	pd.to_datetime(s, unit='s', utc=True)
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
データフレームを'A'列によって並べて、NaNを先頭にする	df.sort_values(by='A', na_position='first')
リストと数列についての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
イテラブルとイテラブルについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
option: フォントの色を青にセットする	color = 'blue'
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
nがn2より大きいか	n > n2
データフレームの２つのカラムを並べて箱髭図を使って可視化する	plt.boxplot([df['カラム'], df['カラム']])
データ列の中に日付データと文字列がある	ds.isin([value, value2])
データフレームを表示するとき、表示可能な最大行数をnに指定する	pd.set_option('display.max_rows', n)
アイボリー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
グラフを表示する	plt.show()
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
散布図の▲マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
ライトサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
コーンフラワーブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームのリストカラムの要約統計量	df[aList].describe()
データフレームのカラムのNaNを直後の値に設定する	df[col].fillna(method='bfill')
データフレームの指定された2列を抽出する	df[[column, column2]]
線グラフを赤色として描画する	plt.plot(データ列x, データ列y, color='red')
分割数nとしてリストを分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
二つのデータフレームを異なる列をキーとして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
文字列内に漢字が含まれるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
折れ線グラフの色を濃いシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
複数の列の値によってデータフレームをグループ化し、記述統計量を求める	df.groupby(columns).describe()
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
文字列はリストに含まれないか調べる	element not in aList
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
折れ線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
あらかじめ正規表現を大文字・小文字を無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
データフレームの欠損値をxに設定する	df.fillna(x)
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
ミディアムブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
整数nのビット長を見る	n.bit_length()
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
データフレームのリストカラムの欠損値を最大値に指定する	df[aList].fillna(df[aList].max())
集合をイミュータブルに変換する	frozenset(aSet)
文字列を太字で出力する	print(f'\033[1m{value}\033[0m')
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
全ての句読点文字	string.punctuation
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
表示できる列数の最大値をnにセットする	pd.set_option('display.max_columns', n)
タプルの項目名に対応した値	aDict.get(key)
option: 色をカーキに設定する	color = 'khaki'
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
配列とリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
option: スラグレーにグラフの色を設定する	color = 'slategray'
パラメータについて数式を微分する	sympy.diff(e, z)
部分的最小二乗回帰モデルを作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: グラフの色をタンにする	color = 'tan'
折れ線グラフの右三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
イテラブルのイミュータブルな集合を求める	frozenset(iterable)
option: ディムグレーにグラフの色を設定する	color = 'dimgray'
文字列を記号にして、変数にする	z = sympy.Symbol(s)
横棒グラフをスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='springgreen')
折れ線グラフをアンティークホワイト色として描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
リストに文字列を追加する	aList.append(element)
x軸の目盛を非表示にする	plt.xticks([])
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
文字列を最後の部分文字列で二分する	s.rpartition(sub)
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
配列の最大値	np.max(aArray)
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
nilに等しい識別子	None
データフレームの中にと日付データがいくつ含まれるか求める	df.isin([value, value2]).sum()
配列をn個にビニングし、namesのラベルをつける	pd.cut(aArray, n, labels=names)
option: スプリンググリーンを用いる	color = 'springgreen'
データフレームを列を用いてソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
ダークスラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
行列の列ごとの標準偏差	np.std(aArray, axis=0)
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
データフレームのリストカラムの分散	df[aList].var()
散布図の▽マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
二つの集合が共通の要素を持たないかどうか調べる	aSet.isdisjoint(aSet2)
文字列をセパレータによって区切る	s.split(sub)
タプルを反転する	reversed(aTuple)
散布図の印の色を設定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
キーが辞書に存在するかどうか調べる	key in aDict
線グラフを赤い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
10を底とする対数	math.log10(x)
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
タプルの要素を並べ変える	sorted(aTuple)
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
文字列一つのタプルを得る	(element,)
文字列が部分文字列で終わる	s.endswith(sub)
実行結果をプリントする	print(value)
nが2で割り切れるかどうか調べる	n % 2 == 0
rgbの三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ピンク色でヒストグラムを描画する	plt.hist(データ列, color='pink')
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
ライトシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
option: ライトイエローを使う	color = 'lightyellow'
昇順に複数の列によってデータフレームをソートする	df.sort_values(by=column, ascending=True)
オブジェクトはリストかタプル	isinstance(obj, (list)
ダークマゼンタ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
データフレームのリスト列を四捨五入する	df[aList].round()
表データをインポートする	import pandas as pd
データ列の変化を赤い実線でプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
シンボル計算を使う	import sympy
データフレームを列によって集約して、それぞれのグループ毎の最大値を求める	df.groupby(column).max()
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
データ列の分散	ds.var()
option: グラフの色をオレンジに指定する	color = 'orange'
組とタプルを接続する	aTuple + aTuple2
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
option: グラフの色をオレンジレッドに指定する	color = 'orangered'
折れ線グラフの色をグレーにセットする	plt.plot(データ列x, データ列y, color='grey')
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
散布図の大バツマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
ライトグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
折れ線グラフの色をスカイブルーに変更する	plt.plot(データ列x, データ列y, color='skyblue')
色を全般的にパステル調にする	sns.set(pallete='pastel')
配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
文字列の開始位置番目と終了位置番目の間に部分文字列がないかどうか	s.find(sub, start, end) == -1
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
文字列が無限に繰り返す列	itertools.repeat(element)
リストとリストの散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: 黄色色を使用する	color = 'yellow'
文字列がリストに含まれないか調べる	element not in aList
列からn要素、サンプリングする	random.sample(iterable, k=n)
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
データフレームをJSONLファイルにBOMを付けて保存する	df.to_csv(filename, encoding='utf_8_sig')
句読点文字を全部見る	string.punctuation
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
部分文字列が文字列の終了位置より前に含まれるかどうか	s.find(sub, 0, end) != -1
マッピングをカウンタに変換する	collections.Counter(aDict)
データフレームの相関行列スピアマン順位相関係数で	df.corr(method='spearman')
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
ベージュ色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
option: ゲインズボロ色を用いる	color = 'gainsboro'
データフレームを'A'列によって小さい順にソートする	df.sort_values(by='A', ascending=True)
カラムの平均	ds.mean()
下位集合	aSet.issubset(aSet2)
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
文字列中にひとつでも非アルファベットが含まれる	any(not c.isalpha() for c in s)
データフレームを二つの列によって並べる	df.sort_values(by=['A', 'B'])
データフレームのカラムの最頻値を求める	df[col].mode()
散布図に赤い▽印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
n個の整数リスト	list(range(n))
データ列を2つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列x, データ列y, color='darksalmon')
変数を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
カウンタ間で和集合	aCounter | aCounter2
オブジェクトはタプルの要素でないか調べる	element not in aTuple
ライトスチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
データフレームを複数の列によって小さい順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
option: スプリンググリーン色を用いる	color = 'springgreen'
option: 大文字・小文字を無視する	flag = re.IGNORECASE
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
値を緑色で表示する	print(f'\033[32m{value}\033[0m')
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
カウンタからマッピングを引く	aCounter.subtract(aDict)
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
ペールグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='palegreen')
n回オブジェクトが繰り返すイテラブル	itertools.repeat(element, n)
散布図をダークスラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
行列と同じ大きさの空行列を初期化する	np.empty_like(aArray)
option: ドジャーブルー色を使用する	color = 'dodgerblue'
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
Pandasで、データ列をフォーマットfmtで日付データに変換する	pd.to_datetime(ds, format=fmt)
勾配ブースティングを用いてクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
英字の大文字を見る	string.ascii_uppercase
ライトコーラル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
option: サンディーブラウン色を用いる	color = 'sandybrown'
タプル内の要素が全て真か判定する	all(aTuple)
option: フォントの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
デピンクにヒストグラムの色を指定する	plt.hist(データ列, color='deeppink')
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
折れ線グラフをラベンダーブラッシュ色を用いて描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
実数に数を加える	x + y
白色でヒストグラムを描画する	plt.hist(データ列, color='white')
リストの末尾	aList[-1]
文字列が大文字	s.isupper()
データ列の値が欠損値	ds.isna()
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
option: グラフの色をレモンシフォンに指定する	color = 'lemonchiffon'
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
データフレームの列の名前を付け直す	df.rename(columns={column: name})
グラフで用いるy座標にラベルを設定する	plt.ylabel('y軸ラベル')
列と列の重複を落とす	df.drop_duplicates(subset=[column, column2])
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
rgbのポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: フォントの色を白に設定する	color = 'white'
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
ベクトルと同じ大きさの空配列を作る	np.empty_like(aArray)
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
保存するCSVの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
nとn2の値を足してnに代入する	n += n2
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
option: グラフの色をビスクに設定する	color = 'bisque'
文字列を空白によって区切る	s.split()
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
文字列の両端から部分文字列を取り除く	s.strip(sub)
縦方向に二つのデータフレームを合体させる	pd.concat([df, df2])
ピーチパフ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
日付時刻データが水曜日	aDatetime.weekday() == 2
事前にケースを無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
赤いダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
文字列中に非数字がある	any(not c.isdigit() for c in s)
折れ線グラフに黒い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
ファイル全体を行単位で分割して読む	f.readlines()
ダークシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
追加できるように文字列の示すエンコーディングで既存のファイルパスをオープンする]	open(filepath, mode='a', encoding=s)
option: グラフの色をアンティークホワイトに変更する	color = 'antiquewhite'
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
グリッドを実線にする	plt.grid(linestyle='solid')
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
データ列の推移を一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図の四角マーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
横棒グラフをラベンダー色を用いて描画する	plt.barh(データ列x, データ列y, color='lavender')
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
テキストファイルファイル名がか調べる	filename.endswith('.txt')
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
ミントクリーム色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
パールバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
タプルをn回連結する	aTuple * n
option: 箱ヒゲ図に平均を加える	showmeans = False
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
折れ線グラフをターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='turquoise')
実数の指数を計算する	math.frexp(x)[1]
配列のユニークな要素	np.unique(aArray)
文字列を部分文字列で二分し、前半の文字列を見る	s.partition(sub)[0]
リストを分割数nを使ってビンニングする	pd.cut(aList, n)
データフレームを二つの列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
リストの末尾から値をポップする	aList.pop()
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
散布図にrgbの四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
リストのオブジェクトの位置をエラーなく使う	aList.index(element) if element in aList else -1
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
整数を整数にする	int(x)
散布図をダークバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
スプリンググリーン色としてヒストグラムを描画する	plt.hist(データ列, color='springgreen')
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
数値を太字にする	f'\033[1m{value}\033[0m'
線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
option: ダークスラテグレーにフォントの色を変更する	color = 'darkslategray'
nが5で割り切れる	n % 5 == 0
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
実数の双曲線正弦の逆数	math.asinh(x)
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
列をイミュータブルなセットに変換する	frozenset(iterable)
'A'列によって昇順にデータフレームを並べる	df.sort_values(by='A', ascending=True)
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
データフレームのリストカラムの正規分布に対する上下広がり	df[aList].skew()
データフレームの相関行列をヒートマップとして描画する	sns.heatmap(df.corr())
要素が集合の要素に含まれないか調べる	element not in aSet
配列の標準偏差を使う	np.std(aArray)
データフレームを'A'列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
文字列の接尾辞が部分文字列	s.endswith(sub)
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
折れ線グラフの星マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
タプルの最初を取り除く	aTuple[1:]
折れ線グラフの右三角印を青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
八進数文字列を整数に変換する	int(s, 8)
データ列が正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(データ列)
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
オレンジ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
option: グラフの色をネイビーに設定する	color = 'navy'
option: 小麦色を使う	color = 'wheat'
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: フォントの色をライトコーラルに設定する	color = 'lightcoral'
文字列を隔離する	sys.intern(s)
option: グラフの色を青に設定する	color = 'blue'
カラムの欠損値を平均値にセットする	ds.fillna(ds.mean())
スタッキングとしてクラス分類をする	sklearn.ensemble.StackingClassifier()
ヒストグラムを黄緑色で描画する	plt.hist(データ列, color='chartreuse')
option: スレートブルーを使う	color = 'slateblue'
日付データが日付データより前か確認する	aDate < aDate2
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
白色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
文字列は組に含まれないか調べる	element not in aTuple
散布図の星マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
データ列の中の欠損値の合計を求める	ds.isna().sum()
nの無限数列を得る	itertools.repeat(n)
データフレームのリストカラムの母標準偏差を求める	df[aList].std(ddof=0)
データ列の中に存在する日付データの合計を数える	ds.isin([value]).sum()
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
ヒストグラムの色をイエローグリーンに指定する	plt.hist(データ列, color='yellowgreen')
散布図をライム色として描画する	plt.scatter(データ列x, データ列y, color='lime')
データフレームをから読む	pd.read_excel(filename)
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
自然数の最大公約数	math.gcd(n, n2)
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
数式を展開する	sympy.expand(e)
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
ヒストグラムの色をライトブルーに変更する	plt.hist(データ列, color='lightblue')
線グラフを破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
カラムの欠損値を中央値で埋める	ds.fillna(ds.median())
データフレームを２つの列によってソートして、NaNを先頭に来るようにする	df.sort_values(by=['A', 'B'], na_position='first')
データフレームのn行目を削除する	df.drop(n, axis=0)
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
整数乱数で要素を埋めたベクトル	np.random.randint(開始値, 終了値, N)
行列のスカラー倍	aArray * n
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
option: バリーウッドにグラフの色を設定する	color = 'burlywood'
ValueMapでデータフレームの値を置き換える	df.replace(ValueMap)
実数の逆双曲線正接を求める	math.atanh(x)
ヒストグラムの色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
kを底とする実数の対数	math.log(x, k)
データフレームのカラムの中のNaNの合計をカウントする	df[col].isna().sum()
データフレームの中にと文字列がいくつあるか数える	df.isin([value, value2]).sum()
数に実数を掛ける	x * y
ミディアムブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
データ列の推移を色付きの実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
散布図をダークターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
組の先頭を捨てる	aTuple[1:]
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
データフレームの欠損値を直後の値で補う	df.fillna(method='bfill')
リストと配列についての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
option: ヘッダを自動的な連番に設定する	header = None
option: フォントの色をライトグレーに設定する	color = 'lightgrey'
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: 右三角マーカーを描画する	marker = '>'
option: サンディーブラウンに色を設定する	color = 'sandybrown'
一度にデータフレームのカラムの名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
本日の年数	datetime.datetime.today().year
整数nはセットのひとつであるか判定する	n in aSet
全要素を0で初期化した配列	np.zeros(要素数)
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
option: 色をダークカーキに設定する	color = 'darkkhaki'
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
要素がセットに含まれないか調べる	element not in aSet
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
option: ダークレッドを使用する	color = 'darkred'
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
配列を平坦にする	aArray.flatten()
データフレームをインポートする	import pandas as pd
option: 貝殻色を使う	color = 'seashell'
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
option: 読み込む行番号をnamesで指定する	usecols = names
二つの値をコロンで区切って表示する	print(value, value2, sep=':')
option: エラーを無視するように指定する	errors = 'ignore'
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
グラフの用途をスライドに設定する	sns.set(context='talk')
ユーザから入力される	int(input())
option: グラフの色をラベンダーに設定する	color = 'lavender'
散布図でデータフレームの全カラムを可視化する	sns.pairplot(df)
二つのカウンタの共通する要素	aCounter & aCounter2
辞書を浅くコピーする	dict(aDict)
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
ヒストグラムをブルーバイオレット色を用いて描画する	plt.hist(データ列, color='blueviolet')
n個にデータ列をビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
八進文字列を整数にする	int(s, 8)
実数が負の数	x < 0
組の長さ	len(aTuple)
配列とリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
データフレームのカラムをヒストグラムとして描画する	plt.hist(df[column])
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
バツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
散布図を黒い左三角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
散布図をrgbのクロスマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
原点から(実数,y)の距離	math.hypot(x, y)
異なる列をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
リストとリストについての散布図に△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
折れ線グラフの四角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
実数以下の最大の整数を計算する	math.floor(x)
文字列の先頭でケースを無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
二つの列でで破壊的にデータフレームをソートする	df.sort_values(by=['A', 'B'], inplace=True)
箱ひげ図でリストを描画する	plt.boxplot(データ列)
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
データフレームの行の名前の一覧	df.index
データフレームをグループ化し、それぞれの列に対し標準偏差を計算する	df.groupby(column)[column2].std()
文字列がパターンにマッチさせる	re.match(pattern, s)
option: エラーを無視するように変更する	errors = 'ignore'
option: ライトスレイグレー色を使う	color = 'lightslategray'
オブジェクトにプロパティが存在するか	hasattr(obj, プロパティ名)
正規表現によって文字列を置き換える	re.sub(pattern, newsub, s)
タプルのキー一覧	list(aDict)
リストをビン数nでビン分割する	pd.cut(aList, n)
ケンドールでデータフレームの列とカラムの相関行列	df[[column, column2]].corr(method='kendall')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
インディアンレッド色でヒストグラムを描画する	plt.hist(データ列, color='indianred')
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
文字列を最初の部分文字列で分けたときの残りの文字列	s.partition(sub)[-1]
データフレームのリストで指定された列の相関行列を計算する	df[aList].corr()
二つの列によってデータフレームをソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
n個にデータフレームの中のカラムをビニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
文字列を式として評価する	eval(s)
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
カウンタの∪を求める	aCounter | aCounter2
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
０で全要素を初期化した行列	np.zeros(行数, 列数)
小数点数のsinの逆数	math.asin(x)
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
データフレームを列でグループ化して、列の要約統計量を算出する	df.groupby(column).describe()[column2]
グリッド線を黒くする	plt.grid(color='k')
数列とリストについて散布図をプロットし、、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
折れ線グラフに青い上三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
２つの値をカンマで区切ってプリントする	print(value, value2, sep=',')
実数のハイパボリック・コサインの逆数	math.acosh(x)
ラベンダーブラッシュ色でヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
バリーウッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
集合＼集合	aSet.difference(aSet2)
散布図に左三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='<')
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
グラフの色を全般的に濃くする	sns.set(pallete='deep')
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
ロバスト推定としてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
折れ線グラフをドジャーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
キーが辞書上で未定義か調べる	key not in aDict
全要素を0で初期化したベクトル	np.zeros(要素数)
文字列の開始位置からと終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
新しい線形モデルを用意する	model = sklearn.linear_model.LinearRegression()
グラフの色使いを明るくする	sns.set(pallete='bright')
標準入力から1行だけ改行を取り除いて読み込む	sys.stdin.readline().rstrip()
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategray')
リストとリストについて散布図をプロットし、、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
実数を小数点以下で四捨五入する	round(x, n)
option: オレンジ色を使う	color = 'orange'
option: グラフの色をラベンダーに指定する	color = 'lavender'
疑似乱数	random.random()
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
nがn2より小さいかどうか確認する	n < n2
整数個からk個取り出した時の並べ方の総数を算出する	math.perm(n, k)
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
多次元データを主成分分析として濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
散布図の四角印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
option: ディープスカイブルー色を使う	color = 'deepskyblue'
option: 小麦色にフォントの色を設定する	color = 'wheat'
散布図の四角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
行列にはいくつ要素があるか調べる	aArray.size
縦棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
リストの平均	sum(aList)/len(aList)
散布図をハニーデュー色を使って描画する	plt.scatter(データ列x, データ列y, color='honeydew')
項目名が辞書に存在するか調べる	key in aDict
ライムグリーン色でヒストグラムを描画する	plt.hist(データ列, color='limegreen')
データ列をヒストグラムで可視化する	plt.hist(データ列)
リストの長さを見る	len(aList)
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
数が負の数か調べる	x < 0
棒グラフをフローラルホワイト色として描画する	plt.bar(データ列x, データ列y, color='floralwhite')
数値の平方根を計算する	sympy.sqrt(e)
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
回帰分析を勾配ブースティングでする	model = sklearn.ensemble.GradientBoostingRegressor()
縦棒グラフをインディアンレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='indianred')
方程式の解を算出する	sympy.solve(e)
リストとデータ列の散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
折れ線グラフに黒い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
散布図に大バツマーカーを加える	plt.scatter(データ列x, データ列y, marker='X')
データフレームを'A'列によって小さい順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
ふたつの集合のユニオンを求める	aSet.union(aSet2)
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
データフレームを列名リストの値ごとにグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
日付を使う	import datetime
predicateFuncがtrueとならないシーケンスの部分	itertools.dropwhile(predicateFunc, iterable)
ヒストグラムをライトスレイグレー色を用いて描画する	plt.hist(データ列, color='lightslategray')
折れ線グラフの色をプラムに指定する	plt.plot(データ列x, データ列y, color='plum')
既にロードされたモジュールの一覧を知る	sys.modules
色付きの点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
nからn2までの整数列	list(range(n, n2+1))
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
数列とリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
インディアンレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
option: 印を星に変更する	marker = '*'
option: グラフの色を青緑に設定する	color = 'turquoise'
半透明の点線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
小さい順に列によってデータフレームを並べ直す	df.sort_values(by=column, ascending=True)
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
データ列の要約統計量を算出する	ds.describe()
プログラムの実行を正しく終了する	sys.exit(0)
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
ブラック色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
データ列の平均を求める	ds.mean()
option: スカイブルー色を使う	color = 'skyblue'
リストとリストについて散布図を描いて、文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
クラス分類の適合率と再現率の調和平均を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
option: デピンク色を使う	color = 'deeppink'
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
ロイヤルブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
赤い下三角マーカーを数列と配列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
黒い四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
文字列リストを一つにしてひとつの文字列にする	''.join(map(str, iterable))
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
データ列の変遷を色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフの左三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームを10の位で丸める	df.round(-1)
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
ヒストグラムをカーキ色を用いて描画する	plt.hist(データ列, color='khaki')
'A'列と'B'列でデータフレームをグループ化して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
列の値によってデータフレームを集約して、列挙する	[(name, group) for name, group in df.groupby(column)]
プロットの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
セットから別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
リストとリストの散布図に▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
項目名が辞書にある	key not in aDict
データフレームをグループ化しそれぞれの列に対し最小値を算出する	df.groupby(column)[column2].min()
データフレームのNaNを直前の値で埋める	df.fillna(method='ffill')
データフレームの未入力値を平均に設定する	df.fillna(df.mean())
補足をグラフに被らない場所に表示する	plt.legend(loc='best')
文字列が全て英字	s.isalpha()
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
データ列の変遷を色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
プロットに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
小数点数の平方根	math.sqrt(x)
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
イテラブルとリストをペアリングする	itertools.zip_longest(iterable, iterable2)
データ列のNaNを直後の値に指定する	ds.fillna(method='bfill')
カラムの中にいくつNaNがあるか数える	ds.isna().sum()
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
データ列の母標準偏差	ds.std(ddof=0)
option: 大バツマーカーを使う	marker = 'X'
散布図に赤い大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X', c='r')
折れ線グラフの印をバツにする	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
整数nの十六進数表現	hex(n)
option: ロイヤルブルー色を使う	color = 'royalblue'
数で実数を割って、切り捨てる	x // y
散布図に黒い▼マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフの下三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
辞書の値の一覧	aDict.values()
実数が有限か調べる	math.isfinite(x)
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
いつまでも文字列が繰り返すイテラブルを求める	itertools.repeat(element)
浮動小数点数以上の最小の整数	math.ceil(x)
線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
ファイルをBOM付きを用いて追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
列にシーケンスを続けたイテラブル	itertools.chain(iterable, iterable2)
横棒グラフの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
option: グラフの色をミントクリームに指定する	color = 'mintcream'
プラムにヒストグラムの色を設定する	plt.hist(データ列, color='plum')
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
新しい勾配ブースティング回帰木を用意する	model = sklearn.ensemble.GradientBoostingRegressor()
乱数シードをnで初期化する	random.seed(n)
ヒストグラムをブラウン色として描画する	plt.hist(データ列, color='brown')
縦棒グラフをプロットして、棒の横幅を変更する	plt.bar(ラベル列, データ列, width=0.5)
縦棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
最初のコマンド引数を知る	sys.argv[1]
多次元データを主成分分析として淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
散布図の菱形マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
n個に等しい量になるように配列をビン分割する	pd.qcut(aArray, n)
両端キューの先頭に列の要素を追加する	deq.extendleft(iterable)
三二ビット整数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int16)
ブランチドアーモンド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
整数nの二進数表記を見る	bin(n)
option: ミディアムアクアマリンに色を設定する	color = 'mediumaquamarine'
データフレームの重複した行を数える	df.duplicated().sum()
棒グラフをタン色を用いて描画する	plt.bar(データ列x, データ列y, color='tan')
双方向キューを要素を出す	deq.popleft()
イテラブルから1個ランダムに選ぶ	random.choice(iterable)
ロバスト分類器を準備する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
綺麗なグラフを用いる	import seaborn as sns
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
スピアマン相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
セットから全ての要素を除去する	aSet.clear()
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
ヒストグラムの色をミディアムブルーに指定する	plt.hist(データ列, color='mediumblue')
ファイルに文字列を書き込む	f.write(s)
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
nxn2の２次元リストを作る	[[0] * n for _ in range(n2)]
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
データフレームを各カラムと列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
等差数列から乱数を生成する	random.randrange(start, end, step)
option: グラフの色をロイヤルブルーに変更する	color = 'royalblue'
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
ケースを無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
両端キューの末尾に数値を付け加える	deq.append(element)
黒い星マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
ファイルを書き込みモードとしてオープンして]、fとする	f = open(filepath, mode='w')
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
未初期化の行列	np.empty(要素数, dtype=np.int)
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
ライトコーラル色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
深紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
パターンにマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
ヒストグラムをオールドレース色を用いて描画する	plt.hist(データ列, color='oldlace')
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
シアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
オブジェクトをイテレータに変換する	iter(obj)
線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgray')
折れ線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
グラフの色を明るくする	sns.set(pallete='bright')
ライム色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
実数が無限大	math.isinf(x)
縦棒グラフを描いてラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームをグループ化し、列に対し最大値を計算する	df.groupby(column)[column2].max()
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
ダークオリーブグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ミディアムバイオレットレッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
既存のベクトルを元に全要素が1の行列	np.ones_like(aArray)
数式の変数についてのn階微分を算出する	sympy.diff(e, z, n)
未初期化の配列	np.empty(要素数, dtype=np.int)
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
ヒストグラムをフォレストグリーン色として描画する	plt.hist(データ列, color='forestgreen')
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
ファイルのディレクトリ名	os.path.dirname(filepath)
スピアマンでデータフレームの相関行列	df.corr(method='spearman')
文字を文字コードに変換する	ord(ch)
正規分布に基づく累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
散布図でデータフレームのカラムを可視化する	sns.scatterplot(data=df, x='列名', y='列名')
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
Pandasで、文字列のエポック秒からdatetime64型に変換する	pd.to_datetime(s, unit='s', utc=True)
文字列内にひとつでもアルファベットがある	any(c.isalpha() for c in s)
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
ピアソンの積立相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
オブジェクトが組の要素	element in aTuple
ホワイトスモーク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
JSONフォーマットの入力ストリームを読み込んで、dataとする	data = json.load(fin)
データフレームを二つの列によって並べ直し、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
二次元組をフラット化する	sum(aTuple)
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ティール色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
数列とリストについて散布図を描き、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
オブジェクトは関数か確認する	callable(obj)
データ列のUNIX秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
データフレームを表示するとき、小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
折れ線グラフの丸印を青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
option: ドジャーブルー色を使う	color = 'dodgerblue'
３数の最小値を計算する	min(x, y, z)
データフレームを二つの列を用いてを用いて大きい順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
ヒストグラムをダークグリーン色として描画する	plt.hist(データ列, color='darkgreen')
データ列を整数に四捨五入する	ds.round()
データフレームの列の中にいくつ未入力値が存在するか数える	df[col].isna().sum()
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
タイムスタンプデータが日付時刻データと同時	aDatetime == aDatetime2
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
rgbの右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
やわらかい青色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
無限大	math.inf
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
折れ線グラフに星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
グラフのy軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
最初の値を双方向キューから取り除く	deq.remove(element)
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
2ベクトル間のユークリッド距離	math.dist(point, point2)
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
UTF8で追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf-8')
スレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
データ列の四分位を描画する	plt.boxplot(データ列)
イテラブルを双方向キューに変換する	collections.deque(iterable)
JSONファイルファイル名がかどうか調べる	filename.endswith('.json')
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
赤い一点鎖線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
中央値でデータフレームのNaNを埋める	df.fillna(df.median())
文字列の先頭から空白を取り除く	s.lstrip()
赤い丸マーカーを配列と数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
バイトオーダを知る	sys.byteorder
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
日付時刻データは日付時刻データより遅いか調べる	aDatetime > aDatetime2
数列の推移を点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
濃いシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
オプションで、出力先を標準エラーに設定する	file = sys.stderr
散布図を▼マーカーで描画する	plt.scatter(データ列x, データ列y, marker='v')
青い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
配列の差	aArray - aArray2
データフレームの要約統計量	df.describe()
アルファベットの大文字を全て使う	string.ascii_uppercase
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
折れ線グラフのバツ印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
パパイヤウィップ色としてヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
折れ線グラフをバリーウッド色を用いて描画する	plt.plot(データ列x, データ列y, color='burlywood')
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
回帰分析をSDGで行う	model = sklearn.linear_model.SGDRegressor()
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
棒グラフの色をバイオレットにする	plt.bar(データ列x, データ列y, color='violet')
数列とデータ列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ファイルを追加モードでオープンする]	open(filepath, mode='a')
rgbの下三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
浮動小数点数を実数で	x // y
配列と配列についての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数	s.count(sub, start, end)
書式を辞書で文字列整形する	formatText.format_map(aDict)
表データをまとめて小数点以下n桁で丸める	df.round(n)
ブースティングで回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
TSVファイルをカラムの名前なしで読み込む	pd.read_csv(filename, header=None)
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
nがn2以下か調べる	n <= n2
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
option: ホワイトスモークを使う	color = 'whitesmoke'
データフレームのカラムの年	df[col].dt.year
ファイルパスからディレクトリ名を求める	os.path.dirname(filepath)
ヒストグラムをネイビー色として描画する	plt.hist(データ列, color='navy')
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
リストとリストの散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgrey')
散布図をブラック色として描画する	plt.scatter(データ列x, データ列y, color='black')
辞書にキーが存在しないとき、要素を追加する	aDict.setdefault(key, element)
データフレームの列の空文字をNaNに変換し、ドロップする	df[col].replace('', np.nan).dropna()
線グラフを青い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームを表示するときn列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
パープルにヒストグラムの色を設定する	plt.hist(データ列, color='purple')
イエローグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
グラフにグリッド線を入れる	plt.grid(True)
option: 菱形マーカーを用いる	marker = 'D'
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームを各列毎にグループ分けして、列の最大値を求める	df.groupby(column)[column2].max()
色付きの一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ヒストグラムをダークオレンジ色として描画する	plt.hist(データ列, color='darkorange')
茶色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
データ列のNaNを最頻値で埋める	ds.fillna(ds.mode().iloc[0])
ヒストグラムをミントクリーム色を使って描画する	plt.hist(データ列, color='mintcream')
文字列を改行せずにプリントする	print(value, end='')
文字列中から正規表現にケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
日付データの年数	aDate.year
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgray')
線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ダークカーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
データフレームの列の文字列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
option: アリスブルー色を用いる	color = 'aliceblue'
データフレームを列でソートし、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
散布図に三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='^')
option: グラフの色をベージュに設定する	color = 'beige'
散布図の大バツ印を黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
1行標準入力から改行なしで読み込む	sys.stdin.readline().rstrip()
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
縦棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
データフレームのカラムを並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
リストとリストの散布図をプロットして、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s')
グループごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
行列の列ごとの最大値を使う	np.max(aArray, axis=0)
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
変数について数式の微分を計算する	sympy.diff(e, z)
ヒストグラムをミディアムシアグリーン色を使って描画する	plt.hist(データ列, color='mediumseagreen')
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
ビン数nでリストをビン分割する	pd.cut(aList, n)
ミディアムアクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
タプルの要素を逆順にする	aTuple[::-1]
教師データとして単回帰モデルを学習する	model.fit(説明変数, 目的変数)
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
n回だけ文字列を置き換える	s.replace(sub, newsub, n)
日付時刻データの日付	aDatetime.date()
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ネイビー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
文字列をコロンで区切って、列挙する	s.split(':')
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
プロットの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
折れ線グラフの▲マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームのカラムを10の位で丸める	df[col].round(-1)
ポイント印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
option: データ型を指定する	dtype = np.int16
n番目の列をデータフレームから除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
データフレームの列が文字列で終わらない行を選ぶ	df[not df[column].str.endswith(s)]
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
option: マーカーを菱形に変更する	marker = 'D'
データフレームを列によってグループ化して、それぞれのグループごとの最大値を計算する	df.groupby(column).max()
nがn2か判定する	n == n2
ミスティローズにヒストグラムの色を指定する	plt.hist(データ列, color='mistyrose')
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
折れ線グラフの色をコーラルにセットする	plt.plot(データ列x, データ列y, color='coral')
ダークグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
数列とリストの散布図をプロットしてマーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
カウンタをシーケンスを用いて更新する	aCounter.update(iterable)
データフレームの中にがある	df.isin([value])
データフレームのn行目を抽出する	df.loc[n]
ミディアムターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
データ列の中に文字列と日付データがあるか調べる	ds.isin([value, value2])
文字列は識別子名かどうか調べる	s.isidentifier()
グラフをスライドに設定する	sns.set(context='talk')
散布図を青色を用いて描画する	plt.scatter(データ列x, データ列y, color='blue')
ライトスカイブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
実数から実数を引く	x - y
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
行列の演算を行う	import numpy as np
数値のn階微分を計算する	sympy.diff(e, z, n)
３つ並べてヒストグラムを描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
三整数のGCD	math.gcd(n, n2, n3)
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームのカラムの曜日は何日目か見る	df[col].dt.dayofweek
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
データ列の要約統計量を求める	ds.describe()
標準エラー	sys.stderr
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
option: ダークスラテグレーにグラフの色を設定する	color = 'darkslategray'
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
配列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
実数のn乗して実数による余り	pow(x, n, y)
ベクトルのスカラー倍	aArray * n
辞書の値を列挙する	aDict.values()
変数について数式を積分する	sympy.integrate(e, z)
option: グラフの色をペルーに設定する	color = 'peru'
ライトゴールドロディイエロー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
データフレームを散布図で見て、カテゴリごとにマーカーを変更する	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
データフレームの列を千の位で丸めて、整数型にする	df[col].round(-3).astype(int)
淡い茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
横棒グラフをダークシアグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
ライトゴールドロディイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
折れ線グラフの丸印の色を設定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
タプルのキーとその項目を列挙する	aDict.items()
変数を白色で表示する	print(f'\033[37m{value}\033[0m')
実数の逆正弦	math.asin(x)
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
０で全要素を初期化した８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int8)
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
列の各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
日付データが日付データより遅い	aDate > aDate2
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
クラス分類を確率的勾配降下で行う	model = sklearn.linear_model.SGDClassifier()
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
数列とリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
nがn2より小さいか調べる	n < n2
散布図に黒い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
配列の和	aArray + aArray2
辞書からキーで指定された項目をポップする	aDict.pop(key)
全要素を０で初期化した整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int)
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
ベクトルの行ごとの標準偏差	np.std(aArray, axis=1)
ライトシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
システム時刻で乱数を初期化する	random.seed()
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
枠なしの補足を入れる	plt.legend(frameon=False)
JSONファイルの入力ストリームを読み込んで、dataとする	data = json.load(fin)
逆正接	math.atan(x)
線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
行列の次元数	aArray.ndim
整数nはリストのどれかか調べる	n in aList
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
8進文字列をbytesizeバイトのバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
option: スラグレーにグラフの色を指定する	color = 'slategrey'
実数の双曲線正弦を計算する	math.sinh(x)
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
option: マゼンタを使う	color = 'magenta'
ヒストグラムをライム色を使って描画する	plt.hist(データ列, color='lime')
データフレームを二つの列を用いて並べ直す	df.sort_values(by=['A', 'B'])
文字列がタプルの要素でないか調べる	element not in aTuple
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
タン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
nとn2の差	n - n2
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
グラフの背景色を白くする	sns.set(style='whitegrid')
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
数値時刻のデータ列からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
option: グラフの色を暗い赤に変更する	color = 'darkred'
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
黒いダイアモンドマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
文字列に日本語が含まれるかテストする	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データフレームの値が欠損値か確認する	df.isna()
勾配ブースティング回帰木を用意する	model = sklearn.ensemble.GradientBoostingRegressor()
アルファベットの大文字を全部見る	string.ascii_uppercase
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
option: 星マーカーを用いる	marker = '*'
昇順にデータフレームを'A'列によってソートする	df.sort_values(by='A', ascending=True)
縦棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
実数の仮数を計算する	math.frexp(x)[0]
マルーンにヒストグラムの色を変更する	plt.hist(データ列, color='maroon')
昇順にリストの要素を並べる	sorted(aList, reverse=False)
データフレームのインデックスの名前をまとめてnameからname2に付け直す	df.rename(index={name: name2})
何回まで再帰ができるか知る	sys.getrecursionlimit()
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
青い点線としてラインをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
アルファベットの大文字を全部使う	string.ascii_uppercase
option: フォントの色をミディアムブルーにセットする	color = 'mediumblue'
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
データフレームのカラムは何時か確認する	df[col].dt.hour
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
option: ダークサーモン色を用いる	color = 'darksalmon'
最大長nの双方向キューを新規生成する	collections.deque(maxlen=n)
プロットの補足の位置を(x,y)に設定する	plt.legend(loc=(x, y))
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
要素がタプルの値として含まれている	element in aDict.values()
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
単回帰モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
横棒グラフをピーチパフ色を使って描画する	plt.barh(データ列x, データ列y, color='peachpuff')
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
option: 追加用に指定する	mode = 'a'
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
箱ひげ図としてデータ列を可視化する	plt.boxplot(データ列)
列をカウントして、カウンタを更新する	aCounter.update(iterable)
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
nを二進表記にする	bin(n)
カテゴリ列で色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
二変数の最大値	max(x, y)
二つのカウンタのいずれかに含まれる要素を算出する	aCounter | aCounter2
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
日付データが水曜日	aDate.weekday() == 2
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
散布図に黒い△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
ミディアムスプリンググリーンにヒストグラムの色を指定する	plt.hist(データ列, color='mediumspringgreen')
棒グラフをミントクリーム色として描画する	plt.bar(データ列x, データ列y, color='mintcream')
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
ヒストグラムを濃いシアン色として描画する	plt.hist(データ列, color='darkcyan')
option: 複素数型を使う	dtype = bool
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
option: 茶色を使う	color = 'brown'
データフレームの中にいくつ日付データが存在するか数える	df.isin([value]).sum()
データフレームのリスト列の中の欠損値の個数を求める	df[aList].isna().sum()
最小値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].min())
縦棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
option: グラフの色をライトグレーにセットする	color = 'lightgray'
セットから全要素を取り除く	aSet.clear()
日付データにn週間分加算する	aDate + datetime.timedelta(weeks=n)
データ列の散布図をプロットする	plt.scatter(データ列x, データ列y)
データフレームの列を100の位で四捨五入する	df[col].round(-2)
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
リストとリストについて散布図を描画して、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: グラフの色をミントクリームに設定する	color = 'mintcream'
文字列がタプルの要素か	element in aTuple
文字列のの開始位置から終了位置までの間に部分文字列がいくつか存在するか調べる	s.count(sub, start, end)
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
カラーパレットを全般的に濃くする	sns.set(pallete='deep')
大文字を使う	string.ascii_uppercase
コマンドの第一引数を調べる	sys.argv[1]
文字列がタプルの要素か調べる	element in aTuple
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
データフレームのリスト列を10の位で四捨五入する	df[aList].round(-1)
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
アルファベットの大文字列	string.ascii_uppercase
サインの逆数	math.asin(x)
nからn2の値を引いてnにする	n -= n2
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
双方向キューの末尾に要素を追加する	deq.append(element)
nが1、もしくは2か調べる	n == 1 or n == 2
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
データフレームをにバイオリン図で図示する	sns.violinplot(x='カテゴリ列', y='列', data=df)
リストをビン数nで等しい量になるように分割する	pd.qcut(aList, n)
変数の出力を改行なしに行う	print(value, end='')
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
タンにヒストグラムの色を設定する	plt.hist(データ列, color='tan')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
数列の移り変わりを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
双方向キューの末尾	deq[-1]
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
データフレームのカラムと列を消す	df.drop([column, column2], axis=1)
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
二つのカウンタの共通する要素を求める	aCounter & aCounter2
データフレームを1000の位で四捨五入する	df.round(-3)
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
折れ線グラフの色をライトグレーに変更する	plt.plot(データ列x, データ列y, color='lightgray')
nが一桁の数か調べる	0 <= n <= 9
折れ線グラフのポイントマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
モデルの残差を求める	目的変数 - model.predict(説明変数)
散布図をライトスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
ダークオレンジ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
パールバイオレットレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
タプルとタプルを連結する	aTuple + aTuple2
日付データが月曜日	aDate.weekday() == 0
option: 改行コードを動作環境依存に設定する	newline = None
空の勾配ブースティング分類木を用意する	model = sklearn.ensemble.GradientBoostingClassifier()
ライトグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
値をキューにenqueueする	deq.appendleft(element)
option: オレンジ色を使用する	color = 'orange'
データ列の中にいくつ文字列が存在するか数える	ds.isin([value]).sum()
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
オプションで、出力先をファイルに変更する	file = sys.open(filename, 'w')
option: 色をマゼンタに指定する	color = 'magenta'
リストから文字列を取り除く	aList.remove(element)
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
部分文字列が部分文字列で開始するかどうか調べる	s.startswith(sub)
シーケンスの集合	set(iterable)
Pandasで文字列を日付データに変換する	pd.to_datetime(s)
ヒストグラムの色をライトスチールブルーに指定する	plt.hist(データ列, color='lightsteelblue')
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
青い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームの信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームのリストカラムの文字列を未入力値にする	df[aList].replace(s, np.nan)
実数の指数部	math.frexp(x)[1]
クラス分類をK最近傍法で行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
nが3の倍数かどうか調べる	n % 3 == 0
疑似乱数を生成する	random.random()
プラットホームのエンコーディング	sys.getdefaultencoding()
散布図をブラック色を用いて描画する	plt.scatter(データ列x, データ列y, color='black')
ハローワールドと表示する	print('Hello World')
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
option: グラフの色をアイボリーに設定する	color = 'ivory'
折れ線グラフの右三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
サポートベクターマシンとしてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
実数を2乗する	x ** 2
option: namesを列の名前に指定する	names = names
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
赤色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
option: フォントの色をパウダーブルーに指定する	color = 'powderblue'
k進対数	math.log(x, k)
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
棒グラフをミディアムバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
データ列のタイムゾーンを日本に指定する	ds.tz_convert('Asia/Tokyo')
折れ線グラフの線種を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
データ列のNaNを平均値で埋める	ds.fillna(ds.mean())
文字列TSVファイルからCSVファイルをn番目の列をインデックスにして読み込む	pd.read_csv(filename, index_col=n)
データフレームのNaNをモードに指定する	df.fillna(df.mode().iloc[0])
要素が辞書の値に含まれていないかどうか	element not in aDict.values()
オブジェクトが整数クラスか調べる	isinstance(obj, int)
現在のミリ秒	int(time.time() * 1000)
タプルのオブジェクトが最初に見つかるインデックス	aTuple.index(element)
散布図の菱形マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
ゼロ埋めされたブール型のベクトルを作る	np.zeros(要素数, dtype=np.int32)
線グラフの色をダークスラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategray')
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
二つの関係が部分集合か調べる	aSet.issubset(aSet2)
option: バッファリングを無効にする	buffering = 0
nの二乗	n ** 2
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
配列の個数	aArray.size
ベクトルは何次元か調べる	aArray.ndim
ヒストグラムの色をダークサーモンにセットする	plt.hist(データ列, color='darksalmon')
データ列がどの程度、分散しているか見る	ds.var()
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
option: シエナ色を使う	color = 'sienna'
散布図にポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
上位集合もしくは等しいか調べる	aSet > aSet2
破壊的にデータフレームを列名リストで小さい順にソートする	df.sort_values(by=column, ascending=True, inplace=True)
部分文字列が部分文字列で始まるか	s.startswith(sub)
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
リストの最初の要素	aList[0]
散布図をライトスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
棒グラフを真紅色で描画する	plt.bar(データ列x, データ列y, color='crimson')
縦棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ピアソンの相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
サーモン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
０で全要素を初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
データ列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
文字列を空白で区切る	s.split()
nとn2の商	n / n2
predicateFuncを適用したとき真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
変数を表示する	print(value)
列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
文字列一つのタプル	(element,)
折れ線グラフの大バツ印を青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
折れ線グラフの色をゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='goldenrod')
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
ヒストグラムをオレンジレッド色を用いて描画する	plt.hist(データ列, color='orangered')
ファイルを一行ずつ読み込む	f.readline()
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
データフレームを表示するとき小数点以下n桁まで表示されるようにする	pd.set_option('precision', n)
データフレームの中で列に重複があるか見る	df.duplicated(subset=column)
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
ミディアムターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
プラットホームはMacOSか調べる	sys.platform.startswith('darwin')
折れ線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
リストが空でない	len(aList) != 0
値を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
二つのオブジェクトが同一参照か調べる	obj is obj2
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
データフレームを'A'列によってによって破壊的に並べる	df.sort_values(by='A', inplace=True)
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
ダークシアン色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
ヒストグラムをダークスラテグレー色として描画する	plt.hist(データ列, color='darkslategray')
ValueMapでデータフレームのリスト列をまとめて置換する	df[aList].replace(ValueMap)
ファイルを開いて]追加ストリームを見る	open(filepath, mode='a')
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
nが5の倍数か調べる	n % 5 == 0
イテラブルとリストについての散布図に赤いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
option: ラベンダーブラッシュ色を使用する	color = 'lavenderblush'
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
nが無限に続くリストを求める	itertools.repeat(n)
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
折れ線グラフの色をパレットトルコイズに指定する	plt.plot(データ列x, データ列y, color='paleturquoise')
線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
散布図に赤い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
折れ線グラフの色をダークオーキッドにセットする	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
散布図の上三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
option: 欠損値を先頭にする	na_position = 'first'
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
縦棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
文字列の先頭から空白やタブを除去する	s.lstrip()
option: ライトイエロー色を使う	color = 'lightyellow'
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームの中で、列の重複を確認する	df.duplicated(subset=column)
option: マーカーを四角に変更する	marker = 's'
ディープスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
日付時刻データは何秒か知る	aDatetime.second
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ヒストグラムをパールバイオレットレッド色として描画する	plt.hist(データ列, color='palevioletred')
浮動小数点数に変換する	float(x)
箱ひげ図を描き、、平均値を追加する	plt.boxplot(データ列, showmeans=True)
y座標の最大・最小を変更する	plt.ylim(最小値, 最大値)
タプルと列の直積	itertools.product(iterable, iterable2)
オブジェクトにプロパティが存在するかどうか調べる	hasattr(obj, プロパティ名)
ミディアムオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
データフレームの列で文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
キューの末尾	deq[-1]
縦棒グラフをサドルブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
オブジェクトのフィールドを取り除く	delattr(obj, プロパティ名)
プラム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
文字列がタプルに含まれるか調べる	element in aTuple
２つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
xの絶対値	abs(x)
最大値・最小値の範囲を使って一様な乱数	random.uniform(最小値, 最大値)
散布図の四角印を黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
黒い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='k')
散布図をrgbのポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: ディムグレー色を使う	color = 'dimgray'
データ列の折れ線グラフを四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s')
数値のパラメータを数式で置き換える	e.subs(z, e2)
option: バイナリモードを使う	mode = 'rb'
横棒グラフをタン色を用いて描画する	plt.barh(データ列x, データ列y, color='tan')
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
散布図に赤い左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<', c='r')
グラフにy=0の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
xの印字可能な文字列	ascii(x)
スピアマン相関係数でデータフレームのリストカラムの相関行列	df[aList].corr(method='spearman')
文字列を日付データに変換する	pd.to_datetime(s)
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
グラフの色を濃くする	sns.set(pallete='deep')
カラムを10の位で丸めて整数型にする	ds.round(-1).astype(int)
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ヒストグラムをマゼンタ色を用いて描画する	plt.hist(データ列, color='magenta')
赤い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
現在を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
線グラフを青紫色として描画する	plt.plot(データ列x, データ列y, color='violet')
名前からカラーマップを求める	"plt.get_cmap(""カラーマップ名"")"
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
行列の逆行列を求める	np.linalg.inv(aArray)
一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
全要素を1で初期化した配列を作る	np.ones(要素数, dtype=np.int)
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
日付時刻データの月	aDatetime.month
ライトイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
両端キューが空でない	len(deq) != 0
まとめてValueMapでデータフレームのリスト列の値を置き換える	df[aList].replace(ValueMap)
ヒストグラムの色をライトスカイブルーに指定する	plt.hist(データ列, color='lightskyblue')
プロットの簡単な説明の位置を指定する	plt.legend(loc=(x, y))
ふたつの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
option: ターコイズ色を使用する	color = 'turquoise'
option: 文字列をセパレータで使う	sep = s
散布図を赤い右三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
日付時刻データの日を見る	aDatetime.day
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
リストを境界値としてデータ列をビン分割する	pd.cut(ds, aList)
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
赤い点線を使って数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
小数点数以上の最小の整数	math.ceil(x)
nが正の整数	n > 0
散布図を濃いシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
データフレームを列によってグループ化し、記述統計量を計算する	df.groupby(column).describe()
データフレームを複数の列で並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
エンコーディングを使う	sys.getdefaultencoding()
オブジェクトが数値かどうか調べる	isinstance(obj, (int,float))
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
プラットホームがLinux	sys.platform.startswith('linux')
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しないか	s.find(sub, start, end) == -1
リストを等しい量になるようにビン数nとしてビン分割する	pd.qcut(aList, n)
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
縦軸の目盛の値を変更する	plt.yticks(目盛りの値リスト)
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
文字列を最後の部分文字列によって二分する	s.rpartition(sub)
配列とリストの散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
ミディアムスプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
データフレームを複数の列の値によってまとめたグループ	df.groupby(columns)
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
データフレームから数値データの列を取り出す	df.select_dtypes('number')
実数が有限か	math.isfinite(x)
option: ローングリーン色を使う	color = 'lawngreen'
文字列をタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: ダークグリーンを用いる	color = 'darkgreen'
散布図をミディアムスプリンググリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
ファイルパスを読み込み用に開く]	open(filepath, mode='r')
ダークブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
集合のすべての要素が別のセットに含まれる	aSet.issubset(aSet2)
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
リストと数列について散布図を描いて大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
バリーウッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
日付時刻データにn秒分、加える	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフを赤い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
文字列を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
データフレームを各列と列の組み合わせ毎にグループ化し、、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
データフレームを関数によってグループ化し要約統計量を計算する	df.groupby(関数).describe()
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
散布図をミディアムシアグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
ライトゴールドロディイエロー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
nをn2だけ大きくする	n += n2
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
データフレームを関数によってグループ分けする	df.groupby(関数)
破線でデータ列の変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームを列でによって大きい順にソートする	df.sort_values(by=column, ascending=False)
部分文字列が文字列の終了位置より前に含まれないか調べる	s.find(sub, 0, end) == -1
散布図を菱形マーカーで描く	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフをアクア色として描画する	plt.plot(データ列x, データ列y, color='aqua')
ライトコーラル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
線グラフを実線で描く	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームの第二四分位数	df.median()
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
データフレームを列で昇順に並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
散布図を黒い左三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
ヒストグラムをスチールブルー色として描画する	plt.hist(データ列, color='steelblue')
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
シーケンスのイミュータブルな集合を作る	frozenset(iterable)
イテラブルを文字列に変換して、カンマで連結する	','.join(map(str, iterable))
データ列の中にがある	ds.isin([value])
現在が火曜日か調べる	datetime.datetime.today().weekday() == 1
折れ線グラフに黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ファイルをオープンして]、書き込みストリームを求める	open(filepath, mode='w')
データフレームを各列毎にグループ分けして列の分散を求める	df.groupby(column)[column2].var()
リストとリストについて散布図を描いて、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
列でデータフレームをグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
マップから項目名の値かもしくは要素を得る	aDict.get(key, element)
リストを境界値としてデータフレームの中の列をビン分割する	pd.cut(df[col], aList)
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
文字列の中の複数行対応としてパターンによるすべてのマッチを見る	re.findall(pattern, s, flags=re.MULTILINE)
データフレームの中の欠損値がある行を落とす	df.dropna()
部分集合か調べる	aSet.issubset(aSet2)
option: グラフの色をゴーストホワイトに変更する	color = 'ghostwhite'
文字列を最後の部分文字列を用いて二分する	s.rpartition(sub)
符号付きでnを長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
実行結果を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
横軸の目盛りを整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
ひとつ置きにリストを取り出す	aList[::2]
折れ線グラフを青い破線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
オプションで、標準出力を使用する	file = sys.stdout
ゼロ埋めされた整数型のベクトル	np.zeros(要素数, dtype=np.int)
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
option: オリーブにグラフの色を設定する	color = 'olive'
棒グラフをローングリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lawngreen')
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
行列は何次元か調べる	aArray.ndim
オールドレースにヒストグラムの色を変更する	plt.hist(データ列, color='oldlace')
散布図の下三角印を青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
辞書を並べ直してJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
データフレームを表示するときヘッダー行を左寄せに指定する	pd.set_option('colheader_justify', 'left')
データフレームから先頭の列を除く	df[df.columns[1:]]
二点間のユークリッド距離	math.dist(point, point2)
日付時刻データが火曜日	aDatetime.weekday() == 1
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
スライド用にプロットを変更する	sns.set(context='talk')
折れ線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
複数の列でデータフレームをソートする	df.sort_values(by=column)
データフレームのNaNを最頻値に指定する	df.fillna(df.mode().iloc[0])
小数点数の整数部	math.modf(x)[1]
t-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
Pandasで、文字列をdatetime64型にする	pd.to_datetime(s)
散布図の左三角印を青色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
データ列を円グラフにする	plt.pie(データ列, startangle=90)
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
文字列の右側から空白を取り除く	s.rstrip()
リストをn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
二つのデータフレームを列をキーにして結合する	pd.merge(df, df2, on=column)
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
赤い菱形マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
表データを'A'列の値によってグループ化し、列挙する	[(name, group) for name, group in df.groupby('A')]
数値を青色でプリントする	print(f'\033[34m{value}\033[0m')
空のタプル	()
タイムスタンプデータが土曜日か調べる	aDatetime.weekday() == 5
列に列を続ける	itertools.chain(iterable, iterable2)
option: フォントの色をターコイズに設定する	color = 'turquoise'
二つの文字列はケースを無視して同じか	s.casefold() == s2.casefold()
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
option: アンティークホワイトにフォントの色を変更する	color = 'antiquewhite'
リストをヒストグラムにする	plt.hist(データ列)
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
option: セパレータをコロンにする	sep = ':'
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
リストを折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
フローラルホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
データ列の推移を折れ線グラフで図示する	plt.plot(range(len(データ列)), データ列)
両端キュー中の要素を数える	deq.count(element)
データフレームのリスト列の相関行列スピアマン相関係数として	df[aList].corr(method='spearman')
コーラル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
データフレームを'A'列と'B'列を用いて小さい順に破壊的に整列する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
nがn2で割り切れるか調べる	n % n2 == 0
rgbの丸マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
データフレームのリスト列がどの程度、分散しているか見る	df[aList].var()
option: グラフの色をベージュに指定する	color = 'beige'
option: ミスティローズを使用する	color = 'mistyrose'
ヒストグラムを茶色色として描画する	plt.hist(データ列, color='brown')
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
カラムの第二四分位数	ds.median()
リストの値を昇順に並べ変える	sorted(aList, reverse=False)
グラフからグリッド線を表示しない	plt.grid(False)
双方向キューに要素をプッシュする	deq.append(element)
一点鎖線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
ピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
データ列は何分か見る	ds.dt.minute
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
ファイルをSJISを用いてオープンする]	open(filepath, encoding='shift_jis')
データフレームで、列に重複があるか見る	df.duplicated(subset=column)
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
ヒストグラムをホワイトスモーク色を用いて描画する	plt.hist(データ列, color='whitesmoke')
グラフの描画で濃くカラーパレットを用いる	sns.set(pallete='deep')
nで乱数シードを固定する	random.seed(n)
数列と配列についての散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
パールゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
入力ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
xとyの商と余りを同時に算出する	divmod(x, y)
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
タプルの長さ	len(aTuple)
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
リストと配列についての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
option: ミディアムターコイズを使う	color = 'mediumturquoise'
リストの全要素を消去する	aList.clear()
散布図を赤いクロスマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c='r')
実数の小数点以下を四捨五入する	round(x)
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
変数がマイナス無限大に近づくときの数式の極限値を計算する	sympy.limit(e, z, -oo)
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
折れ線グラフのダイアモンドマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームの欠損値が含まれる部分を	df.style.highlight_null()
実数の二進対数	math.log2(x)
最大最小で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
配列の累積和	np.cumsum(aArray)
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
黄緑色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
黄色色でヒストグラムを描画する	plt.hist(データ列, color='yellow')
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
文字列の先頭は部分文字列	s.startswith(sub)
折れ線グラフを破線に指定する	plt.plot(データ列x, データ列y, linestyle='dashed')
ヒストグラムを青くする	plt.hist(データ列, color='b')
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
option: 三2ビット整数型を使う	dtype = np.int16
値は集合に含まれるか調べる	element in aSet
データフレームの中の列と列に重複があれば消す	df.drop_duplicates(subset=[column, column2])
行列の演算をする	import numpy as np
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
最大最小からベクトルを作成する	np.linspace(最小値, 最大値, 要素数)
データフレームをグループ化し、それぞれの列に対し平均値を算出する	df.groupby(column)[column2].mean()
明日の日付を使う	datetime.date.today() + datetime.timedelta(days=1)
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
データフレームの各次元のサイズを見る	df.shape
データフレームに重複があるか見る	df.duplicated()
グラフの描画で明るくカラーパレットを用いる	sns.set(pallete='bright')
ヒストグラムをゴーストホワイト色として描画する	plt.hist(データ列, color='ghostwhite')
標準入力から1文字だけ読む	sys.stdin.read(1)
文字列をユニコード列にする	[ord(ch) for ch in s]
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
データフレームから重複したデータをドロップする	df.drop_duplicates()
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
文字列内に小文字があるか調べる	any(c.islower() for c in s)
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
ロージーブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
オリベドラブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
ヒストグラムの色を茶色に指定する	plt.hist(データ列, color='brown')
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
線グラフを一点鎖線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
プラットホーム名	sys.platform
option: 色の透明度を設定する	alpha = 0.5
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
相関係数と有意確率を求める	scipy.stats.pearsonr(データ列, データ列2)
折れ線グラフの三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
predicateFuncがTrueとなるシーケンスの要素	itertools.takewhile(predicateFunc, iterable)
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
本日の曜日を整数で使う	datetime.datetime.today().weekday()
ヒートマップでデータフレームのリスト列の相関行列を描画する	sns.heatmap(df[aList].corr())
データ列が何分か見る	ds.dt.minute
option: 貝殻にグラフの色を変更する	color = 'seashell'
option: ダークターコイズにグラフの色を指定する	color = 'darkturquoise'
辞書のコピー	dict(aDict)
既存のベクトルを元にして全要素が1の配列	np.ones_like(aArray)
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
データフレームを各列と列の組み合わせ毎にグループ化して分散を算出する	df.groupby([column, column2], as_index=False).var()
プロットの全般的にパレットを暗くする	sns.set(pallete='dark')
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
option: バイアスを算出しない	fit_intercept = False
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
リストを組に変換する	tuple(aList)
数式の数値を計算する	float(e)
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
折れ線グラフを半透明の実線として描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
小数点数の二進対数	math.log2(x)
TSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
option: 線の幅を3.0ポイントにする	linewidth = 3.0
実数の小数部を計算する	math.modf(x)[0]
折れ線グラフのダイアモンドマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
散布図のマーカーの色を設定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
データフレームを列でグループ化し、それぞれのグループごとの分散を求める	df.groupby(column).var()
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ライトグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
折れ線グラフをスノー色を用いて描画する	plt.plot(データ列x, データ列y, color='snow')
リストとイテラブルについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
実数の角度	math.degrees(x)
折れ線グラフの右三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
配列の次元の数を求める	aArray.ndim
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
辞書の項目名を要素に設定する	aDict[key] = element
折れ線グラフの▲印を青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
option: フローラルホワイトにグラフの色を指定する	color = 'floralwhite'
タイムスタンプデータをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
縦軸だけグリッド線	plt.grid(axis='y')
トマト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
リストをn個に分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
散布図をアイボリー色を使って描画する	plt.scatter(データ列x, データ列y, color='ivory')
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
辞書の浅いコピーを準備する	aDict.copy()
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフに赤いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
option: グラフの色をダークスレートブルーに変更する	color = 'darkslateblue'
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
option: ライトグリーン色を使う	color = 'lightgreen'
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
セットにリストの要素を追加する	aSet.update(iterable)
option: オレンジレッド色を使う	color = 'orangered'
option: ライトグレー色を使用する	color = 'lightgray'
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
データフレームのリストカラムの要約統計量を計算する	df[aList].describe()
作画に使うフォントを指定する	sns.set(font=フォント名)
tanの逆数	math.atan(x)
プロット中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
ダークオーキッド色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
TSVファイルから文字化けしないようにカンマ区切りのファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
リストとリストについて散布図を描いて、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
正接の逆数を求める	math.atan(x)
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
等量でデータ列をビン数nとして分割する	pd.qcut(ds, n)
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
散布図をロイヤルブルー色として描画する	plt.scatter(データ列x, データ列y, color='royalblue')
リストを三つ並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
option: セパレータを改行にする	sep = '\n'
▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
ファイルパスを追加モードとしてオープンする]	open(filepath, mode='a')
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
option: ライトグレーを使う	color = 'lightgray'
散布図をゴーストホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
ファイルにxを文字列に変換して書き込む	f.write(str(x))
option: グラフの種類を破線に指定する	linestyle = 'dashed'
文字列をASCIIコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
乱数で要素を埋めた配列	np.random.random(N)
散布図の四角印を赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
option: ミディアムパープル色を使う	color = 'mediumpurple'
散布図のマーカーの大きさをnにする	plt.scatter(データ列x, データ列y, s=n)
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
データフレームのNaNを平均値で埋める	df.fillna(df.mean())
数式の変数を数値で置き換える	e.subs(z, e2)
文字列が文字列より辞書順で後か調べる	s > s2
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
ラインの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
二つの浮動小数点数が十分に近い	math.isclose(x, x2)
最初の部分文字列で文字列を二分する	s.partition(sub)
データフレームのカラムをヒストグラムで描画する	plt.hist(df[column])
因子分析を行う	model = sklearn.decomposition.PCA(n_components=n)
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
オプションで、標準出力を使う	file = sys.stdout
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
疑似乱数を正規分布で生成する	random.normalvariate(mu=0.5, sigma=0.2)
半透明の一点鎖線として線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
2を底とする実数の対数	math.log2(x)
列'A'と列'B'をキーとして２つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
数列の折れ線グラフをプロットし、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
散布図を赤いバツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
折れ線グラフをナバホホワイト色として描画する	plt.plot(データ列x, データ列y, color='navajowhite')
列でデータフレームを並べ直して、下位n件を取り出す	df.sort_values(columns).tail(n)
option: マーカーを星に変更する	marker = '*'
データフレームの指定された列を配列に変換する	df[column].values
環境がWindowsか調べる	sys.platform.startswith('win32')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームを散布図で可視化し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: フォントの色をライトスカイブルーに設定する	color = 'lightskyblue'
濃いシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームの最後	df.tail()
option: マルーン色を使う	color = 'maroon'
データフレームを各列と列の組み合わせ毎に分類して平均値を求める	df.groupby([column, column2], as_index=False).mean()
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
線グラフの色をダークスレートブルーにする	plt.plot(データ列x, データ列y, color='darkslateblue')
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
直前の値でカラムの欠損値を置換する	ds.fillna(method='ffill')
ティール色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
π	math.pi
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
ラベンダーブラッシュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
UTF8でファイルをオープンする]	open(filepath, encoding='utf-8')
option: 色をフクシアに設定する	color = 'fuchsia'
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
数列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
棒プロットの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームを関数の値でまとめたグループを使う	df.groupby(関数)
option: グラフの色をシルバーに設定する	color = 'silver'
option: グラフの色を青緑に変更する	color = 'turquoise'
データ列の推移を赤い一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
グラフで使うフォントを指定する	sns.set(font=フォント名)
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
整数nのビット長	n.bit_length()
ふたつの集合の差	aSet.difference(aSet2)
ベクトルを平坦にする	aArray.flatten()
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
二つの集合の共通要素のみにする	aSet.intersection_update(aSet2)
option: 文字コードをSJISに設定する	encoding = 'shift_jis'
データフレームを列によって集約してそれぞれのグループ毎の最大値を求める	df.groupby(column).max()
option: スチールブルー色を使う	color = 'steelblue'
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
option: フォントの色をダークターコイズに設定する	color = 'darkturquoise'
２つのデータフレームを横方向に一つにする	pd.concat([df, df2], axis=1)
青い破線でリストの変遷をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
棒グラフを小麦色色として描画する	plt.bar(データ列x, データ列y, color='wheat')
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
直後の値でカラムの欠損値を補う	ds.fillna(method='bfill')
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
最大長nのスタックをイテラブルから作る	collections.deque(iterable, maxlen=n)
データフレームを2つの列によってソートする	df.sort_values(by=['A', 'B'])
正規分布を使って疑似乱数を計算する	random.normalvariate(mu=0.5, sigma=0.2)
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
値はセットに含まれる	element in aSet
データフレームの欠損値をxで埋める	df.fillna(x)
組のn番目以降の要素を得る	aTuple[n:]
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
option: アクア色を使う	color = 'aqua'
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
文字列の開始位置番目と終了位置番目の間に部分文字列が存在しない	s.find(sub, start, end) == -1
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
組の総和	sum(aTuple)
箱ひげ図を用いて数列を可視化する	plt.boxplot(データ列)
列によってデータフレームをグループ化して、それぞれのグループ毎の最小値を計算する	df.groupby(column).min()
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
ライムグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='limegreen')
nが1、もしくは2かどうか確認する	n == 1 or n == 2
オリベドラブにヒストグラムの色を設定する	plt.hist(データ列, color='olivedrab')
実数を千の位で四捨五入する	round(x, -3)
データフレームのn行目を落とす	df.drop(n, axis=0)
グラフに格子を入れる	plt.grid(True)
空の多重集合	collections.Counter()
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
点線を用いてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
数を実数で割った余り	x % y
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
折れ線グラフに赤い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
リストの推移を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームを関数によって集約する	df.groupby(関数)
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
ヒストグラムをゴールド色として描画する	plt.hist(データ列, color='gold')
実数を十の位で丸める	round(x, -1)
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
実行中の例外を情報	sys.exc_info()
データ列の欠損値をxに設定する	ds.fillna(x)
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
データ列の中にある文字列と文字列の数を求める	ds.isin([value, value2]).sum()
散布図を描画する	plt.scatter(データ列x, データ列y)
線グラフをライトブルー色として描画する	plt.plot(データ列x, データ列y, color='lightblue')
等量でリストをビン数nでビニングする	pd.qcut(aList, n)
両端キューを空にする	deq.clear()
表を二つの列によって降順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
部分文字列を文字列の右端から取り除く	s.removesuffix(sub)
線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
option: ダークマゼンタ色を使う	color = 'darkmagenta'
タプルの合計値	sum(aTuple)
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
ヒストグラムをカラーマップを使って描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
浮動小数点数の３乗	x ** 3
縦棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
キューの順を右にn個分輪番で回す	deq.rotate(n)
ライムグリーン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
データフレームの中にある日付データと文字列の数を求める	df.isin([value, value2]).sum()
Pandasで、文字列を書式fmtで日付データに変換する	pd.to_datetime(s, format=fmt)
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
列の中にある日付データと文字列の数をカウントする	ds.isin([value, value2]).sum()
ガウス過程を用いてクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
等差数列を配列にする	np.arange(開始値, 終了値, 等差)
データ列の曜日の名前	ds.dt.weekday_name
タプルに別の辞書の項目を加えて、更新する	aDict.update(aDict2)
２つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
列の一意な要素数を確認する	ds.nunique()
カラーバーを横向きでつける	plt.colorbar(orientation='horizontal')
文字列中の部分文字列を新しい文字列に全部置換する	s.replace(sub, newsub)
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
二つのリストの積集合	list(set(aList) & set(aList2))
文字列中にひとつでも非小文字があるかどうか確認する	any(not c.islower() for c in s)
散布図の丸印の色を変える	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='gray')
新しい文字列に文字列中の部分文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
ヒストグラムをミディアムブルー色として描画する	plt.hist(データ列, color='mediumblue')
データフレームの重複する行のみを抽出する	df[df.duplicated(keep=False)]
ミディアムパープル色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
プロットで用いるフォントを指定する	sns.set(font=フォント名)
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
option: フォントの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
縦棒グラフを暗い赤色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
配列の各要素のアダマール積	np.multiply(aArray, aArray2)
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
データフレームを列の値でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
文字列をASCII限定として正規表現で分ける	re.split(pattern, s, flags=re.ASCI)
集合が空か調べる	len(aSet) == 0
nをn2倍にする	n *= n2
縦棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
nがn2と等しいか調べる	n == n2
ベストな位置に凡例を表示する	plt.legend(loc='best')
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
カウンタの項目を増やす	aCounter[element] += 1
ロージーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームのカラムが正規分布からどの程度尖っているか確認する	df[col].skew()
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
折れ線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
折れ線グラフのクロスマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='gray')
データ列の推移を青い実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
PLSで回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
リストを紫色化する	f'\033[35m{value}\033[0m'
部分文字列を文字列の先頭から探す	s.find(sub)
データフレームの列の種類	df.info()
ブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
ハニーデュー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
シーケンスから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
ダークカーキにヒストグラムの色を指定する	plt.hist(データ列, color='darkkhaki')
パールゴールデンロッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
リストの要素を昇順にソートする	sorted(aList, reverse=True)
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
option: グラフの色をパープルに設定する	color = 'purple'
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
集合からエラーなく要素を取り除く	aSet.discard(element)
option: グラフの種類を破線に設定する	linestyle = 'dashed'
リストの値を除く	aList.clear()
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
データ列の一意な値を見る	ds.unique()
既存のファイルパスをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
マッピングの項目名を列挙する	aDict.keys()
ターコイズ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
折れ線グラフのポイントマーカーを青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
行列の分散	np.var(aArray)
分割数nで配列をビン分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
辞書からキーで指定された値をポップする	aDict.pop(key)
折れ線グラフのダイアモンド印を黒色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
データフレームを各列毎に集約して、列の最小値を求める	df.groupby(column)[column2].min()
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
ケンドールでデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
データ列とリストの散布図に赤い左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
両端キューのstart番目からend番目の要素	collections.deque(itertools.islice(deq, start, end))
スタックの左側	deq[0]
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
オブジェクトはリストクラスか調べる	isinstance(obj, list)
文字列の中のASCII限定として正規表現による全マッチを使う	re.findall(pattern, s, flags=re.ASCI)
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
文字列中にひとつでも非アルファベットがあるか確認する	any(not c.isalpha() for c in s)
文字列に日本語が使われているかどうか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
列を用いてデータフレームを整列し、NaNを先頭にする	df.sort_values(by=column, na_position='first')
補足の場所を(x,y)に設定する	plt.legend(loc=(x, y))
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
イテラブルとリストについての散布図にrgbのバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフの菱形マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
データフレームをグループ化し、列に対し個数を求める	df.groupby(column)[column2].count()
整数nが集合のいづれかかどうか	n in aSet
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
rgbのクロスマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
グラフの背景色を暗くする	sns.set(style='darkgrid')
イテラブルから最大長nの両端キューを作る	collections.deque(iterable, maxlen=n)
組の合計値	sum(aTuple)
辞書にキーワード引数で更新する	aDict.update(**kwargs)
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
ミディアムシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
リストと配列について散布図を描画し、、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
２つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
option: エンコーディングを文字コードtextにする	encoding = text
データフレームのカテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
データフレームの中で何行、重複するか見る	df.duplicated().sum()
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
折れ線グラフに黒いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
配列の行ごとの標準偏差	np.std(aArray, axis=1)
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
x座標の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
ミントクリーム色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
数式を因数分解する	sympy.factor(e)
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
データフレームのカラムをにバイオリン図として見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
有理数の分母	q.denominator
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
option: 追加モードに変更する	mode = 'a'
nかけるn2	n * n2
ファイルをUTF8で開く]	open(filepath, encoding='utf-8')
データフレームのリスト列のpercent分位数を算出する	df[aList].quantile(percent/100)
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
折れ線グラフの印を丸印にする	plt.plot(データ列x, データ列y, marker='o')
タプルに別の辞書の項目を更新する	aDict.update(aDict2)
辞書のコピーを作る	aDict.copy()
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
ヒストグラムをクリムゾン色として描画する	plt.hist(データ列, color='crimson')
辞書順で文字列が文字列より後	s > s2
半透明の一点鎖線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データ列の標本標準偏差	ds.std()
値が集合の要素でない	element not in aSet
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
データフレームをJSONLファイルに保存する	df.to_csv(filename)
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
データ列を百の位で丸めて整数型にする	ds.round(-2).astype(int)
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
グラフで使う横軸に軸ラベルを付ける	plt.xlabel('x軸ラベル')
散布図の印を三角印にする	plt.scatter(データ列x, データ列y, marker='^')
option: グラフの色をスラグレーに設定する	color = 'slategray'
option: グラフの色を青紫に設定する	color = 'violet'
データフレームをグループ化しそれぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
option: グラフの色をパパイヤウィップに変更する	color = 'papayawhip'
表データの指定された列を配列にする	df[column].values
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
黒い下三角マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
オブジェクトが無限に繰り返すイテラブルを得る	itertools.repeat(element)
データフレームを丸める	df.round()
列から両端キューを作成する	collections.deque(iterable)
option: オーキッドにグラフの色を指定する	color = 'orchid'
正規表現で文字列を分割する	re.split(pattern, s)
文字列は漢字	('\u4E00' <= ch <= '\u9FD0')
マップのコピーを作る	dict(aDict)
黄色いグリッド線を引く	plt.grid(color='y')
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
三自然数の最小公倍数	math.lcm(n, n2, n3)
折れ線グラフに黒い上三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフの下三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
オレンジ色でヒストグラムを描画する	plt.hist(データ列, color='orange')
データフレームを複数の列を用いて小さい順にソートする	df.sort_values(by=column, ascending=True)
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
実数を浮動小数点数で割って切り捨てる	x // y
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
符号付きでnをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
日付時刻データの曜日を整数で使う	aDatetime.weekday()
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
改行なしに文字列を表示する	print(value, end='')
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
データ列の相関係数と有意確率を求める	scipy.stats.pearsonr(データ列, データ列2)
線グラフの色を白に変更する	plt.plot(データ列x, データ列y, color='white')
option: レモンシフォン色を使う	color = 'lemonchiffon'
グラフで使用する縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
カラムの中に文字列と文字列がいくつ含まれるか数える	ds.isin([value, value2]).sum()
線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
データフレームの中で何行、重複するか調べる	df.duplicated().sum()
パレットトルコイズ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
日付時刻データが何秒か知る	aDatetime.second
カラムの種類	df.info()
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
文字列はリストの要素でないかテストする	element not in aList
option: カデットブルー色を使う	color = 'cadetblue'
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
シャルトリューズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
データフレームの列の値がx以下の行を抽出する	df[df[column] <= x]
散布図をフローラルホワイト色として描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
日付時刻データを文字列を使ってフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
シーケンスをイミュータブルなセットに変換する	frozenset(iterable)
データフレームを各列と列の組み合わせ毎にグループ化して個数を求める	df.groupby([column, column2], as_index=False).count()
線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
シーケンスと列をつなぐ	itertools.chain(iterable, iterable2)
option: インディアンレッド色を使用する	color = 'indianred'
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
エポック秒から日付時刻にする	datetime.datetime.fromtimestamp(timestamp)
t-SNEで多次元データを淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
イテラブルと数列の散布図を描き、、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
双方向キューの最大長	deq.maxlen
集合が空でないか調べる	len(aSet) != 0
シーケンスに列を続けたイテラブルを求める	itertools.chain(iterable, iterable2)
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
実部と虚部から複素数	complex(x, y)
配列をイテラブルから作る	np.array(iterable)
option: 濃い青色を使用する	color = 'darkblue'
プロットのx軸を対数に変更する	plt.xscale('log')
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
文字列中に非空白が含まれるかどうか調べる	any(not c.isspace() for c in s)
option: ライムを使用する	color = 'lime'
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
行列の行ごとの平均	np.mean(aArray, axis=1)
データフレームの各カテゴリごとの散布図に線形回帰を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
シーケンスからデックを用意する	collections.deque(iterable)
データ列の変化を半透明の実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームの列と列の相関行列スピアマン相関係数として	df[[column, column2]].corr(method='spearman')
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
文字コードを文字に変換する	chr(unicode)
ラベンダーブラッシュにヒストグラムの色を指定する	plt.hist(データ列, color='lavenderblush')
option: 文字列の示すエンコーディングを使用する	encoding = s
線グラフをタン色として描画する	plt.plot(データ列x, データ列y, color='tan')
データ列をn個にビン分割する	pd.cut(ds, n)
データフレームの内の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
タイムスタンプデータにn分を加える	aDatetime + datetime.timedelta(minutes=n)
散布図をターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='turquoise')
行列の最小値を求める	np.min(aArray)
データフレームのカラムの日	df[col].dt.day
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームを表示するとき最大行数を増やす	pd.set_option('display.max_rows', n)
レベッカパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
二つの集合のいずれか一方だけの集合を求める	aSet.symmetric_difference(aSet2)
上三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
文字列タブ区切りのファイルからCSVファイルをn番目のカラムを行として読み込む	pd.read_csv(filename, index_col=n)
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
option: 色をネイビーに変更する	color = 'navy'
データ列を丸めて、整数型にする	ds.round().astype(int)
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
データフレームから指定した列を抽出する	df[[column]]
線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
実数の正接	math.tan(x)
丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o')
文字列から部分文字列を全て取り除く	s.replace(sub, '')
縦棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
リストとデータ列の散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
横棒グラフを青緑色として描画する	plt.barh(データ列x, データ列y, color='teal')
nからn2までの整数リストを作る	list(range(n, n2+1))
文字列はタイトルケースか調べる	s.istitle()
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
辞書のキー一覧	list(aDict)
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
option: ダークグレー色を使う	color = 'darkgray'
option: オーキッドに色を設定する	color = 'orchid'
赤い実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データフレームの列と列の相関行列ケンドール相関係数でを求める	df[[column, column2]].corr(method='kendall')
カラムのNaNを最大値に設定する	ds.fillna(ds.max())
ストリームからn文字読み込む	f.read(n)
整数nの十六進文字列を求める	hex(n)[2:]
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
option: グラフの線種を一点鎖線に設定する	linestyle = 'dashbot'
勾配ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
option: グラフの色をオリーブに指定する	color = 'olive'
ふたつの集合の交わり	aSet.intersection(aSet2)
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
文字列中の部分文字列の出現をカウントする	s.count(sub)
文字列で区切って2つのリストをプリントする	print(value, value2, sep=s)
option: フォントの色をライトサーモンに設定する	color = 'lightsalmon'
データ列をインポートする	import pandas as pd
カテゴリ別で色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
option: ローングリーンにグラフの色を変更する	color = 'lawngreen'
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
破壊的に重複をデータフレームから削除する	df.drop_duplicates(inplace=True)
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
n行をデータフレームからランダムに抽出する	df.sample(n)
カンマで文字列を区切って、列挙する	s.split(',')
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
タプルの末尾を取り除く	aTuple[:-1]
データフレームの列を欠損値も加えてダミー変数にする	pd.get_dummies(df[column], dummy_na=True)
データフレームのカラムを散布図でグラフ化する	sns.scatterplot(data=df, x='列名', y='列名')
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームをグループ化し、列に対し標準偏差を計算する	df.groupby(column)[column2].std()
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データフレームのデータ型リストを使う	df.dtypes
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
整数nは配列のどれかか調べる	n in aArray
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
横棒グラフをコーンフラワーブルー色を使って描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
option: グラフの種類を点線に指定する	linestyle = 'dotted'
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
データフレームを列によってソートする	df.sort_values(by=column)
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
文字列が全てアスキー文字か調べる	s.isascii()
二つのデータフレームを横向きに一つにする	pd.concat([df, df2], axis=1)
逆順のキュー	reversed(deq)
三つ並べて数列を柱状図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
散布図に黒い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
ダークゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
散布図のダイアモンドマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
ゴールド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
リストとデータ列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
ダークシアグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
白色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
モデルを当てはめる	model.fit(説明変数, 目的変数)
暗い赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
実数が負の数か調べる	x < 0
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: タブをセパレータで使う	sep = '\t'
要素∈セット	element in aSet
本日が金曜日かどうか確認する	datetime.datetime.today().weekday() == 4
データフレームの欠損値を前の行の値に指定する	df.fillna(method='ffill')
線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: ダークオレンジ色を用いる	color = 'darkorange'
日付時刻データのタイムゾーン	aDatetime.timetz()
オレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
option: オリーブ色を使う	color = 'olive'
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
データフレームを'A'列と'B'列によって並べて、更新する	df.sort_values(by=['A', 'B'], inplace=True)
option: グラフの色を紺碧に設定する	color = 'azure'
option: フォントの色をカーキに指定する	color = 'khaki'
空白	' '
データ列とリストについて散布図を描画して、右三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
option: レモンシフォンを使う	color = 'lemonchiffon'
リストの要素を逆順にする	aList[::-1]
折れ線グラフの色をライムグリーンにセットする	plt.plot(データ列x, データ列y, color='limegreen')
option: 昇順にする	ascending = True
リストの最後の要素	aList[-1]
赤い四角マーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
アクア色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
データフレームのリストカラムのNaNを平均値に指定する	df[aList].fillna(df[aList].mean())
散布図の大バツマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
文字列の右側からタブを除く	s.rstrip('\t')
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
文字列はひらがなか調べる	('ぁ' <= ch <= 'ん')
モジュールを検索するパス	sys.path
ふたつの辞書を合体する	aDict | aDict2
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
散布図のダイアモンド印の色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
文字コードtextでファイルをオープンする]	open(filepath, encoding=text)
列をキーにして二つのデータフレームを右ジョインする	pd.merge(df, df2, on=column, how='right')
散布図の左三角印を黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームの中にいくつ文字列があるか求める	df.isin([value]).sum()
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのリスト列を丸めて、整数型にする	df[aList].round().astype(int)
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
日付時刻データが日曜日かどうか	aDatetime.weekday() == 6
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
散布図に△マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
nのn2乗	n ** n2
文字列中の平仮名を片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
二つの文字列が等しいか	s == s2
実数は無限大かどうか調べる	math.isinf(x)
rgbのポイントマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
画面にグラフの用途を変更する	sns.set(context='notebook')
自然数の順列の総数を求める	math.perm(n)
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
スラグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
変数がマイナス無限大に近づく時数値の極限値を求める	sympy.limit(e, z, -oo)
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
option: 線の種類を点線に設定する	linestyle = 'dotted'
データフレームのカラムをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: 丸印を使う	marker = 'o'
シーケンスを文字列リストに変換して、部分文字列で一つにする	sub.join(map(str, iterable))
データラベルの位置を(x,y)に設定する	plt.legend(loc=(x, y))
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
散布図にバツマーカーを使用する	plt.scatter(データ列x, データ列y, marker='x')
データフレームを列でまとめた表	df.groupby(column)
ヒストグラムをミディアムブルー色を使って描画する	plt.hist(データ列, color='mediumblue')
データ列の推移を赤い一点鎖線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
現在が土曜日	datetime.datetime.today().weekday() == 5
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
データフレームのリストカラムの50パーセンタイル	df[aList].median()
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
多次元データをSVDでパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
ダークグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
八進文字列をバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
散布図に赤い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
赤色で数値を出力する	print(f'\033[31m{value}\033[0m')
散布図を星印で描画する	plt.scatter(データ列x, データ列y, marker='*')
配列の行ごとの平均	np.mean(aArray, axis=1)
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategrey')
グラフで用いる縦軸にラベルを設定する	plt.ylabel('y軸ラベル')
option: 色をスカイブルーに変更する	color = 'skyblue'
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームのそれぞれのグループ毎の平均値	df.groupby(column).mean()
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
クロスマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
カウンタから最も頻出の項目の件数	aCounter.most_common()[1]
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
文字列の接頭辞が部分文字列か	s.startswith(sub)
データフレームのリスト列の中に文字列と文字列が含まれる	df[aList].isin([value, value2])
整数nがセットのひとつか調べる	n in aSet
バリーウッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
三数の最大値	max(x, y, z)
各列毎にデータフレームをグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
コマンドフラグの状態を知る	sys.flags
データ列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームから列を３つ選択する	df[[column, column2, column3]]
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
データフレームの欠損値がある箇所に色を付ける	df.style.highlight_null()
option: 箱ひげ図に平均を加える	showmeans = False
横方向に2つのデータフレームをマージする	pd.merge(df, df2)
散布図をオリーブ色を使って描画する	plt.scatter(データ列x, データ列y, color='olive')
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
日付時刻データが木曜日	aDatetime.weekday() == 3
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか存在するかカウントする	s.count(sub, start, end)
カウンタのそれぞれの文字列を、そのカウントだけ列挙する	aCounter.elements()
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
両端キューのn番目に値を挿入する	deq.insert(n, element)
文字列の右側から空白を除く	s.rstrip(' ')
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
option: ダークオリーブグリーンを使用する	color = 'darkolivegreen'
ファイルパスを追加モードで開いて]fとする	f = open(filepath, mode='a')
カウンタ同士でユニオン演算する	aCounter | aCounter2
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
ファイル全体を行分割して読み込む	f.readlines()
配列とリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームを各列と列の組み合わせ毎に分類して最小値を求める	df.groupby([column, column2], as_index=False).min()
両端キューの大きさを算出する	len(deq)
データフレームから破壊的に重複を消す	df.drop_duplicates(inplace=True)
多次元データを多次元尺度構成法として淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
列'A'と列'B'をキーにして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
行列の列ごとの最小値	np.min(aArray, axis=0)
データフレームを各列と列の組み合わせ毎にグループ化し、、合計を算出する	df.groupby([column, column2], as_index=False).sum()
カラムの中に文字列と文字列がいくつ含まれるか求める	ds.isin([value, value2]).sum()
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームのリスト列の欠損値をモードに設定する	df[aList].fillna(df[aList].mode().iloc[0])
データフレームを各列と列の組み合わせ毎に集約して、分散を求める	df.groupby([column, column2], as_index=False).var()
マッピングのキーを列挙する	aDict.keys()
option: ダイアモンドマーカーを用いる	marker = 'D'
文字列をトリムする	s.strip()
option: 印をポイントに変更する	marker = '.'
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
フローラルホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
ヒストグラムの色をフクシアにセットする	plt.hist(データ列, color='fuchsia')
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
文字列中の小文字を大文字に変換する	s.upper()
option: ライトグレー色を用いる	color = 'lightgrey'
配列の平均	np.mean(aArray)
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
数値の変数に数値を代入する	e.subs(z, e2)
実数を三乗する	x ** 3
散布図にrgbのダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
真スーパーセット	aSet > aSet2
文字列リストにリストを変換して、'改行で結合する	'\n'.join(map(str, iterable))
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategray')
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
グラフに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
日付時刻データを数値にする	aDatetime.timestamp()
モデルの平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
文字列を区切りによって区切って列挙する	s.split(sep)
散布図の印を青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
データフレームの列の値がx未満のデータを抽出する	df[df[column] < x]
Pandasで、UNIX秒の文字列からdatetime64型に変換する	pd.to_datetime(s, unit='s', utc=True)
コマンドラインフラグの状態	sys.flags
散布図をミディアムオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
option: フォントの色をバリーウッドに変更する	color = 'burlywood'
option: アイボリーを使う	color = 'ivory'
0からnまでの整数列を作る	list(range(n+1))
散布図の右三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
列を用いてによって大きい順にデータフレームを並べ直す	df.sort_values(by=column, ascending=False)
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
要素をセットに追加する	aSet.add(element)
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
データフレームを関数によってグループ化し基本統計量を計算する	df.groupby(関数).describe()
ランダムに重複ありでデータフレームからn行をサンプリングする	df.sample(n, replace=True)
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
整数のGCDを算出する	math.gcd(n, n2)
カウンタからマッピングを減らす	aCounter.subtract(aDict)
グラフの背景色を暗くする	sns.set(style='darkgrid')
ダークグリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
項目名で指定された項目を辞書からポップする	aDict.pop(key)
ランダムにn行をデータフレームから選択する	df.sample(n)
リストの先頭のn要素を取り除く	aList[n:]
ロバストな単回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
行列から重複を除いた配列を作る	np.unique(aArray)
カーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
データフレームのカラムが正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
カウンタの最頻出な文字列を算出する	aCounter.most_common()[0]
ふたつの集合の差集合	aSet.difference(aSet2)
要素がセットに含まれるか	element in aSet
option: ミディアムターコイズにグラフの色を設定する	color = 'mediumturquoise'
ヒストグラムをバリーウッド色を使って描画する	plt.hist(データ列, color='burlywood')
平均付き箱ヒゲ図を描画する	plt.boxplot(データ列, showmeans=True)
データフレームを'A'列の値によってグループ化し、記述統計量を求める	df.groupby('A').describe()
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
リストと数列についての散布図にrgbの丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
折れ線グラフをゴールド色を用いて描画する	plt.plot(データ列x, データ列y, color='gold')
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームを使用する	import pandas as pd
作画のx軸とy軸の比率を同じする	plt.axis('equals')
オールドレース色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
折れ線グラフのスタイルを点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
クラス分類をK最近傍法でする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
nがn2で割り切れる	n % n2 == 0
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
黒い▽マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
カラムの欠損値を最小値に指定する	ds.fillna(ds.min())
option: 分割記号を使わない	sep = ''
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
散布図のダイアモンド印の太さを変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
折れ線グラフをマゼンタ色を使って描画する	plt.plot(データ列x, データ列y, color='magenta')
option: ネイビーを使う	color = 'navy'
option: アイボリーにグラフの色を設定する	color = 'ivory'
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
エクセルファイルファイルを読み込む	pd.read_excel(filename)
文字列リストをsepを区切りとしてつなげる	sep.join(aStringList)
線を破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
nをn2で割った結果の切り上げを求める	(n + n2 - 1) // n2
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
nがn2未満、またはn3以上かどうか調べる	n < n2 or n >= n3
option: 先頭の行をヘッダに変更する	header = 0
option: 降順にする	ascending = False
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
行列の行列式を求める	np.linalg.det(aArray)
データフレームの列がxでないデータをフィルタする	df[df[column] == x]
データフレームの空文字をNaNに変換しドロップする	df.replace('', np.nan).dropna()
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
文字列が十進数字かどうか調べる	s.isdecimal()
nがn2で割り切れないかテストする	n % n2 != 0
横棒プロットを描いて、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
ファイルパスから拡張子付きのファイル名を使う	os.path.basename(filepath)
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
浮動小数点数を複素数に変換する	complex(x)
オレンジ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
右三角印を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
データフレームを小さい順に列によってソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
散布図を黄緑色として描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
文字列内にひとつでも数字がある	any(c.isdigit() for c in s)
option: グラフの色をスラグレーに設定する	color = 'slategrey'
トマトにヒストグラムの色を設定する	plt.hist(データ列, color='tomato')
最大長nの両端キューを作る	collections.deque(maxlen=n)
黒い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
FIXME	np.linalg.eig(aArray)
ゼロ埋めされた行列	np.zeros(行数, 列数)
データフレームの先頭n行	df.head(n)
後の行の値でデータフレームのカラムのNaNを埋める	df[col].fillna(method='bfill')
データフレームのリスト列が正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
折れ線グラフの色をサドルブラウンに変更する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームのリストカラムのNaNを直後の値で埋める	df[aList].fillna(method='bfill')
配列の最小値	np.min(aArray)
データフレームを列で小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを二つの列の値でグループ化し、要約統計量を計算する	df.groupby(['A', 'B']).describe()
JSONファイルのファイルを辞書に変換する	json.load(fin)
整数nをバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
option: ▽印を描画する	marker = 'v'
option: 耐火レンガ色を使う	color = 'firebrick'
プロットの大きさを指定する	plt.figure(figsize=(横幅, 高さ))
データフレームのリストカラムの中に文字列と文字列がある	df[aList].isin([value, value2])
ガンマ関数の絶対値に自然対数をとった値を求める	math.lgamma(x)
折れ線グラフをローングリーン色として描画する	plt.plot(データ列x, データ列y, color='lawngreen')
option: n番目の列をインデックスに指定する	index_col = n
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
要素が集合のメンバーか調べる	element in aSet
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
二つ並べて配列をヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
フローラルホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
自然数個のものからk個取り出したときの並べ方の総数を計算する	math.perm(n, k)
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
にバイオリン図でデータフレームを図示する	sns.violinplot(x='カテゴリ列', y='列', data=df)
Pandasで、エポック秒の文字列からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
ベクトル間のユークリッド距離を計算する	math.dist(point, point2)
グラフの縦横を変更する	plt.figure(figsize=(横幅, 高さ))
データ列を三つ並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
列を2回あわせた直積を得る	itertools.product(iterable, repeat=2)
散布図を三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='^')
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
折れ線グラフに▲印を使う	plt.plot(データ列x, データ列y, marker='^')
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
option: ベクトルのデータ型を指定する	dtype = np.int32
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
データ列の秒	ds.dt.second
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
黒い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='k')
小数点数は無限大か	math.isinf(x)
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
青緑色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
マッピングの項目名とその値を列挙する	aDict.items()
真部分集合か調べる	aSet < aSet2
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
データフレームをカンマ区切りのファイルから読む	pd.read_csv(filename, sep=',')
青い点線を用いてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームのリストカラムを百の位で丸めて、整数にする	df[aList].round(-2).astype(int)
列を文字列に変換して連結する	''.join(map(str, iterable))
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
リストをダミー変数に変換する	pd.get_dummies(iterable)
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームの値を正規表現patternでreplに置き換える	df.replace(pattern, repl, regex=True)
option: ダークシアグリーンにフォントの色をする	color = 'darkseagreen'
データフレームの列と列の相関行列スピアマン相関係数を使って	df[[column, column2]].corr(method='spearman')
文字列は全て十進数字	s.isdecimal()
プラットホームがウィンドウズかどうか確認する	sys.platform.startswith('win32')
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
再帰の上限を上げる	sys.setrecursionlimit(1000000)
データフレームを配列に変換する	df.values
文字列内に数字が含まれるかどうか	any(c.isdigit() for c in s)
データフレームから最初の列を除く	df[df.columns[1:]]
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
option: 書き込みモードを使用する	mode = 'w'
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
nがn2よりも大きい	n > n2
棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
配列とリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフを青紫色を使って描画する	plt.plot(データ列x, データ列y, color='violet')
nがn2の倍数でないか調べる	n % n2 != 0
2つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
option: ライトブルー色を使う	color = 'lightblue'
リッジ回帰とロッソ回帰の組み合わせた分析を行う	model = sklearn.linear_model.ElasticNet()
カウンタのそれぞれの要素を、その出現回数だけ列挙する	aCounter.elements()
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
横棒グラフをチョコレート色として描画する	plt.barh(データ列x, データ列y, color='chocolate')
パレットトルコイズ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
折れ線グラフをオレンジ色を用いて描画する	plt.plot(データ列x, データ列y, color='orange')
データフレームを各列と列の組み合わせ毎にグループ化して標準偏差を算出する	df.groupby([column, column2], as_index=False).std()
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
option: ダークゴールデンロッドを使う	color = 'darkgoldenrod'
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
プロットにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
散布図をオリーブ色を用いて描画する	plt.scatter(データ列x, データ列y, color='olive')
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
折れ線グラフの右三角マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
データフレームを表示するとき表示できる列数の最大値をnにセットする	pd.set_option('display.max_columns', n)
横棒グラフをシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='cyan')
浮動小数点数の双曲線正弦の逆数を求める	math.asinh(x)
実数の双曲線正接の逆数	math.atanh(x)
ヒストグラムをディープスカイブルー色を使って描画する	plt.hist(データ列, color='deepskyblue')
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
横棒グラフを小麦色色として描画する	plt.barh(データ列x, データ列y, color='wheat')
カウンタのキーとカウントを列挙する	aCounter.items()
折れ線グラフの色をスノーにセットする	plt.plot(データ列x, データ列y, color='snow')
ふたつの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
文字列中にひとつでも非空白が含まれる	any(not c.isspace() for c in s)
赤いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
ふたつの集合がセットと交わりを持たない	aSet.isdisjoint(aSet2)
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
列をキーにして二つのデータフレームを外部ジョインする	pd.merge(df, df2, on=column, how='outer')
両端キュー中の要素のインデックスを使う	deq.index(element)
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
部分文字列が文字列の開始位置番目からと終了位置までの間にない	s.find(sub, start, end) == -1
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
オブジェクトがリストクラスのインスタンス	isinstance(obj, list)
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
データフレームのカラムのタイムゾーンを東京に設定する	df[col].tz_convert('Asia/Tokyo')
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
アルファベットの小文字列	string.ascii_lowercase
出力ストリームを全部読み込む	f.read()
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
線グラフの色をミディアムシアグリーンに指定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
文字列をコロンを使って区切り、列挙する	s.split(':')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
青い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
option: ミディアムシアグリーン色を用いる	color = 'mediumseagreen'
option: フォントの色をシャルトリューズに変更する	color = 'chartreuse'
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
データフレームの中のカラムと列に重複があれば削除する	df.drop_duplicates(subset=column)
リストが空か調べる	len(aList) == 0
SJISで文字列をバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
イテラブルから最大長nの両端キューを新規生成する	collections.deque(iterable, maxlen=n)
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
文字列は文字列より辞書順で前	s < s2
データフレームを各列毎に分類し、、文字列という名前のグループを使う	df.groupby(column).get_group(s)
データフレームの欠損値を50パーセンタイルで埋める	df.fillna(df.median())
データ列の欠損値を50パーセンタイルで埋める	ds.fillna(ds.median())
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
シーケンスとイテラブルをチェインする	itertools.chain(iterable, iterable2)
散布図をレベッカパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
ファイルにxを文字列に変換して書く	f.write(str(x))
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
ダイアモンドマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D')
イテラブルから両端キューを用意する	collections.deque(iterable)
データフレームのリスト列の中に日付データと文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
文字列を下線付きで表示できる文字列に変換する	f'\033[4m{value}\033[0m'
t-SNEを行う	model = sklearn.manifold.TSNE(n_components=n)
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
データフレームの相関行列を求める	df.corr()
辞書のキーとその値をペアとして取り出す	aDict.items()
nが負の数かどうか調べる	n < 0
折れ線グラフをミッドナイトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データ列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
黒いグリッド線を引く	plt.grid(color='k')
異なる列をキーにして２つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
配列をリストから作る	np.array(aList)
データフレームを複数の列を用いて並べ直して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
option: レベッカパープルを使う	color = 'rebeccapurple'
Pandasで、データフレームのcollをPandasの日付型にする	pd.to_datetime(df[col])
option: ダークオレンジにグラフの色を設定する	color = 'darkorange'
フローラルホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
配列を四分位数で分割する	pd.qcut(aArray, 4)
option: ミディアムアクアマリン色を用いる	color = 'mediumaquamarine'
集合から要素を取り除く	aSet.remove(element)
線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
ファイルパスをオープンして]バイナリストリームを見る	open(filepath, mode='rb')
縦棒グラフをクリムゾン色として描画する	plt.bar(データ列x, データ列y, color='crimson')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
棒グラフをアンティークホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
ダークレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
データフレームの重複していない行のみを取り出す	df[not df.duplicated(keep=False)]
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
散布図をピーチパフ色を用いて描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
データフレームの列を100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
リストの各値を関数に適用した結果でソートする	sorted(aList, key=func)
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
サポートベクターマシンで回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
デピンク色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームのリストカラムの中の欠損値の合計を求める	df[aList].isna().sum()
サンディーブラウン色を用いてヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
赤い右三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
赤い下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
青い三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
リストのn番目からn2番目までの部分	aList[n:n2]
x座標の最大・最小を変更する	plt.xlim(最小値, 最大値)
半透明の点線として折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
黒い星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
双方向キューの左側に要素を入れる	deq.appendleft(element)
文字列が全て空白文字からなるか調べる	s.isspace()
マルーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
データ列の折れ線グラフを描画して、カラーコードで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
チョコレート色として散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
ミスティローズ色でヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
散布図の右三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
カウンタをリストとして更新する	aCounter.update(iterable)
二つの集合の積集合	aSet.intersection(aSet2)
辞書のコピーを作成する	dict(aDict)
セットの全ての要素が別のセットに含まれる	aSet.issubset(aSet2)
リストとリストについて散布図を描いてマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
リストが空	len(aList) == 0
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
データフレームのリストカラムを千の位で丸めて整数型にする	df[aList].round(-3).astype(int)
グラフの横軸の軸ラベルを設定する	plt.xlabel('x軸ラベル')
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
タプルを引数として展開して表示する	print(*aTuple, sep=',')
ブルーバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
オブジェクトの属性の値を変更する	setattr(obj, プロパティ名, 値)
イテラブルとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
自然数の階乗	math.factorial(n)
ASCIIコードエスケープで文字列をバイト列にする	s.encode(encoding='unicode_escape')
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
ランダム性を追加したランダムフォレストで回帰分析をする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
折れ線グラフをミントクリーム色を用いて描画する	plt.plot(データ列x, データ列y, color='mintcream')
リストを配列に変換する	np.array(aList)
大量のデータ列が正規分布か調べる	scipy.stats.kstest(データ列, 'norm')
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ヒストグラムを青紫色として描画する	plt.hist(データ列, color='violet')
行列をベースに全要素が0の配列	np.zeros_like(aArray)
ナバホホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
データフレームのリストカラムの中にあるの合計をカウントする	df[aList].isin([value]).sum()
円グラフを時計回りに描く	plt.pie(データ列, startangle=90, counterclock=False)
線グラフの色をライトゴールドロディイエローにセットする	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
タプルをnから順序付けする	enumerate(aTuple, start=n)
ベクトルの列ごとの合計	np.sum(aArray, axis=0)
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
浮動小数点数を十六進表記の文字列に変換する	x.hex()
リストとリストについての散布図に赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
タプルの合計値を算出する	sum(aTuple)
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
横軸にラベルをつける	plt.xlabel('x軸ラベル')
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
両端キューの最初に値を付け加える	deq.appendleft(element)
option: モカシン色を使う	color = 'moccasin'
散布図に△マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
predicateFuncが真となるシーケンスの部分	itertools.takewhile(predicateFunc, iterable)
ヒストグラムをブラック色を使って描画する	plt.hist(データ列, color='black')
折れ線グラフの印をクロスにする	plt.plot(データ列x, データ列y, marker='x')
黒いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
option: フォントの色をミディアムターコイズに設定する	color = 'mediumturquoise'
文字列を改行で区切る	s.splitlines()
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
データ列の各データが何回出現するか確認する	ds.value_counts()
三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^')
option: グラフの色をスチールブルーに指定する	color = 'steelblue'
ヒストグラムをミディアムスプリンググリーン色として描画する	plt.hist(データ列, color='mediumspringgreen')
棒グラフをオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orchid')
タプルの値を昇順にソートする	sorted(aTuple, reverse=False)
パターンにASCII限定として文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
スタックの中に数値が含まれてるか調べる	element in deq
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
ライトゴールドロディイエロー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
整数nの2進文字列	bin(n)[2:]
カウンタをリストに変換する	list(aCounter)
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
文字列内にひとつでもアルファベットが含まれるかどうか	any(c.isalpha() for c in s)
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
ファイルパスのセパレータ記号	os.sep
ケンドールの相関係数を計算する	scipy.stats.kendalltau(データ列, データ列2)
オプションで、標準出力を用いる	file = sys.stdout
カラムの欠損値を直後の値にする	ds.fillna(method='bfill')
決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
折れ線グラフをターコイズ色を使って描画する	plt.plot(データ列x, データ列y, color='turquoise')
y軸の目盛を対数に変更する	plt.yscale('log')
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
文字化けしないようにTSVを読む	pd.read_csv(filename, encoding='shift_jis')
ヒストグラムの色をネイビーにする	plt.hist(データ列, color='navy')
アルファベットの小文字を全部見る	string.ascii_lowercase
サイコロ	random.randint(1, 6)
日付時刻データの秒	aDatetime.second
ファイルパスからファイル名を見る	os.path.basename(filepath)
散布図に黒い下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='k')
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
リストと配列について散布図を描画し、、クロスマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図をイエローグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
option: グラフの色をフクシアに設定する	color = 'fuchsia'
ヒストグラムの色をダークバイオレットに指定する	plt.hist(データ列, color='darkviolet')
線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='grey')
option: フォントの色をピーチパフにセットする	color = 'peachpuff'
パラメータが無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
xの小数点以下'4'桁までプリントする	print(':.4f'.format(x))
赤い実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
データ列を縦軸、配列を横軸として大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
色付きの一点鎖線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
セットからエラーなく要素を除く	aSet.discard(element)
空のリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
文字列の中でASCII限定として正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
丸マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
タプルをn回、加える	aTuple * n
データフレームの中の欠損値がある行を削除する	df.dropna()
グラフを描画する準備をする	import matplotlib.pyplot as plt
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
タイムスタンプデータが日付時刻データより後ろか	aDatetime > aDatetime2
データ列とリストの散布図に黒い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
サンディーブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
折れ線グラフにデータラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
縦棒グラフを描画して、棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
option: カラムの名前をnamesに変更する	header = names
データフレームを'A'列で並べる	df.sort_values(by='A')
整数nを十六進表現にする	hex(n)
折れ線グラフのクロスマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
縦棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
青紫色で散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
まとめてデータフレームの列の名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
タプルをソートしてJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
x座標の目盛を非表示にする	plt.xticks([])
イテラブル自身を2回あわせた直積	itertools.product(iterable, repeat=2)
option: ベージュ色を用いる	color = 'beige'
整数nを二進数表現に変換する	bin(n)
データフレームを列によって大きい順に破壊的に並べる	df.sort_values(by=column, ascending=False, inplace=True)
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームの中に文字列がある	df.isin([value])
変数を太字にする	f'\033[1m{value}\033[0m'
表データを使う	import pandas as pd
タプル内の要素が全て真か確認する	all(aTuple)
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
散布図に黒いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
カウンタからイテラブルをカウントして減らす	aCounter.subtract(iterable)
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
昇順にデータフレームを列によって破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
ペールグリーン色を使ってヒストグラムを描画する	plt.hist(データ列, color='palegreen')
ヒストグラムの色をシャルトリューズにセットする	plt.hist(データ列, color='chartreuse')
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
ガウス過程分類器を作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
文字列内にひとつでも空白があるか調べる	any(c.isspace() for c in s)
枠なしのデータラベルをグラフの中に付ける	plt.legend(frameon=False)
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
散布図をダイアモンドマーカーでプロットする	plt.plot(データ列x, データ列y, marker='D')
データフレームの中の列をn個にビニングする	pd.cut(df[col], n)
文字列の末尾	s[-1]
ファイルをデータフレームとして読み込む	pd.read_excel(filename)
データフレームのリスト列の欠損値を最小値で置換する	df[aList].fillna(df[aList].min())
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
ヒストグラムの線種を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
日付データが月曜日か	aDate.weekday() == 0
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
折れ線グラフの色をパールバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='palevioletred')
数列の変遷を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
散布図の▲印を青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ファイルパスを書き込みできるようにオープンする]	open(filepath, mode='w')
インディゴ色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
整数乱数の行列	np.random.randint(開始値, 終了値, N)
リストのn番目以降の部分を取り出す	aList[n:]
組とタプルを連結する	aTuple + aTuple2
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
option: 左三角マーカーを使う	marker = '<'
綺麗なグラフを使う準備をする	import seaborn as sns
option: グラフの色をレベッカパープルに変更する	color = 'rebeccapurple'
ブラック色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
エンコーディングを知る	sys.getdefaultencoding()
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
文字列の両端から部分文字列を除く	s.strip(sub)
ミディアムバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumvioletred')
データフレームの中央値	df.median()
行列の差を求める	aArray - aArray2
相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
散布図にバツマーカーを用いる	plt.plot(データ列x, データ列y, marker='x')
option: 書き込みモードに設定する	mode = 'w'
８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int8)
ダークオリーブグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
option: フォレストグリーンを使う	color = 'forestgreen'
線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
現在の時刻	datetime.date.today().hour
線グラフを淡いピンク色色を用いて描画する	plt.plot(データ列x, データ列y, color='lightpink')
縦軸だけ目盛り線	plt.grid(axis='y')
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
グレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
Pandasでデータフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
データフレームのリストカラムの最頻値	df[aList].mode()
セットから別のセットとの共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
アンサンブル学習として回帰分析を行う	sklearn.ensemble.VotingRegressor()
データ列と配列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
実数以下の最大の整数を求める	math.floor(x)
文字列が識別子名かどうか判定する	s.isidentifier()
最後の項目をタプルからポップする	aDict.popitem()
整数nの二進表現	bin(n)
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
横棒グラフをパパイヤウィップ色を使って描画する	plt.barh(データ列x, データ列y, color='papayawhip')
option: ダークバイオレットを使用する	color = 'darkviolet'
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
リストのオブジェクトが最初に見つかるインデックス	aList.index(element)
option: ライトシアン色を使用する	color = 'lightcyan'
棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
option: グラフの色をタンに設定する	color = 'tan'
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
ミディアムアクアマリン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
ゴールデンロッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
数式の因数分解を行う	sympy.factor(e)
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
シーケンスの要素を全てセットに追加する	aSet.update(iterable)
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
option: 線幅を3.0ポイントに設定する	linewidth = 3.0
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
大量のデータ列が正規分布に従うかどうか仮説検定する	scipy.stats.kstest(データ列, 'norm')
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
オプションでファイルを使う	file = sys.open(filename, 'w')
CSV形式としてデータフレームをJSONLファイルに保存する	df.to_csv(filename)
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
カウンタの項目数	len(aCounter)
タプルの長さを調べる	len(aTuple)
変数について数式をn階微分する	sympy.diff(e, z, n)
タプルをnからナンバリングする	enumerate(aTuple, start=n)
チョコレート色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
散布図をラベンダーブラッシュ色を使って描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
散布図に赤いダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='r')
等差数列から整数乱数を生成する	random.randrange(start, end, step)
イテラブルをワンホット・ベクトルに変換する	pd.get_dummies(iterable)
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
文字列中の部分文字列の出現回数	s.count(sub)
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
nにn2をかける	n * n2
黒い星マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームを1000の位で丸める	df.round(-3)
rgbに横棒グラフの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
全要素を0で初期化した行列を作る	np.zeros(要素数)
赤い菱形マーカーをイテラブルとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='r')
回帰モデルの訓練を開始する	model.fit(説明変数, 目的変数)
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
列とイテラブルの直積を得る	itertools.product(iterable, iterable2)
自然数の並べ方の総数	math.perm(n)
マルーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
配列を中央値でビン分割する	pd.qcut(aArray, 2)
散布図にrgbの▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
データフレームのデータ型の一覧	df.dtypes
option: ロージーブラウンにグラフの色を設定する	color = 'rosybrown'
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
データ列の値が未入力値かどうか調べる	ds.isna()
オプションで、出力先を標準出力に指定する	file = sys.stdout
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
行列を転置する	aArray.T
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
数列の推移を青い一点鎖線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
日付時刻データをISO8601形式の文字列に変換する	aDatetime.isoformat()
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームの数値を四捨五入する	df.round()
円グラフの百分率を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
文字列の変数名を数式に変換する	sympy.Symbol(s)
データフレームの列の値が欠損値か調べる	df[col].isna()
ヒストグラムの色をゴールドに指定する	plt.hist(データ列, color='gold')
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
データ列をPandasの日付型に変換する	pd.to_datetime(ds)
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
列をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, on=column, how='left')
option: ダークマゼンタにフォントの色を設定する	color = 'darkmagenta'
option: 決定木の最大深さを設定する	maxdepth = n
データ列の75パーセンタイル	ds.quantile(0.75)
データ列の各データ値の出現回数	ds.value_counts()
文字列を変数にして、変数にする	z = sympy.Symbol(s)
文字列全体を大文字・小文字を無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
文字列リストをひとつの文字列にする	''.join(map(str, iterable))
option: フォントの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
サイコロと同じ乱数	random.randint(1, 6)
データフレームのn番目の行を抽出する	df.loc[n]
データフレームを各列毎にグループ分けして、列の平均値を求める	df.groupby(column)[column2].mean()
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
データフレームの列がxであるデータを取り出す	df[df[column] == x]
散布図にダイアモンド印を使う	plt.scatter(データ列x, データ列y, marker='D')
日付時刻データの分数を使う	aDatetime.minute
option: オリベドラブを使う	color = 'olivedrab'
追加できるように既存のファイルを文字コードtextとしてオープンする]	open(filepath, mode='a', encoding=text)
データフレームのn行以降抽出する	df[n:]
option: 文字列をセパレータで用いる	sep = s
ファイルから拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
2進数文字列を整数に変換する	int(s, 2)
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ランダムにデータフレームからn行を重複ありでサンプリングする	df.sample(n, replace=True)
オブジェクトが文字列クラスか調べる	isinstance(obj, str)
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
実数の二乗を計算する	x ** 2
実数の仮数部	math.frexp(x)[0]
データフレームのカラムが何時か確認する	df[col].dt.hour
横棒グラフをアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='aquamarine')
データ列の空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
option: ライトグレー色を用いる	color = 'lightgray'
ベクトル間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
文字列を走査しパターンにマッチするか見る	re.search(pattern, s)
符号なし８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
散布図のクロスマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
nが3の倍数か調べる	n % 3 == 0
option: グラフの色をターコイズに設定する	color = 'turquoise'
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
キューを空にする	deq.clear()
文字列が平仮名かどうか調べる	('ぁ' <= ch <= 'ん')
部分文字列が文字列の終了位置より前に含まれる	s.find(sub, 0, end) != -1
小数点数がNaNか	math.isnan(x)
option: 右三角マーカーを用いる	marker = '>'
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
option: 左三角マーカーを描画する	marker = '<'
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
実数とyの斜辺	math.hypot(x, y)
オブジェクトの属性の値を値にする	setattr(obj, プロパティ名, 値)
散布図をポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームがどの程度分散しているか見る	df.var()
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
一方に含まれ他方に含まれない集合を使う	aSet.difference(aSet2)
データフレームを列の値ごとにグループ化して列挙する	[(name, group) for name, group in df.groupby(column)]
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
散布図をミディアムパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: フォントの色をダークグリーンに変更する	color = 'darkgreen'
文字列をシアンでプリントできる文字列にする	f'\033[36m{value}\033[0m'
数列とリストの散布図を描き、、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
関数の値によってデータフレームを集計する	df.groupby(関数)
小数点数の余弦の逆数を算出する	math.acos(x)
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
データフレームの列をドロップして、入れ替える	df.drop(column, axis=1, inplace=True)
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
スピアマンの相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
パステル調にカラーパレットをプロットの描画で使用する	sns.set(pallete='pastel')
数式の変数にnを代入する	e.subs(z, n)
カテゴリ別で色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
ダークサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
散布図を四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムを描き、、区間数を指定する	plt.hist(データ列, bins=区関数)
ファイルをオープンする]	open(filepath)
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
縦棒グラフをライトイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightyellow')
option: マーカーの太さを変更する	markeredgewidth = 2.5
データフレームのカラムの未入力値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
上位集合か確認する	aSet.issuperset(aSet2)
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
縦棒グラフをレモンシフォン色として描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
データフレームをグループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフをゲインズボロ色を使って描画する	plt.plot(データ列x, データ列y, color='gainsboro')
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
実数を浮動小数点数で	x // y
本日の日数を使う	datetime.datetime.today().day
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
折れ線グラフの色をパパイヤウィップに変更する	plt.plot(データ列x, データ列y, color='papayawhip')
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
列を四分位数でビン分割する	pd.qcut(ds, 4)
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
コーンフラワーブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
タブを使う	'\t'
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
ファイルを開いて]追加ストリームを使う	open(filepath, mode='a')
データフレームのリスト列の欠損値を平均で埋める	df[aList].fillna(df[aList].mean())
カウンタのそれぞれの項目を、その回数だけ列挙する	aCounter.elements()
トマト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
option: マーカーの色をブラックにする	markerfacecolor = 'black'
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
データフレームを各列毎にグループ化して、文字列というグループの個数を計算する	df.groupby(column).size()[s]
折れ線グラフに星印を加える	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
配列の和を求める	aArray + aArray2
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
数値を黄色にする	f'\033[33m{value}\033[0m'
オブジェクトが名前付きタプル	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データフレームをまとめて小数点以下n桁で四捨五入する	df.round(n)
タプルを引数として展開して表示する	print(*aTuple)
棒グラフをダークオリーブグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データフレームのカラムを散布図で描画し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
折れ線グラフの丸印の線幅を変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
折れ線グラフを青い一点鎖線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
実数を実数で除算する	x / y
ファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
深紅色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
大文字・小文字を無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
データ列の欠損値を直後の値で補う	ds.fillna(method='bfill')
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
文字列内にひとつでも大文字が含まれる	any(c.isupper() for c in s)
option: インディアンレッド色を用いる	color = 'indianred'
リストとリストについて散布図を描いて、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
オレンジにヒストグラムの色をセットする	plt.hist(データ列, color='orange')
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
無限の数列	itertools.count()
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
ポイントマーカーを用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
option: エンコーディングをBOM付きに指定する	encoding = 'utf_8_sig'
文字列が組の要素でないか	element not in aTuple
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
nプラスn2を求める	n + n2
option: グラフを一点鎖線に指定する	linestyle = 'dashbot'
データ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
浮動小数点数のn乗の実数剰余	pow(x, n, y)
データフレームの列がリストに含まれるデータを抽出する	df[df[column].isin(aList)]
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
リストとリストの散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
小数点以下の表示精度をする	pd.set_option('precision', n)
黒い右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ダークグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
黄緑色として散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
カラムの文字列を未入力値に変換する	ds.replace(s, np.nan)
整数個のものからk個取り出したときの並べ方の総数を求める	math.perm(n, k)
オリベドラブ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
aListn番目から要素をポップする	aList.pop(n)
ミディアムスプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
各列毎にデータフレームをグループ化して、列の最大値を算出する	df.groupby(column)[column2].max()
折れ線グラフを破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
オブジェクトがフィールドを持つか	hasattr(obj, プロパティ名)
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
リストの末尾を除く	aList[:-1]
線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
データフレームの列を1000の位で四捨五入する	df[col].round(-3)
option: フォントの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
二つの列でデータフレームをまとめたグループ	df.groupby(['A', 'B'])
イテラブルと列の直積	itertools.product(iterable, iterable2)
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
文字列を走査し、正規表現に複数行対応としてマッチするか調べる	re.search(pattern, s, flags=re.MULTILINE)
浮動小数点数の正弦の逆数	math.asin(x)
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
リストを太字にする	f'\033[1m{value}\033[0m'
黒い下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
グラフの描画で色差別なくパレットを使う	sns.set(pallete='colorblind')
非大文字が文字列中にあるか	any(not c.isupper() for c in s)
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームのカラムの欠損値を平均に設定する	df[col].fillna(df[col].mean())
配列と数列について散布図を描き、その大きさをnにセットする	plt.scatter(データ列x, データ列y, s=n)
クラス分類の予測精度をヒートマップで確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
JSONファイルのfをデータに変換する	json.load(fin)
イテラブルとシーケンスをペアのリストにする	itertools.zip_longest(iterable, iterable2)
深紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
二つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
数式の展開を行う	sympy.expand(e)
ミディアムスレートブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: ミディアムアクアマリンにフォントの色を設定する	color = 'mediumaquamarine'
データフレームを十の位で丸めて整数にする	df.round(-1).astype(int)
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
nがn2以上か調べる	n >= n2
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ヒストグラムを点線で描く	plt.hist(データ列, linestyle='dotted')
フローラルホワイト色でヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
リストとイテラブルについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
option: バイオレット色を使う	color = 'violet'
ロイヤルブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
辞書を浅く複製する	dict(aDict)
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
チョコレート色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
option: フォントの色をゴーストホワイトに指定する	color = 'ghostwhite'
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
option: エラーを無視するように設定する	errors = 'ignore'
マッピングに要素を項目名として加える	aDict[key] = element
両端キューが空でないか調べる	len(deq) != 0
option: マーカーの色を赤にする	markerfacecolor = 'red'
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
option: オリベドラブにフォントの色を設定する	color = 'olivedrab'
データフレームの値がNaN	df.isna()
空白が文字列内に含まれるか確認する	any(c.isspace() for c in s)
ValueMapでデータフレームのリストカラムの値を一度に置き換える	df[aList].replace(ValueMap)
データフレームを各列と列の組み合わせ毎にグループ化して、合計を算出する	df.groupby([column, column2], as_index=False).sum()
option: リネン色を用いる	color = 'linen'
n2がn以上、かつn3以下	n <= n2 and n2 <= n3
三変数の最大値	max(x, y, z)
数列とリストについての散布図にrgbのダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
３数の最小値	min(x, y, z)
データフレームの重複した行をマスクする	df.duplicated()
option: フクシアにグラフの色を設定する	color = 'fuchsia'
疑似乱数を得る	random.random()
整数nを半分にする	n //= 2
バリーウッド色でヒストグラムを描画する	plt.hist(データ列, color='burlywood')
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
データフレームの列がxより小さい行を取り出す	df[df[column] < x]
データフレームの重複していない行だけ	df[not df.duplicated(keep=False)]
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームのpercent分位数	df.quantile(percent/100)
列の欠損値を第二四分位数に設定する	ds.fillna(ds.median())
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
乱数平均値と標準偏差からを生成する	random.normalvariate(mu=0.5, sigma=0.2)
整数nの八進数リテラルを使う	oct(n)
プロットで使うx軸の軸名を設定する	plt.xlabel('x軸ラベル')
実数の正接の逆数を求める	math.atan(x)
リストをソートする	sorted(aList)
ヒストグラムを一点鎖線を用いて描画する	plt.hist(データ列, linestyle='dashbot')
ダークマゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
option: シルバーにフォントの色をする	color = 'silver'
データフレームのリストカラムの各列間の相関係数	df[aList].corr()
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
タプルをnから順番付けする	enumerate(aTuple, start=n)
データ列の欠損値をxにする	ds.fillna(x)
オブジェクトのプロパティを消す	delattr(obj, プロパティ名)
処理中の例外を情報	sys.exc_info()
JSONLファイルにBOMを付けてデータフレームを保存する	df.to_csv(filename, encoding='utf_8_sig')
空集合を生成する	set()
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
option: フォントの色をパープルに指定する	color = 'purple'
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
棒プロットの幅を変更する	plt.bar(ラベル列, データ列, width=0.5)
文字列の末尾から空白を取り除く	s.rstrip(' ')
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
option: ダークオレンジ色を使う	color = 'darkorange'
データフレームを100の位で丸める	df.round(-2)
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
option: グレー色を使う	color = 'gray'
データフレームの列の値がリストに含まれる行を選択する	df[df[column].isin(aList)]
数値の平方根を求める	sympy.sqrt(e)
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
データフレームの標本標準偏差	df.std()
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
コギーくんを使いたい	import kogi
配列と配列についての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
日付時刻データをタプルに変換する	aDatetime.timetuple()
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
リストをビン数nとして分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
ヒストグラムをコーンズシルク色を使って描画する	plt.hist(データ列, color='cornsilk')
数列と数列の散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームから列を二つ選択する	df[[column, column2]]
縦軸のラベルをuntitledに指定する	plt.ylabel('y軸ラベル')
散布図に赤い▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
折れ線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームのカラムを型に変換する	df[col] = df[col].astype(ty)
縦棒グラフをダークオレンジ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkorange')
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
実数のアークコサイン	math.acos(x)
重複ありでデータフレームからn行をランダムにサンプリングする	df.sample(n, replace=True)
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
シーケンスを2回あわせた直積	itertools.product(iterable, repeat=2)
現在の分数	datetime.date.today().minute
文字列がn回繰り返す列を求める	itertools.repeat(element, n)
数列とリストの散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
リストとリストの散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
部分文字列が部分文字列で始まるかどうか調べる	s.startswith(sub)
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
スノー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
数値を太文字でプリントできる文字列にする	f'\033[1m{value}\033[0m'
ひとつでもアルファベットが文字列内にある	any(c.isalpha() for c in s)
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
option: 色をライトシアンに設定する	color = 'lightcyan'
文字列の中で正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s)
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データ列の曜日	ds.dt.weekday_name
option: ネイビー色を使う	color = 'navy'
破線に折れ線グラフの線の種類を変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
縦棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
データ列の文字列を欠損値にする	ds.replace(s, np.nan)
行列の行列式	np.linalg.det(aArray)
カーネル密度推定プロット描画でを用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ふたつのリストの積集合	list(set(aList) & set(aList2))
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
要素が辞書の値として含まれているか調べる	element in aDict.values()
文字列リストに列を変換して、タブで連結する	'\t'.join(map(str, iterable))
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
文字列が全て空白文字からなる	s.isspace()
縦棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
横に並べてヒストグラムを描画する	plt.hist([データ列, データ列], color=['b', 'r'])
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
文字列の中の複数行対応としてパターンによるすべてのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
カウンタ同士で∪	aCounter | aCounter2
パールゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
ダークシアグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
本日の年を使う	datetime.datetime.today().year
二つのオブジェクトが同じ	obj is obj2
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
実数が正かどうか調べる	x > 0
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームを'A'列によってによって破壊的に整列する	df.sort_values(by='A', inplace=True)
ライトグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
スタックのn番目の要素を見る	deq[n]
option: 貝殻色を用いる	color = 'seashell'
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
棒グラフをダークグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkgreen')
今日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
実数を小数点以下で丸める	round(x, n)
option: エンコーディングを文字コードtextに設定する	encoding = text
折れ線グラフを星印で描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームは正規分布からどの程度、尖っているか調べる	df.skew()
茶色色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
データフレームの上n行	df.head(n)
配列の次元数	aArray.ndim
実数のハイパボリック・コサインの逆数を計算する	math.acosh(x)
option: プラム色を用いる	color = 'plum'
文字列の中のケースを無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
カウンタ同士で積集合	aCounter & aCounter2
行列の要素数	aArray.size
option: グラフの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
ふたつの関係が上位集合もしくは等しいか調べる	aSet > aSet2
option: 色をディムグレーに設定する	color = 'dimgray'
ファイルパスをバイナリ書き込みモードでオープンして]fとする	f = open(filepath, mode='wb')
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
ゴーストホワイトにヒストグラムの色を指定する	plt.hist(データ列, color='ghostwhite')
データフレームのカラムが何時か調べる	df[col].dt.hour
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
文字列を両端キューにプッシュする	deq.append(element)
文字列が文字列リストのいづれか調べる	s in aStringList
折れ線グラフのダイアモンド印を青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ファイルパスの拡張子を使う	os.path.splitext(filepath)[1].lstrip('.')
文字列を文字リストに変換する	list(s)
ダークスラテグレー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
グラフの見た目を綺麗にする	import seaborn as sns
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
データフレームの列を並べてボックスチャートにする	plt.boxplot([df['カラム'], df['カラム']])
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
列の欠損値を前の行の値に指定する	ds.fillna(method='ffill')
リストをn回、連結する	aList * n
Pandasでフォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
散布図をベージュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='beige')
セットから別の集合との共通要素を全て除去する	aSet.symmetric_difference_update(aSet2)
ミディアムターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
配列と配列について散布図を描画し、、文字列というデータラベル用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
ヒストグラムの色をパールゴールデンロッドに変更する	plt.hist(データ列, color='palegoldenrod')
右三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
散布図に▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
タイムスタンプデータからn日分、減算する	aDatetime - datetime.timedelta(days=n)
実数のサイン	math.sin(x)
データフレームの列の名前を列挙する	df.columns
整数nの十六進表現	hex(n)
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
色名からカラーコードを求める	matplotlib.colors.cnames[色名]
データフレームの列がx、かつ列がx2であるデータを選択する	df[(df[column] == x) & (df[column2] == x2)]
グラフで使うタイトルを設定する	plt.title('グラフの名称')
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
浮動小数点数を実数で整数除算する	x // y
データフレームの中にいくつ欠損値が存在するか数える	df.isna().sum()
文字列をコロンによって区切って、列挙する	s.split(':')
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
横棒グラフをバリーウッド色として描画する	plt.barh(データ列x, データ列y, color='burlywood')
ゴールド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
改行なしに数値をプリントする	print(value, end='')
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
ふたつのマップを合体する	aDict | aDict2
ダークゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
リッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
エクセルファイルファイルからnというシートを読む	pd.read_excel(filename, sheet_name=n)
データフレームのリスト列の欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
両端キューの値を右にn個分ローテンションする	deq.rotate(n)
データフレームをTSVでJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
データ列の分	ds.dt.minute
rgbの三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
散布図の四角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
回帰分析をパーセプトロンを用いて行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
カテゴリで色分けして、データフレームをに箱ひげ図でグラフ化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
辞書を消去する	aDict.clear()
xが1、もしくは2か調べる	x == 1 or x == 2
クラス分類の適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
空のキュー	collections.deque()
ひとつでも大文字が文字列内にあるか調べる	any(c.isupper() for c in s)
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
データフレームのカラムの欠損値を中央値に指定する	df[col].fillna(df[col].median())
ダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D')
各列毎にデータフレームを集約し、、列の合計を求める	df.groupby(column)[column2].sum()
二つの実行結果を改行せずプリントする	print(value, value2, end='')
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
列'A'と列'B'をキーとして二つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ライトグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
データ列の平均値	ds.mean()
文字列を走査し正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
nまたはn2	n or n2
データ列の変遷を色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
列と列を連結する	itertools.chain(iterable, iterable2)
ファイルパスをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
y座標の表示範囲を変更する	plt.ylim(最小値, 最大値)
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
第二コマンド引数	sys.argv[1]
リストとリストの散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
nがn2より大きいか調べる	n > n2
散布図に黒い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフに左三角印を加える	plt.plot(データ列x, データ列y, marker='<')
データフレームを2つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
インデント幅nで、タプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームの列の平均値	df[col].mean()
フォレストグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
データフレームのNaNが含まれる箇所に	df.style.highlight_null()
本日が火曜日かどうか調べる	datetime.datetime.today().weekday() == 1
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
文字列はタプルに含まれる	element in aTuple
リストを等量でn個にビン分割する	pd.qcut(aList, n)
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
単位正方行列	np.identity(n)
リストと配列の散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームのリストカラムの欠損値を最大値で補う	df[aList].fillna(df[aList].max())
カラムの中の欠損値の合計を数える	ds.isna().sum()
スノー色でヒストグラムを描画する	plt.hist(データ列, color='snow')
線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
ユニークな値を要素とするベクトル	np.unique(aArray)
タプルからキーの値か、もしくは要素を見る	aDict.get(key, element)
option: ピーチパフ色を使う	color = 'peachpuff'
'A'列で小さい順にデータフレームを並べ、、更新する	df.sort_values(by='A', ascending=True, inplace=True)
横棒グラフをディムグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='dimgrey')
空のリスト	[]
線グラフの色をオールドレースに指定する	plt.plot(データ列x, データ列y, color='oldlace')
分子n、分母mの分数を作る	fractions.Fraction(numerator=n, denominator=m)
データフレームを'A'列の値でグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
真部分集合かどうか調べる	aSet < aSet2
ヒストグラムの色をブランチドアーモンドに指定する	plt.hist(データ列, color='blanchedalmond')
データフレームのリスト列の欠損値を第二四分位数に設定する	df[aList].fillna(df[aList].median())
配列と配列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
データフレームのリストカラムの欠損値を最頻値に指定する	df[aList].fillna(df[aList].mode().iloc[0])
横棒グラフを耐火レンガ色として描画する	plt.barh(データ列x, データ列y, color='firebrick')
線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
折れ線グラフをライトシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcyan')
option: namesをカラムの名前に設定する	names = names
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
カウンタ同士で∪演算する	aCounter | aCounter2
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
色付きの点線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
モジュールとして自分自身をを得る	sys.modules[__name__]
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
四角印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
折れ線グラフのクロス印を黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ユーザの入力を整数として受け取る	int(input())
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
マルーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
折れ線グラフの左三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームのカラムの中にいくつ文字列が存在するか求める	df[col].isin([value]).sum()
全要素を０で初期化したブール型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int32)
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
option: スラグレーを用いる	color = 'slategray'
文字列が全てASCII文字	s.isascii()
2次元組をフラット化する	sum(aTuple)
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
ダーク・スラテグレーにヒストグラムの色をセットする	plt.hist(データ列, color='darkslategrey')
ダークシアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ポスターにプロットの使途を設定する	sns.set(context='poster')
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
折れ線グラフの色をオールドレースに変更する	plt.plot(データ列x, データ列y, color='oldlace')
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
棒グラフをパレットトルコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
ミスティローズにヒストグラムの色を変更する	plt.hist(データ列, color='mistyrose')
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
最大値・最小値で整数乱数を求める	random.randint(最小値, 最大値)
サンディーブラウン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
データフレームのカラムの未入力値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
本日は何日か知る	datetime.datetime.today().day
日付時刻データが日付時刻データと同時	aDatetime == aDatetime2
散布図の▲マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
データ列を100の位で丸めて整数型にする	ds.round(-2).astype(int)
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
カテゴリで色分けしてデータフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ロージーブラウン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
カテゴリで色分けして、データフレームをにバイオリン図を用いて可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
ゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='goldenrod')
データフレームの中のカラムを中央値で分割する	pd.qcut(df[col], 2)
散布図にrgbの丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームを列の値によって集約して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
シーグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='seagreen')
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
▽マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v')
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
option: ライトブルーを使う	color = 'lightblue'
データフレームを表示するとき、最大列数を増やす	pd.set_option('display.max_columns', n)
横棒グラフをバイオレット色を用いて描画する	plt.barh(データ列x, データ列y, color='violet')
Pandasで、文字列をフォーマットで日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
データフレームをグループ化して、ヒストグラムを用いて可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
全ての数字	string.digits
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
文字列は全て数値	s.isnumeric()
データ列が何時か見る	ds.dt.hour
ひとつでも小文字が文字列内に含まれる	any(c.islower() for c in s)
データ列の四分位を作図する	plt.boxplot(データ列)
option: インディゴ色を使用する	color = 'indigo'
折れ線グラフを暗い赤色を用いて描画する	plt.plot(データ列x, データ列y, color='darkred')
変数を赤色でプリントする	print(f'\033[31m{value}\033[0m')
グラフの描画で暗く色テーマを使う	sns.set(pallete='dark')
変数について数値をn階微分する	sympy.diff(e, z, n)
データフレームのリストカラムの未入力値をxに設定する	df[aList].fillna(x)
文字列の右側から空白を消す	s.rstrip(' ')
列によってによってデータフレームを破壊的にソートする	df.sort_values(by=column, inplace=True)
ゼロ埋めされた３二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
実数の二乗	x ** 2
日付時刻データが日曜日	aDatetime.weekday() == 6
中央値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].median())
データ列を2つ並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
イテラブルから両端キューを作る	collections.deque(iterable)
数値の変数を数値で置き換える	e.subs(z, e2)
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
文字列をセパレータで区切って文字列リストにする	s.split(sep)
散布図に赤いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
両端キューの値を反転する	deq.reverse()
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
ライトイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
散布図に青い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
K最近傍法で回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
TSVファイルを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
文字列を部分文字列で二分し後半の文字列を使う	s.partition(sub)[-1]
データフレームのリストカラムの欠損値を直前の値で置換する	df[aList].fillna(method='ffill')
線形モデルの係数	model.coef_
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
集合を組に変換する	tuple(aSet)
数列と配列の散布図に赤い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='r')
option: グラフの色をダークゴールデンロッドに指定する	color = 'darkgoldenrod'
プラットホームがウィンドウズかどうか調べる	sys.platform.startswith('win32')
標準出力を用いる	sys.stdout
NULLに等しい値	None
折れ線グラフの色をシルバーに変更する	plt.plot(データ列x, データ列y, color='silver')
リストと配列の散布図をプロットし、、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
文字列全体を複数行対応としてパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
両端キューの先頭	deq[0]
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
ダークサーモンにヒストグラムの色を変更する	plt.hist(データ列, color='darksalmon')
option: アクア色を用いる	color = 'aqua'
ゴールデンロッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
option: ライムにフォントの色を指定する	color = 'lime'
棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
ティール色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
区切りで文字列を区切って、列挙する	s.split(sep)
option: 濃いシアンにグラフの色を設定する	color = 'darkcyan'
文字列が文字列より辞書順で後かどうか	s > s2
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: 改行をセパレータで使う	sep = '\n'
散布図に黒いクロスマーカーを用いる	plt.plot(データ列x, データ列y, marker='x', c='k')
ヒストグラムをオーキッド色を使って描画する	plt.hist(データ列, color='orchid')
小麦色色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
折れ線グラフを半透明の一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
表データを複数の列によってで降順にソートする	df.sort_values(by=column, ascending=False)
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
一点鎖線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
nがn2以下	n <= n2
列のユニークな値を見る	df[col].unique()
option: 真紅色を使う	color = 'crimson'
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
破線としてリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
データフレームの全カラムの相関をグラフ化する	sns.pairplot(df)
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
折れ線グラフの色をダークマゼンタにする	plt.plot(データ列x, データ列y, color='darkmagenta')
グラフのテーマを暗くする	sns.set(pallete='dark')
線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
文字列の接頭辞が部分文字列	s.startswith(sub)
predicateFuncが真となるリストの要素を得る	itertools.takewhile(predicateFunc, iterable)
データ列をビン数nを用いてビン分割する	pd.cut(ds, n)
二つ並べてデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
データ列がどの程度分散しているか確認する	ds.var()
データフレームを表示するとき、小数点以下の表示精度をn桁に減らす	pd.set_option('precision', n)
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
数式を方程式として解く	sympy.solve(e)
ブランチドアーモンド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
ミディアムオーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
日付時刻データをタプルにする	aDatetime.timetuple()
ヒストグラムの色をアクアマリンに変更する	plt.hist(データ列, color='aquamarine')
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
最小値でデータフレームのカラムの未入力値を補う	df[col].fillna(df[col].min())
イテラブルと数列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
スライドにグラフの用途を設定する	sns.set(context='talk')
option: グラフの色を黄色に設定する	color = 'yellow'
ロバスト推定を用いて回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
データフレームを小さい順に'A'列でソートし、、更新する	df.sort_values(by='A', ascending=True, inplace=True)
変数を赤色にする	f'\033[31m{value}\033[0m'
n個に配列をビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
折れ線グラフのマーカーを▼印にする	plt.plot(データ列x, データ列y, marker='v')
option: グラフの色をラベンダーブラッシュにする	color = 'lavenderblush'
散布図のダイアモンドマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
日付時刻データが水曜日か確認する	aDatetime.weekday() == 2
オブジェクトをイテラブルにする	iter(obj)
option: ライトゴールドロディイエロー色を用いる	color = 'lightgoldenrodyellow'
列を出現回数して、カウンタを更新する	aCounter.update(iterable)
散布図をミディアムアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
ヒストグラムの色をミディアムスレートブルーに変更する	plt.hist(データ列, color='mediumslateblue')
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
ダークオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
現在の日付	datetime.date.today()
ベクトルの演算をする	import numpy as np
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
グラフのフォントを日本語表示に変更する	sns.set(font='IPAexGothic')
集合をタプルに変換する	tuple(aSet)
option: グラフの色をタンに指定する	color = 'tan'
option: リネンを使用する	color = 'linen'
キューの長さ	len(deq)
ヒストグラムの線の種類を一点鎖線にセットする	plt.hist(データ列, linestyle='dashbot')
データ列の平均絶対誤差を計算する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
カウンタを辞書に変換する	dict(aCounter)
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
リストをランダムにシャッフルする	random.shuffle(aList)
横方向に３つのデータフレームを合体させる	pd.concat([df, df2, df3], axis=1)
実数で実数を整数除算する	x // y
イテラブルとリストの散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
白いグリッド線を引く	plt.grid(color='w')
列をn個にビン分割する	pd.cut(ds, n)
今日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
線グラフの色を淡い茶色に設定する	plt.plot(データ列x, データ列y, color='tan')
データ列の出現頻度を図示する	plt.hist(データ列)
赤い四角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ゴーストホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
多次元データをMSDを使って淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
自然数最小公倍数を算出する	math.lcm(n, n2)
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
nを切り捨てながらn2分の1にする	n //= n2
淡いピンク色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
option: 茶色にグラフの色を設定する	color = 'brown'
シーケンスにイテラブルを続ける	itertools.chain(iterable, iterable2)
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
数式の微分を求める	sympy.diff(e)
既存の配列を元に全要素が初期値の行列	np.full_like(aArray, 初期値)
データフレームのカラムが何月か調べる	df[col].dt.month
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
文字列を積極的に小文字にする	s.casefold()
option: ミスティローズにグラフの色を設定する	color = 'mistyrose'
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
カラムはどの程度、分散しているか見る	ds.var()
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
グラフの描画で暗く色を使う	sns.set(pallete='dark')
リストから配列を作る	np.array(aList)
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
行列の転置行列	aArray.T
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
データフレームのリストカラムのNaNを平均値に設定する	df[aList].fillna(df[aList].mean())
散布図を三角マーカーで描画する	plt.scatter(データ列x, データ列y, marker='^')
主成分分析を用いて多次元データを淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
縦棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
option: コーンフラワーブルーにグラフの色を指定する	color = 'cornflowerblue'
あらかじめ複数行対応としてパターンをコンパイルする	re.compile(pattern, flag=re.MULTILINE)
タプルの先頭	aTuple[0]
データフレームのカラムの欠損値をxで置換する	df[col].fillna(x)
option: フォントの色をグレーに設定する	color = 'gray'
Pandasでエポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームを複数の列によってで破壊的に整列する	df.sort_values(by=column, inplace=True)
データフレームの列のユニークな値の個数	df[col].nunique()
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
折れ線グラフに黒い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
列から新しい多重集合を新規生成する	collections.Counter(iterable)
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
データフレームをTSVファイルを用いてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
option: アクアマリンにグラフの色を設定する	color = 'aquamarine'
グレー色でヒストグラムを描画する	plt.hist(データ列, color='gray')
カテゴリで色分けして、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
文字列中に非アスキー文字が含まれるか確認する	any(not c.isascii() for c in s)
オブジェクトがリストかタプルか	isinstance(obj, (list)
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
nが無限に続くリスト	itertools.repeat(n)
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
日付データは日付データと同時	aDate == aDate2
データフレームを'A'列と'B'列によってまとめたグループ	df.groupby(['A', 'B'])
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
CSVファイルを読む	pd.read_csv(filename, sep=',')
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
二つの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
データフレームの列の中にいくつ文字列が存在するか数える	df[col].isin([value]).sum()
辞書の項目名を要素にする	aDict[key] = element
散布図を黒い左三角マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
箱ヒゲ図を２つ並べて描画する	plt.boxplot([データ列, データ列])
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
ヒストグラムの色をネイビーに指定する	plt.hist(データ列, color='navy')
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
平均値でデータフレームの欠損値を埋める	df.fillna(df.mean())
データフレームの列をインプレイスで落とす	df.drop(column, axis=1, inplace=True)
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
線グラフの色をトマトに変更する	plt.plot(データ列x, データ列y, color='tomato')
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
文字列を最後の部分文字列で二分し最初の文字列を使う	s.rpartition(sub)[0]
タブ	'\t'
ライトゴールドロディイエロー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
ファイルを全部、読み込む	f.read()
グラフを論文に指定する	sns.set(context='paper')
折れ線グラフに簡単な説明をつける	plt.plot(データ列x, データ列y, label='ラベル')
カーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
データフレームの列とカラムの相関行列ケンドールでを求める	df[[column, column2]].corr(method='kendall')
横棒グラフを描画してバーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
折れ線グラフの色をカーキにセットする	plt.plot(データ列x, データ列y, color='khaki')
データフレームをエクセルファイルでJSONLファイルに書き込む	df.to_excel(filename)
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
リストを配列にする	np.array(aList)
配列とリストについての散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
ダークグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
nが1もしくは2、もしくは3に等しいか	n == 1 or n == 2 or n == 3
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
散布図に丸マーカーを使用する	plt.scatter(データ列x, データ列y, marker='o')
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
文字列を空白を用いて分割して、整数リストに変換する	map(int, s.split())
option: シスルにグラフの色を設定する	color = 'thistle'
２つの数値を改行で区切ってプリントする	print(value, value2, sep='\n')
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
イテラブルからキューを生成する	collections.deque(iterable)
データフレームのリスト列の中にある日付データの数をカウントする	df[aList].isin([value]).sum()
イテラブルをカウンタに変換する	collections.Counter(iterable)
二つの最小値	min(x, y)
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
タイムスタンプデータが何秒か知る	aDatetime.second
データフレームのグループごとの最大値	df.groupby(column).max()
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
文字列を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
データ列をリストを境界値として分割する	pd.cut(ds, aList)
リストから文字列を除く	aList.remove(element)
列をキーにして２つの表を右ジョインする	pd.merge(df, df2, on=column, how='right')
カラムのNaNをxに変更する	ds.fillna(x)
option: セパレータをスラッシュにする	sep = '/'
オブジェクトは浮動小数点数か調べる	isinstance(obj, float)
リストとリストについての散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データフレームの列名一覧で指定されたカラムを削除する	df.drop(columns, axis=1)
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
要素がマッピングの値として含まれているかどうか	element in aDict.values()
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
あらかじめASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
ひとつ飛ばしで組を取り出す	aTuple[::2]
追加できるようにUTF8でファイルをオープンする]	open(filepath, mode='a', encoding='utf-8')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
option: グラフの色を紺に変更する	color = 'darkblue'
データ列の年を求める	ds.dt.year
縦棒グラフをバイオレット色で描画する	plt.bar(データ列x, データ列y, color='violet')
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
データフレームの欠損値を直後の値で置換する	df.fillna(method='bfill')
データフレームのそれぞれのグループ毎の分散を求める	df.groupby(column).var()
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
実数が正の数かどうか確認する	x > 0
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
整数nの十六進文字列	hex(n)[2:]
線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
ヒストグラムの色をグリーンイエローに変更する	plt.hist(データ列, color='greenyellow')
棒グラフをホワイトスモーク色として描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
集合から全要素を取り除く	aSet.clear()
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
データフレームから指定された２つの列のみ抽出する	df[[column, column2]]
最初のカテゴリーを除外してデータフレームの列をベクトルに変換する	pd.get_dummies(df[column], drop_first=True)
JSON形式の文字列をデータにする	json.loads(b.decode('unicode-escape'))
日付時刻データの時間数	aDatetime.hour
実数の複素数	complex(x)
標準出力がパイプかどうか調べる	not sys.stdout.isatty()
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
10を底とする対数を求める	math.log10(x)
データフレームのグループごとの最小値を計算する	df.groupby(column).min()
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
option: グラフの色をバリーウッドに変更する	color = 'burlywood'
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
ピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
折れ線グラフをミディアムシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
数式の平方根を求める	sympy.sqrt(e)
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
データフレームの数値をまとめて丸める	df.round()
文字列中にひとつでも非大文字が含まれる	any(not c.isupper() for c in s)
漢字が文字列に含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
モデルの正確さを計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
いつまでも文字列が繰り返す列	itertools.repeat(element)
アルファベットの小文字を求める	string.ascii_lowercase
目盛り線	plt.grid(linewidth=3.0)
現在が何曜日か知る	datetime.datetime.today().weekday()
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
線グラフの色をスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='springgreen')
1からNまでの配列	np.arange(1, N+1)
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
rgbのポイントマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
列の各値は何回出現するか見る	df[col].value_counts()
ディープスカイブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
n個に等量でリストをビン分割する	pd.qcut(aList, n)
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
折れ線グラフに青いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
Pandasで、データフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col])
散布図でデータフレームの全列を可視化する	sns.pairplot(df)
集合の補集合を使う	aSet.difference(aSet2)
整数nを八進数リテラルに変換する	oct(n)
本日が土曜日	datetime.datetime.today().weekday() == 5
双方向キューの要素を反転する	deq.reverse()
既存のベクトルを元に全要素が1の行列を初期化する	np.ones_like(aArray)
データフレームを列によってソートし、、更新する	df.sort_values(by=column, inplace=True)
タプルの項目数	len(aDict)
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
イテラブルとリストについて散布図を描画して、マーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフをアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='aquamarine')
サーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
リストをn回加える	aList * n
Pandasで、データフレームのカラムをタイムスタンプに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
option: チョコレート色を使用する	color = 'chocolate'
ヒストグラムの色をレモンシフォンにする	plt.hist(データ列, color='lemonchiffon')
散布図の印を赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
カウンタをリセットする	aCounter.clear()
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
第2コマンド引数を調べる	sys.argv[1]
直後の値でデータフレームの列の欠損値を補う	df[col].fillna(method='bfill')
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
ファイルをEUCで書き込みできるように開く]	open(filepath, mode='w', encoding='euc_jp')
データフレームの平均を求める	df.mean()
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
一点鎖線に折れ線グラフを設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
ヒストグラムの範囲を変更する	plt.hist(データ列, range=(start, end))
中央値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].median())
折れ線グラフを濃いシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームの文字列を未入力値に変換する	df.replace(s, np.nan)
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
横棒グラフをシルバー色として描画する	plt.barh(データ列x, データ列y, color='silver')
ミディアムターコイズ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
データフレームを'A'列と'B'列の値によってまとめたグループ	df.groupby(['A', 'B'])
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
データフレームを列でグループ化し、それぞれのグループごとの合計を計算する	df.groupby(column).sum()
option: オーキッド色を使用する	color = 'orchid'
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
データ列の未入力値を直後の値で埋める	ds.fillna(method='bfill')
データフレームのリストカラムを1000の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
プレゼンにプロットの用途を設定する	sns.set(context='talk')
mathモジュールをインポートする	import math
グラフの色を明るくする	sns.set(pallete='bright')
option: ビスクにグラフの色を指定する	color = 'bisque'
option: 暗い赤色を使用する	color = 'darkred'
多次元データを特異値分解としてパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
横棒グラフをロージーブラウン色として描画する	plt.barh(データ列x, データ列y, color='rosybrown')
散布図の左三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
二つのオブジェクトが同一参照か	obj is obj2
グラフにy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
UNIX時間のデータフレームのcollからタイムスタンプ型にする	pd.to_datetime(df[col], unit='s', utc=True)
三つのデータフレームを横方向に一つにする	pd.concat([df, df2, df3], axis=1)
棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
数式の簡略化を行う	sympy.sympify(e)
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
実数の床	math.floor(x)
データフレームを列によってグループ化して、それぞれのグループ毎の合計を計算する	df.groupby(column).sum()
実線にヒストグラムの線の種類を指定する	plt.hist(データ列, linestyle='solid')
option: フォントの色をターコイズに指定する	color = 'turquoise'
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
横棒グラフをグリーンイエロー色として描画する	plt.barh(データ列x, データ列y, color='greenyellow')
日付データにn分分、加える	aDate + datetime.timedelta(minutes=n)
ハッシュ値	hash(x)
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
データフレームの列を正規表現patternで一度にreplに置き換える	df[col].replace(pattern, repl, regex=True)
折れ線グラフの色を真紅に指定する	plt.plot(データ列x, データ列y, color='crimson')
空のチェーンマップ	collections.ChainMap()
データフレームを列の値によってグループ化し基本統計量を計算する	df.groupby(column).describe()
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
キューが空でない	len(deq) != 0
option: ライトスチールブルーに色を設定する	color = 'lightsteelblue'
実数のn乗の浮動小数点数剰余	pow(x, n, y)
縦棒グラフをピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='pink')
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
折れ線グラフの▼印の太さを変える	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
線グラフの色をナバホホワイトに指定する	plt.plot(データ列x, データ列y, color='navajowhite')
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
線グラフの線のスタイルを一点鎖線にセットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: カンマをセパレータで使う	sep = ','
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
データフレームのリストカラムのNaNを中央値に設定する	df[aList].fillna(df[aList].median())
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
横軸の目盛りに文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
ゼロ埋めされた複素数型の行列を作成する	np.zeros(要素数, dtype=bool)
ロバストな重回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
文字列中に部分文字列が含まれるかテストする	sub in s
option: グラフの色をマルーンに変更する	color = 'maroon'
option: バツマーカーを加える	marker = 'x'
リストを中央値でビン分割する	pd.qcut(aList, 2)
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
データフレームの列が文字列で始まらない行を選択する	df[not df[column].str.startswith(s)]
集合に列を追加する	aSet.update(iterable)
多次元データをt-SNEとして淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
配列とリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
マップを浅く複製する	dict(aDict)
散布図に黒い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
option: ダークシアグリーンに色を設定する	color = 'darkseagreen'
ビン数を設定して度数分布図をプロットする	plt.hist(データ列, bins=区関数)
横棒グラフをミディアムスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
グリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
データ列をインポートする	import pandas as pd
縦棒グラフをチョコレート色を使って描画する	plt.bar(データ列x, データ列y, color='chocolate')
折れ線グラフの星マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
折れ線グラフの色をライトスカイブルーに変更する	plt.plot(データ列x, データ列y, color='lightskyblue')
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
偽	False
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
データフレームのリスト列を丸める	df[aList].round()
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
折れ線グラフに青い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームを列によって集計し、それぞれのグループごとの分散を求める	df.groupby(column).var()
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
ライトイエロー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
文字列中の部分文字列を回数を制限して新しい文字列に置き換える	s.replace(sub, newsub, n)
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
PandasでデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col])
option: マーカーを▽に変更する	marker = 'v'
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
option: オーキッド色を使う	color = 'orchid'
nからn2までのstepごとによるスライス	slice(n, n2, step)
文字列がひらがなか	('ぁ' <= ch <= 'ん')
リストとリストの散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
nが何桁か	len(str(n))
ファイルを追加できるように開く]	open(filepath, mode='a')
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
リストの全ての要素をクリアにする	aList.clear()
縦棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
散布図のクロス印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
グラフを画面用に設定する	sns.set(context='notebook')
日付データの日を使う	aDate.day
データフレームから指定された列を抽出する	df[[column]]
option: クロスマーカーを加える	marker = 'x'
横棒グラフをミディアムパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
'A'列の値でデータフレームをグループ化する	df.groupby('A')
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームのグループの最大値	df.groupby(column).max()
option: フォントの色をゲインズボロに設定する	color = 'gainsboro'
本日が水曜日か	datetime.datetime.today().weekday() == 2
データフレームの列が正規表現文字列にマッチする行を取り出す	df[df[column].str.match(s)]
空の回帰木モデルを作成する	model = sklearn.tree.DecisionTreeRegressor()
イテラブルの組み合わせ	itertools.combinations(iterable, n)
シャルトリューズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
空のチェーンマップを準備する	collections.ChainMap()
タプルの長さを見る	len(aTuple)
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
散布図をライトコーラル色として描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
辞書をクリアする	aDict.clear()
カラムの最頻値を求める	ds.mode()
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: バツマーカーを用いる	marker = 'x'
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
xを文字列に変換する	str(x)
ゲインズボロ色としてヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
option: オールドレースにグラフの色を指定する	color = 'oldlace'
要素がマップの値に含まれていない	element not in aDict.values()
エクセルデータファイルからエクセルファイルを読み込む	pd.read_excel(filename)
行列の列ごとの平均値を求める	np.mean(aArray, axis=0)
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
非数を使う	math.nan
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
タプルの中の最大値	max(aTuple)
折れ線グラフの色を青紫に変更する	plt.plot(データ列x, データ列y, color='violet')
グラフの見栄えを良くする	import seaborn as sns
第二引数で指定されたファイルの名前	sys.argv[1]
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
グラフの色をパステル調にする	sns.set(pallete='pastel')
散布図を下三角印で描画する	plt.scatter(データ列x, データ列y, marker='v')
文字列タブ区切りのファイルからCSVファイルをn番目のカラムをインデックスとして読む	pd.read_csv(filename, index_col=n)
配列とリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
option: フォントの色をコーラルに設定する	color = 'coral'
マッピングのキーを要素に変更する	aDict[key] = element
タプルのn番目からn2番目まで	aTuple[n:n2]
データフレームを各カラムと列の組み合わせ毎に分類し、、最大値を求める	df.groupby([column, column2], as_index=False).max()
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
データフレームの列の要約統計量	df[col].describe()
横に並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列])
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
実数の双曲線正弦の逆数を求める	math.asinh(x)
データフレームの列の欠損値を直後の値に設定する	df[col].fillna(method='bfill')
実行環境がMacOSか調べる	sys.platform.startswith('darwin')
option: シルバーにグラフの色を設定する	color = 'silver'
データフレームを列の値ごとにグループ化して、それぞれのグループ毎の合計を計算する	df.groupby(column).sum()
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
イテラブルをセットに変換する	set(iterable)
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
円グラフにラベルを設定する	plt.pie(データ列, startangle=90, labels=ラベル列)
行列の行ごとの最小を使う	np.min(aArray, axis=1)
データ列の中の欠損値の合計を数える	ds.isna().sum()
文字列リストを連結し、ひとつの文字列にする	''.join(map(str, iterable))
ダークブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
コマンドライン引数	sys.argv
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
グラフをプレゼンに指定する	sns.set(context='talk')
散布図をrgbの大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
プロットの用途をポスターに指定する	sns.set(context='poster')
線グラフをオーキッド色として描画する	plt.plot(データ列x, データ列y, color='orchid')
ファイルパスをバイナリ書き込みモードで開く]	open(filepath, mode='wb')
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
nを否定する	not n
nを8進表現にする	oct(n)
データフレームを各列毎に分類して列の合計を求める	df.groupby(column)[column2].sum()
実数のn乗を算出する	pow(x, n)
折れ線グラフをティール色で描画する	plt.plot(データ列x, データ列y, color='teal')
大バツマーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
osモジュールをインポートする	import os
nが2で割り切れるか調べる	n % 2 == 0
ヒストグラムの色をライトスレイグレーにセットする	plt.hist(データ列, color='lightslategray')
文字列を最初の部分文字列で分割した時の前半の文字列	s.partition(sub)[0]
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
データ列の曜日数を見る	ds.dt.dayofweek
UTF8で書き込み用にファイルを開く]	open(filepath, mode='w', encoding='utf-8')
横軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ミディアムブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
タイムスタンプデータの曜日を整数で使う	aDatetime.weekday()
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
ファイルから全てのシートを読む	pd.read_excel(filename, sheet_name=None)
ゴールド色としてヒストグラムを描画する	plt.hist(データ列, color='gold')
データフレームを列でグループ化し、列の要約統計量を算出する	df.groupby(column).describe()[column2]
プロットにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
nまでの奇整数列を作る	list(range(1, n, 2))
リストをnから順番付けする	enumerate(aList, start=n)
データフレームを表示するとき、小数点以下の表示精度を増やす	pd.set_option('precision', n)
option: 色をモカシンに設定する	color = 'moccasin'
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
option: ライトイエローに色を設定する	color = 'lightyellow'
右三角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
日付データをISO形式の文字列に変換する	aDate.isoformat()
レモンシフォン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
空列	[]
折れ線グラフの右三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
文字列の開始位置からと終了位置の範囲に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
ガウス過程を用いてクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
モカシン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
option: ティールを用いる	color = 'teal'
Pandasで、データフレームのカラムをタイムスタンプ型に変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
散布図をペルー色として描画する	plt.scatter(データ列x, データ列y, color='peru')
半透明の点線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ヒストグラムをオレンジ色として描画する	plt.hist(データ列, color='orange')
実数を３乗する	x ** 3
xが1、もしくは2、もしくは3に等しい	x == 1 or x == 2 or x == 3
マップ上でキーが未定義	key not in aDict
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
文字列をカンマで分割し、、列挙する	s.split(',')
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
文字列の最後の文字	s[-1]
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
データフレームを複数の列で昇順に並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データ列と配列について散布図を描いて、マーカーをダイアモンドに指定する	plt.plot(データ列x, データ列y, marker='D')
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
数式を簡略にする	sympy.sympify(e)
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
データフレームを列によって昇順にソートし、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
部分文字列か調べる	sub in s
ピアソンでデータフレームの相関行列を求める	df.corr(method='pearson')
option: ビスク色を用いる	color = 'bisque'
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
折れ線グラフをオリベドラブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
イテラブルとリストの散布図に上三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムの色を赤にセットする	plt.hist(データ列, color='red')
角度のラジアン	math.radians(degree)
赤い左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームのリストカラムの最頻値を求める	df[aList].mode()
書き込み用にファイルをオープンして]fとする	f = open(filepath, mode='w')
浮動小数点数を万の位で丸める	round(x, -4)
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
データフレームを複数の列の値によってグループ化し要約統計量を求める	df.groupby(columns).describe()
標準エラーを得る	sys.stderr
線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
辞書からカウンタを作る	collections.Counter(aDict)
黒い左三角マーカーをリストとリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
option: ミディアムスレートブルー色を用いる	color = 'mediumslateblue'
データフレームを1000の位で丸めて、整数にする	df.round(-3).astype(int)
キーがマップに存在するかどうか調べる	key not in aDict
文字列を走査し正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
データフレームの指定された列を取り出す	df[column]
データフレームの列が文字列で終わる行を選択する	df[df[column].str.endswith(s)]
表データの列がxより小さい行を抽出する	df[df[column] < x]
棒グラフをブラック色として描画する	plt.bar(データ列x, データ列y, color='black')
シーケンスを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
折れ線グラフをペールグリーン色として描画する	plt.plot(データ列x, データ列y, color='palegreen')
データフレーム全体をインデックスによって並べ直す	df.sort_index()
文字列全体を正規表現に複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
折れ線グラフのマーカーを下三角印にする	plt.plot(データ列x, データ列y, marker='v')
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
option: パレットトルコイズを使う	color = 'paleturquoise'
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
配列の列ごとの最小値	np.min(aArray, axis=0)
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
UTF8で文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
option: グリーンにグラフの色を設定する	color = 'green'
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
組の末尾を取り除く	aTuple[:-1]
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
文字列内にひとつでも英数字が含まれる	any(c.isalnum() for c in s)
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
データフレームのインデックスの一覧	df.index
データフレームを列の値によってグループ化して、個数を算出する	df.groupby(column).count()
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
データフレームの列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
データ列のNaNを最小値で補う	ds.fillna(ds.min())
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
ファイルパスを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
配列のデータ型	aArray.dtype()
ライトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
データフレームのリストカラムの欠損値をモードに変更する	df[aList].fillna(df[aList].mode().iloc[0])
リストとリストについてリストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
組をn回、連結する	aTuple * n
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
日付時刻データが土曜日かどうか調べる	aDatetime.weekday() == 5
日付データからn日を減算する	aDate - datetime.timedelta(days=n)
ゲインズボロ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
散布図をディムグレー色として描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
データフレームの全カラムの相関を描画する	sns.pairplot(df)
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
リストにリストを追加して広げる	aList.extend(aList2)
リストとリストについての散布図に赤い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
eの乗数を計算する	math.exp(x)
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
文字列が数字	s.isdigit()
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
データフレームの列の各データが何回出現するか確認する	df[col].value_counts()
整数を実数で除した余り	x % y
線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
データフレームを２つの列でによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
プロットのカラーパレットを暗くする	sns.set(pallete='dark')
option: 色をラベンダーブラッシュに設定する	color = 'lavenderblush'
JSONLファイルにCSVファイルでデータフレームを保存する	df.to_csv(filename)
データフレームを各列と列の組み合わせ毎に分類して、合計を算出する	df.groupby([column, column2], as_index=False).sum()
文字列を全て小文字にする	s.casefold()
コーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
標準入力を使う	sys.stdin
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
折れ線グラフの色を青緑に指定する	plt.plot(データ列x, データ列y, color='turquoise')
二つの集合のユニオン	aSet.union(aSet2)
折れ線グラフを青色として描画する	plt.plot(データ列x, データ列y, color='blue')
カラムをキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
線形回帰分析を行う	model = sklearn.linear_model.LinearRegression()
シスル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
グラフを論文用に設定する	sns.set(context='paper')
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
列をキーにして2つのデータフレームを左ジョインする	pd.merge(df, df2, on=column, how='left')
切片なしの線形モデルを用意する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
散布図をrgbの星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
二つのリストの積集合を求める	list(set(aList) & set(aList2))
折れ線グラフの色をダークシアグリーンに変更する	plt.plot(データ列x, データ列y, color='darkseagreen')
ヒストグラムの色をロイヤルブルーに指定する	plt.hist(データ列, color='royalblue')
配列の行ごとの合計値を使う	np.sum(aArray, axis=1)
プロットを論文用に指定する	sns.set(context='paper')
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
分類結果の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
単位行列	np.eye(行数, 列数)
データ列の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
リストを引数として展開して表示する	print(*aList, sep=',')
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
要素を双方向キューの末尾に追加する	deq.append(element)
タイムスタンプデータをタプルに変換する	aDatetime.timetuple()
カラムの欠損値を直後の値に設定する	ds.fillna(method='bfill')
Pandasで、データ列を日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
イテラブルを累加する	itertools.accumulate(iterable)
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
イテラブルをいつまでも繰り返す	itertools.cycle(iterable)
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
二つの集合のインターセクションのみに更新する	aSet.intersection_update(aSet2)
日付時刻データにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
nが偶数か調べる	n % 2 == 0
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
ヒストグラムをライトスチールブルー色を用いて描画する	plt.hist(データ列, color='lightsteelblue')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
文字列を最後の部分文字列で二分し、後半の文字列を求める	s.rpartition(sub)[-1]
データフレームをに箱ひげ図としてグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: フォントの色をブラウンに設定する	color = 'brown'
option: フォントの色をリネンに変更する	color = 'linen'
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
三変数の最小値	min(x, y, z)
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
カラムの中に文字列と文字列がある	ds.isin([value, value2])
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
フクシア色でヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
データフレームの列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
イテラブルの散布図を描画する	plt.scatter(データ列x, データ列y)
リストを青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
散布図に黒い三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
平均値付きボックスチャートを描く	plt.boxplot(データ列, showmeans=True)
文字列の先頭から部分文字列を探す	s.find(sub)
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
ファイル名がTSVファイルか	filename.endswith('.tsv')
棒グラフをオーキッド色として描画する	plt.bar(データ列x, データ列y, color='orchid')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
option: 色のアルファを設定する	alpha = 0.5
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
xが1、もしくは2かどうか調べる	x == 1 or x == 2
option: 色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
四分位点として標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
データフレームの数値をまとめて整数に丸める	df.round()
配列を等量でビン数nを用いてビン分割する	pd.qcut(aArray, n)
日付時刻データがタイムスタンプデータより後ろ	aDatetime > aDatetime2
折れ線グラフをピーチパフ色として描画する	plt.plot(データ列x, データ列y, color='peachpuff')
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
データ列のどの値が頻出か見る	ds.mode()
TSVファイルからCSVをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
nがn2かどうか	n == n2
方程式として数式を解く	sympy.solve(e)
カテゴリ列で色分けして、データフレームをにバイオリン図として描画する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
読み込みできるようにファイルパスをオープンする]	open(filepath, mode='r')
縦棒グラフをダークシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkcyan')
連立方程式を解く	sympy.solve([e, e2])
ホットピンク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
データ列の欠損値を最頻値で補う	ds.fillna(ds.mode().iloc[0])
散布図に青い▲印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ラベンダーブラッシュ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
データフレームの列の値がx以下の行を取り出す	df[df[column] <= x]
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
深紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
双方向キューをデキューする	deq.popleft()
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
option: グラフの色を紺に設定する	color = 'darkblue'
ミディアムオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
数に実数を加える	x + y
リストと数列についての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのリスト列を100の位で丸めて整数型にする	df[aList].round(-2).astype(int)
日付データの年数を求める	aDate.year
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
最初のプログラムを書く	print('Hello World')
線グラフをカデットブルー色を使って描画する	plt.plot(データ列x, データ列y, color='cadetblue')
カウンタの要素一覧	aCounter.keys()
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
オブジェクトをイテラブルに変換する	iter(obj)
ユニークな値を要素とする配列	np.unique(aArray)
グラフの中に枠なしの補足を入れる	plt.legend(frameon=False)
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
option: 茶色を用いる	color = 'brown'
ValueMapでデータ列の値を一度に置換する	ds.replace(ValueMap)
データフレームを表示するとき、表示可能な最大行数を増やす	pd.set_option('display.max_rows', n)
横軸の目盛を非表示にする	plt.xticks([])
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
散布図を大バツマーカーとして描画する	plt.plot(データ列x, データ列y, marker='X')
散布図を耐火レンガ色として描画する	plt.scatter(データ列x, データ列y, color='firebrick')
データフレームの値は欠損値	df.isna()
インディアンレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
クラスのサブ型	issubclass(サブクラス, クラス)
改行を使う	'\n'
日付時刻データの分を使う	aDatetime.minute
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
空のガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
データフレームのリストカラムのNaNを平均に設定する	df[aList].fillna(df[aList].mean())
データフレームのカラムの中にいくつ欠損値が存在するか数える	df[col].isna().sum()
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
配列を円グラフにする	plt.pie(データ列, startangle=90)
破壊的に列によって昇順にデータフレームを並べる	df.sort_values(by=column, ascending=True, inplace=True)
option: フォントの色をカデットブルーに設定する	color = 'cadetblue'
実数に実数を掛ける	x * y
紺碧色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
option: ディムグレーに色を設定する	color = 'dimgrey'
散布図をフォレストグリーン色として描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
データ列をカテゴリデータに変換する	ds.astype(object)
option: 読み込みモードを使用する	mode = 'r'
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
線グラフのラインスタイルを破線にセットする	plt.plot(データ列x, データ列y, linestyle='dashed')
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
option: バリーウッドにフォントの色を設定する	color = 'burlywood'
多次元データを主成分分析を使って濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
浮動小数点数のn乗	pow(x, n)
文字列の中のASCII限定としてパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.ASCI)
スチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
フクシア色を使ってヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
折れ線グラフを色付きの破線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
分類モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
10を底とする実数の対数	math.log10(x)
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
ファイルを書き込みモードとしてオープンする]	open(filepath, mode='w')
データフレームの列とカラムを落とす	df.drop([column, column2], axis=1)
データフレームを二つの列によって昇順に並べて、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
横棒グラフをブラック色として描画する	plt.barh(データ列x, データ列y, color='black')
文字列の開始位置以降が部分文字列で始まる	s.startswith(sub, start)
rgbの右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
xが真か調べる	bool(x)
折れ線グラフをライトスレイグレー色を使って描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
縦棒グラフをバリーウッド色を使って描画する	plt.bar(データ列x, データ列y, color='burlywood')
日付データが日付データより前かどうか確認する	aDate < aDate2
線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: グラフの色を黄色に変更する	color = 'yellow'
ダーク・スラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
赤い左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
nまでの偶整数列	list(range(2, n, 2))
リストとリストの散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
縦棒グラフをハニーデュー色として描画する	plt.bar(データ列x, データ列y, color='honeydew')
Pandasでデータフレームのカラムを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データフレームから指定された４列を取り出す	df[[column, column2, column3, column4]]
折れ線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
文字列が全て数字かどうか	s.isdigit()
折れ線グラフをホットピンク色を使って描画する	plt.plot(データ列x, データ列y, color='hotpink')
耐火レンガ色でヒストグラムを描画する	plt.hist(データ列, color='firebrick')
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
縦棒グラフをオールドレース色として描画する	plt.bar(データ列x, データ列y, color='oldlace')
丸印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフの色をレモンシフォンにセットする	plt.plot(データ列x, データ列y, color='lemonchiffon')
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
option: 行列のデータ型を指定する	dtype = np.int32
２つのデータフレームを横方向に一つにする	pd.merge(df, df2)
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
散布図をシエナ色として描画する	plt.scatter(データ列x, データ列y, color='sienna')
option: フォントの色をマゼンタに設定する	color = 'magenta'
データ列の歪度	ds.kurt()
データフレームのカラムを1000の位で丸める	df[col].round(-3)
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgrey')
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
リストの長さだけ繰り返す	range(len(aList))
縦棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
折れ線グラフの色を珊瑚に設定する	plt.plot(データ列x, データ列y, color='coral')
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
option: グラフの色を小麦色に設定する	color = 'wheat'
リストとリストについての散布図に黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
グラフのタイトルを指定する	plt.title('グラフの名称')
横棒グラフをペルー色を用いて描画する	plt.barh(データ列x, データ列y, color='peru')
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
散布図に赤い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
カラムの欠損値を50パーセンタイルに設定する	ds.fillna(ds.median())
辞書からカウンタを作成する	collections.Counter(aDict)
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
自然数の最大公約数を計算する	math.gcd(n, n2)
y座標の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
型は名前付きタプルか調べる	issubclass(C, tuple)
ロードされたモジュールの一覧	sys.modules
オプションで出力先をファイルに指定する	file = sys.open(filename, 'w')
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
データ列は正規分布からどの程度歪んでいるか確認する	ds.kurt()
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
マゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
日付時刻データが月曜日か	aDatetime.weekday() == 0
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
option: エンコーディングをEUCに指定する	encoding = 'euc_jp'
リストにオブジェクトを追加する	aList.append(element)
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
ファイルからベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ファイルパスを読み込みモードを用いてオープンして]、fとする	f = open(filepath, mode='r')
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
折れ線グラフの色をタンに指定する	plt.plot(データ列x, データ列y, color='tan')
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
折れ線グラフを青い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
方程式として数値を解く	sympy.solve(e)
オリーブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
散布図をアンティークホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
nをn2分の１にする	n /= n2
混同行列をヒートマップとして確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
スタックの最後に値を追加する	deq.append(element)
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
文字列を最後の部分文字列で二分し前半の文字列を使う	s.rpartition(sub)[0]
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
文字列内にひとつでも数字が含まれるかどうか調べる	any(c.isdigit() for c in s)
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
Pandasでデータフレームのcollの数値時刻から日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
データフレームの行と列を入れ替える	df.T
時計回りに円グラフを描画する	plt.pie(データ列, startangle=90, counterclock=False)
列をイミュータブルな集合に変換する	frozenset(iterable)
行列の差	aArray - aArray2
option: アイボリーにグラフの色を変更する	color = 'ivory'
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
カンマで文字列を分割して文字列リストに変換する	s.split(',')
タプルの中の最小値	min(aTuple)
折れ線グラフの色をサーモンに変更する	plt.plot(データ列x, データ列y, color='salmon')
option: ライトイエローにグラフの色を設定する	color = 'lightyellow'
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
オブジェクトが関数かどうか調べる	callable(obj)
ピーチパフにヒストグラムの色を変更する	plt.hist(データ列, color='peachpuff')
ダークマゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
散布図の印を▽印にする	plt.scatter(データ列x, データ列y, marker='v')
真	True
データフレームの各次元の大きさを見る	df.shape
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームの列名を列から文字列に付け直す	df.rename(columns={column: name})
ゼロ埋めされた配列	np.zeros(要素数)
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
サドルブラウンにヒストグラムの色を指定する	plt.hist(データ列, color='saddlebrown')
データフレームのリストカラムの未入力値を直前の値に指定する	df[aList].fillna(method='ffill')
option: 文字コードを文字列の示すエンコーディングに変更する	encoding = s
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
option: ダークグレーを使う	color = 'darkgray'
文字列の中で複数行対応として正規表現にマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
値を黄色で表示する	print(f'\033[33m{value}\033[0m')
リストと配列についての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
カウンタを用いる	import collections
線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
option: ブール型を使う	dtype = np.int32
部分文字列かテストする	sub in s
リストとリストについて散布図を描画し、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
イテラブルと列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
折れ線グラフのポイントマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
データフレームの正規分布に対する上下広がり	df.skew()
文字コードに対応する文字	chr(unicode)
リストをタプルに変換する	tuple(aList)
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
散布図にポイントマーカーを使用する	plt.scatter(データ列x, データ列y, marker='.')
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データフレームの列がxである行を取り出す	df[df[column] == x]
option: フォントの色をアクアマリンに設定する	color = 'aquamarine'
文字列リストにイテラブルを変換して部分文字列でつなげる	sub.join(map(str, iterable))
データフレームの列の文字列を未入力値に変換する	df[col].replace(s, np.nan)
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
データフレームを表示するとき、小数点以下の表示精度をn桁に変更する	pd.set_option('precision', n)
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
列をキーにしてデータフレームをソートする	df.sort_values(by=column)
xを整数に変換する	int(x)
散布図にダイアモンド印を使用する	plt.scatter(データ列x, データ列y, marker='D')
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
赤い下三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
部分文字列で文字列を二分する	s.partition(sub)
棒グラフをオリベドラブ色として描画する	plt.bar(データ列x, データ列y, color='olivedrab')
n個の要素があるリスト	[element] * n
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームの列が正規表現文字列にマッチするデータを取り出す	df[df[column].str.match(s)]
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
ダークスレートブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
外れ値に強い線形回帰モデルを準備する	model = sklearn.linear_model.HuberRegressor()
回帰分析をアンサンブル学習を使って行う	sklearn.ensemble.VotingRegressor()
両端キューから最初の要素を取り除く	deq.remove(element)
データフレームを二つの列によって集約して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
rgbのポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
実数の指数	math.frexp(x)[1]
ファイルを開き]バイナリ書き込みストリームを使う	open(filepath, mode='wb')
赤い破線としてラインを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
option: スラグレー色を使う	color = 'slategray'
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
文字列の先頭から部分文字列を除去する	s.lstrip(sub)
ディープスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='deepskyblue')
横棒グラフをアクアマリン色を使って描画する	plt.barh(データ列x, データ列y, color='aquamarine')
ゴールド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
棒グラフをローングリーン色として描画する	plt.bar(データ列x, データ列y, color='lawngreen')
要素一つのりスト	[element]
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
n×n2の二次元リストを得る	[[0] * n for _ in range(n2)]
リストとリストの散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
文字列の開始位置以降に部分文字列があるかどうか	s.find(sub, start) != -1
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
文字列の先頭の空白やタブを除く	s.lstrip()
データ列の各データは何回出現するか見る	ds.value_counts()
折れ線グラフに四角マーカーを加える	plt.plot(データ列x, データ列y, marker='s')
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
散布図の四角印の色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
リストとリストについて散布図を描画し、、右三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: 色をミディアムターコイズに設定する	color = 'mediumturquoise'
赤い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='r')
ヒストグラムを白くする	plt.hist(データ列, color='w')
最大値でデータフレームのリストカラムの未入力値を埋める	df[aList].fillna(df[aList].max())
行列の行	aArray[行番号]
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
データ列の欠損値を50パーセンタイルに指定する	ds.fillna(ds.median())
折れ線グラフに黒い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ハニーデュー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
文字列リストをsepを区切りとして一つにする	sep.join(aStringList)
列でデータフレームを並べ、、新しい行を加える	df.sort_values(columns).reset_index()
option: サーモンにグラフの色を変更する	color = 'salmon'
線グラフの線の種類を点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームのリスト列の相関行列ピアソンで	df[aList].corr(method='pearson')
文字列の末尾から部分文字列を探す	s.rfind(sub)
乱数の行列を初期化する	np.random.random((行数, 列数))
データフレームのn行まで取り出す	df[:n]
option: パパイヤウィップ色を使う	color = 'papayawhip'
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
option: フォントの色を黄緑に変更する	color = 'chartreuse'
データフレームの列の各データ値の出現数	df[col].value_counts()
nかつn2	n and n2
配列の要素ごとに加算する	aArray + aArray2
Pandasで、書式を用いてデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
配列とリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
実数を実数で整数除算する	x // y
グラフにx=0の点線を設定する	plt.axvline(x=0, linestyle='dotted')
イテラブルとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
EUCでファイルを開く]	open(filepath, encoding='euc_jp')
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
真上位集合か調べる	aSet > aSet2
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
リストと配列の散布図を描画して、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
option: ブラックに色を設定する	color = 'black'
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
データフレームから列を三つ選択する	df[[column, column2, column3]]
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
折れ線グラフのマーカーを上三角にする	plt.plot(データ列x, データ列y, marker='^')
option: ダークグレーにフォントの色を設定する	color = 'darkgrey'
散布図をディープスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
棒グラフの幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
タプルのn番目からn2番目までの部分を取り出す	aTuple[n:n2]
ファイルの読み込みストリームを使う	open(filepath)
option: 符号なし８ビット整数型を使用する	dtype = np.uint8
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
JSONLファイルにカラムの名前を付けずにデータフレームを書き込む	df.to_csv(filename, header=None)
データ列のNaNを最大値に設定する	ds.fillna(ds.max())
ランダムにn行をデータフレームから選ぶ	df.sample(n)
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
ダークレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
option: グラフの色をロイヤルブルーにセットする	color = 'royalblue'
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
行列の行ごとの最大値	np.max(aArray, axis=1)
茶色色でヒストグラムを描画する	plt.hist(データ列, color='brown')
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
データ列を用いる	import pandas as pd
文字列をシアンにする	f'\033[36m{value}\033[0m'
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
Pythonパスにディレクトリを追加する	sys.path.append(dir)
文字列は全て識別子名か調べる	s.isidentifier()
option: 印を四角に変える	marker = 's'
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
データ列を閾値を用いて二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
散布図のバツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
nはn2と等しい	n == n2
縦棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
データフレームのカラムの文字列を未入力値にする	df[col].replace(s, np.nan)
辞書の項目名と値を入れ替える	{v: k for k, v in aDict.items()}
実数で実数を除算して切り捨てる	x // y
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
コマンド引数の一覧	sys.argv[1:]
日付データからn日分減算する	aDate - datetime.timedelta(days=n)
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
散布図を左三角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='<')
数式の部分分数化を行う	sympy.apart(e)
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
行列のデータ型	aArray.dtype()
データ列をビン分割する	pd.cut(ds, aList)
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ライトシアン色でヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
option: 行列のデータ型を指定する	dtype = bool
空の両端キューを作成する	collections.deque()
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
二つのデータフレームを結合する	pd.merge(df, df2)
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
データフレームの列の値が未入力値かどうか調べる	df[col].isna()
ティールにヒストグラムの色をセットする	plt.hist(データ列, color='teal')
既存のファイルをBOM付きとして追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
文字列中にひとつでも非数字がある	any(not c.isdigit() for c in s)
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
線グラフを珊瑚色を用いて描画する	plt.plot(データ列x, データ列y, color='coral')
セットをタプルに変換する	tuple(aSet)
option: フォントの色をインディアンレッドに設定する	color = 'indianred'
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
option: グラフの色を青に変更する	color = 'blue'
文字列の先頭から部分文字列を見つける	s.find(sub)
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
データフレームを列で分類し、列の要約統計量を求める	df.groupby(column).describe()[column2]
option: 丸マーカーを使用する	marker = 'o'
bとn2から成るペアを作る	(n, n2)
8進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
文字列が片仮名	('ァ' <= ch <= 'ン')
option: ミディアムスプリンググリーンにグラフの色を変更する	color = 'mediumspringgreen'
部分文字列を文字列の先頭から取り除く	s.removeprefix(sub)
配列にはいくつ要素があるか調べる	aArray.size
赤いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
リストの末尾のn要素を取り除く	aList[:-n]
レベッカパープル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
リストと配列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
データフレームから指定されたデータ型のカラム名の一覧	df.select_dtypes(型).columns
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
データフレームの列の文字列長を列として使う	df[col].str.len()
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
アルファベットを全部使う	string.ascii_letters
折れ線グラフを色付きの点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データ列を四捨五入する	ds.round()
両端キューをリストにする	list(deq)
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
nがn2の倍数か	n % n2 == 0
ダークオリーブグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
散布図にrgbのクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
縦棒グラフをピーチパフ色として描画する	plt.bar(データ列x, データ列y, color='peachpuff')
赤いポイントマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
最頻値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mode().iloc[0])
浮動小数点数の最小値	sys.float_info.min
二つの文字列は等しくないか調べる	s != s2
ライトシアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
折れ線グラフのバツマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
最大長nのスタックを作る	collections.deque(maxlen=n)
データ列のNaNを最大値で補う	ds.fillna(ds.max())
option: 四角印を用いる	marker = 's'
計算機イプシロン	sys.float_info.epsilon
正弦の逆数を求める	math.asin(x)
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
列を等量で分割数nとしてビン分割する	pd.qcut(ds, n)
イテラブルのセットを作る	set(iterable)
Pandasで、データフレームのcollのUNIX時間から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
nにn2を加える	n + n2
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
文字列を最初の部分文字列で分けた時の前半の文字列	s.partition(sub)[0]
NaNも加えてデータフレームの列をダミー変数にする	pd.get_dummies(df[column], dummy_na=True)
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
棒グラフの色をrgbに指定する	plt.bar(ラベル列, データ列, color=rgb)
データフレームのリスト列の標本標準偏差	df[aList].std()
文字列を下線付きで出力する	print(f'\033[4m{value}\033[0m')
日付データは日付データと同時かどうか	aDate == aDate2
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
n引くn2を求める	n - n2
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
折れ線グラフを一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
ロバストな単クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
オブジェクトがリストに含まれるか調べる	element in aList
データフレームを列を用いて整列して、新しい行を加える	df.sort_values(columns).reset_index()
データフレームを百の位で丸めて、整数型にする	df.round(-2).astype(int)
折れ線グラフの左三角印を赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
データフレームのカラムが文字列が含まれる行を選択する	df[df[column].str.contains(s)]
散布図をライトシアン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
ローングリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
option: ミディアムスプリンググリーン色を用いる	color = 'mediumspringgreen'
データフレームの列名の一覧	df.columns
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
option: 色をインディゴに変更する	color = 'indigo'
ファイルパスをオープンして]書き込みストリームを求める	open(filepath, mode='w')
イテラブルを関数でフィルタする	map(func, iterable)
赤い菱形マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
セットの変更不能版	frozenset(aSet)
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
データフレームを列の値によってグループ化する	df.groupby(column)
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
最大長nの両端キューを作成する	collections.deque(maxlen=n)
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
標準入力から1行読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
整数nは集合のどれか	n in aSet
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
ローングリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
データフレームのリストカラムの中に文字列があるか確認する	df[aList].isin([value])
配列とリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームの空文字をNaNに変換し、ドロップする	df.replace('', np.nan).dropna()
文字列の中のASCII限定として正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.ASCI)
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
日付時刻データをn分前にする	aDatetime - datetime.timedelta(minutes=n)
第２引数のファイルの名前	sys.argv[1]
横棒グラフを描く	plt.barh(ラベル列, データ列)
option: フォントの色をモカシンに設定する	color = 'moccasin'
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
レベッカパープル色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
キューは空か確認する	len(deq) == 0
線グラフを赤い一点鎖線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
option: セパレータをカンマにする	sep = ','
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
'A'列の値によってデータフレームをグループ分けし、、列挙する	[(name, group) for name, group in df.groupby('A')]
等間隔でデータフレームの中の列をn個にビン分割する	pd.cut(df[col], n)
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
データフレームを列によってで破壊的にソートする	df.sort_values(by=column, inplace=True)
option: フォントの色を白にセットする	color = 'white'
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
カテゴリ別でグループ化して、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
データフレームを千の位で丸めて、整数型にする	df.round(-3).astype(int)
値が両端キューの中に含まれてるか調べる	element in deq
折れ線グラフをアイボリー色として描画する	plt.plot(データ列x, データ列y, color='ivory')
ファイルのファイルサイズ	os.path.get_size(filepath)
ライトコーラルにヒストグラムの色を指定する	plt.hist(データ列, color='lightcoral')
ふたつの集合の交わりを使う	aSet.intersection(aSet2)
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
クラス分類をランダムフォレストで行う	model = sklearn.ensemble.RandomForestClassifier()
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
option: ダークマゼンタに色を設定する	color = 'darkmagenta'
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
黒い▽マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
カウンタの正のカウントのみ残す	+aCounter
データフレームを列によってソートして、下の方n件を取り出す	df.sort_values(columns).tail(n)
パーセプトロンを用いて回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
オブジェクトは論理値クラスのインスタンスか調べる	isinstance(obj, bool)
最小値でデータ列のNaNを埋める	ds.fillna(ds.min())
option: ベージュ色を使う	color = 'beige'
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
カウンタ同士で交わり演算する	aCounter & aCounter2
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
本日の日付時刻	datetime.datetime.now()
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
TSVファイルファイル名がか調べる	filename.endswith('.tsv')
ロバストな線形分類モデルを新規作成する	model = sklearn.linear_model.HuberClassifier()
'A'列でデータフレームをグループ化する	df.groupby('A')
リストとリストについての散布図にバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x')
ライトグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
貝殻色としてヒストグラムを描画する	plt.hist(データ列, color='seashell')
タプル中の要素は全て真か調べる	all(aTuple)
二つの列によってデータフレームを整列し、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
タプルをリストに変換する	list(aTuple)
白いヒストグラムを描画する	plt.hist(データ列, color='w')
文字列中に部分文字列が含まれるかどうか調べる	sub in s
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
データ列の年	ds.dt.year
自然数個のものからk個取り出したときの並べ方を求める	math.perm(n, k)
実数を文字列にする	str(x)
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
複数の数列を箱ひげ図にする	plt.boxplot([データ列, データ列])
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
option: フォントの色をオーキッドに設定する	color = 'orchid'
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
ファイルパスからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
文字のASCIIコードを使う	ord(ch)
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
リストとリストについて散布図を描画して△マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
predicateFuncが真となるイテラブルの要素を求める	itertools.takewhile(predicateFunc, iterable)
option: オリーブにフォントの色を設定する	color = 'olive'
実数を実数で除する	x / y
seabornのデフォルトスタイルを適用する	sns.set()
フォーマットを用いてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
リストの重複を取り除く	sorted(set(aList), key=aList.index)
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
nとn2の論理和	n | n2
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
データフレームのカラムが何日か見る	df[col].dt.day
rgbの菱形マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
Pandasのバージョンを見る	print(pd.__version__)
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
浮動小数点数から実数を引く	x - y
部分文字列で文字列を分けたときの残りの文字列	s.partition(sub)[-1]
インデント幅nで辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームの中で列と列に重複があるか見る	df.duplicated(subset=[column, column2])
棒グラフを青色を用いて描画する	plt.bar(データ列x, データ列y, color='blue')
二つのデータフレームを横向きに一つにする	pd.merge(df, df2)
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
散布図に赤い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
行列の行ごとの最小を求める	np.min(aArray, axis=1)
nをn2で結果の切り上げ	(n + n2 - 1) // n2
キーがマッピング上で未定義か調べる	key not in aDict
データフレームから指定された二つの列を抽出する	df[[column, column2]]
ファイルから1文字、読み込む	f.read(1)
option: グラフの色を青緑に指定する	color = 'teal'
データフレームを各列と列の組み合わせ毎に集約して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: 線の種類を破線に設定する	linestyle = 'dashed'
イテラブルを関数でフィルタする	filter(func, iterable)
今日が金曜日か調べる	datetime.datetime.today().weekday() == 4
データフレームの列がxの行を抽出する	df[df[column] == x]
散布図を右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>')
option: 青緑色を使う	color = 'teal'
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
イテラブルとリストについて散布図をプロットし、、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
項目名が辞書上で既に定義されているか	key in aDict
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
データフレームの列のユニークな値	df[col].unique()
実数を二乗する	x ** 2
要素が集合に含まれるかどうか調べる	element in aSet
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
文字列を全て小文字に変換する	s.casefold()
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
Pandasでデータ列のエポック秒からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
option: フォントの色をリネンに設定する	color = 'linen'
データ列の変化を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
複数横に並べて度数分布図を描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ファイルをバイナリモードで開いて]fとする	f = open(filepath, mode='rb')
セットをイミュータブルな集合に変換する	frozenset(aSet)
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
アリスブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
棒グラフをカーキ色を使って描画する	plt.bar(データ列x, データ列y, color='khaki')
部分文字列を用いて文字列を区切る	s.split(sub)
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
nが一桁の数か調べる	-9 <= n <= 9
散布図を黒い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
円グラフでイテラブルの割合を可視化する	plt.pie(データ列, startangle=90)
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
文字列をセンタリングにする	s.center(文字列幅)
線グラフをダークマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: ペルーを使う	color = 'peru'
option: グレーにグラフの色をセットする	color = 'gray'
x軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
フローラルホワイト色を用いてヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
グラフにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
小数点数の小数部	math.modf(x)[0]

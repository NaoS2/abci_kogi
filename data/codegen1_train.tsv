option: オールドレースにグラフの色をする	color = 'oldlace'
文字コードを文字に変換する	chr(unicode)
変数をスワップする	x, y = y, x
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
第二引数で指定したファイルの名前	sys.argv[1]
FIXME	np.linalg.eig(aArray)
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
データ列のユニークな値	ds.unique()
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
最初のコマンド引数	sys.argv[1]
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
散布図を紺碧色として描画する	plt.scatter(データ列x, データ列y, color='azure')
線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
組の最後を使う	aTuple[-1]
ライトイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightyellow')
ゼロ埋めされた符号なし８ビット整数型のベクトル	np.zeros(要素数, dtype=np.uint8)
縦棒グラフをやわらかい青色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
縦軸だけ目盛線	plt.grid(axis='y')
データフレームのカラムを1000の位で四捨五入する	df[col].round(-3)
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
配列の列ごとの最小	np.min(aArray, axis=0)
nとn2の値を足してnにする	n += n2
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
データフレームは正規分布からどの程度、尖っているか確認する	df.skew()
データフレームのn行まで抽出する	df[:n]
文字列がアルファベットかどうか調べる	s.isalpha()
全ての十六進数字	string.hexdigits
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
ティール色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
xが1、もしくは2、もしくは3に等しいかどうか調べる	x == 1 or x == 2 or x == 3
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
option: グリーン色を使用する	color = 'green'
縦棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
タプルのn番目からn2番目までの部分	aTuple[n:n2]
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
コギーくんを使いたい	import kogi
nが無限に続く数列を得る	itertools.repeat(n)
上限のある両端キュー	collections.deque(maxlen=n)
書式fmtを用いてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
棒グラフをパウダーブルー色を使って描画する	plt.bar(データ列x, データ列y, color='powderblue')
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
横棒グラフをミントクリーム色として描画する	plt.barh(データ列x, データ列y, color='mintcream')
散布図の下三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
日付データは日付データより前	aDate < aDate2
縦棒グラフをレベッカパープル色として描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データ列のタイムゾーンを日本に指定する	ds.tz_convert('Asia/Tokyo')
オブジェクトは数値	isinstance(obj, (int,float))
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
データフレームを複数の列によってソートする	df.sort_values(by=column)
説明変数と目的変数として分類モデルを学習する	model.fit(説明変数, 目的変数)
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
赤い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
棒プロットの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
日付データと日付データの時間差を計算する	aDate - aDate2
文字列中にひとつでも非大文字が含まれる	any(not c.isupper() for c in s)
日付データと日付データの時間差	aDate - aDate2
線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
ケンドール順位相関係数でデータフレームの相関行列	df.corr(method='kendall')
青い左三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
option: グラフの色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
棒グラフをカデットブルー色として描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
折れ線グラフのダイアモンドマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
option: フォントの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
散布図の左三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
二つのリストから辞書	dict(zip(aList, aList2))
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
日付データが日付データより先か	aDate < aDate2
縦棒グラフを紺碧色として描画する	plt.bar(データ列x, データ列y, color='azure')
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
グラフをスライド用に設定する	sns.set(context='talk')
日付データにn日分加算する	aDate + datetime.timedelta(days=n)
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
分類木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
データフレームの列の中に日付データと文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
赤い▽マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
イテラブルのセットを見る	set(iterable)
データフレームをエクセルデータファイルでJSONLファイルに書き込む	df.to_excel(filename)
グラフを論文用に設定する	sns.set(context='paper')
散布図のクロス印を黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフをミディアムバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データ列とリストについて散布図を描画してマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
プロットを描画する	import matplotlib.pyplot as plt
整数個からk個取り出したときの順列の総数を求める	math.perm(n, k)
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
文字列の後ろから範囲を指定して部分文字列を探す	s.find(sub, start, end)
xの小数点以下'2'桁までの文字列にする	':.2f'.format(x)
データフレームの列を折れ線グラフとして描画する	plt.plot(df[column], df[column])
表データを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
日付データは何月か知る	aDate.month
散布図をペルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='peru')
マッピングからキーで指定された項目を取り出す	aDict.pop(key)
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
散布図に黒い上三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームのリスト列の文字列を未入力値にする	df[aList].replace(s, np.nan)
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
整数nを二進表現に変換する	bin(n)
本日が何年か知る	datetime.datetime.today().year
option: オールドレースを使う	color = 'oldlace'
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
黒いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='k')
データフレームの各グループ毎の最大値	df.groupby(column).max()
フローラルホワイト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
文字列中にひとつでも非大文字が含まれるかどうか調べる	any(not c.isupper() for c in s)
0から始まる無限数列	itertools.count()
配列をフラット化する	aArray.flatten()
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
キューに要素を積む	deq.append(element)
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
散布図のマーカーの大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
ヒストグラムの色をベージュに変更する	plt.hist(データ列, color='beige')
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
線を点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
ファイル全体を行単位で分割して読み込む	f.readlines()
折れ線グラフの色をライトブルーにセットする	plt.plot(データ列x, データ列y, color='lightblue')
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
レモンシフォン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
option: グリーン色を使う	color = 'green'
単位正方行列	np.identity(n)
文字列中の文字を列挙する	list(s)
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
モジュールを検索するパス	sys.path
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
データ列をビン数nでビン分割する	pd.cut(ds, n)
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
縦軸の目盛を表示しない	plt.yticks([])
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
散布図を黄色色として描画する	plt.scatter(データ列x, データ列y, color='yellow')
縦棒プロットを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
nからn2までの整数列	list(range(n, n2+1))
xを文字列に変換する	str(x)
データフレームのカラムのメディアン	df[col].median()
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
データフレームのリストカラムのNaNを直後の値に変更する	df[aList].fillna(method='bfill')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
散布図をオールドレース色を使って描画する	plt.scatter(データ列x, データ列y, color='oldlace')
option: カーキ色を使う	color = 'khaki'
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームをJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
データフレームの中にと文字列が存在する	df.isin([value, value2])
文字列が数字か	s.isdigit()
option: ダークグレー色を使う	color = 'darkgray'
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
nが無限に続く数列	itertools.repeat(n)
線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
整数を実数で割って切り捨てる	x // y
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
線形モデルの回帰変数	model.coef_
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
線グラフの色をグリーンにする	plt.plot(データ列x, データ列y, color='green')
棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
ミディアムスレートブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
2つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
nが5の倍数か調べる	n % 5 == 0
真紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
formatパターンの文字列を日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
ふたつのリストの積集合	list(set(aList) & set(aList2))
タプルを引数として展開して表示する	print(*aTuple, sep=',')
option: ミディアムバイオレットレッドに色を設定する	color = 'mediumvioletred'
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
インデント幅nで、辞書をJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
リストの推移を赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
縦棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
データフレームの列をNaNも加えてダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームの列を1000の位で四捨五入して、整数型にする	df[col].round(-3).astype(int)
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
ダークカーキ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
カウンタの項目のカウント	aCounter[element]
線グラフをシーグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='seagreen')
縦棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
散布図のバツマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
Pandasで、データフレームのカラムをPandasの日付型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
rgbの四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
nはn2と等しいか	n == n2
カラーバーを横向きにつける	plt.colorbar(orientation='horizontal')
rgbの大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データ列の各データが何回出現するか見る	ds.value_counts()
キーが辞書上で未定義か調べる	key not in aDict
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
eの実数乗	math.exp(x)
グラフの色を暗くする	sns.set(pallete='dark')
列を丸めて、整数型にする	ds.round().astype(int)
option: ダークオリーブグリーンを使う	color = 'darkolivegreen'
ピーチパフ色としてヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
二次元リストをフラット化する	sum(aList)
データフレームのそれぞれのグループ毎の平均値	df.groupby(column).mean()
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
要素が集合に含まれない	element not in aSet
ファイルをオープンして]、書き込みストリームを見る	open(filepath, mode='w')
文字列の示すエンコーディングでファイルをオープンする]	open(filepath, encoding=s)
線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
ヒストグラムを破線に設定する	plt.hist(データ列, linestyle='dashed')
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
赤い▽マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ラベンダー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
散布図のバツ印の太さを変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
データフレームの列の種類	df.info()
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
横棒グラフをナバホホワイト色として描画する	plt.barh(データ列x, データ列y, color='navajowhite')
データ列が何時か見る	ds.dt.hour
option: ライムを使用する	color = 'lime'
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
折れ線グラフの色をパウダーブルーに指定する	plt.plot(データ列x, データ列y, color='powderblue')
option: フォントの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
現在が何秒か知る	datetime.date.today().second
データ列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
データフレームのn行目を削除する	df.drop(n, axis=0)
偽陰性を避けたい指標を用いる	sklearn.metrics.recall_score(正解データ列, 予測データ列)
nが5の倍数かどうか確認する	n % 5 == 0
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
線グラフを点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
日付データからn時間分減算する	aDate - datetime.timedelta(hours=n)
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図に赤い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
データフレームの欠損値が含まれる箇所を色付けする	df.style.highlight_null()
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
文字列を置き換える	s.replace(sub, newsub)
ヒストグラムの色をフォレストグリーンに変更する	plt.hist(データ列, color='forestgreen')
タプルをn倍する	aTuple * n
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ベクトルの要素ごとの最小公倍数を求める	np.lcm(aArray, aArray2)
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームのリストカラムを百の位で四捨五入して、整数型にする	df[aList].round(-2).astype(int)
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
option: フォントの色をプラムに設定する	color = 'plum'
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
ヒストグラムを三つ並べてプロットする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
リネン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
折れ線グラフにダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
タプルを計数器に変換する	collections.Counter(aDict)
x座標の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
キューが空かどうか調べる	len(deq) == 0
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
赤い点線でイテラブルの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
初期値で全要素を初期化した配列	np.full(要素数, 初期値, dtype=np.int)
データフレームの未入力値を最頻値に設定する	df.fillna(df.mode().iloc[0])
ヒストグラムの色をロージーブラウンにする	plt.hist(データ列, color='rosybrown')
データフレームをグループ化し、それぞれの列に対し個数を計算する	df.groupby(column)[column2].count()
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ナバホホワイト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
マッピングを階層化マップに変換する	collections.ChainMap(aDict)
小麦色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
'A'列の値ごとにデータフレームをグループ分けして列挙する	[(name, group) for name, group in df.groupby('A')]
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
パールゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
グラフのタイトルを設定する	plt.title('グラフの名称')
option: フォントの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
カラーバーを描画する	plt.colorbar()
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
濃いシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
文字列は全て数値か調べる	s.isnumeric()
option: グラフの色をラベンダーに設定する	color = 'lavender'
リストとリストについての散布図にrgbの上三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データ列の中に文字列と文字列が含まれるか	ds.isin([value, value2])
実数の複素数	complex(x)
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
文字列を代数計算の変数に変換する	sympy.Symbol(s)
文字列を最後の部分文字列で二分し、前半の文字列を求める	s.rpartition(sub)[0]
文字列の変数名を数式にする	sympy.Symbol(s)
データ列の欠損値を直前の値で補う	ds.fillna(method='ffill')
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
データフレームから型リストで指定されたデータ型の列のみ抽出する	df.select_dtypes(include=typeList)
散布図の丸マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
リストとシーケンスをつなぐ	itertools.chain(iterable, iterable2)
コマンドフラグの状態	sys.flags
option: グラフの色をマルーンに設定する	color = 'maroon'
option: グラフの色を赤に設定する	color = 'red'
データフレームのカラムの未入力値を最大値に設定する	df[col].fillna(df[col].max())
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
日付時刻データにn時間分、加える	aDatetime + datetime.timedelta(hours=n)
データフレームを'A'列によってソートする	df.sort_values(by='A')
nの三乗	n ** 3
データフレームを各列と列の組み合わせ毎にグループ分けして平均値を計算する	df.groupby([column, column2], as_index=False).mean()
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
nが一桁の数か調べる	0 <= n <= 9
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
グラフにグリッド線を入れる	plt.grid(True)
option: 紺碧色を使う	color = 'azure'
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームのNaNをモードで埋める	df.fillna(df.mode().iloc[0])
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
ベージュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
数式を簡略にする	sympy.sympify(e)
文字列を文字コード列に変換する	[ord(ch) for ch in s]
横棒グラフをトマト色として描画する	plt.barh(データ列x, データ列y, color='tomato')
リストを配列に変換する	np.array(aList)
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
散布図をブラック色を用いて描画する	plt.scatter(データ列x, データ列y, color='black')
JSON形式の文字列をデータにする	json.loads(b.decode('unicode-escape'))
既存の配列を元に全要素が1の行列を作成する	np.ones_like(aArray)
option: グリーンイエロー色を使う	color = 'greenyellow'
算術計算ライブラリをインポートする	import math
option: 平均を加える	showmeans = False
文字列の開始位置以降が部分文字列で始まるかテストする	s.startswith(sub, start)
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
折れ線グラフのポイントマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
データ列の中にある文字列と文字列の合計をカウントする	ds.isin([value, value2]).sum()
year年month月の日付をオブジェクト化する	datetime.date(year=year, month=month, day=1)
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
散布図をダークシアン色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
Pandasで、文字列をdatetime64型に変換する	pd.to_datetime(s)
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
数式を因数分解する	sympy.factor(e)
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
ネイピア数を使う	math.e
リストの末尾のn要素を取り除く	aList[:-n]
データフレームの各グループごとの個数	df.groupby(column).count()
ファイルパスのファイル名	os.path.basename(filepath)
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
option: パウダーブルー色を使用する	color = 'powderblue'
線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
ヒストグラムを淡い茶色色として描画する	plt.hist(データ列, color='tan')
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
nマイナスn2を求める	n - n2
n2がnより大きく、かつ、n3より小さい	n < n2 and n2 < n3
ライトスカイブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
列を等量でn個にビニングする	pd.qcut(ds, n)
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データ列のタイムゾーンを東京に指定する	ds.tz_convert('Asia/Tokyo')
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
データフレームの列を小数点以下n桁で四捨五入する	df[col].round(n)
文字列から部分文字列を全て取り除く	s.replace(sub, '')
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
コマンド引数の一覧	sys.argv[1:]
プラットホームはマック	sys.platform.startswith('darwin')
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
ペールグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ハッシュ値	hash(x)
横棒グラフをライムグリーン色として描画する	plt.barh(データ列x, データ列y, color='limegreen')
紺色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
青いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
リストの末尾	aList[-1]
茶色にヒストグラムの色を指定する	plt.hist(データ列, color='brown')
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームから指定された三列を取り出す	df[[column, column2, column3]]
三数の一番小さい値を求める	min(x, y, z)
全８進数字	string.octdigits
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
パウダーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
赤い上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
角度のラジアン	math.radians(degree)
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
横軸の目盛を対数に変更する	plt.xscale('log')
縦棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
ベクトルと同じ大きさの空のベクトルを作る	np.empty_like(aArray)
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
数値を因数分解する	sympy.factor(e)
nの無限数列	itertools.repeat(n)
option: エンコーディングを文字コードtextに設定する	encoding = text
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
グラフにx=0の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
リストの先頭のn要素を取り除く	aList[n:]
リッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
option: 色の透明度を設定する	alpha = 0.5
option: アイボリー色を使う	color = 'ivory'
データフレームのNaNを第二四分位数に設定する	df.fillna(df.median())
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
逆順の両端キュー	reversed(deq)
二点間のユークリッド距離	math.dist(point, point2)
10を底とする小数点数の対数を求める	math.log10(x)
ひとつでも大文字が文字列内に含まれる	any(c.isupper() for c in s)
option: ミスティローズを使う	color = 'mistyrose'
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
リネン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
option: EUCを使用する	encoding = 'euc_jp'
カウンタからゼロカウントを取り除く	+aCounter
カウンタのユニークな項目を列挙する	list(aCounter)
シーケンスを累加したイテラブルを得る	itertools.accumulate(iterable)
本日が何曜日か知る	datetime.datetime.today().weekday()
カレントワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
文字列を最後の部分文字列で二分し残りの文字列を使う	s.rpartition(sub)[-1]
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
データフレームを'A'列と'B'列でで降順に整列する	df.sort_values(by=['A', 'B'], ascending=False)
配列と配列の散布図を描画して、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
イテラブルを集合に変換する	set(iterable)
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
option: オーキッド色を使う	color = 'orchid'
毎回異なるように乱数を初期化する	random.seed()
データフレームのカラムの中にいくつ未入力値があるか数える	df[col].isna().sum()
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
option: 小麦色色を使う	color = 'wheat'
nからn2までのスライス	slice(n, n2)
nが何桁か	len(str(n))
棒グラフをバイオレット色で描画する	plt.bar(データ列x, データ列y, color='violet')
option: 色をミスティローズに設定する	color = 'mistyrose'
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
両端キュー中の要素の数を数える	deq.count(element)
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
散布図のマーカーを▽にする	plt.scatter(データ列x, データ列y, marker='v')
データフレームの欠損値をxで埋める	df.fillna(x)
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
リストの末尾からn番目以前の部分を抽出する	aList[:-n]
グラフの補足の場所を(x,y)に設定する	plt.legend(loc=(x, y))
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
文字列を式として評価する	eval(s)
日付時刻データは日付時刻データより後ろか確認する	aDatetime > aDatetime2
グラフのデザインを良くする	import seaborn as sns
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
縦棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
nわるn2	n / n2
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
異なる列をキーにして２つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
棒グラフをロイヤルブルー色を使って描画する	plt.bar(データ列x, データ列y, color='royalblue')
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
データフレームのカラムの文字列長を列として使う	df[col].str.len()
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
文字列リストを連結する	''.join(aStringList)
文字列中にひとつでも非空白がある	any(not c.isspace() for c in s)
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームのカラムの曜日の名前を求める	df[col].dt.weekday_name
長さnのリスト	[0] * n
データフレームのカラムの値が欠損値	df[col].isna()
タプルの合計値	sum(aTuple)
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
ヒストグラムをライムグリーン色を用いて描画する	plt.hist(データ列, color='limegreen')
nが1、もしくは2	n == 1 or n == 2
日付時刻データが何曜日か知る	aDatetime.weekday()
データフレームの全カラムを散布図を用いてグラフ化する	sns.pairplot(df)
グラフの色を全般的に濃くする	sns.set(pallete='deep')
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
日付時刻データの日付	aDatetime.date()
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
数を三乗する	x ** 3
第2コマンド引数を調べる	sys.argv[1]
アリスブルーにヒストグラムの色をセットする	plt.hist(データ列, color='aliceblue')
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
直前の値でデータフレームのリストカラムのNaNを置換する	df[aList].fillna(method='ffill')
データフレームのカラムの正規分布に対する上下広がり	df[col].skew()
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
赤色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
表データを関数の値でグループ化する	df.groupby(関数)
多次元データを主成分分析として淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
nが正の整数	n > 0
現在処理中の例外を情報	sys.exc_info()
辞書から最後の項目をポップする	aDict.popitem()
ライトゴールドロディイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
長さが一致しないときのzip	itertools.zip_longest(iterable, iterable2)
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
数値の符号をコピーにする	math.copysign(x, x2)
データ列のpercent分位数	ds.quantile(percent/100)
実数の逆余弦を算出する	math.acos(x)
データフレームのカラムを10の位で丸めて整数型にする	df[col].round(-1).astype(int)
グラフの用途を論文に設定する	sns.set(context='paper')
ガンマ関数	math.gamma(x)
線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
リストと配列についての散布図に赤い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
x,y,zをそれぞれn,n2,n3に変更する	x, y, z = n, n2, n3
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
疑似乱数平均と標準偏差からを発生させる	random.normalvariate(mu=0.5, sigma=0.2)
データフレームの最初n行	df.head(n)
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
折れ線グラフに四角印を使用する	plt.plot(データ列x, データ列y, marker='s')
文字列を下線付きで表示できる文字列にする	f'\033[4m{value}\033[0m'
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
オプションで、ファイルを出力先にする	file = sys.open(filename, 'w')
リストのn番目以降の部分を取り出す	aList[n:]
Pandasでデータ列をdatetime64型に変換する	pd.to_datetime(ds)
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
option: グラフの色をトマトに設定する	color = 'tomato'
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
範囲を指定して整数乱数を求める	random.randint(最小値, 最大値)
イテラブルを累加した列	itertools.accumulate(iterable)
データフレームの列の空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
データフレームのリスト列の未入力値を直後の値で埋める	df[aList].fillna(method='bfill')
option: ライトブルー色を使用する	color = 'lightblue'
グラフ中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
目盛り線	plt.grid(alpha=0.5)
2つのデータフレームを異なる列をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
文字列をセンタリングにする	s.center(文字列幅)
回帰木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
文字列を下線付き化する	f'\033[4m{value}\033[0m'
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
option: インディアンレッド色を用いる	color = 'indianred'
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
データフレームのカラムの月	df[col].dt.month
両端キューの末尾	deq[-1]
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
オブジェクトはリストクラスか調べる	isinstance(obj, list)
option: デピンク色を使う	color = 'deeppink'
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
タプルの各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
散布図をrgbのバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
ファイルパスをオープンして]追加ストリームを見る	open(filepath, mode='a')
ファイルを追加モードでオープンして]fとする	f = open(filepath, mode='a')
サドルブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
日付データをISO書式の文字列にする	aDate.isoformat()
日付時刻データが何分か知る	aDatetime.minute
リスト内の要素が全て真か調べる	all(aList)
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
インディアンレッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='indianred')
データフレームのNaNを最頻値に指定する	df.fillna(df.mode().iloc[0])
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
オプションで、出力先を標準エラーに設定する	file = sys.stderr
ヒストグラムをコーンズシルク色として描画する	plt.hist(データ列, color='cornsilk')
文字列が文字列より辞書順で前か調べる	s < s2
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
赤い大バツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
文字列が全て大文字かどうか調べる	s.isupper()
組内の要素が少なくともひとつ真	any(aTuple)
列'A'と列'B'をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
データ列がどの程度、分散しているか見る	ds.var()
option: 符号なし８ビット整数型を使う	dtype = np.uint8
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
折れ線グラフの印を丸印にする	plt.plot(データ列x, データ列y, marker='o')
アイリスのデータセットをデータフレームとしてロードする	sns.load_dataset('iris')
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
列の値でデータフレームをグループ化して、グループの平均値を算出する	df.groupby(column).mean()
日付時刻データと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
切片なしの回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
散布図のマーカーを丸印にする	plt.scatter(データ列x, データ列y, marker='o')
赤い実線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
標準出力のバッファをフラッシュする	sys.stdout.flush()
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
実数を複素数に変換する	complex(x)
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
nではない	not n
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
rangeの無限バージョン	itertools.count(start=n, step=step)
ヒストグラムのプロットして、正規化する	plt.hist(データ列, density=True)
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
option: 行列のデータ型を指定する	dtype = np.int
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフの大バツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
実線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
データフレームを列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
データフレームの中のカラムを等量でビン数nでビン分割する	pd.qcut(df[col], n)
整数nの八進表現	oct(n)
日付データにn週間分加算する	aDate + datetime.timedelta(weeks=n)
データフレームの重複した行を数える	df.duplicated().sum()
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
プロットのx軸とy軸の比率を等しくする	plt.axis('equals')
棒グラフをブラック色として描画する	plt.bar(データ列x, データ列y, color='black')
空の勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
ヒストグラムをダークシアグリーン色を使って描画する	plt.hist(データ列, color='darkseagreen')
ディムグレー色を使ってヒストグラムを描画する	plt.hist(データ列, color='dimgray')
ゼロ埋めされた行列	np.zeros(要素数)
option: ライトコーラルにグラフの色を設定する	color = 'lightcoral'
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームをグループ化し、それぞれの列に対し標準偏差を計算する	df.groupby(column)[column2].std()
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
文字列は全て十進数字か調べる	s.isdecimal()
文字列中に漢字があるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
nがn2以上か調べる	n >= n2
値を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
エクセルファイルファイルを読み込む	pd.read_excel(filename)
要素は集合に含まれるか調べる	element in aSet
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
n進文字列を整数にする	int(s, n)
カラムの欠損値を直後の値に設定する	ds.fillna(method='bfill')
データ列の割合を円グラフで可視化する	plt.pie(データ列, startangle=90)
辞書に辞書の項目を更新する	aDict.update(aDict2)
カウンタのそれぞれの要素をそのカウントだけ列挙する	aCounter.elements()
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
小さい順にタプルの値をソートする	sorted(aTuple, reverse=False)
オブジェクトは浮動小数点数クラス	isinstance(obj, float)
1からNまでの配列	np.arange(1, N+1)
双方向キューをリストに変換する	list(deq)
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
辞書をインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
option: ダークバイオレットを使う	color = 'darkviolet'
ミスティローズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームの重複する行をマスクする	df.duplicated()
option: ダイアモンドマーカーを使う	marker = 'D'
ヒストグラムの色を小麦色に指定する	plt.hist(データ列, color='wheat')
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
データ列は正規分布からどの程度、尖っているか見る	ds.skew()
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
ユーザから入力される	input()
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
ピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
option: グラフの種類を破線に指定する	linestyle = 'dashed'
実数の逆双曲線正弦を求める	math.asinh(x)
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
8進文字列を整数に変換する	int(s, 8)
タプルの最後のn要素を取り除く	aTuple[:-n]
リストをビン数nを用いてビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
プロットにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
グラフの全般的にカラーパレットをパステル調にする	sns.set(pallete='pastel')
リストと配列について散布図をプロットして、文字列という簡単な説明用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
文字列の接頭辞から部分文字列を除去する	s.removeprefix(sub)
書き込みモードでファイルを開く]	open(filepath, mode='w')
カラーバーを付ける	plt.colorbar()
横棒グラフをブラウン色で描画する	plt.barh(データ列x, データ列y, color='brown')
現在の作業ディレクトリ	os.getcwd()
整数nの二進表現	bin(n)
リストを中央値でビン分割する	pd.qcut(aList, 2)
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
option: グラフの色をチョコレートに設定する	color = 'chocolate'
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
散布図をバツマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='x')
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
オブジェクトは整数か	isinstance(obj, int)
option: 改行コードを動作環境依存に設定する	newline = None
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
ラインを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
散布図をレモンシフォン色として描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
両端キューの長さを制限する	collections.deque(maxlen=n)
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
データフレームの列の値がxより大きいデータを選択する	df[df[column] > x]
線グラフの色をピーチパフに指定する	plt.plot(データ列x, データ列y, color='peachpuff')
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
option: 欠損値も無視しない	dropna = True
グラフの描画を綺麗にする	import seaborn as sns
データフレーム全体をインデックスによって降順でソートする	df.sort_index(ascending=False)
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
ファイルパスからファイル名を取り出す	os.path.basename(filepath)
nで乱数シードを固定する	random.seed(n)
データフレームのカラムの中にある文字列の合計をカウントする	df[col].isin([value]).sum()
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
実数を三乗する	x ** 3
両端キューのstart番目からend番目までの部分要素	collections.deque(itertools.islice(deq, start, end))
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
線グラフを青い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
折れ線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
赤い一点鎖線としてリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
散布図の右三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
行列の逆行列	np.linalg.inv(aArray)
実数の小数部	math.modf(x)[0]
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
黒い左三角マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
横棒プロットの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
ライトサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
option: ブランチドアーモンドを用いる	color = 'blanchedalmond'
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
データフレームのカラムの欠損値を平均値に指定する	df[col].fillna(df[col].mean())
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
空の単回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
option: グラフの色をシルバーに設定する	color = 'silver'
線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
本日が何月か知る	datetime.datetime.today().month
赤い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフの色をダークスラテグレーにセットする	plt.plot(データ列x, データ列y, color='darkslategray')
option: ゲインズボロ色を使う	color = 'gainsboro'
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
ファイルを文字列の示す文字コードで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
折れ線グラフのポイントマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
列'A'と列'B'をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
二つの変数を同じ値にする	x = y = n
データ列のタイムゾーンを東京に設定する	ds.tz_convert('Asia/Tokyo')
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
表データから型リストデータ型の列を取り出す	df.select_dtypes(include=typeList)
タイムスタンプデータをタプルに変換する	aDatetime.timetuple()
プロットで使うフォントを指定する	sns.set(font=フォント名)
option: ミディアムスプリンググリーンを使う	color = 'mediumspringgreen'
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ストリームを解放する	f.close()
スノー色でヒストグラムを描画する	plt.hist(データ列, color='snow')
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
散布図をrgbの▲マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
自然数の階乗	math.factorial(n)
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
リストの最初のn要素を取り除く	aList[n:]
配列を等量でビン数nとしてビニングする	pd.qcut(aArray, n)
リストをナンバリングする	enumerate(aList)
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
文字列中の部分文字列を文字列に全部置き換える	s.replace(sub, newsub)
文字列を新しい文字列を用いて置換する	s.replace(sub, newsub)
x座標の表示範囲を変更する	plt.xlim(最小値, 最大値)
散布図に四角マーカーを加える	plt.scatter(データ列x, データ列y, marker='s')
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
Pandasで、フォーマットでデータ列をPandasの日付型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
データフレームを表示するとき、折り返しを無効にセットする	pd.set_option('expand_frame_repr', False)
折れ線グラフの右三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
option: グラフの色をライトグレーに変更する	color = 'lightgrey'
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
リストを逆順にする	reversed(aList)
プラム色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
文字列の最後から部分文字列を見つける	s.rfind(sub)
2つのデータ列を箱ヒゲ図にする	plt.boxplot([データ列, データ列])
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
option: マーカーの色を珊瑚にする	markerfacecolor = 'coral'
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
二つの文字列を順にプリントする	print(value, value2)
リストの最初の文字列を探す	aList.index(element)
パレットトルコイズにヒストグラムの色を設定する	plt.hist(データ列, color='paleturquoise')
折れ線グラフの右三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
散布図に大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
クロス印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
リストをn回連結する	aList * n
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
JSON形式の文字列を読み込む	json.loads(jsonString)
ファイルを全部、読む	f.read()
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
集合のイミュータブル版	frozenset(aSet)
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
線グラフの色を青に変更する	plt.plot(データ列x, データ列y, color='blue')
nとn2の商	n / n2
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
ファイルをUTF8で書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
データフレームを破壊的に'A'列でを用いてソートする	df.sort_values(by='A', inplace=True)
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
ヒストグラムの色をホワイトスモークにする	plt.hist(データ列, color='whitesmoke')
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
データフレームの数値を一度に小数点以下n桁で四捨五入する	df.round(n)
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
縦棒グラフをシスル色を使って描画する	plt.bar(データ列x, データ列y, color='thistle')
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
集合が空でないかどうか調べる	len(aSet) != 0
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをフローラルホワイト色として描画する	plt.barh(データ列x, データ列y, color='floralwhite')
option: フォントの色をビスクに設定する	color = 'bisque'
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
グラフの描画で淡く色を使う	sns.set(pallete='muted')
プロットの描画で暗く色を使う	sns.set(pallete='dark')
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
データ列の中にいくつ欠損値があるかカウントする	ds.isna().sum()
文字列がタプルに含まれるか調べる	element in aTuple
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
コーンズシルク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: グラフの色をイエローグリーンに指定する	color = 'yellowgreen'
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
データフレームから列を三つ選択する	df[[column, column2, column3]]
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
option: ブラック色を使う	color = 'black'
option: ハニーデュー色を使う	color = 'honeydew'
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
ベクトルの次元数を求める	aArray.ndim
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
ファイルパスをベース名と拡張子に分割する	os.path.splitext(filepath)
ライトコーラル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
数式の展開を行う	sympy.expand(e)
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
nを二進文字列に変換する	bin(n)[2:]
データフレームを列によって昇順に破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
ナバホホワイト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
現在の日付を使う	datetime.date.today()
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
既存の行列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
全要素を０で初期化した行列を作る	np.zeros(行数, 列数)
ダークターコイズ色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフの大バツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
グラフの使途を画面に設定する	sns.set(context='notebook')
部分文字列が文字列の開始位置からと終了位置番目までの間にないか調べる	s.find(sub, start, end) == -1
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
散布図に三角印を使用する	plt.scatter(データ列x, データ列y, marker='^')
ダークマゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
空のスタック	collections.deque()
文字列の右端から部分文字列を除く	s.rstrip(sub)
縦棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
データフレームのカラムの分	df[col].dt.minute
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
オブジェクトにプロパティが存在するか確認する	hasattr(obj, プロパティ名)
オブジェクトが関数かどうか調べる	callable(obj)
データフレームを丸めて、整数型にする	df.round().astype(int)
赤い四角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
TSVファイルを読む	pd.read_csv(filename, sep='\t')
グレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
ふたつのリストの積集合を見る	list(set(aList) & set(aList2))
データフレームのカラムが正規分布からどの程度尖っているか見る	df[col].skew()
折れ線グラフの色をラベンダーブラッシュに変更する	plt.plot(データ列x, データ列y, color='lavenderblush')
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
リストのn番目にオブジェクトを挿入する	aList.insert(n, element)
option: ライトグリーン色を使う	color = 'lightseagreen'
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
浮動小数点数を十六進表記の文字列にする	x.hex()
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
コレクションを使う	import collections
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
二進文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
option: インディゴ色を使う	color = 'indigo'
パールバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
文字列をセパレータで分割する	s.split(sub)
ヒストグラムをシスル色を用いて描画する	plt.hist(データ列, color='thistle')
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
パールバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
変数について数式の積分を求める	sympy.integrate(e, z)
散布図をライトスレイグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
散布図の丸印の色を指定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
データフレームの列を1000の位で丸める	df[col].round(-3)
ダークオリーブグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
文字列中からパターンに大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
xを整数に変換する	int(x)
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
散布図をパウダーブルー色として描画する	plt.scatter(データ列x, データ列y, color='powderblue')
ヒストグラムをカラーマップとして描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
ヒストグラムをダークシアグリーン色として描画する	plt.hist(データ列, color='darkseagreen')
データフレームの列に重複があればマスクする	df.duplicated(subset=column)
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
ファイルパスの拡張子	os.path.splitext(filepath)[1].lstrip('.')
option: 右三角印を描画する	marker = '>'
option: 耐火レンガ色を用いる	color = 'firebrick'
横棒グラフをコーンズシルク色を用いて描画する	plt.barh(データ列x, データ列y, color='cornsilk')
折れ線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgray')
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
折れ線グラフを淡い茶色色で描画する	plt.plot(データ列x, データ列y, color='tan')
折れ線グラフの印を三角印にする	plt.plot(データ列x, データ列y, marker='^')
日付時刻データは何秒か知る	aDatetime.second
ピアソンの相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
配列の列ごとの平均値	np.mean(aArray, axis=0)
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
新しいヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
縦棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
日付データが土曜日か	aDate.weekday() == 5
オブジェクトの型	type(obj)
タプルのn番目以降の要素を抽出する	aTuple[n:]
option: グラフの色を小麦色に設定する	color = 'wheat'
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
黒い下三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
二つの文字列をタブで区切って出力する	print(value, value2, sep='\t')
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
実数のハイパボリック・コサイン	math.cosh(x)
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
nをn2で整数除算する	n // n2
散布図にポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.')
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
リストの平均値	sum(aList)/len(aList)
棒グラフの色を濃い青にする	plt.bar(データ列x, データ列y, color='darkblue')
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
淡いピンク色色でヒストグラムを描画する	plt.hist(データ列, color='lightpink')
辞書の値の一覧	aDict.values()
ミディアムバイオレットレッドにヒストグラムの色を指定する	plt.hist(データ列, color='mediumvioletred')
日付データが何曜日か知る	aDate.weekday()
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
表データの指定された列を抽出する	df[column]
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
ヒストグラムの色をインディゴに変更する	plt.hist(データ列, color='indigo')
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
コマンドの第２引数を確認する	sys.argv[1]
クラス分類の真陽性率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
二つのオブジェクトが同一参照かどうか	obj is obj2
マッピングのキーを列挙する	aDict.keys()
nの2乗	n ** 2
赤い丸マーカーをリストと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
黒い星マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
バギングとしてクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
青緑色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
オプションで、標準エラーを使う	file = sys.stderr
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
nをn2だけ左シフトする	n << n2
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
リストと数列の散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
数式を方程式として解く	sympy.solve(e)
option: ドジャーブルーにグラフの色を設定する	color = 'dodgerblue'
リストとリストについて散布図を描き、、マーカーを菱形に変更する	plt.plot(データ列x, データ列y, marker='D')
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
プロット描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
赤い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
横棒グラフをライトシアン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightcyan')
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
n個の集まりからk個選ぶ方法	math.comb(n, k)
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
要素はタプルの値に含まれていないか調べる	element not in aDict.values()
行列演算をする	import numpy as np
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
部分文字列が文字列の開始位置以降にある	s.find(sub, start) != -1
棒グラフを淡いピンク色色として描画する	plt.bar(データ列x, データ列y, color='lightpink')
カーキにヒストグラムの色を設定する	plt.hist(データ列, color='khaki')
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
折れ線グラフの星マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
折れ線グラフを青い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
正規分布に基づく累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームから指定された４つの列だけ抽出する	df[[column, column2, column3, column4]]
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
option: マーカーを星に変更する	marker = '*'
真	True
ダークバイオレット色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
option: 色をフローラルホワイトに指定する	color = 'floralwhite'
データフレームを表示するとき、小数点以下n桁まで表示するようにする	pd.set_option('precision', n)
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
タイムスタンプデータををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
縦軸の目盛を対数に変更する	plt.yscale('log')
option: ディムグレーを使う	color = 'dimgray'
コーンフラワーブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データフレームのn行目を破壊的に消す	df.drop(n, axis=0, inplace=True)
日付データの月数	aDate.month
ラベル付きの円プロットを描く	plt.pie(データ列, startangle=90, labels=ラベル列)
散布図に黒い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データ列の中の欠損値の合計を数える	ds.isna().sum()
青い実線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: グラフの色をスラグレーに設定する	color = 'slategray'
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
xとyの商と余りを同時に求める	divmod(x, y)
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
実数を十六進表記の文字列に変換する	x.hex()
option: コーンフラワーブルーを使う	color = 'cornflowerblue'
グラフの背景色を暗くする	sns.set(style='darkgrid')
ライトグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
ファイルパスを読み込みモードでオープンして]fとする	f = open(filepath, mode='r')
折れ線グラフの色をバイオレットに設定する	plt.plot(データ列x, データ列y, color='violet')
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='gray')
日付データが金曜日	aDate.weekday() == 4
論文用にグラフを変更する	sns.set(context='paper')
カーネル密度推定グラフ描画でを使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
横棒グラフを描画して、バーの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ミディアムオーキッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
回帰木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
部分文字列が文字列の終了位置以前に存在するかどうか調べる	s.find(sub, 0, end) != -1
散布図の印を三角印にする	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
文字列のn番目	s[n]
文字列の開始位置と終了位置の間に部分文字列があるか判定する	s.find(sub, start, end) != -1
文字列をカンマで分割して文字列リストに変換する	s.split(',')
辞書を浅くコピーする	dict(aDict)
option: グラフの色をグレーに指定する	color = 'grey'
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
青い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
散布図の左三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
オブジェクトはリストかタプルか確認する	isinstance(obj, (list)
文字列を改行によって区切る	s.splitlines()
タイムスタンプデータをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
UTF8でファイルをオープンする]	open(filepath, encoding='utf-8')
データフレームのカラムの中に含まれる文字列と文字列の個数を数える	df[col].isin([value, value2]).sum()
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
グリッドを破線にする	plt.grid(linestyle='dashed')
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
折れ線グラフをブランチドアーモンド色を用いて描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
整数nを二進文字列に変換する	bin(n)[2:]
配列とリストについての散布図に赤い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
コンフュージョン・マトリックスを計算する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
横棒グラフをパパイヤウィップ色として描画する	plt.barh(データ列x, データ列y, color='papayawhip')
タプルをひとつ置きに取り出す	aTuple[::2]
文字列をファイルに書き込む	f.write(s)
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
両端キューのstart番目からend番目の部分要素を使う	collections.deque(itertools.islice(deq, start, end))
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
積み上げ棒プロットを描く	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
標準入力から1行だけ読む	sys.stdin.readline()
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
year年をタイムスタンプに変換する	datetime.datetime(year=year, month=1, day=1)
日付データをISO形式の文字列に変換する	aDate.isoformat()
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
option: ヘッダを自動的な連番に増やす	header = None
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
配列とリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
option: 読み込みモードを使用する	mode = 'r'
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
散布図のポイント印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
グラフの描画を見やすくする	import seaborn as sns
データフレームの欠損値を直後の値で置換する	df.fillna(method='bfill')
データ列の日	ds.dt.day
nがn2と等しいか	n == n2
ファイルパスをBOM付きで書き込みできるように開く]	open(filepath, mode='w', encoding='utf_8_sig')
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
数式の数値を計算する	float(e)
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
棒グラフをミディアムターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
ファイルパスからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
集合から全ての要素を消す	aSet.clear()
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
縦棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
黒い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='k')
イテラブルを累加する	itertools.accumulate(iterable)
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
option: モカシンを使う	color = 'moccasin'
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームが重複しているか確認する	df.duplicated()
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
フローラルホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='floralwhite')
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
year年month月day日hour時をタイムスタンプにする	datetime.datetime(year=year, month=month, day=day, hour=hour)
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
配列の行ごとの合計を求める	np.sum(aArray, axis=1)
縦棒グラフをディムグレー色として描画する	plt.bar(データ列x, データ列y, color='dimgrey')
文字列を後ろから部分文字列で区切る	s.rsplit(sub)
文字列の長さ	len(s)
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
辞書から項目名の値かもしくは要素を得る	aDict.get(key, element)
モカシン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
ミディアムパープル色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
両端キューの末尾から値を取り除く	deq.pop()
こんにちは世界をプリントする	print('Hello World')
日付データと日付データの時間差は何分か知る	(aDate - aDate2).total_seconds()//60
option: 茶色にグラフの色を変更する	color = 'brown'
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
ランタイムの再帰の最大回数	sys.getrecursionlimit()
タプルのn番目からn2番目の部分	aTuple[n:n2]
実線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームを列の値によってまとめたグループ	df.groupby(column)
option: グラフの色を紺碧に設定する	color = 'azure'
集合の補集合を使う	aSet.difference(aSet2)
カデットブルーにヒストグラムの色を変更する	plt.hist(データ列, color='cadetblue')
カラムの欠損値をxに変更する	ds.fillna(x)
今日が水曜日	datetime.datetime.today().weekday() == 2
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
両端キューが空でないか調べる	len(deq) != 0
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
数列とリストについて散布図をプロットして、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データ列が何秒か調べる	ds.dt.second
棒グラフをグリーン色として描画する	plt.bar(データ列x, データ列y, color='green')
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
データ列の中に文字列があるか調べる	ds.isin([value])
nをn2分の一にする	n /= n2
カラムを四捨五入して、整数型にする	ds.round().astype(int)
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
横棒グラフをピーチパフ色を用いて描画する	plt.barh(データ列x, データ列y, color='peachpuff')
整数nをn2分の一にする	n //= n2
グラフをプレゼン用に設定する	sns.set(context='talk')
オプションで、標準出力を用いる	file = sys.stdout
タイムスタンプデータとタイムスタンプデータの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
横棒グラフをマルーン色として描画する	plt.barh(データ列x, データ列y, color='maroon')
ファイルパスを追加モードでオープンする]	open(filepath, mode='a')
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
八進数の文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
浮動小数点数に変換する	float(x)
赤い左三角マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームを列名リストを用いて並べ直して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
option: マーカーを下三角に変える	marker = 'v'
折れ線グラフを暗い赤色として描画する	plt.plot(データ列x, データ列y, color='darkred')
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
nが-9以上、9以下か	-9 <= n <= 9
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
文字列内にひとつでも小文字が含まれるかどうか確認する	any(c.islower() for c in s)
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
リストの散布図を描画する	plt.scatter(データ列x, データ列y)
option: ピンク色を使う	color = 'pink'
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
やわらかい青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
日付データの曜日を整数で使う	aDate.weekday()
浮動小数点数の小数点以下を丸める	round(x)
ダークシアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
データフレームの列を1000の位で丸めて、整数にする	df[col].round(-3).astype(int)
データフレームのカラムの中の欠損値の数をカウントする	df[col].isna().sum()
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
option: 左三角マーカーを描画する	marker = '<'
option: グラフの色をスラグレーに変更する	color = 'slategray'
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
プラットホームはMacOSかどうか調べる	sys.platform.startswith('darwin')
前もってパターンをASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
改行しなくて値をプリントする	print(value, end='')
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
ライトスチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
グリッド線	plt.grid(linewidth=3.0)
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
青色で文字列をプリントする	print(f'\033[34m{value}\033[0m')
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
プラム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
オールドレース色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
option: オールドレース色を用いる	color = 'oldlace'
散布図をタン色として描画する	plt.scatter(データ列x, データ列y, color='tan')
プロットの色をパステル調にする	sns.set(pallete='pastel')
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
縦棒グラフをティール色として描画する	plt.bar(データ列x, データ列y, color='teal')
データフレームを10の位で四捨五入する	df.round(-1)
文字列中の大文字を小文字にする	s.lower()
折れ線グラフにバツ印を使う	plt.plot(データ列x, データ列y, marker='x')
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
データ列の標本標準偏差	ds.std()
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
最大長を指定して、両端キュー	collections.deque(maxlen=n)
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
数式の積分を計算する	sympy.integrate(e)
ヒストグラムをダークスラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategray')
双方向キューが空でないか調べる	len(deq) != 0
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
文字列TSVファイルからCSVファイルをn番目の列をインデックスとして読む	pd.read_csv(filename, index_col=n)
散布図に赤い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
データフレームのリスト列の未入力値を最大値に設定する	df[aList].fillna(df[aList].max())
option: インデックスを自動的な連番にする	index_col = None
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
文字列のn番目を使う	s[n]
本日が木曜日かどうか調べる	datetime.datetime.today().weekday() == 3
option: 色を茶色に変更する	color = 'brown'
両端キューの値数	len(deq)
辞書順で文字列が文字列より前か確認する	s < s2
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
データ列の変遷を赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: スプリンググリーン色を使用する	color = 'springgreen'
option: 書き込み用に変更する	mode = 'w'
カウンタをリセットする	aCounter.clear()
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
日付データが何日か知る	aDate.day
データ列を1000の位で丸める	ds.round(-3)
データフレームを十の位で丸める	df.round(-1)
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
整数nがリストのいづれかかテストする	n in aList
データフレームのカラムを100の位で丸める	df[col].round(-2)
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
データフレームの中のカラムを等しい量になるようにビン数nでビン分割する	pd.qcut(df[col], n)
デピンク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
濃い青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
データ列の中に存在する文字列と文字列の合計をカウントする	ds.isin([value, value2]).sum()
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
option: シエナ色を使用する	color = 'sienna'
リストを展開してプリントする	print(*aList)
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
グラフの使途をスライドにする	sns.set(context='talk')
シーグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='seagreen')
折れ線グラフに赤い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
最後の項目をタプルからポップする	aDict.popitem()
クラス分類を確率的勾配降下で行う	model = sklearn.linear_model.SGDClassifier()
option: 色をライトスレイグレーに変更する	color = 'lightslategrey'
データフレームを二つの列を用いて並べてNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
ヒストグラムの色をミディアムスプリンググリーンに変更する	plt.hist(データ列, color='mediumspringgreen')
文字列は十進数字か	s.isdecimal()
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
データフレームの中にいくつ文字列が存在するか数える	df.isin([value]).sum()
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
配列の列ごとの合計値	np.sum(aArray, axis=0)
グラフを暗くする	sns.set(pallete='dark')
ヒストグラムをラベンダー色を用いて描画する	plt.hist(データ列, color='lavender')
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
数値の平方根を求める	sympy.sqrt(e)
データフレームのリスト列の欠損値を最小値で置換する	df[aList].fillna(df[aList].min())
棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
整数nのバイト長を確認する	(n.bit_length() + 7) // 8
文字列を区切りで区切って、列挙する	s.split(sep)
散布図に右三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='>')
折れ線グラフのマーカーを下三角印にする	plt.plot(データ列x, データ列y, marker='v')
option: フォントの色をネイビーに設定する	color = 'navy'
三変数の最小値	min(x, y, z)
文字列がいつまでも繰り返すイテラブルを得る	itertools.repeat(element)
データフレームの先頭n行	df.head(n)
ホワイトスモーク色でヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
フォーマットfmtとしてデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
イテラブルと列の直積	itertools.product(iterable, iterable2)
散布図にポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
データフレームとデータ列を合体させる	pd.concat([df, ds], axis=1)
option: デピンクに色を変更する	color = 'deeppink'
回帰分析を部分的最小二乗法で行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: 読み込まない列番号をnamesで指定する	skiprows = names
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
option: ダークシアンにグラフの色を設定する	color = 'darkcyan'
縦棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
青い点線を用いて数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
リストをタプルにする	tuple(aList)
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
データ列が何年か確認する	ds.dt.year
文字列の大文字小文字を入れ替える	s.swapcase()
サポートベクター分類器を作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
散布図にクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをローングリーン色を用いて描画する	plt.hist(データ列, color='lawngreen')
実数の双曲線正弦	math.sinh(x)
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
初めてのプログラムを書く	print('Hello World')
データ列の変化を色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
配列から重複を除いた配列を作る	np.unique(aArray)
両端キューの上限	deq.maxlen
option: 色をマルーンに設定する	color = 'maroon'
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
データ列を10の位で丸める	ds.round(-1)
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
行列のスカラー倍	aArray * n
行列の転置行列を求める	aArray.T
リストの末尾を見る	aList[-1]
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
折れ線グラフの色をダークシアグリーンに指定する	plt.plot(データ列x, データ列y, color='darkseagreen')
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
option: 線の種類を実線に設定する	linestyle = 'solid'
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
文字列中から正規表現に大文字・小文字を無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
リネン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
ダークレッド色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
八進文字列を整数にする	int(s, 8)
ライトイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
日付データからn秒分減らす	aDate - datetime.timedelta(seconds=n)
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
イテラブルを双方向キューに変換する	collections.deque(iterable)
データフレームを列によって整列して下の方n件を取り出す	df.sort_values(columns).tail(n)
線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
ベクトルの計算をする	import numpy as np
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
色調を明るくする	sns.set(pallete='bright')
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
ベクトルの列ごとの最大値	np.max(aArray, axis=0)
ファイルをEUCで開く]	open(filepath, encoding='euc_jp')
スレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
部分文字列が文字列の開始位置以降に含まれないかどうか確認する	s.find(sub, start) == -1
データフレームのカラムの中に文字列がある	df[col].isin([value])
分類モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgrey')
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
タプルをリストに変換する	list(aTuple)
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
空の階層化マップ	collections.ChainMap()
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
散布図のマーカーを左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
外れ値に強い単クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
CSVファイルTSVをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
データフレームから重複した行を削除する	df.drop_duplicates()
データフレームのNaNを最小値で補う	df.fillna(df.min())
ライトスレイグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
ベクトルの平均	np.mean(aArray)
ふたつの集合の対称差集合を求める	aSet.symmetric_difference(aSet2)
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
日付時刻データとタイムスタンプデータの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
集合＼集合	aSet.difference(aSet2)
リストの中の最小値	min(aList)
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
データフレームを関数の値でグループ化し、要約統計量を求める	df.groupby(関数).describe()
ファイル全体を行分割して読み込む	f.readlines()
日付データが水曜日か確認する	aDate.weekday() == 2
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
option: コーラル色を使う	color = 'coral'
現在が土曜日か調べる	datetime.datetime.today().weekday() == 5
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
ライトブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightblue')
配列とリストの散布図にrgbの▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: ブラックを使う	color = 'black'
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
方程式の解	sympy.solve(e)
正規表現patternでまとめてデータフレームのカラムの値を置換する	df[col].replace(pattern, repl, regex=True)
option: 線の種類を破線に変更する	linestyle = 'dashed'
Pandasで、文字列をフォーマットで日付データにする	pd.to_datetime(s, format='%Y-%m-%d')
データフレームを関数によってまとめたグループ	df.groupby(関数)
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
option: 印を星に変更する	marker = '*'
動作環境がLinuxか調べる	sys.platform.startswith('linux')
リストが空でないかどうか調べる	len(aList) != 0
ヒストグラムをパレットトルコイズ色を用いて描画する	plt.hist(データ列, color='paleturquoise')
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
option: エラーがあるとき例外を発生させるように指定する	errors = 'strict'
表データを各列と列の組み合わせ毎にグループ化して平均値を計算する	df.groupby([column, column2], as_index=False).mean()
シーケンスとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
実数を実数で割った余り	x % y
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
散布図をバリーウッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='burlywood')
グラフの見栄えを綺麗にする	import seaborn as sns
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
折れ線グラフの色をサドルブラウンにセットする	plt.plot(データ列x, データ列y, color='saddlebrown')
option: アクアマリン色を使う	color = 'aquamarine'
青紫色としてヒストグラムを描画する	plt.hist(データ列, color='violet')
オブジェクトがプロパティを持つかどうか	hasattr(obj, プロパティ名)
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
オブジェクトの属性の値	getattr(obj, プロパティ名)
option: 読み込まないフッタをnに設定する	skipfooter = n
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
実数に実数を掛ける	x * y
棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
変数が0に近づくときの数値の極限値を計算する	sympy.limit(e, z, 0)
nかけるn2	n * n2
ピンク色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
nが3で割り切れる	n % 3 == 0
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームのカラムは何秒か確認する	df[col].dt.second
文字列の接尾辞は部分文字列か	s.endswith(sub)
横棒グラフをローングリーン色として描画する	plt.barh(データ列x, データ列y, color='lawngreen')
円周率	math.pi
文字列が全て大文字か調べる	s.isupper()
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
ミディアムターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
日付データをn時間前にする	aDate - datetime.timedelta(hours=n)
ふたつのマップを合体する	aDict | aDict2
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
複数のシートをファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
空の辞書を作る	{}
正規表現を事前にコンパイルする	re.compile(pattern)
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
整数nを半分にする	n //= 2
少ない順にカウンタを列挙する	aCounter.most_common()[::-1]
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
データフレームの各次元の大きさを見る	df.shape
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
辞書を並べ直してJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
組内の要素が全て真か調べる	all(aTuple)
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
option: マーカーの大きさを変更する	markersize = 2.0
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
データフレームのカラムの中央値を算出する	df[col].median()
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
辞書にキーワード引数で追加する	aDict.update(**kwargs)
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
16進文字列を整数に変換する	int(s, 16)
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
option: マルーン色を使う	color = 'maroon'
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
rgbの四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
option: 32ビット整数型を使う	dtype = np.int16
データフレームのカラムの分散	df[col].var()
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
ハニーデュー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
option: カラムの名前を自動的な連番に設定する	header = None
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
八進文字列を整数に変換する	int(s, 8)
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
文字列を改行で区切る	s.splitlines()
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
配列の要素数	aArray.size
日付データが土曜日か判定する	aDate.weekday() == 5
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
nからn2の範囲で	range(n, n2)
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
日付データの曜日を使う	aDate.weekday()
コーラル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームを丸めて、整数にする	df.round().astype(int)
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームの中の列をn個に等間隔で分割する	pd.cut(df[col], n)
オレンジレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
タプルを展開してプリントする	print(*aTuple)
表データのn行より前抽出する	df[:n]
option: 色をアクアマリンに変更する	color = 'aquamarine'
オレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
option: ライトスカイブルーにフォントの色を指定する	color = 'lightskyblue'
option: 色を赤に設定する	color = 'red'
リストをタプルに変換する	tuple(aList)
データフレームの指定された列を配列にする	df[column].values
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームの中の列と列に重複があれば削除する	df.drop_duplicates(subset=column)
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
データフレームのカラムは何秒か調べる	df[col].dt.second
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
実数に実数を加える	x + y
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
リストの要素数	len(aList)
nプラスn2	n + n2
ロイヤルブルー色でヒストグラムを描画する	plt.hist(データ列, color='royalblue')
option: グラフの色をピーチパフに変更する	color = 'peachpuff'
折れ線グラフをフォレストグリーン色を使って描画する	plt.plot(データ列x, データ列y, color='forestgreen')
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
グラフの描画で明るくカラーパレットを使用する	sns.set(pallete='bright')
文字列を最後の部分文字列で分割したときの後半の文字列を使う	s.rpartition(sub)[-1]
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
散布図のマーカーを▼にする	plt.scatter(データ列x, データ列y, marker='v')
option: 菱形マーカーを描画する	marker = 'D'
実数の逆双曲線余弦	math.acosh(x)
折れ線グラフの菱形マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
option: ロイヤルブルーを使用する	color = 'royalblue'
ひとつでも非英数字が文字列中に含まれるか確認する	any(not c.isalnum() for c in s)
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
散布図の下三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
xを文字列に変換してファイルに書き込む	f.write(str(x))
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
試しに何か動かす	print('Hello World')
option: 紺碧にフォントの色を設定する	color = 'azure'
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
リストから配列を作る	np.array(aList)
ミスティローズにヒストグラムの色を設定する	plt.hist(データ列, color='mistyrose')
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
JSON形式のファイルを読み込んで、dataとする	data = json.load(fin)
データフレームから最後の列を消す	df[df.columns[:-1]]
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
イテラブルのコンビネーションを得る	itertools.combinations(iterable, n)
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
option: ダークグリーン色を使う	color = 'darkgreen'
散布図にクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
L1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
オブジェクトが集合かどうか	isinstance(obj, set)
組をナンバリングする	enumerate(aTuple)
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
ファイルパスをフォルダ名とファイル名に分割する	os.path.split(filepath)
データフレームを列の値でグループ化し、要約統計量を求める	df.groupby(column).describe()
散布図の右三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
データフレームを転置する	df.T
データフレームのリストカラムの中にいくつ文字列が含まれるかカウントする	df[aList].isin([value]).sum()
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
2を底とする実数の対数	math.log2(x)
横棒グラフを耐火レンガ色として描画する	plt.barh(データ列x, データ列y, color='firebrick')
浮動小数点数の逆双曲線正接	math.atanh(x)
ペールグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
グラフのカラーテーマを淡くする	sns.set(pallete='muted')
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
縦棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
option: 下三角印を使う	marker = 'v'
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
option: 左三角印を加える	marker = '<'
折れ線グラフの左三角印を青色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
空のカウンタを作る	collections.Counter()
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
データ列とリストの散布図にrgbの大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
スピアマンの相関係数を見る	scipy.stats.spearmanr(データ列, データ列2)
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
option: 紺を使う	color = 'darkblue'
option: ミディアムスレートブルーにグラフの色を設定する	color = 'mediumslateblue'
日付時刻データが水曜日か	aDatetime.weekday() == 2
オプションで、出力先を標準エラーに指定する	file = sys.stderr
2つの文字列は等しくないかどうか調べる	s != s2
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
option: サーモン色を用いる	color = 'salmon'
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
青い実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: ブラック色を用いる	color = 'black'
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
実数のcos	math.cos(x)
option: データ型を指定する	dtype = np.int
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
nをn2で割った余り	n % n2
折れ線グラフの色をイエローグリーンに変更する	plt.plot(データ列x, データ列y, color='yellowgreen')
データフレームのリストカラムを1000の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
グレー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
第一引数で指定されたファイルの名前	sys.argv[1]
リストをビン数nで分割する	pd.cut(aList, n)
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
折れ線プロットに凡例を付ける	plt.plot(データ列x, データ列y, label='ラベル')
リストとイテラブルについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
文字列を部分文字列で分けたときの後半の文字列を使う	s.partition(sub)[-1]
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフの線の種類を実線に指定する	plt.plot(データ列x, データ列y, linestyle='solid')
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
文字列を改行で分割し文字列リストに変換する	s.splitlines()
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
本日が水曜日	datetime.datetime.today().weekday() == 2
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
option: 紺色を使う	color = 'darkblue'
rgbの左三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: ハニーデュー色を用いる	color = 'honeydew'
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
英文字から一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
２つのオブジェクトが等しいか調べる	obj == obj2
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
▽印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
ファイルから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
閾値として二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
ロジスティック回帰モデルを作成する	model = sklearn.linear_model.LogisticRegression()
option: ライトシアン色を使う	color = 'lightcyan'
ベクトルの演算をする	import numpy as np
モデルを学習する	model.fit(説明変数, 目的変数)
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
標準入力を用いる	sys.stdin
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
option: ミントクリームにグラフの色を設定する	color = 'mintcream'
２つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
option: 文字列をセパレータで使用する	sep = s
色付きの破線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
文字の文字コードを使う	ord(ch)
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
データフレームを複数の列の値で集約して、列挙する	[(name, group) for name, group in df.groupby(columns)]
正規表現に文字列の先頭でASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
横棒グラフをダーク・スラテグレー色として描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
コーンズシルク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
数式の微分を求める	sympy.diff(e)
文字列の左側から部分文字列を消す	s.lstrip(sub)
ゼロ埋めされたブール型のベクトル	np.zeros(要素数, dtype=np.int32)
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
黒い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームのカラムの欠損値を最頻値で置換する	df[col].fillna(df[col].mode().iloc[0])
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
データフレームの欠損値を最小値に変更する	df.fillna(df.min())
文字列がリストに含まれない	element not in aList
option: 星マーカーを描画する	marker = '*'
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
線グラフをコーンズシルク色として描画する	plt.plot(データ列x, データ列y, color='cornsilk')
中央値で配列をビン分割する	pd.qcut(aArray, 2)
無限にオブジェクトが繰り返すイテラブル	itertools.repeat(element)
散布図の色をやわらかい青にする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データ列の標準偏差	ds.std()
縦棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
データフレームのリストカラムを百の位で丸める	df[aList].round(-2)
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
文字列を部分文字列で二分する	s.partition(sub)
オーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
ネイビー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
グラフの補助目盛を有効にする	plt.minorticks_on()
nをn2で割った余りをnに代入する	n %= n2
赤い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームを各列と列の組み合わせ毎にグループ化し、、分散を計算する	df.groupby([column, column2], as_index=False).var()
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: ブラウン色を使う	color = 'brown'
行列の列ごとの標準偏差を求める	np.std(aArray, axis=0)
データフレームを各列毎にグループ化して、列の合計を算出する	df.groupby(column)[column2].sum()
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
赤い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
縦軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
縦棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
両端キューの左側から要素を取り除く	deq.popleft()
日付データが日付データより後ろか	aDate > aDate2
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
数値の数値を計算する	float(e)
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
option: ポイントマーカーを用いる	marker = '.'
出力ストリーム全体をリストに変換する	[s.strip() for s in f.readlines()]
ミディアムバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
実数のn乗	x ** n
散布図の印を大バツにする	plt.scatter(データ列x, データ列y, marker='X')
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
リストのそれぞれを関数でフィルタする	map(func, iterable)
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
等差数列を行列にする	np.arange(開始値, 終了値, 等差)
option: 色を貝殻に設定する	color = 'seashell'
破壊的に二つの列によってによってデータフレームをソートする	df.sort_values(by=['A', 'B'], inplace=True)
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
部分文字列が部分文字列で始まる	s.startswith(sub)
青い上三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
横棒グラフの色を濃い青にする	plt.barh(データ列x, データ列y, color='darkblue')
ヒストグラムを白くする	plt.hist(データ列, color='w')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
集合が空集合でない	len(aSet) != 0
両端キューをタプルに変換する	tuple(deq)
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
オブジェクトのバイトサイズを知る	sys.getsizeof(obj)
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
２つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
文字列をカンマで区切って列挙する	s.split(',')
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
一点鎖線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
変数を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
散布図を赤い四角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
散布図のクロス印を赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
rgbの三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストとリストについての散布図にクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
整数最小公倍数	math.lcm(n, n2)
配列の長さを制限する	collections.deque(iterable, maxlen=n)
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
実数を整数に変換する	int(x)
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
分子と分母から分数を作る	fractions.Fraction(分子, 分母)
グラフのサイズを変更する	plt.figure(figsize=(横幅, 高さ))
縦棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
オブジェクトは集合クラスか調べる	isinstance(obj, set)
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
実数のn乗の実数剰余	pow(x, n, y)
インディゴ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
option: マーカーを下三角に変更する	marker = 'v'
カウンタをイテラブルをカウントして更新する	aCounter.update(iterable)
Pandasで、日付データのデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
option: グラフの色をターコイズに設定する	color = 'turquoise'
n進文字列を整数に変換する	int(s, n)
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
組を引数として展開して表示する	print(*aTuple)
要素ひとつのタプルを得る	(element,)
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
縦棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
二つのデータフレームを列をキーとして左結合する	pd.merge(df, df2, on=column, how='left')
散布図の下三角印を赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データ列の最頻値	ds.mode()
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
option: 大バツマーカーを使う	marker = 'X'
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
option: ホットピンクにグラフの色を設定する	color = 'hotpink'
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
データ列のパーセンタイルを可視化する	plt.boxplot(データ列)
マップのキーを列挙する	aDict.keys()
ファイル全体を行単位で分割して読む	f.readlines()
箱髭図にラベルをつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
真上位集合か調べる	aSet > aSet2
リストの平均	sum(aList)/len(aList)
フローラルホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
2つのデータフレームを列をキーにして左結合する	pd.merge(df, df2, on=column, how='left')
rgbの左三角マーカーをリストと数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
xが一桁の数か	-9 <= x <= 9
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
ファイルのフォルダ名を見る	os.path.dirname(filepath)
nの無限な数列	itertools.repeat(n)
トマト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
ヒストグラムの色をチョコレートに変更する	plt.hist(データ列, color='chocolate')
組内の要素は少なくともひとつ真かどうか	any(aTuple)
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
縦棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
グラフの用途を画面に変更する	sns.set(context='notebook')
スピアマン相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
ラベンダーにヒストグラムの色を設定する	plt.hist(データ列, color='lavender')
リストと配列について散布図を描画し、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
option: ローングリーン色を使う	color = 'lawngreen'
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
散布図の下三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
文字列から部分文字列を全て除去する	s.replace(sub, '')
文字列をセパレータで区切って、列挙する	s.split(sub)
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
実数の双曲線余弦の逆数	math.acosh(x)
データフレームのリスト列の値が欠損値か調べる	df[aList].isna()
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
スラグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
データ列の各データ値の出現数	ds.value_counts()
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
新しいロッソ回帰モデルを新規作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
表データの列が文字列が含まれない行を取り出す	df[not df[column].str.contains(s)]
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
線グラフの色をディープスカイブルーにセットする	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
option: 色をカデットブルーに設定する	color = 'cadetblue'
nの二進数リテラル	bin(n)
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
データ列は何分か調べる	ds.dt.minute
データフレームの列がxより多いデータを取り出す	df[df[column] > x]
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
ヒストグラムの色をダークオーキッドにする	plt.hist(データ列, color='darkorchid')
プロットのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
option: ダークシアン色を使う	color = 'darkcyan'
データフレームの列の未入力値を最小値にセットする	df[col].fillna(df[col].min())
現在が何時か知る	datetime.date.today().hour
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
カラムの空文字をNaNに変換しドロップする	ds.replace('', np.nan).dropna()
文字列の先頭で正規表現にケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
nかつn2	n and n2
黒い左三角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
Pythonパスの一覧	sys.path
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
二進文字列をbytesizeバイトのバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: フォントの色をダークバイオレットに設定する	color = 'darkviolet'
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
リストとイテラブルについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムの色をスプリンググリーンに変更する	plt.hist(データ列, color='springgreen')
rgbのダイアモンドマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
列を100の位で丸めて整数にする	ds.round(-2).astype(int)
数式の数値を求める	float(e)
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
文字列リストにイテラブルを変換して、部分文字列で連結する	sub.join(map(str, iterable))
option: スチールブルーにフォントの色を設定する	color = 'steelblue'
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
オブジェクトの属性の値を値に設定する	setattr(obj, プロパティ名, 値)
Pandasでデータフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
option: グラフの色をモカシンに設定する	color = 'moccasin'
ヒストグラムを紺色として描画する	plt.hist(データ列, color='darkblue')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
行列の列	aArray[:, 列番号]
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
nがリストのどれかかどうか確認する	n in aList
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームを'A'列と'B'列によってによって降順に並べる	df.sort_values(by=['A', 'B'], ascending=False)
データフレームの相関行列	df.corr()
option: エラーがあるとき、例外を発生させる	errors = 'strict'
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
option: フォントの色をスレートブルーに指定する	color = 'slateblue'
option: 読み込み用にセットする	mode = 'r'
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
文字列の最後から部分文字列を探す	s.rfind(sub)
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
ヒストグラムの色をサンディーブラウンに指定する	plt.hist(データ列, color='sandybrown')
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
グレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
縦棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
データフレームをに箱ひげ図を用いてグラフ化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
商と余りを同時に計算する	divmod(x, y)
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
辞書から項目名の値	aDict.get(key)
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
データフレームを列でグループ化して、列の要約統計量を計算する	df.groupby(column).describe()[column2]
ミディアムバイオレットレッドにヒストグラムの色を変更する	plt.hist(データ列, color='mediumvioletred')
黒い▲マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
折れ線グラフに赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
ファイルからファイル名を使う	os.path.basename(filepath)
無限にカウントアップする	itertools.count()
データフレームからn行、サンプリングする	df.sample(n)
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
縦棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
配列とリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ケンドールの相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
スプリンググリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
線グラフをアリスブルー色として描画する	plt.plot(データ列x, データ列y, color='aliceblue')
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
組をリバースする	reversed(aTuple)
option: 大きい順にする	ascending = False
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
option: イエローグリーン色を使う	color = 'yellowgreen'
ロバスト推定としてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
散布図に赤い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
分子割る分母	fractions.Fraction(分子, 分母)
シーケンスを累加する	itertools.accumulate(iterable)
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
ゲインズボロ色を用いてヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
ヒストグラムを上限から下限の範囲で描画する	plt.hist(データ列, range=(start, end))
文字列が組に含まれるか調べる	element in aTuple
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
データフレームの最初のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: ダークカーキ色を使う	color = 'darkkhaki'
option: ゴーストホワイトを使う	color = 'ghostwhite'
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
棒プロットの横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
nがn2以下	n <= n2
データフレームのポイントプロットをプロットする	sns.pairplot(hue='カテゴリ列', data=df)
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
タイムスタンプデータが日付時刻データより前	aDatetime < aDatetime2
データフレームのリスト列の相関行列ケンドール順位相関係数で	df[aList].corr(method='kendall')
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
option: 色をミディアムオーキッドに設定する	color = 'mediumorchid'
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
散布図に下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
データフレームのカラムの中に文字列とがあるか調べる	df[col].isin([value, value2])
タイムスタンプデータからn日を減算する	aDatetime - datetime.timedelta(days=n)
本日をタプルに変換する	datetime.datetime.today().timetuple()
データフレームを関数によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
下三角印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
散布図を黒いダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
赤い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
辞書の値の一覧を得る	aDict.values()
ダークスレートブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
耐火レンガにヒストグラムの色を設定する	plt.hist(データ列, color='firebrick')
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
option: 色をディムグレーに設定する	color = 'dimgrey'
リスト内の要素が全て真か	all(aList)
ファイルから1文字、読み込む	f.read(1)
散布図の大バツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
配列の行ごとの平均値	np.mean(aArray, axis=1)
nが5の倍数か	n % 5 == 0
折れ線グラフの色を紺に指定する	plt.plot(データ列x, データ列y, color='darkblue')
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
文字列の先頭の不要な空白やタブを除去する	s.lstrip()
横棒グラフをダークシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
二変数の最大値を求める	max(x, y)
option: グラフの色をミディアムシアグリーンにセットする	color = 'mediumseagreen'
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
option: グラフの色をマゼンタに設定する	color = 'magenta'
グラフのデータラベルの場所を指定する	plt.legend(loc=(x, y))
グリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
文字コードの最大値	sys.maxunicode
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
左三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='<')
ペルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
単位正方行列を作る	np.identity(n)
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
option: ペールグリーン色を使う	color = 'palegreen'
リストとリストについての散布図に▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
２つのデータフレームを列をキーとして内部結合する	pd.merge(df, df2, on=column, how='inner')
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
オブジェクトが関数か調べる	callable(obj)
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
横棒グラフをホワイトスモーク色として描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
option: namesをカラムの名前に設定する	names = names
配列と配列についての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
昇順に'A'列でデータフレームを並べ直す	df.sort_values(by='A', ascending=True)
文字列を水色にする	f'\033[36m{value}\033[0m'
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
option: 深さを制限する	maxdepth = n
データフレームから重複した行をドロップして更新する	df.drop_duplicates(inplace=True)
折れ線グラフのクロスマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
バイトオーダを知る	sys.byteorder
線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
昇順にデータフレームを破壊的に'A'列を用いてソートする	df.sort_values(by='A', ascending=True, inplace=True)
両端キューを空にする	deq.clear()
リストをビニングする	pd.cut(aList, aList)
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
ガウス過程分類モデルを準備する	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
ダーク・スラテグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
クラス分類の偽陰性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
本日の月	datetime.datetime.today().month
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
逆順の双方向キュー	reversed(deq)
データフレームの指定された名前リストの列を抽出する	df[columns]
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
日付データは何曜日か知る	aDate.weekday()
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
リストの末尾の要素	aList[-1]
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
実数の指数	math.frexp(x)[1]
nからn2までの整数列を作る	list(range(n, n2+1))
option: フォントの色をオリベドラブに設定する	color = 'olivedrab'
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
横軸の目盛に文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームのカラムを1000の位で丸める	df[col].round(-3)
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームの指定された列をリストに変換する	df[column].values.tolist()
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
nが3の倍数か調べる	n % 3 == 0
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
2つのデータフレームを縦方向につなぐ	pd.concat([df, df2])
変数について数式の微分を行う	sympy.diff(e, z)
スクリプト名	sys.argv[0]
ライトブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightblue')
クラス分類の予測精度をヒートマップを用いて見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
２次元リストを転置する	[list(x) for x in list(zip(*aList))]
データフレームのカラムと列の相関行列ケンドール相関係数で	df[[column, column2]].corr(method='kendall')
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
ビン数nとして配列をビン分割する	pd.cut(aArray, n)
棒グラフを青色として描画する	plt.bar(データ列x, データ列y, color='blue')
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
option: セパレータをタブにする	sep = '\t'
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
カテゴリ別で色分けしてデータフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
要素が集合のメンバーでないか調べる	element not in aSet
ディープスカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
折れ線グラフの色をスレートブルーに変更する	plt.plot(データ列x, データ列y, color='slateblue')
option: ベージュ色を使う	color = 'beige'
列を累加する	itertools.accumulate(iterable)
オブジェクトがリストかタプル	isinstance(obj, (list)
Pythonのバージョンを知る	sys.version
nがn2で割り切れるか	n % n2 == 0
文字列は全て識別子名か調べる	s.isidentifier()
カラムの中に文字列と文字列があるかどうか調べる	ds.isin([value, value2])
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
SJISでJSONLファイルにデータフレームを保存する	df.to_csv(filename, encoding='shift_jis')
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
折れ線グラフの線の種類を一点鎖線に指定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
スノー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
データ列のユニークな値の個数	ds.nunique()
文字列がアスキー文字	s.isascii()
カラーバーを水平で付ける	plt.colorbar(orientation='horizontal')
セットが空でないか	len(aSet) != 0
文字列の出力を改行なしに行う	print(value, end='')
半透明の破線でリストの推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
列のイミュータブルなセット	frozenset(iterable)
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
二つのデータフレームを結合する	pd.merge(df, df2)
nが偶数か調べる	n % 2 == 0
データフレームのカラムの曜日数を求める	df[col].dt.dayofweek
イテラブルとシーケンスをペアのリストにする	itertools.zip_longest(iterable, iterable2)
縦棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
リストとリストリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
代数計算を使う	import sympy
正規化された度数分布図をプロットする	plt.hist(データ列, density=True)
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
全要素を０で初期化した行列	np.zeros(行数, 列数)
文字列の大文字小文字を変換する	s.casefold()
プロットに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
リストとリストの散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
オレンジにヒストグラムの色を指定する	plt.hist(データ列, color='orange')
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
クラス分類を勾配ブースティングでする	model = sklearn.ensemble.GradientBoostingClassifier()
option: 線の種類を点線に設定する	linestyle = 'dotted'
行列の標準偏差	np.std(aArray)
データフレームから指定された二つの列を抽出する	df[[column, column2]]
option: グラフの色をホットピンクに設定する	color = 'hotpink'
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
散布図の四角印を青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
データフレームの列の値をValueMapで一度に置き換える	df[col].replace(ValueMap)
option: バッファリングを無効にする	buffering = 0
リストとリストについての散布図に赤い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
リストとリストについての散布図に黒いクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
数式を簡単にする	sympy.sympify(e)
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
ロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
カーキ色でヒストグラムを描画する	plt.hist(データ列, color='khaki')
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
option: ピーチパフ色を使う	color = 'peachpuff'
データフレームを各カラムと列の組み合わせ毎に集約して、合計を計算する	df.groupby([column, column2], as_index=False).sum()
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
0からN未満までの配列	np.arange(N)
option: 色を黄色に指定する	color = 'yellow'
現在の日付時刻	datetime.datetime.today()
紺色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
0からnの範囲	range(n)
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
日付時刻データの秒数	aDatetime.second
散布図をミディアムスプリンググリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
現在を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
option: 黄緑を使う	color = 'chartreuse'
散布図にポイントマーカーを加える	plt.scatter(データ列x, データ列y, marker='.')
PandasでdateStringを日付データに変換する	pd.to_datetime(dateString)
option: オリベドラブ色を使用する	color = 'olivedrab'
データフレームからn番目のカラムを除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
マルーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
行列の列ごとの分散	np.var(aArray, axis=0)
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
option: パパイヤウィップ色を使う	color = 'papayawhip'
option: フォントの色をアクアマリンに変更する	color = 'aquamarine'
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
データフレームのカラムの欠損値を直後の値に指定する	df[col].fillna(method='bfill')
データフレームのリストカラムの文字列を欠損値にする	df[aList].replace(s, np.nan)
貝殻色でヒストグラムを描画する	plt.hist(データ列, color='seashell')
エラーなくリストのオブジェクトの位置を見る	aList.index(element) if element in aList else -1
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
両端キュー中の要素のインデックス	deq.index(element)
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
データフレームを各列毎にグループ分けし、、文字列というグループの大きさを求める	df.groupby(column).size()[s]
横軸の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
要素∉集合	element not in aSet
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
キューをタプルに変換する	tuple(deq)
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
双方向キューのn番目に要素を挿入する	deq.insert(n, element)
データフレームのNaNを最小値に設定する	df.fillna(df.min())
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
データフレームのstart行目からend行目まで選択する	df[start:end]
1行標準入力から読む	sys.stdin.readline()
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
リストとリストの散布図に赤い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
横棒グラフをチョコレート色として描画する	plt.barh(データ列x, データ列y, color='chocolate')
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
値が集合のメンバーでない	element not in aSet
ASCII限定として文字列の先頭で正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
リストと配列についての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
データ列の推移を色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームをインデックスによってソートする	df.sort_index()
列をキーにして2つのデータフレームをジョインする	pd.merge(df, df2, on=column)
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
x座標の目盛の値を変更する	plt.xticks(目盛りの値リスト)
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
データフレームの列がx、かつ列がx2であるデータを抽出する	df[(df[column] == x) & (df[column2] == x2)]
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
タプルを反転する	reversed(aTuple)
列によってデータフレームをグループ化して、個数を求める	df.groupby(column).count()
積み上げ横棒プロットを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームから末尾の列を除く	df[df.columns[:-1]]
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
ヒストグラムをビスク色を用いて描画する	plt.hist(データ列, color='bisque')
year年month月day日hour時minute分を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
現在が何分か知る	datetime.date.today().minute
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
ロバスト推定を使ってクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
回帰分析をブースティングで行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
アヤメのデータセットをロードする	sns.load_dataset('iris')
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
二変数の最も小さい値	min(x, y)
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
データフレームのひとつのカラムだけ説明変数にする	説明変数 = df[['列名']]
事前に正規表現をコンパイルする	re.compile(pattern)
折れ線グラフに大バツマーカーを加える	plt.plot(データ列x, データ列y, marker='X')
折れ線プロットをプロットして、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
本日が土曜日かどうか確認する	datetime.datetime.today().weekday() == 5
option: パレットトルコイズ色を使う	color = 'paleturquoise'
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
データフレームの列の名前一覧で指定されたカラムを消す	df.drop(columns, axis=1)
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
度数分布図でデータ列を可視化する	plt.hist(データ列)
多次元データを多次元尺度構成法を用いて淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
データフレームのカラムの空文字を未入力値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
線グラフをライトブルー色として描画する	plt.plot(データ列x, データ列y, color='lightblue')
列をリストとして抽出する	df[column].values.tolist()
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
データフレームを列の値によってグループ化して、それぞれのグループ毎の標準偏差を計算する	df.groupby(column).std()
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
nとn2の論理和を求める	n | n2
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
タプルのn番目以降の部分を取り出す	aTuple[n:]
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
ISO書式の文字列からタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
文字列が組に含まれないか調べる	element not in aTuple
グラフで使う横軸にラベルを付ける	plt.xlabel('x軸ラベル')
最大長nのキューを準備する	collections.deque(maxlen=n)
無限リストを得る	itertools.count()
option: 色をグレーに設定する	color = 'gray'
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
散布図の左三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
option: トマトにフォントの色を指定する	color = 'tomato'
二つのデータフレームを列'A'と列'B'をキーにして結合する	pd.merge(df, df2, left_on='A', right_on='B')
option: ライトサーモン色を使用する	color = 'lightsalmon'
有理数の分子	q.numerator
CSVからデータフレームを読む	pd.read_csv(filename, sep=',')
option: 三角マーカーを加える	marker = '^'
文字列を大文字・小文字を無視してパターンで区切る	re.split(pattern, s, flags=re.IGNORECASE)
真紅色としてヒストグラムを描画する	plt.hist(データ列, color='crimson')
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データ列の中央値を計算する	ds.median()
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
横棒グラフをミスティローズ色を用いて描画する	plt.barh(データ列x, データ列y, color='mistyrose')
折れ線グラフの△マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ミントクリーム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
配列の最大値	np.max(aArray)
線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
バイナリ書き込みモードでファイルをオープンして]fとする	f = open(filepath, mode='wb')
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
縦棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
文字列を最初の部分文字列によって二つに分ける	s.partition(sub)
ひとつでも非小文字が文字列中に含まれるか調べる	any(not c.islower() for c in s)
実数の二乗	x ** 2
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
データ列の歪度	ds.kurt()
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
横棒グラフをダークゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムをダークレッド色を用いて描画する	plt.hist(データ列, color='darkred')
リストをn倍する	aList * n
option: 淡いピンク色色を使用する	color = 'lightpink'
レベッカパープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
小数点以下n桁まで表示できるようにする	pd.set_option('precision', n)
option: ダークグレーにグラフの色をセットする	color = 'darkgrey'
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
ボックスチャートにラベルを設定する	plt.boxplot([データ列, データ列], labels=['A', 'B'])
シーケンスから重複なく、n要素選ぶ	random.sample(iterable, k=n)
回帰分析をランダム性を追加したランダムフォレストで行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
散布図をフローラルホワイト色として描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
リストと配列リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
日付時刻データをタプルに変換する	aDatetime.timetuple()
印字可能な文字を全部使う	string.printable
二つの文字列を辞書順で比較する	s < s2
データフレームの相関行列を算出する	df.corr()
行列のユニークな要素	np.unique(aArray)
option: 線の種類を一点鎖線に変更する	linestyle = 'dashbot'
積み上げ棒プロットを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
グラフの用途をスライドに設定する	sns.set(context='talk')
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
option: パウダーブルー色を使う	color = 'powderblue'
データフレームの重複していない行のみ	df[not df.duplicated(keep=False)]
option: 書き込みモードに設定する	mode = 'w'
自然数のGCD	math.gcd(n, n2)
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
データ列とイテラブルについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
リストを二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
データフレームの列がxでないデータを取り除く	df[df[column] == x]
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
リストをビン数nとしてビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
赤い点線を使ってイテラブルの移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
コマンド引数を列挙する	sys.argv[1:]
辞書にキーワード引数で更新する	aDict.update(**kwargs)
散布図にrgbの四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c=rgb)
カラムの空文字を未入力値に変換し、ドロップする	ds.replace('', np.nan).dropna()
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
本日は何月か知る	datetime.datetime.today().month
二つの文字列を文字列で区切って表示する	print(value, value2, sep=s)
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
ヒストグラムの色をオレンジレッドに変更する	plt.hist(データ列, color='orangered')
option: 淡いピンク色色を使う	color = 'lightpink'
実数のアークコサインを計算する	math.acos(x)
nが負の数か調べる	n < 0
小数点数の角度	math.degrees(x)
option: マーカーをバツに変更する	marker = 'x'
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
オールドレースにヒストグラムの色を設定する	plt.hist(データ列, color='oldlace')
線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
データフレームから型のカラムを抽出する	df.select_dtypes(ty)
ファイルを書き込みできるように文字列の示すエンコーディングでオープンする]	open(filepath, mode='w', encoding=s)
option: 行列のデータ型を指定する	dtype = np.int8
x座標の最大・最小値を変更する	plt.xlim(最小値, 最大値)
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
イエローグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='yellowgreen')
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
折れ線グラフの星印の線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
縦棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
option: どの行もヘッダに設定しない	header = None
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
リストとリストの散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
カラムの分散	ds.var()
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
珊瑚色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
黄緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
文字列が全て十進数字	s.isdecimal()
データフレームのデータ型の一覧	df.dtypes
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図のバツマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
両端キューをdequeue	deq.popleft()
option: モカシン色を用いる	color = 'moccasin'
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
標準入力から入力される	input()
ライトブルーにヒストグラムの色を変更する	plt.hist(データ列, color='lightblue')
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームのカラムのNaNを最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
ファイル名がテキストファイル	filename.endswith('.txt')
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
散布図のダイアモンドマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データ列をカテゴリデータに変換する	ds.astype(object)
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
文字列のプレフィックスは部分文字列かどうか調べる	s.startswith(sub)
nのビット長	n.bit_length()
option: エンコーディングをEUCに指定する	encoding = 'euc_jp'
辞書からキーの値	aDict.get(key)
Pandasでデータ列のエポック秒からタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
option: シスル色を使う	color = 'thistle'
文字列の先頭から部分文字列を見つける	s.find(sub)
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
n個にデータフレームの中のカラムをビン分割し、、namesのラベルをつける	pd.cut(df[col], n, labels=names)
二つの数値を順にプリントする	print(value, value2)
日付時刻データの分数	aDatetime.minute
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
文字列がリストに含まれないか	element not in aList
配列を等間隔でn個にビニングする	pd.cut(aArray, n)
nとn2の値を足してnに代入する	n += n2
ミディアムスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: マーカーの色をブラックにする	markerfacecolor = 'black'
データフレームのstart行目からend行目まで抽出する	df[start:end]
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
オブジェクトが浮動小数点数型	isinstance(obj, float)
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
実数から実数を引く	x - y
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
空行をプリントする	print()
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
グリッド線を黒くする	plt.grid(color='k')
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列の接頭辞が部分文字列	s.startswith(sub)
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
ヒストグラムの色をバリーウッドに指定する	plt.hist(データ列, color='burlywood')
リストを太字でプリントする	print(f'\033[1m{value}\033[0m')
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
option: ライトスレイグレーを使う	color = 'lightslategrey'
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
文字列を末尾から空白で区切る	s.rsplit()
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
ライムにヒストグラムの色を変更する	plt.hist(データ列, color='lime')
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
option: n番目のカラムをインデックスに設定する	index_col = n
データ列を2つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
JSONフォーマットの文字列を辞書にする	json.loads(jsonString)
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
上位集合か調べる	aSet.issuperset(aSet2)
データフレームのリスト列を100の位で四捨五入して、整数型にする	df[aList].round(-2).astype(int)
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
散布図をダークスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
文字列の開始位置から終了位置までの範囲で部分文字列の登場回数をカウントする	s.count(sub, start, end)
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
書式を辞書でフォーマットする	formatText.format_map(aDict)
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
データフレームの全列の相関を可視化する	sns.pairplot(df)
点線を用いて数列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
option: スプリンググリーン色を使う	color = 'springgreen'
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
最後の部分文字列で文字列を分割した時の前半の文字列を見る	s.rpartition(sub)[0]
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
option: グラフの色をカーキに設定する	color = 'khaki'
実数が無限大か	math.isinf(x)
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
nが一桁の数か調べる	-9 <= n <= 9
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
にバイオリン図でデータフレームのカラムを見る	sns.violinplot(x='カテゴリ列', y='列', data=df)
２つの変数を同じ値にする	x = y = n
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
データ列を100の位で丸める	ds.round(-2)
ファイルパスとfilenameを結合する	os.path.join(filepath, filename)
rgbの丸マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
縦棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
データ列の曜日の名前	ds.dt.weekday_name
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
option: 追加モードに設定する	mode = 'a'
データフレームのリストカラムの歪度	df[aList].kurt()
折れ線グラフに黒いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームの母標準偏差を求める	df.std(ddof=0)
クリムゾン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
option: グラフの色をミディアムスプリンググリーンにする	color = 'mediumspringgreen'
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
ふたつの集合の積集合	aSet.intersection(aSet2)
実数の正弦を算出する	math.sin(x)
データフレームを列によって集約し、合計を計算する	df.groupby(column).sum()
入力から二つの文字列を読む	A, B = map(str, input().split())
配列とリストについての散布図に文字列という凡例用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
ライトグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
nまでの偶整数列	list(range(2, n, 2))
列を用いてデータフレームをソートし、上位を取り出す	df.sort_values(columns).head(n)
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
整数nの8進数文字列を使う	oct(n)[2:]
文字列の大文字と小文字を交換する	s.swapcase()
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
配列の最小	np.min(aArray)
最後の項目を辞書からポップする	aDict.popitem()
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
データフレームのカラムを10の位で丸める	df[col].round(-1)
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
縦棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
折れ線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
ファイルパスの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
ゴールド色でヒストグラムを描画する	plt.hist(データ列, color='gold')
イテラブルでカウンタを更新する	aCounter.update(iterable)
データ列が何日か見る	ds.dt.day
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
option: グラフの色をシスルに設定する	color = 'thistle'
データフレームを関数の値によってグループ化する	df.groupby(関数)
最大長nの両端キューを作る	collections.deque(maxlen=n)
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
option: 値を置き換える	inplace = True
option: グラフの色をアイボリーに設定する	color = 'ivory'
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
オプションで、出力先を標準出力に設定する	file = sys.stdout
ヒストグラムをオーキッド色を使って描画する	plt.hist(データ列, color='orchid')
プロットで用いる縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
散布図のポイントマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
点線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
標準入力	sys.stdin
オレンジ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
集合にイテラブルを追加更新する	aSet.update(iterable)
ミディアムブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
目盛り線	plt.grid(linewidth=3.0)
データ列のヒストグラムを描画する	plt.hist(データ列)
option: サーモンを使う	color = 'salmon'
ミディアムアクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumaquamarine')
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
線グラフの色を青緑に変更する	plt.plot(データ列x, データ列y, color='teal')
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
少ない順番にカウンタを列挙する	aCounter.most_common()[::-1]
スクリプトファイルのディレクトリ名を使う	os.path.dirname(os.path.abspath(__file__))
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
option: グラフの色をカデットブルーにする	color = 'cadetblue'
データフレームの指定された列を抽出する	df[column]
文字列が文字列リストに含まれるか調べる	s in aStringList
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
キーが辞書に存在するか調べる	key not in aDict
データフレームを複数の列の値によってグループ化し、基本統計量を計算する	df.groupby(columns).describe()
データフレームを表示するときヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
数値を積分する	sympy.integrate(e)
赤い▲マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='r')
数式の変数を数式で置き換える	e.subs(z, e2)
ヒストグラムの色をダークブルーに設定する	plt.hist(データ列, color='darkblue')
グリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
データフレームが重複しているか調べる	df.duplicated()
茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
散布図にrgbの丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
青い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
カウンタの文字列のカウント	aCounter[element]
2つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
n個の文字列があるリスト	[element] * n
印字できる文字列にする	ascii(x)
目的変数をモデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
新しい部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ヒストグラムをミディアムアクアマリン色を用いて描画する	plt.hist(データ列, color='mediumaquamarine')
青緑にヒストグラムの色を設定する	plt.hist(データ列, color='teal')
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
Pandasで、データ列をPandasの日付型に変換する	pd.to_datetime(ds)
数を実数で除算した余り	x % y
グラフをデフォルトでいい感じに指定する	sns.set()
書き込み用に文字コードtextとしてファイルパスをオープンする]	open(filepath, mode='w', encoding=text)
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
実数から数を引く	x - y
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
option: 整数型を使う	dtype = np.int
データ列とリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
option: ミッドナイトブルーを用いる	color = 'midnightblue'
xを論理値に変換する	bool(x)
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
双方向キューの末尾	deq[-1]
option: グラフの色をオーキッドに変更する	color = 'orchid'
option: グラフの色をミディアムパープルに変更する	color = 'mediumpurple'
横棒グラフをオリーブ色として描画する	plt.barh(データ列x, データ列y, color='olive')
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
option: ベージュに色を設定する	color = 'beige'
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
リストから配列を作成する	np.array(aList)
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
三二ビット整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
横棒グラフをグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='gray')
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
横棒グラフを描画する	plt.barh(ラベル列, データ列)
オブジェクトが集合型か調べる	isinstance(obj, set)
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
方程式として数式の変数の解を求める	sympy.solve(e, z)
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
nの桁数	len(str(n))
横棒グラフをコーンフラワーブルー色を使って描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
xが1、もしくは2	x == 1 or x == 2
option: 配列のデータ型を指定する	dtype = np.int8
グリッド線を白くする	plt.grid(color='w')
データフレームを列によってグループ化してグループごとの個数を算出する	df.groupby(column).count()
散布図の丸印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
縦棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
オプションで、標準エラーを出力先にする	file = sys.stderr
十六進文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
マッピングに辞書の項目を加えて、更新する	aDict.update(aDict2)
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
option: 下三角マーカーを使う	marker = 'v'
データフレームの中の列を分割数nでビン分割する	pd.cut(df[col], n)
グラフをスライド用にする	sns.set(context='talk')
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
nからn2の値を引いてnに代入する	n -= n2
行列の行ごとの最大値	np.max(aArray, axis=1)
マッピングの浅いコピーを生成する	aDict.copy()
データフレームのカラムのどの値が頻出か見る	df[col].mode()
実数を小数点以下で丸める	round(x, n)
文字列の先頭でパターンにマッチするか調べる	re.match(pattern, s)
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
整数nが配列のどれか	n in aArray
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
option: スレートブルー色を使う	color = 'slateblue'
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
グラフの色を淡くする	sns.set(pallete='muted')
列をリストを境界値として分割する	pd.cut(ds, aList)
フォレストグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ベクトルの分散	np.var(aArray)
散布図に赤い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
折れ線グラフに右三角マーカーを加える	plt.plot(データ列x, データ列y, marker='>')
グラフからグリッド線を消す	plt.grid(False)
データフレームのカラムが何月か見る	df[col].dt.month
データフレームのリスト列の相関行列	df[aList].corr()
グラフ中のフォントを設定する	sns.set(font=フォント名)
option: 青色を使う	color = 'blue'
縦棒プロットを描画する	plt.bar(ラベル列, データ列)
グラフのカラーテーマを色差別なくする	sns.set(pallete='colorblind')
データフレームのカラムをグループ化してヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
オブジェクトの参照カウント	sys.getrefcount(obj)
データ列の折れ線グラフをダイアモンド印で描画する	plt.plot(データ列x, データ列y, marker='D')
両端キュー中の数値のインデックス	deq.index(element)
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
二つのオブジェクトが同一参照か調べる	obj is obj2
キーが辞書上で定義されているか調べる	key in aDict
option: ▲マーカーを使用する	marker = '^'
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
折れ線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
リストとデータ列の散布図にrgbの下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
nの8進リテラル	oct(n)
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
散布図の四角印を黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
縦棒グラフを描いて、中央寄せする	plt.bar(ラベル列, データ列, align='center')
ヒストグラムの色をダークシアンにセットする	plt.hist(データ列, color='darkcyan')
ピーチパフ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
浮動小数点数の双曲線余弦の逆数	math.acosh(x)
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
option: 配列のデータ型を指定する	dtype = np.int
option: グラフの色をミディアムアクアマリンに変更する	color = 'mediumaquamarine'
双方向キューの値をインプレースに反転する	deq.reverse()
スラグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
データフレームのメディアン	df.median()
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
黄色いグリッド線を引く	plt.grid(color='y')
ブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
カウンタを辞書に変換する	dict(aCounter)
散布図にrgbの▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列を太文字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
散布図のダイアモンドマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
データ列間の決定係数を算出する	sklearn.metrics.r2_score(データ列, データ列2)
option: NaNも無視しない	dropna = True
Pythonパスにを追加する	sys.path.append(dir)
辞書の浅いコピーを作る	aDict.copy()
線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
タプルを展開して表示する	print(*aTuple)
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
option: マーカーを三角に変更する	marker = '^'
散布図を黒い大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
オプションで標準出力に出力する	file = sys.stdout
折れ線グラフの色をライトスレイグレーにセットする	plt.plot(データ列x, データ列y, color='lightslategray')
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
半透明の一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
リストをビン分割する	pd.cut(aList, aList)
ダークカーキ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
浮動小数点数のn乗して実数による余り	pow(x, n, y)
縦棒グラフを描画し、中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームのリストカラムの要約統計量	df[aList].describe()
散布図をダークグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkgray')
折れ線グラフをライトサーモン色を使って描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
リストをひとつ置きに取り出す	aList[::2]
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
option: グラフの色をデピンクに設定する	color = 'deeppink'
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
行列の列ごとの最大値	np.max(aArray, axis=0)
実数が有限か調べる	math.isfinite(x)
option: スチールブルー色を使う	color = 'steelblue'
データフレームの列の中にいくつが存在するか数える	df[col].isin([value]).sum()
横軸だけグリッド線	plt.grid(axis='x')
リストの文字列が最初に見つかるインデックス	aList.index(element)
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
多次元尺度構成法を使って濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
データフレームを列名リストによって並べて、NaNを先頭にする	df.sort_values(by=column, na_position='first')
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
プログラムの実行を強制的に終了する	sys.exit()
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
文字列が全て識別子名	s.isidentifier()
折れ線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
ディムグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
黒い▼マーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
タイムスタンプのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
パウダーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
カウンタ間でインターセクション	aCounter & aCounter2
文字列の右側から改行を取り除く	s.rstrip('\n')
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
option: ターコイズ色を使う	color = 'turquoise'
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ロバスト推定として回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
ロバストな重回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
淡い茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
今日が何月か知る	datetime.datetime.today().month
文字列中に非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
折れ線グラフの色をペルーに変更する	plt.plot(データ列x, データ列y, color='peru')
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
ゼロ埋めされた論理値型の配列	np.zeros(要素数, dtype=np.int32)
データフレームのどの値が頻出か見る	df.mode()
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
文字列が全てアスキー文字か調べる	s.isascii()
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
茶色色として散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
データフレームのカラムの中にあるとの合計をカウントする	df[col].isin([value, value2]).sum()
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
ダークオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
シルバーにヒストグラムの色を変更する	plt.hist(データ列, color='silver')
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データ列の欠損値を最大値に指定する	ds.fillna(ds.max())
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
option: グラフの種類を実線に設定する	linestyle = 'solid'
nをn2乗に増やす	n **= n2
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
nをn2だけ増加させる	n += n2
配列の合計を求める	np.sum(aArray)
折れ線グラフのバツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: ミディアムシアグリーンにグラフの色を指定する	color = 'mediumseagreen'
グリッドの線種を実線に変更する	plt.grid(linestyle='solid')
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
ロイヤルブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
ファイルのファイルサイズ	os.path.get_size(filepath)
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
文字列を回数を制限して置換する	s.replace(sub, newsub, n)
option: マーカーの色を白にする	markerfacecolor = 'white'
列を累積する	itertools.accumulate(iterable, operator.mul)
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか	s.find(sub, start, end) == -1
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
numpyを使う	import numpy as np
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
データ列の偏りを平方根変換する	np.sqrt(データ列)
横棒グラフをオーキッド色を用いて描画する	plt.barh(データ列x, データ列y, color='orchid')
散布図の右三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
パールゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
配列の内積を計算する	np.dot(aArray, aArray2)
全要素を0で初期化した配列	np.zeros(要素数)
option: 右三角マーカーを用いる	marker = '>'
タプルの要素数を見る	len(aTuple)
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
配列のユニークな要素	np.unique(aArray)
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
リストのn番目の	aList[n]
カウンタの項目数	len(aCounter)
option: ディムグレー色を使う	color = 'dimgrey'
双方向キューに要素をエンキューする	deq.appendleft(element)
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
ヒストグラムの色をオリベドラブにセットする	plt.hist(データ列, color='olivedrab')
カウンタから最も頻出な項目の件数を計算する	aCounter.most_common()[1]
イテラブルを配列に変換する	np.array(iterable)
リストとリストの散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
option: ダークグレーにグラフの色を設定する	color = 'darkgrey'
option: ライトスレイグレー色を使う	color = 'lightslategray'
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
nとn2の和を求める	n + n2
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
横棒グラフをピンク色を用いて描画する	plt.barh(データ列x, データ列y, color='pink')
データフレームから指定された列を抽出する	df[[column]]
散布図に黒い菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
option: グラフの色をアンティークホワイトに指定する	color = 'antiquewhite'
横棒グラフを描画してラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
文字列の開始位置からと終了位置の範囲に部分文字列が含まれるか	s.find(sub, start, end) != -1
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
文字列を黒色にする	f'\033[30m{value}\033[0m'
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
リストの末尾からn番目以前の部分を得る	aList[:-n]
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
カラーパレットを明るくする	sns.set(pallete='bright')
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
回帰分析をK最近傍法で行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
文字列の変数名を数式に変換する	sympy.Symbol(s)
原点から(実数,y)の距離	math.hypot(x, y)
n2分のn	n / n2
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
文字列をパディングする	s.zfill(文字列幅)
日付データが木曜日	aDate.weekday() == 3
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
タプルの長さ	len(aTuple)
ユーザの入力を整数として受け取る	int(input())
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
x軸の目盛りを整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
８ビット整数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int8)
ライトグレー色を使って縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
プロットの描画で淡くカラーパレットを用いる	sns.set(pallete='muted')
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
文字列は全て識別子名	s.isidentifier()
正規分布にしたがってランダムにデータ列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
文字列の末尾から部分文字列を除く	s.rstrip(sub)
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
TSVファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
ベクトルの次元を変形する	aArray.reshape(行数, 列数)
ライトブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
三自然数の最大公約数	math.gcd(n, n2, n3)
プログラムの実行を正しく終了する	sys.exit(0)
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
部分文字列が文字列中にないか調べる	sub not in s
タイムスタンプデータからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
option: グラフの色を紺にセットする	color = 'darkblue'
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
データフレームの中に日付データと文字列がいくつ存在するか数える	df.isin([value, value2]).sum()
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
双方向キューの中に値は含まれてる	element in deq
ピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
option: グラフの色をグレーに設定する	color = 'grey'
文字列をバイト配列にする	bytearray(s)
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
option: フォントの色をレベッカパープルに設定する	color = 'rebeccapurple'
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
文字列がタプルの要素か調べる	element in aTuple
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
組を小さい順に並べ直す	sorted(aTuple, reverse=True)
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
画面用にグラフを指定する	sns.set(context='notebook')
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
データフレームを'A'列で昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
option: フォントの色をライトサーモンに設定する	color = 'lightsalmon'
大文字を全部使う	string.ascii_uppercase
データフレームを列の値によってグループ化して、標準偏差を計算する	df.groupby(column).std()
実数の正弦	math.sin(x)
プロットをポスター用に変更する	sns.set(context='poster')
実数の三乗	x ** 3
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
全要素を0で初期化した配列を作る	np.zeros(要素数)
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
データフレームのリストカラムの中に文字列と文字列があるか	df[aList].isin([value, value2])
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
option: データ型として三二ビット整数型を用いる	dtype = np.int16
文字列の開始位置からと終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
データフレームを各列毎に集計し、、列の最小値を求める	df.groupby(column)[column2].min()
ダークターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
リストの文字列の位置をエラーなく見る	aList.index(element) if element in aList else -1
データフレームのカラムの曜日数	df[col].dt.dayofweek
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
行列の行ごとの最小値を使う	np.min(aArray, axis=1)
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
option: 欠損値を先頭に来るようにする	na_position = 'first'
散布図に上三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
option: 色を半透明にする	alpha = 0.5
データフレームの中にいくつ欠損値が存在するか数える	df.isna().sum()
インデックスによって小さい順にデータフレーム全体をソートする	df.sort_index(ascending=True)
データフレームのカラムの中にいくつ日付データが含まれるか数える	df[col].isin([value]).sum()
年月日と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
リストとイテラブルについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
２つの数値を文字列で区切ってプリントする	print(value, value2, sep=s)
棒グラフをスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='springgreen')
リストの合計値	sum(aList)
文字列中の部分文字列をカウントする	s.count(sub)
クラス分類をサポートベクターマシンを用いて行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
nがn2で割り切れるか調べる	n % n2 == 0
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
Pandasでタイムスタンプ型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
ヒストグラムの色をライトシアンに指定する	plt.hist(データ列, color='lightcyan')
グレー色でヒストグラムを描画する	plt.hist(データ列, color='grey')
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
日付時刻データをエポック秒にする	aDatetime.timestamp()
rgbの丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
横棒グラフをミディアムオーキッド色を使って描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
ライトスレイグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
option: グラフの種類を破線に設定する	linestyle = 'dashed'
option: ブール型を用いる	dtype = np.int32
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
データフレームから指定された二列だけ取り出す	df[[column, column2]]
動作環境の名前	sys.platform
散布図にrgbの下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
option: 色をフォレストグリーンに設定する	color = 'forestgreen'
折れ線グラフに黒い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームを列によってグループ化して、それぞれのグループの合計を算出する	df.groupby(column).sum()
タプルの末尾	aTuple[-1]
ダークシアン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
棒グラフをリネン色として描画する	plt.bar(データ列x, データ列y, color='linen')
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
n個の整数列を作る	list(range(n))
キューを空にする	deq.clear()
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
option: スノー色を用いる	color = 'snow'
黒い左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c='k')
配列の列ごとの合計値を求める	np.sum(aArray, axis=0)
ゼロ埋めされた符号なし８ビット整数型の配列を作る	np.zeros(要素数, dtype=np.uint8)
タプルをカンマ区切りで表示する	print(*aTuple, sep=',')
データフレームのカラムが何日か見る	df[col].dt.day
二変数の最小値	min(x, y)
単位行列	np.eye(行数, 列数)
ふたつの関係がスーパーセットもしくは等しいか調べる	aSet > aSet2
JSON形式のファイル入力を辞書に変換する	json.load(fin)
折れ線グラフの△印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
追加できるように既存のファイルをEUCでオープンする]	open(filepath, mode='a', encoding='euc_jp')
option: ペールグリーンを使う	color = 'palegreen'
ヒストグラムをミディアムオーキッド色として描画する	plt.hist(データ列, color='mediumorchid')
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
option: ダークターコイズを使う	color = 'darkturquoise'
既存の配列を元にして全要素が0の行列	np.zeros_like(aArray)
配列と配列について散布図を描いて、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
ホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
二つの集合は集合と交わりを持たない	aSet.isdisjoint(aSet2)
実数を文字列に変換する	str(x)
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
option: ダークオレンジ色を使う	color = 'darkorange'
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
スピアマンの相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
整数nを八進表現に変換する	oct(n)
データフレームの重複する行だけ	df[df.duplicated(keep=False)]
Pandasで、データ列を日付データにする	pd.to_datetime(ds)
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームをグループ化して、ヒストグラムとして可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
データフレームの歪度	df.kurt()
option: マーカーの色をライムにする	markerfacecolor = 'lime'
nがn2より大きいか調べる	n > n2
折れ線グラフの印を右三角にする	plt.plot(データ列x, データ列y, marker='>')
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
文字列の中で複数行対応として正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
データフレームの数値をまとめて丸める	df.round()
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図にrgbの大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームを'A'列によってで降順にソートする	df.sort_values(by='A', ascending=False)
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
縦軸だけグリッド線	plt.grid(axis='y')
列を分割数nとして分割する	pd.cut(ds, n)
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
浮動小数点数を文字列にする	str(x)
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
データ列が何曜日か見る	ds.dt.weekday_name
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
縦棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
数式の変数に数式を代入する	e.subs(z, e2)
シスル色を用いてヒストグラムを描画する	plt.hist(データ列, color='thistle')
グラフで利用可能な色の一覧	matplotlib.colors.cnames
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
縦棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
実数のアークサインを求める	math.asin(x)
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームが重複しているかどうか調べる	df.duplicated()
データフレームを各カテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
黒い下三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図を黒いポイントマーカーとして描く	plt.plot(データ列x, データ列y, marker='.', c='k')
option: 改行コードをWindowsに設定する	newline = '\r\n'
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ラインを赤い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームのリストカラムが正規分布からどの程度、尖っているか確認する	df[aList].skew()
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
データ列の曜日が何日目か見る	ds.dt.dayofweek
ミディアムスプリンググリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
縦棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
標準出力を得る	sys.stdout
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
nがn2で割り切れないか調べる	n % n2 != 0
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
リストの値を並べる	sorted(aList)
整数乱数の行列を作る	np.random.randint(開始値, 終了値, (行数, 列数))
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
nがn2より小さいか調べる	n < n2
グラフの色を指定する	sns.set(pallete=パレット名)
ナバホホワイト色でヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgray')
散布図をミディアムシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
プラムにヒストグラムの色を設定する	plt.hist(データ列, color='plum')
ケースを無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
option: グラフの色をディムグレーに設定する	color = 'dimgray'
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
データ列の折れ線グラフを下三角印で描画する	plt.plot(データ列x, データ列y, marker='v')
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
option: ダークスレートブルー色を使う	color = 'darkslateblue'
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ファイルをEUCとして書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
xを整数に変換する	int(x)
ファイルパスをオープンして]バイナリストリームを使う	open(filepath, mode='rb')
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
赤い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
散布図に赤いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ダイアモンドマーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='D')
散布図をrgbの右三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横棒グラフをアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='aquamarine')
データフレームの中に文字列があるか調べる	df.isin([value])
行列と同じ大きさの空ベクトルを作る	np.empty_like(aArray)
縦棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
1行から二つの文字列を読み込む	A, B = map(str, input().split())
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
縦棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
ふたつの集合がセットと互いに素か調べる	aSet.isdisjoint(aSet2)
直前の値でデータフレームの列の欠損値を補う	df[col].fillna(method='ffill')
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
縦棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
ヒストグラムの色をトマトに変更する	plt.hist(データ列, color='tomato')
リストと数列について散布図を描画し、、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームをJSONLファイルにヘッダを付けずに書き込む	df.to_csv(filename, header=None)
文字列はPythonのキーワードか	keyword.iskeyword(s)
option: ミディアムオーキッド色を用いる	color = 'mediumorchid'
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
aListn番目から要素をポップする	aList.pop(n)
散布図に赤い右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c='r')
データ列の各データは何回出現するか見る	ds.value_counts()
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: セパレータを文字列にする	sep = s
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
回帰分析をパーセプトロンでする	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
ファイルパスを追加できるようにオープンする]	open(filepath, mode='a')
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
option: カーキ色を用いる	color = 'khaki'
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
双方向キューの最大長を使う	deq.maxlen
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
インデックスによってデータフレーム全体をソートする	df.sort_index()
nの十六進リテラルを使う	hex(n)
折れ線グラフのポイントマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
マッピングの値の一覧	aDict.values()
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
データフレームを四捨五入する	df.round()
実数のサインを求める	math.sin(x)
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
データフレームの文字列を欠損値にする	df.replace(s, np.nan)
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
option: グラフの色をライトブルーに設定する	color = 'lightblue'
棒グラフをシャルトリューズ色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
マップの項目名とその値をペアとして取り出す	aDict.items()
ラベンダーブラッシュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
文字列のの開始位置から終了位置までの間に部分文字列がいくつかあるか調べる	s.count(sub, start, end)
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
事前にケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
散布図をライトグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
長さが一致しない版のzip	itertools.zip_longest(iterable, iterable2)
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
n2がn以上、かつn3以下か調べる	n <= n2 and n2 <= n3
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
正則化付き線形回帰モデルを新規作成する	model = sklearn.linear_model.ElasticNet()
トマト色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
いつまでもnからカウントダウンする	itertools.count(start=n, step=-1)
列の一意な値	df[col].unique()
モデルの残差を求める	目的変数 - model.predict(説明変数)
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
表データをインポートする	import pandas as pd
線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
option: グラフの種類を点線に変更する	linestyle = 'dotted'
ヒストグラムをダークスラテグレー色として描画する	plt.hist(データ列, color='darkslategray')
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
ダークスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
データフレームを列を用いてソートして、上位n件を取り出す	df.sort_values(columns).head(n)
ビスクにヒストグラムの色を設定する	plt.hist(データ列, color='bisque')
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
option: コロンをセパレータで使う	sep = ':'
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
文字列がn回続くイテラブル	itertools.repeat(element, n)
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
大文字列	string.ascii_uppercase
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データフレームのリストカラムを千の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
散布図をオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='orange')
nがn2以下それか、n3以上かどうか調べる	n <= n2 or n >= n3
option: フォレストグリーンにグラフの色を変更する	color = 'forestgreen'
ファイルが存在しないか調べる	not os.path.exists(filepath)
データ列の第三四分位数	ds.quantile(0.75)
有理数モジュールをインポートする	import fractions
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
データフレームのリストカラムの尖度を計算する	df[aList].skew()
option: グラフの色をスラグレーに設定する	color = 'slategrey'
データ列の欠損値を中央値で置換する	ds.fillna(ds.median())
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
青い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
配列の内積	np.dot(aArray, aArray2)
データ列を丸める	ds.round()
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
配列と数列についての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
シーケンスから配列を初期化する	np.array(iterable)
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
ユニークな値を要素とするベクトル	np.unique(aArray)
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
データ列の欠損値を平均値で補う	ds.fillna(ds.mean())
nまたはn2	n or n2
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
nとn2が等しいか調べる	n == n2
線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: ミッドナイトブルー色を使う	color = 'midnightblue'
ヒストグラムをチョコレート色を用いて描画する	plt.hist(データ列, color='chocolate')
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
グラフに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
横棒グラフをシルバー色を用いて描画する	plt.barh(データ列x, データ列y, color='silver')
整数nがセットのどれかか調べる	n in aSet
option: グラフの色をダークサーモンに指定する	color = 'darksalmon'
線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
ダークグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
グラフの見た目を良くする	import seaborn as sns
ファイルを開いて]、読み込みストリームを求める	open(filepath, mode='r')
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームのリスト列のどの値が頻出か見る	df[aList].mode()
option: 事前に説明変数を正規化する	normalize = True
列をリストに変換する	df[column].values.tolist()
天井数	math.ceil(x)
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
折れ線グラフに大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
両端キューの先頭に要素を追加する	deq.appendleft(element)
グラフで利用可能な色名の一覧	matplotlib.colors.cnames
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
実数の絶対値	math.fabs(x)
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
0からnまでのスライス	slice(n)
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
値がセットに含まれるか調べる	element in aSet
データフレームのカラムをカテゴリデータに変換する	df[col].astype(object)
各列毎にデータフレームを分類し、、列の最大値を算出する	df.groupby(column)[column2].max()
グラフの描画で明るくカラーパレットを用いる	sns.set(pallete='bright')
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
イテラブルからサンプリングする	random.sample(iterable)
ブルーバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
辞書の値として要素が含まれている	element in aDict.values()
二つの列によって昇順にデータフレームを整列し、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
option: エンコーディングを文字列の示す文字コードに設定する	encoding = s
横棒グラフをリネン色として描画する	plt.barh(データ列x, データ列y, color='linen')
ピアソン相関係数でデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='pearson')
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
文字列の開始位置より後に部分文字列が含まれるか調べる	s.find(sub, start) != -1
２つの列をキーにしてデータフレームをソートする	df.sort_values(by=['A', 'B'])
今日は何曜日か知る	datetime.datetime.today().weekday()
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
クラスのサブ型かどうか調べる	issubclass(サブクラス, クラス)
縦棒グラフをプロットして、バーの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
カウンタの文字列一覧を使う	aCounter.keys()
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
縦棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
文字列の左側から空白を取り除く	s.lstrip(' ')
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
option: 配列のデータ型を指定する	dtype = bool
縦棒グラフをダークバイオレット色として描画する	plt.bar(データ列x, データ列y, color='darkviolet')
option: 色をダークグレーに設定する	color = 'darkgray'
集合から全ての要素を取り除く	aSet.clear()
option: 文字列の示す文字コードを使用する	encoding = s
散布図のマーカーを赤色にする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
nにn2を足して代入する	n += n2
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
多次元尺度構成法で多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
アクア色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
ヒストグラムをスノー色として描画する	plt.hist(データ列, color='snow')
リストを配列にする	np.array(aList)
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
辞書のキーとその値をペアとして取り出す	aDict.items()
実数のcosを求める	math.cos(x)
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
変数をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
option: グラフの色をダークグレーに変更する	color = 'darkgray'
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
実行結果を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
実数の双曲線正弦の逆数	math.asinh(x)
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
キーワード引数としてマッピングに加えて、更新する	aDict.update(**kwargs)
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
四角マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='s')
縦棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
リストをn回、連結する	aList * n
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
色付きの点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
横棒グラフをミディアムパープル色として描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
データフレームを'A'列を用いて昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームの中のカラムをビン数nとしてビン分割する	pd.cut(df[col], n)
ハニーデュー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
横軸の目盛を表示しない	plt.xticks([])
２つのデータフレームを異なる列をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データフレームを表示するとき表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
'A'列によってデータフレームをソートして、NaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
ヒストグラムをパパイヤウィップ色を用いて描画する	plt.hist(データ列, color='papayawhip')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
データフレームの列の一覧を見る	df.info()
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
浮動小数点数が正か調べる	x > 0
降順でデータフレームをインデックスによって整列する	df.sort_index(ascending=False)
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
列をビン数nでビン分割する	pd.cut(ds, n)
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
折れ線グラフの色をインディアンレッドに変更する	plt.plot(データ列x, データ列y, color='indianred')
option: パープル色を使う	color = 'purple'
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
新しいロジスティック回帰モデルを用意する	model = sklearn.linear_model.LogisticRegression()
二つの列を用いてデータフレームをソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
nの二乗	n ** 2
箱髭図を2つ並べて描画する	plt.boxplot([データ列, データ列])
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
大量のデータ列が正規分布に従うか仮説検定する	scipy.stats.kstest(データ列, 'norm')
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
タプル内の要素が全て真かどうか調べる	all(aTuple)
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
文字列の先頭から空白を取り除く	s.lstrip()
データフレームを列で並べ、、更新する	df.sort_values(by=column, inplace=True)
カウンタをゼロにする	aCounter.clear()
データフレームの中で何行、重複するか見る	df.duplicated().sum()
散布図に赤いポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
サーモン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
ファイルパスの区切り記号を見る	os.sep
option: カデットブルー色を使用する	color = 'cadetblue'
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
データフレームをエクセルファイルから読み込む	pd.read_excel(filename)
option: アンティークホワイト色を用いる	color = 'antiquewhite'
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: マーカーを三角に変える	marker = '^'
option: エラーを無視するように設定する	errors = 'ignore'
カウンタを集合に変換する	set(aCounter)
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
等量でn個に配列を分割する	pd.qcut(aArray, n)
ライトスチールブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
リストと配列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
コマンドの第2引数を知る	sys.argv[1]
横棒グラフをシルバー色として描画する	plt.barh(データ列x, データ列y, color='silver')
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
カウンタ間で交わり演算する	aCounter & aCounter2
文字列を新しい文字列で置換する	s.replace(sub, newsub)
文字列の終了位置より前に部分文字列が含まれるかどうか	s.find(sub, 0, end) != -1
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgrey')
列名のリストをデータ型でフィルタする	df.select_dtypes(型).columns
散布図の色をティールにする	plt.scatter(データ列x, データ列y, color='teal')
散布図をシーグリーン色として描画する	plt.scatter(データ列x, データ列y, color='seagreen')
option: フォントの色をピンクに変更する	color = 'pink'
nが2で割り切れるかテストする	n % 2 == 0
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
データ列間のRMSEを求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
散布図をナバホホワイト色として描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
タプルのキー一覧	list(aDict)
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
浮動小数点数を文字列に変換する	str(x)
二進対数	math.log2(x)
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
線形モデルの切片	model.intercept_
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームのカラムの標本標準偏差	df[col].std()
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
option: ライトグレー色を用いる	color = 'lightgray'
再帰の上限を上げる	sys.setrecursionlimit(1000000)
横棒グラフを描画して、下寄せする	plt.barh(ラベル列, データ列, align='edge')
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
option: 箱ひげ図を水平方向にする	vert = False
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
リストのn番目からn2番目までの部分	aList[n:n2]
グラフに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
predicateFuncが真となる列の要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
データフレームを列を用いてソートして、更新する	df.sort_values(by=column, inplace=True)
小数点数を切り下げる	math.floor(x)
データフレームを列を用いてによって降順にソートする	df.sort_values(by=column, ascending=False)
ふたつの辞書を合体する	aDict | aDict2
有理数を使う	import fractions
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
日付データは何日か知る	aDate.day
日付データが木曜日か調べる	aDate.weekday() == 3
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
nとn2の積	n * n2
プラットホームがMacOSかどうか調べる	sys.platform.startswith('darwin')
集合をリストにする	list(aSet)
option: 三角マーカーを描画する	marker = '^'
ポスターにプロットを設定する	sns.set(context='poster')
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
二つのオブジェクトが等しい	obj == obj2
横棒グラフをグリーン色として描画する	plt.barh(データ列x, データ列y, color='green')
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
辞書のキーの一覧	aDict.keys()
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
データフレームのリスト列の未入力値を直前の値で埋める	df[aList].fillna(method='ffill')
散布図をミディアムターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
バリーウッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
原点から(実数,y)の距離を求める	math.hypot(x, y)
表データをインデックスによって昇順に並べ直す	df.sort_index(ascending=True)
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
リストが全て真か調べる	all(aList)
茶色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
データフレームのリスト列のpercent分位数	df[aList].quantile(percent/100)
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
option: グラフの色をライトスチールブルーに変更する	color = 'lightsteelblue'
パラメータについて数式の積分を計算する	sympy.integrate(e, z)
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
option: ゴーストホワイトを用いる	color = 'ghostwhite'
option: ライムグリーン色を使う	color = 'limegreen'
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
整数nの二進文字列	bin(n)[2:]
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
ファイルを文字コードtextで追加できるように開く]	open(filepath, mode='a', encoding=text)
回帰分析をサポートベクターマシンでする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
赤色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
二つの変数を順に表示する	print(value, value2)
日付時刻データからn時間分減算する	aDatetime - datetime.timedelta(hours=n)
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
文字列を正規表現で分割する	re.split(pattern, s)
xを印字できる文字列にする	ascii(x)
データフレームの上位25%	df.quantile(0.25)
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
文字列を緑色にする	f'\033[32m{value}\033[0m'
option: 黄緑色を使う	color = 'chartreuse'
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
option: 印を下三角に指定する	marker = 'v'
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
実部と虚部から複素数を作る	complex(x, y)
データ列をカテゴリデータにする	ds.astype(object)
散布図を赤いポイントマーカーを使って描く	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
横棒グラフを白色を用いて描画する	plt.barh(データ列x, データ列y, color='white')
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
文字列をISO8601として日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: ポイントマーカーを使う	marker = '.'
部分文字列を文字列の接尾辞から除去する	s.removesuffix(sub)
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
option: ダークオリーブグリーンにグラフの色を設定する	color = 'darkolivegreen'
データ列の値が欠損値か調べる	ds.isna()
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
折れ線グラフをダークグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgreen')
横棒グラフをゴールド色として描画する	plt.barh(データ列x, データ列y, color='gold')
TSVファイルをヘッダなしで読み込む	pd.read_csv(filename, header=None)
タプルを逆順にする	aTuple[::-1]
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
両端キューが空か調べる	len(deq) == 0
丸マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
オブジェクトにプロパティが存在する	hasattr(obj, プロパティ名)
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: ディープスカイブルー色を使う	color = 'deepskyblue'
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
散布図に赤い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
ミディアムターコイズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームを配列に変換する	df.values
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
空の多重集合を作る	collections.Counter()
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
日付データにn週間を足す	aDate + datetime.timedelta(weeks=n)
二つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
表データからn行、サンプリングする	df.sample(n)
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
自分自身をモジュールとして	sys.modules[__name__]
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
nがn2の倍数でないか確認する	n % n2 != 0
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
ガンマ関数を用いる	math.gamma(x)
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
折れ線グラフの大バツ印を赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
option: 線を太くする	linewidth = 3.0
option: シャルトリューズ色を使う	color = 'chartreuse'
変数名をキーとして辞書	dict(name=element)
ダークスレートブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
線グラフの色をディープスカイブルーに変更する	plt.plot(データ列x, データ列y, color='deepskyblue')
散布図の菱形マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
組の最初の文字列を探す	aTuple.index(element)
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
変数をシアンにする	f'\033[36m{value}\033[0m'
year年month月day日のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
カテゴリ列に並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームのカウントプロットを描く	sns.countplot(x='列名', data=df)
データフレームのカラムの日を求める	df[col].dt.day
文字を文字コードに変換する	ord(ch)
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
option: グラフの色を濃いシアンに設定する	color = 'darkcyan'
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
ベージュ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
配列の最小値	np.min(aArray)
カラムの標本標準偏差を求める	ds.std()
表示可能な最大行数を減らす	pd.set_option('display.max_rows', n)
折れ線グラフに黒い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
実数以上の最小の整数	math.ceil(x)
小麦色色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
０で全要素を初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
データフレームの列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
ファイルにxを文字列にして書き込む	f.write(str(x))
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
データフレームの先頭	df.head()
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
入力ストリームを改行を取り除いて一行ずつ読む	f.readline()
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
option: 改行しない	end = ''
ベクトルの要素ごとに加算する	aArray + aArray2
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
ふたつの集合の差集合	aSet.difference(aSet2)
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
データフレームの中のカラムを等量でn個にビン分割する	pd.qcut(df[col], n)
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
データフレームのリストカラムの分散を算出する	df[aList].var()
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
n2がnより大きく、かつ、n3未満かどうか	n < n2 and n2 < n3
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
グラフを用いる準備をする	import matplotlib.pyplot as plt
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
黄緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
カウンタをイテラブルで更新する	aCounter.update(iterable)
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
rgbの右三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの列の欠損値を平均値に設定する	df[col].fillna(df[col].mean())
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
データフレームの列が文字列で始まるデータを取り出す	df[df[column].str.startswith(s)]
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
n個の数値イテラブル	range(n)
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
ファイルを開く]	open(filepath)
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
文字列を正規表現で分ける	re.split(pattern, s)
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
マルーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
option: 線の幅をセットする	linewidth = 3.0
ライトスレイグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
OSがWindows	sys.platform.startswith('win32')
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
データフレームの列の中に日付データとがあるか調べる	df[col].isin([value, value2])
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
オレンジレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
偽	False
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
グリッド線	plt.grid(linestyle='--')
デピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
乱数で要素を埋めた配列を作成する	np.random.random(N)
タイムスタンプデータが日曜日か	aDatetime.weekday() == 6
文字列全体がパターンにASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
白いヒストグラムを描画する	plt.hist(データ列, color='w')
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
赤い三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
データフレームのn行以降抽出する	df[n:]
正規表現を事前にASCII限定としてコンパイルする	re.compile(pattern, flag=re.ASCI)
折れ線グラフをシスル色を使って描画する	plt.plot(データ列x, データ列y, color='thistle')
数値を展開する	sympy.expand(e)
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
半透明の点線として線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
散布図の三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
option: グラフの種類を破線に変更する	linestyle = 'dashed'
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
option: 書き込み用に指定する	mode = 'w'
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
本日の日付	datetime.date.today()
option: n番目の列をインデックスに変更する	index_col = n
ヒストグラムの色をホットピンクにセットする	plt.hist(データ列, color='hotpink')
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
横棒グラフをミディアムアクアマリン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
イテラブルのコンビネーション	itertools.combinations(iterable, n)
データフレームを複数の列によって昇順に破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
文字列全体が正規表現に複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
配列の個数を求める	aArray.size
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
option: 紺碧を使う	color = 'azure'
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
データフレームから散布図を作り、線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
列からn要素サンプリングする	random.sample(iterable, k=n)
パラメータが無限大に近づくとき数式の極限値を求める	sympy.limit(e, z, oo)
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
棒グラフをゴーストホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
データ列を使う	import pandas as pd
option: 読み込みモードに変更する	mode = 'r'
option: 線のスタイルを破線に設定する	linestyle = 'dashed'
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
インディゴ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
実数を切り上げて整数に変換する	math.ceil(x)
オリベドラブ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
辞書の値として要素が含まれているか調べる	element in aDict.values()
データフレームを各列と列の組み合わせ毎に集約し、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
データフレームの列の文字列が正規表現文字列にマッチする行を選択する	df[df[column].str.match(s)]
プロットのカラーテーマを明るくする	sns.set(pallete='bright')
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
最大値でデータフレームのカラムのNaNを補う	df[col].fillna(df[col].max())
option: ライトブルーにグラフの色をする	color = 'lightblue'
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
rgbの▼マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: クリムゾン色を使う	color = 'crimson'
リストの文字列が最初に見つかるインデックスを探す	aList.index(element)
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
ディムグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
浮動小数点数を実数で割った剰余	math.remainder(x, x2)
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
グラフを論文用に指定する	sns.set(context='paper')
データフレームの欠損値を消す	df.dropna()
option: グラフの色をインディゴに設定する	color = 'indigo'
配列のデータ型を求める	aArray.dtype()
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
option: レモンシフォン色を用いる	color = 'lemonchiffon'
配列を分割数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
ベクトルの型	aArray.dtype()
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
アクア色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
データフレームのカラムを度数分布図でプロットする	plt.hist(df[column])
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
スノー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
文字列を走査し、パターンにASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
散布図に黒いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
文字列の左側から空白を除く	s.lstrip(' ')
イテラブルから一つランダムに選ぶ	random.choice(iterable)
データ列の第一四分位数	ds.quantile(0.25)
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
集合の濃度	len(aSet)
プロットを描画する準備をする	import matplotlib.pyplot as plt
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
文字列をシアンにする	f'\033[36m{value}\033[0m'
列に列を続けた列	itertools.chain(iterable, iterable2)
パパイヤウィップ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
ヒストグラムをグリーン色を使って描画する	plt.hist(データ列, color='green')
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データをL2ノルムを用いて正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
アリスブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
ラベンダーブラッシュ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
データ列が正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
文字列中に部分文字列が含まれないか調べる	sub not in s
二次元リストをflattenする	sum(aList)
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
ファイルパスをSJISを使ってオープンする]	open(filepath, encoding='shift_jis')
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
目盛線	plt.grid(alpha=0.5)
option: グラフの色をクリムゾンに変更する	color = 'crimson'
棒グラフをホットピンク色を用いて描画する	plt.bar(データ列x, データ列y, color='hotpink')
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
ベクトルの最大値	np.max(aArray)
PandasでUNIX秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
二つの実行結果をカンマで区切ってプリントする	print(value, value2, sep=',')
nとn2の論理積	n & n2
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
横棒グラフを黄色色を用いて描画する	plt.barh(データ列x, データ列y, color='yellow')
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームのカラムの名前を付け直す	df.rename(columns={column: name})
散布図に赤い四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s', c='r')
縦棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
データフレームのリストカラムをreplにまとめて正規表現patternで置き換える	df[aList].replace(pattern, repl, regex=True)
文字列リストを結合する	''.join(aStringList)
データフレームをインポートする	import pandas as pd
散布図の三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
グラフの色を色差別なくする	sns.set(pallete='colorblind')
データフレームの列の欠損値を最小値で埋める	df[col].fillna(df[col].min())
十六進数文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
色付きの点線を用いて数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
要素が全て1の行列	np.ones(要素数, dtype=np.int)
option: グラフの色をラベンダーブラッシュに変更する	color = 'lavenderblush'
ゴールド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
黒い丸マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
数式を変数についてn階微分する	sympy.diff(e, z, n)
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームのインデックスをリセットする	df.reset_index()
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
両端キューの最大長	deq.maxlen
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
option: NaNは無視する	dropna = True
文字列が全て十進数字かテストする	s.isdecimal()
赤い三角マーカーをイテラブルとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
option: グラフの色をスカイブルーに指定する	color = 'skyblue'
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
nからn2の範囲	range(n, n2)
改行する	print()
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
アンティークホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
折れ線グラフの色をパールゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='palegoldenrod')
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
アリスブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ダークオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkorchid')
第二コマンド引数	sys.argv[1]
赤い星マーカーをイテラブルとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
イテラブルを文字列リストに変換して、'改行でつなげる	'\n'.join(map(str, iterable))
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategray')
データフレームのヒストグラムを横に並べて、図示する	sns.displot(df, x='列名', col='カテゴリ名')
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームの列の欠損値をxに指定する	df[col].fillna(x)
淡い茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
タプルのコピー	dict(aDict)
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
文字列を積極的に小文字に変換する	s.casefold()
辞書を階層化マップに変換する	collections.ChainMap(aDict)
リスト中の文字列が最初に見つかるインデックスを使う	aList.index(element)
option: 色をスチールブルーに指定する	color = 'steelblue'
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
横棒グラフを紺色を用いて描画する	plt.barh(データ列x, データ列y, color='darkblue')
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
散布図をスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='slateblue')
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームを十の位で丸めて整数型にする	df.round(-1).astype(int)
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
色付きの破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
棒グラフをダークレッド色で描画する	plt.bar(データ列x, データ列y, color='darkred')
文字列をISO書式で日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
グラフのパレットを濃くする	sns.set(pallete='deep')
データフレームの未入力値を平均値で埋める	df.fillna(df.mean())
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
データフレームを百の位で丸めて整数型にする	df.round(-2).astype(int)
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
データフレームから最初の列を除く	df[df.columns[1:]]
option: シエナ色を使う	color = 'sienna'
ファイルが存在しないか判定する	not os.path.exists(filepath)
option: グラフの色をシアンに設定する	color = 'cyan'
リストと数列について散布図をプロットして、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
データ列の正規分布に対する左右対称性	ds.kurt()
ヒストグラムの色をシスルに変更する	plt.hist(データ列, color='thistle')
データフレームのカラムが何月か調べる	df[col].dt.month
リストをランダムにシャッフルする	random.shuffle(aList)
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
ファイルをEUCで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
散布図の右三角印を赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
表データを使う	import pandas as pd
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ファイルを追加モードで開いて]fとする	f = open(filepath, mode='a')
ベクトルの差	aArray - aArray2
項目名が辞書に存在しない時、要素を追加する	aDict.setdefault(key, element)
線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
option: 分割記号を文字列にする	sep = s
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
コーンズシルク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
データフレームを'A'列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
オプションで標準出力を使用する	file = sys.stdout
リスト内の要素が少なくともひとつ真	any(aList)
option: グラフの色をピンクに設定する	color = 'pink'
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
カテゴリ列で色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
整数nを二進文字列にする	bin(n)[2:]
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
データ列を使う	import pandas as pd
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
全ての印字可能な文字	string.printable
文字列全体をケースを無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データ列の文字列をNaNに変換する	ds.replace(s, np.nan)
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
乱数シードを初期化する	random.seed()
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
縦棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
文字列の右側からタブを取り除く	s.rstrip('\t')
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
集合に値を追加する	aSet.add(element)
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
option: ▲マーカーを描画する	marker = '^'
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
配列が何のデータ型か調べる	aArray.dtype()
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
配列のスカラー倍	aArray * n
データフレームを複数の列の値によってグループ分けする	df.groupby(columns)
nがn2より大きいか	n > n2
イテラブルの長さnの順列	itertools.permutations(iterable, n)
option: スラグレー色を使う	color = 'slategrey'
リストが空でないかテストする	len(aList) != 0
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
整数の階乗	math.factorial(n)
折れ線グラフに赤いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
縦棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
option: スラグレー色を用いる	color = 'slategrey'
日付時刻データを浮動小数点数にする	aDatetime.timestamp()
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
ヒストグラムをホワイト色で描画する	plt.hist(データ列, color='white')
散布図を淡いピンク色色として描画する	plt.scatter(データ列x, データ列y, color='lightpink')
文字列リストを一つにしてひとつの文字列にする	''.join(map(str, iterable))
nが2で割り切れるか調べる	n % 2 == 0
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
データフレームを列名リストの値によってグループ化する	df.groupby(columns)
線グラフの色をローングリーンにセットする	plt.plot(データ列x, データ列y, color='lawngreen')
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
直後の値でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(method='bfill')
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
実数の双曲線正弦を求める	math.sinh(x)
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームを列によってまとめたグループ	df.groupby(column)
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
パラメータが0に近づく時の数値の極限値を求める	sympy.limit(e, z, 0)
両端キューの大きさ	len(deq)
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
列の値でデータフレームを集約し、それぞれのグループごとの最大値を求める	df.groupby(column).max()
ヒストグラムをカデットブルー色として描画する	plt.hist(データ列, color='cadetblue')
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
クラス分類の予測精度をヒートマップとして見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ヒストグラムをホットピンク色として描画する	plt.hist(データ列, color='hotpink')
マップにキーワード引数で加えて、更新する	aDict.update(**kwargs)
option: 色をアンティークホワイトに設定する	color = 'antiquewhite'
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
部分集合か調べる	aSet.issubset(aSet2)
折れ線グラフの色をフローラルホワイトにセットする	plt.plot(データ列x, データ列y, color='floralwhite')
option: グラフの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
オブジェクトのオブジェクト識別子	id(obj)
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o')
円グラフにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
データフレームのカラムの分散を算出する	df[col].var()
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
文字列が全て小文字か調べる	s.islower()
表データの列がリストに含まれるデータを抽出する	df[df[column].isin(aList)]
ダークターコイズ色を使ってヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
本日が火曜日	datetime.datetime.today().weekday() == 1
カラムの中央値	ds.median()
option: グラフの色をコーラルに設定する	color = 'coral'
option: ダークシアグリーン色を使う	color = 'darkseagreen'
要素が集合に含まれるか調べる	element in aSet
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
Pandasで、書式を用いて文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
option: フォントの色をラベンダーに設定する	color = 'lavender'
リストのn番目に文字列を差し込む	aList.insert(n, element)
ファイルをバイナリ書き込みモードとしてオープンして]fとする	f = open(filepath, mode='wb')
データフレームがどれだけ、分散しているか見る	df.var()
クロス印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
option: シーグリーン色を使う	color = 'seagreen'
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
option: 四角マーカーを加える	marker = 's'
ミディアムシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
最小値でデータフレームのリスト列の欠損値を置き換える	df[aList].fillna(df[aList].min())
ファイルをバイナリモードとしてオープンする]	open(filepath, mode='rb')
黒い菱形マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
ファイルパスからファイル名を見る	os.path.basename(filepath)
ヒストグラムの色をオーキッドにセットする	plt.hist(データ列, color='orchid')
二次元タプルをフラット化する	sum(aTuple)
散布図の四角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
ラベンダーブラッシュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
シエナ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
図の縦横を設定する	plt.figure(figsize=(横幅, 高さ))
option: マーカーを丸に設定する	marker = 'o'
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
双方向キュー中の要素をカウントする	deq.count(element)
option: 改行コードをUNIXに設定する	newline = '\n'
追加できるようにEUCとして既存のファイルを開く]	open(filepath, mode='a', encoding='euc_jp')
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
Pandasで、データフレームのcollをタイムスタンプに変換する	pd.to_datetime(df[col])
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
部分集合	aSet.issubset(aSet2)
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
グリッドの線種を破線に変更する	plt.grid(linestyle='dashed')
シードをnで初期化する	random.seed(n)
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
カンマ区切りのファイルを読む	pd.read_csv(filename, sep=',')
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
散布図のクロスマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
リストのn番目以降の部分を抽出する	aList[n:]
現在の月	datetime.datetime.today().month
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
実数を数に掛ける	x * y
列の全順列	itertools.permutations(iterable)
十六進文字列を整数に変換する	int(s, 16)
ダークオリーブグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkolivegreen')
入力から二つの浮動小数数を読む	A, B = map(float, input().split())
日付データの日数	aDate.day
整数nを十六進表現に変換する	hex(n)
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
日付データが日付データと同時か調べる	aDate == aDate2
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データ列を1000の位で丸めて整数型にする	ds.round(-3).astype(int)
縦棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
配列のユニークな要素ごとの頻度を使う	np.unique(aArray, return_counts=True)
実数の二進対数	math.log2(x)
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
辞書から項目名で指定された項目を取り出す	aDict.pop(key)
option: 文字コードをUTF8に指定する	encoding = 'utf-8'
ライム色でヒストグラムを描画する	plt.hist(データ列, color='lime')
スケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
ネイビー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
カウンタをリストに変換する	list(aCounter)
浮動小数点数のn乗	x ** n
青緑色を使ってヒストグラムを描画する	plt.hist(データ列, color='teal')
ホワイトスモーク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
改行なしに実行結果をプリントする	print(value, end='')
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
一度にデータフレームの列名を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
辞書をソートしてJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
実数を実数で割る	x / y
文字列が全て小文字	s.islower()
option: 青紫色を使う	color = 'violet'
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
実数の天井	math.ceil(x)
折れ線グラフの色をダークカーキに指定する	plt.plot(データ列x, データ列y, color='darkkhaki')
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
option: フクシア色を使う	color = 'fuchsia'
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
カラムが正規分布からどの程度、歪んでいるか見る	ds.kurt()
option: サンディーブラウン色を使う	color = 'sandybrown'
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
日付時刻データからn週間分減らす	aDatetime - datetime.timedelta(weeks=n)
列をキーにして二つの表データをジョインする	pd.merge(df, df2, on=column)
あらかじめASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
マッピングのキーを要素に設定する	aDict[key] = element
折れ線グラフを真紅色として描画する	plt.plot(データ列x, データ列y, color='crimson')
文字列の最初を見る	s[0]
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
散布図をローングリーン色として描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームの列の最頻値	df[col].mode()
NaNを含めて列の値でデータフレームをグループ化する	df.groupby(column, dropna=False)
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
ディレクトリをモジュールを検索するパスに追加する	sys.path.append(dir)
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
列を累加した列	itertools.accumulate(iterable)
グラフを濃くする	sns.set(pallete='deep')
option: クロスマーカーを使用する	marker = 'x'
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
オレンジレッドにヒストグラムの色を設定する	plt.hist(データ列, color='orangered')
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
組の最初のn要素を捨てる	aTuple[n:]
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データフレームの欠損値を最大値に減らす	df.fillna(df.max())
折れ線グラフをトマト色を用いて描画する	plt.plot(データ列x, データ列y, color='tomato')
線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
データフレームを1000の位で丸める	df.round(-3)
ミディアムシアグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
列の一意な要素数	df[col].nunique()
新しいリッジ回帰モデルを新規作成する	model = sklearn.linear_model.Ridge(alpha=正則化項)
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
グラフから格子を消す	plt.grid(False)
ヒストグラムをライトグリーン色を用いて描画する	plt.hist(データ列, color='lightgreen')
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
option: グラフの色をサーモンに設定する	color = 'salmon'
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
データフレームの先頭のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
ロージーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
データフレームのカラムのタイムゾーンを東京に設定する	df[col].tz_convert('Asia/Tokyo')
option: ダークレッド色を使う	color = 'darkred'
文字列を右寄せにする	s.rjust(文字列幅)
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
option: マーカーの色を濃い青にする	markerfacecolor = 'darkblue'
散布図をカーキ色として描画する	plt.scatter(データ列x, データ列y, color='khaki')
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
リストの要素を小さい順にソートする	sorted(aList, reverse=False)
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
日付時刻データの曜日を整数で使う	aDatetime.weekday()
縦棒グラフを描いて、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームのカラムがどの程度、分散しているか確認する	df[col].var()
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
イテラブル自身の長さnの順列	itertools.permutations(iterable, n)
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
データフレームの欠損値を最大値で置換する	df.fillna(df.max())
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
グラフの縦軸を対数に変更する	plt.yscale('log')
xを浮動小数点数に変換する	float(x)
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
option: セパレータをカンマにする	sep = ','
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
値は集合のメンバーか	element in aSet
option: コロンをセパレータで使用する	sep = ':'
エクセルファイルファイルのn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
列を関数でフィルタする	map(func, iterable)
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
オブジェクトからプロパティを削除する	delattr(obj, プロパティ名)
ファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
ヒストグラムをダークオレンジ色を用いて描画する	plt.hist(データ列, color='darkorange')
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
本日の日数	datetime.datetime.today().day
タイムスタンプデータは日付時刻データと同時か判定する	aDatetime == aDatetime2
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
option: オレンジにグラフの色を設定する	color = 'orange'
アルファベットの大文字列	string.ascii_uppercase
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
赤い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
オブジェクトが文字列クラスか調べる	isinstance(obj, str)
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
線グラフをディムグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='dimgrey')
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
散布図のマーカーを青色にする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
ライトスレイグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
二進数文字列を整数に変換する	int(s, 2)
多次元データをt分布型確率的近傍埋め込み法でパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
マッピングのキーに対応した値を得る	aDict.get(key)
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
データフレームの列の中にある日付データと文字列の合計を数える	df[col].isin([value, value2]).sum()
縦棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
シャルトリューズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
整数nを八進文字列に変換する	oct(n)[2:]
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
縦棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
ブラック色としてヒストグラムを描画する	plt.hist(データ列, color='black')
辞書のキーを列挙する	list(aDict)
列から双方向キューを作る	collections.deque(iterable)
降順にデータフレームを'A'列によってでソートする	df.sort_values(by='A', ascending=False)
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
nとn2の排他的論理和	n ^ n2
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
option: グラフの色をディープスカイブルーに変更する	color = 'deepskyblue'
option: フォントの色をミディアムオーキッドに設定する	color = 'mediumorchid'
横棒グラフをアイボリー色として描画する	plt.barh(データ列x, データ列y, color='ivory')
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
縦棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
xが一桁の数か調べる	-9 <= x <= 9
二進文字列を整数に変換する	int(s, 2)
y軸の目盛を表示しない	plt.yticks([])
行列の演算を行う	import numpy as np
散布図にrgbのダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図のマーカーを大バツ印にする	plt.scatter(データ列x, データ列y, marker='X')
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
折れ線グラフをダークカーキ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
日付時刻データは何曜日か知る	aDatetime.weekday()
整数nがリストのどれかか調べる	n in aList
黒い線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
折れ線グラフの右三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ファイルから読み込みストリームを開いて]、fとする	f = open(filepath, mode='r')
縦棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームのリストカラムの中にいくつ欠損値が存在するか数える	df[aList].isna().sum()
カウンタのキーとカウントをリストとして得る	aCounter.items()
集合の補集合	aSet.difference(aSet2)
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
カラーバーを横向きにプロットする	plt.colorbar(orientation='horizontal')
option: マーカーの色を青緑にする	markerfacecolor = 'turquoise'
ファイルをEUCで書き込みできるように開く]	open(filepath, mode='w', encoding='euc_jp')
データフレームのリストカラムの最頻値	df[aList].mode()
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
option: どの行もヘッダにしない	header = None
赤い破線で線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
プロットの凡例の位置を指定する	plt.legend(loc=(x, y))
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
イテラブルから配列を作る	np.array(iterable)
option: セパレータをスラッシュにする	sep = '/'
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
option: ライトサーモンにグラフの色を指定する	color = 'lightsalmon'
カラムをValueMapでまとめて置き換える	ds.replace(ValueMap)
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
option: ダイアモンドマーカーを描画する	marker = 'D'
ミディアムターコイズにヒストグラムの色を指定する	plt.hist(データ列, color='mediumturquoise')
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
クラスが名前付きタプルか調べる	issubclass(C, tuple)
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
カーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフの星印を青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
棒グラフをアイボリー色として描画する	plt.bar(データ列x, データ列y, color='ivory')
ヒストグラムの色をタンに変更する	plt.hist(データ列, color='tan')
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
棒グラフをラベンダーブラッシュ色として描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
option: グレーに色を設定する	color = 'gray'
折れ線グラフの線種を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列が全て英数字か調べる	s.isalnum()
符号付きで整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
組をn倍する	aTuple * n
散布図の色をバイオレットにする	plt.scatter(データ列x, データ列y, color='violet')
青い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
正規表現に文字列の先頭でケースを無視してマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
データ列のNaNをxで埋める	ds.fillna(x)
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
折れ線グラフにバツマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
ヒストグラムの色をバリーウッドにセットする	plt.hist(データ列, color='burlywood')
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
リストとリストの散布図にダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
トマト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
Pandasで、文字列のエポック秒からタイムスタンプ型に変換する	pd.to_datetime(s, unit='s', utc=True)
折れ線グラフの色をデピンクに変更する	plt.plot(データ列x, データ列y, color='deeppink')
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
option: スラグレーにグラフの色を設定する	color = 'slategray'
整数nの八進表記を見る	oct(n)
配列の次元を変形する	aArray.reshape(行数, 列数)
本日が金曜日かテストする	datetime.datetime.today().weekday() == 4
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
オレンジ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
行列の行ごとの標準偏差	np.std(aArray, axis=1)
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
アリスブルーにヒストグラムの色を変更する	plt.hist(データ列, color='aliceblue')
タプルを引数として展開して表示する	print(*aTuple)
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
グラフの使途をスライドに変更する	sns.set(context='talk')
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
散布図の三角マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ライトスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
グラフを表示する	plt.show()
nにn2を掛ける	n * n2
option: 大バツマーカーを描画する	marker = 'X'
データフレームのリストカラムのNaNを最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
nのn2乗	n ** n2
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
部分文字列を文字列の開始位置から探す	s.find(sub, start)
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
両端キューから最初の要素を取り除く	deq.remove(element)
オプションで、ファイルを使う	file = sys.open(filename, 'w')
ディムグレー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
ライトシアン色でヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
データフレームのpercent分位数	df.quantile(percent/100)
ガウス過程で回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
ヒストグラムの色をライトスチールブルーに指定する	plt.hist(データ列, color='lightsteelblue')
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
データフレームのカラムの中央値	df[col].median()
回帰直線データフレームのカテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データフレームを二つの列によって並べる	df.sort_values(by=['A', 'B'])
星マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
文字列を文字のリストに変換する	list(s)
折れ線グラフのダイアモンド印の色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
集合を変更不能なセットに変換する	frozenset(aSet)
データ列の月	ds.dt.month
データフレームを列によってグループ化し、最小値を求める	df.groupby(column).min()
データフレームのリストカラムがどれだけ分散しているか見る	df[aList].var()
x軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
昇順に列を用いてデータフレームを並べ直して、更新する	df.sort_values(by=column, ascending=True, inplace=True)
重複した行を破壊的にデータフレームから消す	df.drop_duplicates(inplace=True)
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
黒色で文字列をプリントする	print(f'\033[30m{value}\033[0m')
縦棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
カテゴリ別で色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
リストのn番目に文字列を挿入する	aList.insert(n, element)
実数とyの斜辺	math.hypot(x, y)
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
配列の要素ごとに加算する	aArray + aArray2
棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
アルファベットを使う	string.ascii_letters
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
コマンドの第一引数を調べる	sys.argv[1]
散布図の左三角印を黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームから指定した列だけ抽出する	df[[column]]
オリーブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
縦棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
option: アクア色を使う	color = 'aqua'
データフレームの列がx以上のデータを選択する	df[df[column] >= x]
option: シャルトリューズ色を使用する	color = 'chartreuse'
リストを境界値としてリストをビン分割する	pd.cut(aList, aList)
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームのリストカラムが正規分布からどの程度尖っているか見る	df[aList].skew()
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
データフレームのカラムを四捨五入して、整数にする	df[col].round().astype(int)
option: 淡いピンク色にグラフの色を設定する	color = 'lightpink'
リストのn番目の要素を削除する	del aList[n]
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
ヒストグラムの色をバイオレットに設定する	plt.hist(データ列, color='violet')
散布図に大バツマーカーを使用する	plt.plot(データ列x, データ列y, marker='X')
year年day月のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
線グラフの色をゴールドに変更する	plt.plot(データ列x, データ列y, color='gold')
option: オレンジレッド色を使う	color = 'orangered'
データを最大最小でスケーリングする	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
縦棒グラフをミディアムパープル色として描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
浮動小数点数の最小値を求める	sys.float_info.min
文字列の後ろから改行を除く	s.rstrip('\n')
'A'列によって破壊的に降順にデータフレームをソートする	df.sort_values(by='A', ascending=False, inplace=True)
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
コードポイントの最大値を知る	sys.maxunicode
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
文字列で区切って2つの数値を表示する	print(value, value2, sep=s)
データ列の偏りを平方根する	np.sqrt(データ列)
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
ダークターコイズ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
青い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: ダークゴールデンロッド色を用いる	color = 'darkgoldenrod'
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
線グラフの色を貝殻にする	plt.plot(データ列x, データ列y, color='seashell')
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
改行なしに文字列をプリントする	print(value, end='')
データフレームの列をカテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
横棒グラフをインディゴ色を用いて描画する	plt.barh(データ列x, データ列y, color='indigo')
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
option: 丸マーカーを使う	marker = 'o'
黒い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
標準入力から1文字だけ読む	sys.stdin.read(1)
データフレームのcollのUNIX秒から日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
グラフを画面用に指定する	sns.set(context='notebook')
文字列リストを一つにしてひとつの文字列にする	''.join(aStringList)
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
実数とyのノルムを求める	math.hypot(x, y)
ホワイトスモーク色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ファイルのファイル名	os.path.basename(filepath)
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
カウンタから辞書を減らす	aCounter.subtract(aDict)
赤い点線を用いて折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
データ列の中にいくつ日付データが存在するか数える	ds.isin([value]).sum()
二つのオブジェクトが等しいかどうか	obj == obj2
ダークバイオレット色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
グラフの中に枠なしの補足を入れる	plt.legend(frameon=False)
option: 上三角印を描画する	marker = '^'
バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x')
データフレームのカラムの歪度	df[col].kurt()
文字列の先頭から部分文字列を探す	s.find(sub)
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
データフレームの各グループごとの標準偏差	df.groupby(column).std()
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
データ列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
'A'列の値によってデータフレームをグループ化し、要約統計量を計算する	df.groupby('A').describe()
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
データフレームを10の位で丸める	df.round(-1)
文字の文字コード	ord(ch)
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
複数の列によってによってデータフレームを破壊的にソートする	df.sort_values(by=column, inplace=True)
データフレームのリストカラムの欠損値を中央値に指定する	df[aList].fillna(df[aList].median())
データフレームの行名をまとめてnameからname2に付け直す	df.rename(index={name: name2})
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
ベクトルのユニークな要素	np.unique(aArray)
ふたつの集合の差	aSet.difference(aSet2)
散布図をマルーン色として描画する	plt.scatter(データ列x, データ列y, color='maroon')
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
nにn2をかけた値をnに代入する	n *= n2
空のタプル	()
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
ブルーバイオレット色として線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
option: サドルブラウン色を使う	color = 'saddlebrown'
スプリンググリーン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: ミディアムシアグリーン色を使用する	color = 'mediumseagreen'
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
エラーを無視して文字列をバイト列にする	s.encode(errors='ignore')
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
グラフを画面用に変更する	sns.set(context='notebook')
プロットのタイトルを設定する	plt.title('グラフの名称')
ヒストグラムの色を深紅に設定する	plt.hist(データ列, color='crimson')
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
option: 青緑にグラフの色を設定する	color = 'teal'
左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
文字列をシンボルに変換する	sympy.Symbol(s)
データフレームからカテゴリデータの列名一覧を見る	df.select_dtypes('object').columns
option: アリスブルー色を使う	color = 'aliceblue'
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
散布図をrgbのポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: ビスク色を使う	color = 'bisque'
散布図の左三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームを'A'列の値によってグループ化する	df.groupby('A')
データフレームを各列と列の組み合わせ毎に分類して、最大値を求める	df.groupby([column, column2], as_index=False).max()
双方向キューのstart番目からend番目の部分要素を使う	collections.deque(itertools.islice(deq, start, end))
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
折れ線グラフをシルバー色を用いて描画する	plt.plot(データ列x, データ列y, color='silver')
データフレームの正規分布に対する上下広がりを算出する	df.skew()
データフレームのカラムの時刻	df[col].dt.hour
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
ゴールド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
散布図の星マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
nをn2だけ大きくする	n += n2
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
リストとデータ列の散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
赤い左三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='r')
ティール色のヒストグラムを描画する	plt.hist(データ列, color='teal')
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
三数の一番小さい値	max(x, y, z)
データフレームのカラムが正規分布からどれだけ、歪んでいるか見る	df[col].kurt()
破壊的にデータフレームを列名リストによってでソートする	df.sort_values(by=column, inplace=True)
実数のn乗して実数による余り	pow(x, n, y)
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
オールドレースにヒストグラムの色をする	plt.hist(データ列, color='oldlace')
カラムを百の位で丸めて、整数型にする	ds.round(-2).astype(int)
nにn2を加える	n + n2
整数nの二進文字列を見る	bin(n)[2:]
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
カウンタの項目を増やす	aCounter[element] += 1
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgray')
グラフの色を濃くする	sns.set(pallete='deep')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
オプションで、出力先をファイルに指定する	file = sys.open(filename, 'w')
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
折れ線グラフをミディアムアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
新しいロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
Pythonのバージョン	sys.version
データフレームの指定された列を取り出す	df[column]
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
実数を小数点以下第一位で丸める	round(x, 1)
散布図のクロスマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
option: 白色を使用する	color = 'white'
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
ルートを求める	math.sqrt(x)
データフレームのカラムの日	df[col].dt.day
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
データ列の折れ線グラフを▲印として描画する	plt.plot(データ列x, データ列y, marker='^')
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
ヒストグラムをパールゴールデンロッド色を用いて描画する	plt.hist(データ列, color='palegoldenrod')
option: 読み込む行番号をnamesで指定する	usecols = names
ヒストグラムの色をダークバイオレットに変更する	plt.hist(データ列, color='darkviolet')
半透明の実線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
リストのn番目のを使う	aList[n]
集合から要素を取り除く	aSet.remove(element)
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
実数を切り下げて整数に変換する	math.floor(x)
カラーバーを横向きで描く	plt.colorbar(orientation='horizontal')
黄色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
ダークマゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: ヘッダを自動的な連番に設定する	header = None
棒グラフをライトブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightblue')
空の集合を使う	set()
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
横棒グラフをディープスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
option: シスル色を使用する	color = 'thistle'
上位集合もしくは等しいか調べる	aSet > aSet2
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
ホワイトスモーク色としてヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
折れ線グラフに青い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
option: ８ビット整数型を使う	dtype = np.int8
データフレームの中の列をビン数nで分割する	pd.cut(df[col], n)
option: 昇順にする	ascending = True
縦棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
ファイルを絶対パスに変換する	os.path.abspath(filepath)
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
option: カーキ色を使用する	color = 'khaki'
パパイヤウィップ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
Pandasで、エポック秒のデータフレームのcollからPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
縦棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
バリーウッドにヒストグラムの色を設定する	plt.hist(データ列, color='burlywood')
オブジェクトはリストの要素か	element in aList
ライトスレイグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
集合をイミュータブルなセットに変換する	frozenset(aSet)
option: ミディアムパープルを使う	color = 'mediumpurple'
スチールブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
ライトスチールブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightsteelblue')
線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
データ列の出現頻度を可視化する	plt.hist(データ列)
プロットにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
option: フォントの色をミディアムスプリンググリーンに指定する	color = 'mediumspringgreen'
低頻度な方からカウンタをリストとして得る	aCounter.most_common()[::-1]
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
黒いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
整数nは組のいづれかか調べる	n in aTuple
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
option: グラフの色を茶色に設定する	color = 'brown'
データ列の推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
本日の年数	datetime.datetime.today().year
option: グラフの色をシエナに変更する	color = 'sienna'
データフレームを２つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
折れ線グラフの丸印の線幅を変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: グラフの色をオーキッドに設定する	color = 'orchid'
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
データフレームのヒストグラムを横に並べて可視化する	sns.displot(df, x='列名', col='カテゴリ名')
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
紺色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
option: ディムグレーにグラフの色を設定する	color = 'dimgray'
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
辞書の全項目をクリアする	aDict.clear()
サイコロ	random.randint(1, 6)
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
逆行列	np.linalg.inv(aArray)
文字列の両端から部分文字列を消す	s.strip(sub)
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
プラットホームがWindows	sys.platform.startswith('win32')
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
疑似乱数を正規分布で発生させる	random.normalvariate(mu=0.5, sigma=0.2)
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
数式を展開する	sympy.expand(e)
ヒストグラムの色をマゼンタに変更する	plt.hist(データ列, color='magenta')
新しいサポートベクター分類器を用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
コマンドの第二引数を知る	sys.argv[1]
実数をn乗する	x ** n
predicateFuncが真となる列の部分	itertools.dropwhile(predicateFunc, iterable)
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
日付データと日付データの時間差を求める	aDate - aDate2
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
数列とリストについて散布図を描いて、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
シーケンスを集合に変換する	set(iterable)
n個の要素があるリスト	[element] * n
全ての句読点文字	string.punctuation
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
データフレームの標準偏差	df.std()
配列の列ごとの合計値を計算する	np.sum(aArray, axis=0)
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
option: グラフの色をビスクに設定する	color = 'bisque'
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
リストの要素を逆順にする	aList[::-1]
カラムの母標準偏差	ds.std(ddof=0)
t-SNEを用いてパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
列の各データ値の出現数	ds.value_counts()
データフレームのリストカラムの75パーセンタイル	df[aList].quantile(0.75)
キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
ゴールド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
オブジェクトは論理値型か確認する	isinstance(obj, bool)
アクアマリン色を使ってヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
棒グラフをミディアムオーキッド色として描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
データフレームを'A'列と'B'列でソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ライトイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
実数の床	math.floor(x)
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
列によってデータフレームをグループ化して、それぞれのグループごとの分散を計算する	df.groupby(column).var()
データフレームのstart行目からend行目までを抽出する	df[start:end]
JSONを使う	import json
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
ローングリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
option: パレットトルコイズを使う	color = 'paleturquoise'
両端キューに要素をエンキューする	deq.appendleft(element)
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームのカラムが何分か見る	df[col].dt.minute
実数が負の数か調べる	x < 0
option: シエナを使う	color = 'sienna'
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
散布図の丸印を赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
バイアスなしの線形回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
データフレームの列が正規分布からどの程度、尖っているか見る	df[col].skew()
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
データ列の曜日数を求める	ds.dt.dayofweek
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
日付データにn時間分加算する	aDate + datetime.timedelta(hours=n)
散布図をダークスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
ヒストグラムの色をビスクに指定する	plt.hist(データ列, color='bisque')
リストの中の最も小さい値	min(aList)
整数nの十六進文字列	hex(n)[2:]
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
データフレームのインデックスがnの行を抽出する	df.loc[n]
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
データフレームを列でで破壊的に並べ直す	df.sort_values(by=column, inplace=True)
ピアソン相関係数でデータフレームの列と列の相関行列を計算する	df[[column, column2]].corr(method='pearson')
ヒストグラムの色をロイヤルブルーに変更する	plt.hist(データ列, color='royalblue')
配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
option: ダークカーキにグラフの色を設定する	color = 'darkkhaki'
ヒストグラムの色をミディアムブルーに変更する	plt.hist(データ列, color='mediumblue')
折れ線グラフの右三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
変数名をキーとして、辞書	dict(name=element)
データ列の日を求める	ds.dt.day
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
nがタプルのどれかか調べる	n in aTuple
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
nがn2未満、もしくはn3以上	n < n2 or n >= n3
全ての８進数字	string.octdigits
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
折れ線グラフをパールバイオレットレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='palevioletred')
nをn2だけ右シフトする	n >> n2
配列を等しい量になるようにn個にビン分割する	pd.qcut(aArray, n)
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
黒い▽マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
赤いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
散布図の左三角印を青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
文字列の開始位置から先に部分文字列が存在しないか	s.find(sub, start) == -1
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
オブジェクトのメモリビュー	memoryview(obj)
データフレームからランダムに選択する	df.sample()
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
文字列中にひとつでも非アスキー文字がある	any(not c.isascii() for c in s)
数式の因数分解を行う	sympy.factor(e)
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
ディープスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
option: 白にグラフの色を設定する	color = 'white'
８進数字を全部使う	string.octdigits
データフレームを列でグループ化して、最小値を求める	df.groupby(column).min()
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
サンディーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
横棒グラフを茶色色として描画する	plt.barh(データ列x, データ列y, color='brown')
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
文字列がタプルに含まれないか調べる	element not in aTuple
無限大	math.inf
縦棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
Pandasで、フォーマットを用いてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
option: 欠損値を先頭にする	na_position = 'first'
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
現在の秒数	datetime.date.today().second
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
散布図の色をブラウンにする	plt.scatter(データ列x, データ列y, color='brown')
データ列の四分位を作図する	plt.boxplot(データ列)
データフレームの重複を確認する	df.duplicated()
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
折れ線グラフのポイントマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
両端キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
データ列の欠損値をxで埋める	ds.fillna(x)
実行結果を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
文字列の終了位置以前に部分文字列が含まれるかどうか確認する	s.find(sub, 0, end) != -1
英文字から一つランダムに選ぶ	random.choice(string.ascii_uppercase)
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
文字列をn回だけ置き換える	s.replace(sub, newsub, n)
ペールグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
option: フォントの色をオーキッドに指定する	color = 'orchid'
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
option: UTF8を用いる	encoding = 'utf-8'
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
option: スレートブルーにグラフの色を設定する	color = 'slateblue'
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
両端キューが空	len(deq) == 0
実数がNaNか調べる	math.isnan(x)
タイムスタンプデータの時間数を見る	aDatetime.hour
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
積み上げ横棒グラフを描く	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
四角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの印を菱形にする	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムの色を茶色に変更する	plt.hist(データ列, color='brown')
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
option: ゴールデンロッド色を用いる	color = 'goldenrod'
option: フォントの色をタンに設定する	color = 'tan'
文字列の先頭	s[0]
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
nがn2か調べる	n == n2
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
作画のグリッドを白くする	sns.set(style='whitegrid')
データフレームの中に含まれる文字列と文字列の個数を数える	df.isin([value, value2]).sum()
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
行列の値	aArray[行番号, 列番号]
組を引数として展開して出力する	print(*aTuple, sep=',')
散布図の星マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
列の値によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
option: 読み込みモードに設定する	mode = 'r'
データフレームを列の値でグループ化して各グループごとの件数を知る	df.groupby(column).size()
option: 茶色を使う	color = 'brown'
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
ミスティローズ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
ヒストグラムの色をライトスレイグレーに変更する	plt.hist(データ列, color='lightslategray')
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
データフレームの列の文字列長を列として使う	df[col].str.len()
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
要素を双方向キューの最後に入れる	deq.append(element)
リネン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
データフレームのインデックスの一覧	df.index
淡いピンク色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
横棒グラフをホットピンク色として描画する	plt.barh(データ列x, データ列y, color='hotpink')
数式の簡略化を行う	sympy.sympify(e)
nがn2よりも小さいか調べる	n < n2
両端キューの中に要素が含まれてるか調べる	element in deq
イエローグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
nがn2かどうか調べる	n == n2
パステル調に色をグラフの描画で使う	sns.set(pallete='pastel')
リストの重複を取り除く	sorted(set(aList), key=aList.index)
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
マルーン色でヒストグラムを描画する	plt.hist(データ列, color='maroon')
データフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
文字列内にひとつでもアルファベットが含まれるか確認する	any(c.isalpha() for c in s)
折れ線グラフのダイアモンドマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
ValueMapでデータフレームの値を置き換える	df.replace(ValueMap)
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
リストの最後にリストを追加する	aList.extend(aList2)
折れ線グラフの色をトマトにセットする	plt.plot(データ列x, データ列y, color='tomato')
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
option: マーカーをポイントに変更する	marker = '.'
赤いダイアモンドマーカーを数列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='r')
文字列を部分文字列で二分し、前半の文字列を見る	s.partition(sub)[0]
実行結果を下線付きにする	f'\033[4m{value}\033[0m'
データフレームの中の欠損値を削除する	df.dropna()
縦棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
option: ASCII文字に限定する	flag = re.ASCII
BOM付きで既存のファイルパスを追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
option: マーカーの線幅を変更する	markeredgewidth = 2.5
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
実数を切り上げる	math.ceil(x)
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
option: ダークグレーを使う	color = 'darkgrey'
kを底とする実数の対数	math.log(x, k)
最初のプログラムを書く	print('Hello World')
半透明の実線としてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: 配列のデータ型を指定する	dtype = np.uint8
ダークオリーブグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
データ列の分散	ds.var()
タイムスタンプデータの曜日を整数で使う	aDatetime.weekday()
文字列がリストに含まれるか調べる	element in aList
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
データフレームから最後の列を除く	df[df.columns[:-1]]
データ列の曜日数を見る	ds.dt.dayofweek
0から始まる無限な数列	itertools.count()
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
option: ブラックに色を設定する	color = 'black'
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
データフレームの中央値	df.median()
文字列がリストの要素か調べる	element in aList
option: スラッシュを区切り記号で使う	sep = '/'
ミディアムスプリンググリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
データ列の時	ds.dt.hour
option: スレートブルーを使う	color = 'slateblue'
option: ヘッダをnamesに設定する	header = names
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
縦棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
n2がn以上かつ、n3以下	n <= n2 and n2 <= n3
データフレームのカラムの値がxより大きい行を抽出する	df[df[column] > x]
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
散布図のポイントマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
ダークスラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
option: 印の線幅を設定する	markeredgewidth = 2.5
整数nのビット長	n.bit_length()
option: モカシン色を使う	color = 'moccasin'
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ボックスチャートを用いてデータフレームの二つのカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
折れ線グラフをオールドレース色として描画する	plt.plot(データ列x, データ列y, color='oldlace')
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
両端キューの要素数を求める	len(deq)
標準エラーを	sys.stderr
要素が集合のメンバーか調べる	element in aSet
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
最後から文字列を空白で区切る	s.rsplit()
多次元データを多次元尺度構成法として淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
option: フォントの色をインディゴに設定する	color = 'indigo'
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
ナバホホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
非数値データ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データ列を正規表現patternで一度にreplに置き換える	ds.replace(pattern, repl, regex=True)
ダーク・スラテグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
option: 青を使う	color = 'blue'
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
ひとつでも非英数字が文字列中にあるか判定する	any(not c.isalnum() for c in s)
カラムの中にある日付データの合計を数える	ds.isin([value]).sum()
実数の整数部	math.modf(x)[1]
青にヒストグラムの色を設定する	plt.hist(データ列, color='blue')
データフレームとデータ列を横向きに連結する	pd.concat([df, ds], axis=1)
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
キューの中に値は含まれてるか調べる	element in deq
文字列の右側から空白を取り除く	s.rstrip(' ')
折れ線グラフの線種を破線にセットする	plt.plot(データ列x, データ列y, linestyle='dashed')
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
n進文字列をバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
option: 無視するフッタをnに設定する	skipfooter = n
文字列をコロンで区切って、列挙する	s.split(':')
配列を等量で分割数nでビン分割する	pd.qcut(aArray, n)
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
平均でデータフレームの欠損値を埋める	df.fillna(df.mean())
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
青い左三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
両端キューの末尾にシーケンスの各要素を順につけ加える	deq.extend(iterable)
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
データ列の曜日	ds.dt.weekday_name
ヒストグラムをプロットし、、ビン数を設定する	plt.hist(データ列, bins=区関数)
整数の小数点以下を丸める	round(x)
実行時の標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
句読点文字を全部使う	string.punctuation
option: マーカーの色を濃いシアンにする	markerfacecolor = 'darkcyan'
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
浮動小数点数の最大値	sys.float_info.max
t-SNEで淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
x軸の目盛りの表示値を変更する	plt.xticks(目盛りの値リスト)
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
日付時刻データの日数	aDatetime.day
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
option: 下三角マーカーを用いる	marker = 'v'
日付時刻データが何月か知る	aDatetime.month
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
実数のハイパボリック・タンジェントの逆数	math.atanh(x)
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
ヒストグラムの色をパープルに指定する	plt.hist(データ列, color='purple')
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
読み込みモードとしてファイルをオープンして]、fとする	f = open(filepath, mode='r')
散布図の大バツ印の太さを変える	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
未定値	None
option: ネイビー色を使う	color = 'navy'
タブ区切りのファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
データフレームの値がNaNか確認する	df.isna()
折れ線グラフの印を四角にする	plt.plot(データ列x, データ列y, marker='s')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
異なる列をキーとして二つのデータフレームを全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
y座標の最大・最小を変更する	plt.ylim(最小値, 最大値)
データフレームの中の列を分割する	pd.cut(df[col], aList)
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
ロージーブラウン色としてヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
文字列をバイト列に変換する	bytes(s)
パーセプトロンとしてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
横棒プロットを描いて、中央寄せする	plt.barh(ラベル列, データ列, align='center')
フクシア色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
集合にイテラブルの要素を追加する	aSet.update(iterable)
整数nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
整数nを8進表現に変換する	oct(n)
散布図を▼マーカーでプロットする	plt.plot(データ列x, データ列y, marker='v')
ローングリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lawngreen')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
数式を数値に変換する	float(e)
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
実数を千の位で丸める	round(x, -3)
異なるカラムをキーにして2つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
部分文字列を文字列の接尾辞から取り除く	s.removesuffix(sub)
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
ファイルからの入力ストリームを使う	open(filepath)
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o')
日付データが何年か知る	aDate.year
カーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
オブジェクトがリストに含まれない	element not in aList
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームのカラムを丸める	df[col].round()
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
option: 切片を算出しない	fit_intercept = False
赤い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
カウンタを辞書にする	dict(aCounter)
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
散布図の印を左三角にする	plt.scatter(データ列x, データ列y, marker='<')
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
イテラブルのイミュータブルな集合を準備する	frozenset(iterable)
ヒストグラムを上限から下限までの上限下限で描画する	plt.hist(データ列, range=(start, end))
データフレームの内容を見る	df.head()
横棒グラフをミディアムブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumblue')
カテゴリで色分けして、データフレームをにバイオリン図でプロット化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
棒グラフをイエローグリーン色として描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
因子分析を行う	model = sklearn.decomposition.PCA(n_components=n)
option: 線種を実線に設定する	linestyle = 'solid'
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
バイナリ書き込み用にファイルをオープンする]	open(filepath, mode='wb')
プラットフォームのコードポイントの最大値	sys.maxunicode
散布図をピーチパフ色を用いて描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
黒いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
option: スキップするフッタをnに設定する	skipfooter = n
線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
プログラムの実行をエラーとして終了する	sys.exit(1)
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
スノー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
リストを黒色でプリントする	print(f'\033[30m{value}\033[0m')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
折れ線グラフの色をオリベドラブにセットする	plt.plot(データ列x, データ列y, color='olivedrab')
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
横棒グラフをフクシア色として描画する	plt.barh(データ列x, データ列y, color='fuchsia')
破壊的にデータフレームを'A'列と'B'列によってでソートする	df.sort_values(by=['A', 'B'], inplace=True)
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームのカラムのどの値が頻出か調べる	df[col].mode()
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
横棒グラフをバイオレット色で描画する	plt.barh(データ列x, データ列y, color='violet')
棒グラフをチョコレート色として描画する	plt.bar(データ列x, データ列y, color='chocolate')
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
ファイルの絶対パス	os.path.abspath(filepath)
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
グリーンイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
リストをビン数nでビン分割する	pd.cut(aList, n)
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
散布図をオリベドラブ色として描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
データ列を十の位で丸めて整数型にする	ds.round(-1).astype(int)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
option: チョコレートにグラフの色を指定する	color = 'chocolate'
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
option: グラフの色を貝殻に設定する	color = 'seashell'
大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X')
実数の二進対数を求める	math.log2(x)
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームのリストカラムの尖度	df[aList].skew()
データフレームのリストカラムの平均値	df[aList].mean()
nをn2だけ減少させる	n -= n2
ロードされたモジュールの一覧を調べる	sys.modules
ライトサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
option: ダークオーキッド色を使う	color = 'darkorchid'
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
イテラブルを無限に繰り返す	itertools.cycle(iterable)
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
rgbの星マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列の中の複数行対応として正規表現による全マッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
カウンタを低頻度方から列挙する	aCounter.most_common()[::-1]
カウンタ同士で積集合	aCounter & aCounter2
小麦色色でヒストグラムを描画する	plt.hist(データ列, color='wheat')
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
線グラフの色をシャルトリューズに変更する	plt.plot(データ列x, データ列y, color='chartreuse')
データ列の中にある文字列の数を数える	ds.isin([value]).sum()
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
折れ線グラフの色をサドルブラウンに指定する	plt.plot(データ列x, データ列y, color='saddlebrown')
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
カウンタからマッピングを引く	aCounter.subtract(aDict)
折れ線プロットのラベルを指定する	plt.plot(データ列x, データ列y, label='ラベル')
辞書上でキーが定義済みか調べる	key in aDict
折れ線グラフの色をグリーンイエローに指定する	plt.plot(データ列x, データ列y, color='greenyellow')
辞書順で文字列は文字列より後か調べる	s > s2
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgray')
データフレームの上n行	df.head(n)
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
偽陰性を抑えたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
両端キューの先頭	deq[0]
option: 茶色色を使用する	color = 'brown'
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
アルファベットの大文字を全て見る	string.ascii_uppercase
値が集合に含まれないか調べる	element not in aSet
日付データが月曜日か確認する	aDate.weekday() == 0
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
ハローワールドとプリントする	print('Hello World')
イテラブルのイミュータブルな集合	frozenset(iterable)
データフレームで列と列の重複を消す	df.drop_duplicates(subset=[column, column2])
セットの更新不能版	frozenset(aSet)
茶色色として線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
表を各列とカラムの組み合わせ毎に集約して最大値を求める	df.groupby([column, column2], as_index=False).max()
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
縦棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
オリベドラブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの列を小数点以下n桁で丸める	df[col].round(n)
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
アルファベットを全部使う	string.ascii_letters
折れ線グラフの右三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
縦棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgray')
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームから列を４つだけ選択する	df[[column, column2, column3, column4]]
データフレームの欠損値を50パーセンタイルに設定する	df.fillna(df.median())
数式の積分を求める	sympy.integrate(e)
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
オリーブにヒストグラムの色をする	plt.hist(データ列, color='olive')
データを最大値と最小値として正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
文字列がリストの要素でないか調べる	element not in aList
データ列の分	ds.dt.minute
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
文字コードに対応する文字	chr(unicode)
コマンドラインフラグの状態	sys.flags
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
文字列はタイトルケースか	s.istitle()
線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
配列と配列について散布図を描画して、マーカーを▼に指定する	plt.plot(データ列x, データ列y, marker='v')
option: マーカーの色をダークレッドにする	markerfacecolor = 'darkred'
option: マーカーを右三角に変更する	marker = '>'
デピンクにヒストグラムの色を変更する	plt.hist(データ列, color='deeppink')
データ列を箱ひげ図にする	plt.boxplot(データ列)
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
折れ線グラフに青いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
グラフの中の日本語フォントを利用可能にする	sns.set(font='IPAexGothic')
グリーンイエローにヒストグラムの色を変更する	plt.hist(データ列, color='greenyellow')
option: ダークサーモン色を用いる	color = 'darksalmon'
データ列をビン分割する	pd.cut(ds, aList)
要素はセットのメンバーか	element in aSet
実数が正の数か調べる	x > 0
アクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
パールゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='palegoldenrod')
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
データフレームのインデックスの名前を一度に、nameからname2に付け直す	df.rename(index={name: name2})
nが5で割り切れるか調べる	n % 5 == 0
option: バッファを使わない	buffering = 0
集合をイミュータブルに変換する	frozenset(aSet)
縦棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
最初のカテゴリーを除外してデータフレームの列をダミー変数にする	pd.get_dummies(df[column], drop_first=True)
ファイルからn文字、読み込む	f.read(n)
文字列をカンマで区切って、列挙する	s.split(',')
折れ線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
数値をプリントする	print(value)
日付時刻データの分を使う	aDatetime.minute
Pandasでデータフレームのカラムをタイムスタンプ型に変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
xが1、もしくは2か調べる	x == 1 or x == 2
オブジェクトのイテレータ	iter(obj)
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
x座標のラベルをする	plt.xlabel('x軸ラベル')
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
文字列をコロンで区切って、文字列リストに変換する	s.split(':')
集合を空集合にする	aSet.clear()
計算機イプシロン	sys.float_info.epsilon
標準エラーを使う	sys.stderr
文字列の先頭だけ大文字化する	s.capitalize()
行列の行列積	np.matmul(aArray, aArray2)
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
文字列内にひとつでも英数字があるか	any(c.isalnum() for c in s)
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
中央値で列をビン分割する	pd.qcut(ds, 2)
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
乱数で要素を埋めた配列	np.random.random(N)
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
グリッド線を黄色くする	plt.grid(color='y')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
option: 欠損値は無視する	dropna = True
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
option: 色をオリーブに設定する	color = 'olive'
二つの文字列が等しいかどうか調べる	s == s2
数字を全部使う	string.digits
横棒グラフをネイビー色として描画する	plt.barh(データ列x, データ列y, color='navy')
カウンタ同士でユニオン	aCounter | aCounter2
二つの集合の∩を求める	aSet.intersection(aSet2)
青いヒストグラムを描画する	plt.hist(データ列, color='b')
円プロットでデータ列の割合を描画する	plt.pie(データ列, startangle=90)
データフレームのそれぞれのグループ毎の標準偏差を算出する	df.groupby(column).std()
マッピングのキーとその値を列挙する	aDict.items()
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
option: 改行の代わりに文字列を用いる	end = s
option: グラフを実線に指定する	linestyle = 'solid'
縦棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
文字列をトリムする	s.strip()
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
データ列の年	ds.dt.year
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
散布図をダークシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
nの三乗を求める	n ** 3
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
スピアマン順位相関係数でデータフレームの相関行列	df.corr(method='spearman')
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
ファイルをバイナリモードとしてオープンして]fとする	f = open(filepath, mode='rb')
option: ゴーストホワイトにフォントの色を設定する	color = 'ghostwhite'
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: 先頭のカラムをインデックスに設定する	index_col = 0
日付データを文字列でフォーマットして文字列にする	"aDate.strftime(""%d/%m/%y"")"
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
option: グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
option: ダークグレーを使う	color = 'darkgray'
全ての数字	string.digits
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
ライトコーラル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
横棒グラフをドジャーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
散布図の丸マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
日付時刻データは何日か知る	aDatetime.day
文字列を空白で区切って文字列リストにする	s.split()
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
浮動小数点数を整数に変換する	int(x)
点線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
数列の折れ線プロットを描き、、色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
option: コーラルにフォントの色を設定する	color = 'coral'
データフレームを'A'列と'B'列の値によって集約する	df.groupby(['A', 'B'])
線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
option: マーカーの色を変更する	markerfacecolor = '#800080'
Pandasで、データ列を書式fmtで日付データに変換する	pd.to_datetime(ds, format=fmt)
イエローグリーン色でヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
箱ヒゲ図を横方向にする	plt.boxplot(データ列, vert=False)
文字列でフォーマットして日付時刻データを文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
option: 色をライトグレーにセットする	color = 'lightgray'
1文字分標準入力から読み込む	sys.stdin.read(1)
Pythonパスのリスト	sys.path
アクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
イテラブルとデータ列について散布図を描画して、△マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
要素を集合から取り除く	aSet.remove(element)
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
実数の逆余弦	math.acos(x)
オブジェクトは組に含まれないか調べる	element not in aTuple
折れ線グラフをマルーン色として描画する	plt.plot(データ列x, データ列y, color='maroon')
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
ふたつの集合の和集合	aSet.union(aSet2)
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
option: 色をシエナにする	color = 'sienna'
辞書のキー一覧	list(aDict)
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
点線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
文字列の開始位置からと終了位置の間に部分文字列がある	s.find(sub, start, end) != -1
辞書から多重集合を生成する	collections.Counter(aDict)
Pandasで、エポック秒のデータ列からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
データ列を対数変換する	np.log(データ列)
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ヒストグラムの色をハニーデューに指定する	plt.hist(データ列, color='honeydew')
MSDを行う	model = sklearn.manifold.MSD(n_components=n)
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
全要素を０で初期化した３二ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.int16)
option: 下三角マーカーを描画する	marker = 'v'
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
eの乗数	math.exp(x)
数式を微分する	sympy.diff(e)
データフレームの列をインデックスに設定する	df.set_index(column)
ダークブルー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
option: 丸印を描画する	marker = 'o'
マッピングのキー一覧	list(aDict)
綺麗なグラフを描画する準備をする	import seaborn as sns
辞書のキーとその値を列挙する	aDict.items()
棒グラフをライトサーモン色を使って描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
ヒストグラムをグリーンイエロー色として描画する	plt.hist(データ列, color='greenyellow')
文字列中からパターンにケースを無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
実数が負かどうか確認する	x < 0
ブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
タイムスタンプデータが何月か知る	aDatetime.month
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
散布図を小麦色色として描画する	plt.scatter(データ列x, データ列y, color='wheat')
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
リストとデータ列についての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
散布図の星マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
日付時刻データをn分前にする	aDatetime - datetime.timedelta(minutes=n)
行列を平坦にする	aArray.flatten()
リストを黒色にする	f'\033[30m{value}\033[0m'
黒い上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
縦棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
データフレームの尖度を求める	df.skew()
文字列の左端から部分文字列を除く	s.lstrip(sub)
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
ヒストグラムと勾配ブースティングを用いて回帰分析をする	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: ホットピンク色を使う	color = 'hotpink'
ロバストな線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
整数nのバイト長	(n.bit_length() + 7) // 8
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
option: データ型を指定する	dtype = np.int32
リストと数列についての散布図に黒い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ヒストグラムをダークオリーブグリーン色を用いて描画する	plt.hist(データ列, color='darkolivegreen')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
option: マーカーを大バツに変更する	marker = 'X'
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
オブジェクトは数値か調べる	isinstance(obj, (int,float))
要素が全て1のベクトル	np.ones(要素数, dtype=np.int)
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
列でデータフレームをグループ化してグループの個数を求める	df.groupby(column).count()
文字列を太文字で表示できる文字列にする	f'\033[1m{value}\033[0m'
棒グラフをホワイトスモーク色を用いて描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
ファイルパスからディレクトリ名を使う	os.path.dirname(filepath)
データ列の中に文字列がある	ds.isin([value])
整数のn乗の実数剰余	pow(x, n, y)
文字列中の部分文字列の出現をカウントする	s.count(sub)
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
デピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
縦棒グラフをコーンフラワーブルー色として描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームの列がx以下の行を取り出す	df[df[column] <= x]
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
option: パールゴールデンロッド色を使用する	color = 'palegoldenrod'
データフレームを列によってソートする	df.sort_values(by=column)
散布図の丸マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: オールドレースにフォントの色を変更する	color = 'oldlace'
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
ファイルからのストリームを使う	open(filepath)
データフレームを列によってグループ化し、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームのリスト列の欠損値を中央値で置換する	df[aList].fillna(df[aList].median())
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
データ列の曜日数	ds.dt.dayofweek
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
mathをインポートする	import math
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
データフレームの欠損値をxで補う	df.fillna(x)
点線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
option: ポイントマーカーを描画する	marker = '.'
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
数式を変数について微分する	sympy.diff(e, z)
バイトオーダを調べる	sys.byteorder
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
イテラブルを多重集合にする	collections.Counter(iterable)
散布図の菱形マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
タブ	'\t'
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: ラベンダー色を使う	color = 'lavender'
データフレームの列の名前を列挙する	df.columns
マッピングの項目名と値を入れ替える	{v: k for k, v in aDict.items()}
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
リッジ回帰とロッソ回帰の組み合わせた分析の準備をする	model = sklearn.linear_model.ElasticNet()
グリッド線	plt.grid(alpha=0.5)
正規表現を使う	import re
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
nを十六進表現に変換する	hex(n)
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
'A'列と'B'列の値によってデータフレームをグループ化し記述統計量を求める	df.groupby(['A', 'B']).describe()
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
要素∈集合	element in aSet
折れ線グラフの右三角印を赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
文字列を部分文字列で区切り、、文字列リストに変換する	s.split(sub)
オブジェクトのバイトサイズ	sys.getsizeof(obj)
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
option: どのカラムもインデックスに設定しない	index_col = None
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
回帰木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
rgbの右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: 区切りをコロンにする	sep = ':'
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
乱数の行列を作る	np.random.random((行数, 列数))
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームのひとつのカラムのみ説明変数にする	説明変数 = df[['列名']]
折れ線グラフの色をローングリーンに変更する	plt.plot(データ列x, データ列y, color='lawngreen')
データ列の欠損値をxに設定する	ds.fillna(x)
辞書に要素をキーとして加える	aDict[key] = element
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
列のユニークな値の個数を見る	ds.nunique()
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
16進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
option: 整数型を用いる	dtype = np.int
折れ線グラフに丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
標準入力から1行受け取る	input()
棒グラフをネイビー色として描画する	plt.bar(データ列x, データ列y, color='navy')
散布図の四角印の色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
棒グラフをナバホホワイト色として描画する	plt.bar(データ列x, データ列y, color='navajowhite')
実数の平方根	math.sqrt(x)
ライムグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
データ列のノルムをそろえる	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
option: オレンジ色を使う	color = 'orange'
横棒グラフの色をブラウンにする	plt.barh(データ列x, データ列y, color='brown')
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
行列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
アルファベットの小文字列	string.ascii_lowercase
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームのリストカラムのどの値が最も現れるか調べる	df[aList].mode()
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
列から最大長nの両端キューを作る	collections.deque(iterable, maxlen=n)
option: マーカーを丸に変える	marker = 'o'
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
行列の行列式を求める	np.linalg.det(aArray)
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
クリムゾン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの先頭n行	df.head(n)
実数の余弦の逆数	math.acos(x)
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
日付時刻データは日付時刻データと同時か	aDatetime == aDatetime2
読み込みモードとしてファイルパスをオープンして]、fとする	f = open(filepath, mode='r')
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
平均値でデータ列の欠損値を埋める	ds.fillna(ds.mean())
散布図のマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
スピアマン相関係数を用いてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
ファイルパスをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
Pandasで、書式fmtを使ってデータフレームのcollをタイムスタンプ型にする	pd.to_datetime(df[col], format=fmt)
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
整数nの8進文字列	oct(n)[2:]
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
日付時刻データが何秒か知る	aDatetime.second
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
既存の行列を元に全要素が0のベクトル	np.zeros_like(aArray)
データフレームのカラムの欠損値をメディアンで埋める	df[col].fillna(df[col].median())
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
option: リネンにグラフの色を設定する	color = 'linen'
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
データフレームの重複した行だけを抽出する	df[df.duplicated(keep=False)]
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
散布図の▲マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
option: オリーブを使う	color = 'olive'
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
両端キューの先頭から要素を取り除く	deq.popleft()
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
逆順の両端キューを使う	reversed(deq)
二つの文字列は等しくないか調べる	s != s2
双方向キューの左	deq[0]
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
散布図に赤い△マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
nがn2よりも大きいかどうか	n > n2
option: データ型を指定する	dtype = np.int16
自然数の順列の総数	math.perm(n)
option: ロイヤルブルー色を使う	color = 'royalblue'
線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
折れ線グラフをダークオーキッド色として描画する	plt.plot(データ列x, データ列y, color='darkorchid')
ヒストグラムを暗い赤色を用いて描画する	plt.hist(データ列, color='darkred')
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
グラフを見やすくする	import seaborn as sns
リストの要素を昇順にソートする	sorted(aList, reverse=True)
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
日付時刻データが何日か知る	aDatetime.day
データフレームをCSVでJSONLファイルに保存する	df.to_csv(filename)
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
実数の常用対数	math.log10(x)
ファイル名がJSONファイルか調べる	filename.endswith('.json')
線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
option: ミディアムブルーにグラフの色を設定する	color = 'mediumblue'
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
TSVファイルファイル名がかどうか調べる	filename.endswith('.tsv')
散布図をコーンズシルク色として描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
縦棒グラフをバイオレット色で描画する	plt.bar(データ列x, データ列y, color='violet')
データフレームを降順に複数の列によってを用いて整列する	df.sort_values(by=column, ascending=False)
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
安全に文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
option: クロスマーカーを使う	marker = 'x'
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
リストとリストについての散布図に黒いダイアモンドマーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
濃いシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
文字列中に部分文字列が含まれない	sub not in s
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
カウンタの上位をリストとして得る	aCounter.most_common(k)
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
リストの最後	aList[-1]
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
特異値分解の準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
文字列がリストに含まれないか調べる	element not in aList
要素ひとつの組	(element,)
JSON文字列をデータにする	json.loads(jsonString)
ピーチパフ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
整数nが配列のどれかか調べる	n in aArray
線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
文字列中から正規表現に複数行対応としてマッチする位置を探す	re.search(pattern, s, flags=re.MULTILINE)
ファイルを一行ずつ読み込む	f.readline()
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
全要素を０で初期化した８ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int8)
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
双方向キューをタプルに変換する	tuple(deq)
辞書のコピー	dict(aDict)
ガンマ関数の値	math.gamma(x)
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
表データをインポートする	import pandas as pd
整数nの八進表現を使う	oct(n)
データフレームを各列毎にグループ分けして列の合計を計算する	df.groupby(column)[column2].sum()
ファイルパスを追加用に開く]	open(filepath, mode='a')
折れ線グラフの色をゴーストホワイトにセットする	plt.plot(データ列x, データ列y, color='ghostwhite')
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
マッピングをネスト化する	collections.ChainMap(aDict)
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
空のチェーンマップ	collections.ChainMap()
各カテゴリごとにデータフレームの棒グラフを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
データフレームを各列毎に集約して、列の最大値を求める	df.groupby(column)[column2].max()
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
縦棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
nが2で割り切れないか調べる	n % 2 == 1
実線でヒストグラムをプロットする	plt.hist(データ列, linestyle='solid')
ラインを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
0からnまでの整数列	list(range(n+1))
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
パープルにヒストグラムの色を設定する	plt.hist(データ列, color='purple')
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
プロットの名前を設定する	plt.title('グラフの名称')
データフレームの中で列と列の重複を確認する	df.duplicated(subset=[column, column2])
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
option: 最初のカラムをインデックスに設定する	index_col = 0
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
シーグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
y座標の表示範囲を変更する	plt.ylim(最小値, 最大値)
折り返しをしない	pd.set_option('expand_frame_repr', False)
変数が無限大に近づくとき数式の極限値を求める	sympy.limit(e, z, oo)
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
データフレームの平均値	df.mean()
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
オブジェクトのハッシュ値	hash(obj)
ミディアムオーキッド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
真上位集合か確認する	aSet > aSet2
文字列の示す文字コードを使ってファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
小数点数の自然対数	math.log(x)
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
option: ディムグレー色を使う	color = 'dimgray'
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
マッピングをカウンタに変換する	collections.Counter(aDict)
ライム色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
文字列リストにイテラブルを変換してタブで結合する	'\t'.join(map(str, iterable))
列の各データは何回出現するか確認する	df[col].value_counts()
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
データ列のNaNを直前の値で埋める	ds.fillna(method='ffill')
ホットピンク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
データフレームのリスト列の欠損値を平均値で置換する	df[aList].fillna(df[aList].mean())
最初のカテゴリーを除き、データフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
ヒストグラムをディムグレー色を用いて描画する	plt.hist(データ列, color='dimgray')
整数nがセットのいづれか	n in aSet
option: グラフの色を紺碧に指定する	color = 'azure'
option: シルバー色を使う	color = 'silver'
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
option: グラフの色を紺に設定する	color = 'darkblue'
空白文字を使う	' '
文字列がひらがな	('ぁ' <= ch <= 'ん')
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
グラフをポスター用に設定する	sns.set(context='poster')
変数名を項目名として、辞書を生成する	dict(name=element)
オブジェクトの参照カウントを見る	sys.getrefcount(obj)
新しいリッジ回帰モデルを用意する	model = sklearn.linear_model.Ridge(alpha=正則化項)
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
ファイルパスのセパレータ記号	os.sep
option: スラグレー色を使う	color = 'slategray'
ファイルを追加モードでオープンする]	open(filepath, mode='a')
ヒストグラムを半透明化する	plt.hist(データ列x, alpha=0.5)
散布図に黒いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
ベクトルを縦ベクトルに変形する	aArray.reshape(-1, 1)
option: 青緑を使う	color = 'teal'
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
ゴーストホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
データフレームの列の名前の一覧を使う	df.columns
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
ヒストグラムの色をシアンに変更する	plt.hist(データ列, color='cyan')
データフレームの列と列の相関行列をヒートマップとしてグラフ化する	sns.heatmap(df[[column, column2]].corr())
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
Pandasで、日付データのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
option: トマト色を用いる	color = 'tomato'
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
折れ線グラフの色を茶色に指定する	plt.plot(データ列x, データ列y, color='brown')
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
実数が無限大か調べる	math.isinf(x)
ファイルの拡張子を使う	os.path.splitext(filepath)[1].lstrip('.')
黒い大バツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
リストと配列の散布図を描画して、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列をASCII限定として正規表現で区切る	re.split(pattern, s, flags=re.ASCI)
option: 色をシアンに設定する	color = 'cyan'
降順に破壊的に複数の列によってデータフレームを整列する	df.sort_values(by=column, ascending=False, inplace=True)
カテゴリデータを連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
黒い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
モカシン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
日付時刻データの時間数	aDatetime.hour
文字列の両端から空白を消す	s.strip()
実部と虚部から複素数	complex(x, y)
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
option: オレンジレッド色を使用する	color = 'orangered'
縦棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
日付時刻データが日付時刻データより前かどうか	aDatetime < aDatetime2
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
散布図をオレンジレッド色を使って描画する	plt.scatter(データ列x, データ列y, color='orangered')
ひとつでもASCII文字が文字列内にあるか調べる	any(c.isascii() for c in s)
データ列の欠損値を直後の値で補う	ds.fillna(method='bfill')
カウンタの上位を列挙する	aCounter.most_common(k)
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
オブジェクトをユーザ向けの文字列に変換する	str(obj)
折れ線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
列を2回あわせたデカルト積を算出する	itertools.product(iterable, repeat=2)
NaNを用いる	math.nan
文字列の先頭で正規表現に複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
日付データの月を使う	aDate.month
nが3で割り切れるか調べる	n % 3 == 0
PNGファイルとしてグラフを保存する	plt.savefig('foo.png')
nがn2以下、またはn3以上	n <= n2 or n >= n3
データフレームを'A'列で昇順にソートする	df.sort_values(by='A', ascending=True)
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
ケンドールを用いてデータフレームの列とカラムの相関行列を求める	df[[column, column2]].corr(method='kendall')
データフレームの中のカラムと列に重複があれば、落とす	df.drop_duplicates(subset=column)
option: クリムゾン色を用いる	color = 'crimson'
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
文字列が文字列リストのいづれか調べる	s in aStringList
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
option: ペルー色を使用する	color = 'peru'
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
エンコーディング	sys.getdefaultencoding()
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
データフレームを2つの列によって大きい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
カデットブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cadetblue')
option: ダークオーキッドにグラフの色を設定する	color = 'darkorchid'
列の未入力値をxで埋める	ds.fillna(x)
データフレームの列の文字列が文字列が含まれる行を取り出す	df[df[column].str.contains(s)]
散布図をライムグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='limegreen')
データ列を日付データに変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
大文字を小文字に変換する	s.lower()
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
データフレームの第三四分位数	df.quantile(0.75)
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
文字列中にひとつでも非アルファベットが含まれるかどうか調べる	any(not c.isalpha() for c in s)
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
option: イエローグリーンを使う	color = 'yellowgreen'
option: グラフの色をブラックに設定する	color = 'black'
折れ線グラフの四角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
横棒グラフをロイヤルブルー色として描画する	plt.barh(データ列x, データ列y, color='royalblue')
折れ線グラフとしてリストを可視化する	plt.plot(データ列x, データ列y)
グラフで用いるフォントを指定する	sns.set(font=フォント名)
データフレームの欠損値を第二四分位数で埋める	df.fillna(df.median())
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
ランダムフォレストで回帰分析をする	model = sklearn.ensemble.RandomForestRegressor()
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
option: グラフの色をディムグレーに指定する	color = 'dimgray'
rgbのバツマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
黒い星マーカーを配列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='*', c='k')
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
横棒プロットの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
実数以下の最大の整数	math.floor(x)
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
文字列が文字列より辞書順で前	s < s2
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
1行だけ標準入力から読み込んで改行を取り除く	sys.stdin.readline().rstrip()
データフレームを列によって昇順に並べ直す	df.sort_values(by=column, ascending=True)
実数の正弦の逆数	math.asin(x)
データフレームの指定された列を選択する	df[[column]]
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
数式の変数についてのn階微分を行う	sympy.diff(e, z, n)
真部分集合か調べる	aSet < aSet2
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
データフレームの列と列の相関行列	df[[column, column2]].corr()
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
リストの先頭を取り除く	aList[1:]
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
標準エラーを得る	sys.stderr
辞書を計数器に変換する	collections.Counter(aDict)
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
文字列を空白で分割し、、文字列リストに変換する	s.split()
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
真紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
折れ線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
縦棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
要素ひとつのりスト	[element]
縦棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
option: ドジャーブルー色を使う	color = 'dodgerblue'
線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='grey')
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームの列を文字列に名前を変更する	df.rename(columns={column: name})
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
データフレームのそれぞれのグループごとの分散を求める	df.groupby(column).var()
列をn個にビニングしてnamesのラベルをつける	pd.cut(ds, n, labels=names)
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
リストとリストの散布図を描いて、上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ゼロ埋めされた行列	np.zeros(行数, 列数)
データフレームのカラムの正規分布に対する左右対称性を求める	df[col].kurt()
ホワイトスモーク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
折れ線グラフをフローラルホワイト色として描画する	plt.plot(データ列x, データ列y, color='floralwhite')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
ブルーバイオレット色としてヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
formatパターンの文字列をタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
散布図を赤い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
predicateFuncが真となるイテラブルの部分	itertools.takewhile(predicateFunc, iterable)
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
黒い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
散布図に赤い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='r')
実数の正接	math.tan(x)
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
散布図に青い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
文字列をASCII限定としてパターンで分割する	re.split(pattern, s, flags=re.ASCI)
配列の行ごとの合計値	np.sum(aArray, axis=1)
タプルの末尾を取り除く	aTuple[:-1]
棒グラフをライトゴールドロディイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの尖度	df.skew()
データフレームから重複を残さず、消す	df.drop_duplicates(keep=False)
日付データの日数を使う	aDate.day
カウンタ同士でユニオンを計算する	aCounter | aCounter2
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
第二引数で指定されたファイルの名前	sys.argv[1]
データフレームのカラムの値が欠損値か調べる	df[col].isna()
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
nの各桁の総和	sum(map(int, str(n)))
sepを区切りにして文字列リストをひとつの文字列にする	sep.join(aStringList)
文字列をプリントする	print(value)
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
折れ線グラフの四角印を赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
折れ線グラフを小麦色色を使って描画する	plt.plot(データ列x, データ列y, color='wheat')
データフレームを'A'列によってグループ分けする	df.groupby('A')
▲マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
黒いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
カーキ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
ヒストグラムの色をゴールデンロッドにする	plt.hist(データ列, color='goldenrod')
プロットにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
データフレームの末尾	df.tail()
線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
今日が火曜日か調べる	datetime.datetime.today().weekday() == 1
未初期化の配列	np.empty(要素数, dtype=np.int)
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
option: カデットブルー色を使う	color = 'cadetblue'
折れ線グラフの菱形印の線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
option: 文字コードtextを用いる	encoding = text
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
option: マーカーの線幅を指定する	markeredgewidth = 2.5
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
ライトコーラルにヒストグラムの色を指定する	plt.hist(データ列, color='lightcoral')
文字列を複数行対応としてパターンで分割する	re.split(pattern, s, flags=re.MULTILINE)
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
option: タブをセパレータで使う	sep = '\t'
オブジェクトからフィールドを消す	delattr(obj, プロパティ名)
predicateFuncが真になる列の要素	itertools.takewhile(predicateFunc, iterable)
nがn2の倍数でないか調べる	n % n2 != 0
リストが空	len(aList) == 0
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
option: 改行をセパレータで使う	sep = '\n'
リストの長さ	len(aList)
整数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.int)
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
改行なしに二つの文字列をプリントする	print(value, value2, end='')
数式を積分する	sympy.integrate(e)
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
２数の最大値	max(x, y)
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
リストをリバースする	reversed(aList)
n個の整数列	list(range(n))
多次元データをt分布型確率的近傍埋め込み法として濃く次元に削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
カラムの未入力値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
option: コーンズシルク色を使う	color = 'cornsilk'
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
辞書からキーで指定された項目をポップする	aDict.pop(key)
コーラル色としてヒストグラムを描画する	plt.hist(データ列, color='coral')
三つの文字列を順に出力する	print(value, value2, value3)
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
データフレームの指定された４つの列を抽出する	df[[column, column2, column3, column4]]
ヒストグラムをライム色として描画する	plt.hist(データ列, color='lime')
option: ライトイエロー色を使う	color = 'lightyellow'
データフレームを列の値によってグループ分けし、、各グループごとの最小値を求める	df.groupby(column).min()
option: グラフの色をハニーデューに設定する	color = 'honeydew'
rangeの無限版	itertools.count(start=n, step=step)
リストを複製する	aList.copy()
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
カラムを配列として取り出す	df[column].values
線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgray')
タプルのオブジェクトが最初に見つかる場所	aTuple.index(element)
文字列がタプルの要素か確認する	element in aTuple
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
三角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムの上限下限を変更する	plt.hist(データ列, range=(start, end))
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームの列の値がxである行を抽出する	df[df[column] == x]
数式の変数に数値を代入する	e.subs(z, e2)
option: グレー色を使う	color = 'gray'
散布図をサドルブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
option: イエローグリーンにグラフの色を指定する	color = 'yellowgreen'
エクセルデータファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
データフレームの最後を確認する	df.tail()
コーンズシルクにヒストグラムの色を設定する	plt.hist(データ列, color='cornsilk')
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
option: 説明変数を事前に正規化する	normalize = True
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
縦棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
カラムのpercentパーセンタイルを求める	ds.quantile(percent/100)
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
散布図の左三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
option: パレットトルコイズ色を用いる	color = 'paleturquoise'
option: ゴールドを用いる	color = 'gold'
nの八進文字列	oct(n)[2:]
線グラフをダークゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
文字列をカンマで分割して文字列リストにする	s.split(',')
折れ線グラフの大バツ印の色を設定する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
疑似乱数を計算する	random.random()
option: グラフの色をディムグレーにセットする	color = 'dimgray'
ヒストグラムをブルーバイオレット色を用いて描画する	plt.hist(データ列, color='blueviolet')
縦棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
実数の整数部を求める	math.modf(x)[1]
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
変数を定義する	x = n
線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
ミッドナイトブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
組の中の最小値	min(aTuple)
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
nが5で割り切れる	n % 5 == 0
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
イテラブルをカウンタに変換する	collections.Counter(iterable)
プラットフォームの整数の最大値	sys.maxsize
実数を十六進文字列にする	x.hex()
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
日付データをタプルに変換する	aDate.timetuple()
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
データフレームを列名リストを用いてソートし、、更新する	df.sort_values(by=column, inplace=True)
散布図の▽マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームの中のNaNの合計をカウントする	df.isna().sum()
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
線グラフを濃いシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
文字列は全て印字できるか調べる	s.isprintable()
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
リストの全ての要素をクリアにする	aList.clear()
赤い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
リストとデータ列についての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームのリスト列の値をValueMapで一度に置き換える	df[aList].replace(ValueMap)
スラッシュで区切って二つの文字列を表示する	print(value, value2, sep='/')
棒グラフをシルバー色を用いて描画する	plt.bar(データ列x, データ列y, color='silver')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
折れ線グラフを赤色を用いて描画する	plt.plot(データ列x, データ列y, color='red')
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
本日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
文字列の両端から空白を取り除く	s.strip()
縦棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
データフレームを2つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
降順にデータフレームを'A'列によってで並べる	df.sort_values(by='A', ascending=False)
逆正接	math.atan(x)
xが-9以上、9以下か調べる	-9 <= x <= 9
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
リストの個数だけ繰り返す	range(len(aList))
変数を赤色でプリントする	print(f'\033[31m{value}\033[0m')
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
折れ線グラフを色付きの実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
ヒストグラムの色をミディアムバイオレットレッドに変更する	plt.hist(データ列, color='mediumvioletred')
option: 丸マーカーを描画する	marker = 'o'
ライトグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
option: パールバイオレットレッド色を使う	color = 'palevioletred'
option: 改行コードを旧Macに変更する	newline = '\r'
データフレームを二つの列で並べ直して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
ヒストグラムをターコイズ色として描画する	plt.hist(データ列, color='turquoise')
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
表データの列をドロップして、入れ替える	df.drop(column, axis=1, inplace=True)
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ファイルパスの拡張子なしのファイル名	os.path.splitext(os.path.basename(filepath))[0]
データフレームの分散を求める	df.var()
nとn2の論理積を計算する	n & n2
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
要素ひとつのりストを得る	[element]
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
改行なしに数値をプリントする	print(value, end='')
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
option: タブをセパレータで用いる	sep = '\t'
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
option: スカイブルー色を使う	color = 'skyblue'
n番目のカラムをインデックスとしてCSVファイルTSVファイルを読み込む	pd.read_csv(filename, index_col=n)
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
データフレームをグループ化しそれぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
実数の逆双曲線余弦を計算する	math.acosh(x)
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
ロバストな線形分類モデルを用意する	model = sklearn.linear_model.HuberClassifier()
データフレームから型の列を抽出する	df.select_dtypes(ty)
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
標準出力を使う	sys.stdout
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
option: インデックスを自動的な連番に設定する	index_col = None
集合をリストに変換する	list(aSet)
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
option: ハニーデュー色を使用する	color = 'honeydew'
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
データ列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
データフレームを100の位で四捨五入して、整数にする	df.round(-2).astype(int)
折れ線グラフの左三角マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
色名とカラーコードの対応表を求める	matplotlib.colors.cnames
散布図を赤いダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
折れ線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
option: 最初の行をヘッダに設定する	header = 0
データフレームのカラムの中にある文字列の数を数える	df[col].isin([value]).sum()
赤にヒストグラムの色を設定する	plt.hist(データ列, color='red')
ゲインズボロ色でヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
xが1もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
データ列を1000の位で四捨五入する	ds.round(-3)
グラフの色をパステル調にする	sns.set(pallete='pastel')
option: バイナリ書き込みモードに設定する	mode = 'wb'
option: グラフの色をスプリンググリーンに指定する	color = 'springgreen'
option: ライトグレーにグラフの色を変更する	color = 'lightgray'
xが一桁の整数か	-9 <= x <= 9
option: マーカーを四角に変更する	marker = 's'
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
空の辞書	{}
タプルをn回、接続する	aTuple * n
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
データフレームを丸める	df.round()
実数の双曲線正接の逆数	math.atanh(x)
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
二つの実行結果を順にプリントする	print(value, value2)
y座標の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
オレンジ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データ列とリストについて散布図を描いて、マーカーを三角に指定する	plt.plot(データ列x, データ列y, marker='^')
配列をビン分割する	pd.cut(aArray, aList)
サポートベクター回帰モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
タプルの中の最大値	max(aTuple)
二つの変数をそれぞれ定義する	x, y = i, j
ダークカーキ色でヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
option: フォントの色をゴールデンロッドに設定する	color = 'goldenrod'
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
空セット	set()
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
上位集合もしくは等しいかどうか判定する	aSet > aSet2
年月日と時刻からタイムスタンプ	datetime.datetime(年, 月, 日, 時, 分, 秒)
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
散布図を赤い▼マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
色名からカラーコードを見る	matplotlib.colors.cnames[色名]
タプルのn番目の	aTuple[n]
データ列を百の位で丸めて整数型にする	ds.round(-2).astype(int)
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
データフレームのカラムが何年か見る	df[col].dt.year
データフレームの中のカラムをビン数nを用いてビニングしてnamesのラベルをつける	pd.cut(df[col], n, labels=names)
イテラブルを両端キューに変換する	collections.deque(iterable)
浮動小数点数のn乗を求める	pow(x, n)
日付時刻データが日曜日	aDatetime.weekday() == 6
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
ヒストグラムを破線に指定する	plt.hist(データ列, linestyle='dashed')
ライトスレイグレーにヒストグラムの色を変更する	plt.hist(データ列, color='lightslategray')
option: ビスク色を用いる	color = 'bisque'
ライトコーラル色でヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
エポック秒から日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
レベッカパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
折れ線グラフでイテラブルの推移を描画する	plt.plot(range(len(データ列)), データ列)
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
データ列は正規分布からどの程度、歪んでいるか見る	ds.kurt()
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
実数のn乗して実数による余りを求める	pow(x, n, y)
option: フォントの色をライムグリーンにする	color = 'limegreen'
インディゴ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
エクセルファイルファイルからエクセルファイルを読む	pd.read_excel(filename)
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
散布図の四角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
option: 配列のデータ型を指定する	dtype = np.int16
モカシン色でヒストグラムを描画する	plt.hist(データ列, color='moccasin')
データフレームを関数によってグループ化し基本統計量を求める	df.groupby(関数).describe()
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
折れ線グラフの▼マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
イテラブルを文字列リストに変換して空白によって連結する	' '.join(map(str, iterable))
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
黄緑色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
散布図の▽マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
リストが空か調べる	len(aList) == 0
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
散布図をダーク・スラテグレー色として描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
データフレームから列を一つ選択する	df[[column]]
複数の列によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
データフレームのどの値が頻出か調べる	df.mode()
文字列がリストの要素でないかどうか調べる	element not in aList
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
線グラフをチョコレート色として描画する	plt.plot(データ列x, データ列y, color='chocolate')
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
折れ線グラフの色をマルーンに変更する	plt.plot(データ列x, データ列y, color='maroon')
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
3変数の最も大きい値	max(x, y, z)
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
二つのデータフレームを横方向に一つにする	pd.concat([df, df2], axis=1)
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
サンディーブラウンにヒストグラムの色をする	plt.hist(データ列, color='sandybrown')
リストの個数	len(aList)
データフレームを複数の列でまとめた表	df.groupby(columns)
茶色色でヒストグラムを描画する	plt.hist(データ列, color='brown')
やわらかい青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームから型のカラムを取り出す	df.select_dtypes(ty)
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
データ列を円グラフにする	plt.pie(データ列, startangle=90)
縦棒グラフを珊瑚色で描画する	plt.bar(データ列x, データ列y, color='coral')
リストから文字列を取り除く	aList.remove(element)
option: 青緑色を使う	color = 'teal'
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
データフレームのリスト列を10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
option: マーカーの色をタンにする	markerfacecolor = 'tan'
ふたつの集合に共通する要素からなる集合を求める	aSet.intersection(aSet2)
データ列の四分位を可視化する	plt.boxplot(データ列)
カウンタ同士で積集合演算する	aCounter & aCounter2
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
正則化付き線形回帰分析を行う	model = sklearn.linear_model.ElasticNet()
ベクトルを平坦化する	aArray.flatten()
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
イテラブルとデータ列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
x,yの複素数	complex(x, y)
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
両端キューのn番目	deq[n]
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
紺碧色として散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
カウンタを少ない順番に列挙する	aCounter.most_common()[::-1]
数式の積分を行う	sympy.integrate(e)
1からnまでの整数リストを得る	list(range(1, n+1))
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
正規表現モジュールをインポートする	import re
文字列の末尾から部分文字列を探す	s.rfind(sub)
空のリストを作る	[]
データフレームを'A'列で大きい順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
珊瑚色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
nからn2までのひとつ飛ばしの整数リスト	list(range(n, n2+1, 2))
文字列の無限な列	itertools.repeat(element)
折れ線グラフの色をインディゴに変更する	plt.plot(データ列x, データ列y, color='indigo')
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
カウンタの項目一覧	aCounter.keys()
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
option: ブール型を使う	dtype = np.int32
option: グラフの色をピンクにセットする	color = 'pink'
折れ線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
作画のx軸とy軸の比率を同じする	plt.axis('equals')
珊瑚色のヒストグラムを描画する	plt.hist(データ列, color='coral')
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
option: 改行コードを旧Macに設定する	newline = '\r'
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
本日が月曜日	datetime.datetime.today().weekday() == 0
文字列の左端から空白を取り除く	s.lstrip(' ')
セットの浅いコピー	aSet.copy()
データフレームの重複した行をマスクする	df.duplicated()
option: 黄色色を使う	color = 'yellow'
散布図の色をホワイトにする	plt.scatter(データ列x, データ列y, color='white')
自然数最小公倍数	math.lcm(n, n2)
組の先頭	aTuple[0]
最適な位置に凡例を表示する	plt.legend(loc='best')
空のカウンタ	collections.Counter()
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
データフレームの列をヒストグラムにする	plt.hist(df[column])
線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
文字列が組に含まれるか確認する	element in aTuple
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
２つのデータフレームを縦方向に連結する	pd.concat([df, df2])
option: 右三角マーカーを使う	marker = '>'
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
データ列の月を見る	ds.dt.month
モデルの平均2乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
n番目のシートをエクセルファイルファイルの読み込む	pd.read_excel(filename, sheet_name=n)
文字列リストをsepを区切りとしてつなげる	sep.join(aStringList)
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
出力ストリームにxを文字列に変換して書き込む	f.write(str(x))
文字列を全て大文字に変換する	s.upper()
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
データフレームをJSONLファイルに保存する	df.to_excel(filename)
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
リストとリストの散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
二つのオブジェクトは同一か確認する	obj is obj2
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
等量で列をビン数nでビン分割する	pd.qcut(ds, n)
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
二つの集合が互いに素かどうか調べる	aSet.isdisjoint(aSet2)
xの印字可能な文字列	ascii(x)
オレンジ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
ファイルパスを追加モードで開いて]、fとする	f = open(filepath, mode='a')
ヒストグラムの色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
スクリプトの名前	sys.argv[0]
option: ミスティローズにフォントの色を変更する	color = 'mistyrose'
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
インディアンレッド色でヒストグラムを描画する	plt.hist(データ列, color='indianred')
小麦色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
自然数の最大公約数	math.gcd(n, n2)
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
2を底とする実数の対数を求める	math.log2(x)
折れ線グラフに青いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
折れ線グラフにポイントマーカーを加える	plt.plot(データ列x, データ列y, marker='.')
option: グラフの色をダークオーキッドに変更する	color = 'darkorchid'
散布図にダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
配列をn個にビン分割する	pd.cut(aArray, n)
データフレームを各列と列の組み合わせ毎に分類し、、最小値を求める	df.groupby([column, column2], as_index=False).min()
ダークグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
データ列を百の位で丸める	ds.round(-2)
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
カウンタを高頻度な方から列挙する	aCounter.most_common()
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
データフレームのリスト列を千の位で丸める	df[aList].round(-3)
赤い右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
option: タン色を使う	color = 'tan'
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
散布図のダイアモンドマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
日付データの曜日を求める	aDate.weekday()
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
折れ線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
ヒストグラムをゴールド色として描画する	plt.hist(データ列, color='gold')
スプリンググリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
平均値付きボックスチャートをプロットする	plt.boxplot(データ列, showmeans=True)
折れ線グラフの色をダークオレンジにする	plt.plot(データ列x, データ列y, color='darkorange')
線グラフの色をパールバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='palevioletred')
本日をタプルにする	datetime.datetime.today().timetuple()
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
option: 印をダイアモンドに変更する	marker = 'D'
フォレストグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
Pandasで文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
文字列を全て小文字に変換する	s.lower()
option: 白色を用いる	color = 'white'
データフレームを列によってソートし、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
行列の要素数	aArray.size
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
データフレームのカラムの欠損値を50パーセンタイルに設定する	df[col].fillna(df[col].median())
赤い右三角マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
データ列の欠損値をメディアンで埋める	ds.fillna(ds.median())
ディープスカイブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
option: グラフの色をクリムゾンに設定する	color = 'crimson'
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
データフレームのカラムの中に日付データが存在するか	df[col].isin([value])
グラフの色を明るくする	sns.set(pallete='bright')
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
イテラブルの全順列	itertools.permutations(iterable)
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
乱数生成系列をnで初期化する	random.seed(n)
ダークスラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
SJISでファイルパスをオープンする]	open(filepath, encoding='shift_jis')
折れ線グラフの星印の色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
データ列をヒストグラムにする	plt.hist(データ列)
棒グラフをカーキ色を用いて描画する	plt.bar(データ列x, データ列y, color='khaki')
散布図に赤い菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ミディアムパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
折れ線グラフの星マーカーを青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
グラフの背景色を暗くする	sns.set(style='darkgrid')
ダークバイオレット色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
ピンク色として線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
SJISで文字列をバイト列にする	s.encode(encoding='sjis', errors='ignore')
本日の月数	datetime.datetime.today().month
ファイルをSJISとして書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
折れ線グラフの下三角印を赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
データフレームを使う	import pandas as pd
パラメータについて数値の微分を行う	sympy.diff(e, z)
シルバー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
nが-9以上9以下か調べる	-9 <= n <= 9
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
横棒グラフを淡い茶色色として描画する	plt.barh(データ列x, データ列y, color='tan')
クラス分類をサポートベクターマシンとして行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
ライトブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s')
option: ゴーストホワイト色を使う	color = 'ghostwhite'
辞書からカウンタを作る	collections.Counter(aDict)
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
option: フォントの色をライトグレーに設定する	color = 'lightgray'
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
スカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
データ列とリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
nをバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big')
クリムゾン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
グラフの縦横比を同じする	plt.axis('equals')
データ列の尖度	ds.skew()
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
タプルのキーを列挙する	list(aDict)
日付を用いる	import datetime
折れ線グラフの色をインディアンレッドにする	plt.plot(データ列x, データ列y, color='indianred')
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
チョコレート色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
横軸の目盛を非表示にする	plt.xticks([])
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
赤い線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
ダークゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフをダークオリーブグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
両端キューを使用する	import collections
option: SJISを使う	encoding = 'shift_jis'
線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列x, データ列y, color='mediumorchid')
リッジ回帰モデルを準備する	model = sklearn.linear_model.Ridge(alpha=正則化項)
option: フォントの色をライトブルーに設定する	color = 'lightblue'
折れ線グラフの△マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
option: トマト色を使う	color = 'tomato'
赤いグリッド線を引く	plt.grid(color='r')
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
rgbのポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
折れ線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
右三角マーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
実数を百の位で丸める	round(x, -2)
線グラフの色をスチールブルーに変更する	plt.plot(データ列x, データ列y, color='steelblue')
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
データフレームの中の欠損値の合計を数える	df.isna().sum()
文字列が文字列リストに含まれる	s in aStringList
データフレームのカラムの最頻値	df[col].mode()
option: 切片を計算しない	fit_intercept = False
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategrey')
数値の出力を改行なしに行う	print(value, end='')
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
文字列の終了位置以前に部分文字列が含まれない	s.find(sub, 0, end) == -1
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
データフレームをグループ化しそれぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
折れ線グラフを半透明の一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgray')
オプションで、ファイルを使用する	file = sys.open(filename, 'w')
文字列を別の文字列によって全部置き換える	s.replace(sub, newsub)
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
データフレームをに箱ひげ図として描画する	sns.boxplot(x='カテゴリ列', y='列', data=df)
データフレームをJSONLファイルに保存する	df.to_csv(filename)
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
year年の日付	datetime.date(year=year, month=1, day=1)
option: アリスブルーを使用する	color = 'aliceblue'
双方向キューの末尾に要素を追加する	deq.append(element)
本日をISO8601形式の文字列に変換する	datetime.datetime.today().isoformat()
現在が何日か知る	datetime.datetime.today().day
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
rgbの▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: ラインを細くする	linewidth = 3.0
option: バイナリ書き込みモードを使う	mode = 'wb'
折れ線グラフの左三角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
黒い星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
xが-9以上、9以下かどうか調べる	-9 <= x <= 9
タブ区切りのファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
データフレームをTSVファイルから読み込む	pd.read_csv(filename, sep='\t')
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
辞書を浅くコピーする	aDict.copy()
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
Pandasで、datetime64型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
nがn2より小さいか判定する	n < n2
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
option: 改行なし	end = ''
文字列中の大文字を小文字に変換する	s.lower()
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
積立相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
文字列をセパレータで区切って、列挙する	s.split(sep)
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
整数nは配列のどれかか確認する	n in aArray
黒い▲マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
プログラムのファイルの名前	sys.argv[0]
データフレームの列名を列から文字列に付け直す	df.rename(columns={column: name})
折れ線グラフをシスル色として描画する	plt.plot(データ列x, データ列y, color='thistle')
ラベンダーブラッシュにヒストグラムの色を変更する	plt.hist(データ列, color='lavenderblush')
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
option: グラフの色をパープルに設定する	color = 'purple'
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
文字列を左寄せにする	s.ljust(文字列幅)
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
棒グラフをダークマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
多次元尺度構成法の準備をする	model = sklearn.manifold.MSD(n_components=n)
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
カウンタ同士でユニオン演算する	aCounter | aCounter2
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
option: フォントの色をダークスラテグレーに設定する	color = 'darkslategray'
データフレームから散布図を作り回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
option: グラフの色を淡いピンク色に指定する	color = 'lightpink'
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
スクリプトファイルと同じディレクトリのファイルのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
ロードされたモジュールの一覧	sys.modules
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
option: ロージーブラウン色を使う	color = 'rosybrown'
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
日付時刻データとタイムスタンプデータの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
マゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
option: グレーにグラフの色を設定する	color = 'grey'
ヒストグラムをオレンジレッド色を用いて描画する	plt.hist(データ列, color='orangered')
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
淡いピンク色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
文字列リストに列を変換してタブでつなげる	'\t'.join(map(str, iterable))
nを八進文字列に変換する	oct(n)[2:]
option: パパイヤウィップに色を設定する	color = 'papayawhip'
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
option: リネン色を使う	color = 'linen'
小数点数の逆双曲線正接を計算する	math.atanh(x)
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
データ列を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
円グラフを真円にする	plt.axis('equals')
option: チョコレート色を使う	color = 'chocolate'
バイトオーダを使う	sys.byteorder
シーケンスの要素を全て集合に追加する	aSet.update(iterable)
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
データ列が何分か見る	ds.dt.minute
ファイルをクローズする	f.close()
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: 耐火レンガを使う	color = 'firebrick'
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
日付時刻データのタイムゾーン	aDatetime.timetz()
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
タプルの末尾のn要素を取り除く	aTuple[:-n]
折れ線グラフの左三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
option: マーカーを左三角に変更する	marker = '<'
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
ヒストグラムの色をインディアンレッドに指定する	plt.hist(データ列, color='indianred')
option: 四角マーカーを描画する	marker = 's'
配列と数列の散布図をプロットし、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
横棒グラフをゲインズボロ色を用いて描画する	plt.barh(データ列x, データ列y, color='gainsboro')
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
データフレームのカラムの要約統計量	df[col].describe()
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
散布図をグリーンイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
option: グラフの色をフローラルホワイトに変更する	color = 'floralwhite'
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
リストを反転する	reversed(aList)
オブジェクトのバイトサイズを調べる	sys.getsizeof(obj)
option: ペルー色を使う	color = 'peru'
option: ハニーデューにフォントの色を設定する	color = 'honeydew'
辞書をコピーする	aDict.copy()
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
点線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフに青いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
option: 色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
データフレームのリストカラムの中にある日付データとの合計を数える	df[aList].isin([value, value2]).sum()
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
文字コードに対応する文字を使う	chr(unicode)
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
数列とリストの散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
縦棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
枠なしのデータラベルをグラフの中に加える	plt.legend(frameon=False)
リストを引数として展開してプリントする	print(*aList, sep=',')
option: ラベンダーを用いる	color = 'lavender'
配列の分散	np.var(aArray)
option: 星マーカーを使う	marker = '*'
紺碧色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
散布図に上三角印を使う	plt.scatter(データ列x, データ列y, marker='^')
データフレームを'A'列によってまとめたグループ	df.groupby('A')
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
データフレームの中に日付データがあるか調べる	df.isin([value])
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
データフレームの列の一覧	df.info()
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
option: ロイヤルブルーを用いる	color = 'royalblue'
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
ブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
option: 三角マーカーを使う	marker = '^'
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
折れ線グラフを色付きの点線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
単回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
セットを組に変換する	tuple(aSet)
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
文字列を文字リストに変換する	list(s)
ヒストグラムをミディアムターコイズ色を用いて描画する	plt.hist(データ列, color='mediumturquoise')
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
配列を2次元1行に変形する	aArray.reshape(1, -1)
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
option: バイナリモードにセットする	mode = 'rb'
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
ゼロ埋めされた配列	np.zeros(要素数)
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ひとつでも数字が文字列内に含まれるか	any(c.isdigit() for c in s)
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
option: アンティークホワイトを使う	color = 'antiquewhite'
黒い▲マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
実数以上の最小の整数を計算する	math.ceil(x)
凡例の場所を(x,y)に設定する	plt.legend(loc=(x, y))
ライトシアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
データフレームのカラムの正規分布に対する左右対称性	df[col].kurt()
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
半透明の一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
option: n番目のカラムを行に設定する	index_col = n
青い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
赤い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
ヒストグラムの色をティールに設定する	plt.hist(データ列, color='teal')
連立方程式を解く	sympy.solve([e, e2])
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
ファイルパスをオープンして]、読み込みストリームを求める	open(filepath, mode='r')
キーがマッピング上で未定義	key not in aDict
ふたつのリストの積集合を使う	list(set(aList) & set(aList2))
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
有理数の分母	q.denominator
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
両端キューの値を左にn個分ローテンションする	deq.rotate(-n)
option: ダークターコイズ色を使う	color = 'darkturquoise'
データフレームの中の列と列に重複があれば削除する	df.drop_duplicates(subset=[column, column2])
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
データフレームのリストカラムの標本標準偏差	df[aList].std()
データフレームのカラムのNaNをxに減らす	df[col].fillna(x)
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
書式をargsを引数としてフォーマットする	formatText.format(*args)
データフレームを関数でまとめたグループ	df.groupby(関数)
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
option: ライトグレーにグラフの色をする	color = 'lightgrey'
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
option: ドジャーブルー色を用いる	color = 'dodgerblue'
ヒストグラムの色をライトゴールドロディイエローに指定する	plt.hist(データ列, color='lightgoldenrodyellow')
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
データフレームを複数の列で並べ直す	df.sort_values(by=column)
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
集合からエラーなく要素を取り除く	aSet.discard(element)
散布図の三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
分類モデルのPPVを算出する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
実数が無限大かどうか調べる	math.isinf(x)
配列を2次元1列に変形する	aArray.reshape(-1, 1)
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
折れ線グラフの色をブラウンに変更する	plt.plot(データ列x, データ列y, color='brown')
データフレームのカラムの時	df[col].dt.hour
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
ラベンダーブラッシュ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
ヒストグラムをスチールブルー色を用いて描画する	plt.hist(データ列, color='steelblue')
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
グラフで使える色名の一覧	matplotlib.colors.cnames
辞書のキーに対応した値	aDict.get(key)
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
散布図の大バツ印を青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
小数点数の天井	math.ceil(x)
プラム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
ミディアムスレートブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
イテラブルから重複を取り除く	set(iterable)
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
ヒストグラムを上限から下限の上限下限でプロットする	plt.hist(データ列, range=(start, end))
横方向に二つのデータフレームを一つにする	pd.merge(df, df2)
双方向キューの先頭に文字列を追加する	deq.appendleft(element)
縦軸の目盛を非表示にする	plt.yticks([])
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
スクリプトファイルの絶対パスを求める	os.path.abspath(__file__)
ポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
文字列がリストに含まれるかどうか調べる	element in aList
赤いポイントマーカーを配列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
データフレームを1000の位で丸めて整数型にする	df.round(-3).astype(int)
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
option: ライムにグラフの色を変更する	color = 'lime'
リストと数列について散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
nとn2の和	n + n2
箱ひげ図として数列を図示する	plt.boxplot(データ列)
確率的勾配降下としてクラス分類をする	model = sklearn.linear_model.SGDClassifier()
文字列を部分文字列で区切る	s.split(sub)
option: フォレストグリーン色を使用する	color = 'forestgreen'
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
大きさnでリストとリストについての散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
両端キューをポップする	deq.pop()
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
チョコレートにヒストグラムの色を変更する	plt.hist(データ列, color='chocolate')
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
nがn2の倍数かどうか調べる	n % n2 == 0
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ファイルパスが存在しないかどうか調べる	not os.path.exists(filepath)
グラフで使うフォントを指定する	sns.set(font=フォント名)
２つのデータフレームを異なる列をキーにして結合する	pd.merge(df, df2, left_on='A', right_on='B')
散布図をポイント印で描画する	plt.scatter(データ列x, データ列y, marker='.')
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
データフレームを'A'列で整列して、NaNを先頭にする	df.sort_values(by='A', na_position='first')
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
option: ミスティローズ色を使う	color = 'mistyrose'
option: パールゴールデンロッドにグラフの色を設定する	color = 'palegoldenrod'
option: 印の大きさを指定する	markersize = 2.0
今日の日付時刻を計算する	datetime.datetime.now()
文字列の中のASCII限定として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
ファイルを書き込みモードとして開いて]fとする	f = open(filepath, mode='w')
option: 色をサドルブラウンに設定する	color = 'saddlebrown'
散布図に黒い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: 貝殻を使う	color = 'seashell'
縦棒グラフをマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='magenta')
トマト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
パールゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
文字列を左寄せする	s.ljust(文字列幅)
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
option: やわらかい青にフォントの色を設定する	color = 'cornflowerblue'
1で全要素を初期化した配列	np.ones(要素数, dtype=np.int)
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームを'A'列と'B'列の値によってグループ化して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
浮動小数点数を小数点以下第一位で丸める	round(x, 1)
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
option: ミディアムターコイズにグラフの色を指定する	color = 'mediumturquoise'
縦棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
リスト内の要素が全て真かどうか調べる	all(aList)
option: ライトスチールブルー色を用いる	color = 'lightsteelblue'
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
ヒストグラムを実線で描く	plt.hist(データ列, linestyle='solid')
ヒストグラムの色をアクアマリンにセットする	plt.hist(データ列, color='aquamarine')
散布図の右三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
n割るn2の切り上げ	(n + n2 - 1) // n2
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
データフレームから列を2つ選択する	df[[column, column2]]
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: スラッシュを区切りで使用する	sep = '/'
データフレームのリスト列の標本標準偏差	df[aList].std()
option: グラフの色をミディアムブルーに変更する	color = 'mediumblue'
データフレームの重複を見る	df.duplicated()
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
文字列の右端から空白を消す	s.rstrip()
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
▲マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
日付データの年数	aDate.year
折れ線グラフに下三角印を加える	plt.plot(データ列x, データ列y, marker='v')
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ミディアムスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームのリストカラムの欠損値をxで補う	df[aList].fillna(x)
列をいつまでも繰り返す	itertools.cycle(iterable)
option: ホワイトスモーク色を使う	color = 'whitesmoke'
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
オブジェクトはリストクラス	isinstance(obj, list)
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
昇順にリストの要素をソートする	sorted(aList, reverse=False)
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
棒グラフをライトグレー色を使って描画する	plt.bar(データ列x, データ列y, color='lightgray')
ファイルからストリームを読み込みfileとする	file = open(filepath)
Pandasのバージョンを見る	print(pd.__version__)
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
スタッキングで回帰分析をする	sklearn.ensemble.StackingRegressor()
文字列を空白によって区切る	s.split()
データフレームを列ごとに集約し、、グループごとの合計を求める	df.groupby(column).sum()
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
整数が整数か調べる	x.is_integer()
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
最小値でデータ列の欠損値を埋める	ds.fillna(ds.min())
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
リストから重複を取り除く	sorted(set(aList), key=aList.index)
タイムスタンプデータにn分を足す	aDatetime + datetime.timedelta(minutes=n)
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
辞書にキーが存在するか調べる	key in aDict
option: マーカーをダイアモンドに変更する	marker = 'D'
データフレームをグループ化しそれぞれの列に対し分散を求める	df.groupby(column)[column2].var()
オブジェクトが整数か調べる	isinstance(obj, int)
シスル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
文字列中に部分文字列がないかどうか調べる	sub not in s
データフレームの欠損値をxに設定する	df.fillna(x)
平均でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(df[aList].mean())
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
オプションで標準エラーに出力する	file = sys.stderr
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ゲインズボロにヒストグラムの色を変更する	plt.hist(データ列, color='gainsboro')
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
各列毎にデータフレームをグループ分けして列の個数を求める	df.groupby(column)[column2].count()
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
ロバスト分類器を新規作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームのリスト列の相関行列スピアマンで	df[aList].corr(method='spearman')
折れ線グラフのバツ印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
ファイルをバイナリ書き込みモードとして開く]	open(filepath, mode='wb')
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
データフレームを'A'列でまとめたグループ	df.groupby('A')
option: ライトグレー色を使う	color = 'lightgrey'
二変数の最大値	max(x, y)
変数について数式を積分する	sympy.integrate(e, z)
辞書の項目数	len(aDict)
option: ライトスレイグレー色を使う	color = 'lightslategrey'
文字列の右側から空白を除去する	s.rstrip()
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
散布図をコーンフラワーブルー色として描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
双方向キューのn番目の値	deq[n]
option: 線の種類を破線に設定する	linestyle = 'dashed'
空文字	''
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
ベストな場所に凡例を表示する	plt.legend(loc='best')
イテラブルからカウンタを作る	collections.Counter(iterable)
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
棒グラフをミディアムパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
option: 三二ビット整数型を使う	dtype = np.int16
散布図のダイアモンド印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ヒストグラムをプラム色として描画する	plt.hist(データ列, color='plum')
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
実数の三乗を求める	x ** 3
線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgray')
標準入力から1行読み取る	input()
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
1からnまでの整数列	list(range(1, n+1))
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
シルバーにヒストグラムの色を設定する	plt.hist(データ列, color='silver')
白い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
option: 淡い茶色を使う	color = 'tan'
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
文字列が部分文字列で終わるか調べる	s.endswith(sub)
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
nをn2で割った結果の切り上げを求める	(n + n2 - 1) // n2
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
option: ミディアムブルー色を使う	color = 'mediumblue'
データ列の秒	ds.dt.second
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
リストの要素をソートする	sorted(aList)
文字列の末尾	s[-1]
日本語フォントをグラフ中で表示できるようにする	sns.set(font='IPAexGothic')
データフレームのカラムを散布図を用いてグラフ化する	sns.scatterplot(data=df, x='列名', y='列名')
option: ポイントマーカーを加える	marker = '.'
グラフの用途をポスターに設定する	sns.set(context='poster')
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
白にヒストグラムの色を設定する	plt.hist(データ列, color='white')
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
バイアスなしの線形回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: パールバイオレットレッドにグラフの色をする	color = 'palevioletred'
タイムスタンプをインポートする	import time
option: ダークスラテグレー色を使う	color = 'darkslategray'
改行	'\n'
リストの中の最大値を求める	max(aList)
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
リストと配列についての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
データフレームの列の要約統計量	df[col].describe()
スレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
縦棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
散らばりを可視化する	plt.scatter(データ列x, データ列y)
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
紺碧色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
乱数で要素を埋めたベクトル	np.random.random(N)
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
整数乱数で要素を埋めた配列を初期化する	np.random.randint(開始値, 終了値, N)
データフレームとデータフレームの列を横方向に連結する	pd.concat([df, ds], axis=1)
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
データ列を使う	import pandas as pd
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
黄緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
option: 印を丸に変更する	marker = 'o'
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
インディアンレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
横棒グラフをダークマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
折れ線グラフをライム色を用いて描画する	plt.plot(データ列x, データ列y, color='lime')
キーがマッピング上で未定義か調べる	key not in aDict
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
三自然数の最小公倍数	math.lcm(n, n2, n3)
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
リストの末尾から要素を取り除く	aList.pop()
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
実数を二乗する	x ** 2
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
option: グラフの色を暗い赤に設定する	color = 'darkred'
データフレームのリストカラムのpercent分位数を計算する	df[aList].quantile(percent/100)
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
乱数シードをnで固定する	random.seed(n)
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
リストを表示する	print(value)
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
option: マーカーを星に指定する	marker = '*'
データフレームの記述統計量	df.describe()
折れ線グラフの色をゴールドに指定する	plt.plot(データ列x, データ列y, color='gold')
日付時刻データが月曜日かテストする	aDatetime.weekday() == 0
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
切り下げて整数に変換する	math.floor(x)
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
グラフの縦横比を等しくする	plt.axis('equals')
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
2を底とする小数点数の対数	math.log2(x)
文字列を左トリムする	s.lstrip()
ヒストグラムをローングリーン色として描画する	plt.hist(データ列, color='lawngreen')
ミディアムブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: グラフの色をターコイズに指定する	color = 'turquoise'
option: 追加モードを使う	mode = 'a'
棒グラフをローングリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lawngreen')
リストと数列についての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフに黒い三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
整数個からk個取り出した時の並べ方の総数	math.perm(n, k)
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
数値を緑色でプリントする	print(f'\033[32m{value}\033[0m')
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
option: グラフの色をダークグレーに設定する	color = 'darkgray'
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
横棒グラフをコーラル色として描画する	plt.barh(データ列x, データ列y, color='coral')
折れ線グラフのクロスマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
等間隔の配列を作成する＼	np.arange(開始値, 終了値, 等差)
データフレームを散布図で可視化し、、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
データフレームから数値データの列のみ抽出する	df.select_dtypes('number')
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
グリッド線	plt.grid(color='#800080')
option: フォントの色をシエナに指定する	color = 'sienna'
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: 白にフォントの色を設定する	color = 'white'
データ列は何年か調べる	ds.dt.year
データフレームを'A'列でソートする	df.sort_values(by='A')
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
方程式として数値の変数の解を求める	sympy.solve(e, z)
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
配列をビン数nでビン分割する	pd.cut(aArray, n)
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
ゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
データフレームのリスト列を千の位で四捨五入する	df[aList].round(-3)
ファイルが存在するか調べる	os.path.exists(filepath)
option: グラフの色をフクシアに設定する	color = 'fuchsia'
列をキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
データ列をインポートする	import pandas as pd
折れ線グラフに青い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
anemptystring	''
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
アルファベットの文字列	string.ascii_letters
キーが辞書に存在するか調べる	key in aDict
カラムの中に日付データがあるかどうか調べる	ds.isin([value])
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
データフレームの列名をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
スピアマン相関係数としてデータフレームのリスト列の相関行列を求める	df[aList].corr(method='spearman')
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図をミディアムアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
ヒストグラムの色をロイヤルブルーにセットする	plt.hist(データ列, color='royalblue')
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
数式を部分分数に展開する	sympy.apart(e)
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
ミディアムシアグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: ライトグレー色を使う	color = 'lightgray'
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: ダークバイオレット色を使う	color = 'darkviolet'
実数を切り下げる	math.floor(x)
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
データ列をインポートする	import pandas as pd
配列のデータ型	aArray.dtype()
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
散布図にrgbの△マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: ライトグレーにグラフの色を設定する	color = 'lightgrey'
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
集合を更新不能にする	frozenset(aSet)
カウンタの項目をリストとして得る	aCounter.keys()
四分位数ごとに列をビン分割する	pd.qcut(ds, 4)
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
option: 色をダークバイオレットに変更する	color = 'darkviolet'
データフレームをグループ化し、それぞれの列に対し分散を計算する	df.groupby(column)[column2].var()
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
xの絶対値	abs(x)
散布図のクロスマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
ヒストグラムをミディアムアクアマリン色として描画する	plt.hist(データ列, color='mediumaquamarine')
オブジェクトのクラス	type(obj)
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
折れ線グラフの▲マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
変数について数値を積分する	sympy.integrate(e, z)
オリーブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
タプルの先頭	aTuple[0]
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: プラム色を使う	color = 'plum'
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
option: マーカーの色を青にする	markerfacecolor = 'blue'
ライムグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
十六進数字を全部使う	string.hexdigits
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
option: グラフの色をグレーに設定する	color = 'gray'
小数点数のサインの逆数	math.asin(x)
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
数字を使う	string.digits
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
キーが辞書上で定義済みか調べる	key in aDict
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
ダークオレンジにヒストグラムの色を設定する	plt.hist(データ列, color='darkorange')
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
回帰分析をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
二つのリストを箱髭図にする	plt.boxplot([データ列, データ列])
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
最小値でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(df[aList].min())
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
データフレームの中の列を中央値でビンニングする	pd.qcut(df[col], 2)
タイムスタンプデータの時刻	aDatetime.time()
ヒストグラムをライムグリーン色として描画する	plt.hist(データ列, color='limegreen')
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
option: サドルブラウンにグラフの色をする	color = 'saddlebrown'
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
二つの集合の差集合	aSet.difference(aSet2)
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
データフレームを列によってソートして、下位を取り出す	df.sort_values(columns).tail(n)
タブ区切りのファイルをヘッダなしで読み込む	pd.read_csv(filename, header=None)
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
文字列を黄色にする	f'\033[33m{value}\033[0m'
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
リストを青色でプリントする	print(f'\033[34m{value}\033[0m')
データフレームの中の欠損値がある行を削除する	df.dropna()
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
nをn2だけ増やす	n += n2
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
標準入力から1行だけ読み込む	sys.stdin.readline()
グラフを正方形にする	plt.axis('equals')
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
コマンドライン引数	sys.argv
入力から二つの整数を読む	A, B = map(int, input().split())
リストを分割する	pd.cut(aList, aList)
データフレームを100の位で丸める	df.round(-2)
ファイルパスのディレクトリ名	os.path.dirname(filepath)
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
散布図をイエローグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
整数nの十六進表現	hex(n)
イテラブルからn個、ランダムに選ぶ	random.choices(iterable, k=n)
リストのオブジェクトの位置をエラーなく使う	aList.index(element) if element in aList else -1
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
日付時刻データは何年か知る	aDatetime.year
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
シアン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
データフレームの列を目的変数にする	目的変数 = df['列名']
オプションで、標準エラーに出力する	file = sys.stderr
チョコレート色でヒストグラムを描画する	plt.hist(データ列, color='chocolate')
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
カウンタのユニークなキーを列挙する	list(aCounter)
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
配列の行ごとの分散	np.var(aArray, axis=1)
数値のn階微分を行う	sympy.diff(e, z, n)
nのn2乗を算出する	n ** n2
縦棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
option: グラフの色を青に設定する	color = 'blue'
整数nを16進数表記にする	hex(n)
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
破線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
アルファベットの小文字を全部使う	string.ascii_lowercase
乱数シードをnで初期化する	random.seed(n)
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ヒストグラムの色をダークスレートブルーに指定する	plt.hist(データ列, color='darkslateblue')
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
文字列を青色にする	f'\033[34m{value}\033[0m'
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
折れ線グラフの印をバツにする	plt.plot(データ列x, データ列y, marker='x')
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
昇順にリストの要素を並べる	sorted(aList, reverse=False)
option: 読み込みモードを使う	mode = 'r'
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
縦棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
ピアソン積率相関係数でデータフレームの相関行列	df.corr(method='pearson')
ヒストグラムの色をライムに指定する	plt.hist(データ列, color='lime')
縦棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
ヒストグラムを黒くする	plt.hist(データ列, color='k')
数値を黄色で表示する	print(f'\033[33m{value}\033[0m')
散布図をライトグレー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データフレームのリストカラムの中に文字列と文字列がいくつ存在するか数える	df[aList].isin([value, value2]).sum()
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
実数の逆正弦	math.asin(x)
配列の和	aArray + aArray2
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
ValueMapでデータフレームのリストカラムの値をまとめて置き換える	df[aList].replace(ValueMap)
データフレームを千の位で丸めて整数型にする	df.round(-3).astype(int)
縦棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgrey')
ヒストグラムの線種を破線に設定する	plt.hist(データ列, linestyle='dashed')
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
データフレームの列と列の相関行列ピアソン相関係数としてを求める	df[[column, column2]].corr(method='pearson')
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
印字可能な文字列	ascii(x)
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
カウンタから列をカウントして引く	aCounter.subtract(iterable)
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
ダークバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
空白で文字列を区切る	s.split()
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
バイアスなしの線形モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームの中に文字列と文字列がいくつあるか求める	df.isin([value, value2]).sum()
カラムのどの値が頻出か確認する	ds.mode()
seabornのデフォルトを適用する	sns.set()
線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
現在を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
n個にデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
部分文字列か調べる	sub in s
ヒストグラムの色をデピンクに指定する	plt.hist(データ列, color='deeppink')
論理値型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int32)
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
option: グラフの色をペルーに設定する	color = 'peru'
全ての空白文字	string.whitespace
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
辞書をカウンタに変換する	collections.Counter(aDict)
ミディアムターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
散布図の▲マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
縦に3つのデータフレームをつなぐ	pd.concat([df, df2, df3], axis=0)
スプリンググリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='springgreen')
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
option: ゲインズボロ色を用いる	color = 'gainsboro'
モデルの予測値と目的変数を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>')
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
要素を両端キューの最後から取り除く	deq.pop()
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
ホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
データフレームのリストカラムの欠損値を50パーセンタイルで埋める	df[aList].fillna(df[aList].median())
option: レモンシフォン色を使う	color = 'lemonchiffon'
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの値をValueMapで置き換える	df.replace(ValueMap)
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
プロット中で日本語を使えるようにする	sns.set(font='IPAexGothic')
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='gray')
option: 複素数型を使う	dtype = bool
線グラフを色付きの実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
赤い下三角マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図を青色として描画する	plt.scatter(データ列x, データ列y, color='blue')
散布図にrgbの丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列中の平仮名をカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
マッピングから項目名の値をエラーなく得る	aDict.get(key, None)
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
疑似乱数を生成する	random.random()
タプル中の最初の文字列を探す	aTuple.index(element)
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
リストとデータ列についての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
組をリストに変換する	list(aTuple)
横棒グラフをダークブルー色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
オブジェクトをイテラブルに変換する	iter(obj)
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
ヒストグラムをフクシア色として描画する	plt.hist(データ列, color='fuchsia')
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
option: フォントの色を青紫に設定する	color = 'violet'
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
文字列のケースを入れ替える	s.swapcase()
データ列の度数分布図をプロットする	plt.hist(データ列)
プラットフォームのコードポイントの最大値を調べる	sys.maxunicode
リストを等量でn個に分割する	pd.qcut(aList, n)
カウンタの正の数のみ残す	+aCounter
rgbのダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームのカラムの欠損値を後の値で埋める	df[col].fillna(method='bfill')
option: 読む行番号をnamesで指定する	usecols = names
カウンタの全数	aCounter.total()
データフレームの指定された列を配列に変換する	df[column].values
option: ライトサーモン色を使う	color = 'lightsalmon'
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
ふたつの集合は共通の要素を持たないかどうか調べる	aSet.isdisjoint(aSet2)
カラムの欠損値を最大値に設定する	ds.fillna(ds.max())
option: 行列のデータ型を指定する	dtype = np.uint8
nとn2の論理和	n | n2
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
データフレームの列を10の位で四捨五入して整数型にする	df[col].round(-1).astype(int)
グリッドを点線にする	plt.grid(linestyle='dotted')
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
nとn2のビット和	n | n2
ヒストグラムの色を青に指定する	plt.hist(データ列, color='blue')
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
新しい文字列を用いて文字列中の正規表現を置き換える	re.sub(pattern, newsub, s)
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
データフレームを四捨五入して整数型にする	df.round().astype(int)
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
グラフを画面用に設定する	sns.set(context='notebook')
タイムスタンプデータを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
日付時刻データは日付時刻データより前か調べる	aDatetime < aDatetime2
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
縦棒グラフをダークスラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategray')
縦軸の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
option: 破壊的に操作する	inplace = True
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
データ列の母標準偏差	ds.std(ddof=0)
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
option: ライトスカイブルー色を使う	color = 'lightskyblue'
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームの欠損値を最大値にする	df.fillna(df.max())
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
散布図に右三角マーカーを用いる	plt.scatter(データ列x, データ列y, marker='>')
実線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
option: ディムグレーにグラフの色を設定する	color = 'dimgrey'
Pythonパスにディレクトリを追加する	sys.path.append(dir)
カウンタの項目を列挙する	aCounter.keys()
線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
シャルトリューズにヒストグラムの色を変更する	plt.hist(データ列, color='chartreuse')
データ列の中にある文字列と文字列の数を数える	ds.isin([value, value2]).sum()
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
列の母標準偏差	ds.std(ddof=0)
文字列の出力を改行せず行う	print(value, end='')
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
回帰モデルの残差を求める	目的変数 - model.predict(説明変数)
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
リストをイミュータブルにする	tuple(aList)
option: ダークスラテグレー色を用いる	color = 'darkslategray'
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
rgbの右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
文字列の左側からタブを除去する	s.lstrip('\t')
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
タイムスタンプデータををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
データフレームの各次元のサイズを調べる	df.shape
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
文字列の先頭で正規表現に複数行対応としてマッチするか確認する	re.match(pattern, s, flags=re.MULTILINE)
折れ線グラフの色をグレーに指定する	plt.plot(データ列x, データ列y, color='grey')
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
棒グラフをクリムゾン色として描画する	plt.bar(データ列x, データ列y, color='crimson')
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
配列をn個に分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
散布図の丸マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
文字列中に部分文字列が含まれるか調べる	sub in s
option: フォレストグリーン色を使う	color = 'forestgreen'
実数の双曲線余弦	math.cosh(x)
データ列のどの値が頻出か見る	ds.mode()
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
オブジェクトのメモリビューを使う	memoryview(obj)
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームの列の名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
散布図の上三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの各次元の大きさを調べる	df.shape
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
ユニークな値を要素とする配列	np.unique(aArray)
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
縦棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
標準出力がパイプ	not sys.stdout.isatty()
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
折れ線グラフに黒いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
nを二進表現に変換する	bin(n)
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
リストとリストの散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
行列の累積和	np.cumsum(aArray)
線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: ミスティローズにフォントの色を設定する	color = 'mistyrose'
日付データが金曜日か調べる	aDate.weekday() == 4
option: マーカーを丸に変更する	marker = 'o'
option: パパイヤウィップ色を用いる	color = 'papayawhip'
文字列リストをひとつの文字列にする	''.join(map(str, iterable))
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
データフレームで列の重複を調べる	df.duplicated(subset=column)
散布図をパパイヤウィップ色として描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
縦棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
文字列がタプルの要素でないか調べる	element not in aTuple
文字列はキーワードか確認する	keyword.iskeyword(s)
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
データフレームを複数の列を用いて小さい順に破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
書式を引数としてargsをフォーマットする	formatText.format(*args)
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
カウンタを辞書で更新する	aCounter.update(aDict)
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
数値を変数についてn階微分する	sympy.diff(e, z, n)
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
イテラブルの集合	set(iterable)
オプションで、標準出力を出力にする	file = sys.stdout
option: 貝殻色を使う	color = 'seashell'
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
二つのリストをコロンで区切って表示する	print(value, value2, sep=':')
ヒストグラムの色を暗い赤に指定する	plt.hist(データ列, color='darkred')
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
option: フォントの色をドジャーブルーに設定する	color = 'dodgerblue'
折れ線グラフの色をピンクに変更する	plt.plot(データ列x, データ列y, color='pink')
折れ線グラフの丸印の色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
書き込みできるようにBOM付きでファイルパスをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
表データからカテゴリデータのカラムを抽出する	df.select_dtypes('object')
ヒストグラムの色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
配列を中央値で分割する	pd.qcut(aArray, 2)
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
縦棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
データフレームに重複があるか見る	df.duplicated()
二つのデータフレームをジョインする	pd.merge(df, df2)
ロジスティック回帰データフレームの散布図にを加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
数式を数値計算する	float(e)
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
JSON形式の文字列をデータに変換する	json.loads(jsonString)
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
データフレームのリストカラムの標準偏差を求める	df[aList].std()
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
データフレームのリストカラムを10の位で四捨五入する	df[aList].round(-1)
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
ファイル名がテキストファイルか確認する	filename.endswith('.txt')
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
行列を縦ベクトルに変形する	aArray.reshape(-1, 1)
列'A'と列'B'をキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
２つのデータフレームを結合する	pd.merge(df, df2)
縦棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
プロット中の文字化けを防ぐ	sns.set(font='IPAexGothic')
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
リストをひとつ置きに抽出する	aList[::2]
文字列から部分文字列を全て除く	s.replace(sub, '')
n＋n2	n + n2
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
折れ線グラフの三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
option: グラフの色をベージュに設定する	color = 'beige'
マルーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
文字列中のひらがなを片仮名にする	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
Pandasで、dateStringをdatetime64型に変換する	pd.to_datetime(dateString)
データ列の欠損値を前の行の値で埋める	ds.fillna(method='ffill')
日付データからn週間分減算する	aDate - datetime.timedelta(weeks=n)
線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
オブジェクトをn回続くイテラブルを得る	itertools.repeat(element, n)
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
日付データが日付データより前か調べる	aDate < aDate2
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームの列概要	df.info()
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
ヒストグラムのビンの数を変更する	plt.hist(データ列, bins=区関数)
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの色をシエナに変更する	plt.plot(データ列x, データ列y, color='sienna')
ヒストグラムの色をオリーブに変更する	plt.hist(データ列, color='olive')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
列のユニークな値を見る	df[col].unique()
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
option: 右三角マーカーを描画する	marker = '>'
散布図にクロスマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
xとyの商と余りを同時に計算する	divmod(x, y)
パラメータから名前付きタプルをインスタンス化する	C._make(パラメータ)
0からN未満までの行列	np.arange(N)
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
散布図をライトスレイグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
サイコロと同じ乱数	random.randint(1, 6)
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
線グラフの色をシエナに変更する	plt.plot(データ列x, データ列y, color='sienna')
双方向キューを空にする	deq.clear()
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
今日が何年か知る	datetime.datetime.today().year
紺碧にヒストグラムの色を設定する	plt.hist(データ列, color='azure')
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
データフレームのリストカラムの値をまとめてValueMapで置き換える	df[aList].replace(ValueMap)
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
ふたつの集合が共通の要素を持たないか確認する	aSet.isdisjoint(aSet2)
データフレームの列を削除する	df.drop(column, axis=1)
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
閾値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
option: 青に色を設定する	color = 'blue'
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
縦棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
option: シスルにグラフの色を設定する	color = 'thistle'
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
３つの実行結果を順に表示する	print(value, value2, value3)
折れ線グラフの色を青緑に指定する	plt.plot(データ列x, データ列y, color='teal')
ケンドール相関係数としてデータフレームの列と列の相関行列を求める	df[[column, column2]].corr(method='kendall')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
文字列はタイトルケースか調べる	s.istitle()
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
黄色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
オブジェクトが辞書クラスか調べる	isinstance(obj, dict)
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
option: グラフの色を青緑に設定する	color = 'teal'
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
ダークマゼンタ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
ヒストグラムをダークオーキッド色を用いて描画する	plt.hist(データ列, color='darkorchid')
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
Pandasで、フォーマットを用いてデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
数式の平方根を求める	sympy.sqrt(e)
日付データは日付データより前か調べる	aDate < aDate2
散布図に赤い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
ファイルパスを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
リストと数列についての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
オブジェクトはタプルの要素でないか調べる	element not in aTuple
データフレームをJSONLファイルにWindowsで文字化けしないように書き込む	df.to_csv(filename, encoding='utf_8_sig')
データフレームのリスト列の相関行列ケンドール相関係数を用いて	df[aList].corr(method='kendall')
黒い菱形マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='k')
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
option: グラフの線種を一点鎖線に設定する	linestyle = 'dashbot'
リストにリストを追加して拡張する	aList.extend(aList2)
option: グラフの色をカーキに変更する	color = 'khaki'
option: 区切り記号を文字列にする	sep = s
カウンタを多い方から列挙する	aCounter.most_common()
option: ミディアムアクアマリン色を使用する	color = 'mediumaquamarine'
option: マーカーの色を赤にする	markerfacecolor = 'red'
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
option: ダーク・スラテグレーを使用する	color = 'darkslategrey'
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
データ列を使用する	import pandas as pd
ネイビー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームのカラムの平均値	df[col].mean()
パラメータが無限大に近づく際の数値の極限値を計算する	sympy.limit(e, z, oo)
データフレームを列によってグループ化し、要約統計量を計算する	df.groupby(column).describe()
predicateFuncを適用したとき真とならないイテラブルの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
散布図のポイント印の色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
表データのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
平方根	math.sqrt(x)
赤いバツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
nとkのコンビネーション	math.comb(n, k)
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
option: カンマをセパレータで使う	sep = ','
グローバル変数の一覧	globals()
データフレームの列の値は未入力値かどうかテストする	df[col].isna()
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
散布図をrgbの丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームの列の中に文字列と日付データがいくつあるか数える	df[col].isin([value, value2]).sum()
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
散布図をコーラル色として描画する	plt.scatter(データ列x, データ列y, color='coral')
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
option: オールドレース色を使う	color = 'oldlace'
キューの最初を使う	deq[0]
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
色付きの実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
グレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
配列の累積積	np.cumprod(aArray)
nが1、もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
option: グラフの色をオールドレースに設定する	color = 'oldlace'
nにn2をかける	n * n2
プロット中の(x,y)の位置に補足を表示する	plt.legend(loc=(x, y))
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
osモジュールをインポートする	import os
整数nがタプルのどれかか調べる	n in aTuple
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
データフレームを2つの列によってまとめたグループを使う	df.groupby(['A', 'B'])
最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
濃いシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
データフレームの最後n行を抽出する	df.tail(n)
データフレームの未入力値を直後の値で置換する	df.fillna(method='bfill')
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
横棒グラフをパールバイオレットレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='palevioletred')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
整数nを8進文字列にする	oct(n)[2:]
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
キューをリストにする	list(deq)
データフレームの列がxより少ない行を抽出する	df[df[column] < x]
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
ファイルパスの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
リストを横棒グラフにする	plt.barh(ラベル列, データ列)
縦棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
ファイルパスを読み込みできるようにオープンする]	open(filepath, mode='r')
折れ線グラフの色をミッドナイトブルーに変更する	plt.plot(データ列x, データ列y, color='midnightblue')
棒グラフをトマト色を用いて描画する	plt.bar(データ列x, データ列y, color='tomato')
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
等差数列から整数乱数を生成する	random.randrange(start, end, step)
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
実数の逆双曲線正接	math.atanh(x)
ハニーデューにヒストグラムの色を設定する	plt.hist(データ列, color='honeydew')
複素数	complex(x, y)
リストとデータ列についての散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
散布図をフォレストグリーン色として描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
散布図の四角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
データフレームの列が文字列で終わるデータを抽出する	df[df[column].str.endswith(s)]
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
空のリスト	[]
ペールグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
option: 丸印を使用する	marker = 'o'
濃くカラーパレットをグラフの描画で使用する	sns.set(pallete='deep')
ミディアムパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
タイムスタンプデータが金曜日か調べる	aDatetime.weekday() == 4
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
xの小数点以下'4'桁までの文字列にする	':.4f'.format(x)
文字列をパターンで分ける	re.split(pattern, s)
文字列の中のケースを無視してパターンによる全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
option: フォントの色をチョコレートに指定する	color = 'chocolate'
データフレームをランダムサンプリングする	df.sample()
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: スキップする列番号をnamesで指定する	skiprows = names
ヒストグラムの色をブランチドアーモンドに指定する	plt.hist(データ列, color='blanchedalmond')
ミントクリーム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
データ列を小数点以下n桁で丸める	ds.round(n)
折れ線グラフの上三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
日付データが日曜日か調べる	aDate.weekday() == 6
タン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
大バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
option: マーカーをダイアモンドに設定する	marker = 'D'
明日の日付を求める	datetime.date.today() + datetime.timedelta(days=1)
散布図のポイントマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
線グラフの色をカデットブルーに指定する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームを複数の列でソートする	df.sort_values(by=column)
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
現在の分数	datetime.date.today().minute
option: オリーブ色を使う	color = 'olive'
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
サンディーブラウン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームを各列と列の組み合わせ毎にグループ化し、、平均値を計算する	df.groupby([column, column2], as_index=False).mean()
線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
集合から全要素を取り除く	aSet.clear()
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
option: 決定木の深さを制限する	maxdepth = n
option: 降順にする	ascending = False
ファイルから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
JSONファイルのfをデータに変換する	json.load(fin)
配列の標準偏差	np.std(aArray)
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
カウンタを生成する	collections.Counter()
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
配列は何次元か調べる	aArray.ndim
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
数値の符号を同じにする	math.copysign(x, x2)
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
アンサンブル学習としてクラス分類を行う	sklearn.ensemble.VotingClassifier()
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
配列にはいくつ要素があるか調べる	aArray.size
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
データフレームの未入力値を中央値で補う	df.fillna(df.median())
option: ゴールド色を使う	color = 'gold'
両端キューをリストに変換する	list(deq)
既存の行列を元に全要素が0の配列を作成する	np.zeros_like(aArray)
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
本日の日付時刻	datetime.datetime.now()
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
書き込みできるようにファイルをオープンする]	open(filepath, mode='w')
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
回帰分析をアンサンブル学習で行う	sklearn.ensemble.VotingRegressor()
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
コマンドの第一引数を確認する	sys.argv[1]
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
ファイルとfilenameを結合する	os.path.join(filepath, filename)
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
データフレームのリストカラムの中に文字列が存在するかどうか	df[aList].isin([value])
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
文字列内にひとつでも小文字が含まれる	any(c.islower() for c in s)
option: フローラルホワイト色を使う	color = 'floralwhite'
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
option: バリーウッドを使う	color = 'burlywood'
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
データフレームの指定した列を選ぶ	df[[column]]
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
ベクトルの累積和	np.cumsum(aArray)
標準入力を得る	sys.stdin
option: 文字コードを文字コードtextに設定する	encoding = text
option: フォントの色をマゼンタに設定する	color = 'magenta'
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
option: ライトグリーンにグラフの色を設定する	color = 'lightgreen'
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
横棒グラフをスラグレー色を使って描画する	plt.barh(データ列x, データ列y, color='slategrey')
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
文字列を隔離する	sys.intern(s)
棒グラフをホワイト色で描画する	plt.bar(データ列x, データ列y, color='white')
option: ブルーバイオレット色を使う	color = 'blueviolet'
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
部分文字列を範囲を指定して探す	s.find(sub, start, end)
右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>')
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
カウンタから辞書を引く	aCounter.subtract(aDict)
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
小数点数の絶対値	math.fabs(x)
大量のデータ列が正規分布かどうか仮説検定する	scipy.stats.kstest(データ列, 'norm')
option: 改行を分割記号で使う	sep = '\n'
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
option: 先頭のカラムをインデックスにセットする	index_col = 0
データフレームの指定した列を取り出す	df[column]
ピンク色としてヒストグラムを描画する	plt.hist(データ列, color='pink')
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームの行を範囲指定して選択する	df[start:end]
year年day月のタイムスタンプ	datetime.datetime(year=year, month=month, day=1)
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(データ列, 'norm')
日付データが日付データより後ろか調べる	aDate > aDate2
時間を使う	import time
データ列が何秒か見る	ds.dt.second
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
配列の形	aArray.shape
option: バイナリモードを使用する	mode = 'rb'
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
option: スカイブルーを使用する	color = 'skyblue'
3つのデータフレームを縦に連結する	pd.concat([df, df2, df3], axis=0)
二つの文字列が等しくないか調べる	s != s2
黒い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
文字列をユニコードエスケープでバイト列にする	s.encode(encoding='unicode_escape')
bとn2から成るペア	(n, n2)
プロットの横軸の説明を設定する	plt.xlabel('x軸ラベル')
リストとリストについての散布図に赤い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
option: レベッカパープル色を使う	color = 'rebeccapurple'
折れ線グラフをペルー色を用いて描画する	plt.plot(データ列x, データ列y, color='peru')
集合の浅いコピー	aSet.copy()
NaN	math.nan
文字列を太字にする	f'\033[1m{value}\033[0m'
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
option: アンティークホワイト色を使う	color = 'antiquewhite'
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
文字列中から部分文字列を探す	s.find(sub)
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
オブジェクトが関数	callable(obj)
ミッドナイトブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
タプルの先頭のn要素を取り除く	aTuple[n:]
ターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='turquoise')
データフレームの最頻値	df.mode()
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
データフレームのリスト列の中にが存在する	df[aList].isin([value])
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
nをn2で割る	n / n2
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
option: ライトグリーンに色を変更する	color = 'lightgreen'
ファイルパスをオープンして]、追加ストリームを使う	open(filepath, mode='a')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
ヒストグラムをラベンダーブラッシュ色を用いて描画する	plt.hist(データ列, color='lavenderblush')
データフレームをグループ化し、列に対し分散を算出する	df.groupby(column)[column2].var()
文字列を二つに分ける	s.partition(sep)
ロージーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
横棒グラフをブラウン色として描画する	plt.barh(データ列x, データ列y, color='brown')
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
外れ値に強い単回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
散布図をバリーウッド色として描画する	plt.scatter(データ列x, データ列y, color='burlywood')
フォーマットでデータフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
option: エクセルファイルのシートの名前をnamesに指定する	sheet_name = names
option: ダークオリーブグリーン色を用いる	color = 'darkolivegreen'
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
紺碧色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
折れ線グラフに赤いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
オブジェクトが名前付きタプル型か調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
カテゴリデータ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
実数が整数か調べる	x.is_integer()
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
option: フォントの色をデピンクに設定する	color = 'deeppink'
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
nがn2以上か確認する	n >= n2
ゼロ埋めした三二ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
集合の要素が別のセットに含まれるかどうか	aSet.issubset(aSet2)
データフレームのインデックスの名前の一覧を使う	df.index
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
パレットトルコイズ色でヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
散布図に赤い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
深紅色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
データフレームを列によってソートして下位n件を取り出す	df.sort_values(columns).tail(n)
コーンズシルク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームの列が文字列が含まれないデータを取り出す	df[not df[column].str.contains(s)]
最後の部分文字列で文字列を二分し、先頭の文字列を求める	s.rpartition(sub)[0]
折れ線グラフのマーカーをクロスにする	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムの色をピンクに変更する	plt.hist(データ列, color='pink')
赤い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='r')
リストにリストを追加して広げる	aList.extend(aList2)
データフレームのカラムのNaNを最頻値にする	df[col].fillna(df[col].mode().iloc[0])
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
スチールブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
散布図をラベンダーブラッシュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
コマンドの第一引数を知る	sys.argv[1]
文字列を全て小文字に変換する	s.casefold()
データフレームのリストカラムの分散	df[aList].var()
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームの行と列を入れ替える	df.T
折れ線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
集合をタプルに変換する	tuple(aSet)
プラム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データ列のNaNを平均に設定する	ds.fillna(ds.mean())
ガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
折れ線グラフの色をミスティローズにする	plt.plot(データ列x, データ列y, color='mistyrose')
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
折れ線グラフをピーチパフ色を用いて描画する	plt.plot(データ列x, データ列y, color='peachpuff')
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
グラフに鉛直方向の破線を付ける	plt.axvline(x=0, linestyle='dashed')
ヒストグラムの色をダークマゼンタに変更する	plt.hist(データ列, color='darkmagenta')
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
無限に文字列が繰り返すイテラブル	itertools.repeat(element)
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
データフレームのカラムの尖度	df[col].skew()
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
データフレームの重複した行数のマスク	df.duplicated()
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
ラジアンの角度	math.degrees(x)
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
綺麗なグラフを用いる準備をする	import seaborn as sns
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
データフレームのカラムが何秒か見る	df[col].dt.second
モデルのバージョン	version = 'wcce2022-0.1'
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
ストリームを全部読み込む	f.read()
変数を青色にする	f'\033[34m{value}\033[0m'
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(データ列)
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
グラフのカラーパレットを全般的に暗くする	sns.set(pallete='dark')
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
辞書のキーの値	aDict[key]
イテラブルとイテラブルについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
黒い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
nを切り捨てながらn2分の一にする	n //= n2
Pandasで文字列をフォーマットとして日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
折れ線グラフの色をホットピンクに変更する	plt.plot(データ列x, データ列y, color='hotpink')
黒いダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
線グラフをローングリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lawngreen')
イエローグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
棒グラフの色をブラウンにする	plt.bar(データ列x, データ列y, color='brown')
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
データフレームの指定された列を配列として抽出する	df[column].values
データフレームから重複を削除する	df.drop_duplicates()
nがn2以下か調べる	n <= n2
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
列を文字列に変換して、部分文字列で結合する	sub.join(map(str, iterable))
トマトにヒストグラムの色を指定する	plt.hist(データ列, color='tomato')
ヒストグラムをブラック色を用いて描画する	plt.hist(データ列, color='black')
nは何桁か	len(str(n))
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
表データを転置する	df.T
散布図をマゼンタ色を用いて描画する	plt.scatter(データ列x, データ列y, color='magenta')
option: ライムを使う	color = 'lime'
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
二つのデータフレームを列'A'と列'B'をキーとして内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
データフレームの列のユニークな値の個数	df[col].nunique()
データフレームの列の値がxかつ列がx2であるデータを選択する	df[(df[column] == x) & (df[column2] == x2)]
option: 左三角マーカーを使う	marker = '<'
線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
nをn2でわる	n / n2
データフレームのリストカラムの欠損値をxに指定する	df[aList].fillna(x)
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
データフレームをJSONLファイルにカラムの名前を付けずに保存する	df.to_csv(filename, header=None)
option: UTF8を使う	encoding = 'utf-8'
データフレームの値を正規表現patternでreplに置き換える	df.replace(pattern, repl, regex=True)
option: アクアにグラフの色を設定する	color = 'aqua'
ロードしたモジュールのリスト	sys.modules
文字列を記号にして、変数にする	z = sympy.Symbol(s)
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
折れ線グラフでデータ列を可視化する	plt.plot(データ列x, データ列y)
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
nマイナスn2	n - n2
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
マゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='magenta')
プログラムの実行を即座に終える	sys.exit()
黒い右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c='k')
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
配列をn個に等間隔でビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
パターンを事前に複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
文字列の大文字と小文字を逆にする	s.swapcase()
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
既存のファイルパスをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
option: スチールブルーを用いる	color = 'steelblue'
リストと数列についてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ヒストグラムを淡いピンク色色を用いて描画する	plt.hist(データ列, color='lightpink')
データフレームのリストカラムのNaNを直後の値に指定する	df[aList].fillna(method='bfill')
option: フォントの色をグリーンに設定する	color = 'green'
分数を用いる	import fractions
散布図をシルバー色を使って描画する	plt.scatter(データ列x, データ列y, color='silver')
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
バツ印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
データ列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
多次元データをt-SNEを使って淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
散布図の▽マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
カウンタをセットに変換する	set(aCounter)
型が名前付きタプル	issubclass(C, tuple)
カテゴリ別で色分けしてデータフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
データフレームの列をグループ化して、ヒストグラムとして可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
文字列一つのタプル	(element,)
タプルをミュータブルにする	list(aTuple)
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
データフレームをサンプリングする	df.sample()
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
マッピングからキーの値をエラーなく得る	aDict.get(key, None)
連番の配列の自動作成する	np.arange(開始値, 終了値, 等差)
多次元尺度構成法としてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ファイルパスからストリームをオープンして]、fileとする	file = open(filepath)
日付を使う	import datetime
ファイルパスをEUCでオープンする]	open(filepath, encoding='euc_jp')
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
縦方向に複数のデータフレームを合体させる	pd.concat([df, df2, df3], axis=0)
双方向キューから最初の要素を取り除く	deq.remove(element)
集合を空にする	aSet.clear()
nとkのコンビネーションを求める	math.comb(n, k)
折れ線グラフに星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
現在のタイムスタンプ	int(time.time())
イテラブルとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームの分散	df.var()
本日をISO8601書式の文字列に変換する	datetime.datetime.today().isoformat()
折れ線グラフの四角印の線幅を設定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
マゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
イテラブルからn要素、サンプリングする	random.sample(iterable, k=n)
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
折れ線グラフの三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
option: ライトグリーン色を使う	color = 'lightgreen'
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
ケンドール相関係数を用いてデータフレームの相関行列	df.corr(method='kendall')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
実数の余弦	math.cos(x)
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
標準入力から1行だけ改行を取り除いて読む	sys.stdin.readline().rstrip()
option: スカイブルー色を用いる	color = 'skyblue'
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
パパイヤウィップ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
プログラムの実行を異常終了する	sys.exit(1)
整数nを十六進文字列に変換する	hex(n)[2:]
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
ユーザが整数を入力する	int(input())
option: ブランチドアーモンドを使う	color = 'blanchedalmond'
紺碧色で散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
折れ線グラフの色をオールドレースにセットする	plt.plot(データ列x, データ列y, color='oldlace')
bとn2から成るペアを作る	(n, n2)
実数以下の最大の整数を求める	math.floor(x)
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
要素が辞書の値として含まれているか調べる	element in aDict.values()
茶色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
option: 文字列をセパレータで使う	sep = s
アルファベットの小文字を全部見る	string.ascii_lowercase
横棒グラフをシエナ色として描画する	plt.barh(データ列x, データ列y, color='sienna')
各グループごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
文字列を下線付きにする	f'\033[4m{value}\033[0m'
配列とリストについて散布図を描画して、マーカーを左三角に指定する	plt.plot(データ列x, データ列y, marker='<')
文字列を右トリムする	s.rstrip()
配列の分散を計算する	np.var(aArray)
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
カテゴリで色分けして、データフレームの全カラムの相関をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
日付時刻データからn秒を引く	aDatetime - datetime.timedelta(seconds=n)
行列の列ごとの標準偏差	np.std(aArray, axis=0)
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
プラム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
小数点数の双曲線余弦の逆数	math.acosh(x)
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
小数点数のk進対数を算出する	math.log(x, k)
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
行列の行ごとの最小値	np.min(aArray, axis=1)
実数の小数点以下を丸める	round(x)
辞書を階層化する	collections.ChainMap(aDict)
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
線グラフの色をペルーに指定する	plt.plot(データ列x, データ列y, color='peru')
x座標の目盛りを対数に変更する	plt.xscale('log')
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
文字列を二分する	s.partition(sep)
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
棒グラフをアンティークホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
タイムスタンプデータからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
データフレームからランダムに抽出する	df.sample()
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
データフレームの最後	df.tail()
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
データ列のNaNを直前の値に設定する	ds.fillna(method='ffill')
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
データフレームの列名を指定された列名一覧に置き換える	df.columns = columns
option: 色を小麦色に設定する	color = 'wheat'
文字列をゼロ埋めする	s.zfill(文字列幅)
データフレームの列名の一覧を見る	df.columns
ホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
散布図をダークカーキ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
option: ディムグレー色を使用する	color = 'dimgrey'
追加できるようにファイルパスを開く]	open(filepath, mode='a')
データフレームを各列毎にグループ化し、、文字列というグループを使う	df.groupby(column).get_group(s)
option: 文字列の示すエンコーディングを使用する	encoding = s
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
option: 文字コードtextを使う	encoding = text
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
データフレームの列の中にいくつ日付データがあるか数える	df[col].isin([value]).sum()
折れ線グラフの下三角印を黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
option: ライトイエローを使用する	color = 'lightyellow'
nとn2の差	n - n2
二つの辞書をネスト化する	collections.ChainMap(aDict, aDict2)
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
折れ線グラフをライトコーラル色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcoral')
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
リストとリストの散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
実数のk進対数	math.log(x, k)
グリッド線を青くする	plt.grid(color='b')
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ダークバイオレット色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
option: スノー色を使う	color = 'snow'
ヒストグラムの色をスレートブルーに変更する	plt.hist(データ列, color='slateblue')
データ列の中央値	ds.median()
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
棒グラフをスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='slateblue')
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
縦棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
日付データが月曜日か	aDate.weekday() == 0
列でによってデータフレームを破壊的にソートする	df.sort_values(by=column, inplace=True)
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
組の値を小さい順にソートする	sorted(aTuple, reverse=False)
カーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
点線でヒストグラムを描く	plt.hist(データ列, linestyle='dotted')
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: サーモン色を使う	color = 'salmon'
データフレームを複数の列で昇順にソートする	df.sort_values(by=column, ascending=True)
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
PandasでデータフレームのcollのUNIX秒からdatetime64型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
横棒グラフをライトゴールドロディイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
棒グラフをアクア色を用いて描画する	plt.bar(データ列x, データ列y, color='aqua')
option: スノーにグラフの色を指定する	color = 'snow'
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
線グラフをアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='aquamarine')
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
ファイルに文字列を書く	f.write(s)
後の値でデータフレームのカラムの欠損値を置換する	df[col].fillna(method='bfill')
パウダーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='powderblue')
アイボリー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
ベクトルの値を変更する	aArray[行番号, 列番号] = 指定の値
散布図の左三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
predicateFuncがTrueとならないイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
option: フォントの色をライトイエローに設定する	color = 'lightyellow'
青紫色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームの母標準偏差	df.std(ddof=0)
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
データフレームのn番目の行を抽出する	df.loc[n]
データフレームを'A'列で昇順に整列する	df.sort_values(by='A', ascending=True)
データ列の一意な値の個数	ds.nunique()
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
オプションで標準出力を出力にする	file = sys.stdout
ダークゴールデンロッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
文字列を置換する	s.replace(sub, newsub)
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
option: 区切りをスラッシュにする	sep = '/'
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
文字列をインターンする	sys.intern(s)
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
文字列が文字列より辞書順で後か調べる	s > s2
日付データが水曜日か調べる	aDate.weekday() == 2
日付データが火曜日か調べる	aDate.weekday() == 1
三つの文字列を順にプリントする	print(value, value2, value3)
珊瑚色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
ゼロ埋めされた３二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
ガウス過程回帰モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
オブジェクトは整数クラスか調べる	isinstance(obj, int)
スタックのデータを左にn個分回転させる	deq.rotate(-n)
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
散布図に赤いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
実数を小数点で四捨五入する	round(x, n)
各列毎にデータフレームをグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
数値を簡単にする	sympy.sympify(e)
ミディアムオーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
八進数字を全て使う	string.octdigits
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
双方向キューが空か	len(deq) == 0
タイムスタンプデータの日を使う	aDatetime.day
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
多次元データをMSDで濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
ネイピア数	math.e
option: EUCを使う	encoding = 'euc_jp'
マッピングのエントリを列挙する	aDict.values()
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
ヒストグラムを点線を用いて描く	plt.hist(データ列, linestyle='dotted')
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
リストとリストについて散布図をプロットし、、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
縦棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
散布図をアリスブルー色として描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
横棒グラフを描いてラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
キューの最初にイテラブルの各要素を追加する	deq.extendleft(iterable)
nをn2倍にする	n *= n2
リストと数列についての散布図に黒い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='k')
ヒストグラムをダークシアン色を用いて描画する	plt.hist(データ列, color='darkcyan')
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
タプルとタプルを連結する	aTuple + aTuple2
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
実数の逆双曲線正弦	math.asinh(x)
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
確率的勾配降下として回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
折れ線グラフに青い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
標準入力から1文字分読む	sys.stdin.read(1)
空白文字を全部使う	string.whitespace
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
実数を十の位で丸める	round(x, -1)
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフの色をレモンシフォンに指定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
オールドレース色でヒストグラムを描画する	plt.hist(データ列, color='oldlace')
縦棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
列にイテラブルを続ける	itertools.chain(iterable, iterable2)
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
箱髭図を横方向にする	plt.boxplot(データ列, vert=False)
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
折れ線グラフの色をチョコレートに変更する	plt.plot(データ列x, データ列y, color='chocolate')
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
JSON文字列を辞書に変換する	json.loads(jsonString)
データフレームの相関行列スピアマンで	df.corr(method='spearman')
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
プラットホームがLinuxかどうか	sys.platform.startswith('linux')
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
配列の全要素の値を変更する	aArray[:, :] = 指定の値
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
タプルの最初の文字列を探す	aTuple.index(element)
デフォルトのエンコーディング	sys.getdefaultencoding()
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
散布図をサーモン色を使って描画する	plt.scatter(データ列x, データ列y, color='salmon')
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
日付データが火曜日かどうか確認する	aDate.weekday() == 1
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
ディープスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
横棒グラフをコーラル色を用いて描画する	plt.barh(データ列x, データ列y, color='coral')
nullに等しい値	None
線グラフをライトグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
空の回帰木モデルを用意する	model = sklearn.tree.DecisionTreeRegressor()
オブジェクトが数値かどうか確認する	isinstance(obj, (int,float))
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
データフレームの列が正規表現文字列にマッチしないデータを抽出する	df[not df[column].str.match(s)]
整数nの八進文字列	oct(n)[2:]
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
option: グラフの色をスノーに指定する	color = 'snow'
floatの最大値	sys.float_info.max
ディムグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
データ列を十の位で四捨五入する	ds.round(-1)
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
黒い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの中に文字列があるか確認する	df.isin([value])
nが一桁の数	0 <= n <= 9
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
半透明の一点鎖線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
nを半分にする	n /= 2
option: ダークスレートブルーにグラフの色を設定する	color = 'darkslateblue'
日付データからn分、減らす	aDate - datetime.timedelta(minutes=n)
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
パレットトルコイズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
データフレームの中にとがあるか確認する	df.isin([value, value2])
文字列を区切りで分割して、文字列リストにする	s.split(sep)
縦棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
データフレームのリストカラムのモードを計算する	df[aList].mode()
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
データフレームのリスト列の欠損値を最頻値で置換する	df[aList].fillna(df[aList].mode().iloc[0])
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
ペールグリーン色でヒストグラムを描画する	plt.hist(データ列, color='palegreen')
散布図をミントクリーム色として描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
散布図をスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='steelblue')
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
ファイルをSJISで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
線グラフの色をダークオレンジに指定する	plt.plot(データ列x, データ列y, color='darkorange')
nまでの奇整数列	list(range(1, n, 2))
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
グラフを描画する準備をする	import matplotlib.pyplot as plt
プラットホームの名前	sys.platform
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図をライトコーラル色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
棒グラフをパウダーブルー色として描画する	plt.bar(データ列x, データ列y, color='powderblue')
ファイルパスのファイルサイズ	os.path.get_size(filepath)
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
赤い丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
データフレームの列がx、かつ列がx2であるデータを取り出す	df[(df[column] == x) & (df[column2] == x2)]
option: 左三角印を使う	marker = '<'
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
文字列の両端から部分文字列を取り除く	s.strip(sub)
データフレームの行を範囲指定して抽出する	df[start:end]
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
赤い三角マーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='r')
複素数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=bool)
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
オプションで、標準出力に出力する	file = sys.stdout
紺碧色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
データ列を中央値でビン分割する	pd.qcut(ds, 2)
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
綺麗なグラフを使う準備をする	import seaborn as sns
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
散布図をダークオーキッド色として描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
部分文字列で文字列を区切り、、文字列リストに変換する	s.split(sub)
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
アルファベットの小文字を使う	string.ascii_lowercase
オブジェクトがリストに含まれる	element in aList
option: フォントの色をグレーに設定する	color = 'gray'
ゲインズボロ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
データフレームの第一四分位数	df.quantile(0.25)
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
nが1、もしくは2、もしくは3に等しいか	n == 1 or n == 2 or n == 3
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategrey')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: ダークサーモン色を使う	color = 'darksalmon'
データフレームのリスト列の第一四分位数	df[aList].quantile(0.25)
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
データ列とリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
棒グラフをミディアムバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
実数がNaNか確認する	math.isnan(x)
小数点数の双曲線正接	math.tanh(x)
option: グラフの色をスノーに設定する	color = 'snow'
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
実数のn乗して浮動小数点数による余り	pow(x, n, y)
グラフの描画で濃くパレットを用いる	sns.set(pallete='deep')
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
nから無限にカウントアップする	itertools.count(start=n)
テンプレートを辞書でフォーマットする	formatText.format_map(aDict)
分数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
リストは少なくともひとつ真か調べる	any(aList)
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
グラフの描画で淡くパレットを使う	sns.set(pallete='muted')
横棒グラフをブルーバイオレット色として描画する	plt.barh(データ列x, データ列y, color='blueviolet')
線グラフを半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
辞書の浅いコピーを用意する	aDict.copy()
ピアソン積率相関係数としてデータフレームのリストカラムの相関行列	df[aList].corr(method='pearson')
グラフの見栄えを良くする	import seaborn as sns
option: バイナリモードを使う	mode = 'rb'
option: 区切り記号を改行にする	sep = '\n'
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
散布図のバツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
option: グラフの色をピンクに指定する	color = 'pink'
データフレームのカラムの秒	df[col].dt.second
データフレームをインポートする	import pandas as pd
option: グラフの色をライムに設定する	color = 'lime'
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
グリッド線	plt.grid(linewidth=3.0)
浮動小数点数を実数で除算して、切り捨てる	x // y
青い実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
組の末尾からn番目以前の要素を得る	aTuple[:-n]
オリベドラブにヒストグラムの色を設定する	plt.hist(データ列, color='olivedrab')
option: ライトブルーを使う	color = 'lightblue'
ターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
横棒グラフをカーキ色として描画する	plt.barh(データ列x, データ列y, color='khaki')
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
ベクトルのスカラー倍	aArray * n
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
nまでの奇整数リスト	list(range(1, n, 2))
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
データフレームのカラムの欠損値を最小値で置換する	df[col].fillna(df[col].min())
日付時刻データからn秒分、減らす	aDatetime - datetime.timedelta(seconds=n)
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
文字列を空白で区切る	s.split()
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
文字列中の正規表現を新しい文字列を用いて置き換える	re.sub(pattern, newsub, s)
データフレームを表示するとき、データフレームをn列まで表示可能なようにする	pd.set_option('display.max_columns', n)
棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
データフレームの中の列と列に重複があれば、取り除く	df.drop_duplicates(subset=[column, column2])
データフレームの要約統計量を求める	df.describe()
黒い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
データ列と数列の散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
配列の平均値	np.mean(aArray)
クラスが名前付きタプル	issubclass(C, tuple)
黒い▼マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
破壊的に'A'列によって昇順にデータフレームをソートする	df.sort_values(by='A', ascending=True, inplace=True)
配列から最大長nのキューを作成する	collections.deque(iterable, maxlen=n)
文字列が全てアルファベットか調べる	s.isalpha()
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
スカイブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
文字列中の小文字を大文字に変換する	s.upper()
横棒グラフの色をダークブルーにする	plt.barh(データ列x, データ列y, color='darkblue')
プロットのグリッドを暗くする	sns.set(style='darkgrid')
ゼロ埋めされた複素数型のベクトル	np.zeros(要素数, dtype=bool)
整数nの十六進数表現	hex(n)
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
空白	' '
キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
データフレームのpercentパーセンタイル	df.quantile(percent/100)
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
option: ゲインズボロにフォントの色を設定する	color = 'gainsboro'
option: 四角印を描画する	marker = 's'
正規表現に文字列がマッチさせる	re.match(pattern, s)
option: SJISを用いる	encoding = 'shift_jis'
多い順番にカウンタを列挙する	aCounter.most_common()
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
データフレームのデータを条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
データフレームを小数点以下n桁で丸める	df.round(n)
本日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
リストの中の最大値	max(aList)
オブジェクトは整数クラスのインスタンスか調べる	isinstance(obj, int)
リストの末尾を取り除く	aList[:-1]
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
nがn2で割り切れる	n % n2 == 0
プログラムを強制的に停止する	sys.exit()
option: 区切りを使わない	sep = ''
列の各データ値の出現数を求める	ds.value_counts()
貝殻色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
散布図のバツ印を青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データ列の推移を青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
データ列とリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
データフレームのカラムのNaNを最大値に設定する	df[col].fillna(df[col].max())
ランダムにn行をデータフレームから選択する	df.sample(n)
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
現在実行中の例外を情報	sys.exc_info()
行列の行列積を求める	np.matmul(aArray, aArray2)
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
数式の変数にnを代入する	e.subs(z, n)
ネイピア数を用いる	math.e
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
文字列を赤色にする	f'\033[31m{value}\033[0m'
xが-9以上、9以下	-9 <= x <= 9
日付時刻データの月数を使う	aDatetime.month
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
文字列が正規表現にマッチさせる	re.match(pattern, s)
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
文字列がカタカナか調べる	('ァ' <= ch <= 'ン')
実数の指数部	math.frexp(x)[1]
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
列の第一四分位数	ds.quantile(0.25)
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
既存のファイルをSJISで追加できるように開く]	open(filepath, mode='a', encoding='shift_jis')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
ファイルパスが存在するか確認する	os.path.exists(filepath)
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
標準入力	sys.stdin
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
option: 色をレモンシフォンに設定する	color = 'lemonchiffon'
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
option: 色をラベンダーに変更する	color = 'lavender'
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
両端キューの要素をインプレースに反転する	deq.reverse()
リストと配列の散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームのインデックスを振り直す	df.reset_index()
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
ブランチドアーモンド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
リストとデータ列についての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
space	' '
横棒グラフを描く	plt.barh(ラベル列, データ列)
型が名前付きタプルか調べる	issubclass(C, tuple)
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
縦棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
option: グラフの色をミントクリームに設定する	color = 'mintcream'
縦棒グラフをダークシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
書き込み用にファイルをBOM付きでオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
データフレームの列の名前を付け直す	df.rename(columns={column: name})
ヒストグラムでカラーマップを用いる	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
小数点以下の表示精度を指定する	pd.set_option('precision', n)
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
青い上三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームから列を二つ選択する	df[[column, column2]]
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
データフレームからランダムにn行を抽出する	df.sample(n)
配列を横ベクトルに変形する	aArray.reshape(1, -1)
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
2進文字列をbytesizeバイトのバイト列にする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
カラムがどの程度、分散しているか見る	ds.var()
折れ線グラフをプラム色として描画する	plt.plot(データ列x, データ列y, color='plum')
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
浮動小数点数を十の位で丸める	round(x, -1)
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
折れ線グラフの星マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
データフレームをTSV形式のファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
ローングリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
rgbの星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ヒストグラムをオリベドラブ色として描画する	plt.hist(データ列, color='olivedrab')
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
句読点文字を全部見る	string.punctuation
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
表データで、列と列の重複を消す	df.drop_duplicates(subset=[column, column2])
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
データ列の相関係数と有意確率を求める	scipy.stats.pearsonr(データ列, データ列2)
データ列の離れ具合を描画する	sns.residplot(x=データ列, y=データ列)
要素が全て1の配列	np.ones(要素数, dtype=np.int)
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
コーパスのバージョン	version = 'wcce2022-0.1'
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
リストの要素を昇順にソートする	sorted(aList, reverse=False)
ブラックにヒストグラムの色を設定する	plt.hist(データ列, color='black')
ランダムに重複ありでデータフレームからn行をサンプリングする	df.sample(n, replace=True)
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
クラスのサブクラスか	issubclass(サブクラス, クラス)
グラフに格子を入れる	plt.grid(True)
ファイルパスの絶対パスを使う	os.path.abspath(filepath)
データフレームを表示するとき、最大行数をnに設定する	pd.set_option('display.max_rows', n)
リストを等量でn個にビン分割する	pd.qcut(aList, n)
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームのリストカラムの中央値	df[aList].median()
縦棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
サポートベクターマシンを用いて回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
データ列の正規分布に対する上下広がり	ds.skew()
データフレームの列からユニークな値を抽出し、リスト化する	df[col].unique().tolist()
データフレームのカラムの種類	df.info()
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
データフレームのカラムの文字列を欠損値にする	df[col].replace(s, np.nan)
カウンタを高頻出方から列挙する	aCounter.most_common()
ライトコーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
濃い青にヒストグラムの色を指定する	plt.hist(データ列, color='darkblue')
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
リストとデータ列の散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの色を赤に指定する	plt.plot(データ列x, データ列y, color='red')
時計回りに円グラフを描く	plt.pie(データ列, startangle=90, counterclock=False)
行列の行	aArray[行番号]
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
option: 書き込みモードを使う	mode = 'w'
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
連立方程式の解を算出する	sympy.solve([e, e2])
やわらかい青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
標準入力を使う	sys.stdin
シエナ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
データ列の正規分布を判定する	scipy.stats.shapiro(データ列)
文字列を部分文字列を用いて区切る	s.split(sub)
現在のモジュール	sys.modules[__name__]
星印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
データ列の欠損値をモードで埋める	ds.fillna(ds.mode().iloc[0])
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
集合が空でないか調べる	len(aSet) != 0
エラーを出力する	sys.stderr
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
データ列が何年か見る	ds.dt.year
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
浮動小数点数の最小値	sys.float_info.min
コーンフラワーブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
エラーなく集合から値を取り除く	aSet.discard(element)
折れ線グラフの印を左三角にする	plt.plot(データ列x, データ列y, marker='<')
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
リストの長さだけ繰り返す	range(len(aList))
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
option: ライムグリーンを使う	color = 'limegreen'
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
セットから要素を除く	aSet.remove(element)
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
淡い茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
数列とリストについて散布図を描画し、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
UTF8で文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
スノー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
option: ミディアムスレートブルー色を用いる	color = 'mediumslateblue'
辞書からキーの値をエラーなく得る	aDict.get(key, None)
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategray')
データフレームからランダムにn行を取り出す	df.sample(n)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
オリーブ色でヒストグラムを描画する	plt.hist(データ列, color='olive')
棒グラフをマルーン色として描画する	plt.bar(データ列x, データ列y, color='maroon')
文字列をシンボル化して、変数にする	z = sympy.Symbol(s)
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
文字列内にひとつでも英数字が含まれるかどうか調べる	any(c.isalnum() for c in s)
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
折れ線グラフのバツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
option: 先頭の行をヘッダに設定する	header = 0
折れ線グラフの色をドジャーブルーに指定する	plt.plot(データ列x, データ列y, color='dodgerblue')
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
日付時刻データが何年か知る	aDatetime.year
外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
実数の双曲線正接	math.tanh(x)
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
新しいサポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
オブジェクトがクラスのインスタンスか調べる	isinstance(obj, クラス)
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
データフレームの要約統計量	df.describe()
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
横棒グラフをダークグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkgreen')
xのハッシュ値	hash(x)
データ列の文字列長を列として使う	ds.str.len()
折れ線プロットのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
スカイブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
option: グラフの色をゴールドに設定する	color = 'gold'
数値の変数にnを代入する	e.subs(z, n)
リストとリストを連結する	aList + aList2
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
タプルの中の最小値	min(aTuple)
非小文字が文字列中にあるか調べる	any(not c.islower() for c in s)
データフレームの欠損値をメディアンで埋める	df.fillna(df.median())
option: オリベドラブにグラフの色を設定する	color = 'olivedrab'
文字列がタプルの要素でないか	element not in aTuple
データ列をインポートする	import pandas as pd
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
折れ線グラフをスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='steelblue')
スチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='steelblue')
リストの末尾から要素をポップする	aList.pop()
実数で浮動小数点数を除算する	x / y
リストの要素を入れ替える	aList[i], aList[j] = aList[j], aList[i]
option: 色をミントクリームに変更する	color = 'mintcream'
option: シアン色を使う	color = 'cyan'
文字列が空白文字からなるかどうか確認する	s.isspace()
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
オブジェクトをイテラブルにする	iter(obj)
折れ線グラフの四角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
文字列の左側からタブを除く	s.lstrip('\t')
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
データフレームのカラムが何時か見る	df[col].dt.hour
散布図をライトスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
文字列が全て数字かどうか調べる	s.isdigit()
リストに文字列を追加する	aList.append(element)
文字列は全て印字できるか確認する	s.isprintable()
実数を実数で割った剰余	math.remainder(x, x2)
折れ線グラフのポイント印を青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
モデルの予測値と実測値を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームのリストカラムの要約統計量を求める	df[aList].describe()
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
日付時刻データが何時か知る	aDatetime.hour
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
リストと数列について散布図を描画してマーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
rgbのバツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
option: ミディアムスプリンググリーン色を使用する	color = 'mediumspringgreen'
日付データが水曜日かテストする	aDate.weekday() == 2
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
option: グラフの色をライトグレーに設定する	color = 'lightgray'
配列とイテラブルについての散布図にポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
カウンタの最頻出な項目	aCounter.most_common()[0]
散布図をインディゴ色を用いて描画する	plt.scatter(データ列x, データ列y, color='indigo')
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
右三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームの中の列を分割数nを用いてビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
xが真か調べる	bool(x)
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
行列の行ごとの標準偏差を求める	np.std(aArray, axis=1)
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
横棒グラフをミディアムスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
横棒グラフを青色として描画する	plt.barh(データ列x, データ列y, color='blue')
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
リストとイテラブルについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
折れ線グラフをパールゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
折れ線グラフをゲインズボロ色を使って描画する	plt.plot(データ列x, データ列y, color='gainsboro')
小麦色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
日本語が文字列にある	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
レベッカパープルにヒストグラムの色を設定する	plt.hist(データ列, color='rebeccapurple')
黒いグリッド線を引く	plt.grid(color='k')
本日が何日か知る	datetime.datetime.today().day
nが1、もしくは2か調べる	n == 1 or n == 2
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
文字列をマゼンタ化する	f'\033[35m{value}\033[0m'
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
ファイルをオープンする]	open(filepath)
option: ミディアムバイオレットレッド色を用いる	color = 'mediumvioletred'
縦棒グラフをミディアムブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumblue')
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
option: 複数行に対応する	flag = re.MULTILINE
折れ線グラフに▲印を使う	plt.plot(データ列x, データ列y, marker='^')
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
option: マゼンタ色を使う	color = 'magenta'
ローングリーンにヒストグラムの色を指定する	plt.hist(データ列, color='lawngreen')
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
データフレームのリストカラムを小数点以下n桁で四捨五入する	df[aList].round(n)
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
直前の値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(method='ffill')
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
白いグリッド線を引く	plt.grid(color='w')
ダーク・スラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
実数の床数を算出する	math.floor(x)
option: インディアンレッド色を使う	color = 'indianred'
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
nがn2と等しいか調べる	n == n2
両端キューの末尾から要素を取り除く	deq.pop()
データ列を丸めて、整数型にする	ds.round().astype(int)
データフレームのリスト列のヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
option: グラフの色をアリスブルーにする	color = 'aliceblue'
ヒストグラムを一点鎖線に指定する	plt.hist(データ列, linestyle='dashbot')
配列を中央値でビン分割する	pd.qcut(aArray, 2)
折れ線グラフに青い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
こんにちは世界と出力する	print('Hello World')
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
配列とリストについて散布図を描画し、、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
列をダミー変数に変換する	pd.get_dummies(iterable)
データフレームから重複を落とす	df.drop_duplicates()
タイムスタンプデータからn日分、減算する	aDatetime - datetime.timedelta(days=n)
データ列の推移を青い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
横方向に２つのデータフレームを連結する	pd.concat([df, df2], axis=1)
日付データからn日分引く	aDate - datetime.timedelta(days=n)
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの列の第三四分位数	df[col].quantile(0.75)
部分文字列で部分文字列が始まるか確認する	s.startswith(sub)
option: ライトコーラル色を使う	color = 'lightcoral'
列を文字列リストに変換して、空白で結合する	' '.join(map(str, iterable))
出力ストリームを一行ずつ読む	f.readline()
リストと配列についての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
２つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
option: インディアンレッド色を使用する	color = 'indianred'
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
双方向キューのn番目	deq[n]
配列の形状	aArray.shape
文字列モジュールをインポートする	import string
option: ダークスラテグレーを使う	color = 'darkslategray'
データフレームの相関行列をヒートマップでグラフ化する	sns.heatmap(df.corr())
nxn2の２次元リスト	[[0] * n for _ in range(n2)]
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
option: レベッカパープルにグラフの色を設定する	color = 'rebeccapurple'
option: バリーウッド色を使う	color = 'burlywood'
option: フォントの色をバリーウッドに設定する	color = 'burlywood'
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
option: マーカーの色を黄緑にする	markerfacecolor = 'chartreuse'
option: 大文字・小文字を無視する	flag = re.IGNORECASE
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
タプルの要素を逆順にする	aTuple[::-1]
データフレームから数値データの列を抽出する	df.select_dtypes('number')
CSVファイルからデータフレームを読む	pd.read_csv(filename, sep=',')
ローングリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームのカラムの中にいくつNaNがあるか数える	df[col].isna().sum()
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
バリーウッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
option: ライトイエローにフォントの色を設定する	color = 'lightyellow'
option: ライム色を使う	color = 'lime'
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
option: ダークオレンジ色を使用する	color = 'darkorange'
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
option: グラフの色をライトスレイグレーに変更する	color = 'lightslategrey'
文字列を空白で分割する	s.split()
折れ線グラフをティール色で描画する	plt.plot(データ列x, データ列y, color='teal')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
縦棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームを行で降順で並べる	df.sort_index(ascending=False)
パステル調にカラーパレットをプロットの描画で使う	sns.set(pallete='pastel')
データフレームを列の値によってグループ化する	df.groupby(column)
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
データフレームを二つの列の値でグループ化し、要約統計量を算出する	df.groupby(['A', 'B']).describe()
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
縦棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
破壊的に'A'列でによってデータフレームを整列する	df.sort_values(by='A', inplace=True)
明日の日付を使う	datetime.date.today() + datetime.timedelta(days=1)
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
option: フォントの色をオレンジに設定する	color = 'orange'
エクセルファイルファイルからnというシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
タイムスタンプデータからn分減らす	aDatetime - datetime.timedelta(minutes=n)
nからn2までのstepごとによるスライス	slice(n, n2, step)
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: グラフの色を黄色に変更する	color = 'yellow'
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
全要素を0で初期化したベクトル	np.zeros(要素数)
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
データフレームを各列毎にグループ化し、列の標準偏差を計算する	df.groupby(column)[column2].std()
横棒グラフをサーモン色として描画する	plt.barh(データ列x, データ列y, color='salmon')
タプルの各値を関数に適用した結果で並べる	sorted(aTuple, key=func)
TSVからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
配列と配列の散布図を描いて、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
ブルーバイオレット色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
Pandasのバージョンを表示する	print(pd.__version__)
リストを等量でn個にビンニングする	pd.qcut(aList, n)
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ファイルに文字列を書き込む	f.write(s)
散布図をダークレッド色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
横棒グラフをライトサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
xが1、もしくは2、もしくは3に等しいか	x == 1 or x == 2 or x == 3
option: 四角マーカーを使う	marker = 's'
プラットホームがウィンドウズか調べる	sys.platform.startswith('win32')
ヒストグラムをリネン色として描画する	plt.hist(データ列, color='linen')
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
要素が全て1の行列を初期化する	np.ones(要素数, dtype=np.int)
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
列とイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
option: シルバーにフォントの色を変更する	color = 'silver'
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
ヒストグラムをロージーブラウン色として描画する	plt.hist(データ列, color='rosybrown')
データフレームを各列毎にグループ化して、文字列というグループの大きさを求める	df.groupby(column).size()[s]
ファイルをバイナリ書き込みモードで開く]	open(filepath, mode='wb')
データ列の曜日は何日目か見る	ds.dt.dayofweek
リストの総和を求める	sum(aList)
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
双方向キューのstart〜endの部分データ	collections.deque(itertools.islice(deq, start, end))
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
xの絶対値を計算する	abs(x)
クラス分類をK最近傍法として行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
要素を双方向キューの最初に追加する	deq.appendleft(element)
ダークゴールデンロッド色としてヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
半透明の破線で折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ヒストグラムをグレー色として描画する	plt.hist(データ列, color='gray')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
折れ線グラフの▼マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
パラメータがマイナス無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, -oo)
ゲインズボロ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
データフレームのカラムを散布図で可視化し、、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
多次元データをSVDで濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
データフレームのリストカラムを十の位で丸める	df[aList].round(-1)
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ハニーデュー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
option: 赤色を使う	color = 'red'
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
現在のミリ秒	int(time.time() * 1000)
データを最大最小を用いて正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
option: 色をダークシアグリーンに変更する	color = 'darkseagreen'
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
二つの文字列は同じか調べる	s == s2
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
行列の累積積を計算する	np.cumprod(aArray)
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
ライム色としてヒストグラムを描画する	plt.hist(データ列, color='lime')
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
赤い左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
折れ線グラフに右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
カラムの文字列を欠損値に変換する	ds.replace(s, np.nan)
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
配列と配列について散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
option: グラフの色をネイビーに設定する	color = 'navy'
集合が空か調べる	len(aSet) == 0
データフレームのカラムの平均	df[col].mean()
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
カウンタの各項目を回数だけ列挙する	aCounter.elements()
実数の自然対数	math.log(x)
データ列の各値の出現回数	ds.value_counts()
リストを引数として展開して表示する	print(*aList, sep=',')
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
データフレームのカラムがどれだけ、分散しているか見る	df[col].var()
ファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
option: グラフの色をグリーンに設定する	color = 'green'
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
ファイル名がJSONファイルか確認する	filename.endswith('.json')
ヒストグラムの色をミディアムターコイズに指定する	plt.hist(データ列, color='mediumturquoise')
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
散布図の星印を黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
文字列を最後の部分文字列で二分する	s.rpartition(sub)
小数点数のタンジェントの逆数を算出する	math.atan(x)
ライトコーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
整数nを八進リテラルに変換する	oct(n)
データ列の偏りを対数する	np.log(データ列)
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
option: アクア色を用いる	color = 'aqua'
データフレームから型リストのデータ型の列を除外する	df.select_dtypes(exclude=typeList)
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
数のn乗	x ** n
xの小数点以下'1'桁の文字列にする	':.1f'.format(x)
year年month月day日を日付にする	datetime.date(year=year, month=month, day=day)
赤いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
2つのリストから辞書	dict(zip(aList, aList2))
option: 印を左三角に変更する	marker = '<'
option: ミントクリーム色を使う	color = 'mintcream'
データフレームのリストカラムを丸める	df[aList].round()
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
データ列の要約統計量	ds.describe()
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
横棒グラフをサドルブラウン色として描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
option: ダークマゼンタ色を使用する	color = 'darkmagenta'
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
整数乱数で要素を埋めたベクトル	np.random.randint(開始値, 終了値, N)
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
データフレームの列の各データ値の出現数	df[col].value_counts()
散布図のバツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
要素が集合に含まれないか調べる	element not in aSet
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
ヒストグラムの色を小麦色に変更する	plt.hist(データ列, color='wheat')
文字列をキャピタライズする	s.capitalize()
option: ライトグリーン色を用いる	color = 'lightseagreen'
システム時刻で乱数を初期化する	random.seed()
nがn2よりも大きいか調べる	n > n2
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
辞書の値を列挙する	aDict.values()
破壊的にデータフレームを降順に列によって並べる	df.sort_values(by=column, ascending=False, inplace=True)
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
データ列を２つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
カデットブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
青いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
漢字が文字列内に使われているか調べる	re.search('[\u4E00-\u9FD0]', s)
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
グラフのフォントを日本語表示に変更する	sns.set(font='IPAexGothic')
option: フォントの色をライトスチールブルーに設定する	color = 'lightsteelblue'
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
ふたつの関係が真スーパーセット	aSet > aSet2
再帰エラーを防ぐ	sys.setrecursionlimit(1000000)
option: 黄色色を用いる	color = 'yellow'
集合にイテラブルを追加する	aSet.update(iterable)
散布図をダークオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
多次元データを多次元尺度構成法で濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
ユーザから入力される	int(input())
ヒストグラムをブランチドアーモンド色を用いて描画する	plt.hist(データ列, color='blanchedalmond')
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
多次元データを特異値分解を用いてパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
ホットピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
データフレームを小さい順に破壊的に列によって並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
option: グラフの色を青紫に設定する	color = 'violet'
データフレームのカラムの平均を算出する	df[col].mean()
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
散布図の上三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフの色をレモンシフォンに変更する	plt.plot(データ列x, データ列y, color='lemonchiffon')
辞書のキーを要素に設定する	aDict[key] = element
データ列間の相関係数と有意確率を計算する	scipy.stats.pearsonr(データ列, データ列2)
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
文字列のケースを整える	s.casefold()
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
列とイテラブルを連結する	itertools.chain(iterable, iterable2)
グリーンイエロー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
表データの列に重複があれば、マスクする	df.duplicated(subset=column)
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
データフレームの中で何行重複するか見る	df.duplicated().sum()
黒い△マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームの列の中の欠損値の合計を数える	df[col].isna().sum()
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
２変数の最も小さい値	min(x, y)
無限にnからカウントダウンする	itertools.count(start=n, step=-1)
ピアソンの相関係数を計算する	scipy.stats.pearsonr(データ列, データ列2)
配列から重複を除いたベクトルを作成する	np.unique(aArray)
行列の行列式	np.linalg.det(aArray)
データフレームの列のユニークな値	df[col].unique()
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
データフレームのリストカラムのNaNを後の行の値に変更する	df[aList].fillna(method='bfill')
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
三２ビット整数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=np.int16)
option: ロージーブラウンを使う	color = 'rosybrown'
option: ミントクリームを使う	color = 'mintcream'
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
データフレームからカテゴリデータの列だけ抽出する	df.select_dtypes('object')
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
ダークグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
一点鎖線に折れ線グラフの線の種類を設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
乱数の行列	np.random.random((行数, 列数))
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
行列の列ごとの平均値	np.mean(aArray, axis=0)
行列の転置行列	aArray.T
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
縦棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
太字で文字列をプリントする	print(f'\033[1m{value}\033[0m')
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
折れ線グラフのバツ印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
文字列を全て大文字にする	s.upper()
文字列が全て空白文字からなるかどうか	s.isspace()
option: ライトブルー色を使う	color = 'lightblue'
ピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
３変数の最大値	max(x, y, z)
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データ列とリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
入力から二つの文字列値を取り出す	A, B = map(str, input().split())
文字列を空白で区切って、文字列リストに変換する	s.split()
小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
自然対数	math.log(x)
rgbのバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
散布図をラベンダー色として描画する	plt.scatter(データ列x, データ列y, color='lavender')
バイナリ用にファイルをオープンする]	open(filepath, mode='rb')
option: バツマーカーを使う	marker = 'x'
プロットのカラーパレットを指定する	sns.set(pallete=パレット名)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
棒グラフを白色として描画する	plt.bar(データ列x, データ列y, color='white')
文字列を文字コード列にする	[ord(ch) for ch in s]
option: グラフの色をプラムに設定する	color = 'plum'
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
データ列の折れ線グラフを左三角印で描画する	plt.plot(データ列x, データ列y, marker='<')
nが正の数か調べる	n > 0
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
実数を実数で整数除算する	x // y
空列を作る	[]
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
パパイヤウィップ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
コーンズシルク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
スタッキングを用いてクラス分類を行う	sklearn.ensemble.StackingClassifier()
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
データ列の平均値	ds.mean()
ヒストグラムの色をデピンクにする	plt.hist(データ列, color='deeppink')
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
文字列をマゼンタで表示できる文字列に変換する	f'\033[35m{value}\033[0m'
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
ダークカーキ色としてヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
リストの推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
ペルーにヒストグラムの色を設定する	plt.hist(データ列, color='peru')
データ列を折れ線プロットで描画する	plt.plot(データ列x, データ列y)
データフレームのカラムを散布図を用いて可視化する	sns.scatterplot(data=df, x='列名', y='列名')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
タプルのオブジェクトが最初に見つかるインデックスを探す	aTuple.index(element)
数列とリストについての散布図に黒い右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームの内で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
10を底とする実数の対数	math.log10(x)
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ISO書式の文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフの色をディムグレーにセットする	plt.plot(データ列x, データ列y, color='dimgray')
実数の正接の逆数	math.atan(x)
option: ディープスカイブルーに色を設定する	color = 'deepskyblue'
option: ミディアムターコイズを用いる	color = 'mediumturquoise'
データフレームを見る	df.head()
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
リストを逆順にする	aList[::-1]
データフレームのリストカラムの中に文字列と日付データが含まれるか	df[aList].isin([value, value2])
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
縦棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
nとkのnCk	math.comb(n, k)
空列	[]
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
昇順に2つの列によってデータフレームを並べて、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ヒストグラムの色を耐火レンガにする	plt.hist(データ列, color='firebrick')
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
リストから文字列と等しい最初の要素を取り除く	aList.remove(element)
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
線グラフの色をダークオレンジに変更する	plt.plot(データ列x, データ列y, color='darkorange')
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
セットをリストにする	list(aSet)
配列を縦棒プロットにする	plt.bar(ラベル列, データ列)
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
データフレームを'A'列によって昇順に破壊的に並べ直す	df.sort_values(by='A', ascending=True, inplace=True)
カラムの欠損値を直前の値に指定する	ds.fillna(method='ffill')
データフレームのn行目を抽出する	df.loc[n]
ビン数nとして等量でリストをビン分割する	pd.qcut(aList, n)
ダークブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
折れ線プロットの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
散布図を黒いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
JSONLファイルにデータフレームをタブ区切りとして保存する	df.to_csv(filename, sep='\t')
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
現在は何分か知る	datetime.date.today().minute
配列の合計値	np.sum(aArray)
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
option: 箱ひげ図を横方向にする	vert = False
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
タイムスタンプデータにn秒分、加える	aDatetime + datetime.timedelta(seconds=n)
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
option: スラッシュをセパレータで使う	sep = '/'
文字列を文字コードエスケープでバイト列にする	s.encode(encoding='unicode_escape')
option: グラフの色をオリーブに設定する	color = 'olive'
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
タプルの値に要素が含まれていないか調べる	element not in aDict.values()
線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
線グラフの色をベージュに変更する	plt.plot(データ列x, データ列y, color='beige')
小数点数の正接を求める	math.tan(x)
プロットで使うx座標に説明を付ける	plt.xlabel('x軸ラベル')
データフレームがどの程度、分散しているか見る	df.var()
キューの先頭に要素を付け加える	deq.appendleft(element)
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
パレットを淡くする	sns.set(pallete='muted')
下線付きで文字列をプリントする	print(f'\033[4m{value}\033[0m')
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
円プロットを正円にする	plt.axis('equals')
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
文字列の中のASCII限定としてパターンによる全マッチを使う	re.findall(pattern, s, flags=re.ASCI)
スクリプトのファイルの名前を確認する	sys.argv[0]
データフレームのカラムを千の位で丸める	df[col].round(-3)
タプルをひとつ置きに得る	aTuple[::2]
Pandasで、フォーマットとしてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
縦棒グラフを描画し、左寄せする	plt.bar(ラベル列, データ列, align='edge')
リストと配列について散布図をプロットし、、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
option: 読み込むシートの名前をnamesに設定する	sheet_name = names
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
文字列の無限イテラブル	itertools.repeat(element)
option: BOM付きを使う	encoding = 'utf_8_sig'
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
option: グラフの色をオレンジに設定する	color = 'orange'
数式の部分分数化を行う	sympy.apart(e)
両端キューの末尾に要素を追加する	deq.append(element)
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
縦棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
折れ線グラフのダイアモンド印を赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
折れ線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームを各列と列の組み合わせ毎にグループ化して最小値を算出する	df.groupby([column, column2], as_index=False).min()
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
赤い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
option: オリベドラブ色を使う	color = 'olivedrab'
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームのリストカラムの第二四分位数	df[aList].median()
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
option: バッファリングのサイズを設定する	buffering = 4096
文字列が英数字か調べる	s.isalnum()
両端キューに文字列をプッシュする	deq.append(element)
option: グレー色を使う	color = 'grey'
ダークカーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
分子n、分母mの有理数を生成する	fractions.Fraction(numerator=n, denominator=m)
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
双方向キューをクリアする	deq.clear()
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
リストとリストの散布図を描画して星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ヒストグラムの色をスラグレーにする	plt.hist(データ列, color='slategray')
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
横棒グラフをダークターコイズ色を使って描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
リストとリストの散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
データフレームの先頭を見る	df.head()
データ列をフォーマットで日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
リネン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
実数を２乗する	x ** 2
データ列を使用する	import pandas as pd
三変数の最大値	max(x, y, z)
セットから別の集合との共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
折れ線グラフの色をコーンフラワーブルーに変更する	plt.plot(データ列x, データ列y, color='cornflowerblue')
マッピングの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
日付時刻データの時刻	aDatetime.time()
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
option: ライムグリーンにグラフの色を指定する	color = 'limegreen'
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
option: レベッカパープル色を用いる	color = 'rebeccapurple'
レモンシフォン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームの指定された列名一覧の列だけ抽出する	df[columns]
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
縦棒グラフをインディアンレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='indianred')
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
折れ線グラフを濃いシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
折れ線グラフの下三角マーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
本日の日付時刻	datetime.datetime.today()
文字列のサフィックスは部分文字列か調べる	s.endswith(sub)
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
オブジェクトは文字列	isinstance(obj, str)
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
文字列中に非数字が含まれるか確認する	any(not c.isdigit() for c in s)
グラフの用途を画面に設定する	sns.set(context='notebook')
オプションで、標準出力を使う	file = sys.stdout
option: ビスクに色を設定する	color = 'bisque'
読み込みモードでファイルパスをオープンする]	open(filepath, mode='r')
本日の曜日を整数で使う	datetime.datetime.today().weekday()
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
ヒストグラムの色をコーンフラワーブルーにセットする	plt.hist(データ列, color='cornflowerblue')
実数の仮数	math.frexp(x)[0]
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
散布図をオールドレース色として描画する	plt.scatter(データ列x, データ列y, color='oldlace')
データフレームを各列と列の組み合わせ毎に集約して、個数を求める	df.groupby([column, column2], as_index=False).count()
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
行列から重複を除いたベクトルを作る	np.unique(aArray)
ゼロ埋めされた整数型の行列を作る	np.zeros(要素数, dtype=np.int)
データ列の推移を破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
スプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
リネン色でヒストグラムを描画する	plt.hist(データ列, color='linen')
文字列に変換して列をつなげる	''.join(map(str, iterable))
データフレームから重複したデータを削除する	df.drop_duplicates()
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
行列の列ごとの最小値を求める	np.min(aArray, axis=0)
グリッドを実線にする	plt.grid(linestyle='solid')
データフレームのカラムが文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
カウンタを多い順に列挙する	aCounter.most_common()
ミディアムシアグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
option: オリベドラブを使う	color = 'olivedrab'
CSVファイルを読む	pd.read_csv(filename, sep=',')
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
データフレームのカラムが何分か調べる	df[col].dt.minute
リストとリストについて散布図を描いて、その大きさをnに変更する	plt.scatter(データ列x, データ列y, s=n)
nが奇数か調べる	n % 2 == 1
日付データからn日分、引く	aDate - datetime.timedelta(days=n)
option: 文字列の示す文字コードを用いる	encoding = s
ヒストグラムをミディアムシアグリーン色として描画する	plt.hist(データ列, color='mediumseagreen')
縦棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
データをL1ノルムで正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
option: セパレータをコロンにする	sep = ':'
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
空の両端キュー	collections.deque()
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
ブルーバイオレット色で線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
折れ線グラフに赤い上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
データフレームの中で、列の重複を調べる	df.duplicated(subset=column)
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
線グラフをライトスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
マッピングの値を列挙する	aDict.values()
option: アンティークホワイトにグラフの色を設定する	color = 'antiquewhite'
表データの列の文字列が正規表現文字列にマッチしない行を選択する	df[not df[column].str.match(s)]
データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
スクリプトファイルの絶対パス	os.path.abspath(__file__)
変数を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
実数を数で整数除算する	x // y
option: グラフの色をロージーブラウンに指定する	color = 'rosybrown'
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
option: グラフの色をライムグリーンに指定する	color = 'limegreen'
両端キューの先頭の値	deq[0]
線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフとしてリストの変化を可視化する	plt.plot(range(len(データ列)), データ列)
タプルの平均値	sum(aTuple)/len(aTuple)
文字列をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
折れ線グラフをダークオリーブグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
文字列を部分文字列で後ろから分割する	s.rsplit(sub)
option: 暗い赤色を使う	color = 'darkred'
データフレームをTSVファイルでJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
等しい量になるようにビン数nとしてリストを分割する	pd.qcut(aList, n)
分割数nで配列を分割する	pd.cut(aArray, n)
列をキーとして二つのデータフレームをジョインする	pd.merge(df, df2, on=column)
四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s')
option: ホワイトスモークに色を設定する	color = 'whitesmoke'
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
option: グラフの色をリネンに設定する	color = 'linen'
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
イテラブルの各要素に対してpredicateFuncがTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
二つの文字列が同じでないか調べる	s != s2
タプルをナンバリングする	enumerate(aTuple)
文字列はPythonのキーワードか確認する	keyword.iskeyword(s)
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
文字列をバイト配列に変換する	bytearray(s)
トマトにヒストグラムの色を設定する	plt.hist(データ列, color='tomato')
option: 色を青紫に設定する	color = 'violet'
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
nがn2の倍数でないか	n % n2 != 0
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
データフレームのカラムのNaNを中央値で埋める	df[col].fillna(df[col].median())
option: バリーウッドにグラフの色を設定する	color = 'burlywood'
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
散布図をブラック色として描画する	plt.scatter(データ列x, データ列y, color='black')
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
行列にはいくつ要素が含まれるか調べる	aArray.size
ファイルのディレクトリ名	os.path.dirname(filepath)
文字列を代数計算の変数にする	sympy.Symbol(s)
実数の２乗	x ** 2
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
日付時刻データが月曜日かどうか調べる	aDatetime.weekday() == 0
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
組の末尾の要素	aTuple[-1]
データフレームの累積分布をプロットする	sns.ecdfplot(x='列名', data=df)
x座標の目盛を非表示にする	plt.xticks([])
TSVファイルファイル名がか	filename.endswith('.tsv')
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
ランダム性を強化したランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
option: ダークシアグリーンにフォントの色を指定する	color = 'darkseagreen'
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
黒い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
クラス分類をスタッキングとしてする	sklearn.ensemble.StackingClassifier()
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数を数える	s.count(sub, start, end)
16進数文字列を整数にする	int(s, 16)
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
option: ホワイトスモークを使う	color = 'whitesmoke'
散布図のマーカーをクロスにする	plt.scatter(データ列x, データ列y, marker='x')
ヒストグラムを赤色を用いて描画する	plt.hist(データ列, color='red')
カーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
xが一桁の正の数か調べる	0 <= x <= 9
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
折れ線グラフを点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
option: グラフの色をアクアに設定する	color = 'aqua'
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
文字列を最後の部分文字列で分けたときの後半の文字列を取り出す	s.rpartition(sub)[-1]
リストとリストの散布図を描画して、マーカーを▼に設定する	plt.plot(データ列x, データ列y, marker='v')
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
多次元データをMSDを用いてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
文字列が全てアスキー文字	s.isascii()
列'A'と列'B'をキーとして2つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
切り捨てながらnを半分にする	n //= 2
グラフの背景色を白くする	sns.set(style='whitegrid')
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
配列とリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
配列の次元数	aArray.ndim
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
モデルを当てはめる	model.fit(説明変数, 目的変数)
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
オレンジにヒストグラムの色を設定する	plt.hist(データ列, color='orange')
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
データ列の推移を青い点線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
ヒストグラムをラベンダー色を使って描画する	plt.hist(データ列, color='lavender')
２つのカラムによってデータフレームをグループ化する	df.groupby(['A', 'B'])
オブジェクトが文字列かどうか	isinstance(obj, str)
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
日付データと日付データの時間差を秒数で算出する	(aDate - aDate2).total_seconds()
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
数式の変数についてのn階微分を計算する	sympy.diff(e, z, n)
xを浮動小数点数に変換する	float(x)
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
option: アクアマリン色を用いる	color = 'aquamarine'
option: ダークマゼンタ色を使う	color = 'darkmagenta'
オブジェクトは辞書か	isinstance(obj, dict)
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
データフレームのカラムの第一四分位数を求める	df[col].quantile(0.25)
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
データフレームのリスト列のpercent分位数を求める	df[aList].quantile(percent/100)
データフレームをまとめて丸める	df.round()
タプルの先頭を取り除く	aTuple[1:]
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
黄緑にヒストグラムの色を変更する	plt.hist(データ列, color='chartreuse')
リストとリストの散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
紺色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
数式の部分分数化する	sympy.apart(e)
option: グラフの色をシエナに設定する	color = 'sienna'
option: ナバホホワイト色を使う	color = 'navajowhite'
タプルをインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: データ型として整数型を使う	dtype = np.int
四角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
横棒グラフを青色を使って描画する	plt.barh(データ列x, データ列y, color='blue')
配列の差	aArray - aArray2
データフレームのカラムのNaNを50パーセンタイルで埋める	df[col].fillna(df[col].median())
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
横棒グラフをピーチパフ色として描画する	plt.barh(データ列x, データ列y, color='peachpuff')
文字列中にひとつでも非数字が含まれるかどうか調べる	any(not c.isdigit() for c in s)
ヒストグラムを赤くする	plt.hist(データ列, color='r')
散布図をティール色として描画する	plt.scatter(データ列x, データ列y, color='teal')
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
文字列を部分文字列で二つに区切って、後半の文字列を求める	s.partition(sub)[-1]
文字列の左側からタブを取り除く	s.lstrip('\t')
二つの集合に共通する要素からなる集合	aSet.intersection(aSet2)
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
リストとイテラブルの散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
実数のn乗の整数剰余	pow(x, n, y)
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
集合に要素を追加する	aSet.add(element)
文字列の開始位置番目からと終了位置までの間に部分文字列がないか調べる	s.find(sub, start, end) == -1
option: ペルーにグラフの色を設定する	color = 'peru'
文字列が組の要素か調べる	element in aTuple
グラフの凡例を表示する	plt.legend()
リストの先頭	aList[0]
option: ゴールデンロッド色を使う	color = 'goldenrod'
黒い大バツマーカーをイテラブルと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
散布図の下三角印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
横棒グラフをデピンク色を使って描画する	plt.barh(データ列x, データ列y, color='deeppink')
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
散布図をダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D')
option: マーカーの色をバイオレットにする	markerfacecolor = 'violet'
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
両端キューの右	deq[-1]
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
Pandasで、エポック秒のデータ列から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
データフレームの列がxより多くx2より少ない行を抽出する	df[(x < df[column]) & (df[column] < x2)]
リストをnからナンバリングする	enumerate(aList, start=n)
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
option: ライトグリーン色を用いる	color = 'lightgreen'
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
日付時刻データの年数	aDatetime.year
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
nullに等しい識別子	None
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
入力を整数として受け取る	int(input())
配列にはいくつ要素が存在するか調べる	aArray.size
option: 色をインディアンレッドに設定する	color = 'indianred'
データ列の離れ具合を見る	sns.residplot(x=データ列, y=データ列)
青いグリッド線を引く	plt.grid(color='b')
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームを複数の列の値によって集計する	df.groupby(columns)
タプルをn回、連結する	aTuple * n
データフレームを列によって並べ直してNaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
イテラブルの折れ線グラフをプロットしてRGBで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
作画の背景色を暗くする	sns.set(style='darkgrid')
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
空行を表示する	print()
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgray')
リストにリストを追加する	aList.extend(aList2)
文字列中にひとつでも非小文字が含まれる	any(not c.islower() for c in s)
辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
横棒グラフをスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='skyblue')
散布図の▼マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
行列の行ごとの平均値	np.mean(aArray, axis=1)
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
グリッド線	plt.grid(alpha=0.5)
リストを組に変換する	tuple(aList)
option: グラフの線の幅を3.0ポイントに指定する	linewidth = 3.0
連立方程式の解を求める	sympy.solve([e, e2])
配列の全順列を得る	itertools.permutations(iterable)
何回まで再帰ができるかを	sys.getrecursionlimit()
配列を平坦化する	aArray.flatten()
option: グラフの色をやわらかい青に設定する	color = 'cornflowerblue'
イテラブルの各値を順に両端キューの先頭に追加する	deq.extendleft(iterable)
タイムスタンプデータが土曜日か	aDatetime.weekday() == 5
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列が全て数字か調べる	s.isdigit()
ダークサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
変数を黒色化する	f'\033[30m{value}\033[0m'
ファイルを開き]、追加ストリームを求める	open(filepath, mode='a')
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
アルファベットの大文字を全部使う	string.ascii_uppercase
二つ並べてデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
ダークマゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
数値を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
数式の変数を数値で置き換える	e.subs(z, e2)
nがn2の倍数か調べる	n % n2 == 0
行列の行ごとの分散	np.var(aArray, axis=1)
データフレームのNaNを後の行の値に指定する	df.fillna(method='bfill')
変数について数式の積分を計算する	sympy.integrate(e, z)
実行結果を黄色にする	f'\033[33m{value}\033[0m'
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
文字列を走査し、正規表現にマッチするか確認する	re.search(pattern, s)
実数の逆正接を計算する	math.atan(x)
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
ペルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
赤い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
データフレームの中のNaNがある行を削除する	df.dropna()
グラフの描画で濃くパレットを使う	sns.set(pallete='deep')
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
行列の列ごとの最小値	np.min(aArray, axis=0)
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
日付データにn秒分加算する	aDate + datetime.timedelta(seconds=n)
数列とイテラブルについて散布図を描画して、▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
実数を切り上げて整数にする	math.ceil(x)
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
nが奇数か	n % 2 == 1
配列とリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
折れ線グラフの▽印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
ニューラルネットを用いてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
リストとリストを結合する	aList + aList2
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
折れ線プロットにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
両端キューの要素数を計算する	len(deq)
K最近傍法でクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
option: グラフの色を白に設定する	color = 'white'
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
option: マゼンタにフォントの色を設定する	color = 'magenta'
散布図を赤い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
n番目のシートをファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームの末尾n行を抽出する	df.tail(n)
データフレームを'A'列と'B'列を用いてソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
データフレームのリストカラムの値が欠損値	df[aList].isna()
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
option: 赤を使う	color = 'red'
nが-9以上、9以下か調べる	-9 <= n <= 9
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフを赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
ベクトルの内積	np.dot(aArray, aArray2)
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
散布図にクロスマーカーを用いる	plt.scatter(データ列x, データ列y, marker='x')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
データフレームのカラムは正規分布からどの程度、歪んでいるか見る	df[col].kurt()
option: ミッドナイトブルーを使う	color = 'midnightblue'
データ列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
パウダーブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
カラーマップでヒストグラムを描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
散布図の▽マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
データフレームのカラムの上位25%	df[col].quantile(0.25)
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
nが1もしくは2	n == 1 or n == 2
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
データフレームの列がxの行を抽出する	df[df[column] == x]
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
文字列TSVファイルからn番目のカラムをインデックスとしてCSVを読み込む	pd.read_csv(filename, index_col=n)
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
option: 白色を使う	color = 'white'
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
データフレームの中にいくつがあるか数える	df.isin([value]).sum()
データフレームのリストカラムの第一四分位数を求める	df[aList].quantile(0.25)
option: パパイヤウィップにグラフの色を変更する	color = 'papayawhip'
ヒストグラムをライトスレイグレー色を用いて描画する	plt.hist(データ列, color='lightslategray')
データフレームから列名を複数指定して選択する	df[columns]
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
データフレームの列の各値は何回出現するか確認する	df[col].value_counts()
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
option: ホットピンク色を使用する	color = 'hotpink'
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
要素ひとつのタプル	(element,)
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
日付データにn秒を加える	aDate + datetime.timedelta(seconds=n)
Pandasでデータフレームのcollのエポック秒からdatetime64型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
文字列のケースを変換する	s.casefold()
数式をパラメータについて微分する	sympy.diff(e, z)
グラフの横軸を対数に変更する	plt.xscale('log')
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
折れ線グラフをダークオレンジ色を使って描画する	plt.plot(データ列x, データ列y, color='darkorange')
折れ線グラフをダークオレンジ色として描画する	plt.plot(データ列x, データ列y, color='darkorange')
グリッド線を赤くする	plt.grid(color='r')
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
option: ブルーバイオレットに色を設定する	color = 'blueviolet'
タプルをnからナンバリングする	enumerate(aTuple, start=n)
n番目のカラムをインデックスにしてCSVファイルTSVファイルを読む	pd.read_csv(filename, index_col=n)
箱髭図を使ってデータ列を作図する	plt.boxplot(データ列)
ダークオレンジ色でヒストグラムを描画する	plt.hist(データ列, color='darkorange')
集合の全ての要素が別の集合に含まれる	aSet.issubset(aSet2)
ヒートマップでデータフレームのリスト列の相関行列をグラフ化する	sns.heatmap(df[aList].corr())
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
散布図の菱形マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
両端キューに要素をプッシュする	deq.append(element)
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
option: ダークシアグリーン色を用いる	color = 'darkseagreen'
現在の時間数	datetime.date.today().hour
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データ列の月を使う	ds.dt.month
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
縦棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
データ列の推移を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
縦棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
配列を転置する	aArray.T
折れ線グラフの色をスチールブルーに変更する	plt.plot(データ列x, データ列y, color='steelblue')
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
折れ線グラフの色をダークスラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategray')
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
配列の累積和	np.cumsum(aArray)
データフレームの列を丸める	df[col].round()
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
option: 線を細くする	linewidth = 3.0
文字列を走査し、パターンにASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
データフレームの空文字を未入力値に変換し、ドロップする	df.replace('', np.nan).dropna()
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データ列の下位25%	ds.quantile(0.75)
リストと配列についての散布図に三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^')
文字列が平仮名かどうか	('ぁ' <= ch <= 'ん')
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
文字列が全て空白文字からなるか調べる	s.isspace()
二つのカウンタの共通する要素	aCounter & aCounter2
プラットフォームの符号付き整数の最大値	sys.maxsize
option: セパレータを改行にする	sep = '\n'
カウンタの全カウント	aCounter.total()
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
データフレームを複数の列の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
ヒストグラムの色をカーキに変更する	plt.hist(データ列, color='khaki')
データフレームのカラムの曜日が何日目か確認する	df[col].dt.dayofweek
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
行列の演算をする	import numpy as np
プロットにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
カラムの中にいくつ欠損値があるか求める	ds.isna().sum()
折れ線グラフの大バツ印の線幅を設定する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
xを浮動小数点数型に変換する	float(x)
辞書のキーを列挙する	aDict.keys()
スノー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
データフレームをCSV形式としてJSONLファイルに保存する	df.to_csv(filename)
縦棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
日付時刻データの月数	aDatetime.month
リストとリストの散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
option: ダークブルーにフォントの色を変更する	color = 'darkblue'
ダークシアグリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
数の二乗を算出する	x ** 2
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
文字列中の部分文字列の登場回数をカウントする	s.count(sub)
二つの集合が互いに素か	aSet.isdisjoint(aSet2)
リストとイテラブルについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ダークゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
表を列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
散布図の△マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
option: 文字列の示すエンコーディングを使う	encoding = s
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
リストが空でないか調べる	len(aList) != 0
整数nを2進表現に変換する	bin(n)
データフレームのリストカラムの欠損値を最小値に増やす	df[aList].fillna(df[aList].min())
キーが辞書に存在する	key in aDict
option: グラフの種類を点線に設定する	linestyle = 'dotted'
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
タイムスタンプデータからn日を減らす	aDatetime - datetime.timedelta(days=n)
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
option: ローングリーン色を用いる	color = 'lawngreen'
オブジェクトを文字列に変換する	str(obj)
文字列を白色にする	f'\033[37m{value}\033[0m'
option: バイナリモードに設定する	mode = 'rb'
フォレストグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
データフレームのカラムの年	df[col].dt.year
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームの未入力値を最頻値にする	df.fillna(df.mode().iloc[0])
二つのカウンタの共通する値	aCounter & aCounter2
フクシア色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
日付データが月曜日か調べる	aDate.weekday() == 0
文字列の開始位置から終了位置までの範囲で部分文字列を数える	s.count(sub, start, end)
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームのカラムの中に文字列が存在する	df[col].isin([value])
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
折れ線グラフのマーカーを右三角印にする	plt.plot(データ列x, データ列y, marker='>')
線グラフをライトゴールドロディイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データ列の折れ線グラフを星印で描画する	plt.plot(データ列x, データ列y, marker='*')
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
year年month月の日付	datetime.date(year=year, month=month, day=1)
option: マーカーをダイアモンドに指定する	marker = 'D'
デックをデキューする	deq.popleft()
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
オーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
要素が辞書の値として含まれているかテストする	element in aDict.values()
option: ダークオリーブグリーン色を使用する	color = 'darkolivegreen'
ライトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
UNIXコマンドtextを実行する	os.system(text)
リストとリストについて散布図を描画し、、マーカーを大バツに変更する	plt.plot(データ列x, データ列y, marker='X')
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
変数をシアンでプリントできる文字列にする	f'\033[36m{value}\033[0m'
ブラック色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
レモンシフォンにヒストグラムの色をする	plt.hist(データ列, color='lemonchiffon')
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
現在の再帰の最大回数	sys.getrecursionlimit()
n割るn2を切り上げる	(n + n2 - 1) // n2
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームを列でグループ化して、それぞれのグループごとの平均値を算出する	df.groupby(column).mean()
組の末尾からn番目以前の要素を抽出する	aTuple[:-n]
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ヒストグラムの色をミディアムスレートブルーにセットする	plt.hist(データ列, color='mediumslateblue')
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
データフレームのリストカラムを10の位で丸めて整数型にする	df[aList].round(-1).astype(int)
複数行対応として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
option: フォントの色をフクシアに指定する	color = 'fuchsia'
逆双曲線余弦を算出する	math.acosh(x)
日付データが何月か知る	aDate.month
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
イテラブルから両端キューを作る	collections.deque(iterable)
データフレームの標本標準偏差	df.std()
表データを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
データフレームのn行より後ろを抽出する	df[n:]
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
option: グラフの色をタンに設定する	color = 'tan'
折れ線グラフのポイント印を黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
配列を平坦にする	aArray.flatten()
辞書を改行付きで文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
データ列が何月か見る	ds.dt.month
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
二つの集合が集合と互いに素かどうかテストする	aSet.isdisjoint(aSet2)
２つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
タプルの要素をソートする	sorted(aTuple)
option: ブラックにグラフの色を変更する	color = 'black'
配列の要素ごとの積	np.multiply(aArray, aArray2)
折れ線グラフに青い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
グラフを使う準備をする	import matplotlib.pyplot as plt
option: 耐火レンガ色を使う	color = 'firebrick'
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
nを切り捨てながら半分にする	n //= 2
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
グラフに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
データフレームの各グループの最小値	df.groupby(column).min()
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
明るくカラーテーマをグラフの描画で使う	sns.set(pallete='bright')
青い実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
1からnまでの整数列を使う	list(range(1, n+1))
文字列の開始位置から部分文字列を探す	s.find(sub, start)
データフレームの列の値がxより大きくx2より小さい行を取り出す	df[(x < df[column]) & (df[column] < x2)]
日付データが土曜日か調べる	aDate.weekday() == 5
リスト内の要素が少なくともひとつ真か調べる	any(aList)
実数が正の数かどうか調べる	x > 0
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字コードtextを用いてファイルを書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
option: パールバイオレットレッド色を用いる	color = 'palevioletred'
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフをスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='slateblue')
シエナ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
棒グラフをダークオレンジ色として描画する	plt.bar(データ列x, データ列y, color='darkorange')
本日の年を使う	datetime.datetime.today().year
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
ファイルを全部、読み込む	f.read()
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
データフレームのカテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
イテラブルのイミュータブルな集合を生成する	frozenset(iterable)
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
option: 箱ひげ図に平均を加える	showmeans = False
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
ヒストグラムの色をペールグリーンにする	plt.hist(データ列, color='palegreen')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
両端キューのn番目に要素を挿入する	deq.insert(n, element)
nが正の整数か調べる	n > 0
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
改行で文字列を区切る	s.splitlines()
折れ線グラフのマーカーをポイント印にする	plt.plot(データ列x, データ列y, marker='.')
データ列のNaNをxに変更する	ds.fillna(x)
クリムゾンにヒストグラムの色を変更する	plt.hist(データ列, color='crimson')
データフレームのカラムのNaNを最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
データフレームを表示するとき、表示可能な列数を減らす	pd.set_option('display.max_columns', n)
リストを黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
折れ線グラフの色をダークオリーブグリーンに変更する	plt.plot(データ列x, データ列y, color='darkolivegreen')
折れ線グラフの色をダークゴールデンロッドに指定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
上位集合かどうか	aSet.issuperset(aSet2)
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
既存のファイルパスをUTF8として追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
無限にnからカウントアップする	itertools.count(start=n)
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
実数が有限かどうか調べる	math.isfinite(x)
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
文字列内にひとつでもアルファベットがあるかどうか調べる	any(c.isalpha() for c in s)
オブジェクトはタプルクラス	isinstance(obj, tuple)
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
nを否定する	not n
列をイミュータブルな集合にする	frozenset(iterable)
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
折れ線グラフの下三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
データフレームの列名を変更する	df.rename(columns={column: name})
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
二つのオブジェクトが等しいか調べる	obj == obj2
データフレームから先頭の列を除く	df[df.columns[1:]]
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
箱ひげ図を横に並べてプロットする	plt.boxplot([データ列, データ列])
option: バツマーカーを描画する	marker = 'x'
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
実数の双曲線正接を求める	math.tanh(x)
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: ローングリーン色を使用する	color = 'lawngreen'
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
列を配列に変換する	df[column].values
グラフの縦軸を対数目盛に変更する	plt.yscale('log')
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
option: 回帰木の深さを制限する	maxdepth = n
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
データ列の折れ線グラフをポイント印で描画する	plt.plot(データ列x, データ列y, marker='.')
グラフ中のフォントをする	sns.set(font=フォント名)
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
データフレームの値が欠損値か調べる	df.isna()
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
option: ライトグリーンにグラフの色を設定する	color = 'lightseagreen'
ブースティングでクラス分類をする	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
列によってデータフレームをソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
表データのインデックスがnの行を抽出する	df.loc[n]
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
オブジェクトのプロパティの値を使う	getattr(obj, プロパティ名)
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
option: 茶色色を使う	color = 'brown'
オブジェクトがタプルに含まれないか調べる	element not in aTuple
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
イテラブルの全順列を求める	itertools.permutations(iterable)
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
リストが少なくとも一つ真かどうか調べる	any(aList)
データフレームのカラムの値を正規表現patternでreplに置き換える	df[col].replace(pattern, repl, regex=True)
option: ダークグレー色を使う	color = 'darkgrey'
option: ダイアモンドマーカーを加える	marker = 'D'
行列の行ごとの最大	np.max(aArray, axis=1)
option: ディムグレーを用いる	color = 'dimgrey'
option: 印の色を変更する	markerfacecolor = '#800080'
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
折れ線グラフをナバホホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='navajowhite')
集合を変更不能なセットにする	frozenset(aSet)
実数を万の位で丸める	round(x, -4)
空の集合	set()
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
option: ミディアムパープル色を使う	color = 'mediumpurple'
サブセット	aSet.issubset(aSet2)
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
ファイルにxを文字列に変換して書き込む	f.write(str(x))
インデックスでデータフレームを昇順にソートする	df.sort_index(ascending=True)
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
option: グラフの色を黄色に設定する	color = 'yellow'
option: グラフの色をダークマゼンタに変更する	color = 'darkmagenta'
データフレームのカラムからユニークな要素を抽出しリスト化する	df[col].unique().tolist()
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
青緑色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
棒グラフをミスティローズ色を用いて描画する	plt.bar(データ列x, データ列y, color='mistyrose')
スラグレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
オプションで、標準エラーを出力にする	file = sys.stderr
option: グラフの色をマルーンに変更する	color = 'maroon'
棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
散布図のダイアモンドマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
日付時刻データの秒数を使う	aDatetime.second
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
データフレームのカラムの標本標準偏差を求める	df[col].std()
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
列の中のNaNの個数を数える	ds.isna().sum()
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
nをn2で割ったモジュロ	n % n2
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
itertoolsモジュールをインポートする	import itertools
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
値が両端キューの中に含まれてるかどうか判定する	element in deq
パターンに大文字・小文字を無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
列の値でデータフレームをグループ分けする	df.groupby(column)
データフレームの列の欠損値を平均値に指定する	df[col].fillna(df[col].mean())
既存の配列を元にして全要素が初期値の配列を作る	np.full_like(aArray, 初期値)
目盛線	plt.grid(linestyle='--')
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
ヒストグラムの色をアクアに指定する	plt.hist(データ列, color='aqua')
クラス分類をアンサンブル学習としてする	sklearn.ensemble.VotingClassifier()
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
全空白文字	string.whitespace
コロンを用いて文字列を区切って、列挙する	s.split(':')
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
option: クロス印を描画する	marker = 'x'
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
列のセット	set(iterable)
文字列の右側から空白を取り除く	s.rstrip()
データフレームのヒストグラム付き散布図をプロットする	sns.jointplot(x='列名', y='列名', data=df)
データフレームのリストカラムの中に含まれると日付データの合計をカウントする	df[aList].isin([value, value2]).sum()
行列の次元を変形する	aArray.reshape(行数, 列数)
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
option: セパレータを使わない	sep = ''
ヒストグラムの色をライトサーモンにセットする	plt.hist(データ列, color='lightsalmon')
データフレームのカラムの未入力値を直前の値で埋める	df[col].fillna(method='ffill')
option: フォントの色をナバホホワイトに設定する	color = 'navajowhite'
データフレームを表示するときn行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
カウンタをイテラブルをカウントして、更新する	aCounter.update(iterable)
option: フォントの色をスノーに設定する	color = 'snow'
縦棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
option: 色を深紅に設定する	color = 'crimson'
配列とリストについて散布図をプロットして、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
カウンタのキーとカウントを列挙する	aCounter.items()
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
積み上げ横棒グラフをプロットする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ヒストグラムの色をタンに指定する	plt.hist(データ列, color='tan')
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
散布図のマーカーの色を指定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
文字列リストを連結し、一つの文字列にする	''.join(map(str, iterable))
入力ストリームから1バイト、読む	f.read(1)
タプル内の要素が全て真か調べる	all(aTuple)
実数のn乗	pow(x, n)
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
正規表現patternでreplにデータフレームをまとめて置き換える	df.replace(pattern, repl, regex=True)
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
シエナ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムの色をコーンフラワーブルーに指定する	plt.hist(データ列, color='cornflowerblue')
列によってデータフレームを並べて行を振り直す	df.sort_values(columns).reset_index(drop=True)
ロバストな線形回帰モデルを準備する	model = sklearn.linear_model.HuberRegressor()
横棒グラフをベージュ色として描画する	plt.barh(データ列x, データ列y, color='beige')
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
ヒストグラムの色をミディアムブルーに指定する	plt.hist(データ列, color='mediumblue')
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
option: 配列のデータ型を指定する	dtype = np.int32
左三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
option: データ型として符号なし８ビット整数型を使う	dtype = np.uint8
オブジェクトのプロパティの値を見る	getattr(obj, プロパティ名)
実数を実数で割って、切り捨てる	x // y
淡いピンク色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
実数の逆正接	math.atan(x)
折れ線グラフの色をミスティローズに変更する	plt.plot(データ列x, データ列y, color='mistyrose')
文字列を最初の部分文字列で二分し、前半の文字列を見る	s.partition(sub)[0]
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図をシエナ色として描画する	plt.scatter(データ列x, データ列y, color='sienna')
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
文字列の最後	s[-1]
集合から任意の要素を取り出す	aSet.pop()
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
option: ミディアムシアグリーンにグラフの色を設定する	color = 'mediumseagreen'
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategray')
データ列の欠損値を最小値で置換する	ds.fillna(ds.min())
nからn2を引く	n - n2
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
散布図に黒いバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
ゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
表データから列を3つのみ選択する	df[[column, column2, column3]]
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
両端キューをデキューする	deq.popleft()
ValueMapでまとめてデータ列を変更する	ds.replace(ValueMap)
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
データフレームの列がxでない行をフィルタする	df[df[column] == x]
アンティークホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
データ列の偏りを対数変換する	np.log(データ列)
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
リストを引数として展開して表示する	print(*aList)
双方向キューを要素を出す	deq.popleft()
平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
文字列の大きさ	len(s)
日付時刻データにn分分加える	aDatetime + datetime.timedelta(minutes=n)
四角印を使ってデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
データ列を四捨五入する	ds.round()
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
散布図をrgbの大バツマーカーを使ってプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
リストとリストの散布図を描画して、大バツマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
新しいリッジ回帰とロッソ回帰のハイブリットモデルを新規作成する	model = sklearn.linear_model.ElasticNet()
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
散布図をブランチドアーモンド色として描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
ヒストグラムを青くする	plt.hist(データ列, color='b')
option: 暗い赤にグラフの色を指定する	color = 'darkred'
ラベンダー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
データフレームを関数の値でグループ化し、要約統計量を計算する	df.groupby(関数).describe()
リストとイテラブルの散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームのリスト列の中の欠損値の数をカウントする	df[aList].isna().sum()

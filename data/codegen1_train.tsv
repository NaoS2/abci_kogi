option: 赤色を使う	color = 'red'
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データフレームの尖り	df.skew()
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
カウンタ同士で積集合演算する	aCounter & aCounter2
データシリーズのNaNを中央値に設定する	ds.fillna(ds.median())
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: 値を置き換える	inplace = True
リストの末尾	aList[-1]
昇順にデータフレームをある列で並べる	df.sort_values(by='列A', ascending=True)
イテラブルの全順列	itertools.permutations(iterable)
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
日付データが木曜日か調べる	aDate.weekday() == 3
別の文字列に回数を制限して文字列中の部分文字列を置き換える	s.replace(sub, newsub, n)
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
option: バイナリモードにする	mode = 'rb'
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
折れ線グラフの左三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
option: 改行コードをUNIXに指定する	newline = '\n'
三つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=1)
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
データフレームを関数の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
数列を箱髭図にする	plt.boxplot(データ列)
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
nがn2以下か調べる	n <= n2
スピアマン相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='spearman')
TSVファイルでデータフレームを保存する	df.to_csv('file.tsv', sep='\t')
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
数式を数値にする	float(e)
ミディアムシアグリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
欠損値がある行をドロップする	df.dropna(inplace=True)
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
リストを中央値でビン分割する	pd.qcut(aList, 2)
option: 紺色を用いる	color = 'darkblue'
マッピングを複製する	aDict.copy()
文字列を最後の部分文字列で二分する	s.rpartition(sub)
データシリーズが何日か見る	ds.dt.day
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
散布図をレモンシフォン色として描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
折れ線グラフのクロス印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ゴールド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
平均と分散でデータを標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ミッドナイトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
組の末尾のn要素を取り除く	aTuple[:-n]
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
データフレームの一部のカラムを丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
プロットを表示する	plt.show()
文字列をASCII限定としてパターンで分ける	re.split(pattern, s, flags=re.ASCI)
全ての十六進数字	string.hexdigits
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
でデータフレームの一部の列の相関行列を算出する	df[['列A', '列B']].corr(method='kendall')
データフレームの指定したカラムの値を正規表現patternでまとめてreplに置き換える	df['列A'].replace(pattern, repl, regex=True)
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
nがn2よりも小さいかどうか調べる	n < n2
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
文字列を代数計算の変数に変換する	sympy.Symbol(s)
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
散布図の印を三角にする	plt.scatter(データ列x, データ列y, marker='^')
実数を千の位で四捨五入する	round(x, -3)
文字列を区切りで区切って文字列リストに変換する	s.split(sep)
オプションで、標準出力を出力にする	file = sys.stdout
散布図にrgbの菱形マーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
SVDで淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
実数の自然対数	math.log(x)
0からnまでの整数列を作る	list(range(n+1))
日付時刻データの年を使う	aDatetime.year
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
option: バッファリングのサイズを設定する	buffering = 4096
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
リストの先頭の要素を求める	aList[0]
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
文字を文字コードに変換する	ord(ch)
option: ディープスカイブルー色を使う	color = 'deepskyblue'
有理数モジュールをインポートする	import fractions
データフレームの列の名前を付け直す	df.rename(columns={'列A': '列a', '列B': '列b'})
横棒グラフをイエローグリーン色として描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
配列とリストについて散布図を描画し、、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
バイオリン図をプロットする	sns.violinplot(x='カテゴリ列', y='列', data=df)
整数nの十六進表現を使う	hex(n)
線グラフの色をゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='goldenrod')
ふたつのマップを結合する	aDict | aDict2
option: ヘッダを自動的な連番に設定する	header = None
茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
ヒストグラムの色をアンティークホワイトに変更する	plt.hist(データ列, color='antiquewhite')
option: ライトグレー色を使用する	color = 'lightgrey'
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
クラスが名前付きタプル	issubclass(C, tuple)
データフレームの列の種類	df.info()
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
option: レモンシフォン色を使う	color = 'lemonchiffon'
カウンタの項目を増やす	aCounter[element] += 1
ある列の文字列が正規表現にマッチする行を抽出する	df[df['列A'].str.match(正規表現)]
option: データ型として符号なし８ビット整数型を使う	dtype = np.uint8
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
表のインデックスの名前を全て付け直す	df.rename(index={x: y})
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
最大値・最小値で整数乱数を求める	random.randint(最小値, 最大値)
データフレームの指定したカラムを丸める	df['列A'].round()
option: シーグリーン色を使う	color = 'seagreen'
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
散布図に黒い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
配列と配列についての散布図に黒い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムをミディアムシアグリーン色として描画する	plt.hist(データ列, color='mediumseagreen')
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
マップのキーとその値をペアとして取り出す	aDict.items()
データフレームの一部のカラムの中にいくつ欠損値があるか数える	df[['列A', '列B']].isna().sum()
配列の調和平均	scipy.stats.hmean(配列)
option: フォントの色をアンティークホワイトにセットする	color = 'antiquewhite'
オブジェクトのハッシュ値を算出する	hash(obj)
option: ドジャーブルーにフォントの色を変更する	color = 'dodgerblue'
ヒストグラムをダークサーモン色として描画する	plt.hist(データ列, color='darksalmon')
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
option: 説明変数を事前に正規化する	normalize = True
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
データフレームをグループ化し、それぞれの平均値を求める	df.groupby('列A').mean()
棒グラフをライトグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgray')
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
ヒストグラムをライム色として描画する	plt.hist(データ列, color='lime')
データフレームの指定したカラムの文字列を欠損値にする	df['列A'].replace(値, np.nan)
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
分数の分子	q.numerator
nの無限なリストを得る	itertools.repeat(n)
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
横棒グラフをミスティローズ色を使って描画する	plt.barh(データ列x, データ列y, color='mistyrose')
文字列中の片仮名をひらがなに変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
濃いシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームの指定したカラムの欠損値を前の行の値に設定する	df['列A'].fillna(method='ffill')
データフレームのカラムの各データ値の出現数を求める	df[col].value_counts()
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
辞書からキーで指定された項目をポップする	aDict.pop(key)
星マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
FIXME:カテゴリーデータを出現頻度順にソートする	df['列A'].value_counts().sort_index().index
データフレームをCSVファイルに小数点以下3桁まで保存する	df.to_csv('file.csv', float_format='%.3f')
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
配列の歪度を求める	scipy.stats.skew(配列, bias=False)
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
ファイルの絶対ファイルパス	os.path.abspath(filepath)
option: エンコーディングを文字列の示す文字コードにする	encoding = s
イテラブルから重複なく、n要素ランダムに選ぶ	random.sample(iterable, k=n)
データフレームの選択したカラムの欠損値を中央値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
本日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
散布図をライトスレイグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
データフレームの棒プロットをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
データフレームを書き出す	df.to_csv('file.csv')
ベージュ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
列のUNIX秒を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
データフレームをある列でグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
データシリーズが何年か知る	ds.dt.year
黒い三角マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
実数の整数部を求める	math.modf(x)[1]
データフレームを百の位で丸めて、整数型にする	df.round(-2).astype(int)
第二引数で指定されたファイルの名前	sys.argv[1]
イテラブルとイテラブルについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
配列を中央値で分割する	pd.qcut(aArray, 2)
縦棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
eの実数乗	math.exp(x)
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
散布図のクロス印の色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
マゼンタ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
配列とリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
組の中の最小値を算出する	min(aTuple)
ボックスチャートを描画して平均線を追加する	plt.boxplot(データ列, meanline=True)
option: 紺碧色を使う	color = 'azure'
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
真紅色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
データフレームから数値データの列を取り出す	df.select_dtypes('number')
棒グラフをスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='skyblue')
散布図の大バツマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
データシリーズの中に文字列があるか調べる	ds.isin([value])
イテラブルから配列を作る	np.array(iterable)
オプションで、出力先を標準エラーに変更する	file = sys.stderr
文字列が全て英数字か調べる	s.isalnum()
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
棒グラフをパパイヤウィップ色として描画する	plt.bar(データ列x, データ列y, color='papayawhip')
option: マゼンタ色を使う	color = 'magenta'
データフレームのある列の値がxに等しくない行を抽出する	df[df['列A'] != x]
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
横棒グラフをカデットブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='cadetblue')
シスル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
縦棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
option: 線の種類を破線に設定する	linestyle = 'dashed'
ヒストグラムをダークオーキッド色を用いて描画する	plt.hist(データ列, color='darkorchid')
縦棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームのある列	df['列A']
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
ベクトルの最大値を調べる	np.max(aArray)
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
アクア色でヒストグラムを描画する	plt.hist(データ列, color='aqua')
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
データフレームの選択したカラムの母標準偏差を求める	df[['列A', '列B']].std(ddof=0)
両端キューの先頭にイテラブルの各値を追加する	deq.extendleft(iterable)
nとn2の排他的論理和	n ^ n2
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
スプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
bとn2から成るペア	(n, n2)
エクセルファイルからデータフレームを読み込む	pd.read_excel('file.xlsx')
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
柱状図でデータ列を可視化する	plt.hist(データ列)
配列の尖度を求める	scipy.stats.kurtosis(配列, bias=False)
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
option: フォントの色をカデットブルーに変更する	color = 'cadetblue'
KNNで回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
option: アクアマリン色を使う	color = 'aquamarine'
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
nがセットのひとつか調べる	n in aSet
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
データフレームの指定したカラムの標準偏差	df['列A'].std()
配列の値が正規分布にしたがって発生する累積確率を計算する	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
八進文字列を整数に変換する	int(s, 8)
リネン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
ダークオリーブグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
チョコレート色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
縦棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
変数について数式のインテグラルを計算する	sympy.integrate(e, z)
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: グラフの色をリネンに設定する	color = 'linen'
配列を分割数nで分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
文字列が全て数字か調べる	s.isdigit()
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
nが一桁の数か調べる	-9 <= n <= 9
オブジェクトは集合クラスのインスタンスか調べる	isinstance(obj, set)
option: どのカラムも行に設定しない	index_col = None
データシリーズを十の位で丸めて、整数にする	ds.round(-1).astype(int)
横軸の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ヒストグラムをコーンフラワーブルー色として描画する	plt.hist(データ列, color='cornflowerblue')
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
アクア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
データフレームをソートし、、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
タブ	'\t'
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
クラス分類の偽陰性をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
データフレームの先頭100行	df.head(100)
プラットホームのバイトオーダを知る	sys.byteorder
整数nがセットのどれかか調べる	n in aSet
散布図をアリスブルー色として描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
option: ダークオリーブグリーン色を用いる	color = 'darkolivegreen'
リストの最後からn番目以前の要素を取り出す	aList[:-n]
双方向キューの中に要素が含まれてるか調べる	element in deq
option: 色をミディアムパープルに変更する	color = 'mediumpurple'
ゼロ埋めされた行列	np.zeros(行数, 列数)
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
リストのn番目以降の部分を取り出す	aList[n:]
カデットブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
文字列を部分文字列で二分し、残りの文字列を見る	s.partition(sub)[-1]
文字列の先頭から空白を取り除く	s.lstrip()
表データから列を3つだけ選択する	df[['列A', '列B', '列C']]
両端キューの先頭に要素を追加する	deq.appendleft(element)
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
配列とリストについて散布図をプロットして左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
データ列を等量でビン数nで分割する	pd.qcut(ds, n)
NaNも加えてデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], dummy_na=True)
タイムスタンプデータををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
パールバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
散布図の星印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ヒストグラムと勾配ブースティングで回帰分析をする	model = sklearn.ensemble.HistGradientBoostingRegressor()
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
散布図に四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
配列のデータ型	aArray.dtype()
データフレームのカラムの欠損値をモードに設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
ファイルを読み込み用に開いて]、fとする	f = open(filepath, mode='r')
二つのデータフレームを異なる列をキーとして左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
ある列の値によってデータフレームをグループ化し、要約統計量を求める	df.groupby('列A').describe()
両端キューをリストに変換する	list(deq)
句読点文字を全部使う	string.punctuation
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
線グラフの色をライトスレイグレーに変更する	plt.plot(データ列x, データ列y, color='lightslategray')
option: スラッシュを分割記号で使う	sep = '/'
グリッドを実線にする	plt.grid(linestyle='solid')
データフレームの一部のカラムの歪みを求める	df[['列A', '列B']].kurt()
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
option: 配列のデータ型を指定する	dtype = np.int
option: 追加モードに設定する	mode = 'a'
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
カラムの尖度	scipy.stats.kurtosis(df['列A'], bias=False)
option: ペールグリーン色を使う	color = 'palegreen'
平均値付き箱髭図を描く	plt.boxplot(データ列, showmeans=True)
両端キューのn番目	deq[n]
データシリーズの中にある日付データの数を数える	ds.isin([value]).sum()
データシリーズが何月か知る	ds.dt.month
列名を指定して二つの表データを右ジョインする	pd.merge(df, df2, on='列A', how='right')
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
集合を空にする	aSet.clear()
実数の小数点以下を丸める	round(x)
nから無限にカウントアップする	itertools.count(start=n)
データフレームを百の位で四捨五入する	df.round(-2)
タプルをインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ヒストグラムをスカイブルー色として描画する	plt.hist(データ列, color='skyblue')
縦棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
カウンタのキーとカウントをリストとして得る	aCounter.items()
エポック秒の列からタイムスタンプ型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
option: ライム色を使う	color = 'lime'
折れ線グラフの色をスノーに指定する	plt.plot(データ列x, データ列y, color='snow')
option: グラフの種類を一点鎖線に変更する	linestyle = 'dashbot'
データ列をインポートする	import pandas as pd
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
ファイルパスをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
option: ミディアムターコイズにフォントの色を設定する	color = 'mediumturquoise'
円プロットにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
データフレームに重複があるか見る	df.duplicated()
数式を数値計算する	float(e)
グラフの色をパステル調にする	sns.set(pallete='pastel')
文字列の左端から空白を除去する	s.lstrip(' ')
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
実数の双曲線余弦の逆数	math.acosh(x)
データフレームの一部のカラムの分散	df[['列A', '列B']].var()
折れ線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列を空白によって区切って、整数リストに変換する	map(int, s.split())
横棒グラフをトマト色として描画する	plt.barh(データ列x, データ列y, color='tomato')
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
集合の濃度	len(aSet)
折れ線グラフの大バツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
nまたはn2	n or n2
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームをある列によってソートして、NaNを先頭にする	df.sort_values(by='列A', na_position='first')
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
横棒グラフをベージュ色として描画する	plt.barh(データ列x, データ列y, color='beige')
option: ダークシアグリーン色を使う	color = 'darkseagreen'
データフレームの選択したカラムの平均値	df[['列A', '列B']].mean()
option: マーカーをバツに指定する	marker = 'x'
nが負の数か調べる	n < 0
カウンタの上位を列挙する	aCounter.most_common(k)
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
辞書のキーに対応した値	aDict.get(key)
集合からエラーなく要素を取り除く	aSet.discard(element)
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
文字列が文字列より辞書順で前か調べる	s < s2
画面用にプロットを設定する	sns.set(context='notebook')
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: 四角印を描画する	marker = 's'
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
xを文字列に変換する	str(x)
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
平均線付き箱ひげ図を描く	plt.boxplot(データ列, meanline=True)
配列をビン数nでビニングして、namesのラベルをつける	pd.cut(aArray, n, labels=names)
部分文字列で文字列を二分する	s.partition(sub)
列をn個に分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームのある列をリストとして抽出する	df['列A'].values.tolist()
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
列名を指定してデータフレームをジョインする	pd.merge(df, df2, on='列A')
ランダム性を強化したランダムフォレストでクラス分類をする	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
データフレームのn行まで抽出する	df[:n]
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
現在の日付時刻	datetime.datetime.now()
マッピングの値を列挙する	aDict.values()
グラフをスライド用に設定する	sns.set(context='talk')
カデットブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
散布図にダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
option: ミッドナイトブルー色を使う	color = 'midnightblue'
option: マーカーを下三角に変える	marker = 'v'
ミディアムバイオレットレッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
部分文字列を文字列の接頭辞から取り除く	s.removeprefix(sub)
文字列中の小文字を大文字に変換する	s.upper()
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
option: パープル色を使う	color = 'purple'
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
▼マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
右三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
凡例を表示する	plt.legend()
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データフレームの一部のカラムの中に日付データと日付データがいくつ存在するかカウントする	df[['列A', '列B']].isin([value, value2]).sum()
クラス分類の真陽性率を算出する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ヒストグラムの色をライトコーラルに指定する	plt.hist(データ列, color='lightcoral')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
箱ヒゲ図でデータ列を図示する	plt.boxplot(データ列)
タプルをn倍する	aTuple * n
リストが空	len(aList) == 0
option: インディゴ色を使う	color = 'indigo'
折れ線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
散布図の菱形マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
グラフの色を明るくする	sns.set(pallete='bright')
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: カデットブルー色を用いる	color = 'cadetblue'
ヒストグラムの色をアクアマリンに変更する	plt.hist(データ列, color='aquamarine')
ミディアムスプリンググリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データフレームの要約統計量	df.describe()
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
散布図の△印を青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
ミッドナイトブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
ライトスチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
日付データは日付データより後ろか調べる	aDate > aDate2
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
棒グラフをブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='brown')
option: マーカーを星に変更する	marker = '*'
カウンタの最も頻出な文字列	aCounter.most_common()[0]
空のリストを作る	[]
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
組をリバースする	reversed(aTuple)
データフレームの一部のカラムの統計量を見る	df[['列A', '列B']].describe()
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
ヒストグラムの色をダークシアンに指定する	plt.hist(データ列, color='darkcyan')
option: レベッカパープル色を使う	color = 'rebeccapurple'
option: NaNを無視する	nan_policy = 'omit'
option: セパレータを使わない	sep = ''
データフレームの指定したカラムの75パーセンタイル	df['列A'].quantile(0.75)
横棒グラフをコーンフラワーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームの列の文字列長を列として使う	df[col].str.len()
タプルをnから順序付けする	enumerate(aTuple, start=n)
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
浮動小数点数の値が整数かどうか調べる	x.is_integer()
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
データフレームの複数の列をドロップしてみる	df.drop(['列A', '列B'], axis=1)
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データ列の折れ線グラフを星印を用いて描画する	plt.plot(データ列x, データ列y, marker='*')
option: ダーク・スラテグレーを使う	color = 'darkslategrey'
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
グラフで使える色名の一覧を使う	matplotlib.colors.cnames
データシリーズの中に文字列と文字列があるか調べる	ds.isin([value, value2])
データフレームの欠損値をxに変更する	df.fillna(x)
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
折れ線グラフの色をサンディーブラウンに変更する	plt.plot(データ列x, データ列y, color='sandybrown')
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
折れ線グラフの左三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ヒストグラムをダークオーキッド色として描画する	plt.hist(データ列, color='darkorchid')
文字列の中の複数行対応として正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.MULTILINE)
タイムスタンプデータをエポック秒に変換する	aDatetime.timestamp()
線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
タプルの先頭を取り除く	aTuple[1:]
インデックスによってデータフレームを降順でソートする	df.sort_index(ascending=False)
線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
option: 色を半透明にする	alpha = 0.5
折れ線グラフに青い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
ロバストな重クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
パレットトルコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
予測値とデータの離れ具合を描画する	sns.residplot(x='列名', y='列名', data=df)
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
散布図の丸マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
ライトゴールドロディイエロー色でヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
折れ線グラフの色をグレーに変更する	plt.plot(データ列x, データ列y, color='gray')
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
クラス分類の予測精度をヒートマップとして見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
文字のASCIIコード	ord(ch)
日付データが火曜日かどうか調べる	aDate.weekday() == 1
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
空白で文字列を区切って、文字列リストに変換する	s.split()
折れ線グラフをミディアムブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumblue')
全印字可能な文字	string.printable
横棒グラフをダークグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgreen')
小数点数を切り上げて整数に変換する	math.ceil(x)
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
option: パールバイオレットレッドを使う	color = 'palevioletred'
データフレームをグループ化し、ある列に対し分散を算出する	df.groupby('列A')['列B'].var()
オブジェクトにプロパティが存在する	hasattr(obj, プロパティ名)
データシリーズの欠損値を直後の値に設定する	ds.fillna(method='bfill')
文字列の開始位置以降が部分文字列で始まるか	s.startswith(sub, start)
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
マッピングから項目名の値	aDict.get(key)
K-S検定を行う	scipy.stats.kstest(df['列A'], 'norm')
両端キューを空にする	deq.clear()
ヒストグラムを一点鎖線を用いて描画する	plt.hist(データ列, linestyle='dashbot')
ゼロ埋めされた配列	np.zeros(要素数)
回帰木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
リストから文字列を取り除く	aList.remove(element)
組の先頭を除く	aTuple[1:]
option: ブランチドアーモンド色を使用する	color = 'blanchedalmond'
ある列のカテゴリごとの標準偏差を算出する	df.groupby('列A').std()
ネイビー色としてヒストグラムを描画する	plt.hist(データ列, color='navy')
縦棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
データシリーズの不偏標準偏差	ds.std()
データフレームの末尾5行を抽出する	df.tail(5)
マッピングの内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
縦棒グラフをオレンジ色を用いて描画する	plt.bar(データ列x, データ列y, color='orange')
横軸だけグリッド線	plt.grid(axis='x')
データフレームの指定したカラムを万の位で丸める	df['列A'].round(-4)
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
rgbの右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
フォーマットでデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
散布図をブラック色として描画する	plt.scatter(データ列x, データ列y, color='black')
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
グリッド線	plt.grid(linestyle='--')
ダークバイオレット色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
配列と数列についての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
偽陰性を抑えたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
縦棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
集合をタプルに変換する	tuple(aSet)
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
データフレームがどの程度、分散しているか見る	df.var()
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
カテゴリデータを連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データフレームを関数によってまとめたグループ	df.groupby(関数)
ある列の文字列が正規表現文字列にマッチしない行を取り出す	df[~df['列A'].str.match(正規表現)]
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
データフレームの指定したカラムを千の位で丸める	df['列A'].round(-3)
プラットホームがMacOS	sys.platform.startswith('darwin')
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
データシリーズの値が欠損値か調べる	ds.isna()
重複していない行のみ	df[~ df.duplicated(keep=False)]
プラットホームの名前を調べる	sys.platform
option: グレーにグラフの色を設定する	color = 'grey'
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
データフレームのあるカラムは何秒か知る	df['列A'].dt.second
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
配列の平均の標準誤差を計算する	scipy.stats.sem(配列)
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
両端キューの先頭に値を追加する	deq.appendleft(element)
ヒストグラムの色をダークオーキッドに指定する	plt.hist(データ列, color='darkorchid')
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
option: 配列のデータ型を指定する	dtype = np.uint8
データフレームの全カラムを散布図でグラフ化する	sns.pairplot(df)
option: シルバー色を使う	color = 'silver'
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
データ列の変遷を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
カテゴリでグループ化して、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
osモジュールをインポートする	import os
プロットを全般的に濃くする	sns.set(pallete='deep')
文字をユニコードにする	ord(ch)
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
散布図の右三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
双方向キューの長さ	len(deq)
現在のタイムスタンプ	int(time.time())
データフレームから列を一つだけ選択する	df[['列A']]
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
リストとリストを連結する	aList + aList2
ヒストグラムをペールグリーン色として描画する	plt.hist(データ列, color='palegreen')
折れ線グラフの色をグリーンイエローに変更する	plt.plot(データ列x, データ列y, color='greenyellow')
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
最適な場所に凡例を表示する	plt.legend(loc='best')
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
リッジ回帰とロッソ回帰のハイブリッド分析を行う	model = sklearn.linear_model.ElasticNet()
データシリーズがどの程度、分散しているか見る	ds.var()
文字列がタプルに含まれないか調べる	element not in aTuple
t-SNEを行う	model = sklearn.manifold.TSNE(n_components=n)
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームを縦方向に結合する	pd.concat([df, df2], axis=0)
カテゴリデータを連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
日付時刻データが何秒か知る	aDatetime.second
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
配列と配列についての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
アンサンブル学習を用いて回帰分析を行う	sklearn.ensemble.VotingRegressor()
option: ダークオレンジ色を使う	color = 'darkorange'
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
星印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
option: 読み込まないフッタをnに設定する	skipfooter = n
単位正方行列を作る	np.identity(n)
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
文字列を最後の部分文字列で二つに区切って後半の文字列を見る	s.rpartition(sub)[-1]
文字列の最初から不要な空白を取り除く	s.lstrip()
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
option: フォントの色をインディアンレッドに変更する	color = 'indianred'
option: マーカーを丸に設定する	marker = 'o'
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
折れ線グラフのダイアモンド印の色を変える	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
option: 色をダークオレンジに設定する	color = 'darkorange'
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
実数を文字列に変換する	str(x)
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
データフレームのひとつの列を説明変数にする	説明変数 = df[['列名']]
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
配列を2次元1行に変形する	aArray.reshape(1, -1)
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
データフレームの指定したカラムのどの値が最も出現するか確認する	df['列A'].mode()
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
リストの全値を消去する	aList.clear()
イテラブルの集合	set(iterable)
ひとつでも数字が文字列内に含まれるか調べる	any(c.isdigit() for c in s)
文字列を全て大文字にする	s.upper()
散布図にダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
エポック秒のデータ列からタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
集合に要素を追加する	aSet.add(element)
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
本日の年数	datetime.datetime.today().year
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームの選択した列の欠損値を最大値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
配列の次元数	aArray.ndim
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
グラフをデフォルトでいい感じに変更する	sns.set()
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
ヒストグラムをやわらかい青色で描画する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
プログラムの実行を正しく終了する	sys.exit(0)
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
文字列を部分文字列で分けたときの後半の文字列を見る	s.partition(sub)[-1]
rgbの四角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
データフレームの選択したカラムの最頻値	df[['列A', '列B']].mode()
新しい文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub)
データフレームを二つの列によって昇順に破壊的に並べる	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
データを四分位点でスケーリングする	sklearn.preprocessing.RobustScaler().fit_transform(データ)
文字列からISO書式として日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategray')
データフレームの中の列を四分位数ごとにビニングする	pd.qcut(df[col], 4)
色名とカラーコードの対応表を見る	matplotlib.colors.cnames
データシリーズの月	ds.dt.month
グラフの見栄えを良くする	import seaborn as sns
十六進文字列をバイナリに変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
線形モデルの切片	model.intercept_
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
データフレームの指定したカラムの欠損値を直後の値に設定する	df['列A'].fillna(method='bfill')
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
データフレームの選択した列の欠損値を最小値に変更する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
二次元タプルをフラット化する	sum(aTuple)
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
option: グラフの色をライトスチールブルーに指定する	color = 'lightsteelblue'
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
折れ線グラフに右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
縦棒グラフをバリーウッド色として描画する	plt.bar(データ列x, データ列y, color='burlywood')
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
数式を微分する	sympy.diff(e)
乱数シードをnで初期化する	random.seed(n)
円プロットの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
行列の逆行列	np.linalg.inv(aArray)
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
標準入力から1行だけ改行を除いて読む	sys.stdin.readline().rstrip()
双方向キューのn番目の要素	deq[n]
横棒グラフの色をダークブルーにする	plt.barh(データ列x, データ列y, color='darkblue')
データフレームが重複しているか調べる	df.duplicated()
ヒストグラムの線の種類を実線に指定する	plt.hist(データ列, linestyle='solid')
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
行列の列ごとの最小値	np.min(aArray, axis=0)
データ列からユニークな値を抽出しリスト化する	ds.unique().tolist()
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: スチールブルー色を使う	color = 'steelblue'
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
マッピングのキーと値を入れ替える	{v: k for k, v in aDict.items()}
データフレームの列の値は欠損値か調べる	df['列A'].isna()
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
パステル調にカラーパレットをグラフの描画で使用する	sns.set(pallete='pastel')
列をセットに変換する	set(iterable)
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
配列を等しい量になるようにn個に分割する	pd.qcut(aArray, n)
option: 印を左三角に変更する	marker = '<'
外れ値を除いた配列の分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
タプルを引数として展開して表示する	print(*aTuple)
グレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='grey')
カウンタのボトムを列挙する	aCounter.most_common()[:-n-1:-1]
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
ミディアムブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
日付時刻データが土曜日	aDatetime.weekday() == 5
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
nが1、もしくは2、もしくは3に等しいか判定する	n == 1 or n == 2 or n == 3
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
日付時刻データの時間数	aDatetime.hour
再帰の最大回数を上げる	sys.setrecursionlimit(1000000)
データフレームをグループ化し、ある列に対し分散を計算する	df.groupby('列A')['列B'].var()
散布図をホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='white')
散布図をライトサーモン色として描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
枠なしのデータラベルを入れる	plt.legend(frameon=False)
柱状グラフを描画する	plt.hist(データ列)
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
リストを境界値としてデータ列をビン分割する	pd.cut(ds, aList)
リストの合計値を求める	sum(aList)
データシリーズの欠損値を平均値で補う	ds.fillna(ds.mean())
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
マッピングをカウンタに変換する	collections.Counter(aDict)
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
データフレームの列の名前を変更する	df.rename(columns={'列A': '列a', '列B': '列b'})
ヒストグラムを青紫色を用いて描画する	plt.hist(データ列, color='violet')
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
リストのn番目に文字列を差し込む	aList.insert(n, element)
両端キューの先頭から要素を取り除く	deq.popleft()
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
文字列の先頭で正規表現にASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
ブランチドアーモンド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
二つの文字列は等しくないか調べる	s != s2
グラフにx=0の破線を設定する	plt.axvline(x=0, linestyle='dashed')
データフレームをカンマ区切り形式で保存する	df.to_csv('file.csv')
ヒストグラムの色をレモンシフォンに指定する	plt.hist(データ列, color='lemonchiffon')
日付時刻データの秒	aDatetime.second
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ベクトルが何のデータ型か調べる	aArray.dtype()
データフレームの中である列に重複があれば、取り除く	df.drop_duplicates(subset='列A', inplace=True)
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
散布図をグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='gray')
データフレームの行の一覧	df.index
データフレームから散布図を作り線形回帰を加える	sns.regplot(data=df, x='列名', y='列名')
スチールブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
ドジャーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='dodgerblue')
ブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
データフレームの列を型にする	df[col] = df[col].astype(ty)
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
option: ハニーデュー色を使う	color = 'honeydew'
option: 読み込みモードを用いる	mode = 'r'
整数nの8進文字列を使う	oct(n)[2:]
ファイルパスの拡張子付きのファイル名	os.path.basename(filepath)
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
データシリーズの中に日付データと文字列がいくつあるか数える	ds.isin([value, value2]).sum()
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
データシリーズの中にいくつ文字列があるか数える	ds.isin([value]).sum()
文字列全体がパターンにケースを無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
データフレームの中に文字列とがいくつあるか調べる	df.isin([value, value2]).sum()
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
要素ひとつのりスト	[element]
折れ線グラフの左三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
データフレームをCSVファイルにインデックスを付けず保存する	df.to_csv('file.csv', index=None)
タプルの合計値を計算する	sum(aTuple)
折れ線グラフのマーカーを上三角印にする	plt.plot(データ列x, データ列y, marker='^')
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
あるカラムの文字列をNaNに変換する	df['列A'].replace(値, np.nan)
option: 配列のデータ型を指定する	dtype = np.int16
option: 三角マーカーを使う	marker = '^'
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
データフレームの選択したカラムの中の欠損値の合計を数える	df[['列A', '列B']].isna().sum()
Pandasの日付型のデータフレームのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
日付データをISO形式の文字列にする	aDate.isoformat()
タプルをn回、結合する	aTuple * n
連立方程式の解を求める	sympy.solve([e, e2])
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
データフレームの指定したカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
棒グラフをアイボリー色を用いて描画する	plt.bar(データ列x, データ列y, color='ivory')
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
グリッドの線スタイルを破線に変更する	plt.grid(linestyle='dashed')
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
データフレームの指定したカラムの尖度	df['列A'].skew()
'A'列の値がxに等しい行を取り出す	df[df['列A'] == x]
nとn2の論理積	n & n2
データフレームの一部の列の相関行列をピアソンで求める	df[['列A', '列B']].corr(method='pearson')
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
縦棒グラフをミディアムターコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
ファイルを全部、読み込む	f.read()
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: ホワイトスモークにグラフの色を指定する	color = 'whitesmoke'
データフレームのあるカラムが何日か見る	df['列A'].dt.day
ヒストグラムの色をコーンフラワーブルーに変更する	plt.hist(データ列, color='cornflowerblue')
赤い一点鎖線を用いて線を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
文字列中に部分文字列が含まれないか調べる	sub not in s
タプルのコピーを作る	dict(aDict)
タイムスタンプデータにn時間分、加える	aDatetime + datetime.timedelta(hours=n)
option: グラフの色をライトグレーに指定する	color = 'lightgrey'
スーパーセットもしくは等しいか	aSet > aSet2
データシリーズは何年か見る	ds.dt.year
ダークマゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
標準入力から1文字だけ読む	sys.stdin.read(1)
データフレームをグループ化しそれぞれの分散を求める	df.groupby('列A').var()
範囲を指定して部分文字列を文字列の末尾から探す	s.find(sub, start, end)
縦棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
辞書の項目数	len(aDict)
データフレームのカラムを並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
option: 最初のカラムをインデックスに設定する	index_col = 0
等差数列から乱数を生成する	random.randrange(start, end, step)
円周率	math.pi
未定値	None
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
データフレームのカラムの偏差値を求める	50 + 10 * scipy.stats.zscore(df['列A'])
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
データ列を閾値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
散布図を右三角印を使って描画する	plt.scatter(データ列x, データ列y, marker='>')
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
rgbのバツマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x', c=rgb)
現在をタプルに変換する	datetime.datetime.today().timetuple()
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームの分位数	df.quantile(パーセント/100)
option: ダークグレー色を使用する	color = 'darkgrey'
色付きの実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
データシリーズのNaNを平均値で置換する	ds.fillna(ds.mean())
nマイナスn2	n - n2
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
文字列のケースを逆にする	s.swapcase()
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
散布図を紺碧色として描画する	plt.scatter(データ列x, データ列y, color='azure')
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
グラフの描画で明るく色を用いる	sns.set(pallete='bright')
option: 配列のデータ型を指定する	dtype = np.int32
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
読み込みモードでファイルをオープンする]	open(filepath, mode='r')
折れ線グラフのマーカーを右三角印にする	plt.plot(データ列x, データ列y, marker='>')
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
集合＼セット	aSet.difference(aSet2)
option: 星マーカーを使う	marker = '*'
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
ベクトルの列ごとの合計を計算する	np.sum(aArray, axis=0)
散布図のダイアモンド印を青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
ヒストグラムの色をミディアムオーキッドに変更する	plt.hist(データ列, color='mediumorchid')
散布図の△マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
リストとリストの散布図を描画して、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
文字列は片仮名か確認する	('ァ' <= ch <= 'ン')
ファイルを書き込み用にUTF8でオープンする]	open(filepath, mode='w', encoding='utf-8')
棒グラフをダークレッド色で描画する	plt.bar(データ列x, データ列y, color='darkred')
エポック秒の列から日付データにする	pd.to_datetime(df['列A'], unit='s', utc=True)
折れ線グラフに黒い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
aListn番目から要素をポップする	aList.pop(n)
異なる列をキーとして二つのデータフレームを右ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
実数を複素数に変換する	complex(x)
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
リストをダミー変数に変換する	pd.get_dummies(リスト)
option: オーキッド色を用いる	color = 'orchid'
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
option: フォントの色をオレンジレッドに変更する	color = 'orangered'
option: カラム名をリストで設定する	names = 列名リスト
タプルの末尾	aTuple[-1]
リストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
青緑色でヒストグラムを描画する	plt.hist(データ列, color='turquoise')
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
日付時刻データは何分か知る	aDatetime.minute
ホットピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
印字可能な文字列	ascii(x)
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
リストが空でないか調べる	len(aList) != 0
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
ファイルをEUCとしてオープンする]	open(filepath, encoding='euc_jp')
縦棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
option: ダークシアン色を用いる	color = 'darkcyan'
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
折れ線グラフをプロットする	plt.plot(データ列x, データ列y)
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
集合に列の要素を追加する	aSet.update(iterable)
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
棒グラフをサドルブラウン色として描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
濃い青にヒストグラムの色を変更する	plt.hist(データ列, color='darkblue')
青い一点鎖線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図に四角印を用いる	plt.scatter(データ列x, データ列y, marker='s')
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
散布図の丸印を赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
データフレームの第三四分位数	df.quantile(0.75)
指定した列のみ、データフレームの重複を調べる	df.duplicated(subset='列A')
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
青い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
要素を両端キューにプッシュする	deq.append(element)
空のチェーンマップ	collections.ChainMap()
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
黄色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
option: ローングリーン色を使う	color = 'lawngreen'
線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
散布図をカデットブルー色として描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
option: バツ印を描画する	marker = 'x'
データフレームをグループ化し、それぞれの個数を計算する	df.groupby('列A').count()
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
最大長を指定して、キューを作る	collections.deque(maxlen=n)
線グラフを一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
ある列によってデータフレームをグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
クラス分類をバギングを用いて行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
データフレームをインデックスで昇順にソートする	df.sort_index(ascending=True)
部分文字列で文字列を分割し、、文字列リストに変換する	s.split(sub)
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
折れ線グラフに大バツ印を使用する	plt.plot(データ列x, データ列y, marker='X')
データフレームを２つの列によって降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
赤いグリッド線を引く	plt.grid(color='r')
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
指定した列のカテゴリで集計し、それぞれの標準偏差を求める	df.groupby('列A').std()
イテラブルを文字列リストに変換して'改行によって連結する	'\n'.join(map(str, iterable))
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
option: グラフの色を貝殻に設定する	color = 'seashell'
option: フォントの色をバリーウッドに設定する	color = 'burlywood'
紺色でヒストグラムを描画する	plt.hist(データ列, color='darkblue')
整数nを半分にする	n //= 2
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
文字列がリストに含まれないか調べる	element not in aList
ヒストグラムをチョコレート色を用いて描画する	plt.hist(データ列, color='chocolate')
大文字列	string.ascii_uppercase
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
配列とリストの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
改行なしに２つの変数をプリントする	print(value, value2, end='')
データフレームのインデックスの名前をまとめて付け直す	df.rename(index={x: y})
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
データフレームの指定したカラムの欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
option: ダークグリーンを用いる	color = 'darkgreen'
データフレームの一部のカラムの未入力値を平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
全ての空白文字	string.whitespace
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームを２つの列によって並べ直して、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
ミディアムアクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
実数の正弦	math.sin(x)
データフレームのカラムの尖り	scipy.stats.kurtosis(df['列A'], bias=False)
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
横棒グラフをペルー色として描画する	plt.barh(データ列x, データ列y, color='peru')
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ライトブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
データフレームの相関行列をで算出する	df.corr(method='kendall')
xが一桁の数か調べる	-9 <= x <= 9
option: ▲マーカーを描画する	marker = '^'
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
二つのデータフレームを縦方向に結合する	pd.concat([df, df2], axis=0)
option: インディアンレッド色を使う	color = 'indianred'
ファイルにxを文字列に変換して書き込む	f.write(str(x))
option: ダークオーキッド色を用いる	color = 'darkorchid'
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
データフレームの指定したデータ型の列名を列挙する	df.select_dtypes(型).columns
nをn2でわる	n / n2
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
ブランチドアーモンド色を使ってヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
入力から二つの浮動小数数を読む	A, B = map(float, input().split())
ヒストグラムを破線で描く	plt.hist(データ列, linestyle='dashed')
日付データが日付データと同時か調べる	aDate == aDate2
ガウス過程でクラス分類をする	model = sklearn.gaussian_process.GaussianProcessClassifier()
nが2で割り切れるか調べる	n % 2 == 0
棒グラフをライトスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
配列の合計値	np.sum(aArray)
nが3の倍数か調べる	n % 3 == 0
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
2つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
ヒストグラムを点線で描く	plt.hist(データ列, linestyle='dotted')
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
データフレームのある列をダミー変数にする	pd.get_dummies(df['列A'])
nをn2で割った余りを求める	n % n2
今日の月	datetime.datetime.today().month
縦棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
折れ線グラフの色をフォレストグリーンに指定する	plt.plot(データ列x, データ列y, color='forestgreen')
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
データフレームの指定したカラムの中に文字列と日付データがいくつあるか数える	df['列A'].isin([value, value2]).sum()
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
散布図を青緑色として描画する	plt.scatter(データ列x, データ列y, color='teal')
列名を指定して二つのデータフレームを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
イテラブルとリストについて散布図をプロットして三角マーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストと数列について散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データシリーズのNaNを最大値に指定する	ds.fillna(ds.max())
文字列が全て数値か確認する	s.isnumeric()
option: コーンズシルク色を使う	color = 'cornsilk'
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
縦棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
リストとイテラブルをペア化する	itertools.zip_longest(iterable, iterable2)
コーンズシルク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
カラムの標準誤差を計算する	scipy.stats.sem(df['列A'])
黒い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
文字列をパターンで区切る	re.split(pattern, s)
K最近傍法で回帰分析をする	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
データフレームの選択したカラムの欠損値を最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
データフレームの列の名前一覧で指定した列をドロップする	df.drop(columns, axis=1, inplace=True)
十六進文字列を整数に変換する	int(s, 16)
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
nが一桁の数	-9 <= n <= 9
リストとリストについて散布図を描き、、バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
配列と配列についての散布図にクロスマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
実数を整数にする	int(x)
文字列リストにイテラブルを変換して、タブで連結する	'\t'.join(map(str, iterable))
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
データフレームの先頭の列以外を説明変数にする	説明変数 = df[df.columns[1:]]
データフレームの中の列を等量でn個に分割する	pd.qcut(df[col], n)
横棒グラフを暗い赤色として描画する	plt.barh(データ列x, データ列y, color='darkred')
散布図の四角印の大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
上限から下限までの区間でヒストグラムを描画する	plt.hist(データ列, range=(start, end))
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
散布図をラベンダーブラッシュ色として描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
実数のアークタンジェントを算出する	math.atan(x)
棒グラフをレベッカパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
データシリーズのNaNを最頻値で補完する	ds.fillna(ds.mode().iloc[0])
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
棒グラフをスラグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='slategray')
データフレームの歪度	df.kurt()
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
オブジェクトがリストに含まれる	element in aList
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
タプルを引数として展開してプリントする	print(*aTuple, sep=',')
文字列を文字コード列にする	[ord(ch) for ch in s]
線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
データフレームのあるカラムの時	df['列A'].dt.hour
符号なし８ビット整数型の全要素を０で初期化した行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
データフレームの選択したカラムを四捨五入する	df[['列A', '列B']].round()
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
列の長さnの順列を得る	itertools.permutations(iterable, n)
配列が正規分布に従うか調べる	scipy.stats.shapiro(配列)
コロンで文字列を区切って列挙する	s.split(':')
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
ヒストグラムをラベンダーブラッシュ色を用いて描画する	plt.hist(データ列, color='lavenderblush')
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
データフレームをグループ化し、それぞれの個数を求める	df.groupby('列A').count()
year年month月day日hour時minute分を日付時刻にする	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
データシリーズの要約統計量を算出する	ds.describe()
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
nにn2を加える	n + n2
データフレームのある列をドロップしてみる	df.drop('列A', axis=1)
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
データフレームをグループ化し、あるカラムに対し合計を求める	df.groupby('列A')['列B'].sum()
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
変数を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
リストに文字列を追加する	aList.append(element)
カラムの最頻値を算出する	mode, count = scipy.stats.mode(df['列A'])
データシリーズのNaNを直前の値に設定する	ds.fillna(method='ffill')
疑似乱数平均と標準偏差からを求める	random.normalvariate(mu=0.5, sigma=0.2)
option: ライトブルー色を使う	color = 'lightblue'
既存のファイルを文字コードtextで追加できるように開く]	open(filepath, mode='a', encoding=text)
文字列が部分文字列で終わるか調べる	s.endswith(sub)
双方向キューのn番目	deq[n]
折れ線グラフの色をネイビーに指定する	plt.plot(データ列x, データ列y, color='navy')
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
文字列を部分文字列で二分し最初の文字列を使う	s.partition(sub)[0]
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
データフレームのn行目を抽出する	df.loc[n]
ダークスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
ヒストグラムをライトスカイブルー色として描画する	plt.hist(データ列, color='lightskyblue')
ヒストグラムをライトゴールドロディイエロー色として描画する	plt.hist(データ列, color='lightgoldenrodyellow')
rgbの四角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
オーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='orchid')
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
データフレームを転置する	df.T
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
縦棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
配列をビン数nを用いてビニングする	pd.cut(aArray, n)
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームの中に含まれる日付データとの合計をカウントする	df.isin([value, value2]).sum()
option: ロージーブラウン色を使う	color = 'rosybrown'
シーグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
タプルの値を列挙する	aDict.values()
カウンタを集合に変換する	set(aCounter)
折れ線グラフの菱形マーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ヒストグラムをスプリンググリーン色として描画する	plt.hist(データ列, color='springgreen')
青い一点鎖線でリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
グリッド線	plt.grid(linewidth=3.0)
散布図をリネン色を用いて描画する	plt.scatter(データ列x, データ列y, color='linen')
アルファベットの小文字列	string.ascii_lowercase
エクセルファイルのシートをデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
データフレームの欠損値を最頻値で補う	df.fillna(df.mode().iloc[0])
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
グラフの描画で淡くカラーパレットを使用する	sns.set(pallete='muted')
青いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
データフレームを関数の値によってグループ化する	df.groupby(関数)
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
データシリーズの欠損値を直前の値に設定する	ds.fillna(method='ffill')
データフレームをグループ化し、ある列の要約統計量を求める	df.groupby('列A').describe()['列B']
デフォルトのエンコーディング	sys.getdefaultencoding()
JSONL形式のファイルからデータフレームをロードする	pd.read_json(filename, orient='records', lines=True)
データ列とデータ列についての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームのあるカラムの欠損値を最頻値に指定する	df['列A'].fillna(df['列A'].mode().iloc[0])
option: グラフの種類を実線に設定する	linestyle = 'solid'
データフレームのカラムの調和平均を算出する	scipy.stats.hmean(df['列A'])
カウンタをセットに変換する	set(aCounter)
option: シエナにグラフの色を設定する	color = 'sienna'
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
データフレームを配列にする	df.values
線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
配列のユニークな値を要素とする行列を見る	np.unique(aArray)
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
データフレームの選択したカラムの未入力値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
オプションで、標準出力に出力する	file = sys.stdout
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
浮動小数点数に実数を足す	x + y
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
ヒストグラムの色をインディアンレッドにセットする	plt.hist(データ列, color='indianred')
配列の要素ごとに加算する	aArray + aArray2
縦棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
文字列を下線付きにする	f'\033[4m{value}\033[0m'
option: ポイントマーカーを描画する	marker = '.'
option: バイナリ用に設定する	mode = 'rb'
ヒストグラムを三つ並べてプロットする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
グループ化してデータフレームの散布図を横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
グラフの用途をポスターに設定する	sns.set(context='poster')
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
イテラブルのコンビネーション	itertools.combinations(iterable, n)
文字列内にひとつでも数字が含まれるかどうか	any(c.isdigit() for c in s)
本日が土曜日かどうか調べる	datetime.datetime.today().weekday() == 5
キーが辞書に存在するか調べる	key in aDict
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
新しいガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
最初のカテゴリーを除外してデータフレームのある列をダミー変数にする	pd.get_dummies(df['列A'], drop_first=True)
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
印字可能な文字を全部使う	string.printable
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
JSON形式の文字列を辞書にする	json.loads(jsonString)
列のNaNを平均値に変更する	df['列A'].fillna(df['列A'].mean())
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
キーで指定された項目をマッピングからポップする	aDict.pop(key)
辞書の全項目をクリアする	aDict.clear()
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ライトグリーン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
データフレームの指定したカラムの歪度	df['列A'].kurt()
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
標準入力から改行を取り除いて1行分読む	sys.stdin.readline().rstrip()
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
イテラブルとリストについて散布図を描画して丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
データフレームの選択したカラムの中央値	df[['列A', '列B']].median()
グラフの縦横の比率を等しくする	plt.axis('equals')
ベクトルの次元を変形する	aArray.reshape(行数, 列数)
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
小麦色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
option: ミスティローズにフォントの色を変更する	color = 'mistyrose'
rgbのポイントマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフの色をパープルに変更する	plt.plot(データ列x, データ列y, color='purple')
ヒートマップを用いてクラス分類の偽陽性を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
データフレームの選択したカラムの欠損値を中央値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
データフレームの最初10行	df.head(10)
option: 丸マーカーを描画する	marker = 'o'
文字列中から部分文字列を探す	s.find(sub)
ある列の値でデータフレームをグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
行列の行ごとの最小値	np.min(aArray, axis=1)
データフレームの選択したカラムの第一四分位数を計算する	df[['列A', '列B']].quantile(0.25)
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
データフレームの相関行列をヒートマップを用いて可視化する	sns.heatmap(df.corr())
データフレームの選択した列の不偏分散	df[['列A', '列B']].var(ddof=1)
2つのデータフレームを横向きに結合する	pd.concat([df, df2], axis=1)
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
option: 改行しないように設定する	end = ''
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
option: フォントの色をライトシアンに指定する	color = 'lightcyan'
重複した行のみ	df[df.duplicated(keep=False)]
整数nの二進数文字列	bin(n)[2:]
データフレームのあるカラムをdatetime64型に変換し、表データのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
既存の配列をベースにして全要素が1の配列	np.ones_like(aArray)
配列の累積和	np.cumsum(aArray)
ラインを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
折れ線グラフをダークサーモン色として描画する	plt.plot(データ列x, データ列y, color='darksalmon')
データシリーズを百の位で丸める	ds.round(-2)
青い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
横棒グラフを描画する	plt.barh(ラベル列, データ列)
折れ線グラフを青い実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームをCSV形式にSJISで出力する	df.to_csv('file.csv', encoding='shift_jis')
オプションで、標準出力を使う	file = sys.stdout
データフレームのある列を抽出する	df['列A']
option: グラフの色をディムグレーに変更する	color = 'dimgrey'
データシリーズが何分か知る	ds.dt.minute
実数のn乗して実数による余り	pow(x, n, y)
フクシア色で散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
option: グラフの色を淡いピンク色に指定する	color = 'lightpink'
リストの最後を取り除く	aList[:-1]
棒グラフをライトスチールブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
option: 改行コードをWindowsにセットする	newline = '\r\n'
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
option: 色をイエローグリーンに設定する	color = 'yellowgreen'
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
セットに配列を追加更新する	aSet.update(iterable)
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
デピンク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
nがn2より大きいか調べる	n > n2
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
試しに何か動かす	print('Hello World')
データフレームのカラムの各データ値の出現数	df[col].value_counts()
データフレームをある列によって昇順に破壊的にソートする	df.sort_values(by='列A', ascending=True, inplace=True)
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
長さが一致しない版のzip	itertools.zip_longest(iterable, iterable2)
棒グラフの色をダークレッドにする	plt.bar(データ列x, データ列y, color='darkred')
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
文字列をシアン化する	f'\033[36m{value}\033[0m'
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
折れ線グラフに菱形マーカーを加える	plt.plot(データ列x, データ列y, marker='D')
配列とリストの散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データシリーズの欠損値を平均値に設定する	ds.fillna(ds.mean())
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
ダークオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkorchid')
行列の形状を変形する	aArray.reshape(行数, 列数)
option: グラフの色をターコイズに設定する	color = 'turquoise'
ミディアムパープル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
option: グラフの色をオレンジレッドに変更する	color = 'orangered'
ガウス過程としてクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
行列の標準偏差	np.std(aArray)
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
option: マーカーを△に変更する	marker = '^'
リストと配列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
辞書から最後の項目をポップする	aDict.popitem()
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
デピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
データ列の推移を青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
縦軸の目盛りに文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
カテゴリごとにデータフレームの棒グラフを縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
データシリーズの未入力値を中央値に設定する	ds.fillna(ds.median())
赤い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
option: ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
棒グラフの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
タイムスタンプデータからn分、減らす	aDatetime - datetime.timedelta(minutes=n)
データフレームをグループ化し、ある列に対し最小値を求める	df.groupby('列A')['列B'].min()
表データのあるカラムの月	df['列A'].dt.month
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
2つの列によって昇順にデータフレームをソートする	df.sort_values(by=['列A', '列B'], ascending=True)
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
option: 色の透明度を設定する	alpha = 0.5
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
オールドレース色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
配列を等量でビン数nでビニングする	pd.qcut(aArray, n)
option: 欠損値を含めない	dropna = True
トマト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
ヒストグラムをブルーバイオレット色として描画する	plt.hist(データ列, color='blueviolet')
データフレームのある列を取り出す	df['列A']
データフレームのカラムの調和平均を求める	scipy.stats.hmean(df['列A'])
サンディーブラウン色としてヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
単位正方行列	np.identity(n)
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
nの二乗を計算する	n ** 2
二点間のユークリッド距離	math.dist(point, point2)
option: 区切りをコロンにする	sep = ':'
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
エポック秒の列から日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
オブジェクトにプロパティがある	hasattr(obj, プロパティ名)
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
文字列がタプルの要素でないかどうか調べる	element not in aTuple
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
指定したカラムの中にある文字列と文字列の個数をカウントする	df['列A'].isin([value, value2]).sum()
横軸を対数目盛に変更する	plt.xscale('log')
縦棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
nをn2だけ増やす	n += n2
option: シエナを使う	color = 'sienna'
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
option: グラフの色を暗い赤に設定する	color = 'darkred'
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
ファイルパスのファイル名	os.path.basename(filepath)
線グラフをダークスラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategray')
標準出力を得る	sys.stdout
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
配列の最頻値	mode, count = scipy.stats.mode(配列)
二つのオブジェクトは同じ参照か調べる	obj is obj2
オレンジレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
異なる列をキーとしてデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
データシリーズが何年か見る	ds.dt.year
辞書をソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
option: 貝殻色を使う	color = 'seashell'
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
データシリーズの欠損値を中央値に設定する	ds.fillna(ds.median())
グリッド線	plt.grid(alpha=0.5)
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
ファイルからn文字、読み込む	f.read(n)
データフレームの選択したカラムを百の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
データフレームの選択した列の相関行列	df[['列A', '列B']].corr()
横向きに二つのデータフレームを結合する	pd.concat([df, df2], axis=1)
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
ヒストグラムをコーンズシルク色を使って描画する	plt.hist(データ列, color='cornsilk')
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
option: パパイヤウィップ色を使う	color = 'papayawhip'
option: パープルにグラフの色を設定する	color = 'purple'
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
縦棒グラフの色を淡い茶色にする	plt.bar(データ列x, データ列y, color='tan')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
データフレームの指定したカラムがどの程度、分散しているか見る	df['列A'].var()
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ヒストグラムの色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
option: グラフの色を紺碧に設定する	color = 'azure'
リストの要素を昇順に並べ直す	sorted(aList, reverse=False)
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
nを否定する	not n
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
リストとリストについて散布図を描画して、マーカーを下三角に指定する	plt.plot(データ列x, データ列y, marker='v')
カウンタの項目のカウント	aCounter[element]
無限大	math.inf
集合から要素を取り除く	aSet.remove(element)
データシリーズを小数点以下n桁で丸める	ds.round(n)
データフレームを列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
赤い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
データフレームを二つの列によってグループ化し、要約統計量を求める	df.groupby(['列A', '列B']).describe()
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
nプラスn2	n + n2
option: 大バツマーカーを加える	marker = 'X'
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
全要素を初期値で初期化した行列	np.full(要素数, 初期値, dtype=np.int)
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
ヒストグラムの描いて、正規化する	plt.hist(データ列, density=True)
切り捨てながらnをn2分の１にする	n //= n2
データフレームのあるカラムが何曜日か知る	df['列A'].dt.weekday_name
ゼロ埋めされた符号なし８ビット整数型の配列を作成する	np.zeros(要素数, dtype=np.uint8)
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
option: 追加用に設定する	mode = 'a'
ファイルからファイル名を使う	os.path.basename(filepath)
option: 色をライトシアンに設定する	color = 'lightcyan'
option: エラーを無視するように設定する	errors = 'ignore'
正規分布の累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
year年を日付にする	datetime.date(year=year, month=1, day=1)
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
散布図をrgbの四角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
散布図に赤い右三角印を描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
何回まで再帰ができるかを	sys.getrecursionlimit()
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ミディアムアクアマリン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
イテラブルを両端キューに変換する	collections.deque(iterable)
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
改行	'\n'
文字列を小文字に変換する	s.casefold()
折れ線グラフをライトスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
縦棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
タプルの要素をソートする	sorted(aTuple)
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
配列のSkewnessを算出する	scipy.stats.skew(配列, bias=False)
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
集合から要素を全て取り除く	aSet.clear()
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
ファイルをBOM付きで書き込み用に開く]	open(filepath, mode='w', encoding='utf_8_sig')
散布図を赤い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ふたつの列を組み合わせてグループ化し合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
整数nの八進表記	oct(n)
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
データフレームをグループ化し最小値を求める	df.groupby('列A').min()
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
option: グラフの色をミントクリームに設定する	color = 'mintcream'
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
option: グラフの色をシスルに設定する	color = 'thistle'
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
実数が有限か調べる	math.isfinite(x)
ブルーバイオレット色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
外れ値を除いた配列の算術平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
折れ線グラフをオーキッド色として描画する	plt.plot(データ列x, データ列y, color='orchid')
option: ゴールド色を使う	color = 'gold'
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
二変数の最大値	max(x, y)
データフレームの列をヒストグラムを用いて描く	plt.hist(df[column])
赤い大バツマーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
option: ８ビット整数型を使用する	dtype = np.int8
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
データ列をカテゴリデータに変換する	ds.astype(object)
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
赤い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
縦棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
自然数のGCD	math.gcd(n, n2)
リストの先頭のn要素を捨てる	aList[n:]
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
最大値・最小値の範囲で一様な疑似乱数を得る	random.uniform(最小値, 最大値)
日付時刻データが日付時刻データより前かどうか調べる	aDatetime < aDatetime2
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
実数の逆正接	math.atan(x)
文字列の中の正規表現による全マッチを使う	re.findall(pattern, s)
淡い茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
option: グラフの色をタンに設定する	color = 'tan'
option: グラフの色をアイボリーに設定する	color = 'ivory'
縦棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
横棒グラフを青緑色として描画する	plt.barh(データ列x, データ列y, color='turquoise')
option: サーモンにグラフの色を指定する	color = 'salmon'
ローングリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
散布図に黒いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
リストを複製する	aList.copy()
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
全部データフレームのカラムの値をValueMapで置換する	df['列A'].replace(ValueMap)
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
データフレームの指定したカラムの要約統計量	df['列A'].describe()
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
nが偶数か確認する	n % 2 == 0
グラフの用途をスライドに設定する	sns.set(context='talk')
横棒グラフをシエナ色として描画する	plt.barh(データ列x, データ列y, color='sienna')
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
文字列が平仮名かどうか	('ぁ' <= ch <= 'ん')
ティール色のヒストグラムを描画する	plt.hist(データ列, color='teal')
データフレームから指定した二列を取り出す	df[['列A', '列B']]
ヒストグラムの色をティールに設定する	plt.hist(データ列, color='teal')
横棒グラフをハニーデュー色として描画する	plt.barh(データ列x, データ列y, color='honeydew')
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームをある列で小さい順に並べて、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
リストの文字列が最初に見つかるインデックス	aList.index(element)
シルバー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
サポートベクターマシンでクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
配列の尖度	scipy.stats.kurtosis(配列, bias=False)
データフレームの選択した列が正規分布からどの程度歪んでいるか見る	df[['列A', '列B']].kurt()
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
データフレームの選択したカラムを10の位で四捨五入する	df[['列A', '列B']].round(-1)
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
データフレームの選択したカラムのNaNをメディアンに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
セパレータで文字列を分割して、文字列リストにする	s.split(sep)
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
タプルを順序付けする	enumerate(aTuple)
ミントクリームにヒストグラムの色を設定する	plt.hist(データ列, color='mintcream')
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
データフレームから重複ありでランダムに10行をサンプリングする	df.sample(10, replace=True)
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
等間隔でデータフレームの中の列をn個にビンニングする	pd.cut(df[col], n)
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
散布図をダークスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
ある列の文字列が正規表現にマッチするデータを抽出する	df[df['列A'].str.match(正規表現)]
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
option: グラフの色をライムグリーンに変更する	color = 'limegreen'
データシリーズの標本分散	ds.var(ddof=0)
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
option: グラフの色をネイビーに指定する	color = 'navy'
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
文字列を隔離する	sys.intern(s)
複素数型のゼロ埋めされた配列を作る	np.zeros(要素数, dtype=bool)
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
文字列は全て十進数字か調べる	s.isdecimal()
リストを度数分布図にする	plt.hist(データ列)
リストを縦棒グラフにする	plt.bar(ラベル列, データ列)
イテラブルを多重集合に変換する	collections.Counter(iterable)
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
文字列を最後の部分文字列で分けたときの先頭の文字列	s.rpartition(sub)[0]
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
データフレームからランダムに100行を抽出する	df.sample(100)
横棒グラフをスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='skyblue')
棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
1からNまでの配列	np.arange(1, N+1)
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
カラム名を指定して二つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
データフレームの一部の列を正規表現patternでまとめて置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
option: 青色を使う	color = 'blue'
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
データフレームを並べる	df.sort_values('キーとなる列')
縦方向にデータフレームを連結する	pd.concat([df, df2], axis=0)
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
折れ線グラフをパールゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
整数乱数のベクトル	np.random.randint(開始値, 終了値, N)
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
option: ピーチパフにグラフの色を設定する	color = 'peachpuff'
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
option: 右三角マーカーを加える	marker = '>'
ファイルからバイナリ書き込みストリームを開いて]、fとする	f = open(filepath, mode='wb')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
option: 大文字・小文字を無視する	flag = re.IGNORECASE
二つのデータフレームを合体する	pd.concat([df, df2])
散布図をピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='pink')
自然対数を算出する	math.log(x)
ファイルに文字列を書き込む	f.write(s)
データフレームから一つの列を選ぶ	df[['列A']]
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
左三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
指定した値を使って二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
option: ロイヤルブルー色を用いる	color = 'royalblue'
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
ある列の値がxより大きくyより小さいデータを取り出す	df[(x < df['列A']) & (df['列A'] < y)]
日付データにn時間を加算する	aDate + datetime.timedelta(hours=n)
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
ダークオリーブグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkolivegreen')
データシリーズの平均値	ds.mean()
配列の相関を可視化する	plt.scatter(データ列x, データ列y)
データフレームの標準偏差	df.std()
option: 四角マーカーを使う	marker = 's'
0から始まるn個の整数リスト	list(range(n))
データフレームを関数によって分類して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
バイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
データフレームの指定したカラムの欠損値を平均値に設定する	df['列A'].fillna(df['列A'].mean())
データフレームの末尾10行を抽出する	df.tail(10)
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
文字列がリストの要素か調べる	element in aList
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
ブラック色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
ファイルをバイナリ書き込み用に開く]	open(filepath, mode='wb')
文字列の右端から空白を取り除く	s.rstrip(' ')
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
データシリーズの日	ds.dt.day
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
データフレームの空文字をNaNに変換しドロップする	df.replace('', np.nan).dropna()
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
散布図のマーカーの色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
データフレームをCSVファイルにヘッダを付けず保存する	df.to_csv('file.csv', header=None)
本日は何月か知る	datetime.datetime.today().month
行列の行ごとの分散を求める	np.var(aArray, axis=1)
文字列の終了位置より前に部分文字列が含まれないか	s.find(sub, 0, end) == -1
カウンタ同士でユニオン演算する	aCounter | aCounter2
データフレームの列の各データ値の出現数	df[col].value_counts()
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
数式を簡単にする	sympy.sympify(e)
xの小数点以下'2'桁までプリントする	print(':.2f'.format(x))
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
線グラフの色をカデットブルーに指定する	plt.plot(データ列x, データ列y, color='cadetblue')
データフレームのある列の値がxより小さい行を抽出する	df[df['列A'] < x]
実数以上の最小の整数	math.ceil(x)
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ヒストグラムを青くする	plt.hist(データ列, color='b')
文字列リストに列を変換して、部分文字列でつなげる	sub.join(map(str, iterable))
option: イエローグリーン色を用いる	color = 'yellowgreen'
option: バイナリ書き込みモードを使う	mode = 'wb'
データフレームから同じ内容の行を削除する	df.drop_duplicates(inplace=True)
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列中の部分文字列を別の文字列に置き換える	s.replace(sub, newsub)
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
横軸の目盛を非表示にする	plt.xticks([])
散布図の菱形印を青色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
ファイルからの読み込みストリームを見る	open(filepath)
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(df['列A'], 'norm')
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
option: アクアマリンにグラフの色を指定する	color = 'aquamarine'
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
ローングリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
日付データにn週間分加算する	aDate + datetime.timedelta(weeks=n)
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
散布図をライトイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
行列の行	aArray[行番号]
データフレームのあるカラムをタイムスタンプに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
日付を表現した文字列をタイムスタンプに変換する	pd.to_datetime(日付を表現した文字列)
データフレームの先頭10行	df.head(10)
散布図をスカイブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ファイルを追加用にオープンする]	open(filepath, mode='a')
nが一桁の整数か調べる	0 <= n <= 9
棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
折れ線グラフの色をラベンダーブラッシュに変更する	plt.plot(データ列x, データ列y, color='lavenderblush')
数式を部分分数に展開する	sympy.apart(e)
データ列の文字列長を列として使う	ds.str.len()
nをn2で整数除算する	n // n2
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
データフレームの指定したカラムの第一四分位数を求める	df['列A'].quantile(0.25)
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
文字列が片仮名かどうか調べる	('ァ' <= ch <= 'ン')
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
空のタプル	()
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
オブジェクトひとつのタプルを得る	(element,)
ヒストグラムをホワイト色として描画する	plt.hist(データ列, color='white')
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
JSONフォーマットの文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
項目名が辞書上で定義済みかどうか調べる	key in aDict
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
赤にヒストグラムの色を変更する	plt.hist(データ列, color='red')
データフレームの選択したカラムの標本分散	df[['列A', '列B']].var(ddof=0)
データフレームの行を抽出する	df[start:end]
クラス分類をパーセプトロンとして行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
横棒グラフをゴーストホワイト色として描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
自然数個のものからk個取り出したときの並べ方を求める	math.perm(n, k)
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
黒い丸マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
２つのデータフレームを縦に一つにまとめる	pd.concat([df, df2], axis=0)
実数に実数を掛ける	x * y
ヒストグラムの色をミディアムスレートブルーにする	plt.hist(データ列, color='mediumslateblue')
あるカラムの値がx以上の行を抽出する	df[df['列A'] >= x]
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
option: ピーチパフを使う	color = 'peachpuff'
行列の逆行列を計算する	np.linalg.inv(aArray)
データシリーズの第三四分位数	ds.quantile(0.75)
マルーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
データフレームの選択したカラムを丸めて、整数型にする	df[['列A', '列B']].round().astype(int)
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
キーが辞書上で未定義か調べる	key not in aDict
カウンタを辞書で更新する	aCounter.update(aDict)
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
日付時刻データをタプルに変換する	aDatetime.timetuple()
文字列の中でケースを無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームの指定したカラムの中央値	df['列A'].median()
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
浮動小数点数の最大値を求める	sys.float_info.max
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
option: フォントの色をダークターコイズに設定する	color = 'darkturquoise'
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
データ列と配列について散布図をプロットして、大バツマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: コロンをセパレータで使う	sep = ':'
option: グラフの色をペルーに設定する	color = 'peru'
アイボリー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
両端キューの右から要素を取り出す	deq.pop()
モカシン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
文字列の後ろから部分文字列を取り除く	s.rstrip(sub)
シアン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
ミディアムシアグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
縦棒プロットを描画してラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
データフレームの指定したカラムの欠損値を最小値で埋める	df['列A'].fillna(df['列A'].min())
文字列リストに列を変換して、'改行でつなげる	'\n'.join(map(str, iterable))
ピアソンでデータフレームの相関行列を求める	df.corr(method='pearson')
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
ヒストグラムの色をレベッカパープルに変更する	plt.hist(データ列, color='rebeccapurple')
標準入力を	sys.stdin
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
二つのカウンタのいずれかに含まれる値	aCounter | aCounter2
配列の正規分布を判定する	scipy.stats.shapiro(配列)
データフレームを降順でインデックスでソートする	df.sort_index(ascending=False)
横棒グラフをシエナ色を用いて描画する	plt.barh(データ列x, データ列y, color='sienna')
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
ハローワールドとプリントする	print('Hello World')
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
データフレームの選択したカラムの欠損値を最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
縦棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
空のロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
nがn2以下かどうか調べる	n <= n2
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
replに正規表現でデータフレームの選択したカラムの値を一度に置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
データフレームの標準偏差を算出する	df.std()
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
行列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
既存のベクトルを元に全要素が初期値の配列	np.full_like(aArray, 初期値)
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
バイナリモードでファイルをオープンして]、fとする	f = open(filepath, mode='rb')
option: フォントの色をタンに設定する	color = 'tan'
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
nがn2よりも大きいか調べる	n > n2
クリムゾン色を用いてヒストグラムを描画する	plt.hist(データ列, color='crimson')
データフレームの指定したカラムの統計量	df['列A'].describe()
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
データシリーズの標本標準偏差	ds.std(ddof=1)
縦棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
散布図に▲マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
日付時刻データが水曜日か判定する	aDatetime.weekday() == 2
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
データフレームを使う	import pandas as pd
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
実数が整数か調べる	x.is_integer()
直前の値でデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(method='ffill')
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
全要素を０で初期化した行列	np.zeros(行数, 列数)
シートを指定してデータフレームをエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
文字列は文字列より辞書順で前	s < s2
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
リストから行列を作る	np.array(aList)
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
ふたつの列からグループ化し、個数を求める	df.groupby(['列A', '列B'], as_index=False).count()
スクリプトファイルのディレクトリパス	os.path.dirname(os.path.abspath(__file__))
数式を因数分解する	sympy.factor(e)
データシリーズが何月か見る	ds.dt.month
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
配列の標準偏差	np.std(aArray)
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
配列の歪みを使う	scipy.stats.skew(配列, bias=False)
日付データにn週間を加える	aDate + datetime.timedelta(weeks=n)
回帰分析をバギングで行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
表データを用いる	import pandas as pd
行列を2次元1列に変形する	aArray.reshape(-1, 1)
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
折れ線グラフの色をダークオーキッドに変更する	plt.plot(データ列x, データ列y, color='darkorchid')
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
rgbの右三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s')
小さい順にタプルの要素を並べ変える	sorted(aTuple, reverse=True)
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
行列の行列積	np.matmul(aArray, aArray2)
リストの要素数だけ繰り返す	range(len(aList))
実数を整数に変換する	int(x)
縦棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
三つのデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
両端キューをポップする	deq.pop()
第一コマンド引数を知る	sys.argv[1]
option: グラフの色を白に設定する	color = 'white'
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
ファイルパスをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
データシリーズを十の位で丸めて、整数型にする	ds.round(-1).astype(int)
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
データシリーズの文字列を未入力値にする	ds.replace(値, np.nan)
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
二つの列の値によってデータフレームをグループ化する	df.groupby(['列A', '列B'])
横棒グラフをペールグリーン色として描画する	plt.barh(データ列x, データ列y, color='palegreen')
データフレームを万の位で丸める	df.round(-4)
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
イテラブルの重複組み合わせ	itertools.combinations_with_replacement(iterable, n)
リストにリストを加える	aList.extend(aList2)
両端キューの長さを制限する	collections.deque(maxlen=n)
データフレームの中にいくつ欠損値が含まれるか数える	df.isna().sum()
再帰が何回までできるかを	sys.getrecursionlimit()
データフレームの選択した列のパーセンタイル	df[['列A', '列B']].quantile(パーセント/100)
option: データ型を指定する	dtype = np.int32
データフレームをCSVファイルで保存する	df.to_csv('file.csv')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
スプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='springgreen')
実数の余弦	math.cos(x)
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
散布図に青い▲マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
キーがタプル上で定義済みか調べる	key in aDict
データフレームの先頭5行	df.head(5)
0からN未満までの配列	np.arange(N)
データフレームの列の名前を列挙する	df.columns
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
実数の角度を求める	math.degrees(x)
データシリーズのタイムゾーンを指定する	ds.tz_convert('Asia/Tokyo')
カーキ色でヒストグラムを描画する	plt.hist(データ列, color='khaki')
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
タプルの要素を昇順に並べ直す	sorted(aTuple, reverse=False)
２つの列によってデータフレームをグループ化し記述統計量を計算する	df.groupby(['列A', '列B']).describe()
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
option: 書き込みモードに設定する	mode = 'w'
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
ライム色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
kを底とする小数点数の対数	math.log(x, k)
外れ値に強い線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
自然数個からk個取り出した時の順列の総数	math.perm(n, k)
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
実数の３乗	x ** 3
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
ブルーバイオレット色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
オブジェクトは数値か調べる	isinstance(obj, (int,float))
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
二つの列によってデータフレームをまとめたグループ	df.groupby(['列A', '列B'])
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
指定したカラムの75パーセンタイル	df['列A'].quantile(0.75)
データ列の折れ線グラフを下三角印として描画する	plt.plot(データ列x, データ列y, marker='v')
実数の双曲線余弦	math.cosh(x)
リストと数列についての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
マップに項目名が存在しているか調べる	key not in aDict
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: スレートブルーを用いる	color = 'slateblue'
非数	math.nan
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
指定した列のカテゴリで集計し、各合計を求める	df.groupby('列A').sum()
nが何桁か	len(str(n))
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
リストの変遷を色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
折れ線グラフの下三角印を赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ミディアムスプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumspringgreen')
データシリーズの時	ds.dt.hour
ヒストグラムをペルー色を用いて描画する	plt.hist(データ列, color='peru')
option: 欠損値を先頭に来るようにする	na_position = 'first'
数列とリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列中の大文字を小文字に変換する	s.lower()
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
データフレームから列を2つ選択する	df[['列A', '列B']]
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
ヒストグラムを一点鎖線として描画する	plt.hist(データ列, linestyle='dashbot')
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
折れ線グラフをレモンシフォン色を使って描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
ふたつの集合が互いに素かどうか調べる	aSet.isdisjoint(aSet2)
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
現在が水曜日か	datetime.datetime.today().weekday() == 2
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
option: ゲインズボロ色を使う	color = 'gainsboro'
アクアマリン色を用いてヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
モデルの決定係数を求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
横棒グラフをスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='springgreen')
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
option: ダークターコイズ色を用いる	color = 'darkturquoise'
句読点文字を使う	string.punctuation
タプルを展開して表示する	print(*aTuple)
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
新しいロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
要素∉集合	element not in aSet
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
八進数文字列をバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
option: ライムグリーン色を使う	color = 'limegreen'
データフレームのカラムを百の位で丸める	df['列A'].round(-2)
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: モカシン色を使う	color = 'moccasin'
黒い右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
行でデータフレームをソートする	df.sort_index()
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
データフレームの選択した列を整数に丸める	df[['列A', '列B']].round()
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
三自然数の最小公倍数	math.lcm(n, n2, n3)
二つのリストからマッピング	dict(zip(aList, aList2))
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
データフレームの重複した行をマスクする	df.duplicated()
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
イテラブルの長さnの順列	itertools.permutations(iterable, n)
ヒストグラムの色をホットピンクに指定する	plt.hist(データ列, color='hotpink')
データフレームの指定したカラムの中に文字列と文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
散布図の下三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
データフレームの指定した列の値を正規表現でまとめて置き換える	df['列A'].replace(pattern, repl, regex=True)
縦棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
タイムスタンプデータを浮動小数点数にする	aDatetime.timestamp()
option: グラフの色をダークカーキにセットする	color = 'darkkhaki'
データフレームの選択したカラムの中に文字列と文字列があるか調べる	df[['列A', '列B']].isin([value, value2])
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
nからn2までの整数列	list(range(n, n2+1))
イテラブルから重複を取り除く	set(iterable)
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
リストと数列の散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
文字列の先頭で正規表現にケースを無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
異なる列をキーとしてデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
散布図に黒い菱形マーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
配列をビン数nでビン分割する	pd.cut(aArray, n)
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
二つのデータフレームを縦に結合する	pd.concat([df, df2], axis=0)
データフレームをある列によって昇順にソートする	df.sort_values(by='列A', ascending=True)
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
オブジェクトがクラスか調べる	isinstance(obj, クラス)
計算機イプシロン	sys.float_info.epsilon
データフレームから一つの列だけ抽出する	df[['列A']]
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
あるカラムにおいてどの値が頻出か見る	df['列A'].mode()
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
行列の演算をする	import numpy as np
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
mathモジュールをインポートする	import math
二つのデータフレームをカラム名を指定してジョインする	pd.merge(df, df2, on='列A')
整数nを二進数文字列に変換する	bin(n)[2:]
二つ並べてリストを箱髭図にする	plt.boxplot([データ列, データ列])
マッピングの項目名と値を入れ替える	{v: k for k, v in aDict.items()}
データフレームのあるカラムが何曜日か見る	df['列A'].dt.weekday_name
折れ線グラフをペールグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='palegreen')
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
option: グラフの色をミディアムスレートブルーにする	color = 'mediumslateblue'
option: 青紫色を使う	color = 'violet'
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
オプションで、出力先を標準エラーに設定する	file = sys.stderr
組の末尾からn番目以前の要素を取り出す	aTuple[:-n]
全シートをExcelから読み込む	pd.read_excel('file.xlsx', sheet_name=None)
データフレームのインデックスの一覧	df.index
散布図にバツ印を加える	plt.scatter(データ列x, データ列y, marker='x')
データシリーズを千の位で丸めて、整数型にする	ds.round(-3).astype(int)
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
横棒グラフをミントクリーム色として描画する	plt.barh(データ列x, データ列y, color='mintcream')
タイムスタンプデータは何月か知る	aDatetime.month
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
option: ダークゴールデンロッドを使う	color = 'darkgoldenrod'
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームの列を折れ線プロットで作図する	plt.plot(df[column], df[column])
配列の列ごとの平均値	np.mean(aArray, axis=0)
データフレームの指定したカラムが正規分布からどの程度歪んでいるか見る	df['列A'].kurt()
option: n番目のカラムをインデックスに設定する	index_col = n
カーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
行列の形状	aArray.shape
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
option: 小麦色にグラフの色を変更する	color = 'wheat'
折れ線グラフに丸印を使う	plt.plot(データ列x, データ列y, marker='o')
散布図の三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
イテラブルを文字列リストに変換して、空白によって連結する	' '.join(map(str, iterable))
リストの要素を昇順に並べ直す	sorted(aList, reverse=True)
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
option: グラフの色をライムに設定する	color = 'lime'
両端キューの大きさ	len(deq)
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか調べる	s.find(sub, start, end) == -1
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
データフレームのあるカラムの中にある文字列と文字列の合計を数える	df['列A'].isin([value, value2]).sum()
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
散布図をスレートブルー色として描画する	plt.scatter(データ列x, データ列y, color='slateblue')
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
データフレームのあるカラムの中にいくつ日付データがあるか数える	df['列A'].isin([value]).sum()
データフレームのあるカラムは何時か見る	df['列A'].dt.hour
n2分のn	n / n2
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
青い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
中央値でデータ列をビン分割する	pd.qcut(ds, 2)
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームをある列によって集約してグループ名を列挙する	[name for name, _ in df.groupby('列A')]
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: グラフの色をライトブルーに設定する	color = 'lightblue'
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
中央値でリストをビン分割する	pd.qcut(aList, 2)
option: 読み込みモードに設定する	mode = 'r'
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
nは何桁か	len(str(n))
option: 淡いピンク色色を用いる	color = 'lightpink'
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
タプルを反転する	reversed(aTuple)
整数nを二進文字列にする	bin(n)[2:]
配列とリストの散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
散布図の下三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
要素が全て1の配列	np.ones(要素数, dtype=np.int)
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
リストとリストについての散布図にデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
グリッドの線スタイルを実線に変更する	plt.grid(linestyle='solid')
Pythonパスにディレクトリを追加する	sys.path.append(dir)
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
ある列の文字列が部分文字列で始まらない行を抽出する	df[~ df['列A'].str.startswith(部分文字列)]
タプルの平均値	sum(aTuple)/len(aTuple)
実数の双曲線正弦	math.sinh(x)
option: シルバー色を使用する	color = 'silver'
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
nをn2だけ左シフトする	n << n2
リストにリストを追加する	aList.extend(aList2)
二つの配列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
数値を白色化する	f'\033[37m{value}\033[0m'
マッピングをJSONフォーマットで出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
縦棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
eの小数点数乗	math.exp(x)
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
アルファベットを使う	string.ascii_letters
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
複数のデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
データフレームを二つの列でグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
option: グラフの色をアクアに設定する	color = 'aqua'
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
option: グラフの色をオリーブに設定する	color = 'olive'
文字列を最後の部分文字列で分けたときの残りの文字列	s.rpartition(sub)[-1]
データ列を箱ヒゲ図で描く	plt.boxplot(データ列)
データフレームから指定したデータ型の列名の一覧	df.select_dtypes(型).columns
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
データフレームの指定したカラムを百の位で丸める	df['列A'].round(-2)
イテラブルのイミュータブルなセット	frozenset(iterable)
nのn2乗	n ** n2
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
縦棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
データフレームの分散	df.var()
nを半分にする	n /= 2
predicateFuncが真となる列の要素を得る	itertools.takewhile(predicateFunc, iterable)
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
データ列とリストの散布図にrgbの大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
標準出力を使う	sys.stdout
セットをリストに変換する	list(aSet)
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
nかけるn2を算出する	n * n2
日付時刻データが日付時刻データより先	aDatetime < aDatetime2
乱数シードをnで固定化する	random.seed(n)
タプルのキーとその値を列挙する	aDict.items()
ダークオリーブグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
データフレームのあるカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
配列の行ごとの平均値	np.mean(aArray, axis=1)
データシリーズの空文字をドロップする	ds.replace('', np.nan).dropna()
外れ値を除いたデータフレームのカラムの分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
インディゴ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
真	True
横棒グラフをインディアンレッド色として描画する	plt.barh(データ列x, データ列y, color='indianred')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
単位行列	np.eye(行数, 列数)
option: データ型として複素数型を用いる	dtype = bool
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
列名を指定して二つのデータフレームを右ジョインする	pd.merge(df, df2, on='列A', how='right')
文字列を全て小文字に変換する	s.casefold()
数式を方程式として解く	sympy.solve(e)
双方向キューのサイズ	len(deq)
両端キューが空でないか調べる	len(deq) != 0
グリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
カウンタの項目一覧	aCounter.keys()
option: シャルトリューズ色を使う	color = 'chartreuse'
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
データ列とイテラブルについて散布図を描画してバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
ヒストグラムをモカシン色として描画する	plt.hist(データ列, color='moccasin')
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
rangeの無限バージョン	itertools.count(start=n, step=step)
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
ふたつのリストの積集合を見る	list(set(aList) & set(aList2))
文字列を右寄せにする	s.rjust(文字列幅)
データフレームの列をヒストグラムとして描画する	plt.hist(df[column])
縦棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
色付きの点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
散布図をダークスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
データフレームの先頭100行を見る	df.head(100)
option: バツマーカーを描画する	marker = 'x'
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
ファイルパスをオープンして]、書き込みストリームを求める	open(filepath, mode='w')
nが-9以上、9以下	-9 <= n <= 9
タイムスタンプデータからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
option: ブラック色を使う	color = 'black'
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
大量のデータが正規分布か仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
散布図の▼マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
最大値でデータフレームの欠損値を埋める	df.fillna(df.max())
anemptystring	''
散布図に赤い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフの丸印を黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
データ列の各データ値の出現数	ds.value_counts()
データフレームのカラムの歪度を求める	scipy.stats.skew(df['列A'], bias=False)
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
データフレームのある列の値がxに等しくないデータを抽出する	df[df['列A'] != x]
文字列が文字列より辞書順で後か調べる	s > s2
行列の行ごとの最大値	np.max(aArray, axis=1)
一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
データシリーズの文字列を欠損値に変換する	ds.replace(値, np.nan)
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
文字列内にひとつでも空白があるか調べる	any(c.isspace() for c in s)
行列の値を使う	aArray[行番号, 列番号]
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
双方向キューの最後に要素を付け加える	deq.append(element)
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
組の値だけ表示する	print(*aTuple)
option: 紺色を使う	color = 'darkblue'
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
列を等量でn個にビニングする	pd.qcut(ds, n)
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
option: 行方向に処理する	axis = 1
実数を実数で整数除算する	x // y
predicateFuncが真になるイテラブルの部分	itertools.takewhile(predicateFunc, iterable)
option: 色をパレットトルコイズに設定する	color = 'paleturquoise'
カウンタの正の数だけ残す	+aCounter
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
折れ線グラフに星印を使う	plt.plot(データ列x, データ列y, marker='*')
両端キューに要素をエンキューする	deq.appendleft(element)
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgrey')
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
横棒グラフをサーモン色を使って描画する	plt.barh(データ列x, データ列y, color='salmon')
両端キューの中に数値が含まれてる	element in deq
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
青いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
option: フォントの色をダークバイオレットに設定する	color = 'darkviolet'
ヒストグラムをライトコーラル色を用いて描画する	plt.hist(データ列, color='lightcoral')
option: 先頭の行をヘッダに設定する	header = 0
option: 文字列を区切り記号で使う	sep = s
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
散布図のダイアモンド印を赤色にする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
オブジェクトのハッシュ値を求める	hash(obj)
nの無限数列	itertools.repeat(n)
データフレームが重複しているかどうか確認する	df.duplicated()
グラフの色を指定する	sns.set(pallete=パレット名)
文字列を二分する	s.partition(sep)
日付時刻をインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
白色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
リストと数列について散布図を描画してマーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
空のロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
縦棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
データフレームの中のカラムをリストを境界値としてビン分割する	pd.cut(df[col], aList)
中央値でリストを分割する	pd.qcut(aList, 2)
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
データフレームから型リストで指定したデータ型のカラムを除外する	df.select_dtypes(exclude=typeList)
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
文字列の接頭辞から部分文字列を除く	s.removeprefix(sub)
整数に変換する	int(x)
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
nが奇数	n % 2 == 1
ヒストグラムをスレートブルー色として描画する	plt.hist(データ列, color='slateblue')
サイコロと同じ乱数	random.randint(1, 6)
文字列の左端からタブを取り除く	s.lstrip('\t')
データフレームの列のユニークな値	df[col].unique()
ヒストグラムをシエナ色として描画する	plt.hist(データ列, color='sienna')
黒い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
右にn個分両端キューの要素を輪番で回す	deq.rotate(n)
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
マップの項目名を要素にする	aDict[key] = element
ヒストグラムをパープル色を用いて描画する	plt.hist(データ列, color='purple')
ラベンダー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
範囲から配列を作る	np.linspace(最小値, 最大値, 要素数)
option: フォントの色をライトサーモンに設定する	color = 'lightsalmon'
列を分割数nでビン分割する	pd.cut(ds, n)
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
破線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
カウンタ同士でユニオン	aCounter | aCounter2
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
データフレームを表示するとき、ヘッダー行を右寄せに指定する	pd.set_option('colheader_justify', 'right')
大量のデータが正規分布に従うか仮説検定する	scipy.stats.kstest(df['列A'], 'norm')
nの三乗	n ** 3
predicateFuncを適用したとき真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
ダークグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
データ列と配列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
オブジェクトは集合クラスか調べる	isinstance(obj, set)
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
縦棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
文字列を左トリムする	s.lstrip()
ロッソ回帰モデルを新規作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
散布図に黒いバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
ヒストグラムの色をダークシアグリーンに指定する	plt.hist(データ列, color='darkseagreen')
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
データフレームの選択したカラムの欠損値を直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
カウンタの全数	aCounter.total()
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
option: ダークサーモン色を使用する	color = 'darksalmon'
year年を日付時刻にする	datetime.datetime(year=year, month=1, day=1)
行列にはいくつ要素が含まれるか調べる	aArray.size
数式を簡略にする	sympy.sympify(e)
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
ライトイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
散布図の丸印を黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
二つの文字列を辞書順で比較する	s < s2
文字列の両端から空白を消す	s.strip()
ライトグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightgray')
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
データフレームの一部の列の母標準偏差	df[['列A', '列B']].std(ddof=0)
実数を実数で割る	x / y
辞書に別のマッピングのエントリを追加する	aDict.update(aDict2)
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
枠なしの凡例を付ける	plt.legend(frameon=False)
オブジェクトのイテレータ	iter(obj)
日付データが水曜日か調べる	aDate.weekday() == 2
nからn2の値を引いてnに代入する	n -= n2
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
データフレームの数値をまとめて丸める	df.round()
折れ線グラフの色をトマトに指定する	plt.plot(データ列x, データ列y, color='tomato')
棒グラフをタン色を用いて描画する	plt.bar(データ列x, データ列y, color='tan')
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
グラフで使うフォントを指定する	sns.set(font=フォント名)
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
データシリーズのパーセンタイル	ds.quantile(パーセント/100)
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
データフレームの第一四分位数	df.quantile(0.25)
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
配列を中央値でビン分割する	pd.qcut(aArray, 2)
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
ライトコーラル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
文字列を空白で区切る	s.split()
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
カウンタの項目一覧を見る	aCounter.keys()
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
散布図の四角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
オプションで、出力先を標準出力に設定する	file = sys.stdout
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
ある列のカテゴリごとの個数を求める	df.groupby('列A').count()
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
option: ドジャーブルー色を使う	color = 'dodgerblue'
インデント幅nで、タプルをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データシリーズが正規分布からどの程度、歪んでいるか見る	ds.kurt()
日付データが火曜日か調べる	aDate.weekday() == 1
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
あるカラムの文字列に部分文字列が含まれない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
変数を改行なしにプリントする	print(value, end='')
option: 箱ひげ図を水平方向にする	vert = False
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
ダイアモンドマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
n×n2の二次元リストを作る	[[0] * n for _ in range(n2)]
入力から二つの整数を読む	A, B = map(int, input().split())
option: フォントの色をイエローグリーンに設定する	color = 'yellowgreen'
文字列をコロンによって区切り、、列挙する	s.split(':')
データフレームのカラムのスピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
データフレームのNaNをxに設定する	df.fillna(x)
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
二つの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
データ列の出現頻度を可視化する	plt.hist(データ列)
データフレームの一部のカラムの中にある文字列の合計を調べる	df[['列A', '列B']].isin([value]).sum()
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
データフレームのn行目を破壊的に除く	df.drop(n, axis=0, inplace=True)
双方向キューをタプルに変換する	tuple(deq)
整数nはリストのどれかかどうか調べる	n in aList
option: 小麦色を使う	color = 'wheat'
データフレームを10の位で丸める	df.round(-1)
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
option: グラフの色をシアンに指定する	color = 'cyan'
実数の逆余弦	math.acos(x)
option: マーカーの色をブラウンにする	markerfacecolor = 'brown'
オブジェクトはタプル	isinstance(obj, tuple)
文字列の出力を改行なしに行う	print(value, end='')
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
2つのベクトルを縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
option: グラフを点線に設定する	linestyle = 'dotted'
データフレームの未入力値を最大値に設定する	df.fillna(df.max())
配列の列ごとの平均を求める	np.mean(aArray, axis=0)
ある列の値の最小値	df.groupby('列A').min()
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
データフレームの指定した列の第一四分位数を求める	df['列A'].quantile(0.25)
棒グラフを白色として描画する	plt.bar(データ列x, データ列y, color='white')
異なる列をキーとして2つのデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
棒グラフをブルーバイオレット色として描画する	plt.bar(データ列x, データ列y, color='blueviolet')
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
真上位集合か調べる	aSet > aSet2
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
データフレームの選択したカラムを小数点以下n桁で丸める	df[['列A', '列B']].round(n)
行列の行ごとの平均を求める	np.mean(aArray, axis=1)
既存のファイルパスを追加できるように文字列の示すエンコーディングで開く]	open(filepath, mode='a', encoding=s)
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
散布図をポイント印で描画する	plt.scatter(データ列x, データ列y, marker='.')
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
横棒プロットの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
BOMを付けてデータフレームをCSVファイルに保存する	df.to_csv('file.csv', encoding='utf_8_sig')
文字列はタイトルケースか調べる	s.istitle()
行列から重複を除いた配列を作る	np.unique(aArray)
配列の内積	np.dot(aArray, aArray2)
オブジェクトは論理値クラスのインスタンスかテストする	isinstance(obj, bool)
データシリーズの値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
OSがMacOSか調べる	sys.platform.startswith('darwin')
カテゴリで色分けしてデータフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
重複ありで5行をランダムにデータフレームからサンプリングする	df.sample(5, replace=True)
option: マーカーを大バツに変更する	marker = 'X'
option: 改行コードをUNIXに設定する	newline = '\n'
リストの全要素を取り除く	aList.clear()
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
ヒストグラムの色を珊瑚に設定する	plt.hist(データ列, color='coral')
データフレームを十の位で丸める	df.round(-1)
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
10行をランダムにデータフレームから抽出する	df.sample(10)
データフレームを見る	df.head()
縦軸の目盛りの表示を変更する	plt.yticks(目盛りの値リスト)
option: グラフの色をシアンに設定する	color = 'cyan'
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
クロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x')
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
rgbのバツマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図をパールゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ローングリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
折れ線グラフをダークマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
データシリーズのタイムゾーンをセットする	ds.tz_convert('Asia/Tokyo')
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
黒いバツマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
ダークターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
タプルをチェーンマップに変換する	collections.ChainMap(aDict)
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
青い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
数値を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
データフレームの列を目的変数にする	目的変数 = df['列名']
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
散布図に青い大バツ印を描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
両端キューをタプルに変換する	tuple(deq)
散布図をシルバー色を用いて描画する	plt.scatter(データ列x, データ列y, color='silver')
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
オブジェクトがプロパティを持つか確認する	hasattr(obj, プロパティ名)
縦棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
日付時刻データが土曜日か	aDatetime.weekday() == 5
グラフの描画で暗く色を使う	sns.set(pallete='dark')
散布図の大バツマーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
option: リネンを使う	color = 'linen'
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
スクリプトファイルの絶対パス	os.path.abspath(__file__)
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
フローラルホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
option: 文字コードをUTF8に変更する	encoding = 'utf-8'
データシリーズの欠損値をxで埋める	ds.fillna(x)
option: スラグレーを使用する	color = 'slategrey'
データフレームをTSVファイルで保存する	df.to_csv('file.tsv', sep='\t')
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
ヒストグラムをマゼンタ色として描画する	plt.hist(データ列, color='magenta')
論文用にグラフをする	sns.set(context='paper')
折れ線グラフに四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
ある列の文字列が正規表現文字列にマッチしない行を抽出する	df[~df['列A'].str.match(正規表現)]
０で全要素を初期化した3２ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
データシリーズの要約統計量	ds.describe()
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
データフレームの選択した列の分散	df[['列A', '列B']].var()
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
タプルの要素を昇順に並べる	sorted(aTuple, reverse=False)
シャルトリューズ色でヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
組のn番目からn2番目までの部分	aTuple[n:n2]
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
データシリーズの年	ds.dt.year
文字列を走査し正規表現に大文字・小文字を無視してマッチするか調べる	re.search(pattern, s, flags=re.IGNORECASE)
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
散布図の右三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
コーンフラワーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
２つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
日付データをISO形式の文字列に変換する	aDate.isoformat()
両端キューの末尾	deq[-1]
縦棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
配列にはいくつ要素があるか調べる	aArray.size
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
nがn2以下、または、n3以上か	n <= n2 or n >= n3
データ列のユニークな要素数を見る	ds.nunique()
散布図をペールグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegreen')
データフレームの選択したカラムの分散	df[['列A', '列B']].var()
データフレームのカラムの値が欠損値かどうか調べる	df['列A'].isna()
ヒストグラムの色をミディアムバイオレットレッドに変更する	plt.hist(データ列, color='mediumvioletred')
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
rgbの三角マーカーをリストとデータ列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
整数nがタプルのいづれかか調べる	n in aTuple
年月日と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
要素が集合のメンバーでないか調べる	element not in aSet
option: 印を菱形に変更する	marker = 'D'
二つの数値をカンマで区切ってプリントする	print(value, value2, sep=',')
数列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
ASCII限定としてパターンに文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
回帰モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
ある列の文字列が部分文字列で始まる行を抽出する	df[df['列A'].str.startswith(部分文字列)]
グラフに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
n引くn2	n - n2
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
集合を空集合にする	aSet.clear()
白いグリッド線を引く	plt.grid(color='w')
ファイルを書き込み用に文字コードtextでオープンする]	open(filepath, mode='w', encoding=text)
データフレームのカラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
両端キューの先頭	deq[0]
ふたつの列からグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
文字列中のパターンを新しい文字列で置換する	re.sub(pattern, newsub, s)
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
列から重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
データフレームの上10行を確認する	df.head(10)
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
データフレームから一つの列を抽出する	df[['列A']]
データフレームの選択したカラムの記述統計量	df[['列A', '列B']].describe()
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
ヒストグラムの色をミディアムブルーに変更する	plt.hist(データ列, color='mediumblue')
カウンタの全カウント	aCounter.total()
option: 配列のデータ型を指定する	dtype = bool
nをn2倍にする	n *= n2
パレットトルコイズ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
指定したカラムの中に日付データが存在するか	df['列A'].isin([value])
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
space	' '
ファイルを追加モードを用いてオープンして]、fとする	f = open(filepath, mode='a')
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgrey')
グリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
日付データが日付データよりあとか	aDate > aDate2
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
指定したカラムの統計量を確認する	df['列A'].describe()
全要素を０で初期化した複素数型の行列を作成する	np.zeros(行数, 列数, dtype=bool)
option: モカシン色を用いる	color = 'moccasin'
リストをビン数nでビン分割する	pd.cut(aList, n)
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
ミディアムアクアマリン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
集合から全ての要素を消す	aSet.clear()
データシリーズが正規分布からどの程度、歪んでいるか調べる	ds.kurt()
データシリーズの欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
option: 改行をセパレータで使う	sep = '\n'
空の集合	set()
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
リストの先頭を見る	aList[0]
データフレームをある列によって昇順にソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
データシリーズの中央値	ds.median()
データフレームのあるカラムの分	df['列A'].dt.minute
option: 不偏分散を用いる	ddof = 1
データフレームの行を条件で消す	df[(df['列A'] == x) & (df['列B'] == y)]
線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームのあるカラムが何秒か見る	df['列A'].dt.second
ネイピア数を使う	math.e
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
文字列を改行によって分割する	s.splitlines()
2つの実行結果を順にプリントする	print(value, value2)
option: グラフの色をグレーに設定する	color = 'gray'
変数がマイナス無限大に近づく場合数値の極限値を求める	sympy.limit(e, z, -oo)
JSONを使う	import json
ラインを半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
リストと数列の散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
配列が何のデータ型か調べる	aArray.dtype()
横棒グラフをラベンダーブラッシュ色を用いて描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
ゼロ埋めされた符号なし８ビット整数型の行列	np.zeros(要素数, dtype=np.uint8)
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
option: ブール型を使う	dtype = np.int32
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
option: マーカーを四角に変更する	marker = 's'
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
ダークグリーン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
行列の列を選択する	aArray[:, 列番号]
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
実数を文字列にする	str(x)
黒いグリッド線を引く	plt.grid(color='k')
両端キュー中の要素のインデックス	deq.index(element)
ファイルパスから拡張子付きのファイル名を取り出す	os.path.basename(filepath)
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
カウンタ間で積集合	aCounter & aCounter2
ある列の文字列に部分文字列が存在しない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
イテラブルからカウンタを作る	collections.Counter(iterable)
文字列がリストの要素	element in aList
データ列と配列についての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームの一部のカラムの中にいくつ未入力値が含まれるか数える	df[['列A', '列B']].isna().sum()
ホワイトスモークにヒストグラムの色を設定する	plt.hist(データ列, color='whitesmoke')
両端キューの順序を左にn個分回転させる	deq.rotate(-n)
option: グラフの色をインディゴに設定する	color = 'indigo'
実数が正の数か調べる	x > 0
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
タプルの中の最大値	max(aTuple)
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
文字列を積極的に小文字に変換する	s.casefold()
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
option: ピンク色を用いる	color = 'pink'
折れ線グラフに黒い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
リストの全ての要素をクリアにする	aList.clear()
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
データ列の各データが何回出現するか確認する	ds.value_counts()
二つのデータフレームを横向きに一つにする	pd.concat([df, df2], axis=1)
実数の小数部	math.modf(x)[0]
マゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
縦棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
リストの四分位を可視化する	plt.boxplot(データ列)
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
カウンタからゼロカウントを取り除く	+aCounter
数列とリストの散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
実数の仮数	math.frexp(x)[0]
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
ゼロ埋めした配列を作る	np.zeros(要素数)
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
文字列は全て印字できるか調べる	s.isprintable()
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ペアリストpairsからカウンタを構築する	collections.Counter(dict(pairs))
表データのあるカラムの日	df['列A'].dt.day
折れ線グラフのバツマーカーの色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
ダークシアグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
上限指定をしたデータフレームのカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
配列の列ごとの最大	np.max(aArray, axis=0)
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
日付データが何日か知る	aDate.day
データフレームの選択したカラムの中にが含まれるかどうか調べる	df[['列A', '列B']].isin([value])
文字列が全てアルファベットか調べる	s.isalpha()
折れ線グラフの色をライトゴールドロディイエローにセットする	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
xの小数点以下'1'桁までの文字列にする	':.1f'.format(x)
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
辞書にキーワード引数で追加する	aDict.update(**kwargs)
option: 淡いピンク色を使う	color = 'lightpink'
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
線グラフをパパイヤウィップ色を用いて描画する	plt.plot(データ列x, データ列y, color='papayawhip')
option: 珊瑚色を使う	color = 'coral'
作画のグリッドを白くする	sns.set(style='whitegrid')
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
散布図のバツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ヒストグラムの色をパールバイオレットレッドに指定する	plt.hist(データ列, color='palevioletred')
文字列の右側から改行を取り除く	s.rstrip('\n')
データ列のエポック秒をPandasの日付型にする	pd.to_datetime(ds, unit='s', utc=True)
配列とリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
オールドレース色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
グリッド線を白くする	plt.grid(color='w')
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
データシリーズのNaNを直後の値に設定する	ds.fillna(method='bfill')
option: 欠損値も含める	dropna = True
散布図に星印を加える	plt.scatter(データ列x, データ列y, marker='*')
データフレームを表示するとき小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
データシリーズの50パーセンタイル	ds.median()
棒グラフをグレー色として描画する	plt.bar(データ列x, データ列y, color='grey')
option: 黄色にフォントの色をセットする	color = 'yellow'
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
辞書のキーとその値をペアとして取り出す	aDict.items()
異なる列をキーとして２つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
線グラフの色をターコイズに指定する	plt.plot(データ列x, データ列y, color='turquoise')
集合をリストに変換する	list(aSet)
プログラムのファイルの名前	sys.argv[0]
数値を改行なしにプリントする	print(value, end='')
二つの変数を同じ値にする	x = y = n
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
ファイルからストリームを読み込んで、fileとする	file = open(filepath)
縦棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
option: 区切りをタブにする	sep = '\t'
正規分布による累積分布関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
文字コードを文字に変換する	chr(unicode)
データフレームを表示するとき、カラムの最大幅をnに指定する	pd.set_option('max_colwidth', n)
コマンド引数のリスト	sys.argv[1:]
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
option: 色の透明度を指定する	alpha = 0.5
文字列の開始位置からと終了位置の間に部分文字列が含まれるかどうか調べる	s.find(sub, start, end) != -1
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
日付時刻データが何年か知る	aDatetime.year
縦棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
パウダーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
option: グラフの色をオレンジに設定する	color = 'orange'
データフレームから型リストで指定したデータ型のカラムのみ選択する	df.select_dtypes(include=typeList)
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
データフレームから数値データの列を抽出する	df.select_dtypes('number')
データフレームの指定したカラムの第三四分位数	df['列A'].quantile(0.75)
数の三乗	x ** 3
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
オブジェクトはバイト列クラス	isinstance(obj, bytes)
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
新しい文字列でパターンにマッチした文字列を置き換える	re.sub(pattern, newsub, s)
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
配列のユニークな要素	np.unique(aArray)
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
部分文字列によって文字列を区切る	s.split(sub)
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
バツ印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
セットの浅いコピー	aSet.copy()
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
リストを配列に変換する	np.array(aList)
タプルをリストに変換する	list(aTuple)
データフレームのカラムの標準誤差を求める	scipy.stats.sem(df['列A'])
option: ミディアムオーキッドを用いる	color = 'mediumorchid'
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
データフレームの選択したカラムの欠損値を最大値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
白いヒストグラムを描画する	plt.hist(データ列, color='w')
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームの母標準偏差	df.std(ddof=0)
フォーマットでデータ列をタイムスタンプ型に変換する	pd.to_datetime(ds, format='%Y-%m-%d')
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
縦棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgrey')
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
ヒストグラムの色をブラウンに設定する	plt.hist(データ列, color='brown')
空列	[]
option: 改行なし	end = ''
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
ブラック色で散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
部分文字列が文字列の開始位置以降にないかどうか調べる	s.find(sub, start) == -1
option: グラフの色を青緑に設定する	color = 'turquoise'
ダークスラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
サイコロを振る	random.randint(1, 6)
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
文字列の中の正規表現による全てのマッチを求める	re.findall(pattern, s)
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
ヒストグラムを３つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ライトゴールドロディイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
option: 右三角マーカーを使う	marker = '>'
データフレームの相関行列を描画する	sns.heatmap(df.corr())
折れ線グラフをブルーバイオレット色として描画する	plt.plot(データ列x, データ列y, color='blueviolet')
数列とリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: ダークスレートブルー色を使う	color = 'darkslateblue'
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
実数の逆双曲線正接	math.atanh(x)
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
データフレームから列を三つ選択する	df[['列A', '列B', '列C']]
空の部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
グラフの描画を見やすくする	import seaborn as sns
逆順の両端キュー	reversed(deq)
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
文字列の出力を改行せず行う	print(value, end='')
リストをタプルに変換する	tuple(aList)
文字列が文字列リストのいづれかどうか調べる	s in aStringList
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
文字列をセンタリングにする	s.center(文字列幅)
グラフの色を色差別なくする	sns.set(pallete='colorblind')
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
改行を取り除いてファイルを一行ずつ読む	f.readline()
青い実線でラインを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
ヒストグラムをブラック色として描画する	plt.hist(データ列, color='black')
option: フォントの色をオールドレースに設定する	color = 'oldlace'
option: スカイブルーを使う	color = 'skyblue'
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
CSVファイルからデータフレームを読む	pd.read_csv('file.csv', sep=',')
横棒グラフをリネン色を用いて描画する	plt.barh(データ列x, データ列y, color='linen')
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
線グラフをミディアムスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
両端キューの要素をインプレースに反転する	deq.reverse()
散布図を黒いバツマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c='k')
ダークオレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
チップのデータセットからデータフレームを読み込む	df = sns.load_dataset('tips')
データフレームの選択したカラムの中にいくつ欠損値があるか数える	df[['列A', '列B']].isna().sum()
nからn2の値を引いてnとする	n -= n2
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
カラーバーを描画する	plt.colorbar()
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
最大最小としてデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データ列をリストを境界値として分割する	pd.cut(ds, aList)
破線にヒストグラムのラインスタイルを設定する	plt.hist(データ列, linestyle='dashed')
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
列のUNIX時間をタイムスタンプ型に変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
配列の最小値	np.min(aArray)
折れ線グラフの色をマルーンに変更する	plt.plot(データ列x, データ列y, color='maroon')
x,y,zをそれぞれn,n2,n3にする	x, y, z = n, n2, n3
option: 複素数型を使う	dtype = bool
nとn2が等しい	n == n2
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
option: ダークスラテグレー色を使う	color = 'darkslategray'
ダークシアグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='darkseagreen')
リストをアンダーライン付きで表示する	print(f'\033[4m{value}\033[0m')
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
縦棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
パパイヤウィップ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
散布図をrgbのポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
最大長nの両端キューを作る	collections.deque(maxlen=n)
縦棒グラフをコーラル色として描画する	plt.bar(データ列x, データ列y, color='coral')
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
データシリーズの欠損値を平均に減らす	ds.fillna(ds.mean())
option: ピーチパフ色を使う	color = 'peachpuff'
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
集合から任意の要素を取り出す	aSet.pop()
データフレームの相関行列を積率相関係数で求める	df.corr(method='pearson')
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
year年month月の日付	datetime.date(year=year, month=month, day=1)
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
組とタプルを連結する	aTuple + aTuple2
データフレームのカラムの正規分布を判定する	scipy.stats.shapiro(df['列A'])
指定したカラムの欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
データフレームの先頭	df.head()
nからn2までのstepごとによるスライス	slice(n, n2, step)
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
option: ミディアムブルー色を使う	color = 'mediumblue'
正規表現に大文字・小文字を無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
エポックを用いる	import time
変数を定義する	x = n
オプションで、標準エラーを出力にする	file = sys.stderr
改行なしに二つの文字列を表示する	print(value, value2, end='')
ユニークな値を要素とする配列	np.unique(aArray)
カラムをフォーマットでdatetime64型に変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
ある列のカテゴリごとの最小値	df.groupby('列A').min()
option: エラーがあるとき、例外を発生させる	errors = 'strict'
オブジェクトのバイトサイズを知る	sys.getsizeof(obj)
横棒グラフを描いて、下寄せする	plt.barh(ラベル列, データ列, align='edge')
option: n番目のカラムを行に変更する	index_col = n
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
折れ線グラフにラベルをつける	plt.plot(データ列x, データ列y, label='ラベル')
option: グラフの色をライトスレイグレーに変更する	color = 'lightslategrey'
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
プロットにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
アルファベットの大文字を全て求める	string.ascii_uppercase
データシリーズの中にいくつ欠損値があるか数える	ds.isna().sum()
浮動小数点数のn乗	pow(x, n)
散布図をrgbのダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: スプリンググリーン色を用いる	color = 'springgreen'
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
日付時刻データの年数	aDatetime.year
散布図のマーカーをダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
データシリーズの中に日付データと日付データがいくつ存在するかカウントする	ds.isin([value, value2]).sum()
日付時刻データが日付時刻データと同時	aDatetime == aDatetime2
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
スチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
アルファベットの大文字列	string.ascii_uppercase
グラフで使える色名の一覧	matplotlib.colors.cnames
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
option: オレンジ色を用いる	color = 'orange'
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgray')
ガンマ関数の値を計算する	math.gamma(x)
散布図の左三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
縦棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
ハニーデューにヒストグラムの色を設定する	plt.hist(データ列, color='honeydew')
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
折れ線グラフを茶色色を用いて描画する	plt.plot(データ列x, データ列y, color='brown')
実数の絶対値	math.fabs(x)
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
散布図をrgbのバツマーカーで描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフの星印の大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
option: EUCを使う	encoding = 'euc_jp'
ある列のカテゴリ毎の合計	df.groupby('列A').sum()
データフレームの平均と信頼区間を描く	sns.pairplot(hue='カテゴリ列', data=df)
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
散布図に▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
新しい勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
円グラフで配列の割合を図示する	plt.pie(データ列, startangle=90)
本日をタプルに変換する	datetime.datetime.today().timetuple()
ヒストグラムをブランチドアーモンド色を用いて描画する	plt.hist(データ列, color='blanchedalmond')
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
文字列を青色にする	f'\033[34m{value}\033[0m'
データフレームの選択したカラムの要約統計量を求める	df[['列A', '列B']].describe()
要素∉セット	element not in aSet
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
タプルの先頭のn要素を除く	aTuple[n:]
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
度数分布図の上限下限を設定する	plt.hist(データ列, range=(start, end))
標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
Pythonパスの一覧	sys.path
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
文字列が全て識別子名か	s.isidentifier()
ヒストグラムの色をライムに変更する	plt.hist(データ列, color='lime')
データフレームの指定したカラムの中にいくつ文字列があるか数える	df['列A'].isin([value]).sum()
文字列の両端から部分文字列を取り除く	s.strip(sub)
実数を小数点以下で丸める	round(x, n)
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
データフレームを10の位で四捨五入する	df.round(-1)
option: 線の種類を点線に設定する	linestyle = 'dotted'
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
縦棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
折れ線グラフに青いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
後の値でデータフレームの指定したカラムの欠損値を埋める	df['列A'].fillna(method='bfill')
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
データフレームをソートして、上の方を取り出す	df.sort_values('キーとなる列').head(n)
option: マーカーを三角に変更する	marker = '^'
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
データフレームの選択したカラムのNaNを最大値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
データ列を円グラフにする	plt.pie(データ列, startangle=90)
折れ線グラフの印を星印にする	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフのマーカーを下三角印にする	plt.plot(データ列x, データ列y, marker='v')
ディムグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
xの小数点以下'3'桁の文字列にする	':.3f'.format(x)
グラフの見栄えを綺麗にする	import seaborn as sns
現在の日付	datetime.date.today()
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
option: グラフの色をバリーウッドにセットする	color = 'burlywood'
散布図をダークバイオレット色を使って描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
オブジェクトは浮動小数点数クラスか	isinstance(obj, float)
データフレームの指定したカラムを小数点以下n桁で丸める	df['列A'].round(n)
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
ターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
option: ミディアムアクアマリン色を使用する	color = 'mediumaquamarine'
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
リストを等しい量になるようにn個にビン分割する	pd.qcut(aList, n)
線グラフの色をナバホホワイトにセットする	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームの選択した列の平均などを一度に見る	df[['列A', '列B']].describe()
option: サンディーブラウン色を使う	color = 'sandybrown'
指定した列のカテゴリで集計し、それぞれの合計を求める	df.groupby('列A').sum()
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
nがn2の倍数か	n % n2 == 0
数値の符号をコピーにする	math.copysign(x, x2)
リスト内の要素が少なくともひとつ真か調べる	any(aList)
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
中央値で配列をビン分割する	pd.qcut(aArray, 2)
nとn2の和を計算する	n + n2
空のチェーンマップを作る	collections.ChainMap()
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
指定した列の値で集計し、それぞれの最小値を計算する	df.groupby('列A').min()
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(df['列A'])
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
横棒グラフをブラック色として描画する	plt.barh(データ列x, データ列y, color='black')
四分位数ごとにリストをビン分割する	pd.qcut(aList, 4)
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
nが3の倍数か	n % 3 == 0
データシリーズの欠損値を最大値で埋める	ds.fillna(ds.max())
option: ブラックを使う	color = 'black'
タイタニック号のデータセットをロードする	df = sns.load_dataset('titanic')
データシリーズの文字列を欠損値に変換する	ds.replace(値, np.nan)
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
文字列の先頭で正規表現に複数行対応としてマッチするか調べる	re.match(pattern, s, flags=re.MULTILINE)
option: スノー色を使う	color = 'snow'
縦棒グラフを描画して、バーの横幅を指定する	plt.bar(ラベル列, データ列, width=0.5)
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
日付データが日付データより後ろか調べる	aDate > aDate2
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: 読み込む行番号をnamesで指定する	usecols = names
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
配列のピアソンの相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
タプルの最後を取り除く	aTuple[:-1]
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
データフレームの中の列を等しい量になるようにビン数nで分割する	pd.qcut(df[col], n)
データフレームの指定したカラムを百の位で四捨五入して整数にする	df['列A'].round(-2).astype(int)
データフレームの指定したカラムの欠損値を直後の値で埋める	df['列A'].fillna(method='bfill')
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
option: 白にグラフの色を設定する	color = 'white'
プラットホームのエンコーディング	sys.getdefaultencoding()
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
option: 下三角マーカーを描画する	marker = 'v'
カウンタの項目数を求める	len(aCounter)
日付時刻データの日付	aDatetime.date()
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
ピンク色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
線グラフをディープスカイブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
文字列内にひとつでも英字が含まれるかどうか調べる	any(c.isalpha() for c in s)
異なる列をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='left')
コマンドの第二引数を知る	sys.argv[1]
列を累加したイテラブル	itertools.accumulate(iterable)
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
option: オレンジ色を使う	color = 'orange'
データフレームの選択したカラムのパーセンタイル	df[['列A', '列B']].quantile(パーセント/100)
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
数列のケンドールの相関係数を計算する	scipy.stats.kendalltau(数列, 数列2)
データフレームの指定した列の最頻値	df['列A'].mode()
縦棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
散布図の菱形印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
xが一桁の正の数か調べる	0 <= x <= 9
特異値分解で多次元データを濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
option: マーカーを左三角に設定する	marker = '<'
kを底とする実数の対数	math.log(x, k)
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
小数点数を切り上げる	math.ceil(x)
浮動小数点数のn乗の実数剰余	pow(x, n, y)
折れ線グラフを深紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
要素が辞書の値として含まれているかどうか調べる	element in aDict.values()
黒い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
データフレームの選択した列の要約統計量	df[['列A', '列B']].describe()
作画を正方形にする	plt.axis('equals')
ライムグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
リストをコピーする	aList.copy()
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
実数の整数部	math.modf(x)[1]
option: グラフの色を小麦色に設定する	color = 'wheat'
縦棒グラフをダークターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
データフレームの指定したカラムにおいてどの値が頻出か見る	df['列A'].mode()
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
option: グラフの色をインディゴに指定する	color = 'indigo'
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
データ列を分割する	pd.cut(ds, aList)
データフレームの指定したカラムの不偏標準偏差	df['列A'].std()
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
散布図にrgbの△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
データシリーズの欠損値を直前の値に変更する	ds.fillna(method='ffill')
マッピングをネスト化する	collections.ChainMap(aDict)
データフレームの指定した二列を取り出す	df[['列A', '列B']]
横棒グラフをピンク色として描画する	plt.barh(データ列x, データ列y, color='pink')
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
文字列を文字コード列に変換する	[ord(ch) for ch in s]
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
ふたつの集合の差集合	aSet.difference(aSet2)
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
データフレームの指定したカラムの母標準偏差	df['列A'].std(ddof=0)
データフレームの指定のカラムに重複があれば、ドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
文字列を部分文字列で分けたときの前半の文字列を使う	s.partition(sub)[0]
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
淡いピンク色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
option: 印を四角に変更する	marker = 's'
オブジェクトの種類	type(obj)
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
縦棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームをある列の値によってグループ化する	df.groupby('列A')
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
option: ベージュ色を使う	color = 'beige'
整数nを二進表現に変換する	bin(n)
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
イテラブルとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
nにn2を加算する	n + n2
ミディアムパープル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
散布図をコーンズシルク色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
インディゴ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
文字列一つの組	(element,)
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
ファイルをバイナリ書き込みモードを用いて開いて]、fとする	f = open(filepath, mode='wb')
二つの集合が互いに素か	aSet.isdisjoint(aSet2)
散布図の三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
データフレームをあるカラムによって昇順にソートする	df.sort_values(by='列A', ascending=True)
デピンク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
データフレームのどの値が頻出か確認する	df.mode()
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
ある列の文字列が部分文字列で終わる行を抽出する	df[df['列A'].str.endswith(部分文字列)]
データフレームの一部のカラムの標本標準偏差を計算する	df[['列A', '列B']].std(ddof=1)
変数名を項目名として辞書	dict(name=element)
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
折れ線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
日付データが日付データと同時か	aDate == aDate2
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
カテゴリ列で色分けして、データフレームをに箱ひげ図で見る	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
点線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
赤い実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
二つの文字列が同じか確認する	s == s2
折れ線グラフの▲マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
実数のn乗の実数剰余	pow(x, n, y)
タプルの合計	sum(aTuple)
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
本日が何月か知る	datetime.datetime.today().month
縦棒グラフをシーグリーン色として描画する	plt.bar(データ列x, データ列y, color='seagreen')
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
丸マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
n個の要素があるリスト	[element] * n
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
行列の列ごとの分散を求める	np.var(aArray, axis=0)
昇順にリストをソートする	sorted(aList, reverse=False)
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
オブジェクトが名前付きタプルか確認する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
オブジェクトは辞書か調べる	isinstance(obj, dict)
カラムの幾何平均	scipy.stats.gmean(df['列A'])
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
データフレームをソートして、上位n件を取り出す	df.sort_values('キーとなる列').head(n)
表計算ファイルから複数のシートを読む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
要素は集合のメンバーでないか調べる	element not in aSet
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
文字列を正規表現で分割する	re.split(pattern, s)
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
オブジェクトのフィールドの値を値に変更する	setattr(obj, プロパティ名, 値)
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
右三角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
option: 暗い赤色を使う	color = 'darkred'
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
ファイルをバイナリ書き込み用にオープンする]	open(filepath, mode='wb')
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
再帰の上限を確める	sys.getrecursionlimit()
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ペルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
二進対数	math.log2(x)
グローバル変数の一覧	globals()
書き出すCSV形式の小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
option: フォントの色をライトブルーに設定する	color = 'lightblue'
データフレームから重複を削除する	df.drop_duplicates(inplace=True)
バイアスなしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
線形モデルの回帰変数	model.coef_
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
データフレームのある列の値がxより大きい行を抽出する	df[df['列A'] > x]
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
文字列リストにイテラブルを変換して、カンマで連結する	','.join(map(str, iterable))
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
リストを反転する	reversed(aList)
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
データシリーズを丸めて整数型にする	ds.round().astype(int)
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
黒い左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
文字列がリストに含まれるか調べる	element in aList
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
option: 右三角印を描画する	marker = '>'
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
ファイルパスから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
多次元データを主成分分析を用いて淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
折れ線グラフに丸印を加える	plt.plot(データ列x, データ列y, marker='o')
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
文字列が正規表現にマッチさせる	re.match(pattern, s)
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
データシリーズが何曜日か調べる	ds.dt.weekday_name
セットを変更不能に変換する	frozenset(aSet)
option: アクアにグラフの色を設定する	color = 'aqua'
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
nとn2の積	n * n2
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
option: チョコレート色を使う	color = 'chocolate'
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
データフレームのある列の値がx以上の行を取り出す	df[df['列A'] >= x]
横棒グラフをラベンダー色を用いて描画する	plt.barh(データ列x, データ列y, color='lavender')
データフレームの平均値	df.mean()
あるカラムの中央値を求める	df['列A'].median()
散布図をシアン色を使って描画する	plt.scatter(データ列x, データ列y, color='cyan')
データシリーズを万の位で丸める	ds.round(-4)
ある列の文字列が部分文字列で終わらない行を抽出する	df[~ df['列A'].str.endswith(部分文字列)]
データフレームの行と列をひっくり返す	df.T
文字列を部分文字列によって区切る	s.split(sub)
option: フォントの色をスノーに変更する	color = 'snow'
option: グラフの色をビスクに設定する	color = 'bisque'
ダイアモンドマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
棒グラフをサーモン色を使って描画する	plt.bar(データ列x, データ列y, color='salmon')
四角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
TSVファイルからデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t')
2つの文字列を辞書順で比較する	s < s2
option: ライトグリーン色を使う	color = 'lightgreen'
データフレームの指定したカラムの中のNaNの個数を数える	df['列A'].isna().sum()
文字列はリストの要素	element in aList
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
コマンド引数を列挙する	sys.argv[1:]
データフレーム中の欠損値を取り除く	df.dropna(inplace=True)
ライトサーモンにヒストグラムの色を変更する	plt.hist(データ列, color='lightsalmon')
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
棒グラフを赤色を用いて描画する	plt.bar(データ列x, データ列y, color='red')
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
n個の集まりからk個選ぶ方法を求める	math.comb(n, k)
データフレームのカラムのスピアマンの相関係数を算出する	scipy.stats.spearmanr(df['列A'], df['列B'])
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
辞書の浅いコピーを作る	aDict.copy()
折れ線グラフの丸マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
散布図をカデットブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
option: パールバイオレットレッド色を使う	color = 'palevioletred'
部分文字列を文字列の後ろから探す	s.rfind(sub)
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
データフレームをCSV形式で保存する	df.to_csv('file.csv')
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
棒グラフをミスティローズ色として描画する	plt.bar(データ列x, データ列y, color='mistyrose')
半透明の破線として線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームの重複していない行のみを抽出する	df[~ df.duplicated(keep=False)]
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
文字列はリストに含まれないか	element not in aList
文字列の先頭でパターンにマッチするか見る	re.match(pattern, s)
option: グラフの色をライトグレーに指定する	color = 'lightgray'
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
スタッキングで回帰分析をする	sklearn.ensemble.StackingRegressor()
カウンタをリストにする	list(aCounter)
日付時刻データの時刻	aDatetime.hour
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
n回の数値イテラブル	range(n)
リネン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
x軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
作画の背景色を暗くする	sns.set(style='darkgrid')
データシリーズの欠損値を直前の値に指定する	ds.fillna(method='ffill')
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
組の最後を除く	aTuple[:-1]
グラフの背景色を暗くする	sns.set(style='darkgrid')
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
行列の行ごとの分散	np.var(aArray, axis=1)
配列とリストの散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
option: フォントの色をミントクリームに設定する	color = 'mintcream'
ダークオレンジ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
ライトサーモン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
データフレームから列を二つ選択する	df[['列A', '列B']]
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
ダークスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslateblue')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
日付時刻データが火曜日かテストする	aDatetime.weekday() == 1
折れ線グラフの▲マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
スチールブルーにヒストグラムの色をセットする	plt.hist(データ列, color='steelblue')
ロジスティック回帰データフレームの散布図にを加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
空の両端キューを作成する	collections.deque()
データフレームの選択したカラムの欠損値を直後の値で補う	df[['列A', '列B']].fillna(method='bfill')
本日の日数	datetime.datetime.today().day
オブジェクトのハッシュ値	hash(obj)
線形回帰モデルの残差を求める	目的変数 - model.predict(説明変数)
ライトグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
ダークオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
データシリーズが何分か見る	ds.dt.minute
データフレームの選択したカラムの未入力値をxで埋める	df[['列A', '列B']].fillna(x)
コーンズシルク色としてヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: スチールブルーにフォントの色をセットする	color = 'steelblue'
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
入力から二つの文字列値を読む	A, B = map(str, input().split())
縦棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
nがn2よりも大きいかどうか調べる	n > n2
全部データフレームの指定したカラムの値を正規表現patternで置換する	df['列A'].replace(pattern, repl, regex=True)
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
ライトゴールドロディイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
表データのあるカラムが何分か見る	df['列A'].dt.minute
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
横棒グラフをやわらかい青色として描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: オールドレース色を使う	color = 'oldlace'
星マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
配列とリストについて散布図を描いて、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
文字列中にひとつでも非小文字があるか確認する	any(not c.islower() for c in s)
青いヒストグラムを描画する	plt.hist(データ列, color='b')
小数点数の指数	math.frexp(x)[1]
option: ダークグレー色を使う	color = 'darkgrey'
タプルが全て真かどうか調べる	all(aTuple)
option: ホワイトを使う	color = 'white'
ファイルパスを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
ベクトルの列ごとの平均	np.mean(aArray, axis=0)
実数を切り上げる	math.ceil(x)
フォーマットで列を日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
データフレームのあるカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
オブジェクトが文字列型か調べる	isinstance(obj, str)
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
モジュールを検索するパス	sys.path
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
データフレームからn行サンプリングする	df.sample(n)
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
option: 文字列の示すエンコーディングを使う	encoding = s
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
三つの実行結果を順にプリントする	print(value, value2, value3)
スクリプトの名前	sys.argv[0]
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
ヒストグラムをグリーン色として描画する	plt.hist(データ列, color='green')
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
やわらかい青色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
最後の部分文字列で文字列を二分し、最初の文字列を使う	s.rpartition(sub)[0]
データフレームのあるカラムが何時か見る	df['列A'].dt.hour
カテゴリでグループ化してデータフレームをに箱ひげ図でプロット化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
全要素を０で初期化した３二ビット整数型の行列を初期化する	np.zeros(行数, 列数, dtype=np.int16)
bとn2から成るペアを作る	(n, n2)
データフレームを小数点以下n桁で丸める	df.round(n)
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
イテラブルのイミュータブルな集合	frozenset(iterable)
標準入力を使う	sys.stdin
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
等量でリストをビン数nとしてビン分割する	pd.qcut(aList, n)
カーネル密度分布図を描く	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
データフレームをある列によって降順に破壊的にソートする	df.sort_values(by='列A', ascending=False, inplace=True)
データフレームを列名を指定して外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
データフレームをグループ化して、ヒストグラムを用いてグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
双方向キューの最後から要素を取り出す	deq.pop()
列から両端キューを生成する	collections.deque(iterable)
セットの全ての要素が別のセットに含まれるか調べる	aSet.issubset(aSet2)
日付時刻データをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
データフレームの選択したカラムの標本分散を求める	df[['列A', '列B']].var(ddof=0)
データフレームの行と列を入れ替える	df.T
y軸の目盛を表示しない	plt.yticks([])
日付時刻データとタイムスタンプデータの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
散布図をスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='skyblue')
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
カラーパレットを明るくする	sns.set(pallete='bright')
集合の浅いコピー	aSet.copy()
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
散布図に黒い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
三変数の最大値	max(x, y, z)
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
option: ゴーストホワイト色を使う	color = 'ghostwhite'
チョコレート色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
事前に正規表現をコンパイルする	re.compile(pattern)
あるカラムの文字列が部分文字列で始まらないデータを抽出する	df[~ df['列A'].str.startswith(部分文字列)]
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
データフレームを保存する	df.to_csv('file.csv')
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
日付時刻データが金曜日	aDatetime.weekday() == 4
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図をアリスブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
上限指定をした配列の算術平均を算出する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
折れ線グラフの色を紺碧に変更する	plt.plot(データ列x, データ列y, color='azure')
データフレームを散布図で可視化して、カテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
青いグリッド線を引く	plt.grid(color='b')
nとn2の論理和を求める	n | n2
データフレームの指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
option: プラム色を使う	color = 'plum'
カテゴリ別で色分けして、データフレームの全列の相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
データフレームのあるカラムを日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
現在のモジュールを得る	sys.modules[__name__]
データフレームの選択したカラムのNaNをその最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
option: 読み込みモードに指定する	mode = 'r'
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: ライトグリーンにグラフの色を設定する	color = 'lightgreen'
モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームの選択したカラムにおいてどの値が頻出か確認する	df[['列A', '列B']].mode()
データフレームの欠損値を数値で補う	df.fillna(x)
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
グラフの描画で暗く色テーマを用いる	sns.set(pallete='dark')
システム時刻で乱数を初期化する	random.seed()
縦棒グラフを描画し、、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
データフレームの欠損値を中央値で置換する	df.fillna(df.median())
ヒストグラムベースの勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.HistGradientBoostingRegressor()
データシリーズをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
空白で文字列を区切り、整数のリストに変換する	map(int, s.split())
関数の値によってデータフレームをグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
データフレームをグループ化し、平均値を求める	df.groupby('列A').mean()
リストの長さを見る	len(aList)
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
nとn2の和	n + n2
日付データからn秒分、減らす	aDate - datetime.timedelta(seconds=n)
横棒グラフをパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='purple')
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
n割るn2の切り上げ	(n + n2 - 1) // n2
黒い▽マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
option: ライトシアン色を用いる	color = 'lightcyan'
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
nをn2乗に増やす	n **= n2
option: コーンズシルクにフォントの色を設定する	color = 'cornsilk'
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
ロードされたモジュールを列挙する	sys.modules
データフレームをソートして、インデックスを振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
集合が空でないか調べる	len(aSet) != 0
データフレームをある列のカテゴリでグループ化して、グループ名で取り出す	df.groupby('列A').get_group(グループ名)
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
option: フォレストグリーン色を使う	color = 'forestgreen'
データ列とリストについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
nをn2で割った余りをnに代入する	n %= n2
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
文字列の先頭だけ大文字化する	s.capitalize()
カラムの正規分布を判定する	scipy.stats.shapiro(df['列A'])
整数nが集合のどれかかどうか	n in aSet
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
option: ミスティローズ色を用いる	color = 'mistyrose'
線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
リストのn番目以降の部分を得る	aList[n:]
option: どの行もカラムの名前にしない	header = None
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
グラフ中で日本語を使えるようにする	sns.set(font='IPAexGothic')
スタックに要素をエンキューする	deq.appendleft(element)
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
ダークグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データフレームを各グループごとに色分けして散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
２つの文字列をコロンで区切って表示する	print(value, value2, sep=':')
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
ダークシアン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
データシリーズの中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
青緑色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
文字列は組の要素か調べる	element in aTuple
数式を変数について微分する	sympy.diff(e, z)
表データの指定したデータ型の列名を列挙する	df.select_dtypes(型).columns
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
配列を標準化する	scipy.stats.zscore(配列)
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
option: ダークシアン色を使う	color = 'darkcyan'
リストとリストについて散布図を描き、、マーカーを▼に設定する	plt.plot(データ列x, データ列y, marker='v')
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
配列を等しい量になるようにn個にビン分割する	pd.qcut(aArray, n)
両端キューは空	len(deq) == 0
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
オブジェクトが組に含まれるか	element in aTuple
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
option: データ型を指定する	dtype = np.int
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
option: ダイアモンドマーカーを使う	marker = 'D'
option: 文字コードtextを使う	encoding = text
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: ホットピンク色を使う	color = 'hotpink'
両端キューのn番目に要素を挿入する	deq.insert(n, element)
グラフの中に枠なしの凡例を付ける	plt.legend(frameon=False)
リストとイテラブルの散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
三2ビット整数型のゼロ埋めされた配列を初期化する	np.zeros(要素数, dtype=np.int16)
組中の要素が少なくとも一つ真かどうか調べる	any(aTuple)
ダークシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
2進文字列を整数に変換する	int(s, 2)
浮動小数点数を千の位で丸める	round(x, -3)
データフレームから数値データを抽出する	df.select_dtypes('number')
グラフの凡例を表示する	plt.legend()
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
黒い三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
チョコレートにヒストグラムの色を指定する	plt.hist(データ列, color='chocolate')
データフレームのあるカラムは何年か見る	df['列A'].dt.year
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
ある列のカテゴリごとの最大値	df.groupby('列A').max()
行列の列ごとの最大値	np.max(aArray, axis=0)
表データからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
option: フォントの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
ある列の値がxに等しく、かつ別の列の値がyに等しい行を取り出す	df[(df['列A'] == x) & (df['列B'] == y)]
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
折れ線グラフの色をスチールブルーに変更する	plt.plot(データ列x, データ列y, color='steelblue')
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
折れ線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
option: 降順にする	ascending = False
リストの合計値を計算する	sum(aList)
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
指定した列のカテゴリで集計し、それぞれの最大値を求める	df.groupby('列A').max()
日付時刻データが火曜日	aDatetime.weekday() == 1
マルーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
リストとデータ列について散布図をプロットし、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
配列をビン分割する	pd.cut(aArray, aList)
標準出力のバッファをフラッシュする	sys.stdout.flush()
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
数値を下線付きにする	f'\033[4m{value}\033[0m'
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
文字列がいつまでも繰り返すイテラブル	itertools.repeat(element)
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
タイムスタンプデータが木曜日か調べる	aDatetime.weekday() == 3
散布図をポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
NaN	math.nan
タプルをナンバリングする	enumerate(aTuple)
option: 昇順にする	ascending = True
パープル色として散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
指定した列のカテゴリで集計し、それぞれの分散を求める	df.groupby('列A').var()
データフレームを整列し、新しいインデックスを振り直す	df.sort_values('キーとなる列').reset_index()
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
折れ線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
プラットホームがWindowsかどうか調べる	sys.platform.startswith('win32')
日付時刻データからn秒分減算する	aDatetime - datetime.timedelta(seconds=n)
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
データフレームを二つの列によって小さい順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X')
外れ値を除いた配列の分散を算出する	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
リストの要素を逆順にする	aList[::-1]
縦棒グラフをシアン色を使って描画する	plt.bar(データ列x, データ列y, color='cyan')
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
横棒グラフをチョコレート色を使って描画する	plt.barh(データ列x, データ列y, color='chocolate')
option: ピンク色を使う	color = 'pink'
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
データフレームの散布図をグループ化して縦横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
リストの最後を除く	aList[:-1]
データフレームのあるカラムの中の欠損値の合計を数える	df['列A'].isna().sum()
0から始まる無限数列を得る	itertools.count()
データ列を横棒プロットにする	plt.barh(ラベル列, データ列)
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
リストとイテラブルの散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
ビン数を設定して柱状図を描画する	plt.hist(データ列, bins=区関数)
option: 平均を加える	showmeans = False
option: ミディアムブルーを使う	color = 'mediumblue'
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
ファイルパスをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
rgbの丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ダークサーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
グリッド線	plt.grid(color='#800080')
データフレームの指定したカラムの平均値	df['列A'].mean()
タブで区切って二つの変数をプリントする	print(value, value2, sep='\t')
xを整数にする	int(x)
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
２つの数値をカンマで区切ってプリントする	print(value, value2, sep=',')
乱数を得る	random.random()
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
nとn2の値を足してnに代入する	n += n2
option: カラムの名前をリストで設定する	names = 列名リスト
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
日付時刻データの曜日を整数で使う	aDatetime.weekday()
スカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
横棒グラフをミディアムアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
ラベンダー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
option: グラフの色を珊瑚に設定する	color = 'coral'
ダーク・スラテグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
データフレームを欠損値を含めてある列の値でグループ化する	df.groupby('列A', dropna=False)
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
ファイルパスから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
縦棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
データフレームの先頭n行	df.head(n)
コーンズシルク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
縦棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
ふたつの列からグループ化し、最大値を算出する	df.groupby(['列A', '列B'], as_index=False).max()
変数を赤色にする	f'\033[31m{value}\033[0m'
辞書の項目名を列挙する	aDict.keys()
平均でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
データフレームの指定したカラムが正規分布からどの程度、尖っているか見る	df['列A'].skew()
スチールブルー色としてヒストグラムを描画する	plt.hist(データ列, color='steelblue')
option: 欠損値も無視しない	dropna = True
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
グラフの見た目を綺麗にする	import seaborn as sns
線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
option: 線を太くする	linewidth = 3.0
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
データシリーズの中にある文字列の合計を数える	ds.isin([value]).sum()
文字列を置き換える	s.replace(sub, newsub)
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
複素数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=bool)
イテラブルを累加する	itertools.accumulate(iterable)
列をいつまでも繰り返す	itertools.cycle(iterable)
縦棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
実数を二乗する	x ** 2
データフレームの指定したカラムの欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
データフレームをグループ化しある列に対し最小値を求める	df.groupby('列A')['列B'].min()
日付データが日曜日かどうか	aDate.weekday() == 6
追加できるように既存のファイルパスをEUCでオープンする]	open(filepath, mode='a', encoding='euc_jp')
折れ線グラフの大バツ印を黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームの選択した列の尖り	df[['列A', '列B']].skew()
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
指定した列のカテゴリで集計し、平均値を求める	df.groupby('列A').mean()
実数を小数点以下第一位で丸める	round(x, 1)
データフレームを並べて、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
両端キューに要素をプッシュする	deq.append(element)
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
option: グラフの色をダークグリーンにセットする	color = 'darkgreen'
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
データシリーズが何月か調べる	ds.dt.month
グラフの用途を画面に設定する	sns.set(context='notebook')
option: グラフの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
昇順にタプルを並べ変える	sorted(aTuple, reverse=True)
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
横棒グラフをゲインズボロ色として描画する	plt.barh(データ列x, データ列y, color='gainsboro')
指定した列のカテゴリで集計し、それぞれの分散を算出する	df.groupby('列A').var()
エクセルからデータフレームを読み込む	pd.read_excel('file.xlsx')
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
名前付きタプルを辞書にする	aNamedTupleObject._asdict()
書き込みモードでファイルをオープンする]	open(filepath, mode='w')
シアン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
データ列とリストの散布図を描画し、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
year年month月day日hour時の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
ヒストグラムをミディアムブルー色として描画する	plt.hist(データ列, color='mediumblue')
アルファベットの大文字を全部見る	string.ascii_uppercase
横棒グラフをダークバイオレット色を使って描画する	plt.barh(データ列x, データ列y, color='darkviolet')
データ列の変遷を点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
フォレストグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
ヒストグラムをライトブルー色として描画する	plt.hist(データ列, color='lightblue')
要素ひとつのタプル	(element,)
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
option: オレンジレッドにグラフの色を設定する	color = 'orangered'
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
数式を数値に変換する	float(e)
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームのn行目をドロップしてみる	df.drop(n, axis=0)
option: グラフの色をミッドナイトブルーにする	color = 'midnightblue'
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
文字列の大文字小文字を整える	s.casefold()
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
小数点数の整数部を求める	math.modf(x)[1]
ドジャーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
折れ線グラフのバツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: グラフの色をラベンダーに設定する	color = 'lavender'
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
option: コーンフラワーブルー色を使用する	color = 'cornflowerblue'
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
散布図のマーカーの太さを変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
データフレームの指定したカラムがどれだけ、分散しているか確認する	df['列A'].var()
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
数値を太字にする	f'\033[1m{value}\033[0m'
文字コードを文字にする	chr(unicode)
データフレームの欠損値をxで埋める	df.fillna(x)
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
複数のシートを指定してExcelからデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
データフレームの選択したカラムを10の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
option: 印をバツに変更する	marker = 'x'
散布図をビスク色を用いて描画する	plt.scatter(データ列x, データ列y, color='bisque')
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
辞書を階層化する	collections.ChainMap(aDict)
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
現在の作業ディレクトリ	os.getcwd()
ヒストグラムをロイヤルブルー色として描画する	plt.hist(データ列, color='royalblue')
指定したカラムの歪度	df['列A'].kurt()
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
リストのそれぞれを関数でフィルタする	filter(func, iterable)
データフレームをグループ化し、ある列に対し平均値を計算する	df.groupby('列A')['列B'].mean()
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
スプリンググリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
ダークバイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームの指定したカラムがどれだけ分散しているか見る	df['列A'].var()
option: グレー色を使う	color = 'gray'
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
xのハッシュ値	hash(x)
行列の行ごとの最大	np.max(aArray, axis=1)
棒グラフをサーモン色として描画する	plt.bar(データ列x, データ列y, color='salmon')
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
辞書の項目名を列挙する	list(aDict)
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
UTF8で文字列をバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
双方向キューの中に値が含まれてるか	element in deq
本日のタイムスタンプ	datetime.datetime.now()
部分文字列か	sub in s
散布図をダークグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgray')
黒い右三角マーカーをリストとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
散布図を赤い菱形マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
データフレームのあるカラムの年	df['列A'].dt.year
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
作画のカラーパレットを指定する	sns.set(pallete=パレット名)
空行をプリントする	print()
文字列中のパターンを新しい文字列で置き換える	re.sub(pattern, newsub, s)
文字列を新しい文字列によって置換する	s.replace(sub, newsub)
文字列を改行で区切る	s.splitlines()
CSVファイルのn行目をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
nではない	not n
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
データシリーズの標準偏差を計算する	ds.std()
表データを二つの列でまとめたグループ	df.groupby(['列A', '列B'])
option: 書き込みモードを使用する	mode = 'w'
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
option: レモンシフォンにフォントの色を設定する	color = 'lemonchiffon'
表データのある列を配列に変換する	df['列A'].values
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
option: 改行コードをWindowsに設定する	newline = '\r\n'
正規分布にしたがってランダムに配列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
文字列の開始位置と終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
データフレームの指定の列に重複があれば、ドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
双方向キューの要素をインプレースに反転する	deq.reverse()
データフレームをグループ化し、最小値を求める	df.groupby('列A').min()
列名を指定して二つのデータフレームをジョインする	pd.merge(df, df2, on='列A')
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
オリベドラブ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
アヤメのデータセットをデータフレームとしてロードする	df = sns.load_dataset('iris')
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
データフレームの列間の相関行列をまとめて求める	df.corr()
ディレクトリをPythonパスに追加する	sys.path.append(dir)
サドルブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
ヒストグラムの色をバリーウッドに指定する	plt.hist(データ列, color='burlywood')
乱数の行列を初期化する	np.random.random((行数, 列数))
リストの最後からn番目以前の部分を取り出す	aList[:-n]
データフレームを二つの列で降順に破壊的に整列する	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
小数点数の逆余弦	math.acos(x)
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
option: ピーチパフ色を用いる	color = 'peachpuff'
現在のUNIX時間	int(time.time())
散布図の△マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
動作環境がLinux	sys.platform.startswith('linux')
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
option: 青緑を使う	color = 'turquoise'
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
赤い菱形マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
キューの末尾に数値を追加する	deq.append(element)
グラフで使うx軸のラベルを指定する	plt.xlabel('x軸ラベル')
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
環境のエンディアンを知る	sys.byteorder
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
ピーチパフ色でヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
'A'列の値がxに等しい行を抽出する	df[df['列A'] == x]
線グラフを紺色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
タプルの最初の文字列を探す	aTuple.index(element)
グラフの描画でパステル調にカラーパレットを使用する	sns.set(pallete='pastel')
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
線グラフをミスティローズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mistyrose')
整数nがリストのどれかか調べる	n in aList
option: フォントの色をスチールブルーに設定する	color = 'steelblue'
散布図を茶色色を用いて描画する	plt.scatter(データ列x, データ列y, color='brown')
正規分布にしたがって配列の値が発生する累積確率を求める	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
文字列は文字列より辞書順で後	s > s2
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
右から文字列を部分文字列で区切る	s.rsplit(sub)
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
xの小数点以下'3'桁までの文字列にする	':.3f'.format(x)
棒グラフをミディアムブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumblue')
option: スラッシュをセパレータで使う	sep = '/'
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
イテラブルを文字列リストに変換して、カンマで結合する	','.join(map(str, iterable))
データフレームのある列の値がxに等しい行を抽出する	df[df['列A'] == x]
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
文字列をプリントする	print(value)
option: ブランチドアーモンド色を用いる	color = 'blanchedalmond'
数式のn階微分を行う	sympy.diff(e, z, n)
文字列の右端から部分文字列を取り除く	s.rstrip(sub)
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフをアクア色として描画する	plt.plot(データ列x, データ列y, color='aqua')
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
文字列が全て数字	s.isdigit()
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
サイコロ	random.randint(1, 6)
直後の値でカラムの欠損値を置き換える	df['列A'].fillna(method='bfill')
データフレームの指定したカラムの欠損値を最頻値に設定する	df['列A'].fillna(df['列A'].mode().iloc[0])
▽印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
ヒストグラムを描画して、ビンの数を設定する	plt.hist(データ列, bins=区関数)
ファイルを追加モードで開いて]、fとする	f = open(filepath, mode='a')
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
option: マーカーの色を濃い青にする	markerfacecolor = 'darkblue'
クラスが名前付きタプルか調べる	issubclass(C, tuple)
option: グラフの色をピンクに変更する	color = 'pink'
データ列の偏りを平方根変換する	np.sqrt(データ列)
グラフをスライドに変更する	sns.set(context='talk')
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
散布図の左三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ヒストグラムを描画し合計を1にする	plt.hist(データ列, density=True)
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
列の値によってデータフレームをグループ分けして、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
小数点数以上の最小の整数	math.ceil(x)
option: 左三角マーカーを用いる	marker = '<'
CSVファイルファイル名がか調べる	filename.endswith('.csv')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgrey')
ミディアムパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
option: ミディアムスプリンググリーンを使う	color = 'mediumspringgreen'
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
折れ線グラフの色をダークスラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategray')
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
データフレームの選択したカラムの統計量	df[['列A', '列B']].describe()
フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv('file.csv', float_format='%.3f')
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
項目名ワード引数として辞書に追加する	aDict.update(**kwargs)
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
二つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
データフレームの最初の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
貝殻色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
ふたつの集合は集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
実数が有限かどうか	math.isfinite(x)
文字列の末尾から部分文字列を探す	s.rfind(sub)
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
変数を緑色にする	f'\033[32m{value}\033[0m'
横棒グラフを耐火レンガ色として描画する	plt.barh(データ列x, データ列y, color='firebrick')
データフレームの一部のカラムを十の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
データフレームのn行目を削除し、	df.drop(n, axis=0)
散布図を黒い三角マーカーで描く	plt.plot(データ列x, データ列y, marker='^', c='k')
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
option: マーカーの色を白にする	markerfacecolor = 'white'
配列の和	aArray + aArray2
xとyの商と余りを同時に求める	divmod(x, y)
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
列のエポック秒を日付データに変換する	pd.to_datetime(df['列A'], unit='s', utc=True)
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
データ列をビン数nを使ってビン分割する	pd.cut(ds, n)
配列の最大値	np.max(aArray)
線グラフの色をダーク・スラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategrey')
データフレームをソートして、新しいインデックスを加える	df.sort_values('キーとなる列').reset_index()
ヒストグラムをバイオレット色で描画する	plt.hist(データ列, color='violet')
部分文字列で文字列が終わるか調べる	s.endswith(sub)
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
箱ひげ図を描画して平均値を加える	plt.boxplot(データ列, showmeans=True)
日本語をグラフ中で表示できるようにする	sns.set(font='IPAexGothic')
データフレームの選択したカラムを万の位で丸める	df[['列A', '列B']].round(-4)
線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
散布図をダークシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
データフレームを表示するとき、ヘッダー行を左寄せに指定する	pd.set_option('colheader_justify', 'left')
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
文字列中から部分文字列を見つける	s.find(sub)
文字列の右側から改行を除く	s.rstrip('\n')
縦棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
ダークカーキ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
option: ダークマゼンタ色を使用する	color = 'darkmagenta'
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
折れ線グラフの色をダークカーキにセットする	plt.plot(データ列x, データ列y, color='darkkhaki')
グラフの横軸を対数に変更する	plt.xscale('log')
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
折れ線グラフを珊瑚色で描画する	plt.plot(データ列x, データ列y, color='coral')
勾配ブースティング分類木を準備する	model = sklearn.ensemble.GradientBoostingClassifier()
組をミュータブルにする	list(aTuple)
散布図を黒い大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X', c='k')
エクセルファイルから複数のシートを読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
グラフのカラーパレットを全般的に濃くする	sns.set(pallete='deep')
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
配列のトリム平均を求める	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
横棒グラフをロージーブラウン色として描画する	plt.barh(データ列x, データ列y, color='rosybrown')
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
option: 色をロイヤルブルーに設定する	color = 'royalblue'
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
折れ線グラフの色をライトコーラルにセットする	plt.plot(データ列x, データ列y, color='lightcoral')
二つの列によってデータフレームをソートする	df.sort_values(by=['列A', '列B'])
散布図の四角印を赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
数字を全部使う	string.digits
折れ線グラフをダークゴールデンロッド色を使って描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
文字列の開始位置から終了位置までの範囲で部分文字列の出現	s.count(sub, start, end)
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
カウンタを高頻出方からリストとして得る	aCounter.most_common()
折れ線グラフの左三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
浮動小数点数以下の最大の整数	math.floor(x)
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
複数のシートをデータフレームとしてエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
横棒グラフの色をバイオレットにする	plt.barh(データ列x, データ列y, color='violet')
ターコイズ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフに赤い丸印を描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
predicateFuncが真とならないシーケンスの要素	itertools.dropwhile(predicateFunc, iterable)
タプルを逆順にする	aTuple[::-1]
option: 真紅色を用いる	color = 'crimson'
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
option: ライトスレイグレー色を使う	color = 'lightslategray'
データフレームの選択したカラムの欠損値をxにする	df[['列A', '列B']].fillna(x)
文字列の開始位置から先に部分文字列が含まれないか	s.find(sub, start) == -1
デックの要素を右にn個分ローテンションする	deq.rotate(n)
折れ線グラフの印をポイントにする	plt.plot(データ列x, データ列y, marker='.')
整数の順列の総数	math.perm(n)
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
縦棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
リストと数列についての散布図にrgbの菱形マーカーをプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
nがn2以下、もしくはn3以上か調べる	n <= n2 or n >= n3
最後の部分文字列で文字列を二分割する	s.rpartition(sub)
回帰分析をPLSで行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
カウンタをイテラブルから作る	collections.Counter(iterable)
predicateFuncがtrueとなる列の部分	itertools.dropwhile(predicateFunc, iterable)
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
リストを等量でn個にビン分割する	pd.qcut(aList, n)
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
データフレームをグループ化して、ヒストグラムで描画する	sns.histplot(df, x='列名', hue='カテゴリ名')
グラフの色を淡くする	sns.set(pallete='muted')
ファイル名がTSVファイルか確認する	filename.endswith('.tsv')
ライトコーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
option: マーカーの色をやわらかい青にする	markerfacecolor = 'cornflowerblue'
データフレームの列のユニークな値の個数を見る	df[col].nunique()
文字列全体を正規表現に大文字・小文字を無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
配列の行ごとの最大値	np.max(aArray, axis=1)
データフレームを昇順にインデックスによってソートする	df.sort_index(ascending=True)
折れ線グラフに赤いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
縦棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
商と余りを同時に計算する	divmod(x, y)
数式のパラメータを数式で置き換える	e.subs(z, e2)
グラフを論文に指定する	sns.set(context='paper')
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
データフレームの選択したカラムの中に日付データと文字列が存在する	df[['列A', '列B']].isin([value, value2])
パパイヤウィップ色でヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
ヒストグラムと勾配ブースティングでクラス分類をする	model = sklearn.ensemble.HistGradientBoostingClassifier()
0からN未満までの行列	np.arange(N)
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
縦棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
要素がマップの値に含まれていないかどうか確認する	element not in aDict.values()
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
書き込みできるようにファイルをオープンする]	open(filepath, mode='w')
折れ線プロットにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
データシリーズの欠損値を第二四分位数に設定する	ds.fillna(ds.median())
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
赤色で文字列をプリントする	print(f'\033[31m{value}\033[0m')
文字列のn番目の文字	s[n]
赤い星印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
ファイル全体を行単位で分割して読み込む	f.readlines()
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
実数の床	math.floor(x)
縦棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
option: グラフの種類を実線にセットする	linestyle = 'solid'
イテラブルの散布図を描画する	plt.scatter(データ列x, データ列y)
文字列中にひとつでも非大文字が含まれるか	any(not c.isupper() for c in s)
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
文字列中に非数字が含まれるか確認する	any(not c.isdigit() for c in s)
日付データの年数	aDate.year
配列を分割数nを用いて分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
データシリーズの中にと日付データがいくつ存在するか数える	ds.isin([value, value2]).sum()
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
散布図の丸印の大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
データフレームの欠損値を平均値で置換する	df.fillna(df.mean())
タプルのn番目からn2番目までの部分	aTuple[n:n2]
アヤメのデータセットからデータフレームを読み込む	df = sns.load_dataset('iris')
カウンタをイテラブルで更新する	aCounter.update(iterable)
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
option: 印をダイアモンドに変える	marker = 'D'
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
グリッドを点線にする	plt.grid(linestyle='dotted')
文字列の変数名を数式に変換する	sympy.Symbol(s)
配列の列ごとの合計値	np.sum(aArray, axis=0)
ダークオリーブグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
nが5の倍数か調べる	n % 5 == 0
エクセルファイルファイルからCSVファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
あらかじめASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
ゼロ埋めされた三二ビット整数型の配列を作る	np.zeros(要素数, dtype=np.int16)
ヒストグラムの色をドジャーブルーに指定する	plt.hist(データ列, color='dodgerblue')
カウンタをリストに変換する	list(aCounter)
ファイルが存在しないか調べる	not os.path.exists(filepath)
オプションで、標準エラーを使う	file = sys.stderr
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
辞書からキーの値	aDict.get(key)
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
行列の転置行列	aArray.T
タプルのn番目の	aTuple[n]
散布図をゴールド色として描画する	plt.scatter(データ列x, データ列y, color='gold')
ミディアムオーキッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ブール型のゼロ埋めした配列	np.zeros(要素数, dtype=np.int32)
シエナにヒストグラムの色を設定する	plt.hist(データ列, color='sienna')
折れ線グラフにポイント印を使う	plt.plot(データ列x, データ列y, marker='.')
文字列が文字列リストに含まれるか	s in aStringList
線グラフをブラック色として描画する	plt.plot(データ列x, データ列y, color='black')
データフレームの指定したカラムの空文字を欠損値に変換し、ドロップする	df['列A'].replace('', np.nan).dropna()
データフレームをインデックスによってソートする	df.sort_index()
符号付き整数の最大値を調べる	sys.maxsize
タプル内の要素が全て真か調べる	all(aTuple)
クラス分類をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列中の部分文字列の出現をカウントする	s.count(sub)
ひとつでもアスキー文字が文字列内に含まれるか調べる	any(c.isascii() for c in s)
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()
標準入力から1行読む	sys.stdin.readline()
折れ線グラフをグリーンイエロー色として描画する	plt.plot(データ列x, データ列y, color='greenyellow')
日付時刻データと日付時刻データの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
option: アンティークホワイト色を用いる	color = 'antiquewhite'
ダークバイオレット色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ランダムに5行を重複ありでデータフレームからサンプリングする	df.sample(5, replace=True)
option: マーカーの色を淡い茶色にする	markerfacecolor = 'tan'
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
タプルをコピーする	dict(aDict)
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
リストにリストを追加して広げる	aList.extend(aList2)
データフレームの尖度	df.skew()
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
折れ線グラフを色付きの一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
データフレームの複数の列を消す	df.drop(['列A', '列B'], axis=1, inplace=True)
option: フォントの色をライトスチールブルーに設定する	color = 'lightsteelblue'
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
縦棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
データフレームの中にいくつ文字列が含まれるか求める	df.isin([value]).sum()
option: バッファリングのサイズを大きくする	buffering = 4096
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
散布図に青いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
モデルをあてはめる	model.fit(説明変数, 目的変数)
リストをダミー変数にする	pd.get_dummies(リスト)
option: ミディアムターコイズ色を用いる	color = 'mediumturquoise'
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
ヒストグラムをロージーブラウン色を使って描画する	plt.hist(データ列, color='rosybrown')
白い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
四分位数ごとに配列をビン分割する	pd.qcut(aArray, 4)
文字列内にひとつでも大文字があるか調べる	any(c.isupper() for c in s)
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
ヒストグラムベースの勾配ブースティング分類木を作成する	model = sklearn.ensemble.HistGradientBoostingClassifier()
文字列の示すエンコーディングで既存のファイルを追加できるように開く]	open(filepath, mode='a', encoding=s)
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
リストをひとつ置きに抽出する	aList[::2]
2つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
オプションで、標準エラーに出力する	file = sys.stderr
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
双方向キューの最初の要素を使う	deq[0]
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
option: 先頭のカラムをインデックスに設定する	index_col = 0
散布図に大バツマーカーを加える	plt.scatter(データ列x, データ列y, marker='X')
y軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
2つの変数を同じ値にする	x = y = n
カウンタ同士で積集合	aCounter & aCounter2
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
rgbの三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
青紫色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームの選択したカラムが正規分布からどの程度、尖っているか見る	df[['列A', '列B']].skew()
ファイルをバイナリ書き込みモードとしてオープンする]	open(filepath, mode='wb')
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
グラフを使う	import matplotlib.pyplot as plt
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
コマンドの第2引数を確認する	sys.argv[1]
赤い破線を使ってデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列の先頭	s[0]
nが-9以上、9以下か調べる	-9 <= n <= 9
線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
本日が日曜日か	datetime.datetime.today().weekday() == 6
文字列を最後の部分文字列で分割したときの後半の文字列	s.rpartition(sub)[-1]
折れ線グラフに赤い上三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
折れ線グラフの△マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
JSONフォーマットの文字列を読み込む	json.loads(jsonString)
赤い大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='r')
ユーザから入力される	input()
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
折れ線グラフに青い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ブラック色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
タプルの値だけプリントする	print(*aTuple)
タイムスタンプデータからn日分、減算する	aDatetime - datetime.timedelta(days=n)
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
重回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
ヒストグラムの色をゴールドにする	plt.hist(データ列, color='gold')
紺碧色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
青いダイアモンド印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
辞書の値の一覧	aDict.values()
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
散布図の丸マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
option: インデックスを自動的な連番に設定する	index_col = None
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
カラムのトリム平均を計算する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
標準入力から1文字だけ読み込む	sys.stdin.read(1)
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
二次元リストをフラット化する	sum(aList)
散布図に青い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
x軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
日付データが何曜日か知る	aDate.weekday()
ミントクリーム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームの指定したカラムの欠損値をxで埋める	df['列A'].fillna(x)
整数nを十六進文字列にする	hex(n)[2:]
カウンタの正のカウントのみ残す	+aCounter
データフレームから型リストで指定したデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
縦棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
option: グラフの色をフクシアに設定する	color = 'fuchsia'
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
n個にデータ列を等間隔でビン分割する	pd.cut(ds, n)
アルファベットを全部使う	string.ascii_letters
数列とリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
rgbの左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
ファイルが存在するか確認する	os.path.exists(filepath)
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
折れ線グラフをダークターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
二つの文字列は同じか調べる	s == s2
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
option: 青緑を使う	color = 'teal'
option: フォントの色を耐火レンガに指定する	color = 'firebrick'
実数の逆正弦を計算する	math.asin(x)
横方向に複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=1)
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
折れ線グラフをスノー色を用いて描画する	plt.plot(データ列x, データ列y, color='snow')
option: グリーン色を使う	color = 'green'
ある列の値がxより大きくyより小さい行を抽出する	df[(x < df['列A']) & (df['列A'] < y)]
日付時刻データをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
変数について数式の微分を行う	sympy.diff(e, z)
散布図を淡いピンク色色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightpink')
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
実数のn乗して実数による余りを求める	pow(x, n, y)
線グラフの色をフクシアに変更する	plt.plot(データ列x, データ列y, color='fuchsia')
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
円グラフを真円にする	plt.axis('equals')
散布図にrgbの星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c=rgb)
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
option: デピンク色を使う	color = 'deeppink'
データ列を円プロットにする	plt.pie(データ列, startangle=90)
n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
パールバイオレットレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
ダーク・スラテグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
データ列の折れ線プロットを描画して色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
散布図の星マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
オレンジレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
イテラブルの各要素を関数でフィルタする	map(func, iterable)
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
カテゴリ列で色分けしてデータフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
目盛り線	plt.grid(linewidth=3.0)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
nがn2か調べる	n == n2
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
シエナにヒストグラムの色をセットする	plt.hist(データ列, color='sienna')
データフレームを二つの列にグループ化し、、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
リネン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
カラムのケンドールの相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
ペルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
集合＼集合	aSet.difference(aSet2)
option: スラグレーにグラフの色を設定する	color = 'slategray'
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
リストの平均値	sum(aList)/len(aList)
データシリーズを十の位で四捨五入して整数型にする	ds.round(-1).astype(int)
文字列は全て識別子名か調べる	s.isidentifier()
タイムスタンプデータを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
ヒストグラムをライトスカイブルー色を使って描画する	plt.hist(データ列, color='lightskyblue')
option: 貝殻を使う	color = 'seashell'
option: データ型を指定する	dtype = bool
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
option: グラフの色をクリムゾンにセットする	color = 'crimson'
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
option: セパレータをスラッシュにする	sep = '/'
横棒プロットを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
リストと配列についての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
リストをナンバリングする	enumerate(aList)
実数の逆双曲線正弦	math.asinh(x)
文字列は全て数値か	s.isnumeric()
サンディーブラウン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
文字列を部分文字列で分けたときの後半の文字列を取り出す	s.partition(sub)[-1]
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
乱数生成系列をnで初期化する	random.seed(n)
日付データが何月か知る	aDate.month
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
空のロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
option: タン色を使う	color = 'tan'
折れ線グラフの色をナバホホワイトにセットする	plt.plot(データ列x, データ列y, color='navajowhite')
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
リストとリストの散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
rgbの▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ヒストグラムをクリムゾン色として描画する	plt.hist(データ列, color='crimson')
option: シートの名前を設定する	sheet_name = ['A', 'B']
表を2つの列によって降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
データフレームのあるカラムの曜日が何日目か見る	df['列A'].dt.dayofweek
折れ線グラフの色をダークマゼンタにセットする	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
データフレームからランダムに5行を抽出する	df.sample(5)
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
リストとデータ列についての散布図に黒い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフの▲マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
ライトグリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
整数nの2進数文字列	bin(n)[2:]
線形モデルの回帰変数を使う	model.coef_
青紫色としてヒストグラムを描画する	plt.hist(データ列, color='violet')
データフレームの指定したカラムの値が欠損値か調べる	df['列A'].isna()
実数をn乗する	x ** n
タプルの浅いコピーを作る	aDict.copy()
グラフをポスター用に指定する	sns.set(context='poster')
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
フローラルホワイト色としてヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
指定した列を百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
option: ダークマゼンタにグラフの色を設定する	color = 'darkmagenta'
折れ線グラフの色をバイオレットにセットする	plt.plot(データ列x, データ列y, color='violet')
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: 色をライトサーモンに設定する	color = 'lightsalmon'
データフレームのあるカラムの不偏分散を求める	df['列A'].var(ddof=1)
本日の曜日を整数で使う	datetime.datetime.today().weekday()
線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
日付時刻データをISO8601形式の文字列に変換する	aDatetime.isoformat()
浮動小数点数に実数をかける	x * y
暗い赤にヒストグラムの色を指定する	plt.hist(データ列, color='darkred')
表計算ファイルファイルでデータフレームを書き出す	df.to_excel('file.xlsx')
文字列をシンボルにして変数にする	z = sympy.Symbol(s)
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
文字列の開始位置からと終了位置の間に部分文字列がある	s.find(sub, start, end) != -1
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
散布図のポイントマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
グリッド線	plt.grid(alpha=0.5)
レベッカパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
コーンズシルク色で線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
線グラフをシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='cyan')
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
折れ線グラフに青いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
データシリーズを百の位で丸めて、整数型にする	ds.round(-2).astype(int)
変数を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの選択した列を百の位で丸めて、整数にする	df[['列A', '列B']].round(-2).astype(int)
データフレームからカテゴリデータの列名リストを使う	df.select_dtypes('object').columns
分数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
ファイルのディレクトリ名	os.path.dirname(filepath)
日付を表現した文字列を日付データに変換する	pd.to_datetime(日付を表現した文字列)
ヒストグラムをホットピンク色として描画する	plt.hist(データ列, color='hotpink')
配列の値が正規分布にしたがって発生する確率を計算する	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
option: グラフの色を青緑に設定する	color = 'teal'
配列のスピアマンの相関係数を求める	scipy.stats.spearmanr(配列, 配列2)
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
ヒストグラムの色をライトスチールブルーに指定する	plt.hist(データ列, color='lightsteelblue')
あるカラムの文字列に部分文字列が含まれる行を取り出す	df[df['列A'].str.contains(部分文字列)]
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
文字列の右側から改行を消す	s.rstrip('\n')
実行結果をシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
データフレームの指定したカラムの欠損値を平均値で埋める	df['列A'].fillna(df['列A'].mean())
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
ミッドナイトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='midnightblue')
タプルをnからナンバリングする	enumerate(aTuple, start=n)
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
データフレームの指定したカラムを十の位で四捨五入して整数にする	df['列A'].round(-1).astype(int)
データフレームのn行より前取り出す	df[:n]
青い下三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ラベンダーにヒストグラムの色を変更する	plt.hist(データ列, color='lavender')
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
実数を浮動小数点数で割った剰余	math.remainder(x, x2)
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
浮動小数点数を複素数にする	complex(x)
リストをnから番号付けする	enumerate(aList, start=n)
折れ線グラフの色をバイオレットに指定する	plt.plot(データ列x, データ列y, color='violet')
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
option: グラフの色を赤に設定する	color = 'red'
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
option: グラフの色を青緑に指定する	color = 'teal'
縦棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
オブジェクトが整数クラス	isinstance(obj, int)
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
指定した列リストのみ、データフレームの重複を見る	df.duplicated(subset=['列A', '列B'])
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
数式の微分を求める	sympy.diff(e)
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
指定したカラムを四捨五入して、整数にする	df['列A'].round().astype(int)
データフレームから重複したデータを残さず除く	df.drop_duplicates(keep=False)
散布図に赤いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データフレームの不偏標準偏差	df.std()
データ列をビン数nでビン分割する	pd.cut(ds, n)
折れ線グラフの▼マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
データフレームの列を折れ線グラフで図示する	plt.plot(df[column], df[column])
散布図の印を赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
オプションで、標準エラーを用いる	file = sys.stderr
サドルブラウン色としてヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
黒い▲マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
空の辞書を生成する	{}
二つのデータフレームを連結する	pd.concat([df, df2])
二つのデータフレームをジョインする	pd.merge(df, df2)
option: ラベンダー色を使う	color = 'lavender'
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
コーンフラワーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
プロットを画面用に指定する	sns.set(context='notebook')
折れ線グラフをダークバイオレット色として描画する	plt.plot(データ列x, データ列y, color='darkviolet')
データフレームの選択したカラムの中にいくつ文字列があるか数える	df[['列A', '列B']].isin([value]).sum()
データフレームを全部小数点以下n桁で丸める	df.round(n)
1で全要素を初期化したベクトル	np.ones(要素数, dtype=np.int)
縦棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
データフレームを表示するとき表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
nがn2よりも小さいか調べる	n < n2
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
等間隔でデータ列をn個にビン分割する	pd.cut(ds, n)
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームのNaNを直前の値に設定する	df.fillna(method='ffill')
複数のデータフレームを縦方向に一つにする	pd.concat([df, df2, df3], axis=1)
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
nからn2までのスライス	slice(n, n2)
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
散布図をコーラル色として描画する	plt.scatter(データ列x, データ列y, color='coral')
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
散布図のポイントマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
指定したカラムを千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
カラムのトリム分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
折れ線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
双方向キューの左にイテラブルの各要素を順に追加する	deq.extendleft(iterable)
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
option: 箱ひげ図に平均を加える	showmeans = False
指定したカラムの標本分散	df['列A'].var(ddof=0)
グラフのフォントを日本語表示に指定する	sns.set(font='IPAexGothic')
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
青い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
二つのデータフレームを異なる列をキーにして右結合する	pd.merge(df, df2, left_on='列A', right_on='列B', how='right')
折れ線グラフの大バツ印を青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
カラーバーを横向きで描く	plt.colorbar(orientation='horizontal')
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
データフレームが正規分布からどれだけ、歪んでいるか見る	df.kurt()
ヒストグラムをベージュ色として描画する	plt.hist(データ列, color='beige')
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
重複ありでランダムにn行を表データからサンプリングする	df.sample(n, replace=True)
option: コロンを区切りで用いる	sep = ':'
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
nの3乗を計算する	n ** 3
棒グラフをチョコレート色として描画する	plt.bar(データ列x, データ列y, color='chocolate')
文字列を評価する	eval(s)
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
色付きの点線としてリストの推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームの選択したカラムの欠損値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
線グラフをパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='purple')
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
ヒストグラムの区間を設定する	plt.hist(データ列, range=(start, end))
クラスのサブ型	issubclass(サブクラス, クラス)
文字列を黒色にする	f'\033[30m{value}\033[0m'
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
上限指定をしたデータフレームのカラムの分散を算出する	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: UTF8を使う	encoding = 'utf-8'
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
option: 追加モードを使う	mode = 'a'
小数点数の逆双曲線余弦	math.acosh(x)
文字列リストを一つにし、ひとつの文字列にする	''.join(aStringList)
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
option: 配列のデータ型を指定する	dtype = np.int8
option: アイボリー色を使う	color = 'ivory'
欠損値のある行をドロップする	df.dropna(inplace=True)
文字列の左側から空白を取り除く	s.lstrip(' ')
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
ヒストグラムをラベンダー色を使って描画する	plt.hist(データ列, color='lavender')
option: ASCII文字に限定する	flag = re.ASCII
option: グラフの色をライトサーモンに指定する	color = 'lightsalmon'
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
option: インディゴを使用する	color = 'indigo'
二つのデータフレームを列名を指定して左ジョインする	pd.merge(df, df2, on='列A', how='left')
日付データにn日分加算する	aDate + datetime.timedelta(days=n)
散布図の▲印の色を変える	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
部分文字列が文字列の終了位置より前に存在するかどうか調べる	s.find(sub, 0, end) != -1
折れ線グラフの星印の線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
option: アクアにグラフの色を指定する	color = 'aqua'
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
データフレームをまとめて四捨五入する	df.round()
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
データフレームの先頭10行	df.head(10)
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
option: ターコイズ色を使う	color = 'turquoise'
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
実数を三乗する	x ** 3
データフレームをグループ化し、ある列に対し分散を求める	df.groupby('列A')['列B'].var()
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
辞書をインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームのカラムの歪みを算出する	scipy.stats.skew(df['列A'], bias=False)
ファイルをUTF8としてオープンする]	open(filepath, encoding='utf-8')
文字列が全てアスキー文字か	s.isascii()
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
ヒストグラムの色をペールグリーンに変更する	plt.hist(データ列, color='palegreen')
全要素が初期値の行列を作成する	np.full((行数, 列数), 初期値, dtype=np.int)
縦棒グラフをタン色として描画する	plt.bar(データ列x, データ列y, color='tan')
アルファベットの小文字を全部使う	string.ascii_lowercase
色付きの一点鎖線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
数式を積分する	sympy.integrate(e)
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
ブランチドアーモンド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
option: マーカーを星に指定する	marker = '*'
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
オレンジレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
nまでの偶整数列	list(range(2, n, 2))
縦棒グラフをロージーブラウン色を使って描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
データシリーズを十の位で丸めて整数型にする	ds.round(-1).astype(int)
配列のスカラー倍	aArray * n
数値を紫色でプリントできる文字列にする	f'\033[35m{value}\033[0m'
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
文字列は全て印字できる	s.isprintable()
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
ヒストグラムをライトサーモン色を用いて描画する	plt.hist(データ列, color='lightsalmon')
グリッド線	plt.grid(linewidth=3.0)
ラベンダーブラッシュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ヒストグラムの色をミディアムターコイズにする	plt.hist(データ列, color='mediumturquoise')
データフレームから型リストデータ型の列のみ抽出する	df.select_dtypes(include=typeList)
暗い赤色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
データフレームをグループ化しある列に対し最大値を計算する	df.groupby('列A')['列B'].max()
ヒストグラムの色をタンに変更する	plt.hist(データ列, color='tan')
正規化されたヒストグラムをプロットする	plt.hist(データ列, density=True)
グラフを論文用に設定する	sns.set(context='paper')
整数nの二進文字列	bin(n)[2:]
CSVファイルをヘッダを指定せず読み込む	pd.read_csv('file.csv', header=None)
option: マーカーをダイアモンドに変更する	marker = 'D'
ライトスレイグレーにヒストグラムの色を変更する	plt.hist(データ列, color='lightslategrey')
データフレームのn行以降抽出する	df[n:]
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
option: 色をミディアムブルーに設定する	color = 'mediumblue'
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
データフレームの標本標準偏差	df.std(ddof=1)
オブジェクトの参照カウント	sys.getrefcount(obj)
option: 先頭の行をカラムの名前に設定する	header = 0
データフレームの選択した列の相関行列をスピアマン相関係数として求める	df[['列A', '列B']].corr(method='spearman')
データフレームの複数の列を削除し、みる	df.drop(['列A', '列B'], axis=1)
散布図に黒い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='k')
縦棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
折れ線グラフの色をシスルに指定する	plt.plot(データ列x, データ列y, color='thistle')
文字列が全て英数字	s.isalnum()
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
ペルー色でヒストグラムを描画する	plt.hist(データ列, color='peru')
数列の相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
コマンドの第二引数を調べる	sys.argv[1]
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
オリベドラブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
散布図のマーカーを菱形印にする	plt.scatter(データ列x, データ列y, marker='D')
データフレームの中である列に重複があれば、ドロップする	df.drop_duplicates(subset='列A', inplace=True)
折れ線グラフの色をシーグリーンに指定する	plt.plot(データ列x, データ列y, color='seagreen')
ビン数nでデータ列をビン分割する	pd.cut(ds, n)
option: グラフの色をライトグリーンに変更する	color = 'lightseagreen'
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
データフレームの選択したカラムの中にある文字列と文字列の合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
表データのあるカラムを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
データフレームの中に日付データと文字列があるか判定する	df.isin([value, value2])
句読点文字を全部求める	string.punctuation
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
多次元データをMSDとして濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
option: セパレータを文字列にする	sep = s
正則化付き単回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
ベクトルの型	aArray.dtype()
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
ダークスラテグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
データフレームの統計量	df.describe()
option: グラフの色をグレーに設定する	color = 'grey'
ライトスチールブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
ファイルのファイル名	os.path.basename(filepath)
縦棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
中央値でカラムの欠損値を置き換える	df['列A'].fillna(df['列A'].median())
欠損値がある行をドロップしてみる	df.dropna()
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
データフレームの選択したカラムの欠損値をxに設定する	df[['列A', '列B']].fillna(x)
リストとデータ列の散布図を描画してマーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
辞書のキーを列挙する	aDict.keys()
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
option: フォントの色をディムグレーに設定する	color = 'dimgray'
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
データフレームからランダムにn行を抽出する	df.sample(n)
データフレームをインデックスをキーにしてソートする	df.sort_index()
散布図にダイアモンドマーカーを用いる	plt.scatter(データ列x, データ列y, marker='D')
データフレームの一部の列の相関行列を計算する	df[['列A', '列B']].corr()
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
文字列の開始位置と終了位置の間に部分文字列が含まれるか	s.find(sub, start, end) != -1
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
実線を使ってデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームのある列の値がxより少ない行を抽出する	df[df['列A'] < x]
option: ダークスレートブルー色を用いる	color = 'darkslateblue'
散布図をパウダーブルー色として描画する	plt.scatter(データ列x, データ列y, color='powderblue')
ある列の値がx以上、y以下の行を抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
横棒グラフの色を珊瑚にする	plt.barh(データ列x, データ列y, color='coral')
データフレームのカラムのユニークな値	df[col].unique()
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
乱数シードを初期化する	random.seed()
ロードされたモジュールの一覧	sys.modules
実部と虚部から複素数	complex(x, y)
n個にデータフレームの中の列を等間隔でビニングする	pd.cut(df[col], n)
折れ線グラフをデピンク色として描画する	plt.plot(データ列x, データ列y, color='deeppink')
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
データフレームの選択したカラムの空文字をドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
綺麗なグラフを描画する準備をする	import seaborn as sns
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
空のロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
疑似乱数を生成する	random.random()
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
リストの長さを制限する	collections.deque(iterable, maxlen=n)
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
グラフにx=0の破線をつける	plt.axvline(x=0, linestyle='dashed')
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
日付データが月曜日か調べる	aDate.weekday() == 0
nがn2より大きい	n > n2
データシリーズの曜日は何日目か見る	ds.dt.dayofweek
データシリーズの標準偏差	ds.std()
整数nが配列のひとつかどうか調べる	n in aArray
ブランチドアーモンド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
option: UTF8を使用する	encoding = 'utf-8'
文字列が全て小文字か調べる	s.islower()
外れ値に強い線形分類モデルを用意する	model = sklearn.linear_model.HuberClassifier()
欠損値が存在する行を削除し、みる	df.dropna()
データシリーズの空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
表データの末尾100行を抽出する	df.tail(100)
リストを縦軸、配列を横軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
1行から2つの整数値を読む	A, B = map(int, input().split())
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
データシリーズの中にが含まれるかどうか調べる	ds.isin([value])
option: フォントの色をスレートブルーにする	color = 'slateblue'
ユニコードに対応する文字	chr(unicode)
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
回帰モデルを説明変数と目的変数を用いて学習する	model.fit(説明変数, 目的変数)
ムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
mathをインポートする	import math
option: ダークカーキ色を使う	color = 'darkkhaki'
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
二つの集合の対称差集合を使う	aSet.symmetric_difference(aSet2)
データフレームのあるカラムをインデックスに設定する	df.set_index('列A')
ファイルからストリームをオープンして]fileとする	file = open(filepath)
指定したカラムの欠損値を直前の値で埋める	df['列A'].fillna(method='ffill')
ヒストグラムのラインスタイルを一点鎖線に指定する	plt.hist(データ列, linestyle='dashbot')
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
データシリーズの中にいくつ欠損値が存在するか調べる	ds.isna().sum()
文字列をバイト列に変換する	bytes(s)
JSONファイルのfをデータに変換する	json.load(fin)
option: エンコーディングを文字列の示す文字コードに変更する	encoding = s
データフレームの次元数	df.shape
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
破線でリストの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
配列の幾何平均を求める	scipy.stats.gmean(配列)
リストの文字列が最初に見つかるインデックスを探す	aList.index(element)
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
option: グラフの色をダークバイオレットに指定する	color = 'darkviolet'
実行環境の再帰の最大回数	sys.getrecursionlimit()
seabornのデフォルトスタイルを適用する	sns.set()
整数nをn2分の一にする	n //= n2
線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
配列のユニークな要素とそのインデックスを求める	u, indices = np.unique(aArray, return_index=True)
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
データフレームの選択したカラムがどの程度、正規分布から歪んでいるか見る	df[['列A', '列B']].kurt()
黒い縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
データフレームの中の列を等しい量になるようにビン数nでビンニングする	pd.qcut(df[col], n)
線グラフを赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
option: ロイヤルブルー色を使う	color = 'royalblue'
折れ線グラフをパープル色を使って描画する	plt.plot(データ列x, データ列y, color='purple')
ライトシアン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
option: ホワイトスモーク色を使う	color = 'whitesmoke'
データシリーズの欠損値を最小値に設定する	ds.fillna(ds.min())
ゴールド色でヒストグラムを描画する	plt.hist(データ列, color='gold')
辞書のの一覧	aDict.values()
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
nの3乗を求める	n ** 3
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
二つの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
日付データをタプルにする	aDate.timetuple()
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
散布図に大バツ印を加える	plt.scatter(データ列x, データ列y, marker='X')
配列の偏差値を求める	50 + 10 * scipy.stats.zscore(配列)
列を文字列リストに変換して、タブを使って連結する	'\t'.join(map(str, iterable))
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
option: 色をリネンに設定する	color = 'linen'
ヒストグラムの色をパパイヤウィップに変更する	plt.hist(データ列, color='papayawhip')
option: グレー色を使う	color = 'grey'
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
xを論理値に変換する	bool(x)
データフレームのカラムのn次モーメントを求める	scipy.stats.moment(df['列A'], moment=n)
エクセルファイルから全てのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=None)
整数の階乗	math.factorial(n)
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
列の全順列	itertools.permutations(iterable)
実数の平方根を求める	math.sqrt(x)
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
ふたつの集合の対称差	aSet.symmetric_difference(aSet2)
データフレームをグループ化しある列の要約統計量を求める	df.groupby('列A').describe()['列B']
データフレームからカラムを二つだけ選択する	df[['列A', '列B']]
集合が空集合でないかどうか調べる	len(aSet) != 0
小数点以下の表示精度を設定する	pd.set_option('precision', n)
折れ線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
２つの実行結果をプリントする	print(value, value2)
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
リストをボックスチャートで描画する	plt.boxplot(データ列)
ファイルパスを文字コードtextとして開く]	open(filepath, encoding=text)
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
黄色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
ファイルからバイナリストリームを開き]、fとする	f = open(filepath, mode='rb')
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
日付時刻データからn分減らす	aDatetime - datetime.timedelta(minutes=n)
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
辞書でカウンタを更新する	aCounter.update(aDict)
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
タプルの先頭のn要素を取り除く	aTuple[n:]
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
空のカウンタ	collections.Counter()
シートの名前を指定してデータフレームをエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
データフレームの中に文字列があるか調べる	df.isin([value])
数値の部分分数化を行う	sympy.apart(e)
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
カーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
リッジ回帰とロッソ回帰の組み合わせた分析の準備をする	model = sklearn.linear_model.ElasticNet()
点間のユークリッド距離を求める	math.dist(point, point2)
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
リストとリストの散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
濃い青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
リストとリストについての散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgrey')
最大値でデータフレームの一部の列の未入力値を補う	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
要素が全て初期値の配列を作る	np.full(要素数, 初期値, dtype=np.int)
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
日付時刻データとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
タプルをひとつ置きに抽出する	aTuple[::2]
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
現在処理中の例外を情報	sys.exc_info()
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
折れ線グラフの大バツ印を赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
実数の三乗	x ** 3
折れ線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
1行だけ列を除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
説明変数と目的変数で回帰モデルを学習する	model.fit(説明変数, 目的変数)
ヒストグラムの色をネイビーに変更する	plt.hist(データ列, color='navy')
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
option: パレットトルコイズを使う	color = 'paleturquoise'
データフレームから型の列だけ抽出する	df.select_dtypes(ty)
辞書順で二つの文字列を比較する	s < s2
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
辞書のキーを列挙する	list(aDict)
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
カウンタからゼロカウントを取り出す	+aCounter
縦棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
CSVを読み込む	pd.read_csv('file.csv', sep=',')
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
配列の要素ごとの積	np.multiply(aArray, aArray2)
辞書から項目名の値をエラーなく参照する	aDict.get(key, None)
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
行列の全要素の値を変更する	aArray[:, :] = 指定の値
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
option: グラフの色をグリーンイエローにする	color = 'greenyellow'
赤い上三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームのカラムのトリム分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
折れ線グラフの丸マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
半透明の実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
プログラムを異常終了する	sys.exit(1)
浮動小数点数を複素数に変換する	complex(x)
マッピングの値の一覧	aDict.values()
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
文字列を大文字・小文字を無視して正規表現で区切る	re.split(pattern, s, flags=re.IGNORECASE)
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
浮動小数点数の最小値	sys.float_info.min
データシリーズが正規分布からどの程度、尖っているか見る	ds.skew()
縦棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
三つ並べてリストをヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームの文字列を欠損値に変換する	df.replace(値, np.nan)
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
エンコーディング	sys.getdefaultencoding()
データフレームのあるカラムの標準偏差を求める	df['列A'].std()
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
ピアソンを使ってデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
日付時刻データにn秒分加算する	aDatetime + datetime.timedelta(seconds=n)
ミディアムスプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
ライトスレイグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないかどうか	s.find(sub, start, end) == -1
二つの文字列を順にプリントする	print(value, value2)
JSON形式の文字列を読み込む	json.loads(jsonString)
オブジェクトが論理値クラスかどうか調べる	isinstance(obj, bool)
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
配列の各要素の積	np.multiply(aArray, aArray2)
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: グラフの色をフクシアに指定する	color = 'fuchsia'
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
イテラブルの変遷を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
棒グラフをトマト色を使って描画する	plt.bar(データ列x, データ列y, color='tomato')
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
データフレームのあるカラムの値がNaN	df['列A'].isna()
option: ダークカーキにグラフの色を設定する	color = 'darkkhaki'
文字列がタイトルケースか調べる	s.istitle()
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
グラフを濃くする	sns.set(pallete='deep')
変数をスワップする	x, y = y, x
二つのオブジェクトが等しいか調べる	obj == obj2
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
option: カデットブルー色を使用する	color = 'cadetblue'
折れ線グラフの星マーカーを青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
データフレームの列からユニークな要素を抽出しリスト化する	df[col].unique().tolist()
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
ネイピア数	math.e
横棒グラフをライトスチールブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
データフレームの選択したカラムの尖度	df[['列A', '列B']].skew()
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームから型を選択する	df.select_dtypes(ty)
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
一点鎖線として配列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
タイムスタンプデータが何日か知る	aDatetime.day
データフレームの選択した列の第三四分位数	df[['列A', '列B']].quantile(0.75)
nとn2の商を求める	n / n2
連立方程式を解く	sympy.solve([e, e2])
データフレームの中のカラムをビン数nとして分割する	pd.cut(df[col], n)
配列のn次モーメントを求める	scipy.stats.moment(配列, moment=n)
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
t-SNEでパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
散布図に青い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
ファイルから読み込みストリームを使う	open(filepath)
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
ダークオリーブグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
黒いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
ヒストグラムの色をライトゴールドロディイエローに指定する	plt.hist(データ列, color='lightgoldenrodyellow')
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
現在が木曜日か調べる	datetime.datetime.today().weekday() == 3
文字列の終了位置以前に部分文字列が含まれないか確認する	s.find(sub, 0, end) == -1
2つのデータフレームを連結する	pd.concat([df, df2])
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
日付データからn秒分減算する	aDate - datetime.timedelta(seconds=n)
シエナ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
横棒グラフの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
スカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
文字列をシアンにする	f'\033[36m{value}\033[0m'
リストと数列について散布図を描いて大バツマーカーの色をrgbにする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
指定した列の値で集計し、合計を計算する	df.groupby('列A').sum()
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
散布図の△マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームのある列のNaNをxに設定する	df['列A'].fillna(x)
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
イテラブルから両端キューを作る	collections.deque(iterable)
データフレームのカラムのケンドールの相関係数を求める	scipy.stats.kendalltau(df['列A'], df['列B'])
データシリーズの欠損値を直前の値で埋める	ds.fillna(method='ffill')
カテゴリ別でグループ化して、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
実数の正接の逆数	math.atan(x)
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
棒グラフをグリーンイエロー色として描画する	plt.bar(データ列x, データ列y, color='greenyellow')
指定した列の標準偏差	df['列A'].std()
ミディアムスレートブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
option: オレンジレッドを使う	color = 'orangered'
year年をタイムスタンプに変換する	datetime.datetime(year=year, month=1, day=1)
カーキ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
いつまでもカウントアップする	itertools.count()
option: ダークグリーン色を使う	color = 'darkgreen'
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
データフレームのある列をドロップする	df.drop('列A', axis=1, inplace=True)
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
データ列の四分位を可視化する	plt.boxplot(データ列)
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
ラベンダーブラッシュ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
二つの値を文字列で区切ってプリントする	print(value, value2, sep=s)
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
自然数個からk個取り出したときの順列の総数を計算する	math.perm(n, k)
データシリーズの分散	ds.var()
option: サドルブラウン色を使う	color = 'saddlebrown'
option: 符号なし８ビット整数型を使う	dtype = np.uint8
小麦色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
nをn2だけ増加させる	n += n2
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
最大値・最小値の範囲で一様な疑似乱数を求める	random.uniform(最小値, 最大値)
データフレームの選択したカラムを千の位で丸めて整数型にする	df[['列A', '列B']].round(-3).astype(int)
折れ線グラフの色を小麦色に指定する	plt.plot(データ列x, データ列y, color='wheat')
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
データ列の変化を折れ線プロットで可視化する	plt.plot(range(len(データ列)), データ列)
アリスブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
タプルの末尾からn番目以前の部分を得る	aTuple[:-n]
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
データシリーズの不偏分散	ds.var(ddof=1)
オブジェクトは整数クラスか調べる	isinstance(obj, int)
黒い星マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='*', c='k')
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
ロージーブラウン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
縦棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
最適な位置に凡例を表示する	plt.legend(loc='best')
ヒストグラムをミディアムオーキッド色を用いて描画する	plt.hist(データ列, color='mediumorchid')
スタックを空にする	deq.clear()
JSON形式のファイル入力を読み込んで、dataとする	data = json.load(fin)
データフレームの最頻値を求める	df.mode()
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
マルーン色でヒストグラムを描画する	plt.hist(データ列, color='maroon')
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
散布図に丸マーカーを用いる	plt.scatter(データ列x, データ列y, marker='o')
改行する	print()
nが3で割り切れるか調べる	n % 3 == 0
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
データフレームから100行、サンプリングする	df.sample(100)
アクアマリン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
スタッキングを用いてクラス分類を行う	sklearn.ensemble.StackingClassifier()
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
実数の逆双曲線余弦	math.acosh(x)
配列の形状	aArray.shape
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
option: 改行しない	end = ''
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
ブラックにヒストグラムの色を設定する	plt.hist(データ列, color='black')
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
横棒グラフをライトブルー色を使って描画する	plt.barh(データ列x, データ列y, color='lightblue')
日付データにn時間分、加える	aDate + datetime.timedelta(hours=n)
散布図に黒い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
バギングを用いて回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
nが奇数か調べる	n % 2 == 1
整数nを八進文字列に変換する	oct(n)[2:]
ヒストグラムをサンディーブラウン色として描画する	plt.hist(データ列, color='sandybrown')
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
棒グラフをゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='goldenrod')
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
ファイル名がJSONファイル	filename.endswith('.json')
ゴールド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
ヒストグラムをイエローグリーン色として描画する	plt.hist(データ列, color='yellowgreen')
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
データフレームをCSV形式にインデックスを付けず保存する	df.to_csv('file.csv', index=None)
リストのn番目に文字列を挿入する	aList.insert(n, element)
option: グラフの色をサーモンに変更する	color = 'salmon'
option: フクシア色を使う	color = 'fuchsia'
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
グラフのタイトルを変更する	plt.title('グラフの名称')
棒グラフをシルバー色として描画する	plt.bar(データ列x, データ列y, color='silver')
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
行列の列	aArray[:, 列番号]
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightgreen')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
散布図をrgbの右三角マーカーで描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
文字列全体をパターンにマッチさせる	re.fullmatch(pattern, s)
縦棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategray')
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
数列とリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
最初のカテゴリーを除外してデータフレームのある列をダミー変数に変換する	pd.get_dummies(df['列A'], drop_first=True)
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
辞書をJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
日付時刻データの年	aDatetime.year
縦棒グラフを描く	plt.bar(ラベル列, データ列)
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの選択したカラムを10の位で丸める	df[['列A', '列B']].round(-1)
リストを青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
黒い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
表計算ファイルを読み込む	pd.read_excel('file.xlsx')
集合にタプルの要素を追加する	aSet.update(iterable)
オブジェクトのバイトサイズ	sys.getsizeof(obj)
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
option: エンコーディングをSJISに指定する	encoding = 'shift_jis'
文字列を赤色にする	f'\033[31m{value}\033[0m'
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
ヒストグラムをミッドナイトブルー色を用いて描画する	plt.hist(データ列, color='midnightblue')
文字列全体がパターンにマッチするか見る	re.fullmatch(pattern, s)
日付時刻データが何時か知る	aDatetime.hour
散布図をオールドレース色として描画する	plt.scatter(データ列x, データ列y, color='oldlace')
横棒グラフを青色として描画する	plt.barh(データ列x, データ列y, color='blue')
整数の二乗	x ** 2
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
option: パウダーブルーにグラフの色をセットする	color = 'powderblue'
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
データフレームの選択した列の欠損値を直後の値に指定する	df[['列A', '列B']].fillna(method='bfill')
文字列中の部分文字列をカウントする	s.count(sub)
ヒストグラムの色をミントクリームに指定する	plt.hist(データ列, color='mintcream')
データシリーズのメディアン	ds.median()
ヒストグラムをスラグレー色として描画する	plt.hist(データ列, color='slategrey')
option: ナバホホワイト色を使う	color = 'navajowhite'
n個に等間隔でリストをビンニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
option: ゲインズボロに色を指定する	color = 'gainsboro'
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
option: グラフの色をサンディーブラウンに指定する	color = 'sandybrown'
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
nullに等しい識別子	None
リストをn回、連結する	aList * n
データフレームを十の位で丸めて、整数型にする	df.round(-1).astype(int)
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
option: アンティークホワイト色を使用する	color = 'antiquewhite'
一点鎖線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
JSONファイルのファイル入力を辞書にする	json.load(fin)
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
ヒストグラムを赤くする	plt.hist(データ列, color='r')
データシリーズの未入力値を最頻値に指定する	ds.fillna(ds.mode().iloc[0])
rgbに横棒グラフの色を指定する	plt.barh(ラベル列, データ列, color=rgb)
表計算ファイルファイルを文字化けしないように読み込む	pd.read_csv('file.csv', encoding='shift_jis')
黒いダイアモンドマーカーをリストとイテラブルについての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='k')
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
折れ線グラフを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
部分文字列が部分文字列で開始するかどうか調べる	s.startswith(sub)
xの絶対値	abs(x)
青い一点鎖線でラインを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ムーア・ペンローズの擬似逆行列を使う	np.linalg.pinv(aArray)
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
列の名前を列挙する	df.columns
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
option: マーカーの色を赤にする	markerfacecolor = 'red'
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
グラフの描画で淡く色使いを用いる	sns.set(pallete='muted')
散布図に黒い三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c='k')
option: ペルー色を使う	color = 'peru'
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
コードポイントの最大値	sys.maxunicode
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
二点間のユークリッド距離を求める	math.dist(point, point2)
データフレームが正規分布からどの程度、尖っているか確認する	df.skew()
クラス分類をロバスト推定で行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
nかけるn2	n * n2
データフレームをある列をキーにして降順に破壊的に整列する	df.sort_values(by='列A', ascending=False, inplace=True)
ヒストグラムをダークカーキ色を用いて描画する	plt.hist(データ列, color='darkkhaki')
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
自然数の階乗	math.factorial(n)
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
option: グラフの線の種類を一点鎖線に設定する	linestyle = 'dashbot'
データフレームを百の位で丸める	df.round(-2)
ヒストグラムをレモンシフォン色として描画する	plt.hist(データ列, color='lemonchiffon')
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
データシリーズの中の欠損値の合計を数える	ds.isna().sum()
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
ライトグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
クラス分類のリコールを求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
棒グラフを紺碧色として描画する	plt.bar(データ列x, データ列y, color='azure')
マゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
option: グラフの色をオーキッドに設定する	color = 'orchid'
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
ベクトルを一次元にする	aArray.flatten()
散布図の▽印を黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
option: 下三角マーカーを使う	marker = 'v'
データフレームの指定したカラムが正規分布からどの程度、歪んでいるか見る	df['列A'].kurt()
組の各要素を関数に適用した結果で並べ直す	sorted(aTuple, key=func)
ロイヤルブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
データフレームの中の列をビン数nとして分割する	pd.cut(df[col], n)
ハイパボリック・サインの逆数	math.asinh(x)
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
文字列を左寄せにする	s.ljust(文字列幅)
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
カウンタのKトップをリストとして得る	aCounter.most_common(k)
サポートベクター分類モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
JSON形式の文字列をロードする	json.loads(jsonString)
横棒グラフをサンディーブラウン色を使って描画する	plt.barh(データ列x, データ列y, color='sandybrown')
マッピングのキーの一覧を得る	aDict.keys()
整数をゼロ埋めした文字列にする	str(n).zfill(文字列幅)
ボックスチャートをプロットして平均を加える	plt.boxplot(データ列, showmeans=True)
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
ファイルパスを書き込みモードで開き]、fとする	f = open(filepath, mode='w')
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
アンティークホワイト色を用いてヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
本日が何曜日か知る	datetime.datetime.today().weekday()
データフレームの欠損値が含まれる部分を	df.style.highlight_null()
配列の行ごとの合計値	np.sum(aArray, axis=1)
ある列の値がxより大きく、yより小さい行を抽出する	df[(x < df['列A']) & (df['列A'] < y)]
ヒストグラムの色をスラグレーに指定する	plt.hist(データ列, color='slategrey')
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
散布図に赤い星印を描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
テキストファイルファイル名がか調べる	filename.endswith('.txt')
option: マーカーをポイントに変える	marker = '.'
角度のラジアン	math.radians(degree)
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
配列のケンドールの相関係数を求める	scipy.stats.kendalltau(配列, 配列2)
データフレームの選択した列の不偏標準偏差を求める	df[['列A', '列B']].std()
リストとリストについての散布図に黒い右三角マーカーを描く	plt.plot(データ列x, データ列y, marker='>', c='k')
option: マーカーを丸に変更する	marker = 'o'
ヒストグラムをアイボリー色として描画する	plt.hist(データ列, color='ivory')
散布図をインディアンレッド色として描画する	plt.scatter(データ列x, データ列y, color='indianred')
縦棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
グラフを綺麗にする	import seaborn as sns
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
整数nの二進表現	bin(n)
オブジェクトをイテラブルに変換する	iter(obj)
ライトイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightyellow')
全てのシートを表計算ファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=None)
リストの折れ線プロットを描画して、色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
配列を平坦化する	aArray.flatten()
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
配列のn次モーメント	scipy.stats.moment(配列, moment=n)
option: 文字列をセパレータで使う	sep = s
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
縦軸の目盛を表示しない	plt.yticks([])
浮動小数点数の正弦	math.sin(x)
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
xを整数に変換する	int(x)
オブジェクトが辞書クラスか	isinstance(obj, dict)
折れ線グラフの右三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
ホワイトスモーク色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
散布図の左三角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
方程式として数式の変数の解を求める	sympy.solve(e, z)
棒グラフをレモンシフォン色を使って描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
欠損値のある行を削除する	df.dropna(inplace=True)
カラムの偏差値を求める	50 + 10 * scipy.stats.zscore(df['列A'])
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
カテゴリデータを数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
数字を全部求める	string.digits
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
データフレームの一部のカラムの母標準偏差	df[['列A', '列B']].std(ddof=0)
散布図をパレットトルコイズ色として描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
右三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='>')
numpyを使う	import numpy as np
ライトスレイグレーにヒストグラムの色をする	plt.hist(データ列, color='lightslategray')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
三つの文字列を順にプリントする	print(value, value2, value3)
nをn2で割った値を切り上げる	(n + n2 - 1) // n2
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
データフレームを二つの列によって降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False)
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
あるカラムの文字列が正規表現にマッチするデータを抽出する	df[df['列A'].str.match(正規表現)]
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
option: ライトスレイグレー色を使う	color = 'lightslategrey'
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
列を指定して重複をドロップする	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
データフレームのあるカラムが何月か見る	df['列A'].dt.month
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
タイムスタンプデータと日付時刻データの時間差を秒数で算出する	(aDatetime - aDatetime2).total_seconds()
新しい部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
リストをランダムにシャッフルする	random.shuffle(aList)
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
nをn2分の1にする	n /= n2
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
配列をn個にビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの色を青緑に変更する	plt.plot(データ列x, データ列y, color='teal')
縦棒グラフをパールバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palevioletred')
データフレームを配列に変換する	df.values
集合に値を追加する	aSet.add(element)
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
配列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(配列, loc=平均値, scale=標準偏差)
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
指定したカラムがどの程度分散しているか確認する	df['列A'].var()
ファイルパスからストリームをオープンして]、fileとする	file = open(filepath)
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
オブジェクトの型を見る	type(obj)
グラフの縦横比を等しくする	plt.axis('equals')
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
option: アンティークホワイト色を使う	color = 'antiquewhite'
option: グラフの色をベージュにセットする	color = 'beige'
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
ヒストグラムをハニーデュー色を用いて描画する	plt.hist(データ列, color='honeydew')
グリッド線を黒くする	plt.grid(color='k')
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
実数の双曲線余弦を計算する	math.cosh(x)
二つの列の値によってデータフレームを集計して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
数列の相関係数を計算する	scipy.stats.pearsonr(数列, 数列2)
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
縦棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
データフレームの不偏標準偏差を計算する	df.std()
データ列のエポック秒をタイムスタンプにする	pd.to_datetime(ds, unit='s', utc=True)
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
ファイルをSJISで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='shift_jis')
最大値・最小値の範囲で一様な疑似乱数を算出する	random.uniform(最小値, 最大値)
リストとリストについての散布図にrgbの左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
表データのあるカラムは何曜日か知る	df['列A'].dt.weekday_name
オブジェクトはバイト列クラスのインスタンス	isinstance(obj, bytes)
文字列の右側から空白を取り除く	s.rstrip(' ')
ヒストグラムをスチールブルー色を用いて描画する	plt.hist(データ列, color='steelblue')
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
ドジャーブルー色でヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
カラムの最大幅をnに増やす	pd.set_option('max_colwidth', n)
散布図をライトスチールブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
折れ線グラフの大バツ印を黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
文字列を走査しパターンにマッチするか調べる	re.search(pattern, s)
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
データフレームの列の名前の一覧を使う	df.columns
option: フォレストグリーン色を使用する	color = 'forestgreen'
option: グラフの色をダークオレンジに指定する	color = 'darkorange'
大きい順にデータフレームをある列によってソートする	df.sort_values(by='列A', ascending=False)
データフレームの一部のカラムの中にいくつがあるか求める	df[['列A', '列B']].isin([value]).sum()
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
日付時刻データからn週間を減算する	aDatetime - datetime.timedelta(weeks=n)
実数を実数で割って、切り捨てる	x // y
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
部分文字列が文字列の開始位置先に含まれるかどうか確認する	s.find(sub, start) != -1
タプルの最後を使う	aTuple[-1]
オブジェクトはリストクラスか調べる	isinstance(obj, list)
データシリーズを10000の位で丸める	ds.round(-4)
ブラウン色のヒストグラムを描画する	plt.hist(データ列, color='brown')
データフレームをある列のカテゴリでグループ化して、それぞれのグループごとの件数を知る	df.groupby('列A').size()
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
データフレームの中の列を分割する	pd.cut(df[col], aList)
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
整数nが配列のどれかか調べる	n in aArray
シャルトリューズにヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
文字列は平仮名か確認する	('ぁ' <= ch <= 'ん')
データフレームから重複をドロップする	df.drop_duplicates(inplace=True)
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
指定した列で集計し、各標準偏差を計算する	df.groupby('列A').std()
改行なしに変数を表示する	print(value, end='')
データ列を全てタイムスタンプ型に変換する	pd.to_datetime(ds)
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
ASCII限定として事前に正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
散布図の下三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
リストとイテラブルについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
option: SJISを使用する	encoding = 'shift_jis'
棒グラフをゲインズボロ色を使って描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: グラフの種類を実線に変更する	linestyle = 'solid'
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
nの桁数	len(str(n))
変数を緑色で表示できる文字列にする	f'\033[32m{value}\033[0m'
文字列が英数字	s.isalnum()
データフレームのstart行目からend行目まで取り出す	df[start:end]
データフレームのあるカラムの尖り	df['列A'].skew()
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレームをグループ化しあるカラムの要約統計量を計算する	df.groupby('列A').describe()['列B']
棒グラフをパールバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='palevioletred')
をモジュールを検索するパスに追加する	sys.path.append(dir)
実数で浮動小数点数を除する	x / y
複数の列からグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
データフレームのstart行目からend行目まで抽出する	df[start:end]
データフレームをある列の値でまとめたグループ	df.groupby('列A')
棒グラフをダークグレー色として描画する	plt.bar(データ列x, データ列y, color='darkgrey')
データフレームのあるカラムの曜日の名前を使う	df['列A'].dt.weekday_name
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
データフレームのあるカラムの中にいくつ欠損値があるか数える	df['列A'].isna().sum()
散布図に赤い左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c='r')
読み込み用にファイルパスをオープンして]、fとする	f = open(filepath, mode='r')
改行なしに文字列をプリントする	print(value, end='')
縦棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
リストとリストを加える	aList + aList2
データシリーズの中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
整数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
option: イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
棒グラフをやわらかい青色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
珊瑚色のヒストグラムを描画する	plt.hist(データ列, color='coral')
縦棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
散布図をホットピンク色として描画する	plt.scatter(データ列x, データ列y, color='hotpink')
文字列内にひとつでも小文字が含まれるかどうか調べる	any(c.islower() for c in s)
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
散布図の星マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgrey')
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
文字列の接頭辞が部分文字列	s.startswith(sub)
ホワイトスモーク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
等量でn個にリストをビン分割する	pd.qcut(aList, n)
フィシャー流の尖度を求める	scipy.stats.kurtosis(配列, fisher=True, bias=False)
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
option: 淡いピンク色色を使う	color = 'lightpink'
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームのある列の値がx以上の行を抽出する	df[df['列A'] >= x]
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
nのバイト長	(n.bit_length() + 7) // 8
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
スプリンググリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
要素が集合に含まれないか調べる	element not in aSet
線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
データシリーズを10の位で丸める	ds.round(-1)
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
横棒グラフをシーグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='seagreen')
縦棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
カウンタの積集合	aCounter & aCounter2
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
データフレームの中にあると文字列の個数を求める	df.isin([value, value2]).sum()
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
正規分布による累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
指定した列のカテゴリで集計し、それぞれの最小値を求める	df.groupby('列A').min()
option: 青緑色を使う	color = 'teal'
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
ベクトルの和を求める	aArray + aArray2
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
標準出力のバッファを即時表示する	sys.stdout.flush()
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
option: 三角マーカーを描画する	marker = '^'
ラベンダー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
データフレームを表示するとき、列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
折れ線グラフの▼マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
散布図の星マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
文字列をインターンする	sys.intern(s)
デフォルトでグラフの見栄えをいい感じに設定する	sns.set()
列に列を続けたイテラブルを得る	itertools.chain(iterable, iterable2)
グラフのインチを設定する	plt.figure(figsize=(横幅, 高さ))
小数点数を実数で割った剰余	math.remainder(x, x2)
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
データ列を中央値でビン分割する	pd.qcut(ds, 2)
淡い茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
オブジェクトをイテレータに変換する	iter(obj)
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
データフレームの不偏分散	df.var(ddof=1)
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
折れ線グラフのポイント印の色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
シスル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
作画の背景色を暗くする	sns.set(style='darkgrid')
ファイルとfilenameを結合する	os.path.join(filepath, filename)
データシリーズを10の位で四捨五入する	ds.round(-1)
option: パウダーブルーを用いる	color = 'powderblue'
実数の天井を求める	math.ceil(x)
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
データ列とリストの散布図をプロットして、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
小文字列	string.ascii_lowercase
option: アリスブルー色を使う	color = 'aliceblue'
BOM付きでファイルを開く]	open(filepath, encoding='utf_8_sig')
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
タプルの最初の要素	aTuple[0]
文字化けしないように表計算ファイルファイルを読み込む	pd.read_csv('file.csv', encoding='shift_jis')
小数点数の仮数部	math.frexp(x)[0]
option: マーカーの色をライムにする	markerfacecolor = 'lime'
折れ線グラフの三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
プロットに鉛直方向の実線を設定する	plt.axvline(x=0, linestyle='solid')
option: グラフの色をシスルにする	color = 'thistle'
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
散布図をデピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='deeppink')
赤いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='r')
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
散布図のマーカーの色を指定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
データフレームを関数によって集約して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
数値を因数分解する	sympy.factor(e)
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
イテラブルを文字列に変換して結合する	''.join(map(str, iterable))
日付時刻データが日付時刻データより後ろ	aDatetime > aDatetime2
πを使用する	math.pi
option: 文字コードをSJISに設定する	encoding = 'shift_jis'
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
整数nを十六進文字列に変換する	hex(n)[2:]
最大長のある両端キュー	collections.deque(maxlen=n)
10を底とする実数の対数	math.log10(x)
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
線グラフの色をマゼンタに指定する	plt.plot(データ列x, データ列y, color='magenta')
棒グラフをシスル色として描画する	plt.bar(データ列x, データ列y, color='thistle')
nがn2より小さいか調べる	n < n2
散布図に右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
二つの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
縦棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
option: グラフの色をダークマゼンタに変更する	color = 'darkmagenta'
option: マーカーをポイントに変更する	marker = '.'
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: 大バツマーカーを使う	marker = 'X'
ファイルを絶対パスにする	os.path.abspath(filepath)
データフレームの重複を見る	df.duplicated()
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
散布図をオレンジレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orangered')
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
配列を平坦にする	aArray.flatten()
ユーザから入力される	int(input())
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
nがn2以下	n <= n2
スノー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
ヒストグラムをミスティローズ色として描画する	plt.hist(データ列, color='mistyrose')
CSVをヘッダを指定せず読む	pd.read_csv('file.csv', header=None)
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
データフレームの指定したカラムを千の位で丸めて整数型にする	df['列A'].round(-3).astype(int)
option: ミディアムシアグリーンを使う	color = 'mediumseagreen'
データフレームのあるカラムの欠損値を平均値で埋める	df['列A'].fillna(df['列A'].mean())
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
列のユニークな値	df[col].unique()
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
中央値でデータフレームの欠損値を埋める	df.fillna(df.median())
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
イテラブルの重複組み合せ	itertools.combinations_with_replacement(iterable, n)
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
ふたつの集合の∩	aSet.intersection(aSet2)
データフレームからランダムに10行を抽出する	df.sample(10)
データフレームの指定したカラムの中に文字列があるか調べる	df['列A'].isin([value])
option: ライム色を使用する	color = 'lime'
データフレームのあるカラムが何日か調べる	df['列A'].dt.day
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
アクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
配列の尖度を計算する	scipy.stats.kurtosis(配列, bias=False)
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
ヒストグラムをリネン色として描画する	plt.hist(データ列, color='linen')
上限指定をしたカラムの算術平均を算出する	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
を使ってデータフレームの相関行列を求める	df.corr(method='kendall')
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
タイムスタンプデータの時刻	aDatetime.time()
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
日付データからn時間分減算する	aDate - datetime.timedelta(hours=n)
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
y座標の最大・最小を変更する	plt.ylim(最小値, 最大値)
縦棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
オリベドラブ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
option: ダークゴールデンロッドを使用する	color = 'darkgoldenrod'
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
データフレームのある列の値がx以下の行を抽出する	df[df['列A'] <= x]
リストの長さ	len(aList)
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
データシリーズの欠損値を平均値に指定する	ds.fillna(ds.mean())
グラフのタイトルを設定する	plt.title('グラフの名称')
エクセルファイルをロードする	pd.read_excel('file.xlsx')
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
データフレームのあるカラムはどの程度、正規分布から歪んでいるか見る	df['列A'].kurt()
オブジェクトがリストクラスのインスタンスかどうか調べる	isinstance(obj, list)
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
整数nの十六進文字列	hex(n)[2:]
回帰分析をスタッキングで行う	sklearn.ensemble.StackingRegressor()
option: 赤にグラフの色を指定する	color = 'red'
等差数列から整数乱数を生成する	random.randrange(start, end, step)
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
ファイルをEUCを使って書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
option: ポイントマーカーを使う	marker = '.'
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
三自然数の最大公約数	math.gcd(n, n2, n3)
赤い破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列の中でパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
イテラブルとリストの散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフを貝殻色を用いて描画する	plt.plot(データ列x, データ列y, color='seashell')
双方向キューを要素を出す	deq.popleft()
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
列のユニークな値を見る	ds.unique()
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データシリーズの日を見る	ds.dt.day
ヒストグラムをピーチパフ色として描画する	plt.hist(データ列, color='peachpuff')
数を浮動小数点数で割る	x / y
実数の正接を計算する	math.tan(x)
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
ファイルにxを文字列にして書く	f.write(str(x))
nが偶数か調べる	n % 2 == 0
最大値・最小値で整数乱数を計算する	random.randint(最小値, 最大値)
有理数の分子	q.numerator
option: 書き込みモードを使う	mode = 'w'
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
ヒストグラムをゴーストホワイト色を用いて描画する	plt.hist(データ列, color='ghostwhite')
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
棒グラフをライトグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgreen')
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
配列を転置する	aArray.T
データフレームのカテゴリデータをダミー変数にする	pd.get_dummies(df)
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: グラフの色をゴールドに設定する	color = 'gold'
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
データフレームの選択したカラムの欠損値を直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
数列のスピアマンの相関係数を求める	scipy.stats.spearmanr(数列, 数列2)
文字列を部分文字列で二つに区切って、後半の文字列を使う	s.partition(sub)[-1]
ふたつの列からグループ化し最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
2つのデータフレームをジョインする	pd.merge(df, df2)
ある列の値がxに等しく、かつ別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
折れ線グラフをカデットブルー色として描画する	plt.plot(データ列x, データ列y, color='cadetblue')
option: ダークマゼンタにグラフの色を指定する	color = 'darkmagenta'
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
日付データと日付データの時間差を秒数で計算する	(aDate - aDate2).total_seconds()//60
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
赤い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
データフレームをグループ化し、それぞれの分散を求める	df.groupby('列A').var()
データシリーズの欠損値を中央値で埋める	ds.fillna(ds.median())
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
option: 追加モードに指定する	mode = 'a'
数式の部分分数化を行う	sympy.apart(e)
ファイルを追加モードでオープンする]	open(filepath, mode='a')
option: フローラルホワイト色を使う	color = 'floralwhite'
数値を簡単にする	sympy.sympify(e)
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
文字列中の部分文字列を新しい文字列に全部置き換える	s.replace(sub, newsub)
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
日付データの曜日を整数で見る	aDate.weekday()
option: ライトスレイグレー色を用いる	color = 'lightslategrey'
option: 色をゴーストホワイトに設定する	color = 'ghostwhite'
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
浮動小数点数の小数点以下を丸める	round(x)
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
横棒グラフをタン色として描画する	plt.barh(データ列x, データ列y, color='tan')
ヒストグラムの色をピンクに変更する	plt.hist(データ列, color='pink')
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
ドジャーブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
ふたつのカラムを用いてグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
横棒グラフをパールゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
日付データが火曜日	aDate.weekday() == 1
グラフ中の(x,y)の位置に補足を表示する	plt.legend(loc=(x, y))
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
option: ディムグレー色を用いる	color = 'dimgrey'
nがn2以上か調べる	n >= n2
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
タプルの合計値	sum(aTuple)
散布図のマーカーをバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
散布図を黒い下三角マーカーとして描く	plt.plot(データ列x, データ列y, marker='v', c='k')
横棒グラフを描画して棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
option: グラフの種類を破線に設定する	linestyle = 'dashed'
option: 色をダークシアグリーンに設定する	color = 'darkseagreen'
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
タプルとタプルを連結する	aTuple + aTuple2
あるカラムの文字列が部分文字列で終わらない行を抽出する	df[~ df['列A'].str.endswith(部分文字列)]
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
フローラルホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
数式の数値を求める	float(e)
ヒストグラムの色をグレーに変更する	plt.hist(データ列, color='gray')
ダークレッド色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
棒グラフをパパイヤウィップ色を用いて描画する	plt.bar(データ列x, データ列y, color='papayawhip')
列を文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
文字列中のカタカナを平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データフレームの選択したカラムにおいてどの値が頻出か見る	df[['列A', '列B']].mode()
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
カウンタの項目を列挙する	aCounter.keys()
データシリーズの欠損値を最大値に設定する	ds.fillna(ds.max())
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
option: 耐火レンガ色を使う	color = 'firebrick'
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
option: オレンジレッド色を使う	color = 'orangered'
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
option: グラフの色をスラグレーに設定する	color = 'slategrey'
事前にケースを無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
データフレームを関数の値でグループ化する	df.groupby(関数)
真紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
nとkのコンビネーション	math.comb(n, k)
整数nを二進文字列に変換する	bin(n)[2:]
データフレームの選択したカラムを丸める	df[['列A', '列B']].round()
文字列を式として評価する	eval(s)
文字列のn番目	s[n]
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
回帰分析を勾配ブースティングとして行う	model = sklearn.ensemble.GradientBoostingRegressor()
option: グラフの色をクリムゾンに設定する	color = 'crimson'
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
二進数文字列を整数に変換する	int(s, 2)
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
データフレームをサンプリングする	df.sample()
赤い▼マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
今日が水曜日か調べる	datetime.datetime.today().weekday() == 2
ヒストグラムをタン色を使って描画する	plt.hist(データ列, color='tan')
集合の全ての要素が別のセットに含まれるか調べる	aSet.issubset(aSet2)
列とイテラブルを連結する	itertools.chain(iterable, iterable2)
オブジェクトがリストの要素	element in aList
ヒストグラムを濃いシアン色で描画する	plt.hist(データ列, color='darkcyan')
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
リストとリストについての散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
まとめてデータシリーズの値をValueMapで置き換える	ds.replace(ValueMap)
文字列をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
FIXME	np.linalg.eig(aArray)
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
新しい回帰木モデルを用意する	model = sklearn.tree.DecisionTreeRegressor()
指定したカラムの要約統計量を求める	df['列A'].describe()
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
散布図の色をダークブルーにする	plt.scatter(データ列x, データ列y, color='darkblue')
option: グラフの色をインディゴに変更する	color = 'indigo'
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
縦軸の目盛を対数に変更する	plt.yscale('log')
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
リスト内の要素が全て真か調べる	all(aList)
リストのn番目の値を削除する	del aList[n]
ふたつのカラムからグループ化し平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
option: NaNを無視しない	nan_policy = 'propagate'
コーンフラワーブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
入力から二つの文字列を読む	A, B = map(str, input().split())
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データフレームのあるカラムがどれだけ、正規分布から尖っているか調べる	df['列A'].skew()
文字列が文字列リストのいづれかどうか	s in aStringList
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
nとn2の差を計算する	n - n2
二数の最も小さい値	min(x, y)
折れ線グラフの色をスラグレーに変更する	plt.plot(データ列x, データ列y, color='slategray')
データフレームのカラムの尖度を求める	scipy.stats.kurtosis(df['列A'], bias=False)
折れ線グラフに大バツ印を加える	plt.plot(データ列x, データ列y, marker='X')
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
日付時刻データが何曜日か知る	aDatetime.weekday()
ミディアムオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
option: 線種を破線に設定する	linestyle = 'dashed'
データフレームの選択したカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
縦棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
option: ライトグレー色を使う	color = 'lightgrey'
ラインのラインスタイルを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
新しい文字列で正規表現にマッチした文字列を置き換える	re.sub(pattern, newsub, s)
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
データフレームを小数点以下n桁で四捨五入する	df.round(n)
option: グラフの色をネイビーに設定する	color = 'navy'
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
値が集合のメンバー	element in aSet
xが-9以上、9以下か調べる	-9 <= x <= 9
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
シーケンスの全順列	itertools.permutations(iterable)
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
散布図の色を珊瑚にする	plt.scatter(データ列x, データ列y, color='coral')
変数を青色にする	f'\033[34m{value}\033[0m'
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
散布図の菱形マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
option: ライトイエロー色を用いる	color = 'lightyellow'
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
表データをグループ化し、最小値を算出する	df.groupby('列A').min()
nとn2の差	n - n2
横棒グラフをモカシン色として描画する	plt.barh(データ列x, データ列y, color='moccasin')
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
文字列が文字列リストのいづれか調べる	s in aStringList
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
option: スレートブルー色を使う	color = 'slateblue'
文字列を白色にする	f'\033[37m{value}\033[0m'
データフレームの未入力値を平均値にセットする	df.fillna(df.mean())
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
リストとリストの散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
リストとリストについての散布図に△マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
データフレームの一部のカラムの欠損値を最小値で補う	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
カウンタのユニークな文字列を列挙する	list(aCounter)
折れ線グラフの色をアクアマリンにする	plt.plot(データ列x, データ列y, color='aquamarine')
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
黄緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
表データを使う	import pandas as pd
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
上三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
データフレームの指定したカラムの標本標準偏差	df['列A'].std(ddof=1)
nがn2で割り切れるか判定する	n % n2 == 0
正規表現に文字列全体をASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
偽陽性を避けたい指標を使用する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
指定の列に重複があれば除く	df.drop_duplicates(subset=['列A', '列B'], inplace=True)
上位集合かどうか調べる	aSet.issuperset(aSet2)
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
棒グラフの色を淡い茶色にする	plt.bar(データ列x, データ列y, color='tan')
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データシリーズの母標準偏差	ds.std(ddof=0)
散布図をライトスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
year年の日付	datetime.date(year=year, month=1, day=1)
オレンジレッド色でヒストグラムを描画する	plt.hist(データ列, color='orangered')
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
実測値を分類モデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
ダーク・スラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategrey')
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
option: グラフの色をスラグレーに設定する	color = 'slategray'
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
ファイルからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
ある列によってデータフレームを並べる	df.sort_values(by='列A')
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
nかつn2	n and n2
線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
レモンシフォン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
ファイルをEUCで開く]	open(filepath, encoding='euc_jp')
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
データフレームのあるカラムを小数点以下n桁で丸める	df['列A'].round(n)
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
折れ線グラフのバツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
散布図をレベッカパープル色として描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
option: グラフの色をマルーンに設定する	color = 'maroon'
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
両端キューの右側に列の各値を入れる	deq.extend(iterable)
データシリーズを1000の位で丸める	ds.round(-3)
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
横棒グラフをホワイトスモーク色として描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
縦棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
option: サンディーブラウン色を使用する	color = 'sandybrown'
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
option: スラグレーを使う	color = 'slategray'
n掛けるn2を求める	n * n2
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ガンマ関数	math.gamma(x)
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
option: グラフの色を黄色に設定する	color = 'yellow'
数値を水色化する	f'\033[36m{value}\033[0m'
ゴールデンロッドにヒストグラムの色を指定する	plt.hist(データ列, color='goldenrod')
option: 色をディープスカイブルーに設定する	color = 'deepskyblue'
CSVをn番目のカラムをインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
データ列を使う	import pandas as pd
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
ある列の値がx以上、y未満のデータを抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
ファイルをオープンする]	open(filepath)
チップのデータセットをロードする	df = sns.load_dataset('tips')
文字列は全て十進数字か確認する	s.isdecimal()
作画のフォントを日本語に設定する	sns.set(font='IPAexGothic')
ふたつの辞書を合体する	aDict | aDict2
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
option: バリーウッド色を使用する	color = 'burlywood'
等差数列から整数乱数を求める	random.randrange(start, end, step)
データフレームの選択した列の中にある文字列と日付データの合計を数える	df[['列A', '列B']].isin([value, value2]).sum()
データフレームのカラムの幾何平均を求める	scipy.stats.gmean(df['列A'])
現在を文字列でフォーマットして文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
グラフに鉛直方向の破線を付ける	plt.axvline(x=0, linestyle='dashed')
横棒グラフをオレンジ色を用いて描画する	plt.barh(データ列x, データ列y, color='orange')
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
0からnまでのスライス	slice(n)
オブジェクトがタプルの要素でない	element not in aTuple
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
実数を千の位で丸める	round(x, -3)
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
ユーザが整数を入力する	int(input())
散布図の四角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
データフレームの指定したカラムの中に文字列と文字列があるか調べる	df['列A'].isin([value, value2])
データフレームの選択したカラムの不偏標準偏差	df[['列A', '列B']].std()
データフレームの指定した列が正規分布からどれだけ、歪んでいるか見る	df['列A'].kurt()
文字の文字コード	ord(ch)
数列とリストの散布図を描画してマーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
線グラフをライトブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightblue')
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
aListn番目から要素を取り除く	aList.pop(n)
option: マーカーをバツに変更する	marker = 'x'
xが真か調べる	bool(x)
乱数で要素を埋めた配列	np.random.random(N)
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
データフレームの指定したカラムの中にある文字列の合計を数える	df['列A'].isin([value]).sum()
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
行列と同じ大きさの空配列を作る	np.empty_like(aArray)
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
コマンド引数の一覧	sys.argv[1:]
フクシア色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームの列をリネームする	df.rename(columns={'列A': '列a', '列B': '列b'})
タプルをn回、連結する	aTuple * n
プロットにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
辞書のキーの一覧	aDict.keys()
y座標の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
データ列間のR2を求める	sklearn.metrics.r2_score(データ列, データ列2)
折れ線グラフに左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
双方向キューの先頭から要素を取り出す	deq.popleft()
セットから別の集合との共通要素を除く	aSet.symmetric_difference_update(aSet2)
データシリーズが何時か見る	ds.dt.hour
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
二つの浮動小数点数は近似値か調べる	math.isclose(x, x2)
リストとリストの散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データシリーズの中に存在する文字列と日付データの合計を求める	ds.isin([value, value2]).sum()
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
ミディアムスレートブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
ヒストグラムを貝殻色として描画する	plt.hist(データ列, color='seashell')
ヒストグラムをダークオリーブグリーン色を用いて描画する	plt.hist(データ列, color='darkolivegreen')
データフレームの指定したカラムの欠損値を直前の値に設定する	df['列A'].fillna(method='ffill')
データフレームの選択したカラムの欠損値を最小値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
異なる列をキーとして二つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='outer')
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
リストと配列について散布図を描き、、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームから重複ありでランダムに5行をサンプリングする	df.sample(5, replace=True)
実数を小数点で丸める	round(x, n)
リストの末尾を取り除く	aList[:-1]
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
非大文字が文字列中に含まれるか調べる	any(not c.isupper() for c in s)
数式をパラメータについて微分する	sympy.diff(e, z)
データフレームを表示するとき、列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
文字列の右側から空白を除く	s.rstrip(' ')
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
データ列の偏りを対数変換する	np.log(データ列)
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
文字列の開始位置から終了位置までの範囲で部分文字列の登場を数える	s.count(sub, start, end)
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
グラフの色を濃くする	sns.set(pallete='deep')
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
データフレームのデータ型リスト	df.dtypes
リストを昇順にソートする	sorted(aList, reverse=True)
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
option: フォントの色をスプリンググリーンに設定する	color = 'springgreen'
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
指定したカラムのパーセンタイル	df['列A'].quantile(パーセント/100)
option: グラフの色をフローラルホワイトに変更する	color = 'floralwhite'
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
文字をユニコードに変換する	ord(ch)
四分位数でデータ列を分割する	pd.qcut(ds, 4)
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
ある列のカテゴリごとの個数	df.groupby('列A').count()
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
日付データが金曜日か	aDate.weekday() == 4
折れ線グラフのポイントマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
option: ホワイトスモークにフォントの色を設定する	color = 'whitesmoke'
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
文字列は十進数字か	s.isdecimal()
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
option: オリベドラブに色を設定する	color = 'olivedrab'
グラフの描画でパステル調に色を使う	sns.set(pallete='pastel')
散布図のバツ印を青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
10を底とする小数点数の対数	math.log10(x)
ある列の値がxに等しいデータを選択する	df[df['列A'] == x]
データフレームをグループ化し、ある列に対し個数を求める	df.groupby('列A')['列B'].count()
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
データフレームが重複し、いるか調べる	df.duplicated()
データフレームのある列を配列として抽出する	df['列A'].values
リストとリストの散布図に赤い三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームのカラム間のスピアマンの相関係数を求める	scipy.stats.spearmanr(df['列A'], df['列B'])
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
nが一桁の数か	-9 <= n <= 9
データシリーズの中に含まれる日付データの合計を数える	ds.isin([value]).sum()
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
折れ線グラフの星マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
データフレームの選択したカラムの欠損値を最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
ロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
データフレームの選択したカラムの欠損値をメディアンに設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
折れ線グラフの色をダーク・スラテグレーに指定する	plt.plot(データ列x, データ列y, color='darkslategrey')
データフレームのあるカラムの曜日の名前	df['列A'].dt.weekday_name
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
横棒グラフを貝殻色を用いて描画する	plt.barh(データ列x, データ列y, color='seashell')
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
option: バツマーカーを使う	marker = 'x'
option: マーカーを右三角に変更する	marker = '>'
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
データフレームから重複を認めてランダムに100行をサンプリングする	df.sample(100, replace=True)
データフレームのカラムの第三四分位数	df['列A'].quantile(0.75)
option: 四角マーカーを描画する	marker = 's'
データフレームから重複を破壊的にドロップする	df.drop_duplicates(inplace=True)
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
散布図のマーカーの太さを変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
ヒストグラムを描画してビン数をセットする	plt.hist(データ列, bins=区関数)
文字列を記号に変換する	sympy.Symbol(s)
縦棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
上限指定をした配列の算術平均を計算する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
標準入力から1行だけ読む	sys.stdin.readline()
数値の出力を改行なしに行う	print(value, end='')
ファイルのフォルダ名	os.path.dirname(filepath)
option: グラフの色をサーモンに設定する	color = 'salmon'
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
option: バイナリモードを使う	mode = 'rb'
カウンタの項目のカウントを見る	aCounter[element]
nがn2の倍数か調べる	n % n2 == 0
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
グリッドの線種を点線に変更する	plt.grid(linestyle='dotted')
縦棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
ティール色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
散布図の色を濃い青にする	plt.scatter(データ列x, データ列y, color='darkblue')
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
ヒストグラムをパウダーブルー色として描画する	plt.hist(データ列, color='powderblue')
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
黒い大バツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='X', c='k')
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
折れ線グラフをドジャーブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
ヒストグラムの色をアイボリーに指定する	plt.hist(データ列, color='ivory')
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
x,y,zをそれぞれn,n2,n3に変更する	x, y, z = n, n2, n3
浮動小数点数を実数で	x // y
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
option: 整数型を使う	dtype = np.int
データフレームの相関行列をヒートマップとして描画する	sns.heatmap(df.corr())
option: どの行もヘッダにしない	header = None
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
selectorsでマスクされた列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
データフレームの重複した行を数える	df.duplicated().sum()
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
データフレームの最後100行を抽出する	df.tail(100)
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
1行から二つの少数を読む	A, B = map(float, input().split())
データシリーズの値をValueMapでまとめて置き換える	ds.replace(ValueMap)
黒いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
リストを下線付きでプリントする	print(f'\033[4m{value}\033[0m')
タイムスタンプデータからn秒を引く	aDatetime - datetime.timedelta(seconds=n)
列とイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
浮動小数点数の符号をコピーにする	math.copysign(x, x2)
コマンドの第一引数を知る	sys.argv[1]
カンマ区切りのファイルのn行目をインデックスとして読む	pd.read_csv('file.csv', index_col=n)
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
option: スキップする列番号をnamesで指定する	skiprows = names
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
実数がNaNか	math.isnan(x)
データ列を折れ線グラフで描画する	plt.plot(データ列x, データ列y)
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
整数nがタプルのどれかか調べる	n in aTuple
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
ヒストグラムをスノー色として描画する	plt.hist(データ列, color='snow')
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
数列のスピアマンの相関係数を計算する	scipy.stats.spearmanr(数列, 数列2)
散布図の色を深紅にする	plt.scatter(データ列x, データ列y, color='crimson')
標準エラーを使う	sys.stderr
nからn2を引いてnとする	n -= n2
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
文字列のケースを変換する	s.casefold()
タプルの長さ	len(aTuple)
要素∈集合	element in aSet
散布図の四角印の色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
ダークマゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
option: フォントの色をサドルブラウンに設定する	color = 'saddlebrown'
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
ISO書式の文字列からタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
option: 行方向に計算する	axis = 1
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
列をタイムスタンプ型に変換する	pd.to_datetime(df['列A'])
指定したカラムの値をValueMapで一度に置き換える	df['列A'].replace(ValueMap)
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
線形回帰モデルの切片	model.intercept_
ファイルを一行ずつ読む	f.readline()
データフレームから指定した三つの列を抽出する	df[['列A', '列B', '列C']]
配列から重複を除いた配列を作る	np.unique(aArray)
ゲインズボロ色でヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
イテラブルに列を続けた列	itertools.chain(iterable, iterable2)
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
データフレームの指定したカラムを万の位で四捨五入する	df['列A'].round(-4)
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
option: ライトシアン色を使う	color = 'lightcyan'
データフレームを表示するとき、表示可能な行数をnに設定する	pd.set_option('display.max_rows', n)
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
option: グラフの色をシルバーに設定する	color = 'silver'
文字列がアスキー文字か調べる	s.isascii()
真紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
データシリーズの月を使う	ds.dt.month
option: フォントの色をアイボリーに指定する	color = 'ivory'
標準出力のバッファを強制表示する	sys.stdout.flush()
データフレームの次元の大きさ	df.shape
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
辞書からカウンタを作る	collections.Counter(aDict)
option: ミントクリーム色を用いる	color = 'mintcream'
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
option: コーンズシルクを使う	color = 'cornsilk'
サポートベクターマシンを用いてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
nが2で割り切れる	n % 2 == 0
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
数値を方程式として解く	sympy.solve(e)
タプルを展開してプリントする	print(*aTuple)
行列が何のデータ型か調べる	aArray.dtype()
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
エラーなく集合から要素を除く	aSet.discard(element)
縦棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
欠損値も加えてデータフレームのある列をダミー変数にする	pd.get_dummies(df['列A'], dummy_na=True)
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
配列の全要素の値を変更する	aArray[:, :] = 指定の値
折れ線グラフを黄色色を用いて描画する	plt.plot(データ列x, データ列y, color='yellow')
本日の月数	datetime.datetime.today().month
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
ミントクリーム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
xが1、もしくは2か調べる	x == 1 or x == 2
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
ヒストグラムの色を紺に指定する	plt.hist(データ列, color='darkblue')
データフレームの未入力値を後の行の値に設定する	df.fillna(method='bfill')
option: 色をブラックに設定する	color = 'black'
文字列を黒色化する	f'\033[30m{value}\033[0m'
昇順にデータフレームをある列によって破壊的に並べる	df.sort_values(by='列A', ascending=True, inplace=True)
データフレームを二つの列を用いて小さい順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
平均値でデータフレームのNaNを埋める	df.fillna(df.mean())
縦棒グラフをダークグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkgreen')
データフレームから重複を認めてランダムに10行をサンプリングする	df.sample(10, replace=True)
ヒストグラムの色をアクアマリンに指定する	plt.hist(データ列, color='aquamarine')
組中のオブジェクトが最初に見つかるインデックス	aTuple.index(element)
折れ線グラフをゴーストホワイト色として描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
データフレームをグループ化し、ある列に対し最大値を求める	df.groupby('列A')['列B'].max()
option: ディムグレーにグラフの色を設定する	color = 'dimgray'
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
ヒストグラムを白くする	plt.hist(データ列, color='w')
特異値分解の準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
データフレームの二つのカラムを並べてボックスチャートを用いて作図する	plt.boxplot([df['カラム'], df['カラム']])
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
黒い丸マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
有理数の分母	q.denominator
タプルのキーを列挙する	aDict.keys()
ある列のカテゴリごとの分散	df.groupby('列A').var()
集合にイテラブルを追加更新する	aSet.update(iterable)
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
横棒プロットを描画する	plt.barh(ラベル列, データ列)
文字列の中のASCII限定としてパターンによるマッチを求める	re.findall(pattern, s, flags=re.ASCI)
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
データフレームが正規分布からどれだけ、尖っているか確認する	df.skew()
折れ線グラフをナバホホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='navajowhite')
ヒストグラムをレベッカパープル色として描画する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
データフレームの指定した列の不偏標準偏差	df['列A'].std()
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフの色をダークシアンにする	plt.plot(データ列x, データ列y, color='darkcyan')
シーケンスの集合	set(iterable)
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
散布図の▽マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームの中の列をビン数nとしてビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
逆行列	np.linalg.inv(aArray)
折れ線グラフの丸印を青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
nまでの奇整数列を作る	list(range(1, n, 2))
数式の変数に数式を代入する	e.subs(z, e2)
option: マーカーを下三角に変更する	marker = 'v'
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
マップに要素をキーとして加える	aDict[key] = element
折れ線グラフを描く	plt.plot(データ列x, データ列y)
データフレームをグループ化し、それぞれの最大値を求める	df.groupby('列A').max()
データフレームをグループ化し、ある列に対し標準偏差を計算する	df.groupby('列A')['列B'].std()
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
n個の数値イテラブル	range(n)
本日の日付時刻	datetime.datetime.today()
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
リストの末尾から要素をポップする	aList.pop()
グラフをプレゼンてション用に設定する	sns.set(context='talk')
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
ユニークな各要素の頻度	np.unique(aArray, return_counts=True)
データフレームの選択したカラムの値を正規表現patternでまとめてreplに置き換える	df[['列A', '列B']].replace(pattern, repl, regex=True)
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
縦棒グラフを描画して、左寄せする	plt.bar(ラベル列, データ列, align='edge')
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
配列とリストについて散布図を描いて、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
変数を黒色化する	f'\033[30m{value}\033[0m'
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: 読み込みモードを使う	mode = 'r'
実行時に標準出力がパイプかどうか調べる	not sys.stdout.isatty()
データシリーズのどの値が頻出か確認する	ds.mode()
option: 色を耐火レンガにする	color = 'firebrick'
ポイント印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
データフレームからランダムにn行を取り出す	df.sample(n)
白色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
データフレームをある列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby('列A')]
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
変数を太文字化する	f'\033[1m{value}\033[0m'
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
配列の標準誤差を算出する	scipy.stats.sem(配列)
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
文字列から部分文字列を全て取り除く	s.replace(sub, '')
文字列は十進数字かテストする	s.isdecimal()
ファイルパスのセパレータ記号	os.sep
青緑色でヒストグラムを描画する	plt.hist(データ列, color='teal')
散布図をミントクリーム色として描画する	plt.scatter(データ列x, データ列y, color='mintcream')
option: どのカラムもインデックスに設定しない	index_col = None
縦棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
横棒グラフをペールグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='palegreen')
両端キューから最初の要素を取り除く	deq.remove(element)
データフレームのカラムをカテゴリデータにする	df[col].astype(object)
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
縦軸だけグリッド線	plt.grid(axis='y')
ディムグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
棒グラフをコーンズシルク色として描画する	plt.bar(データ列x, データ列y, color='cornsilk')
リストを展開してプリントする	print(*aList)
カウンタから最も頻出な項目の件数	aCounter.most_common()[1]
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
データ列のヒストグラムを描画する	plt.hist(データ列)
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
データフレームが重複している	df.duplicated()
データフレームの末尾100行を抽出する	df.tail(100)
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
option: グラフの色をミディアムパープルに変更する	color = 'mediumpurple'
散布図に三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
ある列の値がx以上、y以下のデータを抽出する	df[(x <= df['列A']) & (df['列A'] <= y)]
辞書から多重集合を作る	collections.Counter(aDict)
JSON形式の文字列をデータに変換する	json.loads(jsonString)
文字列が文字列リストのいづれ	s in aStringList
配列の尖度を求める	scipy.stats.kurtosis(配列, bias=False)
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
タプル中の最初の文字列を探す	aTuple.index(element)
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
データ列の各値は何回出現するか確認する	ds.value_counts()
キューの先頭に値を追加する	deq.appendleft(element)
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
データフレームの一部のカラムを1000の位で丸める	df[['列A', '列B']].round(-3)
パレットトルコイズ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
リストとイテラブルを連結する	itertools.chain(iterable, iterable2)
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
縦棒グラフをプラム色として描画する	plt.bar(データ列x, データ列y, color='plum')
上限nの双方向キューを生成する	collections.deque(maxlen=n)
黒い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
列のコンビネーション	itertools.combinations(iterable, n)
ヒストグラムをデピンク色を用いて描画する	plt.hist(データ列, color='deeppink')
散布図を左三角印で描画する	plt.scatter(データ列x, データ列y, marker='<')
グラフの目的を論文に変更する	sns.set(context='paper')
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
配列の次元を変形する	aArray.reshape(行数, 列数)
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
文字列が全て英字かどうか調べる	s.isalpha()
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
nとn2が等しいか調べる	n == n2
カウンタの項目数	len(aCounter)
日付データが何年か知る	aDate.year
紺色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
散布図の右三角印を青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームを四捨五入する	df.round()
データフレームの行を条件でフィルタする	df[(df['列A'] == x) & (df['列B'] == y)]
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
option: グラフの色をスプリンググリーンに変更する	color = 'springgreen'
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
データ列の推移を色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
option: ブルーバイオレット色を使う	color = 'blueviolet'
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
ミディアムアクアマリンにヒストグラムの色を指定する	plt.hist(データ列, color='mediumaquamarine')
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
デフォルトを適用する	sns.set()
辞書をコピーする	aDict.copy()
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
option: ゲインズボロ色を用いる	color = 'gainsboro'
option: フォントの色をスラグレーに設定する	color = 'slategrey'
プラムにヒストグラムの色を変更する	plt.hist(データ列, color='plum')
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
関数の値にデータフレームをグループ化して列挙する	[(name, group_df) for name, group_df in df.groupby(関数)]
日付データが日曜日か調べる	aDate.weekday() == 6
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
グラフに水平方向の点線をつける	plt.axhline(y=0, linestyle='dotted')
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
文字列の開始位置からと終了位置までの範囲に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
nをn2で割った結果の切り上げを求める	(n + n2 - 1) // n2
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
option: ベージュ色を用いる	color = 'beige'
列を全てタイムスタンプ型に変換する	pd.to_datetime(df['列A'])
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
option: セパレータをタブにする	sep = '\t'
三変数の最小値	min(x, y, z)
nがn2と等しいか調べる	n == n2
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
データシリーズのNaNを直後の値で置換する	ds.fillna(method='bfill')
縦棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
n行を重複ありでデータフレームからランダムにサンプリングする	df.sample(n, replace=True)
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
辞書をカウンタにする	collections.Counter(aDict)
折れ線グラフの▽マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
プロットの色を全般的に色差別なくする	sns.set(pallete='colorblind')
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
両端キューの先頭にイテラブルの各データを入れる	deq.extendleft(iterable)
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
平均線付き箱髭図を描画する	plt.boxplot(データ列, meanline=True)
マッピングから項目名の値か、もしくは要素を得る	aDict.get(key, element)
カンマで文字列を区切って、列挙する	s.split(',')
データフレームの選択したカラムの歪度	df[['列A', '列B']].kurt()
サンディーブラウン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
イテラブルを集合に変換する	set(iterable)
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
上三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
散布図に右三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='>')
ピーチパフ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
ヒストグラムの色を黄色に変更する	plt.hist(データ列, color='yellow')
配列から重複を除いた配列を作成する	np.unique(aArray)
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
青い点線としてリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
実数のn乗	pow(x, n)
option: ラベンダーブラッシュを使う	color = 'lavenderblush'
ライトグレーにヒストグラムの色を指定する	plt.hist(データ列, color='lightgray')
データフレームをソートし、、新しいインデックスを振り直す	df.sort_values('キーとなる列').reset_index()
データフレームから	df.select_dtypes(型).columns
自然数の順列の総数	math.perm(n)
カウンタの各項目を、そのカウントだけ列挙する	aCounter.elements()
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
nとkのnCk	math.comb(n, k)
データシリーズを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
要素は辞書の値に含まれていない	element not in aDict.values()
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
データフレームからランダムに抽出する	df.sample()
rgbのポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
青い点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
データフレームの指定したカラムを百の位で丸めて、整数型にする	df['列A'].round(-2).astype(int)
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
配列を2次元1列に変形する	aArray.reshape(-1, 1)
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
双方向キューから最初のデータを取り除く	deq.remove(element)
配列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
赤い右三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
要素は集合に含まれないか調べる	element not in aSet
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
折れ線グラフをシスル色として描画する	plt.plot(データ列x, データ列y, color='thistle')
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
nとn2のXOR	n ^ n2
データフレームの選択したカラムの値をValueMapでまとめて置き換える	df[['列A', '列B']].replace(ValueMap)
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
度数分布図の描いて、正規化する	plt.hist(データ列, density=True)
option: フォントの色をナバホホワイトに設定する	color = 'navajowhite'
データフレームの要約統計量を求める	df.describe()
縦棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
散布図の星印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
ふたつの列を組み合わせてグループ化し、最大値を求める	df.groupby(['列A', '列B'], as_index=False).max()
option: カンマを区切りで使う	sep = ','
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
実数を十の位で丸める	round(x, -1)
黄色いグリッド線を引く	plt.grid(color='y')
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
縦棒グラフを描いて、棒の横幅を設定する	plt.bar(ラベル列, データ列, width=0.5)
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
表計算ファイルのシートを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
データフレームの選択したカラムの値が欠損値か調べる	df[['列A', '列B']].isna()
文字列の右端から改行を除く	s.rstrip()
ミントクリーム色でヒストグラムを描画する	plt.hist(データ列, color='mintcream')
両端キューの末尾から要素を取り除く	deq.pop()
半透明の点線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
双方向キューの右に列の各要素を順に追加する	deq.extend(iterable)
option: シスル色を使う	color = 'thistle'
option: グラフの色をダークグレーに設定する	color = 'darkgray'
実数を切り下げて整数に変換する	math.floor(x)
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategrey')
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフのマーカーを三角印にする	plt.plot(データ列x, データ列y, marker='^')
リストを水色でプリントする	print(f'\033[36m{value}\033[0m')
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
日付データが月曜日か確認する	aDate.weekday() == 0
タプル内の要素は少なくとも一つ真か調べる	any(aTuple)
データフレームをソートして、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
データフレームを並べ直して、下の方n件を取り出す	df.sort_values('キーとなる列').tail(n)
リストの文字列が最初に見つかる位置	aList.index(element)
要素一つの組	(element,)
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
今日を文字列を用いてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ある列のカテゴリの分散を計算する	df.groupby('列A').var()
実数を十六進表記の文字列にする	x.hex()
ライトスチールブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
データフレームの中にある日付データと日付データの合計を数える	df.isin([value, value2]).sum()
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
アンティークホワイト色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ガンマ関数の値	math.gamma(x)
ベージュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
パラメータについて数式の積分を求める	sympy.integrate(e, z)
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
項目名が辞書にあるか調べる	key not in aDict
キュー中の値の数を数える	deq.count(element)
マゼンタ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
ライトゴールドロディイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
データ列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
折れ線グラフの菱形印を青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
ひとつでも非小文字が文字列中に含まれるか調べる	any(not c.islower() for c in s)
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
option: ナバホホワイトにグラフの色を設定する	color = 'navajowhite'
日付時刻データの秒数	aDatetime.second
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
データフレームの欠損値を直後の値に指定する	df.fillna(method='bfill')
データフレームの欠損値を最小値で補完する	df.fillna(df.min())
ダーク・スラテグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
option: オーキッド色を使う	color = 'orchid'
データフレームの指定した三つのカラムを選択する	df[['列A', '列B', '列C']]
セットから値を除く	aSet.remove(element)
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
折れ線グラフをシーグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='seagreen')
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
整数nのビット長	n.bit_length()
seabornのデフォルトを適用する	sns.set()
データシリーズは正規分布からどの程度、尖っているか確認する	ds.skew()
データフレームの選択したカラムの中に文字列があるか調べる	df[['列A', '列B']].isin([value])
TSVファイルを読む	pd.read_csv('file.tsv', sep='\t')
ふたつの集合の和集合	aSet.union(aSet2)
データフレームの一部のカラムにおいてどの値が頻出か調べる	df[['列A', '列B']].mode()
線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
実数の逆正弦を求める	math.asin(x)
ナバホホワイト色でヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
option: ダークシアグリーンにグラフの色を設定する	color = 'darkseagreen'
option: 色をグリーンに設定する	color = 'green'
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
ケンドール順位相関係数でデータフレームの一部の列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
データフレームを2つの列によってソートし、、NaNを先頭に来るようにする	df.sort_values(by=['列A', '列B'], na_position='first')
タプルをひとつ置きに取り出す	aTuple[::2]
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
ふたつの列からグループ化し、標準偏差を求める	df.groupby(['列A', '列B'], as_index=False).std()
現在が何分か知る	datetime.date.today().minute
イテラブルを無限に繰り返す	itertools.cycle(iterable)
nの二乗	n ** 2
整数を小数点以下第一位で四捨五入する	round(x, 1)
リネン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
データフレームのあるカラムの値がxに等しくない行を抽出する	df[df['列A'] != x]
ファイルパスの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
文字列はリストに含まれないか調べる	element not in aList
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
色付きの点線としてリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
文字列をコロンで区切って、列挙する	s.split(':')
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
rgbの右三角マーカーをイテラブルと数列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
指定した列のみ、データフレームの重複を見る	df.duplicated(subset='列A')
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
option: 三二ビット整数型を使用する	dtype = np.int16
データ列のユニークな値の個数を確認する	ds.nunique()
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ベージュ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
等しい量になるように配列をn個に分割する	pd.qcut(aArray, n)
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
８進数字を全部使う	string.octdigits
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
カラム名を指定してデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
最小値でデータフレームの選択したカラムの欠損値を置き換える	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
表データをインポートする	import pandas as pd
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
△印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
グラフのグリッドを白くする	sns.set(style='whitegrid')
多次元データを主成分分析でパステル調に次元に削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
option: ミディアムパープル色を使う	color = 'mediumpurple'
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightseagreen')
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
文字列中の部分文字列を数える	s.count(sub)
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
CSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
データフレームをグループ化し、それぞれの合計を求める	df.groupby('列A').sum()
option: パールバイオレットレッドを用いる	color = 'palevioletred'
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
option: ゴールデンロッド色を使う	color = 'goldenrod'
部分集合かどうか調べる	aSet.issubset(aSet2)
一度にデータフレームの指定したカラムの値をValueMapで置き換える	df['列A'].replace(ValueMap)
データフレームをCSVファイルで出力する	df.to_csv('file.csv')
ライム色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
リストの相関係数を算出する	scipy.stats.pearsonr(数列, 数列2)
スピアマンの相関係数	scipy.stats.spearmanr(配列, 配列2)
カラーバーを設定する	plt.colorbar()
文字列リストを連結する	''.join(aStringList)
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
モデルのバージョン	version = 'wcce2022-0.1'
縦棒プロットを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
option: フォントの色をモカシンに設定する	color = 'moccasin'
辞書をJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False)
標準入力を得る	sys.stdin
データフレームの指定したカラムの中にある文字列との合計を調べる	df['列A'].isin([value, value2]).sum()
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
文字列をカンマで分割して文字列リストに変換する	s.split(',')
文字列を区切りで区切って、列挙する	s.split(sep)
文字列を空白で区切って、文字列リストに変換する	s.split()
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
カウンタの文字列のカウント	aCounter[element]
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
青色で変数をプリントする	print(f'\033[34m{value}\033[0m')
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
スラグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
ふたつの列からグループ化し、合計を求める	df.groupby(['列A', '列B'], as_index=False).sum()
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
縦棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
入力ストリームを全部、読む	f.read()
データ列を箱ひげ図にする	plt.boxplot(データ列)
データフレームのカラム名をリストで置き換える	df.columns = columns
option: マーカーを丸に変える	marker = 'o'
フォレストグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='forestgreen')
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
散布図をネイビー色を用いて描画する	plt.scatter(データ列x, データ列y, color='navy')
貝殻色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
データフレームの欠損値をその平均値で埋める	df.fillna(df.mean())
タプルとタプルを結合する	aTuple + aTuple2
ベクトルのユニークな要素とその個数を調べる	u, counts = np.unique(aArray, return_counts=True)
紺碧色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
散布図のポイント印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
option: エラーを無視するように指定する	errors = 'ignore'
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
濃いシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図をロージーブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
3つの最大値	max(x, y, z)
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
配列の最頻値を使う	mode, count = scipy.stats.mode(配列)
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
集合のイミュータブル版	frozenset(aSet)
option: NaNは無視する	dropna = True
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
文字列を文字のリストにする	list(s)
実数を十の位で四捨五入する	round(x, -1)
代数計算を使う	import sympy
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
文字列をセパレータで区切って、列挙する	s.split(sep)
イテラブルとリストについての散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
イテラブルをイミュータブルな集合にする	frozenset(iterable)
リストと配列の散布図を描画して、マーカーを▲に変更する	plt.plot(データ列x, データ列y, marker='^')
タプルのキーと値を入れ替える	{v: k for k, v in aDict.items()}
黒い線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
散布図にダイアモンドマーカーを加える	plt.scatter(データ列x, データ列y, marker='D')
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
option: 欠損値を先頭にする	na_position = 'first'
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
散布図の▽マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
小数点数の常用対数	math.log10(x)
辞書に辞書の項目を更新する	aDict.update(aDict2)
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
文字列中からパターンにASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
データシリーズが正規分布からどれだけ、歪んでいるか確認する	ds.kurt()
L2ノルムでデータを正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
横棒グラフをハニーデュー色を用いて描画する	plt.barh(データ列x, データ列y, color='honeydew')
option: スラグレーに色を変更する	color = 'slategray'
オーキッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
nが一桁の数か調べる	0 <= n <= 9
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
グラフの色を暗くする	sns.set(pallete='dark')
リストを引数として展開して表示する	print(*aList, sep=',')
option: クリムゾン色を使う	color = 'crimson'
option: グラフの色をグレーに指定する	color = 'gray'
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
平均付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
データフレームの選択したカラムの中にある文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
option: オリベドラブ色を用いる	color = 'olivedrab'
未初期化の配列	np.empty(要素数, dtype=np.int)
データフレームのあるカラムをデータフレームの日付インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df['列A']))
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
option: グラフの色を青に設定する	color = 'blue'
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
n2がn以上かつ、n3以下か調べる	n <= n2 and n2 <= n3
グラフの用途を論文に設定する	sns.set(context='paper')
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
文字列を記号にする	sympy.Symbol(s)
文字列がタプルの要素でないか調べる	element not in aTuple
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
option: マゼンタを使う	color = 'magenta'
文字列中にひとつでも非アルファベットがあるか調べる	any(not c.isalpha() for c in s)
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
日付データをISO書式の文字列に変換する	aDate.isoformat()
ミディアムオーキッド色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ファイル全体を行単位で分割して読む	f.readlines()
行列にはいくつ要素があるか調べる	aArray.size
カウンタから辞書を引く	aCounter.subtract(aDict)
ベクトルの演算をする	import numpy as np
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
文字列モジュールをインポートする	import string
集合から値を取り除く	aSet.remove(element)
書式をargsを引数として文字列整形する	formatText.format(*args)
赤い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
データフレームの空文字をNaNに変換し、ドロップする	df.replace('', np.nan).dropna()
option: マーカーを左三角に指定する	marker = '<'
ヒストグラムをライトグリーン色を使って描画する	plt.hist(データ列, color='lightgreen')
方程式の解	sympy.solve(e)
option: マーカーの色をダークレッドにする	markerfacecolor = 'darkred'
辞書の値を列挙する	aDict.values()
文字列を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
全要素を0で初期化した配列	np.zeros(要素数)
ディープスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
ダークスラテグレー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
データフレームをCSVファイルに小数点以下3桁まで書き出す	df.to_csv('file.csv', float_format='%.3f')
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
本日の日	datetime.datetime.today().day
16進文字列を整数に変換する	int(s, 16)
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
データシリーズの欠損値をxに設定する	ds.fillna(x)
プロットの色を淡くする	sns.set(pallete='muted')
nをn2だけ減少させる	n -= n2
option: グラフの色をトマトに設定する	color = 'tomato'
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
option: グラフの色をホットピンクに設定する	color = 'hotpink'
要素が集合のメンバー	element in aSet
タプルをリストにする	list(aTuple)
事前に正規表現を大文字・小文字を無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
パールゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
日付データが日付データより前か	aDate < aDate2
ヒストグラムの色をオレンジレッドに指定する	plt.hist(データ列, color='orangered')
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームの中の欠損値の数を数える	df.isna().sum()
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
散布図をスノー色を用いて描画する	plt.scatter(データ列x, データ列y, color='snow')
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
データフレームの指定したカラムの欠損値を最小値に設定する	df['列A'].fillna(df['列A'].min())
option: グラフの色をモカシンに設定する	color = 'moccasin'
option: 列方向に計算する	axis = 0
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
偽陽性を抑えたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
カウンタを辞書に変換する	dict(aCounter)
変数が無限大に近づくとき、数値の極限値を求める	sympy.limit(e, z, oo)
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
データフレームの中にいくつNaNがあるか数える	df.isna().sum()
ファイルが存在するかどうか確認する	os.path.exists(filepath)
整数nの八進文字列	oct(n)[2:]
浮動小数点数の整数部	math.modf(x)[1]
タプルを並べる	sorted(aTuple)
整数乱数の配列	np.random.randint(開始値, 終了値, N)
nまでの偶整数リスト	list(range(2, n, 2))
データ列のノルムをそろえる	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
データフレームを表示するときヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
折れ線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
データフレームを2つの列の値によって集約する	df.groupby(['列A', '列B'])
データフレームをグループ化し、ある列に対し標準偏差を求める	df.groupby('列A')['列B'].std()
文字列が全て大文字かどうか調べる	s.isupper()
カラーバーを水平でつける	plt.colorbar(orientation='horizontal')
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
データフレームの選択したカラムの標本標準偏差	df[['列A', '列B']].std(ddof=1)
部分文字列が文字列の開始位置以降に含まれないかどうか	s.find(sub, start) == -1
プラットフォームのコードポイントの最大値	sys.maxunicode
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
option: ライトイエローにフォントの色を設定する	color = 'lightyellow'
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
カウンタを高頻出方から列挙する	aCounter.most_common()
ミディアムスプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
ベクトルのユニークな要素	np.unique(aArray)
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
日付データをn秒前にする	aDate - datetime.timedelta(seconds=n)
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
option: 丸マーカーを使う	marker = 'o'
リストのn番目を削除する	del aList[n]
線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
文字列の開始位置から部分文字列を探す	s.find(sub, start)
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
レモンシフォン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
オブジェクトがプロパティを持つ	hasattr(obj, プロパティ名)
シルバーにヒストグラムの色を設定する	plt.hist(データ列, color='silver')
赤い右三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
クロスマーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='x')
データフレームをグループ化しある列の記述統計量を求める	df.groupby('列A').describe()['列B']
CSVファイルを読み込む	pd.read_csv('file.csv', sep=',')
option: ミディアムターコイズ色を使用する	color = 'mediumturquoise'
option: タンを使用する	color = 'tan'
折れ線グラフをオリベドラブ色として描画する	plt.plot(データ列x, データ列y, color='olivedrab')
棒グラフをミディアムバイオレットレッド色として描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
線グラフの色をパレットトルコイズにする	plt.plot(データ列x, データ列y, color='paleturquoise')
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
ヒストグラムを一点鎖線に指定する	plt.hist(データ列, linestyle='dashbot')
淡いピンク色色を使ってヒストグラムを描画する	plt.hist(データ列, color='lightpink')
option: ライトブルー色を用いる	color = 'lightblue'
xを浮動小数点数に変換する	float(x)
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
分子n分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
itertoolsモジュールをインポートする	import itertools
ゲインズボロ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
データフレームの行数と列数	df.shape
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
データフレームの指定したカラムの第一四分位数	df['列A'].quantile(0.25)
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
列を10000の位で丸める	df['列A'].round(-4)
辞書にキーワード引数で更新する	aDict.update(**kwargs)
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
xをブール値にする	bool(x)
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
リストをイミュータブルにする	tuple(aList)
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
リストとリストについての散布図に赤い△マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
option: ペルーを使う	color = 'peru'
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
棒グラフをオリーブ色を使って描画する	plt.bar(データ列x, データ列y, color='olive')
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームの選択したカラムのNaNを最頻値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
ヒストグラムの色をアクアにセットする	plt.hist(データ列, color='aqua')
文字列全体が正規表現にASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
グラフを正方形にする	plt.axis('equals')
データフレームから指定した列の名前一覧の列を選択する	df[columns]
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
本日が火曜日か判定する	datetime.datetime.today().weekday() == 1
カデットブルーにヒストグラムの色を変更する	plt.hist(データ列, color='cadetblue')
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
ポイントマーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
xを印字できる文字列にする	ascii(x)
option: スカイブルー色を使用する	color = 'skyblue'
ダークオレンジ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
実数の指数	math.frexp(x)[1]
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
二つのデータフレームを横方向に合体させる	pd.concat([df, df2], axis=1)
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
データフレームの指定したカラムの分散	df['列A'].var()
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
ミディアムバイオレットレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
option: ダークオレンジにグラフの色を指定する	color = 'darkorange'
データ列間の平方根平均二乗誤差を算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
ケンドール順位相関係数としてデータフレームの相関行列を求める	df.corr(method='kendall')
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
両端キューのstart番目からend番目までの部分値	collections.deque(itertools.islice(deq, start, end))
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
オブジェクトがリストの要素でない	element not in aList
文字列はリストに含まれる	element in aList
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
文字列を水色でプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
option: 三角マーカーを用いる	marker = '^'
グラフ中のフォントを設定する	sns.set(font=フォント名)
データフレームの指定したカラムの欠損値を中央値に設定する	df['列A'].fillna(df['列A'].median())
nが無限に続く数列	itertools.repeat(n)
配列のトリム分散を求める	scipy.stats.tvar(配列, limits=(下限, 上限), inclusive=(True, True))
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
配列の和を計算する	aArray + aArray2
プログラムの実行を異常終了する	sys.exit(1)
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
散布図を珊瑚色で描画する	plt.scatter(データ列x, データ列y, color='coral')
実数が無限大か調べる	math.isinf(x)
option: 右三角マーカーを用いる	marker = '>'
散布図をダークオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='darkorange')
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
データフレームの値が未入力値か	df.isna()
空白文字を全部見る	string.whitespace
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列中から正規表現にASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
折れ線グラフに赤い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
文字列の最初	s[0]
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ふたつの集合のいずれか一方だけの集合を求める	aSet.symmetric_difference(aSet2)
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
乱数で要素を埋めた行列	np.random.random((行数, 列数))
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
xでデータフレームの指定したカラムの未入力値を補う	df['列A'].fillna(x)
正規表現にケースを無視して文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
散布図を黒い左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
変数名をキーとして辞書	dict(name=element)
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
ある列のカテゴリごとの標準偏差	df.groupby('列A').std()
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
空の両端キュー	collections.deque()
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
実数のアークタンジェント	math.atan(x)
実数の天井	math.ceil(x)
option: バリーウッドにグラフの色を変更する	color = 'burlywood'
二進文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int)
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
折れ線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
散布図を丸印を使用して描画する	plt.scatter(データ列x, データ列y, marker='o')
データフレームの指定した列の不偏分散	df['列A'].var(ddof=1)
実数を数で割って切り捨てる	x // y
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
シスル色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
option: グラフの色をゴールドに変更する	color = 'gold'
棒グラフをサドルブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
データフレームの標本分散	df.var(ddof=0)
現在をタプルにする	datetime.datetime.today().timetuple()
1行分改行なしで標準入力から読む	sys.stdin.readline().rstrip()
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
クラス分類の偽陽性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
ファイルを絶対パスに変換する	os.path.abspath(filepath)
縦棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
n番目の列を除いたデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームのあるカラムの値がxより大きい行を選択する	df[df['列A'] > x]
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームの指定した列を丸める	df['列A'].round()
データフレームを表示するとき行数を変更する	pd.set_option('display.max_rows', n)
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
nをn2で割った余り	n % n2
縦棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
option: グラフの色をダークレッドに指定する	color = 'darkred'
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
n進文字列を整数に変換する	int(s, n)
データフレームの一部のカラムの欠損値を直後の値に変更する	df[['列A', '列B']].fillna(method='bfill')
データフレームをあるカラムによって降順にソートする	df.sort_values(by='列A', ascending=False)
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
数値を展開する	sympy.expand(e)
データフレームの末尾	df.tail()
辞書をカウンタに変換する	collections.Counter(aDict)
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
option: 耐火レンガにグラフの色を指定する	color = 'firebrick'
配列のKurtosisを求める	scipy.stats.kurtosis(配列, bias=False)
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
ダークゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフをスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='slateblue')
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
option: セパレータを改行にする	sep = '\n'
文字列中に部分文字列が存在する	sub in s
折れ線グラフのマーカーを丸印にする	plt.plot(データ列x, データ列y, marker='o')
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
ダークシアグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
year年month月day日の日付をオブジェクト化する	datetime.date(year=year, month=month, day=day)
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
ブランチドアーモンド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
実数を百の位で丸める	round(x, -2)
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
文字列をファイルに書き込む	f.write(s)
rgbのポイントマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
単位行列を作る	np.eye(行数, 列数)
折れ線グラフの色をペールグリーンにセットする	plt.plot(データ列x, データ列y, color='palegreen')
ふたつのリストの積集合	list(set(aList) & set(aList2))
ベクトルの合計値	np.sum(aArray)
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
連番の配列の自動作成する	np.arange(開始値, 終了値, 等差)
本日が何日か知る	datetime.datetime.today().day
標準入力から1行読み取る	input()
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
実数を万の位で丸める	round(x, -4)
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: ダークマゼンタ色を使う	color = 'darkmagenta'
シルバー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
両端キューのstart〜endの要素を使う	collections.deque(itertools.islice(deq, start, end))
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
正規表現patternでデータシリーズの値をreplにまとめて置き換える	ds.replace(pattern, repl, regex=True)
ユーザの入力を整数として受け取る	int(input())
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
ファイルをクローズする	f.close()
散布図をライトゴールドロディイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
プログラムを正常に終了する	sys.exit(0)
option: グラフの色をカーキに設定する	color = 'khaki'
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
無限に文字列が繰り返す列	itertools.repeat(element)
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
折れ線プロットを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
スクリプトの名前を知る	sys.argv[0]
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
nがn2で割り切れるか調べる	n % n2 == 0
option: ディムグレー色を使う	color = 'dimgrey'
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
折れ線グラフの色をアクアに変更する	plt.plot(データ列x, データ列y, color='aqua')
散布図に黒い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
表データを配列に変換する	df.values
組が少なくともひとつ真か調べる	any(aTuple)
一点鎖線でデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
option: 茶色色を使う	color = 'brown'
データフレームの標本分散を求める	df.var(ddof=0)
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
クラス分類をアンサンブル学習を用いて行う	sklearn.ensemble.VotingClassifier()
行列の内積	np.dot(aArray, aArray2)
ヒストグラムの色をシーグリーンにセットする	plt.hist(データ列, color='seagreen')
オレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
日付データのデータシリーズをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
横棒グラフをミディアムパープル色として描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
option: グラフの種類を点線に指定する	linestyle = 'dotted'
ある列の値がxに等しいデータを抽出する	df[df['列A'] == x]
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
predicateFuncが真とならないシーケンスの要素を得る	itertools.dropwhile(predicateFunc, iterable)
x座標の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
散布図をミディアムバイオレットレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
整数最小公倍数	math.lcm(n, n2)
ドジャーブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
横棒グラフを黄緑色を使って描画する	plt.barh(データ列x, データ列y, color='chartreuse')
行列の列ごとの合計値を求める	np.sum(aArray, axis=0)
ターコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
散布図をrgbの星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
自然数の並べ方の総数	math.perm(n)
線グラフを色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ヒストグラムの色をゲインズボロに変更する	plt.hist(データ列, color='gainsboro')
プログラムの実行を強制的に終了する	sys.exit()
ある列にリストの値が含まれる行を抽出する	df[df['列A'].isin(リスト)]
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
データフレームをある列の値によってグループ化し、要約統計量を求める	df.groupby('列A').describe()
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
option: グレー色を使用する	color = 'gray'
ヒストグラムを３つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
グラフを描画する準備をする	import matplotlib.pyplot as plt
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
勾配ブースティングとして回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
行列をリストから作る	np.array(aList)
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
ライトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
リストの散らばりを作図する	plt.scatter(データ列x, データ列y)
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
リストをnからナンバリングする	enumerate(aList, start=n)
データフレームをCSVファイルにBOM付きで書き出す	df.to_csv('file.csv', encoding='utf_8_sig')
データフレームの中の列をビン数nを用いてビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
オブジェクトが関数か調べる	callable(obj)
数列の相関係数	scipy.stats.pearsonr(数列, 数列2)
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
option: ビスク色を使う	color = 'bisque'
データフレームの文字列をNaNにする	df.replace(値, np.nan)
文字列の開始位置以降が部分文字列で開始する	s.startswith(sub, start)
データフレームのあるカラムの標本分散	df['列A'].var(ddof=0)
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
タプルの末尾を取り除く	aTuple[:-1]
データフレームの指定したカラムを千の位で丸めて、整数型にする	df['列A'].round(-3).astype(int)
データフレームのあるカラムが何年か見る	df['列A'].dt.year
データシリーズの歪度	ds.kurt()
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
縦棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
縦棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
n2がnより大きく、かつ、n3未満	n < n2 and n2 < n3
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
原点から(小数点数,y)の距離を求める	math.hypot(x, y)
数値を積分する	sympy.integrate(e)
リストを行列に変換する	np.array(aList)
シーケンスをいつまでも繰り返す	itertools.cycle(iterable)
パープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
スノー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
値を双方向キューの先頭から削除する	deq.popleft()
折れ線グラフの色をライムに変更する	plt.plot(データ列x, データ列y, color='lime')
モデルの残差を求める	目的変数 - model.predict(説明変数)
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
日付時刻データの分数	aDatetime.minute
ある列の文字列に部分文字列が含まれる行を抽出する	df[df['列A'].str.contains(部分文字列)]
グラフの色を淡くする	sns.set(pallete='muted')
縦棒グラフをダークグレー色を使って描画する	plt.bar(データ列x, データ列y, color='darkgray')
黒い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
データシリーズのNaNを最大値に設定する	ds.fillna(ds.max())
データ列とイテラブルの散布図を描画して、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
データフレームをグループ化し、あるカラムに対し個数を求める	df.groupby('列A')['列B'].count()
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
プラットホームの名前	sys.platform
データフレームから型リストで指定したデータ型の列を抽出する	df.select_dtypes(include=typeList)
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
リストの長さだけ繰り返す	range(len(aList))
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
カウンタを低頻度方から列挙する	aCounter.most_common()[::-1]
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
データシリーズの第一四分位数	ds.quantile(0.25)
赤いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
固有値分解を行う	model = sklearn.decomposition.PCA(n_components=n)
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
色付きの一点鎖線を用いて線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
双方向キューの末尾	deq[-1]
日付時刻データをn分前にする	aDatetime - datetime.timedelta(minutes=n)
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
option: ミスティローズ色を使う	color = 'mistyrose'
列によってデータフレームをグループ化し、記述統計量を求める	df.groupby('列A').describe()
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: フォントの色をアリスブルーに指定する	color = 'aliceblue'
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
やわらかい青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
円プロットを真円にする	plt.axis('equals')
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
データフレームの一部のカラムの欠損値を直前の値に設定する	df[['列A', '列B']].fillna(method='ffill')
クラス分類をヒストグラムと勾配ブースティングとして行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
データフレームをグループ化し、それぞれの最小値を求める	df.groupby('列A').min()
複素数	complex(x, y)
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
ディープスカイブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
リストのn番目の要素を削除する	del aList[n]
見やすいグラフを描画する	import seaborn as sns
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
option: スノー色を用いる	color = 'snow'
データフレームの一部のカラムの中にある文字列の合計を数える	df[['列A', '列B']].isin([value]).sum()
配列が正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(配列)
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
コレクションを使う	import collections
複素数型の全要素を０で初期化した行列を作成する	np.zeros(行数, 列数, dtype=bool)
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
データフレームから指定したデータ型のカラム名の一覧	df.select_dtypes(型).columns
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
nのビット長	n.bit_length()
データフレームを丸める	df.round()
ヒストグラムをダークグリーン色として描画する	plt.hist(データ列, color='darkgreen')
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ベクトルのユニークな要素とそのインデックス	u, indices = np.unique(aArray, return_index=True)
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
散布図に四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s')
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
ミディアムアクアマリンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumaquamarine')
色付きの一点鎖線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
文字列をトリムする	s.strip()
線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
縦棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
データフレームの一部のカラムの欠損値を前の行の値に変更する	df[['列A', '列B']].fillna(method='ffill')
ファイルをオープンして]、バイナリ書き込みストリームを求める	open(filepath, mode='wb')
折れ線グラフに下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
配列の累積積	np.cumprod(aArray)
散布図を赤い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
実数の二乗	x ** 2
カーキ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
ダークシアン色でヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
折れ線グラフのポイントマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
CSVファイルからデータフレームを読み込む	pd.read_csv('file.csv', sep=',')
グラフのグリッドを暗くする	sns.set(style='darkgrid')
小数点数の小数部	math.modf(x)[0]
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
シャルトリューズ色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
集合の補集合	aSet.difference(aSet2)
列名を指定して二つのデータフレームを内部ジョインする	pd.merge(df, df2, on='列A', how='inner')
辞書のエントリ数を得る	len(aDict)
折れ線グラフの丸印を赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
ファイルを全部、読む	f.read()
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
option: コーラル色を用いる	color = 'coral'
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
文字列をキャピタライズする	s.capitalize()
データフレームのNaNをモードに設定する	df.fillna(df.mode().iloc[0])
ダークマゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
縦棒グラフをピーチパフ色として描画する	plt.bar(データ列x, データ列y, color='peachpuff')
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
xが1、もしくは2、もしくは3に等しいかどうか	x == 1 or x == 2 or x == 3
二つのリストから辞書を作成する	dict(zip(aList, aList2))
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
ヒストグラムの色をレベッカパープルにセットする	plt.hist(データ列, color='rebeccapurple')
正規分布で疑似乱数を発生させる	random.normalvariate(mu=0.5, sigma=0.2)
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
変数について数式を積分する	sympy.integrate(e, z)
縦棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
データフレームの選択したカラムの要約統計量	df[['列A', '列B']].describe()
タン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
棒グラフをダークグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='darkgrey')
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
サポートベクターマシンで回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
大バツ印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
データシリーズを100の位で丸める	ds.round(-2)
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
現在の秒数	datetime.date.today().second
データフレームをCSVファイルにSJISで保存する	df.to_csv('file.csv', encoding='shift_jis')
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
データフレームのカラムの欠損値を最小値で埋める	df['列A'].fillna(df['列A'].min())
日付データと日付データの時間差	aDate - aDate2
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
リストと配列の散布図に黒い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
双方向キューのstart〜endのデータを使う	collections.deque(itertools.islice(deq, start, end))
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームをValueMapでまとめて置き換える	df.replace(ValueMap)
2つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
文字列はタイトルケースかどうか調べる	s.istitle()
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
要素が辞書の値として含まれているか調べる	element in aDict.values()
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
option: コーラル色を使う	color = 'coral'
データフレームのカラム間の相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
データフレームから10行、ランダムサンプリングする	df.sample(10)
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
空行を表示する	print()
nの2乗を求める	n ** 2
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
nからn2の範囲	range(n, n2)
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
ライトグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
文字列の右側から空白を取り除く	s.rstrip()
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
リストの合計値	sum(aList)
x,yの複素数	complex(x, y)
データフレームの列を散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
時間を使う	import time
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['列A', '列B']).describe()
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
データフレームのカラムのトリム平均	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
入力ストリーム全体を行単位で分割してリストにする	[s.strip() for s in f.readlines()]
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
空の辞書	{}
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
nとn2の差を算出する	n - n2
文字列が文字列リストに含まれるか調べる	s in aStringList
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
データシリーズの欠損値を平均値で埋める	ds.fillna(ds.mean())
コギーくんを使いたい	import kogi
option: BOM付きを使う	encoding = 'utf_8_sig'
折れ線グラフをラベンダー色として描画する	plt.plot(データ列x, データ列y, color='lavender')
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
データフレームの選択したカラムの母標準偏差	df[['列A', '列B']].std(ddof=0)
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
縦棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
クリムゾン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
グレー色でヒストグラムを描画する	plt.hist(データ列, color='grey')
文字列を部分文字列で二分する	s.partition(sub)
リストが空でない	len(aList) != 0
モデルの正確さを求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
option: カデットブルー色を使う	color = 'cadetblue'
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
数値の符号を同じにする	math.copysign(x, x2)
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
データフレームの選択したカラムのNaNを最頻値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mode().iloc[0])
option: ライトグリーン色を使用する	color = 'lightseagreen'
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
タン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
線グラフの色をシアンに指定する	plt.plot(データ列x, データ列y, color='cyan')
option: ペルーにグラフの色をセットする	color = 'peru'
n2行n列の二次元リストを作る	[[0] * n for _ in range(n2)]
タプルの先頭	aTuple[0]
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
整数乱数で要素を埋めた配列を作る	np.random.randint(開始値, 終了値, N)
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
データフレームの中に文字列と日付データがあるか調べる	df.isin([value, value2])
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
散布図をライムグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='limegreen')
データフレームを関数のカテゴリによってグループ化する	df.groupby(関数)
縦棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
回数を制限して新しい文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub, n)
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
散布図のポイント印を赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
淡いピンク色色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
データシリーズの尖度	ds.skew()
データフレームとデータシリーズを横方向に連結する	pd.concat([df, ds], axis=1)
データ列をビン分割する	pd.cut(ds, aList)
決定木の重要度をグラフにする	plt.barh(X.columns, model.feature_importances_)
データフレームのある列をリストにする	df['列A'].values.tolist()
option: フォントの色をダーク・スラテグレーに指定する	color = 'darkslategrey'
日付データのデータフレームのあるカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
棒グラフをダークカーキ色として描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
数式の変数にnを代入する	e.subs(z, n)
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
option: グラフの色をコーラルに設定する	color = 'coral'
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
破線を用いてヒストグラムを描く	plt.hist(データ列, linestyle='dashed')
代数計算を用いる	import sympy
nにn2をかけた値をnにする	n *= n2
option: グラフの色をハニーデューに設定する	color = 'honeydew'
グリッドを破線にする	plt.grid(linestyle='dashed')
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
データシリーズの欠損値を最小値に増やす	ds.fillna(ds.min())
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
文字列の終了位置より前に部分文字列がある	s.find(sub, 0, end) != -1
イテラブルをセットに変換する	set(iterable)
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
辞書を浅くコピーする	dict(aDict)
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
文字列の末尾から部分文字列を取り除く	s.rstrip(sub)
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
option: 未入力値を先頭に来るようにする	na_position = 'first'
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
入力から二つの少数を読む	A, B = map(float, input().split())
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
３つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
切り上げて整数に変換する	math.ceil(x)
option: パレットトルコイズ色を使う	color = 'paleturquoise'
リストを２つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
列からサンプリングする	random.sample(iterable)
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
データフレームを一万の位で丸める	df.round(-4)
データフレーム中の欠損値をインプレイスでドロップする	df.dropna(inplace=True)
黄色で文字列を表示する	print(f'\033[33m{value}\033[0m')
ヒストグラムをカデットブルー色を用いて描画する	plt.hist(データ列, color='cadetblue')
ホールドアウト法を使用する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
nにn2を足して代入する	n += n2
実数の双曲線正接の逆数	math.atanh(x)
オブジェクトはリストかタプルか	isinstance(obj, (list)
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームの選択したカラムのNaNをメディアンで補完する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
縦棒グラフをシルバー色として描画する	plt.bar(データ列x, データ列y, color='silver')
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
辞書にマッピングの項目を追加する	aDict.update(aDict2)
マッピングに別の辞書の値を更新する	aDict.update(aDict2)
ファイルをSJISとして追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
文字列を右トリムする	s.rstrip()
データフレームの行を範囲指定して抽出する	df[start:end]
option: モカシンにグラフの色を設定する	color = 'moccasin'
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
データ列の四分位を作図する	plt.boxplot(データ列)
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
リストの末尾にオブジェクトを追加する	aList.append(element)
データフレームのあるカラムが何時か知る	df['列A'].dt.hour
データフレームを千の位で丸めて、整数型にする	df.round(-3).astype(int)
行列の累積積を求める	np.cumprod(aArray)
option: 未入力値も含める	dropna = True
ヒストグラムをアンティークホワイト色を用いて描画する	plt.hist(データ列, color='antiquewhite')
option: 表計算ファイルシートの名前を設定する	sheet_name = ['A', 'B']
option: フォントの色をスノーに設定する	color = 'snow'
回帰分析をサポートベクターマシンで行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
特異値分解を用いて多次元データをパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
棒グラフをミディアムシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
散布図にポイントマーカーを加える	plt.scatter(データ列x, データ列y, marker='.')
リストの個数だけ繰り返す	range(len(aList))
option: サーモン色を使う	color = 'salmon'
部分文字列か調べる	sub in s
プロットに格子線を入れる	plt.grid(True)
実数を十六進表記の文字列に変換する	x.hex()
ハッシュ値を求める	hash(x)
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
オリベドラブ色でヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
文字列を末尾から空白で区切る	s.rsplit()
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
ゼロ埋めした行列	np.zeros(行数, 列数)
正規分布に基づく確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
二つの整数最小公倍数	math.lcm(n, n2)
辞書をチェーンマップにする	collections.ChainMap(aDict)
指定した列のカテゴリで集計し、それぞれの平均値を求める	df.groupby('列A').mean()
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
配列のトリム平均を計算する	scipy.stats.tmean(配列, limits=(下限, 上限), inclusive=(True, True))
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
デックのstart番目からend番目までの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
option: グラフの色をチョコレートに変更する	color = 'chocolate'
データフレームのn行目を取り出す	df.loc[n]
日付時刻データと日付時刻データの時間差を求める	aDatetime - aDatetime2
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='teal')
データフレームの一部のカラムが正規分布からどの程度、尖っているか確認する	df[['列A', '列B']].skew()
2を底とする実数の対数	math.log2(x)
文字列に漢字が含まれるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
option: フォントの色をミディアムアクアマリンにする	color = 'mediumaquamarine'
データフレームの第一四分位数を求める	df.quantile(0.25)
option: カンマをセパレータで使う	sep = ','
リストとリストについての散布図に上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
option: カラムの名前を自動的な連番に設定する	header = None
option: 色をシスルに設定する	color = 'thistle'
組の中の最大値を求める	max(aTuple)
option: セパレータをコロンにする	sep = ':'
線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
折れ線グラフの色をグリーンに変更する	plt.plot(データ列x, データ列y, color='green')
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
辞書のキーの値	aDict[key]
option: ブルーバイオレットを用いる	color = 'blueviolet'
散布図のバツマーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
ダークスレートブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
今日のタイムスタンプ	datetime.datetime.today()
ロバスト推定としてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
実数の余弦の逆数	math.acos(x)
二つの文字列をカンマで区切って表示する	print(value, value2, sep=',')
二つのリストを順にプリントする	print(value, value2)
浮動小数点数が負の数か調べる	x < 0
option: マーカーの色を濃いシアンにする	markerfacecolor = 'darkcyan'
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: フォントの色をビスクに設定する	color = 'bisque'
多い方からカウンタをリストとして得る	aCounter.most_common()
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
折れ線グラフの色をライトブルーに指定する	plt.plot(データ列x, データ列y, color='lightblue')
UTF8でファイルを書き込みできるように開く]	open(filepath, mode='w', encoding='utf-8')
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
ダークカーキ色でヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
ピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
ヒストグラムの色をオールドレースにセットする	plt.hist(データ列, color='oldlace')
option: グラフの色をブラックに設定する	color = 'black'
最初のプログラムを書く	print('Hello World')
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(配列, 'norm')
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
文字列を文字リストに変換する	list(s)
整数nを十六進表現に変換する	hex(n)
イテラブルをスタックにする	collections.deque(iterable)
日付データのデータフレームのあるカラムをインデックスにする	df.index = pd.DatetimeIndex(df['列A'])
文字列内に数字があるか調べる	any(c.isdigit() for c in s)
逆順の両端キューを求める	reversed(deq)
option: 文字コードをBOM付きにする	encoding = 'utf_8_sig'
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
配列と配列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
全ての８進数字	string.octdigits
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
データフレームのパーセンタイル	df.quantile(パーセント/100)
データシリーズの欠損値を数値で補完する	ds.fillna(x)
モデルを当てはめる	model.fit(説明変数, 目的変数)
数式を変数についてn階微分する	sympy.diff(e, z, n)
データフレームのあるカラムの秒	df['列A'].dt.second
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
複数のシートを指定してエクセルファイルから読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
ファイルパスを追加できるようにオープンする]	open(filepath, mode='a')
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
データフレームの選択したカラムを一万の位で丸める	df[['列A', '列B']].round(-4)
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームをソートし、下位n件を取り出す	df.sort_values('キーとなる列').tail(n)
文字列を最後の部分文字列によって二分割する	s.rpartition(sub)
双方向キューに値をエンキューする	deq.appendleft(element)
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
KNNでクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
実数のn乗を求める	x ** n
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
日付時刻データを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
赤い一点鎖線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
データフレームからランダムに選択する	df.sample()
グラフをポスター用に設定する	sns.set(context='poster')
option: 色の透明度を変更する	alpha = 0.5
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
青い破線でリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
珊瑚色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
実数を切り上げて整数に変換する	math.ceil(x)
グラフを使う準備をする	import matplotlib.pyplot as plt
ヒストグラムの色をゴールドに変更する	plt.hist(データ列, color='gold')
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ゼロ埋めされたブール型のベクトルを作成する	np.zeros(要素数, dtype=np.int32)
散布図に三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='^')
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
線形のクラス分類を行う	model = sklearn.linear_model.LogisticRegression()
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
半透明の一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
データフレームからn行、サンプリングする	df.sample(n)
値を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
eの乗数	math.exp(x)
二つの列によってデータフレームを並べ直し、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
ファイルをオープンして]追加ストリームを使う	open(filepath, mode='a')
データフレームの指定したカラムの空文字をドロップする	df['列A'].replace('', np.nan).dropna()
黄緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
サンディーブラウン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
数を十の位で丸める	round(x, -1)
文字列リストをsepを区切りとして結合する	sep.join(aStringList)
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
option: 貝殻を用いる	color = 'seashell'
異なる列をキーとしてデータフレームを結合する	pd.merge(df, df2, left_on='列A', right_on='列B')
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列が小文字か調べる	s.islower()
データフレームの列の文字列をNaNに変換する	df['列A'].replace(値, np.nan)
ヒストグラムの色を貝殻に指定する	plt.hist(データ列, color='seashell')
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
オレンジレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
円グラフを用いてデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
グラフから格子線を消す	plt.grid(False)
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
option: グラフの種類を点線に設定する	linestyle = 'dotted'
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
データシリーズの記述統計量	ds.describe()
分子割る分母	fractions.Fraction(分子, 分母)
ダークレッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkred')
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
縦棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
ダークゴールデンロッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
文字列を最後から空白で区切る	s.rsplit()
指定したカラムの中の未入力値の合計を数える	df['列A'].isna().sum()
変数について数式の積分を求める	sympy.integrate(e, z)
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
散布図を大バツ印で描画する	plt.scatter(データ列x, データ列y, marker='X')
option: グラフの色をデピンクに設定する	color = 'deeppink'
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームを百の位で丸めて、整数にする	df.round(-2).astype(int)
データ列の推移を破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
配列間のケンドールの相関係数	scipy.stats.kendalltau(配列, 配列2)
組をn回、連結する	aTuple * n
option: マーカーを右三角に変える	marker = '>'
列を累加する	itertools.accumulate(iterable)
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
データフレームから同じ内容の行をドロップする	df.drop_duplicates(inplace=True)
データフレームの一部のカラムがどの程度、分散しているか確認する	df[['列A', '列B']].var()
箱ひげ図としてリストを可視化する	plt.boxplot(データ列)
nが2で割り切れないか調べる	n % 2 == 1
横軸の目盛を対数に変更する	plt.xscale('log')
辞書順で文字列は文字列より前か調べる	s < s2
ひとつでも非英数字が文字列中にあるか	any(not c.isalnum() for c in s)
オブジェクトは論理値クラス	isinstance(obj, bool)
散布図を真紅色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
日付を使う	import datetime
option: アイボリーを使う	color = 'ivory'
option: 色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
等間隔で列をn個にビン分割する	pd.cut(ds, n)
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
指定した列のカテゴリで集計し、それぞれの個数を求める	df.groupby('列A').count()
配列とリストの散布図を描画し、、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
リストから行列を作成する	np.array(aList)
横棒グラフを黄色色を使って描画する	plt.barh(データ列x, データ列y, color='yellow')
指定した列だけ、データフレームの重複を見る	df.duplicated(subset='列A')
ある列の値がxより大きく、yより小さいデータを抽出する	df[(x < df['列A']) & (df['列A'] < y)]
パレットトルコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
ビスク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
全ての数字	string.digits
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
option: ダークバイオレット色を使う	color = 'darkviolet'
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
option: 改行コードを旧Macにセットする	newline = '\r'
数列とデータ列についての散布図に赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
配列の標準誤差を求める	scipy.stats.sem(配列)
データフレームをグループ化し、ある列に対し平均値を求める	df.groupby('列A')['列B'].mean()
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
数式の積分を求める	sympy.integrate(e)
NaNも加えてデータフレームのある列をワンホット・ベクトルに変換する	pd.get_dummies(df['列A'], dummy_na=True)
データフレームのn行目を削除して	df.drop(n, axis=0)
その最小値でデータフレームのNaNを埋める	df.fillna(df.min())
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
行列の各要素の積	np.multiply(aArray, aArray2)
ホットピンク色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
セットからエラーなく値を取り除く	aSet.discard(element)
option: ディムグレーを使う	color = 'dimgray'
組を順に表示する	print(*aTuple)
グラフの描画で明るくパレットを使う	sns.set(pallete='bright')
二つのリストから辞書	dict(zip(aList, aList2))
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
パレットトルコイズ色でヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
データフレームのn行目をドロップする	df.drop(n, axis=0, inplace=True)
nとn2の商	n / n2
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
破壊的に昇順に二つの列によってデータフレームを整列する	df.sort_values(by=['列A', '列B'], ascending=True, inplace=True)
リストにリストを追加して拡張する	aList.extend(aList2)
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
辞書のキーとその値を列挙する	aDict.items()
データフレームの一部の列の中に文字列があるかテストする	df[['列A', '列B']].isin([value])
実数の平方根	math.sqrt(x)
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
文字列を文字コードでバイト列に変換する	s.encode(encoding=encoding)
データフレームを昇順にインデックスをキーにしてソートする	df.sort_index(ascending=True)
ミディアムパープル色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
値が集合に含まれるかどうか調べる	element in aSet
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
実数を切り下げる	math.floor(x)
データフレームの指定した列のパーセンタイルを計算する	df['列A'].quantile(パーセント/100)
コーパスのバージョンを知る	version = 'wcce2022-0.1'
ネイビー色を用いてヒストグラムを描画する	plt.hist(データ列, color='navy')
文字列を正規表現で分ける	re.split(pattern, s)
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
最大値でデータフレームの選択した列の欠損値を埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].max())
実数とyの斜辺	math.hypot(x, y)
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
縦棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
データシリーズの秒	ds.dt.second
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
配列を２つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
0から始まる無限数列	itertools.count()
目的変数をモデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
ライトシアン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
乱数のベクトル	np.random.random(N)
文字列のサフィックスが部分文字列かどうか調べる	s.endswith(sub)
偽	False
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
本日のタイムスタンプ	datetime.datetime.today()
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
ヒストグラムをプロットして、区間数を設定する	plt.hist(データ列, bins=区関数)
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
データフレームの選択したカラムの値をまとめてValueMapで置き換える	df[['列A', '列B']].replace(ValueMap)
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
タイムスタンプデータが日付時刻データより早いか調べる	aDatetime < aDatetime2
option: 色をライトグリーンに設定する	color = 'lightseagreen'
ベクトルの最小	np.min(aArray)
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
リストとデータ列について散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
配列は何次元か調べる	aArray.ndim
リストの最初の文字列を探す	aList.index(element)
option: グリーンイエロー色を使う	color = 'greenyellow'
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
配列と配列の散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
配列の行ごとの合計	np.sum(aArray, axis=1)
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
指定した列で集計し分散を算出する	df.groupby('列A').var()
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
ある列の文字列に部分文字列が含まれない行を抽出する	df[~df['列A'].str.contains(部分文字列)]
option: フォントの色をパールバイオレットレッドに変更する	color = 'palevioletred'
数列の移り変わりを折れ線プロットで描画する	plt.plot(range(len(データ列)), データ列)
xを浮動小数点数型にする	float(x)
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
リストとリストについての散布図に赤い▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
横棒グラフをオールドレース色を用いて描画する	plt.barh(データ列x, データ列y, color='oldlace')
option: 分割記号を文字列にする	sep = s
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
option: ダークサーモン色を使う	color = 'darksalmon'
指定したカラムの標本標準偏差	df['列A'].std(ddof=1)
データフレームの指定したカラムの欠損値をxに設定する	df['列A'].fillna(x)
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
折れ線グラフの色を白に変更する	plt.plot(データ列x, データ列y, color='white')
符号付きでnを長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
UTF8でファイルを開く]	open(filepath, encoding='utf-8')
横棒グラフの色を深紅にする	plt.barh(データ列x, データ列y, color='crimson')
データシリーズの曜日数	ds.dt.dayofweek
書き出すカンマ区切り形式の小数点以下の桁数を指定する	df.to_csv('file.csv', float_format='%.3f')
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
タプルの中の最小値	min(aTuple)
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
option: ライトグレーにグラフの色を設定する	color = 'lightgrey'
自然数の最大公約数	math.gcd(n, n2)
文字列の大文字と小文字を交換する	s.swapcase()
文字列の左側からタブを取り除く	s.lstrip('\t')
モカシン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
option: ネイビー色を使う	color = 'navy'
モデルを学習する	model.fit(説明変数, 目的変数)
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
option: バリーウッド色を使う	color = 'burlywood'
文字列が文字列リストに存在するか調べる	s in aStringList
文字列内にひとつでも小文字があるか調べる	any(c.islower() for c in s)
右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>')
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
year年month月day日を日付にする	datetime.date(year=year, month=month, day=day)
ピアソンでデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='pearson')
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
データフレームの選択したカラムの相関行列をスピアマン相関係数で求める	df[['列A', '列B']].corr(method='spearman')
option: インデックスを連番に設定する	index_col = None
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
散布図をオリーブ色として描画する	plt.scatter(データ列x, データ列y, color='olive')
長さnのリスト	[0] * n
多項式回帰データフレームの散布図にを加える	sns.regplot(data=df, x='列名', y='列名', order=2)
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
オレンジレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
データフレームを千の位で丸める	df.round(-3)
データフレームをグループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
option: スプリンググリーン色を使用する	color = 'springgreen'
点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
rgbのダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
ディレクトリ	os.getcwd()
行列の値	aArray[行番号, 列番号]
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
アヤメのデータセットをロードする	df = sns.load_dataset('iris')
データフレームの指定したカラムの中にある文字列と文字列の合計を数える	df['列A'].isin([value, value2]).sum()
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
日付データが金曜日か調べる	aDate.weekday() == 4
列名を指定して二つのデータフレームを左ジョインする	pd.merge(df, df2, on='列A', how='left')
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
データフレームの選択したカラムの欠損値をxで補う	df[['列A', '列B']].fillna(x)
チョコレート色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
行列の最大値を使う	np.max(aArray)
nからいつまでもカウントダウンする	itertools.count(start=n, step=-1)
折れ線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
棒グラフをダークマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
データフレームのカラムを標準化する	scipy.stats.zscore(df['列A'])
option: ライトスカイブルーにグラフの色を設定する	color = 'lightskyblue'
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
未入力値のある行を破壊的にドロップする	df.dropna(inplace=True)
本日の日付	datetime.date.today()
タプルのキーを要素に設定する	aDict[key] = element
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
option: 改行コードを旧Macに設定する	newline = '\r'
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
赤いダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
文字列がリストの要素でないか調べる	element not in aList
データフレームの指定したカラムを1000の位で丸める	df['列A'].round(-3)
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
option: オールドレース色を使用する	color = 'oldlace'
異なる列をキーとして二つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on='列A', right_on='列B', how='inner')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
プラットフォームの符号付き整数の最大値	sys.maxsize
線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
二つの文字列を改行で区切って表示する	print(value, value2, sep='\n')
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
行列のユニークな値を要素とする配列	np.unique(aArray)
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
カウンタの値数	len(aCounter)
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
データフレームの先頭n行	df.head(n)
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
要素は集合の要素に含まれないか調べる	element not in aSet
紺色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
集合をイミュータブルなセットに変換する	frozenset(aSet)
データシリーズを丸めて、整数にする	ds.round().astype(int)
アクアマリン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
折れ線グラフのポイント印の線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
リストの中の最大値	max(aList)
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgray')
書式をargsを引数としてフォーマットする	formatText.format(*args)
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
横棒グラフをサドルブラウン色として描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
データフレームのカラムの名前を一度に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
大量のデータが正規分布に従うか調べる	scipy.stats.kstest(配列, 'norm')
option: エクセルファイルシートの名前を設定する	sheet_name = ['A', 'B']
t-SNEを用いて多次元データをパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
ファイルパスをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
データフレームの指定したカラムの中の欠損値の合計を数える	df['列A'].isna().sum()
データ列間の平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
カウンタの要素を増やす	aCounter[element] += 1
実測値をモデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
プロットの背景色を暗くする	sns.set(style='darkgrid')
リストの要素を昇順にソートする	sorted(aList, reverse=False)
名前からカラーマップを求める	"plt.get_cmap(""カラーマップ名"")"
全ての印字可能な文字	string.printable
データフレームから10行、サンプリングする	df.sample(10)
折れ線グラフをパパイヤウィップ色を使って描画する	plt.plot(データ列x, データ列y, color='papayawhip')
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
TSVファイルからデータフレームを読む	pd.read_csv('file.tsv', sep='\t')
option: グラフの色をオールドレースに設定する	color = 'oldlace'
実数がNaNか調べる	math.isnan(x)
option: ライムグリーン色を用いる	color = 'limegreen'
option: SJISを使う	encoding = 'shift_jis'
文字列をカンマで区切って、列挙する	s.split(',')
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
データフレームにおいてどの値が頻出か見る	df.mode()
エラーを出力する	sys.stderr
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
散布図の印を黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
折れ線グラフの色をスレートブルーに指定する	plt.plot(データ列x, データ列y, color='slateblue')
nがセットのどれかか確認する	n in aSet
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
二つのオブジェクトが等しいか確認する	obj == obj2
線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
nまでのスライス	slice(n)
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
横棒グラフを描画して、下寄せする	plt.barh(ラベル列, データ列, align='edge')
要素一つのりストを作る	[element]
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
マッピングのコピーを生成する	aDict.copy()
データフレームの上100行	df.head(100)
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
ある列の値がx以上、y未満の行を抽出する	df[(x <= df['列A']) & (df['列A'] < y)]
データシリーズを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
option: 改行を区切り記号で用いる	sep = '\n'
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
青い一点鎖線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
ファイルパスを文字コードtextでオープンする]	open(filepath, encoding=text)
縦棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
データフレームの列の欠損値を直前の値に指定する	df['列A'].fillna(method='ffill')
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(配列)
データフレームの選択したカラムの欠損値を平均値で埋める	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
配列の差	aArray - aArray2
スペクトル分解を行う	model = sklearn.decomposition.PCA(n_components=n)
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
折れ線グラフの▲マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列x, データ列y, marker='D')
ファイルを一行ずつ読み込む	f.readline()
空のリッジ回帰とロッソ回帰のハイブリットモデルを新規作成する	model = sklearn.linear_model.ElasticNet()
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームをグループ化しある列に対し分散を計算する	df.groupby('列A')['列B'].var()
データフレームのある列の値がx以下のデータを抽出する	df[df['列A'] <= x]
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
数の複素数を求める	complex(x)
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
集合をイミュータブルに変換する	frozenset(aSet)
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
折れ線グラフのダイアモンド印の太さを変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
行列の分散	np.var(aArray)
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
データ列のエポック秒を日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
イテラブルに列を続ける	itertools.chain(iterable, iterable2)
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
データフレームのカラムが正規分布に従うか仮説検定する	scipy.stats.shapiro(df['列A'])
データフレームの指定したカラムの最頻値	df['列A'].mode()
実数の指数部	math.frexp(x)[1]
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
リストから配列を作る	np.array(aList)
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
データフレームの値が未入力値か調べる	df.isna()
ロバスト分類器を作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
クラス分類をSDGで行う	model = sklearn.linear_model.SGDClassifier()
変数を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
ベクトルの要素ごとの最大公約数	np.gcd(aArray, aArray2)
横棒グラフを小麦色色を用いて描画する	plt.barh(データ列x, データ列y, color='wheat')
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
実数の二進対数	math.log2(x)
ふたつの列からグループ化し、平均値を求める	df.groupby(['列A', '列B'], as_index=False).mean()
データフレームのヒストグラムを縦横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
ファイルからの入力ストリームを使う	open(filepath)
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
データフレームのカラムをにバイオリン図を使ってグラフ化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
黒いバツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
ベクトルの列ごとの最大	np.max(aArray, axis=0)
データフレームの先頭5行	df.head(5)
数列の推移を赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームの列名の一覧	df.columns
データシリーズの第一四分位数を求める	ds.quantile(0.25)
データフレームの記述統計量	df.describe()
棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
データシリーズを丸める	ds.round()
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
線グラフの色をライトシアンにセットする	plt.plot(データ列x, データ列y, color='lightcyan')
option: マーカーの線幅を変更する	markeredgewidth = 2.5
実数のn乗	x ** n
option: グラフの色をピンクに設定する	color = 'pink'
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
nが正の数か調べる	n > 0
線グラフをハニーデュー色を用いて描画する	plt.plot(データ列x, データ列y, color='honeydew')
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
日付データにn秒を加算する	aDate + datetime.timedelta(seconds=n)
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
タプルをJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False)
ダークオリーブグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
ランダムに一行をデータフレームから抽出する	df.sample()
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
ミントクリーム色としてヒストグラムを描画する	plt.hist(データ列, color='mintcream')
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: ホワイトスモーク色を用いる	color = 'whitesmoke'
日付時刻データが何分か知る	aDatetime.minute
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
数式の数値を計算する	float(e)
パレットトルコイズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
行列の列ごとの標準偏差	np.std(aArray, axis=0)
両端キューを作成する	collections.deque()
option: ディムグレー色を使用する	color = 'dimgray'
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
大量のデータが正規分布に従うか仮説検定する	scipy.stats.kstest(配列, 'norm')
ふたつの関係が真上位集合か	aSet > aSet2
折れ線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
rgbのバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: オリーブ色を使う	color = 'olive'
原点から(実数,y)の距離を算出する	math.hypot(x, y)
モデルの平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
行列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
nがn2の倍数でないか調べる	n % n2 != 0
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
データフレームを各カテゴリに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
ヒストグラムをフクシア色として描画する	plt.hist(データ列, color='fuchsia')
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
タプルの要素を逆順にする	aTuple[::-1]
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
文字列を部分文字列で区切る	s.split(sub)
文字列を全て小文字に変換する	s.lower()
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
横棒グラフをダークグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgray')
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
データフレームをある列によってソートする	df.sort_values(by='列A')
折れ線グラフの色をミディアムオーキッドにセットする	plt.plot(データ列x, データ列y, color='mediumorchid')
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
度数分布図のビン数を設定する	plt.hist(データ列, bins=区関数)
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
ヒストグラムを赤色として描画する	plt.hist(データ列, color='red')
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
横軸に名前を付ける	plt.xlabel('x軸ラベル')
データフレームの列をヒストグラムにする	plt.hist(df[column])
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
ペールグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
データフレームをTSVファイルから読み込む	pd.read_csv('file.tsv', sep='\t')
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
文字列を空白で区切って、文字列リストにする	s.split()
自然数最小公倍数	math.lcm(n, n2)
ライムグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
データフレームの中のNaNの個数を求める	df.isna().sum()
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
正規分布にしたがって配列の値が発生する確率を計算する	scipy.stats.norm.pdf(配列, loc=平均値, scale=標準偏差)
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
0からnまでの整数列	list(range(n+1))
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
アイボリーにヒストグラムの色をセットする	plt.hist(データ列, color='ivory')
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
散布図を黒い四角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
グラフの簡単な説明を表示する	plt.legend()
折れ線グラフを点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムを深紅色で描画する	plt.hist(データ列, color='crimson')
折れ線グラフに青い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
MSDで多次元データを濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
option: 色をダークサーモンに設定する	color = 'darksalmon'
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
実数の常用対数	math.log10(x)
ある列のカテゴリごとの平均値	df.groupby('列A').mean()
option: グラフの色をグリーンに設定する	color = 'green'
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
カウンタをリセットする	aCounter.clear()
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
ヒストグラムをパールゴールデンロッド色を用いて描画する	plt.hist(データ列, color='palegoldenrod')
文字列の先頭で複数行対応としてパターンにマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
ある列の文字列に部分文字列が存在しない行を選ぶ	df[~df['列A'].str.contains(部分文字列)]
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
配列の最頻値を求める	mode, count = scipy.stats.mode(配列)
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
配列の調和平均を求める	scipy.stats.hmean(配列)
現在の再帰の最大回数を知る	sys.getrecursionlimit()
データフレームをソートする	df.sort_values('キーとなる列')
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
option: フォントの色をレモンシフォンに変更する	color = 'lemonchiffon'
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
カテゴリで色分けしてデータフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
option: シーグリーンにグラフの色を設定する	color = 'seagreen'
３自然数のGCD	math.gcd(n, n2, n3)
オブジェクトの属性の値を使う	getattr(obj, プロパティ名)
データフレームを関数によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(関数)]
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
文字列を記号にして、変数にする	z = sympy.Symbol(s)
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
浮動小数点数の最大値	sys.float_info.max
データフレームを二つの列によってソートする	df.sort_values(by=['列A', '列B'])
文字列の文字数を見る	len(s)
リストを並べる	sorted(aList)
option: リネン色を使う	color = 'linen'
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
リストと数列の散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
数列とリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
option: アクア色を使う	color = 'aqua'
列を2回あわせた直積	itertools.product(iterable, repeat=2)
乱数の行列	np.random.random((行数, 列数))
今日が火曜日か	datetime.datetime.today().weekday() == 1
グレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
有理数を用いる	import fractions
option: スカイブルー色を使う	color = 'skyblue'
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
線グラフをベージュ色として描画する	plt.plot(データ列x, データ列y, color='beige')
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
辞書から多重集合を作成する	collections.Counter(aDict)
データフレームを十の位で丸めて整数型にする	df.round(-1).astype(int)
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
JSONLファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
散布図に黒いポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c='k')
データシリーズの平均を求める	ds.mean()
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
棒グラフをホワイトスモーク色として描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
データフレームの指定した列を四捨五入して、整数型にする	df['列A'].round().astype(int)
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
現在が何時か知る	datetime.date.today().hour
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
最初のカテゴリーを除外してデータフレームのある列をワンホット・ベクトルに変換する	pd.get_dummies(df['列A'], drop_first=True)
データフレームが重複しているか調べる	df.duplicated()
predicateFuncが真となるイテラブルの部分	itertools.takewhile(predicateFunc, iterable)
日付時刻データの日	aDatetime.day
データフレームの列間の相関係数をまとめて算出する	df.corr()
列の各値が何回出現するか見る	ds.value_counts()
k進対数	math.log(x, k)
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
xの印字可能な文字列	ascii(x)
ファイルを書き込みモードとしてオープンする]	open(filepath, mode='w')
両端キューが空か調べる	len(deq) == 0
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
CSVファイルにデータフレームをBOMを付けて保存する	df.to_csv('file.csv', encoding='utf_8_sig')
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
データフレームの複数の列をドロップする	df.drop(['列A', '列B'], axis=1, inplace=True)
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
ヒストグラムの色をオレンジに指定する	plt.hist(データ列, color='orange')
option: 文字列を区切りで使う	sep = s
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
データシリーズの分を使う	ds.dt.minute
ヒストグラムをビスク色を用いて描画する	plt.hist(データ列, color='bisque')
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
TSVファイルを読み込む	pd.read_csv('file.tsv', sep='\t')
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
未初期化のベクトル	np.empty(要素数, dtype=np.int)
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
辞書のキーを要素に設定する	aDict[key] = element
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
グラフのx軸とy軸の比率を同じする	plt.axis('equals')
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
黒いダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
日付データにn日を加える	aDate + datetime.timedelta(days=n)
JSONフォーマットのバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
オブジェクトを文字列に変換する	str(obj)
小数点数の余弦	math.cos(x)
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
データシリーズの空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
ファイルが存在しないかどうか	not os.path.exists(filepath)
最後の列を除いたデータフレーム	df[df.columns[:-1]]
線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
データフレームの指定したカラムの標本分散	df['列A'].var(ddof=0)
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
ビン数nとして等量で配列をビン分割する	pd.qcut(aArray, n)
option: グラフの色をオールドレースに変更する	color = 'oldlace'
デピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
t分布型確率的近傍埋め込み法として淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
横棒グラフを紺色を用いて描画する	plt.barh(データ列x, データ列y, color='darkblue')
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
色差別なくカラーパレットをグラフの描画で使う	sns.set(pallete='colorblind')
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
縦棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
二つのカウンタの共通する要素	aCounter & aCounter2
辞書の項目名の値	aDict[key]
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
散布図をロイヤルブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='royalblue')
真部分集合か調べる	aSet < aSet2
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
折れ線グラフの大バツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
データフレームのある列をリストに変換する	df['列A'].values.tolist()
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
標準出力の出力先がターミナルか	sys.stdout.isatty()
ロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
折れ線グラフのポイントマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
option: グラフの色を茶色に設定する	color = 'brown'
リストをビン数nでビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
文字列をコロンで分割して、文字列リストにする	s.split(':')
部分文字列が文字列の開始位置からと終了位置の間に含まれるか調べる	s.find(sub, start, end) != -1
コーンズシルク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
日付時刻データが何日か知る	aDatetime.day
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
オブジェクトが浮動小数点数クラスか調べる	isinstance(obj, float)
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
ラベンダーブラッシュ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
データシリーズのKurtosisを求める	ds.kurt()
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
実数を実数で割った剰余	math.remainder(x, x2)
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
データフレームをグループ化し、ある列に対し合計を求める	df.groupby('列A')['列B'].sum()
ひとつでも空白が文字列内に含まれる	any(c.isspace() for c in s)
折れ線グラフの右三角印の色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
Pythonのバージョン	sys.version
ライトゴールドロディイエロー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
線形モデルのバイアス	model.intercept_
データフレームの未入力値を最頻値で補う	df.fillna(df.mode().iloc[0])
option: スラグレー色を使う	color = 'slategray'
散布図をミディアムシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
正則化付き重回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
日付データにn分を加算する	aDate + datetime.timedelta(minutes=n)
Pandasのバージョンを確認する	print(pd.__version__)
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
トマト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
リストと数列について散布図を描いて、上三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
バイトオーダを知る	sys.byteorder
実行結果を下線付きにする	f'\033[4m{value}\033[0m'
文字列は漢字か	('\u4E00' <= ch <= '\u9FD0')
既存のファイルをBOM付きを用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
文字列が全て空白文字からなるか調べる	s.isspace()
整数nを十六進数表現に変換する	hex(n)
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
JSON形式のバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームの指定したカラムの中に文字列と文字列がある	df['列A'].isin([value, value2])
リストをn倍する	aList * n
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
リストからサンプリングする	random.sample(iterable)
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
要素が集合に含まれるか調べる	element in aSet
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
２つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームのある列の文字列をNaNに変換する	df['列A'].replace(値, np.nan)
データフレームを二つの列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby(['列A', '列B'])]
ファイルのファイルサイズ	os.path.get_size(filepath)
部分文字列で文字列を分割して文字列リストにする	s.split(sub)
データフレーム中の欠損値を削除する	df.dropna(inplace=True)
データ列のユニークな値	ds.unique()
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
option: グラフの色をフクシアに変更する	color = 'fuchsia'
option: グラフの色をシエナに設定する	color = 'sienna'
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
赤色としてヒストグラムを描画する	plt.hist(データ列, color='red')
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
縦棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
データフレームから型の列を抽出する	df.select_dtypes(ty)
データフレームのデータ型の一覧	df.dtypes
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
データフレームの一部のカラムの平均値を求める	df[['列A', '列B']].mean()
データフレームのインデックスがnの行を選択する	df.loc[n]
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
xが一桁の正の整数か調べる	0 <= x <= 9
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
データシリーズのタイムゾーンを設定する	ds.tz_convert('Asia/Tokyo')
オレンジレッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
文字列の長さ	len(s)
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
カラムの尖度を見る	scipy.stats.kurtosis(df['列A'], bias=False)
赤いクロスマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='r')
ベクトルを2次元1列に変形する	aArray.reshape(-1, 1)
浮動小数点数のアークコサイン	math.acos(x)
行列の列ごとの分散	np.var(aArray, axis=0)
コマンドライン引数を列挙する	sys.argv
ミディアムスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
リストをビン数nとしてビン分割する	pd.cut(aList, n)
データフレームのあるカラムの月	df['列A'].dt.month
横棒グラフをトマト色を用いて描画する	plt.barh(データ列x, データ列y, color='tomato')
指定したカラムの欠損値をxに設定する	df['列A'].fillna(x)
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームの選択したカラムの第三四分位数	df[['列A', '列B']].quantile(0.75)
グラフを画面用に設定する	sns.set(context='notebook')
データシリーズを千の位で丸めて整数型にする	ds.round(-3).astype(int)
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
コマンドラインフラグの状態	sys.flags
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
データフレームのカラムからユニークな値を抽出し、リスト化する	df[col].unique().tolist()
散布図のマーカーを赤色にする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
縦棒グラフをシャルトリューズ色として描画する	plt.bar(データ列x, データ列y, color='chartreuse')
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
option: フォントの色をゴールデンロッドに設定する	color = 'goldenrod'
赤い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
option: グレー色を使用する	color = 'grey'
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
実数の逆双曲線余弦を算出する	math.acosh(x)
散布図をサーモン色として描画する	plt.scatter(データ列x, データ列y, color='salmon')
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
グリーンイエロー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームの指定したカラムの中に文字列と文字列がいくつあるか調べる	df['列A'].isin([value, value2]).sum()
マッピングをJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
縦軸の最大・最小値を変更する	plt.ylim(最小値, 最大値)
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
リストのn番目の	aList[n]
散布図に赤い右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図の星印を黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
浮動小数点数を十六進表記の文字列にする	x.hex()
ランダム性を追加したランダムフォレストで回帰分析をする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
散布図の星印を青色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームのインデックスをリセットする	df.reset_index()
ブルーバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='blueviolet')
第一引数で指定されたファイルの名前	sys.argv[1]
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
ローングリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データシリーズの中に文字列とがあるかどうか調べる	ds.isin([value, value2])
データフレームは何行重複するか見る	df.duplicated().sum()
option: グラフの色をベージュに設定する	color = 'beige'
右三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
option: ライトスカイブルー色を使う	color = 'lightskyblue'
文字列が全てアスキー文字か調べる	s.isascii()
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
横棒グラフを青緑色を用いて描画する	plt.barh(データ列x, データ列y, color='turquoise')
散布図に下三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='v')
タプルの末尾のn要素を取り除く	aTuple[:-n]
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
ファイルパスをEUCで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
横棒グラフをホットピンク色として描画する	plt.barh(データ列x, データ列y, color='hotpink')
option: フォントの色をパパイヤウィップに指定する	color = 'papayawhip'
散布図を淡い茶色色で描画する	plt.scatter(データ列x, データ列y, color='tan')
SJISで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
変数を太字でプリントする	print(f'\033[1m{value}\033[0m')
全ての句読点文字	string.punctuation
列をカウントして、カウンタを更新する	aCounter.update(iterable)
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームに重複があるか確認する	df.duplicated()
多次元データをt分布型確率的近傍埋め込み法を用いて濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
シーグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='seagreen')
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
文字化けを防ぐ	sns.set(font='IPAexGothic')
正規表現モジュールをインポートする	import re
昇順に組の要素をソートする	sorted(aTuple, reverse=True)
縦棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
グループ化してデータフレームの散布図を縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
xの絶対値を求める	abs(x)
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
横棒グラフを描画して、バーの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
コーパスのバージョン	version = 'wcce2022-0.1'
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
ふたつの集合の共通部分	aSet.intersection(aSet2)
散布図をブルーバイオレット色として描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
データシリーズの中にある文字列と日付データの合計を数える	ds.isin([value, value2]).sum()
データフレームをインポートする	import pandas as pd
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
モデルを作る	model.fit(説明変数, 目的変数)
ある列の値によってデータフレームをグループ化する	df.groupby('列A')
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
nをn2だけ右シフトする	n >> n2
印字可能な文字を使う	string.printable
ライトブルー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
option: 白色を使う	color = 'white'
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
データフレームの列のユニークな値の個数	df[col].nunique()
データフレームの選択した列の尖りを求める	df[['列A', '列B']].skew()
ダークオーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
option: エンコーディングを文字コードtextに設定する	encoding = text
横棒グラフをダークマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
黒い右三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
nがn2よりも小さい	n < n2
教師データとしてモデルを学習する	model.fit(説明変数, 目的変数)
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
データフレームの選択したカラムの欠損値を最小値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].min())
実数が整数か	x.is_integer()
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
スピアマン相関係数でデータフレームの相関行列を求める	df.corr(method='spearman')
リストの先頭のn要素を取り除く	aList[n:]
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
option: 色をミディアムパープルに設定する	color = 'mediumpurple'
データフレームをソートし、行を振り直す	df.sort_values('キーとなる列').reset_index(drop=True)
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
option: 改行コードを動作環境依存に設定する	newline = None
データ列を全て日付データに変換する	pd.to_datetime(ds)
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
文字列を最後の部分文字列で分けた場合の前半の文字列	s.rpartition(sub)[0]
ミディアムスレートブルーにヒストグラムの色を指定する	plt.hist(データ列, color='mediumslateblue')
スピアマンでデータフレームの相関行列を計算する	df.corr(method='spearman')
データフレームの平均を求める	df.mean()
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
データフレームの全カラムを散布図でプロット化する	sns.pairplot(df)
文字列をシンボルに変換する	sympy.Symbol(s)
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
線グラフをホワイトスモーク色として描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
option: 線の種類を実線に設定する	linestyle = 'solid'
行列のユニークな要素	np.unique(aArray)
ライトスカイブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
ライトグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
プロットのカラーパレットを暗くする	sns.set(pallete='dark')
UNIXコマンドtextを実行する	os.system(text)
オブジェクトがリストかタプルか判定する	isinstance(obj, (list)
折れ線グラフの色を赤に指定する	plt.plot(データ列x, データ列y, color='red')
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
ヒストグラムをタン色として描画する	plt.hist(データ列, color='tan')
大文字を小文字に変換する	s.lower()
集合が空か調べる	len(aSet) == 0
数値を黒色で表示する	print(f'\033[30m{value}\033[0m')
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
データフレームの選択したカラムが正規分布からどの程度、歪んでいるか見る	df[['列A', '列B']].kurt()
ダークレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
折れ線グラフの下三角印の色を設定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
データフレームの指定したカラムの文字列を欠損値に変換する	df['列A'].replace(値, np.nan)
散布図を四角マーカーで描く	plt.plot(データ列x, データ列y, marker='s')
空のマップを作る	{}
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
折れ線グラフの色をミントクリームにセットする	plt.plot(データ列x, データ列y, color='mintcream')
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
文字列をバイト配列に変換する	bytearray(s)
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
日付データをタプルに変換する	aDate.timetuple()
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
散布図をシスル色として描画する	plt.scatter(データ列x, データ列y, color='thistle')
行列の行ごとの標準偏差	np.std(aArray, axis=1)
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
ヒストグラムをカラーマップを用いて描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
ヒストグラムの色をホワイトに設定する	plt.hist(データ列, color='white')
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
追加モードとしてファイルをオープンして]fとする	f = open(filepath, mode='a')
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
棒グラフの色を深紅にする	plt.bar(データ列x, データ列y, color='crimson')
データフレームの末尾n行を抽出する	df.tail(n)
実数に実数を加える	x + y
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
実数の双曲線正弦の逆数	math.asinh(x)
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['列A', '列B'], ascending=True)
カラムを標準化する	scipy.stats.zscore(df['列A'])
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
option: 分割記号をタブにする	sep = '\t'
色付きの一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
リストをリバースする	reversed(aList)
ヒストグラムの色をアリスブルーに変更する	plt.hist(データ列, color='aliceblue')
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
データフレームをインデックスによって降順で整列する	df.sort_index(ascending=False)
スプリンググリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
文字列を走査し正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
option: 青紫にグラフの色を設定する	color = 'violet'
データシリーズの欠損値をその中央値で埋める	ds.fillna(ds.median())
データフレームの下5行を抽出する	df.tail(5)
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
データフレームのカウントプロットを描く	sns.countplot(x='列名', data=df)
正規分布によるパーセント・ポイント関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
データフレームの上10行	df.head(10)
整数nの八進表現	oct(n)
データシリーズがどの程度、正規分布から尖っているか見る	ds.skew()
option: 分類木の深さを制限する	maxdepth = n
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
標準出力の出力先がターミナルか確認する	sys.stdout.isatty()
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
整数nを八進表現に変換する	oct(n)
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
リストが空か調べる	len(aList) == 0
データフレーム中の欠損値をドロップしてみる	df.dropna()
辞書のコピー	dict(aDict)
整数nを符号付きでバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
２つの列によって破壊的にデータフレームを降順にソートする	df.sort_values(by=['列A', '列B'], ascending=False, inplace=True)
日付時刻データをタプルにする	aDatetime.timetuple()
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
整数のn乗の実数剰余を求める	pow(x, n, y)
データフレームを複数の列によってソートする	df.sort_values(by=['列A', '列B'])
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
オプションでファイルを出力にする	file = sys.open(filename, 'w')
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
データフレームの一部のカラムの値を正規表現で全部置換する	df[['列A', '列B']].replace(pattern, repl, regex=True)
青い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
棒グラフをドジャーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
データシリーズの統計量	ds.describe()
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
部分的最小二乗法で回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
predicateFuncが真となるイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
スライドにプロットを設定する	sns.set(context='talk')
散布図に下三角印を使う	plt.scatter(データ列x, データ列y, marker='v')
両端キューの中に要素が含まれてるか調べる	element in deq
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
あるカラムの標本標準偏差	df['列A'].std(ddof=1)
折れ線グラフに菱形印を加える	plt.plot(データ列x, データ列y, marker='D')
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
両端キュー中の要素の数を数える	deq.count(element)
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
ふたつの列からグループ化し最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
双方向キューの長さを制限する	collections.deque(maxlen=n)
データシリーズを百の位で丸めて整数型にする	ds.round(-2).astype(int)
データシリーズの最頻値	ds.mode()
文字列を黄色にする	f'\033[33m{value}\033[0m'
option: ライトスチールブルーを使う	color = 'lightsteelblue'
配列の列ごとの標準偏差	np.std(aArray, axis=0)
option: ８ビット整数型を使う	dtype = np.int8
データフレームの選択したカラムの値がNaNかどうか調べる	df[['列A', '列B']].isna()
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
折れ線グラフの大バツマーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
option: ダークスラテグレーを使う	color = 'darkslategray'
キーが辞書に存在しない時要素を追加する	aDict.setdefault(key, element)
標準エラーを得る	sys.stderr
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
数式の平方根を求める	sympy.sqrt(e)
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
ディムグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
ふたつの集合の差集合を計算する	aSet.difference(aSet2)
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
横棒グラフをレベッカパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
データフレームを丸めて、整数型にする	df.round().astype(int)
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
option: 色をダークオーキッドに設定する	color = 'darkorchid'
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
Pandasのバージョンを表示する	print(pd.__version__)
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
列を分割する	pd.cut(ds, aList)
xを浮動小数点数型に変換する	float(x)
option: ナバホホワイトにフォントの色を設定する	color = 'navajowhite'
リストから文字列と等しい最初の要素を取り除く	aList.remove(element)
ネイビーにヒストグラムの色をセットする	plt.hist(データ列, color='navy')
グリッド線を黄色くする	plt.grid(color='y')
イテラブルを配列に変換する	np.array(iterable)
nがn2の倍数でない	n % n2 != 0
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
option: フォントの色をフォレストグリーンに指定する	color = 'forestgreen'
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
横棒グラフをライトシアン色として描画する	plt.barh(データ列x, データ列y, color='lightcyan')
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
円グラフを時計回りに描く	plt.pie(データ列, startangle=90, counterclock=False)
行列の行列式	np.linalg.det(aArray)
データフレームの指定したカラムの欠損値を最大値に設定する	df['列A'].fillna(df['列A'].max())
文字列の開始位置以降に部分文字列があるかどうか調べる	s.find(sub, start) != -1
列と列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
珊瑚色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
乱数生成系列を初期化する	random.seed()
切片なしの単回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: スノーを使う	color = 'snow'
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
option: 左三角マーカーを描画する	marker = '<'
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
現在の分数	datetime.date.today().minute
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
散布図を大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X')
データシリーズを丸めて、整数型にする	ds.round().astype(int)
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
行列の列ごとの最小	np.min(aArray, axis=0)
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
option: グラフの線の種類を実線に設定する	linestyle = 'solid'
データフレームの指定したカラムの要約統計量を求める	df['列A'].describe()
現在のモジュール	sys.modules[__name__]
ラジアンの角度	math.degrees(x)
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
最初のを除いたデータフレームを使う	df[df.columns[1:]]
回帰木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
日付データが日付データより遅いか調べる	aDate > aDate2
option: ライトグレーを使用する	color = 'lightgray'
乱数を正規分布で求める	random.normalvariate(mu=0.5, sigma=0.2)
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
線グラフの色をタンにセットする	plt.plot(データ列x, データ列y, color='tan')
ネイビー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
option: 三角マーカーを加える	marker = '^'
option: シエナに色を設定する	color = 'sienna'
データフレームの中の欠損値の合計をカウントする	df.isna().sum()
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
文字列をゼロ埋めする	s.zfill(文字列幅)
文字列の先頭で正規表現に複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
nがn2と等しいか確認する	n == n2
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
指定した列のカテゴリで集計し、平均値を計算する	df.groupby('列A').mean()
新しい単回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression()
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
半透明の実線でイテラブルの推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
全ての印字	string.printable
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームの選択したカラムがどの程度、分散しているか見る	df[['列A', '列B']].var()
文字列の中で大文字・小文字を無視して正規表現にマッチした全文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
整数nの8進表現	oct(n)
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
データフレームの選択したカラムの中に文字列と文字列がいくつあるか数える	df[['列A', '列B']].isin([value, value2]).sum()
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
縦棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
散布図を赤いバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
二つのオブジェクトが同一参照か調べる	obj is obj2
1文字だけ標準入力から読む	sys.stdin.read(1)
データフレームの選択したカラムを千の位で丸めて、整数型にする	df[['列A', '列B']].round(-3).astype(int)
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
ハニーデュー色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列内にひとつでもアルファベットがあるか判定する	any(c.isalpha() for c in s)
文字列はタプルに含まれるか調べる	element in aTuple
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
棒グラフを黄色色を用いて描画する	plt.bar(データ列x, データ列y, color='yellow')
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
データ列と配列について散布図を描画して文字列という補足用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフの四角印の太さを変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
PNGファイルとしてグラフを保存する	plt.savefig('foo.png')
0からnの範囲	range(n)
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
青色で文字列を出力する	print(f'\033[34m{value}\033[0m')
折れ線グラフのマーカーを△印にする	plt.plot(データ列x, データ列y, marker='^')
データフレームのあるカラムのタイムゾーンを日本に設定する	df['列A'].tz_convert('Asia/Tokyo')
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
データフレームの一部のカラムの欠損値をxに設定する	df[['列A', '列B']].fillna(x)
option: オリベドラブ色を使う	color = 'olivedrab'
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X')
横方向に３つの表データを連結する	pd.concat([df, df2, df3], axis=1)
紺碧色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
タイムスタンプ型のデータシリーズをインデックスにする	df.index = pd.DatetimeIndex(ds)
二つの変数をそれぞれ定義する	x, y = i, j
文字列がタプルに含まれないかどうか	element not in aTuple
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
横棒グラフをシアン色として描画する	plt.barh(データ列x, データ列y, color='cyan')
複数のデータフレームを縦方向に結合する	pd.concat([df, df2, df3], axis=0)
データフレームをある列のカテゴリで分類して、各グループごとの件数を知る	df.groupby('列A').size()
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
nからn2を引く	n - n2
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: 改行の代わりに文字列を用いる	end = s
浮動小数点数の3乗	x ** 3
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
プラム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
浮動小数点数を浮動小数点数で除算して、切り捨てる	x // y
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
カテゴリ別で色分けしてデータフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
ヒストグラムでデータフレームのカラムを描く	plt.hist(df[column])
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
組の中の最大値	max(aTuple)
耐火レンガ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
折れ線グラフの左三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
option: グラフの色をプラムに設定する	color = 'plum'
データフレームのカラムが正規分布か調べる	scipy.stats.shapiro(df['列A'])
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレーム中の欠損値をドロップする	df.dropna(inplace=True)
データフレームの値はNaN	df.isna()
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
リストとリストの散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: ラベンダーにグラフの色を設定する	color = 'lavender'
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
原点から(実数,y)の距離	math.hypot(x, y)
パラメータが無限大に近づく際の数値の極限値を計算する	sympy.limit(e, z, oo)
option: グラフの色をチョコレートに設定する	color = 'chocolate'
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
折れ線グラフのダイアモンド印の線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
二つのデータフレームを横方向に結合する	pd.concat([df, df2], axis=1)
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
データ列のユニークな値の個数	ds.nunique()
Pythonインタプリタの実行ファイルの絶対パスを確認する	sys.executable
ペルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
オブジェクトの固有のIDを使う	id(obj)
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
棒グラフをシャルトリューズ色を使って描画する	plt.bar(データ列x, データ列y, color='chartreuse')
改行を取り除いてファイルを一行ずつ読み込む	f.readline()
十六進数字を全部使う	string.hexdigits
日付時刻データが何月か知る	aDatetime.month
実数の正弦の逆数	math.asin(x)
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
option: ミディアムブルー色を用いる	color = 'mediumblue'
無限にnからカウントアップする	itertools.count(start=n)
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
数式の因数分解を行う	sympy.factor(e)
nをn2で割った余りをnとする	n %= n2
エクセルファイルから複数のシートを指定してデータフレームとして読み込む	pd.read_excel('file.xlsx', sheet_name=[0, 1])
最大最小から行列	np.linspace(最小値, 最大値, 要素数)
カウンタ間でインターセクション演算する	aCounter & aCounter2
ラベンダー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
最後の列を除いたデータフレームを使う	df[df.columns[:-1]]
折れ線グラフの色をシアンに変更する	plt.plot(データ列x, データ列y, color='cyan')
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
タイタニック号のデータセットからデータフレームを読み込む	df = sns.load_dataset('titanic')
折れ線グラフの色をオレンジレッドに変更する	plt.plot(データ列x, データ列y, color='orangered')
データフレームの一部の列の分散	df[['列A', '列B']].var()
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
数値を黒色でプリントできる文字列にする	f'\033[30m{value}\033[0m'
コーンフラワーブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
数値を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
折れ線グラフをダークスレートブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df['列A'].isin([value, value2]).sum()
option: ダイアモンド印を使う	marker = 'D'
双方向キュー中の要素のインデックスを使う	deq.index(element)
あるカラムの標準偏差	df['列A'].std()
option: グラフのスタイルを点線に設定する	linestyle = 'dotted'
二つのカウンタの共通する値	aCounter & aCounter2
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
文字列がタプルの要素か調べる	element in aTuple
ミスティローズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
クラス分類の予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
表データをダミー変数に変換する	pd.get_dummies(df)
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgreen')
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
option: バイナリ書き込み用に指定する	mode = 'wb'
ファイルの絶対パスを使う	os.path.abspath(filepath)
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
全要素を0で初期化したベクトルを作成する	np.zeros(要素数)
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
option: ダークオーキッド色を使用する	color = 'darkorchid'
ヒストグラムをチョコレート色として描画する	plt.hist(データ列, color='chocolate')
option: グラフの色を青紫にセットする	color = 'violet'
折れ線グラフの色をクリムゾンに変更する	plt.plot(データ列x, データ列y, color='crimson')
option: フォントの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
データフレームの文字列を欠損値に変換する	df.replace(値, np.nan)
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
option: マーカーを右三角に設定する	marker = '>'
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
文字列の先頭から部分文字列を探す	s.find(sub)
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データフレームをCSVファイルにBOM付きで保存する	df.to_csv('file.csv', encoding='utf_8_sig')
両端キューをタプルにする	tuple(deq)
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
再帰の上限を上げる	sys.setrecursionlimit(1000000)
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームの指定したカラムの不偏分散	df['列A'].var(ddof=1)
データフレームのあるカラムの曜日名	df['列A'].dt.weekday_name
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データフレームの選択したカラムの空文字を欠損値に変換し、ドロップする	df[['列A', '列B']].replace('', np.nan).dropna()
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
浮動小数点数を百の位で四捨五入する	round(x, -2)
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
nullに等しい値	None
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
カラーバーを付ける	plt.colorbar()
値を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
データシリーズの分	ds.dt.minute
後の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
option: エクセルファイルシートの名前をセットする	sheet_name = ['A', 'B']
データフレームの指定した列の名前一覧の列を抽出する	df[columns]
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
文字列を最初の部分文字列で分けた場合の後半の文字列	s.partition(sub)[-1]
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
データフレームの空文字を未入力値に変換しドロップする	df.replace('', np.nan).dropna()
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
ヒストグラムの色をスレートブルーにセットする	plt.hist(データ列, color='slateblue')
データ列をヒストグラムにする	plt.hist(データ列)
散布図に黒い▲マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームをグループ化しそれぞれの個数を求める	df.groupby('列A').count()
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
ゴーストホワイト色を用いてヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
文字列の先頭からタブを消す	s.lstrip('\t')
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
kを底とする実数の対数を求める	math.log(x, k)
ファイルが存在するか調べる	os.path.exists(filepath)
データシリーズの欠損値を最小値に指定する	ds.fillna(ds.min())
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
クラス分類を確率的勾配降下で行う	model = sklearn.linear_model.SGDClassifier()
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
配列が正規分布に従うか仮説検定する	scipy.stats.shapiro(配列)
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
文字列の無限イテラブル	itertools.repeat(element)
最後の部分文字列で文字列を分けたときの前半の文字列を使う	s.rpartition(sub)[0]
ダーク・スラテグレーにヒストグラムの色をする	plt.hist(データ列, color='darkslategrey')
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
レベッカパープル色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
新しいサポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフに星マーカーを加える	plt.plot(データ列x, データ列y, marker='*')
文字列は全て数値か調べる	s.isnumeric()
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
ファイルに文字列を書く	f.write(s)
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
文字列をセパレータで区切り、文字列リストに変換する	s.split(sep)
リストの重複を取り除く	sorted(set(aList), key=aList.index)
バリーウッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
データ列の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
ミディアムターコイズ色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
既存の配列を元に全要素が0の行列	np.zeros_like(aArray)
文字列のケースを入れ替える	s.swapcase()
カウンタの項目をひとつ増やす	aCounter[element] += 1
option: グラフの色をゴールデンロッドに指定する	color = 'goldenrod'
option: サンディーブラウンにフォントの色を設定する	color = 'sandybrown'
辞書を複製する	aDict.copy()
あるカラムの値ごとの合計	df.groupby('列A').sum()
データフレームから指定した二つの列を抽出する	df[['列A', '列B']]
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
オブジェクトが集合型	isinstance(obj, set)
ヒストグラムを黒くする	plt.hist(データ列, color='k')
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
nとn2の論理和	n | n2
棒グラフをパールゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
カウンタを辞書にする	dict(aCounter)
option: グラフの色を黄色に変更する	color = 'yellow'
nがn2より大きいかどうか調べる	n > n2
折れ線グラフを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの中央値	df.median()
option: マルーン色を使う	color = 'maroon'
整数nのバイト長	(n.bit_length() + 7) // 8
ロイヤルブルー色としてヒストグラムを描画する	plt.hist(データ列, color='royalblue')
本日の曜日を求める	datetime.datetime.today().weekday()
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
パレットトルコイズにヒストグラムの色をセットする	plt.hist(データ列, color='paleturquoise')
実数の双曲線正接	math.tanh(x)
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
高頻出方からカウンタを列挙する	aCounter.most_common()
指定したカラムのNaNをxで埋める	df['列A'].fillna(x)
赤い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
勾配ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
文字列を水色で出力する	print(f'\033[36m{value}\033[0m')
スレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='slateblue')
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
リストと数列の散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: ライトゴールドロディイエロー色を用いる	color = 'lightgoldenrodyellow'
ヒストグラムの色をバイオレットに変更する	plt.hist(データ列, color='violet')
option: ダークゴールデンロッドを用いる	color = 'darkgoldenrod'
nにn2をかけた値をnに代入する	n *= n2
リストの先頭を取り除く	aList[1:]
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
折れ線グラフの色をオレンジレッドに指定する	plt.plot(データ列x, データ列y, color='orangered')
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
option: マーカーの色をティールにする	markerfacecolor = 'teal'
データフレームから型リストで指定したデータ型の列を除外する	df.select_dtypes(exclude=typeList)
ファイルを開き]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
ヒストグラムの色をオレンジに変更する	plt.hist(データ列, color='orange')
option: 黄緑色を使う	color = 'chartreuse'
ファイルから追加ストリームを開いて]fとする	f = open(filepath, mode='a')
グリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
データフレームの指定したカラムの未入力値を前の行の値で置換する	df['列A'].fillna(method='ffill')
データフレームのカラムのピアソンの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
変数名をキーとして、辞書	dict(name=element)
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
文字列リストを連結して一つの文字列にする	''.join(aStringList)
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
ヒートマップとして混同行列を確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
数式を展開する	sympy.expand(e)
ライトグリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
日付時刻データを数値にする	aDatetime.timestamp()
フローラルホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
文字列中の文字を列挙する	list(s)
カウンタのキーとカウントを列挙する	aCounter.items()
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
option: 読み込みモードを使用する	mode = 'r'
option: ダークターコイズにグラフの色を変更する	color = 'darkturquoise'
配列をダミー変数に変換する	pd.get_dummies(配列)
ベクトル間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
グレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
配列とデータ列の散布図を描き、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
日付データが金曜日	aDate.weekday() == 4
文字列を緑色にする	f'\033[32m{value}\033[0m'
ふたつの列からグループ化し、分散を求める	df.groupby(['列A', '列B'], as_index=False).var()
外れ値を除いたデータフレームのカラムの分散	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: フォントの色をシーグリーンに指定する	color = 'seagreen'
option: バイナリ書き込みモードに設定する	mode = 'wb'
n個に等量でデータフレームの中の列をビン分割する	pd.qcut(df[col], n)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
rgbの左三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
カウンタを多い順に列挙する	aCounter.most_common()
option: ダークオーキッド色を使う	color = 'darkorchid'
option: 線種を一点鎖線に変更する	linestyle = 'dashbot'
縦棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
option: フォントの色をシスルに変更する	color = 'thistle'
option: ベージュにグラフの色を設定する	color = 'beige'
データフレームの列名をリストで置き換える	df.columns = columns
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
縦棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
アルファベットの小文字を全て求める	string.ascii_lowercase
大文字・小文字を無視して正規表現で文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
散布図を左三角マーカーで描画する	plt.scatter(データ列x, データ列y, marker='<')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
リストを引数として展開してプリントする	print(*aList, sep=',')
option: セパレータをカンマにする	sep = ','
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
グラフの縦軸を対数に変更する	plt.yscale('log')
横棒グラフをライトグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
option: フォントの色をミッドナイトブルーに設定する	color = 'midnightblue'
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
データフレームをグループ化し、ある列に対し最小値を計算する	df.groupby('列A')['列B'].min()
散布図に赤い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
空の計数器	collections.Counter()
書式を辞書でフォーマットする	formatText.format_map(aDict)
第二コマンド引数	sys.argv[1]
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
耐火レンガ色としてヒストグラムを描画する	plt.hist(データ列, color='firebrick')
区間の数を設定して度数分布図を描画する	plt.hist(データ列, bins=区関数)
データフレームの指定したカラムの不偏標準偏差を求める	df['列A'].std()
実行結果を白色にする	f'\033[37m{value}\033[0m'
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
散布図をバツマーカーとして描く	plt.plot(データ列x, データ列y, marker='x')
散布図に赤い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
クリムゾン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
配列と数列について散布図を描画して、マーカーをダイアモンドに指定する	plt.plot(データ列x, データ列y, marker='D')
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
グラフの色をパステル調にする	sns.set(pallete='pastel')
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
数列のケンドールの相関係数を求める	scipy.stats.kendalltau(数列, 数列2)
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
折れ線グラフの四角印を赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
グラフの補助目盛を有効にする	plt.minorticks_on()
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
option: 大バツマーカーを描画する	marker = 'X'
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
２数の最も大きい値	max(x, y)
散布図を黒い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
折れ線グラフの色をペルーに変更する	plt.plot(データ列x, データ列y, color='peru')
データフレームの一部のカラムを100の位で丸めて、整数型にする	df[['列A', '列B']].round(-2).astype(int)
rgbのポイントマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図をディムグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dimgray')
ライム色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
マゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='magenta')
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
データシリーズの欠損値を最小値で埋める	ds.fillna(ds.min())
n個の整数列	list(range(n))
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
集合から全ての要素を取り除く	aSet.clear()
データフレームのあるカラムの日にち	df['列A'].dt.day
黄色色としてヒストグラムを描画する	plt.hist(データ列, color='yellow')
データフレームをエクセルファイルファイルで保存する	df.to_excel('file.xlsx')
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
行列の転置行列を求める	aArray.T
文字列を空白を使って分割して数列にする	map(int, s.split())
TSVファイルから文字コードを指定してデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
option: 色をライトコーラルにする	color = 'lightcoral'
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
赤い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
データフレームの列の名前をまとめて置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
数列のピアソンの相関係数を使う	scipy.stats.pearsonr(数列, 数列2)
散布図の▽マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
変数を緑色でプリントする	print(f'\033[32m{value}\033[0m')
両端キューから最初の数値を取り除く	deq.remove(element)
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
散布図をサンディーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
セットからエラーなく要素を取り除く	aSet.discard(element)
日付時刻データの日数	aDatetime.day
空白文字を全部使う	string.whitespace
グラフの色を色差別なくする	sns.set(pallete='colorblind')
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
ファイル名がJSONファイルか調べる	filename.endswith('.json')
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームの相関行列をヒートマップで可視化する	sns.heatmap(df.corr())
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
option: マーカーの色をタンにする	markerfacecolor = 'tan'
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
ヒストグラムの色をゲインズボロに指定する	plt.hist(データ列, color='gainsboro')
option: 星マーカーを描画する	marker = '*'
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
データ列の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
グラフの見栄えをよくする	import seaborn as sns
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
折れ線グラフのポイント印を黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
後の値でデータフレームの選択したカラムの欠損値を埋める	df[['列A', '列B']].fillna(method='bfill')
星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフを淡い茶色色を用いて描画する	plt.plot(データ列x, データ列y, color='tan')
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
option: マーカーの太さを変更する	markeredgewidth = 2.5
option: グラフの色をシエナに指定する	color = 'sienna'
左三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='<')
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
配列の分散	np.var(aArray)
option: マーカーの色を青にする	markerfacecolor = 'blue'
コーラルにヒストグラムの色を設定する	plt.hist(データ列, color='coral')
実数以下の最大の整数	math.floor(x)
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
折れ線グラフをパールバイオレットレッド色として描画する	plt.plot(データ列x, データ列y, color='palevioletred')
ヒストグラムの色をミディアムシアグリーンにセットする	plt.hist(データ列, color='mediumseagreen')
option: トマト色を使う	color = 'tomato'
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
文字列中に非英数字があるかどうか調べる	any(not c.isalnum() for c in s)
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
現在の時間数	datetime.date.today().hour
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
ライトスカイブルーにヒストグラムの色をセットする	plt.hist(データ列, color='lightskyblue')
散布図の△印の太さを変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
nが負の整数かどうか	n < 0
option: 大きい順にする	ascending = False
双方向キューの末尾に要素を追加する	deq.append(element)
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
ダークシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
データフレームのNaNを前の行の値に指定する	df.fillna(method='ffill')
ピアソンの相関係数を算出する	scipy.stats.pearsonr(数列, 数列2)
横棒グラフの色をやわらかい青にする	plt.barh(データ列x, データ列y, color='cornflowerblue')
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
全要素を０で初期化した８ビット整数型の行列を作成する	np.zeros(行数, 列数, dtype=np.int8)
部分集合か調べる	aSet.issubset(aSet2)
改行なしに二つの文字列をプリントする	print(value, value2, end='')
リストとリストの散布図を描画して、ポイントマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
複数のデータフレームを縦に一つにまとめる	pd.concat([df, df2, df3], axis=1)
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
リストのn番目からn2番目までの部分	aList[n:n2]
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
日付時刻データは何曜日か知る	aDatetime.weekday()
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
シーケンスを多重集合に変換する	collections.Counter(iterable)
折れ線グラフの色を黄色に指定する	plt.plot(データ列x, データ列y, color='yellow')
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
表データのあるカラムの秒を求める	df['列A'].dt.second
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
カテゴリデータを連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ヒストグラムをオーキッド色として描画する	plt.hist(データ列, color='orchid')
フローラルホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
疑似乱数を正規分布で得る	random.normalvariate(mu=0.5, sigma=0.2)
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
数値を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
option: 色を黄緑に設定する	color = 'chartreuse'
スタックの長さを制限する	collections.deque(maxlen=n)
ある列の文字列が部分文字列で終わる行を選択する	df[df['列A'].str.endswith(部分文字列)]
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
ライトスレイグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
オブジェクトが数値か調べる	isinstance(obj, (int,float))
文字列の右端からタブを除く	s.rstrip('\t')
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データ列を分割数nとしてビニングして、namesのラベルをつける	pd.cut(ds, n, labels=names)
縦軸の目盛を非表示にする	plt.yticks([])
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
変数をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
ミディアムバイオレットレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
option: ミッドナイトブルー色を使用する	color = 'midnightblue'
青い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームの選択した列の文字列をNaNに変換する	df[['列A', '列B']].replace(値, np.nan)
否定する	not n
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
nを切り捨てながら半分にする	n //= 2
リストとリストについて散布図を描画して、マーカーを星に指定する	plt.plot(データ列x, データ列y, marker='*')
データ列の推移を赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
今日の年	datetime.datetime.today().year
イテラブルからサンプリングする	random.sample(iterable)
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
1からnまでの整数列	list(range(1, n+1))
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
組のn番目の	aTuple[n]
データフレームから指定した三つの列を取り出す	df[['列A', '列B', '列C']]
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
赤い点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
キーが辞書に存在するか調べる	key not in aDict
英字の小文字を全部使う	string.ascii_lowercase
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
要素が集合のメンバーか調べる	element in aSet
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['列A', '列B'], na_position='first')
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
折れ線グラフの色を濃いシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
カウンタの和集合	aCounter | aCounter2
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
データフレームの指定したカラムの未入力値を最大値に指定する	df['列A'].fillna(df['列A'].max())
配列の相関係数を求める	scipy.stats.pearsonr(配列, 配列2)
ファイルパスの拡張子	os.path.splitext(filepath)[1].lstrip('.')
数を実数で割って切り捨てる	x // y
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
option: クリムゾンを使う	color = 'crimson'
データシリーズの中にいくつ欠損値が存在するか数える	ds.isna().sum()
option: シエナ色を使う	color = 'sienna'
文字列を最後の部分文字列で分割した時の後半の文字列	s.rpartition(sub)[-1]
データをL1ノルムとして正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
ヒストグラムの色をシアンに指定する	plt.hist(データ列, color='cyan')
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
現在をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
二つの文字列は等しいかどうか調べる	s == s2
データフレームをあるカラムで小さい順にソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
折れ線グラフの上三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
nがn2で割り切れないか調べる	n % n2 != 0
Pandasのバージョンを見る	print(pd.__version__)
データフレームのある列の値がxより小さい行を取り出す	df[df['列A'] < x]
バイナリできるようにファイルをオープンする]	open(filepath, mode='rb')
option: 全体を計算対象にする	axis = None
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
折れ線グラフの右三角マーカーの太さを変える	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
UTF8を用いて追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding='utf-8')
データフレームから重複ありでランダムに100行をサンプリングする	df.sample(100, replace=True)
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
無限にカウントアップする	itertools.count()
プラム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
回帰木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
実行結果を黄色で表示する	print(f'\033[33m{value}\033[0m')
ふたつの集合の積集合	aSet.intersection(aSet2)
グラフにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
ブラック色で線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
データフレームの選択した列の中央値を求める	df[['列A', '列B']].median()
データフレームの指定したカラムを丸めて、整数型にする	df['列A'].round().astype(int)
ヒストグラムを青色として描画する	plt.hist(データ列, color='blue')
データ列を用いる	import pandas as pd
集合をリストにする	list(aSet)
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
データシリーズの未入力値を最大値で埋める	ds.fillna(ds.max())
ファイルをフォルダ名とファイル名に分割する	os.path.split(filepath)
データフレームの指定したカラムの中にいくつ欠損値があるか数える	df['列A'].isna().sum()
最大長nの両端キューをリストから作る	collections.deque(iterable, maxlen=n)
列を配列に変換する	np.array(iterable)
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
最大長を指定して、両端キュー	collections.deque(maxlen=n)
option: ライトコーラル色を用いる	color = 'lightcoral'
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
日付データが日付データより前	aDate < aDate2
文字列中に部分文字列が含まれるか調べる	sub in s
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
データフレームのある列をインデックスに設定する	df.set_index('列A')
要素がマップの値に含まれていない	element not in aDict.values()
文字列がタプルに含まれるか調べる	element in aTuple
折れ線グラフをアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='aquamarine')
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
黒い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフを半透明の一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
線グラフの色をブランチドアーモンドに指定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
実数の逆正弦	math.asin(x)
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
散布図をロイヤルブルー色として描画する	plt.scatter(データ列x, データ列y, color='royalblue')
散布図を黒いダイアモンドマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
リストと数列についての散布図に丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o')
散布図をアイボリー色として描画する	plt.scatter(データ列x, データ列y, color='ivory')
option: ミディアムスレートブルーを使う	color = 'mediumslateblue'
横棒グラフをパウダーブルー色として描画する	plt.barh(データ列x, データ列y, color='powderblue')
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列の右側からタブを取り除く	s.rstrip('\t')
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
タプルをリバースする	reversed(aTuple)
リストとリストについて散布図を描画して、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
赤いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフの色を紺碧にセットする	plt.plot(データ列x, データ列y, color='azure')
最初のを除いたデータフレーム	df[df.columns[1:]]
本日の日付時刻	datetime.datetime.now()
リストの重複を除く	sorted(set(aList), key=aList.index)
淡いピンク色にヒストグラムの色を設定する	plt.hist(データ列, color='lightpink')
データフレームを表示するとき列数を減らす	pd.set_option('display.max_columns', n)
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
カテゴリデータ列を連番にする	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
データ列を箱ひげ図で作図する	plt.boxplot(データ列)
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
データシリーズを千の位で丸める	ds.round(-3)
option: グラフのラインスタイルを破線に設定する	linestyle = 'dashed'
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
配列にはいくつ要素が存在するか調べる	aArray.size
データフレームの選択したカラムの標準偏差	df[['列A', '列B']].std()
n番目の列を外したデータフレーム	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
データシリーズが何曜日か見る	ds.dt.weekday_name
インデックスによってデータフレームをソートする	df.sort_index()
データフレームをある列によって降順にソートする	df.sort_values(by='列A', ascending=False)
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
耐火レンガ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
データフレームの選択したカラムを100の位で丸める	df[['列A', '列B']].round(-2)
整数nの十六進表現	hex(n)
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
option: 小麦色色を使う	color = 'wheat'
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
変数が0に近づくとき数式の極限値を求める	sympy.limit(e, z, 0)
リストのn番目からn2番目までの部分を取り出す	aList[n:n2]
データフレームの欠損値をxに設定する	df.fillna(x)
option: ボックスチャートを水平方向にする	vert = False
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ベクトルの次元数	aArray.ndim
折れ線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
グラフの背景色を暗くする	sns.set(style='darkgrid')
データフレームから列を一つ選択する	df[['列A']]
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
辞書のキー一覧	list(aDict)
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
リストを引数として展開して表示する	print(*aList)
option: 読み込まない列番号をnamesで指定する	skiprows = names
データフレームの一部のカラムの欠損値を直後の値で埋める	df[['列A', '列B']].fillna(method='bfill')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
ファイルパスをバイナリできるように開く]	open(filepath, mode='rb')
コマンドライン引数	sys.argv
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
ナバホホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
標準入力から入力される	input()
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
2つの文字列をスラッシュで区切って表示する	print(value, value2, sep='/')
ライトコーラル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームの選択した列を四捨五入して、整数型にする	df[['列A', '列B']].round().astype(int)
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
リストをアンダーライン付きでプリントする	print(f'\033[4m{value}\033[0m')
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
option: ライトグリーン色を使う	color = 'lightseagreen'
カウンタを多い順にリストとして得る	aCounter.most_common()
両端キューの最大長	deq.maxlen
折れ線グラフをミディアムパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
文字列の先頭で大文字・小文字を無視してパターンにマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
グリーンイエロー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
数列を円グラフにする	plt.pie(データ列, startangle=90)
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
x軸だけグリッド線	plt.grid(axis='x')
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
データフレームの信頼区間を描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
画面にプロットの用途を設定する	sns.set(context='notebook')
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
文字列がリストの要素でない	element not in aList
デピンクにヒストグラムの色を設定する	plt.hist(データ列, color='deeppink')
黒い四角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
散布図のバツマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
option: ミディアムスプリンググリーンに色を変更する	color = 'mediumspringgreen'
nをn2分の一にする	n /= n2
データシリーズの値は未入力値かどうか調べる	ds.isna()
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
折れ線グラフの菱形マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
スラグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
日付時刻データのタイムゾーン	aDatetime.timetz()
option: パープルを使う	color = 'purple'
year年のタイムスタンプ	datetime.datetime(year=year, month=1, day=1)
折れ線グラフの印をバツ印にする	plt.plot(データ列x, データ列y, marker='x')
プロットの描画で暗く色を使う	sns.set(pallete='dark')
数値のパラメータに数式を代入する	e.subs(z, e2)
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ファイルパスからベースファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
散布図に黒い印を描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
データフレームの欠損値を最小値に減らす	df.fillna(df.min())
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
option: ゴールドにグラフの色を変更する	color = 'gold'
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
データフレームの指定した列の欠損値を中央値で埋める	df['列A'].fillna(df['列A'].median())
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
有理数を使う	import fractions
線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
配列の列ごとの平均値を求める	np.mean(aArray, axis=0)
ミディアムアクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
分類結果の真陽性率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategrey'
オプションで、ファイルを使う	file = sys.open(filename, 'w')
数値の積分を求める	sympy.integrate(e)
プロットの用途を画面に設定する	sns.set(context='notebook')
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
乱数シードをnで固定する	random.seed(n)
プロットを画面に変更する	sns.set(context='notebook')
データフレームのあるカラムをインデックスにする	df.set_index('列A', inplace=True)
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
要素は集合のメンバー	element in aSet
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ダークグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkgray')
折れ線グラフの色をダークスレートブルーに指定する	plt.plot(データ列x, データ列y, color='darkslateblue')
指定した列のみデータフレームの重複を調べる	df.duplicated(subset='列A')
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
option: 切片を算出しない	fit_intercept = False
ケンドール相関係数でデータフレームの選択した列の相関行列を求める	df[['列A', '列B']].corr(method='kendall')
nにn2をかける	n * n2
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
2変数の最大値	max(x, y)
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
ライトグレー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int8)
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
散布図に大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
nが無限に続くリスト	itertools.repeat(n)
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
数式の展開を行う	sympy.expand(e)
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
珊瑚色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
ミディアムスプリンググリーン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
データフレームの選択したカラムの欠損値を直後の値に設定する	df[['列A', '列B']].fillna(method='bfill')
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
カウンタをマッピングとして更新する	aCounter.update(aDict)
イテラブルをカウンタに変換する	collections.Counter(iterable)
インプレースに両端キューの要素を逆に並べ直す	deq.reverse()
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
データフレームの相関行列	df.corr()
option: ライトサーモン色を使う	color = 'lightsalmon'
項目名がタプル上で未定義	key not in aDict
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
ローングリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lawngreen')
データフレームをカテゴリにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
配列とリストについての散布図にダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D')
グリーン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
3数の最も大きい値を求める	max(x, y, z)
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
棒グラフをドジャーブルー色として描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
リストの移り変わりを半透明の点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
ある列で昇順にデータフレームをソートして、更新する	df.sort_values(by='列A', ascending=True, inplace=True)
データ列の折れ線グラフを四角印で描画する	plt.plot(データ列x, データ列y, marker='s')
option: ミディアムバイオレットレッドを使う	color = 'mediumvioletred'
データフレームの選択したカラムの欠損値を平均値に設定する	df[['列A', '列B']].fillna(df[['列A', '列B']].mean())
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
プロットからグリッド線を消す	plt.grid(False)
オブジェクトのメモリビュー	memoryview(obj)
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
データフレームの指定したカラムの中にいくつ欠損値があるか求める	df['列A'].isna().sum()
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
データフレームのカラムの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
ファイルをSJISを用いて書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
データフレームのあるカラムが何分か見る	df['列A'].dt.minute
線グラフを貝殻色を用いて描画する	plt.plot(データ列x, データ列y, color='seashell')
日付時刻データは何月か知る	aDatetime.month
option: ホワイトスモークを使う	color = 'whitesmoke'
カウンタの項目をリストとして得る	aCounter.keys()
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
ふたつの列からグループ化し、最小値を求める	df.groupby(['列A', '列B'], as_index=False).min()
データフレームの選択したカラムの文字列を欠損値に変換する	df[['列A', '列B']].replace(値, np.nan)
表データを関数の値によってグループ化し基本統計量を求める	df.groupby(関数).describe()
モカシン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
二つのデータフレームを縦に連結する	pd.concat([df, df2], axis=0)
日付データが土曜日か調べる	aDate.weekday() == 5
ヒストグラムのラインスタイルを点線に設定する	plt.hist(データ列, linestyle='dotted')
データフレームの指定したカラムを十の位で丸めて、整数型にする	df['列A'].round(-1).astype(int)
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
キーが辞書上で定義済みか調べる	key in aDict
option: ▽マーカーを使う	marker = 'v'
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
折れ線グラフにポイントマーカーを加える	plt.plot(データ列x, データ列y, marker='.')
option: BOM付きを使用する	encoding = 'utf_8_sig'
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
option: グラフの色をディムグレーに設定する	color = 'dimgray'
行列のデータ型	aArray.dtype()
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
シルバー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
xを整数に変換する	int(x)
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
1からNまでの配列を作る	np.arange(1, N+1)
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
数列のピアソンの相関係数を求める	scipy.stats.pearsonr(数列, 数列2)
nが偶数かどうか調べる	n % 2 == 0
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
グリッド線を青くする	plt.grid(color='b')
データフレームを四捨五入して、整数型にする	df.round().astype(int)
option: コーラルにグラフの色を設定する	color = 'coral'
綺麗なグラフを使う準備をする	import seaborn as sns
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
データフレームのカラムの標準誤差を計算する	scipy.stats.sem(df['列A'])
オブジェクトのクラス	type(obj)
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
タイムスタンプデータの曜日を整数で使う	aDatetime.weekday()
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
列を累積したイテラブル	itertools.accumulate(iterable, operator.mul)
作画で使うフォントを指定する	sns.set(font=フォント名)
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
option: 赤色を用いる	color = 'red'
リストをひとつ置きに取り出す	aList[::2]
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
option: 三二ビット整数型を使う	dtype = np.int16
データフレームのカラムの最頻値を求める	mode, count = scipy.stats.mode(df['列A'])
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
ヒストグラムの色をライトグリーンにセットする	plt.hist(データ列, color='lightseagreen')
散布図をアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
カウンタの正の数のみ残す	+aCounter
データフレームの選択したカラムを百の位で丸める	df[['列A', '列B']].round(-2)
option: マゼンタにグラフの色をする	color = 'magenta'
ふたつの列からグループ化し、最小値を計算する	df.groupby(['列A', '列B'], as_index=False).min()
option: NaNは例外を投げる	nan_policy = 'raise'
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
横棒グラフをティール色で描画する	plt.barh(データ列x, データ列y, color='teal')
リストとリストの散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームをある列によってソートしてNaNを先頭にする	df.sort_values(by='列A', na_position='first')
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームを二つの列によってまとめたグループ	df.groupby(['列A', '列B'])
線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
行列の行を選択する	aArray[行番号]
データフレームの値が欠損値か調べる	df.isna()
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
マッピングを浅く複製する	dict(aDict)
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
ファイルパスとfilenameを結合する	os.path.join(filepath, filename)
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
指定した列リストだけ、データフレームの重複を調べる	df.duplicated(subset=['列A', '列B'])
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
赤い丸マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
option: ライトイエロー色を使う	color = 'lightyellow'
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
ある列の値がxに等しくかつ別の列の値がyに等しい行を抽出する	df[(df['列A'] == x) & (df['列B'] == y)]
データフレームの一部のカラムの欠損値をxで補う	df[['列A', '列B']].fillna(x)
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
棒グラフをスチールブルー色を使って描画する	plt.bar(データ列x, データ列y, color='steelblue')
半透明の破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームをある列によってグループ化して、グループ名を列挙する	[name for name, _ in df.groupby('列A')]
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
実数を実数で割った余り	x % y
option: ダークターコイズ色を使う	color = 'darkturquoise'
ファイルを読み込みできるように開く]	open(filepath, mode='r')
線グラフをサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='salmon')
データフレームを関数のカテゴリで集約する	df.groupby(関数)
外れ値を除いたデータフレームのカラムの算術平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
リストとデータ列についての散布図にrgbの大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
アルファベットの文字列	string.ascii_letters
リストと配列について散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
散布図を青色を用いて描画する	plt.scatter(データ列x, データ列y, color='blue')
アルファベットから一文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
データフレームの選択した列を百の位で四捨五入して、整数型にする	df[['列A', '列B']].round(-2).astype(int)
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
オールドレース色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
データフレームの指定した列の空文字をドロップする	df['列A'].replace('', np.nan).dropna()
文字列の両端から空白を取り除く	s.strip()
マゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='magenta')
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
データシリーズの欠損値を最大値で補完する	ds.fillna(ds.max())
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
データフレームの選択したカラムを十の位で丸めて、整数型にする	df[['列A', '列B']].round(-1).astype(int)
文字列を末尾から空白で分割する	s.rsplit()
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
日付データの曜日を整数で使う	aDate.weekday()
表データのあるカラムの年	df['列A'].dt.year
縦棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
option: コーンフラワーブルー色を用いる	color = 'cornflowerblue'
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
option: ダイアモンドマーカーを描画する	marker = 'D'
ダークオリーブグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
変数がマイナス無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, -oo)
タプルを引数として展開して表示する	print(*aTuple, sep=',')
nの各桁の総和	sum(map(int, str(n)))
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
散布図の大バツマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフのマーカーをバツ印にする	plt.plot(データ列x, データ列y, marker='x')
数式の変数を数式で置き換える	e.subs(z, e2)
データフレームのある列を配列に変換する	df['列A'].values
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
nをn2だけ小さくする	n -= n2
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
配列の各要素に加算する	aArray + aArray2
日付データの月数	aDate.month
option: カーキ色を使う	color = 'khaki'
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
データフレームのn行目をインプレイスでドロップする	df.drop(n, axis=0, inplace=True)
データフレームの中にあるの個数を数える	df.isin([value]).sum()
x座標の表示範囲を変更する	plt.xlim(最小値, 最大値)
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
空文字	''
データシリーズの欠損値を最小値で補う	ds.fillna(ds.min())
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
部分文字列を範囲を指定して探す	s.find(sub, start, end)
データフレームの指定したカラムのモード	df['列A'].mode()
ダークシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
赤いダイアモンドマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
リストの要素を昇順にソートする	sorted(aList, reverse=True)
縦棒グラフを青紫色として描画する	plt.bar(データ列x, データ列y, color='violet')
year年day月の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
option: ラベンダー色を使用する	color = 'lavender'
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
要素がセットに含まれないかテストする	element not in aSet
データシリーズのどの値が頻出か調べる	ds.mode()
nを切り捨てながらn2分の一にする	n //= n2
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
本日を文字列を用いてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
列を全て日付データに変換する	pd.to_datetime(df['列A'])
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
折れ線グラフをターコイズ色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
アンサンブル学習を用いてクラス分類を行う	sklearn.ensemble.VotingClassifier()
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
縦棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
レモンシフォン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
ホワイトスモーク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
ミスティローズ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
option: フォントの色をオリーブに設定する	color = 'olive'
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
パラメータについて数式をn階微分する	sympy.diff(e, z, n)
リストとデータ列について散布図を描画して、マーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
符号なし８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
列名一覧をデータ型でフィルタする	df.select_dtypes(型).columns
縦棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
チョコレート色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
option: グラフの色をマゼンタに設定する	color = 'magenta'
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
データフレームの選択したカラムの第一四分位数	df[['列A', '列B']].quantile(0.25)
折れ線グラフを濃い青色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
グラフからグリッド線を消す	plt.grid(False)
列を文字列に変換して連結する	''.join(map(str, iterable))
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
option: グラフの色をライトグレーに設定する	color = 'lightgray'
日付データを文字列でフォーマットして文字列にする	"aDate.strftime(""%d/%m/%y"")"
option: ペールグリーン色を用いる	color = 'palegreen'
文字コードに対応する文字	chr(unicode)
ラベンダーブラッシュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
タプルが全て真	all(aTuple)
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
option: 黄色色を使う	color = 'yellow'
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
データを最大値として正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
option: マーカーを左三角に変更する	marker = '<'
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
ライムにヒストグラムの色を指定する	plt.hist(データ列, color='lime')
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
日付データが日付データより前か調べる	aDate < aDate2
両端キューをデキューする	deq.popleft()
円周率を使う	math.pi
データフレームの選択したカラムのNaNを直前の値で埋める	df[['列A', '列B']].fillna(method='ffill')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
データフレームの列の文字列長を列として見る	df[col].str.len()
自分自身をモジュールとしてを得る	sys.modules[__name__]
折れ線グラフをダークオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkorchid')
CSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv('file.csv', index_col=n)
option: オリーブ色を用いる	color = 'olive'
データフレームの選択した列を小数点以下n桁で丸める	df[['列A', '列B']].round(n)
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
イテラブルとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
リストの要素をソートする	sorted(aList)
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
文字列は組に含まれないか確認する	element not in aTuple
ブルーバイオレット色として散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
文字列を太字にする	f'\033[1m{value}\033[0m'
TSVファイルから文字エンコーディングを指定してデータフレームを読み込む	pd.read_csv('file.tsv', sep='\t', encoding=文字エンコーディング)
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: フォントの色をダークレッドに設定する	color = 'darkred'
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
データフレームの選択したカラムの不偏分散	df[['列A', '列B']].var(ddof=1)
配列の要素数	aArray.size
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
二変数の最小値	min(x, y)
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
実数で浮動小数点数を整数除算する	x // y
データフレームの指定したカラムの欠損値を50パーセンタイルに設定する	df['列A'].fillna(df['列A'].median())
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
タプルの先頭の値	aTuple[0]
データフレームの先頭100行	df.head(100)
option: 色をハニーデューに設定する	color = 'honeydew'
データフレームの選択したカラムの中のNaNの合計を数える	df[['列A', '列B']].isna().sum()
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
ファイルパスを開いて]、追加ストリームを使う	open(filepath, mode='a')
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
ヒストグラムの色をナバホホワイトに変更する	plt.hist(データ列, color='navajowhite')
列の一意な値の個数を見る	ds.nunique()
配列の合計	np.sum(aArray)
棒グラフをマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='magenta')
option: 欠損値は無視する	dropna = True
方程式として数式を解く	sympy.solve(e)
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
範囲を指定して乱数を生成する	random.randint(最小値, 最大値)
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
データフレームの下位25％	df.quantile(0.75)
回帰分析をアンサンブル学習を使ってする	sklearn.ensemble.VotingRegressor()
数列とリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
折れ線グラフを用いてデータ列を作図する	plt.plot(データ列x, データ列y)
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
赤い四角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
3つの変数を順にプリントする	print(value, value2, value3)
データシリーズの欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
データシリーズの欠損値を直後の値に指定する	ds.fillna(method='bfill')
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
データシリーズの秒を見る	ds.dt.second
データフレームの累積分布を描く	sns.ecdfplot(x='列名', data=df)
双方向キューの要素をインプレースに逆順にする	deq.reverse()
配列を出現回数して、カウンタを更新する	aCounter.update(iterable)
線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
現在が何秒か知る	datetime.date.today().second
nの二進表現	bin(n)
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
折れ線グラフの下三角印を青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
y座標だけグリッド線	plt.grid(axis='y')
ダークスラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
タプルからキーの値をエラーなく参照する	aDict.get(key, None)
辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
小数点数以下の最大の整数を計算する	math.floor(x)
データ列の各データが何回出現するか見る	ds.value_counts()
数値の因数分解を行う	sympy.factor(e)
プロットを淡くする	sns.set(pallete='muted')
データフレームの指定したカラムのNaNを最小値に設定する	df['列A'].fillna(df['列A'].min())
データフレームをグループ化し、それぞれの標準偏差を求める	df.groupby('列A').std()
変数をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
イテラブルから複数個ランダムに選ぶ	random.choices(iterable, k=n)
折れ線グラフに青い上三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
リストとリストの散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
有理数をインポートする	import fractions
空のキューを用意する	collections.deque()
タプルをミュータブルにする	list(aTuple)
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
データフレームの選択したカラムを千の位で丸める	df[['列A', '列B']].round(-3)
青い破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
オブジェクトのオブジェクト識別子	id(obj)
ふたつの列からグループ化し、個数を計算する	df.groupby(['列A', '列B'], as_index=False).count()
整数nを二進数表現に変換する	bin(n)
nわるn2	n / n2
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
文字列を走査し正規表現にASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
縦棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
データフレームの全カラムの散らばりを可視化する	sns.pairplot(df)
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
現在は何時か知る	datetime.date.today().hour
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
二数の最小値	min(x, y)
option: スプリンググリーン色を使う	color = 'springgreen'
シエナ色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
空のリスト	[]
データ列をインポートする	import pandas as pd
文字列中に部分文字列がいくつかあるか調べる	s.count(sub)
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
グラフの背景色を白くする	sns.set(style='whitegrid')
実数の複素数	complex(x)
星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*')
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
グリッド線を赤くする	plt.grid(color='r')
縦棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
ミスティローズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
縦棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
タプルのn番目以降の部分を取り出す	aTuple[n:]
線グラフの色をライトスカイブルーに変更する	plt.plot(データ列x, データ列y, color='lightskyblue')
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
縦方向に複数のデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
タイムスタンプデータと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
ヒストグラムの色をバイオレットに設定する	plt.hist(データ列, color='violet')
表データをある列によって整列してNaNを先頭に来るようにする	df.sort_values(by='列A', na_position='first')
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
文字列の開始位置からと終了位置番目までの範囲に部分文字列が含まれないかテストする	s.find(sub, start, end) == -1
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
option: マルーン色を用いる	color = 'maroon'
オブジェクトは文字列型のインスタンス	isinstance(obj, str)
データシリーズの欠損値を直後の値で埋める	ds.fillna(method='bfill')
上位集合か調べる	aSet.issuperset(aSet2)
option: ディムグレー色を使う	color = 'dimgray'
データフレームの最初5行	df.head(5)
列からn個、ランダムに選ぶ	random.choices(iterable, k=n)
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ロバスト推定で回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
ヒストグラムの色を紺碧に指定する	plt.hist(データ列, color='azure')
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
散布図の丸印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
データフレームの指定したカラムの欠損値を最大値で埋める	df['列A'].fillna(df['列A'].max())
グラフの色を暗くする	sns.set(pallete='dark')
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
データ列間の平均絶対誤差を計算する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
SVDを行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
アイボリー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
折れ線グラフの色をダークレッドにセットする	plt.plot(データ列x, データ列y, color='darkred')
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
ダークグレー色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
実数が負の数か調べる	x < 0
option: イエローグリーン色を使う	color = 'yellowgreen'
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームの指定した列の要約統計量を算出する	df['列A'].describe()
option: フォントの色をライトスカイブルーにする	color = 'lightskyblue'
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
文字列の開始位置からと終了位置までの間に部分文字列がないかどうか確認する	s.find(sub, start, end) == -1
ミディアムブルー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
リストの末尾のn要素を取り除く	aList[:-n]
リストと数列についての散布図にrgbの大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ライトイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
ひとつでも非英字が文字列中に含まれるか調べる	any(not c.isalpha() for c in s)
カウンタ間でユニオン演算する	aCounter | aCounter2
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
やわらかい青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
NULLに等しい値	None
両端キューをイテラブルから作る	collections.deque(iterable)
データフレームの選択したカラムの欠損値をxで埋める	df[['列A', '列B']].fillna(x)
データフレームのカラムのn次モーメント	scipy.stats.moment(df['列A'], moment=n)
マップをコピーする	dict(aDict)
ヒストグラムをミディアムスレートブルー色を使って描画する	plt.hist(データ列, color='mediumslateblue')
オプションで、出力先を標準出力に指定する	file = sys.stdout
折れ線グラフの色をライトグレーにセットする	plt.plot(データ列x, データ列y, color='lightgrey')
モジュールを検索するパスにを追加する	sys.path.append(dir)
n割るn2を切り上げる	(n + n2 - 1) // n2
自然対数の底	math.e
実数を十六進文字列に変換する	x.hex()
option: パパイヤウィップを用いる	color = 'papayawhip'
珊瑚色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームのあるカラムの曜日数	df['列A'].dt.dayofweek
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
最初のコマンド引数	sys.argv[1]
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
等間隔で配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ファイルから1文字、読み込む	f.read(1)
データフレームのカラムのトリム平均を求める	scipy.stats.tmean(df['列A'], limits=(下限, 上限), inclusive=(True, True))
折れ線グラフの右三角印の線幅を指定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
データフレームの選択したカラムの相関行列をピアソンで求める	df[['列A', '列B']].corr(method='pearson')
データフレームの選択したカラムの25パーセンタイルを計算する	df[['列A', '列B']].quantile(0.25)
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
アイボリー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
ライトグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
タイムスタンプデータが月曜日か調べる	aDatetime.weekday() == 0
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
グラフをPNGファイルとして保存する	plt.savefig('foo.png')
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
option: グラフの色をバイオレットに指定する	color = 'violet'
データフレームのカラムをにバイオリン図を用いてプロット化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
データ列と配列についての散布図にrgbの三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: 右三角マーカーを描画する	marker = '>'
上位集合もしくは等しいか調べる	aSet > aSet2
回帰分析をランダムフォレストで行う	model = sklearn.ensemble.RandomForestRegressor()
option: 左三角マーカーを使う	marker = '<'
nを十六進文字列にする	hex(n)[2:]
データシリーズにおいてどの値が頻出か見る	ds.mode()
nをn2で割る	n / n2
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
本日が何年か知る	datetime.datetime.today().year
ロージーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
ヒストグラムをローングリーン色を用いて描画する	plt.hist(データ列, color='lawngreen')
nがn2で割り切れない	n % n2 != 0
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
option: 色を紺碧に設定する	color = 'azure'
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
option: ライトグレー色を使う	color = 'lightgray'
データフレームの中にある日付データの数を数える	df.isin([value]).sum()
データフレームのシェイプ	df.shape
ダークシアグリーン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
option: データ型としてブール型を使う	dtype = np.int32
option: グラフの色を紺に設定する	color = 'darkblue'
縦棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
円グラフの特定の要素を切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
アクアマリン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データシリーズの中にいくつ欠損値が含まれるか数える	ds.isna().sum()
本日の日数を使う	datetime.datetime.today().day
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: 破壊的に操作する	inplace = True
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
filepathにディレクトリを変更する	os.chdir(os.dirname(filepath))
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
ホットピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
option: ポイント印を使用する	marker = '.'
縦棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
データフレームの指定したカラムの値をValueMapでまとめて置き換える	df['列A'].replace(ValueMap)
カテゴリでグループ化して、データフレームを線形回帰付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
データフレームの欠損値をモードに指定する	df.fillna(df.mode().iloc[0])
データシリーズが何秒か見る	ds.dt.second
データフレームを関数によって集約してグループ名を列挙する	[name for name, _ in df.groupby(関数)]
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
タイタニックのデータセットからデータフレームを読み込む	df = sns.load_dataset('titanic')
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
option: 決定木の深さを制限する	maxdepth = n
折れ線グラフの色をオリベドラブにセットする	plt.plot(データ列x, データ列y, color='olivedrab')
ミディアムターコイズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
配列とリストについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ファイルからストリームを読み込み、fileとする	file = open(filepath)
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
データフレームのインデックスがnの行を抽出する	df.loc[n]
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
データフレームを二つの列の値によってグループ化する	df.groupby(['列A', '列B'])
リストの値を取り除く	aList.clear()
切り下げて整数に変換する	math.floor(x)
型が名前付きタプル	issubclass(C, tuple)
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
ヒストグラムの色を茶色にする	plt.hist(データ列, color='brown')
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
データフレームのあるカラムのタイムゾーンを設定する	df['列A'].tz_convert('Asia/Tokyo')
option: ミントクリーム色を使う	color = 'mintcream'
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
数式の簡略化を行う	sympy.sympify(e)
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
シスル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
option: バッファリングを無効にする	buffering = 0
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
データ列を使う	import pandas as pd
辞書順で文字列が文字列より後かどうか調べる	s > s2
データフレームのグループ化した散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
ライトイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
オレンジ色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
ミディアムスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
option: マーカーの色をブラックにする	markerfacecolor = 'black'
数値を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
データフレームのあるカラムが何曜日か調べる	df['列A'].dt.weekday_name
青色として線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
散布図に四角印を加える	plt.scatter(データ列x, データ列y, marker='s')
カウンタの最頻出な項目	aCounter.most_common()[0]
青い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
黄緑色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
リストと数列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームの最頻値	df.mode()
ある列の文字列に部分文字列が含まれる行を選択する	df[df['列A'].str.contains(部分文字列)]
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
データシリーズの曜日の名前	ds.dt.weekday_name
nがn2か確認する	n == n2
配列とリストについて散布図を描画して下三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
アルファベットの大文字を全部使う	string.ascii_uppercase
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
日付データは何日か知る	aDate.day
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgray')
折れ線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
データシリーズの曜日が何日目か見る	ds.dt.dayofweek
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
カウンタから最も頻出の項目の件数	aCounter.most_common()[1]
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
ある列のカテゴリごとの合計	df.groupby('列A').sum()
双方向キューが空でないか調べる	len(deq) != 0
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
データシリーズのタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
データフレームのあるカラムの日	df['列A'].dt.day
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
辞書からキーの値をエラーなく得る	aDict.get(key, None)
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
フォーマットでカラムを日付データに変換する	pd.to_datetime(df['列A'], format='%Y-%m-%d')
ふたつの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
シーケンスとイテラブルの直積	itertools.product(iterable, iterable2)
実数の逆余弦を求める	math.acos(x)
正規表現を使う	import re
縦棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
2次元リストの転置行列	[list(x) for x in list(zip(*aList))]
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
オブジェクトが関数かどうか確認する	callable(obj)
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
データフレームを千の位で四捨五入して整数型にする	df.round(-3).astype(int)
リストのオブジェクトの位置をエラーなく使う	aList.index(element) if element in aList else -1
データフレームをNaNを含めてある列でグループ化する	df.groupby('列A', dropna=False)
黄緑色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
縦棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
指定した列の尖度を算出する	df['列A'].skew()
リストと配列の散布図に黒い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームの指定したカラムの欠損値を最頻値で埋める	df['列A'].fillna(df['列A'].mode().iloc[0])
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
エクセルファイルからシートの名前を指定してデータフレームを読み込む	pd.read_excel('file.xlsx', sheet_name=シート名)
データフレームから5行、サンプリングする	df.sample(5)
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフの色をゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='goldenrod')
リストをビン分割する	pd.cut(aList, aList)
実数から実数を引く	x - y
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
option: ミディアムバイオレットレッド色を用いる	color = 'mediumvioletred'
リストとリストの散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
option: グラフの色を青紫に設定する	color = 'violet'
縦棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
日付時刻データは日付時刻データより後ろ	aDatetime > aDatetime2
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
空白	' '
文字列の接尾辞が部分文字列	s.endswith(sub)
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
現在の再帰の最大回数	sys.getrecursionlimit()
ミッドナイトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
勾配ブースティング回帰木を新規作成する	model = sklearn.ensemble.GradientBoostingRegressor()
縦棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームから重複を残さず重複をドロップする	df.drop_duplicates(keep=False)
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
option: マーカーの色を変更する	markerfacecolor = '#800080'
自分自身をモジュールとして	sys.modules[__name__]
折れ線グラフのラベルを変更する	plt.plot(データ列x, データ列y, label='ラベル')
ランダムに5行をデータフレームから抽出する	df.sample(5)
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
日付データが火曜日か	aDate.weekday() == 1
線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
文字列の末尾	s[-1]
配列の平均値	np.mean(aArray)
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
データフレームの列をカテゴリごとにバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データシリーズの第二四分位数を求める	ds.median()
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
オールドレース色でヒストグラムを描画する	plt.hist(データ列, color='oldlace')
リストと配列についての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
リストの先頭	aList[0]
散布図をやわらかい青色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
タプルの項目名の値を得る	aDict[key]
データフレームから列名を複数指定して選択する	df[columns]
文字列を全て大文字に変換する	s.upper()
各グループごとにデータフレームを散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームを百の位で丸めて整数型にする	df.round(-2).astype(int)
度数分布図を二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
横軸の目盛りに文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
option: ライトコーラル色を使う	color = 'lightcoral'
日付データからn日を減算する	aDate - datetime.timedelta(days=n)
散布図に赤い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
データフレームの中の欠損値の合計を数える	df.isna().sum()
線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
両端キューの末尾に要素を追加する	deq.append(element)
option: グラフの色をデピンクに変更する	color = 'deeppink'
エクセルファイルファイルをSJISで読み込む	pd.read_csv('file.csv', encoding='shift_jis')
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
多次元データを多次元尺度構成法として淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
option: グラフの色をパープルに設定する	color = 'purple'
折れ線グラフの色をディムグレーに指定する	plt.plot(データ列x, データ列y, color='dimgray')
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
option: フォントの色をダークオリーブグリーンに変更する	color = 'darkolivegreen'
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
日付時刻データの時刻	aDatetime.time()
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ヒストグラムの色をダークターコイズにセットする	plt.hist(データ列, color='darkturquoise')
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
計算機イプシロンを算出する	sys.float_info.epsilon
折れ線グラフをレベッカパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: マーカーの大きさを変更する	markersize = 2.0
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
option: データ型として整数型を用いる	dtype = np.int
グラフにグリッド線を入れる	plt.grid(True)
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
option: スラグレー色を使う	color = 'slategrey'
アクア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
データフレームの列の一覧	df.info()
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
エクセルファイルをデータフレームとして読み込む	pd.read_excel('file.xlsx')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
カラムのケンドールの相関係数を計算する	scipy.stats.kendalltau(df['列A'], df['列B'])
折れ線グラフの▼マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
辞書に要素をキーとして加える	aDict[key] = element
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
現在のミリ秒	int(time.time() * 1000)
ホワイトスモーク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
データ列間のMAEを求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
散布図をrgbの▽マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
option: グラフの色をスノーに設定する	color = 'snow'
option: グラフの色をコーンズシルクに指定する	color = 'cornsilk'
折れ線グラフに黒いダイアモンド印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
データフレームのポイントプロットを描く	sns.pairplot(hue='カテゴリ列', data=df)
データフレームを2つの列の値でグループ化して、列挙する	[(name, group_df) for name, group_df in df.groupby(['列A', '列B'])]
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
option: ダークグレーにグラフの色を設定する	color = 'darkgray'
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()//60
ファイルの絶対パス	os.path.abspath(filepath)
横棒グラフを貝殻色として描画する	plt.barh(データ列x, データ列y, color='seashell')
リストが空かどうか調べる	len(aList) == 0
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(df['列A'])
データフレームのカラムのトリム分散を求める	scipy.stats.tvar(df['列A'], limits=(下限, 上限), inclusive=(True, True))
option: パウダーブルー色を使う	color = 'powderblue'
中央値でデータフレームの選択したカラムの欠損値を置換する	df[['列A', '列B']].fillna(df[['列A', '列B']].median())
option: バイナリモードに設定する	mode = 'rb'
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
文字列が全て大文字か調べる	s.isupper()
線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
option: シアン色を使う	color = 'cyan'
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
ミントクリーム色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
rgbの上三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: レモンシフォンを使う	color = 'lemonchiffon'
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
半透明の点線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
カウンタのユニークな項目を列挙する	list(aCounter)
year年day月をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=1)
論文にグラフの用途を設定する	sns.set(context='paper')
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
データフレームから列を三つのみ選択する	df[['列A', '列B', '列C']]
オブジェクトにフィールドが存在するか	hasattr(obj, プロパティ名)
カテゴリ列で色分けしてデータフレームをに箱ひげ図で見る	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ベクトルを平坦にする	aArray.flatten()
スノー色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
多次元データを主成分分析で淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
実数の正接	math.tan(x)
データフレームをある列によってまとめたグループ	df.groupby('列A')
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
ケンドール相関係数でデータフレームの相関行列を求める	df.corr(method='kendall')
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
ある列を削除してみる	df.drop('列A', axis=1)
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
文字列が全て空白文字からなるかどうか調べる	s.isspace()
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
棒グラフをゲインズボロ色として描画する	plt.bar(データ列x, データ列y, color='gainsboro')
縦棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフをライトイエロー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightyellow')
データシリーズのNaNを最小値に設定する	ds.fillna(ds.min())
二つの集合の共通要素だけにする	aSet.intersection_update(aSet2)
日付データの日数	aDate.day
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
option: タブをセパレータで使う	sep = '\t'
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
異なる列をキーとして２つのデータフレームをジョインする	pd.merge(df, df2, left_on='列A', right_on='列B')
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
縦棒グラフをシスル色を用いて描画する	plt.bar(データ列x, データ列y, color='thistle')
カテゴリでグループ化してにバイオリン図でデータフレームを図示する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
ダークレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
線グラフをペルー色を使って描画する	plt.plot(データ列x, データ列y, color='peru')
option: ペールグリーンにグラフの色を設定する	color = 'palegreen'
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
option: 複数行に対応する	flag = re.MULTILINE
半透明の実線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ベクトルをイテラブルから作る	np.array(iterable)
濃い青色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
イテラブル自身を2回あわせたデカルト積	itertools.product(iterable, repeat=2)
数値を簡略にする	sympy.sympify(e)
データフレームの指定したカラムを10の位で丸める	df['列A'].round(-1)
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
データシリーズの曜日名	ds.dt.weekday_name
リストとリストの散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
データフレームの選択した列の標本分散	df[['列A', '列B']].var(ddof=0)
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
実数を切り上げて整数にする	math.ceil(x)
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
option: マーカーを▲に変える	marker = '^'
線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
行列の累積和	np.cumsum(aArray)
日付を表現した文字列をPandasの日付型に変換する	pd.to_datetime(日付を表現した文字列)
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
プロットのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
リストを逆順にする	aList[::-1]
nが1、もしくは2か調べる	n == 1 or n == 2
データフレームから重複した行を残さずドロップする	df.drop_duplicates(keep=False)
nまでの奇整数列	list(range(1, n, 2))
ダークサーモン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
列の集合	set(iterable)
実数のk進対数	math.log(x, k)
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
日付時刻データの月数	aDatetime.month
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
nが5で割り切れるか調べる	n % 5 == 0
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
option: フォントの色をフォレストグリーンに設定する	color = 'forestgreen'
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
year年month月day日をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day)
二進文字列を整数に変換する	int(s, 2)
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
ある列のカテゴリの個数	df.groupby('列A').count()
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
折れ線グラフに右三角マーカーを加える	plt.plot(データ列x, データ列y, marker='>')
リストの中の最小値	min(aList)
列名を指定してデータフレームを外部ジョインする	pd.merge(df, df2, on='列A', how='outer')
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
折れ線グラフの色をペールグリーンにする	plt.plot(データ列x, データ列y, color='palegreen')
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
option: ラベンダーブラッシュにフォントの色を設定する	color = 'lavenderblush'
レモンシフォン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
変数を入れ替える	x, y = y, x
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
回帰モデルを学習する	model.fit(説明変数, 目的変数)
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
符号付きで整数nをバイナリに変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
option: ダークグレー色を使う	color = 'darkgray'
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
作画に使うフォントを指定する	sns.set(font=フォント名)
カラムの相関係数を求める	scipy.stats.pearsonr(df['列A'], df['列B'])
グラフを表示する	plt.show()
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
モードで指定したカラムの欠損値を置き換える	df['列A'].fillna(df['列A'].mode().iloc[0])

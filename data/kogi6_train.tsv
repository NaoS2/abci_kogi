列'A'と列'B'をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
部分文字列が部分文字列で始まる	s.startswith(sub)
散布図の色をライトコーラルにする	plt.scatter(データ列x, データ列y, color='lightcoral')
タプルのキーを列挙する	aDict.keys()
横棒グラフをダークマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
アリスブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
サポートベクター分類モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
デピンク色のヒストグラムを描画する	plt.hist(データ列, color='deeppink')
タプル内の要素は全て真か判定する	all(aTuple)
数列と配列についての散布図に黒い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='k')
列によってデータフレームをグループ化し、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
昇順にデータフレームを列名リストによって破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフをバリーウッド色として描画する	plt.plot(データ列x, データ列y, color='burlywood')
配列とリストについて散布図を描画して、マーカーを左三角に指定する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフに黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
列の最頻値	ds.mode()
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategrey')
棒グラフをフクシア色として描画する	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームのリスト列の中に存在する文字列の合計をカウントする	df[aList].isin([value]).sum()
要素が全て1の行列	np.ones(要素数, dtype=np.int)
未初期化の行列	np.empty((行数, 列数), dtype=np.int)
ビン数nでデータ列をビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
ダークバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
Pandasで、文字列をフォーマットfmtとしてdatetime64型に変換する	pd.to_datetime(s, format=fmt)
ファイルから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
option: グラフの色を小麦色に変更する	color = 'wheat'
散布図にポイントマーカーを加える	plt.scatter(データ列x, データ列y, marker='.')
文字列がリストに含まれる	element in aList
option: ミディアムオーキッド色を用いる	color = 'mediumorchid'
データフレームのリスト列の値をまとめてValueMapで置き換える	df[aList].replace(ValueMap)
文字列リストを結合してひとつの文字列にする	''.join(map(str, iterable))
データフレームのインデックスの名前リスト	df.index
表から指定されたデータ型の列名一覧	df.select_dtypes(型).columns
option: マーカーの色をミディアムオーキッドにする	markerfacecolor = 'mediumorchid'
集合が空集合でないか判定する	len(aSet) != 0
データフレームを'A'列によって小さい順にソートする	df.sort_values(by='A', ascending=True)
リストとリストについて散布図を描き、右三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
実行結果を下線付き化する	f'\033[4m{value}\033[0m'
rgbのダイアモンドマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c=rgb)
降順に'A'列によって破壊的にデータフレームを整列する	df.sort_values(by='A', ascending=False, inplace=True)
イテラブルから複数個ランダムに選ぶ	random.choices(iterable, k=n)
セットの補集合	aSet.difference(aSet2)
日付データからn秒を減算する	aDate - datetime.timedelta(seconds=n)
データフレームを散布図で可視化してカテゴリごとにマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
文字列を最初の部分文字列で二分する	s.partition(sub)
option: ライトスレイグレー色を用いる	color = 'lightslategrey'
新しいガウス過程分類器を作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
カウンタをイテラブルをカウントして、更新する	aCounter.update(iterable)
カーキ色のヒストグラムを描画する	plt.hist(データ列, color='khaki')
横棒グラフの色を暗い赤にする	plt.barh(データ列x, データ列y, color='darkred')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
散布図をブラック色で描画する	plt.scatter(データ列x, データ列y, color='black')
横棒グラフの色をブラックにする	plt.barh(データ列x, データ列y, color='black')
異なる列をキーにして２つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データ列の欠損値をメディアンで埋める	ds.fillna(ds.median())
線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
文字列の先頭でパターンに複数行対応としてマッチするか確認する	re.match(pattern, s, flags=re.MULTILINE)
配列は何のデータ型か調べる	aArray.dtype()
シーグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
Pandasで、UNIX時間のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
棒グラフをダークゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
クラス分類のアキュレシーを計算する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
option: マゼンタにグラフの色を指定する	color = 'magenta'
折れ線グラフの色をレベッカパープルに設定する	plt.plot(データ列x, データ列y, color='rebeccapurple')
イテラブルを集合に変換する	set(iterable)
option: 色をゴールデンロッドに変更する	color = 'goldenrod'
カーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
ハニーデュー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='honeydew')
データフレームを列で並べる	df.sort_values(by=column)
棒グラフの色をミディアムスレートブルーにする	plt.bar(データ列x, データ列y, color='mediumslateblue')
ヒストグラムの色をマルーンに変更する	plt.hist(データ列, color='maroon')
日付時刻データが日付時刻データより早い	aDatetime < aDatetime2
セパレータで文字列を区切り、文字列リストに変換する	s.split(sub)
リストの要素をスワップする	aList[i], aList[j] = aList[j], aList[i]
線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
リストとイテラブルについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
二つのデータフレームを異なる列をキーとして外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
▽印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
散布図にポイントマーカーを使う	plt.scatter(データ列x, データ列y, marker='.')
２つの数値をタブで区切ってプリントする	print(value, value2, sep='\t')
データ列の歪度	ds.kurt()
option: マーカーの色をスレートブルーにする	markerfacecolor = 'slateblue'
オブジェクトがタプルの要素か	element in aTuple
散布図の丸マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
リストと配列リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
option: 大文字・小文字を無視する	flag = re.IGNORECASE
点線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームのカラムが正規分布からどの程度、歪んでいるか見る	df[col].kurt()
データフレームから数値データの列だけ選択する	df.select_dtypes('number')
平均と標準偏差から疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
横棒グラフを描画して、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
決定係数を算出する	sklearn.metrics.r2_score(データ列, データ列2)
rgbの左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
文字列の中の大文字・小文字を無視してパターンによるすべてのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
棒グラフの色をイエローグリーンにする	plt.bar(データ列x, データ列y, color='yellowgreen')
線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
折れ線グラフをシャルトリューズ色として描画する	plt.plot(データ列x, データ列y, color='chartreuse')
散布図の色をリネンにする	plt.scatter(データ列x, データ列y, color='linen')
黒い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図をミディアムシアグリーン色として描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
データフレームのリスト列の中にいくつ欠損値があるか数える	df[aList].isna().sum()
縦棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
データフレームを複数の列によって昇順に破壊的に並べる	df.sort_values(by=column, ascending=True, inplace=True)
モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
散布図の大バツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
最大最小でデータをスケール変換する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
棒グラフをブラック色で描画する	plt.bar(データ列x, データ列y, color='black')
ダークカーキ色のヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
バリーウッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
ヒストグラムの色をスノーに設定する	plt.hist(データ列, color='snow')
両端キューの末尾にイテラブルの各要素を追加する	deq.extend(iterable)
文字列の開始位置からと終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
ヒストグラムの色をフクシアに指定する	plt.hist(データ列, color='fuchsia')
作画のグリッドを暗くする	sns.set(style='darkgrid')
リストとリストについて散布図を描画して、三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを二つの列によって並べて、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームを各列毎にグループ化して列の分散を計算する	df.groupby(column)[column2].var()
散布図をロージーブラウン色を用いて描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
現在処理中の例外を情報	sys.exc_info()
分子と分母から有理数を作る	fractions.Fraction(分子, 分母)
散布図に左三角マーカーを使用する	plt.scatter(データ列x, データ列y, marker='<')
グラフのサイズを指定する	plt.figure(figsize=(横幅, 高さ))
ヒストグラムの範囲を指定する	plt.hist(データ列, range=(start, end))
日付データの月数	aDate.month
散布図をペールグリーン色で描画する	plt.scatter(データ列x, データ列y, color='palegreen')
ボックスチャートにラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
線グラフをダークレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='darkred')
JSONLファイルにデータフレームを保存する	df.to_csv(filename, sep='\t')
ミスティローズ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
グラフの中に枠なしの凡例を付ける	plt.legend(frameon=False)
散布図の星印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
文字列の末尾から範囲を指定して部分文字列を探す	s.find(sub, start, end)
赤い左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<', c='r')
辞書の項目名と値を入れ替える	{v: k for k, v in aDict.items()}
nがn2の倍数でない	n % n2 != 0
散布図をクリムゾン色として描画する	plt.scatter(データ列x, データ列y, color='crimson')
データ列が何年か見る	ds.dt.year
棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
追加できるように文字コードtextとして既存のファイルパスを開く]	open(filepath, mode='a', encoding=text)
折れ線グラフの△マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
散布図をスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='springgreen')
棒グラフをシャルトリューズ色を用いて描画する	plt.bar(データ列x, データ列y, color='chartreuse')
二つのリストの積集合	list(set(aList) & set(aList2))
値を白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
データを平均と分散で標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
パーセプトロンで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
文字列を部分文字列で二つに区切って後半の文字列を見る	s.partition(sub)[-1]
データフレームの先頭を見る	df.head()
クロスマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
数式の平方根を求める	sympy.sqrt(e)
棒グラフの色をモカシンにする	plt.bar(データ列x, データ列y, color='moccasin')
赤色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
NaN	math.nan
折れ線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
ユーザの入力を整数として受け取る	int(input())
配列の推移を青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
三つのデータフレームを横方向につなぐ	pd.concat([df, df2, df3], axis=1)
二つの列によってデータフレームを昇順に並べ、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
両端キューの先頭にイテラブルの各要素をつけ加える	deq.extendleft(iterable)
スピアマンとしてデータフレームのリストで指定された列の相関行列を求める	df[aList].corr(method='spearman')
データフレームのカラムの欠損値を50パーセンタイルにする	df[col].fillna(df[col].median())
折れ線グラフをサーモン色で描画する	plt.plot(データ列x, データ列y, color='salmon')
option: 色をバイオレットにセットする	color = 'violet'
ヒストグラムの色をコーラルに指定する	plt.hist(データ列, color='coral')
データフレームのカラムの年を見る	df[col].dt.year
データフレームのカラムの文字列を欠損値にする	df[col].replace(s, np.nan)
データ列が正規分布からどれだけ、歪んでいるか確認する	ds.kurt()
データフレームの列の値がx未満の行を選択する	df[df[column] < x]
リストの散らばりを描画する	plt.scatter(データ列x, データ列y)
イテラブルから重複なく、n要素ランダムに選ぶ	random.sample(iterable, k=n)
文字列をトリムする	s.strip()
option: マーカーの色をダークスラテグレーにする	markerfacecolor = 'darkslategray'
行列の平均値を求める	np.mean(aArray)
option: グラフの色をマルーンに設定する	color = 'maroon'
Pandasのバージョンを出力する	print(pd.__version__)
文字列が部分文字列で終わるかどうか	s.endswith(sub)
ペルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peru')
option: ローングリーン色を使う	color = 'lawngreen'
▽印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
横棒グラフをブラック色で描画する	plt.barh(データ列x, データ列y, color='black')
棒グラフの色を濃いシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
k進対数を求める	math.log(x, k)
イテラブルと列をペア化する	itertools.zip_longest(iterable, iterable2)
部分文字列で部分文字列が始まる	s.startswith(sub)
nの3乗を求める	n ** 3
3つのリストを順に表示する	print(value, value2, value3)
グラフに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
タプルを消去する	aDict.clear()
横棒グラフをマルーン色として描画する	plt.barh(データ列x, データ列y, color='maroon')
ヒストグラムの色をマゼンタに設定する	plt.hist(データ列, color='magenta')
列をキーにして２つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
黄色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellow')
ヒストグラムをグリーンイエロー色を用いて描画する	plt.hist(データ列, color='greenyellow')
散布図をライトゴールドロディイエロー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
縦棒グラフを描画して、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
折れ線グラフの色をオーキッドに変更する	plt.plot(データ列x, データ列y, color='orchid')
ヒストグラムをオーキッド色で描画する	plt.hist(データ列, color='orchid')
データフレームのインデックスの名前をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
データ列をビン数nでビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データ列間の平方根平均二乗誤差を算出する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
星マーカーを使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
ローングリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
option: 淡いピンク色を使う	color = 'lightpink'
データフレームのカラムの中に存在する文字列と文字列の合計を求める	df[col].isin([value, value2]).sum()
option: マーカーの色をミディアムアクアマリンにする	markerfacecolor = 'mediumaquamarine'
オブジェクトが整数クラスか	isinstance(obj, int)
マゼンタ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
クラス分類の適合率を計算する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
レベッカパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
リストとリストについての散布図に黒いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='k')
線グラフの色をバイオレットに指定する	plt.plot(データ列x, データ列y, color='violet')
n番目のシートをエクセルファイルファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
nの二進数文字列	bin(n)[2:]
折れ線グラフの大バツマーカーを青くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
カラムの欠損値を平均値に設定する	ds.fillna(ds.mean())
要素∉集合	element not in aSet
有理数を分母の最大値を指定して近似する	q.limit_denominator(max_denominator=1000000)
カウンタの正の数だけ残す	+aCounter
ミッドナイトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
タプルを順に表示する	print(*aTuple)
日付時刻データからn日分、減算する	aDatetime - datetime.timedelta(days=n)
切り下げて整数に変換する	math.floor(x)
データフレームの値が未入力値	df.isna()
データフレームのリストカラムを10の位で四捨五入して整数にする	df[aList].round(-1).astype(int)
ライトスチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
ミディアムスプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
現在の作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
実行結果を白色にする	f'\033[37m{value}\033[0m'
赤い上三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
データ列のNaNを直前の値で埋める	ds.fillna(method='ffill')
ヒストグラムをライム色として描画する	plt.hist(データ列, color='lime')
数列を2つ並べて箱ヒゲ図にする	plt.boxplot([データ列, データ列])
データフレームの中に文字列と日付データがいくつあるか求める	df.isin([value, value2]).sum()
option: ミディアムオーキッド色を使う	color = 'mediumorchid'
ダーク・スラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
option: ライムを使う	color = 'lime'
浮動小数点数を実数で整数除算する	x // y
折れ線グラフの色をサドルブラウンに設定する	plt.plot(データ列x, データ列y, color='saddlebrown')
1からNまでの配列	np.arange(1, N+1)
カラムを1000の位で四捨五入して整数型にする	ds.round(-3).astype(int)
赤い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
option: バッファリングのサイズを大きくする	buffering = 4096
ヒストグラムをシャルトリューズ色で描画する	plt.hist(データ列, color='chartreuse')
棒グラフをオールドレース色を使って描画する	plt.bar(データ列x, データ列y, color='oldlace')
ブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
option: エンコーディングを文字コードtextに変更する	encoding = text
ブルーバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
上三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
キューの先頭	deq[0]
要素は集合のメンバーかどうか	element in aSet
青色で文字列をプリントする	print(f'\033[34m{value}\033[0m')
実数が整数かどうか	x.is_integer()
青いグリッド線を引く	plt.grid(color='b')
線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームの行リスト	df.index
データフレームから最初の列を除く	df[df.columns[1:]]
ヒストグラムの線の種類を点線に変更する	plt.hist(データ列, linestyle='dotted')
数値を部分分数として展開する	sympy.apart(e)
データフレームのリスト列を100の位で丸める	df[aList].round(-2)
option: ライトサーモンにフォントの色を変更する	color = 'lightsalmon'
プロットの描画で色差別なく色を用いる	sns.set(pallete='colorblind')
ラインを点線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dotted')
kを底とする対数	math.log(x, k)
浮動小数点数の双曲線正接	math.tanh(x)
配列にはいくつ要素があるか調べる	aArray.size
ダークバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='darkviolet')
二つのタプルを階層的につなぐ	collections.ChainMap(aDict, aDict2)
横棒グラフの色をチョコレートにする	plt.barh(データ列x, データ列y, color='chocolate')
実数の常用対数	math.log10(x)
横棒グラフの色をピーチパフにする	plt.barh(データ列x, データ列y, color='peachpuff')
データ列の相関を可視化する	plt.scatter(データ列x, データ列y)
棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
カウンタの項目数	len(aCounter)
散布図をマルーン色として描画する	plt.scatter(データ列x, データ列y, color='maroon')
散布図に青い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームのNaNを最頻値に設定する	df.fillna(df.mode().iloc[0])
線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
左三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='<')
縦棒グラフをプロットしてラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
option: サーモンにグラフの色を設定する	color = 'salmon'
日付時刻データからn時間を減らす	aDatetime - datetime.timedelta(hours=n)
黒い星マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
nを符号付きで長さn2のバイト列にする	n.to_bytes(length=bytesize, byteorder='big', signed=True)
リストとリストについて散布図を描画して、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategrey')
棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
グリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
実数の自然対数	math.log(x)
前もってパターンをコンパイルする	re.compile(pattern)
データフレームを表示するとき、表示できる最大行数をnに設定する	pd.set_option('display.max_rows', n)
リストを分割数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームの列のユニークな値	df[col].unique()
option: 左三角印を加える	marker = '<'
ファイルからファイル名を求める	os.path.basename(filepath)
重回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
散布図を黒いダイアモンドマーカーで描く	plt.plot(データ列x, データ列y, marker='D', c='k')
日付データが日付データより前かどうか	aDate < aDate2
無限大	math.inf
折れ線グラフのポイントマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
グラフの横軸の説明を変更する	plt.xlabel('x軸ラベル')
散布図の色をミディアムスレートブルーにする	plt.scatter(データ列x, データ列y, color='mediumslateblue')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
モカシンにヒストグラムの色を指定する	plt.hist(データ列, color='moccasin')
散布図を小麦色色で描画する	plt.scatter(データ列x, データ列y, color='wheat')
ヒストグラムの色をミディアムターコイズに変更する	plt.hist(データ列, color='mediumturquoise')
縦棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
カーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='khaki')
K最近傍法としてクラス分類をする	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームを列の値によって集計して、合計を求める	df.groupby(column).sum()
option: マーカーの色をオリベドラブにする	markerfacecolor = 'olivedrab'
option: 印をポイントに変更する	marker = '.'
データフレームのリスト列の欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
最大長nの両端キューを用意する	collections.deque(maxlen=n)
ファイルを文字列の示すエンコーディングを使ってオープンする]	open(filepath, encoding=s)
option: ホワイトにフォントの色をする	color = 'white'
文字列を空白で区切って、整数列に変換する	map(int, s.split())
整数nの十六進文字列	hex(n)[2:]
エクセルファイルをファイルから読み込む	pd.read_excel(filename)
ヒストグラムの色をラベンダーブラッシュにする	plt.hist(データ列, color='lavenderblush')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
データフレームの列が文字列で終わる行を抽出する	df[df[column].str.endswith(s)]
オプションで、標準エラーに出力する	file = sys.stderr
タプルのn番目以降の部分を取り出す	aTuple[n:]
横棒グラフをドジャーブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
既存のファイルをUTF8で追加できるように開く]	open(filepath, mode='a', encoding='utf-8')
データフレームの累積分布を描画する	sns.ecdfplot(x='列名', data=df)
円プロットを完全な円にする	plt.axis('equals')
折れ線グラフの色をマゼンタに設定する	plt.plot(データ列x, データ列y, color='magenta')
浮動小数点数の有理数近似	q.limit_denominator(max_denominator=1000000)
nがn2以下	n <= n2
配列をフラット化する	aArray.flatten()
横棒グラフを描画してラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
折れ線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
散布図の丸マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
データフレームのカラムを100の位で丸めて整数型にする	df[col].round(-2).astype(int)
データフレームの欠損値を平均値にセットする	df.fillna(df.mean())
option: 色を青に変更する	color = 'blue'
リストの最後から要素を取り除く	aList.pop()
折れ線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームの指定された列名一覧の列を取り出す	df[columns]
折れ線グラフの四角印を青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
散布図をサーモン色で描画する	plt.scatter(データ列x, データ列y, color='salmon')
xが一桁の数かどうか確認する	-9 <= x <= 9
横棒グラフをライトスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
折れ線グラフをダークスラテグレー色として描画する	plt.plot(データ列x, データ列y, color='darkslategray')
グラフ中のフォントを設定する	sns.set(font=フォント名)
マッピングに要素をキーとして加える	aDict[key] = element
横棒グラフをパウダーブルー色で描画する	plt.barh(データ列x, データ列y, color='powderblue')
option: データ型を指定する	dtype = np.int32
データフレームから重複した行を削除する	df.drop_duplicates()
option: 左三角マーカーを使う	marker = '<'
配列の和	aArray + aArray2
列を百の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
データフレームを列によって昇順に並べて更新する	df.sort_values(by=column, ascending=True, inplace=True)
折れ線グラフに赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
散布図のポイント印の大きさを変える	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
データフレームの信頼区間をプロットする	sns.pairplot(hue='カテゴリ列', data=df)
データフレームのpercent分位数	df.quantile(percent/100)
折れ線グラフに青い△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
折れ線グラフに赤い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
文字列をバイト列に変換する	bytes(s)
赤い左三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
本日が何日か知る	datetime.datetime.today().day
散布図をコーンズシルク色で描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
xが1、もしくは2、もしくは3に等しいかどうかテストする	x == 1 or x == 2 or x == 3
既存の配列を元に全要素が1の行列を作る	np.ones_like(aArray)
option: マーカーの色をダークオレンジにする	markerfacecolor = 'darkorange'
変数を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
option: パールバイオレットレッド色を使用する	color = 'palevioletred'
option: マーカーの色を赤にする	markerfacecolor = 'red'
標準入力から1行だけ改行を取り除いて読む	sys.stdin.readline().rstrip()
タプルの中の最小値	min(aTuple)
棒グラフを貝殻色を用いて描画する	plt.bar(データ列x, データ列y, color='seashell')
タプル内の要素が少なくともひとつ真かどうか	any(aTuple)
プロットにx=0の点線をつける	plt.axvline(x=0, linestyle='dotted')
辞書上で項目名が定義されているか	key in aDict
nをn2で整数除算する	n // n2
ヒストグラムをライトブルー色で描画する	plt.hist(データ列, color='lightblue')
option: グラフの色をダークブルーに変更する	color = 'darkblue'
折れ線グラフの色をライムグリーンに設定する	plt.plot(データ列x, データ列y, color='limegreen')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgrey')
散布図をロージーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
リストとリストについての散布図を大きさnで描画する	plt.scatter(データ列x, データ列y, s=n)
リストを縦軸、リストをx座標として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
グラフの色を淡くする	sns.set(pallete='muted')
リストとリストの散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームをグループ化し、各列に対し最小値を求める	df.groupby(column)[column2].min()
グラフのx軸とy軸の比率を等しくする	plt.axis('equals')
天井を求める	math.ceil(x)
数列とリストについて散布図を描画し、、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ダークスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
線グラフの色をペールグリーンに変更する	plt.plot(データ列x, データ列y, color='palegreen')
'A'列によって昇順にデータフレームをソートする	df.sort_values(by='A', ascending=True)
データフレームのリストカラムの中に日付データが存在する	df[aList].isin([value])
データ列の欠損値を直前の値で補う	ds.fillna(method='ffill')
横棒グラフをコーンズシルク色で描画する	plt.barh(データ列x, データ列y, color='cornsilk')
リストを行列にする	np.array(aList)
ヒストグラムのプロットして正規化する	plt.hist(データ列, density=True)
option: フォントの色を黄色にセットする	color = 'yellow'
等間隔の配列を初期化する＼	np.arange(開始値, 終了値, 等差)
散布図に▲マーカーを使用する	plt.scatter(データ列x, データ列y, marker='^')
赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='red')
データフレームのn行目をドロップして、更新する	df.drop(n, axis=0, inplace=True)
日付データからn時間分、減算する	aDate - datetime.timedelta(hours=n)
データフレームの列の空文字をNaNに変換し、ドロップする	df[col].replace('', np.nan).dropna()
散布図に青い▽マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
リストの中の最小値	min(aList)
散布図にrgbの上三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームのリストカラムの欠損値を後の値で補う	df[aList].fillna(method='bfill')
カウンタ間で積集合	aCounter & aCounter2
四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s')
データフレームのリストカラムの中に存在する文字列と日付データの個数を数える	df[aList].isin([value, value2]).sum()
データフレームを各列毎にグループ化して、列の分散を求める	df.groupby(column)[column2].var()
データフレームのリスト列の上位25%	df[aList].quantile(0.25)
option: ダークサーモン色を使う	color = 'darksalmon'
データフレームを二つの列の値ごとに集約し、、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
線グラフの色をダークスレートブルーにする	plt.plot(データ列x, データ列y, color='darkslateblue')
option: ダークターコイズを使う	color = 'darkturquoise'
改行付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
ガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
横棒グラフをダークカーキ色で描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
文字列は全て印字できるか調べる	s.isprintable()
データをL1ノルムで正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
インデント付きで辞書を文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
データフレームのリストカラムの中に文字列が存在するか	df[aList].isin([value])
点線を用いて線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightseagreen')
ラベンダーブラッシュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
文字列全体が正規表現にマッチするか見る	re.fullmatch(pattern, s)
ライトグレーにヒストグラムの色を指定する	plt.hist(データ列, color='lightgrey')
散布図でデータフレームのカラムを図示する	sns.scatterplot(data=df, x='列名', y='列名')
イエローグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
option: ピーチパフを使う	color = 'peachpuff'
日付データが火曜日か	aDate.weekday() == 1
文字列内に英数字が含まれるか調べる	any(c.isalnum() for c in s)
データフレームのカラムを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
文字列をISO書式で日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
文字列の中の複数行対応としてパターンによる全マッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
ミディアムバイオレットレッドにヒストグラムの色を指定する	plt.hist(データ列, color='mediumvioletred')
ヒストグラムを白色として描画する	plt.hist(データ列, color='white')
option: オールドレースにグラフの色を設定する	color = 'oldlace'
日付時刻データが月曜日かどうか調べる	aDatetime.weekday() == 0
棒グラフをグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='green')
水色でリストをプリントする	print(f'\033[36m{value}\033[0m')
浮動小数点数以上の最小の整数を計算する	math.ceil(x)
option: 線を太くする	linewidth = 3.0
データフレームのカラムの分散を求める	df[col].var()
データフレームの中に日付データと文字列がいくつ存在するか求める	df.isin([value, value2]).sum()
棒グラフをターコイズ色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
ドジャーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
パールゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
データフレームを'A'列によって降順に破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
３つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
改行で区切って2つの文字列を出力する	print(value, value2, sep='\n')
オプションで出力先をファイルに設定する	file = sys.open(filename, 'w')
散布図に赤いバツ印を描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
自然数の階乗	math.factorial(n)
非空白が文字列中に含まれるか確認する	any(not c.isspace() for c in s)
折れ線グラフの星印の太さを指定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
散布図をオレンジレッド色として描画する	plt.scatter(データ列x, データ列y, color='orangered')
新しいガウス過程分類モデルを作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
カラーバーを水平で付ける	plt.colorbar(orientation='horizontal')
折れ線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
散布図の色をパールゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='palegoldenrod')
棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
文字列内にひとつでも小文字が含まれるか	any(c.islower() for c in s)
散布図をターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='turquoise')
多重集合を配列から作る	collections.Counter(iterable)
真紅色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
紺色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
文字列の変数名を数式に変換する	sympy.Symbol(s)
２つの値をタブで区切ってプリントする	print(value, value2, sep='\t')
option: グラフの色をダークゴールデンロッドに変更する	color = 'darkgoldenrod'
グラフの背景色を暗くする	sns.set(style='darkgrid')
折れ線グラフをラベンダーブラッシュ色として描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
列によってデータフレームをグループ分けして、個数を計算する	df.groupby(column).count()
データフレームのカラムが正規分布からどの程度、歪んでいるか確認する	df[col].kurt()
イテラブルの各要素に対して、predicateFuncが真であればその要素を出力する	itertools.takewhile(predicateFunc, iterable)
ヒストグラムの色をオーキッドにする	plt.hist(データ列, color='orchid')
option: グラフの色をディムグレーに変更する	color = 'dimgrey'
オブジェクトをイテラブルに変換する	iter(obj)
キューのstart〜endの要素	collections.deque(itertools.islice(deq, start, end))
データフレームの散布図をグループ化して横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
追加できるようにBOM付きで既存のファイルパスを開く]	open(filepath, mode='a', encoding='utf_8_sig')
データフレームの列をヒストグラムとしてプロットする	plt.hist(df[column])
ファイルパスが存在するか判定する	os.path.exists(filepath)
右三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
コーンフラワーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
データフレームのカラムの日	df[col].dt.day
データフレームのリストカラムは正規分布からどの程度、尖っているか見る	df[aList].skew()
option: スプリンググリーンにグラフの色を設定する	color = 'springgreen'
オブジェクトが名前付きタプルか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
year年month月day日のタイムスタンプ	datetime.datetime(year=year, month=month, day=day)
オブジェクトはリストかタプルかどうか調べる	isinstance(obj, (list)
文字列は全て十進数字か調べる	s.isdecimal()
option: トマトにフォントの色を設定する	color = 'tomato'
グラフで用いる縦軸にラベルをつける	plt.ylabel('y軸ラベル')
リストをビン数nを使って分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
ミスティローズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
散布図をアイボリー色で描画する	plt.scatter(データ列x, データ列y, color='ivory')
nが奇数かどうか調べる	n % 2 == 1
ディムグレー色としてヒストグラムを描画する	plt.hist(データ列, color='dimgray')
セットをイミュータブルなセットに変換する	frozenset(aSet)
option: 線の種類を破線に設定する	linestyle = 'dashed'
改行なしに実行結果をプリントする	print(value, end='')
データフレームのカラムを10の位で丸めて、整数にする	df[col].round(-1).astype(int)
マッピングから最後のエントリを取り出す	aDict.popitem()
option: ゴーストホワイトを使う	color = 'ghostwhite'
オブジェクトのバイト長を知る	sys.getsizeof(obj)
直前の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='ffill')
横棒グラフをライトシアン色として描画する	plt.barh(データ列x, データ列y, color='lightcyan')
勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
option: 説明変数を事前に正規化する	normalize = True
K最近傍法でクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
列を文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
八進文字列をバイト列に変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
option: グラフの色を紺碧に設定する	color = 'azure'
データフレームのカウントプロットを描画する	sns.countplot(x='列名', data=df)
サドルブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
Pandasで、データ列をフォーマットfmtで日付データに変換する	pd.to_datetime(ds, format=fmt)
ファイルの絶対パス	os.path.abspath(filepath)
折れ線グラフのマーカーをポイント印にする	plt.plot(データ列x, データ列y, marker='.')
option: イエローグリーン色を用いる	color = 'yellowgreen'
option: マーカーの色をダークターコイズにする	markerfacecolor = 'darkturquoise'
棒グラフをパープル色を使って描画する	plt.bar(データ列x, データ列y, color='purple')
文字列の左側から部分文字列を消す	s.lstrip(sub)
辞書をJSONフォーマットで出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
改行せず数値をプリントする	print(value, end='')
グラフの用途を論文に設定する	sns.set(context='paper')
データフレームの内の欠損値を落とす	df.dropna()
多次元尺度構成法で多次元データを濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
Pandasで、フォーマットでデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
nが無限に続く数列	itertools.repeat(n)
列を中央値でビン分割する	pd.qcut(ds, 2)
データフレームのカラムの中に文字列があるか調べる	df[col].isin([value])
項目名がマップに存在しないとき、要素を追加する	aDict.setdefault(key, element)
ヒストグラムの色を小麦色に設定する	plt.hist(データ列, color='wheat')
イテラブルとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
折れ線グラフに黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
データフレームのカラムのNaNを第二四分位数にセットする	df[col].fillna(df[col].median())
多次元データを主成分分析で濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
列をビン数nを用いてビニングする	pd.cut(ds, n)
データフレームを関数によってまとめたグループを使う	df.groupby(関数)
要素が集合に含まれないかどうか判定する	element not in aSet
データフレームを各カラムと列の組み合わせ毎に分類し、、分散を求める	df.groupby([column, column2], as_index=False).var()
折れ線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
散布図の色をアクアマリンにする	plt.scatter(データ列x, データ列y, color='aquamarine')
データフレームを各列と列の組み合わせ毎にグループ分けして合計を求める	df.groupby([column, column2], as_index=False).sum()
データフレームを各列毎に集約して文字列というグループの個数を求める	df.groupby(column).size()[s]
グラフの描画で色差別なくカラーパレットを使う	sns.set(pallete='colorblind')
データ列のUNIX時間から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
散布図をプラム色で描画する	plt.scatter(データ列x, データ列y, color='plum')
ライムグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='limegreen')
カウンタの文字列をひとつ増やす	aCounter[element] += 1
標準出力を得る	sys.stdout
散布図のマーカーを星にする	plt.scatter(データ列x, データ列y, marker='*')
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgrey')
重複する行のみを抽出する	df[df.duplicated(keep=False)]
nを半分にする	n /= 2
データフレームを各列と列の組み合わせ毎にグループ化して、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
option: NaNを先頭にする	na_position = 'first'
天井	math.ceil(x)
データフレームの列を破壊的に落とす	df.drop(column, axis=1, inplace=True)
データ列をビン数nでビン分割する	pd.cut(ds, n)
ロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
文字列内にひとつでも小文字が含まれるか調べる	any(c.islower() for c in s)
nをn2だけ大きくする	n += n2
棒グラフの色をシアンにする	plt.bar(データ列x, データ列y, color='cyan')
二進対数	math.log2(x)
横棒グラフを紺色として描画する	plt.barh(データ列x, データ列y, color='darkblue')
プラム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='plum')
折れ線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
データフレームの平均と信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
散布図をグリーンイエロー色として描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
nがn2で割り切れるか	n % n2 == 0
ヒストグラムの色をナバホホワイトにする	plt.hist(データ列, color='navajowhite')
散布図の色をダークターコイズにする	plt.scatter(データ列x, データ列y, color='darkturquoise')
nが偶数かどうか調べる	n % 2 == 0
option: ナバホホワイトにフォントの色を設定する	color = 'navajowhite'
option: ローングリーンを使う	color = 'lawngreen'
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightgreen')
列の名前一覧	df.columns
データフレームの列の中にいくつ日付データがあるか求める	df[col].isin([value]).sum()
文字列内にひとつでも数字が含まれる	any(c.isdigit() for c in s)
option: グラフの色をピーチパフに設定する	color = 'peachpuff'
グラフの中のy軸にラベルを付ける	plt.ylabel('y軸ラベル')
パラメータについて数式を積分する	sympy.integrate(e, z)
シアン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
データ列の中にある日付データの合計をカウントする	ds.isin([value]).sum()
データフレームの列を最初のカテゴリーを除き、ダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
オブジェクトは整数クラスか調べる	isinstance(obj, int)
列を累加したイテラブル	itertools.accumulate(iterable)
文字列を部分文字列で分けたときの残りの文字列を使う	s.partition(sub)[-1]
データフレームの列を説明変数にする	説明変数 = df[['列名', '列名2']]
横棒グラフの色をオレンジにする	plt.barh(データ列x, データ列y, color='orange')
ヒストグラムをライム色を用いて描画する	plt.hist(データ列, color='lime')
散布図の印を星印にする	plt.scatter(データ列x, データ列y, marker='*')
option: バイナリモードに指定する	mode = 'rb'
データ列の折れ線グラフを左三角印で描画する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの右三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
option: 色をパールバイオレットレッドに設定する	color = 'palevioletred'
横棒グラフを描いて、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
乱数シードを初期化する	random.seed()
リストとリストの散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
グラフの描画で淡くカラーパレットを使用する	sns.set(pallete='muted')
配列とリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
タブ区切りのファイルをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
データフレームをまとめて小数点以下n桁で四捨五入する	df.round(n)
データフレームを10の位で四捨五入して整数型にする	df.round(-1).astype(int)
option: グラフの色をスラグレーに設定する	color = 'slategray'
Pandasで、データ列をdatetime64型に変換する	pd.to_datetime(ds)
option: グラフの色をローングリーンに変更する	color = 'lawngreen'
棒グラフの色をミディアムバイオレットレッドにする	plt.bar(データ列x, データ列y, color='mediumvioletred')
option: マーカーの色をサドルブラウンにする	markerfacecolor = 'saddlebrown'
オブジェクトは整数クラスか確認する	isinstance(obj, int)
データフレームの列がx以下の行を抽出する	df[df[column] <= x]
ミディアムアクアマリン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
書き込みできるように文字コードtextでファイルをオープンする]	open(filepath, mode='w', encoding=text)
箱髭図を横向きにする	plt.boxplot(データ列, vert=False)
シーケンスとイテラブルを連結する	itertools.chain(iterable, iterable2)
黄色い散布図を描画する	plt.scatter(データ列x, データ列y, color='y')
rgbの右三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
ベクトルの次元数	aArray.ndim
ハニーデュー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
option: セパレータを使わない	sep = ''
配列を元に全要素が0の配列	np.zeros_like(aArray)
option: エンコーディングをEUCに設定する	encoding = 'euc_jp'
モデルを当てはめる	model.fit(説明変数, 目的変数)
スカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
nからn2の範囲で	range(n, n2)
データフレームからインプレイスで重複を削除する	df.drop_duplicates(inplace=True)
option: 青緑を使う	color = 'teal'
文字列を最初の部分文字列で分けたときの後半の文字列を使う	s.partition(sub)[-1]
切片なしの線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: パパイヤウィップを使う	color = 'papayawhip'
棒グラフの色をドジャーブルーにする	plt.bar(データ列x, データ列y, color='dodgerblue')
デフォルトのエンコーディング	sys.getdefaultencoding()
ヒストグラムをブランチドアーモンド色として描画する	plt.hist(データ列, color='blanchedalmond')
文字列がリストの要素かどうか調べる	element in aList
リストとリストの散布図をプロットして、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: パウダーブルー色を使う	color = 'powderblue'
赤色のヒストグラムを描画する	plt.hist(データ列, color='red')
ライトゴールドロディイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
横棒グラフの色をロージーブラウンにする	plt.barh(データ列x, データ列y, color='rosybrown')
棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
回帰分析をバギングで行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
辞書の値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
折れ線グラフの上三角印を青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
枠なしの補足を加える	plt.legend(frameon=False)
折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
文字列の両端から部分文字列を消す	s.strip(sub)
散布図の右三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
リストと数列について散布図をプロットし、、マーカーを▲に変更する	plt.plot(データ列x, データ列y, marker='^')
クラスのサブ型か調べる	issubclass(サブクラス, クラス)
横棒グラフをダークシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
文字列を青色でプリントする	print(f'\033[34m{value}\033[0m')
ラインを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
バイナリモードとしてファイルをオープンする]	open(filepath, mode='rb')
行列の列ごとの最小値	np.min(aArray, axis=0)
棒グラフをプラム色として描画する	plt.bar(データ列x, データ列y, color='plum')
散布図でデータフレームをプロット化し、、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
文字列リストを一つにしてひとつの文字列にする	''.join(map(str, iterable))
ライトコーラル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
暗い赤色のヒストグラムを描画する	plt.hist(データ列, color='darkred')
シーケンスを文字列リストに変換して'改行によって連結する	'\n'.join(map(str, iterable))
フローラルホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='floralwhite')
関数の値によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
ヒートマップとしてデータフレームの列と列の相関行列をグラフ化する	sns.heatmap(df[[column, column2]].corr())
TSVファイルからSJISでCSVファイルを読む	pd.read_csv(filename, encoding='shift_jis')
折れ線グラフをリネン色を用いて描画する	plt.plot(データ列x, データ列y, color='linen')
散布図の三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームから重複を削除する	df.drop_duplicates()
エクセルファイルからデータフレームを読み込む	pd.read_excel(filename)
データフレームのカラムが何日か見る	df[col].dt.day
現在の秒数	datetime.date.today().second
データフレームの欠損値を最大値に設定する	df.fillna(df.max())
データ列を等しい量になるようにビン数nを用いて分割する	pd.qcut(ds, n)
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightseagreen')
バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
浮動小数点数を小数点第一位で丸める	round(x, 1)
nが正の数	n > 0
データフレームの値を正規表現patternでreplに置き換える	df.replace(pattern, repl, regex=True)
データフレームのリスト列を十の位で丸めて整数型にする	df[aList].round(-1).astype(int)
散布図の色をベージュにする	plt.scatter(データ列x, データ列y, color='beige')
棒グラフをレベッカパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
ベクトルの要素数	aArray.size
破壊的に2つの列によって降順にデータフレームを並べる	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
濃い青にヒストグラムの色を設定する	plt.hist(データ列, color='darkblue')
option: マーカーの色をイエローグリーンにする	markerfacecolor = 'yellowgreen'
カテゴリデータ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
グラフのサイズを設定する	plt.figure(figsize=(横幅, 高さ))
n2がnより大きく、かつn3未満	n < n2 and n2 < n3
リストをn倍する	aList * n
ケンドールでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
option: BOM付きを使う	encoding = 'utf_8_sig'
折れ線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
横棒グラフをミディアムパープル色を使って描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
ゴールド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
predicateFuncが真となるイテラブルの部分	itertools.dropwhile(predicateFunc, iterable)
ケンドール相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='kendall')
ふたつの集合の積集合を計算する	aSet.intersection(aSet2)
レベッカパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
横棒グラフをライトスレイグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
縦棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
rgbの大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
グラフに凡例を加える	plt.legend(['凡例A', '凡例B'])
データフレームを各列と列の組み合わせ毎にグループ化し、最小値を算出する	df.groupby([column, column2], as_index=False).min()
折れ線グラフの色をペールグリーンに変更する	plt.plot(データ列x, データ列y, color='palegreen')
ゼロ埋めされた三二ビット整数型の行列を作る	np.zeros(要素数, dtype=np.int16)
青紫色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
プラットホームがリナックスかどうか調べる	sys.platform.startswith('linux')
散布図をシエナ色で描画する	plt.scatter(データ列x, データ列y, color='sienna')
双方向キューの先頭の要素	deq[0]
整数nの十六進文字列を使う	hex(n)[2:]
実数の二乗	x ** 2
パールゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
散布図の丸マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
棒グラフの色をライトスカイブルーにする	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームを複数の列を用いてによって大きい順に整列する	df.sort_values(by=column, ascending=False)
折れ線グラフの左三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
データフレームの列と列の相関行列スピアマンとして	df[[column, column2]].corr(method='spearman')
折れ線グラフをグリーンイエロー色を使って描画する	plt.plot(データ列x, データ列y, color='greenyellow')
サンディーブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='sandybrown')
nとn2が等しいか調べる	n == n2
nを切り捨てながらn2分の一にする	n //= n2
タプルが少なくともひとつ真か調べる	any(aTuple)
タプルの最初の文字列を探す	aTuple.index(element)
何か試しに動かしてみる	print('Hello World')
2つのデータフレームを横向きに連結する	pd.concat([df, df2], axis=1)
データフレームを丸めて整数にする	df.round().astype(int)
リストとリストについて散布図を描き、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
柱状図を用いてデータ列を可視化する	plt.hist(データ列)
棒グラフの色をダークシアグリーンにする	plt.bar(データ列x, データ列y, color='darkseagreen')
option: ブランチドアーモンドにグラフの色を設定する	color = 'blanchedalmond'
双方向キューのn番目に要素を挿入する	deq.insert(n, element)
option: ドジャーブルー色を用いる	color = 'dodgerblue'
折れ線グラフの菱形マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
線グラフの色をライトサーモンに指定する	plt.plot(データ列x, データ列y, color='lightsalmon')
option: 配列のデータ型を指定する	dtype = np.int
折れ線プロットで数列を可視化する	plt.plot(データ列x, データ列y)
折れ線グラフの菱形マーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
TSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
集合が空でないか調べる	len(aSet) != 0
実数の絶対値を計算する	math.fabs(x)
option: マーカーの線幅を変更する	markeredgewidth = 2.5
ヒストグラムの色をペールグリーンに設定する	plt.hist(データ列, color='palegreen')
OSがWindowsか調べる	sys.platform.startswith('win32')
赤いヒストグラムを描画する	plt.hist(データ列, color='r')
データフレームの欠損値を最小値に増やす	df.fillna(df.min())
線グラフをライトシアン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcyan')
option: ライトスレイグレー色を使う	color = 'lightslategray'
日付時刻データが何分か知る	aDatetime.minute
option: カーキ色を使う	color = 'khaki'
棒グラフをダークオリーブグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
文字列の右側	s[-1]
Pandasで文字列の数値時刻から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
青いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
初期値で全要素を初期化した配列	np.full(要素数, 初期値, dtype=np.int)
列によってデータフレームを並べ直す	df.sort_values(by=column)
データフレームの中の列をビン分割する	pd.cut(df[col], aList)
スラグレーにヒストグラムの色を設定する	plt.hist(データ列, color='slategrey')
ミディアムオーキッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
option: ペールグリーンを使用する	color = 'palegreen'
データフレームの列が文字列が含まれない行を抽出する	df[not df[column].str.contains(s)]
変数がマイナス無限大に近づくときの数式の極限値を算出する	sympy.limit(e, z, -oo)
オレンジレッド色のヒストグラムを描画する	plt.hist(データ列, color='orangered')
部分的最小二乗回帰モデルを新規作成する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: グラフの色をシャルトリューズにセットする	color = 'chartreuse'
折れ線グラフの▲印を黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: ベクトルのデータ型を指定する	dtype = bool
メディアンでデータフレームの欠損値を置き換える	df.fillna(df.median())
データ列を二つ並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
データフレームの列の欠損値を中央値に変更する	df[col].fillna(df[col].median())
折れ線グラフのラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
1からnまでの整数列を得る	list(range(1, n+1))
option: マーカーの色を黄色にする	markerfacecolor = 'yellow'
数列とリストについて散布図を描画して、マーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
option: グラフの色をミディアムアクアマリンに変更する	color = 'mediumaquamarine'
配列の行ごとの合計	np.sum(aArray, axis=1)
配列とイテラブルについて散布図を描画し、、△マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ユニークな値を要素とする行列	np.unique(aArray)
データフレームのインデックス一覧	df.index
破壊的に列によってデータフレームを降順に整列する	df.sort_values(by=column, ascending=False, inplace=True)
線形回帰モデルの係数を求める	model.coef_
散布図をタン色を使って描画する	plt.scatter(データ列x, データ列y, color='tan')
棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
リストの文字列の位置をエラーなく求める	aList.index(element) if element in aList else -1
タプルの要素を小さい方からソートする	sorted(aTuple, reverse=False)
文字列の開始位置から終了位置までの範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
散布図の下三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
両端キューを要素を出す	deq.popleft()
データフレームの先頭の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
データ列間の平均絶対誤差を求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
散布図の色をコーラルにする	plt.scatter(データ列x, データ列y, color='coral')
パパイヤウィップ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
option: フォントの色をミディアムオーキッドに変更する	color = 'mediumorchid'
ダークシアグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
option: オールドレースを使用する	color = 'oldlace'
グラフに水平方向の実線を設定する	plt.axhline(y=0, linestyle='solid')
ファイルパスからバイナリストリームをオープンして]fとする	f = open(filepath, mode='rb')
散布図をrgbの大バツマーカーを用いて描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
横棒グラフをペルー色で描画する	plt.barh(データ列x, データ列y, color='peru')
線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
デフォルトでプロットをイイ感じに指定する	sns.set()
行列をリストから作る	np.array(aList)
コーンフラワーブルー色でヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
グラフで使用するx軸にラベルを付ける	plt.xlabel('x軸ラベル')
散布図に赤い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
線グラフの色をコーラルに変更する	plt.plot(データ列x, データ列y, color='coral')
option: 未入力値も無視しない	dropna = True
ベクトルを2次元1列に変形する	aArray.reshape(-1, 1)
データ列のヒストグラムを描画する	plt.hist(データ列)
符号なし８ビット整数型のゼロ埋めされた配列を作成する	np.zeros(要素数, dtype=np.uint8)
整数nを2進文字列にする	bin(n)[2:]
線グラフをトマト色を用いて描画する	plt.plot(データ列x, データ列y, color='tomato')
TSVファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
タイムスタンプデータを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
キーが辞書に存在しないとき、要素を追加する	aDict.setdefault(key, element)
パールゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='palegoldenrod')
ミディアムスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
スチールブルーにヒストグラムの色をする	plt.hist(データ列, color='steelblue')
option: ミディアムシアグリーン色を用いる	color = 'mediumseagreen'
エラーなく辞書から項目名の値を得る	aDict.get(key, None)
文字列の先頭から空白を取り除く	s.lstrip()
文字列の開始位置から終了位置の範囲で部分文字列の出現をカウントする	s.count(sub, start, end)
線形回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
イテラブルに列を続ける	itertools.chain(iterable, iterable2)
棒グラフをクリムゾン色を使って描画する	plt.bar(データ列x, データ列y, color='crimson')
散布図のダイアモンドマーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
データフレームのカラムの欠損値を直後の値で埋める	df[col].fillna(method='bfill')
eの乗数	math.exp(x)
データフレームを昇順に複数の列を用いてソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームから破壊的に重複した行を削除する	df.drop_duplicates(inplace=True)
option: 白にフォントの色を設定する	color = 'white'
棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
空の辞書を作る	{}
データ列の推移を色付きの点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ミディアムブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
二つの浮動小数点数が近似値	math.isclose(x, x2)
線グラフの色をアリスブルーにする	plt.plot(データ列x, データ列y, color='aliceblue')
文字列の右側からタブを消す	s.rstrip('\t')
グラフにy=0の破線を設定する	plt.axhline(y=0, linestyle='dashed')
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgrey')
グラフの凡例の位置を指定する	plt.legend(loc=(x, y))
option: 上三角マーカーを描画する	marker = '^'
実数の双曲線余弦	math.cosh(x)
パレットトルコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
ファイルからnという名前のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
データフレームのリストカラムを丸めて、整数にする	df[aList].round().astype(int)
データ列と配列についての散布図にrgbの上三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字列を部分文字列で二分し、後半の文字列を使う	s.partition(sub)[-1]
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
クラス分類をブースティングで行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
option: ダークゴールデンロッドを使う	color = 'darkgoldenrod'
リストとリストについて散布図を描画して、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
行列を転置する	aArray.T
文字列が文字列リストに存在する	s in aStringList
黄色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
データフレームから指定された列を抽出する	df[[column]]
ホワイトスモーク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
黒い下三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフをアリスブルー色として描画する	plt.plot(データ列x, データ列y, color='aliceblue')
散布図を描画する	plt.scatter(データ列x, データ列y)
色付きの破線で数列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
配列の各要素の積	np.multiply(aArray, aArray2)
データ列の中に文字列と文字列が存在するか調べる	ds.isin([value, value2])
データフレームの相関行列ピアソン相関係数を使って	df.corr(method='pearson')
ヒストグラムの線の種類を一点鎖線に変更する	plt.hist(データ列, linestyle='dashbot')
option: スチールブルー色を使う	color = 'steelblue'
option: グラフの色をオレンジに設定する	color = 'orange'
option: マーカーの色をホットピンクにする	markerfacecolor = 'hotpink'
データフレームを1000の位で丸めて整数にする	df.round(-3).astype(int)
ロイヤルブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='royalblue')
日付データからn時間を引く	aDate - datetime.timedelta(hours=n)
データフレームの標本標準偏差を求める	df.std()
辞書にマップの値を更新する	aDict.update(aDict2)
散布図をベージュ色で描画する	plt.scatter(データ列x, データ列y, color='beige')
ヒストグラムをインディアンレッド色で描画する	plt.hist(データ列, color='indianred')
横棒グラフをカーキ色で描画する	plt.barh(データ列x, データ列y, color='khaki')
option: ブルーバイオレットに色を変更する	color = 'blueviolet'
列の各データ値の出現数	df[col].value_counts()
散布図の色をペルーにする	plt.scatter(データ列x, データ列y, color='peru')
プラットホームはMacOSかどうか調べる	sys.platform.startswith('darwin')
シルバー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
散布図の右三角印の色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
十六進数文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
ロバストな線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
ミッドナイトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='midnightblue')
Pandasで、フォーマットfmtでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format=fmt)
部分集合か調べる	aSet.issubset(aSet2)
データフレームの中の列を分割数nでビン分割する	pd.cut(df[col], n)
ファイルパスをオープンして]、バイナリストリームを求める	open(filepath, mode='rb')
タブ区切りのファイルをヘッダを指定せず読み込む	pd.read_csv(filename, header=None)
データフレームの列を目的変数にする	目的変数 = df['列名']
棒グラフの色をブランチドアーモンドにする	plt.bar(データ列x, データ列y, color='blanchedalmond')
option: ラベンダーを使う	color = 'lavender'
数列とリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフの色をホワイトスモークに指定する	plt.plot(データ列x, データ列y, color='whitesmoke')
Pandasで、データフレームのカラムをタイムスタンプ型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
線グラフをゲインズボロ色で描画する	plt.plot(データ列x, データ列y, color='gainsboro')
データフレームの列の記述統計量を求める	df[col].describe()
ヒストグラムの色をダーク・スラテグレーに設定する	plt.hist(データ列, color='darkslategrey')
折れ線グラフのダイアモンドマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
コーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
ヒストグラムの色をサーモンに設定する	plt.hist(データ列, color='salmon')
文字列を走査し、パターンにマッチするか見る	re.search(pattern, s)
実数の角度を求める	math.degrees(x)
配列とリストについて散布図を描画して、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
横棒グラフの色を黄色にする	plt.barh(データ列x, データ列y, color='yellow')
線グラフの色をティールに設定する	plt.plot(データ列x, データ列y, color='teal')
横棒グラフの色をサドルブラウンにする	plt.barh(データ列x, データ列y, color='saddlebrown')
ビスク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
散布図をペールグリーン色として描画する	plt.scatter(データ列x, データ列y, color='palegreen')
集合の浅いコピー	aSet.copy()
t-SNEとして多次元データをパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームをにバイオリン図で描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
変数名を項目名として辞書	dict(name=element)
横棒グラフをゲインズボロ色として描画する	plt.barh(データ列x, データ列y, color='gainsboro')
破壊的に'A'列によってによってデータフレームをソートする	df.sort_values(by='A', inplace=True)
やわらかい青色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図を下三角マーカーを用いて描く	plt.plot(データ列x, データ列y, marker='v')
列の値ごとにデータフレームを集約して、グループごとの平均値を算出する	df.groupby(column).mean()
Pandasで、エポック秒の文字列から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
実数を実数で	x // y
ヒストグラムの色を赤に指定する	plt.hist(データ列, color='red')
データ列の空文字を未入力値に変換し、ドロップする	ds.replace('', np.nan).dropna()
数式の簡略化を行う	sympy.sympify(e)
双方向キューの先頭	deq[0]
ヒストグラムをアイボリー色として描画する	plt.hist(データ列, color='ivory')
棒グラフをスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='springgreen')
ディムグレーにヒストグラムの色を設定する	plt.hist(データ列, color='dimgray')
縦棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
ブラック色の散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
データフレームの列がxより小さい行を抽出する	df[df[column] < x]
データ列の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
紺碧色の線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
日付データからn分減算する	aDate - datetime.timedelta(minutes=n)
破壊的にデータフレームを列名リストでによって整列する	df.sort_values(by=column, inplace=True)
option: グラフの色を暗い赤に設定する	color = 'darkred'
散布図に左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
ユーザが整数を入力する	int(input())
異なるカラムをキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
二つのデータフレームを異なる列をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ふたつの集合に共通する要素からなる集合を求める	aSet.intersection(aSet2)
グラフの補足の位置を(x,y)に設定する	plt.legend(loc=(x, y))
ヒストグラムの色をパパイヤウィップに設定する	plt.hist(データ列, color='papayawhip')
ヒストグラムをスチールブルー色で描画する	plt.hist(データ列, color='steelblue')
データフレームをJSONLファイルに保存する	df.to_csv(filename, sep='\t')
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
floatの最大値を求める	sys.float_info.max
データ列が正規分布かどうか仮説検定する	scipy.stats.shapiro(データ列)
リストの先頭を取り除く	aList[1:]
option: カラムの名前を連番に変更する	header = None
option: フォントの色をブラックに設定する	color = 'black'
配列の標準偏差	np.std(aArray)
三つのデータフレームを横に連結する	pd.concat([df, df2, df3], axis=1)
option: グラフの色をナバホホワイトに変更する	color = 'navajowhite'
nの各桁の総和	sum(map(int, str(n)))
グラフの使途を画面に設定する	sns.set(context='notebook')
辞書をソートしてJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
ヒストグラムの色をターコイズに設定する	plt.hist(データ列, color='turquoise')
入力ストリームからn文字読み込む	f.read(n)
イテラブルの移り変わりを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
パウダーブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
折れ線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
線グラフを赤い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
散布図のダイアモンドマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
折れ線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
nが正の数かどうか調べる	n > 0
ファイルのファイル名	os.path.basename(filepath)
option: エンコーディングをBOM付きに指定する	encoding = 'utf_8_sig'
数値を白色で表示できる文字列に変換する	f'\033[37m{value}\033[0m'
データフレームを各列と列の組み合わせ毎にグループ分けし、最小値を求める	df.groupby([column, column2], as_index=False).min()
黒い左三角マーカーをリストと配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
スプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
option: パパイヤウィップ色を使用する	color = 'papayawhip'
線グラフの色をライトコーラルにセットする	plt.plot(データ列x, データ列y, color='lightcoral')
整数nのバイト長	(n.bit_length() + 7) // 8
サドルブラウン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
最大値・最小値で整数乱数を算出する	random.randint(最小値, 最大値)
折れ線グラフの色をオーキッドに指定する	plt.plot(データ列x, データ列y, color='orchid')
データフレームをJSONLファイルにWindowsで文字化けしないように保存する	df.to_csv(filename, encoding='utf_8_sig')
折れ線グラフの色をペルーに設定する	plt.plot(データ列x, データ列y, color='peru')
小数点数の床	math.floor(x)
データフレームのインデックスの一覧	df.index
白い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='w')
空のロッソ回帰モデルを新規作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
データフレームの列の欠損値を平均値で置き換える	df[col].fillna(df[col].mean())
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategrey')
一点鎖線でラインを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
日付データにn分分加算する	aDate + datetime.timedelta(minutes=n)
タイムスタンプデータにn日分、加算する	aDatetime + datetime.timedelta(days=n)
日付時刻データを浮動小数点数に変換する	aDatetime.timestamp()
ゲインズボロ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
等量でビン数nでデータフレームの中の列を分割する	pd.qcut(df[col], n)
黒い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
青紫色でヒストグラムを描画する	plt.hist(データ列, color='violet')
データフレームを表示するときヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
読み込みモードを用いてファイルをオープンする]	open(filepath, mode='r')
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightgreen')
横棒グラフの色をスプリンググリーンにする	plt.barh(データ列x, データ列y, color='springgreen')
ベージュ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
回帰分析をスタッキングで行う	sklearn.ensemble.StackingRegressor()
ファイルからベースファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
日付時刻データををn分後に進める	aDatetime + datetime.timedelta(minutes=n)
データフレームのカラムを百の位で四捨五入する	df[col].round(-2)
ライトグリーン色を使って棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームのそれぞれのグループの個数	df.groupby(column).count()
option: インディアンレッドを使う	color = 'indianred'
xの小数点以下'5'桁までをプリントする	print(':.5f'.format(x))
散布図をダイアモンドマーカーで描画する	plt.plot(データ列x, データ列y, marker='D')
散布図の左三角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
浮動小数点数のn乗	pow(x, n)
オプションで、標準出力に出力する	file = sys.stdout
データフレームの列を100の位で四捨五入する	df[col].round(-2)
棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
プロットのカラーパレットを濃くする	sns.set(pallete='deep')
nをn2だけ減少させる	n -= n2
データフレームの尖度	df.skew()
オブジェクトはリストか	isinstance(obj, list)
option: ダーク・スラテグレー色を使用する	color = 'darkslategrey'
データフレームを表示するとき、n列までデータフレームを表示できるようにする	pd.set_option('display.max_columns', n)
棒グラフをパパイヤウィップ色で描画する	plt.bar(データ列x, データ列y, color='papayawhip')
黒い四角マーカーを配列と数列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='s', c='k')
計算機イプシロン	sys.float_info.epsilon
nのバイト長を見る	(n.bit_length() + 7) // 8
ヒストグラムの上限下限を設定する	plt.hist(データ列, range=(start, end))
両端キューの末尾に値を付け加える	deq.append(element)
折れ線グラフの色をスラグレーにする	plt.plot(データ列x, データ列y, color='slategray')
文字列の先頭でパターンに複数行対応としてマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
option: グラフの色をダークターコイズに設定する	color = 'darkturquoise'
文字列のサフィックスが部分文字列か	s.endswith(sub)
環境がマックかどうか	sys.platform.startswith('darwin')
データフレームをJSONLファイルにTSVファイルで保存する	df.to_csv(filename, sep='\t')
マルーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='maroon')
データフレームを各列毎にグループ化し、、列の標準偏差を求める	df.groupby(column)[column2].std()
折れ線グラフの色をバリーウッドに設定する	plt.plot(データ列x, データ列y, color='burlywood')
option: インディアンレッドにグラフの色を設定する	color = 'indianred'
横棒グラフの色をパープルにする	plt.barh(データ列x, データ列y, color='purple')
日付データは日付データより先か判定する	aDate < aDate2
スノー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
散布図に三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
ダークオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
year年month月day日hour時minute分の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
散布図の左三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
データフレームの中にいくつ文字列が存在するかカウントする	df.isin([value]).sum()
nマイナスn2	n - n2
棒グラフの色をダークオレンジにする	plt.bar(データ列x, データ列y, color='darkorange')
新しいリッジ回帰モデルを用意する	model = sklearn.linear_model.Ridge(alpha=正則化項)
ヒストグラムの色をスカイブルーに変更する	plt.hist(データ列, color='skyblue')
データフレームをグループ化し、各列に対し標準偏差を求める	df.groupby(column)[column2].std()
3つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
濃いシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
イテラブルとイテラブルを連結する	itertools.chain(iterable, iterable2)
カラムの中にある文字列と文字列の合計をカウントする	ds.isin([value, value2]).sum()
折れ線グラフの色をフクシアに変更する	plt.plot(データ列x, データ列y, color='fuchsia')
option: フローラルホワイトにグラフの色を設定する	color = 'floralwhite'
データフレームの内の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
ふたつの集合の共通要素だけにする	aSet.intersection_update(aSet2)
ゴールド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
nがn2以上かどうか調べる	n >= n2
折れ線グラフをダークオリーブグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
文字列の右側から改行を取り除く	s.rstrip('\n')
折れ線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
データフレームを表示するとき表示できる列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
青緑色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
横棒グラフをライトシアン色で描画する	plt.barh(データ列x, データ列y, color='lightcyan')
データフレームを100の位で丸めて整数にする	df.round(-2).astype(int)
パーセント付きの円グラフを描く	plt.pie(データ列, startangle=90, autopct='%.2f%%')
折れ線グラフをアクア色で描画する	plt.plot(データ列x, データ列y, color='aqua')
横軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
ファイルをオープンして]、追加ストリームを使う	open(filepath, mode='a')
データフレームから数値データの列を抽出する	df.select_dtypes('number')
ヒストグラムの色をパールバイオレットレッドに指定する	plt.hist(データ列, color='palevioletred')
x座標の目盛りを対数に変更する	plt.xscale('log')
nをn2だけ増加させる	n += n2
シーケンスから新しいカウンタを作る	collections.Counter(iterable)
折れ線グラフに菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
ライトグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
両端キューのn番目を求める	deq[n]
option: ライトサーモン色を用いる	color = 'lightsalmon'
カテゴリデータ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
ミディアムスレートブルー色でヒストグラムを描画する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフを青い実線を使ってプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
データフレームを二つの列で大きい順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', data=df)
データフレームを列で集約して、それぞれのグループの個数を求める	df.groupby(column).count()
散布図をダークカーキ色で描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
データフレームのリストで指定されたカラムの相関行列をヒートマップを用いて描画する	sns.heatmap(df[aList].corr())
偽陰性を避けたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
option: グラフの色をベージュに指定する	color = 'beige'
横棒グラフをゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='goldenrod')
ダークバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
小麦色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='wheat')
散布図の色をグリーンイエローにする	plt.scatter(データ列x, データ列y, color='greenyellow')
データ列の空文字を欠損値に変換しドロップする	ds.replace('', np.nan).dropna()
折れ線グラフをライトコーラル色として描画する	plt.plot(データ列x, データ列y, color='lightcoral')
option: 色をスノーに設定する	color = 'snow'
何回まで再帰ができるかを調べる	sys.getrecursionlimit()
JSONLファイルにデータフレームをTSV形式で保存する	df.to_csv(filename, sep='\t')
青緑色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
PNGファイルとしてグラフを保存する	plt.savefig('foo.png')
データフレームの列をドロップして、更新する	df.drop(column, axis=1, inplace=True)
線グラフをオリベドラブ色を用いて描画する	plt.plot(データ列x, データ列y, color='olivedrab')
データフレームのカラムの欠損値をxで埋める	df[col].fillna(x)
ヒストグラムをブランチドアーモンド色で描画する	plt.hist(データ列, color='blanchedalmond')
TSVファイルをSJISで読む	pd.read_csv(filename, encoding='shift_jis')
棒グラフの色をアクアにする	plt.bar(データ列x, データ列y, color='aqua')
プログラムを正しく終了する	sys.exit(0)
データフレームの欠損値を最小値で置き換える	df.fillna(df.min())
辞書をチェーンマップにする	collections.ChainMap(aDict)
八進文字列をバイナリに変換する	int(s, 8).to_bytes(length=bytesize, byteorder='big')
文字列内にひとつでも大文字があるか調べる	any(c.isupper() for c in s)
一点鎖線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
多次元データを多次元尺度構成法で濃く次元に次元削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
ヒストグラムの色をオールドレースにセットする	plt.hist(データ列, color='oldlace')
正規分布による累積分布関数の逆関数を用いる	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
ヒストグラムの色をコーラルに変更する	plt.hist(データ列, color='coral')
３2ビット整数型の全要素を０で初期化した行列を初期化する	np.zeros(行数, 列数, dtype=np.int16)
複数の列によってデータフレームをソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
データ列間の平均二乗誤差を求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
スタッキングで回帰分析をする	sklearn.ensemble.StackingRegressor()
分数モジュールを使う	import fractions
ヒストグラムの色をライトブルーに設定する	plt.hist(データ列, color='lightblue')
option: グラフの色をスレートブルーに設定する	color = 'slateblue'
データフレームの列を折れ線プロットで可視化する	plt.plot(df[column], df[column])
イテラブルを累加したイテラブル	itertools.accumulate(iterable)
ミディアムオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
ピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
option: アリスブルー色を使う	color = 'aliceblue'
空の両端キュー	collections.deque()
日付時刻データは何月か知る	aDatetime.month
オレンジ色のヒストグラムを描画する	plt.hist(データ列, color='orange')
シーケンスを文字列リストに変換して、タブを用いて結合する	'\t'.join(map(str, iterable))
文字列内にひとつでも小文字があるかどうか調べる	any(c.islower() for c in s)
データフレームを二つの列で昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
rgbの星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームをTSVファイルから読む	pd.read_csv(filename, sep='\t', encoding='utf-8')
未初期化の配列を作る	np.empty(要素数, dtype=np.int)
暗い赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
データフレームの先頭n行を取り出す	df.head(n)
データフレームのリストカラムの欠損値を直後の値で埋める	df[aList].fillna(method='bfill')
文字列が印字できる	s.isprintable()
option: ライトブルーにグラフの色を設定する	color = 'lightblue'
サーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
option: ダークシアグリーン色を使う	color = 'darkseagreen'
棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
option: 線種を実線に指定する	linestyle = 'solid'
棒グラフの色をハニーデューにする	plt.bar(データ列x, データ列y, color='honeydew')
ヒストグラムをターコイズ色で描画する	plt.hist(データ列, color='turquoise')
等量でデータフレームの中のカラムをn個に分割する	pd.qcut(df[col], n)
折れ線グラフをミディアムバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
行列の行を選択する	aArray[行番号]
８進数字を全部求める	string.octdigits
多次元データを多次元尺度構成法を用いて濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
横棒グラフを青くする	plt.barh(データ列x, データ列y, color='b')
ファイルからn文字、読み込む	f.read(n)
Pythonのバージョン	sys.version
実数に実数をかける	x * y
データ列とリストの散布図を描画し、、文字列という補足用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
書き込むCSVの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
データフレームを列によって集計して各グループごとの標準偏差を求める	df.groupby(column).std()
リストと数列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
棒グラフをアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='aquamarine')
最大最小から配列	np.linspace(最小値, 最大値, 要素数)
右三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='>')
勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
option: フォントの色をホットピンクに変更する	color = 'hotpink'
データフレームのグループごとの個数	df.groupby(column).count()
データ列の中にある文字列と日付データの合計を数える	ds.isin([value, value2]).sum()
option: マーカーの色を白にする	markerfacecolor = 'white'
文字列の右側から空白を取り除く	s.rstrip(' ')
option: フォントの色をミディアムシアグリーンに指定する	color = 'mediumseagreen'
データフレームのリストカラムを四捨五入して、整数にする	df[aList].round().astype(int)
データ列の中にいくつ日付データが存在するかカウントする	ds.isin([value]).sum()
三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
文字列の接頭辞は部分文字列	s.startswith(sub)
データフレームを列によってソートして、更新する	df.sort_values(by=column, inplace=True)
集合にシーケンスの要素を全て追加する	aSet.update(iterable)
縦棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
列を両端キューに変換する	collections.deque(iterable)
バギングでクラス分類を行う	model = sklearn.ensemble.BaggingClassifier(n_estimators=10)
折れ線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
オプションでファイルを用いる	file = sys.open(filename, 'w')
実数から数を引く	x - y
文字列がタイトルケース	s.istitle()
データフレームの列と列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
散布図をミディアムオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
JSONファイルファイル名がか確認する	filename.endswith('.json')
ファイルを読み込み用にオープンする]	open(filepath, mode='r')
文字列中の片仮名を平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
ヒストグラムをオレンジレッド色で描画する	plt.hist(データ列, color='orangered')
nが一桁の数	0 <= n <= 9
配列の累積積	np.cumprod(aArray)
値が集合に含まれるか調べる	element in aSet
表の列がx以上の行を抽出する	df[df[column] >= x]
ヒストグラムの色を紺碧にセットする	plt.hist(データ列, color='azure')
折れ線グラフの三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
散布図をライトグリーン色として描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
多次元尺度構成法を用いて多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
イテラブルを文字列リストに変換して、部分文字列で連結する	sub.join(map(str, iterable))
リストとイテラブルについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: タブを区切り記号で使う	sep = '\t'
データを最大値と最小値として揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
リストとリストについての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
散布図をロイヤルブルー色で描画する	plt.scatter(データ列x, データ列y, color='royalblue')
option: 書き込みモードに指定する	mode = 'w'
データフレームの欠損値を前の行の値にする	df.fillna(method='ffill')
散布図を黄色色で描画する	plt.scatter(データ列x, データ列y, color='yellow')
データフレームの平均と信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
マゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
パラメータが0に近づくとき、数値の極限値を求める	sympy.limit(e, z, 0)
トマト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
リストをイミュータブルなセットに変換する	frozenset(iterable)
データフレームのカラムの中に存在する文字列との合計を数える	df[col].isin([value, value2]).sum()
折れ線グラフの色をパパイヤウィップに設定する	plt.plot(データ列x, データ列y, color='papayawhip')
option: フォントの色を濃い青に設定する	color = 'darkblue'
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
横棒グラフをオリベドラブ色として描画する	plt.barh(データ列x, データ列y, color='olivedrab')
異なる列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
実数を複素数に変換する	complex(x)
リストと数列について散布図を描画して、マーカーを四角に指定する	plt.plot(データ列x, データ列y, marker='s')
配列をフラットにする	aArray.flatten()
日付時刻データが土曜日かテストする	aDatetime.weekday() == 5
データフレームをグループ化し、列に対し最大値を求める	df.groupby(column)[column2].max()
列を文字列リストに変換して、部分文字列でつなげる	sub.join(map(str, iterable))
データフレームのNaNがある箇所に色を付ける	df.style.highlight_null()
線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
1からnまでの整数リストを使う	list(range(1, n+1))
文字列の接尾辞が部分文字列か	s.endswith(sub)
実数以下の最大の整数	math.floor(x)
スカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
散布図の色をアンティークホワイトにする	plt.scatter(データ列x, データ列y, color='antiquewhite')
横棒グラフをミディアムオーキッド色で描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
データフレームを列によって集約する	df.groupby(column)
横棒グラフを描画してバーの幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
横棒グラフの色をダークオーキッドにする	plt.barh(データ列x, データ列y, color='darkorchid')
option: 欠損値を先頭に来るようにする	na_position = 'first'
両端キューの要素をインプレースに反転する	deq.reverse()
データフレームの棒グラフを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
折れ線グラフをダークカーキ色で描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
グラフの色を淡くする	sns.set(pallete='muted')
文字列を太字にする	f'\033[1m{value}\033[0m'
データフレームの列の文字列が文字列が含まれない行を選択する	df[not df[column].str.contains(s)]
キーが辞書上で未定義か調べる	key not in aDict
n進文字列をbytesizeバイトのバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
線グラフをクリムゾン色として描画する	plt.plot(データ列x, データ列y, color='crimson')
折れ線グラフの色をコーンズシルクに設定する	plt.plot(データ列x, データ列y, color='cornsilk')
数列と配列の散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
折れ線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
整数nがタプルのいづれかか確認する	n in aTuple
棒グラフの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
棒グラフをフォレストグリーン色で描画する	plt.bar(データ列x, データ列y, color='forestgreen')
棒グラフを濃いシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
'A'列によって昇順にデータフレームをソートして更新する	df.sort_values(by='A', ascending=True, inplace=True)
グラフに被らない場所に凡例を表示する	plt.legend(loc='best')
option: マーカーの色をダークゴールデンロッドにする	markerfacecolor = 'darkgoldenrod'
ベクトルと同じ大きさの空ベクトルを作る	np.empty_like(aArray)
option: エンコーディングをSJISに設定する	encoding = 'shift_jis'
option: グラフの色をラベンダーブラッシュに設定する	color = 'lavenderblush'
散布図を赤いポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフのマーカーを丸印にする	plt.plot(データ列x, データ列y, marker='o')
文字コードtextを用いて書き込みできるようにファイルをオープンする]	open(filepath, mode='w', encoding=text)
縦棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
折れ線グラフをバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
ゼロ埋めされた整数型の配列を作る	np.zeros(要素数, dtype=np.int)
数値のインテグラルを計算する	sympy.integrate(e)
散布図を耐火レンガ色で描画する	plt.scatter(データ列x, データ列y, color='firebrick')
線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
JSONファイルの入力を辞書に変換する	json.load(fin)
ファイルから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
線グラフの色をラベンダーブラッシュに変更する	plt.plot(データ列x, データ列y, color='lavenderblush')
列をキーにして二つのデータフレームをジョインする	pd.merge(df, df2, on=column)
データフレームのカラムをカテゴリデータに変換する	df[col].astype(object)
nを8進表現に変換する	oct(n)
データフレームのカラムの欠損値を後の行の値で埋める	df[col].fillna(method='bfill')
日付時刻データからn分減らす	aDatetime - datetime.timedelta(minutes=n)
散布図をアクアマリン色を用いて描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
数列と数列についての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
データフレームのn行まで取り出す	df[:n]
プログラムの実行を正しく止める	sys.exit(0)
辞書にキーワード引数で更新する	aDict.update(**kwargs)
nがn2未満、またはn3以上か確認する	n < n2 or n >= n3
シーケンスと列をペア化する	itertools.zip_longest(iterable, iterable2)
ダークゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
配列と同じ大きさの空行列を作る	np.empty_like(aArray)
データフレームの列の各値の出現数	df[col].value_counts()
ダークオリーブグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
折れ線グラフのマーカーをバツにする	plt.plot(データ列x, データ列y, marker='x')
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgray')
データフレームを'A'列によってによって破壊的にソートする	df.sort_values(by='A', inplace=True)
データフレームは正規分布からどの程度、尖っているか見る	df.skew()
上限nの両端キューをシーケンスから作成する	collections.deque(iterable, maxlen=n)
ドジャーブルー色でヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
リストの値のみ表示する	print(*aList)
商と余りを同時に算出する	divmod(x, y)
データ列の四分位を可視化する	plt.boxplot(データ列)
カテゴリで色分けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
下三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
スピアマン順位相関係数としてデータフレームの相関行列を算出する	df.corr(method='spearman')
ピアソン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
特異値分解の準備をする	model = sklearn.decomposition.TruncatedSVD(n_components=n)
ヒストグラムをレベッカパープル色で描画する	plt.hist(データ列, color='rebeccapurple')
折れ線グラフの右三角印を青くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
散布図に右三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをスプリンググリーン色として描画する	plt.plot(データ列x, データ列y, color='springgreen')
データ列をインポートする	import pandas as pd
平均値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].mean())
データフレームの列と列をドロップする	df.drop([column, column2], axis=1)
浮動小数点数の逆余弦を計算する	math.acos(x)
折れ線グラフの菱形マーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
散布図を下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v')
散布図の色をスノーにする	plt.scatter(データ列x, データ列y, color='snow')
イテラブルの長さnの順列を得る	itertools.permutations(iterable, n)
モデルの予測値と目的変数を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ファイルからディレクトリ名取り出す	os.path.dirname(filepath)
文字列の後ろから部分文字列を探す	s.rfind(sub)
データフレームの列の中に文字列と日付データがいくつ存在するか数える	df[col].isin([value, value2]).sum()
パープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
グラフに短い説明を追記する	plt.legend(['凡例A', '凡例B'])
データフレームを列によってまとめたグループ	df.groupby(column)
辞書の項目名を列挙する	aDict.keys()
2つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
UTF8としてファイルを開く]	open(filepath, encoding='utf-8')
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
バリーウッド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
データフレームを列でグループ化して各グループごとの件数を知る	df.groupby(column).size()
散布図の色をスチールブルーにする	plt.scatter(データ列x, データ列y, color='steelblue')
横棒グラフをミディアムバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
データフレームの列の値がx以上かつx2未満のデータを抽出する	df[(x <= df[column]) & (df[column] < x2)]
折れ線グラフの下三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
文字列が全て十進数字か	s.isdecimal()
数式を簡略化する	sympy.sympify(e)
Pandasのバージョンを見る	print(pd.__version__)
オーキッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
データ列が正規分布に従うかどうか仮説検定する	scipy.stats.shapiro(データ列)
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
文字列が全てアスキー文字か調べる	s.isascii()
プロットの背景色を暗くする	sns.set(style='darkgrid')
データフレームの行を振り直す	df.reset_index()
ゴールド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
文字列を文字コード列に変換する	[ord(ch) for ch in s]
option: グラフの色をラベンダーブラッシュに変更する	color = 'lavenderblush'
タイムスタンプデータが日曜日か調べる	aDatetime.weekday() == 6
線グラフをダークブルー色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
文字列内にひとつでもアスキー文字が含まれるか調べる	any(c.isascii() for c in s)
文字列を末尾から部分文字列で分割する	s.rsplit(sub)
データフレームを各列毎に集約して、列の最大値を計算する	df.groupby(column)[column2].max()
カラムの中に文字列があるか	ds.isin([value])
データフレームの列の値がxでない行を消す	df[df[column] == x]
全要素を0で初期化した行列	np.zeros(要素数)
データ列をreplにまとめて正規表現で置き換える	ds.replace(pattern, repl, regex=True)
多次元データを特異値分解を用いてパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
本日をタプルに変換する	datetime.datetime.today().timetuple()
option: 色をスノーに変更する	color = 'snow'
新しいロッソ回帰モデルを作る	model = sklearn.linear_model.Rosso(alpha=正則化項)
option: グラフの色をダークサーモンに設定する	color = 'darksalmon'
折れ線グラフの下三角印を黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
option: ミディアムブルーにグラフの色を指定する	color = 'mediumblue'
option: フォントの色をコーンズシルクに設定する	color = 'cornsilk'
貝殻色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
option: マーカーの色をグレーにする	markerfacecolor = 'grey'
ヒストグラムの色をピンクにする	plt.hist(データ列, color='pink')
折れ線グラフのポイント印の色を変える	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
オブジェクトは関数か調べる	callable(obj)
散布図の下三角マーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
横棒グラフをフォレストグリーン色で描画する	plt.barh(データ列x, データ列y, color='forestgreen')
散布図の下三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
散布図の色をダークマゼンタにする	plt.scatter(データ列x, データ列y, color='darkmagenta')
データフレームのリストカラムの最頻値を求める	df[aList].mode()
option: 線種を点線に指定する	linestyle = 'dotted'
横棒グラフをプロットして、バーの縦幅を変更する	plt.barh(ラベル列, データ列, width=0.5)
散布図の印を赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
n個に配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
要素がマッピングの値として含まれているか調べる	element in aDict.values()
rgbに横棒グラフの色を変更する	plt.barh(ラベル列, データ列, color=rgb)
文字列を白色でプリントする	print(f'\033[37m{value}\033[0m')
ライトシアン色のヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
リストとリストについての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
シルバー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
日付をインポートする	import datetime
option: 大バツ印を使う	marker = 'X'
散布図の色をダークオレンジにする	plt.scatter(データ列x, データ列y, color='darkorange')
散布図の三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
見やすいグラフを使用する	import seaborn as sns
棒グラフの色をピーチパフにする	plt.bar(データ列x, データ列y, color='peachpuff')
線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
リストの末尾からn番目以前の部分を取り出す	aList[:-n]
ヒストグラムの色をライトスカイブルーに指定する	plt.hist(データ列, color='lightskyblue')
文字列の先頭から空白やタブを除く	s.lstrip()
文字列の終了位置より前に部分文字列が含まれる	s.find(sub, 0, end) != -1
データフレームのn行目を取り出す	df.loc[n]
散布図の下三角マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
散布図の色をオレンジにする	plt.scatter(データ列x, データ列y, color='orange')
２つの実行結果をタブで区切ってプリントする	print(value, value2, sep='\t')
データフレームを列を用いて整列し、上の方n件を取り出す	df.sort_values(columns).head(n)
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
option: 色の透明度を設定する	alpha = 0.5
三変数の最小値を求める	min(x, y, z)
データフレームの列と列に重複があれば削除する	df.drop_duplicates(subset=column)
折れ線グラフをインディアンレッド色で描画する	plt.plot(データ列x, データ列y, color='indianred')
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
オレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
データフレームが正規分布からどの程度尖っているか見る	df.skew()
折れ線グラフの丸印の大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
ライトゴールドロディイエロー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
２つのデータフレームを異なる列をキーにして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データフレームを列によってソートして、新しいインデックスを加える	df.sort_values(columns).reset_index()
文字をASCIIコードに変換する	ord(ch)
集合にイテラブルの要素を全て追加する	aSet.update(iterable)
全要素を０で初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
線グラフをアクアマリン色として描画する	plt.plot(データ列x, データ列y, color='aquamarine')
折れ線グラフの色をイエローグリーンに設定する	plt.plot(データ列x, データ列y, color='yellowgreen')
散布図に大バツマーカーを加える	plt.scatter(データ列x, データ列y, marker='X')
散布図の色をブルーバイオレットにする	plt.scatter(データ列x, データ列y, color='blueviolet')
option: マーカーの色をダークサーモンにする	markerfacecolor = 'darksalmon'
イエローグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
散布図を三角印で描画する	plt.scatter(データ列x, データ列y, marker='^')
列で表データをまとめた表	df.groupby(column)
散布図に赤い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
整数nがセットのいづれかかどうか調べる	n in aSet
折れ線グラフの色をパープルにセットする	plt.plot(データ列x, データ列y, color='purple')
リストとリストについての散布図に左三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='<')
カテゴリで色付けして、データフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
データフレームの中に文字列と日付データが存在するかどうか調べる	df.isin([value, value2])
日付データからn秒分、減算する	aDate - datetime.timedelta(seconds=n)
日付データををn日後に進める	aDate + datetime.timedelta(days=n)
散布図の四角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
option: コーンズシルクを使う	color = 'cornsilk'
散布図の色をミディアムシアグリーンにする	plt.scatter(データ列x, データ列y, color='mediumseagreen')
線形回帰モデルのバイアス	model.intercept_
グラフに鉛直方向の破線をつける	plt.axvline(x=0, linestyle='dashed')
option: 丸マーカーを使う	marker = 'o'
両端キューのstart番目からend番目の部分要素	collections.deque(itertools.islice(deq, start, end))
データフレームをにバイオリン図を用いて図示する	sns.violinplot(x='カテゴリ列', y='列', data=df)
イテラブルのイミュータブルな集合を使う	frozenset(iterable)
散布図の右三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
リッジ回帰分析の準備をする	model = sklearn.linear_model.Ridge(alpha=正則化項)
イテラブルをダミー変数に変換する	pd.get_dummies(iterable)
ファイルから書き込みストリームをオープンして]fとする	f = open(filepath, mode='w')
変数を水色にする	f'\033[36m{value}\033[0m'
オプションで、標準出力を出力にする	file = sys.stdout
日付時刻データと日付時刻データの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()
エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
3つのデータフレームを縦向きに連結する	pd.concat([df, df2, df3], axis=0)
折れ線グラフを赤い破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
タプルの値を昇順に並べる	sorted(aTuple, reverse=True)
線形モデルの切片を見る	model.intercept_
パラメータがマイナス無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, -oo)
ビン数nでデータフレームの中の列を等量でビン分割する	pd.qcut(df[col], n)
クラスのサブクラス	issubclass(サブクラス, クラス)
ライトコーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcoral')
オブジェクトがタプルの要素	element in aTuple
プロットからグリッド線を消す	plt.grid(False)
折れ線グラフの色をダークシアンにする	plt.plot(データ列x, データ列y, color='darkcyan')
ファイルを読み込みモードを用いてオープンして]、fとする	f = open(filepath, mode='r')
option: ブランチドアーモンド色を使う	color = 'blanchedalmond'
カウンタの全数を使う	aCounter.total()
線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
線グラフを淡いピンク色色として描画する	plt.plot(データ列x, データ列y, color='lightpink')
線グラフの色をカデットブルーに指定する	plt.plot(データ列x, データ列y, color='cadetblue')
実数とyのノルム	math.hypot(x, y)
ファイルをSJISとして書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
複数の列によってによって降順にデータフレームを整列する	df.sort_values(by=column, ascending=False)
option: マゼンタを用いる	color = 'magenta'
日付時刻データの日数	aDatetime.day
横棒グラフをナバホホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='navajowhite')
一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: バイナリモードに設定する	mode = 'rb'
棒グラフを黄色くする	plt.bar(データ列x, データ列y, color='y')
イテラブルの長さを制限する	collections.deque(iterable, maxlen=n)
option: グラフの色をレモンシフォンに設定する	color = 'lemonchiffon'
浮動小数点数から整数を減ずる	x - y
キーが辞書に存在しているいるか調べる	key not in aDict
option: グラフの色をスカイブルーにセットする	color = 'skyblue'
リストとリストについての散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
リストのn番目に文字列を差し込む	aList.insert(n, element)
直後の値でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(method='bfill')
散布図のマーカーを丸印にする	plt.scatter(データ列x, データ列y, marker='o')
option: ▼マーカーを使う	marker = 'v'
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を求める	df.groupby([column, column2], as_index=False).max()
クラス分類の予測精度をヒートマップとして確認する	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ブルーバイオレット色でヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
縦軸だけグリッド線	plt.grid(axis='y')
横棒グラフをコーンフラワーブルー色として描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
ファイルパスをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
二つのデータフレームを異なる列をキーとしてジョインする	pd.merge(df, df2, left_on='A', right_on='B')
空のチェーンマップ	collections.ChainMap()
表のn行以降抽出する	df[n:]
パールゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
option: ホワイトスモーク色を使う	color = 'whitesmoke'
データフレームのカラムの中に含まれるの合計を数える	df[col].isin([value]).sum()
文字列中にひとつでも非小文字が含まれる	any(not c.islower() for c in s)
新しい文字列に文字列中の部分文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
折れ線グラフに青い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームをグループ化し各列に対し最大値を求める	df.groupby(column)[column2].max()
データフレームからカテゴリデータの列を取り出す	df.select_dtypes('object')
ベージュ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
線グラフの色をミディアムオーキッドにセットする	plt.plot(データ列x, データ列y, color='mediumorchid')
option: ダークカーキ色を使う	color = 'darkkhaki'
ヒストグラムをタン色で描画する	plt.hist(データ列, color='tan')
変数について数式の微分を行う	sympy.diff(e, z)
ヒストグラムを貝殻色で描画する	plt.hist(データ列, color='seashell')
L1ノルムとしてデータを正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
1文字だけ標準入力から読み込む	sys.stdin.read(1)
実数以上の最小の整数	math.ceil(x)
棒グラフの色をダークグリーンにする	plt.bar(データ列x, データ列y, color='darkgreen')
線グラフの色をミディアムシアグリーンにセットする	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームのリスト列の標本標準偏差	df[aList].std()
折れ線グラフの色をコーラルにセットする	plt.plot(データ列x, データ列y, color='coral')
文字列を黄色にする	f'\033[33m{value}\033[0m'
ヒストグラムの色を白に変更する	plt.hist(データ列, color='white')
リストの平均値を算出する	sum(aList)/len(aList)
データ列の中に文字列と日付データが存在する	ds.isin([value, value2])
ダイアモンドマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
プロットの短い説明の位置を指定する	plt.legend(loc=(x, y))
表データを複数の列によってを用いて降順に並べ直す	df.sort_values(by=column, ascending=False)
rgbのバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
棒グラフをペールグリーン色として描画する	plt.bar(データ列x, データ列y, color='palegreen')
リストとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
横棒グラフをマゼンタ色で描画する	plt.barh(データ列x, データ列y, color='magenta')
散布図をスラグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='slategrey')
リストとリストについて散布図を描画して、マーカーをポイントに変更する	plt.plot(データ列x, データ列y, marker='.')
データ列の折れ線グラフを右三角印で描画する	plt.plot(データ列x, データ列y, marker='>')
ライトスチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
ヒストグラムの色をゴールドに設定する	plt.hist(データ列, color='gold')
option: マーカーの色をライムグリーンにする	markerfacecolor = 'limegreen'
option: マーカーの色をダークオリーブグリーンにする	markerfacecolor = 'darkolivegreen'
option: ピンク色を使う	color = 'pink'
ヒストグラムを破線を用いて描く	plt.hist(データ列, linestyle='dashed')
option: ダークグレー色を使う	color = 'darkgrey'
横棒グラフをミディアムシアグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
データ列を３つ並べて柱状図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームのリストカラムを小数点以下n桁で丸める	df[aList].round(n)
タプルの最後を取り除く	aTuple[:-1]
文字列が全て小文字	s.islower()
ゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
白色の線グラフを描画する	plt.plot(データ列x, データ列y, color='white')
option: ホワイト色を用いる	color = 'white'
データを最大値で正規化を行う	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
データフレームの列と列を削除する	df.drop([column, column2], axis=1)
散布図の色をスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='springgreen')
データ列とリストの散布図に凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
リネン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='linen')
散布図の色をライトイエローにする	plt.scatter(データ列x, データ列y, color='lightyellow')
横軸の目盛を非表示にする	plt.xticks([])
option: ダークオリーブグリーンを用いる	color = 'darkolivegreen'
線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
トマト色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
散布図の色をパレットトルコイズにする	plt.scatter(データ列x, データ列y, color='paleturquoise')
列にイテラブルを続ける	itertools.chain(iterable, iterable2)
散布図に黒い三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームとデータ列を横に合体させる	pd.concat([df, ds], axis=1)
行列を変形する	aArray.reshape(行数, 列数)
文字列の接尾辞から部分文字列を取り除く	s.removesuffix(sub)
タン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
文字列内に英字が含まれる	any(c.isalpha() for c in s)
折れ線グラフを淡いピンク色色で描画する	plt.plot(データ列x, データ列y, color='lightpink')
全ての印字可能な文字	string.printable
option: フォントの色をダークグレーに変更する	color = 'darkgray'
nをn2で割った結果を切り上げる	(n + n2 - 1) // n2
データフレームの内容を見る	df.head()
データフレームを列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
タイムスタンプデータからn週間分、減らす	aDatetime - datetime.timedelta(weeks=n)
データフレームから指定された列名一覧の列を選択する	df[columns]
標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
データフレームを関数の値によってグループ化し、、列挙する	[(name, group) for name, group in df.groupby(関数)]
option: 丸マーカーを描画する	marker = 'o'
辞書の値を列挙する	aDict.values()
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
リスト内の要素は少なくともひとつ真か調べる	any(aList)
散布図に星マーカーを使う	plt.scatter(データ列x, データ列y, marker='*')
今日のローカルな日付を求める	datetime.date.today()
データ列を100の位で丸める	ds.round(-2)
散布図の星印を赤色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
ペアリストpairsからカウンタを構築する	collections.Counter(dict(pairs))
ペールグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
ミディアムアクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
浮動小数点数を切り上げて整数に変換する	math.ceil(x)
マップにタプルの値を更新する	aDict.update(aDict2)
線グラフをダークカーキ色として描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
整数nを2進数表現にする	bin(n)
文字列が全て英数字	s.isalnum()
散布図の下三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
複数の列で小さい順にデータフレームを並べる	df.sort_values(by=column, ascending=True)
ミディアムスプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
JSONフォーマットのバイト列を辞書にする	json.loads(b.decode('unicode-escape'))
データフレームの列を最初のカテゴリーを無視し、ワンホット・ベクトルに変換する	pd.get_dummies(df[column], drop_first=True)
option: マーカーの色をブランチドアーモンドにする	markerfacecolor = 'blanchedalmond'
データを最大最小で揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
文字列の終了位置以前に部分文字列が含まれない	s.find(sub, 0, end) == -1
データフレームの列名一覧で指定された列を落とす	df.drop(columns, axis=1)
折れ線グラフの色をコーンフラワーブルーに設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
リストとリストについて散布図を描いて、ポイントマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
カウンタの全カウントを見る	aCounter.total()
データフレームを二つの列を用いて小さい順に整列する	df.sort_values(by=['A', 'B'], ascending=True)
文字列の中のASCII限定として正規表現による全てのマッチを見る	re.findall(pattern, s, flags=re.ASCI)
二つの文字列を表示する	print(value, value2)
棒グラフをディムグレー色を使って描画する	plt.bar(データ列x, データ列y, color='dimgrey')
列の文字列をNaNにする	ds.replace(s, np.nan)
符号付きでnをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
文字列内にひとつでもASCII文字が含まれる	any(c.isascii() for c in s)
赤い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ヒストグラムをミスティローズ色として描画する	plt.hist(データ列, color='mistyrose')
自然数個からk個取り出したときの順列の総数	math.perm(n, k)
ヒストグラムをホットピンク色で描画する	plt.hist(データ列, color='hotpink')
モカシン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='moccasin')
t分布型確率的近傍埋め込み法を用いて濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
実数の三乗	x ** 3
文字列は平仮名か調べる	('ぁ' <= ch <= 'ん')
文字列を最初の部分文字列で二つに分ける	s.partition(sub)
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
option: スラグレー色を使う	color = 'slategray'
横軸を対数に変更する	plt.xscale('log')
集合から全ての要素を消す	aSet.clear()
棒グラフをマゼンタ色として描画する	plt.bar(データ列x, データ列y, color='magenta')
２つのデータ列の残差を散布図としてプロットする	sns.residplot(x=データ列, y=データ列)
データフレームを列を用いてソートし、、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
折れ線グラフの色をライトサーモンに変更する	plt.plot(データ列x, データ列y, color='lightsalmon')
折れ線グラフの色をロイヤルブルーに設定する	plt.plot(データ列x, データ列y, color='royalblue')
現在が何時か知る	datetime.date.today().hour
ヒストグラムの色をゴーストホワイトに指定する	plt.hist(データ列, color='ghostwhite')
データフレームのリストカラムのモード	df[aList].mode()
文字列のプレフィックスは部分文字列か調べる	s.startswith(sub)
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgrey')
文字列を文字コードエスケープでバイト列にする	s.encode(encoding='unicode_escape')
折れ線グラフをフクシア色として描画する	plt.plot(データ列x, データ列y, color='fuchsia')
棒グラフをオレンジ色で描画する	plt.bar(データ列x, データ列y, color='orange')
n掛けるn2	n * n2
黒いポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
option: 色をダークオーキッドに指定する	color = 'darkorchid'
リストとリストについて散布図を描画して右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: フォントの色をトマトに指定する	color = 'tomato'
組が全て真かどうか調べる	all(aTuple)
散布図の丸印の大きさを変える	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
option: グラフの色を黄色に指定する	color = 'yellow'
折れ線グラフの色をゲインズボロに変更する	plt.plot(データ列x, データ列y, color='gainsboro')
ライトサーモン色でヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
option: ミディアムバイオレットレッドを使用する	color = 'mediumvioletred'
データフレームからランダムにn行を抽出する	df.sample(n)
縦軸の目盛を対数に変更する	plt.yscale('log')
折れ線グラフのマーカーを三角印にする	plt.plot(データ列x, データ列y, marker='^')
ミディアムブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
二進文字列をbytesizeバイトのバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
棒グラフをコーンズシルク色を用いて描画する	plt.bar(データ列x, データ列y, color='cornsilk')
カウンタからイテラブルを出現回数して引く	aCounter.subtract(iterable)
option: SJISを使う	encoding = 'shift_jis'
日付データの日数を使う	aDate.day
日付データをタプルに変換する	aDate.timetuple()
nからn2までの整数リスト	list(range(n, n2+1))
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
Pandasで、データ列を日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
二つのデータフレームを列'A'と列'B'をキーにして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
今日のタイムスタンプを使う	datetime.datetime.today()
option: マーカーの色をミディアムバイオレットレッドにする	markerfacecolor = 'mediumvioletred'
コーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
リネン色を用いてヒストグラムを描画する	plt.hist(データ列, color='linen')
イテラブルをセットに変換する	set(iterable)
nが3の倍数か	n % 3 == 0
数値の変数に数式を代入する	e.subs(z, e2)
散布図に黒いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
日付データををn時間後に進める	aDate + datetime.timedelta(hours=n)
散布図のマーカーの太さを変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
散布図をパープル色で描画する	plt.scatter(データ列x, データ列y, color='purple')
折れ線グラフの右三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
グラフの中の縦軸にキャプションを設定する	plt.ylabel('y軸ラベル')
ロージーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
option: バイナリモードを使用する	mode = 'rb'
カウンタを辞書として更新する	aCounter.update(aDict)
行列の逆行列	np.linalg.inv(aArray)
商と余りを同時に計算する	divmod(x, y)
カウンタの下位を列挙する	aCounter.most_common()[:-n-1:-1]
ファイルをバイナリ用に開いて]、fとする	f = open(filepath, mode='rb')
一点鎖線として折れ線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
データ列が何年か確認する	ds.dt.year
リストをひとつ置きに抽出する	aList[::2]
横棒グラフをダークシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
散布図をミントクリーム色として描画する	plt.scatter(データ列x, データ列y, color='mintcream')
折れ線グラフの色をベージュに指定する	plt.plot(データ列x, データ列y, color='beige')
option: 印の大きさを設定する	markersize = 2.0
nがn2未満またはn3以上か調べる	n < n2 or n >= n3
リストの変遷を色付きの破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
配列と配列について散布図を描いて、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
モカシン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
ヒストグラムの色をオリベドラブに設定する	plt.hist(データ列, color='olivedrab')
折れ線グラフをミントクリーム色で描画する	plt.plot(データ列x, データ列y, color='mintcream')
黒い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
タプルをカンマ区切りで表示する	print(*aTuple, sep=',')
オブジェクトは論理値型のインスタンスか調べる	isinstance(obj, bool)
正規分布によるパーセント・ポイント関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
折れ線グラフの色をトマトに変更する	plt.plot(データ列x, データ列y, color='tomato')
ヒストグラムの色をベージュに設定する	plt.hist(データ列, color='beige')
実数がNaNか調べる	math.isnan(x)
数値を緑色化する	f'\033[32m{value}\033[0m'
データフレームのカラムの中の未入力値の合計を数える	df[col].isna().sum()
実数を実数で除算する	x / y
データフレームの列を型に変換する	df[col] = df[col].astype(ty)
カラーテーマを全般的に明るくする	sns.set(pallete='bright')
タプルとタプルを加える	aTuple + aTuple2
正弦の逆数	math.asin(x)
横棒グラフを淡いピンク色色で描画する	plt.barh(データ列x, データ列y, color='lightpink')
散布図をホワイトスモーク色で描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
データフレームのカラム名を指定された列名リストに置き換える	df.columns = columns
小文字列	string.ascii_lowercase
全ての８進数字	string.octdigits
耐火レンガ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
option: バッファのサイズを大きくする	buffering = 4096
横棒グラフをナバホホワイト色で描画する	plt.barh(データ列x, データ列y, color='navajowhite')
イテラブルとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
エンコーディング	sys.getdefaultencoding()
赤い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
黄色い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='y')
折れ線グラフをモカシン色で描画する	plt.plot(データ列x, データ列y, color='moccasin')
データフレームを各列と列の組み合わせ毎にグループ化し、、分散を計算する	df.groupby([column, column2], as_index=False).var()
アイボリーにヒストグラムの色を設定する	plt.hist(データ列, color='ivory')
option: グラフの色をカーキにする	color = 'khaki'
文字列中にひとつでも非大文字が含まれるか確認する	any(not c.isupper() for c in s)
横棒グラフをライトスチールブルー色として描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
データフレームを二つの列にグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
散布図の色をドジャーブルーにする	plt.scatter(データ列x, データ列y, color='dodgerblue')
オブジェクトに属性があるか	hasattr(obj, プロパティ名)
ベクトルから重複を除いた配列を作る	np.unique(aArray)
集合から何でもいいから一つ取り出す	aSet.pop()
数値を簡単化する	sympy.sympify(e)
ヒストグラムをパープル色を使って描画する	plt.hist(データ列, color='purple')
イテラブルをイミュータブルな集合に変換する	frozenset(iterable)
棒グラフの色をブラックにする	plt.bar(データ列x, データ列y, color='black')
UTF8としてファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding='utf-8')
折れ線グラフの四角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
折れ線グラフのバツ印の大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategray')
折れ線グラフのクロスマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
データ列が正規分布に従うかどうか調べる	scipy.stats.shapiro(データ列)
データフレームを複数の列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
option: 追加モードを用いる	mode = 'a'
option: ミスティローズ色を用いる	color = 'mistyrose'
線グラフの色をダークスラテグレーに変更する	plt.plot(データ列x, データ列y, color='darkslategray')
リストとイテラブルについて散布図を描画し、、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
横棒グラフを紺色で描画する	plt.barh(データ列x, データ列y, color='darkblue')
オブジェクトがリストの要素でないか判定する	element not in aList
折れ線グラフをブルーバイオレット色で描画する	plt.plot(データ列x, データ列y, color='blueviolet')
文字のASCIIコード	ord(ch)
文字列の中の正規表現による全てのマッチを使う	re.findall(pattern, s)
プロットのパレットを色差別なくする	sns.set(pallete='colorblind')
散布図にrgbのバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列の最後からタブを除く	s.rstrip('\t')
要素が全て1の配列	np.ones(要素数, dtype=np.int)
リストと配列について散布図を描画して、ダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
今日が日曜日かどうか	datetime.datetime.today().weekday() == 6
ダークオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
日付データは日付データより遅いか調べる	aDate > aDate2
オールドレース色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
文字列の最後から範囲を指定して部分文字列を探す	s.find(sub, start, end)
回帰分析を確率的勾配降下として行う	model = sklearn.linear_model.SGDRegressor()
データフレームの列の平均値	df[col].mean()
ヒストグラムをダークグリーン色で描画する	plt.hist(データ列, color='darkgreen')
日付時刻データにn日分加算する	aDatetime + datetime.timedelta(days=n)
縦棒グラフをプロットしてバーの幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
折れ線グラフをサーモン色として描画する	plt.plot(データ列x, データ列y, color='salmon')
黒い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
ふたつの集合のいずれか一方だけの集合を見る	aSet.symmetric_difference(aSet2)
n割るn2を切り上げる	(n + n2 - 1) // n2
カテゴリで色付けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
option: グリーンに色をセットする	color = 'green'
option: オールドレースにフォントの色をする	color = 'oldlace'
列を文字列に変換して、タブで一つにする	'\t'.join(map(str, iterable))
棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
行列のユニークな要素とその個数を計算する	u, counts = np.unique(aArray, return_counts=True)
リストとリストについての散布図に黒い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
option: ミディアムブルー色を使う	color = 'mediumblue'
option: ゴーストホワイト色を使用する	color = 'ghostwhite'
データフレームの列の文字列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
option: オレンジレッド色を使用する	color = 'orangered'
option: マーカーの色をターコイズにする	markerfacecolor = 'turquoise'
ファイルの拡張子付きのファイル名を使う	os.path.basename(filepath)
カラムの欠損値を最頻値で補う	ds.fillna(ds.mode().iloc[0])
タプルを引数として展開して表示する	print(*aTuple, sep=',')
パパイヤウィップ色を使ってヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
ダークオリーブグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
セットから別の集合との共通要素を取り除く	aSet.symmetric_difference_update(aSet2)
折れ線グラフの下三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
リストとリストについての散布図に赤い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームのカラムの曜日の名前	df[col].dt.weekday_name
線グラフをバイオレット色で描画する	plt.plot(データ列x, データ列y, color='violet')
ケンドールの相関係数を計算する	scipy.stats.kendalltau(データ列, データ列2)
データフレームを'A'列の値によってグループ化する	df.groupby('A')
赤いポイントマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
タプルとタプルを結合する	aTuple + aTuple2
集合のイミュータブル版	frozenset(aSet)
データフレームを列によって整列して上位n件を取り出す	df.sort_values(columns).head(n)
ベクトル間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
散布図のマーカーを▼印にする	plt.scatter(データ列x, データ列y, marker='v')
末尾の列をデータフレームから除く	df[df.columns[:-1]]
日付時刻データが月曜日かどうか	aDatetime.weekday() == 0
行列の次元を変形する	aArray.reshape(行数, 列数)
ファイル全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
点線として数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
散布図のダイアモンド印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
漢字が文字列に含まれるか確認する	re.search('[\u4E00-\u9FD0]', s)
両端キューの大きさ	len(deq)
option: 下三角マーカーを加える	marker = 'v'
データフレームの列が正規表現文字列にマッチしない行を抽出する	df[not df[column].str.match(s)]
option: ダークスラテグレー色を使う	color = 'darkslategray'
ライトスチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
option: シルバーを使う	color = 'silver'
直前の値でデータ列の未入力値を埋める	ds.fillna(method='ffill')
散布図の星マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
折れ線グラフの色をミディアムターコイズに設定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: ハニーデュー色を使う	color = 'honeydew'
データフレームを列名リストによって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
データフレームの列の名前をまとめて文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
ベージュにヒストグラムの色を設定する	plt.hist(データ列, color='beige')
xが1、もしくは2、もしくは3に等しいか調べる	x == 1 or x == 2 or x == 3
rgbの菱形マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
最初のプログラムを書く	print('Hello World')
データ列の欠損値を最小値にセットする	ds.fillna(ds.min())
データ列の移り変わりを半透明の点線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
列をリストとして選択する	df[column].values.tolist()
多次元データを多次元尺度構成法で淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
折れ線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
変数が無限大に近づくときの数値の極限値を求める	sympy.limit(e, z, oo)
列と列をペアのリストにする	itertools.zip_longest(iterable, iterable2)
データフレームのカテゴリデータをダミー変数に変換する	pd.get_dummies(df)
棒グラフを青緑色として描画する	plt.bar(データ列x, データ列y, color='teal')
データフレームのNaNを最大値に指定する	df.fillna(df.max())
rgbの菱形マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
n進数文字列を整数に変換する	int(s, n)
集合をリストに変換する	list(aSet)
リストのn番目のの要素を使う	aList[n]
重回帰モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ホワイトスモーク色のヒストグラムを描画する	plt.hist(データ列, color='whitesmoke')
折れ線グラフの上三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームのNaNを最小値にセットする	df.fillna(df.min())
折れ線グラフのマーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
リストをn個にビニングして、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームを列でで降順に並べ直す	df.sort_values(by=column, ascending=False)
リストの末尾にリストを加えて拡張する	aList.extend(aList2)
option: グラフの色を黄色にセットする	color = 'yellow'
option: ミディアムパープル色を使用する	color = 'mediumpurple'
散布図を青緑色で描画する	plt.scatter(データ列x, データ列y, color='teal')
nからn2の値を引いてnに代入する	n -= n2
バリーウッド色として散布図を描画する	plt.scatter(データ列x, データ列y, color='burlywood')
日付データをISO8601形式の文字列に変換する	aDate.isoformat()
文字列の中の複数行対応として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
二つの集合が共通の要素を持たない	aSet.isdisjoint(aSet2)
正規表現を使う	import re
箱ひげ図でデータ列を描画する	plt.boxplot(データ列)
散布図をスノー色として描画する	plt.scatter(データ列x, データ列y, color='snow')
データフレームの中にと文字列がある	df.isin([value, value2])
Pandasでフォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
空の計数器を準備する	collections.Counter()
データフレームの各次元の大きさを見る	df.shape
option: ブラックにグラフの色を設定する	color = 'black'
列の空文字をNaNに変換しドロップする	ds.replace('', np.nan).dropna()
グラフのx座標のラベルを設定する	plt.xlabel('x軸ラベル')
nがn2の倍数か調べる	n % n2 == 0
マップから項目名の値	aDict.get(key)
赤い上三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
折れ線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
数式を数値に変換する	float(e)
データフレームのカラムの上位25%	df[col].quantile(0.25)
option: グラフの色をシーグリーンに変更する	color = 'seagreen'
半透明の一点鎖線でデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
現在のタイムスタンプ	datetime.datetime.now()
オブジェクトがリストの要素でない	element not in aList
下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
rgbのバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列リストを連結し、ひとつの文字列にする	''.join(map(str, iterable))
文字列をコロンによって区切り、、列挙する	s.split(':')
option: ライトゴールドロディイエロー色を使う	color = 'lightgoldenrodyellow'
データフレームのリストカラムの欠損値をxに減らす	df[aList].fillna(x)
option: ミディアムブルーにグラフの色を変更する	color = 'mediumblue'
ゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='goldenrod')
マゼンタ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='magenta')
紺色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
ナバホホワイト色として散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
文字列からformatのパターンとして日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
配列の次元の数	aArray.ndim
データフレームのヒストグラムを横に並べて、描画する	sns.displot(df, x='列名', col='カテゴリ名')
option: ダークオリーブグリーンを使う	color = 'darkolivegreen'
主成分分析を行う	model = sklearn.decomposition.PCA(n_components=n)
イテラブルを累積したイテラブル	itertools.accumulate(iterable, operator.mul)
句読点文字を全部見る	string.punctuation
リストと配列についての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムの色をピンクに設定する	plt.hist(データ列, color='pink')
ボックスチャートでリストを作図する	plt.boxplot(データ列)
大きさnでイテラブルとリストの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
データフレームを表示するとき、折り返しをオフに指定する	pd.set_option('expand_frame_repr', False)
ファイルをSJISで書き込み用にオープンする]	open(filepath, mode='w', encoding='shift_jis')
線グラフをアクア色として描画する	plt.plot(データ列x, データ列y, color='aqua')
データ列のタイムゾーンを日本に指定する	ds.tz_convert('Asia/Tokyo')
縦棒グラフをフォレストグリーン色として描画する	plt.bar(データ列x, データ列y, color='forestgreen')
折れ線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
実数の小数点以下を丸める	round(x)
データフレームから型リストのデータ型の列のみ除外する	df.select_dtypes(exclude=typeList)
タプルの先頭を取り除く	aTuple[1:]
二つ並べて箱ひげ図を描画する	plt.boxplot([データ列, データ列])
散布図のマーカーの色を指定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
数式を展開する	sympy.expand(e)
折れ線グラフの色をアクアマリンにセットする	plt.plot(データ列x, データ列y, color='aquamarine')
散布図の左三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
棒グラフをブラック色を使って描画する	plt.bar(データ列x, データ列y, color='black')
マッピングの値を列挙する	aDict.values()
破壊的にデータフレームから重複をドロップする	df.drop_duplicates(inplace=True)
実数の正弦の逆数を求める	math.asin(x)
散布図に青い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
訓練データとテストデータに分割する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
データフレームを列でグループ分けして、それぞれのグループの件数を知る	df.groupby(column).size()
データフレームをインデックスによって並べる	df.sort_index()
横棒グラフをローングリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='lawngreen')
文字列TSVからCSVをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
rgbのダイアモンドマーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
数列とリストの散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
オブジェクトは論理値型か調べる	isinstance(obj, bool)
文字列全体が正規表現に大文字・小文字を無視してマッチするか調べる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
option: エンコーディングをBOM付きにする	encoding = 'utf_8_sig'
ヒストグラムの色をスレートブルーに変更する	plt.hist(データ列, color='slateblue')
ミディアムブルーにヒストグラムの色を変更する	plt.hist(データ列, color='mediumblue')
option: 線の種類を点線に設定する	linestyle = 'dotted'
データフレームを2つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
文字列を走査しパターンに複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
文字列の末尾から空白を取り除く	s.rstrip()
データフレームのカラムの曜日を見る	df[col].dt.weekday_name
option: マーカーの太さを変更する	markeredgewidth = 2.5
整数nの16進文字列	hex(n)[2:]
タプルの要素数	len(aTuple)
乱数を得る	random.random()
option: フォントの色をライトイエローに設定する	color = 'lightyellow'
option: マーカーの色をブルーバイオレットにする	markerfacecolor = 'blueviolet'
ヒストグラムの色をスチールブルーに設定する	plt.hist(データ列, color='steelblue')
ファイルパスのセパレータ記号を用いる	os.sep
逆順の双方向キュー	reversed(deq)
散布図にrgbの下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
イテラブルを累加する	itertools.accumulate(iterable)
横棒グラフをブランチドアーモンド色で描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
折れ線グラフの丸マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
ダークサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
縦棒グラフをライトスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
グラフで使える色名の一覧を見る	matplotlib.colors.cnames
データフレームの分散を算出する	df.var()
nをn2倍にする	n *= n2
nわるn2	n / n2
ファイルを開いて]、バイナリ書き込みストリームを見る	open(filepath, mode='wb')
二つの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
列の中に文字列と文字列がある	ds.isin([value, value2])
option: グラフの色をトマトに設定する	color = 'tomato'
2次元リストをフラット化する	sum(aList)
黒い四角マーカーをリストとデータ列についての散布図に描く	plt.plot(データ列x, データ列y, marker='s', c='k')
小麦色色でヒストグラムを描画する	plt.hist(データ列, color='wheat')
データフレームのリスト列の尖度	df[aList].skew()
option: グラフの色をパールゴールデンロッドに変更する	color = 'palegoldenrod'
ドジャーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
日付時刻データをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
リストは少なくともひとつ真か判定する	any(aList)
文字列の開始位置と終了位置の間に部分文字列が含まれるかどうか調べる	s.find(sub, start, end) != -1
変数名をキーとして、辞書	dict(name=element)
option: ダークゴールデンロッド色を使用する	color = 'darkgoldenrod'
nからn2を引いてnにする	n -= n2
データフレームを昇順に複数の列を用いて整列する	df.sort_values(by=column, ascending=True)
正規表現patternでデータフレームの列をまとめて置き換える	df[col].replace(pattern, repl, regex=True)
再帰の上限を上げる	sys.setrecursionlimit(1000000)
組を展開してプリントする	print(*aTuple)
ファイルパスからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
ダークゴールデンロッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
ファイルをオープンして]、書き込みストリームを見る	open(filepath, mode='w')
データフレームのカラムのモード	df[col].mode()
データフレームの列をに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
カーネル密度による分布図を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
option: マーカーの色をアリスブルーにする	markerfacecolor = 'aliceblue'
データフレームのリストカラムの欠損値を平均値で埋める	df[aList].fillna(df[aList].mean())
option: ライトゴールドロディイエローにグラフの色を変更する	color = 'lightgoldenrodyellow'
データフレームの列の名前の一覧を使う	df.columns
option: フォントの色をアクアに指定する	color = 'aqua'
折れ線グラフをダークオレンジ色を使って描画する	plt.plot(データ列x, データ列y, color='darkorange')
データ列のタイムゾーンを文字列に設定する	ds.tz_convert(s)
option: ダークバイオレットを用いる	color = 'darkviolet'
ファイルから書き込みストリームをオープンして]、fとする	f = open(filepath, mode='w')
箱髭図をプロットして、平均値を追加する	plt.boxplot(データ列, showmeans=True)
赤いダイアモンドマーカーをリストとリストの散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='r')
option: グラフの色を貝殻に指定する	color = 'seashell'
データフレームを表示するとき小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
option: マーカーの色をダークバイオレットにする	markerfacecolor = 'darkviolet'
option: ダークバイオレットに色を設定する	color = 'darkviolet'
データをL2ノルムで正規化を行う	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ライトコーラル色でヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
ヒストグラムをダークグレー色で描画する	plt.hist(データ列, color='darkgray')
縦棒プロットを描画し、、中央寄せする	plt.bar(ラベル列, データ列, align='center')
サポートベクター回帰モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフをロージーブラウン色を使って描画する	plt.plot(データ列x, データ列y, color='rosybrown')
イテラブルとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
ブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='brown')
十六進数字を全部見る	string.hexdigits
線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
名前付きタプルをパラメータからインスタンス化する	C._make(パラメータ)
折れ線グラフに青い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
データフレームの最初n行	df.head(n)
option: グラフの色をロイヤルブルーに指定する	color = 'royalblue'
横棒グラフをグリーンイエロー色で描画する	plt.barh(データ列x, データ列y, color='greenyellow')
文字列がリストの要素でないかどうか確認する	element not in aList
データ列の欠損値を直後の値で置換する	ds.fillna(method='bfill')
データ列を閾値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
データフレームの指定された列を配列にする	df[column].values
双方向キューのn番目に数値を追加する	deq.insert(n, element)
組のn番目からn2番目までの部分を取り出す	aTuple[n:n2]
タプルの合計値	sum(aTuple)
データフレームを表示するとき小数点以下の表示精度をセットする	pd.set_option('precision', n)
ヒストグラムをラベンダー色として描画する	plt.hist(データ列, color='lavender')
浮動小数点数の逆双曲線余弦を算出する	math.acosh(x)
カテゴリ列で色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
option: マーカーの色をロージーブラウンにする	markerfacecolor = 'rosybrown'
データフレームのリストカラムをValueMapで一度に置換する	df[aList].replace(ValueMap)
棒グラフをシルバー色で描画する	plt.bar(データ列x, データ列y, color='silver')
option: ディムグレーにグラフの色を変更する	color = 'dimgray'
本日が火曜日か調べる	datetime.datetime.today().weekday() == 1
読み込み用にファイルをオープンする]	open(filepath, mode='r')
データ列が何時か調べる	ds.dt.hour
option: グラフの色をダークオーキッドに設定する	color = 'darkorchid'
データ列の散布図を描画する	plt.scatter(データ列x, データ列y)
日付データが日付データより前	aDate < aDate2
option: グラフの色をディムグレーに設定する	color = 'dimgray'
タプルの要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
散布図をブラック色を使って描画する	plt.scatter(データ列x, データ列y, color='black')
円周率	math.pi
折れ線グラフの丸マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
キーがマップ上で定義されているか	key in aDict
option: プラム色を用いる	color = 'plum'
双方向キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
リストと配列について散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームのリストカラムの中にある文字列と文字列の合計を数える	df[aList].isin([value, value2]).sum()
赤い三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームの指定された列を配列に変換する	df[column].values
イテラブルと配列についての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームをJSONLファイルに小数点以下3桁まで書き込む	df.to_csv(filename, float_format='%.3f')
アクアマリン色を用いてヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
散布図を星印で描画する	plt.scatter(データ列x, データ列y, marker='*')
散布図に赤い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
日付時刻データからn週間分減算する	aDatetime - datetime.timedelta(weeks=n)
データフレームの重複する行を数える	df.duplicated().sum()
現在が何秒か知る	datetime.date.today().second
散布図をrgbの三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
アイボリーにヒストグラムの色を変更する	plt.hist(データ列, color='ivory')
カーキ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
真サブセットか	aSet < aSet2
文字列中に非英数字が含まれるか	any(not c.isalnum() for c in s)
タブ区切りのファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
二つのデータフレームを列をキーにして右結合する	pd.merge(df, df2, on=column, how='right')
文字列を黒色でプリントする	print(f'\033[30m{value}\033[0m')
ヒストグラムの色を暗い赤に設定する	plt.hist(データ列, color='darkred')
青色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
散布図をライトサーモン色として描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
散布図をダークサーモン色を使って描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
nが1、もしくは2かどうか確認する	n == 1 or n == 2
黒い下三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
横棒グラフの色をダークバイオレットにする	plt.barh(データ列x, データ列y, color='darkviolet')
複数の数列を箱ひげ図にする	plt.boxplot([データ列, データ列])
コマンドの第一引数を知る	sys.argv[1]
ファイルをUTF8として書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
回帰分析を勾配ブースティングで行う	model = sklearn.ensemble.GradientBoostingRegressor()
キューの右の要素を使う	deq[-1]
リストの平均値を求める	sum(aList)/len(aList)
ゴーストホワイト色のヒストグラムを描画する	plt.hist(データ列, color='ghostwhite')
色付きの点線でリストの移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
イテラブルを無限に繰り返す	itertools.cycle(iterable)
year年day月のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
２点間のユークリッド距離を求める	math.dist(point, point2)
カウンタからリストをカウントして引く	aCounter.subtract(iterable)
ゼロ埋めされたブール型の配列	np.zeros(要素数, dtype=np.int32)
平均値付き箱ひげ図を描画する	plt.boxplot(データ列, showmeans=True)
option: ダークカーキを用いる	color = 'darkkhaki'
散布図に菱形印を加える	plt.scatter(データ列x, データ列y, marker='D')
データフレームのカラムをヒストグラムにする	plt.hist(df[column])
折れ線グラフをミディアムオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ヒストグラムの色をブラックに設定する	plt.hist(データ列, color='black')
二つの辞書をチェーンする	collections.ChainMap(aDict, aDict2)
散布図に赤いクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='r')
ライトスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
散布図をスレートブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='slateblue')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
赤いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
ヒストグラムをラベンダー色で描画する	plt.hist(データ列, color='lavender')
データフレームの列がx以上のデータを抽出する	df[df[column] >= x]
パウダーブルー色でヒストグラムを描画する	plt.hist(データ列, color='powderblue')
option: グラフの色をローングリーンに設定する	color = 'lawngreen'
実数のバイナリ対数	math.log2(x)
日付時刻データが何秒か知る	aDatetime.second
データフレームの最後を確認する	df.tail()
グラフの背景色を白くする	sns.set(style='whitegrid')
丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
最小値でデータフレームのリストカラムのNaNを埋める	df[aList].fillna(df[aList].min())
ファイルからのストリームを使う	open(filepath)
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategrey')
データフレームのリストカラムの空文字をドロップする	df[aList].replace('', np.nan).dropna()
数値の符号を同じにする	math.copysign(x, x2)
空の多重集合を作る	collections.Counter()
スタックから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
マッピングに項目名ワード引数で更新する	aDict.update(**kwargs)
option: レベッカパープル色を使用する	color = 'rebeccapurple'
横棒グラフをプロットし、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
配列の累積和を求める	np.cumsum(aArray)
変数を青色にする	f'\033[34m{value}\033[0m'
option: シスルにグラフの色をセットする	color = 'thistle'
文字列の開始位置から終了位置までの範囲で部分文字列の出現を数える	s.count(sub, start, end)
文字列を黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
データ列からユニークな要素を抽出し、リスト化する	ds.unique().tolist()
表データの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
文字列をエンコーディングによってバイト列に変換する	s.encode(encoding=encoding)
option: マーカーを星に変更する	marker = '*'
折れ線グラフの四角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データフレームをグループ化し、列に対し標準偏差を求める	df.groupby(column)[column2].std()
散布図に赤い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ターコイズ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
eの実数乗	math.exp(x)
ヒストグラムをレモンシフォン色を使って描画する	plt.hist(データ列, color='lemonchiffon')
折れ線グラフを半透明の破線として描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
データフレームのリストカラムの平均値	df[aList].mean()
線グラフをオールドレース色を用いて描画する	plt.plot(データ列x, データ列y, color='oldlace')
横棒グラフをダークオリーブグリーン色として描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
ライトシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
1行だけ標準入力から読み込んで改行を取り除く	sys.stdin.readline().rstrip()
棒グラフの色をライトイエローにする	plt.bar(データ列x, データ列y, color='lightyellow')
日付時刻データをn秒前に戻す	aDatetime - datetime.timedelta(seconds=n)
散布図のマーカーを黒くする	plt.scatter(データ列x, データ列y, markerfacecolor='k')
横棒グラフの色をラベンダーにする	plt.barh(データ列x, データ列y, color='lavender')
タイムスタンプデータの月数	aDatetime.month
線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
横棒グラフの色をハニーデューにする	plt.barh(データ列x, データ列y, color='honeydew')
リストとリストについて散布図を描画して、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
青い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
リストとリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
データフレームの末尾n行を抽出する	df.tail(n)
データフレームの第一四分位数を算出する	df.quantile(0.25)
値をシアンでプリントできる文字列にする	f'\033[36m{value}\033[0m'
タプルとタプルを連結する	aTuple + aTuple2
ネイピア数	math.e
option: タンを使う	color = 'tan'
線グラフの色をダークシアグリーンに変更する	plt.plot(データ列x, データ列y, color='darkseagreen')
option: グラフの色をオレンジに指定する	color = 'orange'
ふたつの集合の積集合	aSet.intersection(aSet2)
散布図の色をレモンシフォンにする	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ヒストグラムをイエローグリーン色を用いて描画する	plt.hist(データ列, color='yellowgreen')
折れ線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
エクセルファイルファイルからすべてのシートを読み込む	pd.read_excel(filename, sheet_name=None)
データフレームをCSVファイルでJSONLファイルに保存する	df.to_csv(filename)
データ列のノルムを揃える	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
ヒストグラムをダークオーキッド色を用いて描画する	plt.hist(データ列, color='darkorchid')
オブジェクトのプロパティの値を設定する	setattr(obj, プロパティ名, 値)
イテラブルを累積する	itertools.accumulate(iterable, operator.mul)
リストとリストについて散布図をプロットしてマーカーを星にセットする	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの▽マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
ダークスレートブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレームの各グループごとの標準偏差	df.groupby(column).std()
二つのデータ列の残差を散布図としてプロットする	sns.residplot(x=データ列, y=データ列)
ひとつでも英数字が文字列内にある	any(c.isalnum() for c in s)
散布図のマーカーをダイアモンド印にする	plt.scatter(データ列x, データ列y, marker='D')
棒グラフの色をゲインズボロにする	plt.bar(データ列x, データ列y, color='gainsboro')
クリムゾン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データ列を等量でn個にビンニングする	pd.qcut(ds, n)
データフレームを各列と列の組み合わせ毎にグループ化して、平均値を求める	df.groupby([column, column2], as_index=False).mean()
組の合計値を求める	sum(aTuple)
文字列を走査しパターンに複数行対応としてマッチするか確認する	re.search(pattern, s, flags=re.MULTILINE)
option: グラフの色をゴールドに指定する	color = 'gold'
散布図をプラム色として描画する	plt.scatter(データ列x, データ列y, color='plum')
リストと数列について散布図を描画し、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
散布図を青色を使って描画する	plt.scatter(データ列x, データ列y, color='blue')
option: 読み込みモードに設定する	mode = 'r'
既存のファイルを文字列の示す文字コードで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
双方向キューの大きさ	len(deq)
データフレームのリストカラムのNaNを直前の値で補う	df[aList].fillna(method='ffill')
option: マーカーの色をパールバイオレットレッドにする	markerfacecolor = 'palevioletred'
書式を辞書でフォーマットする	formatText.format_map(aDict)
赤い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ゼロ埋めされた三２ビット整数型のベクトルを作る	np.zeros(要素数, dtype=np.int16)
データフレームのリストカラムの中に文字列とがいくつあるか数える	df[aList].isin([value, value2]).sum()
小数点数のサイン	math.sin(x)
option: 改行コードを旧Macに指定する	newline = '\r'
整数の順列の総数	math.perm(n)
線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
JSON文字列を辞書にする	json.loads(jsonString)
データフレームの行を条件で消すには	df[(df[column] == x) & (df[column2] == x2)]
行列から重複を除いた配列を作成する	np.unique(aArray)
シーケンスを文字列に変換して、タブで結合する	'\t'.join(map(str, iterable))
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
ダークバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
オリーブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
整数nがリストのどれかか調べる	n in aList
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategrey')
柱状グラフを上限から下限の範囲で描く	plt.hist(データ列, range=(start, end))
スレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slateblue')
option: EUCを使う	encoding = 'euc_jp'
データフレームとデータフレームの列を横方向に連結する	pd.concat([df, ds], axis=1)
折れ線グラフを色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: グラフの色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
配列とイテラブルのデカルト積を計算する	itertools.product(iterable, iterable2)
横棒グラフをアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='aquamarine')
棒グラフの色をダークカーキにする	plt.bar(データ列x, データ列y, color='darkkhaki')
カラムの欠損値を直後の値に設定する	ds.fillna(method='bfill')
option: フォントの色をスラグレーに指定する	color = 'slategrey'
散布図に赤い丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームをJSONLファイルから読み込む	pd.read_json(filename, orient='records', lines=True)
イテラブルと列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
エクセルデータファイルをデータフレームとして読み込む	pd.read_excel(filename)
リストとイテラブルについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
現在が月曜日	datetime.datetime.today().weekday() == 0
散布図の色をミスティローズにする	plt.scatter(データ列x, データ列y, color='mistyrose')
棒グラフをミディアムパープル色を使って描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
データフレームの内の列とカラムに重複があれば、マスクする	df.duplicated(subset=[column, column2])
日付時刻データからn日分、減らす	aDatetime - datetime.timedelta(days=n)
四分位数でデータフレームの中の列をビン分割する	pd.qcut(df[col], 4)
option: アクアを使う	color = 'aqua'
無限にイテラブルを繰り返す	itertools.cycle(iterable)
文字列を走査しパターンにASCII限定としてマッチするか調べる	re.search(pattern, s, flags=re.ASCI)
データフレームのリスト列の中の未入力値の数を数える	df[aList].isna().sum()
上限長を指定して、双方向キュー	collections.deque(maxlen=n)
オプションでファイルを出力にする	file = sys.open(filename, 'w')
ベクトルの列ごとの合計値	np.sum(aArray, axis=0)
カラムをリストに変換する	df[column].values.tolist()
文字コードtextで追加できるように既存のファイルパスをオープンする]	open(filepath, mode='a', encoding=text)
浮動小数点数を数で割った余り	x % y
線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
ヒストグラムをペールグリーン色を用いて描画する	plt.hist(データ列, color='palegreen')
文字列が無限に繰り返すイテラブルを得る	itertools.repeat(element)
データフレームの列のどの値が頻出か見る	df[col].mode()
option: 色をシーグリーンに設定する	color = 'seagreen'
リストの末尾からn番目以前の要素を抽出する	aList[:-n]
折れ線グラフの大バツ印を黒色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
散布図をミントクリーム色で描画する	plt.scatter(データ列x, データ列y, color='mintcream')
データ列の変化を半透明の破線として描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
コーラル色を使ってヒストグラムを描画する	plt.hist(データ列, color='coral')
列からユニークな要素を抽出しリスト化する	ds.unique().tolist()
リストをリストを境界値としてビン分割する	pd.cut(aList, aList)
表データを複数の列によってグループ化する	df.groupby(columns)
データフレームのリスト列の相関行列	df[aList].corr()
日付時刻データからn時間分、減算する	aDatetime - datetime.timedelta(hours=n)
ミントクリーム色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
値を下線付きで出力する	print(f'\033[4m{value}\033[0m')
ライトグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
空のヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
縦棒グラフをオレンジ色として描画する	plt.bar(データ列x, データ列y, color='orange')
エラーなくリストの文字列の位置を使う	aList.index(element) if element in aList else -1
棒グラフの色をライトスチールブルーにする	plt.bar(データ列x, データ列y, color='lightsteelblue')
ダーク・スラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
オブジェクトがリストに含まれないか調べる	element not in aList
丸印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
ダークレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
二進数文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
nを十六進リテラルに変換する	hex(n)
サポートベクターマシンでクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
組の最後のn要素を取り除く	aTuple[:-n]
カテゴリで色分けして、データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフの右三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
コーンフラワーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
マゼンタ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
横軸の目盛りの表示を変更する	plt.xticks(目盛りの値リスト)
日付時刻データの日付	aDatetime.date()
黄色色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
横棒グラフの色をコーラルにする	plt.barh(データ列x, データ列y, color='coral')
棒グラフをビスク色で描画する	plt.bar(データ列x, データ列y, color='bisque')
半透明の破線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームの列名を指定された列の名前一覧に置き換える	df.columns = columns
プラットホームがLinuxか調べる	sys.platform.startswith('linux')
option: グラフの色をグリーンに設定する	color = 'green'
データフレームの中に日付データと文字列がいくつ存在するかカウントする	df.isin([value, value2]).sum()
列によってデータフレームを並べて、上位n件を取り出す	df.sort_values(columns).head(n)
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
rgbの丸マーカーをリストとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
データフレームを2つのカラムによって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
ポイント印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='.')
棒グラフの色を黄緑にする	plt.bar(データ列x, データ列y, color='chartreuse')
折れ線グラフを紺色で描画する	plt.plot(データ列x, データ列y, color='darkblue')
オリベドラブ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
フローラルホワイト色のヒストグラムを描画する	plt.hist(データ列, color='floralwhite')
データ列が正規分布からどれだけ、尖っているか調べる	ds.skew()
列と列の重複を消す	df.drop_duplicates(subset=[column, column2])
データ列の推移を折れ線グラフで可視化する	plt.plot(range(len(データ列)), データ列)
ネイビー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
データフレームのカラムの未入力値を直後の値で埋める	df[col].fillna(method='bfill')
横棒グラフの色を青紫にする	plt.barh(データ列x, データ列y, color='violet')
option: マーカーの色をカーキにする	markerfacecolor = 'khaki'
option: 切片を算出しない	fit_intercept = False
x,y,zをそれぞれn,n2,n3とする	x, y, z = n, n2, n3
データフレームの列の名前一覧で指定された列を削除する	df.drop(columns, axis=1)
表データを複数の列によってソートしてNaNを先頭にする	df.sort_values(by=column, na_position='first')
ヒストグラムをディムグレー色として描画する	plt.hist(データ列, color='dimgray')
折れ線グラフに▽マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
イテラブルから計数器を生成する	collections.Counter(iterable)
ファイル全体をリストに変換する	[s.strip() for s in f.readlines()]
ヒストグラムをスプリンググリーン色として描画する	plt.hist(データ列, color='springgreen')
option: グリーンを使う	color = 'green'
大文字・小文字を無視してパターンで文字列を分割する	re.split(pattern, s, flags=re.IGNORECASE)
データフレームをグループ化し、それぞれの列に対し最大値を算出する	df.groupby(column)[column2].max()
シーケンスを集合に追加する	aSet.update(iterable)
青いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
データフレームを列名リストによって昇順に並べ直し、、更新する	df.sort_values(by=column, ascending=True, inplace=True)
kを底とする浮動小数点数の対数	math.log(x, k)
パールバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
横棒グラフの色をオリーブにする	plt.barh(データ列x, データ列y, color='olive')
ファイルパスから追加ストリームをオープンして]、fとする	f = open(filepath, mode='a')
等間隔の配列を作成する＼	np.arange(開始値, 終了値, 等差)
散布図の印の色を設定する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
option: 色を青緑に変更する	color = 'teal'
データフレームを複数の列の値によって集約し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
n×n2の二次元リストを作る	[[0] * n for _ in range(n2)]
バリーウッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
折れ線グラフのマーカーを左三角印にする	plt.plot(データ列x, データ列y, marker='<')
実数は無限大かどうか調べる	math.isinf(x)
シルバー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='silver')
折れ線グラフの色をダークターコイズに変更する	plt.plot(データ列x, データ列y, color='darkturquoise')
データ列の折れ線グラフを描いて色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
マッピングのの一覧	aDict.values()
折れ線グラフに左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<')
JSONLファイルにデータフレームを行を付けずに保存する	df.to_csv(filename, index=None)
モカシン色を使ってヒストグラムを描画する	plt.hist(データ列, color='moccasin')
UNIX秒の文字列からタイムスタンプ型に変換する	pd.to_datetime(s, unit='s', utc=True)
nの8進文字列を見る	oct(n)[2:]
小数点数以下の最大の整数	math.floor(x)
棒グラフを小麦色色で描画する	plt.bar(データ列x, データ列y, color='wheat')
クラス分類の偽陰性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
折れ線グラフの色をライムグリーンに指定する	plt.plot(データ列x, データ列y, color='limegreen')
文字列中に部分文字列が含まれないか調べる	sub not in s
列の名前を列挙する	df.columns
ヒストグラムをミディアムパープル色として描画する	plt.hist(データ列, color='mediumpurple')
nが5の倍数か調べる	n % 5 == 0
プロットの描画で濃くカラーパレットを用いる	sns.set(pallete='deep')
データフレームを各列と列の組み合わせ毎にグループ化し、、個数を求める	df.groupby([column, column2], as_index=False).count()
option: シーグリーン色を用いる	color = 'seagreen'
整数nの二進文字列	bin(n)[2:]
option: グラフの色をダークスラテグレーに設定する	color = 'darkslategray'
中央値で配列をビン分割する	pd.qcut(aArray, 2)
ヒストグラムを破線で描画する	plt.hist(データ列, linestyle='dashed')
データフレームをインデックスによって昇順にソートする	df.sort_index(ascending=True)
配列を等間隔でn個にビンニングする	pd.cut(aArray, n)
横棒グラフをミディアムアクアマリン色で描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
ペールグリーン色でヒストグラムを描画する	plt.hist(データ列, color='palegreen')
文字列を最後の部分文字列によって二分する	s.rpartition(sub)
データフレームを丸める	df.round()
散布図をオリベドラブ色で描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
リストとリストについての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
行列のムーア・ペンローズの擬似逆行列	np.linalg.pinv(aArray)
散布図の丸マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
追加できるように既存のファイルをSJISとしてオープンする]	open(filepath, mode='a', encoding='shift_jis')
10を底とする実数の対数	math.log10(x)
散布図の色をダークオーキッドにする	plt.scatter(データ列x, データ列y, color='darkorchid')
折れ線グラフを破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
折れ線グラフをパレットトルコイズ色として描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
文字列を赤色でプリントする	print(f'\033[31m{value}\033[0m')
データフレームのカラムの欠損値を平均に設定する	df[col].fillna(df[col].mean())
列をリストとして抽出する	df[column].values.tolist()
表データのそれぞれのグループごとの合計	df.groupby(column).sum()
タプルをn回、連結する	aTuple * n
ヒストグラムをデピンク色で描画する	plt.hist(データ列, color='deeppink')
行列を一次元化する	aArray.flatten()
データ列の欠損値を中央値に設定する	ds.fillna(ds.median())
浮動小数点数の最小値	sys.float_info.min
option: グラフの色をリネンにセットする	color = 'linen'
ダークターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
nがn2で割り切れないか調べる	n % n2 != 0
データフレームのカラムのタイムゾーンを日本に変更する	df[col].tz_convert('Asia/Tokyo')
ライトイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
散布図の三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームのカラムのどの値が頻出か確認する	df[col].mode()
ドジャーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='dodgerblue')
新しいヒストグラムベースの勾配ブースティング分類木を用意する	model = sklearn.ensemble.HistGradientBoostingClassifier()
パレットを暗くする	sns.set(pallete='dark')
option: グラフの色を貝殻に設定する	color = 'seashell'
グリッドを一点鎖線にする	plt.grid(linestyle='dashbot')
バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
横棒グラフを描き、、下寄せする	plt.barh(ラベル列, データ列, align='edge')
縦棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
棒グラフをアンティークホワイト色で描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
小麦色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
option: 文字列をセパレータで用いる	sep = s
横棒グラフをライトスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
横棒グラフをダークシアン色として描画する	plt.barh(データ列x, データ列y, color='darkcyan')
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
文字列を紫色でプリントできる文字列にする	f'\033[35m{value}\033[0m'
折れ線グラフの星マーカーを青くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
正規分布として乱数を求める	random.normalvariate(mu=0.5, sigma=0.2)
リストとリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
本日が月曜日かどうか確認する	datetime.datetime.today().weekday() == 0
散布図をダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D')
アンサンブル学習を用いて回帰分析をする	sklearn.ensemble.VotingRegressor()
一点鎖線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームの列が正規分布からどれだけ、歪んでいるか見る	df[col].kurt()
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategray')
赤いダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
整数nのビット長	n.bit_length()
データフレームをグループ化し、各列に対し合計を求める	df.groupby(column)[column2].sum()
ValueMapでデータフレームのリスト列の値をまとめて置換する	df[aList].replace(ValueMap)
t-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
横棒グラフを描く	plt.barh(ラベル列, データ列)
データフレームを'A'列によってソートする	df.sort_values(by='A')
折れ線グラフの色をコーラルに設定する	plt.plot(データ列x, データ列y, color='coral')
option: ディープスカイブルーを使う	color = 'deepskyblue'
シーグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
データフレームを各列と列の組み合わせ毎にグループ化して標準偏差を算出する	df.groupby([column, column2], as_index=False).std()
２つの数列を箱髭図にする	plt.boxplot([データ列, データ列])
中央値でデータフレームの欠損値を埋める	df.fillna(df.median())
ヒストグラムの色をオレンジレッドに変更する	plt.hist(データ列, color='orangered')
ヒストグラムの色をシスルに設定する	plt.hist(データ列, color='thistle')
option: 追加用に指定する	mode = 'a'
option: 紺碧色を使用する	color = 'azure'
タン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
データフレームのリストカラムの中にいくつ日付データがあるか数える	df[aList].isin([value]).sum()
データフレームを各列毎にグループ化して、列の最大値を求める	df.groupby(column)[column2].max()
データフレームを列で並べてNaNを先頭にする	df.sort_values(by=column, na_position='first')
option: フォレストグリーンを使う	color = 'forestgreen'
日付データにn日分、加算する	aDate + datetime.timedelta(days=n)
option: 紺色を使う	color = 'darkblue'
ラベル付きの円プロットを描く	plt.pie(データ列, startangle=90, labels=ラベル列)
リストとリストの散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームを多項式回帰付き散布図にする	sns.regplot(data=df, x='列名', y='列名', order=2)
ヒストグラムの色をコーンズシルクに設定する	plt.hist(データ列, color='cornsilk')
行列を2次元1列に変形する	aArray.reshape(-1, 1)
データ列の偏りを対数変換する	np.log(データ列)
エクセルファイルファイルからn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
２つのデータフレームを列'A'と列'B'をキーとして左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
３変数の最も小さい値を求める	min(x, y, z)
データフレームのヒストグラムを縦横に並べて、グラフ化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
ピーチパフ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
ビスク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
二つの行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
折れ線グラフのダイアモンドマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
文字コードの最大値を確認する	sys.maxunicode
列からサンプリングする	random.sample(iterable)
棒グラフをライトグレー色として描画する	plt.bar(データ列x, データ列y, color='lightgray')
option: グラフの色をホットピンクに設定する	color = 'hotpink'
△印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの下三角マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ダークスレートブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
データフレームをタブ区切りのファイルから読み込む	pd.read_csv(filename, sep='\t')
横棒グラフの色をペルーにする	plt.barh(データ列x, データ列y, color='peru')
本日が金曜日か調べる	datetime.datetime.today().weekday() == 4
データ列を四捨五入して、整数型にする	ds.round().astype(int)
縦棒グラフをプロットする	plt.bar(ラベル列, データ列)
プロット中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
整数nを十六進文字列に変換する	hex(n)[2:]
option: 青紫色を使う	color = 'violet'
ヒストグラムの線の種類を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
実数の逆双曲線正弦	math.asinh(x)
二次元リストの転置行列を求める	[list(x) for x in list(zip(*aList))]
リストを引数として展開してプリントする	print(*aList)
コーンズシルク色でヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
option: ライトスカイブルーにグラフの色を指定する	color = 'lightskyblue'
文字列をASCIIコード列に変換する	[ord(ch) for ch in s]
データフレームをグループ化し、それぞれの列に対し平均値を計算する	df.groupby(column)[column2].mean()
横棒グラフをライトスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
実線でヒストグラムを描く	plt.hist(データ列, linestyle='solid')
実数が負の数か調べる	x < 0
凡例を加える	plt.legend(['凡例A', '凡例B'])
二つの配列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
全要素を０で初期化した８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int8)
フォーマットfmtで文字列を日付データにする	pd.to_datetime(s, format=fmt)
タブ区切りのファイルから文字化けしないようにCSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
標準入力から1行だけ読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
データ列をn個にビン分割してnamesのラベルをつける	pd.cut(ds, n, labels=names)
辞書をコピーする	aDict.copy()
マッピングのコピーを準備する	aDict.copy()
横棒グラフの色をパレットトルコイズにする	plt.barh(データ列x, データ列y, color='paleturquoise')
行列の各要素のアダマール積	np.multiply(aArray, aArray2)
列でを用いて降順にデータフレームをソートする	df.sort_values(by=column, ascending=False)
option: 文字列を分割記号で使用する	sep = s
散布図のポイントマーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
配列とリストについて散布図を描画して、マーカーをクロスにセットする	plt.plot(データ列x, データ列y, marker='x')
データフレームを各列毎にグループ分けして列の最大値を求める	df.groupby(column)[column2].max()
グラフにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
配列をビン数nで分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
Pandasで、フォーマットでデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
ビン数nでデータ列を分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
棒グラフをダークスレートブルー色を使って描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
文字列内にひとつでもアスキー文字が含まれる	any(c.isascii() for c in s)
日付時刻データが日付時刻データと同時か調べる	aDatetime == aDatetime2
プロットにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
論文にグラフの用途を指定する	sns.set(context='paper')
ファイルを一行ずつ読む	f.readline()
グラフの見栄えをデフォルトでいい感じに設定する	sns.set()
ファイルパスが存在しないか調べる	not os.path.exists(filepath)
棒グラフの色をスチールブルーにする	plt.bar(データ列x, データ列y, color='steelblue')
カレント作業ディレクトリ	os.getcwd()
辞書からカウンタを作る	collections.Counter(aDict)
要素が集合に含まれないか調べる	element not in aSet
八進文字列を整数に変換する	int(s, 8)
ファイルパスからストリームをオープンして]、fileとする	file = open(filepath)
全要素を０で初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
カウンタ同士でインターセクションを求める	aCounter & aCounter2
大きい順にデータフレームを'A'列によってによって並べる	df.sort_values(by='A', ascending=False)
データフレームのカラムの中の欠損値の合計を数える	df[col].isna().sum()
option: タブをセパレータで用いる	sep = '\t'
データフレームの最後のカラム以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
配列の最小	np.min(aArray)
ヒストグラムの色を青に設定する	plt.hist(データ列, color='blue')
棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
標準入力	sys.stdin
データフレームをインポートする	import pandas as pd
折れ線グラフの▲マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
文字列をマゼンタで出力する	print(f'\033[35m{value}\033[0m')
option: マーカーの色をピンクにする	markerfacecolor = 'pink'
折れ線グラフをコーンズシルク色で描画する	plt.plot(データ列x, データ列y, color='cornsilk')
イテラブルとリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
nが2で割り切れないか	n % 2 == 1
乱数シードをnで固定する	random.seed(n)
コマンドの第一引数を調べる	sys.argv[1]
アイボリー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
行列の列ごとの最大を計算する	np.max(aArray, axis=0)
option: 文字コードを文字列の示す文字コードに設定する	encoding = s
エクセルファイルファイルからエクセルデータを読み込む	pd.read_excel(filename)
データフレームの中の列をn個に等間隔でビン分割する	pd.cut(df[col], n)
データフレームの欠損値を最大値で埋める	df.fillna(df.max())
文字列中に部分文字列がいくつか存在するかカウントする	s.count(sub)
折れ線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
サポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームのリストカラムの上位25%	df[aList].quantile(0.25)
データフレームの最初n行	df.head(n)
モカシン色としてヒストグラムを描画する	plt.hist(データ列, color='moccasin')
折れ線グラフの色をシアンに設定する	plt.plot(データ列x, データ列y, color='cyan')
日付データにn分分、加算する	aDate + datetime.timedelta(minutes=n)
タイムスタンプデータからn週間を減らす	aDatetime - datetime.timedelta(weeks=n)
日付時刻データの時刻	aDatetime.time()
option: 暗い赤を使う	color = 'darkred'
ダークゴールデンロッドにヒストグラムの色を変更する	plt.hist(データ列, color='darkgoldenrod')
文字列を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
ダークグレー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
x座標にラベルを付ける	plt.xlabel('x軸ラベル')
文字列中にひとつでも非小文字があるかどうか調べる	any(not c.islower() for c in s)
文字列の接頭辞から部分文字列を取り除く	s.removeprefix(sub)
ダークシアグリーン色でヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
平均値でカラムのNaNを置き換える	ds.fillna(ds.mean())
データフレームを各列毎にグループ化し、、列の最小値を計算する	df.groupby(column)[column2].min()
文字列の中のASCII限定として正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.ASCI)
文字列の開始位置以降に部分文字列が含まれないかどうか調べる	s.find(sub, start) == -1
データフレームのリスト列の相関行列ピアソンで	df[aList].corr(method='pearson')
空の辞書	{}
ダークオレンジ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
dateStringを日付データに変換する	pd.to_datetime(dateString)
横棒グラフをミスティローズ色で描画する	plt.barh(データ列x, データ列y, color='mistyrose')
縦棒グラフをインディアンレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='indianred')
文字列内にひとつでも大文字が含まれるか調べる	any(c.isupper() for c in s)
option: フォントの色をライトグレーに設定する	color = 'lightgrey'
リストとリストについての散布図に黒い下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='k')
横棒グラフをリネン色として描画する	plt.barh(データ列x, データ列y, color='linen')
データフレームの列の値がx以上の行を取り出す	df[df[column] >= x]
option: フォントの色をブルーバイオレットに設定する	color = 'blueviolet'
option: グラフの色をインディゴに設定する	color = 'indigo'
サドルブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
折れ線グラフのマーカーを▲印にする	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフをホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='white')
プラットフォームのコードポイントの最大値	sys.maxunicode
二つのカウンタの共通する要素を求める	aCounter & aCounter2
ヒストグラムの色をフォレストグリーンに指定する	plt.hist(データ列, color='forestgreen')
ガウス過程で回帰分析をする	model = sklearn.gaussian_process.GaussianProcessRegressor()
データ列を使う	import pandas as pd
一点鎖線として数列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
スチールブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='steelblue')
整数乱数の配列	np.random.randint(開始値, 終了値, N)
縦棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
縦軸の目盛りに文字列を設定する	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
変数を黒色でプリントする	print(f'\033[30m{value}\033[0m')
パパイヤウィップ色のヒストグラムを描画する	plt.hist(データ列, color='papayawhip')
折れ線グラフをパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='purple')
option: 降順にする	ascending = False
散布図の星マーカーを青くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
ミディアムバイオレットレッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
列によってデータフレームをグループ化して、最小値を求める	df.groupby(column).min()
オブジェクトにプロパティが存在するか確認する	hasattr(obj, プロパティ名)
データフレームから重複した行を残さず、削除する	df.drop_duplicates(keep=False)
配列間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
option: どのカラムもインデックスに設定しない	index_col = None
グリッド線	plt.grid(alpha=0.5)
リストが空でないかどうか調べる	len(aList) != 0
二次元リストを転置する	[list(x) for x in list(zip(*aList))]
ヒストグラムの色をライムグリーンに指定する	plt.hist(データ列, color='limegreen')
多次元尺度構成法で濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
カウンタをイテラブルで更新する	aCounter.update(iterable)
データフレームの列の値を正規表現で一度に変更する	df[col].replace(pattern, repl, regex=True)
文字列を空白を用いて分割する	s.split()
異なる列をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
データフレームから重複した行を残さず、落とす	df.drop_duplicates(keep=False)
シエナ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
Pandasで、データ列をフォーマットでPandasの日付型にする	pd.to_datetime(ds, format='%Y-%m-%d')
xの小数点以下'1'桁までの文字列に変換する	':.1f'.format(x)
データフレームの列の欠損値を最大値で埋める	df[col].fillna(df[col].max())
option: フォントの色をパレットトルコイズに設定する	color = 'paleturquoise'
棒グラフの色をライトブルーにする	plt.bar(データ列x, データ列y, color='lightblue')
y座標の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
バイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
部分文字列か調べる	sub in s
ホールドアウト法を使用する	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
日付時刻データにn秒を加算する	aDatetime + datetime.timedelta(seconds=n)
３つの変数を順に出力する	print(value, value2, value3)
折れ線グラフのバツ印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
数列とリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
辞書をクリアする	aDict.clear()
オブジェクトがタプルクラスのインスタンスか調べる	isinstance(obj, tuple)
データフレームのカラムを10の位で丸める	df[col].round(-1)
リストとリストについてリストの値に応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
JSONファイルの入力を読み込んで、dataとする	data = json.load(fin)
データフレームの列の文字列長を列として使う	df[col].str.len()
表示可能な最大行数を増やす	pd.set_option('display.max_rows', n)
データフレームをタブ区切りでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
表データをインポートする	import pandas as pd
datetimeをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
散布図の上三角印を青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
散布図のマーカーの色を変更する	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
フクシア色のヒストグラムを描画する	plt.hist(データ列, color='fuchsia')
実数のtanの逆数を求める	math.atan(x)
nullに等しい値	None
文字列を部分文字列で分けたときの最初の文字列	s.partition(sub)[0]
データフレームのリスト列のメディアン	df[aList].median()
折れ線グラフの右三角印を赤くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
文字列を部分文字列で区切って、文字列リストにする	s.split(sub)
データフレームの中の列を等量でビン数nでビン分割する	pd.qcut(df[col], n)
紺色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
行列演算を行う	import numpy as np
リストの重複を除去する	sorted(set(aList), key=aList.index)
オブジェクトがあるクラスか確認する	isinstance(obj, クラス)
棒グラフをサーモン色として描画する	plt.bar(データ列x, データ列y, color='salmon')
グラフを論文用に指定する	sns.set(context='paper')
option: スカイブルー色を使う	color = 'skyblue'
散布図を黒い星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
横棒グラフをダークグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='darkgray')
option: フォントの色をライトコーラルに変更する	color = 'lightcoral'
真サブセットかどうか	aSet < aSet2
文字列中にひとつでも非大文字があるか調べる	any(not c.isupper() for c in s)
チョコレート色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
オブジェクトが関数かどうか調べる	callable(obj)
option: グラフの色をバイオレットに設定する	color = 'violet'
リストをnからナンバリングする	enumerate(aList, start=n)
三自然数の最大公約数を求める	math.gcd(n, n2, n3)
折れ線グラフの色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
標準入力から1行分読み込んで、改行を取り除く	sys.stdin.readline().rstrip()
データフレームから重複した行をドロップして、インプレイスする	df.drop_duplicates(inplace=True)
黒い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='k')
散布図の色をフォレストグリーンにする	plt.scatter(データ列x, データ列y, color='forestgreen')
データフレームの中のNaNの個数を数える	df.isna().sum()
棒グラフの色をアンティークホワイトにする	plt.bar(データ列x, データ列y, color='antiquewhite')
配列をリストから作成する	np.array(aList)
折れ線グラフの色をライムに設定する	plt.plot(データ列x, データ列y, color='lime')
二つの変数をコロンで区切って出力する	print(value, value2, sep=':')
ヒストグラムをライトゴールドロディイエロー色として描画する	plt.hist(データ列, color='lightgoldenrodyellow')
データフレームの列の中の欠損値の合計を求める	df[col].isna().sum()
データフレームのカラムのNaNを直前の値で補う	df[col].fillna(method='ffill')
ミスティローズ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
ファイルに文字列を書き込む	f.write(s)
文字列の開始位置からと終了位置の範囲に部分文字列が含まれるかどうか調べる	s.find(sub, start, end) != -1
パールバイオレットレッドにヒストグラムの色を変更する	plt.hist(データ列, color='palevioletred')
散布図をミディアムアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
データフレームの中に存在する日付データの数を数える	df.isin([value]).sum()
option: グラフの色をブラウンに変更する	color = 'brown'
option: カラムの名前をnamesに設定する	header = names
ファイルを文字コードtextで書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
カテゴリで色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図をライトサーモン色を使って描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgrey')
オプションで、出力先を標準出力に指定する	file = sys.stdout
リストの全ての要素をクリアにする	aList.clear()
データフレームをJSONLファイルにCSVファイルで書き込む	df.to_csv(filename)
option: スラッシュを区切り記号で使う	sep = '/'
リストとリストの散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
オールドレース色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
グラフに鉛直方向の実線を付ける	plt.axvline(x=0, linestyle='solid')
散布図をライトシアン色で描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
nが負の数	n < 0
折れ線グラフに丸マーカーを加える	plt.plot(データ列x, データ列y, marker='o')
棒グラフの色をレベッカパープルにする	plt.bar(データ列x, データ列y, color='rebeccapurple')
データ列の曜日は何日目か確認する	ds.dt.dayofweek
エポック秒を日付時刻にする	datetime.datetime.fromtimestamp(timestamp)
横棒グラフの色をホットピンクにする	plt.barh(データ列x, データ列y, color='hotpink')
横棒グラフをゲインズボロ色を使って描画する	plt.barh(データ列x, データ列y, color='gainsboro')
日付時刻データのタイムゾーン	aDatetime.timetz()
データフレームのリスト列を小数点以下n桁で丸める	df[aList].round(n)
プロットにy=0の実線を付ける	plt.axhline(y=0, linestyle='solid')
タプルをnからナンバリングする	enumerate(aTuple, start=n)
データフレームの欠損値をxに指定する	df.fillna(x)
棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
最適な場所に凡例を表示する	plt.legend(loc='best')
ヒストグラムをライトグレー色を用いて描画する	plt.hist(データ列, color='lightgray')
青色でヒストグラムを描画する	plt.hist(データ列, color='blue')
ヒストグラムの線種を破線に設定する	plt.hist(データ列, linestyle='dashed')
option: ミントクリームを使う	color = 'mintcream'
option: フォントの色をフクシアに設定する	color = 'fuchsia'
option: グラフの色をダークシアグリーンに変更する	color = 'darkseagreen'
棒グラフをライトシアン色で描画する	plt.bar(データ列x, データ列y, color='lightcyan')
モデルの予測値と実測値を散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
異なる列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
データフレームのNaNを最頻値に変更する	df.fillna(df.mode().iloc[0])
三つの文字列を順にプリントする	print(value, value2, value3)
２変数の最小値	min(x, y)
option: グラフの色をビスクに設定する	color = 'bisque'
数列とイテラブルについての散布図に▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムを青くする	plt.hist(データ列, color='b')
折れ線グラフの色をレモンシフォンに設定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
ひとつでも非空白が文字列中に含まれるか調べる	any(not c.isspace() for c in s)
整数を万の位で丸める	round(x, -4)
データフレームのカラムの中に存在する文字列の合計を求める	df[col].isin([value]).sum()
ヒストグラムの色をオーキッドに変更する	plt.hist(データ列, color='orchid')
イテラブルを文字列に変換してカンマによってつなげる	','.join(map(str, iterable))
実数が負の数	x < 0
option: 印を左三角に変える	marker = '<'
横棒グラフを小麦色色で描画する	plt.barh(データ列x, データ列y, color='wheat')
キューに値を積む	deq.append(element)
横棒グラフの色をダークシアンにする	plt.barh(データ列x, データ列y, color='darkcyan')
オブジェクトが無限に繰り返すイテラブル	itertools.repeat(element)
データフレームの重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
option: パープルを用いる	color = 'purple'
データ列の推移を破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
option: パウダーブルーにグラフの色を設定する	color = 'powderblue'
数式を数値にする	float(e)
データフレームからランダムに抽出する	df.sample()
線グラフの色をブラウンにセットする	plt.plot(データ列x, データ列y, color='brown')
データ列が何時か見る	ds.dt.hour
黒い△マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
Pandasで、フォーマットで文字列をdatetime64型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
データフレームの列がxより大きくx2より少ないデータを取り出す	df[(x < df[column]) & (df[column] < x2)]
横棒グラフの色をミディアムバイオレットレッドにする	plt.barh(データ列x, データ列y, color='mediumvioletred')
Pandasで、エポック秒のデータフレームのcollから日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
option: マーカーの色をシアンにする	markerfacecolor = 'cyan'
横棒グラフの色を耐火レンガにする	plt.barh(データ列x, データ列y, color='firebrick')
ファイルをEUCで開く]	open(filepath, encoding='euc_jp')
散布図に右三角印を使う	plt.scatter(データ列x, データ列y, marker='>')
グラフの凡例の場所を(x,y)に設定する	plt.legend(loc=(x, y))
データフレームを列によってソートして、上位n件を取り出す	df.sort_values(columns).head(n)
データフレームのリスト列の中にが存在する	df[aList].isin([value])
グローバル変数の一覧を使う	globals()
イテラブルのそれぞれを関数でフィルタする	map(func, iterable)
データフレームの列をNaNも加えてダミー変数にする	pd.get_dummies(df[column], dummy_na=True)
ミディアムバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
実数の二進対数を求める	math.log2(x)
散布図をコーンズシルク色として描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
散布図をスノー色を用いて描画する	plt.scatter(データ列x, データ列y, color='snow')
データを用いて重回帰モデルを学習する	model.fit(説明変数, 目的変数)
ペールグリーン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
データフレームのリストカラムのNaNを平均値で置き換える	df[aList].fillna(df[aList].mean())
折れ線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
ヒストグラムベースの勾配ブースティング分類木を作成する	model = sklearn.ensemble.HistGradientBoostingClassifier()
スラグレー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
ヒストグラムをライトグレー色として描画する	plt.hist(データ列, color='lightgray')
リストとリストの散布図を描いて、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
文字列の右端が部分文字列	s.endswith(sub)
バイナリ書き込みモードでファイルをオープンして]、fとする	f = open(filepath, mode='wb')
オブジェクトは浮動小数点数クラスのインスタンスか調べる	isinstance(obj, float)
散布図をダークグレー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
option: マーカーの色をラベンダーにする	markerfacecolor = 'lavender'
文字列の開始位置より後に部分文字列が含まれるか調べる	s.find(sub, start) != -1
option: UTF8を使う	encoding = 'utf-8'
ヒストグラムの色をダークオレンジに指定する	plt.hist(データ列, color='darkorange')
option: マーカーの色をスカイブルーにする	markerfacecolor = 'skyblue'
データフレームを'A'列と'B'列で昇順に並べ直し、、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
散布図に四角マーカーを使う	plt.scatter(データ列x, データ列y, marker='s')
オブジェクトは整数か調べる	isinstance(obj, int)
option: データ型としてブール型を使用する	dtype = np.int32
星印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
星印で折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームの中に文字列と文字列が存在するか調べる	df.isin([value, value2])
紺碧色のヒストグラムを描画する	plt.hist(データ列, color='azure')
折れ線グラフに赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
大バツ印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
データフレームの列を1000の位で丸めて整数型にする	df[col].round(-3).astype(int)
リストとリストの散布図を描画し、、▲マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
キューのstart番目からend番目までの部分要素	collections.deque(itertools.islice(deq, start, end))
表示できる最大行数を増やす	pd.set_option('display.max_rows', n)
列名リストでデータフレームを並べ、更新する	df.sort_values(by=column, inplace=True)
文字列を白色で表示する	print(f'\033[37m{value}\033[0m')
Pandasで、UNIX秒の文字列から日付データにする	pd.to_datetime(s, unit='s', utc=True)
ファイルからバイナリ書き込みストリームをオープンして]、fとする	f = open(filepath, mode='wb')
縦棒グラフをスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='skyblue')
横棒グラフをピンク色で描画する	plt.barh(データ列x, データ列y, color='pink')
リストにリストを追加する	aList.extend(aList2)
データフレームのリスト列の中にある文字列の個数を数える	df[aList].isin([value]).sum()
外れ値に強い線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
ゲインズボロ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
散布図のポイントマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データ列の値が正規分布にしたがって発生する累積確率を求める	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
スカイブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
option: グラフの色をシルバーに設定する	color = 'silver'
整数乱数で要素を埋めた配列	np.random.randint(開始値, 終了値, N)
散布図の色をフローラルホワイトにする	plt.scatter(データ列x, データ列y, color='floralwhite')
フォレストグリーン色のヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
文字列に日本語が含まれるかどうか確認する	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
整数nがリストのひとつ	n in aList
リストとイテラブルについて散布図を描画し、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
散布図の印を▲印にする	plt.scatter(データ列x, データ列y, marker='^')
日付時刻データが何日か知る	aDatetime.day
横棒グラフの色をミディアムオーキッドにする	plt.barh(データ列x, データ列y, color='mediumorchid')
横棒グラフの色をインディアンレッドにする	plt.barh(データ列x, データ列y, color='indianred')
プロットから格子線を消す	plt.grid(False)
データフレームの列のpercentパーセンタイル	df[col].quantile(percent/100)
グラフの描画で淡くパレットを用いる	sns.set(pallete='muted')
データ列の中にある文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
集合をイミュータブルに変換する	frozenset(aSet)
既存の行列をベースに全要素が初期値のベクトル	np.full_like(aArray, 初期値)
カラムの欠損値を平均値に指定する	ds.fillna(ds.mean())
osモジュールをインポートする	import os
option: グラフの色をアリスブルーに設定する	color = 'aliceblue'
行列のスカラー倍	aArray * n
rgbのダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
文字列は片仮名	('ァ' <= ch <= 'ン')
異なる列をキーとして2つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
カラムの第三四分位数	ds.quantile(0.75)
イテラブルを文字列リストに変換して、'改行で連結する	'\n'.join(map(str, iterable))
文字列を記号にして、変数にする	z = sympy.Symbol(s)
両端キューの要素数	len(deq)
数値をマゼンタで表示する	print(f'\033[35m{value}\033[0m')
文字列は漢字か	('\u4E00' <= ch <= '\u9FD0')
テキストファイルファイル名が	filename.endswith('.txt')
nとn2の差を求める	n - n2
文字列は全て印字できるか判定する	s.isprintable()
配列を平坦にする	aArray.flatten()
ティール色を使ってヒストグラムを描画する	plt.hist(データ列, color='teal')
折れ線グラフの色をシエナに変更する	plt.plot(データ列x, データ列y, color='sienna')
数列とリストについての散布図に黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: ブルーバイオレット色を用いる	color = 'blueviolet'
散布図のダイアモンドマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
実数の小数点を丸める	round(x)
option: ディープスカイブルー色を使う	color = 'deepskyblue'
カウンタから辞書を減らす	aCounter.subtract(aDict)
現在の時間数を見る	datetime.date.today().hour
折れ線グラフの上三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
整数nがタプルのどれかか調べる	n in aTuple
縦棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
昇順に列でデータフレームをソートする	df.sort_values(by=column, ascending=True)
データ列を百の位で四捨五入して、整数にする	ds.round(-2).astype(int)
散布図をダークグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
実数を実数で除した余り	x % y
線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
option: マーカーの色をライトシアンにする	markerfacecolor = 'lightcyan'
二つの集合の対称差集合を求める	aSet.symmetric_difference(aSet2)
辞書のキーに対応した値	aDict.get(key)
ヒストグラムを黄色色で描画する	plt.hist(データ列, color='yellow')
文字列の開始位置からと終了位置番目までの間に部分文字列がないか調べる	s.find(sub, start, end) == -1
散布図の色を暗い赤にする	plt.scatter(データ列x, データ列y, color='darkred')
カラムでデータフレームをグループ化して列の要約統計量を計算する	df.groupby(column).describe()[column2]
option: フォントの色をゴールドにする	color = 'gold'
散布図をダークカーキ色として描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*')
データフレームの未入力値を平均値で補う	df.fillna(df.mean())
option: プラム色を使う	color = 'plum'
リストとリストについて散布図をプロットして、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ハイパボリック・サインの逆数	math.asinh(x)
文字列全体が正規表現にASCII限定としてマッチするか見る	re.fullmatch(pattern, s, flags=re.ASCI)
線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
ヒストグラムをピンク色として描画する	plt.hist(データ列, color='pink')
option: ディムグレーにグラフの色を指定する	color = 'dimgray'
データフレームの歪度	df.kurt()
option: マーカーをポイントに設定する	marker = '.'
データフレームを表示するとき、折り返しをオフに設定する	pd.set_option('expand_frame_repr', False)
データフレームのカラムの中に含まれる文字列の数をカウントする	df[col].isin([value]).sum()
行列の列ごとの合計値	np.sum(aArray, axis=0)
ふたつのリストのインターセクション	list(set(aList) & set(aList2))
option: 分類木の最大深さを設定する	maxdepth = n
今日が木曜日か調べる	datetime.datetime.today().weekday() == 3
整数nの16進文字列を使う	hex(n)[2:]
ペールグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
マッピングをカウンタに変換する	collections.Counter(aDict)
線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
文字列をカンマによって区切って、列挙する	s.split(',')
整数の二乗	x ** 2
双方向キューのn番目を見る	deq[n]
線グラフの色をロイヤルブルーに指定する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームの末尾n行を取り出す	df.tail(n)
項目名で指定された項目をマッピングから取り出す	aDict.pop(key)
カテゴリで色分けしてデータフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
散布図をライトサーモン色で描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
タプルの平均値	sum(aTuple)/len(aTuple)
n進文字列をバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
四角マーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
option: グラフの色をラベンダーに設定する	color = 'lavender'
配列と数列についての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
空白文字を全部使う	string.whitespace
折れ線グラフの色をミディアムバイオレットレッドにする	plt.plot(データ列x, データ列y, color='mediumvioletred')
スクリプト名	sys.argv[0]
イテラブルとリストについての散布図にrgbの▽マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
バイナリモードでファイルを開く]	open(filepath, mode='rb')
オブジェクトのメモリビューを使う	memoryview(obj)
散布図の四角印を青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
横棒グラフをスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='skyblue')
行列のユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
数値の符号をコピーにする	math.copysign(x, x2)
option: スチールブルーを使う	color = 'steelblue'
データフレームのリストカラムの欠損値を中央値に設定する	df[aList].fillna(df[aList].median())
ファイルがない	not os.path.exists(filepath)
縦棒グラフを描画する	plt.bar(ラベル列, データ列)
データフレームのカラムの名前を付け直す	df.rename(columns={column: name})
selectorsでマスクされたシーケンスの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
ミディアムターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
既存のファイルをUTF8を用いて追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
文字列を最後の部分文字列で二つに区切って、最初の文字列を求める	s.rpartition(sub)[0]
データフレームのリストカラムの中に文字列が含まれる	df[aList].isin([value])
文字列を青色でプリントできる文字列にする	f'\033[34m{value}\033[0m'
option: マーカーの色をオレンジレッドにする	markerfacecolor = 'orangered'
プロットで使うy軸の名前をuntitledに設定する	plt.ylabel('y軸ラベル')
リストとリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
文字列の中のASCII限定として正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
散布図の左三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
トマト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tomato')
切り下げて整数にする	math.floor(x)
折れ線グラフの丸マーカーを青くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
データフレームの列からユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
オプションで出力先を標準エラーに指定する	file = sys.stderr
配列をベースに全要素が0の行列	np.zeros_like(aArray)
リストをイミュータブルにする	tuple(aList)
タン色のヒストグラムを描画する	plt.hist(データ列, color='tan')
文字列をカンマで分割して、文字列リストに変換する	s.split(',')
散布図の色を青緑にする	plt.scatter(データ列x, データ列y, color='teal')
データフレームの列と列のヒートマップを描画する	sns.heatmap(df[[column, column2]].corr())
データフレームを複数の列を用いて昇順にソートする	df.sort_values(by=column, ascending=True)
折れ線グラフをナバホホワイト色で描画する	plt.plot(データ列x, データ列y, color='navajowhite')
option: どの行もカラムの名前にしない	header = None
option: グラフの色をダークオリーブグリーンに設定する	color = 'darkolivegreen'
グラフの縦横比を等しくする	plt.axis('equals')
データフレームを列を用いてソートして上位n件を取り出す	df.sort_values(columns).head(n)
グラフを表示する	plt.show()
ケンドール相関係数としてデータフレームの相関行列	df.corr(method='kendall')
データフレームを列によってソートする	df.sort_values(by=column)
スラッシュで区切って二つの数値をプリントする	print(value, value2, sep='/')
バイナリ書き込み用にファイルを開いて]fとする	f = open(filepath, mode='wb')
両端キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
データフレームを複数の列で降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
ヒストグラムの色をダークサーモンに設定する	plt.hist(データ列, color='darksalmon')
フォーマットfmtでデータ列をPandasの日付型にする	pd.to_datetime(ds, format=fmt)
リストとリストについての散布図に文字列という短い説明用のラベルを設定する	plt.scatter(データ列x, データ列y, label=s)
折れ線グラフの下三角印の大きさを指定する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
プロットに目盛線を表示する	plt.grid(True)
Pandasで、dateStringを日付データにする	pd.to_datetime(dateString)
データフレームを二つの列を用いて整列して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
データフレームのリストカラムが正規分布からどの程度、尖っているか確認する	df[aList].skew()
ダークオレンジ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorange')
横棒グラフをライトシアン色を使って描画する	plt.barh(データ列x, データ列y, color='lightcyan')
データフレームのそれぞれのグループごとの個数	df.groupby(column).count()
降順にデータフレームを'A'列によって破壊的に整列する	df.sort_values(by='A', ascending=False, inplace=True)
散布図に赤い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='r')
散布図の四角印の色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
イテラブルとリストについて散布図を描画し、、その大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='grey')
ライトグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
ファイルからすべてのシートを読む	pd.read_excel(filename, sheet_name=None)
データ列の曜日数	ds.dt.dayofweek
整数nを二進表現に変換する	bin(n)
文字列を正規表現で分ける	re.split(pattern, s)
データフレームの中に文字列と文字列がいくつあるか数える	df.isin([value, value2]).sum()
アヤメのデータセットをロードする	sns.load_dataset('iris')
nプラスn2を計算する	n + n2
プロットを画面に設定する	sns.set(context='notebook')
ヒストグラムの色をラベンダーブラッシュに変更する	plt.hist(データ列, color='lavenderblush')
リストとリストについての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
文字列をコロンで分割して、文字列リストに変換する	s.split(':')
ミスティローズ色でヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
イテラブルをy軸、データ列をx座標として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフの色をサンディーブラウンに設定する	plt.plot(データ列x, データ列y, color='sandybrown')
ロイヤルブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
折れ線グラフの色をミディアムパープルにセットする	plt.plot(データ列x, データ列y, color='mediumpurple')
散布図を青紫色で描画する	plt.scatter(データ列x, データ列y, color='violet')
散布図をラベンダー色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavender')
データフレームのリスト列の値が欠損値か調べる	df[aList].isna()
データフレームの中にいくつ日付データがあるか数える	df.isin([value]).sum()
option: グラフの色を珊瑚に変更する	color = 'coral'
オブジェクトは整数クラスか	isinstance(obj, int)
データフレームのカラムのどの値が最も現れるか見る	df[col].mode()
option: マーカーを上三角に変更する	marker = '^'
アクア色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
オブジェクトがあるクラス	isinstance(obj, クラス)
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
平均値でデータフレームのNaNを補う	df.fillna(df.mean())
文字列の先頭から空白やタブを取り除く	s.lstrip()
データフレームを列名リストで昇順にソートする	df.sort_values(by=column, ascending=True)
ふたつのリストの積集合	list(set(aList) & set(aList2))
'A'列と'B'列の値によってデータフレームをグループ化する	df.groupby(['A', 'B'])
分類モデルの偽陽性を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
スカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
文字列中の部分文字列の登場を数える	s.count(sub)
タイムスタンプを使う	import time
散布図のマーカーをクロスにする	plt.scatter(データ列x, データ列y, marker='x')
棒グラフをトマト色として描画する	plt.bar(データ列x, データ列y, color='tomato')
データフレームのヒストグラムを横に並べて見る	sns.displot(df, x='列名', col='カテゴリ名')
実部と虚部から複素数を生成する	complex(x, y)
散布図のマーカーを下三角にする	plt.scatter(データ列x, データ列y, marker='v')
散布図の色をオーキッドにする	plt.scatter(データ列x, データ列y, color='orchid')
ロードされたモジュールの一覧を知る	sys.modules
棒グラフの色をライトゴールドロディイエローにする	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
日付データを文字列でフォーマットして文字列に変換する	"aDate.strftime(""%d/%m/%y"")"
スチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='steelblue')
折れ線グラフのバツマーカーを青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
散布図に星マーカーを加える	plt.scatter(データ列x, データ列y, marker='*')
両端キュー中の文字列を数える	deq.count(element)
option: 耐火レンガにグラフの色を指定する	color = 'firebrick'
タイムスタンプデータからn日分、減算する	aDatetime - datetime.timedelta(days=n)
ヒストグラムをブラック色を使って描画する	plt.hist(データ列, color='black')
ヒストグラムを３つ並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
行列の各要素の最小公倍数	np.lcm(aArray, aArray2)
データフレームのカラムの値をまとめて正規表現patternで置換する	df[col].replace(pattern, repl, regex=True)
データフレームに重複があるか確認する	df.duplicated()
ファイルを改行を取り除いて一行ずつ読む	f.readline()
year年month月day日hour時minute分をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
実数の小数部	math.modf(x)[0]
マルーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
０で全要素を初期化した整数型の行列	np.zeros(行数, 列数, dtype=np.int)
文字列の右端から空白を取り除く	s.rstrip(' ')
データ列のユニークな値の個数を見る	ds.nunique()
配列と配列の散布図を描画して、マーカーを▲に変更する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムをコーラル色を用いて描画する	plt.hist(データ列, color='coral')
青いポイントマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
折れ線グラフを赤い点線として描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
nからn2を引く	n - n2
option: フォントの色をグリーンに変更する	color = 'green'
データフレームをまとめて丸める	df.round()
文字列を日付データにする	pd.to_datetime(s)
文字列の右側からタブを取り除く	s.rstrip('\t')
ミディアムブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
グリッドの線スタイルを実線に変更する	plt.grid(linestyle='solid')
全要素を初期値で初期化した配列	np.full(要素数, 初期値, dtype=np.int)
空のタプル	()
rgbの右三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: ミディアムシアグリーン色を使う	color = 'mediumseagreen'
データフレームをグループ化して、ヒストグラムで見る	sns.histplot(df, x='列名', hue='カテゴリ名')
option: 色をバイオレットに設定する	color = 'violet'
rgbのダイアモンドマーカーを配列とイテラブルの散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
整数nを二進数文字列に変換する	bin(n)[2:]
文字列の中のパターンによるすべてのマッチを使う	re.findall(pattern, s)
棒グラフの色をスカイブルーにする	plt.bar(データ列x, データ列y, color='skyblue')
グラフ描画でカーネル密度推定を使用する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
横棒グラフの色をオーキッドにする	plt.barh(データ列x, データ列y, color='orchid')
散布図に黒い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
データ列の未入力値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
データフレームのリストカラムの文字列を未入力値にする	df[aList].replace(s, np.nan)
オブジェクトが文字列か調べる	isinstance(obj, str)
キューから指定された範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
ヒストグラムの色を黄色に指定する	plt.hist(データ列, color='yellow')
散布図に黒いバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
option: 先頭カラムをインデックスに設定する	index_col = 0
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgray')
棒グラフを珊瑚色として描画する	plt.bar(データ列x, データ列y, color='coral')
グレー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
データフレームの列の名前を列挙する	df.columns
データ列の折れ線グラフを星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*')
ラベンダー色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
カラムの中にいくつNaNがあるか求める	ds.isna().sum()
横棒グラフをオリベドラブ色で描画する	plt.barh(データ列x, データ列y, color='olivedrab')
option: ダイアモンドマーカーを描画する	marker = 'D'
タプル上で項目名が未定義か調べる	key not in aDict
特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
配列を等しい量になるようにn個にビニングする	pd.qcut(aArray, n)
JSONLファイルにデータフレームを保存する	df.to_csv(filename)
ハニーデュー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='honeydew')
'A'列によって表データを整列する	df.sort_values(by='A')
散布図に丸マーカーを使う	plt.scatter(データ列x, データ列y, marker='o')
あらかじめASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
散布図を左三角マーカーで描画する	plt.scatter(データ列x, データ列y, marker='<')
データフレームから指定された二つの列を抽出する	df[[column, column2]]
カラーコードで折れ線グラフの色を設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームのそれぞれのグループごとの合計	df.groupby(column).sum()
データフレームを二つの列の値によってグループ化する	df.groupby(['A', 'B'])
線グラフを色付きの実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
option: フォントの色をアンティークホワイトに設定する	color = 'antiquewhite'
データフレームのカラムがどの程度、分散しているか見る	df[col].var()
ヒストグラムをパールバイオレットレッド色を用いて描画する	plt.hist(データ列, color='palevioletred')
棒グラフをダークターコイズ色で描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
黒い左三角マーカーを配列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='<', c='k')
表をインポートする	import pandas as pd
データフレームを各グループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
オレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
散布図のクロスマーカーを青色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
円グラフを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
nを切り捨てながらn2分の1にする	n //= n2
データ列を100の位で丸めて整数型にする	ds.round(-2).astype(int)
option: 色をシルバーに指定する	color = 'silver'
データフレームをグループ化しそれぞれの列に対し平均値を算出する	df.groupby(column)[column2].mean()
データフレームから重複したデータを残さず、落とす	df.drop_duplicates(keep=False)
線グラフの色をコーンズシルクに変更する	plt.plot(データ列x, データ列y, color='cornsilk')
データフレームの列の文字列が文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
整数が負の数か調べる	x < 0
棒グラフの色をグリーンイエローにする	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームを各カラムと列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
インディアンレッド色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
新しい文字列で文字列中のパターンを置き換える	re.sub(pattern, newsub, s)
リストの要素を昇順に並べ変える	sorted(aList, reverse=False)
anemptystring	''
ヒストグラムの色をミディアムアクアマリンに設定する	plt.hist(データ列, color='mediumaquamarine')
棒グラフの色をライトサーモンにする	plt.bar(データ列x, データ列y, color='lightsalmon')
nかけるn2を計算する	n * n2
デピンク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームの欠損値を第二四分位数に指定する	df.fillna(df.median())
コルモゴロフ・スミルノフ検定を行う	scipy.stats.kstest(データ列, 'norm')
新しいロッソ回帰モデルを新規作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
プロット中で日本語を使えるようにする	sns.set(font='IPAexGothic')
データフレームのポイントプロットを描画する	sns.pairplot(hue='カテゴリ列', data=df)
配列のスカラー倍	aArray * n
データフレームの重複した行数のマスク	df.duplicated()
データフレームのn行目を削除する	df.drop(n, axis=0)
データフレームのリストカラムを百の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
データフレームを'A'列の値毎にグループ分けし、、列挙する	[(name, group) for name, group in df.groupby('A')]
データ列とリストの散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
赤い棒グラフを描画する	plt.bar(データ列x, データ列y, color='r')
ファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
デフォルトでプロットの見栄えをいい感じに変更する	sns.set()
折れ線グラフを描く	plt.plot(データ列x, データ列y)
xが1、もしくは2か判定する	x == 1 or x == 2
バリーウッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
option: マーカーの色をカデットブルーにする	markerfacecolor = 'cadetblue'
rgbのクロスマーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線プロットの色をRGBで変更する	plt.plot(データ列x, データ列y, color='#800080')
ビン数nを用いてデータ列をビン分割する	pd.cut(ds, n)
文字列が組の要素でないかテストする	element not in aTuple
棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
文字列を部分文字列で分割して、列挙する	s.split(sub)
データフレームのリストカラムを10の位で丸める	df[aList].round(-1)
データフレームの標本標準偏差	df.std()
option: 下三角マーカーを使う	marker = 'v'
データフレームを各列と列の組み合わせ毎にグループ化して、個数を求める	df.groupby([column, column2], as_index=False).count()
線グラフの色をインディゴに設定する	plt.plot(データ列x, データ列y, color='indigo')
本日が水曜日か調べる	datetime.datetime.today().weekday() == 2
折れ線グラフの菱形マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
option: グラフの色をホットピンクに指定する	color = 'hotpink'
データフレームを各列毎にグループ化して文字列という名前のグループを使う	df.groupby(column).get_group(s)
セットからエラーなく要素を除く	aSet.discard(element)
データフレームのリストカラムの第一四分位数を求める	df[aList].quantile(0.25)
標準入力を使う	sys.stdin
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='grey')
option: グラフの色を茶色に設定する	color = 'brown'
option: 黄色色を使う	color = 'yellow'
折れ線グラフのバツ印の色を指定する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
複数の列の値によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
option: マーカーを丸に設定する	marker = 'o'
赤にヒストグラムの色を設定する	plt.hist(データ列, color='red')
データフレームの列の標本標準偏差	df[col].std()
横棒グラフをダークターコイズ色として描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
sepを区切りにして文字列リストをひとつの文字列にする	sep.join(aStringList)
折れ線グラフをスノー色を用いて描画する	plt.plot(データ列x, データ列y, color='snow')
線グラフの色をインディアンレッドにセットする	plt.plot(データ列x, データ列y, color='indianred')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
option: グレー色を用いる	color = 'gray'
切片なしの重回帰モデルを作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategrey')
棒グラフをダークバイオレット色で描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データ列の欠損値を最小値で置換する	ds.fillna(ds.min())
横棒グラフをレモンシフォン色で描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
ヒストグラムの色をダークオーキッドに設定する	plt.hist(データ列, color='darkorchid')
２次元リストをflattenする	sum(aList)
option: フォントの色をアクアに変更する	color = 'aqua'
特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
文字列の開始位置以降が部分文字列で始まるか調べる	s.startswith(sub, start)
データフレームのカラムを十の位で丸める	df[col].round(-1)
実数のsin	math.sin(x)
option: フォントの色をダークレッドに設定する	color = 'darkred'
option: グラフの色をラベンダーブラッシュに指定する	color = 'lavenderblush'
多次元データをMSDで淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
棒グラフをダークゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームを表示するとき、ヘッダー行を右寄せに変更する	pd.set_option('colheader_justify', 'right')
実数の正接を求める	math.tan(x)
赤色として散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
データ列とリストについて散布図をプロットして菱形マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
整数nを八進表現に変換する	oct(n)
データフレームのそれぞれのグループ毎の平均値を計算する	df.groupby(column).mean()
現在が土曜日か調べる	datetime.datetime.today().weekday() == 5
実数の双曲線正接を求める	math.tanh(x)
nがn2の倍数か	n % n2 == 0
ヒストグラムをダークシアン色を用いて描画する	plt.hist(データ列, color='darkcyan')
日付時刻データのタイムゾーンを使う	aDatetime.timetz()
データフレームから重複する行を残さず消す	df.drop_duplicates(keep=False)
上限から下限までの区間で度数分布図を描画する	plt.hist(データ列, range=(start, end))
リネン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='linen')
データフレームを複数の列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
棒グラフをレモンシフォン色で描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
データフレームのリストカラムの欠損値を直前の値で埋める	df[aList].fillna(method='ffill')
折れ線グラフをブランチドアーモンド色で描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
グラフの描画で暗くカラーパレットを使う	sns.set(pallete='dark')
データフレームから列を４つのみ選択する	df[[column, column2, column3, column4]]
小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='gray')
文字列の末尾が部分文字列かどうか確認する	s.endswith(sub)
重複していない行	df[not df.duplicated(keep=False)]
データフレームのカラムの中の未入力値の合計を求める	df[col].isna().sum()
横棒グラフの色をブランチドアーモンドにする	plt.barh(データ列x, データ列y, color='blanchedalmond')
データフレームのヒストグラムを横に並べて図示する	sns.displot(df, x='列名', col='カテゴリ名')
最大値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].max())
散布図を左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<')
データフレームを列で集約し、、それぞれのグループごとの件数を知る	df.groupby(column).size()
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgray')
ヒストグラムをダークゴールデンロッド色で描画する	plt.hist(データ列, color='darkgoldenrod')
散布図をスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='slateblue')
黒い大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
サポートベクター回帰モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
青緑色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
option: フォントの色をライトスレイグレーに指定する	color = 'lightslategrey'
文字列は識別子名か調べる	s.isidentifier()
ファイルをBOM付きで開く]	open(filepath, encoding='utf_8_sig')
タブ	'\t'
ロバスト推定を用いてクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
文字列が漢字	('\u4E00' <= ch <= '\u9FD0')
option: ブルーバイオレットにグラフの色を設定する	color = 'blueviolet'
option: マーカーを大バツに変更する	marker = 'X'
散布図のマーカーを三角にする	plt.scatter(データ列x, データ列y, marker='^')
データフレームをBOMを付けてJSONLファイルに保存する	df.to_csv(filename, encoding='utf_8_sig')
データフレームのリストカラムの未入力値を直前の値で補う	df[aList].fillna(method='ffill')
option: パレットトルコイズにグラフの色を設定する	color = 'paleturquoise'
方程式として数式の変数の解を求める	sympy.solve(e, z)
CSVでJSONLファイルにデータフレームを保存する	df.to_csv(filename)
マゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='magenta')
横棒グラフをシアン色を使って描画する	plt.barh(データ列x, データ列y, color='cyan')
度数分布図をプロットする	plt.hist(データ列)
option: フォントの色をダークシアンに設定する	color = 'darkcyan'
データフレームをCSVから読み込む	pd.read_csv(filename, sep=',')
組のn番目以降の要素を取り出す	aTuple[n:]
2つのデータフレームを列をキーにしてジョインする	pd.merge(df, df2, on=column)
黒い星マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='*', c='k')
データフレームのリストカラムが正規分布からどの程度尖っているか見る	df[aList].skew()
データ列を箱ひげ図で描画する	plt.boxplot(データ列)
マゼンタ色でヒストグラムを描画する	plt.hist(データ列, color='magenta')
横棒グラフの色をミディアムスプリンググリーンにする	plt.barh(データ列x, データ列y, color='mediumspringgreen')
文字列を区切りで分割して列挙する	s.split(sep)
フクシア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームのリストカラムの空文字を欠損値に変換しドロップする	df[aList].replace('', np.nan).dropna()
グラフをデフォルトでいい感じに設定する	sns.set()
３整数の最大公約数	math.gcd(n, n2, n3)
文字列がタプルの要素でないか	element not in aTuple
標準入力から1行分読み込む	sys.stdin.readline()
左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの左三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
オブジェクトはリストかタプルかテストする	isinstance(obj, (list)
折れ線グラフの色をオレンジに指定する	plt.plot(データ列x, データ列y, color='orange')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
イテラブルをカウントして、カウンタを更新する	aCounter.update(iterable)
文字列中の片仮名を平仮名にする	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
ミディアムシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
パールバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
文字列を大文字・小文字を無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgrey')
縦棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
NULLに等しい値	None
正規分布にしたがってランダムにデータ列を生成する	scipy.stats.norm.rvs(loc=平均値, scale=標準偏差, size=データ数)
option: オリベドラブにグラフの色を設定する	color = 'olivedrab'
真	True
ヒストグラムをダークカーキ色で描画する	plt.hist(データ列, color='darkkhaki')
nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
option: ダークマゼンタを用いる	color = 'darkmagenta'
データフレームから重複をドロップする	df.drop_duplicates()
双方向キューに要素をプッシュする	deq.append(element)
日付時刻データにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
option: バイオレットを使う	color = 'violet'
n×n2の二次元リスト	[[0] * n for _ in range(n2)]
シエナ色のヒストグラムを描画する	plt.hist(データ列, color='sienna')
option: マーカーの色を淡いピンク色にする	markerfacecolor = 'lightpink'
データフレームがどれだけ分散しているか見る	df.var()
option: ミントクリームを使用する	color = 'mintcream'
タプルの全順列	itertools.permutations(iterable)
トマト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
時間を用いる	import time
文字列中にひとつでも非大文字が含まれるか	any(not c.isupper() for c in s)
カウンタを高頻出方から列挙する	aCounter.most_common()
散布図のマーカーを青くする	plt.scatter(データ列x, データ列y, markerfacecolor='b')
リストと配列の散布図に赤いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='r')
ヒストグラムをダークサーモン色で描画する	plt.hist(データ列, color='darksalmon')
２つのデータフレームを縦方向に合体させる	pd.concat([df, df2])
棒グラフの色をサンディーブラウンにする	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームの列を小数点以下n桁で丸める	df[col].round(n)
要素は集合に含まれる	element in aSet
横棒グラフの色をタンにする	plt.barh(データ列x, データ列y, color='tan')
2を底とする小数点数の対数	math.log2(x)
列名を指定された列の名前一覧に置き換える	df.columns = columns
横棒グラフの色をアクアにする	plt.barh(データ列x, データ列y, color='aqua')
文字列の開始位置からと終了位置までの範囲に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
ブラック色を用いてヒストグラムを描画する	plt.hist(データ列, color='black')
配列とデータ列の散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
option: ミディアムアクアマリン色を用いる	color = 'mediumaquamarine'
タプル中の要素が少なくとも一つ真か調べる	any(aTuple)
ミントクリーム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
棒グラフをオリーブ色で描画する	plt.bar(データ列x, データ列y, color='olive')
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightgreen')
パレットトルコイズにヒストグラムの色を設定する	plt.hist(データ列, color='paleturquoise')
データフレームの中にある日付データの個数を数える	df.isin([value]).sum()
文字列を正規表現で分割する	re.split(pattern, s)
オールドレース色の散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
本日を文字列でフォーマットして文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
option: コーンフラワーブルー色を用いる	color = 'cornflowerblue'
ミスティローズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mistyrose')
新しい線形回帰モデルを作成する	model = sklearn.linear_model.LinearRegression()
option: 文字コードをSJISに設定する	encoding = 'shift_jis'
データフレームを列によってソートして、下の方n件を取り出す	df.sort_values(columns).tail(n)
暗い赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
option: グラフの色を赤に設定する	color = 'red'
茶色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
ファイルをSJISとしてオープンする]	open(filepath, encoding='shift_jis')
リスト内の要素は全て真か調べる	all(aList)
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
リストとリストについての散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフをネイビー色で描画する	plt.plot(データ列x, データ列y, color='navy')
グラフのy軸を対数に変更する	plt.yscale('log')
ライム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lime')
データフレームのカラムの欠損値を中央値で埋める	df[col].fillna(df[col].median())
折れ線グラフの三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
文字列は十進数字かどうか調べる	s.isdecimal()
貝殻色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
データフレームの中の欠損値をドロップする	df.dropna()
部分文字列が文字列の開始位置以降にないか調べる	s.find(sub, start) == -1
整数nはセットのどれかか調べる	n in aSet
グラフのカラーパレットを全般的に明るくする	sns.set(pallete='bright')
青い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
ミディアムオーキッド色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
配列のユニークな要素	np.unique(aArray)
散布図をオリーブ色として描画する	plt.scatter(データ列x, データ列y, color='olive')
折れ線グラフをミディアムターコイズ色として描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
データフレームの散布図に多項式回帰を加える	sns.regplot(data=df, x='列名', y='列名', order=2)
折れ線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフをスノー色で描画する	plt.plot(データ列x, データ列y, color='snow')
ヒストグラムをシアン色として描画する	plt.hist(データ列, color='cyan')
文字列はタイトルケースか調べる	s.istitle()
option: グラフの色をミスティローズに設定する	color = 'mistyrose'
データフレームを複数の列によって昇順にソートする	df.sort_values(by=column, ascending=True)
option: ライトスレイグレーを使う	color = 'lightslategrey'
データフレームのリストカラムが正規分布からどの程度、尖っているか見る	df[aList].skew()
プラットホームはウィンドウズ	sys.platform.startswith('win32')
xが一桁の正の数かどうか確認する	0 <= x <= 9
ファイル全体をリストにする	[s.strip() for s in f.readlines()]
option: 配列のデータ型を指定する	dtype = np.int8
赤い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームのリスト列の中に文字列とがいくつあるか数える	df[aList].isin([value, value2]).sum()
集合から任意の要素を取り出す	aSet.pop()
データフレームを列の値でグループ化し、要約統計量を求める	df.groupby(column).describe()
配列を縦軸リストをx軸として、大きさnの散布図を描く	plt.scatter(データ列x, データ列y, s=n)
xが一桁の数かどうか調べる	-9 <= x <= 9
カラムのNaNを中央値にセットする	ds.fillna(ds.median())
線グラフの色をパウダーブルーに変更する	plt.plot(データ列x, データ列y, color='powderblue')
option: グラフの色をゲインズボロに設定する	color = 'gainsboro'
タプルからカウンタを用意する	collections.Counter(aDict)
nが偶数かどうか確認する	n % 2 == 0
データ列を等量でn個にビン分割する	pd.qcut(ds, n)
変数を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
赤い上三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
xが一桁の整数か調べる	-9 <= x <= 9
データフレームのそれぞれのグループごとの平均値	df.groupby(column).mean()
折れ線グラフを赤い一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
二つの集合がセットと交わりを持たないか	aSet.isdisjoint(aSet2)
折れ線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
日付時刻データと日付時刻データの時間差が何分か知る	(aDatetime - aDatetime2).total_seconds()//60
散布図のポイントマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
option: カーキにグラフの色を設定する	color = 'khaki'
棒グラフをミディアムシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
散布図をペールグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='palegreen')
数式の変数を数値で置き換える	e.subs(z, e2)
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightgreen'
データフレームのリスト列のpercent分位数	df[aList].quantile(percent/100)
データフレームのリストカラムを10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
ヒストグラムの色をクリムゾンに設定する	plt.hist(データ列, color='crimson')
データフレームとデータ列を横方向に合体させる	pd.concat([df, ds], axis=1)
線グラフをミディアムオーキッド色を使って描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
グラフをスライド用に設定する	sns.set(context='talk')
データフレームの中の列を中央値でビン分割する	pd.qcut(df[col], 2)
配列とリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
散布図をレモンシフォン色で描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
横棒グラフの色をフォレストグリーンにする	plt.barh(データ列x, データ列y, color='forestgreen')
ロバストな線形分類モデルを作成する	model = sklearn.linear_model.HuberClassifier()
文字列をシンボルに変換する	sympy.Symbol(s)
ファイルパスをSJISでオープンする]	open(filepath, encoding='shift_jis')
数式の微分を求める	sympy.diff(e)
n割るn2を算出する	n / n2
データフレームの列の値が欠損値か確認する	df[col].isna()
棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
文字列の先頭を使う	s[0]
折れ線グラフをトマト色で描画する	plt.plot(データ列x, データ列y, color='tomato')
タプルを展開してプリントする	print(*aTuple)
データフレームを列によってソートし、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
データ列の中央値	ds.median()
破線に折れ線グラフの線種を設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図でデータフレームの全列を描画する	sns.pairplot(df)
データフレームの列を十の位で丸めて、整数にする	df[col].round(-1).astype(int)
配列の列ごとの平均値を求める	np.mean(aArray, axis=0)
日付時刻データにn日分、加算する	aDatetime + datetime.timedelta(days=n)
行列と同じ大きさの空配列を作成する	np.empty_like(aArray)
option: マーカーの色をクリムゾンにする	markerfacecolor = 'crimson'
直後の値でデータフレームのカラムの欠損値を埋める	df[col].fillna(method='bfill')
降順に２つの列によってによってデータフレームを並べ直す	df.sort_values(by=['A', 'B'], ascending=False)
データフレームの内で列に重複があるか確認する	df.duplicated(subset=column)
ロージーブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='rosybrown')
事前にケースを無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
最大値と最小値でデータを正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
プロットの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
option: シアン色を使う	color = 'cyan'
オブジェクトのバイトサイズを確める	sys.getsizeof(obj)
折れ線グラフの色を青緑に変更する	plt.plot(データ列x, データ列y, color='teal')
配列と数列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
数値の変数を数値で置き換える	e.subs(z, e2)
グラフをパステル調にする	sns.set(pallete='pastel')
本日の年数	datetime.datetime.today().year
nとn2の論理和	n | n2
実数の逆正弦を求める	math.asin(x)
実数の仮数	math.frexp(x)[0]
リストを引数として展開して出力する	print(*aList, sep=',')
option: マーカーの色をミディアムシアグリーンにする	markerfacecolor = 'mediumseagreen'
棒グラフの色を耐火レンガにする	plt.bar(データ列x, データ列y, color='firebrick')
横棒グラフをミディアムスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
散布図の▽マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
折れ線グラフに赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
横棒グラフをミディアムスレートブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
両端キュー中の要素の出現数を数える	deq.count(element)
実数に浮動小数点数をかける	x * y
option: 青緑色を使う	color = 'teal'
パステル調に色をグラフの描画で用いる	sns.set(pallete='pastel')
２つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
ビン数nを用いて配列をビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
折れ線グラフをサドルブラウン色として描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
オブジェクトはバイト列クラスか調べる	isinstance(obj, bytes)
年月日と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
両端キューが空か調べる	len(deq) == 0
インディアンレッドにヒストグラムの色をセットする	plt.hist(データ列, color='indianred')
日付時刻データの時間	aDatetime.hour
散布図の色をライトグリーンにする	plt.scatter(データ列x, データ列y, color='lightseagreen')
青い一点鎖線を用いて折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: ダークグレーを使う	color = 'darkgray'
データ列の第二四分位数	ds.median()
option: ブラック色を用いる	color = 'black'
タプルをnから順序付けする	enumerate(aTuple, start=n)
整数nがリストのどれか	n in aList
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategray')
option: 文字列を改行の代わりに用いる	end = s
ローングリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lawngreen')
ヒストグラムをダークゴールデンロッド色を使って描画する	plt.hist(データ列, color='darkgoldenrod')
変数を太文字でプリントする	print(f'\033[1m{value}\033[0m')
散布図のマーカーを左三角にする	plt.scatter(データ列x, データ列y, marker='<')
既存の配列を元にして全要素が1の配列	np.ones_like(aArray)
ラベンダーブラッシュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
データフレームの列の文字列が文字列が含まれない行を選ぶ	df[not df[column].str.contains(s)]
グラフの描画で淡く色を使う	sns.set(pallete='muted')
ローングリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
散布図の丸マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
散布図に赤い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームのリスト列を1000の位で丸めて、整数にする	df[aList].round(-3).astype(int)
ヒストグラムの色をモカシンに変更する	plt.hist(データ列, color='moccasin')
predicateFuncが真となるイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームのリスト列を10の位で丸めて整数にする	df[aList].round(-1).astype(int)
列のユニークな値の個数	ds.nunique()
今日の曜日を整数で使う	datetime.datetime.today().weekday()
文字列に漢字が含まれるか調べる	re.search('[\u4E00-\u9FD0]', s)
文字列の接頭辞が部分文字列か調べる	s.startswith(sub)
option: ポイント印を使う	marker = '.'
データフレームの欠損値をxで埋める	df.fillna(x)
赤い破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
散布図に▽マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
列'A'と列'B'をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
option: アンティークホワイトを使う	color = 'antiquewhite'
線グラフの色をライトスカイブルーに指定する	plt.plot(データ列x, データ列y, color='lightskyblue')
配列を転置する	aArray.T
option: グラフの色をピーチパフに変更する	color = 'peachpuff'
折れ線グラフの色をアンティークホワイトに変更する	plt.plot(データ列x, データ列y, color='antiquewhite')
データフレームを'A'列によってソートして、NaNを先頭にする	df.sort_values(by='A', na_position='first')
ブランチドアーモンド色でヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
リストから文字列を捨てる	aList.remove(element)
縦棒グラフをスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='springgreen')
ファイルパスをSJISで開く]	open(filepath, encoding='shift_jis')
ヒストグラムをオールドレース色を使って描画する	plt.hist(データ列, color='oldlace')
ヒストグラムの色をダークゴールデンロッドに設定する	plt.hist(データ列, color='darkgoldenrod')
イテラブルとリストの散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
option: フォントの色をダークカーキに設定する	color = 'darkkhaki'
文字列に変換してイテラブルを結合する	''.join(map(str, iterable))
整数nがセットのどれかか	n in aSet
折れ線グラフをミディアムパープル色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
変数を緑色にする	f'\033[32m{value}\033[0m'
データフレームを複数の列の値によってグループ化し、要約統計量を求める	df.groupby(columns).describe()
ベージュ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='grey')
組の合計	sum(aTuple)
散布図の丸マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
アンティークホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
文字列が文字列リストに含まれるか調べる	s in aStringList
文字列を最後の部分文字列で二分し、最初の文字列を求める	s.rpartition(sub)[0]
散布図をアクア色として描画する	plt.scatter(データ列x, データ列y, color='aqua')
空のヒストグラムベースの勾配ブースティング分類木を作成する	model = sklearn.ensemble.HistGradientBoostingClassifier()
option: グレー色を使う	color = 'gray'
option: ダークシアン色を使う	color = 'darkcyan'
散布図をグリーンイエロー色で描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
option: 改行をセパレータで使う	sep = '\n'
ベクトルの要素ごとの積	np.multiply(aArray, aArray2)
最初の列を表データから除く	df[df.columns[1:]]
option: ダークバイオレット色を使用する	color = 'darkviolet'
散布図をライトイエロー色として描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
データ列の折れ線プロットを描いて、色をRGBで指定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームをグループ化し、それぞれの列に対し平均値を求める	df.groupby(column)[column2].mean()
散布図の色をライトゴールドロディイエローにする	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
ダークシアグリーン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレームを各列毎に集約し、、列の個数を計算する	df.groupby(column)[column2].count()
黒いダイアモンドマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='k')
モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
配列を分割数nを使って分割する	pd.cut(aArray, n)
ヒストグラムの色をアクアマリンに設定する	plt.hist(データ列, color='aquamarine')
option: グラフの色をカーキに設定する	color = 'khaki'
新しいロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
ペルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
文字列中の部分文字列を新しい文字列に置き換える	s.replace(sub, newsub)
線グラフの色を黄色に設定する	plt.plot(データ列x, データ列y, color='yellow')
ファイルパスからストリームを読み込んで、fileとする	file = open(filepath)
2つのオブジェクトが同一参照	obj is obj2
ヒストグラムの色をオレンジに設定する	plt.hist(データ列, color='orange')
折れ線グラフをパパイヤウィップ色として描画する	plt.plot(データ列x, データ列y, color='papayawhip')
タイムスタンプデータとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()
日付データの年数	aDate.year
横棒グラフを赤色で描画する	plt.barh(データ列x, データ列y, color='red')
列によってデータフレームをグループ化して、それぞれのグループごとの合計を計算する	df.groupby(column).sum()
データフレームのNaNを最小値に設定する	df.fillna(df.min())
組の各要素を関数に適用した結果で並べる	sorted(aTuple, key=func)
ファイル名がJSONファイルか調べる	filename.endswith('.json')
コーラル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
イテラブルを2回あわせた直積	itertools.product(iterable, repeat=2)
データ列を十の位で丸めて整数型にする	ds.round(-1).astype(int)
データフレームの列をヒストグラムで描く	plt.hist(df[column])
データフレームを列で並べ直して新しいインデックスを加える	df.sort_values(columns).reset_index()
折れ線グラフの下三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
棒グラフの色をパパイヤウィップにする	plt.bar(データ列x, データ列y, color='papayawhip')
散布図の四角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
ヒストグラムの色をシエナに設定する	plt.hist(データ列, color='sienna')
predicateFuncを適用したとき真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフの色をオールドレースに指定する	plt.plot(データ列x, データ列y, color='oldlace')
部分文字列が部分文字列で始まるか調べる	s.startswith(sub)
option: 星印を加える	marker = '*'
実数の双曲線余弦を求める	math.cosh(x)
分類結果の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
データフレームを各列毎に分類して、列の個数を求める	df.groupby(column)[column2].count()
縦棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
ペルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peru')
ラベンダー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
データフレームの欠損値が含まれる箇所に色を付ける	df.style.highlight_null()
ミディアムアクアマリン色としてヒストグラムを描画する	plt.hist(データ列, color='mediumaquamarine')
ヒストグラムをコーラル色で描画する	plt.hist(データ列, color='coral')
オプションで標準エラーを用いる	file = sys.stderr
データフレームのリストカラムの中にいくつが含まれるか数える	df[aList].isin([value]).sum()
option: ライトイエロー色を用いる	color = 'lightyellow'
句点文字を全部使う	string.punctuation
散布図のポイントマーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='k')
横棒グラフをサーモン色で描画する	plt.barh(データ列x, データ列y, color='salmon')
ダークサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darksalmon')
option: ゴーストホワイトを使用する	color = 'ghostwhite'
リストに文字列を追加する	aList.append(element)
散布図をホットピンク色で描画する	plt.scatter(データ列x, データ列y, color='hotpink')
データフレームのリストカラムの中に文字列があるか調べる	df[aList].isin([value])
タイムスタンプデータが日付時刻データより前	aDatetime < aDatetime2
縦棒グラフを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
折れ線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
option: 改行を区切りで使用する	sep = '\n'
変数を入れ替える	x, y = y, x
折れ線グラフに黒い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
赤い菱形マーカーを数列とイテラブルについての散布図に描く	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
カウンタを低頻出方から列挙する	aCounter.most_common()[::-1]
折れ線グラフをアンティークホワイト色で描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: グラフの色をミントクリームにセットする	color = 'mintcream'
青い実線でリストの変化を描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
option: グリーンイエロー色を使う	color = 'greenyellow'
点間のユークリッド距離	math.dist(point, point2)
データフレームの列がx以下の行を選択する	df[df[column] <= x]
散布図の色をロイヤルブルーにする	plt.scatter(データ列x, データ列y, color='royalblue')
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgrey')
データ列を四分位数ごとにビン分割する	pd.qcut(ds, 4)
実数を切り上げる	math.ceil(x)
キーが辞書上で定義されていないか調べる	key not in aDict
ひとつでもアルファベットが文字列内に含まれるか確認する	any(c.isalpha() for c in s)
箱髭図にラベルを設定する	plt.boxplot([データ列, データ列], labels=['A', 'B'])
option: マーカーの色を青紫にする	markerfacecolor = 'violet'
タプルの合計値を求める	sum(aTuple)
最後に追加した項目を辞書からポップする	aDict.popitem()
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
データフレームを表示するとき、小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
データフレームのカラムの欠損値を中央値で補う	df[col].fillna(df[col].median())
棒グラフの色を黄色にする	plt.bar(データ列x, データ列y, color='yellow')
データフレームのNaNを最大値に設定する	df.fillna(df.max())
縦棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
行列の行ごとの最小	np.min(aArray, axis=1)
文字列の示すエンコーディングでファイルパスを書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
２つの行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
データフレームのカラムの75パーセンタイル	df[col].quantile(0.75)
ファイルをバイナリ書き込みできるようにオープンする]	open(filepath, mode='wb')
切り上げて整数に変換する	math.ceil(x)
ランダム性を追加したランダムフォレストで回帰分析を行う	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
xが1もしくは2	x == 1 or x == 2
パパイヤウィップ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
1からnまでの整数列を作る	list(range(1, n+1))
データ列の上位25%	ds.quantile(0.25)
CSVTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
表の列名リストを使う	df.columns
整数を数で整数除算する	x // y
データフレームのカラムを千の位で丸める	df[col].round(-3)
データフレームを1000の位で丸める	df.round(-3)
ブルーバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
要素は集合の要素でないか調べる	element not in aSet
カラーパレットを全般的に濃くする	sns.set(pallete='deep')
カラムの上位25%を求める	ds.quantile(0.25)
文字列の開始位置以降が部分文字列で始まるか	s.startswith(sub, start)
ホワイト色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
文字列を変数にして、パラメータにする	z = sympy.Symbol(s)
データフレームが正規分布からどの程度、歪んでいるか調べる	df.kurt()
option: 色をライトグレーに設定する	color = 'lightgrey'
折れ線グラフのバツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
タプルのキーと値を入れ替える	{v: k for k, v in aDict.items()}
データフレームのリストカラムの未入力値を最小値に設定する	df[aList].fillna(df[aList].min())
折れ線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
昇順にリストをソートする	sorted(aList, reverse=False)
散布図に大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
データフレームの欠損値を前の値に指定する	df.fillna(method='ffill')
データフレームの中の列をn個にビンニングする	pd.cut(df[col], n)
上限を指定して、両端キュー	collections.deque(maxlen=n)
データを最大最小で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
リストの合計	sum(aList)
文字列内に小文字が含まれるか調べる	any(c.islower() for c in s)
浮動小数点数が整数かどうか	x.is_integer()
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgray'
ヒストグラムの色をオレンジレッドに設定する	plt.hist(データ列, color='orangered')
線グラフをシスル色で描画する	plt.plot(データ列x, データ列y, color='thistle')
表の列と列の相関行列	df[[column, column2]].corr()
横棒グラフをラベンダー色で描画する	plt.barh(データ列x, データ列y, color='lavender')
option: ハニーデューを使う	color = 'honeydew'
option: ミディアムスプリンググリーンにグラフの色を設定する	color = 'mediumspringgreen'
文字列がリストの要素か調べる	element in aList
線グラフの色をアイボリーに変更する	plt.plot(データ列x, データ列y, color='ivory')
カラーパレットを淡くする	sns.set(pallete='muted')
リストとリストの散布図を描画してマーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
データ列からユニークな値を抽出し、リスト化する	ds.unique().tolist()
列を用いてデータフレームをグループ化し、、グループごとの件数を知る	df.groupby(column).size()
データ列と配列について散布図を描き、、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
option: 文字コードをEUCに設定する	encoding = 'euc_jp'
データフレームのデータを条件で取り除くには	df[(df[column] == x) & (df[column2] == x2)]
配列の列ごとの合計値を求める	np.sum(aArray, axis=0)
数値を出力する	print(value)
データ列の日を見る	ds.dt.day
データ列の未入力値を最大値に設定する	ds.fillna(ds.max())
散布図をダイアモンドマーカーとして描く	plt.plot(データ列x, データ列y, marker='D')
データフレームを'A'列をキーにして並べ直す	df.sort_values(by='A')
黒い▽マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
カウンタを集合に変換する	set(aCounter)
棒グラフをロイヤルブルー色で描画する	plt.bar(データ列x, データ列y, color='royalblue')
実数の逆余弦を算出する	math.acos(x)
リストと配列についての散布図にrgbの上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ロイヤルブルーにヒストグラムの色を設定する	plt.hist(データ列, color='royalblue')
縦棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
option: マーカーの色をペールグリーンにする	markerfacecolor = 'palegreen'
データフレームの列が文字列で終わらない行を抽出する	df[not df[column].str.endswith(s)]
横棒グラフの色をライトグレーにする	plt.barh(データ列x, データ列y, color='lightgrey')
散布図の色をサドルブラウンにする	plt.scatter(データ列x, データ列y, color='saddlebrown')
ヒストグラムをライトゴールドロディイエロー色を用いて描画する	plt.hist(データ列, color='lightgoldenrodyellow')
日付データにn秒を加える	aDate + datetime.timedelta(seconds=n)
ホワイトスモーク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
マッピングのキーの値	aDict[key]
データをL1ノルムを用いて正則化する	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
折れ線グラフをレモンシフォン色で描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
リストとイテラブルについて散布図をプロットしてマーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
シエナ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
横棒グラフをライトブルー色として描画する	plt.barh(データ列x, データ列y, color='lightblue')
リストと配列の散布図に黒い丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c='k')
データ列の欠損値をxに設定する	ds.fillna(x)
ヒストグラムをライトスチールブルー色として描画する	plt.hist(データ列, color='lightsteelblue')
CSV形式でJSONLファイルにデータフレームを保存する	df.to_csv(filename)
双方向キューのstart〜endの部分要素を使う	collections.deque(itertools.islice(deq, start, end))
今日の年数	datetime.datetime.today().year
タプルに要素を項目名として加える	aDict[key] = element
アルファベットからひとつランダムに選ぶ	random.choice(string.ascii_uppercase)
インディゴ色でヒストグラムを描画する	plt.hist(データ列, color='indigo')
n回オブジェクトが続くイテラブル	itertools.repeat(element, n)
文字列の長さ	len(s)
ダークターコイズ色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
数式のパラメータについてのn階微分を求める	sympy.diff(e, z, n)
横棒グラフをイエローグリーン色で描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
両端キューの末尾に要素をつけ加える	deq.append(element)
option: ゴールド色を使う	color = 'gold'
スピアマンの相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
データフレームを複数の列によってまとめたグループ	df.groupby(columns)
実数の絶対値	math.fabs(x)
折れ線グラフを半透明にする	plt.plot(データ列x, データ列y, alpha=0.5)
縦棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
整数nを16進表現にする	hex(n)
ファイルを文字コードtextとして書き込み用にオープンする]	open(filepath, mode='w', encoding=text)
文字を文字コードに変換する	ord(ch)
ヒストグラムをマルーン色で描画する	plt.hist(データ列, color='maroon')
日付データが何年か知る	aDate.year
折れ線グラフをダークオーキッド色で描画する	plt.plot(データ列x, データ列y, color='darkorchid')
折れ線グラフを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
行列の列ごとの分散を求める	np.var(aArray, axis=0)
横軸の目盛を対数に変更する	plt.xscale('log')
予測値とデータの離れ具合を可視化する	sns.residplot(x='列名', y='列名', data=df)
ミッドナイトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
縦棒グラフをデピンク色を使って描画する	plt.bar(データ列x, データ列y, color='deeppink')
アクアマリン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームの欠損値を平均値で補う	df.fillna(df.mean())
ヒストグラムの色をシアンに設定する	plt.hist(データ列, color='cyan')
文字列を両端キューの左に追加する	deq.appendleft(element)
データフレームの行を範囲指定して抽出する	df[start:end]
実数の床	math.floor(x)
CSVファイルTSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
スノー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
折れ線グラフを大バツマーカーで描画する	plt.plot(データ列x, データ列y, marker='X')
option: シエナ色を用いる	color = 'sienna'
ナバホホワイト色のヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
折れ線グラフをリネン色として描画する	plt.plot(データ列x, データ列y, color='linen')
折れ線グラフにラベルをつける	plt.plot(データ列x, データ列y, label='ラベル')
ダークオーキッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkorchid')
青い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
散布図に赤い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
実数を浮動小数点数で除算する	x / y
リストとイテラブルについて散布図を描画して、右三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
ヒストグラムをアンティークホワイト色を用いて描画する	plt.hist(データ列, color='antiquewhite')
n2がn以上、かつn3以下か	n <= n2 and n2 <= n3
散布図をターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='turquoise')
横棒グラフをピーチパフ色で描画する	plt.barh(データ列x, データ列y, color='peachpuff')
文字列はタイトル大文字小文字	s.istitle()
実数のアークタンジェントを求める	math.atan(x)
棒グラフの色をパールバイオレットレッドにする	plt.bar(データ列x, データ列y, color='palevioletred')
最初のカテゴリーを除外して表データの列をワンホット・ベクトルにする	pd.get_dummies(df[column], drop_first=True)
アンティークホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
棒グラフを紺色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
スタックが空でないか調べる	len(deq) != 0
タプルのの一覧	aDict.values()
データフレームのカウントプロットをプロットする	sns.countplot(x='列名', data=df)
option: スレートブルーにグラフの色を変更する	color = 'slateblue'
year年month月day日の日付	datetime.date(year=year, month=month, day=day)
各列毎に表データをグループ化し、列の分散を求める	df.groupby(column)[column2].var()
データフレームの列をインデックスに設定する	df.set_index(column)
リストとリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategray')
列名のリストをデータ型でフィルタする	df.select_dtypes(型).columns
赤い一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
全要素が1の行列	np.ones(行数, 列数, dtype=np.int)
二つのマッピングを階層的につなぐ	collections.ChainMap(aDict, aDict2)
棒グラフの色をスレートブルーにする	plt.bar(データ列x, データ列y, color='slateblue')
文字列をSJISでバイト列にする	s.encode(encoding='sjis', errors='ignore')
文字列中の小文字を大文字に変換する	s.upper()
リストの最初を除く	aList[1:]
パレットトルコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
散布図のバツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
黒い大バツマーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='X', c='k')
option: ハニーデューに色を設定する	color = 'honeydew'
文字列の左側からタブを除く	s.lstrip('\t')
黒色で値をプリントする	print(f'\033[30m{value}\033[0m')
オブジェクトを文字列に変換する	str(obj)
データフレームのカラム名を指定された名前リストに置き換える	df.columns = columns
ヒストグラムをフォレストグリーン色として描画する	plt.hist(データ列, color='forestgreen')
option: 暗い赤色を使用する	color = 'darkred'
双方向キューをタプルに変換する	tuple(deq)
教師データで回帰モデルを学習する	model.fit(説明変数, 目的変数)
option: ダイアモンド印を使う	marker = 'D'
option: 欠損値も無視しない	dropna = True
ベクトルを変形する	aArray.reshape(行数, 列数)
棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
リストの先頭を除く	aList[1:]
リストとリストについて散布図を描いて文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
ヒストグラムの色をライムグリーンに変更する	plt.hist(データ列, color='limegreen')
データフレームの列を破壊的に削除する	df.drop(column, axis=1, inplace=True)
折れ線グラフをミッドナイトブルー色で描画する	plt.plot(データ列x, データ列y, color='midnightblue')
列のNaNを最大値に設定する	ds.fillna(ds.max())
ヒストグラムを一点鎖線を用いて描く	plt.hist(データ列, linestyle='dashbot')
横棒グラフの色をオレンジレッドにする	plt.barh(データ列x, データ列y, color='orangered')
option: グラフの色をダークレッドに設定する	color = 'darkred'
ライトシアン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
二つの浮動小数点数は近似値か調べる	math.isclose(x, x2)
ローングリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lawngreen')
棒グラフをライトグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgreen')
列を等しい量になるようにn個に分割する	pd.qcut(ds, n)
データフレームから一番右の列を除く	df[df.columns[:-1]]
キーが辞書上で定義されているか調べる	key in aDict
散布図の▲マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
カウンタをセットにする	set(aCounter)
データフレームの累積分布を描く	sns.ecdfplot(x='列名', data=df)
option: ライトゴールドロディイエローを使う	color = 'lightgoldenrodyellow'
よりランダムなランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
横棒グラフの色をトマトにする	plt.barh(データ列x, データ列y, color='tomato')
オプションで、出力先をファイルに設定する	file = sys.open(filename, 'w')
下三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
折れ線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
データ列を箱髭図にする	plt.boxplot(データ列)
散布図をトマト色で描画する	plt.scatter(データ列x, データ列y, color='tomato')
折れ線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
分割数nでリストをビン分割する	pd.cut(aList, n)
棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
option: バイナリ書き込みモードを使う	mode = 'wb'
リストとイテラブルについて散布図を描画して、マーカーをバツに指定する	plt.plot(データ列x, データ列y, marker='x')
タプルのn番目からn2番目までの部分	aTuple[n:n2]
データフレームのリストカラムの値はNaNか	df[aList].isna()
折れ線グラフを耐火レンガ色として描画する	plt.plot(データ列x, データ列y, color='firebrick')
ヒストグラムをディープスカイブルー色で描画する	plt.hist(データ列, color='deepskyblue')
JSON文字列をデータに変換する	json.loads(jsonString)
rgbの右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
option: モカシン色を使用する	color = 'moccasin'
文字列を式として評価する	eval(s)
ライトグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データ列の欠損値を平均値で埋める	ds.fillna(ds.mean())
xの小数点以下'4'桁までの文字列に変換する	':.4f'.format(x)
日付データをISO形式の文字列に変換する	aDate.isoformat()
ベージュ色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
データ列の25パーセンタイル	ds.quantile(0.25)
データ列を十の位で丸める	ds.round(-1)
ライトシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcyan')
折れ線グラフのクロスマーカーを黒くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
組を引数として展開して出力する	print(*aTuple)
パターンによって文字列を置き換える	re.sub(pattern, newsub, s)
数式の数値	float(e)
散布図をサドルブラウン色で描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
列の長さnの順列を求める	itertools.permutations(iterable, n)
棒グラフの色をコーンフラワーブルーにする	plt.bar(データ列x, データ列y, color='cornflowerblue')
文字列のUNIX時間からPandasの日付型にする	pd.to_datetime(s, unit='s', utc=True)
整数nのバイト長を見る	(n.bit_length() + 7) // 8
option: カデットブルー色を使う	color = 'cadetblue'
横棒グラフをコーンフラワーブルー色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
赤い三角マーカーを配列とデータ列の散布図に描く	plt.plot(データ列x, データ列y, marker='^', c='r')
データフレームの列がxでない行をフィルタする	df[df[column] == x]
データフレームの列の名前を付け直す	df.rename(columns={column: name})
マップからキーの値か、もしくは要素を得る	aDict.get(key, element)
rgbのポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームを丸めて、整数型にする	df.round().astype(int)
データフレームの中のカラムをビン数nでビン分割する	pd.cut(df[col], n)
サドルブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='saddlebrown')
プロットの縦横比を等しくする	plt.axis('equals')
日付時刻データが日曜日か確認する	aDatetime.weekday() == 6
データフレームのカラムの日にち	df[col].dt.day
option: マーカーの色を設定する	markerfacecolor = '#800080'
本日のタイムスタンプ	datetime.datetime.now()
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
浮動小数点数の最小値を算出する	sys.float_info.min
データを最大最小として標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
option: アクアマリン色を使う	color = 'aquamarine'
まとめてデータフレームのカラムの値をValueMapで置き換える	df[col].replace(ValueMap)
両端キューをデキューする	deq.popleft()
連立方程式の解を求める	sympy.solve([e, e2])
ヒストグラムの色をダークシアグリーンにセットする	plt.hist(データ列, color='darkseagreen')
辞書から項目名の値	aDict.get(key)
日付データをn時間前に戻す	aDate - datetime.timedelta(hours=n)
データフレームの先頭n行	df.head(n)
データ列を箱髭図を用いて可視化する	plt.boxplot(データ列)
折れ線グラフを貝殻色で描画する	plt.plot(データ列x, データ列y, color='seashell')
option: 色をグリーンに変更する	color = 'green'
インデント幅nで、マッピングをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
縦軸の軸ラベルをuntitledに指定する	plt.ylabel('y軸ラベル')
散布図をピンク色で描画する	plt.scatter(データ列x, データ列y, color='pink')
ヒストグラムの色をダークグリーンに設定する	plt.hist(データ列, color='darkgreen')
説明変数と目的変数で回帰モデルを学習する	model.fit(説明変数, 目的変数)
外れ値に強い線形分類モデルを作る	model = sklearn.linear_model.HuberClassifier()
ミスティローズ色のヒストグラムを描画する	plt.hist(データ列, color='mistyrose')
データフレームの各グループごとの個数	df.groupby(column).count()
日付データにn日を加算する	aDate + datetime.timedelta(days=n)
ファイルを開いて]バイナリストリームを見る	open(filepath, mode='rb')
option: フォントの色をサドルブラウンに指定する	color = 'saddlebrown'
日付データをn秒前に戻す	aDate - datetime.timedelta(seconds=n)
カウンタ同士でユニオンを求める	aCounter | aCounter2
空の集合を使う	set()
ライトゴールドロディイエロー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
日付時刻データは何日か知る	aDatetime.day
ヒストグラムの色をディープスカイブルーに設定する	plt.hist(データ列, color='deepskyblue')
降順でデータフレームをインデックスでソートする	df.sort_index(ascending=False)
replにデータフレームのリスト列の値を正規表現patternでまとめて置き換える	df[aList].replace(pattern, repl, regex=True)
トマト色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tomato')
リストの末尾を除く	aList[:-1]
グリーンイエロー色のヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
実数を十六進表記の文字列に変換する	x.hex()
リストとリストについての散布図にrgbの大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: マーカーの色をシエナにする	markerfacecolor = 'sienna'
データフレームを表示するとき表示する最大列数を変更する	pd.set_option('display.max_columns', n)
横棒グラフをバリーウッド色で描画する	plt.barh(データ列x, データ列y, color='burlywood')
ヒストグラムをライトシアン色を用いて描画する	plt.hist(データ列, color='lightcyan')
ミントクリーム色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
平方根	math.sqrt(x)
棒グラフの色をダークゴールデンロッドにする	plt.bar(データ列x, データ列y, color='darkgoldenrod')
データフレームのカラムの欠損値を平均に増やす	df[col].fillna(df[col].mean())
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
リストの末尾からn番目以前の部分を抽出する	aList[:-n]
集合から要素を取り除く	aSet.remove(element)
イテラブルとデータ列の散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
実数を二乗する	x ** 2
日付時刻データにn日分、加える	aDatetime + datetime.timedelta(days=n)
nを符号付きで長さn2のバイナリに変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
線グラフをグリーン色として描画する	plt.plot(データ列x, データ列y, color='green')
日付時刻データとタイムスタンプデータの時間差は何分か知る	(aDatetime - aDatetime2).total_seconds()//60
ファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
option: 先頭の行をヘッダに設定する	header = 0
パールゴールデンロッド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x')
２つのカウンタのいずれかに含まれる値を計算する	aCounter | aCounter2
データフレームの列が文字列で始まらない行を選択する	df[not df[column].str.startswith(s)]
year年month月day日hour時を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
棒グラフの色をペールグリーンにする	plt.bar(データ列x, データ列y, color='palegreen')
option: 区切り記号を使わない	sep = ''
ファイルを文字列の示すエンコーディングで開く]	open(filepath, encoding=s)
改行	'\n'
最後の項目を辞書からポップする	aDict.popitem()
線グラフの色をダークグレーに変更する	plt.plot(データ列x, データ列y, color='darkgrey')
y軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
option: カラムの名前を自動的な連番に変更する	header = None
データフレームを表示するとき列数の最大値をnに指定する	pd.set_option('display.max_columns', n)
説明変数と目的変数を使って分類モデルを学習する	model.fit(説明変数, 目的変数)
グリーンイエロー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
横棒グラフをデピンク色で描画する	plt.barh(データ列x, データ列y, color='deeppink')
部分文字列で部分文字列が開始するか調べる	s.startswith(sub)
タプルの項目名とその項目を列挙する	aDict.items()
文字列中の部分文字列を文字列に置き換える	s.replace(sub, newsub)
正接	math.tan(x)
線グラフの色をブラックに変更する	plt.plot(データ列x, データ列y, color='black')
データ列をn個に等量で分割する	pd.qcut(ds, n)
プロット描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
バイナリ書き込みモードでファイルパスをオープンして]fとする	f = open(filepath, mode='wb')
イテラブルとリストについての散布図に黒いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='k')
棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
散布図をサンディーブラウン色で描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
データ列を横棒グラフにする	plt.barh(ラベル列, データ列)
データフレームの列の値がx以上かつx2未満の行を取り出す	df[(x <= df[column]) & (df[column] < x2)]
破線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashed')
ヘッダを付けずにデータフレームをJSONLファイルに書き込む	df.to_csv(filename, header=None)
リストの要素を昇順に並べ変える	sorted(aList, reverse=True)
データフレームのリストカラムを100の位で丸める	df[aList].round(-2)
ライムグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
nからいつまでもカウントダウンする	itertools.count(start=n, step=-1)
線グラフの色を赤に変更する	plt.plot(データ列x, データ列y, color='red')
データフレームを表示するとき、表示できる行数をnに変更する	pd.set_option('display.max_rows', n)
リストの最後のn要素を捨てる	aList[:-n]
折れ線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
option: ホワイトスモークにグラフの色を設定する	color = 'whitesmoke'
ミディアムブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgrey')
折れ線グラフの菱形マーカーを青色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
折れ線グラフの▽マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
横棒グラフをフローラルホワイト色で描画する	plt.barh(データ列x, データ列y, color='floralwhite')
データフレームのカラムの第一四分位数	df[col].quantile(0.25)
円プロットでデータ列の割合を作図する	plt.pie(データ列, startangle=90)
データフレームのリストカラムのどの値が頻出か見る	df[aList].mode()
折れ線グラフを半透明の一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
サンディーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
折れ線グラフをアリスブルー色で描画する	plt.plot(データ列x, データ列y, color='aliceblue')
折れ線グラフの四角印の太さを指定する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
クラス分類の予測精度をヒートマップで調べる	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
グラフの見栄えを綺麗にする	import seaborn as sns
ベージュ色のヒストグラムを描画する	plt.hist(データ列, color='beige')
折れ線グラフを一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
ナバホホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navajowhite')
option: コーンズシルク色を使う	color = 'cornsilk'
点線で配列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
option: グラフの色をドジャーブルーに指定する	color = 'dodgerblue'
カテゴリ別で色分けしてデータフレームの全カラムの相関を可視化する	sns.pairplot(df, hue='カテゴリ列')
両端キューが空でないか調べる	len(deq) != 0
折れ線グラフをダークサーモン色として描画する	plt.plot(データ列x, データ列y, color='darksalmon')
TSVファイルファイル名が	filename.endswith('.tsv')
リストとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
イテラブルからn個、ランダムに選ぶ	random.choices(iterable, k=n)
データフレームのカラムのNaNを最大値に変更する	df[col].fillna(df[col].max())
配列の行ごとの最小	np.min(aArray, axis=1)
列'A'と列'B'をキーにして２つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
縦棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
折れ線グラフに下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
散布図を黒い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
散布図の色をラベンダーブラッシュにする	plt.scatter(データ列x, データ列y, color='lavenderblush')
プロットの描画で暗く色を用いる	sns.set(pallete='dark')
ヒストグラムをピンク色で描画する	plt.hist(データ列, color='pink')
文字列リストをsepを区切りとしてつなげる	sep.join(aStringList)
折れ線グラフの色をライトイエローにする	plt.plot(データ列x, データ列y, color='lightyellow')
文字列の最初から空白を除く	s.lstrip()
カテゴリ列で色付けして、データフレームをに箱ひげ図で描画する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフをバリーウッド色で描画する	plt.plot(データ列x, データ列y, color='burlywood')
散布図の色をマルーンにする	plt.scatter(データ列x, データ列y, color='maroon')
rgbの星マーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: 無視するフッタをnに設定する	skipfooter = n
データフレームのリスト列の代表値	df[aList].describe()
データフレームの列がx以上かつx2未満の行を抽出する	df[(x <= df[column]) & (df[column] < x2)]
逆正接	math.atan(x)
option: マーカーを三角に変える	marker = '^'
イテラブルから両端キューを作る	collections.deque(iterable)
データフレームをタブ区切りでJSONLファイルに書き込む	df.to_csv(filename, sep='\t')
散布図をライトシアン色として描画する	plt.scatter(データ列x, データ列y, color='lightcyan')
貝殻色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
リストをランダムにシャッフルする	random.shuffle(aList)
ハローワールドとプリントする	print('Hello World')
ダークマゼンタ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
赤いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームのリスト列の中に文字列と文字列がある	df[aList].isin([value, value2])
赤い右三角マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='>', c='r')
マルーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
ライトスチールブルーにヒストグラムの色を変更する	plt.hist(データ列, color='lightsteelblue')
ヒストグラムの色をライトサーモンに指定する	plt.hist(データ列, color='lightsalmon')
線グラフの色をモカシンに変更する	plt.plot(データ列x, データ列y, color='moccasin')
文字列の先頭から空白を消す	s.lstrip(' ')
標準入力から1行だけ読み込んで改行を取り除く	sys.stdin.readline().rstrip()
グリッドの線の種類を点線に変更する	plt.grid(linestyle='dotted')
JSON形式のバイト列を辞書に変換する	json.loads(b.decode('unicode-escape'))
配列の合計	np.sum(aArray)
配列のユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
データフレームのカラムの分	df[col].dt.minute
散布図をオールドレース色として描画する	plt.scatter(データ列x, データ列y, color='oldlace')
横棒グラフをミディアムシアグリーン色で描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
両端キューのstart〜endの部分値	collections.deque(itertools.islice(deq, start, end))
折れ線グラフの三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: タンにグラフの色を設定する	color = 'tan'
複素数型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=bool)
棒グラフの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
データフレームのリスト列の相関行列をヒートマップを使って描画する	sns.heatmap(df[aList].corr())
散布図に黒い△マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
縦棒グラフをサーモン色として描画する	plt.bar(データ列x, データ列y, color='salmon')
折れ線グラフの色をパープルにする	plt.plot(データ列x, データ列y, color='purple')
散布図をブランチドアーモンド色で描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
配列とリストの散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
イテラブルとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
文字列のケースを変換する	s.casefold()
バイナリモードとしてファイルをオープンして]、fとする	f = open(filepath, mode='rb')
度数分布図でリストを可視化する	plt.hist(データ列)
横棒グラフをダークオリーブグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
option: 紺を用いる	color = 'darkblue'
option: 右三角印を使う	marker = '>'
折れ線グラフのマーカーを△にする	plt.plot(データ列x, データ列y, marker='^')
データフレームのカラムのどの値が頻出か見る	df[col].mode()
ファイルを追加モードを用いてオープンして]fとする	f = open(filepath, mode='a')
ライトサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
縦棒グラフをゲインズボロ色を用いて描画する	plt.bar(データ列x, データ列y, color='gainsboro')
カウンタの項目を、その出現回数だけリストとして得る	aCounter.elements()
ヒストグラムをシスル色で描画する	plt.hist(データ列, color='thistle')
新しいガウス過程分類モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームの列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
アンサンブル学習でクラス分類を行う	sklearn.ensemble.VotingClassifier()
散布図にrgbのダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ファイルをオープンする]	open(filepath)
データ列の欠損値をxで埋める	ds.fillna(x)
オブジェクトはリストかタプルか調べる	isinstance(obj, (list)
スタッキングでクラス分類を行う	sklearn.ensemble.StackingClassifier()
データフレームから一番右側の列を除く	df[df.columns[:-1]]
option: マーカーの色をパパイヤウィップにする	markerfacecolor = 'papayawhip'
ディムグレーにヒストグラムの色をする	plt.hist(データ列, color='dimgray')
散布図をゲインズボロ色を用いて描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
文字列の末尾から部分文字列を取り除く	s.rstrip(sub)
アルファベットの大文字を全部求める	string.ascii_uppercase
チョコレートにヒストグラムの色を指定する	plt.hist(データ列, color='chocolate')
オリベドラブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
'A'列によって降順にデータフレームを破壊的にソートする	df.sort_values(by='A', ascending=False, inplace=True)
データフレームの列をにバイオリン図を用いて可視化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームを散布図で描画して、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
シーケンスを文字列リストに変換してカンマでつなげる	','.join(map(str, iterable))
青い実線を用いてデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
グラフにx=0の破線を付ける	plt.axvline(x=0, linestyle='dashed')
線グラフをオレンジ色として描画する	plt.plot(データ列x, データ列y, color='orange')
実線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
ファイルパスを文字コードtextで書き込み用に開く]	open(filepath, mode='w', encoding=text)
option: グラフの色をライトサーモンにする	color = 'lightsalmon'
option: バイナリ用に変更する	mode = 'rb'
グラフの色を全般的に色差別なくする	sns.set(pallete='colorblind')
リストを黒色でプリントできる文字列に変換する	f'\033[30m{value}\033[0m'
option: ミディアムスレートブルーにグラフの色を設定する	color = 'mediumslateblue'
データフレームのリスト列の最頻値	df[aList].mode()
二つのオブジェクトが等しいか調べる	obj == obj2
ヒストグラムを紺色で描画する	plt.hist(データ列, color='darkblue')
カウンタから最頻出な項目の件数	aCounter.most_common()[1]
リストを中央値でビン分割する	pd.qcut(aList, 2)
折れ線グラフの色をライトスチールブルーに設定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
縦棒グラフをミッドナイトブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='midnightblue')
ヒストグラムの色をライムグリーンに設定する	plt.hist(データ列, color='limegreen')
パウダーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
縦棒グラフをスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='steelblue')
option: フォントの色をゲインズボロに指定する	color = 'gainsboro'
アンサンブル学習を使って回帰分析をする	sklearn.ensemble.VotingRegressor()
データフレームを'A'列の値によってグループ化し、要約統計量を求める	df.groupby('A').describe()
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
データフレームのカラムの文字列が文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
折れ線グラフを青緑色で描画する	plt.plot(データ列x, データ列y, color='teal')
ヒストグラムの色をダークグリーンに指定する	plt.hist(データ列, color='darkgreen')
グラフ中の(x,y)の位置に凡例を表示する	plt.legend(loc=(x, y))
白色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='white')
データフレームの列のNaNをxで置換する	df[col].fillna(x)
データフレームを各列毎にグループ化して、列の個数を求める	df.groupby(column)[column2].count()
クラス分類の再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
文字列をケースを無視して正規表現で分割する	re.split(pattern, s, flags=re.IGNORECASE)
列に列を続けたイテラブル	itertools.chain(iterable, iterable2)
TSVファイルをヘッダなしで読み込む	pd.read_csv(filename, header=None)
データフレームのカラムの欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
折れ線グラフをライトスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
グラフの用途をポスターに設定する	sns.set(context='poster')
データフレームのリストカラムの最頻値	df[aList].mode()
ラベンダー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavender')
折れ線グラフの▼マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgray')
option: ゴールデンロッドにフォントの色を設定する	color = 'goldenrod'
スラグレー色のヒストグラムを描画する	plt.hist(データ列, color='slategray')
散布図の色をコーンズシルクにする	plt.scatter(データ列x, データ列y, color='cornsilk')
データフレームの列の各データが何回出現するか調べる	df[col].value_counts()
データフレームを各列と列の組み合わせ毎に分類し、、平均値を求める	df.groupby([column, column2], as_index=False).mean()
データフレームのリストカラムのNaNをモードに設定する	df[aList].fillna(df[aList].mode().iloc[0])
データフレームからn行を重複ありでランダムにサンプリングする	df.sample(n, replace=True)
データフレームを1000の位で四捨五入して、整数にする	df.round(-3).astype(int)
オプションで出力先を標準出力に指定する	file = sys.stdout
option: 淡いピンク色色を使用する	color = 'lightpink'
本日の日数	datetime.datetime.today().day
データフレームの列を散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
横棒グラフをシスル色として描画する	plt.barh(データ列x, データ列y, color='thistle')
散布図をタン色として描画する	plt.scatter(データ列x, データ列y, color='tan')
新しいロバスト分類器を作成する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
データフレームのリストカラムの値を正規表現patternで一度に置き換える	df[aList].replace(pattern, repl, regex=True)
現在をタプルに変換する	datetime.datetime.today().timetuple()
x座標の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
部分文字列が部分文字列で始まるかどうか調べる	s.startswith(sub)
データ列とリストについての散布図にrgbの大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
option: グラフの色を黄色に設定する	color = 'yellow'
ヒストグラムをサンディーブラウン色として描画する	plt.hist(データ列, color='sandybrown')
散布図の色をチョコレートにする	plt.scatter(データ列x, データ列y, color='chocolate')
実数が整数	x.is_integer()
黒い左三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
横棒グラフをスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='slateblue')
option: イエローグリーン色を使う	color = 'yellowgreen'
n進数文字列をバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
折れ線グラフの色をダークシアンに設定する	plt.plot(データ列x, データ列y, color='darkcyan')
option: ラベンダーブラッシュにグラフの色を変更する	color = 'lavenderblush'
整数をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
データフレームの中の欠損値がある行を消す	df.dropna()
処理中の例外を情報を確める	sys.exc_info()
データフレームのリスト列を10の位で丸めて、整数型にする	df[aList].round(-1).astype(int)
文字列の開始位置以降に部分文字列が含まれるかどうか調べる	s.find(sub, start) != -1
データフレームの列の文字列を欠損値に変換する	df[col].replace(s, np.nan)
ヒストグラムを濃いシアン色で描画する	plt.hist(データ列, color='darkcyan')
クラス分類をスタッキングで行う	sklearn.ensemble.StackingClassifier()
両端キューを使用する	import collections
散布図をグリーン色として描画する	plt.scatter(データ列x, データ列y, color='green')
双方向キューの値をn個分右にローテンションする	deq.rotate(n)
文字列内にひとつでもアスキー文字があるか調べる	any(c.isascii() for c in s)
散布図に赤い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: 書き込みモードに設定する	mode = 'w'
散布図をシエナ色を使って描画する	plt.scatter(データ列x, データ列y, color='sienna')
プラットホームがWindowsか調べる	sys.platform.startswith('win32')
ヒストグラムをゴーストホワイト色で描画する	plt.hist(データ列, color='ghostwhite')
サポートベクター分類モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフの印を大バツにする	plt.plot(データ列x, データ列y, marker='X')
列の値でNaNを含めてデータフレームをグループ化する	df.groupby(column, dropna=False)
ふたつの集合のいずれか一方だけの集合を求める	aSet.symmetric_difference(aSet2)
データフレームを丸める	df.round()
ブルーバイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
ファイルパスのセパレータ記号	os.sep
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
棒グラフを暗い赤色で描画する	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフをシルバー色を用いて描画する	plt.plot(データ列x, データ列y, color='silver')
散布図に黒いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
実線でヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
マルーン色のヒストグラムを描画する	plt.hist(データ列, color='maroon')
option: マーカーの色をオーキッドにする	markerfacecolor = 'orchid'
折れ線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
散布図をダークオレンジ色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkorange')
option: タン色を使う	color = 'tan'
表データから指定された列を抽出する	df[[column]]
文字列の先頭でパターンに大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
データフレームのリストカラムを100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
折れ線グラフのポイントマーカーを黒色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
黒い大バツマーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
配列とリストの散布図にバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x')
第二引数で指定されたファイルの名前	sys.argv[1]
三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^')
リストとリストについての散布図に赤い星マーカーをプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
ナバホホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
option: コーラルに色を変更する	color = 'coral'
赤い点線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
文字列の先頭で正規表現にASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
白色の散布図を描画する	plt.scatter(データ列x, データ列y, color='white')
データフレームの列の文字列が文字列で終わらないデータを抽出する	df[not df[column].str.endswith(s)]
データフレームのリストカラムを百の位で四捨五入して、整数型にする	df[aList].round(-2).astype(int)
ヒストグラムをピンク色を用いて描画する	plt.hist(データ列, color='pink')
リストの分布を描画する	plt.scatter(データ列x, データ列y)
xの小数点以下'3'桁の文字列に変換する	':.3f'.format(x)
棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
option: グリーンイエローにフォントの色を設定する	color = 'greenyellow'
option: グラフの色をパープルに設定する	color = 'purple'
オブジェクトは辞書か確認する	isinstance(obj, dict)
折れ線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
リストの値のみプリントする	print(*aList)
ヒストグラムの色をライトグリーンに指定する	plt.hist(データ列, color='lightgreen')
今日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
全要素を０で初期化した符号なし８ビット整数型の行列	np.zeros(行数, 列数, dtype=np.uint8)
'A'列でデータフレームをソートして、更新する	df.sort_values(by='A', inplace=True)
折れ線グラフの▲マーカーを黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
option: チョコレート色を使う	color = 'chocolate'
組をn回、結合する	aTuple * n
文字列を別の文字列を用いて置換する	s.replace(sub, newsub)
ヒストグラムをダークスラテグレー色を用いて描画する	plt.hist(データ列, color='darkslategray')
16進数の文字列をバイナリにする	int(s, 16).to_bytes(length=bytesize, byteorder='big')
リストをビン数nを用いてビン分割する	pd.cut(aList, n)
データフレームの最初の列以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
データフレームを列名リストの値で集約し、、列挙する	[(name, group) for name, group in df.groupby(columns)]
正規表現をASCII限定としてあらかじめコンパイルする	re.compile(pattern, flag=re.ASCI)
データ列の中に文字列があるか確認する	ds.isin([value])
option: ミディアムターコイズ色を用いる	color = 'mediumturquoise'
データフレームの列がxより大きい行を抽出する	df[df[column] > x]
nがn2で割り切れないか確認する	n % n2 != 0
データフレームの内で、列に重複があるか確認する	df.duplicated(subset=column)
ヒストグラムをシアン色で描画する	plt.hist(データ列, color='cyan')
両端キューの先頭	deq[0]
JSONフォーマットの文字列を辞書に変換する	json.loads(jsonString)
辞書上でキーが未定義かどうか調べる	key not in aDict
ヒストグラムをダークレッド色で描画する	plt.hist(データ列, color='darkred')
データフレームの中の列をリストを境界値としてビン分割する	pd.cut(df[col], aList)
折れ線グラフの色をスレートブルーに指定する	plt.plot(データ列x, データ列y, color='slateblue')
データフレームのリストカラムの標本標準偏差	df[aList].std()
PandasでUNIX秒のデータ列からタイムスタンプ型にする	pd.to_datetime(ds, unit='s', utc=True)
グラフで用いる縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
棒グラフをプラム色で描画する	plt.bar(データ列x, データ列y, color='plum')
rgbのダイアモンドマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
散布図に赤い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
棒グラフをサンディーブラウン色で描画する	plt.bar(データ列x, データ列y, color='sandybrown')
データフレームのリストカラムの第一四分位数	df[aList].quantile(0.25)
ビン数nとしてリストをビン分割する	pd.cut(aList, n)
データフレームの列を十の位で四捨五入する	df[col].round(-1)
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgrey')
option: 右三角マーカーを使う	marker = '>'
option: どの行もヘッダにしない	header = None
ミディアムシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ヒストグラムをシスル色を使って描画する	plt.hist(データ列, color='thistle')
nかけるn2	n * n2
option: グラフの色をライトコーラルに変更する	color = 'lightcoral'
赤い大バツマーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='X', c='r')
ライトグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgreen')
日付時刻データの時刻を求める	aDatetime.time()
データフレームを'A'列によってで破壊的にソートする	df.sort_values(by='A', inplace=True)
option: 符号なし８ビット整数型を用いる	dtype = np.uint8
2つの浮動小数点数が十分に近い	math.isclose(x, x2)
最大値でデータフレームのリスト列の欠損値を埋める	df[aList].fillna(df[aList].max())
ケンドールを用いてデータフレームのリストで指定された列の相関行列	df[aList].corr(method='kendall')
ローングリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lawngreen')
変数がマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
ヒストグラムの色をライムに指定する	plt.hist(データ列, color='lime')
xの小数点以下'2'桁の文字列にする	':.2f'.format(x)
リストとリストについて散布図を描画して、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
２つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
プラットホームがMacOS	sys.platform.startswith('darwin')
option: グラフの線の種類を点線にセットする	linestyle = 'dotted'
オブジェクトの型	type(obj)
エクセルファイルファイルのn番目のシートを読み込む	pd.read_excel(filename, sheet_name=n)
グラフからグリッド線を消す	plt.grid(False)
Pandasで、日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
回帰モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
ダークシアグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
二つの文字列は等しくないか調べる	s != s2
本日の月数	datetime.datetime.today().month
実数を小数点以下で丸める	round(x, n)
折れ線グラフの三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
辞書をインデント幅nのJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
折れ線グラフの色をオリベドラブに設定する	plt.plot(データ列x, データ列y, color='olivedrab')
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategrey')
マッピングをJSONフォーマットのインデント幅nの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='teal')
データフレームを列でグループ分けして列の要約統計量を算出する	df.groupby(column).describe()[column2]
実数を切り下げて整数に変換する	math.floor(x)
nをn2で割った余りを計算する	n % n2
整数nが配列のどれかか調べる	n in aArray
折れ線グラフの四角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
両端キューの要素を右にn個分ローテンションする	deq.rotate(n)
ピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
オブジェクトのバイト長	sys.getsizeof(obj)
横棒グラフの色をロイヤルブルーにする	plt.barh(データ列x, データ列y, color='royalblue')
データフレームの列の値がx以上の行を抽出する	df[df[column] >= x]
既存のファイルを追加できるようにSJISでオープンする]	open(filepath, mode='a', encoding='shift_jis')
データフレームのカラムの未入力値を最小値で埋める	df[col].fillna(df[col].min())
折れ線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
横棒グラフをライムグリーン色として描画する	plt.barh(データ列x, データ列y, color='limegreen')
縦棒グラフを茶色色を使って描画する	plt.bar(データ列x, データ列y, color='brown')
option: ミディアムバイオレットレッド色を使う	color = 'mediumvioletred'
データフレームのリスト列の未入力値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
データフレームのリストカラムの中に文字列とが含まれる	df[aList].isin([value, value2])
追加できるようにUTF8でファイルパスをオープンする]	open(filepath, mode='a', encoding='utf-8')
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='gray')
カテゴリに並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
option: ナバホホワイトを使う	color = 'navajowhite'
横棒グラフをパウダーブルー色として描画する	plt.barh(データ列x, データ列y, color='powderblue')
xの小数点以下'2'桁の文字列に変換する	':.2f'.format(x)
散布図の色をシャルトリューズにする	plt.scatter(データ列x, データ列y, color='chartreuse')
散布図の色をゲインズボロにする	plt.scatter(データ列x, データ列y, color='gainsboro')
データフレームの中の欠損値がある行を削除する	df.dropna()
データフレームの先頭n行	df.head(n)
オブジェクトは文字列かどうか	isinstance(obj, str)
円グラフで数列の割合を可視化する	plt.pie(データ列, startangle=90)
集合から要素を全て消す	aSet.clear()
nがn2より小さいか調べる	n < n2
折れ線グラフの色をコーンズシルクに変更する	plt.plot(データ列x, データ列y, color='cornsilk')
option: マーカーを左三角に変更する	marker = '<'
nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
変数を紫色にする	f'\033[35m{value}\033[0m'
三角印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
配列をビン数nでビン分割する	pd.cut(aArray, n)
データフレームをTSVファイルでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
小さい順にデータフレームを'A'列でソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
実数を整数に変換する	int(x)
ロイヤルブルー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
棒グラフをライトスチールブルー色として描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
最大値・最小値を用いて整数乱数を生成する	random.randint(最小値, 最大値)
リストと数列について散布図を描いて、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
アクア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aqua')
イテラブルをいつまでも繰り返す	itertools.cycle(iterable)
実数を実数で割った剰余	math.remainder(x, x2)
横棒グラフの色を紺にする	plt.barh(データ列x, データ列y, color='darkblue')
ミディアムブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumblue')
JSON文字列をデータにする	json.loads(b.decode('unicode-escape'))
リストとイテラブルの散布図に赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフの色をやわらかい青に指定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
折れ線グラフに大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X')
データフレームの列が文字列で始まる行を選択する	df[df[column].str.startswith(s)]
データフレームのカラムのNaNを前の行の値に設定する	df[col].fillna(method='ffill')
リストとリストについて散布図を描いて、マーカーを△に設定する	plt.plot(データ列x, データ列y, marker='^')
option: エラーがあるとき、例外を発生させるように設定する	errors = 'strict'
データフレームの中で、列の重複を見る	df.duplicated(subset=column)
複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
xの小数点以下'5'桁までの文字列に変換する	':.5f'.format(x)
散布図をrgbのダイアモンドマーカーで描く	plt.plot(データ列x, データ列y, marker='D', c=rgb)
データフレームの先頭のカラム以外を全て説明変数にする	説明変数 = df[df.columns[1:]]
データフレームのリストカラムのNaNを第二四分位数に増やす	df[aList].fillna(df[aList].median())
折れ線グラフの色を赤に設定する	plt.plot(データ列x, データ列y, color='red')
散布図を赤い下三角マーカーで描く	plt.plot(データ列x, データ列y, marker='v', c='r')
散布図にrgbの▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフに黒い左三角印を描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
大文字・小文字を無視してあらかじめパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgrey')
データフレームの列がx以下のデータを選択する	df[df[column] <= x]
偽陽性を避けたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
横棒グラフの色をフローラルホワイトにする	plt.barh(データ列x, データ列y, color='floralwhite')
リストの出現頻度を図示する	plt.hist(データ列)
文字列中のパターンを新しい文字列を用いて置き換える	re.sub(pattern, newsub, s)
ヒストグラムをナバホホワイト色を用いて描画する	plt.hist(データ列, color='navajowhite')
ヒストグラムを用いてデータ列を図示する	plt.hist(データ列)
最大値でデータ列のNaNを埋める	ds.fillna(ds.max())
データフレームの列と列の相関行列をヒートマップを用いて描画する	sns.heatmap(df[[column, column2]].corr())
文字列中から正規表現にマッチする位置を探す	re.search(pattern, s)
データ列を1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
グラフの描画で明るく色テーマを使用する	sns.set(pallete='bright')
option: スラッシュを分割記号で用いる	sep = '/'
option: グラフの色をパパイヤウィップに指定する	color = 'papayawhip'
リストと配列についての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
既存の配列を元に全要素が1の配列	np.ones_like(aArray)
データフレームのカラムの欠損値を直前の値で補う	df[col].fillna(method='ffill')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか調べる	re.match(pattern, s, flags=re.IGNORECASE)
配列を四分位数ごとにビン分割する	pd.qcut(aArray, 4)
データ列が正規分布からどの程度、尖っているか調べる	ds.skew()
ヒストグラムの色をスカイブルーに指定する	plt.hist(データ列, color='skyblue')
日付と時刻から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
option: フローラルホワイトを使用する	color = 'floralwhite'
文字列の中のASCII限定としてパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.ASCI)
option: フォントの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
xを浮動小数点数にする	float(x)
ヒストグラムをベージュ色で描画する	plt.hist(データ列, color='beige')
シーケンスをダミー変数に変換する	pd.get_dummies(iterable)
要素が集合に含まれないか判定する	element not in aSet
フォレストグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
集合＼集合	aSet.difference(aSet2)
黒い印を散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='k')
文字列の先頭から部分文字列を見つける	s.find(sub)
日付データの月	aDate.month
整数nを二進文字列に変換する	bin(n)[2:]
option: マーカーを▽に変更する	marker = 'v'
文字列内にひとつでも英字が含まれるか	any(c.isalpha() for c in s)
データフレームのグループごとの分散	df.groupby(column).var()
散布図の右三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
折れ線グラフに青い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
文字列の右側から部分文字列を探す	s.rfind(sub)
横棒グラフをローングリーン色で描画する	plt.barh(データ列x, データ列y, color='lawngreen')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategray')
コーンズシルク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
黒い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
リストのn番目の要素を削除する	del aList[n]
サンディーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sandybrown')
ドジャーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
データフレームの中の列をビン数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
イテラブルにイテラブルを続けた列を得る	itertools.chain(iterable, iterable2)
キューの末尾から要素を取り出す	deq.pop()
イテラブルを文字列に変換して、部分文字列を用いて連結する	sub.join(map(str, iterable))
青紫色の散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
option: スノーを用いる	color = 'snow'
棒グラフをアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='aquamarine')
データ列の変遷を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
文字列内にひとつでも英数字が含まれる	any(c.isalnum() for c in s)
データフレームから型リストデータ型の列を取り出す	df.select_dtypes(include=typeList)
option: フォントの色をサーモンに設定する	color = 'salmon'
折れ線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
タプルの各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
２つのデータフレームを結合する	pd.merge(df, df2)
オブジェクトがあるクラスのインスタンス	isinstance(obj, クラス)
ヒストグラムをダークシアン色として描画する	plt.hist(データ列, color='darkcyan')
データフレームを関数の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
配列の次元数	aArray.ndim
折れ線グラフの色をパールゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='palegoldenrod')
異なる列をキーとして2つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
棒グラフをローングリーン色で描画する	plt.bar(データ列x, データ列y, color='lawngreen')
option: アクアマリンにフォントの色を設定する	color = 'aquamarine'
２次元リストを転置する	[list(x) for x in list(zip(*aList))]
データフレームを複数の列でグループ化し、要約統計量を求める	df.groupby(columns).describe()
折れ線グラフの色をダークグリーンに指定する	plt.plot(データ列x, データ列y, color='darkgreen')
二つの列によって小さい順にデータフレームをソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
列をキーにして２つのデータフレームをジョインする	pd.merge(df, df2, on=column)
散布図に青いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
データ列とリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
棒グラフの色を赤にする	plt.bar(データ列x, データ列y, color='red')
ミントクリーム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mintcream')
横棒グラフをローングリーン色を使って描画する	plt.barh(データ列x, データ列y, color='lawngreen')
散布図の右三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
赤い実線として数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
数式を方程式として解く	sympy.solve(e)
nがn2以下か調べる	n <= n2
青紫色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
クラスが名前付きタプル	issubclass(C, tuple)
円プロットにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
プロットにx=0の実線をつける	plt.axvline(x=0, linestyle='solid')
散布図の大バツ印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
イテラブルのイミュータブルな集合	frozenset(iterable)
データフレームのカラムを1000の位で丸めて、整数にする	df[col].round(-3).astype(int)
ダークオレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorange')
コーンフラワーブルー色のヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
データを外れ値に頑健な標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ミディアムスレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
データフレームをタブ区切りとしてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
ヒストグラムの色を耐火レンガに設定する	plt.hist(データ列, color='firebrick')
棒グラフの色をオールドレースにする	plt.bar(データ列x, データ列y, color='oldlace')
両端キューをdequeue	deq.popleft()
実行を異常停止する	sys.exit(1)
文字列リストを結合して一つの文字列にする	''.join(aStringList)
黒い大バツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
ヒストグラムの色をインディゴに設定する	plt.hist(データ列, color='indigo')
配列の行ごとの合計値	np.sum(aArray, axis=1)
既存のベクトルを元に全要素が初期値の配列	np.full_like(aArray, 初期値)
文字列が全て小文字か調べる	s.islower()
散布図の印の色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
数式のn階微分を求める	sympy.diff(e, z, n)
カウンタ同士でインターセクション	aCounter & aCounter2
標準入力から1行だけ読む	sys.stdin.readline()
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
列によってデータフレームを昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
option: ミスティローズ色を使う	color = 'mistyrose'
折れ線グラフをグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='green')
棒グラフをアイボリー色で描画する	plt.bar(データ列x, データ列y, color='ivory')
nをn2で割る	n / n2
降順でデータフレーム全体をインデックスによってソートする	df.sort_index(ascending=False)
横棒グラフをラベンダーブラッシュ色として描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
モジュールを検索するパス	sys.path
線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
n2がn以上、かつ、n3以下か調べる	n <= n2 and n2 <= n3
実数の三乗を求める	x ** 3
CSVファイルTSVファイルをn番目のカラムをインデックスにして読む	pd.read_csv(filename, index_col=n)
データフレームのカラムの尖度	df[col].skew()
ケンドール相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='kendall')
option: 平均を加える	showmeans = False
データフレームの行を範囲指定して選ぶ	df[start:end]
クラスが名前付きタプルか	issubclass(C, tuple)
ライトサーモン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
ファイルをEUCとして書き込み用に開く]	open(filepath, mode='w', encoding='euc_jp')
散布図の大バツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='X', markersize=2.0)
option: フォントの色をミスティローズに設定する	color = 'mistyrose'
ヒストグラムの色をダーク・スラテグレーに指定する	plt.hist(データ列, color='darkslategrey')
option: デピンクにフォントの色を設定する	color = 'deeppink'
ヒストグラムをビスク色を使って描画する	plt.hist(データ列, color='bisque')
書式をマッピングでフォーマットする	formatText.format_map(aDict)
文字列内に漢字が含まれる	re.search('[\u4E00-\u9FD0]', s)
棒グラフをダークターコイズ色として描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
リストと配列についての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
ファイルをEUCを用いて開く]	open(filepath, encoding='euc_jp')
オレンジ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
日付時刻データがタイムスタンプデータと同時	aDatetime == aDatetime2
ロバストな線形クラス分類を行う	model = sklearn.linear_model.HuberClassifier()
線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
文字列を白色にする	f'\033[37m{value}\033[0m'
０で全要素を初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
貝殻にヒストグラムの色を設定する	plt.hist(データ列, color='seashell')
箱髭図を描画して、平均線を追加する	plt.boxplot(データ列, meanline=True)
最初のコマンド引数	sys.argv[1]
折れ線グラフをミディアムアクアマリン色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
線グラフの色をビスクに変更する	plt.plot(データ列x, データ列y, color='bisque')
数値のパラメータに数式を代入する	e.subs(z, e2)
データフレームを'A'列によってソートして、更新する	df.sort_values(by='A', inplace=True)
データフレームを各列と列の組み合わせ毎に集約して合計を求める	df.groupby([column, column2], as_index=False).sum()
シアン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
文字列をコロンを用いて区切り、列挙する	s.split(':')
インディゴ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
リストと配列について散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
折れ線グラフの大バツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
実数の逆双曲線正弦を計算する	math.asinh(x)
ヒストグラムをドジャーブルー色で描画する	plt.hist(データ列, color='dodgerblue')
タン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
縦棒プロットをプロットして、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
棒グラフの色をミッドナイトブルーにする	plt.bar(データ列x, データ列y, color='midnightblue')
散布図の印をバツ印にする	plt.scatter(データ列x, データ列y, marker='x')
オプションで出力先を標準エラーに設定する	file = sys.stderr
データフレームの中にいくつNaNがあるかカウントする	df.isna().sum()
option: 菱形マーカーを加える	marker = 'D'
グラフで用いるフォントを指定する	sns.set(font=フォント名)
イテラブルを文字列リストに変換して部分文字列で連結する	sub.join(map(str, iterable))
横棒グラフをライトコーラル色として描画する	plt.barh(データ列x, データ列y, color='lightcoral')
カウンタの項目のカウント	aCounter[element]
ファイルパスを文字列の示す文字コードで開く]	open(filepath, encoding=s)
キーがタプルにある	key in aDict
分子n分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
本日が土曜日か確認する	datetime.datetime.today().weekday() == 5
散布図をパールゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='palegoldenrod')
文字列が無限に繰り返すイテラブル	itertools.repeat(element)
データフレームを2つの列の値でグループ化する	df.groupby(['A', 'B'])
データフレームを複数の列の値によってグループ化し記述統計量を計算する	df.groupby(columns).describe()
青いクロスマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
小麦色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
行列の列	aArray[:, 列番号]
データフレームのカラムがxでないデータをフィルタする	df[df[column] == x]
ふたつの集合が共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
Pandasで、dateStringをPandasの日付型にする	pd.to_datetime(dateString)
0からN未満までの配列	np.arange(N)
ヒストグラムをダークターコイズ色で描画する	plt.hist(データ列, color='darkturquoise')
実数を小数点で丸める	round(x, n)
データフレームのリスト列のpercent分位数を計算する	df[aList].quantile(percent/100)
方程式として数値の変数の解を求める	sympy.solve(e, z)
ヒストグラムの色を貝殻に設定する	plt.hist(データ列, color='seashell')
二つの文字列は同じか調べる	s == s2
横棒グラフの色をドジャーブルーにする	plt.barh(データ列x, データ列y, color='dodgerblue')
行列のデータ型	aArray.dtype()
ガウス過程回帰モデルを作る	model = sklearn.gaussian_process.GaussianProcessRegressor()
文字列を最後の部分文字列で分けた時の後半の文字列を取り出す	s.rpartition(sub)[-1]
四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s')
データフレームを複数の列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
ヒストグラムをレベッカパープル色として描画する	plt.hist(データ列, color='rebeccapurple')
行列の値を変更する	aArray[行番号, 列番号] = 指定の値
リストの各要素を関数に適用した結果でソートする	sorted(aList, key=func)
グラフを濃くする	sns.set(pallete='deep')
Pandasで、エポック秒のデータフレームのcollから日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
プロット中の文字化けを防ぐ	sns.set(font='IPAexGothic')
リストの最初の値	aList[0]
タプルの要素をソートする	sorted(aTuple)
横棒グラフを小麦色色を用いて描画する	plt.barh(データ列x, データ列y, color='wheat')
横棒グラフをトマト色を用いて描画する	plt.barh(データ列x, データ列y, color='tomato')
プログラムの実行を正しく終了する	sys.exit(0)
色をパステル調にする	sns.set(pallete='pastel')
表データの指定された三つの列だけ抽出する	df[[column, column2, column3]]
xが-9以上、9以下か確認する	-9 <= x <= 9
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
非数値データ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
数式のパラメータにnを代入する	e.subs(z, n)
濃くテーマをグラフの描画で使用する	sns.set(pallete='deep')
青い大バツ印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
データフレームを二つの列によってによって降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
イテラブルの各要素に対して、predicateFuncの適用が真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
表を各列と列の組み合わせ毎にグループ化して、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
青紫にヒストグラムの色をする	plt.hist(データ列, color='violet')
データフレームを正規表現でまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
データフレームを複数の列で小さい順に破壊的に並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
option: ダークオリーブグリーン色を使う	color = 'darkolivegreen'
散布図をビスク色を用いて描画する	plt.scatter(データ列x, データ列y, color='bisque')
xの小数点以下'3'桁までをプリントする	print(':.3f'.format(x))
二つのデータフレームを列'A'と列'B'をキーとしてジョインする	pd.merge(df, df2, left_on='A', right_on='B')
カテゴリデータ列を数値化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
ディムグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dimgray')
半透明の破線としてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ライトコーラル色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
カラムの中の欠損値の数を数える	ds.isna().sum()
配列を等量でビン数nでビン分割する	pd.qcut(aArray, n)
リストを集合に変換する	set(iterable)
変数を太字で表示できる文字列に変換する	f'\033[1m{value}\033[0m'
データフレームを百の位で丸めて整数型にする	df.round(-2).astype(int)
散布図のマーカーを丸にする	plt.scatter(データ列x, データ列y, marker='o')
データ列の欠損値を最小値で補う	ds.fillna(ds.min())
ミディアムアクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
ファイルをオープンして]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
nがn2未満、またはn3以上か	n < n2 or n >= n3
配列の次元を変形する	aArray.reshape(行数, 列数)
文字列全体がパターンに大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
データフレームの重複した行をマスクする	df.duplicated()
散布図の右三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
xのハッシュ値	hash(x)
rgbのクロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームの欠損値を中央値で埋める	df.fillna(df.median())
データ列の値を正規表現でまとめてreplに変更する	ds.replace(pattern, repl, regex=True)
フクシア色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームをタブ区切りのファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
文字列中にひとつでも非小文字が含まれるか調べる	any(not c.islower() for c in s)
サンディーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
折れ線グラフに左三角マーカーを加える	plt.plot(データ列x, データ列y, marker='<')
日付データと日付データの時間差	aDate - aDate2
浮動小数点数を百の位で丸める	round(x, -2)
リネン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
nが2で割り切れるかどうか判定する	n % 2 == 0
n個分左にスタックの値を回転させる	deq.rotate(-n)
箱ひげ図を描画して、平均線を加える	plt.boxplot(データ列, meanline=True)
破線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
横棒グラフの色をダークオリーブグリーンにする	plt.barh(データ列x, データ列y, color='darkolivegreen')
option: グラフの色をダークシアンに設定する	color = 'darkcyan'
最大最小値でデータを標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
パラメータについて数式の積分を求める	sympy.integrate(e, z)
名前からカラーマップを使う	"plt.get_cmap(""カラーマップ名"")"
ヒストグラムをライトグリーン色として描画する	plt.hist(データ列, color='lightgreen')
黒い△マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
日付時刻データが日付時刻データより後ろか調べる	aDatetime > aDatetime2
文字列が全て大文字か調べる	s.isupper()
option: ライトグレーにグラフの色を設定する	color = 'lightgrey'
データフレームを関数によってグループ化する	df.groupby(関数)
ダークレッド色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
棒グラフの色をスノーにする	plt.bar(データ列x, データ列y, color='snow')
コーンフラワーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
カラーバーを描く	plt.colorbar()
option: グラフの種類を点線に設定する	linestyle = 'dotted'
データ列を正規表現で一度に置換する	ds.replace(pattern, repl, regex=True)
option: グラフの色をダークオーキッドにセットする	color = 'darkorchid'
行列の累積積	np.cumprod(aArray)
option: 星マーカーを使う	marker = '*'
四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
option: ライトスチールブルー色を使う	color = 'lightsteelblue'
横棒グラフの色をベージュにする	plt.barh(データ列x, データ列y, color='beige')
本日のローカルな日付	datetime.date.today()
配列を箱髭図にする	plt.boxplot(データ列)
ダークオレンジにヒストグラムの色を設定する	plt.hist(データ列, color='darkorange')
リストをセットに変換する	set(iterable)
ティールにヒストグラムの色を変更する	plt.hist(データ列, color='teal')
散布図を赤いポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.', c='r')
データ列の一意な値の個数	ds.nunique()
option: フォントの色を青緑に変更する	color = 'teal'
数列を箱ひげ図を使って描画する	plt.boxplot(データ列)
文字列の先頭からタブを取り除く	s.lstrip('\t')
最大値と最小値を用いてデータを正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
文字列が全て大文字	s.isupper()
リストと配列の散布図を描いて、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
option: マーカーの色をリネンにする	markerfacecolor = 'linen'
散布図をゴールド色を用いて描画する	plt.scatter(データ列x, データ列y, color='gold')
データフレームを列にグループ分けして、それぞれのグループごとの最小値を計算する	df.groupby(column).min()
黒いダイアモンドマーカーをリストとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
文字列の無限なイテラブルを求める	itertools.repeat(element)
データフレームからランダムに取り出す	df.sample()
プロットで使うカラーパレットを指定する	sns.set(pallete=パレット名)
整数nは組のいづれかか判定する	n in aTuple
データフレームのリストカラムが正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
マッピングの項目名を列挙する	list(aDict)
サーモンにヒストグラムの色を設定する	plt.hist(データ列, color='salmon')
横棒グラフの色をrgbに変更する	plt.barh(ラベル列, データ列, color=rgb)
キーがタプルに存在するかどうか調べる	key in aDict
散布図をトマト色として描画する	plt.scatter(データ列x, データ列y, color='tomato')
多次元データを主成分分析で淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
数式を積分する	sympy.integrate(e)
方程式の解	sympy.solve(e)
時刻をインポートする	import datetime
グラフの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
ライムグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
浮動小数点数の整数部	math.modf(x)[1]
データフレームとデータ列を横方向につなぐ	pd.concat([df, ds], axis=1)
ダーク・スラテグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
データフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
事前に複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
折れ線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
浮動小数点数を実数から引く	x - y
ヒストグラムの色をライムに設定する	plt.hist(データ列, color='lime')
散布図の下三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
印字可能な文字を全部使う	string.printable
数を実数で整数除算する	x // y
データフレームの要約統計量	df.describe()
option: フォントの色を青緑に設定する	color = 'teal'
データフレームの列の値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
折れ線グラフをシルバー色で描画する	plt.plot(データ列x, データ列y, color='silver')
option: グラフの色をライムグリーンに設定する	color = 'limegreen'
散布図を青緑色を用いて描画する	plt.scatter(データ列x, データ列y, color='teal')
二つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
散布図のポイントマーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
実数の指数部	math.frexp(x)[1]
折れ線グラフの色を貝殻にする	plt.plot(データ列x, データ列y, color='seashell')
データフレームの中で、列に重複があるか見る	df.duplicated(subset=column)
イテラブルとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
option: アイボリー色を使う	color = 'ivory'
option: フォントの色をオーキッドに設定する	color = 'orchid'
ファイルをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
データフレームの列の種類を見る	df.info()
散布図の色をピンクにする	plt.scatter(データ列x, データ列y, color='pink')
ブランチドアーモンド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
Pandasで、文字列の数値時刻からタイムスタンプ型に変換する	pd.to_datetime(s, unit='s', utc=True)
線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフの色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
option: マーカーの色を青緑にする	markerfacecolor = 'teal'
散布図の色をハニーデューにする	plt.scatter(データ列x, データ列y, color='honeydew')
データフレームから指定された列の名前一覧の列を抽出する	df[columns]
日付データが水曜日か調べる	aDate.weekday() == 2
option: セパレータを文字列にする	sep = s
文字列中にひとつでも非アスキー文字が含まれる	any(not c.isascii() for c in s)
データフレームの信頼区間を描画する	sns.pairplot(hue='カテゴリ列', data=df)
イテラブルと列の直積を得る	itertools.product(iterable, iterable2)
ヒストグラムをアクア色で描画する	plt.hist(データ列, color='aqua')
データフレームの中の欠損値がある行をドロップする	df.dropna()
データフレームのリストカラムの値をValueMapでまとめて置き換える	df[aList].replace(ValueMap)
ファイルをバイナリモードでオープンして]fとする	f = open(filepath, mode='rb')
文字列がPythonのキーワードか調べる	keyword.iskeyword(s)
左にn個分双方向キューの要素をローテンションする	deq.rotate(-n)
オブジェクトはリスト	isinstance(obj, list)
ファイルパスから読み込みストリームをオープンして]、fとする	f = open(filepath, mode='r')
データを標準化する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
ヒストグラムをラベンダーブラッシュ色で描画する	plt.hist(データ列, color='lavenderblush')
二次元組をフラット化する	sum(aTuple)
option: フォントの色をライトグリーンに変更する	color = 'lightseagreen'
棒グラフをベージュ色で描画する	plt.bar(データ列x, データ列y, color='beige')
折れ線グラフの色をゴーストホワイトに設定する	plt.plot(データ列x, データ列y, color='ghostwhite')
線形モデルの回帰変数を使う	model.coef_
ヒストグラムをプラム色で描画する	plt.hist(データ列, color='plum')
折れ線グラフの左三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
ダークブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkblue')
本日の日付時刻	datetime.datetime.today()
折れ線グラフをシエナ色で描画する	plt.plot(データ列x, データ列y, color='sienna')
横棒グラフをホワイト色で描画する	plt.barh(データ列x, データ列y, color='white')
黒い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフを濃いシアン色として描画する	plt.plot(データ列x, データ列y, color='darkcyan')
カデットブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
数式の変数についてのn階微分を行う	sympy.diff(e, z, n)
本日のタイムスタンプ	datetime.datetime.today()
線グラフの色をカデットブルーに設定する	plt.plot(データ列x, データ列y, color='cadetblue')
実数の指数	math.frexp(x)[1]
データフレームをに箱ひげ図で可視化する	sns.boxplot(x='カテゴリ列', y='列', data=df)
セットをタプルにする	tuple(aSet)
配列とリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ライトグリーン色のヒストグラムを描画する	plt.hist(データ列, color='lightseagreen')
rgbの右三角マーカーを配列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データ列の推移を折れ線グラフを用いて描画する	plt.plot(range(len(データ列)), データ列)
ブラック色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
option: トマト色を使う	color = 'tomato'
折れ線グラフのバツ印を青くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
データフレームの列のNaNを直前の値で置換する	df[col].fillna(method='ffill')
OSはLinuxか調べる	sys.platform.startswith('linux')
nが5の倍数か確認する	n % 5 == 0
n2がnより大きくかつ、n3より小さいかどうか	n < n2 and n2 < n3
散布図に赤い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
線グラフの色をブラックに設定する	plt.plot(データ列x, データ列y, color='black')
折れ線グラフに下三角マーカーを加える	plt.plot(データ列x, データ列y, marker='v')
データフレームを列で整列する	df.sort_values(by=column)
オーキッド色としてヒストグラムを描画する	plt.hist(データ列, color='orchid')
線グラフをダークオレンジ色として描画する	plt.plot(データ列x, データ列y, color='darkorange')
折れ線グラフに黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
文字列内にひとつでも空白があるか調べる	any(c.isspace() for c in s)
赤いダイアモンドマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='D', c='r')
option: ゲインズボロにフォントの色を設定する	color = 'gainsboro'
散布図を黒い四角マーカーとして描く	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフをサンディーブラウン色として描画する	plt.plot(データ列x, データ列y, color='sandybrown')
データフレームの列が文字列で終わらないデータを抽出する	df[not df[column].str.endswith(s)]
浮動小数点数を十六進表記の文字列に変換する	x.hex()
データ列の中に文字列があるか調べる	ds.isin([value])
インデント幅nで、タプルをJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
ケンドールの相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
option: パウダーブルーにグラフの色を変更する	color = 'powderblue'
クラスのサブクラスか	issubclass(サブクラス, クラス)
データフレームを表示するとき、折り返しをオフに減らす	pd.set_option('expand_frame_repr', False)
折れ線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategrey')
線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
今日をタプルにする	datetime.datetime.today().timetuple()
散布図を紺色として描画する	plt.scatter(データ列x, データ列y, color='darkblue')
UNIX時間を用いる	import time
ヒストグラムの色をミディアムブルーに設定する	plt.hist(データ列, color='mediumblue')
ヒストグラムをミディアムバイオレットレッド色で描画する	plt.hist(データ列, color='mediumvioletred')
データフレームのn行まで抽出する	df[:n]
双方向キューのstart番目からend番目の要素	collections.deque(itertools.islice(deq, start, end))
数列とリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
折れ線グラフのポイントマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
縦棒グラフをライトグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightgreen')
ライトスレイグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
ヒストグラムをシスル色を用いて描画する	plt.hist(データ列, color='thistle')
マッピングからキーの値かもしくは要素を得る	aDict.get(key, element)
文字列の開始位置から終了位置の範囲で部分文字列の出現回数を数える	s.count(sub, start, end)
多次元データをt-SNEで淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
データフレームを二つの列によってで降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
MSDの準備をする	model = sklearn.manifold.MSD(n_components=n)
文字列全体を正規表現にマッチさせる	re.fullmatch(pattern, s)
ファイルをバイナリ書き込み用にオープンする]	open(filepath, mode='wb')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないか調べる	s.find(sub, start, end) == -1
散布図に黒い三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
文字列を積極的に小文字に変換する	s.casefold()
option: グラフを点線にする	linestyle = 'dotted'
データフレームの行列を入れ替える	df.T
option: エンコーディングをEUCに変更する	encoding = 'euc_jp'
option: 複素数型を使う	dtype = bool
折れ線グラフのダイアモンド印の大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
ヒストグラムの上限下限を変更する	plt.hist(データ列, range=(start, end))
テキストファイルファイル名がか調べる	filename.endswith('.txt')
キュー中の値の位置	deq.index(element)
有理数を用いる	import fractions
散布図をライトスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
日付時刻データが何年か知る	aDatetime.year
要素をセットから除く	aSet.remove(element)
最大値でデータフレームの欠損値を埋める	df.fillna(df.max())
書き込みモードとしてファイルをオープンして]、fとする	f = open(filepath, mode='w')
データフレームのそれぞれのグループの分散	df.groupby(column).var()
option: グラフの色をダークスレートブルーに設定する	color = 'darkslateblue'
option: グラフの色をダークオリーブグリーンにセットする	color = 'darkolivegreen'
散布図にrgbの左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c=rgb)
ミディアムバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
折れ線グラフの色をミディアムアクアマリンにセットする	plt.plot(データ列x, データ列y, color='mediumaquamarine')
線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
データフレームの重複を見る	df.duplicated()
nがn2か調べる	n == n2
辞書のコピー	dict(aDict)
option: セパレータをコロンにする	sep = ':'
散布図にrgbの星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
xが-9以上9以下か	-9 <= x <= 9
n2がnより大きく、かつn3未満か調べる	n < n2 and n2 < n3
折れ線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategray')
データフレームを列によってグループ化して、それぞれのグループごとの平均値を求める	df.groupby(column).mean()
シエナ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sienna')
option: グラフの色をレベッカパープルに設定する	color = 'rebeccapurple'
列のコンビネーションを求める	itertools.combinations(iterable, n)
option: どの列も行に設定しない	index_col = None
空白文字	' '
折れ線グラフの丸印の色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
散布図に右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>')
線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
データ列のヒストグラムをプロットする	plt.hist(データ列)
option: namesをカラムの名前にする	names = names
Pythonパスのリストを知る	sys.path
辞書から項目名の値か、もしくは要素を得る	aDict.get(key, element)
事前にASCII限定として正規表現をコンパイルする	re.compile(pattern, flag=re.ASCI)
データフレームの列の値をValueMapで変更する	df[col].replace(ValueMap)
Pandasで、フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
線グラフの色をロージーブラウンに指定する	plt.plot(データ列x, データ列y, color='rosybrown')
線グラフをピーチパフ色を用いて描画する	plt.plot(データ列x, データ列y, color='peachpuff')
オブジェクトがバイト列か調べる	isinstance(obj, bytes)
PandasでUNIX秒の文字列からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
リストをビン数nでビン分割する	pd.cut(aList, n)
列の各データが何回出現するか見る	ds.value_counts()
option: ハニーデューにグラフの色を指定する	color = 'honeydew'
ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
データフレームのカラムがどの程度分散しているか見る	df[col].var()
option: グラフの色をライトイエローに変更する	color = 'lightyellow'
表示できる最大列数を変更する	pd.set_option('display.max_columns', n)
散布図の星マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
上位集合もしくは等しいかどうか	aSet > aSet2
リストとリストを接続する	aList + aList2
長さnのリスト	[0] * n
横棒グラフを赤くする	plt.barh(データ列x, データ列y, color='r')
紺碧色で散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
散布図をパパイヤウィップ色で描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
カテゴリでグループ化して、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ミントクリーム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
散布図の菱形マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
空のリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
Pandasで日付データのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
xが-9以上9以下か調べる	-9 <= x <= 9
ベクトルの行ごとの平均値	np.mean(aArray, axis=1)
タプルを展開して表示する	print(*aTuple)
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgray')
データフレームの列を百の位で丸めて整数にする	df[col].round(-2).astype(int)
サポートベクターマシンを用いてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
線グラフの色を青紫に指定する	plt.plot(データ列x, データ列y, color='violet')
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='gray')
無限にnからstep間隔で数え上げるする	itertools.count(start=n, step=step)
余弦	math.cos(x)
ダークオリーブグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
データ列の中にいくつ文字列があるかカウントする	ds.isin([value]).sum()
xを整数に変換する	int(x)
文字列の両端から部分文字列を取り除く	s.strip(sub)
option: マーカーをクロスに設定する	marker = 'x'
日付データからn日を減算する	aDate - datetime.timedelta(days=n)
option: フォントの色をライトスレイグレーに設定する	color = 'lightslategrey'
黒い左三角マーカーをリストと配列の散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
ファイルのベースファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
文字列を青色にする	f'\033[34m{value}\033[0m'
折れ線グラフの三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
ラベンダーブラッシュ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
リストと配列の散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
ラベンダーブラッシュ色でヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
データフレームが重複しているか調べる	df.duplicated()
ペールグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
アクア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aqua')
散布図を赤い四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームの中の列を等量でビン数nでビニングする	pd.qcut(df[col], n)
文字列がリストの要素でないか調べる	element not in aList
折れ線グラフのバツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
横棒グラフを描画して、下寄せする	plt.barh(ラベル列, データ列, align='edge')
xを実数に変換する	float(x)
散布図のバツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図を大バツマーカーを使って描画する	plt.plot(データ列x, データ列y, marker='X')
ダークスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
データフレームのヒストグラムを横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名')
データフレームのカラムの欠損値を最大値に設定する	df[col].fillna(df[col].max())
散布図をゲインズボロ色で描画する	plt.scatter(データ列x, データ列y, color='gainsboro')
パレットトルコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
配列の累積和	np.cumsum(aArray)
コンフュージョン・マトリックスを求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
Pandasで、データフレームのcollを日付データに変換する	pd.to_datetime(df[col])
データ列とデータ列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
ヒストグラムをアリスブルー色を使って描画する	plt.hist(データ列, color='aliceblue')
option: グラフの色をダークオレンジに設定する	color = 'darkorange'
複素数型の０で全要素を初期化した行列を初期化する	np.zeros(行数, 列数, dtype=bool)
option: ダークスラテグレーにグラフの色を指定する	color = 'darkslategray'
プロット中のフォントを変更する	sns.set(font=フォント名)
文字列を最後の部分文字列で二分し、後半の文字列を見る	s.rpartition(sub)[-1]
回帰分析をRANSACで行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
横棒グラフをホットピンク色で描画する	plt.barh(データ列x, データ列y, color='hotpink')
折れ線グラフをパールバイオレットレッド色で描画する	plt.plot(データ列x, データ列y, color='palevioletred')
棒グラフをフローラルホワイト色で描画する	plt.bar(データ列x, データ列y, color='floralwhite')
散布図の大バツ印を青くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
文字列全体が正規表現に複数行対応としてマッチするか見る	re.fullmatch(pattern, s, flags=re.MULTILINE)
散布図を耐火レンガ色を用いて描画する	plt.scatter(データ列x, データ列y, color='firebrick')
線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
折れ線グラフをディープスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
折れ線グラフの色をミディアムバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
option: マーカーの色をライトスチールブルーにする	markerfacecolor = 'lightsteelblue'
x,y,zをそれぞれn,n2,n3に指定する	x, y, z = n, n2, n3
ヒストグラムをオリーブ色を使って描画する	plt.hist(データ列, color='olive')
全要素を初期値で初期化した行列	np.full(要素数, 初期値, dtype=np.int)
日付データの日を使う	aDate.day
散布図をデピンク色を使って描画する	plt.scatter(データ列x, データ列y, color='deeppink')
option: 大バツマーカーを描画する	marker = 'X'
option: グラフの色をプラムに設定する	color = 'plum'
文字列がタプルの要素でないか調べる	element not in aTuple
色付きの点線として線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
データフレームから重複した行をドロップして更新する	df.drop_duplicates(inplace=True)
配列とリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
棒グラフの色をゴールドにする	plt.bar(データ列x, データ列y, color='gold')
現在は何月か知る	datetime.datetime.today().month
Pandasで、データ列を日付データに変換する	pd.to_datetime(ds)
標準出力を使う	sys.stdout
データフレームを表示するとき、折り返しを無効に設定する	pd.set_option('expand_frame_repr', False)
データフレームのリストカラムの欠損値を直前の値に設定する	df[aList].fillna(method='ffill')
折れ線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームのリストカラムの母標準偏差	df[aList].std(ddof=0)
文字列は全て十進数字か	s.isdecimal()
マッピングにタプルの項目を更新する	aDict.update(aDict2)
文字列が全て数字か	s.isdigit()
リストを四分位数ごとにビン分割する	pd.qcut(aList, 4)
行列の形状	aArray.shape
折れ線グラフの色をターコイズに設定する	plt.plot(データ列x, データ列y, color='turquoise')
文字列をISO書式を用いてタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
リストと配列についての散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
横棒グラフの色をrgbに設定する	plt.barh(ラベル列, データ列, color=rgb)
データフレームのカラムを10の位で丸めて整数型にする	df[col].round(-1).astype(int)
文字列の中で正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
option: フォントの色をダークオリーブグリーンにセットする	color = 'darkolivegreen'
ロバストな線形クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
文字列中にひとつでも非英字があるか調べる	any(not c.isalpha() for c in s)
横棒グラフの色をスチールブルーにする	plt.barh(データ列x, データ列y, color='steelblue')
ISO書式の文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
ヒストグラムを淡いピンク色色で描画する	plt.hist(データ列, color='lightpink')
データフレームの最後の列以外を全て説明変数にする	説明変数 = df[df.columns[:-1]]
ハニーデューにヒストグラムの色を設定する	plt.hist(データ列, color='honeydew')
横棒グラフをゲインズボロ色で描画する	plt.barh(データ列x, データ列y, color='gainsboro')
xでデータフレームのカラムの欠損値を埋める	df[col].fillna(x)
ヒストグラムをディープスカイブルー色を使って描画する	plt.hist(データ列, color='deepskyblue')
データフレームの中に文字列があるか調べる	df.isin([value])
データフレームを'A'列によって小さい順に整列して、更新する	df.sort_values(by='A', ascending=True, inplace=True)
白色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
キーが辞書上で定義済みか調べる	key in aDict
ピーチパフ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
棒グラフをシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='cyan')
スプリンググリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
データフレームのそれぞれのグループごとの最大値	df.groupby(column).max()
青緑色の散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
オリベドラブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olivedrab')
折れ線グラフを赤い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
双方向キューの順を右にn個分ローテンションする	deq.rotate(n)
ヒストグラムを茶色色として描画する	plt.hist(データ列, color='brown')
option: 追加モードに設定する	mode = 'a'
降順に列によってでデータフレームをソートする	df.sort_values(by=column, ascending=False)
散布図に赤いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='r')
オブジェクトがタプルか	isinstance(obj, tuple)
棒グラフの色をマゼンタにする	plt.bar(データ列x, データ列y, color='magenta')
横棒グラフをオレンジ色で描画する	plt.barh(データ列x, データ列y, color='orange')
棒グラフを赤くする	plt.bar(データ列x, データ列y, color='r')
データ列とイテラブルについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
新しいロジスティック回帰モデルを作成する	model = sklearn.linear_model.LogisticRegression()
無限にカウントアップする	itertools.count()
ダークオレンジ色としてヒストグラムを描画する	plt.hist(データ列, color='darkorange')
線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
Pandasで、データフレームのcollのエポック秒からタイムスタンプ型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
ヒストグラムの色をダークスラテグレーに設定する	plt.hist(データ列, color='darkslategray')
折れ線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
データフレームから型リストのデータ型の列だけ除外する	df.select_dtypes(exclude=typeList)
カンマで区切って二つの文字列をプリントする	print(value, value2, sep=',')
ラベンダー色のヒストグラムを描画する	plt.hist(データ列, color='lavender')
折れ線グラフをミッドナイトブルー色として描画する	plt.plot(データ列x, データ列y, color='midnightblue')
データフレームの各グループごとの最大値	df.groupby(column).max()
JSONファイルファイル名が	filename.endswith('.json')
配列をビン数nとして分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
プロットにx=0の一点鎖線をつける	plt.axvline(x=0, linestyle='dashbot')
文字列をセパレータで分割して文字列リストに変換する	s.split(sep)
プロットをプレゼンてション用に設定する	sns.set(context='talk')
データフレームの列の歪度を計算する	df[col].kurt()
ファイルパスからバイナリストリームを開き]、fとする	f = open(filepath, mode='rb')
ヒストグラムの色をインディアンレッドに設定する	plt.hist(データ列, color='indianred')
散布図のポイント印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
散布図を青色で描画する	plt.scatter(データ列x, データ列y, color='blue')
データ列間の平方根平均二乗誤差を計算する	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
option: グラフの色をホワイトスモークに指定する	color = 'whitesmoke'
バイアスなしの線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
ふたつの関係が下位集合かどうか調べる	aSet.issubset(aSet2)
クラス分類の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
0からnまでの整数列	list(range(n+1))
破線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dashed')
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データ列の中に日付データがあるかどうかテストする	ds.isin([value])
範囲指定して表データの行を抽出する	df[start:end]
キューの中に文字列はあるか確認する	element in deq
黒い星マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='*', c='k')
ナバホホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
散布図をラベンダーブラッシュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
イテラブルに列を続けた列	itertools.chain(iterable, iterable2)
文字列からformatのパターンでタイムスタンプにする	datetime.datetime.strptime(日付の書かれた文字列, format)
グラフのデータラベルの位置を指定する	plt.legend(loc=(x, y))
横棒グラフをアイボリー色として描画する	plt.barh(データ列x, データ列y, color='ivory')
リストから文字列を取り除く	aList.remove(element)
実数のアークコサイン	math.acos(x)
折れ線グラフの色をカデットブルーに指定する	plt.plot(データ列x, データ列y, color='cadetblue')
横棒グラフを耐火レンガ色で描画する	plt.barh(データ列x, データ列y, color='firebrick')
ヒストグラムをダークシアグリーン色で描画する	plt.hist(データ列, color='darkseagreen')
折れ線グラフを小麦色色として描画する	plt.plot(データ列x, データ列y, color='wheat')
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategray')
カラムを小数点以下n桁で四捨五入する	ds.round(n)
ベージュ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='beige')
ファイルを書き込み用にオープンする]	open(filepath, mode='w')
データ列のNaNをxに設定する	ds.fillna(x)
平均値付き箱ひげ図をプロットする	plt.boxplot(データ列, showmeans=True)
option: ダークレッド色を用いる	color = 'darkred'
文字列の開始位置より後に部分文字列が存在するかどうか確認する	s.find(sub, start) != -1
ファイルが存在するかテストする	os.path.exists(filepath)
棒グラフの色を青紫にする	plt.bar(データ列x, データ列y, color='violet')
色付きの点線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
option: タブをセパレータで使う	sep = '\t'
配列のデータ型	aArray.dtype()
option: 色をシアンに変更する	color = 'cyan'
ストリームに文字列を書き込む	f.write(s)
n2がnより大きく、かつ、n3未満か調べる	n < n2 and n2 < n3
option: 紺碧色を使う	color = 'azure'
折れ線グラフの色をスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='springgreen')
option: アンティークホワイト色を使う	color = 'antiquewhite'
option: ライトゴールドロディイエローを使用する	color = 'lightgoldenrodyellow'
ふたつの集合の対称差集合を求める	aSet.symmetric_difference(aSet2)
ライトグリーン色でヒストグラムを描画する	plt.hist(データ列, color='lightgreen')
棒グラフを白色で描画する	plt.bar(データ列x, データ列y, color='white')
シーケンスを文字列リストに変換して、'改行で結合する	'\n'.join(map(str, iterable))
特異値分解として淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
列をキーとして２つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
全印字	string.printable
棒グラフをライトイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightyellow')
xのハッシュ値を算出する	hash(x)
データフレームのリストカラムの中にいくつ文字列があるか数える	df[aList].isin([value]).sum()
ピーチパフ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peachpuff')
ダークバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームの列と列の相関行列スピアマン相関係数でを求める	df[[column, column2]].corr(method='spearman')
option: グラフの色を青緑に設定する	color = 'teal'
マッピングのコピーを作る	aDict.copy()
プログラムのファイル名を知る	sys.argv[0]
半透明の実線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ダイアモンド印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
カウンタのキーを、そのカウントだけリストとして得る	aCounter.elements()
データフレームの列をダミー変数に変換する	pd.get_dummies(df[column])
改行付きで辞書を文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
実行結果を黄色で表示できる文字列に変換する	f'\033[33m{value}\033[0m'
最大長nの両端キューを準備する	collections.deque(maxlen=n)
今日が月曜日	datetime.datetime.today().weekday() == 0
option: グラフの色をオーキッドに設定する	color = 'orchid'
ふたつの集合は互いに素か判定する	aSet.isdisjoint(aSet2)
データフレームのリストカラムが正規分布からどの程度歪んでいるか見る	df[aList].kurt()
ヒストグラムの色をラベンダーに設定する	plt.hist(データ列, color='lavender')
y座標の表示範囲を変更する	plt.ylim(最小値, 最大値)
散布図をコーンフラワーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
二つのデータフレームを横方向に一つにする	pd.merge(df, df2)
散布図のバツ印を黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図に▼マーカーを使用する	plt.scatter(データ列x, データ列y, marker='v')
データフレームのカラムの欠損値を最小値で埋める	df[col].fillna(df[col].min())
折れ線グラフを色付きの実線として描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
ヒストグラムをスカイブルー色で描画する	plt.hist(データ列, color='skyblue')
option: 文字列の示すエンコーディングを使用する	encoding = s
rgbの左三角マーカーをイテラブルと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
日付時刻データが火曜日	aDatetime.weekday() == 1
ふたつの集合に共通する要素からなる集合を見る	aSet.intersection(aSet2)
option: ダイアモンドマーカーを使う	marker = 'D'
xでデータ列の未入力値を埋める	ds.fillna(x)
リストを配列に変換する	np.array(aList)
散布図に赤いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
ヒストグラムをモカシン色で描画する	plt.hist(データ列, color='moccasin')
配列の要素ごとに加算する	aArray + aArray2
パールゴールデンロッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
オールドレース色のヒストグラムを描画する	plt.hist(データ列, color='oldlace')
option: ライトシアンに色を変更する	color = 'lightcyan'
データ列のNaNをモードで埋める	ds.fillna(ds.mode().iloc[0])
散布図の色をミッドナイトブルーにする	plt.scatter(データ列x, データ列y, color='midnightblue')
n個にデータ列を等間隔で分割する	pd.cut(ds, n)
ヒストグラムをミディアムアクアマリン色で描画する	plt.hist(データ列, color='mediumaquamarine')
ヒストグラムの色をライトゴールドロディイエローに設定する	plt.hist(データ列, color='lightgoldenrodyellow')
散布図の大バツマーカーの太さを指定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
折れ線グラフを実線を用いて描く	plt.plot(データ列x, データ列y, linestyle='solid')
rgbの四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: ミディアムバイオレットレッドを使う	color = 'mediumvioletred'
データフレームの全カラムの散らばりを可視化する	sns.pairplot(df)
オプションでファイルを出力先にする	file = sys.open(filename, 'w')
列によってデータフレームをソートして、新しい行を加える	df.sort_values(columns).reset_index()
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるか調べる	s.count(sub, start, end)
option: 貝殻色を用いる	color = 'seashell'
散布図にダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
棒グラフの色をフクシアにする	plt.bar(データ列x, データ列y, color='fuchsia')
データフレームをグループ化しそれぞれの列に対し個数を求める	df.groupby(column)[column2].count()
リストとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
折れ線グラフの色をパレットトルコイズに設定する	plt.plot(データ列x, データ列y, color='paleturquoise')
文字列を代数計算の変数に変換する	sympy.Symbol(s)
決定係数を計算する	sklearn.metrics.r2_score(データ列, データ列2)
折れ線グラフの星マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
option: 濃いシアンに色を設定する	color = 'darkcyan'
マッピングの値に要素が含まれていないか確認する	element not in aDict.values()
黒い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
リストの平均値	sum(aList)/len(aList)
データフレームを複数の列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
日付データが木曜日	aDate.weekday() == 3
散布図をハニーデュー色で描画する	plt.scatter(データ列x, データ列y, color='honeydew')
ファイルからn文字読む	f.read(n)
データ列の値をValueMapでまとめて置き換える	ds.replace(ValueMap)
グラフの中に枠なしの凡例を入れる	plt.legend(frameon=False)
二つの浮動小数点数が近似値か調べる	math.isclose(x, x2)
ヒストグラムの色をライトイエローに指定する	plt.hist(データ列, color='lightyellow')
グラフをプレゼンてションにセットする	sns.set(context='talk')
双方向キューの大きさを求める	len(deq)
折れ線グラフの色をミディアムバイオレットレッドに指定する	plt.plot(データ列x, データ列y, color='mediumvioletred')
配列の差を求める	aArray - aArray2
データフレームのリスト列のヒートマップをグラフ化する	sns.heatmap(df[aList].corr())
棒グラフをリネン色として描画する	plt.bar(データ列x, データ列y, color='linen')
xでデータフレームの欠損値を埋める	df.fillna(x)
リストとリストについて散布図を描いて、マーカーを▲に設定する	plt.plot(データ列x, データ列y, marker='^')
横棒グラフの色をコーンズシルクにする	plt.barh(データ列x, データ列y, color='cornsilk')
データフレームを1000の位で丸めて、整数にする	df.round(-3).astype(int)
折れ線グラフをオリベドラブ色で描画する	plt.plot(データ列x, データ列y, color='olivedrab')
文字列をバイト配列に変換する	bytearray(s)
option: 三角マーカーを使う	marker = '^'
セット＼集合	aSet.difference(aSet2)
ヒストグラムの色をグレーに変更する	plt.hist(データ列, color='grey')
ダークグリーン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
横軸の目盛りを対数に変更する	plt.xscale('log')
option: マーカーの色をスノーにする	markerfacecolor = 'snow'
文字列の終了位置まで部分文字列を探す	s.find(sub, 0, end)
rgbの大バツマーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
丸マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
変数について数式の積分を行う	sympy.integrate(e, z)
散布図をディムグレー色で描画する	plt.scatter(データ列x, データ列y, color='dimgray')
縦棒グラフをダークシアグリーン色として描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
散布図に黒い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='k')
横棒グラフを白色で描画する	plt.barh(データ列x, データ列y, color='white')
散布図のバツマーカーを青くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
ダークターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
文字列をdatetime64型に変換する	pd.to_datetime(s)
データ列を等間隔でn個にビニングする	pd.cut(ds, n)
option: マーカーの色をオールドレースにする	markerfacecolor = 'oldlace'
横棒グラフをミディアムターコイズ色で描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
データ列を10の位で四捨五入して整数型にする	ds.round(-1).astype(int)
ヒストグラムベースの勾配ブースティング分類木を作る	model = sklearn.ensemble.HistGradientBoostingClassifier()
追加できるようにファイルパスをオープンする]	open(filepath, mode='a')
折れ線グラフのバツマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
エクセルデータファイルからを読み込む	pd.read_excel(filename)
ISO書式の文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
イテラブルを文字列に変換してつなげる	''.join(map(str, iterable))
文字列を最後の部分文字列で二分し、残りの文字列を求める	s.rpartition(sub)[-1]
データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
option: カデットブルーにグラフの色を設定する	color = 'cadetblue'
二変数の最も小さい値	min(x, y)
データフレームのカラムを1000の位で四捨五入して、整数型にする	df[col].round(-3).astype(int)
option: ミディアムパープル色を使う	color = 'mediumpurple'
折れ線グラフの色をクリムゾンに指定する	plt.plot(データ列x, データ列y, color='crimson')
ヒストグラムの色をミスティローズに変更する	plt.hist(データ列, color='mistyrose')
JSON形式の文字列をデータにする	json.loads(b.decode('unicode-escape'))
横棒グラフの色をダークグリーンにする	plt.barh(データ列x, データ列y, color='darkgreen')
折れ線グラフの色をアクアマリンに設定する	plt.plot(データ列x, データ列y, color='aquamarine')
データフレームから型型を抽出する	df.select_dtypes(ty)
データ列の変遷を青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
バギングで回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
データフレームの列のpercent分位数	df[col].quantile(percent/100)
イテラブルをワンホット・ベクトルに変換する	pd.get_dummies(iterable)
リストに要素を追加する	aList.append(element)
折れ線グラフをパールゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
option: グラフの種類を実線に指定する	linestyle = 'solid'
データフレームのn行目を取り除いて、更新する	df.drop(n, axis=0, inplace=True)
Pythonパスにを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
数列の四分位を作図する	plt.boxplot(データ列)
割合付きの円プロットを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
二数の最小値を計算する	min(x, y)
予測結果の適合率を求める	sklearn.metrics.precision_score(正解データ列, 予測データ列)
リストとリストの散布図に黒い大バツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='X', c='k')
データフレームの中で列と列の重複を見る	df.duplicated(subset=[column, column2])
データフレームをJSONLファイルにインデックスを付けずに保存する	df.to_csv(filename, index=None)
文字列を最後の部分文字列で分けたときの後半の文字列を使う	s.rpartition(sub)[-1]
ミディアムスプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
ラベル付きの円プロットを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
数字を使う	string.digits
文字列中にひとつでも非アスキー文字があるかどうか調べる	any(not c.isascii() for c in s)
マゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
nがn2以下または、n3以上かどうか判定する	n <= n2 or n >= n3
データフレームのカラムの欠損値をモードで置換する	df[col].fillna(df[col].mode().iloc[0])
エラーなく集合から要素を除去する	aSet.discard(element)
横棒グラフの色をダーク・スラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategrey')
ヒストグラムの線種を実線に設定する	plt.hist(データ列, linestyle='solid')
散布図を淡いピンク色色として描画する	plt.scatter(データ列x, データ列y, color='lightpink')
散布図をダークマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
ファイルパスの拡張子なしのファイル名を見る	os.path.splitext(os.path.basename(filepath))[0]
折れ線グラフを青紫色として描画する	plt.plot(データ列x, データ列y, color='violet')
アリスブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
nをn2だけ右シフトする	n >> n2
複数の列によってデータフレームをまとめたグループ	df.groupby(columns)
文字列全体を複数行対応として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
ファイルパスのディレクトリ名	os.path.dirname(filepath)
散布図のポイントマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
ダークレッド色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkred')
棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
散布図の色をダークグリーンにする	plt.scatter(データ列x, データ列y, color='darkgreen')
データフレームのリストカラムのNaNを最小値で補う	df[aList].fillna(df[aList].min())
横棒グラフの色をミディアムスレートブルーにする	plt.barh(データ列x, データ列y, color='mediumslateblue')
データフレームのカラムは何月か確認する	df[col].dt.month
配列をビン分割する	pd.cut(aArray, aList)
option: 深さを制限する	maxdepth = n
数式処理を使う	import sympy
赤い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームのグループ化した散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
option: コロンを区切りで使う	sep = ':'
散布図の四角印の太さを変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
下三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
グラフの描画でパステル調にカラーパレットを使う	sns.set(pallete='pastel')
ヒストグラムの色をライトサーモンに設定する	plt.hist(データ列, color='lightsalmon')
最後の部分文字列によって文字列を二分割する	s.rpartition(sub)
赤色を使ってヒストグラムを描画する	plt.hist(データ列, color='red')
整数nをバイナリにする	n.to_bytes(length=bytesize, byteorder='big')
グリーンイエロー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
折れ線グラフに青い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
option: スカイブルーを用いる	color = 'skyblue'
等差数列から整数乱数を算出する	random.randrange(start, end, step)
データフレームとしてTSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
集合から別の集合との共通要素を全て取り除く	aSet.symmetric_difference_update(aSet2)
散布図の左三角印の色を変える	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
nが1もしくは2かどうか調べる	n == 1 or n == 2
列を累積したイテラブル	itertools.accumulate(iterable, operator.mul)
小数点数の逆双曲線正弦を計算する	math.asinh(x)
シアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
三自然数の最大公約数	math.gcd(n, n2, n3)
折れ線グラフの色をダークシアグリーンに設定する	plt.plot(データ列x, データ列y, color='darkseagreen')
xを浮動小数点数に変換する	float(x)
ダークマゼンタにヒストグラムの色を設定する	plt.hist(データ列, color='darkmagenta')
折れ線グラフを赤い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
文字列を走査し、正規表現に複数行対応としてマッチするか調べる	re.search(pattern, s, flags=re.MULTILINE)
option: マゼンタ色を使う	color = 'magenta'
偽陰性を抑えたい指標を使う	sklearn.metrics.recall_score(正解データ列, 予測データ列)
横棒グラフを青紫色で描画する	plt.barh(データ列x, データ列y, color='violet')
棒グラフの色をミントクリームにする	plt.bar(データ列x, データ列y, color='mintcream')
データフレームのカラムの欠損値を平均値で埋める	df[col].fillna(df[col].mean())
散布図をイエローグリーン色として描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
ダイアモンドマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
option: エンコーディングをEUCに指定する	encoding = 'euc_jp'
横棒グラフを暗い赤色で描画する	plt.barh(データ列x, データ列y, color='darkred')
option: 印の色を変える	markerfacecolor = '#800080'
option: インディゴ色を使う	color = 'indigo'
文字列TSVからカンマ区切りのファイルをn番目のカラムを行として読み込む	pd.read_csv(filename, index_col=n)
カラムの未入力値を平均値に設定する	ds.fillna(ds.mean())
列のコンビネーション	itertools.combinations(iterable, n)
棒グラフをアクアマリン色として描画する	plt.bar(データ列x, データ列y, color='aquamarine')
option: 改行コードを旧Macに設定する	newline = '\r'
列'A'と列'B'をキーにして二つの表データを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
実数の余弦の逆数	math.acos(x)
option: グラフの色をロイヤルブルーに設定する	color = 'royalblue'
データフレームを列の値でグループ化し、要約統計量を算出する	df.groupby(column).describe()
データ列の中にいくつ文字列があるか数える	ds.isin([value]).sum()
２つの文字列が同じか判定する	s == s2
データフレームのリストカラムの欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
ヒストグラムの色をコーンフラワーブルーに設定する	plt.hist(データ列, color='cornflowerblue')
折れ線グラフのクロスマーカーを赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
横棒グラフをシーグリーン色で描画する	plt.barh(データ列x, データ列y, color='seagreen')
棒グラフを白くする	plt.bar(データ列x, データ列y, color='w')
分類モデルの予測精度を調べる	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
リストの最後から要素をポップする	aList.pop()
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
文字列を区切りで区切り、列挙する	s.split(sep)
散布図をカデットブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
ヒストグラムを実線に設定する	plt.hist(データ列, linestyle='solid')
折れ線グラフを真紅色で描画する	plt.plot(データ列x, データ列y, color='crimson')
ヒストグラムの色をグリーンイエローに設定する	plt.hist(データ列, color='greenyellow')
二つのデータフレームを横方向に連結する	pd.concat([df, df2], axis=1)
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
オレンジレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orangered')
空文字	''
ヒストグラムをバイオレット色を用いて描画する	plt.hist(データ列, color='violet')
散布図をスノー色で描画する	plt.scatter(データ列x, データ列y, color='snow')
横棒グラフの色をシエナにする	plt.barh(データ列x, データ列y, color='sienna')
option: ゴールドを使う	color = 'gold'
横棒グラフの色をイエローグリーンにする	plt.barh(データ列x, データ列y, color='yellowgreen')
文字列中のタブ文字を空白に置き換える	s.expandtabs(tabsize=n)
横棒グラフをライトグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgray')
配列の相関係数と有意確率を使う	scipy.stats.pearsonr(データ列, データ列2)
データを四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
グラフにデータラベルを追記する	plt.legend(['凡例A', '凡例B'])
option: オレンジレッド色を使う	color = 'orangered'
偽陽性を抑えたい指標を使う	sklearn.metrics.precision_score(正解データ列, 予測データ列)
集合から任意の要素を取り除く	aSet.pop()
option: 印をダイアモンドに変える	marker = 'D'
線グラフをライトスカイブルー色として描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
コーンズシルク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
辞書をインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
ピーチパフ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='peachpuff')
散布図の右三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
option: マーカーの色をダークオーキッドにする	markerfacecolor = 'darkorchid'
option: フォントの色をマゼンタに変更する	color = 'magenta'
日付データの日数	aDate.day
option: グラフの色をゴーストホワイトに設定する	color = 'ghostwhite'
実数のサインの逆数	math.asin(x)
二つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
データ列の未入力値を直前の値で埋める	ds.fillna(method='ffill')
散布図をミディアムアクアマリン色として描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
データフレームの列がx以下の行を取り出す	df[df[column] <= x]
文字列を改行で区切る	s.splitlines()
データ列のNaNを平均値に設定する	ds.fillna(ds.mean())
本日の曜日を使う	datetime.datetime.today().weekday()
バリーウッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
データフレームの散布図をグループ化して縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
ライトブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
ファイルをバイナリモードでオープンする]	open(filepath, mode='rb')
線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
データフレームをグループ化し、それぞれの列に対し最小値を計算する	df.groupby(column)[column2].min()
x軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
データフレームの列の中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
データフレームを'A'列によってで降順にソートする	df.sort_values(by='A', ascending=False)
ヒストグラムをシャルトリューズ色を用いて描画する	plt.hist(データ列, color='chartreuse')
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgray')
イテラブルから重複を取り除く	set(iterable)
リストからオブジェクトを捨てる	aList.remove(element)
データフレームを二つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
n行を重複ありでランダムにデータフレームからサンプリングする	df.sample(n, replace=True)
option: ロージーブラウン色を用いる	color = 'rosybrown'
二つのデータフレームを列'A'と列'B'をキーとして全結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
year年の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=1, day=1)
文字列を空白を用いて区切る	s.split()
折れ線グラフに黒い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
折れ線グラフに赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
データフレームの指定された列をリストに変換する	df[column].values.tolist()
リストとリストについての散布図にrgbの星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
線グラフをグリーン色で描画する	plt.plot(データ列x, データ列y, color='green')
折れ線グラフの色をミスティローズに設定する	plt.plot(データ列x, データ列y, color='mistyrose')
データフレームの相関行列スピアマンで	df.corr(method='spearman')
全ての句読点文字	string.punctuation
option: グラフの色をスレートブルーに指定する	color = 'slateblue'
パールゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
散布図に赤い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='r')
最頻値でデータフレームの欠損値を補う	df.fillna(df.mode().iloc[0])
データフレームの中に存在する文字列と文字列の合計を数える	df.isin([value, value2]).sum()
青い実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
配列と同じ大きさの空のベクトルを初期化する	np.empty_like(aArray)
配列の変遷を折れ線グラフで作図する	plt.plot(range(len(データ列)), データ列)
散布図をミディアムスプリンググリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
option: 色をダークオレンジに設定する	color = 'darkorange'
淡いピンク色色でヒストグラムを描画する	plt.hist(データ列, color='lightpink')
小文字が文字列内に含まれるか調べる	any(c.islower() for c in s)
リストとデータ列の散布図を描き、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
異なるカラムをキーにして2つのデータフレームを内部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
y座標の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
nの無限整数イテラブル	itertools.repeat(n)
列名の一覧をデータ型でフィルタする	df.select_dtypes(型).columns
バツ印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
option: ライトグリーン色を使う	color = 'lightgreen'
データフレームを各列毎にグループ化して、文字列というグループを使う	df.groupby(column).get_group(s)
ホワイトスモーク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='whitesmoke')
データフレームで、列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
アリスブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aliceblue')
０で全要素を初期化した符号なし８ビット整数型の行列を作る	np.zeros(行数, 列数, dtype=np.uint8)
両端キュー中の要素のインデックス	deq.index(element)
リスト内の要素が少なくともひとつ真か	any(aList)
データフレームを表示するとき、表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
ダークカーキ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
横棒グラフの色をシャルトリューズにする	plt.barh(データ列x, データ列y, color='chartreuse')
タイムスタンプデータをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
散布図の色をダークシアンにする	plt.scatter(データ列x, データ列y, color='darkcyan')
横棒グラフをブラック色を用いて描画する	plt.barh(データ列x, データ列y, color='black')
決定木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
データフレームのn行以降抽出する	df[n:]
ピンク色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='pink')
2つの文字列を辞書順で比較する	s < s2
データ列の未入力値を直後の値に指定する	ds.fillna(method='bfill')
ヒストグラムの色をホットピンクに設定する	plt.hist(データ列, color='hotpink')
２次元タプルをフラット化する	sum(aTuple)
横棒グラフをバイオレット色として描画する	plt.barh(データ列x, データ列y, color='violet')
散布図の色をターコイズにする	plt.scatter(データ列x, データ列y, color='turquoise')
コマンドの第二引数を確認する	sys.argv[1]
イエローグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
シャルトリューズにヒストグラムの色を設定する	plt.hist(データ列, color='chartreuse')
データフレームの第一四分位数を求める	df.quantile(0.25)
データフレームから散布図を作り、回帰直線を加える	sns.regplot(data=df, x='列名', y='列名')
option: 印の大きさを変える	markersize = 2.0
文字列がタイトルケースか調べる	s.istitle()
option: ボックスチャートに平均を加える	showmeans = False
データフレームを各列毎にグループ分けして、列の標準偏差を算出する	df.groupby(column)[column2].std()
マッピングのキーとその値をペアとして取り出す	aDict.items()
正則化付き回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
散布を可視化する	plt.scatter(データ列x, データ列y)
線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
横棒グラフをライトサーモン色で描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
データフレームの中にいくつNaNが含まれるか数える	df.isna().sum()
データフレームを列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
アルファベットが文字列内に含まれるか調べる	any(c.isalpha() for c in s)
ダークマゼンタ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
改行で文字列を区切り、文字列リストに変換する	s.splitlines()
線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
二つの配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
回帰分析をPLSで行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データ列の推移を色付きの点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
option: 小麦色にグラフの色を変更する	color = 'wheat'
ヒストグラムの色を貝殻に変更する	plt.hist(データ列, color='seashell')
データフレームからカテゴリデータを選ぶ	df.select_dtypes('object')
横棒グラフの色をマゼンタにする	plt.barh(データ列x, データ列y, color='magenta')
ライトゴールドロディイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightgoldenrodyellow')
折れ線グラフをレベッカパープル色で描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
option: スラッシュを分割記号で使う	sep = '/'
option: 色をスプリンググリーンに設定する	color = 'springgreen'
n行をランダムにデータフレームから取り出す	df.sample(n)
折れ線グラフをコーラル色で描画する	plt.plot(データ列x, データ列y, color='coral')
nとn2の値を足してnに代入する	n += n2
横棒グラフをサンディーブラウン色で描画する	plt.barh(データ列x, データ列y, color='sandybrown')
折れ線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
文字列に文字列中の部分文字列を置換する	s.replace(sub, newsub)
黄色色のヒストグラムを描画する	plt.hist(データ列, color='yellow')
リストとリストについての散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
レベッカパープル色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
降順に列によってによってデータフレームをソートする	df.sort_values(by=column, ascending=False)
文字列をカンマで分割して、文字列リストにする	s.split(',')
option: ライトブルーを使用する	color = 'lightblue'
データ列の正規分布に対する左右対称性	ds.kurt()
縦棒グラフをアンティークホワイト色として描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ヒストグラムの色をイエローグリーンに指定する	plt.hist(データ列, color='yellowgreen')
option: ライトスレイグレー色を使う	color = 'lightslategrey'
データフレームから指定された４つの列を抽出する	df[[column, column2, column3, column4]]
横棒グラフをターコイズ色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
配列の列ごとの平均	np.mean(aArray, axis=0)
データフレームの列がxより大きくx2より小さい行を取り出す	df[(x < df[column]) & (df[column] < x2)]
データフレームを列によって並べて、上位n件を取り出す	df.sort_values(columns).head(n)
散布図の三角印を赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
実数を実数から引く	x - y
浮動小数点数に整数を加算する	x + y
カウンタのユニークな文字列を列挙する	list(aCounter)
データ列の推移を色付きの破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
折れ線グラフのバツ印の色を変える	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
option: 色をシャルトリューズにセットする	color = 'chartreuse'
option: マーカーの色を茶色にする	markerfacecolor = 'brown'
異なるn個のものからk個選ぶ場合の数	math.comb(n, k)
マッピングの全項目をクリアする	aDict.clear()
タプルをひとつ置きに取り出す	aTuple[::2]
データ列の欠損値を直前の値に設定する	ds.fillna(method='ffill')
option: マーカーの色をトマトにする	markerfacecolor = 'tomato'
rgbに横棒プロットの色を設定する	plt.barh(ラベル列, データ列, color=rgb)
散布図に黒いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
縦棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategrey')
オリベドラブ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
折れ線グラフをペールグリーン色で描画する	plt.plot(データ列x, データ列y, color='palegreen')
option: ダークスラテグレー色を用いる	color = 'darkslategray'
predicateFuncを適用したとき真とならない列の要素	itertools.dropwhile(predicateFunc, iterable)
データフレームをグループ化し、それぞれの列に対し最小値を求める	df.groupby(column)[column2].min()
マップのキー一覧を得る	list(aDict)
グラフの横軸のラベルを指定する	plt.xlabel('x軸ラベル')
データフレームのカラムの空文字を欠損値に変換し、ドロップする	df[col].replace('', np.nan).dropna()
ゴールド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
散布図の色をパープルにする	plt.scatter(データ列x, データ列y, color='purple')
データフレームのカラムが何月か確認する	df[col].dt.month
赤色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='red')
ダークカーキにヒストグラムの色を設定する	plt.hist(データ列, color='darkkhaki')
辞書の浅いコピーを作る	aDict.copy()
option: 色をライトグレーにセットする	color = 'lightgray'
乱数の行列	np.random.random((行数, 列数))
文字列全体が正規表現にマッチするか調べる	re.fullmatch(pattern, s)
option: マーカーの色をゲインズボロにする	markerfacecolor = 'gainsboro'
縦棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
文字列を右トリムする	s.rstrip()
棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームのカラムの欠損値を最大値で埋める	df[col].fillna(df[col].max())
横棒グラフの色をスカイブルーにする	plt.barh(データ列x, データ列y, color='skyblue')
データ列が何月か見る	ds.dt.month
ヒストグラムの色をディムグレーに指定する	plt.hist(データ列, color='dimgrey')
ファイルをクローズする	f.close()
ヒストグラムの色をフローラルホワイトに設定する	plt.hist(データ列, color='floralwhite')
試しに何か動かす	print('Hello World')
option: バイオレットにグラフの色を指定する	color = 'violet'
組の各要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
option: ライトコーラルにグラフの色を設定する	color = 'lightcoral'
データフレームの指定されたデータ型の列名を列挙する	df.select_dtypes(型).columns
昇順にリストの値をソートする	sorted(aList, reverse=False)
文字列の終了位置より前に部分文字列が含まれないかどうか調べる	s.find(sub, 0, end) == -1
year年month月day日の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day)
ピーチパフ色のヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
n個の数値イテラブル	range(n)
データフレームの中の列と列に重複があれば落とす	df.drop_duplicates(subset=column)
黄色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellow')
データフレームのリストカラムを1000の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
option: 整数型を使う	dtype = np.int
predicateFuncが真となるシーケンスの部分	itertools.dropwhile(predicateFunc, iterable)
option: オレンジ色を使う	color = 'orange'
棒グラフの色をダークオーキッドにする	plt.bar(データ列x, データ列y, color='darkorchid')
黒いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
棒グラフをホワイトスモーク色で描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
タプルの要素を昇順にソートする	sorted(aTuple, reverse=False)
option: 印を下三角に変更する	marker = 'v'
nが奇数か確認する	n % 2 == 1
変数が無限大に近づくときの数値の極限値を計算する	sympy.limit(e, z, oo)
リストとリストについて散布図を描画し、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
サポートベクターマシンでクラス分類をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
数列の相関係数を使う	scipy.stats.pearsonr(データ列, データ列2)
ブルーバイオレット色のヒストグラムを描画する	plt.hist(データ列, color='blueviolet')
リストの末尾を捨てる	aList[:-1]
option: ダークゴールデンロッドにグラフの色を設定する	color = 'darkgoldenrod'
option: ダークオレンジ色を使う	color = 'darkorange'
折れ線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
組中の文字列が最初に見つかる場所を探す	aTuple.index(element)
データフレームの各グループの最大値	df.groupby(column).max()
データフレームのカラムの値を正規表現patternでまとめてreplに置き換える	df[col].replace(pattern, repl, regex=True)
データフレームの値をValueMapで置換する	df.replace(ValueMap)
キュー中の要素のインデックスを使う	deq.index(element)
データ列を中央値でビン分割する	pd.qcut(ds, 2)
文字列リストを連結する	''.join(aStringList)
ミディアムバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumvioletred')
散布図の色をアクアにする	plt.scatter(データ列x, データ列y, color='aqua')
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
ヒストグラムの色をラベンダーブラッシュに設定する	plt.hist(データ列, color='lavenderblush')
x,yの複素数	complex(x, y)
多次元データを主成分分析を用いてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
棒グラフの色を小麦色にする	plt.bar(データ列x, データ列y, color='wheat')
列で未入力値を含めてデータフレームをグループ化する	df.groupby(column, dropna=False)
実数のn乗	x ** n
文字列全体がパターンにマッチするか見る	re.fullmatch(pattern, s)
線グラフの色をダークターコイズに変更する	plt.plot(データ列x, データ列y, color='darkturquoise')
カラムの名前を指定せずTSVファイルを読み込む	pd.read_csv(filename, header=None)
オブジェクトがあるクラスか調べる	isinstance(obj, クラス)
データフレームの先頭	df.head()
クラス分類の正解率を求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
箱ヒゲ図でデータフレームの二つのカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
縦棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
目盛り線をプロットに入れる	plt.grid(True)
横棒グラフの色をスノーにする	plt.barh(データ列x, データ列y, color='snow')
option: ライムにグラフの色を設定する	color = 'lime'
日付データからn週間分、減算する	aDate - datetime.timedelta(weeks=n)
ダイアモンド印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
ブランチドアーモンド色のヒストグラムを描画する	plt.hist(データ列, color='blanchedalmond')
文字列が全てアルファベットか判定する	s.isalpha()
棒グラフをオリベドラブ色で描画する	plt.bar(データ列x, データ列y, color='olivedrab')
実数のn乗の浮動小数点数剰余を算出する	pow(x, n, y)
タプルをJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False)
option: グラフの色をサドルブラウンに設定する	color = 'saddlebrown'
データフレームの列を10の位で四捨五入して、整数にする	df[col].round(-1).astype(int)
シャルトリューズ色を用いてヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
折れ線グラフの丸マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
カウンタの項目をリストとして得る	aCounter.keys()
ダークバイオレット色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
マルーン色でヒストグラムを描画する	plt.hist(データ列, color='maroon')
散布図をクロスマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
ベクトルの全要素の値を変更する	aArray[:, :] = 指定の値
option: グラフの色をライムに設定する	color = 'lime'
データフレームを各列毎にグループ化し、、列の個数を求める	df.groupby(column)[column2].count()
リストを文字列リストに変換して、'改行で結合する	'\n'.join(map(str, iterable))
データフレームを未入力値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
文字列内に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
ライトゴールドロディイエロー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
二つのデータフレームを横方向に合体させる	pd.merge(df, df2)
リストの値をソートする	sorted(aList)
nが1、もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
ヒストグラムの色をサンディーブラウンに設定する	plt.hist(データ列, color='sandybrown')
スピアマン相関係数としてデータフレームのリストで指定した列の相関行列	df[aList].corr(method='spearman')
データフレームのインデックスがnの行を抽出する	df.loc[n]
部分文字列が文字列の開始位置と終了位置の間にある	s.find(sub, start, end) != -1
シーグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seagreen')
option: グラフの色を耐火レンガに設定する	color = 'firebrick'
文字列の開始位置と終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
散布図に丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
ファイルを改行除外して一行ずつ読む	f.readline()
option: グラフの色をライトグレーに変更する	color = 'lightgray'
option: グラフの色をゴールデンロッドに設定する	color = 'goldenrod'
代数計算を用いる	import sympy
列をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
データフレームのリストカラムの欠損値をxに設定する	df[aList].fillna(x)
データフレームの未入力値を平均に設定する	df.fillna(df.mean())
ゼロ埋めされた三２ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
茶色色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
ヒストグラムの色をプラムにセットする	plt.hist(データ列, color='plum')
データフレームの末尾	df.tail()
スピアマン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='spearman')
散布図をホットピンク色を用いて描画する	plt.scatter(データ列x, データ列y, color='hotpink')
オブジェクトが関数か調べる	callable(obj)
行列を元に全要素が1の行列を作る	np.ones_like(aArray)
コーラル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='coral')
散布図の左三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgray')
デフォルトスタイルを適用する	sns.set()
散布図の四角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
ブースティングを使って回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
部分文字列で末尾から文字列を区切る	s.rsplit(sub)
横棒グラフの色をダークマゼンタにする	plt.barh(データ列x, データ列y, color='darkmagenta')
文字列がパターンにマッチさせる	re.match(pattern, s)
縦棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
データフレームの列の名前一覧で指定された列を消す	df.drop(columns, axis=1)
散布図をミディアムターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
グラフの中の日本語フォントを有効にする	sns.set(font='IPAexGothic')
回帰木分析の準備をする	model = sklearn.tree.DecisionTreeRegressor()
列の重複組み合せ	itertools.combinations_with_replacement(iterable, n)
データフレームに重複があるか調べる	df.duplicated()
ヒストグラムの色をライトスレイグレーに指定する	plt.hist(データ列, color='lightslategray')
折れ線グラフをシアン色で描画する	plt.plot(データ列x, データ列y, color='cyan')
ライトスレイグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
ヒストグラムの色をクリムゾンに指定する	plt.hist(データ列, color='crimson')
グリッドの線の種類を一点鎖線に変更する	plt.grid(linestyle='dashbot')
データフレームの列の中にいくつNaNがあるか数える	df[col].isna().sum()
option: グラフの色をオリベドラブに設定する	color = 'olivedrab'
折れ線グラフに星マーカーを加える	plt.plot(データ列x, データ列y, marker='*')
やわらかい青色を用いてヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
追加できるように文字コードtextとしてファイルを開く]	open(filepath, mode='a', encoding=text)
散布図を赤い左三角マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
小麦色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='wheat')
データフレームを大きい順に'A'列によってによって並べ直す	df.sort_values(by='A', ascending=False)
x,yの複素数を求める	complex(x, y)
横棒グラフをビスク色を用いて描画する	plt.barh(データ列x, データ列y, color='bisque')
現在の年数を使う	datetime.datetime.today().year
数のn乗を計算する	x ** n
実数を万の位で丸める	round(x, -4)
オブジェクトは集合型のインスタンスか確認する	isinstance(obj, set)
文字列リストにイテラブルを変換して、空白を使ってつなげる	' '.join(map(str, iterable))
集合の全ての要素が別のセットに含まれるかどうか調べる	aSet.issubset(aSet2)
option: シスル色を使用する	color = 'thistle'
タプルをn倍する	aTuple * n
データ列を1000の位で四捨五入する	ds.round(-3)
列の中に文字列と文字列がいくつ含まれるか数える	ds.isin([value, value2]).sum()
n個にデータフレームの中の列を分割し、namesのラベルをつける	pd.cut(df[col], n, labels=names)
散布図をアイボリー色として描画する	plt.scatter(データ列x, データ列y, color='ivory')
パウダーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
横棒グラフの色をビスクにする	plt.barh(データ列x, データ列y, color='bisque')
文字列の最後の文字	s[-1]
横棒グラフを深紅色を使って描画する	plt.barh(データ列x, データ列y, color='crimson')
要素が集合に含まれるか調べる	element in aSet
真上位集合かどうか	aSet > aSet2
グラフに水平方向の実線を付ける	plt.axhline(y=0, linestyle='solid')
真紅色を用いてヒストグラムを描画する	plt.hist(データ列, color='crimson')
option: ライトブルー色を使う	color = 'lightblue'
二つのデータフレームを異なるカラムをキーとして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
フォレストグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
データフレームの列の値がx、かつカラムがx2である行を取り出す	df[(df[column] == x) & (df[column2] == x2)]
スノー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='snow')
データフレームのリストカラムの中央値を求める	df[aList].median()
文字列を最後の部分文字列で二分し、後半の文字列を使う	s.rpartition(sub)[-1]
ゼロ埋めされたブール型の配列を初期化する	np.zeros(要素数, dtype=np.int32)
データフレームの最頻値	df.mode()
スカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
円グラフの特定の要素を目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
横棒グラフをロージーブラウン色で描画する	plt.barh(データ列x, データ列y, color='rosybrown')
10を底とする小数点数の対数を算出する	math.log10(x)
rgbのポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c=rgb)
option: マーカーの色をダークスレートブルーにする	markerfacecolor = 'darkslateblue'
option: 色をアイボリーに設定する	color = 'ivory'
データフレームの欠損値を後の値に設定する	df.fillna(method='bfill')
データフレームのカラムの欠損値をメディアンで埋める	df[col].fillna(df[col].median())
文字列をシアンにする	f'\033[36m{value}\033[0m'
スノー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='snow')
最適な位置に凡例を表示する	plt.legend(loc='best')
option: 青を使用する	color = 'blue'
双曲線正弦の逆数を計算する	math.asinh(x)
データ列の未入力値を最小値で補う	ds.fillna(ds.min())
option: チョコレート色を用いる	color = 'chocolate'
バツ印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
ヒストグラムの色をミディアムスレートブルーにする	plt.hist(データ列, color='mediumslateblue')
折れ線グラフをホワイト色で描画する	plt.plot(データ列x, データ列y, color='white')
2点間のユークリッド距離を求める	math.dist(point, point2)
カウンタから最頻出な項目の件数を求める	aCounter.most_common()[1]
option: 読み込む行番号をnamesで指定する	usecols = names
option: 右三角マーカーを加える	marker = '>'
散布図に黒い大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c='k')
棒グラフの色をミディアムターコイズにする	plt.bar(データ列x, データ列y, color='mediumturquoise')
多次元データをt-SNEでパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームをTSV形式のファイルから読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
棒グラフの色を貝殻にする	plt.bar(データ列x, データ列y, color='seashell')
データフレームのカラムの欠損値をxに変更する	df[col].fillna(x)
棒グラフの色をダークマゼンタにする	plt.bar(データ列x, データ列y, color='darkmagenta')
散布図をライトスレイグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
cosを求める	math.cos(x)
折れ線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
文字列がタプルの要素	element in aTuple
option: 色を貝殻に設定する	color = 'seashell'
エクセルファイルファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
ピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
散布図にクロスマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
データフレームの欠損値を直後の値に設定する	df.fillna(method='bfill')
データフレームの指定された列を配列として取り出す	df[column].values
折れ線グラフの星マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
ホールドアウト法を使う	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
日付データが日曜日か	aDate.weekday() == 6
ビスク色のヒストグラムを描画する	plt.hist(データ列, color='bisque')
ヘッダー行を左寄せに変更する	pd.set_option('colheader_justify', 'left')
ヒストグラムをやわらかい青色で描画する	plt.hist(データ列, color='cornflowerblue')
データフレームのカテゴリデータをワンホット・ベクトルに変換する	pd.get_dummies(df)
事前に正規表現を大文字・小文字を無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
クラスが名前付きタプルか調べる	issubclass(C, tuple)
リストの末尾のn要素を取り除く	aList[:-n]
シーケンスから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
散布図の三角印の色を設定する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データフレームのリストカラムの欠損値を最小値で埋める	df[aList].fillna(df[aList].min())
標準出力のバッファを即時表示する	sys.stdout.flush()
option: スプリンググリーン色を使う	color = 'springgreen'
散布図の左三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
後ろから文字列を空白で区切る	s.rsplit()
まとめてデータフレームの列の名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
グリーンイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
ヒストグラムのビン数を設定する	plt.hist(データ列, bins=区関数)
グラフの描画で明るく色使いを使う	sns.set(pallete='bright')
データ列が正規分布からどの程度、尖っているか見る	ds.skew()
データフレームをグループ化しそれぞれの列に対し分散を求める	df.groupby(column)[column2].var()
折れ線グラフをチョコレート色を用いて描画する	plt.plot(データ列x, データ列y, color='chocolate')
データ列を等量でビン数nでビン分割する	pd.qcut(ds, n)
横棒グラフをスプリンググリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='springgreen')
ヒストグラムの色をドジャーブルーに設定する	plt.hist(データ列, color='dodgerblue')
リストをビン数nを用いて分割する	pd.cut(aList, n)
列のユニークな値の個数	df[col].nunique()
散布図に黒いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
集合にイテラブルを追加更新する	aSet.update(iterable)
ファイルを書き込みできるようにEUCでオープンする]	open(filepath, mode='w', encoding='euc_jp')
双方向キューのstart番目からend番目までの部分要素	collections.deque(itertools.islice(deq, start, end))
日付データの曜日を使う	aDate.weekday()
折れ線グラフをブランチドアーモンド色として描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
フローラルホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
線グラフを半透明の一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
三自然数のGCD	math.gcd(n, n2, n3)
データフレームの重複した行のみを選択する	df[df.duplicated(keep=False)]
option: スチールブルーを用いる	color = 'steelblue'
実数の仮数を計算する	math.frexp(x)[0]
データフレームの列がxより大きい行を選択する	df[df[column] > x]
日付データにn秒分、加える	aDate + datetime.timedelta(seconds=n)
ヒストグラムをパールバイオレットレッド色で描画する	plt.hist(データ列, color='palevioletred')
日付データが日付データと同時か	aDate == aDate2
横棒グラフをライトグレー色として描画する	plt.barh(データ列x, データ列y, color='lightgrey')
データフレームの欠損値を後の行の値で埋める	df.fillna(method='bfill')
オブジェクトはリストクラスのインスタンスか確認する	isinstance(obj, list)
折れ線グラフの色をミスティローズに変更する	plt.plot(データ列x, データ列y, color='mistyrose')
各列毎にデータフレームを集約し、、列の最大値を求める	df.groupby(column)[column2].max()
多次元データを特異値分解で淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
散布図のダイアモンド印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
棒グラフをインディアンレッド色として描画する	plt.bar(データ列x, データ列y, color='indianred')
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
データフレームからランダムに選ぶ	df.sample()
ファイルを絶対パスに変換する	os.path.abspath(filepath)
文字列を部分文字列で区切る	s.split(sub)
ミディアムシアグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='mediumseagreen')
データフレームを二つの列の値でグループ化する	df.groupby(['A', 'B'])
散布図の色を赤にする	plt.scatter(データ列x, データ列y, color='red')
rgbの丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ダークシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
データフレームのカラムがx以下の行を選択する	df[df[column] <= x]
辞書のキーの値	aDict[key]
option: マーカーの色をパールゴールデンロッドにする	markerfacecolor = 'palegoldenrod'
ファイルをオープンして]、読み込みストリームを求める	open(filepath, mode='r')
リストとリストの散布図を描いて、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
データ列とイテラブルの散布図に三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
棒グラフの色をダークオリーブグリーンにする	plt.bar(データ列x, データ列y, color='darkolivegreen')
データ列の中に日付データと文字列がいくつ含まれるか数える	ds.isin([value, value2]).sum()
ファイル名がTSVファイルか調べる	filename.endswith('.tsv')
データフレームから列を二つ選択する	df[[column, column2]]
リストとリストの散布図を描画して文字列という簡単な説明用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームを関数の値によってグループ化し、記述統計量を求める	df.groupby(関数).describe()
ヒストグラムの色をライトコーラルに指定する	plt.hist(データ列, color='lightcoral')
スチールブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
ヒストグラムをチョコレート色で描画する	plt.hist(データ列, color='chocolate')
タプルの末尾のn要素を除く	aTuple[:-n]
データフレームのNaNを中央値で埋める	df.fillna(df.median())
現在が日曜日か調べる	datetime.datetime.today().weekday() == 6
option: フォントの色をダークサーモンに設定する	color = 'darksalmon'
二つのデータフレームを縦方向に合体させる	pd.concat([df, df2], axis=0)
実数で数を割って、切り捨てる	x // y
文字列はタプルの要素か調べる	element in aTuple
縦棒プロットを描画して、ラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
線グラフの色を深紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
範囲を指定して整数乱数を生成する	random.randint(最小値, 最大値)
分子n、分母mの有理数を新規生成する	fractions.Fraction(numerator=n, denominator=m)
文字列の開始位置から終了位置までの範囲で部分文字列の登場回数をカウントする	s.count(sub, start, end)
カテゴリで色分けしてデータフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
nが5で割り切れるか調べる	n % 5 == 0
縦棒グラフをオールドレース色で描画する	plt.bar(データ列x, データ列y, color='oldlace')
棒グラフをダークブルー色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
ヒストグラムを淡いピンク色色を用いて描画する	plt.hist(データ列, color='lightpink')
データフレームをJSONLファイルにBOM付きで保存する	df.to_csv(filename, encoding='utf_8_sig')
小数点数の余弦	math.cos(x)
ピアソン相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
option: フォントの色をダークグリーンに変更する	color = 'darkgreen'
文字列を最初の部分文字列で二分割する	s.partition(sub)
数列の推移を点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
正則化付き回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
データフレームのリストカラムの中にある文字列の合計を数える	df[aList].isin([value]).sum()
標準入力から1行だけ改行なしで読み込む	sys.stdin.readline().rstrip()
散布図の色をミントクリームにする	plt.scatter(データ列x, データ列y, color='mintcream')
ヒストグラムを青色として描画する	plt.hist(データ列, color='blue')
棒グラフの色をコーンズシルクにする	plt.bar(データ列x, データ列y, color='cornsilk')
既存の配列を元に全要素が0の配列	np.zeros_like(aArray)
ヒストグラムの色をフォレストグリーンにする	plt.hist(データ列, color='forestgreen')
ネイビー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
ライトスレイグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
セットから別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
ブルーバイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
日付時刻データがタイムスタンプデータと同時かどうか調べる	aDatetime == aDatetime2
t-SNEで淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
option: グラフの色をブラックに指定する	color = 'black'
グラフの横軸を対数に変更する	plt.xscale('log')
ヒストグラムをスノー色で描画する	plt.hist(データ列, color='snow')
ベクトルの次元の数	aArray.ndim
nがn2で割り切れるか調べる	n % n2 == 0
JSONLファイルを読む	pd.read_json(filename, orient='records', lines=True)
option: ダークグレーを使う	color = 'darkgrey'
散布図をネイビー色として描画する	plt.scatter(データ列x, データ列y, color='navy')
リストとしてデータフレームの指定された列を選ぶ	df[column].values.tolist()
2つのオブジェクトが同じ参照か調べる	obj is obj2
最大値と最小値でデータを正規化を行う	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ホットピンク色のヒストグラムを描画する	plt.hist(データ列, color='hotpink')
棒グラフをハニーデュー色を用いて描画する	plt.bar(データ列x, データ列y, color='honeydew')
option: ライトスチールブルーにグラフの色をする	color = 'lightsteelblue'
データフレームを見る	df.head()
文字列の先頭	s[0]
データフレームのリスト列の各列間の相関係数	df[aList].corr()
ネイビー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
二つの列によってデータフレームをまとめた表を見る	df.groupby(['A', 'B'])
option: ブール型を用いる	dtype = np.int32
データフレームを表示するとき、小数点以下の表示精度をn桁に増やす	pd.set_option('precision', n)
データ列のどの値が頻出か見る	ds.mode()
ヒストグラムの色をライトグレーに設定する	plt.hist(データ列, color='lightgray')
ヒストグラムの色をチョコレートに設定する	plt.hist(データ列, color='chocolate')
トマト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='tomato')
ヒストグラムの色をゲインズボロに設定する	plt.hist(データ列, color='gainsboro')
Pandasで、エポック秒のデータ列からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
正規化された柱状グラフを描く	plt.hist(データ列, density=True)
整数nを十六進表現に変換する	hex(n)
ヒストグラムの色をコーラルに設定する	plt.hist(データ列, color='coral')
option: スプリンググリーン色を用いる	color = 'springgreen'
実数のn乗して実数による余り	pow(x, n, y)
nの2進表記を求める	bin(n)
文字列内にひとつでも数字があるか	any(c.isdigit() for c in s)
データ列が正規分布からどの程度、歪んでいるか見る	ds.kurt()
折れ線グラフのクロスマーカーを青色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
折れ線グラフをベージュ色で描画する	plt.plot(データ列x, データ列y, color='beige')
スプリンググリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='springgreen')
横棒グラフをコーンズシルク色として描画する	plt.barh(データ列x, データ列y, color='cornsilk')
破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
ベクトルの合計	np.sum(aArray)
option: コーラルにグラフの色を変更する	color = 'coral'
二つの文字列をコロンで区切ってプリントする	print(value, value2, sep=':')
線グラフをピンク色として描画する	plt.plot(データ列x, データ列y, color='pink')
散布図をバリーウッド色として描画する	plt.scatter(データ列x, データ列y, color='burlywood')
日付データが何曜日か知る	aDate.weekday()
データフレーム全体を行で昇順にソートする	df.sort_index(ascending=True)
データフレームを各列と列の組み合わせ毎にグループ化し、、最大値を計算する	df.groupby([column, column2], as_index=False).max()
カラムの名前一覧を使う	df.columns
度数分布図を二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
文字列の開始位置より後に部分文字列が含まれないか調べる	s.find(sub, start) == -1
JSONファイルファイル名がか調べる	filename.endswith('.json')
折れ線グラフをミディアムターコイズ色で描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
year年day月を日付時刻に変換する	datetime.datetime(year=year, month=month, day=1)
ファイルパスをバイナリできるようにオープンする]	open(filepath, mode='rb')
'A'列でデータフレームをソートする	df.sort_values(by='A')
棒グラフの色をリネンにする	plt.bar(データ列x, データ列y, color='linen')
option: グラフの色をオリベドラブに指定する	color = 'olivedrab'
プラム色として線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
データフレームのヒストグラムを縦横に並べてプロットする	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
データフレームの中にある文字列と文字列の数を数える	df.isin([value, value2]).sum()
文字列を黒色にする	f'\033[30m{value}\033[0m'
n2行n列の二次元リスト	[[0] * n for _ in range(n2)]
散布図の印を右三角印にする	plt.scatter(データ列x, データ列y, marker='>')
option: グラフの色をハニーデューに設定する	color = 'honeydew'
option: ネイビー色を使う	color = 'navy'
データフレームからn行、ランダムサンプリングする	df.sample(n)
xを論理値に変換する	bool(x)
データフレームをサンプリングする	df.sample()
横棒グラフの色をライトブルーにする	plt.barh(データ列x, データ列y, color='lightblue')
棒グラフをクリムゾン色で描画する	plt.bar(データ列x, データ列y, color='crimson')
オブジェクトはリストの要素かどうか調べる	element in aList
ネイビー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='navy')
散布図の色をイエローグリーンにする	plt.scatter(データ列x, データ列y, color='yellowgreen')
棒グラフをライム色で描画する	plt.bar(データ列x, データ列y, color='lime')
折れ線グラフを破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
nがn2の倍数	n % n2 == 0
option: グラフの色をライトグリーンに設定する	color = 'lightgreen'
オプションで、出力先を標準出力に設定する	file = sys.stdout
K最近傍法として回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
データフレームのそれぞれのグループの標準偏差	df.groupby(column).std()
データフレームを列によって降順に破壊的に並べ直す	df.sort_values(by=column, ascending=False, inplace=True)
黒い右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c='k')
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='gray')
option: グラフの色をカデットブルーに設定する	color = 'cadetblue'
ダークバイオレット色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkviolet')
折れ線グラフにポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
スクリプトファイルの絶対パス	os.path.abspath(__file__)
nが3の倍数かどうか調べる	n % 3 == 0
ディムグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgray')
折れ線グラフを色付きの点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
option: 色をミントクリームにセットする	color = 'mintcream'
option: マーカーの色をコーンフラワーブルーにする	markerfacecolor = 'cornflowerblue'
青緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
アクアマリン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
ファイルパスを文字列の示すエンコーディングを用いて書き込みできるように開く]	open(filepath, mode='w', encoding=s)
棒グラフの色をナバホホワイトにする	plt.bar(データ列x, データ列y, color='navajowhite')
0から始まる無限数列	itertools.count()
ダークグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
ヒストグラムの色をビスクに変更する	plt.hist(データ列, color='bisque')
データフレームの列の各値の出現回数	df[col].value_counts()
データフレームを二つの列の値によってグループ化して列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
散布図を小麦色色として描画する	plt.scatter(データ列x, データ列y, color='wheat')
ミディアムシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumseagreen')
option: グラフの色を淡い茶色に指定する	color = 'tan'
レベッカパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ヒストグラムを描画して、半透明ににする	plt.hist(データ列x, alpha=0.5)
マッピングから最後に追加した項目をポップする	aDict.popitem()
データフレームを散布図で可視化し、、カテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
ヒストグラムをオールドレース色で描画する	plt.hist(データ列, color='oldlace')
散布図に星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*')
データフレームの値をValueMapでまとめて置き換える	df.replace(ValueMap)
ホワイトスモーク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
データフレームの内で、列の重複を確認する	df.duplicated(subset=column)
カテゴリで色分けして、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
実行時に標準出力がパイプか調べる	not sys.stdout.isatty()
自然数個からk個取り出した場合の順列の総数	math.perm(n, k)
データ列は正規分布からどの程度、尖っているか見る	ds.skew()
実数を百の位で四捨五入する	round(x, -2)
ダークグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgreen')
正規表現を複数行対応としてあらかじめコンパイルする	re.compile(pattern, flag=re.MULTILINE)
タプルの要素を逆順にする	aTuple[::-1]
ヒストグラムの色をサドルブラウンに設定する	plt.hist(データ列, color='saddlebrown')
データフレームのリストカラムの歪度を求める	df[aList].kurt()
数列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ヒストグラムの色をグリーンに変更する	plt.hist(データ列, color='green')
データフレームのカラムをカテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
赤い破線を使って線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
日付時刻データをn日前に戻す	aDatetime - datetime.timedelta(days=n)
オブジェクトのハッシュ値	hash(obj)
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
二つのデータフレームを列をキーにして外部結合する	pd.merge(df, df2, on=column, how='outer')
データフレームを列によってグループ化し、列挙する	[(name, group) for name, group in df.groupby(column)]
リストとリストについて散布図をプロットし、マーカーを右三角に変更する	plt.plot(データ列x, データ列y, marker='>')
TSVを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
散布図の▼マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
折れ線グラフをミスティローズ色を用いて描画する	plt.plot(データ列x, データ列y, color='mistyrose')
配列の差	aArray - aArray2
ヒストグラムの線の種類を実線に設定する	plt.hist(データ列, linestyle='solid')
データ列の中に文字列が含まれるかどうか調べる	ds.isin([value])
option: グラフの種類を一点鎖線に設定する	linestyle = 'dashbot'
予測データの混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: マーカーを▲に設定する	marker = '^'
線グラフの色をゴーストホワイトに変更する	plt.plot(データ列x, データ列y, color='ghostwhite')
配列が何のデータ型か調べる	aArray.dtype()
部分文字列で文字列を区切る	s.split(sub)
折れ線プロットのラベルをセットする	plt.plot(データ列x, データ列y, label='ラベル')
２つのオブジェクトが等しいかどうか	obj == obj2
文字列が全て空白文字か調べる	s.isspace()
predicateFuncが真になるイテラブルの部分を取り除く	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフを紺碧色を使って描画する	plt.plot(データ列x, データ列y, color='azure')
赤い破線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
option: プラムに色をセットする	color = 'plum'
配列を等量でn個に分割する	pd.qcut(aArray, n)
データフレームの中の列を四分位数ごとにビン分割する	pd.qcut(df[col], 4)
Pandasで数値時刻のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
散布図の色をレベッカパープルにする	plt.scatter(データ列x, データ列y, color='rebeccapurple')
データフレームのリストカラムを四捨五入して、整数型にする	df[aList].round().astype(int)
option: グラフの色をシエナに指定する	color = 'sienna'
英数字が文字列内に含まれる	any(c.isalnum() for c in s)
タプルの値を逆順にする	aTuple[::-1]
半透明の破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
ヒストグラムを耐火レンガ色として描画する	plt.hist(データ列, color='firebrick')
ファイルパスを開き]、書き込みストリームを求める	open(filepath, mode='w')
横棒グラフをプラム色で描画する	plt.barh(データ列x, データ列y, color='plum')
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='turquoise')
散布図の色をシアンにする	plt.scatter(データ列x, データ列y, color='cyan')
棒グラフを青くする	plt.bar(データ列x, データ列y, color='b')
新しい部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
散布図にrgbのクロスマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ラベンダーブラッシュ色のヒストグラムを描画する	plt.hist(データ列, color='lavenderblush')
配列の要素ごとの積	np.multiply(aArray, aArray2)
タブで区切って2つの文字列を表示する	print(value, value2, sep='\t')
ファイルパスをオープンして]、読み込みストリームを見る	open(filepath, mode='r')
折れ線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
データフレームをエクセルファイルファイルでJSONLファイルに保存する	df.to_excel(filename)
ヒストグラムの色をロイヤルブルーに設定する	plt.hist(データ列, color='royalblue')
ヒストグラムをドジャーブルー色として描画する	plt.hist(データ列, color='dodgerblue')
ダークスラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
バイトオーダを使う	sys.byteorder
データフレームで列と列に重複があるか見る	df.duplicated(subset=[column, column2])
行列の行ごとの合計値	np.sum(aArray, axis=1)
ファイルパスをEUCとして書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
year年month月day日を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day)
列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, on=column, how='right')
option: 色をスカイブルーに設定する	color = 'skyblue'
データ列の標本標準偏差	ds.std()
ファイルから拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
option: ロージーブラウンに色を指定する	color = 'rosybrown'
データフレームのそれぞれのグループ毎の平均値	df.groupby(column).mean()
青い一点鎖線で配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
折れ線グラフの色をターコイズにセットする	plt.plot(データ列x, データ列y, color='turquoise')
MSEを求める	sklearn.metrics.mean_squared_error(データ列, データ列2)
散布図のクロスマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
ドジャーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
貝殻色でヒストグラムを描画する	plt.hist(データ列, color='seashell')
折れ線グラフをダークカーキ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
オブジェクトは文字列クラス	isinstance(obj, str)
ミディアムスプリンググリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
option: データ型として三二ビット整数型を用いる	dtype = np.int16
行列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
n2行n列の2次元リストを得る	[[0] * n for _ in range(n2)]
文字列の大きさ	len(s)
折れ線グラフに四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
文字列の先頭の空白を取り除く	s.lstrip()
新しいリッジ回帰モデルを作る	model = sklearn.linear_model.Ridge(alpha=正則化項)
多次元データを特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
黒い丸マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
改行なしに数値をプリントする	print(value, end='')
option: ホットピンク色を使う	color = 'hotpink'
棒グラフをモカシン色で描画する	plt.bar(データ列x, データ列y, color='moccasin')
文字列のn番目	s[n]
グリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
Pandasで、書式fmtとして文字列をdatetime64型に変換する	pd.to_datetime(s, format=fmt)
散布図に黒いダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D', c='k')
出力ストリーム全体を行単位で分割してリストに変換する	[s.strip() for s in f.readlines()]
標準入力から1文字だけ読み込む	sys.stdin.read(1)
option: BOM付きを用いる	encoding = 'utf_8_sig'
ターコイズ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
標準エラーを使う	sys.stderr
散布図の色をスレートブルーにする	plt.scatter(データ列x, データ列y, color='slateblue')
縦棒グラフをカデットブルー色で描画する	plt.bar(データ列x, データ列y, color='cadetblue')
リストをひとつ置きに取り出す	aList[::2]
文字列中にひとつでも非空白が含まれる	any(not c.isspace() for c in s)
データフレームの指定された二列のみ抽出する	df[[column, column2]]
空白文字を全て使う	string.whitespace
線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
n割るn2を計算する	n / n2
左にn個分両端キューの要素をローテンションする	deq.rotate(-n)
線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
rgbの丸マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
option: シャルトリューズを用いる	color = 'chartreuse'
文字列がタプルに含まれないか	element not in aTuple
データ列の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
マップのキー一覧	list(aDict)
ファイル名がJSONファイル	filename.endswith('.json')
線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
線グラフをペルー色として描画する	plt.plot(データ列x, データ列y, color='peru')
データフレームのカラムの時	df[col].dt.hour
option: セパレータをカンマにする	sep = ','
データ列を等間隔でn個にビン分割する	pd.cut(ds, n)
文字列の中のパターンによる全てのマッチを使う	re.findall(pattern, s)
nが負の整数か調べる	n < 0
ディープスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
タプルの値を列挙する	aDict.values()
イテラブルのセットを使う	set(iterable)
実数の床数を計算する	math.floor(x)
両端キューの先頭にシーケンスのデータを追加する	deq.extendleft(iterable)
変数が無限大に近づくとき、数式の極限値を計算する	sympy.limit(e, z, oo)
データフレームのリスト列の第三四分位数	df[aList].quantile(0.75)
option: ミディアムバイオレットレッドに色を設定する	color = 'mediumvioletred'
プロットの使途をプレゼンに設定する	sns.set(context='talk')
レベッカパープル色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
データフレームをグループ化し、それぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
option: グラフの色をダークグレーに設定する	color = 'darkgray'
タプルを引数として展開してプリントする	print(*aTuple, sep=',')
箱ヒゲ図を描画し、、平均線を加える	plt.boxplot(データ列, meanline=True)
折れ線グラフにデータラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
nにn2をかけた値をnに代入する	n *= n2
ヒストグラムをスチールブルー色として描画する	plt.hist(データ列, color='steelblue')
日付時刻データからn週間分、減算する	aDatetime - datetime.timedelta(weeks=n)
ファイルパスをSJISで書き込み用に開く]	open(filepath, mode='w', encoding='shift_jis')
文字列を部分文字列で二分し最初の文字列を使う	s.partition(sub)[0]
赤い星マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
イテラブルの組み合わせ	itertools.combinations(iterable, n)
色名からカラーコードを見る	matplotlib.colors.cnames[色名]
ミディアムパープル色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
横棒グラフをやわらかい青色を用いて描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
散布図のマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
タプルの末尾からn番目以前の要素を取り出す	aTuple[:-n]
リストのn番目以降の部分を取り出す	aList[n:]
折れ線グラフをパパイヤウィップ色で描画する	plt.plot(データ列x, データ列y, color='papayawhip')
集合の更新不能版	frozenset(aSet)
線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
赤い点線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
データフレームの中に日付データがあるか調べる	df.isin([value])
オブジェクトのフィールドの値を設定する	setattr(obj, プロパティ名, 値)
option: 改行コードをUNIXに設定する	newline = '\n'
線グラフをスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='springgreen')
棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
折れ線グラフのポイントマーカーを青くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
散布図に黒い△印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
リストをn個にビン分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
黄緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
列によってデータフレームを並べ、、下位を取り出す	df.sort_values(columns).tail(n)
nが負の数かテストする	n < 0
option: ライトスカイブルーにグラフの色を変更する	color = 'lightskyblue'
オプションで標準出力を使う	file = sys.stdout
タイムスタンプデータをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
第一引数で指定されたファイルの名前	sys.argv[1]
option: 小麦色色を使う	color = 'wheat'
nが3の倍数	n % 3 == 0
データフレームを各列毎にグループ化して、列の平均値を求める	df.groupby(column)[column2].mean()
リストのn番目に文字列を挿入する	aList.insert(n, element)
コギーくんを使いたい	import kogi
実行結果を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid')
option: グラフの色をミントクリームに設定する	color = 'mintcream'
折れ線グラフをダークスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフに青い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='b')
option: トマト色を使用する	color = 'tomato'
赤い下三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='v', c='r')
新しいロジスティック回帰モデルを新規作成する	model = sklearn.linear_model.LogisticRegression()
データフレームの要約統計量を求める	df.describe()
色付きの実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
正規表現をあらかじめ複数行対応としてコンパイルする	re.compile(pattern, flag=re.MULTILINE)
線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='grey')
既存のファイルをSJISとして追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
要素が集合のメンバーか調べる	element in aSet
ガウス過程でクラス分類を行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
データフレームの列を100の位で丸める	df[col].round(-2)
データフレームの平均と信頼区間をプロットする	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
型が名前付きタプルか確認する	issubclass(C, tuple)
ヒストグラムの色をミッドナイトブルーに設定する	plt.hist(データ列, color='midnightblue')
データフレームのリストカラムの欠損値を最頻値に設定する	df[aList].fillna(df[aList].mode().iloc[0])
option: グラフの色をパパイヤウィップに変更する	color = 'papayawhip'
追加できるように既存のファイルをEUCでオープンする]	open(filepath, mode='a', encoding='euc_jp')
数列とリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
n2がnより大きく、かつ、n3未満	n < n2 and n2 < n3
文字列をセパレータで区切り、、列挙する	s.split(sep)
リストと配列の散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
リストとリストについての散布図に赤いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='r')
棒グラフをラベンダー色で描画する	plt.bar(データ列x, データ列y, color='lavender')
散布図に青いポイント印を描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
rgbのダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: グラフの色をミディアムブルーに設定する	color = 'mediumblue'
カウンタのそれぞれの項目を、そのカウントだけ列挙する	aCounter.elements()
グリーンイエロー色を使ってヒストグラムを描画する	plt.hist(データ列, color='greenyellow')
リストとリストについて散布図をプロットして、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
グリッド線を黒くする	plt.grid(color='k')
線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
リストとリストについての散布図にrgbの三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームをグループ化し、列に対し個数を計算する	df.groupby(column)[column2].count()
日付時刻データがタイムスタンプデータと同時か調べる	aDatetime == aDatetime2
折れ線グラフをダークスラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategray')
散布図をダークバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
データフレームのカラムが何年か見る	df[col].dt.year
パレットトルコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
補助目盛りを有効にする	plt.minorticks_on()
シーケンスを文字列に変換して連結する	''.join(map(str, iterable))
リストの要素を昇順にソートする	sorted(aList, reverse=True)
マップのキーを列挙する	list(aDict)
文字列リストをひとつの文字列にする	''.join(aStringList)
SJISで文字列をバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
データフレームを各カラム毎に集約して、列の合計を算出する	df.groupby(column)[column2].sum()
option: ライトグレー色を使う	color = 'lightgrey'
リストとリストの散布図を描画して、マーカーを▼に設定する	plt.plot(データ列x, データ列y, marker='v')
パラメータが0に近づく場合の数値の極限値を計算する	sympy.limit(e, z, 0)
ファイル全体を行単位で分割して読む	f.readlines()
青緑色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
重複していない行を選択する	df[not df.duplicated(keep=False)]
辞書から項目名の値をエラーなく得る	aDict.get(key, None)
アクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
マッピングの値の一覧を得る	aDict.values()
タイムスタンプデータと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
横棒グラフをスプリンググリーン色で描画する	plt.barh(データ列x, データ列y, color='springgreen')
リネン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
タイムスタンプデータからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
散布図をパールバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
データ列の中に日付データと文字列がいくつあるかカウントする	ds.isin([value, value2]).sum()
パラメータがマイナス無限大に近づく際の数値の極限値を算出する	sympy.limit(e, z, -oo)
データフレームを列でソートして、上の方n件を取り出す	df.sort_values(columns).head(n)
テンプレートを辞書でフォーマットする	formatText.format_map(aDict)
棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
option: グラフの色をアンティークホワイトに指定する	color = 'antiquewhite'
ヒストグラムをダークオリーブグリーン色として描画する	plt.hist(データ列, color='darkolivegreen')
データフレームを'A'列を用いて昇順にソートする	df.sort_values(by='A', ascending=True)
折れ線グラフを白色として描画する	plt.plot(データ列x, データ列y, color='white')
option: ライトグレーにグラフの色を変更する	color = 'lightgray'
ポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.')
option: サドルブラウンにフォントの色を設定する	color = 'saddlebrown'
左三角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
タイムスタンプデータが何月か知る	aDatetime.month
option: 文字列をセパレータで使用する	sep = s
予測結果の予測精度を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
散布図の丸印を青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
実数の逆余弦	math.acos(x)
リストの先頭のn要素を取り除く	aList[n:]
散布図の色をダーク・スラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategrey')
データフレームのカラムの母標準偏差	df[col].std(ddof=0)
PLSで回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームの列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
表データの列がxである行を抽出する	df[df[column] == x]
線グラフの色を黄緑に設定する	plt.plot(データ列x, データ列y, color='chartreuse')
色付きの実線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
印字可能な文字を全部求める	string.printable
文字列がタプルの要素でないかどうか調べる	element not in aTuple
Pythonインタプリタの実行ファイルの絶対パスを確認する	sys.executable
サーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
ベクトルのユニークな要素	np.unique(aArray)
散布図にrgbのポイントマーカーを用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
赤い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
option: フォントの色をダークオーキッドに設定する	color = 'darkorchid'
タイムスタンプデータが何曜日か知る	aDatetime.weekday()
文字列の中で複数行対応としてパターンにマッチした全ての文字列をリストにする	re.findall(pattern, s, flags=re.MULTILINE)
文字列を全て大文字に変換する	s.upper()
ダークオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
既存のベクトルを元に全要素が0のベクトル	np.zeros_like(aArray)
棒グラフの色をラベンダーにする	plt.bar(データ列x, データ列y, color='lavender')
データフレームから列を三つだけ選択する	df[[column, column2, column3]]
xが1、もしくは2、もしくは3に等しいか確認する	x == 1 or x == 2 or x == 3
値を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
要素が集合に含まれないかどうか確認する	element not in aSet
棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
データフレームのリストカラムが正規分布からどれだけ、歪んでいるか確認する	df[aList].kurt()
プラム色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
散布図をシルバー色で描画する	plt.scatter(データ列x, データ列y, color='silver')
option: レモンシフォンを用いる	color = 'lemonchiffon'
データフレームのカラムを1000の位で丸めて整数型にする	df[col].round(-3).astype(int)
散布図をマゼンタ色を用いて描画する	plt.scatter(データ列x, データ列y, color='magenta')
文字列をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
縦棒グラフをミディアムターコイズ色を使って描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
オプションで標準エラーを使う	file = sys.stderr
日付データの日	aDate.day
縦棒グラフをコーラル色で描画する	plt.bar(データ列x, データ列y, color='coral')
グリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
日付時刻データが水曜日か確認する	aDatetime.weekday() == 2
横棒グラフの色をダークゴールデンロッドにする	plt.barh(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
プロットのx座標を対数に変更する	plt.xscale('log')
データフレームのリストカラムの欠損値を50パーセンタイルに設定する	df[aList].fillna(df[aList].median())
符号付きで整数nをバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
列名リストの値によってデータフレームをグループ化する	df.groupby(columns)
Pandasで、数値時刻のデータフレームのcollから日付データにする	pd.to_datetime(df[col], unit='s', utc=True)
nが5の倍数かどうか確認する	n % 5 == 0
実数の３乗	x ** 3
棒グラフをラベンダー色を用いて描画する	plt.bar(データ列x, データ列y, color='lavender')
実数のルート	math.sqrt(x)
シエナ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
表データの先頭	df.head()
線グラフをホワイトスモーク色を用いて描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
シエナ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
線グラフをナバホホワイト色として描画する	plt.plot(データ列x, データ列y, color='navajowhite')
辞書の項目名とその値をペアとして取り出す	aDict.items()
日付データからn日分、減算する	aDate - datetime.timedelta(days=n)
データフレームの列を削除して、更新する	df.drop(column, axis=1, inplace=True)
ヒストグラムを描画して半透明ににする	plt.hist(データ列x, alpha=0.5)
棒グラフの色をラベンダーブラッシュにする	plt.bar(データ列x, データ列y, color='lavenderblush')
option: ブルーバイオレットを使う	color = 'blueviolet'
Pandasで、文字列のエポック秒から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
線グラフをライム色で描画する	plt.plot(データ列x, データ列y, color='lime')
折れ線グラフの色をロージーブラウンに変更する	plt.plot(データ列x, データ列y, color='rosybrown')
横棒グラフをミディアムオーキッド色として描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
データを最大値で正規化する	sklearn.preprocessing.MaxAbsScaler().fit_transform(データ)
CSVファイルを読み込む	pd.read_csv(filename, sep=',')
行列の列ごとの最小	np.min(aArray, axis=0)
散布図に赤い右三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
今日は何年か知る	datetime.datetime.today().year
折れ線グラフを茶色色で描画する	plt.plot(データ列x, データ列y, color='brown')
縦棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
イテラブルの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
列名リストによってによって降順にデータフレームをソートする	df.sort_values(by=column, ascending=False)
option: オーキッドを使う	color = 'orchid'
日付時刻データををn時間後に進める	aDatetime + datetime.timedelta(hours=n)
ダークオリーブグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
ピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
横棒グラフを貝殻色で描画する	plt.barh(データ列x, データ列y, color='seashell')
タプルのn番目の	aTuple[n]
文字列を下線付き化する	f'\033[4m{value}\033[0m'
要素が集合に含まれるか確認する	element in aSet
散布図に青い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
n個の集まりからk個選ぶ方法	math.comb(n, k)
棒グラフをミディアムスプリンググリーン色として描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
赤い一点鎖線としてリストの変化を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
下線付きで文字列をプリントする	print(f'\033[4m{value}\033[0m')
散布図をイエローグリーン色で描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
データフレームのリストカラムの文字列を未入力値にする	df[aList].replace(s, np.nan)
浮動小数点数を複素数にする	complex(x)
ふたつの関係が真上位集合か	aSet > aSet2
縦棒グラフをライトスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
データフレームのカラムの欠損値を中央値に設定する	df[col].fillna(df[col].median())
組が全て真か調べる	all(aTuple)
スレートブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: グラフの色をダークサーモンに変更する	color = 'darksalmon'
データフレームのリストカラムの分散	df[aList].var()
ヒストグラムをサドルブラウン色を用いて描画する	plt.hist(データ列, color='saddlebrown')
棒グラフをシアン色で描画する	plt.bar(データ列x, データ列y, color='cyan')
rgbのバツマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図のマーカーを星印にする	plt.scatter(データ列x, データ列y, marker='*')
クロスマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='x')
nとn2の差	n - n2
折れ線グラフの色をミディアムターコイズに変更する	plt.plot(データ列x, データ列y, color='mediumturquoise')
棒グラフの色をオーキッドにする	plt.bar(データ列x, データ列y, color='orchid')
データフレームのカラムの曜日が何日目か見る	df[col].dt.dayofweek
棒グラフをイエローグリーン色として描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
データフレームのリストカラムを丸めて、整数型にする	df[aList].round().astype(int)
線グラフをゴーストホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
オブジェクトがプロパティを持つ	hasattr(obj, プロパティ名)
辞書にマッピングの項目を更新する	aDict.update(aDict2)
小数点数を実数で割った剰余を求める	math.remainder(x, x2)
黒い下三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c='k')
ヒストグラムをミスティローズ色を用いて描画する	plt.hist(データ列, color='mistyrose')
ファイルをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
リストとリストの散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
散布図にrgbの右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
双曲線余弦の逆数	math.acosh(x)
タプルをひとつ置きに得る	aTuple[::2]
二進文字列をバイト列に変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
横棒グラフを深紅色で描画する	plt.barh(データ列x, データ列y, color='crimson')
横棒グラフをダークスレートブルー色を使って描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
option: ネイビーにフォントの色を設定する	color = 'navy'
白い棒グラフを描画する	plt.bar(データ列x, データ列y, color='w')
文字列は全て識別子名	s.isidentifier()
データフレームから先頭の列を除く	df[df.columns[1:]]
option: 論理値型を使う	dtype = np.int32
ダークブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
青い破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
整数nがセットのどれかか調べる	n in aSet
折れ線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
リストを等しい量になるようにn個にビン分割する	pd.qcut(aList, n)
日本語が文字列に使われているか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
リストとイテラブルについて散布図をプロットして、マーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
データフレームのNaNを前の行の値で埋める	df.fillna(method='ffill')
両端キューの先頭にイテラブルの各要素を追加する	deq.extendleft(iterable)
データフレームのヒストグラム付き散布図を描画する	sns.jointplot(x='列名', y='列名', data=df)
散布図の大バツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='#800080')
データフレームの列名を列から文字列に変更する	df.rename(columns={column: name})
横棒グラフをライトブルー色で描画する	plt.barh(データ列x, データ列y, color='lightblue')
黒い△マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
文字コードに対応する文字	chr(unicode)
現在が何分か知る	datetime.date.today().minute
データフレームを列でグループ分けして、それぞれのグループの最大値を求める	df.groupby(column).max()
データフレームの行一覧	df.index
option: 深紅色を使う	color = 'crimson'
データフレームのリスト列を1000の位で丸める	df[aList].round(-3)
文字列を変数に変換する	sympy.Symbol(s)
数列とリストについての散布図に黒い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
オブジェクトがあるクラスのインスタンスか調べる	isinstance(obj, クラス)
色付きの実線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
カテゴリで色分けして、データフレームをに箱ひげ図を用いて可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データ列の最頻値	ds.mode()
イテラブルから配列を作る	np.array(iterable)
itertoolsモジュールをインポートする	import itertools
データフレームを二つの列で降順に破壊的に並べ直す	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
データフレームの列がリストに含まれる行を取り出す	df[df[column].isin(aList)]
配列の行ごとの平均	np.mean(aArray, axis=1)
青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
折れ線グラフをシアン色として描画する	plt.plot(データ列x, データ列y, color='cyan')
option: フォントの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
文字列が全て英数字か調べる	s.isalnum()
カウンタを少ない順に列挙する	aCounter.most_common()[::-1]
行列の列ごとの合計値を計算する	np.sum(aArray, axis=0)
両端キューが空であるか調べる	len(deq) == 0
表データから型リストで指定されたデータ型の列を除外する	df.select_dtypes(exclude=typeList)
データフレームの列の欠損値を後の行の値に設定する	df[col].fillna(method='bfill')
ロバスト推定で回帰分析をする	model = sklearn.linear_model.RANSACRegressor(random_state=0)
データフレームを二つの列によって昇順にソートして、更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
全要素を初期値で初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
ファイルパスを文字列の示すエンコーディングを用いて書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
縦棒グラフをダークマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
カウンタを多い順に列挙する	aCounter.most_common()
非数値データ列を連番化する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*')
日付データにn週間分、加算する	aDate + datetime.timedelta(weeks=n)
グリーン色のヒストグラムを描画する	plt.hist(データ列, color='green')
文字列の先頭でパターンにケースを無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
非数字が文字列中に含まれるか調べる	any(not c.isdigit() for c in s)
複数の列によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
ファイルのファイル名を見る	os.path.basename(filepath)
文字列の開始位置からと終了位置の間に部分文字列が含まれる	s.find(sub, start, end) != -1
ヒストグラムの色をライトスカイブルーに変更する	plt.hist(データ列, color='lightskyblue')
表データの行の名前を一度にnameからname2に付け直す	df.rename(index={name: name2})
option: グラフの色をライトシアンに変更する	color = 'lightcyan'
乱数を生成する	random.random()
黄緑色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
オレンジレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orangered')
横棒グラフをオーキッド色で描画する	plt.barh(データ列x, データ列y, color='orchid')
データフレームを列によってグループ化して、それぞれのグループごとの最小値を求める	df.groupby(column).min()
折れ線グラフの色をライトグレーに指定する	plt.plot(データ列x, データ列y, color='lightgrey')
散布図の色を小麦色にする	plt.scatter(データ列x, データ列y, color='wheat')
ヒストグラムの色をダーク・スラテグレーに変更する	plt.hist(データ列, color='darkslategrey')
リストの中の最大値を求める	max(aList)
グラフのグリッドを暗くする	sns.set(style='darkgrid')
ヒストグラムをフローラルホワイト色で描画する	plt.hist(データ列, color='floralwhite')
コーラルにヒストグラムの色を変更する	plt.hist(データ列, color='coral')
横棒グラフの色をスレートブルーにする	plt.barh(データ列x, データ列y, color='slateblue')
赤い菱形マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='D', c='r')
リストとリストについて散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列をキャピタライズする	s.capitalize()
イテラブルを累積した列を得る	itertools.accumulate(iterable, operator.mul)
ロバスト回帰モデルを準備する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
option: グラフの色をミディアムパープルに変更する	color = 'mediumpurple'
散布図にrgbの四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
折れ線グラフの色をピンクに設定する	plt.plot(データ列x, データ列y, color='pink')
スレートブルー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: ダークグレーにグラフの色を指定する	color = 'darkgray'
連続した配列の自動作成する	np.arange(開始値, 終了値, 等差)
横棒グラフの色をモカシンにする	plt.barh(データ列x, データ列y, color='moccasin')
列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームのリスト列を1000の位で四捨五入する	df[aList].round(-3)
日付時刻データからn時間分減らす	aDatetime - datetime.timedelta(hours=n)
線グラフをライトゴールドロディイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
データフレームからカテゴリデータの列名の一覧を使う	df.select_dtypes('object').columns
リストを青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
両端キューのstart番目からendの部分値	collections.deque(itertools.islice(deq, start, end))
nわるn2を求める	n / n2
折れ線グラフの大バツマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
今日が水曜日か調べる	datetime.datetime.today().weekday() == 2
棒グラフをミディアムターコイズ色で描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
データ列とリストについて散布図を描いて、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
現在のモジュール	sys.modules[__name__]
変数を黄色でプリントする	print(f'\033[33m{value}\033[0m')
option: 色をハニーデューにする	color = 'honeydew'
下三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='v')
色付きの一点鎖線としてラインを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
オブジェクトは文字列クラスか調べる	isinstance(obj, str)
二つの文字列は同じでないか	s != s2
要素が集合のメンバーに含まれないかどうか	element not in aSet
サポートベクターマシンで回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
データフレームの列を折れ線グラフとして可視化する	plt.plot(df[column], df[column])
アリスブルー色のヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
横棒グラフを黄色くする	plt.barh(データ列x, データ列y, color='y')
データフレームから破壊的に重複したデータを削除する	df.drop_duplicates(inplace=True)
散布図のマーカーを左三角印にする	plt.scatter(データ列x, データ列y, marker='<')
散布図を黒くする	plt.scatter(データ列x, データ列y, color='k')
x,y,zをそれぞれn,n2,n3に設定する	x, y, z = n, n2, n3
option: ライトグレー色を使う	color = 'lightgray'
部分文字列が文字列中に含まれない	sub not in s
option: ライトスレイグレーにグラフの色を設定する	color = 'lightslategray'
ラベンダーブラッシュ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgray')
横棒グラフをドジャーブルー色で描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
ピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='pink')
ヒストグラムをオレンジ色を用いて描画する	plt.hist(データ列, color='orange')
線グラフの色をグリーンイエローに指定する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームの列の名前を一度に文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
縦向きに３つのデータフレームを連結する	pd.concat([df, df2, df3], axis=0)
ゼロ埋めされた整数型の行列	np.zeros(要素数, dtype=np.int)
ヒストグラムの色を黄色にする	plt.hist(データ列, color='yellow')
保存するCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
折れ線グラフにポイント印を使う	plt.plot(データ列x, データ列y, marker='.')
横棒グラフをライトグリーン色として描画する	plt.barh(データ列x, データ列y, color='lightseagreen')
option: グラフの色をホワイトスモークに設定する	color = 'whitesmoke'
横棒グラフの色をダークスラテグレーにする	plt.barh(データ列x, データ列y, color='darkslategray')
カウンタの項目をカウントだけリストとして得る	aCounter.elements()
パールバイオレットレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='palevioletred')
データ列を百の位で丸める	ds.round(-2)
折れ線グラフの星マーカーを黒くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
option: グラフを破線に設定する	linestyle = 'dashed'
ファイルパスの区切り記号	os.sep
円グラフの特定の要素だけ目立たせる	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
オブジェクトのメモリビューを求める	memoryview(obj)
線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
散布図をスカイブルー色として描画する	plt.scatter(データ列x, データ列y, color='skyblue')
文字列がタプルの要素かどうか	element in aTuple
option: グラフの色をコーンフラワーブルーにセットする	color = 'cornflowerblue'
折れ線グラフの色をダークグリーンに設定する	plt.plot(データ列x, データ列y, color='darkgreen')
データフレームをJSONLファイルに保存する	df.to_excel(filename)
ダークシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkcyan')
自分自身をモジュールとしてを	sys.modules[__name__]
自然数の最大公約数を計算する	math.gcd(n, n2)
横棒グラフの色をライトゴールドロディイエローにする	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの色を青に変更する	plt.plot(データ列x, データ列y, color='blue')
切片なしの線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
スピアマン相関係数を用いてデータフレームのリストで指定された列の相関行列	df[aList].corr(method='spearman')
ファイルの拡張子なしのファイル名を求める	os.path.splitext(os.path.basename(filepath))[0]
集合の要素数	len(aSet)
本日の曜日を整数で使う	datetime.datetime.today().weekday()
散布図に赤い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
クラス分類の予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
日付データにn時間を加える	aDate + datetime.timedelta(hours=n)
文字列で区切って2つの文字列をプリントする	print(value, value2, sep=s)
整数nが配列の一つか	n in aArray
option: グラフの色をブラウンに設定する	color = 'brown'
文字列が全て空白文字からなるか調べる	s.isspace()
option: グラフの色をアイボリーに設定する	color = 'ivory'
文字列全体が正規表現に大文字・小文字を無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
モデルを説明変数と目的変数で学習する	model.fit(説明変数, 目的変数)
option: ライトブルーを用いる	color = 'lightblue'
数値を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
ヒストグラムの色をパールゴールデンロッドに変更する	plt.hist(データ列, color='palegoldenrod')
グラフの見た目をよくする	import seaborn as sns
ファイルを追加モードでオープンして]、fとする	f = open(filepath, mode='a')
option: グラフの色をカデットブルーに指定する	color = 'cadetblue'
ファイルパスをEUCで開く]	open(filepath, encoding='euc_jp')
数値の出力を改行なしに行う	print(value, end='')
プラットホームがウィンドウズ	sys.platform.startswith('win32')
プログラムの実行をエラーとして停止する	sys.exit(1)
横棒グラフをミディアムパープル色で描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
データ列がどの程度、分散しているか見る	ds.var()
棒グラフをトマト色で描画する	plt.bar(データ列x, データ列y, color='tomato')
数列とデータ列について散布図を描画して、マーカーを右三角にする	plt.plot(データ列x, データ列y, marker='>')
ヒストグラムの色をミディアムスプリンググリーンに変更する	plt.hist(データ列, color='mediumspringgreen')
option: マーカーの色をゴーストホワイトにする	markerfacecolor = 'ghostwhite'
option: グラフの色をダークマゼンタに設定する	color = 'darkmagenta'
日付時刻データの秒数を使う	aDatetime.second
オブジェクトは論理値型か	isinstance(obj, bool)
重複をデータフレームから破壊的に削除する	df.drop_duplicates(inplace=True)
耐火レンガ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='firebrick')
折れ線グラフの色をピンクに変更する	plt.plot(データ列x, データ列y, color='pink')
データフレームのn行目を削除して更新する	df.drop(n, axis=0, inplace=True)
作業ディレクトリ	os.getcwd()
ベクトルをイテラブルから作成する	np.array(iterable)
ヒストグラムを青紫色で描画する	plt.hist(データ列, color='violet')
データフレームを残差プロットする	sns.residplot(x='列名', y='列名', data=df)
データフレームの欠損値をxにセットする	df.fillna(x)
棒グラフをゲインズボロ色で描画する	plt.bar(データ列x, データ列y, color='gainsboro')
日付時刻データが日曜日か調べる	aDatetime.weekday() == 6
線形モデルの回帰変数	model.coef_
パールバイオレットレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
正規分布で疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
データ列を四捨五入する	ds.round()
折れ線グラフの色をスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='springgreen')
折れ線グラフを四角印を用いて描画する	plt.plot(データ列x, データ列y, marker='s')
option: パールゴールデンロッドを使う	color = 'palegoldenrod'
積み上げ棒グラフを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームを各列と列の組み合わせ毎に集約して、個数を求める	df.groupby([column, column2], as_index=False).count()
散布図をシルバー色として描画する	plt.scatter(データ列x, データ列y, color='silver')
文字列中にひとつでも非アスキー文字が含まれるか調べる	any(not c.isascii() for c in s)
リストの末尾の要素を使う	aList[-1]
リストの推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
文字列の先頭が部分文字列か調べる	s.startswith(sub)
辞書の全項目をクリアする	aDict.clear()
データ列の推移を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
散布図のダイアモンドマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
タプルの末尾のn要素を取り除く	aTuple[:-n]
ライトスレイグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
列をビン分割する	pd.cut(ds, aList)
線グラフをブランチドアーモンド色を用いて描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: セパレータをタブにする	sep = '\t'
散布図にrgbの大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c=rgb)
実数が有限	math.isfinite(x)
色名をからコードにする	matplotlib.colors.cnames[色名]
データフレームのカラムの標本標準偏差	df[col].std()
トマト色のヒストグラムを描画する	plt.hist(データ列, color='tomato')
ヒストグラムの色をディープスカイブルーに変更する	plt.hist(データ列, color='deepskyblue')
リストとリストについての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
option: 線種を一点鎖線に設定する	linestyle = 'dashbot'
折れ線グラフを青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
棒グラフの色をシスルにする	plt.bar(データ列x, データ列y, color='thistle')
両端キューの上限長	deq.maxlen
変数を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
キューのstart〜endの部分要素を見る	collections.deque(itertools.islice(deq, start, end))
集合をイミュータブルなセットに変換する	frozenset(aSet)
グラフ中で日本語を使えるようにする	sns.set(font='IPAexGothic')
データフレームのリストカラムは正規分布からどれだけ、尖っているか調べる	df[aList].skew()
辞書をチェーンマップに変換する	collections.ChainMap(aDict)
各列毎にデータフレームをグループ化して、列の合計を計算する	df.groupby(column)[column2].sum()
二つの列によってデータフレームをグループ化し、要約統計量を計算する	df.groupby(['A', 'B']).describe()
option: フローラルホワイトにフォントの色を設定する	color = 'floralwhite'
空の双方向キュー	collections.deque()
実部と虚部から複素数を作る	complex(x, y)
ダークレッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkred')
実数に実数を掛ける	x * y
データフレームの値をまとめてValueMapで置き換える	df.replace(ValueMap)
勾配ブースティング回帰木を作る	model = sklearn.ensemble.GradientBoostingRegressor()
現在の日数	datetime.datetime.today().day
文字列をコロンによって区切って、列挙する	s.split(':')
折れ線グラフの星マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
サーモン色としてヒストグラムを描画する	plt.hist(データ列, color='salmon')
文字列をエラーを無視してバイト列にする	s.encode(errors='ignore')
option: フローラルホワイト色を用いる	color = 'floralwhite'
option: グレーにグラフの色を指定する	color = 'gray'
一方に含まれ、他方に含まれない集合	aSet.difference(aSet2)
nCk	math.comb(n, k)
散布図の三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データ列の折れ線グラフを▲マーカーで描画する	plt.plot(データ列x, データ列y, marker='^')
散布図に黒い下三角印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
ダークカーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
空白によって文字列を区切る	s.split()
ふたつの集合が互いに素か	aSet.isdisjoint(aSet2)
オブジェクトをデバッグ向けの文字列に変換する	repr(obj)
データフレームのカラムの中に文字列と文字列が含まれるかどうか調べる	df[col].isin([value, value2])
配列の列ごとの最小値	np.min(aArray, axis=0)
折れ線グラフの色を小麦色に設定する	plt.plot(データ列x, データ列y, color='wheat')
データフレームの指定したデータ型のカラム名を列挙する	df.select_dtypes(型).columns
横棒グラフの色をパールバイオレットレッドにする	plt.barh(データ列x, データ列y, color='palevioletred')
辞書の項目名を要素に設定する	aDict[key] = element
日付データは日付データより前かどうか調べる	aDate < aDate2
データフレームを'A'列によってソートし、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
オブジェクトは辞書クラスか調べる	isinstance(obj, dict)
分子n、分母mの有理数を作る	fractions.Fraction(numerator=n, denominator=m)
カウンタのユニオンを求める	aCounter | aCounter2
折れ線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
フォレストグリーン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='forestgreen')
▽印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
グラフを正方形にする	plt.axis('equals')
ライトスレイグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategrey')
散布図の印を菱形にする	plt.scatter(データ列x, データ列y, marker='D')
棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
ヒートマップとしてデータフレームの列とカラムの相関行列を描画する	sns.heatmap(df[[column, column2]].corr())
ロイヤルブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='royalblue')
データフレームのインデックス名を一度に、nameからname2に付け直す	df.rename(index={name: name2})
散布図を丸マーカーで描画する	plt.scatter(データ列x, データ列y, marker='o')
リストとリストについて散布図をプロットし、、バツマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフに赤い菱形印を描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
辞書からキーで指定された項目をポップする	aDict.pop(key)
現在の作業ディレクトリ	os.getcwd()
バリーウッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
オールドレース色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='oldlace')
折れ線グラフに三角マーカーを加える	plt.plot(データ列x, データ列y, marker='^')
データフレームを破壊的に'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True, inplace=True)
データフレームのリストカラムの分散を求める	df[aList].var()
データフレームを'A'列によってソートして更新する	df.sort_values(by='A', inplace=True)
ヒストグラムの色をシアンに変更する	plt.hist(データ列, color='cyan')
ランダムにn行をデータフレームから抽出する	df.sample(n)
データフレームのリストカラムのNaNを後の行の値で埋める	df[aList].fillna(method='bfill')
左三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='<')
イテラブルとリストについて散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
xが1、もしくは2かどうか調べる	x == 1 or x == 2
オリベドラブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olivedrab')
コーラル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='coral')
リストとリストについての散布図に黒いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
リネン色でヒストグラムを描画する	plt.hist(データ列, color='linen')
データフレームの中で列の重複を見る	df.duplicated(subset=column)
データフレームのリスト列が正規分布からどれだけ、歪んでいるか確認する	df[aList].kurt()
文字列の先頭で正規表現にマッチするか確認する	re.match(pattern, s)
1からNまでの行列を作る	np.arange(1, N+1)
棒グラフをアンティークホワイト色を用いて描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
ダークグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
nを十六進数文字列にする	hex(n)[2:]
データフレームの列を折れ線グラフで可視化する	plt.plot(df[column], df[column])
横棒グラフをライトゴールドロディイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
データ列の中にいくつ欠損値があるか数える	ds.isna().sum()
文字列の中でASCII限定として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
配列とデータ列についての散布図に赤い上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='r')
真上位集合か調べる	aSet > aSet2
ファイルを開いて]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
横棒グラフをダークバイオレット色で描画する	plt.barh(データ列x, データ列y, color='darkviolet')
スレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
折れ線グラフのダイアモンドマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
書き込み用にファイルを開く]	open(filepath, mode='w')
赤いグリッド線を引く	plt.grid(color='r')
ライム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
散布図を濃い青色を使って描画する	plt.scatter(データ列x, データ列y, color='darkblue')
option: ホワイトスモーク色を用いる	color = 'whitesmoke'
リストと配列について散布図を描画し、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
nが1、もしくは2	n == 1 or n == 2
文字列中にひとつでも非アルファベットがあるか調べる	any(not c.isalpha() for c in s)
折れ線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
パープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='purple')
year年month月day日をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day)
ヒストグラムをゴールド色で描画する	plt.hist(データ列, color='gold')
マッピングのキーを要素に設定する	aDict[key] = element
文字列のUNIX時間から日付データに変換する	pd.to_datetime(s, unit='s', utc=True)
nというシートをエクセルファイルファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
下位集合か調べる	aSet.issubset(aSet2)
辞書をネスト化する	collections.ChainMap(aDict)
整数個のものからk個取り出したときの並べ方の総数を求める	math.perm(n, k)
多次元データをt-SNEでパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
決定木の重要度を表示する	plt.barh(X.columns, model.feature_importances_)
サドルブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
線グラフをアンティークホワイト色を用いて描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
option: グラフの色をゴーストホワイトに変更する	color = 'ghostwhite'
実線を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
散布図のマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフをミディアムパープル色で描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
option: バリーウッド色を使う	color = 'burlywood'
部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
配列と配列についての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
オブジェクトは辞書か	isinstance(obj, dict)
データフレームのリストカラムを100の位で四捨五入して、整数型にする	df[aList].round(-2).astype(int)
ベストな場所に凡例を表示する	plt.legend(loc='best')
二つの整数最小公倍数を求める	math.lcm(n, n2)
折れ線グラフをダークグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgreen')
グリッドの線の種類を破線に変更する	plt.grid(linestyle='dashed')
文字列を文字コードでバイト列に変換する	s.encode(encoding=encoding)
配列と配列について散布図を描画してマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
辞書のキーとそのエントリを列挙する	aDict.items()
リストと数列について散布図を描き、、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
option: マーカーを下三角に変更する	marker = 'v'
集合をタプルに変換する	tuple(aSet)
ナバホホワイト色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
折れ線グラフの色をサドルブラウンに変更する	plt.plot(データ列x, データ列y, color='saddlebrown')
整数nの八進数表現	oct(n)
オブジェクトが辞書クラスかどうか調べる	isinstance(obj, dict)
シアン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
配列をn個に等間隔でビン分割してnamesのラベルをつける	pd.cut(aArray, n, labels=names)
データフレームの中の列と列に重複があればマスクする	df.duplicated(subset=[column, column2])
カラムの文字列を欠損値にする	ds.replace(s, np.nan)
列で昇順にデータフレームをソートする	df.sort_values(by=column, ascending=True)
文字列を部分文字列で区切って、文字列リストに変換する	s.split(sub)
非数値データ列をベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
横棒グラフをホワイトスモーク色で描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
ロバストな重回帰分析を行う	model = sklearn.linear_model.HuberRegressor()
散布図に赤いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
Pandasで、データフレームのcollのエポック秒からタイムスタンプに変換する	pd.to_datetime(df[col], unit='s', utc=True)
貝殻色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
積み上げ横棒プロットを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
縦棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
連番の配列の自動作成する	np.arange(開始値, 終了値, 等差)
文字列をASCII限定として正規表現で分割する	re.split(pattern, s, flags=re.ASCI)
デックの末尾を使う	deq[-1]
線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
無限に文字列が繰り返すイテラブル	itertools.repeat(element)
データフレームのカラムの欠損値をxに指定する	df[col].fillna(x)
ベクトルの平均値	np.mean(aArray)
option: グラフを点線に設定する	linestyle = 'dotted'
自然対数の底を使う	math.e
データフレームから指定された三つの列を抽出する	df[[column, column2, column3]]
option: ダークグリーンにグラフの色を設定する	color = 'darkgreen'
キューの右側に要素を追加する	deq.append(element)
データフレームの列の中にある文字列と文字列の数を数える	df[col].isin([value, value2]).sum()
データ列の推移を色付きの破線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
オブジェクトのプロパティの値を値に指定する	setattr(obj, プロパティ名, 値)
option: カンマをセパレータで用いる	sep = ','
option: ８ビット整数型を用いる	dtype = np.int8
棒グラフをオリーブ色を用いて描画する	plt.bar(データ列x, データ列y, color='olive')
クラス分類の適合率と再現率の調和平均を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
パールバイオレットレッド色のヒストグラムを描画する	plt.hist(データ列, color='palevioletred')
データフレームのカラムの欠損値をxに設定する	df[col].fillna(x)
縦棒グラフをミディアムアクアマリン色で描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
データフレームを列の値ごとにグループ化してそれぞれのグループごとの最小値を求める	df.groupby(column).min()
横棒グラフをライムグリーン色を使って描画する	plt.barh(データ列x, データ列y, color='limegreen')
列の一覧を見る	df.info()
新しいサポートベクター回帰モデルを用意する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
二つのリストの積集合を求める	list(set(aList) & set(aList2))
データフレームを列で分類して、列の要約統計量を算出する	df.groupby(column).describe()[column2]
サーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='salmon')
'A'列の値によってデータフレームをグループ化し、要約統計量を計算する	df.groupby('A').describe()
スプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='springgreen')
option: 色を茶色に設定する	color = 'brown'
リストとリストの散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図のクロスマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
文字列をプリントする	print(value)
ヒストグラムをグリーン色で描画する	plt.hist(データ列, color='green')
列をリストに変換する	df[column].values.tolist()
n番目の列をインデックスとしてカンマ区切りのファイルTSVファイルを読み込む	pd.read_csv(filename, index_col=n)
散布図に黒いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
棒グラフの色をダークスレートブルーにする	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレームの指定された列の名前一覧の列のみ抽出する	df[columns]
折れ線グラフをライトグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='lightgrey')
重回帰モデルの残差を求める	目的変数 - model.predict(説明変数)
ビン数nでデータ列をビン分割し、、namesのラベルをつける	pd.cut(ds, n, labels=names)
データフレームを'A'列の値ごとに集約して列挙する	[(name, group) for name, group in df.groupby('A')]
コマンド引数の一覧を	sys.argv[1:]
行列の標準偏差	np.std(aArray)
カテゴリデータ列を連番に変換する	sklearn.preprocessing.LabelEncoder().fit_transform(データ列)
暗くカラーパレットをグラフの描画で用いる	sns.set(pallete='dark')
ミディアムパープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
データフレームのリスト列の相関行列をヒートマップで描画する	sns.heatmap(df[aList].corr())
リストとリストについての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
数式を変数についてn階微分する	sympy.diff(e, z, n)
ダークゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフに黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
日付データと日付データの時間差を秒で算出する	(aDate - aDate2).total_seconds()//60
シャルトリューズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chartreuse')
複数行対応として正規表現で文字列を分ける	re.split(pattern, s, flags=re.MULTILINE)
データフレームの中の列を分割数nでビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
nの八進数表現	oct(n)
データ列のRMSEを求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
行列の転置行列	aArray.T
データフレームの中のカラムを四分位数ごとに分割する	pd.qcut(df[col], 4)
赤い四角マーカーをリストと配列の散布図に描く	plt.plot(データ列x, データ列y, marker='s', c='r')
散布図をライトブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightblue')
列を用いてデータフレームを整列する	df.sort_values(by=column)
色付きの破線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームのリスト列の未入力値を最頻値で置換する	df[aList].fillna(df[aList].mode().iloc[0])
列の歪度	ds.kurt()
option: マーカーの色をライトサーモンにする	markerfacecolor = 'lightsalmon'
データフレームをグループ化し、それぞれの列に対し分散を求める	df.groupby(column)[column2].var()
option: ローングリーンにグラフの色をする	color = 'lawngreen'
散布図を黄緑色を用いて描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
データフレームから数値データのカラムだけ抽出する	df.select_dtypes('number')
散布図のマーカーの大きさをnに指定する	plt.scatter(データ列x, データ列y, s=n)
イエローグリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='yellowgreen')
option: パレットトルコイズを使う	color = 'paleturquoise'
散布図をライトグレー色で描画する	plt.scatter(データ列x, データ列y, color='lightgray')
データフレームのリストカラムを丸めて整数型にする	df[aList].round().astype(int)
タプルの中の最大値	max(aTuple)
n番目のカラムをインデックスとしてCSVファイルTSVを読む	pd.read_csv(filename, index_col=n)
線グラフをライトスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
折れ線グラフのラインスタイルを点線にセットする	plt.plot(データ列x, データ列y, linestyle='dotted')
数列とリストについての散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームの列を最初のカテゴリーを除き、ワンホット・ベクトルに変換する	pd.get_dummies(df[column], drop_first=True)
日付時刻データは日付時刻データより前	aDatetime < aDatetime2
キューが空でないか判定する	len(deq) != 0
円グラフとしてデータ列のパーセントを作図する	plt.pie(データ列, startangle=90)
ダークグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
折れ線グラフをディムグレー色として描画する	plt.plot(データ列x, データ列y, color='dimgrey')
option: ドジャーブルーにグラフの色をセットする	color = 'dodgerblue'
今日が金曜日	datetime.datetime.today().weekday() == 4
option: グラフの色をアクアマリンに変更する	color = 'aquamarine'
nをn2分の１にする	n /= n2
ミディアムターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
データ列のユニークな値の個数	ds.nunique()
日付データをn分前に戻す	aDate - datetime.timedelta(minutes=n)
折れ線グラフの色を珊瑚に設定する	plt.plot(データ列x, データ列y, color='coral')
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
ラインを一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
文字列を最後の部分文字列で分けたときの左端の文字列	s.rpartition(sub)[0]
JSONファイルのファイルを辞書に変換する	json.load(fin)
TSVからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
文字列から部分文字列を取り除く	s.replace(sub, '')
グラフにデータラベルを加える	plt.legend(['凡例A', '凡例B'])
文字列を走査しパターンにASCII限定としてマッチするか確認する	re.search(pattern, s, flags=re.ASCI)
二つの変数を文字列で区切って出力する	print(value, value2, sep=s)
nとkのnCk	math.comb(n, k)
文字列をセパレータで区切って、列挙する	s.split(sep)
文字列の文字数	len(s)
アクアにヒストグラムの色を指定する	plt.hist(データ列, color='aqua')
ヒストグラムの色をパレットトルコイズに設定する	plt.hist(データ列, color='paleturquoise')
文字列に漢字が含まれるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
線グラフの色を紺碧に変更する	plt.plot(データ列x, データ列y, color='azure')
option: オーキッド色を使う	color = 'orchid'
グリッド線を青くする	plt.grid(color='b')
組の先頭を除く	aTuple[1:]
ファイルを読み込みモードで開く]	open(filepath, mode='r')
プログラムの実行を異常終了する	sys.exit(1)
文字列がタイトル大文字小文字か	s.istitle()
文字列を文字のリストに変換する	list(s)
折れ線グラフをライトゴールドロディイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの大バツマーカーを赤色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
折れ線グラフの色をパレットトルコイズに変更する	plt.plot(データ列x, データ列y, color='paleturquoise')
実数が有限か調べる	math.isfinite(x)
option: 色をライトスカイブルーに変更する	color = 'lightskyblue'
option: グラフの色を青紫に設定する	color = 'violet'
グレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='grey')
ゴーストホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
昨日の日付	datetime.date.today() - datetime.timedelta(days=1)
日付時刻データの時間数	aDatetime.hour
クラス分類をブースティングを用いて行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
セットにイテラブルの要素を追加する	aSet.update(iterable)
オプションで、出力先を標準エラーに設定する	file = sys.stderr
nが1、もしくは2、もしくは3に等しい	n == 1 or n == 2 or n == 3
ダークシアグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
本日の日付時刻を計算する	datetime.datetime.now()
横棒グラフを耐火レンガ色として描画する	plt.barh(データ列x, データ列y, color='firebrick')
散布図に青い菱形印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
option: 線幅を3.0ポイントに設定する	linewidth = 3.0
データフレームの指定された列のみ選択する	df[[column]]
黒い星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c='k')
散布図を白くする	plt.scatter(データ列x, データ列y, color='w')
ロイヤルブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='royalblue')
両端キューの先頭に要素を追加する	deq.appendleft(element)
散布図の色をプラムにする	plt.scatter(データ列x, データ列y, color='plum')
プロットの補足の位置を指定する	plt.legend(loc=(x, y))
横棒グラフの色をクリムゾンにする	plt.barh(データ列x, データ列y, color='crimson')
ミディアムスプリンググリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
option: フォントの色をモカシンに設定する	color = 'moccasin'
ファイルの拡張子なしのファイル名を使う	os.path.splitext(os.path.basename(filepath))[0]
折れ線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
散布図の印を▽にする	plt.scatter(データ列x, データ列y, marker='v')
seabornのデフォルトを適用する	sns.set()
ミディアムアクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
横棒グラフの色をデピンクにする	plt.barh(データ列x, データ列y, color='deeppink')
青にヒストグラムの色を指定する	plt.hist(データ列, color='blue')
日付時刻データにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
データフレームのカラムの中に文字列と文字列があるか調べる	df[col].isin([value, value2])
実数のk進対数	math.log(x, k)
リストの要素を関数に適用した結果で並べる	sorted(aList, key=func)
データフレームを関数でまとめたグループ	df.groupby(関数)
option: エンコーディングをSJISに指定する	encoding = 'shift_jis'
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgrey')
黒い下三角マーカーをリストとデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
ゴールド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gold')
スレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
option: ▽マーカーを使う	marker = 'v'
データフレームの列の欠損値を直後の値で埋める	df[col].fillna(method='bfill')
関数の値によってデータフレームをまとめたグループ	df.groupby(関数)
第2コマンド引数	sys.argv[1]
マップを浅く複製する	dict(aDict)
タプルの最後からn番目以前の部分を抽出する	aTuple[:-n]
線グラフの色をライトスレイグレーにセットする	plt.plot(データ列x, データ列y, color='lightslategray')
ダークオリーブグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
リストを順に表示する	print(*aList)
メディアンでデータフレームの欠損値を埋める	df.fillna(df.median())
オブジェクトは辞書クラスかどうか確認する	isinstance(obj, dict)
文字列の中で大文字・小文字を無視してパターンにマッチした文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
２つ並べて箱ひげ図をプロットする	plt.boxplot([データ列, データ列])
リストを並べ変える	sorted(aList)
ダークシアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
データフレームのリストカラムの中に日付データがあるかどうか調べる	df[aList].isin([value])
変数について数式を積分する	sympy.integrate(e, z)
データ列の欠損値を最大値に設定する	ds.fillna(ds.max())
横棒グラフの色をバリーウッドにする	plt.barh(データ列x, データ列y, color='burlywood')
option: バイナリ用に設定する	mode = 'rb'
線グラフの色をミディアムターコイズにする	plt.plot(データ列x, データ列y, color='mediumturquoise')
折れ線グラフのクロス印を赤くする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
ペールグリーン色のヒストグラムを描画する	plt.hist(データ列, color='palegreen')
散布図に黒い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
折れ線グラフの色をビスクにする	plt.plot(データ列x, データ列y, color='bisque')
数列とリストの散布図に黒い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
横棒グラフの色をミントクリームにする	plt.barh(データ列x, データ列y, color='mintcream')
ヒストグラムをフローラルホワイト色を用いて描画する	plt.hist(データ列, color='floralwhite')
インデント幅nで、辞書をJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
棒グラフを紺碧色で描画する	plt.bar(データ列x, データ列y, color='azure')
ダークゴールデンロッド色でヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
データフレームから列を４つ選択する	df[[column, column2, column3, column4]]
線グラフを青い一点鎖線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
nが正の数か調べる	n > 0
線グラフの色をライトスチールブルーに指定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
変数が0に近づくときの数式の極限値を計算する	sympy.limit(e, z, 0)
プログラムの実行をエラーとして終了する	sys.exit(1)
配列を等量でビン数nでビニングする	pd.qcut(aArray, n)
データフレームのカラムを丸めて、整数型にする	df[col].round().astype(int)
アルファベットから一つランダムに選ぶ	random.choice(string.ascii_uppercase)
散布図の色をゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='goldenrod')
カテゴリで色付けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
疑似乱数を正規分布で生成する	random.normalvariate(mu=0.5, sigma=0.2)
データフレームのリストで指定された列の相関行列	df[aList].corr()
option: マーカーの色をアイボリーにする	markerfacecolor = 'ivory'
散布図に赤い△マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c='r')
option: フォントの色を貝殻に設定する	color = 'seashell'
散布図の四角印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
文字列を空白で区切り、、文字列リストにする	s.split()
option: マーカーの色をインディアンレッドにする	markerfacecolor = 'indianred'
ヒストグラムの色をピーチパフに変更する	plt.hist(データ列, color='peachpuff')
散布図をライトスカイブルー色を使って描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
二つの文字列を改行で区切ってプリントする	print(value, value2, sep='\n')
ブラックにヒストグラムの色を変更する	plt.hist(データ列, color='black')
データフレームの列の値がx以下のデータを抽出する	df[df[column] <= x]
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
実数の平方根	math.sqrt(x)
option: グラフの色をオリーブに設定する	color = 'olive'
二つの整数LCM	math.lcm(n, n2)
折れ線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図をパープル色として描画する	plt.scatter(データ列x, データ列y, color='purple')
項目名がマッピングに存在し、いるか調べる	key not in aDict
折れ線グラフの色をライトスチールブルーに指定する	plt.plot(データ列x, データ列y, color='lightsteelblue')
データフレームをグループ化し、それぞれの列に対し個数を求める	df.groupby(column)[column2].count()
正則化付き線形回帰分析の準備をする	model = sklearn.linear_model.ElasticNet()
半透明の実線を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
色付きの点線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ミディアムオーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
グリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
数を整数で除した余り	x % y
横軸の表示範囲を変更する	plt.xlim(最小値, 最大値)
ターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
赤い大バツマーカーをリストとデータ列の散布図に描く	plt.plot(データ列x, データ列y, marker='X', c='r')
option: ダークシアグリーンに色を設定する	color = 'darkseagreen'
線グラフの色を紺碧にする	plt.plot(データ列x, データ列y, color='azure')
スピアマン相関係数でデータフレームの相関行列	df.corr(method='spearman')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgray')
横棒グラフの色をオリベドラブにする	plt.barh(データ列x, データ列y, color='olivedrab')
実数が無限大か調べる	math.isinf(x)
折れ線グラフを茶色色として描画する	plt.plot(データ列x, データ列y, color='brown')
赤色で散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
データフレームのカラムの中にいくつ文字列があるか求める	df[col].isin([value]).sum()
散布図を淡いピンク色色を使って描画する	plt.scatter(データ列x, データ列y, color='lightpink')
範囲から配列	np.linspace(最小値, 最大値, 要素数)
横棒グラフを黒くする	plt.barh(データ列x, データ列y, color='k')
線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
散布図にバツ印を用いる	plt.scatter(データ列x, データ列y, marker='x')
Pandasで、dateStringを日付データに変換する	pd.to_datetime(dateString)
データフレームのカラムの中に文字列と日付データがいくつあるか数える	df[col].isin([value, value2]).sum()
割合付きの円グラフを描画する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
行列の累積和を求める	np.cumsum(aArray)
両端キューをタプルに変換する	tuple(deq)
黄色い棒グラフを描画する	plt.bar(データ列x, データ列y, color='y')
散布図にポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.')
ディムグレー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgray')
横棒グラフをスレートブルー色を使って描画する	plt.barh(データ列x, データ列y, color='slateblue')
ピーチパフにヒストグラムの色を設定する	plt.hist(データ列, color='peachpuff')
折れ線グラフの色をダークサーモンに設定する	plt.plot(データ列x, データ列y, color='darksalmon')
グラフの縦横の比率を等しくする	plt.axis('equals')
オリーブ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
リストを緑色でプリントする	print(f'\033[32m{value}\033[0m')
option: フローラルホワイトを使う	color = 'floralwhite'
列'A'と列'B'をキーとして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
イテラブルとイテラブルの直積	itertools.product(iterable, iterable2)
ロージーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
折れ線グラフをホットピンク色として描画する	plt.plot(データ列x, データ列y, color='hotpink')
回帰分析をスタッキングを使って行う	sklearn.ensemble.StackingRegressor()
リストの要素を関数に適用した結果で並べ直す	sorted(aList, key=func)
option: グラフの色をライトサーモンに設定する	color = 'lightsalmon'
option: マゼンタにグラフの色を変更する	color = 'magenta'
表データから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
ファイルをEUCで書き込み用に開く]	open(filepath, mode='w', encoding='euc_jp')
リスト内の要素が全て真	all(aList)
データ列の欠損値を直前の値で埋める	ds.fillna(method='ffill')
エクセルファイルファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
カテゴリ列で色分けして、カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図の色を貝殻にする	plt.scatter(データ列x, データ列y, color='seashell')
option: ライトコーラル色を使う	color = 'lightcoral'
本日が月曜日か調べる	datetime.datetime.today().weekday() == 0
横棒グラフの色をミディアムパープルにする	plt.barh(データ列x, データ列y, color='mediumpurple')
散布図をオリベドラブ色として描画する	plt.scatter(データ列x, データ列y, color='olivedrab')
numpyを用いる	import numpy as np
縦棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
プラムにヒストグラムの色を設定する	plt.hist(データ列, color='plum')
青色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blue')
データ列の値が欠損値か調べる	ds.isna()
option: マゼンタを使用する	color = 'magenta'
イテラブルの長さnの順列	itertools.permutations(iterable, n)
nとn2の積	n * n2
ピンク色のヒストグラムを描画する	plt.hist(データ列, color='pink')
マッピングをJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
折れ線グラフを黄緑色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
実数の余弦	math.cos(x)
リストをn回連結する	aList * n
スピアマン相関係数としてデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
データフレームのリストカラムを百の位で丸める	df[aList].round(-2)
色付きの実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
シーケンスからサンプリングする	random.sample(iterable)
日付データが土曜日	aDate.weekday() == 5
折れ線グラフをシーグリーン色として描画する	plt.plot(データ列x, データ列y, color='seagreen')
バイアスなしの回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
データフレームを用いる	import pandas as pd
ファイルからストリームを読み込み、fileとする	file = open(filepath)
パウダーブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
辞書のキーと値を入れ替える	{v: k for k, v in aDict.items()}
文字列の両端から部分文字列を除く	s.strip(sub)
リストと配列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
整数nを半分にする	n //= 2
リストを等間隔でn個にビン分割する	pd.cut(aList, n)
リストとリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgray')
nとkのコンビネーションを求める	math.comb(n, k)
等差数列から整数乱数を生成する	random.randrange(start, end, step)
横棒グラフの色をディープスカイブルーにする	plt.barh(データ列x, データ列y, color='deepskyblue')
データフレームの散布図にロジスティック回帰を加える	sns.regplot(x='列名', y='列名', data=df, logistic=True)
クラス分類の予測精度をヒートマップで見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
オブジェクトをイテラブルにする	iter(obj)
BOM付きでファイルをオープンする]	open(filepath, encoding='utf_8_sig')
ライトシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
パウダーブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
棒グラフを黄色色として描画する	plt.bar(データ列x, データ列y, color='yellow')
イテラブルからベクトルを作成する	np.array(iterable)
折れ線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
データフレームのカラムの値をValueMapでまとめて置き換える	df[col].replace(ValueMap)
データフレームを列ごとに集約して標準偏差を求める	df.groupby(column).std()
棒グラフをライトスレイグレー色として描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
散布図のポイントマーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='.', markersize=2.0)
散布図に黒いダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
option: グラフの色をライトグレーに設定する	color = 'lightgrey'
散布図に青い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
データフレームを各列毎にグループ化して列の最小値を求める	df.groupby(column)[column2].min()
等間隔の配列を作る＼	np.arange(開始値, 終了値, 等差)
棒グラフをミディアムブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumblue')
既存の配列を元に全要素が初期値の配列	np.full_like(aArray, 初期値)
折れ線グラフの色を青に設定する	plt.plot(データ列x, データ列y, color='blue')
データフレームから指定した２列を取り出す	df[[column, column2]]
リストとリストについての散布図に赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームの中の列をリストを境界値としてビニングする	pd.cut(df[col], aList)
イエローグリーン色のヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
データフレームの信頼区間を描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームを複数の列によって並べ、、更新する	df.sort_values(by=column, inplace=True)
折れ線グラフを色付きの破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
ミスティローズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
year年month月day日hour時の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームのカラムの未入力値を最大値に設定する	df[col].fillna(df[col].max())
ファイルを改行なしで一行ずつ読み込む	f.readline()
折れ線グラフの色をホワイトスモークにセットする	plt.plot(データ列x, データ列y, color='whitesmoke')
棒グラフをカーキ色として描画する	plt.bar(データ列x, データ列y, color='khaki')
折れ線グラフの三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
データフレームの未入力値を直前の値に指定する	df.fillna(method='ffill')
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='turquoise')
2つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
黄色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellow')
データフレームの棒グラフをカテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
データフレームのカラムが正規分布からどの程度、尖っているか見る	df[col].skew()
データ列の分散	ds.var()
大バツ印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
散布図に青い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
ヒストグラムをコーンズシルク色で描画する	plt.hist(データ列, color='cornsilk')
折れ線グラフの色をアクアに指定する	plt.plot(データ列x, データ列y, color='aqua')
赤い右三角マーカーをリストとリストの散布図にプロットする	plt.plot(データ列x, データ列y, marker='>', c='r')
散布図の大バツマーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
折れ線グラフの色をマゼンタに指定する	plt.plot(データ列x, データ列y, color='magenta')
横棒プロットの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
折れ線グラフに青い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
散布図に黒いクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='k')
ターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='turquoise')
リストとリストについて散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
横棒グラフをモカシン色として描画する	plt.barh(データ列x, データ列y, color='moccasin')
集合が空か調べる	len(aSet) == 0
散布図のポイント印を赤色にする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
散布図をフクシア色を用いて描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
データフレームのn行目をドロップして、入れ替える	df.drop(n, axis=0, inplace=True)
ヒストグラムの色をミディアムオーキッドに設定する	plt.hist(データ列, color='mediumorchid')
ダークグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkgreen')
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategray'
データフレームを表示するとき小数点以下の表示精度を設定する	pd.set_option('precision', n)
辞書をカウンタにする	collections.Counter(aDict)
nを二進表現に変換する	bin(n)
option: グラフの色をレモンシフォンに指定する	color = 'lemonchiffon'
データフレームのリストカラムの欠損値を中央値で埋める	df[aList].fillna(df[aList].median())
オブジェクトは浮動小数点数クラスか	isinstance(obj, float)
折れ線グラフの色をドジャーブルーにセットする	plt.plot(データ列x, データ列y, color='dodgerblue')
縦棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
option: マーカーの色をホワイトスモークにする	markerfacecolor = 'whitesmoke'
実線の折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid')
縦棒グラフを紺碧色を使って描画する	plt.bar(データ列x, データ列y, color='azure')
折れ線グラフの色をネイビーにする	plt.plot(データ列x, データ列y, color='navy')
グラフの横軸のラベルを設定する	plt.xlabel('x軸ラベル')
横棒グラフの色をパウダーブルーにする	plt.barh(データ列x, データ列y, color='powderblue')
データ列の中にある文字列の合計を数える	ds.isin([value]).sum()
マッピングをチェーンマップに変換する	collections.ChainMap(aDict)
欠損値を含めてデータフレームを列の値でグループ化する	df.groupby(column, dropna=False)
重複していない行のみを抽出する	df[not df.duplicated(keep=False)]
今日が金曜日か調べる	datetime.datetime.today().weekday() == 4
ヒストグラムの色をダークバイオレットに設定する	plt.hist(データ列, color='darkviolet')
散布図をダークオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='darkorchid')
データフレームを二つの列で昇順に破壊的に並べる	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ラインを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
データ列を箱ひげ図として描画する	plt.boxplot(データ列)
アイボリー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
散布図の色をミディアムバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='mediumvioletred')
文字列の示すエンコーディングとして既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
折れ線グラフのダイアモンド印の色を変更する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
ダークスレートブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
列の標本標準偏差を求める	ds.std()
option: サンディーブラウンにグラフの色を指定する	color = 'sandybrown'
データフレームを各列毎に集約し、、列の平均値を算出する	df.groupby(column)[column2].mean()
浮動小数点数を実数で除算して、切り捨てる	x // y
青い四角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='b')
スカイブルー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
シャルトリューズ色としてヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
ファイルパスからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
データフレームのカラムの中にいくつ欠損値が存在するか数える	df[col].isna().sum()
大文字と小文字を交換する	s.swapcase()
折れ線グラフの色をライトグレーにセットする	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームから指定した三つの列のみ取り出す	df[[column, column2, column3]]
数列とイテラブルについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
シルバーにヒストグラムの色を指定する	plt.hist(データ列, color='silver')
二つのデータフレームを横方向に一つにする	pd.concat([df, df2], axis=1)
折れ線グラフのバツマーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
option: グラフの色をゴールドにセットする	color = 'gold'
配列の累積積を求める	np.cumprod(aArray)
二つの文字列をケースを無視して比較する	s.casefold() < s2.casefold()
散布図にrgbの左三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
棒グラフをマゼンタ色を用いて描画する	plt.bar(データ列x, データ列y, color='magenta')
両端キューの中に値が含まれてるかどうか調べる	element in deq
右にn個分双方向キューの順番を回転させる	deq.rotate(n)
BOM付きでファイルを書き込み用に開く]	open(filepath, mode='w', encoding='utf_8_sig')
文字列を末尾から部分文字列で区切る	s.rsplit(sub)
データフレームを百の位で四捨五入して、整数型にする	df.round(-2).astype(int)
棒グラフの色をロージーブラウンにする	plt.bar(データ列x, データ列y, color='rosybrown')
ヒストグラムの色をローングリーンに指定する	plt.hist(データ列, color='lawngreen')
データフレームを列でグループ化して個数を計算する	df.groupby(column).count()
列をリストにする	df[column].values.tolist()
イテラブルのイミュータブルなセットを使う	frozenset(iterable)
数を実数で割った余り	x % y
ダイアモンド印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
棒グラフをハニーデュー色として描画する	plt.bar(データ列x, データ列y, color='honeydew')
クラス分類のアキュレシーを求める	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
横方向に３つのデータフレームを合体させる	pd.concat([df, df2, df3], axis=1)
文字列をセンタリングにする	s.center(文字列幅)
茶色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
辞書の値数を見る	len(aDict)
データフレームを列によってで破壊的に並べ直す	df.sort_values(by=column, inplace=True)
スプリンググリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ライトブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightblue')
n個にリストをビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
折れ線グラフをコーンフラワーブルー色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図の色をグリーンにする	plt.scatter(データ列x, データ列y, color='green')
箱ひげ図をプロットして平均値を加える	plt.boxplot(データ列, showmeans=True)
平均値で列の欠損値を補う	ds.fillna(ds.mean())
タプルのイミュータブルな集合を見る	frozenset(iterable)
option: ライトスレイグレーを用いる	color = 'lightslategrey'
文字列の開始位置番目と終了位置番目の間に部分文字列がない	s.find(sub, start, end) == -1
文字列を白色でプリントできる文字列に変換する	f'\033[37m{value}\033[0m'
棒グラフをインディアンレッド色で描画する	plt.bar(データ列x, データ列y, color='indianred')
ダークオリーブグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkolivegreen')
ライトスカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightskyblue')
散布図のマーカーの太さを設定する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
JSON形式の文字列をロードする	json.loads(jsonString)
折れ線グラフの色を暗い赤に設定する	plt.plot(データ列x, データ列y, color='darkred')
縦棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
日付データが土曜日か	aDate.weekday() == 5
折れ線グラフの右三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
正接の逆数	math.atan(x)
データフレームを散布図で可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
列によってデータフレームを並べ、、更新する	df.sort_values(by=column, inplace=True)
option: マーカーの色をネイビーにする	markerfacecolor = 'navy'
散布図を赤い下三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
変数が0に近づくときの数式の極限値を求める	sympy.limit(e, z, 0)
モデルを学習する	model.fit(説明変数, 目的変数)
カウンタ同士でインターセクション演算する	aCounter & aCounter2
正規化されたヒストグラムを描画する	plt.hist(データ列, density=True)
縦棒プロットを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
からデータフレームを読む	pd.read_excel(filename)
棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
option: マーカーの色をミディアムスレートブルーにする	markerfacecolor = 'mediumslateblue'
赤い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
青緑色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
データフレームの各グループごとの分散を求める	df.groupby(column).var()
折れ線グラフの▽マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='v', markersize=2.0)
グラフの縦軸の軸名をuntitledに設定する	plt.ylabel('y軸ラベル')
横棒グラフの色をミディアムターコイズにする	plt.barh(データ列x, データ列y, color='mediumturquoise')
ダーク・スラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
散布図をフクシア色で描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
文字列のサフィックスから安全に部分文字列を取り除く	s.removesuffix(sub)
データフレームのリスト列の相関行列ケンドール相関係数で	df[aList].corr(method='kendall')
両端キューが空である	len(deq) == 0
データフレームのNaNが含まれる箇所に色を付ける	df.style.highlight_null()
カラムのモード	ds.mode()
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
オブジェクトからプロパティを取り除く	delattr(obj, プロパティ名)
データフレームの指定された列のみ抽出する	df[[column]]
Pandasでタイムスタンプ型のデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
リストとリストについての散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームのリストカラムの欠損値をxで埋める	df[aList].fillna(x)
option: アイボリーに色を設定する	color = 'ivory'
二つの変数をそれぞれ定義する	x, y = i, j
nが-9以上、9以下か	-9 <= n <= 9
アイボリー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ivory')
入力ストリーム全体を行単位で分割して読み込む	f.readlines()
データ列の欠損値を最小値で埋める	ds.fillna(ds.min())
データ列のNaNを平均で補う	ds.fillna(ds.mean())
文字列をカンマを用いて区切って、列挙する	s.split(',')
データ列の欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
データフレームの重複する行のみを抽出する	df[df.duplicated(keep=False)]
データフレームを各カラム毎にグループ分けし、文字列というグループの個数を計算する	df.groupby(column).size()[s]
青い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='b')
集合が空かどうか調べる	len(aSet) == 0
散布図をデピンク色で描画する	plt.scatter(データ列x, データ列y, color='deeppink')
日付時刻データををn週間後に進める	aDatetime + datetime.timedelta(weeks=n)
破壊的に昇順に複数の列によって表を並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
実行環境の再帰の最大回数	sys.getrecursionlimit()
データフレームの中央値を算出する	df.median()
リストの要素を昇順にソートする	sorted(aList, reverse=False)
折れ線グラフの星マーカーを赤くする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
データフレームのカラムの中に文字列がある	df[col].isin([value])
タプルをインデント幅nのJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
オブジェクトがリストの要素でないかどうか調べる	element not in aList
暗い赤にヒストグラムの色を設定する	plt.hist(データ列, color='darkred')
JSONファイルのfをデータに変換する	json.load(fin)
JSONファイルのファイル入力を読み込んで、dataとする	data = json.load(fin)
に箱ひげ図を用いてデータフレームを見る	sns.boxplot(x='カテゴリ列', y='列', data=df)
折れ線グラフの色をチョコレートに設定する	plt.plot(データ列x, データ列y, color='chocolate')
主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
option: 線の種類を実線に指定する	linestyle = 'solid'
青い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
文字列の左端から部分文字列を取り除く	s.lstrip(sub)
option: マーカーの色を青にする	markerfacecolor = 'blue'
集合を組に変換する	tuple(aSet)
散布図に黒い四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c='k')
四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s')
折れ線グラフの右三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
スチールブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
option: マルーン色を使用する	color = 'maroon'
キーが辞書に存在するかどうか調べる	key in aDict
両端キューの中に要素が含まれてるか調べる	element in deq
ファイルを開き]、追加ストリームを使う	open(filepath, mode='a')
データフレームを二つの列によって降順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
ゼロ埋めされた複素数型の配列	np.zeros(要素数, dtype=bool)
データフレームを丸めて、整数にする	df.round().astype(int)
データフレームの指定した列	df[column]
淡い茶色色で散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
文字列はPythonのキーワードかどうか	keyword.iskeyword(s)
データフレームを列によって集約してそれぞれのグループごとの分散を算出する	df.groupby(column).var()
option: 追加用にする	mode = 'a'
ライムグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
数値を黄色でプリントする	print(f'\033[33m{value}\033[0m')
折れ線グラフをプロットする	plt.plot(データ列x, データ列y)
データフレームのリストカラムの欠損値を平均値で補う	df[aList].fillna(df[aList].mean())
折れ線グラフを赤い破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
グリッドを実線にする	plt.grid(linestyle='solid')
データフレームをJSONLファイルにインデックスを付けずに書き込む	df.to_csv(filename, index=None)
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgray')
イエローグリーン色を用いてヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
折れ線グラフの色を暗い赤にセットする	plt.plot(データ列x, データ列y, color='darkred')
パールゴールデンロッド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
文字列リストにイテラブルを変換して、'改行でつなげる	'\n'.join(map(str, iterable))
インディゴ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indigo')
散布図の丸印の色を変更する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
グリーンにヒストグラムの色を指定する	plt.hist(データ列, color='green')
折れ線グラフを紺碧色で描画する	plt.plot(データ列x, データ列y, color='azure')
データフレームのリストカラムがどの程度、分散しているか見る	df[aList].var()
整数nがリストのどれかか	n in aList
データフレームのグループごとの最小値を求める	df.groupby(column).min()
option: マーカーの色をオレンジにする	markerfacecolor = 'orange'
データフレームを列によってソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
変数がマイナス無限大に近づくとき数式の極限値を計算する	sympy.limit(e, z, -oo)
折れ線グラフをライトコーラル色を用いて描画する	plt.plot(データ列x, データ列y, color='lightcoral')
折れ線グラフの右三角マーカーの太さを設定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
JSON形式の文字列をデータに変換する	json.loads(jsonString)
実数の逆双曲線正弦を求める	math.asinh(x)
文字列内にひとつでも空白が含まれる	any(c.isspace() for c in s)
青いヒストグラムを描画する	plt.hist(データ列, color='b')
ダークシアン色のヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
ディムグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
折れ線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
タプルの文字列が最初に見つかる場所	aTuple.index(element)
ピアソンの相関係数を使う	scipy.stats.pearsonr(データ列, データ列2)
横棒グラフをサドルブラウン色で描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
数列とリストについての散布図にrgbのクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
横棒グラフをカデットブルー色として描画する	plt.barh(データ列x, データ列y, color='cadetblue')
ヒストグラムを黄色色を用いて描画する	plt.hist(データ列, color='yellow')
新しいロバスト回帰モデルを用意する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
日付時刻データをエポック秒にする	aDatetime.timestamp()
横棒グラフをスラグレー色として描画する	plt.barh(データ列x, データ列y, color='slategrey')
文字列内にひとつでも英数字があるか調べる	any(c.isalnum() for c in s)
改行せず二つの文字列をプリントする	print(value, value2, end='')
rgbのポイントマーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='.', c=rgb)
文字列をシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
option: ディープスカイブルーにグラフの色を指定する	color = 'deepskyblue'
折れ線グラフの色をダークオーキッドにセットする	plt.plot(データ列x, データ列y, color='darkorchid')
散布図を菱形印で描画する	plt.scatter(データ列x, データ列y, marker='D')
下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v')
縦棒グラフをタン色を用いて描画する	plt.bar(データ列x, データ列y, color='tan')
散布図に赤いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
データフレームの中の列を中央値で分割する	pd.qcut(df[col], 2)
ゼロ埋めされた行列	np.zeros(行数, 列数)
散布図の色をマゼンタにする	plt.scatter(データ列x, データ列y, color='magenta')
日付時刻データは日付時刻データと同時か	aDatetime == aDatetime2
データフレームのリストカラムの要約統計量を計算する	df[aList].describe()
赤い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
列をキーにして二つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
文字列がリストに含まれるか調べる	element in aList
濃く色をグラフの描画で使う	sns.set(pallete='deep')
オーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orchid')
散布図のクロスマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
データフレームの指定された列をリストとして取り出す	df[column].values.tolist()
円グラフでデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
全ての数字	string.digits
横棒グラフをパープル色として描画する	plt.barh(データ列x, データ列y, color='purple')
棒グラフをデピンク色で描画する	plt.bar(データ列x, データ列y, color='deeppink')
option: グラフの色をブラックに設定する	color = 'black'
列から重複を取り除く	set(iterable)
辞書からキーで指定したエントリをポップする	aDict.pop(key)
Pandasで、書式fmtとしてデータフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col], format=fmt)
データフレームを表示するとき小数点以下n桁まで表示可能なようにする	pd.set_option('precision', n)
折れ線グラフをライトイエロー色で描画する	plt.plot(データ列x, データ列y, color='lightyellow')
散布図をゴールデンロッド色として描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
散布図をミディアムパープル色として描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
文字列を右から空白で分割する	s.rsplit()
横棒グラフをダークサーモン色として描画する	plt.barh(データ列x, データ列y, color='darksalmon')
option: マーカーの大きさを変更する	markersize = 2.0
浮動小数点数を千の位で丸める	round(x, -3)
ヒストグラムを一点鎖線で描く	plt.hist(データ列, linestyle='dashbot')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
折れ線グラフの色を白に設定する	plt.plot(データ列x, データ列y, color='white')
本日が火曜日か確認する	datetime.datetime.today().weekday() == 1
折れ線グラフをレベッカパープル色として描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
プロットのy座標を対数に変更する	plt.yscale('log')
全要素を1で初期化した配列	np.ones(要素数, dtype=np.int)
リストとイテラブルの散布図を描いて▽マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
モカシン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='moccasin')
棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
データ列の中の欠損値の数を数える	ds.isna().sum()
文字列がn回繰り返すイテラブル	itertools.repeat(element, n)
箱ひげ図を描画して平均値を加える	plt.boxplot(データ列, showmeans=True)
タイムスタンプデータの年数	aDatetime.year
ヒストグラムをパウダーブルー色で描画する	plt.hist(データ列, color='powderblue')
組を並べ変える	sorted(aTuple)
辞書から最後の項目をポップする	aDict.popitem()
折れ線グラフのマーカーを星にする	plt.plot(データ列x, データ列y, marker='*')
アンティークホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='antiquewhite')
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
両端キューから値を取り出す	deq.remove(element)
二つのデータフレームを異なる列をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
ネイビー色のヒストグラムを描画する	plt.hist(データ列, color='navy')
文字列内にひとつでも大文字があるかどうか調べる	any(c.isupper() for c in s)
クリムゾン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
インデックスでデータフレームをソートする	df.sort_index()
文字列を最後の部分文字列で分割した時の後半の文字列	s.rpartition(sub)[-1]
option: グラフの色をブラウンに指定する	color = 'brown'
耐火レンガ色のヒストグラムを描画する	plt.hist(データ列, color='firebrick')
データフレームの中で何行重複するか確認する	df.duplicated().sum()
option: 右三角マーカーを描画する	marker = '>'
nがn2の倍数でないか調べる	n % n2 != 0
リストと配列の散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
実数を万の位で四捨五入する	round(x, -4)
データフレームを各列と列の組み合わせ毎にグループ化して、分散を求める	df.groupby([column, column2], as_index=False).var()
線グラフをダークグリーン色として描画する	plt.plot(データ列x, データ列y, color='darkgreen')
配列を文字列リストに変換して、部分文字列で結合する	sub.join(map(str, iterable))
数式の部分分数化する	sympy.apart(e)
文字列の接尾辞は部分文字列か確認する	s.endswith(sub)
乱数シードをnで初期化する	random.seed(n)
カラムの各データが何回出現するか見る	df[col].value_counts()
フォレストグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='forestgreen')
イテラブルにイテラブルを続けた列	itertools.chain(iterable, iterable2)
折れ線プロットにデータラベルを設定する	plt.plot(データ列x, データ列y, label='ラベル')
n番目の列をデータフレームから除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
散布図をライトコーラル色で描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
データフレームを各列毎に集約して列の標準偏差を計算する	df.groupby(column)[column2].std()
文字列内に大文字が含まれるか調べる	any(c.isupper() for c in s)
データフレームを列によってによって破壊的にソートする	df.sort_values(by=column, inplace=True)
縦棒グラフをダークシアン色で描画する	plt.bar(データ列x, データ列y, color='darkcyan')
日付データにn週間を加える	aDate + datetime.timedelta(weeks=n)
ヒストグラムと勾配ブースティングとしてクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
リストの末尾にオブジェクトを追加する	aList.append(element)
横棒グラフを紺碧色で描画する	plt.barh(データ列x, データ列y, color='azure')
データフレームのカラムが何曜日か確認する	df[col].dt.weekday_name
JSONフォーマットの文字列を読み込む	json.loads(jsonString)
スクリプトファイルのフォルダ名	os.path.dirname(os.path.abspath(__file__))
option: ダークシアンにフォントの色を設定する	color = 'darkcyan'
文字列のn番目を使う	s[n]
カテゴリ列でグループ化して、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
日付時刻データは何秒か知る	aDatetime.second
ダークスレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
データフレームからカテゴリデータのカラム名一覧	df.select_dtypes('object').columns
option: 行列のデータ型を指定する	dtype = np.int8
オブジェクトはバイト列クラスかどうか調べる	isinstance(obj, bytes)
集合に要素を追加する	aSet.add(element)
ファイルパスの拡張子を見る	os.path.splitext(filepath)[1].lstrip('.')
アンサンブル学習でクラス分類をする	sklearn.ensemble.VotingClassifier()
option: グラフの色をペールグリーンに変更する	color = 'palegreen'
散布図の左三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
データフレームを列によってグループ化して、それぞれのグループごとの分散を求める	df.groupby(column).var()
ヒストグラムの色を黄色に設定する	plt.hist(データ列, color='yellow')
白いグリッド線を引く	plt.grid(color='w')
散布図の丸印の大きさを指定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
各列毎にデータフレームを集約してカラムの最大値を計算する	df.groupby(column)[column2].max()
イテラブルと配列についての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
折れ線グラフのバツ印の色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
小数点数のk進対数	math.log(x, k)
データフレームの中の列を分割数nで分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
符号なし８ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.uint8)
スクリプトファイルと同じフォルダのファイルのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
折れ線グラフの色をオリベドラブに指定する	plt.plot(データ列x, データ列y, color='olivedrab')
折れ線グラフをミディアムオーキッド色で描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
乱数生成系列をnで固定化する	random.seed(n)
データフレームを関数によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
ダイアモンド印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='D')
最大値と最小値として揃える	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
option: マーカーの色をライムにする	markerfacecolor = 'lime'
散布図に黒い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
データフレームの中に文字列が存在するか	df.isin([value])
破壊的にデータフレームを列によって降順にソートする	df.sort_values(by=column, ascending=False, inplace=True)
ダークシアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
モードでデータ列の欠損値を置換する	ds.fillna(ds.mode().iloc[0])
デピンク色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
エクセルファイルファイルのn番目のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
配列の全要素を指定の値にする	aArray[:, :] = 指定の値
データフレームの中で何行、重複するか確認する	df.duplicated().sum()
ヒストグラムをバリーウッド色として描画する	plt.hist(データ列, color='burlywood')
折れ線グラフの色をフクシアに設定する	plt.plot(データ列x, データ列y, color='fuchsia')
データフレームを表示するとき、小数点以下の表示精度を設定する	pd.set_option('precision', n)
横軸を対数目盛に変更する	plt.xscale('log')
青紫色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
データフレームのカラムの分散を計算する	df[col].var()
カウンタを少ない順番に列挙する	aCounter.most_common()[::-1]
右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>')
全要素を０で初期化した行列	np.zeros(行数, 列数)
データフレームの中で、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
行列の演算をする	import numpy as np
ダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D')
散布図をフクシア色として描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
エラーを出力する	sys.stderr
option: 先頭の行をカラムの名前に変更する	header = 0
今日をISO形式の文字列にする	datetime.datetime.today().isoformat()
データフレームの列は正規分布からどの程度、尖っているか見る	df[col].skew()
横棒グラフの色をゴーストホワイトにする	plt.barh(データ列x, データ列y, color='ghostwhite')
option: グラフの色をネイビーに指定する	color = 'navy'
折れ線グラフの色をゴールドに設定する	plt.plot(データ列x, データ列y, color='gold')
リストをひとつ置きに得る	aList[::2]
行列の累積和を計算する	np.cumsum(aArray)
データフレームの中の列をビニングする	pd.cut(df[col], aList)
横棒グラフの色をライムにする	plt.barh(データ列x, データ列y, color='lime')
データフレームを1000の位で丸めて、整数型にする	df.round(-3).astype(int)
イテラブルを2回あわせたデカルト積を得る	itertools.product(iterable, repeat=2)
データ列の値が欠損値か	ds.isna()
散布図に赤い星マーカーを用いる	plt.plot(データ列x, データ列y, marker='*', c='r')
線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgray')
上位集合もしくは等しいか調べる	aSet > aSet2
'A'列によってデータフレームをグループ化する	df.groupby('A')
最大最小を用いてデータを正規化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
ヒストグラムを上限から下限までの範囲で描画する	plt.hist(データ列, range=(start, end))
プログラムのファイルの名前を知る	sys.argv[0]
線グラフの色をダークゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s)
リストと配列の散布図にrgbの右三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフに黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
スタックが空であるかどうか	len(deq) == 0
タプルの平均を求める	sum(aTuple)/len(aTuple)
option: スチールブルーにグラフの色を設定する	color = 'steelblue'
折れ線グラフの左三角印を黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
棒グラフの色をスプリンググリーンにする	plt.bar(データ列x, データ列y, color='springgreen')
分類結果の再現率を計算する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
option: ミスティローズにグラフの色を指定する	color = 'mistyrose'
'A'列によってデータフレームをまとめた表を求める	df.groupby('A')
タイムスタンプをインスタンス化する	datetime.datetime(年, 月, 日, 時, 分, 秒)
データフレームのカラムの中にあるの合計を数える	df[col].isin([value]).sum()
折れ線グラフの色をミディアムブルーに設定する	plt.plot(データ列x, データ列y, color='mediumblue')
棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
組をひとつ飛ばしで取り出す	aTuple[::2]
線グラフをパープル色として描画する	plt.plot(データ列x, データ列y, color='purple')
散布図の色をダークスレートブルーにする	plt.scatter(データ列x, データ列y, color='darkslateblue')
ファイルにxを文字列にして書き込む	f.write(str(x))
文字列をゼロ埋めする	s.zfill(文字列幅)
データフレームから指定された二つの列のみ取り出す	df[[column, column2]]
ヒストグラムをスカイブルー色として描画する	plt.hist(データ列, color='skyblue')
データフレームから型リストで指定されたデータ型の列を選択する	df.select_dtypes(include=typeList)
グラフの色をパステル調にする	sns.set(pallete='pastel')
グレーにヒストグラムの色を指定する	plt.hist(データ列, color='grey')
書き込みモードでファイルを開き]、fとする	f = open(filepath, mode='w')
横棒グラフの色をグレーにする	plt.barh(データ列x, データ列y, color='gray')
配列を等しい量になるようにビン数nでビニングする	pd.qcut(aArray, n)
組の中の最大値	max(aTuple)
データフレームの列の各データ値の出現数	df[col].value_counts()
データフレームの中の列と列に重複があれば、消す	df.drop_duplicates(subset=column)
文字列を文字コードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
列の一意な値の個数	df[col].nunique()
ヒストグラムの色を紺に設定する	plt.hist(データ列, color='darkblue')
ベクトルの累積積を求める	np.cumprod(aArray)
ヒストグラムをクリムゾン色を用いて描画する	plt.hist(データ列, color='crimson')
折れ線グラフをオレンジレッド色で描画する	plt.plot(データ列x, データ列y, color='orangered')
データフレームから重複したデータをドロップして、インプレイスする	df.drop_duplicates(inplace=True)
option: ターコイズを使用する	color = 'turquoise'
TSVファイルからカンマ区切りのファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
主成分分析で濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
データフレームのリスト列の文字列を欠損値にする	df[aList].replace(s, np.nan)
リストとリストについての散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
グラフの縦横を指定する	plt.figure(figsize=(横幅, 高さ))
パウダーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='powderblue')
折れ線グラフの色をミディアムスレートブルーに設定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
赤い星マーカーをリストとイテラブルについての散布図に描く	plt.plot(データ列x, データ列y, marker='*', c='r')
xの小数点以下'4'桁までの文字列にする	':.4f'.format(x)
データフレームのヒストグラムを縦横に並べて、可視化する	sns.displot(df, x='列名', col='カテゴリ名', row='カテゴリ名')
折れ線グラフをダークサーモン色で描画する	plt.plot(データ列x, データ列y, color='darksalmon')
破線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
再帰の上限を増やす	sys.setrecursionlimit(1000000)
散布図の四角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
多次元データをt分布型確率的近傍埋め込み法で濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
バイオリン図を描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
3数の最小値	min(x, y, z)
option: グラフの色をアンティークホワイトに設定する	color = 'antiquewhite'
option: グラフの色をロイヤルブルーにする	color = 'royalblue'
データフレームのリストカラムの中にあると日付データの合計を数える	df[aList].isin([value, value2]).sum()
option: 色をライトスカイブルーに設定する	color = 'lightskyblue'
option: ミディアムオーキッドを使用する	color = 'mediumorchid'
rgbの星マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: 印を星に変える	marker = '*'
データフレームのカラムの中の欠損値の合計をカウントする	df[col].isna().sum()
ファイルをオープンして]、読み込みストリームを使う	open(filepath, mode='r')
文字列を日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
カラムの値を正規表現でreplに置換する	ds.replace(pattern, repl, regex=True)
L1ノルムでデータを正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
ファイルの拡張子	os.path.splitext(filepath)[1].lstrip('.')
線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
積み上げ横棒グラフを描画する	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
シーケンスの全順列を得る	itertools.permutations(iterable)
確率的勾配降下を用いて回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
散布図をミッドナイトブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
データフレームのリストカラムの未入力値を前の行の値に変更する	df[aList].fillna(method='ffill')
マップの内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
ダークスレートブルー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
データフレームのカラムを100の位で丸めて、整数型にする	df[col].round(-2).astype(int)
データフレームを欠損値を含めて列の値でグループ化する	df.groupby(column, dropna=False)
折れ線グラフの下三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
option: データ型として符号なし８ビット整数型を使う	dtype = np.uint8
option: オリーブ色を使う	color = 'olive'
マッピングのキーの一覧	aDict.keys()
カラムの中にいくつNaNがあるか数える	ds.isna().sum()
ベクトルの最大	np.max(aArray)
数が正の数か調べる	x > 0
両端キューに要素をエンキューする	deq.appendleft(element)
ブランチドアーモンド色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
折れ線グラフの線の種類を点線に設定する	plt.plot(データ列x, データ列y, linestyle='dotted')
整数nが配列のどれか	n in aArray
ライトゴールドロディイエローにヒストグラムの色を設定する	plt.hist(データ列, color='lightgoldenrodyellow')
ゲインズボロ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gainsboro')
シーケンスから配列を作る	np.array(iterable)
option: シスル色を使う	color = 'thistle'
散布図をライトスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
散布図の色をホットピンクにする	plt.scatter(データ列x, データ列y, color='hotpink')
新しい部分的最小二乗回帰モデルを作る	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
ベクトルは何次元か調べる	aArray.ndim
現在が水曜日か調べる	datetime.datetime.today().weekday() == 2
ターコイズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
目盛り線	plt.grid(alpha=0.5)
何回まで再帰ができるかを	sys.getrecursionlimit()
option: グラフの色をパパイヤウィップに設定する	color = 'papayawhip'
ファイルからディレクトリ名を見る	os.path.dirname(filepath)
ヒストグラムをライトスチールブルー色で描画する	plt.hist(データ列, color='lightsteelblue')
データフレームから指定されたデータ型のカラム名の一覧を見る	df.select_dtypes(型).columns
EUCで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
列の各データ値の出現回数	ds.value_counts()
青い実線で配列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
マッピングからキーの値	aDict.get(key)
ライトグレー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
option: 色をダークゴールデンロッドに設定する	color = 'darkgoldenrod'
文字列は漢字	('\u4E00' <= ch <= '\u9FD0')
option: フォントの色をインディゴに設定する	color = 'indigo'
ライトブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
散布図に星印を使う	plt.scatter(データ列x, データ列y, marker='*')
ヒストグラムの色をスラグレーに設定する	plt.hist(データ列, color='slategray')
一方に含まれ他方に含まれない集合を求める	aSet.difference(aSet2)
列を文字列に変換して一つにする	''.join(map(str, iterable))
全要素を０で初期化したブール型の行列を作る	np.zeros(行数, 列数, dtype=np.int32)
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
プロットの用途をポスターに設定する	sns.set(context='poster')
option: 改行コードを動作環境依存に変更する	newline = None
文字列中にひとつでも非大文字が含まれるか調べる	any(not c.isupper() for c in s)
データ列の折れ線グラフを下三角マーカーを使用して描画する	plt.plot(データ列x, データ列y, marker='v')
変数を太字にする	f'\033[1m{value}\033[0m'
データフレームの中に文字列が存在するか調べる	df.isin([value])
実数を切り上げて整数に変換する	math.ceil(x)
散布図に赤いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
ミディアムブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
option: フォントの色をダークスレートブルーにセットする	color = 'darkslateblue'
折れ線グラフをパウダーブルー色として描画する	plt.plot(データ列x, データ列y, color='powderblue')
２つの文字列が同じでない	s != s2
ヒストグラムの色をダークシアンに設定する	plt.hist(データ列, color='darkcyan')
散布図の星印の色を変える	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
浮動小数点数の複素数を算出する	complex(x)
棒グラフをサンディーブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='sandybrown')
カウンタを辞書に変換する	dict(aCounter)
辞書の項目数を得る	len(aDict)
横棒グラフをインディアンレッド色で描画する	plt.barh(データ列x, データ列y, color='indianred')
多次元データを主成分分析でパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
データフレームの重複する行数のマスク	df.duplicated()
ふたつのマップを合体する	aDict | aDict2
ヒストグラムの色をダークカーキに変更する	plt.hist(データ列, color='darkkhaki')
データフレームを'A'列の値ごとにグループ化して列挙する	[(name, group) for name, group in df.groupby('A')]
折れ線グラフに三角印を用いる	plt.plot(データ列x, データ列y, marker='^')
散布図をグリーン色で描画する	plt.scatter(データ列x, データ列y, color='green')
データフレームの列を折れ線グラフを用いて作図する	plt.plot(df[column], df[column])
横棒グラフの色をパパイヤウィップにする	plt.barh(データ列x, データ列y, color='papayawhip')
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgrey')
UNIXコマンドtextを実行する	os.system(text)
ヒストグラムを白色で描画する	plt.hist(データ列, color='white')
rgbの左三角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='<', c=rgb)
タイムスタンプデータの曜日を整数で使う	aDatetime.weekday()
項目名が辞書上で定義済みか調べる	key in aDict
本日の日付	datetime.date.today()
棒グラフをグリーンイエロー色で描画する	plt.bar(データ列x, データ列y, color='greenyellow')
黒い下三角マーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='v', c='k')
文字列を正規表現によって置き換える	re.sub(pattern, newsub, s)
タプルをナンバリングする	enumerate(aTuple)
リストを逆さにする	reversed(aList)
リストと数列について散布図を描画して星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
文字列を区切りで分割して、文字列リストに変換する	s.split(sep)
データフレームからn行をランダムに抽出する	df.sample(n)
データフレームのインデックス名をまとめて、nameからname2に付け直す	df.rename(index={name: name2})
カウンタから最も頻出な項目の件数	aCounter.most_common()[1]
データフレームをインデックスを付けずにJSONLファイルに保存する	df.to_csv(filename, index=None)
縦棒グラフをフォレストグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='forestgreen')
データフレームの列がx以上の行を抽出する	df[df[column] >= x]
option: ライトスレイグレーにグラフの色を指定する	color = 'lightslategray'
ホワイトスモーク色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
ヒストグラムの色をカデットブルーに設定する	plt.hist(データ列, color='cadetblue')
散布図をアクアマリン色で描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
データ列を三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
データフレームを'A'列で小さい順に並べ直す	df.sort_values(by='A', ascending=True)
散布図に下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v')
データフレームを2つのカラムによってソートする	df.sort_values(by=['A', 'B'])
折れ線グラフのマーカーをポイントにする	plt.plot(データ列x, データ列y, marker='.')
文字列の先頭で正規表現にASCII限定としてマッチするか確認する	re.match(pattern, s, flags=re.ASCI)
右三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='>')
凡例を表示する	plt.legend()
黒いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
環境がWindowsか調べる	sys.platform.startswith('win32')
二つの列でデータフレームをソートする	df.sort_values(by=['A', 'B'])
色付きの点線としてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
カウンタをリセットする	aCounter.clear()
柱状図のビン数を設定する	plt.hist(データ列, bins=区関数)
折れ線グラフに黒い星印を描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='k')
option: 白を用いる	color = 'white'
数値をマゼンタでプリントする	print(f'\033[35m{value}\033[0m')
ヒストグラムをシエナ色で描画する	plt.hist(データ列, color='sienna')
データフレームのカラムの中に文字列があるか判定する	df[col].isin([value])
option: ティール色を使う	color = 'teal'
実数のn乗の実数剰余を計算する	pow(x, n, y)
リストの末尾にリストを追加する	aList.extend(aList2)
文字列の最後から空白を消す	s.rstrip(' ')
折れ線グラフの右三角マーカーの線幅を指定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ファイルを追加モードで開いて]、fとする	f = open(filepath, mode='a')
文字列中に日本語が使われているか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
option: シーグリーン色を使う	color = 'seagreen'
折れ線グラフの色をタンに設定する	plt.plot(データ列x, データ列y, color='tan')
データフレームのリストカラムの中央値	df[aList].median()
一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
折れ線グラフの色をダークオリーブグリーンに設定する	plt.plot(データ列x, データ列y, color='darkolivegreen')
ライトゴールドロディイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
文字列の先頭でASCII限定として正規表現にマッチさせる	re.match(pattern, s, flags=re.ASCI)
数列とイテラブルについての散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
文字列は印字できるか	s.isprintable()
ヒストグラムをペールグリーン色で描画する	plt.hist(データ列, color='palegreen')
year年month月day日hour時をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=day, hour=hour)
データフレームを列名リストによってソートし、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
０で全要素を初期化した三二ビット整数型の行列	np.zeros(行数, 列数, dtype=np.int16)
表から重複する行を落とす	df.drop_duplicates()
列名リストでデータフレームをソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
折れ線グラフの下三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
要素が辞書の値に含まれていないかテストする	element not in aDict.values()
データフレームのリストカラムの中に文字列とがあるか	df[aList].isin([value, value2])
リストの末尾からn番目以前の要素を取り出す	aList[:-n]
サンディーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
既存のファイルをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
option: 色をスレートブルーに設定する	color = 'slateblue'
データフレームを破壊的に列によってによって並べる	df.sort_values(by=column, inplace=True)
ファイルをバイナリモードとしてオープンする]	open(filepath, mode='rb')
配列の型	aArray.dtype()
実数のn乗の浮動小数点数剰余	pow(x, n, y)
文字列全体が正規表現に大文字・小文字を無視してマッチするか見る	re.fullmatch(pattern, s, flags=re.IGNORECASE)
エポック秒を日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
データフレームの中にいくつ欠損値があるか数える	df.isna().sum()
マゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='magenta')
2を底とする実数の対数	math.log2(x)
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgray')
option: ダークカーキ色を使用する	color = 'darkkhaki'
スクリプトファイルのディレクトリ名	os.path.dirname(os.path.abspath(__file__))
棒グラフを暗い赤色を用いて描画する	plt.bar(データ列x, データ列y, color='darkred')
散布図に黒い菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c='k')
option: 色をブルーバイオレットに設定する	color = 'blueviolet'
データフレームを列によって昇順に破壊的に整列する	df.sort_values(by=column, ascending=True, inplace=True)
Pandasで、エポック秒の文字列からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
配列は何次元か調べる	aArray.ndim
タイムスタンプデータにn週間分、加算する	aDatetime + datetime.timedelta(weeks=n)
単位行列	np.eye(行数, 列数)
文字列がタプルの要素か調べる	element in aTuple
JSONL形式のファイルからデータフレームを読む	pd.read_json(filename, orient='records', lines=True)
第２コマンド引数	sys.argv[1]
スタックから要素を取り除く	deq.remove(element)
散布図の色をカーキにする	plt.scatter(データ列x, データ列y, color='khaki')
option: ライトスレイグレーを使う	color = 'lightslategray'
ネイビーにヒストグラムの色を設定する	plt.hist(データ列, color='navy')
option: ライトゴールドロディイエロー色を使用する	color = 'lightgoldenrodyellow'
リストとリストについての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
ファイルパスを開いて]、書き込みストリームを使う	open(filepath, mode='w')
変数が無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, oo)
データ列の値が正規分布にしたがって発生する確率を使う	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
右三角印として折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
多次元データを主成分分析としてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
整数を文字列に変換する	str(x)
ヒストグラムをホワイトスモーク色で描画する	plt.hist(データ列, color='whitesmoke')
ヒストグラムの色をミディアムスプリンググリーンに設定する	plt.hist(データ列, color='mediumspringgreen')
option: 色をマゼンタに指定する	color = 'magenta'
散布図の右三角マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
データフレームをグループ化して、ヒストグラムで可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
TSVを読み込む	pd.read_csv(filename, sep='\t')
赤いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
ヒストグラムを描画し、合計を1にする	plt.hist(データ列, density=True)
n個に等量でリストをビン分割する	pd.qcut(aList, n)
データフレームの欠損値を後の行の値に指定する	df.fillna(method='bfill')
ネイビー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='navy')
データフレームのカラムを散布図にする	sns.scatterplot(data=df, x='列名', y='列名')
実数から実数を減算する	x - y
データフレームを列によってグループ化してそれぞれのグループごとの最小値を求める	df.groupby(column).min()
option: フォントの色をリネンに設定する	color = 'linen'
データフレームの中にある文字列と文字列の合計をカウントする	df.isin([value, value2]).sum()
行列の列ごとの標準偏差	np.std(aArray, axis=0)
散布図に丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o')
option: コロンを区切り記号で使用する	sep = ':'
イテラブルを文字列リストに変換して、空白で連結する	' '.join(map(str, iterable))
ヒストグラムでカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
散布図でデータフレームの列を可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
横棒グラフの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
リストをビン数nでビン分割してnamesのラベルをつける	pd.cut(aList, n, labels=names)
散布図を赤くする	plt.scatter(データ列x, データ列y, color='r')
rgbの四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
日付時刻データが日付時刻データより前か調べる	aDatetime < aDatetime2
option: 文字列をセパレータで使う	sep = s
option: コロンをセパレータで使う	sep = ':'
リストとリストについて散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
データフレームの列の文字列長を列として求める	df[col].str.len()
リストを等量でn個に分割する	pd.qcut(aList, n)
データフレームで何行、重複するか見る	df.duplicated().sum()
文字列の末尾から部分文字列を探す	s.rfind(sub)
ふたつの集合がセットと互いに素	aSet.isdisjoint(aSet2)
整数nの十六進数表現を見る	hex(n)
ファイルからファイル名を使う	os.path.basename(filepath)
K最近傍法を用いて回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
変数を黒色で表示する	print(f'\033[30m{value}\033[0m')
ファイルをSJISとして追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
option: コーラルを使用する	color = 'coral'
最後の部分文字列で文字列を分けたときの左側の文字列	s.rpartition(sub)[0]
データフレームのリスト列の欠損値をxに設定する	df[aList].fillna(x)
文字列を隔離する	sys.intern(s)
ミントクリーム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mintcream')
データフレームの列の文字列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
カウンタの最頻出の文字列を求める	aCounter.most_common()[0]
列名リストによってデータフレームを小さい順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
タイムスタンプデータが水曜日	aDatetime.weekday() == 2
両端キュー中の数値のインデックスを使う	deq.index(element)
散布図を茶色色として描画する	plt.scatter(データ列x, データ列y, color='brown')
データ列の値をreplに正規表現patternで一度に置換する	ds.replace(pattern, repl, regex=True)
データフレームをグループ化して、ヒストグラムでグラフ化する	sns.histplot(df, x='列名', hue='カテゴリ名')
ヒストグラムをスプリンググリーン色で描画する	plt.hist(データ列, color='springgreen')
オブジェクトは浮動小数点数か確認する	isinstance(obj, float)
実線を使ってヒストグラムを描画する	plt.hist(データ列, linestyle='solid')
散布図に星印を加える	plt.scatter(データ列x, データ列y, marker='*')
ヒストグラムの色を白に設定する	plt.hist(データ列, color='white')
折れ線グラフを半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームを列名リストで並べる	df.sort_values(by=column)
列の未入力値を最大値に設定する	ds.fillna(ds.max())
ヒストグラムをサンディーブラウン色で描画する	plt.hist(データ列, color='sandybrown')
棒グラフをバリーウッド色で描画する	plt.bar(データ列x, データ列y, color='burlywood')
散布図の色をサンディーブラウンにする	plt.scatter(データ列x, データ列y, color='sandybrown')
横軸の最大・最小値を変更する	plt.xlim(最小値, 最大値)
リストの末尾に要素を追加する	aList.append(element)
ゴーストホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
インディアンレッドにヒストグラムの色を設定する	plt.hist(データ列, color='indianred')
ポイントマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
等量でビン数nでデータ列を分割する	pd.qcut(ds, n)
折れ線グラフの色をフローラルホワイトに設定する	plt.plot(データ列x, データ列y, color='floralwhite')
縦棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
n個に配列をビン分割する	pd.cut(aArray, n)
option: ポイント印を使用する	marker = '.'
説明変数と目的変数を使ってモデルを学習する	model.fit(説明変数, 目的変数)
日付時刻データの秒数を見る	aDatetime.second
EUCとして既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
nとn2の商	n / n2
あらかじめケースを無視してパターンをコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
列からn要素、サンプリングする	random.sample(iterable, k=n)
データフレームを複数の列をキーにしてソートする	df.sort_values(by=column)
数列とリストの散布図を描画してマーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
標準出力がパイプか調べる	not sys.stdout.isatty()
散布図に左三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='<')
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
最大長nの双方向キューを新規生成する	collections.deque(maxlen=n)
線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
配列とリストについての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
パパイヤウィップ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
データフレームの第一四分位数	df.quantile(0.25)
実線にラインを変更する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームの分散	df.var()
データフレームのn行目を破壊的に削除する	df.drop(n, axis=0, inplace=True)
nが5で割り切れるかどうか調べる	n % 5 == 0
縦棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
配列の行ごとの平均値	np.mean(aArray, axis=1)
赤い▲印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
カテゴリで色付けして、に箱ひげ図でデータフレームを可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームの列の値がリストに含まれるデータを抽出する	df[df[column].isin(aList)]
ヒストグラムをオレンジ色として描画する	plt.hist(データ列, color='orange')
破壊的に大きい順にデータフレームを列によってソートする	df.sort_values(by=column, ascending=False, inplace=True)
ヒストグラムの色をパープルにする	plt.hist(データ列, color='purple')
文字列の開始位置以降に部分文字列が含まれないか調べる	s.find(sub, start) == -1
データフレームを列によってグループ分けして、それぞれのグループごとの分散を求める	df.groupby(column).var()
サドルブラウンにヒストグラムの色を設定する	plt.hist(データ列, color='saddlebrown')
散布図の右三角印を青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
データフレームを表示するとき、表示可能な最大列数を変更する	pd.set_option('display.max_columns', n)
本日をISO形式の文字列にする	datetime.datetime.today().isoformat()
正規表現に文字列の先頭でASCII限定としてマッチさせる	re.match(pattern, s, flags=re.ASCI)
クラス分類の予測精度をヒートマップとして見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
数式の因数分解を行う	sympy.factor(e)
日付時刻データの日付を使う	aDatetime.date()
N未満までの行列	np.arange(N)
折れ線グラフの色をサーモンに設定する	plt.plot(データ列x, データ列y, color='salmon')
三自然数の最小公倍数	math.lcm(n, n2, n3)
option: マーカーの色をライトイエローにする	markerfacecolor = 'lightyellow'
列からベクトルを作る	np.array(iterable)
８進数字を全部使う	string.octdigits
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
数値をアンダーライン付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
データフレームの列と列の相関行列ピアソン相関係数で	df[[column, column2]].corr(method='pearson')
散布図の四角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
マッピングから項目名の値をエラーなく参照する	aDict.get(key, None)
線グラフの色をライトコーラルに変更する	plt.plot(データ列x, データ列y, color='lightcoral')
カテゴリで色分けして、データフレームをにバイオリン図として可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
線グラフの色をホットピンクにする	plt.plot(データ列x, データ列y, color='hotpink')
折れ線グラフの四角印を黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
リストと配列について散布図を描画してマーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
Pandasで、フォーマットfmtでデータフレームのcollをdatetime64型に変換する	pd.to_datetime(df[col], format=fmt)
紺色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
リストの全値を取り除く	aList.clear()
一方に含まれ他方に含まれない集合	aSet.difference(aSet2)
グリーンイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームを表示するときカラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
option: グラフの色をダークスレートブルーにセットする	color = 'darkslateblue'
全シートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=None)
散布図の色をシーグリーンにする	plt.scatter(データ列x, データ列y, color='seagreen')
nがタプルのどれかか	n in aTuple
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, (行数, 列数))
文字列の開始位置から先に部分文字列が含まれないか調べる	s.find(sub, start) == -1
option: グラフの色を淡いピンク色に設定する	color = 'lightpink'
折れ線グラフの色をナバホホワイトに設定する	plt.plot(データ列x, データ列y, color='navajowhite')
散布図をイエローグリーン色を使って描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
明日の日付を使う	datetime.date.today() + datetime.timedelta(days=1)
真⊂かどうか調べる	aSet < aSet2
横棒グラフをミディアムバイオレットレッド色として描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
文字列の最後の文字を見る	s[-1]
縦棒グラフをダークターコイズ色として描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
predicateFuncが真とならないタプルの要素	itertools.dropwhile(predicateFunc, iterable)
データ列の欠損値を最頻値で埋める	ds.fillna(ds.mode().iloc[0])
横棒グラフを積み上げにする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
option: グラフの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
作画の背景色を白くする	sns.set(style='whitegrid')
リストのすべての要素をクリアにする	aList.clear()
棒グラフの色をグレーにする	plt.bar(データ列x, データ列y, color='grey')
option: グラフの色をオリーブに変更する	color = 'olive'
option: マーカーの色をシスルにする	markerfacecolor = 'thistle'
option: ヘッダを連番に指定する	header = None
オブジェクトは数値か調べる	isinstance(obj, (int,float))
データフレームの列の中に日付データが含まれるか調べる	df[col].isin([value])
データフレームを列名リストでで破壊的にソートする	df.sort_values(by=column, inplace=True)
データフレームのカラムを度数分布図にする	plt.hist(df[column])
散布図を黒いクロスマーカーで描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
リストとリストについての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
散布図の色をオリーブにする	plt.scatter(データ列x, データ列y, color='olive')
パウダーブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='powderblue')
アルファベットの大文字列	string.ascii_uppercase
option: ディムグレーにグラフの色を設定する	color = 'dimgrey'
スタッキングで回帰分析を行う	sklearn.ensemble.StackingRegressor()
データ列の秒を使う	ds.dt.second
散布図の色をモカシンにする	plt.scatter(データ列x, データ列y, color='moccasin')
データ列の折れ線グラフを大バツ印として描画する	plt.plot(データ列x, データ列y, marker='X')
ファイルを書き込みモードでオープンして]、fとする	f = open(filepath, mode='w')
データフレームのn行目をインプレイスで削除する	df.drop(n, axis=0, inplace=True)
データフレームを列によってグループ化して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
シスル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='thistle')
棒グラフの色をサドルブラウンにする	plt.bar(データ列x, データ列y, color='saddlebrown')
リストの末尾の値を使う	aList[-1]
折れ線グラフの星マーカーを青色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
リストのn番目からn2番目までの部分	aList[n:n2]
タプルを逆順にする	aTuple[::-1]
ヒストグラムを紺碧色で描画する	plt.hist(データ列, color='azure')
データフレームのカラムの分を求める	df[col].dt.minute
ダークゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフを青い点線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
深紅色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
柱状図の描画して正規化する	plt.hist(データ列, density=True)
JSONLファイルにデータフレームを書き込む	df.to_excel(filename)
option: バツマーカーを用いる	marker = 'x'
黒い四角マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='s', c='k')
実数の双曲線正弦	math.sinh(x)
線グラフを青緑色を用いて描画する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームを複数の列によって小さい順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
スノー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
データフレームのリスト列の中央値	df[aList].median()
文字列の開始位置と終了位置の間に部分文字列が含まれるか調べる	s.find(sub, start, end) != -1
散布図に左三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='<')
ヒストグラムを赤色で描画する	plt.hist(データ列, color='red')
散布図の色をアリスブルーにする	plt.scatter(データ列x, データ列y, color='aliceblue')
棒グラフをダークスラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategray')
連立方程式を解く	sympy.solve([e, e2])
リストを反転する	reversed(aList)
データ列を2つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
ミディアムオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumorchid')
散布図を星マーカーで描画する	plt.plot(データ列x, データ列y, marker='*')
option: プラムにグラフの色を設定する	color = 'plum'
配列とリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
リストを等量でビン数nで分割する	pd.qcut(aList, n)
棒グラフをライトグリーン色を使って描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
option: ミディアムオーキッドにフォントの色を設定する	color = 'mediumorchid'
ヒストグラムをコーンズシルク色として描画する	plt.hist(データ列, color='cornsilk')
両端キューを用意する	collections.deque()
option: グラフの色をダークグレーに設定する	color = 'darkgrey'
リストとリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
nのn2乗	n ** n2
リスト中の要素が全て真か	all(aList)
カーキ色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
option: グラフの色をディープスカイブルーに指定する	color = 'deepskyblue'
縦棒グラフをピーチパフ色を用いて描画する	plt.bar(データ列x, データ列y, color='peachpuff')
点線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データ列をカテゴリデータに変換する	ds.astype(object)
ファイルの絶対パスを使う	os.path.abspath(filepath)
暗い赤色を使ってヒストグラムを描画する	plt.hist(データ列, color='darkred')
データフレームを列の値でグループ化し、記述統計量を求める	df.groupby(column).describe()
イエローグリーン色でヒストグラムを描画する	plt.hist(データ列, color='yellowgreen')
赤い下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c='r')
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategray')
色付きの破線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: グラフの色をデピンクに設定する	color = 'deeppink'
option: ダークオリーブグリーンにグラフの色を変更する	color = 'darkolivegreen'
イテラブルの集合	set(iterable)
ダークオーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkorchid')
グラフ中で日本語を表示できるようにする	sns.set(font='IPAexGothic')
データフレームのリストカラムの分散を算出する	df[aList].var()
option: グラフの色をダークカーキに設定する	color = 'darkkhaki'
実数とyのノルムを求める	math.hypot(x, y)
データフレームのリストカラムの欠損値を最頻値で埋める	df[aList].fillna(df[aList].mode().iloc[0])
散布図のマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
option: グラフの色をスラグレーに設定する	color = 'slategrey'
データフレームの上n行	df.head(n)
パープル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='purple')
ダークオレンジ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
散布図を淡いピンク色色で描画する	plt.scatter(データ列x, データ列y, color='lightpink')
黒いダイアモンドマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
option: スラグレーにフォントの色を変更する	color = 'slategrey'
タプルの先頭のn要素を取り除く	aTuple[n:]
全要素が1の行列を作成する	np.ones(行数, 列数, dtype=np.int)
NaNも加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
データフレームのリストカラムのpercentパーセンタイルを求める	df[aList].quantile(percent/100)
タプルの要素を昇順にソートする	sorted(aTuple, reverse=True)
キューを空にする	deq.clear()
データフレームを表示するとき、ヘッダー行を左寄せに設定する	pd.set_option('colheader_justify', 'left')
棒グラフの色をミディアムスプリンググリーンにする	plt.bar(データ列x, データ列y, color='mediumspringgreen')
折れ線グラフの色を青緑に設定する	plt.plot(データ列x, データ列y, color='turquoise')
バツ印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='x')
グラフにy=0の点線を付ける	plt.axhline(y=0, linestyle='dotted')
ミスティローズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
データフレームの列が文字列で始まる行を取り出す	df[df[column].str.startswith(s)]
床	math.floor(x)
列をセットに変換する	set(iterable)
ヒストグラムの線の種類を破線に設定する	plt.hist(データ列, linestyle='dashed')
データフレームのリストカラムを整数に丸める	df[aList].round()
リストとリストについて散布図を描画して、右三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
散布図をローングリーン色として描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
データフレームが正規分布からどの程度、歪んでいるか見る	df.kurt()
等量でビン数nで配列をビン分割する	pd.qcut(aArray, n)
ファイルを文字コードtextで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
option: 暗い赤を用いる	color = 'darkred'
散布図をカーキ色で描画する	plt.scatter(データ列x, データ列y, color='khaki')
リストとリストについて散布図を描画して、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図の▽マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
フォレストグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
リストとイテラブルの散布図を描画して、星マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
バリーウッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='burlywood')
ヒストグラムをピンク色を使って描画する	plt.hist(データ列, color='pink')
アイボリー色のヒストグラムを描画する	plt.hist(データ列, color='ivory')
データフレームを列でグループ化して、それぞれのグループごとの件数を知る	df.groupby(column).size()
現在のミリ秒	int(time.time() * 1000)
データフレームの列の未入力値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
配列の最大値	np.max(aArray)
文字列を改行で分割し、文字列リストに変換する	s.splitlines()
データフレームのn行目を落とす	df.drop(n, axis=0)
散布図に右三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='>')
データ列を1000の位で丸める	ds.round(-3)
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgray')
横軸の目盛の表示値を変更する	plt.xticks(目盛りの値リスト)
ガンマ関数の絶対値に自然対数をとった値を求める	math.lgamma(x)
表データの指定した列を取り出す	df[column]
列をキーにして2つのデータフレームを内部結合する	pd.merge(df, df2, on=column, how='inner')
リストとリストの散布図を描画して、マーカーを菱形に設定する	plt.plot(データ列x, データ列y, marker='D')
マップを浅くコピーする	aDict.copy()
Pandasで、文字列を日付データに変換する	pd.to_datetime(s)
既存の配列をベースにして全要素が1の配列	np.ones_like(aArray)
文字列中に非英数字が含まれるかどうか調べる	any(not c.isalnum() for c in s)
データフレームの中にいくつ文字列が存在するか求める	df.isin([value]).sum()
文字コードtextでファイルパスをオープンする]	open(filepath, encoding=text)
散布図に黒い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='k')
折れ線グラフの右三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
折れ線グラフをデピンク色で描画する	plt.plot(データ列x, データ列y, color='deeppink')
カウンタのキーとカウントを列挙する	aCounter.items()
文字列中の平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
ミントクリーム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mintcream')
イエローグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
n個分両端キューの順序を右にローテンションする	deq.rotate(n)
データフレームの全カラムを散布図で図示する	sns.pairplot(df)
option: ８ビット整数型を使う	dtype = np.int8
棒グラフをアリスブルー色で描画する	plt.bar(データ列x, データ列y, color='aliceblue')
NaNも加えてデータフレームのカラムをダミー変数にする	pd.get_dummies(df[column], dummy_na=True)
データフレームから指定された二つの列を取り出す	df[[column, column2]]
縦棒グラフをミスティローズ色で描画する	plt.bar(データ列x, データ列y, color='mistyrose')
データフレームの指定された列を抽出する	df[[column]]
ゴールド色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
分子と分母から有理数を作成する	fractions.Fraction(分子, 分母)
折れ線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
棒グラフの色をディープスカイブルーにする	plt.bar(データ列x, データ列y, color='deepskyblue')
カテゴリで色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
option: グラフの色をカーキに変更する	color = 'khaki'
散布図の色をミディアムブルーにする	plt.scatter(データ列x, データ列y, color='mediumblue')
JSONLファイルに小数点以下3桁までデータフレームを保存する	df.to_csv(filename, float_format='%.3f')
縦棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
nのn2乗を算出する	n ** n2
リストをダミー変数にする	pd.get_dummies(iterable)
ふたつの集合の対称差	aSet.symmetric_difference(aSet2)
option: グラフの色をパウダーブルーに指定する	color = 'powderblue'
データフレームを複数の列の値によってグループ化する	df.groupby(columns)
縦棒グラフをミントクリーム色を使って描画する	plt.bar(データ列x, データ列y, color='mintcream')
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgrey')
option: 文字コードを文字コードtextに変更する	encoding = text
データフレームの行がnの行を選ぶ	df.loc[n]
データを両端キューから取り除く	deq.remove(element)
日付時刻データからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
列'A'と列'B'をキーとして2つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
散布図をミディアムターコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumturquoise')
散布図を紺色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
option: ビスク色を使う	color = 'bisque'
空行をプリントする	print()
ディープスカイブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
線グラフを白色で描画する	plt.plot(データ列x, データ列y, color='white')
ヒストグラムの色をモカシンに指定する	plt.hist(データ列, color='moccasin')
rgbの大バツマーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフの丸印を赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
マッピングのキーに対応した値	aDict.get(key)
ビン数nで等しい量になるようにリストをビン分割する	pd.qcut(aList, n)
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
散布図を四角マーカーを使って描画する	plt.scatter(データ列x, データ列y, marker='s')
イテラブルとデータ列の散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
散布図の右三角印を黒色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
値を赤色でプリントできる文字列に変換する	f'\033[31m{value}\033[0m'
データフレームを表示するとき、小数点以下をn桁に設定する	pd.set_option('precision', n)
リストとリストについて散布図を描いて、マーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
青い実線で配列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
書式fmtとして文字列をPandasの日付型に変換する	pd.to_datetime(s, format=fmt)
データフレームを二つの列によって並べてNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
option: ディムグレー色を用いる	color = 'dimgrey'
データフレームを複数の列でで破壊的にソートする	df.sort_values(by=column, inplace=True)
データフレームのカラムのpercent分位数	df[col].quantile(percent/100)
散布図を赤い左三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='<', c='r')
セットから何でもいいから一つ取り出す	aSet.pop()
オブジェクトの参照カウントを使う	sys.getrefcount(obj)
小数点数が無限大	math.isinf(x)
データ列の折れ線グラフを描画してラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
線グラフを色付きの点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
文字列の中の複数行対応として正規表現によるすべてのマッチを使う	re.findall(pattern, s, flags=re.MULTILINE)
option: グラフの色をミスティローズに変更する	color = 'mistyrose'
option: グラフの色をクリムゾンに設定する	color = 'crimson'
option: グラフの色をライトゴールドロディイエローに指定する	color = 'lightgoldenrodyellow'
主成分分析として多次元データを濃く次元に次元削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
逆順のキュー	reversed(deq)
データフレームを二つの列によってソートする	df.sort_values(by=['A', 'B'])
リストを逆順にする	aList[::-1]
列によって破壊的に昇順にデータフレームを並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
数式の積分を算出する	sympy.integrate(e)
行列の形	aArray.shape
option: パールバイオレットレッド色を使う	color = 'palevioletred'
折れ線グラフの色をミントクリームに設定する	plt.plot(データ列x, データ列y, color='mintcream')
小数点数は非数か調べる	math.isnan(x)
カーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='khaki')
文字列が全て数値かどうか調べる	s.isnumeric()
option: エンコーディングをUTF8に指定する	encoding = 'utf-8'
ゴールデンロッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
両端キューの要素をインプレースに逆順にする	deq.reverse()
文字列の先頭で正規表現にマッチするか見る	re.match(pattern, s)
文字列の開始位置から部分文字列を探す	s.find(sub, start)
ピアソン相関係数でデータフレームの相関行列	df.corr(method='pearson')
データフレームのカラムの値は欠損値	df[col].isna()
データフレームの列に重複があれば、マスクする	df.duplicated(subset=column)
数値を太字で表示できる文字列にする	f'\033[1m{value}\033[0m'
ヒストグラムをトマト色として描画する	plt.hist(データ列, color='tomato')
配列の列ごとの最大値	np.max(aArray, axis=0)
option: ライムを用いる	color = 'lime'
表から列を三つ選択する	df[[column, column2, column3]]
文字列を空白で区切って列挙する	s.split()
option: サーモンを使う	color = 'salmon'
線グラフの色をミッドナイトブルーに設定する	plt.plot(データ列x, データ列y, color='midnightblue')
折れ線グラフをダークマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
文字列の終了位置より前に部分文字列が含まれるか調べる	s.find(sub, 0, end) != -1
行列から重複を除いた行列を作る	np.unique(aArray)
グラフ中の文字化けを防ぐ	sns.set(font='IPAexGothic')
棒グラフの色をライトスレイグレーにする	plt.bar(データ列x, データ列y, color='lightslategray')
データフレームの列の分散	df[col].var()
グリーンイエロー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='greenyellow')
ヒストグラムの色をダークスラテグレーに指定する	plt.hist(データ列, color='darkslategray')
折れ線グラフの▲印を黒くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
実数とyの斜辺	math.hypot(x, y)
折れ線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームのリスト列の要約統計量	df[aList].describe()
ロージーブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='rosybrown')
リストとリストについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
無限数列	itertools.count()
文字列の先頭でパターンにマッチするか確認する	re.match(pattern, s)
散布図に黒い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='k')
ピンク色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
レモンシフォン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
平均線付き箱ひげ図を描画する	plt.boxplot(データ列, meanline=True)
縦棒プロットを描画して、左寄せする	plt.bar(ラベル列, データ列, align='edge')
カウンタを辞書で更新する	aCounter.update(aDict)
横棒グラフをスノー色で描画する	plt.barh(データ列x, データ列y, color='snow')
タプルの中の最大値を算出する	max(aTuple)
列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
ファイル名がTSVファイルか確認する	filename.endswith('.tsv')
オリーブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olive')
棒グラフの色をペルーにする	plt.bar(データ列x, データ列y, color='peru')
二つの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
折れ線グラフに左三角印を使う	plt.plot(データ列x, データ列y, marker='<')
Pandasで、フォーマットfmtでデータ列をタイムスタンプに変換する	pd.to_datetime(ds, format=fmt)
イテラブルから重複なくn個選ぶ	random.sample(iterable, k=n)
データフレームを'A'列でまとめたグループ	df.groupby('A')
option: フォントの色をパウダーブルーにセットする	color = 'powderblue'
棒グラフをブラウン色を使って描画する	plt.bar(データ列x, データ列y, color='brown')
散布図をディープスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
データ列のNaNを中央値で埋める	ds.fillna(ds.median())
部分文字列が文字列の開始位置からと終了位置の範囲に含まれるか調べる	s.find(sub, start, end) != -1
タン色としてヒストグラムを描画する	plt.hist(データ列, color='tan')
option: グラフの色をパープルに変更する	color = 'purple'
書き込み用にSJISとしてファイルパスをオープンする]	open(filepath, mode='w', encoding='shift_jis')
データフレームのリストカラムの各列間の相関係数	df[aList].corr()
折れ線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
要素がマップの値に含まれていないかどうか	element not in aDict.values()
カウンタから辞書を引く	aCounter.subtract(aDict)
クラス分類をK最近傍法で行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
データ列を指定した値で二値化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
Pandasで、データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
日付時刻データが木曜日	aDatetime.weekday() == 3
分類モデルの正確さを算出する	sklearn.metrics.accuracy_score(正解データ列, 予測データ列)
黒いグリッド線を引く	plt.grid(color='k')
横棒グラフを耐火レンガ色を使って描画する	plt.barh(データ列x, データ列y, color='firebrick')
文字列は全て識別子名か調べる	s.isidentifier()
黒い星マーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
option: バッファリングのサイズを設定する	buffering = 4096
option: ヘッダをnamesに変更する	header = names
棒グラフを青紫色で描画する	plt.bar(データ列x, データ列y, color='violet')
折れ線グラフにポイントマーカーを加える	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムをパレットトルコイズ色で描画する	plt.hist(データ列, color='paleturquoise')
ひとつでも非数字が文字列中に含まれる	any(not c.isdigit() for c in s)
y座標の最大・最小値を変更する	plt.ylim(最小値, 最大値)
▲マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^')
nがリストのいづれかかどうか調べる	n in aList
散布図をミディアムブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
xが一桁の数か調べる	-9 <= x <= 9
nが何桁か	len(str(n))
散布図に黒い左三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
option: ライトグリーンにグラフの色を設定する	color = 'lightseagreen'
二つの列を用いてデータフレームをソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
0からnまでの整数リストを作る	list(range(n+1))
折れ線グラフに三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^')
モジュールを検索するパスにディレクトリを追加する	sys.path.append(dir)
配列が何次元か調べる	aArray.ndim
データフレームから指定された４列だけ抽出する	df[[column, column2, column3, column4]]
データフレームの値を正規表現patternでまとめてreplに置き換える	df.replace(pattern, repl, regex=True)
オブジェクトは集合クラスか	isinstance(obj, set)
カウンタを用いる	import collections
リストと配列についての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームの中で列と列の重複をドロップする	df.drop_duplicates(subset=[column, column2])
データフレームの中の列を四分位数でビン分割する	pd.qcut(df[col], 4)
データ列が何月か調べる	ds.dt.month
行列は何のデータ型か調べる	aArray.dtype()
プロットの縦軸を対数に変更する	plt.yscale('log')
降順にデータフレームを複数の列によって破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームを列によって並べ直し、、行を振り直す	df.sort_values(columns).reset_index(drop=True)
標準出力のバッファをフラッシュする	sys.stdout.flush()
ベクトルと同じ大きさの空のベクトルを作成する	np.empty_like(aArray)
散布図をゴールド色で描画する	plt.scatter(データ列x, データ列y, color='gold')
ダイアモンドマーカーを使って散布図を描く	plt.plot(データ列x, データ列y, marker='D')
両端キューの先頭を使う	deq[0]
データを平均と分散として標準化を行う	sklearn.preprocessing.StandardScaler().fit_transform(データ)
棒グラフをゴールド色で描画する	plt.bar(データ列x, データ列y, color='gold')
グラフのパレットを色差別なくする	sns.set(pallete='colorblind')
option: グリーンイエローに色を設定する	color = 'greenyellow'
ヒストグラムをアイボリー色で描画する	plt.hist(データ列, color='ivory')
三数の最小値	min(x, y, z)
リストとリストの散布図を描画して、上三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: 追加モードを使う	mode = 'a'
文字列の右側から空白を消す	s.rstrip(' ')
列'A'と列'B'をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
文字列中の部分文字列の出現を数える	s.count(sub)
折れ線グラフの▲マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
横棒グラフの色をサンディーブラウンにする	plt.barh(データ列x, データ列y, color='sandybrown')
データフレームの棒プロットを各カテゴリごとに縦横に並べる	sns.catplot(kind='bar', y='列名', col='カテゴリ名', row='カテゴリ名', data=df)
非数値データ列をワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
イテラブルにイテラブルを続けたイテラブルを求める	itertools.chain(iterable, iterable2)
文字列の開始位置から終了位置の範囲で部分文字列をカウントする	s.count(sub, start, end)
列の中に存在するの合計を求める	ds.isin([value]).sum()
ヒストグラムをダークマゼンタ色で描画する	plt.hist(データ列, color='darkmagenta')
データフレーム全体を行で降順でソートする	df.sort_index(ascending=False)
option: グラフの色をグリーンイエローにセットする	color = 'greenyellow'
折れ線グラフの三角印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
リストの値を昇順に並べ変える	sorted(aList, reverse=True)
整数乱数の行列	np.random.randint(開始値, 終了値, (行数, 列数))
リストと配列について散布図を描いて丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
明日の日付	datetime.date.today() + datetime.timedelta(days=1)
データ列の欠損値をxに変更する	ds.fillna(x)
折れ線グラフの色を紺に設定する	plt.plot(データ列x, データ列y, color='darkblue')
デピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
データフレームからカラムを一つ選択する	df[[column]]
双方向キューの要素を逆順にする	deq.reverse()
y座標の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
ヒストグラムの色をイエローグリーンに変更する	plt.hist(データ列, color='yellowgreen')
整数nの八進文字列を求める	oct(n)[2:]
文字列を部分文字列で右から分割する	s.rsplit(sub)
棒グラフをカデットブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cadetblue')
散布図のダイアモンドマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
入力ストリーム全体をリストに変換する	[s.strip() for s in f.readlines()]
ライトスチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
JSONLファイルにデータフレームをSJISで保存する	df.to_csv(filename, encoding='shift_jis')
値を赤色でプリントする	print(f'\033[31m{value}\033[0m')
辞書からキーで指定された値を取り出す	aDict.pop(key)
データフレームをJSONLファイルに保存する	df.to_csv(filename)
列'A'と列'B'をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
書式を引数としてargsをフォーマットする	formatText.format(*args)
文字列は全て印字できる	s.isprintable()
マップの値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
文字列をカンマで区切って、列挙する	s.split(',')
実数を実数で除算して、切り捨てる	x // y
データフレームのカラムが何秒か見る	df[col].dt.second
option: ダークグレーにグラフの色を変更する	color = 'darkgray'
year年month月day日を日付に変換する	datetime.date(year=year, month=month, day=day)
要素を双方向キューの末尾に追加する	deq.append(element)
縦棒グラフを描画して、左寄せする	plt.bar(ラベル列, データ列, align='edge')
データフレームのカラムを散布図でグラフ化してカテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
散布図の星マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
散布図のポイントマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='#800080')
日付時刻データと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
文字列でフォーマットして日付時刻データを文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
ダークオレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkorange')
リストとリストについての散布図に黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームの列を丸めて、整数にする	df[col].round().astype(int)
折れ線グラフをローングリーン色として描画する	plt.plot(データ列x, データ列y, color='lawngreen')
データフレームの列がxより大きいデータを抽出する	df[df[column] > x]
実数を文字列に変換する	str(x)
エクセルファイルファイルから全てのシートを読み込む	pd.read_excel(filename, sheet_name=None)
両端キューの最大長	deq.maxlen
データフレームの重複する行数のマスクを求める	df.duplicated()
散布図にrgbの丸マーカーを用いる	plt.plot(データ列x, データ列y, marker='o', c=rgb)
線グラフをミディアムシアグリーン色として描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
データフレームを列によって昇順に並べ直す	df.sort_values(by=column, ascending=True)
折れ線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
nが負の数かどうか	n < 0
カテゴリ別に並べてデータフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
スクリプトのファイル名	sys.argv[0]
文字列はタプルに含まれないかどうか確認する	element not in aTuple
ヒストグラムをダークグリーン色を用いて描画する	plt.hist(データ列, color='darkgreen')
縦棒グラフの色をやわらかい青にする	plt.bar(データ列x, データ列y, color='cornflowerblue')
線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
クリムゾン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='crimson')
オリベドラブ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
グラフの描画で濃くカラーパレットを使う	sns.set(pallete='deep')
グラフのカラーパレットを明るくする	sns.set(pallete='bright')
横棒グラフをライトグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightgrey')
データフレームの列がxの行を抽出する	df[df[column] == x]
黒い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
相関係数を使う	scipy.stats.pearsonr(データ列, データ列2)
ベクトルの分散	np.var(aArray)
日付データと日付データの時間差を秒で求める	(aDate - aDate2).total_seconds()//60
散布図を三角印を使って描画する	plt.scatter(データ列x, データ列y, marker='^')
棒グラフをホットピンク色として描画する	plt.bar(データ列x, データ列y, color='hotpink')
紺色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: ナバホホワイトにグラフの色を変更する	color = 'navajowhite'
各列毎にデータフレームをグループ分けして列の平均値を計算する	df.groupby(column)[column2].mean()
列のユニークな値の個数を見る	df[col].nunique()
折れ線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
双方向キューの値を逆順にする	deq.reverse()
ヒストグラムの色を黄色に変更する	plt.hist(データ列, color='yellow')
option: ホットピンクにグラフの色を設定する	color = 'hotpink'
文字列にイテラブルを変換して、空白で連結する	' '.join(map(str, iterable))
データフレームを複数の列によってソートする	df.sort_values(by=column)
文字列の先頭の余分な空白を除く	s.lstrip()
nが-9以上9以下	-9 <= n <= 9
日付データが金曜日	aDate.weekday() == 4
新しい文字列で正規表現にマッチした文字列を置き換える	re.sub(pattern, newsub, s)
option: グレー色を使う	color = 'grey'
散布図をゴーストホワイト色で描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
文字列ひとつのりスト	[element]
数字が文字列内に含まれるか	any(c.isdigit() for c in s)
タプルをひとつ飛ばしで取り出す	aTuple[::2]
主成分分析としてパステル調に次元に次元削減する	sklearn.decomposition.PCA(n_components=N).fit_transform(多次元データ)
イテラブルとデータ列についての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームのカラムを散布図を用いてプロット化する	sns.scatterplot(data=df, x='列名', y='列名')
折れ線グラフをサーモン色を使って描画する	plt.plot(データ列x, データ列y, color='salmon')
ベージュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
棒グラフをホットピンク色で描画する	plt.bar(データ列x, データ列y, color='hotpink')
円グラフの割合を表示する	plt.pie(データ列, startangle=90, autopct='%.2f%%')
折れ線グラフをレモンシフォン色を用いて描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
イテラブルとリストについての散布図に赤いポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c='r')
折れ線グラフをティール色として描画する	plt.plot(データ列x, データ列y, color='teal')
散布図の三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
リストを縦軸、リストを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ホットピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
ヒストグラムの色をミスティローズに設定する	plt.hist(データ列, color='mistyrose')
ミディアムバイオレットレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumvioletred')
文字列がアルファベット	s.isalpha()
青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blue')
option: グラフの色をロージーブラウンに設定する	color = 'rosybrown'
散布図を黒い丸マーカーとして描く	plt.plot(データ列x, データ列y, marker='o', c='k')
散布図のダイアモンドマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
辞書のキーとその値を列挙する	aDict.items()
リストの文字列の位置をエラーなく見る	aList.index(element) if element in aList else -1
棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
タプルの先頭	aTuple[0]
両端キューは空か調べる	len(deq) == 0
改行なしに2つの実行結果をプリントする	print(value, value2, end='')
ライトスチールブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
回帰モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
タプルの値を並べ変える	sorted(aTuple)
折れ線グラフの色をミディアムスプリンググリーンに指定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
データフレームのカラムを100の位で四捨五入する	df[col].round(-2)
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
線グラフをカーキ色で描画する	plt.plot(データ列x, データ列y, color='khaki')
option: バツマーカーを使う	marker = 'x'
数列と数列についての散布図に黒い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='k')
ファイルパスの絶対ファイルパス	os.path.abspath(filepath)
文字列の左側から空白を取り除く	s.lstrip(' ')
決定木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
線グラフを赤い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
両端キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
ヒストグラムをインディゴ色として描画する	plt.hist(データ列, color='indigo')
散布図のマーカーを赤くする	plt.scatter(データ列x, データ列y, markerfacecolor='r')
折れ線グラフに青いクロス印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
JSON形式の文字列をデータに変換する	json.loads(b.decode('unicode-escape'))
option: グラフの色をナバホホワイトに指定する	color = 'navajowhite'
データフレームを複数の列の値によってグループ化し記述統計量を求める	df.groupby(columns).describe()
箱ヒゲ図を描き、、平均線を加える	plt.boxplot(データ列, meanline=True)
ライトスレイグレー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
線グラフをスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='slateblue')
散布図の色をダークカーキにする	plt.scatter(データ列x, データ列y, color='darkkhaki')
棒グラフをドジャーブルー色として描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
ゴールド色のヒストグラムを描画する	plt.hist(データ列, color='gold')
組を反転する	reversed(aTuple)
データ列のNaNを最頻値で埋める	ds.fillna(ds.mode().iloc[0])
棒グラフをビスク色を使って描画する	plt.bar(データ列x, データ列y, color='bisque')
文字列に列を変換して、カンマで連結する	','.join(map(str, iterable))
横棒グラフをマゼンタ色として描画する	plt.barh(データ列x, データ列y, color='magenta')
ミディアムブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumblue')
シルバー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='silver')
ヒストグラムをミッドナイトブルー色を用いて描画する	plt.hist(データ列, color='midnightblue')
option: 淡い茶色にフォントの色を設定する	color = 'tan'
option: 線の種類を破線に変更する	linestyle = 'dashed'
ダークカーキ色でヒストグラムを描画する	plt.hist(データ列, color='darkkhaki')
縦棒プロットを描画してラベルを左寄せする	plt.bar(ラベル列, データ列, align='edge')
ミディアムパープル色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
コーンズシルク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornsilk')
環境がウィンドウズ	sys.platform.startswith('win32')
ファイルのディレクトリ名	os.path.dirname(filepath)
線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
option: ターコイズにグラフの色を設定する	color = 'turquoise'
複数の列を用いて破壊的に大きい順にデータフレームをソートする	df.sort_values(by=column, ascending=False, inplace=True)
データ列の値を正規表現patternでまとめてreplに置き換える	ds.replace(pattern, repl, regex=True)
文字列をASCIIコード列にする	[ord(ch) for ch in s]
横棒グラフの色をレベッカパープルにする	plt.barh(データ列x, データ列y, color='rebeccapurple')
日付データは日付データより後ろかどうか調べる	aDate > aDate2
黒い三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
散布図をライトイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
option: エラーを無視する	errors = 'ignore'
ヒストグラムをゴールデンロッド色を用いて描画する	plt.hist(データ列, color='goldenrod')
TSVファイルファイル名がか調べる	filename.endswith('.tsv')
option: ▼印を描画する	marker = 'v'
パープル色を使ってヒストグラムを描画する	plt.hist(データ列, color='purple')
散布図のマーカーをポイントにする	plt.scatter(データ列x, データ列y, marker='.')
スラグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='slategrey')
データフレームを確認する	df.head()
折れ線グラフのラインスタイルを点線に指定する	plt.plot(データ列x, データ列y, linestyle='dotted')
y軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
オブジェクトはタプル型かどうか調べる	isinstance(obj, tuple)
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
TSV形式のファイルからデータフレームを読む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: グラフの色を小麦色に設定する	color = 'wheat'
一方に含まれ、他方に含まれない集合を求める	aSet.difference(aSet2)
実数はNaNかどうか調べる	math.isnan(x)
データフレームのカラムの欠損値を直後の値に設定する	df[col].fillna(method='bfill')
回帰モデルの訓練を開始する	model.fit(説明変数, 目的変数)
散布図を濃い青色で描画する	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームをCSVファイルから読む	pd.read_csv(filename, sep=',')
データフレームのn行目を抽出する	df.loc[n]
散布図をミディアムシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='mediumseagreen')
ヒストグラムの色をゴールドにする	plt.hist(データ列, color='gold')
カラムの最大幅をnに変更する	pd.set_option('max_colwidth', n)
option: マーカーの色をモカシンにする	markerfacecolor = 'moccasin'
日付データが月曜日	aDate.weekday() == 0
文字列を二分する	s.partition(sep)
タプルから項目名で指定された値をポップする	aDict.pop(key)
option: オレンジ色を使用する	color = 'orange'
ベージュ色でヒストグラムを描画する	plt.hist(データ列, color='beige')
ダークゴールデンロッド色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgoldenrod')
追加モードでファイルパスをオープンする]	open(filepath, mode='a')
文字列が文字列リストにあるかどうか調べる	s in aStringList
Pandasで、Pandasの日付型のデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
オブジェクトのイテレータ	iter(obj)
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgrey'
データフレームを各列と列の組み合わせ毎にグループ化し、、平均値を算出する	df.groupby([column, column2], as_index=False).mean()
2つの列でデータフレームをソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
やわらかい青色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をミディアムスレートブルーに設定する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフに青い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
0からN未満までの配列を初期化する	np.arange(N)
リストとリストについての散布図に黒い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
データフレームのカラムの欠損値を最大値で置き換える	df[col].fillna(df[col].max())
折れ線グラフに赤い大バツ印を描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
データ列をボックスチャートで描画する	plt.boxplot(データ列)
文字列の終了位置より前に部分文字列が含まれないか確認する	s.find(sub, 0, end) == -1
option: ライムグリーン色を使う	color = 'limegreen'
部分文字列が文字列中に含まれる	sub in s
日付データが日曜日か調べる	aDate.weekday() == 6
データフレームを未入力値を含めて列でグループ化する	df.groupby(column, dropna=False)
度数分布図でデータフレームの列を描画する	plt.hist(df[column])
横棒グラフを白くする	plt.barh(データ列x, データ列y, color='w')
棒グラフをダークカーキ色で描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
列の欠損値を最大値で埋める	ds.fillna(ds.max())
棒グラフの色を変更する	plt.bar(ラベル列, データ列, color=rgb)
異なる列をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
自然数個のものからk個取り出したときの並べ方の総数	math.perm(n, k)
複数のデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
行列の各要素の最大公約数	np.gcd(aArray, aArray2)
文字列を黄色でプリントする	print(f'\033[33m{value}\033[0m')
十六進表記の文字列を浮動小数点数に変換する	float.fromhex(十六進表記の文字列)
option: グラフの色をグレーに設定する	color = 'grey'
日付時刻データの時刻	aDatetime.hour
データフレームの欠損値を最頻値で置換する	df.fillna(df.mode().iloc[0])
option: ヘッダを連番に設定する	header = None
散布図をロージーブラウン色として描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
パウダーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='powderblue')
辞書の項目名の値	aDict[key]
散布図を黄色色として描画する	plt.scatter(データ列x, データ列y, color='yellow')
折れ線グラフの丸マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
nの桁数	len(str(n))
コロンで文字列を分割して、文字列リストに変換する	s.split(':')
データを最大値と最小値で正規化する	sklearn.preprocessing.MinMaxScaler(feature_range=(0, 1)).fit_transform(データ)
nをn2で割った余り	n % n2
今日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
散布図の星マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
折れ線グラフをローングリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='lawngreen')
文字列の終了位置以前に部分文字列が存在しないか	s.find(sub, 0, end) == -1
二つのデータフレームを縦向きに連結する	pd.concat([df, df2], axis=0)
文字列を日付データに変換する	pd.to_datetime(s)
データフレームのカラムの最頻値	df[col].mode()
折れ線グラフの色をディープスカイブルーにセットする	plt.plot(データ列x, データ列y, color='deepskyblue')
文字列が組に含まれるか	element in aTuple
折れ線グラフに赤いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
逆順の両端キュー	reversed(deq)
文字列をユニコードエスケープでバイト列に変換する	s.encode(encoding='unicode_escape')
二次元リストの転置行列	[list(x) for x in list(zip(*aList))]
rgbのダイアモンドマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ファイルをオープンして]、追加ストリームを求める	open(filepath, mode='a')
散布図の星マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
option: 四角マーカーを描画する	marker = 's'
プロットに鉛直方向の点線を付ける	plt.axvline(x=0, linestyle='dotted')
option: マーカーの色をディムグレーにする	markerfacecolor = 'dimgrey'
散布図の左三角マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
日付データと日付データの時間差が何秒か知る	(aDate - aDate2).total_seconds()
縦棒グラフをスラグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='slategray')
マッピングの値もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
ヒストグラムをミントクリーム色として描画する	plt.hist(データ列, color='mintcream')
リストと配列についての散布図に丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o')
横棒グラフを茶色色で描画する	plt.barh(データ列x, データ列y, color='brown')
option: フォントの色をリネンにセットする	color = 'linen'
文字列が全て英字か調べる	s.isalpha()
コーンフラワーブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
横棒グラフをブルーバイオレット色として描画する	plt.barh(データ列x, データ列y, color='blueviolet')
マッピングを計数器に変換する	collections.Counter(aDict)
リッジ回帰とロッソ回帰のハイブリットモデルを準備する	model = sklearn.linear_model.ElasticNet()
グリーンにヒストグラムの色をセットする	plt.hist(データ列, color='green')
option: シルバー色を使う	color = 'silver'
グラフに格子線を入れる	plt.grid(True)
カウンタのユニークな項目を列挙する	list(aCounter)
折れ線グラフの色をダークグレーに指定する	plt.plot(データ列x, データ列y, color='darkgrey')
散布図の色をシエナにする	plt.scatter(データ列x, データ列y, color='sienna')
データ列を丸める	ds.round()
集合から別の集合の要素を全て取り除く	aSet.difference_update(aSet2)
ミディアムパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
上限nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
オブジェクトのクラス	type(obj)
カテゴリ列で色分けして、データフレームを棒プロットにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
集合を変更不能なセットに変換する	frozenset(aSet)
半透明の実線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ライトサーモン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
スチールブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='steelblue')
option: オーキッドを使用する	color = 'orchid'
ヒストグラムをライトグリーン色で描画する	plt.hist(データ列, color='lightseagreen')
データ列を10の位で丸めて、整数型にする	ds.round(-1).astype(int)
等差数列を配列に変換する	np.arange(開始値, 終了値, 等差)
ヒストグラムの色をシーグリーンに設定する	plt.hist(データ列, color='seagreen')
三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
option: イエローグリーンに色を設定する	color = 'yellowgreen'
リスト中の文字列が最初に見つかる位置	aList.index(element)
option: マーカーの色をライトグリーンにする	markerfacecolor = 'lightseagreen'
option: ドジャーブルーにフォントの色を設定する	color = 'dodgerblue'
nかつn2	n and n2
データ列は正規分布からどの程度、歪んでいるか見る	ds.kurt()
日付データの月数を使う	aDate.month
破線で折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
文字列を部分文字列で分割して、文字列リストに変換する	s.split(sub)
ファイルを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
ヒストグラムをパープル色で描画する	plt.hist(データ列, color='purple')
n個にリストをビニングしてnamesのラベルをつける	pd.cut(aList, n, labels=names)
ヒストグラムのビンを変更する	plt.hist(データ列, bins=区関数)
データフレームから型を取り出す	df.select_dtypes(ty)
散布図をライトゴールドロディイエロー色で描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
文字列をコロンで分割して、文字列リストにする	s.split(':')
ヒストグラムの色をスレートブルーに設定する	plt.hist(データ列, color='slateblue')
データフレームの列の中に日付データと日付データがいくつあるか数える	df[col].isin([value, value2]).sum()
データフレームのリストカラムを丸める	df[aList].round()
データフレームの列の各データが何回出現するか確認する	df[col].value_counts()
散布図に丸マーカーを用いる	plt.scatter(データ列x, データ列y, marker='o')
実数に実数を加える	x + y
データフレームの列の中に文字列と日付データがある	df[col].isin([value, value2])
サポートベクターマシンを用いて回帰分析をする	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
文字列の無限の列	itertools.repeat(element)
データフレームのデータ型リスト	df.dtypes
色名からカラーコードを使う	matplotlib.colors.cnames[色名]
複数の列でデータフレームを並べて更新する	df.sort_values(by=column, inplace=True)
散布図をコーンフラワーブルー色で描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
ヒストグラムの色をスプリンググリーンにセットする	plt.hist(データ列, color='springgreen')
option: ディムグレーを用いる	color = 'dimgray'
ラインを半透明の点線として描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
rgbの△マーカーを用いて散布図をプロットする	plt.plot(データ列x, データ列y, marker='^', c=rgb)
作画のカラーパレットを指定する	sns.set(pallete=パレット名)
日付時刻データををn秒後に進める	aDatetime + datetime.timedelta(seconds=n)
日付データは日付データよりあとか調べる	aDate > aDate2
文字列リストをsepを区切りとして結合する	sep.join(aStringList)
実行時に標準出力がパイプかどうか確認する	not sys.stdout.isatty()
二つの辞書を階層化する	collections.ChainMap(aDict, aDict2)
青い三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: フォントの色をミディアムスプリンググリーンに指定する	color = 'mediumspringgreen'
データフレームの内の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
シャルトリューズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
ナバホホワイト色として線グラフを描画する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームを関数の値によって集約する	df.groupby(関数)
ヒストグラムをライトスレイグレー色で描画する	plt.hist(データ列, color='lightslategray')
横棒グラフの色をライトスカイブルーにする	plt.barh(データ列x, データ列y, color='lightskyblue')
アリスブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
option: グラフの色をフクシアに設定する	color = 'fuchsia'
文字列の最初から部分文字列を見つける	s.find(sub)
シーケンスの長さnの順列を得る	itertools.permutations(iterable, n)
最初の部分文字列で文字列を二つに区切って前半の文字列を使う	s.partition(sub)[0]
多次元データを主成分分析として淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
データフレームのカラムの未入力値を最頻値に変更する	df[col].fillna(df[col].mode().iloc[0])
option: 線の種類を一点鎖線に設定する	linestyle = 'dashbot'
文字列を最初の部分文字列で分割したときの残りの文字列を見る	s.partition(sub)[-1]
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
リストの先頭の要素を見る	aList[0]
実数を切り下げる	math.floor(x)
データフレームを'A'列によって昇順に並べて、更新する	df.sort_values(by='A', ascending=True, inplace=True)
データフレームの未入力値を最小値で補う	df.fillna(df.min())
日付時刻データと日付時刻データの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
ヒストグラムをライトスカイブルー色で描画する	plt.hist(データ列, color='lightskyblue')
ベクトルの平均値を計算する	np.mean(aArray)
データフレームのカラムの歪度	df[col].kurt()
option: グラフの色を青に設定する	color = 'blue'
ランダムフォレストで回帰分析をする	model = sklearn.ensemble.RandomForestRegressor()
線グラフの色をシエナにする	plt.plot(データ列x, データ列y, color='sienna')
数式を部分分数として展開する	sympy.apart(e)
配列と配列について散布図をプロットして星マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフの色をカーキに指定する	plt.plot(データ列x, データ列y, color='khaki')
nとn2が同じ値	n == n2
ロバストな線形回帰モデルを新規作成する	model = sklearn.linear_model.HuberRegressor()
リストと数列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
predicateFuncが真となるイテラブルの部分を取り除く	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフの下三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
ファイルを全部読み込む	f.read()
モカシン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
データフレームの中のNaNがある行を削除する	df.dropna()
option: ライトシアンを使う	color = 'lightcyan'
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='turquoise')
option: グラフの色をスノーに設定する	color = 'snow'
カウントプロットを描画する	sns.countplot(x='列名', data=df)
ヒストグラムを貝殻色を用いて描画する	plt.hist(データ列, color='seashell')
データ列のエポック秒からPandasの日付型に変換する	pd.to_datetime(ds, unit='s', utc=True)
散布図をコーラル色を用いて描画する	plt.scatter(データ列x, データ列y, color='coral')
レモンシフォンにヒストグラムの色を設定する	plt.hist(データ列, color='lemonchiffon')
タプルのオブジェクトが最初に見つかるインデックスを探す	aTuple.index(element)
縦棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
データフレームを100の位で四捨五入する	df.round(-2)
データフレームの最後n行を取り出す	df.tail(n)
自分自身をモジュールとしてを得る	sys.modules[__name__]
シアン色でヒストグラムを描画する	plt.hist(データ列, color='cyan')
散布図の上三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
散布図の印の太さを変える	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
option: グラフの色をサンディーブラウンに設定する	color = 'sandybrown'
リストの変遷を赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
格子線をプロットから表示しない	plt.grid(False)
散布図の色をシスルにする	plt.scatter(データ列x, データ列y, color='thistle')
浮動小数点数に実数を掛ける	x * y
両端キューに数値をエンキューする	deq.appendleft(element)
折れ線グラフの左三角マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
nがn2の倍数でないかどうか調べる	n % n2 != 0
文字列に日本語が含まれるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
オブジェクトは文字列型	isinstance(obj, str)
散布図を赤色で描画する	plt.scatter(データ列x, データ列y, color='red')
option: データ型を指定する	dtype = np.int16
耐火レンガ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='firebrick')
2つの文字列を表示する	print(value, value2)
データフレームのカラムの文字列を未入力値にする	df[col].replace(s, np.nan)
データフレームを関数によってまとめたグループ	df.groupby(関数)
赤い実線で数列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
JSONLファイルにデータフレームをファイルで書き込む	df.to_excel(filename)
線グラフを赤い点線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
リストとリストについて散布図を描画して、マーカーを三角に設定する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの色をフクシアに指定する	plt.plot(データ列x, データ列y, color='fuchsia')
option: グラフの色をミディアムスレートブルーにする	color = 'mediumslateblue'
横棒グラフの色をライトコーラルにする	plt.barh(データ列x, データ列y, color='lightcoral')
文字列中の正規表現を新しい文字列で置き換える	re.sub(pattern, newsub, s)
データ列を丸めて、整数型にする	ds.round().astype(int)
散布図の色をアイボリーにする	plt.scatter(データ列x, データ列y, color='ivory')
option: マーカーの色をミントクリームにする	markerfacecolor = 'mintcream'
データフレームを'A'列で小さい順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
散布図を黒い星マーカーとして描画する	plt.plot(データ列x, データ列y, marker='*', c='k')
ファイルから追加ストリームをオープンして]fとする	f = open(filepath, mode='a')
折れ線グラフをデピンク色として描画する	plt.plot(データ列x, データ列y, color='deeppink')
折れ線グラフの下三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
目盛り線	plt.grid(color='#800080')
両端キューの最後を見る	deq[-1]
グラフにx=0の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
実行時の標準出力の出力先がターミナルか調べる	sys.stdout.isatty()
日付時刻データが何月か知る	aDatetime.month
数値を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
データフレームを列名リストの値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(columns)]
実数の逆正弦	math.asin(x)
グリーンイエロー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='greenyellow')
option: ライトサーモンを使う	color = 'lightsalmon'
option: グラフの色をローングリーンに指定する	color = 'lawngreen'
データ列の推移を折れ線グラフで描画する	plt.plot(range(len(データ列)), データ列)
データ列の欠損値を最大値で置換する	ds.fillna(ds.max())
option: コーラル色を使用する	color = 'coral'
青い一点鎖線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ヒストグラムを一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
辞書の内部もコピーする	{k: copy.copy(v) for k, v in aDict.items()}
横棒グラフをペールグリーン色として描画する	plt.barh(データ列x, データ列y, color='palegreen')
データフレームの列を文字列に名前を変更する	df.rename(columns={column: name})
ヒストグラムと勾配ブースティングで回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
散布図の色をライトスチールブルーにする	plt.scatter(データ列x, データ列y, color='lightsteelblue')
データフレームの正規分布に対する左右対称性	df.kurt()
紫色で文字列をプリントする	print(f'\033[35m{value}\033[0m')
列によってデータフレームを並べ直して、下位を取り出す	df.sort_values(columns).tail(n)
option: グラフの色をダークグレーに変更する	color = 'darkgray'
線グラフの色をシーグリーンに変更する	plt.plot(データ列x, データ列y, color='seagreen')
全要素が初期値の行列	np.full((行数, 列数), 初期値, dtype=np.int)
ライトスチールブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
散布図に青い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
行列の平均値	np.mean(aArray)
グレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='gray')
サドルブラウン色のヒストグラムを描画する	plt.hist(データ列, color='saddlebrown')
新しい文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub)
プロットの凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
文字列を空白で区切って、整数リストに変換する	map(int, s.split())
predicateFuncを適用したとき真とならないシーケンスの要素を得る	itertools.dropwhile(predicateFunc, iterable)
グリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
ミディアムオーキッド色で散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
折れ線グラフを青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ダークカーキ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='darkkhaki')
数値を赤色で表示できる文字列に変換する	f'\033[31m{value}\033[0m'
折れ線グラフの色をアクアに設定する	plt.plot(データ列x, データ列y, color='aqua')
棒グラフを貝殻色で描画する	plt.bar(データ列x, データ列y, color='seashell')
散布図をインディアンレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='indianred')
日付データが金曜日か調べる	aDate.weekday() == 4
折れ線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
FIXME	np.linalg.eig(aArray)
n個の集まりからk個重複なく選ぶ方法	math.comb(n, k)
線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
option: グラフの色をダークマゼンタに指定する	color = 'darkmagenta'
ファイルを読む	pd.read_excel(filename)
データフレームから指定されたデータ型の列名の一覧	df.select_dtypes(型).columns
データフレームのリスト列の相関行列ピアソン積率相関係数を用いて	df[aList].corr(method='pearson')
データフレームを'A'列によって小さい順に破壊的に並べる	df.sort_values(by='A', ascending=True, inplace=True)
散布図の印をバツにする	plt.scatter(データ列x, データ列y, marker='x')
データフレームの列をダミー変数にする	pd.get_dummies(df[column])
棒グラフをライトグリーン色として描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
バリーウッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='burlywood')
リストのn番目からn2番目まで	aList[n:n2]
グループ化してデータフレームの散布図を縦横に並べる	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列', row='カテゴリ列')
レベッカパープル色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='rebeccapurple')
xを浮動小数点数型に変換する	float(x)
option: パープルにフォントの色を設定する	color = 'purple'
青い破線でリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
グレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
データフレームのNaNを平均にする	df.fillna(df.mean())
ヒストグラムの色をリネンに指定する	plt.hist(データ列, color='linen')
整数nの十六進表記を使う	hex(n)
マッピングから多重集合を作る	collections.Counter(aDict)
データフレームのカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
option: マーカーの色を変える	markerfacecolor = '#800080'
データフレームのカラムの中にいくつNaNがあるか数える	df[col].isna().sum()
リストの全要素をクリアにする	aList.clear()
predicateFuncがTrueとなる列の要素	itertools.takewhile(predicateFunc, iterable)
ヒストグラムの色をダークゴールデンロッドにセットする	plt.hist(データ列, color='darkgoldenrod')
新しい勾配ブースティング回帰木を用意する	model = sklearn.ensemble.GradientBoostingRegressor()
nから無限に数え上げるする	itertools.count(start=n)
option: グラフの色をダークグリーンに設定する	color = 'darkgreen'
日付データが土曜日か調べる	aDate.weekday() == 5
赤い星マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
三角マーカーを使い、折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの△マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ゼロ埋めされた複素数型のベクトル	np.zeros(要素数, dtype=bool)
カラムを1000の位で丸めて整数型にする	ds.round(-3).astype(int)
分数を使う	import fractions
三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^')
縦棒グラフをライトブルー色として描画する	plt.bar(データ列x, データ列y, color='lightblue')
線グラフの色をライトブルーに変更する	plt.plot(データ列x, データ列y, color='lightblue')
日付データは日付データより前	aDate < aDate2
折れ線グラフの菱形マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='D', markersize=2.0)
横棒グラフをダークレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='darkred')
線グラフをダークゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの色をオリーブに設定する	plt.plot(データ列x, データ列y, color='olive')
ロージーブラウン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
option: グラフの色をペルーに指定する	color = 'peru'
配列と数列について散布図を描画し、左三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
赤い左三角マーカーをデータ列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
二つのデータ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
n×n2の2次元リスト	[[0] * n for _ in range(n2)]
２つのカウンタの共通する値を計算する	aCounter & aCounter2
タプルのキーとその値をペアとして取り出す	aDict.items()
データ列が正規分布からどの程度、歪んでいるか調べる	ds.kurt()
列によってによってデータフレームを降順に並べる	df.sort_values(by=column, ascending=False)
ヒストグラムを二つ並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
option: グラフの色をダークカーキにセットする	color = 'darkkhaki'
データ列の値は欠損値	ds.isna()
日付データからn時間分、減らす	aDate - datetime.timedelta(hours=n)
ライトシアン色でヒストグラムを描画する	plt.hist(データ列, color='lightcyan')
双方向キューの末尾にシーケンスの各要素を追加する	deq.extend(iterable)
nが3で割り切れる	n % 3 == 0
茶色色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
データフレームの欠損値を最小値にセットする	df.fillna(df.min())
グラフの用途をスライドに設定する	sns.set(context='talk')
ヒストグラムの色をミディアムアクアマリンに変更する	plt.hist(データ列, color='mediumaquamarine')
ダイアモンド印を使用して散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
データフレームの列がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
要素が集合の要素でないかどうか調べる	element not in aSet
option: ペルー色を使う	color = 'peru'
アリスブルー色でヒストグラムを描画する	plt.hist(データ列, color='aliceblue')
データフレームのカラムの曜日名	df[col].dt.weekday_name
辞書からキーの値か、もしくは要素を得る	aDict.get(key, element)
トマト色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='tomato')
option: マーカーの色をナバホホワイトにする	markerfacecolor = 'navajowhite'
散布図の色をミディアムターコイズにする	plt.scatter(データ列x, データ列y, color='mediumturquoise')
イテラブルから新しい計数器を作る	collections.Counter(iterable)
データフレームの平均と信頼区間を描く	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
データフレームのn行目を削除して、インプレイスする	df.drop(n, axis=0, inplace=True)
散布図の左三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
ヒストグラムの色をグリーンイエローに指定する	plt.hist(データ列, color='greenyellow')
グラフをスライド用に変更する	sns.set(context='talk')
データフレームの相関行列をヒートマップで描画する	sns.heatmap(df.corr())
xの小数点以下'1'桁までをプリントする	print(':.1f'.format(x))
カーキ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
ヒストグラムをロージーブラウン色を用いて描画する	plt.hist(データ列, color='rosybrown')
オブジェクトは文字列クラスか	isinstance(obj, str)
折れ線グラフを青紫色で描画する	plt.plot(データ列x, データ列y, color='violet')
折れ線グラフの丸マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
コサインを求める	math.cos(x)
要素をセットに追加する	aSet.add(element)
グラフの補助目盛を有効にする	plt.minorticks_on()
データフレームの指定された列をリストにする	df[column].values.tolist()
カテゴリ列で色分けして、データフレームをにバイオリン図でプロット化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
option: マーカーの色をレモンシフォンにする	markerfacecolor = 'lemonchiffon'
option: マーカーの色をロイヤルブルーにする	markerfacecolor = 'royalblue'
データフレームのリストカラムのNaNを直後の値に設定する	df[aList].fillna(method='bfill')
折れ線グラフにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
データフレームのカラムのどの値が最も現れるか確認する	df[col].mode()
実行時の標準出力の出力先がターミナルか確認する	os.isatty(sys.stdin.fileno())
文字列を小文字に変換する	s.casefold()
縦棒グラフの色を珊瑚にする	plt.bar(データ列x, データ列y, color='coral')
閾値でバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
折れ線グラフの色をグリーンイエローに設定する	plt.plot(データ列x, データ列y, color='greenyellow')
オブジェクトのオブジェクト識別子を求める	id(obj)
TSV形式のファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
リストとリストについての散布図に赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', c='r')
データフレームを二つの列によってソートして、更新する	df.sort_values(by=['A', 'B'], inplace=True)
ヒストグラムをディムグレー色で描画する	plt.hist(データ列, color='dimgrey')
線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
nからn2の値を引いてnとする	n -= n2
小数点数の平方根	math.sqrt(x)
折れ線グラフの色をホットピンクに設定する	plt.plot(データ列x, データ列y, color='hotpink')
紺色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
要素がマップの値として含まれている	element in aDict.values()
オリーブ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
二つのオブジェクトは等しい	obj == obj2
縦棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームのカラムがどれだけ、分散しているか確認する	df[col].var()
新しい線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
２つの数値をコロンで区切ってプリントする	print(value, value2, sep=':')
日付時刻データをISO形式の文字列に変換する	aDatetime.isoformat()
JSONLファイルにデータフレームをインデックスを付けずに書き込む	df.to_csv(filename, index=None)
逆双曲線余弦	math.acosh(x)
淡いピンク色色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
棒グラフの色をシーグリーンにする	plt.bar(データ列x, データ列y, color='seagreen')
縦棒グラフをゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='goldenrod')
データフレームの中の列をビン数nとしてビンニングして、namesのラベルをつける	pd.cut(df[col], n, labels=names)
ランダムフォレストでクラス分類を行う	model = sklearn.ensemble.RandomForestClassifier()
リストをn個に等間隔でビン分割する	pd.cut(aList, n)
option: 改行しない	end = ''
データフレームの列の中にと文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
データフレームを各列と列の組み合わせ毎にグループ分けして、平均値を求める	df.groupby([column, column2], as_index=False).mean()
データフレームを列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
データフレームを各カテゴリごとに色付けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データフレームの中の欠損値の合計を数える	df.isna().sum()
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
option: ライム色を用いる	color = 'lime'
ピンク色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='pink')
データフレームを関数の値によってグループ化する	df.groupby(関数)
グラフ中のフォントを指定する	sns.set(font=フォント名)
折れ線グラフをダークターコイズ色で描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
プロットに水平方向の一点鎖線を設定する	plt.axhline(y=0, linestyle='dashbot')
option: マーカーの色を耐火レンガにする	markerfacecolor = 'firebrick'
オプションで、出力先を標準エラーに指定する	file = sys.stderr
ヒストグラムをミディアムシアグリーン色を用いて描画する	plt.hist(データ列, color='mediumseagreen')
実数を実数で割った余り	x % y
データフレームの列が正規分布からどの程度、尖っているか確認する	df[col].skew()
線グラフをモカシン色として描画する	plt.plot(データ列x, データ列y, color='moccasin')
オプションで、ファイルを用いる	file = sys.open(filename, 'w')
データ列の各値が何回出現するか確認する	ds.value_counts()
カラムの一覧	df.info()
文字列を改行で区切り文字列リストに変換する	s.splitlines()
データフレームの中にある日付データの合計を数える	df.isin([value]).sum()
エラーなくマッピングから項目名の値を見る	aDict.get(key, None)
リストを等間隔でn個に分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
ファイルを文字列の示すエンコーディングで書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
パラメータが無限大に近づくときの数式の極限値を計算する	sympy.limit(e, z, oo)
option: マーカーの色をダークシアグリーンにする	markerfacecolor = 'darkseagreen'
折れ線グラフをタン色で描画する	plt.plot(データ列x, データ列y, color='tan')
option: マーカーを星に設定する	marker = '*'
要素が辞書の値として含まれているか調べる	element in aDict.values()
散布図に右三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='>')
ライトスレイグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightslategray')
year年month月day日hour時minute分の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
浮動小数点数を２乗する	x ** 2
線グラフをダークスラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategray')
行列の最小	np.min(aArray)
オブジェクトがタプルに含まれないか確認する	element not in aTuple
データ列の欠損値を平均値に設定する	ds.fillna(ds.mean())
データフレームの値を正規表現patternでまとめて置換する	df.replace(pattern, repl, regex=True)
線グラフを青い一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
データフレームからカテゴリデータの列名の一覧を見る	df.select_dtypes('object').columns
option: ペルーを使う	color = 'peru'
最小値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].min())
UNIX秒のデータ列からPandasの日付型にする	pd.to_datetime(ds, unit='s', utc=True)
棒グラフの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
タプルから項目名の値か、もしくは要素を得る	aDict.get(key, element)
縦棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
折れ線グラフを半透明の破線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
シャルトリューズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
折れ線グラフをダーク・スラテグレー色で描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
データフレームをインデックスで並べる	df.sort_index()
option: グラフの色をフローラルホワイトに設定する	color = 'floralwhite'
データフレームを複数の列を用いてで破壊的にソートする	df.sort_values(by=column, inplace=True)
リストとリストについての散布図に赤い四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c='r')
ヒストグラムをスレートブルー色で描画する	plt.hist(データ列, color='slateblue')
ライム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
横棒グラフをゴーストホワイト色で描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
option: マーカーの色をバリーウッドにする	markerfacecolor = 'burlywood'
スピアマンの順位相関係数を求める	scipy.stats.spearmanr(データ列, データ列2)
RANSACでクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
横棒グラフをミディアムパープル色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
ルートのチェーンマップ	collections.ChainMap()
辞書に項目名が存在しないとき、要素を追加する	aDict.setdefault(key, element)
option: ミディアムターコイズにグラフの色を設定する	color = 'mediumturquoise'
ダークシアンにヒストグラムの色を設定する	plt.hist(データ列, color='darkcyan')
ケンドール順位相関係数でデータフレームの相関行列	df.corr(method='kendall')
エクセルファイルファイルからnという名前のシートをデータフレームとして読む	pd.read_excel(filename, sheet_name=n)
ゴーストホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
スプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='springgreen')
線グラフをダークサーモン色として描画する	plt.plot(データ列x, データ列y, color='darksalmon')
辞書を計数器に変換する	collections.Counter(aDict)
データフレームのリストカラムの欠損値を前の値に設定する	df[aList].fillna(method='ffill')
ダークスレートブルーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslateblue')
数列とイテラブルについての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
ヒストグラムをアクア色を用いて描画する	plt.hist(データ列, color='aqua')
文字列を最後の部分文字列で二分する	s.rpartition(sub)
数を小数点以下第一位で丸める	round(x, 1)
棒グラフの色をオリベドラブにする	plt.bar(データ列x, データ列y, color='olivedrab')
データフレームのカラムの未入力値を中央値に設定する	df[col].fillna(df[col].median())
赤い大バツマーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
縦軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
散布図に四角マーカーを用いる	plt.plot(データ列x, データ列y, marker='s')
ピアソンの相関係数を計算する	scipy.stats.pearsonr(データ列, データ列2)
オブジェクトのフィールドを削除する	delattr(obj, プロパティ名)
ラジアンの角度	math.degrees(x)
折れ線グラフに星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
xを印字できる文字列にする	ascii(x)
現在の分を求める	datetime.date.today().minute
ファイルを追加モードでオープンする]	open(filepath, mode='a')
option: グラフの色をシーグリーンに設定する	color = 'seagreen'
ふたつの集合の和集合	aSet.union(aSet2)
ゲインズボロ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gainsboro')
散布図をイエローグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='yellowgreen')
白い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='w')
イテラブルと数列についての散布図に赤いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
データフレームをグループ化し、それぞれの列に対し標準偏差を求める	df.groupby(column)[column2].std()
折れ線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
タプルのn番目以降の部分を得る	aTuple[n:]
キーで指定された項目をマップからポップする	aDict.pop(key)
カウンタをイテラブルとして更新する	aCounter.update(iterable)
複数行対応として正規表現で文字列を分割する	re.split(pattern, s, flags=re.MULTILINE)
折れ線グラフをダークマゼンタ色を使って描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
ターコイズにヒストグラムの色を設定する	plt.hist(データ列, color='turquoise')
自然数の順列の総数	math.perm(n)
option: ライトスチールブルー色を使用する	color = 'lightsteelblue'
option: ディムグレー色を使う	color = 'dimgrey'
データフレームの列の値をValueMapで一度に置き換える	df[col].replace(ValueMap)
ヒストグラムの色をペルーに設定する	plt.hist(データ列, color='peru')
折れ線グラフの右三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
プラットホームがMacOSか調べる	sys.platform.startswith('darwin')
データフレームを表示するとき、表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームを二つの列の値によってグループ化し要約統計量を算出する	df.groupby(['A', 'B']).describe()
option: マーカーの色をハニーデューにする	markerfacecolor = 'honeydew'
散布図をピーチパフ色で描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
青い三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの重複した行数のマスクを求める	df.duplicated()
文字列中に部分文字列が含まれない	sub not in s
空セット	set()
ヒストグラムをネイビー色として描画する	plt.hist(データ列, color='navy')
表データをサンプリングする	df.sample()
折れ線グラフに黒い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
ファイルを文字列の示すエンコーディングとしてオープンする]	open(filepath, encoding=s)
新しい線形回帰モデルを準備する	model = sklearn.linear_model.LinearRegression()
ファイルパスをEUCでオープンする]	open(filepath, encoding='euc_jp')
横棒プロットを描画してラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
文字列が部分文字列で終わるかどうか確認する	s.endswith(sub)
イテラブルから1個ランダムに選ぶ	random.choice(iterable)
データフレームのカラムの中にある文字列と文字列の合計を数える	df[col].isin([value, value2]).sum()
ヒストグラムをフォレストグリーン色で描画する	plt.hist(データ列, color='forestgreen')
option: カンマを区切りで使う	sep = ','
イテラブルを文字列リストに変換して、タブで連結する	'\t'.join(map(str, iterable))
散布図をパレットトルコイズ色で描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
不揃いな長さののzip	itertools.zip_longest(iterable, iterable2)
ファイル全体を行単位で分割して読み込む	f.readlines()
二つのデータフレームを縦方向に連結する	pd.concat([df, df2])
データフレームをグループ化し、それぞれの列に対し標準偏差を計算する	df.groupby(column)[column2].std()
折れ線グラフの四角印を赤色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
深紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
折れ線グラフの色をライトグリーンに変更する	plt.plot(データ列x, データ列y, color='lightgreen')
データ列の中に文字列とがいくつ含まれるか数える	ds.isin([value, value2]).sum()
データフレームのリスト列のNaNを後の行の値で埋める	df[aList].fillna(method='bfill')
文字列の開始位置以降が部分文字列で始まるかどうか調べる	s.startswith(sub, start)
グラフのx軸のラベルをセットする	plt.xlabel('x軸ラベル')
新しい文字列でパターンにマッチした文字列を置き換える	re.sub(pattern, newsub, s)
ライトスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
ヒストグラムの色をダークオリーブグリーンに指定する	plt.hist(データ列, color='darkolivegreen')
データフレームを転置する	df.T
イテラブルとリストについての散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームから重複した行をドロップして、更新する	df.drop_duplicates(inplace=True)
option: 読み込まないフッタをnにする	skipfooter = n
2つのオブジェクトは等しいか確認する	obj == obj2
散布図をアンティークホワイト色で描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
サーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
ライムグリーンにヒストグラムの色を指定する	plt.hist(データ列, color='limegreen')
ネイビー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
散布図をダークグリーン色として描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
データフレームの列の要約統計量	df[col].describe()
ダークゴールデンロッドにヒストグラムの色をする	plt.hist(データ列, color='darkgoldenrod')
option: フォントの色をカデットブルーに指定する	color = 'cadetblue'
データフレームのcollのエポック秒から日付データに変換する	pd.to_datetime(df[col], unit='s', utc=True)
散布図にバツマーカーを加える	plt.scatter(データ列x, データ列y, marker='x')
option: フォントの色をグレーに設定する	color = 'grey'
ヒストグラムの色をホワイトスモークに変更する	plt.hist(データ列, color='whitesmoke')
正規分布による累積分布関数を使う	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
OS名	sys.platform
option: 色をナバホホワイトに設定する	color = 'navajowhite'
まとめて正規表現patternでreplにデータフレームの値を置き換える	df.replace(pattern, repl, regex=True)
平均線付き箱ひげ図を描く	plt.boxplot(データ列, meanline=True)
データ列の中に文字列と文字列があるか調べる	ds.isin([value, value2])
ライトグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgray')
option: マーカーの色をミディアムターコイズにする	markerfacecolor = 'mediumturquoise'
数列と配列についての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ディムグレー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
文字列の両端から不要な空白を取り除く	s.strip()
異なる列をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ダークマゼンタ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
ヒストグラムをダークオーキッド色として描画する	plt.hist(データ列, color='darkorchid')
システム時刻で乱数を初期化する	random.seed()
ファイルをオープンして]バイナリ書き込みストリームを見る	open(filepath, mode='wb')
データフレームを列を用いて昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
キーが辞書に存在するかどうか	key in aDict
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategray')
ライトイエロー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
回帰分析をパーセプトロンで行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
10を底とする浮動小数点数の対数	math.log10(x)
折れ線グラフのマーカーを▽にする	plt.plot(データ列x, データ列y, marker='v')
option: ライトグレーを用いる	color = 'lightgray'
三角マーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
フローラルホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
散布図をドジャーブルー色として描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
横棒グラフをリネン色で描画する	plt.barh(データ列x, データ列y, color='linen')
最小値でカラムの欠損値を置換する	ds.fillna(ds.min())
配列とイテラブルについて散布図を描画して、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのリスト列のどの値が頻出か見る	df[aList].mode()
縦棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
カデットブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
データフレームのリストカラムのヒートマップを描画する	sns.heatmap(df[aList].corr())
実行時の標準出力の出力先がターミナルか調べる	os.isatty(sys.stdin.fileno())
ヒストグラムを青緑色で描画する	plt.hist(データ列, color='teal')
データフレームの中の列をn個に等間隔でビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
折れ線グラフの上三角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
ユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
文字列が平仮名か調べる	('ぁ' <= ch <= 'ん')
データフレームを複数の列によってソートして、更新する	df.sort_values(by=column, inplace=True)
ライトグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
ファイルを文字列の示すエンコーディングでオープンする]	open(filepath, encoding=s)
option: フォントの色をミディアムブルーに変更する	color = 'mediumblue'
データフレームの中の欠損値の数を数える	df.isna().sum()
データフレームをJSONLファイルにヘッダを付けずに保存する	df.to_csv(filename, header=None)
nが1、もしくは2もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
ルートのチェーンマップを作る	collections.ChainMap()
棒グラフをコーンフラワーブルー色で描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
データフレームの二つのカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
文字列の開始位置から終了位置までの範囲で部分文字列の出現回数をカウントする	s.count(sub, start, end)
黒い右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ヒストグラムの色をオリーブに指定する	plt.hist(データ列, color='olive')
ミディアムパープル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
横棒グラフをダークレッド色として描画する	plt.barh(データ列x, データ列y, color='darkred')
折れ線グラフの色をアリスブルーにする	plt.plot(データ列x, データ列y, color='aliceblue')
レベッカパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
キューをタプルにする	tuple(deq)
リストの値を小さい方からソートする	sorted(aList, reverse=True)
プログラムの実行を強制的に終了する	sys.exit()
自分自身をモジュールとして	sys.modules[__name__]
本日が月曜日	datetime.datetime.today().weekday() == 0
ブランチドアーモンド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blanchedalmond')
組内の要素が全て真か	all(aTuple)
データフレームを使う	import pandas as pd
折れ線グラフの色をダークカーキに設定する	plt.plot(データ列x, データ列y, color='darkkhaki')
ヒストグラムをプロットして、ビン数を設定する	plt.hist(データ列, bins=区関数)
折れ線グラフを色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
散布図の色を紺碧にする	plt.scatter(データ列x, データ列y, color='azure')
データフレームを'A'列でグループ化する	df.groupby('A')
最初の列をデータフレームから除く	df[df.columns[1:]]
折れ線グラフの色をライトスレイグレーにする	plt.plot(データ列x, データ列y, color='lightslategray')
データフレームのリストカラムの中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
アクア色のヒストグラムを描画する	plt.hist(データ列, color='aqua')
文字列内にひとつでもアスキー文字が含まれるか	any(c.isascii() for c in s)
ファイルが存在しないかどうか確認する	not os.path.exists(filepath)
多次元データを多次元尺度構成法で濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
折れ線グラフの色を耐火レンガに変更する	plt.plot(データ列x, データ列y, color='firebrick')
ひとつでも小文字が文字列内にあるかどうか調べる	any(c.islower() for c in s)
JSONを使う	import json
スクリプトファイルのパスを使う	os.path.abspath(__file__)
ファイルから1文字読み込む	f.read(1)
列の平均値を求める	ds.mean()
横棒グラフの色をミディアムブルーにする	plt.barh(データ列x, データ列y, color='mediumblue')
ファイルのファイルサイズ	os.path.get_size(filepath)
折れ線グラフをホットピンク色で描画する	plt.plot(データ列x, データ列y, color='hotpink')
データ列をリストを境界値としてビン分割する	pd.cut(ds, aList)
データフレームのカラムは正規分布からどの程度歪んでいるか見る	df[col].kurt()
アクアマリン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aquamarine')
文字列の先頭だけ大文字化する	s.capitalize()
整数nのバイト長を調べる	(n.bit_length() + 7) // 8
実数の逆双曲線正接を求める	math.atanh(x)
リストとデータ列リストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
Pandasでタイムスタンプのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
nからn2の範囲	range(n, n2)
組の最後からn番目以前の要素を抽出する	aTuple[:-n]
データフレームを各列毎にグループ化して、列の最小値を計算する	df.groupby(column)[column2].min()
丸マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='o')
シーケンスからひとつランダムに選ぶ	random.choice(iterable)
データフレームをグループ化し、それぞれの列に対し合計を求める	df.groupby(column)[column2].sum()
棒グラフをダーク・スラテグレー色として描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
要素を両端キューにプッシュする	deq.append(element)
option: サドルブラウン色を用いる	color = 'saddlebrown'
棒グラフをパープル色で描画する	plt.bar(データ列x, データ列y, color='purple')
数列とデータ列についての散布図に星マーカーを描く	plt.plot(データ列x, データ列y, marker='*')
predicateFuncが真とならないシーケンスの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
文字列リストを連結して一つの文字列にする	''.join(aStringList)
縦棒グラフをパールバイオレットレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palevioletred')
ライトグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
環境がリナックスか調べる	sys.platform.startswith('linux')
キーがタプルにない時、要素を追加する	aDict.setdefault(key, element)
淡いピンク色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightpink')
option: シアンに色を設定する	color = 'cyan'
データフレームをJSONLファイルに書き込む	df.to_csv(filename)
ピアソンの積立相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
浮動小数点数で浮動小数点数を除算して小数点以下を切り捨てる	x // y
散布図をrgbのダイアモンドマーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
線グラフの色をブルーバイオレットに指定する	plt.plot(データ列x, データ列y, color='blueviolet')
nをバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
option: 深紅にグラフの色を設定する	color = 'crimson'
シードをnで固定する	random.seed(n)
スクリプトのファイルの名前	sys.argv[0]
線グラフの色をアクアマリンに指定する	plt.plot(データ列x, データ列y, color='aquamarine')
文字列の示す文字コードでファイルを書き込みできるようにオープンする]	open(filepath, mode='w', encoding=s)
浮動小数点数を十の位で丸める	round(x, -1)
スラグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategrey')
ヘッダを付けずにデータフレームをJSONLファイルに保存する	df.to_csv(filename, header=None)
散布図をベージュ色を用いて描画する	plt.scatter(データ列x, データ列y, color='beige')
データフレームの中に存在する文字列と文字列の合計をカウントする	df.isin([value, value2]).sum()
ASCII限定として文字列の先頭でパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
option: マーカーをポイントに変更する	marker = '.'
データ列をビン数nでビニングし、、namesのラベルをつける	pd.cut(ds, n, labels=names)
データ列の年	ds.dt.year
実数の複素数	complex(x)
標準エラーを得る	sys.stderr
散布図を丸マーカーでプロットする	plt.plot(データ列x, データ列y, marker='o')
option: マーカーの色をシャルトリューズにする	markerfacecolor = 'chartreuse'
データフレームの列を四捨五入して整数型にする	df[col].round().astype(int)
要素が集合のメンバーでないかどうか確認する	element not in aSet
データ列の曜日名	ds.dt.weekday_name
データ列の分を使う	ds.dt.minute
列を2回あわせたデカルト積	itertools.product(iterable, repeat=2)
散布図の三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
option: フォントの色をダークオレンジに指定する	color = 'darkorange'
横棒グラフをライトイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightyellow')
nからn2までのひとつ飛ばしの整数列	list(range(n, n2+1, 2))
丸印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='o')
集合の濃度	len(aSet)
ヒストグラムをブルーバイオレット色で描画する	plt.hist(データ列, color='blueviolet')
オブジェクトは集合クラス	isinstance(obj, set)
横棒グラフをスラグレー色を用いて描画する	plt.barh(データ列x, データ列y, color='slategrey')
データ列を1000の位で四捨五入して、整数型にする	ds.round(-3).astype(int)
クリムゾン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
リストを境界値として配列をビニングする	pd.cut(aArray, aList)
横棒グラフをダークブルー色として描画する	plt.barh(データ列x, データ列y, color='darkblue')
rgbの下三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ペルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
レモンシフォン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
インディアンレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='indianred')
0から始まる無限の数列	itertools.count()
横棒グラフをラベンダーブラッシュ色で描画する	plt.barh(データ列x, データ列y, color='lavenderblush')
データ列とリストの散布図にrgbのバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
単回帰モデルの残差をヒストグラムにする	plt.hist(目的変数 - model.predict(説明変数))
ターコイズ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
option: n番目のカラムをインデックスに増やす	index_col = n
折れ線グラフのクロスマーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: フォントの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
データフレームのカラムを散布図として描画する	sns.scatterplot(data=df, x='列名', y='列名')
rgbの下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
日付時刻データにn時間を加算する	aDatetime + datetime.timedelta(hours=n)
折れ線グラフに▽印を加える	plt.plot(データ列x, データ列y, marker='v')
データフレームの中にある日付データとの合計を数える	df.isin([value, value2]).sum()
データフレームを列でグループ化して列の要約統計量を算出する	df.groupby(column).describe()[column2]
黒い四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s', c='k')
データフレームのリストカラムの欠損値をメディアンに増やす	df[aList].fillna(df[aList].median())
predicateFuncがTrueとなるシーケンスの部分	itertools.takewhile(predicateFunc, iterable)
option: ミッドナイトブルー色を使う	color = 'midnightblue'
データフレームを十の位で四捨五入する	df.round(-1)
散布図を黒い▲マーカーで描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
リストとリストについての散布図にrgbの下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
散布図に赤い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームのリスト列の相関行列をヒートマップでグラフ化する	sns.heatmap(df[aList].corr())
バツマーカーでデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームを100の位で丸めて、整数型にする	df.round(-2).astype(int)
棒グラフの色を紺にする	plt.bar(データ列x, データ列y, color='darkblue')
データフレームから列を３つのみ選択する	df[[column, column2, column3]]
文字列を最後の部分文字列で分けた場合の後半の文字列	s.rpartition(sub)[-1]
文字列の先頭でケースを無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
日付データが日付データより後ろか調べる	aDate > aDate2
リストの中の最小値を求める	min(aList)
データフレームを昇順に複数の列でソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
多次元データをt-SNEで濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
Pandasで、UNIX秒の文字列からPandasの日付型に変換する	pd.to_datetime(s, unit='s', utc=True)
option: ライトグリーン色を用いる	color = 'lightseagreen'
下三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='v')
アルファベットを全て使う	string.ascii_letters
折れ線グラフの四角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
散布図をシャルトリューズ色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
折れ線グラフの色をパールバイオレットレッドに設定する	plt.plot(データ列x, データ列y, color='palevioletred')
カウンタの項目を列挙する	aCounter.keys()
ラベンダーブラッシュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
リストとリストについての散布図にrgbの▽マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフの色をライトイエローに設定する	plt.plot(データ列x, データ列y, color='lightyellow')
option: エクセルデータのシート名をnamesに指定する	sheet_name = names
option: トマトに色を設定する	color = 'tomato'
ヒストグラムを耐火レンガ色で描画する	plt.hist(データ列, color='firebrick')
option: グラフの色をシスルに変更する	color = 'thistle'
データフレームの行一覧を使う	df.index
棒グラフをダーク・スラテグレー色で描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
変数名をキーとしてマップ	dict(name=element)
option: ミディアムオーキッドにグラフの色を設定する	color = 'mediumorchid'
option: 色をシーグリーンに変更する	color = 'seagreen'
リストの末尾を取り除く	aList[:-1]
ヒストグラムをカーキ色で描画する	plt.hist(データ列, color='khaki')
文字列TSVファイルからCSVファイルをn番目のカラムをインデックスとして読み込む	pd.read_csv(filename, index_col=n)
データフレームから一番右の列を消す	df[df.columns[:-1]]
ユニークな値を要素とする配列	np.unique(aArray)
option: 色を白に設定する	color = 'white'
option: カンマを分割記号で使用する	sep = ','
マッピングを階層化辞書に変換する	collections.ChainMap(aDict)
作業ディレクトリを使う	os.getcwd()
option: マーカーの色をビスクにする	markerfacecolor = 'bisque'
横棒グラフを描画し、、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
データフレームのリストカラムの欠損値を中央値に指定する	df[aList].fillna(df[aList].median())
文字列の先頭で大文字・小文字を無視して正規表現にマッチさせる	re.match(pattern, s, flags=re.IGNORECASE)
モデルの当てはまりの良さを計算する	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
ラベンダーブラッシュ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
バイオレット色として散布図を描画する	plt.scatter(データ列x, データ列y, color='violet')
ブースティングで回帰分析を行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
横棒グラフをミディアムブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumblue')
散布図の色をダークシアグリーンにする	plt.scatter(データ列x, データ列y, color='darkseagreen')
折れ線グラフに赤い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
カウンタの項目一覧	aCounter.keys()
グラフを描画する準備をする	import matplotlib.pyplot as plt
option: マーカーの色をインディゴにする	markerfacecolor = 'indigo'
nとn2が同じ値かどうか調べる	n == n2
リストを縦棒プロットにする	plt.bar(ラベル列, データ列)
散布図に下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
ビン数を設定して度数分布図を描く	plt.hist(データ列, bins=区関数)
リストの各要素を関数でフィルタする	map(func, iterable)
データフレームの列に重複があればマスクする	df.duplicated(subset=column)
option: マーカーを上三角に設定する	marker = '^'
黄色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellow')
横棒グラフをフォレストグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='forestgreen')
双方向キューのstart番目からend番目の部分要素を使う	collections.deque(itertools.islice(deq, start, end))
option: グラフの色をプラムに変更する	color = 'plum'
ファイルからディレクトリ名を使う	os.path.dirname(filepath)
option: マーカーの色をスプリンググリーンにする	markerfacecolor = 'springgreen'
データフレームのNaNを最頻値にする	df.fillna(df.mode().iloc[0])
データフレームのカラムの中央値を求める	df[col].median()
データフレームを表示するとき、折り返しをしない	pd.set_option('expand_frame_repr', False)
バイトオーダを知る	sys.byteorder
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgrey')
nを十六進文字列に変換する	hex(n)[2:]
グラフにy=0の一点鎖線をつける	plt.axhline(y=0, linestyle='dashbot')
データフレームの行を条件で取り除くには	df[(df[column] == x) & (df[column2] == x2)]
折れ線グラフの線の種類を破線に設定する	plt.plot(データ列x, データ列y, linestyle='dashed')
Pandasで、日付データのデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
折れ線グラフを赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
ターコイズにヒストグラムの色をする	plt.hist(データ列, color='turquoise')
データ列を分割する	pd.cut(ds, aList)
サイコロと同じ乱数	random.randint(1, 6)
t-SNEを用いて淡く次元に次元削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
ふたつの集合の差を使う	aSet.difference(aSet2)
浮動小数点数を小数点以下第一位で四捨五入する	round(x, 1)
変数を定義する	x = n
option: スカイブルーを使う	color = 'skyblue'
option: 印の太さを変える	markeredgewidth = 2.5
option: シャルトリューズにフォントの色を指定する	color = 'chartreuse'
リストの末尾から要素をポップする	aList.pop()
リストと配列についての散布図に赤い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
黒い▼マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
パレットを濃くする	sns.set(pallete='deep')
行列の行ごとの平均値	np.mean(aArray, axis=1)
行列の累積積を求める	np.cumprod(aArray)
option: グラフの色をイエローグリーンに指定する	color = 'yellowgreen'
データフレームの列を整数に丸める	df[col].round()
棒グラフの色をタンにする	plt.bar(データ列x, データ列y, color='tan')
散布図を赤い右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
整数型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int)
option: EUCを用いる	encoding = 'euc_jp'
option: 符号なし８ビット整数型を使う	dtype = np.uint8
グラフで使う縦軸の名前をuntitledに設定する	plt.ylabel('y軸ラベル')
option: ホワイトスモークに色をする	color = 'whitesmoke'
セットの要素数を求める	len(aSet)
TSVファイルからデータフレームを読む	pd.read_csv(filename, sep='\t')
縦棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
コーンズシルク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornsilk')
ヒストグラムを貝殻色を使って描画する	plt.hist(データ列, color='seashell')
横棒グラフをミディアムパープル色として描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
データフレームを列によって整列して、NaNを先頭にする	df.sort_values(by=column, na_position='first')
淡いピンク色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
データ列の残差を散布図として描画する	sns.residplot(x=データ列, y=データ列)
データ列のNaNを最頻値に設定する	ds.fillna(ds.mode().iloc[0])
折れ線グラフの色をライトスレイグレーに指定する	plt.plot(データ列x, データ列y, color='lightslategray')
折れ線グラフの色をゲインズボロにセットする	plt.plot(データ列x, データ列y, color='gainsboro')
文字列を最後の部分文字列で二分し、前半の文字列を求める	s.rpartition(sub)[0]
散布図の大バツマーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
ライトスチールブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightsteelblue')
文字列の終了位置より前に部分文字列が存在する	s.find(sub, 0, end) != -1
option: 黄色を使う	color = 'yellow'
線グラフの色をミディアムスレートブルーに指定する	plt.plot(データ列x, データ列y, color='mediumslateblue')
リストとデータ列についての散布図に赤い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='r')
リストをタプルに変換する	tuple(aList)
散布図を黒い菱形マーカーで描く	plt.plot(データ列x, データ列y, marker='D', c='k')
キュー中の要素の数を数える	deq.count(element)
nからn2までの一つ置きの整数列	list(range(n, n2+1, 2))
新しい回帰木モデルを作る	model = sklearn.tree.DecisionTreeRegressor()
文字列を右から空白で区切る	s.rsplit()
棒グラフをビスク色を用いて描画する	plt.bar(データ列x, データ列y, color='bisque')
文字列の接頭辞から部分文字列を除去する	s.removeprefix(sub)
日付データが火曜日か調べる	aDate.weekday() == 1
ミディアムスプリンググリーンにヒストグラムの色を指定する	plt.hist(データ列, color='mediumspringgreen')
リストが空か調べる	len(aList) == 0
ファイルを書き込みできるようにオープンする]	open(filepath, mode='w')
データフレームから列を三つ選択する	df[[column, column2, column3]]
タイムスタンプデータが月曜日か調べる	aDatetime.weekday() == 0
option: ホットピンクを使う	color = 'hotpink'
小数点数以上の最小の整数を計算する	math.ceil(x)
イテラブルを文字列に変換して一つにする	''.join(map(str, iterable))
ナバホホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
文字列が小文字か調べる	s.islower()
線グラフの色をラベンダーに設定する	plt.plot(データ列x, データ列y, color='lavender')
タプルの最初の要素を使う	aTuple[0]
ヒストグラムの色をライトゴールドロディイエローに変更する	plt.hist(データ列, color='lightgoldenrodyellow')
オブジェクトが数値か調べる	isinstance(obj, (int,float))
赤い破線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ファイルパスを絶対パスに変換する	os.path.abspath(filepath)
データ列を三つ並べて柱状図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
option: フォレストグリーンを用いる	color = 'forestgreen'
カウンタのそれぞれの項目をそのカウントだけ列挙する	aCounter.elements()
ミディアムオーキッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
日付時刻データの曜日を整数で使う	aDatetime.weekday()
縦棒グラフをアクア色として描画する	plt.bar(データ列x, データ列y, color='aqua')
縦棒グラフをラベンダー色として描画する	plt.bar(データ列x, データ列y, color='lavender')
データフレームを表示するとき、ヘッダー行を右寄せに設定する	pd.set_option('colheader_justify', 'right')
option: フォントの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
最大値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].max())
スノー色のヒストグラムを描画する	plt.hist(データ列, color='snow')
文字列の左側からタブを取り除く	s.lstrip('\t')
浮動小数点数を切り下げる	math.floor(x)
データ列のユニークな要素	ds.unique()
配列とリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
数値を緑色でプリントできる文字列にする	f'\033[32m{value}\033[0m'
十六進文字列をバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
折れ線グラフの△マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
option: ミッドナイトブルー色を使用する	color = 'midnightblue'
青い散布図を描画する	plt.scatter(データ列x, データ列y, color='b')
データフレームからカテゴリデータの列名一覧を使う	df.select_dtypes('object').columns
散布図にバツマーカーを使う	plt.scatter(データ列x, データ列y, marker='x')
option: ミディアムアクアマリンを使用する	color = 'mediumaquamarine'
棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
option: スラグレーを使う	color = 'slategray'
青い左三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
option: フォントの色をピーチパフに指定する	color = 'peachpuff'
棒グラフをブラック色を用いて描画する	plt.bar(データ列x, データ列y, color='black')
ホットピンク色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
文字列がn回続く列を得る	itertools.repeat(element, n)
横棒グラフの色をスラグレーにする	plt.barh(データ列x, データ列y, color='slategrey')
バイオレット色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
0からnまでのスライス	slice(n)
最後の部分文字列で文字列を分割した時の前半の文字列を取り出す	s.rpartition(sub)[0]
キーがマップに存在するかどうか	key not in aDict
範囲を指定して乱数を求める	random.randint(最小値, 最大値)
棒グラフをスノー色で描画する	plt.bar(データ列x, データ列y, color='snow')
文字列内にひとつでも英字があるか	any(c.isalpha() for c in s)
n割るn2の切り上げ	(n + n2 - 1) // n2
回帰直線データフレームの各カテゴリごとの散布図にを加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
ヒストグラムをダークオレンジ色を用いて描画する	plt.hist(データ列, color='darkorange')
ヒストグラムの色をフクシアに設定する	plt.hist(データ列, color='fuchsia')
ヒストグラムをシーグリーン色で描画する	plt.hist(データ列, color='seagreen')
リストと数列の散布図を描画して、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
正規化されたヒストグラムをプロットする	plt.hist(データ列, density=True)
折れ線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
線グラフをピンク色を用いて描画する	plt.plot(データ列x, データ列y, color='pink')
データフレームのリストで指定された列の相関行列をヒートマップを使ってグラフ化する	sns.heatmap(df[aList].corr())
ファイルを追加できるように開く]	open(filepath, mode='a')
リストとリストの散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
リストの推移を色付きの実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
フォレストグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
ヒストグラムをミディアムスプリンググリーン色で描画する	plt.hist(データ列, color='mediumspringgreen')
作画の縦横の比率を等しくする	plt.axis('equals')
線グラフをカデットブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='cadetblue')
空のカウンタ	collections.Counter()
option: グラフの色をダークシアンにセットする	color = 'darkcyan'
オレンジレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
文字列の中でパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s)
日付時刻データが土曜日か調べる	aDatetime.weekday() == 5
データフレームの欠損値を最大値に変更する	df.fillna(df.max())
回数を制限して新しい文字列に文字列中の部分文字列を置き換える	s.replace(sub, newsub, n)
nプラスn2を求める	n + n2
ヒストグラムの色をダークオーキッドに指定する	plt.hist(データ列, color='darkorchid')
option: 色をペルーに設定する	color = 'peru'
読み込みモードでファイルをオープンして]fとする	f = open(filepath, mode='r')
正規表現を前もってコンパイルする	re.compile(pattern)
文字列中の部分文字列の登場をカウントする	s.count(sub)
縦棒グラフをライトスカイブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
配列とリストの散布図に黒い▲マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
データ列の曜日の名前を使う	ds.dt.weekday_name
option: シャルトリューズ色を使用する	color = 'chartreuse'
プロットの描画で明るくカラーパレットを用いる	sns.set(pallete='bright')
レベッカパープル色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
棒グラフの色をフローラルホワイトにする	plt.bar(データ列x, データ列y, color='floralwhite')
散布図の色をダークゴールデンロッドにする	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
マゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='magenta')
日付時刻データが木曜日か調べる	aDatetime.weekday() == 3
データフレームをグループ化しそれぞれの列に対し分散を計算する	df.groupby(column)[column2].var()
option: グラフの色をシャルトリューズに設定する	color = 'chartreuse'
辞書に辞書の項目を更新する	aDict.update(aDict2)
辞書をJSON形式でファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
データフレームの中の列を等間隔でn個にビン分割する	pd.cut(df[col], n)
グラフの背景色を暗くする	sns.set(style='darkgrid')
リストと数列についての散布図にrgbの下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
ベクトル間の要素ごとの最大公約数	np.gcd(aArray, aArray2)
データフレームを各列毎に集約し、、列の標準偏差を求める	df.groupby(column)[column2].std()
オプションで、標準エラーを使う	file = sys.stderr
横棒グラフの色をペールグリーンにする	plt.barh(データ列x, データ列y, color='palegreen')
データ列を折れ線グラフで可視化する	plt.plot(データ列x, データ列y)
2つの文字列は等しくないか	s != s2
散布図にrgbのダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: マーカーを左三角に設定する	marker = '<'
グラフの描画で明るくカラーパレットを使う	sns.set(pallete='bright')
横棒グラフをダークサーモン色で描画する	plt.barh(データ列x, データ列y, color='darksalmon')
ライトスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
整数nがリストの一つかどうか	n in aList
'A'列によってでデータフレームを破壊的にソートする	df.sort_values(by='A', inplace=True)
データフレームのカラムのタイムゾーンを日本に設定する	df[col].tz_convert('Asia/Tokyo')
データ列をヒストグラムにする	plt.hist(データ列)
線グラフをオレンジレッド色を用いて描画する	plt.plot(データ列x, データ列y, color='orangered')
文字列中の大文字を小文字に変換する	s.lower()
項目名がマップに存在し、いる	key not in aDict
ヒストグラムの色をマルーンに設定する	plt.hist(データ列, color='maroon')
日付時刻データをn秒前にする	aDatetime - datetime.timedelta(seconds=n)
eの乗数を計算する	math.exp(x)
データフレームのカラムを100の位で丸める	df[col].round(-2)
日付時刻データは日付時刻データより後ろか	aDatetime > aDatetime2
データフレームの列をインデックスに変更する	df.set_index(column)
リストと配列の散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
折れ線グラフの大バツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
データフレームの列が正規分布からどの程度、尖っているか調べる	df[col].skew()
散布図の色をライトサーモンにする	plt.scatter(データ列x, データ列y, color='lightsalmon')
日付データが日付データより遅い	aDate > aDate2
名前付きタプルを定義する	C = collections.namedtuple('クラス名', プロパティ名)
まとめてデータフレームをValueMapで置き換える	df.replace(ValueMap)
カラムを1000の位で丸めて、整数型にする	ds.round(-3).astype(int)
列をキーにして二つのデータフレームを左ジョインする	pd.merge(df, df2, on=column, how='left')
option: ディムグレーにグラフの色を設定する	color = 'dimgray'
書き込みできるようにファイルパスを開く]	open(filepath, mode='w')
大文字を全部使う	string.ascii_uppercase
確率的勾配降下でクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
データフレームを小さい順に列によって破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
nが2で割り切れる	n % 2 == 0
タプルの総和	sum(aTuple)
データフレームのリストカラムの欠損値を中央値で補う	df[aList].fillna(df[aList].median())
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
箱ひげ図を描き、平均線を追加する	plt.boxplot(データ列, meanline=True)
データフレームのカラムの値がx未満の行を抽出する	df[df[column] < x]
JSONファイルのファイル入力を辞書にする	json.load(fin)
横棒グラフをスノー色を用いて描画する	plt.barh(データ列x, データ列y, color='snow')
データフレームのひとつの列のみ説明変数にする	説明変数 = df[['列名']]
グラフで使える色名の一覧	matplotlib.colors.cnames
上限から下限の範囲でヒストグラムを描く	plt.hist(データ列, range=(start, end))
リストを等間隔でn個にビンニングする	pd.cut(aList, n)
折れ線グラフの星印の太さを設定する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ライトシアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightcyan')
option: フローラルホワイト色を使う	color = 'floralwhite'
棒グラフをライトブルー色で描画する	plt.bar(データ列x, データ列y, color='lightblue')
データフレームをCSVファイルでJSONLファイルに書き込む	df.to_csv(filename)
データ列を箱ひげ図にする	plt.boxplot(データ列)
ダークカーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
文字列が全て数値	s.isnumeric()
双方向キューに要素をスタックする	deq.append(element)
浮動小数点数の2乗	x ** 2
ファイルからnとn2のシートを読む	pd.read_excel(filename, sheet_name=[n, n2])
シエナ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sienna')
グラフにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
ミディアムオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='mediumorchid')
棒グラフの色を茶色にする	plt.bar(データ列x, データ列y, color='brown')
グレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
option: フォントの色をロージーブラウンに変更する	color = 'rosybrown'
option: ローングリーンにグラフの色を指定する	color = 'lawngreen'
Pandasでエポック秒のデータ列からタイムスタンプ型に変換する	pd.to_datetime(ds, unit='s', utc=True)
数値を黄色にする	f'\033[33m{value}\033[0m'
ゼロ埋めされた８ビット整数型のベクトル	np.zeros(要素数, dtype=np.int8)
カウンタの上位をリストとして得る	aCounter.most_common(k)
option: 書き込みモードを使う	mode = 'w'
縦棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
nまたはn2	n or n2
option: マーカーの色をミディアムブルーにする	markerfacecolor = 'mediumblue'
最初の部分文字列で文字列を二分し、前半の文字列を使う	s.partition(sub)[0]
コーンズシルクにヒストグラムの色を設定する	plt.hist(データ列, color='cornsilk')
横棒グラフの色をゲインズボロにする	plt.barh(データ列x, データ列y, color='gainsboro')
Pandasで、フォーマットで文字列を日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
いつまでもカウントアップする	itertools.count()
ブルーバイオレット色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
整数nをバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big')
option: 白色を使う	color = 'white'
縦棒グラフをディムグレー色で描画する	plt.bar(データ列x, データ列y, color='dimgrey')
リストを等量で分割数nとしてビン分割する	pd.qcut(aList, n)
多層パーセプトロンでクラス分類をする	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
横棒グラフの色をラベンダーブラッシュにする	plt.barh(データ列x, データ列y, color='lavenderblush')
浮動小数点数に実数を加える	x + y
書き込むCSVファイルの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
8進文字列を整数に変換する	int(s, 8)
折れ線グラフの▲マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
nがn2と等しいか調べる	n == n2
ダークカーキ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
タプルの値の一覧を得る	aDict.values()
折れ線グラフの▲印を青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
散布図のバツ印の大きさを設定する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
点線にヒストグラムの線の種類を指定する	plt.hist(データ列, linestyle='dotted')
文字列を部分文字列で二つに区切って、後半の文字列を使う	s.partition(sub)[-1]
配列の要素数	aArray.size
折れ線グラフの色をナバホホワイトに指定する	plt.plot(データ列x, データ列y, color='navajowhite')
データフレームのリスト列を千の位で四捨五入して、整数型にする	df[aList].round(-3).astype(int)
ミッドナイトブルーにヒストグラムの色を設定する	plt.hist(データ列, color='midnightblue')
棒グラフをスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='slateblue')
データフレームの列の空文字を欠損値に変換しドロップする	df[col].replace('', np.nan).dropna()
アクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aquamarine')
折れ線グラフに青いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ドジャーブルー色のヒストグラムを描画する	plt.hist(データ列, color='dodgerblue')
JSONLファイルにデータフレームをタブ区切りを使って保存する	df.to_csv(filename, sep='\t')
折れ線グラフに青い▲マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
整数nを8進表現にする	oct(n)
散布図の大バツマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='r')
横棒グラフの色をライトスレイグレーにする	plt.barh(データ列x, データ列y, color='lightslategray')
リストを黒色でプリントする	print(f'\033[30m{value}\033[0m')
折れ線グラフに赤いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
実数から実数を引く	x - y
ヒストグラムをピーチパフ色で描画する	plt.hist(データ列, color='peachpuff')
リストを白色でプリントできる文字列にする	f'\033[37m{value}\033[0m'
ライトスレイグレーにヒストグラムの色を変更する	plt.hist(データ列, color='lightslategray')
線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
ファイルを一行ずつ読み込む	f.readline()
空の回帰木モデルを準備する	model = sklearn.tree.DecisionTreeRegressor()
散布図をチョコレート色として描画する	plt.scatter(データ列x, データ列y, color='chocolate')
データ列のNaNを最小値に設定する	ds.fillna(ds.min())
大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
データフレームをグループ化しそれぞれの列に対し最大値を求める	df.groupby(column)[column2].max()
プロットのカラーパレットを濃くする	sns.set(pallete='deep')
オールドレースにヒストグラムの色をする	plt.hist(データ列, color='oldlace')
データ列のNaNを直前の値で補う	ds.fillna(method='ffill')
イテラブルと数列についての散布図に黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
まとめて正規表現patternでデータフレームの列の値を変更する	df[col].replace(pattern, repl, regex=True)
三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='^')
集合の要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
データ列の値が未入力値	ds.isna()
option: マーカーの色をマゼンタにする	markerfacecolor = 'magenta'
一点鎖線で配列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
option: オールドレースにフォントの色を設定する	color = 'oldlace'
折れ線グラフの丸マーカーを赤くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
option: フォントの色をダーク・スラテグレーに設定する	color = 'darkslategrey'
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgray')
破壊的にデータフレームのn行目を消す	df.drop(n, axis=0, inplace=True)
最初の要素を両端キューから取り出す	deq.remove(element)
ダークスラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategray')
データ列間の平均二乗誤差を計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
ファイルをEUCを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
L2ノルムとしてデータを正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
散布図をミディアムオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
折れ線グラフに赤い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ファイルを改行を取り除いて一行ずつ読み込む	f.readline()
回帰木モデルを新規作成する	model = sklearn.tree.DecisionTreeRegressor()
アルファベットの小文字列	string.ascii_lowercase
散布図の▽マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
ミディアムアクアマリン色で線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: 色を淡いピンク色に設定する	color = 'lightpink'
散布図をオレンジレッド色で描画する	plt.scatter(データ列x, データ列y, color='orangered')
横棒グラフをカデットブルー色で描画する	plt.barh(データ列x, データ列y, color='cadetblue')
ミスティローズ色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='mistyrose')
option: サーモン色を使う	color = 'salmon'
イテラブルからセットを使う	set(iterable)
文字列がリストの要素か	element in aList
データ列の正規分布に対する上下広がり	ds.skew()
ヒストグラムの色をライトグレーに指定する	plt.hist(データ列, color='lightgrey')
option: ブール型を使う	dtype = np.int32
データフレームを複数の列によってグループ化し、要約統計量を計算する	df.groupby(columns).describe()
特異値分解で多次元データを濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
データフレームの列の欠損値をxに指定する	df[col].fillna(x)
データフレームの中のカラムをn個にビン分割する	pd.cut(df[col], n)
option: フォレストグリーン色を使う	color = 'forestgreen'
特異値分解を行う	model = sklearn.decomposition.TruncatedSVD(n_components=n)
ケンドール順位相関係数を使ってデータフレームのリストで指定された列の相関行列	df[aList].corr(method='kendall')
リストに応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
nが-9以上、9以下か確認する	-9 <= n <= 9
アクアマリン色のヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
散布図を赤い丸マーカーとして描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
折れ線グラフをロイヤルブルー色を使って描画する	plt.plot(データ列x, データ列y, color='royalblue')
データフレームのカラムが文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgrey')
Pandasで、フォーマットでデータ列を日付データにする	pd.to_datetime(ds, format='%Y-%m-%d')
データ列の推移を半透明の実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
実数のアークサインを求める	math.asin(x)
アクア色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
整数nがタプルのひとつであるかどうか判定する	n in aTuple
文字列の左側から部分文字列を除去する	s.lstrip(sub)
スレートブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='slateblue')
バリーウッド色でヒストグラムを描画する	plt.hist(データ列, color='burlywood')
散布図をシルバー色を用いて描画する	plt.scatter(データ列x, データ列y, color='silver')
横棒グラフをダークスラテグレー色を使って描画する	plt.barh(データ列x, データ列y, color='darkslategray')
横棒グラフをサドルブラウン色として描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
データフレームのグループ毎の分散	df.groupby(column).var()
データフレームのリストカラムの中の欠損値の個数を数える	df[aList].isna().sum()
データ列のpercentパーセンタイル	ds.quantile(percent/100)
データフレームを'A'列によって昇順にソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
ライトスチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='lightsteelblue')
散布図の色をパールバイオレットレッドにする	plt.scatter(データ列x, データ列y, color='palevioletred')
データフレームのカラムの欠損値を最大値に指定する	df[col].fillna(df[col].max())
散布図をダークサーモン色として描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
ヒストグラムの色をダークカーキに設定する	plt.hist(データ列, color='darkkhaki')
真部分集合か調べる	aSet < aSet2
本日を文字列でフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
option: グラフの色をライトスレイグレーに設定する	color = 'lightslategrey'
実線でデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='solid')
文字列はタプルに含まれないか	element not in aTuple
データ列の散らばりを可視化する	plt.scatter(データ列x, データ列y)
点線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dotted')
横棒グラフをダークスラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategray')
イテラブルを文字列に変換して'改行でつなげる	'\n'.join(map(str, iterable))
キーワード引数としてマップに加えて、更新する	aDict.update(**kwargs)
グラフの描画で暗く色使いを用いる	sns.set(pallete='dark')
横棒グラフの色を青にする	plt.barh(データ列x, データ列y, color='blue')
nを二進文字列にする	bin(n)[2:]
横棒グラフを白色として描画する	plt.barh(データ列x, データ列y, color='white')
option: ディムグレーを使う	color = 'dimgray'
散布図に赤いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
折れ線グラフに丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o')
辞書順で文字列は文字列より前か	s < s2
配列を平坦化する	aArray.flatten()
折れ線グラフをフローラルホワイト色で描画する	plt.plot(データ列x, データ列y, color='floralwhite')
横棒グラフの色をアイボリーにする	plt.barh(データ列x, データ列y, color='ivory')
データ列の推移を折れ線プロットを用いて描画する	plt.plot(range(len(データ列)), データ列)
option: グラフの色をライトグリーンに指定する	color = 'lightseagreen'
折れ線グラフの色をゴールドに変更する	plt.plot(データ列x, データ列y, color='gold')
散布図を左三角マーカーで描く	plt.plot(データ列x, データ列y, marker='<')
浮動小数点数のn乗して実数による余り	pow(x, n, y)
散布図に上三角印を使う	plt.scatter(データ列x, データ列y, marker='^')
インデント付きで辞書を文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
ブースティングで回帰分析をする	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
値を両端キューの右から削除する	deq.pop()
ヒストグラムをゴールデンロッド色で描画する	plt.hist(データ列, color='goldenrod')
既存の行列を元に全要素が0の配列	np.zeros_like(aArray)
option: ライトグリーン色を使用する	color = 'lightgreen'
折れ線グラフの四角マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
データフレームの列の各データが何回出現するか見る	df[col].value_counts()
データフレームの中の列をビン数nでビン分割する	pd.cut(df[col], n)
文字列は平仮名かどうか確認する	('ぁ' <= ch <= 'ん')
ふたつの集合が集合と交わりを持たないか調べる	aSet.isdisjoint(aSet2)
ファイルパスを書き込みできるようにオープンする]	open(filepath, mode='w')
データフレームの列の名前一覧で指定された列を落とす	df.drop(columns, axis=1)
ダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D')
オールドレースにヒストグラムの色を変更する	plt.hist(データ列, color='oldlace')
option: モカシンを使う	color = 'moccasin'
フィッシャーの線形判別分類を行う	model = sklearn.manifold.TSNE(n_components=n)
ブール型のゼロ埋めされたベクトル	np.zeros(要素数, dtype=np.int32)
折れ線グラフの線の種類を実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
後の行の値でデータフレームの欠損値を埋める	df.fillna(method='bfill')
option: マーカーの色をライトブルーにする	markerfacecolor = 'lightblue'
アンティークホワイト色の散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
グラフの縦軸を対数に変更する	plt.yscale('log')
ハローワールドをプリントする	print('Hello World')
ベクトルを平坦化する	aArray.flatten()
紺碧色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='azure')
グリッド線	plt.grid(linewidth=3.0)
option: グレーにフォントの色を指定する	color = 'gray'
Pandasで日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
ベクトルの差	aArray - aArray2
データフレームの指定された列を取り出す	df[column]
オブジェクトをイテレータにする	iter(obj)
アルファベットの文字列	string.ascii_letters
option: グラフの色を紺に設定する	color = 'darkblue'
option: 色をオールドレースに設定する	color = 'oldlace'
ベージュ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='beige')
列の値を双方向キューの先頭に追加する	deq.extendleft(iterable)
パープル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='purple')
option: エンコーディングを文字列の示すエンコーディングに設定する	encoding = s
ヒストグラムをダークグレー色を使って描画する	plt.hist(データ列, color='darkgrey')
折れ線グラフのマーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
二つのデータフレームを横方向にマージする	pd.merge(df, df2)
散布図の△印の色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
データ列と数列について散布図を描いて、下三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームを各列と列の組み合わせ毎にグループ化して、最小値を求める	df.groupby([column, column2], as_index=False).min()
データフレームを列によってグループ化して、グループごとの最大値を求める	df.groupby(column).max()
オレンジ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orange')
線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
rgbの左三角マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
option: スラグレー色を用いる	color = 'slategrey'
計算機イプシロンを求める	sys.float_info.epsilon
データフレームから指定した３つの列を選択する	df[[column, column2, column3]]
四分位数ごとに配列をビニングする	pd.qcut(aArray, 4)
散布図に赤い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームから重複ありでランダムにn行をサンプリングする	df.sample(n, replace=True)
ファイルをBOM付きを用いてオープンする]	open(filepath, encoding='utf_8_sig')
現在の月数を求める	datetime.datetime.today().month
縦軸の目盛りの表示値を変更する	plt.yticks(目盛りの値リスト)
算術計算ライブラリを使う	import math
線を色付きの実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
横棒グラフを描画して、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
option: オリベドラブ色を用いる	color = 'olivedrab'
散布図の星印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
折れ線グラフをミスティローズ色として描画する	plt.plot(データ列x, データ列y, color='mistyrose')
折れ線グラフの大バツ印を黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
option: フォントの色をティールに指定する	color = 'teal'
グラフの縦軸のラベルをuntitledに設定する	plt.ylabel('y軸ラベル')
データフレームのカラムを整数に丸める	df[col].round()
option: オリーブを使う	color = 'olive'
文字列中に部分文字列がいくつか含まれるか数える	s.count(sub)
プロットの色を明るくする	sns.set(pallete='bright')
棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
ヒストグラムをライムグリーン色として描画する	plt.hist(データ列, color='limegreen')
黄色にヒストグラムの色をセットする	plt.hist(データ列, color='yellow')
散布図に四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s')
xの小数点以下'2'桁までプリントする	print(':.2f'.format(x))
すべてのシートをファイルから読み込む	pd.read_excel(filename, sheet_name=None)
ライム色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
カウンタからイテラブルをカウントして減らす	aCounter.subtract(iterable)
データフレームのリスト列の母標準偏差を求める	df[aList].std(ddof=0)
文字列を部分文字列で分けたときの先頭の文字列	s.partition(sub)[0]
ベクトルの列ごとの最大値	np.max(aArray, axis=0)
option: ダークグリーンを使う	color = 'darkgreen'
ダークグレー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
二つの文字列をタブで区切ってプリントする	print(value, value2, sep='\t')
データフレームの中のカラムをビン数nとしてビン分割する	pd.cut(df[col], n)
ヒストグラムをダークマゼンタ色として描画する	plt.hist(データ列, color='darkmagenta')
カラーパレットを色差別なくする	sns.set(pallete='colorblind')
異なる列をキーとして二つのデータフレームを内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
縦棒グラフをパールゴールデンロッド色を用いて描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
文字列をコロンで分割して文字列リストに変換する	s.split(':')
変数を赤色にする	f'\033[31m{value}\033[0m'
ふたつのマッピングを結合する	aDict | aDict2
グリッド線を黄色くする	plt.grid(color='y')
aListn番目から要素をポップする	aList.pop(n)
マッピング上でキーが未定義	key not in aDict
ヒストグラムを実線で描画する	plt.hist(データ列, linestyle='solid')
option: 色をグレーに設定する	color = 'grey'
切片なしの単回帰モデルを新規作成する	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
シーケンスを文字列に変換して、タブで連結する	'\t'.join(map(str, iterable))
配列とイテラブルについて散布図を描画して、マーカーを左三角に指定する	plt.plot(データ列x, データ列y, marker='<')
データ列をValueMapでまとめて置き換える	ds.replace(ValueMap)
小数点数の双曲線正弦	math.sinh(x)
横軸の目盛に文字列を設定する	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
option: ターコイズ色を使う	color = 'turquoise'
折れ線グラフの色を貝殻に設定する	plt.plot(データ列x, データ列y, color='seashell')
オプションで、ファイルを使う	file = sys.open(filename, 'w')
option: スラグレー色を使う	color = 'slategrey'
分類モデルの予測精度を見る	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
初期値で全要素を初期化した行列	np.full((行数, 列数), 初期値, dtype=np.int)
データ列は何曜日か見る	ds.dt.weekday_name
データ列の第一四分位数	ds.quantile(0.25)
JSONLファイルにデータフレームをTSVファイルで書き込む	df.to_csv(filename, sep='\t')
option: フォントの色をシエナに設定する	color = 'sienna'
option: 青色を使う	color = 'blue'
赤い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
折れ線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
折れ線グラフのダイアモンドマーカーを黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
スタックをリストに変換する	list(deq)
オリーブ色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
折れ線グラフの星マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ホワイトスモーク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='whitesmoke')
回帰分析を部分的最小二乗法を用いて行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
折れ線グラフの色をライトブルーに設定する	plt.plot(データ列x, データ列y, color='lightblue')
折れ線グラフの印を星印にする	plt.plot(データ列x, データ列y, marker='*')
option: 貝殻色を使う	color = 'seashell'
折れ線グラフをロイヤルブルー色で描画する	plt.plot(データ列x, データ列y, color='royalblue')
ダークシアン色としてヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
データフレームの中の列を等量でn個にビン分割する	pd.qcut(df[col], n)
列の値によってデータフレームをグループ分けして、列挙する	[(name, group) for name, group in df.groupby(column)]
データ列の標本標準偏差を求める	ds.std()
イテラブルとシーケンスをチェインする	itertools.chain(iterable, iterable2)
数のn乗して実数による余り	pow(x, n, y)
グラフにx=0の破線を設定する	plt.axvline(x=0, linestyle='dashed')
実数の双曲線正弦の逆数を計算する	math.asinh(x)
option: フォレストグリーンにフォントの色を指定する	color = 'forestgreen'
配列から重複を除いた配列を作る	np.unique(aArray)
データフレームをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
小数点数の自然対数	math.log(x)
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='grey')
Pandasで、フォーマットfmtとしてデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
文字列中に非英字があるかどうか確認する	any(not c.isalpha() for c in s)
文字列で区切って二つの変数を表示する	print(value, value2, sep=s)
クリムゾン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
文字列をエンコーディングでバイト列に変換する	s.encode(encoding=encoding)
数字を全部使う	string.digits
数式を簡単にする	sympy.sympify(e)
データフレームのカラムを百の位で丸めて、整数型にする	df[col].round(-2).astype(int)
横軸の最大・最小を変更する	plt.xlim(最小値, 最大値)
横軸の目盛を整数のみにする	plt.xticks(np.arange(最小値, 最大値, 間隔))
整数nの八進表現	oct(n)
ダークシアグリーン色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
ヒストグラムの色をピーチパフに設定する	plt.hist(データ列, color='peachpuff')
option: マーカーの色をダーク・スラテグレーにする	markerfacecolor = 'darkslategrey'
option: 色をライトグリーンに設定する	color = 'lightseagreen'
値をマゼンタで表示できる文字列に変換する	f'\033[35m{value}\033[0m'
year年month月day日の日付時刻	datetime.datetime(year=year, month=month, day=day)
横棒グラフをミディアムスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
線グラフをミディアムブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumblue')
文字列全体をケースを無視してパターンにマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
タイムスタンプデータからn秒分減算する	aDatetime - datetime.timedelta(seconds=n)
ベクトルの形状を変形する	aArray.reshape(行数, 列数)
棒グラフをドジャーブルー色で描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
文字列を特殊文字も含め小文字にする	s.casefold()
ライトグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgrey')
アイボリー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
データフレームの行の名前を、nameからname2に付け直す	df.rename(index={name: name2})
棒グラフをミディアムオーキッド色を使って描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
option: インディアンレッド色を使う	color = 'indianred'
日付時刻データを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
散布図をアクア色で描画する	plt.scatter(データ列x, データ列y, color='aqua')
データフレームのカラムの欠損値を後の値に変更する	df[col].fillna(method='bfill')
ヒストグラムをダークカーキ色を使って描画する	plt.hist(データ列, color='darkkhaki')
折れ線グラフとしてデータ列を可視化する	plt.plot(データ列x, データ列y)
いつまでも数え上げるする	itertools.count()
上限nの両端キューをイテラブルから作成する	collections.deque(iterable, maxlen=n)
赤い左三角マーカーをリストと配列についての散布図に描く	plt.plot(データ列x, データ列y, marker='<', c='r')
文字列全体が正規表現に複数行対応としてマッチするか調べる	re.fullmatch(pattern, s, flags=re.MULTILINE)
データフレームのリストカラムの中にいくつ未入力値が含まれるか求める	df[aList].isna().sum()
option: 色をビスクに設定する	color = 'bisque'
日付データにn時間分、加算する	aDate + datetime.timedelta(hours=n)
折れ線グラフを色付きの一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
折れ線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
ラインを一点鎖線としてプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot')
rgbの四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのカラムを丸めて、整数にする	df[col].round().astype(int)
折れ線グラフの色をブランチドアーモンドに設定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
xが1、もしくは2	x == 1 or x == 2
横棒グラフをライトコーラル色で描画する	plt.barh(データ列x, データ列y, color='lightcoral')
行列の次元数	aArray.ndim
option: ダークオーキッドを用いる	color = 'darkorchid'
赤い星マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
Pandasで日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
文字列を全て小文字に変換する	s.lower()
オブジェクトのバイトサイズ	sys.getsizeof(obj)
線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
ふたつの集合は集合と互いに素か調べる	aSet.isdisjoint(aSet2)
リストと配列について散布図を描いて、マーカーをバツに変更する	plt.plot(データ列x, データ列y, marker='x')
オブジェクトは論理値クラスか調べる	isinstance(obj, bool)
カラムの欠損値を最小値に設定する	ds.fillna(ds.min())
nとn2が等しいか判定する	n == n2
SDGとして回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
xの絶対値	abs(x)
プロットを正方形にする	plt.axis('equals')
データフレームのカラムの中にある文字列の合計を数える	df[col].isin([value]).sum()
データ列の折れ線グラフを丸マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='o')
チョコレート色のヒストグラムを描画する	plt.hist(データ列, color='chocolate')
リストの長さだけ繰り返す	range(len(aList))
ヒストグラムの色をモカシンに設定する	plt.hist(データ列, color='moccasin')
ヒストグラムの色をミディアムシアグリーンに指定する	plt.hist(データ列, color='mediumseagreen')
データフレームを'A'列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby('A')]
データ列を折れ線グラフとして図示する	plt.plot(データ列x, データ列y)
配列を等量でn個にビン分割する	pd.qcut(aArray, n)
縦棒グラフを黄色色で描画する	plt.bar(データ列x, データ列y, color='yellow')
データフレームの列の欠損値を最頻値に設定する	df[col].fillna(df[col].mode().iloc[0])
option: グラフの色をミディアムブルーに指定する	color = 'mediumblue'
ライトコーラル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
option: ダークゴールデンロッド色を使う	color = 'darkgoldenrod'
散布図に赤い丸印を描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
プラットホームがWindowsかどうか調べる	sys.platform.startswith('win32')
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategray')
文字列の末尾からタブを取り除く	s.rstrip('\t')
SJISでファイルをオープンする]	open(filepath, encoding='shift_jis')
文字コードエスケープで文字列をバイト列に変換する	s.encode(encoding='unicode_escape')
nの無限の数列	itertools.repeat(n)
データ列が何分か見る	ds.dt.minute
リストの値のみ出力する	print(*aList)
データフレームのカラムの第三四分位数	df[col].quantile(0.75)
t-SNEを用いて淡く次元に削減する	sklearn.manifold.TSNE(n_components=三).fit_transform(多次元データ)
ヒストグラムをベージュ色として描画する	plt.hist(データ列, color='beige')
線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
option: ナバホホワイト色を用いる	color = 'navajowhite'
nxn2の2次元リストを作る	[[0] * n for _ in range(n2)]
option: namesをカラムの名前に指定する	names = names
option: グラフの色をミディアムパープルに設定する	color = 'mediumpurple'
折れ線グラフをダークバイオレット色を用いて描画する	plt.plot(データ列x, データ列y, color='darkviolet')
ファイルパスを書き込み用にオープンする]	open(filepath, mode='w')
ライトスカイブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
散布図をマゼンタ色で描画する	plt.scatter(データ列x, データ列y, color='magenta')
ヒストグラムをローングリーン色で描画する	plt.hist(データ列, color='lawngreen')
データフレームを列にグループ化して、それぞれのグループごとの合計を計算する	df.groupby(column).sum()
option: ライトシアン色を使う	color = 'lightcyan'
シアン色のヒストグラムを描画する	plt.hist(データ列, color='cyan')
今日の日数	datetime.datetime.today().day
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgrey')
棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
ヒストグラムの色をスラグレーに変更する	plt.hist(データ列, color='slategray')
棒グラフの色をオリーブにする	plt.bar(データ列x, データ列y, color='olive')
部分的最小二乗法で回帰分析をする	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
データフレームから重複した行を消して更新する	df.drop_duplicates(inplace=True)
データフレームの列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
散布図の星マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
多次元尺度構成法で多次元データを淡く次元に削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
Pythonパスのリストを調べる	sys.path
横棒グラフの色をダークカーキにする	plt.barh(データ列x, データ列y, color='darkkhaki')
option: 青緑にグラフの色を変更する	color = 'turquoise'
データフレームの二つのカラムを並べて箱ヒゲ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
リストと数列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
散布図に赤いバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x', c='r')
改行文字	'\n'
option: 淡い茶色色を用いる	color = 'tan'
散布図を赤い星マーカーでプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
ダークスラテグレー色でヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
線グラフの色をゲインズボロに設定する	plt.plot(データ列x, データ列y, color='gainsboro')
乱数で要素を埋めた配列	np.random.random(N)
option: 回帰木の深さを制限する	maxdepth = n
日付時刻データが月曜日か調べる	aDatetime.weekday() == 0
カデットブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
列の欠損値を最大値で置換する	ds.fillna(ds.max())
両端キューをクリアする	deq.clear()
配列とリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
全ての十六進数字	string.hexdigits
グラフの補助目盛りを有効にする	plt.minorticks_on()
データフレームの列の未入力値を最小値で埋める	df[col].fillna(df[col].min())
データフレームを各列毎にグループ化して、列の標準偏差を算出する	df.groupby(column)[column2].std()
option: 色をグリーンに設定する	color = 'green'
デピンク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
データフレームが正規分布からどの程度、尖っているか見る	df.skew()
折れ線グラフのポイントマーカーを赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
ヒストグラムの色をグリーンイエローに変更する	plt.hist(データ列, color='greenyellow')
全要素を0で初期化した行列を初期化する	np.zeros(要素数)
文字列を部分文字列によって分割する	s.split(sub)
データフレームのカーネル密度による分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
ゴーストホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='ghostwhite')
オブジェクトのプロパティの値を変更する	setattr(obj, プロパティ名, 値)
折れ線グラフの色をダークオレンジに変更する	plt.plot(データ列x, データ列y, color='darkorange')
文字列を太字でプリントする	print(f'\033[1m{value}\033[0m')
option: ロージーブラウン色を使う	color = 'rosybrown'
データ列の文字列を欠損値に変換する	ds.replace(s, np.nan)
実数の双曲線余弦の逆数	math.acosh(x)
等量でデータ列をビン数nでビン分割する	pd.qcut(ds, n)
リストと配列について散布図を描画して、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
２数の最も大きい値	max(x, y)
データ列の空文字を欠損値に変換し、ドロップする	ds.replace('', np.nan).dropna()
x軸の目盛を表示しない	plt.xticks([])
ピアソン相関係数でデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
ペルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='peru')
アルファベットを全部見る	string.ascii_letters
データフレームの列がxより大きい行を取り出す	df[df[column] > x]
option: 黄色にフォントの色を変更する	color = 'yellow'
散布図をミディアムスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
オブジェクトがタプルクラス	isinstance(obj, tuple)
データフレームを'A'列をキーにしてソートする	df.sort_values(by='A')
ゼロ埋めされた符号なし８ビット整数型の配列	np.zeros(要素数, dtype=np.uint8)
データフレームのリストカラムの中にいくつ欠損値が存在するか数える	df[aList].isna().sum()
ゴールド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='gold')
棒グラフをチョコレート色を用いて描画する	plt.bar(データ列x, データ列y, color='chocolate')
横棒グラフをダークゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
大バツ印を使い、散布図を描画する	plt.scatter(データ列x, データ列y, marker='X')
十六進文字列を整数にする	int(s, 16)
predicateFuncが真となるイテラブルの要素	itertools.takewhile(predicateFunc, iterable)
ダークシアグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkseagreen')
黒い三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='^', c='k')
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightseagreen')
実数を実数で割る	x / y
nが奇数	n % 2 == 1
データ列の中に文字列と文字列があるか	ds.isin([value, value2])
ヒストグラムをミントクリーム色で描画する	plt.hist(データ列, color='mintcream')
折れ線グラフの色をパウダーブルーに設定する	plt.plot(データ列x, データ列y, color='powderblue')
option: クリムゾンを用いる	color = 'crimson'
文字列が全てアルファベットかどうか確認する	s.isalpha()
データフレームのリスト列のNaNを第二四分位数に指定する	df[aList].fillna(df[aList].median())
昨日の日付を使う	datetime.date.today() - datetime.timedelta(days=1)
黒い右三角マーカーを使って散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
実行結果を太字にする	f'\033[1m{value}\033[0m'
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
横棒グラフの色をライムグリーンにする	plt.barh(データ列x, データ列y, color='limegreen')
ダーク・スラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
綺麗なグラフを用いる	import seaborn as sns
データ列の各データ値の出現数	ds.value_counts()
散布図を三角マーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='^')
配列をビン数nでビニングし、namesのラベルをつける	pd.cut(aArray, n, labels=names)
formatのパターンで文字列から日付時刻にする	datetime.datetime.strptime(日付の書かれた文字列, format)
折れ線グラフをパレットトルコイズ色で描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
ヒストグラムの色をカデットブルーに変更する	plt.hist(データ列, color='cadetblue')
ダークカーキ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkkhaki')
大文字・小文字を無視して正規表現で文字列を分ける	re.split(pattern, s, flags=re.IGNORECASE)
predicateFuncが真となる列の部分	itertools.takewhile(predicateFunc, iterable)
正規表現にマッチした文字列を新しい文字列で置き換える	re.sub(pattern, newsub, s)
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
Pandasでデータフレームのcollの数値時刻からPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
何回まで再帰ができるか、	sys.getrecursionlimit()
散布図をパレットトルコイズ色を用いて描画する	plt.scatter(データ列x, データ列y, color='paleturquoise')
option: セパレータを改行にする	sep = '\n'
文字列を空白によって区切って、整数リストにする	map(int, s.split())
項目名ワード引数で辞書に更新する	aDict.update(**kwargs)
配列とリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='gray')
データフレームのカラムのNaNを最大値に指定する	df[col].fillna(df[col].max())
横棒グラフをスラグレー色で描画する	plt.barh(データ列x, データ列y, color='slategrey')
横棒グラフの色をネイビーにする	plt.barh(データ列x, データ列y, color='navy')
nが無限に続くリストを得る	itertools.repeat(n)
貝殻色で線グラフを描画する	plt.plot(データ列x, データ列y, color='seashell')
プログラムをここで終了する	sys.exit()
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgrey')
折れ線グラフを色付きの一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
グレーにヒストグラムの色を設定する	plt.hist(データ列, color='grey')
メディアンでデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].median())
オーキッド色のヒストグラムを描画する	plt.hist(データ列, color='orchid')
データフレームのカラムを丸める	df[col].round()
スカイブルーにヒストグラムの色を設定する	plt.hist(データ列, color='skyblue')
数列の散布図を描画する	plt.scatter(データ列x, データ列y)
散布図に三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
データフレームを各列と列の組み合わせ毎にグループ化して最大値を求める	df.groupby([column, column2], as_index=False).max()
棒グラフの色をオレンジにする	plt.bar(データ列x, データ列y, color='orange')
双方向キューから部分を取り出す	collections.deque(itertools.islice(deq, start, end))
データフレームを各列毎にグループ化して列の分散を求める	df.groupby(column)[column2].var()
データフレームを列ごとにグループ分けし、、それぞれのグループ毎の標準偏差を計算する	df.groupby(column).std()
符号なしで整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
タン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
黒いクロスマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
文字列の右側から部分文字列を取り除く	s.rstrip(sub)
日付データををn週間後に進める	aDate + datetime.timedelta(weeks=n)
ファイルパスをバイナリ用にオープンする]	open(filepath, mode='rb')
データフレームのリストカラムの中にいくつ日付データがあるか求める	df[aList].isin([value]).sum()
散布図に赤いダイアモンド印を描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
横棒グラフをクリムゾン色として描画する	plt.barh(データ列x, データ列y, color='crimson')
アンティークホワイト色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
列を2回あわせた直積を求める	itertools.product(iterable, repeat=2)
プラットホームの名前	sys.platform
デピンク色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='deeppink')
折れ線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
横棒グラフをミディアムターコイズ色を用いて描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
option: グラフの色をネイビーに設定する	color = 'navy'
エラーなく辞書からキーの値を得る	aDict.get(key, None)
option: マーカーを大バツに指定する	marker = 'X'
散布図にダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
横棒グラフをブラウン色で描画する	plt.barh(データ列x, データ列y, color='brown')
文字列の開始位置以降に部分文字列が含まれるかどうか確認する	s.find(sub, start) != -1
折れ線グラフの四角マーカーを青くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
最大最小からベクトル	np.linspace(最小値, 最大値, 要素数)
横棒グラフを紺碧色として描画する	plt.barh(データ列x, データ列y, color='azure')
データフレームの中に文字列と日付データが存在するか	df.isin([value, value2])
option: 文字コードをBOM付きに変更する	encoding = 'utf_8_sig'
列を2回あわせた直積	itertools.product(iterable, repeat=2)
option: グラフの色をライトスレイグレーに指定する	color = 'lightslategrey'
ライトスレイグレー色でヒストグラムを描画する	plt.hist(データ列, color='lightslategray')
year年を日付に変換する	datetime.date(year=year, month=1, day=1)
クリムゾン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
折れ線グラフをナバホホワイト色を使って描画する	plt.plot(データ列x, データ列y, color='navajowhite')
space	' '
option: グラフの色を淡いピンク色に指定する	color = 'lightpink'
データフレームから列を1つのみ選択する	df[[column]]
配列の平均値を見る	np.mean(aArray)
表データを使う	import pandas as pd
ベクトルのユニークな要素を求める	np.unique(aArray)
ミディアムオーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumorchid')
クラス分類をガウス過程としてする	model = sklearn.gaussian_process.GaussianProcessClassifier()
ハニーデュー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='honeydew')
散布図をダークシアン色で描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
棒グラフの色をパレットトルコイズにする	plt.bar(データ列x, データ列y, color='paleturquoise')
ファイルパスをバイナリモードとしてオープンして]、fとする	f = open(filepath, mode='rb')
ヒストグラムの色をタンに設定する	plt.hist(データ列, color='tan')
ブルーバイオレット色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blueviolet')
フォーマットfmtでデータ列を日付データに変換する	pd.to_datetime(ds, format=fmt)
ヒストグラムをスカイブルー色を用いて描画する	plt.hist(データ列, color='skyblue')
データフレームの列を四捨五入する	df[col].round()
散布図をゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
文字列を最後の部分文字列を使って二分する	s.rpartition(sub)
データフレームの列の文字列が文字列が含まれるデータを抽出する	df[df[column].str.contains(s)]
折れ線グラフの右三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
大バツマーカーとしてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
ハニーデュー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='honeydew')
ビスク色として散布図を描画する	plt.scatter(データ列x, データ列y, color='bisque')
線グラフを半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
option: フォントの色をダークグリーンに設定する	color = 'darkgreen'
リストの先頭	aList[0]
データフレームのNaNを後の行の値に設定する	df.fillna(method='bfill')
二つの列で昇順にデータフレームを並べ直す	df.sort_values(by=['A', 'B'], ascending=True)
部分文字列を文字列の最後から探す	s.rfind(sub)
折れ線グラフの色をスチールブルーに設定する	plt.plot(データ列x, データ列y, color='steelblue')
分割数nで等しい量になるようにデータ列をビン分割する	pd.qcut(ds, n)
コーンフラワーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
データフレームのNaNを最大値で埋める	df.fillna(df.max())
CSVファイルファイル名がかどうか調べる	filename.endswith('.csv')
双方向キューが空でないか	len(deq) != 0
データ列をn個にビンニングしてnamesのラベルをつける	pd.cut(ds, n, labels=names)
ダークサーモン色のヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
折れ線グラフをライトスレイグレー色として描画する	plt.plot(データ列x, データ列y, color='lightslategray')
実数のcosの逆数	math.acos(x)
多次元データをt分布型確率的近傍埋め込み法を用いて濃く次元に次元削減する	sklearn.manifold.TSNE(n_components=二).fit_transform(多次元データ)
データ列の折れ線グラフを描いて、カラーコードで色を設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームを各列毎に分類して、文字列というグループの個数を計算する	df.groupby(column).size()[s]
オブジェクトが関数かどうか	callable(obj)
横棒グラフをライムグリーン色で描画する	plt.barh(データ列x, データ列y, color='limegreen')
グラフに鉛直方向の一点鎖線を付ける	plt.axvline(x=0, linestyle='dashbot')
Pandasで、データ列をタイムスタンプに変換する	pd.to_datetime(ds)
リストとリストについて散布図を描画して、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフの色をオレンジレッドに設定する	plt.plot(データ列x, データ列y, color='orangered')
棒グラフの色をブルーバイオレットにする	plt.bar(データ列x, データ列y, color='blueviolet')
折れ線グラフの大バツ印の大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
option: 四角マーカーを使う	marker = 's'
ヒストグラムの色をライトスレイグレーに設定する	plt.hist(データ列, color='lightslategrey')
ヒストグラムをミディアムスレートブルー色として描画する	plt.hist(データ列, color='mediumslateblue')
標準入力から1行だけ改行なしで読む	sys.stdin.readline().rstrip()
ヒストグラムの範囲を設定する	plt.hist(データ列, range=(start, end))
rgbの四角マーカーを配列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図の色をオールドレースにする	plt.scatter(データ列x, データ列y, color='oldlace')
散布図をrgbの右三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
タイムスタンプデータを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
縦棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
Pandasで、エポック秒のデータ列から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
ドジャーブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
横棒グラフの色を青緑にする	plt.barh(データ列x, データ列y, color='teal')
両端キューのn番目に文字列を差し込む	deq.insert(n, element)
折れ線グラフを青緑色を使って描画する	plt.plot(データ列x, データ列y, color='teal')
option: エンコーディングを文字列の示す文字コードに設定する	encoding = s
散布図をクリムゾン色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
折れ線グラフをライトゴールドロディイエロー色として描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
散布図に赤い四角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
カラーバーを横向きでつける	plt.colorbar(orientation='horizontal')
リストの末尾にリストを追加して拡張する	aList.extend(aList2)
スピアマン相関係数でデータフレームのリストで指定された列の相関行列	df[aList].corr(method='spearman')
散布図の色をトマトにする	plt.scatter(データ列x, データ列y, color='tomato')
データ列が正規分布に従うか仮説検定する	scipy.stats.shapiro(データ列)
スラグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
全要素を０で初期化した複素数型の行列を作る	np.zeros(行数, 列数, dtype=bool)
Pandasで、データフレームのカラムを日付データに変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
双方向キューのstart〜endの部分要素	collections.deque(itertools.islice(deq, start, end))
分類木の重要度を可視化する	plt.barh(X.columns, model.feature_importances_)
多次元尺度構成法で多次元データをパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
横棒グラフをダークグレー色として描画する	plt.barh(データ列x, データ列y, color='darkgray')
データフレームから重複したデータを残さず削除する	df.drop_duplicates(keep=False)
option: グラフの色をライトグレーにセットする	color = 'lightgrey'
折れ線グラフの色をローングリーンに変更する	plt.plot(データ列x, データ列y, color='lawngreen')
JSONLファイルを読み込む	pd.read_json(filename, orient='records', lines=True)
部分文字列をエラーなく文字列の接頭辞から除去する	s.removeprefix(sub)
Pandasで、データ列を日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
オリーブ色のヒストグラムを描画する	plt.hist(データ列, color='olive')
破線を用いて配列の変化をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed')
黒い丸マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
カラーバーを描画する	plt.colorbar()
スレートブルー色のヒストグラムを描画する	plt.hist(データ列, color='slateblue')
option: 色のアルファをする	alpha = 0.5
データフレームのリストカラムが正規分布からどの程度尖っているか確認する	df[aList].skew()
option: 未入力値も含める	dropna = True
▽印を使い、折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
Pandasでデータフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
文字列が文字列より辞書順で前か調べる	s < s2
トマト色でヒストグラムを描画する	plt.hist(データ列, color='tomato')
スチールブルー色でヒストグラムを描画する	plt.hist(データ列, color='steelblue')
線グラフの色をダークレッドに設定する	plt.plot(データ列x, データ列y, color='darkred')
ヒストグラムをアイボリー色を使って描画する	plt.hist(データ列, color='ivory')
グラフのフォントを日本語表示にする	sns.set(font='IPAexGothic')
折れ線グラフをスチールブルー色を用いて描画する	plt.plot(データ列x, データ列y, color='steelblue')
小数点数の絶対値	math.fabs(x)
ヒストグラムの色を小麦色に変更する	plt.hist(データ列, color='wheat')
配列と配列についての散布図に赤い左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<', c='r')
ヒストグラムをライトサーモン色として描画する	plt.hist(データ列, color='lightsalmon')
散布図をネイビー色で描画する	plt.scatter(データ列x, データ列y, color='navy')
横棒グラフの色を白にする	plt.barh(データ列x, データ列y, color='white')
option: ホワイトスモークにグラフの色を指定する	color = 'whitesmoke'
option: グラフのラインスタイルを一点鎖線に設定する	linestyle = 'dashbot'
横棒グラフをシアン色で描画する	plt.barh(データ列x, データ列y, color='cyan')
淡いピンク色色のヒストグラムを描画する	plt.hist(データ列, color='lightpink')
最大長を指定して、両端キュー	collections.deque(maxlen=n)
棒グラフの色をダークサーモンにする	plt.bar(データ列x, データ列y, color='darksalmon')
散布図の色をゴールドにする	plt.scatter(データ列x, データ列y, color='gold')
データフレームの列とカラムに重複があれば、落とす	df.drop_duplicates(subset=column)
ベクトル演算をする	import numpy as np
タイムスタンプデータをn時間前に戻す	aDatetime - datetime.timedelta(hours=n)
option: グラフの色をダーク・スラテグレーに変更する	color = 'darkslategrey'
無限にnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
辞書に辞書のエントリを加えて、更新する	aDict.update(aDict2)
綺麗なグラフを使う準備をする	import seaborn as sns
ヒストグラムで配列を可視化する	plt.hist(データ列)
八進文字列をbytesizeバイトのバイト列にする	int(s, 8).to_bytes(length=bytesize, byteorder='big')
配列をn個に分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
ファイルパスを読み込みできるように開く]	open(filepath, mode='r')
カラムのどの値が頻出か見る	ds.mode()
グラフに水平方向の点線をつける	plt.axhline(y=0, linestyle='dotted')
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか見る	re.match(pattern, s, flags=re.IGNORECASE)
日付時刻データの分を使う	aDatetime.minute
日付データが日付データより遅いか判定する	aDate > aDate2
データフレームの未入力値を前の行の値に指定する	df.fillna(method='ffill')
ダークバイオレット色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkviolet')
イテラブルとリストについて散布図をプロットして丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
エクセルファイルファイルからnとn2のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
行列の行	aArray[行番号]
スノー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
線グラフをアイボリー色として描画する	plt.plot(データ列x, データ列y, color='ivory')
小麦色色のヒストグラムを描画する	plt.hist(データ列, color='wheat')
データフレームを各列と列の組み合わせ毎にグループ化し、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
青にヒストグラムの色を設定する	plt.hist(データ列, color='blue')
nはn2と等しいか調べる	n == n2
散布図に赤い右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>', c='r')
ミディアムバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
散布図をオーキッド色で描画する	plt.scatter(データ列x, データ列y, color='orchid')
nがn2以下、またはn3以上	n <= n2 or n >= n3
option: ブラックにフォントの色を変更する	color = 'black'
option: サンディーブラウンを用いる	color = 'sandybrown'
棒グラフの色をベージュにする	plt.bar(データ列x, データ列y, color='beige')
マルーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
辞書を階層化マップにする	collections.ChainMap(aDict)
散布図をライム色で描画する	plt.scatter(データ列x, データ列y, color='lime')
代数計算ライブラリを用いる	import sympy
棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
数式の数値を計算する	float(e)
青緑色で散布図を描画する	plt.scatter(データ列x, データ列y, color='teal')
棒グラフの色をバリーウッドにする	plt.bar(データ列x, データ列y, color='burlywood')
ヒストグラムの色をブランチドアーモンドに設定する	plt.hist(データ列, color='blanchedalmond')
棒グラフをミスティローズ色として描画する	plt.bar(データ列x, データ列y, color='mistyrose')
散布図に大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X')
データフレームのリスト列のヒートマップを描画する	sns.heatmap(df[aList].corr())
イテラブルから両端キューを作成する	collections.deque(iterable)
データフレームから一行をランダムに選択する	df.sample()
データフレームを複数の列によってまとめたグループを見る	df.groupby(columns)
タプルの文字列が最初に見つかるインデックス	aTuple.index(element)
欠損値も加えてデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], dummy_na=True)
ヒストグラムの色を青緑に設定する	plt.hist(データ列, color='teal')
中央値でデータフレームの中の列をビン分割する	pd.qcut(df[col], 2)
破壊的にデータフレームの列をドロップする	df.drop(column, axis=1, inplace=True)
option: グラフの色をパウダーブルーに変更する	color = 'powderblue'
保存するCSVの小数点以下の桁数を設定する	df.to_csv(filename, float_format='%.3f')
横棒グラフの色をナバホホワイトにする	plt.barh(データ列x, データ列y, color='navajowhite')
データフレームのどの値が頻出か見る	df.mode()
n個の整数リスト	list(range(n))
整数に数を加算する	x + y
赤い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
データフレームのカラムの中に日付データがあるか調べる	df[col].isin([value])
文字列を最後の部分文字列で分割する	s.rpartition(sub)
実数の天井数を求める	math.ceil(x)
両端キューの右	deq[-1]
異なる列をキーとして二つのデータフレームをジョインする	pd.merge(df, df2, left_on='A', right_on='B')
ヒストグラムを白くする	plt.hist(データ列, color='w')
折れ線グラフの色を茶色に変更する	plt.plot(データ列x, データ列y, color='brown')
棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
線グラフをモカシン色を用いて描画する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightseagreen')
整数nを十六進表現にする	hex(n)
option: グラフの色をミディアムバイオレットレッドに設定する	color = 'mediumvioletred'
折れ線グラフの▲マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ブラック色の線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
配列と配列について散布図をプロットしてマーカーを右三角に指定する	plt.plot(データ列x, データ列y, marker='>')
文字列の開始位置から終了位置までの範囲で部分文字列をカウントする	s.count(sub, start, end)
タン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='tan')
横棒グラフをチョコレート色で描画する	plt.barh(データ列x, データ列y, color='chocolate')
option: コーラルにフォントの色を設定する	color = 'coral'
データフレームの文字列を欠損値に変換する	df.replace(s, np.nan)
折れ線グラフの色をミントクリームに変更する	plt.plot(データ列x, データ列y, color='mintcream')
数式の展開を行う	sympy.expand(e)
散布図の下三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
mathモジュールをインポートする	import math
リストとリストについての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
option: 四角マーカーを加える	marker = 's'
xを文字列にしてファイルに書く	f.write(str(x))
横棒グラフをパレットトルコイズ色として描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
ヒストグラムの色をダークオリーブグリーンに設定する	plt.hist(データ列, color='darkolivegreen')
Pandasで、データ列のエポック秒から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
データフレームに重複があるか見る	df.duplicated()
option: フォントの色を茶色に設定する	color = 'brown'
リストを等量で分割数nでビニングする	pd.qcut(aList, n)
横棒グラフをシスル色で描画する	plt.barh(データ列x, データ列y, color='thistle')
実数を三乗する	x ** 3
文字列に漢字が含まれる	re.search('[\u4E00-\u9FD0]', s)
π	math.pi
option: グラフの色をライトシアンに指定する	color = 'lightcyan'
実行結果を黒色で表示する	print(f'\033[30m{value}\033[0m')
データフレームのカラムを柱状グラフにする	plt.hist(df[column])
青い一点鎖線で数列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
縦棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
データフレームの中の未入力値の合計を数える	df.isna().sum()
ヒストグラムを暗い赤色として描画する	plt.hist(データ列, color='darkred')
文字列内にひとつでも数字が含まれるかどうか調べる	any(c.isdigit() for c in s)
データフレームの列の文字列が文字列が含まれる行を抽出する	df[df[column].str.contains(s)]
茶色色でヒストグラムを描画する	plt.hist(データ列, color='brown')
モデルから目的変数を予測する	y_pred = model.predict(説明変数)
縦軸の目盛の表示を変更する	plt.yticks(目盛りの値リスト)
大きさnでリストとリストの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
棒グラフをシスル色で描画する	plt.bar(データ列x, データ列y, color='thistle')
データフレームの中にある日付データの数を数える	df.isin([value]).sum()
散布図に赤い左三角印を描画する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ダークサーモン色でヒストグラムを描画する	plt.hist(データ列, color='darksalmon')
リストとリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
黒い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
黒いクロスマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='k')
行列の行ごとの分散	np.var(aArray, axis=1)
散布図の丸マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
二つのカウンタの共通する要素	aCounter & aCounter2
文字列の開始位置からと終了位置の間に部分文字列が含まれるか	s.find(sub, start, end) != -1
文字列の開始位置以降が部分文字列で開始する	s.startswith(sub, start)
option: マーカーの色をミッドナイトブルーにする	markerfacecolor = 'midnightblue'
箱ひげ図としてデータフレームの２つのカラムを並べて描画する	plt.boxplot([df['カラム'], df['カラム']])
option: グラフの色をライトゴールドロディイエローに設定する	color = 'lightgoldenrodyellow'
棒グラフをディープスカイブルー色で描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データフレームをTSVファイルとしてJSONLファイルに保存する	df.to_csv(filename, sep='\t')
データフレームを関数の値によってグループ分けして、列挙する	[(name, group) for name, group in df.groupby(関数)]
散布図の色をダークバイオレットにする	plt.scatter(データ列x, データ列y, color='darkviolet')
散布図のバツ印を赤色にする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
標準エラー	sys.stderr
縦棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
ヒストグラムの色をパウダーブルーに設定する	plt.hist(データ列, color='powderblue')
ヒストグラムと勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.HistGradientBoostingClassifier()
配列の移り変わりを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
縦棒グラフをダークマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
ヒストグラムの色をパレットトルコイズに変更する	plt.hist(データ列, color='paleturquoise')
散布図の色をパパイヤウィップにする	plt.scatter(データ列x, データ列y, color='papayawhip')
半透明の一点鎖線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
nがn2で割り切れない	n % n2 != 0
シャルトリューズ色のヒストグラムを描画する	plt.hist(データ列, color='chartreuse')
折れ線グラフをインディゴ色として描画する	plt.plot(データ列x, データ列y, color='indigo')
スタックの要素を反転する	deq.reverse()
プロットにグリッド線を表示する	plt.grid(True)
option: グラフの色をバリーウッドに設定する	color = 'burlywood'
深紅色の散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
リストの推移を半透明の一点鎖線として描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
TSVをデータフレームとして読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
折れ線グラフの右三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
リストとリストについての散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ヒストグラムをオーキッド色を使って描画する	plt.hist(データ列, color='orchid')
x軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
option: スラッシュをセパレータで使う	sep = '/'
▲印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ヒストグラムの色をマルーンに指定する	plt.hist(データ列, color='maroon')
横棒グラフをアリスブルー色で描画する	plt.barh(データ列x, データ列y, color='aliceblue')
折れ線グラフをコーンフラワーブルー色として描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
カラムの欠損値を平均で置換する	ds.fillna(ds.mean())
データフレームを表示するとき、n行までデータフレームを表示できるようにする	pd.set_option('display.max_rows', n)
黒い四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c='k')
円プロットの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
横棒グラフの色をライトサーモンにする	plt.barh(データ列x, データ列y, color='lightsalmon')
散布図の星印の太さを変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
シーグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='seagreen')
グラフの色を暗くする	sns.set(pallete='dark')
ダークグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgray')
散布図にダイアモンドマーカーを使う	plt.scatter(データ列x, データ列y, marker='D')
最初のカテゴリーを除外してデータフレームの列をベクトルに変換する	pd.get_dummies(df[column], drop_first=True)
項目名が辞書上で定義されているか	key in aDict
文字列は全て数値か調べる	s.isnumeric()
リストを等量でn個にビン分割する	pd.qcut(aList, n)
横棒グラフをフクシア色として描画する	plt.barh(データ列x, データ列y, color='fuchsia')
辞書のキーを要素にする	aDict[key] = element
option: 追加モードに指定する	mode = 'a'
option: グラフの色をゴールデンロッドに変更する	color = 'goldenrod'
タイムスタンプデータを文字列でフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
データフレームのリストカラムの値が未入力値かどうか調べる	df[aList].isna()
棒グラフを耐火レンガ色で描画する	plt.bar(データ列x, データ列y, color='firebrick')
option: マーカーの色をローングリーンにする	markerfacecolor = 'lawngreen'
ディレクトリをPythonパスに加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='gray')
データ列の日	ds.dt.day
バイナリ用にファイルをオープンする]	open(filepath, mode='rb')
option: コーンズシルクに色を指定する	color = 'cornsilk'
折れ線グラフの三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgray')
データ列を横棒プロットにする	plt.barh(ラベル列, データ列)
データフレームを複数の列の値によってグループ化し、要約統計量を計算する	df.groupby(columns).describe()
Pandasで、データ列を日付データに変換しインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
option: 複数行に対応する	flag = re.MULTILINE
折れ線グラフの色を淡い茶色に設定する	plt.plot(データ列x, データ列y, color='tan')
option: グラフの色を紺碧にセットする	color = 'azure'
縦棒グラフを描く	plt.bar(ラベル列, データ列)
n2がn以上、かつ、n3以下	n <= n2 and n2 <= n3
文字列の接尾辞が部分文字列か調べる	s.endswith(sub)
暗い赤色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
折れ線グラフのバツマーカーの太さを指定する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: ラベンダーブラッシュを使う	color = 'lavenderblush'
要素一つのタプル	(element,)
n÷n2	n / n2
データフレームの指定された列を抽出する	df[column]
オブジェクトにプロパティが存在するか調べる	hasattr(obj, プロパティ名)
二つの集合の和集合	aSet.union(aSet2)
表データを使用する	import pandas as pd
nで乱数シードを固定する	random.seed(n)
option: シャルトリューズ色を使う	color = 'chartreuse'
グラフの描画を見やすくする	import seaborn as sns
線グラフの色をダークサーモンに変更する	plt.plot(データ列x, データ列y, color='darksalmon')
折れ線グラフの色をトマトに設定する	plt.plot(データ列x, データ列y, color='tomato')
データフレームで列の重複を見る	df.duplicated(subset=column)
折れ線グラフにバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x')
組のn番目の	aTuple[n]
K最近傍法で回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
線グラフの色をグリーンイエローにセットする	plt.plot(データ列x, データ列y, color='greenyellow')
option: 先頭のカラムをインデックスに変更する	index_col = 0
データ列の値をValueMapで置換する	ds.replace(ValueMap)
回帰モデルを交差検証する	sklearn.model_selection.cross_val_score(model, 説明変数, 目的変数, cv=5, scoring='r2')
データフレームのカラムをグループ化して、ヒストグラムにする	sns.histplot(df, x='列名', hue='カテゴリ名')
データフレームとしてファイルを読み込む	pd.read_excel(filename)
２つの浮動小数点数が近似値かどうか調べる	math.isclose(x, x2)
棒グラフの色をゴールデンロッドにする	plt.bar(データ列x, データ列y, color='goldenrod')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
散布図の色をグレーにする	plt.scatter(データ列x, データ列y, color='gray')
データフレームとデータフレームの列を横方向に合体させる	pd.concat([df, ds], axis=1)
混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
option: グラフの色を白に変更する	color = 'white'
ヒートマップでクラス分類の偽陽性を見る	sns.heatmap(confusion_matrix(正解データ列, 予測データ列), annot=True, cmap='Reds')
ヒストグラムの色をパールバイオレットレッドに設定する	plt.hist(データ列, color='palevioletred')
option: パープル色を使う	color = 'purple'
文字列を部分文字列で区切って文字列リストに変換する	s.split(sub)
ファイルパスからストリームをオープンして]fileとする	file = open(filepath)
リストからベクトルを作成する	np.array(aList)
折れ線グラフをドジャーブルー色で描画する	plt.plot(データ列x, データ列y, color='dodgerblue')
データフレームの列をヒストグラムで描画する	plt.hist(df[column])
勾配ブースティングで回帰分析をする	model = sklearn.ensemble.GradientBoostingRegressor()
nが-9以上、9以下か調べる	-9 <= n <= 9
両端キュー中の値を数える	deq.count(element)
棒グラフをオーキッド色で描画する	plt.bar(データ列x, データ列y, color='orchid')
点線でヒストグラムを描画する	plt.hist(データ列, linestyle='dotted')
グラフ中で日本語フォントを表示できるようにする	sns.set(font='IPAexGothic')
箱ひげ図としてイテラブルを描く	plt.boxplot(データ列)
データフレームのリストカラムの中に文字列と文字列が存在するか調べる	df[aList].isin([value, value2])
データフレームを列名リストによってで大きい順に並べ直す	df.sort_values(by=column, ascending=False)
散布図をバリーウッド色で描画する	plt.scatter(データ列x, データ列y, color='burlywood')
リストを引数として展開して表示する	print(*aList)
option: フォントの色をゴールドに指定する	color = 'gold'
データ列と配列についての散布図に赤い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
列の値にデータフレームをグループ分けし、それぞれのグループ毎の最大値を求める	df.groupby(column).max()
浮動小数点数のcosの逆数を求める	math.acos(x)
オブジェクトのプロパティの値	getattr(obj, プロパティ名)
nは配列のいづれかか調べる	n in aArray
option: コーンフラワーブルー色を使う	color = 'cornflowerblue'
散布図の四角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
棒グラフをインディゴ色で描画する	plt.bar(データ列x, データ列y, color='indigo')
リストとリストについて散布図を描いてクロスマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
ヒストグラムを暗い赤色で描画する	plt.hist(データ列, color='darkred')
線グラフを白色を用いて描画する	plt.plot(データ列x, データ列y, color='white')
折れ線グラフの色を真紅に設定する	plt.plot(データ列x, データ列y, color='crimson')
整数を百の位で丸める	round(x, -2)
タプルの要素を並べる	sorted(aTuple)
モデルの予測値と実測値を比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
ヒストグラムの色を濃い青に指定する	plt.hist(データ列, color='darkblue')
折れ線グラフの▽マーカーを青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
辞書の全をクリアする	aDict.clear()
option: マーカーの色をデピンクにする	markerfacecolor = 'deeppink'
option: 色を紺にセットする	color = 'darkblue'
ゴーストホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
タプルをnから番号付けする	enumerate(aTuple, start=n)
横棒グラフをシスル色を用いて描画する	plt.barh(データ列x, データ列y, color='thistle')
カテゴリ列で色分けしてデータフレームをに箱ひげ図として可視化する	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
y軸だけグリッド線	plt.grid(axis='y')
横棒グラフの色をシアンにする	plt.barh(データ列x, データ列y, color='cyan')
2つの行列を行方向に連結する	np.concatenate([aArray, aArray2], axis=1)
折れ線グラフをライトサーモン色で描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
データフレームのリストカラムの未入力値を後の行の値に設定する	df[aList].fillna(method='bfill')
散布図の▲マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
スピアマン相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
辞書の浅いコピーを生成する	aDict.copy()
配列とリストについての散布図に黒いポイントマーカーをプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
グリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
プラットホームがMacOSかどうか調べる	sys.platform.startswith('darwin')
横棒グラフの色を淡いピンク色にする	plt.barh(データ列x, データ列y, color='lightpink')
部分文字列か	sub in s
縦棒グラフをゲインズボロ色を使って描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: 茶色色を用いる	color = 'brown'
option: NaNも無視しない	dropna = True
全要素を0で初期化した配列	np.zeros(要素数)
ミントクリーム色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mintcream')
配列と同じ大きさの空配列を作る	np.empty_like(aArray)
option: サンディーブラウン色を使用する	color = 'sandybrown'
円グラフにラベルをつける	plt.pie(データ列, startangle=90, labels=ラベル列)
文字列中のタブ文字をn個の空白に置換する	s.expandtabs(tabsize=n)
散布図をピーチパフ色として描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームの列の文字列が正規表現文字列にマッチしないデータを選択する	df[not df[column].str.match(s)]
ダークグレー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
option: タンを使用する	color = 'tan'
ミディアムターコイズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
Pythonパスにディレクトリを加える	sys.path.append(os.path.join(os.path.dirname(__file__), dir))
データ列をn個にビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
横棒グラフを淡いピンク色色を用いて描画する	plt.barh(データ列x, データ列y, color='lightpink')
赤い点線としてデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
カラムのpercent分位数	ds.quantile(percent/100)
文字列が組に含まれないか調べる	element not in aTuple
文字コードtextで既存のファイルを追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
十六進文字列をbytesizeバイトのバイト列に変換する	int(s, 16).to_bytes(length=bytesize, byteorder='big')
フクシアにヒストグラムの色を設定する	plt.hist(データ列, color='fuchsia')
配列の列ごとの平均値	np.mean(aArray, axis=0)
y軸の目盛りを整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
option: 文字列の示すエンコーディングを使う	encoding = s
文字列が英数字かどうか判定する	s.isalnum()
データフレームから数値データだけ抽出する	df.select_dtypes('number')
配列を円プロットにする	plt.pie(データ列, startangle=90)
行列の全要素を指定の値にする	aArray[:, :] = 指定の値
ビスク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='bisque')
データフレームの列からユニークな要素を抽出しリスト化する	df[col].unique().tolist()
タイムスタンプデータが何時か知る	aDatetime.hour
option: マーカーの色をスチールブルーにする	markerfacecolor = 'steelblue'
本日が月曜日か確認する	datetime.datetime.today().weekday() == 0
折れ線グラフを青い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
option: マーカーの色をグリーンイエローにする	markerfacecolor = 'greenyellow'
折れ線グラフにダイアモンドマーカーを用いる	plt.plot(データ列x, データ列y, marker='D')
リストと数列の散布図を描画して右三角マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
nの2乗を計算する	n ** 2
Pandasで、フォーマットで文字列をタイムスタンプ型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
オブジェクトは関数か判定する	callable(obj)
正規表現を事前に大文字・小文字を無視してコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
変数を表示する	print(value)
文字列は組に含まれるかどうか調べる	element in aTuple
高頻出方からカウンタを列挙する	aCounter.most_common()
横棒グラフをオールドレース色を使って描画する	plt.barh(データ列x, データ列y, color='oldlace')
整数nをn2分の一にする	n //= n2
option: マーカーの色をダークシアンにする	markerfacecolor = 'darkcyan'
本日が火曜日か	datetime.datetime.today().weekday() == 1
データフレームのカラムの50パーセンタイル	df[col].median()
スカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='skyblue')
ダークグレー色としてヒストグラムを描画する	plt.hist(データ列, color='darkgray')
タイムスタンプデータが火曜日かどうか調べる	aDatetime.weekday() == 1
第２引数で指定されたファイルの名前	sys.argv[1]
エクセルファイルファイルのn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
リストを三つ並べて度数分布図にする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
nが負の数か調べる	n < 0
数列とリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
折れ線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
option: 小麦色色を用いる	color = 'wheat'
散布図の星マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
option: グラフの色をオールドレースに設定する	color = 'oldlace'
実行結果を表示する	print(value)
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategray')
データフレームのリストカラムの欠損値を最大値で埋める	df[aList].fillna(df[aList].max())
文字列の右側からタブを除去する	s.rstrip('\t')
ファイルをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
レモンシフォン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
横棒グラフをオリーブ色として描画する	plt.barh(データ列x, データ列y, color='olive')
文字列リストをつなげる	''.join(aStringList)
option: 色を青にする	color = 'blue'
棒グラフをマゼンタ色で描画する	plt.bar(データ列x, データ列y, color='magenta')
ハニーデュー色のヒストグラムを描画する	plt.hist(データ列, color='honeydew')
データフレームのどの値が最も現れるか確認する	df.mode()
回帰木を可視化する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
部分文字列が文字列の開始位置からと終了位置までの間に含まれない	s.find(sub, start, end) == -1
折れ線グラフに青いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
ヒストグラムをマゼンタ色として描画する	plt.hist(データ列, color='magenta')
データフレームの列のユニークな要素	df[col].unique()
ファイルパスを追加モードとしてオープンして]fとする	f = open(filepath, mode='a')
散布図をオーキッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='orchid')
Pandasで、データフレームのcollを書式fmtで日付データにする	pd.to_datetime(df[col], format=fmt)
折れ線グラフをミスティローズ色で描画する	plt.plot(データ列x, データ列y, color='mistyrose')
プロットを論文に変更する	sns.set(context='paper')
折れ線グラフの色をミディアムパープルに設定する	plt.plot(データ列x, データ列y, color='mediumpurple')
辞書をJSONフォーマットでファイル出力に保存する	json.dump(aDict, fout, ensure_ascii=False)
コレクションを使う	import collections
ゴーストホワイト色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
数列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
点線としてリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted')
アリスブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
新しいロジスティック回帰モデルを作る	model = sklearn.linear_model.LogisticRegression()
ライトスチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
レモンシフォン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームのリスト列の文字列をNaNに変換する	df[aList].replace(s, np.nan)
option: マーカーの色をダークカーキにする	markerfacecolor = 'darkkhaki'
データ列の折れ線プロットを描画して色をRGBで設定する	plt.plot(データ列x, データ列y, color='#800080')
ヒストグラムの色をラベンダーにセットする	plt.hist(データ列, color='lavender')
散布図に四角印を加える	plt.scatter(データ列x, データ列y, marker='s')
xの印字可能な文字列	ascii(x)
文字列中から正規表現にケースを無視してマッチする位置を探す	re.search(pattern, s, flags=re.IGNORECASE)
散布図の色をブラックにする	plt.scatter(データ列x, データ列y, color='black')
フォレストグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
ISO書式の文字列をタイムスタンプに変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
折れ線グラフのマーカーを大バツにする	plt.plot(データ列x, データ列y, marker='X')
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgray')
リストと配列についての散布図にrgbの四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
配列とリストについての散布図に赤い丸マーカーをプロットする	plt.plot(データ列x, データ列y, marker='o', c='r')
二進文字列をバイナリにする	int(s, 2).to_bytes(length=bytesize, byteorder='big')
縦棒グラフをパレットトルコイズ色で描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
option: オーキッドにフォントの色を設定する	color = 'orchid'
四分位数ごとに配列をビン分割する	pd.qcut(aArray, 4)
横棒グラフをアイボリー色で描画する	plt.barh(データ列x, データ列y, color='ivory')
Pandasで、フォーマットfmtで文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
今日が金曜日かどうか調べる	datetime.datetime.today().weekday() == 4
グリッドの線種を破線に変更する	plt.grid(linestyle='dashed')
棒グラフをアリスブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='aliceblue')
ヒストグラムの色をデピンクに設定する	plt.hist(データ列, color='deeppink')
本日が何曜日か知る	datetime.datetime.today().weekday()
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='gray')
ヒストグラムの色をトマトに設定する	plt.hist(データ列, color='tomato')
オブジェクトはリストか調べる	isinstance(obj, list)
レモンシフォン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
辞書のキーを要素に設定する	aDict[key] = element
ディムグレー色でヒストグラムを描画する	plt.hist(データ列, color='dimgray')
xが1、もしくは2、もしくは3に等しい	x == 1 or x == 2 or x == 3
データフレームから重複を認めてランダムにn行をサンプリングする	df.sample(n, replace=True)
ターコイズ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='turquoise')
モカシン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
データフレームを各列毎に集計し、、列の合計を計算する	df.groupby(column)[column2].sum()
散布図をタン色で描画する	plt.scatter(データ列x, データ列y, color='tan')
カウンタをリストに変換する	list(aCounter)
option: フォントの色をシャルトリューズに設定する	color = 'chartreuse'
ライム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lime')
異なる列をキーとして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
Pandasでデータ列を日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
0からnの範囲	range(n)
データフレームの列をインプレイスで削除する	df.drop(column, axis=1, inplace=True)
グラフをいい感じにセットする	sns.set()
横棒グラフをハニーデュー色で描画する	plt.barh(データ列x, データ列y, color='honeydew')
データフレームの重複した行を数える	df.duplicated().sum()
カラーバーを付ける	plt.colorbar()
FIXME:カテゴリーデータを出現頻度順にソートする	df['A'].value_counts().sort_index().index
データフレームのカラムの中にいくつ文字列が存在するか数える	df[col].isin([value]).sum()
文字列が文字列より辞書順で後かどうか調べる	s > s2
アイボリー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='ivory')
option: ライムグリーン色を使用する	color = 'limegreen'
データフレームの75パーセンタイル	df.quantile(0.75)
リストとデータ列についての散布図に黒い上三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
二つのオブジェクトが等しい	obj == obj2
要素が集合のメンバー	element in aSet
文字列リストを連結してひとつの文字列にする	''.join(aStringList)
文字列は組に含まれる	element in aTuple
レモンシフォン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lemonchiffon')
モデルの予測値と実測値を対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
等間隔のベクトルを作る＼	np.arange(開始値, 終了値, 等差)
縦棒グラフをインディアンレッド色として描画する	plt.bar(データ列x, データ列y, color='indianred')
散布図の色をダークグレーにする	plt.scatter(データ列x, データ列y, color='darkgray')
列によってデータフレームをまとめたグループ	df.groupby(column)
折れ線グラフの色をレモンシフォンに指定する	plt.plot(データ列x, データ列y, color='lemonchiffon')
データフレームの列を度数分布図にする	plt.hist(df[column])
データフレームの欠損値を直後の値で埋める	df.fillna(method='bfill')
右三角印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
文字列を走査しパターンにマッチするか見る	re.search(pattern, s)
配列とリストについての散布図に大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X')
空の集合	set()
コマンドの第2引数を知る	sys.argv[1]
option: 耐火レンガ色を使う	color = 'firebrick'
散布図の色をライトスカイブルーにする	plt.scatter(データ列x, データ列y, color='lightskyblue')
タン色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='tan')
行列の値	aArray[行番号, 列番号]
フローラルホワイト色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
現在が木曜日かどうか	datetime.datetime.today().weekday() == 3
実数の指数を求める	math.frexp(x)[1]
データフレームから型の列のみ抽出する	df.select_dtypes(ty)
数字を全て見る	string.digits
半透明の点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
カラムの中にある文字列の数を数える	ds.isin([value]).sum()
n進文字列を整数に変換する	int(s, n)
文字列の両端から空白と改行を除く	s.strip()
グリーンイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='greenyellow')
既存のファイルを文字列の示すエンコーディングで追加できるようにオープンする]	open(filepath, mode='a', encoding=s)
散布図の四角印の線幅を設定する	plt.scatter(データ列x, データ列y, marker='s', markeredgewidth=2.5)
データ列の変化を実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
データフレームを列でソートして、更新する	df.sort_values(by=column, inplace=True)
ベクトルの個数	aArray.size
option: どの列も行にしない	index_col = None
日付時刻データの年数	aDatetime.year
折れ線グラフをシルバー色として描画する	plt.plot(データ列x, データ列y, color='silver')
オレンジレッド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='orangered')
散布図の丸マーカーの色を設定する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='#800080')
データフレームを表示するとき、小数点以下の表示精度をn桁に指定する	pd.set_option('precision', n)
外れ値に強い線形分類器を作る	model = sklearn.linear_model.HuberClassifier()
エポック秒からタイムスタンプに変換する	datetime.datetime.fromtimestamp(timestamp)
横棒グラフをミディアムスプリンググリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumspringgreen')
option: グラフの色を赤に変更する	color = 'red'
組の先頭	aTuple[0]
ファイルパスから拡張子付きのファイル名を取り出す	os.path.basename(filepath)
データフレームのリストカラムの平均を求める	df[aList].mean()
x軸の目盛の表示を変更する	plt.xticks(目盛りの値リスト)
option: モカシンにグラフの色を設定する	color = 'moccasin'
変数をスワップする	x, y = y, x
折れ線グラフの丸マーカーを黒くする	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
散布図の色をカデットブルーにする	plt.scatter(データ列x, データ列y, color='cadetblue')
茶色色のヒストグラムを描画する	plt.hist(データ列, color='brown')
ラベル付きの円グラフを描く	plt.pie(データ列, startangle=90, labels=ラベル列)
データフレームを関数でグループ化する	df.groupby(関数)
ピンクにヒストグラムの色を設定する	plt.hist(データ列, color='pink')
データフレームの中で、列と列の重複を調べる	df.duplicated(subset=[column, column2])
option: 文字コードをBOM付きに指定する	encoding = 'utf_8_sig'
散布図に黒いバツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
リストと数列の散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
散布図に▲マーカーを使う	plt.scatter(データ列x, データ列y, marker='^')
nが1、もしくは2か調べる	n == 1 or n == 2
ヒストグラムの色をミディアムシアグリーンに設定する	plt.hist(データ列, color='mediumseagreen')
散布図の星マーカーの色を変える	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='#800080')
ヒストグラムの線種を一点鎖線に設定する	plt.hist(データ列, linestyle='dashbot')
文字列内にひとつでも空白が含まれるか調べる	any(c.isspace() for c in s)
ベクトルをイテラブルから作る	np.array(iterable)
option: グラフの線の幅を3.0ポイントに設定する	linewidth = 3.0
折れ線グラフの星印の色を変更する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='#800080')
スカイブルー色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='skyblue')
データフレームを２つの列の値によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(['A', 'B'])]
スノー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='snow')
折れ線グラフをペルー色で描画する	plt.plot(データ列x, データ列y, color='peru')
列'A'と列'B'をキーとして２つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
option: グラフの色をダークスラテグレーにする	color = 'darkslategray'
ターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='turquoise')
リストとリストの散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
レモンシフォン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lemonchiffon')
ファイルをオープンして]、書き込みストリームを使う	open(filepath, mode='w')
変数をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
配列とデータ列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
集合から別の集合の要素を全て除く	aSet.difference_update(aSet2)
ヒストグラムをライム色で描画する	plt.hist(データ列, color='lime')
ヒストグラムの線の種類を点線に設定する	plt.hist(データ列, linestyle='dotted')
タプルの末尾からn番目以前の部分を取り出す	aTuple[:-n]
折れ線グラフをフクシア色で描画する	plt.plot(データ列x, データ列y, color='fuchsia')
青い棒グラフを描画する	plt.bar(データ列x, データ列y, color='b')
辞書上でキーが定義済みか確認する	key in aDict
オールドレース色の線グラフを描画する	plt.plot(データ列x, データ列y, color='oldlace')
項目名がマッピング上で定義されていないかどうか調べる	key not in aDict
赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='red')
option: グラフの色をダークオレンジに指定する	color = 'darkorange'
プロットの中の縦軸にラベルをつける	plt.ylabel('y軸ラベル')
データフレームのリスト列の欠損値を最大値に設定する	df[aList].fillna(df[aList].max())
2数の一番小さい値	max(x, y)
横棒グラフをオリーブ色を用いて描画する	plt.barh(データ列x, データ列y, color='olive')
組を昇順にソートする	sorted(aTuple, reverse=True)
データフレームを各列毎に集約して、列の個数を求める	df.groupby(column)[column2].count()
文字列をマゼンタでプリントできる文字列にする	f'\033[35m{value}\033[0m'
折れ線グラフの色をラベンダーブラッシュに設定する	plt.plot(データ列x, データ列y, color='lavenderblush')
等間隔でn個に配列をビン分割する	pd.cut(aArray, n)
データフレームを各カラムと列の組み合わせ毎に集約し、、平均値を算出する	df.groupby([column, column2], as_index=False).mean()
横棒グラフの色をターコイズにする	plt.barh(データ列x, データ列y, color='turquoise')
四角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
棒グラフをライトイエロー色を使って描画する	plt.bar(データ列x, データ列y, color='lightyellow')
ターコイズ色で線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
箱ヒゲ図にラベルをつける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
ロバストな線形分類モデルを用意する	model = sklearn.linear_model.HuberClassifier()
数値を数値に変換する	float(e)
nが奇数か調べる	n % 2 == 1
実数の整数部	math.modf(x)[1]
データフレームの相関行列	df.corr()
イテラブルを配列に変換する	np.array(iterable)
列の未入力値を直後の値にセットする	ds.fillna(method='bfill')
２つのデータ列をボックスチャートにする	plt.boxplot([データ列, データ列])
ミディアムオーキッドにヒストグラムの色を変更する	plt.hist(データ列, color='mediumorchid')
option: パープルを使う	color = 'purple'
データフレームを小さい順に列で破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
全要素を０で初期化した論理値型の行列	np.zeros(行数, 列数, dtype=np.int32)
クリムゾン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='crimson')
データフレームを列によって集約して、それぞれのグループごとの標準偏差を求める	df.groupby(column).std()
データフレームを'A'列の値によってまとめたグループ	df.groupby('A')
三つ並べてヒストグラムを描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
ダークオーキッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkorchid')
option: マーカーを下三角に設定する	marker = 'v'
文字列を左寄せにする	s.ljust(文字列幅)
ヒストグラムの色を茶色に指定する	plt.hist(データ列, color='brown')
リストとデータ列についての散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
文字列をエラーを無視してバイト列に変換する	s.encode(errors='ignore')
日付データと日付データの時間差が何分か知る	(aDate - aDate2).total_seconds()//60
要素を両端キューにenqueueする	deq.appendleft(element)
線グラフの色を暗い赤に変更する	plt.plot(データ列x, データ列y, color='darkred')
サドルブラウン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
データフレームのリスト列のどの値が最も現れるか見る	df[aList].mode()
淡い茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
データ列と数列の散布図に黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
棒グラフの色をライトグレーにする	plt.bar(データ列x, データ列y, color='lightgray')
データフレームが重複しているか	df.duplicated()
プラットホームがLinuxか	sys.platform.startswith('linux')
option: 配列のデータ型を指定する	dtype = bool
ライトコーラル色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームを列によって並べて下位を取り出す	df.sort_values(columns).tail(n)
'A'列の値によってデータフレームをまとめたグループ	df.groupby('A')
二つのデータ列の残差を散布図として描く	sns.residplot(x=データ列, y=データ列)
rgbの大バツマーカーを配列とリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgray')
option: グラフの色をパレットトルコイズに設定する	color = 'paleturquoise'
ハイパボリック・コサインの逆数	math.acosh(x)
線グラフの線の種類を一点鎖線に設定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
データフレームのリストカラムの中に文字列と日付データが含まれるか	df[aList].isin([value, value2])
文字列を青色で表示できる文字列に変換する	f'\033[34m{value}\033[0m'
日付時刻データと日付時刻データの時間差を秒数で計算する	(aDatetime - aDatetime2).total_seconds()
折れ線グラフを青い一点鎖線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
文字列を空白で分割して、文字列リストにする	s.split()
nを切り捨てながら半分にする	n //= 2
option: グラフの色をミディアムシアグリーンに設定する	color = 'mediumseagreen'
データを四分位点としてスケール変換する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
ヒストグラムを茶色色で描画する	plt.hist(データ列, color='brown')
データ列が正規分布からどの程度歪んでいるか確認する	ds.kurt()
半透明の一点鎖線を使ってデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
ヒストグラムをシルバー色を使って描画する	plt.hist(データ列, color='silver')
ヒストグラムの色をタンに変更する	plt.hist(データ列, color='tan')
線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
'A'列の値でデータフレームをグループ化し、記述統計量を求める	df.groupby('A').describe()
nがn2未満、もしくはn3以上	n < n2 or n >= n3
option: グラフの色をスラグレーに指定する	color = 'slategray'
データ列の推移を色付きの実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
昇順にデータフレームを破壊的に'A'列によって並べ直す	df.sort_values(by='A', ascending=True, inplace=True)
option: グラフの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
データ列の平均値	ds.mean()
option: フォントの色をオリーブに設定する	color = 'olive'
三つの文字列を出力する	print(value, value2, value3)
文字列で区切って２つの文字列をプリントする	print(value, value2, sep=s)
option: 印をバツに変更する	marker = 'x'
リストとイテラブルの散布図に赤い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='r')
ダークスレートブルー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
実数の仮数部	math.frexp(x)[0]
色を濃くする	sns.set(pallete='deep')
散布図に赤い星マーカーを描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
リストと配列について散布図をプロットして、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
赤いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
散布図を赤い丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
n回文字列が繰り返すイテラブル	itertools.repeat(element, n)
ファイルをEUCでオープンする]	open(filepath, encoding='euc_jp')
option: 改行コードを動作環境依存に設定する	newline = None
データフレームとデータ列を横方向につなぐ	pd.concat([df, ds], axis=1)
文字列を最後の部分文字列で二分し、残りの文字列を使う	s.rpartition(sub)[-1]
データフレームをエクセルファイルファイルでJSONLファイルに書き込む	df.to_excel(filename)
ファイルから入力ストリームを使う	open(filepath)
ファイルパスをオープンして]、バイナリストリームを使う	open(filepath, mode='rb')
等差数列を行列に変換する	np.arange(開始値, 終了値, 等差)
ヒストグラムの色をミディアムターコイズに設定する	plt.hist(データ列, color='mediumturquoise')
ミスティローズにヒストグラムの色を設定する	plt.hist(データ列, color='mistyrose')
数式の変数についてのn階微分を求める	sympy.diff(e, z, n)
横棒グラフをゴーストホワイト色として描画する	plt.barh(データ列x, データ列y, color='ghostwhite')
option: グラフの種類を破線に設定する	linestyle = 'dashed'
散布図の色をブランチドアーモンドにする	plt.scatter(データ列x, データ列y, color='blanchedalmond')
文字列を特殊文字も含め小文字に変換する	s.casefold()
棒グラフをゲインズボロ色を使って描画する	plt.bar(データ列x, データ列y, color='gainsboro')
option: ヘッダをnamesに設定する	header = names
線グラフの色をブランチドアーモンドに指定する	plt.plot(データ列x, データ列y, color='blanchedalmond')
シーケンスから重複を取り除く	set(iterable)
データフレームの列がリストに含まれる行を抽出する	df[df[column].isin(aList)]
実数の整数部を求める	math.modf(x)[1]
データフレームを散布図で可視化して、カテゴリ別に色を変更する	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
空のリスト	[]
棒グラフの色をフォレストグリーンにする	plt.bar(データ列x, データ列y, color='forestgreen')
散布図のマーカーの色を変える	plt.scatter(データ列x, データ列y, markerfacecolor='#800080')
option: 色をスチールブルーに設定する	color = 'steelblue'
折れ線グラフに黒い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
折れ線グラフの色をカラーコードで指定する	plt.plot(データ列x, データ列y, color='#800080')
列ごとにデータフレームをグループ化して最小値を求める	df.groupby(column).min()
データ列の中の欠損値の合計を数える	ds.isna().sum()
散布図の丸マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
リストと数列についての散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
rgbの▽マーカーを数列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
数式を微分する	sympy.diff(e)
ヒストグラムを複数横に並べて描く	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
折れ線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
小数点以下3桁までJSONLファイルにデータフレームを保存する	df.to_csv(filename, float_format='%.3f')
散布図をパールバイオレットレッド色を用いて描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
データフレームのリスト列が正規分布からどの程度、尖っているか見る	df[aList].skew()
option: グリーンに色を設定する	color = 'green'
カデットブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
option: 丸マーカーを用いる	marker = 'o'
配列の散布図を描画する	plt.scatter(データ列x, データ列y)
rgbの四角マーカーを使って散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
散布図をコーンフラワーブルー色として描画する	plt.scatter(データ列x, データ列y, color='cornflowerblue')
アンティークホワイト色で散布図を描画する	plt.scatter(データ列x, データ列y, color='antiquewhite')
データフレームの内容を確認する	df.head()
点線に折れ線グラフを変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
データフレームを複数の列によってで破壊的に並べる	df.sort_values(by=column, inplace=True)
データフレームのリストカラムの欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
ヒストグラムをスラグレー色で描画する	plt.hist(データ列, color='slategray')
辞書のキーを列挙する	list(aDict)
散布図をインディゴ色として描画する	plt.scatter(データ列x, データ列y, color='indigo')
折れ線グラフをピーチパフ色で描画する	plt.plot(データ列x, データ列y, color='peachpuff')
線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
ヒストグラムを紺色を用いて描画する	plt.hist(データ列, color='darkblue')
option: ブルーバイオレット色を使う	color = 'blueviolet'
シアン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cyan')
実数が正の数	x > 0
折れ線グラフをバリーウッド色を使って描画する	plt.plot(データ列x, データ列y, color='burlywood')
データフレームの列の中にある文字列の個数を数える	df[col].isin([value]).sum()
データ列をボックスチャートとして描画する	plt.boxplot(データ列)
文字列の開始位置から終了位置までの範囲で部分文字列を数える	s.count(sub, start, end)
折れ線グラフの色をダークオーキッドに設定する	plt.plot(データ列x, データ列y, color='darkorchid')
散布図の右三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='b')
オリーブ色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
横棒グラフの色をフクシアにする	plt.barh(データ列x, データ列y, color='fuchsia')
列によってデータフレームをソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
データフレームのカラムの名前を列挙する	df.columns
表データを使う	import pandas as pd
黒い丸マーカーをリストと数列の散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='k')
タプルの最後を求める	aTuple[-1]
データ列の移り変わりを半透明の点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
xの小数点以下'2'桁までをプリントする	print(':.2f'.format(x))
リストと数列について散布図を描き、クロスマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: 色の透明度を指定する	alpha = 0.5
配列とリストについての散布図に黒い星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c='k')
ヒストグラムの色をハニーデューに設定する	plt.hist(データ列, color='honeydew')
散布図を白色で描画する	plt.scatter(データ列x, データ列y, color='white')
数を三乗する	x ** 3
ファイルをバイナリできるようにオープンする]	open(filepath, mode='rb')
リストの総和	sum(aList)
部分的最小二乗回帰モデルを用意する	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
option: ダークブルーを使う	color = 'darkblue'
データフレームのカラムのNaNをモードで補う	df[col].fillna(df[col].mode().iloc[0])
文字列の先頭から空白を取り除く	s.lstrip(' ')
暗い赤色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
色付きの点線でラインをプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
ファイルをバイナリモードでオープンして]、fとする	f = open(filepath, mode='rb')
option: グラフの色をマゼンタに設定する	color = 'magenta'
レベッカパープル色のヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
散布図の下三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
データフレームの列の未入力値を前の行の値に指定する	df[col].fillna(method='ffill')
サポートベクター回帰モデルを新規作成する	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
ファイルから拡張子付きのファイル名を使う	os.path.basename(filepath)
折れ線グラフのポイント印の大きさを変更する	plt.plot(データ列x, データ列y, marker='.', markersize=2.0)
偽	False
option: バリーウッドを用いる	color = 'burlywood'
文字列の先頭の文字	s[0]
ディムグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
ライトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
散布図の星印を黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
棒グラフの色をライトシアンにする	plt.bar(データ列x, データ列y, color='lightcyan')
タプルの項目名と値を入れ替える	{v: k for k, v in aDict.items()}
棒グラフをネイビー色で描画する	plt.bar(データ列x, データ列y, color='navy')
黒色で変数をプリントする	print(f'\033[30m{value}\033[0m')
option: グラフの色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
現在が土曜日か判定する	datetime.datetime.today().weekday() == 5
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()
赤いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
option: 欠損値を先頭にする	na_position = 'first'
n個にデータ列をビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
散布図の印を下三角印にする	plt.scatter(データ列x, データ列y, marker='v')
データフレームの列と列の各列間の相関係数	df[[column, column2]].corr()
ファイルパスを読み込みモードとして開いて]fとする	f = open(filepath, mode='r')
折れ線グラフを青緑色として描画する	plt.plot(データ列x, データ列y, color='teal')
データフレームを各列と列の組み合わせ毎にグループ化して標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
折れ線グラフのマーカーを右三角印にする	plt.plot(データ列x, データ列y, marker='>')
散布図に▽マーカーを使用する	plt.scatter(データ列x, データ列y, marker='v')
折れ線グラフの左三角マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
線グラフの色をベージュに変更する	plt.plot(データ列x, データ列y, color='beige')
新しいリッジ回帰とロッソ回帰のハイブリットモデルを作る	model = sklearn.linear_model.ElasticNet()
カテゴリ別で色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
フォレストグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='forestgreen')
文字列の左側から空白を消す	s.lstrip(' ')
'A'列と'B'列によってデータフレームをソートする	df.sort_values(by=['A', 'B'])
カデットブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
データ列のタイムゾーンを日本に変更する	ds.tz_convert('Asia/Tokyo')
option: ミディアムスレートブルー色を使う	color = 'mediumslateblue'
データフレームを列でグループ化し、記述統計量を求める	df.groupby(column).describe()
データフレームの中で何行、重複するか調べる	df.duplicated().sum()
ミディアムブルー色のヒストグラムを描画する	plt.hist(データ列, color='mediumblue')
散布図をダークサーモン色で描画する	plt.scatter(データ列x, データ列y, color='darksalmon')
散布図の星マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='k')
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gray')
ペールグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t')
二進数文字列を整数に変換する	int(s, 2)
モデルの当てはまりの良さを求める	sklearn.metrics.r2_score(目的変数, model.predict(説明変数))
データフレームのカラムを散布図で可視化する	sns.scatterplot(data=df, x='列名', y='列名')
文字列が全て数字か調べる	s.isdigit()
ヒストグラムの色をコーンフラワーブルーに指定する	plt.hist(データ列, color='cornflowerblue')
option: マーカーの色を変更する	markerfacecolor = '#800080'
ダーク・スラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
折れ線グラフをカーキ色を用いて描画する	plt.plot(データ列x, データ列y, color='khaki')
ダークバイオレットにヒストグラムの色を設定する	plt.hist(データ列, color='darkviolet')
option: バイナリ書き込み用に設定する	mode = 'wb'
ロージーブラウン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rosybrown')
データフレームから型の列を抽出する	df.select_dtypes(ty)
ベージュ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='beige')
ブランチドアーモンドにヒストグラムの色を指定する	plt.hist(データ列, color='blanchedalmond')
最大値・最小値の範囲として一様な疑似乱数を計算する	random.uniform(最小値, 最大値)
値を両端キューのn番目に挿入する	deq.insert(n, element)
ヒストグラムをサドルブラウン色で描画する	plt.hist(データ列, color='saddlebrown')
option: 読み込むシートの名前をnamesに設定する	sheet_name = names
nからstep間隔で無限にカウントアップする	itertools.count(start=n, step=step)
新しい文字列として文字列中の正規表現を置き換える	re.sub(pattern, newsub, s)
アクア色の線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
折れ線グラフをグレー色として描画する	plt.plot(データ列x, データ列y, color='gray')
日付時刻データからn秒分、引く	aDatetime - datetime.timedelta(seconds=n)
現在のローカルなタイムスタンプを見る	datetime.datetime.today()
ライトスカイブルー色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightskyblue')
ライトブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightblue')
等間隔でデータ列をn個にビン分割する	pd.cut(ds, n)
文字列を空白によって区切り、、整数リストに変換する	map(int, s.split())
折れ線グラフの下三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
折れ線グラフをグレー色で描画する	plt.plot(データ列x, データ列y, color='grey')
データ列の欠損値を平均値で置換する	ds.fillna(ds.mean())
rgbの▲マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgrey')
データフレームの欠損値を平均値で埋める	df.fillna(df.mean())
文字列を部分文字列で分けたときの前半の文字列	s.partition(sub)[0]
現在のモジュールを得る	sys.modules[__name__]
フローラルホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
散布図をラベンダー色で描画する	plt.scatter(データ列x, データ列y, color='lavender')
データフレームの列の文字列長を列として見る	df[col].str.len()
整数nの八進文字列	oct(n)[2:]
データフレームを列によってグループ化する	df.groupby(column)
リストの末尾に文字列を追加する	aList.append(element)
追加できるように文字コードtextで既存のファイルを開く]	open(filepath, mode='a', encoding=text)
散布図の右三角マーカーの線幅を変える	plt.scatter(データ列x, データ列y, marker='>', markeredgewidth=2.5)
ブルーバイオレット色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blueviolet')
タプル内の要素が全て真か調べる	all(aTuple)
キューのn番目に要素を挿入する	deq.insert(n, element)
線グラフの色をライトスカイブルーに設定する	plt.plot(データ列x, データ列y, color='lightskyblue')
棒グラフを耐火レンガ色として描画する	plt.bar(データ列x, データ列y, color='firebrick')
列の重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
散布図をダーク・スラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategrey')
正規表現モジュールをインポートする	import re
日付時刻データの分数を使う	aDatetime.minute
サポートベクターマシンとして回帰分析を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
小数点数とyの斜辺を求める	math.hypot(x, y)
列でデータフレームを整列する	df.sort_values(by=column)
列の値でデータフレームを分類し、各グループごとの平均値を求める	df.groupby(column).mean()
プラットフォームの符号付き整数の最大値	sys.maxsize
線グラフを色付きの破線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
option: マーカーの色をライトグレーにする	markerfacecolor = 'lightgray'
ダーク・スラテグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
データフレームのカラムの欠損値を最頻値で埋める	df[col].fillna(df[col].mode().iloc[0])
リストと数列について散布図を描画して、マーカーをポイントにセットする	plt.plot(データ列x, データ列y, marker='.')
日付時刻データが火曜日か調べる	aDatetime.weekday() == 1
データフレームを正規表現でまとめて置き換える	df.replace(pattern, repl, regex=True)
前の行の値でデータフレームのカラムの未入力値を補う	df[col].fillna(method='ffill')
英字を全部使う	string.ascii_letters
データフレームを各列と列の組み合わせ毎にグループ化して、合計を計算する	df.groupby([column, column2], as_index=False).sum()
ダークオーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
実数は有限か調べる	math.isfinite(x)
散布図の左三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='#800080')
データフレームのカラムの未入力値を最小値に設定する	df[col].fillna(df[col].min())
散布図を暗い赤色で描画する	plt.scatter(データ列x, データ列y, color='darkred')
折れ線グラフを赤色で描画する	plt.plot(データ列x, データ列y, color='red')
option: 行列のデータ型を指定する	dtype = np.int
nはn2と等しいか	n == n2
option: アクア色を使う	color = 'aqua'
データフレームのカラムの中にいくつ文字列があるか数える	df[col].isin([value]).sum()
データフレームのリストカラムを小数点以下n桁で四捨五入する	df[aList].round(n)
データフレームを複数の列で並べ直し、、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
浮動小数点数の逆余弦を求める	math.acos(x)
ミディアムパープル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
Pythonパスの一覧	sys.path
値を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
option: グラフの色をピンクに変更する	color = 'pink'
折れ線グラフをパウダーブルー色で描画する	plt.plot(データ列x, データ列y, color='powderblue')
双方向キューの最初の値を求める	deq[0]
option: マゼンタにグラフの色を設定する	color = 'magenta'
オリーブ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
散布図の三角マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ヒストグラムをハニーデュー色で描画する	plt.hist(データ列, color='honeydew')
日付データにn分を加算する	aDate + datetime.timedelta(minutes=n)
文字列はリストに含まれるか	element in aList
二つの関係がスーパーセットか調べる	aSet.issuperset(aSet2)
option: ライトグリーンを使う	color = 'lightgreen'
リストとリストの散布図を描画し、、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
ディープスカイブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
インディアンレッド色のヒストグラムを描画する	plt.hist(データ列, color='indianred')
配列とリストの散布図を描いて、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフの色をライトグレーにする	plt.plot(データ列x, データ列y, color='lightgray')
縦棒グラフをライトスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='lightsteelblue')
スラグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
データフレームからカラムを４つのみ選択する	df[[column, column2, column3, column4]]
タプルをn回、加える	aTuple * n
横棒グラフを紺碧色を用いて描画する	plt.barh(データ列x, データ列y, color='azure')
option: ローングリーンを用いる	color = 'lawngreen'
データフレームを'A'列によって降順に破壊的に並べる	df.sort_values(by='A', ascending=False, inplace=True)
グラフのパレットを暗くする	sns.set(pallete='dark')
エクセルファイルファイルからを読み込む	pd.read_excel(filename)
ミディアムシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
ローングリーン色でヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
option: 下三角印を描画する	marker = 'v'
折れ線グラフの色をミディアムスプリンググリーンに設定する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
黒い右三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='>', c='k')
ライトグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgreen')
回帰分析をK最近傍法で行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
折れ線グラフの下三角印を赤色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
線グラフの色をライトゴールドロディイエローに指定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
散布図のマーカーを四角にする	plt.scatter(データ列x, データ列y, marker='s')
ヒストグラムの色を赤に設定する	plt.hist(データ列, color='red')
入力ストリームを一行ずつ読み込む	f.readline()
いつまでもnからカウントアップする	itertools.count(start=n)
横棒グラフをフクシア色で描画する	plt.barh(データ列x, データ列y, color='fuchsia')
ダークオーキッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorchid')
列名リストでデータフレームをまとめたグループ	df.groupby(columns)
横棒グラフをスレートブルー色として描画する	plt.barh(データ列x, データ列y, color='slateblue')
nがn2より大きいか調べる	n > n2
三二ビット整数型の０で全要素を初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
ファイルから追加ストリームを開いて]fとする	f = open(filepath, mode='a')
ヒストグラムをゲインズボロ色で描画する	plt.hist(データ列, color='gainsboro')
バギングとして回帰分析を行う	model = sklearn.ensemble.BaggingRegressor(n_estimators=10)
データフレームのカラムの母標準偏差を求める	df[col].std(ddof=0)
option: フォントの色をライムに設定する	color = 'lime'
実数のn乗を計算する	pow(x, n)
option: パールゴールデンロッド色を用いる	color = 'palegoldenrod'
折れ線グラフの色をライトグリーンにセットする	plt.plot(データ列x, データ列y, color='lightgreen')
n割るmの有理数表現	fractions.Fraction(numerator=n, denominator=m)
散布図を四角印を使って描画する	plt.scatter(データ列x, データ列y, marker='s')
データフレームのNaNを後の行の値で補う	df.fillna(method='bfill')
整数nを符号付きでバイト列に変換する	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
ファイルから1文字、読み込む	f.read(1)
データ列の折れ線グラフをバツ印で描画する	plt.plot(データ列x, データ列y, marker='x')
カデットブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cadetblue')
綺麗なグラフを使用する	import seaborn as sns
回帰分析をブースティングで行う	model = sklearn.ensemble.AdaBoostRegressor(random_state=0, n_estimators=100)
データ列の曜日が何日目か見る	ds.dt.dayofweek
option: 印を大バツに変更する	marker = 'X'
追加できるようにSJISとして既存のファイルを開く]	open(filepath, mode='a', encoding='shift_jis')
文字列を走査し、正規表現にマッチするか見る	re.search(pattern, s)
黒い大バツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
配列の平均値	np.mean(aArray)
十六進数字を全部使う	string.hexdigits
散布図のダイアモンドマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
折れ線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
散布図をパウダーブルー色で描画する	plt.scatter(データ列x, データ列y, color='powderblue')
折れ線グラフの大バツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
線グラフの色をローングリーンに設定する	plt.plot(データ列x, データ列y, color='lawngreen')
リストとリストについて散布図を描き、、上三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを小数点以下n桁で丸める	df.round(n)
option: ベクトルのデータ型を指定する	dtype = np.int
横棒グラフをアクア色で描画する	plt.barh(データ列x, データ列y, color='aqua')
にバイオリン図でデータフレームをプロットする	sns.violinplot(x='カテゴリ列', y='列', data=df)
データ列を10の位で四捨五入する	ds.round(-1)
散布図をチョコレート色で描画する	plt.scatter(データ列x, データ列y, color='chocolate')
スーパーセット	aSet.issuperset(aSet2)
破壊的にデータフレームを列によってによってソートする	df.sort_values(by=column, inplace=True)
データフレームの指定された列を配列として抽出する	df[column].values
棒グラフを淡い茶色色で描画する	plt.bar(データ列x, データ列y, color='tan')
タプルを配列にする	np.array(iterable)
データ列のNaNを直後の値で埋める	ds.fillna(method='bfill')
貝殻色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
'A'列によってによって破壊的にデータフレームをソートする	df.sort_values(by='A', inplace=True)
データフレームを散布図で描画し、、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
青紫色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='violet')
ディープスカイブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deepskyblue')
折れ線グラフの色をブラウンに設定する	plt.plot(データ列x, データ列y, color='brown')
棒グラフをパールゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
折れ線グラフをゴールド色として描画する	plt.plot(データ列x, データ列y, color='gold')
データフレームの欠損値を直前の値で埋める	df.fillna(method='ffill')
nが1、もしくは2、もしくは3に等しいかどうか判定する	n == 1 or n == 2 or n == 3
文字列を走査し、正規表現にASCII限定としてマッチするか見る	re.search(pattern, s, flags=re.ASCI)
文字列はタプルの要素でない	element not in aTuple
データフレームで、列と列に重複があるか見る	df.duplicated(subset=[column, column2])
日付時刻データと日付時刻データの時間差	aDatetime - aDatetime2
データフレームの列の歪度を求める	df[col].kurt()
データ列の正規分布に対する上下広がりを求める	ds.skew()
xとyの商と余りを同時に求める	divmod(x, y)
横棒グラフの色を貝殻にする	plt.barh(データ列x, データ列y, color='seashell')
データ列が何日か調べる	ds.dt.day
折れ線グラフの色をカーキに変更する	plt.plot(データ列x, データ列y, color='khaki')
日付データが月曜日か	aDate.weekday() == 0
ローングリーン色のヒストグラムを描画する	plt.hist(データ列, color='lawngreen')
黒い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='k')
option: 下三角印を加える	marker = 'v'
1からNまでの行列	np.arange(1, N+1)
タイムスタンプデータにn日分、加える	aDatetime + datetime.timedelta(days=n)
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategrey')
SJISでTSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
リスト内の要素は少なくともひとつ真	any(aList)
行列のムーア・ペンローズの擬似逆行列を求める	np.linalg.pinv(aArray)
新しいサポートベクトル分類器を作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
平均線付き箱ひげ図をプロットする	plt.boxplot(データ列, meanline=True)
option: ライムにグラフの色をセットする	color = 'lime'
データフレームのカラムの曜日数	df[col].dt.dayofweek
数列とリストについての散布図にrgbの丸マーカーを描く	plt.plot(データ列x, データ列y, marker='o', c=rgb)
Pandasで、データ列のエポック秒から日付データに変換する	pd.to_datetime(ds, unit='s', utc=True)
nが5で割り切れる	n % 5 == 0
配列の行列式を求める	np.linalg.det(aArray)
浮動小数点数を文字列にする	str(x)
棒グラフをライトゴールドロディイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: ラベンダーブラッシュ色を使用する	color = 'lavenderblush'
印字可能な文字を使う	string.printable
グラフの用途を画面に設定する	sns.set(context='notebook')
小数点数の双曲線正接の逆数	math.atanh(x)
棒グラフをディープスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
データ列の未入力値を第二四分位数に設定する	ds.fillna(ds.median())
Pandasで、フォーマットfmtでデータフレームのcollをdatetime64型にする	pd.to_datetime(df[col], format=fmt)
カウンタを低頻出方からリストとして得る	aCounter.most_common()[::-1]
タイムスタンプデータにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
散布図の下三角印を青色にする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
組合せ	math.comb(n, k)
リストとリストについての散布図に赤いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='r')
昇順に複数の列によって表データをソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
スレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
モデルをあてはめる	model.fit(説明変数, 目的変数)
nを八進文字列に変換する	oct(n)[2:]
option: ミディアムターコイズを使う	color = 'mediumturquoise'
ヒストグラムをゴールデンロッド色として描画する	plt.hist(データ列, color='goldenrod')
両端キュー中の数値のインデックス	deq.index(element)
ダークグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
要素ひとつのタプルを得る	(element,)
配列の推移を破線で描く	plt.plot(データ列x, データ列y, linestyle='dashed')
組の最初を捨てる	aTuple[1:]
折れ線グラフに青い左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
茶色色で線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
度数分布図を三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
変数を白色化する	f'\033[37m{value}\033[0m'
二つのカウンタの共通する値を求める	aCounter & aCounter2
ブラックにヒストグラムの色を設定する	plt.hist(データ列, color='black')
リストとデータ列について散布図を描画してバツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
折れ線グラフの▼マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
データフレームを10の位で四捨五入する	df.round(-1)
散布図の色をミディアムスプリンググリーンにする	plt.scatter(データ列x, データ列y, color='mediumspringgreen')
暗い赤色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
散布図の色をホワイトスモークにする	plt.scatter(データ列x, データ列y, color='whitesmoke')
ダークオレンジ色のヒストグラムを描画する	plt.hist(データ列, color='darkorange')
散布図でデータフレームのカラムを可視化する	sns.scatterplot(data=df, x='列名', y='列名')
平均値でデータフレームの列の欠損値を埋める	df[col].fillna(df[col].mean())
配列と数列についての散布図にrgbのバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c=rgb)
散布図に青い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
リストにリストを追加し、拡張する	aList.extend(aList2)
文字列中の部分文字列を回数を制限して別の文字列に置き換える	s.replace(sub, newsub, n)
アルファベットを全部使う	string.ascii_letters
散布図の色を黄色にする	plt.scatter(データ列x, データ列y, color='yellow')
日付時刻データの分数	aDatetime.minute
棒グラフをライムグリーン色として描画する	plt.bar(データ列x, データ列y, color='limegreen')
プログラムの実行をここで終了する	sys.exit()
文字列のエポック秒からタイムスタンプに変換する	pd.to_datetime(s, unit='s', utc=True)
棒グラフの色をコーラルにする	plt.bar(データ列x, データ列y, color='coral')
辞書をインデント幅nのJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
グレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='grey')
散布図をシスル色で描画する	plt.scatter(データ列x, データ列y, color='thistle')
散布図の色をオリベドラブにする	plt.scatter(データ列x, データ列y, color='olivedrab')
option: ダークターコイズ色を使う	color = 'darkturquoise'
グラフを画面に指定する	sns.set(context='notebook')
オブジェクトが辞書クラスか確認する	isinstance(obj, dict)
追加できるように既存のファイルをEUCを用いてオープンする]	open(filepath, mode='a', encoding='euc_jp')
option: フォントの色をオレンジレッドに変更する	color = 'orangered'
散布図にポイントマーカーを使用する	plt.scatter(データ列x, データ列y, marker='.')
nにn2をかける	n * n2
環境がLinuxかどうか判定する	sys.platform.startswith('linux')
option: ダークスラテグレーを使う	color = 'darkslategray'
縦棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
リストをカンマ区切りで表示する	print(*aList, sep=',')
整数nを符号付きで長さn2のバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big', signed=True)
棒グラフをダークオリーブグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
ファイルをSJISでオープンする]	open(filepath, encoding='shift_jis')
今日の日付	datetime.date.today()
データフレームから指定された４つの列を選択する	df[[column, column2, column3, column4]]
ヒストグラムの色をミディアムパープルに設定する	plt.hist(データ列, color='mediumpurple')
option: マーカーの色をパウダーブルーにする	markerfacecolor = 'powderblue'
折れ線プロットにラベルを付ける	plt.plot(データ列x, データ列y, label='ラベル')
整数nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
文字列の終了位置以前に部分文字列がないか調べる	s.find(sub, 0, end) == -1
最大長を指定して、双方向キュー	collections.deque(maxlen=n)
列'A'と列'B'をキーとして二つのデータフレームを結合する	pd.merge(df, df2, left_on='A', right_on='B')
ミディアムパープル色のヒストグラムを描画する	plt.hist(データ列, color='mediumpurple')
ダークブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: ダークカーキを使用する	color = 'darkkhaki'
ロバスト分類モデルを作る	model = sklearn.linear_model.RANSACClassifier(random_state=0)
サーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='salmon')
本日は何日か知る	datetime.datetime.today().day
ダークカーキ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
双方向キューは空であるかどうか判定する	len(deq) == 0
作画のx軸とy軸の比率を等しくする	plt.axis('equals')
データフレームを表示するとき、表示できる最大行数を変更する	pd.set_option('display.max_rows', n)
y座標の目盛を表示しない	plt.yticks([])
ユニコードに対応する文字	chr(unicode)
棒グラフをパールバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='palevioletred')
option: 箱ひげ図に平均を加える	showmeans = False
横棒グラフをシルバー色で描画する	plt.barh(データ列x, データ列y, color='silver')
リストとデータ列についての散布図に右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>')
option: モカシン色を使う	color = 'moccasin'
ポイントマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='.')
オブジェクトのオブジェクト識別子	id(obj)
データ列の欠損値をメディアンに設定する	ds.fillna(ds.median())
ひとつでも非英数字が文字列中に含まれるか調べる	any(not c.isalnum() for c in s)
直後の値でデータフレームのリストカラムの未入力値を埋める	df[aList].fillna(method='bfill')
集合から要素を除去する	aSet.remove(element)
外れ値に強い単クラス分類の準備をする	model = sklearn.linear_model.HuberClassifier()
タプルを引数として展開して表示する	print(*aTuple)
リストと配列について散布図を描いて、マーカーを四角にセットする	plt.plot(データ列x, データ列y, marker='s')
色名とカラーコードの対応表を使う	matplotlib.colors.cnames
整数nは配列のどれか	n in aArray
シーグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
散布図を青色を用いて描画する	plt.scatter(データ列x, データ列y, color='blue')
データフレームのそれぞれのグループごとの最小値	df.groupby(column).min()
日付データが何月か知る	aDate.month
折れ線グラフをサンディーブラウン色で描画する	plt.plot(データ列x, データ列y, color='sandybrown')
新しいロッソ回帰モデルを作成する	model = sklearn.linear_model.Rosso(alpha=正則化項)
データフレームの中にと文字列が含まれるか調べる	df.isin([value, value2])
option: フォントの色をシスルに設定する	color = 'thistle'
文字列全体がパターンに複数行対応としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.MULTILINE)
数式のパラメータを数式で置き換える	e.subs(z, e2)
フィッシャーの線形判別分類の準備をする	model = sklearn.manifold.TSNE(n_components=n)
ヒストグラムをパールゴールデンロッド色として描画する	plt.hist(データ列, color='palegoldenrod')
スクリプトファイルと同じディレクトリのファイルのパスを使う	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
ダークターコイズ色としてヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
縦棒グラフをローングリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lawngreen')
折れ線グラフの菱形マーカーの色を変える	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
現在が木曜日か調べる	datetime.datetime.today().weekday() == 3
マップの全項目を空にする	aDict.clear()
文字列を部分文字列で二分し残りの文字列を使う	s.partition(sub)[-1]
散布図の色をフクシアにする	plt.scatter(データ列x, データ列y, color='fuchsia')
データフレームの列の文字列が正規表現文字列にマッチしない行を取り出す	df[not df[column].str.match(s)]
データフレームの列が正規表現文字列にマッチする行を抽出する	df[df[column].str.match(s)]
散布図の大バツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='X', markeredgewidth=2.5)
オプションで、ファイルを使用する	file = sys.open(filename, 'w')
Pandasで、Pandasの日付型のデータ列をインデックスにする	df.index = pd.DatetimeIndex(ds)
option: 改行をセパレータで用いる	sep = '\n'
ゼロ埋めした行列	np.zeros(行数, 列数)
等量でn個に配列をビン分割する	pd.qcut(aArray, n)
データフレームのそれぞれのグループごとの標準偏差	df.groupby(column).std()
ライムグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
昇順に組の要素をソートする	sorted(aTuple, reverse=False)
ミントクリーム色のヒストグラムを描画する	plt.hist(データ列, color='mintcream')
xが一桁の正の数	0 <= x <= 9
横棒グラフをグリーン色で描画する	plt.barh(データ列x, データ列y, color='green')
データフレームのリストカラムの欠損値をモードに変更する	df[aList].fillna(df[aList].mode().iloc[0])
option: グラフの色をタンに設定する	color = 'tan'
実数の双曲線正接を計算する	math.tanh(x)
タプルのn番目のを使う	aTuple[n]
異なる列をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
ヒストグラムをマルーン色として描画する	plt.hist(データ列, color='maroon')
option: ビスクを使う	color = 'bisque'
イテラブルを双方向キューに変換する	collections.deque(iterable)
辞書を階層化する	collections.ChainMap(aDict)
リストとリストの散布図を描いて、左三角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
乱数を求める	random.random()
散布図のポイント印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
散布図の右三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='r')
縦棒グラフをロイヤルブルー色として描画する	plt.bar(データ列x, データ列y, color='royalblue')
文字列でフォーマットして本日を文字列に変換する	"datetime.datetime.today().strftime(""%d/%m/%y"")"
日付時刻データが日付時刻データより後ろか確認する	aDatetime > aDatetime2
辞書のコピーを新規生成する	dict(aDict)
線グラフの色をブルーバイオレットに設定する	plt.plot(データ列x, データ列y, color='blueviolet')
実数を十の位で丸める	round(x, -1)
双方向キューの上限制限された長さ	deq.maxlen
散布図のバツマーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
option: グラフの線の種類を点線に指定する	linestyle = 'dotted'
横棒グラフをパールゴールデンロッド色として描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
TSVをヘッダを指定せず読む	pd.read_csv(filename, header=None)
リストと数列の散布図をプロットして、マーカーを▼に設定する	plt.plot(データ列x, データ列y, marker='v')
データフレームの列がxである行を抽出する	df[df[column] == x]
カウンタからゼロカウントを取り除く	+aCounter
ライトグレー色のヒストグラムを描画する	plt.hist(データ列, color='lightgray')
横棒グラフの色をシスルにする	plt.barh(データ列x, データ列y, color='thistle')
散布図の四角印を黒くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategray')
データフレームの列の値がx以上のデータを抽出する	df[df[column] >= x]
ヒストグラムの色をクリムゾンに変更する	plt.hist(データ列, color='crimson')
折れ線グラフの色をスチールブルーに変更する	plt.plot(データ列x, データ列y, color='steelblue')
赤い破線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
n個の要素があるリスト	[element] * n
ファイルをベース名と拡張子に分割する	os.path.splitext(filepath)
文字列を日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
option: グラフの色をゴールドに設定する	color = 'gold'
データフレームを各列と列の組み合わせ毎にグループ分けして、最大値を求める	df.groupby([column, column2], as_index=False).max()
茶色色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='brown')
からデータフレームを読み込む	pd.read_excel(filename)
数のn乗して実数による余りを求める	pow(x, n, y)
ガンマ関数	math.gamma(x)
範囲を指定して整数乱数を計算する	random.randint(最小値, 最大値)
正則化付き線形回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
option: グラフの色をレベッカパープルにセットする	color = 'rebeccapurple'
数列と数列についてリストに応じて散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
データフレームの列の欠損値を後の行の値で置換する	df[col].fillna(method='bfill')
あらかじめ複数行対応として正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
自然数最小公倍数を計算する	math.lcm(n, n2)
折れ線グラフのスタイルを一点鎖線に指定する	plt.plot(データ列x, データ列y, linestyle='dashbot')
線グラフを一点鎖線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
リストと数列についての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
フォーマットとしてデータフレームのcollを日付データにする	pd.to_datetime(df[col], format='%Y-%m-%d')
線グラフの色をバリーウッドにセットする	plt.plot(データ列x, データ列y, color='burlywood')
逆行列	np.linalg.inv(aArray)
棒グラフの色をダークグレーにする	plt.bar(データ列x, データ列y, color='darkgray')
多次元データを多次元尺度構成法でパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
option: データ型を指定する	dtype = bool
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=[column, column2])
棒グラフの色をシルバーにする	plt.bar(データ列x, データ列y, color='silver')
nまでの偶整数列を得る	list(range(2, n, 2))
データ列の中央値を求める	ds.median()
文字列の先頭でパターンにASCII限定としてマッチするか見る	re.match(pattern, s, flags=re.ASCI)
ダークシアグリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
散布図にrgbの菱形マーカーを使う	plt.plot(データ列x, データ列y, marker='D', c=rgb)
折れ線グラフの色をミスティローズにセットする	plt.plot(データ列x, データ列y, color='mistyrose')
左三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='<')
グラフの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
文字列から部分文字列を全て取り除く	s.replace(sub, '')
横棒グラフの色をミディアムシアグリーンにする	plt.barh(データ列x, データ列y, color='mediumseagreen')
データフレームのカラムからユニークな要素を抽出し、リスト化する	df[col].unique().tolist()
散布図に赤いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
selectorsでマスクされたイテラブルの要素を取り出す	itertools.compress(iterable, selectors=iterable2)
散布図の色をナバホホワイトにする	plt.scatter(データ列x, データ列y, color='navajowhite')
マッピングをソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
双方向キューのn番目に値を挿入する	deq.insert(n, element)
データフレームのリストカラムの欠損値を最小値で補う	df[aList].fillna(df[aList].min())
散布図をクロスマーカーで描く	plt.plot(データ列x, データ列y, marker='x')
rgbの右三角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='>', c=rgb)
折れ線グラフを描画する	plt.plot(データ列x, データ列y)
データフレームの数値を一度に四捨五入する	df.round()
option: フォントの色をダークシアグリーンに設定する	color = 'darkseagreen'
ライトコーラル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightcoral')
平均絶対誤差を算出する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
データフレームを列の値によってグループ化して標準偏差を求める	df.groupby(column).std()
リストとデータ列についての散布図に赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
散布図をバツマーカーで描画する	plt.plot(データ列x, データ列y, marker='x')
リストと数列についての散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
データフレームのカラムの値は欠損値か	df[col].isna()
ふたつの集合のいずれか一方だけの集合	aSet.symmetric_difference(aSet2)
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
線グラフをライム色を用いて描画する	plt.plot(データ列x, データ列y, color='lime')
Pandasでデータ列を書式を使って日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
文字列リストに列を変換して、タブによって連結する	'\t'.join(map(str, iterable))
グリッド線	plt.grid(color='#800080')
データフレームをインデックスによって降順でソートする	df.sort_index(ascending=False)
二つのデータ列を箱ひげ図にする	plt.boxplot([データ列, データ列])
上位集合かどうか	aSet.issuperset(aSet2)
rgbの△マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
文字コードを文字に変換する	chr(unicode)
折れ線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
ダークマゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
線グラフを赤い実線としてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
タン色でヒストグラムを描画する	plt.hist(データ列, color='tan')
レベッカパープル色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
オリベドラブ色のヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
ヒストグラムの色をラベンダーに変更する	plt.hist(データ列, color='lavender')
x軸の目盛を整数化する	plt.xticks(np.arange(最小値, 最大値, 間隔))
データ列の折れ線プロットを描画し、、色をカラーコードを用いて設定する	plt.plot(データ列x, データ列y, color='#800080')
ヒートマップとしてデータフレームの相関行列を描画する	sns.heatmap(df.corr())
データフレームから指定された二列を抽出する	df[[column, column2]]
カラムを100の位で丸める	ds.round(-2)
ふたつの集合が互いに素か調べる	aSet.isdisjoint(aSet2)
線グラフをゴールデンロッド色を用いて描画する	plt.plot(データ列x, データ列y, color='goldenrod')
option: 先頭の列を行に設定する	index_col = 0
データフレームのカラムの時を見る	df[col].dt.hour
線グラフの色をアンティークホワイトに設定する	plt.plot(データ列x, データ列y, color='antiquewhite')
日付時刻データが日付時刻データより前かどうか	aDatetime < aDatetime2
折れ線グラフをダークターコイズ色を用いて描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
横棒グラフをカーキ色を用いて描画する	plt.barh(データ列x, データ列y, color='khaki')
データフレームの列とカラムの相関行列	df[[column, column2]].corr()
ダークターコイズ色のヒストグラムを描画する	plt.hist(データ列, color='darkturquoise')
散布図を貝殻色として描画する	plt.scatter(データ列x, データ列y, color='seashell')
文字列中の部分文字列を文字列に全部置き換える	s.replace(sub, newsub)
辞書に項目名が存在する	key not in aDict
青い下三角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
配列の形状	aArray.shape
日付時刻データがタイムスタンプデータより遅いか確認する	aDatetime > aDatetime2
折れ線グラフをライムグリーン色で描画する	plt.plot(データ列x, データ列y, color='limegreen')
折れ線グラフの印を大バツ印にする	plt.plot(データ列x, データ列y, marker='X')
option: グラフの色をダークオリーブグリーンに変更する	color = 'darkolivegreen'
変数を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
データフレームの内で、列の重複を見る	df.duplicated(subset=column)
ファイルが存在するか調べる	os.path.exists(filepath)
マップのエントリ数	len(aDict)
パールバイオレットレッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palevioletred')
カウンタ間でユニオンを算出する	aCounter | aCounter2
rangeの無限バージョン	itertools.count(start=n, step=step)
データフレームから重複する行を削除し、、インプレイスする	df.drop_duplicates(inplace=True)
実数の双曲線余弦を算出する	math.cosh(x)
t分布型確率的近傍埋め込み法を使ってパステル調に次元に次元削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
データフレームの中のカラムを等しい量になるようにn個にビン分割する	pd.qcut(df[col], n)
カテゴリで色分けして、データフレームをにバイオリン図で可視化する	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
折れ線グラフに右三角マーカーを加える	plt.plot(データ列x, データ列y, marker='>')
整数nを符号付きでバイト列にする	n.to_bytes((n.bit_length() + 7) // 8, byteorder='big', signed=True)
ヒストグラムの線種を点線に指定する	plt.hist(データ列, linestyle='dotted')
線グラフをダークレッド色で描画する	plt.plot(データ列x, データ列y, color='darkred')
データ列のタイムゾーンを日本に設定する	ds.tz_convert('Asia/Tokyo')
下位集合か確認する	aSet.issubset(aSet2)
ダーク・スラテグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
option: 線の幅を3.0ポイントに設定する	linewidth = 3.0
線グラフの色をフォレストグリーンに設定する	plt.plot(データ列x, データ列y, color='forestgreen')
淡いピンク色色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
ダークカーキ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
日付時刻データの時間数を求める	aDatetime.hour
折れ線グラフのバツ印の線幅を変更する	plt.plot(データ列x, データ列y, marker='x', markeredgewidth=2.5)
ダークグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkgrey')
0からN未満までの行列	np.arange(N)
データフレームを10の位で丸める	df.round(-1)
横棒グラフをペールグリーン色で描画する	plt.barh(データ列x, データ列y, color='palegreen')
折れ線グラフをゲインズボロ色として描画する	plt.plot(データ列x, データ列y, color='gainsboro')
0から始まる無限リスト	itertools.count()
ロバストな線形回帰モデルを作る	model = sklearn.linear_model.HuberRegressor()
本日が日曜日か調べる	datetime.datetime.today().weekday() == 6
本日が金曜日か	datetime.datetime.today().weekday() == 4
棒グラフの色をシャルトリューズにする	plt.bar(データ列x, データ列y, color='chartreuse')
横棒グラフをロイヤルブルー色で描画する	plt.barh(データ列x, データ列y, color='royalblue')
option: カデットブルーに色を設定する	color = 'cadetblue'
option: ミントクリーム色を使う	color = 'mintcream'
ブラック色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
青紫色のヒストグラムを描画する	plt.hist(データ列, color='violet')
データフレームの各グループごとの標準偏差を求める	df.groupby(column).std()
横棒グラフをトマト色で描画する	plt.barh(データ列x, データ列y, color='tomato')
option: ダークレッド色を使用する	color = 'darkred'
xでデータ列のNaNを埋める	ds.fillna(x)
アクアマリン色でヒストグラムを描画する	plt.hist(データ列, color='aquamarine')
option: 先頭の行をカラムの名前に指定する	header = 0
option: グラフの色をペルーに設定する	color = 'peru'
タン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
配列のユニークな要素とその個数を求める	u, counts = np.unique(aArray, return_counts=True)
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='grey')
整数を浮動小数点数で割って、切り捨てる	x // y
文字列をUTF8でバイト列に変換する	s.encode(encoding='utf-8', errors='strict')
FIXME:カテゴリーデータを出現頻度順に並べ直す	df['A'].value_counts().sort_index().index
凡例の位置を(x,y)に設定する	plt.legend(loc=(x, y))
紺碧色の散布図を描画する	plt.scatter(データ列x, データ列y, color='azure')
既存のファイルを追加できるようにBOM付きを用いてオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ヒストグラムの色をアリスブルーに指定する	plt.hist(データ列, color='aliceblue')
option: ピンク色を使用する	color = 'pink'
線グラフの色をチョコレートに変更する	plt.plot(データ列x, データ列y, color='chocolate')
文字列の先頭で正規表現にマッチするか調べる	re.match(pattern, s)
ヒストグラムをロイヤルブルー色で描画する	plt.hist(データ列, color='royalblue')
option: ミッドナイトブルー色を用いる	color = 'midnightblue'
線グラフの色をチョコレートに指定する	plt.plot(データ列x, データ列y, color='chocolate')
リストが空でないか調べる	len(aList) != 0
散布図を黒い大バツマーカーで描く	plt.plot(データ列x, データ列y, marker='X', c='k')
option: 色をライムグリーンに設定する	color = 'limegreen'
nが一桁の整数	-9 <= n <= 9
星印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
option: 書き込みモードに変更する	mode = 'w'
ミスティローズにヒストグラムの色を変更する	plt.hist(データ列, color='mistyrose')
横棒グラフをライトスレイグレー色で描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
ヒストグラムの線の種類を実線にする	plt.hist(データ列, linestyle='solid')
縦棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
プロットのタイトルを変更する	plt.title('グラフの名称')
整数nを16進表記に変換する	hex(n)
floatの最大値	sys.float_info.max
グラフにグリッド線を表示する	plt.grid(True)
マッピングをJSON形式の文字列にする	json.dumps(aDict, ensure_ascii=False)
データ列の欠損値を最大値で埋める	ds.fillna(ds.max())
原点から(実数,y)の距離	math.hypot(x, y)
カウンタの全数	aCounter.total()
折れ線グラフにダイアモンドマーカーを使用する	plt.plot(データ列x, データ列y, marker='D')
データフレームのカラムを10の位で丸めて、整数型にする	df[col].round(-1).astype(int)
ラベンダー色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
シーケンスを累加した列を求める	itertools.accumulate(iterable)
列の値によってデータフレームをグループ化して、平均値を算出する	df.groupby(column).mean()
折れ線グラフを赤い一点鎖線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
二進文字列をバイナリに変換する	int(s, 2).to_bytes(length=bytesize, byteorder='big')
ファイルパスから拡張子付きのファイル名を使う	os.path.basename(filepath)
option: フォントの色をアクアマリンに設定する	color = 'aquamarine'
折れ線グラフをローングリーン色で描画する	plt.plot(データ列x, データ列y, color='lawngreen')
棒グラフをホワイトスモーク色として描画する	plt.bar(データ列x, データ列y, color='whitesmoke')
文字列の中で正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s)
文字列の開始位置から終了位置まで部分文字列を探す	s.find(sub, start, end)
リストと配列の散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
二つの集合の対称差集合を計算する	aSet.symmetric_difference(aSet2)
集合からエラーなく要素を除く	aSet.discard(element)
データフレームの列の中に文字列と文字列があるか調べる	df[col].isin([value, value2])
自然数のGCD	math.gcd(n, n2)
散布図に丸マーカーを加える	plt.scatter(データ列x, データ列y, marker='o')
サンディーブラウン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
イテラブルから重複なく、n個ランダムに選ぶ	random.sample(iterable, k=n)
文字列を空白で区切って、文字列リストに変換する	s.split()
縦棒グラフをダークターコイズ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
Pandasで、エポック秒の文字列からPandasの日付型にする	pd.to_datetime(s, unit='s', utc=True)
データフレームから列を二つだけ選択する	df[[column, column2]]
昇順に'A'列と'B'列によってデータフレームをソートして更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
ホットピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='hotpink')
データフレームを列によってまとめたグループを使う	df.groupby(column)
option: グラフの色を耐火レンガにセットする	color = 'firebrick'
option: オールドレース色を用いる	color = 'oldlace'
折れ線グラフにクロスマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
小数点数を実数で割った剰余	math.remainder(x, x2)
行列の内積	np.dot(aArray, aArray2)
ロージーブラウン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='rosybrown')
ミッドナイトブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
要素ひとつのりストを作る	[element]
改行なしに2つの文字列をプリントする	print(value, value2, end='')
標準入力から1行分読む	sys.stdin.readline()
青い一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
有理数をインポートする	import fractions
イテラブルとシーケンスをペアリングする	itertools.zip_longest(iterable, iterable2)
データフレームの欠損値を平均値に設定する	df.fillna(df.mean())
オブジェクトのクラスを調べる	type(obj)
データ列とイテラブルについて散布図を描いて、ダイアモンドマーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
ドジャーブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dodgerblue')
文字列が文字列リストに含まれる	s in aStringList
文字列が文字列より辞書順で前か	s < s2
リストをナンバリングする	enumerate(aList)
散布図にrgbの▼マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
キューのn番目	deq[n]
nを切り捨てながらn2分の１にする	n //= n2
データフレームのリストカラムの中に含まれる文字列の合計を数える	df[aList].isin([value]).sum()
空のガウス過程回帰モデルを新規作成する	model = sklearn.gaussian_process.GaussianProcessRegressor()
リストの推移を半透明の一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
文字列を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
一点鎖線でデータ列の移り変わりを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
ヒストグラムをライトスカイブルー色として描画する	plt.hist(データ列, color='lightskyblue')
線グラフの色をフクシアに指定する	plt.plot(データ列x, データ列y, color='fuchsia')
整数nはセットのいづれかか	n in aSet
横棒プロットを描画して、棒の縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
リストとリストについての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
変数をシアンでプリントする	print(f'\033[36m{value}\033[0m')
オブジェクトの属性の値を設定する	setattr(obj, プロパティ名, 値)
辞書からキーの値かもしくは要素を得る	aDict.get(key, element)
option: グラフの色をオレンジレッドに設定する	color = 'orangered'
スラグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategray')
option: グラフの色をグリーンイエローに設定する	color = 'greenyellow'
折れ線グラフの色をシルバーに設定する	plt.plot(データ列x, データ列y, color='silver')
散布図の▽マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
プロットの描画で濃く色テーマを使う	sns.set(pallete='deep')
黄色いグリッド線を引く	plt.grid(color='y')
横棒グラフをディープスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
最大長nの両端キューをイテラブルから作る	collections.deque(iterable, maxlen=n)
棒グラフの色をホットピンクにする	plt.bar(データ列x, データ列y, color='hotpink')
折れ線グラフをオレンジレッド色として描画する	plt.plot(データ列x, データ列y, color='orangered')
ヒストグラムをフクシア色で描画する	plt.hist(データ列, color='fuchsia')
データ列の中にいくつ日付データがあるかカウントする	ds.isin([value]).sum()
option: グラフの色をミディアムスレートブルーに変更する	color = 'mediumslateblue'
折れ線グラフをクリムゾン色で描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの空文字を欠損値に変換しドロップする	df.replace('', np.nan).dropna()
option: レモンシフォンにグラフの色を指定する	color = 'lemonchiffon'
折れ線グラフの色をホワイトにセットする	plt.plot(データ列x, データ列y, color='white')
option: リネン色を使う	color = 'linen'
イエローグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
タプルが全て真か調べる	all(aTuple)
カウンタをセットに変換する	set(aCounter)
option: エラーがあるとき、例外を発生させるように変更する	errors = 'strict'
棒グラフの色をライムグリーンにする	plt.bar(データ列x, データ列y, color='limegreen')
データフレームの欠損値が含まれる箇所に色をつける	df.style.highlight_null()
二次元リストをflattenする	sum(aList)
データ列の欠損値を後の行の値に設定する	ds.fillna(method='bfill')
文字列が部分文字列で終わるか	s.endswith(sub)
ゴールド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gold')
n個にデータフレームの中の列をビン分割してnamesのラベルをつける	pd.cut(df[col], n, labels=names)
ダークマゼンタ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkmagenta')
棒グラフをダークシアン色を用いて描画する	plt.bar(データ列x, データ列y, color='darkcyan')
文字列が全て空白か	s.isspace()
散布図の色をダークサーモンにする	plt.scatter(データ列x, データ列y, color='darksalmon')
プログラムを異常終える	sys.exit(1)
真部分集合	aSet < aSet2
横棒グラフの色をアクアマリンにする	plt.barh(データ列x, データ列y, color='aquamarine')
ゼロ埋めされた三２ビット整数型の行列	np.zeros(要素数, dtype=np.int16)
インディゴ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
列と列を連結する	itertools.chain(iterable, iterable2)
破壊的にデータフレームの列を消す	df.drop(column, axis=1, inplace=True)
列とイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
二つの文字列を大文字小文字を無視して比較する	s.casefold() < s2.casefold()
ライトサーモン色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
双方向キューの左側から値を取り除く	deq.popleft()
トマトにヒストグラムの色を設定する	plt.hist(データ列, color='tomato')
xの小数点以下'2'桁までの文字列に変換する	':.2f'.format(x)
グレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='gray')
option: 色をバリーウッドにセットする	color = 'burlywood'
option: グラフの色をライムグリーンに変更する	color = 'limegreen'
コマンド引数のリストを	sys.argv[1:]
文字列を赤色にする	f'\033[31m{value}\033[0m'
散布図をrgbの四角マーカーとしてプロットする	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ブラック色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='black')
折れ線グラフの色をシーグリーンに設定する	plt.plot(データ列x, データ列y, color='seagreen')
線を半透明の破線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
option: 色をライトグリーンに指定する	color = 'lightseagreen'
新しいリッジ回帰モデルを準備する	model = sklearn.linear_model.Ridge(alpha=正則化項)
黒いバツマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='x', c='k')
スラグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slategray')
棒グラフの色をアリスブルーにする	plt.bar(データ列x, データ列y, color='aliceblue')
option: ゴーストホワイト色を使う	color = 'ghostwhite'
リストとリストについての散布図に△マーカーを描画する	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの丸マーカーの大きさを変える	plt.plot(データ列x, データ列y, marker='o', markersize=2.0)
リストの長さ	len(aList)
ファイルの拡張子をtextに変更する	os.path.splitext(filepath)[0] + text
本日が火曜日	datetime.datetime.today().weekday() == 1
データフレームをJSONLファイルに小数点以下3桁まで保存する	df.to_csv(filename, float_format='%.3f')
配列の行ごとの最大値を求める	np.max(aArray, axis=1)
棒グラフをフクシア色で描画する	plt.bar(データ列x, データ列y, color='fuchsia')
プロットのフォントを日本語に指定する	sns.set(font='IPAexGothic')
リスト中の要素が少なくともひとつ真か調べる	any(aList)
グラフの見た目を綺麗にする	import seaborn as sns
データフレームを列によって集計して、各グループ毎の分散を計算する	df.groupby(column).var()
自然数の最大公約数	math.gcd(n, n2)
棒グラフをオレンジレッド色として描画する	plt.bar(データ列x, データ列y, color='orangered')
option: ロイヤルブルー色を使う	color = 'royalblue'
データフレームを各列毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
リストとしてデータフレームの指定された列を取り出す	df[column].values.tolist()
折れ線グラフの丸マーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
option: ダークカーキに色を変更する	color = 'darkkhaki'
アリスブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aliceblue')
kを底とする実数の対数	math.log(x, k)
nの無限数列	itertools.repeat(n)
棒グラフをダークサーモン色で描画する	plt.bar(データ列x, データ列y, color='darksalmon')
星マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='*')
option: グラフの色をライトグリーンに設定する	color = 'lightseagreen'
データフレームのインデックスをリセットする	df.reset_index()
散布図に黒い丸マーカーを使用する	plt.plot(データ列x, データ列y, marker='o', c='k')
TSVをカラムの名前を指定せず読み込む	pd.read_csv(filename, header=None)
表データの中の列と列に重複があれば、マスクする	df.duplicated(subset=[column, column2])
データ列を２つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
ガンマ関数の絶対値に自然対数をとった値	math.lgamma(x)
列のユニークな値	ds.unique()
線グラフの色をパールゴールデンロッドにセットする	plt.plot(データ列x, データ列y, color='palegoldenrod')
リストとリストを連結する	aList + aList2
文字列のケースを入れ替える	s.swapcase()
組をひとつ飛ばしで抽出する	aTuple[::2]
イテラブルを更新不能なセットに変換する	frozenset(iterable)
ホットピンク色でヒストグラムを描画する	plt.hist(データ列, color='hotpink')
データ列をビン分割する	pd.cut(ds, aList)
二つの文字列を文字列で区切ってプリントする	print(value, value2, sep=s)
データフレームを散布図で可視化し、、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
データフレームから重複する行をドロップする	df.drop_duplicates()
行列の逆行列を求める	np.linalg.inv(aArray)
散布図の色を耐火レンガにする	plt.scatter(データ列x, データ列y, color='firebrick')
MAEを求める	sklearn.metrics.mean_absolute_error(データ列, データ列2)
カラムの欠損値を最小値で置換する	ds.fillna(ds.min())
オブジェクトがバイト列型	isinstance(obj, bytes)
赤色で文字列をプリントする	print(f'\033[31m{value}\033[0m')
真紅にヒストグラムの色を変更する	plt.hist(データ列, color='crimson')
折れ線グラフのマーカーをダイアモンド印にする	plt.plot(データ列x, データ列y, marker='D')
イテラブルの各要素を関数でフィルタする	map(func, iterable)
2を底とする対数を求める	math.log2(x)
ハッシュ値を求める	hash(x)
データフレームを２つの列の値によってグループ化し、記述統計量を計算する	df.groupby(['A', 'B']).describe()
option: マーカーの色をコーラルにする	markerfacecolor = 'coral'
データ列を小数点以下n桁で丸める	ds.round(n)
ライトスレイグレー色としてヒストグラムを描画する	plt.hist(データ列, color='lightslategrey')
棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
ダークシアン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkcyan')
ヒストグラムの色をアイボリーに変更する	plt.hist(データ列, color='ivory')
predicateFuncを適用したとき真とならないイテラブルの要素を取り出す	itertools.dropwhile(predicateFunc, iterable)
ISO書式の文字列から日付時刻に変換する	datetime.datetime.fromisoformat(日付の書かれた文字列)
最大値・最小値として整数乱数を生成する	random.randint(最小値, 最大値)
変数をシアン化する	f'\033[36m{value}\033[0m'
データ列のどの値が最も現れるか確認する	ds.mode()
折れ線グラフに黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
漢字が文字列に含まれるかどうか調べる	re.search('[\u4E00-\u9FD0]', s)
ライムグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='limegreen')
昇順に列名リストによってデータフレームを整列する	df.sort_values(by=column, ascending=True)
ファイルをUTF8で書き込み用にオープンする]	open(filepath, mode='w', encoding='utf-8')
option: 色を半透明にする	alpha = 0.5
ライトゴールドロディイエロー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
コマンド引数を一覧として得る	sys.argv[1:]
二数の一番小さい値	max(x, y)
リストの最初の文字列を探す	aList.index(element)
散布図の色をダークブルーにする	plt.scatter(データ列x, データ列y, color='darkblue')
縦棒グラフをディムグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='dimgray')
ミディアムパープル色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
グレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
option: グラフの色を青に変更する	color = 'blue'
浮動小数点数を浮動小数点数で割った余り	x % y
ゼロ埋めされた行列を作る	np.zeros(要素数)
散布図の左三角マーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='<', markersize=2.0)
文字列を黒色化する	f'\033[30m{value}\033[0m'
文字列内にひとつでも英数字が含まれるか調べる	any(c.isalnum() for c in s)
両端キューの末尾から要素を取り除く	deq.pop()
xが真か調べる	bool(x)
二つの関係がサブセットかどうか確認する	aSet.issubset(aSet2)
option: 三角マーカーを加える	marker = '^'
option: グラフの色をライトスカイブルーに設定する	color = 'lightskyblue'
データフレームから破壊的に重複する行を削除する	df.drop_duplicates(inplace=True)
シーケンスを文字列リストに変換して、空白を用いて一つにする	' '.join(map(str, iterable))
散布図をシルバー色を使って描画する	plt.scatter(データ列x, データ列y, color='silver')
データフレームの列で文字列が含まれないデータを抽出する	df[not df[column].str.contains(s)]
折れ線グラフの色をグレーに設定する	plt.plot(データ列x, データ列y, color='grey')
パーセプトロンとしてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
二つのデータフレームを縦方向に連結する	pd.concat([df, df2], axis=0)
線グラフをライトコーラル色で描画する	plt.plot(データ列x, データ列y, color='lightcoral')
データフレームを二つの列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
散布図をダークスラテグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
本日が水曜日	datetime.datetime.today().weekday() == 2
データ列のユニークな値の個数を確認する	ds.nunique()
リストとリストについて散布図を描画して、ポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategrey')
折れ線グラフのバツマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='#800080')
option: スラグレーにグラフの色を設定する	color = 'slategrey'
option: 配列のデータ型を指定する	dtype = np.int16
カウンタから最も頻出な要素の件数を求める	aCounter.most_common()[1]
折れ線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
散布図の左三角マーカーを青色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='b')
配列の標準偏差を使う	np.std(aArray)
チョコレート色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='chocolate')
データフレームの重複した行だけを抽出する	df[df.duplicated(keep=False)]
option: 三角マーカーを描画する	marker = '^'
折れ線グラフの星マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='*', markeredgewidth=2.5)
データ列の文字列長を列として使う	ds.str.len()
正弦の逆数を算出する	math.asin(x)
破壊的にデータフレームを列を用いてによってソートする	df.sort_values(by=column, inplace=True)
データフレームの中の列を分割する	pd.cut(df[col], aList)
ヒストグラムの色をダークレッドに指定する	plt.hist(データ列, color='darkred')
リストを境界値としてデータ列をビン分割する	pd.cut(ds, aList)
折れ線グラフの色を茶色に設定する	plt.plot(データ列x, データ列y, color='brown')
データフレームのリストカラムの値を正規表現でまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
カーキ色を用いてヒストグラムを描画する	plt.hist(データ列, color='khaki')
データフレームのリストカラムのNaNをxに増やす	df[aList].fillna(x)
箱ひげ図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
線グラフをライトサーモン色を用いて描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
x,y,zにそれぞれn,n2,n3を代入する	x, y, z = n, n2, n3
option: 表示を半透明にする	alpha = 0.5
データ列の欠損値を最小値に設定する	ds.fillna(ds.min())
折れ線グラフの色をロージーブラウンに設定する	plt.plot(データ列x, データ列y, color='rosybrown')
折れ線グラフをグリーンイエロー色で描画する	plt.plot(データ列x, データ列y, color='greenyellow')
データフレームのリストカラムの文字列を欠損値に変換する	df[aList].replace(s, np.nan)
高頻出な方からカウンタをリストとして得る	aCounter.most_common()
データフレームのカラムが何曜日か見る	df[col].dt.weekday_name
フクシア色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
データフレームの指定した列を配列にする	df[column].values
データフレームのリストカラムの中に含まれる文字列の合計をカウントする	df[aList].isin([value]).sum()
ヒストグラムの色をゴールデンロッドに設定する	plt.hist(データ列, color='goldenrod')
色付きの一点鎖線でデータ列の変遷を描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
範囲を指定して整数乱数を算出する	random.randint(最小値, 最大値)
グラフの見栄えを良くする	import seaborn as sns
option: フォントの色をディープスカイブルーに設定する	color = 'deepskyblue'
予測データのコンフュージョン・マトリックスを算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
日付時刻データが日付時刻データと同時かどうか調べる	aDatetime == aDatetime2
ポイント印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
オブジェクトはタプルクラスか調べる	isinstance(obj, tuple)
辞書に要素をキーとして加える	aDict[key] = element
Pandasでデータ列を日付データにする	pd.to_datetime(ds)
ビスク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
文字列中に部分文字列がいくつか含まれるか調べる	s.count(sub)
Pandasでデータフレームのcollを日付データにする	pd.to_datetime(df[col])
縦棒グラフをナバホホワイト色で描画する	plt.bar(データ列x, データ列y, color='navajowhite')
赤いポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.', c='r')
ヒストグラムをダークバイオレット色で描画する	plt.hist(データ列, color='darkviolet')
書式を用いて文字列をPandasの日付型に変換する	pd.to_datetime(s, format='%Y-%m-%d')
レモンシフォン色のヒストグラムを描画する	plt.hist(データ列, color='lemonchiffon')
ライトスカイブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
複数の列によって降順にデータフレームを破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
オブジェクトをn回続く列	itertools.repeat(element, n)
ヒストグラムをパープル色として描画する	plt.hist(データ列, color='purple')
多次元尺度構成法を行う	model = sklearn.manifold.MSD(n_components=n)
データフレームの欠損値がある箇所に色を付ける	df.style.highlight_null()
横棒グラフをアクア色として描画する	plt.barh(データ列x, データ列y, color='aqua')
標準入力	sys.stdin
データフレームのカラムをに箱ひげ図で見る	sns.boxplot(x='カテゴリ列', y='列', data=df)
ヒストグラムをライトゴールドロディイエロー色で描画する	plt.hist(データ列, color='lightgoldenrodyellow')
最大値でデータフレームの未入力値を埋める	df.fillna(df.max())
ダークスラテグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkslategray')
散布図に黒い下三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
勾配ブースティング分類木を作成する	model = sklearn.ensemble.GradientBoostingClassifier()
パープル色のヒストグラムを描画する	plt.hist(データ列, color='purple')
折れ線グラフの色をベージュに設定する	plt.plot(データ列x, データ列y, color='beige')
両端キューの中にデータが含まれてるか	element in deq
文字列を全て小文字に変換する	s.casefold()
折れ線グラフのダイアモンド印を黒くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='k')
横棒グラフをライトイエロー色で描画する	plt.barh(データ列x, データ列y, color='lightyellow')
横棒グラフの縦幅を設定する	plt.barh(ラベル列, データ列, width=0.5)
既存のファイルをUTF8で追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
新しい単回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
数列とリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
表データの中で列と列の重複を削除する	df.drop_duplicates(subset=[column, column2])
文字列が組の要素でないか確認する	element not in aTuple
データフレームの列をカテゴリデータに変換する	df[col].astype(object)
ペルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='peru')
ヒストグラムの色をオリーブに設定する	plt.hist(データ列, color='olive')
実数の２乗を計算する	x ** 2
データフレームから重複する行を残さず削除する	df.drop_duplicates(keep=False)
グリッド線	plt.grid(linestyle='--')
棒グラフをシエナ色として描画する	plt.bar(データ列x, データ列y, color='sienna')
横棒グラフをライトスレイグレー色として描画する	plt.barh(データ列x, データ列y, color='lightslategrey')
実数をn乗する	x ** n
option: 書き込みモードにセットする	mode = 'w'
日付データををn秒後に進める	aDate + datetime.timedelta(seconds=n)
データフレームの中で列とカラムに重複があるか見る	df.duplicated(subset=[column, column2])
棒グラフをミディアムオーキッド色で描画する	plt.bar(データ列x, データ列y, color='mediumorchid')
折れ線グラフに青いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
主成分分析で多次元データを淡く次元に削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
折れ線グラフの色をパパイヤウィップに変更する	plt.plot(データ列x, データ列y, color='papayawhip')
ミディアムターコイズにヒストグラムの色を変更する	plt.hist(データ列, color='mediumturquoise')
折れ線グラフをゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='goldenrod')
ヒストグラムの色をビスクに設定する	plt.hist(データ列, color='bisque')
データ列の第三四分位数	ds.quantile(0.75)
青色の散布図を描画する	plt.scatter(データ列x, データ列y, color='blue')
option: マーカーの太さを指定する	markeredgewidth = 2.5
黒いポイントマーカーを数列とリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='.', c='k')
モデルの残差を計算する	目的変数 - model.predict(説明変数)
名前からカラーマップを求める	"plt.get_cmap(""カラーマップ名"")"
棒グラフの色をミディアムアクアマリンにする	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ヒストグラムをダークオーキッド色で描画する	plt.hist(データ列, color='darkorchid')
カラムの値が欠損値かテストする	ds.isna()
線グラフの色をスラグレーにする	plt.plot(データ列x, データ列y, color='slategrey')
ライトブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
option: 四角印を加える	marker = 's'
ひとつでも空白が文字列内に含まれる	any(c.isspace() for c in s)
グラフの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
データフレームの列が文字列で終わらない行を選択する	df[not df[column].str.endswith(s)]
線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
実行時に標準出力がパイプか	not sys.stdout.isatty()
データフレームのリストカラムの尖度	df[aList].skew()
データフレームを各列毎にグループ分けし、文字列というグループの個数を求める	df.groupby(column).size()[s]
スレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='slateblue')
ヒストグラムをリネン色で描画する	plt.hist(データ列, color='linen')
1で全要素を初期化した配列	np.ones(要素数, dtype=np.int)
グラフをスライド用に指定する	sns.set(context='talk')
グリーンイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='greenyellow')
データ列が何月か確認する	ds.dt.month
文字列を置き換える	s.replace(sub, newsub)
折れ線グラフをアイボリー色を用いて描画する	plt.plot(データ列x, データ列y, color='ivory')
option: 色をミディアムパープルに設定する	color = 'mediumpurple'
集合から別の集合との共通要素を除く	aSet.symmetric_difference_update(aSet2)
折れ線グラフの下三角印の色を変更する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
スレートブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='slateblue')
Pandasで、文字列のエポック秒から日付データにする	pd.to_datetime(s, unit='s', utc=True)
画面にグラフを設定する	sns.set(context='notebook')
option: 線の幅を3.0ポイントに変更する	linewidth = 3.0
ペールグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegreen')
日付時刻データにn分分、加える	aDatetime + datetime.timedelta(minutes=n)
データフレームのリストカラムの母標準偏差を求める	df[aList].std(ddof=0)
列から両端キューを生成する	collections.deque(iterable)
オーキッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
リストの中の最大値	max(aList)
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgray')
リストとリストについて散布図を描画し、、マーカーを△に指定する	plt.plot(データ列x, データ列y, marker='^')
カラムのNaNを最頻値にセットする	ds.fillna(ds.mode().iloc[0])
ゴールド色でヒストグラムを描画する	plt.hist(データ列, color='gold')
散布図のバツ印を赤くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
棒グラフの色をホワイトにする	plt.bar(データ列x, データ列y, color='white')
rgbの三角マーカーを配列とリストの散布図に描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
グラフの見た目を良くする	import seaborn as sns
option: ダークシアン色を使用する	color = 'darkcyan'
両端キューをリストから作成する	collections.deque(iterable)
ガウス過程分類器を作る	model = sklearn.gaussian_process.GaussianProcessClassifier()
棒グラフを赤色で描画する	plt.bar(データ列x, データ列y, color='red')
新しいサポートベクター分類モデルを作る	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
折れ線グラフを点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted')
ミントクリーム色としてヒストグラムを描画する	plt.hist(データ列, color='mintcream')
配列を中央値でビン分割する	pd.qcut(aArray, 2)
シアン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cyan')
組の最初の文字列を探す	aTuple.index(element)
箱ひげ図でデータ列を可視化する	plt.boxplot(データ列)
リストの要素を並べ直す	sorted(aList)
棒グラフの色をダーク・スラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategrey')
配列と配列について散布図を描画し、マーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
データフレームを表示するとき表示可能な列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
散布図の丸マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
xを整数にする	int(x)
option: フォントの色をグリーンイエローに設定する	color = 'greenyellow'
折れ線グラフを半透明の点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
データ列の推移を半透明の点線でプロットする	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
線を半透明の実線を使って描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ダークオーキッド色のヒストグラムを描画する	plt.hist(データ列, color='darkorchid')
二つのデータ列を箱ヒゲ図にする	plt.boxplot([データ列, データ列])
カデットブルー色のヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
折れ線グラフをビスク色で描画する	plt.plot(データ列x, データ列y, color='bisque')
データフレームのカラムを各グループ列ごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
赤い▲マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='r')
円グラフを用いてデータ列の割合を可視化する	plt.pie(データ列, startangle=90)
数値を白色にする	f'\033[37m{value}\033[0m'
辞書から計数器を作る	collections.Counter(aDict)
option: グラフの色をコーラルに設定する	color = 'coral'
option: グラフの色をダークバイオレットに設定する	color = 'darkviolet'
y軸の目盛を整数化する	plt.yticks(np.arange(最小値, 最大値, 間隔))
データフレームのリスト列の歪度	df[aList].kurt()
二つのデータフレームを列'A'と列'B'をキーとして結合する	pd.merge(df, df2, left_on='A', right_on='B')
変数について数式を微分する	sympy.diff(e, z)
整数nを16進文字列に変換する	hex(n)[2:]
エクセルファイルファイルをデータフレームとして読み込む	pd.read_excel(filename)
散布図をダイアモンドマーカーで描画する	plt.scatter(データ列x, データ列y, marker='D')
フクシア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='fuchsia')
横棒グラフをインディゴ色で描画する	plt.barh(データ列x, データ列y, color='indigo')
両端キューから要素を取り除く	deq.remove(element)
nとn2の和	n + n2
データフレームを'A'列によって並べ、更新する	df.sort_values(by='A', inplace=True)
キューに要素をエンキューする	deq.appendleft(element)
ライトグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
タンにヒストグラムの色を設定する	plt.hist(データ列, color='tan')
データフレームの列が文字列が含まれない行を取り出す	df[not df[column].str.contains(s)]
option: ダークグレー色を用いる	color = 'darkgray'
option: ミディアムスレートブルーを使う	color = 'mediumslateblue'
ヒストグラムをタン色として描画する	plt.hist(データ列, color='tan')
図のサイズを設定する	plt.figure(figsize=(横幅, 高さ))
option: フォントの色をドジャーブルーに設定する	color = 'dodgerblue'
文字列としてイテラブルを連結する	''.join(map(str, iterable))
下三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
散布図を貝殻色で描画する	plt.scatter(データ列x, データ列y, color='seashell')
散布図をダークスレートブルー色で描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
シルバー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='silver')
ライトシアン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcyan')
折れ線グラフをビスク色を用いて描画する	plt.plot(データ列x, データ列y, color='bisque')
データフレームを２つの列を用いてソートしてNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
グラフにx=0の点線を付ける	plt.axvline(x=0, linestyle='dotted')
辞書の項目名に対応した値	aDict.get(key)
縦棒グラフをダークブルー色で描画する	plt.bar(データ列x, データ列y, color='darkblue')
棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
列の欠損値を最小値に変更する	ds.fillna(ds.min())
インディアンレッド色でヒストグラムを描画する	plt.hist(データ列, color='indianred')
データフレームを２つの列で昇順に並べて更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
二つの文字列をカンマで区切って出力する	print(value, value2, sep=',')
散布図の色をロージーブラウンにする	plt.scatter(データ列x, データ列y, color='rosybrown')
データ列をビン数nでビニングする	pd.cut(ds, n)
option: マーカーの色をゴールデンロッドにする	markerfacecolor = 'goldenrod'
空白	' '
パールバイオレットレッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palevioletred')
データフレームを二つの列によってグループ化し要約統計量を計算する	df.groupby(['A', 'B']).describe()
横棒グラフの色をディムグレーにする	plt.barh(データ列x, データ列y, color='dimgray')
辞書に項目名が存在するかどうか調べる	key not in aDict
tanを求める	math.tan(x)
データフレームのリストカラムのpercent分位数	df[aList].quantile(percent/100)
折れ線グラフの左三角マーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
ダークシアン色でヒストグラムを描画する	plt.hist(データ列, color='darkcyan')
組の最後	aTuple[-1]
ヒストグラムの色をミッドナイトブルーに指定する	plt.hist(データ列, color='midnightblue')
option: アクアマリンにグラフの色を設定する	color = 'aquamarine'
両端キューに要素をプッシュする	deq.append(element)
本日が何年か知る	datetime.datetime.today().year
平均値でデータフレームの未入力値を埋める	df.fillna(df.mean())
列'A'と列'B'をキーにして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
ISO書式の文字列から日付時刻にする	datetime.datetime.fromisoformat(日付の書かれた文字列)
グラフのx座標のラベルを変更する	plt.xlabel('x軸ラベル')
データフレームをグループ化し、列に対し最小値を求める	df.groupby(column)[column2].min()
配列を分割数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
散布図をインディゴ色で描画する	plt.scatter(データ列x, データ列y, color='indigo')
混同行列をヒートマップで確認する	sns.heatmap(混同行列, annot=True, cmap='Reds')
データフレームのカラムの中に文字列と文字列がいくつあるか数える	df[col].isin([value, value2]).sum()
数値を緑色でプリントできる文字列に変換する	f'\033[32m{value}\033[0m'
イテラブルを出現回数してカウンタから引く	aCounter.subtract(iterable)
特異値分解でパステル調に次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
ロイヤルブルーにヒストグラムの色を変更する	plt.hist(データ列, color='royalblue')
option: ゲインズボロを使う	color = 'gainsboro'
最小値でデータフレームの欠損値を埋める	df.fillna(df.min())
ヒストグラムの色をブランチドアーモンドにセットする	plt.hist(データ列, color='blanchedalmond')
散布図を紺碧色で描画する	plt.scatter(データ列x, データ列y, color='azure')
両端キューをリストにする	list(deq)
外れ値に強い線形回帰モデルを用意する	model = sklearn.linear_model.HuberRegressor()
option: リネンにグラフの色を変更する	color = 'linen'
日付データを文字列でフォーマットする	"aDate.strftime(""%d/%m/%y"")"
折れ線グラフの四角印の色を変更する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='#800080')
データフレームからランダムに一行を抽出する	df.sample()
文字列中に部分文字列が含まれないかどうか調べる	sub not in s
プロットの中の日本語表示を有効にする	sns.set(font='IPAexGothic')
データフレームの尖度を求める	df.skew()
散布図のポイントマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='.', markeredgewidth=2.5)
option: ナバホホワイト色を使う	color = 'navajowhite'
縦棒グラフを積み上げにする	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
集合が空でないか	len(aSet) != 0
辞書のキーの一覧	aDict.keys()
ライトブルーにヒストグラムの色を指定する	plt.hist(データ列, color='lightblue')
ブースティングでクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
列がどの程度、分散しているか見る	ds.var()
グリッド線	plt.grid(alpha=0.5)
ヒストグラムをグレー色で描画する	plt.hist(データ列, color='gray')
横棒グラフをゴールド色で描画する	plt.barh(データ列x, データ列y, color='gold')
散布図の色をダークオリーブグリーンにする	plt.scatter(データ列x, データ列y, color='darkolivegreen')
option: マーカーをダイアモンドに変える	marker = 'D'
year年month月day日hour時のタイムスタンプをオブジェクト化する	datetime.datetime(year=year, month=month, day=day, hour=hour)
nを否定する	not n
棒グラフの色をデピンクにする	plt.bar(データ列x, データ列y, color='deeppink')
データフレームを'A'列で小さい順にソートする	df.sort_values(by='A', ascending=True)
配列の型を求める	aArray.dtype()
をPythonパスに追加する	sys.path.append(dir)
横棒グラフをパパイヤウィップ色として描画する	plt.barh(データ列x, データ列y, color='papayawhip')
option: ラベンダー色を使う	color = 'lavender'
線グラフの色をライトゴールドロディイエローに設定する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgray')
リストのオブジェクトが最初に見つかる場所	aList.index(element)
シャルトリューズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
折れ線グラフの色をミントクリームにセットする	plt.plot(データ列x, データ列y, color='mintcream')
データフレームの列と列の相関行列	df[[column, column2]].corr()
散布図に赤い三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='^', c='r')
配列とリストの散布図に赤い四角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
Pythonパスにを追加する	sys.path.append(dir)
棒グラフの色をディムグレーにする	plt.bar(データ列x, データ列y, color='dimgray')
エラーなくリストの文字列の位置を見る	aList.index(element) if element in aList else -1
リストの全ての要素を取り除く	aList.clear()
タイムスタンプデータにn分を加算する	aDatetime + datetime.timedelta(minutes=n)
配列を中央値でビンニングする	pd.qcut(aArray, 2)
散布図の色をビスクにする	plt.scatter(データ列x, データ列y, color='bisque')
本日を文字列としてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
ふたつの関係が上位集合もしくは等しい	aSet > aSet2
文字列が文字列より辞書順で後か調べる	s > s2
散布図をオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='orange')
グラフの描画でパステル調に色を使う	sns.set(pallete='pastel')
ラベル付きの円グラフを描画する	plt.pie(データ列, startangle=90, labels=ラベル列)
折れ線グラフをディープスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='deepskyblue')
ファイルをEUCで書き込みできるようにオープンする]	open(filepath, mode='w', encoding='euc_jp')
ライムグリーン色のヒストグラムを描画する	plt.hist(データ列, color='limegreen')
option: マーカーの色を紺碧にする	markerfacecolor = 'azure'
option: 線の幅を3.0ポイントにする	linewidth = 3.0
折れ線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgray')
二つの集合がセットと互いに素かどうか	aSet.isdisjoint(aSet2)
箱ひげ図を二つ並べて描画する	plt.boxplot([データ列, データ列])
空のリッジ回帰とロッソ回帰のハイブリットモデルを新規作成する	model = sklearn.linear_model.ElasticNet()
ゴールデンロッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='goldenrod')
データフレームをロジスティック回帰付き散布図にする	sns.regplot(x='列名', y='列名', data=df, logistic=True)
実数はNaNか	math.isnan(x)
データフレームのリストカラムの空文字を欠損値に変換し、ドロップする	df[aList].replace('', np.nan).dropna()
散布図のダイアモンド印を黒くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='k')
タプルの長さ	len(aTuple)
イテラブルとリストについて散布図を描いてマーカーをポイントに設定する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムをライトサーモン色で描画する	plt.hist(データ列, color='lightsalmon')
nの八進数文字列	oct(n)[2:]
折れ線グラフの色をダークスレートブルーに設定する	plt.plot(データ列x, データ列y, color='darkslateblue')
文字列が文字列リストに含まれるか	s in aStringList
方程式の解を計算する	sympy.solve(e)
カラーパレットをパステル調にする	sns.set(pallete='pastel')
折れ線グラフに丸印を用いる	plt.plot(データ列x, データ列y, marker='o')
配列と配列についての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
四分位点でデータを標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
データフレームを各列毎にグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
小数点数の常用対数	math.log10(x)
データフレームのカラムの文字列を欠損値に変換する	df[col].replace(s, np.nan)
散布図の色をライムグリーンにする	plt.scatter(データ列x, データ列y, color='limegreen')
標準出力を	sys.stdout
ヒストグラムの色をビスクにする	plt.hist(データ列, color='bisque')
データフレームを'A'列と'B'列で並べ、、更新する	df.sort_values(by=['A', 'B'], inplace=True)
ビスク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='bisque')
数値を赤色にする	f'\033[31m{value}\033[0m'
サンディーブラウン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='sandybrown')
ベクトルのユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
option: 読み込まない列番号をnamesで指定する	skiprows = names
データ列の欠損値を中央値で埋める	ds.fillna(ds.median())
ピアソン相関係数を用いてデータフレームのリスト列の相関行列	df[aList].corr(method='pearson')
ミディアムパープル色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumpurple')
ピーチパフ色でヒストグラムを描画する	plt.hist(データ列, color='peachpuff')
option: グラフの線の種類を一点鎖線に変更する	linestyle = 'dashbot'
色付きの一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
Pandasで、文字列をフォーマットで日付データに変換する	pd.to_datetime(s, format='%Y-%m-%d')
option: イエローグリーンにグラフの色を設定する	color = 'yellowgreen'
文字列の示すエンコーディングでファイルをオープンする]	open(filepath, encoding=s)
変数について数値の微分を行う	sympy.diff(e, z)
クロス印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
列の各データ値の出現数	ds.value_counts()
文字列が全て識別子名	s.isidentifier()
イテラブルから複数個、ランダムに選ぶ	random.choices(iterable, k=n)
nがn2より小さいか	n < n2
数値の簡略化を行う	sympy.sympify(e)
折れ線グラフをダークシアグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
データフレームから数値データを抽出する	df.select_dtypes('number')
横棒グラフを珊瑚色を用いて描画する	plt.barh(データ列x, データ列y, color='coral')
ゼロ埋めされた整数型の行列を作成する	np.zeros(要素数, dtype=np.int)
３二ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.int16)
ダークオリーブグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkolivegreen')
句読点文字を全て見る	string.punctuation
リストとリストについて散布図を描画して、マーカーを丸に変更する	plt.plot(データ列x, データ列y, marker='o')
数値をゼロ埋めした文字列に変換する	str(n).zfill(文字列幅)
nをn2で割った余りをnに代入する	n %= n2
マッピングのキーを列挙する	list(aDict)
２つのオブジェクトが等しいか確認する	obj == obj2
ヒストグラムの色をライトスチールブルーに設定する	plt.hist(データ列, color='lightsteelblue')
現在の分数	datetime.date.today().minute
縦軸の目盛を表示しない	plt.yticks([])
データフレームを二つの列の値によってグループ化し、要約統計量を求める	df.groupby(['A', 'B']).describe()
商と余りを同時に計算する	divmod(x, y)
棒グラフをグレー色を用いて描画する	plt.bar(データ列x, データ列y, color='gray')
タプルの先頭のn要素を除く	aTuple[n:]
文字列の後ろから部分文字列を消す	s.rstrip(sub)
option: 配列のデータ型を指定する	dtype = np.uint8
縦棒グラフをスカイブルー色として描画する	plt.bar(データ列x, データ列y, color='skyblue')
アリスブルー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='aliceblue')
option: 青緑色を使う	color = 'turquoise'
文字列を最後の部分文字列で分けたときの前半の文字列	s.rpartition(sub)[0]
パラメータについて数式をn階微分する	sympy.diff(e, z, n)
文字列を部分文字列で末尾から区切る	s.rsplit(sub)
集合が空	len(aSet) == 0
決定木を表示する	sklearn.tree.plot_tree(model, feature_names=X.columns, filled=True)
０で全要素を初期化した行列	np.zeros(行数, 列数)
ベクトルの最大値を算出する	np.max(aArray)
グラフにy=0の実線をつける	plt.axhline(y=0, linestyle='solid')
ヒストグラムの色をグリーンに設定する	plt.hist(データ列, color='green')
データフレームのリストカラムの欠損値を後の行の値にする	df[aList].fillna(method='bfill')
横棒グラフをピーチパフ色として描画する	plt.barh(データ列x, データ列y, color='peachpuff')
２つの列でデータフレームをソートする	df.sort_values(by=['A', 'B'])
赤色でヒストグラムを描画する	plt.hist(データ列, color='red')
整数nを二進表記に変換する	bin(n)
行列積	np.matmul(aArray, aArray2)
最大値・最小値で整数乱数を生成する	random.randint(最小値, 最大値)
タプルをインデント付きで文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
折れ線グラフをやわらかい青色で描画する	plt.plot(データ列x, データ列y, color='cornflowerblue')
散布図の丸マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='o', markeredgewidth=2.5)
データフレームの列の名前を文字列を文字列に置換する	df.columns = [str(x).replace(s, s2) for x in df.columns]
コーンフラワーブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
散布図に黒い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
要素が全て初期値の配列	np.full(要素数, 初期値, dtype=np.int)
ヒストグラムの色をコーンズシルクにセットする	plt.hist(データ列, color='cornsilk')
ユーザから入力される	int(input())
スカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
クリムゾン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='crimson')
散布図のバツマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
クラス分類をパーセプトロンで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
データを最大最小値でスケーリングする	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
折れ線グラフをダークマゼンタ色として描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: 色をダークシアグリーンに設定する	color = 'darkseagreen'
ヒストグラムをオレンジレッド色として描画する	plt.hist(データ列, color='orangered')
データフレームのリストカラムの欠損値を平均で埋める	df[aList].fillna(df[aList].mean())
要素が集合のメンバーに含まれるか調べる	element in aSet
文字列中から正規表現にASCII限定としてマッチする文字列を探す	re.search(pattern, s, flags=re.ASCI)
正規表現を事前にコンパイルする	re.compile(pattern)
データフレームをグループ化し、それぞれの列に対し分散を計算する	df.groupby(column)[column2].var()
実行を正しく終了する	sys.exit(0)
パパイヤウィップ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='papayawhip')
実数とyのノルムを算出する	math.hypot(x, y)
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgray')
データフレームをインデックスによってソートする	df.sort_index()
インディゴ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='indigo')
パレットトルコイズ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='paleturquoise')
ファイルからバイナリ書き込みストリームをオープンして]fとする	f = open(filepath, mode='wb')
散布図のマーカーをバツにする	plt.scatter(データ列x, データ列y, marker='x')
2つのリストから辞書	dict(zip(aList, aList2))
option: ブランチドアーモンドを用いる	color = 'blanchedalmond'
散布図を深紅色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
棒グラフをライトイエロー色で描画する	plt.bar(データ列x, データ列y, color='lightyellow')
year年を日付時刻に変換する	datetime.datetime(year=year, month=1, day=1)
データフレームをJSONLファイルにBOM付きで書き込む	df.to_csv(filename, encoding='utf_8_sig')
値∈セット	element in aSet
イテラブルの推移を折れ線プロットにする	plt.plot(range(len(データ列)), データ列)
タプルのn番目からn2番目までの部分を抽出する	aTuple[n:n2]
データフレームをファイルでJSONLファイルに書き込む	df.to_excel(filename)
直前の値でデータフレームの欠損値を埋める	df.fillna(method='ffill')
散布図の上三角印の線幅を変更する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
文字列中の部分文字列を別の文字列に全て置き換える	s.replace(sub, newsub)
ラベンダー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
FIXME:カテゴリーデータを出現頻度順に整列する	df['A'].value_counts().sort_index().index
赤いポイント印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
文字列が数字	s.isdigit()
ダークゴールデンロッドにヒストグラムの色を設定する	plt.hist(データ列, color='darkgoldenrod')
カウンタのそれぞれの項目を、そのカウントだけリストとして得る	aCounter.elements()
散布図をフローラルホワイト色で描画する	plt.scatter(データ列x, データ列y, color='floralwhite')
数字を全て使う	string.digits
半透明の破線を用いてデータ列の推移をプロットする	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データフレームを各列毎にグループ化して、列の標準偏差を求める	df.groupby(column)[column2].std()
ペールグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='palegreen')
棒グラフの色をグリーンにする	plt.bar(データ列x, データ列y, color='green')
option: ピーチパフにグラフの色をセットする	color = 'peachpuff'
値を双方向キューにプッシュする	deq.append(element)
リストのn番目の	aList[n]
コーンズシルクにヒストグラムの色をする	plt.hist(データ列, color='cornsilk')
空白が文字列内に含まれる	any(c.isspace() for c in s)
横棒グラフをスカイブルー色で描画する	plt.barh(データ列x, データ列y, color='skyblue')
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgray'
表データを関数の値でグループ化し、記述統計量を算出する	df.groupby(関数).describe()
データフレームのカラムの曜日数を使う	df[col].dt.dayofweek
日付データが日付データより前か調べる	aDate < aDate2
option: マーカーの色をアクアにする	markerfacecolor = 'aqua'
列'A'と列'B'をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
折れ線グラフの色をミディアムアクアマリンに設定する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
折れ線グラフの色をマルーンにセットする	plt.plot(データ列x, データ列y, color='maroon')
日付データのデータフレームのカラムをデータフレームのインデックスにする	df.index = pd.DatetimeIndex(df[col])
散布図に黒い菱形マーカーを使用する	plt.plot(データ列x, データ列y, marker='D', c='k')
折れ線グラフの線の種類を点線に変更する	plt.plot(データ列x, データ列y, linestyle='dotted')
ヒストグラムの色をスレートブルーにする	plt.hist(データ列, color='slateblue')
標準エラーを使用する	sys.stderr
ゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='goldenrod')
option: 色をラベンダーに設定する	color = 'lavender'
最大長nの両端キューを列から作成する	collections.deque(iterable, maxlen=n)
乱数の行列を作る	np.random.random((行数, 列数))
データフレームの列の歪度	df[col].kurt()
現在が何月か知る	datetime.datetime.today().month
データフレームをインデックスによって昇順に並べる	df.sort_index(ascending=True)
ゼロ埋めされた８ビット整数型の配列	np.zeros(要素数, dtype=np.int8)
文字列を中央寄せする	s.center(文字列幅)
配列の列	aArray[:, 列番号]
凡例を最適な場所に表示する	plt.legend(loc='best')
二つのリストからマップ	dict(zip(aList, aList2))
キーが辞書に存在するか調べる	key not in aDict
配列を2次元1列に変形する	aArray.reshape(-1, 1)
データフレームのリストカラムの中にいくつ未入力値があるか求める	df[aList].isna().sum()
列をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, on=column, how='left')
データフレームの列が文字列で始まる行を抽出する	df[df[column].str.startswith(s)]
折れ線グラフのダイアモンドマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
が名前付きタプルかどうか確認する	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
折れ線グラフの四角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
文字列リストをsepを区切りにしてひとつの文字列にする	sep.join(aStringList)
折れ線グラフの星マーカーを赤色にする	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='r')
論理値型のゼロ埋めされた行列	np.zeros(要素数, dtype=np.int32)
ヒストグラムを半透明にする	plt.hist(データ列x, alpha=0.5)
option: グラフの色をパレットトルコイズに変更する	color = 'paleturquoise'
データフレームを'A'列でによって降順にソートする	df.sort_values(by='A', ascending=False)
カテゴリでグループ化してデータフレームの全カラムの散布図を可視化する	sns.pairplot(df, hue='カテゴリ列')
ヒストグラムをグリーンイエロー色で描画する	plt.hist(データ列, color='greenyellow')
グラフのテーマをパステル調にする	sns.set(pallete='pastel')
xが1、もしくは2、もしくは3に等しいかどうか	x == 1 or x == 2 or x == 3
集合から要素を除く	aSet.remove(element)
折れ線グラフを茶色色を使って描画する	plt.plot(データ列x, データ列y, color='brown')
xを実数にする	float(x)
グラフのパレットをパステル調にする	sns.set(pallete='pastel')
データフレームを'A'列で昇順にソートする	df.sort_values(by='A', ascending=True)
データフレームを各列と列の組み合わせ毎にグループ化して分散を算出する	df.groupby([column, column2], as_index=False).var()
線グラフの色をスカイブルーに設定する	plt.plot(データ列x, データ列y, color='skyblue')
リストの要素を逆順にする	aList[::-1]
サドルブラウン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
散布図の右三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='#800080')
ヒストグラムの色をシスルに指定する	plt.hist(データ列, color='thistle')
タイムスタンプデータをISO形式の文字列に変換する	aDatetime.isoformat()
オプションで、標準出力を使う	file = sys.stdout
予測データの混同行列を算出する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
データフレームを二つの列によってソートして、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
option: 区切り記号をスラッシュにする	sep = '/'
散布図のクロスマーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
文字列を全て小文字にする	s.casefold()
イテラブルの要素を全て集合に追加する	aSet.update(iterable)
option: グラフの色をパールバイオレットレッドに設定する	color = 'palevioletred'
日付を使う	import datetime
数が正	x > 0
プロットの凡例の位置を指定する	plt.legend(loc=(x, y))
データフレームを'A'列でソートし、、NaNを先頭に来るようにする	df.sort_values(by='A', na_position='first')
パウダーブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='powderblue')
option: ダークオーキッド色を使う	color = 'darkorchid'
部分文字列で文字列を分けたときの前半の文字列	s.partition(sub)[0]
ミディアムパープルにヒストグラムの色を設定する	plt.hist(データ列, color='mediumpurple')
データ列のユニークな値	ds.unique()
パラメータについて数式のインテグラルを求める	sympy.integrate(e, z)
切片なしの単回帰分析の準備をする	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
リストの最後のn要素を取り除く	aList[:-n]
ファイルからバイナリ書き込みストリームを開いて]、fとする	f = open(filepath, mode='wb')
折れ線グラフのポイントマーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
データフレームのカラムの文字列をNaNにする	df[col].replace(s, np.nan)
rgbの四角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
ベクトルの和	aArray + aArray2
横棒グラフをロージーブラウン色として描画する	plt.barh(データ列x, データ列y, color='rosybrown')
ミディアムアクアマリン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
ダークスラテグレー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
横棒グラフの色をグリーンイエローにする	plt.barh(データ列x, データ列y, color='greenyellow')
実行結果を黄色で表示できる文字列にする	f'\033[33m{value}\033[0m'
オプションで、ファイルに出力する	file = sys.open(filename, 'w')
散布図の三角印を青色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ブランチドアーモンド色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
データフレームのカラムの分散	df[col].var()
グラフ描画でカーネル密度推定を用いる	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
nが2で割り切れるかどうか確認する	n % 2 == 0
データフレームからn行、サンプリングする	df.sample(n)
データ列の変化を折れ線グラフにする	plt.plot(range(len(データ列)), データ列)
実数を実数で整数除算する	x // y
データフレームが正規分布からどれだけ、尖っているか見る	df.skew()
追加できるようにファイルを開く]	open(filepath, mode='a')
シルバー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='silver')
データ列の秒	ds.dt.second
二つのリストをタブで区切って表示する	print(value, value2, sep='\t')
二次元タプルをフラット化する	sum(aTuple)
赤い四角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='r')
散布図にポイントマーカーを使用する	plt.plot(データ列x, データ列y, marker='.')
ディープスカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
箱ひげ図を用いてデータ列を描画する	plt.boxplot(データ列)
棒グラフをダークバイオレット色を用いて描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データフレームの列を千の位で丸めて、整数型にする	df[col].round(-3).astype(int)
２つのデータフレームを列'A'と列'B'をキーとして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームを表示するとき、表示する最大列数を変更する	pd.set_option('display.max_columns', n)
書き込み用にBOM付きとしてファイルをオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
文字列の終了位置より前に部分文字列が含まれないか調べる	s.find(sub, 0, end) == -1
rgbの下三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
部分文字列が文字列中に存在する	sub in s
option: マーカーの色を暗い赤にする	markerfacecolor = 'darkred'
リストを三つ並べてヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
辞書に別の辞書の値を加えて、更新する	aDict.update(aDict2)
データフレームを'A'列によって整列する	df.sort_values(by='A')
列をぐるぐると繰り返す	itertools.cycle(iterable)
イテラブルからひとつランダムに選ぶ	random.choice(iterable)
option: エクセルファイルのシート名をnamesに減らす	sheet_name = names
ビン数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
カテゴリ列で色分けしてデータフレームの全カラムの相関をプロット化する	sns.pairplot(df, hue='カテゴリ列')
option: オリベドラブを使う	color = 'olivedrab'
データフレームのカラムの日にちを使う	df[col].dt.day
横棒グラフをオールドレース色として描画する	plt.barh(データ列x, データ列y, color='oldlace')
散布図を黄色くする	plt.scatter(データ列x, データ列y, color='y')
直後の値でデータフレームのNaNを埋める	df.fillna(method='bfill')
データフレームの列がxより少ない行を抽出する	df[df[column] < x]
データフレームから列を一つ選択する	df[[column]]
データフレームの中の列をリストを境界値として分割する	pd.cut(df[col], aList)
棒グラフの色をミスティローズにする	plt.bar(データ列x, データ列y, color='mistyrose')
折れ線グラフをダークグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkgreen')
シスル色の散布図を描画する	plt.scatter(データ列x, データ列y, color='thistle')
n番目のシートをファイルのデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームを列ごとに集約して分散を求める	df.groupby(column).var()
偽陰性を避けたい指標を使用する	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ライトグリーンにヒストグラムの色を変更する	plt.hist(データ列, color='lightseagreen')
散布図の色をインディゴにする	plt.scatter(データ列x, データ列y, color='indigo')
バイトオーダ	sys.byteorder
データ列の折れ線グラフを大バツ印で描画する	plt.plot(データ列x, データ列y, marker='X')
イテラブルとイテラブルをペアリングする	itertools.zip_longest(iterable, iterable2)
集合の全要素が別の集合に含まれるかどうか	aSet.issubset(aSet2)
rgbのバツマーカーをイテラブルとデータ列の散布図に描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
option: ドジャーブルー色を使う	color = 'dodgerblue'
option: ASCII文字に限定する	flag = re.ASCII
option: スラッシュをセパレータで用いる	sep = '/'
ヒストグラムをコーンフラワーブルー色を用いて描画する	plt.hist(データ列, color='cornflowerblue')
二つの集合がセットと互いに素か	aSet.isdisjoint(aSet2)
棒グラフをコーンフラワーブルー色を用いて描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
モデルの残差を求める	目的変数 - model.predict(説明変数)
散布図の色をディムグレーにする	plt.scatter(データ列x, データ列y, color='dimgray')
列の記述統計量	ds.describe()
option: フォントの色をスプリンググリーンに設定する	color = 'springgreen'
横棒グラフを淡いピンク色色として描画する	plt.barh(データ列x, データ列y, color='lightpink')
実測値をモデルの予測値と対比させる	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
データフレームを各列毎に集計し、、列の平均値を計算する	df.groupby(column)[column2].mean()
文字列を部分文字列で二分する	s.partition(sub)
円グラフを完全な円にする	plt.axis('equals')
散布図に四角印を用いる	plt.scatter(データ列x, データ列y, marker='s')
横棒グラフの色を紺碧にする	plt.barh(データ列x, データ列y, color='azure')
xのハッシュ値を求める	hash(x)
列の各要素に対してpredicateFuncがTrueであれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
重回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
option: フォントの色をサドルブラウンに設定する	color = 'saddlebrown'
折れ線グラフに黒い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='k')
データフレームのリストカラムの値を正規表現で一度に変更する	df[aList].replace(pattern, repl, regex=True)
整数nの二進数文字列を使う	bin(n)[2:]
列をカウントしてカウンタを更新する	aCounter.update(iterable)
文字列の中の大文字・小文字を無視して正規表現による全てのマッチを求める	re.findall(pattern, s, flags=re.IGNORECASE)
棒グラフをシルバー色として描画する	plt.bar(データ列x, データ列y, color='silver')
option: フォントの色をダークバイオレットに指定する	color = 'darkviolet'
双方向キューの末尾にイテラブルの各要素を順につけ加える	deq.extend(iterable)
珊瑚色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='coral')
option: ブラウン色を使う	color = 'brown'
カテゴリで色分けして、データフレームの全カラムの散布図をグラフ化する	sns.pairplot(df, hue='カテゴリ列')
文字列全体を大文字・小文字を無視して正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ヒストグラムの色をダークサーモンに指定する	plt.hist(データ列, color='darksalmon')
集合を変更不能に変換する	frozenset(aSet)
数値の数値を求める	float(e)
option: グラフの色をミッドナイトブルーに設定する	color = 'midnightblue'
タプルから計数器を生成する	collections.Counter(aDict)
データフレームのカラムを並べて箱ひげ図にする	plt.boxplot([df['カラム'], df['カラム']])
横棒グラフを青緑色を用いて描画する	plt.barh(データ列x, データ列y, color='teal')
折れ線グラフの色をインディアンレッドに指定する	plt.plot(データ列x, データ列y, color='indianred')
ヒストグラムの色をホットピンクに変更する	plt.hist(データ列, color='hotpink')
線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
散布図の色をインディアンレッドにする	plt.scatter(データ列x, データ列y, color='indianred')
文字列の中でASCII限定としてパターンにマッチした文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
データフレームのデータ型の一覧	df.dtypes
option: ゴールドを用いる	color = 'gold'
option: グラフの色をピンクに設定する	color = 'pink'
両端キュー中の要素の数を数える	deq.count(element)
ヒストグラムをバリーウッド色で描画する	plt.hist(データ列, color='burlywood')
辞書をソートしてJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, sort_keys=True)
option: 紺碧にグラフの色を設定する	color = 'azure'
ダークグリーン色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
横棒グラフを青色を使って描画する	plt.barh(データ列x, データ列y, color='blue')
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategray'
文字列を青色でプリントできる文字列に変換する	f'\033[34m{value}\033[0m'
データフレームから指定されたデータ型の列名一覧	df.select_dtypes(型).columns
横棒グラフをダークオーキッド色で描画する	plt.barh(データ列x, データ列y, color='darkorchid')
ヒストグラムの色をダークターコイズに設定する	plt.hist(データ列, color='darkturquoise')
カラーバーを横向きにつける	plt.colorbar(orientation='horizontal')
折れ線グラフの線の種類を破線に指定する	plt.plot(データ列x, データ列y, linestyle='dashed')
双方向キューの最後に列の各要素を順につけ加える	deq.extend(iterable)
データフレームのカラムが何日か調べる	df[col].dt.day
実数の双曲線余弦を計算する	math.cosh(x)
nをn2で割った余りをnとする	n %= n2
表データを各列と列の組み合わせ毎にグループ分けして、標準偏差を求める	df.groupby([column, column2], as_index=False).std()
ヒストグラムを黄色くする	plt.hist(データ列, color='y')
rgbの大バツマーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='X', c=rgb)
横棒グラフを青紫色として描画する	plt.barh(データ列x, データ列y, color='violet')
線グラフの色をダークカーキに変更する	plt.plot(データ列x, データ列y, color='darkkhaki')
本日が木曜日か調べる	datetime.datetime.today().weekday() == 3
option: グラフの色をミディアムスプリンググリーンに設定する	color = 'mediumspringgreen'
散布図の丸マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='r')
日付時刻データにn時間分、加える	aDatetime + datetime.timedelta(hours=n)
オプションで、ファイルを出力にする	file = sys.open(filename, 'w')
ヒストグラムの色をダークスレートブルーに設定する	plt.hist(データ列, color='darkslateblue')
折れ線グラフの左三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
データフレームのリスト列の値が欠損値	df[aList].isna()
option: マーカーの大きさを変える	markersize = 2.0
数列とリストについての散布図に赤い三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='^', c='r')
ケンドールの順位相関係数を求める	scipy.stats.kendalltau(データ列, データ列2)
イテラブルからカウンタを作る	collections.Counter(iterable)
辞書の値の一覧	aDict.values()
双方向キューをデキューする	deq.popleft()
option: ライトグリーン色を使う	color = 'lightseagreen'
rgbの星マーカーを数列とリストについての散布図にプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストと配列についての散布図に赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
黒い四角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
実数を十の位で四捨五入する	round(x, -1)
文字列をn回だけ置換する	s.replace(sub, newsub, n)
列をキーにして二つのデータフレームを結合する	pd.merge(df, df2, on=column)
リストを引数として展開して表示する	print(*aList, sep=',')
赤色で変数を表示する	print(f'\033[31m{value}\033[0m')
nとn2のシートをエクセルファイルファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
コーンズシルク色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
ヒストグラムの色をライトイエローに設定する	plt.hist(データ列, color='lightyellow')
JSONLファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
データフレームのカラムをドロップして、更新する	df.drop(column, axis=1, inplace=True)
配列のパーセントを円プロットとして図示する	plt.pie(データ列, startangle=90)
数式の変数にnを代入する	e.subs(z, n)
横棒グラフをダークカーキ色として描画する	plt.barh(データ列x, データ列y, color='darkkhaki')
アクア色として線グラフを描画する	plt.plot(データ列x, データ列y, color='aqua')
3自然数の最小公倍数	math.lcm(n, n2, n3)
黒い棒グラフを描画する	plt.bar(データ列x, データ列y, color='k')
グラフのカラーパレットをパステル調にする	sns.set(pallete='pastel')
赤い△マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
折れ線グラフに四角マーカーを加える	plt.plot(データ列x, データ列y, marker='s')
散布図をラベンダーブラッシュ色で描画する	plt.scatter(データ列x, データ列y, color='lavenderblush')
タプルをJSON形式でファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
多次元データを特異値分解として淡く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
グラフの色を全般的に濃くする	sns.set(pallete='deep')
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategray')
ヒストグラムを点線で描画する	plt.hist(データ列, linestyle='dotted')
データフレームをインデックスによって降順で並べる	df.sort_index(ascending=False)
乱数を正規分布で生成する	random.normalvariate(mu=0.5, sigma=0.2)
option: マーカーの色をサンディーブラウンにする	markerfacecolor = 'sandybrown'
縦棒グラフを描いて、ラベルを中央寄せする	plt.bar(ラベル列, データ列, align='center')
分子と分母から有理数を新規生成する	fractions.Fraction(分子, 分母)
散布図に黒い▼マーカーを描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
ファイルパスをUTF8として書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
カウンタを少ない方から列挙する	aCounter.most_common()[::-1]
アルファベットの小文字を全部使う	string.ascii_lowercase
文字列を緑色で表示する	print(f'\033[32m{value}\033[0m')
日付時刻データが金曜日	aDatetime.weekday() == 4
nがn2の倍数でないかどうか	n % n2 != 0
マップの値の一覧	aDict.values()
データフレームのリスト列の欠損値を直後の値に設定する	df[aList].fillna(method='bfill')
データフレームの列の値がxより多い行を取り出す	df[df[column] > x]
ヒストグラムをグレー色を使って描画する	plt.hist(データ列, color='gray')
本日の月数を使う	datetime.datetime.today().month
折れ線グラフをロージーブラウン色を用いて描画する	plt.plot(データ列x, データ列y, color='rosybrown')
年月日と時間から日付時刻	datetime.datetime(年, 月, 日, 時, 分, 秒)
文字列の左側から部分文字列を取り除く	s.lstrip(sub)
option: グラフの色をミディアムターコイズに設定する	color = 'mediumturquoise'
グラフの描画でパステル調にパレットを使う	sns.set(pallete='pastel')
ヒストグラムの色をネイビーに設定する	plt.hist(データ列, color='navy')
option: グラフの色をディープスカイブルーに設定する	color = 'deepskyblue'
ヒストグラムをミスティローズ色で描画する	plt.hist(データ列, color='mistyrose')
シアン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
マップのキーの一覧	aDict.keys()
option: 色をライムに変更する	color = 'lime'
nという名前のシートをファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
データフレームのカラムが正規分布からどの程度歪んでいるか調べる	df[col].kurt()
いつまでもnからstep間隔でカウントアップする	itertools.count(start=n, step=step)
破線として配列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
列のNaNをxに設定する	ds.fillna(x)
リストを番号付けする	enumerate(aList)
n進文字列をバイト列に変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
折れ線グラフでデータ列の推移を可視化する	plt.plot(range(len(データ列)), データ列)
散布図に黒い大バツマーカーを用いる	plt.plot(データ列x, データ列y, marker='X', c='k')
データ列の折れ線グラフを四角印で描画する	plt.plot(データ列x, データ列y, marker='s')
文字列TSVファイルからn番目のカラムを行としてカンマ区切りのファイルを読み込む	pd.read_csv(filename, index_col=n)
紺色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkblue')
一点鎖線にヒストグラムの線種を設定する	plt.hist(データ列, linestyle='dashbot')
データフレームから指定された三つの列のみ抽出する	df[[column, column2, column3]]
茶色色の線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
ヒストグラムをナバホホワイト色で描画する	plt.hist(データ列, color='navajowhite')
黒い大バツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
nが3の倍数か調べる	n % 3 == 0
散布図の上三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
カラムの未入力値をメディアンに設定する	ds.fillna(ds.median())
ポスターにグラフを設定する	sns.set(context='poster')
濃くカラーパレットをグラフの描画で使う	sns.set(pallete='deep')
アンティークホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
リネン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='linen')
配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
半透明の点線としてリストの変化を描く	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
散布図に大バツ印を使う	plt.scatter(データ列x, データ列y, marker='X')
option: 印を右三角に変える	marker = '>'
タイムスタンプデータをn週間前にする	aDatetime - datetime.timedelta(weeks=n)
データフレームを列名リストの値によってグループ化する	df.groupby(columns)
インディゴ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indigo')
ヒストグラムをライトスカイブルー色を用いて描画する	plt.hist(データ列, color='lightskyblue')
ヒストグラムを一点鎖線を使ってプロットする	plt.hist(データ列, linestyle='dashbot')
option: シスルにフォントの色を指定する	color = 'thistle'
耐火レンガ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
散布図の右三角マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='>', markersize=2.0)
ヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
モデルを作る	model.fit(説明変数, 目的変数)
option: 破壊的に操作する	inplace = True
名前付きタプルをデータからインスタンス化する	C._make(パラメータ)
平仮名を片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
文字列の接頭辞から部分文字列を消す	s.removeprefix(sub)
イテラブルにイテラブルを続けたイテラブル	itertools.chain(iterable, iterable2)
option: バツ印を使う	marker = 'x'
横棒グラフをロイヤルブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='royalblue')
確率的勾配降下として回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
オブジェクトが浮動小数点数クラスか確認する	isinstance(obj, float)
option: クリムゾンを使う	color = 'crimson'
option: 昇順にする	ascending = True
ヒストグラムをブラック色で描画する	plt.hist(データ列, color='black')
線グラフをゴーストホワイト色で描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
折れ線グラフに下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v')
淡い茶色にヒストグラムの色を指定する	plt.hist(データ列, color='tan')
二つのデータフレームを縦方向に一つにする	pd.concat([df, df2], axis=0)
カーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
散布図の菱形マーカーを青くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
縦棒グラフをグレー色で描画する	plt.bar(データ列x, データ列y, color='gray')
ヒストグラムをピーチパフ色を用いて描画する	plt.hist(データ列, color='peachpuff')
プロット中で日本語フォントを使えるようにする	sns.set(font='IPAexGothic')
線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
オブジェクトがフィールドを持つかどうか	hasattr(obj, プロパティ名)
行列にはいくつ要素があるか調べる	aArray.size
option: マーカーの色をタンにする	markerfacecolor = 'tan'
データ列の出現頻度を可視化する	plt.hist(データ列)
option: グラフの色をパウダーブルーに設定する	color = 'powderblue'
折れ線グラフの色をダークスレートブルーにセットする	plt.plot(データ列x, データ列y, color='darkslateblue')
線グラフをスラグレー色で描画する	plt.plot(データ列x, データ列y, color='slategrey')
グリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='green')
ヒストグラムにカラーマップを使う	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
nが2で割り切れない	n % 2 == 1
データフレームを列の値でグループ化する	df.groupby(column)
リストと数列リストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ふたつの辞書を合体する	aDict | aDict2
両端キューの末尾から値を削除する	deq.pop()
データフレームのカラムの欠損値を直前の値で埋める	df[col].fillna(method='ffill')
赤い大バツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='X', c='r')
データ列を縦棒グラフにする	plt.bar(ラベル列, データ列)
option: 印を星に設定する	marker = '*'
文字列を下線付きでプリントする	print(f'\033[4m{value}\033[0m')
データフレームのリスト列の上位25%を計算する	df[aList].quantile(0.25)
棒グラフの色をピンクにする	plt.bar(データ列x, データ列y, color='pink')
折れ線グラフをオレンジ色で描画する	plt.plot(データ列x, データ列y, color='orange')
文字列がn回繰り返すイテラブルを得る	itertools.repeat(element, n)
データフレームのカラムの中央値	df[col].median()
文字列中からパターンにASCII限定としてマッチする位置を探す	re.search(pattern, s, flags=re.ASCI)
ポイントマーカーで折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムの色をライトグレーにセットする	plt.hist(データ列, color='lightgrey')
部分的最小二乗法で回帰分析を行う	model = sklearn.cross_decomposition.PLSRegression(n_components=10)
キーで指定された項目を辞書から取り出す	aDict.pop(key)
ヒストグラムをライトシアン色として描画する	plt.hist(データ列, color='lightcyan')
リッジ回帰とロッソ回帰のハイブリッド分析の準備をする	model = sklearn.linear_model.ElasticNet()
文字列内にひとつでも大文字が含まれるか	any(c.isupper() for c in s)
データフレームを'A'列の値によってグループ分けする	df.groupby('A')
三自然数の最大公約数を計算する	math.gcd(n, n2, n3)
ヒストグラムの色をアンティークホワイトに設定する	plt.hist(データ列, color='antiquewhite')
プロットに水平方向の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
集合を空にする	aSet.clear()
ダーク・スラテグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkslategrey')
散布図をシーグリーン色で描画する	plt.scatter(データ列x, データ列y, color='seagreen')
Pythonインタプリタの実行ファイルの絶対パス	sys.executable
データフレームの中のカラムを等量でビン数nとして分割する	pd.qcut(df[col], n)
二進文字列を整数に変換する	int(s, 2)
データフレームのデータ型の一覧を求める	df.dtypes
シーケンスの組み合わせ	itertools.combinations(iterable, n)
空のキュー	collections.deque()
インディアンレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
折れ線グラフの四角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='s', markeredgewidth=2.5)
列によって表をグループ化する	df.groupby(column)
リストが空	len(aList) == 0
データフレームのリスト列の相関行列を求める	df[aList].corr()
ヒストグラムをレモンシフォン色を用いて描画する	plt.hist(データ列, color='lemonchiffon')
散布図の▼マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームのカラムの欠損値を直前の値に指定する	df[col].fillna(method='ffill')
部分文字列で文字列を二分する	s.partition(sub)
縦棒グラフを描画して中央寄せする	plt.bar(ラベル列, データ列, align='center')
散布図をカデットブルー色で描画する	plt.scatter(データ列x, データ列y, color='cadetblue')
十六進数字を使う	string.hexdigits
配列とリストについて散布図を描画して、右三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームのリストカラムの文字列を未入力値に変換する	df[aList].replace(s, np.nan)
ヒストグラムをシアン色を用いて描画する	plt.hist(データ列, color='cyan')
折れ線グラフをオールドレース色で描画する	plt.plot(データ列x, データ列y, color='oldlace')
rgbの下三角マーカーを用いて散布図を描く	plt.plot(データ列x, データ列y, marker='v', c=rgb)
分子n分母mの有理数を新規生成する	fractions.Fraction(numerator=n, denominator=m)
散布図の▲マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
ヒストグラムをコーンフラワーブルー色で描画する	plt.hist(データ列, color='cornflowerblue')
縦方向に二つのデータフレームを連結する	pd.concat([df, df2])
numpyを使う	import numpy as np
改行なしに文字列をプリントする	print(value, end='')
option: グラフの色をシスルに設定する	color = 'thistle'
列から重複なく、n要素選ぶ	random.sample(iterable, k=n)
切片なしの線形回帰モデルを作る	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
option: 星マーカーを描画する	marker = '*'
option: マーカーをバツに変更する	marker = 'x'
option: 青緑色を使用する	color = 'teal'
棒グラフをパールゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='palegoldenrod')
折れ線グラフを点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
データ列を100の位で丸めて、整数にする	ds.round(-2).astype(int)
読み込みモードでファイルパスをオープンして]、fとする	f = open(filepath, mode='r')
データフレームのリストカラムを1000の位で丸める	df[aList].round(-3)
二つの文字列を順にプリントする	print(value, value2)
nが正の整数かどうか調べる	n > 0
線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
散布図に青い三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの列を十の位で丸めて、整数型にする	df[col].round(-1).astype(int)
二つの実行結果をコロンで区切って表示する	print(value, value2, sep=':')
カウンタ同士でユニオン演算する	aCounter | aCounter2
前の行の値でデータフレームのリストカラムのNaNを置き換える	df[aList].fillna(method='ffill')
option: グラフの色をミディアムシアグリーンにセットする	color = 'mediumseagreen'
ヒストグラムを描画してビン数を指定する	plt.hist(データ列, bins=区関数)
文字列を回数を制限して置き換える	s.replace(sub, newsub, n)
黒い下三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c='k')
データフレームのリストカラムを10の位で四捨五入する	df[aList].round(-1)
横棒グラフをクリムゾン色で描画する	plt.barh(データ列x, データ列y, color='crimson')
茶色色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='brown')
現在の再帰の最大回数	sys.getrecursionlimit()
折れ線グラフをダークグレー色で描画する	plt.plot(データ列x, データ列y, color='darkgrey')
ライトスカイブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
データフレームのカラムの年	df[col].dt.year
日付データの月を求める	aDate.month
ピアソンの相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
ロッソ回帰分析の準備をする	model = sklearn.linear_model.Rosso(alpha=正則化項)
文字列の接頭辞が部分文字列か	s.startswith(sub)
データフレームを列の値によってまとめたグループ	df.groupby(column)
option: ライトサーモン色を使う	color = 'lightsalmon'
セットをイミュータブルに変換する	frozenset(aSet)
データフレームの指定された三つの列を抽出する	df[[column, column2, column3]]
option: マルーンを使う	color = 'maroon'
正規分布の確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
option: フォントの色をコーラルにセットする	color = 'coral'
棒グラフをパレットトルコイズ色として描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
バリーウッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
破線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
option: フォントの色を青紫に設定する	color = 'violet'
集合から全要素を除く	aSet.clear()
ファイルが存在する	os.path.exists(filepath)
データ列を横に並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
ピーチパフ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='peachpuff')
実測値をモデルの予測値と散布図に描く	plt.scatter(目的変数, model.predict(説明変数))
文字列を走査し、正規表現に大文字・小文字を無視してマッチするか確認する	re.search(pattern, s, flags=re.IGNORECASE)
formatパターンの文字列をタイムスタンプに変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
option: ダークマゼンタ色を使う	color = 'darkmagenta'
二つの列の値でデータフレームをまとめたグループ	df.groupby(['A', 'B'])
既存のファイルをBOM付きで追加できるように開く]	open(filepath, mode='a', encoding='utf_8_sig')
数式の数値を求める	float(e)
散布図を四角マーカーで描画する	plt.plot(データ列x, データ列y, marker='s')
散布図の丸印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='o', markersize=2.0)
辞書の全項目を消去する	aDict.clear()
option: 改行の代わりに文字列を用いる	end = s
データフレームのリスト列の中にいくつ文字列が存在するかカウントする	df[aList].isin([value]).sum()
回帰分析をアンサンブル学習でする	sklearn.ensemble.VotingRegressor()
データフレームを列で集約して、それぞれのグループごとの件数を知る	df.groupby(column).size()
option: グラフの色をサーモンに設定する	color = 'salmon'
option: マーカーの色をフォレストグリーンにする	markerfacecolor = 'forestgreen'
option: グラフの色をミディアムスレートブルーに設定する	color = 'mediumslateblue'
線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgrey')
データフレームのカラムが何秒か確認する	df[col].dt.second
ヒストグラムをインディアンレッド色として描画する	plt.hist(データ列, color='indianred')
option: ロージーブラウンを使う	color = 'rosybrown'
option: 色をネイビーにセットする	color = 'navy'
集合が空集合かどうか	len(aSet) == 0
グラフにy=0の破線を付ける	plt.axhline(y=0, linestyle='dashed')
文字列が全てアルファベットか調べる	s.isalpha()
配列を等間隔でn個にビン分割する	pd.cut(aArray, n)
ファイルをバイナリ書き込みモードを使ってオープンする]	open(filepath, mode='wb')
データフレームの列がxより大きくx2より小さい行を抽出する	df[(x < df[column]) & (df[column] < x2)]
データフレームの列の名前を列から文字列に付け直す	df.rename(columns={column: name})
棒グラフをミディアムスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
option: 淡いピンク色色を使う	color = 'lightpink'
option: ブランチドアーモンドに色をセットする	color = 'blanchedalmond'
データ列の尖度	ds.skew()
文字列を最初の部分文字列で二分し、前半の文字列を見る	s.partition(sub)[0]
コマンド引数の一覧	sys.argv[1:]
両端キューを空にする	deq.clear()
折れ線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
オリベドラブ色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
スピアマンを用いてデータフレームの相関行列	df.corr(method='spearman')
スカイブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='skyblue')
オールドレース色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='oldlace')
方程式として数値の変数の解を計算する	sympy.solve(e, z)
データフレームから最後の列を除く	df[df.columns[:-1]]
日付データにn週間を加算する	aDate + datetime.timedelta(weeks=n)
棒グラフをタン色で描画する	plt.bar(データ列x, データ列y, color='tan')
データラベルを表示する	plt.legend()
縦軸の目盛を整数のみにする	plt.yticks(np.arange(最小値, 最大値, 間隔))
折れ線グラフの色を貝殻に変更する	plt.plot(データ列x, データ列y, color='seashell')
ヒストグラムの色をミディアムスレートブルーに変更する	plt.hist(データ列, color='mediumslateblue')
option: コーラルを用いる	color = 'coral'
データフレームの中の列をn個にビニングする	pd.cut(df[col], n)
実数を小数点以下第一位で丸める	round(x, 1)
nの無限数列を得る	itertools.repeat(n)
ファイルからファイル名を見る	os.path.basename(filepath)
原点から(小数点数,y)の距離	math.hypot(x, y)
predicateFuncがTrueとなる列の要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
タイムスタンプデータをタプルに変換する	aDatetime.timetuple()
横棒グラフをグレー色で描画する	plt.barh(データ列x, データ列y, color='grey')
行列の分散	np.var(aArray)
nという名前のシートをエクセルファイルファイルからデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
改行で区切って二つの数値をプリントする	print(value, value2, sep='\n')
日付時刻データからn分、減算する	aDatetime - datetime.timedelta(minutes=n)
ヒストグラムの色をゴーストホワイトに設定する	plt.hist(データ列, color='ghostwhite')
option: グラフの色をグレーに設定する	color = 'gray'
文字列の開始位置以降に部分文字列が含まれるか調べる	s.find(sub, start) != -1
ランダム性を追加したランダムフォレストで回帰分析をする	model = sklearn.ensemble.ExtraTreeRegressor(n_estimators=10)
グラフの描画で明るく色調を使用する	sns.set(pallete='bright')
リストを縦軸、イテラブルを横軸として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
黒い右三角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ライトスレイグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
データフレームの中に文字列が含まれるかどうか調べる	df.isin([value])
nまでの偶整数列	list(range(2, n, 2))
横棒グラフをサーモン色として描画する	plt.barh(データ列x, データ列y, color='salmon')
散布図をスラグレー色で描画する	plt.scatter(データ列x, データ列y, color='slategrey')
データフレームをエクセルファイル形式でJSONLファイルに書き込む	df.to_excel(filename)
フォレストグリーン色としてヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
折れ線グラフをダークゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの色をブラックに指定する	plt.plot(データ列x, データ列y, color='black')
黒い丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c='k')
option: グラフの色をシルバーに指定する	color = 'silver'
option: グラフの色をライトサーモンに変更する	color = 'lightsalmon'
最大値・最小値の範囲で一様な疑似乱数を計算する	random.uniform(最小値, 最大値)
配列の内積	np.dot(aArray, aArray2)
カウンタの項目の回数	aCounter[element]
散布図の星マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='r')
option: コーンフラワーブルー色を使用する	color = 'cornflowerblue'
データフレームの全カラムの相関をプロット化する	sns.pairplot(df)
二つのデータフレームを列をキーにして左ジョインする	pd.merge(df, df2, on=column, how='left')
TSVファイルからSJISでCSVファイルを読み込む	pd.read_csv(filename, encoding='shift_jis')
option: ポイントマーカーを描画する	marker = '.'
ゼロ埋めされた論理値型の配列	np.zeros(要素数, dtype=np.int32)
MeanSquaredErrorを計算する	sklearn.metrics.mean_squared_error(データ列, データ列2)
折れ線グラフの下三角マーカーの色を設定する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
ダークグレー色のヒストグラムを描画する	plt.hist(データ列, color='darkgrey')
日付データが木曜日か調べる	aDate.weekday() == 3
数値をキューにプッシュする	deq.append(element)
データフレームの各グループごとの最小値を計算する	df.groupby(column).min()
散布図をミディアムバイオレットレッド色で描画する	plt.scatter(データ列x, データ列y, color='mediumvioletred')
nがn2以上かテストする	n >= n2
棒グラフの色をダークターコイズにする	plt.bar(データ列x, データ列y, color='darkturquoise')
棒グラフの色をシエナにする	plt.bar(データ列x, データ列y, color='sienna')
option: エンコーディングをBOM付きに変更する	encoding = 'utf_8_sig'
箱髭図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
option: オールドレース色を使う	color = 'oldlace'
データフレームを列で集約して列の要約統計量を求める	df.groupby(column).describe()[column2]
二つのデータフレームを異なる列をキーとして右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
データフレームを列によってグループ化して、それぞれのグループごとの個数を求める	df.groupby(column).count()
データフレームのリストカラムが正規分布からどの程度、歪んでいるか調べる	df[aList].kurt()
線グラフの色をダークシアンに変更する	plt.plot(データ列x, データ列y, color='darkcyan')
柱状図をビンを設定して描画する	plt.hist(データ列, bins=区関数)
タン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
デフォルトでグラフの見た目をイイ感じに設定する	sns.set()
二つのマッピングをチェーンする	collections.ChainMap(aDict, aDict2)
nとn2の論理積	n & n2
リストとリストについての散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームのリストカラムの中に文字列と文字列があるか調べる	df[aList].isin([value, value2])
文字列リストに列を変換してカンマで結合する	','.join(map(str, iterable))
ヒストグラムの色をミディアムブルーに変更する	plt.hist(データ列, color='mediumblue')
option: グラフの色をサーモンにセットする	color = 'salmon'
ファイルのn番目のシートを読む	pd.read_excel(filename, sheet_name=n)
option: グラフの色をサンディーブラウンに変更する	color = 'sandybrown'
データ列と配列についての散布図に下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v')
データフレームの重複を確認する	df.duplicated()
ヒストグラムの色をパレットトルコイズにする	plt.hist(データ列, color='paleturquoise')
データフレームで、列と列の重複を取り除く	df.drop_duplicates(subset=column)
棒グラフをゴールデンロッド色として描画する	plt.bar(データ列x, データ列y, color='goldenrod')
配列の全要素の値を変更する	aArray[:, :] = 指定の値
ミディアムスレートブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
リストを紫色でプリントする	print(f'\033[35m{value}\033[0m')
データ列を100の位で丸めて、整数型にする	ds.round(-2).astype(int)
両端キューの長さを制限する	collections.deque(maxlen=n)
カラムの尖度	ds.skew()
nが3で割り切れるか確認する	n % 3 == 0
赤い点線で数列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
ダークシアン色の折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkcyan')
散布図をドジャーブルー色で描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
配列と数列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
円グラフを使ってイテラブルの割合を可視化する	plt.pie(データ列, startangle=90)
配列と配列について散布図を描画してマーカーを▽に設定する	plt.plot(データ列x, データ列y, marker='v')
直後の値でデータフレームのカラムの欠損値を補う	df[col].fillna(method='bfill')
データフレームを複数の列でソートする	df.sort_values(by=column)
イテラブルを文字列に変換して、'改行で連結する	'\n'.join(map(str, iterable))
データフレームを各列毎にグループ分けし、列の平均値を求める	df.groupby(column)[column2].mean()
オブジェクトは浮動小数点数クラスか調べる	isinstance(obj, float)
実数が無限大かどうか調べる	math.isinf(x)
ファイルパスを絶対ファイルパスに変換する	os.path.abspath(filepath)
横棒グラフをコーラル色を用いて描画する	plt.barh(データ列x, データ列y, color='coral')
正規分布か調べる	scipy.stats.shapiro(データ列)
折れ線グラフの色をディムグレーに設定する	plt.plot(データ列x, データ列y, color='dimgray')
パパイヤウィップ色で散布図を描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
ライムグリーン色でヒストグラムを描画する	plt.hist(データ列, color='limegreen')
横棒グラフをドジャーブルー色として描画する	plt.barh(データ列x, データ列y, color='dodgerblue')
option: マーカーの色をオリーブにする	markerfacecolor = 'olive'
option: ライトスカイブルー色を用いる	color = 'lightskyblue'
勾配ブースティングでクラス分類をする	model = sklearn.ensemble.GradientBoostingClassifier()
nの8進表現	oct(n)
グラフの用途をポスターにする	sns.set(context='poster')
データフレームの欠損値をモードに設定する	df.fillna(df.mode().iloc[0])
表の各列間の相関係数を算出する	df.corr()
データフレームを各列毎にグループ化して、文字列というグループを見る	df.groupby(column).get_group(s)
ファイルを読み込みできるようにオープンする]	open(filepath, mode='r')
ミディアムバイオレットレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
文字列TSVからn番目のカラムを行にしてCSVファイルを読み込む	pd.read_csv(filename, index_col=n)
データ列とリストについて散布図をプロットしてポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データ列の折れ線グラフを描き、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データフレームの欠損値を前の行の値で埋める	df.fillna(method='ffill')
文字列の末尾から改行を取り除く	s.rstrip('\n')
ヒストグラムの色をレモンシフォンに設定する	plt.hist(データ列, color='lemonchiffon')
散布図の色をシルバーにする	plt.scatter(データ列x, データ列y, color='silver')
値を下線付きでプリントできる文字列にする	f'\033[4m{value}\033[0m'
option: 線の種類を実線に設定する	linestyle = 'solid'
option: マーカーの色を紺にする	markerfacecolor = 'darkblue'
インディゴ色のヒストグラムを描画する	plt.hist(データ列, color='indigo')
タプルのキーの一覧	aDict.keys()
英字の小文字を全部使う	string.ascii_lowercase
カウンタの要素一覧	aCounter.keys()
折れ線グラフに青い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='b')
ドジャーブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
option: フォントの色をオレンジに設定する	color = 'orange'
データをL2ノルムを使って正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
カウンタ同士でユニオン	aCounter | aCounter2
データフレームを列によって並べ直して、更新する	df.sort_values(by=column, inplace=True)
ダークグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgray')
ダークグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgray')
未初期化の配列	np.empty(要素数, dtype=np.int)
折れ線グラフの色をモカシンに設定する	plt.plot(データ列x, データ列y, color='moccasin')
折れ線グラフの色をミディアムアクアマリンに変更する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
nとn2のビット積を求める	n & n2
ダークターコイズ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
アクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='aquamarine')
ラインを色付きの一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
フォレストグリーン色でヒストグラムを描画する	plt.hist(データ列, color='forestgreen')
二つのデータフレームを列をキーとして全ジョインする	pd.merge(df, df2, on=column, how='outer')
綺麗なグラフを用いる準備をする	import seaborn as sns
辞書をインデント幅nのJSONフォーマットの文字列にする	json.dumps(aDict, ensure_ascii=False, indent=n)
OSはMacOSか調べる	sys.platform.startswith('darwin')
option: マーカーの色をレベッカパープルにする	markerfacecolor = 'rebeccapurple'
ASCII限定として正規表現に文字列の先頭でマッチさせる	re.match(pattern, s, flags=re.ASCI)
横棒グラフをアンティークホワイト色を用いて描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
データフレームを複数の列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
リストの中の一番小さい値	min(aList)
文字列の無限イテラブル	itertools.repeat(element)
散布図の下三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームのカラムが何分か見る	df[col].dt.minute
ファイルからの入力ストリームを使う	open(filepath)
パラメータについて数値の微分を行う	sympy.diff(e, z)
表示できる列数の最大値をnに設定する	pd.set_option('display.max_columns', n)
データフレームを表示するとき、小数点以下の表示精度をn桁に設定する	pd.set_option('precision', n)
データフレームの列が文字列で始まらない行を抽出する	df[not df[column].str.startswith(s)]
タイムスタンプデータの年	aDatetime.year
option: ベージュにグラフの色を設定する	color = 'beige'
year年month月day日hour時minute分を日付時刻に変換する	datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)
nまでの奇整数列	list(range(1, n, 2))
タプル内の要素が少なくとも一つ真か調べる	any(aTuple)
ダークシアグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
データフレームを2つの列によってを用いて破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
散布図をリネン色を用いて描画する	plt.scatter(データ列x, データ列y, color='linen')
データフレームを各列と列の組み合わせ毎にグループ化し、、個数を計算する	df.groupby([column, column2], as_index=False).count()
option: スカイブルー色を使用する	color = 'skyblue'
棒グラフをミディアムアクアマリン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
option: カンマをセパレータで使う	sep = ','
カウンタの項目を増やす	aCounter[element] += 1
３つの文字列を順にプリントする	print(value, value2, value3)
文字列のプレフィックスが部分文字列	s.startswith(sub)
小数点数以上の最小の整数	math.ceil(x)
予測値とデータの離れ具合を見る	sns.residplot(x='列名', y='列名', data=df)
データ列の日にち	ds.dt.day
タイムスタンプデータを文字列としてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
上位集合か調べる	aSet.issuperset(aSet2)
nが2で割り切れるか調べる	n % 2 == 0
タプルのn番目のを求める	aTuple[n]
プラットフォームの符号付き整数の最大値を知る	sys.maxsize
xが一桁の正の数か調べる	0 <= x <= 9
ゼロ埋めされたブール型の行列	np.zeros(要素数, dtype=np.int32)
リストの末尾から値をポップする	aList.pop()
２つの変数を改行で区切って出力する	print(value, value2, sep='\n')
データフレームのリストカラムの未入力値を最大値に変更する	df[aList].fillna(df[aList].max())
文字列の中でASCII限定として正規表現にマッチしたすべての文字列をリストにする	re.findall(pattern, s, flags=re.ASCI)
数の値が整数か調べる	x.is_integer()
線グラフをダークグレー色として描画する	plt.plot(データ列x, データ列y, color='darkgray')
オブジェクトがn回繰り返すイテラブル	itertools.repeat(element, n)
エポック秒から日付時刻に変換する	datetime.datetime.fromtimestamp(timestamp)
データフレームのカラムのメディアン	df[col].median()
データフレームの最後n行を選択する	df.tail(n)
データフレームの全カラムを散布図で可視化する	sns.pairplot(df)
ヒストグラムを赤くする	plt.hist(データ列, color='r')
ライトブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
棒グラフの色を暗い赤にする	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフの右三角印の線幅を指定する	plt.plot(データ列x, データ列y, marker='>', markeredgewidth=2.5)
クラス分類のF値を求める	sklearn.metrics.f1_score(正解データ列, 予測データ列)
データフレームを関数の値でグループ分けする	df.groupby(関数)
オーキッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orchid')
option: ダークグリーンを使用する	color = 'darkgreen'
グリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='green')
ダークマゼンタ色のヒストグラムを描画する	plt.hist(データ列, color='darkmagenta')
固有値分解を行う	model = sklearn.decomposition.PCA(n_components=n)
紺碧色でヒストグラムを描画する	plt.hist(データ列, color='azure')
現在が月曜日か調べる	datetime.datetime.today().weekday() == 0
option: グラフの色をチョコレートに設定する	color = 'chocolate'
ヒストグラムをカラーマップで描画する	"plt.hist(データ列x, color=plt.get_cmap(""Spectral""))"
散布図をダークバイオレット色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
データフレームの列の空文字を未入力値に変換しドロップする	df[col].replace('', np.nan).dropna()
option: ３二ビット整数型を用いる	dtype = np.int16
最初のカテゴリーを除外してデータフレームの列をダミー変数に変換する	pd.get_dummies(df[column], drop_first=True)
折れ線グラフに黒い△印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
日付データと日付データの時間差を秒数で求める	(aDate - aDate2).total_seconds()//60
文字列は全て識別子名かテストする	s.isidentifier()
option: グラフの色をディムグレーにセットする	color = 'dimgrey'
多次元データを多次元尺度構成法を使って淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
線グラフをインディアンレッド色を使って描画する	plt.plot(データ列x, データ列y, color='indianred')
ヒストグラムの色をスカイブルーに設定する	plt.hist(データ列, color='skyblue')
正規分布による累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
既存の配列を元にして全要素が初期値の配列	np.full_like(aArray, 初期値)
散布図をミディアムブルー色で描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
散布図の色をラベンダーにする	plt.scatter(データ列x, データ列y, color='lavender')
日付時刻データを浮動小数点数にする	aDatetime.timestamp()
散布図の丸マーカーを青くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='b')
黒い右三角マーカーをリストとリストの散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
データフレームから重複を残さず、消す	df.drop_duplicates(keep=False)
文字列リストをsepを区切りとして連結する	sep.join(aStringList)
データフレームのカラムの値が欠損値か調べる	df[col].isna()
シーケンスにイテラブルを続ける	itertools.chain(iterable, iterable2)
小文字を全て使う	string.ascii_lowercase
データフレームからカテゴリデータのカラムのみ取り出す	df.select_dtypes('object')
折れ線グラフのポイント印を赤くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
リストをy座標リストを横軸として大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
データフレームを列によってグループ化して、分散を求める	df.groupby(column).var()
フォレストグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
折れ線グラフの色をシスルに変更する	plt.plot(データ列x, データ列y, color='thistle')
折れ線グラフの色をライムにセットする	plt.plot(データ列x, データ列y, color='lime')
ピアソン積率相関係数としてデータフレームのリストで指定された列の相関行列を求める	df[aList].corr(method='pearson')
文字列中の部分文字列を新しい文字列に全部置換する	s.replace(sub, newsub)
散布図に黒い四角マーカーを使う	plt.plot(データ列x, データ列y, marker='s', c='k')
option: チョコレート色を使用する	color = 'chocolate'
データフレームの欠損値を最頻値で補う	df.fillna(df.mode().iloc[0])
データフレームを複数の列によって昇順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
ミディアムスレートブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
option: 値を置き換える	inplace = True
青い実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
配列を等しい量になるようにn個にビン分割する	pd.qcut(aArray, n)
カラムはどの程度分散しているか見る	ds.var()
要素が辞書の値として含まれている	element in aDict.values()
日付時刻データが何時か知る	aDatetime.hour
データフレームのカラムの欠損値を平均値に設定する	df[col].fillna(df[col].mean())
データフレームを列によって並べ、、下位を取り出す	df.sort_values(columns).tail(n)
分子と分母から有理数を生成する	fractions.Fraction(分子, 分母)
オプションでファイルを使用する	file = sys.open(filename, 'w')
ふたつの集合の共通要素だけに更新する	aSet.intersection_update(aSet2)
option: グラフの色をクリムゾンに指定する	color = 'crimson'
散布図を真紅色で描画する	plt.scatter(データ列x, データ列y, color='crimson')
データフレームのリストカラムの欠損値を最大値で補う	df[aList].fillna(df[aList].max())
データ列の時	ds.dt.hour
正規分布の確率密度関数を使う	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
縦棒グラフをイエローグリーン色で描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
グリッドの線の種類を実線に変更する	plt.grid(linestyle='solid')
数に実数を掛ける	x * y
データフレームの母標準偏差	df.std(ddof=0)
ヒストグラムの色をダークオレンジにセットする	plt.hist(データ列, color='darkorange')
２つのタプルを階層化する	collections.ChainMap(aDict, aDict2)
文字列は文字列より辞書順で前か調べる	s < s2
データフレームの欠損値をモードで埋める	df.fillna(df.mode().iloc[0])
option: ミスティローズ色を使用する	color = 'mistyrose'
数列とリストについて散布図を描画してマーカーをダイアモンドに変更する	plt.plot(データ列x, データ列y, marker='D')
文字列をコロンで区切って、列挙する	s.split(':')
散布図をライトスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='lightsteelblue')
縦軸の目盛に文字列を付ける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
データフレームのリスト列をValueMapで置き換える	df[aList].replace(ValueMap)
折れ線グラフを赤色として描画する	plt.plot(データ列x, データ列y, color='red')
option: 色をスラグレーに設定する	color = 'slategrey'
小文字を大文字にする	s.upper()
カウンタの最頻出な項目	aCounter.most_common()[0]
データフレームを'A'列と'B'列で昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
浮動小数点数の最小値を計算する	sys.float_info.min
プラム色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
データ列の欠損値を前の行の値に設定する	ds.fillna(method='ffill')
折れ線グラフにバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
文字列を変数にして、変数にする	z = sympy.Symbol(s)
option: 色をデピンクに設定する	color = 'deeppink'
option: フォントの色をゴーストホワイトに設定する	color = 'ghostwhite'
特異値分解で多次元データを淡く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=三).fit_transform(多次元データ)
ダークスレートブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkslateblue')
データフレームのカラムの空文字をドロップする	df[col].replace('', np.nan).dropna()
ニューラルネットで回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
文字列中の部分文字列を新しい文字列に回数を制限して置き換える	s.replace(sub, newsub, n)
アンティークホワイト色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
双方向キューの先頭にリストの各要素をつけ加える	deq.extendleft(iterable)
青い右三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='b')
option: フォントの色をビスクに設定する	color = 'bisque'
配列を二つ並べて柱状グラフにする	plt.hist([データ列, データ列], color=['b', 'r'])
棒グラフをライトサーモン色を使って描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
グラフの色を暗くする	sns.set(pallete='dark')
option: グリーン色を使う	color = 'green'
ビン数nで配列を分割する	pd.cut(aArray, n)
データフレームのリストカラムの欠損値を最小値に増やす	df[aList].fillna(df[aList].min())
文字列をアンダーライン付きで表示する	print(f'\033[4m{value}\033[0m')
折れ線グラフの大バツ印を青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
横棒グラフを描いて、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
真紅色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
データフレームの中で列と列に重複があるか調べる	df.duplicated(subset=[column, column2])
option: ベージュ色を用いる	color = 'beige'
データ列の各値が何回出現するか見る	ds.value_counts()
ダイアモンド印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
option: パールゴールデンロッドにグラフの色を設定する	color = 'palegoldenrod'
棒グラフをスカイブルー色を使って描画する	plt.bar(データ列x, データ列y, color='skyblue')
option: グラフの色をシアンに設定する	color = 'cyan'
データ列の中に文字列と文字列がいくつあるか求める	ds.isin([value, value2]).sum()
棒グラフをミディアムパープル色で描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
文字列をSJISでバイト列に変換する	s.encode(encoding='sjis', errors='ignore')
散布図にrgbの下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c=rgb)
折れ線グラフを青い実線を用いてプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
イテラブルから集合	set(iterable)
ひとつでも非空白が文字列中にあるか調べる	any(not c.isspace() for c in s)
配列をn個にビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
シスル色のヒストグラムを描画する	plt.hist(データ列, color='thistle')
プロットに水平方向の点線を付ける	plt.axhline(y=0, linestyle='dotted')
コーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
x軸だけグリッド線	plt.grid(axis='x')
ヒストグラムの色をティールに設定する	plt.hist(データ列, color='teal')
データフレームを列によってソートして、新しいインデックスを振り直す	df.sort_values(columns).reset_index()
折れ線グラフのダイアモンド印を赤色にする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
棒グラフを青緑色で描画する	plt.bar(データ列x, データ列y, color='teal')
データをL2ノルムで正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
散布図に黒い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='k')
カラムを小数点以下n桁で丸める	ds.round(n)
ダークシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkseagreen')
半透明の一点鎖線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
nがn2の倍数かどうか調べる	n % n2 == 0
option: グラフの色をインディゴに変更する	color = 'indigo'
行列のムーア・ペンローズの擬似逆行列を計算する	np.linalg.pinv(aArray)
二つのデータフレームを結合する	pd.merge(df, df2)
等量で配列をビン数nでビン分割する	pd.qcut(aArray, n)
option: マーカーを丸に指定する	marker = 'o'
横棒グラフをパレットトルコイズ色で描画する	plt.barh(データ列x, データ列y, color='paleturquoise')
散布図に青いポイントマーカーを描画する	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
nを二進文字列に変換する	bin(n)[2:]
線グラフの色を紺碧に設定する	plt.plot(データ列x, データ列y, color='azure')
ベクトルのユニークな値を要素とするベクトルを見る	np.unique(aArray)
文字列全体を正規表現にASCII限定としてマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
サンディーブラウン色を使って線グラフを描画する	plt.plot(データ列x, データ列y, color='sandybrown')
2つの文字列は同じでないか調べる	s != s2
列をカウンタに変換する	collections.Counter(iterable)
赤い大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
rgbの▲マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ベクトルは何のデータ型か調べる	aArray.dtype()
データフレームのカラムを十の位で四捨五入する	df[col].round(-1)
空のリストを得る	[]
折れ線グラフをパールバイオレットレッド色を使って描画する	plt.plot(データ列x, データ列y, color='palevioletred')
シーケンスの長さを制限する	collections.deque(iterable, maxlen=n)
option: シエナ色を使う	color = 'sienna'
文字列中から正規表現に大文字・小文字を無視してマッチする文字列を探す	re.search(pattern, s, flags=re.IGNORECASE)
文字列を部分文字列で分けた時の残りの文字列	s.partition(sub)[-1]
文字列が平仮名か	('ぁ' <= ch <= 'ん')
文字列の中の大文字・小文字を無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
データフレームのリストカラムの中にある日付データの数を数える	df[aList].isin([value]).sum()
文字列中から正規表現にマッチする文字列を探す	re.search(pattern, s)
棒グラフをサドルブラウン色で描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
折れ線グラフに黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='k')
棒グラフをライトゴールドロディイエロー色として描画する	plt.bar(データ列x, データ列y, color='lightgoldenrodyellow')
option: 赤色を使用する	color = 'red'
カウンタの最も頻出な項目を求める	aCounter.most_common()[0]
リストを円グラフにする	plt.pie(データ列, startangle=90)
文字列中に日本語があるか調べる	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
日付時刻データをタプルに変換する	aDatetime.timetuple()
シーケンスを累積したイテラブルを求める	itertools.accumulate(iterable, operator.mul)
ファイルがあるか確認する	os.path.exists(filepath)
棒グラフをバイオレット色で描画する	plt.bar(データ列x, データ列y, color='violet')
横棒グラフの色をダークターコイズにする	plt.barh(データ列x, データ列y, color='darkturquoise')
リストとデータ列についての散布図に赤いダイアモンドマーカーを描く	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームを二つの列で並べ直して、NaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
配列の列ごとの合計値	np.sum(aArray, axis=0)
赤い左三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='r')
度数分布図を描画し、合計を1にする	plt.hist(データ列, density=True)
句読点文字を全部使う	string.punctuation
組をnから順番付けする	enumerate(aTuple, start=n)
リストとリストの散布図に文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームをJSONLファイルにヘッダを付けずに書き込む	df.to_csv(filename, header=None)
リストとイテラブルについて散布図をプロットし、マーカーをクロスに設定する	plt.plot(データ列x, データ列y, marker='x')
ミディアムパープル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
散布図でデータフレームのカラムを可視化して、カテゴリ別にマーカーを変える	sns.scatterplot(data=df, x='列名', y='列名', style='カテゴリ列')
値∉集合	element not in aSet
2進対数	math.log2(x)
モデルの精度を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
線グラフの色をブランチドアーモンドに変更する	plt.plot(データ列x, データ列y, color='blanchedalmond')
棒グラフをミディアムブルー色で描画する	plt.bar(データ列x, データ列y, color='mediumblue')
カデットブルー色としてヒストグラムを描画する	plt.hist(データ列, color='cadetblue')
色付きの一点鎖線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
折れ線グラフの色をダークサーモンに変更する	plt.plot(データ列x, データ列y, color='darksalmon')
リストとイテラブルについて散布図を描画して、右三角マーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='>', c=rgb)
タイムスタンプデータを浮動小数点数にする	aDatetime.timestamp()
散布図の印の線幅を変更する	plt.scatter(データ列x, データ列y, markeredgewidth=2.5)
ヒストグラムの色をディムグレーにする	plt.hist(データ列, color='dimgrey')
代数計算を使う	import sympy
ミディアムパープル色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumpurple')
文字列中からパターンに複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
ダークスレートブルー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフの色をイエローグリーンにする	plt.plot(データ列x, データ列y, color='yellowgreen')
グリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='green')
文字列中の全角数字を半角数字に変換する	s.translate(str.maketrans('０１２３４５６７８９', '0123456789'))
リストと列をペアのリストに変換する	itertools.zip_longest(iterable, iterable2)
２つのイテラブルをボックスチャートにする	plt.boxplot([データ列, データ列])
浮動小数点数のn乗を算出する	x ** n
option: グレーにグラフの色を設定する	color = 'grey'
列をビン数nとしてビン分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
横棒グラフの色をコーンフラワーブルーにする	plt.barh(データ列x, データ列y, color='cornflowerblue')
横棒グラフをシエナ色で描画する	plt.barh(データ列x, データ列y, color='sienna')
オブジェクトが名前付きタプル型	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
折れ線グラフにダイアモンドマーカーを使う	plt.plot(データ列x, データ列y, marker='D')
二つの集合の∪	aSet.union(aSet2)
線グラフの色をゴールデンロッドに設定する	plt.plot(データ列x, データ列y, color='goldenrod')
スクリプトの名前	sys.argv[0]
x軸に軸名を付ける	plt.xlabel('x軸ラベル')
ユニークな値を要素とする行列を使う	np.unique(aArray)
データフレームの複数のカラムを並べて箱ひげ図で可視化する	plt.boxplot([df['カラム'], df['カラム']])
ふたつの集合の積集合を求める	aSet.intersection(aSet2)
文字列全体が正規表現にケースを無視してマッチするか確認する	re.fullmatch(pattern, s, flags=re.IGNORECASE)
棒グラフをトマト色を用いて描画する	plt.bar(データ列x, データ列y, color='tomato')
青い点線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
四角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='s')
両端キューの末尾にイテラブルの各データを追加する	deq.extend(iterable)
option: ミディアムスプリンググリーン色を使う	color = 'mediumspringgreen'
ダークバイオレット色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkviolet')
option: ライトコーラルにグラフの色をセットする	color = 'lightcoral'
棒グラフの色をアクアマリンにする	plt.bar(データ列x, データ列y, color='aquamarine')
コーンフラワーブルーにヒストグラムの色を設定する	plt.hist(データ列, color='cornflowerblue')
'A'列を用いてデータフレームをソートし、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
ライトスチールブルー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
ライトゴールドロディイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
縦棒グラフを描画して、棒の横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
平均線付き箱ヒゲ図を描画する	plt.boxplot(データ列, meanline=True)
線グラフをコーラル色として描画する	plt.plot(データ列x, データ列y, color='coral')
標準出力をフラッシュする	sys.stdout.flush()
文字列は片仮名か確認する	('ァ' <= ch <= 'ン')
オブジェクトの属性を値に設定する	setattr(obj, プロパティ名, 値)
ライトスカイブルー色としてヒストグラムを描画する	plt.hist(データ列, color='lightskyblue')
折れ線グラフの色をパールバイオレットレッドに変更する	plt.plot(データ列x, データ列y, color='palevioletred')
ふたつの集合が互いに素かどうか判定する	aSet.isdisjoint(aSet2)
辞書をコピーする	dict(aDict)
ダークスラテグレーにヒストグラムの色を設定する	plt.hist(データ列, color='darkslategray')
オリーブ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='olive')
データフレームのカラムが何時か見る	df[col].dt.hour
左に双方向キューの順序をn個分回転させる	deq.rotate(-n)
ネイピア数を使う	math.e
データ列が何秒か見る	ds.dt.second
線形モデルの切片	model.intercept_
データフレームを昇順に破壊的に二つの列によってソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
横棒グラフをインディアンレッド色を用いて描画する	plt.barh(データ列x, データ列y, color='indianred')
文字列が文字列リストのいづれか調べる	s in aStringList
データ列とリストの散布図に赤い▼マーカーを描く	plt.plot(データ列x, データ列y, marker='v', c='r')
浮動小数点数が非数か調べる	math.isnan(x)
ダークターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkturquoise')
リストと配列についての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフに黒い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
タプルの要素を関数に適用した結果でソートする	sorted(aTuple, key=func)
グラフの横軸にラベルを付ける	plt.xlabel('x軸ラベル')
２つのデータフレームを列をキーとして左結合する	pd.merge(df, df2, on=column, how='left')
option: グラフの色をデピンクに変更する	color = 'deeppink'
カラムの中にいくつ欠損値が含まれるか数える	ds.isna().sum()
リストの文字列の位置をエラーなく使う	aList.index(element) if element in aList else -1
浮動小数点数を千の位で四捨五入する	round(x, -3)
２つの文字列をプリントする	print(value, value2)
データフレームから型のカラムを取り出す	df.select_dtypes(ty)
グラフ描画でカーネル密度推定を使う	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
青い△マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
日付時刻データが水曜日か調べる	aDatetime.weekday() == 2
横棒グラフをシャルトリューズ色で描画する	plt.barh(データ列x, データ列y, color='chartreuse')
実数のハイパボリック・タンジェントの逆数	math.atanh(x)
黄色色としてヒストグラムを描画する	plt.hist(データ列, color='yellow')
双方向キューの右の要素	deq[-1]
タプルをリストにする	list(aTuple)
折れ線グラフにバツマーカーを加える	plt.plot(データ列x, データ列y, marker='x')
実行環境はリナックスか調べる	sys.platform.startswith('linux')
ヒストグラムの色をインディアンレッドに変更する	plt.hist(データ列, color='indianred')
イテラブルと列を連結する	itertools.chain(iterable, iterable2)
データ列のエポック秒から日付データにする	pd.to_datetime(ds, unit='s', utc=True)
option: フォントの色をブランチドアーモンドに設定する	color = 'blanchedalmond'
散布図を青緑色として描画する	plt.scatter(データ列x, データ列y, color='teal')
データフレームを列によって集約して最大値を求める	df.groupby(column).max()
列を1000の位で丸める	ds.round(-3)
折れ線グラフをプラム色を使って描画する	plt.plot(データ列x, データ列y, color='plum')
散布図をオレンジ色として描画する	plt.scatter(データ列x, データ列y, color='orange')
xの小数点以下'3'桁までの文字列に変換する	':.3f'.format(x)
整数nを8進表現に変換する	oct(n)
カラムの欠損値を中央値で置換する	ds.fillna(ds.median())
左三角印を用いる散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
折れ線グラフをアイボリー色で描画する	plt.plot(データ列x, データ列y, color='ivory')
マップのキーの一覧を得る	aDict.keys()
折れ線グラフの色をダークオレンジに設定する	plt.plot(データ列x, データ列y, color='darkorange')
データフレームの最初n行を抽出する	df.head(n)
黒い三角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='^', c='k')
グラフをポスター用に設定する	sns.set(context='poster')
nプラスn2	n + n2
折れ線グラフをライトスカイブルー色を使って描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
option: ブラック色を使う	color = 'black'
乱数シードをnで固定化する	random.seed(n)
日付時刻データからn分減算する	aDatetime - datetime.timedelta(minutes=n)
アンティークホワイト色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='antiquewhite')
データ列を2つ並べて度数分布図にする	plt.hist([データ列, データ列], color=['b', 'r'])
ゼロ埋めされた整数型の配列	np.zeros(要素数, dtype=np.int)
折れ線グラフの丸マーカーの太さを変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
データフレームを'A'列の値によってグループ化し要約統計量を計算する	df.groupby('A').describe()
横棒グラフを描画して、ラベルを下寄せする	plt.barh(ラベル列, データ列, align='edge')
rgbの丸マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
数式のインテグラルを求める	sympy.integrate(e)
グラフ中の(x,y)の場所に凡例を表示する	plt.legend(loc=(x, y))
文字列が部分文字列で終わる	s.endswith(sub)
数列とリストについての散布図に黒いバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c='k')
集合からエラーなく要素を取り除く	aSet.discard(element)
ひとつ飛ばしで組を取り出す	aTuple[::2]
線グラフの色をゴールデンロッドにする	plt.plot(データ列x, データ列y, color='goldenrod')
rgbの四角マーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
グラフを論文に設定する	sns.set(context='paper')
横棒グラフをダークターコイズ色で描画する	plt.barh(データ列x, データ列y, color='darkturquoise')
赤いポイントマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='.', c='r')
イテラブルとデータ列について散布図を描画し、、マーカーを大バツに変更する	plt.plot(データ列x, データ列y, marker='X')
折れ線プロットに簡単な説明を付ける	plt.plot(データ列x, データ列y, label='ラベル')
ミディアムスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ダークマゼンタ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkmagenta')
ラベンダー色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
青い破線を用いてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
綺麗なグラフを使う	import seaborn as sns
横棒グラフをグレー色として描画する	plt.barh(データ列x, データ列y, color='gray')
折れ線グラフをミディアムオーキッド色として描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
棒グラフをピンク色で描画する	plt.bar(データ列x, データ列y, color='pink')
列をリストを境界値としてビン分割する	pd.cut(ds, aList)
グラフの描画でパステル調にカラーパレットを用いる	sns.set(pallete='pastel')
暗い赤色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkred')
オブジェクトは整数型か	isinstance(obj, int)
直後の値で列の欠損値を埋める	ds.fillna(method='bfill')
マップのコピーを作る	aDict.copy()
本日の日付時刻	datetime.datetime.now()
option: フォントの色をシーグリーンに設定する	color = 'seagreen'
折れ線グラフの色をゴールドにする	plt.plot(データ列x, データ列y, color='gold')
タイムスタンプデータと日付時刻データの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
イテラブルとリストについての散布図にrgbのポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.', c=rgb)
グレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
ライトグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
文字列を最後から部分文字列で分割する	s.rsplit(sub)
option: ライトコーラルを用いる	color = 'lightcoral'
教師データでモデルを学習する	model.fit(説明変数, 目的変数)
線グラフをダークオーキッド色として描画する	plt.plot(データ列x, データ列y, color='darkorchid')
Pandasで、文字列を日付データにする	pd.to_datetime(s)
空のヒストグラムベースの勾配ブースティング回帰木を作る	model = sklearn.ensemble.HistGradientBoostingRegressor()
日付データが日付データと同時か調べる	aDate == aDate2
ヒストグラムをカデットブルー色で描画する	plt.hist(データ列, color='cadetblue')
最大長を指定して両端キュー	collections.deque(maxlen=n)
本日が土曜日	datetime.datetime.today().weekday() == 5
チョコレート色の散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
配列をリストを境界値としてビン分割する	pd.cut(aArray, aList)
ファイルからディレクトリ名を求める	os.path.dirname(filepath)
辞書の内部も複製する	{k: copy.copy(v) for k, v in aDict.items()}
データフレームから列を3つ選択する	df[[column, column2, column3]]
文字列を下線付きで表示する	print(f'\033[4m{value}\033[0m')
折れ線グラフの色をライトコーラルに指定する	plt.plot(データ列x, データ列y, color='lightcoral')
文字列を改行で分割する	s.splitlines()
option: マルーンにグラフの色を設定する	color = 'maroon'
確率的勾配降下で回帰分析を行う	model = sklearn.linear_model.SGDRegressor()
折れ線グラフの色をダークシアンに指定する	plt.plot(データ列x, データ列y, color='darkcyan')
辞書の項目名とその値を列挙する	aDict.items()
列によって破壊的にデータフレームを降順にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームを列によって昇順にソートする	df.sort_values(by=column, ascending=True)
リストの最後にオブジェクトを追加する	aList.append(element)
リストと配列の散布図を描画して、マーカーをバツに設定する	plt.plot(データ列x, データ列y, marker='x')
option: グラフの色をミディアムバイオレットレッドに指定する	color = 'mediumvioletred'
グリーン色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='green')
リストとリストについての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
散布図をパパイヤウィップ色を使って描画する	plt.scatter(データ列x, データ列y, color='papayawhip')
混同行列を求める	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
散布図の下三角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
ミッドナイトブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
横棒グラフをミントクリーム色で描画する	plt.barh(データ列x, データ列y, color='mintcream')
横棒グラフの色をリネンにする	plt.barh(データ列x, データ列y, color='linen')
棒グラフの色をセットする	plt.bar(ラベル列, データ列, color=rgb)
淡いピンク色色を使って散布図を描画する	plt.scatter(データ列x, データ列y, color='lightpink')
option: 追加用に変更する	mode = 'a'
散布図の色をミディアムアクアマリンにする	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
アルファベットの大文字を全部使う	string.ascii_uppercase
ミディアムアクアマリン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumaquamarine')
文字列の開始位置からと終了位置までの間に部分文字列が含まれないかどうか	s.find(sub, start, end) == -1
option: ブルーバイオレットを用いる	color = 'blueviolet'
リストを太字化する	f'\033[1m{value}\033[0m'
リストの文字列が最初に見つかるインデックスを探す	aList.index(element)
リストの折れ線グラフを描き、、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
カラムを10の位で四捨五入する	ds.round(-1)
黒い三角印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
折れ線グラフに青いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='b')
ヒストグラムをミディアムブルー色で描画する	plt.hist(データ列, color='mediumblue')
option: 色をバリーウッドに変更する	color = 'burlywood'
JSONフォーマットのファイル入力を読み込んで、dataとする	data = json.load(fin)
要素は辞書の値に含まれていないかどうか調べる	element not in aDict.values()
オブジェクトは集合クラスのインスタンスか	isinstance(obj, set)
散布図に黒い四角印を描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
横棒グラフの色をダークオレンジにする	plt.barh(データ列x, データ列y, color='darkorange')
ピンク色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='pink')
横棒グラフをベージュ色で描画する	plt.barh(データ列x, データ列y, color='beige')
横棒グラフの色をシルバーにする	plt.barh(データ列x, データ列y, color='silver')
ダークサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
ランダムフォレストで回帰分析を行う	model = sklearn.ensemble.RandomForestRegressor()
option: △マーカーを描画する	marker = '^'
折れ線グラフの三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
ヒストグラムをマゼンタ色で描画する	plt.hist(データ列, color='magenta')
線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
Pandasで、データフレームのcollのエポック秒からPandasの日付型に変換する	pd.to_datetime(df[col], unit='s', utc=True)
option: グラフの色をリネンに設定する	color = 'linen'
両端キューの順を右にn個分ローテンションする	deq.rotate(n)
プロットの描画で淡くカラーパレットを使う	sns.set(pallete='muted')
option: グラフの色を青紫に指定する	color = 'violet'
データフレームのカラムの第二四分位数	df[col].median()
辞書をJSON形式のインデント幅nの文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
グラフにy=0の点線をつける	plt.axhline(y=0, linestyle='dotted')
ベクトルの累積和	np.cumsum(aArray)
option: マーカーの色をチョコレートにする	markerfacecolor = 'chocolate'
散布図を用いてデータフレームの全カラムを可視化する	sns.pairplot(df)
横棒グラフをパープル色で描画する	plt.barh(データ列x, データ列y, color='purple')
キーが辞書に存在するか調べる	key in aDict
データフレームの列名一覧を求める	df.columns
シャルトリューズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='chartreuse')
小麦色色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
イテラブルから最大長nの両端キューを作る	collections.deque(iterable, maxlen=n)
ディープスカイブルー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='deepskyblue')
グラフで使うフォントを指定する	sns.set(font=フォント名)
オブジェクトは集合クラスか調べる	isinstance(obj, set)
横棒グラフの色をゴールドにする	plt.barh(データ列x, データ列y, color='gold')
option: マーカーの色をベージュにする	markerfacecolor = 'beige'
折れ線グラフをライトシアン色で描画する	plt.plot(データ列x, データ列y, color='lightcyan')
データフレームのリストカラムのNaNをモードで埋める	df[aList].fillna(df[aList].mode().iloc[0])
ヒストグラムをミッドナイトブルー色で描画する	plt.hist(データ列, color='midnightblue')
ルート	math.sqrt(x)
ファイルをBOM付きとして書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
数式を変数について微分する	sympy.diff(e, z)
日付時刻データとタイムスタンプデータの時間差を秒で計算する	(aDatetime - aDatetime2).total_seconds()//60
データフレームのリストカラムの中に日付データと日付データがいくつあるか数える	df[aList].isin([value, value2]).sum()
赤い丸マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='o', c='r')
データフレームからカテゴリデータの列を抽出する	df.select_dtypes('object')
データフレームをグループ化し各列に対し合計を算出する	df.groupby(column)[column2].sum()
散布図のバツマーカーの色を変える	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='#800080')
数字を見る	string.digits
option: グラフの種類を破線に変更する	linestyle = 'dashed'
集合から全ての要素を取り除く	aSet.clear()
option: グラフの色をディムグレーに設定する	color = 'dimgrey'
option: バイアスを算出しない	fit_intercept = False
丸印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームのリストカラムを丸めて整数にする	df[aList].round().astype(int)
イテラブル自身の長さnの順列を求める	itertools.permutations(iterable, n)
横に並べてヒストグラムを描画する	plt.hist([データ列, データ列], color=['b', 'r'])
折れ線グラフを青色を用いて描画する	plt.plot(データ列x, データ列y, color='blue')
日付時刻データからn秒分、減算する	aDatetime - datetime.timedelta(seconds=n)
リストの重複を取り除く	sorted(set(aList), key=aList.index)
データフレームの重複した行のみを抽出する	df[df.duplicated(keep=False)]
ヒストグラムを小麦色色で描画する	plt.hist(データ列, color='wheat')
列をビン数nでビン分割する	pd.cut(ds, n)
ヒストグラムの色をライトグレーに変更する	plt.hist(データ列, color='lightgray')
散布図をインディアンレッド色で描画する	plt.scatter(データ列x, データ列y, color='indianred')
配列の分散	np.var(aArray)
リストとリストについて散布図を描画して、ダイアモンドマーカーの色をrgbにセットする	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: マーカーの色をグリーンにする	markerfacecolor = 'green'
整数nはタプルのいづれかか	n in aTuple
四角印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='s')
日付時刻データがタイムスタンプデータより遅いか調べる	aDatetime > aDatetime2
ヒストグラムの色をバリーウッドに設定する	plt.hist(データ列, color='burlywood')
データフレームを'A'列と'B'列の値でグループ化し基本統計量を求める	df.groupby(['A', 'B']).describe()
黒いバツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='x', c='k')
行列の演算を行う	import numpy as np
データフレームを列によってグループ化し、それぞれのグループごとの最小値を計算する	df.groupby(column).min()
棒グラフをアクア色で描画する	plt.bar(データ列x, データ列y, color='aqua')
データフレームをグループごとに散布図にする	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
nがリストのどれか	n in aList
モデルを訓練する	model.fit(説明変数, 目的変数)
カウンタをタプルで更新する	aCounter.update(aDict)
ふたつの集合は共通の要素を持たないかどうか	aSet.isdisjoint(aSet2)
文字列中にひとつでも非空白があるか調べる	any(not c.isspace() for c in s)
カウンタからゼロ回数を取り除く	+aCounter
ライトグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgray')
棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
事前に正規表現をコンパイルする	re.compile(pattern)
黒い右三角マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
文字列の中のケースを無視してパターンによる全てのマッチを使う	re.findall(pattern, s, flags=re.IGNORECASE)
データ列の分	ds.dt.minute
エンコーディングによって文字列をバイト列にする	s.encode(encoding=encoding)
ファイルパスを追加モードでオープンする]	open(filepath, mode='a')
データ列を円グラフにする	plt.pie(データ列, startangle=90)
要素をデックの末尾に付け加える	deq.append(element)
option: ライトスカイブルー色を使う	color = 'lightskyblue'
散布図に青いマーカーを描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
データフレームを2つのカラムを用いてによって破壊的に並べる	df.sort_values(by=['A', 'B'], inplace=True)
線グラフをトマト色として描画する	plt.plot(データ列x, データ列y, color='tomato')
ロバストな重回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
正規表現に文字列全体を複数行対応としてマッチさせる	re.fullmatch(pattern, s, flags=re.MULTILINE)
文字列中の部分文字列をカウントする	s.count(sub)
折れ線グラフの色をシルバーに指定する	plt.plot(データ列x, データ列y, color='silver')
option: 上三角マーカーを加える	marker = '^'
option: マーカーの色をライトスレイグレーにする	markerfacecolor = 'lightslategrey'
散布図にrgbのバツマーカーを使用する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
パレットトルコイズ色のヒストグラムを描画する	plt.hist(データ列, color='paleturquoise')
文字列TSVファイルからCSVファイルをn番目の列をインデックスとして読み込む	pd.read_csv(filename, index_col=n)
リストをシアンでプリントできる文字列に変換する	f'\033[36m{value}\033[0m'
データフレームの数値を一度に丸める	df.round()
ファイルパスからディレクトリ名を使う	os.path.dirname(filepath)
縦棒グラフをマルーン色で描画する	plt.bar(データ列x, データ列y, color='maroon')
横棒グラフをロイヤルブルー色として描画する	plt.barh(データ列x, データ列y, color='royalblue')
改行で文字列を区切る	s.splitlines()
nが偶数か調べる	n % 2 == 0
データフレームからn番目の列を除く	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
散布図にrgbの四角マーカーを使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのそれぞれのグループ毎の標準偏差を求める	df.groupby(column).std()
データフレームの中にと文字列がいくつあるか数える	df.isin([value, value2]).sum()
n2がn以上、かつn3以下	n <= n2 and n2 <= n3
データフレームのリストカラムの欠損値を平均値に設定する	df[aList].fillna(df[aList].mean())
日付時刻データをn週間前に戻す	aDatetime - datetime.timedelta(weeks=n)
タプルを反転する	reversed(aTuple)
集合をイミュータブルなセットにする	frozenset(aSet)
ヒストグラムの色をオールドレースに設定する	plt.hist(データ列, color='oldlace')
option: マーカーの色をフローラルホワイトにする	markerfacecolor = 'floralwhite'
データフレームのリスト列の中の欠損値の合計を数える	df[aList].isna().sum()
赤色で数値をプリントする	print(f'\033[31m{value}\033[0m')
縦棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
データフレームのカラムの平均値	df[col].mean()
ライトスカイブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightskyblue')
year年month月の日付	datetime.date(year=year, month=month, day=1)
キューのn番目の要素	deq[n]
二つの数値を改行で区切ってプリントする	print(value, value2, sep='\n')
カウンタを高頻出方からリストとして得る	aCounter.most_common()
散布図を右三角マーカーで描画する	plt.scatter(データ列x, データ列y, marker='>')
文字列を赤色で出力する	print(f'\033[31m{value}\033[0m')
option: グラフの色をペールグリーンに設定する	color = 'palegreen'
option: グラフの色をライトブルーにセットする	color = 'lightblue'
折れ線グラフの色をミディアムターコイズに指定する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: グラフの色を貝殻に変更する	color = 'seashell'
文字列を最後の部分文字列で分けたときの後半の文字列	s.rpartition(sub)[-1]
タプルの最後を使う	aTuple[-1]
option: マーカーの色をプラムにする	markerfacecolor = 'plum'
ヒストグラムの色をパープルに設定する	plt.hist(データ列, color='purple')
データフレームの中の列と列に重複があれば、削除する	df.drop_duplicates(subset=column)
部分文字列が文字列中にある	sub in s
KNNで回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
ファイルパスをバイナリ書き込み用にオープンする]	open(filepath, mode='wb')
year年month月を日付に変換する	datetime.date(year=year, month=month, day=1)
ヒストグラムをミディアムシアグリーン色で描画する	plt.hist(データ列, color='mediumseagreen')
option: ミディアムターコイズにフォントの色を設定する	color = 'mediumturquoise'
nとn2の論理積を求める	n & n2
コーパスのバージョン	version = 'wcce2022-0.1'
横棒グラフをライトグレー色で描画する	plt.barh(データ列x, データ列y, color='lightgray')
ヒストグラムを黒くする	plt.hist(データ列, color='k')
predicateFuncが真となる列の要素を取り除く	itertools.dropwhile(predicateFunc, iterable)
データフレームの列を削除する	df.drop(column, axis=1)
３つのデータフレームを縦方向にくっつける	pd.concat([df, df2, df3], axis=0)
nの三乗	n ** 3
データフレームの重複していない行のみ	df[not df.duplicated(keep=False)]
青いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
ベクトルの内積	np.dot(aArray, aArray2)
線グラフを紺碧色として描画する	plt.plot(データ列x, データ列y, color='azure')
ヒストグラムの色をアイボリーに設定する	plt.hist(データ列, color='ivory')
チョコレート色で散布図を描画する	plt.scatter(データ列x, データ列y, color='chocolate')
ランダム性を強化したランダムフォレストでクラス分類を行う	model = sklearn.ensemble.ExtraTreeClassifier(n_estimators=10)
赤いダイアモンドマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='D', c='r')
データフレームを２つの列で昇順に整列する	df.sort_values(by=['A', 'B'], ascending=True)
色付きの点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
現在のエポック秒	int(time.time())
option: 濃い青色を使う	color = 'darkblue'
option: ヘッダを自動的な連番に設定する	header = None
折れ線グラフに赤い右三角印を描画する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='r')
折れ線グラフを小麦色色で描画する	plt.plot(データ列x, データ列y, color='wheat')
EUCでファイルをオープンする]	open(filepath, encoding='euc_jp')
ダイアモンドマーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='D')
実数の逆正接	math.atan(x)
データフレームの中央値を計算する	df.median()
Pandasでフォーマットとしてデータ列を日付データに変換する	pd.to_datetime(ds, format='%Y-%m-%d')
実数を整数にする	int(x)
タプルの末尾を取り除く	aTuple[:-1]
両端キューの最初を求める	deq[0]
データ列の中に日付データが含まれるかどうか調べる	ds.isin([value])
ヒストグラムをブルーバイオレット色として描画する	plt.hist(データ列, color='blueviolet')
option: カーキ色を用いる	color = 'khaki'
オーキッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orchid')
オブジェクトのプロパティの値を値に設定する	setattr(obj, プロパティ名, 値)
ビン数nでデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
カウンタのキーとカウントをリストとして得る	aCounter.items()
option: ブラックを用いる	color = 'black'
option: ダークオレンジ色を用いる	color = 'darkorange'
カラムの文字列を欠損値に変換する	ds.replace(s, np.nan)
横棒グラフをシアン色として描画する	plt.barh(データ列x, データ列y, color='cyan')
組とタプルを結合する	aTuple + aTuple2
option: リネンを使う	color = 'linen'
行列の列ごとの最大値	np.max(aArray, axis=0)
折れ線グラフをロージーブラウン色で描画する	plt.plot(データ列x, データ列y, color='rosybrown')
分子割る分母	fractions.Fraction(分子, 分母)
散布図の四角印の大きさを変更する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
プロットをポスター用に設定する	sns.set(context='poster')
浮動小数点数の小数点を丸める	round(x)
線グラフをマルーン色で描画する	plt.plot(データ列x, データ列y, color='maroon')
折れ線グラフの▼マーカーを赤くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データ列の散布図を描く	plt.scatter(データ列x, データ列y)
散布図に右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
組の先頭を捨てる	aTuple[1:]
分類モデルの訓練を開始する	model.fit(説明変数, 目的変数)
列'A'と列'B'をキーとして二つのデータフレームを左結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='left')
文字列の示すエンコーディングとして追加できるように既存のファイルをオープンする]	open(filepath, mode='a', encoding=s)
ヒストグラムの色をライトゴールドロディイエローに指定する	plt.hist(データ列, color='lightgoldenrodyellow')
日付時刻データが日付時刻データより早いか調べる	aDatetime < aDatetime2
折れ線グラフの色をペールグリーンに設定する	plt.plot(データ列x, データ列y, color='palegreen')
ミディアムシアグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
ベクトルの演算をする	import numpy as np
ライトイエロー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightyellow')
表示可能な最大行数を変更する	pd.set_option('display.max_rows', n)
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: グラフの色をハニーデューに指定する	color = 'honeydew'
折れ線グラフを半透明の実線で描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
option: シーグリーンを使う	color = 'seagreen'
実数のタンジェント	math.tan(x)
イテラブルを文字列リストに変換して、タブを用いて連結する	'\t'.join(map(str, iterable))
最大長nの両端キューを列から生成する	collections.deque(iterable, maxlen=n)
モデルの当てはめを実行する	model.fit(説明変数, 目的変数)
文字列を新しい文字列で置き換える	s.replace(sub, newsub)
ダークグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='darkgreen')
データフレームのリストカラムの欠損値を第二四分位数で置換する	df[aList].fillna(df[aList].median())
数式を因数分解する	sympy.factor(e)
日付時刻データにn秒分、加える	aDatetime + datetime.timedelta(seconds=n)
行列の行ごとの最小値	np.min(aArray, axis=1)
数式の微分を計算する	sympy.diff(e)
双方向キュー中の要素のインデックス	deq.index(element)
二つの最大値	max(x, y)
option: オーキッドを用いる	color = 'orchid'
データフレームの列のユニークな値の個数	df[col].nunique()
文字列が全てASCII文字か調べる	s.isascii()
データ列の母標準偏差	ds.std(ddof=0)
棒グラフをペルー色を用いて描画する	plt.bar(データ列x, データ列y, color='peru')
数値を変数についてn階微分する	sympy.diff(e, z, n)
横棒グラフをアクアマリン色を使って描画する	plt.barh(データ列x, データ列y, color='aquamarine')
棒グラフの色をパールゴールデンロッドにする	plt.bar(データ列x, データ列y, color='palegoldenrod')
イテラブルとリストについての散布図にポイントマーカーを描く	plt.plot(データ列x, データ列y, marker='.')
プラム色のヒストグラムを描画する	plt.hist(データ列, color='plum')
散布図の三角マーカーを黒色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
nから無限にカウントダウンする	itertools.count(start=n, step=-1)
文字列をUTF8でバイト列にする	s.encode(encoding='utf-8', errors='strict')
縦棒グラフを青色で描画する	plt.bar(データ列x, データ列y, color='blue')
折れ線グラフの色をダークスラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategray')
データフレームのstart行目からend行目まで抽出する	df[start:end]
ライトブルー色のヒストグラムを描画する	plt.hist(データ列, color='lightblue')
散布図の色をクリムゾンにする	plt.scatter(データ列x, データ列y, color='crimson')
散布図に黒い▽印を描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='k')
棒グラフの色をライムにする	plt.bar(データ列x, データ列y, color='lime')
ライトコーラル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightcoral')
ふたつの集合のインターセクションだけに更新する	aSet.intersection_update(aSet2)
ロージーブラウン色のヒストグラムを描画する	plt.hist(データ列, color='rosybrown')
option: 改行を区切りで使う	sep = '\n'
文字列中にひとつでも非英数字が含まれるか調べる	any(not c.isalnum() for c in s)
nがn2未満、またはn3以上か調べる	n < n2 or n >= n3
本日をISO書式の文字列に変換する	datetime.datetime.today().isoformat()
散布図の色をピーチパフにする	plt.scatter(データ列x, データ列y, color='peachpuff')
データフレームの列の値がx、かつ列がx2である行を抽出する	df[(df[column] == x) & (df[column2] == x2)]
データフレームのカラムの空文字を欠損値に変換しドロップする	df[col].replace('', np.nan).dropna()
ファイルを書き込みモードでオープンする]	open(filepath, mode='w')
文字列を走査し、パターンに大文字・小文字を無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
CSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep=',')
散布図に赤い星マーカーを使用する	plt.plot(データ列x, データ列y, marker='*', c='r')
タイムスタンプデータの月を使う	aDatetime.month
データフレームをグループ化し、それぞれの列に対し合計を算出する	df.groupby(column)[column2].sum()
リストをアンダーライン付き化する	f'\033[4m{value}\033[0m'
ホットピンク色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='hotpink')
option: グラフの色をダークシアグリーンに設定する	color = 'darkseagreen'
データフレームを列によってソートして、新しい行を振り直す	df.sort_values(columns).reset_index()
縦軸の目盛に文字列をつける	plt.yticks([0, 60, 90], ['不可', '可', '秀'])
option: マーカーの色をダークマゼンタにする	markerfacecolor = 'darkmagenta'
アクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='aquamarine')
データフレームの列の一覧	df.info()
オブジェクトはリストクラスか調べる	isinstance(obj, list)
横棒グラフをネイビー色で描画する	plt.barh(データ列x, データ列y, color='navy')
rgbのバツマーカーをリストとデータ列についての散布図に描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
2つの文字列を改行なしにプリントする	print(value, value2, end='')
xを整数に変換する	int(x)
棒グラフの色をクリムゾンにする	plt.bar(データ列x, データ列y, color='crimson')
リストとリストについての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
折れ線グラフの左三角マーカーを黒色にする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
回帰モデルから目的変数を予測する	y_pred = model.predict(説明変数)
n個の文字列があるリスト	[element] * n
棒グラフの色をビスクにする	plt.bar(データ列x, データ列y, color='bisque')
文字列を空白で区切り、、文字列リストに変換する	s.split()
リストとリストについて散布図を描画して、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
データフレームのリストカラムを千の位で丸めて、整数型にする	df[aList].round(-3).astype(int)
データフレームのリスト列の中に文字列と文字列がいくつあるか数える	df[aList].isin([value, value2]).sum()
実数の正弦の逆数	math.asin(x)
小文字を大文字に変換する	s.upper()
リストの推移を点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
小数点数の小数部	math.modf(x)[0]
option: 三二ビット整数型を使う	dtype = np.int16
折れ線グラフの色をレベッカパープルにする	plt.plot(データ列x, データ列y, color='rebeccapurple')
横棒グラフの色をプラムにする	plt.barh(データ列x, データ列y, color='plum')
ミディアムバイオレットレッドにヒストグラムの色を設定する	plt.hist(データ列, color='mediumvioletred')
ディムグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgray')
データフレームのNaNを中央値に設定する	df.fillna(df.median())
文字列が漢字か調べる	('\u4E00' <= ch <= '\u9FD0')
option: アクアマリン色を使用する	color = 'aquamarine'
ヒストグラムをライトスレイグレー色を用いて描画する	plt.hist(データ列, color='lightslategrey')
option: ライトスカイブルーに色を指定する	color = 'lightskyblue'
データフレームを列毎にグループ分けして各グループの合計を求める	df.groupby(column).sum()
データフレームのリストカラムの値を正規表現patternでまとめてreplに置き換える	df[aList].replace(pattern, repl, regex=True)
折れ線グラフの丸印の線幅を変更する	plt.plot(データ列x, データ列y, marker='o', markeredgewidth=2.5)
ヒストグラムの描画して、正規化する	plt.hist(データ列, density=True)
option: ダークシアンを使う	color = 'darkcyan'
列の各データ値の出現回数を求める	df[col].value_counts()
散布図に下三角マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
文字列をアンダーライン付きにする	f'\033[4m{value}\033[0m'
クラスのサブ型	issubclass(サブクラス, クラス)
グラフで使用するフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
線グラフの色をスレートブルーに設定する	plt.plot(データ列x, データ列y, color='slateblue')
2つの文字列がケースを無視して同じか	s.casefold() == s2.casefold()
ブランチドアーモンドにヒストグラムの色を設定する	plt.hist(データ列, color='blanchedalmond')
ファイルを文字コードtextでオープンする]	open(filepath, encoding=text)
折れ線グラフの左三角マーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='<', markersize=2.0)
有理数の分母	q.denominator
ヒストグラムの色をライトシアンに設定する	plt.hist(データ列, color='lightcyan')
パラメータについて数式の微分を行う	sympy.diff(e, z)
rgbの▽マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='v', c=rgb)
横棒グラフをオリベドラブ色を用いて描画する	plt.barh(データ列x, データ列y, color='olivedrab')
散布図の色をコーンフラワーブルーにする	plt.scatter(データ列x, データ列y, color='cornflowerblue')
option: アイボリー色を用いる	color = 'ivory'
タプル内の要素が全て真かどうか調べる	all(aTuple)
データフレームのリスト列の未入力値を平均値に設定する	df[aList].fillna(df[aList].mean())
ファイルからバイナリストリームを開き]fとする	f = open(filepath, mode='rb')
option: バイナリ書き込みモードに設定する	mode = 'wb'
option: スレートブルー色を使う	color = 'slateblue'
数式の平方根を計算する	sympy.sqrt(e)
リストの合計値	sum(aList)
棒グラフの色をスラグレーにする	plt.bar(データ列x, データ列y, color='slategray')
スピアマン順位相関係数を用いてデータフレームの相関行列	df.corr(method='spearman')
線グラフの色をシエナに設定する	plt.plot(データ列x, データ列y, color='sienna')
双方向キューの先頭に要素をつけ加える	deq.appendleft(element)
文字列の中で大文字・小文字を無視して正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
配列と配列の散布図に黒い四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
option: マルーン色を使う	color = 'maroon'
ニューラルネットでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
散布図の星マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
実数の逆双曲線正接	math.atanh(x)
文字列の終了位置より前に部分文字列がある	s.find(sub, 0, end) != -1
整数nを二進文字列にする	bin(n)[2:]
折れ線グラフの下三角マーカーの色を変える	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='#800080')
データフレームのインデックスがnの行を選択する	df.loc[n]
列の値にデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
イテラブルとリストをペアのリストにする	itertools.zip_longest(iterable, iterable2)
棒グラフをシルバー色を用いて描画する	plt.bar(データ列x, データ列y, color='silver')
散布図を黒い▼マーカーで描く	plt.plot(データ列x, データ列y, marker='v', c='k')
リストからベクトルを作る	np.array(aList)
表示可能な最大行数を減らす	pd.set_option('display.max_rows', n)
ドジャーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
線グラフの色を青に変更する	plt.plot(データ列x, データ列y, color='blue')
option: マーカーの色をミスティローズにする	markerfacecolor = 'mistyrose'
オブジェクトがプロパティを持つか調べる	hasattr(obj, プロパティ名)
変数を改行なしにプリントする	print(value, end='')
コマンドラインフラグの状態	sys.flags
折れ線グラフをライトサーモン色として描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
カウンタの最も頻出の項目を求める	aCounter.most_common()[0]
データ列を使う	import pandas as pd
青い点線としてリストの変遷を描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
組の要素を昇順にソートする	sorted(aTuple, reverse=True)
円グラフにラベルを付ける	plt.pie(データ列, startangle=90, labels=ラベル列)
標準入力を得る	sys.stdin
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
散布図をミッドナイトブルー色で描画する	plt.scatter(データ列x, データ列y, color='midnightblue')
アンサンブル学習としてクラス分類を行う	sklearn.ensemble.VotingClassifier()
ライトグリーンにヒストグラムの色を設定する	plt.hist(データ列, color='lightseagreen')
小数点数の逆双曲線余弦を計算する	math.acosh(x)
紺碧色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
▼印を使い、折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='v')
nからn2までの整数列	list(range(n, n2+1))
モデルの残差を算出する	目的変数 - model.predict(説明変数)
散布図をミディアムパープル色を用いて描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
折れ線グラフの色をシーグリーンに指定する	plt.plot(データ列x, データ列y, color='seagreen')
線グラフの色をやわらかい青に設定する	plt.plot(データ列x, データ列y, color='cornflowerblue')
パレットトルコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='paleturquoise')
option: ダークカーキにグラフの色を設定する	color = 'darkkhaki'
コマンドライン引数	sys.argv
データフレームを複数の列によって昇順に破壊的にソートする	df.sort_values(by=column, ascending=True, inplace=True)
コマンド引数を列挙する	sys.argv[1:]
実部と虚部から複素数	complex(x, y)
ファイルパスを読み込みできるようにオープンする]	open(filepath, mode='r')
ヒストグラムをサンディーブラウン色を用いて描画する	plt.hist(データ列, color='sandybrown')
日付時刻データが何曜日か知る	aDatetime.weekday()
既存の配列を元に全要素が0の配列を作る	np.zeros_like(aArray)
横棒グラフをフローラルホワイト色として描画する	plt.barh(データ列x, データ列y, color='floralwhite')
データフレームを各列毎にグループ化して、文字列というグループの個数を求める	df.groupby(column).size()[s]
散布図をダークシアン色を使って描画する	plt.scatter(データ列x, データ列y, color='darkcyan')
三変数の最大値	max(x, y, z)
option: 線を細くする	linewidth = 3.0
黒い四角印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='k')
散布図の色を白にする	plt.scatter(データ列x, データ列y, color='white')
空の勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
nから無限にカウントアップする	itertools.count(start=n)
横棒グラフをパールゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
折れ線グラフのマーカーを四角印にする	plt.plot(データ列x, データ列y, marker='s')
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategray')
文字列をセパレータで分割して、文字列リストに変換する	s.split(sep)
ヒストグラムの色をトマトに指定する	plt.hist(データ列, color='tomato')
コーンズシルク色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornsilk')
辞書の項目名に対応した値を得る	aDict.get(key)
新しいヒストグラムベースの勾配ブースティング回帰木を用意する	model = sklearn.ensemble.HistGradientBoostingRegressor()
リスト内の要素が少なくともひとつ真か調べる	any(aList)
主成分分析として多次元データを淡く次元に次元削減する	sklearn.decomposition.PCA(n_components=三).fit_transform(多次元データ)
折れ線グラフの色をダークターコイズに設定する	plt.plot(データ列x, データ列y, color='darkturquoise')
グラフの色を濃くする	sns.set(pallete='deep')
折れ線グラフを実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid')
option: デピンクにグラフの色を設定する	color = 'deeppink'
散布図に赤い星マーカーを使う	plt.plot(データ列x, データ列y, marker='*', c='r')
散布図の印を三角にする	plt.scatter(データ列x, データ列y, marker='^')
Pandasでデータフレームのcollをフォーマットfmtとして日付データに変換する	pd.to_datetime(df[col], format=fmt)
両端キューの要素を左にn個分ローテンションする	deq.rotate(-n)
データフレームのカラムはどれだけ分散しているか見る	df[col].var()
折れ線グラフの色をダーク・スラテグレーに設定する	plt.plot(データ列x, データ列y, color='darkslategrey')
option: 暗い赤色を使う	color = 'darkred'
辞書からカウンタを用意する	collections.Counter(aDict)
データ列がどの程度分散しているか見る	ds.var()
日付時刻データにn時間分、加算する	aDatetime + datetime.timedelta(hours=n)
option: クリムゾン色を使う	color = 'crimson'
selectorsでマスクした列の要素を取り出す	itertools.compress(iterable, selectors=iterable2)
データフレームのポイントプロットを描画する	sns.pointplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
辞書のコピーを作る	dict(aDict)
ネイビー色でヒストグラムを描画する	plt.hist(データ列, color='navy')
オリベドラブ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='olivedrab')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightgreen')
散布図にrgbの大バツマーカーを使う	plt.plot(データ列x, データ列y, marker='X', c=rgb)
黄色で数値をプリントする	print(f'\033[33m{value}\033[0m')
小数点数のk進対数を求める	math.log(x, k)
ミディアムターコイズ色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
ヒストグラムをダークシアン色で描画する	plt.hist(データ列, color='darkcyan')
文字列内にひとつでも大文字が含まれるかどうか調べる	any(c.isupper() for c in s)
データフレームの列と列の相関行列をヒートマップとして描画する	sns.heatmap(df[[column, column2]].corr())
縦棒グラフをオレンジレッド色で描画する	plt.bar(データ列x, データ列y, color='orangered')
行列の行ごとの最大を求める	np.max(aArray, axis=1)
Pandasでデータ列をPandasの日付型に変換し、データフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(ds))
要素が集合に含まれないか	element not in aSet
日付時刻データからn日を減らす	aDatetime - datetime.timedelta(days=n)
ファイルからnバイト読む	f.read(n)
文字列内にひとつでも数字があるか調べる	any(c.isdigit() for c in s)
実数の2乗	x ** 2
折れ線グラフの色をフォレストグリーンに指定する	plt.plot(データ列x, データ列y, color='forestgreen')
等量でデータフレームの中の列をn個にビン分割する	pd.qcut(df[col], n)
データフレームのリスト列の記述統計量	df[aList].describe()
ミディアムターコイズ色でヒストグラムを描画する	plt.hist(データ列, color='mediumturquoise')
ヒストグラムの色をカーキに指定する	plt.hist(データ列, color='khaki')
option: レベッカパープル色を使う	color = 'rebeccapurple'
辞書からキーの値	aDict.get(key)
折れ線グラフの左三角マーカーを黒くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='k')
散布図をダークスレートブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
文字列を黒色で表示できる文字列に変換する	f'\033[30m{value}\033[0m'
グリッドを破線にする	plt.grid(linestyle='dashed')
ヒストグラムの色をイエローグリーンに設定する	plt.hist(データ列, color='yellowgreen')
棒グラフの色をオレンジレッドにする	plt.bar(データ列x, データ列y, color='orangered')
棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
折れ線グラフに赤いポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='r')
ケンドール相関係数でデータフレームの相関行列	df.corr(method='kendall')
ユニークな値を要素とする配列を使う	np.unique(aArray)
エクセルファイルファイルからn番目のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgrey')
クラス分類の真陽性率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
タイムスタンプデータをエポック秒にする	aDatetime.timestamp()
option: 配列のデータ型を指定する	dtype = np.int32
データフレームの列が正規表現文字列にマッチする行を選択する	df[df[column].str.match(s)]
ファイルをBOM付きでオープンする]	open(filepath, encoding='utf_8_sig')
各列毎にデータフレームをグループ化して、列の合計を求める	df.groupby(column)[column2].sum()
ゼロ埋めされた符号なし８ビット整数型の配列を作成する	np.zeros(要素数, dtype=np.uint8)
option: エラーを無視するように設定する	errors = 'ignore'
リストとリストについて散布図を描画して、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
ダークグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
自然数最小公倍数を求める	math.lcm(n, n2)
要素がマッピングの値として含まれているかどうか	element in aDict.values()
nとn2のビット和	n | n2
タイムスタンプデータにn週間分、足す	aDatetime + datetime.timedelta(weeks=n)
データフレームを列によって降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
データフレームの中の欠損値が存在する行を消す	df.dropna()
ヒストグラムを深紅色で描画する	plt.hist(データ列, color='crimson')
等間隔でn個にリストを分割する	pd.cut(aList, n)
インデックスによってデータフレーム全体を並べ直す	df.sort_index()
option: グラフの色をコーンズシルクにする	color = 'cornsilk'
スクリプトファイルと同じディレクトリのファイルパスのパスを見る	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
線グラフをターコイズ色として描画する	plt.plot(データ列x, データ列y, color='turquoise')
nがn2未満、またはn3以上かどうか	n < n2 or n >= n3
行列間の各要素の最大公約数	np.gcd(aArray, aArray2)
横棒グラフの色をライトスチールブルーにする	plt.barh(データ列x, データ列y, color='lightsteelblue')
ゲインズボロ色のヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
黄色いヒストグラムを描画する	plt.hist(データ列, color='y')
データフレームを列の値によってグループ化する	df.groupby(column)
▲印を用いてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
疑似乱数を生成する	random.random()
両端キューをポップする	deq.pop()
文字列の無限列	itertools.repeat(element)
xが1、もしくは2もしくは3に等しい	x == 1 or x == 2 or x == 3
横棒グラフをオールドレース色で描画する	plt.barh(データ列x, データ列y, color='oldlace')
グレー色のヒストグラムを描画する	plt.hist(データ列, color='gray')
オレンジレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
リストを等量でビン数nでビン分割する	pd.qcut(aList, n)
データフレームの名前リストで指定された列を削除する	df.drop(columns, axis=1)
nがn2よりも小さいか調べる	n < n2
ファイルをディレクトリ名とファイル名に分割する	os.path.split(filepath)
マッピングのキーを列挙する	aDict.keys()
線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightgreen')
ひとつでも非数字が文字列中にある	any(not c.isdigit() for c in s)
ミディアムスプリンググリーン色のヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
散布図にrgbの右三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データフレームを関数の値によってグループ化し要約統計量を計算する	df.groupby(関数).describe()
散布図の色をサーモンにする	plt.scatter(データ列x, データ列y, color='salmon')
赤いマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='r')
黒い▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
option: マーカーを右三角に変更する	marker = '>'
ロイヤルブルー色のヒストグラムを描画する	plt.hist(データ列, color='royalblue')
データフレームのカラムを型に変換する	df[col] = df[col].astype(ty)
リスト内の要素が全て真か調べる	all(aList)
リストの各要素を関数に適用した結果で並べる	sorted(aList, key=func)
データ列の各データは何回出現するか見る	ds.value_counts()
散布図をビスク色として描画する	plt.scatter(データ列x, データ列y, color='bisque')
自然数最小公倍数	math.lcm(n, n2)
option: ライトイエローにグラフの色をする	color = 'lightyellow'
カラムをキーにして二つのデータフレームを外部ジョインする	pd.merge(df, df2, on=column, how='outer')
ブラック色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
ヒストグラムをアリスブルー色を用いて描画する	plt.hist(データ列, color='aliceblue')
黒い四角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='s', c='k')
ダークレッド色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkred')
折れ線グラフの色をスカイブルーに変更する	plt.plot(データ列x, データ列y, color='skyblue')
リストとリストについての散布図に黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', c='k')
黄緑色として線グラフを描画する	plt.plot(データ列x, データ列y, color='chartreuse')
行列の形状を求める	aArray.shape
文字列を複数行対応として正規表現で分割する	re.split(pattern, s, flags=re.MULTILINE)
散布図をダークマゼンタ色として描画する	plt.scatter(データ列x, データ列y, color='darkmagenta')
部分文字列が部分文字列で開始するか調べる	s.startswith(sub)
横棒グラフの色をアリスブルーにする	plt.barh(データ列x, データ列y, color='aliceblue')
折れ線グラフの色をディムグレーに変更する	plt.plot(データ列x, データ列y, color='dimgrey')
本日が日曜日	datetime.datetime.today().weekday() == 6
ミディアムスプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
事前に大文字・小文字を無視して正規表現をコンパイルする	re.compile(pattern, flag=re.IGNORECASE)
実数以上の最小の整数を計算する	math.ceil(x)
option: 色をチョコレートに変更する	color = 'chocolate'
カウンタの最も頻出な項目	aCounter.most_common()[0]
散布図をブルーバイオレット色で描画する	plt.scatter(データ列x, データ列y, color='blueviolet')
列のそれぞれを関数でフィルタする	filter(func, iterable)
データをスケール変換する	sklearn.preprocessing.StandardScaler().fit_transform(データ)
タイムスタンプデータにn分分、加算する	aDatetime + datetime.timedelta(minutes=n)
標準出力を使用する	sys.stdout
散布図の三角印を黒くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
△印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='^')
ヒストグラムをオリーブ色で描画する	plt.hist(データ列, color='olive')
表データを各列とカラムの組み合わせ毎にグループ化し、分散を求める	df.groupby([column, column2], as_index=False).var()
グラフの大きさを変更する	plt.figure(figsize=(横幅, 高さ))
option: マーカーの色をライトコーラルにする	markerfacecolor = 'lightcoral'
セットから別の集合との共通要素を全て除く	aSet.symmetric_difference_update(aSet2)
配列を縦方向に連結する	np.concatenate([aArray, aArray2], axis=0)
散布図のダイアモンド印の色を変更する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='#800080')
オブジェクトがリストに含まれるかどうか調べる	element in aList
option: オレンジレッドにグラフの色を指定する	color = 'orangered'
処理中の例外を情報	sys.exc_info()
部分文字列を文字列の接頭辞から取り除く	s.removeprefix(sub)
散布図に赤い下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: ダークオレンジにフォントの色を設定する	color = 'darkorange'
多次元データをMSDで濃く次元に削減する	sklearn.manifold.MSD(n_components=二).fit_transform(多次元データ)
リストの値を昇順にソートする	sorted(aList, reverse=False)
標準入力から1行読み取る	input()
'A'列によってデータフレームをグループ化し、要約統計量を求める	df.groupby('A').describe()
横棒グラフをマルーン色で描画する	plt.barh(データ列x, データ列y, color='maroon')
データフレームの各カテゴリごとの散布図に回帰直線を加える	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
パーセプトロンでクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
横棒グラフをダークゴールデンロッド色で描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
折れ線グラフの色をミディアムスプリンググリーンに変更する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
自然数個からk個取り出した時の並べ方の総数を求める	math.perm(n, k)
データを最大最小値で標準化する	sklearn.preprocessing.MinMaxScaler().fit_transform(データ)
データフレームの列が正規表現文字列にマッチするデータを抽出する	df[df[column].str.match(s)]
赤い下三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
データフレームのカラムの未入力値を最大値に増やす	df[col].fillna(df[col].max())
エクセルファイルファイルからエクセルファイルを読み込む	pd.read_excel(filename)
ヒストグラムをミディアムスレートブルー色で描画する	plt.hist(データ列, color='mediumslateblue')
折れ線グラフの色をシャルトリューズに設定する	plt.plot(データ列x, データ列y, color='chartreuse')
データフレームのカラムは何日か見る	df[col].dt.day
小さい順にデータフレームをインデックスによってソートする	df.sort_index(ascending=True)
カーキ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='khaki')
各列毎にデータフレームを集約して、列の分散を求める	df.groupby(column)[column2].var()
ヒストグラムの色をラベンダーブラッシュに指定する	plt.hist(データ列, color='lavenderblush')
折れ線グラフをインディゴ色を用いて描画する	plt.plot(データ列x, データ列y, color='indigo')
option: グラフの色をコーンフラワーブルーに設定する	color = 'cornflowerblue'
出力ストリーム全体を行単位で分割して読み込む	f.readlines()
空白によって文字列を区切って、数列にする	map(int, s.split())
グラフに格子線を加える	plt.grid(True)
リストを展開して表示する	print(*aList)
青い破線として線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
ヒストグラムをライトシアン色で描画する	plt.hist(データ列, color='lightcyan')
ファイルパスを開いて]、バイナリ書き込みストリームを使う	open(filepath, mode='wb')
紺色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='darkblue')
option: クリムゾンにグラフの色を設定する	color = 'crimson'
文字列を最後の部分文字列で分割したときの後半の文字列	s.rpartition(sub)[-1]
表データを'A'列と'B'列によってソートしてNaNを先頭にする	df.sort_values(by=['A', 'B'], na_position='first')
レモンシフォン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
説明変数と目的変数でモデルを学習する	model.fit(説明変数, 目的変数)
nにn2をかけた値をnとする	n *= n2
option: 三2ビット整数型を使う	dtype = np.int16
文字列モジュールをインポートする	import string
モカシン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='moccasin')
散布図に星マーカーを使う	plt.plot(データ列x, データ列y, marker='*')
ヒストグラムをホワイトスモーク色を使って描画する	plt.hist(データ列, color='whitesmoke')
折れ線グラフの色をオリーブにセットする	plt.plot(データ列x, データ列y, color='olive')
横棒グラフの色をグリーンにする	plt.barh(データ列x, データ列y, color='green')
列をキーとして二つのデータフレームを左ジョインする	pd.merge(df, df2, on=column, how='left')
カラムの値をValueMapでまとめて置き換える	ds.replace(ValueMap)
カウンタ同士で和集合	aCounter | aCounter2
データフレームのカラムの中にある文字列と日付データの合計を数える	df[col].isin([value, value2]).sum()
棒グラフの色を紺碧にする	plt.bar(データ列x, データ列y, color='azure')
文字列を最後の部分文字列で分けたときの最初の文字列	s.rpartition(sub)[0]
文字列をマゼンタ化する	f'\033[35m{value}\033[0m'
文字列が片仮名か	('ァ' <= ch <= 'ン')
データフレームの中にいくつ文字列が存在するか数える	df.isin([value]).sum()
Pandasで、日付データのデータフレームのカラムをインデックスにする	df.index = pd.DatetimeIndex(df[col])
双方向キューに値をエンキューする	deq.appendleft(element)
勾配ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.GradientBoostingRegressor()
データフレームのリストカラムの未入力値を最小値にする	df[aList].fillna(df[aList].min())
折れ線グラフの色をミディアムオーキッドに設定する	plt.plot(データ列x, データ列y, color='mediumorchid')
数列のヒストグラムを描画する	plt.hist(データ列)
シーケンスの各要素に対して、predicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='turquoise')
文字列中から正規表現に複数行対応としてマッチする文字列を探す	re.search(pattern, s, flags=re.MULTILINE)
線グラフをアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='aquamarine')
option: シアンを用いる	color = 'cyan'
散布図の三角印の色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
nxn2の二次元リスト	[[0] * n for _ in range(n2)]
二つの変数をスラッシュで区切って出力する	print(value, value2, sep='/')
データフレームの平均値を求める	df.mean()
配列の行ごとの分散	np.var(aArray, axis=1)
Pandasでデータフレームのcollをタイムスタンプ型に変換する	pd.to_datetime(df[col])
散布図の三角マーカーを赤色にする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
インディゴ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indigo')
折れ線グラフのバツマーカーの大きさを設定する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
文字列がPythonのキーワードか確認する	keyword.iskeyword(s)
ヒストグラムの色をダークマゼンタに設定する	plt.hist(データ列, color='darkmagenta')
実線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid')
棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
折れ線グラフをマゼンタ色で描画する	plt.plot(データ列x, データ列y, color='magenta')
青い実線で折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
折れ線グラフをライトグリーン色で描画する	plt.plot(データ列x, データ列y, color='lightseagreen')
散布図の色をゴーストホワイトにする	plt.scatter(データ列x, データ列y, color='ghostwhite')
TSVファイルからデータフレームを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
データ列は何分か見る	ds.dt.minute
実数が整数か調べる	x.is_integer()
option: n番目のカラムを行に設定する	index_col = n
棒グラフを白色を用いて描画する	plt.bar(データ列x, データ列y, color='white')
行列のユニークな要素とその位置を計算する	u, indices = np.unique(aArray, return_index=True)
タプルをリストに変換する	list(aTuple)
キューをイテラブルから作る	collections.deque(iterable)
タプルの要素数を見る	len(aTuple)
リストとリストについての散布図に赤い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='r')
option: ゴールデンロッド色を使う	color = 'goldenrod'
データフレームの欠損値を中央値に設定する	df.fillna(df.median())
非数	math.nan
データ列が何日か見る	ds.dt.day
横棒グラフをライトスチールブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='lightsteelblue')
現在の秒を使う	datetime.date.today().second
nかけるn2を求める	n * n2
環境の名前	sys.platform
option: インディゴ色を使用する	color = 'indigo'
実数を十六進表記の文字列にする	x.hex()
option: グラフの色をやわらかい青にセットする	color = 'cornflowerblue'
オブジェクトのプロパティを削除する	delattr(obj, プロパティ名)
データフレームのリストカラムの歪度	df[aList].kurt()
データフレームのリストカラムの歪度を計算する	df[aList].kurt()
棒グラフをチョコレート色で描画する	plt.bar(データ列x, データ列y, color='chocolate')
文字列をカンマで分割して文字列リストにする	s.split(',')
データフレームを'A'列によってによって降順にソートする	df.sort_values(by='A', ascending=False)
配列を2次元1行に変形する	aArray.reshape(1, -1)
option: 三角マーカーを使用する	marker = '^'
パールゴールデンロッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='palegoldenrod')
option: ポイントマーカーを用いる	marker = '.'
タイムスタンプデータの曜日を使う	aDatetime.weekday()
データフレームから列名を複数指定して選択する	df[columns]
nが一桁の数か調べる	0 <= n <= 9
数式を数値計算する	float(e)
二つのオブジェクトが同一参照	obj is obj2
数式の変数を数式で置き換える	e.subs(z, e2)
折れ線グラフの四角マーカーを赤くする	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
option: グラフの色をライトイエローに設定する	color = 'lightyellow'
データフレームを列の値によってグループ化し、要約統計量を求める	df.groupby(column).describe()
折れ線グラフの左三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='#800080')
大バツマーカーで散布図を描く	plt.plot(データ列x, データ列y, marker='X')
シーグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='seagreen')
棒グラフをライム色として描画する	plt.bar(データ列x, データ列y, color='lime')
JSONファイルのファイル入力を辞書に変換する	json.load(fin)
半透明の実線でイテラブルの変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
リネン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='linen')
縦棒グラフをダークシアグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkseagreen')
線を青い実線で描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
rgbの左三角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='<', c=rgb)
シャピロ・ウィルク検定を行う	scipy.stats.shapiro(データ列)
散布図をrgbの左三角マーカーで描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
横棒グラフを描画する	plt.barh(ラベル列, データ列)
ファイルをEUCで書き込み用にオープンする]	open(filepath, mode='w', encoding='euc_jp')
本日が土曜日かどうか調べる	datetime.datetime.today().weekday() == 5
リストとリストについての散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
実数が正の数か調べる	x > 0
折れ線グラフをライトブルー色で描画する	plt.plot(データ列x, データ列y, color='lightblue')
双方向キューの値を反転する	deq.reverse()
option: 三角印を描画する	marker = '^'
nからn2までのスライス	slice(n, n2)
等間隔でn個にリストをビン分割する	pd.cut(aList, n)
option: 印を左三角に変更する	marker = '<'
文字列が全て数字かどうか	s.isdigit()
リストにリストを追加して拡張する	aList.extend(aList2)
インディアンレッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='indianred')
ピアソン積率相関係数でデータフレームの列と列の相関行列	df[[column, column2]].corr(method='pearson')
両端キューが空であるか	len(deq) == 0
文字列を部分文字列で二分し、前半の文字列を使う	s.partition(sub)[0]
データフレームの列の名前の一覧を求める	df.columns
黒い三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
データフレームのカラムの要約統計量	df[col].describe()
配列とリストについての散布図に補足用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データ列の正規分布を判定する	scipy.stats.shapiro(データ列)
データ列の出現頻度を描画する	plt.hist(データ列)
year年day月の日付時刻をオブジェクト化する	datetime.datetime(year=year, month=month, day=1)
ヒストグラムの色をレベッカパープルに設定する	plt.hist(データ列, color='rebeccapurple')
グレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='grey')
データフレームの欠損値を最小値で埋める	df.fillna(df.min())
シーグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
option: ダイアモンドマーカーを用いる	marker = 'D'
タブで区切って二つの文字列を表示する	print(value, value2, sep='\t')
option: スノー色を使う	color = 'snow'
カウンタ間で∩演算する	aCounter & aCounter2
option: ペールグリーンを使う	color = 'palegreen'
ビン数nとしてデータフレームの中の列をビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
データフレームを列の値毎にグループ化して、各グループごとの合計を算出する	df.groupby(column).sum()
フローラルホワイトにヒストグラムの色を設定する	plt.hist(データ列, color='floralwhite')
第一引数で指定されたファイル名	sys.argv[1]
横棒グラフをモカシン色で描画する	plt.barh(データ列x, データ列y, color='moccasin')
option: ラベンダーブラッシュにグラフの色を指定する	color = 'lavenderblush'
複数行対応としてあらかじめ正規表現をコンパイルする	re.compile(pattern, flag=re.MULTILINE)
イテラブルにイテラブルを続ける	itertools.chain(iterable, iterable2)
線グラフをダークグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkgrey')
散布図をダークオリーブグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
浮動小数点数の複素数	complex(x)
データフレームの列で文字列が含まれる行を取り出す	df[df[column].str.contains(s)]
横棒グラフをダークグレー色で描画する	plt.barh(データ列x, データ列y, color='darkgrey')
データフレームのカラムは何年か見る	df[col].dt.year
year年の日付時刻	datetime.datetime(year=year, month=1, day=1)
ヒストグラムをオリベドラブ色で描画する	plt.hist(データ列, color='olivedrab')
列によってデータフレームをグループ化して、各グループごとの合計を計算する	df.groupby(column).sum()
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgray')
リストとリストについて散布図を描画し、、その大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
リストとリストについての散布図に文字列という凡例用のラベルをつける	plt.scatter(データ列x, データ列y, label=s)
リストが全て真か	all(aList)
作画の背景色を暗くする	sns.set(style='darkgrid')
小数点数の逆双曲線正弦	math.asinh(x)
ゼロ埋めされた配列	np.zeros(要素数)
リストとリストについての散布図にrgbの大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
formatのパターンで文字列から日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
リストを境界値として配列をビン分割する	pd.cut(aArray, aList)
青緑色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='teal')
Pythonパスにディレクトリを追加する	sys.path.append(dir)
黒いヒストグラムを描画する	plt.hist(データ列, color='k')
ヒストグラムの色をミントクリームに設定する	plt.hist(データ列, color='mintcream')
nが3で割り切れるか調べる	n % 3 == 0
要素∈集合	element in aSet
レベッカパープル色でヒストグラムを描画する	plt.hist(データ列, color='rebeccapurple')
散布図の丸印を黒くする	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
グラフを論文用に設定する	sns.set(context='paper')
ブラック色で線グラフを描画する	plt.plot(データ列x, データ列y, color='black')
線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
両端キューの末尾に要素を追加する	deq.append(element)
データ列の空文字をドロップする	ds.replace('', np.nan).dropna()
数列の変遷を赤い一点鎖線でプロットする	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
列でデータフレームをソートし、NaNを先頭に来るようにする	df.sort_values(by=column, na_position='first')
平仮名をカタカナに変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
折れ線グラフをライトスレイグレー色で描画する	plt.plot(データ列x, データ列y, color='lightslategray')
ヒストグラムをオレンジ色で描画する	plt.hist(データ列, color='orange')
データフレームを列によってグループ化し、、各グループごとの平均値を求める	df.groupby(column).mean()
ヒストグラムをダークスレートブルー色で描画する	plt.hist(データ列, color='darkslateblue')
本日が土曜日か調べる	datetime.datetime.today().weekday() == 5
フクシア色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='fuchsia')
日付データが日曜日かどうか	aDate.weekday() == 6
横棒グラフをビスク色で描画する	plt.barh(データ列x, データ列y, color='bisque')
タプルのキーの一覧を得る	aDict.keys()
折れ線グラフの色をライトコーラルにする	plt.plot(データ列x, データ列y, color='lightcoral')
散布図に青いクロスマーカーを描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='b')
ナバホホワイト色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navajowhite')
折れ線グラフの色をクリムゾンにセットする	plt.plot(データ列x, データ列y, color='crimson')
データ列の欠損値を後の行の値に指定する	ds.fillna(method='bfill')
折れ線グラフをプラム色を用いて描画する	plt.plot(データ列x, データ列y, color='plum')
線グラフの色をゲインズボロにする	plt.plot(データ列x, データ列y, color='gainsboro')
nからn2までの整数列を得る	list(range(n, n2+1))
option: マーカーの色をミディアムスプリンググリーンにする	markerfacecolor = 'mediumspringgreen'
縦棒グラフをミディアムスプリンググリーン色で描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
option: ダークサーモンを用いる	color = 'darksalmon'
コーラルにヒストグラムの色を指定する	plt.hist(データ列, color='coral')
散布図の印の大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
スライドにグラフの用途を設定する	sns.set(context='talk')
データフレームのリスト列の文字列を欠損値に変換する	df[aList].replace(s, np.nan)
横棒グラフの色をマルーンにする	plt.barh(データ列x, データ列y, color='maroon')
nにn2を足して代入する	n += n2
線グラフの色をゴールドに指定する	plt.plot(データ列x, データ列y, color='gold')
ヒストグラムの色をトマトにセットする	plt.hist(データ列, color='tomato')
縦棒グラフをミディアムバイオレットレッド色で描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
線グラフをターコイズ色で描画する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームのそれぞれのグループごとの分散	df.groupby(column).var()
文字列をASCII限定としてパターンで分割する	re.split(pattern, s, flags=re.ASCI)
棒グラフをライトブルー色として描画する	plt.bar(データ列x, データ列y, color='lightblue')
値を緑色にする	f'\033[32m{value}\033[0m'
文字列リストを連結してひとつの文字列にする	''.join(map(str, iterable))
ヒストグラムの色をロージーブラウンに設定する	plt.hist(データ列, color='rosybrown')
降順でデータフレームを行によって整列する	df.sort_index(ascending=False)
双方向キューの末尾から要素を取り除く	deq.pop()
リストの要素を関数に適用した結果でソートする	sorted(aList, key=func)
ロージーブラウンにヒストグラムの色を変更する	plt.hist(データ列, color='rosybrown')
追加できるようにBOM付きで既存のファイルパスをオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
ライトスカイブルー色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
ライトイエロー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightyellow')
ファイルを読み込みモードでオープンする]	open(filepath, mode='r')
出力ストリームにxを文字列にして書き込む	f.write(str(x))
リストとイテラブルの散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
文字列内にひとつでも数字が含まれるか調べる	any(c.isdigit() for c in s)
横棒グラフを濃いシアン色を使って描画する	plt.barh(データ列x, データ列y, color='darkcyan')
黒い丸マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='o', c='k')
50パーセンタイルでデータフレームの欠損値を埋める	df.fillna(df.median())
折れ線グラフの色をダークマゼンタに指定する	plt.plot(データ列x, データ列y, color='darkmagenta')
本日をISO形式の文字列に変換する	datetime.datetime.today().isoformat()
パーセプトロンとして回帰分析を行う	model = sklearn.neural_network.MLPRegressor(hidden_layer_sizes=(10, 10))
グラフのカラーパレットを全般的に色差別なくする	sns.set(pallete='colorblind')
棒グラフをハニーデュー色で描画する	plt.bar(データ列x, データ列y, color='honeydew')
nとn2の排他的論理和	n ^ n2
散布図の菱形印を赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
データフレームを10の位で丸めて、整数にする	df.round(-1).astype(int)
散布図に青いダイアモンドマーカーを描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ブラック色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='black')
option: ベージュ色を使う	color = 'beige'
サンディーブラウン色でヒストグラムを描画する	plt.hist(データ列, color='sandybrown')
折れ線グラフをダークオリーブグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='darkolivegreen')
データ列の未入力値をxに設定する	ds.fillna(x)
ヒストグラムをペルー色で描画する	plt.hist(データ列, color='peru')
nをn2乗に増やす	n **= n2
線グラフの色をデピンクに設定する	plt.plot(データ列x, データ列y, color='deeppink')
折れ線グラフの色をクリムゾンに設定する	plt.plot(データ列x, データ列y, color='crimson')
xの小数点以下'3'桁の文字列にする	':.3f'.format(x)
横棒グラフをオリーブ色で描画する	plt.barh(データ列x, データ列y, color='olive')
ライトサーモン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
リストとリストの散布図を描画し、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
タイムスタンプデータにn秒を足す	aDatetime + datetime.timedelta(seconds=n)
option: 色をダークスレートブルーに設定する	color = 'darkslateblue'
データフレームのカラムの各データ値の出現数	df[col].value_counts()
ヒストグラムをダークスラテグレー色で描画する	plt.hist(データ列, color='darkslategray')
ヒストグラムの色をミディアムバイオレットレッドに設定する	plt.hist(データ列, color='mediumvioletred')
茶色にヒストグラムの色を設定する	plt.hist(データ列, color='brown')
option: グラフの線の種類を実線に指定する	linestyle = 'solid'
線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
分類モデルの平均二乗誤差を求める	sklearn.metrics.mean_squared_error(目的変数, model.predict(説明変数))
重複ありでn行をランダムにデータフレームからサンプリングする	df.sample(n, replace=True)
折れ線グラフのポイントマーカーの色を変更する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
データ列の折れ線グラフを描画して、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
データ列の折れ線グラフをダイアモンドマーカーとして描画する	plt.plot(データ列x, データ列y, marker='D')
表データを列の値によって集計する	df.groupby(column)
日付時刻データにn日を加算する	aDatetime + datetime.timedelta(days=n)
タプルを昇順にソートする	sorted(aTuple, reverse=False)
黒いポイント印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
文字列でフォーマットして本日を文字列にする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データフレームの中の列をn個にビン分割して、namesのラベルをつける	pd.cut(df[col], n, labels=names)
改行なしに数値を表示する	print(value, end='')
有理数の分子	q.numerator
二つの文字列を辞書順で比較する	s < s2
ダークターコイズ色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
折れ線グラフをスチールブルー色で描画する	plt.plot(データ列x, データ列y, color='steelblue')
二つのリストを改行なしにプリントする	print(value, value2, end='')
度数分布図を描画し合計を1にする	plt.hist(データ列, density=True)
option: 区切りを改行にする	sep = '\n'
データフレームの列が正規分布からどれだけ尖っているか見る	df[col].skew()
棒グラフの色をバイオレットにする	plt.bar(データ列x, データ列y, color='violet')
option: グラフの色を黄色にする	color = 'yellow'
文字列を別の文字列で置換する	s.replace(sub, newsub)
文字列内にひとつでも数字があるかどうか調べる	any(c.isdigit() for c in s)
option: マーカーの色をゴールドにする	markerfacecolor = 'gold'
実線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
イテラブルをキューに変換する	collections.deque(iterable)
ダークゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='darkgoldenrod')
折れ線グラフを黄色色で描画する	plt.plot(データ列x, データ列y, color='yellow')
ファイルからストリームをオープンして]、fileとする	file = open(filepath)
nまでの奇整数列を得る	list(range(1, n, 2))
データフレームのシェイプを見る	df.shape
rgbの丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
棒グラフの色をパウダーブルーにする	plt.bar(データ列x, データ列y, color='powderblue')
ティール色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='teal')
option: グラフの色をシエナに設定する	color = 'sienna'
棒グラフを黒くする	plt.bar(データ列x, データ列y, color='k')
nとn2が等しい	n == n2
数式のパラメータについてのn階微分を行う	sympy.diff(e, z, n)
横棒グラフをフォレストグリーン色として描画する	plt.barh(データ列x, データ列y, color='forestgreen')
文字列をマゼンタでプリントできる文字列に変換する	f'\033[35m{value}\033[0m'
数列とリストについての散布図にダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
オブジェクトがタプルクラスか	isinstance(obj, tuple)
データフレームを列によってソートして新しいインデックスを加える	df.sort_values(columns).reset_index()
タイムスタンプデータが木曜日	aDatetime.weekday() == 3
ヒストグラムの色をフォレストグリーンに設定する	plt.hist(データ列, color='forestgreen')
option: オリーブに色を変更する	color = 'olive'
横棒グラフをシーグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='seagreen')
両端キューをタプルにする	tuple(deq)
option: シスルを使う	color = 'thistle'
データフレームを列名リストによってまとめた表	df.groupby(columns)
タイムスタンプデータの時刻	aDatetime.time()
改行せず二つの変数を表示する	print(value, value2, end='')
グラフの用途をポスターに変更する	sns.set(context='poster')
セットが空でないか調べる	len(aSet) != 0
option: シャルトリューズを使用する	color = 'chartreuse'
オブジェクトはバイト列クラスかどうか	isinstance(obj, bytes)
数式を部分分数に展開する	sympy.apart(e)
フォレストグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='forestgreen')
カラーバーを横向きで描く	plt.colorbar(orientation='horizontal')
ゴールド色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='gold')
縦棒グラフをライトグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
文字列が数値か調べる	s.isnumeric()
両端キューのn番目	deq[n]
ライムグリーン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='limegreen')
option: スキップするフッタをnに設定する	skipfooter = n
ターコイズにヒストグラムの色を変更する	plt.hist(データ列, color='turquoise')
折れ線グラフの色をアリスブルーに設定する	plt.plot(データ列x, データ列y, color='aliceblue')
日付データが日付データと同時かどうか	aDate == aDate2
タプルをミュータブルにする	list(aTuple)
Pandasで、書式で文字列を日付データにする	pd.to_datetime(s, format='%Y-%m-%d')
リストとリストの散布図に丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o')
ミディアムスプリンググリーン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
文字列リストを結合する	''.join(aStringList)
nがn2と等しいかどうか調べる	n == n2
リストとイテラブルについて散布図を描画し、、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
一点鎖線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashbot')
列と列の重複を消す	df.drop_duplicates(subset=column)
カラムをキーにして２つのデータフレームを左ジョインする	pd.merge(df, df2, on=column, how='left')
日付データが日曜日かどうか調べる	aDate.weekday() == 6
ヒストグラムの色をリネンに設定する	plt.hist(データ列, color='linen')
箱ひげ図でデータフレームの２つのカラムを並べて可視化する	plt.boxplot([df['カラム'], df['カラム']])
リストとリストについて散布図を描いて、丸マーカーの色をrgbに変更する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
実数の双曲線正弦の逆数	math.asinh(x)
カラムは正規分布からどれだけ、歪んでいるか見る	ds.kurt()
大バツ印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='X')
散布図をアリスブルー色として描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
三二ビット整数型の全要素を０で初期化した行列	np.zeros(行数, 列数, dtype=np.int16)
グラフにグリッド線を入れる	plt.grid(True)
カンマで区切って二つのリストをプリントする	print(value, value2, sep=',')
データフレームの平均値	df.mean()
二変数の最小値	min(x, y)
線形モデルの回帰変数を見る	model.coef_
棒グラフの色をマルーンにする	plt.bar(データ列x, データ列y, color='maroon')
グラフの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
最大値・最小値の範囲で一様な疑似乱数を生成する	random.uniform(最小値, 最大値)
三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='^')
ふたつの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
ブランチドアーモンド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
折れ線グラフの大バツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
データフレームを各列毎に集約して、列の最小値を求める	df.groupby(column)[column2].min()
データフレームのカラムを1000の位で四捨五入する	df[col].round(-3)
オレンジ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='orange')
三変数の最小値	min(x, y, z)
ライトグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightgrey')
折れ線グラフを紺色として描画する	plt.plot(データ列x, データ列y, color='darkblue')
横棒グラフの色を茶色にする	plt.barh(データ列x, データ列y, color='brown')
データフレームのカラムの平均値を求める	df[col].mean()
青緑色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='teal')
ダークゴールデンロッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ヒストグラムをミディアムターコイズ色で描画する	plt.hist(データ列, color='mediumturquoise')
データフレームを千の位で四捨五入する	df.round(-3)
nのn2乗を求める	n ** n2
option: 真紅色を使う	color = 'crimson'
option: ミディアムバイオレットレッドにグラフの色を変更する	color = 'mediumvioletred'
ライトスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightskyblue')
リストとイテラブルの散布図を描いて、マーカーを大バツにセットする	plt.plot(データ列x, データ列y, marker='X')
コーラル色のヒストグラムを描画する	plt.hist(データ列, color='coral')
プロットの中のy軸に軸ラベルを付ける	plt.ylabel('y軸ラベル')
散布図に▲マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
折れ線グラフの色をライトグリーンに設定する	plt.plot(データ列x, データ列y, color='lightgreen')
要素が集合に含まれない	element not in aSet
リストとデータ列についての散布図に赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
二つのデータフレームを横向きにつなぐ	pd.concat([df, df2], axis=1)
ネイビー色を用いて散布図を描画する	plt.scatter(データ列x, データ列y, color='navy')
ブラック色で散布図を描画する	plt.scatter(データ列x, データ列y, color='black')
リストと配列について散布図を描いて、文字列という補足用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
多次元データを特異値分解で濃く次元に次元削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
集合が空集合でないかどうか調べる	len(aSet) != 0
データフレームの中にある文字列と文字列の合計を数える	df.isin([value, value2]).sum()
文字列の長さを使う	len(s)
棒グラフをパウダーブルー色で描画する	plt.bar(データ列x, データ列y, color='powderblue')
ファイルを追加できるようにオープンする]	open(filepath, mode='a')
パープル色でヒストグラムを描画する	plt.hist(データ列, color='purple')
文字列を新しい文字列で全部置換する	s.replace(sub, newsub)
両端キューの先頭から要素を取り除く	deq.popleft()
項目名がマップ上で未定義か調べる	key not in aDict
折れ線グラフの上三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='#800080')
折れ線グラフに黒いバツ印を描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフのダイアモンドマーカーの太さを変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
プロットを画面用に設定する	sns.set(context='notebook')
option: グラフの色をライトコーラルに設定する	color = 'lightcoral'
配列から多重集合を作成する	collections.Counter(iterable)
実数のn乗	pow(x, n)
データフレームから重複したデータをドロップする	df.drop_duplicates()
散布図の△マーカーを赤くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
option: グラフを一点鎖線に設定する	linestyle = 'dashbot'
折れ線グラフの色をダークサーモンにする	plt.plot(データ列x, データ列y, color='darksalmon')
列の名前の一覧を使う	df.columns
データフレームを複数の列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
文字列のの開始位置から終了位置までの間に部分文字列がいくつか含まれるかカウントする	s.count(sub, start, end)
イテラブルを両端キューに変換する	collections.deque(iterable)
プロットをプロットする	import matplotlib.pyplot as plt
データ列を閾値としてバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
ふたつの集合の差集合	aSet.difference(aSet2)
横棒グラフをパパイヤウィップ色で描画する	plt.barh(データ列x, データ列y, color='papayawhip')
散布図の上三角マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
データフレームからn番目の列を消す	pd.concat([df[df.columns[:n]], df[df.columns[n+1:]]], axis=1)
散布図のバツマーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='x', markeredgewidth=2.5)
整数nの八進数文字列	oct(n)[2:]
ヒストグラムの色をライトブルーにする	plt.hist(データ列, color='lightblue')
文字列の末尾から部分文字列を消す	s.removesuffix(sub)
n2行n列の二次元リストを作る	[[0] * n for _ in range(n2)]
option: 耐火レンガを使う	color = 'firebrick'
散布図をライムグリーン色で描画する	plt.scatter(データ列x, データ列y, color='limegreen')
数値を黄色でプリントできる文字列にする	f'\033[33m{value}\033[0m'
二つの文字列は同じ	s == s2
サーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='salmon')
浮動小数点数の最大値	sys.float_info.max
ファイル名がCSVファイル	filename.endswith('.csv')
新しい勾配ブースティング分類木を作る	model = sklearn.ensemble.GradientBoostingClassifier()
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='grey')
文字列を最後の部分文字列で二分し前半の文字列を求める	s.rpartition(sub)[0]
横棒グラフをブランチドアーモンド色として描画する	plt.barh(データ列x, データ列y, color='blanchedalmond')
縦棒グラフの色をダークシアンにする	plt.bar(データ列x, データ列y, color='darkcyan')
横棒グラフの色をピンクにする	plt.barh(データ列x, データ列y, color='pink')
文字列の末尾から余分な空白を取り除く	s.rstrip()
nをn2で割ったモジュロ	n % n2
ダークサーモン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darksalmon')
折れ線グラフの▲マーカーを青色にする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの欠損値を最大値で置換する	df.fillna(df.max())
文字列の終了位置より前に部分文字列がない	s.find(sub, 0, end) == -1
option: 先頭列を行に変更する	index_col = 0
レベッカパープル色で散布図を描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
データ列は何日か見る	ds.dt.day
option: 線の種類を一点鎖線にする	linestyle = 'dashbot'
散布図にrgbの丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c=rgb)
ダークゴールデンロッド色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
両端キューから最初の要素を取り除く	deq.remove(element)
データフレームの中にいくつ文字列があるか数える	df.isin([value]).sum()
整数nの十六進表現を求める	hex(n)
真紅色の線グラフを描画する	plt.plot(データ列x, データ列y, color='crimson')
散布図をグレー色で描画する	plt.scatter(データ列x, データ列y, color='gray')
3自然数の最大公約数	math.gcd(n, n2, n3)
データフレームの列の値がxより大きくx2より小さいデータを抽出する	df[(x < df[column]) & (df[column] < x2)]
実線にヒストグラムのラインスタイルを設定する	plt.hist(データ列, linestyle='solid')
折れ線グラフの色をオリベドラブに変更する	plt.plot(データ列x, データ列y, color='olivedrab')
option: マーカーの色を貝殻にする	markerfacecolor = 'seashell'
区切り記号で文字列を区切り、、列挙する	s.split(sep)
オブジェクトがリストに含まれないか確認する	element not in aList
横棒グラフをタン色で描画する	plt.barh(データ列x, データ列y, color='tan')
アルファベットの大文字を全て使う	string.ascii_uppercase
散布図をレベッカパープル色で描画する	plt.scatter(データ列x, データ列y, color='rebeccapurple')
ヒストグラムの色をインディゴに指定する	plt.hist(データ列, color='indigo')
淡いピンク色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightpink')
ファイルをオープンして]追加ストリームを見る	open(filepath, mode='a')
option: 左三角マーカーを使用する	marker = '<'
線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
データフレームを二つの列によってまとめたグループ	df.groupby(['A', 'B'])
データフレームのリスト列が正規分布からどれだけ、歪んでいるか見る	df[aList].kurt()
リストを中央値で分割する	pd.qcut(aList, 2)
タイムスタンプデータが土曜日かどうか	aDatetime.weekday() == 5
文字列がタプルに含まれる	element in aTuple
ヒストグラムをダーク・スラテグレー色で描画する	plt.hist(データ列, color='darkslategrey')
折れ線グラフに赤い丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='r')
タン色として散布図を描画する	plt.scatter(データ列x, データ列y, color='tan')
ヒストグラムをディープスカイブルー色を用いて描画する	plt.hist(データ列, color='deepskyblue')
xでデータフレームの列のNaNを埋める	df[col].fillna(x)
青いダイアモンド印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='b')
ヒストグラムの色をディムグレーに設定する	plt.hist(データ列, color='dimgrey')
散布図に黒い丸マーカーを描画する	plt.scatter(データ列x, データ列y, marker='o', markerfacecolor='k')
文字列中にひとつでも非アルファベットが含まれるか調べる	any(not c.isalpha() for c in s)
実数が有限か	math.isfinite(x)
option: コーンズシルクにグラフの色を設定する	color = 'cornsilk'
縦棒グラフをオレンジレッド色を用いて描画する	plt.bar(データ列x, データ列y, color='orangered')
グラフを使う準備をする	import matplotlib.pyplot as plt
数値の変数の解を方程式として求める	sympy.solve(e, z)
ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.AdaBoostClassifier(random_state=0, n_estimators=100)
整数nの二進表現を使う	bin(n)
配列とリストについての散布図に赤い下三角マーカーをプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
データフレームを行によって並べる	df.sort_index()
option: 箱ひげ図を水平方向にする	vert = False
折れ線グラフの丸マーカーの色を指定する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='#800080')
文字列の中の正規表現によるマッチを使う	re.findall(pattern, s)
カテゴリでグループ化して、データフレームをカウントプロットにする	sns.countplot(x='列名', hue='カテゴリ列', data=df)
ヒストグラムの色を青緑に変更する	plt.hist(データ列, color='teal')
辞書のキーとその値をペアとして取り出す	aDict.items()
文字列を左トリムする	s.lstrip()
TSVを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
option: グラフの種類を実線に設定する	linestyle = 'solid'
文字列を別の文字列で置き換える	s.replace(sub, newsub)
データ列の欠損値を50パーセンタイルにする	ds.fillna(ds.median())
空白によって文字列を分割して整数リストに変換する	map(int, s.split())
オリーブ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='olive')
option: グラフの色をライトゴールドロディイエローに変更する	color = 'lightgoldenrodyellow'
文字列に日本語が含まれるか	re.search('[あ-んア-ン\u4E00-\u9FD0]', s)
黒いポイントマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='.', c='k')
折れ線グラフの左三角マーカーを青くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='b')
タイムスタンプデータが日付時刻データより後ろか調べる	aDatetime > aDatetime2
ヒストグラムをアリスブルー色で描画する	plt.hist(データ列, color='aliceblue')
整数乱数で要素を埋めた行列	np.random.randint(開始値, 終了値, N)
折れ線グラフをピンク色で描画する	plt.plot(データ列x, データ列y, color='pink')
データフレームのカラムの文字列を欠損値にする	df[col].replace(s, np.nan)
散布図をアリスブルー色で描画する	plt.scatter(データ列x, データ列y, color='aliceblue')
数列と配列についての散布図に菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D')
データフレームのカラムを並べて箱髭図にする	plt.boxplot([df['カラム'], df['カラム']])
散布図の三角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='^', markersize=2.0)
文字列が文字列リストのいづれ	s in aStringList
option: グラフの色をライトスチールブルーに指定する	color = 'lightsteelblue'
既存のファイルを文字コードtextとして追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
ラベンダー色でヒストグラムを描画する	plt.hist(データ列, color='lavender')
淡いピンク色色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightpink')
文字列内にひとつでも英数字がある	any(c.isalnum() for c in s)
線グラフの色をライトグリーンに指定する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームのカラムを小数点以下n桁で丸める	df[col].round(n)
リストをビン分割する	pd.cut(aList, aList)
二つのデータフレームを縦向きにつなぐ	pd.concat([df, df2], axis=0)
バイナリ書き込みモードとしてファイルパスをオープンして]、fとする	f = open(filepath, mode='wb')
文字列中にひとつでも非数字が含まれるか調べる	any(not c.isdigit() for c in s)
文字列を下線付きにする	f'\033[4m{value}\033[0m'
箱ひげ図をプロットし、平均線を追加する	plt.boxplot(データ列, meanline=True)
部分文字列を範囲を指定して探す	s.find(sub, start, end)
散布図に四角印を使用する	plt.scatter(データ列x, データ列y, marker='s')
option: フォントの色をパープルに変更する	color = 'purple'
データフレームのカラムは何年か確認する	df[col].dt.year
option: 青にフォントの色を設定する	color = 'blue'
ヒストグラムを点線を使って描画する	plt.hist(データ列, linestyle='dotted')
横棒グラフの色を小麦色にする	plt.barh(データ列x, データ列y, color='wheat')
カラーバーを横向きで描画する	plt.colorbar(orientation='horizontal')
ガウス過程を用いて回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
青い実線で線グラフをプロットする	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
リストとリストについての散布図に黒い三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^', c='k')
プラットホームのエンディアンを使う	sys.byteorder
ヒストグラムの色を紺にセットする	plt.hist(データ列, color='darkblue')
度数分布図を描画し、ビン数を設定する	plt.hist(データ列, bins=区関数)
ヒストグラムをミディアムオーキッド色で描画する	plt.hist(データ列, color='mediumorchid')
折れ線グラフに三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^')
データフレームのリストカラムを1000の位で四捨五入する	df[aList].round(-3)
option: フォントの色をプラムに設定する	color = 'plum'
ヒストグラムの色を淡いピンク色に設定する	plt.hist(データ列, color='lightpink')
データフレームのカラムの中のNaNの合計を求める	df[col].isna().sum()
行によって降順でデータフレーム全体をソートする	df.sort_index(ascending=False)
棒グラフの色をトマトにする	plt.bar(データ列x, データ列y, color='tomato')
二つのリストを文字列で区切って表示する	print(value, value2, sep=s)
散布図にクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
横棒グラフをライトゴールドロディイエロー色として描画する	plt.barh(データ列x, データ列y, color='lightgoldenrodyellow')
リストと配列の散布図をプロットして、マーカーを四角に設定する	plt.plot(データ列x, データ列y, marker='s')
option: グラフの色をスノーに変更する	color = 'snow'
プロットにx=0の一点鎖線を設定する	plt.axvline(x=0, linestyle='dashbot')
option: ネイビーに色を指定する	color = 'navy'
option: 茶色色を使う	color = 'brown'
正規分布の累積分布関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
小麦色色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='wheat')
一点鎖線でヒストグラムを描画する	plt.hist(データ列, linestyle='dashbot')
折れ線グラフの色をナバホホワイトに変更する	plt.plot(データ列x, データ列y, color='navajowhite')
円グラフの特定の要素だけ切り出す	plt.pie(データ列, startangle=90, explode=[0, 0.3, 0])
ラベンダー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lavender')
横棒グラフをライム色で描画する	plt.barh(データ列x, データ列y, color='lime')
ファイルパスをUTF8でオープンする]	open(filepath, encoding='utf-8')
データフレームを関数の値でグループ分けし、、列挙する	[(name, group) for name, group in df.groupby(関数)]
折れ線グラフの右三角マーカーの色を変更する	plt.plot(データ列x, データ列y, marker='>', markerfacecolor='#800080')
ヒストグラムをミディアムスプリンググリーン色として描画する	plt.hist(データ列, color='mediumspringgreen')
乱数生成系列をnで初期化する	random.seed(n)
縦棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightgreen')
データフレームの欠損値を最小値で置換する	df.fillna(df.min())
日付データが火曜日かどうか調べる	aDate.weekday() == 1
mathをインポートする	import math
行列の行列式	np.linalg.det(aArray)
真スーパーセットか	aSet > aSet2
こんにちは世界と表示する	print('Hello World')
イテラブルのそれぞれを関数でフィルタする	filter(func, iterable)
横棒グラフをディムグレー色で描画する	plt.barh(データ列x, データ列y, color='dimgray')
既存のファイルパスをEUCで追加できるようにオープンする]	open(filepath, mode='a', encoding='euc_jp')
バイオレット色の縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='violet')
横棒グラフをミディアムシアグリーン色として描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
CSVを読み込む	pd.read_csv(filename, sep=',')
折れ線グラフのマーカーを下三角にする	plt.plot(データ列x, データ列y, marker='v')
配列のコンビネーション	itertools.combinations(iterable, n)
ヒストグラムをグレー色を用いて描画する	plt.hist(データ列, color='gray')
折れ線グラフを淡いピンク色色として描画する	plt.plot(データ列x, データ列y, color='lightpink')
黒いクロスマーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
棒グラフをダークグレー色で描画する	plt.bar(データ列x, データ列y, color='darkgrey')
散布図をシスル色を使って描画する	plt.scatter(データ列x, データ列y, color='thistle')
カウンタの要素のカウント	aCounter[element]
折れ線グラフの三角マーカーの線幅を設定する	plt.plot(データ列x, データ列y, marker='^', markeredgewidth=2.5)
変数について数値の積分を計算する	sympy.integrate(e, z)
日付データが土曜日かどうか調べる	aDate.weekday() == 5
option: バッファリングのサイズを指定する	buffering = 4096
リストとリストについて散布図を描画して、丸マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
散布図を黒い下三角マーカーでプロットする	plt.plot(データ列x, データ列y, marker='v', c='k')
折れ線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
リストを組に変換する	tuple(aList)
黒い上三角マーカーを折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='k')
ベクトルの列ごとの平均を求める	np.mean(aArray, axis=0)
イテラブルと数列についての散布図に四角マーカーを描く	plt.plot(データ列x, データ列y, marker='s')
線グラフを青色を用いて描画する	plt.plot(データ列x, データ列y, color='blue')
珊瑚色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='coral')
ヒストグラムをサーモン色で描画する	plt.hist(データ列, color='salmon')
整数nをバイト列にする	n.to_bytes(length=bytesize, byteorder='big')
二つの文字列をカンマで区切ってプリントする	print(value, value2, sep=',')
折れ線グラフの左三角マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
文字列がリストに含まれない	element not in aList
リストの変化を青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームの中に文字列が含まれるか調べる	df.isin([value])
データ列が何曜日か調べる	ds.dt.weekday_name
イテラブルを文字列リストに変換して、空白を用いて連結する	' '.join(map(str, iterable))
バツ印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='x')
プログラムの実行を即座に終了する	sys.exit()
双方向キューの先頭にイテラブルの各要素を順に追加する	deq.extendleft(iterable)
option: マーカーの色をラベンダーブラッシュにする	markerfacecolor = 'lavenderblush'
ファイルから拡張子なしのファイル名を取り出す	os.path.splitext(os.path.basename(filepath))[0]
データフレームを各カテゴリごとに色分けしてバイオリン図にする	sns.violinplot(x='カテゴリ列', y='列', data=df)
実数が負の数かどうか調べる	x < 0
イテラブルの各要素に対してpredicateFuncが真であれば、その要素を出力する	itertools.takewhile(predicateFunc, iterable)
散布図をゴーストホワイト色を用いて描画する	plt.scatter(データ列x, データ列y, color='ghostwhite')
カテゴリでグループ化して、データフレームをに箱ひげ図を用いて見る	sns.boxplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
日付時刻データを文字列でフォーマットして文字列にする	"aDatetime.strftime(""%d/%m/%y"")"
散布図をスチールブルー色で描画する	plt.scatter(データ列x, データ列y, color='steelblue')
折れ線グラフをチョコレート色で描画する	plt.plot(データ列x, データ列y, color='chocolate')
図のインチを設定する	plt.figure(figsize=(横幅, 高さ))
データフレームの列が正規表現文字列にマッチする行を取り出す	df[df[column].str.match(s)]
TSVファイルからCSVファイルをSJISで読み込む	pd.read_csv(filename, encoding='shift_jis')
散布図をライトコーラル色として描画する	plt.scatter(データ列x, データ列y, color='lightcoral')
散布図をポイントマーカーで描く	plt.plot(データ列x, データ列y, marker='.')
列の全順列	itertools.permutations(iterable)
棒グラフをラベンダーブラッシュ色で描画する	plt.bar(データ列x, データ列y, color='lavenderblush')
イエローグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='yellowgreen')
データフレームの列の欠損値を最小値に設定する	df[col].fillna(df[col].min())
option: シルバーにグラフの色を設定する	color = 'silver'
行列の最大値	np.max(aArray)
option: グラフの色をイエローグリーンに設定する	color = 'yellowgreen'
棒グラフの色をホワイトスモークにする	plt.bar(データ列x, データ列y, color='whitesmoke')
双方向キューの要素をn個分左にローテンションする	deq.rotate(-n)
最小値でデータフレームの列の欠損値を置き換える	df[col].fillna(df[col].min())
折れ線グラフをスラグレー色を使って描画する	plt.plot(データ列x, データ列y, color='slategray')
データ列のユニークな要素数を確認する	ds.nunique()
データ列の折れ線グラフをポイント印で描画する	plt.plot(データ列x, データ列y, marker='.')
rgbの四角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データフレームのカラムの月	df[col].dt.month
option: 色をディムグレーに設定する	color = 'dimgrey'
データフレームを列によってソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
ふたつの辞書を結合する	aDict | aDict2
データ列の基本統計量	ds.describe()
文字列は文字列より辞書順で前	s < s2
縦棒グラフをダークグリーン色で描画する	plt.bar(データ列x, データ列y, color='darkgreen')
棒グラフをダークオーキッド色を用いて描画する	plt.bar(データ列x, データ列y, color='darkorchid')
チョコレート色の線グラフを描画する	plt.plot(データ列x, データ列y, color='chocolate')
ヒストグラムをダークオリーブグリーン色で描画する	plt.hist(データ列, color='darkolivegreen')
ヒストグラムをライトイエロー色で描画する	plt.hist(データ列, color='lightyellow')
インディアンレッド色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
データフレームの先頭のカラム以外を説明変数にする	説明変数 = df[df.columns[1:]]
数列を縦棒グラフにする	plt.bar(ラベル列, データ列)
option: イエローグリーンを使う	color = 'yellowgreen'
散布図を黄緑色で描画する	plt.scatter(データ列x, データ列y, color='chartreuse')
文字列の中でASCII限定としてパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.ASCI)
データフレームのカラムと列の相関行列をヒートマップで描画する	sns.heatmap(df[[column, column2]].corr())
xが1、もしくは2か調べる	x == 1 or x == 2
データ列は何年か見る	ds.dt.year
散布図をrgbのダイアモンドマーカーを用いて描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
option: バッファリングを無効にする	buffering = 0
データフレームを列で小さい順にソートする	df.sort_values(by=column, ascending=True)
データ列間のR2を計算する	sklearn.metrics.r2_score(データ列, データ列2)
タプルの最初のオブジェクトを探す	aTuple.index(element)
データフレームの列の欠損値を最頻値に指定する	df[col].fillna(df[col].mode().iloc[0])
グラフ中の(x,y)の場所に補足を表示する	plt.legend(loc=(x, y))
データ列の中にある日付データの個数を数える	ds.isin([value]).sum()
option: 色を小麦色に設定する	color = 'wheat'
散布図の色をバリーウッドにする	plt.scatter(データ列x, データ列y, color='burlywood')
折れ線グラフの▼マーカーの線幅を変更する	plt.plot(データ列x, データ列y, marker='v', markeredgewidth=2.5)
棒グラフをコーンフラワーブルー色を使って描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
日付時刻データを文字列を用いてフォーマットする	"aDatetime.strftime(""%d/%m/%y"")"
option: フォントの色をダークグレーに設定する	color = 'darkgrey'
option: 欠損値は無視する	dropna = True
ビン数nで配列をビン分割する	pd.cut(aArray, n)
2を底とする実数の対数を求める	math.log2(x)
データフレームを二つの列を用いて昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
文字列の左端から空白を消す	s.lstrip()
プロットのカラーパレットを淡くする	sns.set(pallete='muted')
棒グラフの色をネイビーにする	plt.bar(データ列x, データ列y, color='navy')
散布図をドジャーブルー色を用いて描画する	plt.scatter(データ列x, データ列y, color='dodgerblue')
棒グラフをミディアムシアグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumseagreen')
アンティークホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='antiquewhite')
ミディアムターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumturquoise')
回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
列を等間隔でn個にビン分割する	pd.cut(ds, n)
配列とリストについての散布図に赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', c='r')
option: エンコーディングをUTF8に設定する	encoding = 'utf-8'
にバイオリン図でデータフレームの列をグラフ化する	sns.violinplot(x='カテゴリ列', y='列', data=df)
組をリストにする	list(aTuple)
データフレームのカラムの欠損値を最小値に設定する	df[col].fillna(df[col].min())
折れ線グラフの色をオーキッドに設定する	plt.plot(データ列x, データ列y, color='orchid')
オレンジレッドにヒストグラムの色を設定する	plt.hist(データ列, color='orangered')
option: コーラルにグラフの色を設定する	color = 'coral'
ヒストグラムをパパイヤウィップ色として描画する	plt.hist(データ列, color='papayawhip')
全要素を1で初期化した行列を作る	np.ones(要素数, dtype=np.int)
ヒストグラムを描画し、、ビンの数を設定する	plt.hist(データ列, bins=区関数)
実数の二乗を求める	x ** 2
オブジェクトにプロパティが存在する	hasattr(obj, プロパティ名)
ローングリーンにヒストグラムの色を指定する	plt.hist(データ列, color='lawngreen')
折れ線グラフを破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed')
横棒グラフをプロットして、ラベルを中央寄せする	plt.barh(ラベル列, データ列, align='center')
リストをビン数nでビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
データフレームの列が正規表現文字列にマッチしない行を取り出す	df[not df[column].str.match(s)]
本日を文字列を用いてフォーマットする	"datetime.datetime.today().strftime(""%d/%m/%y"")"
データフレームの指定された列	df[column]
データフレームのどの値が頻出か確認する	df.mode()
実数の二進対数	math.log2(x)
散布図の四角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
option: ライトイエローを用いる	color = 'lightyellow'
option: namesをカラムの名前に設定する	names = names
ビン数nでリストを分割し、、namesのラベルをつける	pd.cut(aList, n, labels=names)
カテゴリ列で色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
データ列の偏りを平方根変換する	np.sqrt(データ列)
インディアンレッド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
データフレームの未入力値を平均で補う	df.fillna(df.mean())
星印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
積み上げ横棒プロットをプロットする	plt.barh(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームを二つの列で昇順にソートして更新する	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
データフレームのリストカラムのNaNを平均にセットする	df[aList].fillna(df[aList].mean())
棒グラフの色をローングリーンにする	plt.bar(データ列x, データ列y, color='lawngreen')
データフレームからカテゴリデータのカラム名リストを使う	df.select_dtypes('object').columns
文字列中にひとつでも非小文字がある	any(not c.islower() for c in s)
線グラフをミディアムスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
ゴーストホワイト色として線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
小数点数のタンジェントの逆数を求める	math.atan(x)
ヒストグラムの色をオーキッドに設定する	plt.hist(データ列, color='orchid')
データフレームのリスト列の相関行列を計算する	df[aList].corr()
リストをプリントする	print(value)
折れ線グラフを実線に変更する	plt.plot(データ列x, データ列y, linestyle='solid')
横棒グラフの色をパールゴールデンロッドにする	plt.barh(データ列x, データ列y, color='palegoldenrod')
option: スラグレーを用いる	color = 'slategrey'
ペルー色のヒストグラムを描画する	plt.hist(データ列, color='peru')
日付時刻データを文字列でフォーマットして文字列に変換する	"aDatetime.strftime(""%d/%m/%y"")"
ファイルを追加できるように文字列の示すエンコーディングで開く]	open(filepath, mode='a', encoding=s)
折れ線グラフの色をダークスレートブルーに変更する	plt.plot(データ列x, データ列y, color='darkslateblue')
折れ線グラフを青い点線を使って描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
ファイル名がTSVファイルか	filename.endswith('.tsv')
散布図をグレー色として描画する	plt.scatter(データ列x, データ列y, color='gray')
データ列の文字列を未入力値にする	ds.replace(s, np.nan)
散布図のダイアモンドマーカーの太さを設定する	plt.scatter(データ列x, データ列y, marker='D', markeredgewidth=2.5)
データフレームをCSVでJSONLファイルに保存する	df.to_csv(filename)
ふたつの集合に共通する要素からなる集合	aSet.intersection(aSet2)
マルーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='maroon')
青い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='b')
ナバホホワイトにヒストグラムの色を変更する	plt.hist(データ列, color='navajowhite')
チョコレート色でヒストグラムを描画する	plt.hist(データ列, color='chocolate')
棒グラフの色を淡いピンク色にする	plt.bar(データ列x, データ列y, color='lightpink')
ゲインズボロ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='gainsboro')
棒グラフをライトグリーン色で描画する	plt.bar(データ列x, データ列y, color='lightseagreen')
円グラフを真円にする	plt.axis('equals')
区間の数を設定してヒストグラムを描画する	plt.hist(データ列, bins=区関数)
option: グラフの色をアイボリーに指定する	color = 'ivory'
option: ダークスレートブルー色を使う	color = 'darkslateblue'
文字列を走査し、正規表現に複数行対応としてマッチするか見る	re.search(pattern, s, flags=re.MULTILINE)
リストと数列について散布図をプロットして、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
リストを展開してプリントする	print(*aList)
JSONLファイルにヘッダを付けずにデータフレームを書き込む	df.to_csv(filename, header=None)
オブジェクトがバイト列	isinstance(obj, bytes)
特異値分解でパステル調に次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=N).fit_transform(多次元データ)
データ列が何曜日か見る	ds.dt.weekday_name
文字列を最後の部分文字列で二つに区切って、後半の文字列を見る	s.rpartition(sub)[-1]
リストとデータ列の散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
集合から別のセットの要素を全て取り除く	aSet.difference_update(aSet2)
小数点数以下の最大の整数を算出する	math.floor(x)
ヒストグラムをスラグレー色を用いて描画する	plt.hist(データ列, color='slategray')
グラフの縦軸のラベルをuntitledに変更する	plt.ylabel('y軸ラベル')
大文字・小文字を無視して正規表現に文字列全体をマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
サーモン色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='salmon')
散布図の色をローングリーンにする	plt.scatter(データ列x, データ列y, color='lawngreen')
入力ストリームを改行除外して一行ずつ読み込む	f.readline()
nをn2分の一にする	n /= n2
nが2で割り切れないかテストする	n % 2 == 1
末尾から空白で文字列を区切る	s.rsplit()
option: 四角印を用いる	marker = 's'
スチールブルーにヒストグラムの色を設定する	plt.hist(データ列, color='steelblue')
nが2で割り切れないか調べる	n % 2 == 1
折れ線グラフの大バツマーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='X', markersize=2.0)
データフレームのヒートマップを描画する	sns.heatmap(df.corr())
グラフのx座標を対数に変更する	plt.xscale('log')
option: ビスク色を用いる	color = 'bisque'
option: アリスブルーにグラフの色を設定する	color = 'aliceblue'
文字列をカンマを用いて区切って列挙する	s.split(',')
option: バイオレット色を用いる	color = 'violet'
ヒストグラムをシャルトリューズ色として描画する	plt.hist(データ列, color='chartreuse')
最大値・最小値として乱数を発生させる	random.randint(最小値, 最大値)
ダークブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkblue')
データフレームを散布図で可視化して、カテゴリ別に色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
option: n番目のカラムをインデックスにする	index_col = n
option: フォントの色をライトスチールブルーに設定する	color = 'lightsteelblue'
行列を横方向に連結する	np.concatenate([aArray, aArray2], axis=1)
Pandasで、書式fmtとして文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
ブランチドアーモンド色の線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
option: ダークグリーン色を使う	color = 'darkgreen'
折れ線グラフの色をミディアムオーキッドに変更する	plt.plot(データ列x, データ列y, color='mediumorchid')
折れ線グラフを暗い赤色で描画する	plt.plot(データ列x, データ列y, color='darkred')
データ列の変化を色付きの実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
横棒グラフの色をシーグリーンにする	plt.barh(データ列x, データ列y, color='seagreen')
改行で区切って二つの文字列を表示する	print(value, value2, sep='\n')
ロージーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
折れ線グラフの色をサーモンに指定する	plt.plot(データ列x, データ列y, color='salmon')
ファイルパスを書き込み用にSJISを使ってオープンする]	open(filepath, mode='w', encoding='shift_jis')
折れ線グラフのポイントマーカーの色を設定する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='#800080')
縦棒グラフの色を青緑にする	plt.bar(データ列x, データ列y, color='teal')
option: マーカーの色をサーモンにする	markerfacecolor = 'salmon'
グラフで用いるカラーパレットを指定する	sns.set(pallete=パレット名)
散布図を丸マーカーで描画する	plt.plot(データ列x, データ列y, marker='o')
標準正規分布の確率密度関数	scipy.stats.norm.pdf(x)
文字列を空白で区切る	s.split()
折れ線グラフをゴールド色で描画する	plt.plot(データ列x, データ列y, color='gold')
データフレームの指定された４列のみ取り出す	df[[column, column2, column3, column4]]
ライトサーモン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightsalmon')
集合が空か	len(aSet) == 0
棒グラフの色をダークバイオレットにする	plt.bar(データ列x, データ列y, color='darkviolet')
nとn2のシートをエクセルデータファイルから読み込む	pd.read_excel(filename, sheet_name=[n, n2])
二点間のユークリッド距離	math.dist(point, point2)
データ列の平均	ds.mean()
目盛線をプロットから消す	plt.grid(False)
棒グラフの色をカデットブルーにする	plt.bar(データ列x, データ列y, color='cadetblue')
変数について数式の積分を求める	sympy.integrate(e, z)
横棒グラフを青色で描画する	plt.barh(データ列x, データ列y, color='blue')
日付データにn秒分、加算する	aDate + datetime.timedelta(seconds=n)
データフレームのリストカラムをValueMapで置換する	df[aList].replace(ValueMap)
散布図の下三角マーカーの太さを変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
パーセプトロンを用いてクラス分類を行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
ヒストグラムの色をシャルトリューズに設定する	plt.hist(データ列, color='chartreuse')
カウンタの項目をひとつ増やす	aCounter[element] += 1
データ列間の決定係数を求める	sklearn.metrics.r2_score(データ列, データ列2)
線グラフの色をマルーンに設定する	plt.plot(データ列x, データ列y, color='maroon')
新しい文字列で正規表現にマッチした文字列を置換する	re.sub(pattern, newsub, s)
黒い下三角マーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='v', c='k')
赤いバツマーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='x', c='r')
縦棒グラフをゴーストホワイト色で描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
本日は何曜日か知る	datetime.datetime.today().weekday()
散布図の左三角印を赤色にする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='r')
ヒストグラムをプラム色を用いて描画する	plt.hist(データ列, color='plum')
データフレームのリスト列を100の位で丸めて、整数型にする	df[aList].round(-2).astype(int)
1からnまでの整数列	list(range(1, n+1))
散布図にrgbのポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c=rgb)
文字列中の部分文字列を文字列に置換する	s.replace(sub, newsub)
散布図の色をライトシアンにする	plt.scatter(データ列x, データ列y, color='lightcyan')
横棒グラフをディープスカイブルー色として描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
関数によってデータフレームをグループ化し、要約統計量を算出する	df.groupby(関数).describe()
データフレームを'A'列によって並べ直し、、NaNを先頭にする	df.sort_values(by='A', na_position='first')
耐火レンガ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='firebrick')
ファイルを読み込みモードでオープンして]、fとする	f = open(filepath, mode='r')
散布図をシアン色で描画する	plt.scatter(データ列x, データ列y, color='cyan')
ヒストグラムの色をスプリンググリーンに設定する	plt.hist(データ列, color='springgreen')
データフレームをJSONLファイルにSJISで保存する	df.to_csv(filename, encoding='shift_jis')
実数を実数から減算する	x - y
カンマによって文字列を区切って、列挙する	s.split(',')
確率的勾配降下としてクラス分類を行う	model = sklearn.linear_model.SGDClassifier()
文字列が十進数字か調べる	s.isdecimal()
ロードされたモジュールの一覧	sys.modules
文字列の両端から空白を取り除く	s.strip()
散布図に黒い三角マーカーを描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
カウンタ間でユニオン演算する	aCounter | aCounter2
データフレームの列の一意な要素	df[col].unique()
option: ゲインズボロ色を使う	color = 'gainsboro'
option: ディムグレー色を使う	color = 'dimgray'
カテゴリ列に並べて、データフレームを箱ひげ図にする	sns.boxplot(x='カテゴリ列', y='列', data=df)
プラットフォームのコードポイントの最大値を知る	sys.maxunicode
データフレームをCSVファイルを用いてJSONLファイルに保存する	df.to_csv(filename)
実数を千の位で丸める	round(x, -3)
データ列間の平均二乗誤差を算出する	sklearn.metrics.mean_squared_error(データ列, データ列2)
データフレームのcollをタイムスタンプ型にする	pd.to_datetime(df[col])
データ列の四分位を作図する	plt.boxplot(データ列)
グラフのカラーパレットを暗くする	sns.set(pallete='dark')
ヒストグラムをミディアムバイオレットレッド色を用いて描画する	plt.hist(データ列, color='mediumvioletred')
文字列を最後の部分文字列で分けた時の前半の文字列	s.rpartition(sub)[0]
データフレームのカラムの年を使う	df[col].dt.year
散布図のポイントマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='r')
ダーク・スラテグレー色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
散布図の色を青にする	plt.scatter(データ列x, データ列y, color='blue')
データフレームの未入力値を最小値で埋める	df.fillna(df.min())
棒プロットの色をrgbに設定する	plt.bar(ラベル列, データ列, color=rgb)
ワーキングディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
ミディアムバイオレットレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumvioletred')
横棒グラフをアンティークホワイト色で描画する	plt.barh(データ列x, データ列y, color='antiquewhite')
option: グラフの色をターコイズに設定する	color = 'turquoise'
青緑色のヒストグラムを描画する	plt.hist(データ列, color='teal')
降順に破壊的にデータフレームを列名リストによってソートする	df.sort_values(by=column, ascending=False, inplace=True)
データ列とイテラブルの散布図をプロットしてマーカーを星に設定する	plt.plot(データ列x, データ列y, marker='*')
散布図をダークシアグリーン色で描画する	plt.scatter(データ列x, データ列y, color='darkseagreen')
クラス分類の適合率を算出する	sklearn.metrics.precision_score(正解データ列, 予測データ列)
option: ライトスチールブルーに色を指定する	color = 'lightsteelblue'
データフレームのリストカラムの欠損値を直前の値に増やす	df[aList].fillna(method='ffill')
文字列の大文字小文字を入れ替える	s.swapcase()
整数nの8進数文字列を使う	oct(n)[2:]
ヒストグラムをゲインズボロ色として描画する	plt.hist(データ列, color='gainsboro')
紺碧色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='azure')
文字列が文字列リストのいづれかどうか確認する	s in aStringList
スピアマン順位相関係数としてデータフレームの相関行列	df.corr(method='spearman')
データ列と数列について散布図を描画して星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
option: 大バツマーカーを用いる	marker = 'X'
option: ゴーストホワイトにグラフの色を設定する	color = 'ghostwhite'
点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted')
棒グラフをライムグリーン色で描画する	plt.bar(データ列x, データ列y, color='limegreen')
整数nは配列のひとつか判定する	n in aArray
データフレームの列の文字列を欠損値にする	df[col].replace(s, np.nan)
データをL2ノルムとして正規化する	"sklearn.preprocessing.Normalizer(norm=""l2"").fit_transform(データ列)"
データフレームを各列と列の組み合わせ毎にグループ化して、合計を求める	df.groupby([column, column2], as_index=False).sum()
散布図の大バツマーカーを黒くする	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='k')
データ列をビン数nで分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
ビン数nでリストをビン分割する	pd.cut(aList, n)
グレー色のヒストグラムを描画する	plt.hist(データ列, color='grey')
グラフのカラーパレットを濃くする	sns.set(pallete='deep')
縦棒グラフをスラグレー色として描画する	plt.bar(データ列x, データ列y, color='slategray')
プロットにx=0の実線を付ける	plt.axvline(x=0, linestyle='solid')
ヒストグラムの色をプラムに設定する	plt.hist(データ列, color='plum')
折れ線グラフを耐火レンガ色で描画する	plt.plot(データ列x, データ列y, color='firebrick')
最頻値でデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].mode().iloc[0])
散布図の色をミディアムパープルにする	plt.scatter(データ列x, データ列y, color='mediumpurple')
カデットブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cadetblue')
文字列をシアンでプリントする	print(f'\033[36m{value}\033[0m')
ダークオレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkorange')
折れ線グラフの色をライトイエローに指定する	plt.plot(データ列x, データ列y, color='lightyellow')
データフレームのリストカラムの未入力値をxで埋める	df[aList].fillna(x)
option: 色をミディアムシアグリーンに変更する	color = 'mediumseagreen'
無限にオブジェクトが繰り返す列	itertools.repeat(element)
文字列全体をASCII限定として正規表現にマッチさせる	re.fullmatch(pattern, s, flags=re.ASCI)
option: 先頭のカラムをインデックスに設定する	index_col = 0
option: 赤を用いる	color = 'red'
散布図に大バツマーカーを使う	plt.scatter(データ列x, データ列y, marker='X')
サイコロ	random.randint(1, 6)
option: グラフの色をスチールブルーに指定する	color = 'steelblue'
クラス分類をスタッキングを用いて行う	sklearn.ensemble.StackingClassifier()
縦棒グラフをダークオレンジ色で描画する	plt.bar(データ列x, データ列y, color='darkorange')
データフレームの指定された列を選択する	df[column]
データフレームを列によってグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
プロットの色を暗くする	sns.set(pallete='dark')
折れ線グラフのポイントマーカーを黒くする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
縦軸の表示範囲を変更する	plt.ylim(最小値, 最大値)
棒グラフの色をライトコーラルにする	plt.bar(データ列x, データ列y, color='lightcoral')
棒グラフの色をカーキにする	plt.bar(データ列x, データ列y, color='khaki')
option: グラフの色をダークバイオレットに指定する	color = 'darkviolet'
option: ペールグリーン色を使用する	color = 'palegreen'
イテラブルの全順列	itertools.permutations(iterable)
中央値でデータフレームのカラムの欠損値を埋める	df[col].fillna(df[col].median())
辞書をカウンタに変換する	collections.Counter(aDict)
列'A'と列'B'をキーとして2つのデータフレームを外部ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
関数によってデータフレームをグループ化して、列挙する	[(name, group) for name, group in df.groupby(関数)]
option: 無視する列番号をnamesで指定する	skiprows = names
ホールドアウト法を用いる	X_train, X_test, y_train, y_test = train_test_split(説明変数, 目的変数, test_size=0.3)
双方向キューをポップする	deq.pop()
棒グラフをリネン色で描画する	plt.bar(データ列x, データ列y, color='linen')
浮動小数点数の二乗	x ** 2
seabornのデフォルトスタイルを適用する	sns.set()
横棒グラフをミッドナイトブルー色で描画する	plt.barh(データ列x, データ列y, color='midnightblue')
文字列が平仮名	('ぁ' <= ch <= 'ん')
二つの列の値によってデータフレームをグループ化する	df.groupby(['A', 'B'])
グラフのカラーパレットを色差別なくする	sns.set(pallete='colorblind')
データフレームの中のカラムを等量でビン数nとしてビン分割する	pd.qcut(df[col], n)
リストとリストについての散布図に左三角マーカーを描く	plt.plot(データ列x, データ列y, marker='<')
1で全要素を初期化した行列	np.ones(要素数, dtype=np.int)
最初のカテゴリーを無視してデータフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], drop_first=True)
カウンタを低頻出な方から列挙する	aCounter.most_common()[::-1]
文字列を下線付きでプリントできる文字列に変換する	f'\033[4m{value}\033[0m'
折れ線グラフをダーク・スラテグレー色を用いて描画する	plt.plot(データ列x, データ列y, color='darkslategrey')
文字の文字コード	ord(ch)
文字列が正規表現にマッチさせる	re.match(pattern, s)
既存のファイルをSJISで追加できるようにオープンする]	open(filepath, mode='a', encoding='shift_jis')
棒グラフをブランチドアーモンド色で描画する	plt.bar(データ列x, データ列y, color='blanchedalmond')
折れ線グラフの色をリネンに設定する	plt.plot(データ列x, データ列y, color='linen')
小文字を全て見る	string.ascii_lowercase
イテラブルからn個ランダムに選ぶ	random.choices(iterable, k=n)
Pandasで、日付データのデータ列をデータフレームのインデックスにする	df.index = pd.DatetimeIndex(ds)
ヒストグラムをライムグリーン色で描画する	plt.hist(データ列, color='limegreen')
データフレームがどの程度、分散しているか見る	df.var()
色付きの実線でデータ列の変化を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='#800080')
表から指定された４つの列のみ抽出する	df[[column, column2, column3, column4]]
ヒストグラムをオリーブ色を用いて描画する	plt.hist(データ列, color='olive')
正規分布として疑似乱数を生成する	random.normalvariate(mu=0.5, sigma=0.2)
折れ線グラフのダイアモンド印の色を指定する	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='#800080')
折れ線グラフをフォレストグリーン色で描画する	plt.plot(データ列x, データ列y, color='forestgreen')
横棒グラフの色をカデットブルーにする	plt.barh(データ列x, データ列y, color='cadetblue')
ヒストグラムをロージーブラウン色で描画する	plt.hist(データ列, color='rosybrown')
データフレームの中央値	df.median()
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='utf-8')
option: どの列もインデックスに設定しない	index_col = None
ホワイトスモーク色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
グラフの描画で色差別なくカラーパレットを用いる	sns.set(pallete='colorblind')
option: マーカーの色をシルバーにする	markerfacecolor = 'silver'
ダークスレートブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
新しいロバスト回帰モデルを新規作成する	model = sklearn.linear_model.RANSACRegressor(random_state=0)
日付時刻データの秒数	aDatetime.second
文字列を水色でプリントする	print(f'\033[36m{value}\033[0m')
ライムグリーン色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='limegreen')
折れ線グラフに赤いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='r')
棒グラフの色をレモンシフォンにする	plt.bar(データ列x, データ列y, color='lemonchiffon')
散布図をコーラル色で描画する	plt.scatter(データ列x, データ列y, color='coral')
ミッドナイトブルー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='midnightblue')
カラーバーを横向きで付ける	plt.colorbar(orientation='horizontal')
棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
リストと配列についての散布図に四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s')
レモンシフォン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='lemonchiffon')
ラベンダー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lavender')
ファイルパスをバイナリ書き込みモードでオープンして]、fとする	f = open(filepath, mode='wb')
クリムゾン色のヒストグラムを描画する	plt.hist(データ列, color='crimson')
データ列の中にある文字列と日付データの数を求める	ds.isin([value, value2]).sum()
印字できる文字を全部使う	string.printable
三つの数値を順にプリントする	print(value, value2, value3)
option: ミスティローズにグラフの色を設定する	color = 'mistyrose'
ファイルからバイナリストリームをオープンして]、fとする	f = open(filepath, mode='rb')
実数のハイパボリック・サインの逆数	math.asinh(x)
両端キューが空でないかどうか調べる	len(deq) != 0
両端キューの中に値が含まれてるか調べる	element in deq
線グラフの色をモカシンに指定する	plt.plot(データ列x, データ列y, color='moccasin')
ファイルの入力ストリームを見る	open(filepath)
有理数を使う	import fractions
日付時刻データををn日後に進める	aDatetime + datetime.timedelta(days=n)
option: アクアマリン色を用いる	color = 'aquamarine'
データフレームから指定された列のみ抽出する	df[[column]]
表データの指定された列を配列として選択する	df[column].values
文字列はPythonのキーワードか調べる	keyword.iskeyword(s)
散布図をスチールブルー色として描画する	plt.scatter(データ列x, データ列y, color='steelblue')
ヒストグラムの色を淡いピンク色にする	plt.hist(データ列, color='lightpink')
データフレームを列の値によってグループ化し、、個数を求める	df.groupby(column).count()
ヒストグラムをアクアマリン色で描画する	plt.hist(データ列, color='aquamarine')
列でデータフレームをグループ化して、それぞれのグループごとの最大値を求める	df.groupby(column).max()
棒グラフの色をターコイズにする	plt.bar(データ列x, データ列y, color='turquoise')
折れ線グラフのマーカーを丸にする	plt.plot(データ列x, データ列y, marker='o')
データフレームを列によってによって降順にソートする	df.sort_values(by=column, ascending=False)
線グラフをオリーブ色で描画する	plt.plot(データ列x, データ列y, color='olive')
日付時刻データとタイムスタンプデータの時間差は何秒か知る	(aDatetime - aDatetime2).total_seconds()
折れ線グラフに赤い下三角印を描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
折れ線グラフをホワイトスモーク色で描画する	plt.plot(データ列x, データ列y, color='whitesmoke')
option: グラフの色をライトブルーに変更する	color = 'lightblue'
ヒストグラムをホットピンク色として描画する	plt.hist(データ列, color='hotpink')
表データからカテゴリデータの列名一覧を使う	df.select_dtypes('object').columns
データフレームをTSVでJSONLファイルに保存する	df.to_csv(filename, sep='\t')
ファイルパスをUTF8としてオープンする]	open(filepath, encoding='utf-8')
データフレームの中にいくつがあるか数える	df.isin([value]).sum()
線グラフの色をパパイヤウィップにセットする	plt.plot(データ列x, データ列y, color='papayawhip')
線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
データフレームを関数の値によってグループ化し、要約統計量を求める	df.groupby(関数).describe()
サーモン色のヒストグラムを描画する	plt.hist(データ列, color='salmon')
ヒストグラムをダークグレー色として描画する	plt.hist(データ列, color='darkgrey')
x軸を対数に変更する	plt.xscale('log')
横棒グラフの色をミディアムアクアマリンにする	plt.barh(データ列x, データ列y, color='mediumaquamarine')
データ列の欠損値をモードで埋める	ds.fillna(ds.mode().iloc[0])
オブジェクトが名前付きタプルのインスタンスか調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
option: ホワイトスモーク色を使用する	color = 'whitesmoke'
イテラブルを縦棒グラフにする	plt.bar(ラベル列, データ列)
横棒グラフの色をサーモンにする	plt.barh(データ列x, データ列y, color='salmon')
データフレームで、列に重複があるか見る	df.duplicated(subset=column)
データフレームのリストカラムの値を正規表現patternでまとめて置き換える	df[aList].replace(pattern, repl, regex=True)
文字列をコロンを用いて区切って列挙する	s.split(':')
リストとリストについて散布図をプロットして、マーカーを右三角に設定する	plt.plot(データ列x, データ列y, marker='>')
スカイブルー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='skyblue')
双方向キューの最初に要素を追加する	deq.appendleft(element)
文字列を複数行対応としてパターンで分ける	re.split(pattern, s, flags=re.MULTILINE)
既にロードされたモジュールを列挙する	sys.modules
JSONフォーマットの文字列をデータにする	json.loads(b.decode('unicode-escape'))
散布図に下三角マーカーを加える	plt.scatter(データ列x, データ列y, marker='v')
実線としてデータ列の変化を描く	plt.plot(データ列x, データ列y, linestyle='solid')
option: フォントの色をターコイズに設定する	color = 'turquoise'
データフレームの列と列の相関行列ケンドール順位相関係数で	df[[column, column2]].corr(method='kendall')
ホットピンクにヒストグラムの色を設定する	plt.hist(データ列, color='hotpink')
リストを複製する	aList.copy()
オレンジ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orange')
散布図をrgbの下三角マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
データフレームを列ごとに分類し、、それぞれのグループの個数を求める	df.groupby(column).count()
折れ線グラフに赤い四角印を描画する	plt.plot(データ列x, データ列y, marker='s', markerfacecolor='r')
データフレームのリストカラムがどの程度、分散しているか確認する	df[aList].var()
色付きの破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='#800080')
データフレームの欠損値を中央値で補う	df.fillna(df.median())
xが-9以上、9以下か調べる	-9 <= x <= 9
デピンク色の線グラフを描画する	plt.plot(データ列x, データ列y, color='deeppink')
モカシン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='moccasin')
黒いポイントマーカーを配列と配列の散布図にプロットする	plt.plot(データ列x, データ列y, marker='.', c='k')
データ列を分割数nでビン分割する	pd.cut(ds, n)
データフレームを'A'列によってまとめたグループ	df.groupby('A')
折れ線グラフの左三角印の線幅を変更する	plt.plot(データ列x, データ列y, marker='<', markeredgewidth=2.5)
右三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='>')
option: グラフの線の種類を実線に設定する	linestyle = 'solid'
赤い点線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='r')
インディアンレッド色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='indianred')
カラムの値がNaNか調べる	ds.isna()
散布図の色をディープスカイブルーにする	plt.scatter(データ列x, データ列y, color='deepskyblue')
データフレームのリストカラムは正規分布からどの程度、歪んでいるか見る	df[aList].kurt()
数式の変数に数式を代入する	e.subs(z, e2)
ヒストグラムの色をシーグリーンに指定する	plt.hist(データ列, color='seagreen')
棒グラフをスラグレー色で描画する	plt.bar(データ列x, データ列y, color='slategray')
データフレームがどの程度、分散しているか確認する	df.var()
二つのマッピングを階層化する	collections.ChainMap(aDict, aDict2)
範囲指定してデータフレームの行を抽出する	df[start:end]
eの実数乗を求める	math.exp(x)
option: マーカーの色をライトゴールドロディイエローにする	markerfacecolor = 'lightgoldenrodyellow'
散布図に赤い左三角マーカーを使う	plt.plot(データ列x, データ列y, marker='<', c='r')
データフレームを二つの列によってまとめた表を使う	df.groupby(['A', 'B'])
横棒グラフを黄色色で描画する	plt.barh(データ列x, データ列y, color='yellow')
データフレームで、列に重複があるか確認する	df.duplicated(subset=column)
データ列の変化を色付きの一点鎖線として描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='#800080')
ヒストグラムをライトグレー色で描画する	plt.hist(データ列, color='lightgrey')
セットをイミュータブルにする	frozenset(aSet)
ヒートマップを用いてデータフレームの相関行列を描画する	sns.heatmap(df.corr())
配列を分割数nとして分割し、、namesのラベルをつける	pd.cut(aArray, n, labels=names)
タプルの最後からn番目以前の部分を得る	aTuple[:-n]
データフレームを列で昇順にソートして更新する	df.sort_values(by=column, ascending=True, inplace=True)
データ列の変化を青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
option: グラフの色をパールバイオレットレッドにする	color = 'palevioletred'
浮動小数点数のn乗の実数剰余	pow(x, n, y)
自然数の階乗を計算する	math.factorial(n)
辞書の浅いコピーを作成する	aDict.copy()
マルーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
option: コーラル色を使う	color = 'coral'
散布図をミディアムパープル色で描画する	plt.scatter(データ列x, データ列y, color='mediumpurple')
箱ひげ図にラベルを付ける	plt.boxplot([データ列, データ列], labels=['A', 'B'])
散布図をモカシン色で描画する	plt.scatter(データ列x, データ列y, color='moccasin')
線グラフをダークオレンジ色を使って描画する	plt.plot(データ列x, データ列y, color='darkorange')
option: スラグレーにグラフの色を設定する	color = 'slategray'
縦棒グラフをライム色を用いて描画する	plt.bar(データ列x, データ列y, color='lime')
数列とリストについて散布図を描画してポイントマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
赤い▲マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='r')
ゴールデンロッド色のヒストグラムを描画する	plt.hist(データ列, color='goldenrod')
文字列中に非英数字が含まれる	any(not c.isalnum() for c in s)
データ列のpercent分位数	ds.quantile(percent/100)
横棒グラフを青色を用いて描画する	plt.barh(データ列x, データ列y, color='blue')
単位正方行列	np.identity(n)
ヒストグラムの色をシルバーに設定する	plt.hist(データ列, color='silver')
データフレームのカラムの秒	df[col].dt.second
折れ線グラフをラベンダーブラッシュ色で描画する	plt.plot(データ列x, データ列y, color='lavenderblush')
option: デピンク色を使用する	color = 'deeppink'
データフレームを'A'列によってグループ化する	df.groupby('A')
データ列の値が正規分布にしたがって発生する確率を求める	scipy.stats.norm.pdf(データ列, loc=平均値, scale=標準偏差)
空列	[]
部分文字列を範囲を指定して探す	s.find(sub, start, end)
双方向キューの先頭から要素を取り除く	deq.popleft()
データフレームを列によってグループ化し、基本統計量を求める	df.groupby(column).describe()
実数の正弦	math.sin(x)
option: バツマーカーを描画する	marker = 'x'
option: インデックスを自動的な連番に変更する	index_col = None
ふたつの集合が集合と互いに素か調べる	aSet.isdisjoint(aSet2)
option: フォントの色をゴールデンロッドに指定する	color = 'goldenrod'
要素が全て1のベクトル	np.ones(要素数, dtype=np.int)
nがn2以下、または、n3以上	n <= n2 or n >= n3
部分集合か	aSet.issubset(aSet2)
データフレームを各列毎にグループ化し、、列の合計を求める	df.groupby(column)[column2].sum()
nがn2以下、もしくは、n3以上か調べる	n <= n2 or n >= n3
データフレームのリストカラムの値が欠損値か調べる	df[aList].isna()
縦棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
出力ストリームに文字列を書き込む	f.write(s)
リストとリストについての散布図に黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', c='k')
数値の変数に数値を代入する	e.subs(z, e2)
ヒストグラムをイエローグリーン色で描画する	plt.hist(データ列, color='yellowgreen')
オブジェクトから属性を消す	delattr(obj, プロパティ名)
option: マーカーの色をドジャーブルーにする	markerfacecolor = 'dodgerblue'
option: グラフの色をドジャーブルーに設定する	color = 'dodgerblue'
オーキッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='orchid')
ヒストグラムの色をダークオレンジに設定する	plt.hist(データ列, color='darkorange')
横棒グラフの色をレモンシフォンにする	plt.barh(データ列x, データ列y, color='lemonchiffon')
nをn2で割ったmod	n % n2
n2分のn	n / n2
未初期化の行列	np.empty(要素数, dtype=np.int)
ヒストグラムを二つ並べて描画する	plt.hist([データ列, データ列], color=['b', 'r'])
縦方向に2つのデータフレームを連結する	pd.concat([df, df2], axis=0)
二つのリストからマッピングを用意する	dict(zip(aList, aList2))
折れ線グラフをハニーデュー色で描画する	plt.plot(データ列x, データ列y, color='honeydew')
キューから最初の数値を削除する	deq.remove(element)
直後の値でデータ列の欠損値を埋める	ds.fillna(method='bfill')
リストと数列についての散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
青い点線としてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
Pandasで、書式fmtを用いて文字列を日付データに変換する	pd.to_datetime(s, format=fmt)
L1ノルムとして正則化を行う	"sklearn.preprocessing.Normalizer(norm=""l1"").fit_transform(データ)"
青緑色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='turquoise')
データフレームの空文字を欠損値に変換し、ドロップする	df.replace('', np.nan).dropna()
イテラブルのコンビネーション	itertools.combinations(iterable, n)
二つのカウンタのいずれかに含まれる値	aCounter | aCounter2
グラフの中の縦軸にラベルを付ける	plt.ylabel('y軸ラベル')
文字列の中で複数行対応として正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.MULTILINE)
散布図をrgbの菱形マーカーを使って描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
２つの文字列は同じでないか調べる	s != s2
縦棒グラフをミッドナイトブルー色で描画する	plt.bar(データ列x, データ列y, color='midnightblue')
パールバイオレットレッド色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='palevioletred')
option: フォントの色をダークシアグリーンに指定する	color = 'darkseagreen'
データフレームから型リストデータ型の列を抽出する	df.select_dtypes(include=typeList)
文字列は全て数値	s.isnumeric()
折れ線グラフをライトグレー色で描画する	plt.plot(データ列x, データ列y, color='lightgrey')
散布図を茶色色で描画する	plt.scatter(データ列x, データ列y, color='brown')
棒グラフの色をパープルにする	plt.bar(データ列x, データ列y, color='purple')
データフレームを各カラム毎にグループ化して、列の最小値を求める	df.groupby(column)[column2].min()
グラフの用途を論文に指定する	sns.set(context='paper')
散布図をrgbのポイントマーカーとして描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データ列をインポートする	import pandas as pd
文字列全体が正規表現にASCII限定としてマッチするか確認する	re.fullmatch(pattern, s, flags=re.ASCI)
符号なし８ビット整数型のゼロ埋めされた配列	np.zeros(要素数, dtype=np.uint8)
枠なしの凡例を入れる	plt.legend(frameon=False)
整数のn乗して浮動小数点数による余り	pow(x, n, y)
データフレームのカラムの中にある日付データと日付データの合計を数える	df[col].isin([value, value2]).sum()
文字列の接頭辞が部分文字列かどうか	s.startswith(sub)
散布図の星マーカーの太さを変える	plt.scatter(データ列x, データ列y, marker='*', markeredgewidth=2.5)
ヒストグラムをネイビー色で描画する	plt.hist(データ列, color='navy')
ヒストグラムでデータ列を可視化する	plt.hist(データ列)
グラフに水平方向の破線をつける	plt.axhline(y=0, linestyle='dashed')
フローラルホワイト色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='floralwhite')
折れ線グラフに青い星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*', markerfacecolor='b')
データフレームの列がリストに含まれるデータを抽出する	df[df[column].isin(aList)]
プロットの縦横を設定する	plt.figure(figsize=(横幅, 高さ))
折れ線グラフの星マーカーの大きさを指定する	plt.plot(データ列x, データ列y, marker='*', markersize=2.0)
実数の双曲線正接	math.tanh(x)
option: グラフを実線に設定する	linestyle = 'solid'
リストをn個にビン分割して、namesのラベルをつける	pd.cut(aList, n, labels=names)
列をキーとして２つのデータフレームを全結合する	pd.merge(df, df2, on=column, how='outer')
データフレームから型リストで指定されたデータ型の列を抽出する	df.select_dtypes(include=typeList)
option: フォントの色をピンクに変更する	color = 'pink'
見やすいグラフを描画する準備をする	import seaborn as sns
茶色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='brown')
棒グラフの色をミディアムパープルにする	plt.bar(データ列x, データ列y, color='mediumpurple')
青い一点鎖線を用いてデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
ケンドール順位相関係数でデータフレームのリストで指定されたカラムの相関行列を求める	df[aList].corr(method='kendall')
表を各列と列の組み合わせ毎に集約して、最小値を計算する	df.groupby([column, column2], as_index=False).min()
option: 茶色色を使用する	color = 'brown'
データフレームを表示するとき、カラムの最大幅をnに設定する	pd.set_option('max_colwidth', n)
データフレームを表示するとき、折り返しをしないようにする	pd.set_option('expand_frame_repr', False)
赤色の散布図を描画する	plt.scatter(データ列x, データ列y, color='red')
ヒストグラムの色をホワイトスモークに設定する	plt.hist(データ列, color='whitesmoke')
赤いバツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x', c='r')
ライム色で線グラフを描画する	plt.plot(データ列x, データ列y, color='lime')
折れ線グラフをライトグリーン色として描画する	plt.plot(データ列x, データ列y, color='lightgreen')
縦棒グラフをパープル色として描画する	plt.bar(データ列x, データ列y, color='purple')
日付時刻データにn秒分、加算する	aDatetime + datetime.timedelta(seconds=n)
文字列を太字でプリントできる文字列に変換する	f'\033[1m{value}\033[0m'
文字列中にひとつでも非数字があるか調べる	any(not c.isdigit() for c in s)
数列を縦軸、リストをx座標として、大きさnの散布図を描画する	plt.scatter(データ列x, データ列y, s=n)
ヒストグラムの色をアリスブルーに設定する	plt.hist(データ列, color='aliceblue')
カウンタの最頻出な文字列	aCounter.most_common()[0]
リストの文字列が最初に見つかる場所を使う	aList.index(element)
データフレームを各列毎にグループ化して、列の個数を計算する	df.groupby(column)[column2].count()
ライム色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
散布図の色を茶色にする	plt.scatter(データ列x, データ列y, color='brown')
ヒストグラムをライトゴールドロディイエロー色を使って描画する	plt.hist(データ列, color='lightgoldenrodyellow')
グラフをPNGファイルとして保存する	plt.savefig('foo.png')
ヒストグラムをアンティークホワイト色で描画する	plt.hist(データ列, color='antiquewhite')
データ列間の平方根平均二乗誤差を求める	np.sqrt(sklearn.metrics.mean_squared_error(データ列, データ列2))
折れ線グラフの色をダークマゼンタに設定する	plt.plot(データ列x, データ列y, color='darkmagenta')
データフレームの列の中にある文字列の合計を数える	df[col].isin([value]).sum()
ファイルを全部、読み込む	f.read()
横棒グラフをプラム色を用いて描画する	plt.barh(データ列x, データ列y, color='plum')
文字列を空白によって区切る	s.split()
線グラフを赤い一点鎖線で描く	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
線グラフをミディアムオーキッド色を用いて描画する	plt.plot(データ列x, データ列y, color='mediumorchid')
ミディアムターコイズ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumturquoise')
option: マーカーの色をライトスカイブルーにする	markerfacecolor = 'lightskyblue'
方程式として数式の変数の解を計算する	sympy.solve(e, z)
文字列を緑色化する	f'\033[32m{value}\033[0m'
データフレームの列を四捨五入して、整数型にする	df[col].round().astype(int)
折れ線グラフを青色で描画する	plt.plot(データ列x, データ列y, color='blue')
折れ線グラフをミディアムアクアマリン色で描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
折れ線グラフを青い点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
コーンズシルク色のヒストグラムを描画する	plt.hist(データ列, color='cornsilk')
データフレームから重複を残さず、削除する	df.drop_duplicates(keep=False)
折れ線グラフのクロス印を黒色にする	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
2を底とする小数点数の対数を求める	math.log2(x)
散布図の色をデピンクにする	plt.scatter(データ列x, データ列y, color='deeppink')
白色のヒストグラムを描画する	plt.hist(データ列, color='white')
データフレームを各列毎にグループ化し、、文字列という名前のグループを使う	df.groupby(column).get_group(s)
データフレームの列が文字列で始まるデータを抽出する	df[df[column].str.startswith(s)]
勾配ブースティングを用いてクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
ダークスラテグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
数列とデータ列についての散布図に黒いバツマーカーをプロットする	plt.plot(データ列x, データ列y, marker='x', c='k')
データフレームを散布図で可視化してカテゴリごとに色を変える	sns.scatterplot(data=df, x='列名', y='列名', hue='カテゴリ列')
グラフを明るくする	sns.set(pallete='bright')
リストをn個にビン分割し、namesのラベルをつける	pd.cut(aList, n, labels=names)
year年の日付	datetime.date(year=year, month=1, day=1)
データフレームの二つのカラムを並べて箱ひげ図として作図する	plt.boxplot([df['カラム'], df['カラム']])
データフレームを二つの列によって昇順に並べ直す	df.sort_values(by=['A', 'B'], ascending=True)
option: マーカーの色をパープルにする	markerfacecolor = 'purple'
目盛り線	plt.grid(linestyle='--')
データフレームの尖度を算出する	df.skew()
文字列の開始位置番目と終了位置番目の間に部分文字列が含まれない	s.find(sub, start, end) == -1
日付データの曜日を整数で使う	aDate.weekday()
1で全要素を初期化した行列	np.ones(行数, 列数, dtype=np.int)
n2行n列の2次元リスト	[[0] * n for _ in range(n2)]
文字列をシンボルにして、変数にする	z = sympy.Symbol(s)
タプル内の要素が少なくともひとつ真か調べる	any(aTuple)
インプレイスでデータフレームのn行目を削除する	df.drop(n, axis=0, inplace=True)
自然数個のものからk個取り出した時の並べ方	math.perm(n, k)
数式を簡略にする	sympy.sympify(e)
名前付きタプルを辞書に変換する	aNamedTupleObject._asdict()
アイボリー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='ivory')
文字列からformatのパターンで日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
要素ひとつのりスト	[element]
option: グラフの色を暗い赤に指定する	color = 'darkred'
option: ポイントマーカーを使う	marker = '.'
日付時刻データが火曜日か判定する	aDatetime.weekday() == 1
カウンタの項目の出現回数	aCounter[element]
破線グラフを描く	plt.plot(データ列x, データ列y, linestyle='dashed')
タプルの先頭を求める	aTuple[0]
横棒グラフをゴールド色を使って描画する	plt.barh(データ列x, データ列y, color='gold')
ライトコーラル色のヒストグラムを描画する	plt.hist(データ列, color='lightcoral')
棒グラフをサーモン色で描画する	plt.bar(データ列x, データ列y, color='salmon')
データフレームの列の欠損値を平均値にセットする	df[col].fillna(df[col].mean())
文字列が片仮名か調べる	('ァ' <= ch <= 'ン')
イテラブルと配列についての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
折れ線グラフの色をロイヤルブルーにセットする	plt.plot(データ列x, データ列y, color='royalblue')
貝殻色のヒストグラムを描画する	plt.hist(データ列, color='seashell')
文字列の示すエンコーディングとしてファイルパスを書き込み用に開く]	open(filepath, mode='w', encoding=s)
option: 色をやわらかい青に設定する	color = 'cornflowerblue'
2数の最小値を計算する	min(x, y)
棒グラフをオリーブ色として描画する	plt.bar(データ列x, データ列y, color='olive')
折れ線グラフの色をピーチパフに変更する	plt.plot(データ列x, データ列y, color='peachpuff')
文字列の先頭でASCII限定としてパターンにマッチさせる	re.match(pattern, s, flags=re.ASCI)
option: マーカーの色をアンティークホワイトにする	markerfacecolor = 'antiquewhite'
option: フォントの色をダーク・スラテグレーに変更する	color = 'darkslategrey'
グラフの用途を画面に指定する	sns.set(context='notebook')
データフレームをCSVファイルから読み込む	pd.read_csv(filename, sep=',')
データフレームを'A'列によって昇順にソートする	df.sort_values(by='A', ascending=True)
折れ線グラフの色をディープスカイブルーに設定する	plt.plot(データ列x, データ列y, color='deepskyblue')
データフレームを配列に変換する	df.values
オブジェクトはバイト列クラスのインスタンスか調べる	isinstance(obj, bytes)
データフレームを列によってソートして、インデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
数が整数かどうか調べる	x.is_integer()
option: ダークバイオレット色を使う	color = 'darkviolet'
データフレームの内で、列と列の重複を確認する	df.duplicated(subset=[column, column2])
クラス分類をガウス過程で行う	model = sklearn.gaussian_process.GaussianProcessClassifier()
ふたつのマッピングをマージする	aDict | aDict2
リストの中の最も小さい値を計算する	min(aList)
データフレームを各列毎にグループ化して列の標準偏差を算出する	df.groupby(column)[column2].std()
y座標だけ目盛り線	plt.grid(axis='y')
三自然数のLCM	math.lcm(n, n2, n3)
文字列中の部分文字列の出現回数をカウントする	s.count(sub)
折れ線グラフのマーカーを上三角にする	plt.plot(データ列x, データ列y, marker='^')
文字列の先頭で複数行対応として正規表現にマッチさせる	re.match(pattern, s, flags=re.MULTILINE)
option: ライトイエロー色を使う	color = 'lightyellow'
option: 左三角マーカーを描画する	marker = '<'
赤い折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='r')
リストと配列の散布図に下三角マーカーを描く	plt.plot(データ列x, データ列y, marker='v')
値がセットのメンバーでないか確認する	element not in aSet
等量でビン数nで列をビン分割する	pd.qcut(ds, n)
カラーパレットを濃くする	sns.set(pallete='deep')
集合の全ての要素が別の集合に含まれるか調べる	aSet.issubset(aSet2)
浮動小数点数を複素数に変換する	complex(x)
データフレームのリストカラムのNaNを平均値に設定する	df[aList].fillna(df[aList].mean())
nがn2か判定する	n == n2
日付データをn週間前に戻す	aDate - datetime.timedelta(weeks=n)
リストから配列を作る	np.array(aList)
プロットのx軸を対数目盛に変更する	plt.xscale('log')
フローラルホワイト色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='floralwhite')
横棒グラフの色をアンティークホワイトにする	plt.barh(データ列x, データ列y, color='antiquewhite')
変数を緑色化する	f'\033[32m{value}\033[0m'
既存のファイルを文字コードtextで追加できるようにオープンする]	open(filepath, mode='a', encoding=text)
カーキ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='khaki')
option: グラフの色をスレートブルーにセットする	color = 'slateblue'
線グラフの色を紺碧に指定する	plt.plot(データ列x, データ列y, color='azure')
グラフにy=0の実線を設定する	plt.axhline(y=0, linestyle='solid')
ファイルを文字コードtextを使ってオープンする]	open(filepath, encoding=text)
文字列が部分文字列で終わるか調べる	s.endswith(sub)
折れ線グラフをオーキッド色として描画する	plt.plot(データ列x, データ列y, color='orchid')
項目名がタプルに存在しない時、要素を追加する	aDict.setdefault(key, element)
データフレームのリストカラムのNaNを平均値で補う	df[aList].fillna(df[aList].mean())
option: ラベンダーブラッシュ色を使う	color = 'lavenderblush'
変数が0に近づく時の数式の極限値を算出する	sympy.limit(e, z, 0)
丸マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='o')
データフレームからカラムを二つ選択する	df[[column, column2]]
全要素を０で初期化したブール型の行列	np.zeros(行数, 列数, dtype=np.int32)
数列とデータ列について散布図を描画して、バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
文字列中の文字を列挙する	list(s)
ミディアムスレートブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumslateblue')
コマンドの第２引数	sys.argv[1]
折れ線グラフの色をオレンジに設定する	plt.plot(データ列x, データ列y, color='orange')
rgbの△マーカーを散布図に用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
スタックをリストにする	list(deq)
正規表現に文字列全体を大文字・小文字を無視してマッチさせる	re.fullmatch(pattern, s, flags=re.IGNORECASE)
ファイルパスをBOM付きを用いて書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
ランタイムの再帰の最大回数	sys.getrecursionlimit()
要素ひとつのタプル	(element,)
文字列がいつまでも繰り返すイテラブル	itertools.repeat(element)
文字列を最後の部分文字列で二分し、前半の文字列を使う	s.rpartition(sub)[0]
主成分分析を使って濃く次元に削減する	sklearn.decomposition.PCA(n_components=二).fit_transform(多次元データ)
日付時刻データは何分か知る	aDatetime.minute
ダーク・スラテグレー色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
データフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column])
散布図の左三角マーカーを黒くする	plt.scatter(データ列x, データ列y, marker='<', markerfacecolor='k')
リストとイテラブルについて散布図を描画し、、ダイアモンドマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
配列としてデータフレームの指定された列を取り出す	df[column].values
文字列を最初の部分文字列で分けた時の前半の文字列	s.partition(sub)[0]
棒グラフの色をミディアムシアグリーンにする	plt.bar(データ列x, データ列y, color='mediumseagreen')
バイアスなしの重回帰分析を行う	model = sklearn.linear_model.LinearRegression(fit_intercept=False)
多次元尺度構成法で多次元データを淡く次元に次元削減する	sklearn.manifold.MSD(n_components=三).fit_transform(多次元データ)
折れ線グラフの色をオレンジレッドに変更する	plt.plot(データ列x, データ列y, color='orangered')
シスル色の線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
両端キューの最大長を使う	deq.maxlen
リストとリストの散布図にバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x')
option: ポイント印を用いる	marker = '.'
列によってデータフレームを降順に破壊的にソートする	df.sort_values(by=column, ascending=False, inplace=True)
option: 文字コードtextを使う	encoding = text
日付データをISO書式の文字列にする	aDate.isoformat()
option: エラーを無視するようにセットする	errors = 'ignore'
棒グラフの色をロイヤルブルーにする	plt.bar(データ列x, データ列y, color='royalblue')
データフレームの数値をまとめて丸める	df.round()
カウンタの上位を列挙する	aCounter.most_common(k)
データフレームの行と列を入れ替える	df.T
フォーマットとしてデータ列をPandasの日付型にする	pd.to_datetime(ds, format='%Y-%m-%d')
黒い左三角マーカーをリストとイテラブルの散布図に描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
散布図のマーカーを右三角にする	plt.scatter(データ列x, データ列y, marker='>')
1行分標準入力から読み込んで改行を取り除く	sys.stdin.readline().rstrip()
横棒グラフの色をローングリーンにする	plt.barh(データ列x, データ列y, color='lawngreen')
要素が集合に含まれるかどうか調べる	element in aSet
全ての句点文字	string.punctuation
option: シスルを使用する	color = 'thistle'
データ列の中に文字列と文字列があるか確認する	ds.isin([value, value2])
nがn2で割り切れるか確認する	n % n2 == 0
折れ線グラフの色をカーキに設定する	plt.plot(データ列x, データ列y, color='khaki')
棒グラフをベージュ色として描画する	plt.bar(データ列x, データ列y, color='beige')
タイムスタンプデータの月	aDatetime.month
ヒストグラムの色を白に指定する	plt.hist(データ列, color='white')
折れ線グラフをハニーデュー色として描画する	plt.plot(データ列x, データ列y, color='honeydew')
ミスティローズ色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
両端キューの先頭から値を取り除く	deq.popleft()
二つの変数を同じ値にする	x = y = n
option: マーカーをダイアモンドに変更する	marker = 'D'
year年day月の日付時刻	datetime.datetime(year=year, month=month, day=1)
横棒グラフをレベッカパープル色で描画する	plt.barh(データ列x, データ列y, color='rebeccapurple')
option: 改行コードをWindowsに設定する	newline = '\r\n'
オブジェクトのメモリビュー	memoryview(obj)
折れ線グラフをディムグレー色で描画する	plt.plot(データ列x, データ列y, color='dimgrey')
折れ線グラフの色をミディアムオーキッドにする	plt.plot(データ列x, データ列y, color='mediumorchid')
リストの末尾	aList[-1]
option: バイナリモードを使う	mode = 'rb'
逆順のキューを使う	reversed(deq)
ダークスラテグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslategray')
ロバスト推定としてクラス分類をする	model = sklearn.linear_model.RANSACClassifier(random_state=0)
インディアンレッド色で線グラフを描画する	plt.plot(データ列x, データ列y, color='indianred')
データ列とデータ列の散布図に黒い右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c='k')
ファイルパスを文字コードtextでオープンする]	open(filepath, encoding=text)
リストとリストについての散布図にrgbのポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.', c=rgb)
データフレームを複数の列を用いてソートして、更新する	df.sort_values(by=column, inplace=True)
ふたつの関係がスーパーセットもしくは等しいか調べる	aSet > aSet2
列にシーケンスを続ける	itertools.chain(iterable, iterable2)
データフレームがどれだけ、分散しているか調べる	df.var()
データフレームの列を削除して更新する	df.drop(column, axis=1, inplace=True)
青色のヒストグラムを描画する	plt.hist(データ列, color='blue')
折れ線グラフをパパイヤウィップ色を使って描画する	plt.plot(データ列x, データ列y, color='papayawhip')
データ列を1000の位で丸めて整数にする	ds.round(-3).astype(int)
ヒストグラムの色をダークグレーに設定する	plt.hist(データ列, color='darkgray')
option: ピーチパフにグラフの色を設定する	color = 'peachpuff'
データフレームを各列と列の組み合わせ毎にグループ分けして、最小値を求める	df.groupby([column, column2], as_index=False).min()
文字列の開始位置から終了位置の範囲で部分文字列の登場	s.count(sub, start, end)
リストの文字列が最初に見つかるインデックス	aList.index(element)
グリッドを点線にする	plt.grid(linestyle='dotted')
バイオリン図を描く	sns.violinplot(x='カテゴリ列', y='列', data=df)
日付時刻データをn分前に戻す	aDatetime - datetime.timedelta(minutes=n)
線グラフの色を青緑に指定する	plt.plot(データ列x, データ列y, color='teal')
散布図を茶色色を用いて描画する	plt.scatter(データ列x, データ列y, color='brown')
２つの文字列をスラッシュで区切ってプリントする	print(value, value2, sep='/')
棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
option: 色をライトスレイグレーに設定する	color = 'lightslategray'
ヒストグラムのスタイルを点線に設定する	plt.hist(データ列, linestyle='dotted')
シアン色を用いて線グラフを描画する	plt.plot(データ列x, データ列y, color='cyan')
option: セパレータをスラッシュにする	sep = '/'
option: 読み込みモードを使う	mode = 'r'
データフレームの列がxより少ない行を選択する	df[df[column] < x]
option: ミディアムアクアマリン色を使用する	color = 'mediumaquamarine'
ヒストグラムの色をグレーに設定する	plt.hist(データ列, color='grey')
横棒グラフをローングリーン色として描画する	plt.barh(データ列x, データ列y, color='lawngreen')
nをn2で結果の切り上げ	(n + n2 - 1) // n2
データフレームの文字列をNaNにする	df.replace(s, np.nan)
今日の月を求める	datetime.datetime.today().month
option: ダーク・スラテグレーを使う	color = 'darkslategrey'
データフレームの中で何行、重複するか見る	df.duplicated().sum()
散布図の星マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='*', markersize=2.0)
折れ線グラフをライトスチールブルー色として描画する	plt.plot(データ列x, データ列y, color='lightsteelblue')
カウンタの値一覧	aCounter.keys()
option: バリーウッドに色を変更する	color = 'burlywood'
折れ線グラフをダークオレンジ色で描画する	plt.plot(データ列x, データ列y, color='darkorange')
二数の最大値を計算する	max(x, y)
ダークグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgrey')
ファイルがないか調べる	not os.path.exists(filepath)
データ列の折れ線グラフを描いて、ラベル付けする	plt.plot(データ列x, データ列y, label='ラベル')
イテラブルとデータ列について散布図を描いて、左三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
横軸の目盛に文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
データフレームを列によってまとめた表を使う	df.groupby(column)
文字列を部分文字列で分けたときの後半の文字列	s.partition(sub)[-1]
2つのデータフレームをジョインする	pd.merge(df, df2)
配列の合計値	np.sum(aArray)
配列と配列について散布図を描画してマーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
青色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='blue')
両端キューの末尾	deq[-1]
ライトブルー色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightblue')
ダークターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkturquoise')
辞書から多重集合を作る	collections.Counter(aDict)
ファイルパスを文字コードtextで書き込みできるようにオープンする]	open(filepath, mode='w', encoding=text)
option: ピーチパフ色を使う	color = 'peachpuff'
青い下三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='b')
横棒グラフをミディアムターコイズ色として描画する	plt.barh(データ列x, データ列y, color='mediumturquoise')
option: グラフの色をティールに設定する	color = 'teal'
データフレームの列の文字列をNaNに変換する	df[col].replace(s, np.nan)
データフレームを使用する	import pandas as pd
データフレームをグループ化し、それぞれの列に対し最小値を算出する	df.groupby(column)[column2].min()
散布図をコーラル色として描画する	plt.scatter(データ列x, データ列y, color='coral')
散布図をダークオレンジ色で描画する	plt.scatter(データ列x, データ列y, color='darkorange')
最大長nの両端キューを作成する	collections.deque(maxlen=n)
両端キューの末尾にイテラブルの要素を追加する	deq.extend(iterable)
実行時の標準出力の出力先がターミナルか	sys.stdout.isatty()
赤い四角マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='s', c='r')
データフレームからカテゴリデータの列名を列挙する	df.select_dtypes('object').columns
ヒストグラムの色を茶色に設定する	plt.hist(データ列, color='brown')
棒グラフを淡いピンク色色で描画する	plt.bar(データ列x, データ列y, color='lightpink')
option: ミディアムアクアマリン色を使う	color = 'mediumaquamarine'
棒グラフをミディアムバイオレットレッド色を使って描画する	plt.bar(データ列x, データ列y, color='mediumvioletred')
各列毎に表をグループ化して、列の分散を求める	df.groupby(column)[column2].var()
日付を使用する	import datetime
列を整数に丸める	ds.round()
文字列内にひとつでも空白がある	any(c.isspace() for c in s)
棒グラフの色をチョコレートにする	plt.bar(データ列x, データ列y, color='chocolate')
黒い△マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c='k')
option: ペールグリーン色を使う	color = 'palegreen'
リストを等量で分割数nで分割する	pd.qcut(aList, n)
事前にASCII限定としてパターンをコンパイルする	re.compile(pattern, flag=re.ASCI)
両端キューの先頭に要素を付け加える	deq.appendleft(element)
折れ線グラフをミディアムスレートブルー色で描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
３つ並べてデータ列をヒストグラムにする	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
勾配ブースティングでクラス分類を行う	model = sklearn.ensemble.GradientBoostingClassifier()
文字列を文字リストに変換する	list(s)
ヒストグラムの色を紺碧に設定する	plt.hist(データ列, color='azure')
浮動小数点数の正弦を計算する	math.sin(x)
データフレームを各列と列の組み合わせ毎にグループ化して、最大値を求める	df.groupby([column, column2], as_index=False).max()
日付時刻データが金曜日か調べる	aDatetime.weekday() == 4
option: 青を使う	color = 'blue'
折れ線グラフのダイアモンドマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='D', markeredgewidth=2.5)
文字列がリストに含まれないかどうか判定する	element not in aList
二つの辞書をネストする	collections.ChainMap(aDict, aDict2)
文字列の先頭で正規表現に大文字・小文字を無視してマッチするか確認する	re.match(pattern, s, flags=re.IGNORECASE)
変数が0に近づく時の数式の極限値を求める	sympy.limit(e, z, 0)
線グラフをパールゴールデンロッド色で描画する	plt.plot(データ列x, データ列y, color='palegoldenrod')
スタックをポップする	deq.pop()
グラフをスライド用にする	sns.set(context='talk')
辞書順で文字列が文字列より後かどうか調べる	s > s2
大量のデータ列が正規分布に従うか仮説検定する	scipy.stats.kstest(データ列, 'norm')
データフレームのカラムが何分か調べる	df[col].dt.minute
option: グラフの色をイエローグリーンに変更する	color = 'yellowgreen'
option: データ型として８ビット整数型を用いる	dtype = np.int8
データフレームを複数の列で降順に破壊的に並べる	df.sort_values(by=column, ascending=False, inplace=True)
プロットに鉛直方向の点線をつける	plt.axvline(x=0, linestyle='dotted')
要素が集合のメンバーでないか調べる	element not in aSet
実線の折れ線グラフを描く	plt.plot(データ列x, データ列y, linestyle='solid')
散布図を赤い大バツマーカーを用いてプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
配列とリストの散布図を描画して、マーカーを左三角にする	plt.plot(データ列x, データ列y, marker='<')
rgbの星マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='*', c=rgb)
グラフの色を色差別なくする	sns.set(pallete='colorblind')
散布図をライトスレイグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightslategrey')
ミディアムシアグリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
散布図に▲マーカーを使用する	plt.plot(データ列x, データ列y, marker='^')
nをn2で割った結果の切り上げ	(n + n2 - 1) // n2
横棒グラフの色をカーキにする	plt.barh(データ列x, データ列y, color='khaki')
ライトイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightyellow')
データフレームの列を度数分布図で描画する	plt.hist(df[column])
データフレームのリストカラムの中の欠損値の合計を数える	df[aList].isna().sum()
スプリンググリーンにヒストグラムの色を設定する	plt.hist(データ列, color='springgreen')
折れ線グラフに黒い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
データフレームの中にいくつNaNが存在するか数える	df.isna().sum()
データフレームの未入力値を最大値にする	df.fillna(df.max())
実数のハイパボリック・サインを求める	math.sinh(x)
nではない	not n
既存のファイルパスをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
インタプリタの実行ファイルの絶対パス	sys.executable
データフレームの欠損値をxに設定する	df.fillna(x)
ホットピンク色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='hotpink')
散布図の色をライムにする	plt.scatter(データ列x, データ列y, color='lime')
ファイルをBOM付きで書き込み用にオープンする]	open(filepath, mode='w', encoding='utf_8_sig')
データフレームのそれぞれのグループ毎の分散	df.groupby(column).var()
パウダーブルー色を用いてヒストグラムを描画する	plt.hist(データ列, color='powderblue')
option: グラフの色をライトグレーに設定する	color = 'lightgray'
縦軸の最大・最小を変更する	plt.ylim(最小値, 最大値)
空白で文字列を分割して、文字列リストに変換する	s.split()
ダークグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgrey')
折れ線グラフをパープル色で描画する	plt.plot(データ列x, データ列y, color='purple')
n進文字列をbytesizeバイトのバイナリに変換する	int(s, n).to_bytes(length=bytesize, byteorder='big')
2つのカウンタの共通する値	aCounter & aCounter2
ファイルが存在しないか調べる	not os.path.exists(filepath)
縦棒グラフをシエナ色で描画する	plt.bar(データ列x, データ列y, color='sienna')
文字列中にひとつでも非数字があるか	any(not c.isdigit() for c in s)
ヒストグラムの色をレモンシフォンに変更する	plt.hist(データ列, color='lemonchiffon')
散布図に黒い上三角印を描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
グラフのx座標にラベルを付ける	plt.xlabel('x軸ラベル')
option: ダークバイオレット色を用いる	color = 'darkviolet'
折れ線グラフの色をダークゴールデンロッドに変更する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
日付時刻データが土曜日	aDatetime.weekday() == 5
プラットホームのエンコーディング	sys.getdefaultencoding()
option: グラフの色をパールゴールデンロッドにする	color = 'palegoldenrod'
文字列の右側から改行を除く	s.rstrip('\n')
イテラブルを計数器に変換する	collections.Counter(iterable)
全ての空白文字	string.whitespace
文字列の左側から部分文字列を見つける	s.find(sub)
ヒストグラムを破線を使って描画する	plt.hist(データ列, linestyle='dashed')
形式としてJSONLファイルにデータフレームを書き込む	df.to_excel(filename)
グレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='grey')
CSVファイルファイル名がか調べる	filename.endswith('.csv')
代数計算モジュールを使う	import sympy
二つのオブジェクトが同一参照かどうか調べる	obj is obj2
数値のパラメータに数値を代入する	e.subs(z, e2)
縦棒グラフをゴーストホワイト色として描画する	plt.bar(データ列x, データ列y, color='ghostwhite')
ライトスレイグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
ヒストグラムの色をダークシアンに変更する	plt.hist(データ列, color='darkcyan')
データフレームの列を文字列にリネームする	df.rename(columns={column: name})
縦棒グラフをペルー色で描画する	plt.bar(データ列x, データ列y, color='peru')
タプル中の要素が少なくともひとつ真か	any(aTuple)
文字列を緑色でプリントする	print(f'\033[32m{value}\033[0m')
データフレームのリストカラムの中にいくつ欠損値があるか数える	df[aList].isna().sum()
シーケンスの各要素を関数でフィルタする	filter(func, iterable)
赤い下三角マーカーとして散布図をプロットする	plt.plot(データ列x, データ列y, marker='v', c='r')
線グラフの色をミントクリームに変更する	plt.plot(データ列x, データ列y, color='mintcream')
整数nを十六進数表現に変換する	hex(n)
両端キューから指定した範囲を取り出す	collections.deque(itertools.islice(deq, start, end))
文字列の大文字と小文字を交換する	s.swapcase()
ロバスト回帰モデルを作る	model = sklearn.linear_model.RANSACRegressor(random_state=0)
散布図をフォレストグリーン色で描画する	plt.scatter(データ列x, データ列y, color='forestgreen')
カラムの欠損値を直後の値で置換する	ds.fillna(method='bfill')
２つのデータフレームを異なる列をキーとして内部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='inner')
データフレームのリストカラムの欠損値を最小値に設定する	df[aList].fillna(df[aList].min())
プラム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='plum')
データ列の欠損値を直後の値に設定する	ds.fillna(method='bfill')
組の要素を昇順に並べ変える	sorted(aTuple, reverse=False)
白色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='white')
ライトコーラルにヒストグラムの色を設定する	plt.hist(データ列, color='lightcoral')
イテラブルの各要素を関数でフィルタする	filter(func, iterable)
データフレームの中のNaNを取り除く	df.dropna()
フォーマットを用いてデータフレームのcollを日付データにする	pd.to_datetime(df[col], format='%Y-%m-%d')
ガウス過程分類モデルを用意する	model = sklearn.gaussian_process.GaussianProcessClassifier()
日付時刻データからn週間を減算する	aDatetime - datetime.timedelta(weeks=n)
option: マーカーを丸に変更する	marker = 'o'
マルーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='maroon')
棒グラフの色をミディアムオーキッドにする	plt.bar(データ列x, データ列y, color='mediumorchid')
ライトサーモン色のヒストグラムを描画する	plt.hist(データ列, color='lightsalmon')
線グラフの線の種類を実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
折れ線グラフをミディアムスレートブルー色として描画する	plt.plot(データ列x, データ列y, color='mediumslateblue')
集合が空かどうか	len(aSet) == 0
プログラムをエラーとして終了する	sys.exit(1)
平均値でデータフレームのリストカラムの欠損値を補う	df[aList].fillna(df[aList].mean())
option: パールゴールデンロッド色を使う	color = 'palegoldenrod'
シエナ色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
破線でヒストグラムをプロットする	plt.hist(データ列, linestyle='dashed')
文字列がタプルに含まれるか調べる	element in aTuple
データフレームの値をValueMapで置き換える	df.replace(ValueMap)
棒グラフをフォレストグリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='forestgreen')
option: ダークマゼンタを使う	color = 'darkmagenta'
nとn2の積を求める	n * n2
データフレームを表示するとき、小数点以下の表示精度をn桁に変更する	pd.set_option('precision', n)
グラフのカラーパレットを淡くする	sns.set(pallete='muted')
データフレームを'A'列によって小さい順に破壊的に並べ直す	df.sort_values(by='A', ascending=True, inplace=True)
グリッド線を白くする	plt.grid(color='w')
ファイルをUTF8でオープンする]	open(filepath, encoding='utf-8')
棒グラフの色をダークスラテグレーにする	plt.bar(データ列x, データ列y, color='darkslategray')
Pandasでデータフレームのカラムを日付データに変換しデータフレームのインデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
option: 印を四角に変更する	marker = 's'
文字列の大文字と小文字を入れ替える	s.swapcase()
データフレームをエクセルデータファイルでJSONLファイルに保存する	df.to_excel(filename)
リストをn回、連結する	aList * n
ライトサーモン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightsalmon')
option: 菱形マーカーを描画する	marker = 'D'
ヒストグラムをダークグレー色を用いて描画する	plt.hist(データ列, color='darkgrey')
実数の逆双曲線余弦	math.acosh(x)
折れ線グラフに黒いクロスマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
折れ線グラフをリネン色で描画する	plt.plot(データ列x, データ列y, color='linen')
ロバスト分類器を準備する	model = sklearn.linear_model.RANSACClassifier(random_state=0)
2進文字列を整数に変換する	int(s, 2)
異なるカラムをキーにして2つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
2つの文字列を順にプリントする	print(value, value2)
散布図をダークターコイズ色として描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
プロットをプレゼン用に設定する	sns.set(context='talk')
リストとリストについて散布図を描画して、マーカーを大バツに設定する	plt.plot(データ列x, データ列y, marker='X')
キーが辞書に存在しない時要素を追加する	aDict.setdefault(key, element)
データ列と配列についての散布図に下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v')
データフレームのカラムのNaNを平均値に設定する	df[col].fillna(df[col].mean())
二次元リストをフラット化する	sum(aList)
カウンタ同士で積集合	aCounter & aCounter2
カラーバーを水平で描画する	plt.colorbar(orientation='horizontal')
小数点数の逆正接	math.atan(x)
散布図に黒いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='k')
ヒストグラムをパパイヤウィップ色で描画する	plt.hist(データ列, color='papayawhip')
回帰分析をヒストグラムと勾配ブースティングで行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
折れ線グラフをカデットブルー色を使って描画する	plt.plot(データ列x, データ列y, color='cadetblue')
option: 大バツマーカーを使う	marker = 'X'
教師データとして回帰モデルを学習する	model.fit(説明変数, 目的変数)
パウダーブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='powderblue')
データフレームの全カラムの相関を可視化する	sns.pairplot(df)
データフレームのNaNをxで補う	df.fillna(x)
データ列の曜日は何日目か見る	ds.dt.dayofweek
nからstep間隔でいつまでもカウントアップする	itertools.count(start=n, step=step)
ベクトルのユニークな要素ごとの頻度	np.unique(aArray, return_counts=True)
新しい重回帰モデルを作る	model = sklearn.linear_model.LinearRegression()
データ列の曜日数を見る	ds.dt.dayofweek
option: グラフの色をペールグリーンに指定する	color = 'palegreen'
option: サンディーブラウン色を使う	color = 'sandybrown'
横棒グラフを淡い茶色色で描画する	plt.barh(データ列x, データ列y, color='tan')
ヒストグラムの区間を設定する	plt.hist(データ列, range=(start, end))
折れ線グラフの大バツマーカーの線幅を変える	plt.plot(データ列x, データ列y, marker='X', markeredgewidth=2.5)
option: 左三角印を使用する	marker = '<'
データフレームのカラムのタイムゾーンを日本に指定する	df[col].tz_convert('Asia/Tokyo')
option: エンコーディングをBOM付きに設定する	encoding = 'utf_8_sig'
実数を百の位で丸める	round(x, -2)
データフレームの指定された列の名前一覧の列を抽出する	df[columns]
集合の補集合	aSet.difference(aSet2)
散布図の色をネイビーにする	plt.scatter(データ列x, データ列y, color='navy')
データフレームのカラムのpercentパーセンタイル	df[col].quantile(percent/100)
データフレームの中にあるの合計を数える	df.isin([value]).sum()
データフレームの値をValueMapで一度に置き換える	df.replace(ValueMap)
散布図のバツ印の大きさを変える	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
チョコレート色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='chocolate')
グラフにy=0の一点鎖線を付ける	plt.axhline(y=0, linestyle='dashbot')
クラス分類をスタッキングとして行う	sklearn.ensemble.StackingClassifier()
縦方向に二つのデータフレームを連結する	pd.concat([df, df2], axis=0)
ビン数nで等量で配列をビン分割する	pd.qcut(aArray, n)
折れ線グラフを点線で描く	plt.plot(データ列x, データ列y, linestyle='dotted')
外れ値に強い線形回帰モデルを準備する	model = sklearn.linear_model.HuberRegressor()
データ列のメディアン	ds.median()
ぐるぐるとイテラブルを繰り返す	itertools.cycle(iterable)
双方向キューの末尾を使う	deq[-1]
散布図の▽マーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
イテラブルを出現回数して、カウンタを更新する	aCounter.update(iterable)
横棒グラフの色をミスティローズにする	plt.barh(データ列x, データ列y, color='mistyrose')
茶色色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='brown')
実数の正接	math.tan(x)
データフレームのリストカラムの中に日付データがあるか調べる	df[aList].isin([value])
ファイルとfilenameを結合する	os.path.join(filepath, filename)
実数の正接の逆数	math.atan(x)
データ列を中央値でビニングする	pd.qcut(ds, 2)
グレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='grey')
アルファベットの大文字を使う	string.ascii_uppercase
昇順に'A'列を用いてデータフレームをソートして、更新する	df.sort_values(by='A', ascending=True, inplace=True)
3つの値を順にプリントする	print(value, value2, value3)
option: ミディアムターコイズ色を使う	color = 'mediumturquoise'
オブジェクトのオブジェクト識別子を見る	id(obj)
横棒グラフをオリベドラブ色を使って描画する	plt.barh(データ列x, データ列y, color='olivedrab')
ヒストグラムを描画して、ビン数を設定する	plt.hist(データ列, bins=区関数)
散布図をマルーン色で描画する	plt.scatter(データ列x, データ列y, color='maroon')
線グラフの色をインディアンレッドに設定する	plt.plot(データ列x, データ列y, color='indianred')
線グラフの色をグリーンに設定する	plt.plot(データ列x, データ列y, color='green')
オプションで、出力先を標準エラーに変更する	file = sys.stderr
真部分集合か	aSet < aSet2
データフレームの列の文字列が文字列で始まらない行を取り出す	df[not df[column].str.startswith(s)]
折れ線グラフに▲印を使用する	plt.plot(データ列x, データ列y, marker='^')
キーがタプルに存在しない場合要素を追加する	aDict.setdefault(key, element)
ダークグレー色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='darkgrey')
数値をシアンで表示できる文字列に変換する	f'\033[36m{value}\033[0m'
ロージーブラウン色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='rosybrown')
option: 色をパールゴールデンロッドに設定する	color = 'palegoldenrod'
集合を更新不能に変換する	frozenset(aSet)
正則化付き重回帰モデルを作る	model = sklearn.linear_model.ElasticNet()
option: グラフの色をミディアムパープルにセットする	color = 'mediumpurple'
空集合	set()
数列とリストについて散布図を描画して、四角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
こんにちは世界をプリントする	print('Hello World')
降順に'A'列によってデータフレームを破壊的に整列する	df.sort_values(by='A', ascending=False, inplace=True)
オレンジレッド色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='orangered')
データフレームを列でソートして、NaNを先頭にする	df.sort_values(by=column, na_position='first')
緑色で数値をプリントする	print(f'\033[32m{value}\033[0m')
xを浮動小数点数に変換する	float(x)
データ列を使う	import pandas as pd
ファイルから読み込みストリームをオープンして]fとする	f = open(filepath, mode='r')
時間を使う	import time
散布図をパウダーブルー色として描画する	plt.scatter(データ列x, データ列y, color='powderblue')
オールドレース色としてヒストグラムを描画する	plt.hist(データ列, color='oldlace')
黒いダイアモンドマーカーを数列と配列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgrey')
イテラブルを文字列リストに変換して、部分文字列によって連結する	sub.join(map(str, iterable))
データフレームの欠損値を最小値に設定する	df.fillna(df.min())
列の中に含まれる文字列と文字列の合計を数える	ds.isin([value, value2]).sum()
綺麗なグラフを描画する準備をする	import seaborn as sns
二つの集合は共通の要素を持たないか調べる	aSet.isdisjoint(aSet2)
ダークグリーン色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
小数点数の正弦を算出する	math.sin(x)
折れ線グラフをミディアムシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumseagreen')
組を展開して出力する	print(*aTuple)
ディムグレー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='dimgrey')
アイボリー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='ivory')
Pandasでフォーマットfmtでデータ列をタイムスタンプに変換する	pd.to_datetime(ds, format=fmt)
折れ線グラフの色をカラーコードで変更する	plt.plot(データ列x, データ列y, color='#800080')
実数を実数で割って、切り捨てる	x // y
データ列の中に文字列があるかどうか調べる	ds.isin([value])
シスル色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='thistle')
折れ線グラフにクロスマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
黒い左三角マーカーとして散布図を描く	plt.plot(データ列x, データ列y, marker='<', c='k')
日付時刻データとタイムスタンプデータの時間差が何秒か知る	(aDatetime - aDatetime2).total_seconds()
ミディアムパープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='mediumpurple')
破線に折れ線グラフの線の種類を変更する	plt.plot(データ列x, データ列y, linestyle='dashed')
線グラフの色をホワイトに設定する	plt.plot(データ列x, データ列y, color='white')
赤い実線としてデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
行列間の要素ごとの最大公約数を計算する	np.gcd(aArray, aArray2)
折れ線プロットを描画し、色をカラーコードでセットする	plt.plot(データ列x, データ列y, color='#800080')
日付時刻データにn週間分足す	aDatetime + datetime.timedelta(weeks=n)
ヒストグラムの色をフローラルホワイトにする	plt.hist(データ列, color='floralwhite')
実数の天井	math.ceil(x)
散布図のダイアモンドマーカーを赤くする	plt.scatter(データ列x, データ列y, marker='D', markerfacecolor='r')
3整数の最小公倍数を求める	math.lcm(n, n2, n3)
横棒グラフの色をゴールデンロッドにする	plt.barh(データ列x, データ列y, color='goldenrod')
文字列がリストに含まれないか調べる	element not in aList
ガウス過程で回帰分析を行う	model = sklearn.gaussian_process.GaussianProcessRegressor()
変数を赤色でプリントできる文字列にする	f'\033[31m{value}\033[0m'
リストとリストについて散布図を描画して、星マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='*', c=rgb)
データフレームの欠損値を最頻値で埋める	df.fillna(df.mode().iloc[0])
折れ線グラフをダークシアン色で描画する	plt.plot(データ列x, データ列y, color='darkcyan')
線グラフの色をライトサーモンに設定する	plt.plot(データ列x, データ列y, color='lightsalmon')
データ列の中に文字列と文字列がいくつあるか数える	ds.isin([value, value2]).sum()
棒グラフの色をゴーストホワイトにする	plt.bar(データ列x, データ列y, color='ghostwhite')
option: サンディーブラウンにフォントの色を設定する	color = 'sandybrown'
列を等量でn個に分割する	pd.qcut(ds, n)
option: グラフの色をモカシンに設定する	color = 'moccasin'
ベクトルの形状	aArray.shape
スチールブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='steelblue')
双方向キューの右に列の各要素を付け加える	deq.extend(iterable)
Pandasで、フォーマットとしてデータフレームのcollを日付データに変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
横棒グラフをミディアムアクアマリン色として描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
option: 色をクリムゾンに指定する	color = 'crimson'
配列とリストについての散布図に黒い菱形マーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
データフレームを列毎にグループ分けして、それぞれのグループ毎の最大値を算出する	df.groupby(column).max()
マッピングをJSONフォーマットの文字列に変換する	json.dumps(aDict, ensure_ascii=False)
ライトグレーにヒストグラムの色を設定する	plt.hist(データ列, color='lightgrey')
ロードされたモジュールを列挙する	sys.modules
データフレームのカラムのタイムゾーンを東京に変更する	df[col].tz_convert('Asia/Tokyo')
折れ線グラフを半透明の破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', alpha=0.5)
データ列の中にと文字列がある	ds.isin([value, value2])
散布図にrgbの三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='^', c=rgb)
データフレームを'A'列によって昇順に並べ直して、更新する	df.sort_values(by='A', ascending=True, inplace=True)
オプションで、標準エラーを出力にする	file = sys.stderr
nが5の倍数かどうか調べる	n % 5 == 0
縦棒グラフをロージーブラウン色を用いて描画する	plt.bar(データ列x, データ列y, color='rosybrown')
ヒストグラムの色をライトグリーンに設定する	plt.hist(データ列, color='lightseagreen')
タプルの末尾	aTuple[-1]
option: ダークオーキッド色を使用する	color = 'darkorchid'
カテゴリ別で色分けして、データフレームを棒グラフにする	sns.barplot(x='カテゴリ列', y='列名', hue='カテゴリ', data=df)
半透明の実線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
ディープスカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
配列のユニークな要素とその個数	u, counts = np.unique(aArray, return_counts=True)
SVDで多次元データを濃く次元に削減する	sklearn.decomposition.TruncatedSVD(n_components=二).fit_transform(多次元データ)
変数について数値の積分を求める	sympy.integrate(e, z)
３変数の最も大きい値	max(x, y, z)
データフレームの列の値がxであるデータを抽出する	df[df[column] == x]
論文用にグラフを設定する	sns.set(context='paper')
双曲線正弦の逆数	math.asinh(x)
ビスクにヒストグラムの色を設定する	plt.hist(データ列, color='bisque')
再帰エラーを未然に防ぐ	sys.setrecursionlimit(1000000)
コレクションを使用する	import collections
ヒストグラムをダークブルー色で描画する	plt.hist(データ列, color='darkblue')
赤い三角マーカーをデータ列とデータ列についての散布図に描画する	plt.plot(データ列x, データ列y, marker='^', c='r')
リストから配列を作成する	np.array(aList)
ライトグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
データフレームを列によって整列して、下位n件を取り出す	df.sort_values(columns).tail(n)
イテラブルから計数器を作成する	collections.Counter(iterable)
折れ線グラフをライムグリーン色として描画する	plt.plot(データ列x, データ列y, color='limegreen')
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategrey'
ゼロ埋めされた三二ビット整数型の配列	np.zeros(要素数, dtype=np.int16)
列によって昇順にデータフレームをソートし、更新する	df.sort_values(by=column, ascending=True, inplace=True)
八進数字を全て使う	string.octdigits
データフレームから破壊的に重複を削除する	df.drop_duplicates(inplace=True)
色付きの点線として折れ線グラフを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='#800080')
シーグリーン色のヒストグラムを描画する	plt.hist(データ列, color='seagreen')
折れ線グラフのマーカーを四角にする	plt.plot(データ列x, データ列y, marker='s')
日付時刻データが金曜日か	aDatetime.weekday() == 4
xをブール値に変換する	bool(x)
散布図の上三角マーカーの色を変更する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='#800080')
横棒グラフの色をダークサーモンにする	plt.barh(データ列x, データ列y, color='darksalmon')
文字列の先頭で正規表現に複数行対応としてマッチするか見る	re.match(pattern, s, flags=re.MULTILINE)
昇順に破壊的に列によってデータフレームを並べ直す	df.sort_values(by=column, ascending=True, inplace=True)
ヒストグラムの色をライトサーモンにセットする	plt.hist(データ列, color='lightsalmon')
スクリプトファイルのフォルダ名を見る	os.path.dirname(os.path.abspath(__file__))
折れ線グラフのダイアモンドマーカーを青くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='b')
文字列の出力を改行なしに行う	print(value, end='')
散布図をミスティローズ色で描画する	plt.scatter(データ列x, データ列y, color='mistyrose')
折れ線グラフをスラグレー色として描画する	plt.plot(データ列x, データ列y, color='slategrey')
イテラブルとリストの散布図に黒い三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='^', c='k')
白い散布図を描画する	plt.scatter(データ列x, データ列y, color='w')
リストを横に並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
パープル色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='purple')
折れ線グラフの色をハニーデューに設定する	plt.plot(データ列x, データ列y, color='honeydew')
縦棒グラフを描画してバーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
オブジェクトの無限イテラブル	itertools.repeat(element)
散布図のマーカーを大バツにする	plt.scatter(データ列x, データ列y, marker='X')
ヒートマップでデータフレームの列と列の相関行列をグラフ化する	sns.heatmap(df[[column, column2]].corr())
データ列間のMAEを算出する	sklearn.metrics.mean_absolute_error(データ列, データ列2)
option: 決定木の最大深さを設定する	maxdepth = n
線グラフをスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='skyblue')
正規分布による確率密度関数	scipy.stats.norm.pdf(x, loc=平均値, scale=標準偏差)
option: グラフの色をライトイエローに指定する	color = 'lightyellow'
散布図をローングリーン色で描画する	plt.scatter(データ列x, データ列y, color='lawngreen')
散布図を青くする	plt.scatter(データ列x, データ列y, color='b')
option: グラフの色をスカイブルーに設定する	color = 'skyblue'
折れ線グラフの色をダークグレーに設定する	plt.plot(データ列x, データ列y, color='darkgrey')
集合から要素を全て取り除く	aSet.clear()
ヒストグラムの色をナバホホワイトに設定する	plt.hist(データ列, color='navajowhite')
データ列を指定した値としてバイナリ化する	sklearn.preprocessing.Binarizer(threshold=閾値).fit_transform(データ列)
データフレームを二つの列によってを用いて降順にソートする	df.sort_values(by=['A', 'B'], ascending=False)
横棒グラフの色をライトイエローにする	plt.barh(データ列x, データ列y, color='lightyellow')
option: グラフの色を白に設定する	color = 'white'
折れ線グラフに黒いポイント印を描画する	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='k')
タプルの中の最小値を求める	min(aTuple)
リストの要素を小さい方からソートする	sorted(aList, reverse=False)
散布図のマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, markersize=2.0)
option: ベージュを用いる	color = 'beige'
データフレームから一番左側のカラムを消す	df[df.columns[1:]]
ロイヤルブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='royalblue')
横棒グラフをダークグリーン色で描画する	plt.barh(データ列x, データ列y, color='darkgreen')
ライトブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='lightblue')
日付データの曜日を整数で求める	aDate.weekday()
リストとリストについて散布図を描画して、大バツマーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
折れ線グラフに赤い下三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='r')
文字列のケースを交換する	s.swapcase()
predicateFuncが真とならないイテラブルの要素	itertools.dropwhile(predicateFunc, iterable)
折れ線グラフの色を青紫に設定する	plt.plot(データ列x, データ列y, color='violet')
データフレームの散布図をグループ化して横に配置する	sns.relplot(data=df, x='列名', y='列名', hue='カテゴリ列', col='カテゴリ列')
要素を両端キューの先頭に追加する	deq.appendleft(element)
option: ペールグリーンにグラフの色を設定する	color = 'palegreen'
二つのリストから辞書	dict(zip(aList, aList2))
option: n番目のカラムをインデックスに設定する	index_col = n
折れ線グラフの大バツマーカーを黒くする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='k')
シーケンスをイミュータブルな集合に変換する	frozenset(iterable)
ミディアムブルー色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumblue')
列のユニークな要素	df[col].unique()
配列と配列についての散布図にポイントマーカーを描画する	plt.plot(データ列x, データ列y, marker='.')
ヒストグラムの色を青紫に指定する	plt.hist(データ列, color='violet')
縦棒グラフをライトグレー色で描画する	plt.bar(データ列x, データ列y, color='lightgray')
option: 耐火レンガに色を変更する	color = 'firebrick'
線形回帰分析の準備をする	model = sklearn.linear_model.LinearRegression()
ブランチドアーモンド色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='blanchedalmond')
ロバスト推定でクラス分類を行う	model = sklearn.linear_model.RANSACClassifier(random_state=0)
折れ線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
グラフの名前を設定する	plt.title('グラフの名称')
データ列をインポートする	import pandas as pd
線グラフをサドルブラウン色で描画する	plt.plot(データ列x, データ列y, color='saddlebrown')
散布図をライトグリーン色で描画する	plt.scatter(データ列x, データ列y, color='lightgreen')
スチールブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='steelblue')
線グラフを破線を用いて描く	plt.plot(データ列x, データ列y, linestyle='dashed')
散布図のマーカーをダイアモンドにする	plt.scatter(データ列x, データ列y, marker='D')
option: グラフの色をライトブルーに設定する	color = 'lightblue'
貝殻色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='seashell')
option: バツマーカーを使用する	marker = 'x'
シエナ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='sienna')
文字列を白色で表示できる文字列にする	f'\033[37m{value}\033[0m'
折れ線グラフをカデットブルー色で描画する	plt.plot(データ列x, データ列y, color='cadetblue')
option: レモンシフォン色を用いる	color = 'lemonchiffon'
ヒストグラムの色をコーンフラワーブルーに変更する	plt.hist(データ列, color='cornflowerblue')
ヒストグラムの色をダークシアグリーンに設定する	plt.hist(データ列, color='darkseagreen')
棒グラフをミディアムスレートブルー色として描画する	plt.bar(データ列x, データ列y, color='mediumslateblue')
グリッド線をプロットから消す	plt.grid(False)
日付データからn時間を減算する	aDate - datetime.timedelta(hours=n)
カテゴリ列でグループ化してデータフレームをにバイオリン図として描く	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
文字列中に部分文字列があるか	sub in s
リネンにヒストグラムの色を変更する	plt.hist(データ列, color='linen')
横軸の目盛りに文字列を付ける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
ダークオリーブグリーン色のヒストグラムを描画する	plt.hist(データ列, color='darkolivegreen')
データフレームのリストカラムの要約統計量	df[aList].describe()
NaNも加えてデータフレームの列をワンホット・ベクトルに変換する	pd.get_dummies(df[column], dummy_na=True)
ダークグリーン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkgreen')
線形のクラス分類をする	model = sklearn.linear_model.LogisticRegression()
インデント幅nで、辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False, indent=n)
カラムの欠損値を最頻値に設定する	ds.fillna(ds.mode().iloc[0])
option: 色をパープルに指定する	color = 'purple'
実数のサイン	math.sin(x)
データフレームの列のNaNを直後の値に変更する	df[col].fillna(method='bfill')
数列の変遷を赤い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='r')
option: ダークシアン色を用いる	color = 'darkcyan'
辞書をJSON形式の文字列に変換する	json.dumps(aDict, ensure_ascii=False)
二つのオブジェクトが同一参照か調べる	obj is obj2
アルファベットの小文字を全て見る	string.ascii_lowercase
横棒グラフをグリーン色を用いて描画する	plt.barh(データ列x, データ列y, color='green')
浮動小数点数を整数に変換する	int(x)
横軸の目盛りに文字列をつける	plt.xticks([0, 60, 90], ['不可', '可', '秀'])
ヒストグラムの色をベージュに変更する	plt.hist(データ列, color='beige')
散布図にバツマーカーを使う	plt.plot(データ列x, データ列y, marker='x')
丸印としてデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='o')
集合をタプルにする	tuple(aSet)
英文字から１文字ランダムに選ぶ	random.choice(string.ascii_uppercase)
変数の出力を改行なしに行う	print(value, end='')
ISO8601の文字列をタイムスタンプにする	datetime.datetime.fromisoformat(日付の書かれた文字列)
オリベドラブ色でヒストグラムを描画する	plt.hist(データ列, color='olivedrab')
半透明の実線でデータ列の推移を描く	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
データフレームのリスト列の中に文字列と文字列があるか	df[aList].isin([value, value2])
rgbの星マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
折れ線グラフに赤い大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='r')
複数の列でによってデータフレームを降順にソートする	df.sort_values(by=column, ascending=False)
option: サドルブラウン色を使う	color = 'saddlebrown'
n個の整数列	list(range(n))
三つのデータフレームを縦方向に連結する	pd.concat([df, df2, df3], axis=0)
JSONファイルの入力を読み込んでdataとする	data = json.load(fin)
整数nを2進リテラルに変換する	bin(n)
棒グラフをダークオーキッド色で描画する	plt.bar(データ列x, データ列y, color='darkorchid')
折れ線グラフの大バツマーカーを青色にする	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='b')
大バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='X')
折れ線グラフの色をライトグレーに設定する	plt.plot(データ列x, データ列y, color='lightgray')
option: ブラックを使う	color = 'black'
実数はNaNか調べる	math.isnan(x)
横棒グラフの色をホワイトスモークにする	plt.barh(データ列x, データ列y, color='whitesmoke')
折れ線グラフの色をゴーストホワイトにセットする	plt.plot(データ列x, データ列y, color='ghostwhite')
貝殻色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seashell')
縦棒グラフをゴールデンロッド色で描画する	plt.bar(データ列x, データ列y, color='goldenrod')
異なる列をキーとして二つのデータフレームを全ジョインする	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
散布図の▼マーカーの大きさを指定する	plt.scatter(データ列x, データ列y, marker='v', markersize=2.0)
標準入力から1行だけ改行を取り除いて読み込む	sys.stdin.readline().rstrip()
配列とリストについての散布図にrgbの左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<', c=rgb)
日付時刻データをエポック秒に変換する	aDatetime.timestamp()
折れ線グラフをダークシアグリーン色で描画する	plt.plot(データ列x, データ列y, color='darkseagreen')
ピーチパフ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='peachpuff')
データフレームの中に文字列がある	df.isin([value])
整数個のものからk個取り出した場合の並べ方を求める	math.perm(n, k)
データフレームをJSONLファイルに書き込む	df.to_excel(filename)
データフレームを列によってグループ化して、それぞれのグループごとの合計を求める	df.groupby(column).sum()
データフレームの文字列を未入力値に変換する	df.replace(s, np.nan)
formatパターンの文字列を日付時刻に変換する	datetime.datetime.strptime(日付の書かれた文字列, format)
ベージュ色で縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='beige')
辞書に項目名が存在する	key in aDict
データフレームを二つの列でによって破壊的に並べ直す	df.sort_values(by=['A', 'B'], inplace=True)
整数nの二進表現	bin(n)
折れ線グラフをレモンシフォン色として描画する	plt.plot(データ列x, データ列y, color='lemonchiffon')
nがn2以下、または、n3以上かどうか	n <= n2 or n >= n3
データフレームのリストカラムの値をreplにまとめて正規表現patternで置き換える	df[aList].replace(pattern, repl, regex=True)
ダークサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darksalmon')
棒グラフの色をミディアムブルーにする	plt.bar(データ列x, データ列y, color='mediumblue')
データフレームのカラムを1000の位で丸めて、整数型にする	df[col].round(-3).astype(int)
未入力値を含めて列でデータフレームをグループ化する	df.groupby(column, dropna=False)
折れ線グラフの色をオールドレースに設定する	plt.plot(データ列x, データ列y, color='oldlace')
全要素を1で初期化した行列	np.ones(行数, 列数, dtype=np.int)
散布図を赤色を使って描画する	plt.scatter(データ列x, データ列y, color='red')
散布図に下三角マーカーを使用する	plt.plot(データ列x, データ列y, marker='v')
nがn2よりも小さい	n < n2
ファイルパスをオープンして]、書き込みストリームを求める	open(filepath, mode='w')
タイムスタンプデータからn時間を減算する	aDatetime - datetime.timedelta(hours=n)
データフレームのインデックス名をまとめてnameからname2に付け直す	df.rename(index={name: name2})
データフレームを列によってソートして、下位n件を取り出す	df.sort_values(columns).tail(n)
青い印を散布図に描画する	plt.scatter(データ列x, データ列y, markerfacecolor='b')
カラムの中に日付データと日付データがいくつあるか数える	ds.isin([value, value2]).sum()
横棒グラフの色をダークグレーにする	plt.barh(データ列x, データ列y, color='darkgray')
ファイルから複数のシートを読み込む	pd.read_excel(filename, sheet_name=[n, n2])
ヒストグラムの色をライトグリーンに変更する	plt.hist(データ列, color='lightgreen')
データ列のNaNをメディアンで置換する	ds.fillna(ds.median())
列とイテラブルをつなぐ	itertools.chain(iterable, iterable2)
因子分析の準備をする	model = sklearn.decomposition.PCA(n_components=n)
棒グラフの色をサーモンにする	plt.bar(データ列x, データ列y, color='salmon')
散布図のクロス印を黒くする	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
データフレームの各グループごとの平均値	df.groupby(column).mean()
横棒グラフを青緑色で描画する	plt.barh(データ列x, データ列y, color='teal')
実測値をモデルの予測値と比較する	pd.DataFrame({'実測': 目的変数, '予測': model.predict(説明変数)})
文字列中にひとつでも非空白が含まれるか調べる	any(not c.isspace() for c in s)
ヒストグラムをローングリーン色を用いて描画する	plt.hist(データ列, color='lawngreen')
nをn2だけ左シフトする	n << n2
文字列中の部分文字列の出現をカウントする	s.count(sub)
散布図の左三角マーカーの線幅を指定する	plt.scatter(データ列x, データ列y, marker='<', markeredgewidth=2.5)
横棒グラフの色をライトグリーンにする	plt.barh(データ列x, データ列y, color='lightgreen')
rgbの左三角マーカーをリストとリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='<', c=rgb)
要素が辞書の値に含まれていないか調べる	element not in aDict.values()
線グラフをシーグリーン色で描画する	plt.plot(データ列x, データ列y, color='seagreen')
折れ線グラフをオーキッド色で描画する	plt.plot(データ列x, データ列y, color='orchid')
モカシン色のヒストグラムを描画する	plt.hist(データ列, color='moccasin')
n2行n列の２次元リストを作る	[[0] * n for _ in range(n2)]
ダークスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkslateblue')
カテゴリデータをワン・ホットベクトル化する	sklearn.preprocessing.OneHotEncoder(sparse=False).fit_transform(データ列)
ゲインズボロ色を用いてヒストグラムを描画する	plt.hist(データ列, color='gainsboro')
棒グラフをライトスレイグレー色で描画する	plt.bar(データ列x, データ列y, color='lightslategrey')
変数名を項目名としてマップを生成する	dict(name=element)
ペールグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='palegreen')
文字列の先頭から部分文字列を探す	s.find(sub)
グラフのタイトルを設定する	plt.title('グラフの名称')
ヒストグラムを青色で描画する	plt.hist(データ列, color='blue')
文字列の右側から空白を取り除く	s.rstrip()
貝殻にヒストグラムの色を指定する	plt.hist(データ列, color='seashell')
データフレームを列の値によってグループ化して、グループの分散を求める	df.groupby(column).var()
イテラブルを文字列に変換して、空白を用いて結合する	' '.join(map(str, iterable))
option: マーカーの色を小麦色にする	markerfacecolor = 'wheat'
棒グラフをピーチパフ色で描画する	plt.bar(データ列x, データ列y, color='peachpuff')
ヒストグラムをライトコーラル色で描画する	plt.hist(データ列, color='lightcoral')
シエナ色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='sienna')
データフレームを'A'列によって昇順に破壊的にソートする	df.sort_values(by='A', ascending=True, inplace=True)
横棒グラフをパールバイオレットレッド色で描画する	plt.barh(データ列x, データ列y, color='palevioletred')
データフレームの第三四分位数	df.quantile(0.75)
縦棒グラフをシーグリーン色で描画する	plt.bar(データ列x, データ列y, color='seagreen')
上位集合か	aSet.issuperset(aSet2)
文字列を走査し、正規表現にケースを無視してマッチするか見る	re.search(pattern, s, flags=re.IGNORECASE)
作業ディレクトリをfilepathに変更する	os.chdir(os.dirname(filepath))
データ列を二つ並べて箱ひげ図にする	plt.boxplot([データ列, データ列])
外れ値に強い回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
散布図の上三角マーカーの線幅を設定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
bとn2から成るペア	(n, n2)
ミディアムアクアマリン色として線グラフを描画する	plt.plot(データ列x, データ列y, color='mediumaquamarine')
配列とリストの散布図にrgbのダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c=rgb)
四分位数ごとにリストをビン分割する	pd.qcut(aList, 4)
データフレームの空文字をドロップする	df.replace('', np.nan).dropna()
本日が何月か知る	datetime.datetime.today().month
折れ線グラフの下三角マーカーを青色にする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
再帰の最大回数を増やす	sys.setrecursionlimit(1000000)
散布図をサーモン色を用いて描画する	plt.scatter(データ列x, データ列y, color='salmon')
マルーンにヒストグラムの色を設定する	plt.hist(データ列, color='maroon')
ヒストグラムをミディアムパープル色で描画する	plt.hist(データ列, color='mediumpurple')
赤い大バツマーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='X', c='r')
縦棒グラフをレベッカパープル色で描画する	plt.bar(データ列x, データ列y, color='rebeccapurple')
行列をフラット化する	aArray.flatten()
関数でデータフレームをまとめた表	df.groupby(関数)
option: ラベンダーブラッシュ色を用いる	color = 'lavenderblush'
データフレームのリストカラムの第三四分位数	df[aList].quantile(0.75)
カウンタ同士で共通部分	aCounter & aCounter2
配列の行	aArray[行番号]
目盛り線	plt.grid(linewidth=3.0)
箱ひげ図を横方向にする	plt.boxplot(データ列, vert=False)
データフレームのカラムが何月か調べる	df[col].dt.month
線グラフをスノー色を用いて描画する	plt.plot(データ列x, データ列y, color='snow')
option: マーカーの色をピーチパフにする	markerfacecolor = 'peachpuff'
コマンドフラグの状態	sys.flags
黒い散布図を描画する	plt.scatter(データ列x, データ列y, color='k')
オリーブにヒストグラムの色を変更する	plt.hist(データ列, color='olive')
双方向キューのstart番目からend番目までの要素	collections.deque(itertools.islice(deq, start, end))
散布図をライム色として描画する	plt.scatter(データ列x, データ列y, color='lime')
グラフの使途を論文に指定する	sns.set(context='paper')
データフレームを破壊的に2つの列で降順に並べ直す	df.sort_values(by=['A', 'B'], ascending=False, inplace=True)
リストとリストについての散布図にrgbの星マーカーを描く	plt.plot(データ列x, データ列y, marker='*', c=rgb)
ヒストグラムをシーグリーン色を用いて描画する	plt.hist(データ列, color='seagreen')
データフレームの指定された４つの列のみ抽出する	df[[column, column2, column3, column4]]
option: 色をライトブルーに設定する	color = 'lightblue'
nをバイト列に変換する	n.to_bytes(length=bytesize, byteorder='big')
タプルの末尾を除く	aTuple[:-1]
スラグレー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='slategrey')
やわらかい青色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='cornflowerblue')
折れ線グラフの右三角印の大きさを変える	plt.plot(データ列x, データ列y, marker='>', markersize=2.0)
日付時刻データの月数	aDatetime.month
データフレームのカラムの中にいくつ日付データがあるか数える	df[col].isin([value]).sum()
散布図をコーンズシルク色を用いて描画する	plt.scatter(データ列x, データ列y, color='cornsilk')
散布図に赤い丸マーカーを使う	plt.plot(データ列x, データ列y, marker='o', c='r')
ヒストグラムの色を淡いピンク色にセットする	plt.hist(データ列, color='lightpink')
グリッド線	plt.grid(linewidth=3.0)
nが一桁の数か調べる	-9 <= n <= 9
横棒グラフをダークオレンジ色で描画する	plt.barh(データ列x, データ列y, color='darkorange')
ファイルがあるかどうか	os.path.exists(filepath)
日付データからn分、減算する	aDate - datetime.timedelta(minutes=n)
option: グラフの色をブルーバイオレットに設定する	color = 'blueviolet'
クラス分類の偽陽性を確認する	混同行列 = sklearn.metrics.confusion_matrix(正解データ列, 予測データ列)
オブジェクトは論理値型かどうか調べる	isinstance(obj, bool)
データフレームのカラムの欠損値を後の行の値に変更する	df[col].fillna(method='bfill')
データフレームの行を条件でフィルタするには	df[(df[column] == x) & (df[column2] == x2)]
固有値分解の準備をする	model = sklearn.decomposition.PCA(n_components=n)
線グラフの色をディムグレーにセットする	plt.plot(データ列x, データ列y, color='dimgray')
option: グラフの色をアクアに設定する	color = 'aqua'
横棒グラフを描き、、バーの縦幅を調整する	plt.barh(ラベル列, データ列, width=0.5)
ブラック色のヒストグラムを描画する	plt.hist(データ列, color='black')
データフレームを列でグループ分けして、個数を求める	df.groupby(column).count()
辞書のキー一覧	list(aDict)
タプル中のオブジェクトが最初に見つかる場所	aTuple.index(element)
リストとリストについての散布図に星マーカーを描画する	plt.plot(データ列x, データ列y, marker='*')
オリーブ色として散布図を描画する	plt.scatter(データ列x, データ列y, color='olive')
範囲を指定して部分文字列を文字列の右端から探す	s.find(sub, start, end)
ファイルパスをオープンして]バイナリストリームを求める	open(filepath, mode='rb')
整数nを八進文字列に変換する	oct(n)[2:]
行列式を求める	np.linalg.det(aArray)
ファイルを読み込みモードとしてオープンして]、fとする	f = open(filepath, mode='r')
折れ線グラフの色を淡い茶色に変更する	plt.plot(データ列x, データ列y, color='tan')
散布図の色を紺にする	plt.scatter(データ列x, データ列y, color='darkblue')
ヒストグラムをレモンシフォン色で描画する	plt.hist(データ列, color='lemonchiffon')
組をn回結合する	aTuple * n
データフレームの列の値がxの行を抽出する	df[df[column] == x]
横棒グラフの色をライトシアンにする	plt.barh(データ列x, データ列y, color='lightcyan')
option: マーカーを四角に変更する	marker = 's'
option: グラフの色をミディアムオーキッドに設定する	color = 'mediumorchid'
ライトグリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgreen')
rgbの▼マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列は文字列より辞書順で後か調べる	s > s2
実数を実数に加算する	x + y
ヒストグラムの色をアクアに設定する	plt.hist(データ列, color='aqua')
データフレームのリスト列の値が欠損値かテストする	df[aList].isna()
データフレームを列で昇順にソートする	df.sort_values(by=column, ascending=True)
散布図の下三角印の色を設定する	plt.scatter(データ列x, データ列y, marker='v', markerfacecolor='#800080')
散布図を黒い左三角マーカーとして描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
散布図をライトグレー色として描画する	plt.scatter(データ列x, データ列y, color='lightgrey')
ダークスラテグレー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
線グラフの色をリネンに変更する	plt.plot(データ列x, データ列y, color='linen')
option: ペールグリーンにフォントの色を変更する	color = 'palegreen'
aListn番目から値をポップする	aList.pop(n)
散布図をダークターコイズ色で描画する	plt.scatter(データ列x, データ列y, color='darkturquoise')
ヒストグラムの色をカーキに設定する	plt.hist(データ列, color='khaki')
グラフのカラーパレットを指定する	sns.set(pallete=パレット名)
rgbの四角マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='s', c=rgb)
文字列を部分文字列で二分し、後半の文字列を見る	s.partition(sub)[-1]
リストの末尾にリストを展開する	aList.extend(aList2)
イテラブルをカウンタに変換する	collections.Counter(iterable)
データフレームを調べる	df.head()
現在の時間数	datetime.date.today().hour
二変数の最大値	max(x, y)
棒グラフをミディアムスプリンググリーン色を用いて描画する	plt.bar(データ列x, データ列y, color='mediumspringgreen')
クラス分類をランダムフォレストで行う	model = sklearn.ensemble.RandomForestClassifier()
要素がマップの値として含まれているか調べる	element in aDict.values()
折れ線グラフの色をシアンに指定する	plt.plot(データ列x, データ列y, color='cyan')
オブジェクトの無限なイテラブル	itertools.repeat(element)
ミッドナイトブルー色のヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
横棒グラフの色をダークスレートブルーにする	plt.barh(データ列x, データ列y, color='darkslateblue')
日付データををn分後に進める	aDate + datetime.timedelta(minutes=n)
整数nが集合のいづれかか調べる	n in aSet
文字列を緑色にする	f'\033[32m{value}\033[0m'
option: フォントの色をパールバイオレットレッドに変更する	color = 'palevioletred'
折れ線グラフをペールグリーン色を用いて描画する	plt.plot(データ列x, データ列y, color='palegreen')
文字列が空白	s.isspace()
辞書から最後に追加したエントリをポップする	aDict.popitem()
度数分布図を横に並べて描く	plt.hist([データ列, データ列], color=['b', 'r'])
散布図をリネン色で描画する	plt.scatter(データ列x, データ列y, color='linen')
nがn2かどうか	n == n2
青い星マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='*', markerfacecolor='b')
マッピングの項目名を要素に設定する	aDict[key] = element
データフレームの数値をまとめて小数点以下n桁で丸める	df.round(n)
既存の配列を元に全要素が1の配列を作成する	np.ones_like(aArray)
線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
n回の数値イテラブル	range(n)
折れ線グラフを淡い茶色色を用いて描画する	plt.plot(データ列x, データ列y, color='tan')
option: グラフの色をインディアンレッドに設定する	color = 'indianred'
nの二進表記	bin(n)
縦棒グラフをダークスレートブルー色で描画する	plt.bar(データ列x, データ列y, color='darkslateblue')
実数の双曲線正接の逆数	math.atanh(x)
縦棒グラフを茶色色で描画する	plt.bar(データ列x, データ列y, color='brown')
option: デピンク色を使う	color = 'deeppink'
両端キューの先頭にイテラブルの要素を追加する	deq.extendleft(iterable)
クラス分類を多層パーセプトロンで行う	model = sklearn.neural_network.MLPClassifier(hidden_layer_sizes=(10, 10))
プラム色でヒストグラムを描画する	plt.hist(データ列, color='plum')
3つの最大値を求める	max(x, y, z)
縦棒グラフをタン色として描画する	plt.bar(データ列x, データ列y, color='tan')
棒グラフをグリーン色で描画する	plt.bar(データ列x, データ列y, color='green')
折れ線グラフの下三角印を青くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='b')
リストを青色でプリントする	print(f'\033[34m{value}\033[0m')
散布図をスカイブルー色で描画する	plt.scatter(データ列x, データ列y, color='skyblue')
rgbの▲マーカーを散布図に使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ビン数nを用いてデータフレームの中の列をビン分割する	pd.cut(df[col], n)
データフレームのカラムの中に日付データと文字列があるか	df[col].isin([value, value2])
rgbの星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c=rgb)
二つの配列を列方向に連結する	np.concatenate([aArray, aArray2], axis=0)
二つの文字列が等しいか調べる	s == s2
データフレームの中にある文字列の合計を数える	df.isin([value]).sum()
クラス分類の適合率と再現率の調和平均を算出する	sklearn.metrics.f1_score(正解データ列, 予測データ列)
文字列は印字できるかどうか確認する	s.isprintable()
データ列と列から重複を取り除く	set(ds.unique().tolist()+ds2.unique().tolist())
横棒グラフをオレンジレッド色で描画する	plt.barh(データ列x, データ列y, color='orangered')
文字列内にひとつでもアルファベットが含まれるか調べる	any(c.isalpha() for c in s)
二つのリストをコロンで区切って出力する	print(value, value2, sep=':')
折れ線グラフのマーカーをダイアモンドにする	plt.plot(データ列x, データ列y, marker='D')
散布図に赤い下三角マーカーを用いる	plt.plot(データ列x, データ列y, marker='v', c='r')
リスト中の要素が全て真かどうか調べる	all(aList)
ふたつの集合の差集合を使う	aSet.difference(aSet2)
option: グラフの色をやわらかい青に設定する	color = 'cornflowerblue'
イテラブルとリストの散布図を描いて、マーカーをダイアモンドに設定する	plt.plot(データ列x, データ列y, marker='D')
横棒グラフの色をミッドナイトブルーにする	plt.barh(データ列x, データ列y, color='midnightblue')
横棒グラフの色を赤にする	plt.barh(データ列x, データ列y, color='red')
データフレームの欠損値を第二四分位数に設定する	df.fillna(df.median())
ヒストグラムをシルバー色で描画する	plt.hist(データ列, color='silver')
option: 星印を使う	marker = '*'
列が正規分布からどの程度、尖っているか見る	ds.skew()
折れ線グラフのバツマーカーの大きさを変更する	plt.plot(データ列x, データ列y, marker='x', markersize=2.0)
option: グラフの色をフォレストグリーンに設定する	color = 'forestgreen'
行列の行ごとの標準偏差	np.std(aArray, axis=1)
実数の自然対数を算出する	math.log(x)
データフレームから重複するデータを落とす	df.drop_duplicates()
データ列のNaNを直前の値に設定する	ds.fillna(method='ffill')
小文字を全部使う	string.ascii_lowercase
リストが空か	len(aList) == 0
双方向キューは空でない	len(deq) != 0
縦棒グラフをミントクリーム色で描画する	plt.bar(データ列x, データ列y, color='mintcream')
値∈集合	element in aSet
データフレームを各列と列の組み合わせ毎にグループ化し、標準偏差を計算する	df.groupby([column, column2], as_index=False).std()
データフレームの列のユニークな要素数	df[col].nunique()
ダークグリーン色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgreen')
散布図をビスク色で描画する	plt.scatter(データ列x, データ列y, color='bisque')
折れ線グラフを実線に設定する	plt.plot(データ列x, データ列y, linestyle='solid')
option: ダークグレー色を使う	color = 'darkgray'
ディープスカイブルー色のヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
要素ひとつの組	(element,)
棒グラフの色をインディゴにする	plt.bar(データ列x, データ列y, color='indigo')
有理数モジュールを使う	import fractions
50パーセンタイルでデータフレームのリストカラムの欠損値を埋める	df[aList].fillna(df[aList].median())
散布図の色をライトグレーにする	plt.scatter(データ列x, データ列y, color='lightgray')
option: インデックスを自動的な連番に設定する	index_col = None
ヒストグラムの色をライトスレイグレーにセットする	plt.hist(データ列, color='lightslategray')
option: データ型を指定する	dtype = np.int8
訓練データでモデルを学習する	model.fit(説明変数, 目的変数)
スプリンググリーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='springgreen')
ヒストグラムの色をダークサーモンに変更する	plt.hist(データ列, color='darksalmon')
オールドレース色で散布図を描画する	plt.scatter(データ列x, データ列y, color='oldlace')
星印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='*')
折れ線グラフの色をアイボリーに設定する	plt.plot(データ列x, データ列y, color='ivory')
横棒グラフをライトグリーン色で描画する	plt.barh(データ列x, データ列y, color='lightgreen')
オブジェクトがリストの要素か確認する	element in aList
データフレームを2つの列によってによって降順に並べ直す	df.sort_values(by=['A', 'B'], ascending=False)
整数を複素数に変換する	complex(x)
文字列が全てASCII文字	s.isascii()
線グラフの色をネイビーに設定する	plt.plot(データ列x, データ列y, color='navy')
データフレームのカラムの欠損値を直前の値に設定する	df[col].fillna(method='ffill')
貝殻色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='seashell')
データフレームを二つの列によって昇順に破壊的にソートする	df.sort_values(by=['A', 'B'], ascending=True, inplace=True)
散布図の上三角マーカーを青くする	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームの列の文字列が文字列で始まらないデータを抽出する	df[not df[column].str.startswith(s)]
option: 下三角マーカーを描画する	marker = 'v'
タプルの中の最も小さい値	min(aTuple)
折れ線グラフに黒い▼マーカーを描画する	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
データフレームのリストカラムの欠損値を平均に設定する	df[aList].fillna(df[aList].mean())
実数が負の数か	x < 0
折れ線グラフの四角印の大きさを設定する	plt.plot(データ列x, データ列y, marker='s', markersize=2.0)
ヒストグラムをインディゴ色で描画する	plt.hist(データ列, color='indigo')
リストをイミュータブルな集合にする	frozenset(iterable)
サポートベクターマシンとしてクラス分類を行う	model = sklearn.svm.SVR(kernel='rbf', C=1e3, gamma=0.1, epsilon=0.1)
option: エンコーディングを文字コードtextに設定する	encoding = text
データ列を10の位で丸める	ds.round(-1)
折れ線グラフをラベンダー色で描画する	plt.plot(データ列x, データ列y, color='lavender')
ミディアムアクアマリン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumaquamarine')
文字列を最後の部分文字列で分けた時の後半の文字列	s.rpartition(sub)[-1]
プログラムの実行をここで止める	sys.exit()
折れ線グラフをアイボリー色として描画する	plt.plot(データ列x, データ列y, color='ivory')
リストの要素をソートする	sorted(aList)
リストとリストについて散布図を描画して下三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='v', c=rgb)
文字列を黄色でプリントできる文字列に変換する	f'\033[33m{value}\033[0m'
二つの集合は互いに素か調べる	aSet.isdisjoint(aSet2)
ファイル名がテキストファイルか調べる	filename.endswith('.txt')
option: グラフの色をライトシアンに設定する	color = 'lightcyan'
線グラフの色をライムに指定する	plt.plot(データ列x, データ列y, color='lime')
棒グラフの色をライトグリーンにする	plt.bar(データ列x, データ列y, color='lightgreen')
棒グラフをグリーンイエロー色を用いて描画する	plt.bar(データ列x, データ列y, color='greenyellow')
データフレームを列によってソートし、更新する	df.sort_values(by=column, inplace=True)
ふたつの集合の対称差集合	aSet.symmetric_difference(aSet2)
データフレームを複数の列によって昇順に並べて、更新する	df.sort_values(by=column, ascending=True, inplace=True)
耐火レンガ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='firebrick')
データ列の各データが何回出現するか見る	ds.value_counts()
データフレームから列を一つだけ選択する	df[[column]]
整数nの十六進表現	hex(n)
列の中の未入力値の合計を数える	ds.isna().sum()
正規分布の累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
デピンク色で散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
パラメータがマイナス無限大に近づくときの数式の極限値を求める	sympy.limit(e, z, -oo)
文字列の中で正規表現にマッチしたすべての文字列をリストに変換する	re.findall(pattern, s)
本日が日曜日かどうか調べる	datetime.datetime.today().weekday() == 6
スラグレー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='slategray')
棒グラフを淡いピンク色色として描画する	plt.bar(データ列x, データ列y, color='lightpink')
横棒グラフをダークスレートブルー色で描画する	plt.barh(データ列x, データ列y, color='darkslateblue')
option: エクセルファイルのシートの名前をnamesに設定する	sheet_name = names
データフレームのリストカラムの中にある文字列の数をカウントする	df[aList].isin([value]).sum()
赤いダイアモンドマーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='D', c='r')
横棒グラフをミッドナイトブルー色として描画する	plt.barh(データ列x, データ列y, color='midnightblue')
シーケンスの重複組み合せを求める	itertools.combinations_with_replacement(iterable, n)
散布図をオリーブ色で描画する	plt.scatter(データ列x, データ列y, color='olive')
ミディアムスプリンググリーン色でヒストグラムを描画する	plt.hist(データ列, color='mediumspringgreen')
折れ線グラフの色を耐火レンガに設定する	plt.plot(データ列x, データ列y, color='firebrick')
nからn2までのstepごとによるスライス	slice(n, n2, step)
アンサンブル学習で回帰分析を行う	sklearn.ensemble.VotingRegressor()
要素は集合のメンバーに含まれないかどうか調べる	element not in aSet
ミディアムスレートブルー色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumslateblue')
二つの文字列は等しい	s == s2
散布図のマーカーの大きさをnに設定する	plt.scatter(データ列x, データ列y, s=n)
折れ線グラフのポイントマーカーを青色にする	plt.plot(データ列x, データ列y, marker='.', markerfacecolor='b')
縦棒グラフをブルーバイオレット色で描画する	plt.bar(データ列x, データ列y, color='blueviolet')
ヒストグラムをトマト色で描画する	plt.hist(データ列, color='tomato')
カウンタをクリアする	aCounter.clear()
データフレームのカラムのタイムゾーンを文字列に設定する	df[col].tz_convert(s)
分類モデル教師データとしてを学習する	model.fit(説明変数, 目的変数)
イテラブルとリストについて散布図を描画して、マーカーを四角に変更する	plt.plot(データ列x, データ列y, marker='s')
目盛り線	plt.grid(linewidth=3.0)
ミッドナイトブルー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
赤い星マーカーで散布図をプロットする	plt.plot(データ列x, データ列y, marker='*', c='r')
辞書を浅くコピーする	dict(aDict)
ダークマゼンタにヒストグラムの色を指定する	plt.hist(データ列, color='darkmagenta')
option: ブランチドアーモンド色を使用する	color = 'blanchedalmond'
option: マーカーの色をコーンズシルクにする	markerfacecolor = 'cornsilk'
year年day月をタイムスタンプに変換する	datetime.datetime(year=year, month=month, day=1)
y座標の目盛を対数に変更する	plt.yscale('log')
散布図の色をライトブルーにする	plt.scatter(データ列x, データ列y, color='lightblue')
データ列の時刻	ds.dt.hour
要素がスタックの中に含まれてるか調べる	element in deq
実数のn乗の実数剰余	pow(x, n, y)
数を二乗する	x ** 2
データフレームのカラムが何月か見る	df[col].dt.month
日付時刻データと日付時刻データの時間差を秒で求める	(aDatetime - aDatetime2).total_seconds()
折れ線グラフのダイアモンドマーカーを赤くする	plt.plot(データ列x, データ列y, marker='D', markerfacecolor='r')
データ列のNaNをxで埋める	ds.fillna(x)
データフレームのstart行目からend行目までを抽出する	df[start:end]
rgbの四角マーカーをデータ列とリストについての散布図に描く	plt.plot(データ列x, データ列y, marker='s', c=rgb)
option: オリベドラブ色を使う	color = 'olivedrab'
option: ミディアムターコイズにフォントの色をセットする	color = 'mediumturquoise'
双方向キューの最初から値を取り除く	deq.popleft()
散布図をポイントマーカーで描画する	plt.plot(データ列x, データ列y, marker='.')
データフレームを列を用いてソートしてインデックスを振り直す	df.sort_values(columns).reset_index(drop=True)
ファイルパスがないか	not os.path.exists(filepath)
散布図に赤い▽マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='r')
棒グラフの色をアイボリーにする	plt.bar(データ列x, データ列y, color='ivory')
タプルの項目名に対応した値を見る	aDict.get(key)
列をキーにして二つのデータフレームを外部結合する	pd.merge(df, df2, on=column, how='outer')
折れ線グラフの色をミディアムアクアマリンにする	plt.plot(データ列x, データ列y, color='mediumaquamarine')
option: 紺碧に色を設定する	color = 'azure'
ダークオリーブグリーン色として縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkolivegreen')
データフレームを列でグループ化して、列の要約統計量を求める	df.groupby(column).describe()[column2]
線グラフの色をライトシアンに設定する	plt.plot(データ列x, データ列y, color='lightcyan')
二つ並べて箱ひげ図を描く	plt.boxplot([データ列, データ列])
縦棒グラフをコーンズシルク色で描画する	plt.bar(データ列x, データ列y, color='cornsilk')
データフレームを複数の列によってによって破壊的に並べる	df.sort_values(by=column, inplace=True)
データフレームの中で、列と列の重複を削除する	df.drop_duplicates(subset=column)
ヘッダー行を右寄せに変更する	pd.set_option('colheader_justify', 'right')
折れ線グラフの▼マーカーを黒くする	plt.plot(データ列x, データ列y, marker='v', markerfacecolor='k')
配列の内積を求める	np.dot(aArray, aArray2)
ミディアムシアグリーン色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mediumseagreen')
黄色い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='y')
データフレームのリストカラムの中のNaNの個数を数える	df[aList].isna().sum()
二つのカウンタのいずれかに含まれる要素	aCounter | aCounter2
nの二乗	n ** 2
ミッドナイトブルー色でヒストグラムを描画する	plt.hist(データ列, color='midnightblue')
ライトゴールドロディイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightgoldenrodyellow')
アンティークホワイト色のヒストグラムを描画する	plt.hist(データ列, color='antiquewhite')
改行しないで文字列をプリントする	print(value, end='')
二つの集合は集合と互いに素かどうか	aSet.isdisjoint(aSet2)
横棒グラフの色をインディゴにする	plt.barh(データ列x, データ列y, color='indigo')
棒グラフの色をインディアンレッドにする	plt.bar(データ列x, データ列y, color='indianred')
n個にデータ列を分割して、namesのラベルをつける	pd.cut(ds, n, labels=names)
文字列の最初からタブを取り除く	s.lstrip('\t')
全要素を０で初期化した複素数型の行列	np.zeros(行数, 列数, dtype=bool)
option: グレーを使う	color = 'gray'
二つの浮動小数点数が十分に近いか調べる	math.isclose(x, x2)
xの小数点以下'5'桁までを表示する	print(':.5f'.format(x))
ヒストグラムを青色を用いて描画する	plt.hist(データ列, color='blue')
データフレームを二つの列を用いて昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
横棒グラフをミディアムブルー色として描画する	plt.barh(データ列x, データ列y, color='mediumblue')
二つの集合が集合と交わりを持たないかどうか	aSet.isdisjoint(aSet2)
データフレームのリストカラムの欠損値を最大値に変更する	df[aList].fillna(df[aList].max())
リストが空でないか	len(aList) != 0
カラムを10の位で丸めて、整数型にする	ds.round(-1).astype(int)
データ列を二つ並べてヒストグラムにする	plt.hist([データ列, データ列], color=['b', 'r'])
浮動小数点数が整数か調べる	x.is_integer()
イテラブルを文字列リストに変換して、カンマで連結する	','.join(map(str, iterable))
折れ線グラフの△マーカーを青くする	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='b')
データフレームのNaNを最小値で埋める	df.fillna(df.min())
新しい回帰木モデルを用意する	model = sklearn.tree.DecisionTreeRegressor()
データフレームの欠損値を前の行の値に指定する	df.fillna(method='ffill')
option: マーカーの色をフクシアにする	markerfacecolor = 'fuchsia'
スラグレー色でヒストグラムを描画する	plt.hist(データ列, color='slategray')
データフレームの列がxより大きいデータを取り出す	df[df[column] > x]
縦棒グラフをスチールブルー色で描画する	plt.bar(データ列x, データ列y, color='steelblue')
折れ線グラフをネイビー色として描画する	plt.plot(データ列x, データ列y, color='navy')
文字列の右端から部分文字列を除く	s.removesuffix(sub)
カウンタ同士で∪を計算する	aCounter | aCounter2
オレンジ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='orange')
辞書をJSONフォーマットでファイルに保存する	json.dump(aDict, fout, ensure_ascii=False)
データフレームの欠損値を直前の値に設定する	df.fillna(method='ffill')
データフレームを'A'列でグループ化し要約統計量を求める	df.groupby('A').describe()
横棒グラフをダークシアン色で描画する	plt.barh(データ列x, データ列y, color='darkcyan')
散布図の四角印を赤くする	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='r')
日付時刻データがタイムスタンプデータより後ろ	aDatetime > aDatetime2
オブジェクトは整数クラスのインスタンスか調べる	isinstance(obj, int)
データ列を等量でビン数nを用いてビン分割する	pd.qcut(ds, n)
データ列を10の位で四捨五入して、整数にする	ds.round(-1).astype(int)
インプレイスで重複した行をデータフレームから削除する	df.drop_duplicates(inplace=True)
線グラフの色をビスクに設定する	plt.plot(データ列x, データ列y, color='bisque')
最大長nの両端キューを作る	collections.deque(maxlen=n)
option: ダークターコイズにフォントの色を指定する	color = 'darkturquoise'
option: 濃いシアン色を使う	color = 'darkcyan'
ミディアムブルー色として散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumblue')
グローバル変数の一覧	globals()
オールドレースにヒストグラムの色を指定する	plt.hist(データ列, color='oldlace')
ピアソンの積立相関係数を使う	scipy.stats.pearsonr(データ列, データ列2)
配列を分割数nでビンニングする	pd.cut(aArray, n)
セットの全ての要素が別の集合に含まれるか確認する	aSet.issubset(aSet2)
ベクトルの列ごとの平均値	np.mean(aArray, axis=0)
実数の角度	math.degrees(x)
オールドレース色でヒストグラムを描画する	plt.hist(データ列, color='oldlace')
nがn2以下、または、n3以上か調べる	n <= n2 or n >= n3
イテラブルとリストについて散布図を描画して、マーカーを丸に指定する	plt.plot(データ列x, データ列y, marker='o')
直前の値でデータフレームの欠損値を補う	df.fillna(method='ffill')
クラスのサブクラスか調べる	issubclass(サブクラス, クラス)
ターコイズ色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='turquoise')
データフレームのn行目を破壊的に消す	df.drop(n, axis=0, inplace=True)
折れ線グラフに赤い上三角印を描画する	plt.plot(データ列x, データ列y, marker='^', markerfacecolor='r')
データ列を10の位で四捨五入して、整数型にする	ds.round(-1).astype(int)
現在のタイムスタンプ	datetime.datetime.today()
行列の行列積	np.matmul(aArray, aArray2)
数値を変数について微分する	sympy.diff(e, z)
文字列が部分文字列で終わるか判定する	s.endswith(sub)
列を文字列リストに変換してカンマを使って一つにする	','.join(map(str, iterable))
option: 色をネイビーに指定する	color = 'navy'
小数点数が有限	math.isfinite(x)
データ列の月	ds.dt.month
線グラフの色をミディアムシアグリーンに指定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
データフレームのリストカラムを四捨五入する	df[aList].round()
積み上げ棒プロットを描画する	plt.bar(ラベル列, データ列, bottom=データ列y, color='#800080')
データフレームをグループ化し各列に対し分散を算出する	df.groupby(column)[column2].var()
折れ線グラフを赤い実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', color='r')
モカシン色でヒストグラムを描画する	plt.hist(データ列, color='moccasin')
未定値	None
ヒストグラムと勾配ブースティングを用いて回帰分析を行う	model = sklearn.ensemble.HistGradientBoostingRegressor()
データフレームの中に文字列と文字列があるか調べる	df.isin([value, value2])
option: 真紅に色を変更する	color = 'crimson'
タイムスタンプデータが水曜日か	aDatetime.weekday() == 2
nがn2よりも大きいか調べる	n > n2
横棒グラフをブルーバイオレット色で描画する	plt.barh(データ列x, データ列y, color='blueviolet')
データフレームを列によってグループ化して、列挙する	[(name, group) for name, group in df.groupby(column)]
日付データが日付データより先か調べる	aDate < aDate2
option: マーカーの色をディープスカイブルーにする	markerfacecolor = 'deepskyblue'
ディープスカイブルー色でヒストグラムを描画する	plt.hist(データ列, color='deepskyblue')
組をソートする	sorted(aTuple)
文字列をマゼンタにする	f'\033[35m{value}\033[0m'
データフレームを散布図を用いて可視化する	sns.scatterplot(data=df, x='列名', y='列名')
リストとリストについての散布図にrgbの丸マーカーを描画する	plt.plot(データ列x, データ列y, marker='o', c=rgb)
スノー色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='snow')
TSVファイルを読み込む	pd.read_csv(filename, sep='\t', encoding='shift_jis')
線グラフを破線に指定する	plt.plot(データ列x, データ列y, linestyle='dashed')
ダークブルー色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
折れ線グラフをインディゴ色で描画する	plt.plot(データ列x, データ列y, color='indigo')
リストとリストについての散布図を大きさnで描く	plt.scatter(データ列x, データ列y, s=n)
日付データからn秒分減らす	aDate - datetime.timedelta(seconds=n)
横棒グラフをバリーウッド色として描画する	plt.barh(データ列x, データ列y, color='burlywood')
多次元データを多次元尺度構成法を用いてパステル調に次元に次元削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
両端キューをリストに変換する	list(deq)
ビスク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='bisque')
スタックの左から要素を取り除く	deq.popleft()
折れ線グラフをミディアムスプリンググリーン色で描画する	plt.plot(データ列x, データ列y, color='mediumspringgreen')
ファイルをUTF8で書き込み用に開く]	open(filepath, mode='w', encoding='utf-8')
ライトサーモン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
実行時の標準出力の出力先がターミナル	os.isatty(sys.stdin.fileno())
マッピングをコピーする	aDict.copy()
文字列の最初	s[0]
整数nの8進表現	oct(n)
ヒストグラムの色をライトスカイブルーに設定する	plt.hist(データ列, color='lightskyblue')
青い実線でラインを描く	plt.plot(データ列x, データ列y, linestyle='solid', color='b')
関数によってデータフレームをグループ化し、要約統計量を求める	df.groupby(関数).describe()
散布図のダイアモンドマーカーの大きさを変える	plt.scatter(データ列x, データ列y, marker='D', markersize=2.0)
ヒストグラムを青緑色として描画する	plt.hist(データ列, color='turquoise')
データ列の欠損値を直後の値で埋める	ds.fillna(method='bfill')
サドルブラウン色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='saddlebrown')
辞書からキーの値をエラーなく得る	aDict.get(key, None)
青色でリストをプリントする	print(f'\033[34m{value}\033[0m')
option: 3二ビット整数型を使う	dtype = np.int16
黒い四角マーカーを用いて散布図を描画する	plt.plot(データ列x, データ列y, marker='s', c='k')
フクシア色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='fuchsia')
折れ線グラフの色をシスルに設定する	plt.plot(データ列x, データ列y, color='thistle')
横棒グラフをやわらかい青色で描画する	plt.barh(データ列x, データ列y, color='cornflowerblue')
値をシアンにする	f'\033[36m{value}\033[0m'
横軸だけグリッド線	plt.grid(axis='x')
棒グラフをターコイズ色として描画する	plt.bar(データ列x, データ列y, color='turquoise')
カラムの中に含まれる文字列の個数を数える	ds.isin([value]).sum()
横棒グラフをディープスカイブルー色を用いて描画する	plt.barh(データ列x, データ列y, color='deepskyblue')
グラフを画像ファイルとして保存する	plt.savefig('foo.png')
棒グラフをシャルトリューズ色で描画する	plt.bar(データ列x, データ列y, color='chartreuse')
折れ線グラフに黒いバツマーカーを描画する	plt.plot(データ列x, データ列y, marker='x', markerfacecolor='k')
option: レモンシフォン色を使う	color = 'lemonchiffon'
数列とリストについて散布図を描いて、マーカーを下三角に設定する	plt.plot(データ列x, データ列y, marker='v')
option: グラフの色をスプリンググリーンに設定する	color = 'springgreen'
ペアリストpairsからカウンタを作る	collections.Counter(dict(pairs))
散布図の四角マーカーの大きさを設定する	plt.scatter(データ列x, データ列y, marker='s', markersize=2.0)
分類モデルの再現率を求める	sklearn.metrics.recall_score(正解データ列, 予測データ列)
ラベンダー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lavender')
等しい量になるようにn個に配列をビン分割する	pd.qcut(aArray, n)
Pandasでデータフレームのcollをフォーマットでdatetime64型にする	pd.to_datetime(df[col], format='%Y-%m-%d')
カウンタからイテラブルをカウントして引く	aCounter.subtract(iterable)
文字列が文字列より辞書順で後	s > s2
文字列の中で大文字・小文字を無視して正規表現にマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
日付データからn週間を引く	aDate - datetime.timedelta(weeks=n)
黒い上三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='^', markerfacecolor='k')
暗い赤色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkred')
横棒グラフをダークサーモン色を用いて描画する	plt.barh(データ列x, データ列y, color='darksalmon')
データフレームのカラムのpercent分位数を求める	df[col].quantile(percent/100)
nが1もしくは2、もしくは3に等しいか調べる	n == 1 or n == 2 or n == 3
横棒グラフを珊瑚色で描画する	plt.barh(データ列x, データ列y, color='coral')
赤い丸マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
option: コーンズシルク色を使用する	color = 'cornsilk'
データフレームのカラムの欠損値をモードで補う	df[col].fillna(df[col].mode().iloc[0])
多次元データをt分布型確率的近傍埋め込み法でパステル調に次元に削減する	sklearn.manifold.TSNE(n_components=N).fit_transform(多次元データ)
option: オレンジレッドに色を設定する	color = 'orangered'
中央値でデータフレームのカラムの欠損値を補う	df[col].fillna(df[col].median())
文字列中にひとつでも非英字が含まれるか調べる	any(not c.isalpha() for c in s)
option: マーカーの色をマルーンにする	markerfacecolor = 'maroon'
nがn2よりも大きい	n > n2
option: パレットトルコイズ色を使う	color = 'paleturquoise'
をモジュールを検索するパスに追加する	sys.path.append(dir)
option: ライトシアンを使用する	color = 'lightcyan'
列'A'と列'B'をキーとして２つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
option: ベクトルのデータ型を指定する	dtype = np.int32
データフレームの値を正規表現patternで一度にreplに置き換える	df.replace(pattern, repl, regex=True)
辞書のキーを列挙する	aDict.keys()
行列の列ごとの分散	np.var(aArray, axis=0)
散布図に左三角印を使う	plt.scatter(データ列x, データ列y, marker='<')
option: マーカーの色をブラックにする	markerfacecolor = 'black'
まとめてValueMapでデータフレームのリストカラムの値を置き換える	df[aList].replace(ValueMap)
ライトイエロー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightyellow')
文字列を右寄せにする	s.rjust(文字列幅)
二つの関係がスーパーセットもしくは等しいかどうか調べる	aSet > aSet2
データフレームのカラムを1000の位で丸める	df[col].round(-3)
散布図の△印の線幅を指定する	plt.scatter(データ列x, データ列y, marker='^', markeredgewidth=2.5)
グラフで使うカラーパレットを指定する	sns.set(pallete=パレット名)
リストとリストについての散布図に赤い大バツマーカーを描く	plt.plot(データ列x, データ列y, marker='X', c='r')
1からnまでの整数リスト	list(range(1, n+1))
nにn2を加える	n + n2
データフレームのカラムの中にいくつ欠損値があるか数える	df[col].isna().sum()
縦棒グラフをペールグリーン色で描画する	plt.bar(データ列x, データ列y, color='palegreen')
折れ線グラフの色をプラムに設定する	plt.plot(データ列x, データ列y, color='plum')
リストとリストの散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
列と列の直積	itertools.product(iterable, iterable2)
棒グラフの色を設定する	plt.bar(ラベル列, データ列, color=rgb)
ユーザから入力される	input()
データフレームの中で、列と列の重複を見る	df.duplicated(subset=[column, column2])
現在が火曜日か調べる	datetime.datetime.today().weekday() == 1
最後の部分文字列で文字列を二分し、前半の文字列を見る	s.rpartition(sub)[0]
最大値・最小値の範囲で一様な乱数を生成する	random.uniform(最小値, 最大値)
option: マーカーの色をアクアマリンにする	markerfacecolor = 'aquamarine'
文字列が全て空白文字	s.isspace()
option: 未入力値は無視する	dropna = True
文字列が全てアルファベット	s.isalpha()
星印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='*')
データ列とリストについての散布図に三角マーカーを描く	plt.plot(データ列x, データ列y, marker='^')
データフレームのカラムの曜日が何日目か確認する	df[col].dt.dayofweek
n個にリストを等間隔でビン分割する	pd.cut(aList, n)
半透明の点線を用いてデータ列の移り変わりを描画する	plt.plot(データ列x, データ列y, linestyle='dotted', alpha=0.5)
散布図の色をスラグレーにする	plt.scatter(データ列x, データ列y, color='slategrey')
折れ線グラフのポイント印の太さを指定する	plt.plot(データ列x, データ列y, marker='.', markeredgewidth=2.5)
連番の行列の作成する	np.arange(開始値, 終了値, 等差)
ライトイエロー色のヒストグラムを描画する	plt.hist(データ列, color='lightyellow')
四分位数で配列をビニングする	pd.qcut(aArray, 4)
ボックスチャートでデータ列を可視化する	plt.boxplot(データ列)
n個の数値イテラブルを使う	range(n)
データフレームのカラムの値が欠損値	df[col].isna()
一点鎖線でデータ列の変遷を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot')
散布図をペルー色で描画する	plt.scatter(データ列x, データ列y, color='peru')
ダークスレートブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslateblue')
グラフの凡例を表示する	plt.legend()
目盛り線	plt.grid(alpha=0.5)
行列の列ごとの最小値を計算する	np.min(aArray, axis=0)
既存のファイルを追加できるようにUTF8を用いてオープンする]	open(filepath, mode='a', encoding='utf-8')
数列とリストの散布図を描画して、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
データフレームのカラムの未入力値を平均値で埋める	df[col].fillna(df[col].mean())
散布図の色をペールグリーンにする	plt.scatter(データ列x, データ列y, color='palegreen')
バリーウッド色のヒストグラムを描画する	plt.hist(データ列, color='burlywood')
空白文字を使う	' '
折れ線グラフの△印の大きさを変更する	plt.plot(データ列x, データ列y, marker='^', markersize=2.0)
棒グラフを小麦色色を用いて描画する	plt.bar(データ列x, データ列y, color='wheat')
option: ディムグレーを使用する	color = 'dimgray'
シアン色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='cyan')
ヒストグラムをビスク色で描画する	plt.hist(データ列, color='bisque')
シスル色を使って折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='thistle')
option: スプリンググリーンに色を指定する	color = 'springgreen'
バツマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='x')
option: ミディアムアクアマリンにグラフの色を変更する	color = 'mediumaquamarine'
option: 印を右三角に変更する	marker = '>'
オプションで、出力先を標準エラーにセットする	file = sys.stderr
折れ線グラフの印を▼印にする	plt.plot(データ列x, データ列y, marker='v')
三つのデータフレームを横方向に連結する	pd.concat([df, df2, df3], axis=1)
黒い丸印を折れ線グラフに描画する	plt.plot(データ列x, データ列y, marker='o', markerfacecolor='k')
10を底とする実数の対数を求める	math.log10(x)
折れ線グラフの大バツ印の色を変更する	plt.plot(データ列x, データ列y, marker='X', markerfacecolor='#800080')
青紫色の線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
文字列の左側の文字を見る	s[0]
データフレームのカラムは何月か見る	df[col].dt.month
棒グラフを白色を使って描画する	plt.bar(データ列x, データ列y, color='white')
リストの推移を青い点線で描画する	plt.plot(データ列x, データ列y, linestyle='dotted', color='b')
rgbの三角マーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
散布図の色をパウダーブルーにする	plt.scatter(データ列x, データ列y, color='powderblue')
ヒストグラムの色を貝殻に指定する	plt.hist(データ列, color='seashell')
データを外れ値にロバストな標準化を行う	sklearn.preprocessing.RobustScaler().fit_transform(データ)
option: フォントの色をミディアムターコイズに設定する	color = 'mediumturquoise'
TSVファイルを文字化けしないように読み込む	pd.read_csv(filename, encoding='shift_jis')
実数の逆正弦を計算する	math.asin(x)
散布図の色をオレンジレッドにする	plt.scatter(データ列x, データ列y, color='orangered')
ファイルパスの区切り記号を使う	os.sep
リストとデータ列について散布図を描画して、マーカーを大バツに指定する	plt.plot(データ列x, データ列y, marker='X')
リストのn番目の値を削除する	del aList[n]
ヒストグラムを描画してビン数を設定する	plt.hist(データ列, bins=区関数)
ヒストグラムの色をインディゴに変更する	plt.hist(データ列, color='indigo')
改行する	print()
リスト中の最初の文字列を探す	aList.index(element)
散布図に黒い下三角マーカーを使う	plt.plot(データ列x, データ列y, marker='v', c='k')
option: ダーク・スラテグレー色を使う	color = 'darkslategrey'
補足の位置を(x,y)に指定する	plt.legend(loc=(x, y))
データフレームを'A'列と'B'列によってによって破壊的にソートする	df.sort_values(by=['A', 'B'], inplace=True)
文字列中にひとつでも非ASCII文字が含まれるかどうか調べる	any(not c.isascii() for c in s)
ヒストグラムの色をサンディーブラウンに変更する	plt.hist(データ列, color='sandybrown')
横棒グラフの色をブルーバイオレットにする	plt.barh(データ列x, データ列y, color='blueviolet')
データ列を四分位数でビン分割する	pd.qcut(ds, 4)
列を中央値でビニングする	pd.qcut(ds, 2)
セットを更新不能な集合にする	frozenset(aSet)
KNNを用いて回帰分析を行う	model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=5)
時計回りに円プロットを描画する	plt.pie(データ列, startangle=90, counterclock=False)
マッピングの項目名とその値を列挙する	aDict.items()
ポイントマーカーを散布図に使用する	plt.plot(データ列x, データ列y, marker='.')
文字列を末尾から空白で区切る	s.rsplit()
ペールグリーン色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='palegreen')
折れ線グラフをダークゴールデンロッド色として描画する	plt.plot(データ列x, データ列y, color='darkgoldenrod')
ファイルパスを書き込み用にオープンして]、fとする	f = open(filepath, mode='w')
nの二進表現	bin(n)
タプルから項目名の値か、もしくは要素を参照する	aDict.get(key, element)
タプルの最初のn要素を取り除く	aTuple[n:]
文字列を紫色で表示できる文字列に変換する	f'\033[35m{value}\033[0m'
折れ線グラフをライトブルー色として描画する	plt.plot(データ列x, データ列y, color='lightblue')
散布図の色をダークスラテグレーにする	plt.scatter(データ列x, データ列y, color='darkslategray')
データフレームのそれぞれのグループの平均値を求める	df.groupby(column).mean()
折れ線グラフの色をミディアムシアグリーンに設定する	plt.plot(データ列x, データ列y, color='mediumseagreen')
ヒストグラムをライトグレー色を使って描画する	plt.hist(データ列, color='lightgrey')
ライトサーモン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
データ列が正規分布からどの程度尖っているか見る	ds.skew()
リストとリストについて散布図を描画して、文字列という凡例用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームのカラムの正規分布に対する上下広がり	df[col].skew()
カデットブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='cadetblue')
ヒストグラムの色をミントクリームに変更する	plt.hist(データ列, color='mintcream')
縦棒グラフをローングリーン色として描画する	plt.bar(データ列x, データ列y, color='lawngreen')
バイオレット色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='violet')
option: パパイヤウィップ色を使う	color = 'papayawhip'
ヒストグラムをクリムゾン色で描画する	plt.hist(データ列, color='crimson')
横棒グラフをディムグレー色として描画する	plt.barh(データ列x, データ列y, color='dimgray')
散布図に右三角印を加える	plt.scatter(データ列x, データ列y, marker='>')
データ列の欠損値を50パーセンタイルに設定する	ds.fillna(ds.median())
行列の行ごとの最小を計算する	np.min(aArray, axis=1)
イテラブルからn個、サンプリングする	random.sample(iterable, k=n)
棒グラフをカーキ色で描画する	plt.bar(データ列x, データ列y, color='khaki')
ダークスラテグレー色として線グラフを描画する	plt.plot(データ列x, データ列y, color='darkslategray')
ロバスト推定で回帰分析を行う	model = sklearn.linear_model.RANSACRegressor(random_state=0)
グラフのフォントを日本語表示に設定する	sns.set(font='IPAexGothic')
Pandasで、データフレームのカラムをインデックスにする	df.set_index(col, inplace=True)
散布図の色をミディアムオーキッドにする	plt.scatter(データ列x, データ列y, color='mediumorchid')
option: レベッカパープルを使用する	color = 'rebeccapurple'
折れ線グラフの色をスノーに設定する	plt.plot(データ列x, データ列y, color='snow')
エラーを無視して文字列をバイト列に変換する	s.encode(errors='ignore')
日付データからn日分、減らす	aDate - datetime.timedelta(days=n)
データフレームを二つの列によって昇順にソートする	df.sort_values(by=['A', 'B'], ascending=True)
ヒストグラムをパールゴールデンロッド色で描画する	plt.hist(データ列, color='palegoldenrod')
リストとリストについて散布図を描画して、四角マーカーの色をrgbに設定する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
デピンク色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='deeppink')
year年month月day日hour時の日付時刻	datetime.datetime(year=year, month=month, day=day, hour=hour)
option: グラフの色をベージュに設定する	color = 'beige'
折れ線グラフのアルファ値をセットする	plt.plot(データ列x, データ列y, alpha=0.5)
折れ線グラフの色をパープルに変更する	plt.plot(データ列x, データ列y, color='purple')
日付データが月曜日か調べる	aDate.weekday() == 0
データ列の曜日の名前	ds.dt.weekday_name
文字列を表示する	print(value)
option: 行を自動的な連番に設定する	index_col = None
折れ線グラフの色を淡いピンク色に設定する	plt.plot(データ列x, データ列y, color='lightpink')
散布図をrgbのクロスマーカーを使って描画する	plt.plot(データ列x, データ列y, marker='x', c=rgb)
アクア色の散布図を描画する	plt.scatter(データ列x, データ列y, color='aqua')
折れ線グラフの色をホワイトスモークに設定する	plt.plot(データ列x, データ列y, color='whitesmoke')
option: マーカーの色をダークグリーンにする	markerfacecolor = 'darkgreen'
縦棒グラフの色を白にする	plt.bar(データ列x, データ列y, color='white')
オブジェクトが数値か	isinstance(obj, (int,float))
十六進文字列を整数に変換する	int(s, 16)
縦棒グラフをロージーブラウン色で描画する	plt.bar(データ列x, データ列y, color='rosybrown')
リネン色としてヒストグラムを描画する	plt.hist(データ列, color='linen')
ヒストグラムの色をブルーバイオレットに設定する	plt.hist(データ列, color='blueviolet')
線グラフをプラム色で描画する	plt.plot(データ列x, データ列y, color='plum')
散布図をオールドレース色で描画する	plt.scatter(データ列x, データ列y, color='oldlace')
option: 線の種類を点線にセットする	linestyle = 'dotted'
日付データをn日前に戻す	aDate - datetime.timedelta(days=n)
行列の行ごとの合計値を求める	np.sum(aArray, axis=1)
イテラブルとリストについて散布図を描画して、文字列というデータラベル用のラベルを付ける	plt.scatter(データ列x, データ列y, label=s)
データフレームのインデックスを振り直す	df.reset_index()
散布図をダークゴールデンロッド色で描画する	plt.scatter(データ列x, データ列y, color='darkgoldenrod')
データフレームを列名リストを用いてソートし、、NaNを先頭にする	df.sort_values(by=column, na_position='first')
数を小数点以下で丸める	round(x, n)
データフレームを各列と列の組み合わせ毎にグループ化して最小値を求める	df.groupby([column, column2], as_index=False).min()
ヒストグラムの色をパールゴールデンロッドに設定する	plt.hist(データ列, color='palegoldenrod')
2つの辞書を階層的につなぐ	collections.ChainMap(aDict, aDict2)
nがn2以上か調べる	n >= n2
半透明の一点鎖線としてリストの推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', alpha=0.5)
オブジェクトの参照カウント	sys.getrefcount(obj)
データフレームを表示するとき、表示できる最大列数を変更する	pd.set_option('display.max_columns', n)
分子n、分母mの分数を作成する	fractions.Fraction(numerator=n, denominator=m)
データ列の折れ線グラフを下三角印で描画する	plt.plot(データ列x, データ列y, marker='v')
折れ線グラフの色をパープルに設定する	plt.plot(データ列x, データ列y, color='purple')
散布図にrgbの三角マーカーを使う	plt.plot(データ列x, データ列y, marker='^', c=rgb)
option: グラフの色をミディアムバイオレットレッドに変更する	color = 'mediumvioletred'
ホットピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='hotpink')
正規分布に基づく累積分布関数の逆関数	scipy.stats.norm.cdf(x, loc=平均値, scale=標準偏差)
黒い右三角マーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='>', markerfacecolor='k')
ヒストグラムの色をグレーにする	plt.hist(データ列, color='grey')
文字列をコロンで分割して列挙する	s.split(':')
データ列と配列について散布図を描いてマーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
マップの項目数	len(aDict)
JSON形式の文字列を辞書に変換する	json.loads(jsonString)
赤い破線でデータ列の推移を描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='r')
ゴールデンロッド色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='goldenrod')
文字列が英数字	s.isalnum()
ガンマ関数の値	math.gamma(x)
既存のベクトルを元に全要素が1の行列	np.ones_like(aArray)
option: グラフの色をアクアマリンに設定する	color = 'aquamarine'
セットが空でないか	len(aSet) != 0
線グラフの色をライトコーラルに設定する	plt.plot(データ列x, データ列y, color='lightcoral')
散布図の色を淡いピンク色にする	plt.scatter(データ列x, データ列y, color='lightpink')
タイムスタンプデータが木曜日かどうか調べる	aDatetime.weekday() == 3
標準入力から1行改行なしに読む	sys.stdin.readline().rstrip()
散布図のポイントマーカーを青くする	plt.scatter(データ列x, データ列y, marker='.', markerfacecolor='b')
ヒストグラムの色を真紅に設定する	plt.hist(データ列, color='crimson')
線グラフの色を赤に指定する	plt.plot(データ列x, データ列y, color='red')
プラットホーム名	sys.platform
赤い散布図を描画する	plt.scatter(データ列x, データ列y, color='r')
スラグレー色を用いて縦棒グラフを描画する	plt.bar(データ列x, データ列y, color='slategrey')
線グラフの色をスラグレーに設定する	plt.plot(データ列x, データ列y, color='slategray')
整数nを十六進文字列にする	hex(n)[2:]
折れ線グラフの色をピーチパフに設定する	plt.plot(データ列x, データ列y, color='peachpuff')
文字列リストを結合してひとつの文字列にする	''.join(aStringList)
option: ダークブルー色を使用する	color = 'darkblue'
option: フォントの色をインディアンレッドに変更する	color = 'indianred'
変数名を項目名として、辞書を用意する	dict(name=element)
データフレームの値が欠損値か調べる	df.isna()
option: マーカーの色をペルーにする	markerfacecolor = 'peru'
配列の最小値	np.min(aArray)
折れ線グラフにポイント印を加える	plt.plot(データ列x, データ列y, marker='.')
option: グラフの色をミディアムアクアマリンに設定する	color = 'mediumaquamarine'
データフレームの列の種類	df.info()
データフレームのカラムの中にいくつ欠損値が含まれるか数える	df[col].isna().sum()
折れ線グラフの透明度を設定する	plt.plot(データ列x, データ列y, alpha=0.5)
横棒グラフをダーク・スラテグレー色で描画する	plt.barh(データ列x, データ列y, color='darkslategrey')
option: 箱ひげ図を横方向にする	vert = False
リストを分割する	pd.cut(aList, aList)
ヒストグラムの色をローングリーンに設定する	plt.hist(データ列, color='lawngreen')
要素がマッピングの値に含まれていない	element not in aDict.values()
JSON形式の文字列を読み込む	json.loads(jsonString)
線グラフを青い破線で描画する	plt.plot(データ列x, データ列y, linestyle='dashed', color='b')
データフレームの欠損値を最頻値に設定する	df.fillna(df.mode().iloc[0])
option: シアン色を用いる	color = 'cyan'
正規表現patternでデータフレームの列の値をまとめてreplに変更する	df[col].replace(pattern, repl, regex=True)
タプルのn番目のの値	aTuple[n]
ヒストグラムを紺碧色を用いて描画する	plt.hist(データ列, color='azure')
リストとリストについての散布図にrgbの右三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='>', c=rgb)
データ列の要約統計量	ds.describe()
棒グラフをダークレッド色で描画する	plt.bar(データ列x, データ列y, color='darkred')
nが一桁の整数か調べる	-9 <= n <= 9
実数を数で割って、小数点以下を切り捨てる	x // y
データフレームを複数の列の値で集約する	df.groupby(columns)
行列の行ごとの最大値	np.max(aArray, axis=1)
ゲインズボロにヒストグラムの色を設定する	plt.hist(データ列, color='gainsboro')
標準入力から1文字だけ読む	sys.stdin.read(1)
イテラブルを文字列に変換して連結する	''.join(map(str, iterable))
文字列の中で大文字・小文字を無視してパターンにマッチした全ての文字列をリストに変換する	re.findall(pattern, s, flags=re.IGNORECASE)
リストとリストの散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
白いヒストグラムを描画する	plt.hist(データ列, color='w')
option: 決定木の深さを制限する	maxdepth = n
データフレームのカラムのNaNを平均値で補う	df[col].fillna(df[col].mean())
リストとデータ列について散布図を描画し、、三角マーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='^', c=rgb)
ミッドナイトブルー色として棒グラフを描画する	plt.bar(データ列x, データ列y, color='midnightblue')
10を底とする対数	math.log10(x)
イテラブルを累加した列	itertools.accumulate(iterable)
ファイル名がCSVファイルか調べる	filename.endswith('.csv')
option: 色をダークグレーに指定する	color = 'darkgray'
option: ライム色を使う	color = 'lime'
ライトスレイグレー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightslategray')
プラム色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
配列と配列について散布図をプロットし、、大バツマーカーの色をrgbに指定する	plt.plot(データ列x, データ列y, marker='X', c=rgb)
正則化付き線形回帰分析を行う	model = sklearn.linear_model.ElasticNet()
プラム色の散布図を描画する	plt.scatter(データ列x, データ列y, color='plum')
Pandasで、データ列を書式としてPandasの日付型にする	pd.to_datetime(ds, format='%Y-%m-%d')
日付データが月曜日か確認する	aDate.weekday() == 0
データフレームのリスト列の未入力値を直前の値に設定する	df[aList].fillna(method='ffill')
下三角印を使って散布図を描画する	plt.scatter(データ列x, データ列y, marker='v')
クラス分類をヒストグラムと勾配ブースティングを用いてする	model = sklearn.ensemble.HistGradientBoostingClassifier()
折れ線グラフの色をコーラルに指定する	plt.plot(データ列x, データ列y, color='coral')
縦棒グラフをライトサーモン色で描画する	plt.bar(データ列x, データ列y, color='lightsalmon')
列とイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
コマンドの第二引数を知る	sys.argv[1]
部分文字列が文字列の開始位置以降に含まれるか調べる	s.find(sub, start) != -1
代数計算モジュールを使用する	import sympy
データフレームを表示するとき、n列までデータフレームを表示可能なようにする	pd.set_option('display.max_columns', n)
両端キューをイテラブルから作る	collections.deque(iterable)
データフレームの中のNaNを削除する	df.dropna()
ゴーストホワイト色の線グラフを描画する	plt.plot(データ列x, データ列y, color='ghostwhite')
赤い丸マーカーをリストとリストについての散布図に描画する	plt.plot(データ列x, データ列y, marker='o', c='r')
スクリプトファイルと同じディレクトリのファイルのパス	os.path.join(os.path.dirname(os.path.abspath(__file__)), filepath)
ふたつの集合は互いに素か調べる	aSet.isdisjoint(aSet2)
文字列中のタブ文字を空白に置換する	s.expandtabs(tabsize=n)
データフレームの値が欠損値	df.isna()
マゼンタ色の散布図を描画する	plt.scatter(データ列x, データ列y, color='magenta')
棒グラフをダークカーキ色を用いて描画する	plt.bar(データ列x, データ列y, color='darkkhaki')
パパイヤウィップ色を用いて折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='papayawhip')
縦棒グラフを描画して、バーの横幅を調整する	plt.bar(ラベル列, データ列, width=0.5)
紺色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkblue')
シーグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='seagreen')
第二コマンド引数	sys.argv[1]
横棒グラフをインディゴ色として描画する	plt.barh(データ列x, データ列y, color='indigo')
n2がn以上、かつn3以下かどうか調べる	n <= n2 and n2 <= n3
サンディーブラウン色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='sandybrown')
リストを境界値としてデータ列を分割する	pd.cut(ds, aList)
散布図の四角マーカーの色を指定する	plt.scatter(データ列x, データ列y, marker='s', markerfacecolor='#800080')
リストとリストの散布図にrgbの四角マーカーを描画する	plt.plot(データ列x, データ列y, marker='s', c=rgb)
データ列を百の位で四捨五入して、整数型にする	ds.round(-2).astype(int)
スピアマンでデータフレームの列と列の相関行列	df[[column, column2]].corr(method='spearman')
やわらかい青色としてヒストグラムを描画する	plt.hist(データ列, color='cornflowerblue')
ダークバイオレットにヒストグラムの色を指定する	plt.hist(データ列, color='darkviolet')
列'A'と列'B'をキーとして二つのデータフレームを外部結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='outer')
option: 改行なし	end = ''
箱髭図を描画して、平均値を加える	plt.boxplot(データ列, showmeans=True)
ブルーバイオレット色を使って横棒グラフを描画する	plt.barh(データ列x, データ列y, color='blueviolet')
棒グラフをライトコーラル色で描画する	plt.bar(データ列x, データ列y, color='lightcoral')
option: グラフの色をスチールブルーに設定する	color = 'steelblue'
折れ線グラフを青い一点鎖線で描画する	plt.plot(データ列x, データ列y, linestyle='dashbot', color='b')
縦軸の目盛の値を変更する	plt.yticks(目盛りの値リスト)
option: 色をフォレストグリーンにセットする	color = 'forestgreen'
整数nの十六進数文字列	hex(n)[2:]
データフレームをグループ化し、各列に対し個数を求める	df.groupby(column)[column2].count()
Pandasで、データ列のエポック秒からdatetime64型に変換する	pd.to_datetime(ds, unit='s', utc=True)
option: マーカーを三角に変更する	marker = '^'
折れ線グラフの左三角印を赤くする	plt.plot(データ列x, データ列y, marker='<', markerfacecolor='r')
ミスティローズ色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='mistyrose')
ライトゴールドロディイエロー色で散布図を描画する	plt.scatter(データ列x, データ列y, color='lightgoldenrodyellow')
散布図をライトグリーン色を用いて描画する	plt.scatter(データ列x, データ列y, color='lightseagreen')
部分文字列が文字列の終了位置より前にある	s.find(sub, 0, end) != -1
配列をビン数nでビン分割して、namesのラベルをつける	pd.cut(aArray, n, labels=names)
線グラフの色を濃い青に設定する	plt.plot(データ列x, データ列y, color='darkblue')
ファイルからnという名前のシートをデータフレームとして読み込む	pd.read_excel(filename, sheet_name=n)
折れ線グラフの色を黄色に変更する	plt.plot(データ列x, データ列y, color='yellow')
オブジェクトが名前付きタプル型か調べる	hasattr(obj, '_asdict') and hasattr(obj, '_fields')
文字列の末尾	s[-1]
データ列の相関係数を求める	scipy.stats.pearsonr(データ列, データ列2)
紺碧色で折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='azure')
データフレームのカラムを日付データに変換し、インデックスにする	df.index = pd.DatetimeIndex(pd.to_datetime(df[col]))
データ列は何時か調べる	ds.dt.hour
散布図に▽マーカーを使う	plt.scatter(データ列x, データ列y, marker='v')
option: マーカーの色をミディアムパープルにする	markerfacecolor = 'mediumpurple'
データフレームを一度に小数点以下n桁で丸める	df.round(n)
線グラフの色を淡いピンク色に変更する	plt.plot(データ列x, データ列y, color='lightpink')
ヒストグラムと勾配ブースティングで回帰分析をする	model = sklearn.ensemble.HistGradientBoostingRegressor()
折れ線グラフに丸印を使用する	plt.plot(データ列x, データ列y, marker='o')
ライム色のヒストグラムを描画する	plt.hist(データ列, color='lime')
ヒストグラムをオレンジレッド色を用いて描画する	plt.hist(データ列, color='orangered')
ディムグレー色のヒストグラムを描画する	plt.hist(データ列, color='dimgrey')
浮動小数点数の自然対数	math.log(x)
シーグリーン色でヒストグラムを描画する	plt.hist(データ列, color='seagreen')
タイムスタンプデータとタイムスタンプデータの時間差を秒数で求める	(aDatetime - aDatetime2).total_seconds()//60
option: 色をライトコーラルに設定する	color = 'lightcoral'
データフレームのカラムがどの程度分散しているか確認する	df[col].var()
散布図にダイアモンドマーカーを用いる	plt.scatter(データ列x, データ列y, marker='D')
カテゴリで色分けして、データフレームを回帰直線付き散布図にする	sns.regplot(x='列名', y='列名', hue='カテゴリ列', data=df)
折れ線グラフをイエローグリーン色で描画する	plt.plot(データ列x, データ列y, color='yellowgreen')
リストとリストについて散布図を描画して、マーカーを左三角に設定する	plt.plot(データ列x, データ列y, marker='<')
カウンタのユニークな文字列をリストとして得る	list(aCounter)
数列とリストについての散布図に大バツマーカーを描画する	plt.plot(データ列x, データ列y, marker='X')
要素がセットの要素	element in aSet
数列をヒストグラムにする	plt.hist(データ列)
散布図のマーカーを▽にする	plt.scatter(データ列x, データ列y, marker='v')
データラベルをグラフの表示する	plt.legend()
多次元尺度構成法を用いてパステル調に次元に削減する	sklearn.manifold.MSD(n_components=N).fit_transform(多次元データ)
ベクトルの最小値を求める	np.min(aArray)
集合の全ての要素が別の集合に含まれる	aSet.issubset(aSet2)
線グラフの色をダークバイオレットに設定する	plt.plot(データ列x, データ列y, color='darkviolet')
プログラムのファイルの名前	sys.argv[0]
パウダーブルー色のヒストグラムを描画する	plt.hist(データ列, color='powderblue')
Pandasのバージョンを表示する	print(pd.__version__)
棒グラフの色を青にする	plt.bar(データ列x, データ列y, color='blue')
データフレームの列をにバイオリン図として描画する	sns.violinplot(x='カテゴリ列', y='列', data=df)
option: ダークバイオレットに色を変更する	color = 'darkviolet'
option: 色をカデットブルーに設定する	color = 'cadetblue'
ダークグリーン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='darkgreen')
非英数字が文字列中にあるか	any(not c.isalnum() for c in s)
option: パールバイオレットレッドを使う	color = 'palevioletred'
黒い左三角マーカーとして散布図を描画する	plt.plot(データ列x, データ列y, marker='<', c='k')
JSONL形式のファイルからデータフレームを読み込む	pd.read_json(filename, orient='records', lines=True)
ヒストグラムの色を青紫に設定する	plt.hist(データ列, color='violet')
数式の積分を求める	sympy.integrate(e)
データフレームのリストカラムの中に含まれる文字列と日付データの数を求める	df[aList].isin([value, value2]).sum()
文字列がタプルに含まれないか調べる	element not in aTuple
データ列を折れ線グラフで描画する	plt.plot(データ列x, データ列y)
実数のアークサイン	math.asin(x)
ダークゴールデンロッド色で横棒グラフを描画する	plt.barh(データ列x, データ列y, color='darkgoldenrod')
ファイルにxを文字列に変換して書き込む	f.write(str(x))
ダークオリーブグリーン色で散布図を描画する	plt.scatter(データ列x, データ列y, color='darkolivegreen')
値が集合に含まれないか	element not in aSet
データフレームを表示するとき、行数をnに設定する	pd.set_option('display.max_rows', n)
現在のタイムスタンプ	int(time.time())
グラフを淡くする	sns.set(pallete='muted')
回帰モデルを当てはめる	model.fit(説明変数, 目的変数)
棒グラフの色をプラムにする	plt.bar(データ列x, データ列y, color='plum')
折れ線グラフの色をビスクにセットする	plt.plot(データ列x, データ列y, color='bisque')
option: チョコレートを使う	color = 'chocolate'
データフレームを列でグループ化してそれぞれのグループごとの平均値を求める	df.groupby(column).mean()
バリーウッド色を用いて横棒グラフを描画する	plt.barh(データ列x, データ列y, color='burlywood')
重複していない行のみ	df[not df.duplicated(keep=False)]
等差数列から整数乱数を発生させる	random.randrange(start, end, step)
データフレームの中の欠損値を削除する	df.dropna()
３変数の最小値	min(x, y, z)
二つの文字列は等しくないか	s != s2
整数nを八進表記に変換する	oct(n)
マルーンにヒストグラムの色を変更する	plt.hist(データ列, color='maroon')
nがn2かどうか調べる	n == n2
実数を小数点数で割った剰余を求める	math.remainder(x, x2)
両端キューのn番目に要素を挿入する	deq.insert(n, element)
option: グラフの色をライトスチールブルーに設定する	color = 'lightsteelblue'
棒グラフをパープル色を用いて描画する	plt.bar(データ列x, データ列y, color='purple')
文字列が文字列リストにあるか調べる	s in aStringList
プロットにy=0の破線をつける	plt.axhline(y=0, linestyle='dashed')
棒グラフをダークオーキッド色として描画する	plt.bar(データ列x, データ列y, color='darkorchid')
文字列中のカタカナを平仮名に変換する	''.join([chr(ord(ch) - 96) if ('ァ' <= ch <= 'ン') else ch for ch in s])
現在の再帰の最大回数を確認する	sys.getrecursionlimit()
組のn番目のを使う	aTuple[n]
日付データが何日か知る	aDate.day
等しい量になるようにデータフレームの中の列をn個にビン分割する	pd.qcut(df[col], n)
カテゴリ別で色分けして、データフレームのカーネル密度分布を描画する	sns.kdeplot(x='列名', hue='カテゴリ列', data=df)
改行なしに二つの文字列をプリントする	print(value, value2, end='')
ひらがなを片仮名に変換する	''.join([chr(ord(ch) + 96) if ('ぁ' <= ch <= 'ん') else ch for ch in s])
折れ線グラフに右三角マーカーを使う	plt.plot(データ列x, データ列y, marker='>')
折れ線グラフをダークバイオレット色で描画する	plt.plot(データ列x, データ列y, color='darkviolet')
カウンタを少ない方からリストとして得る	aCounter.most_common()[::-1]
横棒グラフをサドルブラウン色を用いて描画する	plt.barh(データ列x, データ列y, color='saddlebrown')
ナバホホワイト色を用いてヒストグラムを描画する	plt.hist(データ列, color='navajowhite')
折れ線グラフをライトスカイブルー色で描画する	plt.plot(データ列x, データ列y, color='lightskyblue')
散布図をナバホホワイト色で描画する	plt.scatter(データ列x, データ列y, color='navajowhite')
グラフの色を明るくする	sns.set(pallete='bright')
option: マーカーの色をグレーにする	markerfacecolor = 'gray'
ヒストグラムを一点鎖線で描画する	plt.hist(データ列, linestyle='dashbot')
文字列中に部分文字列が含まれるか調べる	sub in s
横棒グラフの色をオールドレースにする	plt.barh(データ列x, データ列y, color='oldlace')
数値を黒色にする	f'\033[30m{value}\033[0m'
ポイントマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='.')
option: マーカーの色をダークグレーにする	markerfacecolor = 'darkgrey'
ロバストな線形回帰分析の準備をする	model = sklearn.linear_model.HuberRegressor()
数式の部分分数化を行う	sympy.apart(e)
辞書の項目数	len(aDict)
配列から重複を除いた行列を作る	np.unique(aArray)
プラム色の線グラフを描画する	plt.plot(データ列x, データ列y, color='plum')
データフレームをグループ化して、ヒストグラムを使って可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
ミディアムアクアマリン色の散布図を描画する	plt.scatter(データ列x, データ列y, color='mediumaquamarine')
モカシンにヒストグラムの色をセットする	plt.hist(データ列, color='moccasin')
データフレームを二つの列によって並べ直して、更新する	df.sort_values(by=['A', 'B'], inplace=True)
折れ線グラフの色をゴーストホワイトに変更する	plt.plot(データ列x, データ列y, color='ghostwhite')
パパイヤウィップ色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='papayawhip')
option: パープルにグラフの色を設定する	color = 'purple'
線グラフの色をライトスレイグレーに設定する	plt.plot(データ列x, データ列y, color='lightslategray')
散布図を耐火レンガ色として描画する	plt.scatter(データ列x, データ列y, color='firebrick')
option: カーキを用いる	color = 'khaki'
xの小数点以下'4'桁までをプリントする	print(':.4f'.format(x))
データフレームを100の位で丸める	df.round(-2)
ヒストグラムの色をダークサーモンにセットする	plt.hist(データ列, color='darksalmon')
折れ線グラフの印を丸にする	plt.plot(データ列x, データ列y, marker='o')
ダークバイオレット色を用いて棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkviolet')
データ列の中の欠損値の合計をカウントする	ds.isna().sum()
option: グラフの色をナバホホワイトに設定する	color = 'navajowhite'
ファイルを文字列の示すエンコーディングとして書き込み用にオープンする]	open(filepath, mode='w', encoding=s)
ディムグレー色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='dimgrey')
列'A'と列'B'をキーにして二つのデータフレームを右結合する	pd.merge(df, df2, left_on=column, right_on=column2, how='right')
配列の推移を半透明の実線を用いて描画する	plt.plot(データ列x, データ列y, linestyle='solid', alpha=0.5)
フォーマットとしてデータフレームのcollをPandasの日付型に変換する	pd.to_datetime(df[col], format='%Y-%m-%d')
デピンク色の散布図を描画する	plt.scatter(データ列x, データ列y, color='deeppink')
タンジェントを計算する	math.tan(x)
赤い横棒グラフを描画する	plt.barh(データ列x, データ列y, color='r')
散布図をダークグレー色で描画する	plt.scatter(データ列x, データ列y, color='darkgrey')
カウンタの正の数のみ残す	+aCounter
書式をargsを引数としてフォーマットする	formatText.format(*args)
配列と列をzipする	itertools.zip_longest(iterable, iterable2)
散布図のバツマーカーの大きさを変更する	plt.scatter(データ列x, データ列y, marker='x', markersize=2.0)
イテラブルとイテラブルをペアのリストにする	itertools.zip_longest(iterable, iterable2)
データフレームの列をヒストグラムにする	plt.hist(df[column])
リストとイテラブルをペア化する	itertools.zip_longest(iterable, iterable2)
データフレームを列で分類して、それぞれのグループ毎の標準偏差を求める	df.groupby(column).std()
ペアリストpairsからカウンタを作成する	collections.Counter(dict(pairs))
両端キューの末尾からデータを取り除く	deq.pop()
３自然数のGCDを算出する	math.gcd(n, n2, n3)
スカイブルー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='skyblue')
日付データからn週間を減算する	aDate - datetime.timedelta(weeks=n)
左三角印で散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
リネン色のヒストグラムを描画する	plt.hist(データ列, color='linen')
ファイルをバイナリ書き込みモードでオープンする]	open(filepath, mode='wb')
xでデータフレームのカラムの未入力値を埋める	df[col].fillna(x)
ローングリーン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lawngreen')
リストが空でない	len(aList) != 0
データフレームの相関行列ケンドール相関係数でを計算する	df.corr(method='kendall')
option: 文字コードtextを用いる	encoding = text
横棒グラフをスチールブルー色で描画する	plt.barh(データ列x, データ列y, color='steelblue')
ダークスラテグレー色を用いてヒストグラムを描画する	plt.hist(データ列, color='darkslategray')
option: グラフの色をコーンズシルクに設定する	color = 'cornsilk'
nがn2より小さいかどうか調べる	n < n2
データフレームを回帰直線付き散布図にする	sns.regplot(data=df, x='列名', y='列名')
組の先頭のn要素を取り除く	aTuple[n:]
文字列中から部分文字列を探す	s.find(sub)
nとkのコンビネーション	math.comb(n, k)
nプラスn2を算出する	n + n2
データフレームのカラムの値をValueMapでまとめて変更する	df[col].replace(ValueMap)
データフレームから破壊的に重複したデータを消す	df.drop_duplicates(inplace=True)
option: ライトグレーにグラフの色を設定する	color = 'lightgray'
データフレームの指定された列をリストとして抽出する	df[column].values.tolist()
option: 色をダークスラテグレーに設定する	color = 'darkslategray'
タプルにキーが存在しているいるかどうか調べる	key in aDict
散布図の色をスカイブルーにする	plt.scatter(データ列x, データ列y, color='skyblue')
新しい単回帰モデルを用意する	model = sklearn.linear_model.LinearRegression()
データフレームとデータ列を横方向に連結する	pd.concat([df, ds], axis=1)
配列のユニークな要素とその位置	u, indices = np.unique(aArray, return_index=True)
xを文字列に変換する	str(x)
ValueMapでまとめてデータフレームを置き換える	df.replace(ValueMap)
KNNとしてクラス分類を行う	model = sklearn.neighbors.KNeighborsClassifier(n_neighbors=5)
ヒストグラムをダークオレンジ色で描画する	plt.hist(データ列, color='darkorange')
組の要素を昇順にソートする	sorted(aTuple, reverse=False)
乱数で要素を埋めた行列を作成する	np.random.random((行数, 列数))
データフレームの未入力値を後の行の値に設定する	df.fillna(method='bfill')
ヒストグラムの色をロージーブラウンに指定する	plt.hist(データ列, color='rosybrown')
リストとリストについてリストの値に応じて、散布図の色を変える	plt.scatter(データ列x, データ列y, c=aList, cmap='Blues')
ダーク・スラテグレー色の棒グラフを描画する	plt.bar(データ列x, データ列y, color='darkslategrey')
折れ線グラフをシャルトリューズ色で描画する	plt.plot(データ列x, データ列y, color='chartreuse')
ヒストグラムの色をライトコーラルに設定する	plt.hist(データ列, color='lightcoral')
文字列はタイトルケースかどうか調べる	s.istitle()
横方向に２つのデータフレームをマージする	pd.merge(df, df2)
データフレームを列によって小さい順にソートして、更新する	df.sort_values(by=column, ascending=True, inplace=True)
マルーン色の線グラフを描画する	plt.plot(データ列x, データ列y, color='maroon')
散布図に赤いポイントマーカーを使う	plt.plot(データ列x, データ列y, marker='.', c='r')
カテゴリで色分けして、データフレームをにバイオリン図で見る	sns.violinplot(x='カテゴリ列', y='列', hue='カテゴリ列', data=df)
散布図の色をタンにする	plt.scatter(データ列x, データ列y, color='tan')
option: 赤色を使う	color = 'red'
リストをnから順序付けする	enumerate(aList, start=n)
option: フクシア色を使う	color = 'fuchsia'
option: マーカーの色をスラグレーにする	markerfacecolor = 'slategray'
ライトサーモン色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lightsalmon')
リストの各値を関数に適用した結果でソートする	sorted(aList, key=func)
両端キューの中にデータが含まれてるか調べる	element in deq
option: マーカーの色をシーグリーンにする	markerfacecolor = 'seagreen'
ネイビー色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='navy')
横棒グラフの色をダークシアグリーンにする	plt.barh(データ列x, データ列y, color='darkseagreen')
横棒グラフをバイオレット色で描画する	plt.barh(データ列x, データ列y, color='violet')
円プロットを時計回りに描画する	plt.pie(データ列, startangle=90, counterclock=False)
n個に等間隔でデータフレームの中の列をビニングし、namesのラベルをつける	pd.cut(df[col], n, labels=names)
option: グラフの色をライトグリーンに変更する	color = 'lightgreen'
既存のファイルをBOM付きで追加できるようにオープンする]	open(filepath, mode='a', encoding='utf_8_sig')
データ列の曜日	ds.dt.weekday_name
折れ線グラフの色を青にする	plt.plot(データ列x, データ列y, color='blue')
正規分布にしたがってデータ列の値が発生する累積確率を算出する	scipy.stats.norm.cdf(データ列, loc=平均値, scale=標準偏差)
グラフを画面用に設定する	sns.set(context='notebook')
データフレームのn行より前抽出する	df[:n]
四分位点で標準化する	sklearn.preprocessing.RobustScaler().fit_transform(データ)
実数に実数を加算する	x + y
データフレームを表示するとき、表示可能な最大行数をnに設定する	pd.set_option('display.max_rows', n)
折れ線グラフのマーカーを三角にする	plt.plot(データ列x, データ列y, marker='^')
カウンタ同士で積集合演算する	aCounter & aCounter2
赤い大バツマーカーをリストと配列についての散布図にプロットする	plt.plot(データ列x, データ列y, marker='X', c='r')
リストと数列についての散布図にrgbのバツマーカーを描く	plt.plot(データ列x, データ列y, marker='x', c=rgb)
データフレームをインデックスによって昇順に並べ直す	df.sort_index(ascending=True)
シルバー色のヒストグラムを描画する	plt.hist(データ列, color='silver')
リストと配列について散布図を描画して、マーカーを丸に設定する	plt.plot(データ列x, データ列y, marker='o')
散布図の色をライトスレイグレーにする	plt.scatter(データ列x, データ列y, color='lightslategrey')
線グラフをブラック色で描画する	plt.plot(データ列x, データ列y, color='black')
右三角印でデータ列の折れ線グラフを描画する	plt.plot(データ列x, データ列y, marker='>')
データフレームのリストカラムがどれだけ、分散しているか見る	df[aList].var()
赤いバツマーカーを散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='r')
タプルの値を並べる	sorted(aTuple)
リスト中の文字列が最初に見つかるインデックス	aList.index(element)
タン色として折れ線グラフを描画する	plt.plot(データ列x, データ列y, color='tan')
散布図に青い大バツマーカーを描画する	plt.scatter(データ列x, データ列y, marker='X', markerfacecolor='b')
リストとリストについての散布図に左三角マーカーを描画する	plt.plot(データ列x, データ列y, marker='<')
イテラブルからサンプリングする	random.sample(iterable)
折れ線グラフの色をペルーにセットする	plt.plot(データ列x, データ列y, color='peru')
句点文字を全て使う	string.punctuation
ハニーデューにヒストグラムの色を変更する	plt.hist(データ列, color='honeydew')
散布図の色を青紫にする	plt.scatter(データ列x, データ列y, color='violet')
ディムグレー色で棒グラフを描画する	plt.bar(データ列x, データ列y, color='dimgrey')
三変数の最大値を求める	max(x, y, z)
データ列の折れ線グラフを丸印で描画する	plt.plot(データ列x, データ列y, marker='o')
スプリンググリーン色として横棒グラフを描画する	plt.barh(データ列x, データ列y, color='springgreen')
1文字だけ標準入力から読む	sys.stdin.read(1)
データ列の離れ具合を可視化する	sns.residplot(x=データ列, y=データ列)
データフレームのひとつの列だけ説明変数にする	説明変数 = df[['列名']]
文字列中に非小文字が含まれるか調べる	any(not c.islower() for c in s)
イテラブルの重複コンビネーション	itertools.combinations_with_replacement(iterable, n)
ベクトル間のユークリッド距離	math.dist(point, point2)
option: スノーに色を設定する	color = 'snow'
データ列の時刻を使う	ds.dt.hour
グリッド線を赤くする	plt.grid(color='r')
ヒストグラムを三つ並べて描画する	plt.hist([データ列, データ列, データ列], color=['b', 'r', 'g'])
セットにシーケンスを追加する	aSet.update(iterable)
文字列を部分文字列で分けた場合の残りの文字列を使う	s.partition(sub)[-1]
黒いバツ印を散布図に描画する	plt.scatter(データ列x, データ列y, marker='x', markerfacecolor='k')
散布図の下三角マーカーの線幅を変更する	plt.scatter(データ列x, データ列y, marker='v', markeredgewidth=2.5)
折れ線グラフの色をドジャーブルーに設定する	plt.plot(データ列x, データ列y, color='dodgerblue')
配列間の要素ごとの最小公倍数	np.lcm(aArray, aArray2)
データフレームのカテゴリデータをベクトルに変換する	pd.get_dummies(df)
option: グラフの色をダークシアンにする	color = 'darkcyan'
データ列の分散を求める	ds.var()
リストとリストについての散布図に黒いダイアモンドマーカーを描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
ライム色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='lime')
ダークマゼンタ色の線グラフを描画する	plt.plot(データ列x, データ列y, color='darkmagenta')
option: マーカーの色をパレットトルコイズにする	markerfacecolor = 'paleturquoise'
角度のラジアン	math.radians(degree)
線グラフをライトグレー色として描画する	plt.plot(データ列x, データ列y, color='lightgrey')
データフレームを10の位で丸めて、整数型にする	df.round(-1).astype(int)
データ列の折れ線グラフを描画して、色をカラーコードで設定する	plt.plot(データ列x, データ列y, color='#800080')
データフレームのリスト列の欠損値をメディアンにする	df[aList].fillna(df[aList].median())
データフレームからカテゴリデータの列のみ抽出する	df.select_dtypes('object')
小麦色色の横棒グラフを描画する	plt.barh(データ列x, データ列y, color='wheat')
既存のファイルをUTF8として追加できるようにオープンする]	open(filepath, mode='a', encoding='utf-8')
ヒストグラムをスノー色として描画する	plt.hist(データ列, color='snow')
横棒グラフをコーラル色で描画する	plt.barh(データ列x, データ列y, color='coral')
データフレームをグループ化して、ヒストグラムを用いて可視化する	sns.histplot(df, x='列名', hue='カテゴリ名')
ライトブルー色の線グラフを描画する	plt.plot(データ列x, データ列y, color='lightblue')
option: 読み込まないフッタをnに設定する	skipfooter = n
黒いダイアモンドマーカーで散布図を描画する	plt.plot(データ列x, データ列y, marker='D', c='k')
左三角マーカーで散布図を描画する	plt.scatter(データ列x, データ列y, marker='<')
